Summary,Issue key,Issue id,Issue Type,Status,Project key,Project name,Project type,Project lead,Project description,Project url,Priority,Resolution,Assignee,Reporter,Creator,Created,Updated,Last Viewed,Resolved,Affects Version/s,Affects Version/s,Affects Version/s,Affects Version/s,Affects Version/s,Affects Version/s,Fix Version/s,Component/s,Due Date,Votes,Labels,Labels,Labels,Labels,Labels,Labels,Labels,Labels,Labels,Labels,Labels,Labels,Labels,Description,Environment,Original Estimate,Remaining Estimate,Time Spent,Work Ratio,Σ Original Estimate,Σ Remaining Estimate,Σ Time Spent,Security Level,Inward issue link (Backport),Outward issue link (Backport),Outward issue link (Backport),Outward issue link (Backport),Outward issue link (Backport),Outward issue link (Backport),Outward issue link (Backport),Outward issue link (Backport),Outward issue link (Backport),Inward issue link (Blocks),Inward issue link (Blocks),Outward issue link (Blocks),Outward issue link (Blocks),Outward issue link (CSR),Inward issue link (Cloners),Outward issue link (Cloners),Inward issue link (Duplicate),Inward issue link (Duplicate),Outward issue link (Duplicate),Outward issue link (Duplicate),Outward issue link (Duplicate),Outward issue link (Duplicate),Inward issue link (Relates),Inward issue link (Relates),Inward issue link (Relates),Inward issue link (Relates),Outward issue link (Relates),Outward issue link (Relates),Outward issue link (Relates),Outward issue link (Relates),Outward issue link (Relates),Attachment,Attachment,Attachment,Attachment,Attachment,Attachment,Custom field ( Type of Bug [Challenge] ),Custom field (CPU),Custom field (CPU),Custom field (Cost of Delay),Custom field (Epic Link),Custom field (Imported),Custom field (Indexed),Custom field (Introduced In Build),Custom field (Introduced In Version),Custom field (Number of Tests Affected [Challenge]),Custom field (OS),Custom field (OS),Custom field (OS),Custom field (Oracle Evaluation),Custom field (Original story points),Custom field (Parent Link),Custom field (Rank),Custom field (Rank (Obsolete)),Custom field (Resolved In Build),Custom field (Story Points),Custom field (Subcomponent),Custom field (Target end),Custom field (Target start),Custom field (Team),Custom field (Time Spent),Custom field (Understanding),Custom field (Value),Custom field (Verification),Custom field (external_bug),Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment
Add GitHub user pejovica,SKARA-1926,5102210,Bug,Resolved,SKARA,Skara,software,darcy,,,P4,Fixed,erikj,apejovic,apejovic,2023-05-31 05:41,2023-06-01 07:43,2023-10-01 09:55,2023-06-01 07:43,,,,,,,,admin,,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i31ql7:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
"When archiving a comment, mlbridgeBot would strip everything after the first command",SKARA-1925,5101841,Bug,Resolved,SKARA,Skara,software,darcy,,,P4,Fixed,zsong,zsong,zsong,2023-05-25 08:55,2023-06-05 13:31,2023-10-01 09:55,2023-06-05 13:31,,,,,,,1.0,bots,,0,,,,,,,,,,,,,,"A user reported that there is no email generated for this comment.
https://github.com/openjdk/jdk/pull/14114#issuecomment-1562126987

It is caused by the initial /csr needed command.

Currently, when archiving a comment, mlbridgeBot would strip everything after the first command. This is bad.

I think we could use the same strategy in CommandExtractor#extractCommands to filter out commands.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,SKARA-755,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i31ob7:",9223372036854775807,,,,,,,,,,,,"2023-06-01 15:27;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/skara/pull/1524
Date: 2023-06-01 22:22:25 +0000;;;","2023-06-05 13:31;roboduke;Changeset: 86e474e7
Author:    Zhao Song <zsong@openjdk.org>
Date:      2023-06-05 20:30:41 +0000
URL:       https://git.openjdk.org/skara/commit/86e474e7b5679f5635a2f055e7992dd7ad5d1226
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Associate GitHub account jankratochvil with OpenJDK user jkratochvil,SKARA-1915,5101563,Bug,Resolved,SKARA,Skara,software,darcy,,,P4,Fixed,erikj,jkratochvil,jkratochvil,2023-05-23 04:16,2023-05-23 05:44,2023-10-01 09:55,2023-05-23 05:44,,,,,,,,admin,,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i31mlf:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
IssuePoller always returns the most recently updated issue even if it has already been handled,SKARA-1914,5101268,Bug,Resolved,SKARA,Skara,software,darcy,,,P4,Fixed,zsong,zsong,zsong,2023-05-18 16:05,2023-05-22 09:14,2023-10-01 09:55,2023-05-22 09:14,,,,,,,1.0,bots,,0,,,,,,,,,,,,,,"When I was testing with SKARA-1912, I observed an issue in the IssuePoller. Although some updated csr issues has been handled in the previous round, the most recently updated csr issue would be returned again in the next round. Therefore, this would trigger the CSRIssueWorkItem and CheckWorkItem to update the PR very frequently.

Erik investigated it and found the root cause.

In the IssuePoller#updatedIssues, the poller first queries for updated issues (which may include some handled issues due to the imprecise timestamp, measured in minutes). Subsequently, the poller checks whether the issues have been really updated by comparing them with their copies using JiraIssue#equals. In this method, we compare the json of the issue with our own copy. If the issues are really updated, the poller returns them.

Originally, the JiraIssue#equals method worked well. However, now, when the poller uses the REST API to retrieve the JSON of the issue, it includes a field called ""customfield_11700,"" which represents the ""Development"" field used by Jira to display data quickly and easily in the issues. Within this field, there are various objects, such as ""SummaryItemBean@5e105688."" These objects change each time the poller makes a query. Therefore, even if the issue has not actually been updated, the JiraIssue#equals method will return false.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i31kxv:",9223372036854775807,,,,,,,,,,,,"2023-05-19 11:19;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/skara/pull/1522
Date: 2023-05-19 18:16:24 +0000;;;","2023-05-22 09:14;roboduke;Changeset: 63d149ad
Author:    Zhao Song <zsong@openjdk.org>
Date:      2023-05-22 16:14:15 +0000
URL:       https://git.openjdk.org/skara/commit/63d149adb0a4b4640875f9a6462f6bc2c5f60340
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Add GitHub user olivergillespie,SKARA-1911,5100915,Bug,Resolved,SKARA,Skara,software,darcy,,,P4,Fixed,erikj,ogillespie,ogillespie,2023-05-15 01:26,2023-05-15 06:32,2023-10-01 09:55,2023-05-15 06:32,,,,,,,,admin,,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i31irf:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Empty GET calls should be left empty,SKARA-1909,5100730,Bug,Resolved,SKARA,Skara,software,darcy,,,P1,Fixed,erikj,erikj,erikj,2023-05-11 06:13,2023-05-11 08:24,2023-10-01 09:55,2023-05-11 08:24,,,,,,,1.0,libraries,,0,,,,,,,,,,,,,,"Over the last week, we have had issues with JBS returning weird errors seemingly randomly, which has caused a lot of problems with the bots. It turns out our hosting provider has become more stringent with handling http/2 requests and no longer likes GET requests with a request body. Skara currently always fills in the body of a request, regardless of type, with an empty JSON document '{}' when the body is empty. This seems to be faulty behavior and we should let empty GET calls be empty instead.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i31hmb:",9223372036854775807,,,,,,,,,,,,"2023-05-11 06:16;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/skara/pull/1519
Date: 2023-05-11 13:15:34 +0000;;;","2023-05-11 08:24;roboduke;Changeset: d62a0c07
Author:    Erik Joelsson <erikj@openjdk.org>
Date:      2023-05-11 15:24:19 +0000
URL:       https://git.openjdk.org/skara/commit/d62a0c0702c06020f00b603aef2a6553c7912c63
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Add GitHub user karianna,SKARA-1908,5100648,Bug,Resolved,SKARA,Skara,software,darcy,,,P4,Fixed,kcr,karianna,karianna,2023-05-10 19:39,2023-05-11 05:34,2023-10-01 09:55,2023-05-11 05:34,,,,,,,,admin,,0,,,,,,,,,,,,,,"Following the process as per: https://wiki.openjdk.org/display/SKARA/Skara#Skara-AssociatingyourGitHubaccountandyourOpenJDKusername

",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i31h43:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
PR should not be integrated with the temporary issue failure,SKARA-1907,5100626,Bug,Resolved,SKARA,Skara,software,darcy,,,P4,Fixed,zsong,zsong,zsong,2023-05-10 11:02,2023-05-11 13:33,2023-10-01 09:55,2023-05-11 13:33,,,,,,,1.0,bots,,0,,,,,,,,,,,,,,"In SKARA-1899, we stopped all notifiers if we found temporary issue failure. However, it will introduce some problems. If the pr is integrated when the temporary issue failure is happening, the notifiers will not be trigger again because the pr bot will not update integrated pr body.

Also, if the pr is integrated with the temporary issue failure, it would make the issue never get resolved. So we shouldn't let user integrate the pr with the temporary issue failure.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i31gz7:",9223372036854775807,,,,,,,,,,,,"2023-05-10 16:28;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/skara/pull/1518
Date: 2023-05-10 18:12:20 +0000;;;","2023-05-11 13:33;roboduke;Changeset: f4b77000
Author:    Zhao Song <zsong@openjdk.org>
Date:      2023-05-11 20:32:20 +0000
URL:       https://git.openjdk.org/skara/commit/f4b7700009405aaf8c0d142cc3687f8c4fa95284
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Add GitHub user brianjstafford,SKARA-1904,5100556,Bug,Resolved,SKARA,Skara,software,darcy,,,P4,Fixed,kcr,bstafford,bstafford,2023-05-09 15:30,2023-05-10 05:34,2023-10-01 09:55,2023-05-10 05:34,,,,,,,,admin,,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i31gjn:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Verify User's repository access when processing backport command,SKARA-1903,5100551,Bug,Resolved,SKARA,Skara,software,darcy,,,P4,Fixed,zsong,zsong,zsong,2023-05-09 14:00,2023-06-05 09:00,2023-10-01 09:55,2023-06-05 09:00,,,,,,,1.0,bots,,0,,,,,,,,,,,,,,"In GitLab, every project is under a group. If user doesn't have access to the group, then the user will not be able to see any project under the group.

However, when processing backport command, the bot will not verify user's group membership, so that it's possible for the bot to create a pull request that is invisible to the user.

For example, if a user has access to ""groupA"" but not ""groupB"", then he can issue the ""/backport groupB/repo2"" command on one of the commits in ""groupA/repo1"". In this case, Skara bot would create a PR that is invisible to the user.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,SKARA-1109,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i31gij:",9223372036854775807,,,,,,,,,,,,"2023-05-10 10:20;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/skara/pull/1516
Date: 2023-05-09 21:05:01 +0000;;;","2023-06-05 09:00;roboduke;Changeset: 1ac2ffa4
Author:    Zhao Song <zsong@openjdk.org>
Date:      2023-06-05 15:59:56 +0000
URL:       https://git.openjdk.org/skara/commit/1ac2ffa4e297eba8dec482bc524be87aa5becfa7
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Add GitHub user m-schoene,SKARA-1901,5100223,Bug,Resolved,SKARA,Skara,software,darcy,,,P4,Fixed,kcr,mschoene,mschoene,2023-05-05 07:59,2023-05-05 08:05,2023-10-01 09:55,2023-05-05 08:05,,,,,,,,admin,,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i31ehn:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Add GitHub user mpdonova,SKARA-1900,5100222,Bug,Resolved,SKARA,Skara,software,darcy,,,P4,Fixed,kcr,mdonovan,mdonovan,2023-05-05 07:53,2023-05-05 07:57,2023-10-01 09:55,2023-05-05 07:57,,,,,,,,admin,,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i31ehf:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Stop notifiers when the PR bot fails to retrieve issue temporarily,SKARA-1899,5100144,Bug,Resolved,SKARA,Skara,software,darcy,,,P4,Fixed,zsong,zsong,zsong,2023-05-04 09:37,2023-05-04 14:16,2023-10-01 09:41,2023-05-04 14:16,,,,,,,1.0,bots,,0,,,,,,,,,,,,,,"A user reported that skara bot was editing the links in JDK-8306027 and generated many mail spam.

As Erik said, JDK-8306781is the CSR of JDK-8306027. JDK-8306781 was updated few hours ago and it triggered CSRIssueWorkItem to update the pull request(https://github.com/openjdk/jdk/pull/13661). However, when updating the pr, the bot failed to retrieve JDK-8306027 and printed ""⚠️ Temporary failure when trying to retrieve information on issue 8306027"" in the pr body. This update of PR body triggered PullRequestWorkItem in NotifyBot and make issueNotifier to update links to PR issues.

To resolve this issue, I think we could stop the notifiers when the bot finds temporary issue failure.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i31e03:",9223372036854775807,,,,,,,,,,,,"2023-05-04 12:36;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/skara/pull/1512
Date: 2023-05-04 17:54:15 +0000;;;","2023-05-04 14:16;roboduke;Changeset: 0b67e8fd
Author:    Zhao Song <zsong@openjdk.org>
Date:      2023-05-04 21:15:51 +0000
URL:       https://git.openjdk.org/skara/commit/0b67e8fdcb1f8231b18491f8d2581573fa63c792
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Add GitHub user gctony,SKARA-1895,5099684,Bug,Resolved,SKARA,Skara,software,darcy,,,P4,Fixed,erikj,tonyp,tonyp,2023-04-27 07:45,2023-04-27 08:31,2023-10-01 09:55,2023-04-27 08:31,,,,,,,,admin,,0,,,,,,,,,,,,,,"Hi there, can you add my GitHub account, gctony, to the OpenJDK organization. Thank you.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i31b5v:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Add GitHub user archiecobbs,SKARA-1889,5099271,Bug,Resolved,SKARA,Skara,software,darcy,,,P4,Fixed,kcr,acobbs,acobbs,2023-04-24 07:47,2023-04-24 07:56,2023-10-01 09:55,2023-04-24 07:56,,,,,,,,admin,,0,,,,,,,,,,,,,,"OpenJDK username: acobbs
GitHub username: archiecobbs",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i3191n:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Associate GitHub user viragpurnam with openJDK user vpurnam,SKARA-1887,5099166,Bug,Resolved,SKARA,Skara,software,darcy,,,P3,Fixed,kcr,vpurnam,vpurnam,2023-04-21 04:20,2023-04-21 05:48,2023-10-01 09:55,2023-04-21 05:37,,,,,,,,admin,,0,,,,,,,,,,,,,,Please add GitHub user viragpurnam and map it to user vpurnam,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i318eb:",9223372036854775807,,,,,,,,,,,,"2023-04-21 05:48;vpurnam;Is the mapping done? Thanks!;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Only configure CSRIssueBot for issuetrackers where we have CSR configured,SKARA-1886,5099069,Bug,Resolved,SKARA,Skara,software,darcy,,,P3,Fixed,zsong,erikj,erikj,2023-04-20 12:33,2023-04-21 09:21,2023-10-01 09:55,2023-04-21 09:21,,,,,,,1.0,bots,,0,,,,,,,,,,,,,,"The PullRequestBotFactory currently creates a CSRIssueBot for every IssueTracker configured. This causes unnecessary polling of IssueTrackers where no repositories have been configured with csr true. There could also be IssueTrackers that don't even support the CSR issue type, and those would trigger errors.

The factory needs to only create CSRIssueBot instances for IssueTrackers where it's needed.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i317sr:",9223372036854775807,,,,,,,,,,,,"2023-04-20 13:40;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/skara/pull/1506
Date: 2023-04-20 20:18:59 +0000;;;","2023-04-21 09:21;roboduke;Changeset: 15fee6fe
Author:    Zhao Song <zsong@openjdk.org>
Date:      2023-04-21 16:20:08 +0000
URL:       https://git.openjdk.org/skara/commit/15fee6fe63566d2ee64f38bf21f304bcd461dc4c
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Add GitHub user peter-hofer,SKARA-1882,5098711,Bug,Resolved,SKARA,Skara,software,darcy,,,P4,Fixed,kcr,phofer,phofer,2023-04-18 03:39,2023-04-18 04:01,2023-10-01 09:55,2023-04-18 04:01,,,,,,,,admin,,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i315l7:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Add GitHub user ahgross-java,SKARA-1880,5098381,Bug,Resolved,SKARA,Skara,software,darcy,,,P4,Fixed,erikj,ahgross,ahgross,2023-04-13 11:17,2023-04-13 12:27,2023-10-01 09:55,2023-04-13 12:27,,,,,,,,admin,,0,,,,,,,,,,,,,,Please add my user,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i313k3:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Make GitRepository#isEmptyCommit be compatible with old versions of Git,SKARA-1879,5098376,Bug,Resolved,SKARA,Skara,software,darcy,,,P4,Fixed,zsong,zsong,zsong,2023-04-13 10:29,2023-04-13 13:07,2023-10-01 09:55,2023-04-13 13:07,,,,,,,1.0,bots,,0,,,,,,,,,,,,,,"In SKARA-1854, we introduced a method GitRepository#isEmptyCommit. In addition, the git show command includes the option '--diff-merges=dense-combined' in git 2.30.0. However, this option is not available in old versions of git. To ensure compatibility with old versions of Git, we should replace '--diff-merges=dense-combined' with the '--cc' option.

References:
[1]https://git-scm.com/docs/git-show/2.29.0
[2]https://git-scm.com/docs/git-show/2.30.0",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i313iz:",9223372036854775807,,,,,,,,,,,,"2023-04-13 13:03;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/skara/pull/1501
Date: 2023-04-13 17:32:47 +0000;;;","2023-04-13 13:07;roboduke;Changeset: 80b3fc6a
Author:    Zhao Song <zsong@openjdk.org>
Date:      2023-04-13 20:05:56 +0000
URL:       https://git.openjdk.org/skara/commit/80b3fc6a6ac1cf1b813d1bcd45ff81447f4f6bdb
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Improve argument check in SKARA CLI,SKARA-1878,5098311,Bug,Resolved,SKARA,Skara,software,darcy,,,P4,Fixed,zsong,zsong,zsong,2023-04-12 10:07,2023-04-17 11:28,2023-10-01 09:55,2023-04-17 11:28,,,,,,,1.0,cli,,0,,,,,,,,,,,,,,"Currently, if a user misuses a command, in some cases, our CLI crashes and throws a stack trace, which is bad and does not provide useful information to the user. We need to improve error handling in SKARA CLI.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i3134j:",9223372036854775807,,,,,,,,,,,,"2023-04-13 16:39;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/skara/pull/1502
Date: 2023-04-13 22:54:06 +0000;;;","2023-04-17 11:28;roboduke;Changeset: e95942fa
Author:    Zhao Song <zsong@openjdk.org>
Date:      2023-04-17 18:27:03 +0000
URL:       https://git.openjdk.org/skara/commit/e95942fa0909874462bbccf354533f83d7bc3aa9
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Add GitHub user YaaZ,SKARA-1875,5098017,Bug,Resolved,SKARA,Skara,software,darcy,,,P4,Fixed,kcr,ngubarkov,ngubarkov,2023-04-06 00:13,2023-04-06 04:50,2023-10-01 09:55,2023-04-06 04:50,,,,,,,,admin,,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i311b7:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Add GitHub user jaskarth,SKARA-1874,5097988,Bug,Resolved,SKARA,Skara,software,darcy,,,P4,Fixed,kcr,jkarthikeyan,jkarthikeyan,2023-04-05 11:09,2023-04-05 11:52,2023-10-01 09:55,2023-04-05 11:52,,,,,,,,admin,,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i3114r:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Possible notification race with tags,SKARA-1873,5097908,Bug,Resolved,SKARA,Skara,software,darcy,,,P3,Fixed,zsong,erikj,erikj,2023-04-04 11:31,2023-04-26 08:38,2023-10-01 09:55,2023-04-26 08:38,,,,,,,1.0,bots,,0,,,,,,,,,,,,,,"If a new commit is integrated into a repository branch and quickly tagged, the notifier may miss updating the ""Resolved In Build"" field in the issue associated with that commit. This happens if the same RepositoryWorkItem instance handles both the tag and the commit, because it will handle the tag first, before a suitable backport has been created.

This just happened in SKARA-1871 where I resolved it by forcing a re-evaluation of the tag.

I think the order of notifications need to be reordered, but we should probably investigate closer to see if there is a reason for the current ordering.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,SKARA-1871,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i310mz:",9223372036854775807,,,,,,,,,,,,"2023-04-24 14:48;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/skara/pull/1507
Date: 2023-04-24 21:27:47 +0000;;;","2023-04-26 08:38;roboduke;Changeset: e51b2df0
Author:    Zhao Song <zsong@openjdk.org>
Date:      2023-04-26 15:37:29 +0000
URL:       https://git.openjdk.org/skara/commit/e51b2df0b42d344b6121316c4ee5fdfdbb325f12
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Resolved in Build field not set on Shenandoah Backport Entries,SKARA-1871,5097894,Bug,Resolved,SKARA,Skara,software,darcy,,,P4,Fixed,erikj,andrew,andrew,2023-04-04 10:03,2023-04-28 19:37,2023-10-01 09:55,2023-04-04 11:26,,,,,,,,admin,,0,,,,,,,,,,,,,,"I just pushed shenandoah8u332-b05:

https://github.com/openjdk/shenandoah-jdk8u/pull/10

The bug resolved in that promotion has had a Shenandoah backport bug created, but the resolved in build is still set to master:

https://bugs.openjdk.org/browse/JDK-8041523

rather than b05. Is there something we still need to do to make this work as expected?",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,SKARA-1574,,,,SKARA-1873,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i310jv:",9223372036854775807,,,,,,,,,,,,"2023-04-04 11:09;erikj;This was caused by a race in the Skara notifier bot. The tag was added quickly enough after the merge, so that both were handled by the same WorkItem instance. The RepositoryWorkItem handles tags first and commits in branches after. When handling the b05 tag, it didn't find any issues/backports with the appropriate fixVersion to update. After that it handled the commit and created the backport with the fixVersion.

To resolve this instance, I forced a re-evaluation of the b05 tag and the bug has now been updated.

I will file an issue to reorder operations in RepositoryWorkItem.;;;","2023-04-28 19:37;andrew;Thanks for diagnosing and fixing this. I'm glad it wasn't an issue with the tag parsing again.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Issue in Dev environment due to maven-checkstyle-plugin ,JMC-8079,5102372,Bug,Resolved,JMC,Java Mission Control,software,hirt,The production time profiling and diagnostics tools-suite for the HotSpot JDK.,,P3,Fixed,vpurnam,vpurnam,vpurnam,2023-06-01 22:34,2023-06-11 18:20,2023-10-01 09:55,2023-06-06 05:10,,,,,,,9.0.0,Mission Control Client,,0,,,,,,,,,,,,,,Issue in Dev environment due to maven-checkstyle-plugin ,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i31rl7:",9223372036854775807,,,,,,,,,,,,"2023-06-01 23:04;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jmc/pull/490
Date: 2023-06-02 05:58:04 +0000;;;","2023-06-06 05:09;roboduke;Changeset: 7324e965
Author:    Virag Purnam <vpurnam@openjdk.org>
Date:      2023-06-06 12:08:28 +0000
URL:       https://git.openjdk.org/jmc/commit/7324e965b56d78ebfcf51b3a3e1ba0ff780d583e
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Rule result visibility not always toggleable in Results Page,JMC-8073,5101754,Bug,Resolved,JMC,Java Mission Control,software,hirt,The production time profiling and diagnostics tools-suite for the HotSpot JDK.,,P4,Fixed,aptmac,aptmac,aptmac,2023-05-24 12:41,2023-05-28 18:19,2023-10-01 09:55,2023-05-26 06:07,,,,,,,9.0.0,Mission Control Client,,0,,,,,,,,,,,,,,"I encountered this while working on: https://bugs.openjdk.org/browse/JMC-5641

The rule result buttons in the Results ui are not always expandable. This happens if the corresponding page's result group contains an underscore (e.g., garbage_collection, vm_operations, method_profiling, etc.).

This only occurs on the single page html created in RulesHtmlToolkit. `createRuleHtml` has an attribute uuid, which in the case of the larger html report is a string of unique numbers. In the case of the single page html, it is instead the topic of the rule (e.g., garbage_collection). The actual of the id is combined with the uuid to create a unique id for the rule result button in the html. The `toggleVisibility()` function in`rules_overview.html` matches the button id by splicing at the first index of an underscore in the id, so any button using an underscore as it's uuid in this case will be prematurely spliced and result in a null error trying to expand the rule result.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i31nrv:",9223372036854775807,,,,,,,,,,,,"2023-05-25 12:59;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jmc/pull/487
Date: 2023-05-25 19:55:07 +0000;;;","2023-05-26 06:06;roboduke;Changeset: c0efa190
Author:    Alex Macdonald <aptmac@openjdk.org>
Date:      2023-05-26 13:06:20 +0000
URL:       https://git.openjdk.org/jmc/commit/c0efa19033199c3a495f53c29dd85af90d9b37c8
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Bump some maven plugins and fix warnings,JMC-8072,5101691,Bug,Resolved,JMC,Java Mission Control,software,hirt,The production time profiling and diagnostics tools-suite for the HotSpot JDK.,,P4,Fixed,clanger,clanger,clanger,2023-05-24 01:59,2023-05-28 18:19,2023-10-01 09:55,2023-05-24 12:42,,,,,,,9.0.0,Mission Control Core,,0,,,,,,,,,,,,,,Current maven build shows some warnings/validation errors that can be fixed by bumping plugin versions.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i31ndv:",9223372036854775807,,,,,,,,,,,,"2023-05-24 02:08;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jmc/pull/486
Date: 2023-05-24 09:02:22 +0000;;;","2023-05-24 12:42;roboduke;Changeset: 1562d41c
Author:    Christoph Langer <clanger@openjdk.org>
Date:      2023-05-24 18:16:33 +0000
URL:       https://git.openjdk.org/jmc/commit/1562d41c91c8a06ee242934819127e6e82c729db
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Cleanup after latest refactorings,JMC-8071,5101653,Bug,Resolved,JMC,Java Mission Control,software,hirt,The production time profiling and diagnostics tools-suite for the HotSpot JDK.,,P4,Fixed,clanger,clanger,clanger,2023-05-23 15:09,2023-05-28 18:19,2023-10-01 09:55,2023-05-24 11:13,,,,,,,9.0.0,Mission Control Core,,0,,,,,,,,,,,,,,"After JMC-7308, test JVMCommandLineToolkitTest.java should also move into core/common. Also, there are some Javadoc related warnings during core build which should be fixed.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i31n5f:",9223372036854775807,,,,,,,,,,,,"2023-05-23 15:16;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jmc/pull/485
Date: 2023-05-23 22:11:00 +0000;;;","2023-05-24 11:13;roboduke;Changeset: 5ee9b3fb
Author:    Christoph Langer <clanger@openjdk.org>
Date:      2023-05-24 18:09:38 +0000
URL:       https://git.openjdk.org/jmc/commit/5ee9b3fb5c59bd78654c8246a7d7218d46b69597
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
JMC Automated Analysis Page shows blank,JMC-8067,5099056,Bug,Resolved,JMC,Java Mission Control,software,hirt,The production time profiling and diagnostics tools-suite for the HotSpot JDK.,,P1,Fixed,vpurnam,vpurnam,vpurnam,2023-04-20 09:34,2023-04-23 23:58,2023-10-01 09:55,2023-04-20 23:06,,,,,,,9.0.0,Mission Control Core,,0,,,,,,,,,,,,,,"*JMC Automated Analysis Page shows blank with below error*

java.lang.NoClassDefFoundError: org/owasp/encoder/Encode
        at org.openjdk.jmc.flightrecorder.rules.report.html.internal.RulesHtmlToolkit.createSubHeading(RulesHtmlToolkit.java:208)
        at org.openjdk.jmc.flightrecorder.rules.report.html.internal.RulesHtmlToolkit.createSubHeading(RulesHtmlToolkit.java:213)
        at org.openjdk.jmc.flightrecorder.rules.report.html.internal.RulesHtmlToolkit.generateStructuredHtml(RulesHtmlToolkit.java:299)
        at org.openjdk.jmc.flightrecorder.ui.overview.ResultReportUi.createHtmlOverview(ResultReportUi.java:426)
        at org.openjdk.jmc.flightrecorder.ui.overview.ResultOverview.redisplay(ResultOverview.java:293)
        at org.openjdk.jmc.flightrecorder.ui.overview.ResultOverview.display(ResultOverview.java:259)
        at org.openjdk.jmc.flightrecorder.ui.JfrEditor.displayPage(JfrEditor.java:264)
        at org.openjdk.jmc.flightrecorder.ui.JfrEditor.navigateTo(JfrEditor.java:248)
        at org.openjdk.jmc.flightrecorder.ui.JfrEditor.refreshPages(JfrEditor.java:325)
        at org.openjdk.jmc.flightrecorder.ui.JfrEditor.repositoryLoaded(JfrEditor.java:418)
        at org.openjdk.jmc.flightrecorder.ui.RecordingLoader$1.run(RecordingLoader.java:158)
        at org.openjdk.jmc.ui.misc.DisplayToolkit$SafeRunnable.run(DisplayToolkit.java:61)
        at org.eclipse.swt.widgets.RunnableLock.run(RunnableLock.java:40)
        at org.eclipse.swt.widgets.Synchronizer.runAsyncMessages(Synchronizer.java:132)
        at org.eclipse.swt.widgets.Display.runAsyncMessages(Display.java:4029)
        at org.eclipse.swt.widgets.Display.readAndDispatch(Display.java:3645)
        at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine$5.run(PartRenderingEngine.java:1155)
        at org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:338)
        at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine.run(PartRenderingEngine.java:1046)
        at org.eclipse.e4.ui.internal.workbench.E4Workbench.createAndRunUI(E4Workbench.java:155)
        at org.eclipse.ui.internal.Workbench.lambda$3(Workbench.java:643)
        at org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:338)
        at org.eclipse.ui.internal.Workbench.createAndRunWorkbench(Workbench.java:550)
        at org.eclipse.ui.PlatformUI.createAndRunWorkbench(PlatformUI.java:171)
        at org.openjdk.jmc.rcp.application.Application.start(Application.java:64)
        at org.eclipse.equinox.internal.app.EclipseAppHandle.run(EclipseAppHandle.java:203)
        at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.runApplication(EclipseAppLauncher.java:136)
        at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.start(EclipseAppLauncher.java:104)
        at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:402)
        at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:255)
        at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
        at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
        at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
        at java.base/java.lang.reflect.Method.invoke(Method.java:566)
        at org.eclipse.equinox.launcher.Main.invokeFramework(Main.java:659)
        at org.eclipse.equinox.launcher.Main.basicRun(Main.java:596)
        at org.eclipse.equinox.launcher.Main.run(Main.java:1467)
Caused by: java.lang.ClassNotFoundException: org.owasp.encoder.Encode cannot be found by org.openjdk.jmc.flightrecorder.rules_9.0.0.202304200122
        at org.eclipse.osgi.internal.loader.BundleLoader.generateException(BundleLoader.java:541)
        at org.eclipse.osgi.internal.loader.BundleLoader.findClass0(BundleLoader.java:536)
        at org.eclipse.osgi.internal.loader.BundleLoader.findClass(BundleLoader.java:416)
        at org.eclipse.osgi.internal.loader.ModuleClassLoader.loadClass(ModuleClassLoader.java:168)
        at java.base/java.lang.ClassLoader.loadClass(ClassLoader.java:521)",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i317pv:",9223372036854775807,,,,,,,,,,,,"2023-04-20 10:22;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jmc/pull/479
Date: 2023-04-20 17:17:08 +0000;;;","2023-04-20 23:06;roboduke;Changeset: 7d888771
Author:    vpurnam <virag.purnam@oracle.com>
Committer: Suchita Chaturvedi <schaturvedi@openjdk.org>
Date:      2023-04-21 06:04:50 +0000
URL:       https://git.openjdk.org/jmc/commit/7d8887714ff5f2c8c0065f1e01f53997f5bc85ce
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Remove socket read illegal value,JMC-8065,5098347,Bug,Resolved,JMC,Java Mission Control,software,hirt,The production time profiling and diagnostics tools-suite for the HotSpot JDK.,,P4,Fixed,pxie,pxie,pxie,2023-04-13 02:25,2023-04-30 18:19,2023-10-01 09:55,2023-04-26 01:23,,,,,,,9.0.0,Mission Control Core,,0,,,,,,,,,,,,,,"!image-2023-04-13-17-50-57-838.png!

Socket read failure returns -1
Negative statistics affect accuracy",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"2023-04-13 02:50;pxie;image-2023-04-13-17-50-57-838.png;https://bugs.openjdk.org/secure/attachment/103431/image-2023-04-13-17-50-57-838.png",,,,,,,,,,,,,,,,,,,,,,"0|i313cj:",9223372036854775807,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@41b535f7,,,,,,,,,"2023-04-13 02:55;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jmc/pull/478
Date: 2023-04-13 09:48:30 +0000;;;","2023-04-26 01:23;roboduke;Changeset: 58c9ede2
Author:    bobpengxie <bobpengxie@tencent.com>
Committer: Christoph Langer <clanger@openjdk.org>
Date:      2023-04-26 08:22:29 +0000
URL:       https://git.openjdk.org/jmc/commit/58c9ede2aa1fb5c966f588f6576514ff0802e002
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Typo in agent wizard,JMC-8064,5098023,Bug,Resolved,JMC,Java Mission Control,software,hirt,The production time profiling and diagnostics tools-suite for the HotSpot JDK.,,P5,Fixed,hirt,hdafgard,hdafgard,2023-04-06 02:18,2023-09-03 18:20,2023-10-01 09:55,2023-08-28 04:42,,,,,,,9.0.0,Mission Control Core,,0,,,,,,,,,,,,,,PresetEditingWizardEventPage_MESSAGE_PRESET_EDITING_WIZARD_EVENT_PAGE_DESCRIPTION has a typo where 'preset' is spelled 'prset'.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i311cj:",9223372036854775807,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6c75159f,,,,,,,,,"2023-06-07 10:47;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jmc/pull/474
Date: 2023-03-02 23:30:23 +0000;;;","2023-08-28 04:42;roboduke;Changeset: 26bd7e62
Author:    Marius Volkhart <marius@volkhart.com>
Committer: Christoph Langer <clanger@openjdk.org>
Date:      2023-08-28 11:40:15 +0000
URL:       https://git.openjdk.org/jmc/commit/26bd7e62e05de10e95327e389e5448a68a6487e9
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
IMCFrame Type cache not synchronized,JMC-8063,5098020,Bug,Resolved,JMC,Java Mission Control,software,hirt,The production time profiling and diagnostics tools-suite for the HotSpot JDK.,,P2,Fixed,hirt,hdafgard,hdafgard,2023-04-06 01:56,2023-04-23 23:58,2023-10-01 09:55,2023-04-11 08:14,,,,,,,9.0.0,Mission Control Core,,0,,,,,,,,,,,,,,The type cache used in the IMCFrame Type inner class isn't synchronized and can thus causes a concurrent modification exception during e.g. JFR parsing.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i311bv:",9223372036854775807,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@41b535f7,,,,,,,,,"2023-04-06 02:17;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jmc/pull/476
Date: 2023-04-06 09:12:37 +0000;;;","2023-04-11 08:14;roboduke;Changeset: 8c0d1298
Author:    Pierre-Yves Bigourdan <pierreyves.bigourdan@datadoghq.com>
Committer: Marcus Hirt <hirt@openjdk.org>
Date:      2023-04-11 15:12:56 +0000
URL:       https://git.openjdk.org/jmc/commit/8c0d12982a921d6c7248ecc7cbf5672117715d81
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
ValueLayout:: arrayElementVarHandle doesn't throws UnsupportedOperationException - if byteAlignment() > byteSize(),JDK-8309398,5102440,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,mcimadamore,lkuskov,lkuskov,2023-06-02 14:32,2023-06-14 23:32,2023-10-01 09:55,2023-06-12 08:26,21,,,,,,21,core-libs,,0,,,,,,,,,,,,,,"ValueLayout ::arrayElementVarHandle
Throws: UnsupportedOperationException - if byteAlignment() > byteSize().

jshell> ValueLayout.JAVA_LONG_UNALIGNED.withByteAlignment(64)
$29 ==> 64%j8

But 

jshell> ValueLayout.JAVA_LONG_UNALIGNED.withByteAlignment(64).arrayElementVarHandle()
|  Exception java.lang.IllegalArgumentException: Element layout size is not multiple of alignment
|        at Utils.checkElementAlignment (Utils.java:181)
|        at MemoryLayout.sequenceLayout (MemoryLayout.java:626)
|        at MemoryLayout.sequenceLayout (MemoryLayout.java:646)
|        at ValueLayouts$AbstractValueLayout.arrayElementVarHandle (ValueLayouts.java:128)
|        at (#30:1)",,,,,,,,,,,JDK-8309864,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,b24,21,,,,,,,,"0|i31s0b:",9223372036854775807,b27,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@28ce6b78,,,,,,,,,"2023-06-02 15:36;mcimadamore;I've seen similar issues in MemorySegment::spliterator and MemorySegment::elements. I will fix these issues as part of this:
https://github.com/openjdk/jdk/pull/14098;;;","2023-06-06 03:32;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/14098
Date: 2023-05-23 11:48:59 +0000;;;","2023-06-12 08:26;dukebot;Changeset: 20371fd9
Author:    Maurizio Cimadamore <mcimadamore@openjdk.org>
Date:      2023-06-12 15:24:51 +0000
URL:       https://git.openjdk.org/jdk21/commit/20371fd918124451a068cb9647deebba7c9b4cba
;;;","2023-06-12 08:27;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk21/pull/7
Date: 2023-06-12 11:01:08 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
com/sun/jdi/JdbMethodExitTest.java fails with virtual threads due to a bug in determining the main thread id,JDK-8309396,5102438,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,cjplummer,cjplummer,cjplummer,2023-06-02 13:55,2023-08-16 14:50,2023-10-01 09:55,2023-06-06 14:58,21,,,,,,21,core-svc,,0,loom,noreg-self,,,,,,,,,,,,"JdbMethodExitTest.java tries to determine the jdb threadID for the ""main"" thread, and then later use it in jdb commands that require a threadID. It does this by first having the debuggee execute the following:

        System.out.println(""threadid=""+Thread.currentThread().getId());

And then later on the test parses the threadID from this output. The problem is that the id returned by getId() has no relation to threadIDs used by jdb, which are actually JDWP ObjectIDs. In the past this has worked due to some dumb luck. getID() always returns 1 for the main thread, which is always the thread we are executing in. Coincidentally the JDWP ObjectID for the main Thread object is also always 1 because this is the first ObjectID that the debug agent ever needs to create. However, when the debuggee main thread is a virtual thread, neither getId() nor JDWP assign 1 to the threadID, and in fact both will end up with very different values for the threadID. The end result is errors from jdb for using an invalid threadID.

The correct threadID can be obtained by executing the jdb ""threads"" command and parsing it from a line that looks like the following:

   (java.lang.VirtualThread)694            main            running (at breakpoint)

Note this test will also fail due to JDK-8309334 and JDK-8309397, which should be fixed first.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8281857,JDK-8285422,,,JDK-8309397,JDK-8309334,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i31rzv:",9223372036854775807,b26,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@3397f701,,,,,,,,,"2023-06-02 14:54;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/14294
Date: 2023-06-02 21:47:47 +0000;;;","2023-06-06 14:58;dukebot;Changeset: 65bdbc7a
Author:    Chris Plummer <cjplummer@openjdk.org>
Date:      2023-06-06 21:57:18 +0000
URL:       https://git.openjdk.org/jdk/commit/65bdbc7a8c06e5f119c9db832734664780933e01
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Remove non-failing tests from test/jdk/ProblemList-Virtual.txt,JDK-8309391,5102433,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,cjplummer,cjplummer,cjplummer,2023-06-02 12:59,2023-06-12 20:45,2023-10-01 09:55,2023-06-03 13:28,21,,,,,,21,core-svc,,0,loom,noreg-self,,,,,,,,,,,,"The following two tests no longer seem to be failing:

com/sun/jdi/RedefineG.java 8285422 generic-all
com/sun/jdi/RedefineTTYLineNumber.java 8285422 generic-all

They can be removed from the problem list.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8285422,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i31ryr:",9223372036854775807,b26,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@3397f701,,,,,,,,,"2023-06-02 13:15;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/14290
Date: 2023-06-02 20:08:15 +0000;;;","2023-06-03 13:28;dukebot;Changeset: fdb5893b
Author:    Chris Plummer <cjplummer@openjdk.org>
Date:      2023-06-03 20:26:46 +0000
URL:       https://git.openjdk.org/jdk/commit/fdb5893bf0ad277dbaa2aaffb76478d808d2431d
;;;","2023-06-05 00:03;mvs;[~cjplummer] I don't think this issue is related to 'client-libs' component. Can you remove the component 'client-libs' and update the bug with the actual component if it is wrongly added.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
6.5.6.1: Specify resolution of enum names in switches,JDK-8309372,5102413,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,gbierman,dlsmith,dlsmith,2023-06-02 10:05,2023-06-08 02:55,2023-10-01 09:55,2023-06-08 02:55,,,,,,,21,specification,,0,noreg-doc,,,,,,,,,,,,,"The treatment of enum constants in JLS has been inconsistent. In the past there were references to the scope of an enum constant that included switch labels, but these didn't really align with the idea of an implicit enum class field which is what is really being referenced.

Some details were fixed/clarified in 16:

- Much like record components, each enum constant *corresponds to* an implicit field of the same name. The enum constant and the field are distinct entities. (See 8.9.3.)

- An enum constant is thus not a *member* of an enum class—the member is the implicit field. (See changes to 6.1.) (This is important, because a lot of language rules apply to fields and say nothing about enum constants—like the treatment of duplicate names or the interpretation of static imports.)

- There is, in general, no special treatment of scope and name resolution for enum constants. The implicit field has a scope, and it works just like any other field. (See changes to 6.3, and the existing text of 6.5.6.)

However, some further changes are needed to clarify how an enum constant is handled in a switch label, where the implicit field is not in scope.

I think a good model for switch label name resolution is to think of it like a field access: the selector expression provides the context to search, and then the name is looked up in that context. That doesn't mean that the scope of a field magically extends to the syntax following a '.' for every expression of the declaring class's type. Scope is just not relevant in these contexts. (I mean, we could define scope in that way, but it would be unintuitive.)

Syntactically, a CaseConstant is a ConditionalExpression, which (many layers down) may be an ExpressionName (15.14). So we just need to make sure that ExpressionName is interpreted correctly. Concretely, 6.5.6.1:

---

If an expression name consists of a single *Identifier*, then:

-   **If the expression name appears as *CaseConstant* in a switch label ([14.11.1]), and the type of the selector expression of the enclosing `switch` statement or `switch` expression is an enum class type ([8.9]), and the enum class declares an enum constant with name *Identifier*, then the expression name refers to the corresponding implicit field of the enum class.**

-   **Otherwise, if** there ~~must be~~ **is** exactly one declaration denoting either a local variable, formal parameter, exception parameter, or field in scope at the point at which the identifier occurs**, then the expression name refers to the in-scope variable**.

-   Otherwise, a compile-time error occurs.

---

And in 8.9.1:

---

The rules concerning annotation modifiers for an enum constant declaration are specified in §9.7.4 and §9.7.5.

The Identifier in a EnumConstant ~~may be used in a name~~ **provides the name of an implicit field of the enum class ([8.9.3]) that can be used** to refer to the enum constant.

~~The scope and shadowing of an enum constant is specified in §6.3 and §6.4.1.~~

---

The sequencing of name resolution is intentional, giving priority to enum constant names over in-scope names. This allows these rules to seamlessly support the behavior of JEP 441, which is to attempt to match an enum constant name, and in case of a mismatch fall back to scope-based name resolution.

It is intentional that the rules for switch labels *do not* attempt to match any other fields of an enum class (such as an explicitly-declared static field).",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8309336,JDK-8300542,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i31rub:",9223372036854775807,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@7441ef8d,,,,,,,,,"2023-06-02 15:05;dlsmith;Accompanying change to the pattern switch spec:

-   ~~If _T_ is an enum type, then every `case` constant associated with the
   switch block that is an enum constant is the name of an enum
   constant of type _T_.~~

-   ~~If _T_ is not an enum type, then every `case` constant associated with the
   switch block that is the name of an enum constant is the qualified name
   of an enum constant whose type is assignment compatible with _T_ ([5.2]).~~

-   **For every `case` constant associated with the switch block that names an enum constant, the type of the `case` constant is assignment compatible with _T_ ([5.2]).**;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
[lworld] CDS is broken with InlineKlasses after the merge,JDK-8309357,5102398,Bug,Resolved,JDK,JDK,software,duke,,,P2,Fixed,fparain,thartmann,thartmann,2023-06-02 07:31,2023-07-10 08:19,2023-10-01 09:55,2023-07-10 08:19,repo-valhalla,,,,,,repo-valhalla,hotspot,,0,cds,lw4,lworld,,,,,,,,,,,"runtime/cds/appcds/dynamicArchive/DynamicArchiveRelocationTest.java
runtime/cds/appcds/dynamicArchive/HelloDynamicInlineClass.java

# A fatal error has been detected by the Java Runtime Environment:
#
#  SIGSEGV (0xb) at pc=0x00007f6150138a39, pid=2349455, tid=2349458
#
# JRE version: Java(TM) SE Runtime Environment (21.0) (fastdebug build 21-lworld4ea-LTS-2023-06-02-1236429.tobias.hartmann.valhalla)
# Java VM: Java HotSpot(TM) 64-Bit Server VM (fastdebug 21-lworld4ea-LTS-2023-06-02-1236429.tobias.hartmann.valhalla, mixed mode, sharing, tiered, compressed oops, compressed class ptrs, g1 gc, linux-amd64)
# Problematic frame:
# V  [libjvm.so+0xe52a39]  InlineKlass::initialize_calling_convention(JavaThread*)+0x2d9

Stack: [0x00007f6151f9b000,0x00007f615209c000],  sp=0x00007f61520989b0,  free space=1014k
Native frames: (J=compiled Java code, j=interpreted, Vv=VM code, C=native code)
V  [libjvm.so+0xe52a39]  InlineKlass::initialize_calling_convention(JavaThread*)+0x2d9  (inlineKlass.cpp:275)
V  [libjvm.so+0xe6cc28]  InstanceKlass::restore_unshareable_info(ClassLoaderData*, Handle, PackageEntry*, JavaThread*)+0xc8  (instanceKlass.cpp:2877)
V  [libjvm.so+0xe538d8]  InlineKlass::restore_unshareable_info(ClassLoaderData*, Handle, PackageEntry*, JavaThread*)+0x18  (inlineKlass.cpp:537)
V  [libjvm.so+0x17a3f1d]  SystemDictionary::load_shared_class(InstanceKlass*, Handle, Handle, ClassFileStream const*, PackageEntry*, JavaThread*)+0x34d  (systemDictionary.cpp:1248)
V  [libjvm.so+0x17a9a2b]  SystemDictionaryShared::load_shared_class_for_builtin_loader(Symbol*, Handle, JavaThread*)+0x1db  (systemDictionaryShared.cpp:97)
V  [libjvm.so+0x17a9ca3]  SystemDictionaryShared::find_or_load_shared_class(Symbol*, Handle, JavaThread*)+0x1f3  (systemDictionaryShared.cpp:416)
V  [libjvm.so+0x1024846]  JVM_FindLoadedClass+0x306  (jvm.cpp:1123)
j  java.lang.ClassLoader.findLoadedClass0(Ljava/lang/String;)Ljava/lang/Class;+0 java.base@21-lworld4ea",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8225638,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i31rqz:",9223372036854775807,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,,,"2023-06-05 05:21;thartmann;[~dsimms], I think the merge broke/removed the fix for JDK-8225638 and therefore the InlineKlassFixedBlock (reachable via _adr_valueklass_fixed_block) is not correctly restored from the archive. We crash in InlineKlass::initialize_calling_convention because InlineKlass::adr_extended_sig() is not writable memory.;;;","2023-07-07 11:04;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/valhalla/pull/883
Date: 2023-07-07 17:57:57 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
[lworld] C2 compilations fails with assert(false) failed: type flow analysis failed for OSR compilation,JDK-8309353,5102394,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,thartmann,thartmann,thartmann,2023-06-02 05:43,2023-06-02 06:22,2023-10-01 09:55,2023-06-02 06:22,repo-valhalla,,,,,,repo-valhalla,hotspot,,0,c2,lw4,lworld,,,,,,,,,,,"# A fatal error has been detected by the Java Runtime Environment:
#
#  Internal Error (/oracle/valhalla/open/src/hotspot/share/opto/parse1.cpp:518), pid=135637, tid=135645
#  assert(false) failed: type flow analysis failed for OSR compilation
#
# JRE version: Java(TM) SE Runtime Environment (21.0) (fastdebug build 21-lworld4ea-LTS-2023-06-02-1135579.tobias...)
# Java VM: Java HotSpot(TM) 64-Bit Server VM (fastdebug 21-lworld4ea-LTS-2023-06-02-1135579.tobias..., mixed mode, tiered, compressed oops, compressed class ptrs, serial gc, linux-amd64)
# Problematic frame:
# V  [libjvm.so+0x1537b8c]  Parse::Parse(JVMState*, ciMethod*, float)+0x118c

Stack: [0x00007f77b77fe000,0x00007f77b78ff000],  sp=0x00007f77b78fb920,  free space=1014k
Native frames: (J=compiled Java code, j=interpreted, Vv=VM code, C=native code)
V  [libjvm.so+0x1537b8c]  Parse::Parse(JVMState*, ciMethod*, float)+0x118c  (parse1.cpp:518)
V  [libjvm.so+0x87b6db]  ParseGenerator::generate(JVMState*)+0x16b  (callGenerator.cpp:100)
V  [libjvm.so+0xa2d4e6]  Compile::Compile(ciEnv*, ciMethod*, int, Options, DirectiveSet*)+0x1626  (compile.cpp:779)
V  [libjvm.so+0x878e8b]  C2Compiler::compile_method(ciEnv*, ciMethod*, int, bool, DirectiveSet*)+0x3eb  (c2compiler.cpp:118)
V  [libjvm.so+0xa39220]  CompileBroker::invoke_compiler_on_method(CompileTask*)+0xa00  (compileBroker.cpp:2265)
V  [libjvm.so+0xa3a088]  CompileBroker::compiler_thread_loop()+0x5f8  (compileBroker.cpp:1944)
V  [libjvm.so+0xefa39c]  JavaThread::thread_main_inner()+0xcc  (javaThread.cpp:720)
V  [libjvm.so+0x17faeaa]  Thread::call_run()+0xba  (thread.cpp:217)
V  [libjvm.so+0x14e25ec]  thread_native_entry(Thread*)+0x11c  (os_linux.cpp:775)",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8303951,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i31rq3:",9223372036854775807,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2023-06-02 06:19;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/valhalla/pull/857
Date: 2023-06-02 13:13:56 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Incorrect switch in enum not reported properly,JDK-8309336,5102371,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,jlahoda,jlahoda,jlahoda,2023-06-01 22:07,2023-06-12 20:46,2023-10-01 09:55,2023-06-04 23:27,,,,,,,21,tools,,0,,,,,,,,,,,,,,"Consider code like:
```
public class QualEnum {
    private void test(E e) {
        switch (e) {
            case ea -> {}
            default -> {}
        }
    }
    static final E ea = E.A;
    enum E {A}
}
```

This should fail to compile with a proper compile-time error, but it crashes javac:
```
java.lang.AssertionError
	at jdk.compiler/com.sun.tools.javac.util.Assert.error(Assert.java:155)
	at jdk.compiler/com.sun.tools.javac.util.Assert.check(Assert.java:46)
	at jdk.compiler/com.sun.tools.javac.comp.Lower$CompileTimeEnumMapping.caseValue(Lower.java:505)
	at jdk.compiler/com.sun.tools.javac.comp.Lower.visitEnumSwitch(Lower.java:3866)
...
```
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8309372,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i31rkz:",9223372036854775807,b26,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4dca67bd,,,,,,,,,"2023-06-02 05:53;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/14284
Date: 2023-06-02 12:47:08 +0000;;;","2023-06-04 23:27;dukebot;Changeset: 05fb6c66
Author:    Jan Lahoda <jlahoda@openjdk.org>
Date:      2023-06-05 06:25:00 +0000
URL:       https://git.openjdk.org/jdk/commit/05fb6c6648bc759853c5a9c5b932706592d87ba9
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
ProcessTools.main() does not properly set thread names when using the virtual thread wrapper,JDK-8309334,5102364,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,cjplummer,cjplummer,cjplummer,2023-06-01 20:20,2023-07-20 16:40,2023-10-01 09:55,2023-06-04 11:18,21,,,,,,21,hotspot,,0,noreg-self,,,,,,,,,,,,,"Normally when a virtual thread wrapper is used to run a test, the main thread is renamed to ""old-m-a-i-n"" and the new virtual thread that will act as the main thread is named ""main"". Neither is being done by `ProcessTools.main()`. This can cause problems for tests that expect the main thread that the test is running in to be called ""main"".

diff --git a/test/lib/jdk/test/lib/process/ProcessTools.java b/test/lib/jdk/test/lib/process/ProcessTools.java
index 115f2e96fc0..ed30efbb6fb 100644
--- a/test/lib/jdk/test/lib/process/ProcessTools.java
+++ b/test/lib/jdk/test/lib/process/ProcessTools.java
@@ -879,6 +879,8 @@ public final class ProcessTools {
         }
     }
 
+    public static final String OLD_MAIN_THREAD_NAME = ""old-m-a-i-n"";
+
     // ProcessTools as a wrapper
     // It executes method main in a separate virtual or platform thread
     public static void main(String[] args) throws Throwable {
@@ -894,7 +896,7 @@ public final class ProcessTools {
             // MainThreadGroup used just as a container for exceptions
             // when main is executed in virtual thread
             MainThreadGroup tg = new MainThreadGroup();
-            Thread vthread = startVirtualThread(() -> {
+            Thread vthread = createVirtualThread(() -> {
                     try {
                         mainMethod.invoke(null, new Object[] { classArgs });
                     } catch (InvocationTargetException e) {
@@ -903,6 +905,9 @@ public final class ProcessTools {
                         tg.uncaughtThrowable = error;
                     }
                 });
+            Thread.currentThread().setName(OLD_MAIN_THREAD_NAME);
+            vthread.setName(""main"");
+            vthread.start();
             vthread.join();
             if (tg.uncaughtThrowable != null) {
                 throw tg.uncaughtThrowable;
@@ -940,12 +945,12 @@ public final class ProcessTools {
         Throwable uncaughtThrowable = null;
     }
 
-    static Thread startVirtualThread(Runnable task) {
+    static Thread createVirtualThread(Runnable task) {
         try {
             Object builder = Thread.class.getMethod(""ofVirtual"").invoke(null);
             Class<?> clazz = Class.forName(""java.lang.Thread$Builder"");
-            Method start = clazz.getMethod(""start"", Runnable.class);
-            return (Thread) start.invoke(builder, task);
+            Method unstarted = clazz.getMethod(""unstarted"", Runnable.class);
+            return (Thread) unstarted.invoke(builder, task);
         } catch (RuntimeException | Error e) {
             throw e;
         } catch (Exception e) {
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8285422,JDK-8309396,,,JDK-8309397,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i31rjf:",9223372036854775807,b26,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@78d03d9a,,,,,,,,,"2023-06-02 14:11;cjplummer;This is causing the following 4 tests to fail:

com/sun/jdi/JdbMethodExitTest.java
com/sun/jdi/JdbStepTest.java
com/sun/jdi/JdbStopThreadTest.java
com/sun/jdi/JdbStopThreadidTest.java 

These tests also fail due to JDK-8309397, which will be fixed after this CR, and also com/sun/jdi/JdbMethodExitTest.java fails due to JDK-8309396, which will also subsequently be fixed.;;;","2023-06-02 14:36;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/14292
Date: 2023-06-02 21:30:46 +0000;;;","2023-06-04 11:18;dukebot;Changeset: ecb17532
Author:    Chris Plummer <cjplummer@openjdk.org>
Date:      2023-06-04 18:18:11 +0000
URL:       https://git.openjdk.org/jdk/commit/ecb17532dc8f3e271ad2d6550127a2253569cf9b
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
com/sun/jdi/DeferredStepTest.java fails with virtual threads due to not waiting for threads to exit,JDK-8309329,5102358,Bug,Resolved,JDK,JDK,software,duke,,,P5,Fixed,cjplummer,cjplummer,cjplummer,2023-06-01 15:57,2023-06-12 20:45,2023-10-01 09:55,2023-06-02 12:11,21,,,,,,21,core-svc,,0,loom,noreg-self,,,,,,,,,,,,"Virtual threads are always daemon threads, so tests that previously did not explicitly wait for test threads to exit sometimes fail with virtual threads due to the test exiting before the test threads have exited. A join() for each test thread is needed to fix this issue. 

com/sun/jdi/DeferredStepTest.java is one such tests. I looked at the other com/sun/jdi failures listed in JDK-8285422 and didn't see any others that might be failing for this same reason.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8285422,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i31ri3:",9223372036854775807,b26,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@3397f701,,,,,,,,,"2023-06-01 16:09;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/14275
Date: 2023-06-01 23:03:47 +0000;;;","2023-06-02 12:11;dukebot;Changeset: 1bb037bd
Author:    Chris Plummer <cjplummer@openjdk.org>
Date:      2023-06-02 19:09:56 +0000
URL:       https://git.openjdk.org/jdk/commit/1bb037bdc6cd76a15f85c05d8c1972ac53b9b3cd
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
[GenShen] TestAllocOutOfMemory#large failed,JDK-8309322,5102350,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,ysr,ysr,ysr,2023-06-01 14:04,2023-07-11 10:51,2023-10-01 09:55,2023-06-07 08:05,,,,,,,,hotspot,,0,gc-shenandoah,genshen,testbug,,,,,,,,,,,"Reported by Martin Doerr:

One test has failed on PPC64:
gc/shenandoah/oom/TestAllocOutOfMemory.java#large
Execution failed: `main' threw exception: java.lang.RuntimeException: 'java.lang.OutOfMemoryError: Java heap space' missing from stdout/stderr
 
----

See comments below for further updates on the investigation.
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8309371,,,,JDK-8307314,JDK-8298647,,,,"2023-06-06 19:58;ysr;card-table-grain-mod.patch;https://bugs.openjdk.org/secure/attachment/104207/card-table-grain-mod.patch",,,,,,,,,,,,,,,,,,,,,,"0|i31rgb:",9223372036854775807,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6b00f96c,,,,,,,,,"2023-06-01 14:06;ysr;From Martin Doerr:

the PPC64 test failure is not a general PPC64 problem. The test has passed on another PPC64 machine.

The machine on which I had seen the failure has more than 120GB of memory. The VM seems to ignore the -Xmx16m setting:
jdk/bin/java -Xmx16m -XX:+UnlockExperimentalVMOptions -XX:+UseShenandoahGC -XX:ShenandoahGCMode=generational -Xlog:gc+heap=debug -version
[0.025s][debug][gc,heap] Minimum heap 6815744  Initial heap 16777216  Maximum heap 33554432

With that, the allocation passes, and the expected allocation failure doesn’t get hit.

When I omit the generational mode, I’m getting “Maximum heap 16777216” which satisfies the test’s needs.
;;;","2023-06-01 14:07;ysr;From Y. S. Ramakrishna:

What do you see if you add `pagesize=debug` to the `-Xlog:` incantation on that machine where the `-Xmx16m` is giving an effective max heap size 32 MB below?;;;","2023-06-01 14:07;ysr;From Martin Doerr:

jdk/bin/java -Xmx16m -XX:+UnlockExperimentalVMOptions -XX:+UseShenandoahGC -XX:ShenandoahGCMode=generational -Xlog:gc+heap=debug,pagesize=debug -version
[0.018s][info][pagesize] CodeHeap 'non-nmethods':  min=2M max=8640K base=0x00007fff6b120000 page_size=64K size=8640K
[0.018s][info][pagesize] CodeHeap 'profiled nmethods':  min=2M max=118528K base=0x00007fff63d60000 page_size=64K size=118528K
[0.019s][info][pagesize] CodeHeap 'non-profiled nmethods':  min=2M max=118592K base=0x00007fff6b990000 page_size=64K size=118592K
[0.022s][debug][gc,heap ] Minimum heap 6815744  Initial heap 16777216  Maximum heap 33554432
[0.038s][info ][pagesize] Card Table:  min=128K max=128K base=0x00007fff80000000 page_size=64K size=128K
[0.038s][info ][pagesize] Card Table:  min=128K max=128K base=0x00007fff5dc90000 page_size=64K size=128K
 ;;;","2023-06-01 14:08;ysr;From Y. S .Ramakrishna:

The 64K page size seems to be the root cause (and related machinations in gen shen related to card table sizing quanta),
as was conjectured by William. We’ll take a look at it and see how we can address this. Appreciate the extra information, thanks Martin!
 ;;;","2023-06-05 09:35;ysr;Martin confirmed that all the generational collectors other than GenZ, align heap size upwards based on os-page-sized quanta of card table., and are all similarly affected. This may be too strong for platforms with larger page sizes since there is a ""dilatation"" of heap size that is best avoided, and at the very least should be communicated to the user. This more general question will be addressed in an RFE that I'll link here.

Meanwhile, the timeout itself resulting from the larger max heap size is addressed more generally in https://bugs.openjdk.org/browse/JDK-8309317, so the test should now pass even though the test nominally sizes the heap larger than requested.

I'll close the ticket with links to JDK-8309317 and to the aforementioned RFE once I have filed it.;;;","2023-06-05 11:45;mdoerr;Wait. This issue is not related to any timeout AFAICS. The test expects an allocation failure which we never hit because -Xmx16m is ignored and we get 32m instead. I can't see any relationship to JDK-8309317.;;;","2023-06-05 13:13;ysr;My bad; I had assumed that the test failed because it didn't get an OOM in the requisite time because of the larger than requested heap, but you are right it doesn't get an OOM at all because of the larger than requested heap. I'll modify the test so it's cognizant of the upward alignment in the generational case, depending on the native page size.

The correct fix is the RFE to avoid the potentially unreasonable upward alignment, an issue with all current generational collectors (other than Generational ZGC).;;;","2023-06-06 19:59;ysr;Attached a patch that modifies the test so it's cognizant of the actual heap size on account of alignment related size adjustments. Here's a description:

    JDK-8309322: [GenShen] TestAllocOutOfMemory#large failed
    
    When generational Shenandoah is used, there may be an additional
    alignment related heap size adjustment that the test should be cognizant
    of. Such alignment might also happen in the non-generational case, but
    in this case the specific size used in the test was affected on machines
    with larger than usual os page size settings.
    
    The alignment related adjustment would have affected all generational
    collectors (except perhaps Gen Z). In the future, we might try and relax
    this alignment constraint.;;;","2023-06-07 08:04;ysr;The changes were rolled into PR https://github.com/openjdk/jdk/pull/14185
in commit https://github.com/openjdk/jdk/pull/14185/commits/88958669d3f6c60bb6d115cc4e345f7ac1a2686e.

I'll close this as resolved, pending verification by [~mdoerr] (thanks!).;;;","2023-06-07 08:05;ysr;The relaxation of the card table page size commit quantization that results in the extra alignment will be addressed separately in a ticket that I shall link here.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
"[GenShen] Assertion ""Cannot budget more than is available"""" with TestGCOldWithShenandoah",JDK-8309321,5102349,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,kdnilsen,ysr,ysr,2023-06-01 14:02,2023-08-21 12:43,2023-10-01 09:55,2023-08-21 12:43,,,,,,,,hotspot,,0,gc-shenandoah,genshen,,,,,,,,,,,,"Reported by Martin Doerr on Windows:

gc/stress/gcold/TestGCOldWithShenandoah.java#generational
#  Internal Error (src\hotspot\share\gc\shenandoah\heuristics\shenandoahOldHeuristics.cpp:82), pid=20828, tid=5836
#  assert(_old_generation->available() > old_evacuation_budget) failed: Cannot budget more than is available
 

",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8307314,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i31rg3:",9223372036854775807,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6b00f96c,,,,,,,,,"2023-06-07 11:06;kdnilsen;I've proposed a fix for this error in https://github.com/kdnilsen/jdk/commit/19e62fe0f9e8371300dfd4fd02f8f11c0aa6f52a
We need to retest to confirm that this addresses the problem.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
"[GenShen] Assertion ""size must be multiple of card table size"""" with TestElasticTLAB",JDK-8309320,5102347,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,kdnilsen,ysr,ysr,2023-06-01 13:09,2023-06-07 10:13,2023-10-01 09:55,2023-06-07 10:13,,,,,,,,hotspot,,0,gc-shenandoah,genshen,,,,,,,,,,,,"Reported by Martin Doerr:

gc/shenandoah/TestElasticTLAB.java#generational
#  Internal Error (src/hotspot/share/gc/shenandoah/shenandoahFreeSet.cpp:695), pid=2948314, tid=2948983
#  assert(size % CardTable::card_size_in_words() == 0) failed: size must be multiple of card table size, was 258


This assertion was seen on linux aarch64 with the following stack snippet:
V  [libjvm.so+0x15795a0]  ShenandoahFreeSet::allocate_aligned_plab(unsigned long, ShenandoahAllocRequest&, ShenandoahHeapRegion*)+0x22c  (shenandoahFreeSet.cpp:695)
V  [libjvm.so+0x157c748]  ShenandoahFreeSet::try_allocate_in(ShenandoahHeapRegion*, ShenandoahAllocRequest&, bool&)+0x3e8  (shenandoahFreeSet.cpp:788)
V  [libjvm.so+0x157dac8]  ShenandoahFreeSet::allocate_old_with_affiliation(ShenandoahAffiliation, ShenandoahAllocRequest&, bool&)+0x404  (shenandoahFreeSet.cpp:432)
V  [libjvm.so+0x157f384]  ShenandoahFreeSet::allocate_single(ShenandoahAllocRequest&, bool&)+0xaf4  (shenandoahFreeSet.cpp:589)
V  [libjvm.so+0x15b533c]  ShenandoahHeap::allocate_memory_under_lock(ShenandoahAllocRequest&, bool&, bool)+0xac  (shenandoahHeap.cpp:1440)
V  [libjvm.so+0x15b5940]  ShenandoahHeap::allocate_memory(ShenandoahAllocRequest&, bool)+0x50  (shenandoahHeap.cpp:1331)
V  [libjvm.so+0x15b654c]  ShenandoahHeap::allocate_from_plab_slow(Thread*, unsigned long, bool)+0x10c  (shenandoahHeap.cpp:1281)
V  [libjvm.so+0x372bd4]  ShenandoahHeap::try_evacuate_object(oop, Thread*, ShenandoahHeapRegion*, ShenandoahAffiliation)+0x1614  (shenandoahHeap.inline.hpp:306)
V  [libjvm.so+0x373c08]  ShenandoahHeap::evacuate_object(oop, Thread*)+0x7a8  (shenandoahHeap.inline.hpp:346)
V  [libjvm.so+0x1687dcc]  void ShenandoahEvacuateUpdateRootClosureBase<true, false>::do_oop_work<oop>(oop*)+0xcac  (shenandoahClosures.inline.hpp:156)
V  [libjvm.so+0x16880a8]  ShenandoahEvacuateUpdateRootClosureBase<true, false>::do_oop(oop*)+0x88  (shenandoahClosures.inline.hpp:122)
V  [libjvm.so+0xb355dc]  frame::oops_interpreted_do(OopClosure*, RegisterMap const*, bool) const [clone .part.0]+0x17c  (frame.cpp:909)
V  [libjvm.so+0x16fc784]  StackWatermarkFramesIterator::process_one(void*)+0x174  (stackWatermark.cpp:103)
V  [libjvm.so+0x16fce44]  StackWatermark::start_processing_impl(void*)+0xb4  (stackWatermark.cpp:217)
V  [libjvm.so+0x1686f38]  ShenandoahStackWatermark::start_processing_impl(void*)+0xa8  (shenandoahStackWatermark.cpp:118)
 
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8307314,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i31rfn:",9223372036854775807,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6b00f96c,,,,,,,,,"2023-06-01 13:59;ysr;Per Martin Doerr, this was also seen in hs Windows testing as well:

gc/shenandoah/TestElasticTLAB.java#generational
#  Internal Error (src\hotspot\share\gc\shenandoah\shenandoahFreeSet.cpp:695), pid=23288, tid=23784
#  assert(size % CardTable::card_size_in_words() == 0) failed: size must be multiple of card table size, was 258
 ;;;","2023-06-07 10:12;kdnilsen;A recent merge allowed unaligned PLAB allocation requests to progress to the point of raising this assertion failure.

We have inserted code to force alignment of all PLAB allocation requests in the following two commits:
  https://github.com/openjdk/jdk/pull/14185/commits/d4d2f1cf224200826593b67eabc2e0730f5a03f9
  https://github.com/openjdk/jdk/pull/14185/commits/8f9e2a84966008b3b94bf0268d06d468834ed6fc;;;","2023-06-07 10:13;kdnilsen;We have added code to force alignment of PLAB allocation requests.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
"[GenShen] Assertion ""used cannot exceed regions"" with TestAllocObjects & TestDynamicSoftMaxHeapSize",JDK-8309319,5102346,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,kdnilsen,ysr,ysr,2023-06-01 13:04,2023-06-07 10:07,2023-10-01 09:55,2023-06-07 10:07,,,,,,,,hotspot,,0,gc-shenandoah,genshen,,,,,,,,,,,,"Reported by Martin Doerr:

gc/shenandoah/TestAllocObjects.java#generational
gc/shenandoah/TestDynamicSoftMaxHeapSize.java#generational
#  Internal Error src/hotspot/share/gc/shenandoah/shenandoahGeneration.cpp:664), pid=18434, tid=29955
#  assert(is_global() || ShenandoahHeap::heap()->is_full_gc_in_progress() || (_used + _humongous_waste <= _affiliated_region_count * ShenandoahHeapRegion::region_size_bytes())) failed: used cannot exceed regions


These assertions were seen on an intel Mac with the following stack snippet:
V  [libjvm.dylib+0x64f8b4]  report_vm_error(char const*, int, char const*, char const*, ...)+0xb4
V  [libjvm.dylib+0x109818f]  ShenandoahGeneration::increase_used(unsigned long)+0xef
V  [libjvm.dylib+0x109d9e0]  ShenandoahHeap::increase_used(ShenandoahAllocRequest const&)+0x120
V  [libjvm.dylib+0x109f8fb]  ShenandoahHeap::allocate_memory(ShenandoahAllocRequest&, bool)+0x1cb
V  [libjvm.dylib+0x109f6dc]  ShenandoahHeap::allocate_new_tlab(unsigned long, unsigned long, unsigned long*)+0x3c
 
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8307314,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i31rff:",9223372036854775807,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6b00f96c,,,,,,,,,"2023-06-07 10:06;kdnilsen;Thank you for this problem report.  These assertions are invalid because they are vulnerable to various race conditions.  The assertions have been removed in commit: https://github.com/openjdk/jdk/pull/14185/commits/8d80780a64d7058bffa27b269157596d937a6b22
;;;","2023-06-07 10:07;kdnilsen;The failing assertions have been removed.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
[Shenandoah] TestRetainObjects#no-tlab and TestSieveObjects#no-tlab time out on some machines,JDK-8309317,5102343,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,wkemper,ysr,ysr,2023-06-01 12:57,2023-06-05 09:47,2023-10-01 09:55,2023-06-05 09:47,,,,,,,,hotspot,,0,gc-shenandoah,genshen,,,,,,,,,,,,"Reported by Martin Doerr:

gc/shenandoah/TestRetainObjects.java#no-tlab
gc/shenandoah/TestSieveObjects.java#no-tlab
We got some timeouts. These tests seem to be too slow on some machines.
 
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8307314,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i31rer:",9223372036854775807,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6b00f96c,,,,,,,,,"2023-06-01 16:07;wkemper;These are timing out because of an intensive assertion on the allocation path, exacerbated by `-XX:-UseTLAB`.;;;","2023-06-05 09:47;wkemper;Fixed this in PR here: https://github.com/kdnilsen/jdk/pull/2/files;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
sun/security/ssl/SSLSocketImpl/BlockedAsyncClose.java fails with jtreg test timeout,JDK-8309305,5102325,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,mdonovan,msheppar,msheppar,2023-06-01 07:54,2023-09-04 05:28,2023-10-01 09:55,2023-07-21 07:48,11.0.14,17,21,,,,22,security-libs,,0,amazon-interest,intermittent,jdk21u-fix-request,jdk21u-fix-yes,noreg-self,sbr,sqe,,,,,,,"
----------messages:(8/300)----------
command: main BlockedAsyncClose
reason: User specified action: run main/othervm BlockedAsyncClose 
started: Sun May 07 12:18:44 UTC 2023
Mode: othervm [/othervm specified]
Timeout information:
--- Timeout information end.
finished: Sun May 07 12:30:25 UTC 2023
elapsed time (seconds): 701.01
----------configuration:(0/0)----------

...


test result: Error. Program `c:\ade\mesos\work_dir\jib-master\install\jdk-21+21-1778\windows-x64.jdk\jdk-21\bin\java' timed out (timeout set to 480000ms, elapsed time including timeout handling was 701003ms).
",,,,,,,,,,,JDK-8313377,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8224829,,,,,,,,,,,,,,,,,,,,,windows,,,,,,"0|i31rar:",9223372036854775807,b08,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@2ec284e3,,,,,,,,,"2023-06-02 14:59;rhalade;[~mdonovan] Please triage this.;;;","2023-06-07 10:12;mdonovan;I believe this is happening because the test thread's write loop hasn't blocked yet but the write buffer is (or is almost) full. When socket.close() is called in the main thread, it generates a close_notify alert and tries to write it to the socket. It's at this point that the write buffer is full enough that writing the close_notify alert blocks and the test times out.;;;","2023-06-08 07:32;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/14378
Date: 2023-06-08 14:25:26 +0000;;;","2023-07-21 07:48;dukebot;Changeset: 8042a50b
Author:    Matthew Donovan <mdonovan@openjdk.org>
Date:      2023-07-21 14:45:59 +0000
URL:       https://git.openjdk.org/jdk/commit/8042a50b99a671390910afa5f816894f77255429
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
 jdk/internal/misc/VM/RuntimeArguments test ignores jdk/internal/vm/options,JDK-8309303,5102323,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,mchung,dnsimon,dnsimon,2023-06-01 07:44,2023-06-14 23:42,2023-10-01 09:55,2023-06-09 09:47,,,,,,,22,core-libs,,0,hgupdate-sync,noreg-self,testonly,,,,,,,,,,,"The jdk/internal/misc/VM/RuntimeArguments.java test does not take into account arguments coming from the runtime image. This is how it fails when run on GraalVM:

Exception in thread ""main"" java.lang.RuntimeException: [-XX:ThreadPriorityPolicy=1, -XX:+UnlockExperimentalVMOptions, -XX:+EnableJVMCIProduct, -XX:-UnlockExperimentalVMOptions, --add-exports=java.base/jdk.internal.misc=ALL-UNNAMED, --add-exports=java.base/jdk.internal.perf=ALL-UNNAMED, --add-modules=jdk.zipfs] != [--add-exports=java.base/jdk.internal.misc=ALL-UNNAMED, --add-exports=java.base/jdk.internal.perf=ALL-UNNAMED, --add-modules=jdk.zipfs

",,,,,,,,,,,JDK-8309949,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8310055,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i31rab:",9223372036854775807,b02,,,,,,,,,,,"2023-06-01 11:24;mchung;The test may have to extract `/java.base/jdk/internal/vm/options` from the runtime image to determine if the JDK image was created with `--add-options` to build the expected VM arguments for validation.;;;","2023-06-01 17:49;dholmes;What is this facility? The VM only knows about options set via the command-line or env var, or the option file(s).;;;","2023-06-02 01:33;dnsimon;These are the options added to an image by the --add-options jlink flag:

> jlink --list-plugins

List of available plugins:
  --add-options <options>   Prepend the specified <options> string, which may
                            include whitespace, before any other options when
                            invoking the virtual machine in the resulting image.

See JDK-8232080 for more detail.;;;","2023-06-04 14:52;dholmes;That was a new one for me. Thanks for the link.

This isn't a hotspot test though so re-asssigning to core-libs.;;;","2023-06-08 12:02;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/14383
Date: 2023-06-08 18:56:28 +0000;;;","2023-06-09 09:47;dukebot;Changeset: 679a6d89
Author:    Mandy Chung <mchung@openjdk.org>
Date:      2023-06-09 16:44:56 +0000
URL:       https://git.openjdk.org/jdk/commit/679a6d89358eb36c596e3ffa9a86869402c9beb9
;;;","2023-06-13 09:42;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk21/pull/13
Date: 2023-06-13 16:35:33 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
java/net/Socket/Timeouts.java fails with AssertionError on test temporal post condition,JDK-8309302,5102322,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,dclarke,msheppar,msheppar,2023-06-01 07:26,2023-07-12 13:47,2023-10-01 09:55,2023-07-03 03:05,21,,,,,,22,core-libs,,0,intermittent,sbr,sqe,testbug,,,,,,,,,,"The failing test has a temporal post condition which may not hold true on a heavily loaded system.

    public void testTimedAccept7() throws IOException {
        try (ServerSocket ss = boundServerSocket()) {
            ss.setSoTimeout(30*1000);
            long delay = 2000;
            scheduleClose(ss, delay);
            long startMillis = millisTime();
            try {
                ss.accept().close();
                fail();
            } catch (SocketException expected) {
                checkDuration(startMillis, delay-100, delay+2000);
            }
        }
    }

It possible that the scheduled close my not be delivery in timely manner, such that the temporal constraint on the epoch for delivery is somewhat contrived.

The main semantics that is extracted from the test is that the close is delivered prior the timeout set on the serversocket.
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,x86_64,,,,,,,,,windows,,,,,,"0|i31ra3:",9223372036854775807,b05,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@674604a9,,,,,,,,,"2023-06-01 07:45;alanb;We fixed a number of other tests with the same issue, seems this one was missed.;;;","2023-06-28 02:52;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/14690
Date: 2023-06-28 09:45:08 +0000;;;","2023-07-03 03:05;dukebot;Changeset: 87c79c08
Author:    Darragh Clarke <dclarke@openjdk.org>
Date:      2023-07-03 10:03:54 +0000
URL:       https://git.openjdk.org/jdk/commit/87c79c080186abc53d033449dd9f76c8832d44f5
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
"jdk/jfr/event/runtime/TestAgentEvent.java fails due to ""missing"" dynamic JavaAgent",JDK-8309296,5102314,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,egahlin,msheppar,msheppar,2023-06-01 06:41,2023-07-23 07:36,2023-10-01 09:55,2023-06-21 04:48,21,,,,,,22,hotspot,,0,hgupdate-sync,intermittent,jfr,noreg-self,sbr,,,,,,,,,"
----------messages:(7/450)----------
command: main -Djdk.attach.allowAttachSelf=true jdk.jfr.event.runtime.TestAgentEvent testJavaDynamic
reason: User specified action: run main/othervm -Djdk.attach.allowAttachSelf=true jdk.jfr.event.runtime.TestAgentEvent testJavaDynamic 
started: Fri May 19 03:44:38 UTC 2023
Mode: othervm [/othervm specified]
Additional options from @modules: --add-modules java.instrument
finished: Fri May 19 03:44:41 UTC 2023
elapsed time (seconds): 3.009
----------configuration:(3/46)----------
Boot Layer
  add modules: java.instrument

----------System.out:(44/917)----------
agentmain: bar=baz
agentmain: null
agentmain: 
agentmain: =
jdk.JavaAgent {
  startTime = 03:44:40.574 (2023-05-19)
  name = ""JavaAgent.jar""
  options = ""bar=baz""
  dynamic = true
  initializationTime = 03:44:40.498 (2023-05-19)
  initializationDuration = 26.9 ms
}


jdk.JavaAgent {
  startTime = 03:44:40.574 (2023-05-19)
  name = ""JavaAgent.jar""
  options = N/A
  dynamic = true
  initializationTime = 03:44:40.542 (2023-05-19)
  initializationDuration = 7.09 ms
}


jdk.JavaAgent {
  startTime = 03:44:40.574 (2023-05-19)
  name = ""JavaAgent.jar""
  options = """"
  dynamic = true
  initializationTime = 03:44:40.562 (2023-05-19)
  initializationDuration = 4.40 ms
}


jdk.JavaAgent {
  startTime = 03:44:40.574 (2023-05-19)
  name = ""JavaAgent.jar""
  options = ""=""
  dynamic = true
  initializationTime = 03:44:40.568 (2023-05-19)
  initializationDuration = 2.77 ms
}


----------System.err:(17/1110)----------
java.lang.reflect.InvocationTargetException
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:118)
	at java.base/java.lang.reflect.Method.invoke(Method.java:578)
	at jdk.jfr.event.runtime.TestAgentEvent.main(TestAgentEvent.java:79)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
	at java.base/java.lang.reflect.Method.invoke(Method.java:578)
	at com.sun.javatest.regtest.agent.MainWrapper$MainTask.run(MainWrapper.java:138)
	at java.base/java.lang.Thread.run(Thread.java:1583)
Caused by: java.lang.Exception: Expected a dynamic JavaAgent to be initialized before recording stop
	at jdk.jfr.event.runtime.TestAgentEvent.testJavaDynamic(TestAgentEvent.java:144)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
	... 6 more

JavaTest Message: Test threw exception: java.lang.reflect.InvocationTargetException
JavaTest Message: shutting down test

STATUS:Failed.`main' threw exception: java.lang.reflect.InvocationTargetException",,,,,,,,,,,JDK-8310627,JDK-8311334,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,x86_64,,,,,,,,,windows,,,,,,"0|i31r8b:",9223372036854775807,b03,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@42995637,,,,,,,,,"2023-06-21 01:01;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/14572
Date: 2023-06-20 23:38:04 +0000;;;","2023-06-21 04:48;dukebot;Changeset: 658c3374
Author:    Erik Gahlin <egahlin@openjdk.org>
Date:      2023-06-21 11:47:25 +0000
URL:       https://git.openjdk.org/jdk/commit/658c3374d88836f5c8745f777e836d502f0ec2ca
;;;","2023-06-21 09:16;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk21/pull/54
Date: 2023-06-21 16:04:37 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
C2: MaxNode::signed_min() returns nullptr for int operands,JDK-8309295,5102313,Bug,Resolved,JDK,JDK,software,duke,,,P5,Fixed,rcastanedalo,rcastanedalo,rcastanedalo,2023-06-01 06:29,2023-06-08 17:44,2023-10-01 09:55,2023-06-01 23:34,17,21,,,,,21,hotspot,,0,c2,cleanup,oracle-triage-21,,,,,,,,,,,"MaxNode::signed_min() always returns nullptr, instead of the expected MinI node, when the type of a and b is int. This is caused by an accidental redefinition of 'res' in the MaxNode::build_min_max() function that implements MaxNode::signed_min():

Node* MaxNode::build_min_max(Node* a, Node* b, bool is_max, bool is_unsigned, ...) {
  bool is_int = gvn.type(a)->isa_int();
  (...)
  Node* res = nullptr;
  if (is_int && !is_unsigned) {
    if (is_max) {
      (...)
    } else {
      Node* res =  gvn.transform(new MinINode(a, b));
      (...)
    }
  } else {
    (...)
  }
  (...)
  return res;
}

The bug has not surfaced yet because the code is unreachable: the only current calls to MaxNode::signed_min() (from PhaseIdealLoop::clamp() and PhaseMacroExpand::expand_macro_nodes()) are for long arguments.",,,,,,,,,,,,,,,,,,,,,JDK-8302673,,,,,,,,,,,,,,,JDK-8244504,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i31r83:",9223372036854775807,b26,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2023-06-01 21:03;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/14272
Date: 2023-06-01 19:18:04 +0000;;;","2023-06-01 22:05;thartmann;Code was introduced by JDK-8244504.

ILW = P5 because it's not an issue in current code.;;;","2023-06-01 23:34;dukebot;Changeset: 60f3b87d
Author:    Roberto Castañeda Lozano <rcastanedalo@openjdk.org>
Date:      2023-06-02 06:34:15 +0000
URL:       https://git.openjdk.org/jdk/commit/60f3b87d96bcb827a217ea74a53bbcb9c0a51892
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Add fontconfig requirement to building.md for Debian,JDK-8309287,5102305,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,jkratochvil,jkratochvil,jkratochvil,2023-06-01 05:41,2023-06-08 17:45,2023-10-01 09:55,2023-06-02 01:44,,,,,,,21,docs,,0,,,,,,,,,,,,,,"After following all the commands in building.md I still get on Debian 12 x86_64:

checking for fontconfig/fontconfig.h... no
configure: error: Could not find fontconfig!
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,linux,,,,,,"0|i31r6b:",9223372036854775807,b26,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@1163d29f,,,,,,,,,"2023-06-01 05:50;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/14261
Date: 2023-06-01 12:44:02 +0000;;;","2023-06-02 01:44;dukebot;Changeset: 73e7af9e
Author:    Jan Kratochvil <jkratochvil@openjdk.org>
Committer: Yuri Nesterenko <yan@openjdk.org>
Date:      2023-06-02 08:41:28 +0000
URL:       https://git.openjdk.org/jdk/commit/73e7af9e28805dda25f91fd509e3860d8586ad9f
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
"C2: ""assert(in_bb(n)) failed: must be"" after JDK-8306302",JDK-8309268,5102289,Bug,Closed,JDK,JDK,software,duke,,,P2,Fixed,epeter,chagedorn,chagedorn,2023-06-01 02:12,2023-07-12 07:44,2023-10-01 09:55,2023-06-04 23:44,21,,,,,,21,hotspot,,0,c2,c2-superword,javafuzzer,oracle-triage-11,oracle-triage-17,oracle-triage-21,regression,tier8,,,,,,"The attached Java Fuzzer test starts to fail after JDK-8306302:

To reproduce:
$ java -Xcomp -XX:CompileOnly=Test Test.java
$ java -Xcomp -XX:CompileOnly=Reduced Reduced.java
$ java -Xcomp -XX:CompileOnly=Test Test2.java
$ java -Xcomp -XX:CompileOnly=Reduced2 Reduced2.java

#
# A fatal error has been detected by the Java Runtime Environment:
#
#  Internal Error (/opt/mach5/mesos/work_dir/slaves/741e9afd-8c02-45c3-b2e2-9db1450d0832-S179616/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/6b808a31-80b5-48ac-8f1e-28ee5f1e1ca0/runs/ae4fea3e-315f-4e68-a48b-478764fcfcf2/workspace/open/src/hotspot/share/opto/superword.hpp:402), pid=2102908, tid=2102923
#  assert(in_bb(n)) failed: must be
#
# JRE version: Java(TM) SE Runtime Environment (21.0) (fastdebug build 21-internal-LTS-2023-05-30-2140444.coleen.phillimore.21jmethodid-cache)
# Java VM: Java HotSpot(TM) 64-Bit Server VM (fastdebug 21-internal-LTS-2023-05-30-2140444.coleen.phillimore.21jmethodid-cache, compiled mode, sharing, tiered, compressed oops, compressed class ptrs, g1 gc, linux-amd64)
# Problematic frame:
# V  [libjvm.so+0x171c17e]  SuperWord::bb_idx(Node const*) const+0x4e
...........
Command Line: -Xmx1G -Xcomp -Xbatch -XX:CompileOnly=Test -XX:CompileCommand=quiet -XX:MaxRAMPercentage=4.16667 -Dtest.boot.jdk=/opt/mach5/mesos/work_dir/jib-master/install/jdk/20/36/bundles/linux-x64/jdk-20_linux-x64_bin.tar.gz/jdk-20 -Djava.io.tmpdir=/opt/mach5/mesos/work_dir/slaves/741e9afd-8c02-45c3-b2e2-9db1450d0832-S179893/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/2ed49270-04df-4db4-8bc3-81f8d37a701b/runs/fe3fe1ea-a469-43e4-aa21-69d5274f57f1/testoutput/test-support/jtreg_closed_test_hotspot_jtreg_applications_javafuzzer_MediumTest_java/tmp Test
............
Current CompileTask:
C2:   1047   71   !b  4       Test::vMeth (466 bytes)

Stack: [0x00007fcf8c0fa000,0x00007fcf8c1fb000],  sp=0x00007fcf8c1f4eb0,  free space=1003k
Native frames: (J=compiled Java code, j=interpreted, Vv=VM code, C=native code)
V  [libjvm.so+0x171c17e]  SuperWord::bb_idx(Node const*) const+0x4e  (superword.hpp:402)
V  [libjvm.so+0x171c2a1]  SuperWord::velt_type(Node*)+0x11  (superword.hpp:430)
V  [libjvm.so+0x17122e1]  SuperWord::compute_vector_element_type()+0x451  (superword.cpp:3711)
V  [libjvm.so+0x171b458]  SuperWord::SLP_extract()+0x368  (superword.cpp:606)
V  [libjvm.so+0x171b7a9]  SuperWord::transform_loop(IdealLoopTree*, bool)+0x219  (superword.cpp:178)
V  [libjvm.so+0x1297696]  PhaseIdealLoop::build_and_optimize()+0x1096  (loopnode.cpp:4655)
V  [libjvm.so+0x9f3296]  PhaseIdealLoop::optimize(PhaseIterGVN&, LoopOptsMode)+0x306  (loopnode.hpp:1121)
V  [libjvm.so+0x9ef78a]  Compile::Optimize()+0x104a  (compile.cpp:2156)
V  [libjvm.so+0x9f1f15]  Compile::Compile(ciEnv*, ciMethod*, int, Options, DirectiveSet*)+0x1aa5  (compile.cpp:839)
V  [libjvm.so+0x84bbb4]  C2Compiler::compile_method(ciEnv*, ciMethod*, int, bool, DirectiveSet*)+0x3c4  (c2compiler.cpp:118)
V  [libjvm.so+0x9fdeb0]  CompileBroker::invoke_compiler_on_method(CompileTask*)+0xa00  (compileBroker.cpp:2265)
V  [libjvm.so+0x9fed38]  CompileBroker::compiler_thread_loop()+0x618  (compileBroker.cpp:1944)
V  [libjvm.so+0xeb6b9c]  JavaThread::thread_main_inner()+0xcc  (javaThread.cpp:719)
V  [libjvm.so+0x1796d6a]  Thread::call_run()+0xba  (thread.cpp:217)
V  [libjvm.so+0x1496e1c]  thread_native_entry(Thread*)+0x11c  (os_linux.cpp:775)",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8306302,,,,,"2023-06-01 02:11;chagedorn;FuzzerUtils.java;https://bugs.openjdk.org/secure/attachment/104158/FuzzerUtils.java","2023-06-01 02:10;chagedorn;Reduced.java;https://bugs.openjdk.org/secure/attachment/104159/Reduced.java","2023-06-01 03:39;epeter;Reduced2.java;https://bugs.openjdk.org/secure/attachment/104165/Reduced2.java","2023-06-01 02:49;epeter;Simple1.java;https://bugs.openjdk.org/secure/attachment/104163/Simple1.java","2023-06-01 02:10;chagedorn;Test.java;https://bugs.openjdk.org/secure/attachment/104160/Test.java","2023-06-01 02:13;chagedorn;Test2.java;https://bugs.openjdk.org/secure/attachment/104161/Test2.java",,,,,,,,b25,21,,,,,,,,"0|i31r2r:",9223372036854775807,b26,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,Verified,,"2023-06-01 02:17;chagedorn;ILW = Assertion failure in Superword, two fuzzer test failures and recent regression, -XX:-UseSuperWord or disable  compilation of affected method = HMM = P2;;;","2023-06-01 02:18;chagedorn;[~epeter] can you have a look?;;;","2023-06-01 02:49;epeter;Reduced.java -> Simple1.java

./java -Xcomp -XX:CompileCommand=compileonly,Simple1::test -XX:+TraceLoopOpts -XX:+TraceSuperWord -XX:-TieredCompilation Simple1.java

This is definately a regression to JDK-8306302.
The issue is that I expect the left input to the comparison to come from within the loop. But in Simple1.java we can see that the float-constant is from outside the loop.
The assert is triggered when I ask for the velt_type of the inputs to the comparison.

Solution: one of the two inputs must come from inside the loop, otherwise the compare would float outside the loop, and also the bool would float outside the loop. So I just need to check which one is in the loop, and take that one's velt_type.;;;","2023-06-02 00:01;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/14268
Date: 2023-06-01 16:19:41 +0000;;;","2023-06-04 23:44;dukebot;Changeset: 22a9a86b
Author:    Emanuel Peter <epeter@openjdk.org>
Date:      2023-06-05 06:43:13 +0000
URL:       https://git.openjdk.org/jdk/commit/22a9a86be088a3e92b231e7180a134f63716cc87
;;;","2023-06-05 10:00;dcubed;The fix for this bug is integrated in jdk-21+26-2255.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
C2: assert(final_con == (jlong)final_int) failed: final value should be integer,JDK-8309266,5102287,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,enothum,chagedorn,chagedorn,2023-06-01 01:56,2023-07-24 21:54,2023-10-01 09:55,2023-06-20 06:55,17,19,20,21,,,22,hotspot,,0,amazon-interest,c2,hgupdate-sync,jdk17u-fix-request,jdk17u-fix-yes,oracle-triage-21,,,,,,,,"The attached test fails with the following assertion:

To reproduce:
$ java -Xbatch -XX:CompileOnly=Test Test.java

#
# A fatal error has been detected by the Java Runtime Environment:
#
#  Internal Error (/opt/mach5/mesos/work_dir/slaves/741e9afd-8c02-45c3-b2e2-9db1450d0832-S179622/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/72cab011-e6f0-4b37-b72c-1a28ae55422a/runs/5b27fa5b-32f8-4c80-9524-015f5098fcf7/workspace/open/src/hotspot/share/opto/loopnode.cpp:2299), pid=276454, tid=276467
#  assert(final_con == (jlong)final_int) failed: final value should be integer
#
# JRE version: Java(TM) SE Runtime Environment (21.0+25) (fastdebug build 21-ea+25-LTS-2192)
# Java VM: Java HotSpot(TM) 64-Bit Server VM (fastdebug 21-ea+25-LTS-2192, mixed mode, sharing, tiered, compressed oops, compressed class ptrs, g1 gc, linux-amd64)
# Problematic frame:
# V  [libjvm.so+0x1274363]  LoopLimitNode::Value(PhaseGVN*) const+0x2c3
#
.........
Command Line: -XX:CompileOnly=Test::test -Xbatch --add-modules=ALL-DEFAULT jdk.compiler/com.sun.tools.javac.launcher.Main Test.java
.........
Current CompileTask:
C2:   1433   84    b  4       Test::test (33 bytes)

Stack: [0x00007fb726a00000,0x00007fb726b00000],  sp=0x00007fb726afb2a0,  free space=1004k
Native frames: (J=compiled Java code, j=interpreted, Vv=VM code, C=native code)
V  [libjvm.so+0x1274363]  LoopLimitNode::Value(PhaseGVN*) const+0x2c3  (loopnode.cpp:2299)
V  [libjvm.so+0x1518230]  PhaseCCP::analyze()+0x2b0
V  [libjvm.so+0x9ee1ea]  Compile::Optimize()+0x60a
V  [libjvm.so+0x9f0ca6]  Compile::Compile(ciEnv*, ciMethod*, int, Options, DirectiveSet*)+0x1b96
V  [libjvm.so+0x84aa54]  C2Compiler::compile_method(ciEnv*, ciMethod*, int, bool, DirectiveSet*)+0x3c4
V  [libjvm.so+0x9fcbb0]  CompileBroker::invoke_compiler_on_method(CompileTask*)+0xa00
V  [libjvm.so+0x9fda38]  CompileBroker::compiler_thread_loop()+0x618
V  [libjvm.so+0xeb5b6c]  JavaThread::thread_main_inner()+0xcc
V  [libjvm.so+0x179316a]  Thread::call_run()+0xba
V  [libjvm.so+0x149450c]  thread_native_entry(Thread*)+0x11c",,,,,,,,,,,JDK-8312679,JDK-8310603,JDK-8312070,JDK-8311330,JDK-8311860,,,,,,,,,,,,,,,,,,,,,,,,,,"2023-06-01 01:55;chagedorn;Test.java;https://bugs.openjdk.org/secure/attachment/104156/Test.java","2023-06-01 01:55;chagedorn;hs_err_pid276454.log;https://bugs.openjdk.org/secure/attachment/104157/hs_err_pid276454.log",,,,,,,,,,,,,,,,,,,,,"0|i31r2b:",9223372036854775807,b03,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2023-06-01 02:24;chagedorn;ILW = C2 assertion with inserted loop limit check predicate, edge case, disable compilation of affected method = HLM = P3;;;","2023-06-01 03:34;chagedorn;Starts to fail after JDK-8282045 but that might be unrelated and just revealed an existing issue.;;;","2023-06-07 05:40;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/14353
Date: 2023-06-07 12:33:48 +0000;;;","2023-06-15 06:13;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/14490
Date: 2023-06-15 10:43:53 +0000;;;","2023-06-20 06:55;dukebot;Changeset: 4a9cc8a0
Author:    Eric Nothum <eric.nothum@oracle.com>
Committer: Tobias Hartmann <thartmann@openjdk.org>
Date:      2023-06-20 13:52:45 +0000
URL:       https://git.openjdk.org/jdk/commit/4a9cc8a000cafb3ad77a33710054b567e8553652
;;;","2023-06-21 03:35;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk21/pull/49
Date: 2023-06-21 10:28:11 +0000;;;","2023-07-11 07:19;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/1570
Date: 2023-07-11 14:13:05 +0000;;;","2023-07-12 02:10;goetz;Fix request [17u]

I backport this for parity with 17.0.9-oracle.
Simple C2 change, low risk.
Applies clean, but adaptions to fix compilation needed.
Test passes, but unfortunately also without the fix. SAP nightly testing passed.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
ClassForNameLeak fails intermittently as the class loader hasn't been unloaded,JDK-8309241,5102259,Bug,Closed,JDK,JDK,software,duke,,,P4,Fixed,mchung,dnsimon,dnsimon,2023-05-31 14:48,2023-08-04 12:49,2023-10-01 09:55,2023-06-02 11:14,,,,,,,21,core-libs,,0,testonly,,,,,,,,,,,,,"The ClassForNameLeak test includes a loop[1] that calls System.gc() in order to give some phantom references (to class loaders created earlier in the test) a chance to be enqueued for processing. When running on GraalVM, this loop sometimes does not run long enough to allow all phantom references to be enqueued, resulting in:

java.lang.RuntimeException: ClassLoader was never enqueued!
        at ClassForNameLeak.main(ClassForNameLeak.java:118)
        at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
        at java.base/java.lang.reflect.Method.invoke(Method.java:578)
        at com.sun.javatest.regtest.agent.MainWrapper$MainTask.run(MainWrapper.java:138)
        at java.base/java.lang.Thread.run(Thread.java:1583)

Bumping the number of loop iterations from 10 to 100 seems to reliably prevent the failure.

[1] https://github.com/openjdk/jdk/blob/09514745fc87d5a212bdf09399aa2045f02b4612/test/jdk/java/lang/ClassLoader/forNameLeak/ClassForNameLeak.java#L109-L112",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8310055,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i31qw3:",9223372036854775807,b26,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@5ae6d091,,,,,,,Verified,,"2023-06-01 10:44;mchung;ClassForNameLeak test should be updated to use jdk.test.lib.util.ForceGC.;;;","2023-06-01 11:25;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/14269
Date: 2023-06-01 18:19:14 +0000;;;","2023-06-02 11:14;dukebot;Changeset: a23bbea9
Author:    Mandy Chung <mchung@openjdk.org>
Date:      2023-06-02 18:12:19 +0000
URL:       https://git.openjdk.org/jdk/commit/a23bbea9593a85a9d60431e68805efa6f960a4d4
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
"jdk/jfr/tool/TestView.java failed with ""exitValue = 134""",JDK-8309238,5102256,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,egahlin,dcubed,dcubed,2023-05-31 13:57,2023-08-09 13:26,2023-10-01 09:55,2023-07-24 07:33,21,22,,,,,22,hotspot,,0,macosx-exit-code-134,problemlist,tier3,tier5,tier8,,,,,,,,,"The following test failed in the JDK21 CI:

jdk/jfr/tool/TestView.java

Here's a snippet from the log file:

jdk.GCHeapSummary {
  startTime = 20:30:47.024 (2023-05-31)
  gcId = 8
  when = ""Before GC""
  heapSpace = {
    start = 0x7D0000000
    committedEnd = 0x7D0C00000
    committedSize = 12.0 MB
    reservedEnd = 0x800000000
    reservedSize = 768.0 MB
  }
  heapUsed = 5.4 MB
}


jdk.GCHeapSummary {
  startTime = 20:30:47.029 (2023-05-31)
  gcId = 8
  when = ""After GC""
  heapSpace = {
    start = 0x7D0000000
    committedEnd = 0x7E0600000
    committedSize = 262.0 MB
    reservedEnd = 0x800000000
    reservedSize = 768.0 MB
  }
  heapUsed = 5.9 MB
}


jdk.GarbageCollection {
  startTime = 20:30:47.024 (2023-05-31)
  duration = 4.16 ms
  gcId = 8
  name = ""G1New""
  cause = ""G1 Evacuation Pause""
  sumOfPauses = 4.16 ms
  longestPause = 4.16 ms
  eventThread = ""VM Thread"" (osThreadId = 20739)
}


Timeout refired 480 times
[2023-05-31T20:39:24.975384Z] Waiting for completion for process 28611
[2023-05-31T20:39:24.975466Z] Waiting for completion finished for process 28611
Output and diagnostic info for process 28611 was saved into 'pid-28611-output.log'
[2023-05-31T20:39:24.976199Z] Waiting for completion for process 28611
[2023-05-31T20:39:24.976245Z] Waiting for completion finished for process 28611
Command returned with exit code 134
---------------- stdout ----------------
28590:

---------------- stderr ----------------

----------------------------------------

[2023-05-31T20:39:24.976420Z] Waiting for completion for process 28611
[2023-05-31T20:39:24.976469Z] Waiting for completion finished for process 28611
[2023-05-31T20:39:24.976516Z] Waiting for completion for process 28611
[2023-05-31T20:39:24.976555Z] Waiting for completion finished for process 28611
[2023-05-31T20:39:24.981880Z] Waiting for completion for process 28611
[2023-05-31T20:39:24.981956Z] Waiting for completion finished for process 28611
----------System.err:(20/1039)----------
 stdout: [28590:
];
 stderr: []
 exitValue = 134

java.lang.RuntimeException: Expected to get exit value of [0], exit value is: [134]
	at jdk.test.lib.process.OutputAnalyzer.shouldHaveExitValue(OutputAnalyzer.java:490)
	at jdk.jfr.jcmd.JcmdHelper.jcmd(JcmdHelper.java:110)
	at jdk.jfr.jcmd.JcmdHelper.jcmd(JcmdHelper.java:115)
	at jdk.jfr.jcmd.TestJcmdView.testFormView(TestJcmdView.java:111)
	at jdk.jfr.jcmd.TestJcmdView.main(TestJcmdView.java:92)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
	at java.base/java.lang.reflect.Method.invoke(Method.java:578)
	at com.sun.javatest.regtest.agent.MainWrapper$MainTask.run(MainWrapper.java:138)
	at java.base/java.lang.Thread.run(Thread.java:1583)

JavaTest Message: Test threw exception: java.lang.RuntimeException: Expected to get exit value of [0], exit value is: [134]
JavaTest Message: shutting down test

STATUS:Failed.`main' threw exception: java.lang.RuntimeException: Expected to get exit value of [0], exit value is: [134]
----------rerun:(40/7578)*----------",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"2023-06-05 09:13;dcubed;jdk-21+25_macosx-aarch64.8309238.zip;https://bugs.openjdk.org/secure/attachment/104193/jdk-21%2B25_macosx-aarch64.8309238.zip",,,,,,,x86_64,,,,,,,,,os_x,,,,,,"0|i31qvf:",9223372036854775807,b08,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@42995637,,,,,,,,,"2023-05-31 16:28;dholmes;pid-28611-output.log

--- ProcessLog ---
cmd: /System/Volumes/Data/mesos/work_dir/jib-master/install/jdk-21+25-2201/macosx-x64.jdk/jdk-21.jdk/Contents/Home/bin/jcmd 28590 JFR.view jvm-information
exitvalue: 134
stderr: 
stdout: 28590:
;;;","2023-06-05 09:13;dcubed;Here's the log files from my jdk-21+25 stress testing sighting on macosx-aarch64:

$ unzip -l jdk-21+25_macosx-aarch64.8309238.zip
Archive:  jdk-21+25_macosx-aarch64.8309238.zip
  Length      Date    Time    Name
---------  ---------- -----   ----
    28707  06-03-2023 11:43   jdk-21+25_2/failures.macosx-aarch64/TestView.jtr.release
---------                     -------
    28707                     1 file;;;","2023-06-06 07:31;dcubed;Here's a log file snippet from the jdk-21+25-2201-tier3 sighting:

jdk/jfr/jcmd/TestJcmdView.java

So this is a different test, but the same failure mode:

#section:main
----------messages:(9/512)----------
command: main -XX:-ExplicitGCInvokesConcurrent -XX:-DisableExplicitGC -XX:+UseG1GC jdk.jfr.jcmd.TestJcmdView
reason: User specified action: run main/othervm -XX:-ExplicitGCInvokesConcurrent -XX:-DisableExplicitGC -XX:+UseG1GC jdk.jfr.jcmd.TestJcmdView 
started: Tue Jun 06 02:06:12 GMT 2023
Mode: othervm [/othervm specified]
Additional options from @modules: --add-modules jdk.jfr,jdk.jcmd
Timeout information:
--- Timeout information end.
finished: Tue Jun 06 02:15:53 GMT 2023
elapsed time (seconds): 580.887
----------configuration:(3/44)----------
Boot Layer
  add modules: jdk.jfr jdk.jcmd

----------System.out:(535/17299)----------
jdk.JVMInformation {
  startTime = 02:06:16.139 (2023-06-06)
  jvmName = ""Java HotSpot(TM) 64-Bit Server VM""
  jvmVersion = ""Java HotSpot(TM) 64-Bit Server VM (fastdebug 21-ea+26-LTS-2266) for bsd-amd64 JRE (21-ea+26-LTS-2266), built on 2023-06-05T16:39:05Z by ""mach5one"" with clang Apple LLVM 12.0.0 (clang-1200.0.32.29)""
  jvmArguments = ""-Dtest.vm.opts=-Xmx768m -XX:MaxRAMPercentage=4.16667 -Dtest.boot.jdk=/System/Volumes/Data/mesos/work_dir/jib-master/install/jdk/20/36/bundles/macos-x64/jdk-20_macos-x64_bin.tar.gz/jdk-20.jdk/Contents/Home -Djava.io.tmpdir=/System/Volumes/Data/mesos/work_dir/slaves/cd627e65-f015-4fb1-a1d2-b6c9b8127f98-S2402/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/27b43a94-7260-4f09-9a39-24b78e7644a3/runs/efabea15-87a8-4afd-9d97-cb76b4e133de/testoutput/test-support/jtreg_open_test_jdk_jdk_jfr/tmp -ea -esa -Dtest.tool.vm.opts=-J-Xmx768m -J-XX:MaxRAMPercentage=4.16667 -J-Dtest.boot.jdk=/System/Volumes/Data/mesos/work_dir/jib-master/install/jdk/20/36/bundles/macos-x64/jdk-20_macos-x64_bin.tar.gz/jdk-20.jdk/Contents/Home -J-Djava.io.tmpdir=/System/Volumes/Data/mesos/work_dir/slaves/cd627e65-f015-4fb1-a1d2-b6c9b8127f98-S2402/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/27b43a94-7260-4f09-9a39-24b78e7644a3/runs/efabea15-87a8-4afd-9d97-cb76b4e133de/testoutput/test-support/jtreg_open_test_jdk_jdk_jfr/tmp -J-ea -J-esa -Dtest.compiler.opts= -Dtest.java.opts= -Dtest.jdk=/System/Volumes/Data/mesos/work_dir/jib-master/install/jdk-21+26-2266/macosx-x64-debug.jdk/jdk-21/fastdebug -Dcompile.jdk=/System/Volumes/Data/mesos/work_dir/jib-master/install/jdk-21+26-2266/macosx-x64-debug.jdk/jdk-21/fastdebug -Dtest.timeout.factor=4.0 -Dtest.nativepath=/System/Volumes/Data/mesos/work_dir/jib-master/install/jdk-21+26-2266/macosx-x64-debug.test/jdk/jtreg/native -Dtest.root=/System/Volumes/Data/mesos/work_dir/jib-master/install/jdk-21+26-2266/src.full/open/test/jdk -Dtest.name=jdk/jfr/jcmd/TestJcmdView.java -Dtest.file=/System/Volumes/Data/mesos/work_dir/jib-master/install/jdk-21+26-2266/src.full/open/test/jdk/jdk/jfr/jcmd/TestJcmdView.java -Dtest.src=/System/Volumes/Data/mesos/work_dir/jib-master/install/jdk-21+26-2266/src.full/open/test/jdk/jdk/jfr/jcmd -Dtest.src.path=/System/Volumes/Data/mesos/work_dir/jib-master/install/jdk-21+26-2266/src.full/open/test/jdk/jdk/jfr/jcmd:/System/Volumes/Data/mesos/work_dir/jib-master/install/jdk-21+26-2266/src.full/open/test/lib:/System/Volumes/Data/mesos/work_dir/jib-master/install/jdk-21+26-2266/src.full/open/test/jdk -Dtest.classes=/System/Volumes/Data/mesos/work_dir/slaves/cd627e65-f015-4fb1-a1d2-b6c9b8127f98-S2402/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/27b43a94-7260-4f09-9a39-24b78e7644a3/runs/efabea15-87a8-4afd-9d97-cb76b4e133de/testoutput/test-support/jtreg_open_test_jdk_jdk_jfr/classes/5/jdk/jfr/jcmd/TestJcmdView.d -Dtest.class.path=/System/Volumes/Data/mesos/work_dir/slaves/cd627e65-f015-4fb1-a1d2-b6c9b8127f98-S2402/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/27b43a94-7260-4f09-9a39-24b78e7644a3/runs/efabea15-87a8-4afd-9d97-cb76b4e133de/testoutput/test-support/jtreg_open_test_jdk_jdk_jfr/classes/5/jdk/jfr/jcmd/TestJcmdView.d:/System/Volumes/Data/mesos/work_dir/slaves/cd627e65-f015-4fb1-a1d2-b6c9b8127f98-S2402/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/27b43a94-7260-4f09-9a39-24b78e7644a3/runs/efabea15-87a8-4afd-9d97-cb76b4e133de/testoutput/test-support/jtreg_open_test_jdk_jdk_jfr/classes/5/test/lib:/System/Volumes/Data/mesos/work_dir/slaves/cd627e65-f015-4fb1-a1d2-b6c9b8127f98-S2402/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/27b43a94-7260-4f09-9a39-24b78e7644a3/runs/efabea15-87a8-4afd-9d97-cb76b4e133de/testoutput/test-support/jtreg_open_test_jdk_jdk_jfr/classes/5/test/jdk -Dtest.class.path.prefix=/System/Volumes/Data/mesos/work_dir/slaves/cd627e65-f015-4fb1-a1d2-b6c9b8127f98-S2402/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/27b43a94-7260-4f09-9a39-24b78e7644a3/runs/efabea15-87a8-4afd-9d97-cb76b4e133de/testoutput/test-support/jtreg_open_test_jdk_jdk_jfr/classes/5/jdk/jfr/jcmd/TestJcmdView.d:/System/Volumes/Data/mesos/work_dir/jib-master/install/jdk-21+26-2266/src.full/open/test/jdk/jdk/jfr/jcmd:/System/Volumes/Data/mesos/work_dir/slaves/cd627e65-f015-4fb1-a1d2-b6c9b8127f98-S2402/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/27b43a94-7260-4f09-9a39-24b78e7644a3/runs/efabea15-87a8-4afd-9d97-cb76b4e133de/testoutput/test-support/jtreg_open_test_jdk_jdk_jfr/classes/5/test/lib:/System/Volumes/Data/mesos/work_dir/slaves/cd627e65-f015-4fb1-a1d2-b6c9b8127f98-S2402/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/27b43a94-7260-4f09-9a39-24b78e7644a3/runs/efabea15-87a8-4afd-9d97-cb76b4e133de/testoutput/test-support/jtreg_open_test_jdk_jdk_jfr/classes/5/test/jdk -Dtest.modules=jdk.jfr jdk.jcmd --add-modules=jdk.jfr,jdk.jcmd -Xmx768m -XX:MaxRAMPercentage=4.16667 -Dtest.boot.jdk=/System/Volumes/Data/mesos/work_dir/jib-master/install/jdk/20/36/bundles/macos-x64/jdk-20_macos-x64_bin.tar.gz/jdk-20.jdk/Contents/Home -Djava.io.tmpdir=/System/Volumes/Data/mesos/work_dir/slaves/cd627e65-f015-4fb1-a1d2-b6c9b8127f98-S2402/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/27b43a94-7260-4f09-9a39-24b78e7644a3/runs/efabea15-87a8-4afd-9d97-cb76b4e133de/testoutput/test-support/jtreg_open_test_jdk_jdk_jfr/tmp -ea -esa -Djava.library.path=/System/Volumes/Data/mesos/work_dir/jib-master/install/jdk-21+26-2266/macosx-x64-debug.test/jdk/jtreg/native -XX:-ExplicitGCInvokesConcurrent -XX:-DisableExplicitGC -XX:+UseG1GC""
  jvmFlags = N/A
  javaArguments = ""com.sun.javatest.regtest.agent.MainWrapper /System/Volumes/Data/mesos/work_dir/slaves/cd627e65-f015-4fb1-a1d2-b6c9b8127f98-S2402/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/27b43a94-7260-4f09-9a39-24b78e7644a3/runs/efabea15-87a8-4afd-9d97-cb76b4e133de/testoutput/test-support/jtreg_open_test_jdk_jdk_jfr/jdk/jfr/jcmd/TestJcmdView.d/main.0.jta""
  jvmStartTime = 02:06:12.520 (2023-06-06)
  pid = 51001
}


jdk.GCHeapSummary {
  startTime = 02:06:16.151 (2023-06-06)
  gcId = 0
  when = ""Before GC""
  heapSpace = {
    start = 0x7D0000000
    committedEnd = 0x7F0200000
    committedSize = 514.0 MB
    reservedEnd = 0x800000000
    reservedSize = 768.0 MB
  }
  heapUsed = 21.0 MB
}


jdk.GCHeapSummary {
  startTime = 02:06:16.396 (2023-06-06)
  gcId = 0
  when = ""After GC""
  heapSpace = {
    start = 0x7D0000000
    committedEnd = 0x7D2200000
    committedSize = 34.0 MB
    reservedEnd = 0x800000000
    reservedSize = 768.0 MB
  }
  heapUsed = 2.9 MB
}


jdk.GarbageCollection {
  startTime = 02:06:16.151 (2023-06-06)
  duration = 245 ms
  gcId = 0
  name = ""G1Full""
  cause = ""System.gc()""
  sumOfPauses = 245 ms
  longestPause = 245 ms
  eventThread = ""VM Thread"" (osThreadId = 15107)
}


jdk.OldGarbageCollection {
  startTime = 02:06:16.151 (2023-06-06)
  duration = 245 ms
  gcId = 0
}


jdk.SystemGC {
  startTime = 02:06:16.151 (2023-06-06)
  duration = 256 ms
  invokedConcurrent = false
  eventThread = ""MainThread"" (javaThreadId = 20)
  stackTrace = [
    java.lang.Runtime.gc()
    java.lang.System.gc() line: 1943
    jdk.jfr.jcmd.TestJcmdView.main(String[]) line: 82
    jdk.internal.reflect.DirectMethodHandleAccessor.invoke(Object, Object[]) line: 103
    java.lang.reflect.Method.invoke(Object, Object[]) line: 580
  ]
}


Running DCMD 'JFR.view verbose=true width=300 cell-height=100 SystemGC' through 'PidJcmdExecutor'
Executing command '[/System/Volumes/Data/mesos/work_dir/jib-master/install/jdk-21+26-2266/macosx-x64-debug.jdk/jdk-21/fastdebug/bin/jcmd, 51001, JFR.view verbose=true width=300 cell-height=100 SystemGC]'
jdk.GCHeapSummary {
  startTime = 02:06:16.413 (2023-06-06)
  gcId = 1
  when = ""Before GC""
  heapSpace = {
    start = 0x7D0000000
    committedEnd = 0x7D2200000
    committedSize = 34.0 MB
    reservedEnd = 0x800000000
    reservedSize = 768.0 MB
  }
  heapUsed = 2.9 MB
}


jdk.GCHeapSummary {
  startTime = 02:06:16.537 (2023-06-06)
  gcId = 1
  when = ""After GC""
  heapSpace = {
    start = 0x7D0000000
    committedEnd = 0x7D0E00000
    committedSize = 14.0 MB
    reservedEnd = 0x800000000
    reservedSize = 768.0 MB
  }
  heapUsed = 2.9 MB
}


jdk.GarbageCollection {
  startTime = 02:06:16.413 (2023-06-06)
  duration = 124 ms
  gcId = 1
  name = ""G1Full""
  cause = ""System.gc()""
  sumOfPauses = 124 ms
  longestPause = 124 ms
  eventThread = ""VM Thread"" (osThreadId = 15107)
}


jdk.OldGarbageCollection {
  startTime = 02:06:16.413 (2023-06-06)
  duration = 124 ms
  gcId = 1
}


jdk.SystemGC {
  startTime = 02:06:16.411 (2023-06-06)
  duration = 137 ms
  invokedConcurrent = false
  eventThread = ""MainThread"" (javaThreadId = 20)
  stackTrace = [
    java.lang.Runtime.gc()
    java.lang.System.gc() line: 1943
    jdk.jfr.jcmd.TestJcmdView.main(String[]) line: 83
    jdk.internal.reflect.DirectMethodHandleAccessor.invoke(Object, Object[]) line: 103
    java.lang.reflect.Method.invoke(Object, Object[]) line: 580
  ]
}


jdk.GCHeapSummary {
  startTime = 02:06:16.567 (2023-06-06)
  gcId = 2
  when = ""Before GC""
  heapSpace = {
    start = 0x7D0000000
    committedEnd = 0x7D0E00000
    committedSize = 14.0 MB
    reservedEnd = 0x800000000
    reservedSize = 768.0 MB
  }
  heapUsed = 2.9 MB
}


jdk.GCHeapSummary {
  startTime = 02:06:16.695 (2023-06-06)
  gcId = 2
  when = ""After GC""
  heapSpace = {
    start = 0x7D0000000
    committedEnd = 0x7D0A00000
    committedSize = 10.0 MB
    reservedEnd = 0x800000000
    reservedSize = 768.0 MB
  }
  heapUsed = 2.9 MB
}


jdk.GarbageCollection {
  startTime = 02:06:16.567 (2023-06-06)
  duration = 128 ms
  gcId = 2
  name = ""G1Full""
  cause = ""System.gc()""
  sumOfPauses = 128 ms
  longestPause = 128 ms
  eventThread = ""VM Thread"" (osThreadId = 15107)
}


jdk.OldGarbageCollection {
  startTime = 02:06:16.567 (2023-06-06)
  duration = 128 ms
  gcId = 2
}


jdk.SystemGC {
  startTime = 02:06:16.548 (2023-06-06)
  duration = 158 ms
  invokedConcurrent = false
  eventThread = ""MainThread"" (javaThreadId = 20)
  stackTrace = [
    java.lang.Runtime.gc()
    java.lang.System.gc() line: 1943
    jdk.jfr.jcmd.TestJcmdView.main(String[]) line: 84
    jdk.internal.reflect.DirectMethodHandleAccessor.invoke(Object, Object[]) line: 103
    java.lang.reflect.Method.invoke(Object, Object[]) line: 580
  ]
}


jdk.GCHeapSummary {
  startTime = 02:06:16.878 (2023-06-06)
  gcId = 3
  when = ""Before GC""
  heapSpace = {
    start = 0x7D0000000
    committedEnd = 0x7D0A00000
    committedSize = 10.0 MB
    reservedEnd = 0x800000000
    reservedSize = 768.0 MB
  }
  heapUsed = 5.9 MB
}


jdk.GCHeapSummary {
  startTime = 02:06:16.893 (2023-06-06)
  gcId = 3
  when = ""After GC""
  heapSpace = {
    start = 0x7D0000000
    committedEnd = 0x7D0A00000
    committedSize = 10.0 MB
    reservedEnd = 0x800000000
    reservedSize = 768.0 MB
  }
  heapUsed = 4.3 MB
}


jdk.GarbageCollection {
  startTime = 02:06:16.878 (2023-06-06)
  duration = 15.9 ms
  gcId = 3
  name = ""G1New""
  cause = ""G1 Evacuation Pause""
  sumOfPauses = 15.9 ms
  longestPause = 15.9 ms
  eventThread = ""VM Thread"" (osThreadId = 15107)
}


jdk.GCHeapSummary {
  startTime = 02:06:16.990 (2023-06-06)
  gcId = 4
  when = ""Before GC""
  heapSpace = {
    start = 0x7D0000000
    committedEnd = 0x7D0A00000
    committedSize = 10.0 MB
    reservedEnd = 0x800000000
    reservedSize = 768.0 MB
  }
  heapUsed = 5.3 MB
}


jdk.GCHeapSummary {
  startTime = 02:06:17.006 (2023-06-06)
  gcId = 4
  when = ""After GC""
  heapSpace = {
    start = 0x7D0000000
    committedEnd = 0x7D0A00000
    committedSize = 10.0 MB
    reservedEnd = 0x800000000
    reservedSize = 768.0 MB
  }
  heapUsed = 4.8 MB
}


jdk.GarbageCollection {
  startTime = 02:06:16.990 (2023-06-06)
  duration = 16.8 ms
  gcId = 4
  name = ""G1New""
  cause = ""G1 Evacuation Pause""
  sumOfPauses = 16.8 ms
  longestPause = 16.8 ms
  eventThread = ""VM Thread"" (osThreadId = 15107)
}


jdk.GCHeapSummary {
  startTime = 02:06:17.378 (2023-06-06)
  gcId = 5
  when = ""Before GC""
  heapSpace = {
    start = 0x7D0000000
    committedEnd = 0x7D0A00000
    committedSize = 10.0 MB
    reservedEnd = 0x800000000
    reservedSize = 768.0 MB
  }
  heapUsed = 5.8 MB
}


jdk.GCHeapSummary {
  startTime = 02:06:17.384 (2023-06-06)
  gcId = 5
  when = ""After GC""
  heapSpace = {
    start = 0x7D0000000
    committedEnd = 0x7D0A00000
    committedSize = 10.0 MB
    reservedEnd = 0x800000000
    reservedSize = 768.0 MB
  }
  heapUsed = 5.3 MB
}


jdk.GarbageCollection {
  startTime = 02:06:17.378 (2023-06-06)
  duration = 5.84 ms
  gcId = 5
  name = ""G1New""
  cause = ""G1 Evacuation Pause""
  sumOfPauses = 5.84 ms
  longestPause = 5.84 ms
  eventThread = ""VM Thread"" (osThreadId = 15107)
}


jdk.GCHeapSummary {
  startTime = 02:06:17.384 (2023-06-06)
  gcId = 6
  when = ""Before GC""
  heapSpace = {
    start = 0x7D0000000
    committedEnd = 0x7D0A00000
    committedSize = 10.0 MB
    reservedEnd = 0x800000000
    reservedSize = 768.0 MB
  }
  heapUsed = 5.3 MB
}


jdk.GCHeapSummary {
  startTime = 02:06:17.494 (2023-06-06)
  gcId = 6
  when = ""After GC""
  heapSpace = {
    start = 0x7D0000000
    committedEnd = 0x7D0C00000
    committedSize = 12.0 MB
    reservedEnd = 0x800000000
    reservedSize = 768.0 MB
  }
  heapUsed = 5.3 MB
}


jdk.GarbageCollection {
  startTime = 02:06:17.384 (2023-06-06)
  duration = 110 ms
  gcId = 6
  name = ""G1Old""
  cause = ""G1 Evacuation Pause""
  sumOfPauses = 15.1 ms
  longestPause = 14.9 ms
  eventThread = ""G1 Main Marker"" (osThreadId = 18435)
}


jdk.OldGarbageCollection {
  startTime = 02:06:17.384 (2023-06-06)
  duration = 110 ms
  gcId = 6
}


[2023-06-06T02:06:17.878472Z] Gathering output for process 51016
jdk.GCHeapSummary {
  startTime = 02:06:17.774 (2023-06-06)
  gcId = 7
  when = ""Before GC""
  heapSpace = {
    start = 0x7D0000000
    committedEnd = 0x7D0C00000
    committedSize = 12.0 MB
    reservedEnd = 0x800000000
    reservedSize = 768.0 MB
  }
  heapUsed = 5.3 MB
}


jdk.GCHeapSummary {
  startTime = 02:06:17.780 (2023-06-06)
  gcId = 7
  when = ""After GC""
  heapSpace = {
    start = 0x7D0000000
    committedEnd = 0x7D0C00000
    committedSize = 12.0 MB
    reservedEnd = 0x800000000
    reservedSize = 768.0 MB
  }
  heapUsed = 5.9 MB
}


jdk.GarbageCollection {
  startTime = 02:06:17.774 (2023-06-06)
  duration = 5.76 ms
  gcId = 7
  name = ""G1New""
  cause = ""G1 Evacuation Pause""
  sumOfPauses = 5.76 ms
  longestPause = 5.76 ms
  eventThread = ""VM Thread"" (osThreadId = 15107)
}


jdk.GCHeapSummary {
  startTime = 02:06:18.548 (2023-06-06)
  gcId = 8
  when = ""Before GC""
  heapSpace = {
    start = 0x7D0000000
    committedEnd = 0x7D0C00000
    committedSize = 12.0 MB
    reservedEnd = 0x800000000
    reservedSize = 768.0 MB
  }
  heapUsed = 6.9 MB
}


jdk.GCHeapSummary {
  startTime = 02:06:18.554 (2023-06-06)
  gcId = 8
  when = ""After GC""
  heapSpace = {
    start = 0x7D0000000
    committedEnd = 0x7E0600000
    committedSize = 262.0 MB
    reservedEnd = 0x800000000
    reservedSize = 768.0 MB
  }
  heapUsed = 6.3 MB
}


jdk.GarbageCollection {
  startTime = 02:06:18.548 (2023-06-06)
  duration = 6.09 ms
  gcId = 8
  name = ""G1New""
  cause = ""G1 Evacuation Pause""
  sumOfPauses = 6.09 ms
  longestPause = 6.09 ms
  eventThread = ""VM Thread"" (osThreadId = 15107)
}


jdk.GCHeapSummary {
  startTime = 02:06:18.556 (2023-06-06)
  gcId = 9
  when = ""Before GC""
  heapSpace = {
    start = 0x7D0000000
    committedEnd = 0x7E0600000
    committedSize = 262.0 MB
    reservedEnd = 0x800000000
    reservedSize = 768.0 MB
  }
  heapUsed = 6.3 MB
}


jdk.GCHeapSummary {
  startTime = 02:06:18.646 (2023-06-06)
  gcId = 9
  when = ""After GC""
  heapSpace = {
    start = 0x7D0000000
    committedEnd = 0x7D1E00000
    committedSize = 30.0 MB
    reservedEnd = 0x800000000
    reservedSize = 768.0 MB
  }
  heapUsed = 9.3 MB
}


jdk.GarbageCollection {
  startTime = 02:06:18.556 (2023-06-06)
  duration = 90.3 ms
  gcId = 9
  name = ""G1Old""
  cause = ""G1 Evacuation Pause""
  sumOfPauses = 16.2 ms
  longestPause = 16.1 ms
  eventThread = ""G1 Main Marker"" (osThreadId = 18435)
}


jdk.OldGarbageCollection {
  startTime = 02:06:18.556 (2023-06-06)
  duration = 90.3 ms
  gcId = 9
}


Timeout refired 480 times
[2023-06-06T02:15:44.593525Z] Waiting for completion for process 51016
[2023-06-06T02:15:44.593775Z] Waiting for completion finished for process 51016
Output and diagnostic info for process 51016 was saved into 'pid-51016-output.log'
[2023-06-06T02:15:44.603921Z] Waiting for completion for process 51016
[2023-06-06T02:15:44.604031Z] Waiting for completion finished for process 51016
Command returned with exit code 134
---------------- stdout ----------------
51001:

---------------- stderr ----------------

----------------------------------------

[2023-06-06T02:15:44.604459Z] Waiting for completion for process 51016
[2023-06-06T02:15:44.604539Z] Waiting for completion finished for process 51016
[2023-06-06T02:15:44.604673Z] Waiting for completion for process 51016
[2023-06-06T02:15:44.604743Z] Waiting for completion finished for process 51016
[2023-06-06T02:15:44.639209Z] Waiting for completion for process 51016
[2023-06-06T02:15:44.639311Z] Waiting for completion finished for process 51016
----------System.err:(20/1040)----------
 stdout: [51001:
];
 stderr: []
 exitValue = 134

java.lang.RuntimeException: Expected to get exit value of [0], exit value is: [134]
	at jdk.test.lib.process.OutputAnalyzer.shouldHaveExitValue(OutputAnalyzer.java:490)
	at jdk.jfr.jcmd.JcmdHelper.jcmd(JcmdHelper.java:110)
	at jdk.jfr.jcmd.JcmdHelper.jcmd(JcmdHelper.java:115)
	at jdk.jfr.jcmd.TestJcmdView.testEventType(TestJcmdView.java:135)
	at jdk.jfr.jcmd.TestJcmdView.main(TestJcmdView.java:91)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
	at java.base/java.lang.reflect.Method.invoke(Method.java:580)
	at com.sun.javatest.regtest.agent.MainWrapper$MainTask.run(MainWrapper.java:138)
	at java.base/java.lang.Thread.run(Thread.java:1583)

JavaTest Message: Test threw exception: java.lang.RuntimeException: Expected to get exit value of [0], exit value is: [134]
JavaTest Message: shutting down test

STATUS:Failed.`main' threw exception: java.lang.RuntimeException: Expected to get exit value of [0], exit value is: [134]
----------rerun:(40/8266)*----------;;;","2023-06-12 05:52;egahlin;I have run the test thousand of times and hundreds during stress, but not been able to reproduce locally (or in mach 5). ;;;","2023-06-27 04:22;egahlin;Not sure the found issues are the same bug? There are timeouts, exitValue 134 and a test method that can't find an event.

The last one might be due to different clock sources being used. Events uses invariant TSC, but DCmdView class uses Instant.now(). A loop could be added in the test to ensure that Instant.now() advances passed the timestamp returned by the last event before quering with ""jcmd view'.

I will prepare a patch.;;;","2023-06-28 05:31;egahlin;I filed a separate issue for the missing event. See JDK-8311007. 

It might ""fix"" other issues as well. ;;;","2023-07-20 10:28;egahlin;This might be the same issue as JDK-8309871

Both tests relies on the parser aborting after it has passed a user-defined end time.

In both cases, the stream lacks further events.

In both cases, stack trace indicate the parser is stuck in nextPath method. 
;;;","2023-07-21 02:50;egahlin;The issue was probably introduced 2023-05-24 with JDK-8307738 where ChunkParser:: processRecursionSafe was modified.

From:
if (endNanos > filterEnd) {
to:
if (currentParser.getLastFlush() > filterEnd)

to prevent events from being dropped. The parser should not stop when the last event has been written, but when they all have been parsed. 

Problem is that ChunkParser:: awaitUpdatedHeader has logic similar to ""endNanos > filterEnd"" which means it will return true, indicating the chunk is finished, but processRecursionSafe uses the new mechanism, which sometimes is not in sync with awaitUpdatedHeader(..) The parser will therefore try to proceed with the next chunk, which will spin forever since there is no new chunk.

This explanation makes most sense, looking at stack traces and when the issue start to appear. It also explains why recordingstream/TestSetEndTime.java also started to fail at the same time.
;;;","2023-07-24 01:28;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/14987
Date: 2023-07-23 19:38:54 +0000;;;","2023-07-24 07:33;dukebot;Changeset: 3caf64e0
Author:    Erik Gahlin <egahlin@openjdk.org>
Date:      2023-07-24 14:32:17 +0000
URL:       https://git.openjdk.org/jdk/commit/3caf64e065074ec9fb632ae93842d0e2eb5eeab4
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Unnamed Variables (_) can't be used in JShell,JDK-8309235,5102253,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,abimpoudis,jkuhn,jkuhn,2023-05-31 11:40,2023-06-12 20:57,2023-10-01 09:55,2023-06-08 00:26,21,,,,,,21,tools,,0,,,,,,,,,,,,,,"When trying to use JEP 443: Unnamed Patterns and Variables (Preview) in JShell, I get the message that

> as of release 21, the underscore keyword '_' is only allowed to declare
> |    unnamed patterns, local variables, exception parameters or lambda parameters

Full reproducer:

C:\Users\Johannes\dev\java>type Java21Test.java
import java.lang.invoke.MethodHandles;

public class Java21Test {
    public static void main(String[] args) throws Throwable {
        var _ = (String) MethodHandles.constant(String.class, ""Hi"").invokeExact();
    }
}

C:\Users\Johannes\dev\java>java --enable-preview --source 21 Java21Test.java
Note: Java21Test.java uses preview features of Java SE 21.
Note: Recompile with -Xlint:preview for details.

C:\Users\Johannes\dev\java>jshell --enable-preview
|  Welcome to JShell -- Version 21-ea
|  For an introduction type: /help intro

jshell> import java.lang.invoke.MethodHandles

jshell> var _ = (String) MethodHandles.constant(String.class, ""Hi"").invokeExact();
|  Error:
|  as of release 21, the underscore keyword '_' is only allowed to declare
|    unnamed patterns, local variables, exception parameters or lambda parameters
|  var _ = (String) MethodHandles.constant(String.class, ""Hi"").invokeExact();
|      ^

This error message is surprising, as to my knowledge `var` can only be used for local variables, therefore allowing the use of `_` as variable name as well.

",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,generic,,,,,,,21,,generic,,,,,,"0|i31qur:",9223372036854775807,b26,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@ef6d34f,,,,,,,,,"2023-06-06 08:12;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/14337
Date: 2023-06-06 14:59:45 +0000;;;","2023-06-08 00:26;dukebot;Changeset: 79a4ac79
Author:    Aggelos Biboudis <abimpoudis@openjdk.org>
Committer: Adam Sotona <asotona@openjdk.org>
Date:      2023-06-08 07:25:25 +0000
URL:       https://git.openjdk.org/jdk/commit/79a4ac791c826656b3e984fe54dc472c62efd028
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Clarify EXPERIMENTAL flags comment in hotspot/share/runtime/globals.hpp,JDK-8309228,5102242,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,dholmes,donsmith,donsmith,2023-05-31 08:52,2023-08-28 21:57,2023-10-01 09:55,2023-06-19 23:44,17,21,,,,,22,hotspot,,0,cmd,doc,hgupdate-sync,jdk17u-fix-request,jdk17u-fix-yes,noreg-trivial,,,,,,,,"Despite the fact that all OpenJDK Source code has the following disclaimer:
* This code is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.

It has been raised as a source of concern that the EXPERIMENTAL comment in hotspot/share/runtime/globals.hpp from lines 70-80 may be used to create confusion for customers of commercial distributions based upon this source code.

THEREFORE, the suggestion is to change the comments thusly:

// EXPERIMENTAL flags are in support of features that may not be
//   an officially supported part of a product, but may be available
//    for experimenting with. They could, for example, be performance
//    features that may not have undergone full or rigorous QA, but which may
//    help performance in some cases and released for experimentation
//    by the community of users and developers. 
//    This flag also allows one to
//    be able to build a fully supported product that nonetheless also
//    ships with some unsupported, lightly tested, experimental features.
//    Refer to the documentation of any products using this code for details on support and fitness for production. 
//    Like the UnlockDiagnosticVMOptions flag above, there is a corresponding
//    UnlockExperimentalVMOptions flag, which allows the control and
//    modification of the experimental flags.",,,,,,,,,,,JDK-8314971,JDK-8310463,JDK-8310368,JDK-8310443,JDK-8315193,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i31qsb:",9223372036854775807,b03,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,,,"2023-06-01 09:53;donsmith;Hi David - apologies, I've opened it.

I agree the change is minor, but it has been argued that this comment in this file may someone confuse users of downstream binary builds.  This comment was likely established many years ago when there were essentially no/few commercial products based on the source.  Saying that there is ""no"" support is not accurate, when there in fact ""may"" be support and it's ultimately up to the binary distributions to document either way.;;;","2023-06-06 11:14;lfoltan;ILW = MMM = P3;;;","2023-06-06 19:00;dholmes;[~donsmith] do you think the following note also needs modification?

// Nota bene: neither diagnostic nor experimental options should be used casually,
//    and they are not supported on production loads, except under explicit
//    direction from support engineers.;;;","2023-06-19 07:11;donsmith;Thank you, good catch.  Perhaps to be consistent this could be updated something akin to:

// Nota bene: neither diagnostic nor experimental options should be used casually,
// Refer to the documentation of any products using this code for details. ;;;","2023-06-19 18:48;dholmes;Will do. Thanks [~donsmith].;;;","2023-06-19 19:00;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/14550
Date: 2023-06-20 01:55:20 +0000;;;","2023-06-19 23:43;dholmes;Classifying as a ""doc"" issue for the purpose of backporting to 21.;;;","2023-06-19 23:44;dukebot;Changeset: 96a7db7b
Author:    David Holmes <dholmes@openjdk.org>
Date:      2023-06-20 06:43:21 +0000
URL:       https://git.openjdk.org/jdk/commit/96a7db7b3cd5e1370df195a910b94eaece6c3d3c
;;;","2023-06-19 23:55;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk21/pull/35
Date: 2023-06-20 06:47:59 +0000;;;","2023-06-20 00:53;shade;Fix Request (17u)

Trivial docs-only change to set the expectations clear for experimental features. Applies cleanly.;;;","2023-06-20 00:54;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/1473
Date: 2023-06-20 07:48:45 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Fix xlc17 clang 15 warnings in security and servicability,JDK-8309225,5102239,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,jkern,goetz,goetz,2023-05-31 08:34,2023-06-12 20:54,2023-10-01 09:55,2023-06-07 06:44,,,,,,,21,security-libs,,0,,,,,,,,,,,,,,"Compiling on AIX with xlc17 which contains the new clang 15 frontend shows the following warnings:

src/java.security.jgss/share/native/libj2gss/NativeUtil.h:30:
src/java.security.jgss/share/native/libj2gss/gssapi.h:48:5: error: 'TARGET_OS_MAC' is not defined, evaluates to 0 [-Werror,-Wundef]
#if TARGET_OS_MAC && (defined(ppc) || defined(ppc64) || defined(i386) || defined(x86_64))
^

src/jdk.jdwp.agent/share/native/libdt_socket/socketTransport.c:718:33: error: suggest braces around initialization of subobject [-Werror,-Wmissing-braces]
struct in6_addr mappedAny = IN6ADDR_ANY_INIT;
^~~~~~~~~~~~~~~~
/usr/include/netinet/in.h:454:32: note: expanded from macro 'IN6ADDR_ANY_INIT'
#define IN6ADDR_ANY_INIT {0, 0, 0, 0}
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8308288,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i31qrn:",9223372036854775807,b26,,,,,,,,,,,"2023-06-02 03:25;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/14282
Date: 2023-06-02 10:19:53 +0000;;;","2023-06-07 06:44;dukebot;Changeset: 89f5baca
Author:    JoKern65 <Joachim.kern@sap.com>
Committer: Martin Doerr <mdoerr@openjdk.org>
Date:      2023-06-07 13:42:42 +0000
URL:       https://git.openjdk.org/jdk/commit/89f5bacaf6ac6d5b3634db2fcde5b9abdc492b64
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Fix xlc17 clang 15 warnings in java.desktop,JDK-8309224,5102238,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,goetz,goetz,goetz,2023-05-31 08:22,2023-06-08 17:45,2023-10-01 09:55,2023-06-02 00:35,,,,,,,21,client-libs,,0,,,,,,,,,,,,,,"Compiling on AIX with xlc17 which contains the new clang 15 frontend
shows the following warnings.

src/java.desktop/unix/native/common/awt/awt_GraphicsEnv.h:53:12: error: a function declaration without a prototype is deprecated in all versions of C and is treated as a zero-parameter prototype in C2x, conflicting with a previous declaration [-Werror,-Wdeprecated-non-prototype]
extern int XShmQueryExtension();
^
/usr/include/X11/extensions/XShm.h:91:6: note: conflicting prototype is here
Bool XShmQueryExtension(
^



src/java.desktop/unix/native/libawt_xawt/xawt/awt_Taskbar.c:158:11: error: using the result of an assignment as a condition without parentheses [-Werror,-Wparentheses]
if (m = fp_unity_launcher_entry_get_quicklist(entry)) {
~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
solved by adding line
DISABLED_WARNINGS_clang_aix_awt_Taskbar.c := parentheses, \

src/java.desktop/share/native/common/java2d/opengl/OGLPaints.c:581:48: error: format string is not a string literal [-Werror,-Wformat-nonliteral]
snprintf(cycleCode, sizeof(cycleCode), noCycleCode, texCoordCalcCode);
^~~~~~~~~~~



src/java.desktop/share/native/common/java2d/opengl/OGLBufImgOps.c:153:48: error: format string is not a string literal [-Werror,-Wformat-nonliteral]
snprintf(finalSource, sizeof(finalSource), convolveShaderSource,
^~~~~~~~~~~~~~~~~~~~

src/java.desktop/unix/native/libawt_xawt/awt/gtk2_interface.c:1095:41: error: '&&' within '||' [-Werror,-Wlogical-op-parentheses]
if ((synth_state & MOUSE_OVER) != 0 && (synth_state & PRESSED) == 0 ||
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ~~
src/java.desktop/unix/native/libawt_xawt/awt/gtk2_interface.c:1180:29: error: using the result of an assignment as a condition without parentheses [-Werror,-Wparentheses]
if (init_result = (NULL == gtk2_widgets[_GTK_CHECK_MENU_ITEM_TYPE]))
~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
solved by adding line
DISABLED_WARNINGS_clang_aix_gtk2_interface.c := parentheses logical-op-parentheses, \



In harfbuzz, hb-subset.cc we can undo the define for AIX we needed
to compile with xlc16.
In jdk21 we would like to support both compilers, but afterwards
we can omit the define altogether.
See also JDK-8304291: [AIX] Broken build after JDK-8301998

",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8308288,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i31qrf:",9223372036854775807,b26,,,,,,,,,,,"2023-06-01 10:04;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/14263
Date: 2023-06-01 13:16:49 +0000;;;","2023-06-02 00:34;dukebot;Changeset: dcd9590f
Author:    JoKern65 <128386669+JoKern65@users.noreply.github.com>
Committer: Goetz Lindenmaier <goetz@openjdk.org>
Date:      2023-06-02 07:34:24 +0000
URL:       https://git.openjdk.org/jdk/commit/dcd9590feda8da844b93d3142dab5a7699cc502f
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Fix xlc17 clang 15 warnings in java.base,JDK-8309219,5102233,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,jkern,goetz,goetz,2023-05-31 08:05,2023-06-12 20:54,2023-10-01 09:55,2023-06-07 06:44,,,,,,,21,core-libs,,0,,,,,,,,,,,,,,"Compiling on AIX with xlc17 which contains the new clang 15 frontend
shows the following warnings.

built by make/modules/java.base/Lib.gmk

src/java.base/unix/native/libnet/DefaultProxySelector.c:378:41:22: error: passing arguments to a function without a prototype is deprecated in all versions of C and is not supported in C2x [-Werror,-Wdeprecated-non-prototype]
proxies = (*g_proxy_resolver_lookup)(resolver, uri, NULL, &error);
^

src/java.base/unix/native/libnet/NetworkInterface.c:1612:24: error: arithmetic on a pointer to void is a GNU extension [-Werror,-Wgnu-pointer-arith]
end = (void *)nddp + size;
~~~~~~~~~~~~ ^

src/java.base/unix/native/libnio/fs/UnixNativeDispatcher.c:1251:7: error: '_ALLBSD_SOURCE' is not defined, evaluates to 0 [-Werror,-Wundef]
#elif _ALLBSD_SOURCE


built by make/modules/java.base/lib/CoreLibraries.gmk

src/java.base/unix/native/libjava/ProcessHandleImpl_unix.c:638 comparison of integers of different signs: 'int' and 'unsigned long'
if (ret < sizeof(psinfo_t)) {
^

src/java.base/aix/native/libjli/java_md_aix.c:42:38: error: arithmetic on a pointer to void is a GNU extension [-Werror,-Wgnu-pointer-arith]
addr < p->ldinfo_textorg + p->ldinfo_textsize) {
~~~~~~~~~~~~~~~~~ ^

src/java.base/share/native/libzip/zlib/inffast.c:74:20: error: a function definition without a prototype is deprecated in all versions of C and is not supported in C2x [-Werror,-Wdeprecated-non-prototype]
void ZLIB_INTERNAL inflate_fast(strm, start)
^
src/java.base/share/native/libjli/java.c:2311:22: error: format string is not a string literal [-Werror,-Wformat-nonliteral]
vfprintf(stderr, fmt, vl);
^~~

The test library libGetXSpace.c also shows a warning.
In addition, the cast in that lib is wrong, we opened ""JDK-8309216 cast from jchar* to char* in test GetXSpace.java"" for that.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8308288,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i31qqb:",9223372036854775807,b26,,,,,,,,,,,"2023-06-02 03:13;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/14281
Date: 2023-06-02 10:08:09 +0000;;;","2023-06-07 06:44;dukebot;Changeset: 6eddbe26
Author:    JoKern65 <128386669+JoKern65@users.noreply.github.com>
Committer: Martin Doerr <mdoerr@openjdk.org>
Date:      2023-06-07 13:42:03 +0000
URL:       https://git.openjdk.org/jdk/commit/6eddbe26dd0b9afb83fc029d77e18212e63f98f4
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Cast from jchar* to char* in test java/io/GetXSpace.java,JDK-8309216,5102230,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,bpb,goetz,goetz,2023-05-31 07:42,2023-09-25 08:07,2023-10-01 09:55,2023-06-06 08:18,11,17,,,,,21,core-libs,,0,noreg-self,sust-test-stabilization,,,,,,,,,,,,"In the call to statfs() in test/jdk/java/io/File/libGetXSpace.c
a jchar* is cast to char*.",,,,,,,,,,,JDK-8314351,JDK-8313914,,,,,,,,,,,,,,,,,,,,JDK-8298619,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i31qpn:",9223372036854775807,b26,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@5f132e58,,,,,,,,,"2023-06-01 17:05;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/14276
Date: 2023-06-02 00:00:07 +0000;;;","2023-06-06 08:18;dukebot;Changeset: 91881426
Author:    Brian Burkhalter <bpb@openjdk.org>
Date:      2023-06-06 15:15:32 +0000
URL:       https://git.openjdk.org/jdk/commit/9188142698d8fdcee43c0b0519fde5c63b0010f8
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
sun/security/pkcs11/KeyStore/CertChainRemoval.java fails after 8301154,JDK-8309214,5102227,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,valeriep,mbaesken,mbaesken,2023-05-31 07:21,2023-09-04 05:13,2023-10-01 09:55,2023-08-22 16:51,21,22,,,,,22,security-libs,,1,jdk21u-fix-request,jdk21u-fix-SQE-ok,jdk21u-fix-yes,,,,,,,,,,,"The new test sun/security/pkcs11/KeyStore/CertChainRemoval.java (introduced by JDK-8301154) fails on some tests systems.
Failures can be seen for example on RHEL 8.5 and SUSE Linux 15.3 .
Example output :

config CertChainRemoval.setUp(): success
Beginning test run CertChainRemoval...
Cannot resolve artifact, please check if JIB jar is present in classpath.
nssLibDir: /usr/lib64/
Running test with provider SunPKCS11-nss (security manager disabled) ...
Starting with: 
Entry# 1 = ca1
Entry# 2 = root
Entry# 3 = pk1
========
Initial PKCS11 KeyStore: 
========
Add pk1, ca1 and root, then delete pk1
test CertChainRemoval.test(): failure
java.security.KeyStoreException: sun.security.pkcs11.wrapper.PKCS11Exception: CKR_GENERAL_ERROR
	at jdk.crypto.cryptoki/sun.security.pkcs11.P11KeyStore.engineSetEntry(P11KeyStore.java:1121)
	at jdk.crypto.cryptoki/sun.security.pkcs11.P11KeyStore.engineSetKeyEntry(P11KeyStore.java:462)
	at java.base/java.security.KeyStore.setKeyEntry(KeyStore.java:1192)
	at CertChainRemoval.main(CertChainRemoval.java:141)
	at PKCS11Test.premain(PKCS11Test.java:174)
	at PKCS11Test.testNSS(PKCS11Test.java:550)
	at PKCS11Test.main(PKCS11Test.java:210)
	at PKCS11Test.main(PKCS11Test.java:186)
	at CertChainRemoval.test(CertChainRemoval.java:77)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
	at java.base/java.lang.reflect.Method.invoke(Method.java:578)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:132)
	at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:599)
	at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:174)
	at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
	at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:822)
	at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:147)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1593)
	at org.testng.TestRunner.privateRun(TestRunner.java:764)
	at org.testng.TestRunner.run(TestRunner.java:585)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:384)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:378)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:337)
	at org.testng.SuiteRunner.run(SuiteRunner.java:286)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1218)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1140)
	at org.testng.TestNG.runSuites(TestNG.java:1069)
	at org.testng.TestNG.run(TestNG.java:1037)
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:102)
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:58)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
	at java.base/java.lang.reflect.Method.invoke(Method.java:578)
	at com.sun.javatest.regtest.agent.MainWrapper$MainTask.run(MainWrapper.java:138)
	at java.base/java.lang.Thread.run(Thread.java:1583)
Caused by: sun.security.pkcs11.wrapper.PKCS11Exception: CKR_GENERAL_ERROR
	at jdk.crypto.cryptoki/sun.security.pkcs11.wrapper.PKCS11.C_CreateObject(Native Method)
	at jdk.crypto.cryptoki/sun.security.pkcs11.P11KeyStore.storeCert(P11KeyStore.java:1576)
	at jdk.crypto.cryptoki/sun.security.pkcs11.P11KeyStore.storeChain(P11KeyStore.java:1591)
	at jdk.crypto.cryptoki/sun.security.pkcs11.P11KeyStore.storePkey(P11KeyStore.java:1814)
	at jdk.crypto.cryptoki/sun.security.pkcs11.P11KeyStore.engineSetEntry(P11KeyStore.java:1117)
	... 37 more",,,,,,,,,,,JDK-8314970,,,,,,,,,,,,,,,,,,,,,JDK-8301154,,,,,,,,,,,,,,,,generic,,,,,,,,,linux,,,,,,"0|i31qoz:",9223372036854775807,b12,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@7cafbd52,,,,,,,,,"2023-06-07 05:13;mbaesken;The error occured as well on Ubuntu 22.04 LTS .;;;","2023-08-02 00:54;clanger;As we see this error showing up constantly in our CI, would it be ok to exclude the test for the time being?;;;","2023-08-03 13:37;valeriep;It seems that certain version of NSS returns CKR_GENERAL_ERROR error code when trying to create another X509 Certificate object w/ CKA_ID/CKA_LABEL attributes (when there is already one such Certificate). When running the test against NSS v3.46, it passes vs v3.57, it failed with CRK_GENERAL_ERROR.

The proposed fix is to check for existing certificate object first, if a match is found, set its CKA_ID/CKA_LABEL attribute instead of calling C_CreateObject() again.;;;","2023-08-03 13:58;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/15146
Date: 2023-08-03 20:51:33 +0000;;;","2023-08-22 16:51;dukebot;Changeset: ba6cdbe2
Author:    Valerie Peng <valeriep@openjdk.org>
Date:      2023-08-22 23:49:03 +0000
URL:       https://git.openjdk.org/jdk/commit/ba6cdbe2c2897a0fdc266119f0fe4545c3352b8e
;;;","2023-08-23 12:07;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk21u/pull/93
Date: 2023-08-23 19:01:26 +0000;;;","2023-09-01 15:32;valeriep;Fix Request:
This PR updates the PKCS11 KeyStore impl to work with a NSS behavior change in newer NSS releases. Some platforms bundles new NSS releases and will fail when running the regression test sun/security/pkcs11/KeyStore/CertChainRemoval.java. Changes are verified with new NSS release and also by an external vendor with platform bundling NSS release by default.

Patch applies cleanly. ;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
"C2 failed ""assert(_stack_guard_state == stack_guard_reserved_disabled) failed: inconsistent state""",JDK-8309209,5102222,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,dholmes,dcubed,dcubed,2023-05-31 07:05,2023-07-12 13:46,2023-10-01 09:55,2023-07-02 21:24,21,,,,,,22,hotspot,,0,c2,intermittent,stack,tier2,,,,,,,,,,"The following closed test failed in the JDK21 CI:

vmTestbase/vm/compiler/regression/b4659732/b4659732.java

Here's a snippet from the log file:


# A fatal error has been detected by the Java Runtime Environment:
#
#  Internal Error (/opt/mach5/mesos/work_dir/slaves/741e9afd-8c02-45c3-b2e2-9db1450d0832-S105687/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/75bea5d9-3494-44c5-b595-940c09953f94/runs/d47578f2-2d63-4496-ae16-7d9c1168ade8/workspace/open/src/hotspot/share/runtime/stackOverflow.cpp:148), pid=4102839, tid=4102861
#  assert(_stack_guard_state == stack_guard_reserved_disabled) failed: inconsistent state
#
# JRE version: Java(TM) SE Runtime Environment (21.0+25) (fastdebug build 21-ea+25-LTS-2192)
# Java VM: Java HotSpot(TM) 64-Bit Server VM (fastdebug 21-ea+25-LTS-2192, mixed mode, sharing, compressed oops, compressed class ptrs, g1 gc, linux-aarch64)
# Problematic frame:
# V  [libjvm.so+0x14fadf0]  StackOverflow::enable_stack_reserved_zone(bool)+0x160
#
# Core dump will be written. Default location: Core dumps may be processed with ""/opt/core.sh %p"" (or dumping to /opt/mach5/mesos/work_dir/slaves/741e9afd-8c02-45c3-b2e2-9db1450d0832-S179842/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/feaef807-e9e4-4563-953a-43b337b4d31b/runs/4eaae39f-3447-4f6b-88b2-840fe0aebedb/testoutput/test-support/jtreg_closed_test_hotspot_jtreg_vmTestbase_vm_compiler_regression/scratch/2/core.4102839)
#
# An error report file with more information is saved as:
# /opt/mach5/mesos/work_dir/slaves/741e9afd-8c02-45c3-b2e2-9db1450d0832-S179842/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/feaef807-e9e4-4563-953a-43b337b4d31b/runs/4eaae39f-3447-4f6b-88b2-840fe0aebedb/testoutput/test-support/jtreg_closed_test_hotspot_jtreg_vmTestbase_vm_compiler_regression/scratch/2/hs_err_pid4102839.log
#
# If you would like to submit a bug report, please visit:
#   https://bugreport.java.com/bugreport/crash.jsp
#
----------System.err:(1/176)----------
Java HotSpot(TM) 64-Bit Server VM warning: Potentially dangerous stack overflow in ReservedStackAccess annotated method vm.compiler.regression.b4659732.b4659732.recurse()V [1]
----------rerun:(40/10340)*----------


Here's the crashing thread's stack trace:

---------------  T H R E A D  ---------------

Current thread (0x0000ffffb44fcb00):  JavaThread ""MainThread""        [_thread_in_Java, id=4102861, stack(0x0000ffff72fff000,0x0000ffff731ff000) (2048K)]

Stack: [0x0000ffff72fff000,0x0000ffff731ff000],  sp=0x0000ffff7301c090,  free space=116k
Native frames: (J=compiled Java code, j=interpreted, Vv=VM code, C=native code)
V  [libjvm.so+0x14fadf0]  StackOverflow::enable_stack_reserved_zone(bool)+0x160  (stackOverflow.cpp:148)
V  [libjvm.so+0x14a2648]  SharedRuntime::enable_stack_reserved_zone(JavaThread*)+0x58  (sharedRuntime.cpp:3348)
J 259 c2 vm.compiler.regression.b4659732.b4659732.recurse()V (31 bytes) @ 0x0000ffffa8d41f68 [0x0000ffffa8d407c0+0x00000000000017a8]

[error occurred during error reporting (printing native stack (with source info)), id 0xe0000000, Internal Error (/opt/mach5/mesos/work_dir/slaves/741e9afd-8c02-45c3-b2e2-9db1450d0832-S105687/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/75bea5d9-3494-44c5-b595-940c09953f94/runs/d47578f2-2d63-4496-ae16-7d9c1168ade8/workspace/open/src/hotspot/share/code/codeCache.inline.hpp:49)]

Retrying call stack printing without source information...
Native frames: (J=compiled Java code, j=interpreted, Vv=VM code, C=native code)
V  [libjvm.so+0x14fadf0]  StackOverflow::enable_stack_reserved_zone(bool)+0x160  (stackOverflow.cpp:148)
V  [libjvm.so+0x14a2648]  SharedRuntime::enable_stack_reserved_zone(JavaThread*)+0x58
J 259 c2 vm.compiler.regression.b4659732.b4659732.recurse()V (31 bytes) @ 0x0000ffffa8d41f68 [0x0000ffffa8d407c0+0x00000000000017a8]

[error occurred during error reporting (retry printing native stack (no source info)), id 0xe0000000, Internal Error (/opt/mach5/mesos/work_dir/slaves/741e9afd-8c02-45c3-b2e2-9db1450d0832-S105687/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/75bea5d9-3494-44c5-b595-940c09953f94/runs/d47578f2-2d63-4496-ae16-7d9c1168ade8/workspace/open/src/hotspot/share/code/codeCache.inline.hpp:49)]",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8146697,JDK-8259504,JDK-8310293,,,,,,,,,,aarch64,,,,,,,,,linux,,,,,,"0|i31qnv:",9223372036854775807,b05,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,,,"2023-06-01 01:01;thartmann;Looks similar to JDK-8259504 which was closed as duplicate of JDK-8231031 but I don't understand how that test fix would address the assert (paging [~dholmes]).;;;","2023-06-01 02:01;thartmann;I'm not able to reproduce this and I don't think this is a JIT issue. Moving to hotspot/runtime for their evaluation.;;;","2023-06-01 17:21;dholmes;[~thartmann] the crash in JDK-8259504 wouldn't reproduce and in particular did not reproduce after extended testing of the modified test from JDK-8231031 so was flagged as a duplicate. But this was not a simple test fix. Basically ReservedStackAccess doesn't work correctly in the presence of JIT inlining and that inlining is what was disabled by the test change.

Stackoverflow errors are highly problematic, but I will try to take a look at this particular failure.;;;","2023-06-01 21:58;thartmann;[~dholmes] okay, thanks for the background information!;;;","2023-06-06 11:17;lfoltan;ILW = HLM = P3;;;","2023-06-19 00:32;dholmes;We can see from:

Java HotSpot(TM) 64-Bit Server VM warning: Potentially dangerous stack overflow in ReservedStackAccess annotated method vm.compiler.regression.b4659732.b4659732.recurse()V [1] 

that inlining is again the problem, as the recurse() method is not a RSA annotated method. The real RSA method is likely within the println call chain, or the string concatenation call chain.

Exactly what goes wrong is hard to determine. The failure is only seen on Aarch64 so I can't do any local testing or debugging.

I think in general we should never inline a RSA annotated method. [~thartmann] what are your thoughts on that?

Edit: note that I previously indicated that not inlining RSA methods could be bad for performance, but perhaps that needs to be investigated?;;;","2023-06-19 06:08;thartmann;> I think in general we should never inline a RSA annotated method. [~thartmann] what are your thoughts on that?

It sounds like these RSA annotated methods are often performance critical and preventing them from inlining will definitely have a negative effect on performance. But couldn't we reserve more stack for them even when inlining?;;;","2023-06-19 18:46;dholmes;I'm not sure the amount of stack reserved is what is at issue here but it certainly will be a problem in general. But how can you know how much stack to reserve? We set the reservation limits based on experimentation with the intended RSA methods. If these are inlined into other methods then the required stack is non-deterministic in general.;;;","2023-06-20 20:35;dlong;I'm guessing the problem is the way RSA is implemented for compiled frames with inlining.  We probably got a 1st stack overflow in an inlined RSA method, unguarded the reserved area, then continued running.  Because the RSA boundary is inlined, we don't re-protect/disable the area until the caller compiled method returns.  So when we get a 2nd stack overflow with the reserved area still enabled, we hit the assert.  If that's what is happening, then it seems like a fundamental design problem and could happen on other platforms, not just aarch64.;;;","2023-06-21 00:00;thartmann;I'm lacking the expertise in the relevant code here ([~fparain], any thoughts?). [~dlong] it sounds like your theory could be validated with a test that RSA annotates a method that triggers a stack overflow, forces inlining and triggers a second stack overflow. ;;;","2023-06-21 11:40;dlong;JavaThread::_stack_overflow_state._reserved_stack_activation being non-NULL should be another indicator. 
;;;","2023-06-26 18:04;dholmes;I have noticed what may be a critical different between Aarch64 and x64 in InterpreterMacroAssembler::remove_activation

Here is the Aarch64 code:

if (StackReservedPages > 0) {
    // testing if reserved zone needs to be re-enabled
    Label no_reserved_zone_enabling;

    // look for an overflow into the stack reserved zone, i.e.
    // interpreter_frame_sender_sp <= JavaThread::reserved_stack_activation
    ldr(rscratch1, Address(rthread, JavaThread::reserved_stack_activation_offset()));
    cmp(rscratch2, rscratch1);
    br(Assembler::LS, no_reserved_zone_enabling);

and here is the x64:

if (StackReservedPages > 0) {
    // testing if reserved zone needs to be re-enabled
    Register rthread = LP64_ONLY(r15_thread) NOT_LP64(rcx);
    Label no_reserved_zone_enabling;

    NOT_LP64(get_thread(rthread);)

    cmpl(Address(rthread, JavaThread::stack_guard_state_offset()), StackOverflow::stack_guard_enabled);
    jcc(Assembler::equal, no_reserved_zone_enabling);

    cmpptr(rbx, Address(rthread, JavaThread::reserved_stack_activation_offset()));
    jcc(Assembler::lessEqual, no_reserved_zone_enabling);


The Aarch64 code is missing the check of the JavaThread::stack_guard_state, which IIUC means on x64 we would jump over the SharedRuntime::enable_stack_reserved_zone call that fails on Aarch64.;;;","2023-06-26 18:12;dholmes;It seems that JDK-8146697 was only applied to x64 where the failure was seen, rather than being added to the same code on all platforms. The current situation seems very similar to that reported in JDK-8146697.;;;","2023-06-26 23:31;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/14669
Date: 2023-06-27 06:12:47 +0000;;;","2023-07-02 21:24;dukebot;Changeset: 52ee5700
Author:    David Holmes <dholmes@openjdk.org>
Date:      2023-07-03 04:23:58 +0000
URL:       https://git.openjdk.org/jdk/commit/52ee570025589d4d813ec4deae1f6133ca83156b
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
"java/net/httpclient/ExecutorShutdown fails intermittently, if connection closed during upgrade",JDK-8309200,5102208,Bug,Closed,JDK,JDK,software,duke,,,P4,Fixed,dfuchs,dfuchs,dfuchs,2023-05-31 05:01,2023-08-08 09:22,2023-10-01 09:55,2023-06-02 07:37,,,,,,,21,core-libs,,0,httpclient,intermittent,,,,,,,,,,,,"The ExecutorShutdown has been observed failing intermittently, if by misfortune the shutdown sequence causes a connection to get aborted while upgrading:

java.lang.AssertionError: 2: Unexpected exception: java.io.IOException: connection closed locally
	at ExecutorShutdown.checkCause(ExecutorShutdown.java:146)
	at ExecutorShutdown.lambda$testConcurrent$1(ExecutorShutdown.java:197)
	at java.base/java.util.concurrent.CompletableFuture.uniExceptionally(CompletableFuture.java:990)
	at java.base/java.util.concurrent.CompletableFuture$UniExceptionally.tryFire(CompletableFuture.java:974)
	at java.base/java.util.concurrent.CompletableFuture.postComplete(CompletableFuture.java:510)
	at java.base/java.util.concurrent.CompletableFuture.postFire(CompletableFuture.java:614)
	at java.base/java.util.concurrent.CompletableFuture$UniWhenComplete.tryFire(CompletableFuture.java:844)
	at java.base/java.util.concurrent.CompletableFuture$Completion.exec(CompletableFuture.java:483)
	at java.base/java.util.concurrent.ForkJoinTask.doExec(ForkJoinTask.java:387)
	at java.base/java.util.concurrent.ForkJoinPool$WorkQueue.topLevelExec(ForkJoinPool.java:1312)
	at java.base/java.util.concurrent.ForkJoinPool.scan(ForkJoinPool.java:1843)
	at java.base/java.util.concurrent.ForkJoinPool.runWorker(ForkJoinPool.java:1808)
	at java.base/java.util.concurrent.ForkJoinWorkerThread.run(ForkJoinWorkerThread.java:188)
Caused by: java.io.IOException: connection closed locally
	at java.net.http/jdk.internal.net.http.SocketTube.signalClosed(SocketTube.java:159)
	at java.net.http/jdk.internal.net.http.PlainHttpConnection.close(PlainHttpConnection.java:418)
	at java.net.http/jdk.internal.net.http.AsyncSSLConnection.close(AsyncSSLConnection.java:111)
	at java.net.http/jdk.internal.net.http.Exchange$ConnectionAborter.closeConnection(Exchange.java:188)
	at java.net.http/jdk.internal.net.http.Exchange$ConnectionAborter.closeConnection(Exchange.java:172)
	at java.net.http/jdk.internal.net.http.Exchange.cancel(Exchange.java:271)
	at java.net.http/jdk.internal.net.http.MultiExchange.cancel(MultiExchange.java:265)
	at java.net.http/jdk.internal.net.http.HttpClientImpl$PendingRequest.abort(HttpClientImpl.java:260)
	at java.net.http/jdk.internal.net.http.HttpClientImpl.abortPendingRequests(HttpClientImpl.java:318)
	at java.net.http/jdk.internal.net.http.HttpClientImpl$SelectorManager.abort(HttpClientImpl.java:1211)
	at java.net.http/jdk.internal.net.http.HttpClientImpl.onSubmitFailure(HttpClientImpl.java:522)
	at java.net.http/jdk.internal.net.http.HttpClientImpl$DelegatingExecutor.ensureExecutedAsync(HttpClientImpl.java:185)
	at java.net.http/jdk.internal.net.http.HttpClientImpl$DelegatingExecutor.execute(HttpClientImpl.java:175)
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i31qkr:",9223372036854775807,b26,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@446e124a,,,,,,,Verified,,"2023-05-31 09:58;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/14251
Date: 2023-05-31 16:52:02 +0000;;;","2023-06-02 07:37;dukebot;Changeset: 931913fb
Author:    Daniel Fuchs <dfuchs@openjdk.org>
Date:      2023-06-02 14:34:54 +0000
URL:       https://git.openjdk.org/jdk/commit/931913fbb299fbed7485ab8229100e6e56d8bada
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
[Lilliput/JDK17] Fix ObjectSampleMarker without Lilliput,JDK-8309197,5102205,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,shade,shade,shade,2023-05-31 04:37,2023-06-01 06:09,2023-10-01 09:55,2023-06-01 06:09,repo-lilliput-17,,,,,,,hotspot,,0,,,,,,,,,,,,,,"The change in ObjectSampleMarker, a part of JFR, is incorrect when Lilliput is off. It would reach to `set_narrow_klass` and `narrow_klass` unconditionally, but that is only safe to do when `UseCompactObjectHeader` is on. 

This would be caught by assert in `set_narrow_klass` and `narrow_klass` with `-UCOH`. AFAICS, this has a chance to corrupt the header in release bits, as it would copy only the parts of the mark word, and we might be just lucky those are the same bits.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i31qk3:",9223372036854775807,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,,,"2023-05-31 04:48;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/lilliput-jdk17u/pull/30
Date: 2023-05-31 11:43:31 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Test vmTestbase/nsk/jvmti/scenarios/jni_interception/JI05/ji05t001/TestDescription.java fails after JDK-8308341,JDK-8309171,5102177,Bug,Closed,JDK,JDK,software,duke,,,P2,Fixed,dholmes,dholmes,dholmes,2023-05-30 22:59,2023-06-29 13:43,2023-10-01 09:55,2023-05-31 14:16,21,,,,,,21,hotspot,,0,problemlist,tier4,,,,,,,,,,,,"----------System.out:(4/291)----------
The following fake exception stacktrace is for failure analysis. 
nsk.share.Fake_Exception_for_RULE_Creation: (ji05t001.cpp:263) TEST FAILURE: AttachCurrentThread() returns: -1
	at nsk_lvcomplain(nsk_tools.cpp:172)
# ERROR: ji05t001.cpp, 263: TEST FAILURE: AttachCurrentThread() returns: -1",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8308341,,,,JDK-8309243,,,,,,,,,,,,,,,,,,,21,,,,,,,,"0|i31qdv:",9223372036854775807,b25,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,Verified,,"2023-05-30 23:31;dholmes;The fix for JDK-8308341 overlooked the fact that during VM initialization, agents can run and create native threads that will attach to (and potentially detach from)  the VM. The check that VM init was complete before allowing those operations was too strong and has to be reverted.;;;","2023-05-30 23:46;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/14239
Date: 2023-05-31 06:41:26 +0000;;;","2023-05-31 14:16;dukebot;Changeset: 01199698
Author:    David Holmes <dholmes@openjdk.org>
Date:      2023-05-31 21:13:30 +0000
URL:       https://git.openjdk.org/jdk/commit/01199698166baf5e727500fdb7846084f7b8f8ac
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
CDS archive heap is always relocated for larger heap,JDK-8309170,5102176,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,ccheung,iklam,iklam,2023-05-30 22:46,2023-06-12 20:47,2023-10-01 09:55,2023-06-05 11:36,,,,,,,21,hotspot,,0,cds,,,,,,,,,,,,,"The reason is the dump-time heap ends at 0x00000007c0000000, but the runtime heap ends at 0x0000000800000000. We should try to make both cases end at the same location (probably 0x0000000800000000).

=================
$ java -Xshare:dump -Xmx8g
$ java -Xlog:cds -Xmx8g --version
[0.014s][info][cds] trying to map /jdk3/bld/tea-debug/images/jdk/lib/server/classes.jsa
[0.014s][info][cds] Opened archive /jdk3/bld/tea-debug/images/jdk/lib/server/classes.jsa.
[0.014s][info][cds] Archive was created with UseCompressedOops = 1, UseCompressedClassPointers = 1
[0.014s][info][cds] Core region alignment: 4096
[0.014s][info][cds] Reserved archive_space_rs [0x0000000800000000 - 0x0000000801000000] (16777216) bytes
[0.014s][info][cds] Reserved class_space_rs   [0x0000000801000000 - 0x0000000841000000] (1073741824) bytes
[0.014s][info][cds] Mapped static  region #0 at base 0x0000000800000000 top 0x000000080050d000 (ReadWrite)
[0.014s][info][cds] Mapped static  region #1 at base 0x000000080050d000 top 0x0000000800d2e000 (ReadOnly)
[0.014s][info][cds] CDS archive was created with max heap size = 8192M, and the following configuration:
[0.014s][info][cds]     narrow_klass_base = 0x0000000800000000, narrow_klass_shift = 0
[0.014s][info][cds]     narrow_oop_mode = 1, narrow_oop_base = 0x0000000000000000, narrow_oop_shift = 3
[0.014s][info][cds]     heap range = [0x00000005c0000000 - 0x00000007c0000000]
[0.014s][info][cds] The current max heap size = 8192M, HeapRegion::GrainBytes = 4194304
[0.014s][info][cds]     narrow_klass_base = 0x0000000800000000, narrow_klass_shift = 0
[0.014s][info][cds]     narrow_oop_mode = 1, narrow_oop_base = 0x0000000000000000, narrow_oop_shift = 3
[0.014s][info][cds]     heap range = [0x0000000600000000 - 0x0000000800000000]
[0.014s][info][cds] Preferred address to map heap data (to avoid relocation) is 0x00000007bfc00000
[0.015s][info][cds] Mapped static  region #2 at base 0x00007fa21d6ab000 top 0x00007fa21d6eb000 (Bitmap)
[0.015s][info][cds] Heap data mapped at 0x00000007ffc00000, size =  1075264 bytes
[0.015s][info][cds] CDS heap data relocation delta = 1073741824 bytes
[0.015s][info][cds] optimized module handling: enabled
[0.015s][info][cds] full module graph: enabled
[0.015s][info][cds] use_full_module_graph = true; java.base = 0x0000000800507f18
[0.022s][info][cds] patching heap embedded pointers: narrowOop 0xf7f80000 -> 0xfff80000
[0.022s][info][cds] CDS heap data relocation quick delta = 0x8000000
[0.036s][info][cds] Unmapping region #2 at base 0x00007fa21d6ab000 (Bitmap)

",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i31qdn:",9223372036854775807,b26,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,,,"2023-05-31 09:10;asmehra;Looks like this code is responsible for the difference in heap location: https://github.com/openjdk/jdk/blob/70670b4af617699782f892ae4cb5228ec655a2d0/src/hotspot/share/memory/virtualspace.cpp#L547-L558;;;","2023-05-31 10:09;iklam;Thanks [~asmehra] for finding the cause. This seems to fix it:

--- a/src/hotspot/share/memory/virtualspace.cpp
+++ b/src/hotspot/share/memory/virtualspace.cpp
@@ -551,7 +551,7 @@ void ReservedHeapSpace::initialize_compressed_heap(const size_t size, size_t ali
     const size_t class_space = align_up(CompressedClassSpaceSize, alignment);
     // For small heaps, save some space for compressed class pointer
     // space so it can be decoded with no base.
-    if (UseCompressedClassPointers && !UseSharedSpaces &&
+    if (UseCompressedClassPointers && !UseSharedSpaces && !DumpSharedSpaces &&


=====================

[0.014s][info][cds       ] CDS archive was created with max heap size = 7960M, and the following configuration:
[0.014s][info][cds       ]     narrow_klass_base = 0x0000000800000000, narrow_klass_shift = 0
[0.014s][info][cds       ]     narrow_oop_mode = 1, narrow_oop_base = 0x0000000000000000, narrow_oop_shift = 3
[0.014s][info][cds       ]     heap range = [0x000000060e800000 - 0x0000000800000000]
[0.014s][info][cds       ] The current max heap size = 7960M, HeapRegion::GrainBytes = 4194304
[0.014s][info][cds       ]     narrow_klass_base = 0x0000000800000000, narrow_klass_shift = 0
[0.014s][info][cds       ]     narrow_oop_mode = 1, narrow_oop_base = 0x0000000000000000, narrow_oop_shift = 3
[0.014s][info][cds       ]     heap range = [0x000000060e800000 - 0x0000000800000000]
[0.014s][info][cds       ] Requested heap region [0x00000007ffc00000 - 0x00000007ffd06640] =  1074752 bytes
[0.014s][info][cds       ] CDS heap data relocation delta = 0 bytes
;;;","2023-05-31 10:25;iklam;There's one significant change:

Before the above patch, classes are loaded like into these ""source"" addresses (0x00000007cxxxxxxx), so it doesn't overlap with the requested address of the classes (0x0x0000000800000000 ~ )

$ java -Xshare:dump  -Xlog:class+load=debug | less
java.lang.Object source: jrt:/java.base
 klass: 0x00000007c0041200 super: 0x0000000000000000 loader: [loader data: 0x00007f261c0edb80 of 'bootstrap'] bytes: 2487 checksum: 2ea24a37
java.io.Serializable source: jrt:/java.base
 klass: 0x00000007c0041410 super: 0x00000007c0041200 loader: [loader data: 0x00007f261c0edb80 of 'bootstrap'] bytes: 113 checksum: 70365af9

After the above patch, classes are loaded like into these  ""source"" addresses (0x000000080xxxxxxx), so it DOES overlap with the requested address of the classes (0x0x0000000800000000 ~ )

$ java -Xshare:dump  -Xlog:class+load=debug | less
java.lang.Object source: jrt:/java.base
 klass: 0x0000000800041200 super: 0x0000000000000000 loader: [loader data: 0x00007fce940edb60 of 'bootstrap'] bytes: 2487 checksum: 2ea24a37
java.io.Serializable source: jrt:/java.base
 klass: 0x0000000800041410 super: 0x0000000800041200 loader: [loader data: 0x00007fce940edb60 of 'bootstrap'] bytes: 113 checksum: 70365af9
java.lang.Comparable source: jrt:/java.base

This is probably OK, as the CDS dumping code should tolerate overlaps between the source address space and requested address space. However, thorough testing is needed.;;;","2023-05-31 10:31;iklam;This fix is desirable for 21 as it's a simple fix to improve start-up performance.;;;","2023-06-02 17:59;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/14295
Date: 2023-06-03 00:54:36 +0000;;;","2023-06-05 11:36;dukebot;Changeset: e970ddbc
Author:    Calvin Cheung <ccheung@openjdk.org>
Date:      2023-06-05 18:33:54 +0000
URL:       https://git.openjdk.org/jdk/commit/e970ddbc60aadf170dc22b19b86ddbf965bf5ea4
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
"Need to escape "" inside attribute values",JDK-8309150,5102155,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,jjg,jjg,jjg,2023-05-30 15:27,2023-06-04 20:16,2023-10-01 09:55,2023-05-31 14:22,21,,,,,,21,tools,,0,,,,,,,,,,,,,,"HtmlTree.write needs to escape "" characters inside attribute values",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i31q8z:",9223372036854775807,b25,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@7900061a,,,,,,,,,"2023-05-30 16:30;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/14234
Date: 2023-05-30 23:22:53 +0000;;;","2023-05-31 14:22;dukebot;Changeset: 09514745
Author:    Jonathan Gibbons <jjg@openjdk.org>
Date:      2023-05-31 21:20:05 +0000
URL:       https://git.openjdk.org/jdk/commit/09514745fc87d5a212bdf09399aa2045f02b4612
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
"ResourceHashtable failed ""assert(~(_allocation_t[0] | allocation_mask) == (uintptr_t)this) failed: lost resource object""",JDK-8309140,5102144,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,jgu,dcubed,dcubed,2023-05-30 14:44,2023-07-25 04:28,2023-10-01 09:55,2023-06-28 10:11,21,,,,,,22,hotspot,,0,hashtable,hgupdate-sync,tier5,,,,,,,,,,,"The following test failed in the JDK21 CI:

vmTestbase/nsk/jdi/VirtualMachineManager/connectedVirtualMachines/convm002/TestDescription.java

Here's a snippet from the log file:

==> nsk/jdi/VirtualMachineManager/connectedVirtualMachines/convm002        TESTING BEGINS
--> debugger: ......call to Bootstrap.virtualMachineManager()
--> debugger: ......call to vmm.connectedVirtualMachines()
--> debugger:        connectedVM.size() == 1
--> debugger: ......getting: VirtualMachine vm1 = connectedVM.get(0);
--> debugger: ......comparing: vm.equals(vm1)
--> debugger: ......vm1.exit(95)
debugee.stdout> #
--> debugger: waiting for the debuggee to finish ...
debugee.stdout> # A fatal error has been detected by the Java Runtime Environment:
debugee.stdout> #
debugee.stdout> #  Internal Error (/opt/mach5/mesos/work_dir/slaves/741e9afd-8c02-45c3-b2e2-9db1450d0832-S179652/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/92b79186-dc43-46f5-b3fe-a026e05297be/runs/b9a81567-2737-4396-9555-6a4d73c11313/workspace/open/src/hotspot/share/memory/allocation.cpp:159), pid=2239672, tid=2239709
debugee.stdout> #  assert(~(_allocation_t[0] | allocation_mask) == (uintptr_t)this) failed: lost resource object
debugee.stdout> #
debugee.stdout> # JRE version: Java(TM) SE Runtime Environment (21.0+25) (fastdebug build 21-ea+25-LTS-2162)
debugee.stdout> # Java VM: Java HotSpot(TM) 64-Bit Server VM (fastdebug 21-ea+25-LTS-2162, mixed mode, sharing, tiered, compressed oops, compressed class ptrs, g1 gc, linux-amd64)
debugee.stdout> # Problematic frame:
debugee.stdout> # V  [libjvm.so+0x5db2c8]  AnyObj::get_allocation_type() const [clone .part.0]+0x28
debugee.stdout> #
debugee.stdout> # Core dump will be written. Default location: Core dumps may be processed with ""/opt/core.sh %p"" (or dumping to /opt/mach5/mesos/work_dir/slaves/741e9afd-8c02-45c3-b2e2-9db1450d0832-S179807/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/931a4b37-ac97-44d8-96e7-042e0dbc60e1/runs/b52dc26a-3e6b-4db3-b0e9-6c471a41b766/testoutput/test-support/jtreg_open_test_hotspot_jtreg_vmTestbase_nsk_jdi/scratch/1/core.2239672)
debugee.stdout> #
debugee.stdout> # An error report file with more information is saved as:
debugee.stdout> # /opt/mach5/mesos/work_dir/slaves/741e9afd-8c02-45c3-b2e2-9db1450d0832-S179807/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/931a4b37-ac97-44d8-96e7-042e0dbc60e1/runs/b52dc26a-3e6b-4db3-b0e9-6c471a41b766/testoutput/test-support/jtreg_open_test_hotspot_jtreg_vmTestbase_nsk_jdi/scratch/1/hs_err_pid2239672.log
debugee.stdout> #
debugee.stdout> # If you would like to submit a bug report, please visit:
debugee.stdout> #   https://bugreport.java.com/bugreport/crash.jsp
debugee.stdout> # The crash happened outside the Java Virtual Machine in native code.
debugee.stdout> # See problematic frame for where to report the bug.
debugee.stdout> #
# ERROR: ##> debugger: debuggee returned UNEXPECTED exit status: 134 != PASS_BASE
The following stacktrace is for failure analysis.
nsk.share.TestFailure: ##> debugger: debuggee returned UNEXPECTED exit status: 134 != PASS_BASE
	at nsk.share.Log.logExceptionForFailureAnalysis(Log.java:431)
	at nsk.share.Log.complain(Log.java:402)
	at nsk.jdi.VirtualMachineManager.connectedVirtualMachines.convm002.log3(convm002.java:93)
	at nsk.jdi.VirtualMachineManager.connectedVirtualMachines.convm002.runThis(convm002.java:210)
	at nsk.jdi.VirtualMachineManager.connectedVirtualMachines.convm002.run(convm002.java:77)
	at nsk.jdi.VirtualMachineManager.connectedVirtualMachines.convm002.main(convm002.java:72)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
	at java.base/java.lang.reflect.Method.invoke(Method.java:578)
	at com.sun.javatest.regtest.agent.MainWrapper$MainTask.run(MainWrapper.java:138)
	at java.base/java.lang.VirtualThread.run(VirtualThread.java:311)
--> debugger:        waiting for VMDisconnectEvent
--> debugger:        new:  eventSet = eventQueue.remove();
--> debugger:      :  eventSet != null;  size == 1
--> debugger:       VMDisconnectEvent removed
--> debugger:      :  eventSet == null:  EventQueue is empty
--> debugger: ......connectedVM = vmm.connectedVirtualMachines();
--> debugger:        connectedVM.size() == 0

==> nsk/jdi/VirtualMachineManager/connectedVirtualMachines/convm002        TESTING ENDS
# ERROR: TEST FAILED
The following stacktrace is for failure analysis.
nsk.share.TestFailure: TEST FAILED
	at nsk.share.Log.logExceptionForFailureAnalysis(Log.java:431)
	at nsk.share.Log.complain(Log.java:402)
	at nsk.jdi.VirtualMachineManager.connectedVirtualMachines.convm002.runThis(convm002.java:250)
	at nsk.jdi.VirtualMachineManager.connectedVirtualMachines.convm002.run(convm002.java:77)
	at nsk.jdi.VirtualMachineManager.connectedVirtualMachines.convm002.main(convm002.java:72)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
	at java.base/java.lang.reflect.Method.invoke(Method.java:578)
	at com.sun.javatest.regtest.agent.MainWrapper$MainTask.run(MainWrapper.java:138)
	at java.base/java.lang.VirtualThread.run(VirtualThread.java:311)


#>  
#>  SUMMARY: Following errors occured
#>      during test execution:
#>  
# ERROR: ##> debugger: debuggee returned UNEXPECTED exit status: 134 != PASS_BASE
# ERROR: TEST FAILED
----------System.err:(0/0)----------
----------rerun:(38/9060)*----------


Here's the crashing thread's stack:

---------------  T H R E A D  ---------------

Current thread (0x00007ff208393260):  JavaThread ""JDWP Transport Listener: dt_socket"" daemon [_thread_in_native, id=2239709, stack(0x00007ff1ec81e000,0x00007ff1ec91f000) (1028K)]

Stack: [0x00007ff1ec81e000,0x00007ff1ec91f000],  sp=0x00007ff1ec91da70,  free space=1022k
Native frames: (J=compiled Java code, j=interpreted, Vv=VM code, C=native code)
V  [libjvm.so+0x5db2c8]  AnyObj::get_allocation_type() const [clone .part.0]+0x28  (allocation.cpp:159)
V  [libjvm.so+0x5dbdc0]  AnyObj::print() const+0x0  (allocation.cpp:215)
V  [libjvm.so+0x152069e]  ResourceHashtable<PlaceholderKey, PlaceholderEntry, 503u, (AnyObj::allocation_type)2, (MEMFLAGS)1, &PlaceholderKey::hash, &PlaceholderKey::equals>::~ResourceHashtable()+0x6e  (resourceHash.hpp:36)",,,,,,,,,,,JDK-8311598,JDK-8312891,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,x86_64,,,,,,,,,linux,,,,,,"0|i31q6j:",9223372036854775807,b04,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,,,"2023-06-06 11:19;lfoltan;ILW = HLM = P3;;;","2023-06-09 13:13;coleenp;The core file shows the static PlaceholderTable being deleted during exit, which is ok.  There's an entry in it.  This is unusual since that means that entry is in the process of loading and no other thread seems to be loading this entry.  The entry it shows has already been deleted or at least destroyed (allocation[0] == badHeapOopVal) even though the entry looks well formed.

215	AnyObj::~AnyObj() {
216	  // allocated_on_C_heap() also checks that encoded (in _allocation) address == this.
217	  if (!allocated_on_C_heap()) { // AnyObj::delete() will zap _allocation for C_heap.
218	    _allocation_t[0] = (uintptr_t)badHeapOopVal; // zap type
219	  }
220	}


(gdb) print *this
$5 = {<AnyObj> = {_vptr.AnyObj = 0x7ff20fce2110 <vtable for AnyObj+16>, _allocation_t = {3147254228350515902, 0}}, _hash = 1699093021, 
  _key = {_name = {<StackObj> = {<No data fields>}, _temp = 0x7ff1ed2b0118}, _loader_data = 0x7ff208200b80}, _value = {
    _supername = {<StackObj> = {<No data fields>}, _temp = 0x0}, _definer = 0x0, _instanceKlass = 0x80106a2f8, _superThreadQ = 0x0, 
    _loadInstanceThreadQ = 0x0, _defineThreadQ = 0x0}, _next = 0x0}
(gdb) print /lx this->_allocation_t[0]
$6 = 0x2bad4b0bbaadbabe
(gdb) print /lx badHeapOopVal
$8 = 0x2bad4b0bbaadbabe
(gdb) print _key->_name._temp
$9 = (Symbol *) 0x7ff1ed2b0118
(gdb) print (char*)_key->_name._temp->_body
$10 = 0x7ff1ed2b011e ""java/util/concurrent/ThreadPoolExecutor$Worker"", '\361' <repeats 51 times>, <incomplete sequence \361>

This seems either impossible or something that would happen all the time (some entry deleted but incompletely).  I can't reproduce this.

;;;","2023-06-12 08:03;coleenp;
Since the Placeholder table is static, the ResourceHashtable destructor is run with the exit_handlers:

#12 ResourceHashtable<PlaceholderKey, PlaceholderEntry, 503u, (AnyObj::allocation_type)2, (MEMFLAGS)1, &PlaceholderKey::hash, &PlaceholderKey::equals>::~ResourceHashtable (this=0x7ff20fe7a280 <_placeholders>, __in_chrg=<optimized out>)
    at /opt/mach5/mesos/work_dir/slaves/741e9afd-8c02-45c3-b2e2-9db1450d0832-S179652/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/92b79186-dc43-46f5-b3fe-a026e05297be/runs/b9a81567-2737-4396-9555-6a4d73c11313/workspace/open/src/hotspot/share/utilities/resourceHash.hpp:371
#13 0x00007ff20fefe29c in __run_exit_handlers () from ./lib64/libc.so.6   <====
#14 0x00007ff20fefe3d0 in exit () from ./lib64/libc.so.6

But there are Java threads still alive (they're waiting probably for the last safepoint).

This table is destroyed without locking SystemDictionary_lock - so the likely explanation is that a Java thread raced to delete the node, while this destructor is running unlocked.;;;","2023-06-12 18:47;dholmes;There should not be any running Java threads inside the VM at the time the exit_handlers are called - they should either be blocked at the termination safepoint or else executing in native.;;;","2023-06-13 06:56;coleenp;Want me to post the thread stacks from the core file?
The threads are blocked, but this node was already deleted by one of them, so we've fetched a node in the exit handlers without a lock.;;;","2023-06-13 14:08;coleenp;I think what happened is that this thread called exit directly:
Current thread (0x00007ff208393260):  JavaThread ""JDWP Transport Listener: dt_socket"" daemon [_thread_in_native, id=2239709, stack(0x00007ff1ec81e000,0x00007ff1ec91f000) (1028K)]

Which triggered the exit handlers.  I'm not sure when we block the other threads in this case.;;;","2023-06-13 16:37;dholmes;When you say ""called exit directly"" do you mean Java System.exit, or C exit ? For the former case we go to a safepoint almost immediately and the VMThread  does all the shutdown tasks. For the latter then of course all bets are off as that should not happen and we can't manage the VM shutdown in that case.;;;","2023-06-13 16:40;dholmes;Of course if we are calling exit due to an abort/error-condition that also bypasses the VM shutdown process and so would lead to problems.

This is why I've always cautioned against using statics in the VM - their cleanup can be very fragile.;;;","2023-06-13 16:53;coleenp;Yes, I think this looks like it's calling exit directly.  Making these hashtables non-static is a small fix, so we should do that even though JNI errors aren't something we can protect against completely, this makes our hashtables look bad and gives us strange bugs to debug when they're reported.;;;","2023-06-22 09:31;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/14601
Date: 2023-06-21 17:49:10 +0000;;;","2023-06-28 10:11;dukebot;Changeset: b6c789fa
Author:    Justin Gu <justin.j.gu@oracle.com>
Committer: Coleen Phillimore <coleenp@openjdk.org>
Date:      2023-06-28 17:10:16 +0000
URL:       https://git.openjdk.org/jdk/commit/b6c789faad63f18e17ee7e5cefd024b3776fd469
;;;","2023-07-06 08:32;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk21/pull/102
Date: 2023-07-06 15:24:45 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Fix container tests for jdks with symlinked conf dir,JDK-8309138,5102142,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,zzambers,zzambers,zzambers,2023-05-30 14:35,2023-07-24 21:46,2023-10-01 09:55,2023-06-01 09:28,,,,,,,21,hotspot,,0,containers,jdk11u-fix-request,jdk11u-fix-yes,jdk17u-fix-request,jdk17u-fix-yes,noreg-self,,,,,,,,"Problem:
Container tests copy tested jdk into container to do testing on it. This however does not work correctly for builds, in which conf directory is symlinked (such as fedora/rhel packages), causing failures due to missing config files in container.

Solution:
Symlinks are followed when copying tested jdk.",,,,,,,,,,,JDK-8310036,JDK-8312669,JDK-8310044,JDK-8312217,JDK-8311772,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i31q63:",9223372036854775807,b26,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,,,"2023-05-30 14:42;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/14230
Date: 2023-05-30 21:36:22 +0000;;;","2023-05-31 01:39;sgehwolf;Reproducer:
$ cp -r ./build/linux-x86_64-server-release/images/jdk jdk21-jdk
$ cp -r jdk21-jdk/conf/ external-conf
$ rm -rf jdk21-jdk/conf/
$ cd jdk21-jdk/
$ ln -s ../external-conf/ conf
$ ls -l
total 32
drwxr-xr-x.  2 sgehwolf sgehwolf 4096 May 31 10:28 bin
lrwxrwxrwx.  1 sgehwolf sgehwolf   17 May 31 10:29 conf -> ../external-conf/
drwxr-xr-x.  4 sgehwolf sgehwolf 4096 May 31 10:28 demo
drwxr-xr-x.  3 sgehwolf sgehwolf 4096 May 31 10:28 include
drwxr-xr-x.  2 sgehwolf sgehwolf 4096 May 31 10:28 jmods
drwxr-xr-x. 72 sgehwolf sgehwolf 4096 May 31 10:28 legal
drwxr-xr-x.  5 sgehwolf sgehwolf 4096 May 31 10:28 lib
drwxr-xr-x.  3 sgehwolf sgehwolf 4096 May 31 10:28 man
-rw-r--r--.  1 sgehwolf sgehwolf 1262 May 31 10:28 release
$ ./bin/java -version
openjdk version ""21-internal"" 2023-09-19
OpenJDK Runtime Environment (build 21-internal-adhoc.sgehwolf.jdk-jdk)
OpenJDK 64-Bit Server VM (build 21-internal-adhoc.sgehwolf.jdk-jdk, mixed mode, sharing)
$ cd ../
[root@foobar jdk-jdk]# rm -rf JTwork JTreport && /disk/openjdk/upstream-sources/jtreg-7.2+1/bin/jtreg -verbose:summary -jdk:$(pwd)/jdk21-jdk/ -Djdk.test.docker.image.name=fedora -Djdk.test.docker.image.version=37  test/hotspot/jtreg/containers/
Directory ""JTwork"" not found: creating
Directory ""JTreport"" not found: creating
Passed: containers/cgroup/CgroupSubsystemFactory.java
Passed: containers/cgroup/PlainRead.java
Passed: containers/docker/DockerBasicTest.java
Passed: containers/docker/ShareTmpDir.java
FAILED: containers/docker/TestCPUAwareness.java
Passed: containers/docker/TestCPUSets.java
FAILED: containers/docker/TestJcmd.java
FAILED: containers/docker/TestJcmdWithSideCar.java
FAILED: containers/docker/TestJFREvents.java
FAILED: containers/docker/TestJFRNetworkEvents.java
Error:  containers/docker/TestJFRWithJMX.java
FAILED: containers/docker/TestMemoryAwareness.java
FAILED: containers/docker/TestMemoryWithCgroupV1.java
Passed: containers/docker/TestMisc.java
Passed: containers/docker/TestPids.java
Test results: passed: 7; failed: 7; error: 1

Tests fail with (for example TestCPUAwareness.java):
Metrics.getMemoryUsage() == 14032896
Exception in thread ""main"" java.lang.InternalError: Error loading java.security file
        at java.base/java.security.Security.initialize(Security.java:105)
        at java.base/java.security.Security.lambda$static$0(Security.java:84)
        at java.base/java.security.AccessController.doPrivileged(AccessController.java:319)
        at java.base/java.security.Security.<clinit>(Security.java:83)
        at java.base/sun.security.util.SecurityProperties.getOverridableProperty(SecurityProperties.java:57)
        at java.base/sun.security.util.SecurityProperties.privilegedGetOverridable(SecurityProperties.java:48)
        at java.base/sun.security.util.SecurityProperties.includedInExceptions(SecurityProperties.java:72)
        at java.base/sun.security.util.SecurityProperties.<clinit>(SecurityProperties.java:36)
        at java.base/sun.security.util.FilePermCompat.<clinit>(FilePermCompat.java:43)
        at java.base/java.io.FilePermission.init(FilePermission.java:319)
        at java.base/java.io.FilePermission.<init>(FilePermission.java:490)
        at java.management/java.lang.management.ManagementFactory$PlatformMBeanFinder.<clinit>(ManagementFactory.java:929)
        at java.management/java.lang.management.ManagementFactory.getPlatformMXBean(ManagementFactory.java:689)
        at java.management/java.lang.management.ManagementFactory.getOperatingSystemMXBean(ManagementFactory.java:391)
        at CheckOperatingSystemMXBean.main(CheckOperatingSystemMXBean.java:42)
];
 stderr: []
 exitValue = 1
;;;","2023-06-01 09:28;dukebot;Changeset: ec555395
Author:    Zdenek Zambersky <zzambers@openjdk.org>
Committer: Severin Gehwolf <sgehwolf@openjdk.org>
Date:      2023-06-01 16:25:53 +0000
URL:       https://git.openjdk.org/jdk/commit/ec55539534d43629c1a47407a8e2e94913034a71
;;;","2023-06-06 17:10;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/1417
Date: 2023-06-07 00:05:11 +0000;;;","2023-06-06 18:34;zzambers;Fix request (17u):

Fixes container tests for jdk with symlinked conf dir (such as fedora/rhel packages).
Clean backport, only affects tests, tier1 and container tests passed

;;;","2023-06-13 08:01;zzambers;Fix request (11u):

Fixes container tests for jdk with symlinked conf dir (such as fedora/rhel packages).
Clean backport, only affects tests, tier1 and container tests passed ;;;","2023-06-13 08:05;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk11u-dev/pull/1944
Date: 2023-06-13 14:59:13 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
"AArch64: guarantee(T != T2S) failed: ""incorrect arrangement"" after JDK-8307795",JDK-8309129,5102127,Bug,Closed,JDK,JDK,software,duke,,,P2,Fixed,cpeng,thartmann,thartmann,2023-05-30 11:30,2023-07-11 05:43,2023-10-01 09:55,2023-06-05 04:34,21,,,,,,21,hotspot,,0,c2,oracle-triage-11,oracle-triage-17,oracle-triage-21,problemlist,regression,tier3,vectorapi,,,,,,"jdk/incubator/vector/Float64VectorTests.java fails with:

# A fatal error has been detected by the Java Runtime Environment:
#
#  Internal Error (assembler_aarch64.hpp:2641), pid=586848, tid=586863
#  guarantee(T != T2S) failed: incorrect arrangement
#
# JRE version: Java(TM) SE Runtime Environment (21.0+25) (build 21-ea+25-LTS-2170)
# Java VM: Java HotSpot(TM) 64-Bit Server VM (21-ea+25-LTS-2170, mixed mode, sharing, compressed oops, compressed class ptrs, g1 gc, linux-aarch64)
# Problematic frame:
# V  [libjvm.so+0x36ef04]  Assembler::addv(FloatRegister, Assembler::SIMD_Arrangement, FloatRegister)+0xe4


Current CompileTask:
C2:   9077 2118 %  b        Float64VectorTests::maskCompressFloat64VectorTestsSmokeTest @ 22 (135 bytes)

Stack: [0x0000ffff92dfd000,0x0000ffff92ffd000],  sp=0x0000ffff92ff8c40,  free space=2031k
Native frames: (J=compiled Java code, j=interpreted, Vv=VM code, C=native code)
V  [libjvm.so+0x36ef04]  Assembler::addv(FloatRegister, Assembler::SIMD_Arrangement, FloatRegister)+0xe4  (assembler_aarch64.hpp:2641)
V  [libjvm.so+0x35a2a4]  vstoremask_truecount_neonNode::emit(CodeBuffer&, PhaseRegAlloc*) const+0x324  (aarch64_vector.ad:5531)
V  [libjvm.so+0xb89918]  PhaseOutput::scratch_emit_size(Node const*)+0x1a8  (output.cpp:3245)
V  [libjvm.so+0xb862d8]  PhaseOutput::shorten_branches(unsigned int*)+0x1d8  (output.cpp:539)
V  [libjvm.so+0xb8cec0]  PhaseOutput::Output()+0x480  (output.cpp:340)
V  [libjvm.so+0x598cc8]  Compile::Code_Gen()+0x458  (compile.cpp:2971)
V  [libjvm.so+0x59c134]  Compile::Compile(ciEnv*, ciMethod*, int, Options, DirectiveSet*)+0x10b4  (compile.cpp:875)
V  [libjvm.so+0x4d2cac]  C2Compiler::compile_method(ciEnv*, ciMethod*, int, bool, DirectiveSet*)+0xf8  (c2compiler.cpp:118)
V  [libjvm.so+0x5a1614]  CompileBroker::invoke_compiler_on_method(CompileTask*)+0x9b4  (compileBroker.cpp:2265)
V  [libjvm.so+0x5a3ed8]  CompileBroker::compiler_thread_loop()+0x384  (compileBroker.cpp:1944)
V  [libjvm.so+0x80b354]  JavaThread::thread_main_inner() [clone .part.0]+0xa4  (javaThread.cpp:719)
V  [libjvm.so+0xced608]  Thread::call_run()+0xa8  (thread.cpp:217)
V  [libjvm.so+0xb767dc]  thread_native_entry(Thread*)+0xdc  (os_linux.cpp:775)",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8307795,,,,,"2023-05-30 11:32;thartmann;hs_err_pid2445203.log;https://bugs.openjdk.org/secure/attachment/104115/hs_err_pid2445203.log","2023-05-30 11:32;thartmann;replay_pid2445203.log;https://bugs.openjdk.org/secure/attachment/104116/replay_pid2445203.log",,,,,,aarch64,,,,,,,,,,,,,,,"0|i31q2r:",9223372036854775807,b26,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,Verified,,"2023-05-30 13:22;dcubed;Bumping from P3 -> P2 since regressions start at P2
and there isn't an explicit ILW analysis justifying a P3.;;;","2023-05-30 19:00;cpeng;Sorry, I am fixing this problem.;;;","2023-05-30 21:58;thartmann;ILW = Guarantee failure during C2 compilation, tier3 with single vector API test on AArch64, no workaround but disable compilation of affected method = HMM = P2;;;","2023-05-31 03:33;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/14245
Date: 2023-05-31 10:25:07 +0000;;;","2023-06-05 04:34;dukebot;Changeset: 6d511f13
Author:    changpeng1997 <Chang.Peng@arm.com>
Committer: Tobias Hartmann <thartmann@openjdk.org>
Date:      2023-06-05 11:32:53 +0000
URL:       https://git.openjdk.org/jdk/commit/6d511f1376e3a0183a484443d05142678bdaa1c2
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
java/net/httpclient/AsyncShutdownNow.java fails intermittently,JDK-8309120,5102114,Bug,Closed,JDK,JDK,software,duke,,,P3,Fixed,dfuchs,dfuchs,dfuchs,2023-05-30 08:40,2023-07-21 07:36,2023-10-01 09:55,2023-05-31 03:51,21,,,,,,21,core-libs,,0,httpclient,intermittent,regression,,,,,,,,,,,"Waiting for HTTP operations to terminate...
	gracedelay: 5000 ms, iterations: 500, wait/iteration: 10ms
WARNING: tracker for HttpClientImpl(4) has outstanding operations:
	Pending HTTP Requests: 0
	Pending HTTP/1.1 operations: 0
	Pending HTTP/2 streams: 0
	Pending WebSocket operations: 0
	Pending TCP connections: 1
	Pending Subscribers: 0
	Total pending operations: 0
	Facade referenced: false
	Selector alive: false
Found 0 client still active, with 0 operations still pending out of 8 tracked clients.
AssertionError: Found some outstanding unclosed resources in 8 clients after 500 iterations and 14676 ms, waited 5000 ms
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8308310,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i31pzv:",9223372036854775807,b25,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@446e124a,,,,,,,Verified,,"2023-05-30 09:03;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/14223
Date: 2023-05-30 15:57:55 +0000;;;","2023-05-31 03:51;dukebot;Changeset: 4aea7dab
Author:    Daniel Fuchs <dfuchs@openjdk.org>
Date:      2023-05-31 10:49:20 +0000
URL:       https://git.openjdk.org/jdk/commit/4aea7dab152de4c61724eec9a40024c990f8dabc
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
[17u/11u] Redo JDK-8297951: C2: Create skeleton predicates for all If nodes in loop predication,JDK-8309119,5102113,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,chagedorn,sgehwolf,sgehwolf,2023-05-30 08:18,2023-08-15 22:07,2023-10-01 09:55,2023-07-13 23:51,11.0.20,17.0.8,,,,,17.0.9,hotspot,,0,20-na,21-na,c2,jdk17u-fix-request,jdk17u-fix-yes,oracle-triage-21,,,,,,,,JDK-8297951 got backed out with JDK-8308884 for 17.0.8 (or 11.0.20). This patch needs to be re-done for 17.0.9 (or 11.0.21) together with a fix for JDK-8307683 also targeting 17.0.9 (or 11.0.21).,,,,,,,,,,,JDK-8313861,JDK-8314343,,,,,,,,,,,,,,,,,,,,JDK-8308884,JDK-8297951,,,JDK-8307683,,,,,,,,,,,,generic,,,,,,,,,generic,,,,,,"0|i31pzn:",9223372036854775807,b01,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2023-05-30 22:42;thartmann;ILW = Same as JDK-8297951 = P3;;;","2023-06-25 23:39;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/1497
Date: 2023-06-26 06:33:52 +0000;;;","2023-07-13 23:06;goetz;Fix request [17u]

The redo is needed after fixing 8307683. 
Clean patch, but needs to be resolved after 8307683
SAP nightly testing passed. Test passes.;;;","2023-07-13 23:51;dukebot;Changeset: a6ef655b
Author:    Goetz Lindenmaier <goetz@openjdk.org>
Date:      2023-07-14 06:48:03 +0000
URL:       https://git.openjdk.org/jdk17u-dev/commit/a6ef655b6f98fc2e1c4aa04525b91485b372aaff
;;;","2023-08-02 04:37;dukebot;Changeset: a6ef655b
Author:    Goetz Lindenmaier <goetz@openjdk.org>
Date:      2023-07-14 06:48:03 +0000
URL:       https://git.openjdk.org/jdk17u/commit/a6ef655b6f98fc2e1c4aa04525b91485b372aaff
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Build failure after JDK-8307795 due to warnings in micro-benchmark StoreMaskTrueCount.java,JDK-8309110,5102104,Bug,Closed,JDK,JDK,software,duke,,,P1,Fixed,jiefu,jiefu,jiefu,2023-05-30 06:27,2023-07-11 05:10,2023-10-01 09:55,2023-05-30 06:46,21,,,,,,21,hotspot,,0,oracle-triage-11,oracle-triage-17,oracle-triage-21,tencent-interest,tier1,vectorapi,,,,,,,,"* For target support_test_micro_classes__the.BUILD_JDK_MICROBENCHMARK_batch:
/Users/jiefu/jdk/build/macosx-aarch64-server-fastdebug/support/test/micro/classes/org/openjdk/bench/jdk/incubator/vector/jmh_generated/StoreMaskTrueCount_testInt_jmhTest.java:78: warning: [static] static method should be qualified by type name, StoreMaskTrueCount, instead of by an expression
                blackhole.consume(l_storemasktruecount0_0.testInt());
                                                         ^
/Users/jiefu/jdk/build/macosx-aarch64-server-fastdebug/support/test/micro/classes/org/openjdk/bench/jdk/incubator/vector/jmh_generated/StoreMaskTrueCount_testInt_jmhTest.java:88: warning: [static] static method should be qualified by type name, StoreMaskTrueCount, instead of by an expression
                    blackhole.consume(l_storemasktruecount0_0.testInt());
                                                             ^
/Users/jiefu/jdk/build/macosx-aarch64-server-fastdebug/support/test/micro/classes/org/openjdk/bench/jdk/incubator/vector/jmh_generated/StoreMaskTrueCount_testInt_jmhTest.java:119: warning: [static] static method should be qualified by type name, StoreMaskTrueCount, instead of by an expression
            blackhole.consume(l_storemasktruecount0_0.testInt());
                                                     ^
/Users/jiefu/jdk/build/macosx-aarch64-server-fastdebug/support/test/micro/classes/org/openjdk/bench/jdk/incubator/vector/jmh_generated/StoreMaskTrueCount_testInt_jmhTest.java:145: warning: [static] static method should be qualified by type name, StoreMaskTrueCount, instead of by an expression
                blackhole.consume(l_storemasktruecount0_0.testInt());
                                                         ^
/Users/jiefu/jdk/build/macosx-aarch64-server-fastdebug/support/test/micro/classes/org/openjdk/bench/jdk/incubator/vector/jmh_generated/StoreMaskTrueCount_testInt_jmhTest.java:155: warning: [static] static method should be qualified by type name, StoreMaskTrueCount, instead of by an expression
                    blackhole.consume(l_storemasktruecount0_0.testInt());
                                                             ^
   ... (rest of output omitted)",,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8309112,,,,JDK-8307795,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i31pxn:",9223372036854775807,b25,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,Verified,,"2023-05-30 06:35;thartmann;This breaks our builds. We need to fix this immediately or back out JDK-8307795.

[~jiefu] do you have a fix ready?;;;","2023-05-30 06:37;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/14218
Date: 2023-05-30 13:31:16 +0000;;;","2023-05-30 06:46;dukebot;Changeset: 15e02853
Author:    Jie Fu <jiefu@openjdk.org>
Date:      2023-05-30 13:43:14 +0000
URL:       https://git.openjdk.org/jdk/commit/15e028530ad6408693e9f21fb94daa705b951897
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
AArch64: [TESTBUG] compiler/intrinsics/sha/cli/TestUseSHA3IntrinsicsOptionOnSupportedCPU.java fails on Neoverse N2 and V1,JDK-8309109,5102103,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,haosun,haosun,haosun,2023-05-30 06:15,2023-07-12 13:35,2023-10-01 09:55,2023-06-27 19:01,17,18,19,20,21,,22,hotspot,,0,noreg-self,oracle-triage-22,,,,,,,,,,,,"`UseSHA3Intrinsics` was introduced in JDK-8252204, but it was not
auto-enabled due to the lack of real hardware. 

After JDK-8297092, `UseSHA3Intrinsics` is only auto-enabled on hardware with performance benefit. See the code https://github.com/openjdk/jdk/pull/11382/files#diff-a87e260510f34ca7d9b0feb089ad982be8268c5c8aa5a71221f6738b051ea488R338-R345

As a result, test case compiler/intrinsics/sha/cli/TestUseSHA3IntrinsicsOptionOnSupportedCPU.java fails on Neoverse N2 and V1.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8297092,JDK-8252204,,,,,,,,,,,aarch64,,,,,,,,,,,,,,,"0|i31pxf:",9223372036854775807,b04,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2023-06-18 18:08;haosun;This test case compiler/intrinsics/sha/cli/TestUseSHA3IntrinsicsOptionOnSupportedCPU.java was introduced in JDK-8252204. Due to the lack of real hardware, it was not fulled evaluted.
I suppose, this case would fail on Neonverse N2/V1 as well then. But it was not exposed since the jtreg test case was only run on simulator.

Hence, the ""Affects Versions"" label is assigned to ""17, 18, 19, 20, 21"".;;;","2023-06-19 23:40;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/14551
Date: 2023-06-20 06:35:15 +0000;;;","2023-06-22 05:59;thartmann;ILW = Test fails because requires condition does not work as expected (test bug), single test on Neoverse, no workaround = MLH = P4;;;","2023-06-27 19:01;dukebot;Changeset: afdaa2a3
Author:    Hao Sun <haosun@openjdk.org>
Date:      2023-06-28 02:00:09 +0000
URL:       https://git.openjdk.org/jdk/commit/afdaa2a3305461538f3a36de2b0b540fe2da9b37
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
6.7: Clarify that an unnamed top-level class does not have a fully qualified or canonical name,JDK-8309105,5102099,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,gbierman,gbierman,gbierman,2023-05-30 05:27,2023-06-04 20:13,2023-10-01 09:55,2023-05-31 02:58,,,,,,,21,specification,,0,noreg-doc,,,,,,,,,,,,,The spec change document for JEP 445 (Unnamed classes and instance main methods) would be improved if it explicitly asserted that unnamed top-level classes do not have fully qualified or canonical names. ,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i31pwj:",9223372036854775807,b25,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@7441ef8d,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
[JVMCI] compiler/unsafe/UnsafeGetStableArrayElement test asserts wrong values with Graal,JDK-8309104,5102098,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,davleopo,davleopo,davleopo,2023-05-30 05:25,2023-08-15 22:09,2023-10-01 09:55,2023-06-05 00:57,21,,,,,,21,hotspot,,0,jvmci,noreg-self,oracle-triage-21,,,,,,,,,,,"JDK-8264135 introduced changes to the UnsafeGetStableArrayElement test to account for the case that the test is run with the Graal compiler. If Graal is used it will assert that constants are folded by asserting matching instead of mismatch.

Since JDK-8275645 Graal no longer constant folds unaligned reads and thus the UnsafeGetStableArrayElement test fails for the unaligned cases because it tests that Graal actually folds them. 

The test should be adapted to assert mismatch instead of match for the unaligned Test::testS_U,Test::testC_U,Test::testI_U,Test::testJ_U tests.",,,,,,,,,,,JDK-8313990,JDK-8314354,,,,,,,,,,,,,,,,,,,,JDK-8264135,JDK-8275645,,,JDK-8310055,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i31pwb:",9223372036854775807,b26,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2023-05-30 22:51;thartmann;ILW = Test fails because constant folding is not performed, single test with Graal, no workaround = MLH = P4;;;","2023-05-31 02:06;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/14242
Date: 2023-05-31 08:46:19 +0000;;;","2023-06-05 00:57;dukebot;Changeset: 11fb5b22
Author:    David Leopoldseder <davleopo@openjdk.org>
Committer: Doug Simon <dnsimon@openjdk.org>
Date:      2023-06-05 07:54:42 +0000
URL:       https://git.openjdk.org/jdk/commit/11fb5b2209124bbf1100657e340ba5aebc3820d7
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Remove UTF-8 character from TaskbarPositionTest.java,JDK-8309095,5102086,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,rkannathpari,rkannathpari,rkannathpari,2023-05-30 02:51,2023-08-09 06:26,2023-10-01 09:55,2023-05-30 05:13,21,,,,,,21,client-libs,,0,cssn23_05_02,jdk11u-sap-interest,jdk17u-fix-request,jdk17u-fix-yes,noreg-self,sustaining,,,,,,,,"JDK-8289547 added a UTF-8 character (↓) into TaskbarPositionTest.java which causes compilation errors when previous version of Java are used (if the system code page isn't UTF-8).


TaskbarPositionTest.java:64: error: unmappable character (0xE2) for encoding US-ASCII
 * The test uses Ctrl+Down Arrow (???) which is a system shortcut on macOS,

The character is not essential, it can be removed safely.",,,,,,,,,,,JDK-8309359,JDK-8309449,JDK-8314043,JDK-8309299,JDK-8309301,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,21,,,,,,,,"0|i31ptn:",9223372036854775807,b25,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@568a5b31,,,,,,,,,"2023-05-30 04:41;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/14212
Date: 2023-05-30 11:22:06 +0000;;;","2023-05-30 05:13;dukebot;Changeset: 07f20704
Author:    Renjith <renjith.kannath.pariyangad@oracle.com>
Committer: Alexey Ivanov <aivanov@openjdk.org>
Date:      2023-05-30 12:11:34 +0000
URL:       https://git.openjdk.org/jdk/commit/07f2070411b3bff5608166ceae0e0bdbf155e7c2
;;;","2023-08-08 05:53;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/1651
Date: 2023-08-08 12:46:34 +0000;;;","2023-08-08 05:56;mdoerr;Fix Request (17u): 
Should get backported for parity with 17.0.9-oracle. Applies cleanly. Trivial test change.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Underscore with brackets,JDK-8309093,5102084,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,abimpoudis,abimpoudis,abimpoudis,2023-05-30 02:17,2023-06-08 17:44,2023-10-01 09:55,2023-06-01 23:17,21,,,,,,21,tools,,0,conformance,tck-red-21,,,,,,,,,,,,"The following snippet compiles, while the grammar prohibits it:

   for (int _[] : new int[][]{new int[]{1}, new int[]{2}}) { }",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8302344,,,,,,,,,,,,,,,,,,,,,,b24,,,,,,,,,"0|i31pt7:",9223372036854775807,b26,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4dca67bd,,,,,,,,,"2023-05-30 07:43;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/14217
Date: 2023-05-30 13:13:30 +0000;;;","2023-06-01 23:17;dukebot;Changeset: 80075997
Author:    Aggelos Biboudis <abimpoudis@openjdk.org>
Committer: Jan Lahoda <jlahoda@openjdk.org>
Date:      2023-06-02 06:14:57 +0000
URL:       https://git.openjdk.org/jdk/commit/8007599756ad9052afaa64044bb4703e813dc080
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
security/infra/java/security/cert/CertPathValidator/certification/AmazonCA.java fails,JDK-8309088,5102079,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,rhalade,mbaesken,mbaesken,2023-05-30 01:15,2023-09-11 01:21,2023-10-01 09:55,2023-07-26 09:56,11,17,21,8,,,22,security-libs,2023-07-25 00:00,0,amazon-interest,hgupdate-sync,jdk11u-fix-request,jdk11u-fix-yes,jdk17u-fix-request,jdk17u-fix-yes,jdk21u-fix-request,jdk21u-fix-yes,jdk8u-fix-request,jdk8u-fix-yes,testbug,,,"For a couple of days, the test fails with :
Received exception: java.security.cert.CertPathValidatorException: Certificate has been revoked, reason: CESSATION_OF_OPERATION, revocation date: Wed May 24 21:53:15 CEST 2023, authority: CN=Amazon Root CA 1 Status Signer, O=Amazon, C=US, extension OIDs: []
Expected Certificate status: GOOD
Certificate status after validation: REVOKED

exception shown is

java.lang.RuntimeException: TEST FAILED: unexpected status of EE certificate
	at ValidatePathWithParams.validate(ValidatePathWithParams.java:193)
	at AmazonCA_1.runTest(AmazonCA.java:173)
	at AmazonCA.main(AmazonCA.java:64)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
	at java.base/java.lang.reflect.Method.invoke(Method.java:578)
	at com.sun.javatest.regtest.agent.MainWrapper$MainTask.run(MainWrapper.java:138)
	at java.base/java.lang.Thread.run(Thread.java:1583)",,,,,,,,,,,JDK-8314424,JDK-8313508,JDK-8314223,JDK-8313443,JDK-8313666,JDK-8313439,JDK-8313832,JDK-8315983,,,,,,,,,,,,,,,,,,JDK-8308592,JDK-8271838,JDK-8233223,,,,,,,,,,generic,,,,,,,,,generic,,,,,,"0|i31ps3:",9223372036854775807,b08,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@2ec284e3,,,,,,,,,"2023-05-31 07:58;simonis;Probably we need t update the certificates as it was done for JDK-8271838 with https://github.com/openjdk/jdk/pull/9111 ?

The current certificates in the test look outdated:
```
    // Owner: CN=good.sca1a.amazontrust.com
    // Issuer: CN=Amazon, OU=Server CA 1A, O=Amazon, C=US
    // Serial number: 75a5dd4b767bedc94a4239da65ed9dfef8218
    // Valid from: Fri Dec 17 12:21:50 PST 2021 until: Tue Jan 17 12:21:50 PST 2023
```
;;;","2023-06-02 14:57;rhalade;I have code review out for JDK-8308592 which removes the hardcoded certificates from tests. This should fix the issue mentioned here.;;;","2023-07-20 23:48;azeller;It seems there is no progress in JDK-8308592 - perhaps we should add the AmazonCA test to the exclude list until this issue is fixed. It fails now for 7 weeks.;;;","2023-07-21 09:22;rhalade;JDK-8308592 is put on hold. Instead, I will fix this Amazon root update today.;;;","2023-07-24 08:20;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/15000
Date: 2023-07-24 15:13:42 +0000;;;","2023-07-26 09:56;dukebot;Changeset: 4c2e54fb
Author:    Rajan Halade <rhalade@openjdk.org>
Date:      2023-07-26 16:55:29 +0000
URL:       https://git.openjdk.org/jdk/commit/4c2e54fb055bee0af5cd838fdd32a0f7902d51e3
;;;","2023-07-31 03:36;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk21u/pull/27
Date: 2023-07-31 10:29:28 +0000;;;","2023-07-31 03:37;mbaesken;jdk21u backport request
I would like to have the patch in jdk21u as well, because the issue addressed is present there too. Patch applies cleanly, low risk.;;;","2023-08-01 23:48;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk21/pull/159
Date: 2023-08-02 06:42:29 +0000;;;","2023-08-12 13:19;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/1657
Date: 2023-08-12 20:13:19 +0000;;;","2023-08-12 13:23;mdoerr;Fix Request (17u):
The test is currently failing in 17.0.9. Applies cleanly. Test passes with this test fix.;;;","2023-08-16 00:06;mbaesken;jdk11 backport request
I would like to have the patch in jdk11u-dev as well, to be closer to OracleJDK and to backport follow up fixes in the same file more easily. The backport is clean and low risk, works in our internal CI (together with JDK-8271838).;;;","2023-08-16 02:24;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk11u-dev/pull/2081
Date: 2023-08-16 09:13:15 +0000;;;","2023-09-05 02:59;sgehwolf;Fix Request (OpenJDK 8u):

Please approve this test fix for AmazonCA.java which currently fails. Patch applies cleanly after JDK-8271838. The test passes after this fix. Low risk, test only fix.;;;","2023-09-05 02:59;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk8u-dev/pull/365
Date: 2023-09-05 09:55:36 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Test javax/swing/JTabbedPane/6355537/bug6355537.java failed: Disabled tabs should not have prelight,JDK-8309070,5102062,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,psadhukhan,dholmes,dholmes,2023-05-29 16:12,2023-08-07 13:33,2023-10-01 09:55,2023-07-31 01:35,20,21,,,,,22,client-libs,,0,intermittent,macos,sn_145,sn_146,sn_147,sn_148,sn_149,tier5,,,,,,"Looks very similar to JDK-8294701

----------System.out:(8/572)----------
invoking: test
Test for LookAndFeel javax.swing.plaf.metal.MetalLookAndFeel
origin java.awt.Point[x=2,y=55] bounds java.awt.Rectangle[x=2,y=2,width=21,height=18] tabCenter java.awt.Point[x=12,y=64]
normalColor java.awt.Color[r=200,g=221,b=242] prelightColor java.awt.Color[r=191,g=212,b=232]
Test for LookAndFeel com.sun.java.swing.plaf.windows.WindowsLookAndFeel
[WW]  Failed to set LAF: com.sun.java.swing.plaf.windows.WindowsLookAndFeel
Test for LookAndFeel com.sun.java.swing.plaf.gtk.GTKLookAndFeel
[WW]  Failed to set LAF: com.sun.java.swing.plaf.gtk.GTKLookAndFeel
----------System.err:(14/795)----------
java.lang.RuntimeException: Disabled tabs should not have prelight
	at SwingTestHelper.fail(SwingTestHelper.java:704)
	at bug6355537.test(bug6355537.java:143)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
	at java.base/java.lang.reflect.Method.invoke(Method.java:578)
	at SwingTestHelper.invoke(SwingTestHelper.java:638)
	at SwingTestHelper.controlLoop(SwingTestHelper.java:588)
	at SwingTestHelper$4.run(SwingTestHelper.java:514)
	at java.base/java.lang.Thread.run(Thread.java:1583)

",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8294701,,,,,,,,,,,,,,,,,,,,,,,,,os_x,,,,,,"0|i31pob:",9223372036854775807,b09,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@568a5b31,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Compilation Error in javax/swing/event/FocusEventCauseTest.java,JDK-8309060,5102052,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,psadhukhan,psadhukhan,psadhukhan,2023-05-29 09:15,2023-06-04 20:14,2023-10-01 09:55,2023-05-29 11:26,21,,,,,,21,client-libs,,0,regression,regression_8306119,,,,,,,,,,,,Extraneous semicolon causing compilation error,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8306119,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i31pm3:",9223372036854775807,b25,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@568a5b31,,,,,,,,,"2023-05-29 09:22;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/14206
Date: 2023-05-29 16:16:57 +0000;;;","2023-05-29 11:26;dukebot;Changeset: a4bae3a9
Author:    Prasanta Sadhukhan <psadhukhan@openjdk.org>
Date:      2023-05-29 18:25:19 +0000
URL:       https://git.openjdk.org/jdk/commit/a4bae3a9e2b8162d6dab0428fb90a67860bba1b7
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Parsing of erroneous patterns succeeds,JDK-8309054,5102044,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,abimpoudis,abimpoudis,abimpoudis,2023-05-29 07:09,2023-06-04 20:16,2023-10-01 09:55,2023-05-31 02:40,21,,,,,,21,tools,,0,,,,,,,,,,,,,,"        boolean t1 = switch (obj) {
            case Long a[] -> true;
            default -> false;
        };
        boolean t2 = switch (obj) {
            case Double a[][][][] -> true;
                default -> false;
        };
        if (obj instanceof Float a[][]) {
        }
        if (obj instanceof Integer a = Integer.valueOf(0)) {
        }",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8302344,,,,,,,,,,,,,,,,,,,,,,b24,,,,,,,,,"0|i31pkb:",9223372036854775807,b25,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4dca67bd,,,,,,,,,"2023-05-29 08:59;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/14205
Date: 2023-05-29 15:53:48 +0000;;;","2023-05-31 02:40;dukebot;Changeset: 4f3a95af
Author:    Aggelos Biboudis <abimpoudis@openjdk.org>
Committer: Jan Lahoda <jlahoda@openjdk.org>
Date:      2023-05-31 09:37:58 +0000
URL:       https://git.openjdk.org/jdk/commit/4f3a95af2f87756c87fa63d197176cfbb066ecdb
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
MemoryLayout methods taking PathElement are ambigious,JDK-8309046,5102036,Bug,Closed,JDK,JDK,software,duke,,,P3,Fixed,,pminborg,pminborg,2023-05-29 02:05,2023-05-29 04:47,2023-10-01 09:55,2023-05-29 04:47,21,,,,,,,core-libs,,0,,,,,,,,,,,,,,"It is possible to, for example, create a group layout with elements with the same name. This would create ambiguity when looking up path elements via names.

This could be solved by mandating name uniqueness in group layouts or by checking that an element's name is distinct when looking up.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i31pij:",9223372036854775807,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@28ce6b78,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
MemorySegment::reinterpret cleanup action is not called for all overloads,JDK-8309042,5102031,Bug,Closed,JDK,JDK,software,duke,,,P2,Fixed,mcimadamore,mcimadamore,mcimadamore,2023-05-29 01:46,2023-07-18 07:41,2023-10-01 09:55,2023-05-30 03:26,21,,,,,,21,core-libs,,0,foreign-memaccess+abi,,,,,,,,,,,,,"There is an obvious bug in the for AbstractMemorySegment::reinterpret(long, Arena, Consumer):

@Override
@CallerSensitive
public final MemorySegment reinterpret(long newSize, Arena arena, Consumer<MemorySegment> cleanup) {
    Objects.requireNonNull(arena);
    return reinterpretInternal(Reflection.getCallerClass(), newSize,
            MemorySessionImpl.toMemorySession(arena), null); // <------------ note the null here
}

The cleanup is not passed to the ""internal"" function. As a result, no cleanup function will be called when the segment is closed.",,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8309051,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i31phf:",9223372036854775807,b25,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@28ce6b78,,,,,,,Verified,,"2023-05-29 03:44;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/14199
Date: 2023-05-29 10:39:19 +0000;;;","2023-05-30 03:26;dukebot;Changeset: 2b186e24
Author:    Maurizio Cimadamore <mcimadamore@openjdk.org>
Date:      2023-05-30 10:24:10 +0000
URL:       https://git.openjdk.org/jdk/commit/2b186e246e8c51d4fd8b659872c95044f15e6951
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
"[lworld] Assert during C2 compilation ""possible deadlock""",JDK-8309036,5102026,Bug,Resolved,JDK,JDK,software,duke,,,P2,Fixed,thartmann,dsimms,dsimms,2023-05-29 00:05,2023-05-30 08:10,2023-10-01 09:55,2023-05-30 08:10,repo-valhalla,,,,,,repo-valhalla,hotspot,,0,c2,lw4,lworld,,,,,,,,,,,"Merge of jdk-21+17 introduced crash...

#  Internal Error (/opt/mach5/mesos/work_dir/slaves/741e9afd-8c02-45c3-b2e2-9db1450d0832-S172158/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/1e55742e-5b78-4c56-81d7-974d0319e733/runs/8d8aef3a-1b34-4e63-bdf1-bd99610a4a86/workspace/open/src/hotspot/share/runtime/mutex.cpp:447), pid=1347813, tid=1347828
#  assert(false) failed: Attempting to acquire lock SystemDictionary_lock/safepoint-3 out of order with lock tty_lock/tty -- possible deadlock

Stack: [0x00007fc75f638000,0x00007fc75f739000],  sp=0x00007fc75f7353c0,  free space=1012k
Native frames: (J=compiled Java code, j=interpreted, Vv=VM code, C=native code)
V  [libjvm.so+0x142f24c]  Mutex::check_rank(Thread*)+0x36c  (mutex.cpp:447)
V  [libjvm.so+0x142f5f2]  Mutex::lock(Thread*)+0x42  (mutex.cpp:120)
V  [libjvm.so+0x178cb76]  SystemDictionary::find_constrained_instance_or_array_klass(Thread*, Symbol*, Handle)+0x66  (mutexLocker.hpp:214)
V  [libjvm.so+0x8c3645]  ciEnv::get_klass_by_name_impl(ciKlass*, constantPoolHandle const&, ciSymbol*, bool)+0x2e5  (ciEnv.cpp:521)
V  [libjvm.so+0x8c34c8]  ciEnv::get_klass_by_name_impl(ciKlass*, constantPoolHandle const&, ciSymbol*, bool)+0x168  (ciEnv.cpp:501)
V  [libjvm.so+0x8cf5bd]  ciField::compute_type_impl()+0x6d  (ciField.cpp:381)
V  [libjvm.so+0x8cf887]  ciField::compute_type()+0xf7  (ciField.cpp:375)
V  [libjvm.so+0x1815721]  TypeOopPtr::TypeOopPtr(Type::TYPES, TypePtr::PTR, ciKlass*, TypePtr::InterfaceSet const&, bool, ciObject*, Type::Offset, Type::Offset, int, TypePtr const*, int)+0x6f1  (ciField.hpp:106)
V  [libjvm.so+0x1815adc]  TypeInstPtr::TypeInstPtr(TypePtr::PTR, ciKlass*, TypePtr::InterfaceSet const&, bool, ciObject*, Type::Offset, bool, int, TypePtr const*, int)+0x4c  (type.cpp:4165)
V  [libjvm.so+0x1815ff9]  TypeInstPtr::make(TypePtr::PTR, ciKlass*, TypePtr::InterfaceSet const&, bool, ciObject*, Type::Offset, bool, int, TypePtr const*, int)+0x119  (type.cpp:4208)
V  [libjvm.so+0x18167db]  TypeInstPtr::add_offset(long) const+0x11b  (type.cpp:4743)
V  [libjvm.so+0x1465836]  PrintBFS::maybe_traverse(Node const*, Node const*)+0x26  (node.cpp:1830)
V  [libjvm.so+0x1465ebf]  PrintBFS::collect()+0x18f  (node.cpp:1951)
V  [libjvm.so+0x1466298]  Node::dump_bfs(int, Node*, char const*) const+0x288  (node.cpp:1921)
V  [libjvm.so+0x9e2fe9]  Compile::print_ideal_ir(char const*)+0xc9  (compile.cpp:580)
V  [libjvm.so+0xa03747]  Compile::Compile(ciEnv*, ciMethod*, int, Options, DirectiveSet*)+0x1ec7  (compile.cpp:859)
V  [libjvm.so+0x84028b]  C2Compiler::compile_method(ciEnv*, ciMethod*, int, bool, DirectiveSet*)+0x3eb  (c2compiler.cpp:118)
V  [libjvm.so+0xa0f490]  CompileBroker::invoke_compiler_on_method(CompileTask*)+0xaf0  (compileBroker.cpp:2265)
V  [libjvm.so+0xa10358]  CompileBroker::compiler_thread_loop()+0x608  (compileBroker.cpp:1944)
V  [libjvm.so+0xed35be]  JavaThread::thread_main_inner()+0x17e  (javaThread.cpp:718)
V  [libjvm.so+0x17f0358]  Thread::call_run()+0xb8  (thread.cpp:215)
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8206144,,,,,"2023-05-30 04:13;thartmann;Test.java;https://bugs.openjdk.org/secure/attachment/104111/Test.java",,,,,,,,,,,,,,,,,,,,,,"0|i31pgb:",9223372036854775807,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2023-05-30 04:14;thartmann;This is really easy to reproduce and does not seem to be related to value classes at all. With attached Test.java:
java -XX:+PrintIdeal -XX:-TieredCompilation -Xbatch -XX:CompileCommand=quiet -XX:CompileCommand=compileonly,Test::test Test;;;","2023-05-30 04:53;thartmann;The fix for JDK-8304743 removed the ttyUnlocker:
https://github.com/openjdk/jdk/commit/b062b1bd8126610d9288dc179d69e54a40b81015

This seems to be fine in mainline but triggers the issue in Valhalla. Temporarily adding it back, makes the issue disappear:

diff --git a/src/hotspot/share/ci/ciEnv.cpp b/src/hotspot/share/ci/ciEnv.cpp
index 06d76fb19e3..7b5e147b4a7 100644
--- a/src/hotspot/share/ci/ciEnv.cpp
+++ b/src/hotspot/share/ci/ciEnv.cpp
@@ -516,6 +516,7 @@ ciKlass* ciEnv::get_klass_by_name_impl(ciKlass* accessing_klass,
     domain = Handle(current, accessing_klass->protection_domain());
   }
 
+  ttyUnlocker ttyul;
   Klass* found_klass = require_local ?
;;;","2023-05-30 06:56;thartmann;Old regression from JDK-8206144 now triggers an assert after JDK-8304743.;;;","2023-05-30 08:08;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/valhalla/pull/854
Date: 2023-05-30 14:59:51 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
jpackage does not work for module projects unless --module-path is specified,JDK-8309032,5101450,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,asemenyuk,webbuggrp,webbuggrp,2023-05-22 03:52,2023-09-12 06:22,2023-10-01 09:55,2023-07-19 19:16,17.0.6,20,,,,,22,tools,,0,dcsad,jdk17u-fix-request,jdk17u-fix-yes,jdk20u-fix-request,jdk21u-fix-request,jdk21u-fix-SQE-ok,jdk21u-fix-yes,reproducer-yes,webbug,,,,,"ADDITIONAL SYSTEM INFORMATION :
Windows 10 and Linux OpenJDK20

A DESCRIPTION OF THE PROBLEM :
jpackage with multiple module launchers crashes unless the command line contains a trivial / unnecessary module path. 
Note that this bug is similar to the report mentioned in JDK-8306488 but isn't quite the same issue. The test case for JDK-8306488 has omitted --module-path when it should have added one (so is perhaps an issue with the test case), whereas in this example --module-path isn't needed at all but must be specified even though not needed.

STEPS TO FOLLOW TO REPRODUCE THE PROBLEM :
I have a large project with multiple modules, I built a JRE with jlink that contains every module used and pass that JRE to jpackage command so that no additional modules are required by jpackage. Fortunately I can reproduce simply by calling jpackage with a classname of module ""java.base"" and with the standard OpenJDK20 runtime.  On WIndows / Linux start in empty directory:

   mkdir THIS_ISNT_NEEDED_BUT_JPACKAGE_FAILS_WITHOUT_IT
   
Create a launcher specifying module from a package found in the runtime image (java.base in this case)

   echo module=java.base/classdoesnotmatter > launcher.properties

On Windows I use OpenJDK as the runtime parameter - C:\java\jdk-20

jpackage --name ""TEST"" --runtime-image C:\java\jdk-20 --type app-image --module java.base/classnotimportant --dest jpackage0.out 

jpackage --name ""TEST"" --runtime-image C:\java\jdk-20 --type app-image --module java.base/classnotimportant --add-launcher another=launcher.properties --dest jpackage1.out 

jpackage --name ""TEST"" --runtime-image C:\java\jdk-20 --type app-image --module java.base/classnotimportant --add-launcher another=launcher.properties --dest jpackage2.out --module-path THIS_ISNT_NEEDED_BUT_JPACKAGE_FAILS_WITHOUT_IT

On Linux I use OpenJDK as the runtime parameter - /mnt/c/linux/jdk-20

jpackage --name ""TEST"" --runtime-image /mnt/c/linux/jdk-20 --type app-image --module java.base/classnotimportant --dest jpackage3.out 

jpackage --name ""TEST"" --runtime-image /mnt/c/linux/jdk-20 --type app-image --module java.base/classnotimportant --add-launcher another=launcher.properties --dest jpackage4.out 

jpackage --name ""TEST"" --runtime-image /mnt/c/linux/jdk-20 --type app-image --module java.base/classnotimportant --add-launcher another=launcher.properties --dest jpackage5.out --module-path THIS_ISNT_NEEDED_BUT_JPACKAGE_FAILS_WITHOUT_IT


EXPECTED VERSUS ACTUAL BEHAVIOR :
EXPECTED -
All 6 jpackage commands should generate app-image structure as the JRE runtime supplied contains the required module ""java.base"" that was specified by each launch configuration. [Obviously these apps won't run as the classnames are made up]

ACTUAL -
Two of the commands fail - runs for jpackage1.out and jpackage4.out both crash with exception:
java.lang.ClassCastException: class java.util.ImmutableCollections$List12 cannot be cast to class java.lang.String (java.util.ImmutableCollections$List12 and java.lang.String are in module java.base of loader 'bootstrap')


CUSTOMER SUBMITTED WORKAROUND :
The workaround is to supply `--module-path` for an empty directory. That gets copied into the release and every launcher contains these unnecessary lines: 
  java-options=--module-path
  java-options=$APPDIR\mods


FREQUENCY : always


",,,,,,,,,,,JDK-8315727,JDK-8316079,JDK-8315654,JDK-8316120,,,,,,,,,,,,JDK-8306488,,,,,,,,,,,,,,,,,,,,,,generic,,,,,,,,,generic,,,,,,"0|i31lwb:",9223372036854775807,b08,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@3656b41f,,,,,,,,,"2023-05-28 22:14;adev;The issue is reproducible.  Tested on Windows with standard JDK:
$ C:\jdk\jdk-20_windows-x64_bin\jdk-20\bin\jpackage --name ""TEST"" --runtime-image C:\jdk\jdk-20_windows-x64_bin\jdk-20  --type app-image --module java.base/classnotimportant --add-launcher another=launcher.properties --dest jpackage1.out

java.lang.ClassCastException: class java.util.ImmutableCollections$List12 cannot be cast to class java.lang.String (java.util.ImmutableCollections$List12 and java.lang.String are in module java.base of loader 'bootstrap');;;","2023-07-17 13:00;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/14840
Date: 2023-07-11 23:47:30 +0000;;;","2023-07-19 19:16;dukebot;Changeset: dfe764e3
Author:    airsquared <36649395+airsquared@users.noreply.github.com>
Committer: Alexey Semenyuk <asemenyuk@openjdk.org>
Date:      2023-07-20 02:14:19 +0000
URL:       https://git.openjdk.org/jdk/commit/dfe764e3f85784752d69fd51306644732e808d38
;;;","2023-07-19 19:40;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk21/pull/140
Date: 2023-07-20 02:34:05 +0000;;;","2023-07-20 03:34;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk20u/pull/86
Date: 2023-07-20 02:52:13 +0000;;;","2023-08-31 20:05;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk21u/pull/120
Date: 2023-09-01 03:00:15 +0000;;;","2023-08-31 20:06;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/1717
Date: 2023-09-01 02:51:03 +0000;;;","2023-09-01 08:30;phh;Fix Request (17u, 20u, 21u).

On behalf of airsquared.

jpackage failure, clean backport, low risk.
;;;","2023-09-11 23:06;roboduke;[jdk17u-fix-request] Approval Request from airsquared
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
New test TestHFA fails with zero,JDK-8308992,5101980,Bug,Closed,JDK,JDK,software,duke,,,P4,Fixed,jvernee,dholmes,dholmes,2023-05-28 15:51,2023-08-08 09:30,2023-10-01 09:55,2023-05-30 08:30,21,,,,,,21,core-libs,,0,tier5,,,,,,,,,,,,,"----------System.out:(56/3121)----------
S_FF(2.0;1.0)
test TestHFA.testAddDoubleToStructAfterStructs(): success
S_FF(2.0;1.0)
test TestHFA.testAddDoubleToStructAfterStructsUpcall(): success
S_FFFFFFF(2.0;4.0;6.0;8.0;10.0;12.0;14.0)
test TestHFA.testAddFloatStructs(): success
S_FFFFFFF(2.0;4.0;6.0;8.0;10.0;12.0;14.0)
test TestHFA.testAddFloatStructsUpcall(): success
test TestHFA.testAddFloatToLargeStructAfterStructs(): failure
java.lang.RuntimeException: add_float_to_large_struct_after_structs error
	at TestHFA.testAddFloatToLargeStructAfterStructs(TestHFA.java:231)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
	at java.base/java.lang.reflect.Method.invoke(Method.java:578)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:132)
	at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:599)
	at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:174)
	at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
	at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:822)
	at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:147)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1593)
	at org.testng.TestRunner.privateRun(TestRunner.java:764)
	at org.testng.TestRunner.run(TestRunner.java:585)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:384)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:378)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:337)
	at org.testng.SuiteRunner.run(SuiteRunner.java:286)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1218)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1140)
	at org.testng.TestNG.runSuites(TestNG.java:1069)
	at org.testng.TestNG.run(TestNG.java:1037)
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:102)
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:58)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
	at java.base/java.lang.reflect.Method.invoke(Method.java:578)
	at com.sun.javatest.regtest.agent.MainWrapper$MainTask.run(MainWrapper.java:138)
	at java.base/java.lang.Thread.run(Thread.java:1583)
S_FFFFFFF(2.0;2.0;3.0;4.0;5.0;6.0;7.0)
test TestHFA.testAddFloatToLargeStructAfterStructsUpcall(): success
S_FF(2.0;1.0)
test TestHFA.testAddFloatToStructAfterFloats(): success
S_FF(2.0;1.0)
test TestHFA.testAddFloatToStructAfterFloatsUpcall(): success
S_FF(2.0;1.0)
test TestHFA.testAddFloatToStructAfterStructs(): success
S_FF(2.0;1.0)
test TestHFA.testAddFloatToStructAfterStructsUpcall(): success

===============================================
java/foreign/TestHFA.java
Total tests run: 10, Passes: 9, Failures: 1, Skips: 0
===============================================

----------System.err:(57/4250)----------
java.lang.IndexOutOfBoundsException: Out of bound access on segment MemorySegment{ heapBase: Optional.empty address:139671398751904 limit: 8 }; new offset = 0; new length = 28
	at java.base/jdk.internal.foreign.AbstractMemorySegmentImpl.outOfBoundException(AbstractMemorySegmentImpl.java:424)
	at java.base/jdk.internal.foreign.AbstractMemorySegmentImpl.apply(AbstractMemorySegmentImpl.java:405)
	at java.base/jdk.internal.foreign.AbstractMemorySegmentImpl.apply(AbstractMemorySegmentImpl.java:69)
	at java.base/jdk.internal.util.Preconditions.outOfBounds(Preconditions.java:98)
	at java.base/jdk.internal.util.Preconditions.outOfBoundsCheckIndex(Preconditions.java:124)
	at java.base/jdk.internal.util.Preconditions.checkIndex(Preconditions.java:448)
	at java.base/jdk.internal.foreign.AbstractMemorySegmentImpl.checkBounds(AbstractMemorySegmentImpl.java:394)
	at java.base/jdk.internal.foreign.AbstractMemorySegmentImpl.checkAccess(AbstractMemorySegmentImpl.java:354)
	at java.base/jdk.internal.foreign.AbstractMemorySegmentImpl.copy(AbstractMemorySegmentImpl.java:611)
	at java.base/java.lang.foreign.MemorySegment.copy(MemorySegment.java:1332)
	at java.base/java.lang.foreign.MemorySegment.copy(MemorySegment.java:1279)
	at java.base/java.lang.foreign.MemorySegment.copyFrom(MemorySegment.java:804)
	at java.base/jdk.internal.foreign.abi.fallback.FallbackLinker.writeValue(FallbackLinker.java:247)
	at java.base/jdk.internal.foreign.abi.fallback.FallbackLinker.doDowncall(FallbackLinker.java:167)
	at TestHFA.testAddFloatToLargeStructAfterStructs(TestHFA.java:216)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
	at java.base/java.lang.reflect.Method.invoke(Method.java:578)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:132)
	at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:599)
	at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:174)
	at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
	at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:822)
	at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:147)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1593)
	at org.testng.TestRunner.privateRun(TestRunner.java:764)
	at org.testng.TestRunner.run(TestRunner.java:585)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:384)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:378)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:337)
	at org.testng.SuiteRunner.run(SuiteRunner.java:286)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1218)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1140)
	at org.testng.TestNG.runSuites(TestNG.java:1069)
	at org.testng.TestNG.run(TestNG.java:1037)
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:102)
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:58)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
	at java.base/java.lang.reflect.Method.invoke(Method.java:578)
	at com.sun.javatest.regtest.agent.MainWrapper$MainTask.run(MainWrapper.java:138)
	at java.base/java.lang.Thread.run(Thread.java:1583)
java.lang.Exception: failures: 1
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:104)
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:58)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
	at java.base/java.lang.reflect.Method.invoke(Method.java:578)
	at com.sun.javatest.regtest.agent.MainWrapper$MainTask.run(MainWrapper.java:138)
	at java.base/java.lang.Thread.run(Thread.java:1583)
",zero interpreter,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8303040,,,,,,,,,,,,,,,,,,,,,,,21,,,,,,,,"0|i31p63:",9223372036854775807,b25,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@28ce6b78,,,,,,,Verified,,"2023-05-30 05:52;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/14215
Date: 2023-05-30 12:17:00 +0000;;;","2023-05-30 08:29;dukebot;Changeset: 804f198c
Author:    Jorn Vernee <jvernee@openjdk.org>
Date:      2023-05-30 15:28:40 +0000
URL:       https://git.openjdk.org/jdk/commit/804f198c73794ffce34a8a10c255656c25cf6d79
;;;","2023-05-30 14:00;dcubed;The fix for this bug is integrated in jdk-21+25-2172.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
regression with a deadlock involving FollowReferences,JDK-8308978,5101956,Bug,Closed,JDK,JDK,software,duke,,,P2,Fixed,amenkov,sspitsyn,sspitsyn,2023-05-26 16:44,2023-07-02 07:27,2023-10-01 09:55,2023-06-02 15:03,21,,,,,,21,hotspot,,0,loom,regression,,,,,,,,,,,,"Integration of the following enhancement triggered/introduced new failure mode with a deadlock:
JDK-8299414: JVMTI FollowReferences should support references from VirtualThread stack

This thread is (stuck?) in transition:

debugee.stdout> [516.812s][error][jvmti] ForkJoinPool-1-worker-4(ForkJoinPool-1-worker-4) exiting: 0 is_susp: 0 is_thread_susp: 0 is_vthread_susp: 0 is_VTMS_transition_disabler: 0, is_in_VTMS_transition = 1
debugee.stdout> 
debugee.stdout> [516.812s][error][jvmti]   java.lang.Thread java.lang.Thread.currentCarrierThread():-1
debugee.stdout> [516.812s][error][jvmti]   void java.lang.VirtualThread.mount():353
debugee.stdout> [516.812s][error][jvmti]   boolean java.lang.VirtualThread.yieldContinuation():444
debugee.stdout> [516.812s][error][jvmti]   void java.lang.VirtualThread.park():592
debugee.stdout> [516.812s][error][jvmti]   void java.lang.System$2.parkVirtualThread():2649
debugee.stdout> [516.812s][error][jvmti]   void jdk.internal.misc.VirtualThreads.park():54
debugee.stdout> [516.812s][error][jvmti]   void java.util.concurrent.locks.LockSupport.park():369
debugee.stdout> [516.812s][error][jvmti]   void sun.nio.ch.Poller.poll2(int, long, java.util.function.BooleanSupplier):139
debugee.stdout> [516.812s][error][jvmti]   void sun.nio.ch.Poller.poll(int, long, java.util.function.BooleanSupplier):102
debugee.stdout> [516.812s][error][jvmti]   void sun.nio.ch.Poller.poll(int, int, long, java.util.function.BooleanSupplier):87
debugee.stdout> [516.812s][error][jvmti]   void sun.nio.ch.NioSocketImpl.park(java.io.FileDescriptor, int, long):175
debugee.stdout> [516.812s][error][jvmti]   void sun.nio.ch.NioSocketImpl.park(java.io.FileDescriptor, int):201
debugee.stdout> [516.812s][error][jvmti]   int sun.nio.ch.NioSocketImpl.implRead(byte[], int, int):309
debugee.stdout> [516.812s][error][jvmti]   int sun.nio.ch.NioSocketImpl.read(byte[], int, int):346
debugee.stdout> [516.812s][error][jvmti]   int sun.nio.ch.NioSocketImpl$1.read(byte[], int, int):796
debugee.stdout> [516.812s][error][jvmti]   int java.net.Socket$SocketInputStream.read(byte[], int, int):1099
debugee.stdout> [516.812s][error][jvmti]   int java.net.Socket$SocketInputStream.read():1093
debugee.stdout> [516.812s][error][jvmti]   int java.io.ObjectInputStream$PeekInputStream.peek():2893
debugee.stdout> [516.812s][error][jvmti]   int java.io.ObjectInputStream$BlockDataInputStream.peek():3220
debugee.stdout> [516.812s][error][jvmti]   byte java.io.ObjectInputStream$BlockDataInputStream.peekByte():3230
debugee.stdout> [516.812s][error][jvmti]   java.lang.Object java.io.ObjectInputStream.readObject0(java.lang.Class, boolean):1713
debugee.stdout> [516.812s][error][jvmti]   java.lang.Object java.io.ObjectInputStream.readObject(java.lang.Class):540
debugee.stdout> [516.812s][error][jvmti]   java.lang.Object java.io.ObjectInputStream.readObject():498
debugee.stdout> [516.812s][error][jvmti]   java.lang.Object nsk.share.jpda.SocketConnection.doReadObject():581
debugee.stdout> [516.812s][error][jvmti]   java.lang.Object nsk.share.jpda.SocketConnection.readObject():518
debugee.stdout> [516.812s][error][jvmti]   java.lang.String nsk.share.jpda.SocketIOPipe.readln():193
debugee.stdout> [516.812s][error][jvmti]   void nsk.share.jpda.AbstractDebuggeeTest.doTest():309


This thread is waiting for the thread in transition to disable VTMS transitions:

Current thread (0x0000ffff8c339cc0):  JavaThread ""JDWP Transport Listener: dt_socket"" daemon [_thread_in_vm, id=3016377, stack(0x0000ffff65600000,0x0000ffff65800000) (2048K)]

Stack: [0x0000ffff65600000,0x0000ffff65800000],  sp=0x0000ffff657fe130,  free space=2040k
Native frames: (J=compiled Java code, j=interpreted, Vv=VM code, C=native code)
V  [libjvm.so+0x10a20b0]  JvmtiVTMSTransitionDisabler::VTMS_transition_disable_for_all()+0x210  (jvmtiThreadState.cpp:358)
V  [libjvm.so+0x10929bc]  JvmtiTagMap::follow_references(int, Klass*, _jobject*, jvmtiHeapCallbacks const*, void const*)+0x16c  (jvmtiTagMap.cpp:3030)
V  [libjvm.so+0x103ae00]  JvmtiEnv::FollowReferences(int, _jclass*, _jobject*, jvmtiHeapCallbacks const*, void const*)+0x1f0  (jvmtiEnv.cpp:2105)
V  [libjvm.so+0xfe5d78]  jvmti_FollowReferences+0x118  (jvmtiEnter.cpp:1715)
C  [libjdwp.so+0x31464]  classInstances+0xb0  (util.c:2548)
C  [libjdwp.so+0x8648]  instances+0x98  (ReferenceTypeImpl.c:272)
C  [libjdwp.so+0x13c64]  debugLoop_run+0x2b4  (debugLoop.c:162)
C  [libjdwp.so+0x290e4]  attachThread+0x54  (transport.c:392)
V  [libjvm.so+0x1071d84]  JvmtiAgentThread::call_start_function()+0xc4  (jvmtiImpl.cpp:89)
V  [libjvm.so+0xda870c]  JavaThread::thread_main_inner()+0xec  (javaThread.cpp:719)
V  [libjvm.so+0x15f7054]  Thread::call_run()+0xb0  (thread.cpp:217)
V  [libjvm.so+0x1353b80]  thread_native_entry(Thread*)+0x130  (os_linux.cpp:775)
C  [libpthread.so.0+0x7908]  start_thread+0x188",,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8308985,,,,JDK-8308985,,,,JDK-8311218,JDK-8299414,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i31p0r:",9223372036854775807,b26,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@661b156a,,,,,,,Verified,,"2023-05-30 13:01;dcubed;Bumping from P3 -> P2 since this is a regression and there
is not a specific ILW analysis justifying a P3.;;;","2023-05-30 16:04;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/14233
Date: 2023-05-30 22:58:58 +0000;;;","2023-06-02 15:03;dukebot;Changeset: 62c935d4
Author:    Alex Menkov <amenkov@openjdk.org>
Date:      2023-06-02 22:02:04 +0000
URL:       https://git.openjdk.org/jdk/commit/62c935d4fa09ed557d301bc28d9bf1480b344989
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
gtest:codestrings fails on riscv,JDK-8308977,5101955,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,tonyp,tonyp,tonyp,2023-05-26 15:15,2023-06-04 20:14,2023-10-01 09:55,2023-05-30 06:09,,,,,,,21,hotspot,,0,,,,,,,,,,,,,,"gtest:codestrings fails on RISC V with the following error:

With diff:
@@ +135,6 @@
   <addr>:   addi\ta1,sp,4
   <addr>:   addi\ts0,sp,4
+  <addr>:   unimp
+  <addr>:   unimp
   <addr>:   unimp
 --------------------------------------------------------------------------------\n

1. Output should be identical.

(I trimmed it a bit)",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,riscv,,,,,,,,,,,,,,,"0|i31p0j:",9223372036854775807,b25,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@78d03d9a,,,,,,,,,"2023-05-26 15:17;tonyp;There seems to be some logic in the test to remove trailing entries like this:

    // Padding: aarch64
    std::basic_string<char> tmp2 = std::regex_replace(tmp1, std::regex(""\\s+<addr>:\\s+\\.inst\\t<addr> ; undefined""), """");
    std::basic_string<char> tmp3 = std::regex_replace(tmp2, std::regex(""\\s+<addr>:\\s+udf\\t#0""), """");
    // Padding: x64
    std::basic_string<char> red  = std::regex_replace(tmp4, std::regex(""\\s+<addr>:\\s+hlt[ \\t]+(?!\\n\\s+;;)""), """");

which doesn't work on RISC V. We should match on ""<addr>: unimp"".;;;","2023-05-26 15:37;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/14189
Date: 2023-05-26 22:30:11 +0000;;;","2023-05-30 06:09;dukebot;Changeset: 45262822
Author:    Antonios Printezis <tonyp@openjdk.org>
Date:      2023-05-30 13:08:15 +0000
URL:       https://git.openjdk.org/jdk/commit/4526282266c5dc6c040c090ef4f3ce791a8c190d
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
make test-prebuilt doesn't return the correct exit code,JDK-8308969,5101941,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,tonyp,tonyp,tonyp,2023-05-26 08:59,2023-06-12 20:46,2023-10-01 09:55,2023-06-05 08:36,,,,,,,21,infrastructure,,0,,,,,,,,,,,,,,"make test-prebuilt always returns exit code 0, even if tests have failed. The exit-with-error file is written if failures occur. However, its existence is not checked before exit.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i31oxf:",9223372036854775807,b26,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@429c566,,,,,,,,,"2023-05-26 09:11;tonyp;For 'make' test and 'make test-only' the existence of exit-with-error is checked in the main target in Init.gmk. But this target is not called by 'make test-prebuilt'. Is there a better way to fix this just to check for the existence of exit-with-error in RunTestsPrebuilt.gmk?;;;","2023-05-26 09:13;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/14183
Date: 2023-05-26 16:07:36 +0000;;;","2023-06-01 07:32;erikj;This is by design. We chose to make a difference between ""we failed to run the tests"" and ""we successfully ran the tests but there were test failures"". If you want to change this behavior, it has to be made opt in through configuration. ;;;","2023-06-01 07:46;tonyp;Hi Erik, thanks for the response. Not sure I fully understand it, though. Currently, ""make test-prebuilt"" behaves differently to ""make test"" and ""make test-only"" wrt exit codes (when tests fail, the former returns 0, the other two return non-0). Is that really the intention?;;;","2023-06-01 08:18;erikj;I confess I didn't pick up on the inconsistency between different make targets when I first looked at this bug. It would have helped if that was made clear in the description. I realize that this inconsistency could be confusing. The ""run-test-prebuilt"" target was implemented to support distributed testing and our distributed test system relies on run-test-prebuilt returning 0 when tests are run successfully, regardless of test results. This helps us differentiate between ""infrastructure"" failures and actual test failures. I don't know if anyone else is using run-test-prebuilt, but if anyone is, I would expect them to not want the behavior to change, just like we (Oracle) don't.

Adding an environment variable that changes the behavior would be possible, but I'm not sure if I would be comfortable with changing the default behavior even with such a variable available. We would at least require some time to adapt if that was to be done.;;;","2023-06-02 08:01;tonyp;Hi again, thanks for the extra background on this. I had trouble getting ""make test"" or ""make test-only"" to work in our ci system (on jobs separate from the build job) and I had more luck with ""make test-prebuilt"". Hence my interest in this. And the obvious reason that I'd like it to return non-0, if any of the tests fail, is for the failure to be detected by the ci system and tag the job as failed.

Would a reasonable compromise be to add a new target (test-prebuilt-flag-failures, or something like that) that will do what I suggest? I think it could be generally useful?

Out of curiosity: How do you detect test failures with ""make test-prebuilt""? Do you check the output? Or look for the presence of exit-with-error?;;;","2023-06-02 08:27;erikj;We have a results parser that imports all jtreg test results (jtr files etc) into a backing DB store so that we can browse them in a structured way (across time, builds, platforms, test cases etc). At task execution time, the parser tells the executor if any tests failed.

A second target or a make/env variable would be reasonable. The test-prebuilt target was meant to solve the case where test runs are separated from build runs (which is pretty much a must when you scale up testing), so that is the intended target for your usecase.;;;","2023-06-02 11:36;tonyp;I updated the PR. I added a test-prebuilt-with-exit-code target (and we can rename that to whatever you want!). Let me know what you think.

> The test-prebuilt target was meant to solve the case where test runs are separated from build runs 

This is our use-case as well.;;;","2023-06-05 08:36;dukebot;Changeset: 80232b7e
Author:    Antonios Printezis <tonyp@openjdk.org>
Date:      2023-06-05 15:35:42 +0000
URL:       https://git.openjdk.org/jdk/commit/80232b7e753129ca7a4f1ca9b70844e0c7d8eabf
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Decouple internal Version and OperatingSystem classes,JDK-8308960,5101932,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,rriggs,rriggs,rriggs,2023-05-26 06:52,2023-06-04 20:15,2023-10-01 09:55,2023-05-30 10:10,,,,,,,21,core-libs,,0,,,,,,,,,,,,,,"The implementation of the ClassFileDumper exposed a cycle in the startup that results in ExceptionInInitializer caused by the initialization of the internal OperatingSystem enum.

The early initialization of the OperationSystem enum produces a cascade of MethodHandle initialization that should be deferred.

The file system initialization on the Mac needs to check the OS version number. Currently, by calling OperationSystem.version().

Decoupling the jdk.internal.util.Version class from OperatingSystem allows it to avoid the initialization cycle.

Fixing this allows the ClassFileDumper to use the preferred java.nio.file.Path API.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8307944,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i31ovf:",9223372036854775807,b25,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4c088d55,,,,,,,,,"2023-05-26 08:04;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/14181
Date: 2023-05-26 14:57:21 +0000;;;","2023-05-30 10:10;dukebot;Changeset: 323d6ced
Author:    Roger Riggs <rriggs@openjdk.org>
Date:      2023-05-30 17:07:02 +0000
URL:       https://git.openjdk.org/jdk/commit/323d6ceda65910abff15e3358435533977519234
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
[Lilliput/JDK17] Fix some object initialization paths,JDK-8308956,5101928,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,rkennke,rkennke,rkennke,2023-05-26 05:33,2023-05-27 03:11,2023-10-01 09:55,2023-05-27 03:11,repo-lilliput-17,,,,,,repo-lilliput-17,hotspot,,0,lilliput,,,,,,,,,,,,,"In some object initialization paths I got the conditions wrong, especial wrt to biased-locking.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,generic,,,,,,,,,generic,,,,,,"0|i31ouj:",9223372036854775807,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,,,"2023-05-27 03:05;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/lilliput-jdk17u/pull/28
Date: 2023-05-26 12:35:33 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
[JVMCI] code installation increments decompile_count for call_site_target_value failures,JDK-8308954,5101927,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,dnsimon,davleopo,davleopo,2023-05-26 05:30,2023-06-08 17:44,2023-10-01 09:55,2023-06-01 12:26,17,21,,,,,21,hotspot,,0,jvmci,oracle-triage-21,,,,,,,,,,,,"Dependency failures during code installation generally increment the decompile_count. This is true for all dependency failures except Dependencies::call_site_target_value.
ciEnv::validate_compile_task_dependencies explicitly excludes Dependencies::call_site_target_value failures from incrementing the decompile_count by setting a flag _inc_decompile_count_on_failure to false.

JVMCIRuntime::register_method however increments the decompile_count for all dependency failures also ones of Dependencies::call_site_target_value. This means when running with jvmci methods can fall of the PerMethodRecompilationCutoff and be made non compilable. This can be a problem for example for CallSites that frequently change their target and thus fail dependencies. The compiler/jsr292/ContinuousCallSiteTargetChange test shows this problem when run on libgraal.

JDK-8191098 would mostly cover this bug automatically by sharing the same logic for incrementing the decompile_count.
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8191098,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i31oub:",9223372036854775807,b26,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2023-05-29 22:45;thartmann;ILW = Compilation bailout (method made not compilable), with JVMCI and code that has frequently changing call sites, increase PerMethodRecompilationCutoff = MLM = P4;;;","2023-06-01 05:02;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/14222
Date: 2023-05-30 14:23:23 +0000;;;","2023-06-01 12:26;dukebot;Changeset: 2bb19724
Author:    Doug Simon <dnsimon@openjdk.org>
Date:      2023-06-01 19:24:07 +0000
URL:       https://git.openjdk.org/jdk/commit/2bb1972483abadaf7957fff1654a1c141fc48109
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
jdk.internal.le build fails on AIX,JDK-8308943,5101915,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,jlahoda,jlahoda,jlahoda,2023-05-26 02:58,2023-06-08 17:44,2023-10-01 09:55,2023-06-01 04:15,21,,,,,,21,tools,,0,,,,,,,,,,,,,,"Because the code under jdk.internal.le/unix expects there's a platform specific `jdk/internal/org/jline/terminal/impl/jna/JDKNativePty.java`, but there's none for AIX.",,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8308624,,,,,,JDK-8306983,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i31orn:",9223372036854775807,b26,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@ef6d34f,,,,,,,,,"2023-05-26 04:57;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/14176
Date: 2023-05-26 11:49:34 +0000;;;","2023-05-31 06:21;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/14247
Date: 2023-05-31 13:12:23 +0000;;;","2023-06-01 04:15;dukebot;Changeset: 6adc242c
Author:    Jan Lahoda <jlahoda@openjdk.org>
Date:      2023-06-01 11:14:12 +0000
URL:       https://git.openjdk.org/jdk/commit/6adc242cf33941f1cbaa1f9e920c8700fd59aefc
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
jdk.management.jfr.RecordingInfo.toString() lacks test coverage,JDK-8308935,5101905,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,egahlin,egahlin,egahlin,2023-05-26 01:37,2023-06-05 03:09,2023-10-01 09:55,2023-05-26 09:02,,,,,,,21,hotspot,,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8306685,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i31opf:",9223372036854775807,b25,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@42995637,,,,,,,,,"2023-05-26 02:54;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/14171
Date: 2023-05-26 08:45:15 +0000;;;","2023-05-26 09:02;dukebot;Changeset: 77c5adb0
Author:    Erik Gahlin <egahlin@openjdk.org>
Date:      2023-05-26 16:00:12 +0000
URL:       https://git.openjdk.org/jdk/commit/77c5adb09e89e013c4bc4982f541110bf76e83a7
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
[JVMCI] TestUncaughtErrorInCompileMethod times out,JDK-8308930,5101900,Bug,Closed,JDK,JDK,software,duke,,,P4,Fixed,dnsimon,dnsimon,dnsimon,2023-05-26 01:01,2023-06-04 20:14,2023-10-01 09:55,2023-05-29 03:05,21,,,,,,21,hotspot,,0,intermittent,jvmci,noreg-self,oracle-triage-21,,,,,,,,,,"I've seen this test time out in mach5.

[2023-05-25T21:24:54,754Z] Command line: [/System/Volumes/Data/mesos/work_dir/jib-master/install/jdk-21+25-2128/macosx-x64-debug.jdk/jdk-21/fastdebug/bin/java -cp /System/Volumes/Data/mesos/work_dir/slaves/741e9afd-8c02-45c3-b2e2-9db1450d0832-S174598/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/08ee0c46-a232-4efc-818e-b19354123491/runs/8142694f-aa44-49d0-92d2-3c8743886ba3/testoutput/test-support/jtreg_open_test_hotspot_jtreg_tier1_compiler_2/classes/5/compiler/jvmci/TestUncaughtErrorInCompileMethod.d:/System/Volumes/Data/mesos/work_dir/jib-master/install/jdk-21+25-2128/src.full/open/test/hotspot/jtreg/compiler/jvmci:/System/Volumes/Data/mesos/work_dir/slaves/741e9afd-8c02-45c3-b2e2-9db1450d0832-S174598/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/08ee0c46-a232-4efc-818e-b19354123491/runs/8142694f-aa44-49d0-92d2-3c8743886ba3/testoutput/test-support/jtreg_open_test_hotspot_jtreg_tier1_compiler_2/classes/5/test/lib:/System/Volumes/Data/mesos/work_dir/jib-master/install/jdk-21+25-2128/src.full/open/test/lib:/System/Volumes/Data/mesos/work_dir/slaves/741e9afd-8c02-45c3-b2e2-9db1450d0832-S174598/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/08ee0c46-a232-4efc-818e-b19354123491/runs/8142694f-aa44-49d0-92d2-3c8743886ba3/testoutput/test-support/jtreg_open_test_hotspot_jtreg_tier1_compiler_2/classes/5:/System/Volumes/Data/mesos/work_dir/jib-master/install/jdk-21+25-2128/src.full/open/test/hotspot/jtreg:/System/Volumes/Data/mesos/work_dir/jib-master/install/jtreg/7.2/1/bundles/jtreg-7.2+1.zip/jtreg/lib/jtreg.jar -XX:+UnlockExperimentalVMOptions -XX:+UseJVMCICompiler -Djvmci.Compiler=ErrorCompiler -XX:-TieredCompilation -XX:+PrintCompilation --add-exports=jdk.internal.vm.ci/jdk.vm.ci.services=ALL-UNNAMED -Dtest.jvmci.compileMethodExceptionIsFatal=true -XX:+PrintWarnings -Xbootclasspath/a:. compiler.jvmci.TestUncaughtErrorInCompileMethod true ]
[2023-05-25T21:24:54,754Z] [2023-05-25T20:55:15.214526Z] Gathering output for process 24675
[2023-05-25T21:24:54,754Z] Timeout refired 480 times",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8309073,,,,JDK-8308151,,,,,"2023-05-26 01:02;dnsimon;TestUncaughtErrorInCompileMethod.java.log;https://bugs.openjdk.org/secure/attachment/104025/TestUncaughtErrorInCompileMethod.java.log",,,,,,,,,,,,,,21,,,,,,,,"0|i31oob:",9223372036854775807,b25,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,Fix failed,,"2023-05-26 01:56;thartmann;ILW = Test times out, intermittent with single test, no workaround = MLH = P4;;;","2023-05-26 08:37;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/14173
Date: 2023-05-26 10:35:58 +0000;;;","2023-05-29 03:05;dukebot;Changeset: a5d8d594
Author:    Doug Simon <dnsimon@openjdk.org>
Date:      2023-05-29 10:04:31 +0000
URL:       https://git.openjdk.org/jdk/commit/a5d8d594694c0e863dd30780a691a3a5ad9c6ee8
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Bad graph detected in build_loop_late after JDK-8305635,JDK-8308892,5101853,Bug,Closed,JDK,JDK,software,duke,,,P2,Fixed,chagedorn,dcubed,dcubed,2023-05-25 11:36,2023-07-11 05:45,2023-10-01 09:55,2023-06-02 05:02,21,,,,,,21,hotspot,,0,c2,intermittent,oracle-triage-11,oracle-triage-17,oracle-triage-21,regression,tier1,,,,,,,"The following test failed in the JDK21 CI:

java/lang/String/LiteralReplace.java

Here's a snippet from the log file:

----------stdout:(21/1124)*----------
#
# A fatal error has been detected by the Java Runtime Environment:
#
#  EXCEPTION_ACCESS_VIOLATION (0xc0000005) at pc=0x00007ffedf8120e2, pid=42888, tid=47848
#
# JRE version: Java(TM) SE Runtime Environment (21.0+25) (build 21-ea+25-LTS-2128)
# Java VM: Java HotSpot(TM) 64-Bit Server VM (21-ea+25-LTS-2128, mixed mode, tiered, compressed oops, compressed class ptrs, g1 gc, windows-amd64)
# Problematic frame:
# V  [jvm.dll+0x5f20e2]  PhaseIdealLoop::build_loop_late_post_work+0x272
#
# Core dump will be written. Default location: C:\\sb\\prod\\1685037075\\testoutput\\test-support\\jtreg_open_test_jdk_tier1_part1\\scratch\\1\\hs_err_pid42888.mdmp
#
# An error report file with more information is saved as:
# C:\\sb\\prod\\1685037075\\testoutput\\test-support\\jtreg_open_test_jdk_tier1_part1\\scratch\\1\\hs_err_pid42888.log
#
# Compiler replay data is saved as:
# C:\\sb\\prod\\1685037075\\testoutput\\test-support\\jtreg_open_test_jdk_tier1_part1\\scratch\\1\\replay_pid42888.log
#
# If you would like to submit a bug report, please visit:
#   https://bugreport.java.com/bugreport/crash.jsp
#
result: Error. Agent communication error: java.net.SocketException: Connection reset; check console log for any additional details

Here's the crashing thread's stack:

---------------  T H R E A D  ---------------

Current thread (0x0000016054ef6100):  JavaThread ""C2 CompilerThread0"" daemon [_thread_in_native, id=47848, stack(0x0000005efc300000,0x0000005efc400000) (1024K)]

Current CompileTask:
C2:  87063 4915       4       java.util.regex.Pattern$StartS::match (138 bytes)

Stack: [0x0000005efc300000,0x0000005efc400000],  sp=0x0000005efc3face0,  free space=1003k
Native frames: (J=compiled Java code, j=interpreted, Vv=VM code, C=native code)
V  [jvm.dll+0x5f20e2]  PhaseIdealLoop::build_loop_late_post_work+0x272  (loopnode.cpp:6064)
V  [jvm.dll+0x5f1e14]  PhaseIdealLoop::build_loop_late+0x214  (loopnode.cpp:5910)
V  [jvm.dll+0x5f0f98]  PhaseIdealLoop::build_and_optimize+0x708  (loopnode.cpp:4407)
V  [jvm.dll+0x251fc4]  PhaseIdealLoop::optimize+0x114  (loopnode.hpp:1201)
V  [jvm.dll+0x24a664]  Compile::Optimize+0xcb4  (compile.cpp:2359)
V  [jvm.dll+0x247ede]  Compile::Compile+0xd4e  (compile.cpp:840)
V  [jvm.dll+0x1c9641]  C2Compiler::compile_method+0xc1  (c2compiler.cpp:121)
V  [jvm.dll+0x257ab9]  CompileBroker::invoke_compiler_on_method+0x739  (compileBroker.cpp:2268)
V  [jvm.dll+0x25609a]  CompileBroker::compiler_thread_loop+0x26a  (compileBroker.cpp:1945)
V  [jvm.dll+0x3ee546]  JavaThread::run+0x116  (javaThread.cpp:704)
V  [jvm.dll+0x7f8558]  Thread::call_run+0xc8  (thread.cpp:227)
V  [jvm.dll+0x6c344d]  os::win32::thread_native_entry+0x7d  (os_windows.cpp:551)
C  [ucrtbase.dll+0x1fb80]
C  [KERNEL32.DLL+0x84d4]
C  [ntdll.dll+0x51791]



With a debug build:

Bad graph detected in build_loop_late
n:  1891  Bool  === _ 1890  [[ 1883 ]] [ne] !orig=[1018] !jvms: Pattern::lambda$negate$7 @ bci:2 (line 5818) 0x800000032::is @ bci:5 Pattern::lambda$and$2 @ bci:12 (line 5795) 0x0000000801061988::is @ bci:9 Pattern$CharProperty::match @ bci:37 (line 4109) Pattern$StartS::match @ bci:44 (line 3820)
early(n):  1934  IfFalse  === 1933  [[ 1827 591 ]] #0 !orig=[1818]
n->in(1):  1890  CmpP  === _ 1006 25  [[ 1891 ]]  !orig=[1017] !jvms: Pattern::lambda$negate$7 @ bci:2 (line 5818) 0x800000032::is @ bci:5 Pattern::lambda$and$2 @ bci:12 (line 5795) 0x0000000801061988::is @ bci:9 Pattern$CharProperty::match @ bci:37 (line 4109) Pattern$StartS::match @ bci:44 (line 3820)
early(n->in(1)):  1934  IfFalse  === 1933  [[ 1827 591 ]] #0 !orig=[1818]
n->in(1)->in(1):  1006  DecodeN  === _ 1005  [[ 1029 1890 ]]  #java/lang/Object *  Oop:java/lang/Object * !orig=[1889],... !jvms: 0x800000032::is @ bci:1 Pattern::lambda$and$2 @ bci:12 (line 5795) 0x0000000801061988::is @ bci:9 Pattern$CharProperty::match @ bci:37 (line 4109) Pattern$StartS::match @ bci:44 (line 3820)
early(n->in(1)->in(1)):  1934  IfFalse  === 1933  [[ 1827 591 ]] #0 !orig=[1818]
n->in(1)->in(2):    25  ConP  === 0  [[ 26 34 140 1178 215 1890 1871 1815 1171 1909 1834 1265 1917 1272 ]]  #null
early(n->in(1)->in(2)):     0  Root  === 0 38 1641 93 1648 124 1614 1579 204 1182 1491 1476 376 391 1107 481 518 565 1649 1200 1293 1276 762 832 856 917 1077 1237  [[ 0 1 3 25 33 40 41 54 55 75 88 108 136 153 157 166 231 1620 316 1619 355 371 399 1299 505 1259 1256 585 650 715 1187 726 1033 971 731 736 748 757 800 801 802 803 813 820 844 860 865 902 905 1688 1715 1724 1728 1923 ]] 

LCA(n):  1926  IfFalse  === 1925  [[ 1883 977 ]] #0 !orig=[1874]
n->out(0):  1883  If  === 1926 1891  [[ 1884 1885 ]] P=0,999999, C=-1,000000
n->out(0)->out(0):  1884  IfTrue  === 1883  [[ 1941 1029 ]] #1
n->out(0)->out(1):  1885  IfFalse  === 1883  [[ 1846 ]] #0

idoms of early ""1934 IfFalse"":
idom[21]:   1926  IfFalse
idom[20]:   1883  If
idom[19]:   1884  IfTrue
idom[18]:   1941  If
idom[17]:   1942  IfFalse
idom[16]:   1902  If
idom[15]:   1903  IfTrue
idom[14]:   1911  If
idom[13]:   1912  IfTrue
idom[12]:     84  ParsePredicate
idom[11]:     94  IfTrue
idom[10]:   1785  If
idom[9]:    1786  IfTrue
idom[8]:    1929  If
idom[7]:    1930  IfFalse
idom[6]:    1797  If
idom[5]:    1798  IfTrue
idom[4]:    1945  If
idom[3]:    1946  IfFalse
idom[2]:    1809  If
idom[1]:    1810  IfTrue
idom[0]:    1933  If
n:          1934  IfFalse

idoms of (wrong) LCA ""1926 IfFalse"":
n:         1926  IfFalse

Real LCA of early ""1934 IfFalse"" (idom[21]) and wrong LCA ""1926 IfFalse"":
 1926  IfFalse  === 1925  [[ 1883 977 ]] #0 !orig=[1874]

#
# A fatal error has been detected by the Java Runtime Environment:
#
#  Internal Error (/opt/mach5/mesos/work_dir/slaves/741e9afd-8c02-45c3-b2e2-9db1450d0832-S172117/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/79c14d5a-c3a8-484b-8985-95db5d2b9d8b/runs/8a9050ac-9e8d-4077-97c9-481f59b3e962/workspace/open/src/hotspot/share/opto/loopnode.cpp:6060), pid=3591450, tid=3591463
#  assert(false) failed: Bad graph detected in build_loop_late
#
# JRE version: Java(TM) SE Runtime Environment (21.0+25) (fastdebug build 21-ea+25-LTS-2128)
# Java VM: Java HotSpot(TM) 64-Bit Server VM (fastdebug 21-ea+25-LTS-2128, mixed mode, sharing, tiered, compressed oops, compressed class ptrs, g1 gc, linux-amd64)
# Problematic frame:
# V  [libjvm.so+0x1295a04]  PhaseIdealLoop::build_loop_late_post_work(Node*, bool)+0x904
",,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8309066,,,,,,,,JDK-8309066,JDK-8305635,,,,"2023-06-05 09:02;dcubed;jdk-21+25_macosx-aarch64.8308892.zip;https://bugs.openjdk.org/secure/attachment/104191/jdk-21%2B25_macosx-aarch64.8308892.zip","2023-05-26 01:47;thartmann;replay_pid42888.log;https://bugs.openjdk.org/secure/attachment/104033/replay_pid42888.log",,,,,,,,,,,,,,,,,,,,,"0|i31odv:",9223372036854775807,b26,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,Verified,,"2023-05-25 12:34;dlong;This looks like a ""normal"" crash to me, and probably not related to JDK-8258825 even though it happened on EPYC.;;;","2023-05-26 01:53;thartmann;I can reproduce this with replay compilation and the attached replay file. It's a regression from JDK-8305635.;;;","2023-05-26 01:53;thartmann;Christian, please have a look.;;;","2023-05-26 01:58;chagedorn;I'll have a look. Seems to be quite intermittent as I've never hit that before in my testing.;;;","2023-05-26 01:59;chagedorn;ILW = C2 assert due to bad graph, intermittent in tier1, disable compilation of affected method = HMM = P2;;;","2023-05-28 15:12;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/14196
Date: 2023-05-28 22:06:42 +0000;;;","2023-06-02 05:02;dukebot;Changeset: 7dbdad50
Author:    Christian Hagedorn <chagedorn@openjdk.org>
Date:      2023-06-02 12:00:11 +0000
URL:       https://git.openjdk.org/jdk/commit/7dbdad50a616abb01d60ddd53c1bc464cf8c5eb3
;;;","2023-06-02 08:35;dcubed;The fix for this bug is integrated in jdk-21+26-2241.;;;","2023-06-05 09:02;dcubed;Here's the log files from my jdk-21+25 stress testing sighting on macosx-aarch64:

$ unzip -l jdk-21+25_macosx-aarch64.8308892.zip
Archive:  jdk-21+25_macosx-aarch64.8308892.zip
  Length      Date    Time    Name
---------  ---------- -----   ----
   262158  06-01-2023 20:53   jdk-21+25_1/failures.macosx-aarch64/LiteralReplace.jtr.slowdebug
   103761  06-01-2023 20:53   jdk-21+25_1/failures.macosx-aarch64/hs_err_pid44589.log
---------                     -------
   365919                     2 files;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
TestCDSVMCrash.java needs @requires vm.cds,JDK-8308891,5101851,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,matsaave,iklam,iklam,2023-05-25 10:41,2023-06-08 17:44,2023-10-01 09:55,2023-06-01 13:38,21,,,,,,21,hotspot,,0,cds,noreg-self,,,,,,,,,,,,"Per [~mbaesken]

JDK-8306583 added a cds related test TestCDSVMCrash. But the new test misses '* @requires vm.cds' , ",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i31odf:",9223372036854775807,b26,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,,,"2023-06-01 11:27;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/14270
Date: 2023-06-01 18:22:01 +0000;;;","2023-06-01 13:38;dukebot;Changeset: 101bf229
Author:    Matias Saavedra Silva <matsaave@openjdk.org>
Date:      2023-06-01 20:37:21 +0000
URL:       https://git.openjdk.org/jdk/commit/101bf2290da5735fd9624ab647a8183c2c21f22d
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
[17u/11u] Backout JDK-8297951,JDK-8308884,5101844,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,sgehwolf,sgehwolf,sgehwolf,2023-05-25 09:26,2023-06-21 08:45,2023-10-01 09:55,2023-05-30 08:13,11.0.19,17.0.7,,,,,17.0.8,hotspot,,0,11bpr-critical-approved,17bpr-critical-approved,20-na,21-na,CPU23_07-critical-approved,CPU23_07-critical-SQE-OK,jdk11u-fix-request,jdk11u-fix-yes,jdk17u-fix-request,jdk17u-fix-yes,oracle-triage-21,release-note=yes,,"JDK-8297951 got added to the OpenJDK 11.0.19 and OpenJDK 17.0.7 releases as backports. This made a crash much more likely to occur and has been seen in the wild. See JDK-8307683 and related issues.

Until there is a more robust fix available for both JDK-8297951 and  JDK-8307683 we should back out JDK-8297951 from update releases.",,,,,,,,,,,JDK-8310505,JDK-8309121,JDK-8309280,JDK-8309164,JDK-8309163,JDK-8309443,JDK-8310562,JDK-8309281,,,,,,,,,,,,,,JDK-8297951,,,,JDK-8309119,JDK-8307683,JDK-8310409,JDK-8310389,,,,,,,,,generic,,,,,,,,,generic,,,,,,"0|i31obv:",9223372036854775807,b05,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2023-05-25 10:00;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/1402
Date: 2023-05-25 16:56:06 +0000;;;","2023-05-25 11:10;sgehwolf;Fix Request (OpenJDK 17):

Please approve this back-out of JDK-8297951 (simple anti-delta). It causes regressions in Calendar::computeTime as seen in JDK-8307683 and friends. Let's back it out for 17.0.8.;;;","2023-05-26 09:08;andrew;Approving for 17u. I think that reverting to the 17.0.6 status quo is the best option, given where we are with the 17.0.8 timeline (rampdown in two working days, on 2023-05-30, just one for some as Monday is a holiday in many countries).

Once JDK-8307683 has soaked in trunk, it can be backported in time for the October release, if it proves stable.;;;","2023-05-30 02:16;sgehwolf;FYI: I'm going to push the backout by end of my day today.;;;","2023-05-30 08:13;dukebot;Changeset: a93cf5f2
Author:    Severin Gehwolf <sgehwolf@openjdk.org>
Date:      2023-05-30 15:11:23 +0000
URL:       https://git.openjdk.org/jdk17u-dev/commit/a93cf5f2b959ba97d5197fe027b81ec69de18382
;;;","2023-05-30 08:19;sgehwolf;Redo bug for JDK-8297951 is: JDK-8309119;;;","2023-05-30 08:49;sgehwolf;Fix Request (OpenJDK 11):

Please approve this back-out of JDK-8297951 (simple anti-delta). It causes regressions in Calendar::computeTime as seen in JDK-8307683 and friends. Let's back it out for 11.0.20 and try again with the redo (JDK-8309119 and backport of JDK-8307683) in 11.0.21.;;;","2023-05-30 08:50;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk11u-dev/pull/1915
Date: 2023-05-30 15:44:57 +0000;;;","2023-05-30 09:23;dukebot;Changeset: a93cf5f2
Author:    Severin Gehwolf <sgehwolf@openjdk.org>
Date:      2023-05-30 15:11:23 +0000
URL:       https://git.openjdk.org/jdk17u/commit/a93cf5f2b959ba97d5197fe027b81ec69de18382
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Strong CLD oop handle roots are demoted to non-roots concurrently,JDK-8308881,5101839,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,eosterlund,eosterlund,eosterlund,2023-05-25 08:33,2023-06-04 20:14,2023-10-01 09:55,2023-05-30 00:31,,,,,,,21,hotspot,,0,genzgc,zgc,,,,,,,,,,,,"It is illegal to remove strong roots concurrently without clearing them first. A SATB collector with concurrent root scanning assumes that when strong roots disappear from the object graph, they are cleared first, which makes SATB notice the root. All global strong roots do this. Except CLD strong roots, which are turned into non-roots by decrementing the keep_alive counter to 0, when bootstrapping weak hidden class CLDs. This is not valid behaviour.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8308387,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i31oar:",9223372036854775807,b25,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6b00f96c,,,,,,,,,"2023-05-25 08:37;eosterlund;This issue might be causing JDK-8308387. But it's extremely hard to reproduce JDK-8308387.;;;","2023-05-25 08:48;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/14154
Date: 2023-05-25 15:41:23 +0000;;;","2023-05-30 00:31;dukebot;Changeset: 78aac241
Author:    Erik Österlund <eosterlund@openjdk.org>
Date:      2023-05-30 07:29:46 +0000
URL:       https://git.openjdk.org/jdk/commit/78aac241b8a3f29111e2901e8b7fbadd502a31a9
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
[17u] micro bench ZoneStrings missed in backport of 8278434,JDK-8308880,5101838,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,goetz,goetz,goetz,2023-05-25 08:30,2023-05-30 09:26,2023-10-01 09:55,2023-05-30 02:12,17.0.8,,,,,,17.0.8,core-libs,,0,jdk17u-fix-request,jdk17u-fix-yes,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8305381,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i31oaj:",9223372036854775807,b05,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@a9a7756,,,,,,,,,"2023-05-25 08:38;goetz;Fix request [17u]

A part missed in a previous change.
No risk, test only.;;;","2023-05-25 08:43;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/1400
Date: 2023-05-25 15:37:31 +0000;;;","2023-05-30 02:12;dukebot;Changeset: 109cc496
Author:    Goetz Lindenmaier <goetz@openjdk.org>
Date:      2023-05-30 09:10:38 +0000
URL:       https://git.openjdk.org/jdk17u-dev/commit/109cc4964dd0bb4fd157e6bc4ae608e8c55d6900
;;;","2023-05-30 09:23;dukebot;Changeset: 109cc496
Author:    Goetz Lindenmaier <goetz@openjdk.org>
Date:      2023-05-30 09:10:38 +0000
URL:       https://git.openjdk.org/jdk17u/commit/109cc4964dd0bb4fd157e6bc4ae608e8c55d6900
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
JFR: Deserialization of EventTypeInfo uses incorrect attribute names,JDK-8308876,5101834,Bug,Closed,JDK,JDK,software,duke,,,P2,Fixed,egahlin,egahlin,egahlin,2023-05-25 07:06,2023-07-11 05:47,2023-10-01 09:55,2023-05-26 23:19,,,,,,,21,hotspot,,0,,,,,,,,,,,,,,"The FlightRecorderMXBean allows users to interact with JFR remotely. One operation is to get event settings, for example, enablement and thresholds, so a client can't configure JFR from another machine. The information is stored in the class EventTypeInfo and it has a method call getSettingDescriptors() where user can find out which settings an event has.

Problem is that the deserialization from CompositeData to EventTypeInfo is incorrect. The attribute the deserization method EventTypeInfo::from(CompsoiteData) looks for is ""settings"", but it should be settingDescriptors. 

This has gone unnoticed because JMC looks up attributes reflectively and the engineers that implemented remote configuration took the attribute they saw (settingDescriptors). The bug also managed to avoid unit tests, because the test jdk.jfr.jmx.info.TestEventTypeInfo used the Platform MBeanServer directly, where objects are returned without serialization over CompositeData, instead of setting up a remote MBeanServerConnection.

The bug was found when it was noticed that the method EventTypeInfo::from(Compositedata) lacked test coverage.

Looking at the Javadoc spec., it says the attribute name should be settings. Given that the method doesn't work today, I think it is reasonable to change the spec. to be 'settingDescriptors', but also accept ""settings"" in the unlikely case some code depends on it. Changing the method name of getSettingDescriptors() to getSettings() will be much more disruptive to JMC and programmatic use.

A similar problem exists for the attribute category, which should be categoryNames",,,,,,,,,,,,,,,,,,,,,,,JDK-8308877,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i31o9n:",9223372036854775807,b25,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@42995637,,,,,,,Verified,,"2023-05-25 09:43;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/14155
Date: 2023-05-25 15:54:57 +0000;;;","2023-05-26 23:19;dukebot;Changeset: 5fdb22f9
Author:    Erik Gahlin <egahlin@openjdk.org>
Date:      2023-05-27 06:18:26 +0000
URL:       https://git.openjdk.org/jdk/commit/5fdb22f911b7e430bc1a621f6a39266ee2e50eda
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
"java/awt/Toolkit/GetScreenInsetsCustomGC/GetScreenInsetsCustomGC.java failed with 'Cannot invoke ""sun.awt.X11GraphicsDevice.getInsets()"" because ""device"" is null'",JDK-8308875,5101833,Bug,Closed,JDK,JDK,software,duke,,,P2,Fixed,mkartashev,dcubed,dcubed,2023-05-25 07:00,2023-06-14 03:52,2023-10-01 09:55,2023-06-06 01:27,21,,,,,,21,client-libs,,0,problemlist,regression,regression_8305578,tier4,,,,,,,,,,"The following test failed in the JDK21 CI:

java/awt/Toolkit/GetScreenInsetsCustomGC/GetScreenInsetsCustomGC.java

Here's a snippet from the log file:

#section:main
----------messages:(7/297)----------
command: main GetScreenInsetsCustomGC
reason: Assumed action based on file name: run main GetScreenInsetsCustomGC 
started: Thu May 25 02:39:08 UTC 2023
Mode: othervm
Additional options from @modules: --add-modules java.desktop
finished: Thu May 25 02:39:08 UTC 2023
elapsed time (seconds): 0.224
----------configuration:(3/40)----------
Boot Layer
  add modules: java.desktop

----------System.out:(0/0)----------
----------System.err:(12/893)----------
java.lang.NullPointerException: Cannot invoke ""sun.awt.X11GraphicsDevice.getInsets()"" because ""device"" is null
	at java.desktop/sun.awt.X11.XToolkit.getScreenInsets(XToolkit.java:891)
	at GetScreenInsetsCustomGC.main(GetScreenInsetsCustomGC.java:81)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
	at java.base/java.lang.reflect.Method.invoke(Method.java:578)
	at com.sun.javatest.regtest.agent.MainWrapper$MainTask.run(MainWrapper.java:138)
	at java.base/java.lang.Thread.run(Thread.java:1583)

JavaTest Message: Test threw exception: java.lang.NullPointerException: Cannot invoke ""sun.awt.X11GraphicsDevice.getInsets()"" because ""device"" is null
JavaTest Message: shutting down test

STATUS:Failed.`main' threw exception: java.lang.NullPointerException: Cannot invoke ""sun.awt.X11GraphicsDevice.getInsets()"" because ""device"" is null
----------rerun:(44/5845)*----------",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8305578,,,,,,,,,,,,x86_64,,,,,,,,,linux,,,,,,"0|i31o9f:",9223372036854775807,b26,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@5a9b3fd3,,,,,,,Verified,,"2023-05-25 07:17;dcubed;This failure first appeared in jdk-21+24-2104-tier4 which includes
the following fix:

JDK-8305578 X11GraphicsDevice.pGetBounds() is slow in remote X11 sessions

This test has failed in the same way for three Tier4 job sets
in a row so this looks like a regression. Regressions start out
as P2 so I've changed the priority from P4 -> P2.;;;","2023-05-25 13:10;vdyakov;the default option is roll back unless we have a quick turn over;;;","2023-05-25 13:32;dcubed;The test passes on macosx-aarch64, macosx-x64 and windows-x64.
It only fails on linux-x64. Since it is a limited failure, ProblemListing is also
an option. I'll take a look at that in order to reduce the noise in Tier4.;;;","2023-05-26 01:25;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/14170
Date: 2023-05-26 08:19:09 +0000;;;","2023-06-06 01:27;dukebot;Changeset: 41bf2ad1
Author:    Maxim Kartashev <mkartashev@openjdk.org>
Committer: Alexey Ushakov <avu@openjdk.org>
Date:      2023-06-06 08:26:01 +0000
URL:       https://git.openjdk.org/jdk/commit/41bf2ad159d274574285a0f55c4a0f582cd93648
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
FFM API and strings,JDK-8308858,5101814,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,mcimadamore,mcimadamore,mcimadamore,2023-05-25 03:33,2023-06-14 10:09,2023-10-01 09:55,2023-06-14 10:09,,,,,,,22,core-libs,,0,,,,,,,,,,,,,,"The behavior of the FFM API is inconsistent when it comes to strings. There are few functions in the FFM API which manipulates user-defined strings:

* MemorySegment::getUtf8String
* MemorySegment::setUtf8String
* SegmentAllocator::allocateUtf8String
* SymbolLookup::libraryLookup(String)
* SymbolLookup::find(String)

The first three cases have to do with converting a native string into a Java string and back. These methods can only support single-byte encoding (otherwise strlen doesn't work). Other frameworks, such as JNR and JNA seem to provide more general conversion methods, but the essence of the problem is the same, as this bug demonstrates:

https://github.com/java-native-access/jna/issues/759

This problem seems also to be inherited by - see the JNU_NewStringPlatform, which computes the size of a string in a char* using strlen (again, this seems to assume single byte encoding).

As for symbol lookups, the issues are more obscure. When the a library name string is passed to dlopen (SymbolLookup::libraryLookup), we convert it into a char* using the GetStringPlatformChars function. This copies the string array into a new char buffer and appends a NUL terminator. There seem to be reports that this behavior is not always correct, depending on the contents of the string (see https://bugs.openjdk.org/browse/JDK-8195129).

Finally, the string passed to dlsym (SymbolLookup::find) is converted using yet another JNI function, namely GetStringUTFChars, which returns the string encoded in the modified UTF-8 encoding used by the classfile format. This is probably a choice that has to do with the fact that  dlsym was only used to lookup JNI methods, and the name of a JNI method has to be a valid Java method name, encoded in the classfile (so, using modified Utf-8).

All these choices seem rather ad-hoc and/or biased towards what made sense for JNI. We should take a look at this again, and see if some more principled option exists.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i31o57:",9223372036854775807,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@28ce6b78,,,,,,,,,"2023-05-25 04:04;mcimadamore;It would be possible, in principle, to cache the length of the terminator char for a given Charset:

jshell> new String(""\u0000"").getBytes(Charset.forName(""UTF-16LE"")).length
$26 ==> 2

jshell> new String(""\u0000"").getBytes(Charset.forName(""UTF-8"")).length
$27 ==> 1

And then look for a corresponding number of terminator chars in the native string (to find the length of the string in bytes correctly, and, hence, the size of the segment). This could allow us to support any charset. Or, we could simply check that the Charset used has a single byte terminator, and throw if that's not the case. This possibility was alluded to here:

https://github.com/openjdk/panama-foreign/pull/554#issuecomment-861596490

But that comments says that it is not possible to check whether strlen will work or not - which seems addressable by using the trick above?;;;","2023-05-25 06:37;mcimadamore;As for dlopen/dlsym, there seem to be some constraints. The crux of the issue is that the JVM is not a Unicode application (e.g. on Windows). Because of that, when interacting with system calls, strings are typically converted, on Windows, using the so called ""System Locale"", which is typically a ""compatibility"" encoding in which terminator chars are one byte. This conversion is done in JNU_GetStringPlatformChars (as explained in https://bugs.openjdk.org/browse/CCC-4958170). As long as the JVM continues to function under this assumption, it seems hard that we'd be able to provide a more flexible SymbolLookup::libraryLookup factory which works with ""wide"" names. That said, such a lookup could be defined, if needed, by the user (after all, the Linker API can be used to implement such a lookup).

As for dlsym, I believe that the conversion into modified Utf8 has no reason to exist for the SymbolLookups provided by the FFM API. The goal of FFM's SymbolLookup is **not** to be able to find names of mangled Java methods in shared libraries - but to simply provide a ""raw"" query over the library contents. As such, it would seem that using JNU_GetStringPlatformChars would be a more appropriate way to get there (and also consistent with how dlopen behaves).

That said, one complicating factor here is that, while we have some freedom when it comes to SymbolLookup::libraryLookup, Symbol::loaderLookup is just a ""view"" over how classloders find symbols in libraries (e.g. typically when bindings JNI methods). As such, changing that behavior will require deeper changes (as the distinction between NativeLibraryImpl and RawNativeLibraryImpl is immaterial here).;;;","2023-05-25 08:34;mcimadamore;Note: on Windows, ""sun.jnu.encoding"" is typically set to something other than Utf-8:

```
jshell> System.getProperty(""sun.jnu.encoding"");
$5 ==> ""Cp1252""
```

This means that encoding the String symbol to be looked up using modified Utf-8 encoding might result in artifacts.;;;","2023-05-25 13:43;mcimadamore;After more investigation, it seems like both the PE and ELF format encode names as zero-terminated strings. In practice, some tests revealed that both the visual studio compiler and gcc end up storing symbol names in UTF-8 encoding in the corresponding sections of the PE and ELF files, respectively. This seems to suggest that the use of GetStringUTFChars, while technically questionable, is probably correct in practice (and probably better than using platform encoding).

Sources:
https://refspecs.linuxfoundation.org/elf/elf.pdf (string table section)
https://learn.microsoft.com/en-us/windows/win32/debug/pe-format#export-name-table
;;;","2023-05-25 13:44;mcimadamore;Another observation is that JNI mangles names to basically fallback on ASCII only:
https://docs.oracle.com/en/java/javase/20/docs/specs/jni/design.html#resolving-native-method-names
So, at least when it comes to JNI name resolution, using modified UTF 8 is not an issue.;;;","2023-05-29 10:38;jvernee;IIRC when I looked at this previously, trying to find the terminator was problematic even if we know that e.g. a char set had a terminator of 2 bytes, since it might not necessarily appear at a 2-byte boundary.

At the same time, for char sets like UTF16 we can't just look for 2 null bytes in a row, because we might see a null upper half of one character, and then the first null byte of the terminator, so the reported length would be 1 byte too short.

i.e. we not only need to know the width of the terminator, but also the minimum width of a character in that encoding, so that we can decided the stride of the iteration. I looked a bit through the CharSet implementation at the time, but couldn't find a way to determine the minimum byte width of a character for an arbitrary char set. (Though, admittedly, I did not look very hard, and at the time we wanted to punt on the issue of char sets besides UTF8 to get things ready for an upcoming release. Maybe it's time to revisit).;;;","2023-05-29 13:27;mcimadamore;True. I believe that, if we wanted to support all possible charsets, a good way to do it would be to mimic what JNI does, which is to have special case for few well-known charsets (e.g. UTF8, UTF16 and 8859) and, if it's something else, just wrap the segment in a BB and then use encoders/decoders (slow path). When reading, we should be able, with decoders, to read char by char until we find a ""null"" char. And when writing, we should be able to just write char by char using the encoder, and then appending a null char at the end (also using the encoder). Since we always use the segment, any out of bound access would be detected.;;;","2023-06-02 11:31;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/panama-foreign/pull/836
Date: 2023-06-02 18:25:33 +0000;;;","2023-06-02 16:14;mcimadamore;Using encoders and decoders is not really feasible. In part, this is due to the fact that the decoding API seems to be biased towards cases where the length of bytes to decode is known.This allows clients to allocate a char array that is big enough, and then just decode all the bytes into the required char buffer. But in our case we need to go one byte at a time (which really means throwing increasingly large set of bytes to the decoder, until it returns one char). This is particularly tricky to do, due to the way the encoder API works. It would be very useful if there was a way to ""parse the next char"", but this doesn't seem to be the case.

Moreover, the full generality of Java charsets is very likely to be far too much for how null-terminated strings really work. In reality, C/C++ support the following flavors of strings:

- char*, fixed size (e.g. ASCII)
- char*, variable size (e.g. UTF-8)
- wchar_t, fixed size (UTF-32) - (on platforms where wchar_t is big enough)
- wchar_t, variable size (e.g. UTF-16)

In all cases, there must be a special character, e.g. 0x00, 0x0000 or 0x00000000 which is the terminator character, and that cannot appear anywhere else in a string. Java charsets can be defined by clients, and do not have to adhere to rules that are specific to null-terminated strings. So, realistically, FFM API can only work with a subset of the available charsets.

;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
jdk.internal.classfile.impl.EntryMap::nextPowerOfTwo math problem,JDK-8308856,5101812,Bug,Closed,JDK,JDK,software,duke,,,P4,Fixed,asotona,shade,shade,2023-05-25 03:17,2023-08-16 06:54,2023-10-01 09:55,2023-06-01 04:51,21,,,,,,21,core-libs,,0,classfile-api,,,,,,,,,,,,,"I noticed the math problem in jdk.internal.classfile.impl.EntryMap::nextPowerOfTwo:

% jshell
|  Welcome to JShell -- Version 19.0.2
|  For an introduction type: /help intro

jshell>     public static long nextPowerOfTwo( long x ) {
   ...>         x = -1 >>> Long.numberOfLeadingZeros(x - 1);
   ...>         return x + 1;
   ...>     }
|  created method nextPowerOfTwo(long)

jshell> nextPowerOfTwo(0)
$2 ==> 0

jshell> nextPowerOfTwo(1)
$3 ==> 0

jshell> nextPowerOfTwo(2)
$4 ==> 2

jshell> nextPowerOfTwo(3)
$5 ==> 4

Note how ""1"" yields ""0"" as the next power of two.

Also check if you really need ""next"" power of two, which should give next(2) = 4. Maybe this is just ""round""?",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8294982,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i31o4r:",9223372036854775807,b26,,,,,,,,,Verified,,"2023-05-25 05:31;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/14148
Date: 2023-05-25 12:24:59 +0000;;;","2023-05-25 05:32;asotona;I've provided patch returning correct zero power of two.
However the returned values 0 or 1 have no impact on the EntryMap functionality.

Calculation starting from the given number (inclusive) is common practise (see for example BitSet::nextSetBit). 
;;;","2023-06-01 04:51;dukebot;Changeset: a6109bf1
Author:    Adam Sotona <asotona@openjdk.org>
Date:      2023-06-01 11:50:20 +0000
URL:       https://git.openjdk.org/jdk/commit/a6109bf1ea2acbebd6a3517813c0b82fdba00c2f
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
ARM32: TestBooleanVector crashes after 8300257,JDK-8308855,5101810,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,roland,avoitylov,avoitylov,2023-05-25 03:10,2023-07-12 13:17,2023-10-01 09:55,2023-06-19 00:04,21,,,,,,22,hotspot,,0,c2,hgupdate-sync,oraclejdk-na,oracle-triage-11,oracle-triage-17,oracle-triage-21,regression,,,,,,,"TestBooleanVector crashes on Arm32 after these changes:

From 6b2a86a65ef530002aea35ded45d75e04c223802 Mon Sep 17 00:00:00 2001
From: Roland Westrelin <roland@openjdk.org>
Date: Fri, 7 Apr 2023 12:51:44 +0000
Subject: [PATCH] 8300257: C2: vectorization fails on some simple Memory

The reason for the crash is that after moving an invariant out of the loop, the vector store instruction gets an unaligned address of the array.

;; B20: #   out( B20 B21 ) <- in( B19 B20 ) Loop( B20-B20 inner main of N111 strip mined) Freq: 1.04314e+07
 0xf3dbdd10:  sub   r5, r7, r6
 0xf3dbdd14:  add   r8, r4, r5
 0xf3dbdd18:  mvn   ip, #2
 0xf3dbdd1c:  add   r9, r8, #5
 0xf3dbdd20:  add   r5, r8, ip
=> 0xf3dbdd24:  vstr   d13, [r9]

The issue can be reproduced using this simple program:

public class TestBooleanVect {
 public static void main(String args[]) {
   boolean[] a = new boolean[997];
   for (int i = 0; i < 1000; i++) {
       int limit = a.length-1;
       for (int j = 0; j < a.length; j+=1) {
             a[limit-j] = false;
       }
   }
 }
}

The alignment of Array likely changes on all platforms, when we move the invariant out of the loop. ARM32 doesn't allow unaligned access by vector instruction and crashes.",,,,,,,,,,,JDK-8310604,JDK-8311331,,,,,,,,,,,,,,,,,,,,JDK-8300257,,,,,,,,,"2023-05-25 03:43;dsamersoff;hs_err_pid775.log;https://bugs.openjdk.org/secure/attachment/104002/hs_err_pid775.log",,,,,,,arm,,,,,,,,,,,,,,,"0|i31o4b:",9223372036854775807,b03,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2023-06-16 00:15;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/14508
Date: 2023-06-16 07:09:18 +0000;;;","2023-06-19 00:04;dukebot;Changeset: 266f9838
Author:    Roland Westrelin <roland@openjdk.org>
Date:      2023-06-19 07:02:10 +0000
URL:       https://git.openjdk.org/jdk/commit/266f9838ee28fb49b5368fc9778854c456b02b7c
;;;","2023-06-21 03:35;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk21/pull/48
Date: 2023-06-21 10:27:43 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Generational ZGC: Remove gc/z/TestHighUsage.java,JDK-8308843,5101798,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,aboldtch,stefank,stefank,2023-05-25 01:22,2023-08-14 11:56,2023-10-01 09:55,2023-08-10 00:18,21,22,,,,,22,hotspot,,0,genzgc,intermittent,problemlist,tier2,tier3,tier6,tier7,,,,,,,"The gc/z/TestHighUsage.java was originally used to test the high usage heuristics rule for single generational ZGC. For generational ZGC this test does not test anything concrete and mostly produces noise. So it should be removed. 

--- Original ---
Generational ZGC: gc/z/TestHighUsage.java Allocation Stall' found in stdout 
The following test timed out in the JDK21 CI with Generational ZGC:

gc/z/TestHighUsage.java

Here's a log file snippet for the jdk-21+24-2090-tier2 sighting:

Free: 2M (Idling)
Free: 2M (Idling)
Free: 2M (Idling)
[67.420s][info][gc] GC(48) Minor Collection (Allocation Rate)
[67.425s][info][gc] Allocation Stall (C1 CompilerThread0) 4.926ms
[67.426s][info][gc] GC(48) Minor Collection (Allocation Rate) 128M(100%)->128M(100%) 0.006s
[67.680s][info][gc] GC(49) Minor Collection (Allocation Stall)
[67.685s][info][gc] GC(49) Minor Collection (Allocation Stall) 128M(100%)->128M(100%) 0.005s
[67.686s][info][gc] GC(50) Major Collection (Allocation Stall)
[67.691s][info][gc] Allocation Stall (main) 10.879ms
[67.696s][info][gc] GC(51) Minor Collection (Allocation Stall)
[67.702s][info][gc] GC(51) Minor Collection (Allocation Stall) 128M(100%)->128M(100%) 0.006s
[67.710s][info][gc] GC(52) Minor Collection (Allocation Stall)
[67.715s][info][gc] GC(52) Minor Collection (Allocation Stall) 128M(100%)->128M(100%) 0.005s
[67.861s][info][gc] Relocation Stall (main) 0.076ms
[67.861s][info][gc] Allocation Stall (Common-Cleaner) 150.476ms
[67.861s][info][gc] Allocation Stall (main) 169.246ms
Free: 0M (Idling)
[67.861s][info][gc] GC(50) Major Collection (Allocation Stall) 128M(100%)->118M(92%) 0.175s
Free: 10M (Allocating)
Free: 10M (Allocating)
Free: 10M (Allocating)
Free: 10M (Allocating)
[68.900s][info][gc] GC(53) Minor Collection (Allocation Rate)
[68.905s][info][gc] GC(53) Minor Collection (Allocation Rate) 120M(94%)->114M(89%) 0.006s
Free: 12M (Allocating)
Free: 12M (Allocating)
Free: 12M (Allocating)

<snip>

Free: 10M (Allocating)
Free: 10M (Allocating)
Free: 10M (Allocating)
Free: 8M (Allocating)
[80.585s][info][gc] GC(55) Minor Collection (Allocation Rate)
[80.591s][info][gc] GC(55) Minor Collection (Allocation Rate) 120M(94%)->116M(91%) 0.005s
Done
];
 stderr: []
 exitValue = 0

java.lang.RuntimeException: 'Allocation Stall' found in stdout
at jdk.test.lib.process.OutputAnalyzer.shouldNotContain(OutputAnalyzer.java:267)
at gc.z.TestHighUsage.main(TestHighUsage.java:97)
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
at java.base/java.lang.reflect.Method.invoke(Method.java:578)
at com.sun.javatest.regtest.agent.MainWrapper$MainTask.run(MainWrapper.java:138)
at java.base/java.lang.Thread.run(Thread.java:1583)

JavaTest Message: Test threw exception: java.lang.RuntimeException: 'Allocation Stall' found in stdout
JavaTest Message: shutting down test

STATUS:Failed.`main' threw exception: java.lang.RuntimeException: 'Allocation Stall' found in stdout
----------rerun:(41/5954)*---------- 
",,,,,,,,,,,,,,,,,,,,,,,,,JDK-8288279,,,,,,,,,,,,,,,,"2023-07-24 09:44;dcubed;jdk-21+29_linux-x64.8308843.zip;https://bugs.openjdk.org/secure/attachment/104729/jdk-21%2B29_linux-x64.8308843.zip","2023-07-24 11:59;dcubed;jdk-21+29_macosx-aarch64.8308843.zip;https://bugs.openjdk.org/secure/attachment/104731/jdk-21%2B29_macosx-aarch64.8308843.zip",,,,,,x86_64,,,,,,,,,os_x,windows,,,,,"0|i31o1n:",9223372036854775807,b10,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6b00f96c,,,,,,,,,"2023-05-25 01:26;stefank;This shows up in early-tier testing, so I intend to problem-list this test.;;;","2023-06-19 19:29;dholmes;Why is this being described as a time-out? The test is simply failing AFAICS

java.lang.RuntimeException: 'Allocation Stall' found in stdout;;;","2023-06-19 22:43;stefank;[~dholmes] This bug inherited the title of the bug it cloned. We split the Singlegen ZGC failures from the Generational ZGC failures to be able to problem-list appropriately. No one noticed that the failure mode for Generational ZGC was different.;;;","2023-06-21 08:41;dcubed;Here's a log file snippet from the jdk-22+3-175-tier3 sighting:

gc/z/TestHighUsage.java

----------System.err:(453/17330)----------
java version ""22-ea"" 2024-03-19
Java(TM) SE Runtime Environment (fastdebug build 22-ea+3-175)
Java HotSpot(TM) 64-Bit Server VM (fastdebug build 22-ea+3-175, mixed mode)
 stdout: [[0.013s][info][gc] Using The Z Garbage Collector
Max capacity: 128M
High usage threshold: 6M
Allocating live-set
[0.248s][info][gc] GC(0) Major Collection (Warmup)
[0.297s][info][gc] GC(0) Major Collection (Warmup) 14M(11%)->112M(88%) 0.049s

<snip>

Free: 12M (Allocating)
Free: 12M (Allocating)
Free: 12M (Allocating)
Free: 12M (Allocating)
Done
];
 stderr: [java version ""22-ea"" 2024-03-19
Java(TM) SE Runtime Environment (fastdebug build 22-ea+3-175)
Java HotSpot(TM) 64-Bit Server VM (fastdebug build 22-ea+3-175, mixed mode)
]
 exitValue = 0

java.lang.RuntimeException: 'Allocation Stall' found in stdout
	at jdk.test.lib.process.OutputAnalyzer.shouldNotContain(OutputAnalyzer.java:267)
	at gc.z.TestHighUsage.main(TestHighUsage.java:97)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
	at java.base/java.lang.reflect.Method.invoke(Method.java:580)
	at com.sun.javatest.regtest.agent.MainWrapper$MainTask.run(MainWrapper.java:138)
	at java.base/java.lang.Thread.run(Thread.java:1570)

JavaTest Message: Test threw exception: java.lang.RuntimeException: 'Allocation Stall' found in stdout
JavaTest Message: shutting down test

STATUS:Failed.`main' threw exception: java.lang.RuntimeException: 'Allocation Stall' found in stdout
----------rerun:(34/7068)*----------


So it looks like this ""'Allocation Stall' found in stdout"" failure mode happens with regular ZGC and
Generational ZGC and with windows-x64 and macosx-x64. I've added this sighting to this bug
report based on the ""'Allocation Stall' found in stdout"" failure mode, but let me know if you plan
to use yet another bug for this failure sighting.;;;","2023-06-28 06:30;stefank;The plan is to problem list or remove this test from Generational ZGC.;;;","2023-06-30 12:55;dcubed;This test (gc/z/TestHighUsage.java) has been ProblemListed by two different sub tasks:

JDK-8308844 ProblemList gc/z/TestHighUsage.java with Generational ZGC on windows x64

JDK-8311046 ProblemList gc/z/TestHighUsage.java with Generational ZGC

And neither of these ProblemListing work properly because this test is directly
invoking a Generational ZGC run:

    public static void main(String[] args) throws Exception {
        ProcessTools.executeTestJvm(""-XX:+UseZGC"",
                                    ""-XX:+ZGenerational"",
                                    ""-XX:-ZProactive"",
                                    ""-Xms128M"",
                                    ""-Xmx128M"",
                                    ""-XX:ParallelGCThreads=1"",
                                    ""-XX:ConcGCThreads=1"",
                                    ""-Xlog:gc,gc+start"",
                                    Test.class.getName())
                    .shouldNotContain(""Allocation Stall"")
                    .shouldHaveExitValue(0);
    }

The test also has:

 * @requires vm.gc.ZGenerational

so it won't run unless Generation ZGC is available for use as far as I can tell.

There are currently 7 sightings of this test failure linked in Mach5 and only 3 of those
sightings are in Generational ZGC tasks so this test is still free to execute in these
other tasks:

tier6-common-openjdk-open_test_hotspot_jtreg_hotspot_gc-windows-x64-open
tier7-rt-main-no-coops-open_test_hotspot_jtreg_hotspot_gc-windows-x64-debug
tier3-rt-LightweightLocking-tier1_gc-windows-x64-debug
tier3-rt-xShareOff-tier1_gc-macosx-x64-debug

So ProblemListing is NOT the right way to disable this test.;;;","2023-07-05 23:06;aboldtch;Right, that is the way it works.

In that case we would need to add it to the normal problemlists as well. I believe removing this test for generational ZGC is the most appropriate. This test is of dubious benefit and meaning for generational ZGC.

Nice. Learned about the `@ignore`. JTREG option now.;;;","2023-07-24 09:44;dcubed;Here's the log from my jdk-21+29 stress run sightings on linux-x64:

$ unzip -l jdk-21+29_linux-x64.8308843.zip
Archive:  jdk-21+29_linux-x64.8308843.zip
  Length      Date    Time    Name
---------  ---------- -----   ----
    34771  2023-06-30 12:31   jdk-21+29_1/failures.linux-x86_64/TestHighUsage.jtr.release
---------                     -------
    34771                     1 file;;;","2023-07-24 11:59;dcubed;Here's the log from my jdk-21+29 stress run sightings on macosx-aarch64:

$ unzip -l jdk-21+29_macosx-aarch64.8308843.zip
Archive:  jdk-21+29_macosx-aarch64.8308843.zip
  Length      Date    Time    Name
---------  ---------- -----   ----
    34044  07-01-2023 11:54   jdk-21+29_2/failures.macosx-aarch64/TestHighUsage.jtr.fastdebug
---------                     -------
    34044                     1 file;;;","2023-08-08 07:14;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/15192
Date: 2023-08-08 14:07:58 +0000;;;","2023-08-10 00:18;dukebot;Changeset: 242a2e63
Author:    Axel Boldt-Christmas <aboldtch@openjdk.org>
Date:      2023-08-10 07:16:36 +0000
URL:       https://git.openjdk.org/jdk/commit/242a2e63df0d4995bdc9aba00510fada19fd2e23
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
SequenceLayout::withElementCount(long elementCount) doesn't throw IllegalArgumentException - if elementCount < 0 for some cases,JDK-8308812,5101763,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,mcimadamore,lkuskov,lkuskov,2023-05-24 17:23,2023-06-14 23:32,2023-10-01 09:55,2023-06-12 08:26,21,,,,,,21,core-libs,,0,conformance,,,,,,,,,,,,,"Specification states:

withElementCountCopy SequenceLayout withElementCount(long elementCount)
Throws: IllegalArgumentException - if elementCount < 0.

Found: 
withElementCount doesn't throw IAE if ""long"" overflow happens. 
The method should be fully documented i.e. AE should be either mentioned  or  wrapped.

jshell> SequenceLayout sl = MemoryLayout.sequenceLayout(4, MemoryLayout.sequenceLayout(4,ValueLayout.JAVA_LONG));
sl ==> [4:[4:j64]]

jshell> sl.withElementCount(Long.MIN_VALUE/(7*32));
|  Exception java.lang.ArithmeticException: long overflow
|        at Math.multiplyExact (Math.java:1032)
|        at SequenceLayoutImpl.<init> (SequenceLayoutImpl.java:43)
|        at SequenceLayoutImpl.withElementCount (SequenceLayoutImpl.java:71)
|        at (#31:1)

also it would be good to wrap ArithmeticException: long overflow in  IAE for positive counts:

jshell> sl.withElementCount(Long.MAX_VALUE/(7*32));
|  Exception java.lang.ArithmeticException: long overflow
|        at Math.multiplyExact (Math.java:1032)
|        at SequenceLayoutImpl.<init> (SequenceLayoutImpl.java:43)
|        at SequenceLayoutImpl.withElementCount (SequenceLayoutImpl.java:71)
|        at (#34:1)",,,,,,,,,,,JDK-8309865,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i31ntv:",9223372036854775807,b27,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@28ce6b78,,,,,,,,,"2023-06-02 15:49;mcimadamore;Good catch - the javadoc is fixed as part of this:
https://github.com/openjdk/jdk/pull/14098

The new javadoc mentions the overflow, but the AE is still not wrapped  as it should, I will fix.;;;","2023-06-06 03:36;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/14098
Date: 2023-05-23 11:48:59 +0000;;;","2023-06-12 08:26;dukebot;Changeset: 20371fd9
Author:    Maurizio Cimadamore <mcimadamore@openjdk.org>
Date:      2023-06-12 15:24:51 +0000
URL:       https://git.openjdk.org/jdk21/commit/20371fd918124451a068cb9647deebba7c9b4cba
;;;","2023-06-12 08:30;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk21/pull/7
Date: 2023-06-12 11:01:08 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
SunMSCAPI public keys returns internal key array,JDK-8308808,5101759,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,bperez,weijun,weijun,2023-05-24 14:51,2023-07-12 13:15,2023-10-01 09:55,2023-06-16 09:49,,,,,,,22,security-libs,,0,starter-bug,,,,,,,,,,,,,getEncoded() of these keys returns an internal field that can be modified by caller.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i31nsz:",9223372036854775807,b03,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@2ec284e3,,,,,,,,,"2023-05-24 14:57;weijun;
jshell> java.security.KeyPairGenerator.getInstance(""RSA"", ""SunMSCAPI"")
$1 ==> java.security.KeyPairGenerator$Delegate@eb21112

jshell> $1.generateKeyPair().getPublic()
$2 ==> ...

jshell> $2.getEncoded()[0] = 0
$3 ==> 0

jshell> $2.getEncoded()[0]
$4 ==> 0

I cannot think of a way to demonstrate this with an EC key because an EC public key probably only exists inside a ECDSA signature object which is not accessible from outside.;;;","2023-06-12 12:02;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/14425
Date: 2023-06-12 18:49:59 +0000;;;","2023-06-16 09:49;dukebot;Changeset: 4eb4f20a
Author:    Ben Perez <ben.perez@oracle.com>
Committer: Sean Mullan <mullan@openjdk.org>
Date:      2023-06-16 16:46:54 +0000
URL:       https://git.openjdk.org/jdk/commit/4eb4f20ae22a8f6a49cbbcaa6603ee19ed078e8b
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
[8u] Remove duplicate HaricaCA.java test,JDK-8308788,5101737,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,sgehwolf,sgehwolf,sgehwolf,2023-05-24 10:23,2023-08-22 20:37,2023-10-01 09:55,2023-08-11 01:51,openjdk8u292,,,,,,openjdk8u392,security-libs,,0,11-na,17-na,21-na,jdk8u-fix-request,jdk8u-fix-yes,testbug,,,,,,,,"Backport of JDK-8256421 added test to wrong location, namely:

jdk/test/jdk/security/infra/java/security/cert/CertPathValidator/certification/HaricaCA.java

while it should be

jdk/test/security/infra/java/security/cert/CertPathValidator/certification/HaricaCA.java

That's where other CA tests live in 8u.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8256421,,,,,,,,,,,,,,,,generic,,,,,,,,,generic,,,,,,"0|i31no3:",9223372036854775807,b02,,,,,,,,,,,"2023-05-24 11:30;sgehwolf;This commit introduced the change in the wrong location:
https://github.com/openjdk/jdk8u/commit/c98be69f8ac

This commit points to the same bug, but has a different commit id and uses the correct location:
https://github.com/openjdk/jdk8u/commit/e190c22e19d

It looks like jdk/test/jdk/security/infra/java/security/cert/CertPathValidator/certification/HaricaCA.java can simply be removed:
$ diff -u jdk/test/security/infra/java/security/cert/CertPathValidator/certification/HaricaCA.java jdk/test/jdk/security/infra/java/security/cert/CertPathValidator/certification/HaricaCA.java
$ ;;;","2023-05-26 02:40;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk8u-dev/pull/322
Date: 2023-05-26 09:35:16 +0000;;;","2023-05-30 02:40;sgehwolf;Fix Request (OpenJDK 8u):

Please approve this test-only deletion for OpenJDK 8u. Apparently this must have been some hg->git conversion thing or a merge issue. The duplicate file isn't present in the original HG commit: https://hg.openjdk.org/jdk8u/jdk8u/jdk/rev/8c34226ce118 but seems to be in the jdk8u merge: https://hg.openjdk.org/jdk8u/jdk8u/jdk/rev/d55e3a03248a I don't know. Either way, duplicate file. Very little risk. Reviewed by Paul Hohensee.;;;","2023-08-11 01:51;dukebot;Changeset: 86ea3f25
Author:    Severin Gehwolf <sgehwolf@openjdk.org>
Date:      2023-08-11 08:50:49 +0000
URL:       https://git.openjdk.org/jdk8u-dev/commit/86ea3f25b6b288919788d4ec99ff4cc0bab81413
;;;","2023-08-22 20:36;dukebot;Changeset: 86ea3f25
Author:    Severin Gehwolf <sgehwolf@openjdk.org>
Date:      2023-08-11 08:50:49 +0000
URL:       https://git.openjdk.org/jdk8u/commit/86ea3f25b6b288919788d4ec99ff4cc0bab81413
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Fix the Java Integer types on Windows,JDK-8308780,5101724,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,jwaters,jwaters,jwaters,2023-05-24 06:55,2023-07-12 13:28,2023-10-01 09:55,2023-06-25 16:43,21,,,,,,22,hotspot,,0,,,,,,,,,,,,,,"On Windows, the basic Java Integer types are defined as long and __int64 respectively. In particular, the former is rather problematic since it breaks compilation as the Visual C++ becomes stricter and more compliant with every release, which means the way Windows code treats long as a typedef for int is no longer correct, especially with -permissive- enabled. Instead of changing every piece of broken code to match the jint = long typedef, which is far too time consuming, we can instead change jint to an int (which is still the same 32 bit number type as long), as there are far fewer problems caused by this definition. It's better to get this over and done with sooner than later when a future version of Visual C++ finally starts to break on existing code",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i31nl7:",9223372036854775807,b04,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,,,"2023-05-24 07:04;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/14125
Date: 2023-05-24 13:56:05 +0000;;;","2023-06-25 16:43;dukebot;Changeset: c92b049d
Author:    Julian Waters <jwaters@openjdk.org>
Date:      2023-06-25 23:41:54 +0000
URL:       https://git.openjdk.org/jdk/commit/c92b049db7853a061ce05cebdc1fd73205ed0c83
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
TLAB initialization may cause div by zero,JDK-8308766,5101708,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,tschatzl,tschatzl,tschatzl,2023-05-24 04:02,2023-07-05 01:54,2023-10-01 09:55,2023-06-01 00:00,11-pool,17,20,21,8-pool,,21,hotspot,,0,amazon-interest,gc-g1,gc-pending-review,jdk17u-fix-request,jdk17u-fix-yes,,,,,,,,,"TLAB initialization (in ThreadLocalAllocBuffer::initialize()) samples how much of capacity has actually been filled for statistics/resizing purposes:

  size_t capacity = Universe::heap()->tlab_capacity(thread()) / HeapWordSize;
  
  // Keep alloc_frac as float and not double to avoid the double to float conversion
  float alloc_frac = desired_size() * target_refills() / (float) capacity;

That capacity can be zero (if e.g. there is no space left for allocation). 

Adding an assert checking that capacity is > 0 here will crash the VM during shutdown (experienced only on OSX for whatever reason):

Stack: [0x000000016d454000,0x000000016d657000],  sp=0x000000016d656d40,  free space=2059k
Native frames: (J=compiled Java code, j=interpreted, Vv=VM code, C=native code)
V  [libjvm.dylib+0x1374050]  VMError::report_and_die(int, char const*, char const*, char*, Thread*, unsigned char*, void*, void*, char const*, int, unsigned long)+0x4bc  (threadLocalAllocBuffer.cpp:216)
V  [libjvm.dylib+0x13749ec]  VMError::report_and_die(Thread*, void*, char const*, int, char const*, char const*, char*)+0x40
V  [libjvm.dylib+0x6aa82c]  report_vm_error(char const*, int, char const*, char const*, ...)+0x6c
V  [libjvm.dylib+0x12a8754]  ThreadLocalAllocBuffer::initialize()+0x7c
V  [libjvm.dylib+0xb11194]  attach_current_thread(JavaVM_*, void**, void*, bool)+0x1d0
V  [libjvm.dylib+0xb10e0c]  jni_DestroyJavaVM+0x4c
C  [libjli.dylib+0x745c]  JavaMain+0xc3c
C  [libjli.dylib+0x94cc]  ThreadJavaMain+0xc
C  [libsystem_pthread.dylib+0x7240]  _pthread_start+0x94

This seems timing dependent, only on OSX and G1 we ever noticed an issue (probably JDK-8264798), the FPE_FLTDIV delivered lazily/late. 

The suggested fix is to just not sample in this case.",,,,,,,,,,,JDK-8311483,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8264798,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i31nhn:",9223372036854775807,b26,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6b00f96c,,,,,,,,,"2023-05-24 04:57;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/14121
Date: 2023-05-24 11:50:02 +0000;;;","2023-05-25 09:14;tschatzl;Added affects version back to JDK 8 since that code and the `tlab_capacity()` implementation are the same as they are now. Maybe other circumstance prevent this from happening though.;;;","2023-06-01 00:00;dukebot;Changeset: 96ed1392
Author:    Thomas Schatzl <tschatzl@openjdk.org>
Date:      2023-06-01 06:57:45 +0000
URL:       https://git.openjdk.org/jdk/commit/96ed1392d1c5062063b1f8b5f1bd30d2d17ce3fe
;;;","2023-07-04 05:03;shade;Fix Request (17u)

Fixes a corner case in G1 that can result in rare SIGFPE. Applies cleanly.;;;","2023-07-04 05:05;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/1536
Date: 2023-07-04 12:00:33 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Reporting errors from create_vm may crash,JDK-8308764,5101706,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,dholmes,kbarrett,kbarrett,2023-05-24 03:22,2023-06-12 20:57,2023-10-01 09:55,2023-06-07 20:31,21,,,,,,21,hotspot,,0,jni,noreg-hard,,,,,,,,,,,,"JNI_CreateJavaVM_inner calls create_vm and examines the result. If it indicates an error (not JNI_OK) then it checks for a pending exception and reports that. That check requires the current thread. However, in some cases create_vm deletes the main thread before returning an error code. As a result, the attempt to get and use current thread will crash (either an assert or a null pointer access).

This crash can be reproduced fairly easily by patching create_vm's handling of the result of init_globals(), using -XX:+UseNewCode to force an error return.  I tripped over it while testing a fix for JDK-8240774.

",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8240774,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i31nh7:",9223372036854775807,b26,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,,,"2023-05-24 03:23;kbarrett;A workaround that eliminates the crash is to use Thread::current_or_null and only do the exception check and reporting if the result is non-null. But since create_vm will delete the current (main) Thread object before returning in some (most/all?) such scenarios, the exception doesn't get reported in those cases. Instead there is just a generic failure to start message.
;;;","2023-05-24 18:22;dholmes;Yes the general expectation is that most failures that get reported (rather than do a vm_exit_during_initialization) would have an associated exception from the Java initialization code. But of course there are many things that can go wrong during VM init. We can easily avoid the current_thread crash as noted. I will look at whether we can add jio_snprintf-style error messages as well.;;;","2023-05-30 18:40;dholmes;The problematic chunk of code in JNI_CreateJavaVM_inner is:

} else {  // create_vm returned an error
    // If create_vm exits because of a pending exception, exit with that
    // exception.  In the future when we figure out how to reclaim memory,
    // we may be able to exit with JNI_ERR and allow the calling application
    // to continue.
    if (Universe::is_fully_initialized()) {
      // otherwise no pending exception possible - VM will already have aborted
      JavaThread* THREAD = JavaThread::current(); // For exception macros.
      if (HAS_PENDING_EXCEPTION) {
        HandleMark hm(THREAD);
        vm_exit_during_initialization(Handle(THREAD, PENDING_EXCEPTION));
      }
    }

We will only try to report an exception if Universe::is_fully_initialized(), which is set at the start of universe_post_init(), after which numerous exception throwing code paths exist.

universe_post_init() is called near the end of init_globals2() which in turn is called from create_vm:

  status = init_globals2();
  if (status != JNI_OK) {
    Threads::remove(main_thread, false);
    main_thread->smr_delete();
    *canTryAgain = false; // don't let caller call JNI_CreateJavaVM again
    return status;
  }

Given we know we can have exceptions pending at this point (else we should have done a vm_exit_during_initialization elsewhere) it suffices to not perform the smr_delete() and so leave the main_thread intact for JNI_CreateJavaVM_inner to use.

Any other exit path that deletes the main_thread (only one) won't get past the Universe_is_fully_initialized() check.

Any failure of init_globals() and init_globals2() prevents retrying the creation of the VM so we do not need to explicitly cleanup the main thread..

Updated to reflect the split of init_globals() into two parts by JDK-8240774.;;;","2023-05-30 18:52;dholmes;Testing this is problematic. It is easy to  trigger a non-exception exit path using UseNewCode. But for the exception path to be tested I have to trigger actual throwing of the exception, and the only exception that can really happen here is OOME and I have no way to force the low-level allocation methods to throw OOME for a specific allocation.

That said, we still test that the crashing JavaThread::current() no longer crashes.;;;","2023-05-30 19:56;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/14238
Date: 2023-05-31 02:51:03 +0000;;;","2023-06-07 20:31;dukebot;Changeset: 6646272a
Author:    David Holmes <dholmes@openjdk.org>
Date:      2023-06-08 03:30:11 +0000
URL:       https://git.openjdk.org/jdk/commit/6646272a055f8e6c3955bed49d298b9eda1a805b
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Metaspace leak with Instrumentation.retransform,JDK-8308762,5101697,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,jpbempel,jpbempel,jpbempel,2023-05-24 02:25,2023-09-27 18:19,2023-10-01 09:55,2023-09-20 22:19,11.0.26,17.0.7,20.0.2,21,8u341,,22,hotspot,,0,amazon-interest,datadog-interest,,,,,,,,,,,,"We have just identified a Metaspace leak in a very specific case when
a class has a method using a try-with-resources construct (or similar
with try-catch) and re-transforming this class in a loop. It is
reproducible from jdk8 to jdk20.
Here the steps to reproduce:

 1. create a java file with following content:

public class RetransformLeak {
    public static void main(String[] args) throws Exception {
        new MyClass();
        while (true) {
            Thread.sleep(1000);
        }
    }
}

class MyClass {
    private static void writeFile() {
        TWR var0 = new TWR();
        try {
            var0.process();
        } catch (Throwable var4) {
            try {
                var0.close();
            } catch (Throwable var3) {
                var4.addSuppressed(var3);
            }
            throw var4;
        }
        var0.close();
//        try (TWR twr = new TWR()) {
//            twr.process();
//        }
    }

    static class TWR implements AutoCloseable {
        public void process() {}
        @Override
        public void close() {}
    }
}

2. compile it: javac RetransformLeak.java
3. create a java file Agent.java with the following content that will
be our java agent performing re-transformation:

public class Agent {
    public static void premain(String arg, Instrumentation inst) {
        new Thread(() -> retransformLoop(inst, arg)).start();
    }

    private static void retransformLoop(Instrumentation
instrumentation, String className) {
        Class<?> classToRetransform = null;
        while (true) {
            if (classToRetransform == null) {
                for (Class<?> clazz : instrumentation.getAllLoadedClasses()) {
                    if (clazz.getName().equals(className)) {
                        System.out.println(""found class: "" + className);
                        classToRetransform = clazz;
                        break;
                    }
                }
            }
            if (classToRetransform != null) {
                try {
                    instrumentation.retransformClasses(classToRetransform);
                    //Thread.sleep(1);
                } catch (Exception e) {
                    throw new RuntimeException(e);
                }
            }
        }
    }
}

 4. Compile it: javac Agent.java
 5. create a Manifest.txt file for the java agent:

Premain-Class: Agent
Can-Retransform-Classes: true

 6. create java agent jar: jar cfm agent.jar Manifest.txt Agent.class
 7. execute the RetransformLeak class with a max metaspace size:
java -javaagent:agent.jar=MyClass -XX:MaxMetaspaceSize=128M -cp .
RetransformLeak

output:
found class: MyClass
Exception in thread ""Thread-0"" java.lang.OutOfMemoryError
  at java.instrument/sun.instrument.InstrumentationImpl.retransformClasses0(Native
Method)
  at java.instrument/sun.instrument.InstrumentationImpl.retransformClasses(InstrumentationImpl.java:169)
  at Agent.retransformLoop(Agent.java:22)
  at Agent.lambda$premain$0(Agent.java:5)
  at java.base/java.lang.Thread.run(Thread.java:1623)

If you comment the line:
                var4.addSuppressed(var3);
in MyClass#writeFile method, no OOME will be thrown and Metaspace will
remain stable.
You can also directly use a try-with-resources construct to reproduce
the leak but I have decomposed it with try catch to be able to
pinpoint more precisely which bytecode may generate the leak.

Here the output of VM.metaspace after the OOME:

$ jcmd 6940 VM.metaspace
6940:

Total Usage - 6 loaders, 809 classes (776 shared):
  Non-Class: 2605 chunks,    131.55 MB capacity,  127.87 MB ( 97%)
committed,   127.83 MB ( 97%) used,    37.94 KB ( <1%) free,     8
bytes ( <1%) waste , deallocated: 11783 blocks with 127.36 MB
      Class:    8 chunks,    266.00 KB capacity,   74.00 KB ( 28%)
committed,    17.48 KB (  7%) used,    56.52 KB ( 21%) free,     0
bytes (  0%) waste , deallocated: 2 blocks with 512 bytes
       Both: 2613 chunks,    131.81 MB capacity,  127.94 MB ( 97%)
committed,   127.85 MB ( 97%) used,    94.45 KB ( <1%) free,     8
bytes ( <1%) waste , deallocated: 11785 blocks with 127.36 MB


Virtual space:
  Non-class space:      192.00 MB reserved,     127.88 MB ( 67%)
committed,  3 nodes.
      Class space:      104.00 MB reserved,     128.00 KB ( <1%)
committed,  1 nodes.
             Both:      296.00 MB reserved,     128.00 MB ( 43%) committed.


Chunk freelists:
   Non-Class:

  4m: (none)
  2m: (none)
  1m: (none)
512k: (none)
256k:    2, capacity=512.00 KB, committed=0 bytes (  0%)
128k:    2, capacity=256.00 KB, committed=0 bytes (  0%)
 64k:    2, capacity=128.00 KB, committed=0 bytes (  0%)
 32k: (none)
 16k: (none)
  8k: (none)
  4k:    2, capacity=8.00 KB, committed=8.00 KB (100%)
  2k:    6, capacity=12.00 KB, committed=12.00 KB (100%)
  1k: (none)
Total word size: 916.00 KB, committed: 20.00 KB (  2%)

       Class:

  4m: (none)
  2m:    1, capacity=2.00 MB, committed=0 bytes (  0%)
  1m:    1, capacity=1.00 MB, committed=0 bytes (  0%)
512k:    1, capacity=512.00 KB, committed=0 bytes (  0%)
256k: (none)
128k:    1, capacity=128.00 KB, committed=0 bytes (  0%)
 64k:    1, capacity=64.00 KB, committed=0 bytes (  0%)
 32k:    1, capacity=32.00 KB, committed=0 bytes (  0%)
 16k:    1, capacity=16.00 KB, committed=0 bytes (  0%)
  8k: (none)
  4k: (none)
  2k:    1, capacity=2.00 KB, committed=2.00 KB (100%)
  1k:    3, capacity=3.00 KB, committed=3.00 KB (100%)
Total word size: 3.74 MB, committed: 5.00 KB ( <1%)

        Both:

  4m: (none)
  2m:    1, capacity=2.00 MB, committed=0 bytes (  0%)
  1m:    1, capacity=1.00 MB, committed=0 bytes (  0%)
512k:    1, capacity=512.00 KB, committed=0 bytes (  0%)
256k:    2, capacity=512.00 KB, committed=0 bytes (  0%)
128k:    3, capacity=384.00 KB, committed=0 bytes (  0%)
 64k:    3, capacity=192.00 KB, committed=0 bytes (  0%)
 32k:    1, capacity=32.00 KB, committed=0 bytes (  0%)
 16k:    1, capacity=16.00 KB, committed=0 bytes (  0%)
  8k: (none)
  4k:    2, capacity=8.00 KB, committed=8.00 KB (100%)
  2k:    7, capacity=14.00 KB, committed=14.00 KB (100%)
  1k:    3, capacity=3.00 KB, committed=3.00 KB (100%)
Total word size: 4.63 MB, committed: 25.00 KB ( <1%)



Waste (unused committed space):(percentages refer to total committed
size 128.00 MB):
        Waste in chunks in use:      8 bytes ( <1%)
        Free in chunks in use:     94.45 KB ( <1%)
                In free chunks:     25.00 KB ( <1%)
Deallocated from chunks in use:    127.36 MB (>99%) (11785 blocks)
                       -total-:    127.48 MB (>99%)

chunk header pool: 2632 items, 189.33 KB.

Internal statistics:

num_allocs_failed_limit: 23.
num_arena_births: 22.
num_arena_deaths: 10.
num_vsnodes_births: 4.
num_vsnodes_deaths: 0.
num_space_committed: 2048.
num_space_uncommitted: 0.
num_chunks_returned_to_freelist: 33.
num_chunks_taken_from_freelist: 2624.
num_chunk_merges: 11.
num_chunk_splits: 1456.
num_chunks_enlarged: 276.
num_inconsistent_stats: 0.


Settings:
MaxMetaspaceSize: 128.00 MB
CompressedClassSpaceSize: 104.00 MB
Initial GC threshold: 21.00 MB
Current GC threshold: 128.00 MB
CDS: on
MetaspaceReclaimPolicy: balanced
 - commit_granule_bytes: 65536.
 - commit_granule_words: 8192.
 - virtual_space_node_default_size: 8388608.
 - enlarge_chunks_in_place: 1.
 - new_chunks_are_fully_committed: 0.
 - uncommit_free_chunks: 1.
 - use_allocation_guard: 0.

Also I have run it with -XX:+CrashOnOutOfMemoryError to have  stacktrace:
Stack: [0x00007f8d9c400000,0x00007f8d9c500000],
sp=0x00007f8d9c4fdb80,  free space=1014k
Native frames: (J=compiled Java code, j=interpreted, Vv=VM code, C=native code)
V  [libjvm.so+0xf9f4e7]  VMError::report_and_die(int, char const*,
char const*, __va_list_tag*, Thread*, unsigned char*, void*, void*,
char const*, int, unsigned long)+0x197  (debug.cpp:368)
V  [libjvm.so+0x672eab]  report_fatal(VMErrorType, char const*, int,
char const*, ...)+0x12b
V  [libjvm.so+0x67315d]  report_java_out_of_memory(char const*)+0xed
V  [libjvm.so+0xc238d0]
Metaspace::report_metadata_oome(ClassLoaderData*, unsigned long,
MetaspaceObj::Type, Metaspace::MetadataType, JavaThread*)+0x260
V  [libjvm.so+0xc23b33]  Metaspace::allocate(ClassLoaderData*,
unsigned long, MetaspaceObj::Type, JavaThread*)+0x133
V  [libjvm.so+0x650e8b]  ConstantPool::allocate(ClassLoaderData*, int,
JavaThread*)+0x7b
V  [libjvm.so+0xae518c]
VM_RedefineClasses::merge_cp_and_rewrite(InstanceKlass*,
InstanceKlass*, JavaThread*)+0x4c
V  [libjvm.so+0xae6e6d]  VM_RedefineClasses::load_new_class_versions()
[clone .part.0]+0x34d
V  [libjvm.so+0xae794f]  VM_RedefineClasses::doit_prologue()+0x17f
V  [libjvm.so+0xfa8ee0]  VMThread::execute(VM_Operation*)+0x40
V  [libjvm.so+0xab416f]  JvmtiEnv::RetransformClasses(int, _jclass*
const*)+0x2bf
V  [libjvm.so+0xa5f04c]  jvmti_RetransformClasses+0xfc
C  [libinstrument.so+0x4e86]  retransformClasses+0x1b6
J 182  sun.instrument.InstrumentationImpl.retransformClasses0(J[Ljava/lang/Class;)V
java.instrument@20.0.1 (0 bytes) @ 0x00007f8d886d8077
[0x00007f8d886d7fa0+0x00000000000000d7]
J 181 c1 sun.instrument.InstrumentationImpl.retransformClasses([Ljava/lang/Class;)V
java.instrument@20.0.1 (33 bytes) @ 0x00007f8d80c29a5c
[0x00007f8d80c29860+0x00000000000001fc]
j  Agent.retransformLoop(Ljava/lang/instrument/Instrumentation;Ljava/lang/String;)V+82
j  Agent.lambda$premain$0(Ljava/lang/instrument/Instrumentation;Ljava/lang/String;)V+2
j  Agent$$Lambda$14+0x0000000801002c00.run()V+8
j  java.lang.Thread.runWith(Ljava/lang/Object;Ljava/lang/Runnable;)V+5
java.base@20.0.1
j  java.lang.Thread.run()V+19 java.base@20.0.1
v  ~StubRoutines::call_stub 0x00007f8d88138cc6
V  [libjvm.so+0x8c9c85]  JavaCalls::call_helper(JavaValue*,
methodHandle const&, JavaCallArguments*, JavaThread*)+0x315
V  [libjvm.so+0x8cb5f2]  JavaCalls::call_virtual(JavaValue*, Handle,
Klass*, Symbol*, Symbol*, JavaThread*)+0x1d2
V  [libjvm.so+0x99debe]  thread_entry(JavaThread*, JavaThread*)+0x8e
V  [libjvm.so+0x8e1578]  JavaThread::thread_main_inner() [clone .part.0]+0xb8
V  [libjvm.so+0xf18736]  Thread::call_run()+0xa6
V  [libjvm.so+0xcae8d8]  thread_native_entry(Thread*)+0xd8
Java frames: (J=compiled Java code, j=interpreted, Vv=VM code)
J 182  sun.instrument.InstrumentationImpl.retransformClasses0(J[Ljava/lang/Class;)V
java.instrument@20.0.1 (0 bytes) @ 0x00007f8d886d8004
[0x00007f8d886d7fa0+0x0000000000000064]
J 181 c1 sun.instrument.InstrumentationImpl.retransformClasses([Ljava/lang/Class;)V
java.instrument@20.0.1 (33 bytes) @ 0x00007f8d80c29a5c
[0x00007f8d80c29860+0x00000000000001fc]
j  Agent.retransformLoop(Ljava/lang/instrument/Instrumentation;Ljava/lang/String;)V+82
j  Agent.lambda$premain$0(Ljava/lang/instrument/Instrumentation;Ljava/lang/String;)V+2
j  Agent$$Lambda$14+0x0000000801002c00.run()V+8
j  java.lang.Thread.runWith(Ljava/lang/Object;Ljava/lang/Runnable;)V+5
java.base@20.0.1
j  java.lang.Thread.run()V+19 java.base@20.0.1
v  ~StubRoutines::call_stub 0x00007f8d88138cc6

I also have run with ""-Xlog:metaspace=trace"" and the log is attached as metaspace.log.gz

Running with ""-Xlog:redefine+class+iklass+purge=trace"" gives:

[0.705s][trace][redefine,class,iklass,purge] Class unloading: has_previous_versions = false
[0.963s][trace][redefine,class,iklass,purge] Class unloading: has_previous_versions = false
[1.425s][trace][redefine,class,iklass,purge] Class unloading: has_previous_versions = false
[1.914s][trace][redefine,class,iklass,purge] Class unloading: has_previous_versions = false
[2.318s][trace][redefine,class,iklass,purge] Class unloading: has_previous_versions = false
[2.323s][trace][redefine,class,iklass,purge] Class unloading: has_previous_versions = false


",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8316658,,,,,,,,,"2023-05-24 02:25;jpbempel;metaspace.log.gz;https://bugs.openjdk.org/secure/attachment/103966/metaspace.log.gz","2023-05-24 08:22;jpbempel;redefine_leak.log.gz;https://bugs.openjdk.org/secure/attachment/103979/redefine_leak.log.gz","2023-05-24 08:22;jpbempel;redefine_noleak.log.gz;https://bugs.openjdk.org/secure/attachment/103978/redefine_noleak.log.gz",,,,,generic,,,,,,,,,generic,,,,,,"0|i31nf7:",9223372036854775807,b17,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@661b156a,,,,,,,,,"2023-05-24 08:25;jpbempel;I have added attachments 
 - redefine_leak.log.gz which give us the output for ""-Xlog:redefine*"" when there is a leak
 - redefine_noleak.log.gz which ive us the output for ""-Xlog:redefine*"" when there is NO leak

the summary is that at the end of the redefine_leak.log:
[2.565s][info][redefine,class,constantpool] old_cp_len=3871, scratch_cp_len=3871
[2.566s][info][redefine,class,constantpool] merge_cp_len=3873, index_map_len=2
[2.566s][info][redefine,class,load        ] redefined name=MyClass, count=1920 (avail_mem=2193668K)
[2.566s][info][redefine,class,update      ] adjust: name=MyClass
[2.567s][info][redefine,class,timer       ] vm_op: all=1  prologue=1  doit=0
[2.567s][info][redefine,class,timer       ] redefine_single_class: phase1=0  phase2=0
[2.567s][info][redefine,class,constantpool] old_cp_len=3873, scratch_cp_len=3873
[2.568s][info][redefine,class,constantpool] merge_cp_len=3875, index_map_len=2
[2.575s][info][redefine,class,load        ] redefined name=MyClass, count=1921 (avail_mem=2192912K)
[2.575s][info][redefine,class,update      ] adjust: name=MyClass
[2.576s][info][redefine,class,timer       ] vm_op: all=8  prologue=7  doit=1
[2.576s][info][redefine,class,timer       ] redefine_single_class: phase1=0  phase2=0
[2.585s][info][redefine,class,load,exceptions] merge_cp_and_rewrite exception: 'java/lang/OutOfMemoryError'

showing that cp_len is linearly increasing by 2 for each Redefine operation.

;;;","2023-05-24 08:48;jpbempel;And here with ""-Xlog:redefine+class+constantpool"": 

[0.084s][info][redefine,class,constantpool] old_cp_len=33, scratch_cp_len=33
[0.084s][debug][redefine,class,constantpool] after pass 0: merge_cp_len=33
[0.084s][trace][redefine,class,constantpool] mapped tag 7 at index 13 to 33
[0.084s][trace][redefine,class,constantpool] Methodref entry@34 class_index changed: 13 to 33
[0.084s][trace][redefine,class,constantpool] mapped tag 10 at index 18 to 34
[0.084s][debug][redefine,class,constantpool] after pass 1a: merge_cp_len=35, scratch_i=33, index_map_len=2
[0.084s][info ][redefine,class,constantpool] merge_cp_len=35, index_map_len=2
[0.084s][trace][redefine,class,constantpool] index_map[0]: old=13 new=33
[0.084s][trace][redefine,class,constantpool] index_map[1]: old=18 new=34
[0.084s][trace][redefine,class,constantpool] invokevirtual@0x00007fad3c406242 old=18, new=34
[0.084s][trace][redefine,class,constantpool] ext-klass_index change: 13 to 33
[0.084s][trace][redefine,class,constantpool] ext-klass_index change: 13 to 33
[0.085s][info ][redefine,class,constantpool] old_cp_len=35, scratch_cp_len=35
[0.085s][debug][redefine,class,constantpool] after pass 0: merge_cp_len=35
[0.085s][trace][redefine,class,constantpool] mapped tag 7 at index 33 to 35
[0.085s][trace][redefine,class,constantpool] Methodref entry@36 class_index changed: 33 to 35
[0.085s][trace][redefine,class,constantpool] mapped tag 10 at index 34 to 36
[0.085s][debug][redefine,class,constantpool] after pass 1a: merge_cp_len=37, scratch_i=35, index_map_len=2
[0.085s][info ][redefine,class,constantpool] merge_cp_len=37, index_map_len=2
[0.085s][trace][redefine,class,constantpool] index_map[0]: old=33 new=35
[0.085s][trace][redefine,class,constantpool] index_map[1]: old=34 new=36
[0.085s][trace][redefine,class,constantpool] invokevirtual@0x00007fad3c405d72 old=34, new=36
[0.085s][trace][redefine,class,constantpool] ext-klass_index change: 33 to 35
[0.085s][trace][redefine,class,constantpool] ext-klass_index change: 33 to 35
;;;","2023-05-24 11:10;stuefe;Not a leak. This is just the price we pay for using an arena allocator like Metaspace.

This scenario exposes Metaspace to a lot of random arbitrary deallocation and allocation from the same arena. But metaspace is geared toward bulk deallocation. It can deal with random deallocation, but that is not its forte, and it has limits, as this case shows. We see here that internal fragmentation is building up, and that re-allocating previously deallocated blocks is not done in a particularly smart manner.

Metaspace keeps deallocated blocks in a structure: small blocks in a bin list, and large blocks in a binary tree. It does not fuse adjacent blocks, nor is it especially sophisticated when looking for free blocks. That is a deliberate tradeoff since this is an outlier scenario. We prefer fast allocation + fast bulk deallocation + little fragmentation for the default case, where metadata gets released when the loader is unloaded.

We may tweak some things, but a certain amount of loss is unavoidable. Even a general purpose allocator like libc malloc+free, that is geared toward random allocation and deallocation, would accrue fragmentation in a case like this and probably suffer from rising memory footprint.

Lets see if we can cook up some mitigation.;;;","2023-05-24 12:28;jpbempel;I have even reduced the reproducer to the following tiniest:

class MyClass {
    private static void writeFile() {
        try {
            int i = 42;
        } catch (Throwable var4) {
            var4.printStackTrace();
        }
    }
}

what is important is to have a call with the Throwable var4 (otherwise there is not entry in the constant pool, and even more weird, if we switch Throwable to Exception in the catch, no leak!;;;","2023-05-24 12:34;jpbempel;@Thomas, I see your point totally understandable, I have no problem with that.
But here we have 2 different behaviors for the merge constant pool during the redefine operation, for no apparent reason. No ClassFileTransformer and no bytecode rewrite are done, this is the exact same class that we redefine. 
Here just changing the type of a catch clause trigger a remapping of the constant pool or not and worse than that, the constantpool seems to be growing forever for each new version of the class (which may also trigger the bad beahvior for the Metaspace allocator which you describe above).
;;;","2023-05-25 00:43;dholmes;>  if we switch Throwable to Exception in the catch, no leak! 

Bizarre!;;;","2023-05-25 13:28;jpbempel;Here my status of my investigation so far:

Here the constant pool of MyClass when we are using Throwable (so with a ""leak"")

Constant pool:
   #1 = Methodref          #2.#3          // java/lang/Object.""<init>"":()V
   #2 = Class              #4             // java/lang/Object
   #3 = NameAndType        #5:#6          // ""<init>"":()V
   #4 = Utf8               java/lang/Object
   #5 = Utf8               <init>
   #6 = Utf8               ()V
   #7 = Class              #8             // java/lang/Throwable
   #8 = Utf8               java/lang/Throwable
   #9 = Methodref          #7.#10         // java/lang/Throwable.printStackTrace:()V
  #10 = NameAndType        #11:#6         // printStackTrace:()V
  #11 = Utf8               printStackTrace
  #12 = Class              #13            // MyClass
  #13 = Utf8               MyClass
  #14 = Utf8               Code
  #15 = Utf8               LineNumberTable
  #16 = Utf8               writeFile
  #17 = Utf8               StackMapTable
  #18 = Utf8               SourceFile
  #19 = Utf8               RetransformLeak.java

The constant pool entry #7 is a class and during the redefine operation merge_constant_pools method expect to have a JVM_CONSTANT_UnresolvedClass tag value for both old constant pool and the merged one.
But in the case where Throwable is used, the constant pool entry is resolved and having the tag 7 (JVM_CONSTANT_Class) while for Exception, the entry tag is 100 (JVM_CONSTANT_UnresolvedClass). 
As the entries differ, we are searching for the entry elsewhere and ending to create new entry for it the dependent entries like Methodref.
So we increasing the size of the constant pool then for each Redefine operation leading to filling up the metaspace.

My question is why and how Throwable is already resolved in the cp entry while any other class stay unresolved as expected? I expect a special treatment for this class.

Fix could be to handle already resolved class the same way than unresolved one.

;;;","2023-05-25 18:58;dholmes;The verifier pre-resolves Throwable in ClassVerifier::verify_exception_handler_table

VerificationType throwable =
        VerificationType::reference_type(vmSymbols::java_lang_Throwable());
      // If the catch type is Throwable pre-resolve it now as the assignable check won't
      // do that, and we need to avoid a runtime resolution in case we are trying to
      // catch OutOfMemoryError.
      if (cp->klass_name_at(catch_type_index) == vmSymbols::java_lang_Throwable()) {
        cp->klass_at(catch_type_index, CHECK);
      }


Then in VM_RedefineClasses::merge_constant_pools it states:

    // Pass 0:
    // The old_cp is copied to *merge_cp_p; this means that any code
    // using old_cp does not have to change. This work looks like a
    // perfect fit for ConstantPool*::copy_cp_to(), but we need to
    // handle one special case:
    // - revert JVM_CONSTANT_Class to JVM_CONSTANT_UnresolvedClass
    // This will make verification happy.

So now we understand the ""why"" of this problem. The question is, can we do anything about it? Can we perhaps also special-case Throwable during the cp merge?;;;","2023-06-06 23:27;stuefe;I'm swamped atm, and won't have time to look at this. Since this is not directly Metaspace related, but more to the way we redefine classes, I'll unassign myself.;;;","2023-06-07 05:47;jpbempel;Working on a fix...;;;","2023-06-07 05:59;coleenp;I'm also swamped but will look at your fix when you have it, if it's a simple case of accepting JVM_CONSTANT_UnresolvedClass == JVM_CONSTANT_Class and not needing a new entry.  That seems promising.  When I saw this initially, I thought there's nothing that can be done about merging constant pools.  They will continue to increase with many redefinitions.;;;","2023-06-07 06:38;jpbempel;Actually my fix prototype (that is working) is 
- copy/paste method VM_RedefineClasses::is_unresolved_class_mismatch from prims/jvmtiRedefineClasses.cpp to oops/constantPool.cpp
and in the method ConstantPool::compare_entry_to for 

  case JVM_CONSTANT_Fieldref:
  case JVM_CONSTANT_InterfaceMethodref:
  case JVM_CONSTANT_Methodref:
  {
    int recur1 = uncached_klass_ref_index_at(index1);
    int recur2 = cp2->uncached_klass_ref_index_at(index2);
    bool match = compare_entry_to(recur1, cp2, recur2);
    // fix start here
    constantPoolHandle cp(JavaThread::current(), this);
    match |= is_unresolved_class_mismatch(cp, recur1, cp2, recur2);
    // fix end dhere
    if (match) {
      recur1 = uncached_name_and_type_ref_index_at(index1);
      recur2 = cp2->uncached_name_and_type_ref_index_at(index2);
      if (compare_entry_to(recur1, cp2, recur2)) {
        return true;
      }
    }
  } break;

;;;","2023-07-05 22:23;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/14780
Date: 2023-07-06 05:18:01 +0000;;;","2023-09-20 22:19;dukebot;Changeset: df4a25b4
Author:    Jean-Philippe Bempel <jpbempel@openjdk.org>
Committer: David Holmes <dholmes@openjdk.org>
Date:      2023-09-21 05:16:07 +0000
URL:       https://git.openjdk.org/jdk/commit/df4a25b41c7f339cd077e072aa0fd3604ed809f5
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
New test TestHFA needs adaptation for JDK-8308276,JDK-8308761,5101696,Bug,Closed,JDK,JDK,software,duke,,,P2,Fixed,mdoerr,mdoerr,mdoerr,2023-05-24 02:12,2023-07-18 09:13,2023-10-01 09:55,2023-05-24 06:48,21,,,,,,21,core-libs,,0,noreg-build,tier1,tier4,,,,,,,,,,,"JDK-8303040 has introduced the new TestHFA. It requires an adaptation for JDK-8308276.

We currently get:
TestHFA.java:53: error: cannot find symbol
    static final OfFloat FLOAT = JAVA_FLOAT.withBitAlignment(32);
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8303040,JDK-8308276,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i31nez:",9223372036854775807,b25,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@28ce6b78,,,,,,,Verified,,"2023-05-24 02:22;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/14116
Date: 2023-05-24 09:16:46 +0000;;;","2023-05-24 06:48;dukebot;Changeset: 7764f46e
Author:    Martin Doerr <mdoerr@openjdk.org>
Date:      2023-05-24 13:45:57 +0000
URL:       https://git.openjdk.org/jdk/commit/7764f46e9e3a46e39419ce35aaca8efdb3669872
;;;","2023-05-24 07:05;dcubed;The fix for the following bug:

JDK-8308276 Change layout API to work with bytes, not bits

was integrated in jdk-21+24-2051 at 2023-05-22 14:57:00 +0000

The fix for the following bug:

JDK-8303040 linux PPC64le: Implementation of Foreign Function & Memory API (Preview)

was integrated in jdk-21+24-2090 at 2023-05-24 08:38:34 +0000.

I'm guessing that the PR for JDK-8303040 was not re-based since 2023-05-22 14:57:00 +0000
and that GHA testing did not show all these Tier1 failures that we see with java/foreign/TestHFA.java.;;;","2023-05-24 07:07;dcubed;Tier1 build failure in a new test means this is a P2 and not a P4.
Normally we don't change priorities after a fix has been integrated,
but this is a special case since it broke Mach5 in Tier1.;;;","2023-05-24 07:11;dcubed;The fix for this bug is integrated in jdk-21+24-2096.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
[lworld] compiler/ciReplay/TestInliningProtectionDomain.java fails because CDS is disabled,JDK-8308756,5101689,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,thartmann,dsimms,dsimms,2023-05-24 01:48,2023-06-02 06:18,2023-10-01 09:55,2023-06-02 06:18,repo-valhalla,,,,,,repo-valhalla,hotspot,,0,lw4,lworld,,,,,,,,,,,,"XX:CompileCommand=option,compiler.ciReplay.ProtectionDomainTestCompiledBefore::test,bool,PrintInlining,true]: expected 1 to equal 0
	at jdk.test.lib.Asserts.fail(Asserts.java:594)
	at jdk.test.lib.Asserts.assertEquals(Asserts.java:205)
	at jdk.test.lib.Asserts.assertEQ(Asserts.java:178)
	at compiler.ciReplay.CiReplayBase.positiveTest(CiReplayBase.java:271)
	at compiler.ciReplay.TestInliningProtectionDomain.testAction(TestInliningProtectionDomain.java:60)
	at compiler.ciReplay.DumpReplayBase.runTest(DumpReplayBase.java:54)
	at compiler.ciReplay.InliningBase.runTest(InliningBase.java:54)
	at compiler.ciReplay.TestInliningProtectionDomain.<init>(TestInliningProtectionDomain.java:55)
	at compiler.ciReplay.TestInliningProtectionDomain.main(TestInliningProtectionDomain.java:43)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
	at java.base/java.lang.reflect.Method.invoke(Method.java:580)
	at com.sun.javatest.regtest.agent.MainActionHelper$AgentVMRunnable.run(MainActionHelper.java:312)
	at java.base/java.lang.Thread.run(Thread.java:1623)",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8301007,JDK-8277301,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i31ndf:",9223372036854775807,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2023-06-02 05:37;thartmann;I added -XX:-InlineTypeReturnedAsFields as a temporary workaround with JDK-8301007 until JDK-8284443 is fixed but that disables CDS because of a flag mismatch (see JDK-8272290). The test now fails due to mainline issue JDK-8277301 which we seem to reliably trigger after the recent merge.;;;","2023-06-02 05:41;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/valhalla/pull/856
Date: 2023-06-02 12:36:27 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Generational ZGC: Avoid final marking through stack chunks,JDK-8308752,5101685,Bug,Closed,JDK,JDK,software,duke,,,P2,Fixed,eosterlund,chagedorn,chagedorn,2023-05-24 00:59,2023-07-18 11:51,2023-10-01 09:55,2023-06-01 23:56,21,,,,,,21,hotspot,,0,genzgc,test-bigapps-Kitchensink,,,,,,,,,,,,"Found this in a personal run on Mach5 with ZGC which seems to be unrelated to my changes:

#
# A fatal error has been detected by the Java Runtime Environment:
#
#  Internal Error (c:\sb\prod\1684909938\workspace\open\src\hotspot\share\gc\z\zMark.cpp:330), pid=76628, tid=44564
#  assert(!finalizable) failed: Can't handle finalizable marking of nmethods
#
# JRE version: Java(TM) SE Runtime Environment (21.0) (fastdebug build 21-internal-LTS-2023-05-24-0630532.christian.hagedorn.jdk-test)
# Java VM: Java HotSpot(TM) 64-Bit Server VM (fastdebug 21-internal-LTS-2023-05-24-0630532.christian.hagedorn.jdk-test, mixed mode, sharing, tiered, compressed class ptrs, z gc, windows-amd64)

Current thread (0x00000225e457f7a0):  WorkerThread ""ZWorkerOld#2""   [id=44564, stack(0x00000035fab00000,0x00000035fac00000) (1024K)]

Stack: [0x00000035fab00000,0x00000035fac00000]
Native frames: (J=compiled Java code, j=interpreted, Vv=VM code, C=native code)
V  [jvm.dll+0xc56141]  os::win32::platform_print_native_stack+0xf1  (os_windows_x86.cpp:236)
V  [jvm.dll+0xee5f77]  VMError::report+0x1467  (vmError.cpp:966)
V  [jvm.dll+0xee82b5]  VMError::report_and_die+0x645  (vmError.cpp:1758)
V  [jvm.dll+0xee89c4]  VMError::report_and_die+0x64  (vmError.cpp:1523)
V  [jvm.dll+0x550fcb]  report_vm_error+0x5b  (debug.cpp:191)
V  [jvm.dll+0xfb7c5a]  ZMarkBarrierFollowOopClosure<1,2>::do_nmethod+0x6a  (zMark.cpp:330)
V  [jvm.dll+0x79e515]  stackChunkOopDesc::iterate_stack<0,OopIterateStackChunkFrameClosure>+0x145  (stackChunkOop.inline.hpp:232)
V  [jvm.dll+0x79fadb]  InstanceStackChunkKlass::oop_oop_iterate_stack_slow+0xab  (instanceStackChunkKlass.cpp:158)
V  [jvm.dll+0xfb6f43]  InstanceStackChunkKlass::oop_oop_iterate_stack<oop,ZMarkBarrierFollowOopClosure<1,1> >+0x303  (instanceStackChunkKlass.inline.hpp:135)
V  [jvm.dll+0xfb18cf]  InstanceStackChunkKlass::oop_oop_iterate<oop,ZMarkBarrierFollowOopClosure<1,1> >+0xdf  (instanceStackChunkKlass.inline.hpp:67)
V  [jvm.dll+0xfb096b]  OopOopIterateDispatch<ZMarkBarrierFollowOopClosure<1,1> >::Table::oop_oop_iterate<InstanceStackChunkKlass,oop>+0x5b  (iterator.inline.hpp:111)
V  [jvm.dll+0xfae04b]  OopOopIterateDispatch<ZMarkBarrierFollowOopClosure<1,1> >::Table::init<InstanceStackChunkKlass>+0xcb  (iterator.inline.hpp:115)
V  [jvm.dll+0xfaef71]  ZIterator::oop_iterate<ZMarkBarrierFollowOopClosure<1,1> >+0x1f1  (zIterator.inline.hpp:55)
V  [jvm.dll+0xfb96ca]  ZMark::mark_and_follow+0x3fa  (zMark.cpp:457)
V  [jvm.dll+0xfb8e48]  ZMark::follow_work+0x1d8  (zMark.cpp:661)
V  [jvm.dll+0xfbb5af]  ZMarkTask::work+0x1f  (zMark.cpp:935)
V  [jvm.dll+0xf30567]  WorkerThread::run+0x97  (workerThread.cpp:196)
V  [jvm.dll+0xe569cd]  Thread::call_run+0x1cd  (thread.cpp:222)
V  [jvm.dll+0xc54aa2]  os::win32::thread_native_entry+0xa2  (os_windows.cpp:551)
C  [ucrtbase.dll+0x26b4c]
C  [KERNEL32.DLL+0x14dd0]
C  [ntdll.dll+0x7e3db]


",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"2023-05-24 01:01;chagedorn;hs_err_pid76628.log;https://bugs.openjdk.org/secure/attachment/103965/hs_err_pid76628.log",,,,,,,,,,,,,,,,,,,,,,"0|i31ncj:",9223372036854775807,b26,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6b00f96c,,,,,,,Not verified,,"2023-05-29 08:36;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/14204
Date: 2023-05-29 15:31:02 +0000;;;","2023-06-01 23:56;dukebot;Changeset: 8f1ce789
Author:    Erik Österlund <eosterlund@openjdk.org>
Date:      2023-06-02 06:54:20 +0000
URL:       https://git.openjdk.org/jdk/commit/8f1ce78907f2765ac59aef23f25201353355e046
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
C2 failed: regular loops only (counted loop inside infinite loop),JDK-8308749,5101682,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,epeter,epeter,epeter,2023-05-24 00:21,2023-06-14 23:43,2023-10-01 09:55,2023-06-12 00:41,11,17,19,20,21,8,22,hotspot,,0,c2,oracle-triage-21,,,,,,,,,,,,"Found this with my jasm fuzzer.


java -jar ~/Documents/asmtools-7.0-build/release/lib/asmtools.jar jasm Y.jasm
/home/emanuel/Documents/fork7-jdk/build/linux-x64-debug/jdk/bin/java -Xcomp -XX:CompileCommand=compileonly,Y::test -XX:-TieredCompilation  -XX:PerMethodTrapLimit=0 Y

With Y.class:
$ java -Xcomp -XX:CompileCommand=compileonly,Y::test -XX:-TieredCompilation  -XX:PerMethodTrapLimit=0 Y

#  Internal Error (/home/emanuel/Documents/fork7-jdk/open/src/hotspot/share/opto/loopnode.cpp:1748), pid=412841, tid=412854
#  assert(x->Opcode() == Op_Loop || x->Opcode() == Op_LongCountedLoop) failed: regular loops only
#
# JRE version: Java(TM) SE Runtime Environment (21.0) (fastdebug build 21-internal-LTS-2023-05-23-0419418.emanuel...)
# Java VM: Java HotSpot(TM) 64-Bit Server VM (fastdebug 21-internal-LTS-2023-05-23-0419418.emanuel..., compiled mode, compressed oops, compressed class ptrs, g1 gc, linux-amd64)
# Problematic frame:
# V  [libjvm.so+0x128fbb2]  PhaseIdealLoop::is_counted_loop(Node*, IdealLoopTree*&, BasicType)+0x3082


The ""x"" in question is this:
85  Region  === 85 76 101  [[ 85 92 96 88 ]] #reducible  !jvms: Y::test @ bci:6

I suspect something has to do with infinite loops, I see a NeverBranch above the region. Maybe the region has not been converted to a LoopNode yet because of the infinite loop?

(rr) p x->dump_bfs(100,0,""#c"")
dist dump
---------------------------------------------
  13    0  Root  === 0 116  [[ 0 1 3 25 36 40 41 ]] 
  12   62  IfTrue  === 61  [[ 117 ]] #1 !jvms: Y::test @ bci:41
  12   50  IfFalse  === 48  [[ 117 ]] #0 !jvms: Y::test @ bci:35
  12    3  Start  === 3 0  [[ 3 5 10 7 115 ]]  #{0:control, 1:abIO, 2:memory, 3:rawptr:BotPTR, 4:return_address, 5:int, 6:int, 7:java/lang/Object *, 8:java/lang/Object *}
  11  117  Region  === 117 50 62  [[ 117 119 118 ]]  !orig=[30] !jvms: Y::test @ bci:26
  11    5  Parm  === 3  [[ 119 ]] Control !jvms: Y::test @ bci:-1
  10  119  Loop  === 119 5 117  [[ 119 33 43 38 ]] inner  !orig=[30] !jvms: Y::test @ bci:26
   9   38  SafePoint  === 119 1 7 1 1 43 10 1 1 1 1 37 1 1 1 1 25 37  [[ 48 ]]  SafePoint  !jvms: Y::test @ bci:35
   8   48  If  === 38 47  [[ 49 50 ]] P=0.100000, C=-1.000000 !jvms: Y::test @ bci:35
   7   49  IfTrue  === 48  [[ 61 ]] #1 !orig=54 !jvms: Y::test @ bci:35
   6   61  If  === 49 60  [[ 62 63 ]] P=0.900000, C=-1.000000 !jvms: Y::test @ bci:41
   5   63  IfFalse  === 61  [[ 70 ]] #0 !jvms: Y::test @ bci:41
   5  100  IfTrue  === 99  [[ 70 ]] #1 !jvms: Y::test @ bci:15
   4   70  Region  === 70 100 63  [[ 70 112 80 73 ]] #reducible  !jvms: Y::test @ bci:44
   3   92  SafePoint  === 85 1 7 1 1 96 91 1 1 1 1 1 1 1 1 1 91 25  [[ 99 ]]  SafePoint  !jvms: Y::test @ bci:15
   3  112  NeverBranch  === 70  [[ 113 114 ]] 
   2   99  If  === 92 98  [[ 100 101 ]] P=0.100000, C=-1.000000 !jvms: Y::test @ bci:15
   2  113  CProj  === 112  [[ 76 ]] #0
   1  101  IfFalse  === 99  [[ 85 ]] #0 !jvms: Y::test @ bci:15
   1   76  SafePoint  === 113 1 7 1 1 80 73 1 1 1 1 1 1 1 1 1  [[ 85 ]]  SafePoint  !jvms: Y::test @ bci:44
   0   85  Region  === 85 76 101  [[ 85 92 96 88 ]] #reducible  !jvms: Y::test @ bci:6


Stack: [0x00007f48d00c4000,0x00007f48d01c4000],  sp=0x00007f48d01bde60,  free space=999k
Native frames: (J=compiled Java code, j=interpreted, Vv=VM code, C=native code)
V  [libjvm.so+0x128f5a2]  PhaseIdealLoop::is_counted_loop(Node*, IdealLoopTree*&, BasicType)+0x3082  (loopnode.cpp:1748)
V  [libjvm.so+0x128f640]  IdealLoopTree::counted_loop(PhaseIdealLoop*)+0x40
V  [libjvm.so+0x128f6b2]  IdealLoopTree::counted_loop(PhaseIdealLoop*)+0xb2
V  [libjvm.so+0x128f6b2]  IdealLoopTree::counted_loop(PhaseIdealLoop*)+0xb2
V  [libjvm.so+0x1295e31]  PhaseIdealLoop::build_and_optimize()+0x801
V  [libjvm.so+0x9f2c70]  PhaseIdealLoop::optimize(PhaseIterGVN&, LoopOptsMode)+0x250
V  [libjvm.so+0x9ee6fe]  Compile::Optimize()+0x56e
V  [libjvm.so+0x9f19a5]  Compile::Compile(ciEnv*, ciMethod*, int, Options, DirectiveSet*)+0x1ae5
V  [libjvm.so+0x84b8e4]  C2Compiler::compile_method(ciEnv*, ciMethod*, int, bool, DirectiveSet*)+0x3c4
V  [libjvm.so+0x9fd7a0]  CompileBroker::invoke_compiler_on_method(CompileTask*)+0xa00
V  [libjvm.so+0x9fe628]  CompileBroker::compiler_thread_loop()+0x618
V  [libjvm.so+0xeb7bac]  JavaThread::thread_main_inner()+0xcc
V  [libjvm.so+0x17953ba]  Thread::call_run()+0xba
V  [libjvm.so+0x149586c]  thread_native_entry(Thread*)+0x11c",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8299214,,,,,,,,,"2023-05-24 00:40;chagedorn;Y.class;https://bugs.openjdk.org/secure/attachment/103964/Y.class","2023-05-24 00:31;epeter;Y.jasm;https://bugs.openjdk.org/secure/attachment/103963/Y.jasm","2023-05-26 05:37;epeter;Y2.jasm;https://bugs.openjdk.org/secure/attachment/104045/Y2.jasm","2023-05-24 00:22;epeter;hs_err_pid414292.log;https://bugs.openjdk.org/secure/attachment/103961/hs_err_pid414292.log","2023-05-24 00:22;epeter;replay_pid414292.log;https://bugs.openjdk.org/secure/attachment/103962/replay_pid414292.log",,,,,,,,,,,,,,,,,,"0|i31nbv:",9223372036854775807,b02,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2023-05-24 00:43;chagedorn;ILW = Crash when creating counted loop, single fuzzer generated test, use -XX:PerMethodTrapLimit > 0; HLL = P4;;;","2023-05-26 05:37;epeter;Reduced it a bit more nicely:

java -jar ~/Documents/asmtools-7.0-build/release/lib/asmtools.jar jasm Y2.jasm
./java -Xcomp -XX:CompileCommand=compileonly,Y2::test -XX:-TieredCompilation -XX:PerMethodTrapLimit=0 Y2;;;","2023-05-30 00:52;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/14178
Date: 2023-05-26 13:45:23 +0000;;;","2023-06-12 00:41;dukebot;Changeset: 6c3e621f
Author:    Emanuel Peter <epeter@openjdk.org>
Date:      2023-06-12 07:40:58 +0000
URL:       https://git.openjdk.org/jdk/commit/6c3e621f9818fe764501e1a72c7cf8e9803da683
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
JNU_GetStringPlatformChars may write to String's internal memory array,JDK-8308748,5101680,Bug,Closed,JDK,JDK,software,duke,,,P4,Fixed,rhorn,rhorn,rhorn,2023-05-24 00:11,2023-08-28 10:37,2023-10-01 09:55,2023-06-06 05:59,17,20,21,,,,21,core-libs,,0,amazon-interest,,,,,,,,,,,,,"When calling `JNU_GetStringPlatformChars` with UTF8 strings, the `getStringUTF8` function retrieves the internal String value array and copies its contents using `GetPrimitiveArrayCritical` and `ReleasePrimitiveArrayCritical`.

Upon releasing the memory, the JNI_ABORT flag is not specified. If `GetPrimitiveArrayCritical` returns a copy of the array, then the call to `ReleasePrimitiveArrayCritical` copies the contents back.

Strings in Java are considered immutable, and I think their memory should never be written to (even if the contents aren't changed). In GraalVM they may be stored in a read-only memory section making this behaviour cause a segfault. Using `JNI_ABORT` also improves the performance of the application when a copy is returned.

I will submit a patch to add the JNI_ABORT flag to both calls of `ReleasePrimitiveArrayCritical`.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i31nbf:",9223372036854775807,b26,,,,,,,,,Not verified,,"2023-05-26 08:40;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/14117
Date: 2023-05-24 09:24:46 +0000;;;","2023-06-06 05:59;dukebot;Changeset: 8f0839bc
Author:    Rudi Horn <rudi.horn@oracle.com>
Committer: Alan Bateman <alanb@openjdk.org>
Date:      2023-06-06 12:58:24 +0000
URL:       https://git.openjdk.org/jdk/commit/8f0839bc55036a8a663a83a02d300c60e71ceb6c
;;;","2023-08-28 10:36;msheppar;This one is tricky, as there are no explicit regression tests for this change. So, it can't be explicitly verified, other than the change set is integrated and there are no observed associated failures in associated component areas. 
The change is a significant change of esoteric low level semantics for getStringUTF8,  and the change is contrary to previous perceived wisdom. So, how is it determined that there are no side effects in a JVM -- kitchen sink perhaps.
Of course big wigs have reviewed and accepted the changes ;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
C2 IR test failures for TestFpMinMaxReductions.java with SSE2,JDK-8308746,5101678,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,rcastanedalo,epeter,epeter,2023-05-23 23:58,2023-05-31 23:26,2023-10-01 09:55,2023-05-25 04:09,21,,,,,,21,hotspot,,0,c2,noreg-self,oracle-triage-21,regression,,,,,,,,,,"The test was recently added JDK-8287087

[~jbhateja] found it:
https://github.com/openjdk/jdk/pull/13493#issuecomment-1560459854

I can reproduce it like this:

make test TEST=""test/hotspot/jtreg/compiler/intrinsics/math/TestFpMinMaxReductions.java"" CONF=linux-x64-slowdebug JTREG=""RETAIN=all;JOBS=8;TIMEOUT_FACTOR=8;JAVA_OPTIONS=-XX:UseSSE=2""




See output below:

Failed IR Rules (12) of Methods (12)
------------------------------------
1) Method ""private static double compiler.intrinsics.math.TestFpMinMaxReductions.testDoubleMax()"" - [Failed IR rules: 1]:
   * @IR rule 1: ""@compiler.lib.ir_framework.IR(applyIfCPUFeatureAnd={}, phase={DEFAULT}, applyIf={}, applyIfCPUFeatureOr={}, applyIfCPUFeature={}, counts={""_#MAX_D_REG#_"", ""1""}, applyIfAnd={}, failOn={""_#MAX_D_REDUCTION_REG#_""}, applyIfOr={}, applyIfNot={})""
     > Phase ""Final Code"":
       - counts: Graph contains wrong number of nodes:
         * Constraint 1: ""(\d+(\s){2}(maxD_reg.*)+(\s){2}===.*)""
           - Failed comparison: [found] 0 = 1 [given]
           - No nodes matched!

2) Method ""private static double compiler.intrinsics.math.TestFpMinMaxReductions.testDoubleMaxReduction()"" - [Failed IR rules: 1]:
   * @IR rule 1: ""@compiler.lib.ir_framework.IR(applyIfCPUFeatureAnd={}, phase={DEFAULT}, applyIf={}, applyIfCPUFeatureOr={}, applyIfCPUFeature={}, counts={""_#MAX_D_REDUCTION_REG#_"", "">= 1""}, applyIfAnd={}, failOn={}, applyIfOr={}, applyIfNot={})""
     > Phase ""Final Code"":
       - counts: Graph contains wrong number of nodes:
         * Constraint 1: ""(\d+(\s){2}(maxD_reduction_reg.*)+(\s){2}===.*)""
           - Failed comparison: [found] 0 >= 1 [given]
           - No nodes matched!

3) Method ""private static double compiler.intrinsics.math.TestFpMinMaxReductions.testDoubleMin()"" - [Failed IR rules: 1]:
   * @IR rule 1: ""@compiler.lib.ir_framework.IR(applyIfCPUFeatureAnd={}, phase={DEFAULT}, applyIf={}, applyIfCPUFeatureOr={}, applyIfCPUFeature={}, counts={""_#MIN_D_REG#_"", ""1""}, applyIfAnd={}, failOn={""_#MIN_D_REDUCTION_REG#_""}, applyIfOr={}, applyIfNot={})""
     > Phase ""Final Code"":
       - counts: Graph contains wrong number of nodes:
         * Constraint 1: ""(\d+(\s){2}(minD_reg.*)+(\s){2}===.*)""
           - Failed comparison: [found] 0 = 1 [given]
           - No nodes matched!

4) Method ""private static double compiler.intrinsics.math.TestFpMinMaxReductions.testDoubleMinReduction()"" - [Failed IR rules: 1]:
   * @IR rule 1: ""@compiler.lib.ir_framework.IR(applyIfCPUFeatureAnd={}, phase={DEFAULT}, applyIf={}, applyIfCPUFeatureOr={}, applyIfCPUFeature={}, counts={""_#MIN_D_REDUCTION_REG#_"", "">= 1""}, applyIfAnd={}, failOn={}, applyIfOr={}, applyIfNot={})""
     > Phase ""Final Code"":
       - counts: Graph contains wrong number of nodes:
         * Constraint 1: ""(\d+(\s){2}(minD_reduction_reg.*)+(\s){2}===.*)""
           - Failed comparison: [found] 0 >= 1 [given]
           - No nodes matched!

5) Method ""private static float compiler.intrinsics.math.TestFpMinMaxReductions.testFloatMax()"" - [Failed IR rules: 1]:
   * @IR rule 1: ""@compiler.lib.ir_framework.IR(applyIfCPUFeatureAnd={}, phase={DEFAULT}, applyIf={}, applyIfCPUFeatureOr={}, applyIfCPUFeature={}, counts={""_#MAX_F_REG#_"", ""1""}, applyIfAnd={}, failOn={""_#MAX_F_REDUCTION_REG#_""}, applyIfOr={}, applyIfNot={})""
     > Phase ""Final Code"":
       - counts: Graph contains wrong number of nodes:
         * Constraint 1: ""(\d+(\s){2}(maxF_reg.*)+(\s){2}===.*)""
           - Failed comparison: [found] 0 = 1 [given]
           - No nodes matched!

6) Method ""private static float compiler.intrinsics.math.TestFpMinMaxReductions.testFloatMaxReduction()"" - [Failed IR rules: 1]:
   * @IR rule 1: ""@compiler.lib.ir_framework.IR(applyIfCPUFeatureAnd={}, phase={DEFAULT}, applyIf={}, applyIfCPUFeatureOr={}, applyIfCPUFeature={}, counts={""_#MAX_F_REDUCTION_REG#_"", "">= 1""}, applyIfAnd={}, failOn={}, applyIfOr={}, applyIfNot={})""
     > Phase ""Final Code"":
       - counts: Graph contains wrong number of nodes:
         * Constraint 1: ""(\d+(\s){2}(maxF_reduction_reg.*)+(\s){2}===.*)""
           - Failed comparison: [found] 0 >= 1 [given]
           - No nodes matched!

7) Method ""private static float compiler.intrinsics.math.TestFpMinMaxReductions.testFloatMin()"" - [Failed IR rules: 1]:
   * @IR rule 1: ""@compiler.lib.ir_framework.IR(applyIfCPUFeatureAnd={}, phase={DEFAULT}, applyIf={}, applyIfCPUFeatureOr={}, applyIfCPUFeature={}, counts={""_#MIN_F_REG#_"", ""1""}, applyIfAnd={}, failOn={""_#MIN_F_REDUCTION_REG#_""}, applyIfOr={}, applyIfNot={})""
     > Phase ""Final Code"":
       - counts: Graph contains wrong number of nodes:
         * Constraint 1: ""(\d+(\s){2}(minF_reg.*)+(\s){2}===.*)""
           - Failed comparison: [found] 0 = 1 [given]
           - No nodes matched!

8) Method ""private static float compiler.intrinsics.math.TestFpMinMaxReductions.testFloatMinReduction()"" - [Failed IR rules: 1]:
   * @IR rule 1: ""@compiler.lib.ir_framework.IR(applyIfCPUFeatureAnd={}, phase={DEFAULT}, applyIf={}, applyIfCPUFeatureOr={}, applyIfCPUFeature={}, counts={""_#MIN_F_REDUCTION_REG#_"", "">= 1""}, applyIfAnd={}, failOn={}, applyIfOr={}, applyIfNot={})""
     > Phase ""Final Code"":
       - counts: Graph contains wrong number of nodes:
         * Constraint 1: ""(\d+(\s){2}(minF_reduction_reg.*)+(\s){2}===.*)""
           - Failed comparison: [found] 0 >= 1 [given]
           - No nodes matched!

9) Method ""private static float compiler.intrinsics.math.TestFpMinMaxReductions.testFloatMinReductionGlobalAccumulator()"" - [Failed IR rules: 1]:
   * @IR rule 1: ""@compiler.lib.ir_framework.IR(applyIfCPUFeatureAnd={}, phase={DEFAULT}, applyIf={}, applyIfCPUFeatureOr={}, applyIfCPUFeature={}, counts={""_#MIN_F_REDUCTION_REG#_"", "">= 1""}, applyIfAnd={}, failOn={}, applyIfOr={}, applyIfNot={})""
     > Phase ""Final Code"":
       - counts: Graph contains wrong number of nodes:
         * Constraint 1: ""(\d+(\s){2}(minF_reduction_reg.*)+(\s){2}===.*)""
           - Failed comparison: [found] 0 >= 1 [given]
           - No nodes matched!

10) Method ""private static float compiler.intrinsics.math.TestFpMinMaxReductions.testFloatMinReductionInOuterLoop()"" - [Failed IR rules: 1]:
    * @IR rule 1: ""@compiler.lib.ir_framework.IR(applyIfCPUFeatureAnd={}, phase={DEFAULT}, applyIf={}, applyIfCPUFeatureOr={}, applyIfCPUFeature={}, counts={""_#MIN_F_REDUCTION_REG#_"", "">= 1""}, applyIfAnd={}, failOn={}, applyIfOr={}, applyIfNot={})""
      > Phase ""Final Code"":
        - counts: Graph contains wrong number of nodes:
          * Constraint 1: ""(\d+(\s){2}(minF_reduction_reg.*)+(\s){2}===.*)""
            - Failed comparison: [found] 0 >= 1 [given]
            - No nodes matched!

11) Method ""private static float compiler.intrinsics.math.TestFpMinMaxReductions.testFloatMinReductionNonCounted()"" - [Failed IR rules: 1]:
    * @IR rule 1: ""@compiler.lib.ir_framework.IR(applyIfCPUFeatureAnd={}, phase={DEFAULT}, applyIf={}, applyIfCPUFeatureOr={}, applyIfCPUFeature={}, counts={""_#MIN_F_REDUCTION_REG#_"", "">= 1""}, applyIfAnd={}, failOn={}, applyIfOr={}, applyIfNot={})""
      > Phase ""Final Code"":
        - counts: Graph contains wrong number of nodes:
          * Constraint 1: ""(\d+(\s){2}(minF_reduction_reg.*)+(\s){2}===.*)""
            - Failed comparison: [found] 0 >= 1 [given]
            - No nodes matched!

12) Method ""private static float compiler.intrinsics.math.TestFpMinMaxReductions.testFloatMinReductionPartiallyUnrolled()"" - [Failed IR rules: 1]:
    * @IR rule 1: ""@compiler.lib.ir_framework.IR(applyIfCPUFeatureAnd={}, phase={DEFAULT}, applyIf={}, applyIfCPUFeatureOr={}, applyIfCPUFeature={}, counts={""_#MIN_F_REDUCTION_REG#_"", "">= 1""}, applyIfAnd={}, failOn={}, applyIfOr={}, applyIfNot={})""
      > Phase ""Final Code"":
        - counts: Graph contains wrong number of nodes:
          * Constraint 1: ""(\d+(\s){2}(minF_reduction_reg.*)+(\s){2}===.*)""
            - Failed comparison: [found] 0 >= 1 [given]
            - No nodes matched!",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8287087,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i31naz:",9223372036854775807,b25,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2023-05-24 00:37;chagedorn;ILW = IR test failure with SSE < 4, single test, use SSE = 4; MLM = P4;;;","2023-05-25 02:35;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/14141
Date: 2023-05-25 07:04:54 +0000;;;","2023-05-25 04:09;dukebot;Changeset: 5a0a238f
Author:    Roberto Castañeda Lozano <rcastanedalo@openjdk.org>
Date:      2023-05-25 11:07:10 +0000
URL:       https://git.openjdk.org/jdk/commit/5a0a238f67ae2a7757611881c5c713149cefe3c0
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Typos in parameter names,JDK-8308735,5101663,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,prappo,prappo,prappo,2023-05-23 16:49,2023-05-31 23:26,2023-10-01 09:55,2023-05-25 03:23,21,,,,,,21,core-libs,,0,,,,,,,,,,,,,,"This combination of a method name (minus) and parameter name (amountToAdd) looks suspicious:

 * public JapaneseDate minus(long amountToAdd, TemporalUnit unit)
 * public MinguoDate minus(long amountToAdd, TemporalUnit unit)
 * public ThaiBuddhistDate minus(long amountToAdd, TemporalUnit unit)",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i31n7n:",9223372036854775807,b25,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@a9a7756,,,,,,,,,"2023-05-24 06:44;rriggs;These are overridden methods, the Interface Temporal correctly names them amountToSubtract.
Note that these names do not show up in javadoc and the impact is local a limited to each method.;;;","2023-05-24 08:04;prappo;Roger, you are right when saying that the API Documentation picks up the correct parameter names from the overridden interface methods. I wouldn't have noticed those typos myself had I not been comparing API Documentation before and after an unrelated change. So, for now all is good.

That said, that discrepancy made me pause and think. To what degree should we care about parameter names? Consider this:

  * A documentation comment may refer to parameter names (if only informally) and, when inherited, might read odd.
  * IDEs might display signature help for the _overriding_ method, not the _overridden_ method. 
  * Currently, whose parameters are picked up is at the mercy of the doc comment and javadoc configuration. Overriding parameters are not picked up because the override is deemed simple (i.e. it does not change the doc comment or the method signature in any way) and javadoc is configured to only provide summaries for such method. If any of this ever changes, the parameter names _with the typos_ will be picked up instead.

Separately, should we consider some sort of JavaDoc linting for this sort of issues?;;;","2023-05-24 08:30;rriggs;Parameter names show up in debuggers so it might be puzzling to see these particular typos in that context.
Its a low impact and low probability case; an optional lint check might be useful for I could not say how valuable.;;;","2023-05-24 16:19;prappo;In fact, those methods DO show up in API Documentation. For example, see: https://docs.oracle.com/en/java/javase/20/docs/api/java.base/java/time/chrono/MinguoDate.html#minus(long,java.time.temporal.TemporalUnit)

I was initially confused: those overrides show up (probably) because of the covariant return, which makes them non-simple overrides.;;;","2023-05-24 16:38;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/14136
Date: 2023-05-24 23:32:18 +0000;;;","2023-05-25 03:23;dukebot;Changeset: 38367d3c
Author:    Pavel Rappo <prappo@openjdk.org>
Date:      2023-05-25 10:22:41 +0000
URL:       https://git.openjdk.org/jdk/commit/38367d3c3ad9292b7c581917c89e9f07fac3dd31
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Compiler should accept final unnamed variables in try-with-resources,JDK-8308727,5101655,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,abimpoudis,eananeva,eananeva,2023-05-23 15:47,2023-05-31 23:25,2023-10-01 09:55,2023-05-25 01:11,,,,,,,21,tools,,0,conformance,,,,,,,,,,,,,"Spec (https://cr.openjdk.org/~abimpoudis/unnamed/jep443-20230322/specs/unnamed-jls.html#jls-14.20.3) says:
Alternatively, the meaning of a basic try-with-resources statement of the form:

try ({VariableModifier} R _ = Expression ...)
    Block

is given by the following translation to a local variable declaration and a try-catch-finally statement:

{
    final {VariableModifierNoFinal} R #i = Expression;
    Throwable #primaryExc = null;

    try ResourceSpecification_tail
        Block
    catch (Throwable #t) {
        #primaryExc = #t;
        throw #t;
    } finally {
        if (#i != null) {
            if (#primaryExc != null) {
                try {
                    #i.close();
                } catch (Throwable #suppressedExc) {
                    #primaryExc.addSuppressed(#suppressedExc);
                }
            } else {
                #i.close();
            }
        }
    }
}

{VariableModifierNoFinal} is defined as {VariableModifier} without final, if present. [jck-14.20.3.1-220-upv]
#t, #primaryExc, #suppressedExc, and #i are automatically generated identifiers that are distinct from any other identifiers (automatically generated or otherwise) that are in scope at the point where the try-with-resources statement occurs. [jck-14.20.3.1-230-upv]



class Door implements AutoCloseable {
    public void close() {  }
}

public class Example  {

    public static void main(String argv[]) {
        try ( final Door _ = new Door();) { //compile-time error: java: as of release 21, the underscore keyword '_' is only allowed to declare
  unnamed patterns, local variables, exception parameters or lambda parameters
        }
    }


java --version
java 21-ea 2023-09-19 LTS
Java(TM) SE Runtime Environment (build 21-ea+24-LTS-2081)
Java HotSpot(TM) 64-Bit Server VM (build 21-ea+24-LTS-2081, mixed mode, sharing)",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i31n5v:",9223372036854775807,b25,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4dca67bd,,,,,,,,,"2023-05-24 10:57;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/14130
Date: 2023-05-24 17:51:39 +0000;;;","2023-05-25 01:11;dukebot;Changeset: 4500bb7a
Author:    Aggelos Biboudis <abimpoudis@openjdk.org>
Committer: Jan Lahoda <jlahoda@openjdk.org>
Date:      2023-05-25 08:10:02 +0000
URL:       https://git.openjdk.org/jdk/commit/4500bb7a676b9208337590880cfde45f264e4baf
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Clarify reversed() default methods' implementation requirements,JDK-8308694,5101616,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,smarks,kganapureddy,kganapureddy,2023-05-23 09:43,2023-07-25 04:36,2023-10-01 09:55,2023-07-12 09:12,21,,,,,,22,core-libs,,0,conformance,hgupdate-sync,,,,,,,,,,,,"https://download.java.net/java/early_access/jdk21/docs/api/java.base/java/util/Deque.html#reversed()
""Implementation Requirements:
The implementation in this interface returns an instance of a reverse-ordered Deque that delegates its operations to this Deque.""

The phrase - ""delegates its operations to this Deque.""  one might interpret this the delegation is 'x' to 'x' ( reversedeque.addFirst() ---> deque.addFirst() )
Actual delegation is -> reversedeque.addFirst() ---> deque.addLast()

====
Similar case for  - https://download.java.net/java/early_access/jdk21/docs/api/java.base/java/util/SortedMap.html#reversed()

Similar case for  - https://download.java.net/java/early_access/jdk21/docs/api/java.base/java/util/SortedSet.html#reversed()

Do we need to clarify the spec here?",,,,,,,,,,,JDK-8311977,JDK-8312907,,,,,,,,,JDK-8280836,,JDK-8311845,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i31mx7:",9223372036854775807,b07,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@73bf8bbe,,,,,,,,,"2023-05-30 16:12;smarks;Similar cases of this wording for the default reversed() implSpec occur in Deque, List, SortedMap, and SortedSet.

Note however that the main specification of the reversed() method says ""The encounter order of elements in the returned view is the inverse of the encounter order of elements in this collection. The reverse ordering affects all order-sensitive operations, including those on the view collections of the returned view."" I think the implication is fairly clear that the reverse-ordered view delegates each of its operations to the corresponding inverse-ordered operation of this collection. I don't think there is any other reasonable interpretation.

It would probably be good to be more explicit in all of these cases, so I'll go ahead and update the specification. I don't think that should block continued test development though.
;;;","2023-05-30 23:46;kganapureddy;[~smarks] Thank you. As mentioned it would be clear to state explicitly that  - ""reverse-ordered view delegates each of its operations to the corresponding inverse-ordered operation of this collection.;;;","2023-06-15 15:43;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/14504
Date: 2023-06-15 22:38:43 +0000;;;","2023-07-12 09:12;dukebot;Changeset: f82c8184
Author:    Stuart Marks <smarks@openjdk.org>
Date:      2023-07-12 16:10:41 +0000
URL:       https://git.openjdk.org/jdk/commit/f82c8184b26142da4018ae096cfa39d87a4c6540
;;;","2023-07-12 11:28;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk21/pull/115
Date: 2023-07-12 18:21:29 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
[Lilliput/JDK17] Add missing LoadKlassStub skeletons,JDK-8308680,5101602,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,rkennke,rkennke,rkennke,2023-05-23 08:52,2023-05-24 11:48,2023-10-01 09:55,2023-05-24 11:48,repo-lilliput-17,,,,,,repo-lilliput-17,hotspot,,0,lilliput,,,,,,,,,,,,,"Arm, PPC and s390 ports are missing the skeletons for LoadKlassStub::emit_code(), which breaks those builds.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,s390x,,,,,,,,,generic,,,,,,"0|i31mu3:",9223372036854775807,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2023-05-24 10:15;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/lilliput-jdk17u/pull/26
Date: 2023-05-23 15:56:01 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
(fs) UnixPath::toRealPath needs additional permissions when running with SM (macOS),JDK-8308678,5101557,Bug,Closed,JDK,JDK,software,duke,,,P3,Fixed,bpb,webbuggrp,webbuggrp,2023-05-23 02:38,2023-07-21 07:36,2023-10-01 09:55,2023-05-31 12:41,20.0.1,,,,,,21,core-libs,,0,regression,webbug,,,,,,,,,,,,"ADDITIONAL SYSTEM INFORMATION :
MacOSX, JDK 20

A DESCRIPTION OF THE PROBLEM :
The fix addressing JDK-8295753 causes reproducible AccessControlException on the '/' folder in MacOSX. It seems the fix now requires granting full read rights to all folders on the path to a resource, something that wasn't required before. 

REGRESSION : Last worked in version 17.0.7

STEPS TO FOLLOW TO REPRODUCE THE PROBLEM :
Run provided source with enabled security manager.

EXPECTED VERSUS ACTUAL BEHAVIOR :
EXPECTED -
Hello World!
/private/tmp/hello.txt
ACTUAL -
Hello World!
Exception in thread ""main"" java.security.AccessControlException: access denied (""java.io.FilePermission"" ""/"" ""read"")

---------- BEGIN SOURCE ----------
Policy:
grant {
    permission java.io.FilePermission ""/private/tmp"", ""read,write"";
    permission java.io.FilePermission ""/private/tmp/-"", ""read,write,delete"";
};

Reproducer:
public static void main(String[] args) throws Exception {
        // Works
        Files.writeString(Paths.get(""/private/tmp/hello.txt""), ""Hello World!"");
        System.out.println(Files.readString(Paths.get(""/private/tmp/hello.txt"")));

        // Exception
        System.out.println(Paths.get(""/private/tmp/hello.txt"").toRealPath(LinkOption.NOFOLLOW_LINKS));
    }
---------- END SOURCE ----------

CUSTOMER SUBMITTED WORKAROUND :
Grant read access to all folders for a resource on the way to the root
or
Use JDK < 20
or
Don't use toRealPath.

FREQUENCY : always


",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8295753,,,,,"2023-05-23 16:41;bpb;Repro.java;https://bugs.openjdk.org/secure/attachment/103953/Repro.java",,,,,,,generic,,,,,,,,,os_x,,,,,,"0|i31mk3:",9223372036854775807,b25,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@674604a9,,,,,,,Verified,,"2023-05-23 07:39;alanb;The SecurityManager is deprecated but it still a supported operating mode so this should be fixed.;;;","2023-05-23 16:49;bpb;It is not clear that the changes for JDK-8295753 caused this problem. Those changes were almost entirely within UnixPath::toRealPath. The failing stack trace of the attached test is the following and there is no sign of UnixPath::toRealPath:

Exception in thread ""main"" java.security.AccessControlException: access denied (""java.io.FilePermission"" ""/private/tmp/hello.txt"" ""write"")
	at java.base/java.security.AccessControlContext.checkPermission(AccessControlContext.java:488)
	at java.base/java.security.AccessController.checkPermission(AccessController.java:1071)
	at java.base/java.lang.SecurityManager.checkPermission(SecurityManager.java:411)
	at java.base/java.lang.SecurityManager.checkWrite(SecurityManager.java:833)
	at java.base/sun.nio.fs.UnixChannelFactory.open(UnixChannelFactory.java:248)
	at java.base/sun.nio.fs.UnixChannelFactory.newFileChannel(UnixChannelFactory.java:133)
	at java.base/sun.nio.fs.UnixChannelFactory.newFileChannel(UnixChannelFactory.java:146)
	at java.base/sun.nio.fs.UnixFileSystemProvider.newByteChannel(UnixFileSystemProvider.java:259)
	at java.base/java.nio.file.spi.FileSystemProvider.newOutputStream(FileSystemProvider.java:482)
	at java.base/java.nio.file.Files.newOutputStream(Files.java:227)
	at java.base/java.nio.file.Files.write(Files.java:3492)
	at java.base/java.nio.file.Files.writeString(Files.java:3714)
	at java.base/java.nio.file.Files.writeString(Files.java:3654)
	at Repro.main(Repro.java:6);;;","2023-05-23 17:32;bpb;Actually it does not look like it worked, as claimed in the description, for JDK 17 either:

bpb{155}$ /Library/Java/JavaVirtualMachines/jdk-17.jdk/Contents/Home/bin/javac Repro.java 
bpb{156}$ /Library/Java/JavaVirtualMachines/jdk-17.jdk/Contents/Home/bin/java -Djava.security.manager Repro
WARNING: A command line option has enabled the Security Manager
WARNING: The Security Manager is deprecated and will be removed in a future release
Exception in thread ""main"" java.security.AccessControlException: access denied (""java.io.FilePermission"" ""/private/tmp/hello.txt"" ""write"")
	at java.base/java.security.AccessControlContext.checkPermission(AccessControlContext.java:485)
	at java.base/java.security.AccessController.checkPermission(AccessController.java:1068)
	at java.base/java.lang.SecurityManager.checkPermission(SecurityManager.java:416)
	at java.base/java.lang.SecurityManager.checkWrite(SecurityManager.java:847)
	at java.base/sun.nio.fs.UnixChannelFactory.open(UnixChannelFactory.java:248)
	at java.base/sun.nio.fs.UnixChannelFactory.newFileChannel(UnixChannelFactory.java:133)
	at java.base/sun.nio.fs.UnixChannelFactory.newFileChannel(UnixChannelFactory.java:146)
	at java.base/sun.nio.fs.UnixFileSystemProvider.newByteChannel(UnixFileSystemProvider.java:217)
	at java.base/java.nio.file.spi.FileSystemProvider.newOutputStream(FileSystemProvider.java:484)
	at java.base/java.nio.file.Files.newOutputStream(Files.java:228)
	at java.base/java.nio.file.Files.write(Files.java:3512)
	at java.base/java.nio.file.Files.writeString(Files.java:3734)
	at java.base/java.nio.file.Files.writeString(Files.java:3674)
	at Repro.main(Repro.java:6)
bpb{157}$ /Library/Java/JavaVirtualMachines/jdk-17.jdk/Contents/Home/bin/java -version
java version ""17"" 2021-09-14 LTS
Java(TM) SE Runtime Environment (build 17+35-LTS-2724)
Java HotSpot(TM) 64-Bit Server VM (build 17+35-LTS-2724, mixed mode, sharing);;;","2023-05-23 17:34;bpb;Same behavior for JDK 15 as well.;;;","2023-05-24 17:16;bpb;The problem does indeed seem to be caused by attempting to open a DirectoryStream on ""/"" when permissions disallow it.;;;","2023-05-25 10:17;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/14157
Date: 2023-05-25 17:08:39 +0000;;;","2023-05-31 12:41;dukebot;Changeset: 8dbd3840
Author:    Brian Burkhalter <bpb@openjdk.org>
Date:      2023-05-31 19:40:23 +0000
URL:       https://git.openjdk.org/jdk/commit/8dbd3840039dfe962b8fda0e4fa2b2d53068fb5e
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Add version number in the replay file generated by DumpInline,JDK-8308672,5101594,Bug,Resolved,JDK,JDK,software,duke,,,P5,Fixed,asmehra,asmehra,asmehra,2023-05-23 07:10,2023-08-31 15:36,2023-10-01 09:55,2023-05-25 11:34,21,,,,,,21,hotspot,,0,ci-replay,oracle-triage-11,oracle-triage-17,oracle-triage-21,,,,,,,,,,"In 8254108 the replay data for compile command was updated to include a flag ""late_inline"" in the inline data and the version number of the replay file was incremented to 2.
But the replay file generated by DumpInline doesn't have the version number which results in incorrect parsing of the ""compile"" command in the process_compile() method during ReplayInline.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8254108,JDK-8315488,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i31msb:",9223372036854775807,b25,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2023-05-23 08:01;chagedorn;ILW = Incorrect parsing of replay file generated by ReplayInline, only ith ReplayInline, no workaround = LLH = P5;;;","2023-05-24 11:22;asmehra;Updated subject line as it incorrectly refers to ReplayInline instead of DumpInline.;;;","2023-05-24 11:47;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/14131
Date: 2023-05-24 18:27:26 +0000;;;","2023-05-25 11:34;dukebot;Changeset: 7d2a7ce2
Author:    Ashutosh Mehra <asmehra@redhat.com>
Committer: Vladimir Kozlov <kvn@openjdk.org>
Date:      2023-05-25 18:31:56 +0000
URL:       https://git.openjdk.org/jdk/commit/7d2a7ce2401bdacbfa084a502077ec98ecdcba33
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
[Lilliput/JDK17] Cherry-pick PPC parts of 8297036: Generalize C2 stub mechanism,JDK-8308651,5101573,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,rkennke,rkennke,rkennke,2023-05-23 05:11,2023-05-23 09:31,2023-10-01 09:55,2023-05-23 09:31,repo-lilliput-17,,,,,,repo-lilliput-17,hotspot,,0,c2,lilliput,,,,,,,,,,,,"We already have back-ported the majority of 8297036: Generalize C2 stub mechanism, but are missing the PPC parts. Backporting those parts will fix PPC builds.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8297036,,,,,,,,,,,,ppc,,,,,,,,,generic,,,,,,"0|i31mnn:",9223372036854775807,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2023-05-23 08:19;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/lilliput-jdk17u/pull/25
Date: 2023-05-23 12:16:10 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
[Lilliput/JDK17] Fix cross-builds,JDK-8308647,5101569,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,rkennke,rkennke,rkennke,2023-05-23 04:46,2023-05-24 11:44,2023-10-01 09:55,2023-05-24 11:44,repo-lilliput-17,,,,,,repo-lilliput-17,hotspot,,0,lilliput,,,,,,,,,,,,,"Some arches still require arrayOopDesc::header_size(BasicType) that we removed because it returns word-sized header-size, in favour of similar methods that return byte-sized header-size. Let's re-instate this old method to make cross-builds happy.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,arm,s390x,,,,,,,,,,,,,,"0|i31mmr:",9223372036854775807,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,,,"2023-05-23 06:44;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/lilliput-jdk17u/pull/24
Date: 2023-05-23 11:53:27 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Typo in ConstantValueAttribute,JDK-8308646,5101568,Bug,Resolved,JDK,JDK,software,duke,,,P5,Fixed,asotona,pminborg,pminborg,2023-05-23 04:38,2023-07-12 13:33,2023-10-01 09:55,2023-06-26 22:06,21,,,,,,22,other-libs,,0,classfile-api,,,,,,,,,,,,,"default -> throw new IllegalArgumentException(""Invalid ConstantValueAtrtibute value: "" + value);

should be 

default -> throw new IllegalArgumentException(""Invalid ConstantValueAttribute value: "" + value);",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i31mmj:",9223372036854775807,b04,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@79d0c3d2,,,,,,,,,"2023-06-26 06:33;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/14180
Date: 2023-05-26 14:56:57 +0000;;;","2023-06-26 22:06;dukebot;Changeset: 990e3a70
Author:    Adam Sotona <asotona@openjdk.org>
Date:      2023-06-27 05:05:17 +0000
URL:       https://git.openjdk.org/jdk/commit/990e3a700dce3441bd9506ca571c1790e57849a9
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Javadoc of FFM API needs to be refreshed,JDK-8308645,5101567,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,mcimadamore,mcimadamore,mcimadamore,2023-05-23 04:37,2023-07-05 10:47,2023-10-01 09:55,2023-06-12 08:26,21,,,,,,21,core-libs,,0,foreign-memaccess+abi,noreg-doc,,,,,,,,,,,,"As the FFM API has evolved over time, not all the javadoc is in sync with where the API has landed. This is especially evident in classes such as MemoryLayout which have seen fewer updates since the API went first preview. Now that the API is more stable, it would be a good time to do a big javadoc overhaul.",,,,,,,,,,,JDK-8309863,,,,,,,,,,,,JDK-8309553,,,,,,,,,JDK-8310646,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i31mmb:",9223372036854775807,b27,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@28ce6b78,,,,,,,,,"2023-05-23 06:43;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/14098
Date: 2023-05-23 11:48:59 +0000;;;","2023-06-12 04:05;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk21/pull/7
Date: 2023-06-12 11:01:08 +0000;;;","2023-06-12 08:26;dukebot;Changeset: 20371fd9
Author:    Maurizio Cimadamore <mcimadamore@openjdk.org>
Date:      2023-06-12 15:24:51 +0000
URL:       https://git.openjdk.org/jdk21/commit/20371fd918124451a068cb9647deebba7c9b4cba
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Incorrect value of 'used' jvmstat counter,JDK-8308643,5101565,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,kbarrett,thurka,thurka,2023-05-23 04:27,2023-07-12 13:13,2023-10-01 09:55,2023-06-15 15:25,17,21,22,,,,22,hotspot,,0,amazon-interest,gc-parallel,gc-pending-review,gc-serial,hgupdate-sync,jdk17u-fix-request,jdk17u-fix-yes,,,,,,,"While investigating the following VisualVM bug https://github.com/oracle/visualvm/issues/494 that this problem is caused by fix for JDK-8268265.

Looking at jvmstat counters I see the following values for 'used' jvmstat counters:
INFO [org.graalvm.visualvm.tools.jvmstat.JvmJvmstatModel]: sun.gc.generation.0.space.0.used = 88202184
INFO [org.graalvm.visualvm.tools.jvmstat.JvmJvmstatModel]: sun.gc.generation.0.space.1.used = 88202184
INFO [org.graalvm.visualvm.tools.jvmstat.JvmJvmstatModel]: sun.gc.generation.0.space.2.used = 88202184
INFO [org.graalvm.visualvm.tools.jvmstat.JvmJvmstatModel]: sun.gc.generation.1.space.0.used = 88202184
INFO [org.graalvm.visualvm.tools.jvmstat.JvmJvmstatModel]: Sum 352808736
- note all 'used' counters have the same value.

Normal case looks similar to this:
INFO [org.graalvm.visualvm.tools.jvmstat.JvmJvmstatModel]: sun.gc.generation.0.space.0.used = 9069768
INFO [org.graalvm.visualvm.tools.jvmstat.JvmJvmstatModel]: sun.gc.generation.0.space.1.used = 0
INFO [org.graalvm.visualvm.tools.jvmstat.JvmJvmstatModel]: sun.gc.generation.0.space.2.used = 1062200
INFO [org.graalvm.visualvm.tools.jvmstat.JvmJvmstatModel]: sun.gc.generation.1.space.0.used = 80296096
INFO [org.graalvm.visualvm.tools.jvmstat.JvmJvmstatModel]: Sum 90428064

It looks to me that last_used_in_bytes should be instance variable of SpaceCounters , since there are four instances of SpaceCounters and all those instances need to remember last_used_in_bytes. ",,,,,,,,,,,JDK-8310738,JDK-8310532,JDK-8310433,JDK-8311433,JDK-8310301,,,,,,,,,,,,,,,,,,,,,JDK-8268265,,,,,,,,,,,,generic,,,,,,,17,,generic,,,,,,"0|i31mlv:",9223372036854775807,b03,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6b00f96c,,,,,,,,,"2023-05-27 19:53;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/14195
Date: 2023-05-28 02:08:59 +0000;;;","2023-06-14 15:00;kbarrett;Didn't make the JDK 21 FC cuttoff, so moved fix version to JDK 22, with intent to backport.
;;;","2023-06-15 15:25;dukebot;Changeset: 92167505
Author:    Kim Barrett <kbarrett@openjdk.org>
Date:      2023-06-15 22:23:26 +0000
URL:       https://git.openjdk.org/jdk/commit/92167505b217c0e6074f58f8479be97bc4c776b3
;;;","2023-06-16 18:00;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk21/pull/27
Date: 2023-06-17 00:53:04 +0000;;;","2023-06-22 09:07;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/1494
Date: 2023-06-22 16:00:05 +0000;;;","2023-06-22 09:15;mdoerr;Fix Request (17u): 
Should get backported for parity with 17.0.9-oracle. Applies cleanly. Included test has passed.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
[Lilliput/JDK17] Remove wrong assert in klass.hpp,JDK-8308641,5101564,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,rkennke,rkennke,rkennke,2023-05-23 04:19,2023-05-23 08:19,2023-10-01 09:55,2023-05-23 08:19,repo-lilliput-17,,,,,,repo-lilliput-17,hotspot,,0,lilliput,,,,,,,,,,,,,"In klass.hpp, Klass::prototype_header() we have an assert(UseCompactObjectHeaders) which came from the similar upstream jdk21 change, but is wrong in jdk17, because the prototype_header() will also be used when biased locking is used. Biased locking is disabled by default, and the assert is harmless in release builds, but it makes a bunch of tests fail. Let's remove the assert and reduce upstream-jdk17u diff a little bit.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,generic,,,,,,,,,generic,,,,,,"0|i31mln:",9223372036854775807,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,,,"2023-05-23 06:07;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/lilliput-jdk17u/pull/23
Date: 2023-05-23 11:21:16 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
"java/lang/ScopedValue/StressStackOverflow.java fails with ""-XX:-VMContinuations""",JDK-8308609,5101530,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,aph,haosun,haosun,2023-05-22 22:30,2023-08-04 03:01,2023-10-01 09:55,2023-06-16 05:22,21,,,,,,22,core-libs,,0,jdk21u-fix-request,jdk21u-fix-SQE-ok,jdk21u-fix-yes,loom,,,,,,,,,,"This test case (jdk/incubator/concurrent/ScopedValue/StressStackOverflow.java) fails with ""-XX:-VMContinuations"", but passes with ""-XX:+VMContinuations"".

In my local test, it fails on Linux  platforms with both aarch64 and x86_64.

Here shows the error log:

```
 STDERR:
 WARNING: Using incubator modules: jdk.incubator.concurrent
 java.lang.RuntimeException: java.lang.RuntimeException: java.util.concurrent.ExecutionException: java.util.NoSuchElementException
  at StressStackOverflow.lambda$run$1(StressStackOverflow.java:196)
  at java.base/jdk.internal.vm.ScopedValueContainer.runWithoutScope(ScopedValueContainer.java:114)
  at java.base/jdk.internal.vm.ScopedValueContainer.run(ScopedValueContainer.java:100)
  at jdk.incubator.concurrent/jdk.incubator.concurrent.ScopedValue$Carrier.run(ScopedValue.java:417)
  at StressStackOverflow.run(StressStackOverflow.java:158)
  at StressStackOverflow.main(StressStackOverflow.java:209)
  at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
  at java.base/java.lang.reflect.Method.invoke(Method.java:578)
  at com.sun.javatest.regtest.agent.MainWrapper$MainTask.run(MainWrapper.java:138)
  at java.base/java.lang.Thread.run(Thread.java:1583)
 Caused by: java.lang.RuntimeException: java.util.concurrent.ExecutionException: java.util.NoSuchElementException
  at StressStackOverflow.runInNewThread(StressStackOverflow.java:152)
  at StressStackOverflow.lambda$run$1(StressStackOverflow.java:189)
  ... 9 more
 Caused by: java.util.concurrent.ExecutionException: java.util.NoSuchElementException
  at java.base/java.util.concurrent.FutureTask.report(FutureTask.java:122)
  at java.base/java.util.concurrent.FutureTask.get(FutureTask.java:191)
  at jdk.incubator.concurrent/jdk.incubator.concurrent.StructuredTaskScope$FutureImpl.get(StructuredTaskScope.java:779)
  at StressStackOverflow.runInNewThread(StressStackOverflow.java:149)
  ... 10 more
  Suppressed: java.lang.IllegalStateException: Owner did not invoke join or joinUntil after fork
    at jdk.incubator.concurrent/jdk.incubator.concurrent.StructuredTaskScope.close(StructuredTaskScope.java:704)
    at StressStackOverflow.runInNewThread(StressStackOverflow.java:144)
    ... 10 more
 Caused by: java.util.NoSuchElementException
  at jdk.incubator.concurrent/jdk.incubator.concurrent.ScopedValue.slowGet(ScopedValue.java:570)
  at jdk.incubator.concurrent/jdk.incubator.concurrent.ScopedValue.get(ScopedValue.java:563)
  at StressStackOverflow$2.run(StressStackOverflow.java:183)
  at StressStackOverflow.lambda$runInNewThread$0(StressStackOverflow.java:146)
  at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:317)
  at java.base/java.lang.ThreadBuilders$BoundVirtualThread.run(ThreadBuilders.java:436)
 
 JavaTest Message: Test threw exception: java.lang.RuntimeException: java.lang.RuntimeException: java.util.concurrent.ExecutionException: java.util.NoSuchElementException
 JavaTest Message: shutting down test
 
 STATUS:Failed.`main' threw exception: java.lang.RuntimeException: java.lang.RuntimeException: java.util.concurrent.ExecutionException: java.util.NoSuchElementException
```",,,,,,,,,,,JDK-8313753,,,,,,,,,,,,,,,JDK-8303498,,,,,,JDK-8309646,JDK-8310211,,,,,,,,,,,,,,,generic,,,,,,,,,,,,,,,"0|i31me3:",9223372036854775807,b03,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4c088d55,,,,,,,,,"2023-05-22 22:32;haosun;It seems that s390 platform has the same issue. See https://bugs.openjdk.org/browse/JDK-8303498;;;","2023-05-22 23:11;chagedorn;Does not look like a compiler issue. Moving to runtime for initial triaging.;;;","2023-05-23 01:03;dholmes;I don't see anything to suggest a hotspot issue here. This seems a Loom issue so moving to core-libs.;;;","2023-06-06 23:38;alanb;This is a brutal and extreme stress test for ScopedValue in stack overflow conditions, very hard to test recovery reliably.  It is currently failing on linux-x86 (32-bit) and other ports that don't have VM continuations support. It might need to be updated to `@requires vm.continuations` until it can run in that mode. [~aph] Is this on your radar? ;;;","2023-06-07 23:30;alanb;I've changed the title on this JBS issue as the test has moved to test/jdk/java/lang/ScopedValue as part of promoting ScopedValue from an incubating to a preview API (JEP 446).;;;","2023-06-09 09:59;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/14399
Date: 2023-06-09 16:53:15 +0000;;;","2023-06-10 03:52;aph;> This is a brutal and extreme stress test for ScopedValue in stack overflow conditions, very hard to test recovery reliably. 

It is extreme, but the property we're trying to test should be a hard guarantee. Any failure — even under heavy stress — is arguably non-conformant.;;;","2023-06-16 05:22;dukebot;Changeset: 44a8aa06
Author:    Andrew Haley <aph@openjdk.org>
Date:      2023-06-16 12:21:11 +0000
URL:       https://git.openjdk.org/jdk/commit/44a8aa0691f046d720a789a89c9039a010658f0c
;;;","2023-06-21 13:36;dcubed;This fix is integrated in jdk-22+3-121.;;;","2023-06-22 12:34;dcubed;If this fix is backported to JDK21, the following ProblemListing must also be backported:

    JDK-8310586 ProblemList java/lang/ScopedValue/StressStackOverflow.java#default with virtual threads on linux-all

Otherwise java/lang/ScopedValue/StressStackOverflow.java#default will timeout in Tier5 on linux-all.

Of course, if the following bug is fixed in JDK22:

    JDK-8309646  java/lang/ScopedValue/StressStackOverflow.java failures with JTREG_TEST_THREAD_FACTORY=Virtual runs

then it should be backported along with this bug fix (JDK-8308609) and JDK-8310586 won't be necessary.;;;","2023-07-28 04:40;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk21u/pull/22
Date: 2023-07-28 11:32:32 +0000;;;","2023-08-01 08:39;clanger;Fix request (21u)

Request backporting this to 21u to fix the problematic test and remove the test exclusions. I'll also backport JDK-8311926 as a follow up. Testing: GHA and SAP test system.
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
[testbug] Use Util::waitForIdle instead of Toolkit::firePulse in system tests,JDK-8308608,5101529,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,kpk,kpk,kpk,2023-05-22 22:28,2023-09-15 07:06,2023-10-01 09:55,2023-09-06 09:25,jfx21,,,,,,jfx22,javafx,,0,sn_152,test_sprint,testbug,,,,,,,,,,,"In ChoiceBoxScrollUpOnCollectionChangeTest and ContextMenuNPETest, Toolkit::firePulse is used. This might artificially alter the control flow. Hence use Util::waitForIdle to trigger and wait for required number of pulses.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8304831,,,,,,,,,,,,,,,,generic,,,,,,,,,generic,,,,,,"0|i31mdv:",9223372036854775807,b08,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@67282485,,,,,,,,,"2023-05-23 05:28;kcr;One thing to note when fixing this test bug: Util::waitForIdle must not be called on the JavaFX application thread (it needs to be called on the test thread).;;;","2023-09-04 03:51;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jfx/pull/1230
Date: 2023-09-04 10:47:02 +0000;;;","2023-09-06 09:25;dukebot;Changeset: 8fcd6e5e
Author:    Karthik P K <kpk@openjdk.org>
Date:      2023-09-06 16:23:40 +0000
URL:       https://git.openjdk.org/jfx/commit/8fcd6e5e55967810ec2acd3dcc9b47bae5c70350
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
gc/cslocker/TestCSLocker.java timed out,JDK-8308589,5101507,Bug,Closed,JDK,JDK,software,duke,,,P2,Fixed,stefank,dcubed,dcubed,2023-05-22 12:39,2023-07-13 06:26,2023-10-01 09:55,2023-05-26 06:53,21,,,,,,21,hotspot,,0,genzgc,intermittent,tier2,,,,,,,,,,,"The following test timed out in the JDK21 CI:

gc/cslocker/TestCSLocker.java

Here's a snippet from the log file:

#section:main
----------messages:(8/332)----------
command: main -Xmx256m gc.cslocker.TestCSLocker
reason: User specified action: run main/native/othervm -Xmx256m gc.cslocker.TestCSLocker 
started: Mon May 22 18:49:49 UTC 2023
Mode: othervm [/othervm specified]
Timeout information:
--- Timeout information end.
finished: Mon May 22 19:02:03 UTC 2023
elapsed time (seconds): 734.202
----------configuration:(0/0)----------
----------System.out:(1/26)----------
Timeout refired 480 times
----------System.err:(0/0)----------
----------rerun:(39/7096)*----------

<snip>

result: Error. Program `/opt/mach5/mesos/work_dir/jib-master/install/jdk-21+24-2057/linux-x64.jdk/jdk-21/bin/java' timed out (timeout set to 480000ms, elapsed time including timeout handling was 734189ms).",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8310480,JDK-8308043,,,,,,,,,,,x86_64,,,,,,,,,linux,,,,,,"0|i31m8z:",9223372036854775807,b25,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6b00f96c,,,,,,,Verified,,"2023-05-22 23:45;stefank;This is the same test bug that we tried to work around in a previous change. We have this situation:

JNI Critical Locker Thread
```
Thread 28 (Thread 0x7f37021f9700 (LWP 2983936)):
...

Java_gc_cslocker_CSLocker_lock
```

GC thread waiting for the JNI Critical Locker Thread:
```
Thread 10 (Thread 0x7f37108ee700 (LWP 2983861)):
...
#3  0x00007f372f6598cb in PlatformMonitor::wait
#4  0x00007f372f95f196 in ZJNICritical::block
#5  0x00007f372f9527e1 in ZGenerationYoung::collect
#6  0x00007f372f94ca05 in ZDriverMajor::collect_young
```

The Test thread is supposed to wait a few seconds before signalling the JNI Critical Locker Thread, but is stuck performing an allocation, which waits for the GC to complete, which waits  JNI Critical Locker Thread, which waits for the Test thread, …;;;","2023-05-25 06:49;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/14150
Date: 2023-05-25 13:43:55 +0000;;;","2023-05-26 06:53;dukebot;Changeset: cc0976bf
Author:    Stefan Karlsson <stefank@openjdk.org>
Date:      2023-05-26 13:51:31 +0000
URL:       https://git.openjdk.org/jdk/commit/cc0976bf7fc41caa5abdaa23f4df00b1a5d5bfba
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
AC_REQUIRE: `PLATFORM_EXTRACT_TARGET_AND_BUILD' was expanded before it was required,JDK-8308585,5101503,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,erikj,erikj,erikj,2023-05-22 11:12,2023-07-25 04:30,2023-10-01 09:55,2023-07-08 23:23,21,,,,,,21,infrastructure,,0,,,,,,,,,,,,,,"Autoconf is emitting this warning after JDK-8307573:

stdin:85: warning: AC_REQUIRE: `PLATFORM_EXTRACT_TARGET_AND_BUILD' was expanded before it was required
stdin:85: http://www.gnu.org/software/autoconf/manual/autoconf.html#Expanded-Before-Required
/home/erik/git/jdk/open/make/autoconf/platform.m4:644: PLATFORM_SETUP_OPENJDK_BUILD_AND_TARGET is expanded from...
stdin:85: the top level
",,,,,,,,,,,JDK-8312897,JDK-8310028,,,,,,,,,,,,,,JDK-8309598,,,,,,,,,,JDK-8307573,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i31m83:",9223372036854775807,b31,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@429c566,,,,,,,,,"2023-05-22 11:19;erikj;[~gdams] The commonly used model in our configure script is explicit macro calls rather than implicit with AC_REQUIRE. Just removing that line should resolve this as PLATFORM_EXTRACT_TARGET_AND_BUILD is explicitly called before PLATFORM_CHECK_DEPRECATION.;;;","2023-06-13 14:51;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/14459
Date: 2023-06-13 21:47:28 +0000;;;","2023-06-30 02:34;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk21u/pull/5
Date: 2023-06-30 09:27:15 +0000;;;","2023-06-30 02:35;erikj;Bumping priority to P3 as this issue is preventing the deprecation of windows 32-bit as intended by JEP 449.;;;","2023-06-30 02:46;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk21/pull/85
Date: 2023-06-30 09:40:11 +0000;;;","2023-07-08 23:23;dukebot;Changeset: 99ae133f
Author:    Erik Joelsson <erikj@openjdk.org>
Date:      2023-07-09 06:21:38 +0000
URL:       https://git.openjdk.org/jdk21/commit/99ae133f518cd1705c1c4607e982d7cada8d1f14
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
SIGSEGV in GraphKit::gen_checkcast,JDK-8308583,5101500,Bug,Closed,JDK,JDK,software,duke,,,P1,Fixed,roland,never,never,2023-05-22 10:27,2023-07-11 05:12,2023-10-01 09:55,2023-05-26 00:05,21,,,,,,21,hotspot,,0,c2,oracle-triage-11,oracle-triage-17,oracle-triage-21,regression,,,,,,,,,"While testing a recent snapshot of JDK21 with Graal native image we started seeing a repeatable crash with a null pointer in GraphKit::gen_instanceof. 

# A fatal error has been detected by the Java Runtime Environment:
#
#  SIGSEGV (0xb) at pc=0x00007f0fffeee7ac, pid=7111, tid=7120
#
# JRE version: Java(TM) SE Runtime Environment Oracle GraalVM 21-dev+19.1 (21.0+19) (build 21+19-jvmci-23.1-b02)
# Java VM: Java HotSpot(TM) 64-Bit Server VM Oracle GraalVM 21-dev+19.1 (21+19-jvmci-23.1-b02, mixed mode, tiered, jvmci, compressed oops, compressed class ptrs, parallel gc, linux-amd64)
# Problematic frame:
# V  [libjvm.so+0x8457ac]  GraphKit::gen_instanceof(Node*, Node*, bool)+0x2ec

Current CompileTask:
C2: 198273 50775       4       com.oracle.svm.core.StaticFieldsSupport$StaticFieldBaseNode::lower (83 bytes)

Stack: [0x00007f0f8860a000,0x00007f0f8870b000],  sp=0x00007f0f88707580,  free space=1013k
Native frames: (J=compiled Java code, j=interpreted, Vv=VM code, C=native code)
V  [libjvm.so+0x8457ac]  GraphKit::gen_instanceof(Node*, Node*, bool)+0x2ec
V  [libjvm.so+0xce25fd]  Parse::do_instanceof()+0x1bd
V  [libjvm.so+0xccf0b0]  Parse::do_one_block()+0x210
V  [libjvm.so+0xccf4b5]  Parse::do_all_blocks()+0xe5
V  [libjvm.so+0xcd1c05]  Parse::Parse(JVMState*, ciMethod*, float)+0x725
V  [libjvm.so+0x54e18b]  ParseGenerator::generate(JVMState*)+0x8b
V  [libjvm.so+0x54faf9]  PredictedCallGenerator::generate(JVMState*)+0x2f9
V  [libjvm.so+0x54faf9]  PredictedCallGenerator::generate(JVMState*)+0x2f9
V  [libjvm.so+0x7074d8]  Parse::do_call()+0x1f8
V  [libjvm.so+0xccf0b0]  Parse::do_one_block()+0x210
V  [libjvm.so+0xccf4b5]  Parse::do_all_blocks()+0xe5
V  [libjvm.so+0xcd1c05]  Parse::Parse(JVMState*, ciMethod*, float)+0x725
V  [libjvm.so+0x54e18b]  ParseGenerator::generate(JVMState*)+0x8b
V  [libjvm.so+0x61e8e5]  Compile::Compile(ciEnv*, ciMethod*, int, Options, DirectiveSet*)+0xd95
V  [libjvm.so+0x54d2a0]  C2Compiler::compile_method(ciEnv*, ciMethod*, int, bool, DirectiveSet*)+0x120
V  [libjvm.so+0x625c37]  CompileBroker::invoke_compiler_on_method(CompileTask*)+0xa87
V  [libjvm.so+0x626b48]  CompileBroker::compiler_thread_loop()+0x6a8
V  [libjvm.so+0x8d47e8]  JavaThread::thread_main_inner() [clone .part.0]+0xb8
V  [libjvm.so+0xe77646]  Thread::call_run()+0xa6
V  [libjvm.so+0xc9fd88]  thread_native_entry(Thread*)+0xd8

The problem is that top of stack is top which leads to a crash when trying to emit the checkcast.  It appears the top is injected by a previous instanceof that uses maybe_cast_profiled_receiver and replace_in_map.  The top is produced at https://github.com/openjdk/jdk/blob/master/src/hotspot/share/opto/graphKit.cpp#L2890.  It's unclear to me whether this code is never supposed to produce top because the callers guard against it or if the returned top value is somehow supposed to be handled.

Since this is occurring in the context of Graal and labsjdk I can't give you something which will reproduce against master.  I've added some debug code to type_check_receiver to dump the involved values in GraphKit::type_check_receiver:

rreceiver_type=bottom[int:>=0] (java/lang/Cloneable,java/io/Serializable):NotNull *
recvx_type=org/graalvm/compiler/word/HostedWord (org/graalvm/word/WordBase,org/graalvm/word/ComparableWord,org/graalvm/word/UnsignedWord,org/graalvm/word/PointerBase,org/graalvm/word/SignedWord,org/graalvm/word/Pointer):exact *
 1859  Phi  === 1074 1835 1047  [[ 255 1867 1885 1898 1906 1908 1912 1923 1908 1928 1928 1937 ]]  #bottom[int:>=0] (java/lang/Cloneable,java/io/Serializable):NotNull *
 1929  LoadNKlass  === _ 7 1928  [[ 1930 ]]  @bottom[int:>=0] (java/lang/Cloneable,java/io/Serializable):NotNull+8 * [narrowklass], idx=4; #narrowklass: java/lang/Object: 0x00007fe6cb015bf8 *
 1931  ConP  === 0  [[ 1932 ]]  #precise org/graalvm/compiler/word/HostedWord: 0x00007fe6eaa8a680 (org/graalvm/word/WordBase,org/graalvm/word/ComparableWord,org/graalvm/word/UnsignedWord,org/graalvm/word/PointerBase,org/graalvm/word/SignedWord,org/graalvm/word/Pointer):Constant:exact *  Klass:precise org/graalvm/compiler/word/HostedWord: 0x00007fe6eaa8a680 (org/graalvm/word/WordBase,org/graalvm/word/ComparableWord,org/graalvm/word/UnsignedWord,org/graalvm/word/PointerBase,org/graalvm/word/SignedWord,org/graalvm/word/Pointer):Constant:exact *
 1930  DecodeNKlass  === _ 1929  [[ 1932 ]]  #java/lang/Object: 0x00007fe6cb015bf8 *  Klass:java/lang/Object: 0x00007fe6cb015bf8 *
 1932  CmpP  === _ 1930 1931  [[ 1933 ]]
 1933  Bool  === _ 1932  [[ 1934 ]] [eq]

The reason the cmp doesn't fold is because while the receiver has a precise type, the DecodeNKlass has been erased to object.  The type folding in the CheckCastPPNode is working with the visible types so it's able see that the types are disjoint.  How exactly is this code protected from this kind of problem?

This is occurring in the context of labsjdk which is currently based on jdk21+19 but I don't see any C2 fixes which might address this problem.  I did try out 8303512 but that didn't help.

I can provide instructions setting up a Graal build to reproduce this but can also test out any fixes. I added a guarantee that this code never produces a top return value and I'm currently running a mach5 gate with it but haven't seen any failures yet.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8297933,,,,,"2023-05-23 21:34;never;cc.java;https://bugs.openjdk.org/secure/attachment/103958/cc.java","2023-05-23 07:34;dnsimon;hs_err_pid7111.log;https://bugs.openjdk.org/secure/attachment/103945/hs_err_pid7111.log",,,,,,,,,,,,,,,,,,,,,"0|i31m7f:",9223372036854775807,b25,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,Verified,,"2023-05-22 10:38;never;For reference, this is my modified version of type_check_receiver:

// Profile-driven exact type check:
Node* GraphKit::type_check_receiver(Node* receiver, ciKlass* klass,
                                    float prob,
                                    Node* *casted_receiver) {
  assert(!klass->is_interface(), ""no exact type check on interfaces"");

  const TypeKlassPtr* tklass = TypeKlassPtr::make(klass, Type::trust_interfaces);
  Node* recv_klass = load_object_klass(receiver);
  Node* want_klass = makecon(tklass);
  Node* cmp = _gvn.transform(new CmpPNode(recv_klass, want_klass));
  Node* bol = _gvn.transform(new BoolNode(cmp, BoolTest::eq));
  IfNode* iff = create_and_xform_if(control(), bol, prob, COUNT_UNKNOWN);
  set_control( _gvn.transform(new IfTrueNode (iff)));
  Node* fail = _gvn.transform(new IfFalseNode(iff));

  if (!stopped()) {
    const TypeOopPtr* receiver_type = _gvn.type(receiver)->isa_oopptr();
    const TypeOopPtr* recvx_type = tklass->as_instance_type();
    assert(recvx_type->klass_is_exact(), """");

    if (!receiver_type->higher_equal(recvx_type)) { // ignore redundant casts
      // Subsume downstream occurrences of receiver with a cast to
      // recv_xtype, since now we know what the type will be.
      Node* cast = new CheckCastPPNode(control(), receiver, recvx_type);
      (*casted_receiver) = _gvn.transform(cast);
      if ((*casted_receiver)->is_top()) {
        tty->print(""receiver_type=""); receiver_type->dump(); tty->cr();
        tty->print(""recvx_type=""); recvx_type->dump(); tty->cr();
        receiver->dump();
        bol->dump(4);
      }
      guarantee(!(*casted_receiver)->is_top(), ""top"");

      // (User must make the replace_in_map call.)
    }
  }

  return fail;
}

It seems to me this code should be performing the higher_equal part of the logic first and then using the result of that to determine whether to emit any code.;;;","2023-05-22 23:40;chagedorn;ILW = Crash during C2 parsing, only seen with Graal so far, disable compilation of affected methods = HLM = P3;;;","2023-05-22 23:43;chagedorn;Hi [~never], have you tried to reproduce it with a replay file? That might be easier to investigate if Graal is not set up.;;;","2023-05-23 07:24;thartmann;We need a reproducer (either a Graal build setup or a working compilation replay file) to investigate. Please also add the hs_err file.;;;","2023-05-23 07:49;dnsimon;We are seeing replay logs being generated for these crashes but our CI is not currently preserving these logs. We will resolved this (GR-45830) and hopefully have some replay logs soon.
I'm also not sure if this crash happens (or can happen) when generating libgraal. I'll discuss more with Tom.
;;;","2023-05-23 08:07;never;I did try out the replay file but it died trying to initialize JVMCI so I'm not sure if replay needs to do something special to work with JVMCI.

It's always possible for a gvn.transform of CheckCastPPNode to produce top if the types are unrelated so whose responsibility is it to avoid it in this call chain?  type_check_receiver could simply avoid returning top:

diff --git a/src/hotspot/share/opto/graphKit.cpp b/src/hotspot/share/opto/graphKit.cpp
index 58c4191f7ff..18163f991bc 100644
--- a/src/hotspot/share/opto/graphKit.cpp
+++ b/src/hotspot/share/opto/graphKit.cpp
@@ -2886,8 +2886,10 @@ Node* GraphKit::type_check_receiver(Node* receiver, ciKlass* klass,
     if (!receiver_type->higher_equal(recvx_type)) { // ignore redundant casts
       // Subsume downstream occurrences of receiver with a cast to
       // recv_xtype, since now we know what the type will be.
-      Node* cast = new CheckCastPPNode(control(), receiver, recvx_type);
-      (*casted_receiver) = _gvn.transform(cast);
+      Node* cast = _gvn.transform(new CheckCastPPNode(control(), receiver, recvx_type));
+      if (!cast->is_top()) {
+        (*casted_receiver) = cast;
+      }
       // (User must make the replace_in_map call.)
     }
   }
;;;","2023-05-23 21:35;never;I've attached a test case cc.java which creates similar conditions.  It doesn't SEGV, I think because the control flow and hierarchy is slightly different, but it does cause type_check_receiver to replace the object with top.  In fastdebug it dies with malformed control flow:

$ ~/Downloads/jdk-21/fastdebug/bin/java -showversion cc
java version ""21-ea"" 2023-09-19 LTS
Java(TM) SE Runtime Environment (fastdebug build 21-ea+23-LTS-1988)
Java HotSpot(TM) 64-Bit Server VM (fastdebug build 21-ea+23-LTS-1988, mixed mode, sharing)
dist dump
---------------------------------------------
   0  141  If  === 133 140  [[ 143 ]] P=1.000000, C=-1.000000 !jvms: cc$SubSnippetReflection::forObject @ bci:1 (line 29) cc::test @ bci:14 (line 64)
   1  143  IfFalse  === 141  [[ 148 ]] #0 !jvms: cc$SubSnippetReflection::forObject @ bci:1 (line 29) cc::test @ bci:14 (line 64)
#
# A fatal error has been detected by the Java Runtime Environment:
#
#  Internal Error (/System/Volumes/Data/mesos/work_dir/slaves/741e9afd-8c02-45c3-b2e2-9db1450d0832-S102723/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/52417fc5-ae11-4950-9454-86253738dc5f/runs/b868ccc5-005a-40ca-8ded-eac7b2aafcf5/workspace/open/src/hotspot/share/opto/compile.cpp:4003), pid=53021, tid=23555
#  assert(false) failed: malformed control flow
#
# JRE version: Java(TM) SE Runtime Environment (21.0+23) (fastdebug build 21-ea+23-LTS-1988)
# Java VM: Java HotSpot(TM) 64-Bit Server VM (fastdebug 21-ea+23-LTS-1988, mixed mode, sharing, tiered, compressed oops, compressed class ptrs, g1 gc, bsd-amd64)
# No core dump will be written. Core dumps have been disabled. To enable core dumping, try ""ulimit -c unlimited"" before starting Java again
#
# An error report file with more information is saved as:
# /Users/tkrodrig/hs_err_pid53021.log
#
# Compiler replay data is saved as:
# /Users/tkrodrig/replay_pid53021.log
#
# If you would like to submit a bug report, please visit:
#   https://bugreport.java.com/bugreport/crash.jsp
#
[1]    53021 abort      ~/Downloads/jdk-21/fastdebug/bin/java -showversion cc

It fails on current master as well.  The callers of type_check_receiver should probably be using static_subtype_check to guard calls to this method.;;;","2023-05-23 23:39;thartmann;Thanks for the reproducer, Tom. Looks similar to JDK-8308504 / JDK-8308392. We'll investigate this asap.;;;","2023-05-23 23:49;epeter;[~never] Thanks for the reproducer! I'll look into it.

We can restrict compilation to ""cc::test"":
./java -Xbatch -XX:-TieredCompilation -XX:CompileCommand=printcompilation,cc::* -XX:CompileCommand=compileonly,cc::test cc.java;;;","2023-05-24 00:59;thartmann;This seems to be a regression from JDK-8297933 in JDK 21. I verified that with Tom's reproducer and build-search with -XX:+AbortVMOnCompilationFailure because we assert only after JDK-8303951.;;;","2023-05-24 23:47;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/14123
Date: 2023-05-24 12:31:37 +0000;;;","2023-05-25 00:05;thartmann;[~dnsimon], [~never] could you verify that Roland's fix also resolves the SIGSEGV crashes that you were observing? Thanks.;;;","2023-05-25 06:27;dnsimon;I can confirm that it appears to resolve the SIGSEGV crashes. I tested both product and fastdebug builds.
Thanks for the quick fix [~roland]!
;;;","2023-05-25 06:32;thartmann;Great, thanks for confirming and thanks to Roland for the quick fix.;;;","2023-05-26 00:05;dukebot;Changeset: 199b1bf5
Author:    Roland Westrelin <roland@openjdk.org>
Date:      2023-05-26 07:03:35 +0000
URL:       https://git.openjdk.org/jdk/commit/199b1bf5009120efd1fd37a1ddabc0c6fb84f62c
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
HttpClient: Sanitize logging while stopping,JDK-8308565,5101481,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,dfuchs,dfuchs,dfuchs,2023-05-22 08:09,2023-05-28 20:48,2023-10-01 09:55,2023-05-23 05:13,,,,,,,21,core-libs,,0,httpclient,noreg-cleanup,,,,,,,,,,,,"When the HttpClient is stopping many exception stack traces may be logged, in particular if the Http2Connection attempts to send a GOAWAY frame after the underlying TCP connection or the selector have been closed.

The Http2Connection should look at the Http2ClientImpl state before logging the exception as an error. If the Http2ClientImpl is stopping, a simple debug message should be enough.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i31m37:",9223372036854775807,b24,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@446e124a,,,,,,,,,"2023-05-22 08:54;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/14089
Date: 2023-05-22 15:45:57 +0000;;;","2023-05-23 05:13;dukebot;Changeset: 9e196b36
Author:    Daniel Fuchs <dfuchs@openjdk.org>
Date:      2023-05-23 12:07:23 +0000
URL:       https://git.openjdk.org/jdk/commit/9e196b3631af0156ce9958a2f631894968211a4c
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
[17u] Fix commit of 8286191. vm.musl was not removed from ExternalEditorTest,JDK-8308554,5101470,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,goetz,goetz,goetz,2023-05-22 07:34,2023-05-25 23:15,2023-10-01 09:55,2023-05-24 00:01,17.0.8,,,,,,17.0.8,tools,,0,jdk17u-fix-request,jdk17u-fix-yes,,,,,,,,,,,,"When pushing backport of JDK-8286191 to 17u it looks as if the removal of vm.musl from jdk/jshell/ExternalEditorTest.java was lost. 
There was a merge after resolving the dependent pull request.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8307593,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i31m0r:",9223372036854775807,b04,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@ef6d34f,,,,,,,,,"2023-05-22 07:50;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/1385
Date: 2023-05-22 14:45:07 +0000;;;","2023-05-24 00:01;dukebot;Changeset: 05b2ff45
Author:    Goetz Lindenmaier <goetz@openjdk.org>
Date:      2023-05-24 06:59:15 +0000
URL:       https://git.openjdk.org/jdk17u-dev/commit/05b2ff459011f45e49929ac8a8cb18092246813b
;;;","2023-05-25 23:14;dukebot;Changeset: 05b2ff45
Author:    Goetz Lindenmaier <goetz@openjdk.org>
Date:      2023-05-24 06:59:15 +0000
URL:       https://git.openjdk.org/jdk17u/commit/05b2ff459011f45e49929ac8a8cb18092246813b
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Classfile API should fail to generate over-sized Code attribute,JDK-8308549,5101465,Bug,Closed,JDK,JDK,software,duke,,,P3,Fixed,asotona,asotona,asotona,2023-05-22 07:21,2023-08-08 09:55,2023-10-01 09:55,2023-05-25 00:14,,,,,,,21,core-libs,,0,classfile-api,,,,,,,,,,,,,According to JVMS 4.7.3. the Code Attribute is limited to 65k size and Classfile API should enforce this limit and fail to generate oversized methods.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8240567,JDK-8308477,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i31lzn:",9223372036854775807,b25,,,,,,,,,Verified,,"2023-05-23 07:40;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/14100
Date: 2023-05-23 12:54:20 +0000;;;","2023-05-25 00:14;dukebot;Changeset: bfcae68e
Author:    Adam Sotona <asotona@openjdk.org>
Date:      2023-05-25 07:13:33 +0000
URL:       https://git.openjdk.org/jdk/commit/bfcae68ed10e4330c35f5de0bdb2d31e44e2872e
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
"java/net/httpclient/ShutdownNow.java fails with ""stream 1 cancelled""",JDK-8308545,5101463,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,dfuchs,dfuchs,dfuchs,2023-05-22 05:42,2023-07-21 06:22,2023-10-01 09:55,2023-05-23 05:13,21,,,,,,21,core-libs,,0,httpclient,noreg-self,ursqe-triaged,,,,,,,,,,,"test ShutdownNow.testConcurrent(""http://127.0.0.1:51239/http2/exec/retry""): failure
java.util.concurrent.ExecutionException: java.lang.AssertionError: 0: Unexpected exception: java.io.IOException: Stream 1 cancelled
	at java.base/java.util.concurrent.CompletableFuture.reportGet(CompletableFuture.java:396)
	at java.base/java.util.concurrent.CompletableFuture.get(CompletableFuture.java:2073)
	at ShutdownNow.testConcurrent(ShutdownNow.java:209)
...
Caused by: java.io.IOException: Stream 1 cancelled
	at java.net.http/jdk.internal.net.http.Stream.cancel(Stream.java:1285)
	at java.net.http/jdk.internal.net.http.common.SubscriptionBase.cancel(SubscriptionBase.java:99)
	at java.net.http/jdk.internal.net.http.common.HttpBodySubscriberWrapper.onNext(HttpBodySubscriberWrapper.java:388)
	at java.net.http/jdk.internal.net.http.common.HttpBodySubscriberWrapper.onNext(HttpBodySubscriberWrapper.java:49)
	at java.net.http/jdk.internal.net.http.Stream.schedule(Stream.java:215)
	at java.net.http/jdk.internal.net.http.common.SequentialScheduler$LockingRestartableTask.run(SequentialScheduler.java:182)
	at java.net.http/jdk.internal.net.http.common.SequentialScheduler$CompleteRestartableTask.run(SequentialScheduler.java:149)
	at java.net.http/jdk.internal.net.http.common.SequentialScheduler$SchedulableTask.run(SequentialScheduler.java:207)
	at java.net.http/jdk.internal.net.http.common.SequentialScheduler.runOrSchedule(SequentialScheduler.java:280)
	at java.net.http/jdk.internal.net.http.common.SequentialScheduler.runOrSchedule(SequentialScheduler.java:233)
	at java.net.http/jdk.internal.net.http.Stream.receiveDataFrame(Stream.java:372)
	at java.net.http/jdk.internal.net.http.Stream.incoming(Stream.java:491)
	at java.net.http/jdk.internal.net.http.Http2Connection.processFrame(Http2Connection.java:910)
	at java.net.http/jdk.internal.net.http.frame.FramesDecoder.decode(FramesDecoder.java:155)
	at java.net.http/jdk.internal.net.http.Http2Connection$FramesController.processReceivedData(Http2Connection.java:272)
	at java.net.http/jdk.internal.net.http.Http2Connection.asyncReceive(Http2Connection.java:752)
	at java.net.http/jdk.internal.net.http.Http2Connection$Http2TubeSubscriber.processQueue(Http2Connection.java:1517)
	at java.net.http/jdk.internal.net.http.common.SequentialScheduler$LockingRestartableTask.run(SequentialScheduler.java:182)
	at java.net.http/jdk.internal.net.http.common.SequentialScheduler$CompleteRestartableTask.run(SequentialScheduler.java:149)
	at java.net.http/jdk.internal.net.http.common.SequentialScheduler$SchedulableTask.run(SequentialScheduler.java:207)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1144)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:642)
	at java.base/java.lang.Thread.run(Thread.java:1583)
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i31lz7:",9223372036854775807,b24,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@446e124a,,,,,,,,,"2023-05-22 05:44;dfuchs;Due to the nature of the test - which interrupts / cancel operations asynchronously, then a ""stream %d cancelled"" exception should count as an acceptable result.;;;","2023-05-22 05:59;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/14081
Date: 2023-05-22 12:52:49 +0000;;;","2023-05-23 05:13;dukebot;Changeset: 582ddeb2
Author:    Daniel Fuchs <dfuchs@openjdk.org>
Date:      2023-05-23 12:02:58 +0000
URL:       https://git.openjdk.org/jdk/commit/582ddeb2b24f77307b89befc8c643290e0ed1b11
;;;","2023-05-29 11:13;djelinski;The test is still failing; the exception thrown is ""Stream X cancelled"", and the matcher expects a lowercase 's' in ""stream"";;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Fix compilation regression from JDK-8306983 on musl libc,JDK-8308544,5101459,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,jkratochvil,jkratochvil,jkratochvil,2023-05-22 05:30,2023-05-28 20:48,2023-10-01 09:55,2023-05-23 06:58,,,,,,,21,tools,,0,,,,,,,,,,,,,,"Since JDK-8306983 compilation on Alpine Linux using musl libc:
```
../src/jdk.internal.le/linux/native/lible/CLibrary.cpp: In function 'void Java_jdk_internal_org_jline_terminal_impl_jna_linux_CLibraryImpl_tcgetattr(JNIEnv*, jobject, jint, jobject)':
../src/jdk.internal.le/linux/native/lible/CLibrary.cpp:116:45: error: 'struct termios' has no member named 'c_ispeed'; did you mean '__c_ispeed'?
  116 |     env->SetIntField(result, c_ispeed, data.c_ispeed);
      |                                             ^~~~~~~~
      |                                             __c_ispeed
../src/jdk.internal.le/linux/native/lible/CLibrary.cpp:117:45: error: 'struct termios' has no member named 'c_ospeed'; did you mean '__c_ospeed'?
  117 |     env->SetIntField(result, c_ospeed, data.c_ospeed);
      |                                             ^~~~~~~~
      |                                             __c_ospeed
../src/jdk.internal.le/linux/native/lible/CLibrary.cpp: In function 'void Java_jdk_internal_org_jline_terminal_impl_jna_linux_CLibraryImpl_tcsetattr(JNIEnv*, jobject, jint, jint, jobject)':
../src/jdk.internal.le/linux/native/lible/CLibrary.cpp:136:10: error: 'struct termios' has no member named 'c_ispeed'; did you mean '__c_ispeed'?
  136 |     data.c_ispeed = env->GetIntField(input, c_ispeed);
      |          ^~~~~~~~
      |          __c_ispeed
../src/jdk.internal.le/linux/native/lible/CLibrary.cpp:137:10: error: 'struct termios' has no member named 'c_ospeed'; did you mean '__c_ospeed'?
   ... (rest of output omitted)
```",Tested on Alpine Linux 3.17.3.,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8308627,,,,,,,,JDK-8306983,,,,,,,,,,,,,,,,,,,,,linux,,,,,,"0|i31lyb:",9223372036854775807,b24,,,,,,,,,,,"2023-05-22 05:52;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/14080
Date: 2023-05-22 12:46:02 +0000;;;","2023-05-23 06:58;dukebot;Changeset: c0c4d771
Author:    Jan Kratochvil <jkratochvil@openjdk.org>
Committer: Thomas Stuefe <stuefe@openjdk.org>
Date:      2023-05-23 13:50:58 +0000
URL:       https://git.openjdk.org/jdk/commit/c0c4d771922f8fce36f1014e57d7e7a213243891
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
AArch64: SIGILL when running with -XX:UseBranchProtection=pac-ret on hardware without PAC feature,JDK-8308503,5101417,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,haosun,haosun,haosun,2023-05-22 01:35,2023-07-10 00:23,2023-10-01 09:55,2023-05-31 16:51,19,20,21,,,,21,hotspot,,0,oracle-triage-11,oracle-triage-17,oracle-triage-21,,,,,,,,,,,"=====================
# Reproduce on hardware without PAC

./configure --with-debug-level=fastdebug
make images
./images/jdk/bin/java -XX:UseBranchProtection=pac-ret --version

=====================
# error log

#
# A fatal error has been detected by the Java Runtime Environment:
#
#  SIGILL (0x4) at pc=0x0000fffe87d847c8, pid=3520802, tid=3520803
#
# JRE version:  (21.0) (fastdebug build )
# Java VM: OpenJDK 64-Bit Server VM (fastdebug 21-internal-adhoc.jdk-src-dev, mixed mode, sharing, tiered, compressed oops, compressed class ptrs, g1 gc, linux-aarch64)
# Problematic frame:
# v  ~StubRoutines::jbyte_arraycopy 0x0000fffe87d847c8

=====================
# call stack

Stack: [0x0000fffe9f2a0000,0x0000fffe9f4a0000],  sp=0x0000fffe9f49e210,  free space=2040k
Native frames: (J=compiled Java code, j=interpreted, Vv=VM code, C=native code)
v  ~StubRoutines::jbyte_arraycopy 0x0000fffe87d847c8
V  [libjvm.so+0x16fa75c]  StubRoutines::initialize_final_stubs()+0x5c  (stubRoutines.cpp:335)
V  [libjvm.so+0xd7029c]  init_globals()+0xcc  (init.cpp:174)
V  [libjvm.so+0x17b3274]  Threads::create_vm(JavaVMInitArgs*, bool*)+0x2d4  (threads.cpp:549)
V  [libjvm.so+0xed3860]  JNI_CreateJavaVM+0x9c  (jni.cpp:3571)
C  [libjli.so+0x3810]  JavaMain+0x7c  (java.c:1459)
C  [libjli.so+0x70ec]  ThreadJavaMain+0xc  (java_md.c:650)
C  [libc.so.6+0x7d5c8]

=====================
# 
StubRoutines::jbyte_arraycopy [0x0000fffe87d847c4, 0x0000fffe87d84958] (404 bytes)--------------------------------------------------------------------------------
  0x0000fffe87d847c4:   ldr xzr, [x30]
  0x0000fffe87d847c8:   pacia x30, x29                <--------- unrecognized instruction
  0x0000fffe87d847cc:   stp x29, x30, [sp, #-16]!
  0x0000fffe87d847d0:   mov x29, sp
  0x0000fffe87d847d4:   sub x8, x1, x0
  0x0000fffe87d847d8:   cmp x8, x2
  0x0000fffe87d847dc:   b.cs  Stub::jbyte_disjoint_arraycopy+16 0x0000fffe87d84650  // b.hs, b.nlast
  0x0000fffe87d847e0:   prfm  pldl1keep, [x0]
  0x0000fffe87d847e4:   cmp x2, #0x60
  0x0000fffe87d847e8:   b.hi  Stub::jbyte_arraycopy+256 0x0000fffe87d848c4  // b.pmore",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8287325,JDK-8277204,,,,,,,,,,,aarch64,,,,,,,,,linux,,,,,,"0|i31loz:",9223372036854775807,b25,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2023-05-22 02:30;chagedorn;ILW = Crash when using -XX:UseBrachProtection=pac-ret on hardware without support for PAC, only aarch64, drop -XX:UseBrachProtection=pac-ret = MML = P4;;;","2023-05-22 22:25;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/14095
Date: 2023-05-23 05:20:58 +0000;;;","2023-05-31 16:51;dukebot;Changeset: a46b5acc
Author:    Hao Sun <haosun@openjdk.org>
Date:      2023-05-31 23:49:13 +0000
URL:       https://git.openjdk.org/jdk/commit/a46b5acc15359cabbfe19eec32f468df544b044c
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
ZStatSubPhase::register_start should not call register_gc_phase_start if ZAbort::should_abort(),JDK-8308500,5101415,Bug,Closed,JDK,JDK,software,duke,,,P2,Fixed,aboldtch,aboldtch,aboldtch,2023-05-22 00:33,2023-07-18 11:56,2023-10-01 09:55,2023-05-23 04:00,21,,,,,,21,hotspot,,0,genzgc,,,,,,,,,,,,,"ZStatSubPhase::register_start should not call register_gc_phase_start if ZAbort::should_abort() is true. This will cause an unbalanced push and pop behaviour of the phase stack as ZStatSubPhase::register_end stops popping (and sending events) after the aborting has started. This will create an issue if more subsequent sub-phases are added in-between two abort points as the phase stack may overflow. 

Simply avoid pushing new phases when aborting has started solves this issue. 

",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i31loj:",9223372036854775807,b24,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6b00f96c,,,,,,,Not verified,,"2023-05-22 00:44;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/14075
Date: 2023-05-22 07:37:19 +0000;;;","2023-05-23 03:59;dukebot;Changeset: e5596133
Author:    Axel Boldt-Christmas <aboldtch@openjdk.org>
Date:      2023-05-23 10:45:01 +0000
URL:       https://git.openjdk.org/jdk/commit/e55961331e10884e4255ab152d430ceb3f02748c
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Test vmTestbase/nsk/jdi/MethodExitRequest/addClassExclusionFilter/filter001/TestDescription.java failed: VMDisconnectedException,JDK-8308499,5101414,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,cjplummer,dholmes,dholmes,2023-05-22 00:03,2023-07-12 13:13,2023-10-01 09:55,2023-06-15 12:12,21,,,,,,22,core-svc,,0,hgupdate-sync,noreg-self,tier8,,,,,,,,,,,"# ERROR: EventHandler> Exception occured in eventHandler thread: connection is closed
The following stacktrace is for failure analysis.
nsk.share.TestFailure: EventHandler> Exception occured in eventHandler thread: connection is closed
	at nsk.share.Log.logExceptionForFailureAnalysis(Log.java:431)
	at nsk.share.Log.complain(Log.java:402)
	at nsk.share.jdi.EventHandler.complain(EventHandler.java:121)
	at nsk.share.jdi.EventHandler.run(EventHandler.java:204)
	at java.base/java.lang.Thread.run(Thread.java:1583)
com.sun.jdi.VMDisconnectedException: connection is closed
	at jdk.jdi/com.sun.tools.jdi.TargetVM.send(TargetVM.java:293)
	at jdk.jdi/com.sun.tools.jdi.VirtualMachineImpl.sendToTarget(VirtualMachineImpl.java:1172)
	at jdk.jdi/com.sun.tools.jdi.PacketStream.send(PacketStream.java:79)
	at jdk.jdi/com.sun.tools.jdi.JDWP$ReferenceType$SignatureWithGeneric.enqueueCommand(JDWP.java:2678)
	at jdk.jdi/com.sun.tools.jdi.JDWP$ReferenceType$SignatureWithGeneric.process(JDWP.java:2664)
	at jdk.jdi/com.sun.tools.jdi.ReferenceTypeImpl.genericSignature(ReferenceTypeImpl.java:213)
	at jdk.jdi/com.sun.tools.jdi.ReferenceTypeImpl.signature(ReferenceTypeImpl.java:192)
	at jdk.jdi/com.sun.tools.jdi.TypeImpl.name(TypeImpl.java:42)
	at nsk.jdi.MethodExitRequest.addClassExclusionFilter.filter001$1.eventReceived(filter001.java:113)
	at nsk.share.jdi.EventHandler.run(EventHandler.java:176)
	at java.base/java.lang.Thread.run(Thread.java:1583)
EventHandler> waitForVMDisconnect: done",,,,,,,,,,,JDK-8311325,JDK-8310570,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i31lob:",9223372036854775807,b03,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@3397f701,,,,,,,,,"2023-06-14 14:02;cjplummer;The test says:

 * The test works as follows.
 * - The debugger
 *   - sets up two MethodExitRequests,
 *   - restricts the Requests using patterns 'java*' and 'sun*',
 *     so that events will be filtered only from test classes,
 * ...

However, filtering out just java* and sun* is not enough. There are a lot of jdk.internal.* entries in the log that I think were not intended, and as a result the log file exceeds test harness limit for the number of lines of output. Although exceeding the log output limit is not really a problem, the extra MethodExitEvents happening almost to the point of the debuggee exit is. When I filter out jdk.* classes also, the test passes and there appear to be only a few dozen MethodExitEvents that the test needs to deal with.

I suspect since product builds run faster that the timing of the handling of the events is different, and some of these events do not get handled until after the debugge exits. Note the stack trace when the exception happens: 

com.sun.jdi.VMDisconnectedException: connection is closed
	at jdk.jdi/com.sun.tools.jdi.TargetVM.send(TargetVM.java:293)
	at jdk.jdi/com.sun.tools.jdi.VirtualMachineImpl.sendToTarget(VirtualMachineImpl.java:1172)
	at jdk.jdi/com.sun.tools.jdi.PacketStream.send(PacketStream.java:79)
	at jdk.jdi/com.sun.tools.jdi.JDWP$ReferenceType$SignatureWithGeneric.enqueueCommand(JDWP.java:2678)
	at jdk.jdi/com.sun.tools.jdi.JDWP$ReferenceType$SignatureWithGeneric.process(JDWP.java:2664)
	at jdk.jdi/com.sun.tools.jdi.ReferenceTypeImpl.genericSignature(ReferenceTypeImpl.java:213)
	at jdk.jdi/com.sun.tools.jdi.ReferenceTypeImpl.signature(ReferenceTypeImpl.java:192)
	at jdk.jdi/com.sun.tools.jdi.TypeImpl.name(TypeImpl.java:42)
	at nsk.jdi.MethodExitRequest.addClassExclusionFilter.filter001$1.eventReceived(filter001.java:113)
	at nsk.share.jdi.EventHandler.run(EventHandler.java:176)
	at java.base/java.lang.Thread.run(Thread.java:1583)

The test got a MethodExitEvent and is executing the following:

   String str = ((MethodExitEvent)event).location().declaringType().name();

By the time it does this, the connection is already closed because the debuggee has exited. The events were queued up waiting to be processed, and remain queued up even after the debuggee has exited. The test could defend against this, but the simpler fix seems to be to just make sure we don't get all these extra events in the first place, since that is how the test was intended to run.;;;","2023-06-14 14:30;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/14480
Date: 2023-06-14 21:24:31 +0000;;;","2023-06-15 12:12;dukebot;Changeset: 79ff72a7
Author:    Chris Plummer <cjplummer@openjdk.org>
Date:      2023-06-15 19:11:12 +0000
URL:       https://git.openjdk.org/jdk/commit/79ff72a7762deb6010b57e5ac0ccede3d035ab4c
;;;","2023-06-20 11:29;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk21/pull/41
Date: 2023-06-20 18:25:02 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
DSA does not reset SecureRandom when initSign is called again,JDK-8308474,5101382,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,bperez,weijun,weijun,2023-05-20 17:48,2023-08-15 00:00,2023-10-01 09:55,2023-06-13 09:35,11,17,21,22,8,,22,security-libs,,0,amazon-interest,jdk21u-fix-request,jdk21u-fix-SQE-ok,jdk21u-fix-yes,starter-bug,,,,,,,,,"sun.security.provider.DSA stores its SecureRandom in the signingRandom field and it's only set once when it's first used. If initSign is called again with a different SecureRandom, this value is not updated.",,,,,,,,,,,JDK-8314251,,,,,,,,,,,,,,,,,,,,,,,,,JDK-7044060,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i31lh7:",9223372036854775807,b02,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@2ec284e3,,,,,,,,,"2023-05-21 07:53;weijun;Reproducer:

import java.security.KeyPairGenerator;
import java.security.PrivateKey;
import java.security.SecureRandom;
import java.security.Signature;
import java.util.HexFormat;
import java.util.Random;

class A9 {
    public static void main(String[] args) throws Exception {
        KeyPairGenerator g = KeyPairGenerator.getInstance(""DSA"");
        PrivateKey sk = g.generateKeyPair().getPrivate();
        Signature s = Signature.getInstance(""SHA256withDSA"");
        s.initSign(sk, deterministic());
        System.out.println(HexFormat.of().formatHex(s.sign()));
        s.initSign(sk, deterministic());
        System.out.println(HexFormat.of().formatHex(s.sign()));
    }

    static SecureRandom deterministic() {
        return new SecureRandom() {
            Random r = new Random(0);

            @Override
            public void nextBytes(byte[] bytes) {
                r.nextBytes(bytes);
            }
        };
    }
}

The 2 signatures should look the same.;;;","2023-06-06 15:25;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/14273
Date: 2023-06-01 21:17:11 +0000;;;","2023-06-13 09:35;dukebot;Changeset: bed9161c
Author:    Ben Perez <ben.perez@oracle.com>
Committer: Weijun Wang <weijun@openjdk.org>
Date:      2023-06-13 16:34:58 +0000
URL:       https://git.openjdk.org/jdk/commit/bed9161c815b5b4773f36eac7e8dadc1384c7fd1
;;;","2023-06-14 03:53;shade;Seems to be that way since JDK-7044060 integration in 8.;;;","2023-08-11 03:41;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk21u/pull/54
Date: 2023-08-11 10:36:08 +0000;;;","2023-08-11 03:49;shade;Fix Request (21u)

Fixes the simple DSA bug, improves security. Applies cleanly. Test passes.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Shared array class should not always be loaded in boot loader,JDK-8308464,5101369,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,ccheung,iklam,iklam,2023-05-19 15:55,2023-09-12 11:14,2023-10-01 09:55,2023-08-28 15:07,21,,,,,,22,hotspot,,0,cds,,,,,,,,,,,,,"We currently always load the shared array classes in the boot loader:

https://github.com/openjdk/jdk/blob/939344b8433b32166f42ad73ae3d96e84b033478/src/hotspot/share/oops/instanceKlass.cpp#L2689

    array_klasses()->restore_unshareable_info(ClassLoaderData::the_null_class_loader_data(), Handle(), CHECK);

This is incorrect. The obj array classes should be in the same loader that defines the ObjArrayKlass::_bottom_klass.

Currently, this bug is not causing problems because:
- for the static archive, we only archive object array classes from the boot loader
- for the dynamic archive, we don't archive any object array classes

However, we should fix this bug in preparation for future development, where we may need to archive archive object array classes for any loaders.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i31leb:",9223372036854775807,b13,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,,,"2023-05-20 22:18;iklam;Here's a test case:

public class HelloWorld {
    public static void main(String args[]) {
        Object o = new HelloWorld[0];
        System.out.println(""Hello World"");
        System.out.println(""array = "" + o);
        System.out.println(""Class loader = "" + o.getClass().getClassLoader());
    }
}

When running without CDS:
$ java -cp HelloWorld.jar HelloWorld
Hello World
array = [LHelloWorld;@8bcc55f
Class loader = jdk.internal.loader.ClassLoaders$AppClassLoader@1a93a7ca

Currently it's not possible to load arbitrary classes using the classlist, so we need to apply this patch:

void MetaspaceShared::link_shared_classes(bool jcmd_request, TRAPS) {
  ...
  // add to the end of this function
  // start <<<
  {
    TempNewSymbol name = SymbolTable::new_symbol(""[LHelloWorld;"");
    Handle class_loader(THREAD, SystemDictionary::java_system_loader());
    Klass* klass = SystemDictionary::resolve_or_null(name, class_loader, Handle(), THREAD);
    if (klass != nullptr) {
      ResourceMark rm;
      tty->print_cr(""Found array class %s"", klass->external_name());
      tty->print_cr(""mirror = "" INTPTR_FORMAT, p2i(klass->class_loader()));

      {
        TempNewSymbol name2 = SymbolTable::new_symbol(""[Ljava/lang/Object;"");
        Klass* klass = SystemDictionary::resolve_or_null(name2, class_loader, Handle(), THREAD);
        ResourceMark rm;
        tty->print_cr(""Compared to Object[]"");
        tty->print_cr(""Found array class %s"", klass->external_name());
        tty->print_cr(""mirror = "" INTPTR_FORMAT, p2i(klass->class_loader()));
      }
    } else {
      CLEAR_PENDING_EXCEPTION;
    }
  }
  // >>> end
}

$ java -Xshare:off -XX:DumpLoadedClassList=hw.lst -cp HelloWorld.jar HelloWorld
Found array class [LHelloWorld;
mirror = 0x00000007ffce7020
Compared to Object[]
Found array class [Ljava.lang.Object;
mirror = 0x0000000000000000
$ java -Xshare:dump -XX:SharedClassListFile=hw.lst -cp HelloWorld.jar -XX:SharedArchiveFile=hw.jsa
$ java -XX:SharedArchiveFile=hw.jsa -cp HelloWorld.jar HelloWorld
Hello World
array = [LHelloWorld;@7ad041f3
Class loader = null
                      ^^^^^^^
Note that the ClassLoader is wrong.
;;;","2023-05-20 22:28;iklam;For proper regression testing, we cannot modify MetaspaceShared::link_shared_classes(). Instead, we can use a java agent to force HelloWorld[] to be loaded during -Xshare:dump. See test/hotspot/jtreg/runtime/cds/appcds/javaldr/LockDuringDump.java for an example.
;;;","2023-08-25 09:19;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/15421
Date: 2023-08-24 19:35:25 +0000;;;","2023-08-28 15:07;dukebot;Changeset: 1cb2cc65
Author:    Calvin Cheung <ccheung@openjdk.org>
Date:      2023-08-28 22:05:15 +0000
URL:       https://git.openjdk.org/jdk/commit/1cb2cc65873ab25f5bafeae042e3fd99be94ea7e
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Windows build failure with disassembler.cpp(792): warning C4267: '=': conversion from 'size_t' to 'int',JDK-8308458,5101363,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,jiangli,jiangli,jiangli,2023-05-19 15:24,2023-05-28 20:47,2023-10-01 09:55,2023-05-22 09:27,,,,,,,21,hotspot,,0,,,,,,,,,,,,,,"Related to the work for JDK-8307858 ([REDO] JDK-8307194 Add make target for optionally building a complete set of all JDK and hotspot libjvm static libraries), on Windows following build failure was reported.

Reported by @erikj79 (https://github.com/openjdk/jdk/pull/14064#pullrequestreview-1435143793, and https://bugs.openjdk.org/browse/JDK-8307858?focusedCommentId=14581027&page=com.atlassian.jira.plugin.system.issuetabpanels%3Acomment-tabpanel#comment-14581027)
```
[2023-05-19T20:51:31,466Z] c:\sb\prod\1684529071\workspace\open\src\hotspot\share\compiler\disassembler.cpp(792): error C2220: the following warning is treated as an error
[2023-05-19T20:51:31,466Z] c:\sb\prod\1684529071\workspace\open\src\hotspot\share\compiler\disassembler.cpp(792): warning C4267: '=': conversion from 'size_t' to 'int', possible loss of data
[2023-05-19T20:51:31,466Z] lib/CompileJvm.gmk:152: recipe for target '/cygdrive/c/sb/prod/1684529071/workspace/build/windows-x64-open/hotspot/variant-server/libjvm/objs/static/disassembler.obj' failed
[2023-05-19T20:51:31,466Z] make[3]: *** [/cygdrive/c/sb/prod/1684529071/workspace/build/windows-x64-open/hotspot/variant-server/libjvm/objs/static/disassembler.obj] Error 1
```",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8303796,JDK-8307858,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i31lcz:",9223372036854775807,b24,,,,,,,,,,,"2023-05-19 18:20;jiangli;The code is in https://github.com/openjdk/jdk/blob/939344b8433b32166f42ad73ae3d96e84b033478/src/hotspot/share/compiler/disassembler.cpp#L770. There is a bigger question and we probably don't have an immediate answer. Do we need to support the disassembler shared library (e.g., libhsdis-<arch>.so) with JDK static build, or should we always statically link with the the disassembler?;;;","2023-05-21 21:01;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/14074
Date: 2023-05-22 03:56:05 +0000;;;","2023-05-22 09:27;dukebot;Changeset: 491bdeaa
Author:    Jiangli Zhou <jiangli@openjdk.org>
Date:      2023-05-22 16:24:45 +0000
URL:       https://git.openjdk.org/jdk/commit/491bdeaa90aaafd15615d2c4e42aaff5940938e3
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Linker should check that capture state segment is big enough,JDK-8308445,5101349,Bug,Closed,JDK,JDK,software,duke,,,P3,Fixed,jvernee,mcimadamore,mcimadamore,2023-05-19 08:50,2023-08-04 12:49,2023-10-01 09:55,2023-06-07 05:26,21,,,,,,21,core-libs,,0,foreign-memaccess+abi,,,,,,,,,,,,,"It seems that the linker does not verify the size of the provided captured call segment:

jshell> MethodHandle strlen = linker.downcallHandle(linker.defaultLookup().find(""strlen"").get(), FunctionDescriptor.of(ValueLayout.JAVA_LONG, ValueLayout.ADDRESS), Linker.Option.captureCallState(""errno""));


jshell> var segment = arena.allocateUtf8String(""Hello!"");
segment ==> MemorySegment{ heapBase: Optional.empty address:139746963920864 limit: 7 }
strlen ==> MethodHandle(MemorySegment,MemorySegment)long


jshell> var cap = arena.allocate(1);
cap ==> MemorySegment{ heapBase: Optional.empty address:139746963913392 limit: 1 }

jshell> strlen.invoke(cap, segment);
$19 ==> 6


I believe this works because the state is saved in the assembly stub, which ignores any limits of the provided memory segment. As such, we should verify compatibility of these limits before going in native code. More specifically, we should check that the provided segment is compatible with the capture state layout size and alignment.
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i31l9v:",9223372036854775807,b26,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@28ce6b78,,,,,,,Verified,,"2023-06-06 10:02;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/14339
Date: 2023-06-06 16:22:41 +0000;;;","2023-06-07 05:26;dukebot;Changeset: c49129f5
Author:    Jorn Vernee <jvernee@openjdk.org>
Date:      2023-06-07 12:25:28 +0000
URL:       https://git.openjdk.org/jdk/commit/c49129f54580b431881ffdb97b5478aff6097154
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
[Lilliput/JDK17] Cherry-pick GC forwarding,JDK-8308423,5101327,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,rkennke,rkennke,rkennke,2023-05-19 06:52,2023-05-25 08:52,2023-10-01 09:55,2023-05-25 08:52,repo-lilliput-17,,,,,,repo-lilliput-17,hotspot,,0,lilliput,,,,,,,,,,,,,I'd like to pick up the improvements that have been made in full-GC and self-forwarding in the upstream issues JDK-8305896 and JDK-8305898. Let's port them to Lilliput/JDK17.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,generic,,,,,,,,,generic,,,,,,"0|i31l4z:",9223372036854775807,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6b00f96c,,,,,,,,,"2023-05-19 14:04;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/lilliput-jdk17u/pull/22
Date: 2023-05-19 20:58:47 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
[Lilliput/JDK17] Cherry-pick: 8283710: JVMTI: Use BitSet for object marking,JDK-8308411,5101311,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,rkennke,rkennke,rkennke,2023-05-19 04:56,2023-08-15 07:25,2023-10-01 09:55,2023-08-15 07:25,repo-lilliput-17,,,,,,repo-lilliput-17,hotspot,,0,lilliput,,,,,,,,,,,,,"JVMTI heap walking marks objects in order to track which have been visited already. In order to do that, it uses bits in the object header. Those are the same bits that are also used by some GCs to mark objects (the lowest two bits, also used by locking code). Some GCs also use the bits in order to indicate 'forwarded' objects, where the upper bits of the header represent the forward-pointer. In the case of Shenandoah, it's even more problematic because this happens concurrently, even while JVMTI heap walks can intercept. So far we carefully worked around that problem, but it becomes very problematic in Lilliput, where accesses to the Klass* also requires to decode the header, and figure out what bits means what.

In addition to that, marking objects in their header requires that the original header gets saved and restored. We only do that for 'interesting' headers, that is headers that have a stack-lock, monitor or hash-code. All other headers are reset to their default value. This means we are losing object's GC age. This is not catastrophic, but nontheless interferes with GC.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,generic,,,,,,,,,generic,,,,,,"0|i31l1f:",9223372036854775807,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@661b156a,,,,,,,,,"2023-05-19 06:21;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/lilliput-jdk17u/pull/21
Date: 2023-05-19 13:13:57 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
broken compilation of test\jdk\tools\launcher\exeJliLaunchTest.c,JDK-8308410,5101309,Bug,Closed,JDK,JDK,software,duke,,,P2,Fixed,asotona,asotona,asotona,2023-05-19 04:07,2023-08-23 06:54,2023-10-01 09:55,2023-05-19 06:13,,,,,,,21,tools,,0,,,,,,,,,,,,,,"JDK-8303669 patch broke test\jdk\tools\launcher\exeJliLaunchTest.c compilation on windows:

For target support_test_jdk_jtreg_native_support_exeJliLaunchTest_exeJliLaunchTest.obj: exeJliLaunchTest.c
test\jdk\tools\launcher\exeJliLaunchTest.c(39): error C2057: expected constant expression
test\jdk\tools\launcher\exeJliLaunchTest.c(39): error C2466: cannot allocate an array of constant size 0
test\jdk\tools\launcher\exeJliLaunchTest.c(39): error C2133: 'argv': unknown size",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,windows,,,,,,"0|i31l0z:",9223372036854775807,b24,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@5d8045fc,,,,,,,Verified,,"2023-05-19 05:23;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/14060
Date: 2023-05-19 12:08:55 +0000;;;","2023-05-19 06:13;dukebot;Changeset: 80ef5c22
Author:    Adam Sotona <asotona@openjdk.org>
Date:      2023-05-19 13:11:41 +0000
URL:       https://git.openjdk.org/jdk/commit/80ef5c228b0f8a7a881a333c418a5d3068fe5a6e
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Build failure with -Werror=maybe-uninitialized in libjli/java.c with GCC8,JDK-8308408,5101306,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,jiefu,jiefu,jiefu,2023-05-19 02:56,2023-05-24 23:10,2023-10-01 09:55,2023-05-19 04:16,21,,,,,,21,tools,,0,tencent-interest,,,,,,,,,,,,,"/data/jdk/src/java.base/share/native/libjli/java.c: In function 'JLI_Launch':
/data/jdk/src/java.base/share/native/libjli/java.c:1405:16: error: 'arg' may be used uninitialized in this function [-Werror=maybe-uninitialized]
         mode = IsSourceFile(arg) ? LM_SOURCE : LM_CLASS;
                ^~~~~~~~~~~~~~~~~
/data/jdk/src/java.base/share/native/libjli/java.c:1208:11: note: 'arg' was declared here
     char *arg;
           ^~~
cc1: all warnings being treated as errors 
gmake[3]: *** [lib/CoreLibraries.gmk:169: /data/jdk/build/linux-x86_64-server-fastdebug/support/native/java.base/libjli/java.o] Error 1
gmake[3]: *** Waiting for unfinished jobs....
gmake[2]: *** [make/Main.gmk:199: java.base-libs] Error 2

ERROR: Build failed for target 'images' in configuration 'linux-x86_64-server-fastdebug' (exit code 2)

=== Output from failing command(s) repeated here ===
* For target support_native_java.base_libjli_java.o:
/data/jdk/src/java.base/share/native/libjli/java.c: In function 'JLI_Launch':
/data/jdk/src/java.base/share/native/libjli/java.c:1405:16: error: 'arg' may be used uninitialized in this function [-Werror=maybe-uninitialized]
         mode = IsSourceFile(arg) ? LM_SOURCE : LM_CLASS;
                ^~~~~~~~~~~~~~~~~
/data/jdk/src/java.base/share/native/libjli/java.c:1208:11: note: 'arg' was declared here
     char *arg;
           ^~~
cc1: all warnings being treated as errors",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i31l0b:",9223372036854775807,b24,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@5d8045fc,,,,,,,,,"2023-05-19 03:08;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/14057
Date: 2023-05-19 10:02:04 +0000;;;","2023-05-19 04:16;dukebot;Changeset: 690d3969
Author:    Jie Fu <jiefu@openjdk.org>
Date:      2023-05-19 11:13:37 +0000
URL:       https://git.openjdk.org/jdk/commit/690d3969b80776bf896fbfbfac5eabe7d074c9bb
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libjvm library not reproducibly comparable between vendors,JDK-8308407,5101305,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,aleonard,aleonard,aleonard,2023-05-19 02:44,2023-05-28 20:47,2023-10-01 09:55,2023-05-22 05:25,21,,,,,,21,hotspot,,0,reproducible-build,,,,,,,,,,,,,"When two different vendors build the identical openjdk source with their separate vendor string branding, the libjvm.so/jvm.dll is not comparable by simply redacting the Vendor string. The reason for this is because abstract_vm_version.obj has a variable length C const string depending on the vendor string length, which results in non-deterministic padding and object offsets.

By ensuring the vm_vendor static C const string is always padded, the libjvm library can be made ""comparable"".

The VENDOR name is the only vendor branding string that gets used by libjvm. The other vendor strings, vendor-url, vendor-bug-url and vendor-vm-bug-url, are only used within VersionProps.java, which can be deterministically compared.

",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,generic,,,,,,"0|i31l03:",9223372036854775807,b24,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,,,"2023-05-19 04:05;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/14058
Date: 2023-05-19 10:58:27 +0000;;;","2023-05-22 05:25;dukebot;Changeset: dc30e686
Author:    Andrew Leonard <aleonard@openjdk.org>
Date:      2023-05-22 12:23:45 +0000
URL:       https://git.openjdk.org/jdk/commit/dc30e686516d50bdc65542d440e1e428362efb67
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Update description of SourceVersion.RELEASE_21,JDK-8308388,5101255,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,darcy,darcy,darcy,2023-05-18 13:00,2023-05-28 20:47,2023-10-01 09:55,2023-05-22 09:33,21,,,,,,21,core-libs,,0,noreg-doc,,,,,,,,,,,,,The description of SourceVersion.RELEASE_21 should explicitly state what language changes are present in the release. ,,,,,,,,,,,,,,,,,,,JDK-8300545,JDK-8300543,,,,,,,,,,,,JDK-8284923,JDK-8284966,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i31kuz:",9223372036854775807,b24,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@3c6c40,,,,,,,,,"2023-05-18 13:41;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/14051
Date: 2023-05-18 20:33:26 +0000;;;","2023-05-22 09:33;dukebot;Changeset: d77a4103
Author:    Joe Darcy <darcy@openjdk.org>
Date:      2023-05-22 16:30:37 +0000
URL:       https://git.openjdk.org/jdk/commit/d77a41033a162c2c9bf02d6b8da91f2825320ad8
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
CLD created and unloading list sharing _next node pointer leads to concurrent YC missing CLD roots,JDK-8308387,5101254,Bug,Closed,JDK,JDK,software,duke,,,P2,Fixed,aboldtch,dcubed,dcubed,2023-05-18 12:58,2023-07-13 03:32,2023-10-01 09:55,2023-06-01 23:36,21,,,,,,21,hotspot,,0,genzgc,tier2,,,,,,,,,,,,"JDK-8307106 introduced the ability to walk the created CLDs list in the CLDG without a lock. This was primarily introduced to allow lockless concurrent CLD roots scanning for young collections in generational ZGC. However because the CLD _next node pointer is shared between the two list this can lead to a concurrent iteration of the created CLDs missing list entries. Specifically a young root scanning which occurs concurrently with class unloading.

This change introduces a second _unloading_next node pointer which is used for the unloading CLDs list. The set_next is now maintains the invariant that it only ever unlinks is_unloading() CLDs and maintains a consistent view of the tail list for anyone reading the list concurrently

Below is the crash which is a symptom of this. What effectively happens is that some CLD roots are not traced due to the race described above, which means that the young collection ends is mark phase with a broken object graph (some roots are not the correctly coloured/proccessed). This then confuses the load barriers in the verification step which is run before the young collection enters its relocation phase to try an relocated the object, which then catches the bug with assert(_generation->is_phase_relocate()).

The following test failed in the JDK21 CI:

gc/stringdedup/TestStringDeduplicationPrintOptions.java#Z

Here's a snippet from the log file:

#section:driver
----------messages:(8/405)----------
command: driver gc.stringdedup.TestStringDeduplicationPrintOptions Z
reason: User specified action: run driver gc.stringdedup.TestStringDeduplicationPrintOptions Z 
started: Thu May 18 19:48:00 UTC 2023
Mode: agentvm
Agent id: 9
Additional opens to unnamed modules from @modules: java.base/jdk.internal.misc java.base/java.lang
finished: Thu May 18 19:48:05 UTC 2023
elapsed time (seconds): 5.182
----------configuration:(18/1749)*----------

<snip>

----------System.out:(29/3505)*----------
Command line: [c:\\ade\\mesos\\work_dir\\jib-master\\install\\jdk-21+24-2008\\windows-x64-debug.jdk\\jdk-21\\fastdebug\\bin\\java.exe -cp C:\\sb\\prod\\1684439107\\testoutput\\test-support\\jtreg_open_test_hotspot_jtreg_hotspot_gc\\classes\\5\\gc\\stringdedup\\TestStringDeduplicationPrintOptions_Z.d;C:\\ade\\mesos\\work_dir\\jib-master\\install\\jdk-21+24-2008\\src.full\\open\\test\\hotspot\\jtreg\\gc\\stringdedup;C:\\sb\\prod\\1684439107\\testoutput\\test-support\\jtreg_open_test_hotspot_jtreg_hotspot_gc\\classes\\5;C:\\sb\\prod\\1684439107\\testoutput\\test-support\\jtreg_open_test_hotspot_jtreg_hotspot_gc\\classes\\5\\test\\lib;C:\\ade\\mesos\\work_dir\\jib-master\\install\\jtreg\\7.2\\1\\bundles\\jtreg-7.2+1.zip\\jtreg\\lib\\jtreg.jar;C:\\ade\\mesos\\work_dir\\jib-master\\install\\jtreg\\7.2\\1\\bundles\\jtreg-7.2+1.zip\\jtreg\\lib\\junit-platform-console-standalone-1.9.2.jar;C:\\ade\\mesos\\work_dir\\jib-master\\install\\jtreg\\7.2\\1\\bundles\\jtreg-7.2+1.zip\\jtreg\\lib\\testng-7.3.0.jar;C:\\ade\\mesos\\work_dir\\jib-master\\install\\jtreg\\7.2\\1\\bundles\\jtreg-7.2+1.zip\\jtreg\\lib\\jcommander-1.78.jar;C:\\ade\\mesos\\work_dir\\jib-master\\install\\jtreg\\7.2\\1\\bundles\\jtreg-7.2+1.zip\\jtreg\\lib\\guice-4.2.3.jar -XX:MaxRAMPercentage=4.16667 -Dtest.boot.jdk=c:\\ade\\mesos\\work_dir\\jib-master\\install\\jdk\\20\\36\\bundles\\windows-x64\\jdk-20_windows-x64_bin.zip\\jdk-20 -Djava.io.tmpdir=c:\\sb\\prod\\1684439107\\testoutput\\test-support\\jtreg_open_test_hotspot_jtreg_hotspot_gc\\tmp -XX:+CreateCoredumpOnCrash -XX:+UseZGC -XX:+ZGenerational -XX:+UseZGC -Xmn50m -Xms100m -Xmx100m -XX:+UnlockDiagnosticVMOptions --add-opens=java.base/java.lang=ALL-UNNAMED -XX:+VerifyAfterGC -XX:+UseStringDeduplication -XX:StringDeduplicationAgeThreshold=3 gc.stringdedup.TestStringDeduplicationTools$DeduplicationTest 10 5 3 YoungGC ]
[2023-05-18T19:48:00.275380500Z] Gathering output for process 43868
Begin: DeduplicationTest
Creating strings: total=10, unique=5
Creating strings: total=10, unique=10
Begin: Young GC 1/6
#
# A fatal error has been detected by the Java Runtime Environment:
#
#  Internal Error (c:\\sb\\prod\\1684436204\\workspace\\open\\src\\hotspot\\share\\gc\\z\\zRelocate.cpp:378), pid=43868, tid=38256
#  assert(_generation->is_phase_relocate()) failed: Must be
#
# JRE version: Java(TM) SE Runtime Environment (21.0+24) (fastdebug build 21-ea+24-LTS-2008)
# Java VM: Java HotSpot(TM) 64-Bit Server VM (fastdebug 21-ea+24-LTS-2008, mixed mode, sharing, tiered, compressed class ptrs, z gc, windows-amd64)
# Core dump will be written. Default location: C:\\sb\\prod\\1684439107\\testoutput\\test-support\\jtreg_open_test_hotspot_jtreg_hotspot_gc\\scratch\\0\\hs_err_pid43868.mdmp
#
# An error report file with more information is saved as:
# C:\\sb\\prod\\1684439107\\testoutput\\test-support\\jtreg_open_test_hotspot_jtreg_hotspot_gc\\scratch\\0\\hs_err_pid43868.log
#
# If you would like to submit a bug report, please visit:
#   https://bugreport.java.com/bugreport/crash.jsp
#

[2023-05-18T19:48:05.089860300Z] Waiting for completion for process 43868
[2023-05-18T19:48:05.150305Z] Waiting for completion finished for process 43868
[2023-05-18T19:48:05.150305Z] Waiting for completion for process 43868
[2023-05-18T19:48:05.150871100Z] Waiting for completion finished for process 43868
[2023-05-18T19:48:05.176122800Z] Waiting for completion for process 43868
[2023-05-18T19:48:05.176688700Z] Waiting for completion finished for process 43868
----------System.err:(37/1963)*----------

 stdout: [Begin: DeduplicationTest
Creating strings: total=10, unique=5
Creating strings: total=10, unique=10
Begin: Young GC 1/6
#
# A fatal error has been detected by the Java Runtime Environment:
#
#  Internal Error (c:\\sb\\prod\\1684436204\\workspace\\open\\src\\hotspot\\share\\gc\\z\\zRelocate.cpp:378), pid=43868, tid=38256
#  assert(_generation->is_phase_relocate()) failed: Must be
#
# JRE version: Java(TM) SE Runtime Environment (21.0+24) (fastdebug build 21-ea+24-LTS-2008)
# Java VM: Java HotSpot(TM) 64-Bit Server VM (fastdebug 21-ea+24-LTS-2008, mixed mode, sharing, tiered, compressed class ptrs, z gc, windows-amd64)
# Core dump will be written. Default location: C:\\sb\\prod\\1684439107\\testoutput\\test-support\\jtreg_open_test_hotspot_jtreg_hotspot_gc\\scratch\\0\\hs_err_pid43868.mdmp
#
# An error report file with more information is saved as:
# C:\\sb\\prod\\1684439107\\testoutput\\test-support\\jtreg_open_test_hotspot_jtreg_hotspot_gc\\scratch\\0\\hs_err_pid43868.log
#
# If you would like to submit a bug report, please visit:
#   https://bugreport.java.com/bugreport/crash.jsp
#
];
 stderr: []
 exitValue = 1

java.lang.RuntimeException: Expected to get exit value of [0], exit value is: [1]
	at jdk.test.lib.process.OutputAnalyzer.shouldHaveExitValue(OutputAnalyzer.java:490)
	at gc.stringdedup.TestStringDeduplicationTools.testPrintOptions(TestStringDeduplicationTools.java:517)
	at gc.stringdedup.TestStringDeduplicationPrintOptions.main(TestStringDeduplicationPrintOptions.java:94)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
	at java.base/java.lang.reflect.Method.invoke(Method.java:578)
	at com.sun.javatest.regtest.agent.MainActionHelper$AgentVMRunnable.run(MainActionHelper.java:333)
	at java.base/java.lang.Thread.run(Thread.java:1583)

JavaTest Message: Test threw exception: java.lang.RuntimeException
JavaTest Message: shutting down test

result: Failed. Execution failed: `main' threw exception: java.lang.RuntimeException: Expected to get exit value of [0], exit value is: [1]",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8308881,,,,,,,,,,,,x86_64,,,,,,,,,windows,,,,,,"0|i31kur:",9223372036854775807,b26,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6b00f96c,,,,,,,Verified,,"2023-05-31 01:32;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/14241
Date: 2023-05-31 08:28:20 +0000;;;","2023-06-01 23:36;dukebot;Changeset: 7b0a3360
Author:    Axel Boldt-Christmas <aboldtch@openjdk.org>
Date:      2023-06-02 06:35:24 +0000
URL:       https://git.openjdk.org/jdk/commit/7b0a33600e27507546d38c53bdbc482561e1154b
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Fix build failures related to the java.awt.Robot documentation,JDK-8308370,5101237,Bug,Closed,JDK,JDK,software,duke,,,P1,Fixed,azvegint,azvegint,azvegint,2023-05-18 11:27,2023-06-14 02:23,2023-10-01 09:55,2023-05-18 11:53,21,,,,,,21,client-libs,,0,noreg-build,tier1,,,,,,,,,,,,"[2023-05-18T18:20:35,426Z] Compiling up to 2675 files for java.desktop
[2023-05-18T18:20:43,680Z] /System/Volumes/Data/mesos/work_dir/slaves/741e9afd-8c02-45c3-b2e2-9db1450d0832-S92345/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/2c91a982-81ad-47ba-b579-6abdaec6fde3/runs/4b2d70de-137a-422a-aca1-dc6f0d09ba9d/workspace/open/src/java.desktop/share/classes/java/awt/Robot.java:433: warning: empty <p> tag
[2023-05-18T18:20:43,680Z]      * <p>
[2023-05-18T18:20:43,680Z]        ^
[2023-05-18T18:20:43,680Z] /System/Volumes/Data/mesos/work_dir/slaves/741e9afd-8c02-45c3-b2e2-9db1450d0832-S92345/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/2c91a982-81ad-47ba-b579-6abdaec6fde3/runs/4b2d70de-137a-422a-aca1-dc6f0d09ba9d/workspace/open/src/java.desktop/share/classes/java/awt/Robot.java:460: warning: empty <p> tag
[2023-05-18T18:20:43,680Z]      * <p>
[2023-05-18T18:20:43,680Z]        ^
[2023-05-18T18:20:43,680Z] error: warnings found and -Werror specified
[2023-05-18T18:20:43,680Z] 1 error
[2023-05-18T18:20:43,680Z] 2 warnings
[2023-05-18T18:20:43,697Z] CompileJavaModules.gmk:94: recipe for target '/System/Volumes/Data/mesos/work_dir/slaves/741e9afd-8c02-45c3-b2e2-9db1450d0832-S92345/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/2c91a982-81ad-47ba-b579-6abdaec6fde3/runs/4b2d70de-137a-422a-aca1-dc6f0d09ba9d/workspace/build/macosx-aarch64-open/jdk/modules/java.desktop/_the.java.desktop_batch' failed
[2023-05-18T18:20:43,697Z] make[3]: *** [/System/Volumes/Data/mesos/work_dir/slaves/741e9afd-8c02-45c3-b2e2-9db1450d0832-S92345/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/2c91a982-81ad-47ba-b579-6abdaec6fde3/runs/4b2d70de-137a-422a-aca1-dc6f0d09ba9d/workspace/build/macosx-aarch64-open/jdk/modules/java.desktop/_the.java.desktop_batch] Error 1
[2023-05-18T18:20:43,699Z] make/Main.gmk:193: recipe for target 'java.desktop-java' failed
[2023-05-18T18:20:43,699Z] make[2]: *** [java.desktop-java] Error 2",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8307779,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i31kqz:",9223372036854775807,b24,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@5a9b3fd3,,,,,,,Verified,,"2023-05-18 11:33;dcubed;A Tier1 build failure is a P1 so bumping from P2 -> P1.;;;","2023-05-18 11:49;dcubed;Added 'noreg-build' label since this P1 fix will be verified by the integration build.;;;","2023-05-18 11:51;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/14050
Date: 2023-05-18 18:42:41 +0000;;;","2023-05-18 11:53;dukebot;Changeset: 02dc95e6
Author:    Alexander Zvegintsev <azvegint@openjdk.org>
Date:      2023-05-18 18:51:46 +0000
URL:       https://git.openjdk.org/jdk/commit/02dc95e6b99e5998b028e90c3fe9c64ad9f47d9e
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Increase buffer size for jspawnhelper arguments,JDK-8308350,5101212,Bug,Closed,JDK,JDK,software,duke,,,P4,Fixed,stuefe,stuefe,stuefe,2023-05-17 23:59,2023-08-24 06:14,2023-10-01 09:55,2023-05-18 07:03,11,17,20,21,,,21,core-libs,,0,amazon-interest,,,,,,,,,,,,,"jspawnhelper gets handed several file descriptors as arguments. The buffer size for this string is too small (7 chars per fd) to print out every conceivable int. This will overun the buffer if we happen to have fds larger than (printed size) 7 characters. This could lead to crashes or malfunctions if the parent VM has opened a large amount of file descriptors.

Note that on Linux, this can normally not happen since the kernel limits the number of open file descriptors per process to 1M, and these fds are still printable within the limits of this buffer. It is possible to get more fds per process, but only via kernel patch. But we still should not rely on that. And there is also still MacOS using the same mechanism.
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8307990,,,,,,,,,,,,,,,,,,,,,linux,os_x,,,,,"0|i31klf:",9223372036854775807,b24,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4c088d55,,,,,,,Verified,,"2023-05-18 00:21;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/14045
Date: 2023-05-18 07:08:57 +0000;;;","2023-05-18 07:02;dukebot;Changeset: 808dc1b0
Author:    Thomas Stuefe <stuefe@openjdk.org>
Date:      2023-05-18 14:01:08 +0000
URL:       https://git.openjdk.org/jdk/commit/808dc1b047c5a67b7397d47e38495efde022317d
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
[s390x]  build broken after JDK-8304913,JDK-8308347,5101210,Bug,Closed,JDK,JDK,software,duke,,,P2,Fixed,amitkumar,amitkumar,amitkumar,2023-05-17 22:33,2023-08-16 22:03,2023-10-01 09:55,2023-05-18 06:53,,,,,,,21,tools,,0,,,,,,,,,,,,,,"Error during build:

jdk.tools.jlink.plugin.PluginException: ModuleTarget is malformed: No enum constant jdk.internal.util.Architecture.S390X
        at jdk.jlink/jdk.tools.jlink.builder.DefaultImageBuilder.storeFiles(DefaultImageBuilder.java:181)
        at jdk.jlink/jdk.tools.jlink.internal.ImagePluginStack.storeFiles(ImagePluginStack.java:486)
        at jdk.jlink/jdk.tools.jlink.internal.ImageFileCreator.writeImage(ImageFileCreator.java:168)
        at jdk.jlink/jdk.tools.jlink.internal.ImageFileCreator.create(ImageFileCreator.java:100)
        at jdk.jlink/jdk.tools.jlink.internal.JlinkTask$ImageHelper.retrieve(JlinkTask.java:860)
        at jdk.jlink/jdk.tools.jlink.internal.ImagePluginStack.operate(ImagePluginStack.java:194)
        at jdk.jlink/jdk.tools.jlink.internal.JlinkTask.createImage(JlinkTask.java:423)
        at jdk.jlink/jdk.tools.jlink.internal.JlinkTask.run(JlinkTask.java:286)
        at jdk.jlink/jdk.tools.jlink.internal.Main.run(Main.java:56)
        at jdk.jlink/jdk.tools.jlink.internal.Main.main(Main.java:34)
Error: jdk.tools.jlink.plugin.PluginException: ModuleTarget is malformed: No enum constant jdk.internal.util.Architecture.S390X
java.io.IOException: jdk.tools.jlink.plugin.PluginException: ModuleTarget is malformed: No enum constant jdk.internal.util.Architecture.S390X
        at jdk.jlink/jdk.tools.jlink.internal.ImageFileCreator.writeImage(ImageFileCreator.java:173)
        at jdk.jlink/jdk.tools.jlink.internal.ImageFileCreator.create(ImageFileCreator.java:100)
        at jdk.jlink/jdk.tools.jlink.internal.JlinkTask$ImageHelper.retrieve(JlinkTask.java:860)
        at jdk.jlink/jdk.tools.jlink.internal.ImagePluginStack.operate(ImagePluginStack.java:194)
        at jdk.jlink/jdk.tools.jlink.internal.JlinkTask.createImage(JlinkTask.java:423)
        at jdk.jlink/jdk.tools.jlink.internal.JlinkTask.run(JlinkTask.java:286)
        at jdk.jlink/jdk.tools.jlink.internal.Main.run(Main.java:56)
        at jdk.jlink/jdk.tools.jlink.internal.Main.main(Main.java:34)
Caused by: jdk.tools.jlink.plugin.PluginException: ModuleTarget is malformed: No enum constant jdk.internal.util.Architecture.S390X
        at jdk.jlink/jdk.tools.jlink.builder.DefaultImageBuilder.storeFiles(DefaultImageBuilder.java:181)
        at jdk.jlink/jdk.tools.jlink.internal.ImagePluginStack.storeFiles(ImagePluginStack.java:486)
        at jdk.jlink/jdk.tools.jlink.internal.ImageFileCreator.writeImage(ImageFileCreator.java:168)
        ... 7 more",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8304913,,,,,,,,,,,,s390x,,,,,,,,,,,,,,,"0|i31kkz:",9223372036854775807,b24,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@3da653bd,,,,,,,Verified,,"2023-05-17 23:17;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/14043
Date: 2023-05-18 06:12:19 +0000;;;","2023-05-18 06:53;dukebot;Changeset: a58e0ca9
Author:    Amit Kumar <amitkumar@openjdk.org>
Committer: Roger Riggs <rriggs@openjdk.org>
Date:      2023-05-18 13:51:34 +0000
URL:       https://git.openjdk.org/jdk/commit/a58e0ca9d263807d7bfc0090b01bc71bff7c92db
;;;","2023-08-16 22:03;mtrudeau;I tested the build with latest commit 890adb6410dab4606a4f26a942aed02fb2f55387 with https://github.com/openjdk/jdk21 which is tagged as jdk-21+35. 
I couldn’t reproduce the issue. 

Thanks, 
Amit Kumar
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
JNI_GetCreatedJavaVMs returns a partially initialized JVM,JDK-8308341,5100921,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,dholmes,webbuggrp,webbuggrp,2023-05-15 02:35,2023-06-04 20:15,2023-10-01 09:55,2023-05-30 15:48,21,,,,,,21,hotspot,,0,additional-information-received,dcsswa,release-note=yes,reproducer-other,webbug,,,,,,,,,"ADDITIONAL SYSTEM INFORMATION :
OS: Ubuntu 22.04.2 LTS
OpenJDK compiled with debugslow from https://github.com/openjdk/jdk/ and commit 8d49ba9e8d3095f850b3007b56488a0c0cf8ddff

openjdk version ""21-internal"" 2023-09-19
OpenJDK Runtime Environment (slowdebug build 21-internal-adhoc.fpoli.jdk)
OpenJDK 64-Bit Server VM (slowdebug build 21-internal-adhoc.fpoli.jdk, mixed mode, sharing)

A DESCRIPTION OF THE PROBLEM :
`JNI_GetCreatedJavaVMs` returns a pointer to a VM that has not been fully initialized. Thus, trying to `AttachCurrentThread` on the returned VM causes an internal assertion to fail.


STEPS TO FOLLOW TO REPRODUCE THE PROBLEM :
Run `make run`. The program will crash with high probability (100% on my computer so far).

ACTUAL -
The call to `JNI_GetCreatedJavaVMs` returns a pointer to a VM that has not been fully initialized. In fact, by calling `AttachCurrentThread` on the returned VM the following debug assertion fails:

```
#
# A fatal error has been detected by the Java Runtime Environment:
#
#  Internal Error (/home/fpoli/src/jdk/src/hotspot/share/runtime/mutex.cpp:275), pid=2128085, tid=2128087
#  assert(os::mutex_init_done()) failed: Too early!
#
# JRE version:  (21.0) (slowdebug build )
# Java VM: OpenJDK 64-Bit Server VM (slowdebug 21-internal-adhoc.fpoli.jdk, mixed mode, sharing, tiered, compressed class ptrs, unknown gc, linux-amd64)
# Core dump will be written. Default location: Core dumps may be processed with ""/usr/share/apport/apport -p%p -s%s -c%c -d%d -P%P -u%u -g%g -- %E"" (or dumping to /home/fpoli/src/jni-bug/core.2128085)
#
# An error report file with more information is saved as:
# /home/fpoli/src/jni-bug/hs_err_pid2128085.log
```

---------- BEGIN SOURCE ----------
C++ code:

```
#include <jni.h>
#include <string.h>
#include <pthread.h>
#include <iostream>

using namespace std;

#define NUM_THREADS 2

void *thread_runner(void *threadid) {
    long tid;
    tid = (long)threadid;

    JavaVM *vm;
    JNIEnv *env;

    JavaVMInitArgs vm_args;
    JavaVMOption* options = new JavaVMOption[0];
    vm_args.version = JNI_VERSION_1_6;
    vm_args.nOptions = 0;
    vm_args.options = options;
    vm_args.ignoreUnrecognized = false;

    cout << ""["" << tid << ""] BEGIN JNI_CreateJavaVM"" << endl;
    jint create_res = JNI_CreateJavaVM(&vm, (void **)&env, &vm_args);
    cout << ""["" << tid << ""] END JNI_CreateJavaVM"" << endl;

    if (create_res != JNI_OK) {
        cout << ""["" << tid << ""] Error creating JVM: "" << create_res << endl;
        if (create_res == -5) {
            jsize count;

            cout << ""["" << tid << ""] BEGIN JNI_CreateJavaVM"" << endl;
            jint get_res = JNI_GetCreatedJavaVMs(&vm, 1, &count);
            cout << ""["" << tid << ""] END JNI_CreateJavaVM"" << endl;

            if (get_res != JNI_OK) {
                cout << ""["" << tid << ""] Error obtaining created JVMs: "" << get_res << endl;
                pthread_exit(NULL);
            } else {
                cout << ""["" << tid << ""] Obtained an existing JVM"" << endl;
            }

            cout << ""["" << tid << ""] BEGIN AttachCurrentThread"" << endl;
            vm->AttachCurrentThread((void **)&env, NULL);
            cout << ""["" << tid << ""] END AttachCurrentThread"" << endl;
        } else {
            pthread_exit(NULL);
        }
    } else {
        cout << ""["" << tid << ""] Created a JVM"" << endl;
    }
    delete options;

    pthread_exit(NULL);
}

int main () {
    pthread_t threads[NUM_THREADS];
    for (int i = 0; i < NUM_THREADS; i++ ) {
        cout << ""[*] Creating thread "" << i << endl;
        int status = pthread_create(&threads[i], NULL, thread_runner, (void *)i);
        if (status) {
            cout << ""[*] Error creating thread: "" << status << endl;
            exit(-1);
        }
    }
    for (int i = 0; i < NUM_THREADS; i++ ) {
        pthread_join(threads[i], NULL);
        cout << ""[*] Joined thread "" << i << endl;
    }
    return 0;
}
```

Makefile:
```
main:
	$(CXX) \
		-Wall -Wextra -g \
		-L${JAVA_HOME}/lib/server/ \
		-I${JAVA_HOME}/include/ \
		-I${JAVA_HOME}/include/linux/ \
		main.cpp \
		-ljvm

run: main
	LD_LIBRARY_PATH=""${JAVA_HOME}/lib/server/:${LD_LIBRARY_PATH}"" ./a.out
```
---------- END SOURCE ----------

CUSTOMER SUBMITTED WORKAROUND :
Unknown

FREQUENCY : often


",,,,,,,,,,,,,,,,,,,,,,,JDK-8308816,,,,,,,,,,,,,JDK-8309171,JDK-8309243,,,,,,,,,,,generic,,,,,,,,,generic,,,,,,"0|i31isr:",9223372036854775807,b25,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,,,"2023-05-17 21:15;sswsharm;The crash is reported on OpenJDK 21
crash occurred in the native thread:

Current thread is native thread

Stack: [0x00007f69ca000000,0x00007f69ca7ff000],  sp=0x00007f69ca7fd7b0,  free space=8181k
Native frames: (J=compiled Java code, j=interpreted, Vv=VM code, C=native code)
V  [libjvm.so+0x16d8d2d]  VMError::report_and_die(int, char const*, char const*, __va_list_tag*, Thread*, unsigned char*, void*, void*, char const*, int, unsigned long)+0x915  (mutex.cpp:275)
V  [libjvm.so+0x16d83bd]  (vmError.cpp:1361)
V  [libjvm.so+0xa05117]  report_vm_status_error(char const*, int, char const*, int, char const*)+0x0  (debug.cpp:191)
V  [libjvm.so+0x12874c7]  Mutex::Mutex(Mutex::Rank, char const*, bool)+0x99  (mutex.cpp:275)

Moving it to dev team for further analysis.;;;","2023-05-18 15:30;dholmes;I initially misread the test program and as there was no output shown I had the wrong impression of what is happening. Here is the output (with source code adjustments for correct method reporting):

[*] Creating thread 0
[*] Creating thread 1
[0] BEGIN JNI_CreateJavaVM
[1] BEGIN JNI_CreateJavaVM
[1] END JNI_CreateJavaVM
[1] Error creating JVM: -5
[1] BEGIN JNI_GetCreatedJavaVMs
[1] END JNI_GetCreatedJavaVMs
[1] Obtained 1 existing JVM
[1] BEGIN AttachCurrentThread
[53077813.102s][warning][os,thread] Attempt to allocate stack guard pages failed.
Segmentation fault (core dumped)

So what is happening is that thread[0] is in the process of initializing the JVM. Thread[1] attempts to create the VM as well and gets an error as expected (JNI_EEXIST). So it looks up the VM that is already in existence via GetCreatedJavaVMs and receives back the JavaVM that ithread[0] was creating, but apparently has not yet completed. thread[1] then tries to attach to that JavaVM and it fails.

The problem, per the bug report, is that GetCreatedJavaVMs is reporting too early that a JVM is available. It relies solely on the value of vm_created, but that is set to 1 early in the creation process as the guard against concurrent creation attempts - long before the VM initialization is actually complete.

;;;","2023-05-18 15:32;dholmes;A workaround would be to use synchronization e.g. a semaphore, around any calls to CreateJavaVM, such that any secondary calls will have to wait until the primary has actually completed.;;;","2023-05-18 21:16;dholmes;           jint get_res = JNI_GetCreatedJavaVMs(&vm, 1, &count);
            cout << ""["" << tid << ""] END JNI_CreateJavaVM"" << endl;

            if (get_res != JNI_OK) {
                cout << ""["" << tid << ""] Error obtaining created JVMs: "" << get_res << endl;
                pthread_exit(NULL);
            } else {
                cout << ""["" << tid << ""] Obtained an existing JVM"" << endl;
            }

Also note the above code is incorrect. JNI_GetCreatedJavaVMs will return JNI_OK even if there are zero created VMs (zeroi is a valid answer so the call should not report an error). You need to check the value of count is one otherwise you are just using a random memory location as if it were a JavaVM structure.;;;","2023-05-23 11:17;mseledtsov;Runtime Triage team: Closing as not an issue based on David's comments. This is not a JVM issue.;;;","2023-05-24 05:06;pnarayanaswa;Additional Information from submitter:
=============================
When compiling and running the provided program using OpenJDK version 20.0.1 (see info below), the JVM terminates with a segmentation fault. Running the program with `gdb` shows the following backtrace:
```
(gdb) run
Starting program: <path>/a.out 
[Thread debugging using libthread_db enabled]
Using host libthread_db library ""/lib/x86_64-linux-gnu/libthread_db.so.1"".
[*] Creating thread 0
[New Thread 0x7ffff63ff640 (LWP 2326275)]
[*] Creating thread 1
[0] BEGIN JNI_CreateJavaVM
[New Thread 0x7ffff5bfe640 (LWP 2326276)]
[1] BEGIN JNI_CreateJavaVM
[1] END JNI_CreateJavaVM
[1] Error creating JVM: -5
[1] BEGIN JNI_CreateJavaVM
[1] END JNI_CreateJavaVM
[1] Obtained an existing JVM
[1] BEGIN AttachCurrentThread

Thread 3 ""a.out"" received signal SIGSEGV, Segmentation fault.
[Switching to Thread 0x7ffff5bfe640 (LWP 2326276)]
0x00007ffff7a5bd46 in ThreadLocalAllocBuffer::initial_desired_size() () from /opt/openjdk-20.0.1/lib/server/libjvm.so
(gdb) bt
#0  0x00007ffff7a5bd46 in ThreadLocalAllocBuffer::initial_desired_size() () from /opt/openjdk-20.0.1/lib/server/libjvm.so
#1  0x00007ffff7a5bdb4 in ThreadLocalAllocBuffer::initialize() () from /opt/openjdk-20.0.1/lib/server/libjvm.so
#2  0x00007ffff7559524 in attach_current_thread.part () from /opt/openjdk-20.0.1/lib/server/libjvm.so
#3  0x000055555555595a in JavaVM_::AttachCurrentThread (this=0x7ffff7eecf80 <main_vm>, penv=0x7ffff5bfdd98, args=0x0) at /opt/openjdk-20.0.1/include/jni.h:1950
#4  0x0000555555555676 in thread_runner (threadid=0x1) at main.cpp:45
#5  0x00007ffff6494b43 in start_thread (arg=<optimized out>) at ./nptl/pthread_create.c:442
#6  0x00007ffff6526a00 in clone3 () at ../sysdeps/unix/sysv/linux/x86_64/clone3.S:81
```

JDK version:
```
openjdk version ""20.0.1"" 2023-04-18
OpenJDK Runtime Environment (build 20.0.1+9-29)
OpenJDK 64-Bit Server VM (build 20.0.1+9-29, mixed mode, sharing)
```;;;","2023-05-24 16:49;dholmes;Reopening. As I wrote above:

The problem, per the bug report, is that GetCreatedJavaVMs is reporting too early that a JVM is available. It relies solely on the value of vm_created, but that is set to 1 early in the creation process as the guard against concurrent creation attempts - long before the VM initialization is actually complete. 

I have a fix in-progress but there is a subtle change in behaviour that might cause racy code that has been working (by luck) to start failing.;;;","2023-05-24 22:08;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/14139
Date: 2023-05-25 05:02:19 +0000;;;","2023-05-30 15:48;dukebot;Changeset: 1e6770fb
Author:    David Holmes <dholmes@openjdk.org>
Date:      2023-05-30 22:46:06 +0000
URL:       https://git.openjdk.org/jdk/commit/1e6770fb978e630b38a70a05120c50f723bb66dc
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Test java/net/HttpURLConnection/HttpURLConnectionExpectContinueTest.java failed: java.net.BindException: Address already in use,JDK-8308336,5101197,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,dclarke,dholmes,dholmes,2023-05-17 16:09,2023-07-04 16:37,2023-10-01 09:55,2023-06-09 07:07,21,,,,,,22,core-libs,,0,hgupdate-sync,intermittent,noreg-self,sbr,tier2,ursqe-triaged,,,,,,,,"Test: java/net/HttpURLConnection/HttpURLConnectionExpectContinueTest.java

---------System.err:(114/10845)----------
java.net.BindException: Address already in use
	at java.base/sun.nio.ch.Net.bind0(Native Method)
	at java.base/sun.nio.ch.Net.bind(Net.java:565)
	at java.base/sun.nio.ch.Net.bind(Net.java:554)
	at java.base/sun.nio.ch.NioSocketImpl.bind(NioSocketImpl.java:636)
	at java.base/java.net.ServerSocket.bind(ServerSocket.java:391)
	at java.base/java.net.ServerSocket.bind(ServerSocket.java:342)
	at HttpURLConnectionExpectContinueTest.startServerSocket(HttpURLConnectionExpectContinueTest.java:76)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
	at java.base/java.lang.reflect.Method.invoke(Method.java:578)
	at org.junit.platform.commons.util.ReflectionUtils.invokeMethod(ReflectionUtils.java:727)
	at org.junit.jupiter.engine.execution.MethodInvocation.proceed(MethodInvocation.java:60)
	at org.junit.jupiter.engine.execution.InvocationInterceptorChain$ValidatingInvocation.proceed(InvocationInterceptorChain.java:131)
	at org.junit.jupiter.engine.extension.TimeoutExtension.intercept(TimeoutExtension.java:156)
	at org.junit.jupiter.engine.extension.TimeoutExtension.interceptLifecycleMethod(TimeoutExtension.java:128)
	at org.junit.jupiter.engine.extension.TimeoutExtension.interceptBeforeAllMethod(TimeoutExtension.java:70)
	at org.junit.jupiter.engine.execution.InterceptingExecutableInvoker$ReflectiveInterceptorCall.lambda$ofVoidMethod$0(InterceptingExecutableInvoker.java:103)
	at org.junit.jupiter.engine.execution.InterceptingExecutableInvoker.lambda$invoke$0(InterceptingExecutableInvoker.java:93)
	at org.junit.jupiter.engine.execution.InvocationInterceptorChain$InterceptedInvocation.proceed(InvocationInterceptorChain.java:106)
	at org.junit.jupiter.engine.execution.InvocationInterceptorChain.proceed(InvocationInterceptorChain.java:64)
	at org.junit.jupiter.engine.execution.InvocationInterceptorChain.chainAndInvoke(InvocationInterceptorChain.java:45)
	at org.junit.jupiter.engine.execution.InvocationInterceptorChain.invoke(InvocationInterceptorChain.java:37)
	at org.junit.jupiter.engine.execution.InterceptingExecutableInvoker.invoke(InterceptingExecutableInvoker.java:92)
	at org.junit.jupiter.engine.execution.InterceptingExecutableInvoker.invoke(InterceptingExecutableInvoker.java:86)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$invokeBeforeAllMethods$13(ClassBasedTestDescriptor.java:411)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.invokeBeforeAllMethods(ClassBasedTestDescriptor.java:409)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.before(ClassBasedTestDescriptor.java:215)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.before(ClassBasedTestDescriptor.java:84)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$6(NodeTestTask.java:148)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:141)
	at org.junit.platform.engine.support.hierarchical.Node.around(Node.java:137)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$9(NodeTestTask.java:139)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:138)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:95)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1593)
	at org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.invokeAll(SameThreadHierarchicalTestExecutorService.java:41)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$6(NodeTestTask.java:155)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:141)
	at org.junit.platform.engine.support.hierarchical.Node.around(Node.java:137)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$9(NodeTestTask.java:139)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:138)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:95)
	at org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.submit(SameThreadHierarchicalTestExecutorService.java:35)
	at org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.execute(HierarchicalTestExecutor.java:57)
	at org.junit.platform.engine.support.hierarchical.HierarchicalTestEngine.execute(HierarchicalTestEngine.java:54)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:147)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:127)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:90)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.lambda$execute$0(EngineExecutionOrchestrator.java:55)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.withInterceptedStreams(EngineExecutionOrchestrator.java:102)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:54)
	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:114)
	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:86)
	at org.junit.platform.launcher.core.DefaultLauncherSession$DelegatingLauncher.execute(DefaultLauncherSession.java:86)
	at com.sun.javatest.regtest.agent.JUnitRunner.runWithJUnitPlatform(JUnitRunner.java:142)
	at com.sun.javatest.regtest.agent.JUnitRunner.main(JUnitRunner.java:95)
	at com.sun.javatest.regtest.agent.JUnitRunner.main(JUnitRunner.java:61)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
	at java.base/java.lang.reflect.Method.invoke(Method.java:578)
	at com.sun.javatest.regtest.agent.MainWrapper$MainTask.run(MainWrapper.java:138)
	at java.base/java.lang.Thread.run(Thread.java:1583)
	Suppressed: java.lang.NullPointerException: Cannot invoke ""java.lang.Thread.join()"" because ""this.serverThread"" is null
		at HttpURLConnectionExpectContinueTest.stopServerSocket(HttpURLConnectionExpectContinueTest.java:178)
		at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
		at java.base/java.lang.reflect.Method.invoke(Method.java:578)
		at org.junit.platform.commons.util.ReflectionUtils.invokeMethod(ReflectionUtils.java:727)
		at org.junit.jupiter.engine.execution.MethodInvocation.proceed(MethodInvocation.java:60)
		at org.junit.jupiter.engine.execution.InvocationInterceptorChain$ValidatingInvocation.proceed(InvocationInterceptorChain.java:131)
		at org.junit.jupiter.engine.extension.TimeoutExtension.intercept(TimeoutExtension.java:156)
		at org.junit.jupiter.engine.extension.TimeoutExtension.interceptLifecycleMethod(TimeoutExtension.java:128)
		at org.junit.jupiter.engine.extension.TimeoutExtension.interceptAfterAllMethod(TimeoutExtension.java:118)
		at org.junit.jupiter.engine.execution.InterceptingExecutableInvoker$ReflectiveInterceptorCall.lambda$ofVoidMethod$0(InterceptingExecutableInvoker.java:103)
		at org.junit.jupiter.engine.execution.InterceptingExecutableInvoker.lambda$invoke$0(InterceptingExecutableInvoker.java:93)
		at org.junit.jupiter.engine.execution.InvocationInterceptorChain$InterceptedInvocation.proceed(InvocationInterceptorChain.java:106)
		at org.junit.jupiter.engine.execution.InvocationInterceptorChain.proceed(InvocationInterceptorChain.java:64)
		at org.junit.jupiter.engine.execution.InvocationInterceptorChain.chainAndInvoke(InvocationInterceptorChain.java:45)
		at org.junit.jupiter.engine.execution.InvocationInterceptorChain.invoke(InvocationInterceptorChain.java:37)
		at org.junit.jupiter.engine.execution.InterceptingExecutableInvoker.invoke(InterceptingExecutableInvoker.java:92)
		at org.junit.jupiter.engine.execution.InterceptingExecutableInvoker.invoke(InterceptingExecutableInvoker.java:86)
		at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$invokeAfterAllMethods$15(ClassBasedTestDescriptor.java:439)
		at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
		at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$invokeAfterAllMethods$16(ClassBasedTestDescriptor.java:437)
		at java.base/java.util.ArrayList.forEach(ArrayList.java:1593)
		at java.base/java.util.Collections$UnmodifiableCollection.forEach(Collections.java:1116)
		at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.invokeAfterAllMethods(ClassBasedTestDescriptor.java:437)
		at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.after(ClassBasedTestDescriptor.java:231)
		at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.after(ClassBasedTestDescriptor.java:84)
		at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$7(NodeTestTask.java:161)
		at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
		at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:161)
		... 34 more
JavaTest Message: JUnit Platform Failure(s): 1",,,,,,,,,,,JDK-8310556,JDK-8311323,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i31ki3:",9223372036854775807,b02,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@446e124a,,,,,,,,,"2023-05-26 06:04;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/14177
Date: 2023-05-26 12:57:59 +0000;;;","2023-06-07 03:09;msheppar;
based on Daniel's last GitHub comment and requested change then I think it would be useful to add two additional run requests to the test which set the network properties  preferIPv4Stack=true and preferIPv6Addresses=true, for completeness.
You never know what might ""pop out of the woodwork"" ;;;","2023-06-08 08:21;msheppar;[~dfuchs]
""No that's precisely what we want to avoid. Because how ""localhost"" maps to an InetAddress depends on the machine configuration, which is a recipe for intermittent failures.""

The intermittent failure for this test is due the hardcoded port number ...  I'd be interested in some examples of localhost mapping causing intermittent failures. It will either map to 127.0.0.1 or ::1 ....how can this cause intermittent failures ?

If test are experiencing such issues then applications will encounter them also !!!;;;","2023-06-09 07:07;dukebot;Changeset: a48bcf36
Author:    Darragh Clarke <Darragh.clarke@oracle.com>
Committer: Daniel Fuchs <dfuchs@openjdk.org>
Date:      2023-06-09 14:06:00 +0000
URL:       https://git.openjdk.org/jdk/commit/a48bcf367120fc7cde88b19097dabe9c86c90bb7
;;;","2023-06-18 06:19;msheppar;with the new arrangement of back porting to a current releases forked repo, do we expect that this will appear in JDK21 mainline ?;;;","2023-06-19 02:23;dfuchs;This is a test bug with noreg-self and no code changes so we can envisage a backport. It's also a tier2 test causing intermittent failures in the CI - so it's probably worth backporting.
[~dclarke] could you take care of backporting to 21?

https://openjdk.org/jeps/3#Integrating-fixes-and-enhancements
https://openjdk.org/jeps/3#rdp-1

> Bugs and enhancements of any priority that only affect tests, or test-problem lists, or documentation may be addressed in RDP 1 and RDP 2. You don’t need to request approval for such a change in order to integrate it, but please do make sure that the issue has a noreg-self or noreg-doc label, as appropriate.;;;","2023-06-21 04:42;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk21/pull/52
Date: 2023-06-21 11:36:28 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Default decomposition mode in Collator,JDK-8308316,5101176,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,naoto,naoto,naoto,2023-05-17 12:30,2023-06-04 20:16,2023-10-01 09:55,2023-05-31 08:58,,,,,,,21,core-libs,,0,noreg-doc,,,,,,,,,,,,,"The description of `Collator.NO_DECOMPOSITION` reads it is the default decomposition mode, but the implementation in Collator's constructor sets the decomposition to `CANONICAL_DECOMPOSITION`. Although the `RuleBasedCollator` which is the sole implementation within the JDK sets the decomposition to `NO_DECOMPOSITION`, It should be up to the implementation of Collator which makes the default, so the description in `NO_DECOMPOSITION` needs to be amended. (Changing the implementation since 1.1 would be too risky)

PoC which returns `CANONICAL_DECOMPOSITION` by default:
```
new RuleBasedCollator(""< a< b< c< d"").getDecomposition() == Collator.NO_DECOMPOSITION // false
```",,,,,,,,,,,,,,,,,,,,,,,JDK-8308369,,,,,,,,,,,,,,,,,,,,,,,,,generic,,,,,,,,,generic,,,,,,"0|i31kdf:",9223372036854775807,b25,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6fc9e792,,,,,,,,,"2023-05-18 11:15;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/14049
Date: 2023-05-18 18:02:32 +0000;;;","2023-05-31 08:58;dukebot;Changeset: 12649025
Author:    Naoto Sato <naoto@openjdk.org>
Date:      2023-05-31 15:56:40 +0000
URL:       https://git.openjdk.org/jdk/commit/126490251721d131098a0bc2def8fd02f97cd5af
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Compiler should fail when a local variable declaration does not include an Identifier and does not have an initializer,JDK-8308312,5101172,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,abimpoudis,ymaslyanko,ymaslyanko,2023-05-17 11:54,2023-05-28 20:46,2023-10-01 09:55,2023-05-22 01:56,,,,,,,21,tools,,0,conformance,,,,,,,,,,,,,"Based on the latest draft spec, the compiler should fail in two cases mentioned in the following assertion:

Chapter 14: Blocks, Statements, and Patterns
14.4 Local Variable Declarations
Assertion:
It is a compile-time error if a local variable declaration that does not include an Identifier and does not have an initializer is used in the following locations:
    * a local variable declaration statement in a block (14.4.2)
    * the header of a basic for statement (14.14.1)

However, the following code where an underscore is used without an intitializer compiles without any failures:
        {
            int _;
            int x1 = 1, _, x2;
        }

        for (int x = 1, _; x<=1; x++) {
        }

java -version
java version ""21-internal"" 2023-09-19 LTS
Java(TM) SE Runtime Environment (build 21-internal-LTS-2023-05-05-1610040.angelos.bimpoudis.dev)
Java HotSpot(TM) 64-Bit Server VM (build 21-internal-LTS-2023-05-05-1610040.angelos.bimpoudis.dev, mixed mode, sharing)",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i31kcj:",9223372036854775807,b24,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4dca67bd,,,,,,,,,"2023-05-17 15:53;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/13528
Date: 2023-04-19 09:47:39 +0000;;;","2023-05-22 01:56;dukebot;Changeset: 8aa50288
Author:    Aggelos Biboudis <abimpoudis@openjdk.org>
Committer: Jan Lahoda <jlahoda@openjdk.org>
Date:      2023-05-22 08:52:36 +0000
URL:       https://git.openjdk.org/jdk/commit/8aa50288a1a6a853bf4d8d97b1849d5744ed7a32
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
HttpClient: Avoid logging or locking from within synchronized blocks,JDK-8308310,5101170,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,dfuchs,dfuchs,dfuchs,2023-05-17 11:32,2023-05-31 23:25,2023-10-01 09:55,2023-05-24 07:25,21,,,,,,21,core-libs,,0,httpclient,noreg-cleanup,,,,,,,,,,,,"Logging, or locking, from within synchronized blocks could cause a carrier thread to be pinned if there is contention on the lock access.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8309120,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i31kc3:",9223372036854775807,b25,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@446e124a,,,,,,,,,"2023-05-17 11:52;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/14038
Date: 2023-05-17 18:46:35 +0000;;;","2023-05-24 07:25;dukebot;Changeset: 736b90d5
Author:    Daniel Fuchs <dfuchs@openjdk.org>
Date:      2023-05-24 14:23:24 +0000
URL:       https://git.openjdk.org/jdk/commit/736b90d54b51830de7757a8de3ad9c98437c824a
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Compiler should accept mixed masked and unmasked variables in lambda parameters,JDK-8308309,5101169,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,abimpoudis,eananeva,eananeva,2023-05-17 11:12,2023-05-28 20:46,2023-10-01 09:55,2023-05-22 01:56,,,,,,,21,tools,,0,conformance,,,,,,,,,,,,,"Spec (https://cr.openjdk.org/~abimpoudis/unnamed/jep443-20230322/specs/unnamed-jls.html#jls-6.1) says:

If a declaration does not include an identifier, but instead includes a mask (_, underscore), then the entity cannot be referred to by name. The following kinds of entity may be declared using a mask:
A formal parameter of a lambda expression (15.27.1)

There is no assertion expecting a compiler-time error when there are mixed masked and unmasked variables in lambda parameter list.

Compiler, however, throws an error:

interface Foo {
    int foo(int a, int b);
}
…
Foo o = (int _, int b) -> { return 1;}; //error here

invalid lambda parameter declaration
  (cannot mix implicitly-typed and explicitly-typed parameters)

java --version
java 21-internal 2023-09-19 LTS
Java(TM) SE Runtime Environment (build 21-internal-LTS-2023-05-05-1610040.angelos.bimpoudis.dev)
Java HotSpot(TM) 64-Bit Server VM (build 21-internal-LTS-2023-05-05-1610040.angelos.bimpoudis.dev, mixed mode, sharing)


",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i31kbv:",9223372036854775807,b24,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4dca67bd,,,,,,,,,"2023-05-17 15:55;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/13528
Date: 2023-04-19 09:47:39 +0000;;;","2023-05-22 01:56;dukebot;Changeset: 8aa50288
Author:    Aggelos Biboudis <abimpoudis@openjdk.org>
Committer: Jan Lahoda <jlahoda@openjdk.org>
Date:      2023-05-22 08:52:36 +0000
URL:       https://git.openjdk.org/jdk/commit/8aa50288a1a6a853bf4d8d97b1849d5744ed7a32
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Update to Visual Studio 2022 version 17.5.0 on Windows,JDK-8308308,5101168,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,kcr,kcr,kcr,2023-05-17 11:05,2023-09-01 06:29,2023-10-01 09:55,2023-06-01 10:44,jfx21,,,,,,jfx21,javafx,,0,noreg-build,sn_144,sn_145,,,,,,,,,,,We are currently using Visual Studio 2022 version 17.1.0. We should update to Visual Studio 2022 version 17.5.0.,,,,,,,,,,,JDK-8309654,JDK-8315542,JDK-8309315,JDK-8309652,,,,,JDK-8303748,,JDK-8283809,JDK-8307548,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,windows,,,,,,"0|i31kbn:",9223372036854775807,b21,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@1556b386,,,,,,,,,"2023-05-17 11:10;kcr;Note: this is blocked by the following bug:

JDK-8303748: WebKit build fails with Visual Studio 2022 17.5.0

The likely fix for that bug will be to build the existing WebKit 615.1 sources using C++20 mode, in which case this compiler update and that fix will need to be in the same PR.;;;","2023-05-23 07:05;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jfx/pull/1142
Date: 2023-05-20 14:58:40 +0000;;;","2023-06-01 10:44;dukebot;Changeset: 8fc1a256
Author:    Kevin Rushforth <kcr@openjdk.org>
Date:      2023-06-01 17:43:33 +0000
URL:       https://git.openjdk.org/jfx/commit/8fc1a256a90fa02bbf775317de3158c81e7b950d
;;;","2023-09-01 06:08;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jfx17u/pull/139
Date: 2023-09-01 13:03:03 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Update to gcc 12.2.0 on Linux,JDK-8308307,5101166,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,kcr,kcr,kcr,2023-05-17 11:02,2023-09-01 04:21,2023-10-01 09:55,2023-05-30 11:58,jfx21,,,,,,jfx21,javafx,,0,noreg-build,sn_144,sn_145,,,,,,,,,,,We are currently using gcc 11.2 on Linux. We should upgrade to gcc 12.2.,,,,,,,,,,,JDK-8309480,JDK-8309479,JDK-8315526,JDK-8309314,,,,,,,JDK-8307548,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,linux,,,,,,"0|i31kb7:",9223372036854775807,b20,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@1556b386,,,,,,,,,"2023-05-23 07:05;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jfx/pull/1141
Date: 2023-05-20 14:56:16 +0000;;;","2023-05-30 11:58;dukebot;Changeset: 5bbb95b1
Author:    Kevin Rushforth <kcr@openjdk.org>
Date:      2023-05-30 18:56:06 +0000
URL:       https://git.openjdk.org/jfx/commit/5bbb95b1443ca9e2dbf1d1536e5f76071d37f1c4
;;;","2023-09-01 02:41;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jfx17u/pull/135
Date: 2023-09-01 09:35:04 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Update to Xcode 14.3 on macOS,JDK-8308306,5101165,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,kcr,kcr,kcr,2023-05-17 10:58,2023-09-01 06:05,2023-10-01 09:55,2023-05-30 11:54,jfx21,,,,,,jfx21,javafx,,0,noreg-build,sn_144,sn_145,,,,,,,,,,,"We currently use Xcode 12.4 to build JavaFX on macOS. We should upgrade to Xcode 14.3.

This will require building on macOS 13 (Ventura) or later. The JavaFX binaries built on 13 will still be able to run on earlier versions (e.g., macOS 11 Big Sur).
",,,,,,,,,,,JDK-8309478,JDK-8315536,JDK-8309477,JDK-8309313,,,,,,,JDK-8307548,,,,,,,,,,,,,,,JDK-8311776,JDK-8308114,,,,,,,,,,,,,,,,,,,,os_x,,,,,,"0|i31kaz:",9223372036854775807,b20,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@1556b386,,,,,,,,,"2023-05-23 07:05;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jfx/pull/1140
Date: 2023-05-20 14:47:50 +0000;;;","2023-05-30 11:54;dukebot;Changeset: 2833a53a
Author:    Kevin Rushforth <kcr@openjdk.org>
Date:      2023-05-30 18:53:25 +0000
URL:       https://git.openjdk.org/jfx/commit/2833a53ad1b40675c8eb6c3f19631bd0d3df5198
;;;","2023-09-01 05:47;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jfx17u/pull/138
Date: 2023-09-01 12:43:35 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
[Lilliput/JDK17] Cherry-pick: 8275415: Prepare Leak Profiler for Lilliput,JDK-8308296,5101155,Bug,Resolved,JDK,JDK,software,duke,,,P2,Fixed,rkennke,rkennke,rkennke,2023-05-17 09:18,2023-07-26 10:41,2023-10-01 09:55,2023-07-26 10:41,repo-lilliput-17,,,,,,repo-lilliput-17,hotspot,,0,lilliput,,,,,,,,,,,,,"We should cherry-pick JDK-8275415 into Lilliput/JDK17, otherwise running leak-profiler with Lilliput would crash.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,generic,,,,,,,,,generic,,,,,,"0|i31k8r:",9223372036854775807,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@42995637,,,,,,,,,"2023-05-17 09:34;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/lilliput-jdk17u/pull/20
Date: 2023-05-17 16:21:49 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
A linker should expose the layouts it supports,JDK-8308293,5101151,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,mcimadamore,mcimadamore,mcimadamore,2023-05-17 08:18,2023-06-27 09:20,2023-10-01 09:55,2023-06-19 04:30,21,,,,,,repo-panama,core-libs,,0,foreign-memaccess+abi,,,,,,,,,,,,,"When working with the Linker, it can be difficult to discover which C types does the linker support. For instance, if some code needs to work with a C ""long"", what is its corresponding ""canonical layout"" for a given linker instance?

Such layout will obviously depend on the platform for which the linker is defined (e.g. on Linux/x64 such a layout would be equivalent to JAVA_LONG, on Windows/x64 such a layout would be equivalent to a JAVA_INT).

Since the set of types supported by a linker is linker-specific, the API should capture this property in a very loose fashion - e.g. just a map from ABI type names to canonical layouts.",,,,,,,,,,,,,,,,,,,,,,,JDK-8308304,,,JDK-8306897,,,,,,JDK-8310967,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i31k7v:",9223372036854775807,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@28ce6b78,,,,,,,,,"2023-05-17 10:51;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/14037
Date: 2023-05-17 17:15:06 +0000;;;","2023-06-15 03:36;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/panama-foreign/pull/839
Date: 2023-06-15 10:27:53 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
compiler/jvmci/meta/ProfilingInfoTest.java fails with -XX:TieredStopAtLevel=1,JDK-8308291,5101149,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,never,lmesnik,lmesnik,2023-05-17 08:07,2023-05-31 23:25,2023-10-01 09:55,2023-05-24 11:41,21,,,,,,21,hotspot,,0,jvmci,noreg-self,oracle-triage-21,,,,,,,,,,,"Test
compiler/jvmci/meta/ProfilingInfoTest.java 
fails with -XX:TieredStopAtLevel=1
because can't find some profile info

log:
STARTED    compiler.jvmci.meta.ProfilingInfoTest::testExceptionSeen 'testExceptionSeen'
SUCCESSFUL compiler.jvmci.meta.ProfilingInfoTest::testExceptionSeen 'testExceptionSeen'
STARTED    compiler.jvmci.meta.ProfilingInfoTest::testSwitchProbabilities 'testSwitchProbabilities'
java.lang.AssertionError: actual array was null
	at org.junit.Assert.fail(Assert.java:89)
	at org.junit.internal.ComparisonCriteria.arrayEquals(ComparisonCriteria.java:49)
	at org.junit.internal.ComparisonCriteria.arrayEquals(ComparisonCriteria.java:28)
	at org.junit.Assert.assertArrayEquals(Assert.java:471)
	at org.junit.Assert.assertArrayEquals(Assert.java:485)
	at compiler.jvmci.meta.ProfilingInfoTest.testSwitchProbabilities(ProfilingInfoTest.java:118)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
	at java.base/java.lang.reflect.Method.invoke(Method.java:578)
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:59)
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:56)
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
	at org.junit.runners.ParentRunner$3.evaluate(ParentRunner.java:306)
	at org.junit.runners.BlockJUnit4ClassRunner$1.evaluate(BlockJUnit4ClassRunner.java:100)
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:366)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:103)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:63)
	at org.junit.runners.ParentRunner$4.run(ParentRunner.java:331)
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:79)
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:329)
	at org.junit.runners.ParentRunner.access$100(ParentRunner.java:66)
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:293)
	at org.junit.runners.ParentRunner$3.evaluate(ParentRunner.java:306)
	at org.junit.runners.ParentRunner.run(ParentRunner.java:413)
	at org.junit.runner.JUnitCore.run(JUnitCore.java:137)
	at org.junit.runner.JUnitCore.run(JUnitCore.java:115)
	at org.junit.vintage.engine.execution.RunnerExecutor.execute(RunnerExecutor.java:42)
	at org.junit.vintage.engine.VintageTestEngine.executeAllChildren(VintageTestEngine.java:80)
	at org.junit.vintage.engine.VintageTestEngine.execute(VintageTestEngine.java:72)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:147)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:127)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:90)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.lambda$execute$0(EngineExecutionOrchestrator.java:55)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.withInterceptedStreams(EngineExecutionOrchestrator.java:102)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:54)
	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:114)
	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:86)
	at org.junit.platform.launcher.core.DefaultLauncherSession$DelegatingLauncher.execute(DefaultLauncherSession.java:86)
	at com.sun.javatest.regtest.agent.JUnitRunner.runWithJUnitPlatform(JUnitRunner.java:142)
	at com.sun.javatest.regtest.agent.JUnitRunner.main(JUnitRunner.java:95)
	at com.sun.javatest.regtest.agent.JUnitRunner.main(JUnitRunner.java:61)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
	at java.base/java.lang.reflect.Method.invoke(Method.java:578)
	at com.sun.javatest.regtest.agent.MainWrapper$MainTask.run(MainWrapper.java:138)
	at java.base/java.lang.Thread.run(Thread.java:1583)
FAILED     compiler.jvmci.meta.ProfilingInfoTest::testSwitchProbabilities 'testSwitchProbabilities'
STARTED    compiler.jvmci.meta.ProfilingInfoTest::testNullSeen 'testNullSeen'
java.lang.AssertionError: expected:<FALSE> but was:<UNKNOWN>
	at org.junit.Assert.fail(Assert.java:89)
	at org.junit.Assert.failNotEquals(Assert.java:835)
	at org.junit.Assert.assertEquals(Assert.java:120)
	at org.junit.Assert.assertEquals(Assert.java:146)
	at compiler.jvmci.meta.ProfilingInfoTest.testNullSeen(ProfilingInfoTest.java:301)
	at compiler.jvmci.meta.ProfilingInfoTest.testNullSeen(ProfilingInfoTest.java:295)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
	at java.base/java.lang.reflect.Method.invoke(Method.java:578)
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:59)
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:56)
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
	at org.junit.runners.ParentRunner$3.evaluate(ParentRunner.java:306)
	at org.junit.runners.BlockJUnit4ClassRunner$1.evaluate(BlockJUnit4ClassRunner.java:100)
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:366)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:103)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:63)
	at org.junit.runners.ParentRunner$4.run(ParentRunner.java:331)
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:79)
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:329)
	at org.junit.runners.ParentRunner.access$100(ParentRunner.java:66)
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:293)
	at org.junit.runners.ParentRunner$3.evaluate(ParentRunner.java:306)
	at org.junit.runners.ParentRunner.run(ParentRunner.java:413)
	at org.junit.runner.JUnitCore.run(JUnitCore.java:137)
	at org.junit.runner.JUnitCore.run(JUnitCore.java:115)
	at org.junit.vintage.engine.execution.RunnerExecutor.execute(RunnerExecutor.java:42)
	at org.junit.vintage.engine.VintageTestEngine.executeAllChildren(VintageTestEngine.java:80)
	at org.junit.vintage.engine.VintageTestEngine.execute(VintageTestEngine.java:72)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:147)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:127)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:90)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.lambda$execute$0(EngineExecutionOrchestrator.java:55)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.withInterceptedStreams(EngineExecutionOrchestrator.java:102)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:54)
	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:114)
	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:86)
	at org.junit.platform.launcher.core.DefaultLauncherSession$DelegatingLauncher.execute(DefaultLauncherSession.java:86)
	at com.sun.javatest.regtest.agent.JUnitRunner.runWithJUnitPlatform(JUnitRunner.java:142)
	at com.sun.javatest.regtest.agent.JUnitRunner.main(JUnitRunner.java:95)
	at com.sun.javatest.regtest.agent.JUnitRunner.main(JUnitRunner.java:61)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
	at java.base/java.lang.reflect.Method.invoke(Method.java:578)
	at com.sun.javatest.regtest.agent.MainWrapper$MainTask.run(MainWrapper.java:138)
	at java.base/java.lang.Thread.run(Thread.java:1583)
FAILED     compiler.jvmci.meta.ProfilingInfoTest::testNullSeen 'testNullSeen'
STARTED    compiler.jvmci.meta.ProfilingInfoTest::testProfileInvokeVirtual 'testProfileInvokeVirtual'
java.lang.NullPointerException: Cannot invoke ""jdk.vm.ci.meta.JavaTypeProfile.getNotRecordedProbability()"" because ""<local7>"" is null
	at compiler.jvmci.meta.ProfilingInfoTest.testTypeProfile(ProfilingInfoTest.java:188)
	at compiler.jvmci.meta.ProfilingInfoTest.testProfileInvokeVirtual(ProfilingInfoTest.java:143)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
	at java.base/java.lang.reflect.Method.invoke(Method.java:578)
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:59)
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:56)
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
	at org.junit.runners.ParentRunner$3.evaluate(ParentRunner.java:306)
	at org.junit.runners.BlockJUnit4ClassRunner$1.evaluate(BlockJUnit4ClassRunner.java:100)
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:366)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:103)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:63)
	at org.junit.runners.ParentRunner$4.run(ParentRunner.java:331)
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:79)
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:329)
	at org.junit.runners.ParentRunner.access$100(ParentRunner.java:66)
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:293)
	at org.junit.runners.ParentRunner$3.evaluate(ParentRunner.java:306)
	at org.junit.runners.ParentRunner.run(ParentRunner.java:413)
	at org.junit.runner.JUnitCore.run(JUnitCore.java:137)
	at org.junit.runner.JUnitCore.run(JUnitCore.java:115)
	at org.junit.vintage.engine.execution.RunnerExecutor.execute(RunnerExecutor.java:42)
	at org.junit.vintage.engine.VintageTestEngine.executeAllChildren(VintageTestEngine.java:80)
	at org.junit.vintage.engine.VintageTestEngine.execute(VintageTestEngine.java:72)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:147)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:127)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:90)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.lambda$execute$0(EngineExecutionOrchestrator.java:55)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.withInterceptedStreams(EngineExecutionOrchestrator.java:102)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:54)
	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:114)
	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:86)
	at org.junit.platform.launcher.core.DefaultLauncherSession$DelegatingLauncher.execute(DefaultLauncherSession.java:86)
	at com.sun.javatest.regtest.agent.JUnitRunner.runWithJUnitPlatform(JUnitRunner.java:142)
	at com.sun.javatest.regtest.agent.JUnitRunner.main(JUnitRunner.java:95)
	at com.sun.javatest.regtest.agent.JUnitRunner.main(JUnitRunner.java:61)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
	at java.base/java.lang.reflect.Method.invoke(Method.java:578)
	at com.sun.javatest.regtest.agent.MainWrapper$MainTask.run(MainWrapper.java:138)
	at java.base/java.lang.Thread.run(Thread.java:1583)
FAILED     compiler.jvmci.meta.ProfilingInfoTest::testProfileInvokeVirtual 'testProfileInvokeVirtual'
STARTED    compiler.jvmci.meta.ProfilingInfoTest::testTypeProfileInstanceOf 'testTypeProfileInstanceOf'
java.lang.NullPointerException: Cannot invoke ""jdk.vm.ci.meta.JavaTypeProfile.getNotRecordedProbability()"" because ""<local7>"" is null
	at compiler.jvmci.meta.ProfilingInfoTest.testTypeProfile(ProfilingInfoTest.java:188)
	at compiler.jvmci.meta.ProfilingInfoTest.testTypeProfileInstanceOf(ProfilingInfoTest.java:174)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
	at java.base/java.lang.reflect.Method.invoke(Method.java:578)
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:59)
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:56)
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
	at org.junit.runners.ParentRunner$3.evaluate(ParentRunner.java:306)
	at org.junit.runners.BlockJUnit4ClassRunner$1.evaluate(BlockJUnit4ClassRunner.java:100)
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:366)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:103)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:63)
	at org.junit.runners.ParentRunner$4.run(ParentRunner.java:331)
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:79)
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:329)
	at org.junit.runners.ParentRunner.access$100(ParentRunner.java:66)
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:293)
	at org.junit.runners.ParentRunner$3.evaluate(ParentRunner.java:306)
	at org.junit.runners.ParentRunner.run(ParentRunner.java:413)
	at org.junit.runner.JUnitCore.run(JUnitCore.java:137)
	at org.junit.runner.JUnitCore.run(JUnitCore.java:115)
	at org.junit.vintage.engine.execution.RunnerExecutor.execute(RunnerExecutor.java:42)
	at org.junit.vintage.engine.VintageTestEngine.executeAllChildren(VintageTestEngine.java:80)
	at org.junit.vintage.engine.VintageTestEngine.execute(VintageTestEngine.java:72)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:147)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:127)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:90)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.lambda$execute$0(EngineExecutionOrchestrator.java:55)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.withInterceptedStreams(EngineExecutionOrchestrator.java:102)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:54)
	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:114)
	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:86)
	at org.junit.platform.launcher.core.DefaultLauncherSession$DelegatingLauncher.execute(DefaultLauncherSession.java:86)
	at com.sun.javatest.regtest.agent.JUnitRunner.runWithJUnitPlatform(JUnitRunner.java:142)
	at com.sun.javatest.regtest.agent.JUnitRunner.main(JUnitRunner.java:95)
	at com.sun.javatest.regtest.agent.JUnitRunner.main(JUnitRunner.java:61)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
	at java.base/java.lang.reflect.Method.invoke(Method.java:578)
	at com.sun.javatest.regtest.agent.MainWrapper$MainTask.run(MainWrapper.java:138)
	at java.base/java.lang.Thread.run(Thread.java:1583)
FAILED     compiler.jvmci.meta.ProfilingInfoTest::testTypeProfileInstanceOf 'testTypeProfileInstanceOf'
STARTED    compiler.jvmci.meta.ProfilingInfoTest::testBranchTakenProbability 'testBranchTakenProbability'
java.lang.AssertionError: expected:<0.0> but was:<-1.0>
	at org.junit.Assert.fail(Assert.java:89)
	at org.junit.Assert.failNotEquals(Assert.java:835)
	at org.junit.Assert.assertEquals(Assert.java:555)
	at org.junit.Assert.assertEquals(Assert.java:685)
	at compiler.jvmci.meta.ProfilingInfoTest.testBranchTakenProbability(ProfilingInfoTest.java:75)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
	at java.base/java.lang.reflect.Method.invoke(Method.java:578)
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:59)
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:56)
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
	at org.junit.runners.ParentRunner$3.evaluate(ParentRunner.java:306)
	at org.junit.runners.BlockJUnit4ClassRunner$1.evaluate(BlockJUnit4ClassRunner.java:100)
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:366)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:103)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:63)
	at org.junit.runners.ParentRunner$4.run(ParentRunner.java:331)
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:79)
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:329)
	at org.junit.runners.ParentRunner.access$100(ParentRunner.java:66)
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:293)
	at org.junit.runners.ParentRunner$3.evaluate(ParentRunner.java:306)
	at org.junit.runners.ParentRunner.run(ParentRunner.java:413)
	at org.junit.runner.JUnitCore.run(JUnitCore.java:137)
	at org.junit.runner.JUnitCore.run(JUnitCore.java:115)
	at org.junit.vintage.engine.execution.RunnerExecutor.execute(RunnerExecutor.java:42)
	at org.junit.vintage.engine.VintageTestEngine.executeAllChildren(VintageTestEngine.java:80)
	at org.junit.vintage.engine.VintageTestEngine.execute(VintageTestEngine.java:72)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:147)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:127)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:90)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.lambda$execute$0(EngineExecutionOrchestrator.java:55)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.withInterceptedStreams(EngineExecutionOrchestrator.java:102)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:54)
	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:114)
	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:86)
	at org.junit.platform.launcher.core.DefaultLauncherSession$DelegatingLauncher.execute(DefaultLauncherSession.java:86)
	at com.sun.javatest.regtest.agent.JUnitRunner.runWithJUnitPlatform(JUnitRunner.java:142)
	at com.sun.javatest.regtest.agent.JUnitRunner.main(JUnitRunner.java:95)
	at com.sun.javatest.regtest.agent.JUnitRunner.main(JUnitRunner.java:61)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
	at java.base/java.lang.reflect.Method.invoke(Method.java:578)
	at com.sun.javatest.regtest.agent.MainWrapper$MainTask.run(MainWrapper.java:138)
	at java.base/java.lang.Thread.run(Thread.java:1583)
FAILED     compiler.jvmci.meta.ProfilingInfoTest::testBranchTakenProbability 'testBranchTakenProbability'
STARTED    compiler.jvmci.meta.ProfilingInfoTest::testTypeProfileCheckCast 'testTypeProfileCheckCast'
java.lang.NullPointerException: Cannot invoke ""jdk.vm.ci.meta.JavaTypeProfile.getNotRecordedProbability()"" because ""<local7>"" is null
	at compiler.jvmci.meta.ProfilingInfoTest.testTypeProfile(ProfilingInfoTest.java:188)
	at compiler.jvmci.meta.ProfilingInfoTest.testTypeProfileCheckCast(ProfilingInfoTest.java:161)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
	at java.base/java.lang.reflect.Method.invoke(Method.java:578)
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:59)
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:56)
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
	at org.junit.runners.ParentRunner$3.evaluate(ParentRunner.java:306)
	at org.junit.runners.BlockJUnit4ClassRunner$1.evaluate(BlockJUnit4ClassRunner.java:100)
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:366)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:103)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:63)
	at org.junit.runners.ParentRunner$4.run(ParentRunner.java:331)
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:79)
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:329)
	at org.junit.runners.ParentRunner.access$100(ParentRunner.java:66)
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:293)
	at org.junit.runners.ParentRunner$3.evaluate(ParentRunner.java:306)
	at org.junit.runners.ParentRunner.run(ParentRunner.java:413)
	at org.junit.runner.JUnitCore.run(JUnitCore.java:137)
	at org.junit.runner.JUnitCore.run(JUnitCore.java:115)
	at org.junit.vintage.engine.execution.RunnerExecutor.execute(RunnerExecutor.java:42)
	at org.junit.vintage.engine.VintageTestEngine.executeAllChildren(VintageTestEngine.java:80)
	at org.junit.vintage.engine.VintageTestEngine.execute(VintageTestEngine.java:72)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:147)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:127)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:90)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.lambda$execute$0(EngineExecutionOrchestrator.java:55)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.withInterceptedStreams(EngineExecutionOrchestrator.java:102)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:54)
	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:114)
	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:86)
	at org.junit.platform.launcher.core.DefaultLauncherSession$DelegatingLauncher.execute(DefaultLauncherSession.java:86)
	at com.sun.javatest.regtest.agent.JUnitRunner.runWithJUnitPlatform(JUnitRunner.java:142)
	at com.sun.javatest.regtest.agent.JUnitRunner.main(JUnitRunner.java:95)
	at com.sun.javatest.regtest.agent.JUnitRunner.main(JUnitRunner.java:61)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
	at java.base/java.lang.reflect.Method.invoke(Method.java:578)
	at com.sun.javatest.regtest.agent.MainWrapper$MainTask.run(MainWrapper.java:138)
	at java.base/java.lang.Thread.run(Thread.java:1583)
FAILED     compiler.jvmci.meta.ProfilingInfoTest::testTypeProfileCheckCast 'testTypeProfileCheckCast'
STARTED    compiler.jvmci.meta.ProfilingInfoTest::testTypeProfileInvokeInterface 'testTypeProfileInvokeInterface'
java.lang.NullPointerException: Cannot invoke ""jdk.vm.ci.meta.JavaTypeProfile.getNotRecordedProbability()"" because ""<local7>"" is null
	at compiler.jvmci.meta.ProfilingInfoTest.testTypeProfile(ProfilingInfoTest.java:188)
	at compiler.jvmci.meta.ProfilingInfoTest.testTypeProfileInvokeInterface(ProfilingInfoTest.java:152)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
	at java.base/java.lang.reflect.Method.invoke(Method.java:578)
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:59)
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:56)
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
	at org.junit.runners.ParentRunner$3.evaluate(ParentRunner.java:306)
	at org.junit.runners.BlockJUnit4ClassRunner$1.evaluate(BlockJUnit4ClassRunner.java:100)
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:366)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:103)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:63)
	at org.junit.runners.ParentRunner$4.run(ParentRunner.java:331)
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:79)
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:329)
	at org.junit.runners.ParentRunner.access$100(ParentRunner.java:66)
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:293)
	at org.junit.runners.ParentRunner$3.evaluate(ParentRunner.java:306)
	at org.junit.runners.ParentRunner.run(ParentRunner.java:413)
	at org.junit.runner.JUnitCore.run(JUnitCore.java:137)
	at org.junit.runner.JUnitCore.run(JUnitCore.java:115)
	at org.junit.vintage.engine.execution.RunnerExecutor.execute(RunnerExecutor.java:42)
	at org.junit.vintage.engine.VintageTestEngine.executeAllChildren(VintageTestEngine.java:80)
	at org.junit.vintage.engine.VintageTestEngine.execute(VintageTestEngine.java:72)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:147)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:127)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:90)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.lambda$execute$0(EngineExecutionOrchestrator.java:55)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.withInterceptedStreams(EngineExecutionOrchestrator.java:102)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:54)
	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:114)
	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:86)
	at org.junit.platform.launcher.core.DefaultLauncherSession$DelegatingLauncher.execute(DefaultLauncherSession.java:86)
	at com.sun.javatest.regtest.agent.JUnitRunner.runWithJUnitPlatform(JUnitRunner.java:142)
	at com.sun.javatest.regtest.agent.JUnitRunner.main(JUnitRunner.java:95)
	at com.sun.javatest.regtest.agent.JUnitRunner.main(JUnitRunner.java:61)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
	at java.base/java.lang.reflect.Method.invoke(Method.java:578)
	at com.sun.javatest.regtest.agent.MainWrapper$MainTask.run(MainWrapper.java:138)
	at java.base/java.lang.Thread.run(Thread.java:1583)
FAILED     compiler.jvmci.meta.ProfilingInfoTest::testTypeProfileInvokeInterface 'testTypeProfileInvokeInterface'
JavaTest Message: JUnit Platform Failure(s): 7

[ JUnit Containers: found 4, started 4, succeeded 4, failed 0, aborted 0, skipped 0]
[ JUnit Tests: found 8, started 8, succeeded 1, failed 7, aborted 0, skipped 0]

java.lang.Exception: JUnit test failure
	at com.sun.javatest.regtest.agent.JUnitRunner.runWithJUnitPlatform(JUnitRunner.java:149)
	at com.sun.javatest.regtest.agent.JUnitRunner.main(JUnitRunner.java:95)
	at com.sun.javatest.regtest.agent.JUnitRunner.main(JUnitRunner.java:61)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
	at java.base/java.lang.reflect.Method.invoke(Method.java:578)
	at com.sun.javatest.regtest.agent.MainWrapper$MainTask.run(MainWrapper.java:138)
	at java.base/java.lang.Thread.run(Thread.java:1583)

JavaTest Message: Test threw exception: java.lang.Exception: JUnit test failure
JavaTest Message: shutting down test

STATUS:Failed.`main' threw exception: java.lang.Exception: JUnit test failure
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i31k7f:",9223372036854775807,b25,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2023-05-17 08:09;lmesnik;We run all tests with  -XX:TieredStopAtLevel=1 and test should have corresponding requires if it doesn't support this mode.;;;","2023-05-17 12:21;thartmann;Doug, could you please have a look or re-assign? Thanks.;;;","2023-05-17 12:43;never;What's the proper way to disable this test for -XX:TieredStopAtLevel=1?;;;","2023-05-17 12:47;thartmann;I think that would be:
@requires vm.opt.TieredStopAtLevel == null | vm.opt.TieredStopAtLevel == 4
;;;","2023-05-18 12:52;lmesnik;It is enough to set
@requires vm.opt.TieredStopAtLevel == null | vm.opt.TieredStopAtLevel > 1

the test works fine with levels 2,3.;;;","2023-05-21 23:21;thartmann;ILW = Test fails due to missing @requires, single test, no workaround = MLH = P4;;;","2023-05-22 10:41;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/14091
Date: 2023-05-22 17:33:43 +0000;;;","2023-05-23 00:10;thartmann;I think it's sufficient to verify locally that the test is skipped with -XX:TieredStopAtLevel=1 and executed otherwise.;;;","2023-05-24 11:37;never;Ok, then I can confirm that it's properly excluded at level 1 and works for all other values.;;;","2023-05-24 11:41;dukebot;Changeset: ac89e304
Author:    Tom Rodriguez <never@openjdk.org>
Date:      2023-05-24 18:39:30 +0000
URL:       https://git.openjdk.org/jdk/commit/ac89e3045b653969dfce48a2b34fd37078a2b958
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Add fontconfig requirement to building.md,JDK-8308290,5101147,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,jkratochvil,jkratochvil,jkratochvil,2023-05-17 07:38,2023-05-24 23:09,2023-10-01 09:55,2023-05-18 01:49,,,,,,,21,docs,,0,,,,,,,,,,,,,,"After following all the commands in building.md I still get on Fedora 38 x86_64:

checking for fontconfig/fontconfig.h... no
configure: error: Could not find fontconfig!

Another issue is that it is all written with ""yum"" instead of ""dnf"" but people can handle it I guess.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,linux,,,,,,"0|i31k6z:",9223372036854775807,b24,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@1163d29f,,,,,,,,,"2023-05-17 07:41;jkratochvil;https://github.com/openjdk/jdk/pull/14034;;;","2023-05-17 08:18;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/14034
Date: 2023-05-17 14:41:01 +0000;;;","2023-05-18 01:49;dukebot;Changeset: 57b8ed13
Author:    Jan Kratochvil <jan@jankratochvil.net>
Committer: Yuri Nesterenko <yan@openjdk.org>
Date:      2023-05-18 08:48:16 +0000
URL:       https://git.openjdk.org/jdk/commit/57b8ed13984eab1ab0eaf70c1904dc0f50fe6129
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Fix xlc17 clang warnings and build errors in hotspot,JDK-8308288,5101142,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,jkern,jkern,jkern,2023-05-17 06:33,2023-06-12 20:54,2023-10-01 09:55,2023-06-07 06:46,21,,,,,,21,hotspot,,0,,,,,,,,,,,,,,"When using the new xlc17 compiler (based on a recent clang) to build OpenJDk on AIX , we run into various ""warnings as errors"".
This issue addresses the warnings in hotspot.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8309225,JDK-8309219,JDK-8309224,,,,,,,,,,,,,,ppc,,,,,,,,,aix,,,,,,"0|i31k5v:",9223372036854775807,b26,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,,,"2023-05-25 02:26;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/14146
Date: 2023-05-25 09:14:14 +0000;;;","2023-06-02 04:36;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/14283
Date: 2023-06-02 11:28:45 +0000;;;","2023-06-07 06:46;dukebot;Changeset: 5b147eb5
Author:    JoKern65 <Joachim.kern@sap.com>
Committer: Martin Doerr <mdoerr@openjdk.org>
Date:      2023-06-07 13:44:42 +0000
URL:       https://git.openjdk.org/jdk/commit/5b147eb5e46ac7fa637ed997c6da8f238f685ea4
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Fix clang warnings in linux code,JDK-8308286,5101139,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,asemenov,asemenov,asemenov,2023-05-17 05:15,2023-07-12 13:40,2023-10-01 09:55,2023-06-29 02:08,,,,,,,22,core-libs,,0,,,,,,,,,,,,,,"When using the clang compiler to build OpenJDk on Linux, we encounter various ""warnings as errors"".
They can be fixed with small changes.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,linux,,,,,,"0|i31k57:",9223372036854775807,b05,,,,,,,,,,,"2023-05-17 05:36;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/14033
Date: 2023-05-17 12:28:47 +0000;;;","2023-06-29 02:08;dukebot;Changeset: 98a954ee
Author:    Artem Semenov <asemenov@openjdk.org>
Date:      2023-06-29 09:07:34 +0000
URL:       https://git.openjdk.org/jdk/commit/98a954eebc4f97dd16cb89bd4f1122952c8482ca
;;;","2023-06-30 06:25;asemenov;jdk11u-fix-request
PR: https://github.com/openjdk/jdk11u-dev/pull/2016;;;","2023-06-30 06:29;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk11u-dev/pull/2016
Date: 2023-06-30 13:19:47 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Assert on -Xshare:dump when running with -Xlog:cds=trace,JDK-8308285,5101138,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,stuefe,stuefe,stuefe,2023-05-17 05:11,2023-05-24 23:09,2023-10-01 09:55,2023-05-17 22:49,21,,,,,,21,hotspot,,0,cds,,,,,,,,,,,,,"We assert for `java -Xshare:dump -Xlog:cds*=trace`:

```
#  assert(counter_check_mirror == java_class) failed: must be consistent
```

at

```
  29 Stack: [0x00007f8821535000,0x00007f8821635000],  sp=0x00007f8821632e80,  free space=1015k
  30 Native frames: (J=compiled Java code, j=interpreted, Vv=VM code, C=native code)
  31 V  [libjvm.so+0xda0155]  java_lang_Class::primitive_type(oopDesc*)+0x13d  (javaClasses.cpp:1367)
  32 V  [libjvm.so+0xd9fb95]  java_lang_Class::print_signature(oopDesc*, outputStream*)+0x9f  (javaClasses.cpp:1284)
  33 V  [libjvm.so+0xd623f5]  InstanceKlass::oop_print_on(oopDesc*, outputStream*)+0x175  (instanceKlass.cpp:3652)
  34 V  [libjvm.so+0x127ec71]  oopDesc::print_on(outputStream*) const+0x9f  (oop.cpp:47)
  35 V  [libjvm.so+0xd34621]  void WalkOopAndArchiveClosure::do_oop_work<narrowOop>(narrowOop*)+0x1e1  (heapShared.cpp:1124)
  36 V  [libjvm.so+0xd33261]  WalkOopAndArchiveClosure::do_oop(narrowOop*)+0x27  (heapShared.cpp:1107)
  37 V  [libjvm.so+0xd31cbe]  EnableIf<!std::is_same<WalkOopAndArchiveClosure, OopClosure>::value, void>::type call_do_oop<narrowOop, WalkOopAndArchiveClosure, OopClosure, WalkOopAndArchiveClosure>(void (WalkOopAndArchiveClosure::*)(narrowOop*), void (OopClosure::*)(narrowOop     *), WalkOopAndArchiveClosure*, narrowOop*)+0x46  (devirtualizer.inline.hpp:88)
  38 V  [libjvm.so+0xd3b99d]  void Devirtualizer::do_oop<WalkOopAndArchiveClosure, narrowOop>(WalkOopAndArchiveClosure*, narrowOop*)+0x4b  (devirtualizer.inline.hpp:93)
  39 V  [libjvm.so+0xd38129]  void InstanceMirrorKlass::oop_oop_iterate<narrowOop, WalkOopAndArchiveClosure>(oopDesc*, WalkOopAndArchiveClosure*)+0x13d  (instanceKlass.inline.hpp:97)
  40 V  [libjvm.so+0xd37192]  void OopOopIterateDispatch<WalkOopAndArchiveClosure>::Table::oop_oop_iterate<InstanceMirrorKlass, narrowOop>(WalkOopAndArchiveClosure*, oopDesc*, Klass*)+0x2f  (iterator.inline.hpp:110)
  41 V  [libjvm.so+0xd354db]  void OopIteratorClosureDispatch::oop_oop_iterate<WalkOopAndArchiveClosure>(WalkOopAndArchiveClosure*, oopDesc*, Klass*)+0x35  (iterator.inline.hpp:295)
  42 V  [libjvm.so+0xd349ca]  void oopDesc::oop_iterate<WalkOopAndArchiveClosure>(WalkOopAndArchiveClosure*)+0x36  (oop.inline.hpp:318)
  43 V  [libjvm.so+0xd2f920]  HeapShared::archive_reachable_objects_from(int, KlassSubGraphInfo*, oopDesc*)+0x2d4  (heapShared.cpp:1211)
  44 V  [libjvm.so+0xd2caeb]  HeapShared::archive_java_mirrors()+0x2a9  (heapShared.cpp:395)
  45 V  [libjvm.so+0xd2d842]  HeapShared::copy_special_objects()+0x12  (heapShared.cpp:567)
  46 V  [libjvm.so+0xd2d8bb]  HeapShared::copy_objects()+0x6b  (heapShared.cpp:576)
  47 V  [libjvm.so+0xd2d68c]  HeapShared::archive_objects(ArchiveHeapInfo*)+0xfe  (heapShared.cpp:538)                                                                                                                                                                              
  48 V  [libjvm.so+0x11de094]  VM_PopulateDumpSharedSpace::dump_java_heap_objects(GrowableArray<Klass*>*)+0x188  (metaspaceShared.cpp:855)
  49 V  [libjvm.so+0x11dd06c]  VM_PopulateDumpSharedSpace::doit()+0xea  (metaspaceShared.cpp:510)
  50 V  [libjvm.so+0x166d3f6]  VM_Operation::evaluate()+0xde  (vmOperations.cpp:71)
  51 V  [libjvm.so+0x16d71f5]  VMThread::evaluate_operation(VM_Operation*)+0xdf  (vmThread.cpp:281)
  52 V  [libjvm.so+0x16d7b57]  VMThread::inner_execute(VM_Operation*)+0x343  (vmThread.cpp:428)
  53 V  [libjvm.so+0x16d7f4d]  VMThread::loop()+0x135  (vmThread.cpp:495)
  54 V  [libjvm.so+0x16d6d36]  VMThread::run()+0xfe  (vmThread.cpp:175)
  55 V  [libjvm.so+0x15bcca0]  Thread::call_run()+0x1a8  (thread.cpp:217)
  56 V  [libjvm.so+0x129f358]  thread_native_entry(Thread*)+0x1a5  (os_linux.cpp:775)

```

The reason is that, when tracing with trace level, we print each copied oop in full, including the basic java mirrors. As part of the trace, we print the basic type. That function `BasicType java_lang_Class::primitive_type(oop java_class)` does a sanity check: the printed oop, that is supposed to be a class mirror for a basic type, must be the same as the oop resolved via (this oop)->array_klass->element_type->mirror for that type).

We crash when printing the mirror for ""int"" because there are two mirrors for int at this point: the one in `Universe::_basic_type_mirrors`, and the one in  `HeapShared::_scratch_basic_type_mirrors`.

",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i31k4z:",9223372036854775807,b24,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,,,"2023-05-17 05:23;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/14031
Date: 2023-05-17 12:17:17 +0000;;;","2023-05-17 22:49;dukebot;Changeset: 95da499e
Author:    Thomas Stuefe <stuefe@openjdk.org>
Date:      2023-05-18 05:47:23 +0000
URL:       https://git.openjdk.org/jdk/commit/95da499ef229d0dfd5fc348f68b9bfd91015b045
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Build failure with GCC12 & GCC13,JDK-8308283,5101136,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,pxie,pxie,pxie,2023-05-17 05:00,2023-07-18 13:44,2023-10-01 09:55,2023-05-18 05:28,,,,,,,21,infrastructure,,0,jdk17u-fix-request,jdk17u-fix-yes,tencent-interest,,,,,,,,,,,"configure --enable-debug
error: infinite recursion detected [-Werror=infinite-recursion]
  193 | void VMError::reattempt_test_hit_stack_limit(outputStream* st)

configure
java.desktop/share/native/libharfbuzz/graph/../hb-ot-layout-common.hh:1161:24: error: possibly dangling reference to a temporary [-Werror=dangling-reference]
 1161 |         const LangSys& l = this+_.second.offset;",,,,,,,,,,,JDK-8312285,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i31k4j:",9223372036854775807,b24,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@429c566,,,,,,,,,"2023-05-17 05:33;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/14032
Date: 2023-05-17 12:26:22 +0000;;;","2023-05-18 05:28;dukebot;Changeset: bfc3ccd9
Author:    bobpengxie <bobpengxie@tencent.com>
Committer: Jie Fu <jiefu@openjdk.org>
Date:      2023-05-18 12:26:45 +0000
URL:       https://git.openjdk.org/jdk/commit/bfc3ccd90d579f6cba3a704766b7a1ea56beebe1
;;;","2023-07-12 10:40;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/1576
Date: 2023-07-12 17:34:50 +0000;;;","2023-07-17 14:10;btaylor;Fix request (17u) - allows building with gcc 13, passes tier 1 and tier 2 tests;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Java snippets in the FFM API need to be updated,JDK-8308281,5101134,Bug,Closed,JDK,JDK,software,duke,,,P3,Fixed,pminborg,pminborg,pminborg,2023-05-17 04:34,2023-08-17 06:10,2023-10-01 09:55,2023-05-23 04:36,21,,,,,,21,core-libs,,0,foreign-memaccess+abi,,,,,,,,,,,,,"As the API has improved over the recent releases, not all {@snippet ..} sections have been kept in sync.

All snippets used should be verified against real code that should be placed in a new `snippet-files` folder and erroneous snippets should be updated.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i31k43:",9223372036854775807,b24,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@28ce6b78,,,,,,,Verified,,"2023-05-17 04:53;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/14030
Date: 2023-05-17 11:46:39 +0000;;;","2023-05-23 04:36;dukebot;Changeset: eb11508e
Author:    Per Minborg <pminborg@openjdk.org>
Date:      2023-05-23 11:29:05 +0000
URL:       https://git.openjdk.org/jdk/commit/eb11508eff7b2e01b8942f4cda9fb01527a860b5
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
"Change layout API to work with bytes, not bits",JDK-8308276,5101128,Bug,Closed,JDK,JDK,software,duke,,,P3,Fixed,mcimadamore,mcimadamore,mcimadamore,2023-05-17 03:34,2023-08-04 12:49,2023-10-01 09:55,2023-05-22 07:59,21,,,,,,21,core-libs,,0,foreign-memaccess+abi,,,,,,,,,,,,,"The MemoryLayout API uses bits to model the size of a region of memory. This design was inspired by the Minimal LDL calculus:

https://cr.openjdk.org/~jrose/panama/minimal-ldl.html

This calculus had the objective of unifying memory layouts with register layouts - for this reason bit sizes were chosen. In the FFM API, however, memory layouts are used primarily to describe regions of memory. Also, the FFM API has another API, namely MemorySegment, whose sizes are expressed in bytes (not bits), and that is something that would be hard to change, because we want to provide an easy upgrade path for clients currently using the ByteBuffer API (which uses byte-based absolute offsets).

For these reasons, I think it is time to bring memory layout in sync with memory segment, so that their sizes are expressed in bytes.",,,,,,,,,,,,,,,,,,,,,,,JDK-8308279,,,,,,,,,,,,,JDK-8308761,JDK-8308904,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i31k2r:",9223372036854775807,b24,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@28ce6b78,,,,,,,Verified,,"2023-05-17 04:19;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/14013
Date: 2023-05-16 13:53:32 +0000;;;","2023-05-22 07:59;dukebot;Changeset: 5fc9b578
Author:    Maurizio Cimadamore <mcimadamore@openjdk.org>
Date:      2023-05-22 14:57:00 +0000
URL:       https://git.openjdk.org/jdk/commit/5fc9b5787dc4d7f00d2c59288bc8d840fdf5b495
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
ARM32 build broken after JDK-8304913,JDK-8308270,5101121,Bug,Closed,JDK,JDK,software,duke,,,P2,Fixed,bulasevich,bulasevich,bulasevich,2023-05-17 01:38,2023-08-17 10:57,2023-10-01 09:55,2023-05-17 20:17,21,,,,,,21,tools,,0,,,,,,,,,,,,,,"jdk.tools.jlink.plugin.PluginException: ModuleTarget is malformed: No enum constant jdk.internal.util.Architecture.ARM
	at jdk.jlink/jdk.tools.jlink.builder.DefaultImageBuilder.storeFiles(DefaultImageBuilder.java:181)
	at jdk.jlink/jdk.tools.jlink.internal.ImagePluginStack.storeFiles(ImagePluginStack.java:486)
	at jdk.jlink/jdk.tools.jlink.internal.ImageFileCreator.writeImage(ImageFileCreator.java:168)
	at jdk.jlink/jdk.tools.jlink.internal.ImageFileCreator.create(ImageFileCreator.java:100)
	at jdk.jlink/jdk.tools.jlink.internal.JlinkTask$ImageHelper.retrieve(JlinkTask.java:860)
	at jdk.jlink/jdk.tools.jlink.internal.ImagePluginStack.operate(ImagePluginStack.java:194)
	at jdk.jlink/jdk.tools.jlink.internal.JlinkTask.createImage(JlinkTask.java:423)
	at jdk.jlink/jdk.tools.jlink.internal.JlinkTask.run(JlinkTask.java:286)
	at jdk.jlink/jdk.tools.jlink.internal.Main.run(Main.java:56)
	at jdk.jlink/jdk.tools.jlink.internal.Main.main(Main.java:34)",,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8308220,,JDK-8308295,,,,JDK-8304913,JDK-8308295,,,,,,,,,,,,,,,arm,,,,,,,21,,linux,,,,,,"0|i31k17:",9223372036854775807,b24,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@3da653bd,,,,,,,Verified,,"2023-05-17 01:46;bulasevich;https://github.com/openjdk/jdk/pull/14028;;;","2023-05-17 10:43;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/14028
Date: 2023-05-17 08:45:23 +0000;;;","2023-05-17 20:17;dukebot;Changeset: 83c096d6
Author:    Boris Ulasevich <bulasevich@openjdk.org>
Date:      2023-05-18 03:14:38 +0000
URL:       https://git.openjdk.org/jdk/commit/83c096d6e20cd6e1164bc666df1be197a10431eb
;;;","2023-08-17 10:57;mtrudeau;From Boris Ulasevich:

I confirm that bug is fixed in JDK 21.

regards,
Boris
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Revisit alignment of layout constants on 32-bit platforms,JDK-8308248,5101095,Bug,Closed,JDK,JDK,software,duke,,,P3,Fixed,mcimadamore,mcimadamore,mcimadamore,2023-05-16 15:52,2023-08-04 12:49,2023-10-01 09:55,2023-05-19 07:30,21,,,,,,21,core-libs,,0,foreign-memaccess+abi,,,,,,,,,,,,,"The FFM API exposes layout constants for Java primitives. Among those there are constants for JAVA_LONG and JAVA_DOUBLE.

Currently, the alignment of these layouts is set the same as their size (e.g. 8 bytes).

This is obviously correct on 64-bit platforms, but on 32-bit platform it is not, as such platforms cannot guarantee that doubles and longs will be always 64-bit aligned. This will also result in problems when trying to use e.g. JAVA_DOUBLE to model a C double for the linker API on 32-bit platforms.

For these reasons, it would be preferable to define the alignment of JAVA_LONG and JAVA_DOUBLE constants as ADDRESS.byteSize().",,,,,,,,,,,,,,,,,,,,,,,JDK-8308273,,,,,JDK-8255350,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i31jvf:",9223372036854775807,b24,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@28ce6b78,,,,,,,Verified,,"2023-05-17 02:45;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/14007
Date: 2023-05-16 11:18:09 +0000;;;","2023-05-19 07:30;dukebot;Changeset: 44218b1c
Author:    Maurizio Cimadamore <mcimadamore@openjdk.org>
Date:      2023-05-19 14:28:14 +0000
URL:       https://git.openjdk.org/jdk/commit/44218b1c9e5daa33557aac9336251cf8398d81eb
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
PPC64le build broken after JDK-8304913,JDK-8308246,5101093,Bug,Closed,JDK,JDK,software,duke,,,P2,Fixed,mdoerr,mdoerr,mdoerr,2023-05-16 15:41,2023-08-17 07:09,2023-10-01 09:55,2023-05-17 08:13,21,,,,,,21,tools,,0,,,,,,,,,,,,,,"We're getting Exceptions during the build:
jdk.tools.jlink.plugin.PluginException: ModuleTarget is malformed: No enum constant jdk.internal.util.Architecture.PPC64LE
	at jdk.jlink/jdk.tools.jlink.builder.DefaultImageBuilder.storeFiles(DefaultImageBuilder.java:181)
	at jdk.jlink/jdk.tools.jlink.internal.ImagePluginStack.storeFiles(ImagePluginStack.java:486)
	at jdk.jlink/jdk.tools.jlink.internal.ImageFileCreator.writeImage(ImageFileCreator.java:168)
	at jdk.jlink/jdk.tools.jlink.internal.ImageFileCreator.create(ImageFileCreator.java:100)
	at jdk.jlink/jdk.tools.jlink.internal.JlinkTask$ImageHelper.retrieve(JlinkTask.java:860)
	at jdk.jlink/jdk.tools.jlink.internal.ImagePluginStack.operate(ImagePluginStack.java:194)
	at jdk.jlink/jdk.tools.jlink.internal.JlinkTask.createImage(JlinkTask.java:423)
	at jdk.jlink/jdk.tools.jlink.internal.JlinkTask.run(JlinkTask.java:286)
	at jdk.jlink/jdk.tools.jlink.internal.Main.run(Main.java:56)
	at jdk.jlink/jdk.tools.jlink.internal.Main.main(Main.java:34)
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8304913,,,,,,,,,,,,,,,,ppc,,,,,,,,,linux,,,,,,"0|i31juz:",9223372036854775807,b23,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@3da653bd,,,,,,,Verified,,"2023-05-17 00:22;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/14027
Date: 2023-05-17 07:16:17 +0000;;;","2023-05-17 08:13;dukebot;Changeset: 64f6681c
Author:    Martin Doerr <mdoerr@openjdk.org>
Date:      2023-05-17 15:10:46 +0000
URL:       https://git.openjdk.org/jdk/commit/64f6681cc7bb184112adcf2b4f2c313e1b0a5c4f
;;;","2023-08-17 02:38;mdoerr;Note: ""PPC64LE"" is supported with JDK-8308452 (JDK22) which removes this mapping again. Older versions can only handle ""PPC64"".;;;","2023-08-17 07:09;mdoerr;JDK 21 for ppc64le is built, tested and the EA version shipped.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Update ATR task definitions for JDK 21 for Client,JDK-8308240,5101085,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,landrews,landrews,landrews,2023-05-16 14:07,2023-06-12 20:31,2023-10-01 09:55,2023-06-06 17:27,,,,,,,21,client-libs,,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i31jt7:",9223372036854775807,b26,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
ThreadContainer registry accumulates weak refs,JDK-8308235,5101079,Bug,Closed,JDK,JDK,software,duke,,,P3,Fixed,alanb,alanb,alanb,2023-05-16 13:07,2023-07-21 07:36,2023-10-01 09:55,2023-05-23 00:07,19,21,,,,,21,core-libs,,0,loom,regression,,,,,,,,,,,,"This is memory leak / regression since JDK 19 due to the addition of the registry of thread containers. If you create lots of thread pools, don’t close them, let them be GC’ed, then the weak refs to these contains aren't expunged from the registry. See analysis from Alexey Gavrilov here:

https://mail.openjdk.org/pipermail/loom-dev/2023-May/005613.html",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i31jrv:",9223372036854775807,b24,,,,,,,,,Verified,,"2023-05-19 01:17;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/14047
Date: 2023-05-18 15:44:15 +0000;;;","2023-05-23 00:07;dukebot;Changeset: ada416e6
Author:    Alan Bateman <alanb@openjdk.org>
Date:      2023-05-23 07:05:07 +0000
URL:       https://git.openjdk.org/jdk/commit/ada416e66cbff6c8e631bf352acc0744c248740b
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
nsk/jdb tests don't pass -verbose flag to the debuggee,JDK-8308232,5101076,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,cjplummer,cjplummer,cjplummer,2023-05-16 12:46,2023-08-11 14:28,2023-10-01 09:55,2023-06-01 08:30,21,,,,,,21,core-svc,,0,jdk17u-fix-request,jdk17u-fix-yes,noreg-self,,,,,,,,,,,"Some nsk/jdb tests are all run in verbose mode. For example:

 * @run main/othervm
 *      nsk.jdb.kill.kill001.kill001
 *      -arch=${os.family}-${os.simpleArch}
 *      -waittime=5
 *      -verbose
...

This means all log.display() output appears in the log file, but only for the main test. -verbose is not passed to the debuggee. I think part of the problem may be that jdb is being used to launch the debuggee, but it should still be possible to tell jdb to include -verbose in the arguments.
",,,,,,,,,,,JDK-8314175,JDK-8312613,JDK-8313474,JDK-8312961,JDK-8313254,,,,,,,,,,,,,,,,,JDK-8310551,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i31jr7:",9223372036854775807,b26,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@3397f701,,,,,,,,,"2023-05-23 14:44;cjplummer;I dug into the logging and argument passing a bit more, and found that it is possible to get the -verbose argument passed on from the debugger to the debuggee. The fix ends up being very simple:

diff --git a/test/hotspot/jtreg/vmTestbase/nsk/share/jdb/Launcher.java b/test/hotspot/jtreg/vmTestbase/nsk/share/jdb/Launcher.java
index 28aa1972cb4..497c2fd1e8c 100644
--- a/test/hotspot/jtreg/vmTestbase/nsk/share/jdb/Launcher.java
+++ b/test/hotspot/jtreg/vmTestbase/nsk/share/jdb/Launcher.java
@@ -225,7 +225,7 @@ public class Launcher extends DebugeeBinder {
                        connect.append(""\"""");
                     }
                 }
-                String cmdline = classToExecute + "" "" + ArgumentHandler.joinArguments(argumentHandler.getArguments(), "" "");
+                String cmdline = classToExecute + "" "" + ArgumentHandler.joinArguments(argumentHandler.getRawArguments(), "" "");
                 if (System.getProperty(""main.wrapper"") != null) {
                     cmdline = MainWrapper.class.getName() + "" "" + System.getProperty(""main.wrapper"") +  "" "" + cmdline;
                 }

First some background. jdb supports the following command:

  run [class [args]]        -- start execution of application's main class

However, our jdb tests just use ""run"" with no arguments. The main class was determined when jdb was launched using the ""main"" argument of the jdb -connect argument. For example, you'll see the following in the log, which represents all the args passd to jdb:

Launching process by array of args: 
    args[0]: >/scratch/cplummer/ws/jdk/jdk.clean/build/linux-x64-debug/images/jdk/bin/jdb<
    args[1]: >-J-XX:MaxRAMPercentage=1.78571<
    args[2]: >-J-Dtest.boot.jdk=/scratch/cplummer/jib/install/jdk/20/36/bundles/linux-x64/jdk-20_linux-x64_bin.tar.gz/jdk-20<
    args[3]: >-J-Djava.io.tmpdir=/scratch/cplummer/ws/jdk/jdk.clean/build/linux-x64-debug/test-support/jtreg_open_test_hotspot_jtreg_vmTestbase_nsk_jdb_kill_kill001/tmp<
    args[4]: >-trackallthreads<
    args[5]: >-connect<
    args[6]: >com.sun.jdi.CommandLineLaunch:vmexec=java,options= ""-XX:MaxRAMPercentage=1.78571"" ""-Dtest.boot.jdk=/scratch/cplummer/jib/install/jdk/20/36/bundles/linux-x64/jdk-20_linux-x64_bin.tar.gz/jdk-20"" ""-Djava.io.tmpdir=/scratch/cplummer/ws/jdk/jdk.clean/build/linux-x64-debug/test-support/jtreg_open_test_hotspot_jtreg_vmTestbase_nsk_jdb_kill_kill001/tmp"",main=nsk.jdb.kill.kill001.kill001a<

Notice the last argument[5] is the -connect argument, and argument[6] is the data part of the -connect argument. That last part of it is main=nsk.jdb.kill.kill001.kill001a. This is the default that is used for ""[class [args]]"" when a no argument ""run"" command is executed.  It's actually possible to add onto this so you have something like ""main=nsk.jdb.kill.kill001.kill001a -verbose"". Then when you do a jdb ""run"" command, both the main class and the args are automatically included. The code is already trying to add the app arguments:

               String cmdline = classToExecute + "" "" + ArgumentHandler.joinArguments(argumentHandler.getArguments(), "" "");

However, getArguments() is normally empty in our tests. It looks like it is suppose to contain app arguments, which are ones that don't start with a '-'. However, for our jdb debuggees, they all know how to parse options like -waittime and -verbose because they also use ArgumentHandler. ArgumentHandler (actually its superclass ArgumentParser) parses the arguments and stores them as properties. Those that are not parsed end up in ""arguments"", whereas ""rawArguments"" contains all the original arguments, including -verbose and -waittime. Since ArgumentParser stores them as properties, they are queried with ArgumentParser APIs such as:

    public boolean verbose() {
        return options.getProperty(""verbose"") != null;
    }

Since currently only ""arguments"" is added after the debuggee class name, we usually see no app arguments being passed. By passing ""rawArguments"" instead, we see all arguments being passed, including some that probably are not appropriate for the debuggee, but end up getting ignored. I don't think the debuggee queries anything other the -verbose and -waittime. Here's an example of the jdb args passed when rawArguments are used instead:

    args[6]: >com.sun.jdi.CommandLineLaunch:vmexec=java,options= ""-XX:MaxRAMPercentage=1.78571"" ""-Dtest.boot.jdk=/scratch/cplummer/jib/install/jdk/20/36/bundles/linux-x64/jdk-20_linux-x64_bin.tar.gz/jdk-20"" ""-Djava.io.tmpdir=/scratch/cplummer/ws/jdk/jdk.clean/build/linux-x64-debug/test-support/jtreg_open_test_hotspot_jtreg_vmTestbase_nsk_jdb_kill_kill001/tmp"",main=nsk.jdb.kill.kill001.kill001a  -arch=linux-x64   -waittime=5   -verbose   -debugee.vmkind=java   -transport.address=dynamic   -jdb=/scratch/cplummer/ws/jdk/jdk.clean/build/linux-x64-debug/images/jdk/bin/jdb   -java.options=""-XX:MaxRAMPercentage=1.78571 -Dtest.boot.jdk=/scratch/cplummer/jib/install/jdk/20/36/bundles/linux-x64/jdk-20_linux-x64_bin.tar.gz/jdk-20 -Djava.io.tmpdir=/scratch/cplummer/ws/jdk/jdk.clean/build/linux-x64-debug/test-support/jtreg_open_test_hotspot_jtreg_vmTestbase_nsk_jdb_kill_kill001/tmp ""   -workdir=.   -jdb.option=""-trackallthreads""   -debugee.vmkeys=""-XX:MaxRAMPercentage=1.78571 -Dtest.boot.jdk=/scratch/cplummer/jib/install/jdk/20/36/bundles/linux-x64/jdk-20_linux-x64_bin.tar.gz/jdk-20 -Djava.io.tmpdir=/scratch/cplummer/ws/jdk/jdk.clean/build/linux-x64-debug/test-support/jtreg_open_test_hotspot_jtreg_vmTestbase_nsk_jdb_kill_kill001/tmp ""<

Search for main=nsk.jdb.kill.kill001.kill001a and see all the args included after it. I doubt any of the debuggees care about anything other than -waittime and -verbose. In fact any debuggee currently calling arguments.waittime() or arguments.verbose() is not getting the right result. Using the above fixes this. See kill001a.java as an example:

        argumentHandler = new JdbArgumentHandler(args);
        log = new Log(out, argumentHandler);
        waitTime = argumentHandler.getWaitTime() * 60 * 1000;

This currently gets two things wrong. Since args is empty, the Log object is created with verbose disabled (always). Also, argumentHandler.getWaitTime() always ends up being the default of two minutes. By making sure args is the full set of arguments (rawArguments), this code starts to do as intended.

;;;","2023-05-25 13:34;cjplummer;Unfortunately on Windows this solution is not working well. There seems to be some sort of Windows argument parsing bug. On linux in the log I see the arguments being passed to jdb using --connect:

    args[4]: >-connect<
    args[5]: >com.sun.jdi.CommandLineLaunch:vmexec=java,options= <snip>,main=nsk.jdb.wherei.wherei001.wherei001A  -arch=linux-x64   -waittime=5   -verbose   -debugee.vmkind=java   -transport.address=dynamic   -jdb=<snip>   -java.options=<snip>   -workdir=.   -debugee.vmkeys=<snip><

The important part of the above is the main=nsk.jdb.wherei.wherei001.wherei001A part, followed by the arguments to pass to the debuggee. When later the jdb ""run"" command is used, you see everything after main= echoed:

Sending command: run 
reply[0]: run nsk.jdb.wherei.wherei001.wherei001a  -arch=linux-x64   -waittime=5   -verbose   -debugee.vmkind=java   -transport.address=dynamic   -jdb=<snip>   -java.options=<snip>   -workdir=.   -debugee.vmkeys=<snip>

For windows the -connect argument looks similar:
    args[4]: >-connect<
    args[5]: >com.sun.jdi.CommandLineLaunch:vmexec=java,options= <snip>,main=nsk.jdb.wherei.wherei001.wherei001a  -arch=windows-x64   -waittime=5   -debugee.vmkind=java   -transport.address=dynamic   -jdb=<snip>   -java.options=<snip>   -workdir=.   -debugee.vmkeys=<snip><

But the arguments are messed up when passed to the run command. Everything after main= up to the -worddir=. argument has been removed, including the debuggee name:

Sending command: run 
reply[0]: run ""   -workdir=.   -debugee.vmkeys=<snip>

This might be a jdb argument parsing bug and not a test bug. It could be related to JDK-8234808.;;;","2023-05-30 16:51;cjplummer;The following fix was proposed:

 - String cmdline = classToExecute + "" "" + ArgumentHandler.joinArguments(argumentHandler.getArguments(), "" "");
+ String cmdline = classToExecute + "" "" + ArgumentHandler.joinArguments(argumentHandler.getRawArguments(), "" ""); 

But as described in the previous comment, the complexity of the arguments is causing some sort of quoting issue on Windows, and the argument passing ends up being very broken when trying to pass all the raw arguments.

Most of raw arguments are not needed by the debuggee, such as -debugee.vmkeys and -debugee.vmkind. They are relics from before vmtestbase was converted to jtreg. It seems the only two that the debuggee might actually care about are -verbose and -waittime. Doing the following will pass these, and works on Windows:

   String cmdline = classToExecute + "" "" + ArgumentHandler.joinArguments(argumentHandler.getArguments(), "" "");
+                cmdline += "" -waittime "" + argumentHandler.getWaitTime();
+                if (argumentHandler.verbose()) {
+                    cmdline += "" -verbose"";
+                }
;;;","2023-05-30 17:33;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/14236
Date: 2023-05-31 00:27:16 +0000;;;","2023-06-01 08:30;dukebot;Changeset: c6f20db9
Author:    Chris Plummer <cjplummer@openjdk.org>
Date:      2023-06-01 15:28:58 +0000
URL:       https://git.openjdk.org/jdk/commit/c6f20db945c6217aea84cebd6c97dbf8b93c48a4
;;;","2023-08-10 03:36;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/1655
Date: 2023-08-10 10:29:33 +0000;;;","2023-08-10 03:37;mdoerr;Fix Request (17u):
Should get backported for parity with 17.0.9-oracle. Recognized as clean backport (context differs because Loom is not it 17u, see PR). nsk/jdb tests have passed.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
failure handler missed jcmd.vm.info command,JDK-8308223,5101066,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,lmesnik,lmesnik,lmesnik,2023-05-16 10:44,2023-09-14 00:21,2023-10-01 09:55,2023-05-16 12:46,21,,,,,,21,hotspot,,0,noreg-self,,,,,,,,,,,,,"The common.properties
has 
jcmd.vm.info.args=%p VM.info

but no call of jcmd.vm.info",,,,,,,,,,,JDK-8316102,JDK-8316155,JDK-8316265,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i31joz:",9223372036854775807,b23,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@78d03d9a,,,,,,,,,"2023-05-16 11:14;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/14018
Date: 2023-05-16 18:07:16 +0000;;;","2023-05-16 12:46;dukebot;Changeset: 563152f3
Author:    Leonid Mesnik <lmesnik@openjdk.org>
Date:      2023-05-16 19:44:38 +0000
URL:       https://git.openjdk.org/jdk/commit/563152f32dd2c8617c0e0955d55c5bbce23627fb
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Error in parsing replay file when staticfield is an array of single dimension,JDK-8308192,5101031,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,asmehra,asmehra,asmehra,2023-05-16 08:43,2023-07-24 21:51,2023-10-01 09:55,2023-05-18 12:52,11,17,21,,,,21,hotspot,,0,ci-replay,ci-replay-failed,jdk17u-fix-request,jdk17u-fix-yes,oracle-triage-21,,,,,,,,,"If the replay file contains an entry for a static field of array type, then the parsing logic fails.
For instance, consider a replay file with following entry at line 675:

---
675: staticfield ArrayTest objs [LArrayTest$SomeClass; 10 [LArrayTest$SomeClass;
---

When the replay file is used using ""java -XX:+UnlockDiagnosticVMOptions -XX:+ReplayCompiles -XX:ReplayDataFile=<replay file>"", JVM spits out following error message:

---
Error while parsing line 675 at position 53: line not properly terminated

Failed on line not properly terminated
---

Looks like while parsing the staticfield in CompileReplay::process_staticfield() if the field is single dimensional array, the parser does not consume the class name after the array length in the following block of code:

        } else if (field_signature[0] == JVM_SIGNATURE_ARRAY &&
                   field_signature[1] == JVM_SIGNATURE_CLASS) {
          Klass* kelem = resolve_klass(field_signature + 1, CHECK);
          value = oopFactory::new_objArray(kelem, length, CHECK);
        }


This can be fixed by calling parse_klass() to eat up the class name, but ignore its result.",,,,,,,,,,,JDK-8311858,JDK-8312000,JDK-8312675,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i31jh7:",9223372036854775807,b24,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2023-05-16 17:53;dlong;ILW = replay failed; staticfield is an array of single dimension; no workaround = MMH = P3;;;","2023-05-16 19:19;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/14024
Date: 2023-05-17 02:13:39 +0000;;;","2023-05-18 12:52;dukebot;Changeset: d3feedf5
Author:    Ashutosh Mehra <asmehra@redhat.com>
Committer: Vladimir Kozlov <kvn@openjdk.org>
Date:      2023-05-18 19:50:05 +0000
URL:       https://git.openjdk.org/jdk/commit/d3feedf5114542078c10abec0612038c88e005d6
;;;","2023-07-11 06:39;goetz;Fix request [17u]

I backport this for parity with 17.0.9-oracle.
Low risk, simple change to compiler debug interface.
Clean backport.
SAP nighlty testing passed.;;;","2023-07-11 06:45;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/1569
Date: 2023-07-11 13:39:35 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
[macOS] VoiceOver decorations are shifted on second monitor,JDK-8308191,5101030,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,kizune,angorya,angorya,2023-05-16 08:43,2023-06-02 08:30,2023-10-01 09:55,2023-05-31 13:31,jfx21,,,,,,jfx21,javafx,,0,a11y,accessibility,macos,noreg-hard,sn_144,sn_145,,,,,,,,"Having the following monitor configuration on my macOS M1 Ventura 13.3.1(a):
- primary monitor (retina, scale=2)
- secondary monitor (scale=1) placed above the primary.

On the secondary monitor, the VoiceOver decorations (black rectangles indicating the current element) are shifted for javafx application.  The other apps (Chrome, Outlook) are fine.  See the screenshot.

Another issue (possibly a VoiceOver app issue) - the VoiceOver popup saying ""You are currently on ..."" straddles two monitors, making it impossible to see as a whole.  you can see it in the screenshot as it includes parts of the primary monitor at the bottom, with a white rectangle where the primary left edge clips the popup.

Possibly related to JDK-8277437, as it displayed a similar symptom.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8277437,JDK-8291087,,,,"2023-05-16 08:44;angorya;Screenshot 2023-05-12 at 12.46.03.png;https://bugs.openjdk.org/secure/attachment/103858/Screenshot+2023-05-12+at+12.46.03.png","2023-05-16 08:44;angorya;Screenshot 2023-05-16 at 08.43.42.png;https://bugs.openjdk.org/secure/attachment/103857/Screenshot+2023-05-16+at+08.43.42.png",,,,,,,,,,,,,,,os_x,,,,,,"0|i31jgz:",9223372036854775807,b20,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@7a09e639,,,,,,,,,"2023-05-18 17:08;kcr;This bug is in no way related to JDK-8277437. That bug, which ended up being closed as ""Not an issue"", was caused by an application that used nodes the item list of a ListVIew, which caused rendering problems in the actual scene graph.

This might be related to JDK-8291087, which was a similar bug on Windows.;;;","2023-05-30 14:20;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jfx/pull/1147
Date: 2023-05-30 21:17:08 +0000;;;","2023-05-31 13:31;dukebot;Changeset: f8c8a8a1
Author:    Alexander Zuev <kizune@openjdk.org>
Committer: Kevin Rushforth <kcr@openjdk.org>
Date:      2023-05-31 20:30:04 +0000
URL:       https://git.openjdk.org/jfx/commit/f8c8a8a1f98902ab6c7923a9b0897106ea957ba8
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
"jdi/EventSet/resume/resume008 failed with ""EventHandler> Unexpected event: ThreadStartEvent in thread resume008-thread0""",JDK-8308187,5101025,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,cjplummer,dcubed,dcubed,2023-05-16 06:39,2023-05-27 06:38,2023-10-01 09:55,2023-05-18 15:10,21,,,,,,21,core-svc,,0,genzgc,intermittent,loom,noreg-self,tier5,,,,,,,,,"The following test failed in the JDK21 CI:

vmTestbase/nsk/jdi/EventSet/resume/resume008/TestDescription.java

Here's a snippet from the log file:

#section:main
----------messages:(8/1157)----------
command: main nsk.jdi.EventSet.resume.resume008 -verbose -arch=linux-aarch64 -waittime=5 -debugee.vmkind=java -transport.address=dynamic -debugee.vmkeys=""-XX:MaxRAMPercentage=6.25 -Dtest.boot.jdk=/opt/mach5/mesos/work_dir/jib-master/install/jdk/20/36/bundles/linux-aarch64/jdk-20_linux-aarch64_bin.tar.gz/jdk-20 -Djava.io.tmpdir=/opt/mach5/mesos/work_dir/slaves/741e9afd-8c02-45c3-b2e2-9db1450d0832-S108105/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/a35a34da-4546-4075-bbe4-1fbd3aba8053/runs/a840585c-f648-465a-a467-55e3d3caec21/testoutput/test-support/jtreg_open_test_hotspot_jtreg_vmTestbase_nsk_jdi/tmp -Duse.JTREG_TEST_THREAD_FACTORY=Virtual -XX:+UseZGC -XX:+ZGenerational -XX:-VerifyContinuations""
reason: User specified action: run main/othervm nsk.jdi.EventSet.resume.resume008 -verbose -arch=${os.family}-${os.simpleArch} -waittime=5 -debugee.vmkind=java -transport.address=dynamic -debugee.vmkeys=""${test.vm.opts} ${test.java.opts}"" 
started: Tue May 16 07:46:35 UTC 2023
Mode: othervm [/othervm specified]
Timeout information:
--- Timeout information end.
finished: Tue May 16 07:55:51 UTC 2023
elapsed time (seconds): 555.324
----------configuration:(0/0)----------
----------System.out:(116/8607)*----------
binder> VirtualMachineManager: version 21.0
binder> Finding connector: default
binder> LaunchingConnector:
binder>     name: com.sun.jdi.CommandLineLaunch
binder>     description: Launches target using Sun Java VM command line and attaches to it
binder>     transport: com.sun.tools.jdi.SunCommandLineLauncher$2@250e0413
binder> Connector arguments:
binder>     main=nsk.share.MainWrapper Virtual nsk.jdi.EventSet.resume.resume008a \u0000-verbose\u0000 \u0000-arch=linux-aarch64\u0000 \u0000-waittime=5\u0000 \u0000-debugee.vmkind=java\u0000 \u0000-transport.address=dynamic\u0000 \u0000-debugee.vmkeys=""-XX:MaxRAMPercentage=6.25 -Dtest.boot.jdk=/opt/mach5/mesos/work_dir/jib-master/install/jdk/20/36/bundles/linux-aarch64/jdk-20_linux-aarch64_bin.tar.gz/jdk-20 -Djava.io.tmpdir=/opt/mach5/mesos/work_dir/slaves/741e9afd-8c02-45c3-b2e2-9db1450d0832-S108105/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/a35a34da-4546-4075-bbe4-1fbd3aba8053/runs/a840585c-f648-465a-a467-55e3d3caec21/testoutput/test-support/jtreg_open_test_hotspot_jtreg_vmTestbase_nsk_jdi/tmp -Duse.JTREG_TEST_THREAD_FACTORY=Virtual -XX:+UseZGC -XX:+ZGenerational -XX:-VerifyContinuations""\u0000 \u0000-pipe.port=41627\u0000
binder>     includevirtualthreads=y
binder>     quote=\u0000
binder>     home=/opt/mach5/mesos/work_dir/jib-master/install/jdk-21+23-1950/linux-aarch64-debug.jdk/jdk-21/fastdebug
binder>     vmexec=java
binder>     suspend=true
binder>     options=-XX:MaxRAMPercentage=6.25 -Dtest.boot.jdk=/opt/mach5/mesos/work_dir/jib-master/install/jdk/20/36/bundles/linux-aarch64/jdk-20_linux-aarch64_bin.tar.gz/jdk-20 -Djava.io.tmpdir=/opt/mach5/mesos/work_dir/slaves/741e9afd-8c02-45c3-b2e2-9db1450d0832-S108105/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/a35a34da-4546-4075-bbe4-1fbd3aba8053/runs/a840585c-f648-465a-a467-55e3d3caec21/testoutput/test-support/jtreg_open_test_hotspot_jtreg_vmTestbase_nsk_jdi/tmp -Duse.JTREG_TEST_THREAD_FACTORY=Virtual -XX:+UseZGC -XX:+ZGenerational -XX:-VerifyContinuations -Djdk.virtualThreadScheduler.parallelism=15
binder> Launching debugee
binder> Waiting for VM initialized
Initial VMStartEvent received: VMStartEvent in thread main
EventHandler> Adding listener nsk.share.jdi.EventHandler$2@6f0d83fe
EventHandler> Adding listener nsk.share.jdi.EventHandler$3@7a9567e9
EventHandler> Adding listener nsk.share.jdi.EventHandler$4@159f03a3
EventHandler> Adding listener nsk.share.jdi.EventHandler$5@f07cc68
EventHandler> Adding listener nsk.share.jdi.EventHandler$6@704c81a
EventHandler> Adding listener nsk.share.jdi.EventHandler$1@a8292df
EventHandler> waitForRequestedEventCommon: enabling remove of listener nsk.share.jdi.EventHandler$7@56c4697
EventHandler> Adding listener nsk.share.jdi.EventHandler$7@56c4697
EventHandler> Adding listener nsk.share.jdi.EventHandler$1@4ec73d65
EventHandler> Adding listener nsk.share.jdi.EventHandler$8@244e750a
EventHandler> waitForRequestedEventCommon: vm.resume called
EventHandler> Received event set with policy = SUSPEND_EVENT_THREAD
EventHandler> waitForRequestedEventCommon: Received event set: event set, policy:1, count:1 = {ClassPrepareEvent in thread main}
EventHandler> Event: ClassPrepareEventImpl req class prepare request  (enabled)
EventHandler> waitForRequestedEventCommon: Received event(ClassPrepareEvent in thread main) for request(class prepare request  (enabled))
EventHandler> Removing listener nsk.share.jdi.EventHandler$7@56c4697
EventHandler> Removing listener nsk.share.jdi.EventHandler$1@4ec73d65
EventHandler> Removing listener nsk.share.jdi.EventHandler$8@244e750a
debugger> Received ClassPrepareEvent for debuggee class: nsk.jdi.EventSet.resume.resume008a
binder> Breakpoint set:
	breakpoint request nsk.jdi.EventSet.resume.resume008a:77 (disabled)
EventHandler> Adding listener nsk.share.jdi.TestDebuggerType1$1@17cf5f50
debugger> TESTING BEGINS
debugger> RESUME DEBUGGEE VM
debugger> shouldRunAfterBreakpoint: entered
debugger> shouldRunAfterBreakpoint: waiting for breakpoint event during 1 sec.
debugee.stderr> **> debuggee: debuggee started!
EventHandler> Received event set with policy = SUSPEND_ALL
EventHandler> Event: BreakpointEventImpl req breakpoint request nsk.jdi.EventSet.resume.resume008a:77 (enabled)
debugger> Received communication breakpoint event.
debugger> shouldRunAfterBreakpoint: received breakpoint event.
debugger> shouldRunAfterBreakpoint: exited with true.
debugger> :::::: case: # 0
debugger> ......waiting for new ThreadStartEvent : 0
EventHandler> waitForRequestedEventCommon: enabling remove of listener nsk.share.jdi.EventHandler$7@50953e07
EventHandler> Adding listener nsk.share.jdi.EventHandler$7@50953e07
EventHandler> Adding listener nsk.share.jdi.EventHandler$1@ad783f2
EventHandler> Adding listener nsk.share.jdi.EventHandler$8@4afc6ae0
EventHandler> waitForRequestedEventCommon: vm.resume called
EventHandler> Received event set with policy = SUSPEND_NONE
EventHandler> waitForRequestedEventCommon: Received event set: event set, policy:0, count:1 = {ThreadStartEvent in thread Cleaner-1}
EventHandler> Event: ThreadStartEventImpl req thread start request  (enabled)
debugee.stderr> **> debuggee:   'run': enter  :: threadName == resume008-thread0
debugee.stderr> **> debuggee:   'run': exit   :: threadName == resume008-thread0
EventHandler> waitForRequestedEventCommon: Received event(ThreadStartEvent in thread Cleaner-1) for request(thread start request  (enabled))
EventHandler> Removing listener nsk.share.jdi.EventHandler$7@50953e07
EventHandler> Received event set with policy = SUSPEND_NONE
EventHandler> waitForRequestedEventCommon: Received event set: event set, policy:0, count:1 = {ThreadStartEvent in thread resume008-thread0}
EventHandler> Event: ThreadStartEventImpl req thread start request  (enabled)
# ERROR: EventHandler> Unexpected event: ThreadStartEvent in thread resume008-thread0
The following stacktrace is for failure analysis.
nsk.share.TestFailure: EventHandler> Unexpected event: ThreadStartEvent in thread resume008-thread0
	at nsk.share.Log.logExceptionForFailureAnalysis(Log.java:431)
	at nsk.share.Log.complain(Log.java:402)
	at nsk.share.jdi.EventHandler.complain(EventHandler.java:121)
	at nsk.share.jdi.EventHandler$2.eventReceived(EventHandler.java:300)
	at nsk.share.jdi.EventHandler.run(EventHandler.java:176)
	at java.base/java.lang.Thread.run(Thread.java:1583)
debugee.stderr> **> debuggee: waitForTestCase: 0
EventHandler> Removing listener nsk.share.jdi.EventHandler$1@ad783f2
EventHandler> Removing listener nsk.share.jdi.EventHandler$8@4afc6ae0
debugger>        got new event: ThreadStartEvent in thread Cleaner-1
# ERROR: debugger> ERROR: ThreadStartEvent is not for expected thread:  Cleaner-1
The following stacktrace is for failure analysis.
nsk.share.TestFailure: debugger> ERROR: ThreadStartEvent is not for expected thread:  Cleaner-1
	at nsk.share.Log.logExceptionForFailureAnalysis(Log.java:431)
	at nsk.share.Log.complain(Log.java:402)
	at nsk.share.jdi.TestDebuggerType1.complain(TestDebuggerType1.java:78)
	at nsk.share.jdi.TestDebuggerType1.setFailedStatus(TestDebuggerType1.java:85)
	at nsk.jdi.EventSet.resume.resume008.testRun(resume008.java:146)
	at nsk.share.jdi.TestDebuggerType1.runThis(TestDebuggerType1.java:119)
	at nsk.jdi.EventSet.resume.resume008.run(resume008.java:84)
	at nsk.jdi.EventSet.resume.resume008.main(resume008.java:79)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
	at java.base/java.lang.reflect.Method.invoke(Method.java:578)
	at com.sun.javatest.regtest.agent.MainWrapper$MainTask.run(MainWrapper.java:138)
	at java.base/java.lang.VirtualThread.run(VirtualThread.java:311)
debugger> TESTING ENDS
debugger> Waiting for debuggee's exit...
EventHandler> waitForVMDisconnect
Timeout refired 480 times
EventHandler> Received event set with policy = SUSPEND_NONE
EventHandler> Event: VMDisconnectEventImpl req null
EventHandler> receieved VMDisconnect
EventHandler> Removing listener nsk.share.jdi.EventHandler$5@f07cc68
EventHandler> finished
EventHandler> waitForVMDisconnect: done
# ERROR: debugger> Event handler returned unexpected exit status: 2
# ERROR: debugger> Debuggee returned unexpected exit status: 134


#>  
#>  SUMMARY: Following errors occured
#>      during test execution:
#>  
# ERROR: EventHandler> Unexpected event: ThreadStartEvent in thread resume008-thread0
# ERROR: debugger> ERROR: ThreadStartEvent is not for expected thread:  Cleaner-1
# ERROR: debugger> Event handler returned unexpected exit status: 2
# ERROR: debugger> Debuggee returned unexpected exit status: 134
----------System.err:(0/0)----------
----------rerun:(41/9023)*----------


This test failure reports a couple of ERRORs:

ERROR: EventHandler> Unexpected event: ThreadStartEvent in thread resume008-thread0

ERROR: debugger> ERROR: ThreadStartEvent is not for expected thread:  Cleaner-1
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8305083,JDK-8289765,,,,,,,,,,,aarch64,,,,,,,,,linux,,,,,,"0|i31jfv:",9223372036854775807,b24,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@3397f701,,,,,,,,,"2023-05-16 08:17;cjplummer;This is probably related to JDK-8289765, which attempted to fix issues with unexpected ThreadStartEvents, but probably isn't perfect. As I stated in JDK-8289765:

""This bug has proved very hard to fix. The synchronization is fragile, and there is a lot of common library code involved with the event handling, which really makes it hard to special case these unexpected ThreadStartEvent""

So it's not surprising that there might be a hole in the fix. Note I see in the output:

 debugger> got new event: ThreadStartEvent in thread Cleaner-1
# ERROR: debugger> ERROR: ThreadStartEvent is not for expected thread: Cleaner-1 

So it seems like an unexpected ThreadStartEvent has been received (actually the test is now suppose to expect these ""unexpected"" ThreadStartEvent), and the test did not properly filter it out.;;;","2023-05-17 12:20;cjplummer;Both of the failures so far have been with the new generational ZGC. I think I know why. JDK-8289765 fixed this type of issue by improving the filtered() method, which filters out ThreadStartEvents for threads we want to ignore:

    public static boolean filtered(Event event) {
        if (event instanceof ThreadStartEvent) {
            ThreadStartEvent tse = (ThreadStartEvent)event;
            String tname = tse.thread().name();
            String knownThreads[] = {
                ""VM JFR Buffer Thread"",
                ""JFR request timer"",
                ""Reference Handler"",
                ""VirtualThread-unparker"",
                ""Common-Cleaner"",
                ""FinalizerThread"",
                ""ForkJoinPool""
            };
            for (String s : knownThreads) {
                if (tname.startsWith(s)) {
                    return true;
                }
            }
        }
        return false;
    }

Note that it filters ""Common-Cleaner"" and note that in the log we have:

# ERROR: debugger> ERROR: ThreadStartEvent is not for expected thread:  Cleaner-1

So it looks like generational ZGC has introduced a new thread name that we need to filter.;;;","2023-05-18 08:18;cjplummer;Looks like this isn't just ZGC, but even these non-ZGC failures are failing because of the creation of the Cleaner-1 thread. Something changed 3-4 days ago since there have been 4 sightings in just the past 2-3 days. I looked at the change history during that time, and didn't see anything that looked Cleaner related.;;;","2023-05-18 09:50;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/14048
Date: 2023-05-18 15:49:22 +0000;;;","2023-05-18 15:10;dukebot;Changeset: 4a6d6d5a
Author:    Chris Plummer <cjplummer@openjdk.org>
Date:      2023-05-18 22:08:10 +0000
URL:       https://git.openjdk.org/jdk/commit/4a6d6d5a59442c10a1761ce0566aab57f4c4f323
;;;","2023-05-18 17:49;cjplummer;The cause was JDK-8305083, which added the use of the Cleaner class instead of finalize() for this test suite. I missed it in my scan of potential changes since it dates back 6 days, but the failures started only 3 days ago. I just didn't look far enough back.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Launching java with large number of jars in classpath with java.protocol.handler.pkgs system property set can lead to StackOverflowError,JDK-8308184,5101022,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,jpai,jpai,jpai,2023-05-16 06:08,2023-08-03 17:02,2023-10-01 09:55,2023-06-12 02:46,11,17,20,,,,22,core-libs,,0,bugdb_35572159,jdk21u-fix-request,jdk21u-fix-SQE-ok,jdk21u-fix-yes,,,,,,,,,,"When java application is launched with a classpath containing large number of jars and with the the -Djava.protocol.handler.pkgs system property set to a value that represents a package that either isn't present in the jars in the classpath or happens to be in a jar which gets traversed towards the end of the classpath traversal, then the JVM launch can end up with a StackOverflowError like:

[java] Error: A JNI error has occurred, please check your installation and try again
     [java] Exception in thread ""main"" java.lang.StackOverflowError
     [java] 	at java.base/java.lang.Class.forName0(Native Method)
     [java] 	at java.base/java.lang.Class.forName(Class.java:392)
     [java] 	at java.base/java.lang.Class.forName(Class.java:383)
     [java] 	at java.base/java.net.URL.lookupViaProperty(URL.java:1449)
     [java] 	at java.base/java.net.URL.getURLStreamHandler(URL.java:1622)
     [java] 	at java.base/java.net.URL.<init>(URL.java:546)
     [java] 	at java.base/jdk.internal.loader.URLClassPath$JarLoader.newURL(URLClassPath.java:741)
     [java] 	at java.base/jdk.internal.loader.URLClassPath$JarLoader.<init>(URLClassPath.java:728)
     [java] 	at java.base/jdk.internal.loader.URLClassPath$3.run(URLClassPath.java:497)
     [java] 	at java.base/jdk.internal.loader.URLClassPath$3.run(URLClassPath.java:479)
     [java] 	at java.base/java.security.AccessController.doPrivileged(AccessController.java:714)
     [java] 	at java.base/jdk.internal.loader.URLClassPath.getLoader(URLClassPath.java:478)
     [java] 	at java.base/jdk.internal.loader.URLClassPath.getLoader(URLClassPath.java:446)
     [java] 	at java.base/jdk.internal.loader.URLClassPath.getResource(URLClassPath.java:315)
     [java] 	at java.base/jdk.internal.loader.BuiltinClassLoader.findClassOnClassPathOrNull(BuiltinClassLoader.java:757)
     [java] 	at java.base/jdk.internal.loader.BuiltinClassLoader.loadClassOrNull(BuiltinClassLoader.java:681)
     [java] 	at java.base/jdk.internal.loader.BuiltinClassLoader.loadClass(BuiltinClassLoader.java:639)
     [java] 	at java.base/jdk.internal.loader.ClassLoaders$AppClassLoader.loadClass(ClassLoaders.java:188)
     [java] 	at java.base/java.lang.ClassLoader.loadClass(ClassLoader.java:526)
     [java] 	at java.base/java.net.URL.lookupViaProperty(URL.java:1453)
     [java] 	at java.base/java.net.URL.getURLStreamHandler(URL.java:1622)
     [java] 	at java.base/java.net.URL.<init>(URL.java:546)
     [java] 	at java.base/jdk.internal.loader.URLClassPath$JarLoader.newURL(URLClassPath.java:741)
     [java] 	at java.base/jdk.internal.loader.URLClassPath$JarLoader.<init>(URLClassPath.java:728)
     [java] 	at java.base/jdk.internal.loader.URLClassPath$3.run(URLClassPath.java:497)
     [java] 	at java.base/jdk.internal.loader.URLClassPath$3.run(URLClassPath.java:479)
     [java] 	at java.base/java.security.AccessController.doPrivileged(AccessController.java:714)
     [java] 	at java.base/jdk.internal.loader.URLClassPath.getLoader(URLClassPath.java:478)
     [java] 	at java.base/jdk.internal.loader.URLClassPath.getLoader(URLClassPath.java:446)
     [java] 	at java.base/jdk.internal.loader.URLClassPath.getResource(URLClassPath.java:315)
     [java] 	at java.base/jdk.internal.loader.BuiltinClassLoader.findClassOnClassPathOrNull(BuiltinClassLoader.java:757)
     [java] 	at java.base/jdk.internal.loader.BuiltinClassLoader.loadClassOrNull(BuiltinClassLoader.java:681)
     [java] 	at java.base/jdk.internal.loader.BuiltinClassLoader.loadClass(BuiltinClassLoader.java:639)
     [java] 	at java.base/jdk.internal.loader.ClassLoaders$AppClassLoader.loadClass(ClassLoaders.java:188)
     [java] 	at java.base/java.lang.ClassLoader.loadClass(ClassLoader.java:526)
     [java] 	at java.base/java.net.URL.lookupViaProperty(URL.java:1453)
     [java] 	at java.base/java.net.URL.getURLStreamHandler(URL.java:1622)
     [java] 	at java.base/java.net.URL.<init>(URL.java:546)
     [java] 	at java.base/jdk.internal.loader.URLClassPath$JarLoader.newURL(URLClassPath.java:741)
     [java] 	at java.base/jdk.internal.loader.URLClassPath$JarLoader.<init>(URLClassPath.java:728)
     [java] 	at java.base/jdk.internal.loader.URLClassPath$3.run(URLClassPath.java:497)
     [java] 	at java.base/jdk.internal.loader.URLClassPath$3.run(URLClassPath.java:479)
     [java] 	at java.base/java.security.AccessController.doPrivileged(AccessController.java:714)
     [java] 	at java.base/jdk.internal.loader.URLClassPath.getLoader(URLClassPath.java:478)
     [java] 	at java.base/jdk.internal.loader.URLClassPath.getLoader(URLClassPath.java:446)
     [java] 	at java.base/jdk.internal.loader.URLClassPath.getResource(URLClassPath.java:315)
     [java] 	at java.base/jdk.internal.loader.BuiltinClassLoader.findClassOnClassPathOrNull(BuiltinClassLoader.java:757)
     [java] 	at java.base/jdk.internal.loader.BuiltinClassLoader.loadClassOrNull(BuiltinClassLoader.java:681)
     [java] 	at java.base/jdk.internal.loader.BuiltinClassLoader.loadClass(BuiltinClassLoader.java:639)
     [java] 	at java.base/jdk.internal.loader.ClassLoaders$AppClassLoader.loadClass(ClassLoaders.java:188)
     [java] 	at java.base/java.lang.ClassLoader.loadClass(ClassLoader.java:526)
     [java] 	at java.base/java.net.URL.lookupViaProperty(URL.java:1453)
     [java] 	at java.base/java.net.URL.getURLStreamHandler(URL.java:1622)
     [java] 	at java.base/java.net.URL.<init>(URL.java:546)
     [java] 	at java.base/jdk.internal.loader.URLClassPath$JarLoader.newURL(URLClassPath.java:741)
     [java] 	at java.base/jdk.internal.loader.URLClassPath$JarLoader.<init>(URLClassPath.java:728)
     [java] 	at java.base/jdk.internal.loader.URLClassPath$3.run(URLClassPath.java:497)
     [java] 	at java.base/jdk.internal.loader.URLClassPath$3.run(URLClassPath.java:479)
     [java] 	at java.base/java.security.AccessController.doPrivileged(AccessController.java:714)
     [java] 	at java.base/jdk.internal.loader.URLClassPath.getLoader(URLClassPath.java:478)
     [java] 	at java.base/jdk.internal.loader.URLClassPath.getLoader(URLClassPath.java:446)
     [java] 	at java.base/jdk.internal.loader.URLClassPath.getResource(URLClassPath.java:315)
     [java] 	at java.base/jdk.internal.loader.BuiltinClassLoader.findClassOnClassPathOrNull(BuiltinClassLoader.java:757)
     [java] 	at java.base/jdk.internal.loader.BuiltinClassLoader.loadClassOrNull(BuiltinClassLoader.java:681)
     [java] 	at java.base/jdk.internal.loader.BuiltinClassLoader.loadClass(BuiltinClassLoader.java:639)
     [java] 	at java.base/jdk.internal.loader.ClassLoaders$AppClassLoader.loadClass(ClassLoaders.java:188)
     [java] 	at java.base/java.lang.ClassLoader.loadClass(ClassLoader.java:526)
     [java] 	at java.base/java.net.URL.lookupViaProperty(URL.java:1453)
     [java] 	at java.base/java.net.URL.getURLStreamHandler(URL.java:1622)
     [java] 	at java.base/java.net.URL.<init>(URL.java:546)
     [java] 	at java.base/jdk.internal.loader.URLClassPath$JarLoader.newURL(URLClassPath.java:741)
     [java] 	at java.base/jdk.internal.loader.URLClassPath$JarLoader.<init>(URLClassPath.java:728)
     [java] 	at java.base/jdk.internal.loader.URLClassPath$3.run(URLClassPath.java:497)
     [java] 	at java.base/jdk.internal.loader.URLClassPath$3.run(URLClassPath.java:479)
     [java] 	at java.base/java.security.AccessController.doPrivileged(AccessController.java:714)
     [java] 	at java.base/jdk.internal.loader.URLClassPath.getLoader(URLClassPath.java:478)
     [java] 	at java.base/jdk.internal.loader.URLClassPath.getLoader(URLClassPath.java:446)
     [java] 	at java.base/jdk.internal.loader.URLClassPath.getResource(URLClassPath.java:315)
     [java] 	at java.base/jdk.internal.loader.BuiltinClassLoader.findClassOnClassPathOrNull(BuiltinClassLoader.java:757)
     [java] 	at java.base/jdk.internal.loader.BuiltinClassLoader.loadClassOrNull(BuiltinClassLoader.java:681)
     [java] 	at java.base/jdk.internal.loader.BuiltinClassLoader.loadClass(BuiltinClassLoader.java:639)
     [java] 	at java.base/jdk.internal.loader.ClassLoaders$AppClassLoader.loadClass(ClassLoaders.java:188)
     [java] 	at java.base/java.lang.ClassLoader.loadClass(ClassLoader.java:526)
     [java] 	at java.base/java.net.URL.lookupViaProperty(URL.java:1453)
     [java] 	at java.base/java.net.URL.getURLStreamHandler(URL.java:1622)
     [java] 	at java.base/java.net.URL.<init>(URL.java:546)
     [java] 	at java.base/jdk.internal.loader.URLClassPath$JarLoader.newURL(URLClassPath.java:741)
     [java] 	at java.base/jdk.internal.loader.URLClassPath$JarLoader.<init>(URLClassPath.java:728)
     [java] 	at java.base/jdk.internal.loader.URLClassPath$3.run(URLClassPath.java:497)
     [java] 	at java.base/jdk.internal.loader.URLClassPath$3.run(URLClassPath.java:479)
     [java] 	at java.base/java.security.AccessController.doPrivileged(AccessController.java:714)
     [java] 	at java.base/jdk.internal.loader.URLClassPath.getLoader(URLClassPath.java:478)
     [java] 	at java.base/jdk.internal.loader.URLClassPath.getLoader(URLClassPath.java:446)
     [java] 	at java.base/jdk.internal.loader.URLClassPath.getResource(URLClassPath.java:315)
     [java] 	at java.base/jdk.internal.loader.BuiltinClassLoader.findClassOnClassPathOrNull(BuiltinClassLoader.java:757)
     [java] 	at java.base/jdk.internal.loader.BuiltinClassLoader.loadClassOrNull(BuiltinClassLoader.java:681)
     [java] 	at java.base/jdk.internal.loader.BuiltinClassLoader.loadClass(BuiltinClassLoader.java:639)
     [java] 	at java.base/jdk.internal.loader.ClassLoaders$AppClassLoader.loadClass(ClassLoaders.java:188)
     [java] 	at java.base/java.lang.ClassLoader.loadClass(ClassLoader.java:526)
     [java] 	at java.base/java.net.URL.lookupViaProperty(URL.java:1453)
     [java] 	at java.base/java.net.URL.getURLStreamHandler(URL.java:1622)
     [java] 	at java.base/java.net.URL.<init>(URL.java:546)
     [java] 	at java.base/jdk.internal.loader.URLClassPath$JarLoader.newURL(URLClassPath.java:741)
     [java] 	at java.base/jdk.internal.loader.URLClassPath$JarLoader.<init>(URLClassPath.java:728)
     [java] 	at java.base/jdk.internal.loader.URLClassPath$3.run(URLClassPath.java:497)
     [java] 	at java.base/jdk.internal.loader.URLClassPath$3.run(URLClassPath.java:479)
     [java] 	at java.base/java.security.AccessController.doPrivileged(AccessController.java:714)
     [java] 	at java.base/jdk.internal.loader.URLClassPath.getLoader(URLClassPath.java:478)
     [java] 	at java.base/jdk.internal.loader.URLClassPath.getLoader(URLClassPath.java:446)
     [java] 	at java.base/jdk.internal.loader.URLClassPath.getResource(URLClassPath.java:315)
     [java] 	at java.base/jdk.internal.loader.BuiltinClassLoader.findClassOnClassPathOrNull(BuiltinClassLoader.java:757)
     [java] 	at java.base/jdk.internal.loader.BuiltinClassLoader.loadClassOrNull(BuiltinClassLoader.java:681)
     [java] 	at java.base/jdk.internal.loader.BuiltinClassLoader.loadClass(BuiltinClassLoader.java:639)
     [java] 	at java.base/jdk.internal.loader.ClassLoaders$AppClassLoader.loadClass(ClassLoaders.java:188)
     [java] 	at java.base/java.lang.ClassLoader.loadClass(ClassLoader.java:526)
     [java] 	at java.base/java.net.URL.lookupViaProperty(URL.java:1453)
     [java] 	at java.base/java.net.URL.getURLStreamHandler(URL.java:1622)
     [java] 	at java.base/java.net.URL.<init>(URL.java:546)
     [java] 	at java.base/jdk.internal.loader.URLClassPath$JarLoader.newURL(URLClassPath.java:741)
     [java] 	at java.base/jdk.internal.loader.URLClassPath$JarLoader.<init>(URLClassPath.java:728)
     [java] 	at java.base/jdk.internal.loader.URLClassPath$3.run(URLClassPath.java:497)
     [java] 	at java.base/jdk.internal.loader.URLClassPath$3.run(URLClassPath.java:479)
     [java] 	at java.base/java.security.AccessController.doPrivileged(AccessController.java:714)
     [java] 	at java.base/jdk.internal.loader.URLClassPath.getLoader(URLClassPath.java:478)
     [java] 	at java.base/jdk.internal.loader.URLClassPath.getLoader(URLClassPath.java:446)
     [java] 	at java.base/jdk.internal.loader.URLClassPath.getResource(URLClassPath.java:315)
     [java] 	at java.base/jdk.internal.loader.BuiltinClassLoader.findClassOnClassPathOrNull(BuiltinClassLoader.java:757)
     [java] 	at java.base/jdk.internal.loader.BuiltinClassLoader.loadClassOrNull(BuiltinClassLoader.java:681)
     [java] 	at java.base/jdk.internal.loader.BuiltinClassLoader.loadClass(BuiltinClassLoader.java:639)
     [java] 	at java.base/jdk.internal.loader.ClassLoaders$AppClassLoader.loadClass(ClassLoaders.java:188)
     [java] 	at java.base/java.lang.ClassLoader.loadClass(ClassLoader.java:526)
     [java] 	at java.base/java.net.URL.lookupViaProperty(URL.java:1453)
     [java] 	at java.base/java.net.URL.getURLStreamHandler(URL.java:1622)
     [java] 	at java.base/java.net.URL.<init>(URL.java:546)
     [java] 	at java.base/jdk.internal.loader.URLClassPath$JarLoader.newURL(URLClassPath.java:741)
     [java] 	at java.base/jdk.internal.loader.URLClassPath$JarLoader.<init>(URLClassPath.java:728)
     [java] 	at java.base/jdk.internal.loader.URLClassPath$3.run(URLClassPath.java:497)
     [java] 	at java.base/jdk.internal.loader.URLClassPath$3.run(URLClassPath.java:479)
     [java] 	at java.base/java.security.AccessController.doPrivileged(AccessController.java:714)
     [java] 	at java.base/jdk.internal.loader.URLClassPath.getLoader(URLClassPath.java:478)
     [java] 	at java.base/jdk.internal.loader.URLClassPath.getLoader(URLClassPath.java:446)
     [java] 	at java.base/jdk.internal.loader.URLClassPath.getResource(URLClassPath.java:315)
     [java] 	at java.base/jdk.internal.loader.BuiltinClassLoader.findClassOnClassPathOrNull(BuiltinClassLoader.java:757)
     [java] 	at java.base/jdk.internal.loader.BuiltinClassLoader.loadClassOrNull(BuiltinClassLoader.java:681)
     [java] 	at java.base/jdk.internal.loader.BuiltinClassLoader.loadClass(BuiltinClassLoader.java:639)
     [java] 	at java.base/jdk.internal.loader.ClassLoaders$AppClassLoader.loadClass(ClassLoaders.java:188)
     [java] 	at java.base/java.lang.ClassLoader.loadClass(ClassLoader.java:526)
     [java] 	at java.base/java.net.URL.lookupViaProperty(URL.java:1453)
     [java] 	at java.base/java.net.URL.getURLStreamHandler(URL.java:1622)
     [java] 	at java.base/java.net.URL.<init>(URL.java:546)
     [java] 	at java.base/jdk.internal.loader.URLClassPath$JarLoader.newURL(URLClassPath.java:741)
     [java] 	at java.base/jdk.internal.loader.URLClassPath$JarLoader.<init>(URLClassPath.java:728)
     [java] 	at java.base/jdk.internal.loader.URLClassPath$3.run(URLClassPath.java:497)
     [java] 	at java.base/jdk.internal.loader.URLClassPath$3.run(URLClassPath.java:479)
     [java] 	at java.base/java.security.AccessController.doPrivileged(AccessController.java:714)
     [java] 	at java.base/jdk.internal.loader.URLClassPath.getLoader(URLClassPath.java:478)
     [java] 	at java.base/jdk.internal.loader.URLClassPath.getLoader(URLClassPath.java:446)
     [java] 	at java.base/jdk.internal.loader.URLClassPath.getResource(URLClassPath.java:315)
     [java] 	at java.base/jdk.internal.loader.BuiltinClassLoader.findClassOnClassPathOrNull(BuiltinClassLoader.java:757)
     [java] 	at java.base/jdk.internal.loader.BuiltinClassLoader.loadClassOrNull(BuiltinClassLoader.java:681)
     [java] 	at java.base/jdk.internal.loader.BuiltinClassLoader.loadClass(BuiltinClassLoader.java:639)
     [java] 	at java.base/jdk.internal.loader.ClassLoaders$AppClassLoader.loadClass(ClassLoaders.java:188)
     [java] 	at java.base/java.lang.ClassLoader.loadClass(ClassLoader.java:526)
     [java] 	at java.base/java.net.URL.lookupViaProperty(URL.java:1453)
     [java] 	at java.base/java.net.URL.getURLStreamHandler(URL.java:1622)
     [java] 	at java.base/java.net.URL.<init>(URL.java:546)
     [java] 	at java.base/jdk.internal.loader.URLClassPath$JarLoader.newURL(URLClassPath.java:741)
     [java] 	at java.base/jdk.internal.loader.URLClassPath$JarLoader.<init>(URLClassPath.java:728)
     [java] 	at java.base/jdk.internal.loader.URLClassPath$3.run(URLClassPath.java:497)
     [java] 	at java.base/jdk.internal.loader.URLClassPath$3.run(URLClassPath.java:479)
     [java] 	at java.base/java.security.AccessController.doPrivileged(AccessController.java:714)
     [java] 	at java.base/jdk.internal.loader.URLClassPath.getLoader(URLClassPath.java:478)
     [java] 	at java.base/jdk.internal.loader.URLClassPath.getLoader(URLClassPath.java:446)
     [java] 	at java.base/jdk.internal.loader.URLClassPath.getResource(URLClassPath.java:315)
     [java] 	at java.base/jdk.internal.loader.BuiltinClassLoader.findClassOnClassPathOrNull(BuiltinClassLoader.java:757)
     [java] 	at java.base/jdk.internal.loader.BuiltinClassLoader.loadClassOrNull(BuiltinClassLoader.java:681)
     [java] 	at java.base/jdk.internal.loader.BuiltinClassLoader.loadClass(BuiltinClassLoader.java:639)
     [java] 	at java.base/jdk.internal.loader.ClassLoaders$AppClassLoader.loadClass(ClassLoaders.java:188)
     [java] 	at java.base/java.lang.ClassLoader.loadClass(ClassLoader.java:526)
     [java] 	at java.base/java.net.URL.lookupViaProperty(URL.java:1453)
     [java] 	at java.base/java.net.URL.getURLStreamHandler(URL.java:1622)
     [java] 	at java.base/java.net.URL.<init>(URL.java:546)
     [java] 	at java.base/jdk.internal.loader.URLClassPath$JarLoader.newURL(URLClassPath.java:741)
     [java] 	at java.base/jdk.internal.loader.URLClassPath$JarLoader.<init>(URLClassPath.java:728)
     [java] 	at java.base/jdk.internal.loader.URLClassPath$3.run(URLClassPath.java:497)
     [java] 	at java.base/jdk.internal.loader.URLClassPath$3.run(URLClassPath.java:479)
     [java] 	at java.base/java.security.AccessController.doPrivileged(AccessController.java:714)
     [java] 	at java.base/jdk.internal.loader.URLClassPath.getLoader(URLClassPath.java:478)
     [java] 	at java.base/jdk.internal.loader.URLClassPath.getLoader(URLClassPath.java:446)
     [java] 	at java.base/jdk.internal.loader.URLClassPath.getResource(URLClassPath.java:315)
     [java] 	at java.base/jdk.internal.loader.BuiltinClassLoader.findClassOnClassPathOrNull(BuiltinClassLoader.java:757)
     [java] 	at java.base/jdk.internal.loader.BuiltinClassLoader.loadClassOrNull(BuiltinClassLoader.java:681)
     [java] 	at java.base/jdk.internal.loader.BuiltinClassLoader.loadClass(BuiltinClassLoader.java:639)
     [java] 	at java.base/jdk.internal.loader.ClassLoaders$AppClassLoader.loadClass(ClassLoaders.java:188)
     [java] 	at java.base/java.lang.ClassLoader.loadClass(ClassLoader.java:526)
     [java] 	at java.base/java.net.URL.lookupViaProperty(URL.java:1453)
     [java] 	at java.base/java.net.URL.getURLStreamHandler(URL.java:1622)
     [java] 	at java.base/java.net.URL.<init>(URL.java:546)
     [java] 	at java.base/jdk.internal.loader.URLClassPath$JarLoader.newURL(URLClassPath.java:741)
     [java] 	at java.base/jdk.internal.loader.URLClassPath$JarLoader.<init>(URLClassPath.java:728)
     [java] 	at java.base/jdk.internal.loader.URLClassPath$3.run(URLClassPath.java:497)
     [java] 	at java.base/jdk.internal.loader.URLClassPath$3.run(URLClassPath.java:479)
     [java] 	at java.base/java.security.AccessController.doPrivileged(AccessController.java:714)
     [java] 	at java.base/jdk.internal.loader.URLClassPath.getLoader(URLClassPath.java:478)
     [java] 	at java.base/jdk.internal.loader.URLClassPath.getLoader(URLClassPath.java:446)
     [java] 	at java.base/jdk.internal.loader.URLClassPath.getResource(URLClassPath.java:315)
     [java] 	at java.base/jdk.internal.loader.BuiltinClassLoader.findClassOnClassPathOrNull(BuiltinClassLoader.java:757)
     [java] 	at java.base/jdk.internal.loader.BuiltinClassLoader.loadClassOrNull(BuiltinClassLoader.java:681)
     [java] 	at java.base/jdk.internal.loader.BuiltinClassLoader.loadClass(BuiltinClassLoader.java:639)
     [java] 	at java.base/jdk.internal.loader.ClassLoaders$AppClassLoader.loadClass(ClassLoaders.java:188)
     [java] 	at java.base/java.lang.ClassLoader.loadClass(ClassLoader.java:526)
     [java] 	at java.base/java.net.URL.lookupViaProperty(URL.java:1453)
     [java] 	at java.base/java.net.URL.getURLStreamHandler(URL.java:1622)
     [java] 	at java.base/java.net.URL.<init>(URL.java:546)
     [java] 	at java.base/jdk.internal.loader.URLClassPath$JarLoader.newURL(URLClassPath.java:741)
     [java] 	at java.base/jdk.internal.loader.URLClassPath$JarLoader.<init>(URLClassPath.java:728)
     [java] 	at java.base/jdk.internal.loader.URLClassPath$3.run(URLClassPath.java:497)
     [java] 	at java.base/jdk.internal.loader.URLClassPath$3.run(URLClassPath.java:479)
     [java] 	at java.base/java.security.AccessController.doPrivileged(AccessController.java:714)
     [java] 	at java.base/jdk.internal.loader.URLClassPath.getLoader(URLClassPath.java:478)
     [java] 	at java.base/jdk.internal.loader.URLClassPath.getLoader(URLClassPath.java:446)
     [java] 	at java.base/jdk.internal.loader.URLClassPath.getResource(URLClassPath.java:315)
     [java] 	at java.base/jdk.internal.loader.BuiltinClassLoader.findClassOnClassPathOrNull(BuiltinClassLoader.java:757)
     [java] 	at java.base/jdk.internal.loader.BuiltinClassLoader.loadClassOrNull(BuiltinClassLoader.java:681)
     [java] 	at java.base/jdk.internal.loader.BuiltinClassLoader.loadClass(BuiltinClassLoader.java:639)
     [java] 	at java.base/jdk.internal.loader.ClassLoaders$AppClassLoader.loadClass(ClassLoaders.java:188)
     [java] 	at java.base/java.lang.ClassLoader.loadClass(ClassLoader.java:526)
     [java] 	at java.base/java.net.URL.lookupViaProperty(URL.java:1453)
     [java] 	at java.base/java.net.URL.getURLStreamHandler(URL.java:1622)
     [java] 	at java.base/java.net.URL.<init>(URL.java:546)
     [java] 	at java.base/jdk.internal.loader.URLClassPath$JarLoader.newURL(URLClassPath.java:741)
     [java] 	at java.base/jdk.internal.loader.URLClassPath$JarLoader.<init>(URLClassPath.java:728)
     [java] 	at java.base/jdk.internal.loader.URLClassPath$3.run(URLClassPath.java:497)
     [java] 	at java.base/jdk.internal.loader.URLClassPath$3.run(URLClassPath.java:479)
     [java] 	at java.base/java.security.AccessController.doPrivileged(AccessController.java:714)
     [java] 	at java.base/jdk.internal.loader.URLClassPath.getLoader(URLClassPath.java:478)
     [java] 	at java.base/jdk.internal.loader.URLClassPath.getLoader(URLClassPath.java:446)
     [java] 	at java.base/jdk.internal.loader.URLClassPath.getResource(URLClassPath.java:315)
     [java] 	at java.base/jdk.internal.loader.BuiltinClassLoader.findClassOnClassPathOrNull(BuiltinClassLoader.java:757)
     [java] 	at java.base/jdk.internal.loader.BuiltinClassLoader.loadClassOrNull(BuiltinClassLoader.java:681)
     [java] 	at java.base/jdk.internal.loader.BuiltinClassLoader.loadClass(BuiltinClassLoader.java:639)
     [java] 	at java.base/jdk.internal.loader.ClassLoaders$AppClassLoader.loadClass(ClassLoaders.java:188)
     [java] 	at java.base/java.lang.ClassLoader.loadClass(ClassLoader.java:526)
     [java] 	at java.base/java.net.URL.lookupViaProperty(URL.java:1453)
     [java] 	at java.base/java.net.URL.getURLStreamHandler(URL.java:1622)
     [java] 	at java.base/java.net.URL.<init>(URL.java:546)
     [java] 	at java.base/jdk.internal.loader.URLClassPath$JarLoader.newURL(URLClassPath.java:741)
     [java] 	at java.base/jdk.internal.loader.URLClassPath$JarLoader.<init>(URLClassPath.java:728)
     [java] 	at java.base/jdk.internal.loader.URLClassPath$3.run(URLClassPath.java:497)
     [java] 	at java.base/jdk.internal.loader.URLClassPath$3.run(URLClassPath.java:479)
     [java] 	at java.base/java.security.AccessController.doPrivileged(AccessController.java:714)
     [java] 	at java.base/jdk.internal.loader.URLClassPath.getLoader(URLClassPath.java:478)
     [java] 	at java.base/jdk.internal.loader.URLClassPath.getLoader(URLClassPath.java:446)
     [java] 	at java.base/jdk.internal.loader.URLClassPath.getResource(URLClassPath.java:315)
     [java] 	at java.base/jdk.internal.loader.BuiltinClassLoader.findClassOnClassPathOrNull(BuiltinClassLoader.java:757)
     [java] 	at java.base/jdk.internal.loader.BuiltinClassLoader.loadClassOrNull(BuiltinClassLoader.java:681)
     [java] 	at java.base/jdk.internal.loader.BuiltinClassLoader.loadClass(BuiltinClassLoader.java:639)
     [java] 	at java.base/jdk.internal.loader.ClassLoaders$AppClassLoader.loadClass(ClassLoaders.java:188)
     [java] 	at java.base/java.lang.ClassLoader.loadClass(ClassLoader.java:526)
     [java] 	at java.base/java.net.URL.lookupViaProperty(URL.java:1453)
     [java] 	at java.base/java.net.URL.getURLStreamHandler(URL.java:1622)
     [java] 	at java.base/java.net.URL.<init>(URL.java:546)
     [java] 	at java.base/jdk.internal.loader.URLClassPath$JarLoader.newURL(URLClassPath.java:741)
     [java] 	at java.base/jdk.internal.loader.URLClassPath$JarLoader.<init>(URLClassPath.java:728)
     [java] 	at java.base/jdk.internal.loader.URLClassPath$3.run(URLClassPath.java:497)
     [java] 	at java.base/jdk.internal.loader.URLClassPath$3.run(URLClassPath.java:479)
     [java] 	at java.base/java.security.AccessController.doPrivileged(AccessController.java:714)
     [java] 	at java.base/jdk.internal.loader.URLClassPath.getLoader(URLClassPath.java:478)
     [java] 	at java.base/jdk.internal.loader.URLClassPath.getLoader(URLClassPath.java:446)
     [java] 	at java.base/jdk.internal.loader.URLClassPath.getResource(URLClassPath.java:315)
     [java] 	at java.base/jdk.internal.loader.BuiltinClassLoader.findClassOnClassPathOrNull(BuiltinClassLoader.java:757)
     [java] 	at java.base/jdk.internal.loader.BuiltinClassLoader.loadClassOrNull(BuiltinClassLoader.java:681)
     [java] 	at java.base/jdk.internal.loader.BuiltinClassLoader.loadClass(BuiltinClassLoader.java:639)
     [java] 	at java.base/jdk.internal.loader.ClassLoaders$AppClassLoader.loadClass(ClassLoaders.java:188)
     [java] 	at java.base/java.lang.ClassLoader.loadClass(ClassLoader.java:526)
     [java] 	at java.base/java.net.URL.lookupViaProperty(URL.java:1453)
     [java] 	at java.base/java.net.URL.getURLStreamHandler(URL.java:1622)
     [java] 	at java.base/java.net.URL.<init>(URL.java:546)
     [java] 	at java.base/jdk.internal.loader.URLClassPath$JarLoader.newURL(URLClassPath.java:741)
     [java] 	at java.base/jdk.internal.loader.URLClassPath$JarLoader.<init>(URLClassPath.java:728)
     [java] 	at java.base/jdk.internal.loader.URLClassPath$3.run(URLClassPath.java:497)
     [java] 	at java.base/jdk.internal.loader.URLClassPath$3.run(URLClassPath.java:479)
     [java] 	at java.base/java.security.AccessController.doPrivileged(AccessController.java:714)
     [java] 	at java.base/jdk.internal.loader.URLClassPath.getLoader(URLClassPath.java:478)
     [java] 	at java.base/jdk.internal.loader.URLClassPath.getLoader(URLClassPath.java:446)
     [java] 	at java.base/jdk.internal.loader.URLClassPath.getResource(URLClassPath.java:315)
     [java] 	at java.base/jdk.internal.loader.BuiltinClassLoader.findClassOnClassPathOrNull(BuiltinClassLoader.java:757)
     [java] 	at java.base/jdk.internal.loader.BuiltinClassLoader.loadClassOrNull(BuiltinClassLoader.java:681)
     [java] 	at java.base/jdk.internal.loader.BuiltinClassLoader.loadClass(BuiltinClassLoader.java:639)
     [java] 	at java.base/jdk.internal.loader.ClassLoaders$AppClassLoader.loadClass(ClassLoaders.java:188)
     [java] 	at java.base/java.lang.ClassLoader.loadClass(ClassLoader.java:526)
     [java] 	at java.base/java.net.URL.lookupViaProperty(URL.java:1453)
     [java] 	at java.base/java.net.URL.getURLStreamHandler(URL.java:1622)
     [java] 	at java.base/java.net.URL.<init>(URL.java:546)
     [java] 	at java.base/jdk.internal.loader.URLClassPath$JarLoader.newURL(URLClassPath.java:741)
     [java] 	at java.base/jdk.internal.loader.URLClassPath$JarLoader.<init>(URLClassPath.java:728)
     [java] 	at java.base/jdk.internal.loader.URLClassPath$3.run(URLClassPath.java:497)
     [java] 	at java.base/jdk.internal.loader.URLClassPath$3.run(URLClassPath.java:479)
     [java] 	at java.base/java.security.AccessController.doPrivileged(AccessController.java:714)
     [java] 	at java.base/jdk.internal.loader.URLClassPath.getLoader(URLClassPath.java:478)
     [java] 	at java.base/jdk.internal.loader.URLClassPath.getLoader(URLClassPath.java:446)
     [java] 	at java.base/jdk.internal.loader.URLClassPath.getResource(URLClassPath.java:315)
     [java] 	at java.base/jdk.internal.loader.BuiltinClassLoader.findClassOnClassPathOrNull(BuiltinClassLoader.java:757)
     [java] 	at java.base/jdk.internal.loader.BuiltinClassLoader.loadClassOrNull(BuiltinClassLoader.java:681)
     [java] 	at java.base/jdk.internal.loader.BuiltinClassLoader.loadClass(BuiltinClassLoader.java:639)
     [java] 	at java.base/jdk.internal.loader.ClassLoaders$AppClassLoader.loadClass(ClassLoaders.java:188)
     [java] 	at java.base/java.lang.ClassLoader.loadClass(ClassLoader.java:526)
     [java] 	at java.base/java.net.URL.lookupViaProperty(URL.java:1453)
     [java] 	at java.base/java.net.URL.getURLStreamHandler(URL.java:1622)
     [java] 	at java.base/java.net.URL.<init>(URL.java:546)
     [java] 	at java.base/jdk.internal.loader.URLClassPath$JarLoader.newURL(URLClassPath.java:741)
     [java] 	at java.base/jdk.internal.loader.URLClassPath$JarLoader.<init>(URLClassPath.java:728)
     [java] 	at java.base/jdk.internal.loader.URLClassPath$3.run(URLClassPath.java:497)
     [java] 	at java.base/jdk.internal.loader.URLClassPath$3.run(URLClassPath.java:479)
     [java] 	at java.base/java.security.AccessController.doPrivileged(AccessController.java:714)
     [java] 	at java.base/jdk.internal.loader.URLClassPath.getLoader(URLClassPath.java:478)
     [java] 	at java.base/jdk.internal.loader.URLClassPath.getLoader(URLClassPath.java:446)
     [java] 	at java.base/jdk.internal.loader.URLClassPath.getResource(URLClassPath.java:315)
     [java] 	at java.base/jdk.internal.loader.BuiltinClassLoader.findClassOnClassPathOrNull(BuiltinClassLoader.java:757)
     [java] 	at java.base/jdk.internal.loader.BuiltinClassLoader.loadClassOrNull(BuiltinClassLoader.java:681)
     [java] 	at java.base/jdk.internal.loader.BuiltinClassLoader.loadClass(BuiltinClassLoader.java:639)
     [java] 	at java.base/jdk.internal.loader.ClassLoaders$AppClassLoader.loadClass(ClassLoaders.java:188)
     [java] 	at java.base/java.lang.ClassLoader.loadClass(ClassLoader.java:526)
     [java] 	at java.base/java.net.URL.lookupViaProperty(URL.java:1453)
     [java] 	at java.base/java.net.URL.getURLStreamHandler(URL.java:1622)
     [java] 	at java.base/java.net.URL.<init>(URL.java:546)
     [java] 	at java.base/jdk.internal.loader.URLClassPath$JarLoader.newURL(URLClassPath.java:741)
     [java] 	at java.base/jdk.internal.loader.URLClassPath$JarLoader.<init>(URLClassPath.java:728)
     [java] 	at java.base/jdk.internal.loader.URLClassPath$3.run(URLClassPath.java:497)
     [java] 	at java.base/jdk.internal.loader.URLClassPath$3.run(URLClassPath.java:479)
     [java] 	at java.base/java.security.AccessController.doPrivileged(AccessController.java:714)
     [java] 	at java.base/jdk.internal.loader.URLClassPath.getLoader(URLClassPath.java:478)
     [java] 	at java.base/jdk.internal.loader.URLClassPath.getLoader(URLClassPath.java:446)
     [java] 	at java.base/jdk.internal.loader.URLClassPath.getResource(URLClassPath.java:315)
     [java] 	at java.base/jdk.internal.loader.BuiltinClassLoader.findClassOnClassPathOrNull(BuiltinClassLoader.java:757)
     [java] 	at java.base/jdk.internal.loader.BuiltinClassLoader.loadClassOrNull(BuiltinClassLoader.java:681)
     [java] 	at java.base/jdk.internal.loader.BuiltinClassLoader.loadClass(BuiltinClassLoader.java:639)
     [java] 	at java.base/jdk.internal.loader.ClassLoaders$AppClassLoader.loadClass(ClassLoaders.java:188)
     [java] 	at java.base/java.lang.ClassLoader.loadClass(ClassLoader.java:526)
     [java] 	at java.base/java.net.URL.lookupViaProperty(URL.java:1453)
     [java] 	at java.base/java.net.URL.getURLStreamHandler(URL.java:1622)
     [java] 	at java.base/java.net.URL.<init>(URL.java:546)
     [java] 	at java.base/jdk.internal.loader.URLClassPath$JarLoader.newURL(URLClassPath.java:741)
     [java] 	at java.base/jdk.internal.loader.URLClassPath$JarLoader.<init>(URLClassPath.java:728)
     [java] 	at java.base/jdk.internal.loader.URLClassPath$3.run(URLClassPath.java:497)
     [java] 	at java.base/jdk.internal.loader.URLClassPath$3.run(URLClassPath.java:479)
     [java] 	at java.base/java.security.AccessController.doPrivileged(AccessController.java:714)
     [java] 	at java.base/jdk.internal.loader.URLClassPath.getLoader(URLClassPath.java:478)
     [java] 	at java.base/jdk.internal.loader.URLClassPath.getLoader(URLClassPath.java:446)
     [java] 	at java.base/jdk.internal.loader.URLClassPath.getResource(URLClassPath.java:315)
     [java] 	at java.base/jdk.internal.loader.BuiltinClassLoader.findClassOnClassPathOrNull(BuiltinClassLoader.java:757)
     [java] 	at java.base/jdk.internal.loader.BuiltinClassLoader.loadClassOrNull(BuiltinClassLoader.java:681)
     [java] 	at java.base/jdk.internal.loader.BuiltinClassLoader.loadClass(BuiltinClassLoader.java:639)
     [java] 	at java.base/jdk.internal.loader.ClassLoaders$AppClassLoader.loadClass(ClassLoaders.java:188)
     [java] 	at java.base/java.lang.ClassLoader.loadClass(ClassLoader.java:526)
     [java] 	at java.base/java.net.URL.lookupViaProperty(URL.java:1453)
     [java] 	at java.base/java.net.URL.getURLStreamHandler(URL.java:1622)
     [java] 	at java.base/java.net.URL.<init>(URL.java:546)
     [java] 	at java.base/jdk.internal.loader.URLClassPath$JarLoader.newURL(URLClassPath.java:741)
     [java] 	at java.base/jdk.internal.loader.URLClassPath$JarLoader.<init>(URLClassPath.java:728)
     [java] 	at java.base/jdk.internal.loader.URLClassPath$3.run(URLClassPath.java:497)
     [java] 	at java.base/jdk.internal.loader.URLClassPath$3.run(URLClassPath.java:479)
     [java] 	at java.base/java.security.AccessController.doPrivileged(AccessController.java:714)
     [java] 	at java.base/jdk.internal.loader.URLClassPath.getLoader(URLClassPath.java:478)
     [java] 	at java.base/jdk.internal.loader.URLClassPath.getLoader(URLClassPath.java:446)
     [java] 	at java.base/jdk.internal.loader.URLClassPath.getResource(URLClassPath.java:315)
     [java] 	at java.base/jdk.internal.loader.BuiltinClassLoader.findClassOnClassPathOrNull(BuiltinClassLoader.java:757)
     [java] 	at java.base/jdk.internal.loader.BuiltinClassLoader.loadClassOrNull(BuiltinClassLoader.java:681)
     [java] 	at java.base/jdk.internal.loader.BuiltinClassLoader.loadClass(BuiltinClassLoader.java:639)
     [java] 	at java.base/jdk.internal.loader.ClassLoaders$AppClassLoader.loadClass(ClassLoaders.java:188)
     [java] 	at java.base/java.lang.ClassLoader.loadClass(ClassLoader.java:526)
     [java] 	at java.base/java.net.URL.lookupViaProperty(URL.java:1453)
     [java] 	at java.base/java.net.URL.getURLStreamHandler(URL.java:1622)
     [java] 	at java.base/java.net.URL.<init>(URL.java:546)
     [java] 	at java.base/jdk.internal.loader.URLClassPath$JarLoader.newURL(URLClassPath.java:741)
     [java] 	at java.base/jdk.internal.loader.URLClassPath$JarLoader.<init>(URLClassPath.java:728)
     [java] 	at java.base/jdk.internal.loader.URLClassPath$3.run(URLClassPath.java:497)
     [java] 	at java.base/jdk.internal.loader.URLClassPath$3.run(URLClassPath.java:479)
     [java] 	at java.base/java.security.AccessController.doPrivileged(AccessController.java:714)
     [java] 	at java.base/jdk.internal.loader.URLClassPath.getLoader(URLClassPath.java:478)
     [java] 	at java.base/jdk.internal.loader.URLClassPath.getLoader(URLClassPath.java:446)
     [java] 	at java.base/jdk.internal.loader.URLClassPath.getResource(URLClassPath.java:315)
     [java] 	at java.base/jdk.internal.loader.BuiltinClassLoader.findClassOnClassPathOrNull(BuiltinClassLoader.java:757)
     [java] 	at java.base/jdk.internal.loader.BuiltinClassLoader.loadClassOrNull(BuiltinClassLoader.java:681)
     [java] 	at java.base/jdk.internal.loader.BuiltinClassLoader.loadClass(BuiltinClassLoader.java:639)
     [java] 	at java.base/jdk.internal.loader.ClassLoaders$AppClassLoader.loadClass(ClassLoaders.java:188)
     [java] 	at java.base/java.lang.ClassLoader.loadClass(ClassLoader.java:526)
     [java] 	at java.base/java.net.URL.lookupViaProperty(URL.java:1453)
     [java] 	at java.base/java.net.URL.getURLStreamHandler(URL.java:1622)
     [java] 	at java.base/java.net.URL.<init>(URL.java:546)
     [java] 	at java.base/jdk.internal.loader.URLClassPath$JarLoader.newURL(URLClassPath.java:741)
     [java] 	at java.base/jdk.internal.loader.URLClassPath$JarLoader.<init>(URLClassPath.java:728)
     [java] 	at java.base/jdk.internal.loader.URLClassPath$3.run(URLClassPath.java:497)
     [java] 	at java.base/jdk.internal.loader.URLClassPath$3.run(URLClassPath.java:479)
     [java] 	at java.base/java.security.AccessController.doPrivileged(AccessController.java:714)
     [java] 	at java.base/jdk.internal.loader.URLClassPath.getLoader(URLClassPath.java:478)
     [java] 	at java.base/jdk.internal.loader.URLClassPath.getLoader(URLClassPath.java:446)
     [java] 	at java.base/jdk.internal.loader.URLClassPath.getResource(URLClassPath.java:315)
     [java] 	at java.base/jdk.internal.loader.BuiltinClassLoader.findClassOnClassPathOrNull(BuiltinClassLoader.java:757)
     [java] 	at java.base/jdk.internal.loader.BuiltinClassLoader.loadClassOrNull(BuiltinClassLoader.java:681)
     [java] 	at java.base/jdk.internal.loader.BuiltinClassLoader.loadClass(BuiltinClassLoader.java:639)
     [java] 	at java.base/jdk.internal.loader.ClassLoaders$AppClassLoader.loadClass(ClassLoaders.java:188)
     [java] 	at java.base/java.lang.ClassLoader.loadClass(ClassLoader.java:526)
     [java] 	at java.base/java.net.URL.lookupViaProperty(URL.java:1453)
     [java] 	at java.base/java.net.URL.getURLStreamHandler(URL.java:1622)
     [java] 	at java.base/java.net.URL.<init>(URL.java:546)
     [java] 	at java.base/jdk.internal.loader.URLClassPath$JarLoader.newURL(URLClassPath.java:741)
     [java] 	at java.base/jdk.internal.loader.URLClassPath$JarLoader.<init>(URLClassPath.java:728)
     [java] 	at java.base/jdk.internal.loader.URLClassPath$3.run(URLClassPath.java:497)
     [java] 	at java.base/jdk.internal.loader.URLClassPath$3.run(URLClassPath.java:479)
     [java] 	at java.base/java.security.AccessController.doPrivileged(AccessController.java:714)
     [java] 	at java.base/jdk.internal.loader.URLClassPath.getLoader(URLClassPath.java:478)
     [java] 	at java.base/jdk.internal.loader.URLClassPath.getLoader(URLClassPath.java:446)
     [java] 	at java.base/jdk.internal.loader.URLClassPath.getResource(URLClassPath.java:315)
     [java] 	at java.base/jdk.internal.loader.BuiltinClassLoader.findClassOnClassPathOrNull(BuiltinClassLoader.java:757)
     [java] 	at java.base/jdk.internal.loader.BuiltinClassLoader.loadClassOrNull(BuiltinClassLoader.java:681)
     [java] 	at java.base/jdk.internal.loader.BuiltinClassLoader.loadClass(BuiltinClassLoader.java:639)
     [java] 	at java.base/jdk.internal.loader.ClassLoaders$AppClassLoader.loadClass(ClassLoaders.java:188)
     [java] 	at java.base/java.lang.ClassLoader.loadClass(ClassLoader.java:526)
     [java] 	at java.base/java.net.URL.lookupViaProperty(URL.java:1453)
     [java] 	at java.base/java.net.URL.getURLStreamHandler(URL.java:1622)
     [java] 	at java.base/java.net.URL.<init>(URL.java:546)
     [java] 	at java.base/jdk.internal.loader.URLClassPath$JarLoader.newURL(URLClassPath.java:741)
     [java] 	at java.base/jdk.internal.loader.URLClassPath$JarLoader.<init>(URLClassPath.java:728)
     [java] 	at java.base/jdk.internal.loader.URLClassPath$3.run(URLClassPath.java:497)
     [java] 	at java.base/jdk.internal.loader.URLClassPath$3.run(URLClassPath.java:479)
     [java] 	at java.base/java.security.AccessController.doPrivileged(AccessController.java:714)
     [java] 	at java.base/jdk.internal.loader.URLClassPath.getLoader(URLClassPath.java:478)
     [java] 	at java.base/jdk.internal.loader.URLClassPath.getLoader(URLClassPath.java:446)
     [java] 	at java.base/jdk.internal.loader.URLClassPath.getResource(URLClassPath.java:315)
     [java] 	at java.base/jdk.internal.loader.BuiltinClassLoader.findClassOnClassPathOrNull(BuiltinClassLoader.java:757)
     [java] 	at java.base/jdk.internal.loader.BuiltinClassLoader.loadClassOrNull(BuiltinClassLoader.java:681)
     [java] 	at java.base/jdk.internal.loader.BuiltinClassLoader.loadClass(BuiltinClassLoader.java:639)
     [java] 	at java.base/jdk.internal.loader.ClassLoaders$AppClassLoader.loadClass(ClassLoaders.java:188)
     [java] 	at java.base/java.lang.ClassLoader.loadClass(ClassLoader.java:526)
     [java] 	at java.base/java.net.URL.lookupViaProperty(URL.java:1453)
     [java] 	at java.base/java.net.URL.getURLStreamHandler(URL.java:1622)
     [java] 	at java.base/java.net.URL.<init>(URL.java:546)
     [java] 	at java.base/jdk.internal.loader.URLClassPath$JarLoader.newURL(URLClassPath.java:741)
     [java] 	at java.base/jdk.internal.loader.URLClassPath$JarLoader.<init>(URLClassPath.java:728)
     [java] 	at java.base/jdk.internal.loader.URLClassPath$3.run(URLClassPath.java:497)
     [java] 	at java.base/jdk.internal.loader.URLClassPath$3.run(URLClassPath.java:479)
     [java] 	at java.base/java.security.AccessController.doPrivileged(AccessController.java:714)
     [java] 	at java.base/jdk.internal.loader.URLClassPath.getLoader(URLClassPath.java:478)
     [java] 	at java.base/jdk.internal.loader.URLClassPath.getLoader(URLClassPath.java:446)
     [java] 	at java.base/jdk.internal.loader.URLClassPath.getResource(URLClassPath.java:315)
     [java] 	at java.base/jdk.internal.loader.BuiltinClassLoader.findClassOnClassPathOrNull(BuiltinClassLoader.java:757)
     [java] 	at java.base/jdk.internal.loader.BuiltinClassLoader.loadClassOrNull(BuiltinClassLoader.java:681)
     [java] 	at java.base/jdk.internal.loader.BuiltinClassLoader.loadClass(BuiltinClassLoader.java:639)
     [java] 	at java.base/jdk.internal.loader.ClassLoaders$AppClassLoader.loadClass(ClassLoaders.java:188)
     [java] 	at java.base/java.lang.ClassLoader.loadClass(ClassLoader.java:526)
     [java] 	at java.base/java.net.URL.lookupViaProperty(URL.java:1453)
     [java] 	at java.base/java.net.URL.getURLStreamHandler(URL.java:1622)
     [java] 	at java.base/java.net.URL.<init>(URL.java:546)
     [java] 	at java.base/jdk.internal.loader.URLClassPath$JarLoader.newURL(URLClassPath.java:741)
     [java] 	at java.base/jdk.internal.loader.URLClassPath$JarLoader.<init>(URLClassPath.java:728)
     [java] 	at java.base/jdk.internal.loader.URLClassPath$3.run(URLClassPath.java:497)
     [java] 	at java.base/jdk.internal.loader.URLClassPath$3.run(URLClassPath.java:479)
     [java] 	at java.base/java.security.AccessController.doPrivileged(AccessController.java:714)
     [java] 	at java.base/jdk.internal.loader.URLClassPath.getLoader(URLClassPath.java:478)
     [java] 	at java.base/jdk.internal.loader.URLClassPath.getLoader(URLClassPath.java:446)
     [java] 	at java.base/jdk.internal.loader.URLClassPath.getResource(URLClassPath.java:315)
     [java] 	at java.base/jdk.internal.loader.BuiltinClassLoader.findClassOnClassPathOrNull(BuiltinClassLoader.java:757)
     [java] 	at java.base/jdk.internal.loader.BuiltinClassLoader.loadClassOrNull(BuiltinClassLoader.java:681)
     [java] 	at java.base/jdk.internal.loader.BuiltinClassLoader.loadClass(BuiltinClassLoader.java:639)
     [java] 	at java.base/jdk.internal.loader.ClassLoaders$AppClassLoader.loadClass(ClassLoaders.java:188)
     [java] 	at java.base/java.lang.ClassLoader.loadClass(ClassLoader.java:526)
     [java] 	at java.base/java.net.URL.lookupViaProperty(URL.java:1453)
     [java] 	at java.base/java.net.URL.getURLStreamHandler(URL.java:1622)
     [java] 	at java.base/java.net.URL.<init>(URL.java:546)
     [java] 	at java.base/jdk.internal.loader.URLClassPath$JarLoader.newURL(URLClassPath.java:741)
     [java] 	at java.base/jdk.internal.loader.URLClassPath$JarLoader.<init>(URLClassPath.java:728)
     [java] 	at java.base/jdk.internal.loader.URLClassPath$3.run(URLClassPath.java:497)
     [java] 	at java.base/jdk.internal.loader.URLClassPath$3.run(URLClassPath.java:479)
     [java] 	at java.base/java.security.AccessController.doPrivileged(AccessController.java:714)
     [java] 	at java.base/jdk.internal.loader.URLClassPath.getLoader(URLClassPath.java:478)
     [java] 	at java.base/jdk.internal.loader.URLClassPath.getLoader(URLClassPath.java:446)
     [java] 	at java.base/jdk.internal.loader.URLClassPath.getResource(URLClassPath.java:315)
     [java] 	at java.base/jdk.internal.loader.BuiltinClassLoader.findClassOnClassPathOrNull(BuiltinClassLoader.java:757)
     [java] 	at java.base/jdk.internal.loader.BuiltinClassLoader.loadClassOrNull(BuiltinClassLoader.java:681)
     [java] 	at java.base/jdk.internal.loader.BuiltinClassLoader.loadClass(BuiltinClassLoader.java:639)
     [java] 	at java.base/jdk.internal.loader.ClassLoaders$AppClassLoader.loadClass(ClassLoaders.java:188)
     [java] 	at java.base/java.lang.ClassLoader.loadClass(ClassLoader.java:526)
     [java] 	at java.base/java.net.URL.lookupViaProperty(URL.java:1453)
     [java] 	at java.base/java.net.URL.getURLStreamHandler(URL.java:1622)
     [java] 	at java.base/java.net.URL.<init>(URL.java:546)
     [java] 	at java.base/jdk.internal.loader.URLClassPath$JarLoader.newURL(URLClassPath.java:741)
     [java] 	at java.base/jdk.internal.loader.URLClassPath$JarLoader.<init>(URLClassPath.java:728)
     [java] 	at java.base/jdk.internal.loader.URLClassPath$3.run(URLClassPath.java:497)
     [java] 	at java.base/jdk.internal.loader.URLClassPath$3.run(URLClassPath.java:479)
     [java] 	at java.base/java.security.AccessController.doPrivileged(AccessController.java:714)
     [java] 	at java.base/jdk.internal.loader.URLClassPath.getLoader(URLClassPath.java:478)
     [java] 	at java.base/jdk.internal.loader.URLClassPath.getLoader(URLClassPath.java:446)
     [java] 	at java.base/jdk.internal.loader.URLClassPath.getResource(URLClassPath.java:315)
     [java] 	at java.base/jdk.internal.loader.BuiltinClassLoader.findClassOnClassPathOrNull(BuiltinClassLoader.java:757)
     [java] 	at java.base/jdk.internal.loader.BuiltinClassLoader.loadClassOrNull(BuiltinClassLoader.java:681)
     [java] 	at java.base/jdk.internal.loader.BuiltinClassLoader.loadClass(BuiltinClassLoader.java:639)
     [java] 	at java.base/jdk.internal.loader.ClassLoaders$AppClassLoader.loadClass(ClassLoaders.java:188)
     [java] 	at java.base/java.lang.ClassLoader.loadClass(ClassLoader.java:526)
     [java] 	at java.base/java.net.URL.lookupViaProperty(URL.java:1453)
     [java] 	at java.base/java.net.URL.getURLStreamHandler(URL.java:1622)
     [java] 	at java.base/java.net.URL.<init>(URL.java:546)
     [java] 	at java.base/jdk.internal.loader.URLClassPath$JarLoader.newURL(URLClassPath.java:741)
     [java] 	at java.base/jdk.internal.loader.URLClassPath$JarLoader.<init>(URLClassPath.java:728)
     [java] 	at java.base/jdk.internal.loader.URLClassPath$3.run(URLClassPath.java:497)
     [java] 	at java.base/jdk.internal.loader.URLClassPath$3.run(URLClassPath.java:479)
     [java] 	at java.base/java.security.AccessController.doPrivileged(AccessController.java:714)
     [java] 	at java.base/jdk.internal.loader.URLClassPath.getLoader(URLClassPath.java:478)
     [java] 	at java.base/jdk.internal.loader.URLClassPath.getLoader(URLClassPath.java:446)
     [java] 	at java.base/jdk.internal.loader.URLClassPath.getResource(URLClassPath.java:315)
     [java] 	at java.base/jdk.internal.loader.BuiltinClassLoader.findClassOnClassPathOrNull(BuiltinClassLoader.java:757)
     [java] 	at java.base/jdk.internal.loader.BuiltinClassLoader.loadClassOrNull(BuiltinClassLoader.java:681)
     [java] 	at java.base/jdk.internal.loader.BuiltinClassLoader.loadClass(BuiltinClassLoader.java:639)
     [java] 	at java.base/jdk.internal.loader.ClassLoaders$AppClassLoader.loadClass(ClassLoaders.java:188)
     [java] 	at java.base/java.lang.ClassLoader.loadClass(ClassLoader.java:526)
     [java] 	at java.base/java.net.URL.lookupViaProperty(URL.java:1453)
     [java] 	at java.base/java.net.URL.getURLStreamHandler(URL.java:1622)
     [java] 	at java.base/java.net.URL.<init>(URL.java:546)
     [java] 	at java.base/jdk.internal.loader.URLClassPath$JarLoader.newURL(URLClassPath.java:741)
     [java] 	at java.base/jdk.internal.loader.URLClassPath$JarLoader.<init>(URLClassPath.java:728)
     [java] 	at java.base/jdk.internal.loader.URLClassPath$3.run(URLClassPath.java:497)
     [java] 	at java.base/jdk.internal.loader.URLClassPath$3.run(URLClassPath.java:479)
     [java] 	at java.base/java.security.AccessController.doPrivileged(AccessController.java:714)
     [java] 	at java.base/jdk.internal.loader.URLClassPath.getLoader(URLClassPath.java:478)
     [java] 	at java.base/jdk.internal.loader.URLClassPath.getLoader(URLClassPath.java:446)
     [java] 	at java.base/jdk.internal.loader.URLClassPath.getResource(URLClassPath.java:315)
     [java] 	at java.base/jdk.internal.loader.BuiltinClassLoader.findClassOnClassPathOrNull(BuiltinClassLoader.java:757)
     [java] 	at java.base/jdk.internal.loader.BuiltinClassLoader.loadClassOrNull(BuiltinClassLoader.java:681)
     [java] 	at java.base/jdk.internal.loader.BuiltinClassLoader.loadClass(BuiltinClassLoader.java:639)
     [java] 	at java.base/jdk.internal.loader.ClassLoaders$AppClassLoader.loadClass(ClassLoaders.java:188)
     [java] 	at java.base/java.lang.ClassLoader.loadClass(ClassLoader.java:526)
     [java] 	at java.base/java.net.URL.lookupViaProperty(URL.java:1453)
     [java] 	at java.base/java.net.URL.getURLStreamHandler(URL.java:1622)
     [java] 	at java.base/java.net.URL.<init>(URL.java:546)
     [java] 	at java.base/jdk.internal.loader.URLClassPath$JarLoader.newURL(URLClassPath.java:741)
     [java] 	at java.base/jdk.internal.loader.URLClassPath$JarLoader.<init>(URLClassPath.java:728)
     [java] 	at java.base/jdk.internal.loader.URLClassPath$3.run(URLClassPath.java:497)
     [java] 	at java.base/jdk.internal.loader.URLClassPath$3.run(URLClassPath.java:479)
     [java] 	at java.base/java.security.AccessController.doPrivileged(AccessController.java:714)
     [java] 	at java.base/jdk.internal.loader.URLClassPath.getLoader(URLClassPath.java:478)
     [java] 	at java.base/jdk.internal.loader.URLClassPath.getLoader(URLClassPath.java:446)
     [java] 	at java.base/jdk.internal.loader.URLClassPath.getResource(URLClassPath.java:315)
     [java] 	at java.base/jdk.internal.loader.BuiltinClassLoader.findClassOnClassPathOrNull(BuiltinClassLoader.java:757)
     [java] 	at java.base/jdk.internal.loader.BuiltinClassLoader.loadClassOrNull(BuiltinClassLoader.java:681)
     [java] 	at java.base/jdk.internal.loader.BuiltinClassLoader.loadClass(BuiltinClassLoader.java:639)
     [java] 	at java.base/jdk.internal.loader.ClassLoaders$AppClassLoader.loadClass(ClassLoaders.java:188)
     [java] 	at java.base/java.lang.ClassLoader.loadClass(ClassLoader.java:526)
     [java] 	at java.base/java.net.URL.lookupViaProperty(URL.java:1453)
     [java] 	at java.base/java.net.URL.getURLStreamHandler(URL.java:1622)
     [java] 	at java.base/java.net.URL.<init>(URL.java:546)
     [java] 	at java.base/jdk.internal.loader.URLClassPath$JarLoader.newURL(URLClassPath.java:741)
     [java] 	at java.base/jdk.internal.loader.URLClassPath$JarLoader.<init>(URLClassPath.java:728)
     [java] 	at java.base/jdk.internal.loader.URLClassPath$3.run(URLClassPath.java:497)
     [java] 	at java.base/jdk.internal.loader.URLClassPath$3.run(URLClassPath.java:479)
     [java] 	at java.base/java.security.AccessController.doPrivileged(AccessController.java:714)
     [java] 	at java.base/jdk.internal.loader.URLClassPath.getLoader(URLClassPath.java:478)
     [java] 	at java.base/jdk.internal.loader.URLClassPath.getLoader(URLClassPath.java:446)
     [java] 	at java.base/jdk.internal.loader.URLClassPath.getResource(URLClassPath.java:315)
     [java] 	at java.base/jdk.internal.loader.BuiltinClassLoader.findClassOnClassPathOrNull(BuiltinClassLoader.java:757)
     [java] 	at java.base/jdk.internal.loader.BuiltinClassLoader.loadClassOrNull(BuiltinClassLoader.java:681)
     [java] 	at java.base/jdk.internal.loader.BuiltinClassLoader.loadClass(BuiltinClassLoader.java:639)
     [java] 	at java.base/jdk.internal.loader.ClassLoaders$AppClassLoader.loadClass(ClassLoaders.java:188)
     [java] 	at java.base/java.lang.ClassLoader.loadClass(ClassLoader.java:526)
     [java] 	at java.base/java.net.URL.lookupViaProperty(URL.java:1453)
     [java] 	at java.base/java.net.URL.getURLStreamHandler(URL.java:1622)
     [java] 	at java.base/java.net.URL.<init>(URL.java:546)
     [java] 	at java.base/jdk.internal.loader.URLClassPath$JarLoader.newURL(URLClassPath.java:741)
     [java] 	at java.base/jdk.internal.loader.URLClassPath$JarLoader.<init>(URLClassPath.java:728)
     [java] 	at java.base/jdk.internal.loader.URLClassPath$3.run(URLClassPath.java:497)
     [java] 	at java.base/jdk.internal.loader.URLClassPath$3.run(URLClassPath.java:479)
     [java] 	at java.base/java.security.AccessController.doPrivileged(AccessController.java:714)
     [java] 	at java.base/jdk.internal.loader.URLClassPath.getLoader(URLClassPath.java:478)
     [java] 	at java.base/jdk.internal.loader.URLClassPath.getLoader(URLClassPath.java:446)
     [java] 	at java.base/jdk.internal.loader.URLClassPath.getResource(URLClassPath.java:315)
     [java] 	at java.base/jdk.internal.loader.BuiltinClassLoader.findClassOnClassPathOrNull(BuiltinClassLoader.java:757)
     [java] 	at java.base/jdk.internal.loader.BuiltinClassLoader.loadClassOrNull(BuiltinClassLoader.java:681)
     [java] 	at java.base/jdk.internal.loader.BuiltinClassLoader.loadClass(BuiltinClassLoader.java:639)
     [java] 	at java.base/jdk.internal.loader.ClassLoaders$AppClassLoader.loadClass(ClassLoaders.java:188)
     [java] 	at java.base/java.lang.ClassLoader.loadClass(ClassLoader.java:526)
     [java] 	at java.base/java.net.URL.lookupViaProperty(URL.java:1453)
     [java] 	at java.base/java.net.URL.getURLStreamHandler(URL.java:1622)
     [java] 	at java.base/java.net.URL.<init>(URL.java:546)
     [java] 	at java.base/jdk.internal.loader.URLClassPath$JarLoader.newURL(URLClassPath.java:741)
     [java] 	at java.base/jdk.internal.loader.URLClassPath$JarLoader.<init>(URLClassPath.java:728)
     [java] 	at java.base/jdk.internal.loader.URLClassPath$3.run(URLClassPath.java:497)
     [java] 	at java.base/jdk.internal.loader.URLClassPath$3.run(URLClassPath.java:479)
     [java] 	at java.base/java.security.AccessController.doPrivileged(AccessController.java:714)
     [java] 	at java.base/jdk.internal.loader.URLClassPath.getLoader(URLClassPath.java:478)
     [java] 	at java.base/jdk.internal.loader.URLClassPath.getLoader(URLClassPath.java:446)
     [java] 	at java.base/jdk.internal.loader.URLClassPath.getResource(URLClassPath.java:315)
     [java] 	at java.base/jdk.internal.loader.BuiltinClassLoader.findClassOnClassPathOrNull(BuiltinClassLoader.java:757)
     [java] 	at java.base/jdk.internal.loader.BuiltinClassLoader.loadClassOrNull(BuiltinClassLoader.java:681)
     [java] 	at java.base/jdk.internal.loader.BuiltinClassLoader.loadClass(BuiltinClassLoader.java:639)
     [java] 	at java.base/jdk.internal.loader.ClassLoaders$AppClassLoader.loadClass(ClassLoaders.java:188)
     [java] 	at java.base/java.lang.ClassLoader.loadClass(ClassLoader.java:526)
     [java] 	at java.base/java.net.URL.lookupViaProperty(URL.java:1453)
     [java] 	at java.base/java.net.URL.getURLStreamHandler(URL.java:1622)
     [java] 	at java.base/java.net.URL.<init>(URL.java:546)
     [java] 	at java.base/jdk.internal.loader.URLClassPath$JarLoader.newURL(URLClassPath.java:741)
     [java] 	at java.base/jdk.internal.loader.URLClassPath$JarLoader.<init>(URLClassPath.java:728)
     [java] 	at java.base/jdk.internal.loader.URLClassPath$3.run(URLClassPath.java:497)
     [java] 	at java.base/jdk.internal.loader.URLClassPath$3.run(URLClassPath.java:479)
     [java] 	at java.base/java.security.AccessController.doPrivileged(AccessController.java:714)
     [java] 	at java.base/jdk.internal.loader.URLClassPath.getLoader(URLClassPath.java:478)
     [java] 	at java.base/jdk.internal.loader.URLClassPath.getLoader(URLClassPath.java:446)
     [java] 	at java.base/jdk.internal.loader.URLClassPath.getResource(URLClassPath.java:315)
     [java] 	at java.base/jdk.internal.loader.BuiltinClassLoader.findClassOnClassPathOrNull(BuiltinClassLoader.java:757)
     [java] 	at java.base/jdk.internal.loader.BuiltinClassLoader.loadClassOrNull(BuiltinClassLoader.java:681)
     [java] 	at java.base/jdk.internal.loader.BuiltinClassLoader.loadClass(BuiltinClassLoader.java:639)
     [java] 	at java.base/jdk.internal.loader.ClassLoaders$AppClassLoader.loadClass(ClassLoaders.java:188)
     [java] 	at java.base/java.lang.ClassLoader.loadClass(ClassLoader.java:526)
     [java] 	at java.base/java.net.URL.lookupViaProperty(URL.java:1453)
     [java] 	at java.base/java.net.URL.getURLStreamHandler(URL.java:1622)
     [java] 	at java.base/java.net.URL.<init>(URL.java:546)
     [java] 	at java.base/jdk.internal.loader.URLClassPath$JarLoader.newURL(URLClassPath.java:741)
     [java] 	at java.base/jdk.internal.loader.URLClassPath$JarLoader.<init>(URLClassPath.java:728)
     [java] 	at java.base/jdk.internal.loader.URLClassPath$3.run(URLClassPath.java:497)
     [java] 	at java.base/jdk.internal.loader.URLClassPath$3.run(URLClassPath.java:479)
     [java] 	at java.base/java.security.AccessController.doPrivileged(AccessController.java:714)
     [java] 	at java.base/jdk.internal.loader.URLClassPath.getLoader(URLClassPath.java:478)
     [java] 	at java.base/jdk.internal.loader.URLClassPath.getLoader(URLClassPath.java:446)
     [java] 	at java.base/jdk.internal.loader.URLClassPath.getResource(URLClassPath.java:315)
     [java] 	at java.base/jdk.internal.loader.BuiltinClassLoader.findClassOnClassPathOrNull(BuiltinClassLoader.java:757)
     [java] 	at java.base/jdk.internal.loader.BuiltinClassLoader.loadClassOrNull(BuiltinClassLoader.java:681)
     [java] 	at java.base/jdk.internal.loader.BuiltinClassLoader.loadClass(BuiltinClassLoader.java:639)
     [java] 	at java.base/jdk.internal.loader.ClassLoaders$AppClassLoader.loadClass(ClassLoaders.java:188)
     [java] 	at java.base/java.lang.ClassLoader.loadClass(ClassLoader.java:526)
     [java] 	at java.base/java.net.URL.lookupViaProperty(URL.java:1453)
     [java] 	at java.base/java.net.URL.getURLStreamHandler(URL.java:1622)
     [java] 	at java.base/java.net.URL.<init>(URL.java:546)
     [java] 	at java.base/jdk.internal.loader.URLClassPath$JarLoader.newURL(URLClassPath.java:741)
     [java] 	at java.base/jdk.internal.loader.URLClassPath$JarLoader.<init>(URLClassPath.java:728)
     [java] 	at java.base/jdk.internal.loader.URLClassPath$3.run(URLClassPath.java:497)
     [java] 	at java.base/jdk.internal.loader.URLClassPath$3.run(URLClassPath.java:479)
     [java] 	at java.base/java.security.AccessController.doPrivileged(AccessController.java:714)
     [java] 	at java.base/jdk.internal.loader.URLClassPath.getLoader(URLClassPath.java:478)
     [java] 	at java.base/jdk.internal.loader.URLClassPath.getLoader(URLClassPath.java:446)
     [java] 	at java.base/jdk.internal.loader.URLClassPath.getResource(URLClassPath.java:315)
     [java] 	at java.base/jdk.internal.loader.BuiltinClassLoader.findClassOnClassPathOrNull(BuiltinClassLoader.java:757)
     [java] 	at java.base/jdk.internal.loader.BuiltinClassLoader.loadClassOrNull(BuiltinClassLoader.java:681)
     [java] 	at java.base/jdk.internal.loader.BuiltinClassLoader.loadClass(BuiltinClassLoader.java:639)
     [java] 	at java.base/jdk.internal.loader.ClassLoaders$AppClassLoader.loadClass(ClassLoaders.java:188)
     [java] 	at java.base/java.lang.ClassLoader.loadClass(ClassLoader.java:526)
     [java] 	at java.base/java.net.URL.lookupViaProperty(URL.java:1453)
     [java] 	at java.base/java.net.URL.getURLStreamHandler(URL.java:1622)
     [java] 	at java.base/java.net.URL.<init>(URL.java:546)
     [java] 	at java.base/jdk.internal.loader.URLClassPath$JarLoader.newURL(URLClassPath.java:741)
     [java] 	at java.base/jdk.internal.loader.URLClassPath$JarLoader.<init>(URLClassPath.java:728)
     [java] 	at java.base/jdk.internal.loader.URLClassPath$3.run(URLClassPath.java:497)
     [java] 	at java.base/jdk.internal.loader.URLClassPath$3.run(URLClassPath.java:479)
     [java] 	at java.base/java.security.AccessController.doPrivileged(AccessController.java:714)
     [java] 	at java.base/jdk.internal.loader.URLClassPath.getLoader(URLClassPath.java:478)
     [java] 	at java.base/jdk.internal.loader.URLClassPath.getLoader(URLClassPath.java:446)
     [java] 	at java.base/jdk.internal.loader.URLClassPath.getResource(URLClassPath.java:315)
     [java] 	at java.base/jdk.internal.loader.BuiltinClassLoader.findClassOnClassPathOrNull(BuiltinClassLoader.java:757)
     [java] 	at java.base/jdk.internal.loader.BuiltinClassLoader.loadClassOrNull(BuiltinClassLoader.java:681)
     [java] 	at java.base/jdk.internal.loader.BuiltinClassLoader.loadClass(BuiltinClassLoader.java:639)
     [java] 	at java.base/jdk.internal.loader.ClassLoaders$AppClassLoader.loadClass(ClassLoaders.java:188)
     [java] 	at java.base/java.lang.ClassLoader.loadClass(ClassLoader.java:526)
     [java] 	at java.base/java.net.URL.lookupViaProperty(URL.java:1453)
     [java] 	at java.base/java.net.URL.getURLStreamHandler(URL.java:1622)
     [java] 	at java.base/java.net.URL.<init>(URL.java:546)
     [java] 	at java.base/jdk.internal.loader.URLClassPath$JarLoader.newURL(URLClassPath.java:741)
     [java] 	at java.base/jdk.internal.loader.URLClassPath$JarLoader.<init>(URLClassPath.java:728)
     [java] 	at java.base/jdk.internal.loader.URLClassPath$3.run(URLClassPath.java:497)
     [java] 	at java.base/jdk.internal.loader.URLClassPath$3.run(URLClassPath.java:479)
     [java] 	at java.base/java.security.AccessController.doPrivileged(AccessController.java:714)
     [java] 	at java.base/jdk.internal.loader.URLClassPath.getLoader(URLClassPath.java:478)
     [java] 	at java.base/jdk.internal.loader.URLClassPath.getLoader(URLClassPath.java:446)
     [java] 	at java.base/jdk.internal.loader.URLClassPath.getResource(URLClassPath.java:315)
     [java] 	at java.base/jdk.internal.loader.BuiltinClassLoader.findClassOnClassPathOrNull(BuiltinClassLoader.java:757)
     [java] 	at java.base/jdk.internal.loader.BuiltinClassLoader.loadClassOrNull(BuiltinClassLoader.java:681)
     [java] 	at java.base/jdk.internal.loader.BuiltinClassLoader.loadClass(BuiltinClassLoader.java:639)
     [java] 	at java.base/jdk.internal.loader.ClassLoaders$AppClassLoader.loadClass(ClassLoaders.java:188)
     [java] 	at java.base/java.lang.ClassLoader.loadClass(ClassLoader.java:526)
     [java] 	at java.base/java.net.URL.lookupViaProperty(URL.java:1453)
     [java] 	at java.base/java.net.URL.getURLStreamHandler(URL.java:1622)
     [java] 	at java.base/java.net.URL.<init>(URL.java:546)
     [java] 	at java.base/jdk.internal.loader.URLClassPath$JarLoader.newURL(URLClassPath.java:741)
     [java] 	at java.base/jdk.internal.loader.URLClassPath$JarLoader.<init>(URLClassPath.java:728)
     [java] 	at java.base/jdk.internal.loader.URLClassPath$3.run(URLClassPath.java:497)
     [java] 	at java.base/jdk.internal.loader.URLClassPath$3.run(URLClassPath.java:479)
     [java] 	at java.base/java.security.AccessController.doPrivileged(AccessController.java:714)
     [java] 	at java.base/jdk.internal.loader.URLClassPath.getLoader(URLClassPath.java:478)
     [java] 	at java.base/jdk.internal.loader.URLClassPath.getLoader(URLClassPath.java:446)
     [java] 	at java.base/jdk.internal.loader.URLClassPath.getResource(URLClassPath.java:315)
     [java] 	at java.base/jdk.internal.loader.BuiltinClassLoader.findClassOnClassPathOrNull(BuiltinClassLoader.java:757)
     [java] 	at java.base/jdk.internal.loader.BuiltinClassLoader.loadClassOrNull(BuiltinClassLoader.java:681)
     [java] 	at java.base/jdk.internal.loader.BuiltinClassLoader.loadClass(BuiltinClassLoader.java:639)
     [java] 	at java.base/jdk.internal.loader.ClassLoaders$AppClassLoader.loadClass(ClassLoaders.java:188)
     [java] 	at java.base/java.lang.ClassLoader.loadClass(ClassLoader.java:526)
     [java] 	at java.base/java.net.URL.lookupViaProperty(URL.java:1453)
     [java] 	at java.base/java.net.URL.getURLStreamHandler(URL.java:1622)
     [java] 	at java.base/java.net.URL.<init>(URL.java:546)
     [java] 	at java.base/jdk.internal.loader.URLClassPath$JarLoader.newURL(URLClassPath.java:741)
     [java] 	at java.base/jdk.internal.loader.URLClassPath$JarLoader.<init>(URLClassPath.java:728)
     [java] 	at java.base/jdk.internal.loader.URLClassPath$3.run(URLClassPath.java:497)
     [java] 	at java.base/jdk.internal.loader.URLClassPath$3.run(URLClassPath.java:479)
     [java] 	at java.base/java.security.AccessController.doPrivileged(AccessController.java:714)
     [java] 	at java.base/jdk.internal.loader.URLClassPath.getLoader(URLClassPath.java:478)
     [java] 	at java.base/jdk.internal.loader.URLClassPath.getLoader(URLClassPath.java:446)
     [java] 	at java.base/jdk.internal.loader.URLClassPath.getResource(URLClassPath.java:315)
     [java] 	at java.base/jdk.internal.loader.BuiltinClassLoader.findClassOnClassPathOrNull(BuiltinClassLoader.java:757)
     [java] 	at java.base/jdk.internal.loader.BuiltinClassLoader.loadClassOrNull(BuiltinClassLoader.java:681)
     [java] 	at java.base/jdk.internal.loader.BuiltinClassLoader.loadClass(BuiltinClassLoader.java:639)
     [java] 	at java.base/jdk.internal.loader.ClassLoaders$AppClassLoader.loadClass(ClassLoaders.java:188)
     [java] 	at java.base/java.lang.ClassLoader.loadClass(ClassLoader.java:526)
     [java] 	at java.base/java.net.URL.lookupViaProperty(URL.java:1453)
     [java] 	at java.base/java.net.URL.getURLStreamHandler(URL.java:1622)
     [java] 	at java.base/java.net.URL.<init>(URL.java:546)
     [java] 	at java.base/jdk.internal.loader.URLClassPath$JarLoader.newURL(URLClassPath.java:741)
     [java] 	at java.base/jdk.internal.loader.URLClassPath$JarLoader.<init>(URLClassPath.java:728)
     [java] 	at java.base/jdk.internal.loader.URLClassPath$3.run(URLClassPath.java:497)
     [java] 	at java.base/jdk.internal.loader.URLClassPath$3.run(URLClassPath.java:479)
     [java] 	at java.base/java.security.AccessController.doPrivileged(AccessController.java:714)
     [java] 	at java.base/jdk.internal.loader.URLClassPath.getLoader(URLClassPath.java:478)
     [java] 	at java.base/jdk.internal.loader.URLClassPath.getLoader(URLClassPath.java:446)
     [java] 	at java.base/jdk.internal.loader.URLClassPath.getResource(URLClassPath.java:315)
     [java] 	at java.base/jdk.internal.loader.BuiltinClassLoader.findClassOnClassPathOrNull(BuiltinClassLoader.java:757)
     [java] 	at java.base/jdk.internal.loader.BuiltinClassLoader.loadClassOrNull(BuiltinClassLoader.java:681)
     [java] 	at java.base/jdk.internal.loader.BuiltinClassLoader.loadClass(BuiltinClassLoader.java:639)
     [java] 	at java.base/jdk.internal.loader.ClassLoaders$AppClassLoader.loadClass(ClassLoaders.java:188)
     [java] 	at java.base/java.lang.ClassLoader.loadClass(ClassLoader.java:526)
     [java] 	at java.base/java.net.URL.lookupViaProperty(URL.java:1453)
     [java] 	at java.base/java.net.URL.getURLStreamHandler(URL.java:1622)
     [java] 	at java.base/java.net.URL.<init>(URL.java:546)
     [java] 	at java.base/jdk.internal.loader.URLClassPath$JarLoader.newURL(URLClassPath.java:741)
     [java] 	at java.base/jdk.internal.loader.URLClassPath$JarLoader.<init>(URLClassPath.java:728)
     [java] 	at java.base/jdk.internal.loader.URLClassPath$3.run(URLClassPath.java:497)
     [java] 	at java.base/jdk.internal.loader.URLClassPath$3.run(URLClassPath.java:479)
     [java] 	at java.base/java.security.AccessController.doPrivileged(AccessController.java:714)
     [java] 	at java.base/jdk.internal.loader.URLClassPath.getLoader(URLClassPath.java:478)
     [java] 	at java.base/jdk.internal.loader.URLClassPath.getLoader(URLClassPath.java:446)
     [java] 	at java.base/jdk.internal.loader.URLClassPath.getResource(URLClassPath.java:315)
     [java] 	at java.base/jdk.internal.loader.BuiltinClassLoader.findClassOnClassPathOrNull(BuiltinClassLoader.java:757)
     [java] 	at java.base/jdk.internal.loader.BuiltinClassLoader.loadClassOrNull(BuiltinClassLoader.java:681)
     [java] 	at java.base/jdk.internal.loader.BuiltinClassLoader.loadClass(BuiltinClassLoader.java:639)
     [java] 	at java.base/jdk.internal.loader.ClassLoaders$AppClassLoader.loadClass(ClassLoaders.java:188)
     [java] 	at java.base/java.lang.ClassLoader.loadClass(ClassLoader.java:526)
     [java] 	at java.base/java.net.URL.lookupViaProperty(URL.java:1453)
     [java] 	at java.base/java.net.URL.getURLStreamHandler(URL.java:1622)
     [java] 	at java.base/java.net.URL.<init>(URL.java:546)
     [java] 	at java.base/jdk.internal.loader.URLClassPath$JarLoader.newURL(URLClassPath.java:741)
     [java] 	at java.base/jdk.internal.loader.URLClassPath$JarLoader.<init>(URLClassPath.java:728)
     [java] 	at java.base/jdk.internal.loader.URLClassPath$3.run(URLClassPath.java:497)
     [java] 	at java.base/jdk.internal.loader.URLClassPath$3.run(URLClassPath.java:479)
     [java] 	at java.base/java.security.AccessController.doPrivileged(AccessController.java:714)
     [java] 	at java.base/jdk.internal.loader.URLClassPath.getLoader(URLClassPath.java:478)
     [java] 	at java.base/jdk.internal.loader.URLClassPath.getLoader(URLClassPath.java:446)
     [java] 	at java.base/jdk.internal.loader.URLClassPath.getResource(URLClassPath.java:315)
     [java] 	at java.base/jdk.internal.loader.BuiltinClassLoader.findClassOnClassPathOrNull(BuiltinClassLoader.java:757)
     [java] 	at java.base/jdk.internal.loader.BuiltinClassLoader.loadClassOrNull(BuiltinClassLoader.java:681)
     [java] 	at java.base/jdk.internal.loader.BuiltinClassLoader.loadClass(BuiltinClassLoader.java:639)
     [java] 	at java.base/jdk.internal.loader.ClassLoaders$AppClassLoader.loadClass(ClassLoaders.java:188)
     [java] 	at java.base/java.lang.ClassLoader.loadClass(ClassLoader.java:526)
     [java] 	at java.base/java.net.URL.lookupViaProperty(URL.java:1453)
     [java] 	at java.base/java.net.URL.getURLStreamHandler(URL.java:1622)
     [java] 	at java.base/java.net.URL.<init>(URL.java:546)
     [java] 	at java.base/jdk.internal.loader.URLClassPath$JarLoader.newURL(URLClassPath.java:741)
     [java] 	at java.base/jdk.internal.loader.URLClassPath$JarLoader.<init>(URLClassPath.java:728)
     [java] 	at java.base/jdk.internal.loader.URLClassPath$3.run(URLClassPath.java:497)
     [java] 	at java.base/jdk.internal.loader.URLClassPath$3.run(URLClassPath.java:479)
     [java] 	at java.base/java.security.AccessController.doPrivileged(AccessController.java:714)
     [java] 	at java.base/jdk.internal.loader.URLClassPath.getLoader(URLClassPath.java:478)
     [java] 	at java.base/jdk.internal.loader.URLClassPath.getLoader(URLClassPath.java:446)
     [java] 	at java.base/jdk.internal.loader.URLClassPath.getResource(URLClassPath.java:315)
     [java] 	at java.base/jdk.internal.loader.BuiltinClassLoader.findClassOnClassPathOrNull(BuiltinClassLoader.java:757)
     [java] 	at java.base/jdk.internal.loader.BuiltinClassLoader.loadClassOrNull(BuiltinClassLoader.java:681)
     [java] 	at java.base/jdk.internal.loader.BuiltinClassLoader.loadClass(BuiltinClassLoader.java:639)
     [java] 	at java.base/jdk.internal.loader.ClassLoaders$AppClassLoader.loadClass(ClassLoaders.java:188)
     [java] 	at java.base/java.lang.ClassLoader.loadClass(ClassLoader.java:526)
     [java] 	at java.base/java.net.URL.lookupViaProperty(URL.java:1453)
     [java] 	at java.base/java.net.URL.getURLStreamHandler(URL.java:1622)
     [java] 	at java.base/java.net.URL.<init>(URL.java:546)
     [java] 	at java.base/jdk.internal.loader.URLClassPath$JarLoader.newURL(URLClassPath.java:741)
     [java] 	at java.base/jdk.internal.loader.URLClassPath$JarLoader.<init>(URLClassPath.java:728)
     [java] 	at java.base/jdk.internal.loader.URLClassPath$3.run(URLClassPath.java:497)
     [java] 	at java.base/jdk.internal.loader.URLClassPath$3.run(URLClassPath.java:479)
     [java] 	at java.base/java.security.AccessController.doPrivileged(AccessController.java:714)
     [java] 	at java.base/jdk.internal.loader.URLClassPath.getLoader(URLClassPath.java:478)
     [java] 	at java.base/jdk.internal.loader.URLClassPath.getLoader(URLClassPath.java:446)
     [java] 	at java.base/jdk.internal.loader.URLClassPath.getResource(URLClassPath.java:315)
     [java] 	at java.base/jdk.internal.loader.BuiltinClassLoader.findClassOnClassPathOrNull(BuiltinClassLoader.java:757)
     [java] 	at java.base/jdk.internal.loader.BuiltinClassLoader.loadClassOrNull(BuiltinClassLoader.java:681)
     [java] 	at java.base/jdk.internal.loader.BuiltinClassLoader.loadClass(BuiltinClassLoader.java:639)
     [java] 	at java.base/jdk.internal.loader.ClassLoaders$AppClassLoader.loadClass(ClassLoaders.java:188)
     [java] 	at java.base/java.lang.ClassLoader.loadClass(ClassLoader.java:526)
     [java] 	at java.base/java.net.URL.lookupViaProperty(URL.java:1453)
     [java] 	at java.base/java.net.URL.getURLStreamHandler(URL.java:1622)
     [java] 	at java.base/java.net.URL.<init>(URL.java:546)
     [java] 	at java.base/jdk.internal.loader.URLClassPath$JarLoader.newURL(URLClassPath.java:741)
     [java] 	at java.base/jdk.internal.loader.URLClassPath$JarLoader.<init>(URLClassPath.java:728)
     [java] 	at java.base/jdk.internal.loader.URLClassPath$3.run(URLClassPath.java:497)
     [java] 	at java.base/jdk.internal.loader.URLClassPath$3.run(URLClassPath.java:479)
     [java] 	at java.base/java.security.AccessController.doPrivileged(AccessController.java:714)
     [java] 	at java.base/jdk.internal.loader.URLClassPath.getLoader(URLClassPath.java:478)
     [java] 	at java.base/jdk.internal.loader.URLClassPath.getLoader(URLClassPath.java:446)
     [java] 	at java.base/jdk.internal.loader.URLClassPath.getResource(URLClassPath.java:315)
     [java] 	at java.base/jdk.internal.loader.BuiltinClassLoader.findClassOnClassPathOrNull(BuiltinClassLoader.java:757)
     [java] 	at java.base/jdk.internal.loader.BuiltinClassLoader.loadClassOrNull(BuiltinClassLoader.java:681)
     [java] 	at java.base/jdk.internal.loader.BuiltinClassLoader.loadClass(BuiltinClassLoader.java:639)
     [java] 	at java.base/jdk.internal.loader.ClassLoaders$AppClassLoader.loadClass(ClassLoaders.java:188)
     [java] 	at java.base/java.lang.ClassLoader.loadClass(ClassLoader.java:526)
     [java] 	at java.base/java.net.URL.lookupViaProperty(URL.java:1453)
     [java] 	at java.base/java.net.URL.getURLStreamHandler(URL.java:1622)
     [java] 	at java.base/java.net.URL.<init>(URL.java:546)
     [java] 	at java.base/jdk.internal.loader.URLClassPath$JarLoader.newURL(URLClassPath.java:741)
     [java] 	at java.base/jdk.internal.loader.URLClassPath$JarLoader.<init>(URLClassPath.java:728)
     [java] 	at java.base/jdk.internal.loader.URLClassPath$3.run(URLClassPath.java:497)
     [java] 	at java.base/jdk.internal.loader.URLClassPath$3.run(URLClassPath.java:479)
     [java] 	at java.base/java.security.AccessController.doPrivileged(AccessController.java:714)
     [java] 	at java.base/jdk.internal.loader.URLClassPath.getLoader(URLClassPath.java:478)
     [java] 	at java.base/jdk.internal.loader.URLClassPath.getLoader(URLClassPath.java:446)
     [java] 	at java.base/jdk.internal.loader.URLClassPath.getResource(URLClassPath.java:315)
     [java] 	at java.base/jdk.internal.loader.BuiltinClassLoader.findClassOnClassPathOrNull(BuiltinClassLoader.java:757)
     [java] 	at java.base/jdk.internal.loader.BuiltinClassLoader.loadClassOrNull(BuiltinClassLoader.java:681)
     [java] 	at java.base/jdk.internal.loader.BuiltinClassLoader.loadClass(BuiltinClassLoader.java:639)
     [java] 	at java.base/jdk.internal.loader.ClassLoaders$AppClassLoader.loadClass(ClassLoaders.java:188)
     [java] 	at java.base/java.lang.ClassLoader.loadClass(ClassLoader.java:526)
     [java] 	at java.base/java.net.URL.lookupViaProperty(URL.java:1453)
     [java] 	at java.base/java.net.URL.getURLStreamHandler(URL.java:1622)
     [java] 	at java.base/java.net.URL.<init>(URL.java:546)
     [java] 	at java.base/jdk.internal.loader.URLClassPath$JarLoader.newURL(URLClassPath.java:741)
     [java] 	at java.base/jdk.internal.loader.URLClassPath$JarLoader.<init>(URLClassPath.java:728)
     [java] 	at java.base/jdk.internal.loader.URLClassPath$3.run(URLClassPath.java:497)
     [java] 	at java.base/jdk.internal.loader.URLClassPath$3.run(URLClassPath.java:479)
     [java] 	at java.base/java.security.AccessController.doPrivileged(AccessController.java:714)
     [java] 	at java.base/jdk.internal.loader.URLClassPath.getLoader(URLClassPath.java:478)
     [java] 	at java.base/jdk.internal.loader.URLClassPath.getLoader(URLClassPath.java:446)
     [java] 	at java.base/jdk.internal.loader.URLClassPath.getResource(URLClassPath.java:315)
     [java] 	at java.base/jdk.internal.loader.BuiltinClassLoader.findClassOnClassPathOrNull(BuiltinClassLoader.java:757)
     [java] 	at java.base/jdk.internal.loader.BuiltinClassLoader.loadClassOrNull(BuiltinClassLoader.java:681)
     [java] 	at java.base/jdk.internal.loader.BuiltinClassLoader.loadClass(BuiltinClassLoader.java:639)
     [java] 	at java.base/jdk.internal.loader.ClassLoaders$AppClassLoader.loadClass(ClassLoaders.java:188)
     [java] 	at java.base/java.lang.ClassLoader.loadClass(ClassLoader.java:526)
     [java] 	at java.base/java.net.URL.lookupViaProperty(URL.java:1453)
     [java] 	at java.base/java.net.URL.getURLStreamHandler(URL.java:1622)
     [java] 	at java.base/java.net.URL.<init>(URL.java:546)
     [java] 	at java.base/jdk.internal.loader.URLClassPath$JarLoader.newURL(URLClassPath.java:741)
     [java] 	at java.base/jdk.internal.loader.URLClassPath$JarLoader.<init>(URLClassPath.java:728)
     [java] 	at java.base/jdk.internal.loader.URLClassPath$3.run(URLClassPath.java:497)
     [java] 	at java.base/jdk.internal.loader.URLClassPath$3.run(URLClassPath.java:479)
     [java] 	at java.base/java.security.AccessController.doPrivileged(AccessController.java:714)
     [java] 	at java.base/jdk.internal.loader.URLClassPath.getLoader(URLClassPath.java:478)
     [java] 	at java.base/jdk.internal.loader.URLClassPath.getLoader(URLClassPath.java:446)
     [java] 	at java.base/jdk.internal.loader.URLClassPath.getResource(URLClassPath.java:315)
     [java] 	at java.base/jdk.internal.loader.BuiltinClassLoader.findClassOnClassPathOrNull(BuiltinClassLoader.java:757)
     [java] 	at java.base/jdk.internal.loader.BuiltinClassLoader.loadClassOrNull(BuiltinClassLoader.java:681)
     [java] 	at java.base/jdk.internal.loader.BuiltinClassLoader.loadClass(BuiltinClassLoader.java:639)
     [java] 	at java.base/jdk.internal.loader.ClassLoaders$AppClassLoader.loadClass(ClassLoaders.java:188)
     [java] 	at java.base/java.lang.ClassLoader.loadClass(ClassLoader.java:526)
     [java] 	at java.base/java.net.URL.lookupViaProperty(URL.java:1453)
     [java] 	at java.base/java.net.URL.getURLStreamHandler(URL.java:1622)
     [java] 	at java.base/java.net.URL.<init>(URL.java:546)
     [java] 	at java.base/jdk.internal.loader.URLClassPath$JarLoader.newURL(URLClassPath.java:741)
     [java] 	at java.base/jdk.internal.loader.URLClassPath$JarLoader.<init>(URLClassPath.java:728)
     [java] 	at java.base/jdk.internal.loader.URLClassPath$3.run(URLClassPath.java:497)
     [java] 	at java.base/jdk.internal.loader.URLClassPath$3.run(URLClassPath.java:479)
     [java] 	at java.base/java.security.AccessController.doPrivileged(AccessController.java:714)
     [java] 	at java.base/jdk.internal.loader.URLClassPath.getLoader(URLClassPath.java:478)
     [java] 	at java.base/jdk.internal.loader.URLClassPath.getLoader(URLClassPath.java:446)
     [java] 	at java.base/jdk.internal.loader.URLClassPath.getResource(URLClassPath.java:315)
     [java] 	at java.base/jdk.internal.loader.BuiltinClassLoader.findClassOnClassPathOrNull(BuiltinClassLoader.java:757)
     [java] 	at java.base/jdk.internal.loader.BuiltinClassLoader.loadClassOrNull(BuiltinClassLoader.java:681)
     [java] 	at java.base/jdk.internal.loader.BuiltinClassLoader.loadClass(BuiltinClassLoader.java:639)
     [java] 	at java.base/jdk.internal.loader.ClassLoaders$AppClassLoader.loadClass(ClassLoaders.java:188)
     [java] 	at java.base/java.lang.ClassLoader.loadClass(ClassLoader.java:526)
     [java] 	at java.base/java.net.URL.lookupViaProperty(URL.java:1453)
     [java] 	at java.base/java.net.URL.getURLStreamHandler(URL.java:1622)
     [java] 	at java.base/java.net.URL.<init>(URL.java:546)
     [java] 	at java.base/jdk.internal.loader.URLClassPath$JarLoader.newURL(URLClassPath.java:741)
     [java] 	at java.base/jdk.internal.loader.URLClassPath$JarLoader.<init>(URLClassPath.java:728)
     [java] 	at java.base/jdk.internal.loader.URLClassPath$3.run(URLClassPath.java:497)
     [java] 	at java.base/jdk.internal.loader.URLClassPath$3.run(URLClassPath.java:479)
     [java] 	at java.base/java.security.AccessController.doPrivileged(AccessController.java:714)
     [java] 	at java.base/jdk.internal.loader.URLClassPath.getLoader(URLClassPath.java:478)
     [java] 	at java.base/jdk.internal.loader.URLClassPath.getLoader(URLClassPath.java:446)
     [java] 	at java.base/jdk.internal.loader.URLClassPath.getResource(URLClassPath.java:315)
     [java] 	at java.base/jdk.internal.loader.BuiltinClassLoader.findClassOnClassPathOrNull(BuiltinClassLoader.java:757)
     [java] 	at java.base/jdk.internal.loader.BuiltinClassLoader.loadClassOrNull(BuiltinClassLoader.java:681)
     [java] 	at java.base/jdk.internal.loader.BuiltinClassLoader.loadClass(BuiltinClassLoader.java:639)
     [java] 	at java.base/jdk.internal.loader.ClassLoaders$AppClassLoader.loadClass(ClassLoaders.java:188)
     [java] 	at java.base/java.lang.ClassLoader.loadClass(ClassLoader.java:526)
     [java] 	at java.base/java.net.URL.lookupViaProperty(URL.java:1453)
     [java] 	at java.base/java.net.URL.getURLStreamHandler(URL.java:1622)
     [java] 	at java.base/java.net.URL.<init>(URL.java:546)
     [java] 	at java.base/jdk.internal.loader.URLClassPath$JarLoader.newURL(URLClassPath.java:741)
     [java] 	at java.base/jdk.internal.loader.URLClassPath$JarLoader.<init>(URLClassPath.java:728)
     [java] 	at java.base/jdk.internal.loader.URLClassPath$3.run(URLClassPath.java:497)
     [java] 	at java.base/jdk.internal.loader.URLClassPath$3.run(URLClassPath.java:479)
     [java] 	at java.base/java.security.AccessController.doPrivileged(AccessController.java:714)
     [java] 	at java.base/jdk.internal.loader.URLClassPath.getLoader(URLClassPath.java:478)
     [java] 	at java.base/jdk.internal.loader.URLClassPath.getLoader(URLClassPath.java:446)
     [java] 	at java.base/jdk.internal.loader.URLClassPath.getResource(URLClassPath.java:315)
     [java] 	at java.base/jdk.internal.loader.BuiltinClassLoader.findClassOnClassPathOrNull(BuiltinClassLoader.java:757)
     [java] 	at java.base/jdk.internal.loader.BuiltinClassLoader.loadClassOrNull(BuiltinClassLoader.java:681)
     [java] 	at java.base/jdk.internal.loader.BuiltinClassLoader.loadClass(BuiltinClassLoader.java:639)
     [java] 	at java.base/jdk.internal.loader.ClassLoaders$AppClassLoader.loadClass(ClassLoaders.java:188)
     [java] 	at java.base/java.lang.ClassLoader.loadClass(ClassLoader.java:526)
     [java] 	at java.base/java.net.URL.lookupViaProperty(URL.java:1453)
     [java] 	at java.base/java.net.URL.getURLStreamHandler(URL.java:1622)
     [java] 	at java.base/java.net.URL.<init>(URL.java:546)
     [java] 	at java.base/jdk.internal.loader.URLClassPath$JarLoader.newURL(URLClassPath.java:741)
     [java] 	at java.base/jdk.internal.loader.URLClassPath$JarLoader.<init>(URLClassPath.java:728)
     [java] 	at java.base/jdk.internal.loader.URLClassPath$3.run(URLClassPath.java:497)
     [java] 	at java.base/jdk.internal.loader.URLClassPath$3.run(URLClassPath.java:479)
     [java] 	at java.base/java.security.AccessController.doPrivileged(AccessController.java:714)
     [java] 	at java.base/jdk.internal.loader.URLClassPath.getLoader(URLClassPath.java:478)
     [java] 	at java.base/jdk.internal.loader.URLClassPath.getLoader(URLClassPath.java:446)
     [java] 	at java.base/jdk.internal.loader.URLClassPath.getResource(URLClassPath.java:315)
     [java] 	at java.base/jdk.internal.loader.BuiltinClassLoader.findClassOnClassPathOrNull(BuiltinClassLoader.java:757)
     [java] 	at java.base/jdk.internal.loader.BuiltinClassLoader.loadClassOrNull(BuiltinClassLoader.java:681)
     [java] 	at java.base/jdk.internal.loader.BuiltinClassLoader.loadClass(BuiltinClassLoader.java:639)
     [java] 	at java.base/jdk.internal.loader.ClassLoaders$AppClassLoader.loadClass(ClassLoaders.java:188)
     [java] 	at java.base/java.lang.ClassLoader.loadClass(ClassLoader.java:526)
     [java] 	at java.base/java.net.URL.lookupViaProperty(URL.java:1453)
     [java] 	at java.base/java.net.URL.getURLStreamHandler(URL.java:1622)
     [java] 	at java.base/java.net.URL.<init>(URL.java:546)
     [java] 	at java.base/jdk.internal.loader.URLClassPath$JarLoader.newURL(URLClassPath.java:741)
     [java] 	at java.base/jdk.internal.loader.URLClassPath$JarLoader.<init>(URLClassPath.java:728)
     [java] 	at java.base/jdk.internal.loader.URLClassPath$3.run(URLClassPath.java:497)
     [java] 	at java.base/jdk.internal.loader.URLClassPath$3.run(URLClassPath.java:479)
     [java] 	at java.base/java.security.AccessController.doPrivileged(AccessController.java:714)
     [java] 	at java.base/jdk.internal.loader.URLClassPath.getLoader(URLClassPath.java:478)
     [java] 	at java.base/jdk.internal.loader.URLClassPath.getLoader(URLClassPath.java:446)
     [java] 	at java.base/jdk.internal.loader.URLClassPath.getResource(URLClassPath.java:315)
     [java] 	at java.base/jdk.internal.loader.BuiltinClassLoader.findClassOnClassPathOrNull(BuiltinClassLoader.java:757)
     [java] 	at java.base/jdk.internal.loader.BuiltinClassLoader.loadClassOrNull(BuiltinClassLoader.java:681)
     [java] 	at java.base/jdk.internal.loader.BuiltinClassLoader.loadClass(BuiltinClassLoader.java:639)
     [java] 	at java.base/jdk.internal.loader.ClassLoaders$AppClassLoader.loadClass(ClassLoaders.java:188)
     [java] 	at java.base/java.lang.ClassLoader.loadClass(ClassLoader.java:526)
     [java] 	at java.base/java.net.URL.lookupViaProperty(URL.java:1453)
     [java] 	at java.base/java.net.URL.getURLStreamHandler(URL.java:1622)
     [java] 	at java.base/java.net.URL.<init>(URL.java:546)
     [java] 	at java.base/jdk.internal.loader.URLClassPath$JarLoader.newURL(URLClassPath.java:741)
     [java] 	at java.base/jdk.internal.loader.URLClassPath$JarLoader.<init>(URLClassPath.java:728)
     [java] 	at java.base/jdk.internal.loader.URLClassPath$3.run(URLClassPath.java:497)
     [java] 	at java.base/jdk.internal.loader.URLClassPath$3.run(URLClassPath.java:479)
     [java] 	at java.base/java.security.AccessController.doPrivileged(AccessController.java:714)
     [java] 	at java.base/jdk.internal.loader.URLClassPath.getLoader(URLClassPath.java:478)
     [java] 	at java.base/jdk.internal.loader.URLClassPath.getLoader(URLClassPath.java:446)
     [java] 	at java.base/jdk.internal.loader.URLClassPath.getResource(URLClassPath.java:315)
     [java] 	at java.base/jdk.internal.loader.BuiltinClassLoader.findClassOnClassPathOrNull(BuiltinClassLoader.java:757)
     [java] 	at java.base/jdk.internal.loader.BuiltinClassLoader.loadClassOrNull(BuiltinClassLoader.java:681)
     [java] 	at java.base/jdk.internal.loader.BuiltinClassLoader.loadClass(BuiltinClassLoader.java:639)
     [java] 	at java.base/jdk.internal.loader.ClassLoaders$AppClassLoader.loadClass(ClassLoaders.java:188)
     [java] 	at java.base/java.lang.ClassLoader.loadClass(ClassLoader.java:526)
     [java] 	at java.base/java.net.URL.lookupViaProperty(URL.java:1453)
     [java] 	at java.base/java.net.URL.getURLStreamHandler(URL.java:1622)
     [java] 	at java.base/java.net.URL.<init>(URL.java:546)
     [java] 	at java.base/jdk.internal.loader.URLClassPath$JarLoader.newURL(URLClassPath.java:741)
     [java] 	at java.base/jdk.internal.loader.URLClassPath$JarLoader.<init>(URLClassPath.java:728)
     [java] 	at java.base/jdk.internal.loader.URLClassPath$3.run(URLClassPath.java:497)
     [java] 	at java.base/jdk.internal.loader.URLClassPath$3.run(URLClassPath.java:479)
     [java] 	at java.base/java.security.AccessController.doPrivileged(AccessController.java:714)
     [java] 	at java.base/jdk.internal.loader.URLClassPath.getLoader(URLClassPath.java:478)
     [java] 	at java.base/jdk.internal.loader.URLClassPath.getLoader(URLClassPath.java:446)
     [java] 	at java.base/jdk.internal.loader.URLClassPath.getResource(URLClassPath.java:315)
     [java] 	at java.base/jdk.internal.loader.BuiltinClassLoader.findClassOnClassPathOrNull(BuiltinClassLoader.java:757)
     [java] 	at java.base/jdk.internal.loader.BuiltinClassLoader.loadClassOrNull(BuiltinClassLoader.java:681)
     [java] 	at java.base/jdk.internal.loader.BuiltinClassLoader.loadClass(BuiltinClassLoader.java:639)
     [java] 	at java.base/jdk.internal.loader.ClassLoaders$AppClassLoader.loadClass(ClassLoaders.java:188)
     [java] 	at java.base/java.lang.ClassLoader.loadClass(ClassLoader.java:526)
     [java] 	at java.base/java.net.URL.lookupViaProperty(URL.java:1453)
     [java] 	at java.base/java.net.URL.getURLStreamHandler(URL.java:1622)
     [java] 	at java.base/java.net.URL.<init>(URL.java:546)
     [java] 	at java.base/jdk.internal.loader.URLClassPath$JarLoader.newURL(URLClassPath.java:741)
     [java] 	at java.base/jdk.internal.loader.URLClassPath$JarLoader.<init>(URLClassPath.java:728)
     [java] 	at java.base/jdk.internal.loader.URLClassPath$3.run(URLClassPath.java:497)
     [java] 	at java.base/jdk.internal.loader.URLClassPath$3.run(URLClassPath.java:479)
     [java] 	at java.base/java.security.AccessController.doPrivileged(AccessController.java:714)
     [java] 	at java.base/jdk.internal.loader.URLClassPath.getLoader(URLClassPath.java:478)
     [java] 	at java.base/jdk.internal.loader.URLClassPath.getLoader(URLClassPath.java:446)
     [java] 	at java.base/jdk.internal.loader.URLClassPath.getResource(URLClassPath.java:315)
     [java] 	at java.base/jdk.internal.loader.BuiltinClassLoader.findClassOnClassPathOrNull(BuiltinClassLoader.java:757)
     [java] 	at java.base/jdk.internal.loader.BuiltinClassLoader.loadClassOrNull(BuiltinClassLoader.java:681)
     [java] 	at java.base/jdk.internal.loader.BuiltinClassLoader.loadClass(BuiltinClassLoader.java:639)
     [java] 	at java.base/jdk.internal.loader.ClassLoaders$AppClassLoader.loadClass(ClassLoaders.java:188)
     [java] 	at java.base/java.lang.ClassLoader.loadClass(ClassLoader.java:526)
     [java] 	at java.base/java.net.URL.lookupViaProperty(URL.java:1453)
     [java] 	at java.base/java.net.URL.getURLStreamHandler(URL.java:1622)
     [java] 	at java.base/java.net.URL.<init>(URL.java:546)
     [java] 	at java.base/jdk.internal.loader.URLClassPath$JarLoader.newURL(URLClassPath.java:741)
     [java] 	at java.base/jdk.internal.loader.URLClassPath$JarLoader.<init>(URLClassPath.java:728)
     [java] 	at java.base/jdk.internal.loader.URLClassPath$3.run(URLClassPath.java:497)
     [java] 	at java.base/jdk.internal.loader.URLClassPath$3.run(URLClassPath.java:479)
     [java] 	at java.base/java.security.AccessController.doPrivileged(AccessController.java:714)
     [java] 	at java.base/jdk.internal.loader.URLClassPath.getLoader(URLClassPath.java:478)
     [java] 	at java.base/jdk.internal.loader.URLClassPath.getLoader(URLClassPath.java:446)
     [java] 	at java.base/jdk.internal.loader.URLClassPath.getResource(URLClassPath.java:315)
     [java] 	at java.base/jdk.internal.loader.BuiltinClassLoader.findClassOnClassPathOrNull(BuiltinClassLoader.java:757)
     [java] 	at java.base/jdk.internal.loader.BuiltinClassLoader.loadClassOrNull(BuiltinClassLoader.java:681)
     [java] 	at java.base/jdk.internal.loader.BuiltinClassLoader.loadClass(BuiltinClassLoader.java:639)
     [java] 	at java.base/jdk.internal.loader.ClassLoaders$AppClassLoader.loadClass(ClassLoaders.java:188)
     [java] 	at java.base/java.lang.ClassLoader.loadClass(ClassLoader.java:526)
     [java] 	at java.base/java.net.URL.lookupViaProperty(URL.java:1453)
     [java] 	at java.base/java.net.URL.getURLStreamHandler(URL.java:1622)
     [java] 	at java.base/java.net.URL.<init>(URL.java:546)
     [java] 	at java.base/jdk.internal.loader.URLClassPath$JarLoader.newURL(URLClassPath.java:741)
     [java] 	at java.base/jdk.internal.loader.URLClassPath$JarLoader.<init>(URLClassPath.java:728)
     [java] 	at java.base/jdk.internal.loader.URLClassPath$3.run(URLClassPath.java:497)
     [java] 	at java.base/jdk.internal.loader.URLClassPath$3.run(URLClassPath.java:479)
     [java] 	at java.base/java.security.AccessController.doPrivileged(AccessController.java:714)
     [java] 	at java.base/jdk.internal.loader.URLClassPath.getLoader(URLClassPath.java:478)
     [java] 	at java.base/jdk.internal.loader.URLClassPath.getLoader(URLClassPath.java:446)
     [java] 	at java.base/jdk.internal.loader.URLClassPath.getResource(URLClassPath.java:315)
     [java] 	at java.base/jdk.internal.loader.BuiltinClassLoader.findClassOnClassPathOrNull(BuiltinClassLoader.java:757)
     [java] 	at java.base/jdk.internal.loader.BuiltinClassLoader.loadClassOrNull(BuiltinClassLoader.java:681)
     [java] 	at java.base/jdk.internal.loader.BuiltinClassLoader.loadClass(BuiltinClassLoader.java:639)
     [java] 	at java.base/jdk.internal.loader.ClassLoaders$AppClassLoader.loadClass(ClassLoaders.java:188)
     [java] 	at java.base/java.lang.ClassLoader.loadClass(ClassLoader.java:526)
     [java] 	at java.base/java.net.URL.lookupViaProperty(URL.java:1453)
     [java] 	at java.base/java.net.URL.getURLStreamHandler(URL.java:1622)
     [java] 	at java.base/java.net.URL.<init>(URL.java:546)
     [java] 	at java.base/jdk.internal.loader.URLClassPath$JarLoader.newURL(URLClassPath.java:741)
     [java] 	at java.base/jdk.internal.loader.URLClassPath$JarLoader.<init>(URLClassPath.java:728)
     [java] 	at java.base/jdk.internal.loader.URLClassPath$3.run(URLClassPath.java:497)
     [java] 	at java.base/jdk.internal.loader.URLClassPath$3.run(URLClassPath.java:479)
     [java] 	at java.base/java.security.AccessController.doPrivileged(AccessController.java:714)
     [java] 	at java.base/jdk.internal.loader.URLClassPath.getLoader(URLClassPath.java:478)
     [java] 	at java.base/jdk.internal.loader.URLClassPath.getLoader(URLClassPath.java:446)
     [java] 	at java.base/jdk.internal.loader.URLClassPath.getResource(URLClassPath.java:315)
     [java] 	at java.base/jdk.internal.loader.BuiltinClassLoader.findClassOnClassPathOrNull(BuiltinClassLoader.java:757)
     [java] 	at java.base/jdk.internal.loader.BuiltinClassLoader.loadClassOrNull(BuiltinClassLoader.java:681)
     [java] Java Result: 1",,,,,,,,,,,JDK-8312399,JDK-8312726,JDK-8312207,JDK-8312365,,,,,,,,,,,,,,,,,,JDK-8313721,,,,JDK-8311032,,,,,"2023-05-16 06:10;jpai;build.xml;https://bugs.openjdk.org/secure/attachment/103854/build.xml",,,,,,,,,,,,,,,,,,,,,,"0|i31jf7:",9223372036854775807,b02,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@446e124a,,,,,,,,,"2023-05-16 06:10;jpai;Attached is a trivial Ant build.xml file which reproduces the issue. The build file sets up the classpath to point to a location (~/.m2/repository in this example) which contains a large number of jars and then launches java by setting the -Djava.protocol.handler.pkgs system property. 

Set the JAVA_HOME to point to the Java install location and run:

ant runjava
;;;","2023-06-09 08:00;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/14395
Date: 2023-06-09 14:55:50 +0000;;;","2023-06-12 02:46;dukebot;Changeset: 268ec61d
Author:    Jaikiran Pai <jpai@openjdk.org>
Date:      2023-06-12 09:45:07 +0000
URL:       https://git.openjdk.org/jdk/commit/268ec61d4fa9c5b7d2c7bcafb942b33e5b189974
;;;","2023-07-18 02:58;jjose;Fix Request (21u) 

Clean Backport

When java application is launched with a classpath containing large number of jars and with the the -Djava.protocol.handler.pkgs system property set to a value that represents a package that either isn't present in the jars in the classpath or happens to be in a jar which gets traversed towards the end of the classpath traversal, then the JVM launch can end up with a StackOverflowError.
The fix uses the built-in protocol handler to avoid protocol handler lookup when opening JAR files on the class path. The fix itself is isolated and it resembles what we do in Java 8 for loading jar builtin protocol handler when launching an application, so in theory, the backport shouldn't cause any regressions. ;;;","2023-07-18 14:05;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk21u/pull/11
Date: 2023-07-18 09:44:03 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
[Lilliput/JDK17] Revert disabling vzeroupper,JDK-8308172,5101009,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,rkennke,rkennke,rkennke,2023-05-16 03:49,2023-05-16 05:00,2023-10-01 09:55,2023-05-16 05:00,repo-lilliput-17,,,,,,,hotspot,,0,lilliput,,,,,,,,,,,,,"While looking through the diff between Lilliput/JDK17 and upstream JDK17, I noticed one change in library_call.cpp that should not be there, it probably slipped through from debugging.

    void clear_upper_avx() {
  #ifdef X86
-     if (UseAVX >= 2) {
+     if (false && UseAVX >= 2) {
        C->set_clear_upper_avx(true);
      }
  #endif
    }

This prevents emitting vzeroupper instructions on x86_64. I believe this will have performance impact when transitioning between AVX and SSE code. We should revert this.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,generic,,,,,,,,,generic,,,,,,"0|i31jcb:",9223372036854775807,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2023-05-16 04:04;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/lilliput-jdk17u/pull/18
Date: 2023-05-16 10:57:52 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
SequencedMap::firstEntry throws NPE when first entry has null key or value,JDK-8308167,5101004,Bug,Closed,JDK,JDK,software,duke,,,P2,Fixed,smarks,kganapureddy,kganapureddy,2023-05-16 01:21,2023-07-18 08:18,2023-10-01 09:55,2023-06-05 17:21,21,,,,,,21,core-libs,,0,conformance,tck-red-21,,,,,,,,,,,,"Observed that SequencedMap:firstEntry() throws NullPointerEx when the map entry has null key or null value.

Example  : the following code snippet throws NPEx.
======== ( When key is null ) 
SequencedMap<String, String> sequencedMap = new LinkedHashMap<>();
        sequencedMap.put(null, ""v1"");
        sequencedMap.firstEntry();

======== (When value is null )
SequencedMap<String, String> sequencedMap = new LinkedHashMap<>();
        sequencedMap.put(""k"", null);
        sequencedMap.firstEntry();

=====
",,,,,,,,,,,,,,,,,,,,,JDK-8280836,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i31jb7:",9223372036854775807,b26,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@73bf8bbe,,,,,,,Verified,,"2023-05-16 11:25;smarks;Various default methods in SequencedMap use Map.Entry.copyOf, which internally uses KeyValueHolder. However, that class rejects nulls for key and value. Retrofitting it to allow nulls (even internally) is a bit problematic because it spoils the @Stable annotations on the fields, which require a non-null initialization to be effective. An alternative is to use AbstractMap.SimpleImmutableEntry. However, that's serializable! As annoying as it seems, it may be necessary to have a third class, similar to KeyValueHolder, which doesn't have stable fields (but which might be value-based) and which isn't serializable. In addition, its equals() and hashCode() methods would need to be null-safe.;;;","2023-06-01 18:06;smarks;The same NPE pathology occurs with firstEntry(), lastEntry(), pollFirstEntry(), and pollLastEntry(). Added tests for those methods when a key or value is null.

Briefly, these methods need to create new Map.Entry instances that are disconnected from the underlying Map. The existing code used the Map.entry() API (which returns a KeyValueHolder) but that's wrong, since it disallows nulls. Retrofitting KeyValueHolder to allow nulls is complicated. AbstractMap.SimpleImmutableEntry is the obvious alternative but it's serializable, and I wanted to avoid increasing the serialization footprint of the platform.

Instead, I created a new internal class NullableKeyValueHolder as a Map.Entry implementation that accommodates nullable keys and values. See comments in the new class for additional rationale. This could probably be merged with KeyValueHolder at some point, but modifying the specifications would make this easier.

src/java.base/share/classes/jdk/internal/util/NullableKeyValueHolder.java
;;;","2023-06-01 23:40;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/14278
Date: 2023-06-02 01:12:32 +0000;;;","2023-06-05 17:21;dukebot;Changeset: 6d155a47
Author:    Stuart Marks <smarks@openjdk.org>
Date:      2023-06-06 00:19:50 +0000
URL:       https://git.openjdk.org/jdk/commit/6d155a47f13ff80cf7a9de363fc5ae2943b6603a
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
VerifyCACerts.java misses blank in error output,JDK-8308156,5100994,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,mbaesken,mbaesken,mbaesken,2023-05-16 01:11,2023-07-24 21:38,2023-10-01 09:55,2023-05-16 23:43,17,21,,,,,21,security-libs,,0,jdk11u-fix-request,jdk11u-fix-yes,jdk17u-fix-request,jdk17u-fix-yes,noreg-self,,,,,,,,,"In the checksum check, we miss a blank in the error output of the calculated and expected checksum.",,,,,,,,,,,JDK-8309999,JDK-8312047,JDK-8309932,JDK-8311513,JDK-8312636,JDK-8311515,JDK-8312052,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,generic,,,,,,,,,generic,,,,,,"0|i31j8z:",9223372036854775807,b23,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@2ec284e3,,,,,,,,,"2023-05-16 01:54;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/14003
Date: 2023-05-16 08:48:03 +0000;;;","2023-05-16 23:43;dukebot;Changeset: 5a92aae1
Author:    Matthias Baesken <mbaesken@openjdk.org>
Date:      2023-05-17 06:42:19 +0000
URL:       https://git.openjdk.org/jdk/commit/5a92aae1d967f5be01f05d9cc56c433a5eca61e8
;;;","2023-06-13 00:54;mbaesken;jdk17 backport request
I would like to have the patch in jdk17u-dev as well, because the issue is present there too.  The backport is clean and low risk.;;;","2023-06-13 00:58;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/1421
Date: 2023-06-13 07:52:59 +0000;;;","2023-06-13 05:57;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk11u-dev/pull/1943
Date: 2023-06-13 12:50:51 +0000;;;","2023-06-13 06:09;mbaesken;jdk11 backport request
I would like to have the patch in jdk11u-dev as well, because the issue is present there too. The backport is clean and low risk.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
PropertyDescriptor should work with overridden generic getter method,JDK-8308152,5098389,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,serb,webbuggrp,webbuggrp,2023-04-13 13:53,2023-06-28 12:26,2023-10-01 09:55,2023-06-07 19:54,17.0.7,19,20,21,,,21,client-libs,,0,17-bp,dcspn,jdk17u-fix-request,jdk17u-fix-yes,regression,regression_8280132,reproducer-other,webbug,,,,,,"ADDITIONAL SYSTEM INFORMATION :
Windows 11, using NetBeans, JDK 19

A DESCRIPTION OF THE PROBLEM :
Please refer to https://github.com/apache/netbeans/issues/5774 for the original post, where I was advised to report this against OpenJDK

Attachments can be found in the above GitHub issue.

When creating a BeanInfo using netbeans, in the getBdescriptor() method, we can set the value ""containerDelegate"" using the following line of code to delegate to another container.

beanDescriptor.setValue(""containerDelegate"", ""getInnerPanel"");
These examples work with all previous JDK versions, except for JDK 19
I also tested JDK 13, 14, 15, 16, 17 and 18 and they all work fine.

REGRESSION : Last worked in version 17.0.6

STEPS TO FOLLOW TO REPRODUCE THE PROBLEM :
Having NetBeans installed, any version, 17 as reference.

Using the Dummy Projects ( From GitHub issue mentioned above)

With any new JPanel, or using MainPanel:

Drag or add a SectionPanel instance to MainPanel
Then add any other widget (i.e. JLabel) from the palette in the SectionPanel instance


EXPECTED VERSUS ACTUAL BEHAVIOR :
EXPECTED -
SectionPanel should be recognized as a Container, therefore the widget should get added into the SectionPanel instance
ACTUAL -
SectionPanel is not recognized as a Container, and no other widget can be added to it when using the widgets palette in NetBeans

---------- BEGIN SOURCE ----------
Attached to https://github.com/apache/netbeans/issues/5774
---------- END SOURCE ----------

FREQUENCY : always


",,,,,,,,,,,JDK-8311063,JDK-8309722,,,,,,,,,,,,,,,,JDK-8309464,,,,,,,,JDK-8280132,,,,,,,,,,,,x86_64,,,,,,,,,windows_10,,,,,,"0|i313lv:",9223372036854775807,b26,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@41b965df,,,,,,,,,"2023-05-23 10:08;azvegint;The order of methods was changed in JDK-8280132, which led to this issue.

https://github.com/apache/netbeans/issues/5774#issuecomment-1507539540;;;","2023-05-25 16:54;serb;It should not be important how we sort the methods in the code changed by the JDK-8280132, but instead, we should select the ""correct"" method later from that list, the fix should be similar to https://bugs.openjdk.org/browse/JDK-8196373 but this time for getters.;;;","2023-05-25 19:11;serb;The bug can be reproduced by the next small code when the property descriptor is created w/o usage of Introspector
        new PropertyDescriptor(""UI"", JPanel.class, ""getUI"", ""setUI"");

Introspector works fine.
        BeanInfo beanInfo = Introspector.getBeanInfo(JPanel.class);
        PropertyDescriptor[] propertyDescriptors = beanInfo.getPropertyDescriptors();
        for (PropertyDescriptor pd : propertyDescriptors) {
            Class<?> propertyType = pd.getPropertyType();
            if (propertyType !=null && propertyType.toString().contains(""UI"")) {
                System.out.println(""pd = "" + pd);
            }
        };;;","2023-05-25 22:15;serb;After integration of the JEP 256 we have two code paths to select the read/write methods for the property. The code path used by the Introspector via PropertyDescriptor(Entry<String,PropertyInfo> entry) can handle overridden getters, but the code path in PropertyDescriptor(String propertyName, Class<?> beanClass,
                String readMethodName, String writeMethodName) always select the first method.;;;","2023-05-31 15:26;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/14228
Date: 2023-05-30 19:13:42 +0000;;;","2023-06-07 19:54;dukebot;Changeset: 73dd03cc
Author:    Sergey Bylokhov <serb@openjdk.org>
Date:      2023-06-08 02:51:36 +0000
URL:       https://git.openjdk.org/jdk/commit/73dd03cc5afa6d1e01a92d0027dcb82af27a48af
;;;","2023-06-27 09:09;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/1501
Date: 2023-06-26 19:41:47 +0000;;;","2023-06-27 13:34;serb;Fix request (17u)

Clean backport. The bugfix for a regression. The fix was verified by the new test, all other ""java_desktop"" tests are green

Review 17u-dev: https://github.com/openjdk/jdk17u-dev/pull/1501;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
jdk.test.lib.compiler.InMemoryJavaCompiler.compile does not close files,JDK-8308116,5100959,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,aboldtch,aboldtch,aboldtch,2023-05-15 11:37,2023-09-13 04:56,2023-10-01 09:55,2023-05-23 08:37,21,,,,,,21,hotspot,,0,noreg-self,,,,,,,,,,,,,"jdk.test.lib.compiler.InMemoryJavaCompiler.compile(String className, CharSequence sourceCode, String... options) creates a JavaFileManager but fails to close it after the CompilationTask is completed, leaving the FDs open until reference processing kicks in.",,,,,,,,,,,JDK-8314358,JDK-8314383,JDK-8313995,,,,,,,,,,,,,,,,,,,,,,,,,,,,"2023-05-15 11:40;aboldtch;Screenshot 2023-05-15 at 20.40.06.png;https://bugs.openjdk.org/secure/attachment/103835/Screenshot+2023-05-15+at+20.40.06.png",,,,,,,,,,,,,,,,,,,,,,"0|i31j17:",9223372036854775807,b24,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@78d03d9a,,,,,,,,,"2023-05-15 11:42;aboldtch;Graph shows number of open file descriptors for a program which compiles dummy classes in a loop using InMemoryJavaCompiler.compile. Before and after the fix.;;;","2023-05-16 01:13;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/14001
Date: 2023-05-16 08:06:15 +0000;;;","2023-05-23 08:36;dukebot;Changeset: e9320f31
Author:    Axel Boldt-Christmas <aboldtch@openjdk.org>
Date:      2023-05-23 15:33:08 +0000
URL:       https://git.openjdk.org/jdk/commit/e9320f31dcc4ff5197e8c3bca504a7d5c1a9035e
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Bump minimum version of macOS for x64 to 11.0 (matching aarch64),JDK-8308114,5100955,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,kcr,kcr,kcr,2023-05-15 10:34,2023-09-12 05:35,2023-10-01 09:55,2023-05-16 13:41,jfx21,,,,,,jfx21,javafx,,0,noreg-build,release-note=yes,sn_144,,,,,,,,,,,"As proposed in this openjfx-dev message [1], we need to bump the version of the macOS to something newer than 10.12.

Apple hasn't supported 10.12 in several years, and there is an ongoing (and increasing) cost to our code base to keep building and targeting a system that old. Additionally, Xcode 14 no longer supports targeting 10.12, and we will need to update to Xcode 14 soon. It is also a little awkward to have a different minimum version for the two different chip architectures.

As a result, we should change the minimum version for Mac / x64 to be macOS 11.0, matching both the currently oldest version of macOS supported by Apple, and also unifying the minimum for the two chip architectures.

We could do that in one step or two steps as follows:

Option 1:

JavaFX 21: Bump the minimum (for Intel platforms) to macOS 11

Option 2:

JavaFX 21: Bump the minimum (for Intel platforms) to macOS 10.14
JavaFX 22: Bump the minimum (for Intel platforms) to macOS 11


I propose Option 1, and plan to send a PR out in the next day or two.

[1] https://mail.openjdk.org/pipermail/openjfx-dev/2023-May/040392.html
","Mac / x64 platforms
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8269968,JDK-8265031,JDK-8308306,JDK-8305197,,,,,,,,,,,,,x86,,,,,,,,,os_x,,,,,,"0|i31j0b:",9223372036854775807,b18,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@1556b386,,,,,,,,,"2023-05-15 11:17;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jfx/pull/1139
Date: 2023-05-15 18:13:00 +0000;;;","2023-05-16 13:41;dukebot;Changeset: bff41c29
Author:    Kevin Rushforth <kcr@openjdk.org>
Date:      2023-05-16 20:39:51 +0000
URL:       https://git.openjdk.org/jfx/commit/bff41c29478a00665ed7b561ecbb8b138c9b3245
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Resolve multiple definition of 'JNI_OnLoad_jsound' linking error,JDK-8308110,5100951,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,jiangli,jiangli,jiangli,2023-05-15 10:05,2023-05-24 23:09,2023-10-01 09:55,2023-05-17 14:08,,,,,,,21,client-libs,,0,,,,,,,,,,,,,,"Multiple definition of 'JNI_OnLoad_jsound' linker error is observed when partially linking (using '-r' linking option, e.g. see https://gcc.gnu.org/onlinedocs/gcc/Link-Options.html) 'libjsound' natives. See JDK-8307858 comments for related information. The same linking error is also observable when statically linking with a libjsound.a created without partially linking.

/usr/bin/ld: /.../github/JDK-8307858/build/linux-x86_64-server-release/support/native/java.desktop/libjsound/static/Platform.o: in function `JNI_OnLoad_jsound':
Platform.c:(.text.JNI_OnLoad_jsound+0x0): multiple definition of `JNI_OnLoad_jsound'; /.../github/JDK-8307858/build/linux-x86_64-server-release/support/native/java.desktop/libjsound/static/PLATFORM_API_LinuxOS_ALSA_CommonUtils.o:PLATFORM_API_LinuxOS_ALSA_CommonUtils.c:(.text.JNI_OnLoad_jsound+0x0): first defined here
collect2: error: ld returned 1 exit status

The multiple definition of 'JNI_OnLoad_jsound' issue is because both src/java.desktop/linux/native/libjsound/PLATFORM_API_LinuxOS_ALSA_CommonUtils.c and src/java.desktop/share/native/libjsound/Platform.c have 'DEF_STATIC_JNI_OnLoad'.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8303796,JDK-8307858,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i31izf:",9223372036854775807,b24,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@7d98911c,,,,,,,,,"2023-05-15 10:47;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/13994
Date: 2023-05-15 17:41:18 +0000;;;","2023-05-17 14:08;dukebot;Changeset: 902585be
Author:    Jiangli Zhou <jiangli@openjdk.org>
Date:      2023-05-17 21:04:34 +0000
URL:       https://git.openjdk.org/jdk/commit/902585bec1d4d5681208213bea180302d1b52df9
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Massive (up to ~30x) increase in C2 compilation time since JDK 17,JDK-8308103,5100944,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,roland,thartmann,thartmann,2023-05-15 07:38,2023-09-26 23:10,2023-10-01 09:55,2023-07-19 04:34,17,21,,,,,22,hotspot,,0,amazon-interest,c2,javafuzzer,jdk21-defer-request,jdk21-defer-yes,jdk21u-fix-request,oracle-triage-21,performance,,,,,,"I noticed that attached JavaFuzzer generated test runs significantly longer with -Xcomp due to an increase in compilation time with C2.

Command line:
java -Xmx1G -Xcomp -Xbatch -XX:CompileOnly=Test -XX:MaxRAMPercentage=4.16667 Test

JDK 16
real	0m0,383s
user	0m0,326s
sys	0m0,029s

JDK 17+23 (contains JDK-8252372)
real	0m0,483s
user	0m0,421s
sys	0m0,032s

JDK 17+35
real	0m4,388s
user	0m4,310s
sys	0m0,056s

JDK 18 and later
real	0m10,312s
user	0m10,116s
sys	0m0,140s

With 5s test timeout it fails since JDK-8267988 in JDK 17 b27.
With 8s test timeout it fails since JDK-8272873 in JDK 18 b13.

We seem to spend most time in here:

#0  0x00007ffff70d9608 in Unique_Node_List::remove (n=<optimized out>, this=<optimized out>) at /oracle/valhalla/open/src/hotspot/share/opto/node.hpp:1590
#1  Unique_Node_List::remove (this=0x7fffac2ede30, n=0x7fffae517ae0) at /oracle/valhalla/open/src/hotspot/share/opto/node.cpp:2944
#2  0x00007ffff64ea758 in Compile::remove_modified_node (n=0x7fffae517ae0, this=0x7fffd47d4a30) at /oracle/valhalla/open/src/hotspot/share/opto/compile.cpp:1237
#3  Compile::remove_useless_node (this=0x7fffd47d4a30, dead=0x7fffae517ae0) at /oracle/valhalla/open/src/hotspot/share/opto/compile.cpp:374
#4  0x00007ffff71e9ceb in PhaseIterGVN::remove_globally_dead_node (this=this@entry=0x7fffd47d23f0, dead=dead@entry=0x7fffae517ae0) at /oracle/valhalla/open/src/hotspot/share/opto/phaseX.cpp:1442
#5  0x00007ffff71eae1e in PhaseIterGVN::remove_dead_node (dead=0x7fffae517ae0, this=0x7fffd47d23f0) at /oracle/valhalla/open/src/hotspot/share/opto/phaseX.hpp:507
#6  PhaseIterGVN::subsume_node (this=0x7fffd47d23f0, old=0x7fffae517ae0, nn=0x7fffaea5fae0) at /oracle/valhalla/open/src/hotspot/share/opto/phaseX.cpp:1491
#7  0x00007ffff6ee8878 in PhaseIdealLoop::try_sink_out_of_loop (n=<optimized out>, this=0x7fffd47d1720) at /oracle/valhalla/open/src/hotspot/share/opto/loopopts.cpp:1821
#8  PhaseIdealLoop::try_sink_out_of_loop (this=0x7fffd47d1720, n=<optimized out>) at /oracle/valhalla/open/src/hotspot/share/opto/loopopts.cpp:1763
#9  0x00007ffff6ee8ad5 in PhaseIdealLoop::split_if_with_blocks_post (this=0x7fffd47d1720, n=<optimized out>) at /oracle/valhalla/open/src/hotspot/share/opto/loopopts.cpp:1618
#10 0x00007ffff6ee9eb4 in PhaseIdealLoop::split_if_with_blocks_post (n=0x7fffac383d08, this=0x7fffd47d1720) at /oracle/valhalla/open/src/hotspot/share/opto/loopopts.cpp:2001
#11 PhaseIdealLoop::split_if_with_blocks (this=this@entry=0x7fffd47d1720, visited=..., nstack=...) at /oracle/valhalla/open/src/hotspot/share/opto/loopopts.cpp:2001
#12 0x00007ffff6eda5cf in PhaseIdealLoop::build_and_optimize (this=this@entry=0x7fffd47d1720) at /oracle/valhalla/open/src/hotspot/share/opto/loopnode.cpp:4517
#13 0x00007ffff650d674 in PhaseIdealLoop::PhaseIdealLoop (mode=LoopOptsDefault, igvn=..., this=0x7fffd47d1720) at /oracle/valhalla/open/src/hotspot/share/opto/loopnode.hpp:1101

Running with -XX:-SplitIfBlocks or explicitly disabling PhaseIdealLoop::try_sink_out_of_loop brings back old speed.

This also shows with -XX:+CITime:

JDK 16:
Accumulated compiler times
----------------------------------------------------------
  Total compilation time   :   0,293 s

JDK 21:
Accumulated compiler times
----------------------------------------------------------
  Total compilation time   :   9,049 s

",,,,,,,,,,,JDK-8316486,JDK-8316406,,,,,,,,,,,,,,,,JDK-8310566,,,,JDK-8308094,JDK-8252372,JDK-8312440,,JDK-8267988,,,,,"2023-05-15 07:35;thartmann;FuzzerUtils.java;https://bugs.openjdk.org/secure/attachment/103829/FuzzerUtils.java","2023-05-15 07:35;thartmann;Test.java;https://bugs.openjdk.org/secure/attachment/103830/Test.java",,,,,,,,,,,,,,,,,,,,,"0|i31ixv:",9223372036854775807,b07,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2023-05-15 07:41;thartmann;ILW = Increase in C2 compilation time (up to ~30x), with -Xcomp and JavaFuzzer generated test, -XX:-SplitIfBlocks or disable affected method from compilation = HLM = P3;;;","2023-05-15 07:43;thartmann;Roland, could you please have a look?;;;","2023-05-15 08:06;thartmann;Targeting this for JDK 22 for now. Please update the fix version if the fix is ready in time for JDK 21.;;;","2023-06-30 06:32;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/14732
Date: 2023-06-30 13:23:38 +0000;;;","2023-07-19 04:34;dukebot;Changeset: c6ab9c29
Author:    Roland Westrelin <roland@openjdk.org>
Date:      2023-07-19 11:31:49 +0000
URL:       https://git.openjdk.org/jdk/commit/c6ab9c2905203e1ec897b3404f9179ff975d0054
;;;","2023-07-19 23:32;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk21/pull/141
Date: 2023-07-20 06:26:59 +0000;;;","2023-07-24 00:57;thartmann;Deferral Request (JDK 21):
Only P1-P2 fixes are allowed at this point and the fix has a bug tail (see JDK-8312440).;;;","2023-09-25 00:29;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk21u/pull/199
Date: 2023-09-25 07:23:44 +0000;;;","2023-09-25 00:43;goetz;Fix request [21u]

I backport this for parity with 17.0.10-oracle. 21u should not fall back.
The backport deferral was meant for 21, not 21u. After it being backported to 17.0.10-oracle,
the risk of bringing it to 21u should be acceptable as this will have much less exposure.
Clean backport.
Test passes (including 8312440).  SAP nightly testing passed.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Disable language preview features use in JDK,JDK-8308093,5100933,Bug,Closed,JDK,JDK,software,duke,,,P3,Fixed,asotona,asotona,asotona,2023-05-15 04:53,2023-07-24 10:57,2023-10-01 09:55,2023-05-23 00:25,,,,,,,21,core-libs,,0,,,,,,,,,,,,,,"Language preview features have been temporary enabled with JDK-8294982 to allow Pattern Matching for switch use in the Classfile API library.

Use of language preview features in JDK should be disabled as soon as the Pattern Matching for switch became final feature.
",,,,,,,,,,,,,,,,,,,JDK-8300543,,,,,,,,,,,,,,,,,JDK-8294982,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i31ivf:",9223372036854775807,b24,,,,,,,,,Verified,,"2023-05-22 03:07;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/14076
Date: 2023-05-22 10:01:55 +0000;;;","2023-05-23 00:25;dukebot;Changeset: c4408278
Author:    Adam Sotona <asotona@openjdk.org>
Date:      2023-05-23 07:23:37 +0000
URL:       https://git.openjdk.org/jdk/commit/c4408278d1012746c91ba4c31068538850c68d30
;;;","2023-07-24 10:57;bhuang;Verified in ATR JDK21 b26.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
[riscv-port-jdk17u] Intrinsify Unsafe.storeStoreFence,JDK-8308089,5100926,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,xlinzheng,xlinzheng,xlinzheng,2023-05-15 03:19,2023-08-02 04:28,2023-10-01 09:55,2023-05-16 00:38,repo-riscv-port-17,,,,,,17.0.9,hotspot,,0,c2,c2-intrinsic,oraclejdk-na,,,,,,,,,,,JDK-8252990 was recently backported to jdk17u in April. We should also enable the matching rule for `StoreStoreFence` on the WIP riscv-port-jdk17u repo.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,riscv,,,,,,,repo-riscv-port-17,,linux,,,,,,"0|i31itv:",9223372036854775807,b01,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2023-05-15 03:36;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/riscv-port-jdk17u/pull/52
Date: 2023-05-15 10:30:56 +0000;;;","2023-06-19 20:40;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/1427
Date: 2023-06-13 09:43:25 +0000;;;","2023-07-09 19:31;dukebot;Changeset: 966fc82d
Author:    Fei Yang <fyang@openjdk.org>
Date:      2023-07-10 02:07:16 +0000
URL:       https://git.openjdk.org/jdk17u-dev/commit/966fc82d91ec9c5e3b8504f1d3e1d7d2727cc3c9
;;;","2023-08-02 04:28;dukebot;Changeset: 966fc82d
Author:    Fei Yang <fyang@openjdk.org>
Date:      2023-07-10 02:07:16 +0000
URL:       https://git.openjdk.org/jdk17u/commit/966fc82d91ec9c5e3b8504f1d3e1d7d2727cc3c9
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
GHA: x86_32 host configuration failing with unmet dependencies,JDK-8308086,5100923,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,shade,shade,shade,2023-05-15 02:59,2023-05-17 16:54,2023-10-01 09:55,2023-05-15 06:52,,,,,,,21,infrastructure,,0,,,,,,,,,,,,,,"Currently failing at host configuration step with:

```
The following packages have unmet dependencies:
 libc6:i386 : Depends: libgcc-s1:i386 but it is not going to be installed
 libtiffxx5:i386 : Depends: libstdc++6:i386 (>= 5) but it is not going to be installed
```",,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8308051,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i31it7:",9223372036854775807,b23,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@429c566,,,,,,,,,"2023-05-15 03:06;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/13981
Date: 2023-05-15 10:00:42 +0000;;;","2023-05-15 06:52;dukebot;Changeset: ffab1ea9
Author:    Aleksey Shipilev <shade@openjdk.org>
Date:      2023-05-15 13:51:04 +0000
URL:       https://git.openjdk.org/jdk/commit/ffab1ea9e730204df5ab823eaa3ab7fdb3bef876
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
C2 fix idom bug in PhaseIdealLoop::create_new_if_for_predicate,JDK-8308084,5100920,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,epeter,epeter,epeter,2023-05-15 02:09,2023-05-28 20:46,2023-10-01 09:55,2023-05-21 23:29,11,17,21,,,,21,hotspot,,0,c2,oracle-triage-21,,,,,,,,,,,,"Bug fixing for JDK-8305073.
Created so we could backport the fix separately from the verification.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8305073,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i31isj:",9223372036854775807,b24,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2023-05-15 02:27;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/13980
Date: 2023-05-15 09:12:42 +0000;;;","2023-05-15 03:41;thartmann;ILW = Wrong idom computation in dom_lca_internal, never observed - only triggers with loop verification added by JDK-8305073, no workaround but disable loop opts / compilation = HLM = P3;;;","2023-05-21 23:29;dukebot;Changeset: 41beb448
Author:    Emanuel Peter <epeter@openjdk.org>
Date:      2023-05-22 06:26:55 +0000
URL:       https://git.openjdk.org/jdk/commit/41beb448d2ac5d432558f25362a787a9511a5d83
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
ClassLoaderExt::append_boot_classpath should handle dynamic archive,JDK-8308073,5100908,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,ccheung,iklam,iklam,2023-05-14 22:31,2023-05-31 23:26,2023-10-01 09:55,2023-05-25 14:29,21,,,,,,21,hotspot,,0,cds,,,,,,,,,,,,,"https://github.com/openjdk/jdk/blob/0ee196bef199c3d32c1f88b26eb4333a7ea73c10/src/hotspot/share/classfile/classLoaderExt.cpp#L59-L65

void ClassLoaderExt::append_boot_classpath(ClassPathEntry* new_entry) {
  if (UseSharedSpaces) {
    warning(""Sharing is only supported for boot loader classes because bootstrap classpath has been appended"");
    FileMapInfo::current_info()->set_has_platform_or_app_classes(false);
  }
  ClassLoader::add_to_boot_append_entries(new_entry);
}

This should be added:

if (DynamicArchive::is_mapped()) {
  FileMapInfo::dynamic_info()->set_has_platform_or_app_classes(false);
}",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i31ipv:",9223372036854775807,b25,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,,,"2023-05-24 09:34;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/14127
Date: 2023-05-24 16:28:16 +0000;;;","2023-05-25 14:29;dukebot;Changeset: dc7683a0
Author:    Calvin Cheung <ccheung@openjdk.org>
Date:      2023-05-25 21:26:54 +0000
URL:       https://git.openjdk.org/jdk/commit/dc7683a0514106f29a8e28c138aca42efb5a173e
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
java/util/concurrent/ScheduledThreadPoolExecutor/BasicCancelTest.java timed out and also had jcmd pipe errors,JDK-8308047,5100879,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,vklang,dcubed,dcubed,2023-05-14 06:21,2023-09-23 20:03,2023-10-01 09:55,2023-07-13 07:28,21,,,,,,22,core-libs,,0,genzgc,jdk21u-fix-request,jdk21u-fix-SQE-ok,jdk21u-fix-yes,noreg-self,problemlist,sust-test-stabilization,test,tier5,,,,,"The following test failed in the JDK21 CI:

java/util/concurrent/ScheduledThreadPoolExecutor/BasicCancelTest.java

Here's a snippet from the log file:

#section:main
----------messages:(8/310)----------
command: main -Xmx8m BasicCancelTest
reason: User specified action: run main/othervm -Xmx8m BasicCancelTest 
started: Sun May 14 07:51:07 UTC 2023
Mode: othervm [/othervm specified]
Timeout information:
--- Timeout information end.
finished: Sun May 14 08:05:56 UTC 2023
elapsed time (seconds): 888.77
----------configuration:(0/0)----------
----------System.out:(9/879)*----------
moreThanYouCanChew=1048576
Timeout refired 480 times
[581.073s][error][attach] could not open (2) pipe \\\\.\\pipe\\javatool-647696899 to send result of operation jcmd
[581.073s][error][attach] could not open (2) pipe \\\\.\\pipe\\javatool-1485708053 to send result of operation jcmd
[581.076s][error][attach] could not open (2) pipe \\\\.\\pipe\\javatool-979425775 to send result of operation jcmd
[634.889s][error][attach] could not open (2) pipe \\\\.\\pipe\\javatool-114685658 to send result of operation jcmd
[690.475s][error][attach] could not open (2) pipe \\\\.\\pipe\\javatool-1401145331 to send result of operation jcmd
[690.512s][error][attach] could not open (2) pipe \\\\.\\pipe\\javatool668766197 to send result of operation threaddump
[690.542s][error][attach] could not open (2) pipe \\\\.\\pipe\\javatool263089859 to send result of operation threaddump
----------System.err:(0/0)----------
----------rerun:(45/5827)*----------

<snip>

result: Error. Program `c:\ade\mesos\work_dir\jib-master\install\jdk-21+23-1940\windows-x64-debug.jdk\jdk-21\fastdebug\bin\java' timed out (timeout set to 480000ms, elapsed time including timeout handling was 888747ms).
",,,,,,,,,,,JDK-8313505,JDK-8313233,JDK-8314105,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,x86_64,,,,,,,,,windows,,,,,,"0|i31ijf:",9223372036854775807,b07,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@239b1eeb,,,,,,,,,"2023-05-16 11:24;stefank;My guess is that this test runs with such a small heap that ZGC starves out the test thread(s). Unfortunately, we can't simply increase the heap size because the test uses the amount of free memory on the heap as a measurement for how much work to perform. So, bumping the heap size gives a longer-running test. Either we change that in the test, or we try to run with ZCollectionIntervalOnly to prevent the heuristics to schedule too many GCs.;;;","2023-05-23 12:20;dcubed;Currently there are five sightings of this failure in the JDK21 CI.
All 5 of these sightings are executing the ':jdk_loom' test suite
so even though the test task's JVM args do not mention Loom
or Virtual Threads, Loom is definitely involved some how.

Update: [~alanb] doesn't see any indication that Loom is involved with these
test failures.;;;","2023-06-09 02:18;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/14389
Date: 2023-06-09 09:13:08 +0000;;;","2023-07-13 07:28;dukebot;Changeset: 8c9d091f
Author:    Viktor Klang <viktor.klang@oracle.com>
Committer: Roger Riggs <rriggs@openjdk.org>
Date:      2023-07-13 14:25:50 +0000
URL:       https://git.openjdk.org/jdk/commit/8c9d091f19760deece8daf3e57add85482b9f2a7
;;;","2023-08-08 19:38;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk21u/pull/46
Date: 2023-08-09 02:32:56 +0000;;;","2023-08-09 05:28;rreddy;Fix Request (21u)

Fixes test failure BasicCancelTest.java because of small heap size. Removed the test case from problem list. Patch applies cleanly for 21u.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Move Solaris related charsets from java.base to jdk.charsets module,JDK-8308046,5100878,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,itakiguchi,itakiguchi,itakiguchi,2023-05-14 01:25,2023-05-28 20:47,2023-10-01 09:55,2023-05-22 17:44,,,,,,,21,core-libs,,0,noreg-cleanup,,,,,,,,,,,,,"According to ""JDK 20 Internationalization Guide""
https://docs.oracle.com/en/java/javase/20/intl/supported-encodings.html
Following Solaris related Japanese charsets are in ""contained in jdk.charsets module"" list.
* PCK (x-PCK) 
* EUC_JP_Solaris (x-eucJP-Open)
* Big5_Solaris (x-Big5-Solaris)
These are not supported by Linux platform, so they should not be in java.base module.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,generic,,,,,,,,,generic,,,,,,"0|i31ij7:",9223372036854775807,b24,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@3962510e,,,,,,,,,"2023-05-14 19:53;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/13973
Date: 2023-05-15 00:28:41 +0000;;;","2023-05-22 17:44;dukebot;Changeset: 5d8ba938
Author:    Ichiroh Takiguchi <itakiguchi@openjdk.org>
Date:      2023-05-23 00:41:59 +0000
URL:       https://git.openjdk.org/jdk/commit/5d8ba938bef162b74816147eb1002a0620a419ba
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Deadlock in TestCSLocker.java due to blocking GC while allocating,JDK-8308043,5100871,Bug,Closed,JDK,JDK,software,duke,,,P2,Fixed,eosterlund,kbarrett,kbarrett,2023-05-13 18:21,2023-07-18 12:20,2023-10-01 09:55,2023-05-17 04:49,21,,,,,,21,hotspot,,0,genzgc,intermittent,noreg-self,tier2,,,,,,,,,,"The following test timed out in the JDK21 CI:

gc/cslocker/TestCSLocker.java

Here's a snippet from the log file:

#section:main
----------messages:(8/332)----------
command: main -Xmx256m gc.cslocker.TestCSLocker
reason: User specified action: run main/native/othervm -Xmx256m gc.cslocker.TestCSLocker 
started: Sun May 14 00:09:45 UTC 2023
Mode: othervm [/othervm specified]
Timeout information:
--- Timeout information end.
finished: Sun May 14 00:21:43 UTC 2023
elapsed time (seconds): 718.384
----------configuration:(0/0)----------
----------System.out:(2/38)----------
sleeping...
Timeout refired 480 times
----------System.err:(0/0)----------
----------rerun:(39/7096)*----------

<snip>

result: Error. Program `/opt/mach5/mesos/work_dir/jib-master/install/jdk-21+23-1940/linux-x64.jdk/jdk-21/bin/java' timed out (timeout set to 480000ms, elapsed time including timeout handling was 718378ms).

The test task's JVM args are:
-XX:+UseZGC -XX:+ZGenerational

",,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8293289,,,,,,JDK-8308589,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i31ihn:",9223372036854775807,b23,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6b00f96c,,,,,,,,,"2023-05-15 01:36;tschatzl;Somewhat similar to JDK-8293289 but does not need -Xcomp.;;;","2023-05-15 01:49;eosterlund;In this test, the following happens:
Thread A: starts thread B
Thread B: produces garbage provoking GCs randomly
Thread A: starts thread C
Thread C: locks GC locker in JNI, blockingly waits for thread A to signal it should be released
Thread A: prints ""sleeping"", which inside of the printing implementation allocates memory, which needs a GC

-------------------- deadlock ---------------------

GC is waiting for thread C, thread C is waiting for thread A, thread A is waiting for GC.

This was supposed to happen after, if that println allocation didn't get stuck on GC:
Thread A: signals thread C to unlock GC locker

This test could cause test failure with any concurrent GC. In fact it could cause test failures with all GCs, if you are unlucky enough that that allocation in the println statement ends up being the one triggering a GC.;;;","2023-05-15 07:33;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/13989
Date: 2023-05-15 14:26:42 +0000;;;","2023-05-17 04:49;dukebot;Changeset: 285c833f
Author:    Erik Österlund <eosterlund@openjdk.org>
Date:      2023-05-17 11:47:30 +0000
URL:       https://git.openjdk.org/jdk/commit/285c833ffacdaabe7c4955cbbafb3bc459d26784
;;;","2023-07-18 12:20;enikitin;As the JDK-8308589 excluded the test from GenerationalZGC runs, there is no sense now to verify this. Closing as is.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
[macos] Developer ID Application Certificate not picked up by jpackage if it contains UNICODE characters,JDK-8308042,5100272,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,almatvee,webbuggrp,webbuggrp,2023-05-07 06:05,2023-08-30 15:16,2023-10-01 09:55,2023-08-23 13:23,20,,,,,,22,tools,,0,dcsad,jdk21u-fix-request,jdk21u-fix-SQE-ok,jdk21u-fix-yes,macos,reproducer-yes,sn_144,sn_148,sn_149,sn_150,sn_151,webbug,,"ADDITIONAL SYSTEM INFORMATION :
OSX Ventura 13.3.1

A DESCRIPTION OF THE PROBLEM :
I use jpackage to create a signed pkg installer. The name of our Developer ID Application Certificate contains special characters and is not found by jpackage. The signature step stops with error message ""The 'Developer ID Application: ' did not match the name of my certificate.""

The reason for this is that the structure of the certificates ""alis"" property is different. In our case the alis property contains a hex representation of its name:
""alis""<blob>=0x446576656C6F706572204944204170706C69636174696F6E3A20475A494D202[..]  ""Developer ID Application: GZIM - Gesellschaft zur F\303\266rderung der Impfmedizin mbH (Team-ID)""

JPackage parses the alis property with this regex: ""\""alis\""<blob>=\""([^\""]+)\"" and therefore missing this certificate.

STEPS TO FOLLOW TO REPRODUCE THE PROBLEM :
Run jpackage with an Developer ID Application Certificate containing special characters:

jpackage --input target/ \
  --name JPackageDemoApp \
  --main-jar JPackageDemoApp.jar \
  --main-class de.gzim.Starter \
  --type pkg \
--mac-sign \
--mac-package-signing-prefix de.gzim \
--mac-signing-key-user-name ""GZIM - Gesellschaft zur Förderung der Impfmedizin mbH [TEAM-ID]"" \


EXPECTED VERSUS ACTUAL BEHAVIOR :
EXPECTED -
Successful generation of signed pkg installer.
ACTUAL -
The signature step stops with error message ""The 'Developer ID Application: ' did not match the name of my certificate.""

CUSTOMER SUBMITTED WORKAROUND :
There is no workaround, since we cannot change the company name and the certificate is generated by Apple, 

",,,,,,,,,,,JDK-8315414,,,,,,,,JDK-8313904,,,,,,,,,JDK-8310931,,,,,,,,JDK-8311877,,,,,,,,,,,,x86_64,,,,,,,,,os_x,,,,,,"0|i31esj:",9223372036854775807,b12,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@3656b41f,,,,,,,,,"2023-08-22 15:05;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/15394
Date: 2023-08-22 21:59:50 +0000;;;","2023-08-23 13:23;dukebot;Changeset: 57a322da
Author:    Alexander Matveev <almatvee@openjdk.org>
Date:      2023-08-23 20:22:12 +0000
URL:       https://git.openjdk.org/jdk/commit/57a322da9bf6aac98e834516728fb6da1c18e7aa
;;;","2023-08-23 16:38;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk21u/pull/95
Date: 2023-08-23 23:31:48 +0000;;;","2023-08-23 16:41;almatvee;Fix Request
Without this code jpackage will not able to find and use certificates for signing which contains UNICODE characters. Patch applies cleanly and relatively low risk. New approach to find certificates was added which works with ASCII and UNICODE characters, but we will fallback to this newly added approach only if original fails. This should avoid any potential regressions. ;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
[JVMCI] WB_IsGCSupportedByJVMCICompiler must enter correct JVMCI env,JDK-8308041,5100870,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,dnsimon,dnsimon,dnsimon,2023-05-13 12:05,2023-05-22 00:53,2023-10-01 09:55,2023-05-16 01:51,17,21,,,,,21,hotspot,,0,jvmci,oracle-triage-21,,,,,,,,,,,,"The WB_IsGCSupportedByJVMCICompiler function in whitebox.cpp must use the same JVMCI environment (i.e. jarjvmci or libjvmci) that will be used by the CompileBroker. Otherwise, the question is being asked to the wrong JVMCI compiler implementation (which may not even exist in one of the 2 possible JVMCI environments).",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8257020,,,,,,,,,,,,,,,,,,,16,,,,,,,,"0|i31ihf:",9223372036854775807,b23,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2023-05-13 12:15;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/13971
Date: 2023-05-13 19:09:46 +0000;;;","2023-05-14 22:43;thartmann;ILW = Whitebox API method returning a wrong result, single method with JVMCI, no workaround = MLH = P4 ;;;","2023-05-16 01:51;dukebot;Changeset: c9b6bb5b
Author:    Doug Simon <dnsimon@openjdk.org>
Date:      2023-05-16 08:50:22 +0000
URL:       https://git.openjdk.org/jdk/commit/c9b6bb5bd7d5ca17825f8eb4f181fb42ca14a5d5
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Evaluate new public types in non-public classes,JDK-8308040,5100866,Bug,Closed,JDK,JDK,software,duke,,,P4,Fixed,jlaskey,darcy,darcy,2023-05-13 09:36,2023-08-29 04:32,2023-10-01 09:55,2023-05-24 12:10,21,,,,,,21,core-libs,,0,jacoco-found,,,,,,,,,,,,,"As reported by Marc Hoffman of  javaalmanac.io, in a recent JDK 21 build there are new public types nested in non-public interfaces:

java.lang.runtime.ReferenceKey.SoftKey
java.lang.runtime.ReferenceKey.StrongKey
java.lang.runtime.ReferenceKey.WeakKey
java.util.Digits.DecimalDigits
java.util.Digits.HexDigits
java.util.Digits.OctalDigits",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8255433,JDK-8308239,JDK-8285932,,JDK-8308049,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i31igj:",9223372036854775807,b25,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4c088d55,,,,,,,Verified,,"2023-05-13 13:01;darcy;Per JLS 9.5:

""Every member class or interface declaration in the body of an interface declaration is implicitly public and static (§9.1.1.3). It is permitted to redundantly specify either or both of these modifiers. ""
https://docs.oracle.com/javase/specs/jls/se20/html/jls-9.html#jls-9.5;;;","2023-05-13 22:41;alanb;WeakPairMap.Pair.Lookup and WeakPairMap.Pair.Weak are other examples of this.;;;","2023-05-14 08:16;marchof;These are all affected types in 21-ea+22:

java/awt/EventFilter$FilterAction
java/lang/FdLibm$Cbrt
java/lang/FdLibm$Hypot
java/lang/FdLibm$Pow
java/lang/LiveStackFrame$PrimitiveSlot
java/lang/WeakPairMap$Pair$Lookup
java/lang/WeakPairMap$Pair$Weak
java/lang/invoke/ClassSpecializer$Factory
java/lang/invoke/ClassSpecializer$SpeciesData
java/lang/runtime/ReferenceKey$SoftKey
java/lang/runtime/ReferenceKey$StrongKey
java/lang/runtime/ReferenceKey$WeakKey
java/util/Digits$DecimalDigits
java/util/Digits$HexDigits
java/util/Digits$OctalDigits
java/util/FormatItem$FormatItemModifier
java/util/stream/Node$Builder
java/util/stream/Node$Builder$OfDouble
java/util/stream/Node$Builder$OfInt
java/util/stream/Node$Builder$OfLong
java/util/stream/Node$OfDouble
java/util/stream/Node$OfInt
java/util/stream/Node$OfLong
java/util/stream/Node$OfPrimitive
java/util/stream/Sink$ChainedDouble
java/util/stream/Sink$ChainedInt
java/util/stream/Sink$ChainedLong
java/util/stream/Sink$ChainedReference
java/util/stream/Sink$OfDouble
java/util/stream/Sink$OfInt
java/util/stream/Sink$OfLong
javax/swing/MultiUIDefaults$MultiUIDefaultsEnumerator$Type
javax/swing/plaf/basic/DragRecognitionSupport$BeforeDrag
javax/swing/plaf/metal/MetalSplitPaneDivider$MetalDividerLayout
javax/swing/plaf/nimbus/Effect$ArrayCache
javax/swing/text/html/AccessibleHTML$HTMLAccessibleContext
javax/swing/text/html/AccessibleHTML$IconElementInfo$IconAccessibleContext
javax/swing/text/html/AccessibleHTML$TableElementInfo$TableAccessibleContext
javax/swing/text/html/AccessibleHTML$TableElementInfo$TableAccessibleContext$AccessibleHeadersTable
javax/swing/text/html/AccessibleHTML$TextElementInfo$TextAccessibleContext
javax/swing/text/html/TableView$RowView
javax/xml/catalog/GroupEntry$PreferType
javax/xml/catalog/GroupEntry$ResolveType;;;","2023-05-17 11:15;darcy;FYI,

java/lang/FdLibm$Cbrt
java/lang/FdLibm$Hypot
java/lang/FdLibm$Pow 

were resolved in JDK-8308049 and

java/lang/invoke/ClassSpecializer$Factory
java/lang/invoke/ClassSpecializer$SpeciesData 

in JDK-8308239.;;;","2023-05-24 11:47;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/14039
Date: 2023-05-17 19:14:20 +0000;;;","2023-05-24 12:10;dukebot;Changeset: b44fa365
Author:    Jim Laskey <jlaskey@openjdk.org>
Date:      2023-05-24 19:08:39 +0000
URL:       https://git.openjdk.org/jdk/commit/b44fa365cacce0ae3f9e576a52c08d9ed6258185
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
java/util/concurrent/ThreadPerTaskExecutor/ThreadPerTaskExecutorTest.java timed out,JDK-8308038,5100864,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,alanb,dcubed,dcubed,2023-05-13 07:02,2023-05-28 20:47,2023-10-01 09:55,2023-05-23 00:08,21,,,,,,21,core-libs,,0,genzgc,noreg-self,tier5,,,,,,,,,,,"The following test timed out in the JDK21 CI:

java/util/concurrent/ThreadPerTaskExecutor/ThreadPerTaskExecutorTest.java#platform

Here's a snippet from the log file:

#section:junit
----------messages:(8/369)----------
command: junit -DthreadFactory=platform ThreadPerTaskExecutorTest
reason: User specified action: run junit/othervm -DthreadFactory=platform ThreadPerTaskExecutorTest 
started: Sat May 13 13:38:47 UTC 2023
Mode: othervm [/othervm specified]
Timeout information:
--- Timeout information end.
finished: Sat May 13 13:50:02 UTC 2023
elapsed time (seconds): 674.825
----------configuration:(0/0)----------
----------System.out:(1/27)----------
Timeout refired 480 times
----------System.err:(21/2413)----------
STARTED    ThreadPerTaskExecutorTest::testSubmitNulls1 '[1] java.lang.ThreadBuilders$PlatformThreadFactory@5fe04fcb'
SUCCESSFUL ThreadPerTaskExecutorTest::testSubmitNulls1 '[1] java.lang.ThreadBuilders$PlatformThreadFactory@5fe04fcb'
STARTED    ThreadPerTaskExecutorTest::testSubmitNulls2 '[1] java.lang.ThreadBuilders$PlatformThreadFactory@5fe04fcb'
SUCCESSFUL ThreadPerTaskExecutorTest::testSubmitNulls2 '[1] java.lang.ThreadBuilders$PlatformThreadFactory@5fe04fcb'
STARTED    ThreadPerTaskExecutorTest::testInvokeAnyEmpty1 '[1] java.lang.ThreadBuilders$PlatformThreadFactory@5fe04fcb'
SUCCESSFUL ThreadPerTaskExecutorTest::testInvokeAnyEmpty1 '[1] java.lang.ThreadBuilders$PlatformThreadFactory@5fe04fcb'
STARTED    ThreadPerTaskExecutorTest::testInvokeAnyEmpty2 '[1] java.lang.ThreadBuilders$PlatformThreadFactory@5fe04fcb'
SUCCESSFUL ThreadPerTaskExecutorTest::testInvokeAnyEmpty2 '[1] java.lang.ThreadBuilders$PlatformThreadFactory@5fe04fcb'
STARTED    ThreadPerTaskExecutorTest::testInvokeAnyAfterShutdown '[1] java.util.concurrent.ThreadPerTaskExecutor@737e7993'
SUCCESSFUL ThreadPerTaskExecutorTest::testInvokeAnyAfterShutdown '[1] java.util.concurrent.ThreadPerTaskExecutor@737e7993'
STARTED    ThreadPerTaskExecutorTest::testNull 'testNull()'
SUCCESSFUL ThreadPerTaskExecutorTest::testNull 'testNull()'
STARTED    ThreadPerTaskExecutorTest::testInterruptInvokeAny '[1] java.util.concurrent.ThreadPerTaskExecutor@183f8340'
SUCCESSFUL ThreadPerTaskExecutorTest::testInterruptInvokeAny '[1] java.util.concurrent.ThreadPerTaskExecutor@183f8340'
STARTED    ThreadPerTaskExecutorTest::testInvokeAllInterrupt1 '[1] java.util.concurrent.ThreadPerTaskExecutor@7340aa2e'
SUCCESSFUL ThreadPerTaskExecutorTest::testInvokeAllInterrupt1 '[1] java.util.concurrent.ThreadPerTaskExecutor@7340aa2e'
STARTED    ThreadPerTaskExecutorTest::testInvokeAllInterrupt3 '[1] java.util.concurrent.ThreadPerTaskExecutor@1c44ccff'
SUCCESSFUL ThreadPerTaskExecutorTest::testInvokeAllInterrupt3 '[1] java.util.concurrent.ThreadPerTaskExecutor@1c44ccff'
STARTED    ThreadPerTaskExecutorTest::testInvokeAllInterrupt4 '[1] java.util.concurrent.ThreadPerTaskExecutor@324e4a07'
SUCCESSFUL ThreadPerTaskExecutorTest::testInvokeAllInterrupt4 '[1] java.util.concurrent.ThreadPerTaskExecutor@324e4a07'
STARTED    ThreadPerTaskExecutorTest::testInvokeAllInterrupt6 '[1] java.util.concurrent.ThreadPerTaskExecutor@66865fe4'
----------rerun:(44/6131)*----------

<snip>

result: Error. Program `c:\ade\mesos\work_dir\jib-master\install\jdk-21+23-1937\windows-x64-debug.jdk\jdk-21\fastdebug\bin\java' timed out (timeout set to 480000ms, elapsed time including timeout handling was 674809ms).


",,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8308039,,,,,,,,,,,,,,,,,,,,x86_64,,,,,,,,,windows,,,,,,"0|i31ig3:",9223372036854775807,b24,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@239b1eeb,,,,,,,,,"2023-05-16 10:54;stefank;I've looked at a couple of failures. The test spins on the isDone() check until it times out.

```
void testInvokeAllInterrupt4(ExecutorService executor) throws Exception {
    try (executor) {
        Callable<String> task1 = () -> ""foo"";
        DelayedResult<String> task2 = new DelayedResult(""bar"", Duration.ofMinutes(1));
        scheduleInterrupt(Thread.currentThread(), Duration.ofMillis(500));
        try {
            executor.invokeAll(Set.of(task1, task2));
            fail(""invokeAll did not throw"");
        } catch (InterruptedException expected) {
            assertFalse(Thread.currentThread().isInterrupted());

            // task2 should have been interrupted
            while (!task2.isDone()) {
                Thread.sleep(Duration.ofMillis(100));
            }
            assertTrue(task2.exception() instanceof InterruptedException);
        } finally {
            Thread.interrupted(); // clear interrupt
        }
    }
}

static class DelayedResult<T> implements Callable<T> {
    final T result;
    final Duration delay;
    volatile boolean done;
    volatile Exception exception;
    DelayedResult(T result, Duration delay) {
        this.result = result;
        this.delay = delay;
    }
    public T call() throws Exception {
        try {
            Thread.sleep(delay);
            return result;
        } catch (Exception e) {
            this.exception = e;
            throw e;
        } finally {
            done = true;
        }
    }
    boolean isDone() {
        return done;
    }
    Exception exception() {
        return exception;
    }
}
```

From my local runs I see that we don't even start a GC.;;;","2023-05-16 19:19;martin;This test violates Martin's 10-second rule of thumb to avoid test flakes.
That said, 500ms should be enough to make any flakes vanishingly rare.

Waiting on a CountDownLatch(1) is better than spinning on a boolean.

The test should check that tasks were done in less than Duration.ofMinutes(1).;;;","2023-05-16 22:19;jpai;This test method testInvokeAllInterrupt6 (and at least one other similar method) does this at a high level:
            ...
            scheduleInterrupt(Thread.currentThread(), Duration.ofMillis(500));
            try {
                executor.invokeAll(Set.of(task1, task2), 1, TimeUnit.DAYS);
                fail(""invokeAll did not throw"");
            } catch (InterruptedException expected) {
                assertFalse(Thread.currentThread().isInterrupted());

                // task2 should have been interrupted
                while (!task2.isDone()) {
                    Thread.sleep(Duration.ofMillis(100));
                }

So it schedules a task which is expected to interrupt the current thread that's running the test method after 500 milli seconds. Within those 500 milli seconds, this very thread schedules through an executor 2 tasks (which are java.util.concurrent.Callable instances) and waits, by calling invokeAll(), for both those tasks to complete. After 500 milli seconds, the current waiting thread is expected to be interrupted and the submitted invokeAll() tasks are expected to be cancelled (and thus task2 which is doing a Thread.sleep(...) is expected to be interrupted). Once this current thread is interrupted it enters the catch block and then verifies that the other task2 too has been completed due to interruption.

In these specific runs where this seems to be timing out, the only way this test can timeout is if task2's call() method hasn't been called at all, by the time the current thread is interrupted. Looking at how ThreadPerTaskExecutor.invokeAll() is implemented, I think this is what is indeed happening - i.e. the task2's call() hasn't been called by the time the current thread got interrupted.

The invokeAll() implementation first creates threads for each task and start()s those threads and assigns the corresponding Future instances to an internal list. It then iterates over the Future(s) list and waits on them. This wait can/will get interuppted in this test and once that happens, the invokeAll() implementation cancel(s) these Future(s). Since the submitted tasks are Callable instances, internally, the ThreadPerTaskExecutor uses a wrapper which implements the java.lang.Runnable interface that is passed on to the created threads. The implementation of this Runnable is responsible for passing on the invocation to the task's call() method.

Now, in this test, it's possible that by the time the call reaches executor.invokeAll() a substantially long time might have passed such that it's almost time for the schedule to interrupt the main thread. There's now a small window of time where the invokeAll() implementation has started the tasks' threads and those threads are in the run() implementation of the wrapper Runnable and the main thread is waiting on future.get(...) in the invokeAll implementation. At this point, if the main thread gets interuppted then the invokeAll() will cancel the tasks and the threads which are in the wrapper's run() method might notice that the task is cancelled and thus will never invoke the underlying call() method on the submitted task. Thus the task never gets executed and the test's expectations fail.

What this underlines is that there can be no expectations that the submitted tasks' call() method will be called when using ThreadPerTaskExecutor.invokeAll() if the current thread is interrupted, when the invokeAll is waiting on the submitted tasks to complete. One way to fix this test is probably doing something like:



diff --git a/test/jdk/java/util/concurrent/ThreadPerTaskExecutor/ThreadPerTaskExecutorTest.java b/test/jdk/java/util/concurrent/ThreadPerTaskExecutor/ThreadPerTaskExecutorTest.java
index d57cacb7001..392021848c9 100644
--- a/test/jdk/java/util/concurrent/ThreadPerTaskExecutor/ThreadPerTaskExecutorTest.java
+++ b/test/jdk/java/util/concurrent/ThreadPerTaskExecutor/ThreadPerTaskExecutorTest.java
@@ -898,11 +898,13 @@ class ThreadPerTaskExecutorTest {
             } catch (InterruptedException expected) {
                 assertFalse(Thread.currentThread().isInterrupted());
 
-                // task2 should have been interrupted
-                while (!task2.isDone()) {
-                    Thread.sleep(Duration.ofMillis(100));
+                if (task2.wasCalled()) {
+                    // task2 should have been interrupted, if it was invoked
+                    while (!task2.isDone()) {
+                        Thread.sleep(Duration.ofMillis(100));
+                    }
+                    assertTrue(task2.exception() instanceof InterruptedException);
                 }
-                assertTrue(task2.exception() instanceof InterruptedException);
             } finally {
                 Thread.interrupted(); // clear interrupt
             }
@@ -1047,11 +1049,15 @@ class ThreadPerTaskExecutorTest {
         final Duration delay;
         volatile boolean done;
         volatile Exception exception;
+        volatile boolean called;
+
         DelayedResult(T result, Duration delay) {
             this.result = result;
             this.delay = delay;
         }
+        @Override
         public T call() throws Exception {
+            called = true;
             try {
                 Thread.sleep(delay);
                 return result;
@@ -1065,6 +1071,9 @@ class ThreadPerTaskExecutorTest {
         boolean isDone() {
             return done;
         }
+        boolean wasCalled() {
+            return called;
+        }
         Exception exception() {
             return exception;
         }
;;;","2023-05-16 23:38;alanb;I have changes coming that replace the scheduleInterrupt in  testInterruptInvokeAny, testInvokeAllInterrupt4 and testInvokeAllInterrupt6 so they only interrupt when the tasks are running. I think we're only seeing these failure recently because TPPE moved to using FutureTask in JDK 21. The task is effectively stillborn if interrupted before is executes, which wasn't the case with the previous implementation. Sorry for the noise in the CI.;;;","2023-05-17 13:55;smarks;""This test violates Martin's 10-second rule of thumb to avoid test flakes."" 

[~martin] Could you explain this rule? It sounds like something good for us to continue to keep in mind. Thanks.;;;","2023-05-18 08:45;martin;j.u.c. tests were understandably plagued by flakes due to sleeps or timeouts that weren't long enough.

I made a serious effort over the years to deflake and remove any sleeps, so that e.g. all the tck tests run in ~10 seconds total, while being resistant to long stalls during execution - LONG_DELAY_MS defaults to 10_000.

After running billions of iterations (thanks, Google infrastructure!) I developed the rule of thumb that 10 seconds is long enough that one can be sure it's a real failure and not e.g. due to a stall running a trivial task in another thread.  The longest stall ever actually observed in a test was about 4 seconds.

And that's why you can see things like

```
 static final long LONG_DELAY_MS = Utils.adjustTimeout(10_000);
```
;;;","2023-05-22 01:37;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/14072
Date: 2023-05-21 13:52:06 +0000;;;","2023-05-23 00:07;dukebot;Changeset: fe8c689e
Author:    Alan Bateman <alanb@openjdk.org>
Date:      2023-05-23 07:05:44 +0000
URL:       https://git.openjdk.org/jdk/commit/fe8c689eeea4fa19d4a8742f4ef1d8216f1394e6
;;;","2023-05-23 07:19;dcubed;The fix for this bug is integrated in jdk-21+24-2061.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Some CDS tests need to use @requires vm.flagless,JDK-8308034,5100850,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,ccheung,iklam,iklam,2023-05-12 16:07,2023-05-28 20:47,2023-10-01 09:56,2023-05-22 08:55,21,,,,,,21,hotspot,,0,cds,noreg-self,,,,,,,,,,,,"CDS requires certain flags (e.g., ObjectAlignmentInBytes) to be the same between dump time and run time, or else the CDS archive will fail to load.

Almost all CDS tests generate their own archive files. Therefore, any flags specified via JTREG (e.g., with -vmoptions) will apply to both the dump time and run time. Therefore, even if -vmoptions includes flags like ObjectAlignmentInBytes, the tests will continue to work.

However, some tests fail with -vmoptions:-XX:ObjectAlignmentInBytes=16. We need to investigate why. They probably have a more strict requirement on the command-line options and might need to be tagged with  ""@requires vm.flagless""

- runtime/cds/appcds/cacheObject/DifferentHeapSizes.java
- runtime/cds/appcds/DumpingWithNoCoops.java
- runtime/cds/appcds/sharedStrings/IncompatibleOptions.java

",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i31icz:",9223372036854775807,b24,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,,,"2023-05-17 21:09;ccheung;With the -XX:ObjectAlignmentInBytes=16 vm option, the DumpingWithNoCoops.java test failed as follows:
    java.lang.RuntimeException: 'Setting MaxHeapSize to 4G for CDS dumping' missing from stdout/stderr

It is due to the UseCompressOops is set to true in the following:
void Arguments::set_use_compressed_oops() {
#ifdef _LP64
  // MaxHeapSize is not set up properly at this point, but
  // the only value that can override MaxHeapSize if we are
  // to use UseCompressedOops are InitialHeapSize and MinHeapSize.
  size_t max_heap_size = MAX3(MaxHeapSize, InitialHeapSize, MinHeapSize);

  if (max_heap_size <= max_heap_for_compressed_oops()) {
    if (FLAG_IS_DEFAULT(UseCompressedOops)) {
      FLAG_SET_ERGO(UseCompressedOops, true);     <<<< UseCompressedOops set to true
    }
  }

Since UseCompressedOops is set to true, it returns immediately from:
void MetaspaceShared::adjust_heap_sizes_for_dumping() {
  if (!DumpSharedSpaces || UseCompressedOops) {
    return;
  }
  // CDS heap dumping requires all string oops to have an offset
  // from the heap bottom that can be encoded in 32-bit.
  julong max_heap_size = (julong)(4 * G);

  if (MinHeapSize > max_heap_size) {
    log_debug(cds)(""Setting MinHeapSize to 4G for CDS dumping, original size = "" SIZE_FORMAT ""M"", MinHeapSize/M);
    FLAG_SET_ERGO(MinHeapSize, max_heap_size);
  }
  if (InitialHeapSize > max_heap_size) {
    log_debug(cds)(""Setting InitialHeapSize to 4G for CDS dumping, original size = "" SIZE_FORMAT ""M"", InitialHeapSize/M);
    FLAG_SET_ERGO(InitialHeapSize, max_heap_size);
  }
  if (MaxHeapSize > max_heap_size) {
    log_debug(cds)(""Setting MaxHeapSize to 4G for CDS dumping, original size = "" SIZE_FORMAT ""M"", MaxHeapSize/M);
    FLAG_SET_ERGO(MaxHeapSize, max_heap_size);
  }
}

and skipping all those CDS debug log messages.;;;","2023-05-19 11:15;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/14062
Date: 2023-05-19 18:07:18 +0000;;;","2023-05-22 08:55;dukebot;Changeset: b58980b7
Author:    Calvin Cheung <ccheung@openjdk.org>
Date:      2023-05-22 15:53:04 +0000
URL:       https://git.openjdk.org/jdk/commit/b58980b73d5fdbbfd2c8395ceca61fd1cbf613c8
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
"Replace more uses of System.getProperty(""os.name"") with PlatformUtil calls",JDK-8308028,5100838,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,kcr,kcr,kcr,2023-05-12 12:38,2023-09-12 05:49,2023-10-01 09:56,2023-05-15 06:19,jfx21,,,,,,jfx21,javafx,,0,noreg-cleanup,,,,,,,,,,,,,"This is a follow-on to JDK-8307807 to replace the additional uses of System.getProperty(""os.name"") with PlatformUtil calls in HostUtils in the javafx.media module.

See this PR comment:

https://github.com/openjdk/jfx/pull/1132#issuecomment-1545996996",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8307807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i31iab:",9223372036854775807,b18,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@712e7ab7,,,,,,,,,"2023-05-12 12:39;kcr;There are two ways to do this:

1. Replace the implementation of the methods in HostUtils that check the os.name with the equivalent PlatformUtils method.
2. Remove the methods in HostUtils that check the os.name and replace all callers of those methods with the equivalent PlatformUtils method.;;;","2023-05-13 08:59;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jfx/pull/1134
Date: 2023-05-13 15:56:15 +0000;;;","2023-05-15 06:19;dukebot;Changeset: e7974bc8
Author:    Carl Döbbelin <carl.carlec@gmail.com>
Committer: Kevin Rushforth <kcr@openjdk.org>
Date:      2023-05-15 13:16:28 +0000
URL:       https://git.openjdk.org/jfx/commit/e7974bc84618c9f954e075935cc2ff324c741aad
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
HttpClient (HTTP/1.1) sends an extraneous empty chunk if the BodyPublisher supplies an empty buffer,JDK-8308024,5100834,Bug,Closed,JDK,JDK,software,duke,,,P4,Fixed,dfuchs,dfuchs,dfuchs,2023-05-12 11:09,2023-07-21 07:36,2023-10-01 09:56,2023-05-16 02:14,,,,,,,21,core-libs,,0,httpclient,,,,,,,,,,,,,"When using HTTP/1.1, if a BodyPublisher reports an unknown length (-1), the HttpClient will send the request body in Chunked mode. If the publisher publishes an empty byte buffer, the client will generate an empty chunk, which the server will interpret as the end of the request body. Sending an empty chunk can never be valid, unless it's the last body chunk and marks the end of the body.

A new subclass of AbstractNoBody.java could be created to check this scenario. While at it, the tests java/net/httpclient/NoBodyPartOne.java and  java/net/httpclient/NoBodyPartTwo.java create a lot of clients and could also make use of HttpClient::close.
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i31i9f:",9223372036854775807,b23,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@446e124a,,,,,,,Verified,,"2023-05-15 09:24;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/13988
Date: 2023-05-15 14:21:57 +0000;;;","2023-05-16 02:14;dukebot;Changeset: 72294c54
Author:    Daniel Fuchs <dfuchs@openjdk.org>
Date:      2023-05-16 09:13:17 +0000
URL:       https://git.openjdk.org/jdk/commit/72294c5402dd11e3eb4922ad26e1b153098495ff
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
[Mac] Update deprecated constants in GlassWindow code,JDK-8308017,5100825,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,mfox,mfox,mfox,2023-05-12 09:15,2023-09-12 07:19,2023-10-01 09:56,2023-05-31 15:45,jfx21,,,,,,jfx21,javafx,,0,noreg-cleanup,,,,,,,,,,,,,"Apple renamed a bunch of constants back in macOS 10.12 to match the Swift naming conventions (way back in 2016). The Mac Glass code is still using the old constants which is generating a lot of warnings. Those old constants aren't coming back so it's time to update Glass.

This bug covers GlassWindow.m and GlassWindow+Java.m.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,os_x,,,,,,"0|i31i7f:",9223372036854775807,b20,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4f591050,,,,,,,,,"2023-05-15 08:16;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jfx/pull/1137
Date: 2023-05-15 15:09:27 +0000;;;","2023-05-31 15:45;dukebot;Changeset: 2a6e48f1
Author:    Martin Fox <martin@nlazyt.com>
Committer: Kevin Rushforth <kcr@openjdk.org>
Date:      2023-05-31 22:44:00 +0000
URL:       https://git.openjdk.org/jfx/commit/2a6e48f1c9090124c501c7c8be628ca43924460e
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Use snippets in java.io package,JDK-8308016,5100824,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,bpb,bpb,bpb,2023-05-12 09:14,2023-05-28 20:48,2023-10-01 09:56,2023-05-23 09:01,21,,,,,,21,core-libs,,0,noreg-doc,,,,,,,,,,,,,Replace pertinent specification blocks such as <pre>{@code ...}</pre> with {@snippet lang=java : ...}.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8307409,JDK-8308314,,,,,,,,,,,,,,,generic,,,,,,,,,generic,,,,,,"0|i31i77:",9223372036854775807,b24,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@5f132e58,,,,,,,,,"2023-05-12 09:25;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/13957
Date: 2023-05-12 16:17:38 +0000;;;","2023-05-23 09:01;dukebot;Changeset: 710453c6
Author:    Brian Burkhalter <bpb@openjdk.org>
Date:      2023-05-23 16:00:40 +0000
URL:       https://git.openjdk.org/jdk/commit/710453c676712d021bf856dc601d965e4e270805
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
"Syntax of ""import static"" is incorrect in com.sun.source.tree.ImportTree.java",JDK-8308015,5100823,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,jjg,jlaskey,jlaskey,2023-05-12 09:09,2023-05-17 16:53,2023-10-01 09:56,2023-05-12 10:21,20,,,,,,21,tools,,0,noreg-doc,,,,,,,,,,,,,"""static import qualifiedIdentifier ;"" when should be ""import static qualifiedIdentifier ;""


",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,generic,,,,,,,7,,generic,,,,,,"0|i31i6z:",9223372036854775807,b23,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@7900061a,,,,,,,,,"2023-05-12 10:12;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/13960
Date: 2023-05-12 17:05:48 +0000;;;","2023-05-12 10:21;dukebot;Changeset: 7455bb23
Author:    Jonathan Gibbons <jjg@openjdk.org>
Date:      2023-05-12 17:18:37 +0000
URL:       https://git.openjdk.org/jdk/commit/7455bb23c1d18224e48e91aae4f11fe114d04fab
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
[Lilliput/JDK17] Use narrow i-hash only when +UseCompactObjectHeaders,JDK-8308011,5100819,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,rkennke,rkennke,rkennke,2023-05-12 08:07,2023-05-15 09:49,2023-10-01 09:56,2023-05-15 09:49,repo-lilliput-17,,,,,,repo-lilliput-17,hotspot,,0,lilliput,,,,,,,,,,,,,"Currently, we use a narrow 25bit identity-hash-code in Lilliput. That is even the case when running without compact object headers, even though we could just as well use the original 31bit identity hash-code then.
",,,,,,,,,,JDK-8307991,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,generic,,,,,,,,,generic,,,,,,"0|i31i63:",9223372036854775807,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,,,"2023-05-12 09:08;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/lilliput-jdk17u/pull/16
Date: 2023-05-12 15:09:58 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
X509Key and PKCS8Key allows garbage bytes at the end,JDK-8308010,5100818,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,weijun,weijun,weijun,2023-05-12 08:05,2023-05-24 23:10,2023-10-01 09:56,2023-05-18 14:25,,,,,,,21,security-libs,,0,,,,,,,,,,,,,,"Both `PKCS8Key::<init>(byte[])` and `X509::decode(byte[])` wrap the input bytes into a `ByteArrayInputStream` and then parse it. This means if there are any extra bytes after the end of the key they will not be detected and the key parsing succeeds.

This can be demonstrated with
```
        KeyFactory.getInstance(""EC"").generatePublic(new X509EncodedKeySpec(Arrays.copyOf(
                KeyPairGenerator.getInstance(""EC"").generateKeyPair().getPublic().getEncoded(), 1000)));
```",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i31i5v:",9223372036854775807,b24,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@2ec284e3,,,,,,,,,"2023-05-12 09:29;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/13958
Date: 2023-05-12 16:23:53 +0000;;;","2023-05-18 14:25;dukebot;Changeset: 148df533
Author:    Weijun Wang <weijun@openjdk.org>
Date:      2023-05-18 21:23:29 +0000
URL:       https://git.openjdk.org/jdk/commit/148df533af618a959ca2f3601d9ab897c3515d77
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Generational ZGC: OOM before clearing all SoftReferences,JDK-8308009,5100817,Bug,Closed,JDK,JDK,software,duke,,,P2,Fixed,eosterlund,dcubed,dcubed,2023-05-12 08:04,2023-07-13 03:38,2023-10-01 09:56,2023-05-26 03:14,21,,,,,,21,hotspot,,0,genzgc,intermittent,tier5,,,,,,,,,,,"The following test failed in the JDK21 CI:

vmTestbase/gc/gctests/SoftReference/SoftReferenceTest/SoftReferenceTest.java

Here's a snippet from the log file:

#section:main
----------messages:(6/359)----------
command: main gc.gctests.SoftReference.SoftReferenceTest.SoftReferenceTest -stressTime 600
reason: User specified action: run main/othervm gc.gctests.SoftReference.SoftReferenceTest.SoftReferenceTest -stressTime 600 
started: Fri May 12 05:49:24 UTC 2023
Mode: othervm [/othervm specified]
finished: Fri May 12 05:49:28 UTC 2023
elapsed time (seconds): 3.594
----------configuration:(0/0)----------
----------System.out:(23/1160)----------
Stress time: 600 seconds
Stress iterations factor: 1
Stress threads factor: 1
Stress runs factor: 1
Max memory: 2040528896
Sleep time: 500
Iterations: 0
Number of threads: 16
Run GC thread: false
Run mem diag thread: false
Run forever: false
For random generator using seed: 3219044760223124900
To re-run test with same seed value please add ""-Djdk.test.lib.random.seed=3219044760223124900"" to command line.
nsk.share.TestFailure: 4266 out of 320130 SoftReferences was not null at time of OutOfMemoryError
	at gc.gctests.SoftReference.SoftReferenceTest.SoftReferenceTest.run(SoftReferenceTest.java:134)
	at nsk.share.test.Tests$TestRunner.execute(Tests.java:82)
	at nsk.share.test.Tests$TestRunner.run(Tests.java:96)
	at nsk.share.gc.GC.runTest(GC.java:114)
	at gc.gctests.SoftReference.SoftReferenceTest.SoftReferenceTest.main(SoftReferenceTest.java:147)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
	at java.base/java.lang.reflect.Method.invoke(Method.java:578)
	at com.sun.javatest.regtest.agent.MainWrapper$MainTask.run(MainWrapper.java:138)
	at java.base/java.lang.Thread.run(Thread.java:1583)
----------System.err:(14/800)----------
nsk.share.TestFailure: Test exit code: 97
	at nsk.share.test.Tests$TestRunner.execute(Tests.java:90)
	at nsk.share.test.Tests$TestRunner.run(Tests.java:96)
	at nsk.share.gc.GC.runTest(GC.java:114)
	at gc.gctests.SoftReference.SoftReferenceTest.SoftReferenceTest.main(SoftReferenceTest.java:147)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
	at java.base/java.lang.reflect.Method.invoke(Method.java:578)
	at com.sun.javatest.regtest.agent.MainWrapper$MainTask.run(MainWrapper.java:138)
	at java.base/java.lang.Thread.run(Thread.java:1583)

JavaTest Message: Test threw exception: nsk.share.TestFailure: Test exit code: 97
JavaTest Message: shutting down test

STATUS:Failed.`main' threw exception: nsk.share.TestFailure: Test exit code: 97
----------rerun:(37/8800)*----------",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8289838,,,,,,,,,,,,aarch64,,,,,,,,,linux,,,,,,"0|i31i5n:",9223372036854775807,b25,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6b00f96c,,,,,,,Verified,,"2023-05-15 01:33;kbarrett;Looks a lot like JDK-8289838, which was a zgc-singlegen bug fixed in JDK 20.;;;","2023-05-24 05:24;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/14122
Date: 2023-05-24 12:18:19 +0000;;;","2023-05-26 03:14;dukebot;Changeset: d3b9b364
Author:    Erik Österlund <eosterlund@openjdk.org>
Date:      2023-05-26 10:12:50 +0000
URL:       https://git.openjdk.org/jdk/commit/d3b9b364da8c11c9b4dd14a6451a7b24f41202e7
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Missing NMT memory tagging in CMS,JDK-8308006,5100814,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,zgu,zgu,zgu,2023-05-12 07:32,2023-08-27 12:43,2023-10-01 09:56,2023-05-15 06:37,11-pool,,,,,,11.0.20,hotspot,,0,jdk11u-fix-request,jdk11u-fix-yes,nmt,,,,,,,,,,,"There are untagged virtual memory allocations show up with NMT when running CMS GC

-                   Unknown (reserved=276072KB, committed=276072KB)
                            (mmap: reserved=276072KB, committed=276072KB) ",,,,,,,,,,,JDK-8308811,,,,,,,,,,,,,,,,,,,,,JDK-8314950,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i31i4z:",9223372036854775807,b03,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,,,"2023-05-12 08:24;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk11u-dev/pull/1885
Date: 2023-05-12 14:39:24 +0000;;;","2023-05-12 09:41;zgu;Fix Request [11u]

I would like to fix this trivial bug in 11u, that adds missing NMT memory tags for CMS mark bitmap and mark stack.
;;;","2023-05-15 06:37;dukebot;Changeset: be0de41d
Author:    Zhengyu Gu <zgu@openjdk.org>
Date:      2023-05-15 13:35:51 +0000
URL:       https://git.openjdk.org/jdk11u-dev/commit/be0de41d42ab5278484053e9492270431edcc174
;;;","2023-05-17 14:06;dukebot;Changeset: be0de41d
Author:    Zhengyu Gu <zgu@openjdk.org>
Date:      2023-05-15 13:35:51 +0000
URL:       https://git.openjdk.org/jdk11u/commit/be0de41d42ab5278484053e9492270431edcc174
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
gtest:ZIndexDistributorTest fails on PPC64,JDK-8307997,5100804,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,stefank,mdoerr,mdoerr,2023-05-12 03:55,2023-05-17 16:54,2023-10-01 09:56,2023-05-15 06:54,21,,,,,,21,hotspot,,0,genzgc,,,,,,,,,,,,,"2 tests are failing on PPC64 when running
make run-test TEST=""gtest:ZIndexDistributorTest""

test/hotspot/gtest/gc/z/test_zIndexDistributor.cpp:41: Failure
Expected equality of these values:
  ZIndexDistributorClaimTree::claim_level_end_index(0)
    Which is: 32
  16

test/hotspot/gtest/gc/z/test_zIndexDistributor.cpp:73: Failure
Expected equality of these values:
  ZIndexDistributorClaimTree::claim_index(indices, 1)
    Which is: 32
  second_level_start
    Which is: 16

ZIndexDistributorStriped uses ZCacheLineSize which is twice as high as on the other supported platforms.
Seems like the test only works for ZCacheLineSize = 64. So, I guess the issue is not limited to PPC64 in general (e.g. s390 would also be affected, but currently has no ZGC support).",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8307058,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i31i2r:",9223372036854775807,b23,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6b00f96c,,,,,,,,,"2023-05-15 01:04;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/13977
Date: 2023-05-15 07:57:34 +0000;;;","2023-05-15 06:54;dukebot;Changeset: 97b2ca3d
Author:    Stefan Karlsson <stefank@openjdk.org>
Date:      2023-05-15 13:52:34 +0000
URL:       https://git.openjdk.org/jdk/commit/97b2ca3de76046c6f52d3649d8787feea7b9ac83
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
[Lilliput] Use narrow i-hash only when +UseCompactObjectHeaders,JDK-8307991,5100798,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,rkennke,rkennke,rkennke,2023-05-12 03:30,2023-05-12 09:07,2023-10-01 09:56,2023-05-12 09:07,repo-lilliput,,,,,,repo-lilliput,hotspot,,0,lilliput,,,,,,,,,,,,,"Currently, we use a narrow 25bit identity-hash-code in Lilliput. That is even the case when running without compact object headers, even though we could just as well use the original 31bit identity hash-code then.",,,,,,,,,,,JDK-8308011,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,generic,,,,,,,,,generic,,,,,,"0|i31i1f:",9223372036854775807,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,,,"2023-05-12 07:21;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/lilliput/pull/93
Date: 2023-05-12 10:33:45 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
jspawnhelper must close its writing side of a pipe before reading from it,JDK-8307990,5100797,Bug,Closed,JDK,JDK,software,duke,,,P3,Fixed,simonis,simonis,simonis,2023-05-12 03:24,2023-08-23 08:57,2023-10-01 09:56,2023-06-01 03:59,17,20,,,,,21,core-libs,,0,amazon-interest,redhat-interest,release-note=yes,,,,,,,,,,,"Since JDK13, executing commands in a sub-process defaults to the so called `POSIX_SPAWN` launching mechanism (i.e. `-Djdk.lang.Process.launchMechanism=POSIX_SPAWN`) on Linux. This works by using `posix_spawn(3)` to firstly start a tiny helper program called `jspawnhelper` in a subprocess. In a second step, `jspawnhelper` reads the command data from the parent Java process over a Unix pipe and finally executes (i.e. `execvp(3)`) the requested command.

In cases where the parent process terminates abnormally before `jspawnhelper` has read all the expected data from the pipe, `jspawnhelper` will block indefinitely on the reading end of the pipe. This is especially harmful if the parent process had open sockets, because in that case, the forked `jspawnhelper` process will inherit them and keep all the corresponding ports open effectively preventing other processes to bind to them. Notice that this is not an abstract scenario. We've observed this regularly in production with services which couldn't be restarted after a crash after migrating to JDK 17.

The fix of the issue is rather trivial. `jspawnhelper` has to close its writing end of the pipe which connects it with the parent Java process *before* starting to read from that pipe such that reads from the pipe can immediately return with EOF if the parent process terminates abnormally.
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8213192,JDK-8308350,,,JDK-8311645,,,,,,,,,,,,,,,,,,,,,linux,,,,,,"0|i31i17:",9223372036854775807,b26,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4c088d55,,,,,,,Verified,,"2023-05-12 08:34;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/13956
Date: 2023-05-12 15:24:19 +0000;;;","2023-05-17 23:54;stuefe;[~rrigs]: Why ""linux""? Does MacOS not use posix_spawn too?;;;","2023-06-01 03:59;dukebot;Changeset: 39f6d807
Author:    Volker Simonis <simonis@openjdk.org>
Date:      2023-06-01 10:56:31 +0000
URL:       https://git.openjdk.org/jdk/commit/39f6d807dbbe0c9ecd72fe2f76bfbc3091b43c80
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
(fs) Files.createDirectories(dir) returns dir::toAbsolutePath instead of dir,JDK-8307976,5100697,Bug,Closed,JDK,JDK,software,duke,,,P4,Fixed,bpb,webbuggrp,webbuggrp,2023-05-11 03:05,2023-07-21 07:36,2023-10-01 09:56,2023-05-17 09:05,11,17,20,21,,,21,core-libs,,0,dcsaw,reproducer-yes,webbug,,,,,,,,,,,"ADDITIONAL SYSTEM INFORMATION :
Tested on OpenJDK20 Windows and Linux, and OpenJDK14 - similar results for all

A DESCRIPTION OF THE PROBLEM :
When calling Files.createDirectories(path) for a relative path, the result returned is sometimes absolute version of the created path, but on other occasions the same original relative path is returned. Midway through Files.createDirectories(path) there is a line ""dir = dir.toAbsolutePath()"" but there is ""return dir;""  before and after that conversion - therefore giving inconsistent return value to caller.  This inconsistent behaviour is undocumented. I would expect all calls to Files.createDirectories(path) to return the same value for all calls with same input path. Always toAbsolutePath, or always the original path, never a mix of the two outcomes.


STEPS TO FOLLOW TO REPRODUCE THE PROBLEM :
See test case, this repeats the call to create a temporary directory with relative path Path.of("".temp/temp.abc/temp.def"")

EXPECTED VERSUS ACTUAL BEHAVIOR :
EXPECTED -
Files.createDirectories(.temp/temp.abc/temp.def) => .temp/temp.abc/temp.def
Files.createDirectories(.temp/temp.abc/temp.def) => .temp/temp.abc/temp.def
Files.createDirectories(.temp/temp.abc/temp.def) => .temp/temp.abc/temp.def
ACTUAL -
On the first call the path returned has been converted to absolute path, but in 2nd+ calls the path returned is relative path equal to the input path.
Windows:
Files.createDirectories(.temp\temp.abc\temp.def) => C:\Temp\.temp\temp.abc\temp.def
Files.createDirectories(.temp\temp.abc\temp.def) => .temp\temp.abc\temp.def
Files.createDirectories(.temp\temp.abc\temp.def) => .temp\temp.abc\temp.def
Linux:
Files.createDirectories(.temp/temp.abc/temp.def) => /tmp/.temp/temp.abc/temp.def
Files.createDirectories(.temp/temp.abc/temp.def) => .temp/temp.abc/temp.def
Files.createDirectories(.temp/temp.abc/temp.def) => .temp/temp.abc/temp.def


---------- BEGIN SOURCE ----------
class FilesCreateDirectories {
    public static void main(String ... args) throws IOException {
        Path temp  = Path.of("".temp/temp.abc/temp.def"");
        Files.deleteIfExists(temp);
        Files.deleteIfExists(temp.getParent());
        Path a = Files.createDirectories(temp);
        Path b = Files.createDirectories(temp);
        Path c = Files.createDirectories(temp);
        System.out.format(""Files.createDirectories(%s) => %s%n"", temp, a);
        System.out.format(""Files.createDirectories(%s) => %s%n"", temp, b);
        System.out.format(""Files.createDirectories(%s) => %s%n"", temp, c);
    }
}
---------- END SOURCE ----------

CUSTOMER SUBMITTED WORKAROUND :
Never assign the returned path from Files.createDirectories(temp) to another variable, and just use the parameter passed for subsequent calls.

FREQUENCY : always


",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"2023-05-12 00:26;tongwan;FilesCreateDirectories.java;https://bugs.openjdk.org/secure/attachment/103817/FilesCreateDirectories.java",,,,,,,generic,,,,,,,,,linux,os_x,windows,,,,"0|i31hez:",9223372036854775807,b23,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@674604a9,,,,,,,Verified,,"2023-05-12 00:11;alanb;The method should return dir, not dir.toAbsolutePath, seems this bug has existed for a long time but has not been noticed.;;;","2023-05-12 00:26;tongwan;The observations on Windows 10:
JDK 11: Failed, second and third calls returned different results from the first one
JDK 17: Failed.
JDK 20: Failed.
JDK 21ea+5: Failed.;;;","2023-05-12 09:39;bpb;Reproduces also on macOS.;;;","2023-05-12 10:07;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/13959
Date: 2023-05-12 17:00:48 +0000;;;","2023-05-17 09:05;dukebot;Changeset: 6d4782bc
Author:    Brian Burkhalter <bpb@openjdk.org>
Date:      2023-05-17 16:04:08 +0000
URL:       https://git.openjdk.org/jdk/commit/6d4782bc737d5933b9476cadb5e87ceee94c4f68
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
[zgc] Missing includes in gc/z/zTracer.cpp,JDK-8307969,5100769,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,jiefu,jiefu,jiefu,2023-05-11 18:19,2023-05-17 16:52,2023-10-01 09:56,2023-05-11 23:32,21,,,,,,21,hotspot,,0,tencent-interest,zgc,,,,,,,,,,,,"Reproduce: configure and build with --with-jvm-features=-jfr

/data/jdk/src/hotspot/share/gc/z/zTracer.cpp: In member function 'virtual void ZYoungTracer::report_end(const Ticks&)':
/data/jdk/src/hotspot/share/gc/z/zTracer.cpp:105:40: error: incomplete type 'ZGeneration' used in nested name specifier
  105 |   e.set_tenuringThreshold(ZGeneration::young()->tenuring_threshold());
      |                                        ^~~~~
gmake[3]: *** [lib/CompileJvm.gmk:147: /data/jdk/build/linux-x86_64-server-fastdebug/hotspot/variant-server/libjvm/objs/zTracer.o] Error 1
gmake[3]: *** Waiting for unfinished jobs....
gmake[2]: *** [make/Main.gmk:252: hotspot-server-libs] Error 2",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8307058,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i31huz:",9223372036854775807,b23,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6b00f96c,,,,,,,,,"2023-05-11 18:28;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/13948
Date: 2023-05-12 01:23:00 +0000;;;","2023-05-11 23:32;dukebot;Changeset: ccb4dd61
Author:    Jie Fu <jiefu@openjdk.org>
Date:      2023-05-12 06:31:09 +0000
URL:       https://git.openjdk.org/jdk/commit/ccb4dd614483c11903dfde3e249c5ea8c8b04070
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
serviceability/jvmti/vthread/StopThreadTest/StopThreadTest.java timed out,JDK-8307968,5100767,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,sspitsyn,dcubed,dcubed,2023-05-11 17:55,2023-05-22 00:53,2023-10-01 09:56,2023-05-16 00:22,21,,,,,,21,hotspot,,0,tier1,tier3,,,,,,,,,,,,"The following new test timed out in the JDK21 CI:

serviceability/jvmti/vthread/StopThreadTest/StopThreadTest.java

Here's a snippet from the log file:

#section:main
----------messages:(8/343)----------
command: main -agentlib:StopThreadTest StopThreadTest
reason: User specified action: run main/othervm/native -agentlib:StopThreadTest StopThreadTest 
started: Thu May 11 23:54:49 GMT 2023
Mode: othervm [/othervm specified]
Timeout information:
--- Timeout information end.
finished: Fri May 12 00:03:53 GMT 2023
elapsed time (seconds): 543.32
----------configuration:(0/0)----------
----------System.out:(15/446)----------
Agent init
Main: prepareAgent started
Main: prepareAgent finished

Main #A: method A() must be blocked on entering a synchronized statement
TestTask.run: started

Main #A.1: unsuspended
Main: stopThread: StopThread returned code: JVMTI_ERROR_THREAD_NOT_SUSPENDED (13)
Main #A.1: got expected THREAD_NOT_SUSPENDED

Main #A.2: suspended
Main: suspendThread
Main: stopThread: StopThread returned code: JVMTI_ERROR_NONE (0)
Timeout refired 480 times
----------System.err:(3/186)----------
java version ""21-ea"" 2023-09-19 LTS
Java(TM) SE Runtime Environment (fastdebug build 21-ea+23-LTS-1910)
Java HotSpot(TM) 64-Bit Server VM (fastdebug build 21-ea+23-LTS-1910, mixed mode)
----------rerun:(36/6757)*----------

<snip>

result: Error. Program `/System/Volumes/Data/mesos/work_dir/jib-master/install/jdk-21+23-1910/macosx-x64-debug.jdk/jdk-21/fastdebug/bin/java' timed out (timeout set to 480000ms, elapsed time including timeout handling was 543310ms).

This test was recently added by:

JDK-8306034 add support of virtual threads to JVMTI StopThread
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8306034,,,,,,,,,,,,,,,,x86_64,,,,,,,,,os_x,,,,,,"0|i31huj:",9223372036854775807,b23,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@661b156a,,,,,,,,,"2023-05-12 07:31;dcubed;Here's a log file snippet from the jdk-21+23-1920-tier1 sighting: 

serviceability/jvmti/vthread/StopThreadTest/StopThreadTest.java#default

#section:main
----------messages:(6/292)----------
command: main -agentlib:StopThreadTest StopThreadTest
reason: User specified action: run main/othervm/native -agentlib:StopThreadTest StopThreadTest 
started: Fri May 12 07:04:48 GMT 2023
Mode: othervm [/othervm specified]
finished: Fri May 12 07:04:49 GMT 2023
elapsed time (seconds): 0.964
----------configuration:(0/0)----------
----------System.out:(16/490)----------
Agent init
Main: prepareAgent started
Main: prepareAgent finished

Main #A: method A() must be blocked on entering a synchronized statement
TestTask.run: started

Main #A.1: unsuspended
Main: stopThread: StopThread returned code: JVMTI_ERROR_THREAD_NOT_SUSPENDED (13)
Main #A.1: got expected THREAD_NOT_SUSPENDED

Main #A.2: suspended
Main: suspendThread
Main: stopThread: StopThread returned code: JVMTI_ERROR_OPAQUE_FRAME (32)

FAILED: Main #A.2: expected JVMTI_ERROR_NONE instead of: 32
----------System.err:(13/725)----------
java.lang.RuntimeException: StopThreadTest failed!
	at StopThreadTest.throwFailed(StopThreadTest.java:80)
	at StopThreadTest.run(StopThreadTest.java:123)
	at StopThreadTest.main(StopThreadTest.java:85)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
	at java.base/java.lang.reflect.Method.invoke(Method.java:578)
	at com.sun.javatest.regtest.agent.MainWrapper$MainTask.run(MainWrapper.java:138)
	at java.base/java.lang.Thread.run(Thread.java:1583)

JavaTest Message: Test threw exception: java.lang.RuntimeException: StopThreadTest failed!
JavaTest Message: shutting down test

STATUS:Failed.`main' threw exception: java.lang.RuntimeException: StopThreadTest failed!
----------rerun:(34/6675)*----------


So this failure sighting is not a timeout, but is instead an unexpected JVM/TI return code:

Main #A.2: suspended
Main: suspendThread
Main: stopThread: StopThread returned code: JVMTI_ERROR_OPAQUE_FRAME (32)

FAILED: Main #A.2: expected JVMTI_ERROR_NONE instead of: 32;;;","2023-05-13 00:35;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/13969
Date: 2023-05-13 07:28:38 +0000;;;","2023-05-16 00:22;dukebot;Changeset: c2ef3024
Author:    Serguei Spitsyn <sspitsyn@openjdk.org>
Date:      2023-05-16 07:20:01 +0000
URL:       https://git.openjdk.org/jdk/commit/c2ef3024689d60c79320ab3ef9a2fdeccb4cde72
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Exclude gc/g1/TestSkipRebuildRemsetPhase.java fails with virtual test thread factory,JDK-8307962,5100760,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,lmesnik,lmesnik,lmesnik,2023-05-11 13:55,2023-05-24 23:10,2023-10-01 09:56,2023-05-19 11:44,21,,,,,,21,hotspot,,0,,,,,,,,,,,,,,"Test 
gc/g1/TestSkipRebuildRemsetPhase.java 
fails with virtual test thread factory",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i31hsz:",9223372036854775807,b24,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@78d03d9a,,,,,,,,,"2023-05-11 17:19;lmesnik;The test set very specific memory settings. Using virtual threads might break it's expectations. No plans to fix it. Just exclude.;;;","2023-05-11 17:26;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/13947
Date: 2023-05-12 00:20:32 +0000;;;","2023-05-19 11:44;dukebot;Changeset: 241455fc
Author:    Leonid Mesnik <lmesnik@openjdk.org>
Date:      2023-05-19 18:42:23 +0000
URL:       https://git.openjdk.org/jdk/commit/241455fcd11a20443f7bfa72544ed858f6bebe8b
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
java/foreign/enablenativeaccess/TestEnableNativeAccess.java fails with ShouldNotReachHere,JDK-8307961,5100759,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,mcimadamore,dcubed,dcubed,2023-05-11 13:45,2023-05-17 16:52,2023-10-01 09:56,2023-05-12 03:40,21,,,,,,21,core-libs,,0,foreign-memaccess+abi,noreg-self,tier4,,,,,,,,,,,"The following test failed in the JDK21 CI:

java/foreign/enablenativeaccess/TestEnableNativeAccess.java

Here's a snippet from the log file:

Trying to get downcall handle
#
# A fatal error has been detected by the Java Runtime Environment:
#
#  Internal Error (/opt/mach5/mesos/work_dir/slaves/741e9afd-8c02-45c3-b2e2-9db1450d0832-S100405/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/2d00c4b2-f914-48bf-a896-77cb88ae6dcc/runs/3b07c88a-d7ff-4e72-bc2e-ca9822f65ad8/workspace/open/src/hotspot/share/runtime/jniHandles.cpp:207), pid=2641771, tid=2641797
#  Error: ShouldNotReachHere()
#
# JRE version: Java(TM) SE Runtime Environment (21.0+23) (fastdebug build 21-ea+23-LTS-1901)
# Java VM: Java HotSpot(TM) 64-Bit Server VM (fastdebug 21-ea+23-LTS-1901, mixed mode, sharing, tiered, compressed oops, compressed class ptrs, g1 gc, linux-aarch64)
# Problematic frame:
# V  [libjvm.so+0xe659f0]  JNIHandles::handle_type(JavaThread*, _jobject*)+0xa0
#
# Core dump will be written. Default location: Core dumps may be processed with ""/opt/core.sh %p"" (or dumping to /opt/mach5/mesos/work_dir/slaves/741e9afd-8c02-45c3-b2e2-9db1450d0832-S96156/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/2db6bc86-bd04-4600-bbdd-1e25991039a0/runs/e229eb84-eb63-4678-a1c1-62a2bcddd379/testoutput/test-support/jtreg_open_test_jdk_tier1/scratch/3/core.2641771)
#
# An error report file with more information is saved as:
# /opt/mach5/mesos/work_dir/slaves/741e9afd-8c02-45c3-b2e2-9db1450d0832-S96156/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/2db6bc86-bd04-4600-bbdd-1e25991039a0/runs/e229eb84-eb63-4678-a1c1-62a2bcddd379/testoutput/test-support/jtreg_open_test_jdk_tier1/scratch/3/hs_err_pid2641771.log
#
# If you would like to submit a bug report, please visit:
#   https://bugreport.java.com/bugreport/crash.jsp
#


[2023-05-11T17:12:29.467398768Z] Waiting for completion for process 2641771
[2023-05-11T17:12:29.467481609Z] Waiting for completion finished for process 2641771
test TestEnableNativeAccess.testSucceed(""panama_enable_native_access_jni"", ""panama_module/org.openjdk.foreigntest.PanamaMainJNI"", success, [Ljava.lang.String;@5c760629): failure
java.lang.AssertionError: expected [true] but found [false]
	at org.testng.Assert.fail(Assert.java:99)
	at org.testng.Assert.failNotEquals(Assert.java:1037)
	at org.testng.Assert.assertTrue(Assert.java:45)
	at org.testng.Assert.assertTrue(Assert.java:55)
	at TestEnableNativeAccess.checkResult(TestEnableNativeAccess.java:162)
	at TestEnableNativeAccess.run(TestEnableNativeAccess.java:186)
	at TestEnableNativeAccess.testSucceed(TestEnableNativeAccess.java:192)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
	at java.base/java.lang.reflect.Method.invoke(Method.java:578)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:132)
	at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:599)
	at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:174)
	at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
	at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:822)
	at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:147)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1593)
	at org.testng.TestRunner.privateRun(TestRunner.java:764)
	at org.testng.TestRunner.run(TestRunner.java:585)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:384)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:378)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:337)
	at org.testng.SuiteRunner.run(SuiteRunner.java:286)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1218)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1140)
	at org.testng.TestNG.runSuites(TestNG.java:1069)
	at org.testng.TestNG.run(TestNG.java:1037)
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:102)
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:58)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
	at java.base/java.lang.reflect.Method.invoke(Method.java:578)
	at com.sun.javatest.regtest.agent.MainWrapper$MainTask.run(MainWrapper.java:138)
	at java.base/java.lang.Thread.run(Thread.java:1583)

Here's the crashing thread's stack trace:

---------------  T H R E A D  ---------------

Current thread (0x0000fffebc000b70):  JavaThread ""Thread-0""         [_thread_in_vm, id=2641797, stack(0x0000fffecb440000,0x0000fffecbc40000) (8192K)]

Stack: [0x0000fffecb440000,0x0000fffecbc40000],  sp=0x0000fffecbc3e730,  free space=8185k
Native frames: (J=compiled Java code, j=interpreted, Vv=VM code, C=native code)
V  [libjvm.so+0xe659f0]  JNIHandles::handle_type(JavaThread*, _jobject*)+0xa0  (jniHandles.cpp:207)
V  [libjvm.so+0xe4a454]  jniCheck::validate_handle(JavaThread*, _jobject*)+0x24  (jniCheck.cpp:425)
V  [libjvm.so+0xe4abc0]  jniCheck::validate_object(JavaThread*, _jobject*)+0x50  (jniCheck.cpp:453)
V  [libjvm.so+0xe53014]  jniCheck::validate_call(JavaThread*, _jclass*, _jmethodID*, _jobject*) [clone .constprop.0]+0x64  (jniCheck.cpp:528)
V  [libjvm.so+0xe562c8]  checked_jni_CallVoidMethodV+0xb8  (jniCheck.cpp:1011)
C  [libLinkerInvokerModule.so+0xc70]  JNIEnv_::CallVoidMethod(_jobject*, _jmethodID*, ...)+0x70  (jni.h:1064)
C  [libLinkerInvokerModule.so+0xacc]  call(void*)+0x7c  (libLinkerInvokerModule.cpp:42)
C  [libLinkerInvokerModule.so+0xa40]  procedure+0x10  (testlib_threads.h:62)
C  [libpthread.so.0+0x7908]  start_thread+0x188",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8307610,,,,,,,,,,,,aarch64,x86_64,,,,,,,,linux,,,,,,"0|i31hsr:",9223372036854775807,b23,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@28ce6b78,,,,,,,,,"2023-05-11 14:34;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/13944
Date: 2023-05-11 21:29:51 +0000;;;","2023-05-12 03:40;dukebot;Changeset: 13a3fce2
Author:    Maurizio Cimadamore <mcimadamore@openjdk.org>
Date:      2023-05-12 10:38:27 +0000
URL:       https://git.openjdk.org/jdk/commit/13a3fce29e696354b2e79fbcfd3557dc4a1fece7
;;;","2023-05-12 07:34;dcubed;The fix for this bug is integrated in jdk-21+23-1924.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Metaspace verification is slow causing extreme class unloading times,JDK-8307958,5100756,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,aboldtch,stefank,stefank,2023-05-11 11:56,2023-06-08 06:52,2023-10-01 09:56,2023-05-25 02:05,21,,,,,,21,hotspot,,0,genzgc,metaspace,tier3,tier8,,,,,,,,,,"We see very long class unloading times with Generational ZGC in fastdebug builds. MacOS spindumps show that it is caused by Metaspace verification code.

I think the main problem is that many of the verification operations are performed at every operation (add, remove, split, merge) and the individual operation verifies much more than a constant number of chunks. This seems to give a quadratic complexity which blows up if you don't class unload often enough.

With Generational ZGC we can see instances of up to minutes long class unloading times. This seems to cause secondary problems because reference processing is blocked (runs around the same time as class unloading). When reference processing is blocked tests that create a lot of files can start to use up all file descriptors.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"2023-05-16 00:45;stefank;spindump.txt;https://bugs.openjdk.org/secure/attachment/103845/spindump.txt",,,,,,,,,,,,,,,,,,,,,,"0|i31hs3:",9223372036854775807,b25,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,,,"2023-05-11 13:33;dcubed;Here's a log file snippet from the jdk-21+23-1903-tier3 sighting:

applications/kitchensink/Kitchensink.java

Stress process should complete by itself, just waiting for exitCode.
[stress.process.err] Iteration done: Jfr at Thu May 11 16:24:07 UTC 2023
[stress.process.err] Stress module finished at [Thu May 11 16:24:07 UTC 2023]: Jfr
[stress.process.err] Iteration done: Reference at Thu May 11 16:24:17 UTC 2023
[stress.process.err] Stress module finished at [Thu May 11 16:24:17 UTC 2023]: Reference
[stress.process.err] Iteration done: MemAccess at Thu May 11 16:24:38 UTC 2023
[stress.process.err] Stress module finished at [Thu May 11 16:24:38 UTC 2023]: MemAccess
[stress.process.err] Iteration done: SpecJvm2008Batch at Thu May 11 16:25:01 UTC 2023
[stress.process.err] Stress module finished at [Thu May 11 16:25:01 UTC 2023]: SpecJvm2008Batch
[stress.process.err] --------------------------------------------------------------------------------
[stress.process.err] InflaterStressModule got uncaught exception in execute at Thu May 11 16:26:06 UTC 2023 (1683822366557)
[stress.process.err] java.io.FileNotFoundException: /opt/mach5/mesos/work_dir/slaves/741e9afd-8c02-45c3-b2e2-9db1450d0832-S42316/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/c14f7e0d-0397-4811-b5f6-75b1535e2993/runs/b1fb7ea3-6ce5-4393-9bfa-0e8eb83945d1/testoutput/test-support/jtreg_closed_test_hotspot_jtreg_applications_kitchensink_Kitchensink_java/scratch/0/java.io.tmpdir/InflateAndRun.6192523753689099341.deflated.tmp (Too many open files)
[stress.process.err] 	at java.base/java.io.FileOutputStream.open0(Native Method)
[stress.process.err] 	at java.base/java.io.FileOutputStream.open(FileOutputStream.java:289)
[stress.process.err] 	at java.base/java.io.FileOutputStream.<init>(FileOutputStream.java:230)
[stress.process.err] 	at java.base/java.io.FileOutputStream.<init>(FileOutputStream.java:179)
[stress.process.err] 	at applications.kitchensink.process.stress.modules.InflaterStressModule.deflateFile(InflaterStressModule.java:141)
[stress.process.err] 	at applications.kitchensink.process.stress.modules.InflaterStressModule.deflateAndInflate(InflaterStressModule.java:121)
[stress.process.err] 	at applications.kitchensink.process.stress.modules.InflaterStressModule.execute(InflaterStressModule.java:96)
[stress.process.err] 	at applications.kitchensink.process.stress.modules.StressModule.run(StressModule.java:99)
[stress.process.err] 	at java.base/java.lang.Thread.run(Thread.java:1583)
[stress.process.err] --------------------------------------------------------------------------------
[stress.process.err] Unexpected Exception in thread InflaterStressModule.
[stress.process.err] java.lang.RuntimeException: java.io.FileNotFoundException: /opt/mach5/mesos/work_dir/slaves/741e9afd-8c02-45c3-b2e2-9db1450d0832-S42316/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/c14f7e0d-0397-4811-b5f6-75b1535e2993/runs/b1fb7ea3-6ce5-4393-9bfa-0e8eb83945d1/testoutput/test-support/jtreg_closed_test_hotspot_jtreg_applications_kitchensink_Kitchensink_java/scratch/0/java.io.tmpdir/InflateAndRun.6192523753689099341.deflated.tmp (Too many open files)
[stress.process.err] 	at applications.kitchensink.process.stress.modules.StressModule.run(StressModule.java:112)
[stress.process.err] 	at java.base/java.lang.Thread.run(Thread.java:1583)
[stress.process.err] Caused by: java.io.FileNotFoundException: /opt/mach5/mesos/work_dir/slaves/741e9afd-8c02-45c3-b2e2-9db1450d0832-S42316/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/c14f7e0d-0397-4811-b5f6-75b1535e2993/runs/b1fb7ea3-6ce5-4393-9bfa-0e8eb83945d1/testoutput/test-support/jtreg_closed_test_hotspot_jtreg_applications_kitchensink_Kitchensink_java/scratch/0/java.io.tmpdir/InflateAndRun.6192523753689099341.deflated.tmp (Too many open files)
[stress.process.err] 	at java.base/java.io.FileOutputStream.open0(Native Method)
[stress.process.err] 	at java.base/java.io.FileOutputStream.open(FileOutputStream.java:289)
[stress.process.err] 	at java.base/java.io.FileOutputStream.<init>(FileOutputStream.java:230)
[stress.process.err] 	at java.base/java.io.FileOutputStream.<init>(FileOutputStream.java:179)
[stress.process.err] 	at applications.kitchensink.process.stress.modules.InflaterStressModule.deflateFile(InflaterStressModule.java:141)
[stress.process.err] 	at applications.kitchensink.process.stress.modules.InflaterStressModule.deflateAndInflate(InflaterStressModule.java:121)
[stress.process.err] 	at applications.kitchensink.process.stress.modules.InflaterStressModule.execute(InflaterStressModule.java:96)
[stress.process.err] 	at applications.kitchensink.process.stress.modules.StressModule.run(StressModule.java:99)
[stress.process.err] 	... 1 more
[stress.process.err] /applications/kitchensink/process/stress/modules/Dummy33463.java:1: error: cannot access applications.kitchensink.process.stress.modules
[stress.process.err] package applications.kitchensink.process.stress.modules;
[stress.process.err] ^
[stress.process.err]   /opt/mach5/mesos/work_dir/slaves/741e9afd-8c02-45c3-b2e2-9db1450d0832-S42316/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/c14f7e0d-0397-4811-b5f6-75b1535e2993/runs/b1fb7ea3-6ce5-4393-9bfa-0e8eb83945d1/testoutput/test-support/jtreg_closed_test_hotspot_jtreg_applications_kitchensink_Kitchensink_java/scratch/0/2.jar: Too many open files
[stress.process.err] 1 error
[stress.process.err] --------------------------------------------------------------------------------
[stress.process.err] AllocatorStressModule got uncaught exception in execute at Thu May 11 16:26:06 UTC 2023 (1683822366566)
[stress.process.err] java.lang.RuntimeException: Could not compile applications.kitchensink.process.stress.modules.Dummy33463 with source code package applications.kitchensink.process.stress.modules;
[stress.process.err] public class Dummy33463{
[stress.process.err]     public static Object result33463; 
[stress.process.err]     void compiled33463(long l) { result33463 = Long.valueOf(l); } 
[stress.process.err]     public Dummy33463() {
[stress.process.err]     for (long i = 0; i < 100_000; i++) {
[stress.process.err]             compiled33463(i); 
[stress.process.err]         }
[stress.process.err]     }
[stress.process.err] }
[stress.process.err] 	at jdk.test.lib.compiler.InMemoryJavaCompiler.compile(InMemoryJavaCompiler.java:179)
[stress.process.err] 	at applications.kitchensink.process.stress.modules.ClassLoadingHelper.generateClass(AllocatorStressModule.java:281)
[stress.process.err] 	at applications.kitchensink.process.stress.modules.ClassLoadingHelper$CustomClassLoader.findClass(AllocatorStressModule.java:319)
[stress.process.err] 	at applications.kitchensink.process.stress.modules.ClassLoadingHelper.defineNextClass(AllocatorStressModule.java:305)
[stress.process.err] 	at applications.kitchensink.process.stress.modules.AllocatorStressModule.execute(AllocatorStressModule.java:172)
[stress.process.err] 	at applications.kitchensink.process.stress.modules.StressModule.run(StressModule.java:99)
[stress.process.err] 	at java.base/java.lang.Thread.run(Thread.java:1583)
[stress.process.err] --------------------------------------------------------------------------------
[stress.process.err] Unexpected Exception in thread AllocatorStressModule.
[stress.process.err] java.lang.RuntimeException: java.lang.RuntimeException: Could not compile applications.kitchensink.process.stress.modules.Dummy33463 with source code package applications.kitchensink.process.stress.modules;
[stress.process.err] public class Dummy33463{
[stress.process.err]     public static Object result33463; 
[stress.process.err]     void compiled33463(long l) { result33463 = Long.valueOf(l); } 
[stress.process.err]     public Dummy33463() {
[stress.process.err]     for (long i = 0; i < 100_000; i++) {
[stress.process.err]             compiled33463(i); 
[stress.process.err]         }
[stress.process.err]     }
[stress.process.err] }
[stress.process.err] 	at applications.kitchensink.process.stress.modules.StressModule.run(StressModule.java:112)
[stress.process.err] 	at java.base/java.lang.Thread.run(Thread.java:1583)
[stress.process.err] Caused by: java.lang.RuntimeException: Could not compile applications.kitchensink.process.stress.modules.Dummy33463 with source code package applications.kitchensink.process.stress.modules;
[stress.process.err] public class Dummy33463{
[stress.process.err]     public static Object result33463; 
[stress.process.err]     void compiled33463(long l) { result33463 = Long.valueOf(l); } 
[stress.process.err]     public Dummy33463() {
[stress.process.err]     for (long i = 0; i < 100_000; i++) {
[stress.process.err]             compiled33463(i); 
[stress.process.err]         }
[stress.process.err]     }
[stress.process.err] }
[stress.process.err] 	at jdk.test.lib.compiler.InMemoryJavaCompiler.compile(InMemoryJavaCompiler.java:179)
[stress.process.err] 	at applications.kitchensink.process.stress.modules.ClassLoadingHelper.generateClass(AllocatorStressModule.java:281)
[stress.process.err] 	at applications.kitchensink.process.stress.modules.ClassLoadingHelper$CustomClassLoader.findClass(AllocatorStressModule.java:319)
[stress.process.err] 	at applications.kitchensink.process.stress.modules.ClassLoadingHelper.defineNextClass(AllocatorStressModule.java:305)
[stress.process.err] 	at applications.kitchensink.process.stress.modules.AllocatorStressModule.execute(AllocatorStressModule.java:172)
[stress.process.err] 	at applications.kitchensink.process.stress.modules.StressModule.run(StressModule.java:99)
[stress.process.err] 	... 1 more
[stress.process.err] Fatal error happened in module AllocatorStressModule
[Thu May 11 16:26:41 UTC 2023] (1683822401966) Stress process has been shutdown
[Thu May 11 16:26:41 UTC 2023] Execution finished.;;;","2023-05-15 10:16;stuefe;""MacOS spindumps show that it is caused by Metaspace verification code. ""

Could you post a callstack into which verification exactly is the culprit?
;;;","2023-05-16 00:53;stefank;I've attached a spindump.txt of another test that performs a lot of class loading and unloading. I did many spindumps, so I'm not 100% certain that I hadn't already removed some of the verification. I've been iteratively run spindumps and turned off verification paths to see if I can get this down to a sensible level. These are the patches I have:
https://github.com/stefank/jdk/commits/8307958_too_slow_metaspace_verification
;;;","2023-05-16 01:09;stuefe;Interesting. Your excludes look reasonable. I would remove the SOMETIMES from BlockTree and add one to FreeBlocks::verify(), that is the parent structure that also verifies the binlists.

What I don't understand is why this is an issue now. Are these tests new, or does generational ZGC do class loading different, or have the verifications gotten slower?;;;","2023-05-16 01:24;stefank;I think this is somehow triggered by Generational ZGC because it only runs class unloading in ""major"" collections. We've seen indication that we can enter a downwards spiral where *concurrent* class unloading starts to take longer times, which allows the application to load more classes, which leads to longer class unloading times, ... We need to figure out if this really is the case.;;;","2023-05-16 01:36;stuefe;And the majority of these verifications runs under the central Metaspace lock... yes, doing the SOMETIMES thing is the way to go. During the metaspace rework these verifications had been necessary, but metaspace has been very stable for some years, so we can tone them down.;;;","2023-05-16 11:24;mseledtsov;ILW = MMM = P3;;;","2023-05-22 07:32;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/14084
Date: 2023-05-22 14:22:07 +0000;;;","2023-05-25 02:05;dukebot;Changeset: 8d8153e9
Author:    Axel Boldt-Christmas <aboldtch@openjdk.org>
Date:      2023-05-25 09:03:30 +0000
URL:       https://git.openjdk.org/jdk/commit/8d8153e98a64094e6cbccc94062fcf4d9edabe3d
;;;","2023-05-25 07:30;dcubed;The fix for this bug is integrated in jdk-21+25-2115.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Prefer to PTRACE_GETREGSET instead of PTRACE_GETREGS in method 'ps_proc.c::process_get_lwp_regs',JDK-8307955,5100752,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,gli,gli,gli,2023-05-11 11:17,2023-05-22 00:54,2023-10-01 09:56,2023-05-16 20:10,,,,,,,21,hotspot,,0,,,,,,,,,,,,,,"As the man page of `ptrace` states [1], `PTRACE_GETREGS and PTRACE_GETFPREGS are not present on all architectures`, we should prefer using `PTRACE_GETREGSET` instead of `PTRACE_GETREGS` when invoking the method 'ptrace'.

The code of `ps_proc.c::process_get_lwp_regs` [2] try to use `PTRACE_GETREGS` first, and `PTRACE_GETREGSET` is a second option. It leads the `process_get_lwp_regs` fails at some special ENVs. In my local riscv-linux env, several tests failed.

The failed test is shown below:
```
serviceability/sa/ClhsdbCDSJstackPrintAll.java 
serviceability/sa/ClhsdbDumpheap.java
serviceability/sa/ClhsdbFindPC.java#no-xcomp-process 
serviceability/sa/ClhsdbJdis.java 
serviceability/sa/ClhsdbJstack.java#id1 
serviceability/sa/ClhsdbPrintAs.java
serviceability/sa/ClhsdbSource.java 
serviceability/sa/ClhsdbThreadContext.java 
serviceability/sa/ClhsdbWhere.java 
serviceability/sa/TestClhsdbJstackLock.java 
serviceability/sa/TestJhsdbJstackLock.java 
```

The log of the failed test `serviceability/sa/ClhsdbCDSJstackPrintAll.java`:
```
java.lang.RuntimeException: Test ERROR java.lang.RuntimeException: 'LingeredApp.steadyState' missing from stdout/stderr
	at ClhsdbCDSJstackPrintAll.main(ClhsdbCDSJstackPrintAll.java:117)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
	at java.base/java.lang.reflect.Method.invoke(Method.java:578)
	at com.sun.javatest.regtest.agent.MainWrapper$MainThread.run(MainWrapper.java:125)
	at java.base/java.lang.Thread.run(Thread.java:1583)
Caused by: java.lang.RuntimeException: 'LingeredApp.steadyState' missing from stdout/stderr
	at jdk.test.lib.process.OutputAnalyzer.shouldMatch(OutputAnalyzer.java:340)
	at ClhsdbLauncher.runCmd(ClhsdbLauncher.java:166)
	at ClhsdbLauncher.run(ClhsdbLauncher.java:203)
	at ClhsdbCDSJstackPrintAll.main(ClhsdbCDSJstackPrintAll.java:113)
	... 4 more

JavaTest Message: Test threw exception: java.lang.RuntimeException: Test ERROR java.lang.RuntimeException: 'LingeredApp.steadyState' missing from stdout/stderr
```

[1] https://man7.org/linux/man-pages/man2/ptrace.2.html
[2] https://github.com/openjdk/jdk/blob/5d6cce0f8543e8ae966798aad685b190cc8101aa/src/jdk.hotspot.agent/linux/native/libsaproc/ps_proc.c#L148",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"2023-05-11 18:01;gli;ClhsdbCDSJstackPrintAll-after-patch.jtr;https://bugs.openjdk.org/secure/attachment/103813/ClhsdbCDSJstackPrintAll-after-patch.jtr","2023-05-11 18:01;gli;ClhsdbCDSJstackPrintAll-before-patch.jtr;https://bugs.openjdk.org/secure/attachment/103814/ClhsdbCDSJstackPrintAll-before-patch.jtr",,,,,,,,,,,,,,,,,,,,,"0|i31hr7:",9223372036854775807,b23,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@714e388c,,,,,,,,,"2023-05-11 11:40;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/13939
Date: 2023-05-11 18:32:36 +0000;;;","2023-05-11 13:28;cjplummer;Can you include some more info from the .jtr file? The exception you've included is from the main test that checks the output of the ""jhsdb clhsdb"" command. It'd be interested in seeing what that output looks like.;;;","2023-05-11 18:06;gli;I attach the log files before (`ClhsdbCDSJstackPrintAll-before-patch.jtr`) and after (`ClhsdbCDSJstackPrintAll-after-patch.jtr`) my patch.

The main difference is the output of the thread `SteadyStateThread` when using `jstack -v`. It reports `WARNING: getThreadIntegerRegisterSet0: get_lwp_regs failed for lwp`.

original test (before my patch):
```
""SteadyStateThread"" #19 prio=5 tid=0x0000003fac19f250 nid=3640 waiting for monitor entry [0x0000003f579fd000]
   java.lang.Thread.State: BLOCKED (on object monitor)
   JavaThread state: _thread_blocked
WARNING: getThreadIntegerRegisterSet0: get_lwp_regs failed for lwp (3640)
 - jdk.test.lib.apps.LingeredApp$1.run() @bci=4, line=573, pc=0x0000003f9bd1e3e2, Method*=0x0000003f78404518 (Interpreted frame)
```

after my patch:
```
""SteadyStateThread"" #19 prio=5 tid=0x0000003f7c19f250 nid=226624 waiting for monitor entry [0x0000003f2f5fd000]
   java.lang.Thread.State: BLOCKED (on object monitor)
   JavaThread state: _thread_blocked
 - jdk.test.lib.apps.LingeredApp.steadyState(java.lang.Object) @bci=8, line=567, pc=0x0000003f6bd30a26, Method*=0x0000003f48403ae0 (Interpreted frame)
	- waiting to lock <0x00000000e5523de0> (a java.lang.Object)
 - jdk.test.lib.apps.LingeredApp$1.run() @bci=4, line=573, pc=0x0000003f6bd1e3e2, Method*=0x0000003f48404518 (Interpreted frame)
```;;;","2023-05-16 20:10;dukebot;Changeset: 2f1c6548
Author:    Guoxiong Li <gli@openjdk.org>
Date:      2023-05-17 03:07:56 +0000
URL:       https://git.openjdk.org/jdk/commit/2f1c65486b1e584f9c4a2eb7af2414d032a02748
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Update string template regression tests to be robust on release updates,JDK-8307954,5100751,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,darcy,darcy,darcy,2023-05-11 11:01,2023-05-17 16:51,2023-10-01 09:56,2023-05-11 11:25,21,,,,,,21,tools,,0,,,,,,,,,,,,,,"Various string template tests such as

test/langtools/tools/javac/diags/examples/StringTemplateUnclosedTextBlock.java

hard-code a source value which runs afoul of JDK updates.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8285932,JDK-8306584,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i31hqz:",9223372036854775807,b23,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4dca67bd,,,,,,,,,"2023-05-11 11:19;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/13936
Date: 2023-05-11 18:13:35 +0000;;;","2023-05-11 11:25;dukebot;Changeset: 29b8242e
Author:    Joe Darcy <darcy@openjdk.org>
Date:      2023-05-11 18:22:10 +0000
URL:       https://git.openjdk.org/jdk/commit/29b8242e07b3e85887e916bc76f37eefb4403e1d
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
[AIX] C locale's font setting was changed by JEP 400,JDK-8307953,5100749,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,itakiguchi,itakiguchi,itakiguchi,2023-05-11 10:28,2023-06-12 20:50,2023-10-01 09:56,2023-06-06 15:21,18,19,20,21,,,21,client-libs,,0,oraclejdk-na,,,,,,,,,,,,,"On AIX, lib/fontconfig.bfc file is used to find font setting.
I ran SwingSet2 List demo program with AIX C locale.
JDK21's line spacing (sw-1.jpg) is larger then JDK17 (sw-2.jpg).
When I used -Dfile.encoding=COMPAT option on AIX C locale, SwingSet2 worked fine as expected.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"2023-05-11 10:27;itakiguchi;sw-1.jpg;https://bugs.openjdk.org/secure/attachment/103812/sw-1.jpg","2023-05-11 10:27;itakiguchi;sw-2.jpg;https://bugs.openjdk.org/secure/attachment/103811/sw-2.jpg",,,,,,ppc,,,,,,,18,,aix,,,,,,"0|i31hqj:",9223372036854775807,b26,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4b09ce31,,,,,,,,,"2023-05-11 20:09;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/13937
Date: 2023-05-11 18:23:45 +0000;;;","2023-06-06 15:21;dukebot;Changeset: a08c5cb3
Author:    Ichiroh Takiguchi <itakiguchi@openjdk.org>
Date:      2023-06-06 22:20:03 +0000
URL:       https://git.openjdk.org/jdk/commit/a08c5cb3f1be7a20c8f955951d1605bb8b1c1aa4
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Build of Client VM is broken after JDK-8307058,JDK-8307945,5100738,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,jiefu,jiefu,jiefu,2023-05-11 08:07,2023-05-17 16:52,2023-10-01 09:56,2023-05-11 15:36,21,,,,,,21,hotspot,,0,tencent-interest,zgc,,,,,,,,,,,,"* For target hotspot_variant-client_libjvm_objs_zBarrierSetAssembler_x86.o:
/data/jdk/src/hotspot/cpu/x86/gc/z/zBarrierSetAssembler_x86.cpp: In function 'bool is_c2_compilation()': 
/data/jdk/src/hotspot/cpu/x86/gc/z/zBarrierSetAssembler_x86.cpp:367:47: error: invalid use of incomplete type 'class CompileTask'
  367 |   return task != nullptr && is_c2_compile(task->comp_level());
      |                                               ^~
In file included from /data/jdk/src/hotspot/share/code/codeCache.hpp:29,
                 from /data/jdk/src/hotspot/share/gc/z/zBarrier.inline.hpp:29,
                 from /data/jdk/src/hotspot/cpu/x86/gc/z/zBarrierSetAssembler_x86.cpp:29:
/data/jdk/src/hotspot/share/code/nmethod.hpp:30:7: note: forward declaration of 'class CompileTask'
   30 | class CompileTask;
      |       ^~~~~~~~~~~
/data/jdk/src/hotspot/cpu/x86/gc/z/zBarrierSetAssembler_x86.cpp: At global scope:
/data/jdk/src/hotspot/cpu/x86/gc/z/zBarrierSetAssembler_x86.cpp:323:12: error: 'int store_fast_path_check_size(MacroAssembler*, Address, bool, Label&)' defined but not used [-Werror=unused-function]
  323 | static int store_fast_path_check_size(MacroAssembler* masm, Address ref_addr, bool is_atomic, Label& medium_path) {
      |            ^~~~~~~~~~~~~~~~~~~~~~~~~~
cc1plus: all warnings being treated as errors

* All command lines available in /data/jdk/build/linux-x86_64-client-fastdebug/make-support/failure-logs.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8307058,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i31ho3:",9223372036854775807,b23,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6b00f96c,,,,,,,,,"2023-05-11 08:22;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/13934
Date: 2023-05-11 15:13:15 +0000;;;","2023-05-11 15:36;dukebot;Changeset: ce590772
Author:    Jie Fu <jiefu@openjdk.org>
Date:      2023-05-11 22:35:40 +0000
URL:       https://git.openjdk.org/jdk/commit/ce5907727e835cb2bdf9362d7c3ad249cc29d5e7
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
ClassFileDumper should only load java.nio.file.Path if enabled,JDK-8307944,5100737,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,mchung,rriggs,rriggs,2023-05-11 07:55,2023-06-04 20:15,2023-10-01 09:56,2023-05-30 14:04,21,,,,,,21,core-libs,,0,,,,,,,,,,,,,,"When the shared ClassFileDumper (JDK-8304846) was added, the sequence of classes loaded changed and more classes are loaded. It would be desirable if there was little/no extra overhead when not configured to dump classes.

The use of java.nio.file.Path in MethodHandleStatics causes the file system to be loaded earlier than before. 
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8304846,JDK-8308960,JDK-8307570,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i31hnv:",9223372036854775807,b25,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@1cfeb1de,,,,,,,,,"2023-05-24 20:18;mchung;Both JDK-8307570 and  JDK-8306678 change the sequence of classes loaded during startup.  JDK-8307570 causes ClassFileDumper to have a dependency on java.nio.file.Path, i.e. MethodHandleStatics causes java.nio.file.Path and other file system classes to be loaded.   In addition, FilePermission class initialization will also cause the default file system to be initialized (ClassFileDumper uses the limited doPrivileged with FilePermission and PropertyPermission).

JDK-8306678 causes ClassLoaderHelper to call OperatingSystem::version on macOS and OperatingSystem::<clinit> calls Enum::valueOf which in turns invokes the values method of jdk.internal.util.Version enum class via core reflection which will cause invocation of MethodHandle.   This may cause additional lambda forms to be generated and loaded (set -Djdk.invoke.MethodHandle.dumpMethodHandleInternals to check).

Here is the comparison of the number of loaded classes of running java -version:

     431 jdk-21+16.startup.loaded-classes
     473 jdk-21+17.startup.loaded-classes
     485 master.startup.loaded-classes
     527 patch.startup.loaded-classes
     437 patch+no-enum-valueOf.startup.loaded-classes

where ""patch"" changes ClassFileDumper to use java.io.File to validate if the given path is a writeable directory if exists.
Apparently additional lambda forms are spinned and cause more classes to be loaded (need to understand why no LFs are spinned without this patch).

""patch+no-enum-valueOf"" includes another patch in OperatingSystem::initOS not to use OperatingSystem.valueOf; instead map manually from the name to the enum constant that makes 90 fewer classes to be loaded.
;;;","2023-05-25 13:44;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/14160
Date: 2023-05-25 20:23:27 +0000;;;","2023-05-30 14:04;dukebot;Changeset: de7fd1c3
Author:    Mandy Chung <mchung@openjdk.org>
Date:      2023-05-30 21:01:12 +0000
URL:       https://git.openjdk.org/jdk/commit/de7fd1c3061cfbfdbd5d7cc2b1ba0ee8d432ee0a
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Class space argument processing can be simplified,JDK-8307935,5100725,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,stuefe,stuefe,stuefe,2023-05-11 05:47,2023-05-17 16:53,2023-10-01 09:56,2023-05-12 23:38,21,,,,,,21,hotspot,,0,metaspace,,,,,,,,,,,,,"JDK-8299229 removed the last scenario that tied compressed klass pointers to compressed oops.

In argument.cpp, we can therefore remove comments that refer to this old dependency.

Furthermore, in `Arguments::set_use_compressed_klass_ptrs()`, we can remove the following code pieces:

```
  if (FLAG_IS_DEFAULT(UseCompressedClassPointers)) {
    FLAG_SET_ERGO(UseCompressedClassPointers, true);
  }
```

I think this is a remnant from the time where compressed class pointers depended on compressed oops. We can now just set compressed klass pointers to true for 64-bit platforms, which has the same effect as above code.

```
  // Check the CompressedClassSpaceSize to make sure we use compressed klass ptrs.
  if (UseCompressedClassPointers) {
    if (CompressedClassSpaceSize > KlassEncodingMetaspaceMax) {
      warning(""CompressedClassSpaceSize is too large for UseCompressedClassPointers"");
      FLAG_SET_DEFAULT(UseCompressedClassPointers, false);
    }
  }
```

This coding is not needed, since the CompressedClassSpaceSize option is range-checked and capped at 3GB. KlassEncodingMetaspaceMax is 32GB, so we will never hit above condition. Moreover, even if that were not the case the check would not be sufficient either, since the encoding range size is shared between CDS archive and class space, and depends on certain alignment values too. To reduce complexity, we may just remove this part.
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,generic,,,,,,"0|i31hl7:",9223372036854775807,b23,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,,,"2023-05-11 06:07;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/13931
Date: 2023-05-11 12:53:59 +0000;;;","2023-05-12 23:38;dukebot;Changeset: e54051ae
Author:    Thomas Stuefe <stuefe@openjdk.org>
Date:      2023-05-13 06:35:17 +0000
URL:       https://git.openjdk.org/jdk/commit/e54051ae9e1cdaa51a2d569227996a96b79bfa0d
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
JRobot.moveMouseTo must access component on EDT,JDK-8307934,5100724,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,rkannathpari,aivanov,aivanov,2023-05-11 05:47,2023-07-12 13:47,2023-10-01 09:56,2023-07-03 03:34,11,17,21,9,,,22,client-libs,,0,cssn23_05_02,cssn23_06_01,sustaining,,,,,,,,,,,"The implementation of JRobot.moveMouseTo(Component c) calls getLocationOnScreen() and getSize() on the thread that called the method which may be not EDT. Therefore the method should be updated to access the component's location on EDT.

Other methods which access components should do the same.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8309194,JDK-8309195,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i31hkz:",9223372036854775807,b05,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@568a5b31,,,,,,,,,"2023-06-07 06:01;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/14354
Date: 2023-06-07 12:54:54 +0000;;;","2023-07-03 03:34;dukebot;Changeset: 9d2e0b2a
Author:    Renjith Kannath Pariyangad <renjith.kannath.pariyangad@oracle.com>
Committer: Alexey Ivanov <aivanov@openjdk.org>
Date:      2023-07-03 10:32:47 +0000
URL:       https://git.openjdk.org/jdk/commit/9d2e0b2a80084f1769e8dd40f11a39eadb54e8b3
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
"C2: ""malformed control flow"" with irreducible loop",JDK-8307927,5100717,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,roland,roland,roland,2023-05-11 05:10,2023-07-12 13:40,2023-10-01 09:56,2023-06-29 00:45,11,17,19,20,21,,22,hotspot,,0,c2,irreducibility,oracle-triage-21,,,,,,,,,,,"See attached test case. The test method has a loop nest with 2 loops. The outer most loop is an irreducible loop. The safepoints for both loops are in the inner loop. The one for the irreducible loop is not marked as required (because IdealLoopTree::check_safepts skips irreducible loops) and so is removed. At CCP, the backedge of the inner loop is found to be never taken, one of the conditions to enter the irreducible loop is never taken and the backedge for the irreducible loop is found to be always taken. What's left is a single node infinite loop which is then eliminated as dead code.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"2023-05-11 05:10;roland;MalformedControlIrreducibleLoop.jasm;https://bugs.openjdk.org/secure/attachment/103806/MalformedControlIrreducibleLoop.jasm","2023-05-11 05:10;roland;TestMalformedControlIrreducibleLoop.java;https://bugs.openjdk.org/secure/attachment/103807/TestMalformedControlIrreducibleLoop.java",,,,,,,,,,,,,,,,,,,,,"0|i31hjf:",9223372036854775807,b05,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2023-05-11 06:30;chagedorn;ILW = Malformed graph assert with irreducible loop only affecting debug build, single test case, disable compilation of affected method = MLM = P4;;;","2023-06-16 09:14;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/14522
Date: 2023-06-16 15:59:40 +0000;;;","2023-06-29 00:45;dukebot;Changeset: 690d6269
Author:    Roland Westrelin <roland@openjdk.org>
Date:      2023-06-29 07:43:46 +0000
URL:       https://git.openjdk.org/jdk/commit/690d6269954cbacea5f0e64653a49e4fcf986bd9
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
javadoc for MemorySegment::reinterpret has duplicate restricted method paragraph,JDK-8307911,5100695,Bug,Closed,JDK,JDK,software,duke,,,P4,Fixed,mcimadamore,mcimadamore,mcimadamore,2023-05-11 02:58,2023-08-08 10:31,2023-10-01 09:56,2023-05-12 09:18,21,,,,,,21,core-libs,,0,foreign-memaccess+abi,,,,,,,,,,,,,"The javadoc for MemorySegment::reinterpret(Arena arena, Consumer<MemorySegment>) contains the ""restricted methods"" para twice.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i31hej:",9223372036854775807,b23,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@28ce6b78,,,,,,,Verified,,"2023-05-11 03:06;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/13926
Date: 2023-05-11 10:00:39 +0000;;;","2023-05-12 09:18;dukebot;Changeset: 6ebea897
Author:    Maurizio Cimadamore <mcimadamore@openjdk.org>
Date:      2023-05-12 16:18:00 +0000
URL:       https://git.openjdk.org/jdk/commit/6ebea8973feb08a7443d8d86ff52f453dc4aec43
;;;","2023-08-08 10:31;bhuang;Verified that changes persist in JDK 21 b26.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
(fs) Files.createSymbolicLink throws less specific exception when in developer mode and file already exists,JDK-8307887,5100627,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,bpb,webbuggrp,webbuggrp,2023-05-10 11:05,2023-06-12 20:48,2023-10-01 09:56,2023-06-06 08:16,13,17,20,21,,,21,core-libs,,0,dcsaw,noreg-hard,reproducer-yes,webbug,,,,,,,,,,"ADDITIONAL SYSTEM INFORMATION :
Windows 10 > 1703

A DESCRIPTION OF THE PROBLEM :
The solution for issue JDK-8221852 prevents the actual error from symlink creation from being relayed to the user in the mentioned environment.

The exception from the second attempt at symlink creation, the one with the flag allowing symlinks without elevation, is discarded unconditionally. However, Windows *appears* to check the flag/privileges situation first, and only then looks into whether the target already exists.

Thus, the exception from the second attempt should only be discarded if it is either ERROR_PRIVILEGE_NOT_HELD (developer mode not enabled) or ERROR_INVALID_PARAMETER (flag not supported). In any other case, the new error should be relayed to the calling code instead of the original one.

See problematic change at: https://github.com/openjdk/jdk/commit/5952e2bc6496e349874d9f8748b1bfda9a7e4cc4#diff-70b8da266a5d031447f4f390981470464c400a0b012591788f17f19ca19d336fR948

I also checked in the most recent jdk-21-ea build, and the problem persists. The symlink creation code on Windows seems unchanged since the mentioned commit.

STEPS TO FOLLOW TO REPRODUCE THE PROBLEM :
1. Create two files A and B by any means
2. Call Files.createSymbolicLink with the paths of A and B

EXPECTED VERSUS ACTUAL BEHAVIOR :
EXPECTED -
Exception FileAlreadyExistsException is thrown, stating that A (the would-be link) already exists.
ACTUAL -
On Windows, the exception is FileSystemException (stating that the client is missing a required privilege), even when developer mode is enabled. The actual exception is lost.

---------- BEGIN SOURCE ----------
import java.nio.file.Files;
import java.nio.file.Path;

public class Test {
    public static void main(String[] args) throws Exception {
        final var pA = Files.createTempFile(""link"", null);
        final var pB = Files.createTempFile(""target"", null);
        
        try {
            Files.createSymbolicLink(pA, pB);
        } catch (java.nio.file.FileAlreadyExistsException e) {
            System.out.println(""OK"");
        }
    }
}

---------- END SOURCE ----------

CUSTOMER SUBMITTED WORKAROUND :
The only workaround I have found is to manually check whether the target exists beforehand, but this is naturally racy.

FREQUENCY : always


",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8221852,,,,,"2023-05-11 00:39;tongwan;Test.java;https://bugs.openjdk.org/secure/attachment/103799/Test.java",,,,,,,x86_64,,,,,,,,,windows_10,,,,,,"0|i31gzf:",9223372036854775807,b26,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@674604a9,,,,,,,,,"2023-05-11 00:03;alanb;FileAlreadyExistsException is an optional specific exception, meaning an implementation isn't require to throw this exception when the file already exists. That said, we may be able to do better here if the retry with SYMBOLIC_LINK_FLAG_ALLOW_UNPRIVILEGED_CREATE returns a useful error.;;;","2023-05-11 00:44;tongwan;The observations on Windows 10:
JDK 8: Failed, Exception observed.
JDK 11: Failed.
JDK 13: Failed.
JDK 17: Failed.
JDK 20: Failed.
JDK 21ea+5: Failed.;;;","2023-06-01 13:16;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/14255
Date: 2023-06-01 01:39:16 +0000;;;","2023-06-06 08:16;dukebot;Changeset: d709c25c
Author:    Brian Burkhalter <bpb@openjdk.org>
Date:      2023-06-06 15:14:57 +0000
URL:       https://git.openjdk.org/jdk/commit/d709c25cbfdb0be007d3f800f7eddccce965809a
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
"com/sun/jdi/ConnectedVMs.java fails with ""Invalid debuggee exitValue: 0""",JDK-8307885,5100672,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,cjplummer,cjplummer,cjplummer,2023-05-10 23:06,2023-07-20 16:44,2023-10-01 09:56,2023-05-11 10:10,21,,,,,,21,core-svc,,0,intermittent,noreg-self,tier4,tier7,,,,,,,,,,"After JDK-8306758, this failure started popping up.

----------System.out:(10/781)----------
create Kill
Testing Kill
vmOpts: '-Xmx768m -XX:MaxRAMPercentage=1.78571 -Dtest.boot.jdk=/scratch/cplummer/jib/install/jdk/20/36/bundles/linux-x64/jdk-20_linux-x64_bin.tar.gz/jdk-20 -Djava.io.tmpdir=/scratch/cplummer/ws/jdk/jdk.clean2/build/linux-x64-debug/test-support/jtreg_open_test_jdk_com_sun_jdi_ConnectedVMs_java/tmp -Xcomp -XX:+CreateCoredumpOnCrash -ea -esa -XX:CompileThreshold=100 -XX:+UnlockExperimentalVMOptions -server -XX:-TieredCompilation -ea -esa'
javaOpts: ''
JVM version:21-internal
JDI version: 21.0
JVM description: Java Debug Interface (Reference Implementation) version 21.0 
Java Debug Wire Protocol (Reference Implementation) version 21.0
JVM Debug Interface version 21.0
JVM version 21-internal (Java HotSpot(TM) 64-Bit Server VM, compiled mode, sharing)
----------System.err:(15/778)----------
java.lang.RuntimeException: Invalid debuggee exitValue: 0
	at TestScaffold.waitForVMDisconnect(TestScaffold.java:750)
	at TestScaffold.resumeToVMDisconnect(TestScaffold.java:978)
	at ConnectedVMs.runTests(ConnectedVMs.java:117)
	at TestScaffold.startTests(TestScaffold.java:434)
	at ConnectedVMs.main(ConnectedVMs.java:51)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
	at java.base/java.lang.reflect.Method.invoke(Method.java:578)
	at com.sun.javatest.regtest.agent.MainActionHelper$AgentVMRunnable.run(MainActionHelper.java:333)
	at java.base/java.lang.Thread.run(Thread.java:1583)

",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8306758,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i31h9f:",9223372036854775807,b23,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@3397f701,,,,,,,,,"2023-05-10 23:09;cjplummer;2 failures so far. VM Options are almost identical:

-Xcomp -XX:+CreateCoredumpOnCrash -ea -esa -XX:CompileThreshold=100 -XX:+UnlockExperimentalVMOptions -server -XX:-TieredCompilation
-Xcomp -XX:+CreateCoredumpOnCrash -ea -esa -XX:CompileThreshold=100 -XX:+UnlockExperimentalVMOptions -server -XX:+TieredCompilation

Both are with linux-x64-debug builds.;;;","2023-05-10 23:35;cjplummer;I was able to reproduce the locally with the above options. The ""kill"" version of the test is suppose to exit with exitValue 143, but instead is exiting with 0. This test does a Process.destroy(), which results in a SIGTERM of the debuggee, followed immediately by a vm.resume() to resume all debuggee threads. I described in JDK-8306758 how there can be a race that decides whether the test exits with the SIGTERM, or the main thread manages to exit cleanly before the VM finishes handling the SIGTERM. This is why you can see 0 or 143 as the exitValue.

I added a sleep to the debuggee main thread to give the VM a chance to exit with the SIGTERM before the main thread exits. This was working well, but apparently not with -Xcomp. The debuggee is only doing a 5 second sleep, but that appears to not be long enough. There might be a fair amount of java code being executed for the first time to handle the SIGTERM, and that is allowing the main thread to finish the sleep and exit first.;;;","2023-05-10 23:55;cjplummer;There are a few choices on how to address this issue:

1. Use a longer sleep time (10 seconds seems to have fixed the issue), but this adds to the run time of the tests (it's actually run 4 times using @driver), and it's hard to say how long of a sleep is enough for all systems, since slower systems will need a longer sleep time.
2. Find some way to block the debuggee indefinitely, so the SIGTERM can always complete. The would require some complex debugger <--> debuggee communication support that we don't currently have for TestScaffold. Usually breakpoints are used for some simple communication of current state, but that requires keeping the debuggee suspended, which I don't think we want to do for this test.
3. Exclude this test with -Xcomp. I don't think this is a good solution since the test could use -Xcomp testing.
4. Allow 0 or 143 as an exitValue.

4 is by far the easiest, so I'm going with it. Although it would be nice to make it so the debuggee always exits with 143, its not really a requirement for this test, and is not really what the test is even trying to test. It just want's to verify that there is no issue with terminating the debugging session when using Process.destroy().;;;","2023-05-11 00:26;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/13923
Date: 2023-05-11 07:19:47 +0000;;;","2023-05-11 10:10;dukebot;Changeset: 489658db
Author:    Chris Plummer <cjplummer@openjdk.org>
Date:      2023-05-11 17:07:27 +0000
URL:       https://git.openjdk.org/jdk/commit/489658dbd2cd518a17611dcc01c0109046cf97a8
;;;","2023-05-11 13:42;dcubed;The fix for this bug is integrated in jdk-21+23-1905.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Invalid is_in_any_VTMS_transition() check in post_dynamic_code_generated_while_holding_locks,JDK-8307865,5100647,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,lmesnik,lmesnik,lmesnik,2023-05-10 17:58,2023-05-24 23:10,2023-10-01 09:56,2023-05-18 16:59,21,,,,,,21,hotspot,,0,,,,,,,,,,,,,,"Method post_dynamic_code_generated_while_holding_locks()
register stubs and might be called during VTMT transitions. 
At least it is called in tmp VTMT transition, and stubs might be generated during standard VTMT transition.

The method doesn't post event bug just register stub for later posting so it might be called during transition.



",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i31h3v:",9223372036854775807,b24,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@661b156a,,,,,,,,,"2023-05-10 18:13;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/13921
Date: 2023-05-11 01:02:48 +0000;;;","2023-05-18 16:59;dukebot;Changeset: 42948c04
Author:    Leonid Mesnik <lmesnik@openjdk.org>
Date:      2023-05-18 23:57:10 +0000
URL:       https://git.openjdk.org/jdk/commit/42948c04b90d3c01c22d00f684e7dc0129b66abd
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
validate-source fails after JDK-8306758,JDK-8307857,5100633,Bug,Resolved,JDK,JDK,software,duke,,,P1,Fixed,dcubed,dcubed,dcubed,2023-05-10 12:24,2023-06-29 16:53,2023-10-01 09:56,2023-05-10 12:40,21,,,,,,21,core-svc,,0,noreg-build,regression,tier1,,,,,,,,,,,"[2023-05-10T19:15:48,048Z] BAD COPYRIGHT LINE: /opt/mach5/mesos/work_dir/slaves/741e9afd-8c02-45c3-b2e2-9db1450d0832-S100149/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/8e96bf80-d821-4134-8756-55d064be4341/runs/20fdb460-43b5-46cf-a1f4-0e8ca000d1e7/workspace/open/test/jdk/com/sun/jdi/InstTarg.java
[2023-05-10T19:15:48,048Z] 1 header format error(s).
[2023-05-10T19:15:48,051Z] HandleGplSource.gmk:146: recipe for target '/opt/mach5/mesos/work_dir/slaves/741e9afd-8c02-45c3-b2e2-9db1450d0832-S100149/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/8e96bf80-d821-4134-8756-55d064be4341/runs/20fdb460-43b5-46cf-a1f4-0e8ca000d1e7/workspace/build/validate-source/support/header_validated/_test_jdk_validated' failed
[2023-05-10T19:15:48,051Z] make[3]: *** [/opt/mach5/mesos/work_dir/slaves/741e9afd-8c02-45c3-b2e2-9db1450d0832-S100149/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/8e96bf80-d821-4134-8756-55d064be4341/runs/20fdb460-43b5-46cf-a1f4-0e8ca000d1e7/workspace/build/validate-source/support/header_validated/_test_jdk_validated] Error 1
[2023-05-10T19:15:48,060Z] /opt/mach5/mesos/work_dir/slaves/741e9afd-8c02-45c3-b2e2-9db1450d0832-S100149/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/8e96bf80-d821-4134-8756-55d064be4341/runs/20fdb460-43b5-46cf-a1f4-0e8ca000d1e7/workspace/closed/make/Main.gmk:70: recipe for target 'validate-headers' failed",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8306758,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i31h0r:",9223372036854775807,b22,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@3397f701,,,,,,,,,"2023-05-10 12:30;dcubed;Here's the context diff for the proposed fix:

$ git diff
diff --git a/test/jdk/com/sun/jdi/InstTarg.java b/test/jdk/com/sun/jdi/InstTarg.java
index c75f5540e7f..39c3fc4034b 100644
--- a/test/jdk/com/sun/jdi/InstTarg.java
+++ b/test/jdk/com/sun/jdi/InstTarg.java
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2000, 2023 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2000, 2023, Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it;;;","2023-05-10 12:37;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/13916
Date: 2023-05-10 19:32:35 +0000;;;","2023-05-10 12:40;dukebot;Changeset: df90df29
Author:    Daniel D. Daugherty <dcubed@openjdk.org>
Date:      2023-05-10 19:38:24 +0000
URL:       https://git.openjdk.org/jdk/commit/df90df298e4183f5328b88ff0af91ba96fb2510d
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
SequencedMap view method specification and implementation adjustments,JDK-8307840,5100614,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,smarks,kganapureddy,kganapureddy,2023-05-10 09:00,2023-06-12 20:49,2023-10-01 09:56,2023-06-06 10:04,21,,,,,,21,core-libs,,0,conformance,,,,,,,,,,,,,"Observed that SequencedMap : SequencedXXX   default methods implementation requirements  not correctly matching the behavior :

For example :
“Implementation Requirements:
The implementation in this interface returns a SequencedSet implementation that delegates all operations either to this map or to this map's Map.keySet(), except for its reversed method, which instead returns the result of calling sequencedKeySet on this map's reverse-ordered view.
 
Use case – invoking the “add” on the returned SequencedSet  
Expected –  invocation of “add” method on instance returned by Map.keySet().
Actual - java.lang.UnsupportedOperationException
",,,,,,,,,,,,,,,,,,,,,JDK-8280836,,JDK-8309239,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i31gwj:",9223372036854775807,b26,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@73bf8bbe,,,,,,,,,"2023-05-10 09:17;smarks;This applies to the three SequencedMap methods that return sequenced views, namely, sequencedKeySet(), sequencedValues(), and sequencedEntrySet().

The implementation requirements for all of them should state:

* a reference to the corresponding non-sequenced view of the underlying map is obtained once via the appropriate method

* methods add() and addAll() throw UnsupportedOperationException

* the reversed() method calls reversed() on the underlying map and then returns the result of calling sequencedX() on the reversed view

* all other methods are delegated to the corresponding method of the non-sequenced view previously obtained.

Alternatively, instead of obtaining a reference to the underlying view collection once and reusing it, it might be better to obtain the underlying view collection each time. Most implementations will cache and return the same object; but fetching it each time gives more flexibility to the underlying implementation. This is not only a spec change but a slight change in behavior. It should be specified though so that implementations can rely on these behaviors.

This could be accomplished by changing the view field of AbstractMap.ViewCollection into an abstract view() method returning Collection<E>, removing the constructor argument, and adjusting the delegating methods' implementations.;;;","2023-05-10 20:47;kganapureddy;[~smarks] I believe these spec changes would be part of CSR ?;;;","2023-05-10 21:02;smarks;[~kganapureddy] Yes these spec changes will definitely be covered by a CSR.;;;","2023-05-31 13:43;smarks;I'm adjusting the specification and implementing it as described in the ""Alternatively"" paragraph of my earlier comment. That is, the map's corresponding non-sequenced view collection is obtained each time instead of caching it at creation time.;;;","2023-06-01 13:34;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/14267
Date: 2023-06-01 16:18:12 +0000;;;","2023-06-06 10:04;dukebot;Changeset: 95261908
Author:    Stuart Marks <smarks@openjdk.org>
Date:      2023-06-06 17:02:32 +0000
URL:       https://git.openjdk.org/jdk/commit/952619086358326c2fb3fcbada654fc2edd09f07
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
"In the case of two methods with Record Patterns, the second one contains a line number from the first method",JDK-8307814,5100584,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,jlahoda,godin,godin,2023-05-10 05:22,2023-05-28 20:48,2023-10-01 09:56,2023-05-23 04:59,20,21,,,,,21,tools,,0,jacoco-found,,,,,,,,,,,,,"Using

openjdk version ""21-ea"" 2023-09-19
OpenJDK Runtime Environment (build 21-ea+21-1778)
OpenJDK 64-Bit Server VM (build 21-ea+21-1778, mixed mode, sharing)

execution of

javac --enable-preview --release 21 Example.java
javap -v -p Example.class

shows that method ""m2"" contains a line number from the method ""m1"".",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"2023-05-10 05:20;godin;Example.java;https://bugs.openjdk.org/secure/attachment/103792/Example.java","2023-05-10 05:20;godin;javap.txt;https://bugs.openjdk.org/secure/attachment/103791/javap.txt",,,,,,generic,,,,,,,,,generic,,,,,,"0|i31gpv:",9223372036854775807,b24,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4dca67bd,,,,,,,,,"2023-05-22 08:18;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/14087
Date: 2023-05-22 15:12:16 +0000;;;","2023-05-23 04:59;dukebot;Changeset: 1cfb265b
Author:    Jan Lahoda <jlahoda@openjdk.org>
Date:      2023-05-23 11:47:00 +0000
URL:       https://git.openjdk.org/jdk/commit/1cfb265befa497e4c1c9a75c0fb576bb75adea70
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
[TEST] compilation of TimeoutInErrorHandlingTest fails after backport of JDK-8303861,JDK-8307811,5100580,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,apavlyutkin,apavlyutkin,apavlyutkin,2023-05-10 04:07,2023-06-06 18:02,2023-10-01 09:56,2023-05-12 03:36,11,,,,,,11.0.20,hotspot,,0,jdk11u-fix-request,jdk11u-fix-yes,,,,,,,,,,,,Applied patch for JDK-8303861 from jdk17 did not contain definition of ERROR_LOG_TIMEOUT member cuz it was introduced before by another changeset. The problem was not detected on itegration of the backport because the tests are selected only for debug VM build,,,,,,,,,,,JDK-8309573,,,,,,,,,,,,,,,,,,,,,JDK-8303861,,,,,,,,,,,,,,,,generic,,,,,,,,,generic,,,,,,"0|i31goz:",9223372036854775807,b03,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@78d03d9a,,,,,,,,,"2023-05-10 04:48;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk11u-dev/pull/1882
Date: 2023-05-10 11:42:25 +0000;;;","2023-05-11 01:27;apavlyutkin;Fix request (11u)

The one fixes compilation of  TimeoutInErrorHandlingTest.java broken during backporting of JDK-8303861. 

Verification/regression (amd64/LTS20.04): test/hotspot/jtreg/runtime/ErrorHandling on FASTDEBUG VM build.

P.S.: the failure was caused by missing a little piece of delta related to JDK-8188872 that was fixed in 14 (no backports). Does backporting of JDK-8188872 to jdk11 look reasonable?;;;","2023-05-12 03:36;dukebot;Changeset: 0ef2e112
Author:    Alexey Pavlyutkin <apavlyutkin@azul.com>
Committer: Yuri Nesterenko <yan@openjdk.org>
Date:      2023-05-12 10:34:38 +0000
URL:       https://git.openjdk.org/jdk11u-dev/commit/0ef2e112eb2feaab9216d75cb6fe240d58e02d5c
;;;","2023-05-17 14:06;dukebot;Changeset: 0ef2e112
Author:    Alexey Pavlyutkin <apavlyutkin@azul.com>
Committer: Yuri Nesterenko <yan@openjdk.org>
Date:      2023-05-12 10:34:38 +0000
URL:       https://git.openjdk.org/jdk11u/commit/0ef2e112eb2feaab9216d75cb6fe240d58e02d5c
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Consistently use LockingMode instead of UseHeavyMonitors,JDK-8307810,5100579,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,stuefe,stuefe,stuefe,2023-05-10 03:57,2023-05-17 16:51,2023-10-01 09:56,2023-05-10 21:49,21,,,,,,21,hotspot,,0,,,,,,,,,,,,,,"JDK-8291555 phased out UseHeavyMonitors in favor of LockingMode=0. We forgot to apply these changes to PPC and S390. Since UseHeavyMonitors implies LockingMode, but not vice versa, we now have a mismatch if JVM is started with LockingMode=0 but without UseHeavyMonitors. That leads to crashes.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8291555,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i31gor:",9223372036854775807,b23,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,,,"2023-05-10 04:26;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/13900
Date: 2023-05-10 11:20:16 +0000;;;","2023-05-10 09:57;mbaesken;The issue (crash) was triggered by the test

runtime/CommandLine/OptionsValidation/TestOptionsWithRanges.java#id3

(fastdebug binaries, linux ppc64le).

#  Internal Error (/linuxppc64le/jdk-dev/src/hotspot/share/runtime/synchronizer.cpp:1518), pid=2138728, tid=2138731
#  assert(mark.is_neutral()) failed: invariant: header=0x00007fff8217dc08
#
# JRE version:  (21.0) (fastdebug build )
# Java VM: OpenJDK 64-Bit Server VM (fastdebug 21-internal-adhoc.openjdk.jdk-dev, mixed mode, sharing, tiered, compressed oops, compressed class ptrs, g1 gc, linux-ppc64le)
# Problematic frame:
# V  [libjvm.so+0x1a794f8]  ObjectSynchronizer::inflate(Thread*, oop, ObjectSynchronizer::InflateCause) [clone .constprop.0]+0x1048
#

---------------  T H R E A D  ---------------

Current thread (0x00007fff7c0371a0):  JavaThread ""main""             [_thread_in_vm, id=2138731, stack(0x00007fff81f80000,0x00007fff82180000) (2048K)]

Stack: [0x00007fff81f80000,0x00007fff82180000],  sp=0x00007fff8217d790,  free space=2037k
Native frames: (J=compiled Java code, j=interpreted, Vv=VM code, C=native code)
V  [libjvm.so+0x1a794f8]  ObjectSynchronizer::inflate(Thread*, oop, ObjectSynchronizer::InflateCause) [clone .constprop.0]+0x1048  (synchronizer.cpp:1518)
V  [libjvm.so+0x1a7a1a8]  ObjectSynchronizer::notifyall(Handle, JavaThread*)+0x158  (synchronizer.cpp:772)
V  [libjvm.so+0x113a4b0]  JVM_MonitorNotifyAll+0xe0  (jvm.cpp:639)
j  java.lang.Object.notifyAll()V+0 java.base@21-internal
j  jdk.internal.misc.VM.initLevel(I)V+52 java.base@21-internal
j  java.lang.System.initPhase1()V+185 java.base@21-internal
v  ~StubRoutines::call_stub 0x00007fff6b1b084c
V  [libjvm.so+0xf67520]  JavaCalls::call_helper(JavaValue*, methodHandle const&, JavaCallArguments*, JavaThread*)+0x520  (javaCalls.cpp:415)
V  [libjvm.so+0x1606c0c]  os::os_exception_wrapper(void (*)(JavaValue*, methodHandle const&, JavaCallArguments*, JavaThread*), JavaValue*, methodHandle const&, JavaCallArguments*, JavaThread*)+0x3c  (os_linux.cpp:4859)
V  [libjvm.so+0xf69400]  JavaCalls::call_static(JavaValue*, Klass*, Symbol*, Symbol*, JavaCallArguments*, JavaThread*)+0x1a0  (javaCalls.cpp:329)
V  [libjvm.so+0xf695b4]  JavaCalls::call_static(JavaValue*, Klass*, Symbol*, Symbol*, JavaThread*)+0x64  (javaCalls.cpp:262)
V  [libjvm.so+0x1b0daf4]  Threads::initialize_java_lang_classes(JavaThread*, JavaThread*)+0x6f4  (threads.cpp:288)
V  [libjvm.so+0x1b120f0]  Threads::create_vm(JavaVMInitArgs*, bool*)+0x580  (threads.cpp:621)
V  [libjvm.so+0x10c36ac]  JNI_CreateJavaVM+0xcc  (jni.cpp:3571)
C  [libjli.so+0x5944]  JavaMain+0xd4  (java.c:1459)
C  [libjli.so+0xb498]  ThreadJavaMain+0x18  (java_md.c:650)
C  [libpthread-2.28.so+0x96a8]  start_thread+0xf8
Java frames: (J=compiled Java code, j=interpreted, Vv=VM code)
j  java.lang.Object.notifyAll()V+0 java.base@21-internal
j  jdk.internal.misc.VM.initLevel(I)V+52 java.base@21-internal
j  java.lang.System.initPhase1()V+185 java.base@21-internal
v  ~StubRoutines::call_stub 0x00007fff6b1b084c;;;","2023-05-10 21:49;dukebot;Changeset: 984fbbbc
Author:    Thomas Stuefe <stuefe@openjdk.org>
Date:      2023-05-11 04:47:14 +0000
URL:       https://git.openjdk.org/jdk/commit/984fbbbcabca475c3c3af7c10a843759744c1472
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
"Replace use of System.getProperty(""os.name"") with PlatformUtil calls",JDK-8307807,5100575,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,mhanl,lkostyra,lkostyra,2023-05-10 01:59,2023-05-23 11:09,2023-10-01 09:56,2023-05-12 10:06,jfx21,,,,,,jfx21,javafx,,0,noreg-cleanup,sn_143,,,,,,,,,,,,"In some places (ex. HostServicesDelegate.java) the current platform is determined via probing ""os.name"" property. These places should be replaced with appropriate PlatformUtil calls.

HostServiceDelegate.java is only one place where the replacement should happen, there are more places which would require such replacement",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8308028,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i31gnv:",9223372036854775807,b18,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@1d1c7815,,,,,,,,,"2023-05-10 12:05;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jfx/pull/1132
Date: 2023-05-10 18:47:16 +0000;;;","2023-05-12 10:06;dukebot;Changeset: 70953643
Author:    Carl Döbbelin <carl.carlec@gmail.com>
Committer: Marius Hanl <mhanl@openjdk.org>
Date:      2023-05-12 17:03:16 +0000
URL:       https://git.openjdk.org/jfx/commit/70953643a9dc05c76924fc4c602ee39038d71295
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Newly added java/awt/dnd/MozillaDnDTest.java has invalid jtreg `@requires` clause,JDK-8307799,5100565,Bug,Closed,JDK,JDK,software,duke,,,P2,Fixed,dcubed,dholmes,dholmes,2023-05-09 23:32,2023-08-01 01:13,2023-10-01 09:56,2023-05-10 07:45,21,,,,,,21,client-libs,,0,noreg-self,tier4,,,,,,,,,,,,"/*
  @test
  @bug 4746177
  @summary tests that data types exported by Netscape 6.2 are supported
  @requires(os != ""windows"")
  @key headful
  @run main MozillaDnDTest
*/

test result: Error. Parse Exception: Invalid tag: requires(os

I think a space is needed before the '('.",,,,,,,,,,,JDK-8309424,JDK-8309423,JDK-8309422,JDK-8309455,JDK-8313528,JDK-8308895,,,,,,,,,,,,,,,,JDK-8307128,,,,,,,,,,,,,,,,,,,,,,,21,,,,,,,,"0|i31gln:",9223372036854775807,b22,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@5a9b3fd3,,,,,,,Verified,,"2023-05-10 07:28;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/13906
Date: 2023-05-10 14:23:38 +0000;;;","2023-05-10 07:43;dukebot;Changeset: 1bca05ea
Author:    Daniel D. Daugherty <dcubed@openjdk.org>
Date:      2023-05-10 14:40:56 +0000
URL:       https://git.openjdk.org/jdk/commit/1bca05eace5c4622a1fd596f4ed196495a8801e4
;;;","2023-05-23 10:56;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/1360
Date: 2023-05-17 23:33:45 +0000;;;","2023-07-27 01:35;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk11u-dev/pull/2060
Date: 2023-07-27 08:26:30 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Test for HSS/LMS Signature Verification,JDK-8307794,5100557,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,mpowers,mpowers,mpowers,2023-05-09 16:08,2023-07-19 01:50,2023-10-01 09:56,2023-06-01 07:12,,,,,,,21,security-libs,,0,noreg-self,ursqe-triaged,,,,,,,,,,,,"Test should cover Known Answer Tests, serialization checks, and bad input checks.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8298127,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i31gjv:",9223372036854775807,b26,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@2ec284e3,,,,,,,,,"2023-05-17 09:59;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/13940
Date: 2023-05-11 19:06:59 +0000;;;","2023-06-01 07:12;dukebot;Changeset: d9871764
Author:    Mark Powers <mpowers@openjdk.org>
Committer: Weijun Wang <weijun@openjdk.org>
Date:      2023-06-01 14:09:36 +0000
URL:       https://git.openjdk.org/jdk/commit/d987176412b0a1812c9b99aaaeaf65ac96fa05be
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
runtime/reflect/ReflectOutOfMemoryError.java timed out,JDK-8307783,5100541,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,dcubed,dcubed,dcubed,2023-05-09 11:51,2023-05-24 23:10,2023-10-01 09:56,2023-05-20 09:42,21,,,,,,21,hotspot,,0,intermittent,tier3,,,,,,,,,,,,"The following test timed out in the JDK21 CI:

runtime/reflect/ReflectOutOfMemoryError.java

Here's a snippet from the log file:

#section:main
----------messages:(8/305)----------
command: main ReflectOutOfMemoryError
reason: User specified action: run main/othervm ReflectOutOfMemoryError 
started: Tue May 09 17:22:45 UTC 2023
Mode: othervm [/othervm specified]
Timeout information:
--- Timeout information end.
finished: Tue May 09 17:30:59 UTC 2023
elapsed time (seconds): 494.307
----------configuration:(0/0)----------
----------System.out:(15/624)----------
Starting test
pool[42387087]=new Object(); // elapsed 40.256s
pool[62748321]=new Object(); // elapsed 27.629s
pool[62748322]=new Object(); // elapsed 28.75s
pool[62764870]=new Object(); // elapsed 22.199s
pool[62764914]=new Object(); // elapsed 20.319s
pool[62764915]=new Object(); // elapsed 23.053s
pool[62764916]=new Object(); // elapsed 45.309s
pool[62764917]=new Object(); // elapsed 45.329s
pool[62764918]=new Object(); // elapsed 44.97s
pool[62764919]=new Object(); // elapsed 45.365s
Memory allocation became slow: so heap seems exhausted.
Timeout refired 480 times
OutOfMemoryError thrown as expected.
Test passed.
----------System.err:(1/15)----------
STATUS:Passed.
----------rerun:(36/6121)*----------

<snip>

result: Error. Program `/opt/mach5/mesos/work_dir/jib-master/install/jdk-21+22-1862/linux-aarch64-debug.jdk/jdk-21/fastdebug/bin/java' timed out (timeout set to 480000ms, elapsed time including timeout handling was 494300ms).

Please note that the test managed to PASS while the timeout
handler was running.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,aarch64,,,,,,,,,linux,,,,,,"0|i31ggb:",9223372036854775807,b24,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,,,"2023-05-19 13:39;dcubed;So far there are 3 sightings in the JDK21 CI and test's elapsed times are:

elapsed time (seconds): 496.684
elapsed time (seconds): 496.048
elapsed time (seconds): 494.307

All 3 of the sightings have these JVM args:

-XX:+CreateCoredumpOnCrash -XX:+UseParallelGC -XX:+UseNUMA;;;","2023-05-19 14:00;dcubed;In jdk-21+24-2010 (which has finished Tier[1-7]), there are 79 passing runs of
this test and the times range from 31s -> 7m 37s. The slowest is on linux-arch64,
but the fastest linux-aarch64 is 44s so it's not simply that linux-aarch64 is slow.;;;","2023-05-20 07:52;dcubed;Here's the context diff for the proposed fix:

$ git diff
diff --git a/test/hotspot/jtreg/runtime/reflect/ReflectOutOfMemoryError.java b/test/hotspot/jtreg/runtime/reflect/ReflectOutOfMemoryError.java
index 40fc13acaa2..929b32770e8 100644
--- a/test/hotspot/jtreg/runtime/reflect/ReflectOutOfMemoryError.java
+++ b/test/hotspot/jtreg/runtime/reflect/ReflectOutOfMemoryError.java
@@ -25,7 +25,7 @@
  * @test
  * @bug 8297977
  * @summary Test that throwing OOM from reflected method gets InvocationTargetException
- * @run main/othervm ReflectOutOfMemoryError
+ * @run main/othervm/timeout=150 ReflectOutOfMemoryError
  */
 import java.lang.reflect.*;
;;;","2023-05-20 09:42;dukebot;Changeset: a0f4a948
Author:    Daniel D. Daugherty <dcubed@openjdk.org>
Date:      2023-05-20 16:40:05 +0000
URL:       https://git.openjdk.org/jdk/commit/a0f4a948bb76ce5ea11d8fe08e788ed43516ca4e
;;;","2023-05-20 09:42;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/14070
Date: 2023-05-20 15:56:35 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Relax the java.awt.Robot specification,JDK-8307779,5100529,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,azvegint,azvegint,azvegint,2023-05-09 10:37,2023-05-24 23:09,2023-10-01 09:56,2023-05-18 11:15,21,,,,,,21,client-libs,,0,sn_143,sn_144,wayland,wayland_x11_change_spec,wayland_x11_compatibility,,,,,,,,,"We need to relax the java.awt.Robot specification according to the latest operating system trends.
This should at least cover the case of Wayland, which has changed many familiar concepts in Linux.


https://bugs.openjdk.org/browse/JDK-8280982 [Wayland] [XWayland] java.awt.Robot taking screenshots
https://bugs.openjdk.org/browse/JDK-8280995 [XWayland] Robot.mouseMove does not visually move mouse cursor
https://bugs.openjdk.org/browse/JDK-8280990 [XWayland] XTest emulated mouse click does not bring window to front.
https://bugs.openjdk.org/browse/JDK-8280988 [XWayland] Click on title to request focus test failures
",,,,,,,,,,,,,,,,,,,,,,,JDK-8308012,,,,,JDK-8280995,,,,JDK-8308370,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i31gdn:",9223372036854775807,b24,,,,,,,,,,,"2023-05-09 12:53;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/13809
Date: 2023-05-04 16:26:47 +0000;;;","2023-05-18 11:15;dukebot;Changeset: 21aa057f
Author:    Alexander Zvegintsev <azvegint@openjdk.org>
Date:      2023-05-18 18:14:05 +0000
URL:       https://git.openjdk.org/jdk/commit/21aa057fafd88f4dd677bbf7c99a7eabb6b18409
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
DynamicArchiveHeader contents are missing in CDS mapfile,JDK-8307765,5100494,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,asmehra,asmehra,asmehra,2023-05-09 08:29,2023-05-16 16:14,2023-10-01 09:56,2023-05-10 14:55,21,,,,,,21,hotspot,,0,cds,,,,,,,,,,,,,"DynamicArchiveHeader contains two fields:
1. _base_header_crc: an int
2. _base_region_crc: array of ints

This information is currently not printed in the mapfile generated using -Xlog:cds+map=trace option.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i31g5v:",9223372036854775807,b22,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,,,"2023-05-09 10:24;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/13891
Date: 2023-05-09 17:16:35 +0000;;;","2023-05-10 14:53;dukebot;Changeset: cc9f7ad9
Author:    Ashutosh Mehra <asmehra@redhat.com>
Committer: Ioi Lam <iklam@openjdk.org>
Date:      2023-05-10 21:51:36 +0000
URL:       https://git.openjdk.org/jdk/commit/cc9f7ad9ce33dc44d335fb7fb5483795c62ba936
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
[Lilliput/JDK17] Fix JVMTI GetObjectMonitorUsage(),JDK-8307764,5100493,Bug,Resolved,JDK,JDK,software,duke,,,P2,Fixed,rkennke,rkennke,rkennke,2023-05-09 08:22,2023-05-09 09:57,2023-10-01 09:56,2023-05-09 09:57,repo-lilliput-17,,,,,,repo-lilliput-17,hotspot,,0,lilliput,,,,,,,,,,,,,"This test:
make run-test TEST=vmTestbase/nsk/jvmti/GetObjectMonitorUsage/objmonusage001/TestDescription.java

fails with:
(0) unexpected owner: Thread-1 (0x(nil))
(0) waiter_count expected: 1, actually: 0

Reason is that JDK-8295849 (which is a pre-req for Lilliput) has not been backported properly.

A number of other JVMTI tests are failing because of the same issue, too:

vmTestbase/nsk/jvmti/GetObjectMonitorUsage/objmonusage001/TestDescription.java
vmTestbase/nsk/jvmti/GetObjectMonitorUsage/objmonusage003/TestDescription.java
vmTestbase/nsk/jvmti/GetObjectMonitorUsage/objmonusage004/TestDescription.java
vmTestbase/nsk/jvmti/scenarios/contention/TC01/tc01t001/TestDescription.java
vmTestbase/nsk/jvmti/scenarios/contention/TC03/tc03t001/TestDescription.java
vmTestbase/nsk/jvmti/scenarios/contention/TC03/tc03t002/TestDescription.java
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,generic,,,,,,,,,generic,,,,,,"0|i31g5n:",9223372036854775807,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@661b156a,,,,,,,,,"2023-05-09 09:19;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/lilliput-jdk17u/pull/15
Date: 2023-05-09 15:58:40 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
JFR: EventStream.openRepository() drops events,JDK-8307738,5100465,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,egahlin,egahlin,egahlin,2023-05-09 04:53,2023-05-31 23:25,2023-10-01 09:56,2023-05-24 09:41,,,,,,,21,hotspot,,0,,,,,,,,,,,,,,"Number of events is not monotonically increasing when using a start time. 

See attached reproducer.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"2023-05-09 04:55;egahlin;Repro.java;https://bugs.openjdk.org/secure/attachment/103774/Repro.java",,,,,,,,,,,,,,,,,,,,,,"0|i31fzf:",9223372036854775807,b25,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@42995637,,,,,,,,,"2023-05-23 08:58;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/14103
Date: 2023-05-23 15:32:45 +0000;;;","2023-05-24 09:41;dukebot;Changeset: d10467e2
Author:    Erik Gahlin <egahlin@openjdk.org>
Date:      2023-05-24 16:38:50 +0000
URL:       https://git.openjdk.org/jdk/commit/d10467e27b9898a75d7df8c31ee14a33edf7b848
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
build-test-lib is broken,JDK-8307732,5100459,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,jbechberger,jbechberger,jbechberger,2023-05-09 03:34,2023-09-28 03:12,2023-10-01 09:56,2023-05-10 05:15,,,,,,,21,infrastructure,,0,jdk17u-fix-request,jdk17u-fix-yes,,,,,,,,,,,,"The build-test-lib is broken due to missing `--add-exports`:

```
Compiling up to 171 files for BUILD_TEST_LIB_JAR
Creating support/test/lib/wb.jar
jdk/test/lib/jdk/test/lib/util/ModuleInfoWriter.java:33: error: package jdk.internal.classfile is not visible
import jdk.internal.classfile.Classfile;
                   ^
  (package jdk.internal.classfile is declared in module java.base, which does not export it to the unnamed module)
jdk/test/lib/jdk/test/lib/util/ModuleInfoWriter.java:34: error: package jdk.internal.classfile.java.lang.constant is not visible
import jdk.internal.classfile.java.lang.constant.PackageDesc;
                                       ^
  (package jdk.internal.classfile.java.lang.constant is declared in module java.base, which does not export it)
jdk/test/lib/jdk/test/lib/util/ModuleInfoWriter.java:35: error: package jdk.internal.classfile.attribute is not visible
import jdk.internal.classfile.attribute.ModuleAttribute;
                             ^
  (package jdk.internal.classfile.attribute is declared in module java.base, which does not export it to the unnamed module)
jdk/test/lib/jdk/test/lib/util/ModuleInfoWriter.java:36: error: package jdk.internal.classfile.attribute is not visible
import jdk.internal.classfile.attribute.ModuleExportInfo;
                             ^
  (package jdk.internal.classfile.attribute is declared in module java.base, which does not export it to the unnamed module)
jdk/test/lib/jdk/test/lib/util/ModuleInfoWriter.java:37: error: package jdk.internal.classfile.attribute is not visible
import jdk.internal.classfile.attribute.ModuleMainClassAttribute;
                             ^
  (package jdk.internal.classfile.attribute is declared in module java.base, which does not export it to the unnamed module)
jdk/test/lib/jdk/test/lib/util/ModuleInfoWriter.java:38: error: package jdk.internal.classfile.attribute is not visible
import jdk.internal.classfile.attribute.ModuleOpenInfo;
                             ^
  (package jdk.internal.classfile.attribute is declared in module java.base, which does not export it to the unnamed module)
jdk/test/lib/jdk/test/lib/util/ModuleInfoWriter.java:39: error: package jdk.internal.classfile.attribute is not visible
import jdk.internal.classfile.attribute.ModulePackagesAttribute;
                             ^
  (package jdk.internal.classfile.attribute is declared in module java.base, which does not export it to the unnamed module)
jdk/test/lib/jdk/test/lib/util/ModuleInfoWriter.java:40: error: package jdk.internal.classfile.attribute is not visible
import jdk.internal.classfile.attribute.ModuleResolutionAttribute;
                             ^
  (package jdk.internal.classfile.attribute is declared in module java.base, which does not export it to the unnamed module)
jdk/test/lib/jdk/test/lib/util/ModuleInfoWriter.java:41: error: package jdk.internal.classfile.attribute is not visible
import jdk.internal.classfile.attribute.ModuleRequireInfo;
                             ^
  (package jdk.internal.classfile.attribute is declared in module java.base, which does not export it to the unnamed module)
jdk/test/lib/jdk/test/lib/util/ModuleInfoWriter.java:42: error: package jdk.internal.classfile.attribute is not visible
import jdk.internal.classfile.attribute.ModuleTargetAttribute;
                             ^
  (package jdk.internal.classfile.attribute is declared in module java.base, which does not export it to the unnamed module)
jdk/test/lib/jdk/test/lib/util/ModuleInfoWriter.java:43: error: package jdk.internal.classfile.constantpool is not visible
import jdk.internal.classfile.constantpool.ModuleEntry;
                             ^
  (package jdk.internal.classfile.constantpool is declared in module java.base, which does not export it to the unnamed module)
jdk/test/lib/jdk/test/lib/util/ModuleInfoWriter.java:44: error: package jdk.internal.module is not visible
import jdk.internal.module.ModuleResolution;
                   ^
  (package jdk.internal.module is declared in module java.base, which does not export it to the unnamed module)
jdk/test/lib/jdk/test/lib/util/ModuleInfoWriter.java:45: error: package jdk.internal.module is not visible
import jdk.internal.module.ModuleTarget;
                   ^
  (package jdk.internal.module is declared in module java.base, which does not export it to the unnamed module)
```",,,,,,,,,,,JDK-8317230,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i31fy3:",9223372036854775807,b22,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@429c566,,,,,,,,,"2023-05-09 03:45;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/13885
Date: 2023-05-09 10:38:54 +0000;;;","2023-05-10 05:15;dukebot;Changeset: 0da48f19
Author:    Johannes Bechberger <jbechberger@openjdk.org>
Committer: Daniel Jeliński <djelinski@openjdk.org>
Date:      2023-05-10 12:13:22 +0000
URL:       https://git.openjdk.org/jdk/commit/0da48f19cbebe0730d689cb966b886f6f73fb3f1
;;;","2023-09-27 04:46;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/1801
Date: 2023-09-27 11:26:02 +0000;;;","2023-09-27 07:27;roboduke;[jdk17u-fix-request] Approval Request from Vishal Chand
Fixes build-test-lib target. Applies as stack of three clean commits. make build-test-lib now works.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Loop Predication should not hoist range checks with trap on success projection by negating their condition,JDK-8307683,5100217,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,chagedorn,webbuggrp,webbuggrp,2023-05-05 06:06,2023-08-23 08:19,2023-10-01 09:56,2023-06-01 01:06,11,17,19,20,21,9,21,hotspot,,0,bugdb_35489355,c2,dcsswa,jdk17u-fix-request,jdk17u-fix-yes,oracle-triage-21,regression,reproducer-yes,webbug,,,,,"ADDITIONAL SYSTEM INFORMATION :
Ubuntu 22.04 / JDK 11.0.19 (but also 17.0.7)

A DESCRIPTION OF THE PROBLEM :
Since the docker image we use to build our application (maven:3.9.1-eclipse-temurin-11-focal) is based on the JDK version 11.0.19, one of our Unit Test makes the JVM crash systematically.
With the image based on jdk 11.0.18 we do not encounter the problem.

I crashes with the following message:
#
# A fatal error has been detected by the Java Runtime Environment:
#
#  Internal Error (macroAssembler_x86.cpp:864), pid=51663, tid=51664
#  fatal error: DEBUG MESSAGE: duplicated predicate failed which is impossible
#
# JRE version: OpenJDK Runtime Environment Temurin-17.0.7+7 (17.0.7+7) (build 17.0.7+7)
# Java VM: OpenJDK 64-Bit Server VM Temurin-17.0.7+7 (17.0.7+7, mixed mode, sharing, tiered, compressed oops, compressed class ptrs, g1 gc, linux-amd64)
# Problematic frame:
# V  [libjvm.so+0xafec21]  MacroAssembler::debug64(char*, long, long*)+0x41
#
# Core dump will be written. Default location: Core dumps may be processed with ""/usr/share/apport/apport -p%p -s%s -c%c -d%d -P%P -u%u -g%g -- %E"" (or dumping to /home/xxxxxxxx/tmp/core.51663)
#
# An error report file with more information is saved as:
#  /tmp/hs_err_pid51663.log
Compiled method (c2)     139  288       4       java.util.GregorianCalendar::computeTime (976 bytes)
 total in heap  [0x00007f6100ed7f90,0x00007f6100ed8680] = 1776
 relocation     [0x00007f6100ed80f0,0x00007f6100ed8120] = 48
 main code      [0x00007f6100ed8120,0x00007f6100ed8460] = 832
 stub code      [0x00007f6100ed8460,0x00007f6100ed8478] = 24
 metadata       [0x00007f6100ed8478,0x00007f6100ed84e0] = 104
 scopes data    [0x00007f6100ed84e0,0x00007f6100ed85a0] = 192
 scopes pcs     [0x00007f6100ed85a0,0x00007f6100ed8620] = 128
 dependencies   [0x00007f6100ed8620,0x00007f6100ed8648] = 40
 handler table  [0x00007f6100ed8648,0x00007f6100ed8660] = 24
 nul chk table  [0x00007f6100ed8660,0x00007f6100ed8680] = 32
Compiled method (c2)     141  288       4       java.util.GregorianCalendar::computeTime (976 bytes)
 total in heap  [0x00007f6100ed7f90,0x00007f6100ed8680] = 1776
 relocation     [0x00007f6100ed80f0,0x00007f6100ed8120] = 48
 main code      [0x00007f6100ed8120,0x00007f6100ed8460] = 832
 stub code      [0x00007f6100ed8460,0x00007f6100ed8478] = 24
 metadata       [0x00007f6100ed8478,0x00007f6100ed84e0] = 104
 scopes data    [0x00007f6100ed84e0,0x00007f6100ed85a0] = 192
 scopes pcs     [0x00007f6100ed85a0,0x00007f6100ed8620] = 128
 dependencies   [0x00007f6100ed8620,0x00007f6100ed8648] = 40
 handler table  [0x00007f6100ed8648,0x00007f6100ed8660] = 24
 nul chk table  [0x00007f6100ed8660,0x00007f6100ed8680] = 32
#
# If you would like to submit a bug report, please visit:
#   https://github.com/adoptium/adoptium-support/issues
#
fish: Job 1, '/home/xxxxxxxx/.sdkman/candidat…' terminated by signal SIGABRT (Abort)


We managed to reproduce it with a simple use case: it happens when we create a Calendar, set lenient to false and force the HOUR_OF_DAY and the MINUTE fields to 0 then call getTime() that triggers computeTime().

The failure occurs only after calling the method several thousands of time, this is why we think the JIT compiler has something to do with it.

Also the problem does not happen when the  -Xcomp flag is set.

We tested it on JDK17 and the same problem occurs with the 17.0.7 version (it works fine with 17.0.6)

REGRESSION : Last worked in version 11.0.18

STEPS TO FOLLOW TO REPRODUCE THE PROBLEM :
use the test case source code below: 

javac TestCalendarJit.java
java TestCalendarJit


EXPECTED VERSUS ACTUAL BEHAVIOR :
EXPECTED -
no crash  after the 100000 calls loop
ACTUAL -
2544
2545
2546
2547
2548
2549
2550
2551
2552
2553
2554
2555
2556
=============== DEBUG MESSAGE: duplicated predicate failed which is impossible ================

#
# A fatal error has been detected by the Java Runtime Environment:
#
#  SIGSEGV (0xb) at pc=0x00007fd3b80d97a9, pid=51869, tid=51870
#
# JRE version: OpenJDK Runtime Environment Temurin-11.0.19+7 (11.0.19+7) (build 11.0.19+7)
# Java VM: OpenJDK 64-Bit Server VM Temurin-11.0.19+7 (11.0.19+7, mixed mode, tiered, compressed oops, g1 gc, linux-amd64)
# Problematic frame:
# J 306 c2 java.util.GregorianCalendar.computeTime()V java.base@11.0.19 (970 bytes) @ 0x00007fd3b80d97a9 [0x00007fd3b80d95c0+0x00000000000001e9]
#
# Core dump will be written. Default location: Core dumps may be processed with ""/usr/share/apport/apport -p%p -s%s -c%c -d%d -P%P -u%u -g%g -- %E"" (or dumping to /home/xxxxxxxx/tmp/core.51869)
#
# An error report file with more information is saved as:
# /home/xxxxxxxx/tmp/hs_err_pid51869.log
Compiled method (c2)     193  306       4       java.util.GregorianCalendar::computeTime (970 bytes)
 total in heap  [0x00007fd3b80d9410,0x00007fd3b80d9a90] = 1664
 relocation     [0x00007fd3b80d9588,0x00007fd3b80d95b8] = 48
 main code      [0x00007fd3b80d95c0,0x00007fd3b80d9880] = 704
 stub code      [0x00007fd3b80d9880,0x00007fd3b80d9898] = 24
 metadata       [0x00007fd3b80d9898,0x00007fd3b80d9900] = 104
 scopes data    [0x00007fd3b80d9900,0x00007fd3b80d99c0] = 192
 scopes pcs     [0x00007fd3b80d99c0,0x00007fd3b80d9a40] = 128
 dependencies   [0x00007fd3b80d9a40,0x00007fd3b80d9a58] = 24
 handler table  [0x00007fd3b80d9a58,0x00007fd3b80d9a70] = 24
 nul chk table  [0x00007fd3b80d9a70,0x00007fd3b80d9a90] = 32
Compiled method (c1)     194  304       3       TestCalendarJit::getDate (29 bytes)
 total in heap  [0x00007fd3b0c21a10,0x00007fd3b0c22680] = 3184
 relocation     [0x00007fd3b0c21b88,0x00007fd3b0c21c40] = 184
 main code      [0x00007fd3b0c21c40,0x00007fd3b0c223c0] = 1920
 stub code      [0x00007fd3b0c223c0,0x00007fd3b0c22450] = 144
 oops           [0x00007fd3b0c22450,0x00007fd3b0c22458] = 8
 metadata       [0x00007fd3b0c22458,0x00007fd3b0c224a0] = 72
 scopes data    [0x00007fd3b0c224a0,0x00007fd3b0c22558] = 184
 scopes pcs     [0x00007fd3b0c22558,0x00007fd3b0c22668] = 272
 dependencies   [0x00007fd3b0c22668,0x00007fd3b0c22670] = 8
 nul chk table  [0x00007fd3b0c22670,0x00007fd3b0c22680] = 16
Could not load hsdis-amd64.so; library not loadable; PrintAssembly is disabled
#
# If you would like to submit a bug report, please visit:
#   https://github.com/adoptium/adoptium-support/issues
#
fish: Job 1, '/home/xxxxxxxx/.sdkman/candidat…' terminated by signal SIGABRT (Abort)


---------- BEGIN SOURCE ----------

import java.util.Calendar;

public class TestCalendarJit {

    public static void main(String[] args) {
        for (int i = 0; i < 100000; i++) {
            System.err.println(i);
            getDate();
        }
    }

    private static void getDate() {
        Calendar c = Calendar.getInstance();
        c.setLenient(false);
        c.set(Calendar.HOUR_OF_DAY, 0);
        c.set(Calendar.MINUTE, 0);
        c.getTime();
    }
}

---------- END SOURCE ----------

CUSTOMER SUBMITTED WORKAROUND :
the problem does not occur with the -Xcomp flag set

FREQUENCY : occasionally


",,,,,,,,,,,JDK-8313747,JDK-8313847,JDK-8312068,,,,,,,,,,,,,JDK-8309272,,JDK-8307978,,,,JDK-8308884,JDK-8309119,,,JDK-8297951,JDK-7173584,JDK-4809552,,,"2023-05-08 23:10;sswsharm;TestCalendarJit.java;https://bugs.openjdk.org/secure/attachment/103765/TestCalendarJit.java","2023-05-08 23:10;sswsharm;hs_err_pid7652.log;https://bugs.openjdk.org/secure/attachment/103766/hs_err_pid7652.log","2023-05-08 23:18;sswsharm;hs_err_pid7984.log;https://bugs.openjdk.org/secure/attachment/103767/hs_err_pid7984.log",,,,,x86_64,,,,,,b01,,,generic,,,,,,"0|i31egb:",9223372036854775807,b26,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2023-05-08 23:15;sswsharm;Issue is reproduced.
Crash is observed on JDK 17.0.7, 11.0.19 but not present in JDK 17.0.6, 11.0.18 and below versions.
However, crash can be avoided by using -Xcomp

OS: Windows 10
JDK 11.0.18:Pass
JDK 11.0.19: Fail
JDK 17.0.6: Pass
JDK 17.0.7 : Fail
JDK 20.0.1: Fail
JDK 21ea: Fail

ILW = Regression,  reproducible on GA build, use -Xcomp= HLM = P3

Moving it to dev team for further analysis.;;;","2023-05-09 09:59;chagedorn;ILW = Crash with with debug build and possible wrong execution with release build, rare, disable compilation of affected method or use -XX:-UseLoopPredicate = HLM = P3;;;","2023-05-09 10:03;chagedorn;This is unrelated to JDK-8305428. I've had a closer look and it seems that the code added by JDK-4809552 to allow Loop Predication if we have positive values that aren't LoadRanges is only correct if we have an actual RangeCheckNode. But we also allow normal IfNodes which is wrong. This leads to this crash and wrong executions with a simple reproducer. But this pattern is very rare in practice.;;;","2023-05-25 03:37;fthevenet;While investigating this issue we noticed that a revert of JDK-8297951 prevents the crash.;;;","2023-05-25 04:18;neugens;Hi Christian,

Thanks for looking into this.

Regarding the pattern, I'm not sure if this pattern is very rare though, we had a lot of reports and it seems there are also multiple reports over a Adoptium, but indeed they all look very seem similar.;;;","2023-05-25 06:36;chagedorn;Hi Mario, hi Frederic

It's true that JDK-8297951 inserted the Halt Nodes which we see failing at runtime. However, before JDK-8297951 we could just have a silent wrong execution (I have a test case for that as well). So, it looks like JDK-8297951 revealed this issue and made it much more common. The fix is straight forward. I will create a PR and target it to 21.;;;","2023-05-25 06:45;fthevenet;This is great news; thanks Christian!;;;","2023-05-25 09:55;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/14156
Date: 2023-05-25 16:48:35 +0000;;;","2023-05-25 10:17;neugens;Thanks for the explanation, Christian, and also for the quick turnaround on this!;;;","2023-05-31 05:37;chagedorn;The negation of the range check conditions introduced with JDK-7173584 turned out to be wrong and is now suggested as final and complete fix.;;;","2023-06-01 01:06;dukebot;Changeset: dfd3da3f
Author:    Christian Hagedorn <chagedorn@openjdk.org>
Date:      2023-06-01 08:04:45 +0000
URL:       https://git.openjdk.org/jdk/commit/dfd3da3f52480f68f653beb1e720691f8232ace7
;;;","2023-07-06 00:15;goetz;Fix request [17u]

This fixes a regression in 17.0.7. To work around the regression, JDK-8297951 was backed out in 17.0.8.
Risk: we should fix this, the backout of 8297951 only reduces the likelyhood of the bug. So with the backout we have two issues open.  I will redo the backpout, too.
I had to do larger adaptions to the change, but the core of the fix is obvious to map to 17.
Test #id0 crashes without the fix, #id1 passes. Both pass with the fix. SAP nightly testing passed.;;;","2023-07-06 00:18;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/1553
Date: 2023-07-06 07:11:22 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Adjust delay time and gc log argument in TestAbortOnVMOperationTimeout,JDK-8307653,5100385,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,gli,gli,gli,2023-05-08 20:40,2023-07-24 21:57,2023-10-01 09:56,2023-05-11 11:22,21,,,,,,21,hotspot,,0,jdk17u-fix-request,jdk17u-fix-yes,noreg-self,,,,,,,,,,,"Currently, `TestAbortOnVMOperationTimeout` always fails on 
my local riscv64 dev board because of the poor performance of the board,
and it fails on macos-aarch64 intermittently (see JDK-8296819).

So I want to increase the delay time so that the test can pass at my local riscv64 env,
and adjust the gc log argument to inspect the issue about macos-aarch64.",,,,,,,,,,,JDK-8311918,JDK-8312448,JDK-8312683,,,,,,,,,,,,,,,,,,,,,,,JDK-8296819,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i31fhn:",9223372036854775807,b23,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,,,"2023-05-08 22:38;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/13878
Date: 2023-05-09 05:34:06 +0000;;;","2023-05-09 11:11;mseledtsov;Runtime Triage: Looks like this is a duplicate of JDK-8296819 ? 
If so please fix this issue under  JDK-8296819;;;","2023-05-09 19:34;dholmes;[~mseledtsov] from the comments in JDK-8296819 I'm not sure it is definitely a duplicate. In JDK-8296819 something intermittently interferes with successful execution of the test but usually it runs fine. Here the timeouts are simply too short for RISC-V systems. Now it is possible that extending the timeout as proposed here, will also fix JDK-8296819, but that remains to be seen.;;;","2023-05-11 11:22;dukebot;Changeset: 4f355c35
Author:    Guoxiong Li <gli@openjdk.org>
Date:      2023-05-11 18:21:30 +0000
URL:       https://git.openjdk.org/jdk/commit/4f355c3525072681ed1fb48dfdb8924b1cf0cc7c
;;;","2023-07-18 05:20;goetz;Fix request [17u]

I backport this for parity with 17.0.9-oracle.
No risk, only a test change.
Clean backport.
Test passes. SAP nightly testing passed.;;;","2023-07-18 07:59;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/1597
Date: 2023-07-18 14:53:13 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
sealed class hierarchy graph doesn't distinguish non-sealed classes,JDK-8307652,5100384,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,liach,liach,liach,2023-05-08 20:17,2023-05-31 23:25,2023-10-01 09:56,2023-05-24 14:06,21,,,,,,21,tools,,0,noreg-build,,,,,,,,,,,,,"SealedGraph.java taglet intends to distinguish non-sealed classes from sealed classes via a dashed node, but since the sealed hierarchy nodes do not have borders, they render the same as other sealed or final classes. I propose to use an italic font to distinguish these classes instead.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i31fhf:",9223372036854775807,b25,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@7900061a,,,,,,,,,"2023-05-08 21:17;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/13877
Date: 2023-05-09 04:11:03 +0000;;;","2023-05-24 14:06;dukebot;Changeset: 1451ac17
Author:    Chen Liang <liach@openjdk.org>
Committer: Jonathan Gibbons <jjg@openjdk.org>
Date:      2023-05-24 21:03:47 +0000
URL:       https://git.openjdk.org/jdk/commit/1451ac1770aa1fde0a96e475dfe9a92bc76b4eb9
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
java/net/httpclient/ExpectContinueTest.java timed out,JDK-8307648,5100376,Bug,Closed,JDK,JDK,software,duke,,,P3,Fixed,dfuchs,dcubed,dcubed,2023-05-08 13:55,2023-07-21 07:36,2023-10-01 09:56,2023-05-30 09:33,21,,,,,,21,core-libs,,0,httpclient,intermittent,tier2,,,,,,,,,,,"The following test failed in the JDK21 CI:

java/net/httpclient/ExpectContinueTest.java

Here's a snippet from the log file:

#section:testng
----------messages:(9/749)----------
command: testng ExpectContinueTest
reason: User specified action: run testng/othervm ExpectContinueTest 
started: Mon May 08 16:36:24 UTC 2023
Mode: othervm [/othervm specified]
Additional options from @modules: --add-modules java.base,java.net.http,java.logging,jdk.httpserver --add-exports java.base/sun.net.www.http=ALL-UNNAMED --add-exports java.base/sun.net.www=ALL-UNNAMED --add-exports java.base/sun.net=ALL-UNNAMED --add-exports java.net.http/jdk.internal.net.http.common=ALL-UNNAMED --add-exports java.net.http/jdk.internal.net.http.frame=ALL-UNNAMED --add-exports java.net.http/jdk.internal.net.http.hpack=ALL-UNNAMED
Timeout information:
--- Timeout information end.
finished: Mon May 08 16:45:08 UTC 2023
elapsed time (seconds): 524.099
----------configuration:(9/500)----------

<snip>

----------System.out:(12/1014)----------
Http1TestServer[localhost/127.0.0.1:43141]::addHandler ExpectContinueTest$GetHandler@2ca68486, /http1/get
Http1TestServer[localhost/127.0.0.1:43141]::addHandler ExpectContinueTest$PostHandler@20a60235, /http1/post
Http2TestServerImpl[localhost/127.0.0.1:49635]::addHandler ExpectContinueTest$GetHandler@4d1cba64, /http2/get
Http2TestServerImpl[localhost/127.0.0.1:49635]::addHandler ExpectContinueTest$PostHandler@34a40825, /http2/post
Http2TestServerImpl[localhost/127.0.0.1:49635]::addHandler ExpectContinueTest$PostHandlerCantContinue@6ee68253, /http2/hang
Http1TestServer: start
Http2TestServerImpl: start
config ExpectContinueTest.setup(): success
test ExpectContinueTest.test(java.net.URI@7d787284, java.net.URI@709979f0, java.net.URI@75a9758f, HTTP_1_1): success
Http2TestContext::handle Http2TestExchangeImpl: jdk.httpclient.test.lib.http2.Http2TestExchangeImpl@388f8a00
Http2TestContext::handle Http2TestExchangeImpl: jdk.httpclient.test.lib.http2.Http2TestExchangeImpl@614b9511
Timeout refired 480 times
<continued in the next comment>",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,aarch64,x86_64,,,,,,,,linux,os_x,,,,,"0|i31ffn:",9223372036854775807,b25,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@446e124a,,,,,,,Verified,,"2023-05-08 14:03;dcubed;----------System.err:(30/1274)----------
TestServer(1): accepting connections
Response Headers: java.net.http.HttpHeaders@18e77d29 { {content-length=[13], date=[Mon, 08 May 2023 16:36:25 GMT]} }
Response Status Code: 200
Response Headers: java.net.http.HttpHeaders@18e78323 { {content-length=[0], date=[Mon, 08 May 2023 16:36:25 GMT]} }
Response Status Code: 200
Http1HangServer received: POST /http1/hang HTTP/1.1
Content-Length: 11
Expect: 100-Continue
Host: localhost:44571
User-Agent: Java-http-client/21-ea

Response Headers: java.net.http.HttpHeaders@bc7b26f5 { {content-length=[0]} }
Response Status Code: 417
TestServer(1): connection accepted
TestServer(1): stopping is: false
TestServer(1): accepting connections
TestServer(1): creating connection
TestServer: New connection from Socket[addr=/127.0.0.1,port=41228,localport=49635]
TestServer(1): starting connection
TestServer: GET /http2/get
Server: creating input stream for stream 1
TestServer(1): Using handler for: /http2/get
Sent response headers 200
TestServer(1): connection started
Response Headers: java.net.http.HttpHeaders@83731e78 { {:status=[200], content-length=[13]} }
Response Status Code: 200
TestServer: POST /http2/post
Server: creating input stream for stream 3
TestServer(1): Using handler for: /http2/post
Sent response headers 100
----------rerun:(44/9099)*----------

<snip>

result: Error. Program `/opt/mach5/mesos/work_dir/jib-master/install/jdk-21+22-1850/linux-x64.jdk/jdk-21/bin/java' timed out (timeout set to 480000ms, elapsed time including timeout handling was 524087ms).;;;","2023-05-29 10:17;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/14207
Date: 2023-05-29 17:10:14 +0000;;;","2023-05-30 09:33;dukebot;Changeset: 04b0e785
Author:    Daniel Fuchs <dfuchs@openjdk.org>
Date:      2023-05-30 16:32:11 +0000
URL:       https://git.openjdk.org/jdk/commit/04b0e785f6b9b4629b77bb19f2b072434be4951c
;;;","2023-05-31 06:54;mbaesken;Unfortunately the test  java/net/httpclient/ExpectContinueTest.java  still times out in our nightly test runs.
The timeouts are seen on Linux x86_64 and aarch64.
We had 7 timeouts in this test since May 20th 2023.  Can we mark the test as intermittent ?;;;","2023-05-31 09:14;dfuchs;[~mbaesken] Does it still fail with my latest changes? Can you share a log of the traces?
My commit was pushed yesterday on May 30.;;;","2023-06-01 04:49;mbaesken;Hi [~dfuchs] so far no new failures in the latest nightly tests. So let's hope that it is solved now. In case I see something related in the next few days I#ll add the information here.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
FunctionDescriptor::toMethodType should allow sequence layouts (mainline),JDK-8307629,5100326,Bug,Closed,JDK,JDK,software,duke,,,P3,Fixed,mcimadamore,mcimadamore,mcimadamore,2023-05-08 09:07,2023-08-04 12:49,2023-10-01 09:56,2023-05-09 04:11,21,,,,,,21,core-libs,,0,foreign-memaccess+abi,,,,,,,,,,,,,"FunctionDescriptor::toMethodType should not be too opinionated on whether sequence layouts might sense or not as ""by-value"" parameters (even though the native linker does not support them).
Conversely, we should eagerly reject function descriptors created with padding layouts arguments/return, as they are most surely incorrect.",,,,,,,,,,,,,,,,,,,,,,,JDK-8307630,,JDK-8307253,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i31f4j:",9223372036854775807,b22,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@28ce6b78,,,,,,,Verified,,"2023-05-08 09:24;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/13869
Date: 2023-05-08 16:10:37 +0000;;;","2023-05-09 04:11;dukebot;Changeset: 7a3bea1f
Author:    Maurizio Cimadamore <mcimadamore@openjdk.org>
Date:      2023-05-09 11:09:39 +0000
URL:       https://git.openjdk.org/jdk/commit/7a3bea1f6a7eaaf4c1e701f7a06226812aaa6ead
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
java/net/httpclient/FlowAdapter* tests should close the HttpClient instances,JDK-8307626,5100322,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,dfuchs,dfuchs,dfuchs,2023-05-08 08:07,2023-05-17 16:51,2023-10-01 09:56,2023-05-11 09:33,21,,,,,,21,core-libs,,0,httpclient,noreg-self,,,,,,,,,,,,java/net/httpclient/FlowAdapterPublisherTest.java and java/net/httpclient/FlowAdapterSubscriberTest.java create one HttpClient instance per test method. The test should use try-with-resources to close the client instances.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i31f3n:",9223372036854775807,b23,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@446e124a,,,,,,,,,"2023-05-10 09:27;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/13909
Date: 2023-05-10 16:19:00 +0000;;;","2023-05-11 09:33;dukebot;Changeset: 9ad38cbe
Author:    Daniel Fuchs <dfuchs@openjdk.org>
Date:      2023-05-11 16:31:04 +0000
URL:       https://git.openjdk.org/jdk/commit/9ad38cbeaf446776c4ab4fdb4605663fc517f11f
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
[IR Framework] Readme mentions JTREG_WHITE_LIST_FLAGS instead of JTREG_WHITELIST_FLAGS,JDK-8307620,5100316,Bug,Resolved,JDK,JDK,software,duke,,,P5,Fixed,enothum,thartmann,thartmann,2023-05-08 05:30,2023-07-10 00:27,2023-10-01 09:56,2023-06-08 23:11,17,21,,,,,22,hotspot,,0,cleanup,ir-framework,noreg-doc,oracle-triage-11,oracle-triage-17,oracle-triage-21,starter,,,,,,,https://github.com/openjdk/jdk/blob/master/test/hotspot/jtreg/compiler/lib/ir_framework/README.md,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8254129,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i31f2b:",9223372036854775807,b02,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2023-06-08 06:21;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/14377
Date: 2023-06-08 12:52:06 +0000;;;","2023-06-08 23:11;dukebot;Changeset: 0a697e73
Author:    Eric Nothum <eric.nothum@oracle.com>
Committer: Christian Hagedorn <chagedorn@openjdk.org>
Date:      2023-06-09 06:09:56 +0000
URL:       https://git.openjdk.org/jdk/commit/0a697e73d5e444710a35a5d373431328a421a336
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
C2 failed: Not monotonic (AndI CastII LShiftI) in TestShiftCastAndNotification.java,JDK-8307619,5100315,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,epeter,epeter,epeter,2023-05-08 05:27,2023-07-10 00:20,2023-10-01 09:56,2023-05-21 23:23,21,,,,,,21,hotspot,,0,c2,oracle-triage-11,oracle-triage-17,oracle-triage-21,regression,,,,,,,,,"Probably related to JDK-8306042.


  33  ConI  === 0  [[ 44 455 447 ]]  #int:3
 456  CastII  === 421 219  [[ 455 ]]  #int unconditional dependency
 455  AndI  === _ 456 33  [[ 338 ]]  !orig=[240],[291] !jvms: TestShiftCastAndNotification::test @ bci:49 (line 48)
told = int:0
tnew = top
#
# A fatal error has been detected by the Java Runtime Environment:
#
#  Internal Error (.../open/src/hotspot/share/opto/phaseX.cpp:1935), pid=880014, tid=880031
#  fatal error: Not monotonic
#
# JRE version: Java(TM) SE Runtime Environment (21.0) (fastdebug build 21-internal-LTS-2023-05-08-0649543.emanuel.peter.fork4-jdk)
# Java VM: Java HotSpot(TM) 64-Bit Server VM (fastdebug 21-internal-LTS-2023-05-08-0649543.emanuel.peter.fork4-jdk, compiled mode, sharing, compressed oops, compressed class ptrs, g1 gc, linux-aarch64)
# Problematic frame:
# V  [libjvm.so+0x137dcb0]  PhaseCCP::verify_type(Node*, Type const*, Type const*)+0x1bc",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8306042,,,,JDK-8277850,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i31f23:",9223372036854775807,b24,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2023-05-08 06:07;chagedorn;ILW = Fatal error in CCP, single test, disable compilation of affected method = HLM = P3 ;;;","2023-05-10 06:55;epeter;This reproduces on latest master:

~/Documents/jtreg/bin/jtreg -va -s -jdk:/home/emanuel/Documents/fork7-jdk/build/linux-x64-slowdebug/jdk -javaoptions:""-XX:+UnlockDiagnosticVMOptions -XX:-TieredCompilation -XX:+StressArrayCopyMacroNode -XX:+StressLCM -XX:+StressGCM -XX:+StressIGVN -XX:+StressCCP -XX:+StressMethodHandleLinkerInlining -XX:+StressCompiledExceptionHandlers -XX:RepeatCompilation=1000"" -J-Djavatest.maxOutputSize=1000000 /home/emanuel/Documents/fork7-jdk/open/test/hotspot/jtreg/compiler/ccp/TestShiftCastAndNotification.java;;;","2023-05-11 08:16;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/13908
Date: 2023-05-10 14:37:35 +0000;;;","2023-05-21 23:23;dukebot;Changeset: b6a9f5c3
Author:    Emanuel Peter <epeter@openjdk.org>
Date:      2023-05-22 06:23:19 +0000
URL:       https://git.openjdk.org/jdk/commit/b6a9f5c304d9ffe74161d25af84f7c5bc1c09b33
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Linker::nativeLinker should not be restricted (mainline),JDK-8307610,5100307,Bug,Closed,JDK,JDK,software,duke,,,P2,Fixed,mcimadamore,mcimadamore,mcimadamore,2023-05-08 03:23,2023-08-08 10:54,2023-10-01 09:56,2023-05-11 02:48,21,,,,,,21,core-libs,,0,foreign-memaccess+abi,,,,,,,,,,,,,"In the past we made the Linker factory restricted as we did not have a good story for sealing a hierarchy. Since Linker is a restricted interface under JDK control, it is ok to have ""virtual"" caller sensitive method (as we can make sure that all overridden implementation are indeed caller sensitive).

Because of this, we should mark as restricted the methods where the risk actually lies - namely downcallHandle and upcallStub.",,,,,,,,,,,,,,,,,,,,,,,JDK-8307615,,JDK-8307461,,,,,,,JDK-8307961,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i31f0b:",9223372036854775807,b23,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@28ce6b78,,,,,,,Verified,,"2023-05-09 04:14;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/13863
Date: 2023-05-08 11:10:36 +0000;;;","2023-05-11 02:48;dukebot;Changeset: ba9714d4
Author:    Maurizio Cimadamore <mcimadamore@openjdk.org>
Date:      2023-05-11 09:45:45 +0000
URL:       https://git.openjdk.org/jdk/commit/ba9714d44ceabdb98078a4338fb8e8a3e22adcbe
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
gcc12 based Alpine build broken build after JDK-8307301,JDK-8307604,5100301,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,mbaesken,mbaesken,mbaesken,2023-05-08 02:11,2023-07-04 00:54,2023-10-01 09:56,2023-05-08 07:18,21,,,,,,21,client-libs,,0,jdk11u-fix-request,jdk11u-fix-yes,jdk17u-fix-request,jdk17u-fix-yes,,,,,,,,,,"After the harfbuzz 7.2 update we run into

/linuxmuslx86_64/jdk-dev/src/java.desktop/share/native/libharfbuzz/OT/glyf/Glyph.hh:281:8: error: offset '4' outside bounds of constant string [-Werror=array-bounds]
  281 |   bool get_points (hb_font_t *font, const accelerator_t &glyf_accelerator,
      |        ^~~~~~~~~~
/linuxmuslx86_64/jdk-dev/src/java.desktop/share/native/libharfbuzz/hb-static.cc:45:16: note: '_hb_NullPool' declared here
   45 | uint64_t const _hb_NullPool[(HB_NULL_POOL_SIZE + sizeof (uint64_t) - 1) / sizeof (uint64_t)] = {};
      |                ^~~~~~~~~~~~
/linuxmuslx86_64/jdk-dev/src/java.desktop/share/native/libharfbuzz/OT/glyf/Glyph.hh:281:8: error: offset '4' outside bounds of constant string [-Werror=array-bounds]
  281 |   bool get_points (hb_font_t *font, const accelerator_t &glyf_accelerator,
      |        ^~~~~~~~~~
/linuxmuslx86_64/jdk-dev/src/java.desktop/share/native/libharfbuzz/hb-static.cc:45:16: note: '_hb_NullPool' declared here
   45 | uint64_t const _hb_NullPool[(HB_NULL_POOL_SIZE + sizeof (uint64_t) - 1) / sizeof (uint64_t)] = {};

We use gcc12 on Alpine.
Switching off the warning as error fixes the issue.
",,,,,,,,,,,JDK-8310699,JDK-8311273,,,,,,,,,,,,,,,,,,,,,,,,JDK-8307301,,,,,,,,,,,,ppc,,,,,,,,,aix,,,,,,"0|i31eyz:",9223372036854775807,b22,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4b09ce31,,,,,,,,,"2023-05-08 03:37;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/13859
Date: 2023-05-08 10:29:56 +0000;;;","2023-05-08 07:17;dukebot;Changeset: d2e0e534
Author:    Matthias Baesken <mbaesken@openjdk.org>
Date:      2023-05-08 14:16:08 +0000
URL:       https://git.openjdk.org/jdk/commit/d2e0e534d7e391dd633fb9ff671900f8060b6d49
;;;","2023-06-20 23:28;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/1480
Date: 2023-06-21 06:23:23 +0000;;;","2023-06-22 03:36;goetz;Fix request [17u]

Requires build fix after harfbuzz backport.
Trivial resolve needed.
SAP nighlty testing passed. ;;;","2023-06-29 23:58;goetz;Fix request [11u]

Requires build fix after harfbuzz backport.
Trivial resolve needed.
SAP nighlty testing passed. ;;;","2023-06-30 01:19;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk11u-dev/pull/2012
Date: 2023-06-30 06:58:19 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
[AIX] Broken build after JDK-8307301,JDK-8307603,5100300,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,mbaesken,mbaesken,mbaesken,2023-05-08 02:08,2023-08-01 10:10,2023-10-01 09:56,2023-05-08 05:26,21,,,,,,21,client-libs,,0,jdk11u-fix-request,jdk11u-fix-yes,jdk17u-fix-request,jdk17u-fix-yes,,,,,,,,,,"The AIX build is broken after JDK-8307301 which updated harfbuzz to 7.2 .
This was expected because an older AIX workaround was removed.
Bringing back the AIX workaround would solve the issue.",,,,,,,,,,,JDK-8313560,JDK-8313561,,,,,,,,,,,,,,,,,,,,,,,,JDK-8307301,,,,,,,,,,,,ppc,,,,,,,,,aix,,,,,,"0|i31eyr:",9223372036854775807,b22,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4b09ce31,,,,,,,,,"2023-05-08 03:52;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/13861
Date: 2023-05-08 10:45:00 +0000;;;","2023-05-08 05:26;dukebot;Changeset: bb3e44d8
Author:    Matthias Baesken <mbaesken@openjdk.org>
Date:      2023-05-08 12:24:41 +0000
URL:       https://git.openjdk.org/jdk/commit/bb3e44d8b604b4e3facc4f49f625cc0b7ff2abd7
;;;","2023-07-25 10:25;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/1624
Date: 2023-07-25 17:18:00 +0000;;;","2023-07-26 13:47;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk11u-dev/pull/2058
Date: 2023-07-26 20:41:58 +0000;;;","2023-07-27 10:37;tsteele;[jdk17u-dev, jdk11u-dev] fix request:

I would like to backport these changes to fix this build issue related to xlclang on these platforms. Testing looks good, and the patch applied cleanly.

Risk is medium, and there is some indication that additional work is required to fix up missing symbol issues related to HarfBuzz. However, this risk is outweighed by the fact that the jdk cannot currently be built on AIX.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
[JVMCI] HotSpotConstantPool#lookupBootstrapMethodInvocation broken by JDK-8301995,JDK-8307588,5100285,Bug,Closed,JDK,JDK,software,duke,,,P2,Fixed,jeisl,jeisl,jeisl,2023-05-08 01:09,2023-07-12 07:57,2023-10-01 09:56,2023-05-09 05:30,21,,,,,,21,hotspot,,0,jvmci,oracle-triage-11,oracle-triage-17,oracle-triage-21,regression,,,,,,,,,"As a result of the changes for JDK-8301995, `HotSpotConstantPool#lookupBootstrapMethodIntrospection` is broken as it no longer decodes the correct constant pool index for looking up the bootstrap method invocation for invokedynamic.

This breaks native image on JDK 21+16, resulting in all kind of follow-up exception, for example:
```
Caused by: java.lang.NullPointerException: Cannot invoke ""Object.getClass()"" because ""o"" is null
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.checkReceiver(DirectMethodHandleAccessor.java:196)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:99)
	at java.base/java.lang.reflect.Method.invoke(Method.java:578)
	at org.graalvm.nativeimage.pointsto/com.oracle.graal.pointsto.infrastructure.WrappedConstantPool$WrappedBootstrapMethodInvocation.getMethod(WrappedConstantPool.java:210)
```
The problem can easily be observed using the following patch for `TestDynamicConstant.java`:

```
diff --git a/test/hotspot/jtreg/compiler/jvmci/jdk.vm.ci.hotspot.test/src/jdk/vm/ci/hotspot/test/TestDynamicConstant.java b/test/hotspot/jtreg/compiler/jvmci/jdk.vm.ci.hotspot.test/src/jdk/vm/ci/hotspot/test/TestDynamicConstant.java
index 6f94877b9..014154978 100644
--- a/test/hotspot/jtreg/compiler/jvmci/jdk.vm.ci.hotspot.test/src/jdk/vm/ci/hotspot/test/TestDynamicConstant.java
+++ b/test/hotspot/jtreg/compiler/jvmci/jdk.vm.ci.hotspot.test/src/jdk/vm/ci/hotspot/test/TestDynamicConstant.java
@@ -333,6 +333,8 @@ private static void testLoadReferencedType(ResolvedJavaMethod method) {
         Assert.assertTrue((code[bci] & 0xff) == INVOKEDYNAMIC, ""unexpected bytecode"");
         int cpi = beS4(code, bci + 1);
         method.getConstantPool().loadReferencedType(cpi, INVOKEDYNAMIC, false);
+        BootstrapMethodInvocation bmi = method.getConstantPool().lookupBootstrapMethodInvocation(cpi, INVOKEDYNAMIC);
+        Assert.assertEquals(bmi.getName(), ""do_concat"");
     }

     // @formatter:off
```

This results in an IOOB exception because a nonsense constant pool index is returned:
```
test jdk.vm.ci.hotspot.test.TestDynamicConstant.test(): failure
java.lang.IndexOutOfBoundsException: index 0 not between 1 and 35
	at jdk.internal.vm.ci/jdk.vm.ci.hotspot.HotSpotConstantPool.checkBounds(HotSpotConstantPool.java:490)
	at jdk.internal.vm.ci/jdk.vm.ci.hotspot.HotSpotConstantPool.getTagAt(HotSpotConstantPool.java:316)
	at jdk.internal.vm.ci/jdk.vm.ci.hotspot.HotSpotConstantPool.lookupBootstrapMethodInvocation(HotSpotConstantPool.java:596)
	at jdk.vm.ci.hotspot.test.TestDynamicConstant.testLoadReferencedType(TestDynamicConstant.java:336)
	at jdk.vm.ci.hotspot.test.TestDynamicConstant.testLookupBootstrapMethodInvocation(TestDynamicConstant.java:320)
	at jdk.vm.ci.hotspot.test.TestDynamicConstant.test(TestDynamicConstant.java:285)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
	at java.base/java.lang.reflect.Method.invoke(Method.java:578)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:132)
	at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:599)
	at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:174)
	at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
	at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:822)
	at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:147)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
	at org.testng.TestRunner.privateRun(TestRunner.java:764)
	at org.testng.TestRunner.run(TestRunner.java:585)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:384)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:378)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:337)
	at org.testng.SuiteRunner.run(SuiteRunner.java:286)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1218)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1140)
	at org.testng.TestNG.runSuites(TestNG.java:1069)
	at org.testng.TestNG.run(TestNG.java:1037)
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:102)
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:58)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
	at java.base/java.lang.reflect.Method.invoke(Method.java:578)
	at com.sun.javatest.regtest.agent.MainWrapper$MainTask.run(MainWrapper.java:138)
	at java.base/java.lang.Thread.run(Thread.java:1592)
```",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8301995,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i31evf:",9223372036854775807,b22,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,Verified,,"2023-05-08 01:42;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/13858
Date: 2023-05-08 08:34:15 +0000;;;","2023-05-08 03:19;chagedorn;ILW = Broken Native Images, only with JVMCI, no workaround = HLH = P2;;;","2023-05-08 08:59;kvn;Please add prefix [JVMCI] to Subject since it is JVMCI issue.;;;","2023-05-08 15:24;dholmes;Is there no testing that would have caught this when JDK-8301995 was done?;;;","2023-05-08 23:12;jeisl;Unfortunately there was none. I've updated the existing test to cover the method in question, but I assume there is still quite some code that is not yet covered by jtreg tests. We should probably port more tests from the graal repo to jtreg, but most of them rely on the graal compiler, so it is not always that trivial.;;;","2023-05-09 05:30;dukebot;Changeset: 040cb7b5
Author:    Josef Eisl <jeisl@openjdk.org>
Committer: Doug Simon <dnsimon@openjdk.org>
Date:      2023-05-09 12:29:27 +0000
URL:       https://git.openjdk.org/jdk/commit/040cb7b5a9d0d11c601749951df8ff3089250049
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
AArch64: Vector registers are clobbered by some macroassemblers,JDK-8307572,5100261,Bug,Closed,JDK,JDK,software,duke,,,P2,Fixed,njian,njian,njian,2023-05-06 00:46,2023-08-03 04:06,2023-10-01 09:56,2023-05-11 19:06,11,17,21,,,,21,hotspot,,0,amazon-interest,c2,intrinsic,jdk11u-fix-request,jdk11u-fix-yes,jdk17u-fix-request,jdk17u-fix-yes,oracle-triage-21,,,,,,"The code below will generate different results with -XX:+UseSIMDForArrayEquals and -XX:-UseSIMDForArraysEquals. Root cause is, MacroAssembler::arrays_equals() will call to stub code which uses vector registers, but the match rule does not claim the use of vector registers.


import java.util.Arrays;
import java.util.Random;

public class RegStress {
    char [] ca;
    char [] cb;
    char [] cc;

    final int LENGTH = 1024;
    final int ITER = 20000;
    final int NUM = 20;
    float [] fv;
    
    int result = 0;

    public void init() {
        ca = new char[LENGTH];
        fv = new float[NUM];
        for (int i = 0; i < 20; i++) {
            fv[i] = i;
        }
        for (int i = 0; i < LENGTH; i++) {
            ca[i] = 0;
        }
        cb = ca.clone();
        cc = ca.clone();
    }

    public void checkArraysEquals() {
        float t1 = fv[0] + fv[1] + fv[2] + fv[3] + fv[4]
                   + fv[5] + fv[6] + fv[7] + fv[8] + fv[9]
                   + fv[10] + fv[11] + fv[12] + fv[13] + fv[14]
                   + fv[15] + fv[16] + fv[17] + fv[18] + fv[19];
        float t2 = 1.0f;
        if (Arrays.equals(ca, cb)) {
            t2 += fv[0] - fv[1] - fv[2] - fv[3] - fv[4]
                  + fv[5] - fv[6] - fv[7] - fv[8] - fv[9]
                  + fv[10] - fv[11] - fv[12] - fv[13] - fv[14]
                  + fv[15] - fv[16] - fv[17] - fv[18] - fv[19];
        }
        fv[19] = t1 + t2;
    }

    public void test() {
        for (int i = 0; i < ITER; i++) {
            checkArraysEquals();
        }
    }

    public void getResults() {
        System.out.println(fv[19]);
    }
    
    public static void main(String [] args) {
        RegStress t = new RegStress();
        t.init();
        t.test();
        t.getResults();
    }
}

Some other macroassemblers which have similar issue: encode_iso_array, string_indexof, arrays_equals, char_array_compress, byte_array_inflate, also need to be fixed.
",,,,,,,,,,,JDK-8309912,JDK-8311413,JDK-8311928,JDK-8310213,JDK-8313681,,,,,,,,,,,,,,,,,JDK-8313619,,,,JDK-8189103,JDK-8187472,JDK-8189113,JDK-8189112,,,,,,,,,aarch64,,,,,,,,,generic,,,,,,"0|i31eq3:",9223372036854775807,b23,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,Verified,,"2023-05-07 22:24;thartmann;Test requires -XX:-TieredCompilation to reproduce.

ILW = Incorrect result of array equals, on AArch64 with UseSIMDForArrayEquals (default), disable UseSIMDForArrayEquals = HMM = P2;;;","2023-05-09 23:40;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/13895
Date: 2023-05-10 06:36:13 +0000;;;","2023-05-11 19:06;dukebot;Changeset: 33d9a857
Author:    Ningsheng Jian <njian@openjdk.org>
Date:      2023-05-12 02:05:18 +0000
URL:       https://git.openjdk.org/jdk/commit/33d9a857308eed53e06b448691910bc8aa2f8fc9
;;;","2023-05-29 20:23;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/1406
Date: 2023-05-30 03:16:25 +0000;;;","2023-05-29 20:32;njian;Fix Request (17u):

Applies cleanly. Fixes a hidden aarch64 bug, which may cause incorrect result with several common intrinsics used. Verified that test case included the patch failed without the fix on jdk17 and pass with the patch.

Risk is low: small aarch64 only change, simply claiming potentially used vector registers as temp in match rules. Tests passed.;;;","2023-07-10 03:33;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk11u-dev/pull/2032
Date: 2023-07-10 10:29:37 +0000;;;","2023-07-11 19:29;njian;Fix Request (11u):

The issue also exists on JDK11, which may cause incorrect result and hard to debug. Verified that test case included in the patch failed without the fix on jdk11 and passed with the patch. Original patch does not apply cleanly. Main changes are described in the jdk11u PR, but I think the risk is low, as the real change is small and I have carefully checked and compared the change with original patch.

Tests passed, and PR got reviewed in jdk11u repo.
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Build with gcc8 is broken after JDK-8307301,JDK-8307569,5100258,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,jiefu,jiefu,jiefu,2023-05-05 18:09,2023-09-13 13:53,2023-10-01 09:56,2023-05-08 07:00,21,,,,,,21,client-libs,,0,jdk11u-fix-request,jdk11u-fix-yes,jdk17u-fix-request,jdk17u-fix-yes,oraclejdk-na,tencent-interest,,,,,,,,"* For target support_native_java.desktop_libfontmanager_gsubgpos-context.o:
In file included from /data/jdk/src/java.desktop/share/native/libharfbuzz/graph/../hb-set.hh:31,
                 from /data/jdk/src/java.desktop/share/native/libharfbuzz/graph/graph.hh:27,
                 from /data/jdk/src/java.desktop/share/native/libharfbuzz/graph/gsubgpos-graph.hh:27,
                 from /data/jdk/src/java.desktop/share/native/libharfbuzz/graph/gsubgpos-context.cc:27: 
/data/jdk/src/java.desktop/share/native/libharfbuzz/graph/../hb.hh:257:61: error: this use of ""defined"" may not be portable [-Werror=expansion-to-defined]
 #if defined(__OPTIMIZE__) && hb_has_builtin(__builtin_expect)
                                                             ^
In file included from /data/jdk/src/java.desktop/share/native/libharfbuzz/graph/../hb.hh:527,
                 from /data/jdk/src/java.desktop/share/native/libharfbuzz/graph/../hb-set.hh:31,
                 from /data/jdk/src/java.desktop/share/native/libharfbuzz/graph/graph.hh:27,
                 from /data/jdk/src/java.desktop/share/native/libharfbuzz/graph/gsubgpos-graph.hh:27,
                 from /data/jdk/src/java.desktop/share/native/libharfbuzz/graph/gsubgpos-context.cc:27:
/data/jdk/src/java.desktop/share/native/libharfbuzz/graph/../hb-algs.hh:116:39: error: this use of ""defined"" may not be portable [-Werror=expansion-to-defined]
       hb_has_builtin(__builtin_bswap16)))
                                       ^
   ... (rest of output omitted)",,,,,,,,,,,JDK-8310697,JDK-8311271,,,,,,,,,,,,,,,,,,,,JDK-8307301,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i31epf:",9223372036854775807,b22,,,,,,,,,,,"2023-05-08 07:00;dukebot;Changeset: 64c09628
Author:    Jie Fu <jiefu@openjdk.org>
Date:      2023-05-08 13:56:45 +0000
URL:       https://git.openjdk.org/jdk/commit/64c09628664fd19c281723f15bf677c52e360acd
;;;","2023-06-18 23:38;goetz;Fix request [17u]

Requires build fix after harfbuzz backport.
Trivial resolve needed.
SAP nighlty testing passed.;;;","2023-06-18 23:42;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/1466
Date: 2023-06-19 06:37:23 +0000;;;","2023-06-29 23:51;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk11u-dev/pull/2011
Date: 2023-06-30 06:44:45 +0000;;;","2023-06-30 00:00;goetz;Fix request [11u]

Requires build fix after harfbuzz backport.
Trivial resolve needed.
SAP nighlty testing passed. ;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Add better checking in com/sun/jdi tests for debuggee exiting unexpectedly with an exception,JDK-8307559,5100241,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,cjplummer,cjplummer,cjplummer,2023-05-05 12:27,2023-05-17 16:52,2023-10-01 09:56,2023-05-11 16:19,21,,,,,,21,core-svc,,0,noreg-self,,,,,,,,,,,,,"In TestScaffold.java we check the debuggee process exitValue, and allow a 0 or a 1. Otherwise the test fails. You get exitValue 1 when the debuggee exits with an exception. Allowing this was necessary because some tests purposely make the debuggee exit with an exception. However, this runs the risk of not detecting a debuggee exception when none was expected.

JDK-8306758 added support for allowing the test to determine which exitValues are acceptable. This means we can now change TestScaffold to by default only allow exitValue 0. Tests that expect an exception can override TestScaffold.allowedExitValue(int) to allow (or only expect) an exitValue of 1. There are 2 test that will need updating once TestScaffold by default no longer allows exitValue 1:

- ResumeOneThread.java has a latent virtual thread bug that this CR is exposing. In order to fix JDK-8283796, the debuggee is doing a Thread.setDaemon(false) on the threads it creates. This results in an exception when used on a virtual thread, causing the debuggee to exit with exitValue 1, which previously went undetected. The changes for this CR no longer allow exitValue 1, exposing this bug. The proper fix for JDK-8283796 should have been to instead Thread.join() on the created threads.

- ExceptionEvents.java has some test modes that expect the debuggee to exit with an exception, so allowedExitValue() is overridden to expect exitValue 1 instead of 0 for these test modes.

There is also one minor fix needed in TestScaffold when using virtual threads. The virtual thread factory related code includes a catch clause to catch all exceptions. It does this in the code that invokes the virtual thread main method. If any exception is caught, it is saved away. I think the intent was to rethrow it in the main thread just like it would have been thrown if not using the virtual thread factory. However, the code wasn't rethrowing it, so if an exception was thrown by the debuggee virtual thread, the test still exited with exitValue 0. This causes unexpected debuggee exceptions to go unnoticed, and also causes tests that expect a debuggee exception to fail. I tried to fix this by rethrowing the exception, but this causes some tests that track ExceptionEvents to complain about an unexpected exception. So I instead decided to mimic the debuggee exiting with an exception by just printing its stack trace and doing and exit(1).",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8306758,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i31eln:",9223372036854775807,b23,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@3397f701,,,,,,,,,"2023-05-10 17:24;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/13919
Date: 2023-05-10 23:22:03 +0000;;;","2023-05-11 16:19;dukebot;Changeset: 54c06d2d
Author:    Chris Plummer <cjplummer@openjdk.org>
Date:      2023-05-11 23:16:22 +0000
URL:       https://git.openjdk.org/jdk/commit/54c06d2d915e57d822136b403ea7a7675325d6fb
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
"Call to FcConfigAppFontAddFile uses wrong prototype, arguments",JDK-8307542,5100224,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,fweimer,fweimer,fweimer,2023-05-05 08:20,2023-06-23 14:42,2023-10-01 09:56,2023-06-16 05:22,jfx20,,,,,,jfx21,javafx,,0,noreg-trivial,,,,,,,,,,,,,"This code

    225         if (text) {
    226 //            rc = (jboolean)FcConfigAppFontAddFile(arg0, text);
    227             if (fp) {
    228                 rc = (jboolean)((jboolean (*)(void *, const char *))fp)(arg0, text);
    229             }

is problematic for two reasons: jboolean is unsigned char, but FcBool is int, and arg0 is jlong, not void *, as the prototype suggests. The latter leads to build failures with future compilers.

The unsigned char/int difference may cause problems on certain platforms, depending on how the calling convention differ.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8173468,,,,,,,,,,,,generic,,,,,,,,,generic,,,,,,"0|i31ehv:",9223372036854775807,b23,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4143e3f7,,,,,,,,,"2023-05-05 09:01;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jfx/pull/1128
Date: 2023-05-05 15:56:40 +0000;;;","2023-06-16 05:22;dukebot;Changeset: 42321838
Author:    Florian Weimer <fweimer@openjdk.org>
Committer: Kevin Rushforth <kcr@openjdk.org>
Date:      2023-06-16 12:19:10 +0000
URL:       https://git.openjdk.org/jfx/commit/42321838b98d2ebb3d8384c88a764ff2b4d70581
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Memory leak in TreeTableView when calling refresh,JDK-8307538,5099505,Bug,Resolved,JDK,JDK,software,duke,,,P2,Fixed,angorya,webbuggrp,webbuggrp,2023-04-26 00:12,2023-07-22 04:10,2023-10-01 09:56,2023-06-06 11:04,jfx20,jfx21,,,,,jfx21,javafx,,0,dcspn,regression,regression_8295809,reproducer-yes,sn_143,sn_144,sn_145,webbug,,,,,,"ADDITIONAL SYSTEM INFORMATION :
any OS

edit: **the issue only occurs with TreeTableView**

A DESCRIPTION OF THE PROBLEM :
Tree/TableView TableRow & TableCells are created and cached, to reuse when scrolling around the table. When the code calls TableView.refresh() method to redraw the layout (eg. because of data change, or painting change, etc.) the old TableRow and TableCell objects are discarded and new ones are created. However there are properties where the old TableRow and TableCell objects (actually the Skins) installed listeners, which are not removed when new TableRow and TableCell objects are created, thus making the old TableRow and TableCell objects reside in memory forever and they cannot be garbage collected.

REGRESSION : Last worked in version jfx19.0.2

STEPS TO FOLLOW TO REPRODUCE THE PROBLEM :
Create a TableView with some columns and rows. Place a button on the Scene, and the button's action should call tableView.refresh(). Click it several times (you can also do it in a for cycle), and check the memory consumption and memory leak objects using some profiler tool (Eclipse Memory Analyzer for example). You will see, that there will be a lot of TableCell objects held in memory (with a huge table after a few refresh calls there can be tenthousands of TableCell objects held in memory).

EXPECTED VERSUS ACTUAL BEHAVIOR :
EXPECTED -
The discarded TableCell/TableRow objects should be released.
ACTUAL -
They are kept in memory

---------- BEGIN SOURCE ----------
import javafx.application.Application;
import javafx.application.Platform;
import javafx.beans.property.SimpleStringProperty;
import javafx.scene.Scene;
import javafx.scene.control.Button;
import javafx.scene.control.TreeItem;
import javafx.scene.control.TreeTableColumn;
import javafx.scene.control.TreeTableView;
import javafx.scene.layout.BorderPane;
import javafx.stage.Stage;
public class MemLeakTest
{
    public static class Person
    {
        public Person(String firstname, String lastname)
        {
            this.firstname = firstname;
            this.lastname = lastname;
        }

        public String firstname;
        public String lastname;
    }

    public static class MainApp extends Application
    {
        @Override
        public void start(Stage primaryStage) throws Exception
        {
            BorderPane pane = new BorderPane();
            Scene scene = new Scene(pane, 800, 600);

            TreeTableView<Person> personTreeTableView = new TreeTableView<>();

            Button refresh = new Button(""Refresh"");
            refresh.setOnAction(event ->
            {
                personTreeTableView.refresh();
            });
            pane.setBottom(refresh);

            TreeTableColumn<Person, String> column1 = new TreeTableColumn<>(""First name"");
            column1.setCellValueFactory(param -> new SimpleStringProperty(param.getValue().getValue().firstname));

            TreeTableColumn<Person, String> column2 = new TreeTableColumn<>(""Last name"");
            column2.setCellValueFactory(param -> new SimpleStringProperty(param.getValue().getValue().lastname));

            personTreeTableView.getColumns().addAll(column1, column2);

            TreeItem<Person> root = new TreeItem<>(null);
            personTreeTableView.setShowRoot(false);

            root.getChildren().add(new TreeItem<>(new Person(""Eric Maxim"", ""Choupo-Moting"")));
            root.getChildren().add(new TreeItem<>(new Person(""Thomas"", ""Müller"")));
            root.getChildren().add(new TreeItem<>(new Person(""Sadio"", ""Mané"")));
            root.getChildren().add(new TreeItem<>(new Person(""Manuel"", ""Neuer"")));
            root.getChildren().add(new TreeItem<>(new Person(""Yann"", ""Sommer"")));
            root.getChildren().add(new TreeItem<>(new Person(""Jamal"", ""Musiala"")));
            root.getChildren().add(new TreeItem<>(new Person(""Leroy"", ""Sané"")));
            root.getChildren().add(new TreeItem<>(new Person(""Benjamin"", ""Pavard"")));
            root.getChildren().add(new TreeItem<>(new Person(""Kingsley"", ""Coman"")));
            root.getChildren().add(new TreeItem<>(new Person(""Leon"", ""Goretzka"")));
            root.getChildren().add(new TreeItem<>(new Person(""Joshua"", ""Kimmich"")));

            personTreeTableView.setRoot(root);

            pane.setCenter(personTreeTableView);

            primaryStage.setScene(scene);
            primaryStage.sizeToScene();

            primaryStage.show();
        }
    }

    public static void main(String... args)
    {
        Platform.startup(() ->
        {
            try
            {
                new MainApp().start(new Stage());
            }
            catch (Exception e)
            {
                throw new RuntimeException(e);
            }
        });
    }
}

---------- END SOURCE ----------

CUSTOMER SUBMITTED WORKAROUND :
I found that com.sun.javafx.scene.control.ListenerHelper is responsible to install the property invalidation/change listeners for the TableRow/TableCell components. Wrapping these listeners into WeakInvalidation/ChangeListener solved the problem, after this change these objects could be released by the GC system.

package com.sun.javafx.scene.control;

import java.lang.ref.WeakReference;
import java.util.ArrayList;
import java.util.function.Consumer;
import java.util.function.Function;
import javafx.beans.InvalidationListener;
import javafx.beans.Observable;
import javafx.beans.WeakInvalidationListener;
import javafx.beans.value.ChangeListener;
import javafx.beans.value.ObservableValue;
import javafx.beans.value.WeakChangeListener;
import javafx.collections.*;
import javafx.concurrent.Task;
import javafx.event.Event;
import javafx.event.EventHandler;
import javafx.event.EventType;
import javafx.scene.Node;
import javafx.scene.Scene;
import javafx.scene.control.MenuItem;
import javafx.scene.control.SkinBase;
import javafx.scene.control.TableColumnBase;
import javafx.scene.control.TreeItem;
import javafx.scene.transform.Transform;
import javafx.stage.Window;

/**
 * This class provides convenience methods for adding various listeners, both
 * strong and weak, as well as a single {@link #disconnect()} method to remove
 * all listeners.
 * <p>
 * There are two usage patterns:
 * <ul>
 * <li>Client code registers a number of listeners and removes them all at once
 * via {@link #disconnect()} call.
 * <li>Client code registers a number of listeners and removes one via its
 * {@link IDisconnectable} instance.
 * </ul>
 *
 * This class is currently used for clean replacement of {@link Skin}s.
 * We should consider making this class a part of the public API in {@code javax.base},
 * since it proved itself useful in removing listeners and handlers in bulk at the application level.
 */
public class ListenerHelper implements IDisconnectable {
    private WeakReference<Object> ownerRef;
    private final ArrayList<IDisconnectable> items = new ArrayList<>(4);
    private static Function<SkinBase<?>,ListenerHelper> accessor;

    public ListenerHelper(Object owner) {
        ownerRef = new WeakReference<>(owner);
    }

    public ListenerHelper() {
    }

    public static void setAccessor(Function<SkinBase<?>,ListenerHelper> a) {
        accessor = a;
    }

    public static ListenerHelper get(SkinBase<?> skin) {
        return accessor.apply(skin);
    }

    public IDisconnectable addDisconnectable(Runnable r) {
        IDisconnectable d = new IDisconnectable() {
            @Override
            public void disconnect() {
                items.remove(this);
                r.run();
            }
        };
        items.add(d);
        return d;
    }

    @Override
    public void disconnect() {
        for (int i = items.size() - 1; i >= 0; i--) {
            IDisconnectable d = items.remove(i);
            d.disconnect();
        }
    }

    private boolean isAliveOrDisconnect() {
        if (ownerRef != null) {
            if (ownerRef.get() == null) {
                disconnect();
                return false;
            }
        }
        return true;
    }

    // change listeners

    public IDisconnectable addChangeListener(Runnable callback, ObservableValue<?>... props) {
        return addChangeListener(callback, false, props);
    }

    public IDisconnectable addChangeListener(Runnable onChange, boolean fireImmediately, ObservableValue<?>... props) {
        if (onChange == null) {
            throw new NullPointerException(""onChange must not be null."");
        }

        ChLi li = new ChLi() {
            @Override
            public void disconnect() {
                for (ObservableValue p : props) {
                    p.removeListener(this);
                }
                items.remove(this);
            }

            @Override
            public void changed(ObservableValue p, Object oldValue, Object newValue) {
                if (isAliveOrDisconnect()) {
                    onChange.run();
                }
            }
        };

        items.add(li);

        for (ObservableValue p : props) {
            p.addListener(new WeakChangeListener(li));
        }

        if (fireImmediately) {
            onChange.run();
        }

        return li;
    }

    public <T> IDisconnectable addChangeListener(ObservableValue<T> prop, ChangeListener<T> listener) {
        return addChangeListener(prop, false, listener);
    }

    public <T> IDisconnectable addChangeListener(ObservableValue<T> prop, boolean fireImmediately, ChangeListener<T> listener) {
        if (listener == null) {
            throw new NullPointerException(""Listener must be specified."");
        }

        ChLi<T> li = new ChLi<T>() {
            @Override
            public void disconnect() {
                prop.removeListener(this);
                items.remove(this);
            }

            @Override
            public void changed(ObservableValue<? extends T> src, T oldValue, T newValue) {
                if (isAliveOrDisconnect()) {
                    listener.changed(src, oldValue, newValue);
                }
            }
        };

        items.add(li);
        prop.addListener(new WeakChangeListener<T>(li));

        if (fireImmediately) {
            T v = prop.getValue();
            listener.changed(prop, null, v);
        }

        return li;
    }

    public <T> IDisconnectable addChangeListener(ObservableValue<T> prop, Consumer<T> callback) {
        return addChangeListener(prop, false, callback);
    }

    public <T> IDisconnectable addChangeListener(ObservableValue<T> prop, boolean fireImmediately, Consumer<T> callback) {
        if (callback == null) {
            throw new NullPointerException(""Callback must be specified."");
        }

        ChLi<T> li = new ChLi<T>() {
            @Override
            public void disconnect() {
                prop.removeListener(this);
                items.remove(this);
            }

            @Override
            public void changed(ObservableValue<? extends T> observable, T oldValue, T newValue) {
                if (isAliveOrDisconnect()) {
                    callback.accept(newValue);
                }
            }
        };

        items.add(li);
        prop.addListener(new WeakChangeListener<T>(li));

        if (fireImmediately) {
            T v = prop.getValue();
            callback.accept(v);
        }

        return li;
    }

    // invalidation listeners

    public IDisconnectable addInvalidationListener(Runnable callback, ObservableValue<?>... props) {
        return addInvalidationListener(callback, false, props);
    }

    public IDisconnectable addInvalidationListener(Runnable callback, boolean fireImmediately, ObservableValue<?>... props) {
        if (callback == null) {
            throw new NullPointerException(""Callback must be specified."");
        }

        InLi li = new InLi() {
            @Override
            public void disconnect() {
                for (ObservableValue p : props) {
                    p.removeListener(this);
                }
                items.remove(this);
            }

            @Override
            public void invalidated(Observable p) {
                if (isAliveOrDisconnect()) {
                    callback.run();
                }
            }
        };

        items.add(li);

        for (ObservableValue p : props) {
            p.addListener(new WeakInvalidationListener(li));
        }

        if (fireImmediately) {
            callback.run();
        }

        return li;
    }

    public <T> IDisconnectable addInvalidationListener(ObservableValue<T> prop, InvalidationListener listener) {
        return addInvalidationListener(prop, false, listener);
    }

    public <T> IDisconnectable addInvalidationListener(ObservableValue<T> prop, boolean fireImmediately, InvalidationListener listener) {
        if (listener == null) {
            throw new NullPointerException(""Listener must be specified."");
        }

        InLi li = new InLi() {
            @Override
            public void disconnect() {
                prop.removeListener(this);
                items.remove(this);
            }

            @Override
            public void invalidated(Observable observable) {
                if (isAliveOrDisconnect()) {
                    listener.invalidated(observable);
                }
            }
        };

        items.add(li);
        prop.addListener(new WeakInvalidationListener(li));

        if (fireImmediately) {
            listener.invalidated(prop);
        }

        return li;
    }

    // list change listeners

    public <T> IDisconnectable addListChangeListener(ObservableList<T> list, ListChangeListener<T> listener) {
        if (listener == null) {
            throw new NullPointerException(""Listener must be specified."");
        }

        LiChLi<T> li = new LiChLi<T>() {
            @Override
            public void disconnect() {
                list.removeListener(this);
                items.remove(this);
            }

            @Override
            public void onChanged(Change<? extends T> ch) {
                if (isAliveOrDisconnect()) {
                    listener.onChanged(ch);
                }
            }
        };

        items.add(li);
        list.addListener(new WeakListChangeListener<T>(li));

        return li;
    }

    // map change listener

    public <K,V> IDisconnectable addMapChangeListener(ObservableMap<K,V> list, MapChangeListener<K,V> listener) {
        if (listener == null) {
            throw new NullPointerException(""Listener must be specified."");
        }

        MaChLi<K,V> li = new MaChLi<K,V>() {
            @Override
            public void disconnect() {
                list.removeListener(this);
                items.remove(this);
            }

            @Override
            public void onChanged(Change<? extends K, ? extends V> ch) {
                if (isAliveOrDisconnect()) {
                    listener.onChanged(ch);
                }
            }
        };

        items.add(li);
        list.addListener(new WeakMapChangeListener<>(li));

        return li;
    }

    // set change listeners

    public <T> IDisconnectable addSetChangeListener(ObservableSet<T> set, SetChangeListener<T> listener) {
        if (listener == null) {
            throw new NullPointerException(""Listener must be specified."");
        }

        SeChLi<T> li = new SeChLi<T>() {
            @Override
            public void disconnect() {
                set.removeListener(this);
                items.remove(this);
            }

            @Override
            public void onChanged(Change<? extends T> ch) {
                if (isAliveOrDisconnect()) {
                    listener.onChanged(ch);
                }
            }
        };

        items.add(li);
        set.addListener(new WeakSetChangeListener<T>(li));

        return li;
    }

    // event handlers

    public <T extends Event> IDisconnectable addEventHandler(Object x, EventType<T> t, EventHandler<T> handler) {
        EvHa<T> h = new EvHa<>(handler) {
            @Override
            public void disconnect() {
                if (x instanceof Node n) {
                    n.removeEventHandler(t, this);
                } else if (x instanceof Window y) {
                    y.removeEventHandler(t, this);
                } else if (x instanceof Scene y) {
                    y.removeEventHandler(t, this);
                } else if (x instanceof MenuItem y) {
                    y.removeEventHandler(t, this);
                } else if (x instanceof TreeItem y) {
                    y.removeEventHandler(t, this);
                } else if (x instanceof TableColumnBase y) {
                    y.removeEventHandler(t, this);
                } else if (x instanceof Transform y) {
                    y.removeEventHandler(t, this);
                } else if (x instanceof Task y) {
                    y.removeEventHandler(t, this);
                }
                items.remove(this);
            }
        };

        items.add(h);

        // we really need an interface here ... ""HasEventHandlers""
        if (x instanceof Node y) {
            y.addEventHandler(t, h);
        } else if (x instanceof Window y) {
            y.addEventHandler(t, h);
        } else if (x instanceof Scene y) {
            y.addEventHandler(t, h);
        } else if (x instanceof MenuItem y) {
            y.addEventHandler(t, h);
        } else if (x instanceof TreeItem y) {
            y.addEventHandler(t, h);
        } else if (x instanceof TableColumnBase y) {
            y.addEventHandler(t, h);
        } else if (x instanceof Transform y) {
            y.addEventHandler(t, h);
        } else if (x instanceof Task y) {
            y.addEventHandler(t, h);
        } else {
            throw new IllegalArgumentException(""Cannot add event handler to "" + x);
        }

        return h;
    }

    // event filters

    public <T extends Event> IDisconnectable addEventFilter(Object x, EventType<T> t, EventHandler<T> handler) {
        EvHa<T> h = new EvHa<>(handler) {
            @Override
            public void disconnect() {
                if (x instanceof Node n) {
                    n.removeEventFilter(t, this);
                } else if (x instanceof Window y) {
                    y.removeEventFilter(t, this);
                } else if (x instanceof Scene y) {
                    y.removeEventFilter(t, this);
                } else if (x instanceof Transform y) {
                    y.removeEventFilter(t, this);
                } else if (x instanceof Task y) {
                    y.removeEventFilter(t, this);
                }
                items.remove(this);
            }
        };

        items.add(h);

        // we really need an interface here ... ""HasEventFilters""
        if (x instanceof Node y) {
            y.addEventFilter(t, h);
        } else if (x instanceof Window y) {
            y.addEventFilter(t, h);
        } else if (x instanceof Scene y) {
            y.addEventFilter(t, h);
        } else if (x instanceof Transform y) {
            y.addEventFilter(t, h);
        } else if (x instanceof Task y) {
            y.addEventFilter(t, h);
        } else {
            throw new IllegalArgumentException(""Cannot add event filter to "" + x);
        }

        return h;
    }

    //

    private static abstract class ChLi<T> implements IDisconnectable, ChangeListener<T> { }

    private static abstract class InLi implements IDisconnectable, InvalidationListener { }

    private static abstract class LiChLi<T> implements IDisconnectable, ListChangeListener<T> { }

    private static abstract class MaChLi<K,V> implements IDisconnectable, MapChangeListener<K,V> { }

    private static abstract class SeChLi<T> implements IDisconnectable, SetChangeListener<T> { }

    private abstract class EvHa<T extends Event> implements IDisconnectable, EventHandler<T> {
        private final EventHandler<T> handler;

        public EvHa(EventHandler<T> h) {
            this.handler = h;
        }

        @Override
        public void handle(T ev) {
            if (isAliveOrDisconnect()) {
                handler.handle(ev);
            }
        }
    }
}


FREQUENCY : always


",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8312963,JDK-8294809,,,JDK-8295809,,,,,"2023-05-05 06:08;pnarayanaswa;Capture0.PNG;https://bugs.openjdk.org/secure/attachment/103728/Capture0.PNG","2023-05-05 06:08;pnarayanaswa;Capture1.PNG;https://bugs.openjdk.org/secure/attachment/103729/Capture1.PNG","2023-05-05 06:08;pnarayanaswa;Capture2.PNG;https://bugs.openjdk.org/secure/attachment/103730/Capture2.PNG","2023-05-05 06:08;pnarayanaswa;MemLeakTest.java;https://bugs.openjdk.org/secure/attachment/103731/MemLeakTest.java",,,,generic,,,,,,,,,generic,,,,,,"0|i31a23:",9223372036854775807,b21,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@67282485,,,,,,,,,"2023-05-05 06:08;pnarayanaswa;Checked with attached testcase in Windows 10, 
Test observation
=============
Observed number of object of javafx.scene.control.TreeTableRow increase as refreshed in jfx20, jfx20.0.1 and jfx21ea16,

No increase of object observed in jfx11, jfx17 and jfx19.0.2;;;","2023-05-05 06:33;kcr;Removing 20.0.1 from the affected version (we one ever put one from each release family).;;;","2023-05-05 06:35;kcr;This is a serious regression with no obvious app-level workaround.;;;","2023-05-05 12:39;angorya;This issue happens only in TreeTableView, TableView is ok.;;;","2023-05-08 10:41;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jfx/pull/1129
Date: 2023-05-05 21:55:48 +0000;;;","2023-05-11 15:25;angorya;this bug was introduced by JDK-8295809;;;","2023-06-06 11:04;dukebot;Changeset: 17ed2e73
Author:    Andy Goryachev <angorya@openjdk.org>
Date:      2023-06-06 18:03:12 +0000
URL:       https://git.openjdk.org/jfx/commit/17ed2e73256c50116b5e9404093aa51c0b4c1b9a
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
FileAlreadyExistsException from NativeLibLoader when running concurrent applications with empty cache,JDK-8307536,5100216,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,jpereda,jpereda,jpereda,2023-05-05 06:04,2023-09-14 00:58,2023-10-01 09:56,2023-08-17 02:30,jfx20,,,,,,jfx22,javafx,,0,,,,,,,,,,,,,,"In a CI environment, or while unit testing, it is common to run several tests in parallel, while cleaning initially the cache:

rm -rf ~/.openjfx/cache/ 
mvn clean test

(or gradle or any other build tool for that matter).

In this scenario, it is possible that one of the test fails, and this exception (or similar) can be seen:

Error: Loading library prism_es2 from resource failed: java.nio.file.FileAlreadyExistsException:~/.openjfx/cache/21-ea+5/aarch64/libprism_es2.dylib
java.nio.file.FileAlreadyExistsException: ~/.openjfx/cache/21-ea+5/aarch64/libprism_es2.dylib
	at java.base/sun.nio.fs.UnixException.translateToIOException(UnixException.java:94)
	at java.base/sun.nio.fs.UnixException.rethrowAsIOException(UnixException.java:106)
	at java.base/sun.nio.fs.UnixException.rethrowAsIOException(UnixException.java:111)
	at java.base/sun.nio.fs.UnixFileSystemProvider.newByteChannel(UnixFileSystemProvider.java:218)
	at java.base/java.nio.file.spi.FileSystemProvider.newOutputStream(FileSystemProvider.java:484)
	at java.base/java.nio.file.Files.newOutputStream(Files.java:228)
	at java.base/java.nio.file.Files.copy(Files.java:3160)
	at com.sun.glass.utils.NativeLibLoader.cacheLibrary(NativeLibLoader.java:303)
	at com.sun.glass.utils.NativeLibLoader.installLibraryFromResource(NativeLibLoader.java:215)
	at com.sun.glass.utils.NativeLibLoader.loadLibraryFromResource(NativeLibLoader.java:197)
	at com.sun.glass.utils.NativeLibLoader.loadLibraryInternal(NativeLibLoader.java:138)
	at com.sun.glass.utils.NativeLibLoader.loadLibrary(NativeLibLoader.java:54)
	at com.sun.prism.es2.ES2Pipeline.lambda$static$0(ES2Pipeline.java:63)
	at java.base/java.security.AccessController.doPrivileged(AccessController.java:318)
	at com.sun.prism.es2.ES2Pipeline.<clinit>(ES2Pipeline.java:52)
	at java.base/java.lang.Class.forName0(Native Method)
	at java.base/java.lang.Class.forName(Class.java:375)
	at com.sun.prism.GraphicsPipeline.createPipeline(GraphicsPipeline.java:218)
	at com.sun.javafx.tk.quantum.QuantumRenderer$PipelineRunnable.init(QuantumRenderer.java:92)
	at com.sun.javafx.tk.quantum.QuantumRenderer$PipelineRunnable.run(QuantumRenderer.java:125)
	at java.base/java.lang.Thread.run(Thread.java:833)

While NativeLibLoader::loadLibrary is synchronized, this doesn't work while running from different JVMs.

Since each test uses a different process, the above exception can happen when a library file is being written to the cache as part of one process, while the other process doesn't find it yet and tries to create it as well.

Possible workaround: This error could be prevented if the tests run in serial instead, or if there was a initial step to set the cache before the tests could run.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8316276,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i31eg3:",9223372036854775807,b05,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4143e3f7,,,,,,,,,"2023-05-05 06:14;kcr;Is this really a bug? Many caching systems will suffer the same fate if you remove the cache from one process while another is using it.;;;","2023-05-08 02:40;jpereda;I've reworded the issue, hopefully it is more clear now. 
It it not that every process removes the cache before it starts, but that two process start at the same time, having an empty cache.;;;","2023-06-03 07:21;kcr;Thanks for the clarification. We could fix this by using a lock file to synchronize multiple processes. Care would need to be taken that the lock file is always deleted, even if the operation fails.

[~jpereda] or [~sykora] Would one of you be able to take this bug?;;;","2023-07-28 02:17;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jfx/pull/1188
Date: 2023-07-28 09:11:07 +0000;;;","2023-08-17 02:30;dukebot;Changeset: 72f05a79
Author:    Jose Pereda <jpereda@openjdk.org>
Date:      2023-08-17 09:29:14 +0000
URL:       https://git.openjdk.org/jfx/commit/72f05a79bf66e39848e491320447997e54625617
;;;","2023-08-17 05:05;kcr;[~jpereda] This might be a candidate for jfx21u if you want to make such a request. If so, I recommend waiting to do the backport until the fix has been tested in an ea build of 22.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
java.util.logging.Handlers should be more VirtualThread friendly,JDK-8307535,5100215,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,dfuchs,dfuchs,dfuchs,2023-05-05 06:01,2023-05-17 16:53,2023-10-01 09:56,2023-05-12 08:25,,,,,,,21,core-libs,,0,noreg-hard,,,,,,,,,,,,,"Several Handlers class use monitors to synchronize when formatting / publishing LogRecords.
When logging within a VirtualThread, holding this monitor can cause the carrier thread to be pinned.
Handlers could use jdk.internal.misc.InternalLock,  in a similar way to some java.io classes (such as PrintStream) to avoid pinning the carrier thread. ",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i31efv:",9223372036854775807,b23,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@3cc899dc,,,,,,,,,"2023-05-05 06:50;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/13832
Date: 2023-05-05 13:43:43 +0000;;;","2023-05-12 08:25;dukebot;Changeset: 3c68c352
Author:    Daniel Fuchs <dfuchs@openjdk.org>
Date:      2023-05-12 15:24:11 +0000
URL:       https://git.openjdk.org/jdk/commit/3c68c352fc3d3bff3d80bafcf04118759f4a2acf
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
[aarch64] JDK8 single-step debugging is extremely slow,JDK-8307531,5100210,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,snazarki,snazarki,snazarki,2023-05-05 05:09,2023-05-17 10:13,2023-10-01 09:56,2023-05-12 03:34,openjdk8u372,,,,,,openjdk8u382,hotspot,,0,jdk8u-fix-request,jdk8u-fix-yes,sustaining,,,,,,,,,,,"Debugging on linux-aarch64 platforms can be extremely slow (10x slower than jdk11) due to an unoptimal implementation of jvmti:post_method_exit, the method recalculates a stack depth on each call. 
```
void JvmtiExport::post_method_exit(JavaThread *thread, Method* method, frame current_frame) {
....
#ifdef AARCH64
  // FIXME: this is just a kludge to get JVMTI going.  Compiled
  // MethodHandle code doesn't call the JVMTI notify routines, so the
  // stack depth we see here is wrong.
  state->invalidate_cur_stack_depth();
#else
  state->decr_cur_stack_depth();
#endif
}
```
It seems this code is not correct anymore, since nothing similar exists in jdk11+

This bug exists since the merge of jdk8 aarch64 port into jdk8u repo. 

To reproduce:
1. Build attached application with maven: ""mvn package""
2. Run it in debugger mode: ""java -agentlib:jdwp=transport=dt_socket,address=127.0.0.1:5555,suspend=y,server=y -jar target/maventest-0.0.1-SNAPSHOT-jar-with-dependencies.jar""
3. Attach debugger from separate console: ""jdb -attach localhost:5555""
3.1 Set a breakpoint at main function: ""stop in Main.main""
3.2. Continue execution: ""cont""
3.3. When the breapoint hits, issue several step-over commands, the second one will take around 30 seconds to complete. ",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"2023-05-05 05:12;snazarki;bouncycastle.tgz;https://bugs.openjdk.org/secure/attachment/103722/bouncycastle.tgz",,,,,,,aarch64,,,,,,,,,linux,,,,,,"0|i31eer:",9223372036854775807,b02,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@661b156a,,,,,,,,,"2023-05-05 09:58;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk8u-dev/pull/313
Date: 2023-05-05 15:14:15 +0000;;;","2023-05-08 07:23;snazarki;The PR was approved by aph. The jvmti test are passed. ;;;","2023-05-12 03:34;dukebot;Changeset: 3e69b49f
Author:    Sergey Nazarkin <snazarki@openjdk.org>
Committer: Yuri Nesterenko <yan@openjdk.org>
Date:      2023-05-12 10:32:15 +0000
URL:       https://git.openjdk.org/jdk8u-dev/commit/3e69b49f71e1c00a4761a9e63440cb7af1216389
;;;","2023-05-17 10:13;dukebot;Changeset: 3e69b49f
Author:    Sergey Nazarkin <snazarki@openjdk.org>
Committer: Yuri Nesterenko <yan@openjdk.org>
Date:      2023-05-12 10:32:15 +0000
URL:       https://git.openjdk.org/jdk8u/commit/3e69b49f71e1c00a4761a9e63440cb7af1216389
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
[JFR] Better handling of tampered JFR repository,JDK-8307526,5100205,Bug,Resolved,JDK,JDK,software,duke,,,P2,Fixed,jnordstrom,shadowbug,shadowbug,2023-05-05 01:58,2023-08-29 00:41,2023-10-01 09:56,2023-07-15 17:34,17,21,8u371-perf,,,,22,hotspot,,0,amazon-interest,bugdb_35345457,hgupdate-sync,Internal,jdk17u-fix-request,jdk17u-fix-yes,,,,,,,,"If chunkfiles are removed from the JFR repository (defaulting to /tmp) during flight, an Error can be thrown, and the JFR Periodic Tasks is ended. This makes the disk rotation stop working, making JFR adding data to one single chunkfile which grows well beyond any maxsizes set, and effectively fills up all available disk space.",,,,,,,,,,,JDK-8312228,JDK-8312729,JDK-8312510,JDK-8311537,JDK-8313188,JDK-8312925,,,,,,,,,,,,,,,,JDK-8314927,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i31edn:",9223372036854775807,master,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@42995637,,,,,,,,,"2023-05-11 01:02;jnordstrom;ILW=HML=P2, Impact is high since tmp space will eventually be filled; several sightings of cu clearing /tmp at will, also previous JDK versions don't have the same issue; workaround is to not delete JFR files from /tmp.;;;","2023-06-07 08:03;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/14360
Date: 2023-06-07 14:48:52 +0000;;;","2023-07-14 15:58;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk21/pull/131
Date: 2023-07-14 22:51:24 +0000;;;","2023-07-15 17:31;jnordstrom;Changeset: 66d27365
Author: Joakim Nordström <jnordstrom@openjdk.org>
Committer: Erik Gahlin <egahlin@openjdk.org>
Date: 2023-07-05 22:26:57 +0000
URL: https://git.openjdk.org/jdk/commit/66d2736521611fbe7652356894d046c17d7cf743;;;","2023-07-15 17:31;jnordstrom;Fix was pushed while main issue was targeted to '21'. Reset the main issue to fixed in '22' and copied the Robo Duke entry here.;;;","2023-07-24 03:09;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/1617
Date: 2023-07-24 10:04:04 +0000;;;","2023-07-26 00:00;goetz;Fix request [17u]

I backport this for parity with 17.0.9-oracle.
Risk limited to jfr, thus small.
I had to resolve and adapt.
SAP nightly testing passed.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
IndirectVarHandle.isAccessModeSupported throws NPE,JDK-8307508,5100189,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,liach,liach,liach,2023-05-04 20:40,2023-07-12 13:06,2023-10-01 09:56,2023-06-13 10:06,20,21,,,,,22,core-libs,,0,hgupdate-sync,,,,,,,,,,,,,"IndirectVarHandle, added by foreign API to support coordinate mapping, value filtering, etc. does not properly implement VarHandle.isAccessModeSupported. It throws an NPE upon invocation, which is most likely undesired.

Example code in JShell (run with --enable-preview):
```java
var lookup = MethodHandles.lookup();
var arrayVh = MethodHandles.arrayElementVarHandle(int[].class);
var addOne = lookup.bind((IntUnaryOperator) a -> a + 1, ""applyAsInt"", MethodType.methodType(int.class, int.class));
var patchedArrayVh = MethodHandles.filterCoordinates(arrayVh, 1, addOne);
patchedArrayVh.isAccessModeSupported(VarHandle.AccessMode.GET); // NPE
```",,,,,,,,,,,JDK-8309980,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i31ea3:",9223372036854775807,b02,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@1cfeb1de,,,,,,,,,"2023-06-09 10:50;mchung;I suggest to split the fix for this issue from PR 13821 in its own PR as it has no relationship with JDK-8291065.  That would also make it easier to backport if desirable.;;;","2023-06-11 22:32;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/14409
Date: 2023-06-12 05:27:35 +0000;;;","2023-06-13 10:06;dukebot;Changeset: 75dcc4ef
Author:    Chen Liang <liach@openjdk.org>
Committer: Mandy Chung <mchung@openjdk.org>
Date:      2023-06-13 17:05:52 +0000
URL:       https://git.openjdk.org/jdk/commit/75dcc4ef94d90e4aa7f8ca5eccc97c91492d6eed
;;;","2023-06-13 11:11;mchung;[~liach] I think it's good to backport this low-risk fix to jdk21 fixing NPE.;;;","2023-06-13 16:22;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk21/pull/16
Date: 2023-06-13 23:14:29 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Incorrect weight of the first ObjectAllocationSample JFR event,JDK-8307488,5100164,Bug,Resolved,JDK,JDK,software,duke,,,P2,Fixed,mgronlun,apangin,apangin,2023-05-04 13:01,2023-06-29 14:42,2023-10-01 09:56,2023-05-29 03:55,17.0.7,21,,,,,21,hotspot,,0,amazon-interest,noreg-hard,,,,,,,,,,,,"When profiling a production application with JFR, we discovered that some allocation samples have abnormally large 'weight', e.g. an AtomicBoolean allocation was assigned the weight of 17.3 GiB. About 80 of total 26K ObjectAllocationSamples weighed more than 1 GiB each and those samples completely distorted the overall allocation profile.

It turns out that if JFR recording is enabled at runtime, the first sampled allocation in each thread ""accumulates"" all previous allocations happened in this thread before the recording.

I'm attaching WrongAllocationWeight.java that demonstrates the problem. The program allocates 2GB Java objects then starts JFR recording. The first allocation sample in that recording will have the weight more than 2GB.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"2023-05-04 13:00;apangin;WrongAllocationWeight.java;https://bugs.openjdk.org/secure/attachment/103710/WrongAllocationWeight.java",,,,,,,,,,,,,,,,,,,,,,"0|i31e4j:",9223372036854775807,b25,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@42995637,,,,,,,,,"2023-05-04 13:10;apangin;An allocation sample weight is calculated as `allocated_bytes - _last_allocated_bytes` where `allocated_bytes` is a cumulative per-thread counter: https://github.com/openjdk/jdk/blob/197d0cc6031cb470f1bd7678796593ff1bf440ca/src/hotspot/share/jfr/support/jfrObjectAllocationSample.cpp#L38

The problem is that _last_allocated_bytes is updated only after ObjectAllocationSample event is committed, so when there is no active JFR recording, _last_allocated_bytes remains zero.;;;","2023-05-05 14:38;egahlin;Impact High (incorrect data)
Likelihood Low (only happens with JFR in the first chunk)
Workaround High (no known workaround)

ILW = HMH => P2;;;","2023-05-05 14:41;egahlin;Can explain this issue:
https://stackoverflow.com/questions/69718446/how-to-make-sense-of-the-new-java-flight-recorder-objectallocationsample-event;;;","2023-05-25 10:48;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/14158
Date: 2023-05-25 17:42:04 +0000;;;","2023-05-29 03:55;dukebot;Changeset: 7cf6eecd
Author:    Markus Grönlund <mgronlun@openjdk.org>
Date:      2023-05-29 10:53:08 +0000
URL:       https://git.openjdk.org/jdk/commit/7cf6eecdc8e6be627111a08c4db330413506bfd2
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
ProcessTools.java should wait until vthread is completed before checking exceptions,JDK-8307486,5100162,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,lmesnik,lmesnik,lmesnik,2023-05-04 12:43,2023-05-16 16:10,2023-10-01 09:56,2023-05-09 09:39,21,,,,,,21,hotspot,,0,,,,,,,,,,,,,,"Test java/foreign/enablenativeaccess/TestEnableNativeAccessDynamic.java
fails when executed with virtual thread factory.

It is a known problem that virtual threads that they doesn't support permissions.

To reproduce run:
make -- run-test JTREG_VERBOSE=all JTREG_RETAIN=all  JTREG_TEST_THREAD_FACTORY=Virtual  TEST=java/foreign/enablenativeaccess/TestEnableNativeAccessDynamic.java

The outpu of process: 
java -cp .. -ea -esa --enable-preview --enable-native-access=ALL-UNNAMED jdk.test.lib.process.ProcessTools Virtual NativeAccessDynamicMain /home/lmesnik/ws/jdk-8307307/build/linux-x64/test-support/jtreg_open_test_jdk_java_foreign_enablenativeaccess/classes/0/java/foreign/enablenativeaccess/TestEnableNativeAccessDynamic.d/modules panama_module/org.openjdk.foreigntest.PanamaMainDirect false panama_enable_native_access_fail
Trying to get Linker

There is no expected exception while also no output for further actions.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i31e43:",9223372036854775807,b22,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@78d03d9a,,,,,,,,,"2023-05-04 12:45;lmesnik;I think you could try to check how 
 Linker.nativeLinker();
works when executed in virtual thread.

If it works like expected, feel free just to close this issue,;;;","2023-05-05 08:16;mcimadamore;I tried this:

```
import java.lang.foreign.Linker;

public class TestVirtual {
    public static void main(String[] args) throws Throwable {
        Thread thread = Thread.ofVirtual().start(TestVirtual::callLinker);
        thread.join();
    }

    static void callLinker() {
        Linker.nativeLinker();
    }
}
```

This program runs, and prints:

WARNING: A restricted method in java.lang.foreign.Linker has been called
WARNING: java.lang.foreign.Linker::nativeLinker has been called by the unnamed module
WARNING: Use --enable-native-access=ALL-UNNAMED to avoid a warning for this module

All seems to be as expected?;;;","2023-05-05 08:17;mcimadamore;Also, if I run with ""--enable-native-access=java.base"" I get this:

Exception in thread """" java.lang.IllegalCallerException: Illegal native access from: unnamed module @7c7f33d8
	at java.base/java.lang.Module.ensureNativeAccess(Module.java:317)
	at java.base/java.lang.System$2.ensureNativeAccess(System.java:2453)
	at java.base/jdk.internal.reflect.Reflection.ensureNativeAccess(Reflection.java:118)
	at java.base/java.lang.foreign.Linker.nativeLinker(Linker.java:450)
	at TestVirtual.callLinker(TestVirtual.java:10)
	at java.base/java.lang.VirtualThread.run(VirtualThread.java:311)

Which also seems correct (as, because of the command line option, the unnamed module is no longer trusted with native code).;;;","2023-05-05 08:22;mcimadamore;Ok, the issue seems to refer to adding native access permissions to a dynamic module layer.;;;","2023-05-05 08:43;mcimadamore;If I run the very same test that is mentioned in the description from a virtual thread, I get this:

```
Exception in thread """" java.lang.AssertionError: java.lang.reflect.InvocationTargetException
	at Foo.lambda$main$0(Foo.java:20)
	at java.base/java.lang.VirtualThread.run(VirtualThread.java:311)
Caused by: java.lang.reflect.InvocationTargetException
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:118)
	at java.base/java.lang.reflect.Method.invoke(Method.java:578)
	at Foo.run(Foo.java:65)
	at Foo.lambda$main$0(Foo.java:18)
	... 1 more
Caused by: java.lang.IllegalCallerException: Illegal native access from: module panama_module
	at java.base/java.lang.Module.ensureNativeAccess(Module.java:317)
	at java.base/java.lang.System$2.ensureNativeAccess(System.java:2453)
	at java.base/jdk.internal.reflect.Reflection.ensureNativeAccess(Reflection.java:118)
	at java.base/java.lang.foreign.Linker.nativeLinker(Linker.java:450)
	at panama_module/org.openjdk.foreigntest.PanamaMain.main(PanamaMain.java:31)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
	... 4 more

Process finished with exit code 0
```

Which seems to indicate that the virtual thread indeed fails with the expected exception (which here I wrapped into an AssertionError).;;;","2023-05-05 08:45;lmesnik;Let me check, might be exception was swallowed by test executor.
;;;","2023-05-05 08:53;mcimadamore;Could it be a missing join? Since virtual threads are daemon, the VM will exit before any of them will get a chance to run into the illegal access. E.g. for testing I used this class:

```
import java.io.File;
import java.lang.module.ModuleFinder;
import java.net.URL;
import java.net.URLClassLoader;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.util.Arrays;
import java.util.List;
import java.util.stream.Collectors;
import java.util.stream.Stream;

//   java --enable-native-access=ALL-UNNAMED NativeAccessDynamicMain <module-path> <mod/class> <true|false> [main-args]
public class Foo {

    public static void main(String[] args) throws Throwable {
        Thread thread = Thread.ofVirtual().start(() -> {
            try {
                run(args);
            } catch (Throwable ex) {
                throw new AssertionError(ex);
            }
        });
        thread.join();
    }


    public static void run(String[] args) throws Exception {
        String modulePath = args[0];
        String moduleAndClsName = args[1];
        boolean enableNativeAccess = Boolean.parseBoolean(args[2]);
        String[] mainArgs = args.length > 2? Arrays.copyOfRange(args, 3, args.length) : new String[0];

        int idx = moduleAndClsName.indexOf('/');
        String moduleName = moduleAndClsName.substring(0, idx);
        String className = moduleAndClsName.substring(idx+1);

        Path[] paths = Stream.of(modulePath.split(File.pathSeparator))
                .map(Paths::get)
                .toArray(Path[]::new);
        ModuleFinder mf = ModuleFinder.of(paths);
        var mrefs = mf.findAll();
        if (mrefs.isEmpty()) {
            throw new RuntimeException(""No modules module path: "" + modulePath);
        }

        var rootMods = mrefs.stream().
                map(mr->mr.descriptor().name()).
                collect(Collectors.toSet());

        ModuleLayer boot = ModuleLayer.boot();
        var conf = boot.configuration().
                resolve(mf, ModuleFinder.of(), rootMods);
        String firstMod = rootMods.iterator().next();
        URLClassLoader cl = new URLClassLoader(new URL[] { paths[0].toFile().toURL() });
        ModuleLayer.Controller controller = boot.defineModulesWithOneLoader(conf, List.of(boot), cl);
        ModuleLayer layer = controller.layer();
        Module mod = layer.findModule(firstMod).get();

        // conditionally grant native access to the dynamic module created
        if (enableNativeAccess) {
            controller.enableNativeAccess(mod);
        }
        Class mainCls = Class.forName(mod, className);
        var main = mainCls.getMethod(""main"", String[].class);
        main.invoke(null, (Object)mainArgs);
    }
}
```

If I remove the join from the main method, then I can see behavior that is similar to the one reported (e.g. no exception).

;;;","2023-05-05 09:47;alanb;[~lmesnik] In test/lib/jdk/test/lib/process/ProcessTools.java I see:

            if (tg.uncaughtThrowable != null) {
                throw new RuntimeException(tg.uncaughtThrowable);
            }
            vthread.join();

The join needs to be before checking the UHE, otherwise it won't re-throw.;;;","2023-05-08 12:19;lmesnik;[~mcimadamore], [~alanb] Thank you for finding the root cause of the problem!
The processtools should be updated to wait for vthread completion.;;;","2023-05-08 16:24;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/13873
Date: 2023-05-08 23:16:51 +0000;;;","2023-05-09 09:39;dukebot;Changeset: 3aff5eac
Author:    Leonid Mesnik <lmesnik@openjdk.org>
Date:      2023-05-09 16:36:21 +0000
URL:       https://git.openjdk.org/jdk/commit/3aff5eacbd90cc5fc791c9c96b8d114caee9ddb5
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Compiler should accept var _ in nested patterns in switch case,JDK-8307482,5100156,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,abimpoudis,eananeva,eananeva,2023-05-04 11:54,2023-05-28 20:46,2023-10-01 09:56,2023-05-22 01:56,,,,,,,21,tools,,0,,,,,,,,,,,,,,"The spec (https://cr.openjdk.org/~abimpoudis/unnamed/jep443-20230322/specs/unnamed-jls.html) says:

SwitchLabel:
case CaseConstant {, CaseConstant}
case null [, default]
case CasePattern{, CasePattern } [ Guard ]
default
CaseConstant:
ConditionalExpression
CasePattern:
Pattern
….
 
Pattern:
TypePattern
RecordPattern
TypePattern:
LocalVariableDeclaration
The following productions from 4.3, 8.3, 8.4.1, and 14.4 are shown here for convenience:
LocalVariableDeclaration:
{VariableModifier} LocalVariableType VariableDeclaratorList
VariableModifier:
Annotation
final
LocalVariableType:
UnannType
var
 
And JDK-8307444 says:
Neither the unnamed pattern nor var _ may be used at the top level of a pattern, so all of these are prohibited:

    ... instanceof _
    ... instanceof var _
    case _
    case var _

So, using var _ in nested patterns should be accepted by the compiler.

But this code fails:

record TestRecord<T>(T a) {}
    private static <T> int consume(T t) {
        return switch(t) {
            case TestRecord(var _), TestRecord(Integer _) : { //java: as of release 9, '_' is a keyword, and may not be used as an identifier
                yield 1;
            }
            default : {
                yield -2;
            }
        };
    }

    public static void main(String argv[]) {
        System.out.println(consume(new TestRecord(""test"")));
    }

java --version
java 21-internal 2023-09-19 LTS
Java(TM) SE Runtime Environment (build 21-internal-LTS-2023-04-30-1558228.angelos.bimpoudis.dev)
Java HotSpot(TM) 64-Bit Server VM (build 21-internal-LTS-2023-04-30-1558228.angelos.bimpoudis.dev, mixed mode, sharing)",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i31e2r:",9223372036854775807,b24,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4dca67bd,,,,,,,,,"2023-05-08 07:23;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/13528
Date: 2023-04-19 09:47:39 +0000;;;","2023-05-22 01:56;dukebot;Changeset: 8aa50288
Author:    Aggelos Biboudis <abimpoudis@openjdk.org>
Committer: Jan Lahoda <jlahoda@openjdk.org>
Date:      2023-05-22 08:52:36 +0000
URL:       https://git.openjdk.org/jdk/commit/8aa50288a1a6a853bf4d8d97b1849d5744ed7a32
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
CDS Lambda Proxy classes are regenerated in dynamic dump,JDK-8307468,5100139,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,ccheung,iklam,iklam,2023-05-04 09:11,2023-09-18 11:15,2023-10-01 09:56,2023-09-06 08:38,21,,,,,,22,hotspot,,0,cds,,,,,,,,,,,,,"If a Lambda Proxy class has been stored in the CDS static archive, we still generate it again for the dynamic archive. This wastes space in the dynamic archive.

==========
$ java -Xshare:off -XX:DumpLoadedClassList=javac.classlist com.sun.tools.javac.Main HelloWorld.java

$ grep @lambda-proxy javac.classlist | wc -l
169

$ java -Xshare:dump -XX:SharedClassListFile=javac.classlist -XX:SharedArchiveFile=javac-static.jsa -Xlog:cds=debug
[...]
[1.702s][info ][cds] Number of classes 2512
[1.702s][info ][cds]     instance classes   =  2402
[1.702s][info ][cds]       boot             =  1199
[1.702s][info ][cds]       app              =  1133
[1.702s][info ][cds]       platform         =    70
[1.702s][info ][cds]       unregistered     =     0
[1.702s][info ][cds]       (hidden)         =   172 << lambda proxy classes
[1.702s][info ][cds]       (unlinked)       =     0
[1.702s][info ][cds]     obj array classes  =   101
[1.702s][info ][cds]     type array classes =     9
[1.702s][info ][cds]                symbols = 57098

$ java -XX:SharedArchiveFile=javac-static.jsa -XX:ArchiveClassesAtExit=javac-dynamic.jsa -Xlog:cds=debug com.sun.tools.javac.Main HelloWorld.java
[...]
[0.967s][info ][cds] Number of classes 172
[0.967s][info ][cds]     instance classes   =   172
[0.967s][info ][cds]       boot             =    42
[0.967s][info ][cds]       app              =   130
[0.967s][info ][cds]       platform         =     0
[0.967s][info ][cds]       unregistered     =     0
[0.967s][info ][cds]       (hidden)         =   168 << same lambda proxy classes are generated again
[0.967s][info ][cds]       (unlinked)       =     0
[0.967s][info ][cds]     obj array classes  =     0
[0.967s][info ][cds]     type array classes =     0
[0.967s][info ][cds]                symbols =   168
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8316440,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i31dyz:",9223372036854775807,b15,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,,,"2023-05-04 09:20;iklam;The bug is in https://github.com/openjdk/jdk/blob/2adb3b409e8cc87685a4379be3f7beeb53706e2e/src/java.base/share/classes/java/lang/invoke/InnerClassLambdaMetafactory.java#L256-L288

We should call LambdaProxyClassArchive.find first before generating and registering the proxy class. Something like this:

// CDS does not handle disableEagerInitialization or useImplMethodHandle
final bool useCDS = (!disableEagerInitialization && !useImplMethodHandle);
if (useCDS) {
    // load from CDS archive if present
    Class<?> innerClass = LambdaProxyClassArchive.find(targetClass,
                                                       interfaceMethodName,
                                                       factoryType,
                                                       interfaceMethodType,
                                                       implementation,
                                                       dynamicMethodType,
                                                       isSerializable,
                                                       altInterfaces,
                                                       altMethods);
    if (innerClass != null) {
        return innerClass;
    }
}

Class<?> innerClass = generateInnerClass();
if (useCDS && CDS.isDumpingArchive()) {
    LambdaProxyClassArchive.register(targetClass,
                                     interfaceMethodName,
                                     factoryType,
                                     interfaceMethodType,
                                     implementation,
                                     dynamicMethodType,
                                     isSerializable,
                                     altInterfaces,
                                     altMethods,
                                     innerClass);
}
return innerClass;


;;;","2023-08-14 13:16;iklam;In https://github.com/openjdk/leyden/tree/premain branch, we temporarily disabled lambda proxy classes for the static archive, so that AOT and -XX:+RecordTraining will always use the lambda proxy classes stored in the dynamic archive.
;;;","2023-08-31 15:26;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/15524
Date: 2023-08-31 22:11:38 +0000;;;","2023-09-06 08:38;dukebot;Changeset: 25e85db6
Author:    Calvin Cheung <ccheung@openjdk.org>
Date:      2023-09-06 15:37:03 +0000
URL:       https://git.openjdk.org/jdk/commit/25e85db61c062216a553e92fa7944516c7020a1e
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
java.time.Instant calculation bug in until and between methods,JDK-8307466,5100136,Bug,Closed,JDK,JDK,software,duke,,,P3,Fixed,rriggs,rriggs,rriggs,2023-05-04 08:44,2023-08-04 12:49,2023-10-01 09:56,2023-05-09 13:53,18,,,,,,21,core-libs,,0,jdk20u-fix-request,jdk20u-fix-SQE-ok,jdk20u-fix-yes,regression,release-note=yes,,,,,,,,,"Consider the following code:
 
    var t1 = Instant.parse(""2023-05-03T10:00:00.000999Z"");
    var t2 = Instant.parse(""2023-05-03T10:00:01.000Z"");
    var t3 = Instant.parse(""2023-05-03T10:00:01.001Z"");
    
    System.out.println(MILLIS.between(t1, t2));
    System.out.println(MILLIS.between(t1, t3));
 
This prints:
 
    1000
    1000
 
Given that t3 is exactly one millisecond later than t2, it does not seem reasonable that they can both be 1000 milliseconds later than t1.
 
The JavaDoc for between() states ""The calculation returns a whole number, representing the number of complete units between the two temporals.""
 
Assuming I have understood this correctly, I think MILLIS.between(t1, t3) is correct but MILLIS.between(t1, t2) should return 999.

Reported to core-libs-dev mai:
https://mail.openjdk.org/pipermail/core-libs-dev/2023-May/105229.html",,,,,,,,,,,JDK-8308008,JDK-8308140,,,,,,,,,,,JDK-8307578,,,,,,,,,,,,,JDK-8273369,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i31dyb:",9223372036854775807,b22,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@a9a7756,,,,,,,Verified,,"2023-05-04 13:35;rriggs;The bug was introduced in JDK 18 by JDK-8273369.;;;","2023-05-06 23:06;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/13846
Date: 2023-05-05 21:28:25 +0000;;;","2023-05-09 13:53;dukebot;Changeset: 356667f1
Author:    Roger Riggs <rriggs@openjdk.org>
Date:      2023-05-09 20:51:33 +0000
URL:       https://git.openjdk.org/jdk/commit/356667f1559396b09e0b830d92978f2ea7a9300b
;;;","2023-05-11 11:10;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk20u/pull/78
Date: 2023-05-11 17:58:24 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
[REDO] VmObjectAlloc is not generated by intrinsics methods which allocate objects,JDK-8307462,5100132,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,lmesnik,lmesnik,lmesnik,2023-05-04 08:01,2023-08-14 11:56,2023-10-01 09:56,2023-08-08 23:31,18,19,,,,,22,hotspot,,0,,,,,,,,,,,,,,"While fixing https://bugs.openjdk.java.net/browse/JDK-8265795 I noticed that event is not posted in the intrinsics version for many functions where it is used. Including but not limited to clone(), invoke()m allocateInstance() and allocateUninitializedArray(). There are might be other intensified functions (not analogs JVM_ENTRY versions) that allocate objects without post events.

Here is the comment from David H.
""
I agree that fixing intrinsics should be a separate issue - I have to worry that the overhead of posting events can dwarf the operation itself. I would guess the intrinsic would need a short-cut to check if the event is enabled and if so drop back to non-intrinsic version.
""",,,,,,,,,,,,,,,,,,,,,,,,,JDK-8277573,,,JDK-8307519,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i31dxf:",9223372036854775807,b10,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@661b156a,,,,,,,,,"2023-05-04 08:05;lmesnik;See https://bugs.openjdk.org/browse/JDK-8306326 to understand potential performance issues.;;;","2023-08-02 19:50;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/15110
Date: 2023-08-01 19:49:51 +0000;;;","2023-08-08 23:31;dukebot;Changeset: 3fb4805b
Author:    Leonid Mesnik <lmesnik@openjdk.org>
Date:      2023-08-09 06:29:42 +0000
URL:       https://git.openjdk.org/jdk/commit/3fb4805b1ad6d66924fd961f62126a91d188abab
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Linker::nativeLinker should not be restricted,JDK-8307461,5100131,Bug,Resolved,JDK,JDK,software,duke,,,P2,Fixed,mcimadamore,mcimadamore,mcimadamore,2023-05-04 07:34,2023-05-08 03:23,2023-10-01 09:56,2023-05-05 05:31,repo-panama,,,,,,,core-libs,,0,foreign-memaccess+abi,,,,,,,,,,,,,"In the past we made the Linker factory restricted as we did not have a good story for sealing a hierarchy. Since Linker is a restricted interface under JDK control, it is ok to have ""virtual"" caller sensitive method (as we can make sure that all overridden implementation are indeed caller sensitive).

Because of this, we should mark as restricted the methods where the risk actually lies - namely downcallHandle and upcallStub.",,,,,,,,,,,,,,,,,,,,,,,,JDK-8307610,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i31dx7:",9223372036854775807,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@28ce6b78,,,,,,,,,"2023-05-04 07:43;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/panama-foreign/pull/831
Date: 2023-05-04 14:36:11 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Test RedefineSharedClassJFR fail due to wrong assumption,JDK-8307448,5100115,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,sjohanss,sjohanss,sjohanss,2023-05-04 04:47,2023-05-10 23:50,2023-10-01 09:56,2023-05-04 05:52,21,,,,,,21,hotspot,,0,,,,,,,,,,,,,,"The new test serviceability/jvmti/RedefineClasses/RedefineSharedClassJFR.java fails due to the assumption that one of the redefined classes would be in use. There seems to be cases when they are not. 

The fix is to change the test to not expect this.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i31dtn:",9223372036854775807,b22,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@2846162a,,,,,,,,,"2023-05-04 05:15;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/13801
Date: 2023-05-04 12:08:28 +0000;;;","2023-05-04 05:52;dukebot;Changeset: 29233e0a
Author:    Stefan Johansson <sjohanss@openjdk.org>
Date:      2023-05-04 12:48:56 +0000
URL:       https://git.openjdk.org/jdk/commit/29233e0a001adde71a3fa5d56292ccfba8409ea5
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
java.lang.AssertionError when using unnamed patterns,JDK-8307444,5100112,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,abimpoudis,abimpoudis,abimpoudis,2023-05-04 04:21,2023-05-28 20:46,2023-10-01 09:56,2023-05-22 01:56,,,,,,,21,tools,,0,conformance,,,,,,,,,,,,,"package test;

public class Test  {
    static abstract class Entree {}

    static class Steak extends Entree  {}
    private static <T> int consume(T t) {
        int success = -1;
        switch(t) {
            case Steak _, Entree _, Object _ : {
                success = 1; break;
            }
        }
        return success;
    }
    public static void main(String argv[]) {
        System.out.println(consume(new Steak()));
    }
}

An exception has occurred in the compiler (21-internal). Please file a bug against the Java compiler via the Java bug reporting page (https://bugreport.java.com) after checking the Bug Database (https://bugs.java.com) for duplicates. Include your program, the following diagnostic, and the parameters passed to the Java compiler in your report. Thank you.

java.lang.AssertionError
       at jdk.compiler/com.sun.tools.javac.util.Assert.error(Assert.java:155)
       at jdk.compiler/com.sun.tools.javac.util.Assert.check(Assert.java:46)
       at jdk.compiler/com.sun.tools.javac.jvm.Gen.handleSwitch(Gen.java:1341)
       at jdk.compiler/com.sun.tools.javac.jvm.Gen.visitSwitch(Gen.java:1224)
       at jdk.compiler/com.sun.tools.javac.tree.JCTree$JCSwitch.accept(JCTree.java:1295)
       at jdk.compiler/com.sun.tools.javac.jvm.Gen.genDef(Gen.java:614)
       at jdk.compiler/com.sun.tools.javac.jvm.Gen.genStat(Gen.java:649)
       at jdk.compiler/com.sun.tools.javac.jvm.Gen.genStat(Gen.java:635)
       at jdk.compiler/com.sun.tools.javac.jvm.Gen.genStats(Gen.java:686)
       at jdk.compiler/com.sun.tools.javac.jvm.Gen.doVisitBlock(Gen.java:1128)
       at jdk.compiler/com.sun.tools.javac.jvm.Gen.visitBlock(Gen.java:1121)
       at jdk.compiler/com.sun.tools.javac.tree.JCTree$JCBlock.accept(JCTree.java:1088)
       at jdk.compiler/com.sun.tools.javac.jvm.Gen.genDef(Gen.java:614)
       at jdk.compiler/com.sun.tools.javac.jvm.Gen.genStat(Gen.java:649)
       at jdk.compiler/com.sun.tools.javac.jvm.Gen.genStat(Gen.java:635)
       at jdk.compiler/com.sun.tools.javac.jvm.Gen.genStats(Gen.java:686)
       at jdk.compiler/com.sun.tools.javac.jvm.Gen.doVisitBlock(Gen.java:1128)
       at jdk.compiler/com.sun.tools.javac.jvm.Gen.visitBlock(Gen.java:1121)
       at jdk.compiler/com.sun.tools.javac.tree.JCTree$JCBlock.accept(JCTree.java:1088)
       at jdk.compiler/com.sun.tools.javac.jvm.Gen.genDef(Gen.java:614)
       at jdk.compiler/com.sun.tools.javac.jvm.Gen.genStat(Gen.java:649)
       at jdk.compiler/com.sun.tools.javac.jvm.Gen.genMethod(Gen.java:975)
       at jdk.compiler/com.sun.tools.javac.jvm.Gen.visitMethodDef(Gen.java:938)
       at jdk.compiler/com.sun.tools.javac.tree.JCTree$JCMethodDecl.accept(JCTree.java:912)
       at jdk.compiler/com.sun.tools.javac.jvm.Gen.genDef(Gen.java:614)
       at jdk.compiler/com.sun.tools.javac.jvm.Gen.genClass(Gen.java:2472)
       at jdk.compiler/com.sun.tools.javac.main.JavaCompiler.genCode(JavaCompiler.java:755)
       at jdk.compiler/com.sun.tools.javac.main.JavaCompiler.generate(JavaCompiler.java:1680)
       at jdk.compiler/com.sun.tools.javac.main.JavaCompiler.generate(JavaCompiler.java:1648)
       at jdk.compiler/com.sun.tools.javac.main.JavaCompiler.compile(JavaCompiler.java:964)
       at jdk.compiler/com.sun.tools.javac.api.JavacTaskImpl.lambda$doCall$0(JavacTaskImpl.java:104)
       at jdk.compiler/com.sun.tools.javac.api.JavacTaskImpl.invocationHelper(JavacTaskImpl.java:152)
       at jdk.compiler/com.sun.tools.javac.api.JavacTaskImpl.doCall(JavacTaskImpl.java:100)
       at jdk.compiler/com.sun.tools.javac.api.JavacTaskImpl.call(JavacTaskImpl.java:94)
       at jdk.compiler/com.sun.tools.javac.launcher.Main.compile(Main.java:399)
       at jdk.compiler/com.sun.tools.javac.launcher.Main.run(Main.java:202)
       at jdk.compiler/com.sun.tools.javac.launcher.Main.main(Main.java:132)

error: compilation failed",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8304246,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i31dsz:",9223372036854775807,b24,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4dca67bd,,,,,,,,,"2023-05-08 07:23;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/13528
Date: 2023-04-19 09:47:39 +0000;;;","2023-05-08 08:00;abimpoudis;Fixed in PR for https://bugs.openjdk.org/browse/JDK-8304246;;;","2023-05-22 01:56;dukebot;Changeset: 8aa50288
Author:    Aggelos Biboudis <abimpoudis@openjdk.org>
Committer: Jan Lahoda <jlahoda@openjdk.org>
Date:      2023-05-22 08:52:36 +0000
URL:       https://git.openjdk.org/jdk/commit/8aa50288a1a6a853bf4d8d97b1849d5744ed7a32
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
jstat tests doesn't tolerate dash in the O column,JDK-8307428,5100096,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,stefank,stefank,stefank,2023-05-04 02:27,2023-05-10 23:54,2023-10-01 09:56,2023-05-08 00:57,,,,,,,21,hotspot,,0,,,,,,,,,,,,,,"When running jstat tests like the following:
test/jdk/sun/tools/jstatd/TestJstatdServer.java

with Generational ZGC we get a failure because the O (old generation percentage) is reported as `-` and not a number. The reason why it is reported as `-` is that the current capacity of the old generation is zero and that leads to a divide-by-zero in this line:
https://github.com/openjdk/jdk/blob/82a8e91ef7c3b397f9cce3854722cfe4bace6f2e/src/jdk.jcmd/share/classes/sun/tools/jstat/resources/jstat_options#L1029

G1 has some workarounds for this situation where the reported capacity is slightly above 0. I'm a bit reluctant to add such a hack into Generational ZGC. I've talked to the jstat maintainers and they propose that we simply relax the test.",,,,,,,,,,,,,,,,,,,JDK-8307058,,,,,,,,,,,,,,,,,JDK-8307518,JDK-8307554,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i31dpf:",9223372036854775807,b22,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@2846162a,,,,,,,,,"2023-05-04 02:41;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/13796
Date: 2023-05-04 09:33:49 +0000;;;","2023-05-08 00:57;dukebot;Changeset: 68f385c1
Author:    Stefan Karlsson <stefank@openjdk.org>
Date:      2023-05-08 07:52:25 +0000
URL:       https://git.openjdk.org/jdk/commit/68f385c1ca5f5bef7edfb66d9ec8ebee44cf4860
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Socket input stream read burns CPU cycles with back-to-back poll(0) calls,JDK-8307425,5100093,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,ogillespie,shade,shade,2023-05-04 01:56,2023-06-05 01:58,2023-10-01 09:56,2023-05-05 12:40,13,17,20,21,,,21,core-libs,,0,amazon-interest,jdk17u-fix-request,jdk17u-fix-yes,jdk20u-fix-request,jdk20u-fix-SQE-ok,jdk20u-fix-yes,noreg-hard,regression,,,,,,"This was originally found by Oli Gillespie [not an Author yet], submitting this on his behalf. Oli would do the patch work.

One of our migrations to JDK 17 revealed an issue in JDK-8221481 that resulted in >10% CPU spent in nio waiting code. The minimized case shows how the waiting code ends up issuing back-to-back polls with zero timeout:

```
import java.io.*;
import java.net.*;

public class ReadSingle {
    public static void main(String[] args) throws Exception {
        Socket s = new Socket(""shipilev.net"", 443);
        s.setSoTimeout(1); 
        s.getOutputStream().write(1);
        InputStream is = s.getInputStream();
        System.out.println(""Starting single byte read"");
        is.read();
    }
}
```

With current JDK:

```
 % strace -f build/linux-x86_64-server-release/images/jdk/bin/java ReadSingle.java 2>&1 | grep poll 
[pid 35427] poll([{fd=4, events=POLLIN|POLLERR|POLLHUP}], 1, 5000) = 1 ([{fd=4, revents=POLLIN}])
[pid 35427] poll([{fd=4, events=POLLIN|POLLERR|POLLHUP}], 1, 5000) = 1 ([{fd=4, revents=POLLIN|POLLHUP}])
[pid 35427] poll([{fd=5, events=POLLIN}], 1, 0) = 0 (Timeout)
[pid 35427] poll([{fd=5, events=POLLIN}], 1, 0) = 0 (Timeout)
[pid 35427] poll([{fd=5, events=POLLIN}], 1, 0) = 0 (Timeout)
[pid 35427] poll([{fd=5, events=POLLIN}], 1, 0) = 0 (Timeout)
[pid 35427] poll([{fd=5, events=POLLIN}], 1, 0) = 0 (Timeout)
[pid 35427] poll([{fd=5, events=POLLIN}], 1, 0) = 0 (Timeout)
[pid 35427] poll([{fd=5, events=POLLIN}], 1, 0) = 0 (Timeout)
[pid 35427] poll([{fd=5, events=POLLIN}], 1, 0) = 0 (Timeout)
[pid 35427] poll([{fd=5, events=POLLIN}], 1, 0) = 0 (Timeout)
[pid 35427] poll([{fd=5, events=POLLIN}], 1, 0) = 0 (Timeout)
[pid 35427] poll([{fd=5, events=POLLIN}], 1, 0) = 0 (Timeout)
[pid 35427] poll([{fd=5, events=POLLIN}], 1, 0) = 0 (Timeout)
[pid 35427] poll([{fd=5, events=POLLIN}], 1, 0) = 0 (Timeout)
[pid 35427] poll([{fd=5, events=POLLIN}], 1, 0) = 0 (Timeout)
[pid 35427] poll([{fd=5, events=POLLIN}], 1, 0) = 0 (Timeout)
[pid 35427] poll([{fd=5, events=POLLIN}], 1, 0) = 0 (Timeout)
```

With JDK 17:

```
 % strace -f ../shipilev-jdk17u-dev/build/linux-x86_64-server-release/images/jdk/bin/java ReadSingle.java 2>&1 | grep poll                             
[pid 34344] poll([{fd=4, events=POLLIN|POLLERR|POLLHUP}], 1, 5000) = 1 ([{fd=4, revents=POLLIN|POLLHUP}])
[pid 34344] poll([{fd=4, events=POLLIN|POLLERR|POLLHUP}], 1, 5000) = 1 ([{fd=4, revents=POLLIN}])
[pid 34344] poll([{fd=4, events=POLLIN}], 1, 0) = 0 (Timeout)
[pid 34344] poll([{fd=4, events=POLLIN}], 1, 0) = 0 (Timeout)
[pid 34344] poll([{fd=4, events=POLLIN}], 1, 0) = 0 (Timeout)
[pid 34344] poll([{fd=4, events=POLLIN}], 1, 0) = 0 (Timeout)
[pid 34344] poll([{fd=4, events=POLLIN}], 1, 0) = 0 (Timeout)
[pid 34344] poll([{fd=4, events=POLLIN}], 1, 0) = 0 (Timeout)
[pid 34344] poll([{fd=4, events=POLLIN}], 1, 0) = 0 (Timeout)
[pid 34344] poll([{fd=4, events=POLLIN}], 1, 0) = 0 (Timeout)
[pid 34344] poll([{fd=4, events=POLLIN}], 1, 0) = 0 (Timeout)
[pid 34344] poll([{fd=4, events=POLLIN}], 1, 0) = 0 (Timeout)
[pid 34344] poll([{fd=4, events=POLLIN}], 1, 0) = 0 (Timeout)
[pid 34344] poll([{fd=4, events=POLLIN}], 1, 0) = 0 (Timeout)
[pid 34344] poll([{fd=4, events=POLLIN}], 1, 0) = 0 (Timeout)
[pid 34344] poll([{fd=4, events=POLLIN}], 1, 0) = 0 (Timeout)
[pid 34344] poll([{fd=4, events=POLLIN}], 1, 0) = 0 (Timeout)
[pid 34344] poll([{fd=4, events=POLLIN}], 1, 0) = 0 (Timeout)
```

With JDK 17 and `-Djdk.net.usePlainSocketImpl`:

```
% strace -f ../shipilev-jdk17u-dev/build/linux-x86_64-server-release/images/jdk/bin/java -Djdk.net.usePlainSocketImpl ReadSingle.java 2>&1 | grep poll
[pid 34653] poll([{fd=4, events=POLLIN|POLLERR|POLLHUP}], 1, 5000) = 1 ([{fd=4, revents=POLLIN}])
[pid 34653] poll([{fd=4, events=POLLIN|POLLERR|POLLHUP}], 1, 5000) = 1 ([{fd=4, revents=POLLIN|POLLHUP}])
[pid 34653] poll([{fd=6, events=POLLIN|POLLERR}], 1, 1) = 0 (Timeout)
```

This looks like a regression since JDK-8221481, and the cause seems to be this truncation of nanos to millis, which truncates the small nano-wait to 0, which is then passed to `poll(0)`, which returns immediately: https://github.com/openjdk/jdk/blob/e206d57bfc09032e17d09714fc54ab2f5e961792/src/java.base/share/classes/sun/nio/ch/NioSocketImpl.java#L184

```
    private void park(FileDescriptor fd, int event, long nanos) throws IOException {
        Thread t = Thread.currentThread();
        if (t.isVirtual()) {
           ...
        } else {
            long millis;
            if (nanos == 0) {
                millis = -1;
            } else {
                millis = NANOSECONDS.toMillis(nanos); // <--- here
            }
            Net.poll(fd, event, millis);
        }
    }
```

Note it would happen in nearly all cases where we timeout the read, as there will be a hot loop in the final sub-millisecond section which will truncate to zero millis. The read timeout would be more likely with smaller timeouts, but larger timeouts are also affected by this.

JDK-8253119 removed `-Djdk.net.usePlainSocketImpl`, so there is no recourse in JDK 18+ at all.

This looks similar to JDK-8210004, JDK-8065372 and others, and should probably be fixed the same way: rounding *up* to the nearest millisecond.",,,,,,,,,,,JDK-8308717,JDK-8308418,JDK-8309439,JDK-8308280,,,,,,,,,,,,,,,,,,JDK-8221481,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i31dor:",9223372036854775807,b22,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@674604a9,,,,,,,,,"2023-05-04 03:11;alanb;[~shade] Would you mind changing SelChImpl.park to use a round up to 1ms too? That's used by the socket adaptors that have a socket ""view"" on channels so it will have the same issue if they use setSoTimeout with a small timeout.;;;","2023-05-04 03:13;shade;Oli would do the work for this, I'll mention this to him.;;;","2023-05-04 04:26;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/13798
Date: 2023-05-04 10:42:02 +0000;;;","2023-05-05 12:40;dukebot;Changeset: 73ac7105
Author:    Oli Gillespie <ogillesp@amazon.com>
Committer: Alan Bateman <alanb@openjdk.org>
Date:      2023-05-05 19:36:35 +0000
URL:       https://git.openjdk.org/jdk/commit/73ac710533a45bf5ba17f308aa49556b877b8bf9
;;;","2023-05-10 13:41;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/1341
Date: 2023-05-10 11:17:08 +0000;;;","2023-05-15 07:21;ogillespie;Fix Request (17u)

This is purely a performance fix. I saw one application which reduces CPU usage by 10% with this fix; though I'm sure that's an outlier, it shows it can be significant.
The main risk is that this could increase the observed delay in some cases since we're now rounding up. However, this is at most 1 millisecond, and this is already the behaviour of other similar functions like Object.wait.
Backport is not quite clean; DatagramChannelImpl doesn't override park in 17 so it is skipped, and NioSocketImpl/SelChImpl simply have an extra hunk for virtual threads which doesn't materially affect the patch.;;;","2023-05-17 11:24;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk20u/pull/80
Date: 2023-05-17 18:17:03 +0000;;;","2023-05-18 02:28;dfuchs;Fix Request (20u)

This is a small change that fixes a few places in NIO where nanoseconds are rounded down to milliseconds, potentially leading to expensive tight poll/read loops in some scenarios.
The fix has already been backported to 17u. The backport to 20u is a clean backport.

https://git.openjdk.org/jdk20u/pull/80
Tests: tier1 and tier2 came back green.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Test java/foreign/channels/TestAsyncSocketChannels.java failed: IllegalStateException: Already closed,JDK-8307411,5100081,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,mcimadamore,dholmes,dholmes,2023-05-03 19:48,2023-05-16 16:09,2023-10-01 09:56,2023-05-09 04:15,21,,,,,,21,core-libs,,0,intermittent,noreg-self,tier1,,,,,,,,,,,"----------System.out:(16/838)----------
Seed from RandomFactory = -101903027041002175L
test TestAsyncSocketChannels.testBasicIOWithSupportedSession(shared arena): success
testCloseWithOutstandingRead - op
testCloseWithOutstandingRead - op
testCloseWithOutstandingRead - op
testCloseWithOutstandingRead - op
test TestAsyncSocketChannels.testCloseWithOutstandingRead(shared arena, 0): success
testCloseWithOutstandingRead - op
testCloseWithOutstandingRead - op
testCloseWithOutstandingRead - op
testCloseWithOutstandingRead - op
test TestAsyncSocketChannels.testCloseWithOutstandingRead(shared arena, 30): success
awaitNoFurtherWrites: i=4 , bytesWritten=391968
awaiting outstanding writes....................................outstanding writes: 0
test TestAsyncSocketChannels.testCloseWithOutstandingWrite(shared arena, 0): success
awaitNoFurtherWrites: i=2 , bytesWritten=380668
----------System.err:(21/1828)----------
java.lang.IllegalStateException: Already closed
	at java.base/jdk.internal.foreign.MemorySessionImpl.alreadyClosed(MemorySessionImpl.java:311)
	at java.base/jdk.internal.misc.ScopedMemoryAccess$ScopedAccessError.newRuntimeException(ScopedMemoryAccess.java:113)
	at java.base/jdk.internal.foreign.MemorySessionImpl.checkValidState(MemorySessionImpl.java:219)
	at java.base/jdk.internal.foreign.NativeMemorySegmentImpl.makeNativeSegment(NativeMemorySegmentImpl.java:119)
	at java.base/jdk.internal.foreign.MemorySessionImpl.allocate(MemorySessionImpl.java:158)
	at java.base/java.lang.foreign.Arena.allocate(Arena.java:270)
	at AbstractChannelsTest.segmentBufferOfSize(AbstractChannelsTest.java:71)
	at AbstractChannelsTest.segmentBuffersOfSize(AbstractChannelsTest.java:81)
	at TestAsyncSocketChannels$1.completed(TestAsyncSocketChannels.java:268)
	at TestAsyncSocketChannels$1.completed(TestAsyncSocketChannels.java:263)
	at java.base/sun.nio.ch.Invoker.invokeUnchecked(Invoker.java:129)
	at java.base/sun.nio.ch.UnixAsynchronousSocketChannelImpl.finishWrite(UnixAsynchronousSocketChannelImpl.java:647)
	at java.base/sun.nio.ch.UnixAsynchronousSocketChannelImpl.finish(UnixAsynchronousSocketChannelImpl.java:199)
	at java.base/sun.nio.ch.UnixAsynchronousSocketChannelImpl.onEvent(UnixAsynchronousSocketChannelImpl.java:217)
	at java.base/sun.nio.ch.KQueuePort$EventHandlerTask.run(KQueuePort.java:312)
	at java.base/sun.nio.ch.AsynchronousChannelGroupImpl$1.run(AsynchronousChannelGroupImpl.java:113)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1144)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:642)
	at java.base/java.lang.Thread.run(Thread.java:1583)
STATUS:Failed.`main' threw exception: java.lang.IllegalStateException: Already closed",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i31dm3:",9223372036854775807,b22,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@28ce6b78,,,,,,,,,"2023-05-03 22:23;kbarrett;One new changeset for the Oracle CI job where this failure occurred - JDK-8307147.  However that change is cpu/x86-specific, while this failure happened on macosx-aarch64.  Also, the next tier1 job was clean, with no changes that seem relevant.  So marking this as intermittent.

;;;","2023-05-05 09:26;mcimadamore;Some synchronization logic in this test looks suspicious:

```
outstandingWriteOps.getAndIncrement(); // 2
asc1.write(bba, 0, bba.length, timeout, SECONDS, null,
                    (handler = new TestHandler<>() {
                        public void completed(Long result, Void att) {
                            super.completed(result, att); // 3
                            bytesWritten.addAndGet(result);
                            if (continueWriting.get()) { // 1
                                var bba = segmentBuffersOfSize(32, drop, 128);
                                outstandingWriteOps.getAndIncrement(); // 2
                                asc1.write(bba, 0, bba.length, timeout, SECONDS, null, this);
                            }
                            outstandingWriteOps.getAndDecrement();
                        }
                    }));
            // give time for socket buffer to fill up.
            awaitNoFurtherWrites(bytesWritten);

            assertMessage(expectThrows(ISE, () -> drop.close()), ""Session is acquired by"");
            assertTrue(drop.scope().isAlive());

            // signal handler to stop further writing
            continueWriting.set(false); // 1

            // read to allow the outstanding write complete, which will
            // in turn unlock the session and allow it to be closed.
            readNBytes(asc2, bytesWritten.get());
            assertTrue(drop.scope().isAlive());
            awaitOutstandingWrites(outstandingWriteOps); // 2
            handler.await(); // 3
```

Note how there are three distinct mechanism which should, in principle, prevent the arena to be closed before the TestHandler completes. The key mechanism seems ""oustandingWriteOps"" which is incremented before the test starts. Presumably, this count will always be set to 1 until the last write sees the ""continueWriting"" to false, in which case the counter is decremented without a corresponding increment (which should cause the count to be at zero).;;;","2023-05-08 06:22;mcimadamore;I can reproduce the failure by tweaking the ""awaitNoFurtherWrites"" and lowering the ""timeout"".  It seems like the test is very dependent on the fact that, by the time the main thread executes, the writes buffers are full, and we have outstanding writes which cannot be fulfilled by the OS. This will keep the underlying segment alive (as the `drop` arena is kept alive until the write operation succeeds). So, when we check this:

             assertMessage(expectThrows(ISE, () -> drop.close()), ""Session is acquired by""); 

This fails as expected, and the test logic continues as designed.

It is possible for the above check to execute when there is no underlying OS write. This can be either artificially, by lowering the timeout, or in a case where the timeout is not sufficient to fill the write buffer. In such cases, there's nothing to keep the arena alive - meaning that the drop::close will pass. At this point the test will no longer behave as designed: outstanding writes might still see `continueWriting` set to true, but the arena is already closed at this point, so any attempt to perform further allocation will fail. Whether the test report the real failure (e.g. the fact that drop::close passed unexpectedly) or report an exception in one of the failing thread (as they are allocating on a closed arena) it's matter of execution order.;;;","2023-05-08 07:17;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/13866
Date: 2023-05-08 13:46:55 +0000;;;","2023-05-09 04:13;dukebot;Changeset: f92d095e
Author:    Maurizio Cimadamore <mcimadamore@openjdk.org>
Date:      2023-05-09 11:11:15 +0000
URL:       https://git.openjdk.org/jdk/commit/f92d095e164bd79b452586e49e166d1ba392632f
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Refactor usage examples to use @snippet in the java.nio packages,JDK-8307409,5100079,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,bpb,bpb,bpb,2023-05-03 16:43,2023-05-17 16:53,2023-10-01 09:56,2023-05-12 08:20,21,,,,,,21,core-libs,,0,noreg-doc,,,,,,,,,,,,,Change <pre>{code ...}</pre> patterns to {@snippet ...} in the java.nio package and its sub-packages.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8308314,,,,JDK-8308016,,,,,,,,,,,,generic,,,,,,,,,generic,,,,,,"0|i31dln:",9223372036854775807,b23,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@674604a9,,,,,,,,,"2023-05-08 12:13;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/13870
Date: 2023-05-08 19:07:25 +0000;;;","2023-05-12 08:20;dukebot;Changeset: 9fa8b9a4
Author:    Brian Burkhalter <bpb@openjdk.org>
Date:      2023-05-12 15:17:22 +0000
URL:       https://git.openjdk.org/jdk/commit/9fa8b9a4a6e9658ee5f8084745ac84a1289a2d27
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Some jdk/sun/tools/jhsdb tests don't pass test JVM args to the debuggee JVM,JDK-8307408,5100078,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,cjplummer,cjplummer,cjplummer,2023-05-03 16:02,2023-08-14 11:55,2023-10-01 09:56,2023-08-07 11:52,,,,,,,22,hotspot,,0,noreg-self,,,,,,,,,,,,,"The JStackStressTest.java, JShellHeapDumpTest, and HeapDumpTestWithActiveProcess launch the target JVM without any arguments. The end result is that we don't always get the testing we expect. For example, proper SA testing is heavily depending on the GC of the targetVM, but it will always end up being the default GC (G1). So when you run a test with -XX:+UseZGC, the test will be run with ZGC, jhsdb will be run with ZGC, but the JVM that jhsdb is debugging will use G1, and it is in fact the debuggee that we really want running with ZGC. We don't care so much about what GC is used for the test and jhsdb.

Using JStackStressTest.java as an example, we can see the problem here:

            ProcessBuilder pb = new ProcessBuilder(JDKToolFinder.getTestJDKTool(""jshell""));
            jShellProcess = ProcessTools.startProcess(""JShell"", pb);

We should be using the JDKToolLauncher class. A working example can be found in ClhsdbLauncher.java:

        JDKToolLauncher launcher = JDKToolLauncher.createUsingTestJDK(""jhsdb"");
        launcher.addVMArgs(Utils.getTestJavaOpts());
        launcher.addToolArg(""clhsdb"");
        launcher.addToolArg(""--core="" + coreFileName);
        launcher.addToolArg(""--exe="" + JDKToolFinder.getTestJDKTool(""java""));
        ProcessBuilder processBuilder = new ProcessBuilder(launcher.getCommand());

I think what will work for JStackStressTest.java is (this is completely untested):

            JDKToolLauncher launcher = JDKToolLauncher.createUsingTestJDK(""jshell"");
            launcher.addVMArgs(Utils.getTestJavaOpts());
            ProcessBuilder pb = new ProcessBuilder(launcher.getCommand());
            jShellProcess = ProcessTools.startProcess(""JShell"", pb);

This will get -XX:+UseZGC passed to the debuggee process. Note if there are any options we want filtered out, we can do something like the following:

            launcher.addVMArgs(Utils.getFilteredTestJavaOpts(""-Xcomp""));
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8313655,JDK-8313798,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i31dlf:",9223372036854775807,b10,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@714e388c,,,,,,,,,"2023-05-03 16:07;cjplummer;Since SA ZGC support is not very stable, this could possibly result in some new failures when running with ZGC. The failing tests should be problem listed in that case.;;;","2023-06-01 15:15;cjplummer;Deferring to 22. This could introduce some testing instability, which I don't want to risk just before RDP1.;;;","2023-08-04 15:47;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/15168
Date: 2023-08-04 22:41:43 +0000;;;","2023-08-07 11:52;dukebot;Changeset: 87b08b6e
Author:    Chris Plummer <cjplummer@openjdk.org>
Date:      2023-08-07 18:51:29 +0000
URL:       https://git.openjdk.org/jdk/commit/87b08b6e0192d88025c2275c7dd2c4bdecda58e8
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
java/util/zip/DeInflate.java timed out,JDK-8307403,5100073,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,jpai,dcubed,dcubed,2023-05-03 14:34,2023-08-01 00:22,2023-10-01 09:56,2023-05-15 22:08,21,,,,,,21,core-libs,,0,intermittent,noreg-self,sbr,tier1,tier5,tier6,,,,,,,,"The following test timed out in the JDK21 CI:

java/util/zip/DeInflate.java

Here's a snippet from the log file:

#section:main
----------messages:(10/299)----------
command: main DeInflate
reason: Assumed action based on file name: run main DeInflate 
started: Wed May 03 20:37:19 UTC 2023
Mode: agentvm
Agent id: 44
Timeout refired 480 times
Timeout information:
--- Timeout information end.
finished: Wed May 03 20:45:58 UTC 2023
elapsed time (seconds): 519.222
----------configuration:(12/1402)----------

<snip>

result: Error. Agent error: java.lang.Exception: Agent 44 timed out with a timeout of 480 seconds; check console log for any additional details
",,,,,,,,,,,JDK-8313517,JDK-8313371,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,aarch64,x86_64,,,,,,,,linux,windows,,,,,"0|i31dkb:",9223372036854775807,b23,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@62714d2c,,,,,,,,,"2023-05-03 22:35;alanb;The ""main"" thread seems to be spinning here, the changes in test update JDK-8299748 need closer examination.

""AgentVMThread"" #22 [318386] prio=5 os_prio=0 cpu=478087.37ms elapsed=485.15s allocated=1008M defined_classes=29 tid=0x0000ffff904b8410 nid=318386 runnable  [0x0000ffff5a5ad000]
   java.lang.Thread.State: RUNNABLE
	at DeInflate.check(DeInflate.java:148)
	at DeInflate.main(DeInflate.java:319)
	at java.lang.invoke.LambdaForm$DMH/0x00000001000c0000.invokeStatic(java.base@21-ea/LambdaForm$DMH)
	at java.lang.invoke.LambdaForm$MH/0x000000010017a000.invoke(java.base@21-ea/LambdaForm$MH)
	at java.lang.invoke.Invokers$Holder.invokeExact_MT(java.base@21-ea/Invokers$Holder)
	at jdk.internal.reflect.DirectMethodHandleAccessor.invokeImpl(java.base@21-ea/DirectMethodHandleAccessor.java:154)
	at jdk.internal.reflect.DirectMethodHandleAccessor.invoke(java.base@21-ea/DirectMethodHandleAccessor.java:103)
	at java.lang.reflect.Method.invoke(java.base@21-ea/Method.java:578)
	at com.sun.javatest.regtest.agent.MainActionHelper$AgentVMRunnable.run(MainActionHelper.java:333)
	at java.lang.Thread.runWith(java.base@21-ea/Thread.java:1605)
	at java.lang.Thread.run(java.base@21-ea/Thread.java:1592);;;","2023-05-08 13:42;dcubed;And the Mach5 demi-gods have answered [~jpai]'s prayer and we now have a Tier1 sighting.
Here's a log file snippet (but it doesn't help):

#section:main
----------messages:(10/299)----------
command: main DeInflate
reason: Assumed action based on file name: run main DeInflate 
started: Mon May 08 08:22:00 UTC 2023
Mode: agentvm
Agent id: 24
Timeout refired 480 times
Timeout information:
--- Timeout information end.
finished: Mon May 08 08:30:44 UTC 2023
elapsed time (seconds): 524.503
----------configuration:(12/1416)----------

<snip>

result: Error. Agent error: java.lang.Exception: Agent 24 timed out with a timeout of 480 seconds; check console log for any additional details;;;","2023-05-12 05:38;jpai;What this test does in this specific check() method is that it takes an array of input and then uses a Deflater to deflate the content until the deflater is ""finished"". Previously, before https://bugs.openjdk.org/browse/JDK-8299748, the test was using a fixed size output array to deflate the content. But on AIX, where apparently, there's a different implementation of zlib, the size of the output array that was defined in this test wasn't enough. So the test was modified to not use a fixed output array size and let it grow as needed.

Before deflating, the deflater is fed with the input array and the size of the input being fed changes ""randomly"". A ""new Random().nextInt(dataIn.length)"" decides how much of the input needs to be deflated. Unfortunately, due to an oversight, the change to this test in that previous commit introduced a bug, where this random size was also used as the size of the temporary output buffer which is passed to def.deflate(tempBuffer). So what that meant was, this loop:

       while (!def.finished()) {
                int temp_counter = def.deflate(tempBuffer); <--- this tempBuffer is of length 0
                m += temp_counter;
                baos.write(tempBuffer, 0, temp_counter);
            }

will never finish since the deflater will never be able to deflate into a tempBuffer of length 0.

I don't have logs to prove that this is what is causing the timeouts, but looking at the code, I believe this is what is happening. I've verified that the infinite loop does indeed happen, by intentionally changing the value returned by ""new Random().nextInt(dataIn.length)""  to be 0, so I do think this is what is happening.

I'll open a PR to fix this shortly.
;;;","2023-05-12 05:54;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/13955
Date: 2023-05-12 12:47:28 +0000;;;","2023-05-15 22:08;dukebot;Changeset: d22bcc81
Author:    Jaikiran Pai <jpai@openjdk.org>
Date:      2023-05-16 05:06:46 +0000
URL:       https://git.openjdk.org/jdk/commit/d22bcc813eea719b817d3d541a843594675c0ca9
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Add missing STS to Shenandoah,JDK-8307395,5100064,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,rkennke,rkennke,rkennke,2023-05-03 12:48,2023-06-13 10:23,2023-10-01 09:56,2023-05-05 08:58,17,20,21,,,,21,hotspot,,0,amazon-interest,gc-shenandoah,jdk17u-fix-request,jdk17u-fix-yes,lilliput,,,,,,,,,"Testing in project Lilliput has revealed that Shenandoah GC is lacking one STS. This causes a reliable crash (with Lilliput) when running TestGCBasherWithShenandoah.java with -XX:+UseHeavyMonitors because it touches an already deflated monitor.
",,,,,,,,,,,JDK-8309952,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8307236,,,,,,,,,,,,generic,,,,,,,,,generic,,,,,,"0|i31dib:",9223372036854775807,b22,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6b00f96c,,,,,,,,,"2023-05-03 12:56;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/lilliput/pull/90
Date: 2023-05-03 19:51:00 +0000;;;","2023-05-04 04:39;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/13799
Date: 2023-05-04 11:34:15 +0000;;;","2023-05-05 08:58;dukebot;Changeset: 3968ab5d
Author:    Roman Kennke <rkennke@openjdk.org>
Date:      2023-05-05 15:56:10 +0000
URL:       https://git.openjdk.org/jdk/commit/3968ab5db5443ce93c9a19ebbc5464f7d91782fc
;;;","2023-05-30 03:22;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/1410
Date: 2023-05-30 10:15:44 +0000;;;","2023-05-30 11:21;shade;Fix Request (17u)

Improves Shenandoah reliability. Applies cleanly. Tests pass.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
"Open Source JFrame, JIF related Swing Tests",JDK-8307381,5100049,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,honkar,honkar,honkar,2023-05-03 11:37,2023-05-17 12:47,2023-10-01 09:56,2023-05-05 11:12,,,,,,,21,client-libs,,0,jdk17u-fix-request,jdk17u-fix-yes,sn_142,sn_143,test_sprint,,,,,,,,,Open source and clean up swing tests,,,,,,,,,,,JDK-8308321,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,generic,,,,,,,,,generic,,,,,,"0|i31dez:",9223372036854775807,b22,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@568a5b31,,,,,,,,,"2023-05-03 22:55;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/13787
Date: 2023-05-03 20:58:00 +0000;;;","2023-05-05 11:16;dukebot;Changeset: 4386d42d
Author:    Harshitha Onkar <honkar@openjdk.org>
Date:      2023-05-05 18:12:48 +0000
URL:       https://git.openjdk.org/jdk/commit/4386d42d31af9042121581cd3fd4d5a7cf8961e6
;;;","2023-05-15 15:33;vrudomet;[Fix request 17u]

Clean backport, new tests, low risk
Checked on macos x64, linux x64, all good;;;","2023-05-16 16:42;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/1354
Date: 2023-05-16 23:34:43 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Alignment check on layouts used as sequence element is not correct,JDK-8307375,5100043,Bug,Closed,JDK,JDK,software,duke,,,P2,Fixed,mcimadamore,mcimadamore,mcimadamore,2023-05-03 10:36,2023-07-24 10:07,2023-10-01 09:56,2023-05-05 09:05,21,,,,,,21,core-libs,,0,foreign-memaccess+abi,,,,,,,,,,,,,"Sometimes layouts are used as elements in a ""sequence"" where the element is repeated, back to back, several times.

We have several instance of this usage of memory layouts in the API:

* MemorySegment::getAtIndex //1
* MemorySegment::copy //1
* ValueLayout::arrayElementVarHandle //1
* MemoryLayout::sequenceLayout //2
* MemorySegment::spliterator //2
* MemorySegment::elements //2

In some cases (1) the layout parameter is a ValueLayout, in other cases (2), the API point is more general and accepts a MemoryLayout.

The implementation asserts layout well-formedness by checking that the layout size is bigger than the alignment. Now, for value layouts, since both are power of two (by construction), this check turns out ok.

But if the accepted layout is more general than a ValueLayout (as in (2)) then we can no longer rely on the ""power of two"" assumption, and we have to check that the layout size is effectively a multiple of the alignment (otherwise we end up with a ""bad"" sequence where not all elements are correctly aligned).",,,,,,,,,,,,,,,,,,,,,,,JDK-8307376,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i31ddn:",9223372036854775807,b22,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@28ce6b78,,,,,,,Verified,,"2023-05-05 01:29;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/13784
Date: 2023-05-03 17:44:55 +0000;;;","2023-05-05 09:05;dukebot;Changeset: 47422be2
Author:    Maurizio Cimadamore <mcimadamore@openjdk.org>
Date:      2023-05-05 15:59:13 +0000
URL:       https://git.openjdk.org/jdk/commit/47422be2d1d74e5e1b4b6c8e1a75e134e4f6aaf5
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
JvmtiStressModule hit SIGSEGV in JvmtiEventControllerPrivate::recompute_thread_enabled,JDK-8307365,5100028,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,pchilanomate,dcubed,dcubed,2023-05-03 08:22,2023-09-13 19:50,2023-10-01 09:56,2023-05-17 13:18,21,,,,,,21,hotspot,,0,intermittent,loom,test-bigapps-Kitchensink,tier3,tier4,tier5,tier6,tier8,zgc,,,,,"The following test failed in the JDK21 CI:

applications/kitchensink/Kitchensink.java

Here's a snippet from the log file:

[2023-05-03T10:30:41.062043281Z] Gathering output for process 3918364
[2023-05-03T10:30:47.240761361Z] Waiting for completion for process 3918364
[2023-05-03T10:30:47.241166097Z] Waiting for completion finished for process 3918364
Output and diagnostic info for process 3918364 was saved into 'pid-3918364-output.log'
[stress.process.out] #
[stress.process.out] [thread 3903106 also had an error]
[stress.process.out] # A fatal error has been detected by the Java Runtime Environment:
[stress.process.out] #
[stress.process.out] #  SIGSEGV (0xb) at pc=0x00007fc82de672d3, pid=3903050, tid=3903111
[stress.process.out] #
[stress.process.out] # JRE version: Java(TM) SE Runtime Environment (21.0+21) (fastdebug build 21-ea+21-LTS-1770)
[stress.process.out] # Java VM: Java HotSpot(TM) 64-Bit Server VM (fastdebug 21-ea+21-LTS-1770, mixed mode, sharing, tiered, compressed class ptrs, z gc, linux-amd64)
[stress.process.out] # Problematic frame:
[stress.process.out] # V  [libjvm.so+0x113f2d3]  JvmtiEventControllerPrivate::recompute_thread_enabled(JvmtiThreadState*) [clone .part.0]+0x153
[stress.process.out] #
[stress.process.out] # Core dump will be written. Default location: Core dumps may be processed with ""/opt/core.sh %p"" (or dumping to /opt/mach5/mesos/work_dir/slaves/741e9afd-8c02-45c3-b2e2-9db1450d0832-S91199/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/27ed9bc5-baae-4d11-8bf0-8d5684ac09d8/runs/68873867-0a02-4e2c-8dbb-4da2e279060e/testoutput/test-support/jtreg_closed_test_hotspot_jtreg_applications_kitchensink_Kitchensink_java/scratch/0/core.3903050)
[stress.process.out] #
[stress.process.out] Unsupported internal testing APIs have been used.
[stress.process.out] 
[stress.process.out] # An error report file with more information is saved as:
[stress.process.out] # /opt/mach5/mesos/work_dir/slaves/741e9afd-8c02-45c3-b2e2-9db1450d0832-S91199/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/27ed9bc5-baae-4d11-8bf0-8d5684ac09d8/runs/68873867-0a02-4e2c-8dbb-4da2e279060e/testoutput/test-support/jtreg_closed_test_hotspot_jtreg_applications_kitchensink_Kitchensink_java/scratch/0/hs_err_pid3903050.log
[stress.process.out] [thread 3917156 also had an error][thread 3917157 also had an error]
[stress.process.out] [thread 3916362 also had an error]
[stress.process.out] 
[stress.process.out] #
[stress.process.out] # If you would like to submit a bug report, please visit:
[stress.process.out] #   https://bugreport.java.com/bugreport/crash.jsp
[stress.process.out] #
[2023-05-03T10:31:47.243994001Z] Gathering output for process 3918833
[2023-05-03T10:31:47.250648799Z] Waiting for completion for process 3918833
[2023-05-03T10:31:47.250778935Z] Waiting for completion finished for process 3918833
Output and diagnostic info for process 3918833 was saved into 'pid-3918833-output.log'


Here's the crashing thread's stack:

---------------  T H R E A D  ---------------

Current thread (0x00007fc828549430):  JavaThread ""JvmtiStressModule""        [_thread_in_vm, id=3903111, stack(0x00007fc5f8137000,0x00007fc5f8238000) (1028K)] _threads_hazard_ptr=0x00007fc4e03b4c20, _nested_threads_hazard_ptr_cnt=0

Stack: [0x00007fc5f8137000,0x00007fc5f8238000],  sp=0x00007fc5f8236400,  free space=1021k
Native frames: (J=compiled Java code, j=interpreted, Vv=VM code, C=native code)
V  [libjvm.so+0x113f2d3]  JvmtiEventControllerPrivate::recompute_thread_enabled(JvmtiThreadState*) [clone .part.0]+0x153  (javaThread.hpp:1093)
V  [libjvm.so+0x1140810]  JvmtiEventControllerPrivate::recompute_enabled()+0x110  (jvmtiEventController.cpp:558)
V  [libjvm.so+0x11432d2]  JvmtiEventController::set_user_enabled(JvmtiEnvBase*, JavaThread*, oop, jvmtiEvent, bool)+0x162  (jvmtiEventController.cpp:1061)
V  [libjvm.so+0x11197b8]  JvmtiEnv::SetEventNotificationMode(jvmtiEventMode, jvmtiEvent, _jobject*, ...)+0x138  (jvmtiEnv.cpp:586)
V  [libjvm.so+0x10cd257]  jvmti_SetEventNotificationMode+0x107  (jvmtiEnter.cpp:5321)
C  [libJvmtiStressModule.so+0x3f08]  enable_events+0x88  (libJvmtiStressModule.c:631)
C  [libJvmtiStressModule.so+0x4d5a]  Java_applications_kitchensink_process_stress_modules_JvmtiStressModule_finishIteration+0x83a  (libJvmtiStressModule.c:638)
j  applications.kitchensink.process.stress.modules.JvmtiStressModule.finishIteration()Lapplications/kitchensink/process/stress/modules/JvmtiStatistics;+0
j  applications.kitchensink.process.stress.modules.JvmtiStressModule.execute()V+285
j  applications.kitchensink.process.stress.modules.StressModule.run()V+118
j  java.lang.Thread.runWith(Ljava/lang/Object;Ljava/lang/Runnable;)V+5 java.base@21-ea
j  java.lang.Thread.run()V+19 java.base@21-ea
v  ~StubRoutines::call_stub 0x00007fc817d41d1a
V  [libjvm.so+0xe56782]  JavaCalls::call_helper(JavaValue*, methodHandle const&, JavaCallArguments*, JavaThread*)+0x462  (javaCalls.cpp:415)
V  [libjvm.so+0xe56d63]  JavaCalls::call_virtual(JavaValue*, Klass*, Symbol*, Symbol*, JavaCallArguments*, JavaThread*)+0x283  (javaCalls.cpp:329)
V  [libjvm.so+0xe56f71]  JavaCalls::call_virtual(JavaValue*, Handle, Klass*, Symbol*, Symbol*, JavaThread*)+0x71  (javaCalls.cpp:191)
V  [libjvm.so+0xfa61b6]  thread_entry(JavaThread*, JavaThread*)+0x96  (jvm.cpp:2919)
V  [libjvm.so+0xe8899e]  JavaThread::thread_main_inner()+0x17e  (javaThread.cpp:717)
V  [libjvm.so+0x175aff8]  Thread::call_run()+0xb8  (thread.cpp:215)
V  [libjvm.so+0x14599fa]  thread_native_entry(Thread*)+0x11a  (os_linux.cpp:740)
Java frames: (J=compiled Java code, j=interpreted, Vv=VM code)
j  applications.kitchensink.process.stress.modules.JvmtiStressModule.finishIteration()Lapplications/kitchensink/process/stress/modules/JvmtiStatistics;+0
j  applications.kitchensink.process.stress.modules.JvmtiStressModule.execute()V+285
j  applications.kitchensink.process.stress.modules.StressModule.run()V+118
j  java.lang.Thread.runWith(Ljava/lang/Object;Ljava/lang/Runnable;)V+5 java.base@21-ea
j  java.lang.Thread.run()V+19 java.base@21-ea
v  ~StubRoutines::call_stub 0x00007fc817d41d1a

siginfo: si_signo: 11 (SIGSEGV), si_code: 1 (SEGV_MAPERR), si_addr: 0x00000001000005a4",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8306028,,,,,"2023-05-10 17:42;pchilanomate;Repro8307365.zip;https://bugs.openjdk.org/secure/attachment/103798/Repro8307365.zip",,,,,,,x86_64,,,,,,,,,linux,,,,,,"0|i31dab:",9223372036854775807,b24,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@661b156a,,,,,,,,,"2023-05-03 19:40;dholmes;In a debug VM we see:

#
# A fatal error has been detected by the Java Runtime Environment:
#
#  Internal Error (/opt/mach5/mesos/work_dir/slaves/741e9afd-8c02-45c3-b2e2-9db1450d0832-S91261/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/e33d9aea-2c20-4e5e-bcfc-76c710287453/runs/d1604b11-a78f-4f53-b470-87df5a35f239/workspace/open/src/hotspot/share/runtime/handshake.cpp:365), pid=3926908, tid=3926958
#  guarantee(Thread::is_JavaThread_protected_by_TLH(target)) failed: missing ThreadsListHandle in calling context.

;;;","2023-05-08 14:31;dcubed;We now have a sighting of applications/kitchensink/Kitchensink.java in jdk-21+22-1836-tier6
where it hits this guarantee() failure:

#  Internal Error (/opt/mach5/mesos/work_dir/slaves/741e9afd-8c02-45c3-b2e2-9db1450d0832-S23248/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/ae6844bd-3d8a-422c-b5d5-c628a85d6cf8/runs/00d8db49-3fb6-4106-8118-f8752edf81ee/workspace/open/src/hotspot/share/runtime/handshake.cpp:365), pid=7061, tid=7112
#  guarantee(Thread::is_JavaThread_protected_by_TLH(target)) failed: missing ThreadsListHandle in calling context.
#
# JRE version: Java(TM) SE Runtime Environment (21.0+22) (fastdebug build 21-ea+22-LTS-1836)
# Java VM: Java HotSpot(TM) 64-Bit Server VM (fastdebug 21-ea+22-LTS-1836, mixed mode, tiered, compressed oops, compressed class ptrs, g1 gc, linux-amd64)
# Problematic frame:
# V  [libjvm.so+0xd71ff3]  Handshake::execute(HandshakeClosure*, ThreadsListHandle*, JavaThread*)+0xde3

And here's the crashing stack:

---------------  T H R E A D  ---------------

Current thread (0x00007ff4ec799e00):  JavaThread ""JvmtiStressModule""        [_thread_in_vm, id=7112, stack(0x00007ff4b653b000,0x00007ff4b663c000) (1028K)] _threads_hazard_ptr=0x00007ff44821b6f0, _nested_threads_hazard_ptr_cnt=0

Stack: [0x00007ff4b653b000,0x00007ff4b663c000],  sp=0x00007ff4b663a210,  free space=1020k
Native frames: (J=compiled Java code, j=interpreted, Vv=VM code, C=native code)
V  [libjvm.so+0xd71ff3]  Handshake::execute(HandshakeClosure*, ThreadsListHandle*, JavaThread*)+0xde3  (handshake.cpp:365)
V  [libjvm.so+0x113ec06]  JvmtiEventControllerPrivate::enter_interp_only_mode(JvmtiThreadState*)+0x96  (jvmtiEventController.cpp:375)
V  [libjvm.so+0x113ef7e]  JvmtiEventControllerPrivate::recompute_thread_enabled(JvmtiThreadState*) [clone .part.0]+0xee  (jvmtiEventController.cpp:597)
V  [libjvm.so+0x1140520]  JvmtiEventControllerPrivate::recompute_enabled()+0x110  (jvmtiEventController.cpp:558)
V  [libjvm.so+0x1142fe2]  JvmtiEventController::set_user_enabled(JvmtiEnvBase*, JavaThread*, oop, jvmtiEvent, bool)+0x162  (jvmtiEventController.cpp:1060)
V  [libjvm.so+0x11194c8]  JvmtiEnv::SetEventNotificationMode(jvmtiEventMode, jvmtiEvent, _jobject*, ...)+0x138  (jvmtiEnv.cpp:586)
V  [libjvm.so+0x10ccf67]  jvmti_SetEventNotificationMode+0x107  (jvmtiEnter.cpp:5321)
C  [libJvmtiStressModule.so+0x3f08]  enable_events+0x88  (libJvmtiStressModule.c:631)
C  [libJvmtiStressModule.so+0x4d5a]  Java_applications_kitchensink_process_stress_modules_JvmtiStressModule_finishIteration+0x83a  (libJvmtiStressModule.c:638)
j  applications.kitchensink.process.stress.modules.JvmtiStressModule.finishIteration()Lapplications/kitchensink/process/stress/modules/JvmtiStatistics;+0
j  applications.kitchensink.process.stress.modules.JvmtiStressModule.execute()V+285
j  applications.kitchensink.process.stress.modules.StressModule.run()V+118
j  java.lang.Thread.runWith(Ljava/lang/Object;Ljava/lang/Runnable;)V+5 java.base@21-ea
j  java.lang.Thread.run()V+19 java.base@21-ea
v  ~StubRoutines::call_stub 0x00007ff4dc16cd21
V  [libjvm.so+0xe563e2]  JavaCalls::call_helper(JavaValue*, methodHandle const&, JavaCallArguments*, JavaThread*)+0x462  (javaCalls.cpp:415)
V  [libjvm.so+0xe569c3]  JavaCalls::call_virtual(JavaValue*, Klass*, Symbol*, Symbol*, JavaCallArguments*, JavaThread*)+0x283  (javaCalls.cpp:329)
V  [libjvm.so+0xe56bd1]  JavaCalls::call_virtual(JavaValue*, Handle, Klass*, Symbol*, Symbol*, JavaThread*)+0x71  (javaCalls.cpp:191)
V  [libjvm.so+0xfa5ec6]  thread_entry(JavaThread*, JavaThread*)+0x96  (jvm.cpp:2919)
V  [libjvm.so+0xe885fe]  JavaThread::thread_main_inner()+0x17e  (javaThread.cpp:717)
V  [libjvm.so+0x175a6b8]  Thread::call_run()+0xb8  (thread.cpp:215)
V  [libjvm.so+0x145946a]  thread_native_entry(Thread*)+0x11a  (os_linux.cpp:740)
Java frames: (J=compiled Java code, j=interpreted, Vv=VM code)
j  applications.kitchensink.process.stress.modules.JvmtiStressModule.finishIteration()Lapplications/kitchensink/process/stress/modules/JvmtiStatistics;+0
j  applications.kitchensink.process.stress.modules.JvmtiStressModule.execute()V+285
j  applications.kitchensink.process.stress.modules.StressModule.run()V+118
j  java.lang.Thread.runWith(Ljava/lang/Object;Ljava/lang/Runnable;)V+5 java.base@21-ea
j  java.lang.Thread.run()V+19 java.base@21-ea
v  ~StubRoutines::call_stub 0x00007ff4dc16cd21;;;","2023-05-08 14:50;dcubed;Spotted in the jdk-21+22-1834-tier8 CI job set:

applications/kitchensink/Kitchensink8H.java

https://mach5.us.oracle.com/mdash/jobs/mach5-one-jdk-21+22-1834-tier8-20230507-2251-45601302/tasks/mach5-one-jdk-21+22-1834-tier8-20230507-2251-45601302-applications_kitchensink_Kitchensink8H_java-linux-x64-debug-39/results?search=status%3Afailed%20AND%20-state%3Ainvalid

https://mach5.us.oracle.com:10060/api/v1/results/mach5-one-jdk-21+22-1834-tier8-20230507-2251-45601302-applications_kitchensink_Kitchensink8H_java-linux-x64-debug-39-1683514118-1/log

https://mach5.us.oracle.com:10060/api/v1/results/mach5-one-jdk-21+22-1834-tier8-20230507-2251-45601302-applications_kitchensink_Kitchensink8H_java-linux-x64-debug-39-1683514118-1/artifacts/hs_err_pid1750913.log

linux-x64-debug: ol8-x64-881558.s5.javaplatfo1iad.oraclevcn.com

The test task's JVM args are: -XX:+UseParallelGC;;;","2023-05-08 14:51;dcubed;We have a different assertion failure in the same neighborhood of code
in jdk-21+22-1834-tier8 CI job  with:

applications/kitchensink/Kitchensink8H.java

#  Internal Error (/opt/mach5/mesos/work_dir/slaves/741e9afd-8c02-45c3-b2e2-9db1450d0832-S24789/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/1e64a87c-5b04-45db-ac9b-3789735cea2a/runs/26b4b611-ca48-4854-b480-389ca75c7539/workspace/open/src/hotspot/share/prims/jvmtiEventController.cpp:214), pid=1750913, tid=1750959
#  assert(state != nullptr) failed: sanity check
#
# JRE version: Java(TM) SE Runtime Environment (21.0+22) (fastdebug build 21-ea+22-LTS-1834)
# Java VM: Java HotSpot(TM) 64-Bit Server VM (fastdebug 21-ea+22-LTS-1834, mixed mode, sharing, tiered, compressed oops, compressed class ptrs, parallel gc, linux-amd64)
# Problematic frame:
# V  [libjvm.so+0x1144422]  EnterInterpOnlyModeClosure::do_thread(Thread*)+0x4a2

Here's the crashing thread's stack trace:

---------------  T H R E A D  ---------------

Current thread (0x00007f43d04c40c0):  JavaThread ""JvmtiStressModule""        [_thread_in_vm, id=1750959, stack(0x00007f4394019000,0x00007f439411a000) (1028K)] _threads_hazard_ptr=0x00007f430806ed90, _nested_threads_hazard_ptr_cnt=0

Stack: [0x00007f4394019000,0x00007f439411a000],  sp=0x00007f4394116dc0,  free space=1015k
Native frames: (J=compiled Java code, j=interpreted, Vv=VM code, C=native code)
V  [libjvm.so+0x1144422]  EnterInterpOnlyModeClosure::do_thread(Thread*)+0x4a2  (jvmtiEventController.cpp:214)
V  [libjvm.so+0xd70954]  HandshakeOperation::do_handshake(JavaThread*)+0x44  (handshake.cpp:324)
V  [libjvm.so+0xd70eea]  HandshakeState::try_process(HandshakeOperation*) [clone .part.0]+0xfa  (handshake.cpp:660)
V  [libjvm.so+0xd716aa]  Handshake::execute(HandshakeClosure*, ThreadsListHandle*, JavaThread*)+0x49a  (handshake.cpp:388)
V  [libjvm.so+0x113ec06]  JvmtiEventControllerPrivate::enter_interp_only_mode(JvmtiThreadState*)+0x96  (jvmtiEventController.cpp:375)
V  [libjvm.so+0x113ef7e]  JvmtiEventControllerPrivate::recompute_thread_enabled(JvmtiThreadState*) [clone .part.0]+0xee  (jvmtiEventController.cpp:597)
V  [libjvm.so+0x1140520]  JvmtiEventControllerPrivate::recompute_enabled()+0x110  (jvmtiEventController.cpp:558)
V  [libjvm.so+0x1142fe2]  JvmtiEventController::set_user_enabled(JvmtiEnvBase*, JavaThread*, oop, jvmtiEvent, bool)+0x162  (jvmtiEventController.cpp:1060)
V  [libjvm.so+0x11194c8]  JvmtiEnv::SetEventNotificationMode(jvmtiEventMode, jvmtiEvent, _jobject*, ...)+0x138  (jvmtiEnv.cpp:586)
V  [libjvm.so+0x10ccf67]  jvmti_SetEventNotificationMode+0x107  (jvmtiEnter.cpp:5321)
C  [libJvmtiStressModule.so+0x3f08]  enable_events+0x88  (libJvmtiStressModule.c:631)
C  [libJvmtiStressModule.so+0x4d5a]  Java_applications_kitchensink_process_stress_modules_JvmtiStressModule_finishIteration+0x83a  (libJvmtiStressModule.c:638)
j  applications.kitchensink.process.stress.modules.JvmtiStressModule.finishIteration()Lapplications/kitchensink/process/stress/modules/JvmtiStatistics;+0
j  applications.kitchensink.process.stress.modules.JvmtiStressModule.execute()V+285
j  applications.kitchensink.process.stress.modules.StressModule.run()V+118
j  java.lang.Thread.runWith(Ljava/lang/Object;Ljava/lang/Runnable;)V+5 java.base@21-ea
j  java.lang.Thread.run()V+19 java.base@21-ea
v  ~StubRoutines::call_stub 0x00007f43c016cd21
V  [libjvm.so+0xe563e2]  JavaCalls::call_helper(JavaValue*, methodHandle const&, JavaCallArguments*, JavaThread*)+0x462  (javaCalls.cpp:415)
V  [libjvm.so+0xe569c3]  JavaCalls::call_virtual(JavaValue*, Klass*, Symbol*, Symbol*, JavaCallArguments*, JavaThread*)+0x283  (javaCalls.cpp:329)
V  [libjvm.so+0xe56bd1]  JavaCalls::call_virtual(JavaValue*, Handle, Klass*, Symbol*, Symbol*, JavaThread*)+0x71  (javaCalls.cpp:191)
V  [libjvm.so+0xfa5ec6]  thread_entry(JavaThread*, JavaThread*)+0x96  (jvm.cpp:2919)
V  [libjvm.so+0xe885fe]  JavaThread::thread_main_inner()+0x17e  (javaThread.cpp:717)
V  [libjvm.so+0x175a6b8]  Thread::call_run()+0xb8  (thread.cpp:215)
V  [libjvm.so+0x145946a]  thread_native_entry(Thread*)+0x11a  (os_linux.cpp:740)
Java frames: (J=compiled Java code, j=interpreted, Vv=VM code)
j  applications.kitchensink.process.stress.modules.JvmtiStressModule.finishIteration()Lapplications/kitchensink/process/stress/modules/JvmtiStatistics;+0
j  applications.kitchensink.process.stress.modules.JvmtiStressModule.execute()V+285
j  applications.kitchensink.process.stress.modules.StressModule.run()V+118
j  java.lang.Thread.runWith(Ljava/lang/Object;Ljava/lang/Runnable;)V+5 java.base@21-ea
j  java.lang.Thread.run()V+19 java.base@21-ea
v  ~StubRoutines::call_stub 0x00007f43c016cd21;;;","2023-05-10 17:49;pchilanomate;This is a bug introduced in JDK-8306028. Specifically, the code to delete the JvmtiThreadState of a terminating vthread was moved before we start the VTMS transition:

before JDK-8306028:

JvmtiVTMSTransitionDisabler::start_VTMS_transition(vthread, /* is_mount */ false);

  if (last_unmount && thread->jvmti_thread_state() != nullptr) {
    JvmtiExport::cleanup_thread(thread);
    thread->set_jvmti_thread_state(nullptr);
    oop vt = JNIHandles::resolve(vthread);
    java_lang_Thread::set_jvmti_thread_state(vt, nullptr);
  }

now:

if (thread->jvmti_thread_state() != nullptr) {
    JvmtiExport::cleanup_thread(thread);
    thread->set_jvmti_thread_state(nullptr);
    oop vt = JNIHandles::resolve(vthread);
    java_lang_Thread::set_jvmti_thread_state(vt, nullptr);
  }
  VTMS_unmount_begin(vthread);


This means that code can now run concurrently with recompute_enabled() executed in SetEventNotificationMode (used by the JvmtiStressModule Kitchensink module) leading to the crashes we see.

There are different failure modes depending on the timing of events, but here is the sequence of events that leads to the ""guarantee(Thread::is_JavaThread_protected_by_TLH(target)) failed"" crash:

1) Virtual thread(VT) mounted on some carrier thread(CT) calls JvmtiVTMSTransitionDisabler::VTMS_vthread_end() in the last unmount operation. JvmtiExport::cleanup_thread() is called and the JvmtiThreadState associated with VT is deleted. 
2) An agent executes SetEventNotification which ends up calling recompute_enabled(). Here we execute the conditional that walks all JavaThreads and creates any missing JVMTI states. This includes creating JVMTI states for a mounted vthread in case there is one. Since VT is still mounted on CT and it has no state (just deleted) we create a new JVMTI state for it and set _thread to be CT. We also set the _jvmti_thread_state field of CT to point to this new state. The SetEventNotification operation finishes.
3) VT mounted on CT returns from JvmtiExport::cleanup_thread() and clears the previously set _jvmti_thread_state field of CT. Now when executing JvmtiThreadState::unbind_from() in thread->rebind_to_jvmti_thread_state_of(thread->threadObj()), since the _jvmti_thread_state field of CT was set to null we just return without clearing the _thread field of the newly created vthread's JVMTI state.
4) CT exits
5) An agent executes a SetEventNotification SINGLE_STEP enable operation. Now in recompute_enabled() when looping over all states we find the previously created JVMTI state belonging to the terminated VT that has _thread set to CT. We call recompute_thread_enabled() -> enter_interp_only_mode() and eventually crash when we get to the handshake code because CT has already exited.


I was able to create a reproducer, which I attached. The test reproduces the previously explained crash, although tweaking it will reveal the other failure modes. To make it 100% reliable a os::naked_short_sleep() should be added between the call to JvmtiExport::cleanup_thread(thread) and clearing the _jvmti_thread_state of the carrier in JvmtiVTMSTransitionDisabler::VTMS_vthread_end(). With a delay of 5ms it already reproduces the crash always for me.
;;;","2023-05-11 20:03;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/13949
Date: 2023-05-12 02:14:00 +0000;;;","2023-05-17 13:18;dukebot;Changeset: 24094482
Author:    Patricio Chilano Mateo <pchilanomate@openjdk.org>
Date:      2023-05-17 20:16:21 +0000
URL:       https://git.openjdk.org/jdk/commit/24094482f00b6ac412bfad770051775f2ab5cf73
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Remove test com/sun/jdi/JdbLastErrorTest.java,JDK-8307362,5100022,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,kevinw,kevinw,kevinw,2023-05-03 07:12,2023-05-10 23:50,2023-10-01 09:56,2023-05-03 23:32,,,,,,,21,core-svc,,0,noreg-self,,,,,,,,,,,,,"JdbLastErrorTest.java tests use of SetLastError and GetLastError using Panama (on Windows).  It is unreliable.

The updated Panama situation is that this test as written will still fail sometimes, but that is because the test is doing it wrong. An actual call to the native GetLastError can still overwrite the last error value: making a new call is likely to break the last error value just doing method resolution, at least the first time it happens.

But the answer to the original problem is that we now have Linker.Option.CaptureCallState which gives us the chance to capture last error when calling a MethodHandle, and read the stored last error code in a VarHandle.

The test should be removed, it is redundant.  Calling set/get last error directly is not the way to do this, and CaptureCallState is tested in test/jdk/java/foreign/capturecallstate/TestCaptureCallState.java
",,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8305913,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i31d8z:",9223372036854775807,b22,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@3397f701,,,,,,,,,"2023-05-03 08:50;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/13781
Date: 2023-05-03 14:18:00 +0000;;;","2023-05-03 23:32;dukebot;Changeset: e206d57b
Author:    Kevin Walls <kevinw@openjdk.org>
Date:      2023-05-04 06:31:15 +0000
URL:       https://git.openjdk.org/jdk/commit/e206d57bfc09032e17d09714fc54ab2f5e961792
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
serviceability/sa/ClhsdbDumpclass.java could leave files owned by root on macOS,JDK-8307347,5100008,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,azeller,azeller,azeller,2023-05-03 02:52,2023-05-30 10:40,2023-10-01 09:56,2023-05-08 01:38,17,21,,,,,21,core-svc,,0,jdk17u-fix-request,jdk17u-fix-yes,noreg-self,,,,,,,,,,,"When running the hotspot jtreg test serviceability/sa/ClhsdbDumpclass.java on a macOS that allows for passwordless sudo, the test will leave a file in the scratch directories that is owned by root and cannot be deleted by normal users.

On macOS the test start the class dump with sudo if possible. The dumped class file is owned by root and will be dumped to $JTwork/scratch/jdk/test/lib/apps/LingeredApp.class

The test will write a warning in the jtr file:
...
#section:script_messages
----------messages:(11/980)----------
JDK under test: xxx
openjdk version ""21-internal"" 2023-05-02
....
Library /test/lib; kind: packages
   source directory: xxx/sources/test/lib
   class directory: xxx/JTwork/classes/test/lib
Can't delete xxx/JTwork/scratch/jdk/test/lib/apps/LingeredApp.class
Can't clean xxx/JTwork/scratch
WARNING: failed to clean up files after test
WARNING: closing agent(s)
.... 

I suggest to skip the test in case that sudo rights are available. That was already done for a similar test in JDK-8290687.",,,,,,,,,,,JDK-8308852,,,,,,,,,,,,,,,,,,,,,JDK-8290687,,,,JDK-8290687,,,,,,,,,,,,,,,,,,,,,os_x,,,,,,"0|i31d5v:",9223372036854775807,b22,,,,,,,,,,,"2023-05-04 00:38;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/13791
Date: 2023-05-04 07:30:49 +0000;;;","2023-05-08 01:38;dukebot;Changeset: 5c7ede94
Author:    Arno Zeller <azeller@openjdk.org>
Committer: Christoph Langer <clanger@openjdk.org>
Date:      2023-05-08 08:36:52 +0000
URL:       https://git.openjdk.org/jdk/commit/5c7ede94ae59b46c12d40a38bf5b7e15319cc7e2
;;;","2023-05-23 00:55;azeller;JDK17 backport request:
I would like to have the patch in JDk17 as well because I have seen the issue there too. The patch applies cleanly. The risk is low, because it only modifies the test.;;;","2023-05-23 01:09;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/1387
Date: 2023-05-23 07:50:10 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Correctly update line maps when class redefine rewrites bytecodes,JDK-8307331,5099992,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,adinn,adinn,adinn,2023-05-03 01:16,2023-07-24 21:40,2023-10-01 09:56,2023-05-05 00:52,11,17,21,8,,,21,hotspot,,0,jdk17u-fix-request,jdk17u-fix-yes,,,,,,,,,,,,"Class VM_RedefineClasses sometimes modifies the *new* bytecode it is presented. This can occur when the the old and new class's constant pools differ. VM_RedefineClasses constructs a merged constant pool, supplementing all the entries found in the old class bytecode with all extra, distinct entries found in the new bytecode. This may relocate some of the new entries, necessitating rewrites to pool indices  appearing as operands in the newly supplied method bytecode. 

Normally, the rewritten operations occupy the same number of bytes as the original. However, in the case of an some operations the updated index for the merged pool may no longer fit into 8 bits and require use of  an alternative operation that allows a 16 bit index, for example an ldc may need to be replaced with a ldc_w. In such cases this requires adjustment of all offsets that reference later operations.

Class VM_RedefineClasses correctly adjust all offsets in the method bytecode and also includes logic to update offsets in the line number table. However, it fails to adjust line numbers correctly when more than one such change is required. Each adjustment is applied independently to a new copy the method's original line number table. What is needed is for them to be applied cumulatively to a single new copy.

This problem can manifest as a JVM forced exit when debugging via JDWP. If a debugger hot swaps a class that requires several replacements and then places a line break which targets a bytecode operation that follows the first modified bytecode then the JDWP agent will use an invalid line map to identify the first bytecode instruction for the line, the location at which it expects to temporarily swap the actual, correct bytecode with a breakpoint pseudo-bytecode. Since this location can be off by one (or more) the agent may end up overwriting a bytecode instruction operand rather than a proper instruction. In many cases this mistake be caught as a verify error, leading to a forced exit, but it is also possible that the program will continue to execute valid yet incorrect bytecode.",,,,,,,,,,,JDK-8311608,JDK-8312652,JDK-8307805,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,generic,,,,,,,,,generic,,,,,,"0|i31d2b:",9223372036854775807,b22,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@661b156a,,,,,,,,,"2023-05-03 01:18;adinn;A reproducer and analysis of the problem are available here

  https://bugzilla.redhat.com/show_bug.cgi?id=2183436
;;;","2023-05-04 02:31;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/13795
Date: 2023-05-04 09:26:33 +0000;;;","2023-05-05 00:52;dukebot;Changeset: f94f9577
Author:    Andrew Dinn <adinn@openjdk.org>
Date:      2023-05-05 07:50:21 +0000
URL:       https://git.openjdk.org/jdk/commit/f94f957734355fe112e861d1f2f0b49df20f6b66
;;;","2023-05-05 01:44;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/1324
Date: 2023-05-05 08:38:53 +0000;;;","2023-05-09 03:47;adinn;Fix Request 17u
 
Backporting this patch is desirable because it avoids a possible JVM crash when debugging an application. The error it fixes may equally serve to correct invalid reporting of source line numbers when an agent has been used to transform bytecode.

The risk is low for several reasons:
1. The circumstances in which the error occurs are rare i.e. only after bytecode is rewritten by an agent or a debugger hot swap and only then in circumstances where a constant pool change causes a pool index for a constant value to switch from < 256 to >= 256.
2. Adjustments to line numbers almost always have only 'cosmetic' significance for application and JDK runtime code (whereas, by contrast, incorrect values can easily lead to debugger crashes)
3. The change is very strictly localized to a few lines of the serviceability code that deal with adjusting line number tables during class redefinition.

I have run tier1 tests with the patch without seeing any errors. I have also verified that the patch fixes the hand-driven test case that was used to diagnose the problem.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Package jdk.internal.classfile.java.lang.constant become obsolete,JDK-8307326,5099984,Bug,Closed,JDK,JDK,software,duke,,,P3,Fixed,asotona,asotona,asotona,2023-05-03 00:05,2023-08-04 12:49,2023-10-01 09:56,2023-05-17 05:47,21,,,,,,21,core-libs,,1,classfile-api,,,,,,,,,,,,,"Package jdk.internal.java.lang.constant containing ModuleDesc and PackageDesc become obsolete after JDK-8306729.
All references to ModuleDesc and PackageDesc classes in jdk.internal.classfile.java.lang.constant package should be replaced with references to the relevant classes in java.lang.constant package (across all JDK sources, tests and JMH benchmarks).
The package export hooks should be removed from java.base module-info, make files and test headers.
The package should be deleted.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i31d0j:",9223372036854775807,b23,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4c088d55,,,,,,,Verified,,"2023-05-15 01:46;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/13979
Date: 2023-05-15 08:38:54 +0000;;;","2023-05-17 05:47;dukebot;Changeset: 5763be72
Author:    Adam Sotona <asotona@openjdk.org>
Date:      2023-05-17 12:45:19 +0000
URL:       https://git.openjdk.org/jdk/commit/5763be726700be322de3bbaf345d80e11936b472
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
closed Problemlist correction,JDK-8307319,5099976,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,psadhukhan,psadhukhan,psadhukhan,2023-05-02 20:55,2023-09-06 04:36,2023-10-01 09:56,2023-05-08 20:04,,,,,,,21,client-libs,,0,sn_143,,,,,,,,,,,,,"PL entry has fixed JBS bug listed JDK-8284825 which should be removed.

javax/swing/RepaintManager/4939857/bug4939857.java 8237216,8284825 linux-all,windows-all
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8315773,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i31cyr:",9223372036854775807,b22,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@568a5b31,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Missing ResourceMark in CDS and JVMTI code,JDK-8307315,5099972,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,ccheung,iklam,iklam,2023-05-02 17:24,2023-05-22 00:53,2023-10-01 09:56,2023-05-16 07:44,21,,,,,,21,hotspot,,0,cds,,,,,,,,,,,,,"https://github.com/openjdk/jdk/blob/418a82551a2c58e43963beb5aa242a58bbd30e2f/src/hotspot/share/cds/filemap.cpp#L2556

ClassFileStream* FileMapInfo::open_stream_for_jvmti(InstanceKlass* ik, Handle class_loader, TRAPS) {

+ ResourceMark rm(THREAD); // <-- is missing
  Symbol* name = ik->name();
  const char* const class_name = name->as_C_string();

https://github.com/openjdk/jdk/blob/418a82551a2c58e43963beb5aa242a58bbd30e2f/src/hotspot/share/prims/jvmtiExport.cpp#L994

+ ResourceMark rm(THREAD); // <-- is missing. 
    JvmtiClassFileLoadEventMark jem(_thread, _h_name, _class_loader,
                                    _h_protection_domain,
                                    _class_being_redefined);

JvmtiClassFileLoadEventMark allocates resources in its constructor.
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i31cxv:",9223372036854775807,b23,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,,,"2023-05-03 12:14;dcubed;Moving to hotspot/jvmti for initial triage.;;;","2023-05-03 12:16;dcubed;The bug's description mentions missing ResourceMarks
in both CDS code and JVM/TI code. Moving this bug back
to hotspot/runtime...;;;","2023-05-12 12:30;ccheung;ResourceMark is allocated by an indirect caller such as:
SystemDictionary::load_instance_class_impl
static jclass jvm_lookup_define_class
jni_DefineClass
static jclass jvm_define_class_common
static jclass jvm_lookup_define_class
KlassFactory::create_from_stream

ResouceMark is missing in the following call path:

FileMapInfo::open_stream_for_jvmti(InstanceKlass *, Handle, JavaThread *) : ClassFileStream *
    KlassFactory::check_shared_class_file_load_hook(InstanceKlass *, Symbol *, Handle, Handle, const ClassFileStream *, JavaThread *) : InstanceKlass *
        SystemDictionary::load_shared_class(InstanceKlass *, Handle, Handle, const ClassFileStream *, PackageEntry *, JavaThread *) : InstanceKlass *
            SystemDictionary::load_shared_lambda_proxy_class(InstanceKlass *, Handle, Handle, PackageEntry *, JavaThread *) : InstanceKlass *
                SystemDictionaryShared::prepare_shared_lambda_proxy_class(InstanceKlass *, InstanceKlass *, JavaThread *) : InstanceKlass *
                    JVM_LookupLambdaProxyClassFromArchive(JNIEnv *, jclass, jstring, jobject, jobject, jobject, jobject) : jclass


JvmtiClassFileLoadHookPoster::post_to_env(JvmtiEnv *, bool) : void
    JvmtiClassFileLoadHookPoster::post_all_envs() : void (2 matches)
        JvmtiClassFileLoadHookPoster::post() : void
            JvmtiExport::post_class_file_load_hook(Symbol *, Handle, Handle, unsigned char * *, unsigned char * *, JvmtiCachedClassFileData * *) : bool
                KlassFactory::check_shared_class_file_load_hook(InstanceKlass *, Symbol *, Handle, Handle, const ClassFileStream *, JavaThread *) : InstanceKlass *
                    SystemDictionary::load_shared_class(InstanceKlass *, Handle, Handle, const ClassFileStream *, PackageEntry *, JavaThread *) : InstanceKlass *
                        SystemDictionary::load_shared_lambda_proxy_class(InstanceKlass *, Handle, Handle, PackageEntry *, JavaThread *) : InstanceKlass *
                            SystemDictionaryShared::prepare_shared_lambda_proxy_class(InstanceKlass *, InstanceKlass *, JavaThread *) : InstanceKlass *
                                JVM_LookupLambdaProxyClassFromArchive(JNIEnv *, jclass, jstring, jobject, jobject, jobject, jobject) : jclass;;;","2023-05-15 09:01;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/13992
Date: 2023-05-15 15:53:16 +0000;;;","2023-05-16 07:44;dukebot;Changeset: 8686a36b
Author:    Calvin Cheung <ccheung@openjdk.org>
Date:      2023-05-16 14:42:33 +0000
URL:       https://git.openjdk.org/jdk/commit/8686a36b405fb3bb95f51493c1ef3e470acf2e85
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Timeouts on one macOS 12.6.1 host of two Swing JTableHeader tests,JDK-8307311,5099964,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,psadhukhan,prr,prr,2023-05-02 15:29,2023-05-28 20:47,2023-10-01 09:56,2023-05-22 04:43,,,,,,,21,client-libs,,0,sn_144,,,,,,,,,,,,,"
test/jdk/javax/swing/JTableHeader/6884066/bug6884066.java
test/jdk/javax/swing/JTableHeader/6889007/bug6889007.java

were just updated under respective bug ids
https://bugs.openjdk.org/browse/JDK-8305778
https://bugs.openjdk.org/browse/JDK-8299713

The updates were for stability.
But it seems they can both still fail some times.

It seems to be easier to reproduce the 2nd test failing if you create a
small test group like this and add it to TEST.groups 

+desktop_timeout = \
+    javax/swing/JTable/8236907/LastVisibleRow.java \
+    javax/swing/JTable/BugCellEditorListener.java \
+    javax/swing/JTable/DefaultRowSorterCacheTest.java \
+    javax/swing/JTable/JTableEditorNPE.java \
+    javax/swing/JTable/TestJTableGridReset.java \
+    javax/swing/JTableHeader/4473075/bug4473075.java \
+    javax/swing/JTableHeader/6567433/UpdateUIRecursionTest.java \
+    javax/swing/JTableHeader/6884066/bug6884066.java \
+    javax/swing/JTableHeader/6889007/bug6889007.java
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i31cw3:",9223372036854775807,b24,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@568a5b31,,,,,,,,,"2023-05-02 15:31;prr;On my macOS 13.3.1 system I didn't get a timeout but I go this
java.lang.RuntimeException: Wrong type of cursor!
	at bug6889007$MyTableHeaderUI.rolloverColumnUpdated(bug6889007.java:121)
	at java.desktop/javax.swing.plaf.basic.BasicTableHeaderUI.updateRolloverColumn(BasicTableHeaderUI.java:484)
	at java.desktop/javax.swing.plaf.basic.BasicTableHeaderUI$MouseInputHandler.mouseMoved(BasicTableHeaderUI.java:215)
	at java.desktop/java.awt.AWTEventMulticaster.mouseMoved(AWTEventMulticaster.java:337)
	at java.desktop/java.awt.Component.processMouseMotionEvent(Component.java:6666)
	at java.desktop/javax.swing.JComponent.processMouseMotionEvent(JComponent.java:3416)
	at java.desktop/java.awt.Component.processEvent(Component.java:6390)
	at java.desktop/java.awt.Container.processEvent(Container.java:2266)
	at java.desktop/java.awt.Component.dispatchEventImpl(Component.java:4996)
	at java.desktop/java.awt.Container.dispatchEventImpl(Container.java:2324)
	at java.desktop/java.awt.Component.dispatchEvent(Component.java:4828)
	at java.desktop/java.awt.LightweightDispatcher.retargetMouseEvent(Container.java:4948)
	at java.desktop/java.awt.LightweightDispatcher.processMouseEvent(Container.java:4588)
	at java.desktop/java.awt.LightweightDispatcher.dispatchEvent(Container.java:4516)
	at java.desktop/java.awt.Container.dispatchEventImpl(Container.java:2310)
	at java.desktop/java.awt.Window.dispatchEventImpl(Window.java:2780)
	at java.desktop/java.awt.Component.dispatchEvent(Component.java:4828)
	at java.desktop/java.awt.EventQueue.dispatchEventImpl(EventQueue.java:775)
	at java.desktop/java.awt.EventQueue$4.run(EventQueue.java:720)
	at java.desktop/java.awt.EventQueue$4.run(EventQueue.java:714)
	at java.base/java.security.AccessController.doPrivileged(AccessController.java:400)
	at java.base/java.security.ProtectionDomain$JavaSecurityAccessImpl.doIntersectionPrivilege(ProtectionDomain.java:87)
	at java.base/java.security.ProtectionDomain$JavaSecurityAccessImpl.doIntersectionPrivilege(ProtectionDomain.java:98)
	at java.desktop/java.awt.EventQueue$5.run(EventQueue.java:747)
	at java.desktop/java.awt.EventQueue$5.run(EventQueue.java:745)
	at java.base/java.security.AccessController.doPrivileged(AccessController.java:400)
	at java.base/java.security.ProtectionDomain$JavaSecurityAccessImpl.doIntersectionPrivilege(ProtectionDomain.java:87)
	at java.desktop/java.awt.EventQueue.dispatchEvent(EventQueue.java:744)
	at java.desktop/java.awt.EventDispatchThread.pumpOneEventForFilters(EventDispatchThread.java:203)
	at java.desktop/java.awt.EventDispatchThread.pumpEventsForFilter(EventDispatchThread.java:124)
	at java.desktop/java.awt.EventDispatchThread.pumpEventsForHierarchy(EventDispatchThread.java:113)
	at java.desktop/java.awt.EventDispatchThread.pumpEvents(EventDispatchThread.java:109)
	at java.desktop/java.awt.EventDispatchThread.pumpEvents(EventDispatchThread.java:101)
	at java.desktop/java.awt.EventDispatchThread.run(EventDispatchThread.java:90)
STATUS:Failed.`main' threw exception: java.lang.RuntimeException: Wrong type of cursor!;;;","2023-05-17 00:11;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/14026
Date: 2023-05-17 07:06:01 +0000;;;","2023-05-22 04:43;dukebot;Changeset: b3cb82b8
Author:    Prasanta Sadhukhan <psadhukhan@openjdk.org>
Date:      2023-05-22 11:42:11 +0000
URL:       https://git.openjdk.org/jdk/commit/b3cb82b859d22b18343d125349a5aebc0afb8576
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Backport the tests for JDK-8058969 and JDK-8039271 to the OpenJDK8,JDK-8307310,5099963,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,serb,serb,serb,2023-05-02 15:11,2023-05-31 07:38,2023-10-01 09:56,2023-05-24 15:40,openjdk8u372,,,,,,openjdk8u382,client-libs,,0,11-na,jdk8u-fix-request,jdk8u-fix-yes,,,,,,,,,,,"Both tests were created for a bug introduced in the jdk9 and related to the ""modules"", so the patches are not applicable to the jdk8 but the test code coverage can be improved.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8039271,JDK-8058969,,,,,,,,,,,other,,,,,,,,,generic,,,,,,"0|i31cvv:",9223372036854775807,b03,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4b09ce31,,,,,,,,,"2023-05-02 15:26;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk8u-dev/pull/310
Date: 2023-05-02 22:13:30 +0000;;;","2023-05-10 21:03;serb;Fix request (8u)

Both tests were created for a bug introduced in the jdk9 and related to the ""modules"", so the patches are not applicable to the jdk8 but the test code coverage can be improved by the ""new"" tests.

Review 8u-dev: https://github.com/openjdk/jdk8u-dev/pull/310;;;","2023-05-24 15:40;dukebot;Changeset: 764dbd54
Author:    Sergey Bylokhov <serb@openjdk.org>
Date:      2023-05-24 22:38:59 +0000
URL:       https://git.openjdk.org/jdk8u-dev/commit/764dbd54958f606475092d2ccc5f831d9ad5d7d5
;;;","2023-05-31 07:37;dukebot;Changeset: 764dbd54
Author:    Sergey Bylokhov <serb@openjdk.org>
Date:      2023-05-24 22:38:59 +0000
URL:       https://git.openjdk.org/jdk8u/commit/764dbd54958f606475092d2ccc5f831d9ad5d7d5
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Change some ConstantPool::name_ref_at calls to uncached_name_ref_at,JDK-8307306,5099958,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,matsaave,iklam,iklam,2023-05-02 14:00,2023-05-10 23:51,2023-10-01 09:56,2023-05-05 07:31,,,,,,,21,hotspot,,0,,,,,,,,,,,,,,"ConstantPool::name_ref_at calls(int which) eventually comes to here with (uncached == false):

https://github.com/openjdk/jdk/blob/8c106b0c8e4562a44ecd1e069c0911acfc428ecf/src/hotspot/share/oops/constantPool.cpp#L689-L692

int ConstantPool::impl_name_and_type_ref_index_at(int which, bool uncached) {
  int i = which;
  if (!uncached && cache() != nullptr) { <<< HERE
    if (ConstantPool::is_invokedynamic_index(which)) {

name_ref_at calls expects that the ""which"" parameter to be an index rewritten by rewriter.cpp. However, if the class is rewritten, cache() cannot be null.

The only reason we have the ""&& cache() != nullptr"" check is we have buggy code that calls name_ref_at calls not with a rewritten index, but with a regular constant pool index. 

Example:

https://github.com/openjdk/jdk/blob/8c106b0c8e4562a44ecd1e069c0911acfc428ecf/src/hotspot/share/interpreter/rewriter.cpp#L231


void Rewriter::maybe_rewrite_invokehandle(address opc, int cp_index, int cache_index, bool reverse) {
  if (!reverse) {
  ...
        if (_pool->klass_ref_at_noresolve(cp_index) == vmSymbols::java_lang_invoke_MethodHandle() &&
            MethodHandles::is_signature_polymorphic_name(vmClasses::MethodHandle_klass(),
                                                         _pool->name_ref_at(cp_index))) {


Here we clearly have a cp_index, and we are *before* the class was rewritten). This call should be changed to 

     _pool->uncached_name_ref_at(cp_index))) {

To catch all these errors we should change the (!uncached && cache() != nullptr) check to:

  if (!uncached) {
    assert(cache() != nullptr, ""'which' is a rewritten index so this class must have been rewritten"");

=================
Similarly, some other calls like uncached_klass_ref_index_at(), signature_ref_at(), etc, should be changed to their uncached_xxx() variant.
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i31cur:",9223372036854775807,b22,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,,,"2023-05-02 14:12;iklam;I have a prototype at

https://github.com/openjdk/jdk/compare/master...iklam:jdk:8307306-prototype-uncached-name-ref-at?expand=1

It can build linux-x64-debug and pass all the CDS tests, but I don't know if I caught all the cases.;;;","2023-05-03 13:49;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/13786
Date: 2023-05-03 19:18:18 +0000;;;","2023-05-05 07:31;dukebot;Changeset: 6fe959c6
Author:    Matias Saavedra Silva <matsaave@openjdk.org>
Date:      2023-05-05 14:24:40 +0000
URL:       https://git.openjdk.org/jdk/commit/6fe959c62d6475b8f4c9ada2a8eb7b36d22d5e5e
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Update HarfBuzz to 7.2.0,JDK-8307301,5099952,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,honkar,honkar,honkar,2023-05-02 11:45,2023-09-29 08:44,2023-10-01 09:56,2023-05-05 10:36,11,17,20,21,,,21,client-libs,,0,11-bp,17-bp,3rdparty,cssn23_05_02,harfbuzz,jdk11u-fix-request,jdk11u-fix-yes,jdk17u-fix-request,jdk17u-fix-yes,noreg-other,sn_143,,,"The latest version of harfbuzz at this point of time is v7.2.0. OpenJDK should be upgraded to latest.
https://github.com/harfbuzz/harfbuzz/releases",,,,,,,,,,,JDK-8308448,JDK-8308449,JDK-8308493,JDK-8310700,JDK-8311274,,,,,,JDK-8215065,,,,,JDK-8305683,JDK-8305527,,,,,JDK-8307603,JDK-8307604,,,JDK-8312592,JDK-8301998,JDK-8307569,JDK-8307210,,,,,,,,,generic,,,,,,,,,generic,,,,,,"0|i31ctf:",9223372036854775807,b22,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4b09ce31,,,,,,,,,"2023-05-05 09:59;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/13835
Date: 2023-05-05 16:40:57 +0000;;;","2023-05-05 10:36;dukebot;Changeset: d8b230c3
Author:    Harshitha Onkar <honkar@openjdk.org>
Date:      2023-05-05 17:33:25 +0000
URL:       https://git.openjdk.org/jdk/commit/d8b230c384c47cc2bdc28d0849859d58a6a52eae
;;;","2023-06-18 23:27;goetz;Fix request [17u]

I backport this for parity with 17.0.9-oracle.
One of the required updates of external libs.
Clean backport.
SAP nightly testing passed.;;;","2023-06-18 23:35;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/1465
Date: 2023-06-19 06:28:22 +0000;;;","2023-06-29 23:59;goetz;Fix request [11u]

I backport this for parity with 11.0.21-oracle.
One of the required updates of external libs.
Clean backport.
SAP nightly testing passed. ;;;","2023-06-30 00:09;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk11u-dev/pull/2013
Date: 2023-06-30 07:03:09 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Move more DnD tests to open,JDK-8307299,5099950,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,achung,achung,achung,2023-05-02 11:06,2023-07-05 11:19,2023-10-01 09:56,2023-05-17 11:59,17,20,21,,,,21,client-libs,,0,amazon-interest,jdk17u-fix-request,jdk17u-fix-yes,sn_142,test_sprint,,,,,,,,,Moving recently updated DnD tests to open,,,,,,,,,,,JDK-8311524,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,generic,,,,,,,,,generic,,,,,,"0|i31csz:",9223372036854775807,b24,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@5a9b3fd3,,,,,,,,,"2023-05-02 11:19;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/13759
Date: 2023-05-02 18:12:38 +0000;;;","2023-05-17 12:00;dukebot;Changeset: 950c5df8
Author:    Alisen Chung <achung@openjdk.org>
Date:      2023-05-17 18:57:59 +0000
URL:       https://git.openjdk.org/jdk/commit/950c5df859c373864ab4e7cf080c38bbd501e54b
;;;","2023-06-29 11:27;jcao;Fix Request (17u)

We have a new hire working on it. Will update this issue when there is more information.;;;","2023-07-03 09:10;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/1532
Date: 2023-07-03 16:04:04 +0000;;;","2023-07-03 09:13;jcao;Fix Request (17u)

On behalf of Chad Rakoczy <chadrako@amazon.com>.

Clean test-only backport.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
JFR: Ensure jdk.jfr.internal.TypeLibrary is initialized only once,JDK-8307298,5099949,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,sgehwolf,rtoyonaga,rtoyonaga,2023-05-02 11:02,2023-05-17 16:51,2023-10-01 09:56,2023-05-11 11:07,,,,,,,21,hotspot,,0,,,,,,,,,,,,,,"As of JDK 21, jdk.jfr.internal.TypeLibrary#initialize() unconditionally initializes TypeLibary. If TypeLibary is initialized more than once, there is the potential for things to break. This is because initialization results in adding elements to jdk.jfr.internal.Type#fields which may have already been changed to an unmodifiableList after the initial initialization of TypeLibrary. (see attached stacktrace). This suggests that TypeLibrary is only intended to be initialized once.

This is of concern for JFR support in GraalVM Native Image. Specifically, multiple initializations of TypeLibrary breaks the ability to use JFR at native image built time. This is because, if JFR is used at image build time, the data of a few of the JFR singletons such as MetadataRepository must be re-initialized for runtime recordings to start with a ""clean-slate"". However, re-initializing MetadataRepository, also has the effect of calling TypeLibrary#initialize() which unconditionally attempts to initialize TypeRepository, resulting in errors. 

It would be good if the previous behavior of TypeLibrary#initialize() could be re-implemented. A simple check whether the TypeLibrary is already initialized should be enough to fix the problem.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8303674,,,,,"2023-05-02 09:56;rtoyonaga;TypeLibrary_stacktrace;https://bugs.openjdk.org/secure/attachment/103683/TypeLibrary_stacktrace",,,,,,,,,,,,,,,,,,,,,,"0|i31csr:",9223372036854775807,b23,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@42995637,,,,,,,,,"2023-05-03 10:58;egahlin;The TypeLibrary is initialized once by the MetadataRepository (which is a singleton), so in practice it will not happen.

If a check is needed for the compiler to understand it, it could be added. We should however not go back to the previous version because it contained race conditions. ;;;","2023-05-03 11:37;rtoyonaga;Yes, there's no need to go back to the previous version. A check should be enough. I have linked the PR in this issue.;;;","2023-05-09 08:52;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/13760
Date: 2023-05-02 19:04:40 +0000;;;","2023-05-11 11:07;dukebot;Changeset: 5d6cce0f
Author:    Robert Toyonaga <rtoyonag@redhat.com>
Committer: Severin Gehwolf <sgehwolf@openjdk.org>
Date:      2023-05-11 18:05:58 +0000
URL:       https://git.openjdk.org/jdk/commit/5d6cce0f8543e8ae966798aad685b190cc8101aa
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Move some DnD tests to open,JDK-8307297,5099948,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,achung,achung,achung,2023-05-02 10:35,2023-05-17 16:46,2023-10-01 09:56,2023-05-12 14:24,21,,,,,,21,client-libs,,0,,,,,,,,,,,,,,Moving recently updated DnD tests to open,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,generic,,,,,,,,,generic,,,,,,"0|i31csj:",9223372036854775807,b23,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@5a9b3fd3,,,,,,,,,"2023-05-02 10:57;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/13756
Date: 2023-05-02 17:49:39 +0000;;;","2023-05-12 14:25;dukebot;Changeset: 3bf38761
Author:    Alisen Chung <achung@openjdk.org>
Date:      2023-05-12 21:23:25 +0000
URL:       https://git.openjdk.org/jdk/commit/3bf3876185f7b9e7679af3fa22ec20887cd4e498
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Make FunctionDescriptor::toMethodType an instance method of Linker,JDK-8307253,5099899,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,mcimadamore,mcimadamore,mcimadamore,2023-05-02 07:05,2023-05-08 09:07,2023-10-01 09:56,2023-05-08 09:03,repo-panama,,,,,,,core-libs,,0,foreign-memaccess+abi,,,,,,,,,,,,,"Having a single way to map a function descriptor into a method type seems overly restrictive. After all, any given linker implementation can have its own opinion on how layouts should be mapped into carriers. For instance, while a native linker might want to map `AddressLayout` into `MemorySegment`, a JNI linker might want to map the same layout into `Object` (as JNI only supports passing Java objects as references).",,,,,,,,,,,,,,,,,,,,,,,,JDK-8307629,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i31chn:",9223372036854775807,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@28ce6b78,,,,,,,,,"2023-05-02 07:18;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/panama-foreign/pull/830
Date: 2023-05-02 14:07:40 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Remove redundant class RMIIIOPServerImpl,JDK-8307244,5099890,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,kevinw,kevinw,kevinw,2023-05-02 05:20,2023-05-16 16:13,2023-10-01 09:56,2023-05-10 09:46,,,,,,,21,core-svc,,0,release-note=yes,,,,,,,,,,,,,"The IIOP transport was removed in JDK 9, see JDK-8043937, JDK-8132665.

The remaining unreferenced file in [1] the JMX/management area should be removed.

[1] src/java.management.rmi/share/classes/javax/management/remote/rmi/RMIIIOPServerImpl.java 
",,,,,,,,,,,,,,,,,,,,,,,JDK-8307329,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i31cfn:",9223372036854775807,b22,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@1f101086,,,,,,,,,"2023-05-02 11:06;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/13758
Date: 2023-05-02 17:57:14 +0000;;;","2023-05-10 09:46;dukebot;Changeset: 9af1787e
Author:    Kevin Walls <kevinw@openjdk.org>
Date:      2023-05-10 16:44:49 +0000
URL:       https://git.openjdk.org/jdk/commit/9af1787ebe842bcfbf4a03a9deefe19bbd1ee87d
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Dangling pointer warning for MetadataAllocationRequest,JDK-8307196,5099845,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,kbarrett,kbarrett,kbarrett,2023-05-01 16:29,2023-05-10 23:51,2023-10-01 09:56,2023-05-04 23:30,21,,,,,,21,hotspot,,0,cpp,,,,,,,,,,,,,"When compiling with gcc13.1 for
 When compiling with gcc13.1 for release we get some -Wdangling-pointer warnings like this (earlier versions of gcc don't warn): 

In static member function 'static void MetaspaceCriticalAllocation::add(MetadataAllocationRequest*)',
    inlined from 'MetadataAllocationRequest::MetadataAllocationRequest(ClassLoaderData*, size_t, Metaspace::MetadataType)' at ../../src/hotspot/share/memory/metaspaceCriticalAllocation.cpp:53:37,
    inlined from 'static MetaWordImpl** MetaspaceCriticalAllocation::allocate(ClassLoaderData*, size_t, Metaspace::MetadataType)' at ../../src/hotspot/share/memory/metaspaceCriticalAllocation.cpp:208:65:
../../src/hotspot/share/memory/metaspaceCriticalAllocation.cpp:83:20: warning: storing the address of local variable 'request' in 'MetaspaceCriticalAllocation::_requests_head' [-Wdangling-pointer=]
   83 |     _requests_head = _requests_tail = request;
      |     ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~
../../src/hotspot/share/memory/metaspaceCriticalAllocation.cpp: In static member function 'static MetaWordImpl** MetaspaceCriticalAllocation::allocate(ClassLoaderData*, size_t, Metaspace::MetadataType)':
../../src/hotspot/share/memory/metaspaceCriticalAllocation.cpp:208:29: note: 'request' declared here
  208 |   MetadataAllocationRequest request(loader_data, word_size, type);
      |                             ^~~~~~~
../../src/hotspot/share/memory/metaspaceCriticalAllocation.cpp:75:28: note: 'MetaspaceCriticalAllocation::_requests_head' declared here
   75 | MetadataAllocationRequest* MetaspaceCriticalAllocation::_requests_head = nullptr;
      |                            ^~~~~~~~~~~~~~~~~~~~~~~~~~~

Allocating a request (on the stack) adds the request to a global list, and the destructor removes the request from that list.  The warning is a false positive, as the compiler is failing to relate those add/remove pairs.
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8307147,,,,JDK-8307210,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i31c5n:",9223372036854775807,b22,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,,,"2023-05-04 02:33;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/13789
Date: 2023-05-04 05:14:28 +0000;;;","2023-05-04 23:30;dukebot;Changeset: e19cf26d
Author:    Kim Barrett <kbarrett@openjdk.org>
Date:      2023-05-05 06:20:32 +0000
URL:       https://git.openjdk.org/jdk/commit/e19cf26d656bc2de947aa42c418bdbbf549f8865
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
pkcs11 native libraries make JNI calls into java code while holding GC lock,JDK-8307185,5099832,Bug,Resolved,JDK,JDK,software,duke,,,P2,Fixed,djelinski,lmesnik,lmesnik,2023-05-01 13:21,2023-07-27 10:49,2023-10-01 09:56,2023-07-20 09:41,11,17,20,21,22,8,22,security-libs,,0,amazon-interest,hgupdate-sync,jdk21-fix-request,jdk21-fix-yes,loom,,,,,,,,,"Test sun/security/pkcs11/Cipher/TestGCMKeyAndIvCheck.java crashed
with
#
# A fatal error has been detected by the Java Runtime Environment:
#
#  Internal Error (/opt/mach5/mesos/work_dir/slaves/741e9afd-8c02-45c3-b2e2-9db1450d0832-S79186/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/2ef51ca9-bad0-46db-8e19-172f18899f3c/runs/8002a502-cb17-4c3a-ad85-b28c10f2ab4e/workspace/open/src/hotspot/share/gc/shared/gcLocker.cpp:107), pid=6849, tid=6918
#  assert(!JavaThread::current()->in_critical()) failed: Would deadlock
#
# JRE version: Java(TM) SE Runtime Environment (21.0) (fastdebug build 21-internal-LTS-2023-04-28-1933301.leonid.mesnik.jdk-ttf-build)
# Java VM: Java HotSpot(TM) 64-Bit Server VM (fastdebug 21-internal-LTS-2023-04-28-1933301.leonid.mesnik.jdk-ttf-build, mixed mode, tiered, compressed oops, compressed class ptrs, g1 gc, linux-amd64)
# Problematic frame:
# V  [libjvm.so+0xd1553c]  GCLocker::stall_until_clear()+0x1ac
#


Current thread (0x00007f25b0007850):  JavaThread ""ForkJoinPool-1-worker-2"" daemon [_thread_in_vm, id=6918, stack(0x00007f25f94f4000,0x00007f25f95f5000)]

Stack: [0x00007f25f94f4000,0x00007f25f95f5000],  sp=0x00007f25f95f1ba0,  free space=1014k
Native frames: (J=compiled Java code, j=interpreted, Vv=VM code, C=native code)
V  [libjvm.so+0xd1553c]  GCLocker::stall_until_clear()+0x1ac  (gcLocker.cpp:107)
V  [libjvm.so+0xc0ba5b]  G1CollectedHeap::attempt_allocation_slow(unsigned long)+0x13b  (g1CollectedHeap.cpp:484)
V  [libjvm.so+0xc100fe]  G1CollectedHeap::attempt_allocation(unsigned long, unsigned long, unsigned long*)+0x21e  (g1CollectedHeap.cpp:642)
V  [libjvm.so+0x1325707]  MemAllocator::mem_allocate_inside_tlab_slow(MemAllocator::Allocation&) const+0x237  (memAllocator.cpp:324)
V  [libjvm.so+0x1325fbb]  MemAllocator::mem_allocate_slow(MemAllocator::Allocation&) const+0x9b  (memAllocator.cpp:361)
V  [libjvm.so+0x13260eb]  MemAllocator::allocate() const+0xdb  (memAllocator.cpp:379)
V  [libjvm.so+0xe07167]  InstanceKlass::allocate_instance(JavaThread*)+0x87  (collectedHeap.inline.hpp:36)
V  [libjvm.so+0xe409de]  InterpreterRuntime::_new(JavaThread*, ConstantPool*, int)+0x15e  (interpreterRuntime.cpp:243)
j  sun.security.pkcs11.wrapper.PKCS11Exception$RV.<clinit>()V+872 jdk.crypto.cryptoki@21-internal
v  ~StubRoutines::call_stub 0x00007f26101c5d21
V  [libjvm.so+0xe55d02]  JavaCalls::call_helper(JavaValue*, methodHandle const&, JavaCallArguments*, JavaThread*)+0x462  (javaCalls.cpp:415)
V  [libjvm.so+0xe07d48]  InstanceKlass::call_class_initializer(JavaThread*)+0x258  (instanceKlass.cpp:1553)
V  [libjvm.so+0xe0a6d0]  InstanceKlass::initialize_impl(JavaThread*)+0x640  (instanceKlass.cpp:1139)
V  [libjvm.so+0x11f5ac6]  LinkResolver::resolve_static_call(CallInfo&, LinkInfo const&, bool, JavaThread*)+0x1e6  (linkResolver.cpp:1078)
V  [libjvm.so+0x11f679b]  LinkResolver::resolve_invoke(CallInfo&, Handle, constantPoolHandle const&, int, Bytecodes::Code, JavaThread*)+0x18b  (linkResolver.cpp:1672)
V  [libjvm.so+0xe3f3a6]  InterpreterRuntime::resolve_invoke(JavaThread*, Bytecodes::Code)+0x316  (interpreterRuntime.cpp:834)
V  [libjvm.so+0xe400ee]  InterpreterRuntime::resolve_from_cache(JavaThread*, Bytecodes::Code)+0x7e  (interpreterRuntime.cpp:968)
j  sun.security.pkcs11.wrapper.PKCS11Exception.lookup(J)Ljava/lang/String;+0 jdk.crypto.cryptoki@21-internal
j  sun.security.pkcs11.wrapper.PKCS11Exception.<init>(JLjava/lang/String;)V+11 jdk.crypto.cryptoki@21-internal
v  ~StubRoutines::call_stub 0x00007f26101c5d21
V  [libjvm.so+0xe55d02]  JavaCalls::call_helper(JavaValue*, methodHandle const&, JavaCallArguments*, JavaThread*)+0x462  (javaCalls.cpp:415)
V  [libjvm.so+0xf61fa9]  jni_invoke_nonstatic(JNIEnv_*, JavaValue*, _jobject*, JNICallType, _jmethodID*, JNI_ArgumentPusher*, JavaThread*) [clone .constprop.0]+0x1d9  (jni.cpp:950)
V  [libjvm.so+0xf62a18]  jni_NewObject+0x208  (jni.cpp:1023)
C  [libj2pkcs11.so+0xc989]  ckAssertReturnValueOK2.part.0+0x89  (p11_util.c:224)
C  [libj2pkcs11.so+0x68ab]  Java_sun_security_pkcs11_wrapper_PKCS11_C_1Decrypt+0xdb  (p11_crypt.c:404)
j  sun.security.pkcs11.wrapper.PKCS11.C_Decrypt(JJ[BIIJ[BII)I+0 jdk.crypto.cryptoki@21-internal
j  sun.security.pkcs11.P11AEADCipher.cancelOperation()V+120 jdk.crypto.cryptoki@21-internal
j  sun.security.pkcs11.P11AEADCipher.reset(Z)V+65 jdk.crypto.cryptoki@21-internal
j  sun.security.pkcs11.P11AEADCipher.ensureInitialized()V+19 jdk.crypto.cryptoki@21-internal
j  sun.security.pkcs11.P11AEADCipher.implDoFinal([BII[BII)I+26 jdk.crypto.cryptoki@21-internal
j  sun.security.pkcs11.P11AEADCipher.engineDoFinal([BII[BI)I+14 jdk.crypto.cryptoki@21-internal
j  sun.security.pkcs11.P11AEADCipher.engineDoFinal([BII)[B+20 jdk.crypto.cryptoki@21-internal
j  javax.crypto.Cipher.doFinal([B)[B+31 java.base@21-internal
j  TestGCMKeyAndIvCheck.test(Ljava/lang/String;Ljava/security/Provider;)V+240
j  TestGCMKeyAndIvCheck.main(Ljava/security/Provider;)V+4
j  PKCS11Test.premain(Ljava/security/Provider;)V+69
j  PKCS11Test.testNSS(LPKCS11Test;)V+16
J 600  jdk.internal.vm.Continuation.enterSpecial(Ljdk/internal/vm/Continuation;ZZ)V java.base@21-internal (0 bytes) @ 0x00007f261079c6d3 [0x00007f261079c560+0x0000000000000173]
j  jdk.internal.vm.Continuation.run()V+152 java.base@21-internal
j  java.lang.VirtualThread.runContinuation()V+76 java.base@21-internal
j  java.lang.VirtualThread$$Lambda+0x000000010014aba8.run()V+4 java.base@21-internal
j  java.util.concurrent.ForkJoinTask$AdaptedRunnableAction.exec()Z+4 java.base@21-internal
j  java.util.concurrent.ForkJoinTask.doExec()I+10 java.base@21-internal
j  java.util.concurrent.ForkJoinPool$WorkQueue.topLevelExec(Ljava/util/concurrent/ForkJoinTask;Ljava/util/concurrent/ForkJoinPool$WorkQueue;)V+19 java.base@21-internal
J 1241 c2 java.util.concurrent.ForkJoinPool.scan(Ljava/util/concurrent/ForkJoinPool$WorkQueue;II)I java.base@21-internal (263 bytes) @ 0x00007f26107f626c [0x00007f26107f6040+0x000000000000022c]
j  java.util.concurrent.ForkJoinPool.runWorker(Ljava/util/concurrent/ForkJoinPool$WorkQueue;)V+35 java.base@21-internal
j  java.util.concurrent.ForkJoinWorkerThread.run()V+31 java.base@21-internal
v  ~StubRoutines::call_stub 0x00007f26101c5d21
V  [libjvm.so+0xe55d02]  JavaCalls::call_helper(JavaValue*, methodHandle const&, JavaCallArguments*, JavaThread*)+0x462  (javaCalls.cpp:415)
V  [libjvm.so+0xe562e3]  JavaCalls::call_virtual(JavaValue*, Klass*, Symbol*, Symbol*, JavaCallArguments*, JavaThread*)+0x283  (javaCalls.cpp:329)
V  [libjvm.so+0xe564f1]  JavaCalls::call_virtual(JavaValue*, Handle, Klass*, Symbol*, Symbol*, JavaThread*)+0x71  (javaCalls.cpp:191)
V  [libjvm.so+0xfa5666]  thread_entry(JavaThread*, JavaThread*)+0x96  (jvm.cpp:2918)
V  [libjvm.so+0xe87e9e]  JavaThread::thread_main_inner()+0x17e  (javaThread.cpp:717)
V  [libjvm.so+0x1758538]  Thread::call_run()+0xb8  (thread.cpp:215)
V  [libjvm.so+0x145984a]  thread_native_entry(Thread*)+0x11a  (os_linux.cpp:740)
Java frames: (J=compiled Java code, j=interpreted, Vv=VM code)
j  sun.security.pkcs11.wrapper.PKCS11Exception$RV.<clinit>()V+872 jdk.crypto.cryptoki@21-internal
v  ~StubRoutines::call_stub 0x00007f26101c5d21
j  sun.security.pkcs11.wrapper.PKCS11Exception.lookup(J)Ljava/lang/String;+0 jdk.crypto.cryptoki@21-internal
j  sun.security.pkcs11.wrapper.PKCS11Exception.<init>(JLjava/lang/String;)V+11 jdk.crypto.cryptoki@21-internal
v  ~StubRoutines::call_stub 0x00007f26101c5d21
j  sun.security.pkcs11.wrapper.PKCS11.C_Decrypt(JJ[BIIJ[BII)I+0 jdk.crypto.cryptoki@21-internal
j  sun.security.pkcs11.P11AEADCipher.cancelOperation()V+120 jdk.crypto.cryptoki@21-internal
j  sun.security.pkcs11.P11AEADCipher.reset(Z)V+65 jdk.crypto.cryptoki@21-internal
j  sun.security.pkcs11.P11AEADCipher.ensureInitialized()V+19 jdk.crypto.cryptoki@21-internal
j  sun.security.pkcs11.P11AEADCipher.implDoFinal([BII[BII)I+26 jdk.crypto.cryptoki@21-internal
j  sun.security.pkcs11.P11AEADCipher.engineDoFinal([BII[BI)I+14 jdk.crypto.cryptoki@21-internal
j  sun.security.pkcs11.P11AEADCipher.engineDoFinal([BII)[B+20 jdk.crypto.cryptoki@21-internal
j  javax.crypto.Cipher.doFinal([B)[B+31 java.base@21-internal
j  TestGCMKeyAndIvCheck.test(Ljava/lang/String;Ljava/security/Provider;)V+240
j  TestGCMKeyAndIvCheck.main(Ljava/security/Provider;)V+4
j  PKCS11Test.premain(Ljava/security/Provider;)V+69
j  PKCS11Test.testNSS(LPKCS11Test;)V+16
J 600  jdk.internal.vm.Continuation.enterSpecial(Ljdk/internal/vm/Continuation;ZZ)V java.base@21-internal (0 bytes) @ 0x00007f261079c6d3 [0x00007f261079c560+0x0000000000000173]
j  jdk.internal.vm.Continuation.run()V+152 java.base@21-internal
j  java.lang.VirtualThread.runContinuation()V+76 java.base@21-internal
j  java.lang.VirtualThread$$Lambda+0x000000010014aba8.run()V+4 java.base@21-internal
j  java.util.concurrent.ForkJoinTask$AdaptedRunnableAction.exec()Z+4 java.base@21-internal
j  java.util.concurrent.ForkJoinTask.doExec()I+10 java.base@21-internal
j  java.util.concurrent.ForkJoinPool$WorkQueue.topLevelExec(Ljava/util/concurrent/ForkJoinTask;Ljava/util/concurrent/ForkJoinPool$WorkQueue;)V+19 java.base@21-internal
J 1241 c2 java.util.concurrent.ForkJoinPool.scan(Ljava/util/concurrent/ForkJoinPool$WorkQueue;II)I java.base@21-internal (263 bytes) @ 0x00007f26107f626c [0x00007f26107f6040+0x000000000000022c]
j  java.util.concurrent.ForkJoinPool.runWorker(Ljava/util/concurrent/ForkJoinPool$WorkQueue;)V+35 java.base@21-internal
j  java.util.concurrent.ForkJoinWorkerThread.run()V+31 java.base@21-internal
v  ~StubRoutines::call_stub 0x00007f26101c5d21
Registers:
RAX=0x00007f262962e000, RBX=0x00007f26289ab044, RCX=0x00007f26283b7e01, RDX=0x00007f26284a5230
RSP=0x00007f25f95f1ba0, RBP=0x00007f25f95f1bb0, RSI=0x000000000000006b, RDI=0x00007f26284a4ff8
R8 =0x0000000000000000, R9 =0x0000000000000000, R10=0x0000000000000000, R11=0x00007f2620048960
R12=0x00007f25b0007850, R13=0x0000000000000100, R14=0x00007f262003f830, R15=0x00007f26289ab044
RIP=0x00007f262777c53c, EFLAGS=0x0000000000010202, CSGSFS=0x002b000000000033, ERR=0x0000000000000006
  TRAPNO=0x000000000000000e
",,,,,,,,,,,JDK-8312958,JDK-8312590,,,,,,,,,,,,,,JDK-8299485,,JDK-8277359,JDK-8253056,JDK-8275751,JDK-8240611,JDK-8299485,,,,JDK-8080462,JDK-8312368,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i31c2r:",9223372036854775807,b08,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@7cafbd52,,,,,,,,,"2023-05-01 13:24;lmesnik;The failure is very intermittent. Run:
make -- run-test JTREG_VERBOSE=all JTREG_RETAIN=all  JTREG_TEST_THREAD_FACTORY=Virtual  TEST=sun/security/pkcs11/Cipher/TestGCMKeyAndIvCheck.java 
to reproduce.

Seems the GCLocker should pin VirtualThread to JavaThread so the another gc locking couldn't be executed on it.;;;","2023-05-01 13:25;lmesnik;Although it is in gc component, it is more loom issue.;;;","2023-05-01 13:26;lmesnik;The more reliable reproducer would be better as a regression test for this bug.;;;","2023-05-25 15:54;lmesnik;The code in the 
https://github.com/openjdk/jdk/blob/89b3c375ac55f960dbeac8a2355e528450e610a1/src/jdk.crypto.cryptoki/share/native/libj2pkcs11/p11_crypt.c#L404 
and places like this can cause JVM locks.
The pattern like:
 inBufP = (*env)->GetPrimitiveArrayCritical(env, jIn, NULL);
...
ckAssertReturnValueOK(env, rv);
^^^^ call Java code here
(*env)->ReleasePrimitiveArrayCritical(env, jIn, inBufP, JNI_ABORT);

is unsafe. It could potentially GC deadlock if Java code allocates an object while the heap is locked.
Also, it could cause virtual threads remounting while GC lock is held. Which also can deadlock.
;;;","2023-05-25 23:13;alanb;It looks like like several JNI functions in p11_crypt.c can exit (in error case) without doing cleanup so they don't ReleasePrimitiveArrayCritical. These should be fixed.;;;","2023-05-31 14:11;valeriep;Is there a set of rules of calling GetPrimitiveArrayCritical? Is the advice in this discussion legit? https://stackoverflow.com/questions/23258357/whats-the-trade-off-between-using-getprimitivearraycritical-and-getprimitivety 
Would this be reported with the Java flag -Xcheck:jni?;;;","2023-05-31 20:40;lmesnik;The advice to don't call JNI functions and don't allocate a heap in the critical section is correct. GC locker prevent GC and might cause deadlock.
I am not sure if  -Xcheck:jni print warnings for JDK libraries. ;;;","2023-07-06 12:58;valeriep;p11_crypt.c is last touched in JDK 17. Lowering to P3 due to the intermittent nature.;;;","2023-07-18 23:51;alanb;I've changed the priority back to P2, this is an important bug to fix. See also discussion in JDK-8253056.;;;","2023-07-19 00:25;djelinski;introduced in JDK-8080462;;;","2023-07-19 05:33;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/14931
Date: 2023-07-19 12:03:14 +0000;;;","2023-07-20 09:41;dukebot;Changeset: 354c6605
Author:    Daniel Jeliński <djelinski@openjdk.org>
Date:      2023-07-20 16:39:17 +0000
URL:       https://git.openjdk.org/jdk/commit/354c6605e32790ca421869636d8bf5456fc51717
;;;","2023-07-21 03:36;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk21/pull/142
Date: 2023-07-21 10:29:43 +0000;;;","2023-07-21 03:43;djelinski;Fix Request
This is a fix for a regression that will cause user applications to deadlock randomly. The issue is well understood, and the fix is low risk. The fix is covered by existing tests that time out intermittently without it.;;;","2023-07-21 06:08;mullan;Fix request approved.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Incorrect/inconsistent specification and implementation for Elements.getDocComment,JDK-8307184,5099831,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,darcy,jjg,jjg,2023-05-01 13:08,2023-08-14 11:56,2023-10-01 09:56,2023-08-09 14:20,20,21,22,,,,22,core-libs,,0,,,,,,,,,,,,,,"The specification for  Elements.getDocConnent does not match the implementation.

There are (at least) 3 issues:

1. The description of which leading characters are removed from each of the lines in the body of the comment is incorrect. Leading whitespace and asterisks are only removed if there is at least one asterisk. No characters are removed if there are no asterisks on the line. (That is as it should be, and would be an incompatible change if changed.)

Spec text: For lines of the comment starting after the initial ""/**"", leading white space characters are discarded as are any consecutive ""*"" characters appearing after the white space or starting the line. The processed lines are then concatenated together (including line terminators) and returned.


2. The description does not cover the removal of any initial whitespace and newline after the initial `/**`.

Spec text:  The leading ""/**"" ... [is] removed.

3. The description does not cover the removal of the trailing whitespace before the final `*/`.

Spec text:  The ... trailing ""*/"" [is] removed.

A small demo program is attached that can be used to show the contents of comments.  The program takes one or more filenames as arguments, and shows the contents of comments found in those files. Whitespace is made visible by replacing space and newline characters with distinctive visible glyphs.   The program can be run with the Java source launcher.  The program can be run on itself, showing any comments found in itself.

As written, the output from the program is as follows:

# file play/showComments/src/ShowComments.java ShowComments
    ●ShowComments●class.▲
",,,,,,,,,,,,,,,,,,,,,,,JDK-8313343,,,,,,,,,JDK-8307186,,,,JCK-7319240,,,,,"2023-05-01 13:08;jjg;ShowComments.java;https://bugs.openjdk.org/secure/attachment/103655/ShowComments.java",,,,,,,,,,,,,,,,,,,,,,"0|i31c2j:",9223372036854775807,b10,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@3c6c40,,,,,,,,,"2023-07-27 19:29;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/15062
Date: 2023-07-28 02:24:08 +0000;;;","2023-07-28 12:48;darcy;An additional situation to be covered is that annotation and end-of-line style comments (""//"" comments) can be between the doc comment and the element, in addition to whitespace.
;;;","2023-08-09 14:20;dukebot;Changeset: c307391a
Author:    Joe Darcy <darcy@openjdk.org>
Date:      2023-08-09 21:17:10 +0000
URL:       https://git.openjdk.org/jdk/commit/c307391ab1f071b1473cd5f4c12437b8d5e0ca93
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
MemoryLayout.structLayout uses undocumented strict alignment constraints,JDK-8307181,5099827,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,mcimadamore,lkuskov,lkuskov,2023-05-01 12:46,2023-05-10 23:50,2023-10-01 09:56,2023-05-04 02:49,21,,,,,,21,core-libs,,0,conformance,noreg-doc,regression,,,,,,,,,,,"Any combination of structure members that have a ""small"" element before a ""longer"" element causes IAE:

jshell> var ml = MemoryLayout.structLayout(ValueLayout.JAVA_LONG, ValueLayout.JAVA_BYTE, ValueLayout.JAVA_INT);
|  Exception java.lang.IllegalArgumentException: Invalid alignment constraint for member layout: i32
|        at StructLayoutImpl.of (StructLayoutImpl.java:49)
|        at MemoryLayout.lambda$structLayout$1 (MemoryLayout.java:746)
|        at MemoryLayout.wrapOverflow (MemoryLayout.java:766)
|        at MemoryLayout.structLayout (MemoryLayout.java:745)
|        at do_it$Aux (#10:1)
|        at (#10:1)

jshell> var ml = MemoryLayout.structLayout(ValueLayout.JAVA_BYTE, ValueLayout.JAVA_SHORT);
|  Exception java.lang.IllegalArgumentException: Invalid alignment constraint for member layout: s16
|        at StructLayoutImpl.of (StructLayoutImpl.java:49)
|        at MemoryLayout.lambda$structLayout$1 (MemoryLayout.java:746)
|        at MemoryLayout.wrapOverflow (MemoryLayout.java:766)
|        at MemoryLayout.structLayout (MemoryLayout.java:745)
|        at do_it$Aux (#3:1)
|        at (#3:1)
",,,,,,,,,,,,,,,,,,,,,,,JDK-8307335,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,21,,,,,,,,"0|i31c1n:",9223372036854775807,b22,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@28ce6b78,,,,,,,,,"2023-05-02 17:13;mcimadamore;The implementation is correct - but the check should be documented. It was missed during this PR:
https://github.com/openjdk/panama-foreign/pull/824;;;","2023-05-03 12:51;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/13770
Date: 2023-05-03 08:31:34 +0000;;;","2023-05-04 02:49;dukebot;Changeset: cecf817f
Author:    Maurizio Cimadamore <mcimadamore@openjdk.org>
Date:      2023-05-04 09:44:31 +0000
URL:       https://git.openjdk.org/jdk/commit/cecf817f5ed8e6ca290f8da0f07f694f35ec4c7e
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
 java/awt/dnd/NoFormatsDropTest/NoFormatsDropTest.java timed out,JDK-8307165,5099809,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,dnguyen,prr,prr,2023-05-01 09:39,2023-07-25 23:22,2023-10-01 09:56,2023-05-08 10:58,21,,,,,,21,client-libs,,0,jdk11u-sap-interest,jdk17u-fix-request,jdk17u-fix-yes,noreg-self,sn_143,testbug,tier4,,,,,,,"No information in the logs but this newly open sourced test timed out after 240000ms.
Seems like it is intermittent but we should look at it ASAP.",,,,,,,,,,,JDK-8313145,JDK-8309097,JDK-8309436,JDK-8309193,JDK-8309189,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i31bxn:",9223372036854775807,b22,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@5a9b3fd3,,,,,,,,,"2023-05-01 15:10;dnguyen;It seems that the setAutoWaitForIdle() method can cause long wait times. Instead, replacing with a single waitForIdle() and delay before testing with robot begins to maintain stability and remove the long delays in the test.;;;","2023-05-02 13:54;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/13761
Date: 2023-05-02 20:46:00 +0000;;;","2023-05-05 09:33;dnguyen;With the current local fix in 100 repeat test runs on all OS's, the test passes. But sometimes the test now fails for windows OS. It's infrequent enough that a 100 repeat test doesn't fail sometimes. The exception seems to be ""Drop doesn't happen"" or another timeout. But the intermittent failure on linux no longer exists with this fix. Looking into the Windows intermittent failure now.;;;","2023-05-08 10:58;dukebot;Changeset: 14df5c13
Author:    Damon Nguyen <dnguyen@openjdk.org>
Date:      2023-05-08 17:56:27 +0000
URL:       https://git.openjdk.org/jdk/commit/14df5c130e5bf5139e3e2ef6d7b9d64883d94d18
;;;","2023-07-18 00:56;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/1591
Date: 2023-07-18 07:49:53 +0000;;;","2023-07-25 01:58;andrewlu;Fix request [17u]

I backport this for parity with 17.0.9-oracle.
No risk, only a test change.
Clean backport.
Test passes. SAP nightly testing passed.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
TestSegmentCopy times out (mainline),JDK-8307164,5099808,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,jvernee,jvernee,jvernee,2023-05-01 09:35,2023-05-10 07:15,2023-10-01 09:56,2023-05-02 03:45,21,,,,,,21,core-libs,,0,,,,,,,,,,,,,,Port https://bugs.openjdk.org/browse/JDK-8303831 to mainline repo,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i31bxf:",9223372036854775807,b21,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@28ce6b78,,,,,,,,,"2023-05-01 12:08;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/13741
Date: 2023-05-01 17:02:11 +0000;;;","2023-05-02 03:45;dukebot;Changeset: 1532a1b0
Author:    Jorn Vernee <jvernee@openjdk.org>
Date:      2023-05-02 10:42:49 +0000
URL:       https://git.openjdk.org/jdk/commit/1532a1b0bd72f37b77540af51368271ef80e17d2
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
native_thread not protected by TLH,JDK-8307156,5099798,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,mgronlun,coleenp,coleenp,2023-05-01 07:08,2023-06-29 08:02,2023-10-01 09:56,2023-05-04 10:34,17,20,21,,,,21,hotspot,,0,amazon-interest,jdk17u-fix-request,jdk17u-fix-yes,Thread-SMR,,,,,,,,,,"
In jfrJavaSupport.cpp:

    static JavaThread* get_native(jobject thread) {
      ThreadsListHandle tlh;
      JavaThread* native_thread = NULL;
      (void)tlh.cv_internal_thread_to_JavaThread(thread, &native_thread, NULL);
      return native_thread;
    }

This code seems to return a native thread after the TLH that protects it returns so appears unsafe.",,,,,,,,,,,JDK-8311095,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i31bv7:",9223372036854775807,b22,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@42995637,,,,,,,,,"2023-05-01 09:16;dcubed;Just to be clear: The 'tlh' that is created protects 'native_thread' only until
return from get_native() when the ThreadsListHandle is destroyed. In the
code that called get_native(), the 'native_thread' is not necessarily protected.;;;","2023-05-03 06:59;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/13780
Date: 2023-05-03 13:50:53 +0000;;;","2023-05-04 10:34;dukebot;Changeset: 0c6529d2
Author:    Markus Grönlund <mgronlun@openjdk.org>
Date:      2023-05-04 17:26:31 +0000
URL:       https://git.openjdk.org/jdk/commit/0c6529d2d38a668f74936cca7803ca9de1a05d49
;;;","2023-06-15 02:53;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/1442
Date: 2023-06-15 09:44:50 +0000;;;","2023-06-15 11:43;shade;Fix Request (17u)

Fixes a corner case in JFR: threads are not protected by SMR properly. Patch does require adaptations for 17u, see PR. Testing passes.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
JVMTI GetThreadState on carrier should return STATE_WAITING,JDK-8307153,5099795,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,sspitsyn,alanb,alanb,2023-05-01 05:23,2023-06-14 14:33,2023-10-01 09:56,2023-06-07 06:18,21,,,,,,21,hotspot,,0,loom,,,,,,,,,,,,,"When a virtual thread is mounted, the carrier thread should be reported as ""waiting"" until the virtual thread unmounts. Right now, GetThreadState reports a state based the JavaThread status when it should return JVMTI_THREAD_STATE_WAITING | JVMTI_THREAD_STATE_WAITING_INDEFINITELY.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8309612,,,,JDK-8310066,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i31buj:",9223372036854775807,b26,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@661b156a,,,,,,,,,"2023-06-03 04:24;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/14298
Date: 2023-06-03 10:53:04 +0000;;;","2023-06-07 06:18;dukebot;Changeset: 177e8327
Author:    Serguei Spitsyn <sspitsyn@openjdk.org>
Date:      2023-06-07 13:16:40 +0000
URL:       https://git.openjdk.org/jdk/commit/177e8327d685444d63235567f2a9bde0ec3d51cf
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
[x86] Dangling pointer warning for Assembler::_attributes,JDK-8307147,5099787,Bug,Resolved,JDK,JDK,software,duke,,,P5,Fixed,kbarrett,kbarrett,kbarrett,2023-04-29 18:37,2023-08-06 18:17,2023-10-01 09:56,2023-05-03 19:10,11,17,20,21,,,21,hotspot,,0,amazon-interest,cleanup,jdk17u-fix-request,jdk17u-fix-yes,oracle-triage-21,,,,,,,,,"When compiling with gcc13.1 for release we get some -Wdangling-pointer warnings like this (earlier versions of gcc don't warn):

In member function 'void Assembler::set_attributes(InstructionAttr*)',
    inlined from 'int Assembler::vex_prefix_and_encode(int, int, int, VexSimdPrefix, VexOpcode, InstructionAttr*)' at ../../src/hotspot/cpu/x86/assembler_x86.cpp:11491:17,
    inlined from 'void Assembler::vpclmulqdq(XMMRegister, XMMRegister, XMMRegister, int)' at ../../src/hotspot/cpu/x86/assembler_x86.cpp:10823:37:
../../src/hotspot/cpu/x86/assembler_x86.hpp:921:66: warning: storing the address of local variable 'attributes' in '*this.Assembler::_attributes' [-Wdangling-pointer=]
  921 |   void set_attributes(InstructionAttr *attributes) { _attributes = attributes; }
      |                                                      ~~~~~~~~~~~~^~~~~~~~~~~~
../../src/hotspot/cpu/x86/assembler_x86.cpp: In member function 'void Assembler::vpclmulqdq(XMMRegister, XMMRegister, XMMRegister, int)':
../../src/hotspot/cpu/x86/assembler_x86.cpp:10822:19: note: 'attributes' declared here
10822 |   InstructionAttr attributes(AVX_128bit, /* vex_w */ false, /* legacy_mode */ true, /* no_mask_reg */ true, /* uses_vl */ true);
      |                   ^~~~~~~~~~
../../src/hotspot/cpu/x86/assembler_x86.cpp:10820:87: note: 'this' declared here
10820 | void Assembler::vpclmulqdq(XMMRegister dst, XMMRegister nds, XMMRegister src, int mask) {
      |                                                                                       ^

Some places set the _attributes member of the assembler. The attributes object's destructor checks for that situation and clears the assembler's _attributes. So we aren't leaving a dead object in the assembler to be accidentally used later, making this warning ""harmless"". Since the lifetime of the attributes object doesn't end until it's storage has been released, e.g. after it's destructor is invoked, the warning is a false positive.  However, the structure isn't helping by somewhat obfuscating what's being done.
",,,,,,,,,,,JDK-8313749,JDK-8312130,JDK-8313849,,,,,,,,,,,,,,,,,,,,,,,JDK-8307196,JDK-8307210,,,,,,,,,,,x86,,,,,,,,,,,,,,,"0|i31bsr:",9223372036854775807,b22,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2023-05-01 02:40;kbarrett;This looks somewhat similar to https://gcc.gnu.org/bugzilla/show_bug.cgi?id=106411

Weirdly, the documentation for `-Wdangling-pointer` seems to have disappeared in gcc13 - it's there in gcc12 (that seems to be the first version containing it, though there's no mention of that option in the release notes for gcc12).

;;;","2023-05-01 23:41;thartmann;ILW = Dangling pointer warning (harmless - false positive), with gcc13.1, no workaround = LLH = P5;;;","2023-05-02 00:59;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/13751
Date: 2023-05-02 07:54:00 +0000;;;","2023-05-03 19:10;dukebot;Changeset: 3599448a
Author:    Kim Barrett <kbarrett@openjdk.org>
Date:      2023-05-04 02:08:07 +0000
URL:       https://git.openjdk.org/jdk/commit/3599448ad833553dd502a4f941dad7295b557d55
;;;","2023-07-12 10:30;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/1575
Date: 2023-07-12 17:24:08 +0000;;;","2023-07-13 15:56;btaylor;Fix request 17u - allows building with GCC 13. Backport is nearly clean and only needs nullptr replaced with NULL. Passes jtreg tier1 and tier2;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
windowsaccessbridge.dll erroneously includes private methods in its C API,JDK-8307145,5099785,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,jwaters,jwaters,jwaters,2023-04-29 12:25,2023-07-12 13:20,2023-10-01 09:56,2023-06-20 23:45,,,,,,,22,client-libs,,0,,,,,,,,,,,,,,"In windowsaccessbridge(-64).dll the following methods are exported in a def file to C API which in turn call their real implementation, which are instance methods of the class WinAccessBridge:

addJavaEventNotification
removeJavaEventNotification
addAccessibilityEventNotification
removeAccessibilityEventNotification

However, they are nowhere to be seen in the actual C interface, in AccessBridgeWindowsEntryPoints.cpp. Your guess is as good as mine as to how on earth MSVC is still capable of compiling and linking this without any errors whatsoever, but in any case, this is a severe oversight and should be properly defined in the C API lest this happy accident within MSVC is fixed by Microsoft in the future",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8288293,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i31bsb:",9223372036854775807,b03,,,,,,,,,,,"2023-04-29 12:25;jwaters;Currently assigned to hotspot temporarily, until I can figure out what this goes under;;;","2023-04-29 12:30;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/13734
Date: 2023-04-29 19:26:00 +0000;;;","2023-06-20 23:45;dukebot;Changeset: 3faba07a
Author:    Julian Waters <jwaters@openjdk.org>
Date:      2023-06-21 06:43:03 +0000
URL:       https://git.openjdk.org/jdk/commit/3faba07ae3f961c3b97434d59512d32519cb7a27
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
namedParams in XECParameters and EdDSAParameters can be private final,JDK-8307144,5099784,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,bperez,weijun,weijun,2023-04-29 11:20,2023-06-14 23:44,2023-10-01 09:56,2023-06-12 12:47,,,,,,,22,security-libs,,0,noreg-trivial,starter-bug,,,,,,,,,,,,"src/jdk.crypto.ec/share/classes/sun/security/ec/ed/EdDSAParameters.java
src/jdk.crypto.ec/share/classes/sun/security/ec/XECParameters.java",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i31bs3:",9223372036854775807,b02,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@2ec284e3,,,,,,,,,"2023-06-06 15:28;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/14162
Date: 2023-05-25 21:17:40 +0000;;;","2023-06-12 12:47;dukebot;Changeset: 3c15ad8d
Author:    Ben Perez <ben.perez@oracle.com>
Committer: Sean Mullan <mullan@openjdk.org>
Date:      2023-06-12 19:45:06 +0000
URL:       https://git.openjdk.org/jdk/commit/3c15ad8d47dad303192efba4ec524a7612377d51
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
java/awt/dnd/NotReallySerializableTest/NotReallySerializableTest.java failed,JDK-8307135,5099773,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,serb,landrews,landrews,2023-04-28 16:26,2023-08-16 02:22,2023-10-01 09:56,2023-04-28 18:31,17,,,,,,21,client-libs,,0,jdk17u-fix-request,jdk17u-fix-yes,noreg-self,,,,,,,,,,,"java/awt/dnd/NotReallySerializableTest/NotReallySerializableTest.java failed with following exception

----------System.err:(16/996)----------
java.awt.HeadlessException: 
The application is not running in a desktop session,
but this program performed an operation which requires it.
	at java.desktop/java.awt.dnd.DragSource.getDefaultDragSource(DragSource.java:226)
	at NotReallySerializableTest.main(NotReallySerializableTest.java:59)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
	at java.base/java.lang.reflect.Method.invoke(Method.java:578)
	at com.sun.javatest.regtest.agent.MainWrapper$MainTask.run(MainWrapper.java:138)
	at java.base/java.lang.Thread.run(Thread.java:1592)",,,,,,,,,,,JDK-8309202,JDK-8308846,JDK-8309187,JDK-8309445,JDK-8314405,JDK-8309181,,,,,,,,,,,,,,,,JDK-8306133,,,,,,,,,,,,,,,,generic,,,,,,,,,,,,,,,"0|i31bpn:",9223372036854775807,b21,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@5a9b3fd3,,,,,,,,,"2023-04-28 17:07;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/13733
Date: 2023-04-28 23:59:18 +0000;;;","2023-04-28 18:31;dukebot;Changeset: d43a5a28
Author:    Sergey Bylokhov <serb@openjdk.org>
Date:      2023-04-29 01:29:13 +0000
URL:       https://git.openjdk.org/jdk/commit/d43a5a289f4ac84480bf54ab304c1ce1dbc8e067
;;;","2023-04-29 07:23;dcubed;The fix for this bug is integrated in jdk-21+21-1725.;;;","2023-05-25 00:09;mbaesken;jdk17u backport request
I would like to have the patch in jdk17u-dev as well, because after backporting 8306133  the issue appears as well in jdk17u-dev. The patch applies cleanly and is low risk.;;;","2023-05-25 00:14;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/1397
Date: 2023-05-25 07:06:26 +0000;;;","2023-08-14 01:04;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk11u-dev/pull/2076
Date: 2023-08-14 07:53:29 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Open source some JTable jtreg tests,JDK-8307133,5099770,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,prr,prr,prr,2023-04-28 14:54,2023-08-15 04:51,2023-10-01 09:56,2023-05-04 09:46,21,,,,,,21,client-libs,,0,jdk11u-fix-request,jdk11u-fix-yes,jdk17u-fix-request,jdk17u-fix-yes,noreg-self,sn_142,test_sprint,testbug,,,,,,Open source some JTable jtreg tests,,,,,,,,,,,JDK-8308065,JDK-8314269,JDK-8308044,JDK-8308007,JDK-8308045,JDK-8308323,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i31boz:",9223372036854775807,b22,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@568a5b31,,,,,,,,,"2023-05-01 14:18;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/13745
Date: 2023-05-01 21:11:14 +0000;;;","2023-05-04 09:46;dukebot;Changeset: 5ca0b08a
Author:    Phil Race <prr@openjdk.org>
Date:      2023-05-04 16:44:24 +0000
URL:       https://git.openjdk.org/jdk/commit/5ca0b08a7505d5c210d906e76c2a4cfc3eed64aa
;;;","2023-05-15 15:33;vrudomet;[Fix request 17u]

Clean backport, new tests, low risk
Checked on macox x64, linux x64, all pass;;;","2023-05-16 16:34;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/1352
Date: 2023-05-16 23:27:37 +0000;;;","2023-08-04 01:22;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk11u-dev/pull/2065
Date: 2023-08-04 08:15:32 +0000;;;","2023-08-09 19:05;andrewlu;Fix request [11u]

I backport this for parity with 11.0.21-oracle.
No risk, only a test change.
Clean backport.
Test passes. SAP nightly testing passed.
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
C2: assert(false) failed: malformed control flow,JDK-8307131,5099768,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,roland,dcubed,dcubed,2023-04-28 13:06,2023-07-10 00:16,2023-10-01 09:56,2023-05-09 03:43,17,20,21,,,,21,hotspot,,0,c2,intermittent,javafuzzer,oracle-triage-11,oracle-triage-17,oracle-triage-21,tier6,tier8,,,,,,"The following test failed in the JDK21 CI:

applications/javafuzzer/MediumTest.java

Here's a snippet from the log file:

Summary of the JavaFuzzer run:
------------------------------
Host:     win2019-x64-473874
Tests:    12 x 50
Args:     -conf config.yml

Started  at: Fri Apr 28 18:06:03 GMT 2023


r11- 50: 35 passed, 0 crashes, 0 fails, 0 hangs, 0 incorrect tests, 15 Reference Java failures
r3- 50: 33 passed, 0 crashes, 0 fails, 0 hangs, 0 incorrect tests, 17 Reference Java failures
r10- 50: 31 passed, 0 crashes, 0 fails, 0 hangs, 0 incorrect tests, 19 Reference Java failures
r8- 50: 33 passed, 0 crashes, 0 fails, 0 hangs, 0 incorrect tests, 17 Reference Java failures
r7- 50: 32 passed, 0 crashes, 0 fails, 0 hangs, 0 incorrect tests, 18 Reference Java failures
r4- 50: 31 passed, 0 crashes, 0 fails, 0 hangs, 0 incorrect tests, 19 Reference Java failures
r2- 50: 32 passed, 0 crashes, 0 fails, 0 hangs, 0 incorrect tests, 18 Reference Java failures
r5- 50: 31 passed, 0 crashes, 0 fails, 0 hangs, 0 incorrect tests, 19 Reference Java failures
r12- 50: 30 passed, 0 crashes, 0 fails, 0 hangs, 0 incorrect tests, 20 Reference Java failures
r6- 50: 33 passed, 1 crashes, 0 fails, 0 hangs, 0 incorrect tests, 16 Reference Java failures
r1- 50: 27 passed, 0 crashes, 0 fails, 0 hangs, 0 incorrect tests, 23 Reference Java failures
r9- 50: 29 passed, 0 crashes, 0 fails, 0 hangs, 0 incorrect tests, 21 Reference Java failures

Finished at: Fri Apr 28 19:23:07 GMT 2023


#
# A fatal error has been detected by the Java Runtime Environment:
#
#  Internal Error (c:\\sb\\prod\\1682641347\\workspace\\open\\src\\hotspot\\share\\opto\\compile.cpp:4003), pid=29116, tid=32968
#  assert(false) failed: malformed control flow
#
# JRE version: Java(TM) SE Runtime Environment (21.0+21) (fastdebug build 21-ea+21-LTS-1697)
# Java VM: Java HotSpot(TM) 64-Bit Server VM (fastdebug 21-ea+21-LTS-1697, compiled mode, sharing, compressed oops, compressed class ptrs, g1 gc, windows-amd64)
# Core dump will be written. Default location: C:\\sb\\prod\\1682704971\\testoutput\\test-support\\jtreg_closed_test_hotspot_jtreg_applications_javafuzzer_MediumTest_java\\tmp\\fuzzer.tmp.Z6VkTvrXkp\\hs_err_pid29116.mdmp
#
# If you would like to submit a bug report, please visit:
#   https://bugreport.java.com/bugreport/crash.jsp
#

---------------  S U M M A R Y ------------


----------System.err:(51/4108)*----------
java.nio.charset.MalformedInputException: Input length = 1
	at java.base/java.nio.charset.CoderResult.throwException(CoderResult.java:279)
	at java.base/sun.nio.cs.StreamDecoder.implRead(StreamDecoder.java:384)
	at java.base/sun.nio.cs.StreamDecoder.lockedRead(StreamDecoder.java:215)
	at java.base/sun.nio.cs.StreamDecoder.read(StreamDecoder.java:169)
	at java.base/java.io.InputStreamReader.read(InputStreamReader.java:189)
	at java.base/java.io.BufferedReader.fill(BufferedReader.java:161)
	at java.base/java.io.BufferedReader.implReadLine(BufferedReader.java:371)
	at java.base/java.io.BufferedReader.readLine(BufferedReader.java:348)
	at java.base/java.io.BufferedReader.readLine(BufferedReader.java:437)
	at java.base/java.nio.file.Files.readAllLines(Files.java:3394)
	at java.base/java.nio.file.Files.readAllLines(Files.java:3432)
	at applications.javafuzzer.JavaFuzzerRunner.lambda$main$2(JavaFuzzerRunner.java:233)
	at java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184)
	at java.base/java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:179)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.Iterator.forEachRemaining(Iterator.java:133)
	at java.base/java.util.Spliterators$IteratorSpliterator.forEachRemaining(Spliterators.java:1924)
	at java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:509)
	at java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:499)
	at java.base/java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)
	at java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)
	at java.base/java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.base/java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:596)
	at applications.javafuzzer.JavaFuzzerRunner.main(JavaFuzzerRunner.java:231)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
	at java.base/java.lang.reflect.Method.invoke(Method.java:578)
	at com.sun.javatest.regtest.agent.MainActionHelper$AgentVMRunnable.run(MainActionHelper.java:333)
	at java.base/java.lang.Thread.run(Thread.java:1592)
java.lang.RuntimeException: Failed to access C:\\sb\\prod\\1682704971\\testoutput\\test-support\\jtreg_closed_test_hotspot_jtreg_applications_javafuzzer_MediumTest_java\\scratch\\0\\crashes\\r6-36\\hs_err_pid29116.mdmp
	at applications.javafuzzer.JavaFuzzerRunner.lambda$main$2(JavaFuzzerRunner.java:237)
	at java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184)
	at java.base/java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:179)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.Iterator.forEachRemaining(Iterator.java:133)
	at java.base/java.util.Spliterators$IteratorSpliterator.forEachRemaining(Spliterators.java:1924)
	at java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:509)
	at java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:499)
	at java.base/java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)
	at java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)
	at java.base/java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.base/java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:596)
	at applications.javafuzzer.JavaFuzzerRunner.main(JavaFuzzerRunner.java:231)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
	at java.base/java.lang.reflect.Method.invoke(Method.java:578)
	at com.sun.javatest.regtest.agent.MainActionHelper$AgentVMRunnable.run(MainActionHelper.java:333)
	at java.base/java.lang.Thread.run(Thread.java:1592)

JavaTest Message: Test threw exception: java.lang.RuntimeException
JavaTest Message: shutting down test

result: Failed. Execution failed: `main' threw exception: java.lang.RuntimeException: Failed to access C:\sb\prod\1682704971\testoutput\test-support\jtreg_closed_test_hotspot_jtreg_applications_javafuzzer_MediumTest_java\scratch\0\crashes\r6-36\hs_err_pid29116.mdmp


Here's the crashing thread's stack trace:

---------------  T H R E A D  ---------------

Current thread (0x0000027b70c39d90):  JavaThread ""C2 CompilerThread0"" daemon [_thread_in_native, id=32968, stack(0x000000e466300000,0x000000e466400000)]


Current CompileTask:
C2:    417    8 % !b        Test::bMeth @ 33 (286 bytes)

Stack: [0x000000e466300000,0x000000e466400000]
Native frames: (J=compiled Java code, j=interpreted, Vv=VM code, C=native code)
V  [jvm.dll+0xbd62a1]  os::win32::platform_print_native_stack+0xf1  (os_windows_x86.cpp:236)
V  [jvm.dll+0xe4e5f9]  VMError::report+0x1019  (vmError.cpp:815)
V  [jvm.dll+0xe50255]  VMError::report_and_die+0x645  (vmError.cpp:1588)
V  [jvm.dll+0xe50964]  VMError::report_and_die+0x64  (vmError.cpp:1353)
V  [jvm.dll+0x5316fb]  report_vm_error+0x5b  (debug.cpp:191)
V  [jvm.dll+0x4cb686]  Compile::final_graph_reshaping+0xce6  (compile.cpp:4003)
V  [jvm.dll+0x4c6128]  Compile::Optimize+0x1308  (compile.cpp:2450)
V  [jvm.dll+0x4c2da8]  Compile::Compile+0x1458  (compile.cpp:841)
V  [jvm.dll+0x3e18ca]  C2Compiler::compile_method+0x11a  (c2compiler.cpp:121)
V  [jvm.dll+0x4de1c1]  CompileBroker::invoke_compiler_on_method+0x881  (compileBroker.cpp:2268)
V  [jvm.dll+0x4db796]  CompileBroker::compiler_thread_loop+0x396  (compileBroker.cpp:1945)
V  [jvm.dll+0x7aaa54]  JavaThread::thread_main_inner+0x224  (javaThread.cpp:718)
V  [jvm.dll+0xdc666b]  Thread::call_run+0x1cb  (thread.cpp:220)
V  [jvm.dll+0xbd4bd0]  os::win32::thread_native_entry+0xa0  (os_windows.cpp:551)
C  [ucrtbase.dll+0x2268a]
C  [KERNEL32.DLL+0x17974]
C  [ntdll.dll+0x5a0b1]",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8303466,JDK-8288981,JDK-8303951,JDK-8282045,,"2023-05-02 07:38;chagedorn;Reduced.java;https://bugs.openjdk.org/secure/attachment/103674/Reduced.java","2023-05-04 00:10;chagedorn;Reduced2.java;https://bugs.openjdk.org/secure/attachment/103699/Reduced2.java",,,,,,aarch64,x86_64,,,,,,,,linux,windows,,,,,"0|i31boj:",9223372036854775807,b22,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2023-05-01 23:19;thartmann;ILW = Same as JDK-8306997 = P4;;;","2023-05-01 23:28;epeter;The ""malformed control flow"" (introduced in JDK-8303951) has so far triggered 3 bugs:
JDK-8303466, JDK-8306997, JDK-8288981.;;;","2023-05-03 00:31;chagedorn;To reproduce:

$ java -Xcomp -XX:CompileOnly=Reduced -XX:-TieredCompilation Reduced.java

I've noticed that with JDK 20+15, we have a bailout due to an infinite loop with Reduced.java (JDK 20+16 fails with malformed control flow). But that only happens since JDK-8282045. [~roland] Might be worth checking if there is something we could do to avoid this infinite loop bailout as well.

Another case which starts to bailout with malformed control flow with JDK 20+16 (but no bailout with JDK 20+15):

$ java -Xcomp -XX:CompileOnly=Reduced2 Reduced2.java
;;;","2023-05-04 01:14;chagedorn;I've just traced Reduced2.java back to JDK-8292088. But that just removed Opaque2 nodes earlier, so it must have revealed an already existing issue. If Reduced2.java appears to be a different issue than Reduced.java, please file a new bug, thanks!;;;","2023-05-05 01:28;roland;[~chagedorn] Reduced2.java is not the same issue. I think it's an issue with predicates. Predication happens first then some unrolling then peeling then pre/main/post loops are created again and then some control flow in the new pre loop dies because of a range check CastII. I suppose this would be caught if assertion predicates were cloned after the peeled iteration. I couldn't verify it though. Maybe you can?;;;","2023-05-05 01:54;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/13826
Date: 2023-05-05 08:48:06 +0000;;;","2023-05-05 02:31;chagedorn;[~roland] Thanks Roland for the investigation of Reduced2.java! Then I guess it will be fixed with JDK-8288981. I'll make sure that this test passes.;;;","2023-05-09 03:43;dukebot;Changeset: d2b3eef0
Author:    Roland Westrelin <roland@openjdk.org>
Date:      2023-05-09 09:54:22 +0000
URL:       https://git.openjdk.org/jdk/commit/d2b3eef0f2d48446613955cabe69cb4236042878
;;;","2023-05-09 14:11;dcubed;The fix for this bug is integrated in jdk-21+22-1858.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Open source few Swing JMenu tests,JDK-8307130,5099767,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,dnguyen,dnguyen,dnguyen,2023-04-28 12:41,2023-05-17 12:23,2023-10-01 09:56,2023-05-08 15:32,11,17,20,21,,,21,client-libs,,0,jdk17u-fix-request,jdk17u-fix-yes,sn_142,test_sprint,,,,,,,,,,Convert applet based JMenu tests into main ,,,,,,,,,,,JDK-8308315,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i31bob:",9223372036854775807,b22,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@568a5b31,,,,,,,,,"2023-05-05 10:47;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/13839
Date: 2023-05-05 17:41:26 +0000;;;","2023-05-08 15:32;dukebot;Changeset: d9052b94
Author:    Damon Nguyen <dnguyen@openjdk.org>
Date:      2023-05-08 22:29:48 +0000
URL:       https://git.openjdk.org/jdk/commit/d9052b946682d1c0f2629455d73fe4e6b95b29db
;;;","2023-05-15 15:32;vrudomet;[Fix request 17u]

Clean backport, new tests, low risk
Checked on macOS x64, linux x64;;;","2023-05-16 16:49;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/1356
Date: 2023-05-16 23:41:35 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Open source some drag and drop tests 4,JDK-8307128,5099765,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,achung,achung,achung,2023-04-28 12:14,2023-08-01 01:47,2023-10-01 09:56,2023-05-09 12:13,,,,,,,21,client-libs,,0,jdk11u-fix-request,jdk11u-fix-yes,jdk17u-fix-request,jdk17u-fix-yes,noreg-self,sn_142,test_sprint,,,,,,,"Update tests, clean up imports, add copyright headers from various DnD tests.
",,,,,,,,,,,JDK-8308894,JDK-8309354,JDK-8309438,JDK-8313527,JDK-8309351,JDK-8309352,,,,,,,,,,,,,,,,,,,,JDK-8307799,,,,,,,,,,,,generic,,,,,,,,,generic,,,,,,"0|i31bnv:",9223372036854775807,b22,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@5a9b3fd3,,,,,,,,,"2023-05-02 15:15;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/13765
Date: 2023-05-02 22:09:18 +0000;;;","2023-05-09 12:16;dukebot;Changeset: 98294242
Author:    Alisen Chung <achung@openjdk.org>
Date:      2023-05-09 19:14:12 +0000
URL:       https://git.openjdk.org/jdk/commit/98294242a94c611e2a713c2d520e59dd873ae4a0
;;;","2023-05-15 15:32;vrudomet;[Fix request 17u]

Clean backport (f2ee1fd) + fix for requires in MozillaDnDTest (6b0e89a), new tests, low risk

Not clean as required quick fix for @requires
mac reported error Error. Parse Exception: Invalid tag: requires(os

Checked on macOS x64, linux x64
;;;","2023-05-17 16:47;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/1360
Date: 2023-05-17 23:33:45 +0000;;;","2023-07-27 01:35;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk11u-dev/pull/2060
Date: 2023-07-27 08:26:30 +0000;;;","2023-07-27 22:19;andrewlu;Fix request [11u]

I backport this for parity with 11.0.21-oracle.
No risk, only a test change.
Clean backport from 17u. Add backport for JDK-8307799.
Test passes. SAP nightly testing passed.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
"compiler/jvmci/compilerToVM/MaterializeVirtualObjectTest.java hits assert(!Continuation::is_frame_in_continuation(thread(), fr())) failed: No support for deferred values in continuations ",JDK-8307125,5099761,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,dnsimon,lmesnik,lmesnik,2023-04-28 10:51,2023-07-10 00:21,2023-10-01 09:56,2023-05-25 09:29,21,,,,,,21,hotspot,,0,jvmci,loom,oracle-triage-11,oracle-triage-17,oracle-triage-21,,,,,,,,,"Test
compiler/jvmci/compilerToVM/MaterializeVirtualObjectTest.java when executed with test thread factory plugin
hits 

#
# A fatal error has been detected by the Java Runtime Environment:
#
#  Internal Error (/opt/mach5/mesos/work_dir/slaves/741e9afd-8c02-45c3-b2e2-9db1450d0832-S79032/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/750846d8-d033-408e-81ca-585a129691d7/runs/2557e57f-d43b-4f45-909b-c725b6a3a577/workspace/open/src/hotspot/share/runtime/vframe_hp.cpp:112), pid=430325, tid=430475
#  assert(!Continuation::is_frame_in_continuation(thread(), fr())) failed: No support for deferred values in continuations
#
# JRE version: Java(TM) SE Runtime Environment (21.0) (fastdebug build 21-internal-LTS-2023-04-28-0130129.leonid.mesnik.jdk-ttf-build)
# Java VM: Java HotSpot(TM) 64-Bit Server VM (fastdebug 21-internal-LTS-2023-04-28-0130129.leonid.mesnik.jdk-ttf-build, mixed mode, tiered, jvmci, compressed oops, compressed class ptrs, g1 gc, linux-amd64)
# Problematic frame:
# V  [libjvm.so+0x181226e]  compiledVFrame::update_deferred_value(BasicType, int, jvalue)+0x33e
 ....

Current thread (0x00007f1bcc5572d0):  JavaThread ""ForkJoinPool-1-worker-1"" daemon [_thread_in_vm, id=430475, stack(0x00007f1ba5bfb000,0x00007f1ba5cfc000)]

Stack: [0x00007f1ba5bfb000,0x00007f1ba5cfc000],  sp=0x00007f1ba5cf7290,  free space=1008k
Native frames: (J=compiled Java code, j=interpreted, Vv=VM code, C=native code)
V  [libjvm.so+0x181226e]  compiledVFrame::update_deferred_value(BasicType, int, jvalue)+0x33e  (vframe_hp.cpp:112)
V  [libjvm.so+0x1011200]  c2v_materializeVirtualObjects(JNIEnv_*, _jobject*, _jobject*, bool)+0xa00  (jvmciCompilerToVM.cpp:1649)
j  jdk.vm.ci.hotspot.CompilerToVM.materializeVirtualObjects(Ljdk/vm/ci/hotspot/HotSpotStackFrameReference;Z)V+0 jdk.internal.vm.ci@21-internal
j  jdk.vm.ci.hotspot.CompilerToVMHelper.materializeVirtualObjects(Ljdk/vm/ci/hotspot/HotSpotStackFrameReference;Z)V+5 jdk.internal.vm.ci@21-internal
j  compiler.jvmci.compilerToVM.MaterializeVirtualObjectTest.check(I)V+202
J 578 c2 compiler.jvmci.compilerToVM.MaterializeVirtualObjectTest.recurse(II)V (70 bytes) @ 0x00007f1bbc7a3c08 [0x00007f1bbc7a3bc0+0x0000000000000048]
J 586 c2 compiler.jvmci.compilerToVM.MaterializeVirtualObjectTest.testFrame2(Ljava/lang/String;I)V (115 bytes) @ 0x00007f1bbc7acdd8 [0x00007f1bbc7acd80+0x0000000000000058]
J 585 c2 compiler.jvmci.compilerToVM.MaterializeVirtualObjectTest.testFrame(Ljava/lang/String;I)V (55 bytes) @ 0x00007f1bbc7a9eac [0x00007f1bbc7a9e60+0x000000000000004c]
j  compiler.jvmci.compilerToVM.MaterializeVirtualObjectTest.test()V+117
j  compiler.jvmci.compilerToVM.MaterializeVirtualObjectTest.main([Ljava/lang/String;)V+37
j  java.lang.invoke.LambdaForm$DMH+0x00000001000c0000.invokeStatic(Ljava/lang/Object;Ljava/lang/Object;)V+10 java.base@21-internal
j  java.lang.invoke.LambdaForm$MH+0x00000001000c5000.invoke(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;+33 java.base@21-internal
j  java.lang.invoke.Invokers$Holder.invokeExact_MT(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;+20 java.base@21-internal
j  jdk.internal.reflect.DirectMethodHandleAccessor.invokeImpl(Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/Object;+55 java.base@21-internal
j  jdk.internal.reflect.DirectMethodHandleAccessor.invoke(Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/Object;+23 java.base@21-internal
j  java.lang.reflect.Method.invoke(Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/Object;+102 java.base@21-internal
j  com.sun.javatest.regtest.agent.MainWrapper$MainTask.run()V+134
j  java.lang.VirtualThread.runWith(Ljava/lang/Object;Ljava/lang/Runnable;)V+5 java.base@21-internal
j  java.lang.VirtualThread.run(Ljava/lang/Runnable;)V+65 java.base@21-internal
j  java.lang.VirtualThread$VThreadContinuation$1.run()V+8 java.base@21-internal
j  jdk.internal.vm.Continuation.enter0()V+4 java.base@21-internal
j  jdk.internal.vm.Continuation.enter(Ljdk/internal/vm/Continuation;Z)V+1 java.base@21-internal
J 308  jdk.internal.vm.Continuation.enterSpecial(Ljdk/internal/vm/Continuation;ZZ)V java.base@21-internal (0 bytes) @ 0x00007f1bbc773ec4 [0x00007f1bbc773d60+0x0000000000000164]
j  jdk.internal.vm.Continuation.run()V+122 java.base@21-internal
j  java.lang.VirtualThread.runContinuation()V+76 java.base@21-internal
j  java.lang.VirtualThread$$Lambda+0x00000001000ad970.run()V+4 java.base@21-internal
j  java.util.concurrent.ForkJoinTask$RunnableExecuteAction.exec()Z+4 java.base@21-internal
j  java.util.concurrent.ForkJoinTask.doExec()I+10 java.base@21-internal
j  java.util.concurrent.ForkJoinPool$WorkQueue.topLevelExec(Ljava/util/concurrent/ForkJoinTask;Ljava/util/concurrent/ForkJoinPool$WorkQueue;)V+19 java.base@21-internal
j  java.util.concurrent.ForkJoinPool.scan(Ljava/util/concurrent/ForkJoinPool$WorkQueue;II)I+211 java.base@21-internal
j  java.util.concurrent.ForkJoinPool.runWorker(Ljava/util/concurrent/ForkJoinPool$WorkQueue;)V+35 java.base@21-internal
j  java.util.concurrent.ForkJoinWorkerThread.run()V+31 java.base@21-internal
v  ~StubRoutines::call_stub 0x00007f1bbc1c5d21
V  [libjvm.so+0xe55d02]  JavaCalls::call_helper(JavaValue*, methodHandle const&, JavaCallArguments*, JavaThread*)+0x462  (javaCalls.cpp:415)
V  [libjvm.so+0xe562e3]  JavaCalls::call_virtual(JavaValue*, Klass*, Symbol*, Symbol*, JavaCallArguments*, JavaThread*)+0x283  (javaCalls.cpp:329)
V  [libjvm.so+0xe564f1]  JavaCalls::call_virtual(JavaValue*, Handle, Klass*, Symbol*, Symbol*, JavaThread*)+0x71  (javaCalls.cpp:191)
V  [libjvm.so+0xfa5666]  thread_entry(JavaThread*, JavaThread*)+0x96  (jvm.cpp:2918)
V  [libjvm.so+0xe87e9e]  JavaThread::thread_main_inner()+0x17e  (javaThread.cpp:717)
V  [libjvm.so+0x1758538]  Thread::call_run()+0xb8  (thread.cpp:215)
V  [libjvm.so+0x145984a]  thread_native_entry(Thread*)+0x11a  (os_linux.cpp:740)
Java frames: (J=compiled Java code, j=interpreted, Vv=VM code)
j  jdk.vm.ci.hotspot.CompilerToVM.materializeVirtualObjects(Ljdk/vm/ci/hotspot/HotSpotStackFrameReference;Z)V+0 jdk.internal.vm.ci@21-internal
j  jdk.vm.ci.hotspot.CompilerToVMHelper.materializeVirtualObjects(Ljdk/vm/ci/hotspot/HotSpotStackFrameReference;Z)V+5 jdk.internal.vm.ci@21-internal
j  compiler.jvmci.compilerToVM.MaterializeVirtualObjectTest.check(I)V+202
J 578 c2 compiler.jvmci.compilerToVM.MaterializeVirtualObjectTest.recurse(II)V (70 bytes) @ 0x00007f1bbc7a3c08 [0x00007f1bbc7a3bc0+0x0000000000000048]
J 586 c2 compiler.jvmci.compilerToVM.MaterializeVirtualObjectTest.testFrame2(Ljava/lang/String;I)V (115 bytes) @ 0x00007f1bbc7acdd8 [0x00007f1bbc7acd80+0x0000000000000058]
J 585 c2 compiler.jvmci.compilerToVM.MaterializeVirtualObjectTest.testFrame(Ljava/lang/String;I)V (55 bytes) @ 0x00007f1bbc7a9eac [0x00007f1bbc7a9e60+0x000000000000004c]
j  compiler.jvmci.compilerToVM.MaterializeVirtualObjectTest.test()V+117
j  compiler.jvmci.compilerToVM.MaterializeVirtualObjectTest.main([Ljava/lang/String;)V+37
j  java.lang.invoke.LambdaForm$DMH+0x00000001000c0000.invokeStatic(Ljava/lang/Object;Ljava/lang/Object;)V+10 java.base@21-internal
j  java.lang.invoke.LambdaForm$MH+0x00000001000c5000.invoke(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;+33 java.base@21-internal
j  java.lang.invoke.Invokers$Holder.invokeExact_MT(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;+20 java.base@21-internal
j  jdk.internal.reflect.DirectMethodHandleAccessor.invokeImpl(Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/Object;+55 java.base@21-internal
j  jdk.internal.reflect.DirectMethodHandleAccessor.invoke(Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/Object;+23 java.base@21-internal
j  java.lang.reflect.Method.invoke(Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/Object;+102 java.base@21-internal
j  com.sun.javatest.regtest.agent.MainWrapper$MainTask.run()V+134
j  java.lang.VirtualThread.runWith(Ljava/lang/Object;Ljava/lang/Runnable;)V+5 java.base@21-internal
j  java.lang.VirtualThread.run(Ljava/lang/Runnable;)V+65 java.base@21-internal
j  java.lang.VirtualThread$VThreadContinuation$1.run()V+8 java.base@21-internal
j  jdk.internal.vm.Continuation.enter0()V+4 java.base@21-internal
j  jdk.internal.vm.Continuation.enter(Ljdk/internal/vm/Continuation;Z)V+1 java.base@21-internal
J 308  jdk.internal.vm.Continuation.enterSpecial(Ljdk/internal/vm/Continuation;ZZ)V java.base@21-internal (0 bytes) @ 0x00007f1bbc773ec4 [0x00007f1bbc773d60+0x0000000000000164]
j  jdk.internal.vm.Continuation.run()V+122 java.base@21-internal
j  java.lang.VirtualThread.runContinuation()V+76 java.base@21-internal
j  java.lang.VirtualThread$$Lambda+0x00000001000ad970.run()V+4 java.base@21-internal
j  java.util.concurrent.ForkJoinTask$RunnableExecuteAction.exec()Z+4 java.base@21-internal
j  java.util.concurrent.ForkJoinTask.doExec()I+10 java.base@21-internal
j  java.util.concurrent.ForkJoinPool$WorkQueue.topLevelExec(Ljava/util/concurrent/ForkJoinTask;Ljava/util/concurrent/ForkJoinPool$WorkQueue;)V+19 java.base@21-internal
j  java.util.concurrent.ForkJoinPool.scan(Ljava/util/concurrent/ForkJoinPool$WorkQueue;II)I+211 java.base@21-internal
j  java.util.concurrent.ForkJoinPool.runWorker(Ljava/util/concurrent/ForkJoinPool$WorkQueue;)V+35 java.base@21-internal
j  java.util.concurrent.ForkJoinWorkerThread.run()V+31 java.base@21-internal
v  ~StubRoutines::call_stub 0x00007f1bbc1c5d21
Registers:
RAX=0x00007f1bd5fa7000, RBX=0x00007f1b748588d0, RCX=0x00007f1bd4eef1e0, RDX=0x00007f1bd4eef210
RSP=0x00007f1ba5cf7290, RBP=0x00007f1ba5cf7330, RSI=0x0000000000000070, RDI=0x00007f1bd4eeef78
R8 =0x0000000000000001, R9 =0x0000000000000000, R10=0x0000000000000000, R11=0x0000000000000000
R12=0x00007f1ba5cf72c0, R13=0x0000000000000000, R14=0x00007f1b74859d40, R15=0x00007f1b748588d0
RIP=0x00007f1bd4be926e, EFLAGS=0x0000000000010202, CSGSFS=0x002b000000000033, ERR=0x0000000000000006
  TRAPNO=0x000000000000000e",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8284161,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i31bmz:",9223372036854775807,b25,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2023-04-28 10:57;lmesnik;To reproduce fix run test with following command-line:
make -- run-test JTREG_TEST_THREAD_FACTORY=Virtual  TEST=compiler/jvmci/compilerToVM/MaterializeVirtualObjectTest.java;;;","2023-05-01 23:14;thartmann;ILW = Assert during materialization of virtual objects, JVMCI test with Loom (preview feature), disable thread factory plugin = HLM = P3;;;","2023-05-01 23:14;thartmann;Doug, please have a look.;;;","2023-05-02 00:08;alanb;There's no support for deferred value with virtual threads.  This shouldn't be an issue for JVMTI SetLocalXXX as the spec only requires that an implementation support setting locals in the top-most frame of a virtual thread that is suspended at an event. If I read this bug report correctly, it looks like the Graal JIT also makes use of this feature.
;;;","2023-05-02 10:30;dnsimon;I added some tracing and for this stack:

Stack: [0x000000016d7f0000,0x000000016d9f3000],  sp=0x000000016d9efff0,  free space=2047k
Native frames: (J=compiled Java code, j=interpreted, Vv=VM code, C=native code)
V  [libjvm.dylib+0x12b08b4]  VMError::report_and_die(int, char const*, char const*, char*, Thread*, unsigned char*, void*, void*, char const*, int, unsigned long)+0x4bc  (vframe_hp.cpp:117)
V  [libjvm.dylib+0x12b1250]  VMError::report_and_die(Thread*, void*, char const*, int, char const*, char const*, char*)+0x40
V  [libjvm.dylib+0x66fd94]  report_vm_error(char const*, int, char const*, char const*, ...)+0x6c
V  [libjvm.dylib+0x129cbac]  compiledVFrame::update_deferred_value(BasicType, int, jvalue)+0x188
V  [libjvm.dylib+0xb568dc]  c2v_materializeVirtualObjects(JNIEnv_*, _jobject*, _jobject*, bool)+0xc5c
j  jdk.vm.ci.hotspot.CompilerToVM.materializeVirtualObjects(Ljdk/vm/ci/hotspot/HotSpotStackFrameReference;Z)V+0 jdk.internal.vm.ci@21-internal
j  jdk.vm.ci.hotspot.CompilerToVMHelper.materializeVirtualObjects(Ljdk/vm/ci/hotspot/HotSpotStackFrameReference;Z)V+5 jdk.internal.vm.ci@21-internal
j  compiler.jvmci.compilerToVM.MaterializeVirtualObjectTest.check(I)V+202
J 574 c2 compiler.jvmci.compilerToVM.MaterializeVirtualObjectTest.recurse(II)V (70 bytes) @ 0x000000011801cbf0 [0x000000011801cb80+0x0000000000000070]
J 577 c2 compiler.jvmci.compilerToVM.MaterializeVirtualObjectTest.testFrame2(Ljava/lang/String;I)V (115 bytes) @ 0x000000011802462c [0x00000001180245c0+0x000000000000006c]
J 576 c2 compiler.jvmci.compilerToVM.MaterializeVirtualObjectTest.testFrame(Ljava/lang/String;I)V (55 bytes) @ 0x0000000118021a6c [0x0000000118021a00+0x000000000000006c]
j  compiler.jvmci.compilerToVM.MaterializeVirtualObjectTest.test()V+117
j  compiler.jvmci.compilerToVM.MaterializeVirtualObjectTest.main([Ljava/lang/String;)V+37
j  java.lang.invoke.LambdaForm$DMH+0x00000003000c0000.invokeStatic(Ljava/lang/Object;Ljava/lang/Object;)V+10 java.base@21-internal
j  java.lang.invoke.LambdaForm$MH+0x00000003000c5000.invoke(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;+33 java.base@21-internal

I see that the assertion is failing for this frame:

J 576 c2 compiler.jvmci.compilerToVM.MaterializeVirtualObjectTest.testFrame(Ljava/lang/String;I)V (55 bytes) @ 0x0000000118021a6c [0x0000000118021a00+0x000000000000006c]

What exactly is Continuation::is_frame_in_continuation testing? Why might it be true for this frame but not the frames for the C2 compiled frames (i.e. MaterializeVirtualObjectTest.testFrame2 and MaterializeVirtualObjectTest.recurse) just below it?
;;;","2023-05-03 01:44;dnsimon;If I interpret this failure correctly, it means jdk.vm.ci.code.stack.InspectedFrame#materializeVirtualObjects cannot work on virtual threads. Is that right [~alanb]?;;;","2023-05-03 02:06;rpressler;[~dnsimon] That is correct, and has always been the case: deferred locals are not supported in virtual threads. That's also why virtual threads do not support setting locals when debugging in frames other than the topmost (current) one. Supporting deferred locals is complicated, and the right way to do it is to allow the continuation code to unroll compiled frames to interpreted frames before they're frozen (as opposed to waiting for the frames to be deoptimized when returned to). We may need the capability to construct interpreted frames on demand if and when we support serialization of continuations, but other than that there is currently no ongoing work to specifically support deferred locals.;;;","2023-05-03 02:21;dnsimon;Thanks for the clarification [~rpressler]. This means in the short term we will need to add something jdk.vm.ci.code.stack.InspectedFrame#canMaterializeVirtualObjects which will return false for virtual threads until such time that the necessary support is added.
I guess this means there's also no immediate plans to allow local variable reflection in the java.lang.StackWalker API either (whether for virtual or non-virtual threads)?

Note that this places a limitation on com.oracle.truffle.api.frame.FrameInstance#getFrame[1] in terms of preventing write access to local variables of frames of virtual threads. (cc [~chumer])

[1] https://github.com/oracle/graal/blob/12022ff745f743894ecbac8db2235a5dfbdc63a4/truffle/src/com.oracle.truffle.api/src/com/oracle/truffle/api/frame/FrameInstance.java#L97;;;","2023-05-03 03:06;chumer;To give a bit of context: In Truffle a number of optimizations are reliant on lazily materializing caller frames. As you can imagine keeping frames virtual allows us effective stack allocate them and therefore allows us to be competitive with regular native frames. So we keep frames virtual optimistically until we find out we need to materialize them, which will always be materialized for future frame allocations. We will have a tough time knowing which frames to materialize beforehand. So our peak performance would suffer significantly on VirtualThreads.  Likewise, the Truffle debugger also uses this mechanism to inspect and modify Truffle natively compiled frames.

We can speculate that we are not executing on VirtualThreads, enabling these optimizations for regular threads and disabling them for VirtualThreads. We can keep the optimized frames read-only for virtual threads for the debugger. 

All this machinery requires many changes on our end to support. It would be good to know if it is worth it or if VirtualThreads will ultimately support deferred locals. We only need to materialize the VirtualFrame on the stack. We can mark all the locals we may need to materialize of which methods ahead of time.

A few more side notes on this:
* We want to move away from the JVMCI Frame API in favor of using the StackWalker API. But we miss the capability to modify frames there. I think it is in our interest to move these two worlds together, ultimately.
* We currently do not allow Truffle languages to enter virtual threads with the optimized Truffle runtime. We would love to support VirtualThreads and bring it to many of our language implementations.

[~rpressler] What would you recommend we do?;;;","2023-05-03 03:13;rpressler;There is no plan to support deferred locals in virtual threads directly. However, we would like to ultimately allow continuations unroll compiled frames that have been marked for deoptimization into interpreted frames before freezing, at least in some situations. As a side effect this will ""support"" deferred locals as they will be inserted into the interpreted frames when unrolled. However, that work has not started.;;;","2023-05-03 08:03;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/13777
Date: 2023-05-03 12:43:29 +0000;;;","2023-05-25 09:29;dukebot;Changeset: 89b3c375
Author:    Doug Simon <dnsimon@openjdk.org>
Date:      2023-05-25 16:26:26 +0000
URL:       https://git.openjdk.org/jdk/commit/89b3c375ac55f960dbeac8a2355e528450e610a1
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Fix deprecation warnings in DPrinter,JDK-8307123,5099759,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,jjg,jjg,jjg,2023-04-28 10:32,2023-05-08 13:11,2023-10-01 09:56,2023-05-02 09:56,21,,,,,,21,tools,,0,noreg-self,,,,,,,,,,,,,"The langtools test class DPrinter has some deprecation warnings, which it would be good to suppress.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i31bmj:",9223372036854775807,b21,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4dca67bd,,,,,,,,,"2023-05-01 16:01;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/13747
Date: 2023-05-01 22:56:12 +0000;;;","2023-05-02 09:56;dukebot;Changeset: b76f320e
Author:    Jonathan Gibbons <jjg@openjdk.org>
Date:      2023-05-02 16:54:39 +0000
URL:       https://git.openjdk.org/jdk/commit/b76f320e76f0fb58c598fdd7a5937f1b5bb1de15
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
zero build broken after JDK-8304265,JDK-8307110,5099744,Bug,Closed,JDK,JDK,software,duke,,,P4,Fixed,jvernee,dcubed,dcubed,2023-04-28 07:20,2023-08-08 11:49,2023-10-01 09:56,2023-04-28 14:45,21,,,,,,21,core-libs,,0,tier5,,,,,,,,,,,,,"The integration of JDK-8304265 has broken the zero build:

Profile linux-aarch64-zero-debug:

[2023-04-27T22:25:18,654Z] Compiling up to 40 files for jdk.jcmd
[2023-04-27T22:25:19,220Z] /opt/mach5/mesos/work_dir/slaves/741e9afd-8c02-45c3-b2e2-9db1450d0832-S24252/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/983d1ce5-e13b-4356-b5d2-51ea5312a636/runs/ec50edac-0ffb-4d2f-be2d-dca4842bb242/workspace/open/src/java.base/share/native/libfallbackLinker/fallbackLinker.c: In function 'Java_jdk_internal_foreign_abi_fallback_LibFallback_ffi_1get_1struct_1offsets':
[2023-04-27T22:25:19,220Z] /opt/mach5/mesos/work_dir/slaves/741e9afd-8c02-45c3-b2e2-9db1450d0832-S24252/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/983d1ce5-e13b-4356-b5d2-51ea5312a636/runs/ec50edac-0ffb-4d2f-be2d-dca4842bb242/workspace/open/src/java.base/share/native/libfallbackLinker/fallbackLinker.c:62:10: error: implicit declaration of function 'ffi_get_struct_offsets' [-Werror=implicit-function-declaration]
[2023-04-27T22:25:19,220Z]    62 |   return ffi_get_struct_offsets((ffi_abi) abi, jlong_to_ptr(type), jlong_to_ptr(offsets));
[2023-04-27T22:25:19,220Z]       |          ^~~~~~~~~~~~~~~~~~~~~~
[2023-04-27T22:25:19,234Z] cc1: all warnings being treated as errors
[2023-04-27T22:25:19,256Z] Lib.gmk:223: recipe for target '/opt/mach5/mesos/work_dir/slaves/741e9afd-8c02-45c3-b2e2-9db1450d0832-S24252/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/983d1ce5-e13b-4356-b5d2-51ea5312a636/runs/ec50edac-0ffb-4d2f-be2d-dca4842bb242/workspace/build/linux-aarch64-zero-debug/support/native/java.base/libfallbackLinker/static/fallbackLinker.o' failed
[2023-04-27T22:25:19,257Z] make[3]: *** [/opt/mach5/mesos/work_dir/slaves/741e9afd-8c02-45c3-b2e2-9db1450d0832-S24252/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/983d1ce5-e13b-4356-b5d2-51ea5312a636/runs/ec50edac-0ffb-4d2f-be2d-dca4842bb242/workspace/build/linux-aarch64-zero-debug/support/native/java.base/libfallbackLinker/static/fallbackLinker.o] Error 1
[2023-04-27T22:25:19,257Z] make[3]: *** Waiting for unfinished jobs....
[2023-04-27T22:25:19,281Z] make[2]: *** [java.base-static-libs] Error 2
[2023-04-27T22:25:19,281Z] make[2]: *** Waiting for unfinished jobs....
[2023-04-27T22:25:19,281Z] make/Main.gmk:211: recipe for target 'java.base-static-libs' failed
[2023-04-27T22:25:19,294Z] Compiling up to 254 files for jdk.jdi
[2023-04-27T22:27:23,872Z] 
[2023-04-27T22:27:23,872Z] ERROR: Build failed for target 'default (product-bundles test-bundles static-libs-bundles)' in configuration 'linux-aarch64-zero-debug' (exit code 2) 
[2023-04-27T22:27:23,901Z] 

and profile linux-aarch64-zero:

[2023-04-27T22:24:38,857Z] Compiling up to 242 files for jdk.javadoc
[2023-04-27T22:24:42,032Z] /opt/mach5/mesos/work_dir/slaves/741e9afd-8c02-45c3-b2e2-9db1450d0832-S79142/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/af0d917b-a890-4cec-881b-207230b9bde8/runs/b7ddc90b-fee3-43e9-9964-1fc9d9b30a5b/workspace/open/src/java.base/share/native/libfallbackLinker/fallbackLinker.c: In function 'Java_jdk_internal_foreign_abi_fallback_LibFallback_ffi_1get_1struct_1offsets':
[2023-04-27T22:24:42,032Z] /opt/mach5/mesos/work_dir/slaves/741e9afd-8c02-45c3-b2e2-9db1450d0832-S79142/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/af0d917b-a890-4cec-881b-207230b9bde8/runs/b7ddc90b-fee3-43e9-9964-1fc9d9b30a5b/workspace/open/src/java.base/share/native/libfallbackLinker/fallbackLinker.c:62:10: error: implicit declaration of function 'ffi_get_struct_offsets' [-Werror=implicit-function-declaration]
[2023-04-27T22:24:42,032Z]    62 |   return ffi_get_struct_offsets((ffi_abi) abi, jlong_to_ptr(type), jlong_to_ptr(offsets));
[2023-04-27T22:24:42,032Z]       |          ^~~~~~~~~~~~~~~~~~~~~~
[2023-04-27T22:24:42,046Z] cc1: all warnings being treated as errors
[2023-04-27T22:24:42,075Z] make[3]: *** [/opt/mach5/mesos/work_dir/slaves/741e9afd-8c02-45c3-b2e2-9db1450d0832-S79142/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/af0d917b-a890-4cec-881b-207230b9bde8/runs/b7ddc90b-fee3-43e9-9964-1fc9d9b30a5b/workspace/build/linux-aarch64-zero/support/native/java.base/libfallbackLinker/static/fallbackLinker.o] Error 1
[2023-04-27T22:24:42,075Z] Lib.gmk:223: recipe for target '/opt/mach5/mesos/work_dir/slaves/741e9afd-8c02-45c3-b2e2-9db1450d0832-S79142/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/af0d917b-a890-4cec-881b-207230b9bde8/runs/b7ddc90b-fee3-43e9-9964-1fc9d9b30a5b/workspace/build/linux-aarch64-zero/support/native/java.base/libfallbackLinker/static/fallbackLinker.o' failed
[2023-04-27T22:24:42,075Z] make[3]: *** Waiting for unfinished jobs....
[2023-04-27T22:24:42,123Z] make/Main.gmk:211: recipe for target 'java.base-static-libs' failed
[2023-04-27T22:24:42,123Z] make[2]: *** [java.base-static-libs] Error 2
[2023-04-27T22:24:42,123Z] make[2]: *** Waiting for unfinished jobs....
[2023-04-27T22:26:09,694Z] 
[2023-04-27T22:26:09,695Z] ERROR: Build failed for target 'default (product-bundles test-bundles static-libs-bundles)' in configuration 'linux-aarch64-zero' (exit code 2) 
[2023-04-27T22:26:09,697Z] Stopping javac server

",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8304886,JDK-8304265,,,,,,,,,,,,,,,aarch64,,,,,,,,,linux,,,,,,"0|i31bj7:",9223372036854775807,b21,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@28ce6b78,,,,,,,Verified,,"2023-04-28 07:21;dcubed;[~pminborg] - Please take a look at these zero build failures
that are happening in Tier5. Thanks!;;;","2023-04-28 13:37;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/13728
Date: 2023-04-28 19:51:02 +0000;;;","2023-04-28 14:45;dukebot;Changeset: 4818c798
Author:    Jorn Vernee <jvernee@openjdk.org>
Date:      2023-04-28 21:43:33 +0000
URL:       https://git.openjdk.org/jdk/commit/4818c798bcd0ae84cd15c7ab101902896b620016
;;;","2023-04-28 14:49;dcubed;[~jvernee] - Thanks for the quick resolution of this issue. I'm looking forward
to when this fix reaches Tier5 sometime this weekend!!;;;","2023-04-28 14:51;dcubed;The fix for this bug is integrated in jdk-21+21-1720.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
JFileChooser InvalidPathException when selecting some system folders on Windows,JDK-8307105,5099500,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,tr,webbuggrp,webbuggrp,2023-04-25 23:47,2023-09-11 09:38,2023-10-01 09:56,2023-06-01 21:32,20,21,,,,,21,client-libs,,0,dcspn,regression,regression_8281966,reproducer-yes,sn_143,sn_144,sn_145,webbug,,,,,,"ADDITIONAL SYSTEM INFORMATION :
Java 20, Java 20.0.1
Windows 10, Windows 11

A DESCRIPTION OF THE PROBLEM :
Selecting the ""This PC"", ""Libraries"", or ""Network"" folders from the system ""Desktop"" folder in a JFileChooser causes an InvalidPathException in Java 20. Does not happen in Java 19.

REGRESSION : Last worked in version 19.0.2

STEPS TO FOLLOW TO REPRODUCE THE PROBLEM :
Run code on Windows. Select ""Desktop"" folder from ""Save In"". Select ""This PC"", ""Libraries"", or ""Network"" from the file list.

EXPECTED VERSUS ACTUAL BEHAVIOR :
EXPECTED -
Expect nothing to happen other than the selection changing.
ACTUAL -
Stack dump for ""This PC"" selection on Java 20.0.1:

Exception in thread ""AWT-EventQueue-0"" java.nio.file.InvalidPathException: Illegal char <:> at index 0: ::{20D04FE0-3AEA-1069-A2D8-08002B30309D}
	at java.base/sun.nio.fs.WindowsPathParser.normalize(WindowsPathParser.java:182)
	at java.base/sun.nio.fs.WindowsPathParser.parse(WindowsPathParser.java:153)
	at java.base/sun.nio.fs.WindowsPathParser.parse(WindowsPathParser.java:77)
	at java.base/sun.nio.fs.WindowsPath.parse(WindowsPath.java:92)
	at java.base/sun.nio.fs.WindowsFileSystem.getPath(WindowsFileSystem.java:232)
	at java.base/java.io.File.toPath(File.java:2398)
	at java.desktop/javax.swing.plaf.basic.BasicFileChooserUI$Handler.valueChanged(BasicFileChooserUI.java:744)
	at java.desktop/javax.swing.JList.fireSelectionValueChanged(JList.java:1831)
	at java.desktop/javax.swing.JList$ListSelectionHandler.valueChanged(JList.java:1845)
	at java.desktop/javax.swing.DefaultListSelectionModel.fireValueChanged(DefaultListSelectionModel.java:229)
	at java.desktop/javax.swing.DefaultListSelectionModel.fireValueChanged(DefaultListSelectionModel.java:191)
	at java.desktop/javax.swing.DefaultListSelectionModel.setValueIsAdjusting(DefaultListSelectionModel.java:733)
	at java.desktop/javax.swing.JList.setValueIsAdjusting(JList.java:2179)
	at java.desktop/javax.swing.plaf.basic.BasicListUI$Handler.mouseReleased(BasicListUI.java:2988)
	at java.desktop/java.awt.AWTEventMulticaster.mouseReleased(AWTEventMulticaster.java:298)
	at java.desktop/java.awt.AWTEventMulticaster.mouseReleased(AWTEventMulticaster.java:297)
	at java.desktop/java.awt.Component.processMouseEvent(Component.java:6620)
	at java.desktop/javax.swing.JComponent.processMouseEvent(JComponent.java:3398)
	at java.desktop/java.awt.Component.processEvent(Component.java:6385)
	at java.desktop/java.awt.Container.processEvent(Container.java:2266)
	at java.desktop/java.awt.Component.dispatchEventImpl(Component.java:4995)
	at java.desktop/java.awt.Container.dispatchEventImpl(Container.java:2324)
	at java.desktop/java.awt.Component.dispatchEvent(Component.java:4827)
	at java.desktop/java.awt.LightweightDispatcher.retargetMouseEvent(Container.java:4948)
	at java.desktop/java.awt.LightweightDispatcher.processMouseEvent(Container.java:4575)
	at java.desktop/java.awt.LightweightDispatcher.dispatchEvent(Container.java:4516)
	at java.desktop/java.awt.Container.dispatchEventImpl(Container.java:2310)
	at java.desktop/java.awt.Window.dispatchEventImpl(Window.java:2780)
	at java.desktop/java.awt.Component.dispatchEvent(Component.java:4827)
	at java.desktop/java.awt.EventQueue.dispatchEventImpl(EventQueue.java:775)
	at java.desktop/java.awt.EventQueue$4.run(EventQueue.java:720)
	at java.desktop/java.awt.EventQueue$4.run(EventQueue.java:714)
	at java.base/java.security.AccessController.doPrivileged(AccessController.java:400)
	at java.base/java.security.ProtectionDomain$JavaSecurityAccessImpl.doIntersectionPrivilege(ProtectionDomain.java:87)
	at java.base/java.security.ProtectionDomain$JavaSecurityAccessImpl.doIntersectionPrivilege(ProtectionDomain.java:98)
	at java.desktop/java.awt.EventQueue$5.run(EventQueue.java:747)
	at java.desktop/java.awt.EventQueue$5.run(EventQueue.java:745)
	at java.base/java.security.AccessController.doPrivileged(AccessController.java:400)
	at java.base/java.security.ProtectionDomain$JavaSecurityAccessImpl.doIntersectionPrivilege(ProtectionDomain.java:87)
	at java.desktop/java.awt.EventQueue.dispatchEvent(EventQueue.java:744)
	at java.desktop/java.awt.EventDispatchThread.pumpOneEventForFilters(EventDispatchThread.java:203)
	at java.desktop/java.awt.EventDispatchThread.pumpEventsForFilter(EventDispatchThread.java:124)
	at java.desktop/java.awt.EventDispatchThread.pumpEventsForFilter(EventDispatchThread.java:117)
	at java.desktop/java.awt.WaitDispatchSupport$2.run(WaitDispatchSupport.java:191)
	at java.desktop/java.awt.WaitDispatchSupport$4.run(WaitDispatchSupport.java:236)
	at java.desktop/java.awt.WaitDispatchSupport$4.run(WaitDispatchSupport.java:234)
	at java.base/java.security.AccessController.doPrivileged(AccessController.java:319)
	at java.desktop/java.awt.WaitDispatchSupport.enter(WaitDispatchSupport.java:234)
	at java.desktop/java.awt.Dialog.show(Dialog.java:1080)
	at java.desktop/javax.swing.JFileChooser.showDialog(JFileChooser.java:771)
	at java.desktop/javax.swing.JFileChooser.showSaveDialog(JFileChooser.java:693)
	at JFileChooserBug20.lambda$main$0(JFileChooserBug20.java:5)
	at java.desktop/java.awt.event.InvocationEvent.dispatch(InvocationEvent.java:318)
	at java.desktop/java.awt.EventQueue.dispatchEventImpl(EventQueue.java:773)
	at java.desktop/java.awt.EventQueue$4.run(EventQueue.java:720)
	at java.desktop/java.awt.EventQueue$4.run(EventQueue.java:714)
	at java.base/java.security.AccessController.doPrivileged(AccessController.java:400)
	at java.base/java.security.ProtectionDomain$JavaSecurityAccessImpl.doIntersectionPrivilege(ProtectionDomain.java:87)
	at java.desktop/java.awt.EventQueue.dispatchEvent(EventQueue.java:742)
	at java.desktop/java.awt.EventDispatchThread.pumpOneEventForFilters(EventDispatchThread.java:203)
	at java.desktop/java.awt.EventDispatchThread.pumpEventsForFilter(EventDispatchThread.java:124)
	at java.desktop/java.awt.EventDispatchThread.pumpEventsForHierarchy(EventDispatchThread.java:113)
	at java.desktop/java.awt.EventDispatchThread.pumpEvents(EventDispatchThread.java:109)
	at java.desktop/java.awt.EventDispatchThread.pumpEvents(EventDispatchThread.java:101)
	at java.desktop/java.awt.EventDispatchThread.run(EventDispatchThread.java:90)



---------- BEGIN SOURCE ----------
import javax.swing.*;

public class JFileChooserBug20 {
   public static void main(String args[]) {
      SwingUtilities.invokeLater(()->new JFileChooser().showSaveDialog(null));
   }
}

---------- END SOURCE ----------

FREQUENCY : always


",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8316029,JDK-8281966,,,,"2023-04-28 05:41;pnarayanaswa;JFileChooserBug20.java;https://bugs.openjdk.org/secure/attachment/103648/JFileChooserBug20.java",,,,,,,x86_64,,,,,,b10,20,,windows_10,,,,,,"0|i31a0z:",9223372036854775807,b26,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@568a5b31,,,,,,,,,"2023-04-28 05:34;pnarayanaswa;Checked with attached testcase in Windows10, issue is reproducible
Test Result
========
8u371: Pass
11.0.19: Pass
17.0.7: Pass
20 build 9: Pass
20 build 10: Fail
20.0.1 build 1: Fail
21ea20: Fail;;;","2023-04-30 21:56;psadhukhan;Seems to be regression of 
JDK-8281966: Absolute path of symlink is null in JFileChooser
;;;","2023-05-15 23:45;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/13998
Date: 2023-05-16 06:40:20 +0000;;;","2023-05-26 07:39;aivanov;This bug is a regression from JDK-8281966.;;;","2023-06-01 21:32;dukebot;Changeset: 325940b0
Author:    Tejesh R <tr@openjdk.org>
Date:      2023-06-02 04:29:33 +0000
URL:       https://git.openjdk.org/jdk/commit/325940b0919e649e84358db35a55b3ac5dfe0acf
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
[AIX] VM crashes with UseRTMLocking on Power10,JDK-8307104,5099739,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,mdoerr,mdoerr,mdoerr,2023-04-28 05:34,2023-05-19 14:58,2023-10-01 09:56,2023-05-02 02:21,11,17,20,21,,,21,hotspot,,0,jdk20u-fix-request,jdk20u-fix-SQE-ok,jdk20u-fix-yes,oraclejdk-na,oracle-triage-21,,,,,,,,,"Power10 doesn't support transactional memory instructions. The VM asks the OS on linux which prevents an illegal usage of the feature. However, the VM tries to use these instructions on AIX which are causing SIGILL when UseRTMLocking is enabled. It needs to be disabled for Power10.
",,,,,,,,,,,JDK-8308457,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,ppc,,,,,,,,,aix,,,,,,"0|i31bi3:",9223372036854775807,b21,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2023-04-28 06:19;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/13717
Date: 2023-04-28 13:13:41 +0000;;;","2023-05-02 02:21;dukebot;Changeset: 860bf9b3
Author:    Martin Doerr <mdoerr@openjdk.org>
Date:      2023-05-02 09:19:49 +0000
URL:       https://git.openjdk.org/jdk/commit/860bf9b35fb168b7b725388c797f193564d9af4d
;;;","2023-05-11 11:13;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk20u/pull/77
Date: 2023-05-11 17:33:05 +0000;;;","2023-05-17 15:44;tsteele;[jdk20u fix request]

Backporting this to 20u to prevent the failure from occurring on that platform. The backport did not apply cleanly, but only due to trivial differences in the header. It has been reviewed. This risk is low, and testing looks good.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Two TestMetaspaceAllocationMT tests fail after JDK-8306696,JDK-8307103,5099738,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,jiefu,jiefu,jiefu,2023-04-28 04:56,2023-05-04 00:14,2023-10-01 09:56,2023-04-28 05:29,21,,,,,,21,hotspot,,0,tencent-interest,tier2,tier3,tier4,,,,,,,,,,"The following two tests fail:
  runtime/Metaspace/elastic/TestMetaspaceAllocationMT1.java
  runtime/Metaspace/elastic/TestMetaspaceAllocationMT2.java

/jdk/test/hotspot/jtreg/runtime/Metaspace/elastic/TestMetaspaceAllocationMT2.java:115: error: cannot find symbol
            System.out.println(""#### ReclaimPolicy: "" + Settings.settings().reclaimPolicy);
                                                                           ^
  symbol:   variable reclaimPolicy
  location: class Settings
1 error",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8306696,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i31bhv:",9223372036854775807,b21,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,,,"2023-04-28 05:05;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/13714
Date: 2023-04-28 12:00:45 +0000;;;","2023-04-28 05:29;dukebot;Changeset: 452cb843
Author:    Jie Fu <jiefu@openjdk.org>
Date:      2023-04-28 12:27:16 +0000
URL:       https://git.openjdk.org/jdk/commit/452cb8432f4d45c3dacd4415bc9499ae73f7a17c
;;;","2023-04-28 06:20;dcubed;The fix for this bug is integrated in jdk-21+21-1704.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
A few client tests intermittently throw ConcurrentModificationException,JDK-8307091,5099723,Bug,Closed,JDK,JDK,software,duke,,,P2,Fixed,tr,tr,tr,2023-04-28 00:37,2023-09-11 05:45,2023-10-01 09:56,2023-05-03 21:54,16,17,18,19,21,,21,client-libs,,0,intermittent,sn_142,sn_143,test_sprint,tier3,,,,,,,,,"Few of test using directory models threw ConcurrentModificationException Intermittently on Oracle Linux OCI.

java.util.ConcurrentModificationException
at java.base/java.util.AbstractList$SubList.checkForComodification(AbstractList.java:904)
at java.base/java.util.AbstractList$SubList.listIterator(AbstractList.java:835)
at java.base/java.util.AbstractList.listIterator(AbstractList.java:311)
at java.base/java.util.Collections$SynchronizedList.listIterator(Collections.java:2484)
at java.base/java.util.AbstractList.equals(AbstractList.java:544)
at java.base/java.util.Collections$SynchronizedList.equals(Collections.java:2453)
at java.desktop/javax.swing.plaf.basic.BasicDirectoryModel$FilesLoader$1.call(BasicDirectoryModel.java:358)
at java.desktop/javax.swing.plaf.basic.BasicDirectoryModel$FilesLoader$1.call(BasicDirectoryModel.java:336)
at java.desktop/sun.awt.shell.ShellFolderManager$DirectInvoker.invoke(ShellFolderManager.java:146)
at java.desktop/sun.awt.shell.ShellFolder.invoke(ShellFolder.java:521)
at java.desktop/sun.awt.shell.ShellFolder.invoke(ShellFolder.java:507)
at java.desktop/javax.swing.plaf.basic.BasicDirectoryModel$FilesLoader.run0(BasicDirectoryModel.java:336)
at java.desktop/javax.swing.plaf.basic.BasicDirectoryModel$FilesLoader.run(BasicDirectoryModel.java:289)
at java.base/java.lang.Thread.run(Thread.java:831)

JavaTest Message: Test threw exception: java.util.ConcurrentModificationException
JavaTest Message: shutting down test",,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8257455,,,,,,,,,,,,,,,,,,,,generic,,,,,,,,,linux_oracle,,,,,,"0|i31bej:",9223372036854775807,b22,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@568a5b31,,,,,,,Verified,,"2023-05-01 22:41;tr;From the code analysis and few references from browsing, exception seems to be causing when local file cache vector is been compared with shared file cache vector. Even though vectors are thread safe, the comparison in turn calls for an iterator where the exception is occurring. As from the documents reference which states - 
""The iterators returned by this class's iterator and listIterator methods are fail-fast: if the vector is structurally modified at any time after the iterator is created, in any way except through the iterator's own remove or add methods, the iterator will throw a ConcurrentModificationException ""
Handling these scenarios will avoid causing the exception, since the issue is intermittent. ;;;","2023-05-03 09:22;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/13783
Date: 2023-05-03 16:13:53 +0000;;;","2023-05-03 21:54;dukebot;Changeset: 465bdd9e
Author:    Tejesh R <tr@openjdk.org>
Date:      2023-05-04 04:52:00 +0000
URL:       https://git.openjdk.org/jdk/commit/465bdd9e416cacc6cc7dd91a29cc84adf2eaf1ed
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Open source some drag and drop tests 3,JDK-8307083,5099715,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,achung,achung,achung,2023-04-27 18:10,2023-07-05 11:17,2023-10-01 09:56,2023-05-18 08:46,17,20,21,,,,21,client-libs,,0,amazon-interest,jdk17u-fix-request,jdk17u-fix-yes,sn_142,test_sprint,,,,,,,,,"Update tests, clean up imports, add copyright headers from various DnD tests.",,,,,,,,,,,JDK-8311523,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,generic,,,,,,,,,generic,,,,,,"0|i31bcr:",9223372036854775807,b24,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@5a9b3fd3,,,,,,,,,"2023-05-04 13:28;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/13764
Date: 2023-05-02 21:53:59 +0000;;;","2023-05-18 08:47;dukebot;Changeset: 1b154e4f
Author:    Alisen Chung <achung@openjdk.org>
Date:      2023-05-18 15:45:12 +0000
URL:       https://git.openjdk.org/jdk/commit/1b154e4fd361103936f976db72e04b73aa7b1077
;;;","2023-06-29 11:27;jcao;Fix Request (17u)

We have a new hire working on it. Will update this issue when there is more information.;;;","2023-07-03 09:05;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/1531
Date: 2023-07-03 15:59:12 +0000;;;","2023-07-03 09:13;jcao;Fix Request (17u)

On behalf of Chad Rakoczy <chadrako@amazon.com>.

Clean test-only backport.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Open source some more JComboBox jtreg tests,JDK-8307080,5099711,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,prr,prr,prr,2023-04-27 15:17,2023-08-24 10:08,2023-10-01 09:56,2023-04-28 15:39,21,,,,,,21,client-libs,,0,jdk11u-fix-request,jdk11u-fix-yes,jdk17u-fix-request,jdk17u-fix-yes,noreg-self,sn_142,test_sprint,testbug,,,,,,Open source some more JComboBox jtreg tests,,,,,,,,,,,JDK-8307274,JDK-8314965,JDK-8308705,JDK-8307251,JDK-8307427,JDK-8307673,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i31bbv:",9223372036854775807,b21,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@568a5b31,,,,,,,,,"2023-04-28 14:38;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/13731
Date: 2023-04-28 21:25:40 +0000;;;","2023-04-28 15:42;dukebot;Changeset: b8de3943
Author:    Phil Race <prr@openjdk.org>
Date:      2023-04-28 22:39:17 +0000
URL:       https://git.openjdk.org/jdk/commit/b8de39431dca90e63552968829a349a9b63e68ca
;;;","2023-05-18 11:45;vrudomet;[Fix request 17u] 

Clean backport, new tests, low risk
Checked on macOS x64, linux x64, windows x64: tests pass;;;","2023-05-18 12:27;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/1364
Date: 2023-05-18 19:20:46 +0000;;;","2023-08-16 00:01;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk11u-dev/pull/2080
Date: 2023-08-16 06:54:28 +0000;;;","2023-08-17 00:56;andrewlu;Fix request [11u]

I backport this for parity with 11.0.21-oracle.
No risk, only a test change.
Clean backport.
Test passes. SAP nightly testing passed.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Update test java/awt/Choice/DragOffNoSelect.java,JDK-8307079,5099710,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,prr,prr,prr,2023-04-27 15:07,2023-09-22 00:10,2023-10-01 09:56,2023-04-28 11:18,21,,,,,,21,client-libs,,0,jdk11u-fix-request,jdk11u-fix-yes,jdk17u-fix-request,jdk17u-fix-yes,noreg-self,sn_142,test_sprint,,,,,,,"When cleaning up java/awt/Choice/DragOffNoSelect.java to move it to open,
I used setSize() instead of pack().
This makes the test behave oddly even though it passes, so fix that.",,,,,,,,,,,JDK-8316716,JDK-8314088,JDK-8309017,JDK-8308957,JDK-8308958,JDK-8308959,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i31bbn:",9223372036854775807,b21,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@5a9b3fd3,,,,,,,,,"2023-04-27 15:58;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/13705
Date: 2023-04-27 22:46:41 +0000;;;","2023-04-28 11:18;dukebot;Changeset: 89711f37
Author:    Phil Race <prr@openjdk.org>
Date:      2023-04-28 18:17:24 +0000
URL:       https://git.openjdk.org/jdk/commit/89711f376751d4cfa05758705867afedfafeb602
;;;","2023-08-08 05:51;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/1650
Date: 2023-08-08 12:44:03 +0000;;;","2023-08-08 05:56;mdoerr;Fix Request (17u): 
Should get backported for parity with 17.0.9-oracle. Applies cleanly. Test has passed (tested manually on Mac M1).;;;","2023-09-14 00:32;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk11u-dev/pull/2131
Date: 2023-09-14 07:21:58 +0000;;;","2023-09-18 22:49;andrewlu;Fix request [11u]

I backport this for parity with 11.0.21-oracle.
No risk, only a test change.
Clean backport.
Test passes. SAP nightly testing passed.
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Opensource and clean up five more AWT Focus related tests,JDK-8307078,5099709,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,kizune,kizune,kizune,2023-04-27 15:04,2023-08-24 10:04,2023-10-01 09:56,2023-04-28 11:48,,,,,,,21,client-libs,,0,jdk11u-fix-request,jdk11u-fix-yes,jdk17u-fix-request,jdk17u-fix-yes,noreg-self,sn_142,test_sprint,,,,,,,,,,,,,,,,,,JDK-8307445,JDK-8307685,JDK-8307436,JDK-8314963,JDK-8307433,JDK-8311502,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i31bbf:",9223372036854775807,b21,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@5a9b3fd3,,,,,,,,,"2023-04-27 22:17;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/13710
Date: 2023-04-28 05:12:50 +0000;;;","2023-04-28 11:48;dukebot;Changeset: 6d6f726b
Author:    Alexander Zuev <kizune@openjdk.org>
Date:      2023-04-28 18:46:48 +0000
URL:       https://git.openjdk.org/jdk/commit/6d6f726b74f7fcd3e7c37d50bd2476b3e921662b
;;;","2023-07-04 08:45;goetz;Fix request [17u]

I backport this for parity with 17.0.9-oracle.
No risk, only a test change.
Clean backport.
Tests pass. Did not try ModalDialogInFocusEventTest.java as I have no idea how to start it. 
SAP nightly testing passed.;;;","2023-07-04 08:51;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/1539
Date: 2023-07-04 15:45:30 +0000;;;","2023-08-16 19:22;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk11u-dev/pull/2083
Date: 2023-08-17 02:15:53 +0000;;;","2023-08-17 20:15;andrewlu;Fix request [11u]

I backport this for parity with 11.0.21-oracle.
No risk, only a test change.
Clean backport.
Test passes. Like 17 backport do not try ModalDialogInFocusEventTest.java as no idea how to start it.
SAP nightly testing passed.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
"When cross-compiling with hsdis/binutils, buildjdk creation fails",JDK-8307063,5099688,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,tonyp,tonyp,tonyp,2023-04-27 07:58,2023-05-04 00:14,2023-10-01 09:56,2023-04-28 05:33,,,,,,,21,infrastructure,,0,,,,,,,,,,,,,,"When cross-compiling with hsdis/binutils (and without providing a build jdk with --build-jdk), buildjdk creation fails. The error is something like:

libbfd.a: error adding symbols: file in wrong format",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i31b6r:",9223372036854775807,b21,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@429c566,,,,,,,,,"2023-04-27 08:05;tonyp;configure cmd is something like:

bash configure  --openjdk-target=riscv64-linux-gnu --with-sysroot=... --with-boot-jdk=...  --enable-hsdis-bundling --with-hsdis=binutils --with-binutils-src=<path-to-binutils>

binutils is built at configure time and it's built for the target architecture (in this case, riscv64). At build time, buildjdk is built for the host architecture (in this case, x64) and it cannot use the riscv64 binutils libraries that were built earlier.

It might be worth building binutils during build time and ensuring that it's built twice, one for each architecture, if needed. However, the quickest short-term solution is to just build buildjdk without hsdis, as it's really not needed. It's actually a small patch.;;;","2023-04-27 08:19;tonyp;Still in the process of associating my GitHub account with the OpenJDK org. I'll post the patch as soon as that's done.;;;","2023-04-27 10:53;erikj;The buildjdk is supposed to only include the minimum of what's needed to drive the rest of the build. I can't imagine hsdis to be part of that. Configuring with --enable-hsdis-bundling should only affect the actual JDK being built and not the buildjdk, so that isn't just the best short term fix, it's also the correct fix.;;;","2023-04-27 11:01;tonyp;Thanks for the feedback Erik. PR here: https://github.com/openjdk/jdk/pull/13697 (do I have to manually link it with the CR? sorry, still learning the new process...). OK, it was automatically added! Cool!;;;","2023-04-27 11:03;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/13697
Date: 2023-04-27 17:57:05 +0000;;;","2023-04-28 05:33;dukebot;Changeset: 83a98c66
Author:    Antonios Printezis <tonyp@openjdk.org>
Date:      2023-04-28 12:31:48 +0000
URL:       https://git.openjdk.org/jdk/commit/83a98c66f1747fec3da77578b646498c4cb5637d
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
"C2: ""malformed control flow"" assert due to missing safepoint on backedge with a switch",JDK-8306997,5099619,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,roland,roland,roland,2023-04-27 04:19,2023-05-08 14:30,2023-10-01 09:56,2023-05-03 01:31,11,17,20,21,,,21,hotspot,,0,c2,oracle-triage-21,,,,,,,,,,,,"I hit:

#  Internal Error (/home/roland/jdk-jdk/src/hotspot/share/opto/compile.cpp:4003), pid=2305479, tid=2305494
#  assert(false) failed: malformed control flow

I'll provide a test case in the PR.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8303951,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i31arf:",9223372036854775807,b21,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2023-04-27 04:34;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/13688
Date: 2023-04-27 11:27:30 +0000;;;","2023-04-27 23:08;chagedorn;ILW = Debug assert in C2 due to broken control flow (bailout in product), single test case, disable compilation of affected method = MLM = P4;;;","2023-05-03 01:31;dukebot;Changeset: e0774bed
Author:    Roland Westrelin <roland@openjdk.org>
Date:      2023-05-03 08:29:01 +0000
URL:       https://git.openjdk.org/jdk/commit/e0774bed2d2fcd850f5ca6884dd7aeb45f0bdaef
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Open source Swing MenuItem related tests,JDK-8306996,5099618,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,abhiscxk,abhiscxk,abhiscxk,2023-04-27 04:03,2023-05-17 16:46,2023-10-01 09:56,2023-05-11 19:55,,,,,,,21,client-libs,,0,jdk17u-fix-request,jdk17u-fix-yes,sn_142,test_sprint,,,,,,,,,,"These tests should be open sourced

javax/swing/JMenuItem/4304129/bug4304129.java
javax/swing/JMenuItem/4198809/bug4198809.java
javax/swing/JMenuItem/4966168/bug4966168.java
javax/swing/JMenuItem/4839464/bug4839464.java",,,,,,,,,,,JDK-8308278,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i31ar7:",9223372036854775807,b23,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@568a5b31,,,,,,,,,"2023-05-04 22:04;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/13822
Date: 2023-05-05 04:56:22 +0000;;;","2023-05-11 19:55;dukebot;Changeset: 73491fa4
Author:    Abhishek Kumar <abhiscxk@openjdk.org>
Date:      2023-05-12 02:52:43 +0000
URL:       https://git.openjdk.org/jdk/commit/73491fa452e73cf7c02c577f4e3f1a34c02bea6d
;;;","2023-05-15 14:07;vrudomet;[Fix request 17u]

Clean backport, new tests, low risk
Tested on macOS x64, linux x64;;;","2023-05-15 14:13;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/1347
Date: 2023-05-15 21:05:18 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
[JVMCI] mitigate more against JVMCI related OOME causing VM to exit,JDK-8306992,5099614,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,dnsimon,dnsimon,dnsimon,2023-04-27 03:34,2023-08-24 02:15,2023-10-01 09:56,2023-05-23 00:21,21,,,,,,21,hotspot,,0,jvmci,oracle-triage-17,oracle-triage-21,,,,,,,,,,,"In low memory scenarios, libgraal can prematurely cause the VM to exit. For example, the following occurred in the java/util/concurrent/locks/Lock/OOMEInAQS.java test:

command: main -XX:-UseGCOverheadLimit -Xmx24M -XX:-UseTLAB OOMEInAQS
reason: User specified action: run main/othervm -XX:-UseGCOverheadLimit -Xmx24M -XX:-UseTLAB OOMEInAQS 
started: Wed Apr 26 12:16:33 PDT 2023
Mode: othervm [/othervm specified]
finished: Wed Apr 26 12:16:38 PDT 2023
elapsed time (seconds): 5.073
configuration:
STDOUT:
Exception during JVMCI compiler initialization
Exception in thread ""main"": java.lang.OutOfMemoryError
java.lang.OutOfMemoryError: OutOfMemoryError occurred while encoding an exception to translate it from the JVM heap
	at java.base@20.0.1/jdk.internal.vm.VMSupport.decodeAndThrowThrowable(VMSupport.java:138)
	at jdk.internal.vm.ci@20.0.1/jdk.vm.ci.hotspot.CompilerToVM.lookupType(Native Method)
	at jdk.internal.vm.ci@20.0.1/jdk.vm.ci.hotspot.CompilerToVM.lookupType(CompilerToVM.java:245)
	at jdk.internal.vm.ci@20.0.1/jdk.vm.ci.hotspot.HotSpotJVMCIRuntime.createClass(HotSpotJVMCIRuntime.java:627)
	at jdk.internal.vm.ci@20.0.1/jdk.vm.ci.hotspot.HotSpotJVMCIRuntime$1.computeValue(HotSpotJVMCIRuntime.java:642)
	at jdk.internal.vm.ci@20.0.1/jdk.vm.ci.hotspot.HotSpotJVMCIRuntime$1.computeValue(HotSpotJVMCIRuntime.java:639)
	at java.base@20.0.1/java.lang.ClassValue.get(JavaLangSubstitutions.java:667)
	at jdk.internal.vm.ci@20.0.1/jdk.vm.ci.hotspot.HotSpotJVMCIRuntime.fromClass0(HotSpotJVMCIRuntime.java:649)
	at jdk.internal.vm.ci@20.0.1/jdk.vm.ci.hotspot.HotSpotJVMCIRuntime.fromClass(HotSpotJVMCIRuntime.java:670)
	at jdk.internal.vm.ci@20.0.1/jdk.vm.ci.hotspot.HotSpotMetaAccessProvider.lookupJavaType(HotSpotMetaAccessProvider.java:63)
	at jdk.internal.vm.compiler/org.graalvm.compiler.hotspot.HotSpotSnippetMetaAccessProvider.lookupJavaType(HotSpotSnippetMetaAccessProvider.java:58)
	at jdk.internal.vm.compiler/org.graalvm.compiler.hotspot.replacements.HotSpotReplacementsUtil.referenceType(HotSpotReplacementsUtil.java:951)
	at jdk.internal.vm.compiler/org.graalvm.compiler.hotspot.replacements.HotSpotReplacementsUtil.referentField(HotSpotReplacementsUtil.java:946)
	at jdk.internal.vm.compiler/org.graalvm.compiler.hotspot.HotSpotBackendFactory.createBarrierSet(HotSpotBackendFactory.java:244)
	at jdk.internal.vm.compiler/org.graalvm.compiler.hotspot.HotSpotBackendFactory.createBackend(HotSpotBackendFactory.java:159)
	at jdk.internal.vm.compiler/org.graalvm.compiler.hotspot.HotSpotGraalRuntime.<init>(HotSpotGraalRuntime.java:157)
	at jdk.internal.vm.compiler/org.graalvm.compiler.hotspot.HotSpotGraalCompilerFactory.createCompiler(HotSpotGraalCompilerFactory.java:212)
	at jdk.internal.vm.compiler/org.graalvm.compiler.hotspot.HotSpotGraalCompilerFactory.createCompiler(HotSpotGraalCompilerFactory.java:190)
	at jdk.internal.vm.compiler/org.graalvm.compiler.hotspot.HotSpotGraalCompilerFactory.createCompiler(HotSpotGraalCompilerFactory.java:53)
	at jdk.internal.vm.ci@20.0.1/jdk.vm.ci.hotspot.HotSpotJVMCIRuntime.getCompiler(HotSpotJVMCIRuntime.java:806)
	at jdk.internal.vm.ci@20.0.1/jdk.vm.ci.hotspot.HotSpotJVMCIRuntime.compileMethod(HotSpotJVMCIRuntime.java:920)
# To suppress the following error report, specify this argument
# after -XX: or in .hotspotrc:  SuppressErrorAt=\jvmciRuntime.cpp:1637
#
# A fatal error has been detected by the Java Runtime Environment:
#
#  Internal Error (c:\users\buildbot\worker\e\main\jdk_tlda\open\src\hotspot\share\jvmci\jvmciRuntime.cpp:1637), pid=20928, tid=29700
#  fatal error: Fatal exception in JVMCI: Exception during JVMCI compiler initialization
#
# JRE version: Java(TM) SE Runtime Environment Oracle GraalVM 20.0.1-dev+9.1 (20.0.1+9) (fastdebug build 20.0.1+9-jvmci-23.0-b10)
# Java VM: Java HotSpot(TM) 64-Bit Server VM Oracle GraalVM 20.0.1-dev+9.1 (fastdebug 20.0.1+9-jvmci-23.0-b10, mixed mode, tiered, jvmci, jvmci compiler, compressed oops, compressed class ptrs, g1 gc, windows-amd64)
# Core dump will be written. Default location: C:\Users\Buildbot\worker\e\main\labsjdk\open\build\run-test-prebuilt\test-support\jtreg_open_test_jdk_jdk_loom\scratch\2\hs_err_pid20928.mdmp
#
# An error report file with more information is saved as:
# C:\Users\Buildbot\worker\e\main\labsjdk\open\build\run-test-prebuilt\test-support\jtreg_open_test_jdk_jdk_loom\scratch\2\hs_err_pid20928.log
#
# If you would like to submit a bug report, please visit:
#   https://bugreport.java.com/bugreport/crash.jsp
#

More defensive code is needed to treat this as a compilation failure instead of a fatal error.",,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8305932,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i31aqb:",9223372036854775807,b24,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2023-04-27 04:05;chagedorn;ILW = Fatal error when running out of memory, only with JVMCI and with low memory, no workaround = MLH = P4;;;","2023-05-10 07:31;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/13905
Date: 2023-05-10 14:00:51 +0000;;;","2023-05-23 00:21;dukebot;Changeset: 422128b7
Author:    Doug Simon <dnsimon@openjdk.org>
Date:      2023-05-23 07:20:00 +0000
URL:       https://git.openjdk.org/jdk/commit/422128b70a57c8c6a997938fbf8d8cb19bed65e4
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
The guarantees given by Region's floor and ceiling functions should work for larger values,JDK-8306990,5099612,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,jhendrikx,jhendrikx,jhendrikx,2023-04-27 03:10,2023-06-02 08:30,2023-10-01 09:56,2023-05-31 17:05,8,jfx11,,,,,jfx21,javafx,,0,,,,,,,,,,,,,,"Region has floor and ceiling functions that ensure that calling them twice in a row will yield the same result:

     ceil(x) = ceil(ceil(x))

However, due to use of a constant `EPSILON` which is added/subtracted before doing the rounding, this only works for small numbers (in the range of 0-50 approximately).  For larger values and scales, rounding errors can easily occur.  This is visible as artifacts on screen where controls are a pixel wider than they should be.

The use of the `EPSILON` constant is incorrect, as its value depends on the magnitude of the value in question (as magnitude increases, the fractional precision decreases).

The Math class offers the function `ulp` that should be used here.  It represents the smallest possible change in value for a given double.

Extending the existing test case `snappingASnappedValueGivesTheSameValueTest` to use larger magnitude numbers exposes the problems.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i31apv:",9223372036854775807,b20,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4143e3f7,,,,,,,,,"2023-04-27 03:18;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jfx/pull/1118
Date: 2023-04-27 10:11:42 +0000;;;","2023-05-31 17:05;dukebot;Changeset: 7825137d
Author:    John Hendrikx <jhendrikx@openjdk.org>
Date:      2023-06-01 00:03:07 +0000
URL:       https://git.openjdk.org/jfx/commit/7825137dc2d9f8d4ebc50c864522fae990cadc71
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
"[lworld] C2 compilation fails with assert ""Should have been buffered""",JDK-8306986,5099606,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,thartmann,thartmann,thartmann,2023-04-27 02:00,2023-04-27 23:28,2023-10-01 09:56,2023-04-27 23:28,repo-valhalla,,,,,,repo-valhalla,hotspot,,0,c2,lworld,,,,,,,,,,,,"# A fatal error has been detected by the Java Runtime Environment:
#
#  Internal Error (/oracle/valhalla/open/src/hotspot/share/opto/compile.cpp:2029), pid=204231, tid=204244
#  assert(false) failed: Should have been buffered
#
# JRE version: Java(TM) SE Runtime Environment (21.0) (fastdebug build 21-lworld4ea-LTS-2023-02-06-0803323.tobias...)
# Java VM: Java HotSpot(TM) 64-Bit Server VM (fastdebug 21-lworld4ea-LTS-2023-02-06-0803323.tobias..., mixed mode, sharing, tiered, compressed oops, compressed class ptrs, g1 gc, linux-amd64)
# Problematic frame:
# V  [libjvm.so+0xb33bf1]  Compile::process_inline_types(PhaseIterGVN&, bool)+0x51

Current CompileTask:
C2:    194    2 %     4       MainClass::test @ 14 (37 bytes)

Stack: [0x00007f1486c00000,0x00007f1486d01000],  sp=0x00007f1486cfc0b0,  free space=1008k
Native frames: (J=compiled Java code, j=interpreted, Vv=VM code, C=native code)
V  [libjvm.so+0xb33bf1]  Compile::process_inline_types(PhaseIterGVN&, bool)+0x511  (compile.cpp:2029)
V  [libjvm.so+0xb51d69]  Compile::Optimize()+0x1919  (compile.cpp:2911)
V  [libjvm.so+0xb55559]  Compile::Compile(ciEnv*, ciMethod*, int, Options, DirectiveSet*)+0x1959  (compile.cpp:843)
V  [libjvm.so+0x947b0e]  C2Compiler::compile_method(ciEnv*, ciMethod*, int, bool, DirectiveSet*)+0x51e  (c2compiler.cpp:113)
V  [libjvm.so+0xb62b4c]  CompileBroker::invoke_compiler_on_method(CompileTask*)+0xa7c  (compileBroker.cpp:2237)
V  [libjvm.so+0xb63958]  CompileBroker::compiler_thread_loop()+0x608  (compileBroker.cpp:1916)
V  [libjvm.so+0x10d6c16]  JavaThread::thread_main_inner()+0x206  (javaThread.cpp:711)
V  [libjvm.so+0x1b262b0]  Thread::call_run()+0x100  (thread.cpp:224)
V  [libjvm.so+0x1797e53]  thread_native_entry(Thread*)+0x103  (os_linux.cpp:739)",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i31aoj:",9223372036854775807,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2023-04-27 08:47;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/valhalla/pull/844
Date: 2023-04-27 15:39:36 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
UTIL_REQUIRE_SPECIAL warning on grep,JDK-8306976,5099595,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,pxie,pxie,pxie,2023-04-26 23:53,2023-05-15 18:18,2023-10-01 09:56,2023-04-27 02:21,21,,,,,,21,infrastructure,,0,jdk11u-fix-request,jdk11u-fix-yes,jdk17u-fix-request,jdk17u-fix-yes,jdk20u-fix-request,jdk20u-fix-SQE-ok,jdk20u-fix-yes,tencent-interest,,,,,,"After JDK-8289735, there is a warning message in `bash configure`

The following warnings were produced. Repeated here for convenience:
WARNING: Ignoring value of GREP from the environment. Use command line variables instead.
",,,,,,,,,,,JDK-8308138,JDK-8307114,JDK-8307116,JDK-8307420,,,,,,,,,,,,,,,,,,,,,,JDK-8289735,,,,,,,,,,,,,,,,,,,,,linux,,,,,,"0|i31am3:",9223372036854775807,b21,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@429c566,,,,,,,,,"2023-04-27 00:08;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/13685
Date: 2023-04-27 07:00:05 +0000;;;","2023-04-27 02:21;dukebot;Changeset: ba436495
Author:    bobpengxie <bobpengxie@tencent.com>
Committer: Jie Fu <jiefu@openjdk.org>
Date:      2023-04-27 09:19:13 +0000
URL:       https://git.openjdk.org/jdk/commit/ba43649530f7fcf29c17d273cfc09c49f6c3a8b5
;;;","2023-04-27 03:01;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk20u/pull/63
Date: 2023-04-25 20:25:55 +0000;;;","2023-04-27 03:04;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/1298
Date: 2023-04-26 07:59:29 +0000;;;","2023-04-27 03:07;clanger;Fix request (20u, 17u, 11u):
This is a follow up of JDK-8289735 to fix a warning message that was introduced. I'd like to backport that inline.;;;","2023-04-27 03:08;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk11u-dev/pull/1851
Date: 2023-04-26 08:11:35 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
"(bf) CharBuffer.append(CharSequence,int,int) throws BufferOverflowException where IndexOutOfBoundsException expected",JDK-8306959,5099577,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,bpb,bpb,bpb,2023-04-26 15:33,2023-05-04 00:14,2023-10-01 09:56,2023-04-27 10:22,21,,,,,,21,core-libs,,0,,,,,,,,,,,,,,"CharBuffer.append(CharSequence csq, int start, int end) should throw an IndexOutOfBoundsException according to the specification of Appendable.append(CharSequence csq, int start, int end) which states the preconditions: 0 <= start <= end <= csq.length(). For example,

	CharBuffer.allocate(7).append(""12345678"", 4, 12);

should throw an IndexOutOfBoundsException.

Specifically, in the current code, a BufferOverflowException is thrown if end - start > cb.remaining() without first checking the validity of start and end, which clearly should precede the overflow check as otherwise the indexes are not known to be valid. Throwing an IndexOutOfBoundsException also matches the behavior in JDK 20.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8306623,JDK-8306374,JDK-8305811,,,,,,,,,,,,,,generic,,,,,,,21,,generic,,,,,,"0|i31ai3:",9223372036854775807,b21,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@674604a9,,,,,,,,,"2023-04-26 15:56;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/13680
Date: 2023-04-26 22:48:19 +0000;;;","2023-04-27 10:22;dukebot;Changeset: 80fae514
Author:    Brian Burkhalter <bpb@openjdk.org>
Date:      2023-04-27 17:20:08 +0000
URL:       https://git.openjdk.org/jdk/commit/80fae514b16bfe38ff29f71f8cdc6d4c3482ad3d
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Open source several JComboBox jtreg tests,JDK-8306955,5099573,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,prr,prr,prr,2023-04-26 14:41,2023-08-15 04:53,2023-10-01 09:56,2023-04-28 15:43,17,21,,,,,21,client-libs,,0,jdk11u-fix-request,jdk11u-fix-yes,jdk17u-fix-request,jdk17u-fix-yes,noreg-self,sn_142,test_sprint,testbug,,,,,,Open source several JComboBox jtreg tests,,,,,,,,,,,JDK-8308701,JDK-8307674,JDK-8314270,JDK-8307353,JDK-8307358,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i31ah7:",9223372036854775807,b21,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@568a5b31,,,,,,,,,"2023-04-28 14:31;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/13730
Date: 2023-04-28 21:23:26 +0000;;;","2023-04-28 16:42;dukebot;Changeset: 1f689241
Author:    Phil Race <prr@openjdk.org>
Date:      2023-04-28 22:42:11 +0000
URL:       https://git.openjdk.org/jdk/commit/1f689241cfcb4083cba283a2010b532948865283
;;;","2023-05-18 11:45;vrudomet;[Fix request 17u] 

Clean backport, new tests, low risk
Checked on macOS x64, linux x64, windows x64, tests pass;;;","2023-05-18 12:20;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/1363
Date: 2023-05-18 19:15:57 +0000;;;","2023-08-09 01:03;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk11u-dev/pull/2072
Date: 2023-08-09 07:56:48 +0000;;;","2023-08-11 00:44;andrewlu;Fix request [11u]

I backport this for parity with 11.0.21-oracle.
No risk, only a test change.
Clean backport.
Test passes. SAP nightly testing passed.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Open source five Focus related tests,JDK-8306954,5099571,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,kizune,kizune,kizune,2023-04-26 14:09,2023-08-15 04:51,2023-10-01 09:56,2023-04-29 11:21,,,,,,,21,client-libs,,0,jdk11u-fix-request,jdk11u-fix-yes,jdk17u-fix-request,jdk17u-fix-yes,noreg-self,sn_142,test_sprint,,,,,,,"Clean up, optimize and opensource five Focus related tests:
AsyncUpFocusCycleTest.java
ClearMostRecentFocusOwnerTest.java
ConsumedTabKeyTest.java,
EventRetargetTest.java
ExtraPropChangeNotifVetoingTest.java",,,,,,,,,,,JDK-8307905,JDK-8307906,JDK-8308063,JDK-8308623,JDK-8308699,JDK-8314267,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i31agr:",9223372036854775807,b21,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@5a9b3fd3,,,,,,,,,"2023-04-27 16:44;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/13707
Date: 2023-04-27 23:39:56 +0000;;;","2023-04-29 11:21;dukebot;Changeset: 6d6d00b6
Author:    Alexander Zuev <kizune@openjdk.org>
Date:      2023-04-29 18:19:11 +0000
URL:       https://git.openjdk.org/jdk/commit/6d6d00b69cea47ccbe05a844db0fb6c384045caa
;;;","2023-05-18 11:45;vrudomet;[Fix request 17u] 

Clean backport, new tests, low risk
Checked on macOS x64, linux x64, tests pass;;;","2023-05-18 11:57;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/1362
Date: 2023-05-18 18:51:08 +0000;;;","2023-08-09 00:40;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk11u-dev/pull/2071
Date: 2023-08-09 07:33:57 +0000;;;","2023-08-11 00:44;andrewlu;Fix request [11u]

I backport this for parity with 11.0.21-oracle.
No risk, only a test change.
Clean backport.
Test passes. SAP nightly testing passed.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
[REDO] JDK-8305252 make_method_handle_intrinsic may call java code under a lock,JDK-8306950,5099565,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,coleenp,coleenp,coleenp,2023-04-26 12:07,2023-05-04 03:29,2023-10-01 09:56,2023-04-28 08:16,21,,,,,,21,hotspot,,0,hashtable,,,,,,,,,,,,,"`SystemDictionary::find_method_handle_intrinsic` calls `Method::make_method_handle_intrinsic` under the `InvokeMethodTable_lock`  lock. The correctness is motivated with a comment:
```
    // This function could get an OOM but it is safe to call inside of a lock because
    // throwing OutOfMemoryError doesn't call Java code.
```

However `Method::make_adapters` will throw a `VirtualMachineError` via 
`THROW_MSG_NULL(vmSymbols::java_lang_VirtualMachineError(), ""Out of space in CodeCache for adapters"");` which will call java code.

Fastdebug linux x86_64 stack trace:
```
V  [libjvm.so+0x10a4ab0]  JavaCallWrapper::JavaCallWrapper(methodHandle const&, Handle, JavaValue*, JavaThread*)+0xa0  (javaCalls.cpp:60)
V  [libjvm.so+0x10a6764]  JavaCalls::call_helper(JavaValue*, methodHandle const&, JavaCallArguments*, JavaThread*)+0x1a4  (javaCalls.cpp:394)
V  [libjvm.so+0x10a8a07]  JavaCalls::call_special(JavaValue*, Klass*, Symbol*, Symbol*, JavaCallArguments*, JavaThread*)+0x317  (javaCalls.cpp:329)
V  [libjvm.so+0x10a92f9]  JavaCalls::construct_new_instance(InstanceKlass*, Symbol*, JavaCallArguments*, JavaThread*)+0xf9  (javaCalls.cpp:295)
V  [libjvm.so+0xd71dca]  Exceptions::new_exception(JavaThread*, Symbol*, Symbol*, JavaCallArguments*, Handle, Handle)+0x22a  (exceptions.cpp:285)
V  [libjvm.so+0xd72022]  Exceptions::new_exception(JavaThread*, Symbol*, Symbol*, JavaCallArguments*, Handle, Handle, Handle)+0x62  (exceptions.cpp:306)
V  [libjvm.so+0xd72df4]  Exceptions::new_exception(JavaThread*, Symbol*, char const*, Handle, Handle, Handle, Exceptions::ExceptionMsgToUtf8Mode)+0x604  (exceptions.cpp:389)
V  [libjvm.so+0xd76e68]  Exceptions::_throw_msg(JavaThread*, char const*, int, Symbol*, char const*, Handle, Handle)+0x198  (exceptions.cpp:193)
V  [libjvm.so+0xd7718e]  Exceptions::_throw_msg(JavaThread*, char const*, int, Symbol*, char const*)+0x1ee  (exceptions.cpp:232)
V  [libjvm.so+0x167cb19]  Method::make_adapters(methodHandle const&, JavaThread*)+0x129  (method.cpp:1258)
V  [libjvm.so+0x167cc3b]  Method::link_method(methodHandle const&, JavaThread*)+0x11b  (method.cpp:1234)
V  [libjvm.so+0x16839fd]  Method::make_method_handle_intrinsic(vmIntrinsicID, Symbol*, JavaThread*)+0x73d  (method.cpp:1484)
V  [libjvm.so+0x1a983ed]  SystemDictionary::find_method_handle_intrinsic(vmIntrinsicID, Symbol*, JavaThread*)+0x19d  (systemDictionary.cpp:1963)
```",,,,,,,,,,,,,,,,,,,,,,,,,JDK-8305252,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i31aff:",9223372036854775807,b21,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,,,"2023-04-26 16:30;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/13681
Date: 2023-04-26 23:24:15 +0000;;;","2023-04-28 08:16;dukebot;Changeset: cf799ba2
Author:    Coleen Phillimore <coleenp@openjdk.org>
Date:      2023-04-28 15:14:30 +0000
URL:       https://git.openjdk.org/jdk/commit/cf799ba232dcacd1d91a7dab4dc4bf8de9ac258e
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Resolve miscellaneous multiple symbol definition issues when statically linking JDK/VM natives with standard launcher,JDK-8306949,5099564,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,jiangli,jiangli,jiangli,2023-04-26 11:43,2023-05-04 00:14,2023-10-01 09:56,2023-04-27 08:59,,,,,,,21,core-libs,,0,,,,,,,,,,,,,,"This bug is to resolve the remaining miscellaneous symbol collisions
when statically linking JDK/VM natives with the standard Java launcher binary (see JDK-8303796 for more details). The symbols include:

- debug
- findFunction
- jvm (if it's desirable to statically linking with libawt_xawt, was not addressed in JDK-8305761)

E.g.

/usr/bin/ld: /.../build/linux-x86_64-server-slowdebug/images/static-libs/lib/libj2pkcs11.a(j2secmod_md.o): in function `findFunction':
/.../src/jdk.crypto.cryptoki/unix/native/libj2pkcs11/j2secmod_md.c:37: multiple definition of `findFunction'; /.../build/linux-x86_64-server-slowdebug/images/static-libs/lib/libj2pcsc.a(pcsc_md.o):/.../src/java.smartcardio/unix/native/libj2pcsc/pcsc_md.c:78: first defined here
/usr/bin/ld: /.../build/linux-x86_64-server-slowdebug/hotspot/variant-server/libjvm/objs/static/libjvm.a(debug.o): in function `debug':
/.../src/hotspot/share/utilities/debug.cpp:486: multiple definition of `debug'; /.../build/linux-x86_64-server-slowdebug/images/static-libs/lib/libj2pkcs11.a(p11_general.o):/.../src/jdk.crypto.cryptoki/share/native/libj2pkcs11/p11_general.c:78: first defined here
...
/usr/bin/ld: /.../build/linux-x86_64-server-slowdebug/images/static-libs/lib/libawt_xawt.a(XlibWrapper.o):/.../src/java.desktop/unix/native/libawt_xawt/xawt/XlibWrapper.c:1328: multiple definition of `jvm'; /.../build/linux-x86_64-server-slowdebug/images/static-libs/lib/libawt.a(awt_LoadLibrary.o):/.../src/java.desktop/unix/native/libawt/awt/awt_LoadLibrary.c:52: first defined here
collect2: error: ld returned 1 exit status
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8303796,,,,,,,,,,,,generic,,,,,,,,,generic,,,,,,"0|i31af7:",9223372036854775807,b21,,,,,,,,,,,"2023-04-26 13:23;jiangli;With the fix for this bug and makefile changes for JDK-8303796, it will allow building a fully statically linked Java launcher binary (not yet runnable, additional runtime fixes/changes are needed to make it runnable). That would provide a basic layer for building Java/JDK static image.

Statically linking with application natives and dependencies will introduce additional complexities and symbol issues. It's probably a good idea to handle those separately after we get the basic JDK static image runnable.;;;","2023-04-26 17:05;jiangli;https://github.com/jianglizhou/jdk/pull/new/JDK-8306949 is the fix. It use the same approaches adopted by earlier fixes for static linking related symbol problems (e.g. JDK-8306033).

The debug() in src/hotspot/share/utilities/debug.cpp and related code is unchanged for now. The renaming from 'debug' to 'debug_j2pkcs11' in libj2pkcs11 code resolves the following related linker error. We haven't observed any related issue with more complex cases in our experiments/testing (building a complete static image with statically linking the launcher with JDK/VM natives, application natives and dependencies), with the similar fix (with debug() in debug.cpp unchanged) in our prototype. 

/usr/bin/ld: /.../build/linux-x86_64-server-slowdebug/hotspot/variant-server/libjvm/objs/static/libjvm.a(debug.o): in function `debug':
/.../src/hotspot/share/utilities/debug.cpp:486: multiple definition of `debug'; /.../build/linux-x86_64-server-slowdebug/images/static-libs/lib/libj2pkcs11.a(p11_general.o):/.../src/jdk.crypto.cryptoki/share/native/libj2pkcs11/p11_general.c:78: first defined here;;;","2023-04-26 17:19;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/13682
Date: 2023-04-27 00:12:58 +0000;;;","2023-04-27 08:59;dukebot;Changeset: fed262a9
Author:    Jiangli Zhou <jiangli@openjdk.org>
Date:      2023-04-27 15:57:51 +0000
URL:       https://git.openjdk.org/jdk/commit/fed262a9cf324ce7f2c61f4471c88bc84af8e3d0
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
"jdk/test/lib/process/ProcessToolsStartProcessTest.java fails with ""wrong number of lines in OutputAnalyzer output""",JDK-8306946,5099559,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,lmesnik,dcubed,dcubed,2023-04-26 09:51,2023-05-10 23:49,2023-10-01 09:56,2023-05-03 18:15,21,,,,,,21,hotspot,,0,intermittent,tier1,,,,,,,,,,,,"The following test failed in the JDK21 CI:

jdk/test/lib/process/ProcessToolsStartProcessTest.java

Here's a snippet from the log file:

FAILED: wrong number of lines in OutputAnalyzer output
DEBUG: OutputAnalyzer output: got 12 lines, expected 50. Output follows:
A line on stdout 0
A line on stdout 1
A line on stdout 2
A line on stdout 3
A line on stdout 4
A line on stdout 5
A line on stdout 6
A line on stdout 7
A line on stdout 8
A line on stdout 9
A line on stdout 10
A line on stdout 11
DEBUG: done with OutputAnalyzer stdout.
Test ERROR
----------System.err:(16/1058)----------
java.lang.RuntimeException: One or more tests failed. See output for details.
	at ProcessToolsStartProcessTest.main(ProcessToolsStartProcessTest.java:109)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
	at java.base/java.lang.reflect.Method.invoke(Method.java:578)
	at com.sun.javatest.regtest.agent.MainActionHelper$AgentVMRunnable.run(MainActionHelper.java:333)
	at java.base/java.lang.Thread.run(Thread.java:1592)
java.lang.RuntimeException: One or more tests failed. See output for details.
	at ProcessToolsStartProcessTest.main(ProcessToolsStartProcessTest.java:109)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
	at java.base/java.lang.reflect.Method.invoke(Method.java:578)
	at com.sun.javatest.regtest.agent.MainActionHelper$AgentVMRunnable.run(MainActionHelper.java:333)
	at java.base/java.lang.Thread.run(Thread.java:1592)

JavaTest Message: Test threw exception: java.lang.RuntimeException
JavaTest Message: shutting down test

result: Failed. Execution failed: `main' threw exception: java.lang.RuntimeException: One or more tests failed. See output for details.

This is a new test that came with the fix for:

JDK-8233725 ProcessTools.startProcess() has output issues when using an OutputAnalyzer at the same time",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8233725,,,,,,,,,,,,aarch64,x86_64,,,,,,,,linux,windows,,,,,"0|i31ae3:",9223372036854775807,b22,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@78d03d9a,,,,,,,,,"2023-04-26 09:52;dcubed;[~lmesnik] - Please take a look at this failure in the new test.;;;","2023-04-26 18:12;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/13683
Date: 2023-04-27 01:06:23 +0000;;;","2023-05-03 18:15;dukebot;Changeset: 64ac9a05
Author:    Leonid Mesnik <lmesnik@openjdk.org>
Date:      2023-05-04 01:10:54 +0000
URL:       https://git.openjdk.org/jdk/commit/64ac9a05e85020d24e33ba55cffa1bd9b269218a
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Open source several dnd AWT tests,JDK-8306943,5099549,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,azvegint,azvegint,azvegint,2023-04-26 09:12,2023-08-28 21:46,2023-10-01 09:56,2023-05-04 08:41,,,,,,,21,client-libs,,0,jdk17u-fix-request,jdk17u-fix-yes,sn_142,test_sprint,,,,,,,,,,"java/awt/dnd/DnDAWTLockTest/DnDAWTLockTest.java
java/awt/dnd/DragGestureInvokeLaterTest/DragGestureInvokeLaterTest.java
java/awt/dnd/DragOverDropTargetPerformanceTest/DragOverDropTargetPerformanceTest.java
java/awt/dnd/DragSourceDragEventModifiersTest/DragSourceDragEventModifiersTest.java
java/awt/dnd/DragSourceGCrashTest/DragSourceGCrashTest.java",,,,,,,,,,,JDK-8314084,JDK-8315175,JDK-8314747,JDK-8308322,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i31abv:",9223372036854775807,b22,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@5a9b3fd3,,,,,,,,,"2023-05-02 04:07;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/13752
Date: 2023-05-02 11:01:22 +0000;;;","2023-05-04 08:41;dukebot;Changeset: 2adb3b40
Author:    Alexander Zvegintsev <azvegint@openjdk.org>
Date:      2023-05-04 15:39:08 +0000
URL:       https://git.openjdk.org/jdk/commit/2adb3b409e8cc87685a4379be3f7beeb53706e2e
;;;","2023-05-15 15:33;vrudomet;[Fix request 17u]

Clean backport, new tests
Checked on macOS x64, linux x64;;;","2023-05-16 16:22;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/1351
Date: 2023-05-16 23:17:00 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Open source several datatransfer and dnd AWT tests,JDK-8306941,5099547,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,azvegint,azvegint,azvegint,2023-04-26 08:51,2023-05-17 12:42,2023-10-01 09:56,2023-05-05 19:18,,,,,,,21,client-libs,,0,jdk17u-fix-request,jdk17u-fix-yes,sn_142,test_sprint,,,,,,,,,,"java/awt/datatransfer/MimeFormatsTest/MimeFormatsTest.java
java/awt/datatransfer/RemoveFlavorListenerTest/RemoveFlavorListenerTest.java
java/awt/dnd/AutoscrollStopTest/AutoscrollStopTest.java
java/awt/dnd/ButtonReleaseTest/ButtonReleaseTest.java
",,,,,,,,,,,JDK-8308319,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i31abf:",9223372036854775807,b22,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@5a9b3fd3,,,,,,,,,"2023-05-05 10:00;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/13836
Date: 2023-05-05 16:54:20 +0000;;;","2023-05-05 19:18;dukebot;Changeset: 3d3eaed9
Author:    Alexander Zvegintsev <azvegint@openjdk.org>
Date:      2023-05-06 02:16:32 +0000
URL:       https://git.openjdk.org/jdk/commit/3d3eaed9133dbe728ca8e00a626d33f7e35ba9ff
;;;","2023-05-15 15:33;vrudomet;[Fix request 17u]

Clean backport, new tests, low risk
Checked on macos, linux x64, all passed;;;","2023-05-16 16:48;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/1355
Date: 2023-05-16 23:39:02 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
test/jdk/java/net/httpclient/XxxxInURI.java should call HttpClient::close,JDK-8306940,5099546,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,dfuchs,dfuchs,dfuchs,2023-04-26 08:47,2023-05-03 23:34,2023-10-01 09:56,2023-04-27 01:27,21,,,,,,21,core-libs,,0,httpclient,noreg-self,,,,,,,,,,,,The tests test/jdk/java/net/httpclient/*InURI.java create a lot of HttpClient instances. They should call HttpClient::close when the client is no longer needed.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i31ab7:",9223372036854775807,b21,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@446e124a,,,,,,,,,"2023-04-26 09:01;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/13673
Date: 2023-04-26 15:51:27 +0000;;;","2023-04-27 01:27;dukebot;Changeset: 41d58533
Author:    Daniel Fuchs <dfuchs@openjdk.org>
Date:      2023-04-27 08:25:40 +0000
URL:       https://git.openjdk.org/jdk/commit/41d58533aca29d439db264540e85c4fa165f19f6
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
"C2: ""assert(false) failed: infinite loop"" failure",JDK-8306933,5099539,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,roland,roland,roland,2023-04-26 08:15,2023-07-10 00:12,2023-10-01 09:56,2023-05-03 04:17,21,,,,,,21,hotspot,,0,c2,oracle-triage-11,oracle-triage-17,oracle-triage-21,regression,,,,,,,,,"I'm seeing that assert added by JDK-8303951
I'll provide a test case with the PR.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8303951,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i31a9n:",9223372036854775807,b21,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2023-04-26 08:44;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/13672
Date: 2023-04-26 15:36:13 +0000;;;","2023-04-27 04:07;chagedorn;ILW = Infinite loop assert that is harmless in product, single test case, disable compilation of affected method = MLM = P4;;;","2023-05-03 04:17;dukebot;Changeset: ccf91f88
Author:    Roland Westrelin <roland@openjdk.org>
Date:      2023-05-03 11:14:53 +0000
URL:       https://git.openjdk.org/jdk/commit/ccf91f881c06308f39740751161111946487abf1
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Incorrect assert in BitMap::count_one_bits,JDK-8306930,5099535,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,fbredberg,kbarrett,kbarrett,2023-04-26 07:35,2023-05-16 16:11,2023-10-01 09:56,2023-05-10 00:57,21,,,,,,21,hotspot,,0,starter,utils,,,,,,,,,,,,"BitMap::count_one_bits has this post-condition assert:

assert(sum <= (beg - end), ""must be"");

That should be ""(end - beg)"".
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i31a8r:",9223372036854775807,b22,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,,,"2023-05-09 08:47;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/13887
Date: 2023-05-09 13:50:13 +0000;;;","2023-05-10 00:57;dukebot;Changeset: d993432d
Author:    Fredrik Bredberg <fredrik.bredberg@oracle.com>
Committer: Stefan Karlsson <stefank@openjdk.org>
Date:      2023-05-10 07:55:11 +0000
URL:       https://git.openjdk.org/jdk/commit/d993432d448d5f25c49640a8c22a6a95b5055fe4
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
"Collator treats ""v"" and ""w"" as the same letter for Swedish language locale.",JDK-8306927,5098712,Bug,Closed,JDK,JDK,software,duke,,,P4,Fixed,naoto,webbuggrp,webbuggrp,2023-04-18 03:44,2023-07-21 07:36,2023-10-01 09:56,2023-04-27 11:14,11,17,20,21,8,,21,core-libs,,0,dcsaw,release-note=yes,reproducer-yes,webbug,,,,,,,,,,"A DESCRIPTION OF THE PROBLEM :
Sorting rule was changed in 2006 but the JDK has not been updated.
From https://en.wikipedia.org/wiki/Swedish_alphabet : ""The two letters were often combined in the collating sequence as if they were all V or all W, until 2006 when the 13th edition of Svenska Akademiens ordlista (The Swedish Academy's Orthographic Dictionary) declared a change. W was given its own section in the dictionary, and the W = V sorting rule was deprecated.""

STEPS TO FOLLOW TO REPRODUCE THE PROBLEM :
Run code provided.

EXPECTED VERSUS ACTUAL BEHAVIOR :
EXPECTED -
List sorted in correct order: va, vc, wb.
ACTUAL -
List sorted in incorrect order: va, wb, vc.

---------- BEGIN SOURCE ----------
import java.text.Collator;
import java.util.Arrays;
import java.util.Locale;

public class Main {
    public static void main(String[] args) {
        var list = Arrays.asList(""wb"", ""va"", ""vc"");
        list.sort(Collator.getInstance(new Locale(""sv"", ""SE"")));
        System.out.println(""Sorted: "" + list); // Incorrect order: va, wb, vc. It should be: va, vc, wb.
    }
}
---------- END SOURCE ----------

FREQUENCY : always


",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8307547,,,,,"2023-04-26 07:04;tongwan;Main.java;https://bugs.openjdk.org/secure/attachment/103619/Main.java",,,,,,,generic,,,,,,,,,generic,,,,,,"0|i315lf:",9223372036854775807,b21,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6fc9e792,,,,,,,Verified,,"2023-04-26 07:06;tongwan;The observations on Windows 10:
JDK 8: Failed,  va, wb, vc returned.
JDK 11: Failed.
JDK 17: Failed.
JDK 20: Failed.
JDK 21ea+5: Failed.;;;","2023-04-26 10:46;naoto;Looks reasonable.
CLDR provides three collations for Swedish, ""search"", ""standard"" and ""traditional"" in which ""traditional"" implies the old behavior, but the default is ""standard"" which provides the collation mentioned above. (https://www.unicode.org/cldr/charts/42/collation/sv.html);;;","2023-04-26 13:49;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/13677
Date: 2023-04-26 20:42:01 +0000;;;","2023-04-27 11:14;dukebot;Changeset: 6983d05b
Author:    Naoto Sato <naoto@openjdk.org>
Date:      2023-04-27 18:12:41 +0000
URL:       https://git.openjdk.org/jdk/commit/6983d05b73258f11dcb35bc3961b724ba58d9667
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Cipher Suite Preference section of JSSE guide should be updated to use server's cipher suite preference ,JDK-8306926,5099532,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,rgallard,mullan,mullan,2023-04-26 06:43,2023-05-23 14:19,2023-10-01 09:56,2023-05-23 14:19,17,20,21,,,,21,docs,,0,securitydocs,,,,,,,,,,,,,"In JDK 13, the cipher suite selection was changed to honor the server's cipher suite preference by default, see https://bugs.openjdk.org/browse/JDK-816826.

However, the JSSE guide was not updated and still says the client's preference is used. This section needs to be updated: https://docs.oracle.com/en/java/javase/20/security/java-secure-socket-extension-jsse-reference-guide.html#GUID-EFC2FACC-680C-42CE-A3A9-E9A6673EA813

I suggest changing the last two sentences to:

""The selection honors the server's preference by default, which is the most secure setting. However, the server can choose to honor the client's preference rather than its own preference, by invoking the method SSLParameters.setUseCipherSuitesOrder(false).""",,,,,,,,,,,JDK-8307963,JDK-8307964,,,,,,,,,,,,,,,,,,,,JDK-8168261,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i31a83:",9223372036854775807,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4eba8c33,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
IR verification fails because IR dump is chopped up,JDK-8306922,5099529,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,epeter,thartmann,thartmann,2023-04-26 06:17,2023-07-12 13:29,2023-10-01 09:56,2023-06-25 23:13,17,21,,,,,22,hotspot,,0,intermittent,ir-framework,oracle-triage-11,oracle-triage-17,oracle-triage-21,tier3,,,,,,,,"Compilation of Failed Method
----------------------------
1) Compilation of ""public long compiler.c2.irTests.DivLNodeIdealizationTests.retainDenominator(long,long)"":
> Phase ""PrintIdeal"":
AFTER: print_ideal
  0  Root  === 0 40 42  [[ 0 1 3 27 35 ]] inner 
  1  Con  === 0  [[ ]]  #top
  3  Start  === 3 0  [[ 3 5 6 7 8 9 13 11 ]]  #{0:control, 1:abIO, 2:memory, 3:rawptr:BotPTR, 4:return_address, 5:compiler/c2/irTests/DivLNodeIdealizationTests:NotNull *, 6:long, 7:half, 8:long, 9:half}
  5  Parm  === 3  [[ 32 ]] Control !jvms: DivLNodeIdealizationTests::retainDenominator @ bci:-1 (line 130)
  6  Parm  === 3  [[ 42 36 ]] I_O !jvms: DivLNodeIdealizationTests::retainDenominator @ bci:-1 (line 130)
  7  Parm  === 3  [[ 42 36 ]] Memory  Memory: @BotPTR *+bot, idx=Bot; !jvms: DivLNodeIdealizationTests::retainDenominator @ bci:-1 (line 130)
  8  Parm  === 3  [[ 42 40 36 ]] FramePtr !jvms: DivLNodeIdealizationTests::retainDenominator @ bci:-1 (line 130)
  9  Parm  === 3  [[ 42 36 ]] ReturnAdr !jvms: DivLNodeIdealizationTests::retainDenominator @ bci:-1 (line 130)
 11  Parm  === 3  [[ 26 ]] Parm1: long !jvms: DivLNodeIdealizationTests::retainDenominator @ bci:-1 (line 130)
 13  Parm  === 3  [[ 41 26 28 ]] Parm3: long !jvms: DivLNodeIdealizationTests::retainDenominator @ bci:-1 (line 130)
 26  MulL  === _ 11 13  [[ 41 36 ]]  !jvms: DivLNodeIdealizationTests::retainDenominator @ bci:2 (line 130)
 27  ConL  === 0  [[ 28 36 ]]  #long:0
 28  CmpL  === _ 13 27  [[ 29 ]]  !jvms: DivLNodeIdealizationTests::retainDenominator @ bci:4 (line 130)
 29  Bool  === _ 28  [[ 32 ]] [ne] !jvms: DivLNodeIdealizationTests::retainDenominator @ bci:4 (line 130)
 32  If  === 5 29  [[ 33 34 ]] P=0.999999, C=-1.000000 !jvms: DivLNodeIdealizationTests::retainDenominator @ bci:4 (line 130)
 33  IfTrue  === 32  [[ 42 41 ]] #1 !jvms: DivLNodeIdealizationTests::retainDenominator @ bci:4 (line 130)
 34  IfFalse  === 32  [[ 36 ]] #0 !jvms: DivLNodeIdealizationTests::retainDenominator @ bci:4 (line 130)
 35  ConI  === 0  [[ 36 ]]  #int:-122
 36  CallStaticJava  === 34 
6
 
7 8 9 (35 1 1 1 1 1 26 1 27 1 ) [[ 37 ]] # Static uncommon_trap(reason='div0_check' action='maybe_recompile' debug_id='0')  void ( int ) C=0.000100 DivLNodeIdealizationTests::retainDenominator @ bci:4 (line 130) !jvms: DivLNodeIdealizationTests::retainDenominator @ bci:4 (line 130)
 37  Proj  === 
36  [[ 40 ]] #0 !jvms: DivLNodeIdealizationTests::retainDenominator @ bci:4 (line 130)
 
40
  Halt  === 37 1 1 8 1  [[ 0 ]]  !jvms: DivLNodeIdealizationTests::retainDenominator @ bci:4 (line 130)
 41  DivL  === 33 26 13  [[ 42 ]]  !jvms: DivLNodeIdealizationTests::retainDenominator @ bci:4 (line 130)
 42  Return  === 
33 6 7 8 9
 returns 41  [[ 0 ]] 

----------System.err:(45/5524)*----------

Command Line:
/System/Volumes/Data/mesos/work_dir/jib-master/install/jdk-21+20-1665/macosx-x64-debug.jdk/jdk-21/fastdebug/bin/java -DReproduce=true -cp /System/Volumes/Data/mesos/work_dir/slaves/741e9afd-8c02-45c3-b2e2-9db1450d0832-S42045/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/be2e90e5-fd60-4256-aeb3-bcd1754a68f6/runs/94c485b0-3e3b-40ca-bbeb-4ea77de014a5/testoutput/test-support/jtreg_open_test_hotspot_jtreg_tier1_compiler_1/classes/0/compiler/c2/irTests/DivLNodeIdealizationTests.d:/System/Volumes/Data/mesos/work_dir/jib-master/install/jdk-21+20-1665/src.full/open/test/hotspot/jtreg/compiler/c2/irTests:/System/Volumes/Data/mesos/work_dir/slaves/741e9afd-8c02-45c3-b2e2-9db1450d0832-S42045/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/be2e90e5-fd60-4256-aeb3-bcd1754a68f6/runs/94c485b0-3e3b-40ca-bbeb-4ea77de014a5/testoutput/test-support/jtreg_open_test_hotspot_jtreg_tier1_compiler_1/classes/0/test/lib:/System/Volumes/Data/mesos/work_dir/slaves/741e9afd-8c02-45c3-b2e2-9db1450d0832-S42045/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/be2e90e5-fd60-4256-aeb3-bcd1754a68f6/runs/94c485b0-3e3b-40ca-bbeb-4ea77de014a5/testoutput/test-support/jtreg_open_test_hotspot_jtreg_tier1_compiler_1/classes/0:/System/Volumes/Data/mesos/work_dir/jib-master/install/jtreg/7.2/1/bundles/jtreg-7.2+1.zip/jtreg/lib/jtreg.jar:/System/Volumes/Data/mesos/work_dir/jib-master/install/jtreg/7.2/1/bundles/jtreg-7.2+1.zip/jtreg/lib/junit-platform-console-standalone-1.9.2.jar:/System/Volumes/Data/mesos/work_dir/jib-master/install/jtreg/7.2/1/bundles/jtreg-7.2+1.zip/jtreg/lib/testng-7.3.0.jar:/System/Volumes/Data/mesos/work_dir/jib-master/install/jtreg/7.2/1/bundles/jtreg-7.2+1.zip/jtreg/lib/jcommander-1.78.jar:/System/Volumes/Data/mesos/work_dir/jib-master/install/jtreg/7.2/1/bundles/jtreg-7.2+1.zip/jtreg/lib/guice-4.2.3.jar -Djava.library.path=/System/Volumes/Data/mesos/work_dir/jib-master/install/jdk-21+20-1665/macosx-x64-debug.test/hotspot/jtreg/native -Xbootclasspath/a:. -XX:+UnlockDiagnosticVMOptions -XX:+WhiteBoxAPI -XX:MaxRAMPercentage=12.5 -Dtest.boot.jdk=/System/Volumes/Data/mesos/work_dir/jib-master/install/jdk/20/36/bundles/macos-x64/jdk-20_macos-x64_bin.tar.gz/jdk-20.jdk/Contents/Home -Djava.io.tmpdir=/System/Volumes/Data/mesos/work_dir/slaves/741e9afd-8c02-45c3-b2e2-9db1450d0832-S42045/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/be2e90e5-fd60-4256-aeb3-bcd1754a68f6/runs/94c485b0-3e3b-40ca-bbeb-4ea77de014a5/testoutput/test-support/jtreg_open_test_hotspot_jtreg_tier1_compiler_1/tmp -XX:+CreateCoredumpOnCrash -ea -esa -XX:+UnlockExperimentalVMOptions -server -XX:-TieredCompilation -Dir.framework.server.port=55927 -XX:+PrintCompilation -XX:+UnlockDiagnosticVMOptions -XX:+LogCompilation -XX:CompilerDirectivesFile=test-vm-compile-commands-pid-99155.log -XX:CompilerDirectivesLimit=101 -XX:-OmitStackTraceInFastThrow -DShouldDoIRVerification=true -XX:-BackgroundCompilation -XX:CompileCommand=quiet compiler.lib.ir_framework.test.TestVM compiler.c2.irTests.DivLNodeIdealizationTests

One or more @IR rules failed:

Failed IR Rules (1) of Methods (1)
----------------------------------
1) Method ""public long compiler.c2.irTests.DivLNodeIdealizationTests.retainDenominator(long,long)"" - [Failed IR rules: 1]:
   * @IR rule 1: ""@compiler.lib.ir_framework.IR(phase={DEFAULT}, applyIfCPUFeatureAnd={}, applyIf={}, applyIfCPUFeatureOr={}, applyIfCPUFeature={}, counts={""_#MUL_L#_"", ""1"", ""_#DIV_L#_"", ""1"", ""_#DIV_BY_ZERO_TRAP#_"", ""1""}, failOn={}, applyIfAnd={}, applyIfOr={}, applyIfNot={})""
     > Phase ""PrintIdeal"":
       - counts: Graph contains wrong number of nodes:
         * Constraint 3: ""(\\d+(\\s){2}(CallStaticJava.*)+(\\s){2}===.*uncommon_trap.*div0_check)""
           - Failed comparison: [found] 0 = 1 [given]
           - No nodes matched!

>>> Check stdout for compilation output of the failed methods",,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8308760,,,,JDK-8306302,,,,JDK-8267265,JDK-8300273,JDK-8310711,,,,,,,,,,,,,,,,,,,,,,,,,"0|i31a7f:",9223372036854775807,b04,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2023-04-26 06:25;thartmann;Looks like an IR framework issue.;;;","2023-04-26 06:25;chagedorn;Most likely related to JDK-8300273 as we are seeing <!-- safepoint while printing --> in the hotspot_pid file. ;;;","2023-04-26 06:26;chagedorn;ILW = IR test failure due to safepoint while printing, rare, no workaround = MLH = P4;;;","2023-06-21 05:40;epeter;[~chagedorn] and I discussed this. I will fix it. It currently blocks some of my work.

Approach: dump_bfs can go to an arbitrary stream. By default tty. But for the ideal printing we can first go to a stringStream, and buffer the output that way. And then we can print this stream at once to tty.;;;","2023-06-23 00:27;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/14591
Date: 2023-06-21 14:43:18 +0000;;;","2023-06-25 23:13;dukebot;Changeset: 9057b350
Author:    Emanuel Peter <epeter@openjdk.org>
Date:      2023-06-26 06:11:32 +0000
URL:       https://git.openjdk.org/jdk/commit/9057b3503349ead7d995b1a705317324830eabb2
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
WebView: Update Public Suffix List to 88467c9,JDK-8306918,5099525,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,hmeda,kcr,kcr,2023-04-26 05:19,2023-07-12 14:05,2023-10-01 09:56,2023-05-03 22:21,8-pool,,,,,,8u391,javafx,,0,11-na,3rdparty,sn_143,,,,,,,,,,,"The public suffix has been updated to version 88467c9 in JDK 21. See JDK-8277734.

After this is integrated, we need to copy the public suffix file from a promoted build of JDK 21, along with the updated public_suffix.md file (if there is an update) to FX 8.

Note that for JavaFX 11 and later, we use the public suffix list directly from the JDK, so this bug is only for FX in JDK 8.",,,,,,,,,,,,,,,,,,,JDK-8302182,,JDK-8215088,,,,,,,,,,,,,,,JDK-8277734,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i31a6j:",9223372036854775807,b01,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@5a8b92bd,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Thread stacksize is reported with wrong units in os::create_thread logging,JDK-8306883,5099488,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,stuefe,dholmes,dholmes,2023-04-25 19:16,2023-09-29 03:22,2023-10-01 09:56,2023-04-26 21:58,17.0.7,20,,,,,21,hotspot,,0,jdk11u-fix-request,jdk17u-fix-request,jdk17u-fix-yes,jdk20u-fix-request,jdk20u-fix-SQE-ok,jdk20u-fix-yes,logging,redhat-interest,threads,,,,,"JDK-8290067 added logging when the thread is  created:

   log_info(os, thread)(""Thread attached (tid: "" UINTX_FORMAT "", pthread id: "" UINTX_FORMAT
                        "", stack: "" PTR_FORMAT "" - "" PTR_FORMAT "" ("" SIZE_FORMAT ""k) )."",
                        os::current_thread_id(), (uintx) pthread_self(),
                       p2i(thread->stack_base()), p2i(thread->stack_end()), thread->stack_size());

but the stack size is reported as being in ""K"" when thread->stack_size() is actually in bytes.",,,,,,,,,,,JDK-8307109,JDK-8309312,JDK-8309450,JDK-8308129,JDK-8307209,,,,,,,,,,,,,,,,,JDK-8290067,,,,,,,,,,,,,,,,,,,,,,b09,20,,,,,,,,"0|i319yb:",9223372036854775807,b21,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,,,"2023-04-25 19:17;dholmes;Assigned to [~stuefe] for his attention. Thomas please re-assign if you don't have time to pick this up.;;;","2023-04-25 23:01;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/13665
Date: 2023-04-26 05:54:18 +0000;;;","2023-04-26 21:58;dukebot;Changeset: 27c5c107
Author:    Thomas Stuefe <stuefe@openjdk.org>
Date:      2023-04-27 04:57:29 +0000
URL:       https://git.openjdk.org/jdk/commit/27c5c1070ac559caa8dbad598337046f59355464
;;;","2023-04-27 03:03;stuefe;Fix Request (17u)

I'd like to backport this trivial fix. The log output is confusingly wrong and the risk is minimal. Patch applies cleanly. GHAs green.;;;","2023-04-27 03:06;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/1304
Date: 2023-04-27 06:01:35 +0000;;;","2023-04-28 00:59;stuefe;Fix Request (20u)

I'd like to backport this trivial fix. The log output is confusingly wrong and the risk is minimal. Patch applies cleanly. GHAs green. ;;;","2023-04-28 03:07;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk20u/pull/66
Date: 2023-04-27 06:02:11 +0000;;;","2023-09-28 07:31;goetz;Fix request [11u]

I backport this as follow up of JDK-8390067.
Low risk, trivial change of logging code.
Clean backport. SAP nightly testing passed.
;;;","2023-09-28 07:37;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk11u-dev/pull/2154
Date: 2023-09-28 14:30:25 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
"(fs) Path.toRealPath(LinkOption.NOFOLLOW_LINKS) fails when ""../../"" follows a link",JDK-8306882,5099301,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,bpb,webbuggrp,webbuggrp,2023-04-24 12:40,2023-09-12 11:20,2023-10-01 09:56,2023-08-31 14:16,11,17,20,21,,,22,core-libs,,0,additional-information-not-received,dcsaw,reproducer-yes,webbug,,,,,,,,,,"A DESCRIPTION OF THE PROBLEM :
The function Path.toRealPath(LinkOption... options) when called with LinkOption.NOFOLLOW_LINKS contain logic that does not eliminate "".."" where the previous element is a link.
That logic fails to work when a link is followed by ""../.."".

STEPS TO FOLLOW TO REPRODUCE THE PROBLEM :
Create a symbolic link ""/path/to/link"" that point to ""/absolute/path/to/target""
Create a file ""/absolute/path/some_file.txt""
Create a Path object ""/path/to/link/../../some_file.txt""
Call the function toRealPath(LinkOption.NOFOLLOW_LINKS), the result will be a non-exiting path ""/path/to/some_file.txt"" instead of ""/path/to/link/../../some_file.txt"".


FREQUENCY : always


",,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8314245,,,,,,,,,,JDK-8315241,JDK-8314245,JDK-8315273,JDK-8315274,,"2023-04-25 18:16;tongwan;Main.java;https://bugs.openjdk.org/secure/attachment/103609/Main.java",,,,,,,generic,,,,,,,,,linux,os_x,,,,,"0|i3198b:",9223372036854775807,b14,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@674604a9,,,,,,,,,"2023-04-24 22:39;tongwan;Requested a complete reproducer from the submitter.;;;","2023-04-25 18:10;tongwan;Reproducing steps:
1. out.txt is in c:\Users\TONGWAN\Documents folder
2. c:\Users\TONGWAN\Documents\JI-9075168\src>mklink /d aaa c:\Users\TONGWAN\Documents\JI-9075168\src
3. Run the following code in c:\Users\TONGWAN\Documents\JI-9075168\src:
Path path = Path.of(""aaa/../../out.txt"");
System.out.println(path.toAbsolutePath());
System.out.println(path.toRealPath(LinkOption.NOFOLLOW_LINKS)); ;;;","2023-04-25 18:16;tongwan;The observations on Windows 10:
JDK 11: Failed, NoSuchFileException thrown.
JDK 17: Failed.
JDK 20: Failed.
JDK 21ea+5: Failed.
;;;","2023-08-17 13:29;bpb;The GetFullPathName function collapses symbolic links which are followed by the special name "".."" referring to the parent directory. Indeed the function documentation (see link) states:

""This function does not verify that the resulting path and file name are valid, or that they see an existing file on the associated volume."";;;","2023-08-22 18:14;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/15397
Date: 2023-08-23 01:09:16 +0000;;;","2023-08-31 14:16;dukebot;Changeset: 63f561fa
Author:    Brian Burkhalter <bpb@openjdk.org>
Date:      2023-08-31 21:14:22 +0000
URL:       https://git.openjdk.org/jdk/commit/63f561fac2eb6ec57f860af71cd6deebb9027aaf
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Update FreeType to 2.13.0,JDK-8306881,5099486,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,achung,vdyakov,vdyakov,2023-04-25 18:16,2023-09-11 09:38,2023-10-01 09:56,2023-05-09 12:33,11,17,20,21,,,21,client-libs,,0,11-bp,17-bp,3rdparty,freetype,jdk11u-fix-request,jdk11u-fix-yes,jdk17u-fix-request,jdk17u-fix-yes,noreg-other,sn_143,,,,"Freetype 2.13.0 was released on Feb 9, 2023

",,,,,,,,,,,JDK-8315021,JDK-8307870,JDK-8310336,JDK-8311418,JDK-8312497,,,,,,JDK-8307286,JDK-8218098,,JDK-8316028,JDK-8290334,,,,,,,JDK-8313576,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i319xv:",9223372036854775807,b22,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4b09ce31,,,,,,,,,"2023-05-05 14:10;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/13841
Date: 2023-05-05 18:28:38 +0000;;;","2023-05-09 12:33;dukebot;Changeset: 723582c5
Author:    Alisen Chung <achung@openjdk.org>
Date:      2023-05-09 19:30:50 +0000
URL:       https://git.openjdk.org/jdk/commit/723582c524c62ee73f7984a53b046f8832b23a7f
;;;","2023-06-26 06:11;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/1500
Date: 2023-06-26 13:03:20 +0000;;;","2023-06-27 00:53;mdoerr;Fix Request (17u):
Should get backported for parity with 17.0.9-oracle. Applies cleanly.
MacOS build in GHA had a problem before updating Xcode, but it works now: https://git.openjdk.org/jdk17u-dev/pull/1605
Note: Version with workaround may be needed for 11u: https://git.openjdk.org/jdk17u-dev/pull/1504
;;;","2023-06-28 05:45;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/1504
Date: 2023-06-28 12:39:39 +0000;;;","2023-07-20 05:19;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/1603
Date: 2023-07-20 12:11:54 +0000;;;","2023-07-20 05:29;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/1605
Date: 2023-07-20 12:23:57 +0000;;;","2023-08-23 03:31;lucy;Fix Request (11u): 
Should get backported for parity with 11.0.21-oracle. Applies cleanly.
To prevent MacOS build failures (compiler warnings) with GHA, the workaround from jdk17u (https://git.openjdk.org/jdk17u-dev/pull/1504) was added as an additional commit.

Tests (SAP-internal and GHA) successful..
Review received.
;;;","2023-08-23 03:51;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk11u-dev/pull/2094
Date: 2023-08-23 10:44:31 +0000;;;","2023-08-24 01:47;sgehwolf;[~lucy] In passing, changed the label from jdk11-fix-request to jdk11u-fix-request. The latter is the correct approval request flag.;;;","2023-08-24 04:38;lucy;Thank you, Severin.
As always, distraction is a close friend to errors. ;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Open source more AWT Drag & Drop tests,JDK-8306871,5099467,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,dnguyen,dnguyen,dnguyen,2023-04-25 11:12,2023-05-17 12:46,2023-10-01 09:56,2023-05-05 09:29,11,17,20,21,,,21,client-libs,,0,jdk17u-fix-request,jdk17u-fix-yes,sn_142,test_sprint,,,,,,,,,,"Convert applet based dnd tests into main

java/awt/event/HierarchyEvent/ObjectSourceTest/ObjectSourceTest.java
java/awt/event/HierarchyEvent/SpecTest/SpecTest.java
java/awt/event/InputEvent/MouseModsTest/MouseModsTest.java
java/awt/event/InvokationEvent/CatchingThrowableTest/CatchingThrowableTest.java
java/awt/event/KeyEvent/AltGraphModifier/AltGraphModifier.java
java/awt/event/KeyEvent/KeyTyped/CancelKeyTyped.java",,,,,,,,,,,JDK-8308320,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i319tn:",9223372036854775807,b22,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@5a9b3fd3,,,,,,,,,"2023-04-28 11:41;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/13725
Date: 2023-04-28 18:34:36 +0000;;;","2023-05-05 09:31;dukebot;Changeset: b5a48277
Author:    Damon Nguyen <dnguyen@openjdk.org>
Date:      2023-05-05 16:28:03 +0000
URL:       https://git.openjdk.org/jdk/commit/b5a48277ab5b42c4b13db7ddb5418a17ada512ec
;;;","2023-05-15 15:33;vrudomet;[Fix request 17u]

Clean backport, new tests, low risk
Checked on macox x64, linux x64, all pass;;;","2023-05-16 16:38;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/1353
Date: 2023-05-16 23:31:17 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Avoid unnecessary allocation in List.map() when list is empty,JDK-8306860,5099454,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,acobbs,acobbs,acobbs,2023-04-25 08:26,2023-05-22 00:53,2023-10-01 09:56,2023-05-16 07:24,21,,,,,,21,tools,,0,noreg-perf,,,,,,,,,,,,,"The implementation of `com.sun.tools.javac.util.List.map()` looks like this:
```
    public <Z> List<Z> map(Function<A, Z> mapper) {
        boolean changed = false;
        ListBuffer<Z> buf = new ListBuffer<>();
        for (A a : this) {
            Z z = mapper.apply(a);
            buf.append(z);
            changed |= (z != a);
        }
        return changed ? buf.toList() : (List<Z>)this;
    }
```
User Christoph Dreis noticed when profiling compilation tasks that `List.map()` is responsible for very many allocations, however, in many cases the map is empty and any associated allocation is unnecessary.

Therefore, an easy and obvious optimization here would be for `List.map()` to first check if the list is empty, and if so, avoid unnecessarily allocating a `ListBuffer`.","jdk-21+19-68-gbad6aa68e4d
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i319qr:",9223372036854775807,b23,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4dca67bd,,,,,,,,,"2023-04-25 08:42;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/13407
Date: 2023-04-10 14:40:00 +0000;;;","2023-05-16 07:24;dukebot;Changeset: 23cbb2d1
Author:    Christoph Dreis <christoph.dreis@freenet.de>
Committer: Vicente Romero <vromero@openjdk.org>
Date:      2023-05-16 14:22:40 +0000
URL:       https://git.openjdk.org/jdk/commit/23cbb2d1709b5e7509e373d4642806d6436cbbcb
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Open source AWT Modal related tests,JDK-8306850,5099443,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,abhiscxk,abhiscxk,abhiscxk,2023-04-25 06:17,2023-05-23 10:20,2023-10-01 09:56,2023-04-27 09:01,,,,,,,21,client-libs,,0,jdk17u-fix-request,jdk17u-fix-yes,sn_142,test_sprint,,,,,,,,,,"Convert applet based tests into main based 

java/awt/Modal/BlockedMouseInputTest/BlockedMouseInputTest.html
java/awt/Modal/BlockedMouseInputTest/BlockedMouseInputTest2.html
java/awt/Modal/BlockedMouseInputTest/BlockedMouseInputTest3.html
jdk/java/awt/Modal/ModalDialogCannotBeMadeNonModalTest/ModalDialogCannotBeMadeNonModalTest.html
jdk/java/awt/Modal/NonModalDialogReceiveEventsAfterModalTest/NonModalDialogReceiveEventsAfterModalTest.html
jdk/java/awt/Modal/ParentCatchupDraggingChildDialogTest/ParentCatchupDraggingChildDialogTest.html",,,,,,,,,,,JDK-8308707,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i319ob:",9223372036854775807,b21,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@5a9b3fd3,,,,,,,,,"2023-04-26 12:54;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/13676
Date: 2023-04-26 19:48:00 +0000;;;","2023-04-27 09:01;dukebot;Changeset: 41ba05e4
Author:    Abhishek Kumar <abhiscxk@openjdk.org>
Date:      2023-04-27 15:59:42 +0000
URL:       https://git.openjdk.org/jdk/commit/41ba05e450ed4467535bcee81946099e38665c3f
;;;","2023-05-18 11:44;vrudomet;[Fix request 17u] 

Clean backport, new tests, low risk
Checked on macOS x64, linux x64, windows x64: tests pass;;;","2023-05-18 13:04;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/1369
Date: 2023-05-18 19:48:28 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
JVMTI tag map extremely slow after JDK-8292741,JDK-8306843,5099426,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,coleenp,webbuggrp,webbuggrp,2023-04-25 03:29,2023-06-26 06:38,2023-10-01 09:56,2023-05-10 05:33,20,21,,,,,21,hotspot,,0,capbug,regression,,,,,,,,,,,,"ADDITIONAL SYSTEM INFORMATION :
21-ea build 21-ea+19-1566

A DESCRIPTION OF THE PROBLEM :
JVMTI operations related to tags are unusably slow now. Some timing data for tagging and iterating 10_000_000 objects:

19 build 19.0.2+7-44

setTag: 1969 ms
getTag: 743 ms
iterate tagged: 437 ms
iterate all: 499 ms

20 build 20.0.1+9-29

setTag: 2852 ms
getTag: 1851 ms
iterate tagged: 1496 ms
iterate all: 1585 ms

21-ea build 21-ea+19-1566

setTag: 4135765 ms
getTag: 4118573 ms
iterate tagged: 9287657 ms
iterate all: 9495863 ms

JVMTI tag map already got up to 3 times slower in JDK 20, probably due to JDK-8256072.

When reverting the JDK-8292741 changes, the timings are similar to JDK-20.

A fast (optimally concurrent) tag map is extremely important for profilers and other kind of JVMTI agents.

REGRESSION : Last worked in version 20.0.1

STEPS TO FOLLOW TO REPRODUCE THE PROBLEM :
With the attached sources and JAVA_HOME set to the JDK to be tested:

g++ -shared -I$JAVA_HOME/include -I$JAVA_HOME/include/linux -fPIC TagMapTest.cpp -o libTagMapTest.so 

$JAVA_HOME/bin/javac TagMapTest.java 

LD_LIBRARY_PATH=. $JAVA_HOME/bin/java -agentlib:TagMapTest TagMapTest

EXPECTED VERSUS ACTUAL BEHAVIOR :
EXPECTED -
Timings like in JDK 19 or at least JDK 20.
ACTUAL -
Extremely slow timings

---------- BEGIN SOURCE ----------
TagMapTest.cpp -----------------------------------------------
#include <jvmti.h>
#include <cstdlib>
#include <cstring>

namespace {
    jlong nextTag = 1;
    jvmtiEnv *jvmti = nullptr;

    void checkJvmti(int code, const char* message) {
        if (code != JVMTI_ERROR_NONE) {
            printf(""Error %s: %d\n"", message, code);
            abort();
        }
    }

    jvmtiIterationControl JNICALL heapObjectCallback(jlong class_tag, jlong size, jlong* tag_ptr, void* user_data) {
        if (*tag_ptr == 0) {
            *tag_ptr = nextTag++;
        }
        return JVMTI_ITERATION_CONTINUE;
    }
}

extern ""C"" JNIEXPORT void JNICALL Java_TagMapTest_setTag(JNIEnv* jni_env, jclass clazz, jobject object) {
    checkJvmti(jvmti->SetTag(object, nextTag++), ""could not set tag"");
}

extern ""C"" JNIEXPORT jlong JNICALL Java_TagMapTest_getTag(JNIEnv* jni_env, jclass clazz, jobject object) {
    jlong tag;
    checkJvmti(jvmti->GetTag(object, &tag), ""could not get tag"");
    return tag;
}

extern ""C"" JNIEXPORT void JNICALL Java_TagMapTest_iterate(JNIEnv* jni_env, jclass clazz, jboolean tagged) {
    checkJvmti(jvmti->IterateOverHeap(tagged ? JVMTI_HEAP_OBJECT_TAGGED : JVMTI_HEAP_OBJECT_EITHER, &heapObjectCallback, nullptr), ""could not iterate"");
}

extern ""C"" JNIEXPORT jint JNICALL Agent_OnLoad(JavaVM *vm, char *options, void *reserved) {
    if (vm->GetEnv(reinterpret_cast<void **>(&jvmti), JVMTI_VERSION) != JNI_OK || !jvmti) {
        printf(""Could not initialize JVMTI\n"");
        abort();
    }
    jvmtiCapabilities capabilities;
    memset(&capabilities, 0, sizeof(capabilities));
    capabilities.can_tag_objects = 1;
    checkJvmti(jvmti->AddCapabilities(&capabilities), ""adding capabilities"");
    printf(""Loaded agent\n"");
    fflush(stdout);
    return JVMTI_ERROR_NONE;
}
-------------------------------------------------
TagMapTest.java -------------------------------
import java.util.ArrayList;
import java.util.List;
import java.util.concurrent.TimeUnit;

public class TagMapTest {
    private static final List<TagMapTest> items = new ArrayList<>();

    private static native void setTag(Object object);
    private static native long getTag(Object object);
    private static native void iterate(boolean tagged);

    public static void main(String[] args) {
        System.loadLibrary(""TagMapTest"");
        for (int i = 0; i < 10_000_000; i++) {
            items.add(new TagMapTest());
        }

        long startTime = System.nanoTime();
        for (TagMapTest item : items) {
            setTag(item);
        }
        System.out.println(""setTag: "" + TimeUnit.NANOSECONDS.toMillis(System.nanoTime() - startTime) + "" ms"");

        startTime = System.nanoTime();
        for (TagMapTest item : items) {
            getTag(item);
        }
        System.out.println(""getTag: "" + TimeUnit.NANOSECONDS.toMillis(System.nanoTime() - startTime) + "" ms"");

        startTime = System.nanoTime();
        iterate(true);
        System.out.println(""iterate tagged: "" + TimeUnit.NANOSECONDS.toMillis(System.nanoTime() - startTime) + "" ms"");

        startTime = System.nanoTime();
        iterate(false);
        System.out.println(""iterate all: "" + TimeUnit.NANOSECONDS.toMillis(System.nanoTime() - startTime) + "" ms"");
    }
}
---------------------------------------------
---------- END SOURCE ----------

FREQUENCY : always


",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8307623,,,,,,,,,,,,generic,,,,,,,,,generic,,,,,,"0|i319kj:",9223372036854775807,b22,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@661b156a,,,,,,,,,"2023-05-02 10:56;coleenp;There's a couple of bugs with this hashtable conversion.  It looks up tags twice per SetTag and it doesn't resize, so 10 million tags will be overwhelming to it.;;;","2023-05-04 10:38;coleenp;Fixing resizing to match what the old hashtable did and adding entries at the head if known not to exist gets the performance numbers equivalent on a shared machine to JDK 20:

JDK 20:
Loaded agent
[0.365s][info][jvmti,table] JvmtiTagMap table resized to 76831
[0.548s][info][jvmti,table] JvmtiTagMap table resized to 1228891
[4.073s][info][jvmti,table] JvmtiTagMap table resized to 19660831
setTag: 5444 ms
getTag: 3535 ms
iterate tagged: 2520 ms
iterate all: 2554 ms

JDK 21 with patch:
Loaded agent
[0.372s][info][jvmti,table] JvmtiTagMap table resized to 76831 for 6042 entries max bucket 0
[0.598s][info][jvmti,table] JvmtiTagMap table resized to 1228891 for 460986 entries max bucket 0
[4.862s][info][jvmti,table] JvmtiTagMap table resized to 19660831 for 7373346 entries max bucket 0
setTag: 5632 ms
getTag: 3389 ms
iterate tagged: 2593 ms
iterate all: 2683 ms

The table is unusable for a large number of entries otherwise.;;;","2023-05-04 15:37;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/13818
Date: 2023-05-04 22:32:36 +0000;;;","2023-05-10 05:33;dukebot;Changeset: 4251b562
Author:    Coleen Phillimore <coleenp@openjdk.org>
Date:      2023-05-10 12:32:06 +0000
URL:       https://git.openjdk.org/jdk/commit/4251b56214a6af6c307a473c7ba13482ad3109e2
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Generational ZGC: NMT reports Java heap size larger than max heap size,JDK-8306841,5099434,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,stefank,stefank,stefank,2023-04-25 05:51,2023-06-12 20:58,2023-10-01 09:56,2023-06-08 07:08,,,,,,,21,hotspot,,0,genzgc,,,,,,,,,,,,,"ZGC has separated the committing of physical memory from the mapping of the committed memory to virtual memory. It also has asynchronous, lazy unmapping of virtual memory from physical memory. This leads to a situation where multiple virtual memory areas can be mapped to the same physical memory. NMT has a strong assumption that there's a 1-to-1 correspondence between committed memory and its virtual memory areas. Because of this NMT and ZGC is not entirely compatible. ZGC has worked around this by adding NMT hooks where the virtual memory is mapped to the committed memory. This mostly works, but there are situations where we have multiple virtual memory areas mapped to the same physical memory, and that causes the NMT values to be inflated.

I propose that we move the NMT committed memory tracking from the mapping of virtual memory to the actual committing of physical memory.

FWIW, given that NMT and ZGC doesn't agree about how memory is committed, we have to fake the virtual memory addresses reported to NMT. This could probably be noticed if you look for the Java heap addresses in the NMT details output, but I don't see why anyone should be looking for those address for the Java heap in NMT. The interesting number is the amount of committed memory, not the exact addresses, IMHO. This isn't something that we change with this patch, but it can be worth understanding while looking at this Bug and the associated PR.
",,,,,,,,,,,,,,,,,,,,,,,,JDK-8309607,,,,,,,,JDK-8309675,,,,JDK-8308783,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i319mb:",9223372036854775807,b26,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6b00f96c,,,,,,,,,"2023-06-07 06:39;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/14355
Date: 2023-06-07 13:30:05 +0000;;;","2023-06-08 07:08;dukebot;Changeset: bb377b26
Author:    Stefan Karlsson <stefank@openjdk.org>
Date:      2023-06-08 14:06:27 +0000
URL:       https://git.openjdk.org/jdk/commit/bb377b26730f3d9da7c76e0d171517e811cef3ce
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
GetGraphicsTest needs to be headful,JDK-8306838,5099431,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,psadhukhan,psadhukhan,psadhukhan,2023-04-25 05:37,2023-05-09 04:48,2023-10-01 09:56,2023-04-25 08:31,21,,,,,,21,client-libs,,0,regression,regression_8306067,sn_142,test_sprint,tier3,,,,,,,,,"Newly added GetGraphicsTest should be headful as it uses a Frame:

java/awt/Graphics/GetGraphicsTest.java

java.awt.HeadlessException: 
No X11 DISPLAY variable was set,
or no headful library support was found,
but this program performed an operation which requires it,

	at java.desktop/java.awt.GraphicsEnvironment.checkHeadless(GraphicsEnvironment.java:166)
	at java.desktop/java.awt.Window.<init>(Window.java:553)
	at java.desktop/java.awt.Frame.<init>(Frame.java:428)
	at java.desktop/java.awt.Frame.<init>(Frame.java:393)
	at GetGraphicsTest.<init>(GetGraphicsTest.java:35)
	at GetGraphicsTest.main(GetGraphicsTest.java:47)",,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8306849,JDK-8306852,,,,,,,JDK-8306067,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i319ln:",9223372036854775807,b20,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@568a5b31,,,,,,,,,"2023-04-25 05:52;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/13639
Date: 2023-04-25 12:43:42 +0000;;;","2023-04-25 08:31;dukebot;Changeset: 07ea445b
Author:    Prasanta Sadhukhan <psadhukhan@openjdk.org>
Date:      2023-04-25 15:29:28 +0000
URL:       https://git.openjdk.org/jdk/commit/07ea445b43e0df682f305c8709495094e807b1f8
;;;","2023-04-25 10:04;dcubed;The fix for this bug is integrated in jdk-21+20-1641.;;;","2023-05-01 09:12;dcubed;[~psadhukhan] - This was a P3 due to the amount of noise that it
caused in the CI. Typically, we don't lower the priority after the fix
has already been integrated.;;;","2023-05-01 21:11;psadhukhan;I think the priority is determined by amount of impact it will have on user..This is just a test issue and it was affecting only the mach5 CI being green....If run standalone, the test would have run ok locally..so I made it P4..;;;","2023-05-01 21:11;psadhukhan;I think the priority is determined by amount of impact it will have on user..This is just a test issue and it was affecting only the mach5 CI being green....If run standalone, the test would have run ok locally..so I made it P4..;;;","2023-05-01 21:11;psadhukhan;I think the priority is determined by amount of impact it will have on user..This is just a test jtreg tag issue and it was affecting only the mach5 CI being green....If run standalone, the test would have run ok locally..so I made it P4..;;;","2023-05-02 12:20;dcubed;The GKs do initial priority setting for the effects on the CI users, e.g.:

- Tier1 build failures are P1
- regressions start at P2.
- Tier1 test failures start at P2
- Tier2 test failures start at P3
- Tier[3-8] test failures start at P4, but often go to P3 if very noisy

Of course, the different triage teams will adjust the priority based on their
own rules and the GKs typically don't care about that with a few exceptions.
Changing a P1 build failure down to P4 will make GKs a bit grumpy, for example...;;;","2023-05-02 12:23;dcubed;The more important part of my comment is that the fix was integrated
as a P3 so changing the priority after integration shouldn't be done.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Monitor deflation might be accidentally disabled by zero intervals,JDK-8306825,5099417,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,shade,shade,shade,2023-04-25 02:52,2023-09-18 23:08,2023-10-01 09:56,2023-05-01 00:59,17,20,21,,,,21,hotspot,,0,amazon-interest,jdk17u-fix-request,jdk17u-fix-yes,jdk20u-fix-request,jdk20u-fix-SQE-ok,jdk20u-fix-yes,sync,,,,,,,"Found this mistake while backporting JDK-8305994: if we put GADI=0 (defined as ""disable guaranteed deflation""), then the MonitorDeflationThread would call `wait(0)`, that is, wait indefinitely for the notify. This breaks triggering the threshold heuristics! 

But what is even more concerning, the same thing would happen even prior to JDK-8305994, if we put GuaranteedSafepointInterval=0 too. Which means users who kept GSI=0 as the way to dodge excess safepoints, now effectively disable monitor deflation.

Draft: https://github.com/openjdk/jdk/pull/13635",,,,,,,,,,,JDK-8307391,JDK-8316482,JDK-8307562,JDK-8316370,JDK-8308136,,,,,,,,,,,,,,,,,JDK-8305994,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i319ij:",9223372036854775807,b21,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,,,"2023-04-26 11:03;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/13635
Date: 2023-04-25 09:55:10 +0000;;;","2023-04-27 06:41;dcubed;Mach5 testing:

Mach5 Tier1:
- no failures

Mach5 Repeat-50 of runtime/Monitor/DeflationIntervalsTest.java:
- linux-aarch64, linux-x64, macosx-aarch64, macosx-x64, windows-x64
- 50 iterations of all 11 sub-tests passed on all 5 platforms ;;;","2023-04-27 08:05;dcubed;Mach5 testing of v01:

Mach5 Tier1:
- no failures

Mach5 Repeat-50 of runtime/Monitor/DeflationIntervalsTest.java:
- linux-aarch64, linux-x64, macosx-aarch64, macosx-x64, windows-x64
- 50 iterations of all 11 sub-tests passed on all 5 platforms ;;;","2023-05-01 00:59;dukebot;Changeset: a6b4f25b
Author:    Aleksey Shipilev <shade@openjdk.org>
Date:      2023-05-01 07:56:07 +0000
URL:       https://git.openjdk.org/jdk/commit/a6b4f25bd50e6861281d162f143c5bc9c16bac51
;;;","2023-05-02 02:17;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk20u/pull/71
Date: 2023-05-02 09:09:15 +0000;;;","2023-05-02 04:00;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/1318
Date: 2023-05-02 10:53:05 +0000;;;","2023-05-02 11:04;shade;Fix Request (20u, 17u)

This fixes deflation heuristics in face of odd user configuration. This would show up as the slow memory leak with ""Object Monitors"" NMT growing up. The patch applies cleanly to 20u and 17u. Testing, including new regression tests, passes. JDK-8305994, JDK-8306774, JDK-8306825 all go in together to fix related issues at once.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Native memory leak in SharedRuntime::notify_jvmti_unmount/mount.,JDK-8306823,5099415,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,mdoerr,azeller,azeller,2023-04-25 02:14,2023-05-01 10:11,2023-10-01 09:56,2023-04-26 01:29,21,,,,,,21,hotspot,,0,,,,,,,,,,,,,,"It seems that JDK-8304303 introduced a memory leak. When running some jvmti tests the VM allocates a lot of memory without freeing it.
I could track it down with NMT (using -XX:MallocLimit=internal:3g -XX:NativeMemoryTracking=detail) to be allocated in SharedRuntime::notify_jvmti_unmount/mount.

---
Details:

[0x00007ff830d473fb] JNIHandleBlock::allocate_handle+0x1ab
[0x00007ff831008859] SharedRuntime::notify_jvmti_unmount+0x29
[0x0000029f1fed4eac]
                             (malloc=2818841744 type=Internal #9523114)

[0x00007ff830d473fb] JNIHandleBlock::allocate_handle+0x1ab
[0x00007ff831008659] SharedRuntime::notify_jvmti_mount+0x29
[0x0000029f1fed4bac]
                             (malloc=403292896 type=Internal #1362476)

[0x00007ff8310e5725] ConcurrentHashTable<SymbolTableConfig,11>::internal_insert_get<SymbolTableLookup,`ConcurrentHashTable<SymbolTableConfig,11>::insert<SymbolTableLookup>'::`2'::NOP>+0xd5
[0x00007ff8310e668e] SymbolTable::do_add_if_needed+0x14e
[0x00007ff8310e7ff3] SymbolTable::new_symbols+0x73
[0x00007ff830af3146] ClassFileParser::parse_constant_pool_entries+0x996
                             (malloc=25286400 type=Symbol #189455)
...
----",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8304303,,,,,,,,,,,,,,,,,,,,,,,21,,,,,,,,"0|i319i3:",9223372036854775807,b20,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@661b156a,,,,,,,,,"2023-04-25 06:27;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/13641
Date: 2023-04-25 13:19:36 +0000;;;","2023-04-26 01:29;dukebot;Changeset: d7476982
Author:    Martin Doerr <mdoerr@openjdk.org>
Date:      2023-04-26 08:29:06 +0000
URL:       https://git.openjdk.org/jdk/commit/d74769826ddb5e68df76407fb94c7560475249a0
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Open source several AWT Miscellaneous tests,JDK-8306812,5099405,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,tr,tr,tr,2023-04-24 23:11,2023-07-05 11:17,2023-10-01 09:56,2023-05-26 03:50,17,21,,,,,21,client-libs,,0,amazon-interest,jdk17u-fix-request,jdk17u-fix-yes,sn_142,test_sprint,,,,,,,,,"Convert below mention Applet based test to Main based.

java/awt/Panel/SetForegroundTest/SetForegroundTest.html
java/awt/PopupMenu/PopupMenuStayOpen/PopupMenuStayOpen.html
java/awt/Robot/MultiScreen/RobotMoveMultiscreen.html
java/awt/Scrollbar/PageIncrementTest/PageIncrementTest.html
java/awt/Scrollbar/ScrollbarKeyControlTest/ScrollbarKeyControlTest.html",,,,,,,,,,,JDK-8311522,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,generic,,,,,,,,,generic,,,,,,"0|i319fv:",9223372036854775807,b25,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@5a9b3fd3,,,,,,,,,"2023-05-05 03:00;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/13828
Date: 2023-05-05 09:54:36 +0000;;;","2023-05-26 03:53;dukebot;Changeset: c494770c
Author:    Tejesh R <tr@openjdk.org>
Date:      2023-05-26 10:50:49 +0000
URL:       https://git.openjdk.org/jdk/commit/c494770ca0662d95ed35f9244a7a9e012aab61a7
;;;","2023-06-29 11:20;jcao;Fix Request (17u)

On behalf of Chad Rakoczy <chadrako@amazon.com>.

Clean test-only backport. I guess the bot does not add the PR here yet because the OCA has not been verified. I will update tags appropriately when it is done.;;;","2023-07-02 13:56;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/1503
Date: 2023-06-27 16:45:03 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
JMX agent with JDP enabled won't start when PerfData is disabled,JDK-8306806,5098466,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,kevinw,webbuggrp,webbuggrp,2023-04-16 10:06,2023-05-22 00:53,2023-10-01 09:56,2023-05-16 01:30,21,9,,,,,21,core-svc,,0,dcsswa,reproducer-yes,webbug,,,,,,,,,,,"ADDITIONAL SYSTEM INFORMATION :
openjdk 21-ea 2023-09-19
OpenJDK Runtime Environment (build 21-ea+18-1480)
OpenJDK 64-Bit Server VM (build 21-ea+18-1480, mixed mode, sharing)

A DESCRIPTION OF THE PROBLEM :
Unable to start VM with JMX and JDP, specifying ""com.sun.management.jmxremote.autodiscovery=true"" and others JMX properties, when perfData is disabled with flag ""-XX:-UsePerfData"" at the command line.

Apparently introduced in JDK-8167337 making discover service dependent on perf buffer.

STEPS TO FOLLOW TO REPRODUCE THE PROBLEM :
Run: java -XX:-UsePerfData -Dcom.sun.management.jmxremote.autodiscovery=true -Dcom.sun.management.jmxremote.port=0 -Dcom.sun.management.jmxremote.authenticate=false -Dcom.sun.management.jmxremote.ssl=false --version

EXPECTED VERSUS ACTUAL BEHAVIOR :
EXPECTED -
The process starts without perfData.
ACTUAL -
java.nio.BufferUnderflowException
	at java.base/java.nio.Buffer.nextGetIndex(Buffer.java:712)
	at java.base/java.nio.DirectByteBuffer.getInt(DirectByteBuffer.java:693)
	at java.management/sun.management.counter.perf.Prologue.<init>(Prologue.java:80)
	at java.management/sun.management.counter.perf.PerfInstrumentation.<init>(PerfInstrumentation.java:42)
	at jdk.management.agent/jdk.internal.agent.ConnectorAddressLink.importRemoteFrom(ConnectorAddressLink.java:207)
	at jdk.management.agent/jdk.internal.agent.Agent.startDiscoveryService(Agent.java:502)
	at jdk.management.agent/jdk.internal.agent.Agent.startAgent(Agent.java:447)
	at jdk.management.agent/jdk.internal.agent.Agent.startAgent(Agent.java:597)
Exception thrown by the agent : java.nio.BufferUnderflowException

FREQUENCY : always


",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,generic,,,,,,,,,generic,,,,,,"0|i3142z:",9223372036854775807,b23,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@1f101086,,,,,,,,,"2023-04-24 11:36;kevinw;Yes, this behaviour reproduces, and is a bug.
The Java Discovery service / JDP will not start with -XX:-UsePerfData

Thanks for including the reference to:
8167337: When jmxremote.port=0, JDP broadcasts ""0"" instead of assigned port

Looks like we fixed the use of literal zero rather than the port that was assigned, but also introduced the dependency on ConnectorAddressLink and therefore on PerfData (Jan 2020).

;;;","2023-05-11 05:01;kevinw;The use of PerfData is superior to the previous hard-coding of knowledge of the URL protocol and structure, and is required to communicate a dynamically assigned port (JDK-8167337).  But there should be a clearer message, and not a fatal error.;;;","2023-05-11 05:09;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/13928
Date: 2023-05-11 11:42:38 +0000;;;","2023-05-16 01:30;dukebot;Changeset: 0790f704
Author:    Kevin Walls <kevinw@openjdk.org>
Date:      2023-05-16 08:28:53 +0000
URL:       https://git.openjdk.org/jdk/commit/0790f704fdc82d8152219b280a51c8c1aad7a358
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
fix deficient spliterators for Sequenced Collections,JDK-8306785,5099309,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,smarks,smarks,smarks,2023-04-24 17:43,2023-07-25 04:40,2023-10-01 09:56,2023-07-12 16:48,21,,,,,,22,core-libs,,0,hgupdate-sync,noreg-perf,,,,,,,,,,,,"Some spliterators need to be fixed up. In particular see these:

ReverseOrderDequeView
ReverseOrderListView

The spliterators for these views should be made late-binding and should potentially have some of the same characteristics of the spliterator of the backing collection.

In addition, some work could be done on spliterators of the reversed views of various array-based List concrete implementations, such as ArrayList, COWAL, Arrays.asList, and the unmodifiable lists. They could provide optimized overrides instead of simply inheriting the spliterator from ReverseOrderListView.",,,,,,,,,,,JDK-8312048,JDK-8312915,,,,,,,,,JDK-8280836,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i319a3:",9223372036854775807,b07,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@38ded199,,,,,,,,,"2023-07-12 16:13;smarks;There is a lot of work that could be done on the spliterators, but it's too much to try to get it into JDK 21. Instead, for this bug I'll concentrate on safe and obvious improvements, which are to modify the default reverse-ordered views by replacing calls to spliteratorUnknownSize() with spliterator(Collection, ORDERED). Although the resulting spliterators will still be iterator-based, they will have a known size and will have the ORDERED characteristic -- which are moderate improvements. Further optimizations to enhance the reversed array-based collections with array-based and SIZED|SUBSIZED spliterators will be done later.
;;;","2023-07-12 16:24;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/14854
Date: 2023-07-12 17:25:03 +0000;;;","2023-07-12 16:47;dukebot;Changeset: 743e8b8e
Author:    Stuart Marks <smarks@openjdk.org>
Date:      2023-07-12 23:45:42 +0000
URL:       https://git.openjdk.org/jdk/commit/743e8b8e0a9fe032a0dd652a4fef1f761af66595
;;;","2023-07-12 22:53;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk21/pull/118
Date: 2023-07-13 05:45:37 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Make runtime/Monitor/GuaranteedAsyncDeflationIntervalTest.java more reliable,JDK-8306774,5099293,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,shade,dcubed,dcubed,2023-04-24 11:37,2023-09-18 23:08,2023-10-01 09:56,2023-04-26 04:14,17,20,21,,,,21,hotspot,,0,intermittent,jdk17u-fix-request,jdk17u-fix-yes,jdk20u-fix-request,jdk20u-fix-SQE-ok,jdk20u-fix-yes,noreg-self,testbug,tier1,,,,,"The following new test is failing in the JDK21 CI:

runtime/Monitor/GuaranteedAsyncDeflationIntervalTest.java#allEnabled

Here's a snippet from the log file:

----------System.err:(98/9947)----------
 stdout: [[5.824s][info][monitorinflation] Async deflation needed: guaranteed interval (5000 ms) is greater than time since last deflation (5815 ms)
[5.824s][info][monitorinflation] begin deflating: in_use_list stats: ceiling=11264, count=1123, max=1123
[5.824s][info][monitorinflation] before handshaking: unlinked_count=1121, in_use_list stats: ceiling=11264, count=2, max=1123
[5.824s][info][monitorinflation] after handshaking: in_use_list stats: ceiling=11264, count=2, max=1123
[5.825s][info][monitorinflation] deflated_count=1121, {unlinked,deleted}_count=1121 monitors in 0.0003808 secs
[5.825s][info][monitorinflation] end deflating: in_use_list stats: ceiling=11264, count=2, max=1123
[11.571s][info][monitorinflation] Async deflation needed: guaranteed interval (5000 ms) is greater than time since last deflation (5746 ms)
[11.571s][info][monitorinflation] begin deflating: in_use_list stats: ceiling=11264, count=1012, max=1123
[11.571s][info][monitorinflation] before handshaking: unlinked_count=1010, in_use_list stats: ceiling=11264, count=2, max=1123
[11.571s][info][monitorinflation] after handshaking: in_use_list stats: ceiling=11264, count=2, max=1123
[11.571s][info][monitorinflation] deflated_count=1010, {unlinked,deleted}_count=1010 monitors in 0.0003291 secs
[11.571s][info][monitorinflation] end deflating: in_use_list stats: ceiling=11264, count=2, max=1123
[17.314s][info][monitorinflation] Async deflation needed: guaranteed interval (5000 ms) is greater than time since last deflation (5743 ms)
[17.314s][info][monitorinflation] begin deflating: in_use_list stats: ceiling=11264, count=1076, max=1123
[17.314s][info][monitorinflation] before handshaking: unlinked_count=1074, in_use_list stats: ceiling=11264, count=3, max=1123
[17.314s][info][monitorinflation] after handshaking: in_use_list stats: ceiling=11264, count=3, max=1123
[17.314s][info][monitorinflation] deflated_count=1074, {unlinked,deleted}_count=1074 monitors in 0.0003861 secs
[17.314s][info][monitorinflation] end deflating: in_use_list stats: ceiling=11264, count=3, max=1123
[22.885s][info][monitorinflation] Async deflation needed: guaranteed interval (5000 ms) is greater than time since last deflation (5571 ms)
[22.885s][info][monitorinflation] begin deflating: in_use_list stats: ceiling=11264, count=718, max=1123
[22.885s][info][monitorinflation] before handshaking: unlinked_count=717, in_use_list stats: ceiling=11264, count=2, max=1123
[22.885s][info][monitorinflation] after handshaking: in_use_list stats: ceiling=11264, count=2, max=1123
[22.886s][info][monitorinflation] deflated_count=717, {unlinked,deleted}_count=717 monitors in 0.0002403 secs
[22.886s][info][monitorinflation] end deflating: in_use_list stats: ceiling=11264, count=2, max=1123
[28.399s][info][monitorinflation] Async deflation needed: guaranteed interval (5000 ms) is greater than time since last deflation (5514 ms)
[28.399s][info][monitorinflation] begin deflating: in_use_list stats: ceiling=11264, count=1083, max=1123
[28.400s][info][monitorinflation] before handshaking: unlinked_count=1081, in_use_list stats: ceiling=11264, count=2, max=1123
[28.400s][info][monitorinflation] after handshaking: in_use_list stats: ceiling=11264, count=2, max=1123
[28.400s][info][monitorinflation] deflated_count=1081, {unlinked,deleted}_count=1081 monitors in 0.0003843 secs
[28.400s][info][monitorinflation] end deflating: in_use_list stats: ceiling=11264, count=2, max=1123
[34.046s][info][monitorinflation] Async deflation needed: guaranteed interval (5000 ms) is greater than time since last deflation (5647 ms)
[34.046s][info][monitorinflation] begin deflating: in_use_list stats: ceiling=11264, count=1046, max=1123
[34.047s][info][monitorinflation] before handshaking: unlinked_count=1044, in_use_list stats: ceiling=11264, count=3, max=1123
[34.047s][info][monitorinflation] after handshaking: in_use_list stats: ceiling=11264, count=3, max=1123
[34.047s][info][monitorinflation] deflated_count=1044, {unlinked,deleted}_count=1044 monitors in 0.0004321 secs
[34.047s][info][monitorinflation] end deflating: in_use_list stats: ceiling=11264, count=3, max=1123
[39.546s][info][monitorinflation] Async deflation needed: guaranteed interval (5000 ms) is greater than time since last deflation (5499 ms)
[39.546s][info][monitorinflation] begin deflating: in_use_list stats: ceiling=11264, count=929, max=1123
[39.546s][info][monitorinflation] before handshaking: unlinked_count=927, in_use_list stats: ceiling=11264, count=2, max=1123
[39.546s][info][monitorinflation] after handshaking: in_use_list stats: ceiling=11264, count=2, max=1123
[39.547s][info][monitorinflation] deflated_count=927, {unlinked,deleted}_count=927 monitors in 0.0002978 secs
[39.547s][info][monitorinflation] end deflating: in_use_list stats: ceiling=11264, count=2, max=1123
[45.168s][info][monitorinflation] Async deflation needed: guaranteed interval (5000 ms) is greater than time since last deflation (5621 ms)
[45.168s][info][monitorinflation] begin deflating: in_use_list stats: ceiling=11264, count=937, max=1123
[45.168s][info][monitorinflation] before handshaking: unlinked_count=935, in_use_list stats: ceiling=11264, count=3, max=1123
[45.168s][info][monitorinflation] after handshaking: in_use_list stats: ceiling=11264, count=3, max=1123
[45.168s][info][monitorinflation] deflated_count=935, {unlinked,deleted}_count=935 monitors in 0.0003150 secs
[45.168s][info][monitorinflation] end deflating: in_use_list stats: ceiling=11264, count=3, max=1123
[50.531s][info][monitorinflation] Async deflation needed: guaranteed interval (5000 ms) is greater than time since last deflation (5362 ms)
[50.531s][info][monitorinflation] begin deflating: in_use_list stats: ceiling=11264, count=902, max=1123
[50.531s][info][monitorinflation] before handshaking: unlinked_count=900, in_use_list stats: ceiling=11264, count=2, max=1123
[50.531s][info][monitorinflation] after handshaking: in_use_list stats: ceiling=11264, count=2, max=1123
[50.531s][info][monitorinflation] deflated_count=900, {unlinked,deleted}_count=900 monitors in 0.0003153 secs
[50.531s][info][monitorinflation] end deflating: in_use_list stats: ceiling=11264, count=2, max=1123
[56.104s][info][monitorinflation] Async deflation needed: guaranteed interval (5000 ms) is greater than time since last deflation (5573 ms)
[56.104s][info][monitorinflation] begin deflating: in_use_list stats: ceiling=11264, count=1020, max=1123
[56.105s][info][monitorinflation] before handshaking: unlinked_count=1018, in_use_list stats: ceiling=11264, count=3, max=1123
[56.105s][info][monitorinflation] after handshaking: in_use_list stats: ceiling=11264, count=3, max=1123
[56.105s][info][monitorinflation] deflated_count=1018, {unlinked,deleted}_count=1018 monitors in 0.0003662 secs
[56.105s][info][monitorinflation] end deflating: in_use_list stats: ceiling=11264, count=3, max=1123
[61.543s][info][monitorinflation] Async deflation needed: guaranteed interval (5000 ms) is greater than time since last deflation (5438 ms)
[61.543s][info][monitorinflation] begin deflating: in_use_list stats: ceiling=11264, count=174, max=1123
[61.543s][info][monitorinflation] before handshaking: unlinked_count=173, in_use_list stats: ceiling=11264, count=1, max=1123
[61.543s][info][monitorinflation] after handshaking: in_use_list stats: ceiling=11264, count=1, max=1123
[61.543s][info][monitorinflation] deflated_count=173, {unlinked,deleted}_count=173 monitors in 0.0000727 secs
[61.543s][info][monitorinflation] end deflating: in_use_list stats: ceiling=11264, count=1, max=1123
[67.200s][info][monitorinflation] Async deflation needed: guaranteed interval (5000 ms) is greater than time since last deflation (5657 ms)
[67.200s][info][monitorinflation] begin deflating: in_use_list stats: ceiling=11264, count=1, max=1123
[67.200s][info][monitorinflation] end deflating: in_use_list stats: ceiling=11264, count=1, max=1123
[67.326s][info][monitorinflation] Starting the final audit.
[67.326s][info][monitorinflation] begin deflating: in_use_list stats: ceiling=10240, count=1, max=1123
[67.326s][info][monitorinflation] end deflating: in_use_list stats: ceiling=10240, count=1, max=1123
[67.326s][info][monitorinflation] Checking in_use_list:
[67.326s][info][monitorinflation] count=1, max=1123
[67.326s][info][monitorinflation] in_use_count=1 equals ck_in_use_count=1
[67.326s][info][monitorinflation] in_use_max=1123 equals ck_in_use_max=1123
[67.326s][info][monitorinflation] No errors found in in_use_list checks.
[67.326s][info][monitorinflation] In-use monitor info:
[67.326s][info][monitorinflation] (B -> is_busy, H -> has hash code, L -> lock status)
[67.326s][info][monitorinflation]            monitor  BHL              object         object type
[67.326s][info][monitorinflation] ==================  ===  ==================  ==================
[67.326s][info][monitorinflation] 0x00007f8304607540  100  0x00000007ffd01670  java.lang.ref.NativeReferenceQueue$Lock (is_busy: waiters=1, contentions=0owner=0x0000000000000000, cxq=0x0000000000000000, EntryList=0x0000000000000000)
];
 stderr: []
 exitValue = 0

java.lang.RuntimeException: 'Async deflation needed: monitors used are above the threshold' missing from stdout/stderr
	at jdk.test.lib.process.OutputAnalyzer.shouldContain(OutputAnalyzer.java:221)
	at GuaranteedAsyncDeflationIntervalTest.testAllEnabled(GuaranteedAsyncDeflationIntervalTest.java:180)
	at GuaranteedAsyncDeflationIntervalTest.main(GuaranteedAsyncDeflationIntervalTest.java:102)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
	at java.base/java.lang.reflect.Method.invoke(Method.java:578)
	at com.sun.javatest.regtest.agent.MainActionHelper$AgentVMRunnable.run(MainActionHelper.java:333)
	at java.base/java.lang.Thread.run(Thread.java:1592)

JavaTest Message: Test threw exception: java.lang.RuntimeException
JavaTest Message: shutting down test

result: Failed. Execution failed: `main' threw exception: java.lang.RuntimeException: 'Async deflation needed: monitors used are above the threshold' missing from stdout/stderr",,,,,,,,,,,JDK-8307364,JDK-8316313,JDK-8316479,JDK-8307543,JDK-8308132,,,,,,,,,,,,,,,,,,,,,JDK-8305994,,,,,,,,,,,,aarch64,x86_64,,,,,,,,os_x,,,,,,"0|i3196j:",9223372036854775807,b20,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,,,"2023-04-24 11:38;dcubed;[~shade] - The new test added by:

JDK-8305994 Guarantee eventual async monitor deflation

is failing in Mach5 Tier1 on macosx-aarch64 and macosx-x64.;;;","2023-04-24 11:48;shade;Aha! Seems like we never had a ""monitors used are above the threshold"" trigger at all, and only the guaranteed one kicked in. From the logs, it looks like the inflation is very, very slow, so every 5 seconds we have about 1K monitors inflated. Which means it is not enough monitors to trigger the threshold heuristics before guaranteed one kicks in. Let me see if I can strengthen the test quickly.

Edit: I see why. wait(1) takes ~1ms. So in 5 seconds, we have at about 5K monitors inflated, argh. If the OS is even slower, we can inflate progressively fewer monitors, argh.;;;","2023-04-24 11:57;shade;Okay, it is obvious to me I need to rethink the test a bit. Running out of time today, so I'll problemlist it shortly. EDIT: JDK-8306775;;;","2023-04-25 02:07;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/13634
Date: 2023-04-25 09:01:13 +0000;;;","2023-04-25 08:33;mseledtsov;ILW = MMH = P3;;;","2023-04-26 04:14;dukebot;Changeset: 9ad6dc88
Author:    Aleksey Shipilev <shade@openjdk.org>
Date:      2023-04-26 11:11:54 +0000
URL:       https://git.openjdk.org/jdk/commit/9ad6dc881d285cc26c136f0ef19af5bac0a75022
;;;","2023-04-26 08:25;dcubed;Mach5 Tier1 testing for v01:
- https://mach5.us.oracle.com/mdash/jobs/dcubed-XXXXXXX_for_jdk21.git-20230425-2044-45050507
- no failures

Mach5 Repeat-50 testing of runtime/Monitor/GuaranteedAsyncDeflationIntervalTest.java:
- $ mach5 remote-test --build-id 2023-04-25-2041417.daniel.daugherty.XXXXXXX_for_jdk21.git -t 'runtime/Monitor/GuaranteedAsyncDeflationIntervalTest.java' --test-make-args ""JTREG_REPEAT_COUNT=50""
- linux-aarch64, linux-x64, macosx-x64 and windows-x64 passed all 50 runs

- $ mach5 remote-test --build-id 2023-04-25-2041417.daniel.daugherty.XXXXXXX_for_jdk21.git -t 'runtime/Monitor/GuaranteedAsyncDeflationIntervalTest.java' --test-make-args ""JTREG_REPEAT_COUNT=50"" -b macosx-aarch64
- macosx-aarch64 passed all 50 runs ;;;","2023-05-02 02:04;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk20u/pull/70
Date: 2023-05-02 08:57:27 +0000;;;","2023-05-02 03:16;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/1317
Date: 2023-05-02 10:10:06 +0000;;;","2023-05-02 11:03;shade;Fix Request (20u, 17u)

This fixes the test introduced by JDK-8305994. The patch applies cleanly without the ProblemList changes to both 20u and 17u (see related PRs). Testing, including the affected regression test, passes. JDK-8305994, JDK-8306774, JDK-8306825 all go in together to fix related issues at once.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
(fs) Remove obsolete os.version check from sun.nio.fs.BsdFileStore.supportsFileAttributeView,JDK-8306770,5099288,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,rriggs,rriggs,rriggs,2023-04-24 10:28,2023-05-01 10:09,2023-10-01 09:56,2023-04-25 07:09,,,,,,,21,core-libs,,0,,,,,,,,,,,,,,"Remove checks for macOS versions that are no longer needed.

src/java.base/macosx/classes/sun/nio/fs/BsdFileStore.java
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,os_x,,,,,,"0|i3195f:",9223372036854775807,b20,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@674604a9,,,,,,,,,"2023-04-24 12:43;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/13628
Date: 2023-04-24 19:38:21 +0000;;;","2023-04-25 07:09;dukebot;Changeset: 5f50e991
Author:    Roger Riggs <rriggs@openjdk.org>
Date:      2023-04-25 14:07:28 +0000
URL:       https://git.openjdk.org/jdk/commit/5f50e991ca072d86f1d4c2ae4657daec115eab2b
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
CodeCache Analytics reports wrong threshold,JDK-8306768,5099286,Bug,Resolved,JDK,JDK,software,duke,,,P5,Fixed,akozlov,akozlov,akozlov,2023-04-24 10:03,2023-05-08 23:36,2023-10-01 09:56,2023-04-26 04:46,11,17,19,,,,17.0.8,hotspot,,0,diagnostics,jdk11u-fix-request,jdk11u-fix-yes,jdk17u-fix-request,jdk17u-fix-yes,oracle-triage-21,,,,,,,,"https://github.com/openjdk/jdk17u-dev/blob/f969f811a71603f39e4ab42f1362271b7a4d303d/src/hotspot/share/code/codeHeapState.cpp#L1155

Jcmd CodeCache_Analytics uses own implementation of threshold calculation, allowing an error to creep in, making report invalid. Instead of unallocated size, it uses uncommitted size. The problem especially visialbe with InitialCodeCacheSize == ReservedCodeCacheSize. 

https://github.com/openjdk/jdk17u-dev/blob/f969f811a71603f39e4ab42f1362271b7a4d303d/src/hotspot/share/code/codeCache.cpp#L926

{code}
java -XX:InitialCodeCacheSize=1G -XX:ReservedCodeCacheSize=1G Sleep.java

jcmd jdk.compiler/com.sun.tools.javac.launcher.Main  Compiler.CodeHeap_Analytics | grep -A 2 ""Threshold for method to be considered 'cold'""
Threshold for method to be considered 'cold': 5330737152.000
min. hotness =   1016
avg. hotness =   2048
--
Threshold for method to be considered 'cold': 5330696192.000
min. hotness =   1016
avg. hotness =   2048
--
Threshold for method to be considered 'cold': 75978752.000
No hotness data available
{code}

",,,,,,,,,,,JDK-8307003,JDK-8307690,JDK-8307001,JDK-8307061,,,,,,,,,,,,,,,,,,,,,,JDK-8198691,JDK-8290025,,,,,,,,,,,generic,,,,,,,,,generic,,,,,,"0|i3194z:",9223372036854775807,b01,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2023-04-24 10:06;akozlov;The code was removed in JDK-8290025, but still lives in update releases.;;;","2023-04-24 10:21;akozlov;The suggested fix is to use the same method for free ratio calculation that is used by the sweeper. The change touches reporting code only, so the risk is not that high, althought the fix is not a backport.;;;","2023-04-24 10:27;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk11u-dev/pull/1849
Date: 2023-04-24 17:19:30 +0000;;;","2023-04-25 01:16;chagedorn;Does not affect latest JDK since the statistic was removed with the removal of the sweeper (JDK-8290025).

ILW = Wrong statistics printed for code cache, medium?, no workaround = LMH = P5;;;","2023-04-25 02:10;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/1295
Date: 2023-04-25 09:06:28 +0000;;;","2023-04-25 05:47;akozlov;Fix Request 17u:

This is an original fix that replaced ad-hoc threshold calculation in jcmd reporting with a method call used in the runtime code. The value is inteded for human eyes and now that is correct, verified manually.;;;","2023-04-26 04:46;dukebot;Changeset: 243e6430
Author:    Anton Kozlov <akozlov@openjdk.org>
Committer: Paul Hohensee <phh@openjdk.org>
Date:      2023-04-26 11:44:03 +0000
URL:       https://git.openjdk.org/jdk17u-dev/commit/243e643076f70c2cfb480897e1640a21e7ac6552
;;;","2023-04-26 05:10;akozlov;Fix Request 11u:

Backport from 17u, same motivation. The backport is not clean because of difference in parameters in 11 and 17. The code in 11 made aligned with sweeper logic. The change tested manually.;;;","2023-05-02 23:29;dukebot;Changeset: 243e6430
Author:    Anton Kozlov <akozlov@openjdk.org>
Committer: Paul Hohensee <phh@openjdk.org>
Date:      2023-04-26 11:44:03 +0000
URL:       https://git.openjdk.org/jdk17u/commit/243e643076f70c2cfb480897e1640a21e7ac6552
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Some client related jtreg problem list entries are malformed,JDK-8306765,5099283,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,prr,prr,prr,2023-04-24 09:32,2023-07-08 01:12,2023-10-01 09:56,2023-04-25 11:13,21,,,,,,21,client-libs,,0,jdk17u-fix-request,jdk17u-fix-yes,noreg-self,sn_142,test_sprint,testbug,ursqe-triaged,,,,,,,"This is missing platforms 
java/awt/Toolkit/ToolkitPropertyTest/ToolkitPropertyTest_Enable.java 	6847163 

This is missing bug id and platform
java/awt/event/MouseEvent/FrameMouseEventAbsoluteCoordsTest/FrameMouseEventAbsoluteCoordsTest.java",,,,,,,,,,,JDK-8309810,JDK-8309984,JDK-8310090,JDK-8311668,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,17,,,,,,,,"0|i3194b:",9223372036854775807,b20,,,,,,,,,,,"2023-04-24 12:31;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/13626
Date: 2023-04-24 19:20:54 +0000;;;","2023-04-25 11:13;dukebot;Changeset: 36d61c31
Author:    Phil Race <prr@openjdk.org>
Date:      2023-04-25 18:10:52 +0000
URL:       https://git.openjdk.org/jdk/commit/36d61c3106c69c019f2d4ded7dedd1649c1226b3
;;;","2023-07-05 06:41;goetz;

Fix request [17u]

I backport this for parity with 17.0.9-oracle.
No risk, only a test change.
I had to resolve, but it might get recognized as clean.
Test pass/fails as expected on linux. SAP nightly testing passed.
;;;","2023-07-05 06:47;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/1549
Date: 2023-07-05 13:41:33 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
closed Problemlist correction,JDK-8306764,5099282,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,psadhukhan,psadhukhan,psadhukhan,2023-04-24 09:25,2023-05-01 09:58,2023-10-01 09:56,2023-04-24 21:00,,,,,,,21,client-libs,,0,sn_142,test_sprint,,,,,,,,,,,,"closed problem list test needs to add missing platform
javax/swing/JPopupMenu/PopupTest/PopupTester.java  7037338",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i31943:",9223372036854775807,b20,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@568a5b31,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
"com/sun/jdi/ConnectedVMs.java fails with ""Non-zero debuggee exitValue: 143""",JDK-8306758,5099276,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,cjplummer,dcubed,dcubed,2023-04-24 08:38,2023-07-20 16:45,2023-10-01 09:56,2023-05-10 12:13,21,,,,,,21,core-svc,,0,intermittent,noreg-self,,,,,,,,,,,,"The following test started failing in my stress testing in jdk-21+18:

com/sun/jdi/ConnectedVMs.java

Here's a snippet from the log file:

#section:driver
----------messages:(7/229)----------
command: driver ConnectedVMs Kill
reason: User specified action: run driver ConnectedVMs Kill
started: Sat Apr 15 06:02:08 EDT 2023
Mode: agentvm
Agent id: 25
finished: Sat Apr 15 06:02:08 EDT 2023
elapsed time (seconds): 0.318
----------configuration:(12/1238)----------

<snip>

----------System.out:(10/712)----------
create Kill
Testing Kill
vmOpts: '-Xmx768m -XX:MaxRAMPercentage=2.08333 -Dtest.boot.jdk=/work/local/jib-dcubed/install/jdk/19/36/bundles/macos-aarch64/jdk-19_macos-aarch64_bin.tar.gz/jdk-19.jdk/Contents/Home -Djava.io.tmpdir=/System/Volumes/Data/work/shared/bug_hunt/thread_SMR_stress/jdk21_exp.git/build/macosx-aarch64-normal-server-fastdebug/test-support/jtreg_open_test_jdk_jdk_svc/tmp -ea -esa'
javaOpts: ''
JVM version:21-internal
JDI version: 21.0
JVM description: Java Debug Interface (Reference Implementation) version 21.0
Java Debug Wire Protocol (Reference Implementation) version 21.0
JVM Debug Interface version 21.0
JVM version 21-internal (Java HotSpot(TM) 64-Bit Server VM, mixed mode, sharing)
----------System.err:(15/779)----------
[1ms] run args: [InstTarg]
java.lang.RuntimeException: Non-zero debuggee exitValue: 143
        at TestScaffold.waitForVMDisconnect(TestScaffold.java:724)
        at TestScaffold.resumeToVMDisconnect(TestScaffold.java:952)
        at ConnectedVMs.runTests(ConnectedVMs.java:97)
        at TestScaffold.startTests(TestScaffold.java:434)
        at ConnectedVMs.main(ConnectedVMs.java:48)
        at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
        at java.base/java.lang.reflect.Method.invoke(Method.java:578)
        at com.sun.javatest.regtest.agent.MainActionHelper$AgentVMRunnable.run(MainActionHelper.java:312)
        at java.base/java.lang.Thread.run(Thread.java:1592)

JavaTest Message: Test threw exception: java.lang.RuntimeException
JavaTest Message: shutting down test

result: Failed. Execution failed: `main' threw exception: java.lang.RuntimeException: Non-zero debuggee exitValue: 143",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8307857,JDK-8307559,JDK-8305209,JDK-8307885,,"2023-04-24 08:40;dcubed;jdk-21+18_macosx-aarch64.8306758.zip;https://bugs.openjdk.org/secure/attachment/103538/jdk-21%2B18_macosx-aarch64.8306758.zip","2023-04-24 08:58;dcubed;jdk-21+19_macosx-aarch64.8306758.zip;https://bugs.openjdk.org/secure/attachment/103539/jdk-21%2B19_macosx-aarch64.8306758.zip","2023-05-01 09:46;dcubed;jdk-21+20_macosx-aarch64.8306758.zip;https://bugs.openjdk.org/secure/attachment/103654/jdk-21%2B20_macosx-aarch64.8306758.zip",,,,,aarch64,,,,,,,,,os_x,,,,,,"0|i3192r:",9223372036854775807,b22,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@3397f701,,,,,,,,,"2023-04-24 08:40;dcubed;Here's the logs from my jdk-21+18 stress run sighting on macosx-aarch64:

$ unzip -l jdk-21+18_macosx-aarch64.8306758.zip
Archive:  jdk-21+18_macosx-aarch64.8306758.zip
  Length      Date    Time    Name
---------  ---------- -----   ----
    30953  04-15-2023 06:02   jdk-21+18_2/failures.macosx-aarch64/ConnectedVMs.jtr.fastdebug
---------                     -------
    30953                     1 file;;;","2023-04-24 08:42;dcubed;Here's the logs from my jdk-21+19 stress run sighting on macosx-aarch64:

$ unzip -l jdk-21+19_macosx-aarch64.8306758.zip
Archive:  jdk-21+19_macosx-aarch64.8306758.zip
  Length      Date    Time    Name
---------  ---------- -----   ----
    30956  04-21-2023 08:42   jdk-21+19_1/failures.macosx-aarch64/ConnectedVMs.jtr.fastdebug
    30951  04-22-2023 10:04   jdk-21+19_2/failures.macosx-aarch64/ConnectedVMs.jtr.fastdebug
---------                     -------
    61907                     2 files;;;","2023-04-24 11:13;cjplummer;This is likely due to the extra checking of the debuggee process's exitCode that was added to TestScaffold by JDK-8305209. Previously this bad exitCode (143) would have gone undetected.

ExitCode 143 seems to be due to a SIGTERM. I'm not sure when we ever issue this. Possibly jtreg does as part of the timeout handling, so this could be a timeout issue. The jtr file doesn't offer much in the way of useful info as to why the debuggee exited. [~dcubed] Are there any other artifacts to look at?;;;","2023-04-24 11:30;dcubed;I _think_ SIGTERM is issued by the failure handler in JTREG. There are
no other artifacts for the failures. I'll have to look at the execution times
for all three sightings...;;;","2023-05-01 09:49;dcubed;Here's the logs from my jdk-21+20 stress run sighting on macosx-aarch64:

$ unzip -l jdk-21+20_macosx-aarch64.8306758.zip
Archive:  jdk-21+20_macosx-aarch64.8306758.zip
  Length      Date    Time    Name
---------  ---------- -----   ----
    30918  04-30-2023 10:00   jdk-21+20_3/failures.macosx-aarch64/ConnectedVMs.jtr.fastdebug
---------                     -------
    30918                     1 file

According to the .jtr file for this latest failure:

----------messages:(7/229)----------
command: driver ConnectedVMs Kill
reason: User specified action: run driver ConnectedVMs Kill
started: Sun Apr 30 10:00:43 EDT 2023
Mode: agentvm
Agent id: 27
finished: Sun Apr 30 10:00:45 EDT 2023
elapsed time (seconds): 1.905

so this test ran for 1.905 seconds which isn't long enough for the JTREG failure
handler to get involved.

Since this test invocation looks like:

    command: driver ConnectedVMs Kill

is it possible that the test itself is generating that SIGTERM?;;;","2023-05-01 09:57;cjplummer;Yes.

        // pick a way to die based on the input arg.
        if (passName.equals(""Kill"")) {
            vm().process().destroy();

I need to figure out what role this is playing in the running of the test, and why we don't see exitValue 143 every time.;;;","2023-05-01 11:08;cjplummer;JNIEXPORT jboolean JNICALL
Java_java_lang_ProcessHandleImpl_destroy0(JNIEnv *env,
                                          jobject obj,
                                          jlong jpid,
                                          jlong startTime,
                                          jboolean force) {
    pid_t pid = (pid_t) jpid;
    int sig = (force == JNI_TRUE) ? SIGKILL : SIGTERM;
    jlong start = Java_java_lang_ProcessHandleImpl_isAlive0(env, obj, jpid);

    if (start == startTime || start == 0 || startTime == 0) {
        return (kill(pid, sig) < 0) ? JNI_FALSE : JNI_TRUE;
    } else {
        return JNI_FALSE;
    }
}

Since force is false in this case, SIGTERM is being used. However, I'm still not sure why only very rarely this results in exitValue being 143. For this test it usually ends up being 0 after doing the Process.destroy().;;;","2023-05-01 11:28;cjplummer;From the shell I just tried a ""kill -TERM <pid>"" of a running java process. The exit code (as seen by using the bash ""echo $?"" command) was 143. So again, the issue actually seems to be that we don't always see 143.;;;","2023-05-01 12:21;cjplummer;The test does the Process.destroy() while the process is suspended after a single step completed. If I change the debuggee so it instead sits in a while(true) loop and change the debugger side of the test to do a vm.resume() before the Process.destroy(), then I get the expected 143 exitValue every time. So it appears that for some reason doing a Process.destroy() while the debugger is suspended results in hiding this exit code as if the destroy was never done, although indications are that the destroy() is actually destroying the process (the java app is not exiting gracefully).;;;","2023-05-01 13:33;cjplummer;I did about 3000 runs of the test on macosx-aarch64-debug using mach5 and could not reproduce the failure.;;;","2023-05-01 15:03;cjplummer;I just replicated the 0 exitCode using jdb. I ran simple test program as follows:

java -agentlib:jdwp=transport=dt_socket,address=5000,server=y Test

And then I ran jdb:

$ jdb -attach 5000
main[1] stop at Test:4
Deferring breakpoint Test:4.
It will be set after the class is loaded.
main[1] run
> Set deferred breakpoint Test:4
Breakpoint hit: ""thread=main"", Test.main(), line=4 bci=0
4            System.out.println(""Entering "");

At this point I used ""kill -TERM <pid>"" on the debuggee. There was no immediate affect. The debuggee was still running (although threads were suspended) and jdb was still at the command prompt. I that point I did a continue from jdb:

main[1] cont
> 
The application exited

And on the debuggee side the app exited cleanly, including execution of a println that was after the breakpoint, and $? was 0. It looks like there is a race on the debuggee side that allows the debuggee to usually exit cleanly before the -TERM handling is completed.

The test does a Process.destroy() followed immediately by a vm.resume(). I think the resume is happening (and the debuggee doing a clean exit with exitcode 0) before the TERM signal is done doing all its work (termination of the app and clean shutdown of the jvm with exitcode 143). That is why sometimes Dan sees the 143 exit code. With this in mind I added a 2 second sleep before the debuggee exits. Now it gets 143 every time.  Probably this sleep should be left in place, and I should find a way to get this test to pass even with this exitcode. I could rev the exitcode check I added to TestScaffold with JDK-8305209 so it allows 143.;;;","2023-05-01 19:10;dholmes;If being suspended means the signal is blocked (it shouldn't!) then you can easily imagine that when you send the signal the OS selects one thread at ""random"" to deliver it to and you then start to resume the threads - one of which will process the signal and one of which will do the normal exit. Hence the race is evident in that scenario.

But the issue is that any thread in the VM should be able to process the TERM, and the Java threads should not be blocking TERM just because they are suspended.

Investigating ...

Update: I mistakenly thought the TERM signal was not processed directly by the JVM but it is. So the signal is not blocked as such, rather the Signal thread can't respond to it because it is suspended just like the other Java threads. So you have a race which depends on the order in which the Java threads get resumed, and the amount of work involved in a normal exit (by the main thread) and termination initiated by the Signal thread (which has to create a new Java thread to call ShutDown.exit.).

Edit: contrary to what I mis-wrote before, signal handlers are per-process so any thread (with the signal unblocked) will do the right thing. Even the main process thread (which is not attached to the VM) can process these signals.;;;","2023-05-02 12:08;dcubed;> That is why sometimes Dan sees the 143 exit code. 

This test failure only occurs during my stress kit runs on my macosx-aarch64 machine.
The test suite that I'm running is open/test/hotspot/jtreg/vmTestbase/nsk/jdi and it's
executed with a concurrency of 12. At the same time, there are three other java stress
processes running: one is executing 'release' bits, one is executing 'fastdebug' bits and
one is executing 'slowdebug' bits.

Basically the machine is swamped.;;;","2023-05-05 18:14;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/13848
Date: 2023-05-05 22:21:36 +0000;;;","2023-05-10 12:13;dukebot;Changeset: 26883648
Author:    Chris Plummer <cjplummer@openjdk.org>
Date:      2023-05-10 19:09:24 +0000
URL:       https://git.openjdk.org/jdk/commit/268836482d0688bd1952bf634ceee4463dfca66f
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Open source few Swing JComponent and AbstractButton tests,JDK-8306755,5099269,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,psadhukhan,psadhukhan,psadhukhan,2023-04-24 07:35,2023-05-23 10:24,2023-10-01 09:56,2023-04-25 20:15,,,,,,,21,client-libs,,0,jdk17u-fix-request,jdk17u-fix-yes,sn_142,test_sprint,,,,,,,,,,"Few tests needs to be opensourced

javax/swing/JComponent/4962718/bug4962718.java
javax/swing/JComponent/4419219/bug4419219.java
javax/swing/AbstractButton/4246045/bug4246045.java
javax/swing/AbstractButton/4147740/bug4147740.java
javax/swing/AbstractButton/4143867/bug4143867.java",,,,,,,,,,,JDK-8308712,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i31917:",9223372036854775807,b20,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@568a5b31,,,,,,,,,"2023-04-25 10:43;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/13651
Date: 2023-04-25 17:37:07 +0000;;;","2023-04-25 20:15;dukebot;Changeset: f3e8bd1d
Author:    Prasanta Sadhukhan <psadhukhan@openjdk.org>
Date:      2023-04-26 03:13:56 +0000
URL:       https://git.openjdk.org/jdk/commit/f3e8bd1d1161772539f42405fc4fcb02259f5b66
;;;","2023-05-18 20:47;vrudomet;[Fix request 17u]

Clean backport, new tests, low risk
Checked on macOS x64, linux x64, windows x64: tests pass;;;","2023-05-18 20:53;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/1374
Date: 2023-05-19 03:47:37 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Open source several container AWT tests,JDK-8306753,5099265,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,azvegint,azvegint,azvegint,2023-04-24 06:11,2023-05-22 11:58,2023-10-01 09:56,2023-04-25 13:26,,,,,,,21,client-libs,,0,jdk17u-fix-request,jdk17u-fix-yes,sn_142,test_sprint,,,,,,,,,,"java/awt/Container/FTPProvider/FocusTraversalPolicyProviderTest/FocusTraversalPolicyProviderTest.java
java/awt/Container/FTPProvider/PropertyEventsTest/PropertyEventsTest.java
java/awt/Container/FindComponentAtTest/FindComponentAtTest.java
java/awt/Container/FindComponentTest/FindComponentTest.java",,,,,,,,,,,JDK-8308586,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i3190b:",9223372036854775807,b20,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@5a9b3fd3,,,,,,,,,"2023-04-25 10:10;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/13648
Date: 2023-04-25 17:02:42 +0000;;;","2023-04-25 13:27;dukebot;Changeset: b372f28a
Author:    Alexander Zvegintsev <azvegint@openjdk.org>
Date:      2023-04-25 20:25:16 +0000
URL:       https://git.openjdk.org/jdk/commit/b372f28ad4b7c1f46e0070a930911542d4d1a032
;;;","2023-05-19 10:52;vrudomet;[Fix request 17u]

Clean backport, new tests, low risk
Checked on macOS x64, linux x64, windows x64: tests pass;;;","2023-05-19 10:59;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/1381
Date: 2023-05-19 17:52:48 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Open source several container and component AWT tests,JDK-8306752,5099264,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,azvegint,azvegint,azvegint,2023-04-24 06:09,2023-05-23 10:25,2023-10-01 09:56,2023-04-25 13:28,,,,,,,21,client-libs,,0,jdk17u-fix-request,jdk17u-fix-yes,sn_142,test_sprint,,,,,,,,,,"java/awt/Container/OpenedPopupFrameDisposalTest/OpenedPopupFrameDisposal.java
java/awt/Container/RemoveByIndexExceptionTest/RemoveByIndexExceptionTest.java
java/awt/Container/ShowingChangedEvent/ShowingChangedEventTest.java
java/awt/Component/GetListenersTest/GetListenersTest.java",,,,,,,,,,,JDK-8308713,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i31903:",9223372036854775807,b20,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@5a9b3fd3,,,,,,,,,"2023-04-25 10:14;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/13649
Date: 2023-04-25 17:05:02 +0000;;;","2023-04-25 13:30;dukebot;Changeset: 88d9ebf8
Author:    Alexander Zvegintsev <azvegint@openjdk.org>
Date:      2023-04-25 20:27:34 +0000
URL:       https://git.openjdk.org/jdk/commit/88d9ebf8e80eeead3e4a1494ba537530c16b75e1
;;;","2023-05-18 20:50;vrudomet;[Fix request 17u]

Clean backport, new tests, low risk
Checked on macOS x64, linux x64, windows x64: tests pass;;;","2023-05-18 20:58;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/1375
Date: 2023-05-19 03:50:30 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Shenandoah: Missing barriers on deoptimization path,JDK-8306734,5099246,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,shade,shade,shade,2023-04-24 03:26,2023-05-15 18:15,2023-10-01 09:56,2023-04-25 11:49,20,21,,,,,21,hotspot,,0,amazon-interest,gc-shenandoah,jdk20u-fix-request,jdk20u-fix-SQE-ok,jdk20u-fix-yes,,,,,,,,,"Reported here:
 https://mail.openjdk.org/pipermail/shenandoah-dev/2023-April/019033.html

% CONF=macosx-aarch64-server-fastdebug make images test TEST=gc/shenandoah/compiler/TestReferenceCAS.java TEST_VM_OPTS=""-Xcomp""

#
# A fatal error has been detected by the Java Runtime Environment:
#
#  Internal Error (/Users/shipilev/Work/shipilev-jdk/src/hotspot/share/gc/shenandoah/shenandoahBarrierSet.inline.hpp:246), pid=67189, tid=8707
#  Error: Shenandoah assert_not_in_cset failed; Object should not be in collection set

Referenced from:
  interior location: 0x0000000280100158
  inside Java heap
    not in collection set
  region: |    2|R  |BTE    280100000,    28017fd88,    280180000|TAMS    280100000|UWM    280100000|U   511K|T   511K|G     0B|S     0B|L     0B|CP   0

Object:
  0x00000002e6580f78 - klass 0x0000000800006340 java.security.CodeSource
    not allocated after mark start
    not after update watermark
        marked strong
    not marked weak
        in collection set
  mark: marked(0x00000002e66014e3)
  region: | 3275|CS |BTE    2e6580000,    2e6600000,    2e6600000|TAMS    2e6600000|UWM    2e6600000|U   512K|T     0B|G   511K|S   184B|L   475K|CP   0

Forwardee:
  0x00000002e66014e0 - klass 0x0000000800006340 java.security.CodeSource
        allocated after mark start
    not after update watermark
        marked strong
        marked weak
    not in collection set
  mark: mark(is_neutral no_hash age=0)
  region: | 3276|R  |BTE    2e6600000,    2e6628dc8,    2e6680000|TAMS    2e6600000|UWM    2e6628dc8|U   163K|T     0B|G   163K|S   184B|L     0B|CP   0

Stack trace suggests we call this from deopt:

---------------  T H R E A D  ---------------

Current thread (0x000000013800a210):  JavaThread ""main"" [_thread_in_Java, id=8707, stack(0x000000016dc7c000,0x000000016de7f000)]

Stack: [0x000000016dc7c000,0x000000016de7f000],  sp=0x000000016de7a3a0,  free space=2040k
Native frames: (J=compiled Java code, j=interpreted, Vv=VM code, C=native code)
V  [libjvm.dylib+0x113b1cc]  VMError::report_and_die(int, char const*, char const*, char*, Thread*, unsigned char*, void*, void*, char const*, int, unsigned long)+0x564  (shenandoahBarrierSet.inline.hpp:246)
V  [libjvm.dylib+0x113b9e8]  VMError::report_and_die(Thread*, char const*, int, unsigned long, VMErrorType, char const*, char*)+0x0
V  [libjvm.dylib+0x52eb7c]  print_error_for_unit_test(char const*, char const*, char*)+0x0
V  [libjvm.dylib+0x52eb10]  report_vm_error(char const*, int, char const*, char const*, ...)+0x0
V  [libjvm.dylib+0xea3818]  ShenandoahAsserts::print_failure(ShenandoahAsserts::SafeLevel, oop, void*, oop, char const*, char const*, char const*, int)+0x2e0
V  [libjvm.dylib+0xea54c0]  ShenandoahAsserts::assert_not_in_cset(void*, oop, char const*, int)+0x1e8
V  [libjvm.dylib+0x40cd58]  void ShenandoahBarrierSet::AccessBarrier<286790ull, ShenandoahBarrierSet>::oop_store_common<oop>(oop*, oop)+0x178
V  [libjvm.dylib+0x40cb40]  void ShenandoahBarrierSet::AccessBarrier<286790ull, ShenandoahBarrierSet>::oop_store_in_heap<oop>(oop*, oop)+0x180
V  [libjvm.dylib+0x7b2170]  AccessInternal::PostRuntimeDispatch<ShenandoahBarrierSet::AccessBarrier<286790ull, ShenandoahBarrierSet>, (AccessInternal::BarrierType)1, 286790ull>::oop_access_barrier(oop, long, oop)+0xb0
V  [libjvm.dylib+0x889120]  std::__1::enable_if<!HasDecorator<286790ull, AS_RAW>::value, void>::type AccessInternal::PreRuntimeDispatch::store_at<286790ull, oop>(oop, long, oop)+0xe0
V  [libjvm.dylib+0x7b1d30]  void AccessInternal::store_at<262148ull, oop>(oop, long, oop)+0x90
V  [libjvm.dylib+0xcec4b0]  void Access<262144ull>::oop_store_at<oop>(oop, long, oop)+0x90
V  [libjvm.dylib+0x55d820]  Deoptimization::reassign_fields(frame*, RegisterMap*, GrowableArray<ScopeValue*>*, bool, bool)+0x2604
V  [libjvm.dylib+0x557434]  rematerialize_objects(JavaThread*, int, CompiledMethod*, frame&, RegisterMap&, GrowableArray<compiledVFrame*>*, bool&)+0x368
V  [libjvm.dylib+0x55607c]  Deoptimization::fetch_unroll_info_helper(JavaThread*, int)+0x2d4
V  [libjvm.dylib+0x561b94]  Deoptimization::uncommon_trap(JavaThread*, int, int)+0xa4
Java frames: (J=compiled Java code, j=interpreted, Vv=VM code)
v  ~UncommonTrapBlob 0x000000010dd4916c
J 2604 c2 java.security.SecureClassLoader$1.apply(Ljava/security/SecureClassLoader$CodeSourceKey;)Ljava/security/ProtectionDomain; java.base@21-internal (71 bytes) @ 0x000000010e1bd7ec [0x000000010e1bd700+0x00000000000000ec]
j  java.security.SecureClassLoader$1.apply(Ljava/lang/Object;)Ljava/lang/Object;+5 java.base@21-internal
J 1959 c2 java.util.concurrent.ConcurrentHashMap.computeIfAbsent(Ljava/lang/Object;Ljava/util/function/Function;)Ljava/lang/Object; java.base@21-internal (576 bytes) @ 0x000000010de79434 [0x000000010de78fc0+0x0000000000000474]
j  java.security.SecureClassLoader.getProtectionDomain(Ljava/security/CodeSource;)Ljava/security/ProtectionDomain;+28 java.base@21-internal
J 2599 c2 java.security.SecureClassLoader.defineClass(Ljava/lang/String;[BIILjava/security/CodeSource;)Ljava/lang/Class; java.base@21-internal (16 bytes) @ 0x000000010e1bad3c [0x000000010e1bacc0+0x000000000000007c]
j  jdk.internal.loader.BuiltinClassLoader.defineClass(Ljava/lang/String;Ljdk/internal/loader/Resource;)Ljava/lang/Class;+117 java.base@21-internal
j  jdk.internal.loader.BuiltinClassLoader.findClassOnClassPathOrNull(Ljava/lang/String;)Ljava/lang/Class;+37 java.base@21-internal
j  jdk.internal.loader.BuiltinClassLoader.loadClassOrNull(Ljava/lang/String;Z)Ljava/lang/Class;+111 java.base@21-internal
J 2010 c2 jdk.internal.loader.ClassLoaders$AppClassLoader.loadClass(Ljava/lang/String;Z)Ljava/lang/Class; java.base@21-internal (40 bytes) @ 0x000000010de0ffac [0x000000010de0ff40+0x000000000000006c]
J 2009 c2 java.lang.ClassLoader.loadClass(Ljava/lang/String;)Ljava/lang/Class; java.base@21-internal (7 bytes) @ 0x000000010de106b8 [0x000000010de10640+0x0000000000000078]
v  ~StubRoutines::call_stub 0x000000010dc7016c
J 759  java.lang.Class.forName0(Ljava/lang/String;ZLjava/lang/ClassLoader;Ljava/lang/Class;)Ljava/lang/Class; java.base@21-internal (0 bytes) @ 0x000000010debf498 [0x000000010debf3c0+0x00000000000000d8]
J 758 c2 java.lang.Class.forName(Ljava/lang/String;ZLjava/lang/ClassLoader;Ljava/lang/Class;)Ljava/lang/Class; java.base@21-internal (41 bytes) @ 0x000000010debfabc [0x000000010debfa40+0x000000000000007c]
J 2008 c2 sun.launcher.LauncherHelper.loadMainClass(ILjava/lang/String;)Ljava/lang/Class; java.base@21-internal (277 bytes) @ 0x000000010e0b3264 [0x000000010e0b31c0+0x00000000000000a4]
J 2007 c2 sun.launcher.LauncherHelper.checkAndLoadMain(ZILjava/lang/String;)Ljava/lang/Class; java.base@21-internal (85 bytes) @ 0x000000010de4b9d0 [0x000000010de4b940+0x0000000000000090]
v  ~StubRoutines::call_stub 0x000000010dc7016c

",,,,,,,,,,,JDK-8308128,JDK-8307151,,,,,,,,,,,,,,,,,,,,,,,,JDK-8296875,JDK-8224522,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i318w3:",9223372036854775807,b20,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6b00f96c,,,,,,,,,"2023-04-24 04:01;shade;AFAICS, Loom integration (JDK-8284161) moved the Shenandoah block `StackValue::create_stack_value` that we added to avoid exposing bad oops during the deopt (JDK-8224522). I think that was done to avoid interaction with barrier healing acting on derived pointer bases (?), so it employed the `NativeAccess::load_oop` trick to still call into GC barriers without healing. Then, the refactoring for ZGC (JDK-8296875) redid these paths, but dropped the `NativeAccess::load_oop` completely, which exposed Shenandoah to a missing barrier.;;;","2023-04-24 08:54;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/13613
Date: 2023-04-24 11:44:16 +0000;;;","2023-04-25 11:49;dukebot;Changeset: 28829f30
Author:    Aleksey Shipilev <shade@openjdk.org>
Date:      2023-04-25 18:46:55 +0000
URL:       https://git.openjdk.org/jdk/commit/28829f308fe6314388c9a47b91273bcf81eb806c
;;;","2023-04-26 04:01;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk20u/pull/64
Date: 2023-04-26 10:54:11 +0000;;;","2023-04-26 06:04;shade;Fix Request (20u)

Fixes a fatal bug (missing GC barrier) in Shenandoah. Recent regression. Patch applies cleanly, tests pass.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
TruncatedSeq::predict_next() attempts linear regression with only one data point,JDK-8306732,5099244,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,aboldtch,aboldtch,aboldtch,2023-04-24 03:12,2023-05-03 23:34,2023-10-01 09:56,2023-04-26 23:58,21,,,,,,21,hotspot,,0,zgc,,,,,,,,,,,,,"TruncatedSeq::predict_next() attempts linear regression with only one data point, this leads to a division by zero. (There are infinit many linear functions that fit equally well for a single point).

I suggest we do what we do for the zero points case, namely pick one of the linear functions.

For 0 points the current version picks `y = 0 + 0*x` and the suggestion is that for one point `P` the function `y = P_y + 0*x` is picked.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i318vn:",9223372036854775807,b21,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6b00f96c,,,,,,,,,"2023-04-24 04:59;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/13614
Date: 2023-04-24 11:51:06 +0000;;;","2023-04-26 23:58;dukebot;Changeset: 748476fd
Author:    Axel Boldt-Christmas <aboldtch@openjdk.org>
Date:      2023-04-27 06:56:22 +0000
URL:       https://git.openjdk.org/jdk/commit/748476fd80ec93c25d823bc5088c706fcf3c7e65
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Optimize and opensource some old AWT tests,JDK-8306718,5099232,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,kizune,kizune,kizune,2023-04-23 23:20,2023-08-24 10:08,2023-10-01 09:56,2023-04-25 11:35,,,,,,,21,client-libs,,0,jdk11u-fix-request,jdk11u-fix-yes,jdk17u-fix-request,jdk17u-fix-yes,noreg-self,sn_142,test_sprint,,,,,,,"Clean up, optimize and opensource some old AWT tests, namely:
StopingEdtOnPushPopTest.java
PreferredLayoutSize.java
MinimumLayoutSize.java
ExceptionAfterSetDirectory.java",,,,,,,,,,,JDK-8314964,JDK-8309004,JDK-8311819,JDK-8308639,JDK-8308696,JDK-8308626,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i318sz:",9223372036854775807,b20,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@5a9b3fd3,,,,,,,,,"2023-04-25 03:45;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/13637
Date: 2023-04-25 10:37:48 +0000;;;","2023-04-25 11:35;dukebot;Changeset: 9beae218
Author:    Alexander Zuev <kizune@openjdk.org>
Date:      2023-04-25 18:32:03 +0000
URL:       https://git.openjdk.org/jdk/commit/9beae21864d18054ca3762ec989d51ff0660db84
;;;","2023-07-05 06:46;goetz;Fix request [17u]

I backport this for parity with 17.0.9-oracle.
No risk, only a test change.
Clean backport.
Tests pass. SAP nightly testing passed.;;;","2023-07-05 06:58;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/1550
Date: 2023-07-05 13:49:13 +0000;;;","2023-08-17 01:57;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk11u-dev/pull/2085
Date: 2023-08-17 08:50:22 +0000;;;","2023-08-20 18:43;andrewlu;Fix request [11u]

I backport this for parity with 11.0.21-oracle.
No risk, only a test change.
Clean backport.
Test passes. SAP nightly testing passed.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Open source few Swing event and AbstractAction tests,JDK-8306714,5099228,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,psadhukhan,psadhukhan,psadhukhan,2023-04-23 22:13,2023-05-01 10:08,2023-10-01 09:56,2023-04-24 21:57,,,,,,,21,client-libs,,0,sn_142,test_sprint,,,,,,,,,,,,"Few Swing applet tests will be converted and opensourced

javax/swing/event/InternalFrameEvent/4160240/bug4160240.java
javax/swing/event/TreeSelectionEvent/4143690/bug4143690.java
javax/swing/AbstractAction/4186951/bug4186951.java
javax/swing/AbstractAction/4211454/bug4211454.java
javax/swing/AbstractAction/4211425/bug4211425.java
javax/swing/AbstractAction/4244034/bug4244034.java",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i318s3:",9223372036854775807,b20,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@568a5b31,,,,,,,,,"2023-04-24 02:58;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/13608
Date: 2023-04-24 09:51:50 +0000;;;","2023-04-24 21:57;dukebot;Changeset: 31a73b0d
Author:    Prasanta Sadhukhan <psadhukhan@openjdk.org>
Date:      2023-04-25 04:54:56 +0000
URL:       https://git.openjdk.org/jdk/commit/31a73b0d7088d10a5ffb5541d66806a92b681ef9
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
CDS DeterministicDump.java test fails with -XX:+UseStringDeduplication,JDK-8306712,5099226,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,ccheung,iklam,iklam,2023-04-23 20:29,2023-08-03 08:41,2023-10-01 09:56,2023-05-05 10:42,21,,,,,,21,hotspot,,0,cds,reproducible-build,,,,,,,,,,,,"When -XX:+UseStringDeduplication is enabled in jtreg vm options, sometimes the CDS DeterministicDump.java test fails. This is probably because string deduplication caused CDS to iterate the strings in an unexpected order.

Since not many strings are actually allocated during -Xshare:dump, -XX:+UseStringDeduplication has no benefit and should be disabled (in arguments.cpp).",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i318rn:",9223372036854775807,b22,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,,,"2023-04-23 20:34;iklam;Also, this part of the test case be removed because the referenced bug has been fixed.

https://github.com/openjdk/jdk/blob/8d696aea9e1cefca97a760c017a5fde545facaa9/test/hotspot/jtreg/runtime/cds/DeterministicDump.java#L56-L61
DeterministicDump.java
        if (Platform.is64bit()) {
            if (!compressed) {
                System.out.println(""CDS archives with uncompressed oops are still non-deterministic"");
                System.out.println(""See https://bugs.openjdk.org/browse/JDK-8282828"");
                return;;;;","2023-05-04 09:43;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/13810
Date: 2023-05-04 16:39:22 +0000;;;","2023-05-05 10:42;dukebot;Changeset: 65a54883
Author:    Calvin Cheung <ccheung@openjdk.org>
Date:      2023-05-05 17:39:40 +0000
URL:       https://git.openjdk.org/jdk/commit/65a54883b36693ad5b963e0fad9387e6aba38369
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Improve diagnosis of `IntlTest` framework,JDK-8306711,5099225,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,jlu,naoto,naoto,2023-04-23 17:52,2023-05-04 00:14,2023-10-01 09:56,2023-04-27 17:18,,,,,,,21,core-libs,,0,,,,,,,,,,,,,,"The test framework is used in java.text tests. While it is useful, analysing the output from the framework is difficult, as not much information is logged. For example, 

https://bugs.openjdk.org/browse/JDK-8305853

The log does not even record the actual exception thrown, let alone the thread dump, etc.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8305853,,,,,,,,,,,,generic,,,,,,,,,generic,,,,,,"0|i318rf:",9223372036854775807,b21,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6fc9e792,,,,,,,,,"2023-04-25 13:36;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/13655
Date: 2023-04-25 20:28:33 +0000;;;","2023-04-27 17:18;dukebot;Changeset: f3c90f04
Author:    Justin Lu <jlu@openjdk.org>
Date:      2023-04-28 00:16:29 +0000
URL:       https://git.openjdk.org/jdk/commit/f3c90f0445df359a8bc03630fc5cde2843bbfef1
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Region.layoutInArea uses incorrect snap scale value,JDK-8306708,5099221,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,mstrauss,mstrauss,mstrauss,2023-04-23 13:24,2023-04-27 05:58,2023-10-01 09:56,2023-04-24 08:26,jfx20,,,,,,jfx21,javafx,,0,,,,,,,,,,,,,,"In the following line, snapScaleX is used twice:

    child.resize(
        snapSize(size.x, isSnapToPixel, snapScaleX),                 
        snapSize(size.y, isSnapToPixel, snapScaleX));

Looks like a copy-and-paste bug.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i318qj:",9223372036854775807,b15,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4143e3f7,,,,,,,,,"2023-04-23 13:30;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jfx/pull/1112
Date: 2023-04-23 20:26:08 +0000;;;","2023-04-24 08:25;dukebot;Changeset: 9100a76f
Author:    Michael Strauß <mstrauss@openjdk.org>
Date:      2023-04-24 15:23:40 +0000
URL:       https://git.openjdk.org/jfx/commit/9100a76fbc63e4da11877877929094086330e4b5
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
com/sun/jdi/PopAndInvokeTest.java fails with NativeMethodException,JDK-8306705,5099218,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,cjplummer,dcubed,dcubed,2023-04-23 06:28,2023-07-20 16:45,2023-10-01 09:56,2023-04-26 10:34,21,,,,,,21,core-svc,,0,noreg-self,tier6,,,,,,,,,,,,"The following test failed in the JDK21 CI:

com/sun/jdi/PopAndInvokeTest.java

Here's a snippet from the log file:

----------System.out:(18/1082)----------
vmOpts: '-Xmx768m -XX:MaxRAMPercentage=6.25 -Dtest.boot.jdk=/opt/mach5/mesos/work_dir/jib-master/install/jdk/19/36/bundles/linux-aarch64/jdk-19_linux-aarch64_bin.tar.gz/jdk-19 -Djava.io.tmpdir=/opt/mach5/mesos/work_dir/slaves/741e9afd-8c02-45c3-b2e2-9db1450d0832-S43793/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/c3c67266-0d6b-489e-b298-99eac7c63975/runs/526c12d3-0a58-4a90-bbe8-db640a8ad765/testoutput/test-support/jtreg_open_test_jdk_jdk_jdi/tmp -ea -esa'
javaOpts: '-XX:+CreateCoredumpOnCrash -XX:+UseZGC'
JVM version:21-ea
JDI version: 21.0
JVM description: Java Debug Interface (Reference Implementation) version 21.0 
Java Debug Wire Protocol (Reference Implementation) version 21.0
JVM Debug Interface version 21.0
JVM version 21-ea (Java HotSpot(TM) 64-Bit Server VM, mixed mode, sharing)
    debuggee: Howdy!
Debugger: Popped back to the call to A()
Debugger: Doing invoke
    debuggee: invokee
Debugger: invoke done
Debugger: Resuming debuggee
    debuggee: in A
Debugger: Suspending debuggee
    debuggee: in waiter
Debugger: Popping frame for waiter
----------System.err:(16/883)----------
[1ms] run args: [PopAndInvokeTarg]
com.sun.jdi.NativeMethodException
	at jdk.jdi/com.sun.tools.jdi.StackFrameImpl.pop(StackFrameImpl.java:401)
	at jdk.jdi/com.sun.tools.jdi.ThreadReferenceImpl.popFrames(ThreadReferenceImpl.java:560)
	at PopAndInvokeTest.runOnce(PopAndInvokeTest.java:165)
	at PopAndInvokeTest.runTests(PopAndInvokeTest.java:114)
	at TestScaffold.startTests(TestScaffold.java:434)
	at PopAndInvokeTest.main(PopAndInvokeTest.java:91)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
	at java.base/java.lang.reflect.Method.invoke(Method.java:578)
	at com.sun.javatest.regtest.agent.MainActionHelper$AgentVMRunnable.run(MainActionHelper.java:312)
	at java.base/java.lang.Thread.run(Thread.java:1592)

JavaTest Message: Test threw exception: com.sun.jdi.NativeMethodException
JavaTest Message: shutting down test

result: Failed. Execution failed: `main' threw exception: com.sun.jdi.NativeMethodException

Please note this is not the same failure mode as:

JDK-8305632 Test com/sun/jdi/PopAndInvokeTest.java fails with OpaqueFrameException

which occurs with Loom.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8305632,,,,JDK-6417053,,,,,,,,,,,,aarch64,,,,,,,,,linux,,,,,,"0|i318pv:",9223372036854775807,b20,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@3397f701,,,,,,,,,"2023-04-24 14:34;cjplummer;Recently JDK-8305511 removed the ""@ignore 6951287 "", allowing this test to run. JDK-6951287 at first appears to be a different issue:

 com.sun.jdi.InternalException: Unexpected JDWP Error: 32

But error 32 is OPAQUE_FRAME, and the current JDI implementation for ThreadReferenceImpl.popFrames(), which is implemented by StackFrameImpl.pop() has:

            case JDWP.Error.OPAQUE_FRAME:
                if (thread.isVirtual()) {
                    throw new OpaqueFrameException();  // can only happen with virtual threads
                } else {
                    throw new NativeMethodException(); // can only happen with platform threads
                }

So the old failure mode for JDK-6951287 would currently produce the NativeMethodException we are seeing in this CR. However, this code is all new with the virtual threads support. Previously StackFrameImpl.pop() just allowed OPAQUE_FRAME to be handled by the default JDI error handler, which did not handle OPAQUE_FRAME at all, thus previously to changes for virtual thread support we would have indeed seen the ""Unexpected JDWP Error: 32"" message for this failure. It appears that the virtual thread support fixed this issues for getting ""Unexpected JDWP Error: 32"" instead of NativeMethodException

JDK-6951287 was closed as a dup of JDK-6417053, which was itself closed as CNR even though JDK-6417053 clearly explained that there is a bug in not properly  throwing NativeMethodException():

--------------------------
JDWP Error 32 is JDWP_ERROR_OPAQUE_FRAME. It is returned if
a frame-to-be-popped, or the frame being popped to is a frame
for a native method. I presume that is the case in this bug.

The JDI spec for ThreadReference.popFrames says it throws
NativeMethodException if one of the frames that would be
popped is that of a native method or if the frame previous to
<i>frame</i> is native.

The problem is that the JDI code (in StackFrameImpl.java::pop) does not check for
this JDWP error and throw a NativeMethodException. 
--------------------------

So the bug of not throwing NativeMethodException has now been fixed, and this test is now failing with NativeMethodException. The question is whether this NativeMethodException failure is a test bug or some other issue. It looks like a test bug to me. There appears to be a race condition. The debuggee has:

    public static void waiter() {
        if (waiting) {
            return;
        }
        waiting = true;
        System.out.println(""    debuggee: in waiter"");
        while (true) {
        }
    }

And the debugger waits for ""waiting == true"" (checked via JDI calls) before suspending and doing the popFrames(). The problem is the println() after setting ""waiting = true"". The debugger side can detect that ""waiting == true"" before the println() is complete, and the println() involves native code. I think the println() just needs be moved to before setting  ""waiting = true"".;;;","2023-04-25 13:24;cjplummer;I had a hard time reproducing this, so I decided to force the issue by putting the println in the loop rather than just doing one println before the loop, and also got rid of the sleep() on the debugger side of the test. It reproduces quite frequently now, although takes about 500 printlns to reproduce. Note in an earlier attempt I did 40 printlns before the loop and it reproduced 1 out of 400 runs, so it is possible to get it to reproduce with far fewer printlns, but the timing of the test make it normally require a lot.

Some of the failures end up being timeouts during test shutdown. Stack traces show the debuggee blocked in a println(). This is likely because the popFrames() call succeeded in popping frames while deep in the println() call stack, and this resulted in not properly releasing locks or related resource that now cannot be acquired.;;;","2023-04-25 14:13;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/13657
Date: 2023-04-25 21:07:34 +0000;;;","2023-04-26 10:34;dukebot;Changeset: 38cc0391
Author:    Chris Plummer <cjplummer@openjdk.org>
Date:      2023-04-26 17:32:05 +0000
URL:       https://git.openjdk.org/jdk/commit/38cc0391f3f7272167f92a4c2faa9fae21a26ef9
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Divide by zero in G1Policy::logged_cards_processing_time,JDK-8306695,5099200,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,kbarrett,kbarrett,kbarrett,2023-04-21 21:53,2023-05-01 10:08,2023-10-01 09:56,2023-04-24 21:20,21,,,,,,21,hotspot,,0,gc-g1,gc-pending-review,,,,,,,,,,,,"G1Policy::logged_cards_processing_time approximates the time spent processing logged cards (used as an input to concurrent refinement) using the total card processing time, the number of logged cards, and the total number of cards processed.  As written, if both card counts are zero it will perform a divide by zero operation.  This is particularly likely during early GCs.

This isn't causing crashes (it's a floating point division), but may be messing up early estimations.
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i318lv:",9223372036854775807,b20,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6b00f96c,,,,,,,,,"2023-04-22 18:08;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/13601
Date: 2023-04-23 01:01:53 +0000;;;","2023-04-24 21:20;dukebot;Changeset: 8063aa2e
Author:    Kim Barrett <kbarrett@openjdk.org>
Date:      2023-04-25 04:19:32 +0000
URL:       https://git.openjdk.org/jdk/commit/8063aa2e4a71d3f9f7867563bae92a4f75097b2a
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Open source several clipboard and color AWT tests,JDK-8306683,5099186,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,azvegint,azvegint,azvegint,2023-04-21 12:47,2023-05-23 10:24,2023-10-01 09:56,2023-04-25 13:27,,,,,,,21,client-libs,,0,jdk17u-fix-request,jdk17u-fix-yes,sn_142,test_sprint,,,,,,,,,,"java/awt/Clipboard/DelayedQueryTest/DelayedQueryTest.java
java/awt/Clipboard/NullContentsTest/NullContentsTest.java
java/awt/Clipboard/SerializeLocalFlavorTest/SerializeLocalFlavorTest.java
java/awt/ColorClass/ColorSerializationTest/ColorSerializationTest.java",,,,,,,,,,,JDK-8308710,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i318ir:",9223372036854775807,b20,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@5a9b3fd3,,,,,,,,,"2023-04-25 10:01;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/13647
Date: 2023-04-25 16:54:20 +0000;;;","2023-04-25 13:27;dukebot;Changeset: 1c2dadc3
Author:    Alexander Zvegintsev <azvegint@openjdk.org>
Date:      2023-04-25 20:26:45 +0000
URL:       https://git.openjdk.org/jdk/commit/1c2dadc31e8b732d43df5494437720bfbc3f5c8b
;;;","2023-05-19 10:49;vrudomet;[Fix request 17u]

Clean backport, new tests, low risk
Checked on macOS x64, linux x64, windows x64: tests pass;;;","2023-05-19 10:56;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/1380
Date: 2023-05-19 17:49:19 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Open source a few more AWT Choice tests,JDK-8306682,5099185,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,prr,prr,prr,2023-04-21 12:46,2023-06-30 01:01,2023-10-01 09:56,2023-04-24 19:47,17,,,,,,21,client-libs,,0,amazon-interest,jdk11u-fix-request,jdk11u-fix-yes,jdk17u-fix-request,jdk17u-fix-yes,noreg-self,sn_142,test_sprint,,,,,,,,,,,,,,,,,JDK-8308621,JDK-8311154,JDK-8308615,JDK-8309003,JDK-8311157,JDK-8308620,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i318ij:",9223372036854775807,b20,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@5a9b3fd3,,,,,,,,,"2023-04-24 10:48;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/13622
Date: 2023-04-24 17:39:20 +0000;;;","2023-04-24 19:47;dukebot;Changeset: f39641cc
Author:    Phil Race <prr@openjdk.org>
Date:      2023-04-25 02:46:13 +0000
URL:       https://git.openjdk.org/jdk/commit/f39641ccbd670853b3c021dd4e490151cbc77ed6
;;;","2023-06-29 11:46;goetz;Fix request [11u,17u]

I backport this for parity with 11.0.21,17.0.9-oracle.
No risk, only a test change.
Clean backport.
Tests pass.;;;","2023-06-29 11:54;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/1518
Date: 2023-06-29 18:46:21 +0000;;;","2023-06-29 12:02;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk11u-dev/pull/2010
Date: 2023-06-29 18:51:17 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Open source more AWT DnD related tests,JDK-8306681,5099183,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,dnguyen,dnguyen,dnguyen,2023-04-21 12:13,2023-05-23 10:18,2023-10-01 09:56,2023-04-28 12:21,11,17,20,21,,,21,client-libs,,0,jdk17u-fix-request,jdk17u-fix-yes,sn_142,test_sprint,,,,,,,,,,"Convert applet based focus tests into main based
java/awt/dnd/ZeroFormatTransferTest/ZeroFormatTransferableTest.html
java/awt/event/ComponentEvent/ComponentResizedTest/ComponentResizedTest.html
java/awt/event/ComponentEvent/ObjectSourceTest/ObjectSourceTest.html
java/awt/event/ComponentEvent/ResizeDeniedTest/ResizeDeniedTest.html
java/awt/event/FocusEvent/OppositeSerialization/OppositeSerialization.html
java/awt/event/HierarchyEvent/HierarchyEventOnWindowTest/HierarchyEventOnWindowTest.html",,,,,,,,,,,JDK-8308702,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i318i3:",9223372036854775807,b21,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@5a9b3fd3,,,,,,,,,"2023-04-26 11:07;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/13674
Date: 2023-04-26 18:00:14 +0000;;;","2023-04-28 12:21;dukebot;Changeset: 05af487a
Author:    Damon Nguyen <dnguyen@openjdk.org>
Date:      2023-04-28 19:20:16 +0000
URL:       https://git.openjdk.org/jdk/commit/05af487a2d9b85b87d13ea23776d04e52c67bf49
;;;","2023-05-18 11:44;vrudomet;[Fix request 17u] 

Clean backport, new tests, low risk
Checked on macOS x64, linux x64, windows x64: tests pass;;;","2023-05-18 12:38;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/1365
Date: 2023-05-18 19:30:09 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
[AARCH64] [lworld] TestCallingConventionC1 fails on AArch64 with -XX:+PatchALot,JDK-8306677,5099175,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,thartmann,thartmann,thartmann,2023-04-21 07:25,2023-04-24 05:25,2023-10-01 09:56,2023-04-21 07:48,repo-valhalla,,,,,,repo-valhalla,hotspot,,0,lw4,lworld,noreg-self,,,,,,,,,,,"Custom Run Test: @Run: run_test109_verifier - @Test: test109:
compiler.lib.ir_framework.shared.TestRunException: public int compiler.valhalla.inlinetypes.TestCallingConventionC1.test109(compiler.valhalla.inlinetypes.TestCallingConventionC1$Intf,int,int) not compiled after waiting for 10 s
	at compiler.lib.ir_framework.test.AbstractTest.waitForCompilation(AbstractTest.java:201)
	at compiler.lib.ir_framework.test.CustomRunTest.compileSingleTest(CustomRunTest.java:111)
	at compiler.lib.ir_framework.test.CustomRunTest.compileTest(CustomRunTest.java:101)
	at compiler.lib.ir_framework.test.AbstractTest.run(AbstractTest.java:102)
	at compiler.lib.ir_framework.test.CustomRunTest.run(CustomRunTest.java:89)
	at compiler.lib.ir_framework.test.TestVM.runTests(TestVM.java:825)
	at compiler.lib.ir_framework.test.TestVM.start(TestVM.java:250)
	at compiler.lib.ir_framework.test.TestVM.main(TestVM.java:165)


Custom Run Test: @Run: run_test108_verifier - @Test: test108:
compiler.lib.ir_framework.shared.TestRunException: public int compiler.valhalla.inlinetypes.TestCallingConventionC1.test108(compiler.valhalla.inlinetypes.TestCallingConventionC1$Intf,int,int) not compiled after waiting for 10 s
	at compiler.lib.ir_framework.test.AbstractTest.waitForCompilation(AbstractTest.java:201)
	at compiler.lib.ir_framework.test.CustomRunTest.compileSingleTest(CustomRunTest.java:111)
	at compiler.lib.ir_framework.test.CustomRunTest.compileTest(CustomRunTest.java:101)
	at compiler.lib.ir_framework.test.AbstractTest.run(AbstractTest.java:102)
	at compiler.lib.ir_framework.test.CustomRunTest.run(CustomRunTest.java:89)
	at compiler.lib.ir_framework.test.TestVM.runTests(TestVM.java:825)
	at compiler.lib.ir_framework.test.TestVM.start(TestVM.java:250)
	at compiler.lib.ir_framework.test.TestVM.main(TestVM.java:165)



	at compiler.lib.ir_framework.test.TestVM.runTests(TestVM.java:860)
	at compiler.lib.ir_framework.test.TestVM.start(TestVM.java:250)
	at compiler.lib.ir_framework.test.TestVM.main(TestVM.java:165)",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,aarch64,,,,,,,,,,,,,,,"0|i318gb:",9223372036854775807,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2023-04-21 07:45;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/valhalla/pull/842
Date: 2023-04-21 14:36:07 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
support offset in dll_address_to_library_name on AIX,JDK-8306672,5099169,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,mbaesken,mbaesken,mbaesken,2023-04-21 05:16,2023-05-04 00:14,2023-10-01 09:56,2023-04-28 06:10,21,,,,,,21,hotspot,,0,oraclejdk-na,,,,,,,,,,,,,"So far the offset return reference parameter was not supported on AIX, but always set to -1. This could be improved, it was already supported on other OS platforms like Linux.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,ppc,,,,,,,,,aix,,,,,,"0|i318ez:",9223372036854775807,b21,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,,,"2023-04-27 07:35;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/13692
Date: 2023-04-27 14:30:18 +0000;;;","2023-04-28 06:10;dukebot;Changeset: 5d9baa2f
Author:    JoKern65 <Joachim.kern@sap.com>
Committer: Matthias Baesken <mbaesken@openjdk.org>
Date:      2023-04-28 13:07:53 +0000
URL:       https://git.openjdk.org/jdk/commit/5d9baa2f9385d66cdf2ff8f065d165385eb48a22
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Some foreign tests fail on x86,JDK-8306668,5099164,Bug,Resolved,JDK,JDK,software,duke,,,P2,Fixed,mcimadamore,mcimadamore,mcimadamore,2023-04-21 03:05,2023-04-21 06:29,2023-10-01 09:56,2023-04-21 06:29,repo-panama,,,,,,,core-libs,,0,foreign-memaccess+abi,,,,,,,,,,,,,There are some test failures on x86 which are caused by missing adaptation from `long` to `int` in the var handle machinery. This adaptation has been accidentally dropped as part of https://git.openjdk.org/panama-foreign/pull/775.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i318dv:",9223372036854775807,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@28ce6b78,,,,,,,,,"2023-04-21 03:17;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/panama-foreign/pull/828
Date: 2023-04-21 10:09:08 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
RISC-V: Fix storeImmN0 matching rule by using zr register,JDK-8306667,5099163,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,xlinzheng,xlinzheng,xlinzheng,2023-04-21 03:03,2023-07-09 19:30,2023-10-01 09:56,2023-05-12 00:12,19,20,21,,,,21,hotspot,,0,oraclejdk-na,oracle-triage-21,,,,,,,,,,,,"The storeImmN0 matching rule as far as I know is from x86, which does not have a zero register. So it uses rheapbase as a zero register. The RISC-V backend ported this matching rule but did not specify the `CompressedOops::base() == NULL` predication so that under non-zero based compressed oops mode, the xheapbase can be a non-zero value and crashes the vm.

Reproduced by `<JDK>/bin/java -Xcomp -XX:HeapBaseMinAddress=72030M -version` simply. An hs_err file is attached below, triggered by `-XX:HeapBaseMinAddress=72030M` by using a springboot-helloworld program.

RISC-V also has a zero register x0, so we can use it to implement the matching rule.",,,,,,,,,,,JDK-8311762,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"2023-04-21 03:07;xlinzheng;hs_err_pid1391.log;https://bugs.openjdk.org/secure/attachment/103510/hs_err_pid1391.log",,,,,,,riscv,,,,,,,19,,linux,,,,,,"0|i318dn:",9223372036854775807,b23,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2023-05-11 16:15;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/13577
Date: 2023-04-21 10:16:44 +0000;;;","2023-05-12 00:12;dukebot;Changeset: e32de7ef
Author:    Xiaolin Zheng <xlinzheng@openjdk.org>
Committer: Fei Yang <fyang@openjdk.org>
Date:      2023-05-12 07:10:53 +0000
URL:       https://git.openjdk.org/jdk/commit/e32de7efd6f3173a0bba5829e8de3edd01cfdbab
;;;","2023-05-15 03:36;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/riscv-port-jdk17u/pull/51
Date: 2023-05-15 10:29:43 +0000;;;","2023-06-19 20:40;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/1427
Date: 2023-06-13 09:43:25 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
GHA: Update MSVC version to latest stepping,JDK-8306664,5099159,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,clanger,clanger,clanger,2023-04-21 02:45,2023-05-02 23:47,2023-10-01 09:56,2023-04-27 01:42,11,17,,,,,17.0.8,infrastructure,,0,jdk11u-fix-request,jdk11u-fix-yes,jdk17u-fix-request,jdk17u-fix-yes,,,,,,,,,,"In the GHA workflow of JDK Update releases, we're currently using older MSVC versions (for Visual Studio 2019) but not the current 14.29 for x86_64 builds.",,,,,,,,,,,JDK-8306984,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i318cr:",9223372036854775807,b01,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@429c566,,,,,,,,,"2023-04-21 03:01;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/1291
Date: 2023-04-21 09:54:07 +0000;;;","2023-04-21 03:11;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk11u-dev/pull/1845
Date: 2023-04-21 10:05:30 +0000;;;","2023-04-26 04:47;clanger;Fix request (17u, 11u)
Use latest Visual Studio 2019 version in GHA. This aligns the builds with head and Windows/aarch. It currently also saves us from installing the toolchain during GHA since it seems to be preinstalled on the Windows runner machines. Risk: None, product not affected.;;;","2023-04-27 01:41;dukebot;Changeset: ac823d34
Author:    Christoph Langer <clanger@openjdk.org>
Date:      2023-04-27 08:40:42 +0000
URL:       https://git.openjdk.org/jdk17u-dev/commit/ac823d3453dcb36551a104bbfdee386e11f68f2f
;;;","2023-05-02 23:31;dukebot;Changeset: ac823d34
Author:    Christoph Langer <clanger@openjdk.org>
Date:      2023-04-27 08:40:42 +0000
URL:       https://git.openjdk.org/jdk17u/commit/ac823d3453dcb36551a104bbfdee386e11f68f2f
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Open source AWT MenuItem related tests,JDK-8306652,5099146,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,abhiscxk,abhiscxk,abhiscxk,2023-04-21 00:07,2023-05-23 10:21,2023-10-01 09:56,2023-04-25 22:19,,,,,,,21,client-libs,,0,jdk17u-fix-request,jdk17u-fix-yes,sn_142,test_sprint,,,,,,,,,,"Convert applet based tests into main based 

java/awt/MenuItem/EnableTest/EnableTest.html
java/awt/MenuItem/MenuSetLabelTest/MenuSetLabelTest.html
java/awt/MenuItem/SetLabelWithPeerCreatedTest/SetLabelWithPeerCreatedTest.html
java/awt/MenuItem/SetStateTest/SetStateTest.html",,,,,,,,,,,JDK-8308709,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i3189v:",9223372036854775807,b20,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@5a9b3fd3,,,,,,,,,"2023-04-21 12:30;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/13589
Date: 2023-04-21 19:23:38 +0000;;;","2023-04-25 22:19;dukebot;Changeset: ed1ebd24
Author:    Abhishek Kumar <abhiscxk@openjdk.org>
Date:      2023-04-26 05:17:48 +0000
URL:       https://git.openjdk.org/jdk/commit/ed1ebd242a4bb82a7074564ea96dc3d26b78f9e1
;;;","2023-05-18 19:48;vrudomet;[Fix request 17u]

Clean backport, new tests, low risk
Checked on macOS x64, linux x64, windows x64: tests pass;;;","2023-05-18 19:55;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/1373
Date: 2023-05-19 02:48:10 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Open source several AWT TextArea related tests,JDK-8306640,5099133,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,tr,tr,tr,2023-04-20 23:08,2023-05-24 02:03,2023-10-01 09:56,2023-04-28 07:29,,,,,,,21,client-libs,,0,jdk17u-fix-request,jdk17u-fix-yes,sn_142,test_sprint,,,,,,,,,,"Convert Applet based TextArea test to Main based.

java/awt/TextArea/ReplaceRangeTest/ReplaceRangeTest.html
java/awt/TextArea/TextAreaCRLFAutoDetectTest/TextAreaCRLFAutoDetectTest.html
java/awt/TextArea/TextLengthTest/TextLengthTest.html
java/awt/TextArea/TextLimit/TextLimitTest.html",,,,,,,,,,,JDK-8308757,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,generic,,,,,,,,,generic,,,,,,"0|i3186z:",9223372036854775807,b21,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@5a9b3fd3,,,,,,,,,"2023-04-26 07:31;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/13670
Date: 2023-04-26 14:23:27 +0000;;;","2023-04-28 07:29;dukebot;Changeset: 169a7c27
Author:    Tejesh R <tr@openjdk.org>
Date:      2023-04-28 14:27:38 +0000
URL:       https://git.openjdk.org/jdk/commit/169a7c27a7c6521fbfb1e61fbe85e6d7b0470619
;;;","2023-05-18 11:44;vrudomet;[Fix request 17u] 

Clean backport, new tests, low risk
Checked on macOS x64, linux x64, windows x64: tests pass;;;","2023-05-18 13:04;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/1368
Date: 2023-05-18 19:44:13 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Open source some AWT tests related to datatransfer and Toolkit,JDK-8306638,5099131,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,jdv,jdv,jdv,2023-04-20 22:42,2023-07-05 04:33,2023-10-01 09:56,2023-05-15 21:09,17,21,,,,,21,client-libs,,0,amazon-interest,jdk11u-fix-request,jdk11u-fix-yes,jdk17u-fix-request,jdk17u-fix-yes,noreg-self,sn_142,sn_144,test_sprint,testbug,test-only,test-opensource,,Open source some AWT tests related to datatransfer and Toolkit,,,,,,,,,,,JDK-8309009,JDK-8308857,JDK-8311499,JDK-8308845,JDK-8311494,JDK-8308859,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,generic,,,,,,,,,generic,,,,,,"0|i3186j:",9223372036854775807,b23,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@5a9b3fd3,,,,,,,,,"2023-04-25 06:54;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/13642
Date: 2023-04-25 13:48:16 +0000;;;","2023-05-15 21:10;dukebot;Changeset: 2210e067
Author:    Jayathirth D V <jdv@openjdk.org>
Date:      2023-05-16 04:09:08 +0000
URL:       https://git.openjdk.org/jdk/commit/2210e06788d14dab38f78d8b20a2397e633195af
;;;","2023-07-04 08:53;goetz;Fix request [11u,17u]

I backport this for parity with 11.0.21-oracle,17.0.9-oracle.
No risk, only a test change.
Clean backport.
Tests pass. SAP nightly testing passed.;;;","2023-07-04 08:59;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/1540
Date: 2023-07-04 15:52:42 +0000;;;","2023-07-04 09:03;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk11u-dev/pull/2027
Date: 2023-07-04 15:55:37 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Disable compiler/c2/Test6905845.java with -XX:TieredStopAtLevel=3,JDK-8306636,5099129,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,rsunderbabu,rsunderbabu,rsunderbabu,2023-04-20 22:29,2023-07-10 09:34,2023-10-01 09:56,2023-04-23 19:21,11,17,21,,,,21,hotspot,,0,atr,jdk11u-fix-request,jdk11u-fix-yes,jdk17u-fix-request,jdk17u-fix-yes,noreg-self,oracle-triage-21,sqebug,,,,,,VM argument -XX:TieredStopAtLevel=3 doesn't make sense for a C2 test. Running the test with this flag is causing timeouts.,,,,,,,,,,,JDK-8311835,JDK-8306811,JDK-8311837,JDK-8306813,JDK-8307664,,,,,,,,,,,,,JDK-8287199,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i31863:",9223372036854775807,b20,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2023-04-20 23:19;thartmann;ILW = Test times out, single test with TieredStopAtLevel=3, no workaround = MLH = P4;;;","2023-04-21 06:19;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/13579
Date: 2023-04-21 13:11:41 +0000;;;","2023-04-23 19:21;dukebot;Changeset: 49005174
Author:    Ramkumar Sunderbabu <rsunderbabu@openjdk.org>
Committer: Fairoz Matte <fmatte@openjdk.org>
Date:      2023-04-24 02:19:10 +0000
URL:       https://git.openjdk.org/jdk/commit/4900517479f12b59cd8f1c31ad94ad7487c522f7
;;;","2023-07-05 02:34;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk11u-dev/pull/2028
Date: 2023-07-05 09:28:33 +0000;;;","2023-07-06 00:12;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/1551
Date: 2023-07-06 07:05:10 +0000;;;","2023-07-10 00:43;goetz;Fix request [11u, 17u]

I request fix on behalf of Andrew Lu.
He backports this for parity with 11.0.20-oracle,17.0.8-oracle.
No risk, only a test change.
Clean backport.
Test passes. SAP nightly testing passed.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Open source AWT Event related tests,JDK-8306634,5099121,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,honkar,honkar,honkar,2023-04-20 18:14,2023-09-29 08:43,2023-10-01 09:56,2023-04-21 16:56,11,17,20,21,,,21,client-libs,,0,sn_142,test_sprint,,,,,,,,,,,,Clean up and open source  AWT Event related tests,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,generic,,,,,,,,,generic,,,,,,"0|i3184b:",9223372036854775807,b20,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@5a9b3fd3,,,,,,,,,"2023-04-21 14:07;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/13590
Date: 2023-04-21 21:00:52 +0000;;;","2023-04-21 16:58;dukebot;Changeset: 9ed456fa
Author:    Harshitha Onkar <honkar@openjdk.org>
Date:      2023-04-21 23:56:04 +0000
URL:       https://git.openjdk.org/jdk/commit/9ed456fac87f598af7d71f9c0887234a09e10eed
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
(bf) CharBuffer::allocate throws unexpected exception type with some CharSequences,JDK-8306623,5099107,Bug,Closed,JDK,JDK,software,duke,,,P2,Fixed,bpb,dbessono,dbessono,2023-04-20 15:13,2023-07-24 10:17,2023-10-01 09:56,2023-04-25 13:21,21,,,,,,21,core-libs,,0,conformance,regression,tck-red-21,,,,,,,,,,,"Consider the following code:

        CharSequence csq = java.nio.CharBuffer.wrap(new char[]{'a', 'b', 'c', 'd', 'e', 'f', 'g'});
        // CharBuffer::allocate spec
        // Throws:
        //   BufferOverflowException – If there is insufficient space in this buffer
        //   IndexOutOfBoundsException – If start or end are negative, start is greater than end, or end is greater than csq.length()
        System.out.println(""csq.length() = "" + csq.length());
        int capacity = 1;
        java.nio.CharBuffer.allocate(capacity).append(csq, 0, 4);


The expectations are to get java.nio.BufferOverflowException which is the case for JDK21 b18, however for b19 IOOBE is thrown:

jshell>         java.nio.CharBuffer.allocate(1)
   ...>                 .append(java.nio.CharBuffer.wrap(new char[]{'a', 'b', 'c', 'd', 'e', 'f', 'g'}), 0, 4);
   ...> 
|  Exception java.lang.IndexOutOfBoundsException: Range [0, 0 + 4) out of bounds for length 1
|        at Preconditions.outOfBounds (Preconditions.java:100)
|        at Preconditions.outOfBoundsCheckFromIndexSize (Preconditions.java:118)
|        at Preconditions.checkFromIndexSize (Preconditions.java:397)
|        at Objects.checkFromIndexSize (Objects.java:437)
|        at CharBuffer.put (CharBuffer.java:1088)
|        at HeapCharBuffer.put (HeapCharBuffer.java:260)
|        at CharBuffer.append (CharBuffer.java:2050)
|        at HeapCharBuffer.append (HeapCharBuffer.java:329)
|        at (#5:2)
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JCK-7319182,JDK-8305811,,,JDK-8306374,JDK-8306959,,,,,,,,,,,,,,,,,b19,21,,,,,,,,"0|i31817:",9223372036854775807,b20,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@674604a9,,,,,,,Verified,,"2023-04-20 15:16;dbessono;Could be possibly caused by the JDK-8305811 fix ?;;;","2023-04-22 06:26;alanb;Yes, the changes mean the check for insufficient space in the buffer is skipped and the IndexOutOfBoundsException from the absolute bulk op is thrown instead.
;;;","2023-04-24 09:28;bpb;https://github.com/openjdk/jdk/pull/13415#pullrequestreview-1396740613;;;","2023-04-24 18:49;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/13632
Date: 2023-04-25 01:44:14 +0000;;;","2023-04-25 13:21;dukebot;Changeset: e3ccaa65
Author:    Brian Burkhalter <bpb@openjdk.org>
Date:      2023-04-25 20:18:19 +0000
URL:       https://git.openjdk.org/jdk/commit/e3ccaa6541e98aaa57b31a05cb998d48a0f7ee87
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Improve string formatting in EquivMapsGenerator.java,JDK-8306597,5099079,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,jlu,jlu,jlu,2023-04-20 13:23,2023-05-22 00:53,2023-10-01 09:56,2023-05-15 16:20,21,,,,,,21,core-libs,,0,noreg-cleanup,,,,,,,,,,,,,EquivMapsGenerator.java can use text blocks to replace the messy string concatenation.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,generic,,,,,,,,,generic,,,,,,"0|i317uz:",9223372036854775807,b23,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@7644fb4c,,,,,,,,,"2023-05-11 08:50;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/13935
Date: 2023-05-11 15:40:50 +0000;;;","2023-05-15 16:20;dukebot;Changeset: 31683722
Author:    Justin Lu <jlu@openjdk.org>
Date:      2023-05-15 23:19:02 +0000
URL:       https://git.openjdk.org/jdk/commit/316837226ecceb4daa14e2bc1be8ce120edbfdc9
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Fix nsk/jdi/stop/stop001 for virtual threads and remove from problem list,JDK-8306593,5099073,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,cjplummer,cjplummer,cjplummer,2023-04-20 13:02,2023-05-17 16:55,2023-10-01 09:56,2023-05-15 12:00,21,,,,,,21,core-svc,,0,loom,noreg-self,,,,,,,,,,,,"nsk/jdi/stop/stop001 is problem listed due to JDK-7034630, but that issue doesn't seem to reproduce anymore. It's suspected that it was only an issue on Solaris. For this reason stop001 should be removed from the problem list. However, it will fail due to lacking virtual thread support, so this issue also needs to be fixed at the same time. The issue is that for virtual threads, after work for JDK-8306434 and JDK-8306471 is complete, the test needs to expect IllegalThreadStateException rather than the stop() call succeeding.",,,,,,,,,,,,,,,,,,,JDK-8306471,JDK-8306434,,,,,,,,,,,,,,,,JDK-7034630,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i317tn:",9223372036854775807,b23,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@3397f701,,,,,,,,,"2023-05-12 13:53;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/13966
Date: 2023-05-12 20:46:41 +0000;;;","2023-05-15 12:00;dukebot;Changeset: cc80ada7
Author:    Chris Plummer <cjplummer@openjdk.org>
Date:      2023-05-15 18:59:08 +0000
URL:       https://git.openjdk.org/jdk/commit/cc80ada739066d0099085f1a388e96852f43a7d4
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Add Windows/macOS system files to .gitignore,JDK-8306590,5099070,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,angorya,angorya,angorya,2023-04-20 12:41,2023-05-23 11:08,2023-10-01 09:56,2023-04-26 09:16,jfx21,,,,,,jfx21,javafx,,0,github-bug,noreg-cleanup,,,,,,,,,,,,"Add the following file names to the root /.gitignore file:

# Ignore macOS files
.DS_Store
.DocumentRevisions-V100
.fseventsd
.Spotlight-V100
.TemporaryItems
.Trashes
.VolumeIcon.icns
.com.apple.timemachine.donotpresent

# ignore Windows files
Desktop.ini
Thumbs.db

",,,,,,,,,,,,,,,,,,,,,,,,,JDK-8223722,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i317sz:",9223372036854775807,b15,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@1d1c7815,,,,,,,,,"2023-04-20 13:37;kcr;This seems reasonable. We should check whether all of the patterns are really needed, e.g., are any of them legacy ones that no longer occur on today's systems?;;;","2023-04-25 13:19;angorya;some explanations:

# Ignore macOS files
.DS_Store
.DocumentRevisions-V100 // file backups
.fseventsd/ // contains log of file events 
.Spotlight-V100 // usb root
.Trashes/ // usb root 
.TemporaryItems/ 
.VolumeIcon.icns // attached disk icon
.com.apple.timemachine.donotpresent // time machine

# windows
Desktop.ini // folder view options
Thumbs.db // thumbnail cache;;;","2023-04-25 13:32;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jfx/pull/1116
Date: 2023-04-25 20:24:38 +0000;;;","2023-04-26 09:16;dukebot;Changeset: 0b36052c
Author:    Andy Goryachev <angorya@openjdk.org>
Date:      2023-04-26 16:14:15 +0000
URL:       https://git.openjdk.org/jfx/commit/0b36052caa25fb87137f32661c45092a801c66fd
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Start of release updates for JDK 22,JDK-8306584,5099062,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,darcy,darcy,darcy,2023-04-20 10:31,2023-06-12 20:58,2023-10-01 09:56,2023-06-08 09:04,22,,,,,,22,core-libs,,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8306628,,,,,,,,,JDK-8296149,,,,JDK-8307849,JDK-8309134,JDK-8306607,JDK-8307954,,,,,,,,,,,,,,,,,,,,,,,,"0|i317r7:",9223372036854775807,b01,,,,,,,,,,,"2023-05-22 23:44;darcy;Another Mach 5 job after first batch of language JEPs were merged:

https://mach5.us.oracle.com/mdash/jobs/darcy-jdk-20230523-0412-46255139

Failing tests:

build/version/CheckLts.java
vm/classfmt/clf/clfver001/clfver00103m001/clfver00103m001.html

(Code tested including only open changes so the CheckLts failure is expected.);;;","2023-05-23 13:34;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/13567
Date: 2023-04-20 20:28:18 +0000;;;","2023-06-08 09:04;dukebot;Changeset: 5a706fb4
Author:    Joe Darcy <darcy@openjdk.org>
Committer: Jesper Wilhelmsson <jwilhelm@openjdk.org>
Date:      2023-06-08 16:02:21 +0000
URL:       https://git.openjdk.org/jdk/commit/5a706fb403df0768ecef5b0ce14a3ca389a51efd
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
JVMCI tests failed when run with -XX:TypeProfileLevel=222 after JDK-8303431,JDK-8306581,5099058,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,dnsimon,kvn,kvn,2023-04-20 09:45,2023-04-26 23:15,2023-10-01 09:56,2023-04-21 00:14,21,,,,,,21,hotspot,,0,c1,oracle-triage-11,oracle-triage-17,oracle-triage-21,regression,,,,,,,,,"JDK-8303431 modified some JVMCI tests and now next 2 tests failed in C1 compiled new Java code in our stress testing. It could be existing issue in C1.

compiler/jvmci/jdk.vm.ci.runtime.test/src/jdk/vm/ci/runtime/test/TestResolvedJavaMethod.java
compiler/jvmci/jdk.vm.ci.runtime.test/src/jdk/vm/ci/runtime/test/TestResolvedJavaType.java

#  Internal Error (/workspace/open/src/hotspot/cpu/x86/macroAssembler_x86.cpp:829), pid=2430194, tid=2430218
#  fatal error: DEBUG MESSAGE: exact klass and actual klass differ

Current thread (0x00007f9ff8460480):  JavaThread ""MainThread"" [_thread_in_Java, id=2430218, stack(0x00007f9fe06b7000,0x00007f9fe07b8000)]

Stack: [0x00007f9fe06b7000,0x00007f9fe07b8000],  sp=0x00007f9fe07b44e0,  free space=1013k
Native frames: (J=compiled Java code, j=interpreted, Vv=VM code, C=native code)
V  [libjvm.so+0x12b8d35]  MacroAssembler::debug64(char*, long, long*)+0x45  (macroAssembler_x86.cpp:829)
J 1935 c1 sun.reflect.annotation.AnnotationParser.parseAnnotation2(Ljava/nio/ByteBuffer;Ljdk/internal/reflect/ConstantPool;Ljava/lang/Class;Z[Ljava/lang/Class;)Ljava/lang/annotation/Annotation; java.base@21-internal (275 bytes) @ 0x00007f9fe10d4cc6 [0x00007f9fe10d4740+0x0000000000000586]

[error occurred during error reporting (printing native stack (with source info))
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8303431,,,,,,,,,"2023-04-20 11:09;dnsimon;hs_err_pid2342.log;https://bugs.openjdk.org/secure/attachment/103508/hs_err_pid2342.log",,,,,,,generic,,,,,,,,,generic,,,,,,"0|i317qb:",9223372036854775807,b20,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2023-04-20 12:15;dnsimon;This is caused by allocating an Object[] in native code (https://github.com/openjdk/jdk/commit/48fd4f2bd37562a159e4089b15aa108e0b1bebeb#diff-c8d24aa5ec59cf15ded545e3a34a1546758691a96bfe1342fdcb2aaf9cf9a696R2719) and passing it to a method parameter whose type is Class[].;;;","2023-04-20 12:36;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/13566
Date: 2023-04-20 19:31:14 +0000;;;","2023-04-20 15:41;dlong;ILW = test failure; when using annotations; no workaround = MMH = P3;;;","2023-04-21 00:14;dukebot;Changeset: fdaabd6e
Author:    Doug Simon <dnsimon@openjdk.org>
Date:      2023-04-21 07:13:50 +0000
URL:       https://git.openjdk.org/jdk/commit/fdaabd6eecd86d1a8b1d1a4ed11cd03996d1db65
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Clean up and open source four Dialog related tests,JDK-8306575,5099051,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,kizune,kizune,kizune,2023-04-20 08:47,2023-09-13 14:01,2023-10-01 09:56,2023-04-21 17:16,,,,,,,21,client-libs,,0,jdk11u-fix-request,jdk11u-fix-yes,jdk17u-fix-request,jdk17u-fix-yes,noreg-self,sn_142,test_sprint,,,,,,,"Clean up and opensource four additional tests related to java.awt.Dialog
DialogDeadlockTest.java
DialogLocationTest
ModalDialogOnNonEdt
NewMessagePumpTest",,,,,,,,,,,JDK-8311250,JDK-8308866,JDK-8309010,JDK-8308867,JDK-8308926,JDK-8316222,,,,,,,,,,,,,,,,,,,,JDK-8308919,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i317or:",9223372036854775807,b20,,,,,,,,,,,"2023-04-21 14:19;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/13592
Date: 2023-04-21 21:11:46 +0000;;;","2023-04-21 17:16;dukebot;Changeset: 8d696aea
Author:    Alexander Zuev <kizune@openjdk.org>
Date:      2023-04-22 00:14:51 +0000
URL:       https://git.openjdk.org/jdk/commit/8d696aea9e1cefca97a760c017a5fde545facaa9
;;;","2023-06-29 09:14;goetz;Fix request [17u]

I backport this for parity with 17.0.9-oracle.
No risk, only a test change.
Clean backport.
Tests pass;;;","2023-06-29 09:20;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/1513
Date: 2023-06-29 16:14:16 +0000;;;","2023-08-17 23:09;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk11u-dev/pull/2088
Date: 2023-08-18 06:00:38 +0000;;;","2023-08-21 18:44;andrewlu;Fix request [11u]

I backport this for parity with 11.0.21-oracle.
No risk, only a test change.
DialogLocationTest was modified for some methods not supported in 11.
Test passes. SAP nightly testing passed.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
[testbug] Skip Tree/TableViewResizeColumnToFitContentTest with fractional screen scale,JDK-8306571,5099046,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,angorya,angorya,angorya,2023-04-20 08:10,2023-04-26 06:15,2023-10-01 09:56,2023-04-20 09:29,jfx20,,,,,,jfx21,javafx,,0,noreg-self,sn_142,test_sprint,testbug,,,,,,,,,,"This change is to (temporary) skip parts of TableViewResizeColumnToFitContentTest and TreeTableViewResizeColumnToFitContentTest on systems with fractional screen scale, until JDK-8299753 is implemented.

",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8305709,JDK-8299753,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i317nn:",9223372036854775807,b14,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@67282485,,,,,,,,,"2023-04-20 09:10;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jfx/pull/1105
Date: 2023-04-20 15:31:10 +0000;;;","2023-04-20 09:29;dukebot;Changeset: cf1e991c
Author:    Andy Goryachev <angorya@openjdk.org>
Date:      2023-04-20 16:26:56 +0000
URL:       https://git.openjdk.org/jfx/commit/cf1e991c796942c50001e621dbd29984415cdbd3
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
[lworld] Oop verification failure in InlineKlass::returned_inline_klass,JDK-8306568,5099042,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,thartmann,thartmann,thartmann,2023-04-20 07:15,2023-04-21 03:59,2023-10-01 09:56,2023-04-21 03:59,repo-valhalla,,,,,,repo-valhalla,hotspot,,0,intermittent,lw4,lworld,zgc,,,,,,,,,,"InlineOops.java fails intermittently with -XX:+VerifyOops

vtClass=primitive class runtime.valhalla.inlinetypes.Person
Failed: 0x0000100001701238 -> 0x0000040000e95210
Heap
 ZHeap           used 24M, capacity 128M, max capacity 128M
 Metaspace       used 9194K, committed 9472K, reserved 1114112K
  class space    used 800K, committed 960K, reserved 1048576K

{method}
 - this oop:          0x00007f68a8413268
 - method holder:     'java/lang/invoke/LambdaForm$Name'
 - constants:         0x00007f68a8411888 constant pool [361] {0x00007f68a8411888} for 'java/lang/invoke/LambdaForm$Name' cache=0x00007f68a8415110
 - access:            0x0  
 - name:              'type'
 - signature:         '()Ljava/lang/invoke/LambdaForm$BasicType;'
 - max stack:         2
 - max locals:        1
 - size of params:    1
 - method size:       16
 - highest level:     1
 - vtable index:      -2
 - i2i entry:         0x00007f6ad0559680
 - adapters:          AHE@0x00007f6ad8078230: 0xb0000000 i2c: 0x00007f6ad067c3e0 c2i: 0x00007f6ad067c48a c2iVE: 0x00007f6ad067c48a c2iVROE: 0x00007f6ad067c48a c2iUE: 0x00007f6ad067c465 c2iUVE: 0x00007f6ad067c465 c2iNCI: 0x00007f6ad067c4c4
 - compiled entry           0x00007f6ad0ae1d00
 - compiled inline entry    0x00007f6ad0ae1d00
 - compiled inline ro entry 0x00007f6ad0ae1d00
 - code size:         5
 - code start:        0x00007f68a8413250
 - code end (excl):   0x00007f68a8413255
 - checked ex length: 0
 - linenumber start:  0x00007f68a8413255
 - localvar length:   1
 - localvar start:    0x00007f68a841325a
 - compiled code: nmethod    817  141       1       java.lang.invoke.LambdaForm$Name::type (5 bytes)


# A fatal error has been detected by the Java Runtime Environment:
#
#  Internal Error (/oracle/valhalla/open/src/hotspot/share/oops/instanceKlass.cpp:3954), pid=215271, tid=215295
#  guarantee(false) failed: boom
#
# JRE version: Java(TM) SE Runtime Environment (21.0) (fastdebug build 21-lworld4ea-LTS-2023-02-06-0803323.tobias...)
# Java VM: Java HotSpot(TM) 64-Bit Server VM (fastdebug 21-lworld4ea-LTS-2023-02-06-0803323.tobias..., mixed mode, tiered, compressed class ptrs, z gc, linux-amd64)
# Problematic frame:
# V  [libjvm.so+0x104df6b]  void OopOopIterateDispatch<VerifyFieldClosure>::Table::oop_oop_iterate<InstanceKlass, oop>(VerifyFieldClosure*, oop, Klass*)+0x2fb
#
# No core dump will be written. Core dumps have been disabled. To enable core dumping, try ""ulimit -c unlimited"" before starting Java again
#
# If you would like to submit a bug report, please visit:
#   https://bugreport.java.com/bugreport/crash.jsp
#

---------------  S U M M A R Y ------------

Command Line: -Dtest.vm.opts=-XX:+VerifyOops -XX:+VerifyStack -XX:+VerifyLastFrame -XX:+VerifyBeforeGC -XX:+VerifyAfterGC -XX:+VerifyDuringGC -Djdk.test.lib.random.seed=-2863136324025569010 -Dtest.tool.vm.opts=-J-XX:+VerifyOops -J-XX:+VerifyStack -J-XX:+VerifyLastFrame -J-XX:+VerifyBeforeGC -J-XX:+VerifyAfterGC -J-XX:+VerifyDuringGC -J-Djdk.test.lib.random.seed=-2863136324025569010 -Dtest.compiler.opts= -Dtest.java.opts= -Dtest.jdk=/oracle/valhalla/build/fastdebug/jdk -Dcompile.jdk=/oracle/valhalla/build/fastdebug/jdk -Dtest.timeout.factor=10.0 -Dtest.root=/oracle/valhalla/open/test/hotspot/jtreg -Dtest.name=runtime/valhalla/inlinetypes/InlineOops.java#id3 -Dtest.file=/oracle/valhalla/open/test/hotspot/jtreg/runtime/valhalla/inlinetypes/InlineOops.java -Dtest.src=/oracle/valhalla/open/test/hotspot/jtreg/runtime/valhalla/inlinetypes -Dtest.src.path=/oracle/valhalla/open/test/hotspot/jtreg/runtime/valhalla/inlinetypes:/oracle/valhalla/open/test/lib:/oracle/valhalla/open/test/jdk/lib/testlibrary/bytecode:/oracle/valhalla/open/test/jdk/java/lang/invoke/common -Dtest.classes=/oracle/valhalla/open/JTwork/classes/runtime/valhalla/inlinetypes/InlineOops_id3.d -Dtest.class.path=/oracle/valhalla/open/JTwork/classes/runtime/valhalla/inlinetypes/InlineOops_id3.d:/oracle/valhalla/open/JTwork/classes/test/lib:/oracle/valhalla/open/JTwork/classes/test/jdk/lib/testlibrary/bytecode:/oracle/valhalla/open/JTwork/classes/test/jdk/java/lang/invoke/common -Dtest.modules=java.base/jdk.internal.value --add-modules=java.base --add-exports=java.base/jdk.internal.value=ALL-UNNAMED -XX:+VerifyOops -XX:+VerifyStack -XX:+VerifyLastFrame -XX:+VerifyBeforeGC -XX:+VerifyAfterGC -XX:+VerifyDuringGC -Djdk.test.lib.random.seed=-2863136324025569010 -XX:+EnableValhalla -XX:+EnablePrimitiveClasses -XX:+UnlockExperimentalVMOptions -XX:+UseZGC -Xmx128m -XX:+UnlockDiagnosticVMOptions -XX:+ZVerifyViews -XX:InlineFieldMaxFlatSize=128 -Xbootclasspath/a:. -XX:+UnlockDiagnosticVMOptions -XX:+WhiteBoxAPI com.sun.javatest.regtest.agent.MainWrapper /oracle/valhalla/open/JTwork/runtime/valhalla/inlinetypes/InlineOops_id3.d/main.2.jta

Host: prometheus, Intel(R) Core(TM) i7-9850H CPU @ 2.60GHz, 12 cores, 31G, Ubuntu 20.04.4 LTS
Time: Thu Apr 20 15:53:18 2023 CEST elapsed time: 2.751158 seconds (0d 0h 0m 2s)

---------------  T H R E A D  ---------------

Current thread (0x00007f02c86900a0):  JavaThread ""MainThread"" [_thread_in_vm, id=215295, stack(0x00007f02cc38e000,0x00007f02cc48f000)]

Stack: [0x00007f02cc38e000,0x00007f02cc48f000],  sp=0x00007f02cc488c50,  free space=1003k
Native frames: (J=compiled Java code, j=interpreted, Vv=VM code, C=native code)
V  [libjvm.so+0x104df6b]  void OopOopIterateDispatch<VerifyFieldClosure>::Table::oop_oop_iterate<InstanceKlass, oop>(VerifyFieldClosure*, oop, Klass*)+0x2fb  (instanceKlass.cpp:3954)
V  [libjvm.so+0x104b12a]  InstanceKlass::oop_verify_on(oop, outputStream*)+0x9a  (iterator.inline.hpp:302)
V  [libjvm.so+0x1761d56]  oopDesc::verify(oopDesc*)+0x66  (oop.cpp:90)
V  [libjvm.so+0x101f3a5]  InlineKlass::returned_inline_klass(RegisterMap const&)+0x135  (inlineKlass.cpp:499)
V  [libjvm.so+0x1912f79]  ThreadSafepointState::handle_polling_page_exception()+0x1769  (safepoint.cpp:930)
V  [libjvm.so+0x1913e10]  SafepointSynchronize::handle_polling_page_exception(JavaThread*)+0x100  (safepoint.cpp:755)
v  ~SafepointBlob 0x00007f02c067e79b
j  java.lang.invoke.InvokerBytecodeGenerator.emitStaticInvoke(Ljava/lang/invoke/MemberName;Ljava/lang/invoke/LambdaForm$Name;)V+41 java.base
j  java.lang.invoke.InvokerBytecodeGenerator.addMethod()V+698 java.base
j  java.lang.invoke.InvokerBytecodeGenerator.generateCustomizedCodeBytes()[B+6 java.base
j  java.lang.invoke.InvokerBytecodeGenerator.generateCustomizedCode(Ljava/lang/invoke/LambdaForm;Ljava/lang/invoke/MethodType;)Ljava/lang/invoke/MemberName;+27 java.base
j  java.lang.invoke.LambdaForm.compileToBytecode()V+69 java.base
j  java.lang.invoke.DirectMethodHandle.makePreparedLambdaForm(Ljava/lang/invoke/MethodType;I)Ljava/lang/invoke/LambdaForm;+750 java.base
j  java.lang.invoke.DirectMethodHandle.preparedLambdaForm(Ljava/lang/invoke/MethodType;I)Ljava/lang/invoke/LambdaForm;+17 java.base
j  java.lang.invoke.DirectMethodHandle.preparedLambdaForm(Ljava/lang/invoke/MemberName;Z)Ljava/lang/invoke/LambdaForm;+159 java.base
j  java.lang.invoke.DirectMethodHandle.preparedLambdaForm(Ljava/lang/invoke/MemberName;)Ljava/lang/invoke/LambdaForm;+2 java.base
j  java.lang.invoke.DirectMethodHandle.make(BLjava/lang/Class;Ljava/lang/invoke/MemberName;Ljava/lang/Class;)Ljava/lang/invoke/DirectMethodHandle;+183 java.base
j  java.lang.invoke.MethodHandles$Lookup.getDirectMethodCommon(BLjava/lang/Class;Ljava/lang/invoke/MemberName;ZZLjava/lang/invoke/MethodHandles$Lookup;)Ljava/lang/invoke/MethodHandle;+210 java.base
j  java.lang.invoke.MethodHandles$Lookup.getDirectMethodNoSecurityManager(BLjava/lang/Class;Ljava/lang/invoke/MemberName;Ljava/lang/invoke/MethodHandles$Lookup;)Ljava/lang/invoke/MethodHandle;+14 java.base
j  java.lang.invoke.MethodHandles$Lookup.getDirectMethodForConstant(BLjava/lang/Class;Ljava/lang/invoke/MemberName;)Ljava/lang/invoke/MethodHandle;+31 java.base
j  java.lang.invoke.MethodHandles$Lookup.linkMethodHandleConstant(BLjava/lang/Class;Ljava/lang/String;Ljava/lang/Object;)Ljava/lang/invoke/MethodHandle;+153 java.base
j  java.lang.invoke.MethodHandleNatives.linkMethodHandleConstant(Ljava/lang/Class;ILjava/lang/Class;Ljava/lang/String;Ljava/lang/Object;)Ljava/lang/invoke/MethodHandle;+38 java.base
v  ~StubRoutines::call_stub 0x00007f02c0537d33
V  [libjvm.so+0x109f53d]  JavaCalls::call_helper(JavaValue*, methodHandle const&, JavaCallArguments*, JavaThread*)+0x56d  (javaCalls.cpp:445)
V  [libjvm.so+0x10a0dc2]  JavaCalls::call_static(JavaValue*, Klass*, Symbol*, Symbol*, JavaCallArguments*, JavaThread*)+0x292  (javaCalls.cpp:347)
V  [libjvm.so+0x1abdca7]  SystemDictionary::link_method_handle_constant(Klass*, int, Klass*, Symbol*, Symbol*, JavaThread*)+0x4a7  (systemDictionary.cpp:2458)
V  [libjvm.so+0xba6794]  ConstantPool::resolve_constant_at_impl(constantPoolHandle const&, int, int, bool*, JavaThread*)+0xa24  (constantPool.cpp:1152)
V  [libjvm.so+0xba7733]  ConstantPool::copy_bootstrap_arguments_at_impl(constantPoolHandle const&, int, int, int, objArrayHandle, int, bool, Handle, JavaThread*)+0x3a3  (constantPool.hpp:738)
V  [libjvm.so+0x7a851d]  BootstrapInfo::resolve_args(JavaThread*)+0xf8d  (constantPool.hpp:751)
V  [libjvm.so+0x7ab670]  BootstrapInfo::resolve_bsm(JavaThread*)+0x1390  (bootstrapInfo.cpp:107)
V  [libjvm.so+0x1ac003e]  SystemDictionary::invoke_bootstrap_method(BootstrapInfo&, JavaThread*)+0x4e  (systemDictionary.cpp:2471)
V  [libjvm.so+0x14a17d5]  LinkResolver::resolve_dynamic_call(CallInfo&, BootstrapInfo&, JavaThread*)+0x25  (linkResolver.cpp:1845)
V  [libjvm.so+0x14a1d36]  LinkResolver::resolve_invokedynamic(CallInfo&, constantPoolHandle const&, int, JavaThread*)+0x126  (linkResolver.cpp:1817)
V  [libjvm.so+0x1084c82]  InterpreterRuntime::resolve_invokedynamic(JavaThread*)+0x1a2  (interpreterRuntime.cpp:1209)
V  [libjvm.so+0x1089a58]  InterpreterRuntime::resolve_from_cache(JavaThread*, Bytecodes::Code)+0x1a8  (interpreterRuntime.cpp:1239)
j  runtime.valhalla.inlinetypes.InlineOops.submitNewWork(Ljava/util/concurrent/ForkJoinPool;)V+9
j  runtime.valhalla.inlinetypes.InlineOops.testActiveGc()V+85
j  runtime.valhalla.inlinetypes.InlineOops.main([Ljava/lang/String;)V+32
j  java.lang.invoke.LambdaForm$DMH+0x00000000800c7800.invokeStatic(Ljava/lang/Object;Ljava/lang/Object;)V+10 java.base
j  java.lang.invoke.LambdaForm$MH+0x00000000800c9400.invoke(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;+33 java.base
j  java.lang.invoke.LambdaForm$MH+0x00000000800c9800.invokeExact_MT(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;+20 java.base
j  jdk.internal.reflect.DirectMethodHandleAccessor.invokeImpl(Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/Object;+55 java.base
j  jdk.internal.reflect.DirectMethodHandleAccessor.invoke(Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/Object;+23 java.base
j  java.lang.reflect.Method.invoke(Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/Object;+102 java.base
j  com.sun.javatest.regtest.agent.MainWrapper$MainThread.run()V+134
j  java.lang.Thread.runWith(Ljava/lang/Object;Ljava/lang/Runnable;)V+5 java.base
j  java.lang.Thread.run()V+19 java.base
v  ~StubRoutines::call_stub 0x00007f02c0537d33
V  [libjvm.so+0x109f53d]  JavaCalls::call_helper(JavaValue*, methodHandle const&, JavaCallArguments*, JavaThread*)+0x56d  (javaCalls.cpp:445)
V  [libjvm.so+0x10a0372]  JavaCalls::call_virtual(JavaValue*, Klass*, Symbol*, Symbol*, JavaCallArguments*, JavaThread*)+0x442  (javaCalls.cpp:347)
V  [libjvm.so+0x10a09c1]  JavaCalls::call_virtual(JavaValue*, Handle, Klass*, Symbol*, Symbol*, JavaThread*)+0x71  (javaCalls.cpp:196)
V  [libjvm.so+0x122447b]  thread_entry(JavaThread*, JavaThread*)+0x12b  (jvm.cpp:3005)
V  [libjvm.so+0x10d6bc6]  JavaThread::thread_main_inner()+0x206  (javaThread.cpp:711)
V  [libjvm.so+0x1b261a0]  Thread::call_run()+0x100  (thread.cpp:224)
V  [libjvm.so+0x1797d23]  thread_native_entry(Thread*)+0x103  (os_linux.cpp:739)
Java frames: (J=compiled Java code, j=interpreted, Vv=VM code)
v  ~SafepointBlob 0x00007f02c067e79b
j  java.lang.invoke.InvokerBytecodeGenerator.emitStaticInvoke(Ljava/lang/invoke/MemberName;Ljava/lang/invoke/LambdaForm$Name;)V+41 java.base
j  java.lang.invoke.InvokerBytecodeGenerator.addMethod()V+698 java.base
j  java.lang.invoke.InvokerBytecodeGenerator.generateCustomizedCodeBytes()[B+6 java.base
j  java.lang.invoke.InvokerBytecodeGenerator.generateCustomizedCode(Ljava/lang/invoke/LambdaForm;Ljava/lang/invoke/MethodType;)Ljava/lang/invoke/MemberName;+27 java.base
j  java.lang.invoke.LambdaForm.compileToBytecode()V+69 java.base
j  java.lang.invoke.DirectMethodHandle.makePreparedLambdaForm(Ljava/lang/invoke/MethodType;I)Ljava/lang/invoke/LambdaForm;+750 java.base
j  java.lang.invoke.DirectMethodHandle.preparedLambdaForm(Ljava/lang/invoke/MethodType;I)Ljava/lang/invoke/LambdaForm;+17 java.base
j  java.lang.invoke.DirectMethodHandle.preparedLambdaForm(Ljava/lang/invoke/MemberName;Z)Ljava/lang/invoke/LambdaForm;+159 java.base
j  java.lang.invoke.DirectMethodHandle.preparedLambdaForm(Ljava/lang/invoke/MemberName;)Ljava/lang/invoke/LambdaForm;+2 java.base
j  java.lang.invoke.DirectMethodHandle.make(BLjava/lang/Class;Ljava/lang/invoke/MemberName;Ljava/lang/Class;)Ljava/lang/invoke/DirectMethodHandle;+183 java.base
j  java.lang.invoke.MethodHandles$Lookup.getDirectMethodCommon(BLjava/lang/Class;Ljava/lang/invoke/MemberName;ZZLjava/lang/invoke/MethodHandles$Lookup;)Ljava/lang/invoke/MethodHandle;+210 java.base
j  java.lang.invoke.MethodHandles$Lookup.getDirectMethodNoSecurityManager(BLjava/lang/Class;Ljava/lang/invoke/MemberName;Ljava/lang/invoke/MethodHandles$Lookup;)Ljava/lang/invoke/MethodHandle;+14 java.base
j  java.lang.invoke.MethodHandles$Lookup.getDirectMethodForConstant(BLjava/lang/Class;Ljava/lang/invoke/MemberName;)Ljava/lang/invoke/MethodHandle;+31 java.base
j  java.lang.invoke.MethodHandles$Lookup.linkMethodHandleConstant(BLjava/lang/Class;Ljava/lang/String;Ljava/lang/Object;)Ljava/lang/invoke/MethodHandle;+153 java.base
j  java.lang.invoke.MethodHandleNatives.linkMethodHandleConstant(Ljava/lang/Class;ILjava/lang/Class;Ljava/lang/String;Ljava/lang/Object;)Ljava/lang/invoke/MethodHandle;+38 java.base
v  ~StubRoutines::call_stub 0x00007f02c0537d33
j  runtime.valhalla.inlinetypes.InlineOops.submitNewWork(Ljava/util/concurrent/ForkJoinPool;)V+9
j  runtime.valhalla.inlinetypes.InlineOops.testActiveGc()V+85
j  runtime.valhalla.inlinetypes.InlineOops.main([Ljava/lang/String;)V+32
j  java.lang.invoke.LambdaForm$DMH+0x00000000800c7800.invokeStatic(Ljava/lang/Object;Ljava/lang/Object;)V+10 java.base
j  java.lang.invoke.LambdaForm$MH+0x00000000800c9400.invoke(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;+33 java.base
j  java.lang.invoke.LambdaForm$MH+0x00000000800c9800.invokeExact_MT(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;+20 java.base
j  jdk.internal.reflect.DirectMethodHandleAccessor.invokeImpl(Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/Object;+55 java.base
j  jdk.internal.reflect.DirectMethodHandleAccessor.invoke(Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/Object;+23 java.base
j  java.lang.reflect.Method.invoke(Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/Object;+102 java.base
j  com.sun.javatest.regtest.agent.MainWrapper$MainThread.run()V+134
j  java.lang.Thread.runWith(Ljava/lang/Object;Ljava/lang/Runnable;)V+5 java.base
j  java.lang.Thread.run()V+19 java.base
v  ~StubRoutines::call_stub 0x00007f02c0537d33",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8241894,,,,,"2023-04-20 08:11;thartmann;hs_err_pid255398.log;https://bugs.openjdk.org/secure/attachment/103506/hs_err_pid255398.log","2023-04-20 08:14;thartmann;hs_err_pid258695.log;https://bugs.openjdk.org/secure/attachment/103507/hs_err_pid258695.log",,,,,,,,,,,,,,,,,,,,,"0|i317mr:",9223372036854775807,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2023-04-20 07:20;thartmann;Different failure mode:

{method}
 - this oop:          0x00007f5f04707360
 - method holder:     'runtime/valhalla/inlinetypes/InlineOops'
 - constants:         0x00007f5f04704618 constant pool [521]/operands[49] {0x00007f5f04704618} for 'runtime/valhalla/inlinetypes/InlineOops' cache=0x00007f5f04708048
 - access:            0x8  static 
 - name:              'createPeople'
 - signature:         '()Ljava/lang/Object;'
 - max stack:         4
 - max locals:        3
 - size of params:    0
 - method size:       16
 - highest level:     3
 - vtable index:      -2
 - i2i entry:         0x00007f612c559680
 - adapters:          AHE@0x00007f6134078080: 0x i2c: 0x00007f612c66ee60 c2i: 0x00007f612c66ef06 c2iVE: 0x00007f612c66ef06 c2iVROE: 0x00007f612c66ef06 c2iUE: 0x00007f612c66eee1 c2iUVE: 0x00007f612c66eee1 c2iNCI: 0x00007f612c66ef40
 - compiled entry           0x00007f61251c7ea0
 - compiled inline entry    0x00007f61251c7ea0
 - compiled inline ro entry 0x00007f61251c7ea0
 - code size:         31
 - code start:        0x00007f5f04707330
 - code end (excl):   0x00007f5f0470734f
 - method data:       0x00007f5f047455b0
 - checked ex length: 0
 - linenumber start:  0x00007f5f0470734f
 - localvar length:   0
 - compiled code: nmethod   1323  706       3       runtime.valhalla.inlinetypes.InlineOops::createPeople (31 bytes)


# A fatal error has been detected by the Java Runtime Environment:
#
#  Internal Error (/oracle/valhalla/open/src/hotspot/share/oops/oop.cpp:133), pid=221534, tid=221558
#  guarantee(oopDesc::is_oop_or_null(obj)) failed: invalid oop: 0x0000040000d2be30
#
# JRE version: Java(TM) SE Runtime Environment (21.0) (fastdebug build 21-lworld4ea-LTS-2023-02-06-0803323.tobias...)
# Java VM: Java HotSpot(TM) 64-Bit Server VM (fastdebug 21-lworld4ea-LTS-2023-02-06-0803323.tobias..., mixed mode, tiered, compressed class ptrs, z gc, linux-amd64)
# Problematic frame:
# V  [libjvm.so+0x176cad4]  void VerifyOopClosure::do_oop_work<oop>(oop*)+0xe4
#

Stack: [0x00007f5ef36f6000,0x00007f5ef37f7000],  sp=0x00007f5ef37f20a0,  free space=1008k
Native frames: (J=compiled Java code, j=interpreted, Vv=VM code, C=native code)
V  [libjvm.so+0x176cad4]  void VerifyOopClosure::do_oop_work<oop>(oop*)+0xe4  (oop.cpp:133)
V  [libjvm.so+0xda0caf]  void OopOopIterateDispatch<VerifyElementClosure>::Table::oop_oop_iterate<FlatArrayKlass, oop>(VerifyElementClosure*, oop, Klass*)+0x23f  (flatArrayKlass.cpp:514)
V  [libjvm.so+0xd9dc4f]  void OopOopIterateDispatch<VerifyElementClosure>::Table::init<FlatArrayKlass>(VerifyElementClosure*, oop, Klass*)+0x5f  (iterator.inline.hpp:139)
V  [libjvm.so+0xd9d177]  FlatArrayKlass::oop_verify_on(oop, outputStream*)+0x167  (iterator.inline.hpp:302)
V  [libjvm.so+0x1761d56]  oopDesc::verify(oopDesc*)+0x66  (oop.cpp:90)
V  [libjvm.so+0x101f3a5]  InlineKlass::returned_inline_klass(RegisterMap const&)+0x135  (inlineKlass.cpp:499)
V  [libjvm.so+0x1912fc5]  ThreadSafepointState::handle_polling_page_exception()+0x1775  (safepoint.cpp:931)
V  [libjvm.so+0x1913e30]  SafepointSynchronize::handle_polling_page_exception(JavaThread*)+0x100  (safepoint.cpp:755)
v  ~SafepointBlob 0x00007f612c67e79b
j  runtime.valhalla.inlinetypes.InlineOops.testActiveGc()V+70;;;","2023-04-20 08:01;thartmann;The test makes heavy use of the Whitebox API so it might be an issue similar to JDK-8241894. [~dsimms], any thoughts?;;;","2023-04-20 08:18;thartmann;Is it even legal to call oopDesc::verify from InlineKlass::returned_inline_klass outside of a safepoint? I'm wondering if the GC couldn't move the object in parallel.;;;","2023-04-21 00:24;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/valhalla/pull/840
Date: 2023-04-21 07:18:25 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Open source several clipboard AWT tests,JDK-8306566,5099040,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,azvegint,azvegint,azvegint,2023-04-20 06:15,2023-07-10 13:38,2023-10-01 09:56,2023-04-24 03:57,17,21,,,,,21,client-libs,,0,amazon-interest,jdk17u-fix-request,jdk17u-fix-yes,sn_142,test_sprint,,,,,,,,,"Convert several applet based AWT clipboard tests into main based

java/awt/Clipboard/FlavorChangeNotificationTest/PrivateClipboardTest/PrivateClipboardTest.html
java/awt/Clipboard/FlavorChangeNotificationTest/SystemClipboardTest/SystemClipboardTest.html
java/awt/Clipboard/GetAltContentsTest/PrivateClipboardTest/PrivateClipboardTest.html
java/awt/Clipboard/LostOwnershipChainTest/PrivateClipboardTest/PrivateClipboardTest.html
java/awt/Clipboard/LostOwnershipChainTest/SystemClipboardTest/SystemClipboardTest.html",,,,,,,,,,,JDK-8311841,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i317mb:",9223372036854775807,b20,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@5a9b3fd3,,,,,,,,,"2023-04-21 16:20;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/13595
Date: 2023-04-21 23:13:51 +0000;;;","2023-04-24 03:58;dukebot;Changeset: 136dad71
Author:    Alexander Zvegintsev <azvegint@openjdk.org>
Date:      2023-04-24 10:56:50 +0000
URL:       https://git.openjdk.org/jdk/commit/136dad7197a1969b2b1fc325f4336c20386c5d3b
;;;","2023-07-07 11:02;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/1556
Date: 2023-07-07 05:49:13 +0000;;;","2023-07-07 11:31;phh;Fix Request (17u).

On behalf of Jenny Shivayogi, kspeeyu@amazon.com.

New tests all pass except bundles-macos-x64. tier1 tested with GHA, tier2 tested on linux.
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
[lworld] Asserts with stress testing during PhaseCCP due to unexpected top types,JDK-8306565,5099039,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,thartmann,thartmann,thartmann,2023-04-20 06:11,2023-04-20 07:17,2023-10-01 09:56,2023-04-20 07:17,repo-valhalla,,,,,,repo-valhalla,hotspot,,0,c2,intermittent,lworld,,,,,,,,,,,"# A fatal error has been detected by the Java Runtime Environment:
#
#  Internal Error (/workspace/open/src/hotspot/share/opto/type.hpp:2267), pid=8342, tid=8358
#  assert(_base >= KlassPtr && _base <= AryKlassPtr) failed: Not a klass pointer
#
# JRE version: Java(TM) SE Runtime Environment (21.0) (fastdebug build 21-lworld4ea-LTS-2023-04-19-1238278.tobias.hartmann.valhalla2)
# Java VM: Java HotSpot(TM) 64-Bit Server VM (fastdebug 21-lworld4ea-LTS-2023-04-19-1238278.tobias.hartmann.valhalla2, mixed mode, compressed oops, compressed class ptrs, g1 gc, linux-amd64)
# Problematic frame:
# V  [libjvm.so+0x1651844]  LoadNode::Value(PhaseGVN*) const+0xe34

Current CompileTask:
C2:   4870  591   !b        compiler.valhalla.inlinetypes.TestIntrinsics::test59 (25 bytes)

Stack: [0x00007fc4eab3e000,0x00007fc4eac3f000],  sp=0x00007fc4eac3a010,  free space=1008k
Native frames: (J=compiled Java code, j=interpreted, Vv=VM code, C=native code)
V  [libjvm.so+0x1651844]  LoadNode::Value(PhaseGVN*) const+0xe34  (type.hpp:2267)
V  [libjvm.so+0x183b66e]  PhaseCCP::analyze()+0x28e  (phaseX.cpp:1848)
V  [libjvm.so+0xb50b81]  Compile::Optimize()+0x731  (compile.cpp:2855)
V  [libjvm.so+0xb55559]  Compile::Compile(ciEnv*, ciMethod*, int, Options, DirectiveSet*)+0x1959  (compile.cpp:843)
V  [libjvm.so+0x947b0e]  C2Compiler::compile_method(ciEnv*, ciMethod*, int, bool, DirectiveSet*)+0x51e  (c2compiler.cpp:113)
V  [libjvm.so+0xb62b4c]  CompileBroker::invoke_compiler_on_method(CompileTask*)+0xa7c  (compileBroker.cpp:2237)
V  [libjvm.so+0xb63958]  CompileBroker::compiler_thread_loop()+0x608  (compileBroker.cpp:1916)
V  [libjvm.so+0x10d6bc6]  JavaThread::thread_main_inner()+0x206  (javaThread.cpp:711)
V  [libjvm.so+0x1b26140]  Thread::call_run()+0x100  (thread.cpp:224)
V  [libjvm.so+0x1797ce3]  thread_native_entry(Thread*)+0x103  (os_linux.cpp:739)


# A fatal error has been detected by the Java Runtime Environment:
#
#  Internal Error (/workspace/open/src/hotspot/share/ci/ciMetadata.hpp:112), pid=10939, tid=10954
#  assert(is_inlinetype()) failed: bad cast
#
# JRE version: Java(TM) SE Runtime Environment (21.0) (fastdebug build 21-lworld4ea-LTS-2023-04-19-1238278.tobias.hartmann.valhalla2)
# Java VM: Java HotSpot(TM) 64-Bit Server VM (fastdebug 21-lworld4ea-LTS-2023-04-19-1238278.tobias.hartmann.valhalla2, mixed mode, compressed oops, compressed class ptrs, g1 gc, linux-amd64)
# Problematic frame:
# V  [libjvm.so+0x6b4244]  Type::inline_klass() const+0x114

Current CompileTask:
C2:   8204  640    b        compiler.valhalla.inlinetypes.TestLWorld::test38 (116 bytes)

Stack: [0x00007fcbeb305000,0x00007fcbeb406000],  sp=0x00007fcbeb401030,  free space=1008k
Native frames: (J=compiled Java code, j=interpreted, Vv=VM code, C=native code)
V  [libjvm.so+0x6b4244]  Type::inline_klass() const+0x114  (ciMetadata.hpp:112)
V  [libjvm.so+0x1b59551]  TypeAryPtr::add_field_offset_and_offset(long) const+0x121  (type.cpp:5413)
V  [libjvm.so+0x183b66e]  PhaseCCP::analyze()+0x28e  (phaseX.cpp:1848)
V  [libjvm.so+0xb50b81]  Compile::Optimize()+0x731  (compile.cpp:2855)
V  [libjvm.so+0xb55559]  Compile::Compile(ciEnv*, ciMethod*, int, Options, DirectiveSet*)+0x1959  (compile.cpp:843)
V  [libjvm.so+0x947b0e]  C2Compiler::compile_method(ciEnv*, ciMethod*, int, bool, DirectiveSet*)+0x51e  (c2compiler.cpp:113)
V  [libjvm.so+0xb62b4c]  CompileBroker::invoke_compiler_on_method(CompileTask*)+0xa7c  (compileBroker.cpp:2237)
V  [libjvm.so+0xb63958]  CompileBroker::compiler_thread_loop()+0x608  (compileBroker.cpp:1916)
V  [libjvm.so+0x10d6bc6]  JavaThread::thread_main_inner()+0x206  (javaThread.cpp:711)
V  [libjvm.so+0x1b26140]  Thread::call_run()+0x100  (thread.cpp:224)
V  [libjvm.so+0x1797ce3]  thread_native_entry(Thread*)+0x103  (os_linux.cpp:739)",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i317m3:",9223372036854775807,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2023-04-20 06:55;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/valhalla/pull/839
Date: 2023-04-20 13:49:09 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
GHA: MSVC installation is failing,JDK-8306543,5099016,Bug,Resolved,JDK,JDK,software,duke,,,P2,Fixed,clanger,shade,shade,2023-04-20 03:42,2023-04-27 07:19,2023-10-01 09:56,2023-04-21 04:36,11,17,20,21,8,,21,infrastructure,,0,jdk11u-fix-request,jdk11u-fix-yes,jdk17u-fix-request,jdk17u-fix-yes,jdk20u-fix-request,jdk20u-fix-SQE-ok,jdk20u-fix-yes,,,,,,,"Current Windows builds in GHAs are failing with:

Run # Run Visual Studio Installer
  # Run Visual Studio Installer
  '/c/Program Files (x86)/Microsoft Visual Studio/Installer/vs_installer.exe' \
    modify --quiet --installPath 'C:/Program Files (x86)/Microsoft Visual Studio/2019/Enterprise' \
    --add Microsoft.VisualStudio.Component.VC.14.29.x86.x64
  shell: C:\hostedtoolcache\windows/msys2/msys64/usr/bin\bash.EXE --noprofile --norc -e -o pipefail {0}
  env:
    MSYS2_PATH_TYPE: minimal
    CHERE_INVOKING: 1
    MSYSTEM: MINGW64
Error: Process completed with exit code 1.

There is no further indication what the error might be about.",,,,,,,,,,,JDK-8306722,JDK-8306763,JDK-8306721,JDK-8307055,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i317gz:",9223372036854775807,b20,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@429c566,,,,,,,,,"2023-04-20 04:48;shade;Guess: sounds like 14.29 is already installed in the rolled-in image, and this is why the command fails.
Our configure scripts look for the specific version, and they builds still pass without explicit dependency install.;;;","2023-04-20 05:23;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/13558
Date: 2023-04-20 11:56:37 +0000;;;","2023-04-21 01:37;clanger;After some more analysis I found that the reason for this error is a wrong path syntax for option --installPath. It has to be a Windows path with backslashes instead of slashes. Since the toolchain installation worked earlier on something must have changed in this regard recently.;;;","2023-04-21 01:46;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/13576
Date: 2023-04-21 08:40:49 +0000;;;","2023-04-21 04:36;dukebot;Changeset: 5a00617b
Author:    Christoph Langer <clanger@openjdk.org>
Date:      2023-04-21 11:34:36 +0000
URL:       https://git.openjdk.org/jdk/commit/5a00617b1be998327825c3abe82ddc213336758d
;;;","2023-04-21 05:26;clanger;Fix request (20u, 17u, 11u):
This change unblocks GHA on Windows. Simple fix which corrects a parameter for toolchain installer. No risk for the product.;;;","2023-04-21 05:28;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk20u/pull/58
Date: 2023-04-21 12:21:20 +0000;;;","2023-04-21 05:29;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/1292
Date: 2023-04-21 12:22:04 +0000;;;","2023-04-21 05:31;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk11u-dev/pull/1846
Date: 2023-04-21 12:22:37 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Zero variant build failure after JDK-8257967,JDK-8306538,5099011,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,zcai,zcai,zcai,2023-04-20 03:03,2023-04-26 23:14,2023-10-01 09:56,2023-04-20 05:43,21,,,,,,21,hotspot,,0,,,,,,,,,,,,,,"/usr/bin/ld: build/linux-riscv64-zero-slowdebug/buildjdk/hotspot/variant-server/libjvm/objs/os.o: in function `os::find_builtin_agent(JvmtiAgent*, char const**, unsigned long)':
src/hotspot/share/runtime/os.cpp:579: undefined reference to `JvmtiAgent::set_os_lib(void*)'
/usr/bin/ld: src/hotspot/share/runtime/os.cpp:587: undefined reference to `JvmtiAgent::set_os_lib(void*)'
collect2: error: ld returned 1 exit status
make[4]: *** [lib/CompileJvm.gmk:148: build/linux-riscv64-zero-slowdebug/buildjdk/support/modules_libs/java.base/server/libjvm.so] Error 1
make[3]: *** [Main.gmk:252: hotspot-server-libs] Error 2
make[2]: *** [make/Main.gmk:601: create-buildjdk-interim-image] Error 2
make[2]: *** Waiting for unfinished jobs....

ERROR: Build failed for target 'images' in configuration 'linux-riscv64-zero-slowdebug' (exit code 2) 
Stopping javac server",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8306282,JDK-8257967,,,,,,,,,,,,,,,generic,,,,,,,21,,,,,,,,"0|i317fv:",9223372036854775807,b20,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@661b156a,,,,,,,,,"2023-04-20 03:19;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/13557
Date: 2023-04-20 10:10:57 +0000;;;","2023-04-20 05:43;dukebot;Changeset: 33a7978e
Author:    Zixian Cai <zcai@openjdk.org>
Committer: Aleksey Shipilev <shade@openjdk.org>
Date:      2023-04-20 12:41:50 +0000
URL:       https://git.openjdk.org/jdk/commit/33a7978e85c0c2d610828f89fc1389696f55e1f2
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Open source AWT List related tests,JDK-8306489,5098959,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,abhiscxk,abhiscxk,abhiscxk,2023-04-20 00:34,2023-05-17 13:02,2023-10-01 09:56,2023-05-03 23:10,,,,,,,21,client-libs,,0,jdk17u-fix-request,jdk17u-fix-yes,sn_142,test_sprint,,,,,,,,,,"Convert applet based tests into main based 

java/awt/List/ISCAfterRemoveAllTest/ISCAfterRemoveAllTest.html
java/awt/List/InstanceOfSelectedArray/InstanceOfSelectedArray.html
java/awt/List/ListEnterExit/ListEnterExitTest.html
java/awt/List/ListNullTest/ListNullTest.html	
java/awt/List/MaxWidthTest/MaxWidthTest.html	
java/awt/List/PageUPSelectsItemsTest/PageUPSelectsItemsTest.html
java/awt/List/TriggerActionEventTest/TriggerActionEventTest.html",,,,,,,,,,,JDK-8308324,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i3174b:",9223372036854775807,b22,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@5a9b3fd3,,,,,,,,,"2023-05-01 23:32;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/13748
Date: 2023-05-02 06:26:36 +0000;;;","2023-05-03 23:10;dukebot;Changeset: 82a8e91e
Author:    Abhishek Kumar <abhiscxk@openjdk.org>
Date:      2023-05-04 06:08:31 +0000
URL:       https://git.openjdk.org/jdk/commit/82a8e91ef7c3b397f9cce3854722cfe4bace6f2e
;;;","2023-05-15 15:33;vrudomet;[Fix request 17u]

Clean backport, new tests
Tested on macOS x64 and linux x64;;;","2023-05-16 16:17;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/1350
Date: 2023-05-16 23:12:20 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Open source several AWT Choice jtreg tests,JDK-8306484,5098949,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,prr,prr,prr,2023-04-19 16:16,2023-06-30 00:59,2023-10-01 09:56,2023-04-24 19:47,17,21,,,,,21,client-libs,,0,amazon-interest,jdk11u-fix-request,jdk11u-fix-yes,jdk17u-fix-request,jdk17u-fix-yes,noreg-self,sn_142,test_sprint,,,,,,6 AWT Choice tests are ready to be moved to open,,,,,,,,,,,JDK-8308747,JDK-8308737,JDK-8311156,JDK-8311155,JDK-8309006,JDK-8308741,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i31723:",9223372036854775807,b20,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@5a9b3fd3,,,,,,,,,"2023-04-24 10:34;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/13620
Date: 2023-04-24 17:25:31 +0000;;;","2023-04-24 19:47;dukebot;Changeset: b5362dad
Author:    Phil Race <prr@openjdk.org>
Date:      2023-04-25 02:45:22 +0000
URL:       https://git.openjdk.org/jdk/commit/b5362dadc59570d1f7fd7899be5ec11187168a16
;;;","2023-06-29 11:36;goetz;Fix request [11u,17u]

I backport this for parity with 11.0.21/17.0.9-oracle.
No risk, only a test change.
Clean backport.
Tests pass.;;;","2023-06-29 11:41;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/1517
Date: 2023-06-29 18:36:14 +0000;;;","2023-06-29 11:59;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk11u-dev/pull/2009
Date: 2023-06-29 18:47:18 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
"(ch) Channels.newReader(ReadableByteChannel,Charset) refers to csName",JDK-8306483,5098948,Bug,Resolved,JDK,JDK,software,duke,,,P5,Fixed,bpb,bpb,bpb,2023-04-19 16:15,2023-04-26 23:15,2023-10-01 09:56,2023-04-20 08:39,21,,,,,,21,core-libs,,0,noreg-doc,,,,,,,,,,,,,"The specification of Channels.newReader(ReadableByteChannel,Charset) states ""behaves in exactly the same way as the expression

     Channels.newReader(ch, Charset.forName(csName).newDecoder(), -1)""

but there is no csName parameter. This should instead be

     Channels.newReader(ch, charset.newDecoder(), -1)
  ",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,generic,,,,,,,,,generic,,,,,,"0|i3171v:",9223372036854775807,b20,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@674604a9,,,,,,,,,"2023-04-19 16:36;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/13547
Date: 2023-04-19 23:28:03 +0000;;;","2023-04-20 08:39;dukebot;Changeset: 955abcae
Author:    Brian Burkhalter <bpb@openjdk.org>
Date:      2023-04-20 15:38:11 +0000
URL:       https://git.openjdk.org/jdk/commit/955abcae55583367940e23ccec6c93328a169795
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
CDS ArchiveHeapTestClass.java test asserts when vm_exit is called on VM thread,JDK-8306476,5098937,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,matsaave,dcubed,dcubed,2023-04-19 13:45,2023-05-01 10:07,2023-10-01 09:56,2023-04-24 07:16,21,,,,,,21,hotspot,,0,intermittent,tier2,,,,,,,,,,,,"The following test failed in the JDK21 CI:

runtime/cds/appcds/cacheObject/ArchiveHeapTestClass.java

Here's snippets from the hs_err_pid file:

#  Internal Error (/System/Volumes/Data/mesos/work_dir/slaves/741e9afd-8c02-45c3-b2e2-9db1450d0832-S65008/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/43400d5d-58a9-4063-b829-40c489be60da/runs/2503f40a-bd21-4674-9378-ad50808570e5/workspace/open/src/hotspot/share/runtime/mutex.cpp:57), pid=1197, tid=15107
#  fatal error: VM thread could block on lock that may be held by a JavaThread during safepoint: Heap_lock
#
# JRE version: Java(TM) SE Runtime Environment (21.0+19) (fastdebug build 21-ea+19-LTS-1562)
# Java VM: Java HotSpot(TM) 64-Bit Server VM (fastdebug 21-ea+19-LTS-1562, interpreted mode, tiered, compressed oops, compressed class ptrs, g1 gc, bsd-aarch64)

<snip>

---------------  T H R E A D  ---------------

Current thread (0x000000014260e6b0):  VMThread ""VM Thread"" [stack: 0x000000016e1f4000,0x000000016e3f7000] [id=15107]

Stack: [0x000000016e1f4000,0x000000016e3f7000],  sp=0x000000016e3f5ab0,  free space=2054k
Native frames: (J=compiled Java code, j=interpreted, Vv=VM code, C=native code)
V  [libjvm.dylib+0x12b76ac]  VMError::report_and_die(int, char const*, char const*, char*, Thread*, unsigned char*, void*, void*, char const*, int, unsigned long)+0x4bc  (mutex.cpp:57)
V  [libjvm.dylib+0x670818]  report_fatal(VMErrorType, char const*, int, char const*, ...)+0x88
V  [libjvm.dylib+0xf02dd0]  Mutex::check_safepoint_state(Thread*)+0x5c
V  [libjvm.dylib+0xf033a4]  Mutex::lock(Thread*)+0x68
V  [libjvm.dylib+0x995654]  vm_exit(int)+0x110
V  [libjvm.dylib+0x916bd0]  KlassSubGraphInfo::check_allowed_klass(InstanceKlass*)+0xa0
V  [libjvm.dylib+0x9167d8]  KlassSubGraphInfo::add_subgraph_object_klass(Klass*)+0x724
V  [libjvm.dylib+0x91355c]  HeapShared::archive_reachable_objects_from(int, KlassSubGraphInfo*, oop, bool)+0x7f8
V  [libjvm.dylib+0x91c6bc]  void WalkOopAndArchiveClosure::do_oop_work<narrowOop>(narrowOop*)+0x42c
V  [libjvm.dylib+0x920edc]  void ObjArrayKlass::oop_oop_iterate<narrowOop, WalkOopAndArchiveClosure>(oop, WalkOopAndArchiveClosure*)+0x2b0
V  [libjvm.dylib+0x920b98]  void OopOopIterateDispatch<WalkOopAndArchiveClosure>::Table::oop_oop_iterate<ObjArrayKlass, narrowOop>(WalkOopAndArchiveClosure*, oop, Klass*)+0x4c
V  [libjvm.dylib+0x9199a0]  void oopDesc::oop_iterate<WalkOopAndArchiveClosure>(WalkOopAndArchiveClosure*)+0x118
V  [libjvm.dylib+0x913600]  HeapShared::archive_reachable_objects_from(int, KlassSubGraphInfo*, oop, bool)+0x89c
V  [libjvm.dylib+0x919be8]  HeapShared::archive_reachable_objects_from_static_field(InstanceKlass*, char const*, int, char const*, bool)+0x210
V  [libjvm.dylib+0x915bd0]  HeapShared::archive_object_subgraphs(ArchivableStaticFieldInfo*, bool, bool)+0x11c
V  [libjvm.dylib+0x9153a8]  HeapShared::copy_open_objects()+0x10c
V  [libjvm.dylib+0x914e3c]  HeapShared::archive_objects(GrowableArray<MemRegion>*, GrowableArray<MemRegion>*, GrowableArray<ArchiveHeapBitmapInfo>*, GrowableArray<ArchiveHeapBitmapInfo>*)+0x2f0
V  [libjvm.dylib+0xead268]  VM_PopulateDumpSharedSpace::dump_java_heap_objects(GrowableArray<Klass*>*)+0x510
V  [libjvm.dylib+0xeacbb8]  VM_PopulateDumpSharedSpace::doit()+0xe0
V  [libjvm.dylib+0x12bed40]  VM_Operation::evaluate()+0x1cc
V  [libjvm.dylib+0x12e529c]  VMThread::evaluate_operation(VM_Operation*)+0x198
V  [libjvm.dylib+0x12e5dec]  VMThread::inner_execute(VM_Operation*)+0x334
V  [libjvm.dylib+0x12e4edc]  VMThread::loop()+0xc4
V  [libjvm.dylib+0x12e4ca0]  VMThread::run()+0xd0
V  [libjvm.dylib+0x11f0c34]  Thread::call_run()+0x134
V  [libjvm.dylib+0xf731e8]  thread_native_entry(Thread*)+0x160
C  [libsystem_pthread.dylib+0x726c]  _pthread_start+0x94
VM_Operation (0x000000016d7aeb70): PopulateDumpSharedSpace, mode: safepoint, requested by thread 0x000000014280ea10",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8306580,,,,JDK-8306583,,,,,,,,,,,,aarch64,,,,,,,,,os_x,,,,,,"0|i316zf:",9223372036854775807,b20,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,,,"2023-04-19 14:54;dholmes;[~iklam] and [~ccheung]: Have to assume this is caused by the recent changes to the CDS exit paths (but I can't locate that bug at the moment).;;;","2023-04-19 19:46;iklam;This is related to JDK-8303422: Use common functions to exit the VM for -Xshare:dump and CDS errors, which changed KlassSubGraphInfo::check_allowed_klass() from calling os::_exit() to MetaspaceShared::unrecoverable_writing_error(), which calls vm_exit().

At this point, we are running inside the VM Thread.

It's probably not safe to call vm_exit() inside the VM Thread. Perhaps MetaspaceShared::unrecoverable_writing_error() should be changed to use os::_exit() instead.;;;","2023-04-19 23:37;dholmes;It is a pity so many of the CDS dump actions terminate on error directly rather than having some kind of error propagation.

Maybe vm_direct_exit() is more appropriate here than low-level os::_exit()?;;;","2023-04-20 09:42;iklam;> It is a pity so many of the CDS dump actions terminate on error directly rather than having some kind of error propagation.

I filed JDK-8306580 ""Propagate CDS dumping errors instead of directly exiting the VM"", but it may be difficult to implement because much of the CDS code runs inside the VM thread.;;;","2023-04-21 09:16;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/13583
Date: 2023-04-21 16:09:07 +0000;;;","2023-04-24 07:16;dukebot;Changeset: 62acc882
Author:    Matias Saavedra Silva <matsaave@openjdk.org>
Date:      2023-04-24 14:13:53 +0000
URL:       https://git.openjdk.org/jdk/commit/62acc882bff32da287ac3ea22ebe43b90a724489
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Fix nsk/jdb/kill/kill001 to work with new JVMTI StopThread support for virtual threads.,JDK-8306467,5098923,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,cjplummer,cjplummer,cjplummer,2023-04-19 10:22,2023-05-22 00:54,2023-10-01 09:56,2023-05-16 10:05,21,,,,,,21,core-svc,,0,loom,noreg-self,,,,,,,,,,,,"Currently kill001 assumes that JVMTI StopThread (via JDI ThreadReference.stop) is not supported for virtual threads. JDK-8306034 is adding support for StopThread on a virtual thread as long as it is suspended and mounted. This means, for example, it will work for virtual threads in the following conditions:
-Debuggee in a loop and suspended
-Debuggee at a breakpoint and suspended

But will continue to not work in the following situations:
-Debuggee in a loop but not suspended
-Debuggee suspended but unmounted, such as during a call the Thread.sleep()

kill001 suspends all threads at a breakpoint and then does a ""jdb kill"" on each thread, which translate to ThreadReference.stop(), so this should be expected to work now.

Most of the changes involve undoing the virtual thread specific code that was added to the test as part of JDK-8282385. However, there is an additional issue that also needs fixing. The test relies on the fact that the async exception is normally not caught, and that jdb normally stops when an uncaught exception is thrown. With virtual threads there ends up being an exception handler in java.lang.VirtualThread.run(), resulting in jdb not stopping when the async exception is thrown. This can be fixed by having the test issue a jdb ""catch all <classname>"" command for each async exception type that the test throws.
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8306034,JDK-8282385,,,,,,,,,,,,,,,,,,,,,,21,,,,,,,,"0|i316wb:",9223372036854775807,b23,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@3397f701,,,,,,,,,"2023-05-12 14:05;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/13967
Date: 2023-05-12 20:58:31 +0000;;;","2023-05-16 10:05;dukebot;Changeset: 64d51571
Author:    Chris Plummer <cjplummer@openjdk.org>
Date:      2023-05-16 17:02:12 +0000
URL:       https://git.openjdk.org/jdk/commit/64d51571166e69f724c6329f4a4c23be143e7f95
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Open source more AWT Drag & Drop related tests,JDK-8306466,5098922,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,dnguyen,dnguyen,dnguyen,2023-04-19 10:18,2023-05-23 10:20,2023-10-01 09:56,2023-05-02 16:47,11,17,20,21,,,21,client-libs,,0,jdk17u-fix-request,jdk17u-fix-yes,sn_142,test_sprint,,,,,,,,,,"Convert applet based focus tests into main based 
java/awt/dnd/RejectDragDropActionTest/RejectDragDropActionTest.html
java/awt/dnd/RemoveDragSourceListenerTest/RemoveDragSourceListenerTest.html
java/awt/dnd/RemoveParentChildDropTargetTest/RemoveParentChildDropTargetTest.html
java/awt/dnd/SameJVMModalDialogDeadlockTest/SameJVMModalDialogDeadlockTest.html
java/awt/dnd/SkipDropCompleteTest/SkipDropCompleteTest.html",,,,,,,,,,,JDK-8308703,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i316w3:",9223372036854775807,b21,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@5a9b3fd3,,,,,,,,,"2023-04-25 11:18;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/13653
Date: 2023-04-25 18:08:53 +0000;;;","2023-05-02 16:48;dukebot;Changeset: 418a8255
Author:    Damon Nguyen <dnguyen@openjdk.org>
Date:      2023-05-02 23:45:44 +0000
URL:       https://git.openjdk.org/jdk/commit/418a82551a2c58e43963beb5aa242a58bbd30e2f
;;;","2023-05-15 15:33;vrudomet;[Fix request 17u]

clean backport, new tests
checked on macOS, linux x64;;;","2023-05-15 18:46;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/1348
Date: 2023-05-16 01:39:11 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
[testbug] CustomSecurityManagerTest full screen tests fails on MacOS intermittently,JDK-8306464,5098920,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,kpk,kpk,kpk,2023-04-19 09:42,2023-04-27 05:58,2023-10-01 09:56,2023-04-24 10:31,jfx21,,,,,,jfx21,javafx,,0,macos,noreg-self,sn_142,test_sprint,testbug,,,,,,,,,"To reproduce the issue, run following command on MacOS. 
gradle --continue --info -PFULL_TEST=true -PUSE_ROBOT=true :systemTests:cleanTest :systemTests:test --tests test.robot.helloworld.CustomSecurityManagerTest

Failure observed in following tests:
-testFullScreenAfterPermissiveSecurityManager
-testFullScreenInitPermissiveSecurityManager
-testFullScreenInitNoSecurityManager
-testFullScreenAfterNoSecurityManager
with failure message: junit.framework.AssertionFailedError: expected:rgba(0,255,0,255) but was:rgba(68,68,68,255)

I was able to reproduce this issue always (in M1 Ventura 13.3) while it is observed intermittently on some systems",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,aarch64,,,,,,,,,os_x,,,,,,"0|i316vn:",9223372036854775807,b15,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@67282485,,,,,,,,,"2023-04-20 01:44;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jfx/pull/1103
Date: 2023-04-20 08:36:59 +0000;;;","2023-04-24 10:31;dukebot;Changeset: 559ad113
Author:    Karthik P K <kpk@openjdk.org>
Committer: Kevin Rushforth <kcr@openjdk.org>
Date:      2023-04-24 17:30:44 +0000
URL:       https://git.openjdk.org/jfx/commit/559ad1139b536142e5acad6314fb42b5e50b1e39
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
ObjectInputStream::readObject() should handle negative array sizes without throwing NegativeArraySizeExceptions,JDK-8306461,5098917,Bug,Closed,JDK,JDK,software,duke,,,P3,Fixed,simonis,simonis,simonis,2023-04-19 08:43,2023-07-21 07:36,2023-10-01 09:56,2023-05-08 07:58,11,17,20,21,8,,21,core-libs,,0,amazon-interest,release-note=yes,,,,,,,,,,,,"Reported by: Yakov Shafranovich (yakovsh@amazon.com)

Currently, `ObjectInputStream::readObject()` doesn't explicitly checks for a negative array length in the deserialization stream. Instead it calls `j.l.r.Array::newInstance(..)` with the negative length which results in a `NegativeArraySizeException`. NegativeArraySizeException is an unchecked exception which is neither declared in the signature of `ObjectInputStream::readObject()` nor mentioned in its API specification. It is therefore not obvious for users of `ObjectInputStream::readObject()` that they may have to handle `NegativeArraySizeException`s. It would therefor be better if a negative array length in the deserialization stream would be automatically wrapped in an `InvalidClassException` which is a checked exception (derived from `IOException` via `ObjectStreamException`) and declared in the signature of `ObjectInputStream::readObject()`.

If we do the negative array length check in `ObjectInputStream::readObject()` before filtering, this will then also fix `ObjectInputFilter.FilterInfo::arrayLength()` which is defined as:
```
Returns:
the non-negative number of array elements when deserializing an array of the class, otherwise -1
```
but currently returns a negative value if the array length is negative.
",,,,,,,,,,,,,,,,,,,,,,,JDK-8306744,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i316uz:",9223372036854775807,b22,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@7e74daa7,,,,,,,Verified,,"2023-04-19 10:54;rriggs;Out of curiosity, what was the origin of the negative length? Was it an artificial case or a bug in either readObject or writeObject?;;;","2023-04-20 03:27;simonis;No bug in read/writeObject, just a manual test case which simulates corrupted data.;;;","2023-05-03 06:55;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/13540
Date: 2023-04-19 16:47:33 +0000;;;","2023-05-08 07:58;dukebot;Changeset: 4116b109
Author:    Volker Simonis <simonis@openjdk.org>
Date:      2023-05-08 14:56:05 +0000
URL:       https://git.openjdk.org/jdk/commit/4116b109f004c9552db7448f2942a11d5dfe3cdc
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Clear JVM_ACC_QUEUED flag on methods when dumping dynamic CDS archive,JDK-8306460,5098916,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,asmehra,asmehra,asmehra,2023-04-19 08:09,2023-05-22 00:54,2023-10-01 09:56,2023-05-16 15:38,21,,,,,,21,hotspot,,0,cds,,,,,,,,,,,,,"When using dynamic CDS archive I noticed some of the methods are not getting compiled during the run time (i.e. when using the dynamic CDS archive). These methods do get compiled when not using dynamic CDS archive.
With dynamic CDs when -XX:+PrintTieredEvents is enabled, logs show such methods are already in compilation queue even though there is no COMPILE event for the methods in the logs.
This points out the methods where in the compile queue when the dynamic CDS archive was dumped and the flag JVM_ACC_QUEUED was not cleared during dump time. I verified this by using the  following patch:

-------
--- a/src/hotspot/share/cds/archiveBuilder.cpp
+++ b/src/hotspot/share/cds/archiveBuilder.cpp
@@ -968,8 +968,9 @@ class ArchiveBuilder::CDSMapLogger : AllStatic {
   }
   static void log_method(Method* m, address runtime_dest, const char* type_name, int bytes, Thread* current) {
     ResourceMark rm(current);
-    log_debug(cds, map)(_LOG_PREFIX "" %s"",
-                        p2i(runtime_dest), type_name, bytes,  m->external_name());
+    bool queued = m->queued_for_compilation();
+    log_debug(cds, map)(_LOG_PREFIX "" %s %s"",
+                        p2i(runtime_dest), type_name, bytes,  m->external_name(), queued ? ""queued"" : """");
   }
-------

With this patch I created the dynamic archive, dumped cds map suing -Xlog:cds+map=trace:file=cds.map and noticed a number of methods marked as ""queued"" in the cds.map file.

This can be fixed by calling `clear_queued_for_compilation()` in Method::unlink_method().",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i316ur:",9223372036854775807,b23,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,,,"2023-04-25 08:34;asmehra;@coleen I have a fix for this sitting in my branch. I would open a PR for it some time today. Do you mind if I assign it myself?;;;","2023-04-25 09:04;coleenp;[~asmehra] sure, you can take it.  I have a patch that moves the ACC_QUEUED flag out of AccessFlags, but calling clear_queued_for_compilation() seems like the appropriate fix and doesn't affect my patch.;;;","2023-04-25 11:08;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/13652
Date: 2023-04-25 18:00:39 +0000;;;","2023-05-16 15:38;dukebot;Changeset: d3e50652
Author:    Ashutosh Mehra <asmehra@redhat.com>
Committer: Ioi Lam <iklam@openjdk.org>
Date:      2023-05-16 22:36:44 +0000
URL:       https://git.openjdk.org/jdk/commit/d3e5065284441647564a9eede79d69e7b0ac80be
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Classfile API components implementations should not be exposed,JDK-8306457,5098914,Bug,Closed,JDK,JDK,software,duke,,,P4,Fixed,liach,liach,liach,2023-04-19 07:17,2023-08-08 11:49,2023-10-01 09:56,2023-05-17 23:55,,,,,,,21,other-libs,,0,classfile-api,,,,,,,,,,,,,"The Classfile API's components' implementations, namely ClassRemapper.ClassRemapperImpl, CodeLocalsShifter.CodeLocalsShifterImpl, CodeRelabeler.CodeRelabelerImpl, and CodeStackTracker.CodeStackTrackerImpl, are implicitly-public nested classes in interfaces. They should not be part of the public API.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i316ub:",9223372036854775807,b24,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@79d0c3d2,,,,,,,Verified,,"2023-04-19 10:08;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/13541
Date: 2023-04-19 16:58:32 +0000;;;","2023-05-17 23:55;dukebot;Changeset: 3c9ec263
Author:    Chen Liang <liach@openjdk.org>
Committer: Adam Sotona <asotona@openjdk.org>
Date:      2023-05-18 06:54:01 +0000
URL:       https://git.openjdk.org/jdk/commit/3c9ec26370dfae5d1230b6b69ae26122fe42e51d
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Don't leak _worklist's memory in PhaseLive::compute,JDK-8306456,5098913,Bug,Resolved,JDK,JDK,software,duke,,,P5,Fixed,jsjolen,jsjolen,jsjolen,2023-04-19 07:15,2023-06-18 23:22,2023-10-01 09:56,2023-04-21 06:38,11,17,21,,,,21,hotspot,,0,c2,memory-leak,oracle-triage-21,,,,,,,,,,,"PhaseLive::compute allocates the Block_List on its live arena, but the backing Block_Array is allocated on the ResourceArea. This causes the memory of the worklist to build up without being freed.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i316u3:",9223372036854775807,b20,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2023-04-19 07:32;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/13535
Date: 2023-04-19 14:21:13 +0000;;;","2023-04-19 16:16;dlong;ILW = memory could be reclaimed sooner; with C2; no workaround = LMH = P5;;;","2023-04-21 06:38;dukebot;Changeset: 6e77e14f
Author:    Johan Sjölen <jsjolen@openjdk.org>
Date:      2023-04-21 13:36:36 +0000
URL:       https://git.openjdk.org/jdk/commit/6e77e14fdbf4ab083020467cf2ecb8225f3dcbc7
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Adding an element to a long existing list may cause the first visible element to jump,JDK-8306447,5098898,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,jvos,jvos,jvos,2023-04-19 05:57,2023-09-06 02:15,2023-10-01 09:56,2023-06-02 06:00,jfx20,,,,,,jfx21,javafx,,0,,,,,,,,,,,,,,"An implicit requirement of controls using VirtualFlow is that when adding an element to the bottom of a list, the first visible element in the UI should not change its position (avoiding pseudo-random jumps).

In case the considered list contains cells with different heights, a jump may still happen as the cellsize cache is invalid when the count changes. Since we have no idea about how different the new elements are from the previous ones, we need to make sure that the element that is rendered at the top of the VirtualFlow before the cell count changes stays in the exact same position after the change is processed.",,,,,,,,,,,JDK-8315758,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i316qr:",9223372036854775807,b21,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@67282485,,,,,,,,,"2023-04-19 06:18;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jfx/pull/1099
Date: 2023-04-19 13:13:45 +0000;;;","2023-06-02 06:00;dukebot;Changeset: 1a0f6c7f
Author:    Johan Vos <jvos@openjdk.org>
Date:      2023-06-02 12:59:21 +0000
URL:       https://git.openjdk.org/jfx/commit/1a0f6c7f5e131d0a40073ccfe21bb6dd0d6b2da3
;;;","2023-09-06 01:53;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jfx17u/pull/157
Date: 2023-09-06 08:49:50 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
java/lang/management/ThreadMXBean/Locks.java transient failures,JDK-8306446,5098897,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,kevinw,dnsimon,dnsimon,2023-04-19 05:49,2023-08-10 06:04,2023-10-01 09:56,2023-07-28 03:05,,,,,,,22,core-svc,,0,,,,,,,,,,,,,,"The java/lang/management/ThreadMXBean/Locks.java test seems to expect all threads returned by java.lang.management.ThreadMXBean#getAllThreadIds to still be alive in a subsequent call to java.lang.management.ThreadMXBean#getThreadInfo(long). Running the test on GraalVM sometimes fails with:

STDOUT:
LockBThread about to block on OBJC
LockAThread about to block on OBJB
Stack dump : Thread -> LockBThread
	java.base/java.util.concurrent.Phaser.internalAwaitAdvance(Phaser.java:1063)
	java.base/java.util.concurrent.Phaser.arriveAndAwaitAdvance(Phaser.java:685)
	Locks$LockBThread.run(Locks.java:196)

STDERR:
java.lang.NullPointerException: Cannot invoke ""java.lang.management.ThreadInfo.getLockName()"" because ""<local7>"" is null
	at Locks.doCheck(Locks.java:437)
	at Locks.findThreadsBlockedOn(Locks.java:425)
	at Locks.main(Locks.java:374)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:578)
	at com.sun.javatest.regtest.agent.MainWrapper$MainThread.run(MainWrapper.java:125)
	at java.base/java.lang.Thread.run(Thread.java:1623)
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8303916,JDK-8310055,,,,"2023-05-08 02:07;dnsimon;Locks.jtr;https://bugs.openjdk.org/secure/attachment/103745/Locks.jtr",,,,,,,,,,,,,,,,,,,,,,"0|i316qj:",9223372036854775807,b09,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@411d4af6,,,,,,,,,"2023-04-19 06:01;dnsimon;The most likely cause is one of the JVMCI compiler threads going idle and being stopped in between the call to getAllThreadIds and getThreadInfo. I think the test should just defend against the getThreadInfo call possibly returning null.;;;","2023-06-14 05:07;kevinw;Yes, this needs to protect itself against disappearing threads.
Also fails (differently) JTREG_TEST_THREAD_FACTORY=Virtual

java.lang.RuntimeException: Thread MainThread is not supposed to be hold any lock. Currently owning lock : java.lang.VirtualThread@48836641
        at Locks.assertNoLock(Locks.java:72)
        at Locks.main(Locks.java:353)
        at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
        at java.base/java.lang.reflect.Method.invoke(Method.java:580)
        at com.sun.javatest.regtest.agent.MainWrapper$MainTask.run(MainWrapper.java:138)
        at java.base/java.lang.VirtualThread.run(VirtualThread.java:311)
		
;;;","2023-06-19 12:07;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/14501
Date: 2023-06-15 20:34:53 +0000;;;","2023-07-28 03:05;dukebot;Changeset: 4ae5a3e3
Author:    Kevin Walls <kevinw@openjdk.org>
Date:      2023-07-28 09:44:04 +0000
URL:       https://git.openjdk.org/jdk/commit/4ae5a3e39b681bfd001df1483d8a6d1fce0bc7f8
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
[AARCH64] [lworld] Incorrect loading of is-init-byte from stack ,JDK-8306443,5098892,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,thartmann,thartmann,thartmann,2023-04-19 05:03,2023-04-24 05:24,2023-10-01 09:56,2023-04-19 06:25,repo-valhalla,,,,,,repo-valhalla,hotspot,,0,intermittent,lw4,lworld,,,,,,,,,,,"TestValueClasses spuriously fails on AArch64:

Custom Run Test: @Run: test2_verifier - @Test: test2:
compiler.lib.ir_framework.shared.TestRunException: There was an error while invoking @Run method public void compiler.valhalla.inlinetypes.TestValueClasses.test2_verifier()
	at compiler.lib.ir_framework.test.CustomRunTest.invokeTest(CustomRunTest.java:162)
	at compiler.lib.ir_framework.test.AbstractTest.run(AbstractTest.java:104)
	at compiler.lib.ir_framework.test.CustomRunTest.run(CustomRunTest.java:89)
	at compiler.lib.ir_framework.test.TestVM.runTests(TestVM.java:825)
	at compiler.lib.ir_framework.test.TestVM.start(TestVM.java:250)
	at compiler.lib.ir_framework.test.TestVM.main(TestVM.java:165)
Caused by: java.lang.reflect.InvocationTargetException
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:119)
	at java.base/java.lang.reflect.Method.invoke(Method.java:580)
	at compiler.lib.ir_framework.test.CustomRunTest.invokeTest(CustomRunTest.java:159)
	... 5 more
Caused by: java.lang.RuntimeException: assertEquals: expected compiler.valhalla.inlinetypes.MyValueClass1@d30426f6 to equal compiler.valhalla.inlinetypes.MyValueClass1@a6ae7a01
	at jdk.test.lib.Asserts.fail(Asserts.java:594)
	at jdk.test.lib.Asserts.assertEquals(Asserts.java:205)
	at jdk.test.lib.Asserts.assertEquals(Asserts.java:189)
	at compiler.valhalla.inlinetypes.TestValueClasses.test2_verifier(TestValueClasses.java:147)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	... 7 more

",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,aarch64,,,,,,,,,,,,,,,"0|i316pf:",9223372036854775807,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2023-04-19 05:27;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/valhalla/pull/836
Date: 2023-04-19 12:20:47 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Juggle04/TestDescription.java should be a booleanArr test and not a byteArr one,JDK-8306435,5098885,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,lkorinth,lkorinth,lkorinth,2023-04-19 02:14,2023-06-22 03:46,2023-10-01 09:56,2023-04-24 01:04,20,,,,,,21,hotspot,,0,jdk17u-fix-request,jdk17u-fix-yes,noreg-self,,,,,,,,,,,"This copy and paste error is probably because the ""template"" test is a byteArr one.",,,,,,,,,,,JDK-8307344,JDK-8310637,JDK-8307751,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i316nv:",9223372036854775807,b20,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6b00f96c,,,,,,,,,"2023-04-21 06:25;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/13580
Date: 2023-04-21 13:19:03 +0000;;;","2023-04-24 01:04;dukebot;Changeset: ce493dda
Author:    Leo Korinth <lkorinth@openjdk.org>
Date:      2023-04-24 08:02:40 +0000
URL:       https://git.openjdk.org/jdk/commit/ce493dda9066b70f9541a8e06349fa81f79bb66c
;;;","2023-06-21 08:58;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/1486
Date: 2023-06-21 15:48:30 +0000;;;","2023-06-22 01:31;mdoerr;Fix Request (17u):
Should get backported for parity with 17.0.9-oracle. Applies cleanly.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Open source several AWT Text Component related tests,JDK-8306432,5098882,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,tr,tr,tr,2023-04-19 00:20,2023-05-23 10:13,2023-10-01 09:56,2023-04-28 07:37,,,,,,,21,client-libs,,0,jdk17u-fix-request,jdk17u-fix-yes,sn_142,test_sprint,,,,,,,,,,"Convert applet based Text Component tests into main based:

java/awt/TextComponent/CorrectSetCaretPositionDuringInitPeerTest/CorrectSetCaretPositionDuringInitPeerTest.html
java/awt/TextComponent/DeselectionDuringDoSelectionNonVisibleTest/DeselectionDuringDoSelectionNonVisibleTest.html
java/awt/TextComponent/GetCaretPosOutOfBoundsTest/GetCaretPosOutOfBoundsTest.html
java/awt/TextComponent/InitialInsertionCaretPosition/InitialInsertionCaretPositionTest.html
java/awt/TextComponent/MiddleMouseClickPasteTest/MiddleMouseClickPasteTest.html",,,,,,,,,,,JDK-8308700,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,generic,,,,,,,,,generic,,,,,,"0|i316n7:",9223372036854775807,b21,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@5a9b3fd3,,,,,,,,,"2023-04-27 09:56;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/13695
Date: 2023-04-27 16:50:17 +0000;;;","2023-04-28 07:37;dukebot;Changeset: 485a0691
Author:    Tejesh R <tr@openjdk.org>
Date:      2023-04-28 14:35:16 +0000
URL:       https://git.openjdk.org/jdk/commit/485a0691f4a762e9673967b7873356fb65afc5bc
;;;","2023-05-18 11:44;vrudomet;[Fix request 17u] 

Clean backport, new tests, low risk
Checked on macOS x64, linux x64, windows x64: tests pass;;;","2023-05-18 12:50;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/1367
Date: 2023-05-18 19:41:41 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
File.listRoots method description should be re-examined,JDK-8306431,5098881,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,bpb,tkiriyama,tkiriyama,2023-04-19 00:03,2023-06-12 20:57,2023-10-01 09:56,2023-06-08 00:04,,,,,,,21,core-libs,,0,doc-only,noreg-doc,,,,,,,,,,,,"File.listRoots is decribed below:

The set of available filesystem roots is affected by various system-level operations such as the
insertion or ejection of removable media and the disconnecting or unmounting of physical or 
virtual disk drives.

This method returns an array of File objects that denote the root directories of the 
available filesystem roots.",,,,,,,,,,,,,,,,,,,,,,,JDK-8309600,,,,,,,,,JCK-7319391,,,,JDK-8182710,JDK-8208077,,,,,,,,,,,,,,,,,,,,generic,,,,,,"0|i316mz:",9223372036854775807,b26,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@5f132e58,,,,,,,,,"2023-04-19 00:41;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/13526
Date: 2023-04-19 07:34:30 +0000;;;","2023-04-19 01:21;alanb;I've updated the description to remove the suggestion that the back-out in JDK-8208077 was missing a docs change. Instead, I've linked it to the change in JDK-8282710 that changed the implementation (JDK-8208077 backed out that change).;;;","2023-06-08 00:04;dukebot;Changeset: 9d64a9d2
Author:    Nagata-Haruhito <84066412+Nagata-Haruhito@users.noreply.github.com>
Committer: Alan Bateman <alanb@openjdk.org>
Date:      2023-06-08 07:03:29 +0000
URL:       https://git.openjdk.org/jdk/commit/9d64a9d22034602d2d195463093268102a583f9f
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Open source some AWT tests related to TextComponent and Toolkit,JDK-8306430,5098879,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,jdv,jdv,jdv,2023-04-18 23:43,2023-09-22 00:06,2023-10-01 09:56,2023-04-20 22:38,17,20,21,,,,21,client-libs,,0,amazon-interest,jdk11u-fix-request,jdk11u-fix-yes,jdk17u-fix-request,jdk17u-fix-yes,noreg-self,sn_142,test_sprint,testbug,test-only,test-opensource,,,Open source some AWT tests related to TextComponent and Toolkit,,,,,,,,,,,JDK-8307453,JDK-8311152,JDK-8307455,JDK-8307450,JDK-8307701,JDK-8316715,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,generic,,,,,,,,,generic,,,,,,"0|i316mj:",9223372036854775807,b20,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@5a9b3fd3,,,,,,,,,"2023-04-20 09:33;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/13561
Date: 2023-04-20 16:26:02 +0000;;;","2023-04-20 22:41;dukebot;Changeset: 36ec05d5
Author:    Jayathirth D V <jdv@openjdk.org>
Date:      2023-04-21 05:38:17 +0000
URL:       https://git.openjdk.org/jdk/commit/36ec05d52a79185d8c6669713fd17933128c032a
;;;","2023-06-29 09:09;goetz;Fix request [17u]

I backport this for parity with 17.0.9-oracle.
No risk, only a test change.
Clean backport.
Tests pass.;;;","2023-06-29 09:16;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/1512
Date: 2023-06-29 16:10:12 +0000;;;","2023-09-14 00:45;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk11u-dev/pull/2132
Date: 2023-09-14 07:38:22 +0000;;;","2023-09-18 22:50;andrewlu;Fix request [11u]

I backport this for parity with 11.0.21-oracle.
No risk, only a test change.
Clean backport.
Test passes. SAP nightly testing passed.
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
"RunThese30M.java crashed with assert(early->flag() == current->flag() || early->flag() == mtNone)",JDK-8306428,5098878,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,gziemski,vagarwal,vagarwal,2023-04-18 23:24,2023-07-04 23:27,2023-10-01 09:56,2023-05-27 11:30,20,,,,,,21,hotspot,,0,intermittent,jdk17u-fix-request,jdk17u-fix-yes,nmt,sqebug,,,,,,,,,"Test: applications/runthese/RunThese30M.java
VM Options: -XX:+CreateCoredumpOnCrash -XX:+UseZGC
Build: jdk-20.0.2+3-37
OS: windows-x64-debug
Reproducibility: Very Low, has been seen only 2 times. See mach5 link in comments

Crash log:
#
# A fatal error has been detected by the Java Runtime Environment:
#
#  Internal Error (c:\\sb\\prod\\1681837168\\workspace\\open\\src\\hotspot\\share\\services\\memReporter.cpp:823), pid=38432, tid=40768
#  assert(early->flag() == current->flag() || early->flag() == mtNone) failed: Expect the same flag, but Shared class space != Metaspace
#
# JRE version: Java(TM) SE Runtime Environment (20.0.2+3) (fastdebug build 20.0.2-ea+3-37)
# Java VM: Java HotSpot(TM) 64-Bit Server VM (fastdebug 20.0.2-ea+3-37, mixed mode, sharing, tiered, compressed class ptrs, z gc, windows-amd64)
# Core dump will be written. Default location: C:\\sb\\prod\\1681845714\\testoutput\\test-support\\jtreg_closed_test_hotspot_jtreg_applications_runthese_RunThese30M_java\\scratch\\0\\hs_err_pid38432.mdmp
#
# JFR recording file will be written. Location: C:\\sb\\prod\\1681845714\\testoutput\\test-support\\jtreg_closed_test_hotspot_jtreg_applications_runthese_RunThese30M_java\\scratch\\0\\hs_err_pid38432.jfr
#
Unsupported internal testing APIs have been used.

# An error report file with more information is saved as:
# C:\\sb\\prod\\1681845714\\testoutput\\test-support\\jtreg_closed_test_hotspot_jtreg_applications_runthese_RunThese30M_java\\scratch\\0\\hs_err_pid38432.log
#
# If you would like to submit a bug report, please visit:
#   https://bugreport.java.com/bugreport/crash.jsp",,,,,,,,,,,JDK-8311393,JDK-8310045,JDK-8310739,,,,,,,,,,,,,,,JDK-8309428,,,,,,,,JDK-8271406,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i316mb:",9223372036854775807,b25,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,,,"2023-04-19 02:45;stefank;Seems to be an NMT problem with CDS. Pushing this to RT.;;;","2023-04-19 09:18;dcubed;The test program is closed, but the crashing code is open
so I'm changing this from confidential -> open. The bug's
history does not show anything Oracle internal.;;;","2023-04-19 21:49;dholmes;The first failure was June 2022, and now we have this case.;;;","2023-04-19 21:50;dholmes;From crash log:

---------------  T H R E A D  ---------------

Current thread (0x00000224f60a6420):  JavaThread ""Attach Listener"" daemon [_thread_in_vm, id=40768, stack(0x0000007e14100000,0x0000007e14200000)]

Stack: [0x0000007e14100000,0x0000007e14200000]
Native frames: (J=compiled Java code, j=interpreted, Vv=VM code, C=native code)
V  [jvm.dll+0xbfe771]  os::win32::platform_print_native_stack+0xf1  (os_windows_x86.cpp:236)
V  [jvm.dll+0xe809a0]  VMError::report+0x10c0  (vmError.cpp:813)
V  [jvm.dll+0xe825de]  VMError::report_and_die+0x6ce  (vmError.cpp:1593)
V  [jvm.dll+0xe82d24]  VMError::report_and_die+0x64  (vmError.cpp:1352)
V  [jvm.dll+0x5719b7]  report_vm_error+0xb7  (debug.cpp:286)
V  [jvm.dll+0xb40ff3]  MemDetailDiffReporter::diff_virtual_memory_sites+0x1e3  (memReporter.cpp:761)
V  [jvm.dll+0xbb8cac]  NMTDCmd::report_diff+0x15c  (nmtDCmd.cpp:175)
V  [jvm.dll+0xbb8885]  NMTDCmd::execute+0x245  (nmtDCmd.cpp:136)
V  [jvm.dll+0x5f844f]  DCmd::parse_and_execute+0x2df  (diagnosticFramework.cpp:409)
V  [jvm.dll+0x2f87d8]  jcmd+0x68  (attachListener.cpp:204)
V  [jvm.dll+0x2f8b11]  attach_listener_thread_entry+0x2a1  (attachListener.cpp:427)
V  [jvm.dll+0x7eb752]  JavaThread::thread_main_inner+0x282  (javaThread.cpp:710)
V  [jvm.dll+0xdfb923]  Thread::call_run+0x253  (thread.cpp:229)
V  [jvm.dll+0xbfd088]  thread_native_entry+0xb8  (os_windows.cpp:547);;;","2023-04-19 22:23;iklam;The failed assert was added by JDK-8271406 (which had a similar rare crash).

void MemDetailDiffReporter::diff_virtual_memory_site(const VirtualMemoryAllocationSite* early,
  const VirtualMemoryAllocationSite* current) const {
  assert(early->flag() == current->flag() || early->flag() == mtNone,
    ""Expect the same flag, but %s != %s"", NMTUtil::flag_to_name(early->flag()),NMTUtil::flag_to_name(current->flag()));
  diff_virtual_memory_site(current->call_stack(), current->reserved(), current->committed(),
    early->reserved(), early->committed(), current->flag());
};;;","2023-04-25 08:27;mseledtsov;ILW = HLM = P3;;;","2023-05-04 13:05;gziemski;The assert:

    assert(memflags == header->flags(), ""weird NMT flags mismatch (new:\""%s\"" != old:\""%s\"")\n"",
           NMTUtil::flag_to_name(memflags), NMTUtil::flag_to_name(header->flags()));

wasn't triggered, so it's probably not a case of reallocation (resize) with a wrong flag.

Need to see what ""early->flag()"" and ""current->flag()"" are and how they possibly can get out of sync.;;;","2023-05-04 13:12;gziemski;I am trying to think how a tag could possibly get changed from ""Shared class space"" to ""Metaspace""...

The are several places where ""mtMetaspace"" tag is used, but usually it's where we instantiate a c++ template like:

CHeapObj<mtMetaspace>

so none of those are suspect.

There is, however, this:

  MemTracker::record_virtual_memory_type(rs.base(), mtMetaspace);

in ""VirtualSpaceNode::create_node()"", so potentially we might be allowed to change the tag type here if things go wrong?;;;","2023-05-04 15:13;gziemski;Can't be ""MemTracker::record_virtual_memory_type(rs.base(), mtMetaspace); "" because we have this:

    if (reserved_rgn->flag() != flag) {
      assert(reserved_rgn->flag() == mtNone, ""Overwrite memory type (should be mtNone, is: \""%s\"")"",
             NMTUtil::flag_to_name(reserved_rgn->flag()));

which doesn't get triggered.;;;","2023-05-12 14:32;gziemski;I don't see how ""VirtualMemoryAllocationSite"" can change its flag, unless something catastrophic happens like memory gets overwritten, but in the spirit of the fix JDK-8271406 I would like to add the printout of the actual stack to determine which flag is wrong, ""early->flag()"" or ""current->flag()"".

Something like:

void MemDetailDiffReporter::diff_virtual_memory_site(const VirtualMemoryAllocationSite* early,
  const VirtualMemoryAllocationSite* current) const {
  if ((early->flag() != current->flag()) || (current->flag() == mtNone) || (early->flag() == mtNone)) {
    tty->print(""Detected an anomaly in MemDetailDiffReporter::diff_virtual_memory_site:"");
    early->call_stack()->print_on(tty);
    current->call_stack()->print_on(tty);
  }
  assert(current->flag() != mtNone && early->flag() != mtNone,
         ""Expect the flag not to be mtNone, but %s or %s is."",
         NMTUtil::flag_to_name(early->flag()), NMTUtil::flag_to_name(current->flag()));
  assert(early->flag() == current->flag(),
         ""Expect the same flag, but %s != %s"",
         NMTUtil::flag_to_name(early->flag()), NMTUtil::flag_to_name(current->flag()));

  diff_virtual_memory_site(current->call_stack(), current->reserved(), current->committed(),
                           early->reserved(), early->committed(), current->flag());
}
;;;","2023-05-17 23:30;stuefe;[~gziemski] My bet on what happens would be:

- there had been an mmap from CDS, now removed
- now there is a metaspace mmap, which happens to be at exactly the same position (explaining the intermittant and very rare occurrence)
- the callstack for both allocations happen to look equal. This could happen because either the 4 lowest frames of both mmap sites are identical (NativeCallStack has only 4 frames) or maybe callstack walking just did not work. So we enter the third branch in MemDetailDiffReporter::diff_virtual_memory_sites(), at line 784.

Your test to print out the callstacks should be revealing. But I think the assert could maybe just removed, since what I outlined above can just happen. Since callstacks are just 4 bytes, we cannot have asserts that depend on them being different, since callstacks from different sites could always be mushed together.;;;","2023-05-18 13:07;gziemski;Thank you [~stuefe] that makes sense.

So, if it's allowed for memory to appear as one type in one snapshot, but another type in a later snapshot (because the memory can be allocated as one type, then freed, then allocated as different type in the exact same place), is there an easy way to detect that?

If we track the size, not just the ptr, then we could use the size when assuming that this is the same memory chunk? That still does not guarantee that the memory wasn't freed/reallocated.

I agree, however, that we need to drop the assert testing the flag type between snapshot (unless we can verify that it wasn't freed between the snapshots).;;;","2023-05-18 22:54;stuefe;[~gziemski] I don't think there is a good way to detect that. What may help would be a verification in MemBaseline that checks that it consists of non-overlapping and monotonous memory regions. Because if we had an error where we released old memory but forgot to unregister it from NMT, we could end up with two (I think there may be checks in other places, but in MemBaseLine I find no such verification);;;","2023-05-19 09:19;gziemski; [~stuefe] How about we approach this case as allowed and handle correspondingly https://github.com/openjdk/jdk/pull/14052;;;","2023-05-26 10:36;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/14052
Date: 2023-05-18 22:25:13 +0000;;;","2023-05-27 11:30;dukebot;Changeset: ca54f4e0
Author:    Gerard Ziemski <gziemski@openjdk.org>
Date:      2023-05-27 18:28:49 +0000
URL:       https://git.openjdk.org/jdk/commit/ca54f4e007ab0f13bec9aaf995d34c0ab3ba6452
;;;","2023-06-22 08:24;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/1491
Date: 2023-06-22 15:16:27 +0000;;;","2023-06-23 04:55;mdoerr;Fix Request (17u):
Should get backported for parity with 17.0.9-oracle. Doesn't apply cleanly, but resolution is trivial (already reviewed). (It even applies cleanly if we include JDK-8271406.);;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
[testbug] DatePickerUpdateOnAlertCloseTest fails on MacOS,JDK-8306424,5098874,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,kpk,kpk,kpk,2023-04-18 22:39,2023-04-27 05:58,2023-10-01 09:56,2023-04-25 08:30,jfx21,,,,,,jfx21,javafx,,0,macos13,noreg-self,sn_142,test_sprint,testbug,,,,,,,,,"To reproduce the issue, run following command on MacOS.
gradle --continue --info -PFULL_TEST=true -PUSE_ROBOT=true :systemTests:cleanTest :systemTests:test --tests test.robot.javafx.scene.DatePickerUpdateOnAlertCloseTest

Test failure log:
DatePickerUpdateOnAlertCloseTest > testDatePickerUpdateOnAlertClose FAILED
    java.lang.AssertionError
        at org.junit.Assert.fail(Assert.java:87)
        at org.junit.Assert.assertTrue(Assert.java:42)
        at org.junit.Assert.assertFalse(Assert.java:65)
        at org.junit.Assert.assertFalse(Assert.java:75)
        at test.robot.javafx.scene.DatePickerUpdateOnAlertCloseTest.testDatePickerUpdateOnAlertClose(DatePickerUpdateOnAlertCloseTest.java:122)

Issue is reproduced on MacOS Ventura 13.3",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,aarch64,,,,,,,,,os_x,,,,,,"0|i316lf:",9223372036854775807,b15,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@67282485,,,,,,,,,"2023-04-20 06:34;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jfx/pull/1104
Date: 2023-04-20 13:28:23 +0000;;;","2023-04-25 08:29;dukebot;Changeset: e40000b3
Author:    Karthik P K <kpk@openjdk.org>
Committer: Andy Goryachev <angorya@openjdk.org>
Date:      2023-04-25 15:27:59 +0000
URL:       https://git.openjdk.org/jfx/commit/e40000b377a14c9def8927b3a60d35617f11a614
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
"Open source AWT KeyBoardFocusManger, LightWeightComponent related tests",JDK-8306409,5098858,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,abhiscxk,abhiscxk,abhiscxk,2023-04-18 19:51,2023-05-23 10:21,2023-10-01 09:56,2023-04-26 12:09,,,,,,,21,client-libs,,0,jdk17u-fix-request,jdk17u-fix-yes,sn_142,test_sprint,,,,,,,,,,"
Convert applet based tests into main based

java/awt/KeyboardFocusmanager/ChangeKFMTest/ChangeKFMTest.html	
java/awt/KeyboardFocusmanager/PropertySupportNPETest/PropertySupportNPETest.html
java/awt/Label/NullLabelTest/NullLabelTest.html
java/awt/Layout/InsetsTest/InsetsTest.html
java/awt/LightweightComponent/LWClobberDragEvent/LWClobberDragEvent.html
java/awt/LightweightComponent/LightweightDragTest/LightweightDragTest.html
",,,,,,,,,,,JDK-8308708,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i316hv:",9223372036854775807,b20,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@5a9b3fd3,,,,,,,,,"2023-04-25 00:15;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/13633
Date: 2023-04-25 07:07:41 +0000;;;","2023-04-26 12:09;dukebot;Changeset: 732179ca
Author:    Abhishek Kumar <abhiscxk@openjdk.org>
Date:      2023-04-26 19:07:25 +0000
URL:       https://git.openjdk.org/jdk/commit/732179ca84ee1dab6530255c33de7f35cab649c2
;;;","2023-05-18 11:44;vrudomet;[Fix request 17u] 

Clean backport, new tests, low risk
Checked on macOS x64, linux x64, windows x64: tests pass;;;","2023-05-18 13:04;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/1370
Date: 2023-05-18 19:51:12 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Open source AWT CardLayout and Checkbox tests,JDK-8306372,5098818,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,prr,prr,prr,2023-04-18 15:20,2023-09-07 01:08,2023-10-01 09:56,2023-04-19 13:54,17,21,,,,,21,client-libs,,0,amazon-interest,jdk11u-fix-request,jdk11u-fix-yes,jdk17u-fix-request,jdk17u-fix-yes,sn_142,test_sprint,testbug,,,,,,We can open source several simple CardLayout and Checkbox jtreg  tests,,,,,,,,,,,JDK-8315840,JDK-8308936,JDK-8308932,JDK-8311150,JDK-8308941,JDK-8309015,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i3168z:",9223372036854775807,b19,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@5a9b3fd3,,,,,,,,,"2023-04-19 10:56;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/13543
Date: 2023-04-19 17:48:25 +0000;;;","2023-04-19 13:56;dukebot;Changeset: 781d6d79
Author:    Phil Race <prr@openjdk.org>
Date:      2023-04-19 20:53:51 +0000
URL:       https://git.openjdk.org/jdk/commit/781d6d793ad4cecb774bcbcb362c726779408ffd
;;;","2023-06-29 09:05;goetz;Fix request [17u]

I backport this for parity with 17.0.9-oracle.
No risk, only a test change.
Clean backport.
Tests pass.;;;","2023-06-29 09:14;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/1511
Date: 2023-06-29 16:06:05 +0000;;;","2023-09-01 00:26;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk11u-dev/pull/2112
Date: 2023-09-01 07:20:17 +0000;;;","2023-09-05 02:14;andrewlu;Fix request [11u]

I backport this for parity with 11.0.21-oracle.
No risk, only a test change.
Clean backport.
Test passes. SAP nightly testing passed.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
assert((cnt > 0.0f) && (prob > 0.0f)) failed: Bad frequency assignment in if,JDK-8306331,5098777,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,dlong,lmesnik,lmesnik,2023-04-18 13:43,2023-05-04 03:29,2023-10-01 09:56,2023-04-28 08:51,11,17,20,21,,,21,hotspot,,0,c2,c2-parse,oracle-triage-21,,,,,,,,,,,"Stress test fails on macos-aarch64 with following assertion:
#
# A fatal error has been detected by the Java Runtime Environment:
#
#  Internal Error (/System/Volumes/Data/mesos/work_dir/slaves/741e9afd-8c02-45c3-b2e2-9db1450d0832-S51573/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/159b6237-164a-4e8d-a87f-f88590cdae30/runs/904b9cec-69cc-4bc7-a2ab-7d271c913c2d/workspace/open/src/hotspot/share/opto/parse2.cpp:1263), pid=53696, tid=31235
#  assert((cnt > 0.0f) && (prob > 0.0f)) failed: Bad frequency assignment in if
#
# JRE version: Java(TM) SE Runtime Environment (21.0) (fastdebug build 21-internal-LTS-2023-04-14-2311181.mikael.vidstedt.jdk)
# Java VM: Java HotSpot(TM) 64-Bit Server VM (fastdebug 21-internal-LTS-2023-04-14-2311181.mikael.vidstedt.jdk, mixed mode, sharing, tiered, compressed oops, compressed class ptrs, g1 gc, bsd-aarch64)
# Core dump will be written. Default location: core.53696
#
# JFR recording file will be written. Location: /System/Volumes/Data/mesos/work_dir/slaves/741e9afd-8c02-45c3-b2e2-9db1450d0832-S51570/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/8fa68a2f-160a-484c-b2b3-b77677871c79/runs/0c72859c-a20c-4951-abed-001d8b9ce7af/testoutput/test-support/jtreg_closed_test_hotspot_jtreg_applications_kitchensink_Kitchensink8H_java/scratch/0/hs_err_pid53696.jfr
#
# If you would like to submit a bug report, please visit:
#   https://bugreport.java.com/bugreport/crash.jsp
#

---------------  S U M M A R Y ------------

Command Line: -Xbootclasspath/a:/System/Volumes/Data/mesos/work_dir/slaves/741e9afd-8c02-45c3-b2e2-9db1450d0832-S51570/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/8fa68a2f-160a-484c-b2b3-b77677871c79/runs/0c72859c-a20c-4951-abed-001d8b9ce7af/testoutput/test-support/jtreg_closed_test_hotspot_jtreg_applications_kitchensink_Kitchensink8H_java/scratch/0/wb.jar -XX:+UnlockDiagnosticVMOptions -XX:+WhiteBoxAPI -Djava.security.manager=allow -XX:MaxRAMPercentage=6.25 -Dtest.boot.jdk=/System/Volumes/Data/mesos/work_dir/jib-master/install/jdk/19/36/bundles/macos-aarch64/jdk-19_macos-aarch64_bin.tar.gz/jdk-19.jdk/Contents/Home -Djava.io.tmpdir=/System/Volumes/Data/mesos/work_dir/slaves/741e9afd-8c02-45c3-b2e2-9db1450d0832-S51570/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/8fa68a2f-160a-484c-b2b3-b77677871c79/runs/0c72859c-a20c-4951-abed-001d8b9ce7af/testoutput/test-support/jtreg_closed_test_hotspot_jtreg_applications_kitchensink_Kitchensink8H_java/tmp -XX:MaxRAMPercentage=50 -XX:MaxMetaspaceSize=512m -XX:+HeapDumpOnOutOfMemoryError -XX:+CrashOnOutOfMemoryError -Djava.net.preferIPv6Addresses=false -XX:+DisplayVMOutputToStderr -Xlog:gc*,gc+heap=debug:gc.log:uptime,timemillis,level,tags -XX:+DisableExplicitGC -XX:+StartAttachListener --enable-preview --add-exports=java.base/java.lang=ALL-UNNAMED --add-opens=java.base/java.lang=ALL-UNNAMED --add-exports=java.base/jdk.internal.org.objectweb.asm=ALL-UNNAMED --add-exports=java.xml/com.sun.org.apache.xerces.internal.parsers=ALL-UNNAMED --add-exports=java.xml/com.sun.org.apache.xerces.internal.util=ALL-UNNAMED -Djava.io.tmpdir=/System/Volumes/Data/mesos/work_dir/slaves/741e9afd-8c02-45c3-b2e2-9db1450d0832-S51570/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/8fa68a2f-160a-484c-b2b3-b77677871c79/runs/0c72859c-a20c-4951-abed-001d8b9ce7af/testoutput/test-support/jtreg_closed_test_hotspot_jtreg_applications_kitchensink_Kitchensink8H_java/scratch/0/java.io.tmpdir -Duser.home=/System/Volumes/Data/mesos/work_dir/slaves/741e9afd-8c02-45c3-b2e2-9db1450d0832-S51570/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/8fa68a2f-160a-484c-b2b3-b77677871c79/runs/0c72859c-a20c-4951-abed-001d8b9ce7af/testoutput/test-support/jtreg_closed_test_hotspot_jtreg_applications_kitchensink_Kitchensink8H_java/scratch/0/user.home -agentpath:/System/Volumes/Data/mesos/work_dir/jib-master/install/2023-04-14-2311181.mikael.vidstedt.jdk/macosx-aarch64-debug.test/hotspot/jtreg/native/libJvmtiStressModule.dylib -XX:NativeMemoryTracking=detail -Djdk.test.lib.random.seed=3881510280439331251 applications.kitchensink.process.stress.Main /System/Volumes/Data/mesos/work_dir/slaves/741e9afd-8c02-45c3-b2e2-9db1450d0832-S51570/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/8fa68a2f-160a-484c-b2b3-b77677871c79/runs/0c72859c-a20c-4951-abed-001d8b9ce7af/testoutput/test-support/jtreg_closed_test_hotspot_jtreg_applications_kitchensink_Kitchensink8H_java/scratch/0/kitchensink.final.properties

Host: ""Mac14,3"" arm64, 8 cores, 16G, Darwin 22.3.0, macOS 13.2.1 (22D68)
Time: Tue Apr 18 05:54:54 2023 GMT elapsed time: 27686.480167 seconds (0d 7h 41m 26s)

---------------  T H R E A D  ---------------

Current thread (0x000000013d00de10):  JavaThread ""C2 CompilerThread0"" daemon [_thread_in_native, id=31235, stack(0x0000000170cc4000,0x0000000170ec7000)]


Current CompileTask:
C2:27686480 5257314 %     4       spec.benchmarks.xml.transform.BaseOutputStream::write @ 3 (36 bytes)

Stack: [0x0000000170cc4000,0x0000000170ec7000],  sp=0x0000000170ec4680,  free space=2049k
Native frames: (J=compiled Java code, j=interpreted, Vv=VM code, C=native code)
V  [libjvm.dylib+0x102d678]  VMError::report_and_die(int, char const*, char const*, char*, Thread*, unsigned char*, void*, void*, char const*, int, unsigned long)+0x564  (parse2.cpp:1263)
V  [libjvm.dylib+0x102de94]  VMError::report_and_die(Thread*, char const*, int, unsigned long, VMErrorType, char const*, char*)+0x0
V  [libjvm.dylib+0x523198]  print_error_for_unit_test(char const*, char const*, char*)+0x0
V  [libjvm.dylib+0xd90170]  Parse::branch_prediction(float&, BoolTest::mask, int, Node*)+0x0
V  [libjvm.dylib+0xd90198]  Parse::branch_prediction(float&, BoolTest::mask, int, Node*)+0x28
V  [libjvm.dylib+0xd90ef4]  Parse::do_if(BoolTest::mask, Node*)+0x7c
V  [libjvm.dylib+0xd9437c]  Parse::do_one_bytecode()+0x1c50
V  [libjvm.dylib+0xd848e0]  Parse::do_one_block()+0x428
V  [libjvm.dylib+0xd82a34]  Parse::do_all_blocks()+0x474
V  [libjvm.dylib+0xd7f450]  Parse::Parse(JVMState*, ciMethod*, float)+0x9d4
V  [libjvm.dylib+0x379aa4]  ParseGenerator::generate(JVMState*)+0x120
V  [libjvm.dylib+0x493d3c]  Compile::Compile(ciEnv*, ciMethod*, int, Options, DirectiveSet*)+0xd3c
V  [libjvm.dylib+0x3781d8]  C2Compiler::compile_method(ciEnv*, ciMethod*, int, bool, DirectiveSet*)+0x188
V  [libjvm.dylib+0x4b097c]  CompileBroker::invoke_compiler_on_method(CompileTask*)+0x6e4
V  [libjvm.dylib+0x4aff40]  CompileBroker::compiler_thread_loop()+0x2bc
V  [libjvm.dylib+0x846384]  JavaThread::thread_main_inner()+0x18c
V  [libjvm.dylib+0xf8124c]  Thread::call_run()+0xf4
V  [libjvm.dylib+0xd51e24]  thread_native_entry(Thread*)+0x120
C  [libsystem_pthread.dylib+0x706c]  _pthread_start+0x94

---------------  P R O C E S S  ---------------

uid  : 502 euid : 502 gid  : 10668 egid : 10668

umask: 0022 (----w--w-)

Threads class SMR info:
_java_thread_list=0x00006000278b4950, length=54, elements={
0x000000014e808210, 0x000000014e889610, 0x000000014e88ce10, 0x000000014e88da10,
0x000000013d009810, 0x000000013d00a410, 0x000000013d00d210, 0x000000013d00de10,
0x000000014d00e010, 0x000000014e887610, 0x000000014e887e10, 0x000000014d0d7810,
0x000000014d0cb010, 0x000000014d0d6210, 0x000000014d181210, 0x000000014d181a10,
0x000000013d0aa610, 0x000000013d0a9610, 0x000000013d0aae10, 0x000000014d81e210,
0x000000014d8cd010, 0x000000013d0a9e10, 0x000000013d0ab610, 0x000000014d183a10,
0x000000014d184210, 0x000000014d184a10, 0x000000013d0ac210, 0x000000013d0aca10,
0x000000013d0ad610, 0x000000013d0ae210, 0x000000014d187410, 0x0000000126809a10,
0x000000012d823810, 0x000000013d00c810, 0x000000014d941e10, 0x0000000126841610,
0x000000012d032010, 0x000000014d340210, 0x000000014d715c10, 0x000000012d55ca10,
0x0000000139871210, 0x0000000139998010, 0x000000013f61aa10, 0x0000000138407a10,
0x0000000126d8ac10, 0x000000012db62a10, 0x0000000138511e10, 0x000000013f32ba10,
0x000000012684c610, 0x00000001397dd610, 0x000000012db74410, 0x00000001268ec010,
0x000000013f614a10, 0x000000012dad2610
}
_java_thread_list_alloc_cnt=239723, _java_thread_list_free_cnt=239721, _java_thread_list_max=75, _nested_thread_list_max=1
_tlh_cnt=78635749, _tlh_times=2552406, avg_tlh_time=0.03, _tlh_time_max=7687
_deleted_thread_cnt=119834, _deleted_thread_times=45997, avg_deleted_thread_time=0.38, _deleted_thread_time_max=1759
_delete_lock_wait_cnt=0, _delete_lock_wait_max=8
_to_delete_list_cnt=0, _to_delete_list_max=3

Java Threads: ( => current thread )
  0x000000014e808210 JavaThread ""main"" [_thread_blocked, id=5379, stack(0x000000016f19c000,0x000000016f39f000)]
  0x000000014e889610 JavaThread ""Reference Handler"" daemon [_thread_blocked, id=21763, stack(0x000000017007c000,0x000000017027f000)]
  0x000000014e88ce10 JavaThread ""Finalizer"" daemon [_thread_blocked, id=22019, stack(0x0000000170288000,0x000000017048b000)]
  0x000000014e88da10 JavaThread ""Signal Dispatcher"" daemon [_thread_blocked, id=22531, stack(0x0000000170494000,0x0000000170697000)]
  0x000000013d009810 JavaThread ""Attach Listener"" daemon [_thread_blocked, id=32003, stack(0x00000001706a0000,0x00000001708a3000)]
  0x000000013d00a410 JavaThread ""Service Thread"" daemon [_thread_blocked, id=23043, stack(0x00000001708ac000,0x0000000170aaf000)]
  0x000000013d00d210 JavaThread ""Monitor Deflation Thread"" daemon [_thread_blocked, id=31491, stack(0x0000000170ab8000,0x0000000170cbb000)]
=>0x000000013d00de10 JavaThread ""C2 CompilerThread0"" daemon [_thread_in_native, id=31235, stack(0x0000000170cc4000,0x0000000170ec7000)]
  0x000000014d00e010 JavaThread ""C1 CompilerThread0"" daemon [_thread_blocked, id=23555, stack(0x0000000170ed0000,0x00000001710d3000)]
  0x000000014e887610 JavaThread ""Common-Cleaner"" daemon [_thread_blocked, id=30467, stack(0x00000001710dc000,0x00000001712df000)]
  0x000000014e887e10 JavaThread ""Notification Thread"" daemon [_thread_blocked, id=30211, stack(0x00000001712e8000,0x00000001714eb000)]
  0x000000014d0d7810 JavaThread ""ModuleShudownListenerThread"" daemon [_thread_in_native, id=28675, stack(0x000000017190c000,0x0000000171b0f000)]
  0x000000014d0cb010 JavaThread ""AllocatorStressModule"" [_thread_in_Java, id=24323, stack(0x0000000171b18000,0x0000000171d1b000)]
  0x000000014d0d6210 JavaThread ""ExceptionStressModule"" [_thread_in_vm, id=28163, stack(0x0000000171d24000,0x0000000171f27000)]
  0x000000014d181210 JavaThread ""JcmdStressModule"" [_thread_blocked, id=27907, stack(0x0000000171f30000,0x0000000172133000)]
  0x000000014d181a10 JavaThread ""JfrStressModule"" [_thread_blocked, id=24835, stack(0x000000017213c000,0x000000017233f000)]
  0x000000013d0aa610 JavaThread ""JniStressModule"" [_thread_in_native, id=25347, stack(0x0000000172348000,0x000000017254b000)]
  0x000000013d0a9610 JavaThread ""JstatStressModule"" [_thread_blocked, id=27395, stack(0x0000000172554000,0x0000000172757000)]
  0x000000013d0aae10 JavaThread ""JvmtiStressModule"" [_thread_blocked, id=25859, stack(0x0000000172760000,0x0000000172963000)]
  0x000000014d81e210 JavaThread ""InflaterStressModule"" [_thread_in_native, id=26115, stack(0x000000017296c000,0x0000000172b6f000)]
  0x000000014d8cd010 JavaThread ""LockDeflationStressModule"" [_thread_blocked, id=26371, stack(0x0000000172b78000,0x0000000172d7b000)]
  0x000000013d0a9e10 JavaThread ""MBeanStressModule"" [_thread_blocked, id=43267, stack(0x0000000172d84000,0x0000000172f87000)]
  0x000000013d0ab610 JavaThread ""MemAccessStressModule"" [_thread_in_native, id=33027, stack(0x0000000172f90000,0x0000000173193000)]
  0x000000014d183a10 JavaThread ""MonitorStressModule"" [_thread_blocked, id=42755, stack(0x000000017319c000,0x000000017339f000)]
  0x000000014d184210 JavaThread ""NMTStressModule"" [_thread_blocked, id=33795, stack(0x00000001733a8000,0x00000001735ab000)]
  0x000000014d184a10 JavaThread ""PerfmonStressModule"" [_thread_blocked, id=42243, stack(0x00000001735b4000,0x00000001737b7000)]
  0x000000013d0ac210 JavaThread ""ReferenceStressModule"" [_thread_blocked, id=34307, stack(0x00000001737c0000,0x00000001739c3000)]
  0x000000013d0aca10 JavaThread ""SpecJbb2005StressModule"" [_thread_blocked, id=34563, stack(0x00000001739cc000,0x0000000173bcf000)]
  0x000000013d0ad610 JavaThread ""SpecJvm2008BatchStressModule"" [_thread_blocked, id=35075, stack(0x0000000173bd8000,0x0000000173ddb000)]
  0x000000013d0ae210 JavaThread ""ThreadDumperStressModule"" [_thread_blocked, id=41731, stack(0x0000000173de4000,0x0000000173fe7000)]
  0x000000014d187410 JavaThread ""Jvmti-AgentSampler"" daemon [_thread_in_native, id=41475, stack(0x0000000173ff0000,0x00000001741f3000)]
  0x0000000126809a10 JavaThread ""pool-1-thread-1"" [_thread_blocked, id=39171, stack(0x000000017525c000,0x000000017545f000)]
  0x000000012d823810 JavaThread ""pool-1-thread-2"" [_thread_blocked, id=38915, stack(0x0000000175468000,0x000000017566b000)]
  0x000000013d00c810 JavaThread ""pool-1-thread-3"" [_thread_blocked, id=38403, stack(0x0000000175674000,0x0000000175877000)]
  0x000000014d941e10 JavaThread ""pool-1-thread-4"" [_thread_blocked, id=65283, stack(0x0000000175880000,0x0000000175a83000)]
  0x0000000126841610 JavaThread ""JFR Recorder Thread"" daemon [_thread_in_native, id=63491, stack(0x00000001762bc000,0x00000001764bf000)]
  0x000000012d032010 JavaThread ""VirtualThread-unparker"" daemon [_thread_blocked, id=61699, stack(0x0000000177734000,0x0000000177937000)]
  0x000000014d340210 JavaThread ""JFR Periodic Tasks"" daemon [_thread_blocked, id=61187, stack(0x0000000177940000,0x0000000177b43000)]
  0x000000014d715c10 JavaThread ""Java2D Disposer"" daemon [_thread_blocked, id=59411, stack(0x0000000171700000,0x0000000171903000)]
  0x000000012d55ca10 JavaThread ""JFR Event Stream 19"" [_thread_blocked, id=50287, stack(0x0000000291688000,0x000000029188b000)]
  0x0000000139871210 JavaThread ""Thread-67551"" [_thread_blocked, id=45627, stack(0x0000000175c98000,0x0000000175e9b000)]
  0x0000000139998010 JavaThread ""Thread-67552"" [_thread_blocked, id=58679, stack(0x0000000175ea4000,0x00000001760a7000)]
  0x000000013f61aa10 JavaThread ""Program Runner for xml.transform"" [_thread_blocked, id=45391, stack(0x00000001741fc000,0x00000001743ff000)]
  0x0000000138407a10 JavaThread ""BenchmarkThread xml.transform 1"" [_thread_in_vm, id=48931, stack(0x0000000176cf8000,0x0000000176efb000)]
  0x0000000126d8ac10 JavaThread ""BenchmarkThread xml.transform 2"" [_thread_in_Java, id=63239, stack(0x0000000176f04000,0x0000000177107000)]
  0x000000012db62a10 JavaThread ""pool-184-thread-1"" [_thread_blocked, id=56771, stack(0x00000001768e0000,0x0000000176ae3000)]
  0x0000000138511e10 JavaThread ""ForkJoinPool-1-worker-729"" daemon [_thread_blocked, id=62991, stack(0x0000000176aec000,0x0000000176cef000)]
  0x000000013f32ba10 JavaThread ""ForkJoinPool-1-worker-730"" daemon [_thread_in_Java, id=28951, stack(0x0000000177110000,0x0000000177313000)]
  0x000000012684c610 JavaThread ""ForkJoinPool-1-worker-731"" daemon [_thread_in_vm, id=49339, stack(0x000000017731c000,0x000000017751f000)]
  0x00000001397dd610 JavaThread ""ForkJoinPool-1-worker-732"" daemon [_thread_blocked, id=53203, stack(0x0000000177528000,0x000000017772b000)]
  0x000000012db74410 JavaThread ""ForkJoinPool-1-worker-733"" daemon [_thread_blocked, id=46499, stack(0x0000000177b4c000,0x0000000177d4f000)]
  0x00000001268ec010 JavaThread ""ForkJoinPool-1-worker-734"" daemon [_thread_in_Java, id=62127, stack(0x0000000290004000,0x0000000290207000)]
  0x000000013f614a10 JavaThread ""ForkJoinPool-1-worker-735"" daemon [_thread_in_vm, id=57095, stack(0x0000000290210000,0x0000000290413000)]
  0x000000012dad2610 JavaThread ""ForkJoinPool-1-worker-736"" daemon [_thread_in_vm, id=46975, stack(0x000000029041c000,0x000000029061f000)]

Other Threads:
  0x000000014e10f510 VMThread ""VM Thread"" [stack: 0x000000016fde4000,0x000000016ffe7000] [id=19715]
  0x000000014e115190 WatcherThread ""VM Periodic Task Thread"" [stack: 0x00000001714f4000,0x00000001716f7000] [id=29699]
  0x000000014e106e10 WorkerThread ""GC Thread#0"" [stack: 0x000000016f3a8000,0x000000016f5ab000] [id=12803]
  0x000000014e00e8b0 WorkerThread ""GC Thread#1"" [stack: 0x0000000174408000,0x000000017460b000] [id=36099]
  0x000000014e00edb0 WorkerThread ""GC Thread#2"" [stack: 0x0000000174614000,0x0000000174817000] [id=36355]
  0x000000014e123f50 WorkerThread ""GC Thread#3"" [stack: 0x0000000174820000,0x0000000174a23000] [id=36611]
  0x000000014e124560 WorkerThread ""GC Thread#4"" [stack: 0x0000000174a2c000,0x0000000174c2f000] [id=40195]
  0x000000014e124b70 WorkerThread ""GC Thread#5"" [stack: 0x0000000174c38000,0x0000000174e3b000] [id=39683]
  0x000000014e125180 WorkerThread ""GC Thread#6"" [stack: 0x0000000174e44000,0x0000000175047000] [id=37379]
  0x000000014e125790 WorkerThread ""GC Thread#7"" [stack: 0x0000000175050000,0x0000000175253000] [id=39427]
  0x000000014e107670 ConcurrentGCThread ""G1 Main Marker"" [stack: 0x000000016f5b4000,0x000000016f7b7000] [id=13315]
  0x000000014e107c90 WorkerThread ""G1 Conc#0"" [stack: 0x000000016f7c0000,0x000000016f9c3000] [id=13827]
  0x000000014e1284d0 WorkerThread ""G1 Conc#1"" [stack: 0x0000000175a8c000,0x0000000175c8f000] [id=64771]
  0x000000014e109d20 ConcurrentGCThread ""G1 Refine#0"" [stack: 0x000000016f9cc000,0x000000016fbcf000] [id=16387]
  0x000000013ce27b00 ConcurrentGCThread ""G1 Refine#1"" [stack: 0x00000001760b0000,0x00000001762b3000] [id=49687]
  0x000000013d882b30 ConcurrentGCThread ""G1 Refine#2"" [stack: 0x00000001764c8000,0x00000001766cb000] [id=41007]
  0x000000013ce60110 ConcurrentGCThread ""G1 Refine#3"" [stack: 0x0000000290e58000,0x000000029105b000] [id=52563]
  0x000000013cffda10 ConcurrentGCThread ""G1 Refine#4"" [stack: 0x0000000291064000,0x0000000291267000] [id=63803]
  0x000000013ce6e270 ConcurrentGCThread ""G1 Refine#5"" [stack: 0x00000001766d4000,0x00000001768d7000] [id=44099]
  0x000000014e10a3b0 ConcurrentGCThread ""G1 Service"" [stack: 0x000000016fbd8000,0x000000016fddb000] [id=16643]

Threads with active compile tasks:
C2 CompilerThread0  27686484 5257314 %     4       spec.benchmarks.xml.transform.BaseOutputStream::write @ 3 (36 bytes)

VM state: not at safepoint (normal execution)

VM Mutex/Monitor currently owned by a thread:  ([mutex/lock_event])
[0x0000000103bae528] JvmtiThreadState_lock - owner thread: 0x0000000000000000

Heap address: 0x0000000600000000, size: 8192 MB, Compressed Oops mode: Zero based, Oop shift amount: 3

CDS archive(s) mapped at: [0x0000000800000000-0x0000000800d08000-0x0000000800d08000), size 13664256, SharedBaseAddress: 0x0000000800000000, ArchiveRelocationMode: 0.
Compressed class space mapped at: 0x0000000801000000-0x000000081b000000, reserved size: 436207616
Narrow klass base: 0x0000000800000000, Narrow klass shift: 0, Narrow klass range: 0x100000000

GC Precious Log:
 CardTable entry size: 512
 Card Set container configuration: InlinePtr #cards 4 size 8 Array Of Cards #cards 32 size 80 Howl #buckets 8 coarsen threshold 7372 Howl Bitmap #cards 1024 size 144 coarsen threshold 921 Card regions per heap region 1 cards per card region 8192
 CPUs: 8 total, 8 available
 Memory: 16384M
 Large Page Support: Disabled
 NUMA Support: Disabled
 Compressed Oops: Enabled (Zero based)
 Heap Region Size: 4M
 Heap Min Capacity: 8M
 Heap Initial Capacity: 256M
 Heap Max Capacity: 8G
 Pre-touch: Disabled
 Parallel Workers: 8
 Concurrent Workers: 2
 Concurrent Refinement Workers: 8
 Periodic GC: Disabled

Heap:
 garbage-first heap   total 7512064K, used 3246060K [0x0000000600000000, 0x0000000800000000)
  region size 4096K, 68 young (278528K), 12 survivors (49152K)
 Metaspace       used 42614K, committed 49664K, reserved 491520K
  class space    used 3955K, committed 6400K, reserved 425984K",,,,,,,,,,,,,,,,,,,,,JDK-8306127,,,,,,,,,,,JDK-8307138,JDK-8306481,,,JDK-6988308,JDK-8300714,JDK-8233144,,,"2023-04-18 13:56;lmesnik;hs_err_pid53696.log;https://bugs.openjdk.org/secure/attachment/103482/hs_err_pid53696.log",,,,,,,,,,,,,,,,,,,,,,"0|i315zv:",9223372036854775807,b21,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2023-04-18 15:43;dlong;ILW = assert in debug build; new toolchain + stress test + macos arm64; no workaround = MLH = P4;;;","2023-04-18 17:35;dlong;From the core file:
(int) not_taken = 2147483647
(int) taken = 1296570

So according to this code:

  float sum = taken + not_taken;
  ...
  cnt = sum / FreqCountInvocations;

""taken + not_taken"" will caused a signed overflow, resulting in a negative ""cnt"".

There is a bail-out earlier:

1234    if (taken < 0 || not_taken < 0 || taken + not_taken < 40) {

but since ""taken + not_taken"" is UB, the new toolchain has some freedom in what in generates:

    0x103447e2c <+600>: add    w8, w22, w21
    0x103447e30 <+604>: cmp    w8, #0x27
    0x103447e34 <+608>: b.hi   0x103447e68

(notice that ""b.hi"" is unsigned).
;;;","2023-04-18 20:05;dlong;Building with -fwrapv is a work-around.  The problem can be detected by -fsanitize=signed-integer-overflow or -fsanitize=undefined, but only if an actual overflow happens.  UBSan doesn't detect potential overflow.
;;;","2023-04-19 14:18;kbarrett;I think we should not build with `-fwrapv` even for some limited scope.  That option (or equivalent) might not even be available for some compilers.

Conversion to unsigned to perform the overflow checking is one option.

One of the values involved (2147483647) is INT_MAX, which looks like a ""saturated"" value. So another option might be to change the saturation limit to something like INT_MAX/2.  Then the sum of two values that don't exceed the saturation limit won't exceed INT_MAX and so invoke UB. That also might make saturation clipping a little simpler.
;;;","2023-04-19 15:40;dlong;Besides the signed overflow problem, this code could handle saturated values better.  The BranchData and JumpData counters are stored as uint and saturate at 0xffffffff, while scale_count() counters and return value use int and saturate at 0x7fffffff.  We should be able to make a meaningful comparison between ""taken"" and ""not_taken"" paths with raw counter values up to 0xfffffffe, but the current code loses information converting to int.  Also, the current code limits the sum of taken + not_taken to <= 0x7fffffff even if neither value is saturated.  Finally, it seems like we should be able to compare 0 on one path to ""saturated"" on the other path, but again the current code doesn't allow that because a raw 0xffffffff saturated value becomes negative and is rejected.;;;","2023-04-19 19:51;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/13551
Date: 2023-04-20 02:44:00 +0000;;;","2023-04-28 08:50;dukebot;Changeset: a177152f
Author:    Dean Long <dlong@openjdk.org>
Date:      2023-04-28 15:48:39 +0000
URL:       https://git.openjdk.org/jdk/commit/a177152f224cdaa3ef24a90baa57f1b42c0cc220
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Update ICU4C to 73.1,JDK-8306329,5098775,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,hmeda,vdyakov,vdyakov,2023-04-18 13:06,2023-09-02 04:55,2023-10-01 09:56,2023-05-24 02:35,8,jfx21,,,,,jfx21,javafx,,0,3rdparty,jfx20u-fix-no,jfx20u-fix-request,noreg-other,sn_143,sn_144,,,,,,,,"Need to upgrade ICU4C to the latest patched release - v 73.1
Release date: 2023-04-13",,,,,,,,,,,JDK-8308840,JDK-8309211,JDK-8308828,JDK-8315567,,,,,,,JDK-8275179,,,,JDK-8289541,,,,,,,,,,,,,,,,,,,,,,,generic,,,,,,,,,generic,,,,,,"0|i315zf:",9223372036854775807,b19,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@5a8b92bd,,,,,,,,,"2023-05-15 20:09;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jfx/pull/1138
Date: 2023-05-15 16:45:55 +0000;;;","2023-05-24 02:35;dukebot;Changeset: 2f5dcfd3
Author:    Hima Bindu Meda <hmeda@openjdk.org>
Date:      2023-05-24 09:32:45 +0000
URL:       https://git.openjdk.org/jfx/commit/2f5dcfd3d06282a5552bf9db676541686600a9b9
;;;","2023-05-25 00:38;hmeda;Fix Request JFX20u:
Request to approve backport of this commit to jfx20u.
Clean backport and low risk.Needed to keep native WebKit code in sync ;;;","2023-05-25 04:53;kcr;This update is being planned for JavaFX 21 and the October CPU release, so is not needed for 20.0.2.;;;","2023-09-02 01:56;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jfx17u/pull/145
Date: 2023-09-02 08:51:35 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Update libFFI to 3.4.4,JDK-8306328,5098773,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,almatvee,vdyakov,vdyakov,2023-04-18 12:48,2023-05-23 11:10,2023-10-01 09:56,2023-05-17 11:19,8u391,jfx21,,,,,jfx21,javafx,,0,3rdparty,sn_143,sn_144,,,,,,,,,,,"Need to upgrade to the latest libFFI 3.4.4 (Released on Oct 23, 2022)
https://github.com/libffi/libffi/wiki
https://sourceware.org/libffi/",,,,,,,,,,,JDK-8308462,JDK-8308461,JDK-8308459,,,,,,,,JDK-8252983,,,,JDK-8280840,,,,,,,JDK-8308241,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i315yz:",9223372036854775807,b18,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@712e7ab7,,,,,,,,,"2023-05-10 15:26;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jfx/pull/1131
Date: 2023-05-10 02:11:19 +0000;;;","2023-05-17 11:19;dukebot;Changeset: 8110f548
Author:    Alexander Matveev <almatvee@openjdk.org>
Date:      2023-05-17 18:17:23 +0000
URL:       https://git.openjdk.org/jfx/commit/8110f548fc561dc39e15deb7ac0c5555ececa8b6
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Update license files in CLDR v43,JDK-8306323,5098768,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,naoto,naoto,naoto,2023-04-18 10:41,2023-04-24 11:34,2023-10-01 09:56,2023-04-19 09:07,21,,,,,,21,core-libs,,0,noreg-doc,,,,,,,,,,,,,"rename from `unicode-license.txt` to `LICENSE.txt`
update `cldr.md` with the correct content",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8296248,,,,,,,,,,,,,,,,generic,,,,,,,,,generic,,,,,,"0|i315xv:",9223372036854775807,b19,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@7644fb4c,,,,,,,,,"2023-04-18 11:45;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/13517
Date: 2023-04-18 18:40:03 +0000;;;","2023-04-19 09:06;dukebot;Changeset: 85de01e6
Author:    Naoto Sato <naoto@openjdk.org>
Date:      2023-04-19 16:04:58 +0000
URL:       https://git.openjdk.org/jdk/commit/85de01e67638cf1356d5ad08ebd4a630df6bae03
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
BufferedImage spec needs clarification w.r.t its implementation of the WritableRenderedImage interface,JDK-8306320,5098765,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,prr,prr,prr,2023-04-18 10:20,2023-05-12 10:22,2023-10-01 09:56,2023-05-03 13:48,11,17,21,,,,21,client-libs,,0,noreg-doc,sn_143,,,,,,,,,,,,"BufferedImage implements the WritableRenderedImage interface.
However it is has just a single, always writable tile and several methods do nothing - having an empty implementation.

But the Javadoc is copied from WritableRenderedImage, and doesn't explain this.

See this email thread
https://mail.openjdk.org/pipermail/client-libs-dev/2023-April/011628.html",,,,,,,,,,,,,,,,,,,,,,,JDK-8306875,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i315x7:",9223372036854775807,b22,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4b09ce31,,,,,,,,,"2023-04-18 12:35;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/13506
Date: 2023-04-18 09:30:07 +0000;;;","2023-05-03 13:48;dukebot;Changeset: dcb2f3f5
Author:    Martin Desruisseaux <martin.desruisseaux@geomatys.com>
Committer: Phil Race <prr@openjdk.org>
Date:      2023-05-03 20:45:57 +0000
URL:       https://git.openjdk.org/jdk/commit/dcb2f3f5029ebdb2bb088ad10bed2134aa71cf1a
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
"4.5.1: Definition of ""provably distinct"" refers to the ""upper bound"" of a type variable",JDK-8306305,5098746,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,gbierman,gbierman,gbierman,2023-04-18 08:23,2023-06-05 03:42,2023-10-01 09:56,2023-06-05 03:42,,,,,,,21,specification,,0,noreg-doc,,,,,,,,,,,,,"The JLS distinguishes between type variables that have *bounds* and type arguments that have *upper* and *lower* bounds. 

In the definition of ""provably distinct"" in 4.5.1, these distinctions are forgotten:

One type argument is a type variable or wildcard, with an upper bound (from capture conversion (§5.1.10), if necessary) of S; and the other type argument T is not a type variable or wildcard; and neither |S| <: |T| nor |T| <: |S| (§4.8, §4.10).

The distinctions should be explicit, i.e. the clause above should be rewritten to:

One type argument is a type variable or wildcard, with a bound (if a type variable) or an upper bound (if a wildcard, using capture conversion (§5.1.10), if necessary) of S; and the other type argument T is not a type variable or wildcard; and neither |S| <: |T| nor |T| <: |S| (§4.8, §4.10).",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i315sz:",9223372036854775807,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@7441ef8d,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Fix  xlc17 clang warnings in ppc and aix code,JDK-8306304,5098745,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,mbaesken,mbaesken,mbaesken,2023-04-18 08:14,2023-05-22 00:54,2023-10-01 09:56,2023-05-17 04:51,21,,,,,,21,hotspot,,0,oraclejdk-na,,,,,,,,,,,,,"When using the new xlc17 compiler (based on a recent clang) to build OpenJDk on AIX , we run into various ""warnings as errors"".
Many of those are in the aix or ppc specific codebase and could be addressed by small adjustments.
A lot of those changes are in hotspot, some might be somewhere else in the OpenJDK  C/C++ code.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,ppc,,,,,,,,,aix,,,,,,"0|i315sr:",9223372036854775807,b23,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,,,"2023-05-12 05:06;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/13953
Date: 2023-05-12 12:01:43 +0000;;;","2023-05-17 04:51;dukebot;Changeset: c7951cf6
Author:    JoKern65 <Joachim.kern@sap.com>
Committer: Matthias Baesken <mbaesken@openjdk.org>
Date:      2023-05-17 11:48:56 +0000
URL:       https://git.openjdk.org/jdk/commit/c7951cf674581ccd021e7403f5c3bd898e0542f4
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
C2 Superword fix: use VectorMaskCmp and VectorBlend instead of CMoveVF/D,JDK-8306302,5098743,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,epeter,epeter,epeter,2023-04-18 07:35,2023-08-03 15:54,2023-10-01 09:56,2023-05-24 00:02,17,20,21,,,,21,hotspot,,0,c2,c2-superword,oracle-triage-21,,,,,,,,,,,"I found this during work of JDK-8306088 / JDK-8304720.

With appended Test.java run like this:

./java -Xcomp -XX:CompileCommand=compileonly,Test::test -XX:+TraceLoopOpts -XX:+UseVectorCmov -XX:+UseCMoveUnconditionally -XX:+TraceSuperWord -XX:MaxVectorSize=32 -XX:+TraceNewVectors Test.java

I get:

# A fatal error has been detected by the Java Runtime Environment:
#
#  Internal Error (/home/emanuel/Documents/fork7-jdk/open/src/hotspot/share/opto/node.hpp:392), pid=21814, tid=21831
#  assert(i < _max) failed: oob: i=1, _max=1
#
# JRE version: Java(TM) SE Runtime Environment (21.0) (slowdebug build 21-internal-LTS-2023-04-17-1039212.emanuel...)
# Java VM: Java HotSpot(TM) 64-Bit Server VM (slowdebug 21-internal-LTS-2023-04-17-1039212.emanuel..., compiled mode, tiered, compressed oops, compressed class ptrs, g1 gc, linux-amd64)
# Problematic frame:
# V  [libjvm.so+0x416445]  Node::in(unsigned int) const+0x41

Note: the body of the loop can contain the equals check, or non-equals - it fails for both:
dataFc[i] = (dataFa[i] == dataFb[i]) ? dataFa[i] : dataFb[i];
dataFc[i] = (dataFa[i] != dataFb[i]) ? dataFa[i] : dataFb[i];

My guess is that something is wrong with the ""EQ/NEQ tests (cmpOpUCF2)"" in x86.",,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8306088,,,,JDK-8304720,JDK-8313720,JDK-8309268,,JDK-8308841,JDK-8306922,JDK-8289422,JDK-8285973,JDK-8313345,"2023-04-18 07:36;epeter;Test.java;https://bugs.openjdk.org/secure/attachment/103474/Test.java","2023-05-03 23:26;epeter;Test2.java;https://bugs.openjdk.org/secure/attachment/103697/Test2.java","2023-04-18 07:37;epeter;hs_err_pid22009.log;https://bugs.openjdk.org/secure/attachment/103475/hs_err_pid22009.log","2023-04-18 07:37;epeter;replay_pid22009.log;https://bugs.openjdk.org/secure/attachment/103476/replay_pid22009.log",,,,x86_64,,,,,,,,,,,,,,,"0|i315sb:",9223372036854775807,b25,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2023-04-18 07:50;thartmann;With JDK 16 - JDK 19, we hit:

# A fatal error has been detected by the Java Runtime Environment:
#
#  Internal Error (workspace/open/src/hotspot/share/opto/phaseX.cpp:1074), pid=3222333, tid=3222346
#  fatal error: modified node is not on IGVN._worklist
#
# JRE version: Java(TM) SE Runtime Environment (16.0+25) (fastdebug build 16-ea+25-1626)
# Java VM: Java HotSpot(TM) 64-Bit Server VM (fastdebug 16-ea+25-1626, compiled mode, sharing, tiered, compressed oops, g1 gc, linux-amd64)
# Problematic frame:
# V  [libjvm.so+0x15eb5b0]  PhaseIterGVN::init_verifyPhaseIterGVN()+0x140
;;;","2023-04-18 07:53;thartmann;ILW = Assert during C2 compilation, reproducible with targeted test and UseVectorCmov (non-default), disable superword or compilation of affected method = HLM = P3;;;","2023-04-18 08:37;epeter;The assert gets triggered in the code from this change: JDK-8285973
On this line:
https://github.com/openjdk/jdk/commit/c1db70d827f7ac81aa6c6646e2431f672c71c8dc#diff-e5266a3774f26ac663dcc67e0be18608b1735f38c0576673ce36e0cd689bab4aR4309

[~sviswanathan] [~qamai] it seems you two are familiar with this code. Would you want to look at it?

From what I see, the issue is this:
The problematic line wants to find a Cmp above the Bool, and compare its inputs. But we have no Cmp there, just a constant, that we have set during matching:
https://github.com/openjdk/jdk/blob/af4d5600e37ec6d331e62c5d37491ee97cad5311/src/hotspot/share/opto/matcher.cpp#L2394

JDK-8289422 is also related [~fgao] [~pli].;;;","2023-04-18 08:41;thartmann;The ""modified node is not on IGVN._worklist"" assert first reproduces after JDK-8255665 in JDK 16.;;;","2023-04-18 08:43;epeter;This is in the way of adding more CMove tests for SuperWord:
https://github.com/openjdk/jdk/pull/13493;;;","2023-04-18 20:30;fgao;Hi [~epeter], thanks for your analysis!

The restructure in matching here, https://github.com/openjdk/jdk/blob/af4d5600e37ec6d331e62c5d37491ee97cad5311/src/hotspot/share/opto/matcher.cpp#L2394, is to follow the original design in x86 here: https://github.com/openjdk/jdk/blob/af4d5600e37ec6d331e62c5d37491ee97cad5311/src/hotspot/cpu/x86/x86.ad#L5970.

Well, as we can see, the info of BoolNode and BoolTest mask are duplicate whether from semantics side or ideal graph side. For aarch64, no Cmp is needed here and only a constant would be enough: https://github.com/openjdk/jdk/blob/af4d5600e37ec6d331e62c5d37491ee97cad5311/src/hotspot/cpu/aarch64/aarch64_vector.ad#L5881. So, I don't know if x86 could construct the info of current BoolNode based on the constant in the backend. If yes, then we can drop the restructuring in matching and keep a constant only, like:
`match(Set dst (CMoveVF cond (Binary src1 src2)));`. 
Thus, the error here won't exist naturally, I suppose, and the code would be clean as well.

Also, the semantics of `CMoveVF` is perfectly composed of `VectorMaskCmp` + `VectorBlend`. It's fine for aarch64 to implement `CMoveVF` by `VectorMaskCmp` + `VectorBlend` separately. I don't know if it's okay for x86. If yes, we can implement it in the mid-end and clean rules for `CMoveVF` in the backend.

Thanks.;;;","2023-04-27 23:45;epeter;Thanks [~fgao] for the hints. I will have a look at it. It would be nice if we could even extend the logic to use different arguments for the ""VectorMaskCmp"" than for the ""VectorBlend"". I will see what I can do. I'll have to learn a bit more about how the matcher rules work.;;;","2023-05-03 23:26;epeter;I found a new issue: SuperWord gets the comparisons with NaN wrong (UseVectorCmov).

./java -Xbatch -XX:CompileCommand=compileonly,Test2::test -XX:+TraceLoopOpts -XX:+UseVectorCmov -XX:+UseCMoveUnconditionally -XX:+TraceSuperWord -XX:+TraceNewVectors -XX:+Verbose -XX:UseAVX=2 -XX:MaxVectorSize=32 Test2.java

This seems also to happen with JDK17, have not tested it further back.;;;","2023-05-04 06:39;epeter;I know what the problem is with Test2.java
The code in this function is wrong:

https://github.com/openjdk/jdk/commit/0485593fbc4a3264b79969de192e8e7d36e5b590#diff-7070c036c7d88ba4a8467e404d8d88aee646b97bf7bacc8b73cbc93f3ef11d2dR2097

To understand this, we must know that:
CmpF a b
Is based on the java byte-code ""fcmpl"". It returns -1 if any operand is NaN.
-1: b larger or any NaN
0: a equals b
1: a is larger

In our example java code, we have:
r[i] = (a[i] > b[i]) ? a[i] : b[i];

This means we would like to have a[i], iff ""a[i] GT_OQ b[i]"".
(O for ordered means that if there is a NaN, we have false -> b[i])
Inversely, we could also say we want b[i] iff ""a[i] LE_UQ b[i]"".
(Unordered means that if there is a NaN,  we get true -> b[i])
Note:
LE_UQ == NGT_UQ
(Q stands for Quiet, S for signaling. The difference is if we want to signal for a jump, or not signal because we are computing a mask)

javac turns this into that:
load a[i]
load b[i]
fcmpl
if_le:    load b[i]
else:    load a[i]
store r[i]

So if cmpl returns -1 or 0, we take b[i], and we only take a[i] if it is larger (and no NaN).

Note: the ""le"" does not mean we compare ""a le b"".
It means that the return code of ""fcmpl"" is ""le = [-1, 0]"".
The only difference here is with NaN's.
If we have a NaN:
""a <= b"" -> false (any comparison with NaN is false)
""a > b"" -> false
CmpF a b [le] -> true (fcmpl returns -1, and that is in le)

The code in ""cmpOp_vcmppd"" is wrong, here an example:
Imagine we had a pattern like this:
CmpF a b
Bool [le]

We turn this into a:
CMoveVF a b [le]

The ""cmpOp_vcmppd"" now maps the ""copnd == le"":
int cond = (Assembler::Condition)($copnd$$cmpcode);
This is somehow metaprogrammed to go from ""cmpcode"" -> ""ccode"" -> ""COND_INTER"" in ""cmpOp_vcmppd"".
So we map ""le"" -> ""less_equal"" -> 0x2
In ""enum ComparisonPredicateFP"", this equates to ""LE_OS"".

But form what I stated above, it should be ""LE_UQ == NGT_UQ"".

Generally, I'm not sure why ""cmpOp_vcmppd"" has a mix of S and Q.
Generally, I think the person who wrote it thought that ""Bool le"" translates to ""LE_OQ"" directly, and forgot that ""le"" is on the return code of CmpF.

Once I replcaed the code there with ""NGT_UQ"", my Test2.java passes.

Let's play the same game with a few more examples:
""eq"": ""CmpF a b == 0"": equal, no NaN : EQ_OQ (that was correct)
""lt"": less-than or NaN: LT_UQ (was wrong, had LT_OS)
""le"": less-equal or NaN: LE_UQ (was wrong, had LE_OS)
""ne"": not-equal or NaN: NEQ_UQ (was wrong, had NEQ_OQ)
""ge"": greater or equal, no NaN: GE_OQ (was close enough with GE_OS)
""gt"": greater, no NaN: GT_OQ (was close enough with GT_OS)

This was a great exercise.
But I will delete this code anyway, with the removal of ""CMoveVF/D"".
But I will have to handle similar cases when going from ""Cmp Bool"" -> ""VectorMaskCmp"", since the vector compare turns all compares into OQ (except NE), see ""booltest_pred_to_comparison_pred_fp"".;;;","2023-05-08 23:19;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/13493
Date: 2023-04-17 13:14:37 +0000;;;","2023-05-24 00:02;dukebot;Changeset: beb75e65
Author:    Emanuel Peter <epeter@openjdk.org>
Date:      2023-05-24 07:00:27 +0000
URL:       https://git.openjdk.org/jdk/commit/beb75e651f1e4a9bd21f611f9abc7ca28afbae31
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
[lworld] Circular dependency when unpacking,JDK-8306301,5098740,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,thartmann,thartmann,thartmann,2023-04-18 07:18,2023-04-18 09:58,2023-10-01 09:56,2023-04-18 09:58,repo-valhalla,,,,,,repo-valhalla,hotspot,,0,lw4,lworld,,,,,,,,,,,,"Found while working on JDK-8301007 with enhanced StressCallingConvention flag.

# A fatal error has been detected by the Java Runtime Environment:
#
#  Internal Error (/workspace/open/src/hotspot/share/asm/macroAssembler_common.cpp:206), pid=2593338, tid=2593354
#  guarantee(done) failed: Could not resolve circular dependency when shuffling inline type arguments
#
# JRE version: Java(TM) SE Runtime Environment (21.0) (fastdebug build 21-lworld4ea-LTS-2023-04-17-1449105.tobias.hartmann.valhalla)
# Java VM: Java HotSpot(TM) 64-Bit Server VM (fastdebug 21-lworld4ea-LTS-2023-04-17-1449105.tobias.hartmann.valhalla, mixed mode, compressed oops, compressed class ptrs, g1 gc, linux-aarch64)
# Problematic frame:
# V  [libjvm.so+0x13cfdc0]  MacroAssembler::unpack_inline_args(Compile*, bool)+0x8ac

Current CompileTask:
C2:   6252  520    b        compiler.valhalla.inlinetypes.TestCallingConvention::test23 (45 bytes)

Stack: [0x0000fffd36600000,0x0000fffd36800000],  sp=0x0000fffd367fa340,  free space=2024k
Native frames: (J=compiled Java code, j=interpreted, Vv=VM code, C=native code)
V  [libjvm.so+0x13cfdc0]  MacroAssembler::unpack_inline_args(Compile*, bool)+0x8ac  (macroAssembler_common.cpp:206)
V  [libjvm.so+0x32e4b4]  MachVEPNode::emit(CodeBuffer&, PhaseRegAlloc*) const+0x154  (aarch64.ad:2195)
V  [libjvm.so+0x159a39c]  PhaseOutput::scratch_emit_size(Node const*)+0x2f8  (output.cpp:3338)
V  [libjvm.so+0x15918a4]  PhaseOutput::shorten_branches(unsigned int*)+0x2c4  (output.cpp:585)
V  [libjvm.so+0x15a47c0]  PhaseOutput::Output()+0xa10  (output.cpp:359)
V  [libjvm.so+0x9ef57c]  Compile::Code_Gen()+0x3fc  (compile.cpp:3468)
V  [libjvm.so+0x9f16e0]  Compile::Compile(ciEnv*, ciMethod*, int, Options, DirectiveSet*)+0x12d0  (compile.cpp:886)
V  [libjvm.so+0x7f4e94]  C2Compiler::compile_method(ciEnv*, ciMethod*, int, bool, DirectiveSet*)+0x3f0  (c2compiler.cpp:113)
V  [libjvm.so+0x9fe2fc]  CompileBroker::invoke_compiler_on_method(CompileTask*)+0xa18  (compileBroker.cpp:2237)
V  [libjvm.so+0x9fed68]  CompileBroker::compiler_thread_loop()+0x5b4  (compileBroker.cpp:1916)
V  [libjvm.so+0xf321a0]  JavaThread::thread_main_inner()+0x21c  (javaThread.cpp:711)
V  [libjvm.so+0x188b878]  Thread::call_run()+0xf8  (thread.cpp:224)
V  [libjvm.so+0x157a9e4]  thread_native_entry(Thread*)+0x100  (os_linux.cpp:739)
C  [libpthread.so.0+0x7908]  start_thread+0x188",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,aarch64,,,,,,,,,,,,,,,"0|i315rn:",9223372036854775807,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2023-04-18 07:42;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/valhalla/pull/835
Date: 2023-04-18 14:35:58 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
32-bit build failures after JDK-8303422,JDK-8306289,5098726,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,shade,shade,shade,2023-04-18 05:36,2023-04-24 11:30,2023-10-01 09:56,2023-04-18 08:35,21,,,,,,21,hotspot,,0,cds,,,,,,,,,,,,,"Reproduces in GHA:

/home/runner/work/jdk/jdk/src/hotspot/share/cds/filemap.cpp: In member function 'void FileMapInfo::seek_to_position(size_t)':
/home/runner/work/jdk/jdk/src/hotspot/share/cds/filemap.cpp:1429:50: error: format '%ld' expects argument of type 'long int', but argument 2 has type 'size_t' {aka 'unsigned int'} [-Werror=format=]
 1429 |     log_error(cds)(""Unable to seek to position %ld"", pos);
      |                                                ~~^   ~~~
      |                                                  |   |
      |                                                  |   size_t {aka unsigned int}
      |                                                  long int
      |                                                %d
cc1plus: all warnings being treated as errors",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8303422,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i315oj:",9223372036854775807,b19,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,,,"2023-04-18 05:51;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/13511
Date: 2023-04-18 12:45:20 +0000;;;","2023-04-18 08:35;dukebot;Changeset: 803680f1
Author:    Aleksey Shipilev <shade@openjdk.org>
Date:      2023-04-18 15:33:39 +0000
URL:       https://git.openjdk.org/jdk/commit/803680f17a0459be66c221ac019266f91d52fc3f
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Missing file in search test,JDK-8306285,5098722,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,hannesw,hannesw,hannesw,2023-04-18 05:27,2023-05-10 23:54,2023-10-01 09:56,2023-05-08 01:05,,,,,,,21,tools,,0,noreg-self,,,,,,,,,,,,,"In JDK-8297216  TestSearchScript.java was extended with new test cases. However new test file `channels/FileChannel.java` was not included in the commit. This went unnoticed because the test is skipped during normal test runs and only used for manual testing of the search script, and the file was present in my local repository. 

Additionally, the test script needs to be updated with a mock implementation of the jquery each() method.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,generic,,,,,,,,,generic,,,,,,"0|i315nn:",9223372036854775807,b22,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@7900061a,,,,,,,,,"2023-04-18 05:49;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/13510
Date: 2023-04-18 12:42:05 +0000;;;","2023-05-08 01:05;dukebot;Changeset: f6ea8979
Author:    Hannes Wallnöfer <hannesw@openjdk.org>
Date:      2023-05-08 08:03:49 +0000
URL:       https://git.openjdk.org/jdk/commit/f6ea89795b1c5c5adffb1964154762830afaed42
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Build failure linux-arm32-open-cmp-baseline after JDK-8257967,JDK-8306282,5098719,Bug,Closed,JDK,JDK,software,duke,,,P2,Fixed,mgronlun,mgronlun,mgronlun,2023-04-18 04:56,2023-07-13 03:16,2023-10-01 09:56,2023-04-18 09:02,21,,,,,,21,hotspot,,0,,,,,,,,,,,,,,"[2023-04-18T08:23:01,160Z] open/src/hotspot/share/runtime/arguments.cpp:2346: error: undefined reference to 'JvmtiAgentList::add_xrun(char const*, char*, bool)'
[2023-04-18T08:23:01,164Z] open/src/hotspot/share/runtime/arguments.cpp:2418: error: undefined reference to 'JvmtiAgentList::add(char const*, char*, bool)'
[2023-04-18T08:23:04,275Z] open/src/hotspot/share/runtime/java.cpp:520: error: undefined reference to 'JvmtiAgentList::unload_agents()'
[2023-04-18T08:23:04,754Z] open/src/hotspot/share/prims/nativeLookup.cpp:289: error: undefined reference to 'JvmtiAgentList::agents()'
[2023-04-18T08:23:04,754Z] open/src/hotspot/share/prims/nativeLookup.cpp:291: error: undefined reference to 'JvmtiAgentList::Iterator::next()'
[2023-04-18T08:23:04,754Z] open/src/hotspot/share/prims/nativeLookup.cpp:291: error: undefined reference to 'JvmtiAgent::os_lib() const'
[2023-04-18T08:23:04,754Z] open/src/hotspot/share/prims/nativeLookup.cpp:290: error: undefined reference to 'JvmtiAgentList::Iterator::has_next() const'
[2023-04-18T08:23:04,754Z] open/src/hotspot/share/prims/nativeLookup.cpp:296: error: undefined reference to 'JvmtiAgentList::Iterator::~Iterator()'
[2023-04-18T08:23:04,758Z] open/src/hotspot/share/prims/nativeLookup.cpp:296: error: undefined reference to 'JvmtiAgentList::Iterator::~Iterator()'
[2023-04-18T08:23:04,826Z] open/src/hotspot/share/runtime/os.cpp:542: error: undefined reference to 'JvmtiAgent::os_lib() const'
[2023-04-18T08:23:04,826Z] open/src/hotspot/share/runtime/os.cpp:549: error: undefined reference to 'JvmtiAgent::is_static_lib() const'
[2023-04-18T08:23:04,826Z] open/src/hotspot/share/runtime/os.cpp:549: error: undefined reference to 'JvmtiAgent::name() const'
[2023-04-18T08:23:04,830Z] open/src/hotspot/share/runtime/os.cpp:551: error: undefined reference to 'JvmtiAgent::is_absolute_path() const'
[2023-04-18T08:23:04,830Z] open/src/hotspot/share/runtime/os.cpp:572: error: undefined reference to 'JvmtiAgent::name() const'
[2023-04-18T08:23:04,830Z] open/src/hotspot/share/runtime/os.cpp:577: error: undefined reference to 'JvmtiAgent::os_lib() const'
[2023-04-18T08:23:04,830Z] open/src/hotspot/share/runtime/os.cpp:579: error: undefined reference to 'JvmtiAgent::set_os_lib(void*)'
[2023-04-18T08:23:04,830Z] open/src/hotspot/share/runtime/os.cpp:542: error: undefined reference to 'JvmtiAgent::os_lib() const'
[2023-04-18T08:23:04,831Z] open/src/hotspot/share/runtime/os.cpp:549: error: undefined reference to 'JvmtiAgent::name() const'
[2023-04-18T08:23:04,832Z] open/src/hotspot/share/runtime/os.cpp:551: error: undefined reference to 'JvmtiAgent::is_absolute_path() const'
[2023-04-18T08:23:04,835Z] open/src/hotspot/share/runtime/os.cpp:587: error: undefined reference to 'JvmtiAgent::set_os_lib(void*)'
[2023-04-18T08:23:04,835Z] open/src/hotspot/share/runtime/os.cpp:583: error: undefined reference to 'JvmtiAgent::set_static_lib()'
[2023-04-18T08:23:04,835Z] open/src/hotspot/share/runtime/os.cpp:584: error: undefined reference to 'JvmtiAgent::set_loaded()'
[2023-04-18T08:23:05,415Z] open/src/hotspot/share/runtime/threads.cpp:500: error: undefined reference to 'JvmtiAgentList::load_agents()'
[2023-04-18T08:23:05,419Z] open/src/hotspot/share/runtime/threads.cpp:617: error: undefined reference to 'JvmtiAgentList::load_xrun_agents()'
[2023-04-18T08:23:05,419Z] open/src/hotspot/share/runtime/threads.cpp:657: error: undefined reference to 'JvmtiAgentList::load_xrun_agents()'

The refactoring is missing conditionals for embedded builds.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8257967,JDK-8306538,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i315mz:",9223372036854775807,b19,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@42995637,,,,,,,Verified,,"2023-04-18 07:31;shade;Also failing in GHA:
 linux-x86_64-minimal (probably easiest to reproduce, --with-jvm-variants=minimal)
 macos-aarch64;;;","2023-04-18 07:31;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/13512
Date: 2023-04-18 14:22:21 +0000;;;","2023-04-18 09:02;dukebot;Changeset: 0f3828dd
Author:    Markus Grönlund <mgronlun@openjdk.org>
Date:      2023-04-18 16:00:40 +0000
URL:       https://git.openjdk.org/jdk/commit/0f3828dddd8d4a08677efcd15aa8dfde18540130
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
function isWsl() returns false on WSL2,JDK-8306281,5098718,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,ibereziuk,ibereziuk,ibereziuk,2023-04-18 04:50,2023-07-12 13:03,2023-10-01 09:56,2023-06-13 05:42,21,,,,,,22,infrastructure,,0,jdk17u-fix-request,jdk17u-fix-yes,,,,,,,,,,,,"function isWsl() in file make/conf/jib-profiles.js returns false when building JDK on WSL2.

Instead, in such a case, the function should return true.

This can be resolved by making string-checking, performed in the function budy case insensitive.

@@ -1517,9 +1517,11 @@ var getVersionNumbers = function () {
...
- && java.lang.System.getProperty(""os.version"").contains(""Microsoft"")));
+ && java.lang.System.getProperty(""os.version"").toLowerCase().contains(""microsoft""))); 
",The issue was confirmed for WSL running Ubuntu 22.04.,,,,,,,,,,JDK-8310269,JDK-8310112,JDK-8311397,JDK-8310737,,,,,,,,,,,,,,,,,,,,,,,,,,,"2023-04-18 04:52;ibereziuk;wsl_build.txt;https://bugs.openjdk.org/secure/attachment/103473/wsl_build.txt",,,,,,,generic,,,,,,,,,windows_10,,,,,,"0|i315mr:",9223372036854775807,b02,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@429c566,,,,,,,,,"2023-05-02 08:35;erikj;The assumption in the openjdk build is that WSL is used as a unix emulation layer, instead of Cygwin, with the intention of building for the Windows platform. See doc/building.md for details on how WSL is supported. It's also possible to build for linux as you have noted, this is also documented.;;;","2023-06-12 12:11;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/14413
Date: 2023-06-12 09:46:50 +0000;;;","2023-06-13 05:42;dukebot;Changeset: 9b0baa10
Author:    Ivan Bereziuk <ivan.bereziuk@oracle.com>
Committer: Erik Joelsson <erikj@openjdk.org>
Date:      2023-06-13 12:40:54 +0000
URL:       https://git.openjdk.org/jdk/commit/9b0baa10b9140045aa3a49b03e685dcd3ea7c623
;;;","2023-06-22 08:53;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/1493
Date: 2023-06-22 15:44:47 +0000;;;","2023-06-22 09:15;mdoerr;Fix Request (17u): 
Should get backported for parity with 17.0.9-oracle. Applies cleanly.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Open source several choice AWT tests,JDK-8306280,5098717,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,azvegint,azvegint,azvegint,2023-04-18 04:42,2023-04-24 12:29,2023-10-01 09:56,2023-04-19 11:56,,,,,,,21,client-libs,,0,sn_142,test_sprint,,,,,,,,,,,,"Convert several applet based AWT choice tests into main based

java/awt/Choice/EmptyChoiceTest/EmptyChoiceTest.html
java/awt/Choice/InsertRemoveTest/InsertRemoveTest.html
java/awt/Choice/OpenedChoiceHangs/OpenedChoiceHangs.html
java/awt/Choice/PressOutsideOpenedChoice/PressOutsideOpenedChoice.html",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i315mj:",9223372036854775807,b19,,,,,,,,,,,"2023-04-18 14:55;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/13521
Date: 2023-04-18 21:47:15 +0000;;;","2023-04-19 11:57;dukebot;Changeset: d03128d0
Author:    Alexander Zvegintsev <azvegint@openjdk.org>
Date:      2023-04-19 18:55:13 +0000
URL:       https://git.openjdk.org/jdk/commit/d03128d0e5158ea967e714341c019b9af00ac4a1
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Build failure after JDK-8299592,JDK-8306279,5098716,Bug,Closed,JDK,JDK,software,duke,,,P1,Fixed,djelinski,thartmann,thartmann,2023-04-18 04:25,2023-07-10 10:08,2023-10-01 09:56,2023-04-18 05:57,21,,,,,,21,client-libs,,0,regression,,,,,,,,,,,,,"open/src/java.desktop/share/native/common/awt/debug/debug_mem.c:282:5: error: format not a string literal, argument types not checked [-Werror=format-nonliteral]
[2023-04-18T11:20:36,517Z]   282 |     snprintf(report, sizeof(report), reportFormat, header->filename, header->linenumber, header->size, header->order);
[2023-04-18T11:20:36,517Z]       |     ^~~~~~~~",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8299592,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i315mb:",9223372036854775807,b19,,,,,,,,,Verified,,"2023-04-18 05:07;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/13507
Date: 2023-04-18 11:59:44 +0000;;;","2023-04-18 05:57;dukebot;Changeset: e97fe081
Author:    Daniel Jeliński <djelinski@openjdk.org>
Date:      2023-04-18 12:55:14 +0000
URL:       https://git.openjdk.org/jdk/commit/e97fe081adbcb3ef37d192aab3c889f54d192059
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
jvmtiAgentList.cpp:253 assert(offset >= 0) failed: invariant occurs on AIX after JDK-8257967,JDK-8306278,5098710,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,mgronlun,mbaesken,mbaesken,2023-04-18 03:35,2023-04-24 11:34,2023-10-01 09:56,2023-04-19 04:01,21,,,,,,21,hotspot,,0,,,,,,,,,,,,,,"After https://bugs.openjdk.org/browse/JDK-8257967  the AIX tests (using fastdebug binaries) run into this error
in lots of jtreg tests. Example is from test jdk/jshell/T8146368/JShellTest8146368.java, but lots of others fail too.


#  Internal Error (/openjdk/rs6000_64/jdk-dev/src/hotspot/share/prims/jvmtiAgentList.cpp:253), pid=18350360, tid=258
#  assert(offset >= 0) failed: invariant
#

|---stackaddr----|   |----lrsave------|:   <function name>
0x0000000110238640 - 0x0900000018adaf60 libjvm.so::os::Aix::platform_print_native_stack(outputStream*, void const*, char*, int)+0x20  (C++ saves_lr stores_bc fixedparms:4 )
0x00000001102386b0 - 0x0900000018b2b31c libjvm.so::VMError::report(outputStream*, bool)+0x3c5c  (C++ saves_lr stores_bc gpr_saved:18 fixedparms:2 )
0x00000001102398b0 - 0x0900000018b2f43c libjvm.so::VMError::report_and_die(int, char const*, char const*, char*, Thread*, unsigned char*, void*, void*, char const*, int, unsigned long)+0x1dc  (C++ saves_cr saves_lr stores_bc gpr_saved:18 fixedparms:8 )
0x0000000110239ca0 - 0x0900000018b30a08 libjvm.so::VMError::report_and_die(Thread*, void*, char const*, int, char const*, char const*, char*)+0x48  (C++ saves_lr stores_bc fixedparms:7 )
0x0000000110239d30 - 0x09000000188b4984 libjvm.so::report_vm_error(char const*, int, char const*, char const*, ...)+0xa4  (C++ saves_lr stores_bc gpr_saved:6 fixedparms:8 parmsonstk:1)
0x0000000110239ee0 - 0x090000001a92088c libjvm.so::JvmtiAgentList::lookup(JvmtiEnv*, void*)+0x72c  (C++ saves_lr stores_bc gpr_saved:5 fixedparms:2 )
0x0000000110239f90 - 0x090000001a7478d0 libjvm.so::JvmtiExport::post_vm_initialized()+0x1290  (C++ saves_lr stores_bc gpr_saved:18 )
0x000000011023a1d0 - 0x0900000018b7955c libjvm.so::Threads::create_vm(JavaVMInitArgs*, bool*)+0x89c  (C++ saves_lr stores_bc gpr_saved:10 fixedparms:2 )
0x000000011023a470 - 0x090000001aa3961c libjvm.so::JNI_CreateJavaVM_inner(JavaVM_**, void**, void*)+0xdc  (C++ saves_cr saves_lr stores_bc gpr_saved:10 fixedparms:3 )
0x000000011023a590 - 0x0000000100006598 java::IPRA.$InitializeJVM+0x98  (C saves_lr stores_bc gpr_saved:7 fixedparms:3 )
0x000000011023a650 - 0x00000001000059f0 java::JavaMain+0x90       (C saves_lr stores_bc gpr_saved:9 fixedparms:1 )
0x000000011023a730 - 0x000000010000c270 java::ThreadJavaMain+0x10  (C saves_lr stores_bc fixedparms:1 )
0x000000011023a7a0 - 0x090000000054bfec libpthreads.a::_pthread_body+0xec  (C saves_lr stores_bc gpr_saved:1 fixedparms:1 )
0x000000011023a820 - 0x0000000000000000 
*** end of backchain ***",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8257967,,,,,,,,,,,,ppc,,,,,,,,,aix,,,,,,"0|i315kz:",9223372036854775807,b19,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@661b156a,,,,,,,,,"2023-04-18 09:37;sspitsyn;Markus, I temporarily assigned it to you.
Could you, please, take a look? It is related to your recent change.
As a regression it needs to be fixed in 21, I think.;;;","2023-04-18 09:46;mgronlun;For most platforms, os::dll_address_to_library_name() only sets offset = -1 in case of errors. If there is an error, the function returns false. This is fine.

On AIX, the offset is invariantly set to -1, even in the case of non-errors.

Easiest to remove the assertion on offset.;;;","2023-04-18 10:05;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/13513
Date: 2023-04-18 16:59:29 +0000;;;","2023-04-19 04:01;dukebot;Changeset: c738c8ea
Author:    Markus Grönlund <mgronlun@openjdk.org>
Date:      2023-04-19 10:59:10 +0000
URL:       https://git.openjdk.org/jdk/commit/c738c8ea3e9fda87abb03acb599a2433a344db09
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Open source several AWT ScrollPane related tests,JDK-8306137,5098567,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,tr,tr,tr,2023-04-17 22:57,2023-07-10 07:42,2023-10-01 09:56,2023-05-26 00:46,17,20,21,,,,21,client-libs,,0,amazon-interest,jdk11u-fix-request,jdk11u-fix-yes,jdk17u-fix-request,jdk17u-fix-yes,noreg-self,sn_142,test_sprint,,,,,,"Convert applet based ScrollPane tests into main based:

java/awt/ScrollPane/ComponentScrollTest/ComponentScrollTest.html
java/awt/ScrollPane/RemoveChild/ScrollPaneRemoveAdd.html
java/awt/ScrollPane/ScrollPaneInsets/ScrollPaneExtraScrollBar.html
java/awt/ScrollPane/ScrollPaneLimitation/ScrollPaneLimitation.html java/awt/ScrollPane/ScrollPaneWindowsTest/ScrollPaneWindowsTest.html
java/awt/ScrollPane/ScrollPositionIntact/ScrollPositionIntact.html",,,,,,,,,,,JDK-8311390,JDK-8310317,JDK-8310578,JDK-8310315,JDK-8311816,JDK-8311817,,,,,,,,,,,,,,,,JDK-8310054,,,,,,,,,,,,,,,,generic,,,,,,,,,generic,,,,,,"0|i314p7:",9223372036854775807,b25,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@5a9b3fd3,,,,,,,,,"2023-04-24 10:48;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/13621
Date: 2023-04-24 17:39:17 +0000;;;","2023-05-26 00:52;dukebot;Changeset: 4becb7bc
Author:    Tejesh R <tr@openjdk.org>
Date:      2023-05-26 07:50:10 +0000
URL:       https://git.openjdk.org/jdk/commit/4becb7bcb6d8c24db5209dade77dbf2be057b2b0
;;;","2023-07-05 05:13;goetz;Fix request [11u,17u]

I backport this for parity with 11.0.21-oracle,17.0.9-oracle.
No risk, only a test change.
Clean backport.
Tests pass. SAP nighlty testing passed.;;;","2023-07-05 05:22;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/1547
Date: 2023-07-05 12:15:50 +0000;;;","2023-07-05 05:25;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk11u-dev/pull/2030
Date: 2023-07-05 12:18:05 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Clean up and open source some AWT tests,JDK-8306135,5098565,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,kizune,kizune,kizune,2023-04-17 16:25,2023-09-13 13:58,2023-10-01 09:56,2023-04-19 09:57,,,,,,,21,client-libs,,0,jdk11u-fix-request,jdk11u-fix-yes,jdk17u-fix-request,jdk17u-fix-yes,noreg-self,sn_142,test_sprint,,,,,,,"Need to clean up and move to the open following tests:
java/awt/Cursor/SingleColorCursorTest/SingleColorCursorTest.html
java/awt/Dialog/ComponentShownEvent/ComponentShownEvent.html
java/awt/Dialog/DialogAsParentOfFileDialog/DialogAsParentOfFileDialog.html
",,,,,,,,,,,JDK-8307672,JDK-8307094,JDK-8311251,JDK-8316220,JDK-8307000,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i314or:",9223372036854775807,b19,,,,,,,,,,,"2023-04-18 12:02;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/13518
Date: 2023-04-18 18:55:42 +0000;;;","2023-04-19 09:57;dukebot;Changeset: 4ad3ac63
Author:    Alexander Zuev <kizune@openjdk.org>
Date:      2023-04-19 16:56:00 +0000
URL:       https://git.openjdk.org/jdk/commit/4ad3ac6317f6fc95fdf0340885d4099e785132ad
;;;","2023-06-29 08:55;goetz;Fix request [17u]

I backport this for parity with 17.0.9-oracle.
No risk, only a test change.
Clean backport.
Tests pass.;;;","2023-06-29 09:03;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/1509
Date: 2023-06-29 15:55:28 +0000;;;","2023-09-01 00:47;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk11u-dev/pull/2113
Date: 2023-09-01 07:42:02 +0000;;;","2023-09-05 02:15;andrewlu;Fix request [11u]

I backport this for parity with 11.0.21-oracle.
No risk, only a test change.
test/jdk/java/awt/Dialog/DialogAsParentOfFileDialog.java
'!errors.isEmpty()' is modified to 'errors.length() > 0' as 'isEmpty()' is not supported in 11.
Test passes. SAP nightly testing passed.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Open source some AWT tests relating to Button and a few other classes,JDK-8306134,5098564,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,prr,prr,prr,2023-04-17 15:50,2023-06-30 00:45,2023-10-01 09:56,2023-04-19 10:38,17,21,,,,,21,client-libs,,0,amazon-interest,jdk17u-fix-request,jdk17u-fix-yes,noreg-self,sn_142,test_sprint,testbug,test-only,test-opensource,,,,,"Open source a few AWT tests for java.awt.Button, AWTEventMulticaster, AWTKeyStroke and BorderLayout ",,,,,,,,,,,JDK-8307668,JDK-8311149,JDK-8306905,JDK-8306985,JDK-8307204,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i314oj:",9223372036854775807,b19,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@5a9b3fd3,,,,,,,,,"2023-04-18 14:30;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/13520
Date: 2023-04-18 21:22:23 +0000;;;","2023-04-19 10:39;dukebot;Changeset: fdb4bafa
Author:    Phil Race <prr@openjdk.org>
Date:      2023-04-19 17:37:16 +0000
URL:       https://git.openjdk.org/jdk/commit/fdb4bafa3142cedeb9eb3cb930890e97b35402de
;;;","2023-06-29 09:03;goetz;Fix request [17u]

I backport this for parity with 17.0.9-oracle.
No risk, only a test change.
Clean backport.
Tests pass.;;;","2023-06-29 09:10;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/1510
Date: 2023-06-29 16:03:05 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Open source few AWT Drag & Drop related tests,JDK-8306133,5098563,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,dnguyen,dnguyen,dnguyen,2023-04-17 14:18,2023-08-16 02:22,2023-10-01 09:56,2023-04-28 12:16,11,17,20,21,,,21,client-libs,,0,jdk11u-fix-request,jdk11u-fix-yes,jdk17u-fix-request,jdk17u-fix-yes,noreg-self,sn_142,test_sprint,,,,,,,"Convert applet based focus tests into main based
java/awt/dnd/NextDropActionTest/NextDropActionTest.html
java/awt/dnd/NoFormatsDragEnterTest/NoFormatsDragEnterTest.html
java/awt/dnd/NoFormatsDropTest/NoFormatsDropTest.html
java/awt/dnd/NoTargetNoDragExitTest/NoTargetNoDragExitTest.html
java/awt/dnd/NotReallySerializableTest/NotReallySerializableTest.html",,,,,,,,,,,JDK-8314404,JDK-8308963,JDK-8309057,JDK-8309021,JDK-8308704,JDK-8309059,,,,,,,,,,,,,,,,,,,,JDK-8307135,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i314ob:",9223372036854775807,b21,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@5a9b3fd3,,,,,,,,,"2023-04-21 14:14;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/13591
Date: 2023-04-21 21:07:32 +0000;;;","2023-04-28 12:19;dukebot;Changeset: ec5c7926
Author:    Damon Nguyen <dnguyen@openjdk.org>
Date:      2023-04-28 19:16:12 +0000
URL:       https://git.openjdk.org/jdk/commit/ec5c7926f3cea68bf0d0ceb460a8383f5e4ea278
;;;","2023-05-18 11:44;vrudomet;[Fix request 17u] 

Clean backport, new tests, low risk
Checked on macOS x64, linux x64, windows x64: tests pass;;;","2023-05-18 12:46;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/1366
Date: 2023-05-18 19:38:19 +0000;;;","2023-08-14 00:59;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk11u-dev/pull/2076
Date: 2023-08-14 07:53:29 +0000;;;","2023-08-15 23:01;andrewlu;Fix request [11u]

I backport this for parity with 11.0.21-oracle.
No risk, only a test change.
Clean backport. Add backport for JDK-8307135.
Test passes. SAP nightly testing passed.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
[Lilliput] Refactor full GC forwarding,JDK-8306122,5098550,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,rkennke,rkennke,rkennke,2023-04-17 11:48,2023-04-18 10:02,2023-10-01 09:56,2023-04-18 10:02,repo-lilliput,,,,,,,hotspot,,0,lilliput,,,,,,,,,,,,,"Current implementation of full-GC/sliding-GC forwarding in Lilliput is problematic:
- It's scattered and hardwired all over GC implementations
- It's not switched by UseCompactObjectMonitors
- The serial compaction in G1 is commented-out and not used, not even under -XX:-UseCompactObjectMonitors

This change aims to refactor the forwarding code to address these issues.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,generic,,,,,,,,,generic,,,,,,"0|i314lf:",9223372036854775807,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6b00f96c,,,,,,,,,"2023-04-17 12:04;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/lilliput/pull/85
Date: 2023-04-17 18:50:16 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Scene not rendered initially when changing scenes after fix for JDK-8296621,JDK-8306121,5098549,Bug,Resolved,JDK,JDK,software,duke,,,P2,Fixed,tsayao,lkostyra,lkostyra,2023-04-17 11:18,2023-07-14 05:19,2023-10-01 09:56,2023-06-15 12:08,jfx20,,,,,,jfx21,javafx,,0,regression,regression_8296621,,,,,,,,,,,,"This failure happens exclusively on Linux. Test relates to checking if setting a new scene has proper scaling on systems with DPI different than 100%. With DPI > 100% the UI components would move when setting a new scene, which should cause the test failure.

Faulty test is SetSceneScalingTest.testSecondSetScene, failing assertion is:
java.lang.AssertionError
	at org.junit.Assert.fail(Assert.java:87)
	at org.junit.Assert.assertTrue(Assert.java:42)
	at org.junit.Assert.assertTrue(Assert.java:53)
	at test.robot.javafx.stage.SetSceneScalingTest$TestSecondSetSceneApp.test(SetSceneScalingTest.java:156)
	at test.robot.javafx.stage.SetSceneScalingTest$TestApp.runTest(SetSceneScalingTest.java:93)
	at test.robot.javafx.stage.SetSceneScalingTest.testSecondSetScene(SetSceneScalingTest.java:203)
	...

It seems DPI setting does not matter for this one, and these tests pass on Windows and macOS, so it is most probably a testbug.",,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8304734,JDK-8304476,,,JDK-8296621,,,,JDK-8304476,JDK-8299968,JDK-8304734,,,"2023-06-08 12:59;tsayao;FocusTest.java;https://bugs.openjdk.org/secure/attachment/104235/FocusTest.java","2023-04-22 08:45;tsayao;WinIconified.java;https://bugs.openjdk.org/secure/attachment/103522/WinIconified.java",,,,,,,,,,,,,,,linux,,,,,,"0|i314l7:",9223372036854775807,b23,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4f591050,,,,,,,,,"2023-04-20 10:38;kcr;It turns out that this is a product bug, not a test bug. It was caused by the fix for JDK-8296621. To reproduce this, you can either run the failing system test listed in the Description, or run the test program attached to JDK-8299968 (the failing regression test was adapted from that test program).;;;","2023-04-20 10:43;kcr;[~tsayao] Given this newly discovered regression, which was caused by the fix for JDK-8296621, along with the other two already-filed regressions (JDK-8304476 and JDK-8304734), I think we need to consider backing out your original fix, and then filing a redo bug to reimplement it in a way that doesn't reintroduce these three failures.;;;","2023-04-20 12:02;tsayao;I can try to fix this one. The others doesn't seem very hard to fix.
;;;","2023-04-20 12:22;jvos;I agree that a general fix is preferred over 3 platform-specific fixes. ;;;","2023-04-20 12:53;kcr;Yes. And ideally, whatever fix is done should address all three.

If that isn't feasible in a timely fashion, then we need to consider backing out the original fix and coming up with a new fix that takes these problems into account.;;;","2023-04-22 05:59;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jfx/pull/1110
Date: 2023-04-22 12:55:05 +0000;;;","2023-04-22 08:48;tsayao;Since we are touching the requestFocus, attached a test file to test the scenario were the user want to create an iconfied window (a requestFocus on the wrong place would invalidate the scenario). ;;;","2023-06-15 12:08;dukebot;Changeset: 7eb9a1c4
Author:    Thiago Milczarek Sayao <tsayao@openjdk.org>
Date:      2023-06-15 19:04:48 +0000
URL:       https://git.openjdk.org/jfx/commit/7eb9a1c47926277223fb947d90f2e08e00a9aafd
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Many components respond to a mouse event by requesting focus without supplying the MOUSE_EVENT cause,JDK-8306119,5098547,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,psadhukhan,alans,alans,2023-04-17 10:11,2023-06-09 09:52,2023-10-01 09:56,2023-05-29 01:41,9,,,,,,21,client-libs,,0,sn_145,,,,,,,,,,,,,"A focus event has an attribute that describes the cause of the focus transfer. One option is MOUSE_EVENT, which indicates that the focus transfer was triggered by a mouse event. Many Swing components request a focus transfer in response to a mouse event, but fail to supply a Cause when requesting focus. A focus event listener will find the cause to be UNKNOWN, but MOUSE_EVENT would be more appropriate.

I have found this problem in:
Text Components (see DefaultCaret)
BasicButtonListener
BasicComboPopup (see Handler and delegateFocus)
BasicScrollBarUI (see TrackListener and ArrowButtonListener)
BasicSliderUI (see TrackListener) and AquaSliderUI
BasicSpinnerUI (see ArrowButtonHandler) and AquaSpinnerUI
BasicTabbedPaneUI (see Handler)
GTKColorChooserPanel (see ColorTriangle)
AquaTextFieldSearch (see button listener)

I also note that SwingUtilities2 has helper methods that request focus, but
no equivalents that accept a Cause.

I also note that Accessibility supports requestFocus without a cause.
Should the cause be set to MOUSE_EVENT because Accessibility is basically
simulating a mouse event, or should there be a Cause parameter so that other options can be supported?

",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8080395,JDK-8309060,JDK-8154434,,JDK-8309041,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i314kr:",9223372036854775807,b25,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@568a5b31,,,,,,,,,"2023-04-20 13:13;prr;Near as I can tell what the submitter means is that these classes call the no-args methods like these
https://docs.oracle.com/en/java/javase/17/docs/api/java.desktop/java/awt/Component.html#requestFocus()
https://docs.oracle.com/en/java/javase/17/docs/api/java.desktop/java/awt/Component.html#requestFocusInWindow()

instead of these
https://docs.oracle.com/en/java/javase/17/docs/api/java.desktop/java/awt/Component.html#requestFocus(java.awt.event.FocusEvent.Cause)
https://docs.oracle.com/en/java/javase/17/docs/api/java.desktop/java/awt/Component.html#requestFocusInWindow(java.awt.event.FocusEvent.Cause);;;","2023-04-20 14:28;alans;Yep.;;;","2023-05-16 02:02;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/14004
Date: 2023-05-16 08:55:03 +0000;;;","2023-05-29 01:41;dukebot;Changeset: 70130d3b
Author:    Prasanta Sadhukhan <psadhukhan@openjdk.org>
Date:      2023-05-29 08:40:13 +0000
URL:       https://git.openjdk.org/jdk/commit/70130d3b16e76364ede72dec421ed6e7c40467fe
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Update libxml2 to 2.10.4,JDK-8306115,5098543,Bug,Resolved,JDK,JDK,software,duke,,,P2,Fixed,hmeda,vdyakov,vdyakov,2023-04-17 09:26,2023-06-20 07:16,2023-10-01 09:56,2023-04-25 04:54,8u381,jfx21,,,,,jfx21,javafx,2023-04-26 00:00,0,3rdparty,jfx20u-fix-request,jfx20u-fix-yes,sn_142,,,,,,,,,,"We currently use libxml2 version 2.10.3. We should update to the latest stable release, which is version 2.10.4
",,,,,,,,,,,JDK-8310406,JDK-8306891,JDK-8306925,JDK-8306862,JDK-8306859,JDK-8306861,JDK-8310407,,,,JDK-8275181,JDK-8306311,,,JDK-8301009,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i314jv:",9223372036854775807,b15,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@5a8b92bd,,,,,,,,,"2023-04-23 21:03;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jfx/pull/1108
Date: 2023-04-21 10:34:49 +0000;;;","2023-04-25 04:54;dukebot;Changeset: cf5b8389
Author:    Hima Bindu Meda <hmeda@openjdk.org>
Date:      2023-04-25 11:53:45 +0000
URL:       https://git.openjdk.org/jfx/commit/cf5b8389cd70d41a22d645added25a9978640e2c
;;;","2023-04-25 05:03;hmeda;Fix Request JFX20u:
Request to approve backport of this commit to jfx20u.
Clean backport and low risk.Needed to keep native WebKit code in sync ;;;","2023-04-25 10:47;kcr;Approved to backport to jfx20u.;;;","2023-04-25 21:08;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jfx20u/pull/15
Date: 2023-04-26 04:03:13 +0000;;;","2023-06-20 06:33;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jfx17u/pull/133
Date: 2023-06-20 13:24:53 +0000;;;","2023-06-20 06:41;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jfx11u/pull/141
Date: 2023-06-20 13:31:52 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
PPC64: RT call after thaw with exception requires larger ABI section,JDK-8306111,5098537,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,rrich,rrich,rrich,2023-04-17 07:45,2023-05-23 09:44,2023-10-01 09:56,2023-04-19 00:20,21,,,,,,21,hotspot,,0,loom,oraclejdk-na,oracle-triage-21,ppc,,,,,,,,,,"After thawing continuation frames the top frame has only got the minimal ABI of size `frame::metadata_words_at_top`. This is not sufficient for the runtime call of `SharedRuntime::exception_handler_for_return_address()` to forward an exception in or over the thawed frame.

Depending on the ELF ABI version (see `ABI_ELFv2`) there has to be an ABI section of 12 or 14 words for a call [2].

Below we see 2 frames with just 4 words == `frame::metadata_words_at_top`
ABI. The callee expects 12 or 14 words and might overwrite live data of the
caller.

Compiled Top Frame
==========================

0x00007ffff5a4da50: 0x00007ffff5a4daf0 #0 nmethod 0x00007fffe0726310 for method J BasicExt$Continuation3Frames.ord103_testMethod_dontinline(JJJLjava/lang/String;)Ljava/lang/String;
                                       - #0 scope BasicExt$Continuation3Frames.ord103_testMethod_dontinline(JJJLjava/lang/String;)Ljava/lang/String; @ 7
                                       unextended_sp for #1
                                       sp for #1
0x00007ffff5a4da48: 0x00007fffdfe885f0
0x00007ffff5a4da40: 0x0000000000000185
0x00007ffff5a4da38: 0x00007fffd8ac0000
0x00007ffff5a4da30: 0x00007fffe07265ec return address
0x00007ffff5a4da28: 0x0000000028800282
0x00007ffff5a4da20: 0x00007ffff5a4da50 unextended_sp for #0


Interpreted Top Frame (should be viewed with monospace font)
==============================

0x00007ffff5a4d9f0: 0x00007ffff5a4daf0 #0 method BasicExt$Continuation3Frames.ord103_testMethod_dontinline(JJJLjava/lang/String;)Ljava/lang/String; @ 7
                                       - 8 locals 9 max stack
                                       -  codelet: return entry points
                                       sp for #1
0x00007ffff5a4d9e8: 0x00007fffb4724a90 fresult
0x00007ffff5a4d9e0: 0x00007ffff5a4d6f0 lresult
0x00007ffff5a4d9d8: 0x0000000000000000 oop_tmp
0x00007ffff5a4d9d0: 0x00007ffff5a4da50 sender_sp
0x00007ffff5a4d9c8: 0x00007ffff5a4d8e0 top_frame_sp
0x00007ffff5a4d9c0: 0x0000000000000000 mdx
0x00007ffff5a4d9b8:.0x00007ffff5a4d940.esp.-------+
0x00007ffff5a4d9b0:.0x00007fffb4707abf.bcp........|
0x00007ffff5a4d9a8:.0x00007fffb470e8e0.cpoolCache.|
0x00007ffff5a4d9a0:.0x00007ffff5a4d988.monitors...|
0x00007ffff5a4d998:.0x000000000000000b.locals.....|
0x00007ffff5a4d990:.0x00000000ffc5ec80.mirror.....|
.......................................oop.for.#0.|
0x00007ffff5a4d988:.0x00007fffb4707b10.method.....|
0x00007ffff5a4d980:.0x00000000ffc60650............|
0x00007ffff5a4d978:.0x0000000000000000............|
0x00007ffff5a4d970:.0x0000000000000001............|
0x00007ffff5a4d968:.0x0000000000000000............|
0x00007ffff5a4d960:.0x0000000000000002............|
0x00007ffff5a4d958:.0x0000000000000000............|
0x00007ffff5a4d950:.0x0000000000000003............|
0x00007ffff5a4d948:.0x00000000ffb017d8............|
0x00007ffff5a4d940:.0x00007ffff0019250.<----------+
0x00007ffff5a4d938: 0x0000000000000003
0x00007ffff5a4d930: 0x00007fffdfe88234 return address
0x00007ffff5a4d928: 0x00000000bbaaddf9
0x00007ffff5a4d920: 0x00007ffff5a4d9f0 unextended_sp for #0
                                       sp for #0


[1] frame::java_abi

[2] ELF ABI v2: 2.2.2. The Stack Frame: https://openpowerfoundation.org/specifications/64bitelfabi/
    ELF ABI v1.9: https://refspecs.linuxfoundation.org/ELF/ppc64/PPC-elf64abi.html#STACK
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8308695,,,,,,,,,,,,ppc,,,,,,,,,,,,,,,"0|i314ij:",9223372036854775807,b19,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2023-04-17 12:49;dlong;ILW = possible overwrite of live data; ppc64 and virtual threads; no workaround = MMH = P3;;;","2023-04-18 06:17;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/13505
Date: 2023-04-18 07:54:29 +0000;;;","2023-04-19 00:20;dukebot;Changeset: 42b7260e
Author:    Richard Reingruber <rrich@openjdk.org>
Date:      2023-04-19 07:18:26 +0000
URL:       https://git.openjdk.org/jdk/commit/42b7260e8be02de78d82c6a4601519b9895826e9
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Open source AWT misc tests,JDK-8306076,5098504,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,psadhukhan,psadhukhan,psadhukhan,2023-04-17 02:15,2023-07-10 09:40,2023-10-01 09:56,2023-04-24 00:54,17,21,,,,,21,client-libs,,0,amazon-interest,jdk17u-fix-request,jdk17u-fix-yes,sn_142,test_sprint,,,,,,,,,"Convert applet based AWT miscellaneous test into main based

java/awt/Frame/RemoveNotifyTest/RemoveNotifyTest.html
java/awt/Icon/NullIconImageTest/NullIconImageTest.html
java/awt/Icon/SetIconImageExceptionTest/SetIconImageExceptionTest.html
java/awt/KeyStroke/CacheTest.html",,,,,,,,,,,JDK-8311838,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i314bf:",9223372036854775807,b20,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@5a9b3fd3,,,,,,,,,"2023-04-20 22:06;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/13572
Date: 2023-04-21 04:59:10 +0000;;;","2023-04-24 00:54;dukebot;Changeset: f7d45b85
Author:    Prasanta Sadhukhan <psadhukhan@openjdk.org>
Date:      2023-04-24 07:51:47 +0000
URL:       https://git.openjdk.org/jdk/commit/f7d45b85a5c664a87c94e0baccd8b9eddce27e2c
;;;","2023-07-07 10:44;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/1558
Date: 2023-07-07 17:13:16 +0000;;;","2023-07-07 11:23;phh;Fix Request (17u).

On behalf of Jenny Shivayogi, kspeeyu@amazon.com.

Clean test-only backport, new tests all pass. tier1 tested with GHA, tier2 tested on linux.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Open source several AWT MouseInfo related tests,JDK-8306072,5098499,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,tr,tr,tr,2023-04-17 01:29,2023-05-23 10:20,2023-10-01 09:56,2023-04-25 22:47,,,,,,,21,client-libs,,0,jdk17u-fix-request,jdk17u-fix-yes,sn_142,test_sprint,,,,,,,,,,"Convert applet based Mouse Info tests into main based

java/awt/MouseInfo/ButtonsNumber.html
java/awt/MouseInfo/ContainerMousePositionTest.html ",,,,,,,,,,,JDK-8308706,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,generic,,,,,,,,,generic,,,,,,"0|i314ab:",9223372036854775807,b20,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@5a9b3fd3,,,,,,,,,"2023-04-20 22:24;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/13573
Date: 2023-04-21 05:19:14 +0000;;;","2023-04-25 22:47;dukebot;Changeset: 44d9f55d
Author:    Tejesh R <tr@openjdk.org>
Date:      2023-04-26 05:44:13 +0000
URL:       https://git.openjdk.org/jdk/commit/44d9f55d0b3c469988be6f1c47f0cfbc433c4490
;;;","2023-05-18 11:44;vrudomet;[Fix request 17u] 

Clean backport, new tests, low risk
Checked on macOS x64, linux x64, windows x64: tests pass;;;","2023-05-18 13:04;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/1371
Date: 2023-05-18 19:53:22 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
"Open source AWT Graphics,GridBagLayout related tests",JDK-8306067,5098495,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,psadhukhan,psadhukhan,psadhukhan,2023-04-17 00:45,2023-05-26 01:56,2023-10-01 09:56,2023-04-25 01:56,17,21,,,,,21,client-libs,,0,amazon-interest,sn_142,test_sprint,,,,,,,,,,,"Convert applet based AWT Graphics,GridBagLayout tests into main based

java/awt/Graphics/DrawNullStringTest/DrawNullStringTest.html
java/awt/Graphics/GetGraphicsTest/GetGraphicsTest.html
java/awt/GridBagLayout/GridBagLayoutButtonsOverlapTest/GridBagLayoutButtonsOverlapTest.html
java/awt/GridBagLayout/GridBagLayoutOutOfBoundsTest/Gr",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8306838,,,,JDK-8306849,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i3149f:",9223372036854775807,b20,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@5a9b3fd3,,,,,,,,,"2023-04-20 21:06;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/13570
Date: 2023-04-21 04:00:39 +0000;;;","2023-04-25 01:56;dukebot;Changeset: d53a5eed
Author:    Prasanta Sadhukhan <psadhukhan@openjdk.org>
Date:      2023-04-25 08:55:00 +0000
URL:       https://git.openjdk.org/jdk/commit/d53a5eed0f64d97e1f688ed4cde006ae2a676231
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Open source few AWT Insets related tests,JDK-8306060,5098485,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,psadhukhan,psadhukhan,psadhukhan,2023-04-16 22:19,2023-07-14 01:47,2023-10-01 09:56,2023-04-20 19:44,17,21,,,,,21,client-libs,,0,amazon-interest,jdk17u-fix-request,jdk17u-fix-yes,sn_142,test_sprint,,,,,,,,,"Convert applet based Insets tests into main based

java/awt/Insets/ClobberSharedInsetsObject/ClobberSharedInsetsObjectTest.html
java/awt/Insets/RemoveMenuBarTest/RemoveMenuBarTest.html
java/awt/Insets/SetInsetsTest/SetInsetsTest.html
java/awt/Insets/WindowInsetsTest/WindowInsetsTest.html",,,,,,,,,,,JDK-8312079,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i31477:",9223372036854775807,b20,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@5a9b3fd3,,,,,,,,,"2023-04-19 19:56;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/13552
Date: 2023-04-20 02:49:00 +0000;;;","2023-04-20 19:44;dukebot;Changeset: 9a68d1d9
Author:    Prasanta Sadhukhan <psadhukhan@openjdk.org>
Date:      2023-04-21 02:42:55 +0000
URL:       https://git.openjdk.org/jdk/commit/9a68d1d952c308c03c29747794d409831008c144
;;;","2023-07-13 16:05;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/1581
Date: 2023-07-13 22:58:29 +0000;;;","2023-07-13 17:10;btaylor;Fix request (17u) on behalf of kspeeyu. Clean test-only backport, testing details on PR;;;","2023-07-13 17:12;vdyakov;[~dlutker] we are NOT re-assigning the main bug from Contributor/Author to someone else (even in case you are on back porting..);;;","2023-07-13 17:14;dlutker;Sorry, it was a misclick and I was in the process of fixing and you beat me to it.;;;","2023-07-13 17:15;vdyakov;No probs;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
improve the reliability of TestSerialGCWithCDS.java and ArchiveRelocationTest.java tests,JDK-8306059,5098484,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,ccheung,ccheung,ccheung,2023-04-16 21:56,2023-05-02 09:06,2023-10-01 09:56,2023-04-18 14:25,21,,,,,,21,hotspot,,0,cds,noreg-self,,,,,,,,,,,,"The TestSerialGCWithCDS.java test contains the following check:

      if (out.getOutput().contains(""Trying to map heap"") || out.getOutput().contains(""Loaded heap"")) {
            // The native data in the RO/RW regions have been relocated. If the CDS heap is
            // mapped/loaded, we must patch all the native pointers. (CDS heap is
            // not supported on all platforms)
            out.shouldContain(""Patching native pointers in heap region"");
        }

However, it is possible for the archive to be mapped to the requested address even if ArchiveRelocationMode=1.

Similar issue may also be in the ArchiveRelocationTest.java test.",,,,,,,,,,,JDK-8307273,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i3146z:",9223372036854775807,b19,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,,,"2023-04-17 16:54;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/13502
Date: 2023-04-17 23:48:51 +0000;;;","2023-04-18 14:25;dukebot;Changeset: 1b5d35ad
Author:    Calvin Cheung <ccheung@openjdk.org>
Date:      2023-04-18 21:23:42 +0000
URL:       https://git.openjdk.org/jdk/commit/1b5d35ad2c8f0f3a43caba9d7a6d8e74f66caf5f
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
False arguments calling dispatch_base for aarch64,JDK-8306057,5098483,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,jkarthikeyan,jkarthikeyan,jkarthikeyan,2023-04-16 21:45,2023-05-24 23:10,2023-10-01 09:56,2023-05-19 06:01,21,,,,,,21,hotspot,,0,c2,c2-cleanup,cleanup,interpreter,noreg-cleanup,,,,,,,,,"Making an issue for this PR without one: https://github.com/openjdk/jdk/pull/12706

Description is as follows from the PR:
-- In interp_masm_aarch64.cpp, dispatch_base was define as
void dispatch_base(TosState state,
address* table,
bool verifyoop = true,
bool generate_poll = false);

-- But in dispatch_next of interp_masm_aarch64.cpp,
it is called:
dispatch_base(state,
Interpreter::dispatch_table(state),
generate_poll);

",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,aarch64,,,,,,,,,,,,,,,"0|i3146r:",9223372036854775807,b24,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,,,"2023-04-16 23:19;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/12706
Date: 2023-02-22 03:10:24 +0000;;;","2023-05-16 12:02;mwthomps;[~jkarthikeyan] [~fyang] Can someone sponsor this change?;;;","2023-05-19 06:01;dukebot;Changeset: 326d778c
Author:    Kick-it11 <31734298+Kick-it11@users.noreply.github.com>
Committer: Andrew Haley <aph@openjdk.org>
Date:      2023-05-19 12:59:46 +0000
URL:       https://git.openjdk.org/jdk/commit/326d778ccfc02a52f1dd3b2675edb386e99b776a
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
C2: failed: Missed optimization opportunity in PhaseCCP (adding LShift->Cast->Add notification),JDK-8306042,5098467,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,epeter,dholmes,dholmes,2023-04-16 14:41,2023-07-10 00:11,2023-10-01 09:56,2023-05-03 03:48,21,,,,,,21,hotspot,,0,c2,javafuzzer,oracle-triage-11,oracle-triage-17,oracle-triage-21,,,,,,,,,"Occurred during execution of JavaFuzzer

Missed Value optimization:
dist dump
---------------------------------------------
   1   142  ConI  === 0  [[ 1778 681 228 228 198 200 201 231 3534 657 227 203 1777 204 205 206 233 234 3874 208 209 210 229 217 211 212 213 230 66 232 3884 1776 68 62 1763 1763 1764 1764 1765 1765 1766 1766 1767 1768 1769 972 1770 237 1771 1772 1375 1760 1759 1758 1757 1756 1755 1754 1753 1752 236 235 1364 1751 1750 1749 1748 1747 1746 1745 1744 1743 1742 1741 1773 1377 65 238 3568 1774 1775 4076 ]]  #int:13
   1  3875  CastII  === 3829 188  [[ 3874 ]]  #int unconditional dependency
   0  3874  AndI  === _ 3875 142  [[ 3806 ]]  !orig=[380],[577] !jvms: Test::mainTest @ bci:164 (line 175)
Current type:
int:0
Optimized type:
int:0..13:www


#
# A fatal error has been detected by the Java Runtime Environment:
#
#  Internal Error (c:\sb\prod\1681507186\workspace\open\src\hotspot\share\opto\phaseX.cpp:2010), pid=23224, tid=59124
#  assert(!failure) failed: Missed optimization opportunity in PhaseCCP
#
# JRE version: Java(TM) SE Runtime Environment (21.0+19) (fastdebug build 21-ea+19-LTS-1517)
# Java VM: Java HotSpot(TM) 64-Bit Server VM (fastdebug 21-ea+19-LTS-1517, compiled mode, sharing, tiered, compressed oops, compressed class ptrs, g1 gc, windows-amd64)
# Core dump will be written. Default location: C:\sb\prod\1681642304\testoutput\test-support\jtreg_closed_test_hotspot_jtreg_applications_javafuzzer_BigTest_java\tmp\fuzzer.tmp.J3bHs5hCgO\hs_err_pid23224.mdmp
#
# If you would like to submit a bug report, please visit:
#   https://bugreport.java.com/bugreport/crash.jsp
#

---------------  S U M M A R Y ------------

Command Line: -Xmx1G -Xcomp -Xbatch -XX:CompileOnly=Test -XX:CompileCommand=quiet -XX:MaxRAMPercentage=4.16667 -Dtest.boot.jdk=c:\ade\mesos\work_dir\jib-master\install\jdk\19\36\bundles\windows-x64\jdk-19_windows-x64_bin.zip\jdk-19 -Djava.io.tmpdir=c:\sb\prod\1681642304\testoutput\test-support\jtreg_closed_test_hotspot_jtreg_applications_javafuzzer_BigTest_java\tmp Test

Host: AMD EPYC 7J13 64-Core Processor                , 12 cores, 23G,  Windows Server 2016 , 64 bit Build 14393 (10.0.14393.3630)
Time: Sun Apr 16 16:44:11 2023 /GM elapsed time: 2.077967 seconds (0d 0h 0m 2s)

---------------  T H R E A D  ---------------

Current thread (0x000002ada11b9910):  JavaThread ""C2 CompilerThread0"" daemon [_thread_in_native, id=59124, stack(0x000000d943d00000,0x000000d943e00000)]


Current CompileTask:
C2:   2078   84   !b  4       Test::mainTest (609 bytes)

Stack: [0x000000d943d00000,0x000000d943e00000]
Native frames: (J=compiled Java code, j=interpreted, Vv=VM code, C=native code)
V  [jvm.dll+0xbd5dd1]  os::win32::platform_print_native_stack+0xf1  (os_windows_x86.cpp:236)
V  [jvm.dll+0xe4ef99]  VMError::report+0x1019  (vmError.cpp:815)
V  [jvm.dll+0xe50bf5]  VMError::report_and_die+0x645  (vmError.cpp:1588)
V  [jvm.dll+0xe51304]  VMError::report_and_die+0x64  (vmError.cpp:1353)
V  [jvm.dll+0x53101b]  report_vm_error+0x5b  (debug.cpp:191)
V  [jvm.dll+0xc1adc6]  PhaseCCP::analyze+0x996  (phaseX.cpp:1994)
V  [jvm.dll+0xc17478]  PhaseCCP::PhaseCCP+0xe8  (phaseX.cpp:1933)
V  [jvm.dll+0x4c5415]  Compile::Optimize+0xbb5  (compile.cpp:2373)
V  [jvm.dll+0x4c27e8]  Compile::Compile+0x1458  (compile.cpp:841)
V  [jvm.dll+0x3e0daa]  C2Compiler::compile_method+0x11a  (c2compiler.cpp:121)
V  [jvm.dll+0x4ddcf1]  CompileBroker::invoke_compiler_on_method+0x881  (compileBroker.cpp:2268)
V  [jvm.dll+0x4db2c6]  CompileBroker::compiler_thread_loop+0x396  (compileBroker.cpp:1945)
V  [jvm.dll+0x7af2f4]  JavaThread::thread_main_inner+0x224  (javaThread.cpp:718)
V  [jvm.dll+0xdc56cb]  Thread::call_run+0x1cb  (thread.cpp:229)
V  [jvm.dll+0xbd4700]  os::win32::thread_native_entry+0xa0  (os_windows.cpp:551)
C  [ucrtbase.dll+0x1fb80]
C  [KERNEL32.DLL+0x84d4]
C  [ntdll.dll+0x51791]
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8307619,JDK-8257197,,,,"2023-04-16 22:52;thartmann;Test.java;https://bugs.openjdk.org/secure/attachment/103456/Test.java","2023-04-18 10:22;epeter;Test2.java;https://bugs.openjdk.org/secure/attachment/103480/Test2.java","2023-04-16 23:21;thartmann;TestReduced.java;https://bugs.openjdk.org/secure/attachment/103465/TestReduced.java",,,,,,,,,,,,,,,,,,,,"0|i31437:",9223372036854775807,b21,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2023-04-16 22:54;thartmann;Reproducible with attached Test.java and ""-Xmx1G -Xcomp -Xbatch -XX:CompileOnly=Test -XX:CompileCommand=quiet""
Fails since the verification code was introduced with JDK-8257197 and also with latest JDK 21.

ILW = Imprecise type information leading to missed optimization opportunities and could hit assertion in CCP verification code, rare, no workaround = MLH = P4;;;","2023-04-16 23:21;thartmann;Attached a reduced test:
java -Xcomp -XX:CompileOnly=TestReduced -XX:CompileCommand=quiet TestReduced.java;;;","2023-04-18 09:44;epeter;Initial analysis:
We have a case like this:
Phi -> ShiftL -> CastII -> AndI

The Phi has an updated type, so we should re-run Value on the AndI.

In PhaseCCP::push_and, we do update a similar pattern:
X -> ShiftL -> AndI

So the missing part is the CastII. The question is if I should fix this by skipping a single CastII, or if we should traverse an arbitrary chain of CastII?
Because ""shift = shift->uncast();"" in MulNode::AndIL_shift_and_mask_is_always_zero skips an arbitrary number of CastII nodes.;;;","2023-04-18 10:22;epeter;Simplified it just a bit more, and added some comments:
./java -Xcomp -XX:CompileOnly=Test2 -XX:CompileCommand=quiet Test2.java;;;","2023-04-19 01:39;thartmann;I think we should fix it properly and handle an arbitrary chain of CastIIs. Otherwise, we risk issues like JDK-8288683.;;;","2023-04-24 04:40;epeter;Draft:
https://github.com/openjdk/jdk/pull/13611;;;","2023-04-24 23:23;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/13611
Date: 2023-04-24 11:32:48 +0000;;;","2023-05-03 03:47;dukebot;Changeset: e9807a4b
Author:    Emanuel Peter <epeter@openjdk.org>
Date:      2023-05-03 10:45:30 +0000
URL:       https://git.openjdk.org/jdk/commit/e9807a4b0f3533512623fba96042472b69d4ac34
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
HttpResponseInputStream.available() returns 1 on empty stream,JDK-8306040,5098437,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,ccleary,webbuggrp,webbuggrp,2023-04-14 10:37,2023-08-31 00:54,2023-10-01 09:56,2023-08-24 08:49,13,17,20,21,,,22,core-libs,,0,amazon-interest,dcsaw,regression,reproducer-yes,webbug,,,,,,,,,"ADDITIONAL SYSTEM INFORMATION :
Oracle Linux 9
Oracle JDK 17.0.6

A DESCRIPTION OF THE PROBLEM :
When making calls using HttpClient to an endpoint which returns a 204 and no content, the jdk.internal.net.http.ResponseSubscribers.HttpResponseInputStream.available() method returns 1 instead of the expected result of 0 when called on the result.

REGRESSION : Last worked in version 11.0.18

STEPS TO FOLLOW TO REPRODUCE THE PROBLEM :
Execute a call against an endpoint returning a 204 and no content like this:
      HttpClient client = HttpClient.newHttpClient();
      HttpResponse<InputStream> resp = client.send(req, HttpResponse.BodyHandlers.ofInputStream());
      try (InputStream in = resp.body()) {
        int available = in.available();
        if (available > 0) {
          throw new RuntimeException(""Received available()"" + available);
        }
      }

EXPECTED VERSUS ACTUAL BEHAVIOR :
EXPECTED -
available() should return 0.
ACTUAL -
available() returns 1.  This occurs because the buffers queue within the client contains a single HeapByteBuffer with a capacity of 0.

---------- BEGIN SOURCE ----------
import java.io.IOException;
import java.io.InputStream;
import java.net.*;
import java.net.http.*;

import com.sun.net.httpserver.HttpServer;

public class TestHttpClient {
  public static void main(String... args)
      throws IOException, URISyntaxException, InterruptedException {
    // start a basic server that responds with 204 to all requests
    InetAddress address = InetAddress.getLoopbackAddress();
    InetSocketAddress socketAddress = new InetSocketAddress(address.getHostName(), 8080);
    HttpServer server = HttpServer.create(socketAddress, 20);
    server.createContext(""/"", e -> e.sendResponseHeaders(204, -1));
    server.start();

    // call it with a client
    try {
      HttpRequest req = HttpRequest.newBuilder()
          .uri(new URI(""http"", null, address.getHostName(), 8080, null, null, null)).GET().build();
      HttpClient client = HttpClient.newHttpClient();
      HttpResponse<InputStream> resp = client.send(req, HttpResponse.BodyHandlers.ofInputStream());
      try (InputStream in = resp.body()) {
        int available = in.available();
        if (available > 0) {
          throw new RuntimeException(""Received available()"" + available);
        }
      }
    }
    finally {
      server.stop(0);
    }
  }
}
---------- END SOURCE ----------

FREQUENCY : always


",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"2023-04-16 06:20;tongwan;TestHttpClient.java;https://bugs.openjdk.org/secure/attachment/103451/TestHttpClient.java",,,,,,,generic,,,,,,b06,13,,generic,,,,,,"0|i313wj:",9223372036854775807,b13,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@446e124a,,,,,,,,,"2023-04-16 06:31;tongwan;The observations on Windows 10:
JDK 11: Passed.
JDK 13ea+5: Passed.
JDK 13ea+6: Failed, available() returns 1.
JDK 17: Failed.
JDK 20: Failed.
JDK 21ea+5: Failed.;;;","2023-07-07 23:19;vtewari;created a PR(https://github.com/openjdk/jdk/pull/14810);;;","2023-07-10 07:25;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/14810
Date: 2023-07-08 06:15:13 +0000;;;","2023-08-24 08:49;dukebot;Changeset: acaab6fd
Author:    Vyom Tewari <vtewari@openjdk.org>
Date:      2023-08-24 15:46:44 +0000
URL:       https://git.openjdk.org/jdk/commit/acaab6fd74f507bb6b18167505d88e505bdf24bd
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
SystemModulesPlugin generates code that doesn't pop when return value not used,JDK-8306038,5098463,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,mchung,alanb,alanb,2023-04-16 01:15,2023-04-24 11:34,2023-10-01 09:56,2023-04-19 08:58,21,,,,,,21,tools,,0,,,,,,,,,,,,,,"The code generated to call the builder's newRequires, newExports, newOpens, newProvides needs to pop the stack after the call as the return is not used.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i3142b:",9223372036854775807,b19,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@3da653bd,,,,,,,,,"2023-04-16 10:48;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/13442
Date: 2023-04-12 09:18:13 +0000;;;","2023-04-19 08:58;dukebot;Changeset: c57af319
Author:    Oliver Kopp <kopp.dev@gmail.com>
Committer: Mandy Chung <mchung@openjdk.org>
Date:      2023-04-19 15:56:34 +0000
URL:       https://git.openjdk.org/jdk/commit/c57af319f668e10b2b357bb961903a6236d5521f
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Resolve multiple definition of 'throwIOException' and friends when statically linking with JDK native libraries,JDK-8306033,5098454,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,jiangli,jiangli,jiangli,2023-04-14 17:15,2023-05-01 10:12,2023-10-01 09:56,2023-04-26 09:07,,,,,,,21,security-libs,,0,,,,,,,,,,,,,,"When statically link JDK native libraries and libjvm (see JDK-8303796 for more details), the linker reports failures due to multiple definitions of 'throwIOException' and friends, including:

- throwByName
- throwOutOfMemoryError
- throwNullPointerException
- throwIOException
- throw_internal_error

E.g. of linker errors:

/.../lib/libj2pcsc.a(pcsc.o): in function `throwOutOfMemoryError':
/.../src/java.smartcardio/share/native/libj2pcsc/pcsc.c:71: multiple definition of `throwOutOfMemoryError'; /.../build/linux-x86_64-server-slowdebug/images/static-libs/lib/libj2gss.a(NativeUtil.o):/.../src/java.security.jgss/share/native/libj2gss/NativeUtil.c:464: first defined here
/usr/bin/ld: /.../build/linux-x86_64-server-slowdebug/images/static-libs/lib/libj2pcsc.a(pcsc_md.o): in function `throwByName':
/.../src/java.smartcardio/unix/native/libj2pcsc/pcsc_md.c:60: multiple definition of `throwByName'; /.../build/linux-x86_64-server-slowdebug/images/static-libs/lib/libj2gss.a(NativeUtil.o):/.../src/java.security.jgss/share/native/libj2gss/NativeUtil.c:456: first defined here
...
/usr/bin/ld: /.../build/linux-x86_64-server-slowdebug/images/static-libs/lib/libj2pkcs11.a(p11_util.o): in function `throwByName':
/.../src/jdk.crypto.cryptoki/share/native/libj2pkcs11/p11_util.c:243: multiple definition of `throwByName'; /.../build/linux-x86_64-server-slowdebug/images/static-libs/lib/libj2gss.a(NativeUtil.o):/.../src/java.security.jgss/share/native/libj2gss/NativeUtil.c:456: first defined here
/usr/bin/ld: /.../build/linux-x86_64-server-slowdebug/images/static-libs/lib/libj2pkcs11.a(p11_util.o): in function `throwOutOfMemoryError':
/usr/local/google/home/jianglizhou/github/jdk-makefiles-static/src/jdk.crypto.cryptoki/share/native/libj2pkcs11/p11_util.c:254: multiple definition of `throwOutOfMemoryError'; /.../build/linux-x86_64-server-slowdebug/images/static-libs/lib/libj2gss.a(NativeUtil.o):/.../src/java.security.jgss/share/native/libj2gss/NativeUtil.c:464: first defined here
/usr/bin/ld: /.../build/linux-x86_64-server-slowdebug/images/static-libs/lib/libj2pkcs11.a(p11_util.o): in function `throwNullPointerException':
/.../src/jdk.crypto.cryptoki/share/native/libj2pkcs11/p11_util.c:262: multiple definition of `throwNullPointerException'; /.../build/linux-x86_64-server-slowdebug/images/static-libs/lib/libj2pcsc.a(pcsc_md.o):/.../src/java.smartcardio/unix/native/libj2pcsc/pcsc_md.c:71: first defined here
/usr/bin/ld: /.../build/linux-x86_64-server-slowdebug/images/static-libs/lib/libj2pkcs11.a(p11_util.o): in function `throwIOException':
/.../src/jdk.crypto.cryptoki/share/native/libj2pkcs11/p11_util.c:270: multiple definition of `throwIOException'; /.../build/linux-x86_64-server-slowdebug/images/static-libs/lib/libj2pcsc.a(pcsc_md.o):/.../src/java.smartcardio/unix/native/libj2pcsc/pcsc_md.c:79: first defined here
/usr/bin/ld: /.../images/static-libs/lib/libmanagement_ext.a(management_ext.o): in function `throw_internal_error':...
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8303796,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i3140b:",9223372036854775807,b20,,,,,,,,,,,"2023-04-14 17:21;jiangli;There are a few miscellaneous symbol collisions remaining after resolving this one, for statically linking the standard 'java' launcher executable with JDK native libraries and libjvm. I'll create a bug for the remaining ones.  ;;;","2023-04-16 21:50;jiangli;In our prototype on JDK 11, we simplify redefine these symbols using #define to address related symbol conflicts, with minimum changes.

For the OpenJDK latest codebase, I'm resolving the symbol issue with:
- Make function/variable 'static' if feasible. That's suggested by  Alan Bateman in https://github.com/openjdk/jdk/commit/ce4b9955568100d6b315336321ff8903b703f19e, JDK-8305761.
- Otherwise, directly rename function/variable.;;;","2023-04-17 10:24;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/13497
Date: 2023-04-17 16:56:31 +0000;;;","2023-04-26 09:07;dukebot;Changeset: 9bc6a212
Author:    Jiangli Zhou <jiangli@openjdk.org>
Date:      2023-04-26 16:04:48 +0000
URL:       https://git.openjdk.org/jdk/commit/9bc6a212f70eede108a8d3bc1ba1f780722b6e33
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Clarify JVMTI heap functions spec about virtual thread stack.,JDK-8306027,5098447,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,amenkov,amenkov,amenkov,2023-04-14 14:42,2023-05-16 16:11,2023-10-01 09:56,2023-05-09 14:16,,,,,,,21,hotspot,,0,loom,,,,,,,,,,,,,"Specification of FollowReferences function says:
 The heap root are the set of system classes, JNI globals, references from thread stacks, and other objects used as roots for the purposes of garbage collection.
But virtual threads and their stacks are deliberately not roots.
Need to update the spec to reflect this.
The same issue with IterateOverReachableObjects spec:
 The root objects comprise the set of system classes, JNI globals, references from thread stacks, and other objects used as roots for the purposes of garbage collection. 

Also need to update description of JVMTI_HEAP_REFERENCE_STACK_LOCAL, JVMTI_HEAP_REFERENCE_JNI_LOCAL values as their descriptions says ""Heap root reference"".",,,,,,,,,,,,,,,,,,,,,,,JDK-8306781,,,,,,,,,,,,,JDK-8299414,,,,,,,,,,,,generic,,,,,,,,,generic,,,,,,"0|i313yr:",9223372036854775807,b22,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@661b156a,,,,,,,,,"2023-05-08 07:19;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/13661
Date: 2023-04-25 22:22:55 +0000;;;","2023-05-09 14:16;dukebot;Changeset: f5a6b7f7
Author:    Alex Menkov <amenkov@openjdk.org>
Date:      2023-05-09 21:14:17 +0000
URL:       https://git.openjdk.org/jdk/commit/f5a6b7f7c03c00c96d0055f9be31057675205e13
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Several Vector API tests fail for client VM after JDK-8304450,JDK-8306008,5098425,Bug,Closed,JDK,JDK,software,duke,,,P3,Fixed,qamai,gcao,gcao,2023-04-14 07:12,2023-08-08 11:23,2023-10-01 09:56,2023-04-25 09:16,21,,,,,,21,core-libs,,0,vectorapi,,,,,,,,,,,,,"Witnessed several vector-api test failures after JDK-8304450 for client VM on platforms like linux-aarch64:

```
# newfailures.txt
jdk/incubator/vector/DoubleMaxVectorLoadStoreTests.java 
jdk/incubator/vector/DoubleMaxVectorTests.java 
jdk/incubator/vector/LongMaxVectorLoadStoreTests.java 
jdk/incubator/vector/LongMaxVectorTests.java 
jdk/incubator/vector/Vector64ConversionTests.java#id0 
jdk/incubator/vector/VectorMaxConversionTests.java#id0 
jdk/incubator/vector/VectorMaxConversionTests.java#id1 
```

For example, Vector64ConversionTests has the following error stack when executing the shuffleCast method:
```
java.lang.IllegalArgumentException: Bad vector bit-size: 32
	at jdk.incubator.vector/jdk.incubator.vector.VectorShape.forBitSize(VectorShape.java:142)
	at jdk.incubator.vector/jdk.incubator.vector.LongMaxVector$LongMaxShuffle.intoArray(LongMaxVector.java:809)
	at jdk.incubator.vector/jdk.incubator.vector.AbstractShuffle.toArray(AbstractShuffle.java:76)
	at AbstractVectorConversionTest.legal_shuffle_cast_kernel(AbstractVectorConversionTest.java:534)
	at Vector64ConversionTests.shuffleCast(Vector64ConversionTests.java:116)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
	at java.base/java.lang.reflect.Method.invoke(Method.java:578)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:132)
	at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:599)
	at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:174)
	at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
	at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:822)
	at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:147)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
	at org.testng.TestRunner.privateRun(TestRunner.java:764)
	at org.testng.TestRunner.run(TestRunner.java:585)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:384)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:378)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:337)
	at org.testng.SuiteRunner.run(SuiteRunner.java:286)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1218)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1140)
	at org.testng.TestNG.runSuites(TestNG.java:1069)
	at org.testng.TestNG.run(TestNG.java:1037)
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:93)
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:53)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
	at java.base/java.lang.reflect.Method.invoke(Method.java:578)
	at com.sun.javatest.regtest.agent.MainWrapper$MainThread.run(MainWrapper.java:125)
	at java.base/java.lang.Thread.run(Thread.java:1592)
```

The method for reporting errors:
```
        public void intoArray(int[] a, int offset) {
            VectorSpecies<Integer> species = VectorSpecies.of(
                    int.class,
                    VectorShape.forBitSize(length() * Integer.SIZE));
            Vector<Long> v = toBitsVector();
            v.convertShape(VectorOperators.L2I, species, 0)
                    .reinterpretAsInts()
                    .intoArray(a, offset);
        }
```

`DoubleMaxShuffle.intoArray` calculates `length() * Integer.SIZE` equal to 32, so an exception occurs, `VectorShape.forBitSize` is implemented as follows:

```
    @ForceInline
    public static VectorShape forBitSize(int bitSize) {
        switch (bitSize) {
            case 64:
                return VectorShape.S_64_BIT;
            case 128:
                return VectorShape.S_128_BIT;
            case 256:
                return VectorShape.S_256_BIT;
            case 512:
                return VectorShape.S_512_BIT;
            default:
                if ((bitSize > 0) && (bitSize <= MAX_VECTOR_SIZE) && (bitSize % INC_VECTOR_SIZE == 0)) {
                    return VectorShape.S_Max_BIT;
                } else {
                    throw new IllegalArgumentException(""Bad vector bit-size: "" + bitSize);
                }
        }
    }
```

`length() * Integer.SIZE` is equal to 32 because the length() is 1.  The method ` jdk.incubator.vector.VectorShape#getMaxVectorBitSiz` is called in `DoubleMaxVector/LongMaxVector` to get the vector length. This method returns 64 in client mode, and the width of the `Double/Long` data type is also 64.
So `DoubleMaxVector/LongMaxVector` can only handle 1 Double/Long data at a time.

Note: This will also affect other platforms like linux-riscv64 where `Matcher::max_vector_size`[1] will return 0 if RVV extention is not available. Then method ` jdk.incubator.vector.VectorShape#getMaxVectorBitSize` called to get the vector length will also return 64. That means those tests will also fail in this case.

[1] https://github.com/openjdk/jdk/blob/master/src/hotspot/cpu/riscv/riscv.ad#L1919-L1936
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8304450,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i313tv:",9223372036854775807,b20,,,,,,,,,Verified,,"2023-04-18 05:29;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/13508
Date: 2023-04-18 12:21:11 +0000;;;","2023-04-25 09:16;dukebot;Changeset: 0ff3a278
Author:    Quan Anh Mai <qamai@openjdk.org>
Date:      2023-04-25 16:13:45 +0000
URL:       https://git.openjdk.org/jdk/commit/0ff3a2784e06873505956ba01f153bba82d6c07a
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
strace001.java fails due to unknown methods on stack,JDK-8306006,5098423,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,fbredberg,rehn,rehn,2023-04-14 05:44,2023-05-27 06:41,2023-10-01 09:56,2023-04-19 08:06,21,,,,,,21,hotspot,,0,intermittent,loom,noreg-self,tier5,tier8,,,,,,,,,"In 8304919: Implementation of Virtual Threads two new method calls were add to sleep(). This test checks the stack trace and looks for known methods during sleeps.

java.lang.Thread.beforeSleep and afterSleep should be added to expectedSystemTrace, which contains the known methods on stack during a sleep() call.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8304919,,,,,"2023-04-17 09:29;dcubed;jdk-21+18_macosx-aarch64.8306006.zip;https://bugs.openjdk.org/secure/attachment/103471/jdk-21%2B18_macosx-aarch64.8306006.zip",,,,,,,,,,,,,,,,,,,,,,"0|i313tf:",9223372036854775807,b19,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,,,"2023-04-14 06:37;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/13476
Date: 2023-04-14 13:27:37 +0000;;;","2023-04-14 17:15;dcubed;Bumped from P5 -> P4 since this has started showing up in the JDK21 CI.;;;","2023-04-17 09:29;dcubed;Here's the logs from my jdk-21+18 stress run sighting on macosx-aarch64:

$ unzip -l jdk-21+18_macosx-aarch64.8306006.zip
Archive:  jdk-21+18_macosx-aarch64.8306006.zip
  Length      Date    Time    Name
---------  ---------- -----   ----
    40890  04-15-2023 12:10   jdk-21+18_3/failures.macosx-aarch64/TestDescription.jtr.slowdebug.1
---------                     -------
    40890                     1 file;;;","2023-04-19 05:23;dholmes;Why wasn't this test ProblemListed days ago?;;;","2023-04-19 08:06;dukebot;Changeset: a31a11f4
Author:    Fredrik Bredberg <fredrik.bredberg@oracle.com>
Committer: Alan Bateman <alanb@openjdk.org>
Date:      2023-04-19 15:04:27 +0000
URL:       https://git.openjdk.org/jdk/commit/a31a11f44a8477c2fbfde929b5c725f819470d25
;;;","2023-04-19 09:56;dcubed;The fix for this bug is in jdk-21+19-1557.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Footprint regression from JDK-8224957,JDK-8305995,5098412,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,thartmann,thartmann,thartmann,2023-04-14 02:15,2023-06-14 07:39,2023-10-01 09:56,2023-04-17 05:24,17,21,,,,,21,hotspot,,0,c2,footprint,jdk17u-fix-request,jdk17u-fix-yes,oracle-triage-11,oracle-triage-21,,,,,,,,"Reported by Kirill A. Korinsky <kirill@korins.ky>, for details see https://github.com/openjdk/jdk/pull/13453

Since JDK-8224957, footprint of a simple benchmark increased by 4x.",,,,,,,,,,,JDK-8307681,JDK-8306970,JDK-8310035,,,,,,,,,,,,,,,,,,,JDK-8224957,,,,,,,,,,,,,,,,,,,,,,b10,14,,,,,,,,"0|i313qz:",9223372036854775807,b19,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2023-04-14 02:26;thartmann;ILW = Increased footprint, reproducible with microbenchmark, no workaround = MLH = P4;;;","2023-04-14 02:36;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/13453
Date: 2023-04-13 01:02:08 +0000;;;","2023-04-17 05:24;dukebot;Changeset: 75515298
Author:    Kirill A. Korinsky <kirill@korins.ky>
Committer: Tobias Hartmann <thartmann@openjdk.org>
Date:      2023-04-17 12:22:26 +0000
URL:       https://git.openjdk.org/jdk/commit/7551529854b325488b58481e11103b08a211aff4
;;;","2023-04-18 08:36;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/1262
Date: 2023-04-18 15:29:06 +0000;;;","2023-04-24 12:22;phh;Fix Request (17u).

On behalf of Kirill Korinsky (catap).

Clean backport to fix a performance regression. Original review and test by Vladimir Kozlov.;;;","2023-06-13 07:44;sgehwolf;Adding back the fix request label as 17.0.9 development has started since. Testing has been answered here:
https://github.com/openjdk/jdk17u-dev/pull/1262#issuecomment-1536101695;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Add handleSocketErrorWithMessage to extend nio Net.c exception message,JDK-8305993,5098407,Bug,Closed,JDK,JDK,software,duke,,,P4,Fixed,mbaesken,mbaesken,mbaesken,2023-04-14 00:47,2023-08-08 11:25,2023-10-01 09:56,2023-04-19 00:25,21,,,,,,21,core-libs,,0,jdk17u-fix-request,jdk17u-fix-yes,,,,,,,,,,,,"Currently we get a rather strange exception in our jtreg tests :

java/nio/channels/DatagramChannel/AdaptorMulticasting.java

java.net.SocketException: Exec format error
	at java.base/sun.nio.ch.Net.joinOrDrop4(Native Method)
	at java.base/sun.nio.ch.Net.join4(Net.java:708)
	at java.base/sun.nio.ch.DatagramChannelImpl.innerJoin(DatagramChannelImpl.java:1606)
	at java.base/sun.nio.ch.DatagramChannelImpl.join(DatagramChannelImpl.java:1624)
	at Promiscuous.test(Promiscuous.java:176)
	at Promiscuous.main(Promiscuous.java:223)

The message could at least be improved, saying that setsockopt failed (plus providing the errno related text).
Example is seen on macOS btw.  .",,,,,,,,,,,JDK-8307800,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,generic,,,,,,,,,generic,,,,,,"0|i313pv:",9223372036854775807,b19,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@674604a9,,,,,,,Verified,,"2023-04-14 01:25;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/13472
Date: 2023-04-14 08:19:36 +0000;;;","2023-04-19 00:25;dukebot;Changeset: ebba42ac
Author:    Matthias Baesken <mbaesken@openjdk.org>
Date:      2023-04-19 07:22:56 +0000
URL:       https://git.openjdk.org/jdk/commit/ebba42ac52109ca036f2e721402c06afa8f455bb
;;;","2023-05-09 06:58;mbaesken;jdk17 backport request
I would like to have the patch in jdk17u-dev as well, because the small enhancement would be helpful there too. The patch is low risk and clean.;;;","2023-05-09 07:02;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/1339
Date: 2023-05-09 13:57:01 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Stripping debug info of ASM 9.5 fails,JDK-8305990,5098382,Bug,Closed,JDK,JDK,software,duke,,,P2,Fixed,asotona,webbuggrp,webbuggrp,2023-04-13 11:19,2023-08-23 06:54,2023-10-01 09:56,2023-05-09 06:14,21,,,,,,21,tools,,1,regression,webbug,,,,,,,,,,,,"ADDITIONAL SYSTEM INFORMATION :
openjdk 21-ea 2023-09-19
OpenJDK Runtime Environment (build 21-ea+17-1421)
OpenJDK 64-Bit Server VM (build 21-ea+17-1421, mixed mode, sharing)

A DESCRIPTION OF THE PROBLEM :
After https://bugs.openjdk.org/browse/JDK-8294972, JLink threw an error when linking ASM library and stripping the debug info.



REGRESSION : Last worked in version 21

STEPS TO FOLLOW TO REPRODUCE THE PROBLEM :
Download ASM: https://repo1.maven.org/maven2/org/ow2/asm/asm/9.5/asm-9.5.jar
Run JLink: jlink --module-path .\mods\asm-9.5.jar --add-modules org.objectweb.asm --output jdk -G

EXPECTED VERSUS ACTUAL BEHAVIOR :
EXPECTED -
The JDK to be generated successfully
ACTUAL -
Error: Detected branch target out of bytecode range at bytecode offset 330 of method visit(String,Object)
0000: 2a 59 b4 00 51 04 60 b5 00 51 2a b4 00 1b 99 00
0010: 13 2a b4 00 1d 2a b4 00 19 2b b6 00 34 b6 00 38
0020: 57 2c c1 00 53 99 00 1b 2a b4 00 1d 10 73 2a b4
0030: 00 19 2c c0 00 53 b6 00 34 b6 00 57 57 a7 03 69
0040: 2c c1 00 59 99 00 21 2a b4 00 1d 10 42 2a b4 00
0050: 19 2c c0 00 59 b6 00 5d b6 00 61 b4 00 66 b6 00
0060: 57 57 a7 03 44 2c c1 00 68 99 00 2b 2c c0 00 68
0070: b6 00 6c 99 00 07 04 a7 00 04 03 3e 2a b4 00 1d
0080: 10 5a 2a b4 00 19 1d b6 00 61 b4 00 66 b6 00 57
0090: 57 a7 03 15 2c c1 00 6e 99 00 21 2a b4 00 1d 10
00a0: 43 2a b4 00 19 2c c0 00 6e b6 00 72 b6 00 61 b4
00b0: 00 66 b6 00 57 57 a7 02 f0 2c c1 00 74 99 00 21
00c0: 2a b4 00 1d 10 53 2a b4 00 19 2c c0 00 74 b6 00
00d0: 78 b6 00 61 b4 00 66 b6 00 57 57 a7 02 cb 2c c1
00e0: 00 7a 99 00 1e 2a b4 00 1d 10 63 2a b4 00 19 2c
00f0: c0 00 7a b6 00 7e b6 00 34 b6 00 57 57 a7 02 a9
0100: 2c c1 00 80 99 00 4c 2c c0 00 80 4e 2a b4 00 1d
0110: 10 5b 2d be b6 00 57 57 2d 3a 04 19 04 be 36 05
0120: 03 36 06 15 06 15 05 a2 00 26 19 04 15 06 33 36
0130: 07 2a b4 00 1d 10 42 2a b4 00 19 15 07 b6 00 61
0140: b4 00 66 b6 00 57 57 84 06 01 a7 fe b5 a7 02 59
0150: 2c c1 00 82 99 00 54 2c c0 00 82 4e 2a b4 00 1d
0160: 10 5b 2d be b6 00 57 57 2d 3a 04 19 04 be 36 05
0170: 03 36 06 15 06 15 05 a2 00 2e 19 04 15 06 33 36
0180: 07 2a b4 00 1d 10 5a 2a b4 00 19 15 07 99 00 07
0190: 04 a7 00 04 03 b6 00 61 b4 00 66 b6 00 57 57 84
01a0: 06 01 a7 fe 5d a7 02 01 2c c1 00 84 99 00 4c 2c
01b0: c0 00 84 4e 2a b4 00 1d 10 5b 2d be b6 00 57 57
01c0: 2d 3a 04 19 04 be 36 05 03 36 06 15 06 15 05 a2
01d0: 00 26 19 04 15 06 35 36 07 2a b4 00 1d 10 53 2a
01e0: b4 00 19 15 07 b6 00 61 b4 00 66 b6 00 57 57 84
01f0: 06 01 a7 fe 0d a7 01 b1 2c c1 00 86 99 00 4c 2c
0200: c0 00 86 4e 2a b4 00 1d 10 5b 2d be b6 00 57 57
0210: 2d 3a 04 19 04 be 36 05 03 36 06 15 06 15 05 a2
0220: 00 26 19 04 15 06 34 36 07 2a b4 00 1d 10 43 2a
0230: b4 00 19 15 07 b6 00 61 b4 00 66 b6 00 57 57 84
0240: 06 01 a7 fd bd a7 01 61 2c c1 00 88 99 00 4c 2c
0250: c0 00 88 4e 2a b4 00 1d 10 5b 2d be b6 00 57 57
0260: 2d 3a 04 19 04 be 36 05 03 36 06 15 06 15 05 a2
0270: 00 26 19 04 15 06 2e 36 07 2a b4 00 1d 10 49 2a
0280: b4 00 19 15 07 b6 00 61 b4 00 66 b6 00 57 57 84
0290: 06 01 a7 fd 6d a7 01 11 2c c1 00 8a 99 00 4c 2c
02a0: c0 00 8a 4e 2a b4 00 1d 10 5b 2d be b6 00 57 57
02b0: 2d 3a 04 19 04 be 36 05 03 36 06 15 06 15 05 a2
02c0: 00 26 19 04 15 06 2f 37 07 2a b4 00 1d 10 4a 2a
02d0: b4 00 19 16 07 b6 00 8e b4 00 66 b6 00 57 57 84
02e0: 06 01 a7 fd 1d a7 00 c1 2c c1 00 90 99 00 4c 2c
02f0: c0 00 90 4e 2a b4 00 1d 10 5b 2d be b6 00 57 57
0300: 2d 3a 04 19 04 be 36 05 03 36 06 15 06 15 05 a2
0310: 00 26 19 04 15 06 30 38 07 2a b4 00 1d 10 46 2a
0320: b4 00 19 17 07 b6 00 94 b4 00 66 b6 00 57 57 84
0330: 06 01 a7 fc cd a7 00 71 2c c1 00 96 99 00 4c 2c
0340: c0 00 96 4e 2a b4 00 1d 10 5b 2d be b6 00 57 57
0350: 2d 3a 04 19 04 be 36 05 03 36 06 15 06 15 05 a2
0360: 00 26 19 04 15 06 31 39 07 2a b4 00 1d 10 44 2a
0370: b4 00 19 18 07 b6 00 9a b4 00 66 b6 00 57 57 84
0380: 06 01 a7 fc 7d a7 00 21 2a b4 00 19 2c b6 00 9e
0390: 4e 2a b4 00 1d 12 a0 2d b4 00 a3 b6 00 a7 2d b4
03a0: 00 66 b6 00 57 57 b1
java.lang.VerifyError: Detected branch target out of bytecode range at bytecode offset 330 of method visit(String,Object)
0000: 2a 59 b4 00 51 04 60 b5 00 51 2a b4 00 1b 99 00
0010: 13 2a b4 00 1d 2a b4 00 19 2b b6 00 34 b6 00 38
0020: 57 2c c1 00 53 99 00 1b 2a b4 00 1d 10 73 2a b4
0030: 00 19 2c c0 00 53 b6 00 34 b6 00 57 57 a7 03 69
0040: 2c c1 00 59 99 00 21 2a b4 00 1d 10 42 2a b4 00
0050: 19 2c c0 00 59 b6 00 5d b6 00 61 b4 00 66 b6 00
0060: 57 57 a7 03 44 2c c1 00 68 99 00 2b 2c c0 00 68
0070: b6 00 6c 99 00 07 04 a7 00 04 03 3e 2a b4 00 1d
0080: 10 5a 2a b4 00 19 1d b6 00 61 b4 00 66 b6 00 57
0090: 57 a7 03 15 2c c1 00 6e 99 00 21 2a b4 00 1d 10
00a0: 43 2a b4 00 19 2c c0 00 6e b6 00 72 b6 00 61 b4
00b0: 00 66 b6 00 57 57 a7 02 f0 2c c1 00 74 99 00 21
00c0: 2a b4 00 1d 10 53 2a b4 00 19 2c c0 00 74 b6 00
00d0: 78 b6 00 61 b4 00 66 b6 00 57 57 a7 02 cb 2c c1
00e0: 00 7a 99 00 1e 2a b4 00 1d 10 63 2a b4 00 19 2c
00f0: c0 00 7a b6 00 7e b6 00 34 b6 00 57 57 a7 02 a9
0100: 2c c1 00 80 99 00 4c 2c c0 00 80 4e 2a b4 00 1d
0110: 10 5b 2d be b6 00 57 57 2d 3a 04 19 04 be 36 05
0120: 03 36 06 15 06 15 05 a2 00 26 19 04 15 06 33 36
0130: 07 2a b4 00 1d 10 42 2a b4 00 19 15 07 b6 00 61
0140: b4 00 66 b6 00 57 57 84 06 01 a7 fe b5 a7 02 59
0150: 2c c1 00 82 99 00 54 2c c0 00 82 4e 2a b4 00 1d
0160: 10 5b 2d be b6 00 57 57 2d 3a 04 19 04 be 36 05
0170: 03 36 06 15 06 15 05 a2 00 2e 19 04 15 06 33 36
0180: 07 2a b4 00 1d 10 5a 2a b4 00 19 15 07 99 00 07
0190: 04 a7 00 04 03 b6 00 61 b4 00 66 b6 00 57 57 84
01a0: 06 01 a7 fe 5d a7 02 01 2c c1 00 84 99 00 4c 2c
01b0: c0 00 84 4e 2a b4 00 1d 10 5b 2d be b6 00 57 57
01c0: 2d 3a 04 19 04 be 36 05 03 36 06 15 06 15 05 a2
01d0: 00 26 19 04 15 06 35 36 07 2a b4 00 1d 10 53 2a
01e0: b4 00 19 15 07 b6 00 61 b4 00 66 b6 00 57 57 84
01f0: 06 01 a7 fe 0d a7 01 b1 2c c1 00 86 99 00 4c 2c
0200: c0 00 86 4e 2a b4 00 1d 10 5b 2d be b6 00 57 57
0210: 2d 3a 04 19 04 be 36 05 03 36 06 15 06 15 05 a2
0220: 00 26 19 04 15 06 34 36 07 2a b4 00 1d 10 43 2a
0230: b4 00 19 15 07 b6 00 61 b4 00 66 b6 00 57 57 84
0240: 06 01 a7 fd bd a7 01 61 2c c1 00 88 99 00 4c 2c
0250: c0 00 88 4e 2a b4 00 1d 10 5b 2d be b6 00 57 57
0260: 2d 3a 04 19 04 be 36 05 03 36 06 15 06 15 05 a2
0270: 00 26 19 04 15 06 2e 36 07 2a b4 00 1d 10 49 2a
0280: b4 00 19 15 07 b6 00 61 b4 00 66 b6 00 57 57 84
0290: 06 01 a7 fd 6d a7 01 11 2c c1 00 8a 99 00 4c 2c
02a0: c0 00 8a 4e 2a b4 00 1d 10 5b 2d be b6 00 57 57
02b0: 2d 3a 04 19 04 be 36 05 03 36 06 15 06 15 05 a2
02c0: 00 26 19 04 15 06 2f 37 07 2a b4 00 1d 10 4a 2a
02d0: b4 00 19 16 07 b6 00 8e b4 00 66 b6 00 57 57 84
02e0: 06 01 a7 fd 1d a7 00 c1 2c c1 00 90 99 00 4c 2c
02f0: c0 00 90 4e 2a b4 00 1d 10 5b 2d be b6 00 57 57
0300: 2d 3a 04 19 04 be 36 05 03 36 06 15 06 15 05 a2
0310: 00 26 19 04 15 06 30 38 07 2a b4 00 1d 10 46 2a
0320: b4 00 19 17 07 b6 00 94 b4 00 66 b6 00 57 57 84
0330: 06 01 a7 fc cd a7 00 71 2c c1 00 96 99 00 4c 2c
0340: c0 00 96 4e 2a b4 00 1d 10 5b 2d be b6 00 57 57
0350: 2d 3a 04 19 04 be 36 05 03 36 06 15 06 15 05 a2
0360: 00 26 19 04 15 06 31 39 07 2a b4 00 1d 10 44 2a
0370: b4 00 19 18 07 b6 00 9a b4 00 66 b6 00 57 57 84
0380: 06 01 a7 fc 7d a7 00 21 2a b4 00 19 2c b6 00 9e
0390: 4e 2a b4 00 1d 12 a0 2d b4 00 a3 b6 00 a7 2d b4
03a0: 00 66 b6 00 57 57 b1
        at java.base/jdk.internal.classfile.impl.StackMapGenerator.generatorError(StackMapGenerator.java:872)
        at java.base/jdk.internal.classfile.impl.StackMapGenerator.detectFrameOffsets(StackMapGenerator.java:941)
        at java.base/jdk.internal.classfile.impl.StackMapGenerator.generate(StackMapGenerator.java:284)
        at java.base/jdk.internal.classfile.impl.StackMapGenerator.<init>(StackMapGenerator.java:232)
        at java.base/jdk.internal.classfile.impl.DirectCodeBuilder$4.writeBody(DirectCodeBuilder.java:333)
        at java.base/jdk.internal.classfile.impl.UnboundAttribute$AdHocAttribute.writeTo(UnboundAttribute.java:914)
        at java.base/jdk.internal.classfile.impl.AttributeHolder.writeTo(AttributeHolder.java:56)
        at java.base/jdk.internal.classfile.impl.DirectMethodBuilder.writeTo(DirectMethodBuilder.java:136)
        at java.base/jdk.internal.classfile.impl.BufWriterImpl.writeList(BufWriterImpl.java:194)
        at java.base/jdk.internal.classfile.impl.DirectClassBuilder.build(DirectClassBuilder.java:176)
        at java.base/jdk.internal.classfile.Classfile.build(Classfile.java:218)
        at java.base/jdk.internal.classfile.impl.ClassImpl.transform(ClassImpl.java:175)
        at jdk.jlink/jdk.tools.jlink.internal.plugins.StripJavaDebugAttributesPlugin.lambda$transform$3(StripJavaDebugAttributesPlugin.java:69)
        at jdk.jlink/jdk.tools.jlink.plugin.ResourcePool.lambda$transformAndCopy$0(ResourcePool.java:112)
        at java.base/java.util.Iterator.forEachRemaining(Iterator.java:133)
        at java.base/java.util.Spliterators$IteratorSpliterator.forEachRemaining(Spliterators.java:1924)
        at java.base/java.util.stream.ReferencePipeline$Head.forEach(ReferencePipeline.java:762)
        at jdk.jlink/jdk.tools.jlink.plugin.ResourcePool.transformAndCopy(ResourcePool.java:111)
        at jdk.jlink/jdk.tools.jlink.internal.plugins.StripJavaDebugAttributesPlugin.transform(StripJavaDebugAttributesPlugin.java:59)
        at jdk.jlink/jdk.tools.jlink.internal.plugins.DefaultStripDebugPlugin.transform(DefaultStripDebugPlugin.java:76)
        at jdk.jlink/jdk.tools.jlink.internal.ImagePluginStack.visitResources(ImagePluginStack.java:262)
        at jdk.jlink/jdk.tools.jlink.internal.ImageFileCreator.generateJImage(ImageFileCreator.java:184)
        at jdk.jlink/jdk.tools.jlink.internal.ImageFileCreator.writeImage(ImageFileCreator.java:163)
        at jdk.jlink/jdk.tools.jlink.internal.ImageFileCreator.create(ImageFileCreator.java:100)
        at jdk.jlink/jdk.tools.jlink.internal.JlinkTask$ImageHelper.retrieve(JlinkTask.java:860)
        at jdk.jlink/jdk.tools.jlink.internal.ImagePluginStack.operate(ImagePluginStack.java:194)
        at jdk.jlink/jdk.tools.jlink.internal.JlinkTask.createImage(JlinkTask.java:423)
        at jdk.jlink/jdk.tools.jlink.internal.JlinkTask.run(JlinkTask.java:286)
        at jdk.jlink/jdk.tools.jlink.internal.Main.run(Main.java:56)
        at jdk.jlink/jdk.tools.jlink.internal.Main.main(Main.java:34)
        Suppressed: java.lang.ArrayIndexOutOfBoundsException: Index -1 out of bounds for length 936
                at java.base/jdk.internal.classfile.impl.CodeImpl.getLabel(CodeImpl.java:102)
                at java.base/jdk.internal.classfile.impl.AbstractInstruction$BoundInstruction.offsetToLabel(AbstractInstruction.java:126)
                at java.base/jdk.internal.classfile.impl.AbstractInstruction$BoundBranchInstruction.target(AbstractInstruction.java:226)
                at java.base/jdk.internal.classfile.impl.ClassPrinterImpl.codeToTree(ClassPrinterImpl.java:845)
                at java.base/jdk.internal.classfile.impl.ClassPrinterImpl.modelToTree(ClassPrinterImpl.java:550)
                at java.base/jdk.internal.classfile.components.ClassPrinter.toTree(ClassPrinter.java:171)
                at java.base/jdk.internal.classfile.components.ClassPrinter.toYaml(ClassPrinter.java:201)
                at java.base/jdk.internal.classfile.impl.StackMapGenerator.generatorError(StackMapGenerator.java:862)
                ... 29 more

FREQUENCY : always


",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,generic,,,,,,,21,,generic,,,,,,"0|i313kb:",9223372036854775807,b22,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@3da653bd,,,,,,,Verified,,"2023-04-14 04:51;asotona;Affected are class files version 50 and below, where StackMapTable attribute is not present or optional.

Proposed fix have two parts:
- CodeImpl::inflateJumpTargets must not depend on StackMapTable attribute presence for class file version 50 and below
- DirectCodeBuilder should not generate StackMapTable attribute for class file version below 50;;;","2023-04-14 07:09;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/13478
Date: 2023-04-14 14:02:46 +0000;;;","2023-05-09 06:14;dukebot;Changeset: a05560d9
Author:    Adam Sotona <asotona@openjdk.org>
Date:      2023-05-09 13:13:17 +0000
URL:       https://git.openjdk.org/jdk/commit/a05560d99352bd5952f3feef37b56dceb74ede3b
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Ensemble8 crashes on exit,JDK-8305988,5098402,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,aghaisas,jdv,jdv,2023-04-13 22:36,2023-04-17 09:08,2023-10-01 09:56,2023-04-17 02:17,internal,,,,,,internal,javafx,,0,javafx-metal,sn_141,sn_142,,,,,,,,,,,"Run Ensemble8 and then close the Ensemble8 window.
Sometimes it crashes and throws  ""[Too many errors, abort]"" log in stdout and it hangs Or just crashes without ""[Too many errors, abort]"" log.

Stdout when crashes and hangs:
#
# A fatal error has been detected by the Java Runtime Environment:
#
#  SIGSEGV (0xb) at pc=0x00007ff816e42769, pid=27272, tid=41751
#
# JRE version: OpenJDK Runtime Environment (18.0.2.1+1) (build 18.0.2.1+1-1)
# Java VM: OpenJDK 64-Bit Server VM (18.0.2.1+1-1, mixed mode, sharing, tiered, compressed oops, compressed class ptrs, g1 gc, bsd-amd64)
# Problematic frame:
# C  [libobjc.A.dylib+0x6769]  objc_msgSend+0x29
#
# No core dump will be written. Core dumps have been disabled. To enable core dumping, try ""ulimit -c unlimited"" before starting Java again
#
# An error report file with more information is saved as:
# /Users/jdv/dev/workspace/jfx/sandbox/rt/hs_err_pid27272.log
#
# If you would like to submit a bug report, please visit:
#   https://bugreport.java.com/bugreport/crash.jsp
#

[error occurred during error reporting (), id 0x4, SIGILL (0x4) at pc=0x00007ff8170fdbfd]


[error occurred during error reporting (), id 0x4, SIGILL (0x4) at pc=0x00007ff8170fdbfd]


[error occurred during error reporting (), id 0x4, SIGILL (0x4) at pc=0x00007ff8170fdbfd]


[error occurred during error reporting (), id 0x4, SIGILL (0x4) at pc=0x00007ff8170fdbfd]


[error occurred during error reporting (), id 0x4, SIGILL (0x4) at pc=0x00007ff8170fdbfd]


[error occurred during error reporting (), id 0x4, SIGILL (0x4) at pc=0x00007ff8170fdbfd]


[error occurred during error reporting (), id 0x4, SIGILL (0x4) at pc=0x00007ff8170fdbfd]


[error occurred during error reporting (), id 0x4, SIGILL (0x4) at pc=0x00007ff8170fdbfd]


[error occurred during error reporting (), id 0x4, SIGILL (0x4) at pc=0x00007ff8170fdbfd]


[error occurred during error reporting (), id 0x4, SIGILL (0x4) at pc=0x00007ff8170fdbfd]


[error occurred during error reporting (), id 0x4, SIGILL (0x4) at pc=0x00007ff8170fdbfd]


[error occurred during error reporting (), id 0x4, SIGILL (0x4) at pc=0x00007ff8170fdbfd]


[error occurred during error reporting (), id 0x4, SIGILL (0x4) at pc=0x00007ff8170fdbfd]


[error occurred during error reporting (), id 0x4, SIGILL (0x4) at pc=0x00007ff8170fdbfd]


[error occurred during error reporting (), id 0x4, SIGILL (0x4) at pc=0x00007ff8170fdbfd]


[error occurred during error reporting (), id 0x4, SIGILL (0x4) at pc=0x00007ff8170fdbfd]


[error occurred during error reporting (), id 0x4, SIGILL (0x4) at pc=0x00007ff8170fdbfd]


[error occurred during error reporting (), id 0x4, SIGILL (0x4) at pc=0x00007ff8170fdbfd]


[error occurred during error reporting (), id 0x4, SIGILL (0x4) at pc=0x00007ff8170fdbfd]


[error occurred during error reporting (), id 0x4, SIGILL (0x4) at pc=0x00007ff8170fdbfd]


[error occurred during error reporting (), id 0x4, SIGILL (0x4) at pc=0x00007ff8170fdbfd]


[error occurred during error reporting (), id 0x4, SIGILL (0x4) at pc=0x00007ff8170fdbfd]


[error occurred during error reporting (), id 0x4, SIGILL (0x4) at pc=0x00007ff8170fdbfd]


[error occurred during error reporting (), id 0x4, SIGILL (0x4) at pc=0x00007ff8170fdbfd]


[error occurred during error reporting (), id 0x4, SIGILL (0x4) at pc=0x00007ff8170fdbfd]


[error occurred during error reporting (), id 0x4, SIGILL (0x4) at pc=0x00007ff8170fdbfd]


[error occurred during error reporting (), id 0x4, SIGILL (0x4) at pc=0x00007ff8170fdbfd]


[error occurred during error reporting (), id 0x4, SIGILL (0x4) at pc=0x00007ff8170fdbfd]


[error occurred during error reporting (), id 0x4, SIGILL (0x4) at pc=0x00007ff8170fdbfd]


[error occurred during error reporting (), id 0x4, SIGILL (0x4) at pc=0x00007ff8170fdbfd]


[error occurred during error reporting (), id 0x4, SIGILL (0x4) at pc=0x00007ff8170fdbfd]

[Too many errors, abort]
[Too many errors, abort]
[Too many errors, abort]
[Too many errors, abort]
[Too many errors, abort]
[Too many errors, abort]
[Too many errors, abort]
[Too many errors, abort]
[Too many errors, abort]
[Too many errors, abort]
[Too many errors, abort]


stdout when it just crashes:
#
# A fatal error has been detected by the Java Runtime Environment:
#
#  SIGSEGV (0xb) at pc=0x00007ff816e44f7a, pid=27398, tid=42547
#
# JRE version: OpenJDK Runtime Environment (18.0.2.1+1) (build 18.0.2.1+1-1)
# Java VM: OpenJDK 64-Bit Server VM (18.0.2.1+1-1, mixed mode, sharing, tiered, compressed oops, compressed class ptrs, g1 gc, bsd-amd64)
# Problematic frame:
# C  [libobjc.A.dylib+0x8f7a]  objc_release+0x2a
#
# No core dump will be written. Core dumps have been disabled. To enable core dumping, try ""ulimit -c unlimited"" before starting Java again
#
# An error report file with more information is saved as:
# /Users/jdv/dev/workspace/jfx/sandbox/rt/hs_err_pid27398.log
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"2023-04-13 22:37;jdv;hs_err_pid27272.log;https://bugs.openjdk.org/secure/attachment/103439/hs_err_pid27272.log","2023-04-13 22:37;jdv;hs_err_pid27398.log;https://bugs.openjdk.org/secure/attachment/103440/hs_err_pid27398.log",,,,,,generic,,,,,,,,,os_x,,,,,,"0|i313or:",9223372036854775807,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4143e3f7,,,,,,,,,"2023-04-13 22:37;jdv;Attached both crash logs, also please add appropriate blocks JBS bug if needed.;;;","2023-04-17 02:16;aghaisas;Adding release calls to objects managed by autoreleasepool was a mistake. I have fixed it now.;;;","2023-04-17 02:17;aghaisas;Changeset: 4f629c68
Author:    aghaisas <ajitgh@gmail.com>
Date:      2023-04-17 14:41:56 +0000
URL:       https://git.openjdk.org/jfx-sandbox/commit/4f629c6877938f9006a08108b35f9e78144098bc;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Typo in java.security.Security.getProperty,JDK-8305963,5098366,Bug,Resolved,JDK,JDK,software,duke,,,P5,Fixed,kdriver,coffeys,coffeys,2023-04-13 07:57,2023-05-10 23:49,2023-10-01 09:56,2023-05-03 13:48,,,,,,,21,security-libs,,0,noreg-doc,noreg-trivial,starter-bug,,,,,,,,,,,""" @throws  NullPointerException is key is {@code null}""

(is -> if)

perhaps the returns clause can be enhanced also. Currently it's :
""the value of the security property corresponding to key.""

drawing from System.getProperty - this might read better:
""the string value of the security property, or null if there is no property with that key.""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i313gr:",9223372036854775807,b22,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@2ec284e3,,,,,,,,,"2023-04-28 14:02;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/13729
Date: 2023-04-28 20:55:33 +0000;;;","2023-05-03 13:48;dukebot;Changeset: db8b3cd0
Author:    Kevin Driver <kdriver@openjdk.org>
Committer: Bradford Wetmore <wetmore@openjdk.org>
Date:      2023-05-03 20:47:23 +0000
URL:       https://git.openjdk.org/jdk/commit/db8b3cd0842c05396d74abe950a2103654519b61
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
(zipfs) Opening a directory to get input stream produces incorrect exception message,JDK-8305945,5098345,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,lancea,alanb,alanb,2023-04-13 00:24,2023-04-26 23:15,2023-10-01 09:56,2023-04-20 07:12,21,,,,,,21,core-libs,,0,,,,,,,,,,,,,,"Path file = zipfs.getPath(""/dir"");
Files.newInputStream(file) 

throws:
java.nio.file.FileSystemException: /dir -> is a directory

It should be:
java.nio.file.FileSystemException: /d: is a directory",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i313c3:",9223372036854775807,b20,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@674604a9,,,,,,,,,"2023-04-14 13:29;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/13482
Date: 2023-04-14 20:24:00 +0000;;;","2023-04-20 07:12;dukebot;Changeset: c6a288dc
Author:    Lance Andersen <lancea@openjdk.org>
Date:      2023-04-20 14:09:25 +0000
URL:       https://git.openjdk.org/jdk/commit/c6a288dcd63824230638f2d08a1372f1d6e16829
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
"assert(is_aligned(ref, HeapWordSize)) failed: invariant",JDK-8305944,5098342,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,sguoyun,sguoyun,sguoyun,2023-04-12 23:44,2023-05-25 06:27,2023-10-01 09:56,2023-04-14 01:50,17,21,,,,,21,hotspot,,0,amazon-interest,,,,,,,,,,,,,"Jtreg testcases:

  jdk/jfr/jcmd/TestJcmdDump.java  # Crashed: 4/4
  jdk/jfr/jcmd/TestJcmdDumpPathToGCRoots.java # Crashed: 4/4

Error Info:

 -# A fatal error has been detected by the Java Runtime Environment:
 -#
 -#  Internal Error (/jdk-ls/src/hotspot/share/jfr/leakprofiler/chains/rootSetClosure.cpp:84), pid=3828251, tid=3828260
 -#  assert(is_aligned(ref, HeapWordSize)) failed: invariant
 -#
 -# JRE version: OpenJDK Runtime Environment ls-internal (21.0+11) (fastdebug build 21+11-1)
 -# Java VM: OpenJDK 64-Bit Server VM ls-internal (fastdebug 21+11-1, compiled mode, sharing, tiered, compressed oops, compressed class ptrs, g1 gc, linux-loongarch64)
 -# Problematic frame:
 -# V  [libjvm.so+0x1776498]  RawRootClosure::do_oop(narrowOop*)+0x78
 -#
 -# Core dump will be written. Default location: Core dumps may be processed with ""/usr/libexec/abrt-hook-ccpp %s %c %p %u %g %t %P %I %h %e"" (or dumping to /home/jenkins-slave/jenkins-node/workspace/generated_weekly_jdk-ls-test-openjdk.extended/BUILD_TYPE/fastdebug/JVMOPTIONS/-Xcomp/JVM_VARIANT/server/TESTCASES/jdk/3Atier3/20langtools/3Atier2/20langtools/3Atier3/label/loongarch64/jdk-ls/build/run-test-prebuilt/test-support/jtreg_test_jdk_tier3/scratch/10/core.3828251)
 -#
 # JFR recording file will be written. Location: /home/jenkins-slave/jenkins-node/workspace/generated_weekly_jdk-ls-test-openjdk.extended/BUILD_TYPE/fastdebug/JVMOPTIONS/-Xcomp/JVM_VARIANT/server/TESTCASES/jdk/3Atier3/20langtools/3Atier2/20langtools/3Atier3/label/loongarch64/jdk-ls/build/run-test-prebuilt/test-support/jtreg_test_jdk_tier3/scratch/10/hs_err_pid3828251.jfr
 -#
 -# An error report file with more information is saved as:
 # /home/jenkins-slave/jenkins-node/workspace/generated_weekly_jdk-ls-test-openjdk.extended/BUILD_TYPE/fastdebug/JVMOPTIONS/-Xcomp/JVM_VARIANT/server/TESTCASES/jdk/3Atier3/20langtools/3Atier2/20langtools/3Atier3/label/loongarch64/jdk-ls/build/run-test-prebuilt/test-support/jtreg_test_jdk_tier3/scratch/10/hs_err_pid3828251.log
-
-[error occurred during error reporting (), id 0xe0000000, Internal Error (/jdk-ls/src/hotspot/share/runtime/javaThread.hpp:977)]
-#
-# If you would like to submit a bug report, please visit:
-#   https://bugreport.java.com/bugreport/crash.jsp",Args: -Xcomp fastdebug,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,generic,,,,,,,,,linux,,,,,,"0|i313bf:",9223372036854775807,b19,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@42995637,,,,,,,,,"2023-04-13 20:54;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/13471
Date: 2023-04-14 03:48:02 +0000;;;","2023-04-14 01:50;dukebot;Changeset: 3651b922
Author:    sunguoyun <sunguoyun@loongson.cn>
Committer: Stefan Karlsson <stefank@openjdk.org>
Date:      2023-04-14 08:48:44 +0000
URL:       https://git.openjdk.org/jdk/commit/3651b92229afc78b274ff11c56e2da108ed25bec
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Open source few AWT Focus related tests,JDK-8305943,5098341,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,psadhukhan,psadhukhan,psadhukhan,2023-04-12 22:35,2023-05-26 01:56,2023-10-01 09:56,2023-04-19 19:38,11,17,20,21,,,21,client-libs,,0,amazon-interest,sn_142,test_sprint,,,,,,,,,,,"Convert applet based focus tests into main based
java/awt/Focus/NoFocusOwner/NoFocusOwnerAWTTest.html
java/awt/Focus/NoFocusOwner/NoFocusOwnerSwingTest.html
java/awt/Focus/RestoreFocusInfiniteLoopTest/RestoreFocusInfiniteLoopTest.html
java/awt/Focus/SequencedLightweightRequestsTest/SequencedLightweightRequestsTest.html
java/awt/Focus/SetFocusableTest/SetFocusableTest.html",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,generic,,,,,,,,,generic,,,,,,"0|i313b7:",9223372036854775807,b20,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@5a9b3fd3,,,,,,,,,"2023-04-19 00:35;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/13525
Date: 2023-04-19 07:28:23 +0000;;;","2023-04-19 19:38;dukebot;Changeset: 64ed816a
Author:    Prasanta Sadhukhan <psadhukhan@openjdk.org>
Date:      2023-04-20 02:35:05 +0000
URL:       https://git.openjdk.org/jdk/commit/64ed816ad9f1a9773c9865a013e89b709a130e9c
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Open source several AWT Focus related tests,JDK-8305942,5098340,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,psadhukhan,psadhukhan,psadhukhan,2023-04-12 22:35,2023-05-26 01:56,2023-10-01 09:56,2023-04-20 19:51,17,21,,,,,21,client-libs,,0,amazon-interest,sn_142,test_sprint,,,,,,,,,,,"Convert applet based focus tests into main based

java/awt/Focus/SortingFocusTraversalPolicy/RowToleranceTransitivityTest/RowToleranceTransitivityTest.html
java/awt/Focus/TemporaryLostComponentDeadlock/TemporaryLostComponentDeadlock.html
java/awt/Focus/TraversalKeysPropertyNamesTest/TraversalKeysPropertyNamesTest.html
java/awt/Focus/TypeAhead/QuickTypeTest/QuickTypeTest.html
java/awt/Focus/UpFocusCycleTest/UpFocusCycleTest.html
java/awt/Focus/VetoableChangeListenerLoopTest/VetoableChangeListenerLoopTest.html",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,generic,,,,,,,,,generic,,,,,,"0|i313az:",9223372036854775807,b20,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@5a9b3fd3,,,,,,,,,"2023-04-19 02:24;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/13527
Date: 2023-04-19 09:16:04 +0000;;;","2023-04-20 19:53;dukebot;Changeset: 8346ae2b
Author:    Prasanta Sadhukhan <psadhukhan@openjdk.org>
Date:      2023-04-21 02:51:12 +0000
URL:       https://git.openjdk.org/jdk/commit/8346ae2bc1152f13bc77c643252d84e2043ffe0b
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
com/sun/jdi/SetLocalWhileThreadInNative.java fails with -XX:+TieredCompilation,JDK-8305937,5098335,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,lmesnik,lmesnik,lmesnik,2023-04-12 19:12,2023-04-19 23:42,2023-10-01 09:56,2023-04-13 09:03,21,,,,,,21,core-svc,,0,tier4,tier6,tier7,,,,,,,,,,,"TestScaffold combines test options and jtreg vm options. Before JDK-8304834 it incorrectly passed test jvm args as part of targetApp and test passed. But now it parse then into targetVMArgs and then add VM options.



TestScaffold should prepend vm options so test options overrides jtreg vm options.

diff --git a/test/jdk/com/sun/jdi/TestScaffold.java b/test/jdk/com/sun/jdi/TestScaffold.java
index 72fa4f6079d..0560bdfa367 100644
--- a/test/jdk/com/sun/jdi/TestScaffold.java
+++ b/test/jdk/com/sun/jdi/TestScaffold.java
@@ -548,7 +548,7 @@ abstract public class TestScaffold extends TargetAdapter {
     public void connect(String args[]) {
         ArgInfo argInfo = parseArgs(args);

-        argInfo.targetVMArgs += VMConnection.getDebuggeeVMOptions();
+        argInfo.targetVMArgs = VMConnection.getDebuggeeVMOptions() + argInfo.targetVMArgs;
         connection = new VMConnection(argInfo.connectorSpec,
                                       argInfo.traceFlags);

Might be it also makes sense to not run this test with Xcomp. It doesn't make a sense. The test sets -Xbatch.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i3139v:",9223372036854775807,b19,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@3397f701,,,,,,,,,"2023-04-13 07:49;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/13461
Date: 2023-04-13 14:41:42 +0000;;;","2023-04-13 07:58;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/13462
Date: 2023-04-13 14:49:58 +0000;;;","2023-04-13 09:03;dukebot;Changeset: 00eb348a
Author:    Leonid Mesnik <lmesnik@openjdk.org>
Date:      2023-04-13 16:02:17 +0000
URL:       https://git.openjdk.org/jdk/commit/00eb348a521c81555355a8e5988a039851ed683f
;;;","2023-04-13 12:07;dcubed;The fix for this bug is integrated in jdk-21+19-1498.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
JavaThread::create_system_thread_object has unused is_visible argument,JDK-8305936,5098334,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,dholmes,kbarrett,kbarrett,2023-04-12 16:25,2023-04-19 23:42,2023-10-01 09:56,2023-04-13 16:11,21,,,,,,21,hotspot,,0,noreg-cleanup,threads,,,,,,,,,,,,"JavaThread::create_system_thread_object has an is_visible argument, which is supposed to control whether the thread is visible to external suspension.

However, JDK-8284161 eliminated the use of that argument.

The functionality of whether the thread is externally visible is provided by the virtual function Thread::is_hidden_from_external_view().",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8284161,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i3139n:",9223372036854775807,b19,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,,,"2023-04-12 18:03;dholmes;[~kbarrett] I was just about to add this comment ...

Before Loom, Threads were explicitly added to their ThreadGroup, first as an unstarted thread during Thread construction, and then as a live thread once the thread was started. For system threads we would call tg.add(t) depending on whether the thread needed to be visible or not (adding makes it visible).

After Loom, ThreadGroups no longer track the threads that are in them, instead the Java logic calls into the VM to getAllThreads() and then filters based on groups. The VM code uses the ThreadsListEnumerator with all false arguments, to get the set of live threads. Whether or not a system thread is returned depends on the result of jt->is_hidden_from_external_view(). The method is overloaded to return true for the following threads:

- compiler threads
- serviceThread
- monitorDeflationThread

This is the same set of threads which set is_visible to false when calling create_system_thread_object.

;;;","2023-04-12 22:48;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/13455
Date: 2023-04-13 05:41:31 +0000;;;","2023-04-13 16:11;dukebot;Changeset: 8a1639d4
Author:    David Holmes <dholmes@openjdk.org>
Date:      2023-04-13 23:10:18 +0000
URL:       https://git.openjdk.org/jdk/commit/8a1639d49b4adc45501fe77cedfef3ca5f42c7f5
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
"Resolve multiple definition of 'jmm_<interface|version>' when statically linking with JDK native libraries",JDK-8305935,5098333,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,jiangli,jiangli,jiangli,2023-04-12 14:56,2023-04-19 23:42,2023-10-01 09:56,2023-04-14 14:14,,,,,,,21,core-libs,,0,,,,,,,,,,,,,,"When statically link both libmanagement and libmanagement_ext (see JDK-8303796 for more details), the linker reports failures due to multiple definitions of 'jmm_interface' and 'jmm_version', e.g.:

/.../lib/libmanagement_ext.a(management_ext.o):/.../src/jdk.management/share/native/libmanagement_ext/management_ext.c:34: multiple definition of `jmm_interface'; /.../build/linux-x86_64-server-slowdebug/images/static-libs/lib/libmanagement.a(management.o):/.../src/java.management/share/native/libmanagement/management.c:34: first defined here
/usr/bin/ld: /.../build/linux-x86_64-server-slowdebug/images/static-libs/lib/libmanagement_ext.a(management_ext.o):/.../src/jdk.management/share/native/libmanagement_ext/management_ext.c:36: multiple definition of `jmm_version'; /.../build/linux-x86_64-server-slowdebug/images/static-libs/lib/libmanagement.a(management.o):/.../src/java.management/share/native/libmanagement/management.c:36: first defined here
collect2: error: ld returned 1 exit status",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8303796,,,,,,,,,,,,generic,,,,,,,,,generic,,,,,,"0|i3139f:",9223372036854775807,b19,,,,,,,,,,,"2023-04-12 15:33;jiangli;In our internal prototype, we simply redefine the function names in management_ext.h to address the symbol issue (to limit the delta size and avoid potential merge conflict): 

#define jmm_interface jmm_interface_management_ext
#define jmm_version jmm_version_management_ext

We can directly rename all jmm_<interface|version> usages in libmanagement_ext to jmm_<interface|version>_management_ext.;;;","2023-04-12 16:41;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/13451
Date: 2023-04-12 23:35:02 +0000;;;","2023-04-14 14:14;dukebot;Changeset: 314bad36
Author:    Jiangli Zhou <jiangli@openjdk.org>
Date:      2023-04-14 21:13:11 +0000
URL:       https://git.openjdk.org/jdk/commit/314bad36135c6404b31a41efc48954cb5b7877fd
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
PPC64: Disable VMContinuations on Big Endian,JDK-8305934,5098332,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,rrich,rrich,rrich,2023-04-12 14:11,2023-04-19 23:42,2023-10-01 09:56,2023-04-13 23:45,21,,,,,,21,hotspot,,0,loom,oraclejdk-na,oracle-triage-21,ppc,,,,,,,,,,"There are remaining issues with VMContinuations on PPC64 big endian even with the proposed fix for JDK-8305668.
VMContinuations should be disabled by default on that platforms until the test group jdk:jdk_loom succeeds.

",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,ppc,,,,,,,,,,,,,,,"0|i31397:",9223372036854775807,b19,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2023-04-12 14:27;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/13449
Date: 2023-04-12 21:16:33 +0000;;;","2023-04-12 15:07;dlong;ILW = test failures; with VMContinuations on ppc64; no workaround = MMH = P3;;;","2023-04-13 23:45;dukebot;Changeset: 12358e6c
Author:    Richard Reingruber <rrich@openjdk.org>
Date:      2023-04-14 06:42:55 +0000
URL:       https://git.openjdk.org/jdk/commit/12358e6c94bc96e618efc3ec5299a2cfe1b4669d
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
"java/lang/Thread/virtual/HoldsLock.java#id0 failed, ThreadInfo.getLockInfo() return null",JDK-8305919,5098308,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,alanb,dcubed,dcubed,2023-04-12 09:44,2023-05-08 13:10,2023-10-01 09:56,2023-05-02 00:22,21,,,,,,21,core-libs,,0,loom,noreg-self,problemlist,tier1,tier5,tier6,tier8,,,,,,,"The following test failed in the JDK21 CI:

java/lang/Thread/virtual/HoldsLock.java#id0

Here's a snippet from the log file:

#section:junit
----------messages:(9/357)----------
command: junit HoldsLock
reason: User specified action: run junit HoldsLock 
started: Wed Apr 12 14:37:07 UTC 2023
Mode: agentvm
Agent id: 121
Additional exports to unnamed modules from @modules: java.base/java.lang
Additional opens to unnamed modules from @modules: java.base/java.lang
finished: Wed Apr 12 14:37:51 UTC 2023
elapsed time (seconds): 43.903
----------configuration:(14/1554)----------

<snip>

----------System.err:(87/8093)----------
STARTED    HoldsLock::testThreadInfo 'testThreadInfo()'
java.lang.NullPointerException: Cannot invoke ""java.lang.management.ThreadInfo.getLockInfo()"" because ""<local17>"" is null
	at HoldsLock.testThreadInfo(HoldsLock.java:120)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
	at java.base/java.lang.reflect.Method.invoke(Method.java:578)
	at org.junit.platform.commons.util.ReflectionUtils.invokeMethod(ReflectionUtils.java:725)
	at org.junit.jupiter.engine.execution.MethodInvocation.proceed(MethodInvocation.java:60)
	at org.junit.jupiter.engine.execution.InvocationInterceptorChain$ValidatingInvocation.proceed(InvocationInterceptorChain.java:131)
	at org.junit.jupiter.engine.extension.TimeoutExtension.intercept(TimeoutExtension.java:149)
	at org.junit.jupiter.engine.extension.TimeoutExtension.interceptTestableMethod(TimeoutExtension.java:140)
	at org.junit.jupiter.engine.extension.TimeoutExtension.interceptTestMethod(TimeoutExtension.java:84)
	at org.junit.jupiter.engine.execution.ExecutableInvoker$ReflectiveInterceptorCall.lambda$ofVoidMethod$0(ExecutableInvoker.java:115)
	at org.junit.jupiter.engine.execution.ExecutableInvoker.lambda$invoke$0(ExecutableInvoker.java:105)
	at org.junit.jupiter.engine.execution.InvocationInterceptorChain$InterceptedInvocation.proceed(InvocationInterceptorChain.java:106)
	at org.junit.jupiter.engine.execution.InvocationInterceptorChain.proceed(InvocationInterceptorChain.java:64)
	at org.junit.jupiter.engine.execution.InvocationInterceptorChain.chainAndInvoke(InvocationInterceptorChain.java:45)
	at org.junit.jupiter.engine.execution.InvocationInterceptorChain.invoke(InvocationInterceptorChain.java:37)
	at org.junit.jupiter.engine.execution.ExecutableInvoker.invoke(ExecutableInvoker.java:104)
	at org.junit.jupiter.engine.execution.ExecutableInvoker.invoke(ExecutableInvoker.java:98)
	at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.lambda$invokeTestMethod$7(TestMethodTestDescriptor.java:214)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.invokeTestMethod(TestMethodTestDescriptor.java:210)
	at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.execute(TestMethodTestDescriptor.java:135)
	at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.execute(TestMethodTestDescriptor.java:66)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$6(NodeTestTask.java:151)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:141)
	at org.junit.platform.engine.support.hierarchical.Node.around(Node.java:137)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$9(NodeTestTask.java:139)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:138)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:95)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
	at org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.invokeAll(SameThreadHierarchicalTestExecutorService.java:41)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$6(NodeTestTask.java:155)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:141)
	at org.junit.platform.engine.support.hierarchical.Node.around(Node.java:137)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$9(NodeTestTask.java:139)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:138)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:95)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
	at org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.invokeAll(SameThreadHierarchicalTestExecutorService.java:41)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$6(NodeTestTask.java:155)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:141)
	at org.junit.platform.engine.support.hierarchical.Node.around(Node.java:137)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$9(NodeTestTask.java:139)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:138)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:95)
	at org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.submit(SameThreadHierarchicalTestExecutorService.java:35)
	at org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.execute(HierarchicalTestExecutor.java:57)
	at org.junit.platform.engine.support.hierarchical.HierarchicalTestEngine.execute(HierarchicalTestEngine.java:54)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:107)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:88)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.lambda$execute$0(EngineExecutionOrchestrator.java:54)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.withInterceptedStreams(EngineExecutionOrchestrator.java:67)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:52)
	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:114)
	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:86)
	at org.junit.platform.launcher.core.DefaultLauncherSession$DelegatingLauncher.execute(DefaultLauncherSession.java:86)
	at com.sun.javatest.regtest.agent.JUnitRunner.runWithJUnitPlatform(JUnitRunner.java:143)
	at com.sun.javatest.regtest.agent.JUnitRunner.main(JUnitRunner.java:96)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
	at java.base/java.lang.reflect.Method.invoke(Method.java:578)
	at com.sun.javatest.regtest.agent.MainActionHelper$AgentVMRunnable.run(MainActionHelper.java:312)
	at java.base/java.lang.Thread.run(Thread.java:1592)
FAILED     HoldsLock::testThreadInfo 'testThreadInfo()'
SKIPPED    HoldsLock::testHoldsLock 'testHoldsLock()' JDK-8281642
JavaTest Message: JUnit Platform Failure(s): 1

[ JUnit Containers: found 3, started 3, succeeded 3, failed 0, aborted 0, skipped 0]
[ JUnit Tests: found 2, started 1, succeeded 0, failed 1, aborted 0, skipped 1]

java.lang.Exception: JUnit test failure
	at com.sun.javatest.regtest.agent.JUnitRunner.runWithJUnitPlatform(JUnitRunner.java:150)
	at com.sun.javatest.regtest.agent.JUnitRunner.main(JUnitRunner.java:96)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
	at java.base/java.lang.reflect.Method.invoke(Method.java:578)
	at com.sun.javatest.regtest.agent.MainActionHelper$AgentVMRunnable.run(MainActionHelper.java:312)
	at java.base/java.lang.Thread.run(Thread.java:1592)

JavaTest Message: Test threw exception: java.lang.Exception
JavaTest Message: shutting down test

----------System.out:(30/888)----------
VirtualThread[#42]/waiting@Thread-0 is waiting on java.lang.Object@b5fdba4
		java.lang.Object@b5fdba4
""main"" prio=5 Id=1 WAITING on java.lang.Thread@762a8eeb


""Reference Handler"" daemon prio=10 Id=8 RUNNABLE


""Finalizer"" daemon prio=8 Id=9 WAITING on java.lang.ref.NativeReferenceQueue$Lock@15385f3d


""Signal Dispatcher"" daemon prio=9 Id=10 RUNNABLE


""Common-Cleaner"" daemon prio=8 Id=17 TIMED_WAITING on java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject@12870738


""Notification Thread"" daemon prio=9 Id=18 RUNNABLE


""pool-1-thread-1"" daemon prio=5 Id=28 TIMED_WAITING on java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject@36ce136e


""ForkJoinPool-1-worker-1"" daemon prio=5 Id=31 WAITING on java.util.concurrent.ForkJoinPool@200ab8b7


""ForkJoinPool-1-worker-2"" daemon prio=5 Id=32 WAITING on java.util.concurrent.ForkJoinPool@200ab8b7


null
result: Failed. Execution failed: `main' threw exception: java.lang.Exception: JUnit test failure",,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8306445,,,,,,,,JDK-8269557,,,,,,,,,,,,aarch64,,,,,,,,,linux,,,,,,"0|i3133v:",9223372036854775807,b21,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4c088d55,,,,,,,,,"2023-04-12 10:09;alanb;I suspect ThreadMXBean::getAllThreadIds has included the thread ID of a thread that has terminated by the time that ThreadMXBean::getThreadInfo is called to get its ThreadInfo. This scenario isn't handled by the test. The test no longer runs with --enable-preview so maybe there is more re-use of agent VMs, which might explain a terminating thread from a previous test that ran in the same VM.;;;","2023-04-24 12:14;dcubed;All 13 sightings of this failure have the '-Xcomp' option (CI and non-CI job sets).
The platforms are linux-aarch64, linux-x64, macosx-x64 and windows-x64. So
far no macosx-aarch64 sightings in Mach5... but I can't think of a reason that
this bug would not happen on macosx-aarch64.

I'm planning to ProblemList the test in -Xcomp mode on all platforms.;;;","2023-04-24 12:22;alanb;[~dcubed] We can change the test to /othervm (so there is no interference from previous tests that run in the same VM) or try this patch

```
diff --git a/test/jdk/java/lang/Thread/virtual/HoldsLock.java b/test/jdk/java/lang/Thread/virtual/HoldsLock.java
index 7878502373a..2ecc2b2d5bf 100644
--- a/test/jdk/java/lang/Thread/virtual/HoldsLock.java
+++ b/test/jdk/java/lang/Thread/virtual/HoldsLock.java
@@ -115,6 +115,11 @@ class HoldsLock {
         boolean foundCarrier = false;
         for (long tid : tids) {
             ThreadInfo info = bean.getThreadInfo(tid);
+            if (info == null) {
+                // thread has terminated
+                continue;
+            }
+
             System.out.println(info); // System.out.format(""%d\t%s%n"", tid, info.getThreadName());
```
;;;","2023-04-25 06:47;dcubed;[~alanb] - Sorry I missed the above comment from yesterday. At this point, I've ProblemListed
the test in -Xcomp mode, but I'm about to add a non -Xcomp mode sighting from Tier1... sigh...

Update: And as it turns out, I did the ProblemListing incorrectly. See:

https://bugs.openjdk.org/browse/JDK-8306780?focusedCommentId=14577822&page=com.atlassian.jira.plugin.system.issuetabpanels:comment-tabpanel#comment-14577822

so the test failures continue to appear even in -Xcomp mode.;;;","2023-04-25 06:51;dcubed;Here's a log file snippet from the jdk-21+20-1635-tier1 sighting:

java/lang/Thread/virtual/HoldsLock.java#id0

----------System.err:(88/8299)----------
STARTED    HoldsLock::testThreadInfo 'testThreadInfo()'
java.lang.NullPointerException: Cannot invoke ""java.lang.management.ThreadInfo.getLockInfo()"" because ""<local17>"" is null
	at HoldsLock.testThreadInfo(HoldsLock.java:120)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
	at java.base/java.lang.reflect.Method.invoke(Method.java:578)
	at org.junit.platform.commons.util.ReflectionUtils.invokeMethod(ReflectionUtils.java:727)
	at org.junit.jupiter.engine.execution.MethodInvocation.proceed(MethodInvocation.java:60)
	at org.junit.jupiter.engine.execution.InvocationInterceptorChain$ValidatingInvocation.proceed(InvocationInterceptorChain.java:131)
	at org.junit.jupiter.engine.extension.TimeoutExtension.intercept(TimeoutExtension.java:156)
	at org.junit.jupiter.engine.extension.TimeoutExtension.interceptTestableMethod(TimeoutExtension.java:147)
	at org.junit.jupiter.engine.extension.TimeoutExtension.interceptTestMethod(TimeoutExtension.java:86)
	at org.junit.jupiter.engine.execution.InterceptingExecutableInvoker$ReflectiveInterceptorCall.lambda$ofVoidMethod$0(InterceptingExecutableInvoker.java:103)
	at org.junit.jupiter.engine.execution.InterceptingExecutableInvoker.lambda$invoke$0(InterceptingExecutableInvoker.java:93)
	at org.junit.jupiter.engine.execution.InvocationInterceptorChain$InterceptedInvocation.proceed(InvocationInterceptorChain.java:106)
	at org.junit.jupiter.engine.execution.InvocationInterceptorChain.proceed(InvocationInterceptorChain.java:64)
	at org.junit.jupiter.engine.execution.InvocationInterceptorChain.chainAndInvoke(InvocationInterceptorChain.java:45)
	at org.junit.jupiter.engine.execution.InvocationInterceptorChain.invoke(InvocationInterceptorChain.java:37)
	at org.junit.jupiter.engine.execution.InterceptingExecutableInvoker.invoke(InterceptingExecutableInvoker.java:92)
	at org.junit.jupiter.engine.execution.InterceptingExecutableInvoker.invoke(InterceptingExecutableInvoker.java:86)
	at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.lambda$invokeTestMethod$7(TestMethodTestDescriptor.java:217)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.invokeTestMethod(TestMethodTestDescriptor.java:213)
	at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.execute(TestMethodTestDescriptor.java:138)
	at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.execute(TestMethodTestDescriptor.java:68)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$6(NodeTestTask.java:151)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:141)
	at org.junit.platform.engine.support.hierarchical.Node.around(Node.java:137)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$9(NodeTestTask.java:139)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:138)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:95)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
	at org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.invokeAll(SameThreadHierarchicalTestExecutorService.java:41)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$6(NodeTestTask.java:155)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:141)
	at org.junit.platform.engine.support.hierarchical.Node.around(Node.java:137)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$9(NodeTestTask.java:139)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:138)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:95)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
	at org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.invokeAll(SameThreadHierarchicalTestExecutorService.java:41)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$6(NodeTestTask.java:155)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:141)
	at org.junit.platform.engine.support.hierarchical.Node.around(Node.java:137)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$9(NodeTestTask.java:139)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:138)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:95)
	at org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.submit(SameThreadHierarchicalTestExecutorService.java:35)
	at org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.execute(HierarchicalTestExecutor.java:57)
	at org.junit.platform.engine.support.hierarchical.HierarchicalTestEngine.execute(HierarchicalTestEngine.java:54)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:147)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:127)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:90)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.lambda$execute$0(EngineExecutionOrchestrator.java:55)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.withInterceptedStreams(EngineExecutionOrchestrator.java:102)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:54)
	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:114)
	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:86)
	at org.junit.platform.launcher.core.DefaultLauncherSession$DelegatingLauncher.execute(DefaultLauncherSession.java:86)
	at com.sun.javatest.regtest.agent.JUnitRunner.runWithJUnitPlatform(JUnitRunner.java:142)
	at com.sun.javatest.regtest.agent.JUnitRunner.main(JUnitRunner.java:95)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
	at java.base/java.lang.reflect.Method.invoke(Method.java:578)
	at com.sun.javatest.regtest.agent.MainActionHelper$AgentVMRunnable.run(MainActionHelper.java:333)
	at java.base/java.lang.Thread.run(Thread.java:1592)
FAILED     HoldsLock::testThreadInfo 'testThreadInfo()'
SKIPPED    HoldsLock::testHoldsLock 'testHoldsLock()' JDK-8281642
JavaTest Message: JUnit Platform Failure(s): 1

[ JUnit Containers: found 4, started 4, succeeded 4, failed 0, aborted 0, skipped 0]
[ JUnit Tests: found 2, started 1, succeeded 0, failed 1, aborted 0, skipped 1]

java.lang.Exception: JUnit test failure
	at com.sun.javatest.regtest.agent.JUnitRunner.runWithJUnitPlatform(JUnitRunner.java:149)
	at com.sun.javatest.regtest.agent.JUnitRunner.main(JUnitRunner.java:95)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
	at java.base/java.lang.reflect.Method.invoke(Method.java:578)
	at com.sun.javatest.regtest.agent.MainActionHelper$AgentVMRunnable.run(MainActionHelper.java:333)
	at java.base/java.lang.Thread.run(Thread.java:1592)

JavaTest Message: Test threw exception: java.lang.Exception
JavaTest Message: shutting down test

----------System.out:(24/686)----------
VirtualThread[#35]/waiting@Thread-2 is waiting on java.lang.Object@2b6ac532
		java.lang.Object@2b6ac532
""main"" prio=5 Id=1 WAITING on java.lang.Thread@1dcafb77


""Reference Handler"" daemon prio=10 Id=8 RUNNABLE


""Finalizer"" daemon prio=8 Id=9 WAITING on java.lang.ref.NativeReferenceQueue$Lock@2fa5c42f


""Signal Dispatcher"" daemon prio=9 Id=10 RUNNABLE


""Common-Cleaner"" daemon prio=8 Id=17 TIMED_WAITING on java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject@679ec169


""Notification Thread"" daemon prio=9 Id=18 RUNNABLE


""pool-1-thread-1"" daemon prio=5 Id=20 TIMED_WAITING on java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject@25837fa5


null
result: Failed. Execution failed: `main' threw exception: java.lang.Exception: JUnit test failure


test result: Failed. Execution failed: `main' threw exception: java.lang.Exception: JUnit test failure


The test task has no JVM args (typical for Tier1) so the -Xcomp ProblemListing doesn't count.;;;","2023-04-30 11:27;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/13738
Date: 2023-04-30 18:18:09 +0000;;;","2023-05-02 00:22;dukebot;Changeset: 86f97fe7
Author:    Alan Bateman <alanb@openjdk.org>
Date:      2023-05-02 07:20:19 +0000
URL:       https://git.openjdk.org/jdk/commit/86f97fe70c9b55d196876e1e144f26a576492ebe
;;;","2023-05-02 07:04;dcubed;The fix for this bug is integrated in jdk-21+21-1749.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Ensemble8 crashes when we select different demos one after another,JDK-8305914,5098301,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,aghaisas,jdv,jdv,2023-04-12 07:34,2023-04-13 02:46,2023-10-01 09:56,2023-04-13 02:46,internal,,,,,,internal,javafx,,0,javafx-metal,sn_141,,,,,,,,,,,,"Launch Ensemble8 using Metal Pipeline on latest code -> continue selecting different demos from thumbnail.

It is fairly easy to reproduce, like by the time we select some 15th demo i am seeing crash.

Crash i see at clearRTT() and drawIndexedQuads() methods in MTLContext.m. Attached crash logs for the same.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"2023-04-12 07:34;jdv;hs_err_pid22586.log;https://bugs.openjdk.org/secure/attachment/103411/hs_err_pid22586.log","2023-04-12 07:34;jdv;hs_err_pid26026.log;https://bugs.openjdk.org/secure/attachment/103412/hs_err_pid26026.log",,,,,,generic,,,,,,,,,os_x,,,,,,"0|i3132b:",9223372036854775807,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4143e3f7,,,,,,,,,"2023-04-13 02:46;aghaisas;Changeset: 75058790
Author:    aghaisas <ajitgh@gmail.com>
Date:      2023-04-13 15:13:43 +0000
URL:       https://git.openjdk.org/jfx-sandbox/commit/750587907b414d655736bcba7bb008fc965d0b91;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
HttpClient may use incorrect key when finding pooled HTTP/2 connection for IPv6 address,JDK-8305906,5098293,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,jpai,jpai,jpai,2023-04-12 05:51,2023-07-05 01:32,2023-10-01 09:56,2023-06-07 02:46,,,,,,,21,core-libs,,0,,,,,,,,,,,,,,"The java.net.http.HttpClient internally uses pooled connections. When pooling HTTP/2 connections, the key used includes the InetAddress.getHostString() of the peer. When looking up a pooled connection for incoming requests, the client uses the request URI's getHost() method to lookup the connection.

When IPv6 addesses are involved, URI.getHost() method, as noted in its API documentation, returns an IP address wrapped in square brackets. On the other hand, the InetAddress.getHostString(), doesn't use square brackets to represent the IP address.

This thus leads to a mismatch in the keys used to store the connection and retrieve the connection, effectively leading to a cache miss on lookup.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i3130j:",9223372036854775807,b26,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@446e124a,,,,,,,,,"2023-04-13 04:18;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/13456
Date: 2023-04-13 11:13:07 +0000;;;","2023-06-07 02:46;dukebot;Changeset: 3ccb3c0e
Author:    Jaikiran Pai <jpai@openjdk.org>
Date:      2023-06-07 09:44:14 +0000
URL:       https://git.openjdk.org/jdk/commit/3ccb3c0e09f9a414229d3f76031f3fc8f271c936
;;;","2023-06-09 09:25;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/1419
Date: 2023-06-09 16:20:19 +0000;;;","2023-06-09 09:30;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk11u-dev/pull/1941
Date: 2023-06-09 16:25:13 +0000;;;","2023-06-29 15:41;tsteele;[jdk17u, jdk11u] fix requests

I would like to backport these changes to fix this issue on older versions, as we have observed it failing there. Testing looks good; risk is low. The change applies cleanly.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Test TraceVirtualThreadLocals should be run with continuations only ,JDK-8305875,5098255,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,lmesnik,lmesnik,lmesnik,2023-04-11 20:49,2023-04-19 23:42,2023-10-01 09:56,2023-04-13 09:40,21,,,,,,21,core-libs,,0,noreg-self,,,,,,,,,,,,,"Test TraceVirtualThreadLocals verifies that thread locals are dumped for virtual threads. It fails when continuations are not available and virtual threads are emulated.

The test failed on linux-x86 so I just want to mark it to have green github actions results.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i312s3:",9223372036854775807,b19,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4c088d55,,,,,,,,,"2023-04-11 20:55;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/13436
Date: 2023-04-11 23:38:23 +0000;;;","2023-04-13 09:40;dukebot;Changeset: 92521b10
Author:    Leonid Mesnik <lmesnik@openjdk.org>
Date:      2023-04-13 16:39:25 +0000
URL:       https://git.openjdk.org/jdk/commit/92521b100f1eb785eabd101870f631f555c3b135
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
"Open source AWT Key, Text Event related tests",JDK-8305874,5098254,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,honkar,honkar,honkar,2023-04-11 17:39,2023-09-29 08:44,2023-10-01 09:56,2023-04-20 11:35,11,17,20,21,,,21,client-libs,,0,sn_142,test_sprint,,,,,,,,,,,,"Clean up and open source  AWT Key, Text Event related tests",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,generic,,,,,,,,,generic,,,,,,"0|i312rv:",9223372036854775807,b20,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@5a9b3fd3,,,,,,,,,"2023-04-20 10:34;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/13563
Date: 2023-04-20 17:25:32 +0000;;;","2023-04-20 11:35;dukebot;Changeset: d6cf4aa1
Author:    Harshitha Onkar <honkar@openjdk.org>
Date:      2023-04-20 18:34:19 +0000
URL:       https://git.openjdk.org/jdk/commit/d6cf4aa1551df591c7bc75cb8c5e90d57630ca2a
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
BitSetShim: The type parameter T is hiding the type T warning,JDK-8305867,5098247,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,angorya,angorya,angorya,2023-04-11 11:58,2023-09-12 07:15,2023-10-01 09:56,2023-04-12 08:01,jfx21,,,,,,jfx21,javafx,,0,noreg-self,sn_141,testbug,,,,,,,,,,,"JDK-8304933 introduced two warnings:

Description	Resource	Location
The type parameter T is hiding the type T	BitSetShim.java	line 133
The type parameter T is hiding the type T	BitSetShim.java	line 173

The fix is to change the type in these two methods (as it is in Set.java):

public <V> V[] toArray(V[] a) {",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8304933,,,,,,,,,,,,,,,,,,,jfx21,,,,,,,,"0|i312qb:",9223372036854775807,b13,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@18948797,,,,,,,,,"2023-04-11 13:51;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jfx/pull/1086
Date: 2023-04-11 20:46:37 +0000;;;","2023-04-12 08:01;dukebot;Changeset: 4d7aaa48
Author:    Andy Goryachev <angorya@openjdk.org>
Date:      2023-04-12 15:00:11 +0000
URL:       https://git.openjdk.org/jfx/commit/4d7aaa485a0eebc39329a0ca0febdf6399f8012f
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Resolve multiple definition of 'handleSocketError' when statically linking with JDK native libraries,JDK-8305858,5098236,Bug,Closed,JDK,JDK,software,duke,,,P4,Fixed,jiangli,jiangli,jiangli,2023-04-11 10:28,2023-08-28 05:17,2023-10-01 09:56,2023-04-12 13:44,,,,,,,21,core-libs,,0,jdk17u-fix-request,jdk17u-fix-yes,,,,,,,,,,,,"When statically link a set of JDK native libraries and libjvm with the launcher executable (see JDK-8303796 for more details), the linker reports failure due to multiple definitions of 'handleSocketError', e.g.:

.../libsctp.a(SctpNet.o): in function `handleSocketError':
.../SctpNet.c:124: multiple definition of `handleSocketError'; .../libnio.a(Net.o):.../Net.c:918: first defined here
collect2: error: ld returned 1 exit status",,,,,,,,,,,JDK-8310114,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8303796,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i312nv:",9223372036854775807,b19,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@446e124a,,,,,,,,,"2023-04-11 10:39;jiangli;'handleSocketError' is defined in libnio and libsctp. The simplest fix is to rename 'handleSocketError' (e.g. 'handleSocketError_sctp' or 'sctpHandleSocketError') in libsctp, since only two files use  'handleSocketError' in libsctp code. ;;;","2023-04-11 12:26;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/13433
Date: 2023-04-11 19:19:07 +0000;;;","2023-04-11 20:26;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/13438
Date: 2023-04-12 03:20:47 +0000;;;","2023-04-12 13:44;dukebot;Changeset: 2bbbff20
Author:    Jiangli Zhou <jiangli@openjdk.org>
Date:      2023-04-12 20:42:05 +0000
URL:       https://git.openjdk.org/jdk/commit/2bbbff209dc21633e08fe4d565dfc649eea2c883
;;;","2023-06-14 03:33;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/1437
Date: 2023-06-14 10:27:33 +0000;;;","2023-06-14 05:40;mbaesken;jdk17 backport request
I would like to have the patch in jdk17 as well, to have this  coding closer to head and to avoid symbol issues described here.  The patch is low risk and clean.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
"java/text/Format/DateFormat/DateFormatRegression.java fails with ""Uncaught exception thrown in test method Test4089106""",JDK-8305853,5098230,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,jlu,dcubed,dcubed,2023-04-11 08:58,2023-05-01 10:12,2023-10-01 09:56,2023-04-26 09:55,21,,,,,,21,core-libs,,0,intermittent,noreg-self,regression,tier2,,,,,,,,,,"The following test failed in the JDK21 CI:

java/text/Format/DateFormat/DateFormatRegression.java

Here's a snippet from the log file:

#section:main
----------messages:(6/323)----------
command: main -Djava.locale.providers=COMPAT,SPI DateFormatRegression
reason: User specified action: run main/othervm -Djava.locale.providers=COMPAT,SPI DateFormatRegression 
started: Tue Apr 11 15:21:13 UTC 2023
Mode: othervm [/othervm specified]
finished: Tue Apr 11 15:21:14 UTC 2023
elapsed time (seconds): 0.321
----------configuration:(0/0)----------
----------System.out:(3/99)----------
DateFormatRegression {
  Test4089106 {
    Uncaught exception thrown in test method Test4089106
----------System.err:(14/854)----------
java.lang.RuntimeException: Uncaught exception thrown in test method Test4089106
	at IntlTest.errImpl(IntlTest.java:198)
	at IntlTest.errln(IntlTest.java:185)
	at IntlTest.run(IntlTest.java:126)
	at DateFormatRegression.main(DateFormatRegression.java:40)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
	at java.base/java.lang.reflect.Method.invoke(Method.java:578)
	at com.sun.javatest.regtest.agent.MainWrapper$MainThread.run(MainWrapper.java:125)
	at java.base/java.lang.Thread.run(Thread.java:1592)

JavaTest Message: Test threw exception: java.lang.RuntimeException: Uncaught exception thrown in test method Test4089106
JavaTest Message: shutting down test


Hidden by the test class, the real exception thrown is:

Caused by: java.time.zone.ZoneRulesException: Unknown time-zone ID: FAKEZONE
        at java.base/java.time.zone.ZoneRulesProvider.getProvider(ZoneRulesProvider.java:281)
        at java.base/java.time.zone.ZoneRulesProvider.getRules(ZoneRulesProvider.java:236)
        at java.base/java.time.ZoneRegion.ofId(ZoneRegion.java:121)
        at java.base/java.time.ZoneId.of(ZoneId.java:411)
        at java.base/java.time.ZoneId.of(ZoneId.java:359)
        at java.base/java.time.ZoneId.of(ZoneId.java:315)
        at java.base/java.util.TimeZone.toZoneId0(TimeZone.java:605)
        at java.base/java.util.TimeZone.toZoneId(TimeZone.java:582)
        at java.base/java.util.TimeZone.toZoneId0(TimeZone.java:594)
        at java.base/java.util.TimeZone.toZoneId(TimeZone.java:582)
        at java.base/java.time.ZoneId.systemDefault(ZoneId.java:275)
        at java.base/java.time.Clock.systemDefaultZone(Clock.java:185)
        at java.base/java.time.ZonedDateTime.now(ZonedDateTime.java:201)
        at java.base/jdk.internal.logger.SimpleConsoleLogger.format(SimpleConsoleLogger.java:279)
        at java.base/jdk.internal.logger.SimpleConsoleLogger.publish(SimpleConsoleLogger.java:303)
        at java.base/jdk.internal.logger.SimpleConsoleLogger.log(SimpleConsoleLogger.java:122)
        at java.base/java.lang.System$Logger.log(System.java:1384)
        at java.base/jdk.internal.logger.AbstractLoggerWrapper.log(AbstractLoggerWrapper.java:73)
        at java.base/sun.util.locale.provider.LocaleProviderAdapter.<clinit>(LocaleProviderAdapter.java:175)",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8306711,JDK-8304982,,,,,,,,,,,,,,,x86_64,,,,,,,,,windows,,,,,,"0|i312mj:",9223372036854775807,b20,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6fc9e792,,,,,,,,,"2023-04-24 14:11;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/13630
Date: 2023-04-24 21:02:01 +0000;;;","2023-04-24 15:43;naoto;A part of this issue is that the test framework `IntlTest` randomly orders the tests on Windows, which made the issue intermittent (as well as the obscure exception issue as in the description). The test framework should be refined. Filed an issue for that as JDK-8306711;;;","2023-04-26 09:55;dukebot;Changeset: 8e36c05d
Author:    Justin Lu <jlu@openjdk.org>
Date:      2023-04-26 16:53:43 +0000
URL:       https://git.openjdk.org/jdk/commit/8e36c05d6c80f6bdcd8a7530a382810f500885ad
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Improve diagnosability and resilience of HttpClient::close tests,JDK-8305847,5098222,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,dfuchs,dfuchs,dfuchs,2023-04-11 06:24,2023-04-19 23:42,2023-10-01 09:56,2023-04-13 08:29,21,,,,,,21,core-libs,,0,httpclient,noreg-self,,,,,,,,,,,,"The HttpClient close tests could be improved to provide better diagnosis. The test makes some requests and register some dependent action to check the response state, followed by some dependent action that will read the request body (from an input stream). But if the first dependent action asserts, the body will not be read nor close, which will prevent HttpClient::close method, or the HttpClient::awaitTermination method, to terminate as expected, and the test will then later fail in timeout - either from jtreg or awaitTermination. This can be confusing for failure analysis. Also, the test executor - called 'readerService' in which dependent actions are executed should not be closed until all dependent actions have been submitted. Instead of having one such executor per test method, it would be simpler and more resilient to create it in `setup()` and close it in `teardown()`.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8267140,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i312kr:",9223372036854775807,b19,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@446e124a,,,,,,,,,"2023-04-11 06:55;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/13426
Date: 2023-04-11 13:46:16 +0000;;;","2023-04-13 08:29;dukebot;Changeset: 90b4006b
Author:    Daniel Fuchs <dfuchs@openjdk.org>
Date:      2023-04-13 15:27:45 +0000
URL:       https://git.openjdk.org/jdk/commit/90b4006bce6a4c28f93297da06be3b30d02fa89f
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
LogConfigurationTest intermittently fails on AArch64,JDK-8305819,5098193,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,yyang,yyang,yyang,2023-04-10 19:12,2023-05-17 16:54,2023-10-01 09:56,2023-05-15 02:18,11,17,21,,,,21,hotspot,,0,intermittent,logging,,,,,,,,,,,,"Create on behalf of gaodan<gaodan.gao@alibaba-inc.com>
---

The following tests intermittently fail on AArch64:

TEST_VM_F(LogConfigurationTest, reconfigure_decorators)
TEST_VM_F(LogConfigurationTest, reconfigure_decorators_MT)

---
#
# A fatal error has been detected by the Java Runtime Environment:
#
#  SIGBUS (0x7) at pc=0x0000000000000021, pid=1762387, tid=1762473
#
# JRE version: OpenJDK Runtime Environment (21.0) (build 21-internal-adhoc.yansendao.jdk)
# Java VM: OpenJDK 64-Bit Server VM (21-internal-adhoc.yansendao.jdk, mixed mode, tiered, compressed oops, compressed class ptrs, g1 gc, linux-aarch64)
# Problematic frame:
# V  [libjvm.so+0xcbf050]  LogTagSet::vwrite(LogLevel::type, char const*, std::__va_list)+0x300
#
# Core dump will be written. Default location: /cloud/data/corefile/core-%e-1762387-%t-%h
#
# If you would like to submit a bug report, please visit:
#   https://bugreport.java.com/bugreport/crash.jsp
#

---------------  S U M M A R Y ------------

Command Line: -XX:+ExecutingUnitTests 

Host: AArch64, 96 cores, 755G, Anolis OS release 8.8
Time: Mon Apr 10 12:08:22 2023 CST elapsed time: 0.474275 seconds (0d 0h 0m 0s)

---------------  T H R E A D  ---------------

Current thread (0x0000aaaadbf6b310):  JavaThread ""JavaTestThread"" daemon [_thread_in_vm, id=1762473, stack(0x0000ffff44cde000,0x0000ffff44ede000)]

Stack: [0x0000ffff44cde000,0x0000ffff44ede000],  sp=0x0000ffff44edc380,  free space=2040k
Native frames: (J=compiled Java code, j=interpreted, Vv=VM code, C=native code)
V  [libjvm.so+0xcbf050]  LogTagSet::vwrite(LogLevel::type, char const*, std::__va_list)+0x300  (logTagSet.cpp:83)
V  [libjvm.so+0x3be264]  void LogImpl<(LogTag::type)69, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::write<(LogLevel::type)2>(char const*, ...)+0x84  (log.hpp:148)
V  [libjvm.so+0x4a2a94]  UnitTestThread::main_run()+0x6c  (test_logConfiguration.cpp:238)
V  [libjvm.so+0x418c6c]  JavaTestThread::test_thread_entry(JavaThread*, JavaThread*)+0x1c  (threadHelper.inline.hpp:118)
V  [libjvm.so+0xabc738]  JavaThread::thread_main_inner()+0x178  (javaThread.cpp:717)
V  [libjvm.so+0x1002e4c]  Thread::call_run()+0xa4  (thread.cpp:224)
V  [libjvm.so+0xdf6e24]  thread_native_entry(Thread*)+0xdc  (os_linux.cpp:740)
C  [libpthread.so.0+0x78b8]  start_thread+0x188

siginfo: si_signo: 7 (SIGBUS), si_code: 1 (BUS_ADRALN), si_addr: 0x0000000000000021

Registers:
R0=0x0000aaaadbc33cd0
R1=0x0000ffff44edc438
R2=0x0000ffff44edc468
R3=0x0000000000000021
R4=0x00000000000000c0
R5=0x0000fffef4000ce0
R6=0x000000000000000a
R7=0x000000000000000a
R8=0x0000000000000040
R9=0xffffff80ffffffd0
R10=0x0000000000000001
R11=0x0000ffff44edc088
R12=0x696d652030206574
R13=0x676f6c2061207374
R14=0x0000000000000000
R15=0x00003017fe000000
R16=0x0000000000000001
R17=0x0000ffff9a520b70
R18=0x00000000000007e9
R19=0x0000ffff44edc438
R20=0x0000ffff9be80ca8
R21=0x0000aaaadbf6b080
R22=0x0000ffff44edc468
R23=0x0000ffff9be4e000
R24=0x0000ffff9be80cd0
R25=0x0000000000000002
R26=0x0000ffff44edc3f0
R27=0x0000ffff9be80d08
R28=0x00000000000003d8
R29=0x0000ffff44edc380
R30=0x0000ffff9b48f054


Register to memory mapping:

R0 =0x0000aaaadbc33cd0 points into unknown readable memory: 0x0000aaaadbc33d10 | 10 3d c3 db aa aa 00 00
R1 =0x0000ffff44edc438 is pointing into the stack for thread: 0x0000aaaadbf6b310
R2 =0x0000ffff44edc468 is pointing into the stack for thread: 0x0000aaaadbf6b310
R3 =0x0000000000000021 is an unknown value
R4 =0x00000000000000c0 is an unknown value
R5 =0x0000fffef4000ce0 points into unknown readable memory: 0x6e65727275636e6f | 6f 6e 63 75 72 72 65 6e
R6 =0x000000000000000a is an unknown value
R7 =0x000000000000000a is an unknown value
R8 =0x0000000000000040 is an unknown value
R9 =0xffffff80ffffffd0 is an unknown value
R10=0x0000000000000001 is an unknown value
R11=0x0000ffff44edc088 is pointing into the stack for thread: 0x0000aaaadbf6b310
R12=0x696d652030206574 is an unknown value
R13=0x676f6c2061207374 is an unknown value
R14=0x0 is nullptr
R15=0x00003017fe000000 is an unknown value
R16=0x0000000000000001 is an unknown value
R17=0x0000ffff9a520b70: sem_post+0x0000000000000000 in /lib64/libpthread.so.0 at 0x0000ffff9a510000
R18=0x00000000000007e9 is an unknown value
R19=0x0000ffff44edc438 is pointing into the stack for thread: 0x0000aaaadbf6b310
R20=0x0000ffff9be80ca8: <offset 0x00000000016b0ca8> in /home/yansendao/git/jdk/build/linux-aarch64-server-release/images/test/hotspot/gtest/server/libjvm.so at 0x0000ffff9a7d0000
R21=0x0000aaaadbf6b080 points into unknown readable memory: 0x0000aaaadbf6b0c0 | c0 b0 f6 db aa aa 00 00
R22=0x0000ffff44edc468 is pointing into the stack for thread: 0x0000aaaadbf6b310
R23=0x0000ffff9be4e000: <offset 0x000000000167e000> in /home/yansendao/git/jdk/build/linux-aarch64-server-release/images/test/hotspot/gtest/server/libjvm.so at 0x0000ffff9a7d0000
R24=0x0000ffff9be80cd0: <offset 0x00000000016b0cd0> in /home/yansendao/git/jdk/build/linux-aarch64-server-release/images/test/hotspot/gtest/server/libjvm.so at 0x0000ffff9a7d0000
R25=0x0000000000000002 is an unknown value
R26=0x0000ffff44edc3f0 is pointing into the stack for thread: 0x0000aaaadbf6b310
R27=0x0000ffff9be80d08: <offset 0x00000000016b0d08> in /home/yansendao/git/jdk/build/linux-aarch64-server-release/images/test/hotspot/gtest/server/libjvm.so at 0x0000ffff9a7d0000
R28=0x00000000000003d8 is an unknown value
R29=0x0000ffff44edc380 is pointing into the stack for thread: 0x0000aaaadbf6b310
R30=0x0000ffff9b48f054: <offset 0x0000000000cbf054> in /home/yansendao/git/jdk/build/linux-aarch64-server-release/images/test/hotspot/gtest/server/libjvm.so at 0x0000ffff9a7d0000



",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"2023-04-10 19:13;yyang;hs_err_pid1762387.log;https://bugs.openjdk.org/secure/attachment/103385/hs_err_pid1762387.log",,,,,,,,,,,,,,,,,,,,,,"0|i312eb:",9223372036854775807,b23,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,,,"2023-04-18 11:19;mseledtsov;ILW = HLL = P4;;;","2023-04-19 04:27;yyang;Hi [~jsjolen], thanks for paying attention to this, but it has been taking over in PR#13421. Thanks.;;;","2023-04-25 03:57;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/13421
Date: 2023-04-11 08:45:56 +0000;;;","2023-04-26 19:45;dholmes;Is the solution as simple as the test needing to use the ConfigurationLock?

Edit: no that is already used by the configuration code. The issue is more subtle but needs more indepth investigation - see comments in PR.;;;","2023-04-28 17:18;xliu;Thank you for investigating this issue. 

I suspect something is wrong in this function.  
```
  1 void LogOutputList::add_output(LogOutput* output, LogLevelType level) {
  2   LogOutputNode* node = new LogOutputNode();
  3   node->_value = output;
  4   node->_level = level;
  5
  6   // Set the next pointer to the first node of a lower level
  7   for (node->_next = _level_start[level];
  8        node->_next != nullptr && node->_next->_level == level;
  9        node->_next = node->_next->_next) {
 10   }
 11
 12   // Update the _level_start index
 13   for (int l = LogLevel::Last; l >= level; l--) {
 14     if (_level_start[l] == nullptr || _level_start[l]->_level < level) {
 15       _level_start[l] = node;
 16     }
 17   }
 18
 19   // Add the node the list
 20   for (LogOutputNode* cur = _level_start[LogLevel::Last]; cur != nullptr; cur = cur->_next) {
 21     if (cur != node && cur->_next == node->_next) {
 22       cur->_next = node;
 23       break;
 24     }
 25   }
 26 }
```
we can dive it into 2 logical parts.  [2-10] constructs a node: value := output, level := level; [12-25] publishes the node.  We put it in the linked_list.

Because of weak memory order, aarch64 may reorder stores. 
Readers(other threads) may see the value at 15 before the store at line 3 is seen. 
if a reader attempts to output logs via the node with uninitialized 'output', it's very likely to crash. 

I think we need a storestore barrier between those 2 parts. As long as we publish a well initialized node, it's fine. 
// StoreStore: Store1(s); StoreStore; Store2
//
// Ensures that Store1 completes (the effect on memory of Store1 is made
// visible to other processors) before Store2 and any subsequent store
// operations.  Stores before Store1 may *not* float below Store2 and any
// subsequent store operations.

I don't think it's necessary to deploy a release-acquire because we don't mandate readers to pick up the new node. it's totally fine to use the older node.  
In this case,  old and new node are identical. 

;;;","2023-04-28 17:56;xliu;I ran 5000 times on an EC2 m6g instance.  no luck. 
This is the command and I use the trunk. 

$./build/linux-aarch64-server-release/images/test/hotspot/gtest/server/gtestLauncher -jdk /home/ubuntu/Devel/jdk/build/linux-aarch64-server-release/images/jdk --gtest_filter='LogConfigurationTest.reconfigure*_MT*'

can you only trigger it on your 96-core instance? what about more common aarch64 processor such as apple m1? ;;;","2023-05-15 02:18;dukebot;Changeset: 911cc7cb
Author:    gaogao-mem <gaodan.gao@alibaba-inc.com>
Committer: Yi Yang <yyang@openjdk.org>
Date:      2023-05-15 09:16:32 +0000
URL:       https://git.openjdk.org/jdk/commit/911cc7cb07ed44b24b4c20977d7d6e475bd1b234
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Update Libpng to 1.6.39,JDK-8305815,5098188,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,honkar,vdyakov,vdyakov,2023-04-10 16:06,2023-09-25 17:03,2023-10-01 09:56,2023-05-03 12:40,11,17,21,7,8,,21,client-libs,2019-05-31 00:00,0,11-bp,17-bp,3rdparty,7-bp,8-bp,jdk11u-fix-request,jdk11u-fix-yes,jdk17u-fix-request,jdk17u-fix-yes,jdk8u-fix-request,jdk8u-fix-yes,noreg-other,sn_143,"Need to upgrade libpng from 1.6.38 to 1.6.39
",,,,,,,,,,,JDK-8310284,JDK-8308976,JDK-8308249,JDK-8308733,JDK-8316926,JDK-8310291,JDK-8308120,JDK-8307599,,,JDK-8307278,JDK-8215082,,JDK-8316030,JDK-8295685,,,,,,,,,,,JDK-8308294,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i312d7:",9223372036854775807,b22,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@5a9b3fd3,,,,,,,,,"2023-05-02 10:50;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/13755
Date: 2023-05-02 17:43:46 +0000;;;","2023-05-03 12:40;dukebot;Changeset: 14874779
Author:    Harshitha Onkar <honkar@openjdk.org>
Date:      2023-05-03 19:39:12 +0000
URL:       https://git.openjdk.org/jdk/commit/14874779eeb9a279479c5aaddb40c056780d6152
;;;","2023-06-17 02:07;goetz;Fix request [11u,17u]

I backport this for parity with 11.0.21-oracle,17.0.9-oracle.
One of the required updates of external libs.
Clean backport. SAP nightly testing passed.;;;","2023-06-17 02:24;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/1464
Date: 2023-06-17 09:18:04 +0000;;;","2023-06-17 02:32;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk11u-dev/pull/1952
Date: 2023-06-17 09:27:26 +0000;;;","2023-09-14 13:51;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk8u-dev/pull/373
Date: 2023-09-14 20:44:35 +0000;;;","2023-09-14 14:21;mbalao;8u

This comment is to notify that I'm working on a proposal to have this fix in 8u. This proposal depends on 8295685.

Note: the intention is to propose the following series of 8u backports: JDK-8209115, JDK-8295685 and JDK-8305815.;;;","2023-09-19 08:55;mbalao;8u Fix Request

I'd like to request this fix for 8u so we have the latest and more stable version of libpng in OpenJDK (in-tree). A PR has been review-approved here: https://github.com/openjdk/jdk8u-dev/pull/373;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
(fs) Review obsolete Linux kernel dependency on os.version (Unix kernel 2.6.39),JDK-8305809,5098180,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,bpb,rriggs,rriggs,2023-04-10 11:13,2023-04-17 10:42,2023-10-01 09:56,2023-04-11 10:00,,,,,,,21,core-libs,,0,noreg-cleanup,,,,,,,,,,,,,"Review java.base/linux/classes/sun/nio/fs/LinuxFileStore; method supportsFileAttributeView().
It checks for an obsolete Unix kernel  2.6.39 to make a file attribute conditional.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i312bf:",9223372036854775807,b18,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@674604a9,,,,,,,,,"2023-04-10 11:39;bpb;EOL date for Linux kernel 2.6.39 was August 2011.;;;","2023-04-10 12:53;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/13412
Date: 2023-04-10 19:47:11 +0000;;;","2023-04-11 10:00;dukebot;Changeset: 475e9a7c
Author:    Brian Burkhalter <bpb@openjdk.org>
Date:      2023-04-11 16:59:11 +0000
URL:       https://git.openjdk.org/jdk/commit/475e9a7cad4efd4179bfcbaee10548b337c9ac48
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Typo in javadoc of ConstantDescs::BSM_VARHANDLE_STATIC_FIELD,JDK-8305808,5098178,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,mchung,mchung,mchung,2023-04-10 10:42,2023-04-17 10:41,2023-10-01 09:56,2023-04-10 13:53,12,,,,,,21,core-libs,,1,doc-only,,,,,,,,,,,,,"BSM_VARHANDLE_STATIC_FIELD is a MethodHandleDesc representing ConstantBootstraps.staticFieldVarHandle.

The javadoc says MethodHandleDesc representing ConstantBootstraps.staticVarHandle.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i312az:",9223372036854775807,b18,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@1cfeb1de,,,,,,,,,"2023-04-10 11:30;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/13411
Date: 2023-04-10 18:24:08 +0000;;;","2023-04-10 13:53;dukebot;Changeset: a43a17c8
Author:    Mandy Chung <mchung@openjdk.org>
Date:      2023-04-10 20:50:50 +0000
URL:       https://git.openjdk.org/jdk/commit/a43a17c8eaa68a7a48ff1b9bebd5e37082e835c0
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Spurious right brace in ConstantDescs field Javadocs,JDK-8305807,5098169,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,liach,liach,liach,2023-04-10 09:30,2023-04-17 10:41,2023-10-01 09:56,2023-04-10 15:56,20,21,,,,,21,core-libs,,0,,,,,,,,,,,,,,"A few fields in ConstantDescs have spurious right braces in the API documentation, including BSM_EXPLICIT_CAST, 
https://docs.oracle.com/en/java/javase/20/docs/api/java.base/java/lang/constant/ConstantDescs.html#BSM_EXPLICIT_CAST
and the newly added BSM_CLASS_DATA and BSM_CLASS_DATA_AT
https://download.java.net/java/early_access/jdk21/docs/api/java.base/java/lang/constant/ConstantDescs.html#BSM_CLASS_DATA",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i3128z:",9223372036854775807,b18,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4c088d55,,,,,,,,,"2023-04-10 11:03;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/13410
Date: 2023-04-10 17:58:00 +0000;;;","2023-04-10 15:55;dukebot;Changeset: 0ff2ff67
Author:    Chen Liang <liach@openjdk.org>
Committer: Mandy Chung <mchung@openjdk.org>
Date:      2023-04-10 22:54:32 +0000
URL:       https://git.openjdk.org/jdk/commit/0ff2ff6789a73bd72e0b9c9584ae7650d2001ee9
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Wrong debugging information printed with TraceOptoOutput,JDK-8305787,5098144,Bug,Resolved,JDK,JDK,software,duke,,,P5,Fixed,jkarthikeyan,jkarthikeyan,jkarthikeyan,2023-04-09 20:16,2023-07-10 00:17,2023-10-01 09:56,2023-05-18 08:12,11,17,21,,,,21,hotspot,,0,c2-cleanup,oracle-triage-21,,,,,,,,,,,,"When printing out resource names that a bundle is using for scheduling, wrong resource names are printed out. This is a purely cosmetic bug, but can be confusing.

As an example, the output:
*** Bundle: 1 instr, resources: D0 BR
 126  salI_rReg_imm  === _ 240  |271  [[ 127 125 ]] #5/0x00000005

Should read to say ""resources: D0 ALU0"" instead.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i3123f:",9223372036854775807,b24,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2023-04-09 20:48;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/13403
Date: 2023-04-10 03:43:17 +0000;;;","2023-04-10 14:03;dlong;ILW = wrong debug output; TraceOptoOutput; no workaround = LLH = P5;;;","2023-05-18 08:12;dukebot;Changeset: cc5c9b5d
Author:    Jasmine Karthikeyan <jkarthikeyan@openjdk.org>
Committer: Vladimir Kozlov <kvn@openjdk.org>
Date:      2023-05-18 15:09:45 +0000
URL:       https://git.openjdk.org/jdk/commit/cc5c9b5da2de4229c0244169bcbd6496f68db5ab
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
"compiler/c2/irTests/TestVectorizationMultiInvar.java failed with ""IRViolationException: There were one or multiple IR rule failures.""",JDK-8305781,5098136,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,roland,dcubed,dcubed,2023-04-08 19:33,2023-04-24 11:30,2023-10-01 09:56,2023-04-18 01:56,21,,,,,,21,hotspot,,0,intermittent,noreg-self,oracle-triage-21,tier2,,,,,,,,,,"The following test failed in the JDK21 CI:

compiler/c2/irTests/TestVectorizationMultiInvar.java

Here's a snippet from the log file:

----------System.err:(47/5471)*----------

Command Line:
/opt/mach5/mesos/work_dir/jib-master/install/jdk-21+18-1444/linux-x64-debug.jdk/jdk-21/fastdebug/bin/java -DReproduce=true -cp /opt/mach5/mesos/work_dir/slaves/741e9afd-8c02-45c3-b2e2-9db1450d0832-S14094/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/2a167a5f-1023-4da0-947b-b96cf21464b2/runs/5ed7569c-06de-44cc-a292-4d3bdaef543d/testoutput/test-support/jtreg_open_test_hotspot_jtreg_hotspot_vector_1/classes/2/compiler/c2/irTests/TestVectorizationMultiInvar.d:/opt/mach5/mesos/work_dir/jib-master/install/jdk-21+18-1444/src.full/open/test/hotspot/jtreg/compiler/c2/irTests:/opt/mach5/mesos/work_dir/slaves/741e9afd-8c02-45c3-b2e2-9db1450d0832-S14094/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/2a167a5f-1023-4da0-947b-b96cf21464b2/runs/5ed7569c-06de-44cc-a292-4d3bdaef543d/testoutput/test-support/jtreg_open_test_hotspot_jtreg_hotspot_vector_1/classes/2/test/lib:/opt/mach5/mesos/work_dir/slaves/741e9afd-8c02-45c3-b2e2-9db1450d0832-S14094/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/2a167a5f-1023-4da0-947b-b96cf21464b2/runs/5ed7569c-06de-44cc-a292-4d3bdaef543d/testoutput/test-support/jtreg_open_test_hotspot_jtreg_hotspot_vector_1/classes/2:/opt/mach5/mesos/work_dir/jib-master/install/jtreg/7.1.1/1/bundles/jtreg-7.1.1+1.zip/jtreg/lib/jtreg.jar:/opt/mach5/mesos/work_dir/jib-master/install/jtreg/7.1.1/1/bundles/jtreg-7.1.1+1.zip/jtreg/lib/junit-platform-console-standalone-1.8.2.jar:/opt/mach5/mesos/work_dir/jib-master/install/jtreg/7.1.1/1/bundles/jtreg-7.1.1+1.zip/jtreg/lib/testng-7.3.0.jar:/opt/mach5/mesos/work_dir/jib-master/install/jtreg/7.1.1/1/bundles/jtreg-7.1.1+1.zip/jtreg/lib/jcommander-1.78.jar:/opt/mach5/mesos/work_dir/jib-master/install/jtreg/7.1.1/1/bundles/jtreg-7.1.1+1.zip/jtreg/lib/guice-4.2.3.jar -Djava.library.path=/opt/mach5/mesos/work_dir/jib-master/install/jdk-21+18-1444/linux-x64-debug.test/hotspot/jtreg/native -Xbootclasspath/a:. -XX:+UnlockDiagnosticVMOptions -XX:+WhiteBoxAPI -XX:MaxRAMPercentage=4.16667 -Dtest.boot.jdk=/opt/mach5/mesos/work_dir/jib-master/install/jdk/19/36/bundles/linux-x64/jdk-19_linux-x64_bin.tar.gz/jdk-19 -Djava.io.tmpdir=/opt/mach5/mesos/work_dir/slaves/741e9afd-8c02-45c3-b2e2-9db1450d0832-S14094/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/2a167a5f-1023-4da0-947b-b96cf21464b2/runs/5ed7569c-06de-44cc-a292-4d3bdaef543d/testoutput/test-support/jtreg_open_test_hotspot_jtreg_hotspot_vector_1/tmp -XX:UseAVX=0 -XX:UseSSE=3 -Dir.framework.server.port=35395 --add-modules java.base --add-exports java.base/jdk.internal.misc=ALL-UNNAMED -XX:+PrintCompilation -XX:+UnlockDiagnosticVMOptions -XX:+LogCompilation -XX:CompilerDirectivesFile=test-vm-compile-commands-pid-19310.log -XX:CompilerDirectivesLimit=31 -XX:-OmitStackTraceInFastThrow -DShouldDoIRVerification=true -XX:-BackgroundCompilation -XX:CompileCommand=quiet compiler.lib.ir_framework.test.TestVM compiler.c2.irTests.TestVectorizationMultiInvar

One or more @IR rules failed:

Failed IR Rules (1) of Methods (1)
----------------------------------
1) Method ""public static void compiler.c2.irTests.TestVectorizationMultiInvar.testByteLong1(byte[],long[])"" - [Failed IR rules: 1]:
   * @IR rule 1: ""@compiler.lib.ir_framework.IR(applyIfCPUFeatureAnd={}, phase={DEFAULT}, applyIf={}, applyIfCPUFeatureOr={}, applyIfCPUFeature={}, counts={""_#LOAD_VECTOR#_"", "">=1"", ""_#STORE_VECTOR#_"", "">=1""}, failOn={}, applyIfAnd={}, applyIfOr={}, applyIfNot={})""
     > Phase ""PrintIdeal"":
       - counts: Graph contains wrong number of nodes:
         * Constraint 1: ""(\\d+(\\s){2}(LoadVector.*)+(\\s){2}===.*)""
           - Failed comparison: [found] 0 >= 1 [given]
           - No nodes matched!
         * Constraint 2: ""(\\d+(\\s){2}(StoreVector.*)+(\\s){2}===.*)""
           - Failed comparison: [found] 0 >= 1 [given]
           - No nodes matched!

>>> Check stdout for compilation output of the failed methods


  #############################################################
   - To only run the failed tests use -DTest, -DExclude,
     and/or -DScenarios.
   - To also get the standard output of the test VM run with
     -DReportStdout=true or for even more fine-grained logging
     use -DVerbose=true.
  #############################################################


compiler.lib.ir_framework.driver.irmatching.IRViolationException: There were one or multiple IR rule failures. Please check stderr for more information.
	at compiler.lib.ir_framework.driver.irmatching.IRMatcher.reportFailures(IRMatcher.java:61)
	at compiler.lib.ir_framework.driver.irmatching.IRMatcher.match(IRMatcher.java:49)
	at compiler.lib.ir_framework.TestFramework.runTestVM(TestFramework.java:754)
	at compiler.lib.ir_framework.TestFramework.start(TestFramework.java:719)
	at compiler.lib.ir_framework.TestFramework.start(TestFramework.java:339)
	at compiler.lib.ir_framework.TestFramework.runWithFlags(TestFramework.java:245)
	at compiler.c2.irTests.TestVectorizationMultiInvar.main(TestVectorizationMultiInvar.java:46)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
	at java.base/java.lang.reflect.Method.invoke(Method.java:578)
	at com.sun.javatest.regtest.agent.MainActionHelper$AgentVMRunnable.run(MainActionHelper.java:312)
	at java.base/java.lang.Thread.run(Thread.java:1630)

JavaTest Message: Test threw exception: compiler.lib.ir_framework.driver.irmatching.IRViolationException
JavaTest Message: shutting down test

result: Failed. Execution failed: `main' threw exception: compiler.lib.ir_framework.driver.irmatching.IRViolationException: There were one or multiple IR rule failures. Please check stderr for more information.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8300257,,,,,,,,,,,,x86_64,,,,,,,,,linux,,,,,,"0|i3121n:",9223372036854775807,b19,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2023-04-09 06:02;dcubed;[~roland] - The test that you added recently via:

JDK-8300257 C2: vectorization fails on some simple Memory Segment loops:

is failing in Mach5 Tier2. So far we have failures in 3 Tier2
build-IDs in a row: jdk-21+18-144[4-6]-tier2. The latest build-ID
has two failures (so far) so there is something of an intermittent
component to the these failures.

jdk-21+18-1444-tier2: -XX:UseAVX=0 -XX:UseSSE=3
jdk-21+18-1445-tier2: -XX:UseAVX=0 -XX:UseSSE=2
jdk-21+18-1446-tier2: -XX:UseAVX=0 -XX:UseSSE=3
jdk-21+18-1446-tier2: -XX:UseAVX=0 -XX:UseSSE=2;;;","2023-04-11 01:19;thartmann;ILW = Test fails due to missing C2 optimization (probably test bug), single test at tier2, no workaround = MMH = P3;;;","2023-04-17 04:35;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/13492
Date: 2023-04-17 11:26:47 +0000;;;","2023-04-18 01:56;dukebot;Changeset: 8ecb5dfa
Author:    Roland Westrelin <roland@openjdk.org>
Date:      2023-04-18 08:54:55 +0000
URL:       https://git.openjdk.org/jdk/commit/8ecb5dfa34ebd2ef7717994522fbb4bd7a14e0c9
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
 javax/swing/JTable/7068740/bug7068740.java fails on Ubunutu 20.04,JDK-8305780,5098135,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,psadhukhan,vprovodin,vprovodin,2023-04-08 18:02,2023-05-04 09:14,2023-10-01 09:56,2023-04-30 21:47,17,20,21,,,,21,client-libs,,0,sn_142,test_sprint,,,,,,,,,,,,"The test javax/swing/JTable/7068740/bug7068740.java intermittently fails on Ubuntu 20.04 22.04 with the following diagnostic:

====================8<--------------------
#section:main
----------messages:(7/261)----------
command: main bug7068740
reason: User specified action: run main bug7068740 
started: Sun Apr 09 02:53:37 CEST 2023
Mode: othervm
Additional options from @modules: --add-modules java.desktop
finished: Sun Apr 09 02:53:37 CEST 2023
elapsed time (seconds): 0.392
----------configuration:(3/40)----------
Boot Layer
  add modules: java.desktop

----------System.out:(0/0)----------
----------System.err:(12/627)----------
java.lang.RuntimeException: Test failed
	at bug7068740.doTest(bug7068740.java:123)
	at bug7068740.main(bug7068740.java:138)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
	at java.base/java.lang.reflect.Method.invoke(Method.java:578)
	at com.sun.javatest.regtest.agent.MainWrapper$MainThread.run(MainWrapper.java:125)
	at java.base/java.lang.Thread.run(Thread.java:1630)

JavaTest Message: Test threw exception: java.lang.RuntimeException: Test failed
JavaTest Message: shutting down test

STATUS:Failed.`main' threw exception: java.lang.RuntimeException: Test failed
====================8<--------------------

The issue was observed with 21-ea+17-1421, 20+36-2344, 17.0.2+8-86

Reproducibility: ~70%

Steps to reproduce:

$ runme.sh [jtreg_home] [test_jdk] """" javax/swing/JTable/7068740/bug7068740.java

see the attached runme.sh

Please note: the issue is alsoreproducible on Windows 10, Windows 11 that may be tracked by JDK-8197552",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8197552,,,,,,,,,"2023-04-08 18:01;vprovodin;runme.sh;https://bugs.openjdk.org/secure/attachment/103367/runme.sh",,,,,,,,,,,,,,,,,,,,,,"0|i3121f:",9223372036854775807,b21,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@568a5b31,,,,,,,,,"2023-04-10 20:55;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/13416
Date: 2023-04-11 03:47:04 +0000;;;","2023-04-30 21:47;dukebot;Changeset: e1b06eac
Author:    Prasanta Sadhukhan <psadhukhan@openjdk.org>
Date:      2023-05-01 04:45:38 +0000
URL:       https://git.openjdk.org/jdk/commit/e1b06eac722ea19ed33fbd15e763ca983aab34f2
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
"javax/swing/JTableHeader/6884066/bug6884066.java: Unexpected header's value; index = 4 value = E",JDK-8305778,5098133,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,psadhukhan,vprovodin,vprovodin,2023-04-08 16:28,2023-05-04 09:14,2023-10-01 09:56,2023-04-30 21:51,17,20,21,,,,21,client-libs,,0,sn_142,test_sprint,,,,,,,,,,,,"The test javax/swing/JTableHeader/6884066/bug6884066.java intermittently fails on Ubuntu 20.04 22.04 with the following diagnostic:

====================8<--------------------
#section:main
----------messages:(7/261)----------
command: main bug6884066
reason: User specified action: run main bug6884066 
started: Sun Apr 09 01:16:38 CEST 2023
Mode: othervm
Additional options from @modules: --add-modules java.desktop
finished: Sun Apr 09 01:16:46 CEST 2023
elapsed time (seconds): 8.018
----------configuration:(3/40)----------
Boot Layer
  add modules: java.desktop

----------System.out:(0/0)----------
----------System.err:(30/2108)----------
java.lang.reflect.InvocationTargetException
	at java.desktop/java.awt.EventQueue.invokeAndWait(EventQueue.java:1371)
	at java.desktop/java.awt.EventQueue.invokeAndWait(EventQueue.java:1346)
	at java.desktop/javax.swing.SwingUtilities.invokeAndWait(SwingUtilities.java:1480)
	at bug6884066.main(bug6884066.java:70)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
	at java.base/java.lang.reflect.Method.invoke(Method.java:578)
	at com.sun.javatest.regtest.agent.MainWrapper$MainThread.run(MainWrapper.java:125)
	at java.base/java.lang.Thread.run(Thread.java:1630)
Caused by: java.lang.RuntimeException: Unexpected header's value; index = 4 value = E
	at bug6884066.checkColumn(bug6884066.java:82)
	at bug6884066$2.run(bug6884066.java:73)
	at java.desktop/java.awt.event.InvocationEvent.dispatch(InvocationEvent.java:308)
	at java.desktop/java.awt.EventQueue.dispatchEventImpl(EventQueue.java:773)
	at java.desktop/java.awt.EventQueue$4.run(EventQueue.java:720)
	at java.desktop/java.awt.EventQueue$4.run(EventQueue.java:714)
	at java.base/java.security.AccessController.doPrivileged(AccessController.java:400)
	at java.base/java.security.ProtectionDomain$JavaSecurityAccessImpl.doIntersectionPrivilege(ProtectionDomain.java:87)
	at java.desktop/java.awt.EventQueue.dispatchEvent(EventQueue.java:742)
	at java.desktop/java.awt.EventDispatchThread.pumpOneEventForFilters(EventDispatchThread.java:203)
	at java.desktop/java.awt.EventDispatchThread.pumpEventsForFilter(EventDispatchThread.java:124)
	at java.desktop/java.awt.EventDispatchThread.pumpEventsForHierarchy(EventDispatchThread.java:113)
	at java.desktop/java.awt.EventDispatchThread.pumpEvents(EventDispatchThread.java:109)
	at java.desktop/java.awt.EventDispatchThread.pumpEvents(EventDispatchThread.java:101)
	at java.desktop/java.awt.EventDispatchThread.run(EventDispatchThread.java:90)

JavaTest Message: Test threw exception: java.lang.reflect.InvocationTargetException
JavaTest Message: shutting down test

STATUS:Failed.`main' threw exception: java.lang.reflect.InvocationTargetException
====================8<--------------------

The issue was observed with 21-ea+17-1421,  20+36-2344, 17.0.2+8-86

Reproducibility:  ~30%

Steps to reproduce:

$ runme.sh jtreg [test_jdk] """" test/jdk/javax/swing/JTableHeader/6884066/bug6884066.java

see the attached runme.sh",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"2023-04-08 16:22;vprovodin;runme.sh;https://bugs.openjdk.org/secure/attachment/103365/runme.sh",,,,,,,,,,,,,,,,linux,,,,,,"0|i3120z:",9223372036854775807,b21,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@568a5b31,,,,,,,,,"2023-04-10 22:12;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/13417
Date: 2023-04-11 05:04:02 +0000;;;","2023-04-30 21:51;dukebot;Changeset: 2d7c5079
Author:    Prasanta Sadhukhan <psadhukhan@openjdk.org>
Date:      2023-05-01 04:49:40 +0000
URL:       https://git.openjdk.org/jdk/commit/2d7c50791bd79d9a140df12e38050c851423992c
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
SA ClassWriter.java fails to skip overpass methods,JDK-8305771,5098126,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,iklam,iklam,iklam,2023-04-07 20:21,2023-05-01 10:13,2023-10-01 09:56,2023-04-26 13:57,,,,,,,21,hotspot,,0,,,,,,,,,,,,,,"The following code in sun/jvm/hotspot/tools/jcore/ClassWriter.java tries to skip the overpass methods

https://github.com/openjdk/jdk/blob/a8871f5d26e5cb42c031c7b736ec30b1b147a2bc/src/jdk.hotspot.agent/share/classes/sun/jvm/hotspot/tools/jcore/ClassWriter.java#L436-L446

       for (int i = 0; i < methods.length(); i++) {
            Method m = methods.at(i);
            long accessFlags = m.getAccessFlags();
            // overpass method
            if (accessFlags == (JVM_ACC_PUBLIC | JVM_ACC_SYNTHETIC | JVM_ACC_BRIDGE)) {
                continue;
            }

However, accessFlags may contain bits that are internal to the JVM. They should be masked off using:

long accessFlags = m.getAccessFlags() & JVM_RECOGNIZED_METHOD_MODIFIERS;

",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8305757,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i311zf:",9223372036854775807,b20,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@714e388c,,,,,,,,,"2023-04-07 20:24;iklam;Note: the ""overpass method"" in the Description of this issue corresponds to these methods:

https://github.com/openjdk/jdk/blob/a8871f5d26e5cb42c031c7b736ec30b1b147a2bc/src/hotspot/share/classfile/defaultMethods.cpp#L994-L998;;;","2023-04-07 20:26;iklam;I found this bug while developing JDK-8305757 -- if I call Method::compute_has_loops_flag() on an overpass method, which adds JVM_ACC_LOOPS_FLAG_INIT to Method::_access_flags, it will cause the ClassWriter code to fail.;;;","2023-04-25 16:56;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/13663
Date: 2023-04-25 23:49:56 +0000;;;","2023-04-26 13:57;dukebot;Changeset: 750bece0
Author:    Ioi Lam <iklam@openjdk.org>
Date:      2023-04-26 20:54:39 +0000
URL:       https://git.openjdk.org/jdk/commit/750bece0c2f331025590e7358c7b69f4811f0d24
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
os::Linux::available_memory() should refer MemAvailable in /proc/meminfo,JDK-8305770,5098125,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,ysuenaga,ysuenaga,ysuenaga,2023-04-07 19:18,2023-05-17 16:52,2023-10-01 09:56,2023-05-12 01:51,11,17,19,20,21,8,21,hotspot,,0,memory,,,,,,,,,,,,,"`os::Linux::available_memory()` returns available memory from cgroups or sysinfo(2). In case of the process which run on out of container, that value is based on `freeram` from sysinfo(2).

`freeram` is equivalent to `MemFree` in `/proc/meminfo` [1]. However it means just a free RAM. We should use `MemAvailable` when we want to know how much memory is available for the process [2]. `MemAvailable` is available in modern Linux kernel, and it has been backported some older kernels (e.g. RHEL). In `sar` from sysstat, it refers that value and shows it as `kbavail` [3].

AFAIK PhysicalMemory event in JFR depends on `os::Linux::available_memory()`, and it is used in automated analysis in JMC. So the JFR/JMC user could misunderstand physical memory was exhausted even if the memory was available enough.

[1] https://github.com/torvalds/linux/blob/c9c3395d5e3dcc6daee66c6908354d47bf98cb0c/fs/proc/meminfo.c#L59
[2] https://docs.kernel.org/filesystems/proc.html?highlight=memavailable
[3] https://github.com/sysstat/sysstat/blob/ac1df71ca252c158e8d418ded93e5ed52f5e8765/rd_stats.c#L325-L328",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,linux,,,,,,"0|i311z7:",9223372036854775807,b23,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,,,"2023-05-08 06:14;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/13398
Date: 2023-04-08 02:24:44 +0000;;;","2023-05-12 01:51;dukebot;Changeset: b6bcbc0c
Author:    Yasumasa Suenaga <ysuenaga@openjdk.org>
Date:      2023-05-12 08:48:29 +0000
URL:       https://git.openjdk.org/jdk/commit/b6bcbc0cbcb3729e4eb298f2198e0b6570e1f566
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
"Parsing a URI with an underscore goes through a silent exception, negatively impacting performance",JDK-8305763,5098116,Bug,Closed,JDK,JDK,software,duke,,,P4,Fixed,dhanalla,cslucas,cslucas,2023-04-07 14:03,2023-08-08 11:40,2023-10-01 09:56,2023-06-07 02:52,,,,,,,21,core-libs,,0,jdk11u-fix-request,jdk11u-fix-yes,jdk17u-fix-request,jdk17u-fix-yes,,,,,,,,,,"Using underscores in the name for a URI triggers a silent exception in the java standard library, which consumes 5% of the CPU.

Exception:
java.net.URISyntaxException: Illegal character in hostname at index N: xyz1_abcd.com
    at java.base/java.net.URI$Parser.fail(URI.java:2943)
    at java.base/java.net.URI$Parser.parseHostname(URI.java:3487)
    at java.base/java.net.URI$Parser.parseServer(URI.java:3329)

This exception is silent and does not produce any messages, except for ODP profiler, there is no other evidence that it’s happening (the stack trace above was printed after changes to Java library). The reason for this is because of how the URI creation is implemented in the java.net.URI class (link here: https://github.com/openjdk/jdk/blob/master/src/java.base/share/classes/java/net/URI.java#L3527). There are two paths for creating a valid URI, and one of them goes through an exception. 

We can see that if parseServer fails, there is still a way the authority gets assigned and we don’t throw an exception from the method. This means, not being able to parse the server is ok and the exception is silenced. In our case, the server parsing fails because we find an illegal character, as only alphanumeric and dash characters are allowed.

Created on behalf of Dhamoder Nalla @ Microsoft.",,,,,,,,,,,JDK-8311994,JDK-8313549,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i311x7:",9223372036854775807,b26,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@446e124a,,,,,,,Verified,,"2023-04-11 18:20;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/13430
Date: 2023-04-11 18:00:05 +0000;;;","2023-06-07 02:52;dukebot;Changeset: 749d4801
Author:    Dhamoder Nalla <dhanalla@microsoft.com>
Committer: Daniel Fuchs <dfuchs@openjdk.org>
Date:      2023-06-07 09:50:08 +0000
URL:       https://git.openjdk.org/jdk/commit/749d4801937ac145f945765f0ba0980bbccf384f
;;;","2023-06-13 10:05;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/1428
Date: 2023-06-13 16:58:19 +0000;;;","2023-06-13 11:56;dhanalla;I would like to have this patch backport to JDK17 (adding label jdk17u-fix-request).
Backport of 749d4801937ac145f945765f0ba0980bbccf384f
Patch applies cleanly 
;;;","2023-06-27 11:38;dhanalla;Fix-Request
Backport of 749d4801937ac145f945765f0ba0980bbccf384f
Patch applies cleanly.
- all tests under ""java/net/URI"" passed as expected.
- no failures related my change in tier1, tier2 and tier3 tests.;;;","2023-07-13 10:44;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk11u-dev/pull/2041
Date: 2023-07-13 17:38:23 +0000;;;","2023-07-14 11:25;dhanalla;Fix-Request to JDK11
Backport of 310115aa477067e9e9f35251fafde59518d3fae5
Patch applies cleanly.
- all sanity checks passed in PR;;;","2023-07-17 00:44;goetz;[11u]
Please first get a review before you label fix-request!;;;","2023-07-27 09:40;dhanalla;Fix-Request JDK11
Backport of 749d4801937ac145f945765f0ba0980bbccf384f
Patch is clean and ready.
- all sanity checks passed in PR
- No failures related to change in tier2 and tier3 tests.
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
FileInputStream and FileOutputStream implSpec should be corrected or removed,JDK-8305762,5098114,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,bchristi,bchristi,bchristi,2023-04-07 12:32,2023-04-24 11:30,2023-10-01 09:56,2023-04-17 13:43,,,,,,,21,core-libs,,0,,,,,,,,,,,,,,"With the removal of the AltFinalizer mechanism from FileInputStream and FileOutputStream in JDK-8192939, this portion of the Implementation Requirement in the class JavaDoc is no longer true:

""If this FileOutputStream has been subclassed and the close() method has been overridden, the close() method will be called when the FileInputStream is unreachable.""

Related doc improvements around cleanup and finalization could also be made, such as to the close() method.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8192939,,,,,,,,,"2023-04-07 13:44;bchristi;FISOverridesClose.java;https://bugs.openjdk.org/secure/attachment/103357/FISOverridesClose.java",,,,,,,,,,,,,,12,,,,,,,,"0|i311wr:",9223372036854775807,b19,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@5f132e58,,,,,,,,,"2023-04-07 13:44;bchristi;Attached test case: as of JDK 12, close() method is no longer called.;;;","2023-04-12 10:08;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/13437
Date: 2023-04-11 23:55:50 +0000;;;","2023-04-17 13:43;dukebot;Changeset: bb1a7bb3
Author:    Brent Christian <bchristi@openjdk.org>
Date:      2023-04-17 20:40:47 +0000
URL:       https://git.openjdk.org/jdk/commit/bb1a7bb3e15096fbdb5d3cc28db09fd486a6ba03
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Resolve multiple definition of 'jvm' when statically linking with JDK native libraries,JDK-8305761,5098113,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,jiangli,jiangli,jiangli,2023-04-07 12:22,2023-04-17 10:42,2023-10-01 09:56,2023-04-11 08:08,,,,,,,21,core-libs,,0,,,,,,,,,,,,,,"When statically link a set of JDK native libraries and libjvm with the launcher executable (see JDK-8303796 for more details), the linker reports failure due to multiple definitions of 'jvm' symbols, e.g.:

.../libmanagement_ext.a(management_ext.o):(.bss.jvm+0x0): multiple definition of `jvm'; /.../lib/libawt.a(awt_LoadLibrary.o):(.bss.jvm+0x0): first defined here
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8303796,,,,,,,,,,,,generic,,,,,,,,,generic,,,,,,"0|i311wj:",9223372036854775807,b18,,,,,,,,,,,"2023-04-07 16:51;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/13396
Date: 2023-04-07 23:32:46 +0000;;;","2023-04-07 18:17;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/13397
Date: 2023-04-08 01:11:08 +0000;;;","2023-04-11 08:08;dukebot;Changeset: ce4b9955
Author:    Jiangli Zhou <jiangli@openjdk.org>
Date:      2023-04-11 15:05:44 +0000
URL:       https://git.openjdk.org/jdk/commit/ce4b9955568100d6b315336321ff8903b703f19e
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Update the JAR tool man page to indicate -i/--generate-file is deprecated ,JDK-8305758,5098107,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,lancea,lancea,lancea,2023-04-07 10:56,2023-04-17 10:41,2023-10-01 09:56,2023-04-10 07:05,,,,,,,21,core-libs,,0,noreg-doc,,,,,,,,,,,,,"Support for JAR Index is being removed via JDK-8302819.

This issue will be used to update the man page to indicate that  --generate-index/-I  are deprecated

",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8302819,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i311v7:",9223372036854775807,b18,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@62714d2c,,,,,,,,,"2023-04-08 03:38;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/13400
Date: 2023-04-08 10:33:48 +0000;;;","2023-04-10 07:12;dukebot;Changeset: 76975da5
Author:    Lance Andersen <lancea@openjdk.org>
Date:      2023-04-10 14:11:51 +0000
URL:       https://git.openjdk.org/jdk/commit/76975da59e85c1520e97384f7ab707787e41a019
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
[JVMCI] missing barriers in CompilerToVM.readFieldValue for Reference.referent,JDK-8305755,5098104,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,never,never,never,2023-04-07 10:26,2023-05-03 08:43,2023-10-01 09:56,2023-04-17 09:47,20,21,,,,,21,hotspot,,0,jvmci,oracle-triage-11,oracle-triage-17,oracle-triage-21,,,,,,,,,,JVMCI provides the ability to reflectively read any field in a Java object.  During JIT compilation this is only used to read final fields but native image uses it for heap introspection.  In that case it's possible to use it to read Reference.referent but the JVMCI code is using obj_field_acquire which doesn't perform any of the GC barrier work.  Native image is always run with -XX:+UseParallelGC for performance but when running with G1 this code can read a weak reference that is going to be released.,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8306904,,,,,,,,,,,,,,,,,,,,,,,,,,,,,generic,,,,,,"0|i311uj:",9223372036854775807,b19,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2023-04-07 10:35;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/13389
Date: 2023-04-07 17:30:39 +0000;;;","2023-04-07 11:52;dlong;ILW = missing barrier; native image with some GCs; -XX:+UseParallelGC = MMM = P3;;;","2023-04-17 09:47;dukebot;Changeset: 497f9e76
Author:    Tom Rodriguez <never@openjdk.org>
Date:      2023-04-17 16:45:56 +0000
URL:       https://git.openjdk.org/jdk/commit/497f9e760da6342c611a2f542090c5cf4428b9fd
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
InitializeEncoding should cache Charset object instead of charset name,JDK-8305746,5098094,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,phofer,phofer,phofer,2023-04-07 08:12,2023-04-26 23:15,2023-10-01 09:56,2023-04-20 09:13,,,,,,,21,core-libs,,0,noreg-cleanup,,,,,,,,,,,,,"In jni_util.c, InitializeEncoding takes the sun_jnu_encoding string, typically containing the system locale's encoding, and uses NewStringUTF and NewGlobalRef to create a Java String object with the encoding's name and assign a handle to it to the global variable jnuEncoding. The variable is then used in functions such as JNU_NewStringPlatform and JNU_GetStringPlatformChars for Java calls.

Instead of storing a String object, it should look up the appropriate Charset object right away and store a handle to that, which would avoid a Charset lookup by name on each invocation, although there are fast fully-native code paths for common encodings. InitializeEncoding already calls Charset.isSupported which does such a lookup.

Besides an optimization, this would be an important change for GraalVM Native Image. We support multiple VM instances (""isolates"") in one process at the same time (e.g. through calling JNI_CreateJavaVM several times) which share the data section, but not the Java object heap. Therefore, the handle in jnuEncoding refers to a String object in the first created VM instance which cannot be accessed by other VM instances. Charset objects, however, are preexisting objects in the native image, and if InitializeEncoding looked up and stored a handle to the Charset object, that handle could be used across VM instances. It is not our goal to support different encodings for different VM instances, only to be able to safely use the system locale's encoding in multiple VM instances.

I am happy to come up with and test a patch.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i311sb:",9223372036854775807,b20,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@3962510e,,,,,,,,,"2023-04-07 13:40;naoto;Assign this issue to the submitter. I am happy to review the fix once a PR is submitted.;;;","2023-04-13 10:37;ulfzibis;Another approach in the same direction: https://bugs.java.com/bugdatabase/view_bug?bug_id=6862158
(unfortunately, the patch is lost)
Yes, we Germans have an eye on recyclability.;;;","2023-04-14 01:25;phofer;Thanks Ulf, but this seems to have a significantly larger scope. I already have a fairly small patch that I'm testing and will open a PR soon. Greetings from a neighboring country.;;;","2023-04-18 04:10;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/13499
Date: 2023-04-17 17:47:04 +0000;;;","2023-04-20 09:13;dukebot;Changeset: 20b1d19d
Author:    Peter Hofer <phofer@openjdk.org>
Committer: Naoto Sato <naoto@openjdk.org>
Date:      2023-04-20 16:11:29 +0000
URL:       https://git.openjdk.org/jdk/commit/20b1d19d26a039b963590ca6f806f78a4a94c25f
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
add `make compile-commands` artifacts to .gitignore,JDK-8305721,5098059,Bug,Resolved,JDK,JDK,software,duke,,,P5,Fixed,jcao,jcao,jcao,2023-04-06 16:56,2023-08-07 14:53,2023-10-01 09:56,2023-04-08 06:18,11,17,,,,,21,infrastructure,,0,amazon-interest,jdk11u-fix-request,jdk11u-fix-yes,jdk17u-fix-request,jdk17u-fix-yes,,,,,,,,,"`make compile-commands` produces

* `compile-commands.json` - so clangd knows how to build the project
* `.cache` - I believe clangd uses this as an indexing cache",,,,,,,,,,,JDK-8305969,JDK-8305970,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,generic,,,,,,,,,,,,,,,"0|i311kj:",9223372036854775807,b18,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@429c566,,,,,,,,,"2023-04-06 17:05;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/13381
Date: 2023-04-06 23:59:55 +0000;;;","2023-04-08 06:18;dukebot;Changeset: 9e203823
Author:    Joshua Cao <joshcao@amazon.com>
Committer: Julian Waters <jwaters@openjdk.org>
Date:      2023-04-08 13:17:33 +0000
URL:       https://git.openjdk.org/jdk/commit/9e20382311c58bd172abc98bc0a6757c3a64dda1
;;;","2023-04-10 14:06;jcao;Fix request (17u)

Not a clean backport due since JDK17 does not have .gitignore changes from 8295884;;;","2023-04-10 14:06;jcao;Fix request (11u)

Not a clean backport due since JDK11 does not have .gitignore changes from 8295884;;;","2023-04-10 14:10;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/1239
Date: 2023-04-10 21:04:28 +0000;;;","2023-04-10 14:12;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk11u-dev/pull/1827
Date: 2023-04-10 21:05:12 +0000;;;","2023-04-13 09:51;jcao;Not submitting a backport to JDK8, since `make compile-commands` is not a target there.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Add an extra test for JDK-8292755,JDK-8305714,5098051,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,wxiao,wxiao,wxiao,2023-04-06 10:37,2023-05-10 23:51,2023-10-01 09:56,2023-05-05 06:20,17,21,,,,,21,tools,,0,,,,,,,,,,,,,,"This task will add a test case for JShell crashing by running the following example code. This bug has been fixed by https://bugs.openjdk.org/browse/JDK-8292755

// Case A
@FunctionalInterface
interface RunnableWithThrowable {
    void run() throws Throwable;

    // You can also replace `static` with `default` and test again
    static RunnableWithThrowable getInstance() {
        return () -> { throw new NotExist(); };
    }
}

// Case B
@FunctionalInterface
interface RunnableWithGenericException<X extends Throwable> {
    void run() throws X;

    static RunnableWithGenericException<?> getInstance() {
        return () -> { throw new NotExist(); };
    }
}

",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8292755,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i311ir:",9223372036854775807,b22,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@ef6d34f,,,,,,,,,"2023-05-04 10:22;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/13719
Date: 2023-04-28 13:47:40 +0000;;;","2023-05-05 06:20;dukebot;Changeset: 746f8d13
Author:    Weibing Xiao <weibing.xiao@oracle.com>
Committer: Sean Coffey <coffeys@openjdk.org>
Date:      2023-05-05 13:19:20 +0000
URL:       https://git.openjdk.org/jdk/commit/746f8d133323c1caca019b507a6ccd9d5c98f2f9
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
[MacOS] Deprecated Cocoa-NSEvent names,JDK-8305712,5098049,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,honkar,honkar,honkar,2023-04-06 10:14,2023-09-29 08:49,2023-10-01 09:56,2023-04-13 08:29,,,,,,,21,client-libs,,0,sn_141,,,,,,,,,,,,,"There are a few deprecated Cocoa NSEvent constants currently in use in JDK. 
https://github.com/openjdk/jdk/blob/jdk-21+17/src/java.desktop/macosx/classes/sun/lwawt/macosx/CocoaConstants.java
https://developer.apple.com/documentation/appkit/nsmousemoved

No build warnings or issues seen so far. Probably deprecated warnings suppressed by use of ""-mmacosx-version-min="" set in open/make/autoconf/flags.m4.
Currently it is set to 10.12 for x64 and 11.0.0 for aarch64. ",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,generic,,,,,,,,,os_x,,,,,,"0|i311ib:",9223372036854775807,b19,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@5a9b3fd3,,,,,,,,,"2023-04-06 10:52;honkar;No build warnings or issues seen so far. Probably deprecated warnings suppressed by use of -mmacosx-version-min= set in open/make/autoconf/flags.m4. 
Currently it is set to 10.12 for x64 and 11.0.0 for aarch64.;;;","2023-04-11 13:36;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/13435
Date: 2023-04-11 20:28:29 +0000;;;","2023-04-13 08:29;dukebot;Changeset: d7dc474a
Author:    Harshitha Onkar <honkar@openjdk.org>
Date:      2023-04-13 15:26:47 +0000
URL:       https://git.openjdk.org/jdk/commit/d7dc474a5aa29da7f6a0d9c0fd872243c4d82e3c
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Arm: C2 always enters slowpath for monitorexit,JDK-8305711,5098047,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,stuefe,stuefe,stuefe,2023-04-06 09:11,2023-04-16 23:30,2023-10-01 09:56,2023-04-06 22:59,11,17,20,21,,,21,hotspot,,0,amazon-interest,jdk11u-fix-request,jdk11u-fix-yes,jdk17u-fix-request,jdk17u-fix-yes,oraclejdk-na,oracle-triage-21,,,,,,,"Due to a small bug in the C2 implementation of monitorexit for stacklocked locks, we always enter slow path.

AFAICS This is a day zero bug of the arm port and got introduced with JEP 297: ""Unified arm32/arm64 Port"". 

It has a significant effect on locking performance, but its effect had been hidden until JDK15 by biased locking. Biased locking removal made the bug appearant.",,,,,,,,,,,JDK-8305996,JDK-8306064,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,aarch32,,,,,,,,,,,,,,,"0|i311hv:",9223372036854775807,b18,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2023-04-06 09:36;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/13376
Date: 2023-04-06 16:29:57 +0000;;;","2023-04-06 22:59;dukebot;Changeset: c67bbcea
Author:    Thomas Stuefe <stuefe@openjdk.org>
Date:      2023-04-07 05:57:16 +0000
URL:       https://git.openjdk.org/jdk/commit/c67bbcea92919fea9b6f7bbcde8ba4488289d174
;;;","2023-04-06 23:45;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/1237
Date: 2023-04-07 06:39:47 +0000;;;","2023-04-07 23:16;stuefe;Fix Request (17u):

I'd like to see this fixed since it costs significant performance when locking. Risk is very low, patch applies cleanly.

https://github.com/openjdk/jdk17u-dev/pull/1237

Tests: GHAs clean (x64 failed for infrastructure reasons, I will repeat the patch but since I only touch arm files its clearly unrelated).;;;","2023-04-08 00:55;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk11u-dev/pull/1826
Date: 2023-04-08 07:50:31 +0000;;;","2023-04-13 23:35;stuefe;Fix Request (11u):

I'd like to see this fixed since it costs significant performance when locking. Risk is very low. Patch does not apply cleanly because JDK-8241436: ""C2: Factor out C2-specific code from MacroAssembler"" moved the unlock function from macroAssembler.cpp to c2_MacroAssembler.cpp.

Tests: GHAs clean (x86 failed for unrelated reasons). 

RFR: https://github.com/openjdk/jdk11u-dev/pull/1826;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Line breaks in search tags cause invalid JSON in index file,JDK-8305710,5098045,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,hannesw,hannesw,hannesw,2023-04-06 08:51,2023-05-31 23:25,2023-10-01 09:56,2023-05-25 00:42,,,,,,,21,tools,,0,,,,,,,,,,,,,,"The JavaDoc search index writer does not escape or remove line break characters. This causes the generated search index file to contain illegal JSON, resulting in the whole search functionality to be unavailable. 

The solution is to either escape or remove line breaks in search tags. Additionally, it might be a good idea to make sure search for other categories is still available if one of the index files is corrupt.

An alternative solution would be to make sure that line breaks are removed from search tags before passing them to the index writer, and throw if the index writer sees a line break. ",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8305407,,,,,,,,,,,,generic,,,,,,,,,generic,,,,,,"0|i311hf:",9223372036854775807,b25,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@7900061a,,,,,,,,,"2023-04-06 09:01;jjg;We could (should?) probably normalize white space in the index    `.replaceAll(""\\s+"", "" "")`;;;","2023-04-06 09:03;jjg;See also JDK-8305407
https://github.com/openjdk/jdk/pull/13315

That may already fix this issue, since it normalizes the strings with that `.replaceAll`
I will investigate.;;;","2023-04-11 05:14;hannesw;The immediate problem that broke JavaDoc search has been fixed by JDK-8305407. I reduced priority to P4, but leave the issue open to examine remaining potential to generate invalid index files.;;;","2023-05-16 08:14;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/14016
Date: 2023-05-16 15:04:27 +0000;;;","2023-05-25 00:42;dukebot;Changeset: 3272e259
Author:    Hannes Wallnöfer <hannesw@openjdk.org>
Date:      2023-05-25 07:40:44 +0000
URL:       https://git.openjdk.org/jdk/commit/3272e2597ac1176353bea33fb59e2938395bdb3f
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
[testbug] Tree/TableViewResizeColumnToFitContentTest fails with fractional screen scale,JDK-8305709,5098043,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,angorya,kcr,kcr,2023-04-06 07:56,2023-09-30 05:53,2023-10-01 09:56,2023-09-21 07:26,jfx20,,,,,,jfx22,javafx,,0,noreg-self,sn_142,sn_152,test_sprint,testbug,,,,,,,,,"To reproduce, run the following on a Windows machine with screen scale set to 125%.

$ gradle --continue --info -PFULL_TEST=true -PUSE_ROBOT=true :systemTests:test --tests TableViewResizeColumnToFitContentTest --tests TreeTableViewResizeColumnToFitContentTest

TableViewResizeColumnToFitContentTest > resizeColumnToFitContentTest FAILED
    java.lang.AssertionError: TableView.CONSTRAINED_RESIZE_POLICY ignored. expected:<448.0> but was:<448.8>
        at org.junit.Assert.fail(Assert.java:89)
        at org.junit.Assert.failNotEquals(Assert.java:835)
        at org.junit.Assert.assertEquals(Assert.java:555)
        at test.robot.javafx.scene.tableview.TableViewResizeColumnToFitContentTest.resizeColumnToFitContentTest(TableViewResizeColumnToFitContentTest.java:103)

TreeTableViewResizeColumnToFitContentTest > resizeColumnToFitContentTest FAILED
    java.lang.AssertionError: TreeTableView.CONSTRAINED_RESIZE_POLICY ignored. expected:<448.0> but was:<448.8>
        at org.junit.Assert.fail(Assert.java:89)
        at org.junit.Assert.failNotEquals(Assert.java:835)
        at org.junit.Assert.assertEquals(Assert.java:555)
        at test.robot.javafx.scene.treetableview.TreeTableViewResizeColumnToFitContentTest.resizeColumnToFitContentTest(TreeTableViewResizeColumnToFitContentTest.java:103)
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8306571,,,,JDK-8299753,JDK-8299755,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i311gz:",9223372036854775807,b11,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@67282485,,,,,,,,,"2023-04-19 16:26;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jfx/pull/1102
Date: 2023-04-19 22:50:45 +0000;;;","2023-04-20 08:25;angorya;Skipping parts of the test until JDK-8299753 gets implemented, see JDK-8306571.;;;","2023-04-20 09:25;kcr;In that case, I think you can close this as a duplicate of JDK-8299753, unless there is a separate issue that you want to track here.;;;","2023-04-20 09:29;angorya;I'd keep this open since the tests need to be fixed (and possibly updated).;;;","2023-09-07 11:47;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jfx/pull/1234
Date: 2023-09-07 18:26:50 +0000;;;","2023-09-21 07:26;dukebot;Changeset: 9658fc71
Author:    Andy Goryachev <angorya@openjdk.org>
Date:      2023-09-21 14:22:55 +0000
URL:       https://git.openjdk.org/jfx/commit/9658fc7183ceebfcc2c5da5ba9b77b1a1a48486a
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
6.3.2: Incomplete specification of flow scoping,JDK-8305701,5098033,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,gbierman,gbierman,gbierman,2023-04-06 04:32,2023-06-09 05:57,2023-10-01 09:56,2023-06-09 05:57,,,,,,,21,specification,,0,noreg-doc,,,,,,,,,,,,,"Flow scoping allows some pattern variables to flow beyond the statement within which they were declared, e.g.

if (!(e instanceof String s)){
return;
}
System.out.println(s); // s is in scope here

This is specified as follows (JLS 6.3.2.2):

A pattern variable is introduced by `if (e) S` iff (i) it is introduced by `e` when false, and (ii) `S` cannot complete normally.

The intent is that if `S` could not complete normally this enables us to deduce that the only way a statement following the conditional could be reached is if the pattern matched successfully.

Here is a counterexample:

l: if (!(e instanceof String s)) {
break l;
}
System.out.println(s);

JLS 14.22 says this about `break` statements:

- A `break`, `continue`, `return`, `throw`, or `yield` statement cannot complete normally.

So the analysis says that the pattern variable `s` *is* in scope in the
statements that follow the labeled conditional statement, but if `e` does not
evaluate to a `String`, it is possible to reach the print statement
without initializing the pattern variable `s`.

The conditions on `S` must be strengthened to exclude this example. A simple ban
on `S` containing a `break` statement with a label would suffice, but would exclude
acceptable code such as:

l: while (true) {
if (!(e instanceof String s)) {
...
break l;
}
// s in scope here
}
System.out.println(s); // error - s not in scope here
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8302865,,,,,,,,,,,,,,,,,,,,,,,16,,,,,,,,"0|i311er:",9223372036854775807,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@7441ef8d,,,,,,,,,"2023-06-09 05:24;gbierman;The error is not in the rule for the conditional statement, but actually in the
rule for the labeled statement. Currently this reads (JLS 6.3.2.7):

> The following rule applies to a labeled statement (§14.7):
> 
> -   A pattern variable is introduced by a labeled statement iff it is introduced
>     by the labeled statement's immediately contained Statement.

It should follow the form of the other statements that can be the target for a
control operator (while/do/for), and read as follows:

> The following rule applies to a labeled statement (§14.7):
> 
> -   A pattern variable is introduced by a labeled statement L:S iff (i) it is
>     introduced by the statement S, and (ii) S does not contain a reachable break
>     statement for which the labeled statement is the break target (§14.15).

Let's look at some examples:

l1: if (!(e instanceof String s)) { 
        break l1;
    }
System.out.println(s);

Does the labeled statement introduce pattern variable s? Let's take a
look:
    
1.  Is it introduced by immediately contained statement (the conditional
    statement)? YES 
    
2.  Does the immediately contained statement contain a reachable break statement
    whose target is the labeled statement? YES!!

So, the labeled statement does not introduce pattern variable s. Variable s is 
NOT in scope at the println statement.

A nested example:

l2:l1:  if (!(e instanceof String s)) { 
            break l2;
        }
System.out.println(s); 

So  (a) the conditional statement introduces s, and 
    (b) the nested l1:... labeled statement introduces s, ...but...
    (c) the outer l2:... labeled statement fails the second test, so it doesn't
        introduce s, and so variable s is NOT in scope at the println statement.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
[X86] Do not emit two REX prefixes in Assembler::prefix,JDK-8305690,5098010,Bug,Resolved,JDK,JDK,software,duke,,,P5,Fixed,gli,gli,gli,2023-04-05 20:24,2023-07-04 23:29,2023-10-01 09:56,2023-04-18 01:04,11,17,20,21,,,21,hotspot,,0,jdk17u-fix-request,jdk17u-fix-yes,oracle-triage-21,,,,,,,,,,,"Currently, the method `Assembler::prefix`, shown below, may emit  two REX prefixes when the `adr` needs `REX_B` and `dst` needs `REX_R`. It seems this code path is not invoked by any caller, so the bug is not exposed now.

```
void Assembler::prefix(Register dst, Address adr, Prefix p) {
  if (adr.base_needs_rex()) {
    if (adr.index_needs_rex()) {
      assert(false, ""prefix(Register dst, Address adr, Prefix p) does not support handling of an X"");
    } else {
      prefix(REX_B); // <-- here
    }
  } else {
    if (adr.index_needs_rex()) {
      assert(false, ""prefix(Register dst, Address adr, Prefix p) does not support handling of an X"");
    }
  }
  if (dst->encoding() >= 8) {
    p = (Prefix)(p | REX_R);
  }
  if (p != Prefix_EMPTY) {
    // do not generate an empty prefix
    prefix(p);
  }
}
```",,,,,,,,,,,JDK-8307706,JDK-8311405,JDK-8310195,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i3119n:",9223372036854775807,b19,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2023-04-05 22:42;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/13369
Date: 2023-04-06 05:36:06 +0000;;;","2023-04-06 15:45;dlong;ILW = extra prefix; never; no workaround = LLH = P5;;;","2023-04-18 01:04;dukebot;Changeset: 49726ee3
Author:    Guoxiong Li <gli@openjdk.org>
Date:      2023-04-18 08:01:32 +0000
URL:       https://git.openjdk.org/jdk/commit/49726ee3a95023a912aacad0e3714eae146eed21
;;;","2023-05-08 08:06;gli;Fix Request(17u)

Request to backport this change to 17u. The code applies cleanly.
Low risk:
It is a corner case which is not triggered by the current code.
In order to avoid bugs in the future, it is good to backport it.

Thanks!;;;","2023-05-08 08:22;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/1334
Date: 2023-05-08 15:09:15 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
jdk build --with-memory-size=1024 broken by JDK-8305100,JDK-8305688,5098005,Bug,Resolved,JDK,JDK,software,duke,,,P2,Fixed,jlaskey,martin,martin,2023-04-05 16:00,2023-04-19 23:42,2023-10-01 09:56,2023-04-13 04:44,,,,,,,21,tools,,0,noreg-hard,regression,,,,,,,,,,,,"I've been building --with-jobs=1 --with-memory-size=1024 and that recently started failing with OOME:


```
 Compiling up to 3446 files for java.base
 [stderr] java.util.concurrent.ExecutionException: java.lang.OutOfMemoryError: Java heap space
 [stderr] 	at java.base/java.util.concurrent.FutureTask.report(FutureTask.java:122)
 [stderr] 	at java.base/java.util.concurrent.FutureTask.get(FutureTask.java:191)
 [stderr] 	at javacserver.server.CompilerThreadPool.dispatchCompilation(CompilerThreadPool.java:49)
 [stderr] 	at javacserver.server.Server.handleRequest(Server.java:211)
 [stderr] 	at javacserver.server.Server.lambda$start$1(Server.java:173)
 [stderr] 	at java.base/java.lang.Thread.run(Thread.java:1623)
 [stderr] Caused by: java.lang.OutOfMemoryError: Java heap space
 [stderr] 	at java.base/java.nio.file.Files.read(Files.java:3213)
 [stderr] 	at java.base/java.nio.file.Files.readAllBytes(Files.java:3270)
 [stderr] 	at java.base/jdk.internal.module.ModuleReferences$ExplodedModuleReader.read(ModuleReferences.java:410)
 [stderr] 	at java.base/jdk.internal.loader.BuiltinClassLoader.defineClass(BuiltinClassLoader.java:809)
 [stderr] 	at java.base/jdk.internal.loader.BuiltinClassLoader.findClassInModuleOrNull(BuiltinClassLoader.java:741)
 [stderr] 	at java.base/jdk.internal.loader.BuiltinClassLoader.loadClassOrNull(BuiltinClassLoader.java:665)
 [stderr] 	at java.base/jdk.internal.loader.BuiltinClassLoader.loadClass(BuiltinClassLoader.java:639)
 [stderr] 	at java.base/jdk.internal.loader.ClassLoaders$AppClassLoader.loadClass(ClassLoaders.java:188)
 [stderr] 	at java.base/java.lang.ClassLoader.loadClass(ClassLoader.java:521)
 [stderr] 	at jdk.compiler.interim/com.sun.tools.javac.main.Main.resourceMessage(Main.java:448)
 [stderr] 	at jdk.compiler.interim/com.sun.tools.javac.main.Main.compile(Main.java:332)
 [stderr] 	at jdk.compiler.interim/com.sun.tools.javac.main.Main.compile(Main.java:176)
 [stderr] 	at jdk.compiler.interim/com.sun.tools.javac.main.JavacToolProvider.run(JavacToolProvider.java:54)
 [stderr] 	at javacserver.server.Server.runCompiler(Server.java:242)
 [stderr] 	at javacserver.server.CompilerThreadPool.lambda$dispatchCompilation$0(CompilerThreadPool.java:49)
 [stderr] 	at javacserver.server.CompilerThreadPool$$Lambda$62/0x00000001000c4e98.call(Unknown Source)
 [stderr] 	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:317)
 [stderr] 	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1144)
 [stderr] 	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:642)
 [stderr] 	at java.base/java.lang.Thread.runWith(Thread.java:1636)
 [stderr] 	... 1 more
 gmake[3]: *** [CompileJavaModules.gmk:95: /home/martin/ws/jdk/build/linux-x86_64-server-release/jdk/modules/java.base/_the.java.base_batch] Error 1
 gmake[2]: *** [make/Main.gmk:193: java.base-java] Error 2

 ERROR: Build failed for target 'images' in configuration 'linux-x86_64-server-release' (exit code 2) 
 Stopping javac server

 === Output from failing command(s) repeated here ===
 * For target jdk_modules_java.base__the.java.base_batch:
 [stderr] java.util.concurrent.ExecutionException: java.lang.OutOfMemoryError: Java heap space
 [stderr] 	at java.base/java.util.concurrent.FutureTask.report(FutureTask.java:122)
 [stderr] 	at java.base/java.util.concurrent.FutureTask.get(FutureTask.java:191)
 [stderr] 	at javacserver.server.CompilerThreadPool.dispatchCompilation(CompilerThreadPool.java:49)
 [stderr] 	at javacserver.server.Server.handleRequest(Server.java:211)
 [stderr] 	at javacserver.server.Server.lambda$start$1(Server.java:173)
 [stderr] 	at java.base/java.lang.Thread.run(Thread.java:1623)
 [stderr] Caused by: java.lang.OutOfMemoryError: Java heap space
 [stderr] 	at java.base/java.nio.file.Files.read(Files.java:3213)
 [stderr] 	at java.base/java.nio.file.Files.readAllBytes(Files.java:3270)
 [stderr] 	at java.base/jdk.internal.module.ModuleReferences$ExplodedModuleReader.read(ModuleReferences.java:410)
 [stderr] 	at java.base/jdk.internal.loader.BuiltinClassLoader.defineClass(BuiltinClassLoader.java:809)
 [stderr] 	at java.base/jdk.internal.loader.BuiltinClassLoader.findClassInModuleOrNull(BuiltinClassLoader.java:741)
 [stderr] 	at java.base/jdk.internal.loader.BuiltinClassLoader.loadClassOrNull(BuiltinClassLoader.java:665)
 [stderr] 	at java.base/jdk.internal.loader.BuiltinClassLoader.loadClass(BuiltinClassLoader.java:639)
    ... (rest of output omitted)
```",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8305100,,,,,"2023-04-06 06:02;jlaskey;8305100.revert.patch;https://bugs.openjdk.org/secure/attachment/103344/8305100.revert.patch",,,,,,,,,,,,,,,,,,,,,,"0|i3118j:",9223372036854775807,b19,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4dca67bd,,,,,,,,,"2023-04-05 16:13;martin;I git bisected using this self-explanatory shell snippet (but that only works for me):

```
 # 2023-04: find OOME during build in javac compilation
 #
 # $ git show -s --oneline 790acedaabd
 # 790acedaabd 8305100: [REDO] Clean up JavadocTokenizer
 # Fails with OOME with BISECT_MEMORY_SIZE <= 1024
 # Succeeds with BISECT_MEMORY_SIZE >= 1152
 #
 # At 790acedaabd^, build works even with BISECT_MEMORY_SIZE as low as 50
 # 2e91585ac94 8303123: Add line break opportunity to single type parameters
 openjdk:bisect() {
   verbose git -C ""$repo"" bisect reset
   verbose git -C ""$repo"" bisect start 'master@{2023-04-04}' 'master@{2023-04-01}'
   verbose git -C ""$repo"" bisect run bro openjdk:bisect-run
 }

 openjdk:bisect-run() {
   local -r repo=${BISECT_REPO-""$HOME/ws/jdk""}
   local -r boot=${BISECT_BOOT_JDK-""$HOME/jdk/jdk20""}
   local -r jobs=${BISECT_JOBS-1}
   local -r size=${BISECT_MEMORY_SIZE-1024}
   (
     cd ""$repo""
     declare -ar configure=(
       bash ./configure
       --with-boot-jdk=""$boot""
       --with-jobs=""$jobs""
       --with-memory-size=""$size""
     )
     verbose ""${configure[@]}""
     verbose make clean
     verbose taskset 01 nice ionice make images
   )
 }
```;;;","2023-04-05 16:23;martin;I suspect that JDK-8305100 is causing greatly increased memory retention (of javadoc comments) during javac execution, most of which is rarely used.

I suspect that whatever mechanism is responsible for responding to --with-memory-size is no longer working well.  I was surprised to see a jdk build succeed --with-memory-size=50 previous to JDK-8305100.

Of course, memory usage is dependent on architecture and many other things.  If you can't repro --with-memory-size=1024, try lower values like 512.;;;","2023-04-05 16:32;martin;This was my most frustrating experience with JIRA - the web interface threw away my issue edits multiple times;;;","2023-04-06 09:01;jlaskey;There is a change that keeps the source buffer around longer than it should. I will revert the portion of the change set that causes that to happen.

On the flip side, OOM was hard to reproduce on my aarch64 and x64 machines -- and took a very long time to build libjvm in the process. I was, however able to get OOM frequently with --with-memory-size=1024 and --with-jobs > 1, with or without the change set. I actually went back to March 28 and crashed. So I would say that in general that  --with-memory-size=1024 is pushing the boundaries.
;;;","2023-04-06 11:44;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/13378
Date: 2023-04-06 18:37:36 +0000;;;","2023-04-06 11:57;martin;> --with-memory-size=1024 is pushing the boundaries.

... but I found that the build was passing even with --with-memory-size=50

> OOM frequently with --with-memory-size=1024 and --with-jobs > 1

The idea of my configure flags is to build on machines with low resources (like Raspberry Pis), with low impact on unrelated processes during the build (e.g. in automated regression builds), so I want --with-jobs=1.

(I think there are some build system bugs with --jobs=1 -- I've noticed multiple javac processes running even with that flag used.)

I have a back burner goal of some day being able to build openjdk on my Raspberry Pi Zero 2, with only 512 MB of RAM.

> noreg-cleanup

Instead of noreg-cleanup I would use noreg-hard -- easy to test ad hoc; hard to test via jtreg.;;;","2023-04-06 12:18;martin;> took a very long time to build libjvm

I'm actually *trying* to make the build take a very long time!
You could call it ""flattening the curve""!;;;","2023-04-13 04:44;dukebot;Changeset: 2060c8ea
Author:    Jim Laskey <jlaskey@openjdk.org>
Date:      2023-04-13 11:42:00 +0000
URL:       https://git.openjdk.org/jdk/commit/2060c8ea14119048f06b5a8c3c251f4e8d1ef43b
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Remove Permissions from jcmd help output,JDK-8305680,5097997,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,kevinw,kevinw,kevinw,2023-04-05 14:39,2023-04-12 23:23,2023-10-01 09:56,2023-04-06 14:12,,,,,,,21,core-svc,,0,,,,,,,,,,,,,,"The jcmd help output documents Permissions for commands where they define them.

It is not documented when these are enforced (when the Security Manager is active, e.g. if the SM is enabled with a policy to control remote JMX access).   The Permission information is not useful to the user of jcmd.

Due to the the upcoming Security Manager removal (see JEP 411), this information is no longer useful and should be removed.

If there is a replacement feature, new documentation should be added.
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8305622,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i3116r:",9223372036854775807,b18,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@411d4af6,,,,,,,,,"2023-04-06 01:51;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/13371
Date: 2023-04-06 08:44:00 +0000;;;","2023-04-06 14:12;dukebot;Changeset: 0a340187
Author:    Kevin Walls <kevinw@openjdk.org>
Date:      2023-04-06 21:09:56 +0000
URL:       https://git.openjdk.org/jdk/commit/0a3401879743878c63a3db8d68d33894de6ccf6a
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Surprising definite assignment error after JDK-8043179,JDK-8305672,5097989,Bug,Closed,JDK,JDK,software,duke,,,P2,Fixed,acobbs,cushon,cushon,2023-04-05 11:24,2023-08-17 12:50,2023-10-01 09:56,2023-05-01 06:25,21,,,,,,21,tools,,0,regression,regression_8043179,,,,,,,,,,,,"javac reports the following definite assignment error after the fix for JDK-8043179. The error is surprising to me, since the lambda doesn't reference 'x' at all. Is this expected?

$ cat T.java
public class T {

  private final int x;

  public T() {
    try {
      Runnable r =
          () -> {
            try {
              return;
            } catch (Exception e) {
              throw new AssertionError(e);
            }
          };
    } catch (Exception e) {
    }
    x = 42;
  }
}

$ javac -fullversion T.java
javac full version ""20-ea+35-2342""
OK

$ javac -fullversion T.java
javac full version ""21-ea+16-1326""
T.java:17: error: variable x might already have been assigned
    x = 42;
    ^
1 error
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8043179,,,,,,,,,,,,,,,,,,,,,,b16,21,,,,,,,,"0|i3114z:",9223372036854775807,b21,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4dca67bd,,,,,,,Verified,,"2023-04-05 15:48;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/13366
Date: 2023-04-05 22:42:58 +0000;;;","2023-04-22 06:29;kcr;We ran into this bug when trying to compile JavaFX with JDK 21. This is a pretty serious regression, and I don't see a reasonable workaround.

https://github.com/openjdk/jfx/blob/21%2B14/modules/javafx.media/src/main/java/com/sun/media/jfxmediaimpl/platform/osx/OSXPlatform.java#L69-L94

The compilation error is:

modules/javafx.media/src/main/java/com/sun/media/jfxmediaimpl/platform/osx/OSXPlatform.java:90: error: variable globalInstance might already have been assigned
                globalInstance = new OSXPlatform();
                ^
modules/javafx.media/src/main/java/com/sun/media/jfxmediaimpl/platform/osx/OSXPlatform.java:92: error: variable globalInstance might already have been assigned
                globalInstance = null;
                ^
;;;","2023-05-01 06:25;dukebot;Changeset: d437c61f
Author:    Archie Cobbs <acobbs@openjdk.org>
Committer: Vicente Romero <vromero@openjdk.org>
Date:      2023-05-01 13:23:37 +0000
URL:       https://git.openjdk.org/jdk/commit/d437c61f5b77793606d73960eeaf98a091f14f6a
;;;","2023-08-17 12:50;mtrudeau;It is fixed... 

Thanks,
-Archie
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
javac rejects semicolons in compilation units with no imports,JDK-8305671,5097987,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,acobbs,cushon,cushon,2023-04-05 10:45,2023-08-31 04:33,2023-10-01 09:56,2023-06-28 08:49,,,,,,,21,tools,,0,,,,,,,,,,,,,,"After JDK-8027682, javac rejects compilation units like the following:

$ cat T.java
package p;;

$ javac -fullversion T.java
javac full version ""21-ea+16-1326""
T.java:2: error: reached end of file while parsing
1 error

Is this a bug? I expected it to reject semi-colons preceding imports, but if there are no imports, isn't the the semi-colon a valid empty type declaration?",,,,,,,,,,,JDK-8310910,JDK-8311356,,,,,,,,,,,,,,,,,,,,JDK-8027682,JDK-8315452,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i3114j:",9223372036854775807,b29,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4dca67bd,,,,,,,,,"2023-04-05 10:55;acobbs;That is definitely wrong according to the spec: https://docs.oracle.com/javase/specs/jls/se19/html/jls-7.html#jls-TopLevelClassOrInterfaceDeclaration

I'll take a look.;;;","2023-04-05 11:43;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/13361
Date: 2023-04-05 18:37:05 +0000;;;","2023-06-26 12:17;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk21/pull/64
Date: 2023-06-26 19:11:16 +0000;;;","2023-06-28 08:49;dukebot;Changeset: 359bd63b
Author:    Archie Cobbs <acobbs@openjdk.org>
Committer: Vicente Romero <vromero@openjdk.org>
Date:      2023-06-28 15:48:05 +0000
URL:       https://git.openjdk.org/jdk21/commit/359bd63b15fc256df19cc7f1b0b2b4c399b4adc0
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Performance regression in LockSupport.unpark with lots of idle threads,JDK-8305670,5097986,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,dcubed,apangin,apangin,2023-04-05 10:26,2023-07-24 22:11,2023-10-01 09:56,2023-05-13 07:47,17,21,,,,,21,hotspot,,0,amazon-interest,jdk17u-fix-request,jdk17u-fix-yes,performance,regression,threads,Thread-SMR,,,,,,,"We noticed latency degradation when migrating an app from JDK 8 to JDK 17 or 20. The app has more than 8K threads most of which are idle. Analysis showed a large amount of CPU time spent in ThreadsListHandle::cv_internal_thread_to_JavaThread called from Unsafe_Unpark.

I could reproduce the issue locally with a simple test case - see attached UnparkRegression.java

It creates 10K idle threads that sleep indefinitely and two active threads communicating to each other via CyclicBarrier. The particular synchronization primitive does not matter: any java.util.concurrent class that eventually calls LockSupport.unpark is affected by the issue.

Running the test with JDK 17 or JDK 20 on 4-core ARM64 machine, it does 70K roundtrips per second, while with JDK 8 it does 162K (2.3x more).

The issue appeared in JDK 10 with the introduction of Thread-SMR. The problem is the linear search in ThreadsList::includes called by cv_internal_thread_to_JavaThread:
https://github.com/openjdk/jdk/blob/44f33ad1a9617fc23864c9ba5f063b3fc2f1e18c/src/hotspot/share/runtime/threadSMR.cpp#L829

The call to ThreadList::includes is guarded by a diagnostic flag `EnableThreadSMRExtraValidityChecks` which is enabled by default.
After adding -XX:-EnableThreadSMRExtraValidityChecks, the performance returns back to JDK 8 levels.",,,,,,,,,,,JDK-8312202,JDK-8312712,JDK-8312540,,,,,,JDK-8307068,,,,,,,,,,,,,,,,,JDK-8307483,JDK-8167108,JDK-8307970,,,"2023-04-10 13:08;dcubed;8305670-new-assert-failure.zip;https://bugs.openjdk.org/secure/attachment/103383/8305670-new-assert-failure.zip","2023-04-05 10:25;apangin;UnparkRegression.java;https://bugs.openjdk.org/secure/attachment/103334/UnparkRegression.java",,,,,,,,,,,,,,,,,,,,,"0|i3114b:",9223372036854775807,b23,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,,,"2023-04-05 13:42;shade;The code path in question is added by JDK-8167108. AFAICS, this is the intended use of SMR: the whole thing protects from dealing with a dead (concurrently deleted) `JavaThread*` in `Unsafe_Unpark`, which would -- best case -- crash. So turning off `EnableThreadSMRExtraValidityChecks` is okay for experiments, but looks rather unsafe for production use. (Just in case a casual reader would decide to add this to their JVM flags). 

Maybe [~dholmes] would see the ways out of this performance penalty.;;;","2023-04-05 17:42;dholmes;I'm searched everything I have on the Thread-SMR design (note I wasn't the designer or implementor) and can't find anything that specifically discusses the implication of the linear search or why the EnableThreadSMRExtraValidityChecks flag was added and only used in some places. Perhaps [~dcubed] can say more?

A linear search is always going to be a problem with excessive numbers of threads, but 99.9% of the time this is not an issue. The usual alternatives to linear search would apply here - with the usual trade-offs.

Thinking more about this and the use of cv_internal_thread_to_JavaThread though, I'm not sure the search is actually necessary - and perhaps why EnableThreadSMRExtraValidityChecks is just an ""extra check"". At the time of the call to cv_internal_thread_to_JavaThread we already have a ThreadsListHandle active and so if the target was alive when the TLH was created it remains safe to access. Inside cv_internal_thread_to_JavaThread we ask the j.l.Thread for its JavaThread. If that is non-null the thread is at least transiently alive but could logically terminate at any time. However we don't care about that - as long as the JavaThread doesn't go through it's destruction process due to it being protected by the TLH then we can continue the unpark operation on it.;;;","2023-04-05 23:16;shade;Oh yes, I should have asked Dan, sorry!

It looks to me that TLH guarantees no other thread would destroy the unparking thread *if* that thread was on the list. Just having the JavaThread* in hands, when it is not on the current thread list, does not enjoy any protection from TLH. So there is a window where JT* in question is both being unparked *and* already taken off the list and being destroyed, since from the perspective of SMR it is safe to do so. It looks as if EnableThreadSMRExtraValidityChecks = false just restores the old, racy behavior in code that converts thread oop to JT*, like Unsafe_Unpark. If so, it is not just an extra check, it is actually a load-bearing piece for correctness :) Is it?

To solve the regression, we might want to try speeding up the `includes` scan.;;;","2023-04-05 23:29;dholmes;Hmmm. The TLH either captures the thread and makes it safe to touch, or it doesn't. If the TLH did not catch the thread then it has already terminated in which case querying the j.l.Thread will return null and the whole thing is as no-op. If the j.l.Thread returns a JavaThread* then that JavaThread must be protected by the TLH.

What am I missing?;;;","2023-04-06 01:28;shade;AFAIU the SMR machinery, TLH captures the current alive threads list, and keeps all threads on that list from terminating while TLH is in scope. But that list might not include the thread we ask to unpark? That's seems to be the whole problem here: we don't quite know if the asked-to-be-unparked thread is on TLH-protected list or not without explicitly checking for it, except for a few corner cases.

Looks to me that thread termination sequence is: detect no SMR conflicts (thread is not on any TLH-protected list) -> do some termination steps -> set set_thread(oop, nullptr) -> proceed with termination. Which means two cases:
  1. Seen thread(oop) == nullptr: we can argue the thread is dead, since the termination sequence is already past detecting the thread is dead, and there is no point in looking into the list. This is what the first block here does: https://github.com/openjdk/jdk/blob/44f33ad1a9617fc23864c9ba5f063b3fc2f1e18c/src/hotspot/share/runtime/threadSMR.cpp#L818-L823
  2. Seen thread(oop) != nullptr: the thread *looks* alive, but we might be just unlucky that the thread is currently terminating, and set_thread(oop, nullptr) had not been done yet. If we continue down this path, the termination sequence might delete the JavaThread* under our feet. So, we now need to figure if TLH is guarding this JavaThread* for us, i.e. if it is on its list. The only shortcut is asking for the current thread, which guarantees it is not currently terminating. Which is why we go into the checks here: https://github.com/openjdk/jdk/blob/44f33ad1a9617fc23864c9ba5f063b3fc2f1e18c/src/hotspot/share/runtime/threadSMR.cpp#L826-L833

Am I completely misreading what is going on here?;;;","2023-04-06 21:52;dholmes;> Looks to me that thread termination sequence is: detect no SMR conflicts (thread is not on any TLH-protected list) -> do some termination steps -> set set_thread(oop, nullptr) -> proceed with termination. 

set_thread(oop, nullptr) happens in ensure_join() which happens before Threads::remove which is where ThreadSMRSupport::remove_thread is called, after which the thread will no longer appear in any created TLH. So if we create the TLH first (which we do) and then ask the oop for the JavaThread and get a non-null result then that JavaThread is guarded by that TLH.;;;","2023-04-07 07:35;dcubed;[~dholmes] - Thanks for your last post. That was what I was writing from my research
last night. Your post is much more concise than what I was writing (as usual).

I'm still researching the history behind EnableThreadSMRExtraValidityChecks and
will comment again soon...;;;","2023-04-07 08:22;dcubed;The EnableThreadSMRExtraValidityChecks first made an appearance in the
""Thread-SMR (8167108)(phase2) big code review"" cycle. The change is credited
to gthornbr's CR, but I couldn't find an email documenting those code review
comments. I'm going to guess that these comments were made during an in
person code review at my house in Colorado.

The only other mentions of EnableThreadSMRExtraValidityChecks that I have
in 900+ emails are comments about the indenting being wrong in the globals.hpp
file. Those comments were from David Holmes so he at least saw the option in
its declaration/definition context way, way back in 2017. :-) Of course, that's just
one line of code in an XL code review so...

Okay, we added EnableThreadSMRExtraValidityChecks as a diagnostic option
with a default value of 'true'. Typically that means that we intended to change
the default value from 'true' to 'false' in a future release. I didn't find any other
bugs/RFEs that mention EnableThreadSMRExtraValidityChecks so I didn't file
a follow-up bug targeting a later release. That's an error on my part.

JDK-8167108 was integrated in jdk-10+36 (to use the new version style) on
2017.11.23 so this code has had a very, very long time to bake. I think we can
change the default of EnableThreadSMRExtraValidityChecks to 'false' and we
can do a little bit more...;;;","2023-04-07 13:13;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/13393
Date: 2023-04-07 20:08:11 +0000;;;","2023-04-07 13:13;dcubed;[~apangin] - Please test the patch in your environment:

https://github.com/openjdk/jdk/pull/13393

I used the attached test on my X64 MBP13, but I had to limit the thread count to 4000
or the test would blow up. I saw very little difference between baseline runs and runs
with '-XX:-EnableThreadSMRExtraValidityChecks', but that's probably because of the
machine I'm using today.

Update: I couple of tests are failing unexpectedly with the current patch:

- runtime/handshake/HandshakeWalkOneExitTest.java
- runtime/handshake/HandshakeDirectTest.java

Please hold off on testing this patch until I figure out this problem next week.
;;;","2023-04-10 13:09;dcubed;The v00 proposed fix in the PR includes a refactoring that adds an assertion:

--- a/src/hotspot/share/runtime/threadSMR.cpp
+++ b/src/hotspot/share/runtime/threadSMR.cpp
@@ -824,11 +824,22 @@ bool ThreadsListHandle::cv_internal_thread_to_JavaThread(jobject jthread,
   // Looks like a live JavaThread at this point.
 
   if (java_thread != JavaThread::current()) {
-    // jthread is not for the current JavaThread so have to verify
+    // jthread is not for the current JavaThread so we could verify
     // the JavaThread * against the ThreadsList.
-    if (EnableThreadSMRExtraValidityChecks && !includes(java_thread)) {
-      // Not on the JavaThreads list so it is not alive.
-      return false;
+    if (EnableThreadSMRExtraValidityChecks) {
+      // The java.lang.Thread's JavaThread* value is cleared by ensure_join()
+      // in the middle of the JavaThread's exit() call. The JavaThread removes
+      // itself from the ThreadsList at the end of the JavaThread's exit()
+      // call. Since we have a non-nullptr java_thread value here, we know
+      // that this ThreadsListHandle is protecting the JavaThread so this
+      // is optional verification against future changes.
+      bool is_on_list = includes(java_thread);
+      assert(is_on_list, ""java_thread="" INTPTR_FORMAT "" is not on ThreadsList(""
+             INTPTR_FORMAT "")"", p2i(java_thread), p2i(this->list()));
+      // Robustness check for non-ASSERT bits:
+      if (!is_on_list) {
+        return false;
+      }
     }
   }

In my Mach5 Tier1 testing, the following tests failed:

- runtime/handshake/HandshakeWalkOneExitTest.java
  - failed on linux-aarch64-debug, linux-x64-debug, macosx-aarch64-debug,
    and macosx-x64-debug
- runtime/handshake/HandshakeDirectTest.java
  - failed only on linux-aarch64-debug

I was able to reproduce the runtime/handshake/HandshakeWalkOneExitTest.java
on my macosx-x64 MBP13 and on my linux-x64 server. On linux-x64, I was able
to reproduce it with both 'fastdebug' and 'slowdebug' bits.

I'm attaching an example set of logs from a recent slowdebug failure:

$ unzip -l 8305670-new-assert-failure.zip
Archive:  8305670-new-assert-failure.zip
  Length      Date    Time    Name
---------  ---------- -----   ----
    41833  2023-04-10 15:46   test_failures.2023-04-10-154316/HandshakeWalkOneExitTest.jtr.slowdebug
   212918  2023-04-10 15:59   test_failures.2023-04-10-154316/hs_err_pid1011815.log
---------                     -------
   254751                     2 files;;;","2023-04-10 14:13;dcubed;Normally we don't include detailed test failure info for an in progress fix,
but I'm going to do so in order to explain why this code doesn't quite
work the way that we think it does.

First here's the failing assertion:

#  Internal Error (/work/shared/bug_hunt/8305670_for_jdk21.git/open/src/hotspot/share/runtime/threadSMR.cpp:837), pid=1011815, tid=1011969
#  assert(is_on_list) failed: java_thread=0x00007fcfd80267f0 is not on ThreadsList(0x00007fcfdc003cc0)
#
# JRE version: Java(TM) SE Runtime Environment (21.0) (slowdebug build 21-internal-LTS-2023-04-10-1532144.dcubed...)
# Java VM: Java HotSpot(TM) 64-Bit Server VM (slowdebug 21-internal-LTS-2023-04-10-1532144.dcubed..., mixed mode, sharing, tiered, compressed oops, compressed class ptrs, g1 gc, linux-amd64)
# Problematic frame:
# V  [libjvm.so+0x149b0e3]  ThreadsListHandle::cv_internal_thread_to_JavaThread(_jobject*, JavaThread**, oopDesc**)+0x18d

And here's the crashing thread's stack trace:

---------------  T H R E A D  ---------------

Current thread (0x00007fcfd802ac70):  JavaThread ""Thread-1"" [_thread_in_vm, id=1011969, stack(0x00007fd02a794000,0x00007fd02a895000)] _threads_hazard_ptr=0x00007fcfdc003cc0, _nested_threads_hazard_ptr_cnt=0

Stack: [0x00007fd02a794000,0x00007fd02a895000],  sp=0x00007fd02a893670,  free space=1021k
Native frames: (J=compiled Java code, j=interpreted, Vv=VM code, C=native code)
V  [libjvm.so+0x149b0e3]  ThreadsListHandle::cv_internal_thread_to_JavaThread(_jobject*, JavaThread**, oopDesc**)+0x18d  (threadSMR.cpp:837)
V  [libjvm.so+0x15d1237]  WB_HandshakeWalkStack+0x1a8  (whitebox.cpp:2196)
J 203  jdk.test.whitebox.WhiteBox.handshakeWalkStack(Ljava/lang/Thread;Z)I (0 bytes) @ 0x00007fd043f93bb5 [0x00007fd043f93ac0+0x00000000000000f5]
j  HandshakeWalkOneExitTest$1.run()V+27
j  java.lang.Thread.runWith(Ljava/lang/Object;Ljava/lang/Runnable;)V+5 java.base@21-internal
j  java.lang.Thread.run()V+19 java.base@21-internal
v  ~StubRoutines::call_stub 0x00007fd0437b6d21
V  [libjvm.so+0xd4ebce]  JavaCalls::call_helper(JavaValue*, methodHandle const&, JavaCallArguments*, JavaThread*)+0x630  (javaCalls.cpp:415)
V  [libjvm.so+0x1234260]  os::os_exception_wrapper(void (*)(JavaValue*, methodHandle const&, JavaCallArguments*, JavaThread*), JavaValue*, methodHandle const&, JavaCallArguments*, JavaThread*)+0x36  (os_linux.cpp:4833)
V  [libjvm.so+0xd4e59b]  JavaCalls::call(JavaValue*, methodHandle const&, JavaCallArguments*, JavaThread*)+0x3d  (javaCalls.cpp:329)
V  [libjvm.so+0xd4d5e0]  JavaCalls::call_virtual(JavaValue*, Klass*, Symbol*, Symbol*, JavaCallArguments*, JavaThread*)+0x1ba  (javaCalls.cpp:185)
V  [libjvm.so+0xd4d6e9]  JavaCalls::call_virtual(JavaValue*, Handle, Klass*, Symbol*, Symbol*, JavaThread*)+0x95  (javaCalls.cpp:191)
V  [libjvm.so+0xe77bab]  thread_entry(JavaThread*, JavaThread*)+0x8e  (jvm.cpp:2918)
V  [libjvm.so+0xd68f6c]  JavaThread::thread_main_inner()+0x168  (javaThread.cpp:717)
V  [libjvm.so+0xd68e01]  JavaThread::run()+0x1d7  (javaThread.cpp:702)
V  [libjvm.so+0x1491339]  Thread::call_run()+0x1b9  (thread.cpp:224)
V  [libjvm.so+0x122a012]  thread_native_entry(Thread*)+0x1ad  (os_linux.cpp:740)
Java frames: (J=compiled Java code, j=interpreted, Vv=VM code)
J 203  jdk.test.whitebox.WhiteBox.handshakeWalkStack(Ljava/lang/Thread;Z)I (0 bytes) @ 0x00007fd043f93b42 [0x00007fd043f93ac0+0x0000000000000082]
j  HandshakeWalkOneExitTest$1.run()V+27
j  java.lang.Thread.runWith(Ljava/lang/Object;Ljava/lang/Runnable;)V+5 java.base@21-internal
j  java.lang.Thread.run()V+19 java.base@21-internal
v  ~StubRoutines::call_stub 0x00007fd0437b6d21

Our crashing thread (""Thread-1"") is busy abusing the worker threads in
the runtime/handshake/HandshakeWalkOneExitTest.java test program
using the WB_HandshakeWalkStack() testing API. WB_HandshakeWalkStack()
is a whitebox API that takes a jthread, converts the jthread into a JavaThread*,
and tries to handshake with the JavaThread* and walks the JavaThread's stack.
Pretty simple stuff.

WB_HandshakeWalkStack() uses ThreadsListHandle::cv_internal_thread_to_JavaThread()
to convert the jthread parameter into a JavaThread*. And that's where we run
into the new assert().

Let's repeat that assertion failure:

assert(is_on_list) failed: java_thread=0x00007fcfd80267f0 is not on ThreadsList(0x00007fcfdc003cc0)

so 0x00007fcfd80267f0 isn't found on the specified ThreadsList.
Let's check the hs_err_pid:

Threads class SMR info:
_java_thread_list=0x00007fcfc4001000, length=17, elements={
0x00007fd05402df50, 0x00007fd05459a8d0, 0x00007fd05459c0b0, 0x00007fd05459df00,
0x00007fd05459f630, 0x00007fd0545a0d60, 0x00007fd0545a2ad0, 0x00007fd0545ac330,
0x00007fcff803e270, 0x00007fcffc06d590, 0x00007fcffc06e940, 0x00007fcffc06fd70,
0x00007fd054628e90, 0x00007fd054643490, 0x00007fd054675fc0, 0x00007fcfd802ac70,
0x00007fcfd80267f0
}

The *last* entry in _java_thread_list matches '0x00007fcfd80267f0'!
What the heck? Oh wait, the assertion also reported the ThreadsList
address that we searched with a value of: 0x00007fcfdc003cc0

And that ThreadsList doesn't match the current _java_thread_list
which is 0x00007fcfc4001000.

So our JavaThread (0x00007fcfd80267f0) is on the current ThreadsList,
but is NOT on an older ThreadsList. Since 0x00007fcfd80267f0 is in the
last slot of the current ThreadsList, that indicates that 0x00007fcfd80267f0
is a new entry added to a new copy of the previous ThreadsList which is
likely the one that we searched (0x00007fcfdc003cc0). We could check
the _to_delete_list, but that's a bit of work that we don't have to do (yet,
if at all).

Let's check the Events in the hs_err_pid file:

Event: 1.089 Thread 0x00007fcfd80267f0 Thread exited: 0x00007fcfd80267f0
Event: 1.089 Thread 0x00007fcfd80267f0 Thread added: 0x00007fcfd80267f0
Event: 1.090 Thread 0x00007fcfd80267f0 Thread exited: 0x00007fcfd80267f0
Event: 1.090 Thread 0x00007fcfd80267f0 Thread added: 0x00007fcfd80267f0
Event: 1.091 Thread 0x00007fcfd80267f0 Thread exited: 0x00007fcfd80267f0
Event: 1.091 Thread 0x00007fcfd80267f0 Thread added: 0x00007fcfd80267f0

It looks like our JavaThread (0x00007fcfd80267f0) has been reused quite a
few times in the last set of events tracked before the VM crashed. It always
surprises me when I see a JavaThread* being used over and over, but that's
pretty normal for malloc'ed and free'ed data structures...

So let's take a look at what WB_HandshakeWalkStack() is doing:

src/hotspot/share/prims/whitebox.cpp:
  } else if (thread_handle != nullptr) {
    ThreadsListHandle tlh;
    JavaThread* target = nullptr;
    bool is_alive = tlh.cv_internal_thread_to_JavaThread(thread_handle, &target, nullptr);
    if (is_alive) {
      Handshake::execute(&tsc, &tlh, target);
    }
  }

So WB_HandshakeWalkStack() is passed a 'thread_handle' that refers
to a JavaThread and we pass it to cv_internal_thread_to_JavaThread()
to convert that 'thread_handle'  into a JavaThread*. We already created
the ThreadsListHandle (tlh) that doesn't include the JavaThread* that we
think we're converting, but we don't know that yet. The JavaThread* is
not in the list in 'tlh' because that JavaThread* has exited. We're just the
observer so we don't know that yet.

So let's dive into the cv_* function and see the racy details...

bool ThreadsListHandle::cv_internal_thread_to_JavaThread(jobject jthread,
                                                         JavaThread ** jt_pp,
                                                         oop * thread_oop_p) { 
  assert(this->list() != nullptr, ""must have a ThreadsList"");
  assert(jt_pp != nullptr, ""must have a return JavaThread pointer""); 
  // thread_oop_p is optional so no assert()

  // The JVM_* interfaces don't allow a null thread parameter; JVM/TI
  // allows a null thread parameter to signify ""current thread"" which
  // allows us to avoid calling cv_external_thread_to_JavaThread().
  // The JVM_* interfaces have no such leeway.

dcubed: We convert our 'jthread' into a 'thread_oop'... Our 'jthread'
dcubed: refers to a dead JavaThread, but there's no verification of
dcubed: the resolution from jthread -> oop.
  oop thread_oop = JNIHandles::resolve_non_null(jthread);
  // Looks like an oop at this point.
  if (thread_oop_p != nullptr) {
    // Return the oop to the caller; the caller may still want
    // the oop even if this function returns false.
    *thread_oop_p = thread_oop;
  }

dcubed: We use the thread_oop to query the java.lang.Thread
dcubed: object in Java land and fetch the JavaThread* that's
dcubed: stored there. Above I mentioned that our 'jthread' and
dcubed: our 'thread_oop' refer to a dead JavaThread so when
dcubed: ask for the JavaThread* we should get nullptr which was
dcubed: set by ensure_join() in the JavaThread::exit() code path.
dcubed: However, we have a newly running JavaThread and it
dcubed: has set a new JavaThread* value in the java.lang.Thread
dcubed: object that the thread_oop refers to. In a sense, it appears
dcubed: that the same JavaThread has been resurrected, but it has
dcubed: a new thread name so it's not really the same JavaThread.

  JavaThread *java_thread = java_lang_Thread::thread(thread_oop);

dcubed: It is this non-nullptr 'java_thread' value that allows us to get
dcubed: to the new assertion which fails because the JavaThread*
dcubed: is NOT in the ThreadsList that we're searching.
  if (java_thread == nullptr) {
    // The java.lang.Thread does not contain a JavaThread * so it has
    // not yet run or it has died.
    return false;
  }
  // Looks like a live JavaThread at this point.

  if (java_thread != JavaThread::current()) {
dcubed: So our 'java_thread' doesn't match the current JavaThread so we
dcubed: head right into the new assertion from here.

    // jthread is not for the current JavaThread so we could verify
    // the JavaThread * against the ThreadsList.
    if (EnableThreadSMRExtraValidityChecks) {
      // The java.lang.Thread's JavaThread* value is cleared by ensure_join()
      // in the middle of the JavaThread's exit() call. The JavaThread removes
      // itself from the ThreadsList at the end of the JavaThread's exit()
      // call. Since we have a non-nullptr java_thread value here, we know
      // that this ThreadsListHandle is protecting the JavaThread so this
      // is optional verification against future changes. 
dcubed: The reason that the code without the assertion ""works"" is
dcubed: because this 'includes()' check will return 'false' because the
dcubed: ThreadsList we're searching doesn't contain the JavaThread*
dcubed: so that indicates that the 'java_thread' is dead (at least at the
dcubed: time that the ThreadsList was created).
      bool is_on_list = includes(java_thread);
      assert(is_on_list, ""java_thread="" INTPTR_FORMAT "" is not on ThreadsList(""
             INTPTR_FORMAT "")"", p2i(java_thread), p2i(this->list()));
      // Robustness check for non-ASSERT bits:
      if (!is_on_list) {
dcubed: So this return 'false' tells the caller that we have a bad 'jthread'
dcubed: because the associated JavaThread has died.
        return false; 
      }
    }
  }

  // Return a live JavaThread that is ""protected"" by the
  // ThreadsListHandle in the caller.
  *jt_pp = java_thread;
  return true;
}


Okay that was gnarly. There is a part of this I don't quite grok.

In this code path, we have a 'jthread' that got us to a 'thread_oop' and
that 'thread_oop' refers to a java.lang.Thread object. On the thread
creation code path, we have created a new java.lang.Thread object
and we populated that java.lang.Thread object with a 'JavaThread*'
that happens to be recycled. I can accept that.

What I don't grok is how our observer thread's 'thread_oop' gets us
to the new 'java.lang.Thread' object where we can pickup the same
'JavaThread*'. Did the 'java.lang.Thread' object also get recycled?
I don't know GC algorithms so I don't know if that is possible or if
the question even makes sense.;;;","2023-04-10 15:01;dcubed;Hmmm... I had forgotten that we converted the java.lang.Thread oop that
we're holding in the JavaThread* into an OopHandle. Those OopHandles
are queued up on the ServiceThread as part of the JavaThread destructor
to be cleaned up by the ServiceThread when it gets the chance...

So the java.lang.Thread oop does live longer that the JavaThread* itself
and I wonder what happens if our observer thread queries one of these
via its 'jthread' -> 'thread_oop' connection...;;;","2023-04-10 15:21;apangin;I suppose the issue happens not with an exited thread, but with a not-yet-started one.

'hst' thread in the test accesses 'threads' array which is recreated from scratch multiple times. At some point it may contain a java.lang.Thread object which is already constructed but not yet started. This thread is started after ThreadListHandle in WB_HandshakeWalkStack is created, but before java_lang_Thread::thread(thread_oop) is called.

Does this sound like a plausible explanation? (I haven't verified it yet);;;","2023-04-10 19:20;dholmes;I really struggled to try and follow that explanation. A JavaThread can't be recycled until it no longer appears on any threads-list. A thread oop can't be storing a non-null JavaThread address after the JavaThread has exited/terminated died. If either of those statements is appearing to not be true then we have a bug somewhere.;;;","2023-04-11 10:10;dcubed;[~apangin] - Interesting idea. I've been focused on the JavaThread exit code paths
that I hadn't much thought about the JavaThread start code paths. Here's [~rehn]'s
description for the two tests:

 * @test HandshakeWalkOneExitTest
 * @summary This test tries to stress the handshakes with new and exiting threads

and

 * @test HandshakeDirectTest
 * @bug 8240918
 * @summary This test tries to stress direct handshakes between threads while suspending them.

HandshakeWalkOneExitTest is the one that is most reproducible for me...

[~dholmes] - ""... then we have a bug somewhere.""
That's exactly what I'm trying to figure out. Things are not quite working
the way I think they should and that's why the assertion is firing. Of course,
based on what [~apangin] wrote, that assertion might be invalid for the
early startup of new threads. I have to investigate from that angle...;;;","2023-04-11 12:59;dcubed;So I've taken a close look at the starting JavaThread case and I agree that
is the case that explains my race observations with the new assert() in the
comments above. [~apangin] - thanks for sending me down the proper path.

So there is no way to definitively distinguish that we're in the newly starting
JavaThread case and thereby keep the new assertion (with a bail out for the
newly starting JavaThread case). So while I think we've adequately proven
that the exiting JavaThread case doesn't require the ThreadsList search, we
have to do the search for the newly starting JavaThread case.

I'm going to remove the EnableThreadSMRExtraValidityChecks option,
remove the new assertion and refine and update the comments. I'm also
going to look at speeding up the 'includes()' function. It'll be a little while
before I take the PR back out of draft mode.;;;","2023-04-11 13:19;rehn;Nice one.

eetop may only be non-null while on ThreadsList.
When we start we set it before we are on it.
I think this maybe fixes it:

diff --git a/src/hotspot/share/runtime/javaThread.cpp b/src/hotspot/share/runtime/javaThread.cpp
index 9eee1028c86..7f835065891 100644
--- a/src/hotspot/share/runtime/javaThread.cpp
+++ b/src/hotspot/share/runtime/javaThread.cpp
@@ -1658,3 +1658,2 @@ void JavaThread::prepare(jobject jni_thread, ThreadPriority prio) {
   set_threadOopHandles(thread_oop());
-  java_lang_Thread::set_thread(thread_oop(), this);
 
@@ -1674,2 +1673,3 @@ void JavaThread::prepare(jobject jni_thread, ThreadPriority prio) {
   Threads::add(this);
+  java_lang_Thread::set_thread(thread_oop(), this);
 }


Writer do:
Add JavaThread to ThreadsList
Publish by setting eetop to JavaThread
...
De-publish by setting eetop to NULL (ensure_join())
Remove JavaThread from ThreadsList

Reader do:
Take a ThreadsList
Read eetop, if non-null it should be on that list;;;","2023-04-11 13:29;dcubed;[~rehn] - Very interesting idea. I'll take a look...;;;","2023-04-11 14:36;dcubed;[~rehn] - Sorry the race is still there. The creation of the ThreadsListHandle
in the observer can be followed by a pause in the observer such that the
target JavaThread has been added to the system ThreadsList _and_ has
published its eetop field in the java.lang.Thread so when the observer thread
resumes, it will see a non-nullptr value from eetop in java.lang.Thread so
the observer will think that the JavaThread is on the ThreadsList created
in the caller, but it is not.;;;","2023-04-11 15:07;dholmes;I'm trying to read between the lines here but am struggling a bit. What exactly is the problematic scenario for thread startup?

The JavaThread <-> j.l.Thread two-way connection should be established before the new JavaThread is published on the threads-list. That ensures it is fully initialized before becoming visible to other code that interacts with threads. Top me this is a desired invariant and not something to mess with.;;;","2023-04-11 15:19;dcubed;An observer can create a ThreadsListHandle that does not include a newly started
thread that hasn't been added to the system ThreadsList yet. However, by the time
that the observer code gets to cv_internal_thread_to_JavaThread(), the newly created
JavaThread has passed all the conditions that we can check inside that function to see
that the java_thread we're trying to convert is/was new. So if the observer thread's call
into cv_internal_thread_to_JavaThread() tries to assert that the newly started thread is
on ""this"" ThreadsList, that will fail because it does not contain the newly created
JavaThread because the ThreadsList was created before that JavaThread got going...;;;","2023-04-11 15:30;dholmes;Right got it. If the thread was already started then it can't have terminated but it is possible to find a newly starting thread that is not in the TLH. 

So suppose this newly starting thread is short-lived and runs to completion, it could in fact terminate and be deleted while the code with the TLH tries to operate on it!;;;","2023-04-11 17:34;dholmes;I think we may be able to address the startup issue by checking the state of the j.l.Thread before we create the TLH. If the Thread is in threadStatus state NEW then it is unstarted; otherwise we create the TLH and then extract the JavaThread from eetop, now guaranteed that the JavaThread had to be captured by the TLH. Unfortunately this means all callers of cv_internal_thread_to_JavaThread have to perform this check (and cv_internal_thread_to_JavaThread should assert threadStatus != NEW). This really messes up the intent to have all such logic encapsulated by the TLH, but I don't see any other way (other than continue to check tlh.includes()).;;;","2023-04-11 18:11;apangin;I had a similar idea, but realized it will not work with a naive implementation, since the thread status is set to RUNNABLE before the thread actually starts:

void Thread::start(Thread* thread) {
  // Start is different from resume in that its safety is guaranteed by context or
  // being called from a Java method synchronized on the Thread object.
  if (thread->is_Java_thread()) {
    // Initialize the thread state to RUNNABLE before starting this thread.
    // Can not set it after the thread started because we do not know the
    // exact thread state at that time. It could be in MONITOR_WAIT or
    // in SLEEPING or some other state.
    java_lang_Thread::set_thread_status(JavaThread::cast(thread)->threadObj(),
                                        JavaThreadStatus::RUNNABLE);
  }
  os::start_thread(thread);
}

Alternatively, we could check 'eetop' field twice: the first time before TLH creation, and the second time afterwards. This requires changing the order of Threads::add() and java_lang_Thread::set_thread() calls as [~rehn] suggested above. However, I'm not sure this change is correct - need to check carefully if this breaks some other invariant.;;;","2023-04-11 18:45;dholmes;I could have sworn the thread set its own state to RUNNABLE - drat! I can't immediately see why it can't set its own state in JavaThread::run ??

I'm very wary about changing the order of Threads::add and set_thread() as I think it would expose a partially initialized JavaThread that would then require all the native thread processing code to always have to watch for a null threadObj. I think it would take a long time for bugs to show up there.;;;","2023-04-11 18:50;dholmes;But thinking more. Thread::start is called after prepare() which means after Threads:add(). So if we see the target thread is RUNNABLE it must be on the main threads-list, so if we create the TLH after that then we must still be guaranteed to capture the newly started JavaThread.;;;","2023-04-11 19:11;apangin;[~dholmes] Seems you are right. Checking thread status before TLH should work then.;;;","2023-04-11 23:30;rehn;I don't think it's a good idea to use a Java (j.l.Thread.State) level state to determine if a JavaThread* is on a ThreadsList without walking it.

I rather do the double read of eetop.

;;;","2023-04-12 02:14;dholmes;> I don't think it's a good idea to use a Java (j.l.Thread.State) level state to determine if a JavaThread* is on a ThreadsList without walking it.

What are you concerned about? We know that once a Thread moves out of the NEW state then it's JavaThread has been added to the main threads-list, so any TLH created thereafter will capture that JavaThread unless it has terminated - which is also determined by examining the state of the j.l.Thread (just a different bit of state).

I don't think it is a good idea to reorder Threads::add and set_thread() as noted above.;;;","2023-04-12 03:49;rehn;j.l.Thread.State represent the state a of thread in the Java virtual machine.
This have no direct relationship with the lifetime of JavaThread* and ThreadsList.

The point of ""once a Thread moves out of the NEW"" can be at anytime from a ThreadsList/JavaThread* POV, it just happen to be correct at the moment.

If we use it, we involve yet another variable in the thread lifecycle, we already have to many.
Therefore I prefer using those we already have.

EDIT:
If we need we could do SENTINEL => JavaThread* => NULL, but yes that involves the reorder.
I don't see directly why that is a bad idea?

Anyhow that is a double read of eetop, one before TLH and one after.

(boolean alive() could check TERMINATED instead.)





;;;","2023-04-12 05:45;dholmes;I totally disagree sorry - the state of a j.l.Thread and its associated JavaThread are tightly interwined. The thread startup process is not something that fluctuates or is likely to change.

The reorder is potentially bad because it can expose a JavaThread that has a null threadObj and that is something that is only expected in very specific circumstances (primarily JNI attaching threads).;;;","2023-04-12 06:39;rehn;If we remove the j.l.Thread.State, the internal VM works just fine. There no code at all inside the VM which uses that state to take any action.

Be move is from just above Threads::add(this); to under it, so exposure is the same.


;;;","2023-04-12 14:07;dcubed;When I did the experiment to move ""java_lang_Thread::set_thread()""
after ""Threads::add()"", it had to be done in two places:

--- a/src/hotspot/share/runtime/javaThread.cpp
+++ b/src/hotspot/share/runtime/javaThread.cpp
@@ -1656,7 +1656,6 @@ void JavaThread::prepare(jobject jni_thread, ThreadPriority prio) {
   assert(InstanceKlass::cast(thread_oop->klass())->is_linked(),
          ""must be initialized"");
   set_threadOopHandles(thread_oop());
-  java_lang_Thread::set_thread(thread_oop(), this);

   if (prio == NoPriority) {
     prio = java_lang_Thread::priority(thread_oop());
@@ -1672,6 +1671,9 @@ void JavaThread::prepare(jobject jni_thread, ThreadPriority prio) {
   // added to the Threads list for if a GC happens, then the java_thread oop
   // will not be visited by GC.
   Threads::add(this);
+  // Publish the JavaThread* in java.lang.Thread after the JavaThread* is
+  // on a ThreadsList.
+  java_lang_Thread::set_thread(thread_oop(), this);
 }

 oop JavaThread::current_park_blocker() {
@@ -2094,10 +2096,6 @@ void JavaThread::start_internal_daemon(JavaThread* current, JavaThread* target,

   MutexLocker mu(current, Threads_lock);

-  // Initialize the fields of the thread_oop first.
-
-  java_lang_Thread::set_thread(thread_oop(), target); // isAlive == true now
-
   if (prio != NoPriority) {
     java_lang_Thread::set_priority(thread_oop(), prio);
     // Note: we don't call os::set_priority here. Possibly we should,
@@ -2110,6 +2108,9 @@ void JavaThread::start_internal_daemon(JavaThread* current, JavaThread* target,
   target->set_threadOopHandles(thread_oop());

   Threads::add(target); // target is now visible for safepoint/handshake
+  // Publish the JavaThread* in java.lang.Thread after the JavaThread* is
+  // on a ThreadsList.
+  java_lang_Thread::set_thread(thread_oop(), target); // isAlive == true now
   Thread::start(target);
 }

And I didn't play with this patch a whole lot because it didn't fix the
racing issue. I'll take a look the 11 comments posted since I last touched
this bug last night and see how I want to proceed.

My current gut feel is that we (me included) are mulling on adding even more
brittle logic to potentially solve a performance issue. Hoops and checks and
complicated comments to explain it all. I'm starting to wonder if I should just
bite the bullet and write the code to speed up ThreadsListHandle.contains()...;;;","2023-04-12 14:54;dholmes;> Be move is from just above Threads::add(this); to under it, so exposure is the same.

I don't know what you mean by this. There is no exposure with the current code. As soon as you publish the thread via Threads:add it can be found by other logic which can then see a null threadObj. This is a risky change and not necessary.;;;","2023-04-13 00:39;rehn;1: j.l.Thread is created, eetop = NULL. This is globally visible.
2: We create a JavaThread to start this Thread.
3: We store eetop = JavaThread*. JavaThread* is now globally visible via eetop, but still not on ThreadsList. Hence we cannot dereference it.
4: We add JavaThread to ThreadsList.

If we swap 3<->4

3: We add JavaThread to ThreadsList. JavaThread* is now globally visible via ThreadsList, but not via eetop. We can deference it since it is on ThreadsList.
4: We store eetop = JavaThread*.

Publishing a pointer which cannot be validated is not so nice. Adding to ThreadsList before publishing seem safer and nicer.
And there is no change in visibility, both cases gets publish in step 3, but via Thread obj vs ThreadsList.

That is what I mean.
;;;","2023-04-13 01:18;rehn;In JNI case we seem to already do it this way, we first create JavaThread and Threads:add(), then we create Thread obj and set eetop.
So we already have the invariant with JavaThread on ThreadsList, but eetop still NULL.;;;","2023-04-13 02:39;rehn;[~dcubed] https://github.com/openjdk/jdk/compare/master...robehn:jdk:double-check?expand=1
Maybe I missed something again but above seems to work for me.
Since we know eetop is not null before we create ThreadsList, which means it must still be there if it's still non null.;;;","2023-04-13 05:26;dholmes;[~rehn] Apologies. I was reading:

java_lang_Thread::set_thread(thread_oop(), this);

as the setting of threadObj (and wrote that 3 times above with no one calling me out for it :( ), but it is the setting of eetop as you note.

I would still be wary of exposing the JavaThread in the Threads-list when the j.l.Thread <->JavaThread connection is only half in place (though at worst I would anticipate an asertion failure). But you are right that we already similarly expose it via the eetop field in a way that is in fact dangerous as any TLH we create to guard it won't in fact do so! That is a significant bug in the existing code!;;;","2023-04-13 05:41;rehn;[~dholmes] No my bad, I need to explain better and read more carefully, sorry.;;;","2023-04-13 11:02;dcubed;I'm having API indigestion with the idea that we need to add a check for
the JavaThread's thread state not being ""NEW"" before we create a
ThreadsListHandle. That's just down right ugly... :-)

Here's our description of the Thread-SMR API from:

src/hotspot/share/runtime/threadSMR.hpp:

// Thread Safe Memory Reclamation (Thread-SMR) support.
//
// ThreadsListHandles are used to safely perform operations on one or more
// threads without the risk of the thread or threads exiting during the
// operation. It is no longer necessary to hold the Threads_lock to safely
// perform an operation on a target thread.
//
// There are several different ways to refer to java.lang.Thread objects
// so we have a few ways to get a protected JavaThread *:
//
// JNI jobject example:
//   jobject jthread = ...;
//   :
//   ThreadsListHandle tlh;
//   JavaThread* jt = nullptr;
//   bool is_alive = tlh.cv_internal_thread_to_JavaThread(jthread, &jt, nullptr);
//   if (is_alive) {
//     :  // do stuff with 'jt'...
//   }
//
// JVM/TI jthread example:
//   jthread thread = ...;
//   :
//   JavaThread* jt = nullptr;
//   ThreadsListHandle tlh;
//   jvmtiError err = JvmtiExport::cv_external_thread_to_JavaThread(tlh.list(), thread, &jt, nullptr);
//   if (err != JVMTI_ERROR_NONE) {
//     return err;
//   }
//   :  // do stuff with 'jt'...
//
// JVM/TI oop example (this one should be very rare):
//   oop thread_obj = ...;
//   :
//   JavaThread *jt = nullptr;
//   ThreadsListHandle tlh;
//   jvmtiError err = JvmtiExport::cv_oop_to_JavaThread(tlh.list(), thread_obj, &jt);
//   if (err != JVMTI_ERROR_NONE) {
//     return err;
//   }
//   :  // do stuff with 'jt'...
//
// A JavaThread * that is included in the ThreadsList that is held by
// a ThreadsListHandle is protected as long as the ThreadsListHandle
// remains in scope. The target JavaThread * may have logically exited,
// but that target JavaThread * will not be deleted until it is no
// longer protected by a ThreadsListHandle.

[~rehn] - Thanks for changeset! I will check it out in a few minutes.;;;","2023-04-13 13:22;dcubed;[~rehn] - I've verified that your patch also prevents the following two tests from crashing:

    runtime/handshake/HandshakeWalkOneExitTest.java
    runtime/handshake/HandshakeDirectTest.java

I'm going to take a closer look at your patch and merge some of my
comment changes with your changes (if appropriate).;;;","2023-04-13 15:59;dholmes;I think we perhaps should split out the fix to prevent eetop from exposing a JavaThread that is not on a Threads-list and so cannot be guarded by a TLH. After that we can re-reason about the need for the includes() call in this issue and address that.;;;","2023-04-14 11:11;dcubed;[~dholmes] - Perhaps a split would be useful, but the only reason for making the
changes to when we save the JavaThread* in the java.lang.Thread object is because
we want to speed up cv_internal_thread_to_JavaThread(). If we aren't trying to add
a quick_mode to cv_internal_thread_to_JavaThread(), then we don't have to do
anything to when we save the JavaThread* in the java.lang.Thread object.

I'm wrapping up the merge of my (mostly comments) work with [~rehn]'s quick_mode
work and then I'm going to do more testing before spinning up a new PR. I'm going to
withdraw the old PR to avoid confusion.

P.S. Yes, I very much dislike the ""eetop"" name for the field where we store the
JavaThread* in the java.lang.Thread object. For some reason, that name has no
meaning to me at all.;;;","2023-04-15 22:56;dholmes;[~dcubed] Robbin has identified a bug with the existing code due to allowing the JavaThread* to escape via eetop before it has been added to the threads-list. That needs fixing independent of the performance issue with checking includes(). As such it would be better to fix it under its own issue.

BTW eetop -> ""execution environment top"" from classic VM days - JDK 1.0 (and likely earlier). I suspect over the years there have been ""tools"" that would peek at this field to gain access to the underlying VM object and so renaming it would have been problematic;;;","2023-04-16 15:48;dholmes;Ah I see my mistake now. The issue Robbin found only becomes a problem if we don't check includes() inside cv_internal_thread_to_JavaThread. There are a number of other places where the JavaThread is extracted from eetop but they also seem to be correctly protected one way or another.;;;","2023-04-18 14:24;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/13519
Date: 2023-04-18 21:09:54 +0000;;;","2023-04-19 15:04;dcubed;[~apangin] - We're having trouble reproducing improvements with the current
patch in our environments relative to 8u371. Please provide more exact
version info for JDK8u and JDK21 and for the machines on which you've
seen this issue and the improvement.;;;","2023-04-19 16:02;apangin;The issue is observed on ARM64 hardware: for instance, Ampere A1 machines in Oracle Cloud.

$ uname -a
Linux arm1 5.15.0-1033-oracle #39-Ubuntu SMP Mon Apr 3 14:10:58 UTC 2023 aarch64 aarch64 aarch64 GNU/Linux

$ /usr/lib/jvm/java-8-openjdk-arm64/bin/java -version
openjdk version ""1.8.0_362""
OpenJDK Runtime Environment (build 1.8.0_362-8u362-ga-0ubuntu1~22.04-b09)
OpenJDK 64-Bit Server VM (build 25.362-b09, mixed mode)

$ jdk-21/bin/java -version
openjdk version ""21-ea"" 2023-09-19
OpenJDK Runtime Environment (build 21-ea+18-1480)
OpenJDK 64-Bit Server VM (build 21-ea+18-1480, mixed mode, sharing);;;","2023-04-20 10:40;dcubed;[~apangin] - Thanks for the info. [~ecaspole]'s reply isn't visible because it contains
Oracle internal URLs. The summary is that he's adapted the sample program into
a JMH and is doing testing on our performance machines.;;;","2023-05-03 13:33;dcubed;Mach5 test results for the v05 version of the PR which is baselined on jdk-21+20
and includes the dependent patches for JDK-8307067 and JDK-8307068:

Mach5 Tier1
- no failures

Mach5 Tier2
- no failures

Mach5 Tier3
- no failures

Mach5 Tier4
- no failures

Mach5 Tier5
- 1 known, unrelated test failure:
  - java/lang/Thread/virtual/HoldsLock.java#id0 failed due to JDK-8305919

Mach5 Tier6
- no failures

Mach5 Tier7
- no failures

Mach5 Tier8
- 2 known, unrelated test failures:
    - vmTestbase/runtime/jni/LoadTests/LoadTests.java failed due to JDK-8306754
    - java/lang/Thread/virtual/HoldsLock.java#id0 failed due to JDK-8305919;;;","2023-05-03 13:38;dcubed;This bug fix (JDK-8305670) depends on the following bug fix:

    JDK-8307068 store a JavaThread* in the java.lang.Thread object after the JavaThread* is added to the main ThreadsList

in order to function properly. If this bug fix (JDK-8305670) is
backported, then JDK-8307068 must also be backported.;;;","2023-05-10 11:49;dcubed;Mach5 test results for the v07 version of the PR which is baselined on jdk-21+20
and includes the dependent patches for JDK-8307067 and JDK-8307068:

Mach5 Tier1:
- no failures

Mach5 Tier2:
- no failures

Mach5 Tier3:
- no failures 

I'm about to rebase the group of patches to the latest jdk/jdk repo in
preparation for possible integration.;;;","2023-05-13 07:47;dukebot;Changeset: f030937a
Author:    Daniel D. Daugherty <dcubed@openjdk.org>
Date:      2023-05-13 14:44:57 +0000
URL:       https://git.openjdk.org/jdk/commit/f030937a51b95dde33ce33537ee830153b2c3b56
;;;","2023-07-20 05:27;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/1604
Date: 2023-07-20 12:22:34 +0000;;;","2023-07-20 22:31;goetz;Fix request [17u]

I backport this for parity with 17.0.9-oracle.
Medium risk
Trivial resolve needed.
SAP nightly testing passed. ;;;"
PPC: Non-Top Interpreted frames should be independent of ABI_ELFv2,JDK-8305668,5097984,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,rrich,rrich,rrich,2023-04-05 10:20,2023-06-05 08:34,2023-10-01 09:56,2023-04-18 00:01,,,,,,,21,hotspot,,0,jdk20u-fix-request,jdk20u-fix-SQE-ok,jdk20u-fix-yes,ppc,,,,,,,,,,"Parent interpreted java frames depend on `ABI_ELFv2` (see `parent_ijava_frame_abi`). This seems to be unnecessary since compiled java frames don't depend on `ABI_ELFv2` either.

On big endian systems (where `ABI_ELFv2` is not defined) this has 2 negative implications. (1) Parent frames are larger than needed because they contain 2 reserved words. (2) the definition of `metadata_words` does not match the size of parent interpreted frames which causes issues with vm continuations.

(2) causes crashes when using virtual threads on big endian systems. For top interpreted Java frames (`top_ijava_frame_abi`) it is ok to depend on `ABI_ELFv2` because the top frame is never frozen as it is always the frame of `vmIntrinsics::_Continuation_doYield`",,,,,,,,,,,JDK-8309483,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,ppc,,,,,,,,,,,,,,,"0|i3113v:",9223372036854775807,b19,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,,,"2023-04-06 06:39;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/13372
Date: 2023-04-06 13:22:49 +0000;;;","2023-04-18 00:01;dukebot;Changeset: 445ebef4
Author:    Richard Reingruber <rrich@openjdk.org>
Date:      2023-04-18 06:59:51 +0000
URL:       https://git.openjdk.org/jdk/commit/445ebef4371569b574af698138dccb159ce95602
;;;","2023-05-25 09:08;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk20u/pull/83
Date: 2023-05-25 16:00:30 +0000;;;","2023-06-01 09:43;tsteele;[jdk20u fix request]

I would like to backport this change to jdk20u in preparation for backporting JDK-8286597 (VThread changes for AIX). This change applies cleanly except for some header file year differences, and was reviewed by Martin Doerr. The risk is low as this change affects only big-endian power platforms. Testing looks good.

Tyler;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Some fonts installed in user directory are not detected on Windows,JDK-8305667,5097983,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,ngubarkov,ngubarkov,ngubarkov,2023-04-05 09:50,2023-07-12 13:40,2023-10-01 09:56,2023-06-29 01:29,17,20,21,,,,22,client-libs,,0,,,,,,,,,,,,,,"Actual issue is that fonts with long enough absolute path are ignored by JDK, that's why it mainly affects fonts in user directory.
It's caused by incorrect limit for maximum path length when reading fonts from registry.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,windows,,,,,,"0|i3113n:",9223372036854775807,b05,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@5a9b3fd3,,,,,,,,,"2023-04-05 10:11;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/13359
Date: 2023-04-05 17:03:45 +0000;;;","2023-04-05 22:11;arapte;[~ngubarkov]
Can you please provide more info for reproducing the issue? : any screenshots, fonts that cause this error;;;","2023-04-06 03:18;ngubarkov;Sure. This is not reproducible for me on my current computer, but it was on my previous one, here're more details:
We read font name-path mappings from both HKEY_LOCAL_MACHINE and HKEY_CURRENT_USER, which contain system-wide and per-user fonts respectively.
But HKEY_LOCAL_MACHINE usually contains relative paths (file names), e.g. ""Segoe UI Symbol (TrueType)"" -> ""seguisym.ttf""
While HKEY_CURRENT_USER contains absolute paths, which makes these values much longer, sometimes exceeding buffer size and ignoring the font as a result.

Example:
""BlackChanceryItalic Chancery Italic:001.000 (TrueType)"" -> ""C:\Users\nikita.gubarkov\AppData\Local\Microsoft\Windows\Fonts\BlackChanceryItalic Chancery Italic001.000.ttf""
This is the longest font path in my system, it's 110 characters long (including null-terminator) and takes 220 bytes, while buffer limit is 261 byte.
If it was 21 characters longer, it would not fit into buffer, the issue here that limit should be not 261 bytes, but 261 wide chars, or 522 bytes.

So as you can see, reproducibility of this issue depends on font filename length and username length.;;;","2023-04-06 03:31;ngubarkov;Forgot to mention that although on my machine all font paths fit into the buffer limit, it still returns lpcbMaxValueLen=272 from RegQueryInfoKeyW (HKEY_CURRENT_USER\Software\Microsoft\Windows NT\CurrentVersion\Fonts) and therefore skips user fonts entirely.;;;","2023-04-06 03:44;ngubarkov;Just found a stable reproducer which works for me.
1. Install Cascadia Code for user: https://github.com/microsoft/cascadia-code/releases/tag/v2007.01
2. `new Font(""Cascadia Mono PL Regular"", Font.PLAIN, 13)` -> see that it falls back to Dialog. After my patch it starts resolving the font correctly.;;;","2023-06-01 17:05;vdyakov;This pull request has been inactive for more than 4 weeks after Phil's review on Apr 25 and will be automatically closed soon;;;","2023-06-29 01:29;dukebot;Changeset: f842ec48
Author:    Nikita Gubarkov <ngubarkov@openjdk.org>
Committer: Alexey Ushakov <avu@openjdk.org>
Date:      2023-06-29 08:28:22 +0000
URL:       https://git.openjdk.org/jdk/commit/f842ec48b1e24afd99ad06cb1310bd51d9b8bae4
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Add system property for fair AWT lock,JDK-8305666,5097982,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,ngubarkov,ngubarkov,ngubarkov,2023-04-05 08:47,2023-04-12 23:23,2023-10-01 09:56,2023-04-07 03:09,17,20,21,,,,21,client-libs,,0,,,,,,,,,,,,,,"There are freezes reported on some Linux configurations which are believed to may be caused by the toolkit thread quickly reacquiring AWT_LOCK while polling for events, which starves EDT thread waiting on that lock.
I propose to add `awt.lock.fair` system property to help diagnosing such issues.
Theoretically, this can also be useful on other platforms, e.g. macOS.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i3113f:",9223372036854775807,b18,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@5a9b3fd3,,,,,,,,,"2023-04-05 09:02;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/13356
Date: 2023-04-05 15:54:53 +0000;;;","2023-04-07 03:09;dukebot;Changeset: dc81603c
Author:    Nikita Gubarkov <ngubarkov@openjdk.org>
Committer: Alexey Ushakov <avu@openjdk.org>
Date:      2023-04-07 10:06:51 +0000
URL:       https://git.openjdk.org/jdk/commit/dc81603cbf223c3ac6b41396d1998a07524a0d54
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
[BACKOUT] (fs) Remove FileSystem support for resolving against a default directory (chdir configuration),JDK-8305664,5097979,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,bpb,bpb,bpb,2023-04-05 08:35,2023-04-10 10:26,2023-10-01 09:56,2023-04-05 13:19,21,,,,,,21,core-libs,,0,noreg-other,,,,,,,,,,,,,"The change breaks the Unix FileSystemProvider. It causes java/lang/invoke/lambda/LogGeneratedClassesTest.java to fail and although -Duser.dir is unsupported, there are likely other tests in the wild which will fail if this change is not reverted.",,,,,,,,,,,,,,,,,,,,,JDK-8305600,,,,,,,,,,,JDK-8202110,,,,,,,,,,,,,,,,generic,,,,,,,,,generic,,,,,,"0|i3112r:",9223372036854775807,b17,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@674604a9,,,,,,,,,"2023-04-05 08:48;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/13355
Date: 2023-04-05 15:40:40 +0000;;;","2023-04-05 13:19;dukebot;Changeset: 507c49a3
Author:    Brian Burkhalter <bpb@openjdk.org>
Date:      2023-04-05 20:17:07 +0000
URL:       https://git.openjdk.org/jdk/commit/507c49a3abc0b610a4f7cbc4d3c5aaaaf8ad3534
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Wrong iteration order of pause array in g1MMUTracker,JDK-8305663,5097978,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,avoitylov,avoitylov,avoitylov,2023-04-05 07:49,2023-04-17 10:42,2023-10-01 09:56,2023-04-11 09:04,20,21,,,,,21,hotspot,,0,,,,,,,,,,,,,,"G1 pause _array is iterated from oldest pause to newer pause in order to calculate the pause budget, but it should be iterated in the opposite direction (newest to oldest).

In double G1MMUTracker::when_sec(double current_timestamp, double pause_time) code:

int index = trim_index(_head_index + i); 

should be replaced with:

int index = trim_index(_head_index - i); ",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8290376,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i3112j:",9223372036854775807,b18,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6b00f96c,,,,,,,,,"2023-04-06 00:00;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/13370
Date: 2023-04-06 06:55:04 +0000;;;","2023-04-11 09:04;dukebot;Changeset: c6d7cf6b
Author:    Aleksei Voitylov <avoitylov@openjdk.org>
Committer: Thomas Schatzl <tschatzl@openjdk.org>
Date:      2023-04-11 16:03:13 +0000
URL:       https://git.openjdk.org/jdk/commit/c6d7cf6b4850db26db71f333fa00c4280d7b91f6
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
compile error on Alpine with gcc12 after 8298619 in libGetXSpace.c,JDK-8305646,5097964,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,mbaesken,mbaesken,mbaesken,2023-04-05 03:36,2023-09-15 01:16,2023-10-01 09:56,2023-04-05 06:29,21,,,,,,21,core-libs,,0,noreg-self,,,,,,,,,,,,,"On Alpine Linux, using gcc12, we run now into this compile warning as error :
In file included from /openjdk/linuxmuslx86_64/jdk/test/jdk/java/io/File/libGetXSpace.c:31:
/usr/include/sys/errno.h:1:2: error: #warning redirecting incorrect #include <sys/errno.h> to <errno.h> [-Werror=cpp]
    1 | #warning redirecting incorrect #include <sys/errno.h> to <errno.h>
      | ^~~~~~~
cc1: all warnings being treated as errors

Not sure if this warning makes a lot of sense, but we probably better just include <errno.h> like it is done at almost all other places in the codebase ?",,,,,,,,,,,JDK-8314349,JDK-8313911,,,,,,,,,,,,,,,,,,,,JDK-8298619,,,,,,,,,,,,,,,,generic,,,,,,,,,linux,,,,,,"0|i310zf:",9223372036854775807,b17,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@5f132e58,,,,,,,,,"2023-04-05 03:54;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/13349
Date: 2023-04-05 10:47:17 +0000;;;","2023-04-05 06:29;dukebot;Changeset: a3137c75
Author:    Matthias Baesken <mbaesken@openjdk.org>
Date:      2023-04-05 13:27:16 +0000
URL:       https://git.openjdk.org/jdk/commit/a3137c750f37d8fb03fd93f12e699df790adb327
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
System Tray icons get corrupted when Windows primary monitor changes,JDK-8305645,5097961,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,honkar,gnelson,gnelson,2023-04-05 02:58,2023-06-14 23:42,2023-10-01 09:56,2023-06-09 09:12,11.0.18,15,17.0.6,20,21,,22,client-libs,,0,11-bp,17-bp,sn_145,,,,,,,,,,,"This is a variation of bug JDK-8255439 

Changing the display scale would blur the system tray icon as described in the above bug.  This has been fixed, however the same issue is still seen when you change the primary monitor to another monitor using a different display scale.

STEPS
In Windows have two monitors using different display scales (e.g. 100% and 125%)
One of these monitors will be the primary monitor and contain the system tray icons
Via Display settings, select the monitor that isn't the primary and click ""Make this my main display""
The system tray icons switch to the other monitor

BUG
Icons blur

",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8255439,,,,,,,,,,,,,,,,x86_64,,,,,,,,,windows_10,,,,,,"0|i310yr:",9223372036854775807,b02,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@5a9b3fd3,,,,,,,,,"2023-04-05 08:53;vdyakov;JDK-8296859	 back ported to 17.0.6 please verify (as your Affects version in this report is 17.0.5);;;","2023-04-05 10:19;gnelson;We upgraded to use 17.0.5 to pick up that bug fix, and with that version confirmed that the display scale issue was addressed for us.   However perhaps we are using 17.0.5-oracle as I notice that this version includes the backport in it as well. 

I will double check with 17.0.6 as well though to be sure.;;;","2023-04-12 02:27;gnelson;Reproduced in 17.0.6 as well (and updated the Affects Version accordingly).

Laptop monitor at 150% with external monitor at 100%.  Laptop is initially the primary monitor.  Change primary monitor to the external display and the system tray icon moves from the 150% monitor to the 100% monitor  and gets corrupted.

;;;","2023-04-12 08:27;vdyakov;does it affect mainline (21)?;;;","2023-04-12 10:00;honkar;[~vdyakov] Yes, it is replicable on 21. The case under which it is replicable is slightly different from the original fix. Needs to be investigated further.;;;","2023-06-05 17:56;honkar;When primary monitor is changed, windows sends WM_DISPLAYCHANGE message. Triggering the tray icon add when taskbar is re-added to the new primary monitor looks to be a potential solution and fixes the tray icon distortion.;;;","2023-06-07 12:12;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/14368
Date: 2023-06-07 19:05:56 +0000;;;","2023-06-09 09:12;dukebot;Changeset: 6cd370e0
Author:    Harshitha Onkar <honkar@openjdk.org>
Date:      2023-06-09 16:11:46 +0000
URL:       https://git.openjdk.org/jdk/commit/6cd370e04b01c3033eb439de0f38e9b6d703c6f4
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
IGV: Node text not updated when switching from/to CFG view,JDK-8305644,5097960,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,tholenstein,tholenstein,tholenstein,2023-04-05 02:24,2023-04-17 01:55,2023-10-01 09:56,2023-04-05 05:12,21,,,,,,21,hotspot,,0,igv,oracle-triage-11,oracle-triage-17,oracle-triage-21,,,,,,,,,,When switching the layouting mode to or from CFG the node text is not updated. ,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"2023-04-05 02:24;tholenstein;Screenshot 2023-04-05 at 11.21.59.png;https://bugs.openjdk.org/secure/attachment/103329/Screenshot+2023-04-05+at+11.21.59.png","2023-04-05 02:24;tholenstein;Screenshot 2023-04-05 at 11.22.07.png;https://bugs.openjdk.org/secure/attachment/103328/Screenshot+2023-04-05+at+11.22.07.png",,,,,,,,,,,,,,,,,,,,,"0|i310yj:",9223372036854775807,b17,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2023-04-05 02:40;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/13348
Date: 2023-04-05 09:33:21 +0000;;;","2023-04-05 05:12;dukebot;Changeset: 9f587d27
Author:    Tobias Holenstein <tholenstein@openjdk.org>
Date:      2023-04-05 12:09:27 +0000
URL:       https://git.openjdk.org/jdk/commit/9f587d272fe7097b330d8d81b7ae43149ff92485
;;;","2023-04-05 22:59;chagedorn;ILW = Node text not updated when switching between layouts, only occasionally on layout switches, no workaround = MLH = P4;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Test com/sun/jdi/PopAndInvokeTest.java fails with OpaqueFrameException,JDK-8305632,5097947,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,cjplummer,dholmes,dholmes,2023-04-05 00:38,2023-05-31 23:25,2023-10-01 09:56,2023-05-24 09:57,21,,,,,,21,core-svc,,0,loom,problemlist,tier5,tier6,,,,,,,,,,"After JDK-8305511 effectively re-enabled this test it now fails in tier5 testing:

----------System.err:(17/948)----------
[0ms] run args: [PopAndInvokeTarg]
IOException reading output of child java interpreter:Stream closed
com.sun.jdi.OpaqueFrameException
	at jdk.jdi/com.sun.tools.jdi.StackFrameImpl.pop(StackFrameImpl.java:399)
	at jdk.jdi/com.sun.tools.jdi.ThreadReferenceImpl.popFrames(ThreadReferenceImpl.java:560)
	at PopAndInvokeTest.runOnce(PopAndInvokeTest.java:127)
	at PopAndInvokeTest.runTests(PopAndInvokeTest.java:114)
	at TestScaffold.startTests(TestScaffold.java:434)
	at PopAndInvokeTest.main(PopAndInvokeTest.java:91)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
	at java.base/java.lang.reflect.Method.invoke(Method.java:578)
	at com.sun.javatest.regtest.agent.MainActionHelper$AgentVMRunnable.run(MainActionHelper.java:312)
	at java.base/java.lang.Thread.run(Thread.java:1623)

",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8305511,,,,JDK-8306705,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i310vn:",9223372036854775807,b25,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@3397f701,,,,,,,,,"2023-04-05 06:38;dcubed;All of the failures in the jdk-21+17-1395-tier5 sighting have this option
-Dmain.wrapper=Virtual somewhere in the task options list.

So far the failures have been seen on linux-aarch64-debug, linux-x64-debug,
macosx-x64-debug and windows-x64-debug. No failures have been reported
on macosx-aarch64, but that platform doesn't run this test in Tier5.;;;","2023-04-05 11:58;cjplummer;JDK-8305511 removed the ""@ignore 6951287 "". However, this failure has nothing to do with the previous failure mode described in 6951287. It's due to JDI not supporting ThreadReference.popFrames() on a virtual thread. This is due to lack of underlying JVMTI support. Throwing OpaqueFrameException  is per the spec at the moment, although JVMTI may improve this functionality in the future.;;;","2023-05-23 12:30;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/14022
Date: 2023-05-16 22:02:45 +0000;;;","2023-05-24 09:57;dukebot;Changeset: 89f2d458
Author:    Chris Plummer <cjplummer@openjdk.org>
Date:      2023-05-24 16:54:05 +0000
URL:       https://git.openjdk.org/jdk/commit/89f2d458a293830e271d353c6736907f7e224609
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
"Stress test crashes with SEGV in Deoptimization::deoptimize_frame_internal(JavaThread*, long*, Deoptimization::DeoptReason)",JDK-8305625,5097938,Bug,Resolved,JDK,JDK,software,duke,,,P2,Fixed,pchilanomate,lmesnik,lmesnik,2023-04-04 18:58,2023-06-29 13:32,2023-10-01 09:56,2023-04-17 07:43,21,,,,,,21,hotspot,,0,deoptimization,loom,noreg-hard,oracle-triage-21,,,,,,,,,,"Test crashes with 
#
# A fatal error has been detected by the Java Runtime Environment:
#
#  SIGSEGV (0xb) at pc=0x00007f43c4b81577, pid=3145843, tid=3145853
#
# JRE version: Java(TM) SE Runtime Environment (21.0+15) (build 21-ea+15-LTS-1201)
# Java VM: Java HotSpot(TM) 64-Bit Server VM (21-ea+15-LTS-1201, mixed mode, sharing, tiered, compressed oops, compressed class ptrs, g1 gc, linux-amd64)
# Problematic frame:
# V  [libjvm.so+0x684577]  Deoptimization::deoptimize_frame_internal(JavaThread*, long*, Deoptimization::DeoptReason)+0x2e7

..
Current thread (0x00007f43bc137430):  VMThread ""VM Thread"" [stack: 0x00007f43c01d5000,0x00007f43c02d5000] [id=3145853]

Stack: [0x00007f43c01d5000,0x00007f43c02d5000],  sp=0x00007f43c02d25f0,  free space=1013k
Native frames: (J=compiled Java code, j=interpreted, Vv=VM code, C=native code)
V  [libjvm.so+0x684577]  Deoptimization::deoptimize_frame_internal(JavaThread*, long*, Deoptimization::DeoptReason)+0x2e7  (frame_x86.inline.hpp:244)
V  [libjvm.so+0xf18165]  VM_Operation::evaluate()+0x105  (vmOperations.cpp:71)
V  [libjvm.so+0xf1a878]  VMThread::evaluate_operation(VM_Operation*)+0x278  (vmThread.cpp:281)
V  [libjvm.so+0xf1b347]  VMThread::inner_execute(VM_Operation*)+0x3a7  (vmThread.cpp:428)
V  [libjvm.so+0xf1b5f7]  VMThread::run()+0xb7  (vmThread.cpp:495)
V  [libjvm.so+0xe85a96]  Thread::call_run()+0xa6  (thread.cpp:224)
V  [libjvm.so+0xcaebf8]  thread_native_entry(Thread*)+0xd8  (os_linux.cpp:740)

siginfo: si_signo: 11 (SIGSEGV), si_code: 1 (SEGV_MAPERR), si_addr: 0x0000000000000008

Registers:
RAX=0x0000000000000000, RBX=0x00007f4308b59510, RCX=0x00007f43ac1f6f80, RDX=0x0000000000000000
RSP=0x00007f43c02d25f0, RBP=0x00007f43c02d3950, RSI=0x00007f43c02d2660, RDI=0x0000000000000000
R8 =0x00007f43ac1dab90, R9 =0x00007f43ac1dab80, R10=0x00007f43c634c000, R11=0x0000000000000000
R12=0x00007f43c02d2660, R13=0x00007f43c02d2620, R14=0x00007f43c02d26a0, R15=0x00007f42505357a0
RIP=0x00007f43c4b81577, EFLAGS=0x0000000000010283, CSGSFS=0x002b000000000033, ERR=0x0000000000000004
  TRAPNO=0x000000000000000e


Register to memory mapping:

RAX=0x0 is nullptr
RBX=0x00007f4308b59510 is pointing into the stack for thread: 0x00007f42505357a0
RCX=0x00007f43ac1f6f80 is pointing into interpreter code (not bytecode specific)
RDX=0x0 is nullptr
RSP=0x00007f43c02d25f0 points into unknown readable memory: 0x00007f4308b59a80 | 80 9a b5 08 43 7f 00 00
RBP=0x00007f43c02d3950 points into unknown readable memory: 0x00007f43c02d3a60 | 60 3a 2d c0 43 7f 00 00
RSI=0x00007f43c02d2660 points into unknown readable memory: 0x0000000000000000 | 00 00 00 00 00 00 00 00
RDI=0x0 is nullptr
R8 =0x00007f43ac1dab90 is pointing to an (unnamed) stub routine
R9 =0x00007f43ac1dab80 points into unknown readable memory: 0x00000000000000ee | ee 00 00 00 00 00 00 00
R10=0x00007f43c634c000 points into unknown readable memory: 0x0100050403020100 | 00 01 02 03 04 05 00 01
R11=0x0 is nullptr
R12=0x00007f43c02d2660 points into unknown readable memory: 0x0000000000000000 | 00 00 00 00 00 00 00 00
R13=0x00007f43c02d2620 points into unknown readable memory: 0x0000000000000000 | 00 00 00 00 00 00 00 00
R14=0x00007f43c02d26a0 points into unknown readable memory: 0x0000000000000001 | 01 00 00 00 00 00 00 00
R15=0x00007f42505357a0 is a thread


Top of Stack: (sp=0x00007f43c02d25f0)
0x00007f43c02d25f0:   00007f4308b59a80 00007f43ac1dacc6
0x00007f43c02d2600:   000000000000000a 0000000e2f853f00
0x00007f43c02d2610:   00007f4308b59a80 00007f43ac1dacc6
0x00007f43c02d2620:   0000000000000000 0000000000000000
0x00007f43c02d2630:   0000000000000000 0000000000000000
0x00007f43c02d2640:   00007f0000000000 0000000000000000
0x00007f43c02d2650:   0000000000000000 a6e428ab2f853f00
0x00007f43c02d2660:   0000000000000000 0000000000000000
0x00007f43c02d2670:   0000000000000000 0000000000000000
0x00007f43c02d2680:   00007f0000000000 0000000000000000
0x00007f43c02d2690:   0000000000000000 00007f43c51b77de
0x00007f43c02d26a0:   0000000000000001 0000000000000001
0x00007f43c02d26b0:   00007f43c02d37b0 00007f43c4a79c10
0x00007f43c02d26c0:   0000000000000000 00007f4374584ac0
0x00007f43c02d26d0:   00007f43c02d37cc 00007f43c54a6303
0x00007f43c02d26e0:   00007f43c02d2720 00007f43c02d2720
0x00007f43c02d26f0:   00007f43c580a790 0000004d00000000
0x00007f43c02d2700:   0000000000000000 0000000000000000
0x00007f43c02d2710:   0000000000000000 0000000000000000
0x00007f43c02d2720:   00007f4374584ac0 000000000000004d
0x00007f43c02d2730:   0000000000000060 00007f43c02d0000
0x00007f43c02d2740:   0000000000000038 00007f43c54c04f8
0x00007f43c02d2750:   00007f43c02d2830 00007f43c4e9d034
0x00007f43c02d2760:   00007f43c02d2c4f 0000003000000018
0x00007f43c02d2770:   000a303030303031 00007f43c02d2780
0x00007f43c02d2780:   0000000000000000 0000000000000000
0x00007f43c02d2790:   00007f43c02d2a50 0000000000000001
0x00007f43c02d27a0:   00007f43c02d4700 000000000000000d
0x00007f43c02d27b0:   0000000000000002 00007f43c5c6a0a0
0x00007f43c02d27c0:   ffffffffffffffff 0000000000000000
0x00007f43c02d27d0:   00007f43c02d3700 00007f43c02d3610
0x00007f43c02d27e0:   00000000ffffffff 0000003000000010 

Instructions: (pc=0x00007f43c4b81577)
0x00007f43c4b81477:   8d c0 ec ff ff 4c 89 85 c8 ec ff ff e8 18 29 fd
0x00007f43c4b81487:   ff 4c 8b 85 c8 ec ff ff 48 8b 8d c0 ec ff ff 84
0x00007f43c4b81497:   c0 0f 84 3a 02 00 00 80 7d c6 00 0f 84 78 01 00
0x00007f43c4b814a7:   00 4c 89 f2 4c 89 ee 4c 89 e7 e8 7a 2d fd ff e9
0x00007f43c4b814b7:   53 fe ff ff 0f 1f 44 00 00 48 8d 05 11 b2 cc 00
0x00007f43c4b814c7:   48 8b 00 48 85 c0 0f 84 9d 00 00 00 48 8b 48 08
0x00007f43c4b814d7:   48 39 ca 0f 82 90 00 00 00 48 63 40 14 48 01 c1
0x00007f43c4b814e7:   48 39 ca 0f 83 1b ff ff ff 4c 89 f2 4c 89 ee 4c
0x00007f43c4b814f7:   89 e7 e8 92 ce 0c 00 e9 0b fe ff ff 0f 1f 44 00
0x00007f43c4b81507:   00 48 83 ec 08 ff b5 00 ed ff ff 8b b5 bc ec ff
0x00007f43c4b81517:   ff 4c 89 ff ff b5 f8 ec ff ff ff b5 f0 ec ff ff
0x00007f43c4b81527:   ff b5 e8 ec ff ff ff b5 e0 ec ff ff ff b5 d8 ec
0x00007f43c4b81537:   ff ff ff b5 d0 ec ff ff e8 4c fc ff ff 48 8d 65
0x00007f43c4b81547:   d8 5b 41 5c 41 5d 41 5e 41 5f 5d c3 0f 1f 44 00
0x00007f43c4b81557:   00 4c 89 f2 4c 89 ee 4c 89 e7 e8 7a cb 0c 00 e9
0x00007f43c4b81567:   a3 fd ff ff 0f 1f 44 00 00 48 8b 85 f8 ec ff ff
0x00007f43c4b81577:   48 8b 78 08 f3 0f 7e 08 48 8d 48 10 48 c7 85 28
0x00007f43c4b81587:   ed ff ff 00 00 00 00 66 48 0f 6e c1 c6 85 34 ed
0x00007f43c4b81597:   ff ff 00 66 48 0f 6e ff 66 0f 6c c8 66 0f 6c c7
0x00007f43c4b815a7:   0f 11 8d 38 ed ff ff 0f 29 85 10 ed ff ff e8 a6
0x00007f43c4b815b7:   77 f7 ff 48 89 85 20 ed ff ff 48 89 c7 48 85 c0
0x00007f43c4b815c7:   74 34 80 7f 5d 00 74 2e 48 8b 85 18 ed ff ff 48
0x00007f43c4b815d7:   8b 97 80 00 00 00 48 39 d0 0f 84 c2 00 00 00 80
0x00007f43c4b815e7:   7f 5e 03 0f 84 90 00 00 00 48 3b 87 88 00 00 00
0x00007f43c4b815f7:   0f 84 ab 00 00 00 48 8d 05 f4 3f d0 00 48 39 38
0x00007f43c4b81607:   0f 84 b6 00 00 00 c7 85 30 ed ff ff 00 00 00 00
0x00007f43c4b81617:   e9 f2 fc ff ff 0f 1f 40 00 48 8b 75 b0 4c 89 ea
0x00007f43c4b81627:   4c 89 e7 e8 11 34 fd ff e9 da fc ff ff 0f 1f 40
0x00007f43c4b81637:   00 0f b6 46 5c 48 8b bd e8 ec ff ff 88 45 a8 48
0x00007f43c4b81647:   85 ff 0f 84 06 01 00 00 4c 89 f2 4c 89 ee 4c 89
0x00007f43c4b81657:   85 c0 ec ff ff 48 89 8d c8 ec ff ff e8 28 5a 61
0x00007f43c4b81667:   00 4c 8b 85 c0 ec ff ff 48 8b 8d c8 ec ff ff e9 


Stack slot to memory mapping:
stack at sp + 0 slots: 0x00007f4308b59a80 is pointing into the stack for thread: 0x00007f42505357a0
stack at sp + 1 slots: 0x00007f43ac1dacc6 is at begin+137 in a stub
StubRoutines::call_stub [0x00007f43ac1dac3d, 0x00007f43ac1dad3e] (257 bytes)
stack at sp + 2 slots: 0x000000000000000a is an unknown value
stack at sp + 3 slots: 0x0000000e2f853f00 is an unknown value
stack at sp + 4 slots: 0x00007f4308b59a80 is pointing into the stack for thread: 0x00007f42505357a0
stack at sp + 5 slots: 0x00007f43ac1dacc6 is at begin+137 in a stub
StubRoutines::call_stub [0x00007f43ac1dac3d, 0x00007f43ac1dad3e] (257 bytes)
stack at sp + 6 slots: 0x0 is nullptr
stack at sp + 7 slots: 0x0 is nullptr

VM_Operation (0x00007f4394adc9f0): DeoptimizeFrame, mode: safepoint, requested by thread 0x00007f43bc2ffde0

",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"2023-04-06 21:46;pchilanomate;Repro.zip;https://bugs.openjdk.org/secure/attachment/103348/Repro.zip","2023-04-05 05:07;rehn;gdb.txt;https://bugs.openjdk.org/secure/attachment/103333/gdb.txt","2023-04-04 19:01;lmesnik;hs_err_pid3145843.log;https://bugs.openjdk.org/secure/attachment/103326/hs_err_pid3145843.log",,,,,,,,,,,,,,,,,,,,"0|i310tn:",9223372036854775807,b19,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,,,"2023-04-04 23:22;chagedorn;ILW = Crash in deoptimization, only seen once so far, no workaround = HLH = P2;;;","2023-04-04 23:23;thartmann;Just a wild guess but this might be related to JDK-8300926 (and maybe even JDK-8303775).;;;","2023-04-04 23:46;thartmann;[~rehn] thinks that it could be a regression from JDK-8304743.

Update: Okay, that can't be because that change is not part of the failing run (which is from 2023-03-20).;;;","2023-04-05 02:01;rehn;Ok, I'll have a look.;;;","2023-04-05 02:30;thartmann;Thanks, Robbin!;;;","2023-04-05 03:49;rehn;We seem to be deopting during a safepoint and crashing on this line:
inline address  frame::sender_pc()           const { return *sender_pc_addr(); }

The thread we are working is probably ""ForkJoinPool-1-worker-7649""
Which means:
sender_pc_addr() == &fp()[1];

RAX=0x0000000000000000

5c: 48 8b 48 08             mov    rcx,QWORD PTR [rax+0x8]

So _fp is not set (0).

Since the JavaThread is afepoint safe it should be walkable.;;;","2023-04-05 04:33;rehn;[Switching to thread 66 (LWP 3157029)]
#0  0x00007f43c58e69bd in syscall () from core.3145843.solibs/lib64/libc.so.6
#0  0x00007f43c58e69bd in syscall () from core.3145843.solibs/lib64/libc.so.6
#1  0x00007f43c5423dc3 in futex (op_arg=2057465, futex_op=128, addr=0x7f4374000b74) at open/src/hotspot/os/linux/waitBarrier_linux.cpp:49
#2  LinuxWaitBarrier::wait (this=0x7f4374000b74, barrier_tag=2057465) at open/src/hotspot/os/linux/waitBarrier_linux.cpp:76
#3  0x00007f43c52548d6 in WaitBarrierType<LinuxWaitBarrier>::wait (barrier_tag=<optimized out>, this=<optimized out>) at open/src/hotspot/share/utilities/waitBarrier.hpp:128
#4  SafepointSynchronize::block (thread=0x7f42505357a0) at open/src/hotspot/share/runtime/safepoint.cpp:718
#5  0x00007f43c525c26e in SafepointMechanism::process (thread=thread@entry=0x7f42505357a0, allow_suspend=allow_suspend@entry=true, check_async_exception=check_async_exception@entry=false) at open/src/hotspot/share/runtime/safepointMechanism.cpp:148
#6  0x00007f43c4ddeb44 in SafepointMechanism::process_if_requested (check_async_exception=false, allow_suspend=true, thread=0x7f42505357a0) at open/src/hotspot/share/runtime/safepointMechanism.inline.hpp:83
#7  ThreadBlockInVMPreprocess<void (JavaThread*)>::~ThreadBlockInVMPreprocess() (this=<synthetic pointer>, __in_chrg=<optimized out>) at open/src/hotspot/share/runtime/interfaceSupport.inline.hpp:218
#8  ThreadBlockInVMPreprocess<void (JavaThread*)>::~ThreadBlockInVMPreprocess() (this=<synthetic pointer>, __in_chrg=<optimized out>) at open/src/hotspot/share/runtime/interfaceSupport.inline.hpp:211
#9  ThreadBlockInVM::~ThreadBlockInVM (this=<synthetic pointer>, __in_chrg=<optimized out>) at open/src/hotspot/share/runtime/interfaceSupport.inline.hpp:223
#10 JavaThread::wait_for_object_deoptimization (this=this@entry=0x7f42505357a0) at open/src/hotspot/share/runtime/javaThread.cpp:1187
#11 0x00007f43c4ddec54 in JavaThread::handle_special_runtime_exit_condition (this=0x7f42505357a0) at open/src/hotspot/share/runtime/javaThread.cpp:1024
#12 0x00007f43c4b5c7e0 in SafepointMechanism::process_if_requested_with_exit_check (check_async_exception=true, thread=0x7f42505357a0) at open/src/hotspot/share/runtime/safepointMechanism.inline.hpp:90
#13 ThreadStateTransition::transition_from_vm (check_asyncs=true, to=_thread_in_Java, thread=0x7f42505357a0) at open/src/hotspot/share/runtime/interfaceSupport.inline.hpp:113
#14 ThreadInVMfromJava::~ThreadInVMfromJava (this=<synthetic pointer>, __in_chrg=<optimized out>) at open/src/hotspot/share/runtime/interfaceSupport.inline.hpp:140
#15 freeze_internal<Config<(oop_kind)0, G1BarrierSet> > (sp=<optimized out>, current=0x7f42505357a0) at open/src/hotspot/share/runtime/continuationFreezeThaw.cpp:1580
#16 Config<(oop_kind)0, G1BarrierSet>::freeze (sp=<optimized out>, thread=0x7f42505357a0) at open/src/hotspot/share/runtime/continuationFreezeThaw.cpp:267
#17 freeze<Config<(oop_kind)0, G1BarrierSet> > (current=0x7f42505357a0, sp=<optimized out>) at open/src/hotspot/share/runtime/continuationFreezeThaw.cpp:234
#18 0x00007f43ac855cd5 in ?? ()
#19 0x0000000682910dc0 in ?? ()
#20 0x00007f43aca36a08 in ?? ()
#21 0x0000000682910ea8 in ?? ()
#22 0x0000000000000000 in ?? ()

One thread is iterating through heap and therefore using EscapeBarrier::deoptimize_objects_all_threads.

On back-edge of freeze when transitioning back we hit this safepoint and for some reason fp() is null.;;;","2023-04-05 05:06;rehn;frame fr = thread->last_frame();                                                                                    
while (fr.id() != id) {
  fr = fr.sender(&reg_map);
}                                                                                                                   
deoptimize(thread, fr, reason); 

1: I don't think we can or should freeze if any suspend flag is set, do we consider them?
    Suspend flag should probably pin the continuation.

2: The stack walking should work. It seem like frame::sender can crash if we just keep calling it ? Or something is not correct on stack.

3: Above while seem to be able to loop forever, if not 2 crashes, and it assumes 1 cannot happen. (id must be found?)

I don't think this related to normal deopt.

[~thartmann][~pchilanomate][~rpressler][~rrich];;;","2023-04-05 06:12;rpressler;Without looking into details, the EscapeBarrier mechanism is at odds with virtual threads and is supposed to be disabled completely or partially. 

[~sspitsyn];;;","2023-04-05 07:39;rrich;> Without looking into details, the EscapeBarrier mechanism is at odds with virtual threads and is supposed to be disabled completely or partially. 

It is partially disabled. E.g. deoptimization is skipped vor vthreads: https://github.com/openjdk/jdk/blob/2e59d21e5620e834cb55a69d23a16c44d6ca2393/src/hotspot/share/runtime/escapeBarrier.cpp#L126-L130;;;","2023-04-05 08:46;pchilanomate;I think a possible explanation could be if we hit the the following case:

- EscapeBarrier::sync_and_suspend_all() sets the _obj_deopt flag for a thread that is inside freeze and the handshake all operation to synchronize with all threads (EscapeBarrierSuspendHandshake) finds that thread blocked in the stack allocation path so it succeeds.
- The EscapeBarrier requester proceeds to EscapeBarrier::deoptimize_objects_all_threads(). The thread in freeze is seen as a normal thread because the jvmti rebinding is done before freezing. Walks the stack before the thread comes out of the allocation path to change the anchor to the entry frame (FreezeBase::unwind_frames()).
- Requester finds a possible frame to deopt, that belongs to the vthread, and requests a vm operation to deoptimize it. 
- The deoptimization safepoint catches the target thread after the freezing and change of anchor is done, in the JRT_BLOCK_END of the freeze slow path.
- Frame is no longer there so we just loop until we get a null frame (is that what will happen if we keep calling sender() ? )

I checked and the anchor field for the thread being deoptimized is correctly set:

_anchor = {_last_Java_sp = 0x7f4308b59640, _last_Java_pc = 0x7f43ac8553eb ""\017\037\204"", _last_Java_fp = 0x7f4308b59680}

and the thread is indeed blocked in that JRT_BLOCK_END on the slow path.

The id of the frame requested for deopt is 0x7f4308b59510 which is a lower address than the current _last_Java_sp of that target. So we never find it in that loop:

  while (fr.id() != id) {
    fr = fr.sender(&reg_map);
  }

I checked and the fr at the point of crashing has all null values:

(gdb) p	fr
$4 = {{_sp = 0x0, _offset_sp = 0}, _pc = 0x0, _cb = 0x0, _oop_map = 0x0, _deopt_state = frame::not_deoptimized, _on_heap = false, {_fp = 0x0, _offset_fp = 0}, {_unextended_sp = 0x0,
    _offset_unextended_sp = 0}}
;;;","2023-04-05 09:09;rrich;Thank you Patricio. That's a nice analysis.

> - The EscapeBarrier requester proceeds to EscapeBarrier::deoptimize_objects_all_threads(). The thread in freeze is seen as a normal thread because the jvmti rebinding is done before freezing. Walks the stack before the thread comes out of the allocation path to change the anchor to the entry frame (FreezeBase::unwind_frames()). 

So the target thread is suspended here because of the EscapeBarrier::sync_and_suspend_all() 

> - The deoptimization safepoint catches the target thread after the freezing and change of anchor is done, in the JRT_BLOCK_END of the freeze slow path. 

But it was suspended above.

EDIT: I see, after the safepoint for the allocation the target does _not_ check has_special_runtime_exit_condition(). It continues and is blocked at JRT_BLOCK_END.

The EscapeBarrier logic does not expect stack changes after sync_and_suspend_all().;;;","2023-04-05 11:10;pchilanomate;[~rrich] Right, the actual suspend will be done later on the next transition back to Java.

Maybe adding a check for jt->is_in_VTMS_transition() when skipping virtual threads is what is missing. So we skip mounted virtual threads or when we are at transitions.;;;","2023-04-05 12:17;rehn;>I checked and the fr at the point of crashing has all null values:

I don't like the API of sender since there is no natural way of saying last/entry frame.
Now in theory you should always check fp? before using the frame returned.

>EDIT: I see, after the safepoint for the allocation the target does _not_ check has_special_runtime_exit_condition(

That's what I saying by ""pin the thread"", aka make sure stack stays on it if we get suspend flag set.
Now disabling may also work, but with pinning on suspend flag we may get more JVM TI working on vthread.

Yes, thanks Patricio for digging!;;;","2023-04-06 05:57;rrich;> > EDIT: I see, after the safepoint for the allocation the target does _not_ check has_special_runtime_exit_condition(
>
> That's what I saying by ""pin the thread"", aka make sure stack stays on it if we get suspend flag set.

Right. I do get it now.

> Now disabling may also work, but with pinning on suspend flag we may get more JVM TI working on vthread. 

Do you actually mean the `_obj_deopt` suspend flag? If yes then I think
EscapeBarrier based object deoptimization should be avoided if a vthread is
mounted. It would require JvmtiDeferredUpdates to be ""virtualized"". This doesn't
seem to be the case currently. Even setting a local variable does not seem to be
possible for frames in continuations (see VM_BaseGetOrSetLocal::doit).

But maybe I'm misunderstanding. I haven't been following the JVMTI-with-VThreads-Story. It does look sufficiently complex.

> Maybe adding a check for jt->is_in_VTMS_transition() when skipping virtual threads is what is missing. So we skip mounted virtual threads or when we are at transitions.

This would make sense to me.;;;","2023-04-06 06:49;rehn;>Do you actually mean the `_obj_deopt` suspend flag?

We also have JFR native sampling flag, I think due to the circumstances how and when we freeze it's not a problem.
But if we would freeze a thread with that suspend_flag set, we are certainly in some trouble :)

And these two are the only two flags left. (To be removed);;;","2023-04-06 21:49;pchilanomate;I attached a simple reproducer. Fails for me every time.

The way other JVMTI operations make sure there are no threads in a transition while the operation is being executed is to use the JvmtiVTMSTransitionDisabler. So using that would be a solution too.
Now, I see that for this particular operation we are skipping stacks of mounted virtual threads altogether so we don't really care if they are in a transition. That means that as I mentioned before we could just adjust the check to identify virtual threads, since reading jvmti_vthread() is not enough. So we could check is_vthread_mounted() instead, which returns true until the continuation entry is actually removed from the stack. 
The is_in_VTMS_transition() check I suggested earlier also works. It's just that it will be more restrictive, because there is a window of time where the continuation has already been unmounted (return from enterSpecial) but the transition bit is still set (the bit is cleared later in afterYield()) so we will skip walking that stack in that case.

[~rrich] [~rehn] were any of you guys planning to take this, otherwise I can assign it to myself.;;;","2023-04-11 00:19;rrich;I was not planning to take this issue. It would be great if you could.
;;;","2023-04-11 00:36;thartmann;Just wondering, should we move this to hotspot/jvmti?;;;","2023-04-11 01:24;rehn;Modifying the stack while in VM is dangerous.
If you are in VM with a pending suspend and do a block in vm, the thread will be suspended but allowed to continue execute in VM.
The thread will be stopped when trying to enter Java or do Java-a-like operation.
This means the suspender may be working on the stack.

To get this (freeze) safe it should be done from Java.
In this case enter VM allocate chunk, return to Java and do the freeze.

This would not be a problem then.
Hence fixing this problem, but still modifying the stack in VM can still cause bugs if there is a suspend request.
I don't see any e.g. TBIVM in this code now, but the code paths spread out.

(This wired situation with stack assumed to be stable while in VM is very old,. Suspending on all transitions breaks the JDWP/JVM TI agent and since it assumes what operations may suspend.);;;","2023-04-11 07:35;rehn;Thanks [~pchilanomate];;;","2023-04-12 07:59;pchilanomate;[~rehn] I tested your idea but I found we cannot go back to Java after the allocation because that might safepoint and the chunk could change to GC mode before we start using it. There is a comment about delaying safepoints after the chunk has been allocated.;;;","2023-04-12 09:13;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/13446
Date: 2023-04-12 15:48:53 +0000;;;","2023-04-12 13:04;dcubed;[~thartmann]
> Just wondering, should we move this to hotspot/jvmti?

Reading thru this bug's comments, it's not clear to me that this bug
belongs in hotspot/jvmti. The issue appears to be related to deoptimization
and Loom. Deoptimization issues are typically shared between the Compiler
team and the Runtime team. ;;;","2023-04-12 22:25;thartmann;Thanks, I'm moving this to hotspot/runtime because the fix is in runtime owned code.;;;","2023-04-13 01:48;rehn;[~pchilanomate] We could redo the allocation if there is a GC mode is changed before we write anything.
Anyhow might require a bit of work. So maybe best just the fix the current issue for now.;;;","2023-04-17 07:43;dukebot;Changeset: 73609604
Author:    Patricio Chilano Mateo <pchilanomate@openjdk.org>
Date:      2023-04-17 14:40:29 +0000
URL:       https://git.openjdk.org/jdk/commit/7360960454b3116a0724396f25415f2c3bcf8930
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Remove Permission details from jcmd man page,JDK-8305622,5097933,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,kevinw,kevinw,kevinw,2023-04-04 15:24,2023-04-12 23:23,2023-10-01 09:56,2023-04-06 14:11,,,,,,,21,core-svc,,0,,,,,,,,,,,,,,"The jcmd man page documents Permissions for some commands.
e.g.
Permission: java.lang.management.ManagementPermission(monitor)

The page does not say when these are enforced (when the Security Manager is active, e.g. if the SM is enabled with a policy to control remote JMX access).  Usage information would have been suited to another location, such as the Monitoring and Management guide perhaps.

Due to the the upcoming Security Manager removal (see JEP 411), this information is no longer useful and should be removed.

If there is a replacement feature, new documentation should be added.

",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8305680,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i310sj:",9223372036854775807,b18,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@411d4af6,,,,,,,,,"2023-04-05 14:11;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/13363
Date: 2023-04-05 21:00:55 +0000;;;","2023-04-06 14:12;dukebot;Changeset: 8db1dd02
Author:    Kevin Walls <kevinw@openjdk.org>
Date:      2023-04-06 21:09:08 +0000
URL:       https://git.openjdk.org/jdk/commit/8db1dd02582edb3be99c2f63a54772e47311aa8e
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Missing `break` in DocCommentParser `inlineWord()`,JDK-8305620,5097930,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,jjg,jjg,jjg,2023-04-04 13:55,2023-04-10 10:25,2023-10-01 09:56,2023-04-05 07:41,,,,,,,21,tools,,0,,,,,,,,,,,,,,"There is a `break` missing in `case '@'` in DCP `inlineWord()`, leading to an unintentional fall through in the next case block, and therefore incorrect behavior.

""At some point"", we should modernize DocCommentParser and use new-style switch statements.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i310rv:",9223372036854775807,b17,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@7900061a,,,,,,,,,"2023-04-04 17:04;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/13343
Date: 2023-04-04 23:58:28 +0000;;;","2023-04-05 07:41;dukebot;Changeset: 022290bd
Author:    Jonathan Gibbons <jjg@openjdk.org>
Date:      2023-04-05 14:39:51 +0000
URL:       https://git.openjdk.org/jdk/commit/022290bdbd14238d6f3cbd75e99f42b874ea255f
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
java/lang/invoke/lambda/LogGeneratedClassesTest.java fails after JDK-8304846 and JDK-8202110,JDK-8305600,5097909,Bug,Closed,JDK,JDK,software,duke,,,P2,Fixed,mchung,dcubed,dcubed,2023-04-04 11:36,2023-07-24 10:28,2023-10-01 09:56,2023-04-05 15:43,21,,,,,,21,core-libs,,0,regression,tier1,,,,,,,,,,,,"The following test failed in the JDK21 CI:

java/lang/invoke/lambda/LogGeneratedClassesTest.java

after the integration of the following fix:

JDK-8304846 Provide a shared utility to dump generated classes defined via Lookup API

It looks like JDK-8304846 modified the existing test.

Here's a snippet from the log file:

----------System.out:(189/12466)----------
config LogGeneratedClassesTest.setup(): success
test LogGeneratedClassesTest.testDumpDirIsFile(): failure
java.lang.AssertionError: only show error once expected [1] but found [0]
	at org.testng.Assert.fail(Assert.java:99)
	at org.testng.Assert.failNotEquals(Assert.java:1037)
	at org.testng.Assert.assertEqualsImpl(Assert.java:140)
	at org.testng.Assert.assertEquals(Assert.java:122)
	at org.testng.Assert.assertEquals(Assert.java:797)
	at LogGeneratedClassesTest.testDumpDirIsFile(LogGeneratedClassesTest.java:177)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
	at java.base/java.lang.reflect.Method.invoke(Method.java:578)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:132)
	at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:599)
	at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:174)
	at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
	at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:822)
	at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:147)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
	at org.testng.TestRunner.privateRun(TestRunner.java:764)
	at org.testng.TestRunner.run(TestRunner.java:585)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:384)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:378)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:337)
	at org.testng.SuiteRunner.run(SuiteRunner.java:286)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1218)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1140)
	at org.testng.TestNG.runSuites(TestNG.java:1069)
	at org.testng.TestNG.run(TestNG.java:1037)
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:93)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
	at java.base/java.lang.reflect.Method.invoke(Method.java:578)
	at com.sun.javatest.regtest.agent.MainActionHelper$AgentVMRunnable.run(MainActionHelper.java:312)
	at java.base/java.lang.Thread.run(Thread.java:1623)
test LogGeneratedClassesTest.testDumpDirNotExist(): failure
java.lang.AssertionError: Two lambda captured expected [2] but found [0]
	at org.testng.Assert.fail(Assert.java:99)
	at org.testng.Assert.failNotEquals(Assert.java:1037)
	at org.testng.Assert.assertEqualsImpl(Assert.java:140)
	at org.testng.Assert.assertEquals(Assert.java:122)
	at org.testng.Assert.assertEquals(Assert.java:797)
	at LogGeneratedClassesTest.testDumpDirNotExist(LogGeneratedClassesTest.java:155)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
	at java.base/java.lang.reflect.Method.invoke(Method.java:578)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:132)
	at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:599)
	at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:174)
	at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
	at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:822)
	at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:147)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
	at org.testng.TestRunner.privateRun(TestRunner.java:764)
	at org.testng.TestRunner.run(TestRunner.java:585)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:384)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:378)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:337)
	at org.testng.SuiteRunner.run(SuiteRunner.java:286)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1218)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1140)
	at org.testng.TestNG.runSuites(TestNG.java:1069)
	at org.testng.TestNG.run(TestNG.java:1037)
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:93)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
	at java.base/java.lang.reflect.Method.invoke(Method.java:578)
	at com.sun.javatest.regtest.agent.MainActionHelper$AgentVMRunnable.run(MainActionHelper.java:312)
	at java.base/java.lang.Thread.run(Thread.java:1623)
test LogGeneratedClassesTest.testDumpDirNotWritable(): failure
java.lang.AssertionError: only show error once expected [1] but found [0]
	at org.testng.Assert.fail(Assert.java:99)
	at org.testng.Assert.failNotEquals(Assert.java:1037)
	at org.testng.Assert.assertEqualsImpl(Assert.java:140)
	at org.testng.Assert.assertEquals(Assert.java:122)
	at org.testng.Assert.assertEquals(Assert.java:797)
	at LogGeneratedClassesTest.testDumpDirNotWritable(LogGeneratedClassesTest.java:239)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
	at java.base/java.lang.reflect.Method.invoke(Method.java:578)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:132)
	at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:599)
	at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:174)
	at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
	at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:822)
	at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:147)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
	at org.testng.TestRunner.privateRun(TestRunner.java:764)
	at org.testng.TestRunner.run(TestRunner.java:585)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:384)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:378)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:337)
	at org.testng.SuiteRunner.run(SuiteRunner.java:286)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1218)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1140)
	at org.testng.TestNG.runSuites(TestNG.java:1069)
	at org.testng.TestNG.run(TestNG.java:1037)
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:93)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
	at java.base/java.lang.reflect.Method.invoke(Method.java:578)
	at com.sun.javatest.regtest.agent.MainActionHelper$AgentVMRunnable.run(MainActionHelper.java:312)
	at java.base/java.lang.Thread.run(Thread.java:1623)
test LogGeneratedClassesTest.testLogging(): failure
java.lang.AssertionError: Two lambda captured expected [2] but found [0]
	at org.testng.Assert.fail(Assert.java:99)
	at org.testng.Assert.failNotEquals(Assert.java:1037)
	at org.testng.Assert.assertEqualsImpl(Assert.java:140)
	at org.testng.Assert.assertEquals(Assert.java:122)
	at org.testng.Assert.assertEquals(Assert.java:797)
	at LogGeneratedClassesTest.testLogging(LogGeneratedClassesTest.java:130)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
	at java.base/java.lang.reflect.Method.invoke(Method.java:578)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:132)
	at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:599)
	at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:174)
	at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
	at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:822)
	at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:147)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
	at org.testng.TestRunner.privateRun(TestRunner.java:764)
	at org.testng.TestRunner.run(TestRunner.java:585)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:384)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:378)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:337)
	at org.testng.SuiteRunner.run(SuiteRunner.java:286)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1218)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1140)
	at org.testng.TestNG.runSuites(TestNG.java:1069)
	at org.testng.TestNG.run(TestNG.java:1037)
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:93)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
	at java.base/java.lang.reflect.Method.invoke(Method.java:578)
	at com.sun.javatest.regtest.agent.MainActionHelper$AgentVMRunnable.run(MainActionHelper.java:312)
	at java.base/java.lang.Thread.run(Thread.java:1623)
test LogGeneratedClassesTest.testLoggingException(): failure
java.lang.AssertionError: show error each capture expected [2] but found [0]
	at org.testng.Assert.fail(Assert.java:99)
	at org.testng.Assert.failNotEquals(Assert.java:1037)
	at org.testng.Assert.assertEqualsImpl(Assert.java:140)
	at org.testng.Assert.assertEquals(Assert.java:122)
	at org.testng.Assert.assertEquals(Assert.java:797)
	at LogGeneratedClassesTest.testLoggingException(LogGeneratedClassesTest.java:261)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
	at java.base/java.lang.reflect.Method.invoke(Method.java:578)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:132)
	at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:599)
	at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:174)
	at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
	at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:822)
	at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:147)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
	at org.testng.TestRunner.privateRun(TestRunner.java:764)
	at org.testng.TestRunner.run(TestRunner.java:585)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:384)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:378)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:337)
	at org.testng.SuiteRunner.run(SuiteRunner.java:286)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1218)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1140)
	at org.testng.TestNG.runSuites(TestNG.java:1069)
	at org.testng.TestNG.run(TestNG.java:1037)
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:93)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
	at java.base/java.lang.reflect.Method.invoke(Method.java:578)
	at com.sun.javatest.regtest.agent.MainActionHelper$AgentVMRunnable.run(MainActionHelper.java:312)
	at java.base/java.lang.Thread.run(Thread.java:1623)
test LogGeneratedClassesTest.testNotLogging(): success
config LogGeneratedClassesTest.cleanup(): success

===============================================
java/lang/invoke/lambda/LogGeneratedClassesTest.java
Total tests run: 6, Passes: 1, Failures: 5, Skips: 0
===============================================

----------System.err:(25/1508)----------
TestLambda.java:7: warning: [removal] SecurityManager in java.lang has been deprecated and marked for removal
        System.setSecurityManager(new SecurityManager());
                                      ^
TestLambda.java:7: warning: [removal] setSecurityManager(SecurityManager) in System has been deprecated and marked for removal
        System.setSecurityManager(new SecurityManager());
              ^
2 warnings
LongPackageName.java:7: warning: [removal] SecurityManager in java.lang has been deprecated and marked for removal
        System.setSecurityManager(new SecurityManager());
                                      ^
LongPackageName.java:7: warning: [removal] setSecurityManager(SecurityManager) in System has been deprecated and marked for removal
        System.setSecurityManager(new SecurityManager());
              ^
2 warnings
Unable to visit NotExist/DUMP_LAMBDA_PROXY_CLASS_FILES: java.nio.file.NoSuchFileException: NotExist/DUMP_LAMBDA_PROXY_CLASS_FILES
java.lang.Exception: failures: 5
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:95)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
	at java.base/java.lang.reflect.Method.invoke(Method.java:578)
	at com.sun.javatest.regtest.agent.MainActionHelper$AgentVMRunnable.run(MainActionHelper.java:312)
	at java.base/java.lang.Thread.run(Thread.java:1623)

JavaTest Message: Test threw exception: java.lang.Exception
JavaTest Message: shutting down test

result: Failed. Execution failed: `main' threw exception: java.lang.Exception: failures: 5",,,,,,,,,,,,,,,,,,,JDK-8305664,,,,,,,,,,,,,JDK-8304846,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i310n7:",9223372036854775807,b18,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@1cfeb1de,,,,,,,Verified,,"2023-04-04 11:38;dcubed;[~mchung] - Please take a look at these Tier1 failures.;;;","2023-04-04 15:36;mchung;If -Duser.dir=<dir> is set, it runs into bootstrapping issue that fails to create the directories of the file to be written; hence StackOverflowError.   It's uncertain why Files.createDirectories doesn't fail but continue but fails in Files::write when the bytes are written.    If -Duser.dir is not set, it will pass.    This could be related to JDK-8202110 which was not included in an earlier test run.

Exception in thread ""main"" java.lang.InternalError: java.lang.InternalError: DUMP_LAMBDA_PROXY_CLASS_FILES/java/lang not exist
	at java.base/java.lang.invoke.InnerClassLambdaMetafactory.generateInnerClass(InnerClassLambdaMetafactory.java:365)
	at java.base/java.lang.invoke.InnerClassLambdaMetafactory.spinInnerClass(InnerClassLambdaMetafactory.java:287)
	at java.base/java.lang.invoke.InnerClassLambdaMetafactory.buildCallSite(InnerClassLambdaMetafactory.java:222)
	at java.base/java.lang.invoke.LambdaMetafactory.metafactory(LambdaMetafactory.java:341)
	at java.base/java.lang.invoke.BootstrapMethodInvoker.invoke(BootstrapMethodInvoker.java:134)
	at java.base/java.lang.invoke.CallSite.makeSite(CallSite.java:316)
	at java.base/java.lang.invoke.MethodHandleNatives.linkCallSiteImpl(MethodHandleNatives.java:274)
	at java.base/java.lang.invoke.MethodHandleNatives.linkCallSite(MethodHandleNatives.java:264)
	at java.base/java.lang.SecurityManager.addNonExportedPackages(SecurityManager.java:1232)
	at java.base/java.lang.SecurityManager.<clinit>(SecurityManager.java:1223)
	at com.example.TestLambda.main(TestLambda.java:7)
Caused by: java.lang.InternalError: DUMP_LAMBDA_PROXY_CLASS_FILES/java/lang not exist
	at java.base/jdk.internal.util.ClassFileDumper$1.run(ClassFileDumper.java:177)
	at java.base/jdk.internal.util.ClassFileDumper$1.run(ClassFileDumper.java:171)
	at java.base/java.security.AccessController.doPrivileged(AccessController.java:319)
	at java.base/jdk.internal.util.ClassFileDumper.write(ClassFileDumper.java:171)
	at java.base/jdk.internal.util.ClassFileDumper.dumpClass(ClassFileDumper.java:155)
	at java.base/java.lang.invoke.MethodHandles$Lookup$ClassDefiner.defineClass(MethodHandles.java:2514)
	at java.base/java.lang.invoke.InnerClassLambdaMetafactory.generateInnerClass(InnerClassLambdaMetafactory.java:362)
	... 10 more;;;","2023-04-05 09:22;mchung;This is caused by JDK-8202110 which causes setting -Duser.dir to a path that is different from current working directory.  One change of behavior is that Files.createDirectories returns the path successfully but the directory is actually not created.   JDK-8202110  is being backout (JDK-8305664).;;;","2023-04-05 14:11;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/13364
Date: 2023-04-05 21:03:15 +0000;;;","2023-04-05 15:43;dukebot;Changeset: 31270256
Author:    Mandy Chung <mchung@openjdk.org>
Date:      2023-04-05 22:40:55 +0000
URL:       https://git.openjdk.org/jdk/commit/312702567a15d67fcf69325b9cb6345f9ea026f7
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
(fc) Two java/nio/channels tests fail after JDK-8303260,JDK-8305596,5097902,Bug,Closed,JDK,JDK,software,duke,,,P2,Fixed,bpb,dcubed,dcubed,2023-04-04 10:45,2023-07-18 09:34,2023-10-01 09:56,2023-04-05 13:18,21,,,,,,21,core-libs,,0,noreg-self,regression,tier2,,,,,,,,,,,"The following two tests failed in the JDK21 CI:

java/nio/channels/AsyncCloseAndInterrupt.java
java/nio/channels/FileChannel/Transfer.java

after the integration of:

JDK-8303260 (fc) FileChannel::transferFrom should support position > size()

The following fix was also included in the same integration:

JDK-8298619 java/io/File/GetXSpace.java is failing

However, that changeset appears to be closely related to
the java/io/File/GetXSpace.java itself.

Here's a ""reasons column"" snippet from the AsyncCloseAndInterrupt.java failure:

Exception: java.lang.Exception: FileChannel/transferFrom/pre-interrupt threw an exception
Exception: java.lang.RuntimeException: Channel still open

Here's a ""reasons column"" snippet from the Transfer.java failure:

Exception: java.lang.RuntimeException: Wrote past file size
Exception: java.lang.Exception: failures: ...

For some reason, the log file links are not working.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8310069,JDK-8303260,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i310ln:",9223372036854775807,b17,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@674604a9,,,,,,,Verified,,"2023-04-04 10:48;bpb;GetXSpace is just a test change.

As for the other, it is surprising as I ran the change through three tiers. Which platform(s)?;;;","2023-04-04 15:09;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/13342
Date: 2023-04-04 22:04:04 +0000;;;","2023-04-05 00:38;mbaesken;We noticed as well failures in our last nightly tests of jdk-head in java/nio/channels/FileChannel/Transfer.java .
Issue was seen on Linux, macOS and Windows.  Below is from Linux,

Seed from RandomFactory = -9090286566772676303L
test Transfer.testFileChannel(): failure
java.lang.RuntimeException: Wrote past file size
	at Transfer.testFileChannel(Transfer.java:99)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
	at java.base/java.lang.reflect.Method.invoke(Method.java:578)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:132)
	at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:599)
	at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:174)
	at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
	at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:822)
	at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:147)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
	at org.testng.TestRunner.privateRun(TestRunner.java:764)
	at org.testng.TestRunner.run(TestRunner.java:585)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:384)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:378)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:337)
	at org.testng.SuiteRunner.run(SuiteRunner.java:286)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1218)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1140)
	at org.testng.TestNG.runSuites(TestNG.java:1069)
	at org.testng.TestNG.run(TestNG.java:1037)
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:93)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
	at java.base/java.lang.reflect.Method.invoke(Method.java:578)
	at com.sun.javatest.regtest.agent.MainActionHelper$AgentVMRunnable.run(MainActionHelper.java:312)
	at java.base/java.lang.Thread.run(Thread.java:1623)
test Transfer.testReadableByteChannel(): success
test Transfer.xferTest02(): success
test Transfer.xferTest03(): success
test Transfer.xferTest06(): success
test Transfer.xferTest07(): success
test Transfer.xferTest09(): success

===============================================
java/nio/channels/FileChannel/Transfer.java
Total tests run: 7, Passes: 6, Failures: 1, Skips: 0
===============================================
;;;","2023-04-05 13:18;dukebot;Changeset: 39f12a88
Author:    Brian Burkhalter <bpb@openjdk.org>
Date:      2023-04-05 20:16:13 +0000
URL:       https://git.openjdk.org/jdk/commit/39f12a88e7b19eb2b60942c6a6d2038398ddcd3f
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Windows.h fails to extract on jextract/panama,CODETOOLS-7903485,5102329,Bug,Resolved,CODETOOLS,Code Tools,software,duke,,,P2,Fixed,mcimadamore,mcimadamore,mcimadamore,2023-06-01 08:34,2023-06-12 07:32,2023-10-01 09:56,2023-06-12 07:32,,,,,,,,tools,,0,foreign-jextract,,,,,,,,,,,,,"There seems to be several issues with windows.h, all of which are latent issues that are now made manifest by the more eager layout checks. More specifically:

* size of ""long double"" layout is incorrect (16 instead of 8)
* sometimes, clang reports cursors for struct fields ""out-of-order""

",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i31rbn:",9223372036854775807,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@2791a97a,,,,,,,,,"2023-06-01 08:59;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jextract/pull/122
Date: 2023-06-01 15:15:56 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Jextract doesn't enforce group layout alignment correctly in some cases,CODETOOLS-7903481,5102096,Bug,Resolved,CODETOOLS,Code Tools,software,duke,,,P3,Fixed,mcimadamore,mcimadamore,mcimadamore,2023-05-30 04:45,2023-05-30 07:42,2023-10-01 09:56,2023-05-30 07:42,,,,,,,,tools,,0,foreign-extract,,,,,,,,,,,,,"Consider this case:

#pragma pack(push, 1)
struct A {
   long long a;
   int b;
};
#pragma pack(pop)

struct B {
   struct A x[1];
};

In this case, jextract doesn't work as expected. The size of the struct A is 12 bytes, which is NOT a multiple of the struct alignment (8). As a result, when we try to create a sequence layout with A as element layout, we get an exception.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i31pvv:",9223372036854775807,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@2791a97a,,,,,,,,,"2023-05-30 04:52;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jextract/pull/121
Date: 2023-05-30 11:49:05 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
JMH: Threading model should not assume stable threads,CODETOOLS-7903476,5101945,Bug,Resolved,CODETOOLS,Code Tools,software,duke,,,P3,Fixed,shade,skuksenko,skuksenko,2023-05-26 10:31,2023-06-08 00:45,2023-10-01 09:56,2023-06-05 11:59,,,,,,,,tools,,0,,,,,,,,,,,,,,"JMH threading model can support only FixedThreadPoolExecutor.
All other existing options (CACHED_TPE, FJP_COMMON, and CUSTOM ( which is not fixed)) are not working.

The problem is the following.
At the beginning of benchmark execution, inside BenchmarkHandler constructor, a set of ThreadParams is created:

    tps = new ArrayBlockingQueue<>(executionParams.getThreads());
    tps.addAll(distributeThreads(executionParams.getThreads(), executionParams.getThreadGroups()));

Assigning ThreadParams to Thread happens inside newWorkerData (called from BenchmarkTask.call()).

Every iteration BenchmarkTasks are submitted to the executor:

    CompletionService<BenchmarkTaskResult> srv = new ExecutorCompletionService<>(executor);
    for (BenchmarkTask runner : runners) {
        srv.submit(runner);
    }

If, on the second (or later) iteration, the executor submits benchmark task to the thread which was not used on the first iteration - we are getting an error. The new thread doesn't have associated WorkerData, and ""tps""  queue is already drained.

That was observed on:
- CACHED_TPE (CachedThreadPool doesn't have a guarantee that threads survive between submit loops on different iterations)
- FJP_COMMON, was observed on JDK 11 (17, 21 are fine), but also, there is no guarantee that submitted tasks will be assigned to the same set of threads as on the first iteration.

It was not observed on FJP, but theoretically may happen when the benchmark uses ManagedBlockers.

It can't work for CUSTOM executor until the custom executor is FixedThreadPool.
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,CODETOOLS-7903471,CODETOOLS-7903490,,,,,,,,,,,,,,,generic,,,,,,,,,generic,,,,,,"0|i31oyb:",9223372036854775807,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@b978723,,,,,,,,,"2023-06-01 04:40;shade;Unfortunately, there are plenty of uses for ""jmh.executor"" in the wild, so we need to be careful about fixing this.
https://github.com/search?q=jmh.executor&type=code;;;","2023-06-01 07:17;skuksenko;The suggested fix is here https://github.com/openjdk/jmh/pull/103
;;;","2023-06-01 11:07;shade;Thanks! I have arrived at roughly the same idea, but the CyclicBarrier option is clearly a winner. 
I am preparing a more comprehensive fix, and will credit you in PR.;;;","2023-06-01 13:02;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jmh/pull/107
Date: 2023-06-01 19:58:00 +0000;;;","2023-06-05 11:59;roboduke;Changeset: ae39e4dd
Author:    Aleksey Shipilev <shade@openjdk.org>
Date:      2023-06-05 18:53:38 +0000
URL:       https://git.openjdk.org/jmh/commit/ae39e4dd8cb622ac4be6a89baed8b860cf252e01
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Jextract should use new byte-based layout methods,CODETOOLS-7903475,5101731,Bug,Resolved,CODETOOLS,Code Tools,software,duke,,,P4,Fixed,mcimadamore,mcimadamore,mcimadamore,2023-05-24 08:43,2023-05-30 04:44,2023-10-01 09:56,2023-05-30 04:44,,,,,,,,tools,,0,foreign-jextract,,,,,,,,,,,,,"Following JDK-8308276, jextract code should be fixed to use the new byte-based layout methods.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i31nmr:",9223372036854775807,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@2791a97a,,,,,,,,,"2023-05-24 08:53;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jextract/pull/120
Date: 2023-05-24 15:45:03 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
jtreg AgentServer log() does not flush,CODETOOLS-7903470,5100590,Bug,Resolved,CODETOOLS,Code Tools,software,duke,,,P4,Fixed,lujaniuk,lujaniuk,lujaniuk,2023-05-10 06:35,2023-09-15 07:10,2023-10-01 09:56,2023-05-11 01:29,,,,,,,jtreg7.3,tools,,0,,,,,,,,,,,,,,"The code in AgentServer.java is responsible for controlling the agents executing actual tests. When created, AgentServers are passed a logFile to write their log output to. These files are usually called ""agentServer.$ID.trace"" where $ID is the id of the agent. The contents of these files can be important in troubleshooting issues with jtreg itself, especially when unusual error conditions cause the execution of jtreg testing to fail somehow, or when there are issues in the communication between jtreg and its agents.

Agents log to their log files with the log() method in AgentServer.java. 
log() calls logWriter.printf(), where logWriter is an instance of PrintWriter initialized with 
  pw = new PrintWriter(new FileWriter(logFile));
According to the PrintWriter documentation, this way of constructing it leaves auto-flushing disabled by default. This in turn means that calls to printf() are NOT guaranteed to flush the output, but might instead buffer it for quite some time.

I've also observed this experimentally. When running a passing test, a normal agent.2.trace contains for example:

[2023-05-08 13:56:04,031] AgentServer[2]: Started
[2023-05-08 13:56:04,048] AgentServer[2]: Listening on port 35677
[2023-05-08 13:56:04,091] AgentServer[2]: Running
[2023-05-08 13:56:04,093] AgentServer[2]: Test.java: starting execution of Test
[2023-05-08 13:56:04,162] AgentServer[2]: Test.java: finished execution of Test
[2023-05-08 13:56:04,195] AgentServer[2]: Exiting
 
Now, if the test instead sleeps indefinitely, and we kill jtreg a few seconds into the sleeping, we want to see the following:
 
[2023-05-08 13:56:04,031] AgentServer[2]: Started
[2023-05-08 13:56:04,048] AgentServer[2]: Listening on port 35677
[2023-05-08 13:56:04,091] AgentServer[2]: Running
[2023-05-08 13:56:04,093] AgentServer[2]: Test.java: starting execution of Test
 
 However, instead agent.2.trace is just empty.
I've built jtreg myself, added a ""flush()"" call, and run the above experiment again, and this time agent.2.trace does contain all the output logged up to that point as it should be.

So I'm proposing to add a ""flush()"" call to log() in AgentServer.java.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i31gr7:",9223372036854775807,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@41617238,,,,,,,,,"2023-05-10 06:44;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jtreg/pull/156
Date: 2023-05-10 13:37:50 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
jextract generates empty padding layouts,CODETOOLS-7903463,5099746,Bug,Resolved,CODETOOLS,Code Tools,software,duke,,,P3,Fixed,mcimadamore,mcimadamore,mcimadamore,2023-04-28 08:13,2023-05-02 03:47,2023-10-01 09:56,2023-05-02 03:47,,,,,,,,tools,,0,foreign-jextract,,,,,,,,,,,,,"When dealing with bitfields, jextract can sometimes emit a zero-size padding layout. This results in an exception in the JDK 21 API (and should be rectified anyway, as it is inefficient).",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i31bjn:",9223372036854775807,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@2791a97a,,,,,,,,,"2023-04-28 08:20;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jextract/pull/119
Date: 2023-04-28 15:14:33 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
JMH: perfasm profiler misses some jump edges,CODETOOLS-7903461,5099168,Bug,Resolved,CODETOOLS,Code Tools,software,duke,,,P4,Fixed,shade,shade,shade,2023-04-21 05:13,2023-04-21 09:23,2023-10-01 09:56,2023-04-21 09:21,,,,,,,,tools,,0,,,,,,,,,,,,,,"On some platforms, JMH perfasm does not render the jump edges properly, because it fails to parse the address lines correctly in the presence of oddly formatted disassembly output. This happens almost reliably on AArch64 hosts:

```
....[Hottest Region 1]..............................................................................
c2, level 4, org.openjdk.jmh.samples.jmh_generated.EnumBench_testMethod_jmhTest::testMethod_avgt_jmhStub, version 6, compile id 778
   
             0x0000ffff9c5c7fd4:   nop                                 ;   {other}
             0x0000ffff9c5c7fd8:   movk xzr, #0x2c4
             0x0000ffff9c5c7fdc:   movk xzr, #0x0
             0x0000ffff9c5c7fe0:   mov  x19, x29
             0x0000ffff9c5c7fe4:   ldr  x14, [sp, #64]
             0x0000ffff9c5c7fe8:   ldp  x13, x12, [sp]
             0x0000ffff9c5c7fec:   ldp  x20, x15, [sp, #16]         ;*invokespecial hashCode {reexecute=0 rethrow=0 return_oop=0}
                                                                       ; - java.lang.Enum::hashCode@1 (line 175)
                                                                       ; - org.openjdk.jmh.samples.EnumBench::testMethod@3 (line 52)
                                                                       ; - org.openjdk.jmh.samples.jmh_generated.EnumBench_testMethod_jmhTest::testMethod_avgt_jmhStub@17 (line 186)
   3.10%     0x0000ffff9c5c7ff0:   ldarb        w11, [x15]                  ;*getfield isDone {reexecute=0 rethrow=0 return_oop=0}
                                                                       ; - org.openjdk.jmh.samples.jmh_generated.EnumBench_testMethod_jmhTest::testMethod_avgt_jmhStub@30 (line 188)
             0x0000ffff9c5c7ff4:   ldr  x10, [x28, #896]
             0x0000ffff9c5c7ff8:   add  x20, x20, #0x1              ; ImmutableOopMap {r12=Oop r13=Oop r15=Derived_oop_r13 r14=Oop r19=Oop }
                                                                       ;*ifeq {reexecute=1 rethrow=0 return_oop=0}
                                                                       ; - (reexecute) org.openjdk.jmh.samples.jmh_generated.EnumBench_testMethod_jmhTest::testMethod_avgt_jmhStub@33 (line 188)
             0x0000ffff9c5c7ffc:   ldr  wzr, [x10]                  ;   {poll}
   1.47%  ╭  0x0000ffff9c5c8000:   cbnz w11, 0x0000ffff9c5c8034     ;*aload_1 {reexecute=0 rethrow=0 return_oop=0}
          │                                                            ; - org.openjdk.jmh.samples.jmh_generated.EnumBench_testMethod_jmhTest::testMethod_avgt_jmhStub@36 (line 189)
  10.53%  │  0x0000ffff9c5c8004:   mov  x10, #0xcce0                    // #52448
          │                                                            ;   {oop(a &apos;org/openjdk/jmh/samples/EnumBench$E&apos;{0x0000000465dfcce0})}
          │  0x0000ffff9c5c8008:   movk x10, #0x65df, lsl #16
  12.19%  │  0x0000ffff9c5c800c:   movk x10, #0x4, lsl #32
          │  0x0000ffff9c5c8010:   ldr  x10, [x10]
   6.97%  │  0x0000ffff9c5c8014:   and  x11, x10, #0x3
          │  0x0000ffff9c5c8018:   cmp  x11, #0x1
          │  0x0000ffff9c5c801c:   b.ne 0x0000ffff9c5c7fb4  // b.any
  38.49%  │  0x0000ffff9c5c8020:   lsr  x10, x10, #8
          │  0x0000ffff9c5c8024:   and  w0, w10, #0x7fffffff
          │  0x0000ffff9c5c8028:   cbz  w0, 0x0000ffff9c5c7fb4      ;*invokespecial hashCode {reexecute=0 rethrow=0 return_oop=0}
          │                                                            ; - java.lang.Enum::hashCode@1 (line 175)
          │                                                            ; - org.openjdk.jmh.samples.EnumBench::testMethod@3 (line 52)
          │                                                            ; - org.openjdk.jmh.samples.jmh_generated.EnumBench_testMethod_jmhTest::testMethod_avgt_jmhStub@17 (line 186)
  23.96%  │  0x0000ffff9c5c802c:   b    0x0000ffff9c5c7ff0
          │  0x0000ffff9c5c8030:   orr  x20, xzr, #0x1              ;*aload_1 {reexecute=0 rethrow=0 return_oop=0}
          │                                                            ; - org.openjdk.jmh.samples.jmh_generated.EnumBench_testMethod_jmhTest::testMethod_avgt_jmhStub@36 (line 189)
          ↘  0x0000ffff9c5c8034:   adr  x9, 0x0000ffff9c5c804c
             0x0000ffff9c5c8038:   mov  x8, #0xb4c8                     // #46280
                                                                       ;   {runtime_call os::javaTimeNanos()}
             0x0000ffff9c5c803c:   movk x8, #0xb487, lsl #16
             0x0000ffff9c5c8040:   movk x8, #0xffff, lsl #32
....................................................................................................

```

Back branch to `0x0000ffff9c5c7ff0` is missing, for example.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i318er:",9223372036854775807,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@b978723,,,,,,,,,"2023-04-21 05:23;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jmh/pull/100
Date: 2023-04-21 12:18:46 +0000;;;","2023-04-21 09:21;roboduke;Changeset: c6178ca3
Author:    Aleksey Shipilev <shade@openjdk.org>
Date:      2023-04-21 16:17:39 +0000
URL:       https://git.openjdk.org/jmh/commit/c6178ca35ceae1b3c0b9387535cf6c52c7dca745
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
