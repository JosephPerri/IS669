Summary,Issue key,Issue id,Issue Type,Status,Project key,Project name,Project type,Project lead,Project description,Project url,Priority,Resolution,Assignee,Reporter,Creator,Created,Updated,Last Viewed,Resolved,Affects Version/s,Affects Version/s,Affects Version/s,Affects Version/s,Affects Version/s,Affects Version/s,Affects Version/s,Affects Version/s,Fix Version/s,Component/s,Due Date,Votes,Labels,Labels,Labels,Labels,Labels,Labels,Labels,Labels,Labels,Labels,Labels,Labels,Labels,Labels,Labels,Labels,Description,Environment,Original Estimate,Remaining Estimate,Time Spent,Work Ratio,Σ Original Estimate,Σ Remaining Estimate,Σ Time Spent,Security Level,Inward issue link (Backport),Outward issue link (Backport),Outward issue link (Backport),Outward issue link (Backport),Outward issue link (Backport),Outward issue link (Backport),Outward issue link (Backport),Outward issue link (Backport),Outward issue link (Backport),Outward issue link (Backport),Outward issue link (Backport),Outward issue link (Backport),Outward issue link (Backport),Outward issue link (Backport),Outward issue link (Backport),Inward issue link (Blocks),Outward issue link (Blocks),Outward issue link (Blocks),Outward issue link (CSR),Inward issue link (Cloners),Outward issue link (Cloners),Inward issue link (Duplicate),Inward issue link (Duplicate),Outward issue link (Duplicate),Outward issue link (Duplicate),Outward issue link (Duplicate),Inward issue link (Relates),Inward issue link (Relates),Inward issue link (Relates),Inward issue link (Relates),Inward issue link (Relates),Outward issue link (Relates),Outward issue link (Relates),Outward issue link (Relates),Outward issue link (Relates),Attachment,Attachment,Attachment,Attachment,Attachment,Attachment,Attachment,Attachment,Attachment,Attachment,Attachment,Custom field ( Type of Bug [Challenge] ),Custom field (CPU),Custom field (CPU),Custom field (CPU),Custom field (Cost of Delay),Custom field (Epic Link),Custom field (Imported),Custom field (Indexed),Custom field (Introduced In Build),Custom field (Introduced In Version),Custom field (Number of Tests Affected [Challenge]),Custom field (OS),Custom field (OS),Custom field (OS),Custom field (Oracle Evaluation),Custom field (Original story points),Custom field (Parent Link),Custom field (Rank),Custom field (Rank (Obsolete)),Custom field (Resolved In Build),Custom field (Story Points),Custom field (Subcomponent),Custom field (Target end),Custom field (Target start),Custom field (Team),Custom field (Time Spent),Custom field (Understanding),Custom field (Value),Custom field (Verification),Custom field (external_bug),Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment
CSR bot can pick up wrong fix version if PR branch is behind target branch,SKARA-1850,5096986,Bug,Resolved,SKARA,Skara,software,darcy,,,P4,Fixed,zsong,kcr,kcr,2023-03-23 05:59,2023-04-06 12:44,2023-10-01 09:55,2023-04-06 12:44,,,,,,,,,1.0,bots,,0,,,,,,,,,,,,,,,,,"If a PR needs an approved CSR in order to be integrated, and if the PR branch is out of date with the target branch such that the JBS fix version in the .jcheck/conf file does not match that of the target branch, the bot will fail to match the approved CSR, since it will be looking for an approved CSR with the wrong fix version.

The reason for this is that the bot uses the .jcheck/conf from the PR branch to find the fix version. The right thing to do would be to use the .jcheck/conf from the ""merge branch"", meaning the branch that would be pushed if the PR were integrated, which is the result of applying the patch from the PR branch on top of the then-current target branch. This is currently too expensive, so the source branch is used instead. While discussing this offline, I had asked whether the target branch could be used, but that runs into a worse problem where we wouldn't be able to integrate the start-of-release PR that bumps the JBS version and implements changes that require a CSR.",,,,,,,,,,,,,,,,,,,,,,,,,SKARA-1851,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i30v8j:",9223372036854775807,,,,,,,,,,,,"2023-03-23 06:00;kcr;Here is a PR that recently ran into this:

https://github.com/openjdk/jfx/pull/999;;;","2023-03-23 06:06;erikj;I agree that the correct behavior would be to read fixVersion from the merge branch. The way the affected bots are currently structured, I believe that it would be too expensive to perform the merge for every check. If we ever reorganize the CSR bot and fold into the PR bot, then it may be possible that this issue would be easier and more feasible to solve.;;;","2023-04-04 14:15;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/skara/pull/1496
Date: 2023-03-31 21:27:10 +0000;;;","2023-04-06 12:44;roboduke;Changeset: cda21207
Author:    Zhao Song <zsong@openjdk.org>
Date:      2023-04-06 19:43:49 +0000
URL:       https://git.openjdk.org/skara/commit/cda2120762e573a2dfd2f55c523337de2a2ae05a
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,
Exception when creating a new PR from CLI,SKARA-1849,5096678,Bug,Resolved,SKARA,Skara,software,darcy,,,P4,Fixed,zsong,mcimadamore,mcimadamore,2023-03-20 09:51,2023-03-20 12:25,2023-10-01 09:55,2023-03-20 12:25,,,,,,,,,1.0,cli,,0,,,,,,,,,,,,,,,,,"$ git pr create
Exception in thread ""main"" java.lang.StringIndexOutOfBoundsException: begin 7, end 6, length 6
	at java.base/java.lang.String.checkBoundsBeginEnd(String.java:4601)
	at java.base/java.lang.String.substring(String.java:2704)
	at java.base/java.lang.String.substring(String.java:2677)
	at org.openjdk.skara.cli/org.openjdk.skara.cli.pr.GitPrCreate.main(GitPrCreate.java:256)
	at org.openjdk.skara.args/org.openjdk.skara.args.Command.main(Command.java:54)
	at org.openjdk.skara.args/org.openjdk.skara.args.MultiCommandParser.lambda$parse$2(MultiCommandParser.java:65)
	at org.openjdk.skara.cli/org.openjdk.skara.cli.GitPr.main(GitPr.java:111)
	at org.openjdk.skara.cli/org.openjdk.skara.cli.GitSkara.main(GitSkara.java:231)

This is my branch:

https://github.com/mcimadamore/jdk/tree/metadata_faster

And here some relevant bits in my git conf file:

[remote ""origin""]
	url = https://github.com/mcimadamore/jdk.git
	fetch = +refs/heads/*:refs/remotes/origin/*


[branch ""metadata_faster""]
	remote = origin
	merge = refs/heads/metadata_faster


Note, I have been able to create PRs w/o issue on this very local repository. This branch seems to rub skara the wrong way.
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i30tc3:",9223372036854775807,,,,,,,,,,,,"2023-03-20 11:30;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/skara/pull/1488
Date: 2023-03-20 18:25:32 +0000;;;","2023-03-20 12:25;roboduke;Changeset: 5170c585
Author:    Zhao Song <zsong@openjdk.org>
Date:      2023-03-20 19:25:14 +0000
URL:       https://git.openjdk.org/skara/commit/5170c58502b789d0ee9848eeadfc710905050e1e
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
mlbridge bot bridges emails generated by itself,SKARA-1843,5096339,Bug,Resolved,SKARA,Skara,software,darcy,,,P2,Fixed,gli,zsong,zsong,2023-03-15 10:32,2023-03-17 07:22,2023-10-01 09:55,2023-03-17 07:22,,,,,,,,,1.0,bots,,0,,,,,,,,,,,,,,,,,"Mlbridge bot bridged the emails generated by itself. b to the pr.

See prs here:
https://github.com/openjdk/skara/pull/1484
https://github.com/openjdk/skara/pull/1483
https://github.com/openjdk/skara/pull/1482
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i30r8r:",9223372036854775807,,,,,,,,,,,,"2023-03-15 11:01;zsong;I don't know why this happens. I think in MailingListArchiveReaderBot::inspect line 117-122, all emails from github.com will be filtered out.;;;","2023-03-15 11:17;gli;Should the `pr.repository().url().getHost()` in `MailingListArchiveReaderBot::inspect` be `pr.repository().authenticatedUrl().getHost()`? Maybe, but I can't confirm.

```
var bridgeIdPattern = Pattern.compile(""^[^.]+\\.[^.]+@"" + pr.repository().authenticatedUrl().getHost() + ""$"");
```;;;","2023-03-15 11:31;zsong;I also thought about it and made some tests. I think it's not the reason, pr.repository().url().getHost() will return the same result as pr.repository().authenticatedUrl().getHost().;;;","2023-03-15 11:50;gli;> pr.repository().url().getHost() will return the same result as pr.repository().authenticatedUrl().getHost().

The same result? Is it `git.openjdk.org` or `github.com` or `openjdk.org`?;;;","2023-03-15 11:51;zsong;I think it's github.com;;;","2023-03-15 11:53;zsong;And do you find that the email of my newest comment in your pr has not been bridged yet. I don't know if it won't be bridged or it will be bridged later.;;;","2023-03-15 11:56;gli;> And do you find that the email of my newest comment in your pr has not been bridged yet. I don't know if it won't be bridged or it will be bridged later.

I suspected you have reverted the original code just now so that the bot can run normally. But now it seems you didn't. So strange.;;;","2023-03-15 12:04;zsong;No, I didn't revert the original code. Let's just leave it and see if it will be bridged tomorrow.;;;","2023-03-15 21:09;gli; Like [1], if the GitHub forge is configured rightly:

```
""pattern"": ""^https://github.com/openjdk/(.*)$"",
""replacement"": ""https://git.openjdk.org/$1""
```

I believe `pr.repository().url().getHost()` will return `git.openjdk.org` and `pr.repository().authenticatedUrl().getHost()` will return `github.com`.

Generally speaking, all we need to control is that using the same host to generate (in method `ReviewArchive::getUniqueMessageId`) and filter (in method `MailingListArchiveReaderBot::inspect`) email `Message-id`. Form the code below, we can see they all use the `pr.repository().url().getHost()`. But unfortunately, before SKARA-1813, the `pr.repository().url().getHost()` is `github.com`, after SKARA-1813, the `pr.repository().url().getHost()` becomes `git.openjdk.org`.

```
// method ReviewArchive::getUniqueMessageId
return EmailAddress.from(encodedCommon + ""."" + UUID.randomUUID() + ""@"" + pr.repository().url().getHost());

// method MailingListArchiveReaderBot::inspect
var bridgeIdPattern = Pattern.compile(""^[^.]+\\.[^.]+@"" + pr.repository().url().getHost() + ""$"");
```

That is to say, the `Message-id` of all the historical emails have the host `github.com` and after SKARA-1813, the newly added emails have the host `git.openjdk.org`.  Please see the following three emails [2][3][4] and their `Message-id` :

```
// [2] an email before SKARA-1813
Message-id: <_l8uDhYB3qAhL7_tP28sYkhedR8Q0bBuYznOu-JlbJo=.c763fc33-8b50-4571-bb17-8c1ce1284e24@github.com>

Guoxiong Li has updated the pull request with a new target base due to a merge or a rebase. The incremental webrev excludes the unrelated changes brought in by the merge/rebase. The pull request contains two additional commits since the last revision:

 - Merge branch 'master' into SKARA-1828
 - SKARA-1828
```

```
// [3] an email after SKARA-1813
Message-id: <tORPychq3EBWoNTgvFAlrhwbcjAitfOktAXh2z_2NUo=.454c58a0-3365-4b33-937b-8cd1d151e7fd@git.openjdk.org>

It's strange that mlbridge bot bridged emails that generated by itself. Filed [SKARA-1843](https://bugs.openjdk.org/browse/SKARA-1843)
```

```
// [4] an email after SKARA-1813 and not sent by mlbridge
Message-ID: <CAPSsVqjDew+1iSYkZVyQAUs5JsyzZYnBRXOhk_zK0ipg2NKmhA@mail.gmail.com>

Test normal bridged message.
```

From [2] and  [3], we can see the host `github.com` becomes `git.openjdk.org`. The method `MailingListArchiveReaderBot::inspect` uses the `pr.repository().url().getHost()` (now it is `git.openjdk.org`) to filter the emails so that it can't filter the historical emails and can only filter the newly added emails.

If the SKARA-1813 has not been deployed, I will suggest changing `pr.repository().url().getHost()` to `pr.repository().authenticatedUrl().getHost()`. But now SKARA-1813 has been deployed in some projects, at least `SKARA`, which means that the email data has been polluted. So the solution is filtering both `git.openjdk.org` and `github.com` in method `MailingListArchiveReaderBot::inspect`.

[1] http://github.com/openjdk/skara/blob/master/forge/src/test/java/org/openjdk/skara/forge/github/GitHubRestApiTests.java#L242
[2] https://mail.openjdk.org/pipermail/skara-dev/2023-March/007592.html
[3] https://mail.openjdk.org/pipermail/skara-dev/2023-March/007596.html
[4] https://mail.openjdk.org/pipermail/skara-dev/2023-March/007597.html;;;","2023-03-15 22:21;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/skara/pull/1485
Date: 2023-03-16 05:20:54 +0000;;;","2023-03-16 15:02;erikj;Increasing priority as this is blocking deployment of recent features.;;;","2023-03-17 07:22;roboduke;Changeset: 0853677a
Author:    Guoxiong Li <gli@openjdk.org>
Date:      2023-03-17 14:21:14 +0000
URL:       https://git.openjdk.org/skara/commit/0853677abeb6d22580b3f4d0b0bfe03b4736630e
;;;",,,,,,,,,,,,,,,,,,,
Add GitHub user liach,SKARA-1841,5096227,Bug,Resolved,SKARA,Skara,software,darcy,,,P4,Fixed,erikj,liach,liach,2023-03-14 19:20,2023-03-15 06:55,2023-10-01 09:55,2023-03-15 06:55,,,,,,,,,,admin,,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i30qjv:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
A test failed due to the combination of SKARA-1823 and SKARA-755,SKARA-1840,5096187,Bug,Resolved,SKARA,Skara,software,darcy,,,P4,Fixed,zsong,zsong,zsong,2023-03-14 09:25,2023-03-15 07:16,2023-10-01 09:55,2023-03-15 07:16,,,,,,,,,1.0,bots,,0,,,,,,,,,,,,,,,,,MailingListBridgeBotTests::simpleArchive failed due to the combination of SKARA-1823 and SKARA-755.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,SKARA-1823,SKARA-755,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i30qaz:",9223372036854775807,,,,,,,,,,,,"2023-03-14 10:29;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/skara/pull/1483
Date: 2023-03-14 16:28:03 +0000;;;","2023-03-15 07:16;roboduke;Changeset: 3d179043
Author:    Zhao Song <zsong@openjdk.org>
Date:      2023-03-15 14:15:42 +0000
URL:       https://git.openjdk.org/skara/commit/3d17904356979bbaa6d9514e504e670df15fff3a
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
SKARA-1480 broke BridgeBotTests,SKARA-1839,5096102,Bug,Resolved,SKARA,Skara,software,darcy,,,P3,Fixed,erikj,erikj,erikj,2023-03-13 13:16,2023-03-13 14:58,2023-10-01 09:55,2023-03-13 14:58,,,,,,,,,1.0,bots,,0,,,,,,,,,,,,,,,,,"When changing all 'openjdk.java.net' references to 'openjdk.org', the BridgeBotTests broke, because we now have a different user mapping in those tests, which results in different Git hashes.

These tests have an assumeTrue condition in the @BeforeClass setup, which will skip if the HG server isn't available. The URL to hg.openjdk.org uses 'http', which hasn't worked since the migration to the new URL, but some time during the last few days, it started responding to 'http', which caused the tests to start running again, and subsequently fail.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,SKARA-1480,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i30ps3:",9223372036854775807,,,,,,,,,,,,"2023-03-13 13:34;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/skara/pull/1481
Date: 2023-03-13 20:33:24 +0000;;;","2023-03-13 14:58;roboduke;Changeset: 68ef9dd1
Author:    Erik Joelsson <erikj@openjdk.org>
Date:      2023-03-13 21:58:09 +0000
URL:       https://git.openjdk.org/skara/commit/68ef9dd10ad1c06c0f45349e5ed89878614cf38b
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Skara bot continuously keeps updating the PR title,SKARA-1837,5095563,Bug,Resolved,SKARA,Skara,software,darcy,,,P3,Fixed,zsong,anantsi,anantsi,2023-03-06 01:22,2023-03-13 10:59,2023-10-01 09:55,2023-03-13 09:58,,,,,,,,,1.0,bots,,0,,,,,,,,,,,,,,,,,"skara bot keeps updating the document title , not sure if this is particular to the PR format in which it was created or some bug in the skara code .
PR : https://github.com/openjdk/jdk/pull/12797
This needs to be figured out.
when i check the logs i got to see this:
[2023-03-06T09:16:42Z][60][F] Executing 'git commit-tree 54de03194b2afe61f07ac71634c79680e3ce7796 -m 8303260: (fc) FileChannel::transferFrom should support position > size() -p fa1cebedb5de10e34e9d0cd1d8a563c56b562f54 took PT0.003182692S",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,SKARA-1835,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i30mgj:",9223372036854775807,,,,,,,,,,,,"2023-03-13 09:44;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/skara/pull/1480
Date: 2023-03-13 16:36:11 +0000;;;","2023-03-13 09:58;roboduke;Changeset: e2f9ebae
Author:    Zhao Song <zsong@openjdk.org>
Date:      2023-03-13 16:57:39 +0000
URL:       https://git.openjdk.org/skara/commit/e2f9ebae6e22ca79ac7723ecfe6176e4f806fed7
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Add GitHub user parttimenerd,SKARA-1833,5095453,Bug,Resolved,SKARA,Skara,software,darcy,,,P4,Fixed,kcr,jbechberger,jbechberger,2023-03-03 01:51,2023-03-03 04:26,2023-10-01 09:55,2023-03-03 04:26,,,,,,,,,,admin,,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i30ls3:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Add GitHub user offamitkumar,SKARA-1832,5095432,Bug,Resolved,SKARA,Skara,software,darcy,,,P4,Fixed,kcr,amitkumar,amitkumar,2023-03-02 17:58,2023-03-03 04:10,2023-10-01 09:55,2023-03-03 04:10,,,,,,,,,,admin,,0,,,,,,,,,,,,,,,,,"The bots are not recognising me and got an error (no known openjdk.org user name / role) while reviewing this PR: https://github.com/openjdk/jdk/pull/11967#issue-1530813302

Probably adding me to OpenJDK organisation will solve the above issue.
Thanks",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i30lnf:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
RFR emails still be sent when PR is in draft state,SKARA-1828,5094764,Bug,Resolved,SKARA,Skara,software,darcy,,,P4,Fixed,gli,zsong,zsong,2023-02-21 11:34,2023-03-15 21:13,2023-10-01 09:55,2023-03-15 21:13,,,,,,,,,1.0,bots,,0,,,,,,,,,,,,,,,,,"SKARA-1588 was fixed few days ago. However, I find that when PR is in draft state, the RFR emails will still be sent.

I think the implementation of SKARA-1588 just let the mlbridge bot ignore the comments but not the new commits.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,SKARA-1588,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i30hiz:",9223372036854775807,,,,,,,,,,,,"2023-02-21 12:22;erikj;Right, mlbridge was fixed, but the notifier is still updating about state changes and commits.;;;","2023-03-14 14:20;zsong;No, I don't think mlbridge is fixed completely. What I mean is that, if we push new commits to a draft pr, mlbridge bot will still send RFR emails. Guoxiong's implementation in SKARA-1588 will just let the bot ignore new comments, reviews in draft prs but the bot will not ignore new commits.;;;","2023-03-14 14:33;zsong;(Please ignore this comment)After thinking more on this. I am now wondering why we bother with the complex implementation in SKARA-1588 if our goal is simply to stop all emails when the pr is in draft. Wouldn't it be easier to just remove the 'rfr' label when the pr is in draft? Is there any reason for us to keep 'rfr' label when pr is in draft mode? ;;;","2023-03-15 01:10;gli;> After thinking more on this. I am now wondering why we bother with the complex implementation in SKARA-1588 if our goal is simply to stop all emails when the pr is in draft. Wouldn't it be easier to just remove the 'rfr' label when the pr is in draft? Is there any reason for us to keep 'rfr' label when pr is in draft mode?

Actually, the `rfr` label is already removed by the PRBot in `CheckWorkItem`. Please see `CheckRun::updateReadyForReview` for the concrete code.

So currently, what we need to clarify is whether we should send email when the PR doesn't have `rfr` label.

Please considering the following steps:
1. the developer posts a comment like `I will convert this PR to draft because I think the curernt logic is wrong.`.
2. then the developer convert the PR as `draft.
3. the developer post a comment like `Converted it`.

The bot should send email for the comment in the first step but not the third step. In other words, whether it should send email not only depends on the status of the PR, but also depends on the date(time) and the other things(such as the ignored users and ignored comments we configure).;;;","2023-03-15 05:31;zsong;Sorry guoxiong, what I said is wrong. But the problem I mentioned above is still valid.;;;","2023-03-15 06:51;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/skara/pull/1484
Date: 2023-03-15 13:50:16 +0000;;;","2023-03-15 21:13;roboduke;Changeset: add1d7fc
Author:    Guoxiong Li <gli@openjdk.org>
Date:      2023-03-16 04:13:31 +0000
URL:       https://git.openjdk.org/skara/commit/add1d7fc686a5dd61c77711fd13b313b74e0f3b1
;;;",,,,,,,,,,,,,,,,,,,,,,,,
Better handling of Error ,SKARA-1827,5094520,Bug,Resolved,SKARA,Skara,software,darcy,,,P4,Fixed,erikj,erikj,erikj,2023-02-17 11:09,2023-06-13 13:25,2023-10-01 09:55,2023-06-13 13:25,,,,,,,,,1.0,bots,,0,,,,,,,,,,,,,,,,,"When a WorkItem fails with Error (as was recently experienced in SKARA-1825), the item is never removed from the active set in the BotRunner. This causes us to eventually log/ping admins about WorkItems running for too long. We also never try to log the Error, so we aren't notified about the actual problem.

I think we should add a try catch of Error/Throwable at the top level of RunnableWorkItem::run where we log and re-throw the Error.

Handling removal from the active set can be trickier, but we should at least attempt it. The problem is that we have to synchronize access to that collection. Maybe it's enough to just log the Error. Leaving the WorkItem in the active set prevents us from trying to run it again, which may be a good thing if running it is triggering Errors, but it also prevents the bot runner from trying to fully recover. In the current synchronized block we are also attempting to schedule pending tasks. It's probably not a good idea to try to do more work than absolutely necessary in a thread that has just thrown an Error.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,SKARA-1822,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i30g0r:",9223372036854775807,,,,,,,,,,,,"2023-03-22 09:48;zsong;Hi [~erikj], I just want to double check with you that for this issue, we just need to log the error and done this item, right?;;;","2023-03-22 10:08;erikj;No, in the description I'm weighing options back and forth and I'm not reaching a conclusion. I'm not decided on the best action yet.;;;","2023-03-22 10:15;zsong;OK, the reason I'm asking is also because I can't determine what your decision is.;;;","2023-03-22 13:06;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/skara/pull/1490
Date: 2023-03-22 20:05:37 +0000;;;","2023-03-22 13:59;erikj;After some deliberation, I think this is how we should handle an Error being thrown when running a WorkItem.

We need to attempt to log it and register it in the counters, otherwise it will be very hard to discover the problem.

We also need to attempt to return the scratch path to the BotRunner, as well as removing the item from the active set, otherwise the BotRunner will enter a broken state. The drawback of this is that it will allow new instances of the same WorkItem to run, which will likely repeat the Error. I still think that's the better option compared to what we experienced in SKARA-1825.

I think it's fine to skip scheduling of pending items. When an Error has been thrown in a thread, we should try to minimize any additional work in that thread to only what's necessary. Unless every WorkItem throws an Error, pending items will get scheduled eventually anyway, by some other successful WorkItem. If every WorkItem is throwing an Error, then not scheduling pending items is the least of our problems. By re-throwing the Error we make sure the Runnable exits as quickly as possible.;;;","2023-06-13 13:25;roboduke;Changeset: eb6c0bd1
Author:    Erik Joelsson <erikj@openjdk.org>
Date:      2023-06-13 20:24:48 +0000
URL:       https://git.openjdk.org/skara/commit/eb6c0bd1bbdb09558aab159e9bae8ab86c2939ef
;;;",,,,,,,,,,,,,,,,,,,,,,,,,
BotTaskAggregationHandler causes OOME,SKARA-1825,5094408,Bug,Resolved,SKARA,Skara,software,darcy,,,P2,Fixed,erikj,erikj,erikj,2023-02-16 15:05,2023-02-17 08:38,2023-10-01 09:55,2023-02-17 08:38,,,,,,,,,1.0,bots,,0,,,,,,,,,,,,,,,,,"The BotTaskAggregationHandler saves all log records in a list per thread and publishes them when a specific marker is detected in a record. This marker signals the end of a WorkItem run. If a large amount of log messages are generated by a single WorkItem, this can result in a very large amount of log messages being saved. We currently have a case where 18 million+ have been observed when processing the webrevs for https://github.com/openjdk/mobile/pull/16 in MailingListBridgeBot.

The irony here is that the only subclass of this abstract handler, the BotSlackHandler, throws away all log records that are lower level than what it's supposed to log, so we are saving all of these, only to log those of level SEVERE in the end. In the past, this class was also used for logging to logstash, and in that case, when we had one SEVERE log record, we actually wanted to log everything that lead up to it.

To fix this now, I think I will make it an option for the BotTaskAggregationHandler if it should save everything or just above the configured level.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,SKARA-1822,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i30fbv:",9223372036854775807,,,,,,,,,,,,"2023-02-16 15:43;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/skara/pull/1477
Date: 2023-02-16 23:42:48 +0000;;;","2023-02-17 08:38;roboduke;Changeset: e1eb7e73
Author:    Erik Joelsson <erikj@openjdk.org>
Date:      2023-02-17 16:37:55 +0000
URL:       https://git.openjdk.org/skara/commit/e1eb7e73276af2539d6aafa2e4f9177048a95d52
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
/reviewers N should remove ready status for clean backports,SKARA-1824,5094363,Bug,Resolved,SKARA,Skara,software,darcy,,,P3,Fixed,zsong,sgehwolf,sgehwolf,2023-02-16 06:33,2023-05-08 14:52,2023-10-01 09:55,2023-03-15 08:02,,,,,,,,,1.0,bots,,0,,,,,,,,,,,,,,,,,"See https://github.com/openjdk/jdk8u-dev/pull/231

It's a clean backport, but once I've issued the '/reviewers 1 reviewer' command, the 'ready' label remained. This is a bit odd. Either a review is required or not. By default no review is required and 'ready' is fine for clean backports. However, in this case it should remove the 'ready' label. See:
https://github.com/openjdk/jdk8u-dev/pull/231#issuecomment-1431759703",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,SKARA-1335,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i30f1v:",9223372036854775807,,,,,,,,,,,,"2023-02-16 10:15;erikj;This is definitely a valid concern, and looks like an oversight.;;;","2023-02-22 14:21;zsong;The simplest way to solve this issue would be to enable the reviewers jcheck when the /reviewers command is issued in a clean backport PR. However, this solution could introduce a problem if the reviewers jcheck requirement in the jcheck conf is stricter than the user's requirement. For example, if the jcheck conf requires two reviewers and the user issues a ""/reviewers 1"" command, the bot will still ask for at least two reviewers in the PR. Currently, most jcheck configurations only require one reviewer, so this shouldn't be a problem. 

If this solution is unacceptable, it will be more complex to address the issue.;;;","2023-02-22 15:11;erikj;I think that solution is acceptable, but we should document this caveat, both in code and in user docs.;;;","2023-03-14 08:30;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/skara/pull/1482
Date: 2023-03-13 23:08:53 +0000;;;","2023-03-15 08:02;roboduke;Changeset: aa6a5a87
Author:    Zhao Song <zsong@openjdk.org>
Date:      2023-03-15 15:01:56 +0000
URL:       https://git.openjdk.org/skara/commit/aa6a5a87d6fd5972b98c94cd65e060426034ba70
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,
Add GitHub user asgibbons,SKARA-1819,5094017,Bug,Resolved,SKARA,Skara,software,darcy,,,P4,Fixed,erikj,sgibbons,sgibbons,2023-02-13 14:06,2023-02-13 14:28,2023-10-01 09:55,2023-02-13 14:28,,,,,,,,,,admin,,0,,,,,,,,,,,,,,,,,Please add me so I can issue the /backport command.  My OpenJDK userid is sgibbons.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i30cwz:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Get rid of extra REST request in GitLabMergeRequest#author,SKARA-1818,5094013,Bug,Resolved,SKARA,Skara,software,darcy,,,P4,Fixed,zsong,zsong,zsong,2023-02-13 12:57,2023-02-13 14:58,2023-10-01 09:55,2023-02-13 14:58,,,,,,,,,1.0,bots,,0,,,,,,,,,,,,,,,,,"Currently, in GitLabMergeRequest#author, the bot makes an unnecessary REST request to retrieve the HostUser object. 
However, with recent advancements in GitLab, it's possible to parse the HostUser directly from the pull request JSON.
Getting rid of this redundant REST request would also solve the 'user is inactive' issue.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,SKARA-1616,SKARA-1630,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i30cw3:",9223372036854775807,,,,,,,,,,,,"2023-02-13 13:19;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/skara/pull/1471
Date: 2023-02-13 21:01:06 +0000;;;","2023-02-13 14:58;roboduke;Changeset: 5b209c62
Author:    Zhao Song <zsong@openjdk.org>
Date:      2023-02-13 22:57:52 +0000
URL:       https://git.openjdk.org/skara/commit/5b209c62e2e18e9951711972413ae5d239553aa5
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Add logic to allow bot run Backport Command,SKARA-1814,5093700,Bug,Resolved,SKARA,Skara,software,darcy,,,P4,Fixed,zsong,zsong,zsong,2023-02-08 14:26,2023-02-08 15:58,2023-10-01 09:55,2023-02-08 15:58,,,,,,,,,1.0,bots,,0,,,,,,,,,,,,,,,,,"In SKARA-1797, the bot would issue /backport command when the pr is integrated.

However, in the very first of Backport Command, the bot would check whether the command user is in the census. The bot itself is not in the census, so the command issued by the bot would fail.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,SKARA-1797,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i30ayj:",9223372036854775807,,,,,,,,,,,,"2023-02-08 15:15;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/skara/pull/1468
Date: 2023-02-08 22:48:50 +0000;;;","2023-02-08 15:58;roboduke;Changeset: 6e97d991
Author:    Zhao Song <zsong@openjdk.org>
Date:      2023-02-08 23:57:51 +0000
URL:       https://git.openjdk.org/skara/commit/6e97d991b531f04f77e7b4243890a152c1d84eb1
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
"URLs printed by Skara should have "".git"" at the end of the repo name",SKARA-1813,5093661,Bug,Resolved,SKARA,Skara,software,darcy,,,P4,Fixed,zsong,kcr,kcr,2023-02-08 05:28,2023-03-15 08:04,2023-10-01 09:55,2023-03-15 08:04,,,,,,,,,1.0,bots,,0,,,,,,,,,,,,,,,,,"The git commands that Skara suggests to use to fetch or update a PR branch when reviewing a PR are missing the "".git"" at the end of the repo name. GitHub will redirect to the correct URL, adding the "".git"" at the server end, but it would be better for the Skara message to add it.

For example, to review PRs in the ""jdk"" repo, Skara currently suggests this:

```
Checkout this PR locally:
$ git fetch https://git.openjdk.org/jdk pull/NNNN/head:pull/NNNN
$ git checkout pull/NNNN

Update a local copy of the PR:
$ git checkout pull/NNNN
$ git pull https://git.openjdk.org/jdk pull/NNNN/head
```

The URL of the repo sent to git should be:

https://git.openjdk.org/jdk.git

So:

```
Checkout this PR locally:
$ git fetch https://git.openjdk.org/jdk.git pull/NNNN/head:pull/NNNN
$ git checkout pull/NNNN

Update a local copy of the PR:
$ git checkout pull/NNNN
$ git pull https://git.openjdk.org/jdk.git pull/NNNN/head
```",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i30apv:",9223372036854775807,,,,,,,,,,,,"2023-02-08 11:52;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/skara/pull/1467
Date: 2023-02-08 19:51:52 +0000;;;","2023-03-15 08:04;roboduke;Changeset: 0c82310e
Author:    Zhao Song <zsong@openjdk.org>
Date:      2023-03-15 15:03:38 +0000
URL:       https://git.openjdk.org/skara/commit/0c82310ee17685663e963d7cb085e67494f8975d
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Agent throws exceptions on missing or empty descriptions,JMC-8048,5095191,Bug,Resolved,JMC,Java Mission Control,software,hirt,The production time profiling and diagnostics tools-suite for the HotSpot JDK.,,P4,Fixed,rschmelter,rschmelter,rschmelter,2023-02-28 06:13,2023-03-12 21:31,2023-10-01 09:55,2023-03-07 07:43,,,,,,,,,9.0.0,Mission Control Core,,0,,,,,,,,,,,,,,,,,"When the description of an event or value is empty or missing, the agent fails with exceptions like this:

 
{noformat}
SEVERE: Failed to generate event class for JFRTransformDescriptor method:toString()Ljava/lang/String;, eventName:StringBuilder.toString(), #params:0
java.lang.IllegalArgumentException: value null
        at org.openjdk.jmc.internal.org.objectweb.asm.SymbolTable.addConstant(SymbolTable.java:501)
        at org.openjdk.jmc.internal.org.objectweb.asm.AnnotationWriter.visit(AnnotationWriter.java:259)
        at org.openjdk.jmc.agent.jfr.impl.JFREventClassGenerator.generateClassAnnotations(JFREventClassGenerator.java:231)
        at org.openjdk.jmc.agent.jfr.impl.JFREventClassGenerator.generateEventClass(JFREventClassGenerator.java:70)
        at org.openjdk.jmc.agent.jfr.impl.JFRClassVisitor.generateEventClass(JFRClassVisitor.java:109)
        at org.openjdk.jmc.agent.jfr.impl.JFRClassVisitor.visitEnd(JFRClassVisitor.java:89)
        at org.openjdk.jmc.internal.org.objectweb.asm.ClassReader.accept(ClassReader.java:722)
        at org.openjdk.jmc.internal.org.objectweb.asm.ClassReader.accept(ClassReader.java:401)
        at org.openjdk.jmc.agent.Transformer.doJFRLogging(Transformer.java:104)
        at org.openjdk.jmc.agent.Transformer.doTransform(Transformer.java:85)
        at org.openjdk.jmc.agent.Transformer.doTransforms(Transformer.java:75)
        at org.openjdk.jmc.agent.Transformer.transform(Transformer.java:63)
        at java.instrument/java.lang.instrument.ClassFileTransformer.transform(ClassFileTransformer.java:246)
        at java.instrument/sun.instrument.TransformerManager.transform(TransformerManager.java:188)
        at java.instrument/sun.instrument.InstrumentationImpl.transform(InstrumentationImpl.java:563)
        at java.instrument/sun.instrument.InstrumentationImpl.retransformClasses0(Native Method)
        at java.instrument/sun.instrument.InstrumentationImpl.retransformClasses(InstrumentationImpl.java:167)
        at org.openjdk.jmc.agent.jmx.AgentController.defineEventProbes(AgentController.java:80)
        at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
        at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
        at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
        at java.base/java.lang.reflect.Method.invoke(Method.java:566)
        at sun.reflect.misc.Trampoline.invoke(MethodUtil.java:71)
        at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
        at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
        at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
        at java.base/java.lang.reflect.Method.invoke(Method.java:566)
        at java.base/sun.reflect.misc.MethodUtil.invoke(MethodUtil.java:260)
        at java.management/com.sun.jmx.mbeanserver.ConvertingMethod.invokeWithOpenReturn(ConvertingMethod.java:193)
        at java.management/com.sun.jmx.mbeanserver.ConvertingMethod.invokeWithOpenReturn(ConvertingMethod.java:175)
        at java.management/com.sun.jmx.mbeanserver.MXBeanIntrospector.invokeM2(MXBeanIntrospector.java:117)
        at java.management/com.sun.jmx.mbeanserver.MXBeanIntrospector.invokeM2(MXBeanIntrospector.java:54)
        at java.management/com.sun.jmx.mbeanserver.MBeanIntrospector.invokeM(MBeanIntrospector.java:237)
        at java.management/com.sun.jmx.mbeanserver.PerInterface.invoke(PerInterface.java:138)
        at java.management/com.sun.jmx.mbeanserver.MBeanSupport.invoke(MBeanSupport.java:252)
        at java.management/com.sun.jmx.interceptor.DefaultMBeanServerInterceptor.invoke(DefaultMBeanServerInterceptor.java:809)
        at java.management/com.sun.jmx.mbeanserver.JmxMBeanServer.invoke(JmxMBeanServer.java:801)
        at example.jfr/examples.UniversalConverter.defineProbes(UniversalConverter.java:359)
        at example.jfr/examples.EmptyDescriptionTest.main(EmptyDescriptionTest.java:6)
 
{noformat}
Since the description annotations are not required and the exception is hard to relate to the missing description, the agent should just omit the description annotation in that case.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i30k5v:",9223372036854775807,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6c75159f,,,,,,,,,"2023-02-28 06:26;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jmc/pull/473
Date: 2023-02-28 14:18:18 +0000;;;","2023-03-07 07:43;roboduke;Changeset: 70417c11
Author:    Ralf Schmelter <rschmelter@openjdk.org>
Committer: Christoph Langer <clanger@openjdk.org>
Date:      2023-03-07 15:42:47 +0000
URL:       https://git.openjdk.org/jmc/commit/70417c1109ec655f051e5ad48c82e1b51f6f8b7f
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
build.bat --packageAgent doesn't detect failed builds,JMC-8046,5095077,Bug,Resolved,JMC,Java Mission Control,software,hirt,The production time profiling and diagnostics tools-suite for the HotSpot JDK.,,P4,Fixed,rschmelter,rschmelter,rschmelter,2023-02-27 08:31,2023-04-23 23:58,2023-10-01 09:55,2023-04-18 13:14,,,,,,,,,9.0.0,Release Engineering,,0,,,,,,,,,,,,,,,,,"When running build.bat --packageAgent, the build.bat doesn't detect if the maven call fails, since the ERRORLEVEL variable is overridden by the ""cd .."" call before it is checked. Additionally the format of the if/else construct is wrong (uses curly braces in the else part).

 ",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,windows,,,,,,"0|i30jgj:",9223372036854775807,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@5dc4c445,,,,,,,,,"2023-02-27 08:45;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jmc/pull/472
Date: 2023-02-27 16:36:16 +0000;;;","2023-04-18 13:14;roboduke;Changeset: 1fb69d47
Author:    Ralf Schmelter <rschmelter@openjdk.org>
Committer: Christoph Langer <clanger@openjdk.org>
Date:      2023-04-18 20:13:21 +0000
URL:       https://git.openjdk.org/jmc/commit/1fb69d47fa54bbf98e2463c0b07be2272b6f8a87
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
retransformClasses() doesn't retransform all needed classes,JMC-8045,5095063,Bug,Resolved,JMC,Java Mission Control,software,hirt,The production time profiling and diagnostics tools-suite for the HotSpot JDK.,,P3,Fixed,rschmelter,rschmelter,rschmelter,2023-02-27 04:27,2023-03-12 21:31,2023-10-01 09:55,2023-03-07 13:59,,,,,,,,,9.0.0,Mission Control Core,,0,,,,,,,,,,,,,,,,,"The retransformClasses() methods in Agent and AgentController use Class.forName() to try to get the class objects of  classes needed to retransform. This obviously doesn't work for classes loaded by classloaders different from the one which loads the agent.

Those classes would be instrumented if they were loaded after their event probes were defined the AgentController. But when loaded earlier they would not be instrumented.

The fix is to iterate over all loaded classes via Instrumentation.getAllLoadedClasses() and check if a class matches an event probe definition.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i30jdf:",9223372036854775807,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6c75159f,,,,,,,,,"2023-02-28 00:53;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jmc/pull/471
Date: 2023-02-27 15:10:25 +0000;;;","2023-03-07 13:59;roboduke;Changeset: d63bf342
Author:    Ralf Schmelter <rschmelter@openjdk.org>
Committer: Christoph Langer <clanger@openjdk.org>
Date:      2023-03-07 21:56:43 +0000
URL:       https://git.openjdk.org/jmc/commit/d63bf342856df9bdaa537dffeb881e390a1bbe47
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
JfrRulesReport -format json produce incomplete results,JMC-8041,5094823,Bug,Resolved,JMC,Java Mission Control,software,hirt,The production time profiling and diagnostics tools-suite for the HotSpot JDK.,,P3,Fixed,schaturvedi,schaturvedi,schaturvedi,2023-02-22 03:14,2023-02-26 21:54,2023-10-01 09:55,2023-02-26 11:19,,,,,,,,,9.0.0,Mission Control Core,,0,,,,,,,,,,,,,,,,,"While generating *JFR Rules Report* in json format, the results for all the rules are incomplete. The components ""message"" and ""detailedMessage"" are not populated at all. The output of JSON report contains blank placeholders like below:
""message"": """",
""detailedMessage"": """"",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i30hw3:",9223372036854775807,,,,,,,,,,,,"2023-02-22 04:33;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jmc/pull/468
Date: 2023-02-22 12:23:16 +0000;;;","2023-02-26 11:19;roboduke;Changeset: dd11789e
Author:    Suchita Chaturvedi <schaturvedi@openjdk.org>
Date:      2023-02-26 19:19:08 +0000
URL:       https://git.openjdk.org/jmc/commit/dd11789ed48abb5e12bd99cc631a9be7a5afa9ff
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Cleanups in configuration.test and graphview.test,JMC-8037,5094636,Bug,Resolved,JMC,Java Mission Control,software,hirt,The production time profiling and diagnostics tools-suite for the HotSpot JDK.,,P4,Fixed,clanger,clanger,clanger,2023-02-20 10:16,2023-03-12 21:31,2023-10-01 09:55,2023-03-07 13:59,,,,,,,,,9.0.0,Mission Control Client,,0,,,,,,,,,,,,,,,,,"In org.openjdk.jmc.flightrecorder.configuration.test:

Remove [org.eclipse.jdt.core.prefs|https://github.com/openjdk/jmc/blob/master/application/tests/org.openjdk.jmc.flightrecorder.configuration.test/.settings/org.eclipse.jdt.core.prefs] (.gitignored)

Change Bundle-RequiredExecutionEnvironment to JAVASE-11

In org.openjdk.jmc.flightrecorder.graphview.test:

Add .classpath file",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i30gqj:",9223372036854775807,,,,,,,,,,,,"2023-02-20 10:24;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jmc/pull/466
Date: 2023-02-20 18:18:18 +0000;;;","2023-03-07 13:59;roboduke;Changeset: 91329f1b
Author:    Christoph Langer <clanger@openjdk.org>
Date:      2023-03-07 21:58:36 +0000
URL:       https://git.openjdk.org/jmc/commit/91329f1b8d9896d5160e22262f06385bf43e960b
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Update Java version in GHA workflow to 11.0.18,JMC-8035,5094457,Bug,Resolved,JMC,Java Mission Control,software,hirt,The production time profiling and diagnostics tools-suite for the HotSpot JDK.,,P4,Fixed,clanger,clanger,clanger,2023-02-17 03:10,2023-02-26 21:54,2023-10-01 09:55,2023-02-20 06:48,,,,,,,,,9.0.0,docs,,0,,,,,,,,,,,,,,,,,The JMC Github Action workflow currently uses OpenJDK 11.0.14. We should bump it to 11.0.18.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i30fmr:",9223372036854775807,,,,,,,,,,,,"2023-02-17 03:17;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jmc/pull/465
Date: 2023-02-17 11:12:03 +0000;;;","2023-02-20 06:48;roboduke;Changeset: cce93507
Author:    Christoph Langer <clanger@openjdk.org>
Date:      2023-02-20 14:45:43 +0000
URL:       https://git.openjdk.org/jmc/commit/cce935078953ca84b3b341d01cda700707702e08
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Compiler crash when compiling record patterns with var,JDK-8305582,5097885,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,abimpoudis,abimpoudis,abimpoudis,2023-04-04 08:26,2023-05-28 20:48,2023-10-01 09:55,2023-05-23 04:25,21,,,,,,,,21,tools,,0,,,,,,,,,,,,,,,,,"class Vars {
    record Point(int x, int y) {}
    enum Color {RED, GREEN, BLUE}
    record ColoredPoint (Point p, Color c) {}

    public static void main(String[] args) {
        var cp = new ColoredPoint(new Point(3,4), Color.RED);
        foo(cp);
    }

    public static void foo(Object o) {
        if (o instanceof ColoredPoint(var(var x, var y), var c)) {
            System.out.println(y);
        }
    }
}

The offending expression is:

   o instanceof ColoredPoint(var(var x, var y), var c)

where the first var is erroneously placed.

Stacktrace:

An exception has occurred in the compiler (21-internal). Please file a bug against the Java compiler via the Java bug reporting page (https://bugreport.java.com) after checking the Bug Database (https://bugs.java.com) for duplicates. Include your program, the following diagnostic, and the parameters passed to the Java compiler in your report. Thank you.
java.lang.NullPointerException: Cannot invoke ""com.sun.tools.javac.tree.JCTree.accept(com.sun.tools.javac.tree.JCTree$Visitor)"" because ""tree"" is null
        at jdk.compiler/com.sun.tools.javac.comp.Attr.attribTree(Attr.java:663)
        at jdk.compiler/com.sun.tools.javac.comp.Attr.attribType(Attr.java:729)
        at jdk.compiler/com.sun.tools.javac.comp.Attr.attribType(Attr.java:722)
        at jdk.compiler/com.sun.tools.javac.comp.Attr.visitRecordPattern(Attr.java:4197)
        at jdk.compiler/com.sun.tools.javac.tree.JCTree$JCRecordPattern.accept(JCTree.java:2481)
        at jdk.compiler/com.sun.tools.javac.comp.Attr.attribTree(Attr.java:663)
        at jdk.compiler/com.sun.tools.javac.comp.Attr.attribExpr(Attr.java:709)
        at jdk.compiler/com.sun.tools.javac.comp.Attr.visitRecordPattern(Attr.java:4230)
        at jdk.compiler/com.sun.tools.javac.tree.JCTree$JCRecordPattern.accept(JCTree.java:2481)
        at jdk.compiler/com.sun.tools.javac.comp.Attr.attribTree(Attr.java:663)
        at jdk.compiler/com.sun.tools.javac.comp.Attr.attribExpr(Attr.java:709)
        at jdk.compiler/com.sun.tools.javac.comp.Attr.visitTypeTest(Attr.java:4106)
        at jdk.compiler/com.sun.tools.javac.tree.JCTree$JCInstanceOf.accept(JCTree.java:2237)
        at jdk.compiler/com.sun.tools.javac.comp.Attr.attribTree(Attr.java:663)
        at jdk.compiler/com.sun.tools.javac.comp.Attr.visitParens(Attr.java:3944)
        at jdk.compiler/com.sun.tools.javac.tree.JCTree$JCParens.accept(JCTree.java:2034)
        at jdk.compiler/com.sun.tools.javac.comp.Attr.attribTree(Attr.java:663)
        at jdk.compiler/com.sun.tools.javac.comp.Attr.attribExpr(Attr.java:709)
        at jdk.compiler/com.sun.tools.javac.comp.Attr.visitIf(Attr.java:2212)
        at jdk.compiler/com.sun.tools.javac.tree.JCTree$JCIf.accept(JCTree.java:1573)
        at jdk.compiler/com.sun.tools.javac.comp.Attr.attribTree(Attr.java:663)
        at jdk.compiler/com.sun.tools.javac.comp.Attr.attribStat(Attr.java:737)
        at jdk.compiler/com.sun.tools.javac.comp.Attr.attribStats(Attr.java:756)
        at jdk.compiler/com.sun.tools.javac.comp.Attr.visitBlock(Attr.java:1440)
        at jdk.compiler/com.sun.tools.javac.tree.JCTree$JCBlock.accept(JCTree.java:1088)
        at jdk.compiler/com.sun.tools.javac.comp.Attr.attribTree(Attr.java:663)
        at jdk.compiler/com.sun.tools.javac.comp.Attr.attribStat(Attr.java:737)
        at jdk.compiler/com.sun.tools.javac.comp.Attr.visitMethodDef(Attr.java:1230)
        at jdk.compiler/com.sun.tools.javac.tree.JCTree$JCMethodDecl.accept(JCTree.java:912)
        at jdk.compiler/com.sun.tools.javac.comp.Attr.attribTree(Attr.java:663)
        at jdk.compiler/com.sun.tools.javac.comp.Attr.attribStat(Attr.java:737)
        at jdk.compiler/com.sun.tools.javac.comp.Attr.attribClassBody(Attr.java:5593)
        at jdk.compiler/com.sun.tools.javac.comp.Attr.attribClass(Attr.java:5485)
        at jdk.compiler/com.sun.tools.javac.comp.Attr.attribClass(Attr.java:5309)
        at jdk.compiler/com.sun.tools.javac.comp.Attr.attrib(Attr.java:5248)
        at jdk.compiler/com.sun.tools.javac.main.JavaCompiler.attribute(JavaCompiler.java:1335)
        at jdk.compiler/com.sun.tools.javac.main.JavaCompiler.compile(JavaCompiler.java:964)
        at jdk.compiler/com.sun.tools.javac.api.JavacTaskImpl.lambda$doCall$0(JavacTaskImpl.java:104)
        at jdk.compiler/com.sun.tools.javac.api.JavacTaskImpl.invocationHelper(JavacTaskImpl.java:152)
        at jdk.compiler/com.sun.tools.javac.api.JavacTaskImpl.doCall(JavacTaskImpl.java:100)
        at jdk.compiler/com.sun.tools.javac.api.JavacTaskImpl.call(JavacTaskImpl.java:94)
        at jdk.compiler/com.sun.tools.javac.launcher.Main.compile(Main.java:399)
        at jdk.compiler/com.sun.tools.javac.launcher.Main.run(Main.java:202)
        at jdk.compiler/com.sun.tools.javac.launcher.Main.main(Main.java:132)
error: compilation failed",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i310hv:",9223372036854775807,b24,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4dca67bd,,,,,,,,,"2023-04-04 08:41;lujaniuk;This also crashes the same way:

switch(cp) {
	case ColoredPoint(var (var x, var y), var c):
		System.out.println(""foo"");
		break;
	default: 
		System.out.println(""bar"");
};;;","2023-04-04 10:43;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/13331
Date: 2023-04-04 17:34:27 +0000;;;","2023-05-23 04:25;dukebot;Changeset: 80d7de70
Author:    Aggelos Biboudis <abimpoudis@openjdk.org>
Committer: Jan Lahoda <jlahoda@openjdk.org>
Date:      2023-05-23 11:18:55 +0000
URL:       https://git.openjdk.org/jdk/commit/80d7de7074ef5b78e458f5e2cb88938b722eecc0
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,
X11GraphicsDevice.pGetBounds() is slow in remote X11 sessions,JDK-8305578,5097883,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,mkartashev,mkartashev,mkartashev,2023-04-04 07:44,2023-05-31 23:25,2023-10-01 09:55,2023-05-24 05:49,11,17,dev,,,,,,21,client-libs,,0,X11,X11Graphics,,,,,,,,,,,,,,,"When Java GUI is displayed over a slow network connection (either directly via 'export DISPLAY' or with 'ssh -Y'), a significant amount of time is spent in a native method called sun.awt.X11GraphicsDevice.pGetBounds(); the method is essentially the backbone of X11GraphicsDevice.getBounds(). This leads to noticeable freezes (up to several seconds) at random intervals.

There are other scenarios where the bounds of a graphics device may become a performance bottleneck:
* there are tools the emulate many monitors such as [1] and, when the number of monitors is large enough, can be slow in responding,
* in an XWayland environment, when several monitors have different scaling factors their bounds are used for calculating the correct position and size of windows (this part is under the umbrella of the Wakefield project). This operation is so frequent that it puts a lot of pressure on X11GraphicsDevice.getBounds().

[1] https://github.com/phillipberndt/fakexrandr",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8308875,,,,,,,,,,,,,,,,,,,,,generic,,,,,,,,,,linux,,,,,,"0|i310hf:",9223372036854775807,b25,,,,,,,,,,,"2023-04-05 01:27;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/13346
Date: 2023-04-05 08:19:50 +0000;;;","2023-05-24 05:49;dukebot;Changeset: d7245f70
Author:    Maxim Kartashev <mkartashev@openjdk.org>
Committer: Alexey Ushakov <avu@openjdk.org>
Date:      2023-05-24 12:48:37 +0000
URL:       https://git.openjdk.org/jdk/commit/d7245f70e7bac1236bbcdcd9b25346ca22ab8bb2
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Change StringDedup thread to derive from JavaThread,JDK-8305566,5097871,Bug,Closed,JDK,JDK,software,duke,,,P2,Fixed,kbarrett,dcubed,dcubed,2023-04-04 07:01,2023-07-07 03:31,2023-10-01 09:55,2023-04-27 20:11,17,20,21,,,,,,21,hotspot,,0,amazon-interest,gc-pending-review,intermittent,tier3,zgc,,,,,,,,,,,,"[As discussed in comments, ZGC doesn't expect non-JavaThreads to execute load barriers.  The StringDedup thread being a ConcurrentGCThread runs afoul of this, resulting in the described crash.]

The following test failed in the JDK21 CI:

gc/stringdedup/TestStringDeduplicationFullGC.java#Z

Here's a snippet from the log file:

[0.938s][info ][gc,heap                 ] GC(0)   Garbage:         -                 4M (4%)            4M (4%)            2M (2%)             -                  -          
[0.938s][info ][gc,heap                 ] GC(0) Reclaimed:         -                  -                 0M (0%)            1M (2%)             -                  -          
[0.938s][info ][gc                      ] GC(0) Garbage Collection (System.gc()) 6M(6%)->6M(6%)
End: Full GC 1/3
Creating strings: total=10, unique=10
Begin: Full GC 2/3
[0.941s][info ][gc,start                ] GC(1) Garbage Collection (System.gc())
[0.941s][info ][gc,task                 ] GC(1) Using 1 workers
[0.942s][info ][gc,phases               ] GC(1) Pause Mark Start 0.016ms
[0.954s][debug][stringdedup,phases      ] Process paused
[0.954s][debug][stringdedup,phases,start] Resize Table: 503 -> 1009 (7043)
[0.957s][debug][stringdedup,phases      ] Resize Table end: 3.009ms
[0.957s][debug][stringdedup,phases      ] Process resume
[0.974s][info ][gc,phases               ] GC(1) Concurrent Mark 32.457ms
[1.047s][info ][gc,phases               ] GC(1) Pause Mark End 71.251ms
[1.047s][info ][gc,phases               ] GC(1) Concurrent Mark Free 0.004ms
[1.061s][info ][gc,phases               ] GC(1) Concurrent Process Non-Strong References 13.737ms
[1.061s][info ][gc,phases               ] GC(1) Concurrent Reset Relocation Set 0.001ms
#
# A fatal error has been detected by the Java Runtime Environment:
#
#  SIGSEGV (0xb) at pc=0x00007f62ae56f8a8, pid=2737741, tid=2737799
#
# JRE version: Java(TM) SE Runtime Environment (21.0+17) (fastdebug build 21-ea+17-LTS-1389)
# Java VM: Java HotSpot(TM) 64-Bit Server VM (fastdebug 21-ea+17-LTS-1389, mixed mode, sharing, tiered, compressed class ptrs, z gc, linux-amd64)
# Problematic frame:
# V  [libjvm.so+0x18a68a8]  ZBarrier::weak_load_barrier_on_phantom_oop_slow_path(unsigned long)+0x108
#
# Core dump will be written. Default location: Core dumps may be processed with ""/opt/core.sh %p"" (or dumping to /opt/mach5/mesos/work_dir/slaves/741e9afd-8c02-45c3-b2e2-9db1450d0832-S40887/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/5f625517-5f22-40b0-b043-1a08f2001475/runs/a55f33e6-6f08-4389-b859-d0c6c6fecd6b/testoutput/test-support/jtreg_open_test_hotspot_jtreg_tier1_gc/scratch/5/core.2737741)
#
# An error report file with more information is saved as:
# /opt/mach5/mesos/work_dir/slaves/741e9afd-8c02-45c3-b2e2-9db1450d0832-S40887/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/5f625517-5f22-40b0-b043-1a08f2001475/runs/a55f33e6-6f08-4389-b859-d0c6c6fecd6b/testoutput/test-support/jtreg_open_test_hotspot_jtreg_tier1_gc/scratch/5/hs_err_pid2737741.log
#
# If you would like to submit a bug report, please visit:
#   https://bugreport.java.com/bugreport/crash.jsp
#

[2023-04-04T13:08:54.929696596Z] Waiting for completion for process 2737741
[2023-04-04T13:08:54.929875235Z] Waiting for completion finished for process 2737741
[2023-04-04T13:08:54.929926542Z] Waiting for completion for process 2737741
[2023-04-04T13:08:54.930043654Z] Waiting for completion finished for process 2737741
[2023-04-04T13:08:54.952614699Z] Waiting for completion for process 2737741
[2023-04-04T13:08:54.952852250Z] Waiting for completion finished for process 2737741
----------System.err:(144/11150)----------


Here's the crashing thread's stack:

---------------  T H R E A D  ---------------

Current thread (0x00007f62a813aaf0):  ConcurrentGCThread ""StringDedupProcessor"" [stack: 0x00007f62904cc000,0x00007f62905cc000] [id=2737799]

Stack: [0x00007f62904cc000,0x00007f62905cc000],  sp=0x00007f62905caa00,  free space=1018k
Native frames: (J=compiled Java code, j=interpreted, Vv=VM code, C=native code)
V  [libjvm.so+0x18a68a8]  ZBarrier::weak_load_barrier_on_phantom_oop_slow_path(unsigned long)+0x108  (zPage.inline.hpp:192)
V  [libjvm.so+0x89ef0e]  AccessInternal::PostRuntimeDispatch<ZBarrierSet::AccessBarrier<598084ul, ZBarrierSet>, (AccessInternal::BarrierType)2, 598084ul>::oop_access_barrier(void*)+0x23e  (zBarrier.inline.hpp:151)
V  [libjvm.so+0x162dd49]  StringDedup::Processor::process_requests(SuspendibleThreadSetJoiner*) const+0x1c9  (accessBackend.hpp:479)
V  [libjvm.so+0x162eb83]  StringDedup::Processor::run_service()+0x83  (stringDedupProcessor.cpp:201)
V  [libjvm.so+0x9f643b]  ConcurrentGCThread::run()+0x1b  (concurrentGCThread.cpp:48)
V  [libjvm.so+0x1766498]  Thread::call_run()+0xb8  (thread.cpp:224)
V  [libjvm.so+0x14695ea]  thread_native_entry(Thread*)+0x11a  (os_linux.cpp:740)

siginfo: si_signo: 11 (SIGSEGV), si_code: 1 (SEGV_MAPERR), si_addr: 0x0000000000000004",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,x86_64,,,,,,,,,,linux,,,,,,"0|i310er:",9223372036854775807,b21,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6b00f96c,,,,,,,Not verified,,"2023-04-04 07:06;stefank;Likely to be a problem because the StringDedupProcessor thread is a ConcurrentGCThread and the ZResurrection code doesn't expect that a non-Java thread is performing load barriers.;;;","2023-04-12 13:20;kbarrett;I think there might not be a strong reason for the StringDedupProcessor thread to be a ConcurrentGCThread.  I'll take a look.
;;;","2023-04-27 19:56;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/13607
Date: 2023-04-24 08:24:53 +0000;;;","2023-04-27 20:11;dukebot;Changeset: d3abfec8
Author:    Kim Barrett <kbarrett@openjdk.org>
Date:      2023-04-28 03:11:00 +0000
URL:       https://git.openjdk.org/jdk/commit/d3abfec8b7ce901150952356f9f1109d09a8cb2a
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,
DefaultProxySelector.select(URI) in certain cases returns a List with null element,JDK-8305529,5097441,Bug,Closed,JDK,JDK,software,duke,,,P4,Fixed,jpai,webbuggrp,webbuggrp,2023-03-29 20:09,2023-07-21 07:36,2023-10-01 09:55,2023-04-12 18:32,11,17,,,,,,,21,core-libs,,0,additional-information-received,dcsaw,reproducer-other,webbug,,,,,,,,,,,,,"ADDITIONAL SYSTEM INFORMATION :
OpenJDK Runtime Environment 11.0.18 / Linux 5.15.0-1029-kvm (amd64)

# Environment Variables
http_proxy = 
https_proxy = 
sock_proxy = 

# System Properties
java.version = 11.0.18
java.version.date = 2023-01-17
java.vm.specification.name = Java Virtual Machine Specification
java.vm.specification.vendor = Oracle Corporation
java.vm.specification.version = 11
java.vm.vendor = Ubuntu
java.vm.version = 11.0.18+10-post-Ubuntu-0ubuntu122.04

A DESCRIPTION OF THE PROBLEM :
The new HTTP/2 client unexpected throws NPEs on some end-users systems. The reason seems to be the existence of set but empty environment variables: http_proxy | https_proxy | sock_proxy


Here's the original bug report from our customer:
https://www.filebot.net/forums/viewtopic.php?t=13656


FREQUENCY : often


",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JI-9075069,,,,,,,,,,,,,,,,x86_64,,,,,,,,,,linux,,,,,,"0|i30y1n:",9223372036854775807,b19,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@446e124a,,,,,,,Verified,,"2023-03-30 06:59;tongwan;Requested a simple Java reproducer from the submitter.;;;","2023-04-04 02:12;tongwan;Additional information from the submitter:
I'm currently unable to make a reproducible test case because I'm on macOS / JDK17 and cannot reproduce the issue here in my environment.  The error does suggest the issue originates from JDK internals though, though I don't know what the code for Linux / JDK11 would look like specifically there.;;;","2023-04-05 06:16;tongwan;Additional information from the submitter:
The issue affects both JDK11 and JDK17, and up probably.

We were able to further narrow down the issue to -Djava.net.useSystemProxies=true being set in combination with invalid system proxy (i.e. set but empty environment variables) settings:
https://www.filebot.net/forums/viewtopic.php?p=59805#p59805

The NPE likely originates from this line here because testing on JDK the NPE gives additional information: Cannot invoke ""java.net.Proxy.type()"" because ""<local4>"" is null
https://github.com/openjdk/jdk20u/blob/master/src/java.net.http/share/classes/jdk/internal/net/http/HttpRequestImpl.java#L304

My guess is that the native Proxy[] DefaultProxySelector::getSystemProxies method somehow returns a Proxy array that is not null, but unexpectedly contains null elements for some reason:
https://github.com/openjdk/jdk/blob/master/src/java.base/unix/native/libnet/DefaultProxySelector.c#L460

;;;","2023-04-09 18:29;tongwan;Additional information from the submitter:
JDK11 and JDK17 on Desktop Linux with Gnome Desktop Manager. Possibly an issue with GConf behaving strange in some odd environments, and then tripping the JDK with unexpected null values.

Reproducible for some of our customers, but we haven't been able to reproduce the issue in VMs or docker environments:
https://www.filebot.net/forums/viewtopic.php?t=13656
https://www.filebot.net/forums/viewtopic.php?t=13678

A DESCRIPTION OF THE PROBLEM :
The new HTTP/2 client fails with an NPE in internal JDK code if the code is running in a oddly configured Linux environment, with set but empty proxy environment variable AND java.net.useSystemProxies=true enabled via Java System Properties.

$ printenv | grep proxy
https_proxy=
sock_proxy=
http_proxy=

The NPE originates from this line in HttpRequestImpl::retrieveProxy with the following exception message: Cannot invoke ""java.net.Proxy.type()"" because ""<local4>"" is null
https://github.com/openjdk/jdk20u/blob/master/src/java.net.http/share/classes/jdk/internal/net/http/HttpRequestImpl.java#L304

My guess is that the native Proxy[] DefaultProxySelector::getSystemProxies method somehow returns a Proxy array that is not null, but unexpectedly contains null elements for some reason:
https://github.com/openjdk/jdk/blob/master/src/java.base/unix/native/libnet/DefaultProxySelector.c#L460

STEPS TO FOLLOW TO REPRODUCE THE PROBLEM :
Sorry, I was *not* able to reproduce the issue on various Desktop Linux machines using the following test case:

groovy -Djava.net.useSystemProxies=true -e 'println java.net.http.HttpClient.newHttpClient().send(java.net.http.HttpRequest.newBuilder().uri(new URI(""https://bugs.java.com/bugdatabase/"")).GET().build(),java.net.http.HttpResponse.BodyHandlers.ofString())'

So this test case is untested, because so far it's worked as expected and I haven't actually managed to reproduce the issue reported by customers.

EXPECTED VERSUS ACTUAL BEHAVIOR :
EXPECTED -
JDK internals should never throw NPEs. Perhaps an extra .filter(Objects::notNull) here would be good just in case:
https://github.com/openjdk/jdk20u/blob/master/src/java.base/share/classes/sun/net/spi/DefaultProxySelector.java#L322

CUSTOMER SUBMITTED WORKAROUND :
Using -DuseSystemProxies=false resolves the issue. This is also default in the JDK, so it's probably not an issue for most JDK users.

FREQUENCY : always
;;;","2023-04-11 03:56;jpai;Thank you for the detailed report and the investigation of this issue in the linked forum threads.

There's more than one issue across different libraries here. The JDK has a bug where in its *nix implementation of the DefaultProxySelector, it can sometimes end up returning an array with null element in it, which then causes this NullPointerException. That bug is trivially reproducible when one of the proxy related environment variables is set to an incorrect (but non-empty value) and the java.net.useSystemProxies system property is set to true. I was able to reproduce this one easily.

The other part to this issue is that, the reporter notes that the users have been hitting this issue when the proxy related environment variables are set to empty values and java.net.useSystemProxies system property is set to true. The linked forum threads indeed show that the values are empty, like this snippet from one of those logs in that forum:

...
SYSTEMD_EXEC_PID = 25216
USER = qbtuser
http_proxy = 
https_proxy = 
sock_proxy = 
# Java System Properties
....

However, I haven't able to reproduce this issue with empty values. To be sure that the fix I propose would indeed fix this issue, I looked at the underlying library's code that the JDK uses (glib-2.0, whose source is here https://gitlab.gnome.org/GNOME/glib). It appears that as recently as around 9 months back there was a fix made to make sure that this library skips/ignores empty values for such environment variables https://gitlab.gnome.org/GNOME/glib/-/commit/6f83f45db4b859839b81f07cc942a49834663ffc. Before this fix, it appears that the library would use these empty values and then raise errors later on, which then the JDK code would ignore (that's the bug in the JDK). That explains why I couldn't reproduce this issue with empty values - the system where I'm testing this, is on version 2.72.4 of this glib-2.0 library and this version has that fix.

It's likely that the users that are running into this issue, on that forum, are on a different version of glib-2.0 library which doesn't have the fix to ignore empty values and that's then triggering the JDK bug.
 ;;;","2023-04-11 04:34;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/13424
Date: 2023-04-11 11:24:55 +0000;;;","2023-04-12 18:32;dukebot;Changeset: 3f36dd81
Author:    Jaikiran Pai <jpai@openjdk.org>
Date:      2023-04-13 01:30:00 +0000
URL:       https://git.openjdk.org/jdk/commit/3f36dd811e56ecb4b7c6bf1bf8be8a8de9481ed0
;;;",,,,,,,,,,,,,,,,,,,,,,,,
[11u] Backport of JDK-8259530 breaks build with JDK10 bootstrap VM,JDK-8305528,5097836,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,kyukihiro,clanger,clanger,2023-04-04 01:46,2023-06-13 09:21,2023-10-01 09:55,2023-04-13 02:43,,,,,,,,,11.0.20,core-libs,,0,jdk11u-fix-request,jdk11u-fix-yes,oracle-triage-11,,,,,,,,,,,,,,"The backport of JDK-8259530 introduces Path.of which by itself works in JDK11, however it breaks builds with JDK10 bootstrap VMs.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8305385,,,,,,,,,,,,,,,,,,,,,,,,11.0.20,,,,,,,,"0|i3106z:",9223372036854775807,b01,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@674604a9,,,,,,,,,"2023-04-04 05:25;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk11u-dev/pull/1823
Date: 2023-04-04 12:14:22 +0000;;;","2023-04-07 05:54;kyukihiro;Fix Request(11u)
I would like to fix this issue. 
Because without fix, JDK-8305528 breaks builds with JDK10 bootstrap VMs.
There is no risk, because the fix is not complicated 
and I have confirmed that the issue is gone.
Testing: all jtreg tests in langtools;;;","2023-04-13 02:43;dukebot;Changeset: bb2e0d85
Author:    Kimura Yukihiro <kimura.yukihiro@jp.fujitsu.com>
Committer: Christoph Langer <clanger@openjdk.org>
Date:      2023-04-13 09:41:13 +0000
URL:       https://git.openjdk.org/jdk11u-dev/commit/bb2e0d85b6c17bcbe72d37bea8f524a5be149292
;;;","2023-05-03 01:13;dukebot;Changeset: bb2e0d85
Author:    Kimura Yukihiro <kimura.yukihiro@jp.fujitsu.com>
Committer: Christoph Langer <clanger@openjdk.org>
Date:      2023-04-13 09:41:13 +0000
URL:       https://git.openjdk.org/jdk11u/commit/bb2e0d85b6c17bcbe72d37bea8f524a5be149292
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,
Problemlist runtime/ErrorHandling/TestDwarf on x86,JDK-8305525,5097833,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,stuefe,stuefe,stuefe,2023-04-04 01:03,2023-04-14 16:43,2023-10-01 09:55,2023-04-04 06:14,21,,,,,,,,21,hotspot,,0,,,,,,,,,,,,,,,,,"See JDK-8305521.

Lets reduce the noise in GHAs.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8306029,,,,,JDK-8305489,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i3106b:",9223372036854775807,b17,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,,,"2023-04-04 01:13;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/13319
Date: 2023-04-04 06:33:15 +0000;;;","2023-04-04 06:14;dukebot;Changeset: 7b922104
Author:    Thomas Stuefe <stuefe@openjdk.org>
Date:      2023-04-04 13:11:53 +0000
URL:       https://git.openjdk.org/jdk/commit/7b922104f57cc0de618d33d1a150925adc832e19
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
AArch64: Fix arraycopy issue on SVE caused by matching rule vmask_gen_sub,JDK-8305524,5097832,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,pli,pli,pli,2023-04-04 00:44,2023-04-17 10:42,2023-10-01 09:55,2023-04-11 20:17,21,,,,,,,,21,hotspot,,0,c2,oracle-triage-11,oracle-triage-17,oracle-triage-21,regression,,,,,,,,,,,,"From some tests, we find System.arraycopy() call with negated small length does not work on AArch64 CPUs with SVE. Below simple Java program can reproduce this issue.

public class Test {
  static char[] src = {'A', 'A', 'A', 'A', 'A'};
  static char[] dst = {'B', 'B', 'B', 'B', 'B'};

  static void copy(int nlen) {
    System.arraycopy(src, 0, dst, 0, -nlen);
  }

  public static void main(String[] args) {
    for (int i = 0; i < 25000; i++) {
      copy(0);
    }
    copy(-5);
    for (char c : dst) {
      if (c != 'A') {
        throw new RuntimeException(""Wrong value!"");
      }
    }
    System.out.println(""PASS"");
  }
}

/*
$ java -Xint Test
PASS
$ java -Xbatch Test
Exception in thread ""main"" java.lang.RuntimeException: Wrong value!
        at Test.main(Test.java:16)
*/

Investigation shows this issue is caused by a new AArch64 matching rule vmask_gen_sub introduced in JDK-8293198. We should fix it ASAP.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8293198,,,,,,,,,,,,,,,,aarch64,,,,,,,,,,,,,,,,"0|i31063:",9223372036854775807,b18,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2023-04-04 07:38;chagedorn;ILW = Wrong execution with System.arraycopy(), only on AArch64 with SVE and using negative length values, disable instrinsic with -XX:DisableIntrinsic=_arraycopy = HLM = P3;;;","2023-04-07 00:27;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/13382
Date: 2023-04-07 07:21:05 +0000;;;","2023-04-11 20:17;dukebot;Changeset: b9bdbe9a
Author:    Pengfei Li <pli@openjdk.org>
Date:      2023-04-12 03:15:39 +0000
URL:       https://git.openjdk.org/jdk/commit/b9bdbe9ab3922c4dc7a754200df2fe542b11359b
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,
ToggleNotifyJvmtiTest.java fails with release VMs,JDK-8305520,5097828,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,jiefu,jiefu,jiefu,2023-04-03 23:04,2023-04-10 10:23,2023-10-01 09:55,2023-04-04 00:35,21,,,,,,,,21,hotspot,,0,tencent-interest,tier6,,,,,,,,,,,,,,,"serviceability/jvmti/vthread/ToggleNotifyJvmtiTest/ToggleNotifyJvmtiTest.java fails with release VMs.

STDERR:
Error: VM option 'WhiteBoxAPI' is diagnostic and must be enabled via -XX:+UnlockDiagnosticVMOptions.
Error: The unlock option must precede 'WhiteBoxAPI'.
Error: Could not create the Java Virtual Machine.
Error: A fatal exception has occurred. Program will exit.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8297286,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i31057:",9223372036854775807,b17,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@661b156a,,,,,,,,,"2023-04-03 23:14;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/13318
Date: 2023-04-04 06:09:02 +0000;;;","2023-04-04 00:35;dukebot;Changeset: a663d5d6
Author:    Jie Fu <jiefu@openjdk.org>
Date:      2023-04-04 07:33:21 +0000
URL:       https://git.openjdk.org/jdk/commit/a663d5d69486447d80cab040830abf0b11636c8f
;;;","2023-04-06 14:07;dcubed;This bug is fixed in jdk-21+17-1388.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,
Memory leak in Java Solaris native code when calling NetworkInterface.getHardwareAddress(),JDK-8305517,5097825,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,jjose,shadowbug,shadowbug,2023-04-03 22:38,2023-07-04 23:47,2023-10-01 09:55,2023-06-12 06:14,11,8,,,,,,,11.0.21-oracle,core-libs,,0,13-na,bugdb_35243858,confirmed,jdk11u-solaris-sparc-defer,,,,,,,,,,,,,"The getHardwareAddress method in NetworkInterface has a call to native method getMacAddr0 and which inturn invokes getMacAddress. In getMacAddress there is solaris specific call to getMacFromDevice which make a call to
open the device for which the address is to be retrieved(fd = open(style1dev,
O_RDWR)). But this fd is never getting closed in this method (neither returned
from excpetion nor in the normal flow as well). So if multiple devices are present and
each read will result in new fd getting created and will result in memory
loss. This requires a fix in JDK, where we have to close the fd before the
method getMacFromDevice exit.
",,,,,,,,,,,JDK-8310305,JDK-8311446,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i3104j:",9223372036854775807,b01,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@446e124a,,,,,,,,,"2023-06-01 02:44;jjose;Sample reproducer and output:

import java.net.NetworkInterface;
import java.net.SocketException;
import java.util.Collections;
import java.util.Enumeration;
import java.util.Iterator;
import java.util.List;

public class NetworkIFTest {
    public static void main(String[] args) throws Exception {
		int j=5;
        while (j>=0) {
			j--;
            System.out.println(""start"");
            Enumeration<NetworkInterface> interfaces = NetworkInterface.getNetworkInterfaces();
            List<NetworkInterface> interfacesList = Collections.list(interfaces);
			
            for (Iterator<NetworkInterface> iterator = interfacesList.iterator(); iterator.hasNext(); ) {
                NetworkInterface networkInterface = iterator.next();
                try {
                    byte[] mac = networkInterface.getHardwareAddress();
                    StringBuilder sb = new StringBuilder();
                    if (mac != null) {
                        for (int i = 0; i < mac.length; i++) {
                            sb.append(String.format(""%02X%s"", mac[i], (i <
mac.length - 1) ? ""-"" : """"));
                        }
                    }
                    System.out.println(""name:"" + networkInterface.getName() +
"" address:"" + sb);
                } catch (SocketException ex) {
                    System.out.println(""name:"" + networkInterface.getName() +
"" "" + ""Socket exception when retrieving interfaces: {}"" + ex.getMessage());
                }
            }
            System.out.println(""sleeping for 5 seconds"");
            Thread.sleep(5000);
        }
    }
}


Once we run the reproducer and the do pfiles, we could see multiple fd's getting piled up which are not closed.
These are of type S_IFCHR ( /devices/pseudo/ipnet@0:lo0)
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Remove ignore from com/sun/jdi/PopAndInvokeTest.java,JDK-8305511,5097817,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,lmesnik,lmesnik,lmesnik,2023-04-03 20:14,2023-04-10 10:24,2023-10-01 09:55,2023-04-04 07:43,21,,,,,,,,21,core-svc,,0,,,,,,,,,,,,,,,,,"Test com/sun/jdi/PopAndInvokeTest.java has
 @ignore 6951287
bug  6951287 is closed as a dup for 6417053 which is closed as not reproduced.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-6417053,JDK-6951287,JDK-8305632,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i3102r:",9223372036854775807,b17,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@3397f701,,,,,,,,,"2023-04-03 20:24;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/13317
Date: 2023-04-04 03:18:37 +0000;;;","2023-04-04 07:42;dukebot;Changeset: c5941192
Author:    Leonid Mesnik <lmesnik@openjdk.org>
Date:      2023-04-04 14:39:56 +0000
URL:       https://git.openjdk.org/jdk/commit/c59411929ddbf5fdc51ccc9d7508cfceeabc58c1
;;;","2023-04-05 00:27;dholmes;This test now fails in tier5;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,
"C1 fails ""assert(k != nullptr) failed: illegal use of unloaded klass""",JDK-8305509,5097814,Bug,Closed,JDK,JDK,software,duke,,,P2,Fixed,coleenp,dcubed,dcubed,2023-04-03 19:27,2023-09-13 20:10,2023-10-01 09:55,2023-04-04 09:32,21,,,,,,,,21,hotspot,,0,c1,oracle-triage-11,oracle-triage-17,oracle-triage-21,regression,test-bigapps-Kitchensink,tier4,tier6,tier7,,,,,,,,"The following test failed in the JDK21 CI:

applications/runthese/RunThese30M.java

Here's a snippet from the hs_err_pid file:

#  Internal Error (/opt/mach5/mesos/work_dir/slaves/741e9afd-8c02-45c3-b2e2-9db1450d0832-S20155/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/25a896f2-6f80-4034-93bb-7731ae83c590/runs/06507dd6-84d5-4d83-a568-765143c1c813/workspace/open/src/hotspot/share/ci/ciKlass.hpp:60), pid=1806559, tid=1806576
#  assert(k != nullptr) failed: illegal use of unloaded klass
#
# JRE version: Java(TM) SE Runtime Environment (21.0+17) (fastdebug build 21-ea+17-LTS-1381)
# Java VM: Java HotSpot(TM) 64-Bit Server VM (fastdebug 21-ea+17-LTS-1381, compiled mode, sharing, tiered, compressed oops, compressed class ptrs, g1 gc, linux-amd64)
# Problematic frame:
# V  [libjvm.so+0x892d1e]  ciKlass::get_Klass() const [clone .isra.0]+0x3e

<snip>

---------------  T H R E A D  ---------------

Current thread (0x00007f8c58268580):  JavaThread ""C1 CompilerThread0"" daemon [_thread_in_vm, id=1806576, stack(0x00007f8c22d6a000,0x00007f8c22e6b000)]


Current CompileTask:
C1: 726879 80201    b  3       com.sun.tck.lib.tgf.LeafIterator::<init> (73 bytes)

Stack: [0x00007f8c22d6a000,0x00007f8c22e6b000],  sp=0x00007f8c22e68850,  free space=1018k
Native frames: (J=compiled Java code, j=interpreted, Vv=VM code, C=native code)
V  [libjvm.so+0x892d1e]  ciKlass::get_Klass() const [clone .isra.0]+0x3e  (ciKlass.hpp:60)
V  [libjvm.so+0x894d3a]  ciEnv::get_klass_by_name_impl(ciKlass*, constantPoolHandle const&, ciSymbol*, bool)+0x1aa  (ciEnv.cpp:512)
V  [libjvm.so+0x895445]  ciEnv::get_klass_by_name(ciKlass*, ciSymbol*, bool)+0x1c5  (ciEnv.cpp:569)
V  [libjvm.so+0x8e464b]  ciObjectFactory::get_unloaded_klass(ciKlass*, ciSymbol*, bool)+0x5bb  (ciObjectFactory.cpp:503)
V  [libjvm.so+0x8da65d]  ciObjArrayKlass::make_impl(ciKlass*)+0x20d  (ciEnv.hpp:249)
V  [libjvm.so+0x8da950]  ciObjArrayKlass::make(ciKlass*) [clone .part.0]+0xd0  (ciObjArrayKlass.cpp:167)
V  [libjvm.so+0x7894b3]  LIRGenerator::do_NewObjectArray(NewObjectArray*)+0x163  (c1_LIRGenerator_x86.cpp:1356)
V  [libjvm.so+0x7678f3]  LIRGenerator::do_root(Instruction*)+0x63  (c1_LIRGenerator.cpp:374)
V  [libjvm.so+0x76bf1e]  non-virtual thunk to LIRGenerator::block_do(BlockBegin*)+0x5e  (c1_LIRGenerator.cpp:371)
V  [libjvm.so+0x731891]  BlockList::iterate_forward(BlockClosure*)+0x41  (c1_Instruction.cpp:889)
V  [libjvm.so+0x6f4bf6]  Compilation::emit_lir()+0x566  (c1_Compilation.cpp:258)
V  [libjvm.so+0x6f761f]  Compilation::compile_java_method()+0x32f  (c1_Compilation.cpp:404)
V  [libjvm.so+0x6f7f39]  Compilation::compile_method()+0x179  (c1_Compilation.cpp:473)
V  [libjvm.so+0x6f86d6]  Compilation::Compilation(AbstractCompiler*, ciEnv*, ciMethod*, int, BufferBlob*, bool, DirectiveSet*)+0x306  (c1_Compilation.cpp:600)
V  [libjvm.so+0x6fa02e]  Compiler::compile_method(ciEnv*, ciMethod*, int, bool, DirectiveSet*)+0xde  (c1_Compiler.cpp:258)
V  [libjvm.so+0x9ce470]  CompileBroker::invoke_compiler_on_method(CompileTask*)+0xaf0  (compileBroker.cpp:2265)
V  [libjvm.so+0x9cf338]  CompileBroker::compiler_thread_loop()+0x608  (compileBroker.cpp:1944)
V  [libjvm.so+0xe9d4de]  JavaThread::thread_main_inner()+0x17e  (javaThread.cpp:717)
V  [libjvm.so+0x17669b8]  Thread::call_run()+0xb8  (thread.cpp:224)
V  [libjvm.so+0x1469b0a]  thread_native_entry(Thread*)+0x11a  (os_linux.cpp:740)

",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8304743,,,,,,,,,,,,,,,,,,,,,aarch64,x86_64,,,,,,,,,linux,,,,,,"0|i31023:",9223372036854775807,b17,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,Verified,,"2023-04-03 19:31;dcubed;[~coleenp] - It might be a coincidence, but jdk-21+17-1381-tier4 includes the fix for:

JDK-8304743 Compile_lock and SystemDictionary updates

and since C1 compiler thread is accessing an unloaded class...;;;","2023-04-04 05:20;coleenp;I added the get_Klass() that it's complaining about so I could handle-ize class_loader and protection domain in the utility function.;;;","2023-04-04 07:40;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/13327
Date: 2023-04-04 14:32:42 +0000;;;","2023-04-04 08:16;chagedorn;ILW = C1 assertion failure, multiple tests in tier4, no workaround = HLH = P2;;;","2023-04-04 09:32;dukebot;Changeset: 2ee42451
Author:    Coleen Phillimore <coleenp@openjdk.org>
Date:      2023-04-04 16:31:21 +0000
URL:       https://git.openjdk.org/jdk/commit/2ee42451057455fdfe7c102d7a341136999e16ef
;;;","2023-04-04 11:00;dcubed;The fix for this bug is integrated in jdk-21+17-1396.;;;","2023-07-12 08:03;enikitin;Given that RunThese30M doesn't show up the problem anymore and that the fix is just a revert of a previous refactoring, I consider the it verified.;;;",,,,,,,,,,,,,,,,,,,,,,,,
NPE in javazic compiler,JDK-8305505,5097810,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,ysatowse,ysatowse,ysatowse,2023-04-03 16:45,2023-09-25 01:00,2023-10-01 09:55,2023-05-02 05:44,,,,,,,,,21,core-libs,,0,noreg-self,,,,,,,,,,,,,,,,"javazic compiler is no longer used but still employed to test if the timezone data generated by the JSR 310 compiler is correct.  It returns NPE in a normal execution.

$ cd test/jdk/sun/util/calendar/zi/
$ javac -J-Duser.language=en --add-exports=java.base/sun.util.calendar=ALL-UNNAMED Main.java
$ java --add-exports java.base/sun.util.calendar=ALL-UNNAMED Main -doc asia
Exception in thread ""main"" java.lang.NullPointerException: Cannot invoke ""java.util.HashMap.get(Object)"" because ""this.mapList"" is null
	at GenDoc.processZoneinfo(GenDoc.java:183)
	at Main.compile(Main.java:115)
	at Main.main(Main.java:146)",,,,,,,,,,,JDK-8316788,JDK-8316789,JDK-8316856,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i31017:",9223372036854775807,b21,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@a9a7756,,,,,,,,,"2023-04-24 22:22;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/13504
Date: 2023-04-18 05:08:35 +0000;;;","2023-05-02 05:44;dukebot;Changeset: 544bd260
Author:    Yoshiki Sato <ysatowse@openjdk.org>
Committer: Naoto Sato <naoto@openjdk.org>
Date:      2023-05-02 12:42:15 +0000
URL:       https://git.openjdk.org/jdk/commit/544bd260b6eb7bc7cf79a3739cc94bad658d7d15
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
stutter typo in java.compiler files,JDK-8305504,5097809,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,jjg,jjg,jjg,2023-04-03 16:28,2023-04-10 10:24,2023-10-01 09:55,2023-04-04 07:12,21,,,,,,,,21,tools,,0,noreg-doc,,,,,,,,,,,,,,,,"Double RFC prefix:

$ grep -r 'RFC [0-9][0-9]*: RFC' open/src
open/src/java.compiler/share/classes/javax/tools/JavaFileManager.java: * @spec https://www.rfc-editor.org/info/rfc3986 RFC 3986: RFC 3986: Uniform Resource Identifier (URI): Generic Syntax
open/src/java.compiler/share/classes/javax/annotation/processing/Filer.java: * @spec https://www.rfc-editor.org/info/rfc3986 RFC 3986: RFC 3986: Uniform Resource Identifier (URI): Generic Syntax
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i3100z:",9223372036854775807,b17,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4dca67bd,,,,,,,,,"2023-04-03 17:13;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/13316
Date: 2023-04-04 00:06:53 +0000;;;","2023-04-04 07:12;dukebot;Changeset: 73a084c2
Author:    Jonathan Gibbons <jjg@openjdk.org>
Date:      2023-04-04 14:08:30 +0000
URL:       https://git.openjdk.org/jdk/commit/73a084c24e603d2faf05381a2e9bc6d694d19bda
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
adjust timeouts in three more M&M tests,JDK-8305502,5097806,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,dcubed,dcubed,dcubed,2023-04-03 14:35,2023-09-13 04:26,2023-10-01 09:55,2023-04-24 09:13,21,,,,,,,,21,core-svc,,0,noreg-self,,,,,,,,,,,,,,,,"A few more M&M tests are timing out in my stress testing runs.
Here are my notes:

# jdk-21+15_1_linux - observed in jdk-21+15 testing on 2023.03.25 on
# linux-x64 in slowdebug config:
#   - elapsed time (seconds): 122.957
# jdk-21+16_1_linux - observed in jdk-21+16 testing on 2023.03.30 on
# linux-x64 in slowdebug config:
#   - elapsed time (seconds): 123.078
# jdk-21+16_2_linux - observed in jdk-21+16 testing on 2023.03.31 on
# linux-x64 in slowdebug config:
#   - elapsed time (seconds): 122.901
# jdk-21+16_3_linux - observed in jdk-21+16 testing on 2023.04.01 on
# linux-x64 in slowdebug config:
#   - elapsed time (seconds): 122.911
#ZZZ vmTestbase/nsk/monitoring/stress/classload/load007/TestDescription.java XXXXXXX linux-x64

# jdk-21+15_1_linux - observed in jdk-21+15 testing on 2023.03.25 on
# linux-x64 in slowdebug config:
#   - elapsed time (seconds): 122.86
# jdk-21+16_1_linux - observed in jdk-21+16 testing on 2023.03.30 on
# linux-x64 in slowdebug config:
#   - elapsed time (seconds): 122.832
# jdk-21+16_2_linux - observed in jdk-21+16 testing on 2023.03.31 on
# linux-x64 in slowdebug config:
#   - elapsed time (seconds): 122.903
# jdk-21+16_3_linux - observed in jdk-21+16 testing on 2023.04.01 on
# linux-x64 in slowdebug config:
#   - elapsed time (seconds): 122.843
#ZZZ vmTestbase/nsk/monitoring/stress/classload/load011/TestDescription.java XXXXXXX linux-x64

# jdk-21+15_1_linux - observed in jdk-21+15 testing on 2023.03.25 on
# linux-x64 in slowdebug config:
#   - elapsed time (seconds): 121.979
# jdk-21+16_3_linux - observed in jdk-21+16 testing on 2023.04.01 on
# linux-x64 in slowdebug config:
#   - elapsed time (seconds): 122.045
#ZZZ vmTestbase/nsk/monitoring/stress/classload/load012/TestDescription.java XXXXXXX linux-x64",,,,,,,,,,,JDK-8315092,JDK-8315313,JDK-8315302,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,x86_64,,,,,,,,,,linux,,,,,,"0|i3100b:",9223372036854775807,b20,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@411d4af6,,,,,,,,,"2023-04-21 14:52;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/13593
Date: 2023-04-21 21:35:07 +0000;;;","2023-04-24 09:13;dukebot;Changeset: 4b23bef5
Author:    Daniel D. Daugherty <dcubed@openjdk.org>
Date:      2023-04-24 16:10:44 +0000
URL:       https://git.openjdk.org/jdk/commit/4b23bef51df9c1a5bc8f43748a8d6c8d99995656
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
"CLHSDB ""dumpclass"" command produces classes with invalid field descriptors",JDK-8305490,5097792,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,asotona,asotona,asotona,2023-04-03 10:52,2023-09-17 20:21,2023-10-01 09:55,2023-04-05 06:22,21,,,,,,,,21,hotspot,,0,,,,,,,,,,,,,,,,,"CommandProcessor command ""dumpclass"" produces classes with invalid field descriptors.

`ClhsdbDumpclass` uses javap to verify classes validity.
Javap prints errors related to invalid constant pool entries, however the exit code is 0 and `ClhsdbDumpclass` test pass with invalid entries.
 
Work on JDK-8294969 ""Convert jdk.jdeps javap to use the Classfile API"" triggered `ClhsdbDumpclass` test to start failing on invalid entries.

Root cause of the problem is in `sun.jvm.hotspot.oops.InstanceKlass::getFieldSignatureIndex` returning `getGenericSignatureIndex` instead of `getSignatureIndex`.


",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8316342,,,,,JDK-8292818,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i30zx7:",9223372036854775807,b17,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@714e388c,,,,,,,,,"2023-04-03 12:28;cjplummer;[~asotona]This code was recently changed by JDK-8292818. Can you verify if this issue existed before then?;;;","2023-04-03 23:45;asotona;[~cjplummer] You are right, it was introduced by typo in JDK-8292818 commit.

see: https://github.com/openjdk/jdk/commit/bfb812a8ff8bca70aed7695c73f019ae66ac6f33#r107436784
or: https://github.com/openjdk/jdk/blob/master/src/jdk.hotspot.agent/share/classes/sun/jvm/hotspot/oops/InstanceKlass.java#L303
;;;","2023-04-04 00:49;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/13321
Date: 2023-04-04 07:44:40 +0000;;;","2023-04-04 10:37;cjplummer;Here's an example of a passing ClhsdbDumpclass that shows the javap errors:

> javap jdk/test/lib/apps/LingeredApp.class
[2023-04-04T17:25:37.599235Z] Gathering output for process 23660
Compiled from ""LingeredApp.java""
public class jdk.test.lib.apps.LingeredApp {
Error: invalid index #0
  protected ??? appProcess;
Error: invalid index #0
  protected ??? output;
Error: invalid index #0
  protected static final ??? appWaitTime;
Error: invalid index #0
  protected static final ??? appCoreWaitTime;
Error: invalid index #0
  protected final ??? lockFileName;
Error: invalid index #0
  protected ??? logFileName;
Error: invalid index #0
  protected ??? forceCrash;
  public jdk.test.lib.apps.LingeredApp(java.lang.String);
  public jdk.test.lib.apps.LingeredApp();
  static {};
  public static void main(java.lang.String[]);
  public boolean useDefaultClasspath();
  public void waitAppReadyOrCrashed(long) throws java.io.IOException;
  public void waitAppReadyOrCrashed() throws java.io.IOException;
  protected void runAddAppName(java.util.List<java.lang.String>);
  public void printCommandLine(java.util.List<java.lang.String>);
  public jdk.test.lib.process.OutputBuffer getOutput();
  public void deleteLock() throws java.io.IOException;
  public void waitAppTerminate();
  public void createLock() throws java.io.IOException;
  public void runAppExactJvmOpts(java.lang.String[]) throws java.io.IOException;
  public static void checkForDumps();
  public java.lang.Process getProcess();
  public static void stopApp(jdk.test.lib.apps.LingeredApp) throws java.io.IOException;
  public void stopApp() throws java.io.IOException;
  public static void startAppExactJvmOpts(jdk.test.lib.apps.LingeredApp, java.lang.String...) throws java.io.IOException;
  public static jdk.test.lib.apps.LingeredApp startApp(java.lang.String...) throws java.io.IOException;
  public static void startApp(jdk.test.lib.apps.LingeredApp, java.lang.String...) throws java.io.IOException;
  public void setForceCrash(boolean);
  public java.lang.String getLockFileName();
  public void setLogFileName(java.lang.String);
  public long getPid();
  public java.lang.String getProcessStdout();
  public void setUseDefaultClasspath(boolean);
  public static boolean isLastModifiedWorking();
}

[2023-04-04T17:25:40.098074Z] Waiting for completion for process 23660
[2023-04-04T17:25:40.098211Z] Waiting for completion finished for process 23660
 LingeredApp stdout: [];
 LingeredApp stderr: []
 LingeredApp exitValue = 0
;;;","2023-04-05 06:22;dukebot;Changeset: 78ff454f
Author:    Adam Sotona <asotona@openjdk.org>
Date:      2023-04-05 13:19:27 +0000
URL:       https://git.openjdk.org/jdk/commit/78ff454f1986abdb9b72d3c6c5b1f3bbab823540
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,
gtest is_first_C_frame failing on ARM,JDK-8305481,5097778,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,akozlov,sgehwolf,sgehwolf,2023-04-03 07:41,2023-05-04 02:50,2023-10-01 09:55,2023-04-10 02:22,21,,,,,,,,21,hotspot,,0,jdk17u-fix-request,jdk17u-fix-yes,noreg-self,oraclejdk-na,,,,,,,,,,,,,"Initially reported here:
https://mail.openjdk.org/pipermail/hotspot-dev/2023-April/072457.html

Test fails with:

[ RUN      ] os.is_first_C_frame_vm
./test/hotspot/gtest/runtime/test_os.cpp:890: Failure
Value of: os::is_first_C_frame(&cur_frame)
  Actual: true
Expected: false
[  FAILED  ] os.is_first_C_frame_vm (0 ms)",,,,,,,,,,,JDK-8307429,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,arm,,,,,,,,,,linux,,,,,,"0|i30zu3:",9223372036854775807,b18,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,,,"2023-04-03 13:31;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/13292
Date: 2023-04-03 09:14:36 +0000;;;","2023-04-10 02:22;dukebot;Changeset: 0243da2e
Author:    Vladimir Petko <vladimir.petko@canonical.com>
Committer: Anton Kozlov <akozlov@openjdk.org>
Date:      2023-04-10 09:21:23 +0000
URL:       https://git.openjdk.org/jdk/commit/0243da2e4adc1b7ab6fcd5b10778532101158dce
;;;","2023-04-20 06:09;snazarki;Fix request (17u)
ARM32 TPCS has no reliable way to unwind the stack from the runtime.  Request to exclude the test for arm32 builds. ;;;","2023-04-20 06:18;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/1289
Date: 2023-04-20 13:10:23 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,
test/hotspot/jtreg/runtime/NMT/VirtualAllocCommitMerge.java failing on 32 bit arm,JDK-8305480,5097777,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,stuefe,sgehwolf,sgehwolf,2023-04-03 07:37,2023-04-12 23:22,2023-10-01 09:55,2023-04-05 22:08,21,,,,,,,,21,hotspot,,0,oraclejdk-na,,,,,,,,,,,,,,,,"Initially reported here:
https://mail.openjdk.org/pipermail/hotspot-dev/2023-April/072457.html

The test fails with:

result: Failed. Execution failed: `main' threw exception: java.lang.RuntimeException: '\[0x[0]*7947e000 - 0x[0]*794de000\] committed 384KB from.*' missing from stdout/stderr

It seems to be caused by os::current_frame() being stubbed out on the Linux Arm Thumb platform.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,arm,,,,,,,,,,linux,,,,,,"0|i30ztv:",9223372036854775807,b18,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,,,"2023-04-03 13:28;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/13291
Date: 2023-04-03 09:07:32 +0000;;;","2023-04-05 22:08;dukebot;Changeset: a6a3cf48
Author:    Vladimir Petko <vladimir.petko@canonical.com>
Committer: Thomas Stuefe <stuefe@openjdk.org>
Date:      2023-04-06 05:06:15 +0000
URL:       https://git.openjdk.org/jdk/commit/a6a3cf485df50940dfc292c4c52913c696ad5344
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
JDK-8301995 broke building libgraal,JDK-8305419,5097715,Bug,Resolved,JDK,JDK,software,duke,,,P2,Fixed,never,dnsimon,dnsimon,2023-04-02 13:35,2023-05-05 03:53,2023-10-01 09:55,2023-04-11 07:58,21,,,,,,,,21,hotspot,,0,jvmci,libgraal,noreg-build,oracle-triage-11,oracle-triage-17,oracle-triage-21,,,,,,,,,,,"As a result of the changes in jvmciCompilerToVM.cpp for JDK-8301995, building libgraal on jdk21+16 does not work:

#
# A fatal error has been detected by the Java Runtime Environment:
#
#  Internal Error (/Users/dnsimon/dev/jdk-jdk/open/src/hotspot/share/oops/constantPool.hpp:256), pid=30379, tid=9219
#  assert(is_invokedynamic_index(i)) failed: i=8
#

Stack: [0x000000016ef70000,0x000000016f973000],  sp=0x000000016f96d2e0,  free space=10228k
Native frames: (J=compiled Java code, j=interpreted, Vv=VM code, C=native code)
V  [libjvm.dylib+0x112dcdc]  VMError::report_and_die(int, char const*, char const*, char*, Thread*, unsigned char*, void*, void*, char const*, int, unsigned long)+0x990  (con
stantPool.hpp:256)
V  [libjvm.dylib+0x112e32c]  VMError::report_and_die(Thread*, void*, char const*, int, char const*, char const*, char*)+0x68
V  [libjvm.dylib+0x5d6358]  report_vm_error(char const*, int, char const*, char const*, ...)+0x60
V  [libjvm.dylib+0x5af0]  ConstantPool::decode_invokedynamic_index(int)+0x60
V  [libjvm.dylib+0xc6ed58]  LinkResolver::resolve_invokedynamic(CallInfo&, constantPoolHandle const&, int, JavaThread*)+0x44
V  [libjvm.dylib+0xc6e834]  LinkResolver::resolve_invoke(CallInfo&, Handle, constantPoolHandle const&, int, Bytecodes::Code, JavaThread*)+0x134
V  [libjvm.dylib+0xab7c90]  c2v_resolveInvokeDynamicInPool(JNIEnv_*, _jobject*, _jobject*, long, int)+0x1c8
j  jdk.vm.ci.hotspot.CompilerToVM.resolveInvokeDynamicInPool(Ljdk/vm/ci/hotspot/HotSpotConstantPool;JI)V+0 jdk.internal.vm.ci@21-ea
j  jdk.vm.ci.hotspot.CompilerToVM.resolveInvokeDynamicInPool(Ljdk/vm/ci/hotspot/HotSpotConstantPool;I)V+7 jdk.internal.vm.ci@21-ea
j  jdk.vm.ci.hotspot.HotSpotConstantPool.loadReferencedType(IIZ)V+173 jdk.internal.vm.ci@21-ea
j  com.oracle.graal.pointsto.infrastructure.WrappedConstantPool.loadReferencedType(Ljdk/vm/ci/meta/ConstantPool;IIZ)V+32 org.graalvm.nativeimage.pointsto
j  com.oracle.graal.pointsto.phases.NoClassInitializationPlugin.loadReferencedType(Lorg/graalvm/compiler/nodes/graphbuilderconf/GraphBuilderContext;Ljdk/vm/ci/meta/ConstantPool;II)V+5 org.graalvm.nativeimage.pointsto

The above crash was produced with a slowdebug build based on openjdk 787832a58677205c9a11ae100dd8a2fbddb30a4a with the following patch:

===========================================
diff --git a/src/hotspot/share/oops/constantPool.hpp b/src/hotspot/share/oops/constantPool.hpp
index 93a4f504448..e33fe336d05 100644
--- a/src/hotspot/share/oops/constantPool.hpp
+++ b/src/hotspot/share/oops/constantPool.hpp
@@ -253,7 +253,7 @@ class ConstantPool : public Metadata {
   // The main reason is that byte swapping is sometimes done on normal indexes.
   // Finally, it is helpful for debugging to tell the two apart.
   static bool is_invokedynamic_index(int i) { return (i < 0); }
-  static int  decode_invokedynamic_index(int i) { assert(is_invokedynamic_index(i),  """"); return ~i; }
+  static int  decode_invokedynamic_index(int i) { assert(is_invokedynamic_index(i),  ""i=%d"", i); return ~i; }
   static int  encode_invokedynamic_index(int i) { assert(!is_invokedynamic_index(i), """"); return ~i; }
 
   // Given the per-instruction index of an indy instruction, report the
===========================================

To reproduce:

jdk/open> git checkout 787832a58677205c9a11ae100dd8a2fbddb30a4a
jdk/open> make graal-builder-image
jdk/open> export JAVA_HOME=$PWD/build/*/images/graal-builder-jdk

> git clone https://github.com/graalvm/mx.git
> export MX_PYTHON=python3.8. # Ensure python3.8 is on PATH
> export PATH=$PWD/mx:$PATH

> git clone https://github.com/oracle/graal.git
> cd graal
> cd git reset --hard de7a57939aa17b069f22f49b7bd6cb0941c3153f
> cd vm
mx --env libgraal build",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8301995,,,,,,,,,,,,,,,,,,,,,,,,,,,,,21,,,,,,,,"0|i30zg3:",9223372036854775807,b18,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2023-04-03 05:54;chagedorn;ILW= Broken libgraal build, only affects libgraal, no workaround = HLH = P2;;;","2023-04-03 05:55;chagedorn;[~matsaave] please have a look, thanks!;;;","2023-04-07 12:47;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/13392
Date: 2023-04-07 19:41:45 +0000;;;","2023-04-11 07:58;dukebot;Changeset: 12946f57
Author:    Tom Rodriguez <never@openjdk.org>
Date:      2023-04-11 14:55:55 +0000
URL:       https://git.openjdk.org/jdk/commit/12946f5748c819f436e9d16a150313656d059ec2
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,
"runtime/Thread/TestAlwaysPreTouchStacks.java failed with ""Did not find expected NMT output""",JDK-8305416,5097710,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,stuefe,dcubed,dcubed,2023-04-02 07:19,2023-05-17 16:51,2023-10-01 09:55,2023-05-10 21:52,21,,,,,,,,21,hotspot,,0,intermittent,nmt,tier1,tier3,tier5,tier6,tier7,,,,,,,,,,"The following test failed in the JDK21 CI:

runtime/Thread/TestAlwaysPreTouchStacks.java

Here's a snippet from the log file:

#section:driver
----------messages:(8/332)----------
command: driver TestAlwaysPreTouchStacks
reason: User specified action: run driver TestAlwaysPreTouchStacks 
started: Sun Apr 02 09:50:31 UTC 2023
Mode: agentvm
Agent id: 20
Additional exports to unnamed modules from @modules: java.base/jdk.internal.misc
finished: Sun Apr 02 09:50:33 UTC 2023
elapsed time (seconds): 1.804
----------configuration:(15/1478)*----------

<snip>

----------System.out:(6/1719)*----------
Command line: [c:\\ade\\mesos\\work_dir\\jib-master\\install\\jdk-21+17-1363\\windows-x64-debug.jdk\\jdk-21\\fastdebug\\bin\\java.exe -cp C:\\sb\\prod\\1680428811\\testoutput\\test-support\\jtreg_open_test_hotspot_jtreg_tier1_runtime\\classes\\0\\runtime\\Thread\\TestAlwaysPreTouchStacks.d;C:\\ade\\mesos\\work_dir\\jib-master\\install\\jdk-21+17-1363\\src.full\\open\\test\\hotspot\\jtreg\\runtime\\Thread;C:\\sb\\prod\\1680428811\\testoutput\\test-support\\jtreg_open_test_hotspot_jtreg_tier1_runtime\\classes\\0\\test\\lib;C:\\ade\\mesos\\work_dir\\jib-master\\install\\jtreg\\7.1.1\\1\\bundles\\jtreg-7.1.1+1.zip\\jtreg\\lib\\jtreg.jar;C:\\ade\\mesos\\work_dir\\jib-master\\install\\jtreg\\7.1.1\\1\\bundles\\jtreg-7.1.1+1.zip\\jtreg\\lib\\junit-platform-console-standalone-1.8.2.jar;C:\\ade\\mesos\\work_dir\\jib-master\\install\\jtreg\\7.1.1\\1\\bundles\\jtreg-7.1.1+1.zip\\jtreg\\lib\\testng-7.3.0.jar;C:\\ade\\mesos\\work_dir\\jib-master\\install\\jtreg\\7.1.1\\1\\bundles\\jtreg-7.1.1+1.zip\\jtreg\\lib\\jcommander-1.78.jar;C:\\ade\\mesos\\work_dir\\jib-master\\install\\jtreg\\7.1.1\\1\\bundles\\jtreg-7.1.1+1.zip\\jtreg\\lib\\guice-4.2.3.jar -XX:+UnlockDiagnosticVMOptions -Xmx100M -XX:+AlwaysPreTouchStacks -Xlog:os+thread=trace -XX:NativeMemoryTracking=summary -XX:+PrintNMTStatistics TestAlwaysPreTouchStacks test ]
[2023-04-02T09:50:32.882076200Z] Gathering output for process 17860
[2023-04-02T09:50:33.171528200Z] Waiting for completion for process 17860
[2023-04-02T09:50:33.187089800Z] Waiting for completion finished for process 17860
[2023-04-02T09:50:33.202767800Z] Waiting for completion for process 17860
[2023-04-02T09:50:33.202767800Z] Waiting for completion finished for process 17860
----------System.err:(243/18341)----------
 stdout: [[0.003s][info][os,thread] The SetThreadDescription API is available.
[0.005s][debug][os,thread] Thread 66880 stack guard pages activated: 0x00000092fbb00000-0x00000092fbb04000.
[0.024s][info ][os,thread] Thread ""GC Thread#0"" started (tid: 33636, attributes: stacksize: default, flags: CREATE_SUSPENDED STACK_SIZE_PARAM_IS)
[0.025s][info ][os,thread] Thread ""G1 Main Marker"" started (tid: 80644, attributes: stacksize: default, flags: CREATE_SUSPENDED STACK_SIZE_PARAM_IS)
[0.025s][info ][os,thread] Thread is alive (tid: 33636, stacksize: 1024k).
[0.025s][info ][os,thread] Thread ""G1 Conc#0"" started (tid: 90844, attributes: stacksize: default, flags: CREATE_SUSPENDED STACK_SIZE_PARAM_IS)
[0.025s][debug][os,thread] Thread 33636 stack dimensions: 0x00000092fbc00000-0x00000092fbd00000 (1024k).
[0.025s][trace][os,thread] set_native_thread_name: SetThreadDescription succeeded - new name: GC Thread#0
[0.025s][info ][os,thread] Thread is alive (tid: 80644, stacksize: 1024k).
[0.025s][debug][os,thread] Thread 80644 stack dimensions: 0x00000092fbd00000-0x00000092fbe00000 (1024k).
[0.025s][trace][os,thread] set_native_thread_name: SetThreadDescription succeeded - new name: G1 Main Marker
[0.025s][info ][os,thread] Thread is alive (tid: 90844, stacksize: 1024k).
[0.025s][debug][os,thread] Thread 90844 stack dimensions: 0x00000092fbe00000-0x00000092fbf00000 (1024k).
[0.025s][trace][os,thread] set_native_thread_name: SetThreadDescription succeeded - new name: G1 Conc#0
[0.031s][info ][os,thread] Thread ""G1 Refine#0"" started (tid: 22980, attributes: stacksize: default, flags: CREATE_SUSPENDED STACK_SIZE_PARAM_IS)
[0.031s][info ][os,thread] Thread ""G1 Service"" started (tid: 3448, attributes: stacksize: default, flags: CREATE_SUSPENDED STACK_SIZE_PARAM_IS)
[0.031s][info ][os,thread] Thread is alive (tid: 22980, stacksize: 1024k).
[0.031s][debug][os,thread] Thread 22980 stack dimensions: 0x00000092fbf00000-0x00000092fc000000 (1024k).
[0.031s][trace][os,thread] set_native_thread_name: SetThreadDescription succeeded - new name: G1 Refine#0
[0.031s][info ][os,thread] Thread is alive (tid: 3448, stacksize: 1024k).
[0.031s][debug][os,thread] Thread 3448 stack dimensions: 0x00000092fc000000-0x00000092fc100000 (1024k).
[0.031s][trace][os,thread] set_native_thread_name: SetThreadDescription succeeded - new name: G1 Service
[0.064s][info ][os,thread] Thread ""VM Thread"" started (tid: 58272, attributes: stacksize: default, flags: CREATE_SUSPENDED STACK_SIZE_PARAM_IS)
[0.064s][info ][os,thread] Thread is alive (tid: 58272, stacksize: 1024k).
[0.064s][debug][os,thread] Thread 58272 stack dimensions: 0x00000092fc100000-0x00000092fc200000 (1024k).
[0.064s][trace][os,thread] set_native_thread_name: SetThreadDescription succeeded - new name: VM Thread
[0.097s][info ][os,thread] Thread ""Unknown thread"" started (tid: 75432, attributes: stacksize: default, flags: CREATE_SUSPENDED STACK_SIZE_PARAM_IS)
[0.098s][info ][os,thread] Thread is alive (tid: 75432, stacksize: 1024k).
[0.098s][debug][os,thread] Thread 75432 stack dimensions: 0x00000092fc200000-0x00000092fc300000 (1024k).
[0.098s][info ][os,thread] Thread ""Unknown thread"" started (tid: 7668, attributes: stacksize: default, flags: CREATE_SUSPENDED STACK_SIZE_PARAM_IS)
[0.098s][debug][os,thread] Thread 75432 stack guard pages activated: 0x00000092fc200000-0x00000092fc204000.
[0.098s][info ][os,thread] Thread is alive (tid: 7668, stacksize: 1024k).
[0.098s][debug][os,thread] Thread 7668 stack dimensions: 0x00000092fc300000-0x00000092fc400000 (1024k).
[0.098s][debug][os,thread] Thread 7668 stack guard pages activated: 0x00000092fc300000-0x00000092fc304000.
[0.099s][info ][os,thread] Thread ""Unknown thread"" started (tid: 59544, attributes: stacksize: default, flags: CREATE_SUSPENDED STACK_SIZE_PARAM_IS)
[0.099s][trace][os,thread] Pretouching thread stack from 0x00000092fc20fff0 to 0x00000092fc210000.
[0.099s][trace][os,thread] set_native_thread_name: SetThreadDescription succeeded - new name: Reference Handler
[0.099s][info ][os,thread] Thread ""Unknown thread"" started (tid: 55976, attributes: stacksize: default, flags: CREATE_SUSPENDED STACK_SIZE_PARAM_IS)
[0.099s][info ][os,thread] Thread is alive (tid: 59544, stacksize: 1024k).
[0.099s][trace][os,thread] Pretouching thread stack from 0x00000092fc30fff0 to 0x00000092fc310000.
[0.123s][debug][os,thread] Thread 59544 stack dimensions: 0x00000092fc400000-0x00000092fc500000 (1024k).
[0.123s][debug][os,thread] Thread 59544 stack guard pages activated: 0x00000092fc400000-0x00000092fc404000.
[0.123s][trace][os,thread] set_native_thread_name: SetThreadDescription succeeded - new name: Finalizer
[0.123s][info ][os,thread] Thread ""Unknown thread"" started (tid: 61584, attributes: stacksize: default, flags: CREATE_SUSPENDED STACK_SIZE_PARAM_IS)
[0.123s][info ][os,thread] Thread is alive (tid: 55976, stacksize: 1024k).
[0.123s][debug][os,thread] Thread 55976 stack dimensions: 0x00000092fc500000-0x00000092fc600000 (1024k).
[0.123s][debug][os,thread] Thread 55976 stack guard pages activated: 0x00000092fc500000-0x00000092fc504000.
[0.123s][info ][os,thread] Thread ""Unknown thread"" started (tid: 40444, attributes: stacksize: default, flags: CREATE_SUSPENDED STACK_SIZE_PARAM_IS)
[0.123s][info ][os,thread] Thread ""Unknown thread"" started (tid: 13808, attributes: stacksize: 1024k, flags: CREATE_SUSPENDED STACK_SIZE_PARAM_IS_A)
[0.123s][info ][os,thread] Thread is alive (tid: 40444, stacksize: 1024k).
[0.123s][debug][os,thread] Thread 40444 stack dimensions: 0x00000092fc700000-0x00000092fc800000 (1024k).
[0.123s][info ][os,thread] Thread is alive (tid: 61584, stacksize: 1024k).
[0.123s][debug][os,thread] Thread 40444 stack guard pages activated: 0x00000092fc700000-0x00000092fc704000.
[0.123s][debug][os,thread] Thread 61584 stack dimensions: 0x00000092fc600000-0x00000092fc700000 (1024k).
[0.123s][info ][os,thread] Thread is alive (tid: 13808, stacksize: 1024k).
[0.123s][debug][os,thread] Thread 61584 stack guard pages activated: 0x00000092fc600000-0x00000092fc604000.
[0.123s][debug][os,thread] Thread 13808 stack dimensions: 0x00000092fc800000-0x00000092fc900000 (1024k).
[0.124s][info ][os,thread] Thread ""Unknown thread"" started (tid: 18744, attributes: stacksize: 1024k, flags: CREATE_SUSPENDED STACK_SIZE_PARAM_IS_A)
[0.124s][debug][os,thread] Thread 13808 stack guard pages activated: 0x00000092fc800000-0x00000092fc804000.
[0.124s][info ][os,thread] Thread is alive (tid: 18744, stacksize: 1024k).
[0.124s][debug][os,thread] Thread 18744 stack dimensions: 0x00000092fc900000-0x00000092fca00000 (1024k).
[0.124s][debug][os,thread] Thread 18744 stack guard pages activated: 0x00000092fc900000-0x00000092fc904000.
[0.125s][trace][os,thread] Pretouching thread stack from 0x00000092fc40fff0 to 0x00000092fc410000.
[0.125s][trace][os,thread] set_native_thread_name: SetThreadDescription succeeded - new name: Signal Dispatcher
[0.126s][trace][os,thread] Pretouching thread stack from 0x00000092fc50fff0 to 0x00000092fc510000.
[0.126s][trace][os,thread] set_native_thread_name: SetThreadDescription succeeded - new name: Attach Listener
[0.126s][trace][os,thread] Pretouching thread stack from 0x00000092fc80fff0 to 0x00000092fc810000.
[0.126s][trace][os,thread] Pretouching thread stack from 0x00000092fc70fff0 to 0x00000092fc710000.
[0.126s][trace][os,thread] set_native_thread_name: SetThreadDescription succeeded - new name: C2 CompilerThread0
[0.126s][trace][os,thread] Pretouching thread stack from 0x00000092fc90fff0 to 0x00000092fc910000.
[0.126s][trace][os,thread] set_native_thread_name: SetThreadDescription succeeded - new name: Monitor Deflation Thread
[0.126s][trace][os,thread] set_native_thread_name: SetThreadDescription succeeded - new name: C1 CompilerThread0
[0.127s][trace][os,thread] Pretouching thread stack from 0x00000092fc60fff0 to 0x00000092fc610000.
[0.127s][trace][os,thread] set_native_thread_name: SetThreadDescription succeeded - new name: Service Thread
[0.186s][info ][os,thread] Thread ""Unknown thread"" started (tid: 23748, attributes: stacksize: default, flags: CREATE_SUSPENDED STACK_SIZE_PARAM_IS)
[0.186s][info ][os,thread] Thread is alive (tid: 23748, stacksize: 1024k).
[0.186s][debug][os,thread] Thread 23748 stack dimensions: 0x00000092fca00000-0x00000092fcb00000 (1024k).
[0.186s][debug][os,thread] Thread 23748 stack guard pages activated: 0x00000092fca00000-0x00000092fca04000.
[0.187s][trace][os,thread] Pretouching thread stack from 0x00000092fca0fff0 to 0x00000092fca10000.
[0.187s][trace][os,thread] set_native_thread_name: SetThreadDescription succeeded - new name: Notification Thread
[0.188s][info ][os,thread] Thread ""VM Periodic Task Thread"" started (tid: 4996, attributes: stacksize: default, flags: CREATE_SUSPENDED STACK_SIZE_PARAM_IS)
[0.188s][info ][os,thread] Thread is alive (tid: 4996, stacksize: 1024k).
[0.188s][debug][os,thread] Thread 4996 stack dimensions: 0x00000092fcb00000-0x00000092fcc00000 (1024k).
[0.188s][trace][os,thread] set_native_thread_name: SetThreadDescription succeeded - new name: VM Periodic Task Thread
[0.196s][info ][os,thread] Thread ""Unknown thread"" started (tid: 73368, attributes: stacksize: default, flags: CREATE_SUSPENDED STACK_SIZE_PARAM_IS)
[0.197s][info ][os,thread] Thread is alive (tid: 73368, stacksize: 1024k).
[0.197s][debug][os,thread] Thread 73368 stack dimensions: 0x00000092fcc00000-0x00000092fcd00000 (1024k).
[0.197s][debug][os,thread] Thread 73368 stack guard pages activated: 0x00000092fcc00000-0x00000092fcc04000.
[0.197s][trace][os,thread] Pretouching thread stack from 0x00000092fcc0fff0 to 0x00000092fcc10000.
[0.197s][trace][os,thread] set_native_thread_name: SetThreadDescription succeeded - new name: Common-Cleaner
[0.266s][info ][os,thread] Thread ""Unknown thread"" started (tid: 4636, attributes: stacksize: 256k, flags: CREATE_SUSPENDED STACK_SIZE_PARAM_IS_A_)
[0.266s][info ][os,thread] Thread ""Unknown thread"" started (tid: 97680, attributes: stacksize: 512k, flags: CREATE_SUSPENDED STACK_SIZE_PARAM_IS_A_)
[0.266s][info ][os,thread] Thread is alive (tid: 4636, stacksize: 256k).
[0.266s][info ][os,thread] Thread ""Unknown thread"" started (tid: 26540, attributes: stacksize: 3072k, flags: CREATE_SUSPENDED STACK_SIZE_PARAM_IS_A)
[0.266s][debug][os,thread] Thread 4636 stack dimensions: 0x00000092fb5a0000-0x00000092fb5e0000 (256k).
[0.266s][debug][os,thread] Thread 4636 stack guard pages activated: 0x00000092fb5a0000-0x00000092fb5a4000.
[0.266s][info ][os,thread] Thread is alive (tid: 97680, stacksize: 512k).
[0.266s][debug][os,thread] Thread 97680 stack dimensions: 0x00000092fcd00000-0x00000092fcd80000 (512k).
[0.266s][debug][os,thread] Thread 97680 stack guard pages activated: 0x00000092fcd00000-0x00000092fcd04000.
[0.267s][info ][os,thread] Thread is alive (tid: 26540, stacksize: 3072k).
[0.267s][trace][os,thread] Pretouching thread stack from 0x00000092fb5afff0 to 0x00000092fb5b0000.
[0.267s][debug][os,thread] Thread 26540 stack dimensions: 0x00000092fcd80000-0x00000092fd080000 (3072k).
[0.267s][trace][os,thread] set_native_thread_name: SetThreadDescription succeeded - new name: Thread-262144
[0.267s][debug][os,thread] Thread 26540 stack guard pages activated: 0x00000092fcd80000-0x00000092fcd84000.
[0.267s][trace][os,thread] Pretouching thread stack from 0x00000092fcd0fff0 to 0x00000092fcd10000.
[0.267s][trace][os,thread] set_native_thread_name: SetThreadDescription succeeded - new name: Thread-524288
Alive: 262144
[0.269s][debug][os,thread] Thread 4636 stack guard pages removed: 0x00000092fb5a0000-0x00000092fb5a4000.
Alive: 524288
[0.269s][info ][os,thread] JavaThread exiting (tid: 4636).
[0.269s][debug][os,thread] Thread 97680 stack guard pages removed: 0x00000092fcd00000-0x00000092fcd04000.
[0.269s][info ][os,thread] Thread finished (tid: 4636).
[0.269s][info ][os,thread] JavaThread exiting (tid: 97680).
[0.269s][info ][os,thread] Thread finished (tid: 97680).
[0.269s][trace][os,thread] Pretouching thread stack from 0x00000092fcd8fff0 to 0x00000092fcd90000.
[0.269s][trace][os,thread] set_native_thread_name: SetThreadDescription succeeded - new name: Thread-3145728
Alive: 3145728
[0.270s][debug][os,thread] Thread 26540 stack guard pages removed: 0x00000092fcd80000-0x00000092fcd84000.
[0.270s][debug][os,thread] Thread 66880 stack guard pages removed: 0x00000092fbb00000-0x00000092fbb04000.
[0.270s][info ][os,thread] JavaThread exiting (tid: 26540).
[0.270s][info ][os,thread] JavaThread detaching (tid: 66880).
[0.270s][info ][os,thread] Thread finished (tid: 26540).
[0.270s][info ][os,thread] Thread attached (tid: 66880, stack: 0x00000092fbc00000 - 0x00000092fbb00000 (1048576k) ).
[0.270s][debug][os,thread] Thread 66880 stack guard pages activated: 0x00000092fbb00000-0x00000092fbb04000.
[0.271s][info ][os,thread] Thread finished (tid: 4996).
[0.271s][info ][os,thread] Thread finished (tid: 22980).
[0.271s][info ][os,thread] Thread finished (tid: 3448).
[0.271s][info ][os,thread] Thread finished (tid: 80644).

Native Memory Tracking:

Total: reserved=1589829842, committed=199098578
       malloc: 26263762 #34962
       mmap:   reserved=1563566080, committed=172834816

-                 Java Heap (reserved=104857600, committed=104857600)
[0.272s][debug][os,thread] Thread 59544 stack guard pages removed: 0x00000092fc400000-0x00000092fc404000.
                            (mmap: reserved=104857600, committed=104857600) 
 
-                     Class (reserved=1073821395, committed=210643[0.272s][info ][os,thread] JavaThread exiting (tid: 59544).
)
                            (classes #715)
                            (  instance classes #609, array classes #106)
                            (malloc=79571 #1612) (peak=80507 #1610) 
                            (mmap: reserved=1073741824, committed=131072) 
                            (  Metadata:   )
                            (    reserved=67108864, committed=327680)
                            (    used=254704)
                            (    waste=72976 =22.27%)
                            (  Class space:)
                            (    reserved=1073741824, committed=131072)
                            (    used=12240)
                            (    waste=118832 =90.66%)
 
-                    Thread (reserved=14727016, committed=10463080)
                            (thread #14)
                            (stack: [0.272s][info ][os,thread] Thread finished (tid: 59544).
reserved=14680064, committed=10416128)
                            (malloc=27320 #112) (peak=40888 #134) 
                            (arena=19632 #34) (peak=173336 #34)
 
-                      Code (reserved=254159544, committed=8198840)
                            (malloc=469688 #14867) (peak=469752 #14870) 
                            (mmap: reserved=253689856, committed=7729152) 
                            (arena=0 #0) (peak=33712 #1)
 
-                        GC (reserved=57264062, committed=57149374)
                            (malloc=21481406 #508) (peak=21481526 #511) 
                            (mmap: reserved=35782656, committed=35667968) 
 
-                 GCCardSet (reserved=23432, committed=23432)
                            (malloc=23432 #303) (at peak) 
 
-                  Compiler (reserved=206904, committed=206904)
                            (malloc=5616 #44) (peak=5752 #45) 
                            (arena=201288 #5) (peak=1478664 #6)
 
-                  Internal (reserved=538564, committed=538564)
                            (malloc=473028 #11302) (peak=476840 #11308) 
                            (mmap: reserved=65536, committed=65536) 
 
-                    Symbol (reserved=1275632, committed=1275632)
                            (malloc=906992 #3148) (at peak) 
                            (arena=368640 #1) (at peak)
 
-    Native Memory Tracking (reserved=565712, committed=565712)
                            (malloc=6320 #61) (peak=7456 #71) 
                            (tracking overhead=559392)
 
-        Shared class space (reserved=13631488, committed=13631488, readonly=0)
                            (mmap: reserved=13631488, committed=13631488) 
 
-               Arena Chunk (reserved=1328408, committed=1328408)
                            (malloc=1328408 #96) (peak=2006232 #98) 
 
-                   Tracing (reserved=321, committed=321)
                            (malloc=321 #9) (at peak) 
 
-                Statistics (reserved=128, committed=128)
                            (malloc=128 #2) (at peak) 
 
-                 Arguments (reserved=212, committed=212)
                            (malloc=212 #5) (at peak) 
 
-                    Module (reserved=204264, committed=204264)
                            (malloc=204264 #2075) (at peak) 
 
-                 Safepoint (reserved=8192, committed=8192)
                            (mmap: reserved=8192, committed=8192) 
 
-           Synchronization (reserved=76976, committed=76976)
                            (malloc=76976 #788) (at peak) 
 
-            Serviceability (reserved=17104, committed=17104)
                            (malloc=17104 #9) (at peak) 
 
-                 Metaspace (reserved=67121424, committed=340240)
                            (malloc=12560 #9) (at peak) 
                            (mmap: reserved=67108864, committed=327680) 
 
-      String Deduplication (reserved=632, committed=632)
                            (malloc=632 #8) (at peak) 
 
-           Object Monitors (reserved=832, committed=832)
                            (malloc=832 #4) (at peak) 
 
[0.272s][debug][os,thread] Thread 66880 stack guard pages removed: 0x00000092fbb00000-0x00000092fbb04000.
[0.272s][info ][os,thread] JavaThread exiting (tid: 66880).
[0.299s][info ][os,thread] Thread finished (tid: 58272).
];
 stderr: []
 exitValue = 0

java.lang.RuntimeException: Did not find expected NMT output
	at TestAlwaysPreTouchStacks.main(TestAlwaysPreTouchStacks.java:119)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
	at java.base/java.lang.reflect.Method.invoke(Method.java:578)
	at com.sun.javatest.regtest.agent.MainActionHelper$AgentVMRunnable.run(MainActionHelper.java:312)
	at java.base/java.lang.Thread.run(Thread.java:1623)

JavaTest Message: Test threw exception: java.lang.RuntimeException
JavaTest Message: shutting down test

result: Failed. Execution failed: `main' threw exception: java.lang.RuntimeException: Did not find expected NMT output


This is a newly added test with the fix for:

JDK-8294266 Add a way to pre-touch java thread stacks",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8305415,,,,,,,,JDK-8294266,JDK-8305485,,,,,,,,,,,,,,,x86_64,,,,,,,,,,linux,windows,,,,,"0|i30zez:",9223372036854775807,b23,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,,,"2023-04-02 07:52;dcubed;[~stuefe] - Please take a look. Your new test has failed once on
windows-x64-debug.;;;","2023-04-03 06:32;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/13295
Date: 2023-04-03 12:13:39 +0000;;;","2023-05-10 21:52;dukebot;Changeset: 8ac71863
Author:    Thomas Stuefe <stuefe@openjdk.org>
Date:      2023-05-11 04:50:37 +0000
URL:       https://git.openjdk.org/jdk/commit/8ac7186331489ccff7eb2908074c6ab9a39ff90c
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,
gtest/NMTGtests.java is failing various sub-tests,JDK-8305414,5097708,Bug,Closed,JDK,JDK,software,duke,,,P2,Fixed,stuefe,dcubed,dcubed,2023-04-02 06:47,2023-06-29 16:01,2023-10-01 09:55,2023-04-13 00:49,21,,,,,,,,21,hotspot,,0,intermittent,problemlist,tier1,tier3,tier4,tier5,tier6,tier7,,,,,,,,,"The following test failed 4 sub-tests in the JDK21 CI:

gtest/NMTGtests.java#nmt-summary

This failure started after the integration of:

JDK-8304815 Use NMT for more precise hs_err location printing

and the failing sub-tests were added by JDK-8304815.

Here's a snippet from the log file:

[ RUN      ] NMT.location_printing_cheap_dead_1_vm
/opt/mach5/mesos/work_dir/slaves/741e9afd-8c02-45c3-b2e2-9db1450d0832-S14089/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/df1c4042-c8aa-42f5-b049-5ce96b903557/runs/529764ba-a571-4b3b-9aa8-760bf25d9301/workspace/open/test/hotspot/gtest/nmt/test_nmt_locationprinting.cpp:42: Failure
Expected equality of these values:
  b
    Which is: false
  expected_return_code
    Which is: true
[  FAILED  ] NMT.location_printing_cheap_dead_1_vm (0 ms)
[ RUN      ] NMT.location_printing_cheap_dead_2_vm
/opt/mach5/mesos/work_dir/slaves/741e9afd-8c02-45c3-b2e2-9db1450d0832-S14089/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/df1c4042-c8aa-42f5-b049-5ce96b903557/runs/529764ba-a571-4b3b-9aa8-760bf25d9301/workspace/open/test/hotspot/gtest/nmt/test_nmt_locationprinting.cpp:42: Failure
Expected equality of these values:
  b
    Which is: false
  expected_return_code
    Which is: true
[  FAILED  ] NMT.location_printing_cheap_dead_2_vm (0 ms)
[ RUN      ] NMT.location_printing_cheap_dead_3_vm
/opt/mach5/mesos/work_dir/slaves/741e9afd-8c02-45c3-b2e2-9db1450d0832-S14089/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/df1c4042-c8aa-42f5-b049-5ce96b903557/runs/529764ba-a571-4b3b-9aa8-760bf25d9301/workspace/open/test/hotspot/gtest/nmt/test_nmt_locationprinting.cpp:42: Failure
Expected equality of these values:
  b
    Which is: false
  expected_return_code
    Which is: true
[  FAILED  ] NMT.location_printing_cheap_dead_3_vm (0 ms)
[ RUN      ] NMT.location_printing_cheap_dead_4_vm
/opt/mach5/mesos/work_dir/slaves/741e9afd-8c02-45c3-b2e2-9db1450d0832-S14089/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/df1c4042-c8aa-42f5-b049-5ce96b903557/runs/529764ba-a571-4b3b-9aa8-760bf25d9301/workspace/open/test/hotspot/gtest/nmt/test_nmt_locationprinting.cpp:42: Failure
Expected equality of these values:
  b
    Which is: false
  expected_return_code
    Which is: true
[  FAILED  ] NMT.location_printing_cheap_dead_4_vm (0 ms)

<snip>

[==========] 95 tests from 7 test suites ran. (2233 ms total)
[  PASSED  ] 91 tests.
[  FAILED  ] 4 tests, listed below:
[  FAILED  ] NMT.location_printing_cheap_dead_1_vm
[  FAILED  ] NMT.location_printing_cheap_dead_2_vm
[  FAILED  ] NMT.location_printing_cheap_dead_3_vm
[  FAILED  ] NMT.location_printing_cheap_dead_4_vm

 4 FAILED TESTS
ERROR: RUN_ALL_TESTS() failed. Error 1

[2023-04-02T06:39:37.120000253Z] Waiting for completion for process 957693
[2023-04-02T06:39:37.120192007Z] Waiting for completion finished for process 957693
----------System.err:(10/713)----------
java.lang.AssertionError: gtest execution failed; exit code = 2. the failed tests: [NMT::location_printing_cheap_dead_1_vm, NMT::location_printing_cheap_dead_2_vm, NMT::location_printing_cheap_dead_3_vm, NMT::location_printing_cheap_dead_4_vm]
	at GTestWrapper.main(GTestWrapper.java:98)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
	at java.base/java.lang.reflect.Method.invoke(Method.java:578)
	at com.sun.javatest.regtest.agent.MainActionHelper$AgentVMRunnable.run(MainActionHelper.java:312)
	at java.base/java.lang.Thread.run(Thread.java:1623)

JavaTest Message: Test threw exception: java.lang.AssertionError
JavaTest Message: shutting down test

result: Failed. Execution failed: `main' threw exception: java.lang.AssertionError: gtest execution failed; exit code = 2. the failed tests: [NMT::location_printing_cheap_dead_1_vm, NMT::location_printing_cheap_dead_2_vm, NMT::location_printing_cheap_dead_3_vm, NMT::location_printing_cheap_dead_4_vm]",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8306454,,,,,JDK-8304815,,,,,,,,,,,,,,,,aarch64,x86_64,,,,,,,,,linux,,,,,,"0|i30zej:",9223372036854775807,b19,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,Verified,,"2023-04-02 07:01;dcubed;jdk-21+17-1362-tier1 has a total of 4 sightings:
linux-aarch64, linux-x64, linux-aarch64-debug, linux-x64-debug;;;","2023-04-02 07:06;dcubed;The distribution in the jdk-21+17-1363-tier1 CI job set: 

   2 gtest/NMTGtests.java#nmt-detail 
   4 gtest/NMTGtests.java#nmt-summary

The platforms are: 
linux-aarch64, linux-aarch64-debug, linux-x64 and linux-x64-debug ;;;","2023-04-02 07:12;dcubed;Here's the distribution for the jdk-21+17-1362-tier3 CI job set:

   1 gtest/NMTGtests.java#nmt-detail
   6 gtest/NMTGtests.java#nmt-summary;;;","2023-04-02 07:14;dcubed;Here's the distribution for the jdk-21+17-1363-tier3 CI job set:

   3 gtest/NMTGtests.java#nmt-detail
   4 gtest/NMTGtests.java#nmt-summary;;;","2023-04-02 07:25;dcubed;Here's the distribution for the jdk-21+17-1362-tier4 CI job set:

   2 gtest/NMTGtests.java#nmt-detail
   5 gtest/NMTGtests.java#nmt-summary;;;","2023-04-02 07:27;dcubed;Here's the distribution for the jdk-21+17-1363-tier4 CI job set:

   1 gtest/NMTGtests.java#nmt-detail
   6 gtest/NMTGtests.java#nmt-summary

so far...;;;","2023-04-02 07:48;dcubed;Here's the distribution of sub-test failures that have been observed so far:

  28 [  FAILED  ] NMT.location_printing_cheap_dead_1_vm
  28 [  FAILED  ] NMT.location_printing_cheap_dead_2_vm
  20 [  FAILED  ] NMT.location_printing_cheap_dead_3_vm
  20 [  FAILED  ] NMT.location_printing_cheap_dead_4_vm
  10 [  FAILED  ] NMT.location_printing_cheap_dead_6_vm
  10 [  FAILED  ] NMT.location_printing_cheap_dead_7_vm;;;","2023-04-02 07:50;dcubed;Please take a look. Your new test changes are failing on
linux-aarch64, linux-aarch64-debug, linux-x64, and linux-x64-debug.;;;","2023-04-03 05:41;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/13296
Date: 2023-04-03 12:31:17 +0000;;;","2023-04-03 07:07;dcubed;In jdk-21+17-1367-tier1, the following test also started to fail:

gtest/GTestWrapper.java

[==========] 998 tests from 172 test suites ran. (70637 ms total)
[  PASSED  ] 996 tests.
[  FAILED  ] 2 tests, listed below:
[  FAILED  ] NMT.location_printing_cheap_dead_6_vm
[  FAILED  ] NMT.location_printing_cheap_dead_7_vm

 2 FAILED TESTS;;;","2023-04-05 23:04;gli;A failed test in `Pre-submit tests` may be related to this bug. Link: https://github.com/lgxbslgx/jdk/actions/runs/4625174828/jobs/8181225078

Some logs are shown below.

```
ACTION: main -- Failed. Execution failed: `main' threw exception: java.lang.AssertionError: gtest execution failed; exit code = 2. the failed tests: [NMT::location_printing_cheap_dead_5_vm]
```
;;;","2023-04-06 00:29;stuefe;[gli] that is why the test is disabled. Merge https://bugs.openjdk.org/browse/JDK-8305417 for the temporary disabling.;;;","2023-04-06 00:46;gli;Just a note that the 5th test case failed, too. It has not been disabled.;;;","2023-04-12 07:58;dcubed;Mach5 Test results for v04:

Mach5 Tier1:
- no failures
 
Mach5 Tier2:
- no failures
 
Mach5 Tier3:
- 1 known, unrelated client test failure:
 
Mach5 Tier4:
- no failures
 
Mach5 Tier5:
- 8 known, unrelated test failures:

Mach5 Tier6:
- no failures;;;","2023-04-13 00:49;dukebot;Changeset: fb9a29d7
Author:    Thomas Stuefe <stuefe@openjdk.org>
Date:      2023-04-13 07:47:34 +0000
URL:       https://git.openjdk.org/jdk/commit/fb9a29d732fdebc2114d1497d461accc97268953
;;;",,,,,,,,,,,,,,,,
Shenandoah evacuation workers may deadlock,JDK-8305403,5097646,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,wkemper,wkemper,wkemper,2023-03-31 14:30,2023-07-24 14:34,2023-10-01 09:55,2023-04-14 13:39,17,18,19,20,21,,,,21,hotspot,,0,amazon-interest,gc-shenandoah,jdk17u-fix-request,jdk17u-fix-yes,jdk20u-fix-request,jdk20u-fix-yes,,,,,,,,,,,"We've observed a situation where the JVM was deadlocked by Shenandoah's evacuation workers. This may happen if a safepoint begins during concurrent evacuation _and_ a GC worker thread experiences an out of memory error during the evacuation.

This situation occurs because some of the workers have set the cancelled state to `NOT_CANCELLED` and then yielded to the suspendible thread set because a safepoint is starting. Other workers who then experience an OOM during evacuation attempt to transition the heap from `CANCELLABLE` to `CANCELLED` in a CAS loop that will never succeed (because the cancelled state is `NOT_CANCELLED`). These workers are unable to join the suspendible thread set, so the threads which have yielded are unable to resume and reset the heap to `CANCELLABLE`. The VM thread cannot enter the safepoint and eventually all of the mutator threads block when they are unable to allocate.
",,,,,,,,,,,JDK-8307111,JDK-8307066,JDK-8308126,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8282997,,,,,,,,,,,,,,,,generic,,,,,,,,,,generic,,,,,,"0|i30zb7:",9223372036854775807,b19,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6b00f96c,,,,,,,,,"2023-04-03 15:28;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/13309
Date: 2023-04-03 21:45:39 +0000;;;","2023-04-14 13:39;dukebot;Changeset: 793da60e
Author:    William Kemper <wkemper@openjdk.org>
Committer: Y. Srinivas Ramakrishna <ysr@openjdk.org>
Date:      2023-04-14 20:37:35 +0000
URL:       https://git.openjdk.org/jdk/commit/793da60ee833d09db0f6f14b50a7cbd7f4549e3b
;;;","2023-04-14 15:43;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/1242
Date: 2023-04-14 22:39:01 +0000;;;","2023-04-17 15:40;wkemper;Fix request 17u.

This is a rare, but fairly devastating bug that results in the deadlock of most threads in the JVM.
Backport was not clean, but conflicts were trivial to resolve. 

The same set of tests were conducted for the 17 backport:
* Dacapo
* Specjbb 2015
* HyperAlloc
* Heapothesys
* jtreg:hotspot_gc_shenandoah
;;;","2023-04-26 08:46;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk20u/pull/65
Date: 2023-04-26 15:38:30 +0000;;;","2023-04-27 09:21;wkemper;Fix request 20u.

Backport is clean.

The same set of tests were conducted for the 20 backport:
* Dacapo
* Specjbb 2015
* HyperAlloc
* Heapothesys
* jtreg:hotspot_gc_shenandoah;;;",,,,,,,,,,,,,,,,,,,,,,,,,
ISO 4217 Amendment 175 Update,JDK-8305400,5097642,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,jlu,jlu,jlu,2023-03-31 11:22,2023-05-08 01:55,2023-10-01 09:55,2023-04-04 14:05,,,,,,,,,21,core-libs,,0,iso4217,jdk11u-fix-request,jdk11u-fix-yes,jdk17u-fix-request,jdk17u-fix-yes,noreg-trivial,,,,,,,,,,,"31 March 2023
ISO 4217 AMENDMENT NUMBER 175
Please find the following PUBLIC NOTICE from the Bank of Sierra Leone in regards the redenomination
of the Sierra Leonean LEONE (SLE/925).",,,,,,,,,,,JDK-8305658,JDK-8306240,JDK-8306522,JDK-8305657,JDK-8307600,JDK-8305656,,,,,,,,,,,,,,JDK-8296239,,,,,,,,,,,,,,,"2023-03-31 11:28;jlu;AMENDMENT NUMBER 175.pdf;https://bugs.openjdk.org/secure/attachment/103198/AMENDMENT+NUMBER+175.pdf",,,,,,,,,,,,generic,,,,,,,,,,generic,,,,,,"0|i30zab:",9223372036854775807,b17,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@7644fb4c,,,,,,,,,"2023-03-31 14:43;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/13275
Date: 2023-03-31 21:38:31 +0000;;;","2023-04-04 14:05;dukebot;Changeset: 7cf24d1c
Author:    Justin Lu <jlu@openjdk.org>
Committer: Naoto Sato <naoto@openjdk.org>
Date:      2023-04-04 21:02:33 +0000
URL:       https://git.openjdk.org/jdk/commit/7cf24d1c06142a3bab9cce5cd0ba34b8bbccf00f
;;;","2023-04-18 13:08;goetz;Fix request [11u,17u]

I backport this for parity with 11.0.20-oracle/17.0.8-oracle.
One of the required updates of meta information
Low risk. Pointless metadata change.
Clean backport. SAP nightly testing passed.;;;","2023-04-18 13:14;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/1267
Date: 2023-04-18 20:08:10 +0000;;;","2023-05-05 10:33;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk11u-dev/pull/1862
Date: 2023-05-05 17:26:38 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,,,
JDK-8301995 breaks arm 32-bit,JDK-8305387,5097628,Bug,Closed,JDK,JDK,software,duke,,,P2,Fixed,bulasevich,stuefe,stuefe,2023-03-31 06:57,2023-06-29 13:33,2023-10-01 09:55,2023-04-28 02:43,21,,,,,,,,21,hotspot,,0,metadata,oraclejdk-na,,,,,,,,,,,,,,,"ARM 32bit is broken since JDK-8301995. Implementation is plain missing.

Starting java crashes immediately or gives strange errors.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8301995,,,,,,,,,,,,,,,,,,,,,aarch32,,,,,,,,21,,,,,,,,"0|i30z77:",9223372036854775807,b21,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,Not verified,,"2023-03-31 08:31;coleenp;I know the arm code has a different origin and is mostly different from the aarch64 code but I wonder if there's a way to unify them so that aarch64 also supports arm32 ?  We did that with x86 and x64 (even though it restricted registers that we could use).  Just an idea.

Edit: maybe not :(
;;;","2023-03-31 08:50;stuefe;[~coleenp] Would be nice but I'm not sure it would be worth the trouble. The instruction set is quite dissimilar; it is not just a subset of arm64. E.g. arm32 has conditional execution and arm64 mostly not, arm32 seems to have more operations that work with immediates, and no CAS.
;;;","2023-04-22 00:02;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/13596
Date: 2023-04-22 06:54:59 +0000;;;","2023-04-28 02:43;dukebot;Changeset: 60a29a66
Author:    Aleksei Voitylov <avoitylov@openjdk.org>
Committer: Aleksey Shipilev <shade@openjdk.org>
Date:      2023-04-28 09:41:55 +0000
URL:       https://git.openjdk.org/jdk/commit/60a29a668c07cf7c15728063b19bb235c5fd2052
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,
Fix ignored bad CompileCommands in tests,JDK-8305356,5097596,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,tholenstein,epeter,epeter,2023-03-31 02:55,2023-04-10 10:25,2023-10-01 09:55,2023-04-05 02:38,21,,,,,,,,21,hotspot,,0,c2,compilercontrol,noreg-self,oracle-interest,oracle-triage-21,starter,,,,,,,,,,,"Malformed CompileCommands are silently ignored in JTreg tests. This means we do not test what we think we test. We may be missing bugs this way.

The intent of this RFE is to go through all tests and fix malformed CompileCommands. To do that we could change the warning message of bad CompileCommands into an assert and run all tests with it. An assert will also prevent future CompileCommand mistakes.

An example of a wrong CompileCommand usage:

open/test/hotspot/jtreg/compiler/intrinsics/bigInteger/TestShift.java

When one runs it, you get:

Error: Option 'DisableIntrinsic' with type 'ccstrlist' doesn't match supplied type 'ccstr'
Line: 'option,compiler.intrinsics.bigInteger.TestShift::base_left_shift,ccstr,DisableIntrinsic,_bigIntegerLeftShiftWorker'

Usage: '-XX:CompileCommand=<option>,<method pattern>' - to set boolean option to true
Usage: '-XX:CompileCommand=<option>,<method pattern>,<value>'
Use:   '-XX:CompileCommand=help' for more information and to list all option.

CompileCommand: An error occurred during parsing
Error: Option 'DisableIntrinsic' with type 'ccstrlist' doesn't match supplied type 'ccstr'
Line: 'option,compiler.intrinsics.bigInteger.TestShift::base_right_shift,ccstr,DisableIntrinsic,_bigIntegerRightShiftWorker'

Usage: '-XX:CompileCommand=<option>,<method pattern>' - to set boolean option to true
Usage: '-XX:CompileCommand=<option>,<method pattern>,<value>'
Use:   '-XX:CompileCommand=help' for more information and to list all option.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8282797,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i30z03:",9223372036854775807,b17,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2023-03-31 03:22;chagedorn;ILW = Wrong test executions due to malformed CompileCommands (does not cause a test failure but we might miss real bugs), at least one case, no workaround = MLH = P4;;;","2023-04-03 04:22;tholenstein;The following tests fail with the assert because of a wrong CompileCommand:
* `test/hotspot/jtreg/compiler/integerArithmetic/TestNegMultiply.java` 
* `test/hotspot/jtreg/compiler/integerArithmetic/TestNegAnd.java`
* `test/hotspot/jtreg/compiler/loopopts/TestPeelingRemoveDominatedTest.java` 
* `test/hotspot/jtreg/compiler/intrinsics/bigInteger/TestMulAdd.java`
* `test/hotspot/jtreg/compiler/intrinsics/bigInteger/TestMultiplyToLen.java`
* `test/hotspot/jtreg/compiler/intrinsics/bigInteger/TestShift.java`
* `test/hotspot/jtreg/compiler/intrinsics/bigInteger/TestSquareToLen.java`

The following tests fail with the assert but it is expected:
* `test/hotspot/jtreg/compiler/compilercontrol/mixed/RandomCommandsTest.java`
* `test/hotspot/jtreg/compiler/compilercontrol/commands/ControlIntrinsicTest.java`
* `test/hotspot/jtreg/compiler/compilercontrol/commands/OptionTest.java  `
* `test/hotspot/jtreg/compiler/oracle/CheckCompileCommandOption.java`
* `test/hotspot/jtreg/compiler/oracle/PrintIdealPhaseTest.java`
* `test/hotspot/jtreg/compiler/oracle/TestInvalidCompileCommand.java`
* `test/hotspot/jtreg/runtime/CommandLine/CompilerConfigFileWarning.java`


;;;","2023-04-03 05:43;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/13297
Date: 2023-04-03 12:31:41 +0000;;;","2023-04-05 02:38;dukebot;Changeset: 0e0c022b
Author:    Tobias Holenstein <tholenstein@openjdk.org>
Date:      2023-04-05 09:35:45 +0000
URL:       https://git.openjdk.org/jdk/commit/0e0c022b1f870806963789afdef9298851719498
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,
updateIconImages may lead to deadlock after JDK-8276849,JDK-8305352,5097592,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,dcherepanov,dcherepanov,dcherepanov,2023-03-31 02:00,2023-05-15 18:15,2023-10-01 09:55,2023-04-24 23:58,20,,,,,,,,21,client-libs,,0,jdk20u-fix-request,jdk20u-fix-SQE-ok,jdk20u-fix-yes,noreg-hard,regression,regression_8276849,,,,,,,,,,,"Reproducible with jdk21+15 and jdk20. Works with jdk19.

The deadlock occurs during startup when app attempts to show the main frame and hangs. Thread dump attached.

I didn't manage to reproduce with a minimal test and unfortunately I can't share the sources of the app which I use to reproduce this issue.",,,,,,,,,,,JDK-8307107,JDK-8308125,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8276849,,,,"2023-03-31 02:01;dcherepanov;dump.txt;https://bugs.openjdk.org/secure/attachment/103191/dump.txt",,,,,,,,,,,,generic,,,,,,,,,,windows,,,,,,"0|i30yz7:",9223372036854775807,b20,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@5a9b3fd3,,,,,,,,,"2023-03-31 02:05;dcherepanov;This is a regression of JDK-8276849. Now additional call to updateIconImages() happens on the EDT thread may lead to deadlock between the EDT thread and the main thread.

EDT thread:
        at sun.java2d.loops.GraphicsPrimitiveMgr.initIDs(java.desktop@21-ea/Native Method)
        - waiting on the Class initialization monitor for sun.java2d.loops.Blit
        at sun.java2d.loops.GraphicsPrimitiveMgr.<clinit>(java.desktop@21-ea/GraphicsPrimitiveMgr.java:56)

main thread:
        at sun.java2d.loops.Blit.<clinit>(java.desktop@21-ea/Blit.java:114)
        - waiting on the Class initialization monitor for sun.java2d.loops.GraphicsPrimitiveMgr
        at sun.java2d.windows.GDIWindowSurfaceData.<clinit>(java.desktop@21-ea/GDIWindowSurfaceData.java:88)
;;;","2023-03-31 02:19;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/13263
Date: 2023-03-31 09:11:20 +0000;;;","2023-03-31 11:26;prr;No objections to a safe fix for this, but the app is creating and - more to the point - showing (setVisible) the AWT window on the main thread.
Even for AWT (non-swing) apps, it is recommended to do it on the EDT to avoid threading issues - such as this.
Lots of apps do use the main thread, and have no issues but that's not guaranteed.

;;;","2023-04-24 23:58;dukebot;Changeset: f968da97
Author:    Dmitry Cherepanov <dcherepanov@openjdk.org>
Date:      2023-04-25 06:56:32 +0000
URL:       https://git.openjdk.org/jdk/commit/f968da97a5a5c68c28ad29d13fdfbe3a4adf5ef7
;;;","2023-04-25 01:38;dcherepanov;Fix request (20u)

This is a low-risk change that fixes regression introduced in 20. The backport applies cleanly.;;;","2023-04-25 01:47;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk20u/pull/62
Date: 2023-04-25 08:39:36 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,,
C2 setScopedValueCache intrinsic doesn't use access API,JDK-8305351,5097591,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,eosterlund,eosterlund,eosterlund,2023-03-31 01:12,2023-04-24 11:29,2023-10-01 09:55,2023-04-17 05:16,21,,,,,,,,21,hotspot,,0,c2,oracle-triage-11,oracle-triage-17,oracle-triage-21,,,,,,,,,,,,,"The setScopedValueCache intrinsic for C2 doesn't use the access API. Instead, we store into an OopHandle with a raw store. That doesn't play well with all GCs, for example Shenandoah and generational ZGC. We should use the access API",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8284161,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i30yyz:",9223372036854775807,b19,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2023-04-03 06:01;chagedorn;ILW = Not using access API could lead to problems for some GCs, not observed yet?, use GC other than Shenandoah or generational ZGC = MLH = P4;;;","2023-04-04 05:47;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/13324
Date: 2023-04-04 12:40:14 +0000;;;","2023-04-17 05:16;dukebot;Changeset: 02347d0c
Author:    Erik Österlund <eosterlund@openjdk.org>
Date:      2023-04-17 12:14:57 +0000
URL:       https://git.openjdk.org/jdk/commit/02347d0cec77212d38aad8d06b6ac0c316be00d7
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,
BigDecimal.fractionOnly() erroneously returns true for large scale value,JDK-8305343,5097570,Bug,Closed,JDK,JDK,software,duke,,,P4,Fixed,rgiulietti,webbuggrp,webbuggrp,2023-03-30 16:38,2023-07-21 07:36,2023-10-01 09:55,2023-04-04 11:12,11,17,20,21,8,,,,21,core-libs,,0,dcsaw,reproducer-yes,webbug,,,,,,,,,,,,,,"A DESCRIPTION OF THE PROBLEM :
The internal method java.math.BigDecimal.fractionOnly() erroneously returns true for large scale values because it calculates `int - int` which can overflow; instead it should first cast one operand to `long`.

This leads to an incorrect exception message for java.math.BigDecimal.longValueExact() which claims ""Rounding necessary"" while the message should be ""Overflow"".

IMPORTANT: If you fix this numeric overflow in BigDecimal.fractionOnly(), you must also fix it here: https://github.com/openjdk/jdk/blob/d8158897c3d0dbea46e4f55ad8b501252d88b7e1/src/java.base/share/classes/java/math/BigDecimal.java#L3628 (same numeric overflow problem for large `scale` values)
Otherwise this might circumvent the fix for JDK-8211936.


STEPS TO FOLLOW TO REPRODUCE THE PROBLEM :
Run the following two statements and inspect the exception messages:
new BigDecimal(""1e"" + (Integer.MAX_VALUE - 1)).longValueExact()
new BigDecimal(""1e"" + Integer.MAX_VALUE).longValueExact()


EXPECTED VERSUS ACTUAL BEHAVIOR :
EXPECTED -
java.lang.ArithmeticException: Overflow
java.lang.ArithmeticException: Overflow

ACTUAL -
java.lang.ArithmeticException: Overflow
java.lang.ArithmeticException: Rounding necessary


",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"2023-03-30 23:34;tongwan;Main.java;https://bugs.openjdk.org/secure/attachment/103188/Main.java",,,,,,,,,,,,generic,,,,,,,,,,generic,,,,,,"0|i30yub:",9223372036854775807,b17,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@28853e3d,,,,,,,Verified,,"2023-03-30 23:42;tongwan;The observations on Windows 10:
JDK 8: Failed, test 2 failed.
JDK 11: Failed.
JDK 17: Failed.
JDK 20: Failed.
JDK 21ea+5: Failed.;;;","2023-04-04 06:32;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/13326
Date: 2023-04-04 13:25:44 +0000;;;","2023-04-04 11:12;dukebot;Changeset: 7c650489
Author:    Raffaello Giulietti <rgiulietti@openjdk.org>
Date:      2023-04-04 18:09:04 +0000
URL:       https://git.openjdk.org/jdk/commit/7c650489d2ffd9ec7c8513427ff7c83ed30dcec2
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,
java.security.debug=sunpkcs11 breaks PKCS#11 configuration with slotListIndex,JDK-8305336,5097381,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,valeriep,webbuggrp,webbuggrp,2023-03-29 01:57,2023-04-19 23:42,2023-10-01 09:55,2023-04-16 21:49,17,,,,,,,,21,security-libs,,0,additional-information-received,dcsaw,fossbug,noreg-trivial,reproducer-tp,webbug,,,,,,,,,,,"A DESCRIPTION OF THE PROBLEM :
When debugging the SunPKCS11 configuration for a Yubikey 5, I noticed that setting java.security.debug=sunpkcs11 breaks the configuration if the slotListIndex parameter is used.

STEPS TO FOLLOW TO REPRODUCE THE PROBLEM :
Run the following code, with and without -Djava.security.debug=sunpkcs11

      PKCS11 pkcs11 = PKCS11.getInstance(""C:\\Program Files\\Yubico\\Yubico PIV Tool\\bin\\libykcs11.dll"", ""C_GetFunctionList"", null, false);
      long slot = pkcs11.C_GetSlotList(true)[0]; // slot = 2

      String configuration = ""--name=yubikey\n"" +
              ""library = \""C:/Program Files/Yubico/Yubico PIV Tool/bin/libykcs11.dll\""\n"" +
              ""slotListIndex="" + slot;

      Provider provider = Security.getProvider(""SunPKCS11"");
      provider.configure(configuration);

EXPECTED VERSUS ACTUAL BEHAVIOR :
EXPECTED -
No exception thrown, the provider is properly initialized.
ACTUAL -
When java.security.debug=sunpkcs11 is set an exception is thrown. Here is the output:

SunPKCS11 loading --name=yubikey
library = ""C:/Program Files/Yubico/Yubico PIV Tool/bin/libykcs11.dll""
slotListIndex=2
sunpkcs11: Initializing PKCS#11 library C:/Program Files/Yubico/Yubico PIV Tool/bin/libykcs11.dll
Information for provider SunPKCS11-yubikey
Library info:
  cryptokiVersion: 2.40
  manufacturerID: Yubico (www.yubico.com)         
  flags: 0
  libraryDescription: PKCS#11 PIV Library (SP-800-73) 
  libraryVersion: 2.30
All slots: 0, 1, 2
Slots with tokens: 2

java.security.ProviderException: Initialization failed
	at jdk.crypto.cryptoki/sun.security.pkcs11.SunPKCS11.<init>(SunPKCS11.java:387)
	at jdk.crypto.cryptoki/sun.security.pkcs11.SunPKCS11$1.run(SunPKCS11.java:118)
	at jdk.crypto.cryptoki/sun.security.pkcs11.SunPKCS11$1.run(SunPKCS11.java:115)
	at java.base/java.security.AccessController.doPrivileged(AccessController.java:569)
	at jdk.crypto.cryptoki/sun.security.pkcs11.SunPKCS11.configure(SunPKCS11.java:115)
	... 32 more
Caused by: java.security.ProviderException: slotListIndex is 2 but token only has 1 slots
	at jdk.crypto.cryptoki/sun.security.pkcs11.SunPKCS11.<init>(SunPKCS11.java:368)
	... 36 more


---------- BEGIN SOURCE ----------
import java.security.Provider;
import java.security.Security;

import org.junit.Test;
import sun.security.pkcs11.wrapper.PKCS11;

public class SunPKCS11Test {

    @Test
    public void testSunPKCS11() throws Exception {
        PKCS11 pkcs11 = PKCS11.getInstance(""C:\\Program Files\\Yubico\\Yubico PIV Tool\\bin\\libykcs11.dll"", ""C_GetFunctionList"", null, false);
        long slot = pkcs11.C_GetSlotList(true)[0]; // slot = 2

        String configuration = ""--name=yubikey\n"" +
                ""library = \""C:/Program Files/Yubico/Yubico PIV Tool/bin/libykcs11.dll\""\n"" +
                ""slotListIndex="" + slot;

        Provider provider = Security.getProvider(""SunPKCS11"");
        provider.configure(configuration);
    }
}
---------- END SOURCE ----------

CUSTOMER SUBMITTED WORKAROUND :
Replace the 'slotListIndex' parameter with 'slot'

FREQUENCY : always


",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,x86_64,,,,,,,,,,windows_10,,,,,,"0|i30xob:",9223372036854775807,b19,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@7cafbd52,,,,,,,,,"2023-03-30 07:02;tongwan;Requested a reproducer without installing 3rd party software.;;;","2023-03-30 19:10;tongwan;Additional information from the submitter:
I don't think this is possible, the issues lies in the SunPKCS11 configuration handling, which is designed to integrate 3rd party PKCS#11 libraries.;;;","2023-04-10 13:50;valeriep;The existing call of 
    slots = p11.C_GetSlotList(true);
inside the ""if (showInfo)"" block assigns 'slots' with only slots with tokens.

Thus causing the unexpected exception and failed the initialization.;;;","2023-04-14 15:00;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/13483
Date: 2023-04-14 21:53:33 +0000;;;","2023-04-16 21:49;dukebot;Changeset: e5759241
Author:    Valerie Peng <valeriep@openjdk.org>
Date:      2023-04-17 04:47:40 +0000
URL:       https://git.openjdk.org/jdk/commit/e575924131672c3ae662bbc44435c7acea3959d5
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,
GenShen: reference processing needs a card-marking barrier,JDK-8305334,5097572,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,ysr,ysr,ysr,2023-03-30 18:28,2023-03-31 13:57,2023-10-01 09:55,2023-03-31 13:57,repo-shenandoah,,,,,,,,,hotspot,,0,genshen,,,,,,,,,,,,,,,,Global collections can create new cross-generational pointers during j.l.r.Reference processing which should be added to the card marking remembered set. The issue was found by @kdnilsen whilst running dacapo with heap verification which failed during reference processing for a global collection.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8305335,,,,,,,,,,,,,,,,,,,,,,,,repo-shenandoah,,,,,,,,"0|i30yur:",9223372036854775807,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6b00f96c,,,,,,,,,"2023-03-30 18:34;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/shenandoah/pull/238
Date: 2023-03-30 20:30:26 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
C2: Wrong execution of vectorizing Interger.reverseBytes,JDK-8305324,5097559,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,jbhateja,chagedorn,chagedorn,2023-03-30 12:52,2023-04-19 23:41,2023-10-01 09:55,2023-04-12 10:10,19,20,21,,,,,,21,hotspot,,0,c2,c2-superword,javafuzzer,oracle-triage-11,oracle-triage-17,oracle-triage-21,vectorapi,,,,,,,,,,"The attached Java Fuzzer test produces a wrong result after JDK-8288112:

To reproduce:
$ java -Xint Test.java > int.log
$ java -XX:-TieredCompilation -Xcomp -XX:CompileOnly=Test Test.java > c2.log
$ diff int.log c2.log

$ java -Xint Reduced.java > int.log
$ java -XX:-TieredCompilation -Xcomp -XX:CompileOnly=Reduced Reduced.java > c2.log
$ diff int.log c2.log

Output diff of Test.java:
0a1
> CompileCommand: compileonly Test.* bool compileonly = true
16c17
< i24 i25 byArr = 2,-3,-1381
---
> i24 i25 byArr = 2,-3,-1765
27c28
< i24 i25 byArr = 2,-3,-1381
---
> i24 i25 byArr = 2,-3,-1553
38c39
< i24 i25 byArr = 2,-3,-1381
---
> i24 i25 byArr = 2,-3,-1553
49c50
< i24 i25 byArr = 2,-3,-1381
---
> i24 i25 byArr = 2,-3,-1553
60c61
< i24 i25 byArr = 2,-3,-1381
---
> i24 i25 byArr = 2,-3,-1553
71c72
< i24 i25 byArr = 2,-3,-1381
---
> i24 i25 byArr = 2,-3,-1553
82c83
< i24 i25 byArr = 2,-3,-1381
---
> i24 i25 byArr = 2,-3,-1553
93c94
< i24 i25 byArr = 2,-3,-1381
---
> i24 i25 byArr = 2,-3,-1553
104c105
< i24 i25 byArr = 2,-3,-1381
---
> i24 i25 byArr = 2,-3,-1553",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8288112,JDK-8284960,,,,,,,,"2023-03-30 12:49;chagedorn;FuzzerUtils.java;https://bugs.openjdk.org/secure/attachment/103185/FuzzerUtils.java","2023-03-30 12:50;chagedorn;Reduced.java;https://bugs.openjdk.org/secure/attachment/103184/Reduced.java","2023-03-30 12:49;chagedorn;Test.java;https://bugs.openjdk.org/secure/attachment/103186/Test.java",,,,,,,,,,,,,,,,,b32,,,,,,,,,"0|i30yrv:",9223372036854775807,b19,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2023-03-30 12:55;chagedorn;ILW = Wrong execution of C2 compiled code, single fuzzer test and only when using Interger.reverseBytes(), disable compilation of affected method or use -XX:-UseSuperWord = HLM = P3;;;","2023-03-30 12:55;chagedorn;[~jbhateja] can you have a look?;;;","2023-04-10 03:56;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/13404
Date: 2023-04-10 10:49:24 +0000;;;","2023-04-10 06:28;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/13406
Date: 2023-04-10 13:21:29 +0000;;;","2023-04-12 10:10;dukebot;Changeset: 19380d74
Author:    quadhier <quadhier@163.com>
Committer: Vladimir Kozlov <kvn@openjdk.org>
Date:      2023-04-12 17:08:26 +0000
URL:       https://git.openjdk.org/jdk/commit/19380d74e437c17c4d8292e2adfd0fb20f059bb0
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,
Update java/net/httpclient/ContentLengthHeaderTest.java to use new HttpTestServer factory methods,JDK-8305323,5097558,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,dfuchs,dfuchs,dfuchs,2023-03-30 12:33,2023-04-03 12:14,2023-10-01 09:55,2023-03-31 06:50,21,,,,,,,,21,core-libs,,0,httpclient,noreg-self,ursqe-triaged,,,,,,,,,,,,,,The ContentLengthHeaderTest could be refactored to use the new HttpTestServer factory methods.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i30yrn:",9223372036854775807,b16,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@446e124a,,,,,,,,,"2023-03-30 12:55;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/13251
Date: 2023-03-30 19:40:27 +0000;;;","2023-03-31 06:50;dukebot;Changeset: 2f36eb01
Author:    Daniel Fuchs <dfuchs@openjdk.org>
Date:      2023-03-31 13:48:20 +0000
URL:       https://git.openjdk.org/jdk/commit/2f36eb01215785bd91d528de6324b4faa87dcc2e
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
DbgStrings and AsmRemarks are leaking,JDK-8305320,5097555,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,jcking,jcking,jcking,2023-03-30 11:29,2023-06-04 20:17,2023-10-01 09:55,2023-05-31 14:43,17,20,21,,,,,,21,hotspot,,0,amazon-interest,interpreter,memory,,,,,,,,,,,,,,There are two leaks in debug builds related to DbgStrings and AsmRemarks. The first is because DbgStrings::share does not call clear() like AsmRemarks::share does. The second is because InterpreterCodelet can be re-used again from CodeletMark if the generated size ends up being 0.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i30yqz:",9223372036854775807,b25,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,,,"2023-03-30 11:50;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/13249
Date: 2023-03-30 18:30:41 +0000;;;","2023-05-31 14:43;dukebot;Changeset: 8eda97dc
Author:    Justin King <jcking@openjdk.org>
Date:      2023-05-31 21:41:46 +0000
URL:       https://git.openjdk.org/jdk/commit/8eda97dc8d1f0db0eb589f678e9ca493c8ea6334
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
make_method_handle_intrinsic may call java code under a lock,JDK-8305252,5097483,Bug,Closed,JDK,JDK,software,duke,,,P4,Fixed,coleenp,aboldtch,aboldtch,2023-03-30 06:33,2023-05-01 10:06,2023-10-01 09:55,2023-04-24 05:57,21,,,,,,,,21,hotspot,,0,hashtable,,,,,,,,,,,,,,,,"`SystemDictionary::find_method_handle_intrinsic` calls `Method::make_method_handle_intrinsic` under the `InvokeMethodTable_lock`  lock. The correctness is motivated with a comment:
```
    // This function could get an OOM but it is safe to call inside of a lock because
    // throwing OutOfMemoryError doesn't call Java code.
```

However `Method::make_adapters` will throw a `VirtualMachineError` via 
`THROW_MSG_NULL(vmSymbols::java_lang_VirtualMachineError(), ""Out of space in CodeCache for adapters"");` which will call java code.

Fastdebug linux x86_64 stack trace:
```
V  [libjvm.so+0x10a4ab0]  JavaCallWrapper::JavaCallWrapper(methodHandle const&, Handle, JavaValue*, JavaThread*)+0xa0  (javaCalls.cpp:60)
V  [libjvm.so+0x10a6764]  JavaCalls::call_helper(JavaValue*, methodHandle const&, JavaCallArguments*, JavaThread*)+0x1a4  (javaCalls.cpp:394)
V  [libjvm.so+0x10a8a07]  JavaCalls::call_special(JavaValue*, Klass*, Symbol*, Symbol*, JavaCallArguments*, JavaThread*)+0x317  (javaCalls.cpp:329)
V  [libjvm.so+0x10a92f9]  JavaCalls::construct_new_instance(InstanceKlass*, Symbol*, JavaCallArguments*, JavaThread*)+0xf9  (javaCalls.cpp:295)
V  [libjvm.so+0xd71dca]  Exceptions::new_exception(JavaThread*, Symbol*, Symbol*, JavaCallArguments*, Handle, Handle)+0x22a  (exceptions.cpp:285)
V  [libjvm.so+0xd72022]  Exceptions::new_exception(JavaThread*, Symbol*, Symbol*, JavaCallArguments*, Handle, Handle, Handle)+0x62  (exceptions.cpp:306)
V  [libjvm.so+0xd72df4]  Exceptions::new_exception(JavaThread*, Symbol*, char const*, Handle, Handle, Handle, Exceptions::ExceptionMsgToUtf8Mode)+0x604  (exceptions.cpp:389)
V  [libjvm.so+0xd76e68]  Exceptions::_throw_msg(JavaThread*, char const*, int, Symbol*, char const*, Handle, Handle)+0x198  (exceptions.cpp:193)
V  [libjvm.so+0xd7718e]  Exceptions::_throw_msg(JavaThread*, char const*, int, Symbol*, char const*)+0x1ee  (exceptions.cpp:232)
V  [libjvm.so+0x167cb19]  Method::make_adapters(methodHandle const&, JavaThread*)+0x129  (method.cpp:1258)
V  [libjvm.so+0x167cc3b]  Method::link_method(methodHandle const&, JavaThread*)+0x11b  (method.cpp:1234)
V  [libjvm.so+0x16839fd]  Method::make_method_handle_intrinsic(vmIntrinsicID, Symbol*, JavaThread*)+0x73d  (method.cpp:1484)
V  [libjvm.so+0x1a983ed]  SystemDictionary::find_method_handle_intrinsic(vmIntrinsicID, Symbol*, JavaThread*)+0x19d  (systemDictionary.cpp:1963)
```",,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8306950,,,,,,,,,,,,JDK-8306874,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i30yaz:",9223372036854775807,b20,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,Fix failed,,"2023-03-31 10:24;coleenp;The OOM comment is a lie too.;;;","2023-04-03 12:41;coleenp;Which draft PR change is worse?

https://github.com/openjdk/jdk/pull/13307
or
https://github.com/openjdk/jdk/pull/13308

We have to give up the Mutex to create a method handle intrinsic function, so have to have a way to deal with racing threads doing the same thing, which isn't very atypical.

One change has some tortured logic to add the entry, create the Method and then add the method afterwards.  Racing threads wait for the first one.  The other simply deletes the Method created by the losing thread, except it has to call nmethod->flush() and add things to the CLD->deallocate_list which is something we have to clean up in a safepoint.
;;;","2023-04-03 13:17;jvernee;It seems like the racing version has the potential to be lock-free altogether (maybe using ConcurrentHashTable?) Threads can race and CAS the result into the table, or back off and delete.

That would also avoid taking a lock for the common case where a Method* already exists. This code (SystemDictionary::find_method_handle_intrinsic) is quite visible in profiles that create a lot of MethodHandles. It accounts for most of the time spent in `MethodHandleNatives::resolve` (Java), of which less than half is spent in `make_method_handle_intrinsic`, so it seems that lookups take up quite a bit of time as well (most of the rest of the time is spent in `AdapterHandlerLibrary::get_adapter`). Avoiding the lock might help.

My $0.02

P.S. Maybe a hybrid mode is also possible: lock-free read from (concurrent) map, if null: grab a lock and wait for 1 thread to generate the thing. Avoids taking the lock for reads in most cases, but doesn't allow racing for creation.;;;","2023-04-03 14:04;jvernee;generate_native_wrapper barely takes any time at all. Most of the time is spent in find_method_handle_intrinsic, of which about 1/3rd is spent in make_method_handle_intrinsic. Off that 1/3rd most of the time is spent in get_adapter, and about a quarter of the time spent in get_adapter is spent in create-adapter. So, it seems that lookups take a significant amount of time. (see: https://cr.openjdk.org/~jvernee/resolve_profile.png )

This is a profile of a fuzzer I built for Panama, which creates lots of MethodHandles with 0-30 parameters of mostly different shapes.

Though, on second thought, improving the performance of this code is perhaps not in the scope of the current issue (and probably needs more investigation too...). So, feel free to disregard that aspect.;;;","2023-04-03 15:55;coleenp;The performance of this code is not in the scope but it is of interest.  Both fixes above might be good for performance because we drop the lock for make_method_handle_intrinsic ... get_adapter.  The current code serializes this with a global lock.  Can you try my fix either A or B above?;;;","2023-04-04 08:38;jvernee;I tested the different versions and don't really see a big difference between them.

baseline: https://cr.openjdk.org/~jvernee/link_mh/fuzzer_baseline.html
racy: https://cr.openjdk.org/~jvernee/link_mh/fuzzer_racy.html (https://github.com/openjdk/jdk/pull/13308)
exclusive: https://cr.openjdk.org/~jvernee/link_mh/fuzzer_excl.html (https://github.com/openjdk/jdk/pull/13307)

(In the flame graph you'll want to look for one of the red 'MHN_resolve_mem' peaks)

Since all versions still grab a lock for the lookup, this seems expected.

(I've also tried, unsuccessfully so far, to isolate this code path in a simpler benchmark. It seems hard to isolate the exact code path without spinning a bunch of bytecode, due to caching in the MethodHandle implementation).

;;;","2023-04-04 10:42;coleenp;I have to admit, that I have no idea how to read these flamegraphs.  It's disappointing that it doesn't help here.  The old code did:
     lock global lock
     lookup -> if success, return Method;
     create method handle intrinsic -> set_adapter, etc
     unlock

The new version(s) do a variation of:

    lock global lock
    lookup -> if success, return method
    unlock
    create method handle intrinsic -> set_adapter, etc
    lock
       try to add new method if not added by racing thread
    unlock

So the current version has a global lock around all the create method handle intrinsic code, which is the thing you said takes all the time.;;;","2023-04-04 13:24;jvernee;Sorry, what I should have said is: 2/3rds of the time spent in find_method_handle_intrinic is spent outside of make_method_handle_intrinsic (which takes up the other 1/3rd), and that share grows if I run the benchmark for longer. So, I think that time can be mostly attributed to looking up existing entries in the cache and then returning early.

I think that if taking the global lock for the initial lookup can be avoided, that might potentially speed this code up (i.e. make the cache hit fast-path faster). We'd get:

    lookup -> if success, return method
    create method handle intrinsic -> set_adapter, etc
    CAS new method into the table. Delete if another thread beat us.

Which seems like it would be possible if _invoke_method_intrinsic_table was switched to a concurrent hash table.

FWIW, most of the linking in that benchmark happens on a single thread, so I think that's why dropping the lock just for make_method_handle_intrinsic doesn't have much effect. (I've parallelized the fuzzer in the past, but it didn't have much effect, possibly because of the global MH intrinsic and adapter locks)

Any way, whether dropping the lock altogether would help is mostly a hunch I have, so it seems better to address it separately.;;;","2023-04-04 14:14;coleenp;> Any way, whether dropping the lock altogether would help is mostly a hunch I have, so it seems better to address it separately.

Yes.

If you want file an RFE and some directions to observe performance data (if possible), we'll have a look at it.
You could observe the value of dropping the lock for read if you compare the results with JDK 17.  That version had lock free reads on this table.  There's a lot of other differences so maybe it's apples to oranges, but it would be an interesting data point.;;;","2023-04-13 12:45;coleenp;[~jvernee] Here's a CHT version of this change if you want to test out your read lock theory.  CHT has all this boilerplate code and is more complicated so if it doesn't help, we'd rather use ResourceHash.

https://github.com/openjdk/jdk/pull/13468;;;","2023-04-17 05:59;jvernee;[~coleenp] Thanks. I'm gonna dig into the usage of MHN_resolve_Mem, and will try to set up a more targeted micro benchmark to measure this.;;;","2023-04-18 08:31;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/13308
Date: 2023-04-03 19:33:27 +0000;;;","2023-04-20 11:38;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/13307
Date: 2023-04-03 19:30:49 +0000;;;","2023-04-20 18:56;dholmes;I don't see any reason the code pointed out in the description has to throw a newly create VME instead of just an OOME, and we can throw OOME without executing Java code - though we may need to expend some effort to force that (it would be a pre-allocated, probably stackless OOME).

Alternatively, if the only reason this Method/ConstMethod code is using TRAPS is to communicate OOM conditions, then perhaps we could stop doing that and just return null on OOM and then let the top-level code throw the actual OOME? It forsakes the convenience of using CHECK of course.

Or we use a pre-allocated stackless OOME and then let the top-level code replace it with a newly created OOME - outside the locked region. The C++ stack is of no relevance to the OOME so it doesn't matter at what level we construct it.;;;","2023-04-20 19:02;dholmes;FTR the ""back-off and delete"" approach is now discarded as the deletion is problematc.;;;","2023-04-24 05:57;dukebot;Changeset: 7400aff3
Author:    Coleen Phillimore <coleenp@openjdk.org>
Date:      2023-04-24 12:55:15 +0000
URL:       https://git.openjdk.org/jdk/commit/7400aff3b8a0294dcbb6e89e9d8aad984f29fe92
;;;",,,,,,,,,,,,,,,
TableView not rendered correctly after column is made visible if fixed cell size is set,JDK-8305248,5097478,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,mhanl,jpereda,jpereda,2023-03-30 05:53,2023-04-06 05:13,2023-10-01 09:55,2023-04-03 10:25,jfx20,,,,,,,,jfx21,javafx,,0,,,,,,,,,,,,,,,,,"After JDK-8218826, when using a TableView control with fixed cell size set, showing a column that was previously hidden doesn't lay it out correctly.

The attached test shows the case. 

Running the test with any JavaFX version earlier than 20-ea+2 works as expected: 

- Run test, column 1 and 3 are shown (see Table0.png)
- Select CheckBox, column 2 is also shown and correctly rendered (see Table1.png)

But running with JavaFX version 20-ea+2 or greater fails: 

- Run test, column 1 and 3 are shown (see Table0.png)
- Select CheckBox, column 2 is not fully shown (only column table header) (see Table2.png)

The test runs fine selecting three times the checkbox, forcing a relayout (like resizing the stage) or if fixed cell set is not set.
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"2023-03-30 05:46;jpereda;TableViewBug.java;https://bugs.openjdk.org/secure/attachment/103174/TableViewBug.java","2023-03-30 05:46;jpereda;table0.png;https://bugs.openjdk.org/secure/attachment/103177/table0.png","2023-03-30 05:46;jpereda;table1.png;https://bugs.openjdk.org/secure/attachment/103176/table1.png","2023-03-30 05:46;jpereda;table2.png;https://bugs.openjdk.org/secure/attachment/103175/table2.png",,,,,,,,,,,,,,,,,,,,,,,,,"0|i30y9v:",9223372036854775807,b12,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@67282485,,,,,,,,,"2023-03-30 08:21;angorya;[~mhanl] or [~jpereda] would you like to take a look at this bug?;;;","2023-03-30 08:48;mhanl;That's interesting since I did not change any logic other then the wrong used padding.
But sure, I can have a look on this. I remember other issues when setting a fixed cell size leading to a broken alignment but can't remember the ticket anymore. Maybe this is also related. Well I guess we will find out. ;);;;","2023-03-30 09:01;angorya;Thank you so much, [~mhanl]!;;;","2023-03-30 13:02;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jfx/pull/1077
Date: 2023-03-30 19:58:31 +0000;;;","2023-03-30 13:08;jpereda; [~mhanl], that was fast!
I can confirm that the proposed patch works for me.;;;","2023-03-30 15:21;mhanl;Thanks for testing. I'm glad I could help.;;;","2023-04-03 10:25;dukebot;Changeset: 4c0e0bd9
Author:    Marius Hanl <mhanl@openjdk.org>
Date:      2023-04-03 17:25:09 +0000
URL:       https://git.openjdk.org/jfx/commit/4c0e0bd96adc02be721203193aed1d8676db9ebb
;;;",,,,,,,,,,,,,,,,,,,,,,,,
On RISC-V generate_fixed_frame() sometimes generate a relativized locals value which is way too large,JDK-8305247,5097477,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,fbredberg,fbredberg,fbredberg,2023-03-30 05:44,2023-04-10 10:22,2023-10-01 09:55,2023-04-03 05:40,21,,,,,,,,21,hotspot,,0,,,,,,,,,,,,,,,,,"The relativized locals value is supposed to contain the distance between the frame pointer and the local variables in an interpreter frame, expressed in number of words. It typically contains the value ""frame::sender_sp_offset + padding + max_locals - 1""

On most architectures sender_sp_offset is 2. This gives us the value ""1 + padding + max_locals"", which is always greater or equal to 1.

However on RISC-V the value of frame::sender_sp_offset is 0, which means that if we don't have any padding and no local variables we end up with a relativized_locals value of -1.

When generate_fixed_frame() calculates the relativized_locals value it subtracts the frame pointer from the xlocals and then logically shifts the result right by Interpreter::logStackElementSize (to convert it into a word index).

This works fine on all platforms (except RISC-V), because the subtraction will never become negative. But since the subtraction can end up negative on RISC-V, the shift instruction must be a arithmetic-shift-right (not a logical-shift-right) to preserve the sign and not end up with a very large positive index.

This is currently not a real problem since the relativized_locals value is not used if max_local is zero, which is the only case the value is wrong.

It is however a real problem when implementing JDK-8300197.

The bug was introduced in JDK-8299795 and is fixed by changing a ""srli"" instruction to a ""srai"" in generate_fixed_frame().",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8299795,,,,,,,,,,,,,,,,,,,,,riscv,,,,,,,,,,,,,,,,"0|i30y9n:",9223372036854775807,b17,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,,,"2023-03-31 06:38;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/13245
Date: 2023-03-30 12:57:23 +0000;;;","2023-03-31 08:10;fyang;[~fbredberg] Suggested JBS title: RISC-V: generate_fixed_frame() sometimes generate a relativized locals value which is way too large;;;","2023-04-03 05:30;fbredberg;Changed the title as suggested by ~fyang.;;;","2023-04-03 05:40;dukebot;Changeset: 33d09e58
Author:    Fredrik Bredberg <fredrik.bredberg@oracle.com>
Committer: Robbin Ehn <rehn@openjdk.org>
Date:      2023-04-03 12:38:13 +0000
URL:       https://git.openjdk.org/jdk/commit/33d09e587a87e545bb3f6d21c79bf497cd056815
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,
Remove non-invariant assert(EventThreadDump::is_enabled()),JDK-8305242,5097472,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,mgronlun,mgronlun,mgronlun,2023-03-30 05:25,2023-04-10 10:23,2023-10-01 09:55,2023-04-04 03:54,21,,,,,,,,21,hotspot,,0,,,,,,,,,,,,,,,,,"#
# A fatal error has been detected by the Java Runtime Environment:
#
#  assert(EventThreadDump::is_enabled()) failed: invariant
#
# JRE version: Java(TM) SE Runtime Environment (21.0+6) (fastdebug build 21-genzgc+6-LTS-40)
# Java VM: Java HotSpot(TM) 64-Bit Server VM (fastdebug 21-genzgc+6-LTS-40, compiled mode, sharing, tiered, compressed oops, compressed class ptrs, g1 gc, linux-amd64)
# Problematic frame:
# V  [libjvm.so+0x1190234]  JfrDcmdEvent::thread_dump()+0x234
#
#

Current thread (0x00007f73bce8a010):  JavaThread ""JFR Periodic Tasks"" daemon [_thread_in_vm, id=2962867, stack(0x00007f737adee000,0x00007f737aeef000)]

Stack: [0x00007f737adee000,0x00007f737aeef000],  sp=0x00007f737aeed500,  free space=1021k
Native frames: (J=compiled Java code, j=interpreted, Vv=VM code, C=native code)
V  [libjvm.so+0x1190234]  JfrDcmdEvent::thread_dump()+0x234  (jfrThreadDumpEvent.cpp:60)
V  [libjvm.so+0x115a631]  JfrPeriodicEventSet::requestThreadDump()+0x111  (jfrPeriodic.cpp:145)
V  [libjvm.so+0x112a435]  jfr_emit_event+0x545  (jfrPeriodic.hpp:113)
J 44005  jdk.jfr.internal.JVM.emitEvent(JJJ)Z jdk.jfr@21-genzgc (0 bytes) @ 0x00007f746ec8baa5 [0x00007f746ec8b9c0+0x00000000000000e5]
J 43963 c2 jdk.jfr.internal.periodic.JVMEventTask.execute(JLjdk/jfr/internal/periodic/PeriodicType;)V jdk.jfr@21-genzgc (53 bytes) @ 0x00007f746ec8ae04 [0x00007f746ec8ad40+0x00000000000000c4]
J 43944 c2 jdk.jfr.internal.periodic.PeriodicTask.run(JLjdk/jfr/internal/periodic/PeriodicType;)V jdk.jfr@21-genzgc (55 bytes) @ 0x00007f746ec85bc4 [0x00007f746ec85b40+0x0000000000000084]
J 45363 c2 jdk.jfr.internal.periodic.PeriodicEvents.runPeriodic(J)J jdk.jfr@21-genzgc (345 bytes) @ 0x00007f746ed4ead4 [0x00007f746ed4e580+0x0000000000000554]
J 46310 c2 jdk.jfr.internal.periodic.PeriodicEvents.doPeriodic()J jdk.jfr@21-genzgc (14 bytes) @ 0x00007f746d904cf8 [0x00007f746d904cc0+0x0000000000000038]
j  jdk.jfr.internal.PlatformRecorder.periodicTask()V+47 jdk.jfr@21-genzgc
J 38339 c1 jdk.jfr.internal.PlatformRecorder.lambda$startDiskMonitor$1()V jdk.jfr@21-genzgc (5 bytes) @ 0x00007f7466f009c4 [0x00007f7466f00940+0x0000000000000084]
j  jdk.jfr.internal.PlatformRecorder$$Lambda+0x00000008010e9c98.run()V+4 jdk.jfr@21-genzgc
J 2160 c2 java.lang.Thread.run()V java.base@21-genzgc (23 bytes) @ 0x00007f746ca5e890 [0x00007f746ca5e7e0+0x00000000000000b0]
v  ~StubRoutines::call_stub 0x00007f746c1e6d21
V  [libjvm.so+0x1098c66]  JavaCalls::call_helper(JavaValue*, methodHandle const&, JavaCallArguments*, JavaThread*)+0x526  (javaCalls.cpp:415)
V  [libjvm.so+0x109950b]  JavaCalls::call_virtual(JavaValue*, Klass*, Symbol*, Symbol*, JavaCallArguments*, JavaThread*)+0x4ab  (javaCalls.cpp:329)
V  [libjvm.so+0x1099bd5]  JavaCalls::call_virtual(JavaValue*, Handle, Klass*, Symbol*, Symbol*, JavaThread*)+0x75  (javaCalls.cpp:191)
V  [libjvm.so+0x1229499]  thread_entry(JavaThread*, JavaThread*)+0x89  (jvm.cpp:2924)
V  [libjvm.so+0x10d036e]  JavaThread::thread_main_inner()+0x1ee  (javaThread.cpp:710)
V  [libjvm.so+0x1ae56a0]  Thread::call_run()+0x100  (thread.cpp:226)
V  [libjvm.so+0x1782503]  thread_native_entry(Thread*)+0x103  (os_linux.cpp:740)
Java frames: (J=compiled Java code, j=interpreted, Vv=VM code)
J 44005  jdk.jfr.internal.JVM.emitEvent(JJJ)Z jdk.jfr@21-genzgc (0 bytes) @ 0x00007f746ec8ba2e [0x00007f746ec8b9c0+0x000000000000006e]
J 43963 c2 jdk.jfr.internal.periodic.JVMEventTask.execute(JLjdk/jfr/internal/periodic/PeriodicType;)V jdk.jfr@21-genzgc (53 bytes) @ 0x00007f746ec8ae04 [0x00007f746ec8ad40+0x00000000000000c4]
J 43944 c2 jdk.jfr.internal.periodic.PeriodicTask.run(JLjdk/jfr/internal/periodic/PeriodicType;)V jdk.jfr@21-genzgc (55 bytes) @ 0x00007f746ec85bc4 [0x00007f746ec85b40+0x0000000000000084]
J 45363 c2 jdk.jfr.internal.periodic.PeriodicEvents.runPeriodic(J)J jdk.jfr@21-genzgc (345 bytes) @ 0x00007f746ed4ead4 [0x00007f746ed4e580+0x0000000000000554]
J 46310 c2 jdk.jfr.internal.periodic.PeriodicEvents.doPeriodic()J jdk.jfr@21-genzgc (14 bytes) @ 0x00007f746d904cf8 [0x00007f746d904cc0+0x0000000000000038]
j  jdk.jfr.internal.PlatformRecorder.periodicTask()V+47 jdk.jfr@21-genzgc
J 38339 c1 jdk.jfr.internal.PlatformRecorder.lambda$startDiskMonitor$1()V jdk.jfr@21-genzgc (5 bytes) @ 0x00007f7466f009c4 [0x00007f7466f00940+0x0000000000000084]
j  jdk.jfr.internal.PlatformRecorder$$Lambda+0x00000008010e9c98.run()V+4 jdk.jfr@21-genzgc
J 2160 c2 java.lang.Thread.run()V java.base@21-genzgc (23 bytes) @ 0x00007f746ca5e890 [0x00007f746ca5e7e0+0x00000000000000b0]
v  ~StubRoutines::call_stub 0x00007f746c1e6d21
Registers:
RAX=0x00007f748350a000, RBX=0x00007f73bceb0ef0, RCX=0x00007f7482bf3d21, RDX=0x00007f7482d38670
RSP=0x00007f737aeed500, RBP=0x00007f737aeed5a0, RSI=0x000000000000003c, RDI=0x00007f7482d386a0
R8 =0x0000000000000001, R9 =0x0000000000000004, R10=0x00007f746ec8ba2e, R11=0x0000000000000075
R12=0x00007f737aeed658, R13=0x00007f73bce8a010, R14=0x0000000000000001, R15=0x00007f73bce8a010
RIP=0x00007f7482006234, EFLAGS=0x0000000000010246, CSGSFS=0x002b000000000033, ERR=0x0000000000000006
  TRAPNO=0x000000000000000e
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i30y8j:",9223372036854775807,b17,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@42995637,,,,,,,,,"2023-03-30 05:48;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/13243
Date: 2023-03-30 12:42:51 +0000;;;","2023-04-04 03:54;dukebot;Changeset: ac01e24e
Author:    Markus Grönlund <mgronlun@openjdk.org>
Date:      2023-04-04 10:53:46 +0000
URL:       https://git.openjdk.org/jdk/commit/ac01e24eaf4cf10d8792031c7d1236fbdf29a8b6
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
CompilerDirectives DCmds permissions correction,JDK-8305237,5097468,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,kevinw,kevinw,kevinw,2023-03-30 05:04,2023-04-10 10:24,2023-10-01 09:55,2023-04-04 15:19,,,,,,,,,21,core-svc,,0,,,,,,,,,,,,,,,,,"CompilerDirectivesAddDCmd, CompilerDirectivesRemoveDCmd and CompilerDirectivesClearDCmd
..should require ""control"" Permission, not ""monitor"".
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i30y7n:",9223372036854775807,b17,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@1f101086,,,,,,,,,"2023-03-31 02:04;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/13262
Date: 2023-03-31 08:24:19 +0000;;;","2023-04-04 15:19;dukebot;Changeset: 15fa78e6
Author:    Kevin Walls <kevinw@openjdk.org>
Date:      2023-04-04 22:16:50 +0000
URL:       https://git.openjdk.org/jdk/commit/15fa78e6e78942e6c33e071b5a9d4d85143bc822
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
[s390x] build broken after JDK-8231349,JDK-8305227,5097457,Bug,Resolved,JDK,JDK,software,duke,,,P2,Fixed,amitkumar,amitkumar,amitkumar,2023-03-30 01:55,2023-04-05 23:17,2023-10-01 09:55,2023-03-31 10:00,21,,,,,,,,21,hotspot,,0,oraclejdk-na,oracle-triage-21,,,,,,,,,,,,,,,"after JDK-8231349 release, slow debug, fast debug and optimised builds are broken. 

Stack trace:

Native frames: (J=compiled Java code, j=interpreted, Vv=VM code, C=native code)
C  0x000003ff86c7de70
j  java.lang.String.lastIndexOf(II)I+1 java.base
j  java.lang.String.lastIndexOf(I)I+8 java.base
j  java.lang.Class.getPackageName()Ljava/lang/String;+47 java.base
j  sun.invoke.util.VerifyAccess.isSamePackage(Ljava/lang/Class;Ljava/lang/Class;)Z+21 java.base
j  sun.invoke.util.VerifyAccess.isClassAccessible(Ljava/lang/Class;Ljava/lang/Class;Ljava/lang/Class;I)Z+36 java.base
j  java.lang.invoke.MethodHandles$Lookup.ensureInitialized(Ljava/lang/Class;)Ljava/lang/Class;+81 java.base
j  jdk.internal.access.SharedSecrets.ensureClassInitialized(Ljava/lang/Class;)V+4 java.base
j  jdk.internal.access.SharedSecrets.getJavaLangModuleAccess()Ljdk/internal/access/JavaLangModuleAccess;+10 java.base
j  jdk.internal.module.ModuleBootstrap.<clinit>()V+22 java.base
v  ~StubRoutines::call_stub 0x000003ff7d000b32
V  [libjvm.so+0xbd4ce4]  JavaCalls::call_helper(JavaValue*, methodHandle const&, JavaCallArguments*, JavaThread*)+0x51c  (javaCalls.cpp:415)
V  [libjvm.so+0xbd38f2]  JavaCalls::call(JavaValue*, methodHandle const&, JavaCallArguments*, JavaThread*)+0x42  (javaCalls.cpp:329)
V  [libjvm.so+0xb7b908]  InstanceKlass::call_class_initializer(JavaThread*)+0x1f0  (instanceKlass.cpp:1553)
V  [libjvm.so+0xb870c2]  InstanceKlass::initialize_impl(JavaThread*)+0x60a  (instanceKlass.cpp:1139)
V  [libjvm.so+0xf05642]  LinkResolver::resolve_static_call(CallInfo&, LinkInfo const&, bool, JavaThread*)+0x162  (linkResolver.cpp:1078)
V  [libjvm.so+0xf0ab7a]  LinkResolver::resolve_invoke(CallInfo&, Handle, constantPoolHandle const&, int, Bytecodes::Code, JavaThread*)+0x1d2  (linkResolver.cpp:1672)
V  [libjvm.so+0xbba0ee]  InterpreterRuntime::resolve_invoke(JavaThread*, Bytecodes::Code)+0x1b6  (interpreterRuntime.cpp:834)
V  [libjvm.so+0xbbacf6]  InterpreterRuntime::resolve_from_cache(JavaThread*, Bytecodes::Code)+0x106  (interpreterRuntime.cpp:968)
j  java.lang.System.initPhase2(ZZ)I+0 java.base
v  ~StubRoutines::call_stub 0x000003ff7d000b32
V  [libjvm.so+0xbd4ce4]  JavaCalls::call_helper(JavaValue*, methodHandle const&, JavaCallArguments*, JavaThread*)+0x51c  (javaCalls.cpp:415)
V  [libjvm.so+0xbd5c36]  JavaCalls::call_static(JavaValue*, Klass*, Symbol*, Symbol*, JavaCallArguments*, JavaThread*)+0x296  (javaCalls.cpp:329)
V  [libjvm.so+0x148fb14]  Threads::create_vm(JavaVMInitArgs*, bool*)+0x7cc  (threads.cpp:311)
V  [libjvm.so+0xd236e8]  JNI_CreateJavaVM+0xc0  (jni.cpp:3588)
C  [libjli.so+0x4794]  JavaMain+0xa4  (java.c:1459)
C  [libjli.so+0x7e40]  ThreadJavaMain+0x20  (java_md.c:650)
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8231349,,,,,,,,,"2023-03-30 01:55;amitkumar;hs_err_pid4171675.log;https://bugs.openjdk.org/secure/attachment/103173/hs_err_pid4171675.log",,,,,,,,,,,,s390x,,,,,,,,,,linux,,,,,,"0|i30y57:",9223372036854775807,b17,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2023-03-30 09:41;kvn;[~amitkumar] please, try to run with -XX:-DelayCompilerStubsGeneration off.
If it works you can disable it by default for s390:
src/hotspot/cpu/s390/globals_s390.hpp
@@ -36,5 +36,5 @@ define_pd_global(bool,  ImplicitNullChecks,          true);  // Generate code fo
 define_pd_global(bool,  TrapBasedNullChecks,         true);
 define_pd_global(bool,  UncommonNullCast,            true);  // Uncommon-trap NULLs passed to check cast.
 
-define_pd_global(bool,  DelayCompilerStubsGeneration, COMPILER2_OR_JVMCI);
+define_pd_global(bool,  DelayCompilerStubsGeneration, false);
 ;;;","2023-03-30 10:00;amitkumar;@kvn Thanks, that worked. But if possible, may I know why this is not working on s390x ?

Thank you again, for helping me out.;;;","2023-03-30 10:22;kvn;I see in hs_err file that it failed when JVM run in Client mode:
""emulated-client, tiered, compressed oops, compressed class ptrs, serial gc,""

I tried the same flags on linux-x64 and I did not hit any issues.

The hs_err file shows that Interpreter is trying to call compiled by C1 isLatin1() method from 
    public int lastIndexOf(int ch, int fromIndex) {
        return isLatin1() ? StringLatin1.lastIndexOf(value, ch, fromIndex)
                          : StringUTF16.lastIndexOf(value, ch, fromIndex);
    }
;;;","2023-03-30 10:32;kvn;I think I found the issue. In my changes I missed to move StubRoutines::zarch::_nmethod_entry_barrier  
to generate_final_stubs().  So the fix is:

diff --git a/src/hotspot/cpu/s390/stubGenerator_s390.cpp b/src/hotspot/cpu/s390/stubGenerator_s390.cpp
index f11521efee5..5ed30b8b460 100644
--- a/src/hotspot/cpu/s390/stubGenerator_s390.cpp
+++ b/src/hotspot/cpu/s390/stubGenerator_s390.cpp
@@ -3152,6 +3152,12 @@ class StubGenerator: public StubCodeGenerator {
 
     // Arraycopy stubs used by compilers.
     generate_arraycopy_stubs();
+
+    // nmethod entry barriers for concurrent class unloading
+    BarrierSetNMethod* bs_nm = BarrierSet::barrier_set()->barrier_set_nmethod();
+    if (bs_nm != NULL) {
+      StubRoutines::zarch::_nmethod_entry_barrier = generate_nmethod_entry_barrier();
+    }
   }
 
   void generate_compiler_stubs() {
@@ -3199,12 +3205,6 @@ class StubGenerator: public StubCodeGenerator {
       StubRoutines::_sha512_implCompressMB = generate_SHA512_stub(true,  ""SHA512_multiBlock"");
     }
 
-    // nmethod entry barriers for concurrent class unloading
-    BarrierSetNMethod* bs_nm = BarrierSet::barrier_set()->barrier_set_nmethod();
-    if (bs_nm != NULL) {
-      StubRoutines::zarch::_nmethod_entry_barrier = generate_nmethod_entry_barrier();
-    }
-
 #ifdef COMPILER2
     if (UseMultiplyToLenIntrinsic) {
       StubRoutines::_multiplyToLen = generate_multiplyToLen();
;;;","2023-03-30 10:34;kvn;[~amitkumar] I suggest for you to test this fix and publish PR. I will review it.;;;","2023-03-31 00:10;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/13259
Date: 2023-03-31 07:06:25 +0000;;;","2023-03-31 10:00;dukebot;Changeset: 4a5d7ca7
Author:    Amit Kumar <amitkumar@openjdk.org>
Committer: Aleksey Shipilev <shade@openjdk.org>
Date:      2023-03-31 16:57:46 +0000
URL:       https://git.openjdk.org/jdk/commit/4a5d7ca7d9cf90f8c61d890419c8557b61f78f7e
;;;",,,,,,,,,,,,,,,,,,,,,,,,
A service broken error despite annotation processor generating it if directives listed,JDK-8305225,5097455,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,jlahoda,jlahoda,jlahoda,2023-03-30 01:48,2023-09-15 05:24,2023-10-01 09:55,2023-06-04 23:32,21,,,,,,,,21,tools,,0,,,,,,,,,,,,,,,,,"Consider module-info like:

    module m {
        provides test.Service with test.Provider;
    }

And assume test.Provider does not exist in the sources, but is generated by an annotation processor. This works, unless the AP lists the directives from the module, in which case it fails:

testGenerateServiceImplementation/src/module-info.java:3: error: the service implementation does not have a default constructor: Provider
    provides test.Service with test.Provider;
                                   ^
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8315125,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i30y4r:",9223372036854775807,b26,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4dca67bd,,,,,,,,,"2023-05-18 06:26;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/14046
Date: 2023-05-18 13:21:08 +0000;;;","2023-06-04 23:32;dukebot;Changeset: b6c9232b
Author:    Jan Lahoda <jlahoda@openjdk.org>
Date:      2023-06-05 06:30:44 +0000
URL:       https://git.openjdk.org/jdk/commit/b6c9232b8b2010e360abfba6f0d294dc27187911
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
JDWP exit error AGENT_ERROR_INVALID_THREAD(203): missing entry in running thread table,JDK-8305209,5097434,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,cjplummer,cjplummer,cjplummer,2023-03-29 14:43,2023-04-24 11:16,2023-10-01 09:55,2023-04-06 12:14,21,,,,,,,,21,core-svc,,0,,,,,,,,,,,,,,,,,"I modified the new com/sun/jdi/ThreadMemoryLeakTest.java to support virtual threads. When I did that the test passed, but I noticed the following in the test output:

Goodbye from ThreadMemoryLeakTarg after 247744 iterations!
JDWP exit error AGENT_ERROR_INVALID_THREAD(203): missing entry in running thread table [/scratch/cplummer/ws/jdk/jdk.clean/open/src/jdk.jdwp.agent/share/native/libjdwp/threadControl.c:1115]
FATAL ERROR in native method: JDWP missing entry in running thread table, jvmtiError=AGENT_ERROR_INVALID_THREAD(203)
Native frames: (J=compiled Java code, j=interpreted, Vv=VM code, C=native code)
V  [libjvm.so+0x118c75b]  jni_FatalError+0xeb  (jni.cpp:630)
C  [libjdwp.so+0x10833]  jniFatalError.constprop.0+0xc3  (debugInit.c:608)
C  [libjdwp.so+0x10a6f]  debugInit_exit+0x6f  (debugInit.c:1338)
C  [libjdwp.so+0x24fca]  threadControl_resumeAll+0x2aa  (threadControl.c:1115)
C  [libjdwp.so+0xdb04]  resume+0x24  (VirtualMachineImpl.c:656)
C  [libjdwp.so+0x137a9]  debugLoop_run+0x2a9  (debugLoop.c:162)
C  [libjdwp.so+0x283f4]  attachThread+0x54  (transport.c:392)
V  [libjvm.so+0x13bfb8a]  JvmtiAgentThread::call_start_function()+0x17a  (jvmtiImpl.cpp:89)
V  [libjvm.so+0x109f236]  JavaThread::thread_main_inner()+0x206  (javaThread.cpp:710)
V  [libjvm.so+0x1aab090]  Thread::call_run()+0x100  (thread.cpp:224)
V  [libjvm.so+0x1748373]  thread_native_entry(Thread*)+0x103  (os_linux.cpp:740)

The debuggee ran properly and exited, but then the debug agent asserted during the exit. The bug in the debug agent is a missing check to see if the thread is on runningVThreads. It only checked runningThreads. That fix is simple. However, there is the further problem of why this didn't result in a test failure. The reason is because there is no check for a proper exitCode. TestScaffold. waitForVMDisconnect() should wait for process exit and then verify the exitCode.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8306758,JDK-8304436,,,,JDK-8269268,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i30y03:",9223372036854775807,b18,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@3397f701,,,,,,,,,"2023-03-29 14:45;cjplummer;Note as part of fixing this bug (both the debug agent and TestScaffold issues), changes are also being made to support ThreadMemoryLeakTest running virtual threads. This is needed in order to test the bug fixes.;;;","2023-03-30 09:09;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/13246
Date: 2023-03-30 16:03:05 +0000;;;","2023-04-06 12:14;dukebot;Changeset: 1d517afb
Author:    Chris Plummer <cjplummer@openjdk.org>
Date:      2023-04-06 19:13:27 +0000
URL:       https://git.openjdk.org/jdk/commit/1d517afbd4547171ad6fb6a3356351c2554c8279
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,
"Calendar.aggregateStamp(int, int) return value can be simplified",JDK-8305207,5097432,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,jlu,jlu,jlu,2023-03-29 14:31,2023-04-26 23:15,2023-10-01 09:55,2023-04-20 14:21,,,,,,,,,21,core-libs,,0,noreg-cleanup,,,,,,,,,,,,,,,,"The return statement for the private method is more readable if Math.max(int, int) is used.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i30xzn:",9223372036854775807,b20,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@7644fb4c,,,,,,,,,"2023-04-19 23:47;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/13554
Date: 2023-04-20 06:32:41 +0000;;;","2023-04-20 14:21;dukebot;Changeset: ffb2494d
Author:    Justin Lu <jlu@openjdk.org>
Committer: Naoto Sato <naoto@openjdk.org>
Date:      2023-04-20 21:20:08 +0000
URL:       https://git.openjdk.org/jdk/commit/ffb2494de488b77fd017c04531b103d695909c2f
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
"serial GC fails ""assert(Universe::on_page_boundary(bottom) && Universe::on_page_boundary(end)) failed: invalid space boundaries""",JDK-8305192,5097415,Bug,Closed,JDK,JDK,software,duke,,,P2,Fixed,ayang,dcubed,dcubed,2023-03-29 10:01,2023-07-13 03:40,2023-10-01 09:55,2023-04-17 05:24,21,,,,,,,,21,hotspot,,0,gc-serial,tier2,,,,,,,,,,,,,,,"The following test failed in the JDK21 CI:

gc/arguments/TestShrinkHeapInSteps.java

Here's a snippet from the log file:

----------System.err:(36/2620)----------
 stdout: [0.1 0.9499280011212384 0.8
#
# A fatal error has been detected by the Java Runtime Environment:
#
#  Internal Error (/opt/mach5/mesos/work_dir/slaves/741e9afd-8c02-45c3-b2e2-9db1450d0832-S30439/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/53c76be7-7b76-4ae1-b310-5e02403f83b6/runs/05e923eb-7110-443a-9c41-20ccdba1d888/workspace/open/src/hotspot/share/gc/shared/space.cpp:157), pid=1856086, tid=1856098
#  assert(Universe::on_page_boundary(bottom) && Universe::on_page_boundary(end)) failed: invalid space boundaries
#
# JRE version: Java(TM) SE Runtime Environment (21.0+16) (fastdebug build 21-ea+16-LTS-1318)
# Java VM: Java HotSpot(TM) 64-Bit Server VM (fastdebug 21-ea+16-LTS-1318, mixed mode, sharing, tiered, compressed oops, compressed class ptrs, serial gc, linux-aarch64)
# Problematic frame:
# V  [libjvm.so+0x16f99e8]  Space::initialize(MemRegion, bool, bool)+0xc8
#
# Core dump will be written. Default location: Core dumps may be processed with ""/opt/core.sh %p"" (or dumping to /opt/mach5/mesos/work_dir/slaves/741e9afd-8c02-45c3-b2e2-9db1450d0832-S22444/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/89240b61-d427-4353-a6b3-39ea54044808/runs/6786bccb-f5f9-4089-aec1-a0806a9dc0aa/testoutput/test-support/jtreg_open_test_hotspot_jtreg_hotspot_gc/scratch/1/core.1856086)
#
# An error report file with more information is saved as:
# /opt/mach5/mesos/work_dir/slaves/741e9afd-8c02-45c3-b2e2-9db1450d0832-S22444/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/89240b61-d427-4353-a6b3-39ea54044808/runs/6786bccb-f5f9-4089-aec1-a0806a9dc0aa/testoutput/test-support/jtreg_open_test_hotspot_jtreg_hotspot_gc/scratch/1/hs_err_pid1856086.log
#
# If you would like to submit a bug report, please visit:
#   https://bugreport.java.com/bugreport/crash.jsp
#
];
 stderr: []
 exitValue = 134

java.lang.RuntimeException: Expected to get exit value of [0], exit value is: [134]
	at jdk.test.lib.process.OutputAnalyzer.shouldHaveExitValue(OutputAnalyzer.java:490)
	at gc.arguments.TestMaxMinHeapFreeRatioFlags.positiveTest(TestMaxMinHeapFreeRatioFlags.java:103)
	at gc.arguments.TestShrinkHeapInSteps.main(TestShrinkHeapInSteps.java:51)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
	at java.base/java.lang.reflect.Method.invoke(Method.java:578)
	at com.sun.javatest.regtest.agent.MainActionHelper$AgentVMRunnable.run(MainActionHelper.java:312)
	at java.base/java.lang.Thread.run(Thread.java:1623)

JavaTest Message: Test threw exception: java.lang.RuntimeException
JavaTest Message: shutting down test

Here's the crashing thread's stack:

---------------  T H R E A D  ---------------

Current thread (0x0000ffff341a30f0):  VMThread ""VM Thread"" [stack: 0x0000ffff3aad0000,0x0000ffff3acd0000] [id=1856098]

Stack: [0x0000ffff3aad0000,0x0000ffff3acd0000],  sp=0x0000ffff3accdf60,  free space=2039k
Native frames: (J=compiled Java code, j=interpreted, Vv=VM code, C=native code)
V  [libjvm.so+0x16f99e8]  Space::initialize(MemRegion, bool, bool)+0xc8  (space.cpp:157)
V  [libjvm.so+0x16f9e04]  ContiguousSpace::initialize(MemRegion, bool, bool)+0x14  (space.cpp:185)
V  [libjvm.so+0xabadd8]  DefNewGeneration::compute_space_boundaries(unsigned long, bool, bool)+0x1d4  (defNewGeneration.cpp:459)
V  [libjvm.so+0xabbf4c]  DefNewGeneration::compute_new_size()+0x1a8  (defNewGeneration.cpp:603)
V  [libjvm.so+0xdb2e3c]  GenCollectedHeap::do_collection(bool, bool, unsigned long, bool, GenCollectedHeap::GenerationType)+0xb08  (genCollectedHeap.cpp:593)
V  [libjvm.so+0xdb36a8]  GenCollectedHeap::satisfy_failed_allocation(unsigned long, bool)+0x68  (genCollectedHeap.cpp:654)
V  [libjvm.so+0xd99148]  VM_GenCollectForAllocation::doit()+0x44  (gcVMOperations.cpp:179)
V  [libjvm.so+0x193b778]  VM_Operation::evaluate()+0x158  (vmOperations.cpp:71)
V  [libjvm.so+0x19655e8]  VMThread::evaluate_operation(VM_Operation*)+0x118  (vmThread.cpp:281)
V  [libjvm.so+0x1966ef8]  VMThread::inner_execute(VM_Operation*)+0x4b8  (vmThread.cpp:428)
V  [libjvm.so+0x1967054]  VMThread::loop()+0xc4  (vmThread.cpp:495)
V  [libjvm.so+0x196717c]  VMThread::run()+0xc8  (vmThread.cpp:175)
V  [libjvm.so+0x1840a18]  Thread::call_run()+0xf8  (thread.cpp:224)
V  [libjvm.so+0x1555c84]  thread_native_entry(Thread*)+0x100  (os_linux.cpp:740)
C  [libpthread.so.0+0x7908]  start_thread+0x188",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8310302,,,,,,,,,,JDK-8040793,,,,,,,,,,,,,,,,aarch64,,,,,,,,,,,,,,,,"0|i30xvv:",9223372036854775807,b19,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6b00f96c,,,,,,,Verified,,"2023-04-03 04:41;ayang;The fix in JDK-8040793 probably breaks the space-alignment constraint.;;;","2023-04-04 03:18;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/13323
Date: 2023-04-04 10:11:49 +0000;;;","2023-04-17 05:24;dukebot;Changeset: fb58d77e
Author:    Albert Mingkun Yang <ayang@openjdk.org>
Date:      2023-04-17 12:23:17 +0000
URL:       https://git.openjdk.org/jdk/commit/fb58d77e92caf15eada69d32f662d63758927701
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,
"C2 failed ""assert(_outcnt==1) failed: not unique""",JDK-8305189,5097412,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,roland,dcubed,dcubed,2023-03-29 09:01,2023-07-10 00:22,2023-10-01 09:55,2023-05-26 02:06,20,21,,,,,,,21,hotspot,,0,c2,javafuzzer,oracle-triage-11,oracle-triage-17,oracle-triage-21,tier8,,,,,,,,,,,"The following test failed in the JDK21 CI:

applications/javafuzzer/BigTest.java

Here's a snippet from the log file:

Summary of the JavaFuzzer run:
------------------------------
Host:     win2016-x64-318369
Tests:    12 x 300
Args:     -conf config.yml

Started  at: Wed Mar 29 00:39:56 GMT 2023


r2- 300: 195 passed, 0 crashes, 0 fails, 0 hangs, 0 incorrect tests, 105 Reference Java failures
r3- 300: 186 passed, 0 crashes, 0 fails, 0 hangs, 0 incorrect tests, 114 Reference Java failures
r8- 300: 193 passed, 0 crashes, 0 fails, 0 hangs, 0 incorrect tests, 107 Reference Java failures
r5- 300: 190 passed, 0 crashes, 0 fails, 0 hangs, 0 incorrect tests, 110 Reference Java failures
r7- 300: 190 passed, 0 crashes, 0 fails, 0 hangs, 0 incorrect tests, 110 Reference Java failures
r11- 300: 187 passed, 0 crashes, 0 fails, 0 hangs, 0 incorrect tests, 113 Reference Java failures
r9- 300: 195 passed, 2 crashes, 0 fails, 0 hangs, 0 incorrect tests, 104 Reference Java failures
r6- 300: 177 passed, 0 crashes, 0 fails, 0 hangs, 0 incorrect tests, 123 Reference Java failures
r10- 300: 193 passed, 0 crashes, 0 fails, 0 hangs, 0 incorrect tests, 107 Reference Java failures
r4- 300: 180 passed, 0 crashes, 0 fails, 0 hangs, 0 incorrect tests, 120 Reference Java failures
r12- 300: 189 passed, 0 crashes, 0 fails, 0 hangs, 0 incorrect tests, 111 Reference Java failures
r1- 300: 172 passed, 0 crashes, 0 fails, 0 hangs, 0 incorrect tests, 128 Reference Java failures

Finished at: Wed Mar 29 09:12:11 GMT 2023


#
# A fatal error has been detected by the Java Runtime Environment:
#
#  Internal Error (c:\\sb\\prod\\1679905400\\workspace\\open\\src\\hotspot\\share\\opto/node.hpp:399), pid=25280, tid=33752
#  assert(_outcnt==1) failed: not unique
#
# JRE version: Java(TM) SE Runtime Environment (21.0+16) (fastdebug build 21-ea+16-LTS-1273)
# Java VM: Java HotSpot(TM) 64-Bit Server VM (fastdebug 21-ea+16-LTS-1273, compiled mode, sharing, tiered, compressed oops, compressed class ptrs, g1 gc, windows-amd64)
# Core dump will be written. Default location: C:\\sb\\prod\\1680050168\\testoutput\\test-support\\jtreg_closed_test_hotspot_jtreg_applications_javafuzzer_BigTest_java\\tmp\\fuzzer.tmp.j9KE0q2XuQ\\hs_err_pid25280.mdmp
#
# If you would like to submit a bug report, please visit:
#   https://bugreport.java.com/bugreport/crash.jsp
#

---------------  S U M M A R Y ------------


----------System.err:(51/4106)*----------
java.nio.charset.MalformedInputException: Input length = 1
	at java.base/java.nio.charset.CoderResult.throwException(CoderResult.java:274)
	at java.base/sun.nio.cs.StreamDecoder.implRead(StreamDecoder.java:388)
	at java.base/sun.nio.cs.StreamDecoder.lockedRead(StreamDecoder.java:219)
	at java.base/sun.nio.cs.StreamDecoder.read(StreamDecoder.java:173)
	at java.base/java.io.InputStreamReader.read(InputStreamReader.java:189)
	at java.base/java.io.BufferedReader.fill(BufferedReader.java:161)
	at java.base/java.io.BufferedReader.implReadLine(BufferedReader.java:371)
	at java.base/java.io.BufferedReader.readLine(BufferedReader.java:348)
	at java.base/java.io.BufferedReader.readLine(BufferedReader.java:437)
	at java.base/java.nio.file.Files.readAllLines(Files.java:3390)
	at java.base/java.nio.file.Files.readAllLines(Files.java:3428)
	at applications.javafuzzer.JavaFuzzerRunner.lambda$main$2(JavaFuzzerRunner.java:233)
	at java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184)
	at java.base/java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:179)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.Iterator.forEachRemaining(Iterator.java:133)
	at java.base/java.util.Spliterators$IteratorSpliterator.forEachRemaining(Spliterators.java:1924)
	at java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:509)
	at java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:499)
	at java.base/java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)
	at java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)
	at java.base/java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.base/java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:596)
	at applications.javafuzzer.JavaFuzzerRunner.main(JavaFuzzerRunner.java:231)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
	at java.base/java.lang.reflect.Method.invoke(Method.java:578)
	at com.sun.javatest.regtest.agent.MainActionHelper$AgentVMRunnable.run(MainActionHelper.java:312)
	at java.base/java.lang.Thread.run(Thread.java:1623)
java.lang.RuntimeException: Failed to access C:\\sb\\prod\\1680050168\\testoutput\\test-support\\jtreg_closed_test_hotspot_jtreg_applications_javafuzzer_BigTest_java\\scratch\\0\\crashes\\r9-250\\hs_err_pid25280.mdmp
	at applications.javafuzzer.JavaFuzzerRunner.lambda$main$2(JavaFuzzerRunner.java:237)
	at java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184)
	at java.base/java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:179)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.Iterator.forEachRemaining(Iterator.java:133)
	at java.base/java.util.Spliterators$IteratorSpliterator.forEachRemaining(Spliterators.java:1924)
	at java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:509)
	at java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:499)
	at java.base/java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)
	at java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)
	at java.base/java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.base/java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:596)
	at applications.javafuzzer.JavaFuzzerRunner.main(JavaFuzzerRunner.java:231)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
	at java.base/java.lang.reflect.Method.invoke(Method.java:578)
	at com.sun.javatest.regtest.agent.MainActionHelper$AgentVMRunnable.run(MainActionHelper.java:312)
	at java.base/java.lang.Thread.run(Thread.java:1623)

JavaTest Message: Test threw exception: java.lang.RuntimeException
JavaTest Message: shutting down test


Here's the crashing thread's stack:

---------------  T H R E A D  ---------------

Current thread (0x00000147cc6b1f40):  JavaThread ""C2 CompilerThread0"" daemon [_thread_in_native, id=33752, stack(0x0000001238400000,0x0000001238500000)]


Current CompileTask:
C2:    690   10   !b  4       Test::vMeth1 (207 bytes)

Stack: [0x0000001238400000,0x0000001238500000]
Native frames: (J=compiled Java code, j=interpreted, Vv=VM code, C=native code)
V  [jvm.dll+0xbf4331]  os::win32::platform_print_native_stack+0xf1  (os_windows_x86.cpp:236)
V  [jvm.dll+0xe6f4b0]  VMError::report+0x10c0  (vmError.cpp:814)
V  [jvm.dll+0xe71065]  VMError::report_and_die+0x645  (vmError.cpp:1587)
V  [jvm.dll+0xe71774]  VMError::report_and_die+0x64  (vmError.cpp:1352)
V  [jvm.dll+0x578419]  report_vm_error+0x79  (debug.cpp:181)
V  [jvm.dll+0xc3c8be]  PhaseCCP::push_more_uses+0x5ee  (phaseX.cpp:2062)
V  [jvm.dll+0xc393dd]  PhaseCCP::analyze+0x75d  (phaseX.cpp:1991)
V  [jvm.dll+0xc35bff]  PhaseCCP::PhaseCCP+0x10f  (phaseX.cpp:1933)
V  [jvm.dll+0x50cb91]  Compile::Optimize+0xca1  (compile.cpp:2373)
V  [jvm.dll+0x509e4e]  Compile::Compile+0x174e  (compile.cpp:841)
V  [jvm.dll+0x427ec5]  C2Compiler::compile_method+0x145  (c2compiler.cpp:121)
V  [jvm.dll+0x524519]  CompileBroker::invoke_compiler_on_method+0x849  (compileBroker.cpp:2268)
V  [jvm.dll+0x521bdd]  CompileBroker::compiler_thread_loop+0x24d  (compileBroker.cpp:1945)
V  [jvm.dll+0x7ed072]  JavaThread::thread_main_inner+0x282  (javaThread.cpp:711)
V  [jvm.dll+0xde4453]  Thread::call_run+0x253  (thread.cpp:229)
V  [jvm.dll+0xbf2c28]  os::win32::thread_native_entry+0xb8  (os_windows.cpp:551)
C  [ucrtbase.dll+0x1fb80]
C  [KERNEL32.DLL+0x84d4]
C  [ntdll.dll+0x51791]",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8309902,JDK-8298176,,,"2023-03-29 18:01;dlong;FuzzerUtils.java;https://bugs.openjdk.org/secure/attachment/103170/FuzzerUtils.java","2023-03-30 01:13;chagedorn;Reduced.java;https://bugs.openjdk.org/secure/attachment/103172/Reduced.java","2023-03-29 18:01;dlong;Test.java;https://bugs.openjdk.org/secure/attachment/103171/Test.java",,,,,,,,,,x86_64,,,,,,,,,,windows,,,,,,"0|i30xv7:",9223372036854775807,b25,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2023-03-29 19:46;dlong;Reproduces in jdk-21+4-184 but not jdk-21+3-124, 20+36-2344 but not jdk-20+27-2213;;;","2023-03-29 21:26;dlong;ILW = C2 assertion;  single Java Fuzzer test case, debug build; disable compilation of affected method = HLM = P3 ;;;","2023-03-29 21:33;dlong;The regression seems to have been introduced by this changeset:

commit a0a09d56ba4fc6133b423ad29d86fc99dd6dc19b
Author: Roland Westrelin <roland@openjdk.org>
Date:   Thu Dec 22 08:56:00 2022 +0000

    8298176: remove OpaqueZeroTripGuardPostLoop once main-loop disappears
    
    Reviewed-by: thartmann, chagedorn, kvn

[~roland], please take a look.;;;","2023-03-30 01:13;chagedorn;I've attached a reduced version Reduced.java of Test.java:

$ java -Xcomp -XX:CompileOnly=Reduced Reduced.java;;;","2023-05-10 04:31;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/13901
Date: 2023-05-10 11:27:06 +0000;;;","2023-05-26 02:06;dukebot;Changeset: bac02b6e
Author:    Roland Westrelin <roland@openjdk.org>
Date:      2023-05-26 09:04:31 +0000
URL:       https://git.openjdk.org/jdk/commit/bac02b6e9d9e1e93db27c7888188f29631e07f47
;;;",,,,,,,,,,,,,,,,,,,,,,,,,
disable dtrace for s390x builds,JDK-8305174,5097393,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,amitkumar,amitkumar,amitkumar,2023-03-29 05:33,2023-04-05 23:17,2023-10-01 09:55,2023-03-31 00:48,,,,,,,,,21,infrastructure,,0,,,,,,,,,,,,,,,,,"Currently the support for JVM feature dtrace is not implemented in the HS codebase on s390x, so we should disable it in the jvm-features make detection as well.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,s390x,,,,,,,,,,,,,,,,"0|i30xqz:",9223372036854775807,b17,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@429c566,,,,,,,,,"2023-03-29 06:11;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/13228
Date: 2023-03-29 13:04:39 +0000;;;","2023-03-31 00:48;dukebot;Changeset: 7fe5bd2b
Author:    Amit Kumar <amitkumar@openjdk.org>
Committer: Matthias Baesken <mbaesken@openjdk.org>
Date:      2023-03-31 07:46:50 +0000
URL:       https://git.openjdk.org/jdk/commit/7fe5bd2bec3f34d407fb75306dca481dd2fadee0
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
java/security/cert/CertPathValidator/OCSP/GetAndPostTests.java -- test server didn't start in timely manner,JDK-8305169,5097389,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,mdonovan,msheppar,msheppar,2023-03-29 04:39,2023-05-10 23:51,2023-10-01 09:55,2023-05-05 07:19,21,,,,,,,,21,security-libs,,0,intermittent,noreg-self,sbr,,,,,,,,,,,,,,"----------System.out:(3/185)----------
[MainThread]: nextUpdate set to Tue Mar 28 15:58:37 UTC 2023
[MainThread]: Added entry for serial 17499003148595942464(CERT_STATUS_GOOD)
[MainThread]: Received shutdown notification
----------System.err:(11/620)----------
java.lang.RuntimeException: Server not ready
	at GetAndPostTests.main(GetAndPostTests.java:122)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
	at java.base/java.lang.reflect.Method.invoke(Method.java:578)
	at com.sun.javatest.regtest.agent.MainWrapper$MainThread.run(MainWrapper.java:125)
	at java.base/java.lang.Thread.run(Thread.java:1623)

JavaTest Message: Test threw exception: java.lang.RuntimeException: Server not ready
JavaTest Message: shutting down test

STATUS:Failed.`main' threw exception: java.lang.RuntimeException: Server not ready
----------rerun:(45/7007)*----------

If looks like the  server's main loop thread from the thread pool.submit in  SimpleOCSPServer::start didn't get to run in time.

the timeout is 5 seconds in the awaitServerReady, and it's a reasonable assumption that the server thread will have started by then, but on heavily loaded systems these types of intermittent failures seem to occur.

Server logging is enabled in the test, and log output from server is not seen in test jtr file.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,x86_64,,,,,,,,,,windows,,,,,,"0|i30xq3:",9223372036854775807,b22,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@2ec284e3,,,,,,,,,"2023-05-05 04:33;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/13829
Date: 2023-05-05 11:27:48 +0000;;;","2023-05-05 07:19;dukebot;Changeset: 3f6a3545
Author:    Matthew Donovan <matthew.p.donovan@oracle.com>
Committer: Jamil Nimeh <jnimeh@openjdk.org>
Date:      2023-05-05 14:17:00 +0000
URL:       https://git.openjdk.org/jdk/commit/3f6a3545a255cbef3c3436ff26481f1cec4ccfc9
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
[8u] ServiceThread::nmethods_do is not called to keep nmethods from being zombied while in the queue,JDK-8305165,5097385,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,jzhu,jzhu,jzhu,2023-03-29 02:44,2023-05-02 11:44,2023-10-01 09:55,2023-04-25 12:54,openjdk8u352,,,,,,,,openjdk8u382,hotspot,,0,jdk8u-fix-request,jdk8u-fix-yes,sustaining,,,,,,,,,,,,,,"Crashes in JvmtiExport::post_compiled_method_load were found in JDK8 of our production environment after one day when users started to receive the JVMTI COMPILED_METHOD_LOAD event.

This issue behaved similarly to JDK-8173361.
After debugging, ServiceThread::nmethods_do backported by JDK-8173361 is not called.
JavaThread::nmethods_do should be a virtual function just like 11u or later, otherwise, the following routine cannot call the correct nmethods_do for ServiceThread.
    ALL_JAVA_THREADS(p) {
        p->nmethods_do(cf);
    }

Because this issue cannot be easily reproduced, manually adding some delay on purpose in ServiceThread::service_thread_entry to keep more events pending in JvmtiDeferredEventQueue could help reproduce this issue.
After the fix, various crashes were gone.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8173361,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i30xp7:",9223372036854775807,b01,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@661b156a,,,,,,,,,"2023-03-29 02:58;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk8u-dev/pull/293
Date: 2023-03-29 09:54:09 +0000;;;","2023-04-19 11:16;sgehwolf;[~jzhu] Please fill in a description of the bug with some explanation as to why this is an 8u-only bug, how to reproduce, etc. Also, for fix approvals provide a risk assessment and the testing you've done in a ""Fix Request"" comment. Removing the fix request label in the interim.;;;","2023-04-23 03:12;jzhu;Fix request: [8u]

The issue only exists in 8u. See details in Description.
The fix aligns with JDK 11 to make a virtual function call to nmethods_do of JavaThread.

Passed GitHub CI and hotspot_tier1 after the fix.

Risk: low

Review: https://github.com/openjdk/jdk8u-dev/pull/293;;;","2023-04-23 03:15;jzhu;Add ""jdk8u-fix-request"" label again.
Please let me know if any issues.;;;","2023-04-24 06:07;sgehwolf;In JDK 9+ the nmethods_do() got declared virtual with JDK-8074553;;;","2023-04-24 09:12;phh;Severin, does that mean you'd prefer to have JDK-8074553 backported instead?
;;;","2023-04-24 10:22;sgehwolf;[~phh] It was an attempt to document that fact why this would need an 8u specific bug (this one). However, on second thought, if a JDK-8074553  backport fixes the problem as well, then that would be my preference.;;;","2023-04-24 12:45;phh;JDK-8074553 does indeed fix the problem with nmethods_do(). This PR also makes oops_do() virtual (done sometime during JDK 9, it's in the jdk9u repo), which wasn't discussed and imo should be the subject of a backport of the commit that introduced it.;;;","2023-04-25 12:53;dukebot;Changeset: 3147b1ba
Author:    Joshua Zhu <jzhu@openjdk.org>
Committer: Paul Hohensee <phh@openjdk.org>
Date:      2023-04-25 19:51:50 +0000
URL:       https://git.openjdk.org/jdk8u-dev/commit/3147b1bafe12326a97269655de46f066931f3ee4
;;;","2023-05-02 11:30;dukebot;Changeset: 3147b1ba
Author:    Joshua Zhu <jzhu@openjdk.org>
Committer: Paul Hohensee <phh@openjdk.org>
Date:      2023-04-25 19:51:50 +0000
URL:       https://git.openjdk.org/jdk8u/commit/3147b1bafe12326a97269655de46f066931f3ee4
;;;",,,,,,,,,,,,,,,,,,,,,
Can't bootstrap ctw.jar ,JDK-8305142,5097361,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,xliu,xliu,xliu,2023-03-29 00:01,2023-04-05 23:17,2023-10-01 09:55,2023-03-30 09:56,21,,,,,,,,21,hotspot,,0,noreg-self,oracle-triage-21,,,,,,,,,,,,,,,"CTW depends on some test libraries.  we need to export some internal pacakges to ALL-UNNAMED, or we can't bootstrap ctw.jar anymore. 

goto test/hotspot/jtreg/testlibrary/ctw

make sure we are using the new build. 

➜  ctw git:(master) which java
/local/home/xxinliu/Devel/jdk/build/linux-x86_64-server-release/jdk/bin/java

trigger build:
➜  ctw git:(master) make
/local/home/xxinliu/Devel/jdk/build/linux-x86_64-server-release/jdk/bin/../bin/javac --add-exports java.base/jdk.internal.jimage=ALL-UNNAMED --add-exports java.base/jdk.internal.misc=ALL-UNNAMED --add-exports java.base/jdk.internal.reflect=ALL-UNNAMED --add-exports java.base/jdk.internal.access=ALL-UNNAMED -sourcepath src -d build/classes -cp dist/wb.jar @filelist
../../../../../test/lib/jdk/test/lib/util/ModuleInfoWriter.java:33: error: package jdk.internal.classfile is not visible
import jdk.internal.classfile.Classfile;
                   ^
  (package jdk.internal.classfile is declared in module java.base, which does not export it to the unnamed module)
../../../../../test/lib/jdk/test/lib/util/ModuleInfoWriter.java:34: error: package jdk.internal.classfile.java.lang.constant is not visible
import jdk.internal.classfile.java.lang.constant.PackageDesc;
                                       ^
  (package jdk.internal.classfile.java.lang.constant is declared in module java.base, which does not export it)
../../../../../test/lib/jdk/test/lib/util/ModuleInfoWriter.java:35: error: package jdk.internal.classfile.attribute is not visible
import jdk.internal.classfile.attribute.ModuleAttribute;
                             ^
  (package jdk.internal.classfile.attribute is declared in module java.base, which does not export it to the unnamed module)
../../../../../test/lib/jdk/test/lib/util/ModuleInfoWriter.java:36: error: package jdk.internal.classfile.attribute is not visible
import jdk.internal.classfile.attribute.ModuleExportInfo;
                             ^
  (package jdk.internal.classfile.attribute is declared in module java.base, which does not export it to the unnamed module)
../../../../../test/lib/jdk/test/lib/util/ModuleInfoWriter.java:37: error: package jdk.internal.classfile.attribute is not visible
import jdk.internal.classfile.attribute.ModuleMainClassAttribute;
                             ^
  (package jdk.internal.classfile.attribute is declared in module java.base, which does not export it to the unnamed module)
../../../../../test/lib/jdk/test/lib/util/ModuleInfoWriter.java:38: error: package jdk.internal.classfile.attribute is not visible
import jdk.internal.classfile.attribute.ModuleOpenInfo;
                             ^
  (package jdk.internal.classfile.attribute is declared in module java.base, which does not export it to the unnamed module)
../../../../../test/lib/jdk/test/lib/util/ModuleInfoWriter.java:39: error: package jdk.internal.classfile.attribute is not visible
import jdk.internal.classfile.attribute.ModulePackagesAttribute;
                             ^
  (package jdk.internal.classfile.attribute is declared in module java.base, which does not export it to the unnamed module)
../../../../../test/lib/jdk/test/lib/util/ModuleInfoWriter.java:40: error: package jdk.internal.classfile.attribute is not visible
import jdk.internal.classfile.attribute.ModuleResolutionAttribute;
                             ^
  (package jdk.internal.classfile.attribute is declared in module java.base, which does not export it to the unnamed module)
../../../../../test/lib/jdk/test/lib/util/ModuleInfoWriter.java:41: error: package jdk.internal.classfile.attribute is not visible
import jdk.internal.classfile.attribute.ModuleRequireInfo;
                             ^
  (package jdk.internal.classfile.attribute is declared in module java.base, which does not export it to the unnamed module)
../../../../../test/lib/jdk/test/lib/util/ModuleInfoWriter.java:42: error: package jdk.internal.classfile.attribute is not visible
import jdk.internal.classfile.attribute.ModuleTargetAttribute;
                             ^
  (package jdk.internal.classfile.attribute is declared in module java.base, which does not export it to the unnamed module)
../../../../../test/lib/jdk/test/lib/util/ModuleInfoWriter.java:43: error: package jdk.internal.classfile.constantpool is not visible
import jdk.internal.classfile.constantpool.ModuleEntry;
                             ^
  (package jdk.internal.classfile.constantpool is declared in module java.base, which does not export it to the unnamed module)
../../../../../test/lib/jdk/test/lib/util/ModuleInfoWriter.java:44: error: package jdk.internal.module is not visible
import jdk.internal.module.ModuleResolution;
                   ^
  (package jdk.internal.module is declared in module java.base, which does not export it to the unnamed module)
../../../../../test/lib/jdk/test/lib/util/ModuleInfoWriter.java:45: error: package jdk.internal.module is not visible
import jdk.internal.module.ModuleTarget;
                   ^
  (package jdk.internal.module is declared in module java.base, which does not export it to the unnamed module)
Note: Some input files use unchecked or unsafe operations.
Note: Recompile with -Xlint:unchecked for details.
13 errors
make: *** [dist/ctw.jar] Error 1
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,generic,,,,,,,,,,generic,,,,,,"0|i30xjv:",9223372036854775807,b17,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2023-03-29 00:10;xliu;from the error messages, we need to exports some internal modules, or we can't compile them. 
the following patch works, but I will see if there's better solution. 

diff --git a/test/hotspot/jtreg/testlibrary/ctw/Makefile b/test/hotspot/jtreg/testlibrary/ctw/Makefile
index ebd3b257ff7..285a68a77ef 100644
--- a/test/hotspot/jtreg/testlibrary/ctw/Makefile
+++ b/test/hotspot/jtreg/testlibrary/ctw/Makefile
@@ -50,7 +50,12 @@ LIB_FILES = $(shell find $(TESTLIBRARY_DIR)/jdk/test/lib/ \
 WB_SRC_FILES = $(shell find $(TESTLIBRARY_DIR)/jdk/test/lib/compiler $(TESTLIBRARY_DIR)/jdk/test/whitebox -name '*.java')
 EXPORTS=--add-exports java.base/jdk.internal.jimage=ALL-UNNAMED \
        --add-exports java.base/jdk.internal.misc=ALL-UNNAMED \
+       --add-exports java.base/jdk.internal.module=ALL-UNNAMED \
        --add-exports java.base/jdk.internal.reflect=ALL-UNNAMED \
+       --add-exports java.base/jdk.internal.classfile=ALL-UNNAMED \
+       --add-exports java.base/jdk.internal.classfile.attribute=ALL-UNNAMED \
+       --add-exports java.base/jdk.internal.classfile.constantpool=ALL-UNNAMED \
+       --add-exports java.base/jdk.internal.classfile.java.lang.constant=ALL-UNNAMED \
        --add-exports java.base/jdk.internal.access=ALL-UNNAMED

 MAIN_CLASS = sun.hotspot.tools.ctw.CompileTheWorld;;;","2023-03-29 00:22;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/13220
Date: 2023-03-29 07:17:23 +0000;;;","2023-03-30 00:23;thartmann;ILW = CTW testlibrary does not compile, non-default way of building/using, use make test = HLL = P4;;;","2023-03-30 09:56;dukebot;Changeset: 83cf28f9
Author:    Xin Liu <xliu@openjdk.org>
Date:      2023-03-30 16:53:33 +0000
URL:       https://git.openjdk.org/jdk/commit/83cf28f99639d80e62c4031c4c9752460de5f36c
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,
(tz) Update Timezone Data to 2023c,JDK-8305113,5097333,Bug,Closed,JDK,JDK,software,duke,,,P3,Fixed,ysatowse,ysatowse,ysatowse,2023-03-28 21:20,2023-08-07 14:52,2023-10-01 09:55,2023-04-04 18:21,11,17,20,8,,,,,21,core-libs,,0,11bpr-critical-approved,8bpr-critical-approved,amazon-interest,jdk11u-fix-request,jdk11u-fix-yes,jdk17u-fix-request,jdk17u-fix-yes,jdk20u-fix-request,jdk20u-fix-SQE-ok-next,jdk20u-fix-yes,jdk8u-fix-request,jdk8u-fix-yes,tzdata,tzdata2023c,,,"The 2023c release of the tz code and data is available.

This release's code and data are identical to 2023a.  In other words, 
this release reverts all changes made in 2023b other than commentary, as 
that appears to be the best of a bad set of short-notice choices for 
modeling this week's daylight saving chaos in Lebanon. (Thanks to Rany 
Hany for the heads-up about the government's announcement this week.)

Here are links to the release files:

   https://www.iana.org/time-zones/repository/releases/tzcode2023c.tar.gz
   https://www.iana.org/time-zones/repository/releases/tzdata2023c.tar.gz
   https://www.iana.org/time-zones/repository/releases/tzdb-2023c.tar.lz

The following convenience links are also available, although they may 
point to the previous release until the relevant caches are refreshed:

   https://www.iana.org/time-zones/repository/tzcode-latest.tar.gz
   https://www.iana.org/time-zones/repository/tzdata-latest.tar.gz
   https://www.iana.org/time-zones/repository/tzdb-latest.tar.lz

Links are also available via plain HTTP, and via FTP from 
ftp://ftp.iana.org/tz/releases with the same basenames as above.

Each release file has a GPG signature, which can be retrieved by 
appending "".asc"" to the above URLs. Copies of these signatures are 
appended to this message.

This release corresponds to commit 
ddb8cf09d54ecc486ed6665edcdd642abccd4eef dated 2023-03-28 12:42:14 -0700 
and tagged '2023c' in the development GitHub repository at 
<https://github.com/eggert/tz>.

Here are the SHA-512 checksums for the release files:

fa18bae9c0e7c061bc9d5f5f2eb9967f0e4ddb2baafdee9887fa30cd0c60f4aa6f21eacffb17df0d59d26ff54d08c5dcefa98159309eba497e86443624913a82 
  tzcode2023c.tar.gz
608bd286ebcbd0004cfdc1da183273f08aff61f90c8867661154453d77a05d421e4c46ad6d066a1fe2e87d5c82ec0f1c0224667a3b35f3180a3eb7f6ff84cbf5 
  tzdata2023c.tar.gz
b59dbfc598b98f325797ff587bd2e8b27aadc52924eeb0b26cd18cdaca56224c436a20950bc73de9b9b46e98d640a24d8cb797a8f49ada15ea2f42a70a6efe22 
  tzdb-2023c.tar.lz

Here are GPG digital signatures for the release files:

-----BEGIN PGP SIGNATURE-----

iQIzBAABCgAdFiEEfjeSqdis99YzvBWI7ZfpDmKqfjQFAmQjQ8MACgkQ7ZfpDmKq
fjTp4BAAvitWlH49WQ+Cfs//1bBy7ifW1I5PNXSZFIDSNsZUGhrXOkZ/b6l3jAEF
Z76GL7PQb5d/QHdKAIYeDheGnGf/8Wh4PFGzBkiyZgEdeZk6QLtE1n71Fu1x7gca
IQOmVTzwVAf9f+fbizsaTarqg30TnPzUsuHiljInOaV8GkTt0VUkIZ5LeH09kdpY
Rq6BIiehGikkBLyvCpyCTGZ4H8IKgR0GMkIHWQwj0mw/WROnT+xAfzTUrtD7zJK2
5+Ek2kj0UDB9DbprIkCZyh56W1OZ4m5OuAd9wHdx1ZOPfE6jq0lm+2B2kX4759mQ
U66wyATu1qqqlc/2HUe464SWCyNTEDGbCCygfryInKd9Y+QORhK9yOsDfskVcGgX
qTE2U20YzMqHP34fgTUsOC+mQ9e+qR1CvnCGAv3y1wpUIj1r9Opq7cI1uCvVE6xn
nJhU1oE+z4HjhT2TZSS+gVM8D6p+z096sOkRnFg+mIh7XzSYYSFRojcGLnSAkg+o
K68yPfXPu0subUGi5dH1XLQQYM0v0sqCATu5jKwU4YyyHoUuWDi9mooReAkSaj+y
KON+VuYMRZZfJqzdc0HcXUsqlY/nK6/INRbtgvEKlMRLBn5oGbWIRnlyQvJA814v
fsaewl80tRZAtXs/hwHrSGX1vxMkMaaDk5frG9BG/EkupBZa/rk=
=fwRN
-----END PGP SIGNATURE-----
-----BEGIN PGP SIGNATURE-----

iQIzBAABCgAdFiEEfjeSqdis99YzvBWI7ZfpDmKqfjQFAmQjQ8MACgkQ7ZfpDmKq
fjScAg/+LKVw3MFKXvXhDAJX9FPL+ZtvFc+XCwkAxylFA8rrLYjNTo+X7vdyu/AV
1YSkQFqPrPJrVMlffRm/NaQI59vOhkIQZ4Ingd0IFzfHIJMSMVU1C359mpUnxgce
XLLUA12+Mjo3SEO/QYOZLhkpvzoJ2loPdgAUtraysunZdgYVdOubd8EpbWtZ/d9u
cdKJriVWaHwcmEPXmZOcAhjTA2immhIrAd4G1FzuHFJNjdjIzJyXzxATWEk3mQ0z
ZOQcpWGzf50OL9Atri4e8Nm4mXjguQHRebfYv8QVHAvxcdjGFc5yqvVrwGaNLGtV
oadxHA3J/hmWS7mg7/pYDKabTNeoXrXWEzY8VXRbPnfvtbUXh9g4t9JDlgocHpQQ
wAC3Hb/mvMFON68aCPWQeHxcHXOrAm2KHlGblJA9iI364S6v3iK7gd16lzZSbuTy
G8jAt7YUilZxyIIV0GVMjQD9oG6bVm6ApccVVIBPHqlW1J09ON0koWRiNGqdbr8F
BTh3ORBCo0qU+BvYF6mL9SCIrbGUvr4NdwY9aKaB04HPZz244fD2kLPt1z5v+7K6
cQrhdVQ6CqejhlJXRm4cQdeEzJhgxw+cFc256e8WpoofVu5rDws2d2KQZkqHGiFH
A5jSKg2PWfZcqPoTdRg19DlUUdDBH8xybXzK5ExjHdDDO7KInGU=
=XC0E
-----END PGP SIGNATURE-----
-----BEGIN PGP SIGNATURE-----

iQIzBAABCgAdFiEEfjeSqdis99YzvBWI7ZfpDmKqfjQFAmQjQ8QACgkQ7ZfpDmKq
fjS96g//dxNELnczZASWUk7n+EJ5EbMjamjOOAde6r/Mpy/71DLg0AatISKt+Ph+
7lAVzQRip6o4mZNZb9PZ6yP3r1rYKUymaOahtiwv5oC2lSmm2jCMRlFslHJ/feQc
czOfCfd7ggpmg95Iqx81WYfc2lSbXzNArpvqBEjApqtkOLbpJ7A7s2JFn7o3lnD2
E1gMeiIbM4doq2Dfqzc3sJ2kyn/zmsA2g/HO64DZ9RUiDJlbOAZctIAfDiSkHE8q
MTdSIVlKrOXDzmzvN1YMXyIPbo4ZaFCjvSZ5xbEpu8nf1IrLq0WqkU41T+4cq3zD
Vq0NHrADU49npWh1qn/PTJunln6I6BHIXzyDAAZL+Ij1lcplRh/ZdszZBxU267Qx
6rvEqeea1jQPEKS2/x9aMSWk4mwooB1pYHjnpgS+ZP1CLHtrWVtf5zU4Z2sODWBd
p1otOWWgR1nq7b4qc0OZwwVzuJN8rtptEf0PuxgKZnLLoVmgEpU5WxA5FjhTsJmm
1nbv676DfIN31NOfSGcP12Lcp2KjZ2Cfj++zmQruTlZcjpWYEJiRjiecqELBWo7S
jw96jrEUQi6mVn6jhzV0Sxdiig9M0hmzMj0bcx2BvldbUFCbZscAproR9fHeqpZM
Q4F6QphFyP5Y3kBKARZZ3HmM6Kc5ZWkG6WzLeTkTdcxqHZLrp8c=
=YTzD
-----END PGP SIGNATURE-----
",,,,,,,,,,,JDK-8305724,JDK-8308420,JDK-8305726,JDK-8306230,JDK-8305829,JDK-8306084,JDK-8306114,JDK-8305865,JDK-8307045,JDK-8306392,JDK-8307838,JDK-8306377,JDK-8307442,JDK-8305722,,JDK-8218110,,,,,JDK-8304763,JDK-8304854,,,,,,,,,JDK-8308371,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i30xdn:",9223372036854775807,b17,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@a9a7756,,,,,,,Verified,,"2023-03-30 18:38;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/13255
Date: 2023-03-31 00:02:02 +0000;;;","2023-04-04 18:21;dukebot;Changeset: ed9592c6
Author:    Yoshiki Sato <ysatowse@openjdk.org>
Committer: Andrew John Hughes <andrew@openjdk.org>
Date:      2023-04-05 01:19:00 +0000
URL:       https://git.openjdk.org/jdk/commit/ed9592c6e81f82e2bf6508ce45ba15aad8232181
;;;","2023-04-07 11:21;dlutker;Fix Request [20u]

Clean backport for update TZ data.;;;","2023-04-07 11:23;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk20u/pull/53
Date: 2023-04-07 18:14:29 +0000;;;","2023-04-08 07:26;andrew;I've replaced jdk20-fix-request with jdk20u-fix-request, Dan, as 20 is released and so maintained via 20u updates.;;;","2023-04-10 15:02;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u/pull/368
Date: 2023-04-10 21:53:32 +0000;;;","2023-04-10 15:03;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk11u/pull/71
Date: 2023-04-10 21:55:34 +0000;;;","2023-04-12 12:57;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/1241
Date: 2023-04-12 19:49:27 +0000;;;","2023-04-13 09:02;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk11u-dev/pull/1830
Date: 2023-04-13 15:55:41 +0000;;;","2023-04-13 16:56;vrudomet;Fix Request [8u] 

Similar fix to 11/17, but not a clean backport as 8 uses different format. 
Tested: jdk/test/java/util/TimeZone jdk/test/java/time/test jdk/test/sun/util/resources jdk/test/sun/text/resources jdk/test/sun/util/calendar Test results: passed: 123

Jtreg tier1, tier2 ok;;;","2023-04-13 17:02;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk8u-dev/pull/305
Date: 2023-04-13 23:57:20 +0000;;;","2023-04-13 19:04;andrew;Fix Request [11u, 17u]

Usual tzdata update. Backport from trunk to 17u is near-clean (just header adjustments), and clean from 17u to 11u. Both have been reviewed by Paul Hohensee.

Tests in java/util/TimeZone, java/time/test, sun/util/calendar, sun/util/resources and sun/text/resources show no regressions;;;",,,,,,,,,,,,,,,,,,,
Locale.lookupTag has typo in parameter,JDK-8305111,5097329,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,jlu,jlu,jlu,2023-03-28 16:36,2023-04-05 23:17,2023-10-01 09:55,2023-03-30 15:36,20,,,,,,,,21,core-libs,,0,noreg-doc,,,,,,,,,,,,,,,,"In the method, Locale.lookupTag in parameters:

tags - language tangs used for matching 

should be 

tags - language tags used for matching ",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i30xcr:",9223372036854775807,b17,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@7644fb4c,,,,,,,,,"2023-03-29 15:57;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/13235
Date: 2023-03-29 22:51:12 +0000;;;","2023-03-30 15:36;dukebot;Changeset: 5f7b4b8e
Author:    Justin Lu <jlu@openjdk.org>
Committer: Naoto Sato <naoto@openjdk.org>
Date:      2023-03-30 22:33:59 +0000
URL:       https://git.openjdk.org/jdk/commit/5f7b4b8e75fdf4a22c108a0ad528147e924a3ee4
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
[Backout] JDK-8303912 Clean up JavadocTokenizer,JDK-8305098,5097313,Bug,Closed,JDK,JDK,software,duke,,,P1,Fixed,jlaskey,jlaskey,jlaskey,2023-03-28 10:41,2023-08-15 10:22,2023-10-01 09:55,2023-03-28 10:51,21,,,,,,,,21,tools,,0,regression,tier1,,,,,,,,,,,,,,,tier1 errors ,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8305100,,,,,JDK-8303912,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i30x97:",9223372036854775807,b16,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@7900061a,,,,,,,Verified,,"2023-03-28 10:49;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/13212
Date: 2023-03-28 17:43:47 +0000;;;","2023-03-28 10:51;dukebot;Changeset: 1683a63a
Author:    Jim Laskey <jlaskey@openjdk.org>
Date:      2023-03-28 17:48:59 +0000
URL:       https://git.openjdk.org/jdk/commit/1683a63a7df6eb3bd71cd9d0a7ab7081b92107c4
;;;","2023-03-28 11:19;dcubed;The [BACKOUT] is integrated in jdk-21+16-1307.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,
Update java/net/httpclient/CustomRequestPublisher.java to use new HttpTestServer factory methods,JDK-8305095,5097310,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,dfuchs,dfuchs,dfuchs,2023-03-28 10:08,2023-05-24 06:01,2023-10-01 09:55,2023-03-29 02:48,21,,,,,,,,21,core-libs,,0,httpclient,noreg-self,,,,,,,,,,,,,,,The CustomRequestPublisher could be refactored to use the new HttpTestServer factory methods.,,,,,,,,,,,JDK-8308722,JDK-8308723,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8303457,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i30x8j:",9223372036854775807,b16,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@446e124a,,,,,,,,,"2023-03-28 10:41;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/13211
Date: 2023-03-28 17:35:50 +0000;;;","2023-03-29 02:48;dukebot;Changeset: e56bcb04
Author:    Daniel Fuchs <dfuchs@openjdk.org>
Date:      2023-03-29 09:46:15 +0000
URL:       https://git.openjdk.org/jdk/commit/e56bcb04b11c6494e6afdf0bd9b9bc65a4769347
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Linker cache should not take layout names into account,JDK-8305093,5097305,Bug,Closed,JDK,JDK,software,duke,,,P3,Fixed,jvernee,jvernee,jvernee,2023-03-28 08:53,2023-08-04 12:49,2023-10-01 09:55,2023-05-01 06:42,21,repo-panama,,,,,,,21,core-libs,,0,foreign-memaccess+abi,,,,,,,,,,,,,,,,"Layout names are of no consequence to the linker, however, the current DOWNCALL_CACHE and UPCALL_CACHE in AbstractLinker inadvertantly factor these layout names into the keys of the cache, as the cache key type, LinkRequest, uses FunctionDescriptor's hashcode/equals, which uses MemoryLayout's hashcode/equals, which relies on layout names.

LinkeRequest should override hashcode and equals to ignore layout names.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i30x7f:",9223372036854775807,b21,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@28ce6b78,,,,,,,Verified,,"2023-04-20 17:45;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/13562
Date: 2023-04-20 17:23:08 +0000;;;","2023-05-01 06:42;dukebot;Changeset: 67dd8414
Author:    Jorn Vernee <jvernee@openjdk.org>
Date:      2023-05-01 13:41:00 +0000
URL:       https://git.openjdk.org/jdk/commit/67dd8414321677e3fc41fa1470c857c0afaa4259
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Change ChaCha20 cipher init behavior to match AES-GCM,JDK-8305091,5097301,Bug,Closed,JDK,JDK,software,duke,,,P3,Fixed,jnimeh,jnimeh,jnimeh,2023-03-28 08:29,2023-07-21 07:36,2023-10-01 09:55,2023-05-23 07:44,,,,,,,,,21,security-libs,,0,release-note=yes,,,,,,,,,,,,,,,,"The ChaCha20 and ChaCha20-Poly1305 cipher implementations in SunJCE implement key and nonce reuse protection.  This means that a key and nonce may not be used across two subsequent Cipher.init calls.  However, in AES-GCM we do allow key/nonce reuse when the cipher is in DECRYPT_MODE in order to be able to reuse a Cipher object to decrypt the information is has encrypted, or for use in protocols where one may be decrypting multiple ciphertexts that may be the result of retransmissions (e.g. DTLS).

Currently ChaCha20 does not allow decrypt-mode Cipher objects to reuse the key and nonce, but it should.  Fixing this issue will have ChaCha20 and ChaCha20-Poly1305 init behavior conform to the same rules that AES-GCM does.",,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8305822,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i30x6j:",9223372036854775807,b24,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@35a9b277,,,,,,,Verified,,"2023-04-11 10:32;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/13428
Date: 2023-04-11 17:26:25 +0000;;;","2023-05-23 07:44;dukebot;Changeset: bb0ff48a
Author:    Jamil Nimeh <jnimeh@openjdk.org>
Date:      2023-05-23 14:31:08 +0000
URL:       https://git.openjdk.org/jdk/commit/bb0ff48aa94c4648a2f929226dd8d252431bcd03
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
SIGSEGV in Method::is_method_handle_intrinsic,JDK-8305088,5097298,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,lujaniuk,jcherian,jcherian,2023-03-28 07:43,2023-06-28 11:24,2023-10-01 09:55,2023-05-11 05:54,17.0.7,17.0.7-oracle,,,,,,,17.0.8,hotspot,,0,gc-g1,intermittent,jdk17u-fix-request,jdk17u-fix-yes,oracle-triage-21,,,,,,,,,,,,"#-----testdescription-----
$file=/System/Volumes/Data/mesos/work_dir/jib-master/install/jdk-17.0.8+1-120/src.full/open/test/langtools/tools/javac/lambda/LambdaParserTest.java
$root=/System/Volumes/Data/mesos/work_dir/jib-master/install/jdk-17.0.8+1-120/src.full/open/test/langtools
keywords=bug7115050 bug8003280 bug8005852 bug8006694 bug8129962
library=/tools/javac/lib
modules=jdk.compiler/com.sun.tools.javac.api jdk.compiler/com.sun.tools.javac.file jdk.compiler/com.sun.tools.javac.util
run=USER_SPECIFIED build combo.ComboTestHelper\nUSER_SPECIFIED main LambdaParserTest\n
source=LambdaParserTest.java
title=Add lambda tests Add parser support for lambda expressions temporarily workaround combo tests are causing time out in several platforms

#-----environment-----

#-----testresult-----
description=file\:/System/Volumes/Data/mesos/work_dir/jib-master/install/jdk-17.0.8+1-120/src.full/open/test/langtools/tools/javac/lambda/LambdaParserTest.java
elapsed=10539 0\:00\:10.539
end=Wed Mar 15 07\:57\:15 GMT 2023
environment=regtest
execStatus=Error. Agent communication error\: java.io.EOFException; check console log for any additional details
harnessLoaderMode=Classpath Loader
harnessVariety=Full Bundle
hostname=jpg-mac-arm-74.oraclecorp.com
javatestOS=Mac OS X 12.2 (aarch64)
javatestVersion=6.0-ea+b14-2020-11-04
jtregVersion=jtreg 6 1
modules=jdk.compiler/com.sun.tools.javac.api jdk.compiler/com.sun.tools.javac.file jdk.compiler/com.sun.tools.javac.util
script=com.sun.javatest.regtest.exec.RegressionScript
sections=script_messages build build compile main
start=Wed Mar 15 07\:57\:04 GMT 2023
test=tools/javac/lambda/LambdaParserTest.java
testJDK=/System/Volumes/Data/mesos/work_dir/jib-master/install/jdk-17.0.8+1-120/macosx-aarch64.jdk/jdk-17.0.8.jdk/Contents/Home
totalTime=10540
user.name=mach5-one
work=/System/Volumes/Data/mesos/work_dir/slaves/91e16c40-06d4-468a-9fc3-7198a5bb7d5a-S119861/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/a8d53347-0028-45ce-a4d5-1698cacaa34d/runs/d358bb98-da57-4175-9575-5a7f9cd396b8/testoutput/test-support/jtreg_open_test_langtools_tier1/tools/javac/lambda

//call stack

# A fatal error has been detected by the Java Runtime Environment:
#
#  SIGSEGV (0xb) at pc=0x000000010656bc94, pid=25879, tid=27651
#
# JRE version: Java(TM) SE Runtime Environment (17.0.8+1) (build 17.0.8-ea+1-LTS-120)
# Java VM: Java HotSpot(TM) 64-Bit Server VM (17.0.8-ea+1-LTS-120, mixed mode, tiered, compressed oops, compressed class ptrs, g1 gc, bsd-aarch64)
# Problematic frame:
# V  [libjvm.dylib+0x75fc94]  _ZNK6Method26is_method_handle_intrinsicEv+0x8


---------------  T H R E A D  ---------------

Current thread (0x000000012100de00):  GCTaskThread ""GC Thread#7"" [stack: 0x000000016f224000,0x000000016f427000] [id=27651]

Stack: [0x000000016f224000,0x000000016f427000],  sp=0x000000016f426bd0,  free space=2058k
Native frames: (J=compiled Java code, j=interpreted, Vv=VM code, C=native code)
V  [libjvm.dylib+0x75fc94]  _ZNK6Method26is_method_handle_intrinsicEv+0x8
V  [libjvm.dylib+0x78e638]  _ZN7nmethod12is_unloadingEv+0x68
V  [libjvm.dylib+0x2df328]  _ZN13nmethodBucket18next_not_unloadingEv+0x84
V  [libjvm.dylib+0x2df814]  _ZN17DependencyContext26clean_unloading_dependentsEv+0x4c
V  [libjvm.dylib+0x44b430]  _ZN13InstanceKlass24clean_dependency_contextEv+0x20
V  [libjvm.dylib+0x78dac8]  _ZN7nmethod18flush_dependenciesEb+0xd8
V  [libjvm.dylib+0x78d784]  _ZN7nmethod13make_unloadedEv+0x78
V  [libjvm.dylib+0x7cbb00]  _ZN22CodeCacheUnloadingTask4workEj+0x70
V  [libjvm.dylib+0x3af348]  _ZN22G1ParallelCleaningTask4workEj+0x74
V  [libjvm.dylib+0x9bd714]  _ZN10GangWorker4loopEv+0x64
V  [libjvm.dylib+0x9bd69c]  _ZN10GangWorker10initializeEv+0x0
V  [libjvm.dylib+0x9165a4]  _ZN6Thread8call_runEv+0x128
V  [libjvm.dylib+0x7b55c0]  _ZL19thread_native_entryP6Thread+0x158
C  [libsystem_pthread.dylib+0x7240]  _pthread_start+0x94",,,,,,,,,,,JDK-8308083,JDK-8308485,,,,,,,,,,,,,,,,,,,,,JDK-8303578,JDK-8302138,JDK-8310935,,,,,,JDK-8299427,JDK-8295724,,,"2023-03-28 07:42;jcherian;console_log.txt;https://bugs.openjdk.org/secure/attachment/103152/console_log.txt",,,,,,,,,,,,,,,,,,,b27,20,,,,,,,,"0|i30x5v:",9223372036854775807,b03,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2023-05-08 05:51;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/1330
Date: 2023-05-08 12:44:00 +0000;;;","2023-05-08 05:59;mdoerr;Fix Request (17u):
The backport JDK-8299427 contains a bug. I have proposed a small fix (see PR above).;;;","2023-05-11 05:54;dukebot;Changeset: 398da7ec
Author:    Martin Doerr <mdoerr@openjdk.org>
Date:      2023-05-11 12:50:54 +0000
URL:       https://git.openjdk.org/jdk17u-dev/commit/398da7ec46d04422e530d7742f334a764aabb5b5
;;;","2023-05-17 13:55;dukebot;Changeset: 398da7ec
Author:    Martin Doerr <mdoerr@openjdk.org>
Date:      2023-05-11 12:50:54 +0000
URL:       https://git.openjdk.org/jdk17u/commit/398da7ec46d04422e530d7742f334a764aabb5b5
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,
G1 Redirty Cards phase printed twice,JDK-8305086,5097296,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,tschatzl,tschatzl,tschatzl,2023-03-28 06:57,2023-04-03 12:11,2023-10-01 09:55,2023-03-29 08:23,21,,,,,,,,21,hotspot,,0,gc-g1,gc-pending-review,,,,,,,,,,,,,,,"The G1 Redirty Cards phase printed twice with gc+phases=trace.

Remove one instance.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i30x5f:",9223372036854775807,b16,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6b00f96c,,,,,,,,,"2023-03-28 08:24;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/13209
Date: 2023-03-28 15:17:34 +0000;;;","2023-03-29 08:23;dukebot;Changeset: 014c6587
Author:    Thomas Schatzl <tschatzl@openjdk.org>
Date:      2023-03-29 15:21:02 +0000
URL:       https://git.openjdk.org/jdk/commit/014c658708f489e029592ea1e986812cf7c253b8
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
[JVMCI] guarantee(ik->is_initialized()) failed: java/lang/Long$LongCache must be initialized,JDK-8305066,5097278,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,dnsimon,dnsimon,dnsimon,2023-03-28 04:57,2023-04-17 01:54,2023-10-01 09:55,2023-03-31 08:26,20,21,,,,,,,21,hotspot,,0,jvmci,oracle-triage-11,oracle-triage-17,oracle-triage-21,,,,,,,,,,,,,"
#
# A fatal error has been detected by the Java Runtime Environment:
#
#  Internal Error (/b/b/e/main/jdk_tlda/open/src/hotspot/share/runtime/deoptimization.cpp:950), pid=1251, tid=1522
#  guarantee(ik->is_initialized()) failed: java/lang/Long$LongCache must be initialized
#
# JRE version: Java(TM) SE Runtime Environment GraalVM LIBGRAAL_EE 23.0.0-dev (20.0.1+8) (fastdebug build 20.0.1+8-jvmci-23.0-b09)
# Java VM: Java HotSpot(TM) 64-Bit Server VM GraalVM LIBGRAAL_EE 23.0.0-dev (fastdebug 20.0.1+8-jvmci-23.0-b09, mixed mode, jvmci, jvmci compiler, compressed oops, compressed class ptrs, g1 gc, linux-aarch64)
# Problematic frame:
# V  [libjvm.so+0xaa1fc4]  BoxCache<long, java_lang_Long_LongCache, java_lang_Long>::BoxCache(Thread*)+0xa4
#
# No core dump will be written. Core dumps have been disabled. To enable core dumping, try ""ulimit -c unlimited"" before starting Java again
#
# If you would like to submit a bug report, please visit:
#   https://bugreport.java.com/bugreport/crash.jsp
#

---------------  S U M M A R Y ------------

Command Line: -XX:ThreadPriorityPolicy=1 -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCIProduct -XX:-UnlockExperimentalVMOptions -Dtest.vm.opts=-Xmx768m -XX:MaxRAMPercentage=1.5625 -Dtest.boot.jdk=/buildslave/e/main/jib/install/jdk/19/36/bundles/linux-aarch64/jdk-19_linux-aarch64_bin.tar.gz/jdk-19 -Djava.io.tmpdir=/buildslave/e/main/labsjdk/open/build/run-test-prebuilt/test-support/jtreg_open_test_jdk_jdk_loom/tmp -fastdebug -ea -esa -Dtest.tool.vm.opts=-J-Xmx768m -J-XX:MaxRAMPercentage=1.5625 -J-Dtest.boot.jdk=/buildslave/e/main/jib/install/jdk/19/36/bundles/linux-aarch64/jdk-19_linux-aarch64_bin.tar.gz/jdk-19 -J-Djava.io.tmpdir=/buildslave/e/main/labsjdk/open/build/run-test-prebuilt/test-support/jtreg_open_test_jdk_jdk_loom/tmp -J-fastdebug -J-ea -J-esa -Dtest.compiler.opts= -Dtest.java.opts= -Dtest.jdk=/buildslave/e/main/graalvm-jdk20-linux-aarch64 -Dcompile.jdk=/buildslave/e/main/graalvm-jdk20-linux-aarch64 -Dtest.timeout.factor=4.0 -Dtest.nativepath=/sc/bb/downloads/labsjdk-ee-20.0.1+8-jvmci-23.0-b09-tests-linux-aarch64_cad483fb9f/labsjdk-ee-20.0.1-jvmci-23.0-b09/jdk/jtreg/native -Dtest.root=/buildslave/e/main/labsjdk/open/test/jdk -Dtest.name=jdk/incubator/concurrent/ScopedValue/StressStackOverflow.java -Dtest.file=/buildslave/e/main/labsjdk/open/test/jdk/jdk/incubator/concurrent/ScopedValue/StressStackOverflow.java -Dtest.src=/buildslave/e/main/labsjdk/open/test/jdk/jdk/incubator/concurrent/ScopedValue -Dtest.src.path=/buildslave/e/main/labsjdk/open/test/jdk/jdk/incubator/concurrent/ScopedValue -Dtest.classes=/buildslave/e/main/labsjdk/open/build/run-test-prebuilt/test-support/jtreg_open_test_jdk_jdk_loom/classes/5/jdk/incubator/concurrent/ScopedValue/StressStackOverflow.d -Dtest.class.path=/buildslave/e/main/labsjdk/open/build/run-test-prebuilt/test-support/jtreg_open_test_jdk_jdk_loom/classes/5/jdk/incubator/concurrent/ScopedValue/StressStackOverflow.d -Dtest.class.path.prefix=/buildslave/e/main/labsjdk/open/build/run-test-prebuilt/test-support/jtreg_open_test_jdk_jdk_loom/classes/5/jdk/incubator/concurrent/ScopedValue/StressStackOverflow.d:/buildslave/e/main/labsjdk/open/test/jdk/jdk/incubator/concurrent/ScopedValue -Dtest.modules=jdk.incubator.concurrent --add-modules=jdk.incubator.concurrent -Xmx768m -XX:MaxRAMPercentage=1.5625 -Dtest.boot.jdk=/buildslave/e/main/jib/install/jdk/19/36/bundles/linux-aarch64/jdk-19_linux-aarch64_bin.tar.gz/jdk-19 -Djava.io.tmpdir=/buildslave/e/main/labsjdk/open/build/run-test-prebuilt/test-support/jtreg_open_test_jdk_jdk_loom/tmp -ea -esa -Djava.library.path=/sc/bb/downloads/labsjdk-ee-20.0.1+8-jvmci-23.0-b09-tests-linux-aarch64_cad483fb9f/labsjdk-ee-20.0.1-jvmci-23.0-b09/jdk/jtreg/native -XX:-TieredCompilation --enable-preview com.sun.javatest.regtest.agent.MainWrapper /buildslave/e/main/labsjdk/open/build/run-test-prebuilt/test-support/jtreg_open_test_jdk_jdk_loom/jdk/incubator/concurrent/ScopedValue/StressStackOverflow.d/main.0.jta

Host: 13688cda4749, AArch64, 32 cores, 255G, Oracle Linux Server release 7.4
Time: Thu Mar  9 15:34:38 2023 UTC elapsed time: 7.072245 seconds (0d 0h 0m 7s)

---------------  T H R E A D  ---------------

Current thread (0x00004000d4758c80):  JavaThread ""MainThread"" [_thread_in_vm, id=1522, stack(0x000040011fc30000,0x000040011fe30000)]

Stack: [0x000040011fc30000,0x000040011fe30000],  sp=0x000040011fc7eb50,  free space=314k
Native frames: (J=compiled Java code, j=interpreted, Vv=VM code, C=native code)
V  [libjvm.so+0xaa1fc4]  BoxCache<long, java_lang_Long_LongCache, java_lang_Long>::BoxCache(Thread*)+0xa4  (deoptimization.cpp:950)
V  [libjvm.so+0xa96c48]  Deoptimization::get_cached_box(AutoBoxObjectValue*, frame*, RegisterMap*, JavaThread*)+0x368
V  [libjvm.so+0xa973a8]  Deoptimization::realloc_objects(JavaThread*, frame*, RegisterMap*, GrowableArray<ScopeValue*>*, JavaThread*)+0x364
V  [libjvm.so+0xa9b01c]  rematerialize_objects(JavaThread*, int, CompiledMethod*, frame&, RegisterMap&, GrowableArray<compiledVFrame*>*, bool&)+0x35c
V  [libjvm.so+0xa9d4e0]  Deoptimization::fetch_unroll_info_helper(JavaThread*, int)+0xbbc
V  [libjvm.so+0xaa01bc]  Deoptimization::uncommon_trap(JavaThread*, int, int)+0x38
v  ~DeoptimizationBlob 0x00004000e2ce4754
Java frames: (J=compiled Java code, j=interpreted, Vv=VM code)
v  ~DeoptimizationBlob 0x00004000e2ce4754
J 155 jvmci StressStackOverflow$DeepRecursion.run()V (275 bytes) @ 0x00004000e2d61a40 [0x00004000e2d5e640+0x0000000000003400]
J 81 jvmci StressStackOverflow.fibonacci_pad1(ILjava/lang/Runnable;)J (34 bytes) @ 0x00004000e2d30afc [0x00004000e2d30780+0x000000000000037c]
J 81 jvmci StressStackOverflow.fibonacci_pad1(ILjava/lang/Runnable;)J (34 bytes) @ 0x00004000e2d30824 [0x00004000e2d30780+0x00000000000000a4]
J 81 jvmci StressStackOverflow.fibonacci_pad1(ILjava/lang/Runnable;)J (34 bytes) @ 0x00004000e2d30824 [0x00004000e2d30780+0x00000000000000a4]

The problem is that class initialization can fail for Long$LongCache (e.g. due to a StackOverflowError). Not surprisingly, the latter is quite likely to happen in a test named ""StressStackOverflow"".",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8223320,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i30x1f:",9223372036854775807,b17,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2023-03-28 06:07;thartmann;ILW = Guarantee failure during deoptimization of JVMCI compiled code, single test with libgraal and kitchensink, no workaround but disable compilation of affected method = HLM = P3;;;","2023-03-29 06:51;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/13229
Date: 2023-03-29 13:44:24 +0000;;;","2023-03-31 08:26;dukebot;Changeset: e0126850
Author:    Doug Simon <dnsimon@openjdk.org>
Date:      2023-03-31 15:23:45 +0000
URL:       https://git.openjdk.org/jdk/commit/e012685051cb8dbac1a6dd459a6e445c896e76ef
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,
IR check fails on some aarch64 platforms,JDK-8305055,5097265,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,fgao,fgao,fgao,2023-03-28 01:40,2023-04-05 23:17,2023-10-01 09:55,2023-03-31 02:16,21,,,,,,,,21,hotspot,,0,c2-superword,noreg-self,oracle-triage-21,,,,,,,,,,,,,,"IR check fails on some aarch64 platforms in the following testcases:
compiler/c2/irTests/TestVectorizeTypeConversion.java
compiler/vectorization/runner/ArrayTypeConvertTest.java

Command Line:
/home/ent-user/ci-scripts/jdk_build/build-fastdebug/images/jdk/bin/java -DReproduce=true -cp /home/ent-user/ci-scripts/jdk_build/jtwork_rerun/classes/compiler/c2/irTests/TestVectorizeTypeConversion.d:/home/ent-user/ci-scripts/jdk_build/jdk_src/test/hotspot/jtreg/compiler/c2/irTests:/home/ent-user/ci-scripts/jdk_build/jtwork_rerun/classes/test/lib:/home/ent-user/ci-scripts/jdk_build/jtwork_rerun/classes:/home/ent-user/jtreg/jtreg-git/build/images/jtreg/lib/javatest.jar:/home/ent-user/jtreg/jtreg-git/build/images/jtreg/lib/jtreg.jar:/home/ent-user/jtreg/jtreg-git/build/images/jtreg/lib/junit-platform-console-standalone-1.8.2.jar:/home/ent-user/jtreg/jtreg-git/build/images/jtreg/lib/testng-7.3.0.jar:/home/ent-user/jtreg/jtreg-git/build/images/jtreg/lib/guice-4.2.3.jar:/home/ent-user/jtreg/jtreg-git/build/images/jtreg/lib/jcommander-1.78.jar -Djava.library.path=/home/ent-user/ci-scripts/jdk_build/build-fastdebug/images/test/hotspot/jtreg/native -Xbootclasspath/a:. -XX:+UnlockDiagnosticVMOptions -XX:+WhiteBoxAPI -ea -esa -Xmx768m -server -Djdk.test.docker.image.name=ubuntu -Djdk.test.docker.image.version=22.04 -Djdk.incubator.vector.test.loop-iterations=500 -DweakAttempts=100000 -Dir.framework.server.port=44321 -XX:+IgnoreUnrecognizedVMOptions -XX:+SuperWordRTDepCheck -XX:+PrintCompilation -XX:+UnlockDiagnosticVMOptions -XX:+LogCompilation -XX:CompilerDirectivesFile=test-vm-compile-commands-pid-2905747.log -XX:CompilerDirectivesLimit=31 -XX:-OmitStackTraceInFastThrow -DShouldDoIRVerification=true -XX:-BackgroundCompilation -XX:CompileCommand=quiet compiler.lib.ir_framework.test.TestVM compiler.c2.irTests.TestVectorizeTypeConversion

One or more @IR rules failed:

Failed IR Rules (1) of Methods (1)
----------------------------------
1) Method ""private static void compiler.c2.irTests.TestVectorizeTypeConversion.testConvI2D(double[],int[])"" - [Failed IR rules: 1]:
   * @IR rule 1: ""@compiler.lib.ir_framework.IR(applyIfCPUFeatureAnd={}, phase={DEFAULT}, applyIf={}, applyIfCPUFeatureOr={}, applyIfCPUFeature={}, counts={""_#LOAD_VECTOR#_"", "">0"", ""_#VECTOR_CAST_I2X#_"", "">0"", ""_#STORE_VECTOR#_"", "">0""}, failOn={}, applyIfAnd={}, applyIfOr={}, applyIfNot={})""
     > Phase ""PrintIdeal"":
       - counts: Graph contains wrong number of nodes:
         * Constraint 1: ""(\\d+(\\s){2}(LoadVector.*)+(\\s){2}===.*)""
           - Failed comparison: [found] 0 > 0 [given]
           - No nodes matched!
         * Constraint 2: ""(\\d+(\\s){2}(VectorCastI2X.*)+(\\s){2}===.*)""
           - Failed comparison: [found] 0 > 0 [given]
           - No nodes matched!
         * Constraint 3: ""(\\d+(\\s){2}(StoreVector.*)+(\\s){2}===.*)""
           - Failed comparison: [found] 0 > 0 [given]
           - No nodes matched!

Command Line:
/home/ent-user/ci-scripts/jdk_build/build-fastdebug/images/jdk/bin/java -DReproduce=true -cp /home/ent-user/ci-scripts/jdk_build/jtwork_rerun/classes/compiler/vectorization/runner/ArrayTypeConvertTest.d:/home/ent-user/ci-scripts/jdk_build/jdk_src/test/hotspot/jtreg/compiler/vectorization/runner:/home/ent-user/ci-scripts/jdk_build/jtwork_rerun/classes/test/lib:/home/ent-user/ci-scripts/jdk_build/jdk_src/test/lib:/home/ent-user/ci-scripts/jdk_build/jtwork_rerun/classes:/home/ent-user/ci-scripts/jdk_build/jdk_src/test/hotspot/jtreg:/home/ent-user/jtreg/jtreg-git/build/images/jtreg/lib/javatest.jar:/home/ent-user/jtreg/jtreg-git/build/images/jtreg/lib/jtreg.jar -Djava.library.path=/home/ent-user/ci-scripts/jdk_build/build-fastdebug/images/test/hotspot/jtreg/native -Xbootclasspath/a:. -XX:+UnlockDiagnosticVMOptions -XX:+WhiteBoxAPI -ea -esa -Xmx768m -server -Djdk.test.docker.image.name=ubuntu -Djdk.test.docker.image.version=22.04 -Djdk.incubator.vector.test.loop-iterations=500 -DweakAttempts=100000 -Dir.framework.server.port=42713 -XX:-OptimizeFill -XX:+PrintCompilation -XX:+UnlockDiagnosticVMOptions -XX:+LogCompilation -XX:CompilerDirectivesFile=test-vm-compile-commands-pid-2905842.log -XX:CompilerDirectivesLimit=161 -XX:-OmitStackTraceInFastThrow -DShouldDoIRVerification=true -XX:-BackgroundCompilation -XX:CompileCommand=quiet compiler.lib.ir_framework.test.TestVM compiler.vectorization.runner.ArrayTypeConvertTest

One or more @IR rules failed:

Failed IR Rules (3) of Methods (3)
----------------------------------
1) Method ""public double[] compiler.vectorization.runner.ArrayTypeConvertTest.convertFloatToDouble()"" - [Failed IR rules: 1]:
   * @IR rule 1: ""@compiler.lib.ir_framework.IR(phase={DEFAULT}, applyIfCPUFeatureAnd={}, applyIfCPUFeatureOr={""asimd"", ""true"", ""avx"", ""true""}, applyIf={}, applyIfCPUFeature={}, counts={""_#VECTOR_CAST_F2X#_"", "">0""}, failOn={}, applyIfAnd={}, applyIfOr={}, applyIfNot={})""
     > Phase ""PrintIdeal"":
       - counts: Graph contains wrong number of nodes:
         * Constraint 1: ""(\\d+(\\s){2}(VectorCastF2X.*)+(\\s){2}===.*)""
           - Failed comparison: [found] 0 > 0 [given]
           - No nodes matched!

2) Method ""public long[] compiler.vectorization.runner.ArrayTypeConvertTest.convertFloatToLong()"" - [Failed IR rules: 1]:
   * @IR rule 1: ""@compiler.lib.ir_framework.IR(phase={DEFAULT}, applyIfCPUFeatureAnd={}, applyIfCPUFeatureOr={""asimd"", ""true"", ""avx512dq"", ""true""}, applyIf={}, applyIfCPUFeature={}, counts={""_#VECTOR_CAST_F2X#_"", "">0""}, failOn={}, applyIfAnd={}, applyIfOr={}, applyIfNot={})""
     > Phase ""PrintIdeal"":
       - counts: Graph contains wrong number of nodes:
         * Constraint 1: ""(\\d+(\\s){2}(VectorCastF2X.*)+(\\s){2}===.*)""
           - Failed comparison: [found] 0 > 0 [given]
           - No nodes matched!

3) Method ""public double[] compiler.vectorization.runner.ArrayTypeConvertTest.convertIntToDouble()"" - [Failed IR rules: 1]:
   * @IR rule 1: ""@compiler.lib.ir_framework.IR(phase={DEFAULT}, applyIfCPUFeatureAnd={}, applyIfCPUFeatureOr={""asimd"", ""true"", ""avx"", ""true""}, applyIf={}, applyIfCPUFeature={}, counts={""_#VECTOR_CAST_I2X#_"", "">0""}, failOn={}, applyIfAnd={}, applyIfOr={}, applyIfNot={})""
     > Phase ""PrintIdeal"":
       - counts: Graph contains wrong number of nodes:
         * Constraint 1: ""(\\d+(\\s){2}(VectorCastI2X.*)+(\\s){2}===.*)""
           - Failed comparison: [found] 0 > 0 [given]
           - No nodes matched!
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8303827,,,,,JDK-8298935,,,,,,,,,,,,,,,,aarch64,,,,,,,,,,generic,,,,,,"0|i30wyj:",9223372036854775807,b17,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2023-03-29 21:18;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/13236
Date: 2023-03-30 04:13:39 +0000;;;","2023-03-30 00:45;thartmann;ILW = Test fails IR verification (test bug), single test on some AArch64 machines, no workaround = MLH = P4;;;","2023-03-31 02:16;dukebot;Changeset: dea9db2d
Author:    Fei Gao <fgao@openjdk.org>
Date:      2023-03-31 09:15:24 +0000
URL:       https://git.openjdk.org/jdk/commit/dea9db2d0a28b379303ce867df6b125f5fdfcf16
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,
Use correct register in riscv_enc_fast_unlock(),JDK-8305006,5097215,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,gcao,gcao,gcao,2023-03-27 19:02,2023-07-09 19:29,2023-10-01 09:55,2023-03-28 02:24,repo-riscv-port-17,,,,,,,,repo-riscv-port-17,hotspot,,0,,,,,,,,,,,,,,,,,"Refer to https://bugs.openjdk.org/browse/JDK-8296136, also need to backport to riscv-port-jdk17u",,,,,,,,,,,JDK-8311757,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8296136,,,,,,,,,,,,,,,,riscv,,,,,,,,,,linux,,,,,,"0|i30wnf:",9223372036854775807,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2023-03-27 19:06;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/riscv-port-jdk17u/pull/27
Date: 2023-03-24 01:41:29 +0000;;;","2023-06-19 20:38;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/1427
Date: 2023-06-13 09:43:25 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Add missing HandleMarks,JDK-8304996,5097204,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,dholmes,dholmes,dholmes,2023-03-27 14:49,2023-04-10 10:23,2023-10-01 09:55,2023-04-03 19:06,21,,,,,,,,21,hotspot,,0,cds,,,,,,,,,,,,,,,,The review for JDK-8304147 pointed out that the top-level HandleMark in dump_for_exit (added to replace the previous coverage from a HandleMarkCleaner in JVM_ENTRY) was not in the right place as no Handles were being used there. Removing that HM and fixing up the ensuing failures led to a set of fixes where HM's were missing at the place of Handle usage.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8304147,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i30wkz:",9223372036854775807,b17,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,,,"2023-03-28 15:09;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/13215
Date: 2023-03-28 20:51:46 +0000;;;","2023-04-03 19:06;dukebot;Changeset: a7546b3a
Author:    David Holmes <dholmes@openjdk.org>
Date:      2023-04-04 02:04:47 +0000
URL:       https://git.openjdk.org/jdk/commit/a7546b3a162972e8e19b9b5ceec0e4b8f060f7f8
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
bad sentence break in DateFormat,JDK-8304993,5097201,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,jlu,jjg,jjg,2023-03-27 13:48,2023-04-05 23:17,2023-10-01 09:55,2023-03-30 15:36,20,,,,,,,,21,core-libs,,0,noreg-doc,,,,,,,,,,,,,,,,"The following sentence in DateFormat.Field defeats the break iterator used to find the first sentence of a description.

        /**
         * Constant identifying the time of day indicator
         * (e.g. ""a.m."" or ""p.m."") field.
         */

This leads to the incomplete API seen in the attachment.

Recommend one of:

* change `e.g.` to `for example`
* enclose `e.g.` in `{@literal ...}` (to prevent it being seen as end of sentence
* enclose entire sentence in `{@summary ...}` to force the contents of the first sentence.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"2023-03-27 13:45;jjg;Screen Shot 2023-03-27.png;https://bugs.openjdk.org/secure/attachment/103135/Screen+Shot+2023-03-27.png",,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i30wkb:",9223372036854775807,b17,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6fc9e792,,,,,,,,,"2023-03-28 14:09;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/13216
Date: 2023-03-28 21:01:45 +0000;;;","2023-03-30 15:36;dukebot;Changeset: d8158897
Author:    Justin Lu <jlu@openjdk.org>
Committer: Naoto Sato <naoto@openjdk.org>
Date:      2023-03-30 22:34:42 +0000
URL:       https://git.openjdk.org/jdk/commit/d8158897c3d0dbea46e4f55ad8b501252d88b7e1
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Redundant hyphen in @param results in double-dash in javadocs,JDK-8304991,5097196,Bug,Resolved,JDK,JDK,software,duke,,,P5,Fixed,honkar,jjg,jjg,2023-03-27 13:01,2023-04-03 12:11,2023-10-01 09:55,2023-03-29 09:52,11,17,20,21,,,,,21,client-libs,,0,noreg-doc,sn_140,,,,,,,,,,,,,,,"
../jdk.ref/build/macosx-aarch64/images/docs/api/java.desktop/java/beans/beancontext/BeanContextChildSupport.html:<dd><code>newValue</code> - - The new value of the property</dd>
../jdk.ref/build/macosx-aarch64/images/docs/api/java.desktop/java/awt/font/FontRenderContext.html:<dd><code>aaHint</code> - - one of the text antialiasing rendering hint values
../jdk.ref/build/macosx-aarch64/images/docs/api/java.desktop/java/awt/font/FontRenderContext.html:<dd><code>fmHint</code> - - one of the text fractional rendering hint values defined
../jdk.ref/build/macosx-aarch64/images/docs/api/java.desktop/java/awt/List.AccessibleAWTList.AccessibleAWTListChild.html:<dd><code>d</code> - - The dimension specifying the new size of the object.</dd>
../jdk.ref/build/macosx-aarch64/images/docs/api/java.desktop/javax/swing/JComponent.html:<dd><code>popup</code> - - the popup that will be assigned to this component
../jdk.ref/build/macosx-aarch64/images/docs/api/java.desktop/javax/accessibility/AccessibleContext.html:<dd><code>a</code> - - <code>Accessible</code> to be set as the parent</dd>

",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8304990,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i30wj7:",9223372036854775807,b16,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4b09ce31,,,,,,,,,"2023-03-28 17:11;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/13218
Date: 2023-03-29 00:06:32 +0000;;;","2023-03-29 09:52;dukebot;Changeset: 42df1a99
Author:    Harshitha Onkar <honkar@openjdk.org>
Date:      2023-03-29 16:50:24 +0000
URL:       https://git.openjdk.org/jdk/commit/42df1a99b7dc4203629150792c3f93469b315195
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
unnecessary dash in @param gives double-dash in docs,JDK-8304990,5097195,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,lancea,jjg,jjg,2023-03-27 12:59,2023-04-03 12:11,2023-10-01 09:55,2023-03-29 07:54,21,,,,,,,,21,core-libs,,0,noreg-doc,,,,,,,,,,,,,,,,"
../jdk.ref/build/macosx-aarch64/images/docs/api/java.sql/java/sql/Connection.html:<dd><code>timeout</code> - -             The time in seconds to wait for the database operation
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8304991,JDK-8304989,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i30wiz:",9223372036854775807,b16,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@57fef174,,,,,,,,,"2023-03-28 14:51;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/13217
Date: 2023-03-28 21:48:23 +0000;;;","2023-03-29 07:54;dukebot;Changeset: 2fa09333
Author:    Lance Andersen <lancea@openjdk.org>
Date:      2023-03-29 14:52:11 +0000
URL:       https://git.openjdk.org/jdk/commit/2fa09333ef0ac2dc1e44292f8d45d4571cb22cca
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
unnecessary dash in @param gives double-dash in docs,JDK-8304989,5097194,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,jpai,jjg,jjg,2023-03-27 12:57,2023-04-03 12:09,2023-10-01 09:55,2023-03-28 05:04,21,,,,,,,,21,core-libs,,0,noreg-doc,,,,,,,,,,,,,,,,"../jdk.ref/build/macosx-aarch64/images/docs/api/java.base/java/net/CookieManager.html:<dd><code>requestHeaders</code> - - a Map from request header
../jdk.ref/build/macosx-aarch64/images/docs/api/java.base/java/net/CookieHandler.html:<dd><code>requestHeaders</code> - - a Map from request header
../jdk.ref/build/macosx-aarch64/images/docs/api/java.base/java/net/ResponseCache.html:<dd><code>rqstHeaders</code> - - a Map from request header
../jdk.ref/build/macosx-aarch64/images/docs/api/java.base/java/net/ResponseCache.html:<dd><code>conn</code> - - a URLConnection instance that is used to fetch
../jdk.ref/build/macosx-aarch64/images/docs/api/java.base/java/lang/Enum.html:<dd><code>name</code> - - The name of this enum constant, which is the identifier
../jdk.ref/build/macosx-aarch64/images/docs/api/java.base/java/lang/Enum.html:<dd><code>ordinal</code> - - The ordinal of this enumeration constant (its position
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8304990,JDK-8304988,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i30wir:",9223372036854775807,b16,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@446e124a,,,,,,,,,"2023-03-28 01:11;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/13204
Date: 2023-03-28 08:06:48 +0000;;;","2023-03-28 05:04;dukebot;Changeset: c90699ea
Author:    Jaikiran Pai <jpai@openjdk.org>
Date:      2023-03-28 12:02:27 +0000
URL:       https://git.openjdk.org/jdk/commit/c90699eae7698481c10d10196e6199582f0c10aa
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
unnecessary dash in @param gives double-dash in docs,JDK-8304988,5097193,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,jpai,jjg,jjg,2023-03-27 12:56,2023-04-05 23:17,2023-10-01 09:55,2023-03-30 22:02,21,,,,,,,,21,core-svc,,0,noreg-doc,,,,,,,,,,,,,,,,"
../jdk.ref/build/macosx-aarch64/images/docs/api/java.management/javax/management/relation/RoleUnresolvedList.html:<dd><code>role</code> - - the unresolved role to be added.</dd>
../jdk.ref/build/macosx-aarch64/images/docs/api/java.management/javax/management/relation/RoleUnresolvedList.html:<dd><code>index</code> - - The position in the list where the new
../jdk.ref/build/macosx-aarch64/images/docs/api/java.management/javax/management/relation/RoleUnresolvedList.html:<dd><code>role</code> - - The RoleUnresolved object to be inserted.</dd>
../jdk.ref/build/macosx-aarch64/images/docs/api/java.management/javax/management/relation/RoleUnresolvedList.html:<dd><code>index</code> - - The position specified.</dd>
../jdk.ref/build/macosx-aarch64/images/docs/api/java.management/javax/management/relation/RoleUnresolvedList.html:<dd><code>role</code> - - The value to which the unresolved role element
../jdk.ref/build/macosx-aarch64/images/docs/api/java.management/javax/management/relation/RoleUnresolvedList.html:<dd><code>roleList</code> - - Elements to be inserted into the list
../jdk.ref/build/macosx-aarch64/images/docs/api/java.management/javax/management/relation/RoleUnresolvedList.html:<dd><code>index</code> - - Position at which to insert the first element from the
../jdk.ref/build/macosx-aarch64/images/docs/api/java.management/javax/management/relation/RoleUnresolvedList.html:<dd><code>roleList</code> - - Elements to be inserted into the list.</dd>
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8304989,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i30wij:",9223372036854775807,b17,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@1f101086,,,,,,,,,"2023-03-28 10:54;mwthomps;ILW=LHH=P4;;;","2023-03-29 22:56;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/13239
Date: 2023-03-30 05:51:57 +0000;;;","2023-03-30 22:02;dukebot;Changeset: 787832a5
Author:    Jaikiran Pai <jpai@openjdk.org>
Date:      2023-03-31 04:59:53 +0000
URL:       https://git.openjdk.org/jdk/commit/787832a58677205c9a11ae100dd8a2fbddb30a4a
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,
HttpServer closes connection after processing HEAD after JDK-7026262,JDK-8304963,5097159,Bug,Closed,JDK,JDK,software,duke,,,P3,Fixed,djelinski,dfuchs,dfuchs,2023-03-27 04:57,2023-07-21 07:36,2023-10-01 09:55,2023-03-27 23:15,21,,,,,,,,21,core-libs,,0,regression,tier2,,,,,,,,,,,,,,,"ExchangeValues[method=HEAD, resource=doesNotExist, respCode=404, contentType=text/html; charset=UTF-8]
ExchangeValues[method=UNKNOWN, resource=file.txt, respCode=501, contentType=null]
127.0.0.1 - - [27/Mar/2023:06:22:02 +0000] ""HEAD /doesNotExist HTTP/1.1"" 404 -
Resource requested: could not resolve request URI path
> Connection: Upgrade, HTTP2-Settings
> Http2-settings: AAEAAEAAAAIAAAABAAMAAABkAAQBAAAAAAUAAEAA
> Host: localhost:46191
> User-agent: Java-http-client/21-ea
> Upgrade: h2c
> Content-length: 0
>
< Date: Mon, 27 Mar 2023 06:22:02 GMT
< Content-type: text/html; charset=UTF-8
< Content-length: 135
<
test IdempotencyAndCommutativityTest.testBinarySequences(IdempotencyAndCommutativityTest$ExchangeValues@130b8ab3, IdempotencyAndCommutativityTest$ExchangeValues@66410d8b): failure
java.io.IOException: HTTP/1.1 header parser received no bytes
	at java.net.http/jdk.internal.net.http.HttpClientImpl.send(HttpClientImpl.java:924)
	at java.net.http/jdk.internal.net.http.HttpClientFacade.send(HttpClientFacade.java:133)
	at IdempotencyAndCommutativityTest.executeExchange(IdempotencyAndCommutativityTest.java:124)
	at IdempotencyAndCommutativityTest.testBinarySequences(IdempotencyAndCommutativityTest.java:117)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
	at java.base/java.lang.reflect.Method.invoke(Method.java:578)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:132)
	at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:599)
	at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:174)
	at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
	at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:822)
	at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:147)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
	at org.testng.TestRunner.privateRun(TestRunner.java:764)
	at org.testng.TestRunner.run(TestRunner.java:585)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:384)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:378)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:337)
	at org.testng.SuiteRunner.run(SuiteRunner.java:286)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1218)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1140)
	at org.testng.TestNG.runSuites(TestNG.java:1069)
	at org.testng.TestNG.run(TestNG.java:1037)
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:93)
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:53)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
	at java.base/java.lang.reflect.Method.invoke(Method.java:578)
	at com.sun.javatest.regtest.agent.MainWrapper$MainThread.run(MainWrapper.java:125)
	at java.base/java.lang.Thread.run(Thread.java:1623)
Caused by: java.io.IOException: HTTP/1.1 header parser received no bytes
	at java.net.http/jdk.internal.net.http.common.Utils.wrapWithExtraDetail(Utils.java:388)
	at java.net.http/jdk.internal.net.http.Http1Response$HeadersReader.onReadError(Http1Response.java:574)
	at java.net.http/jdk.internal.net.http.Http1AsyncReceiver.checkForErrors(Http1AsyncReceiver.java:302)
	at java.net.http/jdk.internal.net.http.Http1AsyncReceiver.flush(Http1AsyncReceiver.java:268)
	at java.net.http/jdk.internal.net.http.common.SequentialScheduler$LockingRestartableTask.run(SequentialScheduler.java:205)
	at java.net.http/jdk.internal.net.http.common.SequentialScheduler$CompleteRestartableTask.run(SequentialScheduler.java:149)
	at java.net.http/jdk.internal.net.http.common.SequentialScheduler$SchedulableTask.run(SequentialScheduler.java:230)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1144)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:642)
	... 1 more
Caused by: java.net.SocketException: Connection reset
	at java.base/sun.nio.ch.SocketChannelImpl.throwConnectionReset(SocketChannelImpl.java:401)
	at java.base/sun.nio.ch.SocketChannelImpl.read(SocketChannelImpl.java:434)
	at java.net.http/jdk.internal.net.http.SocketTube.readAvailable(SocketTube.java:1178)
	at java.net.http/jdk.internal.net.http.SocketTube$InternalReadPublisher$InternalReadSubscription.read(SocketTube.java:841)
	at java.net.http/jdk.internal.net.http.SocketTube$SocketFlowTask.run(SocketTube.java:181)
	at java.net.http/jdk.internal.net.http.common.SequentialScheduler$SchedulableTask.run(SequentialScheduler.java:230)
	at java.net.http/jdk.internal.net.http.common.SequentialScheduler.runOrSchedule(SequentialScheduler.java:303)
	at java.net.http/jdk.internal.net.http.common.SequentialScheduler.runOrSchedule(SequentialScheduler.java:256)
	at java.net.http/jdk.internal.net.http.SocketTube$InternalReadPublisher$InternalReadSubscription.signalReadable(SocketTube.java:782)
	at java.net.http/jdk.internal.net.http.SocketTube$InternalReadPublisher$ReadEvent.signalEvent(SocketTube.java:965)
	at java.net.http/jdk.internal.net.http.SocketTube$SocketFlowEvent.handle(SocketTube.java:253)
	at java.net.http/jdk.internal.net.http.HttpClientImpl$SelectorManager.handleEvent(HttpClientImpl.java:1405)
	at java.net.http/jdk.internal.net.http.HttpClientImpl$SelectorManager.lambda$run$3(HttpClientImpl.java:1350)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
	at java.net.http/jdk.internal.net.http.HttpClientImpl$SelectorManager.run(HttpClientImpl.java:1350)
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-7026262,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i30waz:",9223372036854775807,b16,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@446e124a,,,,,,,Verified,,"2023-03-27 06:53;djelinski;Regression introduced in JDK-7026262.
The server now closes connection after every HTTP HEAD request. In the failing test run, the client managed to send another request before the connection was closed.;;;","2023-03-27 11:48;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/13193
Date: 2023-03-27 18:37:58 +0000;;;","2023-03-27 23:15;dukebot;Changeset: 3c4cd50e
Author:    Daniel Jeliński <djelinski@openjdk.org>
Date:      2023-03-28 06:12:30 +0000
URL:       https://git.openjdk.org/jdk/commit/3c4cd50e3cef5905d6c5dacddd6759e118bc50ca
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,
sun/net/www/http/KeepAliveCache/B5045306.java: java.lang.RuntimeException: Failed: Initial Keep Alive Connection is not being reused,JDK-8304962,5097158,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,djelinski,dfuchs,dfuchs,2023-03-27 04:44,2023-06-01 08:50,2023-10-01 09:55,2023-03-28 01:59,21,,,,,,,,21,core-libs,,0,intermittent,noreg-self,tier2,,,,,,,,,,,,,,"The sun/net/www/http/KeepAliveCache/B5045306.java test was observed failing once with:
java.lang.RuntimeException: Failed: Initial Keep Alive Connection is not being reused.

---------System.out:(4/129)----------
http server listen on: 43449
First connection on client port = 35618
Second connection on client port = 35624
server sleeping...
----------System.err:(12/765)----------
java.lang.RuntimeException: Failed: Initial Keep Alive Connection is not being reused
	at B5045306.clientHttpCalls(B5045306.java:112)
	at B5045306.main(B5045306.java:70)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
	at java.base/java.lang.reflect.Method.invoke(Method.java:578)
	at com.sun.javatest.regtest.agent.MainWrapper$MainThread.run(MainWrapper.java:125)
	at java.base/java.lang.Thread.run(Thread.java:1623)
",,,,,,,,,,,JDK-8309222,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8282354,JDK-7026262,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i30war:",9223372036854775807,b16,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@446e124a,,,,,,,,,"2023-03-27 10:20;djelinski;This test had a broken assertion. I fixed the assertion in JDK-7026262, and it turned out that the rest of the test was also broken. Need to check if it's salvageable.;;;","2023-03-27 11:59;djelinski;The test was broken during JDK-8282354 refactoring; the first request was supposed to send a fixed-length response, but since JDK-8282354 it's sending a chunked response.;;;","2023-03-27 13:11;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/13194
Date: 2023-03-27 19:38:01 +0000;;;","2023-03-28 01:59;dukebot;Changeset: cddaf686
Author:    Daniel Jeliński <djelinski@openjdk.org>
Date:      2023-03-28 08:57:02 +0000
URL:       https://git.openjdk.org/jdk/commit/cddaf686e16424e9543be50a48b1c02337e79cf1
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,
Public API in javafx.css.Match should not return private API class PseudoClassState,JDK-8304959,5097155,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,jhendrikx,jhendrikx,jhendrikx,2023-03-27 02:42,2023-06-02 08:30,2023-10-01 09:55,2023-05-31 16:58,9,jfx20,,,,,,,jfx21,javafx,,0,css,release-note=yes,,,,,,,,,,,,,,,"The class Match is public and is part of javafx.css, and exposes a method `getPseudoClasses`.  This returns `PseudoClassState`, which is IMHO incorrect as this is not public API.

Instead, it should do what all other methods part of the public API do when returning the `PseudoClass`-es and return `Set<PseudoClass>`:

For example, SimpleSelector has the same method, but returns `Set<PseudoClass>`, and `Styleable` returns `ObservableSet<PsuedoClass>`.

Matches can't be constructed directly, but are returned from Selectors.

Motivation to fix this:

I've been looking into memory consumption of JavaFX, and PseudoClassState tops RectBounds by a factor of 2 in my heavily styled application. Most of these are not ever modified as they're part of stylesheets, and most of these are duplicates.  There were 27000 instances vs 1200 Nodes.

I think these can be made immutable and reused when used as part of a stylesheet, but the above problem is blocking this as it exposes `PseudoClassState` directly, which is mutable.


",,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8304994,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i30wa3:",9223372036854775807,b20,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@18948797,,,,,,,,,"2023-03-27 06:05;kcr;This was clearly a mistake when the javafx.css API was created as public API in JDK 9. I think we should fix this in JavaFX 21.;;;","2023-03-27 07:27;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jfx/pull/1070
Date: 2023-03-27 13:50:40 +0000;;;","2023-05-31 16:58;dukebot;Changeset: 3fa02ee9
Author:    John Hendrikx <jhendrikx@openjdk.org>
Date:      2023-05-31 23:56:45 +0000
URL:       https://git.openjdk.org/jfx/commit/3fa02ee96a6dadbc20cacbf399a2d65df708eee1
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,
Update KeyStore.getDefaultType​() specification to return pkcs12 as fallback,JDK-8304956,5097152,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,bperez,coffeys,coffeys,2023-03-27 01:45,2023-09-27 18:20,2023-10-01 09:55,2023-09-22 10:33,,,,,,,,,22,security-libs,,0,,,,,,,,,,,,,,,,,"KeyStore.getDefaultType​() still refers to the jks format if the keystore.type security property isn't defined. 

The default keystore type is PKCS12 since JDK 9. Perhaps the ""jks"" reference can be replaced with a ""pkcs12"" reference.

An alternative might be for the JDK to throw an Error if the keystore.type security property isn't defined ?",,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8316043,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9,,,,,,,,"0|i30w9f:",9223372036854775807,b17,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@2ec284e3,,,,,,,,,"2023-03-28 09:55;mullan;I think we should change it to return ""pkcs12"" if the keystore.type property is not defined.;;;","2023-09-07 11:18;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/15625
Date: 2023-09-07 18:12:28 +0000;;;","2023-09-22 10:33;dukebot;Changeset: 53516aed
Author:    Ben Perez <ben.perez@oracle.com>
Committer: Sean Mullan <mullan@openjdk.org>
Date:      2023-09-22 17:31:57 +0000
URL:       https://git.openjdk.org/jdk/commit/53516aed38c63df6e9722d65ce54acddd9735636
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,
SegmentedCodeCache fails when using large pages,JDK-8304954,5097150,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,dfenacci,thartmann,thartmann,2023-03-27 00:48,2023-09-15 07:18,2023-10-01 09:55,2023-07-28 02:11,11,17,21,,,,,,22,hotspot,,0,jdk17u-fix-request,jdk17u-fix-yes,jdk21u-fix-request,jdk21u-fix-SQE-ok,jdk21u-fix-yes,oracle-triage-21,performance,starter,,,,,,,,,"When large pages are enabled, the VM tries to use at least one page for all code cache segments which fails if there is not enough space:

$ java -XX:+UseLargePages -XX:+SegmentedCodeCache -XX:InitialCodeCacheSize=2g -XX:ReservedCodeCacheSize=2g -XX:LargePageSizeInBytes=1g -Xlog:pagesize*=debug -version
[0.000s][debug][pagesize] Large Page sizes: 2M, 1G
[0.000s][info ][pagesize] Overriding default large page size (2M) using LargePageSizeInBytes: 1G
[0.001s][info ][pagesize] Usable page sizes: 4k, 2M, 1G
[0.003s][debug][pagesize] Commit special mapping: 0x00007fefc0000000, size=2G, page size=1G
[0.003s][info ][pagesize] CodeHeap 'non-nmethods':  min=1G max=6M base=0x00007fefffc00000 page_size=1G size=6M
Error occurred during initialization of VM
Could not reserve enough space in CodeHeap 'non-nmethods' (6144K)

We should not exit them VM but fall back to a smaller page size for the failing segment.

Thanks to Scott Oaks for reporting.",,,,,,,,,,,JDK-8313958,JDK-8314995,JDK-8315198,JDK-8316365,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i30w8z:",9223372036854775807,b09,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2023-03-27 00:53;thartmann;ILW = VM exits when failing to reserve memory for code cache segment, with large pages and a large code cache size, disable segmented code cache or increase reserved code cache size = HLL = P4 ;;;","2023-07-06 01:42;thartmann;Raising priority because this was reported again.;;;","2023-07-20 05:24;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/14903
Date: 2023-07-17 13:34:55 +0000;;;","2023-07-28 02:11;dukebot;Changeset: cad6114e
Author:    Damon Fenacci <dfenacci@openjdk.org>
Date:      2023-07-28 09:09:48 +0000
URL:       https://git.openjdk.org/jdk/commit/cad6114e1c69bfebe5f7892c3e105b4c70d04398
;;;","2023-08-04 03:18;thartmann;Fix Request (21u):
Fixes support for large pages in the code cache. The fix is low risk, applies cleanly and includes a regression test. Tested with tier 1 - 3.;;;","2023-08-04 03:25;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk21u/pull/41
Date: 2023-08-04 10:18:48 +0000;;;","2023-08-04 14:30;kvn;[~thartmann] The fix request and PR says JDK 21u but label is jdk21-fix-request

;;;","2023-08-06 23:49;thartmann;Thanks Vladimir, corrected.;;;","2023-09-13 05:28;goetz;Fix request [17u]

I backport this for parity with 17.0.10-oracle.
Medium risk as fuddling with memory.
Trivial resolve needed.
Test passes.;;;","2023-09-13 05:37;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/1734
Date: 2023-09-13 12:28:10 +0000;;;",,,,,,,,,,,,,,,,,,,,,
[vectorapi] C2 crashes when expanding VectorBox ,JDK-8304948,5097145,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,eliu,eliu,eliu,2023-03-26 23:55,2023-07-10 00:13,2023-10-01 09:55,2023-05-04 17:37,18,20,21,,,,,,21,hotspot,,0,c2,oracle-triage-11,oracle-triage-17,oracle-triage-21,vectorapi,,,,,,,,,,,," import jdk.incubator.vector.IntVector;
 import jdk.incubator.vector.VectorMask;


public class Test {
     private static int ARR_LEN = 1024;
     private static final int NUM_ITER = 2000;

     public static Object test() {
         boolean[] arr = new boolean[ARR_LEN];
         VectorMask<Integer> vm = VectorMask.fromArray(IntVector.SPECIES_128, arr, 0);

         for (int ic = 0; ic < NUM_ITER; ic++) {
             for (int i = 0; i < ARR_LEN; i += 16){
                 vm = vm.and(vm);
             }
         }
         return vm;
     }


     public static void main(String[] args) {
         for (int i = 0; i < NUM_ITER; i++) {
             test();
         }
         System.out.println(""PASS"");
     }
 }


Segmentation fault (core dumped) 

This bug can be reproduced both on x86 and AArch64.
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8311144,JDK-8282850,,,,,,,,,,,,,,,,,,,,,,,generic,,,,,,,,18,,generic,,,,,,"0|i30w7v:",9223372036854775807,b22,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2023-03-27 00:18;thartmann;[~eliu], could you please attach the hs_err file?;;;","2023-03-27 01:07;eliu;[~thartmann], I didn't get any log file from this bug. It can be reproduced easily by the example shown above. From my rough view,  the expanding process fall into a recursive call (https://github.com/openjdk/jdk/blob/a5ffa079a0d6107be652bc026f5c91b7dcd791f8/src/hotspot/share/opto/vector.cpp#L316) until dead.;;;","2023-03-27 01:50;thartmann;Okay, thanks for the details!

ILW = SIGSEGV during C2 compilation due to endless recursion, reproducible with vector api test, disable compilation of affected method = HLM = P3;;;","2023-03-27 18:35;eliu;The test case above generates part of the IR graph like below: 
   ```
         VectorBoxAllocate
               |
               |
      Region Proj
          |       /
          |     /
         Phi <-------> Phi (Two Phi nodes use each other)
          |
          |
          |    VectorLoadMask
          |     /
       VectorBox
          |
         ...

    ```
in which Two Phi nodes use each other constructed a circle.
When expanding VectorBoxNode, C2 traverses all its inputs for expanding VectorBoxAllocateNode. For the Phi node input, it will traverse all inputs of Phi recursively. In this case, expand_vbox_helper applies on these two Phi nodes alternatively. 
;;;","2023-04-17 01:50;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/13489
Date: 2023-04-17 08:43:28 +0000;;;","2023-05-04 17:37;dukebot;Changeset: 46df171d
Author:    Eric Liu <eliu@openjdk.org>
Date:      2023-05-05 00:34:12 +0000
URL:       https://git.openjdk.org/jdk/commit/46df171d537c0d9cb1df2d7915cc745a7f524557
;;;",,,,,,,,,,,,,,,,,,,,,,,,,
BufferedFieldBuilder.Model missing writeTo(DirectClassBuilder),JDK-8304937,5097133,Bug,Closed,JDK,JDK,software,duke,,,P4,Fixed,liach,liach,liach,2023-03-26 12:19,2023-08-08 11:46,2023-10-01 09:55,2023-05-04 06:25,,,,,,,,,21,other-libs,,0,classfile-api,,,,,,,,,,,,,,,,"This affects creation of classes: for example, I was using a class transform that renames one class, chained with MethodParameters and/or Signature attributes dropping transforms. It ends up with this stack trace:

    java.lang.UnsupportedOperationException
            at java.base/jdk.internal.classfile.impl.AbstractElement.writeTo(AbstractElement.java:35)
            at java.base/jdk.internal.classfile.impl.DirectClassBuilder.with(DirectClassBuilder.java:76)
            at java.base/jdk.internal.classfile.impl.DirectClassBuilder.with(DirectClassBuilder.java:49)
            at java.base/jdk.internal.classfile.impl.ChainedClassBuilder.withField(ChainedClassBuilder.java:63)
            at java.base/jdk.internal.classfile.ClassBuilder.withField(ClassBuilder.java:182)
            at java.base/jdk.internal.classfile.components.ClassRemapper$ClassRemapperImpl.accept(ClassRemapper.java:176)
            at java.base/jdk.internal.classfile.components.ClassRemapper$ClassRemapperImpl.accept(ClassRemapper.java:170)
            at java.base/jdk.internal.classfile.ClassTransform.lambda$resolve$3(ClassTransform.java:166)
            at java.base/java.lang.Iterable.forEach(Iterable.java:75)
            at java.base/jdk.internal.classfile.impl.ClassImpl.forEachElement(ClassImpl.java:164)
            at java.base/jdk.internal.classfile.ClassfileBuilder.transform(ClassfileBuilder.java:86)
            at java.base/jdk.internal.classfile.impl.ClassImpl$2.accept(ClassImpl.java:181)
            at java.base/jdk.internal.classfile.impl.ClassImpl$2.accept(ClassImpl.java:176)
            at java.base/jdk.internal.classfile.Classfile.build(Classfile.java:217)
            at java.base/jdk.internal.classfile.impl.ClassImpl.transform(ClassImpl.java:175)

Looks like an accidental missing override.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i30w57:",9223372036854775807,b22,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@79d0c3d2,,,,,,,Verified,,"2023-03-26 13:42;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/13187
Date: 2023-03-26 20:35:20 +0000;;;","2023-05-04 06:25;dukebot;Changeset: dc4096ce
Author:    Chen Liang <liach@openjdk.org>
Committer: Adam Sotona <asotona@openjdk.org>
Date:      2023-05-04 13:24:08 +0000
URL:       https://git.openjdk.org/jdk/commit/dc4096ce136c867e0806070a2d7c8b4efef5294c
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
BitSet (used for CSS pseudo class states) listener management is incorrect,JDK-8304933,5097126,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,jhendrikx,jhendrikx,jhendrikx,2023-03-25 22:39,2023-04-17 17:44,2023-10-01 09:55,2023-04-10 16:46,jfx20,,,,,,,,jfx21,javafx,,0,css,,,,,,,,,,,,,,,,"BitSet uses the SetListenerHelper abstraction to prevent allocating the listener arrays.

When removing listeners, the newly returned listener helper (which may be different from the one called) is not reassigned. This effectively means that removing the listener does not happen.

",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8305867,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i30w3n:",9223372036854775807,b13,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@18948797,,,,,,,,,"2023-03-27 07:32;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jfx/pull/1071
Date: 2023-03-27 14:24:42 +0000;;;","2023-04-10 16:46;dukebot;Changeset: 53959421
Author:    John Hendrikx <jhendrikx@openjdk.org>
Date:      2023-04-10 23:44:22 +0000
URL:       https://git.openjdk.org/jfx/commit/5395942174073f25a7fa8f6ccf2fb4dc6604133a
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
MethodTypeDescImpl can be mutated by argument passed to MethodTypeDesc.of,JDK-8304932,5097125,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,liach,liach,liach,2023-03-25 18:44,2023-06-12 20:49,2023-10-01 09:55,2023-06-06 08:59,20,21,,,,,,,21,core-libs,,0,,,,,,,,,,,,,,,,,"If a malicious actor holds a reference to the argument array passed to MethodTypeDesc.of factory, it can mutate a supposingly immutable MethodTypeDesc and create an illegal MethodTypeDesc.

    jshell> import java.lang.constant.*;
    
    jshell> import java.lang.invoke.*;
    
    jshell> import static java.lang.constant.ConstantDescs.*;
    
    jshell> ClassDesc[] args = { CD_int, CD_Long};
    args ==> ClassDesc[2] { PrimitiveClassDesc[int], ClassDesc[Long] }
    
    jshell> var mtd = MethodTypeDesc.of(CD_void, args);
    mtd ==> MethodTypeDesc[(int,Long)void]
    
    jshell> mtd
    mtd ==> MethodTypeDesc[(int,Long)void]
    
    jshell> args[1] = CD_void
    $7 ==> PrimitiveClassDesc[void]
    
    jshell> mtd
    mtd ==> MethodTypeDesc[(int,void)void]

I recommend changing MethodTypeDescImpl to be list-backed than array-backed to reduce allocations on `parameterList` calls too.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8309413,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i30w3f:",9223372036854775807,b26,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4c088d55,,,,,,,,,"2023-05-26 12:40;mchung;A simple patch would be:

```
diff --git a/src/java.base/share/classes/java/lang/constant/MethodTypeDesc.java b/src/java.base/share/classes/java/lang/constant/MethodTypeDesc.java
index 738c4d68a43..ed23887c9ef 100644
--- a/src/java.base/share/classes/java/lang/constant/MethodTypeDesc.java
+++ b/src/java.base/share/classes/java/lang/constant/MethodTypeDesc.java
@@ -95,7 +95,7 @@ public sealed interface MethodTypeDesc
      * {@link ClassDesc} for {@code void}
      */
     static MethodTypeDesc of(ClassDesc returnDesc, ClassDesc... paramDescs) {
-        return new MethodTypeDescImpl(returnDesc, paramDescs);
+        return new MethodTypeDescImpl(returnDesc, paramDescs.clone());
     }
 
     /**
diff --git a/src/java.base/share/classes/java/lang/constant/MethodTypeDescImpl.java b/src/java.base/share/classes/java/lang/constant/MethodTypeDescImpl.java
index 4341c3fb56f..e9231b11d07 100644
--- a/src/java.base/share/classes/java/lang/constant/MethodTypeDescImpl.java
+++ b/src/java.base/share/classes/java/lang/constant/MethodTypeDescImpl.java
@@ -41,7 +41,7 @@ import static java.util.Objects.requireNonNull;
  */
 final class MethodTypeDescImpl implements MethodTypeDesc {
     private final ClassDesc returnType;
-    private final ClassDesc[] argTypes;
+    private final ClassDesc[] argTypes;     // trusted array
 
     /**
      * Constructs a {@linkplain MethodTypeDesc} with the specified return type
@@ -102,14 +102,14 @@ final class MethodTypeDescImpl implements MethodTypeDesc {
 
     @Override
     public MethodTypeDesc changeReturnType(ClassDesc returnType) {
-        return MethodTypeDesc.of(returnType, argTypes);
+        return new MethodTypeDescImpl(returnType, argTypes);
     }
 
     @Override
     public MethodTypeDesc changeParameterType(int index, ClassDesc paramType) {
         ClassDesc[] newArgs = argTypes.clone();
         newArgs[index] = paramType;
-        return MethodTypeDesc.of(returnType, newArgs);
+        return new MethodTypeDescImpl(returnType, newArgs);
     }
 
     @Override
@@ -120,7 +120,7 @@ final class MethodTypeDescImpl implements MethodTypeDesc {
         ClassDesc[] newArgs = new ClassDesc[argTypes.length - (end - start)];
         System.arraycopy(argTypes, 0, newArgs, 0, start);
         System.arraycopy(argTypes, end, newArgs, start, argTypes.length - end);
-        return MethodTypeDesc.of(returnType, newArgs);
+        return new MethodTypeDescImpl(returnType, newArgs);
     }
 
     @Override
@@ -131,7 +131,7 @@ final class MethodTypeDescImpl implements MethodTypeDesc {
         System.arraycopy(argTypes, 0, newArgs, 0, pos);
         System.arraycopy(paramTypes, 0, newArgs, pos, paramTypes.length);
         System.arraycopy(argTypes, pos, newArgs, pos+paramTypes.length, argTypes.length - pos);
-        return MethodTypeDesc.of(returnType, newArgs);
+        return new MethodTypeDescImpl(returnType, newArgs);
     }
```;;;","2023-06-04 16:50;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/13186
Date: 2023-03-26 05:23:54 +0000;;;","2023-06-06 08:59;dukebot;Changeset: 38cef2ad
Author:    Chen Liang <liach@openjdk.org>
Committer: Mandy Chung <mchung@openjdk.org>
Date:      2023-06-06 15:56:36 +0000
URL:       https://git.openjdk.org/jdk/commit/38cef2adbd956ac1e953ea7a7e7952fe093a9872
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,
vm/concepts/methods/methods001/methods00101m1/methods00101m1 failures with already pending exception,JDK-8304931,5097124,Bug,Closed,JDK,JDK,software,duke,,,P2,Fixed,matsaave,kbarrett,kbarrett,2023-03-25 17:11,2023-06-29 14:33,2023-10-01 09:55,2023-03-27 15:16,21,,,,,,,,21,hotspot,,0,regression,tier3,tier5,tier6,tier8,,,,,,,,,,,,"#  Internal Error (/opt/mach5/mesos/work_dir/slaves/741e9afd-8c02-45c3-b2e2-9db1450d0832-S24665/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/19ada292-095c-4a96-88e4-8469ef3802b1/runs/bbbae971-d40c-4e18-8cd5-ce41dd8a279d/workspace/open/src/hotspot/share/utilities/exceptions.cpp:366), pid=2573427, tid=2573910
#  assert(incoming_exception.is_null()) failed: Pending exception while throwing java/lang/ClassFormatError Duplicate method name ""proc2"" with signature ""(I)V"" in class file javasoft/sqe/tests/vm/concepts/methods/methods001/methods00101m1/methods00101m11n
#
# JRE version: Java(TM) SE Runtime Environment (21.0+16) (fastdebug build 21-ea+16-LTS-1267)
# Java VM: Java HotSpot(TM) 64-Bit Server VM (fastdebug 21-ea+16-LTS-1267, mixed mode, sharing, tiered, compressed oops, compressed class ptrs, parallel gc, linux-amd64)
# Problematic frame:
# V  [libjvm.so+0xd43241]  Exceptions::new_exception(JavaThread*, Symbol*, char const*, Handle, Handle, Handle, Exceptions::ExceptionMsgToUtf8Mode)+0x221

This appears to be caused by JDK-8304069. That change moved some calls to classfile_parse_error from the end of the calling function into the loop where the detection is occurring. But the calls still pass THREAD as the final argument. That will record a pending exception, but not terminate the loop. So if there are multiple problems in the class file, instead of throwing an exception reporting the first one, we get this pending exception crash. I think the in-loop calls to classfile_parse_error should be be using CHECK as the last argument rather than THREAD.
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8304069,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i30w37:",9223372036854775807,b16,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,Verified,,"2023-03-26 14:21;dholmes;I agree with the analysis. The old code would detect an error and break the loop, then call classfile_parse_error with THREAD, then return. The new code calls classfile_parse_error in place in the loop and will just continue!;;;","2023-03-27 09:07;dcubed;Since this is a regression, I'm bumping it from P3 -> P2.
We normally start regressions at P2, but the triage team
may adjust it back down as part of their analysis.;;;","2023-03-27 14:19;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/13195
Date: 2023-03-27 19:51:27 +0000;;;","2023-03-27 15:15;dukebot;Changeset: 6aec6f3a
Author:    Matias Saavedra Silva <matsaave@openjdk.org>
Date:      2023-03-27 22:12:36 +0000
URL:       https://git.openjdk.org/jdk/commit/6aec6f3a842ead30b26cd31dc57a2ab268f67875
;;;","2023-03-28 06:47;dcubed;The fix for this bug is integrated in jdk-21+16-1290.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,
Update java/net/httpclient/BasicAuthTest.java to check basic auth over HTTP/2,JDK-8304927,5097120,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,dfuchs,dfuchs,dfuchs,2023-03-25 09:45,2023-04-03 12:10,2023-10-01 09:55,2023-03-28 11:59,,,,,,,,,21,core-libs,,0,httpclient,noreg-self,,,,,,,,,,,,,,,"The BasicAuthTest only tests basic authentication with HTTP/1.1.
It could be upgraded to also test against HTTP/2 ",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i30w2b:",9223372036854775807,b16,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@446e124a,,,,,,,,,"2023-03-27 03:01;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/13189
Date: 2023-03-27 09:51:54 +0000;;;","2023-03-28 11:59;dukebot;Changeset: 50a995f0
Author:    Daniel Fuchs <dfuchs@openjdk.org>
Date:      2023-03-28 18:58:29 +0000
URL:       https://git.openjdk.org/jdk/commit/50a995f03a0cc5c342929a0f48c43fd04fdf0b0d
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
[testbug] Skip failing tests on Linux,JDK-8304924,5097118,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,kcr,kcr,kcr,2023-03-25 07:13,2023-04-06 05:13,2023-10-01 09:55,2023-03-27 10:37,jfx21,,,,,,,,jfx21,javafx,,0,noreg-self,sn_140,testbug,,,,,,,,,,,,,,"Skip the following failing headful tests on Linux until they are fixed:

SliderTooltipNPETest (JDK-8304922)
PointerEventTest (JDK-8304923)
TabPaneDragPolicyTest reorder tests (JDK-8213136)
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8213136,JDK-8304923,JDK-8304922,,,,,,,,,,,,,,,,,,,,,,,,,,,,,linux,,,,,,"0|i30w1v:",9223372036854775807,b11,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@1d1c7815,,,,,,,,,"2023-03-25 08:54;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jfx/pull/1068
Date: 2023-03-25 15:50:21 +0000;;;","2023-03-27 10:37;dukebot;Changeset: 2a5bf464
Author:    Kevin Rushforth <kcr@openjdk.org>
Date:      2023-03-27 17:36:30 +0000
URL:       https://git.openjdk.org/jfx/commit/2a5bf4647ca19f67eb56f2459f0a5acee6c05146
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
[testbug] SliderTooltipNPETest fails on Linux,JDK-8304922,5097116,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,kpk,kcr,kcr,2023-03-25 07:01,2023-06-23 14:42,2023-10-01 09:55,2023-06-13 06:36,jfx21,,,,,,,,jfx21,javafx,,0,noreg-self,sn_142,test_sprint,testbug,,,,,,,,,,,,,"SliderTooltipNPETest fails consistently on Linux.

$ gradle -PFULL_TEST=true -PUSE_ROBOT=true cleanTest :systemTests:test --tests SliderTooltipNPETest

SliderTooltipNPETest > testSliderTooltipNPE FAILED
    java.lang.AssertionError: Timeout: Timeout waiting for tooltip to display
        at org.junit.Assert.fail(Assert.java:89)
        at org.junit.Assert.assertTrue(Assert.java:42)
        at test.util.Util.waitForLatch(Util.java:397)
        at test.robot.javafx.scene.SliderTooltipNPETest.dragSliderAfterTooltipDisplayed(SliderTooltipNPETest.java:94)
        at test.robot.javafx.scene.SliderTooltipNPETest.testSliderTooltipNPE(SliderTooltipNPETest.java:76)
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8304924,,,,,,,,,,,,,,,,,,,,,,,,,,linux,,,,,,"0|i30w1f:",9223372036854775807,b22,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@67282485,,,,,,,,,"2023-03-25 07:16;kcr;We will skip this test on Linux as part of JDK-8304924. ;;;","2023-04-28 05:12;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jfx/pull/1119
Date: 2023-04-28 12:06:51 +0000;;;","2023-06-13 06:36;dukebot;Changeset: 72be85ec
Author:    Karthik P K <kpk@openjdk.org>
Date:      2023-06-13 13:33:35 +0000
URL:       https://git.openjdk.org/jfx/commit/72be85ec8621ecf93c48305ffc833803d9a4558f
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,
Fix Copyright Headers for JLink Source Files,JDK-8304898,5097092,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,igraves,igraves,igraves,2023-03-24 10:54,2023-03-31 23:22,2023-10-01 09:55,2023-03-24 11:34,,,,,,,,,21,tools,,0,,,,,,,,,,,,,,,,,"Update the copyright headers for source files missed in JDK-8304691.
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8304691,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i30vw3:",9223372036854775807,b16,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@3da653bd,,,,,,,,,"2023-03-24 11:04;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/13181
Date: 2023-03-24 17:56:03 +0000;;;","2023-03-24 11:34;dukebot;Changeset: 3f59b75b
Author:    Ian Graves <igraves@openjdk.org>
Date:      2023-03-24 18:32:27 +0000
URL:       https://git.openjdk.org/jdk/commit/3f59b75bd8a858d2327ca975a57079747ff11b8e
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Record Deconstruction causes bytecode error,JDK-8304883,5097075,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,jlahoda,abimpoudis,abimpoudis,2023-03-24 08:50,2023-04-10 10:25,2023-10-01 09:55,2023-04-05 03:30,,,,,,,,,21,tools,,0,,,,,,,,,,,,,,,,,"public class Test {
    record Foo(Object first, Object second) {}

    public static void main(String[] args) {
        Foo myfoo = new Foo(42, ""millis"");

        switch (myfoo) {
            case Foo(Integer d, String s)  -> System.out.println(""got integer and string: "" + d + "", "" + s);
            case Foo(Object fs, Object sc) -> System.out.println(""values: "" + fs + "", "" + sc);
        }
    }
}",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i30vsb:",9223372036854775807,b17,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4dca67bd,,,,,,,,,"2023-03-27 06:53;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/13192
Date: 2023-03-27 13:46:16 +0000;;;","2023-04-05 03:30;dukebot;Changeset: 2aec910e
Author:    Jan Lahoda <jlahoda@openjdk.org>
Date:      2023-04-05 10:29:22 +0000
URL:       https://git.openjdk.org/jdk/commit/2aec910ea4bcd3a253a76a70323f9bebb49d8e91
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
[PPC64] VerifyOops code in C1 doesn't work with ZGC,JDK-8304880,5097070,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,mdoerr,mdoerr,mdoerr,2023-03-24 06:23,2023-04-03 12:10,2023-10-01 09:55,2023-03-28 08:47,17.0.2,21,,,,,,,21,hotspot,,0,jdk17u-fix-request,jdk17u-fix-yes,,,,,,,,,,,,,,,"Running the VM with ""-XX:+UseZGC -XX:+VerifyOops -XX:TieredStopAtLevel=1 -Xcomp"" causes a fatal error: c1_LIRAssembler_ppc.cpp:824. oop: 0x0001000000600e80
The oop is checked without load barrier. ZHeap::print_location reports it as ""is a bad oop"" in hs_err files.",,,,,,,,,,,JDK-8305382,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,ppc,,,,,,,,,,,,,,,,"0|i30vr7:",9223372036854775807,b16,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6b00f96c,,,,,,,,,"2023-03-24 08:33;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/13175
Date: 2023-03-24 15:27:53 +0000;;;","2023-03-28 08:31;mdoerr;17u is also affected. Issue can be observed by
jdk/bin/java -XX:+UseZGC -XX:+VerifyOops -XX:TieredStopAtLevel=1 -Xcomp -XX:+FullGCALot -XX:FullGCALotInterval=1000 -Xlog:gc=debug -version;;;","2023-03-28 08:47;dukebot;Changeset: 695683b5
Author:    Martin Doerr <mdoerr@openjdk.org>
Date:      2023-03-28 15:45:34 +0000
URL:       https://git.openjdk.org/jdk/commit/695683b5b15c69a56fe7ee1a93482fe7c3530ca8
;;;","2023-03-28 08:58;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/1225
Date: 2023-03-28 15:52:57 +0000;;;","2023-03-30 02:40;mdoerr;Fix Request (17u):
As mentioned above, 17u is affected. VerifyOops is helpful for bug chasing, so I'd like to have the fix backported. It doesn't apply cleanly, but the fix is trivial and has been reviewed.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,
Use default visibility for static library builds,JDK-8304871,5097059,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,sgehwolf,sgehwolf,sgehwolf,2023-03-24 03:54,2023-04-27 06:58,2023-10-01 09:55,2023-03-30 01:03,17.0.6,20,21,,,,,,21,infrastructure,,0,graal,jdk17u-critical-request,jdk17u-critical-yes,jdk20u-fix-request,jdk20u-fix-SQE-ok-next,jdk20u-fix-yes,jni,,,,,,,,,,"JDK-8239563 introduced a change to the JDK which allows one to override the visibility of JNI exported symbols. However, with a recent GraalVM change[1], this default no longer works for some configurations. We propose to also use the same visibility of regular shared libraries from OpenJDK in the static libs build. Visibility can then further be reduced by using linker version scripts.

This change only affects the static library build.

[1] https://github.com/oracle/graal/issues/4921",,,,,,,,,,,JDK-8307019,JDK-8305537,JDK-8305775,JDK-8305449,,,,,,,,,,,,,,,,,,,,,,JDK-8239563,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,linux,,,,,,"0|i30vor:",9223372036854775807,b17,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@429c566,,,,,,,,,"2023-03-24 08:41;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/13177
Date: 2023-03-24 15:31:32 +0000;;;","2023-03-27 21:39;dholmes;JDK-8239563 was also done to support Graal, and this change is now undoing that. Do the Graal folk who want this understand it will restore the problem that JDK-8239563 fixed?;;;","2023-03-28 01:15;sgehwolf;[~dholmes] As far as I understand it, yes. This brings OpenJDK in line with Oracle Labs JDK. I.e. less divergence which seems a good thing. See:

Labs JDK 17: https://github.com/graalvm/labs-openjdk-17/commit/f5100f05d2ffd26d250b85dc732802eaa0ef8e85
Labs JDK 20: https://github.com/graalvm/labs-openjdk-20/commit/be6b24f64620be29af55146d71b2f2a661950c3a;;;","2023-03-28 17:30;dholmes;I'd like confirmation that whomever made that change was aware of the impact. [~dnsimon] can you comment please?;;;","2023-03-29 00:16;dnsimon;[~cwimmer] and [~apejovic] can one of you please comment on this. I'm not so familiar with the intricacies of symbol visibility and Native Image. ;;;","2023-03-29 06:07;apejovic;[~dholmes] Yes, we were aware of the impact. We no longer rely on symbol hiding to prevent symbols from being exported, but on the linker version script.

[~sgehwolf] Maybe I'm missing something, but unless there's something wrong with the JNIEXPORT definition in jni_md.h, why not just remove the redefinition as done in the labsjdk?;;;","2023-03-29 06:58;sgehwolf;[~apejovic] That was just a suggestion from [~dholmes] to be more explicit. See: https://github.com/openjdk/jdk/pull/13177#discussion_r1148797430 I have no preference either way.;;;","2023-03-29 07:02;sgehwolf;[~dholmes] Do you think we can land this change? Any more concerns?;;;","2023-03-29 08:59;apejovic;[~sgehwolf] Thanks, I missed that.

[~dholmes] I think it might be better to remove the override completely since it is no longer needed as the existing definition in jni_md.h works just fine.;;;","2023-03-29 15:47;dholmes;[~apejovic] Thanks for confirming you are okay with this change.

I have a mild preference for explicit defaults but I will leave it to [~sgehwolf] to choose.;;;","2023-03-30 01:03;dukebot;Changeset: f0dba218
Author:    Severin Gehwolf <sgehwolf@openjdk.org>
Date:      2023-03-30 08:01:36 +0000
URL:       https://git.openjdk.org/jdk/commit/f0dba218ac00c0c577400b4d864ba79a9938aef7
;;;","2023-03-30 01:28;sgehwolf;Yes, being explicit about it seems a bit clearer and is less dependent on what the shared libraries do.;;;","2023-03-30 03:15;sgehwolf;Fix Request (20u):

Please approve backporting this to JDK 20u. It fixes an issue for some programs using AWT for GraalVM based builds (who use OpenJDK 20 as base). Patch only affects the static library build and should therefore be very little risk. Tested with manual reproducer. Clean backport from JDK 21.;;;","2023-03-30 03:19;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk20u/pull/45
Date: 2023-03-30 10:12:18 +0000;;;","2023-03-30 05:10;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u/pull/367
Date: 2023-03-30 12:06:05 +0000;;;","2023-03-30 05:20;sgehwolf;Critical fix request (OpenJDK 17u):

Please approve getting this backported to JDK 17.0.7 (April). It's a build fix that only touches the static library build of OpenJDK. The regular OpenJDK build stays untouched. It fixes an issue for native image apps using AWT and using plain OpenJDK (over labsjdk). It would help the upcoming Mandrel release based on JDK 17 (Also coming in April). Risk should be very low since it touches only the 'make static-libs' and friends build path not generally used (outside graal). JDK 21 patch applies clean.;;;","2023-04-03 04:52;goetz;17u critical approval

I ran it through all our nightly test of 17u.
Looks good.;;;","2023-04-03 05:16;sgehwolf;Thanks, Goetz!;;;",,,,,,,,,,,,,
Explicitly disable dtrace for ppc builds,JDK-8304867,5097056,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,mbaesken,mbaesken,mbaesken,2023-03-24 03:22,2023-07-04 00:09,2023-10-01 09:55,2023-03-28 23:57,17,21,,,,,,,21,infrastructure,,0,jdk11u-fix-request,jdk11u-fix-yes,jdk17u-fix-request,jdk17u-fix-yes,,,,,,,,,,,,,"Currently the support for JVM feature  dtrace is not implemented in the HS codebase on ppc64, so we should disable it in the jvm-features  make detection as well.  Otherwise we could run into building with dtrace feature support  if e.g. the tool and headers are available on the build machine.",,,,,,,,,,,JDK-8311262,JDK-8307916,,,,,,,,,,,,,,,,,,,,,JDK-8291583,,,,,,,,,,,,,,,,,,,,,,,,ppc,,,,,,,,,,,,,,,,"0|i30vo3:",9223372036854775807,b16,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@429c566,,,,,,,,,"2023-03-24 04:46;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/13173
Date: 2023-03-24 11:40:01 +0000;;;","2023-03-28 23:57;dukebot;Changeset: ff368d50
Author:    Matthias Baesken <mbaesken@openjdk.org>
Date:      2023-03-29 06:55:51 +0000
URL:       https://git.openjdk.org/jdk/commit/ff368d504e9101e11c7182185f56255f429d31e3
;;;","2023-05-09 06:38;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/1338
Date: 2023-05-09 13:33:38 +0000;;;","2023-05-09 06:39;mbaesken;jdk17u backport request
I would like to have this change in jdk17u-dev as well because the issue is present there too. The patch is low risk, almost clean (copyright year is different and maybe some changes in the stride).;;;","2023-07-03 02:03;mbaesken;jdk11u backport request
I would like to have this change in jdk11u-dev as well because the issue is present there too. The patch is low risk, but needs a bit adjustment and goes (in 11) into another file hotspot.m4 .;;;","2023-07-03 02:07;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk11u-dev/pull/2017
Date: 2023-07-03 09:01:03 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,,
Update PCSC-Lite for Suse Linux to 1.9.9 and fix incomplete license wording,JDK-8304845,5097028,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,valeriep,manc,manc,2023-03-23 16:31,2023-07-04 23:29,2023-10-01 09:55,2023-04-25 10:49,11,17,19,20,,,,,21,security-libs,,0,google-interest,jdk17u-fix-request,jdk17u-fix-yes,noreg-other,,,,,,,,,,,,,"Our internal license compliance checker tool complains an issue with src/java.smartcardio/unix/native/libj2pcsc/MUSCLE/COPYING. The COPYING file mentions:
> Some files are under GNU GPL v3 or any later version
> - doc/example/pcsc_demo.c
> - the files in src/spy/
> - the files in UnitaryTests/
> ...
>    You should have received a copy of the GNU General Public License along with this program.  If not, see <http://www.gnu.org/licenses/>.

The PCSC lite source from https://pcsclite.apdu.fr/ does include a GPL-3.0.txt for the full GPLv3 license. However, the JDK source does not contain the full GPLv3 license anywhere.

Since the relevant files doc/example/pcsc_demo.c, src/spy/, UnitaryTests/ are NOT included with the MUSCLE library in the JDK, could we remove this paragraph about GPLv3 from the COPYING file?

Similarly src/auth.c and src/auth.h, src/simclist.c and src/simclist are not included in the JDK, but the COPYING file has paragraphs about them. Could we remove those paragraphs as well?

Note that JDK-8226607 added the relevant paragraphs.",,,,,,,,,,,JDK-8311401,JDK-8310636,JDK-8307203,JDK-8307201,JDK-8307202,,,,,,,,,,,JDK-8215093,,,,,,,JDK-8305624,,,JDK-8226607,,,,,,,,,,,,,,,,,,,,,,,,,,,,,13,,,,,,,,"0|i30vhv:",9223372036854775807,b20,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@21bb4914,,,,,,,,,"2023-03-23 16:36;manc;Please advise if I could just send a PR to remove the paragraphs, or if it requires additional license review process for changing the COPYING file.;;;","2023-04-04 11:59;valeriep;The latest release is 1.9.9 (Sept 2022), update pcsc-lite.h as it contains 2 typo fixes. The other 2 headers are the same.;;;","2023-04-04 16:08;valeriep;After some discussion, we will be updating both the COPYING file and the legal md file. I will start a PR soon.;;;","2023-04-11 16:23;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/13409
Date: 2023-04-10 16:56:04 +0000;;;","2023-04-12 16:57;valeriep;Added noreg-doc as the changes are doc-related; no code changes.
Changed to noreg-other with review feedback from Sean.;;;","2023-04-25 10:49;dukebot;Changeset: 33d66141
Author:    Valerie Peng <valeriep@openjdk.org>
Date:      2023-04-25 17:48:42 +0000
URL:       https://git.openjdk.org/jdk/commit/33d661415056107742e16d24efdd5a063a2eb81f
;;;","2023-06-21 09:05;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/1487
Date: 2023-06-21 15:55:29 +0000;;;","2023-06-22 01:31;mdoerr;Fix Request (17u):
Should get backported for parity with 17.0.9-oracle. Applies cleanly.;;;",,,,,,,,,,,,,,,,,,,,,,,
JFR: Missing disk parameter in ActiveRecording event,JDK-8304844,5097027,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,egahlin,egahlin,egahlin,2023-03-23 16:20,2023-04-05 23:17,2023-10-01 09:55,2023-03-31 08:51,,,,,,,,,21,hotspot,,0,,,,,,,,,,,,,,,,,The ActiveRecording event lacks the disk parameter. ,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i30vhn:",9223372036854775807,b17,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@42995637,,,,,,,,,"2023-03-23 16:32;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/13171
Date: 2023-03-23 23:21:05 +0000;;;","2023-03-31 08:51;dukebot;Changeset: dae1ab3a
Author:    Erik Gahlin <egahlin@openjdk.org>
Date:      2023-03-31 15:50:33 +0000
URL:       https://git.openjdk.org/jdk/commit/dae1ab3aad4e24596f92568b85c92dcc87310dbf
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Dangling `CharacterCodingException` in a few javadoc descriptions,JDK-8304840,5097023,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,naoto,naoto,naoto,2023-03-23 14:57,2023-04-03 12:11,2023-10-01 09:55,2023-03-29 09:21,,,,,,,,,21,core-libs,,0,noreg-doc,,,,,,,,,,,,,,,,"The exception appears in the javadoc without any explanation for it, such as:

https://docs.oracle.com/en/java/javase/20/docs/api/java.base/java/nio/charset/CharsetDecoder.html#decode(java.nio.ByteBuffer)

This is implicitly inherited from the method signature.",,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8305099,,,,,,,,,,,,,,,,,"2023-03-28 11:19;naoto;Screenshot 2023-03-28 at 11.19.00 AM.png;https://bugs.openjdk.org/secure/attachment/103155/Screenshot+2023-03-28+at+11.19.00+AM.png",,,,,,,,,,,,generic,,,,,,,,,,generic,,,,,,"0|i30vgr:",9223372036854775807,b16,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@3962510e,,,,,,,,,"2023-03-28 11:31;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/13214
Date: 2023-03-28 18:25:21 +0000;;;","2023-03-29 09:21;dukebot;Changeset: e3855d00
Author:    Naoto Sato <naoto@openjdk.org>
Date:      2023-03-29 16:19:44 +0000
URL:       https://git.openjdk.org/jdk/commit/e3855d005408945ea00e3bc38a0f10bef45cd627
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Classfile API throws IOOBE for MethodParameters attribute without parameter names,JDK-8304837,5097019,Bug,Closed,JDK,JDK,software,duke,,,P4,Fixed,asotona,liach,liach,2023-03-23 13:05,2023-08-08 11:52,2023-10-01 09:55,2023-04-29 00:49,21,,,,,,,,21,other-libs,,0,classfile-api,,,,,,,,,,,,,,,,"Classfile API incorrectly uses readUtf8Entry than readUtf8EntryOrNull to retrieve parameter names, leading to IndexOutOfBoundsException.",,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8292275,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i30vfv:",9223372036854775807,b21,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@79d0c3d2,,,,,,,Verified,,"2023-03-23 13:07;liach;[~asotona] Might be interested in this, as this currently blocks JDK-8292275;;;","2023-03-23 13:19;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/13167
Date: 2023-03-23 19:45:21 +0000;;;","2023-04-29 00:49;dukebot;Changeset: a2d3fc83
Author:    SirYwell <hannesgreule@outlook.de>
Committer: Julian Waters <jwaters@openjdk.org>
Date:      2023-04-29 07:48:14 +0000
URL:       https://git.openjdk.org/jdk/commit/a2d3fc83b0dd7eea38e1dd5898a97d6d7ff60194
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,
Make MALLOC_MIN4 macro more robust,JDK-8304836,5097018,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,naoto,naoto,naoto,2023-03-23 12:45,2023-05-01 10:07,2023-10-01 09:55,2023-04-24 08:39,,,,,,,,,21,core-libs,,0,noreg-hard,,,,,,,,,,,,,,,,"In the file `src/java.base/share/native/libjava/jni_util.c`, there is a macro for calculating minimum buffer size `MALLOC_MIN4`. While all current uses of the MALLOC_MIN4 macro are with a parameter of jint type, the macro itself is parameter type agnostic. This check can be more strict —at no computational cost— and prevent mistakes if there were a future use with a data type greater than jint (i.e. jlong).",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8297371,,,,,,,,,,,,,,,,,,,,,generic,,,,,,,,,,generic,,,,,,"0|i30vfn:",9223372036854775807,b20,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@38ded199,,,,,,,,,"2023-04-20 11:51;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/13564
Date: 2023-04-20 18:39:29 +0000;;;","2023-04-24 08:39;dukebot;Changeset: f32adaf8
Author:    Naoto Sato <naoto@openjdk.org>
Date:      2023-04-24 15:37:35 +0000
URL:       https://git.openjdk.org/jdk/commit/f32adaf89fede5262db2cb5517fc649a87e0714d
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
"jdk/jfr/event/oldobject/TestArrayInformation.java fails with ""Could not find event with class ... as (leak) object""",JDK-8304835,5097017,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,egahlin,dcubed,dcubed,2023-03-23 12:16,2023-07-12 13:17,2023-10-01 09:55,2023-06-19 04:43,21,22,,,,,,,22,hotspot,,0,hgupdate-sync,intermittent,noreg-self,testbug,tier3,tier6,,,,,,,,,,,"The following test failed in the JDK21 CI:

jdk/jfr/event/oldobject/TestArrayInformation.java

Here's a snippet from the log file:

#section:main
----------messages:(7/446)----------
command: main -XX:TLABSize=2k jdk.jfr.event.oldobject.TestArrayInformation
reason: User specified action: run main/othervm -XX:TLABSize=2k jdk.jfr.event.oldobject.TestArrayInformation 
started: Thu Mar 23 18:41:32 UTC 2023
Mode: othervm [/othervm specified]
Additional options from @modules: --add-modules jdk.jfr --add-exports jdk.jfr/jdk.jfr.internal.test=ALL-UNNAMED
finished: Thu Mar 23 18:41:36 UTC 2023
elapsed time (seconds): 4.438
----------configuration:(4/119)----------
Boot Layer
  add modules: jdk.jfr                       
  add exports: jdk.jfr/jdk.jfr.internal.test ALL-UNNAMED

----------System.out:(10/214)----------
[Ljava.lang.Object;
[Ljava.lang.Object;
[Ljava.lang.Object;
[Ljava.lang.Object;
[Ljava.lang.Object;
[Ljava.lang.Object;
[Ljava.lang.Object;
[Ljava.lang.Object;
[Ljava.lang.Object;
java.lang.StringBuilder
----------System.err:(12/1001)----------
java.lang.Exception: Could not find event with class [Ljdk.jfr.event.oldobject.TestArrayInformation$ArrayLeak; as (leak) object
	at jdk.jfr.event.oldobject.TestArrayInformation.verifyObjectArray(TestArrayInformation.java:109)
	at jdk.jfr.event.oldobject.TestArrayInformation.main(TestArrayInformation.java:68)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
	at java.base/java.lang.reflect.Method.invoke(Method.java:578)
	at com.sun.javatest.regtest.agent.MainWrapper$MainThread.run(MainWrapper.java:125)
	at java.base/java.lang.Thread.run(Thread.java:1623)

JavaTest Message: Test threw exception: java.lang.Exception: Could not find event with class [Ljdk.jfr.event.oldobject.TestArrayInformation$ArrayLeak; as (leak) object
JavaTest Message: shutting down test",,,,,,,,,,,JDK-8310437,JDK-8310324,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,aarch64,x86_64,,,,,,,,,os_x,windows,,,,,"0|i30vff:",9223372036854775807,b03,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@42995637,,,,,,,,,"2023-06-14 06:03;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/14467
Date: 2023-06-14 12:47:57 +0000;;;","2023-06-19 04:43;dukebot;Changeset: 7d4b77ad
Author:    Erik Gahlin <egahlin@openjdk.org>
Date:      2023-06-19 11:41:10 +0000
URL:       https://git.openjdk.org/jdk/commit/7d4b77ad9ee803d89eab5632f5c65ac843a68b3c
;;;","2023-06-19 06:32;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk21/pull/32
Date: 2023-06-19 13:23:50 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,
[linux] Exception initializing the JavaFX runtime when a security manager is enabled,JDK-8304832,5097013,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,tsayao,kcr,kcr,2023-03-23 11:32,2023-04-06 05:13,2023-10-01 09:55,2023-03-24 05:21,jfx21,,,,,,,,jfx21,javafx,,0,regression,regression_8299595,,,,,,,,,,,,,,,"To reproduce this, run the following system test:

$ gradle --info -PFULL_TEST=true cleanTest :systemTests:test --tests SandboxAppTest

WARNING: A command line option has enabled the Security Manager
WARNING: The Security Manager is deprecated and will be removed in a future release
WARNING: A command line option has enabled the Security Manager
WARNING: The Security Manager is deprecated and will be removed in a future release
java.lang.RuntimeException: java.lang.ExceptionInInitializerError
        at javafx.graphics@21-internal/com.sun.javafx.tk.quantum.QuantumToolkit.startup(QuantumToolkit.java:300)
        at javafx.graphics@21-internal/com.sun.javafx.application.PlatformImpl.startup(PlatformImpl.java:292)
        at javafx.graphics@21-internal/com.sun.javafx.application.PlatformImpl.startup(PlatformImpl.java:162)
        at javafx.graphics@21-internal/com.sun.javafx.application.LauncherImpl.startToolkit(LauncherImpl.java:651)
        at javafx.graphics@21-internal/com.sun.javafx.application.LauncherImpl.launchApplication1(LauncherImpl.java:671)
        at javafx.graphics@21-internal/com.sun.javafx.application.LauncherImpl.lambda$launchApplication$2(LauncherImpl.java:195)
        at java.base/java.lang.Thread.run(Thread.java:1589)
Caused by: java.lang.ExceptionInInitializerError
        at javafx.graphics@21-internal/com.sun.glass.ui.gtk.GtkPlatformFactory.createApplication(GtkPlatformFactory.java:40)
        at javafx.graphics@21-internal/com.sun.glass.ui.Application.run(Application.java:146)
        at javafx.graphics@21-internal/com.sun.javafx.tk.quantum.QuantumToolkit.startup(QuantumToolkit.java:290)
        ... 6 more
Caused by: java.security.AccessControlException: access denied (""java.util.PropertyPermission"" ""org.eclipse.swt.internal.gtk.version"" ""read"")
        at java.base/java.security.AccessControlContext.checkPermission(AccessControlContext.java:485)
        at java.base/java.security.AccessController.checkPermission(AccessController.java:1068)
        at java.base/java.lang.SecurityManager.checkPermission(SecurityManager.java:411)
        at java.base/java.lang.SecurityManager.checkPropertyAccess(SecurityManager.java:1155)
        at java.base/java.lang.System.getProperty(System.java:961)
        at javafx.graphics@21-internal/com.sun.glass.ui.gtk.GtkApplication.<clinit>(GtkApplication.java:66)
        ... 9 more

SandboxAppTest > testFXNonApp FAILED
    junit.framework.AssertionFailedError: test.sandbox.app.FXNonApp: Application failed with a security exception
        at test.sandbox.SandboxAppTest.runSandboxedApp(SandboxAppTest.java:91)
        at test.sandbox.SandboxAppTest.runSandboxedApp(SandboxAppTest.java:57)
        at test.sandbox.SandboxAppTest.runSandboxedApp(SandboxAppTest.java:53)
        at test.sandbox.SandboxAppTest.testFXNonApp(SandboxAppTest.java:122)


Alternaitvely, run the attached test program as follows:

$ java @JAVAFXROOT/build/run.args -Djava.security.manager -Djava.security.policy=JAVAFXROOT/build/run.java.policy PlatformStartupTest
WARNING: A command line option has enabled the Security Manager
WARNING: The Security Manager is deprecated and will be removed in a future release
Exception in thread ""main"" java.lang.RuntimeException: java.lang.ExceptionInInitializerError
        at javafx.graphics@21-internal/com.sun.javafx.tk.quantum.QuantumToolkit.startup(QuantumToolkit.java:300)
        at javafx.graphics@21-internal/com.sun.javafx.application.PlatformImpl.startup(PlatformImpl.java:292)
        at javafx.graphics@21-internal/javafx.application.Platform.startup(Platform.java:113)
        at PlatformStartupTest.main(PlatformStartupTest.java:5)
Caused by: java.lang.ExceptionInInitializerError
        at javafx.graphics@21-internal/com.sun.glass.ui.gtk.GtkPlatformFactory.createApplication(GtkPlatformFactory.java:40)
        at javafx.graphics@21-internal/com.sun.glass.ui.Application.run(Application.java:146)
        at javafx.graphics@21-internal/com.sun.javafx.tk.quantum.QuantumToolkit.startup(QuantumToolkit.java:290)
        ... 3 more
Caused by: java.security.AccessControlException: access denied (""java.util.PropertyPermission"" ""org.eclipse.swt.internal.gtk.version"" ""read"")
        at java.base/java.security.AccessControlContext.checkPermission(AccessControlContext.java:485)
        at java.base/java.security.AccessController.checkPermission(AccessController.java:1068)
        at java.base/java.lang.SecurityManager.checkPermission(SecurityManager.java:411)
        at java.base/java.lang.SecurityManager.checkPropertyAccess(SecurityManager.java:1155)
        at java.base/java.lang.System.getProperty(System.java:961)
        at javafx.graphics@21-internal/com.sun.glass.ui.gtk.GtkApplication.<clinit>(GtkApplication.java:66)
        ... 6 more

This regression is caused by the fix for JDK-8299595. The reading of the ""org.eclipse.swt.internal.gtk.version"" property was moved outside of a doPrivileged block, and I missed this during my review.
","JavaFX 21-ea+10
Linux
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8299595,,,,,,,,,,,,,,,,,,,,,,,,,,,,b10,jfx21,,,,,,,,"0|i30vej:",9223372036854775807,b11,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4f591050,,,,,,,,,"2023-03-23 16:39;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jfx/pull/1065
Date: 2023-03-23 23:33:09 +0000;;;","2023-03-24 05:21;dukebot;Changeset: 102a90ce
Author:    Thiago Milczarek Sayao <tsayao@openjdk.org>
Date:      2023-03-24 12:19:59 +0000
URL:       https://git.openjdk.org/jfx/commit/102a90ceee88e6ccf6703519b5f722f23dc58a3a
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
TextFlow.hitTest.insertionIndex incorrect with surrogate pairs,JDK-8304831,5097012,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,kpk,angorya,angorya,2023-03-23 11:32,2023-06-23 14:42,2023-10-01 09:55,2023-06-13 22:07,jfx19,,,,,,,,jfx21,javafx,,0,sn_140,sn_141,sn_146,,,,,,,,,,,,,,"The expectation is that TextFlow.hitTest() and Text.hitTest() produce essentially the same result regardless of the underlying text.

In reality, TextFlow implementation is buggy when it comes to handling of the surrogate pairs, as it requires character break iterator to skip over characters that represent a single unicode code point (see HitInfo.getInsertionIndex()).  However, the text field is null, so the correct logic can not be implemented.

Also, it appears there is weird behavior in the Text.hitTest() inside a large emoji symbol: as one can see in the attached video: Text.insertionIndex() goes 0, 2, 1, 2 when moving the mouse across the symbol from the left edge to the right edge. (please create a new ticket if this is a separate issue).

A workaround might to scan TextFlow children to pick the right Text instance and then use its hitTest() method, though it might require a linear search and cause performance issues with long text flows.
edit: the workaround does not quite work, the reported position is incorrect in the case when multiple Text instances are added to the TextFlow.

SCCE to follow.",,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8301121,JDK-8300569,,,,,,,,,JDK-8306083,,,,,JDK-8194704,JDK-8302511,JDK-8304441,JDK-8308608,"2023-03-27 16:34;angorya;video1628053016.mp4;https://bugs.openjdk.org/secure/attachment/103141/video1628053016.mp4",,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i30veb:",9223372036854775807,b22,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4143e3f7,,,,,,,,,"2023-04-14 00:41;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jfx/pull/1091
Date: 2023-04-14 07:35:33 +0000;;;","2023-06-13 22:07;dukebot;Changeset: c20f6d0f
Author:    Karthik P K <kpk@openjdk.org>
Date:      2023-06-14 05:04:47 +0000
URL:       https://git.openjdk.org/jfx/commit/c20f6d0f0133a59a982959ee2e48809f30f3130b
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
MacOS metal pipeline - window isn't painted if created during display sleep,JDK-8304825,5097005,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,aghaisas,prr,prr,2023-03-23 10:03,2023-07-17 13:39,2023-10-01 09:55,2023-04-09 21:54,17,18,19,20,,,,,21,client-libs,,0,macos,metal,noreg-hard,sn_141,,,,,,,,,,,,,"The test program supplied here can be used to demonstrate that with the
2D metal pipeline a window is created whilst the application is in display sleep
then the window is never painted, no matter what you do after returning from sleep.

It was reported as a JDK 19 issue on macOS 13 (JDK 19 is
the release in which metal was turned on by default) but I reproduced
on macOS 12.6 with JDK 18 by specifying -Dsun.java2d.metal=True
It passes (repaint happens) if you use OpenGL on both of these releases.


import java.awt.FlowLayout;
import java.awt.Toolkit;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.SwingUtilities;
import javax.swing.Timer;

public class TestRenderStop {
    MyFrame fr;

    public TestRenderStop() {
        JFrame m = new MyFrame(""Test Render Stop"", ""Enter display sleep [control-shift-Eject] now and wait until you hear the beep before typing Enter to resume"");
        m.setBounds(400, 400, 800, 400);
        m.setVisible(true);

        Timer t = new Timer(10000, e -> showFrame());
        t.setRepeats(false);
        t.start();
    }

    private void showFrame() {
        fr = new MyFrame(""Test Frame"", ""This is a label"");
        fr.setBounds(500, 550, 400, 70);
        fr.setVisible(true);
        Toolkit.getDefaultToolkit().beep();
    }

    class MyFrame extends JFrame {
        MyFrame(String title, String message) {
            setTitle(title);
            setLayout(new FlowLayout());
            add(new JLabel(message));
        }
    }

    public static void main(String[] args) {
        SwingUtilities.invokeLater(TestRenderStop::new);
    }
}
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8312198,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i30vcr:",9223372036854775807,b18,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4b09ce31,,,,,,,,,"2023-03-24 02:27;aghaisas;I am able to reproduce this issue on MacBook Pro 16"" (macOS Ventura 13.2.1).

A quick look at the log indicates that the rendering of characters of the test frame is alright - but final blit from back buffer to window is not honoured.
Need to investigate further. WIP.;;;","2023-03-28 02:10;avu;@aghaisas I've reproduced this issue too with OpenJDK, but it looks like we've fixed it in our JBR fork. I can look at it if you'd like.;;;","2023-03-28 02:33;aghaisas;[~avu], Thanks for reaching out on this issue.
I have developed a probable solution that involves recreating the CVDisplayLink instance inside MTLLayer on screen sleep/wakeup notification. It seems to work perfectly. I am currently testing it further. I will send out the PR for review in a day or two.

Do you have a solution that does not involve recreation of CVDisplayLink instance?;;;","2023-03-28 03:11;avu;My solution is also related to CVDisplayLink, but I changed our architecture a bit and moved from the approach of one DisplayLink per layer to one DisplayLink per device (MTLContext). So, you don't need to recreate the link all the time. It helped to resolve some other update problems in fullscreen mode. In the current approach, we use multiple links per layers and they all try to update their windows in parallel. It doesn't have much sense now because we have only one rendering queue. ;;;","2023-03-28 03:34;aghaisas;The test program in this bug fails without recreating the CVDisplayLink. It does not help if I try to avoid recreating CVDisplayLink with a stop/start sequence on existing CVDisplayLink.
I will be interested in knowing how have you addressed this without recreating the CVDisplayLink on screen sleep/wake up events?
If possible, please send out a PR and we can review/discuss it there.
;;;","2023-03-28 10:22;avu;Yes, I'll send the PR after some adoption to the fresh OpenJDK sources. My approach resolves the issue because it creates CVDisplayLink using another CG API CVDisplayLinkCreateWithCGDisplay it also provides the correct refresh rate in case of two monitors with different frame rates. It does not rely on active displays as it currently happens in the current code that uses CVDisplayLinkCreateWithActiveCGDisplays. Actually, the simple hack to resolve this particular issue is to replace this call with CVDisplayLinkCreateWithCGDisplay(CGMainDisplayID(), &displayLink);;;","2023-03-29 07:43;avu;[~aghaisas] Here is my solution: https://github.com/openjdk/jdk/pull/13230;;;","2023-03-29 07:48;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/13230
Date: 2023-03-29 14:39:12 +0000;;;","2023-04-06 07:22;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/13375
Date: 2023-04-06 14:16:46 +0000;;;","2023-04-09 21:54;dukebot;Changeset: 969a6b9f
Author:    Ajit Ghaisas <aghaisas@openjdk.org>
Date:      2023-04-10 04:52:35 +0000
URL:       https://git.openjdk.org/jdk/commit/969a6b9fd7f7afc60250309f3ada205c1473cf8e
;;;","2023-07-17 10:27;alans;I believe I have discovered a problem with this solution, besides the problem that the code does not check for errors reported by CV functions. The problem is that CVDisplayLinkCreateWithActiveCGDisplays fails if there are no active displays, and there is apparently a race condition between the screen wakeup notification and the update to the list of active displays that can produce this outcome.

The following code has been helpful (although there should be a retry limit):

    CVReturn r = CVDisplayLinkCreateWithActiveCGDisplays(&displayLink);
    if (r == kCVReturnInvalidArgument) {
        // There are no active displays
        [self performSelectorOnMainThread:@selector(createDisplayLink) withObject:nil waitUntilDone:NO];
        return;
    }
;;;","2023-07-17 12:01;kcr;[~alans] Can you file a new bug, linking as ""relates to"" this one?;;;",,,,,,,,,,,,,,,,,,,
Prune HttpURLConnection cache when corresponding Authenticator is garbage collected,JDK-8304818,5096996,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,michaelm,michaelm,michaelm,2023-03-23 08:36,2023-05-01 10:07,2023-10-01 09:55,2023-04-24 09:59,17,,,,,,,,21,core-libs,,0,,,,,,,,,,,,,,,,,"8169495 added a method to HttpURLConnection to set an Authenticator instance per connection. This allowed different authenticators with different credentials to be used for different connections (even to the same URL). A side effect of this, is that the credential cache is then tied to the Authenticator instance. The functionality can be used in a number of ways:

1) Sharing one Authenticator instance among multiple connections. In this case, the credential cache is also shared. This is probably the most common use case

2) Creating a separate Authenticator instance for each connection. In this case, the caches are not shared.

To support case 2) where it is not intended to share the cache, it is necessary to prune the cache when the corresponding Authenticator is garbage collected. Otherwise, the cache will continue to grow unbounded.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8303042,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i30var:",9223372036854775807,b20,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@446e124a,,,,,,,,,"2023-03-23 08:57;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/13159
Date: 2023-03-23 15:47:10 +0000;;;","2023-04-24 10:28;dukebot;Changeset: 314db55f
Author:    Michael McMahon <michaelm@openjdk.org>
Date:      2023-04-24 17:25:32 +0000
URL:       https://git.openjdk.org/jdk/commit/314db55f6dde033f62481b62f10dd11030473569
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
After JDK-8297639 the flag G1UsePreventiveGC needs to be added to the obsoletion table,JDK-8304802,5096976,Bug,Resolved,JDK,JDK,software,duke,,,P5,Fixed,tschatzl,tschatzl,tschatzl,2023-03-23 03:24,2023-03-29 23:15,2023-10-01 09:55,2023-03-24 05:05,21,,,,,,,,21,hotspot,,0,gc-g1,gc-g1-preventive-gc,gc-pending-review,,,,,,,,,,,,,,"JDK-8297639 removed the UsePreventiveGC diagnostic option functionality, but forgot adding it to the argument obsoletion table.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8297639,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i30v6b:",9223372036854775807,b16,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6b00f96c,,,,,,,,,"2023-03-23 03:45;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/13156
Date: 2023-03-23 10:38:04 +0000;;;","2023-03-24 05:05;dukebot;Changeset: 13dd19aa
Author:    Thomas Schatzl <tschatzl@openjdk.org>
Date:      2023-03-24 12:04:23 +0000
URL:       https://git.openjdk.org/jdk/commit/13dd19aac2f259c8c22dc79c615e3bdc546f1850
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
UnregisteredClassesTable_lock never created,JDK-8304738,5096904,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,matsaave,jcking,jcking,2023-03-22 10:34,2023-04-17 10:42,2023-10-01 09:55,2023-04-11 07:05,21,,,,,,,,21,hotspot,,0,cds,starter,sync,,,,,,,,,,,,,,https://github.com/openjdk/jdk/pull/13143 discovered that UnregisteredClassesTable_lock is never created in mutex_init() and is always nullptr. This lock is referenced in a few places and all of those are effectively thread unsafe. The lock should be removed if not needed or actually created.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8304723,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i30uqb:",9223372036854775807,b18,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,,,"2023-03-22 15:38;dholmes;It is possible this CDS code doesn't allow for concurrent execution anyway, but that would have to be confirmed.;;;","2023-04-05 10:09;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/13358
Date: 2023-04-05 16:17:15 +0000;;;","2023-04-11 07:05;dukebot;Changeset: 628a3f17
Author:    Matias Saavedra Silva <matsaave@openjdk.org>
Date:      2023-04-11 14:03:10 +0000
URL:       https://git.openjdk.org/jdk/commit/628a3f173a2c6b0244e993c3d916e5a192e65c15
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,
Heap_lock is created twice,JDK-8304736,5096902,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,jcking,jcking,jcking,2023-03-22 10:33,2023-04-03 12:08,2023-10-01 09:55,2023-03-27 07:15,,,,,,,,,21,hotspot,,0,,,,,,,,,,,,,,,,,https://github.com/openjdk/jdk/pull/13143 discovered that Heap_lock is being created twice in mutex_init(). We should remove one of them.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i30upv:",9223372036854775807,b16,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,,,"2023-03-24 09:46;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/13143
Date: 2023-03-22 15:23:59 +0000;;;","2023-03-27 07:15;dukebot;Changeset: 8d423f73
Author:    Justin King <jcking@openjdk.org>
Date:      2023-03-27 14:12:58 +0000
URL:       https://git.openjdk.org/jdk/commit/8d423f73051004bafdfa2961c57daf7761ce900c
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
AsyncGetCallTrace can cause SIGBUS on M1,JDK-8304725,5096891,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,jbechberger,jbechberger,jbechberger,2023-03-22 08:49,2023-07-17 01:57,2023-10-01 09:55,2023-04-11 23:51,11,17,21,,,,,,21,hotspot,,0,amazon-interest,azul-interest,jdk17u-fix-request,jdk17u-fix-yes,,,,,,,,,,,,,"Calling AsyncGetCallTrace can trigger writing into the PcDescCache. This causes a SIGBUS error when the current thread is not WXWrite mode.
This is due a missing `MACOS_AARCH64_ONLY(ThreadWXEnable wx(WXWrite, Thread::current());)` to ensure that the thread is in this mode during the walking of the thread stack.

This error occurs sporadically but can be easily reproduced using https://github.com/parttimenerd/asgct_bottom with the renaissance dotty benchmark.

I could not reproduce this issue with JFR or async-profiler, but fixing it is simple.

Thanks to Martin and Matthias from my team for helping to debug this bug.

Excerpt from the hs_err file:

```
Stack: [0x000000016d554000,0x000000016d757000],  sp=0x000000016d750900,  free space=2034k
Native frames: (J=compiled Java code, j=interpreted, Vv=VM code, C=native code)
V  [libjvm.dylib+0xdd5a08]  PcDescCache::add_pc_desc(PcDesc*)+0x60
V  [libjvm.dylib+0xdde49c]  PcDescContainer::find_pc_desc_internal(unsigned char*, bool, PcDescSearch const&)+0x564
V  [libjvm.dylib+0xf4271c]  PcDescContainer::find_pc_desc(unsigned char*, bool, PcDescSearch const&)+0x9c
V  [libjvm.dylib+0xa740c0]  CompiledMethod::find_pc_desc(unsigned char*, bool)+0xa0
V  [libjvm.dylib+0xde1eb0]  CompiledMethod::pc_desc_near(unsigned char*)+0x28
V  [libjvm.dylib+0x70d96c]  is_decipherable_compiled_frame(JavaThread*, frame*, CompiledMethod*)+0x104
V  [libjvm.dylib+0x70d574]  find_initial_Java_frame(JavaThread*, frame*, frame*, Method**, int*)+0x304
V  [libjvm.dylib+0x70d038]  forte_fill_call_trace_given_top(JavaThread*, ASGCT_CallTrace*, int, frame)+0x98
V  [libjvm.dylib+0x70cf48]  AsyncGetCallTrace+0x2dc
C  [libbottom.so+0x43c4]  asgctGSTHandler(__darwin_ucontext*)+0xbc
C  [libbottom.so+0x528c]  signalHandler(int, __siginfo*, void*)+0x20
C  [libsystem_platform.dylib+0x42a4]  _sigtramp+0x38
C  0x110180011a9e15f0
j  jdk.internal.jimage.ImageReader$SharedImageReader$$Lambda+0x00000008011cef68.visit(Ljdk/internal/jimage/ImageLocation;)V+9 java.base@21-internal
j  jdk.internal.jimage.ImageReader$SharedImageReader.visitLocation(Ljdk/internal/jimage/ImageLocation;Ljdk/internal/jimage/ImageReader$SharedImageReader$LocationVisitor;)V+61 java.base@21-internal
j  jdk.internal.jimage.ImageReader$SharedImageReader.handleModulesSubTree(Ljava/lang/String;Ljdk/internal/jimage/ImageLocation;)Ljdk/internal/jimage/ImageReader$Node;+42 java.base@21-internal
j  jdk.internal.jimage.ImageReader$SharedImageReader.buildNode(Ljava/lang/String;)Ljdk/internal/jimage/ImageReader$Node;+69 java.base@21-internal
```",,,,,,,,,,,JDK-8311636,,,,,,,,,,,,,,,,,,,,,,JDK-8303746,,,JDK-8307549,,,,,JDK-8303746,,,,,,,,,,,,,,,,aarch64,,,,,,,,,,os_x,,,,,,"0|i30unf:",9223372036854775807,b19,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@2846162a,,,,,,,,,"2023-03-22 09:18;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/13144
Date: 2023-03-22 15:57:40 +0000;;;","2023-04-11 23:51;dukebot;Changeset: d8af7a60
Author:    Johannes Bechberger <jbechberger@openjdk.org>
Committer: Matthias Baesken <mbaesken@openjdk.org>
Date:      2023-04-12 06:49:10 +0000
URL:       https://git.openjdk.org/jdk/commit/d8af7a6014055295355a1242db6c2872299c6398
;;;","2023-07-06 02:35;snazarki;Note for future investigator:
AsyncProfiler bypasses this issue by enforcing WX mode prior to call of AsyncGetCallTrace (https://github.com/async-profiler/async-profiler/blob/117594bb4d1ce61b073c8a9cea438b33f3f09c81/src/profiler.cpp#L390);;;","2023-07-06 03:35;snazarki;Fix request (17u):

I'd like to backport this to fix the crash when custom profiler is used on mac m1.  ;;;","2023-07-06 03:40;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/1554
Date: 2023-07-06 10:34:22 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,,,
Statically allocate global mutexes,JDK-8304723,5096888,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,jcking,jcking,jcking,2023-03-22 08:20,2023-04-03 12:08,2023-10-01 09:55,2023-03-27 07:15,,,,,,,,,21,hotspot,,0,,,,,,,,,,,,,,,,,Hotspot uses 40+ global mutexes and monitors. All of which are dynamically allocated on the C heap during startup. They are quite large and live for the lifetime of the process. These can be statically allocated instead of dynamically allocated.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8304738,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i30umr:",9223372036854775807,b16,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,,,"2023-03-22 08:32;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/13143
Date: 2023-03-22 15:23:59 +0000;;;","2023-03-22 17:09;dholmes;What is the performance benefit of doing this?

We can potentially statically allocate these, but static, or lazy, initialization is a completely different matter.;;;","2023-03-23 08:51;jcking;Updated to just be statically allocating instead of dynamic. It removes 6KB from the heap and 5us from startup. Baby steps.;;;","2023-03-27 07:15;dukebot;Changeset: 8d423f73
Author:    Justin King <jcking@openjdk.org>
Date:      2023-03-27 14:12:58 +0000
URL:       https://git.openjdk.org/jdk/commit/8d423f73051004bafdfa2961c57daf7761ce900c
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,
SuperWord::schedule should rebuild C2-graph from SuperWord dependency-graph,JDK-8304720,5096884,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,epeter,epeter,epeter,2023-03-22 07:36,2023-07-10 00:53,2023-10-01 09:55,2023-05-07 23:10,11,17,21,,,,,,21,hotspot,,0,c2,c2-superword,oracle-triage-21,,,,,,,,,,,,,,"During work of JDK-8304042 (and ultimately of JDK-8298935), I found an example where we have no cyclic dependency, but the C2 graph after SuperWord is not correct. It leads to WRONG RESULTS.

The issue is that we do not re-order the graph for non-vectorized memory operations. But the vectorization of some memory operations may lead to a reordering of memory ops, not just for the vectorized ones but also the unvectorized ones.

In SuperWord::co_locate_pack we have some complicated logic for Stores, where we try to find out what needs to be scheduled before (and presumably after). But we have nothing equivalent for Load.

We could try to implement something equivalent to the logic for Stores. But I am not convinced that this works, because we might have to also re-order stores that are not packed.

My suggestion:
We schedule all packs and left over scalars into a linear order (I already do that in JDK-8304042). From that order, we can re-construct all memory-state edges in the C2 memory slices.

Reproduce like this:

./java -XX:-TieredCompilation -Xbatch -XX:CompileCommand=compileonly,Test4::test -XX:CompileCommand=printcompilation,Test4::* -XX:LoopUnrollLimit=250 -XX:+TraceSuperWord  Test4.java

./java -XX:-TieredCompilation -Xbatch --add-modules java.base --add-exports java.base/jdk.internal.misc=ALL-UNNAMED -XX:CompileCommand=compileonly,Test5::test -XX:CompileCommand=printcompilation,Test5::* -XX:LoopUnrollLimit=250 -XX:+TraceSuperWord -XX:LoopMaxUnroll=5 Test5.java

I will describe Test4.java. Test5.java is very similar, just uses Unsafe so that it reproduces before we implemented conversions in SuperWord.

We have:

        for (int i = 0; i < RANGE; i+=2) {
            dataFa[i + 0] = dataIa[i + 0] * 1.3f;
            dataIb[i + 0] = (int)dataFb[i + 0] * 11;
            dataIb[i + 1] = (int)dataFb[i + 1] * 11;
            dataFa[i + 1] = dataIa[i + 1] * 1.2f;
        }

This gets unrolled, for simplicity let's say only 2x.

        for (int i = 0; i < RANGE; i+=4) {
            dataFa[i + 0] = dataIa[i + 0] * 1.3f;          -> scalar, before
            dataIb[i + 0] = (int)dataFb[i + 0] * 11;         -> vectorize
            dataIb[i + 1] = (int)dataFb[i + 1] * 11;         -> vectorize
            dataFa[i + 1] = dataIa[i + 1] * 1.2f;          -> scalar, after
            dataFa[i + 2] = dataIa[i + 2] * 1.3f;          -> scalar, before
            dataIb[i + 2] = (int)dataFb[i + 2] * 11;         -> vectorize
            dataIb[i + 3] = (int)dataFb[i + 3] * 11;         -> vectorize
            dataFa[i + 3] = dataIa[i + 3] * 1.2f;          -> scalar, after
        }

We can only vectorize half of the statements, the other half does not work because the constants are not matching.

To enable this vectorization, the statements have to be re-ordered.
We have to pay attention to the Store-Load dependencies.
For (i+0) and (i+2), we have a StoreF-LoadF dependency (""before""), for (i+1) and (i+3) we have a StoreI-LoadI dependency (""after"").

        for (int i = 0; i < RANGE; i+=4) {
            dataFa[i + 0] = dataIa[i + 0] * 1.3f;          -> scalar, before
            dataFa[i + 2] = dataIa[i + 2] * 1.3f;          -> scalar, before
            dataIb[i + 0] = (int)dataFb[i + 0] * 11;         -> vectorize
            dataIb[i + 1] = (int)dataFb[i + 1] * 11;         -> vectorize
            dataIb[i + 2] = (int)dataFb[i + 2] * 11;         -> vectorize
            dataIb[i + 3] = (int)dataFb[i + 3] * 11;         -> vectorize
            dataFa[i + 1] = dataIa[i + 1] * 1.2f;          -> scalar, after
            dataFa[i + 3] = dataIa[i + 3] * 1.2f;          -> scalar, after
        }

We see that we had to re-order the memory ops. For example we had to swap the order of the StoreF for (i+1) and (i+2). This must be reflected in the C2 graph. Some of the scalar memory ops must be moved before the vector load/stores, some must be pushed to later. This should be determined by the dependency-graph of SuperWord.

I think my Test5.java fails for JDK17.

Task:
Un-comment ""test5"" from JDK-8304042.
And lift the platform restrictions at the test definitions.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8304042,,,,,JDK-8306302,JDK-8306088,,,"2023-03-22 07:36;epeter;Test4.java;https://bugs.openjdk.org/secure/attachment/103086/Test4.java","2023-03-22 07:36;epeter;Test5.java;https://bugs.openjdk.org/secure/attachment/103085/Test5.java",,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i30ulv:",9223372036854775807,b22,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2023-03-23 00:33;chagedorn;ILW = Wrong execution due to wrong scheduling in SuperWord, rare, disable compilation of affected method or use -XX:-UseSuperWord = HLM = P3 ;;;","2023-04-25 08:08;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/13354
Date: 2023-04-05 14:55:55 +0000;;;","2023-05-07 23:10;dukebot;Changeset: ad0e5a99
Author:    Emanuel Peter <epeter@openjdk.org>
Date:      2023-05-08 06:09:10 +0000
URL:       https://git.openjdk.org/jdk/commit/ad0e5a99ca1ad9dd04105f502985735a3536c3f4
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,
GetIntArrayElements should not be passed JNI_FALSE,JDK-8304718,5096881,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,jwaters,jwaters,jwaters,2023-03-22 07:20,2023-04-03 12:08,2023-10-01 09:55,2023-03-27 08:13,,,,,,,,,21,client-libs,,0,,,,,,,,,,,,,,,,,"AWT passes JNI_FALSE to the JVM to avoid a copy, which is not correct since JNI has absolutely no control over whether a copy is made or not. The parameter in question is a pointer to a jboolean that the JVM sets to indicate whether it made a copy or not, which should be passed nullptr because we don't bother about the copy status of the jint",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i30ul7:",9223372036854775807,b16,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@5a9b3fd3,,,,,,,,,"2023-03-22 07:30;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/13140
Date: 2023-03-22 14:20:54 +0000;;;","2023-03-27 08:13;dukebot;Changeset: 6b2f34f8
Author:    Julian Waters <jwaters@openjdk.org>
Date:      2023-03-27 15:12:20 +0000
URL:       https://git.openjdk.org/jdk/commit/6b2f34f88a39031d17b858ffcf631b2fd101c2eb
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Declaration aliasing between boolean and jboolean is wrong,JDK-8304717,5096880,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,jwaters,jwaters,jwaters,2023-03-22 07:12,2023-04-17 10:41,2023-10-01 09:55,2023-04-10 23:54,,,,,,,,,21,core-libs,,0,,,,,,,,,,,,,,,,,"A couple of spots wrongly refer to boolean and jboolean as the same thing. While this does still compile thanks to a happy accident and implicit conversions, they are not the same at all, and should be fixed before a future compiler error happens if their declarations are touched",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i30ukz:",9223372036854775807,b18,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4c088d55,,,,,,,,,"2023-03-22 07:20;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/13139
Date: 2023-03-22 14:02:53 +0000;;;","2023-04-10 23:54;dukebot;Changeset: cd7d53c8
Author:    Julian Waters <jwaters@openjdk.org>
Date:      2023-04-11 06:52:34 +0000
URL:       https://git.openjdk.org/jdk/commit/cd7d53c88c27eedbe16020b88c2219708d170a1e
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Parent class contains 6 constants that should be static,JDK-8304705,5096864,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,jhendrikx,jhendrikx,jhendrikx,2023-03-22 02:55,2023-04-06 05:13,2023-10-01 09:55,2023-03-22 08:46,jfx20,,,,,,,,jfx21,javafx,,0,noreg-cleanup,,,,,,,,,,,,,,,,"The Parent class has the following constants that seems to be erroneously not declared static (and if they should not be, then a comment explaining why would be good).

    private final int LEFT_INVALID = 1;
    private final int TOP_INVALID = 1 << 1;
    private final int NEAR_INVALID = 1 << 2;
    private final int RIGHT_INVALID = 1 << 3;
    private final int BOTTOM_INVALID = 1 << 4;
    private final int FAR_INVALID = 1 << 5;

These now consume space in every Parent instance, which is often the bulk of all nodes used in a scene graph.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i30uhf:",9223372036854775807,b10,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4143e3f7,,,,,,,,,"2023-03-22 03:06;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jfx/pull/1064
Date: 2023-03-22 10:00:04 +0000;;;","2023-03-22 08:46;dukebot;Changeset: 85e529de
Author:    John Hendrikx <jhendrikx@openjdk.org>
Date:      2023-03-22 15:43:46 +0000
URL:       https://git.openjdk.org/jfx/commit/85e529de7307b85c2ead204284cefa3994553310
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
[Lilliput/JDK17] Increase size of C2HandleAnonOMOwnerStub on x86,JDK-8304702,5096861,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,rkennke,rkennke,rkennke,2023-03-21 23:48,2023-03-22 05:28,2023-10-01 09:55,2023-03-22 05:28,repo-lilliput-17,,,,,,,,repo-lilliput-17,hotspot,,0,lilliput,,,,,,,,,,,,,,,,"Deeper testing has revealed that the C2HandleAnonOMOwnerStub can take 18 bytes instead of currently used 17. We shall increase the max_size() for that stub. I haven't seen it on any of my machines, but it came up in testing of JDK-8291555 in Oracle's testing infra. It's probably rare and/or machine dependent.",,,,,,,,,,JDK-8304690,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,x86,x86_64,,,,,,,,,generic,,,,,,"0|i30ugr:",9223372036854775807,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2023-03-22 00:07;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/lilliput-jdk17u/pull/14
Date: 2023-03-22 06:58:51 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Duplicate class names in dynamicArchive tests can lead to test failure,JDK-8304696,5096855,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,ccheung,dholmes,dholmes,2023-03-21 21:47,2023-04-26 23:15,2023-10-01 09:55,2023-04-21 15:13,21,,,,,,,,21,hotspot,,0,cds,dynamic-cds,noreg-self,,,,,,,,,,,,,,"I was running all the runtime/cds/appcds/dynamicArchive tests and had an unexpected and strange failure in  LambdaProxyDuringShutdown.java:

java.lang.RuntimeException: 'class.load.*Outer[$]Inner[$][$]Lambda.*0x.*source:.Outer' missing from stdout/stderr

When I examined the log there was no sign that the installed shutdown hook had executed, causing the Outer and Inner classes to be loaded. After much experimentation and head scratching I did observe some unexpected output:

shut down hook invoked...

Searching the sources this comes from:

class MyShutdown extends Thread{
    public void run(){
        System.out.println(""shut down hook invoked..."");
    }
}

in class LinkClassApp - which is a different test! The problem is that  LambdaProxyDuringShutdownApp also has this:

class MyShutdown extends Thread {
    public void run() {
        Outer.Inner inner = new Outer.Inner();
    }
}

and it became evident that when running the tests locally, under the right/wrong conditions the  LambdaProxy test was using the LinkClass test's MyShutdown class. Sure enough this class gets compiled into:

JTwork/classes/test/hotspot/jtreg/runtime/cds/appcds/dynamicArchive/test-classes

which is shared by both tests.

Simple fix is to rename one of the classes so there is no duplication.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i30uff:",9223372036854775807,b20,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,,,"2023-04-17 16:12;ccheung;Since the class gets compiled into JTwork/classes/test/hotspot/jtreg/runtime/cds/appcds/dynamicArchive/test-classes, it indicates that the tests were not run in parallel (i.e. with the -conc:<n> option). If the tests were run in parallel, the classes are usually created in a sub-directory for each test like the following:

 415 Apr 17 22:26 ./JTwork/classes/0/test/hotspot/jtreg/runtime/cds/appcds/dynamicArchive/test-classes/MyShutdown.class
 341 Apr 17 22:26 ./JTwork/classes/1/test/hotspot/jtreg/runtime/cds/appcds/dynamicArchive/test-classes/MyShutdown.class

The problem could be reproduced by running the LinkClassTest.java and LambdaProxyDuringShutdown.java serially in that order.
Then, without deleting anything under the JTwork/classes dir, run the two tests serially again in the same order.;;;","2023-04-19 10:14;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/13542
Date: 2023-04-19 17:07:14 +0000;;;","2023-04-21 15:13;dukebot;Changeset: b2240bf8
Author:    Calvin Cheung <ccheung@openjdk.org>
Date:      2023-04-21 22:11:40 +0000
URL:       https://git.openjdk.org/jdk/commit/b2240bf870cd57983fda0bc3b0e205acfdd1fd2a
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,
Runtime exception thrown when break stmt is missing,JDK-8304694,5096849,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,jlahoda,mtrudeau,mtrudeau,2023-03-21 15:25,2023-04-03 12:08,2023-10-01 09:55,2023-03-27 08:04,20,21,,,,,,,21,tools,,0,,,,,,,,,,,,,,,,,"The following snippet throws an exception at runtime, because of the missing break stmt.   I was wondering if the compiler couldn’t help here and warn about the missing break stmt.

public class T1 {
    public static void main(String argv[]) {

        record Point(int x, int y) {}
        Point p = new Point(1, 3);

        switch (p) {
        case Point(var x, var y) when y == 2:
            System.out.println(""Value of x = "" + x);  // <<- line 10
            break;
        case Point(var x, var y) :
            System.out.println(""Value of y = "" + y);
        }
    }
}
The exception occurs at line 10 - which makes it even less obvious to figure out.  Output is:
Value of y = 3
Exception in thread ""main"" java.lang.MatchException
	at T1.main(T1.java:10)

-----

Command line used:
    ~/java/jdk21/jdk1.21.0/bin/javac --enable-preview --release 21 T1.java
    ~/java/jdk21/jdk1.21.0/bin/java --enable-preview T1
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i30ue3:",9223372036854775807,b16,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4dca67bd,,,,,,,,,"2023-03-22 09:35;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/13146
Date: 2023-03-22 16:14:34 +0000;;;","2023-03-27 08:04;dukebot;Changeset: 138cdc92
Author:    Jan Lahoda <jlahoda@openjdk.org>
Date:      2023-03-27 15:01:45 +0000
URL:       https://git.openjdk.org/jdk/commit/138cdc9283ae8f3367e51f0fe7e27833118dd7cb
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
[Lilliput] Increase size of C2HandleAnonOMOwnerStub on x86,JDK-8304690,5096842,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,rkennke,rkennke,rkennke,2023-03-21 10:50,2023-03-21 23:48,2023-10-01 09:55,2023-03-21 11:54,repo-lilliput,,,,,,,,repo-lilliput,hotspot,,0,,,,,,,,,,,,,,,,,"Deeper testing has revealed that the C2HandleAnonOMOwnerStub can take 18 bytes instead of currently used 17. We shall increase the max_size() for that stub. I haven't seen it on any of my machines, but it came up in testing of JDK-8291555 in Oracle's testing infra. It's probably rare and/or machine dependent.",,,,,,,,,,,JDK-8304702,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,x86,x86_64,,,,,,,,,generic,,,,,,"0|i30ucj:",9223372036854775807,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2023-03-21 11:08;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/lilliput/pull/82
Date: 2023-03-21 18:01:00 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Fix whitespace parsing in libjdwp,JDK-8304685,5096837,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,kevinw,jcking,jcking,2023-03-21 10:02,2023-05-24 23:10,2023-10-01 09:55,2023-05-19 11:59,21,,,,,,,,21,core-svc,,0,,,,,,,,,,,,,,,,,"AddressSanitizer: heap-buffer-overflow on address 0x60d0000074f4 at pc 0x7ff1d9f94160 bp 0x7ff1da1f8180 sp 0x7ff1da1f8178
READ of size 1 at 0x60d0000074f4 thread T1
    #0 0x7ff1d9f9415f in skipWhitespace src/jdk.jdwp.agent/unix/native/libjdwp/exec_md.c:34
    #1 0x7ff1d9f9415f in dbgsysExec src/jdk.jdwp.agent/unix/native/libjdwp/exec_md.c:91
    #2 0x7ff1d9faf949 in launch src/jdk.jdwp.agent/share/native/libjdwp/transport.c:455
    #3 0x7ff1d9faf949 in transport_startTransport src/jdk.jdwp.agent/share/native/libjdwp/transport.c:600
    #4 0x7ff1d9f78e6a in startTransport src/jdk.jdwp.agent/share/native/libjdwp/debugInit.c:522
    #5 0x7ff1d9f73880 in bagEnumerateOver src/jdk.jdwp.agent/share/native/libjdwp/bag.c:154
    #6 0x7ff1d9f7a402 in initialize src/jdk.jdwp.agent/share/native/libjdwp/debugInit.c:677
    #7 0x7ff1d9f7b3b5 in cbEarlyException src/jdk.jdwp.agent/share/native/libjdwp/debugInit.c:461
    #8 0x7ff1d6dc6147 in JvmtiExport::post_exception_throw(JavaThread*, Method*, unsigned char*, oopDesc*) src/hotspot/share/prims/jvmtiExport.cpp:2043
    #9 0x7ff1d6544673 in InterpreterRuntime::exception_handler_for_exception(JavaThread*, oopDesc*) src/hotspot/share/interpreter/interpreterRuntime.cpp:563
    #10 0x7ff1c4358b95  (<unknown module>)

0x60d0000074f4 is located 0 bytes to the right of 132-byte region [0x60d000007470,0x60d0000074f4)
allocated by thread T1 here:
    #0 0x7ff1daeb89cf in __interceptor_malloc ../../../../src/libsanitizer/asan/asan_malloc_linux.cpp:69
    #1 0x7ff1d74b4367 in os::malloc(unsigned long, MEMFLAGS, NativeCallStack const&) src/hotspot/share/runtime/os.cpp:654
    #2 0x7ff1d74b4367 in os::malloc(unsigned long, MEMFLAGS) src/hotspot/share/runtime/os.cpp:622
    #3 0x7ff1d6d2bd34 in JvmtiEnvBase::allocate(long, unsigned char**) src/hotspot/share/prims/jvmtiEnvBase.hpp:255
    #4 0x7ff1d6d2bd34 in JvmtiEnv::Allocate(long, unsigned char**) src/hotspot/share/prims/jvmtiEnv.cpp:136
    #5 0x7ff1d6c58712 in jvmti_Allocate build/linux-x86_64-server-release/hotspot/variant-server/gensrc/jvmtifiles/jvmtiEnter.cpp:354
    #6 0x7ff1d9fb9a61 in jvmtiAllocate src/jdk.jdwp.agent/share/native/libjdwp/util.c:1776
    #7 0x7ff1d9f93ceb in dbgsysExec src/jdk.jdwp.agent/unix/native/libjdwp/exec_md.c:62
    #8 0x7ff1d9faf949 in launch src/jdk.jdwp.agent/share/native/libjdwp/transport.c:455
    #9 0x7ff1d9faf949 in transport_startTransport src/jdk.jdwp.agent/share/native/libjdwp/transport.c:600
    #10 0x7ff1d9f78e6a in startTransport src/jdk.jdwp.agent/share/native/libjdwp/debugInit.c:522
    #11 0x7ff1d9f73880 in bagEnumerateOver src/jdk.jdwp.agent/share/native/libjdwp/bag.c:154
    #12 0x7ff1d9f7a402 in initialize src/jdk.jdwp.agent/share/native/libjdwp/debugInit.c:677
    #13 0x7ff1d9f7b3b5 in cbEarlyException src/jdk.jdwp.agent/share/native/libjdwp/debugInit.c:461
    #14 0x7ff1d6dc6147 in JvmtiExport::post_exception_throw(JavaThread*, Method*, unsigned char*, oopDesc*) src/hotspot/share/prims/jvmtiExport.cpp:2043
    #15 0x7ff1d6544673 in InterpreterRuntime::exception_handler_for_exception(JavaThread*, oopDesc*) src/hotspot/share/interpreter/interpreterRuntime.cpp:563
    #16 0x7ff1c4358b95  (<unknown module>)
    #17 0x7ff1c4354d01  (<unknown module>)
    #18 0x7ff1c435505d  (<unknown module>)
    #19 0x7ff1c4337cc5  (<unknown module>)
    #20 0x7ff1d655f676 in JavaCalls::call_helper(JavaValue*, methodHandle const&, JavaCallArguments*, JavaThread*) src/hotspot/share/runtime/javaCalls.cpp:415
    #21 0x7ff1d682c904 in jni_invoke_static src/hotspot/share/prims/jni.cpp:887
    #22 0x7ff1d6837cb7 in jni_CallStaticVoidMethod src/hotspot/share/prims/jni.cpp:1711
    #23 0x7ff1db4eb49a in JavaMain src/java.base/share/native/libjli/java.c:547
    #24 0x7ff1db4f1708 in ThreadJavaMain src/java.base/unix/native/libjli/java_md.c:650
    #25 0x7ff1daca7fd3 in start_thread nptl/pthread_create.c:442

Thread T1 created by T0 here:
    #0 0x7ff1dae49726 in __interceptor_pthread_create ../../../../src/libsanitizer/asan/asan_interceptors.cpp:207
    #1 0x7ff1db4f33a1 in CallJavaMainInNewThread src/java.base/unix/native/libjli/java_md.c:691
    #2 0x7ff1db4ee22d in ContinueInNewThread src/java.base/share/native/libjli/java.c:2280
    #3 0x7ff1db4ef6ae in JLI_Launch src/java.base/share/native/libjli/java.c:340
    #4 0x556bc65c63bc in main src/java.base/share/native/launcher/main.c:166
    #5 0x7ff1dac46189 in __libc_start_call_main ../sysdeps/nptl/libc_start_call_main.h:58",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i30ubf:",9223372036854775807,b24,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@3397f701,,,,,,,,,"2023-03-28 11:05;mwthomps;<S12Y triage team>: Please provide a reproducible test case;;;","2023-05-12 11:51;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/13964
Date: 2023-05-12 18:32:35 +0000;;;","2023-05-19 11:59;dukebot;Changeset: 939344b8
Author:    Kevin Walls <kevinw@openjdk.org>
Date:      2023-05-19 18:57:55 +0000
URL:       https://git.openjdk.org/jdk/commit/939344b8433b32166f42ad73ae3d96e84b033478
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,
Memory leak in WB_IsMethodCompatible,JDK-8304683,5096835,Bug,Resolved,JDK,JDK,software,duke,,,P5,Fixed,jcking,jcking,jcking,2023-03-21 09:42,2023-04-27 07:06,2023-10-01 09:55,2023-03-22 08:30,17,20,21,,,,,,21,hotspot,,0,jdk17u-fix-request,jdk17u-fix-yes,jdk20u-fix-request,jdk20u-fix-SQE-ok-next,jdk20u-fix-yes,oracle-triage-11,oracle-triage-21,,,,,,,,,,"Direct leak of 5376 byte(s) in 24 object(s) allocated from:
    #0 0x7fba86ab89cf in __interceptor_malloc ../../../../src/libsanitizer/asan/asan_malloc_linux.cpp:69
    #1 0x7fba830b4a6f in os::malloc(unsigned long, MEMFLAGS, NativeCallStack const&) src/hotspot/share/runtime/os.cpp:654
    #2 0x7fba80c1ce77 in AllocateHeap(unsigned long, MEMFLAGS, NativeCallStack const&, AllocFailStrategy::AllocFailEnum) src/hotspot/share/memory/allocation.cpp:42
    #3 0x7fba80c1ce77 in AllocateHeap(unsigned long, MEMFLAGS, AllocFailStrategy::AllocFailEnum) src/hotspot/share/memory/allocation.cpp:52
    #4 0x7fba81653e1e in CHeapObjBase::operator new(unsigned long, MEMFLAGS) src/hotspot/share/memory/allocation.hpp:183
    #5 0x7fba81653e1e in CHeapObj<(MEMFLAGS)7>::operator new(unsigned long) src/hotspot/share/memory/allocation.hpp:237
    #6 0x7fba81653e1e in DirectiveSet::clone(DirectiveSet const*) src/hotspot/share/compiler/compilerDirectives.cpp:564
    #7 0x7fba81658891 in DirectiveSetPtr::cloned() src/hotspot/share/compiler/compilerDirectives.cpp:327
    #8 0x7fba81658891 in DirectiveSet::compilecommand_compatibility_init(methodHandle const&) src/hotspot/share/compiler/compilerDirectives.cpp:381
    #9 0x7fba8165a103 in DirectiveSet::compilecommand_compatibility_init(methodHandle const&) src/hotspot/share/compiler/compilerDirectives.cpp:353
    #10 0x7fba8165a103 in DirectivesStack::getMatchingDirective(methodHandle const&, AbstractCompiler*) src/hotspot/share/compiler/compilerDirectives.cpp:723
    #11 0x7fba83d0fe4f in is_excluded_for_compiler src/hotspot/share/prims/whitebox.cpp:826
    #12 0x7fba83d0fe4f in WB_IsMethodCompilable src/hotspot/share/prims/whitebox.cpp:869
    #13 0x7fba6ff58ddf  (<unknown module>)
    #14 0x7fba6ff5470d  (<unknown module>)
    #15 0x7fba6ff5470d  (<unknown module>)
    #16 0x7fba6ff5470d  (<unknown module>)
    #17 0x7fba6ff545e5  (<unknown module>)
    #18 0x7fba6ff545e5  (<unknown module>)
    #19 0x7fba6ff545e5  (<unknown module>)
    #20 0x7fba6ff54a71  (<unknown module>)
    #21 0x7fba6ff54a71  (<unknown module>)
    #22 0x7fba6ff545e5  (<unknown module>)
    #23 0x7fba6ff545e5  (<unknown module>)
    #24 0x7fba6ff37cc5  (<unknown module>)
    #25 0x7fba8215f676 in JavaCalls::call_helper(JavaValue*, methodHandle const&, JavaCallArguments*, JavaThread*) src/hotspot/share/runtime/javaCalls.cpp:415
    #26 0x7fba8242c904 in jni_invoke_static src/hotspot/share/prims/jni.cpp:887
    #27 0x7fba82437cb7 in jni_CallStaticVoidMethod src/hotspot/share/prims/jni.cpp:1711
    #28 0x7fba8725049a in JavaMain src/java.base/share/native/libjli/java.c:547
    #29 0x7fba87256708 in ThreadJavaMain src/java.base/unix/native/libjli/java_md.c:650
    #30 0x7fba868a7fd3 in start_thread nptl/pthread_create.c:442",,,,,,,,,,,JDK-8305132,JDK-8306167,JDK-8305556,JDK-8307035,JDK-8306521,,,,,,,,,,,,,,,,JDK-8304544,,,,,,,,,,JDK-8263582,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i30uaz:",9223372036854775807,b16,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2023-03-21 09:55;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/13124
Date: 2023-03-21 16:45:30 +0000;;;","2023-03-21 13:42;dlong;ILW = small memory leak; when using WB_IsMethodCompilable; no workaround = LMH = P5 ;;;","2023-03-22 08:30;dukebot;Changeset: 760c0128
Author:    Justin King <jcking@openjdk.org>
Date:      2023-03-22 15:28:44 +0000
URL:       https://git.openjdk.org/jdk/commit/760c0128a4ef787c8c8addb26894c072ba8b2eb1
;;;","2023-03-29 04:40;thartmann;Fix Request (JDK 20u)
Resolves a small memory leak. The fix is low risk, was already backported to Oracle JDK 17u and tested in the JDK 21 and 17u CIs. The backport applies cleanly.;;;","2023-03-29 04:46;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk20u/pull/37
Date: 2023-03-29 11:40:26 +0000;;;","2023-04-18 12:56;goetz;Fix request [17u]

I backport this for parity with 17.0.8-oracle.
No risk, basically a test infra fix.
Clean backport. SAP nightly testing passed.;;;","2023-04-18 13:01;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/1266
Date: 2023-04-18 19:55:21 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,
compiler/sharedstubs/SharedStubToInterpTest.java fails after JDK-8304387,JDK-8304681,5096832,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,xlinzheng,chagedorn,chagedorn,2023-03-21 08:54,2023-04-03 12:11,2023-10-01 09:55,2023-03-29 01:31,21,,,,,,,,21,hotspot,,0,noreg-self,oracle-triage-21,problemlist,tier2,tier3,tier4,,,,,,,,,,,"JDK-8304387 moved the positions of static stubs which lets `compiler/sharedstubs/SharedStubToInterpTest.java` fail in tier2 on different architectures as the test still expects the old layout. The test should be fixed accordingly.

Here's a log file snippet:

----------System.err:(12/767)----------
java.lang.RuntimeException: Found {static_stub} before Deopt Handler Code
	at compiler.sharedstubs.SharedStubToInterpTest.checkOutput(SharedStubToInterpTest.java:110)
	at compiler.sharedstubs.SharedStubToInterpTest.runTest(SharedStubToInterpTest.java:70)
	at compiler.sharedstubs.SharedStubToInterpTest.main(SharedStubToInterpTest.java:80)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
	at java.base/java.lang.reflect.Method.invoke(Method.java:578)
	at com.sun.javatest.regtest.agent.MainActionHelper$AgentVMRunnable.run(MainActionHelper.java:312)
	at java.base/java.lang.Thread.run(Thread.java:1623)

JavaTest Message: Test threw exception: java.lang.RuntimeException
JavaTest Message: shutting down test

result: Failed. Execution failed: `main' threw exception: java.lang.RuntimeException: Found {static_stub} before Deopt Handler Code",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8304387,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i30uab:",9223372036854775807,b16,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2023-03-21 09:07;chagedorn;ILW = Test failure in tier2, single test, no workaround = MLH = P4

[~xlinzheng] can you have a look at it?;;;","2023-03-21 09:08;chagedorn;The test has been problemlisted for now as it created noise in the CI (failures in tier2). Don't forget to unproblemlist the test again once it is fixed :-);;;","2023-03-21 10:03;dcubed;The ProblemListing is in jdk-21+15-1222.;;;","2023-03-21 19:23;xlinzheng;Ah! Very thankful for taking time to cover this issue, [~chagedorn] and [~dcubed]. My apologies that I was focusing on hs_errs and failed to observe the Exception failure. I am working on this asap. And also thanks for the kind reminder! :-);;;","2023-03-21 20:48;xlinzheng;I would like to ask this feature's author [~eastigeevich] one minor question:

I was wondering if the comment ""Static stubs must be created at the end of the Stub section."" in ""SharedStubToInterpTest.java"" [1] is a design for which purpose? For I recently moved shared static stubs and shared runtime trampolines back between the ""[Stub Code]"" and ""[Exception Handler]"" in JDK-8304387 and I think we can relax the limitation. What do you think? Thank you very much in advance!

[1] https://github.com/openjdk/jdk/blob/0deb648985b018653ccdaf193dc13b3cf21c088a/test/hotspot/jtreg/compiler/sharedstubs/SharedStubToInterpTest.java#L109;;;","2023-03-21 22:18;xlinzheng;A draft PR [1] to fix this test was filed. After a positive confirmation from Evgeny, I would mark that PR as RFR.

[1] https://github.com/openjdk/jdk/pull/13135;;;","2023-03-22 00:54;chagedorn;Thanks [~xlinzheng] for taking care of it!;;;","2023-03-27 04:16;eastigeevich;Thanks [~xlinzheng] for taking care of it.

> I was wondering if the comment ""Static stubs must be created at the end of the Stub section."" in ""SharedStubToInterpTest.java"" [1] is a design for which purpose?

There was no specific purpose. 

> I think we can relax the limitation. What do you think? 

Yes, we can relax. I don't have any objections.;;;","2023-03-27 04:53;xlinzheng;Thanks a lot for the response, [~eastigeevich]!;;;","2023-03-27 05:00;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/13135
Date: 2023-03-22 05:14:21 +0000;;;","2023-03-29 01:31;dukebot;Changeset: 09852884
Author:    Xiaolin Zheng <xlinzheng@openjdk.org>
Committer: Aleksey Shipilev <shade@openjdk.org>
Date:      2023-03-29 08:29:03 +0000
URL:       https://git.openjdk.org/jdk/commit/09852884cc4f55b2c95e2dbe28cf5c7ad9095684
;;;",,,,,,,,,,,,,,,,,,,,
"[vectorapi] x86_32: Crash in Assembler::kmovql(Address, KRegister)",JDK-8304676,5096823,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,qamai,qamai,qamai,2023-03-21 07:43,2023-05-01 10:09,2023-10-01 09:55,2023-04-25 09:16,21,,,,,,,,21,hotspot,,0,oraclejdk-na,oracle-triage-11,oracle-triage-17,oracle-triage-21,,,,,,,,,,,,,"Run this benchmark with --enable-preview --add-modules=jdk.incubator.vector -XX:-TieredCompilation -XX:CompileCommand=print,*.Sample::run on Intel SDE results in the following SIGSEGV or assert(assm->inst_mark() == __null) failed: overlapping instructions",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"2023-03-21 07:25;qamai;Sample.java;https://bugs.openjdk.org/secure/attachment/103073/Sample.java","2023-03-21 07:24;qamai;hs_err_pid29355.log;https://bugs.openjdk.org/secure/attachment/103075/hs_err_pid29355.log","2023-03-21 07:24;qamai;replay_pid29355.log;https://bugs.openjdk.org/secure/attachment/103074/replay_pid29355.log",,,,,,,,,,x86,,,,,,,,,,,,,,,,"0|i30u8b:",9223372036854775807,b20,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2023-04-23 12:57;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/13603
Date: 2023-04-23 19:51:58 +0000;;;","2023-04-25 09:16;dukebot;Changeset: e8f62de1
Author:    Quan Anh Mai <qamai@openjdk.org>
Date:      2023-04-25 16:13:03 +0000
URL:       https://git.openjdk.org/jdk/commit/e8f62de1cf791d0212805c7a5a97497b67e2a34a
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
javac regression: Compilation with --release 8 fails on underscore in enum identifiers,JDK-8304671,5096818,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,jlahoda,mbaesken,mbaesken,2023-03-21 06:37,2023-07-04 23:28,2023-10-01 09:55,2023-03-23 01:36,14,17,20,21,,,,,21,tools,,0,jdk17u-fix-request,jdk17u-fix-yes,jdk20u-fix-request,jdk20u-fix-SQE-ok-next,jdk20u-fix-yes,,,,,,,,,,,,"Using the underscore '_' as identifier was forbidden with JDK 9, however still allowed for JDK8. Hence the attached example coding should compile with the javac option '--release 8'.

This fails to work with JDK14 (and newer):
--------------
OpenJDK\14\bin\javac --release 8 UnderscoreEnum.java
UnderscoreEnum.java:4: error: enum constant expected here
        NULL(null), _(""&&""), __(""||""), OR(""OR"");
                    ^
UnderscoreEnum.java:4: warning: as of release 9, '_' is a keyword, and may not be used as an identifier
        NULL(null), _(""&&""), __(""||""), OR(""OR"");
                    ^
UnderscoreEnum.java:4: error: illegal start of type
        NULL(null), _(""&&""), __(""||""), OR(""OR"");
                      ^
UnderscoreEnum.java:9: error: illegal start of expression
        CCEnum(final String value) {
               ^
UnderscoreEnum.java:9: error: ';' expected
        CCEnum(final String value) {
                                 ^
4 errors
1 warning

With JDK13 or below, it still works nicely:
--------------
OpenJDK\13\bin\javac.exe   --release 8 UnderscoreEnum.java
UnderscoreEnum.java:4: warning: as of release 9, '_' is a keyword, and may not be used as an identifier
        NULL(null), _(""&&""), __(""||""), OR(""OR"");
                    ^
1 warning

Simple identifiers named '_'  work with --release 8 (or -source 8); but when used in enum the compatibility breaks.
",,,,,,,,,,,JDK-8307018,JDK-8305238,JDK-8310050,JDK-8305123,JDK-8311399,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8228647,,,,"2023-03-21 06:37;mbaesken;UnderscoreEnum.java;https://bugs.openjdk.org/secure/attachment/103072/UnderscoreEnum.java",,,,,,,,,,,,generic,,,,,,,b10,14,,generic,,,,,,"0|i30u77:",9223372036854775807,b16,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4dca67bd,,,,,,,,,"2023-03-22 03:02;clanger;I think I could narrow the regression down to JDK-8228647, introduced in JDK14+10;;;","2023-03-22 05:52;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/13137
Date: 2023-03-22 12:44:49 +0000;;;","2023-03-23 01:36;dukebot;Changeset: 63d4afbe
Author:    Jan Lahoda <jlahoda@openjdk.org>
Date:      2023-03-23 08:35:25 +0000
URL:       https://git.openjdk.org/jdk/commit/63d4afbeb17df4eff0f65041926373ee62a8a33a
;;;","2023-03-23 02:46;mbaesken;jdk20u backport request
I would like to have the patch in jdk20u as well, because the issue is present there too.  The backport is clean and low-to-medium risk.;;;","2023-03-23 02:48;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk20u/pull/23
Date: 2023-03-23 09:40:21 +0000;;;","2023-03-24 06:17;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/1216
Date: 2023-03-24 13:09:09 +0000;;;","2023-03-28 23:44;mbaesken;jdk17u backport request
I would like to have the patch in jdk17u-dev as well, because the issue is present there too. The backport needs a bit of adjustment (COPYRIGHT year info, bug number list in the test and removal of usage of some compiler.warn related strings not present in jdk17) and is low-to-medium risk.;;;",,,,,,,,,,,,,,,,,,,,,,,,
Change to Xcode12.4+1.1 devkit,JDK-8304665,5096811,Bug,Resolved,JDK,JDK,software,duke,,,P2,Fixed,kcr,kcr,kcr,2023-03-21 06:00,2023-09-01 03:39,2023-10-01 09:55,2023-03-21 16:35,8,jfx11,jfx17,jfx20,jfx21,,,,jfx21,javafx,,0,noreg-build,sn_140,,,,,,,,,,,,,,,"This is the FX equivalent of JDK-8299693.

Bump the devkit version used when building on macOS at Oracle to work around an issue when building on Ventura.
",,,,,,,,,,,JDK-8305702,JDK-8315508,JDK-8304808,JDK-8305660,,,,,,,,,,,,,,,,,,,,,,INTJDK-7630800,JDK-8299693,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i30u5n:",9223372036854775807,b10,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@1556b386,,,,,,,,,"2023-03-21 07:15;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jfx/pull/1063
Date: 2023-03-21 14:07:49 +0000;;;","2023-03-21 16:35;dukebot;Changeset: d875c876
Author:    Kevin Rushforth <kcr@openjdk.org>
Date:      2023-03-21 23:33:54 +0000
URL:       https://git.openjdk.org/jfx/commit/d875c876512260b47e93c49270e7dcc589a7c8b2
;;;","2023-09-01 03:03;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jfx17u/pull/136
Date: 2023-09-01 09:58:20 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,
java/awt/Mouse/EnterExitEvents/DragWindowTest.java fails with Compilation Error on JDK 8u,JDK-8304636,5096778,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,rkannathpari,dmarkov,dmarkov,2023-03-21 02:38,2023-04-09 13:43,2023-10-01 09:55,2023-03-23 06:27,8u381,,,,,,,,8u381,client-libs,,0,11-na,17-na,cssn23_03_02,regression,regression_8297296,sustaining,,,,,,,,,,,"java/awt/Mouse/EnterExitEvents/DragWindowTest.java fails on JDK 8u. This is  regression caused by back port of JDK-8297296 to JDK 8u

Log fragment:
STDERR:
[2023-03-20T12:16:40,919Z] C:\ade\mesos\work_dir\jib-master\install\2023-03-20-0710123.dmitry.markov.jdk8u-cpu\src.full\jdk\test\java\awt\Mouse\EnterExitEvents\DragWindowTest.java:69: error: cannot find symbol
[2023-03-20T12:16:40,919Z]         SunToolkit toolkit = (SunToolkit) Toolkit.getDefaultToolkit();
[2023-03-20T12:16:40,919Z]         ^
[2023-03-20T12:16:40,919Z]   symbol:   class SunToolkit
[2023-03-20T12:16:40,919Z]   location: class DragWindowTest
[2023-03-20T12:16:40,919Z] C:\ade\mesos\work_dir\jib-master\install\2023-03-20-0710123.dmitry.markov.jdk8u-cpu\src.full\jdk\test\java\awt\Mouse\EnterExitEvents\DragWindowTest.java:69: error: cannot find symbol
[2023-03-20T12:16:40,919Z]         SunToolkit toolkit = (SunToolkit) Toolkit.getDefaultToolkit();
[2023-03-20T12:16:40,919Z]                               ^
[2023-03-20T12:16:40,919Z]   symbol:   class SunToolkit
[2023-03-20T12:16:40,919Z]   location: class DragWindowTest
[2023-03-20T12:16:40,919Z] C:\ade\mesos\work_dir\jib-master\install\2023-03-20-0710123.dmitry.markov.jdk8u-cpu\src.full\jdk\test\java\awt\Mouse\EnterExitEvents\DragWindowTest.java:69: error: cannot find symbol
[2023-03-20T12:16:40,919Z]         SunToolkit toolkit = (SunToolkit) Toolkit.getDefaultToolkit();
[2023-03-20T12:16:40,919Z]                                           ^
[2023-03-20T12:16:40,919Z]   symbol:   variable Toolkit
[2023-03-20T12:16:40,919Z]   location: class DragWindowTest
[2023-03-20T12:16:40,919Z] 3 errors
[2023-03-20T12:16:40,919Z] 
[2023-03-20T12:16:40,919Z] TEST RESULT: Failed. Compilation failed: Compilation failed",,,,,,,,,,,JDK-8305031,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8297296,,,,,,,,,,,,,,,,,,,,,generic,,,,,,,,8u381,,,,,,,,"0|i30tyb:",9223372036854775807,b01,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@5a9b3fd3,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Method::invoke rewraps InvocationTargetException if a caller-sensitive method throws IAE,JDK-8304585,5096726,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,mchung,tzezula,tzezula,2023-03-21 00:51,2023-04-05 23:16,2023-10-01 09:55,2023-03-30 09:10,,,,,,,,,21,core-libs,,0,,,,,,,,,,,,,,,,,"The InvocationTargetException is duplicated when the invocation of a caller-sensitive method without a caller-sensitive adapter fails.
The changed behavior was introduced by  https://bugs.openjdk.org/browse/JDK-8271820.

Test case:
{code}
import java.lang.reflect.Field;
import java.lang.reflect.Method;

public class Main {
    public int value = 10;
    public static void main(String[] args) throws ReflectiveOperationException {
        Field f = Main.class.getDeclaredField(""value"");
        Method m = Field.class.getDeclaredMethod(""get"", Object.class);
        m.invoke(f, new Object());
    }
}
{code}

The InvocationTargetException stack trace on JDK 20:
{code}
Exception in thread ""main"" java.lang.reflect.InvocationTargetException
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:146)
	at java.base/java.lang.reflect.Method.invoke(Method.java:578)
	at Main.main(Main.java:11)
Caused by: java.lang.reflect.InvocationTargetException
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:131)
	... 2 more
Caused by: java.lang.IllegalArgumentException: Can not get int field Main.value on java.lang.Object
	at java.base/jdk.internal.reflect.MethodHandleFieldAccessorImpl.newGetIllegalArgumentException(MethodHandleFieldAccessorImpl.java:86)
	at java.base/jdk.internal.reflect.MethodHandleIntegerFieldAccessorImpl.getInt(MethodHandleIntegerFieldAccessorImpl.java:84)
	at java.base/jdk.internal.reflect.MethodHandleIntegerFieldAccessorImpl.get(MethodHandleIntegerFieldAccessorImpl.java:55)
	at java.base/java.lang.reflect.Field.get(Field.java:440)
	... 3 more
{code}

The InvocationTargetException stack trace on JDK 17:
{code}
Exception in thread ""main"" java.lang.reflect.InvocationTargetException
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at Main.main(Main.java:11)
Caused by: java.lang.IllegalArgumentException: Can not set int field Main.value to java.lang.Object
	at java.base/jdk.internal.reflect.UnsafeFieldAccessorImpl.throwSetIllegalArgumentException(UnsafeFieldAccessorImpl.java:167)
	at java.base/jdk.internal.reflect.UnsafeFieldAccessorImpl.throwSetIllegalArgumentException(UnsafeFieldAccessorImpl.java:171)
	at java.base/jdk.internal.reflect.UnsafeFieldAccessorImpl.ensureObj(UnsafeFieldAccessorImpl.java:58)
	at java.base/jdk.internal.reflect.UnsafeIntegerFieldAccessorImpl.getInt(UnsafeIntegerFieldAccessorImpl.java:56)
	at java.base/jdk.internal.reflect.UnsafeIntegerFieldAccessorImpl.get(UnsafeIntegerFieldAccessorImpl.java:36)
	at java.base/java.lang.reflect.Field.get(Field.java:425)
	... 5 more
{code}

Expected: The InvocationTargetException should have the IllegalArgumentException as a cause.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,x86,,,,,,,,,,generic,,,,,,"0|i30tmr:",9223372036854775807,b17,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@313ae9a0,,,,,,,,,"2023-03-29 14:32;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/13233
Date: 2023-03-29 21:26:24 +0000;;;","2023-03-30 09:10;dukebot;Changeset: 1d7bb1ff
Author:    Mandy Chung <mchung@openjdk.org>
Date:      2023-03-30 16:07:47 +0000
URL:       https://git.openjdk.org/jdk/commit/1d7bb1ffa0b80d2ef1cd991aa33f13c9b7c47dcc
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
java/util/concurrent/CompletableFuture/CompletableFutureOrTimeoutExceptionallyTest.java times out,JDK-8304557,5096697,Bug,Closed,JDK,JDK,software,duke,,,P4,Fixed,vklang,dcubed,dcubed,2023-03-20 19:24,2023-08-04 12:49,2023-10-01 09:55,2023-03-23 13:46,21,,,,,,,,21,core-libs,,0,intermittent,tier5,tier8,,,,,,,,,,,,,,"The following new test timed out in the JDK21 CI (Tier5):

java/util/concurrent/CompletableFuture/CompletableFutureOrTimeoutExceptionallyTest.java

This test was recently added by the following fix:

JDK-8303742 CompletableFuture.orTimeout leaks if the future completes exceptionally

Here's a log file snippet from the windows-x64 timeout:

#section:junit
----------messages:(8/372)----------
command: junit -Xmx128m CompletableFutureOrTimeoutExceptionallyTest
reason: User specified action: run junit/othervm -Xmx128m CompletableFutureOrTimeoutExceptionallyTest 
started: Tue Mar 21 00:11:14 UTC 2023
Mode: othervm [/othervm specified]
Timeout information:
--- Timeout information end.
finished: Tue Mar 21 00:23:28 UTC 2023
elapsed time (seconds): 734.55
----------configuration:(0/0)----------
----------System.out:(1/27)----------
Timeout refired 480 times
----------System.err:(3/499)----------
STARTED    CompletableFutureOrTimeoutExceptionallyTest::testOrTimeoutWithCompleteExceptionallyDoesNotLeak 'testOrTimeoutWithCompleteExceptionallyDoesNotLeak()'
SUCCESSFUL CompletableFutureOrTimeoutExceptionallyTest::testOrTimeoutWithCompleteExceptionallyDoesNotLeak 'testOrTimeoutWithCompleteExceptionallyDoesNotLeak()'
STARTED    CompletableFutureOrTimeoutExceptionallyTest::testCompleteOnTimeoutWithCompleteExceptionallyDoesNotLeak 'testCompleteOnTimeoutWithCompleteExceptionallyDoesNotLeak()'
----------rerun:(41/6028)*----------

<snip>

result: Error. Program `c:\ade\mesos\work_dir\jib-master\install\jdk-21+15-1208\windows-x64-debug.jdk\jdk-21\fastdebug\bin\java' timed out (timeout set to 480000ms, elapsed time including timeout handling was 734543ms).


Here's a log file snippet from the macosx-x64 timeout:

#section:junit
----------messages:(8/365)----------
command: junit -Xmx128m CompletableFutureOrTimeoutExceptionallyTest
reason: User specified action: run junit/othervm -Xmx128m CompletableFutureOrTimeoutExceptionallyTest 
started: Tue Mar 21 00:08:28 GMT 2023
Mode: othervm [/othervm specified]
Timeout information:
--- Timeout information end.
finished: Tue Mar 21 00:30:35 GMT 2023
elapsed time (seconds): 1327.12
----------configuration:(0/0)----------
----------System.out:(1/26)----------
Timeout refired 480 times
----------System.err:(3/496)----------
STARTED    CompletableFutureOrTimeoutExceptionallyTest::testOrTimeoutWithCompleteExceptionallyDoesNotLeak 'testOrTimeoutWithCompleteExceptionallyDoesNotLeak()'
SUCCESSFUL CompletableFutureOrTimeoutExceptionallyTest::testOrTimeoutWithCompleteExceptionallyDoesNotLeak 'testOrTimeoutWithCompleteExceptionallyDoesNotLeak()'
STARTED    CompletableFutureOrTimeoutExceptionallyTest::testCompleteOnTimeoutWithCompleteExceptionallyDoesNotLeak 'testCompleteOnTimeoutWithCompleteExceptionallyDoesNotLeak()'
----------rerun:(36/6738)*----------

<snip>

result: Error. Program `/System/Volumes/Data/mesos/work_dir/jib-master/install/jdk-21+15-1208/macosx-x64-debug.jdk/jdk-21/fastdebug/bin/java' timed out (timeout set to 480000ms, elapsed time including timeout handling was 1327110ms).
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8303742,,,,,,,,,,,,,,,,,,,,,x86_64,,,,,,,,,,os_x,windows,,,,,"0|i30tgb:",9223372036854775807,b16,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@239b1eeb,,,,,,,Verified,,"2023-03-20 19:30;dcubed;These two Tier5 failures both occurred with fastdebug bits. The test also
runs in Tier1 with 'release' bits and, in those runs, the test passed.;;;","2023-03-21 03:43;vklang;[~dcubed] The timeouts are likely due to added overhead to run the tests under debug builds. I've submitted the following PR which should both reduce the load and increase the timeout to give headroom: https://github.com/openjdk/jdk/pull/13116;;;","2023-03-22 04:27;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/13116
Date: 2023-03-21 10:42:55 +0000;;;","2023-03-23 07:08;mbaesken;Hello , in the last  2 days we saw at least 5 timeouts in the new test  'java/util/concurrent/CompletableFuture/CompletableFutureOrTimeoutExceptionallyTest.java' in our automated tests.
Those automated tests use fastdebug binaries so they might be slower than product.   Timeouts were seen on multiple platforms (Windows/macOS/Linux).
;;;","2023-03-23 07:29;vklang;We've devised another test to verify that the fix doesn't regress here: https://github.com/openjdk/jdk/pull/13116/files

Hoping to merge that shortly.

Thanks for your patience,
√;;;","2023-03-23 13:46;dukebot;Changeset: 6f67abd3
Author:    Viktor Klang <viktor.klang@oracle.com>
Committer: Alan Bateman <alanb@openjdk.org>
Date:      2023-03-23 20:43:45 +0000
URL:       https://git.openjdk.org/jdk/commit/6f67abd352ce9605dd93188995d42a47ee07b25e
;;;","2023-03-23 15:20;dcubed;The fix for this bug is integrated in jdk-21+16-1254.;;;",,,,,,,,,,,,,,,,,,,,,,,,
Modules THROW_MSG_ should return nullptr instead of JNI_FALSE,JDK-8304541,5096679,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,jwaters,jwaters,jwaters,2023-03-20 10:39,2023-03-27 14:08,2023-10-01 09:55,2023-03-20 11:14,,,,,,,,,21,hotspot,,0,,,,,,,,,,,,,,,,,"Cleanup in NPE code to return a proper nullptr instead of JNI_FALSE. JNI_FALSE expands to 0, which technically works as a null pointer here, but this becomes pretty confusing and strange when reading through the code",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i30tcb:",9223372036854775807,b15,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,,,"2023-03-20 10:45;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/13105
Date: 2023-03-20 17:39:58 +0000;;;","2023-03-20 11:14;dukebot;Changeset: 19f2edd9
Author:    Julian Waters <jwaters@openjdk.org>
Date:      2023-03-20 18:13:05 +0000
URL:       https://git.openjdk.org/jdk/commit/19f2edd9b7e354cf31df4b7596e6a6eb59b34bf9
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Ant-based langtools build fails after JDK-8015831 Add lint check for calling overridable methods from a constructor ,JDK-8304537,5096671,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,acobbs,jlahoda,jlahoda,2023-03-20 07:46,2023-03-27 14:08,2023-10-01 09:55,2023-03-21 00:36,,,,,,,,,21,tools,,0,,,,,,,,,,,,,,,,,"After:
JDK-8015831 Add lint check for calling overridable methods from a constructor

the and-based langtools-only build fails with:
build-all-classes:
/home/jlahoda/src/jdk/amber/src/jdk.compiler/share/classes/com/sun/tools/javac/code/Lint.java:145: warning: [this-escape] possible 'this' escape before subclass is fully initialized
        context.put(lintKey, this);
error: warnings found and -Werror specified
1 error
1 warning
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i30taj:",9223372036854775807,b15,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4dca67bd,,,,,,,,,"2023-03-20 07:59;acobbs;This may be a duplicate of JDK-8304443 which was just fixed (committed) a few minutes ago.

Can you update and try again?;;;","2023-03-20 08:14;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/13102
Date: 2023-03-20 14:50:01 +0000;;;","2023-03-21 00:36;dukebot;Changeset: c4df9b5f
Author:    Jan Lahoda <jlahoda@openjdk.org>
Date:      2023-03-21 07:33:56 +0000
URL:       https://git.openjdk.org/jdk/commit/c4df9b5f176672617f29bd253f01df2ea81dac36
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,
Classfile API class hierarchy makes assumptions when class is not resolved,JDK-8304502,5096632,Bug,Closed,JDK,JDK,software,duke,,,P4,Fixed,asotona,asotona,asotona,2023-03-20 04:00,2023-08-08 11:54,2023-10-01 09:55,2023-03-21 23:15,,,,,,,,,21,other-libs,,0,classfile-api,,,,,,,,,,,,,,,,"Classfile API class hierarchy makes assumptions when class is not resolved and that may lead to silent generation of invalid stack maps.
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i30t1v:",9223372036854775807,b15,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@79d0c3d2,,,,,,,Verified,,"2023-03-20 04:41;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/13099
Date: 2023-03-20 11:15:52 +0000;;;","2023-03-21 23:15;dukebot;Changeset: 0156909a
Author:    Adam Sotona <asotona@openjdk.org>
Date:      2023-03-22 06:13:34 +0000
URL:       https://git.openjdk.org/jdk/commit/0156909ab38072869e2eb9f5049042b9199d14a0
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Remove orphaned demo netbeans projects,JDK-8304501,5096629,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,eirbjo,eirbjo,eirbjo,2023-03-20 03:29,2023-04-17 10:41,2023-10-01 09:55,2023-04-10 17:19,,,,,,,,,21,client-libs,,0,,,,,,,,,,,,,,,,,"The SwingApplet demo was removed in JDK-8205119, but the netbeans projects files were left behind. 

Also, the following netbeans projects reference sources that no longer exists (if they ever did):

- src/demo/share/nbproject/management/FullThreadDump
- src/demo/share/nbproject/management/JTop
- src/demo/share/nbproject/management/MemoryMonitor
- src/demo/share/nbproject/management/VerboseGC
- src/demo/share/nbproject/scripting/jconsole-plugin

Let's delete these orphaned netbeans project directories.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8205119,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i30t17:",9223372036854775807,b18,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@2a9c6101,,,,,,,,,"2023-03-20 04:06;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/13098
Date: 2023-03-20 10:31:50 +0000;;;","2023-04-10 17:19;dukebot;Changeset: 4485737e
Author:    Eirik Bjorsnos <eirbjo@gmail.com>
Committer: Sergey Bylokhov <serb@openjdk.org>
Date:      2023-04-11 00:17:02 +0000
URL:       https://git.openjdk.org/jdk/commit/4485737e9b93cdf5cfc9a0f4dc0f327cd119f75b
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
JShell does not switch to raw mode when there is no /bin/test,JDK-8304498,5096624,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,jlahoda,jlahoda,jlahoda,2023-03-20 02:57,2023-06-25 05:29,2023-10-01 09:55,2023-03-28 09:58,21,,,,,,,,21,tools,,0,jdk11u-fix-request,jdk11u-fix-yes,jdk20u-fix-request,jdk20u-fix-SQE-ok,jdk20u-fix-yes,regression,,,,,,,,,,,"The internal JLine uses the 'test' executable to validate if given file descriptors are bound to terminal or not. It always uses `/bin/test`, which some (presumably newer) Linux distributions have, but some don't. The others only have '/usr/bin/test', and JLine fails to switch the terminal into raw mode, effectively disabling most of the editing features.",,,,,,,,,,,JDK-8307893,JDK-8306215,JDK-8306751,JDK-8304535,JDK-8304536,JDK-8307054,JDK-8310856,,,,,,,,,,,,,,JDK-8304719,,,,,JDK-8297587,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i30t03:",9223372036854775807,b16,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@ef6d34f,,,,,,,,,"2023-03-20 05:31;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/13100
Date: 2023-03-20 12:10:04 +0000;;;","2023-03-28 09:58;dukebot;Changeset: fab23577
Author:    Jan Lahoda <jlahoda@openjdk.org>
Date:      2023-03-28 16:56:28 +0000
URL:       https://git.openjdk.org/jdk/commit/fab23577ab7fb88f90df638588e14da6bb620a3a
;;;","2023-04-19 23:20;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk20u/pull/56
Date: 2023-04-20 06:14:06 +0000;;;","2023-04-20 00:32;pkoppula;Fix request (20u)

Clean backport.
The fix was verified by the tests. All mach5 tests are green.

Review 20u: https://git.openjdk.org/jdk20u/pull/56;;;","2023-06-21 06:02;goetz;Fix request [11u,17u]

This backport is included in the backport of 8297587: Upgrade JLine to 3.22.0 
SAP nighlty testing passed;;;","2023-06-21 06:47;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk11u-dev/pull/1974
Date: 2023-06-21 13:39:37 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,,
com/sun/jdi/ThreadMemoryLeakTest.java times out,JDK-8304449,5096564,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,cjplummer,dcubed,dcubed,2023-03-18 22:21,2023-05-11 07:57,2023-10-01 09:55,2023-03-29 16:31,21,,,,,,,,21,core-svc,,0,intermittent,noreg-self,tier5,tier8,,,,,,,,,,,,,"The following test times out in the JDK21 CI:

com/sun/jdi/ThreadMemoryLeakTest.java

Here's a snippet from the log file:

----------System.err:(20/1009)----------
[3ms] run args: [ThreadMemoryLeakTarg]
[1533ms] Got ThreadStartEvent #1000 threads:308
[1882ms] Got ThreadDeathEvent #1000 threads:260
[2483ms] Got ThreadStartEvent #2000 threads:388
[2855ms] Got ThreadDeathEvent #2000 threads:409
[3598ms] Got ThreadStartEvent #3000 threads:184
[3763ms] Got ThreadDeathEvent #3000 threads:305
[4569ms] Got ThreadStartEvent #4000 threads:443
[4879ms] Got ThreadDeathEvent #4000 threads:389
[5526ms] Got ThreadStartEvent #5000 threads:400
[5683ms] Got ThreadDeathEvent #5000 threads:264
[6717ms] Got ThreadStartEvent #6000 threads:330

Exception: java.lang.OutOfMemoryError thrown from the UncaughtExceptionHandler in thread ""Thread-1""

Exception: java.lang.OutOfMemoryError thrown from the UncaughtExceptionHandler in thread ""output reader""

Exception: java.lang.OutOfMemoryError thrown from the UncaughtExceptionHandler in thread ""JDI Target VM Interface""

Exception: java.lang.OutOfMemoryError thrown from the UncaughtExceptionHandler in thread ""process reaper (pid 49716)""
----------rerun:(39/6062)*----------

<snip>

result: Error. Program `/System/Volumes/Data/mesos/work_dir/jib-master/install/jdk-21+15-1199/macosx-x64-debug.jdk/jdk-21/fastdebug/bin/java' timed out (timeout set to 480000ms, elapsed time including timeout handling was 1196969ms).
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8304436,JDK-8297638,,,,,,,,,,,,,,,,,,,,x86_64,,,,,,,,,,os_x,,,,,,"0|i30smr:",9223372036854775807,b17,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@3397f701,,,,,,,,,"2023-03-19 16:22;dcubed;[~cjplummer] - This timeout happens without ZGC so I went
with a new bug.;;;","2023-03-21 12:02;cjplummer;macOS has a thread behavior that is not seen on linux and windows that is causing more memory usage, which sometimes leads to this unexpected OOME. The debuggee side of the test constantly creates threads that do little more than a short sleep. It has a counter of ""live"" threads, and won't let that go over 500. On the debugger side it is just tracking ThreadStartEvents and ThreadDeathEvents. It keep tracks of threads (ThreadReferences) for which a ThreadStartEvent had been received but a ThreadDeathEvent has not. On linux and windows the count of outstanding threads is generally in the 200-400 range, sometime briefly going over 500. However, on macOS it is closer to 2400. This means a lot more ThreadReferences being tracked, which means more memory usage, so sometimes you see an OOME on macOS as a result.

I'm not sure why there is a backlog of ThreadDeathEvents. The only thing that I can think of is that on macOS threads are slow to exit and generate the ThreadDeathEvent. I mentioned above that the debuggee limits the number of live threads to 500, but this is done with a semaphore, and the semaphore is released just before the thread exits its main method. So the thread is technically still alive at that point, but has freed up its semaphore allowing another thread to be created. So probably there is a significant delay between the semaphore release and the generation of the ThreadDeathEvent, allowing for a large number of delayed ThreadStartEvents.

The easiest fix for this is to just not track all the outstanding ThreadReferences. There is no real reason to. It was just being done so the test could log the count of threads for which no ThreadDeathEvent have been received. This can also be done instead with simple counters of ThreadStartEvents and ThreadDeathEvents.;;;","2023-03-21 14:46;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/13130
Date: 2023-03-21 21:38:12 +0000;;;","2023-03-29 16:31;dukebot;Changeset: 9643f654
Author:    Chris Plummer <cjplummer@openjdk.org>
Date:      2023-03-29 23:29:30 +0000
URL:       https://git.openjdk.org/jdk/commit/9643f654da23cfc336d36385031251d039e0550d
;;;","2023-03-31 08:11;dcubed;The fix for this bug was integrated in jdk-21+16-1327.;;;","2023-05-11 07:57;cjplummer;In case this issue ever turns up again, the following patch was useful during debugging:

diff --git a/src/jdk.jdi/share/classes/com/sun/tools/jdi/EventQueueImpl.java b/src/jdk.jdi/share/classes/com/sun/tools/jdi/EventQueueImpl.java
index 59361af69f8..1feb4918063 100644
--- a/src/jdk.jdi/share/classes/com/sun/tools/jdi/EventQueueImpl.java
+++ b/src/jdk.jdi/share/classes/com/sun/tools/jdi/EventQueueImpl.java
@@ -60,8 +60,14 @@ public class EventQueueImpl extends MirrorImpl implements EventQueue {
         return System.identityHashCode(this);
     }
 
+    private int numEvents = 0;
+
     synchronized void enqueue(EventSet eventSet) {
         eventSets.add(eventSet);
+        numEvents++;
+        if (size() > 10000 && (size() % 1000) == 0) {
+            System.out.println(""enqueue: "" + numEvents + "" "" + size());
+        }
         notifyAll();
     }
 
diff --git a/src/jdk.jdi/share/classes/com/sun/tools/jdi/TargetVM.java b/src/jdk.jdi/share/classes/com/sun/tools/jdi/TargetVM.java
index 2a9e4555099..f843a22ab10 100644
--- a/src/jdk.jdi/share/classes/com/sun/tools/jdi/TargetVM.java
+++ b/src/jdk.jdi/share/classes/com/sun/tools/jdi/TargetVM.java
@@ -244,9 +244,11 @@ public class TargetVM implements Runnable {
     private synchronized void controlEventFlow(int maxQueueSize) {
         if (!eventsHeld && (maxQueueSize > OVERLOADED_QUEUE)) {
             eventController().hold();
+            System.out.println(""HOLD: "" + maxQueueSize);
             eventsHeld = true;
         } else if (eventsHeld && (maxQueueSize < UNDERLOADED_QUEUE)) {
             eventController().release();
+            System.out.println(""RELEASE: "" + maxQueueSize);
             eventsHeld = false;
         }
     }
;;;",,,,,,,,,,,,,,,,,,,,,,,,,
Kitchensink failed: assert(!thread->is_in_any_VTMS_transition()) failed: class prepare events are not allowed in any VTMS transition,JDK-8304448,5096563,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,sspitsyn,dcubed,dcubed,2023-03-18 22:11,2023-04-03 12:09,2023-10-01 09:55,2023-03-27 14:47,21,,,,,,,,21,hotspot,,0,intermittent,loom,tier3,tier7,,,,,,,,,,,,,"The following test failed in the JDK21 CI:

applications/kitchensink/Kitchensink.java

Here's a snippet from the log file:

----------System.out:(42/3899)*----------
C:\\ade\\mesos\\work_dir\\jib-master\\install\\jdk-21+15-1199\\src.full\\closed\\test\\hotspot\\jtreg\\applications\\kitchensink\\applications\\kitchensink\\resources\\kitchensink.default.properties
C:\\ade\\mesos\\work_dir\\jib-master\\install\\jdk-21+15-1199\\src.full\\closed\\test\\hotspot\\jtreg\\applications\\kitchensink\\resources\\kitchensink.default.properties
C:\\ade\\mesos\\work_dir\\jib-master\\install\\jdk-21+15-1199\\src.full\\closed\\test\\hotspot\\jtreg\\applications\\kitchensink\\applications\\kitchensink\\resources\\kitchensink.default.properties
C:\\ade\\mesos\\work_dir\\jib-master\\install\\jdk-21+15-1199\\src.full\\closed\\test\\hotspot\\jtreg\\applications\\kitchensink\\resources\\kitchensink.default.properties
[stress.process.out] For random generator using seed: 8396202546159738354
[stress.process.out] To re-run test with same seed value please add ""-Djdk.test.lib.random.seed=8396202546159738354"" to command line.
[stress.process.out] Stress process main method is started.
[stress.process.out] #
[stress.process.out] # A fatal error has been detected by the Java Runtime Environment:
[stress.process.out] #
[stress.process.out] #  Internal Error (c:\\sb\\prod\\1679159541\\workspace\\open\\src\\hotspot\\share\\prims\\jvmtiExport.cpp:1374), pid=73168, tid=44832
[stress.process.out] #  assert(!thread->is_in_any_VTMS_transition()) failed: class prepare events are not allowed in any VTMS transition
[stress.process.out] #
[stress.process.out] # JRE version: Java(TM) SE Runtime Environment (21.0+15) (fastdebug build 21-ea+15-LTS-1199)
[stress.process.out] # Java VM: Java HotSpot(TM) 64-Bit Server VM (fastdebug 21-ea+15-LTS-1199, mixed mode, sharing, tiered, compressed class ptrs, z gc, windows-amd64)
[stress.process.out] # Core dump will be written. Default location: C:\\sb\\prod\\1679166106\\testoutput\\test-support\\jtreg_closed_test_hotspot_jtreg_applications_kitchensink_Kitchensink_java\\scratch\\0\\hs_err_pid73168.mdmp
[stress.process.out] #
[stress.process.out] Unsupported internal testing APIs have been used.
[stress.process.out] 
[stress.process.out] # An error report file with more information is saved as:
[stress.process.out] # C:\\sb\\prod\\1679166106\\testoutput\\test-support\\jtreg_closed_test_hotspot_jtreg_applications_kitchensink_Kitchensink_java\\scratch\\0\\hs_err_pid73168.log
[stress.process.out] [3.038s][warning][os] Loading hsdis library failed
[stress.process.out] #
[stress.process.out] # If you would like to submit a bug report, please visit:
[stress.process.out] #   https://bugreport.java.com/bugreport/crash.jsp
[stress.process.out] #
[2023-03-18T19:03:12.055455Z] Gathering output for process 42156

Here's the crashing thread's stack:

---------------  T H R E A D  ---------------

Current thread (0x0000016b6a843150):  JavaThread ""ForkJoinPool-1-worker-1"" daemon [_thread_in_vm, id=44832, stack(0x00000035d6900000,0x00000035d6a00000)]

Stack: [0x00000035d6900000,0x00000035d6a00000]
Native frames: (J=compiled Java code, j=interpreted, Vv=VM code, C=native code)
V  [jvm.dll+0xbf2eb1]  os::win32::platform_print_native_stack+0xf1  (os_windows_x86.cpp:236)
V  [jvm.dll+0xe6dd20]  VMError::report+0x10c0  (vmError.cpp:814)
V  [jvm.dll+0xe6f8d5]  VMError::report_and_die+0x645  (vmError.cpp:1587)
V  [jvm.dll+0xe6ffe4]  VMError::report_and_die+0x64  (vmError.cpp:1352)
V  [jvm.dll+0x577e39]  report_vm_error+0x79  (debug.cpp:181)
V  [jvm.dll+0x9e3843]  JvmtiExport::post_class_prepare+0x93  (jvmtiExport.cpp:1374)
V  [jvm.dll+0x791d3a]  InstanceKlass::link_class_impl+0x6ba  (instanceKlass.cpp:930)
V  [jvm.dll+0x78fb57]  InstanceKlass::initialize_impl+0x97  (instanceKlass.cpp:1033)
V  [jvm.dll+0x7ae1d3]  InterpreterRuntime::_new+0x203  (interpreterRuntime.cpp:227)
V  [jvm.dll+0x78fb57]  InstanceKlass::initialize_impl+0x97  (instanceKlass.cpp:1033)
V  [jvm.dll+0x7ae1d3]  InterpreterRuntime::_new+0x203  (interpreterRuntime.cpp:227)
C  0x000001695b41820c

Unclear if the native stack indicates we are jumping from compiled code, but it is evidently truncated. Here's the Java stack

Java frames: (J=compiled Java code, j=interpreted, Vv=VM code)
j  java.util.concurrent.ConcurrentHashMap.fullAddCount(JZ)V+384 java.base@21-ea
J 725 c1 java.util.concurrent.ConcurrentHashMap.addCount(JI)V java.base@21-ea (280 bytes) @ 0x0000016953feddd4 [0x0000016953fed4c0+0x0000000000000914]
J 690 c1 java.util.concurrent.ConcurrentHashMap.putVal(Ljava/lang/Object;Ljava/lang/Object;Z)Ljava/lang/Object; java.base@21-ea (432 bytes) @ 0x0000016953fe9744 [0x0000016953fe82a0+0x00000000000014a4]
J 41 c1 java.util.concurrent.ConcurrentHashMap.putIfAbsent(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object; java.base@21-ea (8 bytes) @ 0x0000016953eb7564 [0x0000016953eb74c0+0x00000000000000a4]
J 574 c1 java.lang.invoke.MethodType$ConcurrentWeakInternSet.add(Ljava/lang/Object;)Ljava/lang/Object; java.base@21-ea (66 bytes) @ 0x0000016953fb6ae4 [0x0000016953fb6460+0x0000000000000684]
J 317 c1 java.lang.invoke.MethodType.makeImpl(Ljava/lang/Class;[Ljava/lang/Class;Z)Ljava/lang/invoke/MethodType; java.base@21-ea (109 bytes) @ 0x0000016953f23614 [0x0000016953f22da0+0x0000000000000874]
J 639 c1 java.lang.invoke.MethodType.insertParameterTypes(I[Ljava/lang/Class;)Ljava/lang/invoke/MethodType; java.base@21-ea (121 bytes) @ 0x0000016953fd34a4 [0x0000016953fd2d20+0x0000000000000784]
j  java.lang.invoke.VarHandle$AccessDescriptor.<init>(Ljava/lang/invoke/MethodType;II)V+29 java.base@21-ea
j  java.lang.invoke.MethodHandleNatives.varHandleOperationLinkerMethod(Ljava/lang/String;Ljava/lang/invoke/MethodType;[Ljava/lang/Object;)Ljava/lang/invoke/MemberName;+40 java.base@21-ea
j  java.lang.invoke.MethodHandleNatives.linkMethodImpl(Ljava/lang/Class;ILjava/lang/Class;Ljava/lang/String;Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/invoke/MemberName;+40 java.base@21-ea
j  java.lang.invoke.MethodHandleNatives.linkMethod(Ljava/lang/Class;ILjava/lang/Class;Ljava/lang/String;Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/invoke/MemberName;+14 java.base@21-ea
v  ~StubRoutines::call_stub 0x000001695b3d106f
j  jdk.internal.vm.Continuation.compareAndSetMounted(ZZ)Z+6 java.base@21-ea
j  jdk.internal.vm.Continuation.mount()V+3 java.base@21-ea
j  jdk.internal.vm.Continuation.run()V+1 java.base@21-ea
j  java.lang.VirtualThread.runContinuation()V+81 java.base@21-ea
j  java.lang.VirtualThread$$Lambda+0x00000008010d5b48.run()V+4 java.base@21-ea
j  java.util.concurrent.ForkJoinTask$RunnableExecuteAction.exec()Z+4 java.base@21-ea
j  java.util.concurrent.ForkJoinTask.doExec()I+10 java.base@21-ea
j  java.util.concurrent.ForkJoinPool$WorkQueue.topLevelExec(Ljava/util/concurrent/ForkJoinTask;Ljava/util/concurrent/ForkJoinPool$WorkQueue;)V+19 java.base@21-ea
j  java.util.concurrent.ForkJoinPool.scan(Ljava/util/concurrent/ForkJoinPool$WorkQueue;II)I+211 java.base@21-ea
j  java.util.concurrent.ForkJoinPool.runWorker(Ljava/util/concurrent/ForkJoinPool$WorkQueue;)V+35 java.base@21-ea
j  java.util.concurrent.ForkJoinWorkerThread.run()V+31 java.base@21-ea
v  ~StubRoutines::call_stub 0x000001695b3d106f
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,x86_64,,,,,,,,,,windows,,,,,,"0|i30smj:",9223372036854775807,b16,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@661b156a,,,,,,,,,"2023-03-19 18:33;dholmes;I am going to guess that the continuation code has changed the VTMS state but within ConcurrentHashMap::fullAddCount we are loading the ThreadLocalRandom class and so hit the assert.

Not sure this is really a JVMTI issue - seems like a more general continuations problem to me.;;;","2023-03-21 00:21;sspitsyn;Thank you, David.
I agree, class loading should not happen in the vthread mounting context:
   . . . . .
j  jdk.internal.vm.Continuation.compareAndSetMounted(ZZ)Z+6 java.base@21-ea
j  jdk.internal.vm.Continuation.mount()V+3 java.base@21-ea
j  jdk.internal.vm.Continuation.run()V+1 java.base@21-ea
j  java.lang.VirtualThread.runContinuation()V+81 java.base@21-ea
   . . . . .
I'll check with Alan or Ron.;;;","2023-03-21 00:28;sspitsyn;Assigned to myself for bug evaluation.;;;","2023-03-21 01:11;alanb;Continuation should probably be changed to use Unsafe.compareAndSetReference rather than a VH here. We had to change CHM and VT back to Unsafe for similar reasons.;;;","2023-03-22 17:11;sspitsyn;This is a suggested fix from Alan:

diff --git a/src/java.base/share/classes/jdk/internal/vm/Continuation.java b/src/java.base/share/classes/jdk/internal/vm/Continuation.java
index cfb386227e1..fcff2adce75 100644
--- a/src/java.base/share/classes/jdk/internal/vm/Continuation.java
+++ b/src/java.base/share/classes/jdk/internal/vm/Continuation.java
@@ -31,12 +31,8 @@ import jdk.internal.vm.annotation.DontInline;
 import jdk.internal.vm.annotation.IntrinsicCandidate;
 import sun.security.action.GetPropertyAction;
 
-import java.lang.invoke.MethodHandles;
-import java.lang.invoke.VarHandle;
 import java.util.EnumSet;
-import java.util.Map;
 import java.util.Set;
-import java.util.concurrent.ConcurrentHashMap;
 import java.util.function.Supplier;
 import jdk.internal.access.JavaLangAccess;
 import jdk.internal.access.SharedSecrets;
@@ -46,6 +42,7 @@ import jdk.internal.access.SharedSecrets;
  */
 public class Continuation {
     private static final Unsafe U = Unsafe.getUnsafe();
+    private static final long MOUNTED_OFFSET = U.objectFieldOffset(Continuation.class, ""mounted"");
     private static final boolean PRESERVE_SCOPED_VALUE_CACHE;
     private static final JavaLangAccess JLA = SharedSecrets.getJavaLangAccess();
     static {
@@ -58,8 +55,6 @@ public class Continuation {
         PRESERVE_SCOPED_VALUE_CACHE = (value == null) || Boolean.parseBoolean(value);
     }
 
-    private static final VarHandle MOUNTED;
-
     /** Reason for pinning */
     public enum Pinned {
         /** Native frame on stack */ NATIVE,
@@ -104,9 +99,6 @@ public class Continuation {
 
             // init Pinned to avoid classloading during mounting
             pinnedReason(2);
-
-            MethodHandles.Lookup l = MethodHandles.lookup();
-            MOUNTED = l.findVarHandle(Continuation.class, ""mounted"", boolean.class);
         } catch (Exception e) {
             throw new InternalError(e);
         }
@@ -125,7 +117,7 @@ public class Continuation {
     private StackChunk tail;
 
     private boolean done;
-    private volatile boolean mounted = false;
+    private volatile boolean mounted;
     private Object yieldInfo;
     private boolean preempted;
 
@@ -461,9 +453,8 @@ public class Continuation {
     }
 
     private boolean compareAndSetMounted(boolean expectedValue, boolean newValue) {
-       boolean res = MOUNTED.compareAndSet(this, expectedValue, newValue);
-       return res;
-     }
+        return U.compareAndSetBoolean(this, MOUNTED_OFFSET, expectedValue, newValue);
+    }
 
     private void setMounted(boolean newValue) {
         mounted = newValue; // MOUNTED.setVolatile(this, newValue);;;;","2023-03-23 02:17;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/13154
Date: 2023-03-23 09:10:26 +0000;;;","2023-03-27 14:47;dukebot;Changeset: 554bccf0
Author:    Serguei Spitsyn <sspitsyn@openjdk.org>
Date:      2023-03-27 21:44:48 +0000
URL:       https://git.openjdk.org/jdk/commit/554bccf0469fbaf65ac692b4e52bddedafadca6f
;;;",,,,,,,,,,,,,,,,,,,,,,,,
bootcycle builds fail after JDK-8015831,JDK-8304443,5096556,Bug,Closed,JDK,JDK,software,duke,,,P2,Fixed,acobbs,dcubed,dcubed,2023-03-18 08:27,2023-08-21 13:27,2023-10-01 09:55,2023-03-20 07:34,21,,,,,,,,21,tools,,0,tier4,,,,,,,,,,,,,,,,"The bootcycle builds in Tier4 are failing after the integration of:

JDK-8015831 Add lint check for calling overridable methods from a constructor

[2023-03-18T06:28:48,943Z] Compiling up to 17 files for BUILD_JAVAC_SERVER
[2023-03-18T06:28:52,219Z] Creating support/modules_libs/java.base/server/libjvm.dylib from 1049 file(s)
[2023-03-18T06:28:52,274Z] Creating hotspot/variant-server/libjvm/libgtest/libgtest.a from 2 file(s)
[2023-03-18T06:28:52,280Z] Creating hotspot/variant-server/libjvm/gtest/libjvm.dylib from 175 file(s)
[2023-03-18T06:28:52,287Z] Creating hotspot/variant-server/libjvm/gtest/gtestLauncher from 1 file(s)
[2023-03-18T06:28:54,025Z] /System/Volumes/Data/mesos/work_dir/slaves/91e16c40-06d4-468a-9fc3-7198a5bb7d5a-S84887/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/98854c72-237e-4fe1-8dd9-821eebb06de3/runs/cc80c74b-064e-4d36-8935-94346610ef68/workspace/open/src/jdk.compiler/share/classes/com/sun/tools/javac/code/Lint.java:145: warning: [this-escape] possible 'this' escape before subclass is fully initialized
[2023-03-18T06:28:54,025Z]         context.put(lintKey, this);
[2023-03-18T06:28:54,025Z]                              ^
[2023-03-18T06:28:54,025Z] error: warnings found and -Werror specified
[2023-03-18T06:29:03,504Z] 1 error
[2023-03-18T06:29:03,504Z] 1 warning
[2023-03-18T06:29:03,583Z] CompileInterimLangtools.gmk:123: recipe for target '/System/Volumes/Data/mesos/work_dir/slaves/91e16c40-06d4-468a-9fc3-7198a5bb7d5a-S84887/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/98854c72-237e-4fe1-8dd9-821eebb06de3/runs/cc80c74b-064e-4d36-8935-94346610ef68/workspace/build/macosx-x64-bootcycle-prebuilt/buildtools/interim_langtools_modules/jdk.compiler.interim/_the.BUILD_jdk.compiler.interim_batch' failed
[2023-03-18T06:29:03,583Z] make[3]: *** [/System/Volumes/Data/mesos/work_dir/slaves/91e16c40-06d4-468a-9fc3-7198a5bb7d5a-S84887/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/98854c72-237e-4fe1-8dd9-821eebb06de3/runs/cc80c74b-064e-4d36-8935-94346610ef68/workspace/build/macosx-x64-bootcycle-prebuilt/buildtools/interim_langtools_modules/jdk.compiler.interim/_the.BUILD_jdk.compiler.interim_batch] Error 1
[2023-03-18T06:29:03,585Z] make/Main.gmk:78: recipe for target 'interim-langtools' failed
[2023-03-18T06:29:03,585Z] make[2]: *** [interim-langtools] Error 2
[2023-03-18T06:29:03,585Z] make[2]: *** Waiting for unfinished jobs....
[2023-03-18T06:35:20,344Z] 
[2023-03-18T06:35:20,344Z] ERROR: Build failed for target 'default (product-images)' in configuration 'macosx-x64-bootcycle-prebuilt' (exit code 2) 

This build failure occurred with the following profiles:
linux-aarch64-bootcycle-prebuilt, linux-x64-bootcycle-prebuilt,
linux-x64-bootcycle, macosx-x64-bootcycle-prebuilt, and
windows-x64-bootcycle-prebuilt.
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8015831,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i30skz:",9223372036854775807,b15,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4dca67bd,,,,,,,Verified,,"2023-03-18 08:30;dcubed;[~acobbs] - Please take a look at these bootcycle build
failures that started occurring after your fix for JDK-8015831.;;;","2023-03-18 08:52;acobbs;Will do - thanks for the heads-up.;;;","2023-03-18 11:05;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/13089
Date: 2023-03-18 17:46:00 +0000;;;","2023-03-20 07:34;dukebot;Changeset: c396f1ed
Author:    Archie L. Cobbs <archie.cobbs@gmail.com>
Committer: Vicente Romero <vromero@openjdk.org>
Date:      2023-03-20 14:33:16 +0000
URL:       https://git.openjdk.org/jdk/commit/c396f1ed8b91b799fdd6a9a849d7407e606227d5
;;;","2023-03-20 11:55;dcubed;This fix is integrated in jdk-21+15-1205.;;;","2023-08-17 12:50;mtrudeau;It is fixed... 

Thanks,
-Archie
;;;",,,,,,,,,,,,,,,,,,,,,,,,,
[macos] Crash when putting invalid unicode char on clipboard,JDK-8304441,5096554,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,kcr,kcr,kcr,2023-03-18 06:51,2023-04-11 03:59,2023-10-01 09:55,2023-04-06 04:36,8,jfx11,jfx17,jfx20,jfx21,,,,jfx21,javafx,,0,crash,sn_140,sn_141,,,,,,,,,,,,,,"Putting an invalid unicode character on the system clipboard will cause the application to crash with an assertion error. The following is sufficient to provoke the crash:

        int[] codePoints = { 0xD83D };
        String str = new String(codePoints, 0, codePoints.length);
        ClipboardContent c = new ClipboardContent();
        c.put(DataFormat.PLAIN_TEXT, str);
        Clipboard.getSystemClipboard().setContent(c);

To reproduce, run the attached test program:

$ java ClipboardCrash

2023-03-18 06:28:07.771 java[85534:2112820] *** Terminating app due to uncaught exception 'NSInvalidArgumentException', reason: 'Calling -setData:forType: on NSPasteboardItem with nil `data` for type public.utf8-plain-text.'
*** First throw call stack:
(
	0   CoreFoundation                      0x00007ff80a4db40b __exceptionPreprocess + 242
	1   libobjc.A.dylib                     0x00007ff80a027e25 objc_exception_throw + 48
	2   CoreFoundation                      0x00007ff80a4db270 +[NSException raise:format:] + 214
	3   AppKit                              0x00007ff80d8b1d9a -[NSPasteboardItem setData:forType:] + 287
	4   libglass.dylib                      0x0000000107ef4052 Java_com_sun_glass_ui_mac_MacPasteboard__1putItemsFromArray + 1778
	5   ???                                 0x00000001112ee53a 0x0 + 4583253306
)
libc++abi: terminating with uncaught exception of type NSException
","Mac / x64 running macOS 13.1 (Ventura)
Mac / aarch64 running macOS 12.5.1 (Monterey)
",,,,,,,,,,JDK-8305837,JDK-8305756,JDK-8305754,,,,,,,,,,,,,JDK-8305096,,,,,JDK-8279927,,,,,JDK-8304831,,,,,,,,,"2023-03-18 06:51;kcr;ClipboardCrash.java;https://bugs.openjdk.org/secure/attachment/103056/ClipboardCrash.java","2023-03-18 06:51;kcr;crash.log;https://bugs.openjdk.org/secure/attachment/103055/crash.log",,,,,,,,,,,,,,,,,,,,,os_x,,,,,,"0|i30skj:",9223372036854775807,b12,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4f591050,,,,,,,,,"2023-03-18 06:53;kcr;This bug only occurs on macOS. The program runs with no errors on Linux and Windows.;;;","2023-03-28 08:14;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jfx/pull/1074
Date: 2023-03-28 15:09:29 +0000;;;","2023-04-06 04:36;dukebot;Changeset: 2b2a7f1f
Author:    Kevin Rushforth <kcr@openjdk.org>
Date:      2023-04-06 11:35:22 +0000
URL:       https://git.openjdk.org/jfx/commit/2b2a7f1f7cdad676159d471d2fee6025bbf4e939
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,
jcmd JVMTI.agent_load should obey EnableDynamicAgentLoading,JDK-8304438,5096549,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,sspitsyn,alanb,alanb,2023-03-18 00:15,2023-06-12 20:48,2023-10-01 09:55,2023-06-05 17:01,21,,,,,,,,21,hotspot,,0,,,,,,,,,,,,,,,,,"The VM option EnableDynamicAgentLoading was added in JDK 9, default true, to allow deployment to choose whether to allow agents to be loaded/started in the VM. The VM option does the right thing for tools using the Attach API but jcmd JVMTI.agent_load was missed. This should be fixed to disallow loading JVMTI agents when the EnableDynamicAgentLoading is false.",,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8309250,,,,,,,,,,,,,JDK-8177154,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i30sjf:",9223372036854775807,b26,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@2846162a,,,,,,,,,"2023-05-31 03:14;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/14244
Date: 2023-05-31 10:08:46 +0000;;;","2023-06-05 17:01;dukebot;Changeset: 4b153498
Author:    Serguei Spitsyn <sspitsyn@openjdk.org>
Date:      2023-06-06 00:00:11 +0000
URL:       https://git.openjdk.org/jdk/commit/4b1534989b39139aaa2952564e2b4098181a9eee
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
"com/sun/jdi/ThreadMemoryLeakTest.java fails with ""OutOfMemoryError: Java heap space"" with ZGC",JDK-8304436,5096547,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,cjplummer,dcubed,dcubed,2023-03-17 20:51,2023-08-14 13:04,2023-10-01 09:55,2023-03-29 16:30,21,,,,,,,,21,core-svc,,0,noreg-self,tier3,tier6,zgc,,,,,,,,,,,,,"The following test failed in the JDK21 CI:

com/sun/jdi/ThreadMemoryLeakTest.java

This a new test in this build-ID that was added by the following fix:

JDK-8297638 Memory leak in case of many started-dead threads

Here's a snippet from the log file:

#section:main
----------messages:(7/317)----------
command: main -Xmx6m ThreadMemoryLeakTest
reason: User specified action: run main/othervm -Xmx6m ThreadMemoryLeakTest 
started: Sat Mar 18 03:46:05 UTC 2023
Mode: othervm [/othervm specified]
Additional options from @modules: --add-modules jdk.jdi
finished: Sat Mar 18 03:46:07 UTC 2023
elapsed time (seconds): 2.711
----------configuration:(3/35)----------
Boot Layer
  add modules: jdk.jdi

----------System.out:(9/825)----------
vmOpts: '-Xmx768m -XX:MaxRAMPercentage=6.25 -Dtest.boot.jdk=/opt/mach5/mesos/work_dir/jib-master/install/jdk/19/36/bundles/linux-aarch64/jdk-19_linux-aarch64_bin.tar.gz/jdk-19 -Djava.io.tmpdir=/opt/mach5/mesos/work_dir/slaves/91e16c40-06d4-468a-9fc3-7198a5bb7d5a-S123128/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/ca80614b-8e6a-4608-84c3-1f6af5e4ea14/runs/57741278-67c2-4d43-9a1d-25e76ff016e5/testoutput/test-support/jtreg_open_test_jdk_jdk_jdi/tmp -ea -esa'
javaOpts: '-XX:+CreateCoredumpOnCrash -XX:+UseZGC'
JVM version:21-ea
JDI version: 21.0
JVM description: Java Debug Interface (Reference Implementation) version 21.0 
Java Debug Wire Protocol (Reference Implementation) version 21.0
JVM Debug Interface version 21.0
JVM version 21-ea (Java HotSpot(TM) 64-Bit Server VM, mixed mode, sharing)
Howdy!
----------System.err:(16/1003)----------
[2ms] run args: [ThreadMemoryLeakTarg]
java.lang.OutOfMemoryError: Java heap space
	at java.base/java.util.LinkedList.listIterator(LinkedList.java:872)
	at java.base/java.util.AbstractList.listIterator(AbstractList.java:313)
	at java.base/java.util.Collections$SynchronizedList.listIterator(Collections.java:2539)
	at TestScaffold$EventHandler.run(TestScaffold.java:258)
	at java.base/java.lang.Thread.runWith(Thread.java:1636)
	at java.base/java.lang.Thread.run(Thread.java:1623)
java.lang.OutOfMemoryError: Java heap space
	at java.base/java.io.BufferedReader.implReadLine(BufferedReader.java:404)
	at java.base/java.io.BufferedReader.readLine(BufferedReader.java:348)
	at java.base/java.io.BufferedReader.readLine(BufferedReader.java:437)
	at VMConnection.dumpStream(VMConnection.java:254)
	at VMConnection$1.run(VMConnection.java:287)
STATUS:Failed.`main' threw exception: java.lang.OutOfMemoryError: Java heap space
STATUS:Failed.`main' threw exception: java.lang.OutOfMemoryError: Java heap space
----------rerun:(42/6007)*----------",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8307402,JDK-8297638,,,,JDK-8304449,JDK-8305209,,,,,,,,,,,,,,,aarch64,x86_64,,,,,,,,,linux,windows,,,,,"0|i30siz:",9223372036854775807,b17,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@3397f701,,,,,,,,,"2023-03-17 20:54;dcubed;[~cjplummer] - Please take a look when you get the chance.
The new test failed in Tier3 with ZGC on linux-aarch64.;;;","2023-03-17 21:11;cjplummer;This is probably a tuning issue. The test runs with -Xmx6m (a rather small heap) so if there is a leak, the test will fail quickly. I think with ZGC this is not even enough to run the test even if there isn't a leak.;;;","2023-03-21 14:46;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/13130
Date: 2023-03-21 21:38:12 +0000;;;","2023-03-29 16:30;dukebot;Changeset: 9643f654
Author:    Chris Plummer <cjplummer@openjdk.org>
Date:      2023-03-29 23:29:30 +0000
URL:       https://git.openjdk.org/jdk/commit/9643f654da23cfc336d36385031251d039e0550d
;;;","2023-03-31 08:12;dcubed;The fix for this bug was integrated in jdk-21+16-1327.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,
Regression ~11% with Javac-Generates on all platforms in b14,JDK-8304420,5096524,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,mcimadamore,ecaspole,ecaspole,2023-03-17 09:36,2023-03-27 14:08,2023-10-01 09:55,2023-03-20 11:45,21,,,,,,,,21,tools,,0,perf-regression,,,,,,,,,,,,,,,,"This is referring to the new javac bmks at https://github.com/openjdk/jmh-jdk-microbenchmarks/tree/master/micros-javac

Appeared in retriage of 21-b14. Seems to be related to JDK-8303820",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8303820,,,,,,,,,,,,,,,,,,,,,,,,,,,,b14,21,,,,,,,,"0|i30sdv:",9223372036854775807,b15,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4dca67bd,,,,,,,,,"2023-03-17 17:00;mcimadamore;Codegen needs access to constant values - perhaps the new code for getting type metadata, which uses streams, is not as fast:

```
public <M extends TypeMetadata> Optional<M> getMetadata(Class<M> metadataClass) {
        return metadata.stream()
                .filter(m -> metadataClass.isAssignableFrom(m.getClass()))
                .map(metadataClass::cast)
                .findFirst();
    }
```

Might be worth trying to replace that with a for loop, and measure again. Also, implementation of `constValue`:

```
public Object constValue() {
        return getMetadata(TypeMetadata.ConstantValue.class)
                .map(ConstantValue::value).orElse(null);
    }
```

Perhaps using stream + optional is not great here.;;;","2023-03-20 10:38;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/13104
Date: 2023-03-20 16:42:00 +0000;;;","2023-03-20 11:45;dukebot;Changeset: 42723dcb
Author:    Maurizio Cimadamore <mcimadamore@openjdk.org>
Date:      2023-03-20 18:44:20 +0000
URL:       https://git.openjdk.org/jdk/commit/42723dcb1862da598092bb499056940d78a8bdac
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,
[Lilliput/JDK17] Remove unneeded code in ContiguousSpace::object_iterate_from(),JDK-8304410,5096510,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,rkennke,rkennke,rkennke,2023-03-17 06:43,2023-03-20 08:15,2023-10-01 09:55,2023-03-20 08:15,repo-lilliput-17,,,,,,,,repo-lilliput-17,hotspot,,0,lilliput,,,,,,,,,,,,,,,,"There is some code in space.cpp that resolves a forwarding pointer to get to the Klass* of an object under Lilliput, but it is not necessary and actually causes harm (the null-check doesn't really make sense when the object is indeed forwarded, but we should not observe a forwarded object to begin with). It is not in upstream JDK(21) version of Lilliput and removing it causes no harm.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,generic,,,,,,,,,,generic,,,,,,"0|i30sar:",9223372036854775807,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6b00f96c,,,,,,,,,"2023-03-17 09:30;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/lilliput-jdk17u/pull/13
Date: 2023-03-17 16:07:10 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
[11u] Crash on Windows in C2 compiled code after 8248238 and 8218431,JDK-8304389,5096484,Bug,Resolved,JDK,JDK,software,duke,,,P2,Fixed,goetz,goetz,goetz,2023-03-17 00:26,2023-03-22 01:33,2023-10-01 09:55,2023-03-21 07:44,11.0.19,,,,,,,,11.0.19,hotspot,,0,jdk11u-critical-request,jdk11u-critical-yes,oraclejdk-na,oracle-triage-21,,,,,,,,,,,,,"We recently see crashes on windows in one of our tests with 11.0.19.

This is because adlc generates different code since backport of ""JDK-8218431: Improved platform checking in makefiles"":

--- adfiles-before/ad_x86.cpp	
+++ adfiles-after/ad_x86.cpp	
@@ -2697,12 +2697,12 @@
   'C', // RCX_H
   'E', // RBX
   'E', // RBX_H
-  'C', // RDI
-  'C', // RDI_H
+  'E', // RDI
+  'E', // RDI_H
   'C', // RDX
   'C', // RDX_H
-  'C', // RSI
-  'C', // RSI_H
+  'E', // RSI
+  'E', // RSI_H
   'C', // RAX
   'C', // RAX_H
   'E', // RBP


But 8218431 is not buggy, it just introduced the function ""isTargetCpuBits"" to the makefiles.
This function was already used, but always evaluated to false as the implementation was missing.
Now, with the implementation, it evaluated correctly and the build effectively changed.

This happens in GensrcAdlc.gmk, where ""JDK-8248238: Implementation: JEP 388: Windows AArch64 Support""
introduced this check:

ifeq ($(call isTargetCpuBits, 64), true)
  ADLCFLAGS += -D_WIN64=1
endif

Thus, by adding ""isTargetCpuBits"" in 8218431, now _WIN64 is passed to adlc on windows x86_64.
Unfortunately, 8248238 was supposed to not change anything else than adding the windows aarch64 port, but it did change windows x86_64.  This affects the #ifdef in x86_64.ad line 89.

Undoing this change assures more registers are spilled around a call and fixes the issue.

There was a bigger rework of this code in jdk16: ""JDK-8256205: Simplify compiler calling convention handling"" that probably includes the real fix for this issue. This can not be backported because it requires Solaris to be removed and also is quite complex.


# A fatal error has been detected by the Java Runtime Environment:
#
#  EXCEPTION_ACCESS_VIOLATION (0xc0000005) at pc=0x0000017b904f87a0, pid=147636, tid=144532
#
# JRE version: OpenJDK Runtime Environment (11.0.20) (build 11.0.20-internal+0-adhoc.GLOBALopenjdk.jdk11u-dev)
# Java VM: OpenJDK 64-Bit Server VM (11.0.20-internal+0-adhoc.GLOBALopenjdk.jdk11u-dev, mixed mode, tiered, compressed oops, serial gc, windows-amd64)
# Problematic frame:
# J 6396% c2 sun.awt.geom.AreaOp.pruneEdges(Ljava/util/Vector;)Ljava/util/Vector; java.desktop@11.0.20-internal (987 bytes) @ 0x0000017b904f87a0 [0x0000017b904f7720+0x0000000000001080]
#
# Core dump will be written. Default location: D:\...\hs_err_pid147636.mdmp
#
# If you would like to submit a bug report, please visit:
#   https://bugreport.java.com/bugreport/crash.jsp
#",,,,,,,,,,,JDK-8304703,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8304587,,,,,JDK-8218431,JDK-8248238,JDK-8254252,,,,,,,,,,,,,,x86_64,,,,,,,,,,windows,,,,,,"0|i30s4z:",9223372036854775807,b06,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2023-03-17 01:18;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk11u/pull/70
Date: 2023-03-17 07:47:44 +0000;;;","2023-03-17 15:51;dlong;Doesn't this also affect the latest jdk21?;;;","2023-03-20 16:34;dlong;ILW = crash; one test, Windows x64 only; no workaround = HLH = P2;;;","2023-03-20 17:23;dlong;To answer my own question, the _WIN64 ABI C calling convention settings in C2 should have been enabled since jdk 16, with no problems reported, so this appears to affect 11.0.19 only.;;;","2023-03-21 07:44;dukebot;Changeset: f1c92b47
Author:    Goetz Lindenmaier <goetz@openjdk.org>
Date:      2023-03-21 14:42:22 +0000
URL:       https://git.openjdk.org/jdk11u/commit/f1c92b472d03e3387237cc4d7c6401310cf86f19
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,
"jdk/jfr/api/consumer/filestream/TestOrdered.java failed with ""Expected at least some events to be out of order! Reuse = false""",JDK-8304375,5096463,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,egahlin,dcubed,dcubed,2023-03-16 16:30,2023-05-31 23:26,2023-10-01 09:55,2023-05-25 14:02,21,,,,,,,,21,hotspot,,0,tier5,,,,,,,,,,,,,,,,"The following test failed in the JDK21 CI:

jdk/jfr/api/consumer/filestream/TestOrdered.java

Here's a snippet from the log file:

#section:main
----------messages:(7/365)----------
command: main jdk.jfr.api.consumer.filestream.TestOrdered
reason: User specified action: run main/othervm jdk.jfr.api.consumer.filestream.TestOrdered 
started: Thu Mar 16 23:08:26 GMT 2023
Mode: othervm [/othervm specified]
Additional options from @modules: --add-modules jdk.jfr,java.management
finished: Thu Mar 16 23:08:36 GMT 2023
elapsed time (seconds): 9.209
----------configuration:(3/51)----------
Boot Layer
  add modules: jdk.jfr java.management

----------System.out:(0/0)----------
----------System.err:(12/842)----------
java.lang.Exception: Expected at least some events to be out of order! Reuse = false
	at jdk.jfr.api.consumer.filestream.TestOrdered.testSetOrderedFalse(TestOrdered.java:119)
	at jdk.jfr.api.consumer.filestream.TestOrdered.main(TestOrdered.java:81)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
	at java.base/java.lang.reflect.Method.invoke(Method.java:578)
	at com.sun.javatest.regtest.agent.MainWrapper$MainThread.run(MainWrapper.java:125)
	at java.base/java.lang.Thread.run(Thread.java:1623)

JavaTest Message: Test threw exception: java.lang.Exception: Expected at least some events to be out of order! Reuse = false
JavaTest Message: shutting down test

STATUS:Failed.`main' threw exception: java.lang.Exception: Expected at least some events to be out of order! Reuse = false
----------rerun:(37/7313)*----------",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,x86_64,,,,,,,,,,os_x,,,,,,"0|i30s0b:",9223372036854775807,b25,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@42995637,,,,,,,,,"2023-05-24 12:05;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/14128
Date: 2023-05-24 16:30:58 +0000;;;","2023-05-25 14:02;dukebot;Changeset: 48702345
Author:    Erik Gahlin <egahlin@openjdk.org>
Date:      2023-05-25 21:01:37 +0000
URL:       https://git.openjdk.org/jdk/commit/4870234552d2c63c786641493794a87654b98b7b
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
jlink --include-locales=* attempts to parse non .class resource files with classfile reader,JDK-8304367,5096451,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,naoto,mchung,mchung,2023-03-16 11:32,2023-03-23 00:32,2023-10-01 09:55,2023-03-17 08:45,21,,,,,,,,21,tools,,1,noreg-hard,,,,,,,,,,,,,,,,"IncludeLocalesPlugin reads all resources in jdk.localedata module as .class which is a bug.   It happens to work because ASM ClassReader does very minimal validation and does not throw an exception for example reading /jdk.localedata/sun/text/resources/ext/LineBreakIteratorData_th.

This is uncovered when IncludeLocalesPlugin is converted to use the new ClassFile API.

The plugin should transform only .class that implement LocaleDataMetaInfo

Or specific entries:
jdk.localedata/sun/util/resources/cldr/provider/CLDRLocaleDataMetaInfo.class
jdk.localedata/sun/util/resources/provider/NonBaseLocaleDataMetaInfo.class

",,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8294972,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i30rxn:",9223372036854775807,b15,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@3da653bd,,,,,,,,,"2023-03-16 14:20;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/13067
Date: 2023-03-16 20:43:38 +0000;;;","2023-03-17 08:45;dukebot;Changeset: 4486f1b7
Author:    Naoto Sato <naoto@openjdk.org>
Date:      2023-03-17 15:44:38 +0000
URL:       https://git.openjdk.org/jdk/commit/4486f1b72047dcdb2877cb3c9b4ca02f6cd008e9
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
[AIX] Build erroneously determines build disk is non-local when using GNU-utils df on AIX,JDK-8304364,5096447,Bug,Resolved,JDK,JDK,software,duke,,,P5,Fixed,tsteele,tsteele,tsteele,2023-03-16 10:29,2023-03-27 14:08,2023-10-01 09:55,2023-03-20 10:17,,,,,,,,,21,infrastructure,,0,,,,,,,,,,,,,,,,,"The build system detects a non-local build and emits the following warning after configure on AIX when df from GNU-utils is installed. 
This happens even when the build disk is local.

WARNING: Your build output directory is not on a local disk.
This will severely degrade build performance!
It is recommended that you create an output directory on a local disk,
and run the configure script again from that directory.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,aix,,,,,,"0|i30rwr:",9223372036854775807,b15,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@429c566,,,,,,,,,"2023-03-16 11:35;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/13065
Date: 2023-03-16 18:07:51 +0000;;;","2023-03-16 12:28;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/13066
Date: 2023-03-16 18:55:34 +0000;;;","2023-03-20 10:16;dukebot;Changeset: 4c8c9935
Author:    Tyler Steele <tsteele@openjdk.org>
Date:      2023-03-20 17:13:35 +0000
URL:       https://git.openjdk.org/jdk/commit/4c8c9935eb23bfbabf311ad2e27498227f4ee932
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,
Add lib-test tier1 testing in GHA,JDK-8304353,5096435,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,zzambers,zzambers,zzambers,2023-03-16 08:43,2023-08-30 03:00,2023-10-01 09:55,2023-03-24 09:06,17,21,,,,,,,21,infrastructure,,0,amazon-interest,jdk17u-fix-request,jdk17u-fix-yes,,,,,,,,,,,,,,Tier1 testing in GitHub should include lib-test.,,,,,,,,,,,JDK-8314393,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i30ru3:",9223372036854775807,b16,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@429c566,,,,,,,,,"2023-03-16 09:08;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/13063
Date: 2023-03-16 15:44:48 +0000;;;","2023-03-24 09:05;dukebot;Changeset: 57276101
Author:    Zdenek Zambersky <zzambers@openjdk.org>
Committer: Aleksey Shipilev <shade@openjdk.org>
Date:      2023-03-24 16:04:16 +0000
URL:       https://git.openjdk.org/jdk/commit/57276101df79f07b14b914b36b1155cedec3eb3d
;;;","2023-08-14 01:40;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/1658
Date: 2023-08-14 08:33:52 +0000;;;","2023-08-14 13:34;shade;Fix Request (17u)

Improves GHA coverage. Applies cleanly. Testing passes.;;;","2023-08-30 03:00;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk11u-dev/pull/2104
Date: 2023-08-30 09:53:28 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,,,
    Font.getStringBounds calculates wrong width for TextAttribute.TRACKING other than 0.0,JDK-8304350,5096431,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,prr,jdowland,jdowland,2023-03-16 07:01,2023-05-22 02:06,2023-10-01 09:56,2023-04-13 05:03,10,11.0.19,17.0.7,20.0.2,,,,,21,client-libs,,0,jdk11u-fix-request,jdk11u-fix-yes,jdk17u-fix-request,jdk17u-fix-yes,jdk20u-fix-request,jdk20u-fix-SQE-ok,jdk20u-fix-yes,redhat-interest,sn_141,,,,,,,,"Font.getStringBounds calculates wrong width for TextAttribute.TRACKING other than 0.0

Since JDK10, Font.getStringBounds calculates an incorrect width for a
java.awt.font.Font with the TRACKING attribute set to a value other than
0.0.

This is not visibly evident in AWT/Swing, but can be checked by reading/printing
Font.getStringBounds. It's also reproducible in a simple PDF rendering application.

I have reproduced this issue in JDK11, 17 and 21, as well as confirming it is not
present in JDK8 (jdk8u352-b08). I'll attach a reproducer.

See also a small reproducer (PDF renderer) here:
https://github.com/LibrePDF/OpenPDF/issues/796
",,,,,,,,,,,JDK-8308505,JDK-8308390,JDK-8308455,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"2023-03-16 07:00;jdowland;App.java;https://bugs.openjdk.org/secure/attachment/103032/App.java",,,,,,,,,,,,,,,,,,,,10,,,,,,,,"0|i30rt7:",9223372036854775807,b19,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4b09ce31,,,,,,,,,"2023-03-17 10:10;prr;Perhaps related to https://bugs.openjdk.org/browse/JDK-8165943 .. but that was fixed in JDK 20.
In JDK 10 we removed the proprietary font rasteriser but I can't think how that would affect this.;;;","2023-03-20 03:05;jdowland;I'll do some more reproducibility testing. The precise JDK21 I tested was Debian package version 21~7ea-1 which I believe is a build of openjdk source tag jdk-21+7. I'll try my own build of current master and perhaps some others.;;;","2023-03-20 06:44;jdowland;Confirmed with current master = commit 652bda0af8f046e9cabd44e3b176fb2cb982c818;;;","2023-04-03 06:13;jdowland;I did some tracing around this morning. java.awt.Font.getStringBounds(char[],int,int,FontRenderContext) makes a determination as to whether the input is simple or not. For the reproducer App, I think it is determined to be simple. At least, the simple branch returns the same value regardless of tracking attribute and the complex branch doesn't. So I think the problem is somewhere under sun.font.FontDesignMetrics.getMetrics, and that's where I'll focus my efforts next session.;;;","2023-04-05 07:07;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/13352
Date: 2023-04-05 13:58:48 +0000;;;","2023-04-13 05:03;dukebot;Changeset: 6b9b7d1d
Author:    Jonathan Dowland <jdowland@openjdk.org>
Committer: Thomas Stuefe <stuefe@openjdk.org>
Date:      2023-04-13 12:02:14 +0000
URL:       https://git.openjdk.org/jdk/commit/6b9b7d1d921367418f82c2813b272d3447a47595
;;;","2023-05-18 07:54;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk20u/pull/81
Date: 2023-05-18 14:46:36 +0000;;;","2023-05-18 13:11;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/1372
Date: 2023-05-18 20:03:47 +0000;;;","2023-05-18 13:13;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk11u-dev/pull/1889
Date: 2023-05-18 20:04:43 +0000;;;","2023-05-18 13:17;jdowland;Fix Request (20u)

Please consider this for 20u. It's clean. I estimate it to be low risk. I've manually verified that a) the issue applies in 20 prior to the patch and b) the patch resolves it.

Note: forgive me but I've /integrated the PR prior to posting this comment; I had forgotten that this part of the workflow was not part of the github/skara integration. Apologies!;;;","2023-05-18 13:17;jdowland;Fix Request (17u)

Please consider this for 17u. It's clean. I estimate it to be low risk.

I've manually verified that a) the issue applies in 20 prior to the patch and b) the patch resolves it. ;;;","2023-05-18 13:17;jdowland;Fix Request (11u)

Please consider this for 11u. It's clean. I estimate it to be low risk.;;;",,,,,,,,,,,,,,,,,,,
java/awt/color/ICC_ColorSpace/ToFromCIEXYZRoundTrip.java times out on slow platforms,JDK-8304334,5096415,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,mbaesken,mbaesken,mbaesken,2023-03-16 03:21,2023-07-27 13:23,2023-10-01 09:56,2023-03-21 02:14,20,21,,,,,,,21,client-libs,,0,,,,,,,,,,,,,,,,,"The ToFromCIEXYZRoundTrip  test times out on slow platforms , especially when (fast)debug binaries are used.
This was observed on Alpine Linux and AIX in our automated tests.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8305961,,,,,,,,,,,,,,,,,,,,,generic,,,,,,,,,,generic,,,,,,"0|i30rpn:",9223372036854775807,b15,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4b09ce31,,,,,,,,,"2023-03-17 02:28;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/13073
Date: 2023-03-17 09:08:56 +0000;;;","2023-03-21 02:14;dukebot;Changeset: c65bb2c5
Author:    Matthias Baesken <mbaesken@openjdk.org>
Date:      2023-03-21 09:13:01 +0000
URL:       https://git.openjdk.org/jdk/commit/c65bb2c58e0328cec83ebfa5408b5176f8639d14
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
[Lilliput/JDK17] Fix RTM locking,JDK-8304331,5096412,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,rkennke,rkennke,rkennke,2023-03-16 02:55,2023-04-03 12:13,2023-10-01 09:56,2023-04-03 12:13,repo-lilliput-17,,,,,,,,repo-lilliput-17,hotspot,,0,lilliput,,,,,,,,,,,,,,,,"Some RTM locking tests are currently failing:

compiler/rtm/cli/TestUseRTMLockingOptionWithBiasedLocking.java
compiler/rtm/locking/TestRTMRetryCount.java
compiler/rtm/locking/TestRTMTotalCountIncrRate.java
compiler/rtm/locking/TestUseRTMAfterLockInflation.java
compiler/rtm/locking/TestUseRTMForInflatedLocks.java
compiler/rtm/locking/TestUseRTMForStackLocks.java
compiler/rtm/method_options/TestUseRTMLockElidingOption.java",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,x86,x86_64,,,,,,,,,generic,other,,,,,"0|i30roz:",9223372036854775807,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2023-03-16 03:27;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/lilliput-jdk17u/pull/12
Date: 2023-03-16 10:01:42 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
[Lilliput/JDK17] Fix DiagnoseSyncOnValueBasedClasses,JDK-8304329,5096410,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,rkennke,rkennke,rkennke,2023-03-16 02:12,2023-04-03 12:04,2023-10-01 09:56,2023-04-03 12:04,repo-lilliput-17,,,,,,,,repo-lilliput-17,hotspot,,0,lilliput,,,,,,,,,,,,,,,,"Some deeper testing shows that the following test is failing:

java/net/httpclient/LineBodyHandlerTest.java

That is caused by that test using DiagnoseSyncOnValueBasedClasses, and that seems currently broken with Lilliput/JDK17 because it sets a plain prototype header on a class, where it should also set the narrow Klass* in the prototype.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,generic,,,,,,,,,,generic,,,,,,"0|i30roj:",9223372036854775807,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,,,"2023-03-16 02:36;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/lilliput-jdk17u/pull/11
Date: 2023-03-16 09:15:02 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
JMX Guide: Document the deprecation of Subject Delegation,JDK-8304327,5096408,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,kevinw,kevinw,kevinw,2023-03-16 02:05,2023-06-05 09:36,2023-10-01 09:56,2023-05-23 08:38,,,,,,,,,21,docs,,0,,,,,,,,,,,,,,,,,"We need to add a warning that Subject Delegation in JDK 21 is deprecated for removal.
https://bugs.openjdk.org/browse/JDK-8298966

22 Security with Subject Delegation
https://docs.oracle.com/en/java/javase/19/jmx/security-subject-delegation-example.html

There should be a warning box, like we already have in chapter 23 for the Security Manager usage.  It could use some of the text from the release note.  e.g.

WARNING: The Subject Delegation feature is deprecated and subject to removal in a future release.  It is dependent on other APIs which are deprecated for removal in JEP411.  If a client application needs to perform operations as or on behalf of multiple identities, it will need to make multiple calls to JMXConnectorFactory.connect() and to the getMBeanServerConnection() method on the returned JMXConnector.
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8298966,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i30ro3:",9223372036854775807,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4eba8c33,,,,,,,,,"2023-05-22 12:29;shkamath;This has been added to the Security with Subject Delegation page of the JMX Guide:

Warning: The Security Manager feature is deprecated and is subject to removal in a future release. It is dependent on other APIs that are deprecated and removed in JEP 411. If a client application needs to perform operations as or on behalf of multiple identities, it will need to make multiple calls to JMXConnectorFactory.connect() and to getMBeanServerConnection() on the returned JMXConnector.;;;","2023-05-22 12:30;shkamath;Hi Kevin, can you please review the text and let me know if there should be any changes.
Thanks,
S;;;","2023-05-22 13:55;kevinw;Thanks Sheila - We want to say ""The Subject Delegation feature is deprecated..."" I think.  The Security Manager and related APIs are deprecated in JEP411, and it's those ""other APIs"" which are a requirement for Subject Delegation.
;;;","2023-05-23 07:35;shkamath;Thanks Kevin! I've changed the warning to:


The Subject Delegation feature is deprecated and is subject to removal in a future release. It is dependent on other APIs that were deprecated and removed in JEP 411. If a client application needs to perform operations as or on behalf of multiple identities, it needs to make multiple calls to JMXConnectorFactory.connect() and to getMBeanServerConnection() on the returned JMXConnector.

Thank you for the explanation, it makes more sense. :-);;;",,,,,,,,,,,,,,,,,,,,,,,,,,,
StackWalkTest.java fails after CODETOOLS-7903373,JDK-8304314,5096395,Bug,Closed,JDK,JDK,software,duke,,,P4,Fixed,lmesnik,thartmann,thartmann,2023-03-15 23:20,2023-09-04 02:44,2023-10-01 09:56,2023-03-17 06:45,21,,,,,,,,21,core-libs,,0,jdk17u-fix-request,jdk17u-fix-yes,,,,,,,,,,,,,,,"Reported by Kosta Stojiljkovic <kostasto@proton.me> via https://mail.openjdk.org/pipermail/hotspot-compiler-dev/2023-March/063518.html

The test seems to fail after CODETOOLS-7903373.

	at StackWalkTest$Test.call2(StackWalkTest.java:217)
	at StackWalkTest$Test.call(StackWalkTest.java:204)
	at StackWalkTest$Marker.call(StackWalkTest.java:187)
	at StackWalkTest$Test.call(StackWalkTest.java:202)
	at StackWalkTest$Call.call(StackWalkTest.java:175)
	at StackWalkTest$Test.call2(StackWalkTest.java:217)
	at StackWalkTest$Test.call(StackWalkTest.java:204)
	at StackWalkTest$Call.call(StackWalkTest.java:175)
	at StackWalkTest$Test.call2(StackWalkTest.java:217)
	at StackWalkTest$Test.call(StackWalkTest.java:204)
	at StackWalkTest$Call.call(StackWalkTest.java:175)
	at StackWalkTest$Test.call2(StackWalkTest.java:217)
	at StackWalkTest$Test.call(StackWalkTest.java:204)
	at StackWalkTest.runTest(StackWalkTest.java:247)
	at StackWalkTest.main(StackWalkTest.java:298)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
	at java.base/java.lang.reflect.Method.invoke(Method.java:578)
	at com.sun.javatest.regtest.agent.MainWrapper$MainTask.run(MainWrapper.java:138)
	at java.base/java.lang.Thread.run(Thread.java:1623)
Caused by: java.lang.IndexOutOfBoundsException: Index: 1004, Size: 1004
	at java.base/java.util.LinkedList.checkElementIndex(LinkedList.java:559)
	at java.base/java.util.LinkedList.get(LinkedList.java:480)
	at StackRecorderUtil.compareFrame(StackRecorderUtil.java:64)
	at StackWalkTest.consume(StackWalkTest.java:137)
	... 1018 more

JavaTest Message: Test threw exception: java.lang.RuntimeException: extra non-infra stack frame at count 1004: <com.sun.javatest.regtest.agent.MainWrapper$MainTask.run(MainWrapper.java:138)>
JavaTest Message: shutting down test
",,,,,,,,,,,JDK-8311615,JDK-8315635,JDK-8313284,,,,,,,,,,,,,JDK-8304896,,,,,,,,,,CODETOOLS-7903373,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i30rl7:",9223372036854775807,b15,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4c088d55,,,,,,,Verified,,"2023-03-16 00:03;alanb;The loom repo has been using the main wrapper plugin and has this change to the StackWalkTest to keep it running.

```
diff --git a/test/jdk/java/lang/StackWalker/StackWalkTest.java b/test/jdk/java/lang/StackWalker/StackWalkTest.java
index ad7a2c463ec..fe771812f38 100644
--- a/test/jdk/java/lang/StackWalker/StackWalkTest.java
+++ b/test/jdk/java/lang/StackWalker/StackWalkTest.java
@@ -60,6 +60,7 @@ public class StackWalkTest {
             ""java.lang.reflect.Method"",
             ""com.sun.javatest.regtest.MainWrapper$MainThread"",
             ""com.sun.javatest.regtest.agent.MainWrapper$MainThread"",
+            ""com.sun.javatest.regtest.agent.MainWrapper$MainTask"",
             ""java.lang.Thread""
     ));
```;;;","2023-03-16 06:52;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/13058
Date: 2023-03-16 13:26:35 +0000;;;","2023-03-17 06:45;dukebot;Changeset: d5a15070
Author:    Leonid Mesnik <lmesnik@openjdk.org>
Date:      2023-03-17 13:43:54 +0000
URL:       https://git.openjdk.org/jdk/commit/d5a150706e9070557533135489a73fc8cefc0cec
;;;","2023-05-23 14:20;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk20u/pull/82
Date: 2023-05-23 21:13:20 +0000;;;","2023-06-07 00:38;stuefe;Fix Request (jdk 20)

(opened on behalf of Vladimir Petko from Canonical)

The backport is necessary due to the Ubuntu packaging - in order to avoid having two versions of jtreg7 (7.1 and 7.2) we can apply the patch to the test so that it passes in openjdk-20 with jtreg 7.2

Patch applies cleanly.

Risk: Low - only test in question is affected. The change adds an additional excluded stack frame which should not have any negative impact except a negligible performance penalty.;;;","2023-07-05 00:49;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/1542
Date: 2023-07-05 07:43:07 +0000;;;","2023-07-05 04:44;goetz;Fix request [17u]

I backport this to enable jtreg 7.2.
No risk, only a test change.
Clean backport.
Test passes. SAP nightly testing passed.;;;",,,,,,,,,,,,,,,,,,,,,,,,
harfbuzz build fails with GCC 7 after JDK-8301998,JDK-8304295,5096373,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,jcao,fjiang,fjiang,2023-03-15 20:09,2023-05-15 18:17,2023-10-01 09:56,2023-04-01 07:38,21,,,,,,,,21,client-libs,,0,jdk11u-fix-request,jdk11u-fix-yes,jdk17u-fix-request,jdk17u-fix-yes,jdk20u-fix-request,jdk20u-fix-SQE-ok,jdk20u-fix-yes,,,,,,,,,,"ERROR: Build failed for target 'all' in configuration 'linux-x86_64-server-release' (exit code 2) 

=== Output from failing command(s) repeated here ===
* For target support_native_java.desktop_libfontmanager_gsubgpos-context.o:
In file included from src/java.desktop/share/native/libharfbuzz/graph/../hb.hh:514:0,
                 from src/java.desktop/share/native/libharfbuzz/graph/../hb-set.hh:31,
                 from src/java.desktop/share/native/libharfbuzz/graph/graph.hh:27,
                 from src/java.desktop/share/native/libharfbuzz/graph/gsubgpos-graph.hh:27,
                 from src/java.desktop/share/native/libharfbuzz/graph/gsubgpos-context.cc:27:
src/java.desktop/share/native/libharfbuzz/graph/../hb-iter.hh: In instantiation of 'hb_apply_t<Appl>::hb_apply_t(Appl) [with Appl = void (&)(void*) throw ()]':
src/java.desktop/share/native/libharfbuzz/graph/../hb-iter.hh:697:12:   required from 'hb_apply_t<Appl&><unnamed struct>::operator()(Appl*) const [with Appl = void(void*) throw ()]'
src/java.desktop/share/native/libharfbuzz/graph/../hb-pool.hh:43:16:   required from 'hb_pool_t<T, ChunkLen>::~hb_pool_t() [with T = hb_serialize_context_t::object_t; unsigned int ChunkLen = 32]'
src/java.desktop/share/native/libharfbuzz/graph/../hb-serialize.hh:181:21:   required from here
src/java.desktop/share/native/libharfbuzz/graph/../hb-iter.hh:676:3: error: mangled name for 'hb_apply_t<Appl>::hb_apply_t(Appl) [with Appl = void (&)(void*) throw ()]' will change in C++17 because the exception specification is part of a function type [-Werror=noexcept-type]
   hb_apply_t (Appl a) : a (a) {}
   ^~~~~~~~~~
src/java.desktop/share/native/libharfbuzz/graph/../hb-iter.hh:676:3: error: mangled name for 'hb_apply_t<Appl>::hb_apply_t(Appl) [with Appl = void (&)(void*) throw ()]' will change in C++17 because the exception specification is part of a function type [-Werror=noexcept-type]
src/java.desktop/share/native/libharfbuzz/graph/../hb-iter.hh:680:8: error: mangled name for 'void hb_apply_t<Appl>::operator()(Iter) [with Iter = hb_array_t<hb_pool_t<hb_serialize_context_t::object_t>::chunk_t* const>; typename hb_enable_if<hb_is_iterator_of<Iter, typename Iter::item_t>::value>::type* <anonymous> = 0; Appl = void (&)(void*) throw ()]' will change in C++17 because the exception specification is part of a function type [-Werror=noexcept-type]
   void operator () (Iter it)
   ... (rest of output omitted)
* For target support_native_java.desktop_libfontmanager_hb-aat-layout.o:
In file included from src/java.desktop/share/native/libharfbuzz/hb.hh:514:0,
                 from src/java.desktop/share/native/libharfbuzz/hb-aat-layout.cc:28:
src/java.desktop/share/native/libharfbuzz/hb-iter.hh: In instantiation of 'hb_apply_t<Appl>::hb_apply_t(Appl) [with Appl = void (&)(void*) throw ()]':
src/java.desktop/share/native/libharfbuzz/hb-iter.hh:697:12:   required from 'hb_apply_t<Appl&><unnamed struct>::operator()(Appl*) const [with Appl = void(void*) throw ()]'
src/java.desktop/share/native/libharfbuzz/hb-pool.hh:43:16:   required from 'hb_pool_t<T, ChunkLen>::~hb_pool_t() [with T = hb_serialize_context_t::object_t; unsigned int ChunkLen = 32]'
src/java.desktop/share/native/libharfbuzz/hb-serialize.hh:181:21:   required from here
src/java.desktop/share/native/libharfbuzz/hb-iter.hh:676:3: error: mangled name for 'hb_apply_t<Appl>::hb_apply_t(Appl) [with Appl = void (&)(void*) throw ()]' will change in C++17 because the exception specification is part of a function type [-Werror=noexcept-type]
   hb_apply_t (Appl a) : a (a) {}
   ^~~~~~~~~~
src/java.desktop/share/native/libharfbuzz/hb-iter.hh:676:3: error: mangled name for 'hb_apply_t<Appl>::hb_apply_t(Appl) [with Appl = void (&)(void*) throw ()]' will change in C++17 because the exception specification is part of a function type [-Werror=noexcept-type]
src/java.desktop/share/native/libharfbuzz/hb-iter.hh:680:8: error: mangled name for 'void hb_apply_t<Appl>::operator()(Iter) [with Iter = hb_array_t<hb_pool_t<hb_serialize_context_t::object_t>::chunk_t* const>; typename hb_enable_if<hb_is_iterator_of<Iter, typename Iter::item_t>::value>::type* <anonymous> = 0; Appl = void (&)(void*) throw ()]' will change in C++17 because the exception specification is part of a function type [-Werror=noexcept-type]
   void operator () (Iter it)
        ^~~~~~~~
src/java.desktop/share/native/libharfbuzz/hb-iter.hh:676:3: error: mangled name for 'hb_apply_t<Appl>::hb_apply_t(Appl) [with Appl = void (&)(void*) throw ()]' will change in C++17 because the exception specification is part of a function type [-Werror=noexcept-type]
   hb_apply_t (Appl a) : a (a) {}
   ... (rest of output omitted)
* For target support_native_java.desktop_libfontmanager_hb-aat-map.o:
In file included from src/java.desktop/share/native/libharfbuzz/hb.hh:514:0,
                 from src/java.desktop/share/native/libharfbuzz/hb-aat-map.cc:29:
src/java.desktop/share/native/libharfbuzz/hb-iter.hh: In instantiation of 'hb_apply_t<Appl>::hb_apply_t(Appl) [with Appl = void (&)(void*) throw ()]':
src/java.desktop/share/native/libharfbuzz/hb-iter.hh:697:12:   required from 'hb_apply_t<Appl&><unnamed struct>::operator()(Appl*) const [with Appl = void(void*) throw ()]'
src/java.desktop/share/native/libharfbuzz/hb-pool.hh:43:16:   required from 'hb_pool_t<T, ChunkLen>::~hb_pool_t() [with T = hb_serialize_context_t::object_t; unsigned int ChunkLen = 32]'
src/java.desktop/share/native/libharfbuzz/hb-serialize.hh:181:21:   required from here
src/java.desktop/share/native/libharfbuzz/hb-iter.hh:676:3: error: mangled name for 'hb_apply_t<Appl>::hb_apply_t(Appl) [with Appl = void (&)(void*) throw ()]' will change in C++17 because the exception specification is part of a function type [-Werror=noexcept-type]
   hb_apply_t (Appl a) : a (a) {}
   ^~~~~~~~~~
src/java.desktop/share/native/libharfbuzz/hb-iter.hh:676:3: error: mangled name for 'hb_apply_t<Appl>::hb_apply_t(Appl) [with Appl = void (&)(void*) throw ()]' will change in C++17 because the exception specification is part of a function type [-Werror=noexcept-type]
src/java.desktop/share/native/libharfbuzz/hb-iter.hh:680:8: error: mangled name for 'void hb_apply_t<Appl>::operator()(Iter) [with Iter = hb_array_t<hb_pool_t<hb_serialize_context_t::object_t>::chunk_t* const>; typename hb_enable_if<hb_is_iterator_of<Iter, typename Iter::item_t>::value>::type* <anonymous> = 0; Appl = void (&)(void*) throw ()]' will change in C++17 because the exception specification is part of a function type [-Werror=noexcept-type]
   void operator () (Iter it)
        ^~~~~~~~
src/java.desktop/share/native/libharfbuzz/hb-iter.hh:676:3: error: mangled name for 'hb_apply_t<Appl>::hb_apply_t(Appl) [with Appl = void (&)(void*) throw ()]' will change in C++17 because the exception specification is part of a function type [-Werror=noexcept-type]
   hb_apply_t (Appl a) : a (a) {}
   ... (rest of output omitted)
* For target support_native_java.desktop_libfontmanager_hb-buffer.o:
In file included from src/java.desktop/share/native/libharfbuzz/hb.hh:514:0,
                 from src/java.desktop/share/native/libharfbuzz/hb-buffer.hh:33,
                 from src/java.desktop/share/native/libharfbuzz/hb-buffer.cc:30:
src/java.desktop/share/native/libharfbuzz/hb-iter.hh: In instantiation of 'hb_apply_t<Appl>::hb_apply_t(Appl) [with Appl = void (&)(void*) throw ()]':
src/java.desktop/share/native/libharfbuzz/hb-iter.hh:697:12:   required from 'hb_apply_t<Appl&><unnamed struct>::operator()(Appl*) const [with Appl = void(void*) throw ()]'
src/java.desktop/share/native/libharfbuzz/hb-pool.hh:43:16:   required from 'hb_pool_t<T, ChunkLen>::~hb_pool_t() [with T = hb_serialize_context_t::object_t; unsigned int ChunkLen = 32]'
src/java.desktop/share/native/libharfbuzz/hb-serialize.hh:181:21:   required from here
src/java.desktop/share/native/libharfbuzz/hb-iter.hh:676:3: error: mangled name for 'hb_apply_t<Appl>::hb_apply_t(Appl) [with Appl = void (&)(void*) throw ()]' will change in C++17 because the exception specification is part of a function type [-Werror=noexcept-type]
   hb_apply_t (Appl a) : a (a) {}
   ^~~~~~~~~~
src/java.desktop/share/native/libharfbuzz/hb-iter.hh:676:3: error: mangled name for 'hb_apply_t<Appl>::hb_apply_t(Appl) [with Appl = void (&)(void*) throw ()]' will change in C++17 because the exception specification is part of a function type [-Werror=noexcept-type]
src/java.desktop/share/native/libharfbuzz/hb-iter.hh:680:8: error: mangled name for 'void hb_apply_t<Appl>::operator()(Iter) [with Iter = hb_array_t<hb_pool_t<hb_serialize_context_t::object_t>::chunk_t* const>; typename hb_enable_if<hb_is_iterator_of<Iter, typename Iter::item_t>::value>::type* <anonymous> = 0; Appl = void (&)(void*) throw ()]' will change in C++17 because the exception specification is part of a function type [-Werror=noexcept-type]
   void operator () (Iter it)
        ^~~~~~~~
src/java.desktop/share/native/libharfbuzz/hb-iter.hh:676:3: error: mangled name for 'hb_apply_t<Appl>::hb_apply_t(Appl) [with Appl = void (&)(void*) throw ()]' will change in C++17 because the exception specification is part of a function type [-Werror=noexcept-type]
   ... (rest of output omitted)
* For target support_native_java.desktop_libfontmanager_hb-common.o:
In file included from src/java.desktop/share/native/libharfbuzz/hb.hh:514:0,
                 from src/java.desktop/share/native/libharfbuzz/hb-common.cc:29:
src/java.desktop/share/native/libharfbuzz/hb-iter.hh: In instantiation of 'hb_apply_t<Appl>::hb_apply_t(Appl) [with Appl = void (&)(void*) throw ()]':
src/java.desktop/share/native/libharfbuzz/hb-iter.hh:697:12:   required from 'hb_apply_t<Appl&><unnamed struct>::operator()(Appl*) const [with Appl = void(void*) throw ()]'
src/java.desktop/share/native/libharfbuzz/hb-pool.hh:43:16:   required from 'hb_pool_t<T, ChunkLen>::~hb_pool_t() [with T = hb_serialize_context_t::object_t; unsigned int ChunkLen = 32]'
src/java.desktop/share/native/libharfbuzz/hb-serialize.hh:181:21:   required from here
src/java.desktop/share/native/libharfbuzz/hb-iter.hh:676:3: error: mangled name for 'hb_apply_t<Appl>::hb_apply_t(Appl) [with Appl = void (&)(void*) throw ()]' will change in C++17 because the exception specification is part of a function type [-Werror=noexcept-type]
   hb_apply_t (Appl a) : a (a) {}
   ^~~~~~~~~~
src/java.desktop/share/native/libharfbuzz/hb-iter.hh:676:3: error: mangled name for 'hb_apply_t<Appl>::hb_apply_t(Appl) [with Appl = void (&)(void*) throw ()]' will change in C++17 because the exception specification is part of a function type [-Werror=noexcept-type]
src/java.desktop/share/native/libharfbuzz/hb-iter.hh:680:8: error: mangled name for 'void hb_apply_t<Appl>::operator()(Iter) [with Iter = hb_array_t<hb_pool_t<hb_serialize_context_t::object_t>::chunk_t* const>; typename hb_enable_if<hb_is_iterator_of<Iter, typename Iter::item_t>::value>::type* <anonymous> = 0; Appl = void (&)(void*) throw ()]' will change in C++17 because the exception specification is part of a function type [-Werror=noexcept-type]
   void operator () (Iter it)
        ^~~~~~~~
src/java.desktop/share/native/libharfbuzz/hb-iter.hh:676:3: error: mangled name for 'hb_apply_t<Appl>::hb_apply_t(Appl) [with Appl = void (&)(void*) throw ()]' will change in C++17 because the exception specification is part of a function type [-Werror=noexcept-type]
   hb_apply_t (Appl a) : a (a) {}
   ... (rest of output omitted)

* All command lines available in /home/jiangfeilong/workspace/jdk/build/linux-x86_64-server-release/make-support/failure-logs.
=== End of repeated output ===",,,,,,,,,,,JDK-8307380,JDK-8308135,JDK-8305589,JDK-8306728,JDK-8305852,JDK-8307830,JDK-8306244,,,,,,,,,,,,,,,,,,,JDK-8301998,,,,,,,,,"2023-03-16 18:12;fjiang;build.log;https://bugs.openjdk.org/secure/attachment/103036/build.log",,,,,,,,,,,,generic,,,,,,,,21,,linux,,,,,,"0|i30rgb:",9223372036854775807,b17,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4b09ce31,,,,,,,,,"2023-03-16 00:59;fjiang;The same build failure occurs on AArch64 with GCC 7;;;","2023-03-16 11:21;erikj;Have you tried configuring with --disable-warnings-as-errors? ;;;","2023-03-16 11:47;honkar;This build issue is due to compiler warning that is treated as error. Such build warnings can be resolved by running  configure with --disable-warnings-as-errors.

Please refer to the steps and JDK strict approach for these warnings in Fixing Unexpected Build Failures section of this doc: https://openjdk.org/groups/build/doc/building.html;;;","2023-03-16 11:48;honkar;[~fjiang] Can you please add the entire error log, it seems to be cut off at the end.;;;","2023-03-16 12:04;kbarrett;-Wall enables -Wc++17-compat, which enables -Wnoexcept-type, which is the warning being reported.
I think we could reasonably disable -Wc++17-compat, leaving it to the folks who eventually do our upgrade to C++17 to use it when the time comes.  I suspect we do not care about -Wnoexcept-type at all though, so perhaps just disable that.  And I'm a little surprised harfbuzz is still using ""throw()"" exception specifications rather than ""noexcept"".  Or is that our code in the template parameters?
;;;","2023-03-16 12:14;prr;So why is gcc 11 not complaining ?
I'd expect a new compiler to care even more about newer versions of the standard ?

> Or is that our code in the template parameters? 
No, all code here is harfbuzz.;;;","2023-03-16 16:37;kbarrett;> So why is gcc 11 not complaining ?

That's an interesting question, for which I don't have an answer. The relevant change proposals are listed in the gcc conformance table as having been implemented in gcc7. The documentation for `-Wnoexcept-type` and `-Wc++17-compat` seem to be identical for gcc8 and gcc11.
;;;","2023-03-16 18:13;fjiang;[~erikj] [~honkar] --disable-warnings-as-errors works. I attached the full build log for aarch64 without --disable-warnings-as-errors.;;;","2023-03-17 10:56;honkar;[~fjiang] Checked the newly attached log. The build errors are due to compiler warnings. As discussed, this can be resolved by using --disable-warnings-as-errors.

Will be closing this issue.;;;","2023-03-30 14:03;jcao;I have an easy fix that will disable the warning, so we don't always have to pass --disable-warnings-as-errors;;;","2023-03-30 14:19;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/13253
Date: 2023-03-30 21:05:40 +0000;;;","2023-04-01 07:38;dukebot;Changeset: 34e66ce1
Author:    Joshua Cao <joshcao@amazon.com>
Committer: Julian Waters <jwaters@openjdk.org>
Date:      2023-04-01 14:36:52 +0000
URL:       https://git.openjdk.org/jdk/commit/34e66ce1ef2decc81557a362d6242313e98417fa
;;;","2023-04-18 09:29;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/1264
Date: 2023-04-18 16:07:37 +0000;;;","2023-04-18 23:04;goetz;Fix request [17u]

I backport this for parity with 17.0.8-oracle.
Required follow up of 8301998. Included in that change.;;;","2023-04-27 10:06;serb;Fix request (20u)

Clean backport. The fix for a broken build on some compilers.

Review 20u: https://github.com/openjdk/jdk20u/pull/68;;;","2023-04-27 10:09;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk20u/pull/68
Date: 2023-04-27 16:38:10 +0000;;;","2023-05-08 00:27;goetz;Fix request [11u]

I backport this for parity with 11.0.20-oracle.
Required follow up of 8301998. Included in that change.

;;;","2023-05-08 00:28;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk11u-dev/pull/1864
Date: 2023-05-08 07:21:27 +0000;;;",,,,,,,,,,,,,
Update JRuby test runner to start process in the current directory,JDK-8304294,5096372,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,lmesnik,lmesnik,lmesnik,2023-03-15 19:15,2023-03-23 00:27,2023-10-01 09:56,2023-03-16 07:41,21,,,,,,,,21,hotspot,,0,,,,,,,,,,,,,,,,,It is needed to update JRuby test runner to start process in the current directory. So core/hs_err files are properly saved.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i30rg3:",9223372036854775807,b15,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@78d03d9a,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Memory leak related to ClassLoader::update_class_path_entry_list,JDK-8304292,5096366,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,ccheung,jcking,jcking,2023-03-15 16:16,2023-08-16 23:29,2023-10-01 09:56,2023-08-10 13:05,21,,,,,,,,22,hotspot,,0,asan,classloading,,,,,,,,,,,,,,,"Pretty sure this is related to the duplicate checking. It looks like if its a duplicate, it just drops the object on the floor and doesn't delete it.

Direct leak of 40 byte(s) in 1 object(s) allocated from:
    #0 0x7f26620b89cf in __interceptor_malloc ../../../../src/libsanitizer/asan/asan_malloc_linux.cpp:69
    #1 0x7f265e6988cf in os::malloc(unsigned long, MEMFLAGS, NativeCallStack const&) src/hotspot/share/runtime/os.cpp:654
    #2 0x7f265c21cc57 in AllocateHeap(unsigned long, MEMFLAGS, NativeCallStack const&, AllocFailStrategy::AllocFailEnum) src/hotspot/share/memory/allocation.cpp:42
    #3 0x7f265c21cc57 in AllocateHeap(unsigned long, MEMFLAGS, AllocFailStrategy::AllocFailEnum) src/hotspot/share/memory/allocation.cpp:52
    #4 0x7f265cae12fc in CHeapObjBase::operator new(unsigned long, MEMFLAGS) src/hotspot/share/memory/allocation.hpp:183
    #5 0x7f265cae12fc in CHeapObj<(MEMFLAGS)1>::operator new(unsigned long) src/hotspot/share/memory/allocation.hpp:237
    #6 0x7f265cae12fc in ClassLoader::create_class_path_entry(JavaThread*, char const*, stat const*, bool, bool) src/hotspot/share/classfile/classLoader.cpp:742
    #7 0x7f265cae1e35 in ClassLoader::create_class_path_entry(JavaThread*, char const*, stat const*, bool, bool) src/hotspot/share/classfile/classLoader.cpp:845
    #8 0x7f265cae1e35 in ClassLoader::update_class_path_entry_list(JavaThread*, char const*, bool, bool, bool) src/hotspot/share/classfile/classLoader.cpp:845
    #9 0x7f265cb0b09b in ClassLoaderExt::process_jar_manifest(JavaThread*, ClassPathEntry*) src/hotspot/share/classfile/classLoaderExt.cpp:235
    #10 0x7f265cad8a76 in ClassLoader::add_to_app_classpath_entries(JavaThread*, ClassPathEntry*, bool) src/hotspot/share/classfile/classLoader.cpp:830
    #11 0x7f265cae2386 in ClassLoader::update_class_path_entry_list(JavaThread*, char const*, bool, bool, bool) src/hotspot/share/classfile/classLoader.cpp:855
    #12 0x7f265cae2386 in ClassLoader::setup_app_search_path(JavaThread*, char const*) src/hotspot/share/classfile/classLoader.cpp:524
    #13 0x7f265cb08e36 in ClassLoaderExt::setup_app_search_path(JavaThread*) src/hotspot/share/classfile/classLoaderExt.cpp:79
    #14 0x7f265f0f64b4 in universe_init() src/hotspot/share/memory/universe.cpp:833
    #15 0x7f265d656c28 in init_globals() src/hotspot/share/runtime/init.cpp:123
    #16 0x7f265f083897 in Threads::create_vm(JavaVMInitArgs*, bool*) src/hotspot/share/runtime/threads.cpp:568
    #17 0x7f265da41163 in JNI_CreateJavaVM_inner src/hotspot/share/prims/jni.cpp:3588
    #18 0x7f265da41163 in JNI_CreateJavaVM src/hotspot/share/prims/jni.cpp:3674
    #19 0x7f2662831e25 in InitializeJVM src/java.base/share/native/libjli/java.c:1459
    #20 0x7f2662831e25 in JavaMain src/java.base/share/native/libjli/java.c:413
    #21 0x7f266283a708 in ThreadJavaMain src/java.base/unix/native/libjli/java_md.c:650
    #22 0x7f2661ea7fd3 in start_thread nptl/pthread_create.c:442

Indirect leak of 81 byte(s) in 1 object(s) allocated from:
    #0 0x7f26620b89cf in __interceptor_malloc ../../../../src/libsanitizer/asan/asan_malloc_linux.cpp:69
    #1 0x7f265e6988cf in os::malloc(unsigned long, MEMFLAGS, NativeCallStack const&) src/hotspot/share/runtime/os.cpp:654
    #2 0x7f265c21cc57 in AllocateHeap(unsigned long, MEMFLAGS, NativeCallStack const&, AllocFailStrategy::AllocFailEnum) src/hotspot/share/memory/allocation.cpp:42
    #3 0x7f265c21cc57 in AllocateHeap(unsigned long, MEMFLAGS, AllocFailStrategy::AllocFailEnum) src/hotspot/share/memory/allocation.cpp:52
    #4 0x7f265cae1381 in ClassPathEntry::copy_path(char const*) src/hotspot/share/classfile/classLoader.cpp:235
    #5 0x7f265cae1381 in ClassPathZipEntry::ClassPathZipEntry(void**, char const*, bool, bool) src/hotspot/share/classfile/classLoader.cpp:287
    #6 0x7f265cae1381 in ClassLoader::create_class_path_entry(JavaThread*, char const*, stat const*, bool, bool) src/hotspot/share/classfile/classLoader.cpp:742
    #7 0x7f265cae1e35 in ClassLoader::create_class_path_entry(JavaThread*, char const*, stat const*, bool, bool) src/hotspot/share/classfile/classLoader.cpp:845
    #8 0x7f265cae1e35 in ClassLoader::update_class_path_entry_list(JavaThread*, char const*, bool, bool, bool) src/hotspot/share/classfile/classLoader.cpp:845
    #9 0x7f265cb0b09b in ClassLoaderExt::process_jar_manifest(JavaThread*, ClassPathEntry*) src/hotspot/share/classfile/classLoaderExt.cpp:235
    #10 0x7f265cad8a76 in ClassLoader::add_to_app_classpath_entries(JavaThread*, ClassPathEntry*, bool) src/hotspot/share/classfile/classLoader.cpp:830
    #11 0x7f265cae2386 in ClassLoader::update_class_path_entry_list(JavaThread*, char const*, bool, bool, bool) src/hotspot/share/classfile/classLoader.cpp:855
    #12 0x7f265cae2386 in ClassLoader::setup_app_search_path(JavaThread*, char const*) src/hotspot/share/classfile/classLoader.cpp:524
    #13 0x7f265cb08e36 in ClassLoaderExt::setup_app_search_path(JavaThread*) src/hotspot/share/classfile/classLoaderExt.cpp:79
    #14 0x7f265f0f64b4 in universe_init() src/hotspot/share/memory/universe.cpp:833
    #15 0x7f265d656c28 in init_globals() src/hotspot/share/runtime/init.cpp:123
    #16 0x7f265f083897 in Threads::create_vm(JavaVMInitArgs*, bool*) src/hotspot/share/runtime/threads.cpp:568
    #17 0x7f265da41163 in JNI_CreateJavaVM_inner src/hotspot/share/prims/jni.cpp:3588
    #18 0x7f265da41163 in JNI_CreateJavaVM src/hotspot/share/prims/jni.cpp:3674
    #19 0x7f2662831e25 in InitializeJVM src/java.base/share/native/libjli/java.c:1459
    #20 0x7f2662831e25 in JavaMain src/java.base/share/native/libjli/java.c:413
    #21 0x7f266283a708 in ThreadJavaMain src/java.base/unix/native/libjli/java_md.c:650
    #22 0x7f2661ea7fd3 in start_thread nptl/pthread_create.c:442",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i30rer:",9223372036854775807,b11,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,,,"2023-03-21 15:45;ccheung;The bug is probably in ClassLoader::add_to_app_classpath_entries().
If the function is called with ""check_for_duplicates"" set to true and the ""ClassPathEntry* entry"" is a duplicate, the entry should be deleted before return.;;;","2023-05-05 08:03;azafari;[~jcking], how the problem can be reproduced? How can I test the potential fix?;;;","2023-08-02 23:20;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/15132
Date: 2023-08-03 06:14:37 +0000;;;","2023-08-10 13:05;dukebot;Changeset: 88b4e3b8
Author:    Calvin Cheung <ccheung@openjdk.org>
Date:      2023-08-10 20:02:27 +0000
URL:       https://git.openjdk.org/jdk/commit/88b4e3b8539c2beb29ad92bd74b300002c2ef84b
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,
[AIX] Broken build after JDK-8301998,JDK-8304291,5096365,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,tsteele,tsteele,tsteele,2023-03-15 15:56,2023-06-13 23:53,2023-10-01 09:56,2023-04-20 00:09,21,,,,,,,,21,client-libs,,0,jdk11u-critical-request,jdk11u-critical-yes,jdk17u-fix-request,jdk17u-fix-yes,jdk20u-fix-request,jdk20u-fix-SQE-ok,jdk20u-fix-yes,oraclejdk-na,,,,,,,,,"Harfbuzz version 7.0.1 does not appear to compile on AIX. Bumping to 7.1.0 fixes one issue, but another issue is present after fixing that.

The first build error is:
Error while processing /home/hotspot/openjdk/jdk-deepa/src/java.desktop/share/native/libharfbuzz/hb-aat-map.cc.
In file included from /home/hotspot/openjdk/jdk-deepa/src/java.desktop/share/native/libharfbuzz/hb-buffer.cc:30:
In file included from /home/hotspot/openjdk/jdk-deepa/src/java.desktop/share/native/libharfbuzz/hb-buffer.hh:33:
In file included from /home/hotspot/openjdk/jdk-deepa/src/java.desktop/share/native/libharfbuzz/hb.hh:513:
/home/hotspot/openjdk/jdk-deepa/src/java.desktop/share/native/libharfbuzz/hb-algs.hh:882:10: error: 1540-2993 The builtin ""__builtin_mul_overflow"" is not supported.
  return __builtin_mul_overflow (count, size, result);

Then:

=== Output from failing command(s) repeated here ===
* For target support_native_java.desktop_libfontmanager_hb-subset.o:
In file included from /home/hotspot/openjdk/jdk-tyler/src/java.desktop/share/native/libharfbuzz/hb-subset.cc:27:
In file included from /home/hotspot/openjdk/jdk-tyler/src/java.desktop/share/native/libharfbuzz/OT/Color/COLR/../../../hb.hh:522:
/home/hotspot/openjdk/jdk-tyler/src/java.desktop/share/native/libharfbuzz/hb-iter.hh:372:23: error: no matching function for call to object of type 'struct (anonymous struct at /home/hotspot/openjdk/jdk-tyler/src/java.desktop/share/native/libharfbuzz/hb-algs.hh:414:1)'
            decltype (hb_get (hb_declval (Proj), *hb_declval (Iter)))>
                      ^~~~~~
/home/hotspot/openjdk/jdk-tyler/src/java.desktop/share/native/libharfbuzz/hb-map.hh:346:5: note: in instantiation of template class 'hb_map_iter_t<hb_filter_iter_t<hb_array_t<hb_hashmap_t<hb_array_t<const char>, unsigned int, true>::item_t>, bool (hb_hashmap_t<hb_array_t<const char>, unsigned int, true>::item_t::*)() const, (anonymous struct at /home/hotspot/openjdk/jdk-tyler/src/java.desktop/share/native/libharfbuzz/hb-algs.hh:202:1) &, nullptr>, const char *, hb_function_sortedness_t::NOT_SORTED, nullptr>' requested here
    + keys_ref ()
    ^
/home/hotspot/openjdk/jdk-tyler/src/java.desktop/share/native/libharfbuzz/hb-ot-post-table-v2subset.hh:81:44: note: in instantiation of template class 'hb_hashmap_t<hb_array_t<const char>, unsigned int, true>' requested here
  hb_hashmap_t<hb_bytes_t, uint32_t, true> glyph_name_to_new_index;
                                           ^
/home/hotspot/openjdk/jdk-tyler/src/java.desktop/share/native/libharfbuzz/hb-algs.hh:440:3: note: candidate template ignored: substitution failure [with Proj = const char *, Val = hb_hashmap_t<hb_array_t<const char>, unsigned int, true>::item_t &]: no matching member function for call to 'impl'
  operator () (Proj&& f, Val &&v) const HB_AUTO_RETURN
  ^
In file included from /home/hotspot/openjdk/jdk-tyler/src/java.desktop/share/native/libharfbuzz/hb-subset.cc:27:
   ... (rest of output omitted)

* All command lines available in /home/hotspot/openjdk/jdk-tyler/build/aix-ppc64-server-fastdebug/make-support/failure-logs.
=== End of repeated output ===
",,,,,,,,,,,JDK-8307576,JDK-8309986,JDK-8307056,JDK-8309815,JDK-8306771,,,,,,,,,,,,,,,,,,JDK-8304321,,,,,,,,JDK-8301998,,,,,,,,,,,,,,,,,,,,,,,,,,aix,,,,,,"0|i30rej:",9223372036854775807,b20,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4b09ce31,,,,,,,,,"2023-03-15 15:59;tsteele;Second issue open at Harfbuzz repo: 
https://github.com/harfbuzz/harfbuzz/issues/4138;;;","2023-03-16 10:25;mdoerr;Is one of the issues related to https://www.ibm.com/support/pages/apar/IJ14858 ?;;;","2023-03-17 13:21;tsteele;Hi Martin,
Good sleuthing. Your linked issue certainly means that xlclang must be updated to include fixpack 2.;;;","2023-03-22 04:47;mbaesken;The first  ""__builtin_mul_overflow"" is not supported  - issue can be easily handled by adjusting the related ifdef at the point where compilation breaks.
The second issue   ""error: no matching function for call ...""   is more tricky, but shows up, according to harfbuzz issue 4138, as well on macOS when ancient clang versions are used.
So there is a very good chance that with a new clang it works nicely; clang 13 on macOS works for us.
xlc 16.1.X is still based on the very old clang 4.0.X .
xlc 17.1.1  seems to be based on clang 15.0.0,  so this might be an option to get around this problem on AIX .;;;","2023-04-05 08:29;mbaesken;Hi Tyler, it seems to me that the ""bad""  file  src/java.desktop/share/native/libharfbuzz/hb-subset.cc  that triggers the compile errors with xlC16 can be excluded from compilation in the OpenJDK. At least I see no compile/link errors when doing so on AIX; maybe we do not use the hb-font subsetting at all in OpenJDK ?
Do I miss something? Should we do so, would also reduce compile time a little bit.
With hb-subset.cc excluded and a small adjustment for the ""__builtin_mul_overflow""  in hb-algs.hh,  the build succeeds with xlC16.
;;;","2023-04-05 09:20;tsteele;That's terrific news :-) I agree with your conclusion [about hb-subset.cc], but I hadn't thought of excluding it from the build.

That '__builtin_mul_overflow' is fixed in Harfbuzz  release 7.1. Would you upgrade, or just add a patch to libharfbuzz with the change?;;;","2023-04-06 04:44;mbaesken;> That '__builtin_mul_overflow' is fixed in Harfbuzz release 7.1. 
> Would you upgrade, or just add a patch to libharfbuzz with the change?

I would not upgrade now to 7.1 but just add the patch.
In a couple of months we will probably go to xlc17 and might remove the patch afterwards.
Btw that is the patch, latest jdk nightbuild worked , could you try it as well please?

diff --git a/src/java.desktop/share/native/libharfbuzz/hb-algs.hh b/src/java.desktop/share/native/libharfbuzz/hb-algs.hh
index 28dc036a515..3c96884ff08 100644
--- a/src/java.desktop/share/native/libharfbuzz/hb-algs.hh
+++ b/src/java.desktop/share/native/libharfbuzz/hb-algs.hh
@@ -876,10 +876,13 @@ static inline bool
 hb_unsigned_mul_overflows (unsigned int count, unsigned int size, unsigned *result = nullptr)
 {
 #if (defined(__GNUC__) && (__GNUC__ >= 4)) || (defined(__clang__) && (__clang_major__ >= 8))
+/* avoid on old xlc16 clang */
+#if !defined(AIX)
   unsigned stack_result;
   if (!result)
     result = &stack_result;
   return __builtin_mul_overflow (count, size, result);
+#endif
 #endif
 
   if (result)
diff --git a/src/java.desktop/share/native/libharfbuzz/hb-subset.cc b/src/java.desktop/share/native/libharfbuzz/hb-subset.cc
index a8161a32551..f6f37527733 100644
--- a/src/java.desktop/share/native/libharfbuzz/hb-subset.cc
+++ b/src/java.desktop/share/native/libharfbuzz/hb-subset.cc
@@ -24,6 +24,7 @@
  * Google Author(s): Garret Rieger, Rod Sheeter, Behdad Esfahbod
  */
 
+#if !defined(AIX)
 #include ""hb.hh""
 #include ""hb-open-type.hh""
 
@@ -631,3 +632,6 @@ end:
 /* If NO_VISIBILITY, libharfbuzz has this. */
 #include ""hb-ot-name-language-static.hh""
 #endif
+
+// AIX
+#endif;;;","2023-04-19 03:44;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/13529
Date: 2023-04-19 10:38:19 +0000;;;","2023-04-20 00:09;dukebot;Changeset: 310aa934
Author:    Matthias Baesken <mbaesken@openjdk.org>
Date:      2023-04-20 07:07:00 +0000
URL:       https://git.openjdk.org/jdk/commit/310aa9347861922af5f0311e9e93a5f49dee6adc
;;;","2023-04-20 13:55;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk20u/pull/57
Date: 2023-04-20 20:47:40 +0000;;;","2023-04-21 00:17;tsteele;fix request [20u, 17u]:

This change is required in order to build after the Harfbuzz upgrade (JDK-8304321). The risk is medium, because this patch may need to be re-applied each time the Harfbuzz library upgrade is performed (it is unlikely that such a change will be made to the Harfbuzz library upstream). Testing: T1 is as expected, test/hotspot/jtreg/serviceability/jvmti are all passing. Patch applied cleanly.;;;","2023-05-03 12:39;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/1320
Date: 2023-05-03 19:32:27 +0000;;;","2023-05-04 02:29;goetz;In head, we should probably replace !AIX by a check for xlc > 16?;;;","2023-06-05 07:47;afarley;Fix Request [11u]:

The __builtin_mul_overflow error has been seen while building JDK11u on AIX. Since the line numbers relevant to the change appear the same as on later versions, I'd like to request a backport of this fix, please.;;;","2023-06-06 06:39;goetz;[~adfarley]
This is broken in 11.0.20, too, right? Don't you want to open a PR against jdk11u and file a jdk11u-critical-request?

Anyways, please only label jdk11u-fix-request if  the backport is ready to be pushed!;;;","2023-06-09 05:25;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk11u-dev/pull/1940
Date: 2023-06-09 12:18:50 +0000;;;","2023-06-09 05:28;afarley;Thanks Goetz! Will do!;;;","2023-06-09 05:45;afarley;Another PR here: https://github.com/openjdk/jdk11u/pull/74;;;","2023-06-09 05:48;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk11u/pull/74
Date: 2023-06-09 12:41:51 +0000;;;",,,,,,,,,,,,
Some JNI calls made without checking exceptions in media,JDK-8304290,5096364,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,almatvee,mowerfel,mowerfel,2023-03-15 15:25,2023-06-23 14:42,2023-10-01 09:56,2023-06-20 14:01,jfx20,,,,,,,,jfx21,javafx,,0,fuzzing,sn_141,sn_146,,,,,,,,,,,,,,"WARNING in native method: JNI call made without checking exceptions when required to from CallObjectMethodV
        at com.sun.media.jfxmediaimpl.platform.gstreamer.GSTMedia.gstInitNativeMedia(javafx.media@19/Native Method)
        at com.sun.media.jfxmediaimpl.platform.gstreamer.GSTMedia.init(javafx.media@19/GSTMedia.java:65)
        at com.sun.media.jfxmediaimpl.platform.gstreamer.GSTMedia.<init>(javafx.media@19/GSTMedia.java:52)
        at com.sun.media.jfxmediaimpl.platform.gstreamer.GSTMediaPlayer.<init>(javafx.media@19/GSTMediaPlayer.java:63)
        at com.sun.media.jfxmediaimpl.platform.gstreamer.GSTPlatform.createMediaPlayer(javafx.media@19/GSTPlatform.java:119)
        at com.sun.media.jfxmediaimpl.platform.PlatformManager.createMediaPlayer(javafx.media@19/PlatformManager.java:245)
        at com.sun.media.jfxmediaimpl.NativeMediaManager.getPlayer(javafx.media@19/NativeMediaManager.java:295)
        at com.sun.media.jfxmedia.MediaManager.getPlayer(javafx.media@19/MediaManager.java:118)
        at javafx.scene.media.MediaPlayer.init(javafx.media@19/MediaPlayer.java:475)
        - locked <0x00000007c0200f08> (a java.lang.Object)
        at javafx.scene.media.MediaPlayer$InitMediaPlayer.run(javafx.media@19/MediaPlayer.java:533)
        at java.lang.Thread.run(java.base@19-ea/Thread.java:1589)",,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8306030,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,generic,,,,,,,,,,generic,,,,,,"0|i30reb:",9223372036854775807,b23,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@712e7ab7,,,,,,,,,"2023-04-14 15:50;kcr;I filed an umbrella task, JDK-8306030, to track JNI warnings in various components and linked this bug as ""blocks"" that task.;;;","2023-04-17 19:12;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jfx/pull/1094
Date: 2023-04-18 02:08:03 +0000;;;","2023-06-20 14:01;dukebot;Changeset: 77c43e0d
Author:    Alexander Matveev <almatvee@openjdk.org>
Date:      2023-06-20 20:58:32 +0000
URL:       https://git.openjdk.org/jfx/commit/77c43e0d7209da756a6b10bb29c88bd22f199f26
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,
java/net/SocketOption/OptionsTest.java failing after JDK-8302659,JDK-8304286,5096354,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,djelinski,djelinski,djelinski,2023-03-15 13:15,2023-03-27 14:09,2023-10-01 09:56,2023-03-22 01:44,21,,,,,,,,21,core-libs,,0,,,,,,,,,,,,,,,,,"The test selects the first interface for which supportsMulticast returns true, and tries to use it with setOption(IP_MULTICAST_IF). This used to work on Windows because loopback was always returned as the first interface; now the interface order is different, and the first interface might no longer support multicasting, usually because it's a filter interface with no IP addresses assigned.

JDK-8302659 modified the test to only use interfaces with non-empty list of addresses in addition to supporting multicast. This worked well on Windows and Mac, but failed on Linux with the following security manager policy:
    permission java.net.SocketPermission ""localhost:*"", ""connect, accept, listen, resolve"";

this is because the loopback interface does not support multicasting on Linux, and all other interfaces had their addresses filtered out by the security manager.

We need a way to select an interface on Windows that would be usable with IP_MULTICAST_IF. One option to explore is returning false from supportsMulticast on filter interfaces.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8302659,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i30rc3:",9223372036854775807,b15,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@446e124a,,,,,,,,,"2023-03-16 09:57;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/13061
Date: 2023-03-16 14:19:14 +0000;;;","2023-03-22 01:44;dukebot;Changeset: eda00651
Author:    Daniel Jeliński <djelinski@openjdk.org>
Date:      2023-03-22 08:42:39 +0000
URL:       https://git.openjdk.org/jdk/commit/eda006510792de75d898cd66eeb86a00ad2fd45a
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
JDK-8303415 missed change in Zero Interpreter,JDK-8304267,5096327,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,kvn,dcubed,dcubed,2023-03-15 08:16,2023-03-20 18:08,2023-10-01 09:56,2023-03-15 11:10,21,,,,,,,,21,hotspot,,0,tier5,,,,,,,,,,,,,,,,"The linux-x64-zero-debug and linux-aarch64-zero-debug builds
are failing in Mach5 Tier5:

[2023-03-15T01:30:50,066Z] #  Internal Error (/opt/mach5/mesos/work_dir/slaves/782b3f2b-1fe4-42ad-a0aa-b7bf2f5b3ebf-S3876/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/ff4b8f24-18ac-4158-868e-9e6e746a84d6/runs/bd2428ef-3ec9-4f57-b9c8-e30d48eaf262/workspace/open/src/hotspot/share/oops/method.cpp:1215), pid=4847, tid=4850
[2023-03-15T01:30:50,066Z] #  assert(entry != nullptr) failed: interpreter entry must be non-null
[2023-03-15T01:30:50,066Z] #
[2023-03-15T01:30:50,066Z] # JRE version: Java(TM) SE Runtime Environment (21.0+14) (fastdebug build 21-ea+14-LTS-1139)
[2023-03-15T01:30:50,066Z] # Java VM: Java HotSpot(TM) 64-Bit Zero VM (fastdebug 21-ea+14-LTS-1139, interpreted mode, compressed oops, compressed class ptrs, g1 gc, linux-amd64)

and:

[2023-03-15T01:31:27,311Z] #  Internal Error (/opt/mach5/mesos/work_dir/slaves/782b3f2b-1fe4-42ad-a0aa-b7bf2f5b3ebf-S17030/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/f6af674d-2d87-4db4-85ae-02f05756ca17/runs/28ac61dd-d3e9-493b-bf9d-d2a7f77a7ca3/workspace/open/src/hotspot/share/oops/method.cpp:1215), pid=2607140, tid=2607146
[2023-03-15T01:31:27,311Z] #  assert(entry != nullptr) failed: interpreter entry must be non-null
[2023-03-15T01:31:27,311Z] #
[2023-03-15T01:31:27,311Z] # JRE version: Java(TM) SE Runtime Environment (21.0+14) (fastdebug build 21-ea+14-LTS-1139)
[2023-03-15T01:31:27,311Z] # Java VM: Java HotSpot(TM) 64-Bit Zero VM (fastdebug 21-ea+14-LTS-1139, interpreted mode, compressed oops, compressed class ptrs, g1 gc, linux-aarch64)",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8303415,,,,,,,,,,,,,,,,aarch64,x86_64,,,,,,,,,linux,,,,,,"0|i30r63:",9223372036854775807,b14,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,,,"2023-03-15 09:02;dcubed;[~kvn] - Your hunch might be right. The fix for this bug:

JDK-8303415 Add VM_Version::is_intrinsic_supported(id)

is in jdk-21+14-1139-tier5 which is where the failures first started.
Thanks for taking a look!;;;","2023-03-15 09:31;kvn;I missed to add new java_lang_math_sqrt_strict enum value to Zero interpreter.
Testing the fix.;;;","2023-03-15 10:47;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/13046
Date: 2023-03-15 17:14:30 +0000;;;","2023-03-15 11:10;dukebot;Changeset: 116627df
Author:    Vladimir Kozlov <kvn@openjdk.org>
Date:      2023-03-15 18:08:10 +0000
URL:       https://git.openjdk.org/jdk/commit/116627dfb0ef3ac4d4e4d3a37a7f028759429583
;;;","2023-03-15 11:47;dcubed;This fix is integrated in jdk-21+14-1158.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,
Debug messages always show up for NativeGSS,JDK-8304264,5096320,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,weijun,weijun,weijun,2023-03-15 06:39,2023-04-10 16:10,2023-10-01 09:56,2023-03-15 14:25,,,,,,,,,21,security-libs,,0,noreg-trivial,,,,,,,,,,,,,,,,Some debug messages always print out even if the debug system property is not set. Hide them!,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8284935,JDK-8305817,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i30r4j:",9223372036854775807,b14,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@5ce3d383,,,,,,,,,"2023-03-15 07:02;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/13043
Date: 2023-03-15 13:44:09 +0000;;;","2023-03-15 14:25;dukebot;Changeset: be08a256
Author:    Weijun Wang <weijun@openjdk.org>
Date:      2023-03-15 21:22:53 +0000
URL:       https://git.openjdk.org/jdk/commit/be08a256ab8abab63ec9070342fb5ee46f00219b
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
"CPUInfoTest fails because ""serialize"" CPU feature is not known",JDK-8304242,5096290,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,thartmann,thartmann,thartmann,2023-03-15 00:48,2023-03-23 00:31,2023-10-01 09:56,2023-03-16 23:22,18,19,20,21,,,,,21,hotspot,,0,noreg-self,oracle-triage-21,,,,,,,,,,,,,,,"Reported by Kosta Stojiljkovic <kostasto@proton.me>: https://mail.openjdk.org/pipermail/hotspot-compiler-dev/2023-March/063466.html

Support for this feature was added by JDK-8264543 which did update src/jdk.internal.vm.ci/share/classes/jdk.vm.ci.amd64/src/jdk/vm/ci/amd64/AMD64.java but forgot this test.

WB.getCPUFeatures(): ""(1 cores per cpu, 2 threads per core) family 6 model 143 stepping 0 microcode 0xf0, cx8, cmov, fxsr, ht, mmx, 3dnowpref, sse, sse2, sse3, ssse3, sse4.1, sse4.2, popcnt, lzcnt, tsc, tscinvbit, avx, avx2, aes, erms, clmul, bmi1, bmi2, adx, avx512f, avx512dq, avx512cd, avx512bw, avx512vl, sha, fma, vzeroupper, avx512_vpopcntdq, avx512_vpclmulqdq, avx512_vaes, avx512_vnni, clflush, clflushopt, clwb, avx512_vbmi2, avx512_vbmi, serialize, rdtscp, rdpid, fsrm, gfni, avx512_bitalg, f16c, pku, ospke, cet_ibt, cet_ss, avx512_ifma""
CPUInfo.getAdditionalCPUInfo(): ""(1 cores per cpu, 2 threads per core) family 6 model 143 stepping 0 microcode 0xf0""
CPUInfo.getFeatures(): [cx8, cmov, fxsr, ht, mmx, 3dnowpref, sse, sse2, sse3, ssse3, sse4.1, sse4.2, popcnt, lzcnt, tsc, tscinvbit, avx, avx2, aes, erms, clmul, bmi1, bmi2, adx, avx512f, avx512dq, avx512cd, avx512bw, avx512vl, sha, fma, vzeroupper, avx512_vpopcntdq, avx512_vpclmulqdq, avx512_vaes, avx512_vnni, clflush, clflushopt, clwb, avx512_vbmi2, avx512_vbmi, serialize, rdtscp, rdpid, fsrm, gfni, avx512_bitalg, f16c, pku, ospke, cet_ibt, cet_ss, avx512_ifma]
Well-known CPU features: [avx512_ifma, avx512vl, avx512_vpopcntdq, fsrm, sse4.1, sse4.2, tscinvbit, gfni, cx8, rdtscp, bmi1, bmi2, cmov, vzeroupper, f16c, ht, hv, tscinv, avx512_vaes, avx512_vnni, avx512dq, avx512_vbmi2, avx512_bitalg, rdpid, ssse3, cet_ibt, avx512pf, fma, clmul, avx512f, popcnt, avx512er, avx, mmx, avx512_vbmi, clflush, sse4a, erms, sse, sse2, sse3, 3dnowpref, adx, sha, lzcnt, rtm, fxsr, avx512bw, clflushopt, cet_ss, clwb, pku, avx512cd, avx2, avx512_vpclmulqdq, ospke, aes, tsc]
STDERR:
java.lang.RuntimeException: not all features are known: expected true, was false
	at jdk.test.lib.Asserts.fail(Asserts.java:594)
	at jdk.test.lib.Asserts.assertTrue(Asserts.java:486)
	at CPUInfoTest.main(CPUInfoTest.java:94)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
	at java.base/java.lang.reflect.Method.invoke(Method.java:578)
	at com.sun.javatest.regtest.agent.MainWrapper$MainThread.run(MainWrapper.java:125)
	at java.base/java.lang.Thread.run(Thread.java:1623)
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8264543,,,,,,,,,,,,,,,,,,,,,x86,,,,,,,,,,,,,,,,"0|i30qxv:",9223372036854775807,b15,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2023-03-15 00:51;thartmann;ILW = Test fails due to unknown CPU feature, single test on modern x86_64 hardware, no workaround = MLH = P4;;;","2023-03-16 09:17;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/13062
Date: 2023-03-16 15:40:01 +0000;;;","2023-03-16 23:22;dukebot;Changeset: 36995c5a
Author:    Kosta Stojiljkovic <kostastojiljkovic@gmail.com>
Committer: Tobias Hartmann <thartmann@openjdk.org>
Date:      2023-03-17 06:20:24 +0000
URL:       https://git.openjdk.org/jdk/commit/36995c5a75c74c1748c1751ac621b5d62e964fc5
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,
java/net/NetworkInterface/NetworkInterfaceRetrievalTests.java. Removing the code changes belongs to the source code,JDK-8304232,5096279,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,kj,kj,kj,2023-03-15 00:16,2023-06-21 05:57,2023-10-01 09:56,2023-03-15 02:58,11.0.20-oracle,,,,,,,,11.0.20-oracle,core-libs,,0,noreg-self,,,,,,,,,,,,,,,,"Removing the code changes belongs to the JDK17,  Code was added as part of the src changes, so needs to be removed.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i30qvf:",9223372036854775807,b01,,,,,,,,,,,"2023-06-21 05:56;goetz;[11u]

I can not fix this based on the description.  Probably just a test change.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
LShift ideal transform assertion,JDK-8304230,5096278,Bug,Resolved,JDK,JDK,software,duke,,,P2,Fixed,thartmann,bulasevich,bulasevich,2023-03-15 00:02,2023-03-28 01:24,2023-10-01 09:56,2023-03-20 23:05,21,,,,,,,,21,hotspot,,0,c2,oraclejdk-na,oracle-triage-11,oracle-triage-17,oracle-triage-21,regression,,,,,,,,,,,"On fastdebug ARM32 build I see several assertion errors after JDK-8303238. The case doesn't seem dangerous, just an extra (x >> 0) operation.

#
# A fatal error has been detected by the Java Runtime Environment:
#
#  Internal Error (/ws/workspace/jdk-dev-nightly/label/linux-arm/type/b11/jdk/src/hotspot/share/opto/mulnode.cpp:903), pid=28935, tid=28950
#  assert(con < add1Con) failed: must be (1 < 1)
#
# JRE version: OpenJDK Runtime Environment (21.0) (fastdebug build 21-commitcd41c69d-adhoc.re.jdk)
# Java VM: OpenJDK Server VM (fastdebug 21-commitcd41c69d-adhoc.re.jdk, mixed mode, g1 gc, linux-arm)
# Problematic frame:
# V  [libjvm.so+0x1006b08]  LShiftINode::Ideal(PhaseGVN*, bool)+0x834
#
# Core dump will be written. Default location: Core dumps may be processed with ""/usr/share/apport/apport %p %s %c %d %P %E"" (or dumping to /ws/workspace/jdk-dev-nightly-jtreg/label/linux-arm/suite/jdk-tier1/type/t11/out_jdk/work/scratch/core.28935)
#
# An error report file with more information is saved as:
# /ws/workspace/jdk-dev-nightly-jtreg/label/linux-arm/suite/jdk-tier1/type/t11/out_jdk/work/scratch/hs_err_pid28935.log
#
# Compiler replay data is saved as:
# /ws/workspace/jdk-dev-nightly-jtreg/label/linux-arm/suite/jdk-tier1/type/t11/out_jdk/work/scratch/replay_pid28935.log
#
# If you would like to submit a bug report, please visit:
#   https://bugreport.java.com/bugreport/crash.jsp
#

java/lang/String/Indent.java
java/lang/constant/MethodTypeDescTest.java
java/lang/invoke/RevealDirectTest.java
java/lang/invoke/VarHandles/VarHandleTestMethodTypeBoolean.java
java/lang/invoke/VarHandles/VarHandleTestMethodTypeByte.java
java/lang/invoke/VarHandles/VarHandleTestMethodTypeChar.java
java/lang/invoke/VarHandles/VarHandleTestMethodTypeDouble.java
java/lang/invoke/VarHandles/VarHandleTestMethodTypeFloat.java
java/lang/invoke/VarHandles/VarHandleTestMethodTypeInt.java
java/lang/invoke/VarHandles/VarHandleTestMethodTypeLong.java
java/lang/invoke/VarHandles/VarHandleTestMethodTypeShort.java
java/lang/invoke/VarHandles/VarHandleTestMethodTypeString.java
java/lang/reflect/PublicMethods/PublicMethodsTest.java
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8303238,,,,,,,,,,,,,,,,,,,,,arm,,,,,,,,,,linux,,,,,,"0|i30qv7:",9223372036854775807,b15,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2023-03-15 05:28;thartmann;ILW = Assert during C2 compilation (regression), several tests on 32-bit ARM, no workaround but disable compilation = HMM = P2;;;","2023-03-15 11:49;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/13049
Date: 2023-03-15 18:24:23 +0000;;;","2023-03-20 23:05;dukebot;Changeset: a6b72f56
Author:    Jasmine K <25208576+SuperCoder7979@users.noreply.github.com>
Committer: Tobias Hartmann <thartmann@openjdk.org>
Date:      2023-03-21 06:03:05 +0000
URL:       https://git.openjdk.org/jdk/commit/a6b72f56f56b4f33ac163e90b115d79b2b844999
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,
Remove delays from httpserver tests,JDK-8304174,5096218,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,djelinski,djelinski,djelinski,2023-03-14 12:30,2023-09-27 01:24,2023-10-01 09:56,2023-03-20 02:33,21,,,,,,,,21,core-libs,,0,jdk17u-fix-request,jdk17u-fix-yes,noreg-self,,,,,,,,,,,,,,"Many httpserver tests wait for one second before cleaning up. This delay appears to be unnecessary, the tests pass just fine with the delay removed.

Additionally, some tests close the server giving it some time to finish all active requests, i.e. call server.stop(2). Since we know that no requests are active, we can save some time by calling stop(0).",,,,,,,,,,,JDK-8313510,JDK-8313281,JDK-8317029,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i30qhv:",9223372036854775807,b15,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@446e124a,,,,,,,,,"2023-03-14 13:13;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/13028
Date: 2023-03-14 19:41:25 +0000;;;","2023-03-20 02:33;dukebot;Changeset: 45056703
Author:    Daniel Jeliński <djelinski@openjdk.org>
Date:      2023-03-20 09:31:33 +0000
URL:       https://git.openjdk.org/jdk/commit/450567031ec32846c9a8f157eb56bd099b17b5a5
;;;","2023-09-25 07:55;goetz;Fix request [17u]

I backport this for parity with 17.0.10-oracle.
No risk, only a test change.
Resolved one Copyright. SAP nightly testing passed.;;;","2023-09-25 08:05;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/1788
Date: 2023-09-25 14:54:41 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,
jdk/classfile/CorpusTest.java still fails after JDK-8303910,JDK-8304164,5096205,Bug,Closed,JDK,JDK,software,duke,,,P3,Fixed,asotona,dcubed,dcubed,2023-03-14 11:27,2023-08-08 11:56,2023-10-01 09:56,2023-03-17 04:48,21,,,,,,,,21,core-libs,,0,intermittent,tier1,,,,,,,,,,,,,,,"The following test still fails in the JDK21 CI:

jdk/classfile/CorpusTest.java

Here's a snippet from the log file:

STARTED    CorpusTest::testReadAndTransform '[538] modules/java.base/java/lang/foreign/ValueLayout$OfShort.class'
SUCCESSFUL CorpusTest::testReadAndTransform '[468] modules/java.base/java/lang/VirtualThread.class'
STARTED    CorpusTest::testReadAndTransform '[539] modules/java.base/java/lang/foreign/ValueLayout.class'
SUCCESSFUL CorpusTest::testReadAndTransform '[518] modules/java.base/java/lang/foreign/MemoryLayout.class'
STARTED    CorpusTest::testReadAndTransform '[540] modules/java.base/java/lang/invoke/AbstractConstantGroup$AsIterator.class'
SUCCESSFUL CorpusTest::testReadAndTransform '[534] modules/java.base/java/lang/foreign/ValueLayout$OfDouble.class'
java.lang.AssertionError: [java.lang.VerifyError: Bad return type at java/lang/foreign/SegmentScope.auto()Ljava/lang/foreign/SegmentScope; @6 (java/lang/foreign/SegmentScope is not assignable from jdk/internal/foreign/MemorySessionImpl)]
	at helpers.TestUtil.assertEmpty(TestUtil.java:38)
	at CorpusTest.testReadAndTransform(CorpusTest.java:211)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
	at java.base/java.lang.reflect.Method.invoke(Method.java:578)
	at org.junit.platform.commons.util.ReflectionUtils.invokeMethod(ReflectionUtils.java:725)
	at org.junit.jupiter.engine.execution.MethodInvocation.proceed(MethodInvocation.java:60)
	at org.junit.jupiter.engine.execution.InvocationInterceptorChain$ValidatingInvocation.proceed(InvocationInterceptorChain.java:131)
	at org.junit.jupiter.engine.extension.TimeoutExtension.intercept(TimeoutExtension.java:149)
	at org.junit.jupiter.engine.extension.TimeoutExtension.interceptTestableMethod(TimeoutExtension.java:140)
	at org.junit.jupiter.engine.extension.TimeoutExtension.interceptTestTemplateMethod(TimeoutExtension.java:92)
	at org.junit.jupiter.engine.execution.ExecutableInvoker$ReflectiveInterceptorCall.lambda$ofVoidMethod$0(ExecutableInvoker.java:115)
	at org.junit.jupiter.engine.execution.ExecutableInvoker.lambda$invoke$0(ExecutableInvoker.java:105)
	at org.junit.jupiter.engine.execution.InvocationInterceptorChain$InterceptedInvocation.proceed(InvocationInterceptorChain.java:106)
	at org.junit.jupiter.engine.execution.InvocationInterceptorChain.proceed(InvocationInterceptorChain.java:64)
	at org.junit.jupiter.engine.execution.InvocationInterceptorChain.chainAndInvoke(InvocationInterceptorChain.java:45)
	at org.junit.jupiter.engine.execution.InvocationInterceptorChain.invoke(InvocationInterceptorChain.java:37)
	at org.junit.jupiter.engine.execution.ExecutableInvoker.invoke(ExecutableInvoker.java:104)
	at org.junit.jupiter.engine.execution.ExecutableInvoker.invoke(ExecutableInvoker.java:98)
	at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.lambda$invokeTestMethod$7(TestMethodTestDescriptor.java:214)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.invokeTestMethod(TestMethodTestDescriptor.java:210)
	at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.execute(TestMethodTestDescriptor.java:135)
	at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.execute(TestMethodTestDescriptor.java:66)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$6(NodeTestTask.java:151)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:141)
	at org.junit.platform.engine.support.hierarchical.Node.around(Node.java:137)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$9(NodeTestTask.java:139)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:138)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:95)
	at org.junit.platform.engine.support.hierarchical.ForkJoinPoolHierarchicalTestExecutorService$ExclusiveTask.compute(ForkJoinPoolHierarchicalTestExecutorService.java:185)
	at java.base/java.util.concurrent.RecursiveAction.exec(RecursiveAction.java:194)
	at java.base/java.util.concurrent.ForkJoinTask.doExec(ForkJoinTask.java:387)
	at java.base/java.util.concurrent.ForkJoinPool$WorkQueue.topLevelExec(ForkJoinPool.java:1312)
	at java.base/java.util.concurrent.ForkJoinPool.scan(ForkJoinPool.java:1843)
	at java.base/java.util.concurrent.ForkJoinPool.runWorker(ForkJoinPool.java:1808)
	at java.base/java.util.concurrent.ForkJoinWorkerThread.run(ForkJoinWorkerThread.java:188)
FAILED     CorpusTest::testReadAndTransform '[522] modules/java.base/java/lang/foreign/SegmentScope.class'

The fix for the following bug:

JDK-8303910 jdk/classfile/CorpusTest.java failed 1 of 6754 tests

is integrated in jdk-21+14-1129.

This failure occurred in jdk-21+14-1137-tier1.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8303910,,,,,,,,,,,,,,,,,,,,,x86_64,,,,,,,,,,os_x,,,,,,"0|i30qez:",9223372036854775807,b15,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4c088d55,,,,,,,Verified,,"2023-03-14 11:28;dcubed;[~asotona] - Please take a look. The CorpusTest.java still fails.;;;","2023-03-15 00:38;asotona;I've identified a race condition in ClassHierarchyImpl.CachedClassHierarchyResolver::getClassInfo

Heavy parallel junit tests can rarely skip calculation of the ClassHierarchyInfo due to this race condition bug.

In this specific case it caused SegmentScope not being identified as an interface and verify error on assignability between declared method return type and actual returned type has been emitted by the test.;;;","2023-03-15 02:01;asotona;BTW: JDK-8303910 and this bug are unrelated. They commonly manifest by occasional failure of one of several thousands of CorpusTest tests. Individual executions of the tests didn't revealed these rare race conditions. Thank you for understanding. ;;;","2023-03-15 02:18;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/13037
Date: 2023-03-15 08:44:34 +0000;;;","2023-03-15 09:57;dcubed;[~asotona] - Thanks for the analysis. I'm glad that we have such
stressful tests to shake out bugs.The only reason that I linked this
bug to JDK-8303910 is that they occur in the same test file.;;;","2023-03-17 04:48;dukebot;Changeset: b2639e1d
Author:    Adam Sotona <asotona@openjdk.org>
Date:      2023-03-17 11:47:11 +0000
URL:       https://git.openjdk.org/jdk/commit/b2639e1d6246a7e1aab1d9d15add7979adf40766
;;;",,,,,,,,,,,,,,,,,,,,,,,,,
Remapping a class with Invokedynamic constant loses static bootstrap arguments,JDK-8304148,5096184,Bug,Closed,JDK,JDK,software,duke,,,P4,Fixed,asotona,liach,liach,2023-03-14 08:32,2023-08-08 11:57,2023-10-01 09:56,2023-05-09 10:36,21,,,,,,,,21,core-libs,,0,classfile-api,,,,,,,,,,,,,,,,jdk.internal.classfile.components.ClassRemapper drops bootstrap method's arguments when remapping indy instructions.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8304178,,,,,,,,,,,,,,,,,,,,,,,,generic,,,,,,,,,,generic,,,,,,"0|i30qab:",9223372036854775807,b22,,,,,,,,,Verified,,"2023-03-14 09:33;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/13021
Date: 2023-03-14 14:51:34 +0000;;;","2023-03-14 16:20;smarks;Assigning to [~asotona] for evaluation.;;;","2023-03-22 02:59;asotona;Yes, this is clear bug in the ClassRemapper, we should fix it and cover it by test.;;;","2023-05-09 10:34;dukebot;Changeset: dde557e3
Author:    Thiago Henrique Hüpner <thihup@gmail.com>
Committer: Adam Sotona <asotona@openjdk.org>
Date:      2023-05-09 17:33:27 +0000
URL:       https://git.openjdk.org/jdk/commit/dde557e312d4b8eaa9e01166329daa0fac488691
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,
JVM crash during shutdown when dumping dynamic archive,JDK-8304147,5096183,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,dholmes,asmehra,asmehra,2023-03-14 08:19,2023-04-03 12:09,2023-10-01 09:56,2023-03-27 15:06,21,,,,,,,,21,hotspot,,0,cds,intermittent,,,,,,,,,,,,,,,"I came across an intermittent issue where the JVM is crashing when dumping dynamic archive.
Analyzing the logs and core dump indicate there is a race condition between the Signal handler thread and the DestroyJavaVM thread for global data structures in ClassPrelinker.

Thread stack of the DestroyJavaVM thread at the time of crash:

Thread 1 (Thread 0x7f5ca7f68700 (LWP 1878717)):

<signal handling frames are removed>
#7  <signal handler called>
#8  ResourceHashtableBase<FixedResourceHashtableStorage<15889u, InstanceKlass*, bool>, InstanceKlass*, bool, (AnyObj::allocation_type)2, (MEMFLAGS)13, &(unsigned int primitive_hash<InstanceKlass*>(InstanceKlass* const&)), &(bool primitive_equals<InstanceKlass*>(InstanceKlass* const&, InstanceKlass* const&))>::lookup_node (key=<synthetic pointer>: <optimized out>, hash=18926782, this=0x0)
    at src/hotspot/share/utilities/resourceHash.hpp:83
#9  ResourceHashtableBase<FixedResourceHashtableStorage<15889u, InstanceKlass*, bool>, InstanceKlass*, bool, (AnyObj::allocation_type)2, (MEMFLAGS)13, &(unsigned int primitive_hash<InstanceKlass*>(InstanceKlass* const&)), &(bool primitive_equals<InstanceKlass*>(InstanceKlass* const&, InstanceKlass* const&))>::put_if_absent (p_created=<synthetic pointer>, key=<synthetic pointer>: <optimized out>, this=0x0)
    at src/hotspot/share/utilities/resourceHash.hpp:168
#10 ClassPrelinker::dumptime_resolve_constants (ik=ik@entry=0x80100d670, __the_thread__=__the_thread__@entry=0x7f5ca0029f10) at src/hotspot/share/cds/classPrelinker.cpp:125
#11 0x00007f5ca6708b14 in MetaspaceShared::link_class_for_cds (__the_thread__=0x7f5ca0029f10, ik=0x80100d670) at src/hotspot/share/cds/metaspaceShared.cpp:621
#12 MetaspaceShared::link_shared_classes (jcmd_request=jcmd_request@entry=false, __the_thread__=__the_thread__@entry=0x7f5ca0029f10) at src/hotspot/share/cds/metaspaceShared.cpp:651
#13 0x00007f5ca625f49a in DynamicArchive::prepare_for_dump_at_exit () at src/hotspot/share/cds/dynamicArchive.cpp:383
#14 0x00007f5ca63fd6cd in JavaThread::invoke_shutdown_hooks (this=this@entry=0x7f5ca0029f10) at src/hotspot/share/runtime/javaThread.cpp:2038
#15 0x00007f5ca6a2778d in Threads::destroy_vm () at src/hotspot/share/runtime/threads.cpp:1081
#16 0x00007f5ca647af3b in jni_DestroyJavaVM_inner (vm=<optimized out>) at src/hotspot/share/prims/jni.cpp:3735
#17 jni_DestroyJavaVM (vm=<optimized out>) at src/hotspot/share/prims/jni.cpp:3747
#18 0x00007f5ca792eb44 in JavaMain (_args=<optimized out>) at src/java.base/share/native/libjli/java.c:555
#19 0x00007f5ca7932af9 in ThreadJavaMain (args=<optimized out>) at src/java.base/unix/native/libjli/java_md.c:650
#20 0x00007f5ca77131cf in start_thread () from /lib64/libpthread.so.0
#21 0x00007f5ca717bdd3 in clone () from /lib64/libc.so.6

Thread stack of the signal handler thread at the time of crash:

Thread 2 (Thread 0x7f5c4e420700 (LWP 1879009)):
#0  0x00007f5ca771ca07 in write () from /lib64/libpthread.so.0
#1  0x00007f5ca6799a38 in os::write (fd=1, buf=0x7f5ca017af90, nBytes=2) at src/hotspot/os/posix/os_posix.cpp:776
#2  0x00007f5ca679f16e in defaultStream::write (this=0x7f5ca0000b70, s=0x7f5ca017af90 ""of"", len=2) at src/hotspot/share/utilities/ostream.cpp:895
#3  0x00007f5ca679ca02 in outputStream::do_vsnprintf_and_write_with_automatic_buffer (this=this@entry=0x7f5ca0000b70, format=<optimized out>, ap=ap@entry=0x7f5c4e41f2e8, add_cr=add_cr@entry=false)
    at src/hotspot/share/utilities/ostream.cpp:129
#4  0x00007f5ca679cfe9 in outputStream::do_vsnprintf_and_write (add_cr=false, ap=0x7f5c4e41f2e8, format=0x7f5ca6b7e5e6 ""%s"", this=0x7f5ca0000b70) at src/hotspot/share/utilities/ostream.cpp:142
#5  outputStream::print (this=this@entry=0x7f5ca0000b70, format=format@entry=0x7f5ca6b7e5e6 ""%s"") at src/hotspot/share/utilities/ostream.cpp:149
#6  0x00007f5ca69c26e7 in Symbol::print_symbol_on (this=0x800493cd0, st=0x7f5ca0000b70) at src/hotspot/share/oops/symbol.cpp:191
#7  0x00007f5ca671251e in Method::print_invocation_count (this=this@entry=0x7f5bfc315e80) at src/hotspot/share/oops/constantPool.hpp:457
#8  0x00007f5ca63e2d15 in print_method_profiling_data () at src/hotspot/share/runtime/java.cpp:132
#9  print_method_profiling_data () at src/hotspot/share/runtime/java.cpp:117
#10 0x00007f5ca63e301d in print_statistics () at src/hotspot/share/runtime/java.cpp:342
#11 0x00007f5ca63e4d39 in before_exit (thread=thread@entry=0x7f5c40000fe0, halt=halt@entry=true) at src/hotspot/share/runtime/java.cpp:532
#12 0x00007f5ca64b008a in JVM_Halt (code=143) at src/hotspot/share/prims/jvm.cpp:444
#13 0x00007f5c901a1ca0 in ?? ()
#14 0x00007f5c901a193f in ?? ()
#15 0x00007f5c4e41f728 in ?? ()
#16 0x000000080067db80 in ?? ()
#17 0x0000000000000004 in ?? ()
#18 0x000000080003d600 in ?? ()
#19 0x0000000000000000 in ?? ()

Race condition:

There are two exit paths in the JVM:
1. When the JVM falls off the end of main() method, the main thread (in java launcher) attaches itself as
DestroyJavaVM thread and initiates the shutdown sequence by calling destroy_vm(). DestroyJavaVM waits for all
non-daemon threads to stop before starting the shutdown sequence.
2. When the application is sent a signal like SIGTERM, the signal handler thread starts the shutdown sequence
by invoking Shutdown.exit() which in turns calls JVM_BeforeHalt(), runs shutdown hooks and calls JVM_Halt().

It is possible that the application has registered a shutdown hook that results in normal termination of main method().
In such case path 2 can trigger path 1 as well.

In both shutdown sequences JVM attempts to dump dynamic archive by calling DynamicArchive::prepare_for_dump_at_exit() followed by DynamicArchive::dump().
DynamicArchive::prepare_for_dump_at_exit() initializes ClassPrelinker::_processed_classes and DynamicArchive::dump() frees the field and sets it to NULL.

If the two sequences run together, as it happened in this case, it is possible that after DestroyJavaVM thread has initialized ClassPrelinker::_processed_classes (as part of DynamicArchive::prepare_for_dump_at_exit()), the signal handler thread frees it in DynamicArchive::dump() which which will cause DestroyJavaVM to access invalid memory when it subsequently
uses ClassPrelinker::_processed_classes.

One of the ways to fix it is to prohibit DestroyJavaVM from executing DynamicArchive::prepare_for_dump_at_exit() if the signal handler thread has completed DynamicArchive::dump().",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8303422,JDK-8304381,JDK-8304996,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i30qa3:",9223372036854775807,b16,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,,,"2023-03-14 11:09;mseledtsov;ILW = HLL = P4;;;","2023-03-14 15:12;dholmes;I need to study this in more detail (one reading was not enough). The two exit paths can race but there should be a clear point where one wins the race and the other will proceed no further. It is possible the (fairly) recent dynamic dumping code has broken something here.;;;","2023-03-14 15:18;dholmes;[~asmehra] Note that the Signal Dispatcher thread _is_ a daemon thread, so it's termination does not affect the progress of DestroyJavaVM.

Also there are a number of ways non-daemon threads can be started after the DestroyJavaVM thread has progressed past the point where all non-daemon threads were presumed terminated. The Java level shutdown logic is supposed to ensure only one thread can perform an orderly shutdown.;;;","2023-03-14 18:05;dholmes;I agree with the analysis. There is a basic problem that DynamicArchive::prepare_for_dump_at_exit() in one exit path, can execute concurrently with DynamicArchive::dump() in the other. And of course DynamicArchive::prepare_for_dump_at_exit() can run concurrently with itself in both exit paths which is also a problem. I think the fix here is for DynamicArchive::prepare_for_dump_at_exit() to be thread-safe and able to detect that it has already run. Or its placement needs to be reconsidered. I'm unclear why we actually need to do DynamicArchive::prepare_for_dump_at_exit() so far ahead of the dump itself?;;;","2023-03-15 13:59;asmehra;[~dholmes] You are right about Signal Dispatcher thread being a daemon thread and its termination does not play any role in the race condition. While debugging somehow I got tricked into believing DestroyJavaVM is waiting for Signal Dispatcher to exit. I will update the text to remove this discrepancy.;;;","2023-03-15 14:38;dholmes;[~asmehra] After some internal discussion I think the `prepare_for_dump_at_exit` can be moved much closer to the actual dump point inside the before_exit code. We probably don't want to start shutting things down before running the Java code that `prepare_for_dump_at_exit` runs, so it can probably move to the start of before_exit, after we do the logic that ensures only a single thread can be executing.

Edit: after further discussion there may be some concern about moving it, mainly in relation to execution of shutdown hooks. In that case we need to ensure that only one thread at a time can execute the prepare logic, and that a second thread will wait for the first to complete.

Here is the call chain logic for the three potential exit paths:

Runtime.halt()
  -> Shutdown.beforeHalt()
    -> JVM_BeforeHalt()
      -> DynamicArchive::prepare_for_dump_at_exit();
      -> commit shutdown event
  -> Shutdown.halt()
    -> halt0()   // inside sync block so single-threaded
      -> JVM_Halt()
        -> before_exit()
           // single-threaded by Mutex & wait
           <shutdown stuff>
           DynamicArchive::dump()
           <more shutdown stuff>


Runtime.exit()
  -> Shutdown.exit()
    // single threaded by sync-block
    Shutdown.beforeHalt()
      -> DynamicArchive::prepare_for_dump_at_exit();
      -> commit shutdown event
    Shutdown.runHooks()
    Shutdown.halt()
      -> halt0()   // inside sync block so single-threaded
        -> JVM_Halt()
        -> before_exit()
           // single-threaded by Mutex & wait
           <shutdown stuff>
           DynamicArchive::dump()
           <more shutdown stuff>



DestroyJavaVM()
  -> Threads::destroy_vm();
     -> wait till last non-daemon thread
     -> commit shutdown event 
     -> JavaThread::invoke_shutdown_hooks()
        -> DynamicArchive::prepare_for_dump_at_exit();
        -> Shutdown.shutdown()   // upcall to Java
          -> Shutdown.runHooks()
     -> before_exit()
         // single-threaded by Mutex & wait
         <shutdown stuff>
         DynamicArchive::dump()
         <more shutdown stuff>

Aside: I think Runtime.halt() is also buggy in allowing multiple threads to call beforeHalt();;;","2023-03-16 06:59;asmehra;[~dholmes] Can you please elaborate a bit about the concern related to moving `prepare_for_dump_at_exit` in relation to shutdown hooks. I am interested in understanding what can go wrong if we take that route.;;;","2023-03-16 16:04;dholmes;[~asmehra] Sorry don't have any further details at the moment but will update if they come to hand.;;;","2023-03-16 18:24;dholmes;[~asmehra] Okay so after much further discussion it was decided the prepare could be moved, and also that the dump could be moved to happen straight after the prepare. But then it was realized that dumping at exit can also race with the jcmd initiated dump, so further locking will still be needed anyway. I think [~ccheung] may want to take this over if you don't mind?

Edit: should have checked first, he is heading off on vacation soon. I can leave this with you [~asmehra] or else I can take it over?;;;","2023-03-17 05:48;asmehra;I think it makes sense if you take it over as it seems there has already been quite a bit of discussion on which approach to take. I guess it would be easier if you continue with that.;;;","2023-03-17 05:48;asmehra;Assigning it to David as per the discussion.;;;","2023-03-19 15:40;dholmes;Okay thanks [~asmehra];;;","2023-03-21 22:27;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/13134
Date: 2023-03-22 05:03:50 +0000;;;","2023-03-22 00:07;dholmes;Failure mode for the new test before the fix, on a debug VM:

#
# A fatal error has been detected by the Java Runtime Environment:
#
#  Internal Error (/scratch/users/daholme/jdk-dev3.git/open/src/hotspot/share/cds/classPrelinker.cpp:59), pid=5951, tid=5974
#  assert(_vm_classes == nullptr) failed: must be
#
# JRE version: Java(TM) SE Runtime Environment (21.0) (fastdebug build 21-internal-LTS-2023-03-21-0800142.daholme...)
# Java VM: Java HotSpot(TM) 64-Bit Server VM (fastdebug 21-internal-LTS-2023-03-21-0800142.daholme..., mixed mode, sharing, tiered, compressed oops, compressed class ptrs, g1 gc, linux-amd64)
# Problematic frame:
# V  [libjvm.so+0xab32d5]  ClassPrelinker::initialize()+0x35
#

---------------  T H R E A D  ---------------

Current thread (0x00007f83d4000d30):  JavaThread ""Daemon"" daemon [_thread_in_vm, id=5974, stack(0x00007f840b2f1000,0x00007f840b3f2000)]

Stack: [0x00007f840b2f1000,0x00007f840b3f2000],  sp=0x00007f840b3f0650,  free space=1021k
Native frames: (J=compiled Java code, j=interpreted, Vv=VM code, C=native code)
V  [libjvm.so+0xab32d5]  ClassPrelinker::initialize()+0x35  (classPrelinker.cpp:59)
V  [libjvm.so+0x161e822]  MetaspaceShared::link_shared_classes(bool, JavaThread*)+0x22  (metaspaceShared.cpp:626)
V  [libjvm.so+0xd01b76]  DynamicArchive::prepare_for_dump_at_exit()+0xc6  (dynamicArchive.cpp:383)
V  [libjvm.so+0x121149d]  JVM_BeforeHalt+0x19d  (jvm.cpp:432)
j  java.lang.Shutdown.beforeHalt()V+0 java.base@21-internal
j  java.lang.Runtime.halt(I)V+13 java.base@21-internal
j  ExitRace$1$1.run()V+18
v  ~StubRoutines::call_stub 0x00007f84400fcd21
V  [libjvm.so+0x1069050]  JavaCalls::call_helper(JavaValue*, methodHandle const&, JavaCallArguments*, JavaThread*)+0x500  (javaCalls.cpp:415)
V  [libjvm.so+0x1069880]  JavaCalls::call_virtual(JavaValue*, Klass*, Symbol*, Symbol*, JavaCallArguments*, JavaThread*)+0x450  (javaCalls.cpp:329)
V  [libjvm.so+0x1069f51]  JavaCalls::call_virtual(JavaValue*, Handle, Klass*, Symbol*, Symbol*, JavaThread*)+0x71  (javaCalls.cpp:191)
V  [libjvm.so+0x11ec12b]  thread_entry(JavaThread*, JavaThread*)+0x12b  (jvm.cpp:2924)
V  [libjvm.so+0x109d586]  JavaThread::thread_main_inner()+0x206  (javaThread.cpp:710)
V  [libjvm.so+0x1aa7780]  Thread::call_run()+0x100  (thread.cpp:224)
V  [libjvm.so+0x17453c3]  thread_native_entry(Thread*)+0x103  (os_linux.cpp:740)
;;;","2023-03-27 15:06;dukebot;Changeset: 63ce88b5
Author:    David Holmes <dholmes@openjdk.org>
Date:      2023-03-27 22:05:23 +0000
URL:       https://git.openjdk.org/jdk/commit/63ce88b5fbc8e2b9be01a135156885000bc5c48d
;;;",,,,,,,,,,,,,,,,
Refactor VisibleMemberTable (LocalMemberTable),JDK-8304146,5096182,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,prappo,prappo,prappo,2023-03-14 08:16,2023-03-23 00:31,2023-10-01 09:56,2023-03-16 15:26,21,,,,,,,,21,tools,,0,noreg-cleanup,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i30q9v:",9223372036854775807,b15,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@7900061a,,,,,,,,,"2023-03-15 09:23;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/13044
Date: 2023-03-15 15:48:37 +0000;;;","2023-03-16 15:26;dukebot;Changeset: 8eed7dea
Author:    Pavel Rappo <prappo@openjdk.org>
Date:      2023-03-16 22:23:41 +0000
URL:       https://git.openjdk.org/jdk/commit/8eed7dea7b92dd98b74277e8521100f7f807eabb
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Match allocation and free in sspi.cpp,JDK-8304136,5096166,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,weijun,weijun,weijun,2023-03-14 06:50,2023-03-29 23:17,2023-10-01 09:56,2023-03-24 11:41,,,,,,,,,21,security-libs,,0,,,,,,,,,,,,,,,,,"In sspi.cpp, sometimes a memory is new'ed but free'ed, and sometimes it's malloc'ed but delete-ed. It should be consistent.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i30q6b:",9223372036854775807,b16,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@5ce3d383,,,,,,,,,"2023-03-14 07:23;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/13018
Date: 2023-03-14 14:02:43 +0000;;;","2023-03-24 11:41;dukebot;Changeset: 765a9425
Author:    Weijun Wang <weijun@openjdk.org>
Date:      2023-03-24 18:40:07 +0000
URL:       https://git.openjdk.org/jdk/commit/765a94258d84ac6f22bb2dedd1fc1afdbabb2b14
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
jib bootstrapper fails to quote filename when checking download filetype,JDK-8304134,5096164,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,lujaniuk,lujaniuk,lujaniuk,2023-03-14 06:33,2023-04-20 01:41,2023-10-01 09:56,2023-03-22 08:00,,,,,,,,,21,infrastructure,,0,jdk11u-fix-request,jdk11u-fix-yes,jdk17u-fix-request,jdk17u-fix-yes,,,,,,,,,,,,,"If the download path contains spaces, it can show a misleading error.",,,,,,,,,,,JDK-8304791,JDK-8304797,JDK-8306520,JDK-8306502,JDK-8304783,JDK-8305012,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i30q5v:",9223372036854775807,b15,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@429c566,,,,,,,,,"2023-03-22 06:56;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/13138
Date: 2023-03-22 13:46:48 +0000;;;","2023-03-22 08:00;dukebot;Changeset: 75168eac
Author:    Ludvig Janiuk <lujaniuk@openjdk.org>
Committer: Erik Joelsson <erikj@openjdk.org>
Date:      2023-03-22 14:58:34 +0000
URL:       https://git.openjdk.org/jdk/commit/75168eaca3f665785519bb489073962a4972fdc0
;;;","2023-04-18 12:41;goetz;Fix request [11u/17u]

I backport this for parity with 11.0.20/17.0.8-oracle.
No risk, only a jib change.
Clean backport.  SAP nightly testing passed.;;;","2023-04-18 12:49;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/1265
Date: 2023-04-18 19:43:26 +0000;;;","2023-04-18 12:55;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk11u-dev/pull/1837
Date: 2023-04-18 19:46:07 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,,,
"Improve simple examples in the section ""Record Classes""",JDK-8304109,5096135,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,rgallard,rgallard,rgallard,2023-03-13 20:37,2023-08-08 07:28,2023-10-01 09:56,2023-08-08 07:28,14,,,,,,,,21,docs,,0,,,,,,,,,,,,,,,,,"According to reader's feedback:

Sent: Thursday, March 9, 2023 10:32 PM
Subject: Reader comments for Java SE,14
Were the asset pages helpful? Yes - 0, No - 1
Language: EN
Page specific feedback:
URL: https://docs.oracle.com/en/java/javase/14/language/records.html
Was this page helpful? No - 1
Comments for ""How can we improve this page?""

* Tell me how to actually use their values and index the value

Show an example accessing the values of a record.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i30pzf:",9223372036854775807,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4eba8c33,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
[testbug] Test compilation failure in ControlUtils.java after JDK-8292353,JDK-8304098,5096122,Bug,Resolved,JDK,JDK,software,duke,,,P2,Fixed,jvos,kcr,kcr,2023-03-13 16:08,2023-03-24 13:04,2023-10-01 09:56,2023-03-14 05:02,jfx17.0.7,,,,,,,,jfx17.0.7,javafx,,0,20-na,noreg-self,testbug,,,,,,,,,,,,,,"The backport of JDK-8292353 to jfx17u, while clean, causes the test compilation to fail:

$ gradle test
modules/javafx.controls/src/test/java/test/javafx/scene/control/ControlUtils.java:110: error: pattern matching in instanceof is not supported in -source 11
            if (n instanceof TreeTableCell c) {
                                           ^
  (use -source 16 or higher to enable pattern matching in instanceof)
modules/javafx.controls/src/test/java/test/javafx/scene/control/TreeAndTableViewTest.java:108: error: pattern matching in instanceof is not supported in -source 11
                if (x instanceof TableColumnHeader n) {
                                                   ^
  (use -source 16 or higher to enable pattern matching in instanceof)
2 errors

The pattern matching instanceof needs to be replaced with an ordinary instance of and a cast.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8292353,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i30pwj:",9223372036854775807,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@67282485,,,,,,,,,"2023-03-14 01:34;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jfx17u/pull/129
Date: 2023-03-14 08:11:28 +0000;;;","2023-03-14 05:01;roboduke;Changeset: 5ff65569
Author:    Johan Vos <jvos@openjdk.org>
Date:      2023-03-14 11:47:12 +0000
URL:       https://git.openjdk.org/jfx17u/commit/5ff655690f3236c53c6ff0e7c65c1230396630b0
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
[lworld] Fix copyright text in GensrcValueClasses.gmk,JDK-8304084,5096103,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,rriggs,rriggs,rriggs,2023-03-13 13:17,2023-03-13 16:07,2023-10-01 09:56,2023-03-13 16:07,,,,,,,,,repo-valhalla,core-libs,,0,,,,,,,,,,,,,,,,,The copyright in make/modules/java.base/gensrc/GensrcValueClasses.gmk is incomplete.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8271959,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i30psb:",9223372036854775807,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4c088d55,,,,,,,,,"2023-03-13 15:47;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/valhalla/pull/830
Date: 2023-03-13 22:16:33 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
tools/jpackage/share/AppLauncherEnvTest.java fails when checking LD_LIBRARY_PATH,JDK-8304063,5096073,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,mbaesken,mbaesken,mbaesken,2023-03-13 07:56,2023-03-23 00:31,2023-10-01 09:56,2023-03-17 00:58,17,,,,,,,,21,tools,,0,jdk17u-fix-request,jdk17u-fix-yes,noreg-self,,,,,,,,,,,,,,"The test fails on Alpine Linux 3.17, when checking the environment variable LD_LIBRARY_PATH; looks like the actual env variable is much longer than the test expects.

java.lang.AssertionError: Expected 
[/priv/test/output_openjdk17_dev_dbgU_linuxmuslx86_64/jvm17/lib/server:/priv/test/output_openjdk17_dev_dbgU_linuxmuslx86_64/jvm17/lib:/priv/test/output_openjdk17_dev_dbgU_linuxmuslx86_64/jvm17/../lib:/priv/test/output_openjdk17_dev_dbgU_linuxmuslx86_64/jtreg_jdk_tier2_work/JTwork/scratch/test/output/AppLauncherEnvTest/lib/app]. 
Actual 
[/priv/test/output_openjdk17_dev_dbgU_linuxmuslx86_64/jtreg_jdk_tier2_work/JTwork/scratch/test/output/AppLauncherEnvTest/lib/runtime/lib/server:/priv/test/output_openjdk17_dev_dbgU_linuxmuslx86_64/jtreg_jdk_tier2_work/JTwork/scratch/test/output/AppLauncherEnvTest/lib/runtime/lib:/priv/test/output_openjdk17_dev_dbgU_linuxmuslx86_64/jtreg_jdk_tier2_work/JTwork/scratch/test/output/AppLauncherEnvTest/lib/runtime/../lib:/priv/test/output_openjdk17_dev_dbgU_linuxmuslx86_64/jvm17/lib/server:/priv/test/output_openjdk17_dev_dbgU_linuxmuslx86_64/jvm17/lib:/priv/test/output_openjdk17_dev_dbgU_linuxmuslx86_64/jvm17/../lib:/priv/test/output_openjdk17_dev_dbgU_linuxmuslx86_64/jtreg_jdk_tier2_work/JTwork/scratch/test/output/AppLauncherEnvTest/lib/app]: Check value of LD_LIBRARY_PATH env variable
	at jdk.jpackage.test.TKit.error(TKit.java:268)
	at jdk.jpackage.test.TKit.assertEquals(TKit.java:594)
	at AppLauncherEnvTest.test(AppLauncherEnvTest.java:86)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at jdk.jpackage.test.MethodCall.accept(MethodCall.java:145)
	at jdk.jpackage.test.TestInstance.run(TestInstance.java:230)
	at jdk.jpackage.test.TKit.lambda$ignoreExceptions$5(TKit.java:139)
	at jdk.jpackage.test.TKit.lambda$runTests$3(TKit.java:124)
	at java.base/java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1625)
	at java.base/java.util.stream.ReferencePipeline$Head.forEach(ReferencePipeline.java:762)
	at jdk.jpackage.test.TKit.lambda$runTests$4(TKit.java:121)
	at jdk.jpackage.test.Functional$ThrowingRunnable.lambda$toRunnable$0(Functional.java:105)
	at jdk.jpackage.test.TKit.withExtraLogStream(TKit.java:107)
	at jdk.jpackage.test.TKit.runTests(TKit.java:120)
	at jdk.jpackage.test.Main.runTests(Main.java:79)
	at jdk.jpackage.test.Main.lambda$main$2(Main.java:75)
	at jdk.jpackage.test.Functional$ThrowingRunnable.lambda$toRunnable$0(Functional.java:105)
	at jdk.jpackage.test.TKit.withExtraLogStream(TKit.java:107)
	at jdk.jpackage.test.Main.main(Main.java:75)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at com.sun.javatest.regtest.agent.MainWrapper$MainThread.run(MainWrapper.java:127)
	at java.base/java.lang.Thread.run(Thread.java:833)
java.lang.RuntimeException: 1 FAILED TEST
	at jdk.jpackage.test.Main.reportSummary(Main.java:130)
	at jdk.jpackage.test.Main.runTests(Main.java:90)
	at jdk.jpackage.test.Main.lambda$main$2(Main.java:75)
	at jdk.jpackage.test.Functional$ThrowingRunnable.lambda$toRunnable$0(Functional.java:105)
	at jdk.jpackage.test.TKit.withExtraLogStream(TKit.java:107)
	at jdk.jpackage.test.Main.main(Main.java:75)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at com.sun.javatest.regtest.agent.MainWrapper$MainThread.run(MainWrapper.java:127)
	at java.base/java.lang.Thread.run(Thread.java:833)",,,,,,,,,,,JDK-8304589,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,generic,,,,,,,,,,linux_alpine,,,,,,"0|i30pln:",9223372036854775807,b15,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@3656b41f,,,,,,,,,"2023-03-13 10:41;asemenyuk;The test assumes the value of LD_LIBRARY_PATH is adjusted only by jpackage launcher. But this is not always the case. LD_LIBRARY_PATH can be adjusted by jvm - https://github.com/openjdk/jdk/blob/master/src/java.base/unix/native/libjli/java_md.c

The test needs to be reworked: test if the value of LD_LIBRARY_PATH during app running ends with the app's path, instead of checking that the value of LD_LIBRARY_PATH during app running equals the value before that app was started with the appended app's path. This should be applied to the Linux variant of the test only.;;;","2023-03-14 01:03;mbaesken;Hi Alexey, are you sure that it is always the end of the string that needs to be checked to be equal?;;;","2023-03-14 13:06;asemenyuk;Yes, it is always at the end. https://github.com/openjdk/jdk/blob/master/src/jdk.jpackage/share/native/applauncher/AppLauncher.cpp#L134 appends app dir to LD_LIBRARY_PATH env variable;;;","2023-03-15 02:00;mbaesken;Hi Alexey, thanks for the AppLauncher.cpp reference.  Looking at   LD_LIBRARY_PATH adjustment in java_md.c,  it seems to have relevance also on other Unix than Linux e.g. AIX. What do you think ?  ;;;","2023-03-15 05:11;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/13041
Date: 2023-03-15 11:46:22 +0000;;;","2023-03-15 11:41;asemenyuk;Matthias, I'm not sure jpackage tests have ever been executed on any platform other than Linux, Windows, macOS. Let's fix it on Linux for now.;;;","2023-03-17 00:58;dukebot;Changeset: ebac7eec
Author:    Matthias Baesken <mbaesken@openjdk.org>
Date:      2023-03-17 07:55:55 +0000
URL:       https://git.openjdk.org/jdk/commit/ebac7eec8e5923c66a80cbd66e79c354f30a07a3
;;;","2023-03-20 07:39;mbaesken;jdk17 backport request
I would like to have the patch in jdk17u-dev as well, because the issue is present there too. The patch is low risk and clean.;;;","2023-03-20 08:11;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/1210
Date: 2023-03-20 14:34:20 +0000;;;",,,,,,,,,,,,,,,,,,,,,,
Revert os specific stubs for SystemMetrics,JDK-8304053,5096058,Bug,Resolved,JDK,JDK,software,duke,,,P1,Fixed,afarley,afarley,afarley,2023-03-13 06:00,2023-03-28 11:26,2023-10-01 09:56,2023-03-15 07:12,openjdk8u372,,,,,,,,openjdk8u372,core-svc,,0,jdk8u-critical-request,jdk8u-critical-yes,sustaining,,,,,,,,,,,,,,"A new stub class was added to the AIX build with JDK-8303408 to solve a build-breaking compilation failure. The same class was added to Solaris a short while ago to solve the same problem via JDK-8303828. However, since JDK8u considers AIX and other unixes to be a subtype of Solaris, this resulted in an duplicate class issue on OS'es which inherit from the solaris/classes dir. I.e. Since JDK-8303828 we have a broken build on the 8u372 rampdown repo on Linux, OS X and AIX.

Proposed action: revert the OS-specific duplicate stub implementations for OS X and AIX in order to solve the build issue on those OSes. Exclude SystemMetrics.java on Linux so as to not use the null-returning stub, but the actual implementation.",,,,,,,,,,,JDK-8305102,,,,,,,,,,,,,,,,,,,,,,JDK-8304143,,,,,,,,JDK-8303828,JDK-8303408,,,,,,,,,,,,,,,,,,,,,,,,,aix,linux,os_x,,,,"0|i30pib:",9223372036854775807,b06,,,,,,,,,,,"2023-03-13 06:34;sgehwolf;Linking related bugs.

JDK-8303828 covers all unix'es, so JDK-8303408 is obsolete. AIX directory should only be used for AIX specific classes, which it shouldn't in this case (affects Solaris and other Unixes as well and should return null there).;;;","2023-03-13 06:44;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk8u/pull/39
Date: 2023-03-13 12:27:52 +0000;;;","2023-03-14 06:25;afarley;Fix Request [8u] 
This request covers the removal of a duplicate class on AIX, MacOS, and Linux, allowing the build to complete successfully on those platforms.;;;","2023-03-14 09:42;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk8u/pull/40
Date: 2023-03-14 14:54:41 +0000;;;","2023-03-15 07:12;dukebot;Changeset: 89aeae16
Author:    Adam Farley <afarley@openjdk.org>
Committer: Severin Gehwolf <sgehwolf@openjdk.org>
Date:      2023-03-15 14:11:17 +0000
URL:       https://git.openjdk.org/jdk8u/commit/89aeae16e85ddfbd581cb86d0b0480b1e2d50e99
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,
C2 SuperWord: schedule must remove packs with cyclic dependencies,JDK-8304042,5096046,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,epeter,epeter,epeter,2023-03-13 03:09,2023-04-10 10:25,2023-10-01 09:56,2023-04-04 21:54,11,17,20,21,,,,,21,hotspot,,0,c2-superword,oracle-triage-21,,,,,,,,,,,,,,,"I have found a Test.java, where we have independency on pair and pack level.
The nodes in a pack are all mutually independent (none have a path to any other of them).
But: the packs have cyclic dependencies between them.
When this is SuperWord-vectorized, it leads to wrong results, operations are reordered that should not be reordered.

Regression Test.java
./java -XX:CompileCommand=compileonly,Test::test -Xbatch -XX:+TraceSuperWord -XX:+TraceNewVectors Test.java

I found this during the work of JDK-8298935. The bugs are related, but not the same. JDK-8298935 did not properly verify that the packs were independent.
But independence on pack level is not sufficient, there can still be cyclic dependencies between the packs. This bug here reveals this.

It seems that we missed out on this, even though the SuperWord paper mentions that one has to be careful about cyclic dependencies between the (independent) packs.

See
https://groups.csail.mit.edu/cag/slp/SLP-PLDI-2000.pdf
(3.7 Scheduling)

See also my explanations in the PR of JDK-8298935:
https://github.com/openjdk/jdk/pull/12350#issuecomment-1465860465",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8298935,,,,,JDK-8304720,JDK-8275317,,,"2023-03-13 03:10;epeter;Test.java;https://bugs.openjdk.org/secure/attachment/102968/Test.java","2023-03-16 04:56;epeter;Test2.java;https://bugs.openjdk.org/secure/attachment/103030/Test2.java","2023-03-17 06:50;epeter;Test3.IR.data.cycle.png;https://bugs.openjdk.org/secure/attachment/103042/Test3.IR.data.cycle.png","2023-03-17 06:23;epeter;Test3.java;https://bugs.openjdk.org/secure/attachment/103041/Test3.java",,,,,,,,,,,,,,,,,,,,,,,,,"0|i30pfn:",9223372036854775807,b17,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2023-03-13 03:19;thartmann;ILW = Same as JDK-8298935 = P3;;;","2023-03-13 06:41;thartmann;Quickly checked and the Test.java reproducer first triggers the issue after JDK-8304042 in JDK 18 which is probably just because the test relies on the conversions supported with that change. Older JDK versions should be affected as well.;;;","2023-03-16 04:56;epeter;I found a test that reproduces on 17, and maybe much earlier. See Test2.java

java -XX:-TieredCompilation -Xbatch --add-modules java.base --add-exports java.base/jdk.internal.misc=ALL-UNNAMED Test2.java;;;","2023-03-16 05:04;thartmann;Great, Test2.java also reproduces with JDK 11u.;;;","2023-03-17 06:50;epeter;I found a bit more complicated case, where we even hit an assert:

./java -XX:-TieredCompilation -Xbatch --add-modules java.base --add-exports java.base/jdk.internal.misc=ALL-UNNAMED -XX:CompileCommand=compileonly,Test3::test -XX:CompileCommand=printcompilation,Test3::* -XX:LoopUnrollLimit=250 -XX:LoopMaxUnroll=5 Test3.java

#  Internal Error (/home/emanuel/Documents/fork6-jdk/open/src/hotspot/share/opto/loopnode.cpp:5384), pid=1933953, tid=1933966
#  assert(!is_visited) failed: visit only once

in PhaseIdealLoop::build_loop_early

In the attached picture, we can see that the IR now has cyclic dependency of data/memory nodes, but no phi node is in that cycle. This leads to an unschedulable graph. Hence the assert. I suspect that we expected to traverse a DAG, but then visited a node twice, hence we found a cycle where we did not expect it.

The reason is still the same bug: we schedule packs that have cyclic dependencies. We now see that cyclic dependency trigger this ""visit only once"" assert.;;;","2023-03-23 09:01;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/13078
Date: 2023-03-17 14:34:26 +0000;;;","2023-04-04 21:54;dukebot;Changeset: 83a924a1
Author:    Emanuel Peter <epeter@openjdk.org>
Date:      2023-04-05 04:52:11 +0000
URL:       https://git.openjdk.org/jdk/commit/83a924a1008853dee2ead8f6c3a82f9e3abc6125
;;;",,,,,,,,,,,,,,,,,,,,,,,,
JFR: Missing thread,JDK-8304033,5096037,Bug,Closed,JDK,JDK,software,duke,,,P1,Fixed,mgronlun,egahlin,egahlin,2023-03-13 00:13,2023-08-16 20:10,2023-10-01 09:56,2023-04-04 03:56,17,20,21,,,,,,21,hotspot,,0,amazon-interest,,,,,,,,,,,,,,,,"Reproducer:

$ java -XX:StartFlightRecording:filename=r.jfr -jar jdk/demo/jfc/J2Ddemo/J2Ddemo.jar
Click around on the different tabs.
$ jfr print --events ThreadStart r.jfr

jdk.ThreadStart {
  startTime = 19:50:04.836 (2023-03-12)
  thread = N/A
  parentThread = N/A
}

Note, might be OK for parent thread to be null (if it's the main thread), both event thread (hidden if null) and the thread field is N/A. Missing thread can also be observed in ExecutionSample.

jdk.ExecutionSample {
  startTime = 16:02:06.365 (2023-03-05)
  sampledThread = N/A
  state = ""STATE_RUNNABLE""
  stackTrace = [
    sun.lwawt.macosx.LWCToolkit.getPlatformWindowUnderMouse() line: 1038
    sun.lwawt.LWWindowPeer.notifyMouseEvent(int, long, int, int, int, int, int, int, int, boolean, byte[]) line: 856
    sun.lwawt.macosx.CPlatformResponder.handleMouseEvent(int, int, int, int, int, int, int, int) line: 92
    sun.lwawt.macosx.CPlatformView.deliverMouseEvent(NSEvent) line: 195
  ]
}

The missing threads seems to happen in the first 3-4 seconds of the recording or chunk, but I can't rule out that it happens later as well. Only looked at recording/chunk that lasted for a minute (one chunk) running on Mac.

I = High, information missing
L = M, happens sometimes with JFR
W = H, no known workaround

HMH -> P1
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i30pdn:",9223372036854775807,b17,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@42995637,,,,,,,Not verified,,"2023-03-31 09:49;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/13272
Date: 2023-03-31 16:42:55 +0000;;;","2023-04-04 03:56;dukebot;Changeset: 7ca2aec3
Author:    Markus Grönlund <mgronlun@openjdk.org>
Date:      2023-04-04 10:55:21 +0000
URL:       https://git.openjdk.org/jdk/commit/7ca2aec34c9b15227570893d9577b306095de40e
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Classfile API cannot encode Primitive Class as Condy,JDK-8304031,5096035,Bug,Closed,JDK,JDK,software,duke,,,P4,Fixed,liach,liach,liach,2023-03-12 22:41,2023-08-08 11:59,2023-10-01 09:56,2023-05-09 02:20,21,,,,,,,,21,other-libs,,0,classfile-api,,,,,,,,,,,,,,,,"Consider this code example:

    cob.constantInstruction(clazz.describeConstable().orElseThrow());

This fails for primitive classes, as Classfile API always assume ClassDescs are always encodeable as a class constant. The check in BytecodeHelpers should check for

    if (constantValue instanceof ClassDesc value && !value.isPrimitive())

As only classes or interfaces or arrays are eligible to be encoded in class constants. Discovered while converting SerialPersistentFieldsTest for JDK-8294977.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8310649,,,,,,,,,,,,,,,,generic,,,,,,,,,,generic,,,,,,"0|i30pd7:",9223372036854775807,b22,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@79d0c3d2,,,,,,,Verified,,"2023-03-13 01:32;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/12996
Date: 2023-03-13 08:13:44 +0000;;;","2023-05-09 02:20;dukebot;Changeset: cd5d0ff5
Author:    Chen Liang <liach@openjdk.org>
Committer: Adam Sotona <asotona@openjdk.org>
Date:      2023-05-09 09:14:18 +0000
URL:       https://git.openjdk.org/jdk/commit/cd5d0ff5b29065222ffafbc4fb04b90f6f8909e2
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Configure call fails on AIX when using --with-gtest option.,JDK-8304030,5096034,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,azeller,azeller,azeller,2023-03-12 22:32,2023-03-20 18:07,2023-10-01 09:56,2023-03-15 00:56,17,21,,,,,,,21,infrastructure,,0,,,,,,,,,,,,,,,,,"When calling configure with the --with-gtest option on AIX it fails with the following error:
...
checking for X11/Intrinsic.h... yes
checking for gtest... /sapmnt/sapjvm_work/openjdk/tools/gtest/googletest-1.13.0
/bin/sed: illegal option -- E
Usage:  sed [-n] [-u] Script [File ...]
        sed [-n] [-u] [-e Script] ... [-f Script_file] ... [File ...]
configure: error: gtest version is too old, at least version 1.13.0 is required
configure exiting with result code 1

The sed on AIX does not support extended regex with the -E param. But it seems to me, that the extended regex param is not needed for the googletest version detection.

I would suggest to substitute the below line in make/autoconf/lib-tests.m4

gtest_version=""`$GREP GOOGLETEST_VERSION $GTEST_FRAMEWORK_SRC/CMakeLists.txt | $SED -E -e 's/set\(GOOGLETEST_VERSION (.*)\)/\1/'`""

by 

gtest_version=""`$GREP GOOGLETEST_VERSION $GTEST_FRAMEWORK_SRC/CMakeLists.txt | $SED -e 's/set(GOOGLETEST_VERSION \(.*\))/\1/'`""
 
That should work on AIX and all other platforms.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,aix,,,,,,"0|i30pcz:",9223372036854775807,b14,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@429c566,,,,,,,,,"2023-03-14 01:40;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/13011
Date: 2023-03-14 08:08:12 +0000;;;","2023-03-15 00:56;dukebot;Changeset: 349139b2
Author:    Arno Zeller <azeller@openjdk.org>
Committer: Matthias Baesken <mbaesken@openjdk.org>
Date:      2023-03-15 07:55:07 +0000
URL:       https://git.openjdk.org/jdk/commit/349139b2ccec57ad5d500b81b1d225af9e17a5e7
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Update README.md and CONTRIBUTING.md for jfx update repos,JDK-8304008,5096008,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,kcr,kcr,kcr,2023-03-10 14:14,2023-07-19 15:12,2023-10-01 09:56,2023-03-16 08:28,jfx20.0.1,,,,,,,,jfx20.0.1,javafx,,0,noreg-doc,sn_139,,,,,,,,,,,,,,,"Now that the jfx20u repo is forked, we need to update the `README.md` and `CONTRIBUTING.md` files at the top of the repo as appropriate for update releases.

This will be similar to what was done for jfx17u in JDK-8273280. For jfx20u, I plan to copy those two files from jfx17u, changing the release version number from 17 to 20 as needed.
",,,,,,,,,,,JDK-8312421,,,,,,,,,,,,,,,,,,,JDK-8273280,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i30p77:",9223372036854775807,b01,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@1d1c7815,,,,,,,,,"2023-03-11 05:30;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jfx20u/pull/2
Date: 2023-03-10 23:02:18 +0000;;;","2023-03-16 08:28;dukebot;Changeset: 9733e7a9
Author:    Kevin Rushforth <kcr@openjdk.org>
Date:      2023-03-16 15:26:04 +0000
URL:       https://git.openjdk.org/jfx20u/commit/9733e7a925df2cf47d5994b55dbb563d7fa90e94
;;;","2023-07-19 10:18;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jfx21u/pull/2
Date: 2023-07-19 17:13:00 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,
Incorrect link in JDK 17 troubleshooting guide,JDK-8304007,5096006,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,rgallard,jbegy,jbegy,2023-03-10 12:25,2023-03-30 05:26,2023-10-01 09:56,2023-03-24 10:02,17,,,,,,,,17.0.7-oracle,docs,,0,jdk17u-na,,,,,,,,,,,,,,,,Chapter 5 (this page: https://docs.oracle.com/en/java/javase/17/troubleshoot/troubleshoot-security-apis.html#GUID-BEB4C1C3-8264-45FA-B419-ADC721170DFB) links to the JDK 16 security developer's guide. It should link to 17.,,,,,,,,,,,JDK-8304890,JDK-8304889,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i30p6r:",9223372036854775807,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4eba8c33,,,,,,,,,"2023-03-30 05:26;goetz;[17u-na] Fix to Oracle-only documentation.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Library detection in runtime/ErrorHandling/TestDwarf.java fails on ppc64le RHEL8.5 for libpthread-2.28.so,JDK-8303973,5095966,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,mbaesken,mbaesken,mbaesken,2023-03-10 06:56,2023-03-20 18:06,2023-10-01 09:56,2023-03-14 01:09,21,,,,,,,,21,hotspot,,0,,,,,,,,,,,,,,,,,"The test fails with

[dwarf] ##### Find filename and line number for offset 0x000096a8 in library /lib64/glibc-hwcaps/power9/libpthread-2.28.so #####
[dwarf] Failed to load DWARF file for library /lib64/glibc-hwcaps/power9/libpthread-2.28.so or find DWARF sections directly inside it.

and in stderr

java.lang.RuntimeException: Must find library in ""C [libpthread-2.28.so+0x96a8] start_thread+0xf8"": expected true, was false

Looks like the '-'  in the lib-name libpthread-2.28.so is currently not allowed in the pattern of the test. This is similar to JDK-8293201 .",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,generic,,,,,,,,,,linux,,,,,,"0|i30oxv:",9223372036854775807,b14,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,,,"2023-03-13 05:10;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/12998
Date: 2023-03-13 11:37:27 +0000;;;","2023-03-14 01:09;dukebot;Changeset: b6d70f2c
Author:    Matthias Baesken <mbaesken@openjdk.org>
Date:      2023-03-14 08:08:28 +0000
URL:       https://git.openjdk.org/jdk/commit/b6d70f2c49da6f99e3a0a84b1df6e3d48c7e2e58
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
java.net.http.HttpClient should reset the stream if response headers contain malformed header fields,JDK-8303965,5095956,Bug,Closed,JDK,JDK,software,duke,,,P4,Fixed,dfuchs,dfuchs,dfuchs,2023-03-10 05:07,2023-07-21 07:36,2023-10-01 09:56,2023-03-13 07:27,,,,,,,,,21,core-libs,,0,httpclient,,,,,,,,,,,,,,,,"The current behavior is to close the connection with a protocol error.

According to RFC 7540:

Endpoints MUST treat a request or response that contains
undefined or invalid pseudo-header fields as malformed (Section 8.1.2.6).

Also:

Just as in HTTP/1.x, header field names are strings of ASCII
characters that are compared in a case-insensitive fashion.  However,
header field names MUST be converted to lowercase prior to their
encoding in HTTP/2.  A request or response containing uppercase
header field names MUST be treated as malformed (Section 8.1.2.6).

Section-8.1.2.6:
 Malformed requests or responses that are detected MUST be treated as a stream error (Section 5.4.2) of type PROTOCOL_ERROR.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i30ovn:",9223372036854775807,b14,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@446e124a,,,,,,,Verified,,"2023-03-10 06:08;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/12976
Date: 2023-03-10 13:58:23 +0000;;;","2023-03-13 07:27;dukebot;Changeset: 466ffebc
Author:    Daniel Fuchs <dfuchs@openjdk.org>
Date:      2023-03-13 14:24:56 +0000
URL:       https://git.openjdk.org/jdk/commit/466ffebcae1ee5817a83fdbc33f5ec3bd6de7e60
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
tools/jpackage/share/RuntimePackageTest.java fails with java.lang.AssertionError missing files,JDK-8303959,5095950,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,asemenyuk,msheppar,msheppar,2023-03-10 02:33,2023-09-29 15:29,2023-10-01 09:56,2023-09-29 10:22,21,22,,,,,,,22,tools,,0,sbr,sn_144,sn_145,sn_153,vs2022,,,,,,,,,,,,"[21:10:59.015] Succeeded in building MSI Installer Package package
[21:10:59.065] TRACE: exec: Done. Exit code: 0
[21:10:59.065] TRACE: assertEquals(0): Check command [c:\\ade\\mesos\\work_dir\\jib-master\\install\\2023-03-02-2350281.mikael.vidstedt.jdk\\windows-x64.jdk\\jdk-21\\bin\\jpackage.exe --dest .\\test\\output --name RuntimePackageTest --type msi --runtime-image c:\\ade\\mesos\\work_dir\\jib-master\\install\\2023-03-02-2350281.mikael.vidstedt.jdk\\windows-x64.jdk\\jdk-21 -J-Djlink.debug=true --verbose](11) exited with 0 code
[21:10:59.065] TRACE: assertTrue(): Check [.\\test\\output\\RuntimePackageTest-1.0.msi] path exists
[21:10:59.065] TRACE: assertTrue(): Check [.\\test\\output\\RuntimePackageTest-1.0.msi] is a file
[21:10:59.065] TRACE: Create [C:\\sb\\prod\\1678392806\\testoutput\\test-support\\jtreg_open_test_jdk_tier2\\scratch\\3_4\\test\\unpacked-msi\\unpack.bat] text file...
[21:10:59.065] TRACE: icacls "".\\test\\unpacked-msi"" /inheritance:e /grant Users:M
[21:10:59.065] TRACE: msiexec /a ""test\\output\\RuntimePackageTest-1.0.msi"" /qn TARGETDIR=""C:\\sb\\prod\\1678392806\\testoutput\\test-support\\jtreg_open_test_jdk_tier2\\scratch\\3_4\\test\\unpacked-msi\\Program Files""
[21:10:59.081] TRACE: Done
[21:10:59.081] TRACE: exec: Execute [cmd /c .\\test\\unpacked-msi\\unpack.bat](3); discard I/O...
[21:11:03.948] TRACE: exec: Done. Exit code: 0
[21:11:03.948] TRACE: assertEquals(0): Check command [cmd /c .\\test\\unpacked-msi\\unpack.bat](3) exited with 0 code
[21:11:03.948] TRACE: Verify unpacked: [c:\\ade\\mesos\\work_dir\\jib-master\\install\\2023-03-02-2350281.mikael.vidstedt.jdk\\windows-x64.jdk\\jdk-21\\bin\\jpackage.exe --dest .\\test\\output --name RuntimePackageTest --type msi --runtime-image c:\\ade\\mesos\\work_dir\\jib-master\\install\\2023-03-02-2350281.mikael.vidstedt.jdk\\windows-x64.jdk\\jdk-21 jpt-unpacked-folder .\\test\\unpacked-msi](11)
[21:11:03.948] TRACE: assertEquals(2): Check the package has 2 top installation directories
[21:11:03.995] TRACE: assertStringListEquals(): Check there are no files with [.jpackage.xml] name in the package
[21:11:04.011] TRACE: assertStringListEquals(): Check there are no files with [.package] name in the package
[21:11:04.011] TRACE: assertTrue(): Check [.\\test\\unpacked-msi\\Program Files\\RuntimePackageTest] path exists
[21:11:04.011] TRACE: assertTrue(): Check [.\\test\\unpacked-msi\\Program Files\\RuntimePackageTest] is a directory
[21:11:04.073] TRACE: Missing 1 files:
[21:11:04.073] TRACE: conf\\security\\policy\\testlimited
[21:11:04.073] TRACE: Done
[21:11:04.089] ERROR: Failed: Check there are no missing files in installed image
[21:11:04.089] [  FAILED  ] RuntimePackageTest.test; checks=10
[21:11:04.089] [ RUN      ] RuntimePackageTest.testUsrInstallDir
[21:11:04.089] TRACE: Actions: [[initialize], [create], [unpack], [verify-install], [finalize]]
[21:11:04.089] TRACE: Deleting [.\\testUsrInstallDir] directory recursively
[21:11:04.104] [       OK ] RuntimePackageTest.testUsrInstallDir; checks=0
[21:11:04.104] [ RUN      ] RuntimePackageTest.testUsrInstallDir2
[21:11:04.104] TRACE: Actions: [[initialize], [create], [unpack], [verify-install], [finalize]]
[21:11:04.104] TRACE: Deleting [.\\testUsrInstallDir2] directory recursively
[21:11:04.104] [       OK ] RuntimePackageTest.testUsrInstallDir2; checks=0
[21:11:04.104] [==========] 3 tests ran
[21:11:04.104] [  PASSED  ] 2 tests
[21:11:04.104] [  FAILED  ] 1 test, listed below
[21:11:04.104] [  FAILED  ] RuntimePackageTest.test; workDir=[.\\test]
[21:11:04.104] 1 FAILED TEST
----------System.err:(58/3930)----------
java.lang.AssertionError: Failed: Check there are no missing files in installed image
	at jdk.jpackage.test.TKit.error(TKit.java:273)
	at jdk.jpackage.test.TKit.assertTrue(TKit.java:653)
	at RuntimePackageTest.assertFileListEmpty(RuntimePackageTest.java:160)
	at RuntimePackageTest.lambda$init$3(RuntimePackageTest.java:126)
	at jdk.jpackage.test.Functional$ThrowingConsumer.lambda$toConsumer$0(Functional.java:41)
	at jdk.jpackage.test.PackageTest$Handler.lambda$verifyPackageInstalled$5(PackageTest.java:658)",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,x86_64,,,,,,,,,,windows,,,,,,"0|i30oub:",9223372036854775807,master,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@3656b41f,,,,,,,,,"2023-03-10 09:42;asemenyuk;[21:11:04.073] TRACE: Missing 1 files:
[21:11:04.073] TRACE: conf\\security\\policy\\testlimited
[21:11:04.073] TRACE: Done

The above is something unique. Never seen this before;;;","2023-08-09 20:44;serb;I see exactly the same issue in JDK21b34(VS2022 is used):
[02:48:18.564] TRACE: assertEquals(2): Check the package has 2 top installation directories
[02:48:18.587] TRACE: assertStringListEquals(): Check there are no files with [.jpackage.xml] name in the package
[02:48:18.601] TRACE: assertStringListEquals(): Check there are no files with [.package] name in the package
[02:48:18.602] TRACE: assertTrue(): Check [.\test\unpacked-msi\Program Files\RuntimePackageTest] path exists
[02:48:18.602] TRACE: assertTrue(): Check [.\test\unpacked-msi\Program Files\RuntimePackageTest] is a directory
[02:48:18.648] TRACE: Missing 1 files:
[02:48:18.649] TRACE: conf\security\policy\testlimited
[02:48:18.649] TRACE: Done;;;","2023-09-18 14:05;asemenyuk;tools/jpackage/share/RuntimePackageTest.java interfers with test/jdk/javax/crypto/CryptoPermissions/InconsistentEntries.java (https://github.com/openjdk/jdk/blob/5308bbbcf8005560478d221d44f00fd2849d44f0/test/jdk/javax/crypto/CryptoPermissions/InconsistentEntries.java) test that creates $JAVA_HOME/conf/security/policy/testlimited directory. tools/jpackage/share/RuntimePackageTest.java packages contents of $JAVA_HOME directory, then unpacks it and compares directory tree of unpackaged package with the directory tree of $JAVA_HOME. test/jdk/javax/crypto/CryptoPermissions/InconsistentEntries.java is executed after the package is produced adding additional entries in directory tree of $JAVA_HOME. tools/jpackage/share/RuntimePackageTest.java test doesn't expect changes in the source runtime directory.

There are two options to fix the issue:
 - Use copy of $JAVA_HOME in --runtime-image jpackage parameter to guarantee the source runtime directory will not be altered during the test execution (an overkill to clone JDK home directory).
 - exclude conf/security/policy/testlimited from the comparison (adhoc solution not addressing potential changes to $JAVA_HOME by other tests).;;;","2023-09-28 14:04;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/15971
Date: 2023-09-28 20:58:30 +0000;;;","2023-09-29 10:22;dukebot;Changeset: 5a6aa569
Author:    Alexey Semenyuk <asemenyuk@openjdk.org>
Date:      2023-09-29 17:17:54 +0000
URL:       https://git.openjdk.org/jdk/commit/5a6aa569aa279141193038dc2e61e18a8b24bc11
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,
gcc10 warning Linux ppc64le - note: the layout of aggregates containing vectors with 8-byte alignment has changed in GCC 5,JDK-8303949,5095940,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,mbaesken,mbaesken,mbaesken,2023-03-10 00:09,2023-03-20 07:00,2023-10-01 09:56,2023-03-10 07:59,17,21,,,,,,,21,hotspot,,0,jdk17u-fix-request,jdk17u-fix-yes,,,,,,,,,,,,,,,"When switching from gcc8 to gcc10 on Linux ppc64le, we get dozens of warnings in hotspot like these :

adaptiveSizePolicy.cpp:262:6: note: the layout of aggregates containing vectors with 8-byte alignment has changed in GCC 5
bcEscapeAnalyzer.cpp:1267:6: note: the layout of aggregates containing vectors with 4-byte alignment has changed in GCC 5
block.cpp:1415:95: note: the layout of aggregates containing vectors with 8-byte alignment has changed in GCC 5

Probably it would make sense to suppress the warning, -Wno-psabi might be an option.
Some info about this :

https://patches.dpdk.org/project/dpdk/patch/20210623161620.49916-1-drc@linux.vnet.ibm.com/

https://stackoverflow.com/questions/52020305/what-exactly-does-gccs-wpsabi-option-do-what-are-the-implications-of-supressi
",,,,,,,,,,,JDK-8304534,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,ppc,,,,,,,,,,linux,,,,,,"0|i30os3:",9223372036854775807,b14,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@11336cca,,,,,,,,,"2023-03-10 04:34;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/12972
Date: 2023-03-10 12:28:05 +0000;;;","2023-03-10 07:58;dukebot;Changeset: a32ee5dd
Author:    Matthias Baesken <mbaesken@openjdk.org>
Date:      2023-03-10 15:57:30 +0000
URL:       https://git.openjdk.org/jdk/commit/a32ee5dd8b5d0b65b39d7a3f8bedc7c099987f6f
;;;","2023-03-16 06:06;mbaesken;jdk17u backport request
I would like to have the patch in jdk17u-dev as well, because with the mentioned high gcc versions is issue is present there too.  The patch os low risk and applies cleanly except COPYRIGHT header.;;;","2023-03-16 06:19;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/1206
Date: 2023-03-16 13:01:03 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,
HsErrFileUtils.checkHsErrFileContent() fails to check the last pattern.,JDK-8303948,5095939,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,varadam,varadam,varadam,2023-03-10 00:03,2023-03-27 14:08,2023-10-01 09:56,2023-03-20 22:47,21,,,,,,,,21,hotspot,,0,hs_err,,,,,,,,,,,,,,,,"When last pattern in deque [positivePatternStack] is not matching in HsErrFile, it comes out of the loop and check whether the positivePatternStack is empty or not, which turns to be empty since pollFirst() removes the pattern.

This has been noticed in the TestSigInfoInHsErrFile.java where the segfault address for AIX is set as ""0x0*1400"" instead of ""0xffffffffffffffff"", which should throw the expected error but the error is neglected due to empty deque and the test is passed.

Expected/Desired Behaviour :

END.
STDERR:
java.lang.RuntimeException: hs-err file incomplete (first missing pattern: siginfo: si_signo: \d+ \(SIGSEGV\), si_code: \d+ \(SEGV_.*\), si_addr: 0x0*1400.*)
        at HsErrFileUtils.checkHsErrFileContent(HsErrFileUtils.java:136)
        at HsErrFileUtils.checkHsErrFileContent(HsErrFileUtils.java:71)
        at TestSigInfoInHsErrFile.main(TestSigInfoInHsErrFile.java:74)
        at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
        at java.base/java.lang.reflect.Method.invoke(Method.java:578)
        at com.sun.javatest.regtest.agent.MainActionHelper$AgentVMRunnable.run(MainActionHelper.java:312)
        at java.base/java.lang.Thread.run(Thread.java:1623)

JavaTest Message: Test threw exception: java.lang.RuntimeException
JavaTest Message: shutting down test


TEST RESULT: Failed. Execution failed: `main' threw exception: java.lang.RuntimeException: hs-err file incomplete (first missing pattern: siginfo: si_signo: \d+ \(SIGSEGV\), si_code: \d+ \(SEGV_.*\), si_addr: 0x0*1400.*)",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,generic,,,,,,,,,,generic,,,,,,"0|i30orv:",9223372036854775807,b15,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,,,"2023-03-10 01:40;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/12970
Date: 2023-03-10 09:33:10 +0000;;;","2023-03-10 08:49;dcubed;Moving from other-libs to hotspot/runtime for initial triage.;;;","2023-03-20 22:47;dukebot;Changeset: a72ba383
Author:    Varada M <mvarada2000@gmail.com>
Committer: David Holmes <dholmes@openjdk.org>
Date:      2023-03-21 05:45:58 +0000
URL:       https://git.openjdk.org/jdk/commit/a72ba3834781ef174e206aaf1d34dbb2ed305df1
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,
os::write should write completely,JDK-8303942,5095933,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,azafari,dholmes,dholmes,2023-03-09 21:13,2023-09-26 23:04,2023-10-01 09:56,2023-05-23 10:09,17,20,21,,,,,,21,hotspot,,0,amazon-interest,os,starter,,,,,,,,,,,,,,JDK-8303937 highlighted the fact that os::write can legitimately perform a short write. But write_bytes will fail in that case instead of doing the write in a loop.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8303943,,,,,JDK-8303937,,,,,JDK-8316468,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i30oqj:",9223372036854775807,b24,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,,,"2023-03-31 12:36;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/13188
Date: 2023-03-27 08:04:23 +0000;;;","2023-05-03 04:00;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/13750
Date: 2023-05-02 07:45:03 +0000;;;","2023-05-23 10:09;dukebot;Changeset: bddf4838
Author:    Afshin Zafari <azafari@openjdk.org>
Date:      2023-05-23 17:08:08 +0000
URL:       https://git.openjdk.org/jdk/commit/bddf48380e658df630fecad5eda40106a24b6e1c
;;;","2023-09-26 10:25;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/1797
Date: 2023-09-26 17:15:53 +0000;;;","2023-09-26 12:51;roboduke;[jdk17u-fix-request] Approval Request from Elif Aslan
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,
Corrupted heap dumps due to missing retries for os::write(),JDK-8303937,5095927,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,manc,manc,manc,2023-03-09 17:44,2023-09-18 18:42,2023-10-01 09:56,2023-03-10 10:16,11.0.14,15,16,17,18,19,20,21,21,core-svc,,0,google-interest,heapdump,jdk11u-fix-request,jdk11u-fix-yes,jdk17u-fix-request,jdk17u-fix-yes,jdk20u-fix-request,jdk20u-fix-SQE-ok-next,jdk20u-fix-yes,,,,,,,,"After JDK-8237354, we noticed heap dumps could become corrupted.

The root cause is in FileWriter::write_buf() in heapDumperCompression.cpp, for n = os::write(_fd, buf, (uint) size); n could be > 0 but smaller than size. In this case, there should be a loop to retry os::write() for the remaining bytes in buf. There was such a loop in DumpWriter::write_internal() before JDK-8237354.

This problem is well documented in the man page for write(): https://man7.org/linux/man-pages/man2/write.2.html#RETURN_VALUE.

In our case, we see the corruption frequently because we support dumping heap to a socket or pipe.",,,,,,,,,,,JDK-8307012,JDK-8304227,JDK-8304233,JDK-8304234,JDK-8310612,JDK-8311441,,,,,,,,,,,,,,,,,,,,JDK-8237354,,,,,JDK-8303943,JDK-8303942,JDK-8316468,,,,,,,,,,,,,,,,,,,,,,15,,,,,,,,"0|i30op7:",9223372036854775807,b14,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@22f3cc74,,,,,,,,,"2023-03-09 18:19;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/12966
Date: 2023-03-10 02:13:22 +0000;;;","2023-03-10 10:16;dukebot;Changeset: bf16b5b9
Author:    Man Cao <manc@openjdk.org>
Date:      2023-03-10 18:14:09 +0000
URL:       https://git.openjdk.org/jdk/commit/bf16b5b9880eb89b283006db090dce4346aa877b
;;;","2023-03-10 12:44;manc;Fix request [20u]

Clean backport and no conflict. Fixes a real bug that causes heap dump corruption.
Low risk. All tier1 tests passed in Github pre-submit checks. In addition, manually ran:
- test/jdk/com/sun/management/HotSpotDiagnosticMXBean/DumpHeap.java
- test/jdk/sun/tools/jmap/BasicJMapTest.java
and both passed.
;;;","2023-03-10 12:45;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk20u/pull/18
Date: 2023-03-10 20:36:56 +0000;;;","2023-03-10 13:36;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/1201
Date: 2023-03-10 21:06:18 +0000;;;","2023-03-10 13:41;manc;Fix request [17u]

Resolved trivial merge conflict in https://github.com/openjdk/jdk17u-dev/pull/1201.
Fixes a real bug that causes heap dump corruption.
Low risk. All tier1 tests passed in Github pre-submit checks. In addition, manually ran:
- test/jdk/com/sun/management/HotSpotDiagnosticMXBean/DumpHeap.java
- test/jdk/sun/tools/jmap/BasicJMapTest.java
and both passed.;;;","2023-03-10 14:00;manc;Fix request [11u]

Resolved trivial merge conflict in https://github.com/openjdk/jdk11u-dev/pull/1801.
Fixes a real bug that causes heap dump corruption. The bug was introduced into 11.0.14u in https://github.com/openjdk/jdk11u-dev/commit/1868c15d4e5d03895a4a07edacd864021dfbac57.
Low risk. All tier1 tests passed in Github pre-submit checks. In addition, manually ran:
- test/jdk/com/sun/management/HotSpotDiagnosticMXBean/DumpHeap.java
- test/jdk/sun/tools/jmap/BasicJMapTest.java
and both passed.;;;","2023-03-10 14:09;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk11u-dev/pull/1801
Date: 2023-03-10 21:57:34 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,
Fix ConstantUtils.skipOverFieldSignature void case return value,JDK-8303930,5095916,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,asotona,liach,liach,2023-03-09 14:17,2023-04-05 23:17,2023-10-01 09:56,2023-03-31 10:16,19.0.2,21,,,,,,,21,core-libs,,0,,,,,,,,,,,,,,,,,"In ConstantUtils.skipOverFieldSignature, the current index instead of 0 is incorrectly returned if an invalid V is encountered.

https://github.com/openjdk/jdk/blob/5726d31e56530bbe7dee61ae04b126e20cb3611d/src/java.base/share/classes/java/lang/constant/ConstantUtils.java#L196

This issue doesn't directly permit creation of malformed ClassDesc or MethodTypeDesc, but it leads to ambiguous exceptions on certain inputs:

jshell> java.lang.constant.MethodTypeDesc.ofDescriptor(""(IIIIIIII[[[[V)V"")",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i30omr:",9223372036854775807,b17,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4c088d55,,,,,,,,,"2023-03-09 15:13;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/12964
Date: 2023-03-09 23:04:57 +0000;;;","2023-03-31 10:16;dukebot;Changeset: bdbf8fc6
Author:    Chen Liang <liach@openjdk.org>
Committer: Mandy Chung <mchung@openjdk.org>
Date:      2023-03-31 17:14:44 +0000
URL:       https://git.openjdk.org/jdk/commit/bdbf8fc61d9876ad4aad8f9606384c67005cae78
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
serviceability/sa/UniqueVtableTest.java timed out,JDK-8303921,5095903,Bug,Closed,JDK,JDK,software,duke,,,P2,Fixed,amenkov,dcubed,dcubed,2023-03-09 11:54,2023-06-30 12:54,2023-10-01 09:56,2023-03-17 11:24,21,,,,,,,,21,hotspot,,0,intermittent,problemlist,tier1,tier3,tier4,,,,,,,,,,,,"The following test failed in the JDK21 CI:

serviceability/sa/UniqueVtableTest.java

Here's a snippet from the log file:

#section:main
----------messages:(9/624)----------
command: main UniqueVtableTest
reason: User specified action: run main/othervm UniqueVtableTest 
started: Thu Mar 09 19:36:22 UTC 2023
Mode: othervm [/othervm specified]
Additional options from @modules: --add-modules jdk.hotspot.agent --add-exports jdk.hotspot.agent/sun.jvm.hotspot=ALL-UNNAMED --add-exports jdk.hotspot.agent/sun.jvm.hotspot.debugger=ALL-UNNAMED --add-exports jdk.hotspot.agent/sun.jvm.hotspot.types=ALL-UNNAMED --add-exports jdk.hotspot.agent/sun.jvm.hotspot.types.basic=ALL-UNNAMED
Timeout information:
--- Timeout information end.
finished: Thu Mar 09 19:44:57 UTC 2023
elapsed time (seconds): 515.263
----------configuration:(7/366)----------
Boot Layer
  add modules: jdk.hotspot.agent                             
  add exports: jdk.hotspot.agent/sun.jvm.hotspot             ALL-UNNAMED
               jdk.hotspot.agent/sun.jvm.hotspot.debugger    ALL-UNNAMED
               jdk.hotspot.agent/sun.jvm.hotspot.types       ALL-UNNAMED
               jdk.hotspot.agent/sun.jvm.hotspot.types.basic ALL-UNNAMED

----------System.out:(19/2187)----------
Command line: ['/opt/mach5/mesos/work_dir/jib-master/install/jdk-21+14-1075/linux-x64-debug.jdk/jdk-21/fastdebug/bin/java' '-XX:MaxRAMPercentage=4.16667' '-Dtest.boot.jdk=/opt/mach5/mesos/work_dir/jib-master/install/jdk/19/36/bundles/linux-x64/jdk-19_linux-x64_bin.tar.gz/jdk-19' '-Djava.io.tmpdir=/opt/mach5/mesos/work_dir/slaves/782b3f2b-1fe4-42ad-a0aa-b7bf2f5b3ebf-S9633/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/ca653cf0-a006-4488-b8be-75fcba263926/runs/9e175864-d06c-4096-893b-eb3945a8f3cb/testoutput/test-support/jtreg_open_test_hotspot_jtreg_tier1_serviceability/tmp' '-cp' '/opt/mach5/mesos/work_dir/slaves/782b3f2b-1fe4-42ad-a0aa-b7bf2f5b3ebf-S9633/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/ca653cf0-a006-4488-b8be-75fcba263926/runs/9e175864-d06c-4096-893b-eb3945a8f3cb/testoutput/test-support/jtreg_open_test_hotspot_jtreg_tier1_serviceability/classes/5/serviceability/sa/UniqueVtableTest.d:/opt/mach5/mesos/work_dir/slaves/782b3f2b-1fe4-42ad-a0aa-b7bf2f5b3ebf-S9633/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/ca653cf0-a006-4488-b8be-75fcba263926/runs/9e175864-d06c-4096-893b-eb3945a8f3cb/testoutput/test-support/jtreg_open_test_hotspot_jtreg_tier1_serviceability/classes/5/test/lib' 'jdk.test.lib.apps.LingeredApp' 'db363039-a9c8-4d5e-b3c8-7aa3f79e3af4.lck']
LingeredApp startup took 1120ms
Check for hs_err_pid/core/mdmp files:
None.
Attaching to process ID 1642995...
Timeout refired 480 times
 LingeredApp stdout: [];
 LingeredApp stderr: []
 LingeredApp exitValue = 4991
LingeredApp.stopApp error:
java.io.IOException: LingeredApp terminated with non-zero exit code 4991
	at jdk.test.lib.apps.LingeredApp.stopApp(LingeredApp.java:427)
	at jdk.test.lib.apps.LingeredApp.stopApp(LingeredApp.java:515)
	at UniqueVtableTest.run(UniqueVtableTest.java:155)
	at UniqueVtableTest.main(UniqueVtableTest.java:175)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
	at java.base/java.lang.reflect.Method.invoke(Method.java:578)
	at com.sun.javatest.regtest.agent.MainWrapper$MainThread.run(MainWrapper.java:125)
	at java.base/java.lang.Thread.run(Thread.java:1623)
----------System.err:(15/927)----------
ERROR: The process with pid 1642995 does not exist.
java.io.IOException: LingeredApp terminated with non-zero exit code 4991
	at jdk.test.lib.apps.LingeredApp.stopApp(LingeredApp.java:427)
	at jdk.test.lib.apps.LingeredApp.stopApp(LingeredApp.java:515)
	at UniqueVtableTest.run(UniqueVtableTest.java:155)
	at UniqueVtableTest.main(UniqueVtableTest.java:175)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
	at java.base/java.lang.reflect.Method.invoke(Method.java:578)
	at com.sun.javatest.regtest.agent.MainWrapper$MainThread.run(MainWrapper.java:125)
	at java.base/java.lang.Thread.run(Thread.java:1623)

JavaTest Message: Test threw exception: java.io.IOException: LingeredApp terminated with non-zero exit code 4991
JavaTest Message: shutting down test

STATUS:Failed.`main' threw exception: java.io.IOException: LingeredApp terminated with non-zero exit code 4991
----------rerun:(39/7576)*----------",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,CODETOOLS-7902847,JDK-8303489,,,,,,,,,,,,,,,,,,,,generic,,,,,,,,,,linux,,,,,,"0|i30ojv:",9223372036854775807,b15,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@714e388c,,,,,,,Verified,,"2023-03-09 11:59;dcubed;The new test has timed out in two Tier1 job sets in a row so I've
bumped the priority from P3 -> P2.;;;","2023-03-09 12:15;amenkov;For some reason test cannot attach to target app on linux-x64-debug
Going to problem list the test on the platform until the reason if found and fixed;;;","2023-03-09 12:58;amenkov;The same failure on linux-aarch64-debug;;;","2023-03-10 17:43;amenkov;Failure on Windows is completely different:
java.lang.NoClassDefFoundError: jdk/test/lib/Utils
	at jdk.test.lib.apps.LingeredApp.startApp(LingeredApp.java:495)
	at jdk.test.lib.apps.LingeredApp.startApp(LingeredApp.java:507)
	at UniqueVtableTest.run(UniqueVtableTest.java:138)
	at UniqueVtableTest.main(UniqueVtableTest.java:175)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
	at java.base/java.lang.reflect.Method.invoke(Method.java:578)
	at com.sun.javatest.regtest.agent.MainWrapper$MainThread.run(MainWrapper.java:125)
	at java.base/java.lang.Thread.run(Thread.java:1623)
Caused by: java.lang.ClassNotFoundException: jdk.test.lib.Utils
	at java.base/jdk.internal.loader.BuiltinClassLoader.loadClass(BuiltinClassLoader.java:641)
	at java.base/jdk.internal.loader.ClassLoaders$AppClassLoader.loadClass(ClassLoaders.java:188)
	at java.base/java.lang.ClassLoader.loadClass(ClassLoader.java:526)
	... 8 more;;;","2023-03-11 20:37;dcubed;Here's a log file snippet for the jdk-21+14-1107-tier4 sighting:

serviceability/sa/UniqueVtableTest.java

----------System.err:(19/1142)----------
java.lang.NoClassDefFoundError: jdk/test/lib/Utils
	at jdk.test.lib.apps.LingeredApp.startApp(LingeredApp.java:495)
	at jdk.test.lib.apps.LingeredApp.startApp(LingeredApp.java:507)
	at UniqueVtableTest.run(UniqueVtableTest.java:138)
	at UniqueVtableTest.main(UniqueVtableTest.java:175)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
	at java.base/java.lang.reflect.Method.invoke(Method.java:578)
	at com.sun.javatest.regtest.agent.MainWrapper$MainThread.run(MainWrapper.java:125)
	at java.base/java.lang.Thread.run(Thread.java:1623)
Caused by: java.lang.ClassNotFoundException: jdk.test.lib.Utils
	at java.base/jdk.internal.loader.BuiltinClassLoader.loadClass(BuiltinClassLoader.java:641)
	at java.base/jdk.internal.loader.ClassLoaders$AppClassLoader.loadClass(ClassLoaders.java:188)
	at java.base/java.lang.ClassLoader.loadClass(ClassLoader.java:526)
	... 8 more

JavaTest Message: Test threw exception: java.lang.NoClassDefFoundError: jdk/test/lib/Utils
JavaTest Message: shutting down test

STATUS:Failed.`main' threw exception: java.lang.NoClassDefFoundError: jdk/test/lib/Utils
----------rerun:(42/8160)*----------

So it does look like this test has more than one problem... sigh...;;;","2023-03-13 13:01;amenkov;All other tests which uses HotSpotAgent to test SA don't use main process for testing.
They run target sub-process and then run test sub-process which attaches to the target and perform the testing.
They call SATestUtils.addPrivilegesIfNeeded() for the test sub-process. addPrivilegesIfNeeded does nothing on linux, so this is not the problem in the case.
I updated UniqueVtableTest to follow the same scheme - attach from sub-process and the issue went away.
;;;","2023-03-13 13:30;amenkov;As far as I understand NoClassDefFoundError failures are caused by CODETOOLS-7902847;;;","2023-03-13 14:35;amenkov;One of the NoClassDefFoundError failure was caused by conflict with serviceability/sa/TestType.java

TestType.java contains ""@build jdk.test.lib.apps.*"" action
This causes jdk.test.lib.apps.LingeredApp is compiled and LingeredApp.class is put to test/lib/jdk/test/lib
But jdk.test.lib.Utils is put to the test class dir
So the next test which uses LingeredApp and don't have explicit ""@build"" action uses LingeredApp.class from test/lib directory, but cannot find jdk.test.lib.Utils class

There are some other tests in the serviceability/sa with the same issue:
./TestIntConstant.java:38: * @build jdk.test.lib.apps.*
./TestPrintMdo.java:37: * @build jdk.test.lib.apps.*
./TestType.java:38: * @build jdk.test.lib.apps.*
./TestUniverse.java:40: * @build jdk.test.lib.apps.*

So we just were lucky to not have NoClassDefFoundError errors before (there are a lot of tests which use LinderedApp and don't have explicit ""@build"" actions);;;","2023-03-14 15:38;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/13030
Date: 2023-03-14 22:05:44 +0000;;;","2023-03-17 11:24;dukebot;Changeset: 02a4ee20
Author:    Alex Menkov <amenkov@openjdk.org>
Date:      2023-03-17 18:23:03 +0000
URL:       https://git.openjdk.org/jdk/commit/02a4ee206a979858c23c22da35e70560e0f27efd
;;;",,,,,,,,,,,,,,,,,,,,,
Instant.ofEpochMilli says it can throw an exception that it can't,JDK-8303919,5095901,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,emcmanus,emcmanus,emcmanus,2023-03-09 11:32,2023-05-08 14:30,2023-10-01 09:56,2023-05-02 16:27,,,,,,,,,21,core-libs,,0,,,,,,,,,,,,,,,,,"Instant.ofEpochMilli says this in its javadoc:

    * @throws DateTimeException if the instant exceeds the maximum or minimum instant

But that can't actually happen:

$ jshell
|  Welcome to JShell -- Version 21
|  For an introduction type: /help intro

jshell> import java.time.Instant

jshell> Instant.ofEpochMilli(Long.MAX_VALUE)
$2 ==> +292278994-08-17T07:12:55.807Z

jshell> Instant.ofEpochMilli(Long.MIN_VALUE)
$3 ==> -292275055-05-16T16:47:04.192Z",,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8303926,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i30ojf:",9223372036854775807,b21,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@a9a7756,,,,,,,,,"2023-03-09 11:59;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/12958
Date: 2023-03-09 19:49:29 +0000;;;","2023-05-02 06:59;rriggs;It should proceed, [~emcmanus] will need to finalize it.;;;","2023-05-02 07:05;emcmanus;I don't think I know how to do that.;;;","2023-05-02 16:27;dukebot;Changeset: 74667e3d
Author:    Eamonn McManus <emcmanus@openjdk.org>
Date:      2023-05-02 23:26:01 +0000
URL:       https://git.openjdk.org/jdk/commit/74667e3d56a0e6780363359b69007770f5678d8e
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,
Update ISO 639 language codes table,JDK-8303917,5095890,Bug,Closed,JDK,JDK,software,duke,,,P4,Fixed,jlu,jlu,jlu,2023-03-09 10:55,2023-07-21 07:36,2023-10-01 09:56,2023-03-23 14:18,,,,,,,,,21,core-libs,,0,globalization,,,,,,,,,,,,,,,,"LocaleISOData contains the following table, isoLanguageTable which consists of the 2-letter and 3-letter ISO 639 language codes (specifically, the 639-1 and 639-2/T codes).

In order to proactively manage this table, it should be updated with the most up-to-date ISO 639 data: http://www.loc.gov/standards/iso639-2/php/code_list.php.

In addition, the test data used in Bug4175998Test.java is outdated (since 1999), and should be updated with the current data (which will include significant language code changes).",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i30ogz:",9223372036854775807,b16,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@7644fb4c,,,,,,,Verified,,"2023-03-10 09:36;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/12980
Date: 2023-03-10 17:27:11 +0000;;;","2023-03-23 14:18;dukebot;Changeset: dd23ee9e
Author:    Justin Lu <jlu@openjdk.org>
Committer: Naoto Sato <naoto@openjdk.org>
Date:      2023-03-23 21:15:40 +0000
URL:       https://git.openjdk.org/jdk/commit/dd23ee9e8732223475a2e8c635322503dffbb6bf
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
ThreadLists.java inconsistent results,JDK-8303916,5095889,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,kevinw,dnsimon,dnsimon,2023-03-09 10:51,2023-07-12 13:14,2023-10-01 09:56,2023-06-28 01:32,,,,,,,,,21,core-svc,,0,libgraal,noreg-self,,,,,,,,,,,,,,,"The java/lang/management/ThreadMXBean/ThreadLists.java occasionally fails on GraalVM, most likely due to not accounting for JVMCI threads being Java threads.

----------System.out:(23/635)----------
Starting Test
Initial set of enumerated threads:
 - Thread: main
 - Thread: Reference Handler
 - Thread: Finalizer
 - Thread: Signal Dispatcher
 - Thread: JVMCI-native CompilerThread0
 - Thread: Common-Cleaner
 - Thread: Notification Thread
 - Thread: MainThread
ThreadGroup: 8 active thread(s)
Thread: 8 stack trace(s) returned
ThreadMXBean: 11 live threads(s)
ThreadMXBean: 11 thread Id(s)
Set of stack-traced threads:
 - Thread: Signal Dispatcher
 - Thread: Notification Thread
 - Thread: MainThread
 - Thread: Finalizer
 - Thread: Reference Handler
 - Thread: Common-Cleaner
 - Thread: JVMCI-native CompilerThread0
 - Thread: main
----------System.err:(11/612)----------
java.lang.RuntimeException: inconsistent results
	at ThreadLists.main(ThreadLists.java:91)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:578)
	at com.sun.javatest.regtest.agent.MainWrapper$MainThread.run(MainWrapper.java:125)
	at java.base/java.lang.Thread.run(Thread.java:1623)",,,,,,,,,,,JDK-8311354,JDK-8310193,,,,,,,,,,,,,,,,,,,,,,,,JDK-8306446,,,,,JDK-8310055,,,,"2023-03-11 07:57;dnsimon;8303916-reproducer.diff;https://bugs.openjdk.org/secure/attachment/102951/8303916-reproducer.diff",,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i30ogr:",9223372036854775807,b29,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@411d4af6,,,,,,,,,"2023-03-10 14:54;kevinw;Thread MXBean found 11 but the top thread group had 8.
Test shows the 8 threads from the thread group, and then shows that Thread.getAllStackTraces() also found 8 threads.  Then the MXBean count was taken.
The test doesn't show what extra Threads make up the 11 threads and 11 thread IDs that the MXBean found. 

(Test runs in othervm mode since 8132785.)

Is there a log or particular VM arguments to try and reproduce this?;;;","2023-03-11 07:53;dnsimon;It reproduces fairly reliably on my M1 MacBook using the graalvm-ce-java20-darwin-aarch64-dev.tar.gz download from https://github.com/graalvm/graalvm-ce-dev-builds/releases/tag/23.0.0-dev-20230303_0222

I modified the test using the attached 8303916-reproducer.diff patch. This patch calls the ThreadMXBean logic in a loop as sometimes the inconsistency does not always reproduce the first time it's called.

I also increase the number of JVMCI compiler threads with -XX:JVMCIThreads=4.

> ~/jib/install/jtreg/7.1.1/1/bundles/jtreg-7.1.1+1.zip/jtreg/bin/jtreg -nr -v:all -jdk:/Users/dnsimon/Downloads/graalvm-ce-java20-23.0.0-dev/Contents/Home -vmoption:-XX:JVMCIThreads=4 test/jdk/java/lang/management/ThreadMXBean/ThreadLists.java
...
STDOUT:
Starting Test
Initial set of enumerated threads:
 - Thread: main
 - Thread: Reference Handler
 - Thread: Finalizer
 - Thread: Signal Dispatcher
 - Thread: JVMCI-native CompilerThread0
 - Thread: Common-Cleaner
 - Thread: Notification Thread
 - Thread: MainThread
--- ITERATION 0 ---
ThreadGroup: 8 active thread(s)
Thread: 8 stack trace(s) returned
ThreadMXBean: 8 live threads(s)
ThreadMXBean: 8 thread Id(s)
--- ITERATION 1 ---
Thread: 8 stack trace(s) returned
ThreadMXBean: 9 live threads(s)
ThreadMXBean: 9 thread Id(s)
Set of stack-traced threads:
 - Thread: main
 - Thread: Common-Cleaner
 - Thread: Notification Thread
 - Thread: Reference Handler
 - Thread: Finalizer
 - Thread: MainThread
 - Thread: JVMCI-native CompilerThread0
 - Thread: Signal Dispatcher
Set of thread infos:
 - ThreadInfo: id=1, name=main
 - ThreadInfo: id=8, name=Reference Handler
 - ThreadInfo: id=9, name=Finalizer
 - ThreadInfo: id=10, name=Signal Dispatcher
 - ThreadInfo: id=13, name=JVMCI-native CompilerThread0
 - ThreadInfo: id=17, name=Common-Cleaner
 - ThreadInfo: id=18, name=Notification Thread
 - ThreadInfo: id=21, name=MainThread
 - ThreadInfo: id=22, name=JVMCI-native CompilerThread1
STDERR:
java.lang.RuntimeException: inconsistent results
	at ThreadLists.main(ThreadLists.java:99)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:578)
	at com.sun.javatest.regtest.agent.MainWrapper$MainThread.run(MainWrapper.java:125)
	at java.base/java.lang.Thread.run(Thread.java:1623);;;","2023-03-11 08:03;dnsimon;Excluding all threads whose name starts with ""JVMCI"" would fix the problem.;;;","2023-03-14 10:17;mwthomps;ILW=LLM=P5;;;","2023-05-26 11:41;kevinw;I can also now see a failure in this test with JTREG_TEST_THREAD_FACTORY=Virtual  
Trying some new test output to show the new thread:
e.g.
...
ThreadGroup: 8 active thread(s)
Thread: 8 stack trace(s) returned
ThreadMXBean: 9 live threads(s)
ThreadMXBean: 9 thread Id(s)
Set of Threads from Thread.getAllStackTraces():
 - Thread: Thread[#1,main,5,main]
 - Thread: Thread[#9,Finalizer,8,system]
 - Thread: Thread[#10,Signal Dispatcher,9,system]
 - Thread: Thread[#32,ForkJoinPool-1-worker-1,5,CarrierThreads]
 - Thread: Thread[#28,Common-Cleaner,8,InnocuousThreadGroup]
 - Thread: Thread[#8,Reference Handler,10,system]
 - Thread: Thread[#29,Notification Thread,9,system]
 - Thread: Thread[#33,ForkJoinPool-1-worker-2,5,CarrierThreads]
Re-enumerate ThreadGroup, gets newCount=9
Set of Thread IDs from MXBean:
1 8 9 10 28 29 32 33 34   new!
Thread[#34,ForkJoinPool-1-worker-3,5,CarrierThreads]
;;;","2023-06-14 04:45;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/14465
Date: 2023-06-14 09:30:49 +0000;;;","2023-06-16 02:23;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk21/pull/24
Date: 2023-06-16 09:15:52 +0000;;;","2023-06-28 01:32;dukebot;Changeset: 8d9ebb69
Author:    Kevin Walls <kevinw@openjdk.org>
Date:      2023-06-28 08:30:13 +0000
URL:       https://git.openjdk.org/jdk21/commit/8d9ebb6981a163a7c223eff154eb5ad966e146f1
;;;",,,,,,,,,,,,,,,,,,,,,,,
javadoc build failure after JDK-8294959,JDK-8303915,5095887,Bug,Closed,JDK,JDK,software,duke,,,P1,Fixed,asotona,dcubed,dcubed,2023-03-09 10:38,2023-07-24 10:58,2023-10-01 09:56,2023-03-09 11:26,21,,,,,,,,21,core-libs,,0,regression,tier1,,,,,,,,,,,,,,,"[2023-03-09T18:33:34,984Z] Generating JDK_API javadoc for 60 modules
[2023-03-09T18:33:38,219Z] /opt/mach5/mesos/work_dir/slaves/741e9afd-8c02-45c3-b2e2-9db1450d0832-S864/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/e4b67636-f85e-4260-b155-85094d4532fd/runs/7c86e6c3-f07e-4210-a9ea-2a885a43ae54/workspace/open/src/java.base/share/classes/java/lang/Module.java:1596: error: patterns in switch statements are a preview feature and are disabled by default.
[2023-03-09T18:33:38,219Z]                 case AccessFlags af -> clb.withFlags(AccessFlag.INTERFACE,
[2023-03-09T18:33:38,223Z]                      ^
[2023-03-09T18:33:38,223Z]   (use --enable-preview to enable patterns in switch statements)
[2023-03-09T18:33:38,374Z] /opt/mach5/mesos/work_dir/slaves/741e9afd-8c02-45c3-b2e2-9db1450d0832-S864/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/e4b67636-f85e-4260-b155-85094d4532fd/runs/7c86e6c3-f07e-4210-a9ea-2a885a43ae54/workspace/open/src/java.base/share/classes/java/lang/Module.java:1596: error: patterns in switch statements are a preview feature and are disabled by default.
[2023-03-09T18:33:38,374Z]                 case AccessFlags af -> clb.withFlags(AccessFlag.INTERFACE,
[2023-03-09T18:33:38,375Z]                      ^
[2023-03-09T18:33:38,375Z]   (use --enable-preview to enable patterns in switch statements)
[2023-03-09T18:33:38,499Z] /opt/mach5/mesos/work_dir/slaves/741e9afd-8c02-45c3-b2e2-9db1450d0832-S864/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/e4b67636-f85e-4260-b155-85094d4532fd/runs/7c86e6c3-f07e-4210-a9ea-2a885a43ae54/workspace/open/src/java.base/share/classes/java/lang/Module.java:1596: error: patterns in switch statements are a preview feature and are disabled by default.
[2023-03-09T18:33:38,500Z]                 case AccessFlags af -> clb.withFlags(AccessFlag.INTERFACE,
[2023-03-09T18:33:38,500Z]                      ^
[2023-03-09T18:33:38,500Z]   (use --enable-preview to enable patterns in switch statements)
[2023-03-09T18:33:39,084Z] 1 error
[2023-03-09T18:33:39,130Z] gmake[3]: *** [/opt/mach5/mesos/work_dir/slaves/741e9afd-8c02-45c3-b2e2-9db1450d0832-S864/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/e4b67636-f85e-4260-b155-85094d4532fd/runs/7c86e6c3-f07e-4210-a9ea-2a885a43ae54/workspace/build/docs/support/docs/_javadoc_REFERENCE_API_exec.marker] Error 1
[2023-03-09T18:33:39,145Z] 1 error
[2023-03-09T18:33:39,184Z] gmake[3]: *** [/opt/mach5/mesos/work_dir/slaves/741e9afd-8c02-45c3-b2e2-9db1450d0832-S864/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/e4b67636-f85e-4260-b155-85094d4532fd/runs/7c86e6c3-f07e-4210-a9ea-2a885a43ae54/workspace/build/docs/support/docs/_javadoc_JAVASE_API_exec.marker] Error 1
[2023-03-09T18:33:39,187Z] gmake[2]: *** [docs-reference-api-javadoc] Error 1
[2023-03-09T18:33:39,187Z] gmake[2]: *** Waiting for unfinished jobs....
[2023-03-09T18:33:39,210Z] 1 error
[2023-03-09T18:33:39,238Z] gmake[2]: *** [docs-javase-api-javadoc] Error 1
[2023-03-09T18:33:39,255Z] gmake[3]: *** [/opt/mach5/mesos/work_dir/slaves/741e9afd-8c02-45c3-b2e2-9db1450d0832-S864/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/e4b67636-f85e-4260-b155-85094d4532fd/runs/7c86e6c3-f07e-4210-a9ea-2a885a43ae54/workspace/build/docs/support/docs/_javadoc_JDK_API_exec.marker] Error 1
[2023-03-09T18:33:39,305Z] gmake[2]: *** [docs-jdk-api-javadoc] Error 1
[2023-03-09T18:33:39,307Z] 
[2023-03-09T18:33:39,307Z] ERROR: Build failed for target 'default (all-docs-bundles)' in configuration 'docs' (exit code 2) 
[2023-03-09T18:33:39,314Z] Stopping javac server",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8294959,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i30ogb:",9223372036854775807,b14,,,,,,,,,Verified,,"2023-03-09 10:39;dcubed;[~asotona] - Please take a look at this Tier1 build failure.;;;","2023-03-09 11:24;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/12957
Date: 2023-03-09 19:16:21 +0000;;;","2023-03-09 11:26;dukebot;Changeset: 769e7401
Author:    Adam Sotona <asotona@openjdk.org>
Date:      2023-03-09 19:24:50 +0000
URL:       https://git.openjdk.org/jdk/commit/769e74018195feb401f7ef198ec9b09150c14869
;;;","2023-03-09 11:38;dcubed;The fix for this bug is integrated in jdk-21+14-1076.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,
[testbug] Some unit tests call System.exit,JDK-8303911,5095881,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,lkostyra,kcr,kcr,2023-03-09 08:58,2023-04-26 06:15,2023-10-01 09:56,2023-04-20 09:20,8,jfx11,jfx21,,,,,,jfx21,javafx,,0,noreg-self,sn_142,test_sprint,testbug,,,,,,,,,,,,,"Calling System.exit from a JUnit test is an anti-pattern that will cause the test to exit abruptly in a way that will interfere with correct reporting. For system tests, it can cause that test to either be silently skipped or report confusing results. For tests in other modules, which can run several tests in the same VM, it will cause the entire rest of the test suite to be skipped.

I have attached a simple example test. If you drop that in:

tests/system/src/test/java/test/SystemExitTest.java

you will see the problems that can arise.

If you run all of :systemTests:test then, the test won't show up in the report and it will look like the whole test suite passes! If you run just that one test, as follows, you will get a confusing error message that says there are no tests to run:

$ gradle --info -PFULL_TEST=true cleanTest :systemTests:test --tests test.SystemExitTest
...
FAILURE: Build failed with an exception.

* What went wrong:
Execution failed for task ':systemTests:test'.
> No tests found for given includes: [**/*.*](include rules) [test/robot/**, test/robot/com/sun/glass/ui/monocle/**](exclude rules) [test.SystemExitTest](--tests filter)


I grepped through our sources, and have found the following two lists of classes that call System.exit.

1. The following classes call System.exit and do not need any action:

tests/system/src/test/java/test/javafx/scene/shape/meshmanagercacheleaktest/MeshManagerCacheLeakApp.java
tests/system/src/test/java/test/shutdowntest/ShutdownHookApp.java
tests/system/src/test/java/test/javafx/css/imagecacheleaktest/ImageCacheLeakApp.java
tests/system/src/test/java/test/sandbox/app/*.java
tests/system/src/test/java/test/launchertest/Test*.java
tests/system/src/test/java/test/launchertest/PlatformExitApp.java

These classes are not themselves JUnit tests, but are applications that are forked/execed by a Junit test, so the call to System.exit is expected.


2. The following classes call System.exit and need some remediation:

modules/javafx.fxml/src/test/java/test/com/oracle/javafx/fxml/test/TestLoadPerformance.java
ACTION: delete this or else move it to a directory under tests/performace; it is not a unit test and is never executed

modules/javafx.graphics/src/test/java/test/com/sun/javafx/iio/ImageStorageTest.java.DISABLED
ACTION: delete this file

modules/javafx.graphics/src/test/java/test/com/sun/javafx/pgstub/StubToolkit.java
ACTION: change the System.exit to throw UnsupportedOperationException (it would fail the entire test suite if any test ever called that stub method). This one might warrant adding a test in javafx.graphics to verify it.

tests/system/src/test/java/test/com/sun/javafx/application/StaticStartupTest.java
ACTION: fix this test to throw an error in the case where it currently calls System.exit

tests/system/src/test/java/test/com/sun/javafx/image/impl/ImageRaceTest.java
ACTION: change the System.exit to Assert.fail

tests/system/src/test/java/test/javafx/embed/swing/JFXPanelEmbeddedWindowTest.java
tests/system/src/test/java/test/robot/javafx/embed/swing/JFXPanelTest.java
ACTION: remove the call, possibly by removing the main method; it is never executed by JUnit and is not needed
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"2023-03-09 09:00;kcr;SystemExitTest.java;https://bugs.openjdk.org/secure/attachment/102929/SystemExitTest.java",,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i30oez:",9223372036854775807,b14,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@1d1c7815,,,,,,,,,"2023-03-09 09:03;kcr;I recommend double-checking the findings I provided in the Description.;;;","2023-04-17 10:54;lkostyra;I double-checked the findings and agree with them. I also didn't find any additional uses of System.exit() in tests.

Regarding TestLoadPerformance.java - I will also move its ""sibling"" kept in the same directory CompareLoadPerformance.java;;;","2023-04-19 11:11;lkostyra;I fixed most of the covered cases.

The only case I did not fix was StaticStartupTest - this test uses System.exit() as a part of a separate deamon thread being a watchdog, checking for potential deadlock. Reworking most of this test would take way more time than expected, so I decided to leave it as it is.;;;","2023-04-19 11:22;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jfx/pull/1101
Date: 2023-04-19 18:15:40 +0000;;;","2023-04-20 09:20;dukebot;Changeset: 540c0fd1
Author:    Lukasz Kostyra <lkostyra@openjdk.org>
Committer: Andy Goryachev <angorya@openjdk.org>
Date:      2023-04-20 16:17:55 +0000
URL:       https://git.openjdk.org/jfx/commit/540c0fd1386631b285250152a5fee6e979ed3e66
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,
jdk/classfile/CorpusTest.java failed 1 of 6754 tests,JDK-8303910,5095880,Bug,Closed,JDK,JDK,software,duke,,,P3,Fixed,asotona,dcubed,dcubed,2023-03-09 08:27,2023-08-08 12:00,2023-10-01 09:56,2023-03-14 01:38,21,,,,,,,,21,core-libs,,0,intermittent,tier1,,,,,,,,,,,,,,,"The following test failed in the JDK21 CI:

jdk/classfile/CorpusTest.java

Here's a snippet from the log file:

SUCCESSFUL CorpusTest::testNullAdaptations '[3377] /System/Volumes/Data/mesos/work_dir/slaves/782b3f2b-1fe4-42ad-a0aa-b7bf2f5b3ebf-S5205/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/3057cabf-c476-4906-b224-5cdac26c2d33/runs/12aa94a1-de3e-499e-b54f-1babb7033f91/testoutput/test-support/jtreg_open_test_jdk_tier1_part3/classes/3/jdk/classfile/CorpusTest.d/helpers/ClassRecord$ConstantPoolEntryRecord$CpMethodTypeRecord.class'
SUCCESSFUL CorpusTest::testNullAdaptations '[3376] /System/Volumes/Data/mesos/work_dir/slaves/782b3f2b-1fe4-42ad-a0aa-b7bf2f5b3ebf-S5205/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/3057cabf-c476-4906-b224-5cdac26c2d33/runs/12aa94a1-de3e-499e-b54f-1babb7033f91/testoutput/test-support/jtreg_open_test_jdk_tier1_part3/classes/3/jdk/classfile/CorpusTest.d/helpers/ClassRecord$LocalVariableRecord.class'
SUCCESSFUL CorpusTest::testNullAdaptations '[3364] /System/Volumes/Data/mesos/work_dir/slaves/782b3f2b-1fe4-42ad-a0aa-b7bf2f5b3ebf-S5205/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/3057cabf-c476-4906-b224-5cdac26c2d33/runs/12aa94a1-de3e-499e-b54f-1babb7033f91/testoutput/test-support/jtreg_open_test_jdk_tier1_part3/classes/3/jdk/classfile/CorpusTest.d/helpers/ClassRecord$AttributesRecord.class'
JavaTest Message: JUnit Platform Failure(s): 1

[ JUnit Containers: found 5, started 5, succeeded 5, failed 0, aborted 0, skipped 0]
[ JUnit Tests: found 6754, started 6754, succeeded 6753, failed 1, aborted 0, skipped 0]

java.lang.Exception: JUnit test failure
	at com.sun.javatest.regtest.agent.JUnitRunner.runWithJUnitPlatform(JUnitRunner.java:150)
	at com.sun.javatest.regtest.agent.JUnitRunner.main(JUnitRunner.java:96)
	at com.sun.javatest.regtest.agent.JUnitRunner.main(JUnitRunner.java:62)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
	at java.base/java.lang.reflect.Method.invoke(Method.java:578)
	at com.sun.javatest.regtest.agent.MainWrapper$MainThread.run(MainWrapper.java:125)
	at java.base/java.lang.Thread.run(Thread.java:1623)

JavaTest Message: Test threw exception: java.lang.Exception: JUnit test failure
JavaTest Message: shutting down test

STATUS:Failed.`main' threw exception: java.lang.Exception: JUnit test failure
----------rerun:(51/7707)*----------

With 6754 tests executed and a couple of lines per test, the
test output was truncated due to size. It appears that the
failing test happened in the truncated zone.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8304164,,,,,,,,,,,,,,,,generic,,,,,,,,,,generic,,,,,,"0|i30oer:",9223372036854775807,b14,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4c088d55,,,,,,,Verified,,"2023-03-09 08:34;dcubed;Here's a quick analysis of the first words from the .jtr file:

$ sed -e 's/ .*//' CorpusTest.jtr.subset | sort | uniq -c
1917 STARTED
1919 SUCCESSFUL

so we only see results for 1919 test of 6754.;;;","2023-03-10 14:43;smarks;[~asotona] Is this yours?;;;","2023-03-10 22:44;asotona;Yes, these tests belong to Classfile API.
It seems CorpusTest needs an extended timeout, as I haven't seen any other possible reason of not-executing and finishing all the tests.;;;","2023-03-11 07:53;dcubed;This was not a failure due to timeout. A single test failed somewhere in the
middle of the 6754 tests. We don't see which test failed because the output
in the .jtr file was clipped by JTREG.;;;","2023-03-13 02:40;asotona;OK, I'll try to find it and improve diagnostic output;;;","2023-03-13 09:30;asotona;Catched the root cause:
```
java.lang.NullPointerException: Cannot invoke ""jdk.internal.classfile.TypeKind.descriptor()"" because the return value of ""jdk.internal.classfile.instruction.NewPrimitiveArrayInstruction.typeKind()"" is null
	at helpers.ClassRecord$CodeRecord.lambda$instructions$3(ClassRecord.java:525)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:179)
	at java.base/java.util.ArrayList$Itr.forEachRemaining(ArrayList.java:1003)
	at java.base/java.util.Spliterators$IteratorSpliterator.forEachRemaining(Spliterators.java:1924)
	at java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:509)
	at java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:499)
	at java.base/java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:575)
	at java.base/java.util.stream.AbstractPipeline.evaluateToArrayNode(AbstractPipeline.java:260)
	at java.base/java.util.stream.ReferencePipeline.toArray(ReferencePipeline.java:616)
	at java.base/java.util.stream.ReferencePipeline.toArray(ReferencePipeline.java:622)
	at java.base/java.util.stream.ReferencePipeline.toList(ReferencePipeline.java:627)
	at helpers.ClassRecord$CodeRecord.instructions(ClassRecord.java:568)
	at helpers.ClassRecord$CodeRecord.ofCodeAttribute(ClassRecord.java:587)
	at helpers.ClassRecord$AttributesRecord.lambda$ofAttributes$51(ClassRecord.java:288)
	at helpers.ClassRecord$AttributeFinder.findAndMap(ClassRecord.java:194)
	at helpers.ClassRecord$AttributesRecord.ofAttributes(ClassRecord.java:288)
	at helpers.ClassRecord$MethodRecord.ofMethodModel(ClassRecord.java:174)
	at helpers.ClassRecord.lambda$ofClassModel$12(ClassRecord.java:128)
	at java.base/java.util.stream.Collectors.lambda$uniqKeysMapAccumulator$1(Collectors.java:180)
	at java.base/java.util.stream.ReduceOps$3ReducingSink.accept(ReduceOps.java:169)
	at java.base/java.util.AbstractList$RandomAccessSpliterator.forEachRemaining(AbstractList.java:722)
	at java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:509)
	at java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:499)
	at java.base/java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:921)
	at java.base/java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.base/java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:682)
	at helpers.ClassRecord.ofClassModel(ClassRecord.java:128)
	at CorpusTest.testReadAndTransform(CorpusTest.java:200)
FAILED     CorpusTest::testReadAndTransform '[4] modules/java.base/java/io/BufferedReader.class'
```;;;","2023-03-13 12:15;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/13004
Date: 2023-03-13 18:54:11 +0000;;;","2023-03-13 14:03;dcubed;So far this test has failed on: macosx-aarch64, windows-x64 and linux-x64-open.
And there are different numbers of tests executed in each of those runs. Don't
know why...;;;","2023-03-14 01:33;asotona;The reason why the test failed on any platform and only with approx 1:100.000 chance is in thread-unsafe lazy initialisation of helper array with constants and combination of heavy parallel junit parametrised tests execution.
Above linked PR fixes that.
Thanks for not blacklisting the test, so I could find the root cause.  ;;;","2023-03-14 01:38;dukebot;Changeset: 43eca1dc
Author:    Adam Sotona <asotona@openjdk.org>
Date:      2023-03-14 08:36:05 +0000
URL:       https://git.openjdk.org/jdk/commit/43eca1dcb197e3615b6077a5d8aef28f32a7724c
;;;","2023-03-14 11:22;dcubed;The fix for this test is integrated in jdk-21+14-1129.;;;",,,,,,,,,,,,,,,,,,,,
Add missing check in VTMS_transition_disable_for_all() for suspend mode,JDK-8303908,5095877,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,pchilanomate,pchilanomate,pchilanomate,2023-03-09 08:05,2023-03-20 18:06,2023-10-01 09:56,2023-03-13 13:16,21,,,,,,,,21,hotspot,,0,loom,,,,,,,,,,,,,,,,"A suspender is a JvmtiVTMSTransitionDisabler monopolist, meaning VTMS_transition_disable_for_all() should not return while there is any active jvmtiVTMSTransitionDisabler. The code though is checking for active ""all-disablers"" but it's missing the check for active ""single disablers"":

if (_is_SR) {
      _SR_mode = true;
      while (_VTMS_transition_disable_for_all_count > 0) {
       	ml.wait(10);   // Wait while there is any active jvmtiVTMSTransitionDisabler.
      }
}

Before 8298853, since there was only one counter we were doing the correct thing:

if (_is_SR) {
      _SR_mode = true;
      while (_VTMS_transition_disable_count > 0) {
      		ml.wait(10);   // Wait while there is any active jvmtiVTMSTransitionDisabler.
      }
}

I attached a simple reproducer that crashes because of this.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"2023-03-09 08:24;pchilanomate;repro.zip;https://bugs.openjdk.org/secure/attachment/102928/repro.zip",,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i30oe3:",9223372036854775807,b14,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@661b156a,,,,,,,,,"2023-03-09 09:28;dcubed;This bug is one of those that straddles the fence between
hotspot/runtime and hotspot/jvmti. I think this is more JVM/TI
than runtime so I'm moving it for initial triage.;;;","2023-03-09 11:20;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/12956
Date: 2023-03-09 18:55:06 +0000;;;","2023-03-13 13:16;dukebot;Changeset: a8f662ec
Author:    Patricio Chilano Mateo <pchilanomate@openjdk.org>
Date:      2023-03-13 20:15:23 +0000
URL:       https://git.openjdk.org/jdk/commit/a8f662ecb2cf13ba7fa499b9a9150da4318306a8
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,
Update jdk20u fix version to 20.0.2,JDK-8303906,5095875,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,robm,robm,robm,2023-03-09 07:51,2023-05-04 03:22,2023-10-01 09:56,2023-03-09 08:21,,,,,,,,,20.0.2,infrastructure,,0,,,,,,,,,,,,,,,,,The OpenJDK repo needs to have its jcheck config updated,,,,,,,,,,,JDK-8307008,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i30odn:",9223372036854775807,b03,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@429c566,,,,,,,,,"2023-03-09 08:05;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk20u/pull/17
Date: 2023-03-09 15:52:43 +0000;;;","2023-03-09 08:21;dukebot;Changeset: 0f4bb872
Author:    Rob McKenna <robm@openjdk.org>
Date:      2023-03-09 16:20:25 +0000
URL:       https://git.openjdk.org/jdk20u/commit/0f4bb872f541e66b5b0d1339d370274fe1a8297b
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
ObservableValue's when binding should only invalidate when strictly needed,JDK-8303897,5095867,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,jhendrikx,jhendrikx,jhendrikx,2023-03-09 05:56,2023-04-26 06:15,2023-10-01 09:56,2023-04-19 11:06,jfx20,,,,,,,,jfx21,javafx,,0,,,,,,,,,,,,,,,,,"There are up to two additional invalidations performed that really should be avoided, causing downstream fluent bindings to be recomputed with the same values.  This is very confusing as these should only be called when there is an actual change, and not called for the same value multiple times in a row.

These two extra invalidations have two different causes, each causing an additional invalidation to be triggered:

1) ObjectBinding's `isObserved` is delayed slightly.  When you add a listener, the listener is added internally and the binding is made valid; this triggers some downstream activity which checks the `isObserved` status to decide whether to start observation of properties -- unfortunately this still returns `false` at that time.  A work-around for this existed by calling `getValue` again in `LazyObjectBinding` with a huge comment explaining why this is needed. Although this works, it still means that a downstream function like `map` is called an additional time while it should really only be called once.

The solution is to ensure `isObserved` returns `true` before the `ExpressionHelper` is called.  Already verified this solves the problem.  This also means the work-around in `LazyObjectBinding` is no longer needed, which seems like a big win.

2) The second additional call originates from a different issue. When `ConditionalBinding` (which implements the `when` construct) sees its condition property changing, it always invalidates itself. This is however only necessary if the current cached value (if it was valid) differs from the current source value. To prevent an unnecessary invalidation, and the resulting revalidation calls that this will trigger, a simple check to see if the value actually changed before invalidating solves this problem.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8290040,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i30obv:",9223372036854775807,b14,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@233f6319,,,,,,,,,"2023-03-09 21:23;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jfx/pull/1056
Date: 2023-03-10 05:19:13 +0000;;;","2023-04-19 11:06;dukebot;Changeset: 09424fcb
Author:    John Hendrikx <jhendrikx@openjdk.org>
Date:      2023-04-19 18:04:25 +0000
URL:       https://git.openjdk.org/jfx/commit/09424fcb88179f51e0c8d10173ea0b362b54a904
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Add a prism property to control metal pipeline related debug logs,JDK-8303893,5095863,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,aghaisas,aghaisas,aghaisas,2023-03-09 04:20,2023-03-09 04:44,2023-10-01 09:56,2023-03-09 04:44,internal,,,,,,,,internal,javafx,,0,javafx-metal,sn_139,,,,,,,,,,,,,,,"In metal pipeline code we have the debug logs on by default. Although these are helpful, they are flooding the terminal by default now.

I am planning to move these logs under a new conditional prism property `-Dprism.metalDebug`

Once we achieve the functional completion mark we can either remove these log statements or convert them to either of PrismSettings.verbose or PrismSettings.debug or PrismSettings.trace.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8271024,,,,,,,,,,,,,,,,,,,,,generic,,,,,,,,,,os_x,,,,,,"0|i30oaz:",9223372036854775807,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4143e3f7,,,,,,,,,"2023-03-09 04:44;aghaisas;Changeset: 20820dc9
Author:    aghaisas <ajitgh@gmail.com>
Date:      2023-03-09 17:56:39 +0000
URL:       https://git.openjdk.org/jfx-sandbox/commit/20820dc9dbb2a1dc4b3242313309f9dcf3ebcc6b;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Refactor some iterators in jdk.compiler,JDK-8303882,5095851,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,prappo,prappo,prappo,2023-03-09 01:29,2023-03-20 18:07,2023-10-01 09:56,2023-03-14 11:38,21,,,,,,,,21,tools,,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8303755,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i30o8b:",9223372036854775807,b14,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4dca67bd,,,,,,,,,"2023-03-09 05:20;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/12949
Date: 2023-03-09 13:14:27 +0000;;;","2023-03-14 11:38;dukebot;Changeset: f81e1def
Author:    Pavel Rappo <prappo@openjdk.org>
Date:      2023-03-14 18:36:46 +0000
URL:       https://git.openjdk.org/jdk/commit/f81e1def8f74e91dcf7fa3bf54531a85956dc5e4
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
"Mixed, minor cleanup in jdk.compiler",JDK-8303881,5095850,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,prappo,prappo,prappo,2023-03-09 01:27,2023-03-16 00:17,2023-10-01 09:56,2023-03-09 05:45,21,,,,,,,,21,tools,,0,noreg-cleanup,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8303755,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i30o83:",9223372036854775807,b14,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4dca67bd,,,,,,,,,"2023-03-09 02:12;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/12937
Date: 2023-03-09 10:06:20 +0000;;;","2023-03-09 05:45;dukebot;Changeset: 1e9942aa
Author:    Pavel Rappo <prappo@openjdk.org>
Date:      2023-03-09 13:43:36 +0000
URL:       https://git.openjdk.org/jdk/commit/1e9942aa112edca33f964db127df6c9ce41e86ff
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Ensemble crashes when run on M1,JDK-8303880,5095849,Bug,Resolved,JDK,JDK,software,duke,,,P2,Fixed,arapte,jdv,jdv,2023-03-09 01:01,2023-03-17 15:50,2023-10-01 09:56,2023-03-14 03:57,internal,,,,,,,,internal,javafx,,0,javafx-metal,sn_139,,,,,,,,,,,,,,,"If we launch Ensemble8 on latest metal branch code. It crashes at MetalShader.setFloat2() with following log :

>>> MTLShader.setConstant() : fragmentFunctionName : FillRoundRect_Color
    MTLShader.setConstant() name = oinvarcradii, f0 = 0.083333336, f1 = 0.083333336
2023-03-09 14:23:05.380 java[8931:260143] 
2023-03-09 14:23:05.380 java[8931:260143] -> JNICALL Native: MTLShader_nSetFloat2
2023-03-09 14:23:05.380 java[8931:260143] 
2023-03-09 14:23:05.380 java[8931:260143] >>>> MetalShader.setFloat2() : argumentName = oinvarcradii, f0= 0.083333, f1= 0.083333
2023-03-09 14:23:05.380 java[8931:260143]      MetalShader.setFloat2()----> fragFuncName: FillRoundRect_Color
2023-03-09 14:23:05.380 java[8931:260143]     Value: 0 for key: oinvarcradii
2023-03-09 14:23:05.380 java[8931:260143]     index.intValue: 0

And this crash is seen only when we use setFloat2() with other set of arguments it is working fine.",,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8271024,,,,,,,,,,,,,,,,,,,"2023-03-09 01:02;jdv;Ensemble8_Crash_M1.log;https://bugs.openjdk.org/secure/attachment/102916/Ensemble8_Crash_M1.log","2023-03-09 03:53;aghaisas;hs_err_pid36560.log;https://bugs.openjdk.org/secure/attachment/102918/hs_err_pid36560.log",,,,,,,,,,,generic,,,,,,,,,,os_x,,,,,,"0|i30o7v:",9223372036854775807,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4143e3f7,,,,,,,,,"2023-03-09 03:46;aghaisas;Observed this on my macBook x64 with discrete graphics card active.
Attached the hs_err file.;;;","2023-03-10 00:55;aghaisas;Drawing a rounded rectangle causes this crash.

Minimal example to reproduce this crash on my system-
----------------------------------------------------------------------
        //Drawing a Rectangle
        Rectangle rect = new Rectangle();
        rect.setWidth(200.0f);
        rect.setHeight(150.0f);
        rect.setArcWidth(50.0);
        rect.setArcHeight(50.0);
        
        Group gr = new Group(rect);
        Scene scene = new Scene(gr, 300, 300);
        primaryStage.setScene(scene);
        primaryStage.show();
--------------------------------------------------------------------------------------

Commenting out setArcWidth and setArcHeight - results in no crash - with simple rectangle being drawn.
Drawing a rounded rectangle uses a different shader - FillRoundRect_Color.metal. Looks like there is some issue in the way we send data to this shader.;;;","2023-03-10 02:36;aghaisas;Enabling Metal API Validation (set environment variable METAL_DEVICE_WRAPPER_TYPE=1) gives below error-

>>> MTLResourceFactory.createShader()
    shaderName: FillRoundRect_Color
    samplers: {}
    params: {oinvarcradii=0}
    maxTexCoordIndex: 1
    isPixcoordUsed: false
    isPerVertexColorUsed: true
>>> MTLShader.createShader()1
    fragFuncName= FillRoundRect_Color
    samplers= {}
    params= {oinvarcradii=0}
    maxTexCoordIndex= 1
    isPixcoordUsed= false
    isPerVertexColorUsed= true
>>> MTLShader(): fragFuncName = FillRoundRect_Color
2023-03-10 16:04:07.680 java[8702:195580] 
2023-03-10 16:04:07.680 java[8702:195580] >>>> JNICALL Native: MTLShader_nCreateMetalShader
2023-03-10 16:04:07.680 java[8702:195580] 
2023-03-10 16:04:07.680 java[8702:195580] >>>> MetalShader.initWithContext()----> fragFuncName: FillRoundRect_Color
2023-03-10 16:04:07.680 java[8702:195580] getPRISMDict 
2023-03-10 16:04:07.680 java[8702:195580] getPRISMDict() : calling -> getFillRoundRect_Color_Uniform_VarID_Dict()
2023-03-10 16:04:07.680 java[8702:195580] -> Native: MetalShader.initWithContext() Value: 0 for key: oinvarcradii
newArgumentEncoder:84: failed assertion `Buffer argument uniforms (buffer index: 0) of function FillRoundRect_Color is not an indirect argument buffer. If uniforms is expected to be an argument buffer, this could be a shader bug. Argument buffers can be distinguished from regular buffers if they contain buffers, textures, samplers, or any element with the [[id]] attribute'

Process finished with exit code 134 (interrupted by signal 6: SIGABRT);;;","2023-03-13 01:29;jdv;With RoundedRect sample drawing i am also the same failure on M1.
With METAL_DEVICE_WRAPPER_TYPE enabled i see same log :

>>> MTLShader(): fragFuncName = FillRoundRect_Color
MTLResourceFactory: Prism - createStockShader: FillRoundRect_Color
2023-03-13 13:57:55.271 java[48920:1507867] 
2023-03-13 13:57:55.271 java[48920:1507867] >>>> JNICALL Native: MTLShader_nCreateMetalShader
2023-03-13 13:57:55.272 java[48920:1507867] 
2023-03-13 13:57:55.272 java[48920:1507867] >>>> MetalShader.initWithContext()----> fragFuncName: FillRoundRect_Color
2023-03-13 13:57:55.272 java[48920:1507867] getPRISMDict 
2023-03-13 13:57:55.272 java[48920:1507867] getPRISMDict() : calling -> getFillRoundRect_Color_Uniform_VarID_Dict()
2023-03-13 13:57:55.272 java[48920:1507867] -> Native: MetalShader.initWithContext() Value: 0 for key: oinvarcradii
newArgumentEncoder:84: failed assertion `Buffer argument uniforms (buffer index: 0) of function FillRoundRect_Color is not an indirect argument buffer. If uniforms is expected to be an argument buffer, this could be a shader bug. Argument buffers can be distinguished from regular buffers if they contain buffers, textures, samplers, or any element with the [[id]] attribute'

And i have macOS Ventura 13.2.1;;;","2023-03-14 03:55;arapte;----
newArgumentEncoder:84: failed assertion `Buffer argument uniforms (buffer index: 0) of function FillRoundRect_Color is not an indirect argument buffer. If uniforms is expected to be an argument buffer, this could be a shader bug. Argument buffers can be distinguished from regular buffers if they contain buffers, textures, samplers, or any element with the [[id]] attribute' 
----
We see this Assertion on Ventura, and also on Monterey but only with MTL_SHADER_VALIDATION=1.

Based on the above assertion message and MTLArgumentEncoder documentation: A prime requirement to use MTLArgumentEncoder is that the struct of uniform variables that we use to create MTLArgumentEncoder must contain at least one variable of these types : buffers, textures, samplers, or any element with the [[id]] attribute’.

But we have some(22) prism shaders for which these structs are either empty or have just vector_float2's 
for example :
typedef struct FillRoundRect_Color_Uniforms {
  vector_float2 oinvarcradii;
} FillRoundRect_Color_Uniforms;

So we need to make sure that such structs contain at least one variable of the required types.

Fix: is to introduce an extra unused variable    texture2d<float> UNUSED;   in the uniform struct of those shaders which do not already have a texture2d.

This solves the problem at cost of 4 extra bytes for each of those 22 prism shaders.;;;","2023-03-14 03:57;arapte;Changeset: 8ed68fc8
Author:    Ambarish Rapte <arapte@openjdk.org>
Date:      2023-03-14 16:12:56 +0000
URL:       https://git.openjdk.org/jfx-sandbox/commit/8ed68fc838b05fe020c891335a30a1d47b931f3c;;;",,,,,,,,,,,,,,,,,,,,,,,,,
RISC-V: TestArrayStructs.java fails after JDK-8303604,JDK-8303863,5095831,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,fjiang,fjiang,fjiang,2023-03-08 22:31,2023-03-16 00:20,2023-10-01 09:56,2023-03-10 20:49,21,,,,,,,,21,core-libs,,0,,,,,,,,,,,,,,,,,"STDOUT:
NativeTestHelper::DEFAULT_RANDOM.seed = 1551929993
Re-run with '-DNativeTestHelper.DEFAULT_RANDOM.seed=1551929993' to reproduce
test TestArrayStructs.testArrayStruct(""F1"", jdk.internal.foreign.FunctionDescriptorImpl@4c815601, 0, 1): success
test TestArrayStructs.testArrayStruct(""F2"", jdk.internal.foreign.FunctionDescriptorImpl@c5bfb79, 0, 2): success
test TestArrayStructs.testArrayStruct(""F3"", jdk.internal.foreign.FunctionDescriptorImpl@790bfb0b, 0, 3): failure
java.lang.IndexOutOfBoundsException: Out of bound access on segment MemorySegment{ array: Optional.empty address:271122530288 limit: 3 }; new offset = 0; new length = 4
        at java.base/jdk.internal.foreign.AbstractMemorySegmentImpl.outOfBoundException(AbstractMemorySegmentImpl.java:371)
        at java.base/jdk.internal.foreign.AbstractMemorySegmentImpl.apply(AbstractMemorySegmentImpl.java:357)
        at java.base/jdk.internal.foreign.AbstractMemorySegmentImpl.apply(AbstractMemorySegmentImpl.java:70)
        at java.base/jdk.internal.util.Preconditions.outOfBounds(Preconditions.java:98)
        at java.base/jdk.internal.util.Preconditions.outOfBoundsCheckIndex(Preconditions.java:124)
        at java.base/jdk.internal.util.Preconditions.checkIndex(Preconditions.java:448)
        at java.base/jdk.internal.foreign.AbstractMemorySegmentImpl.checkBounds(AbstractMemorySegmentImpl.java:346)
        at java.base/jdk.internal.foreign.AbstractMemorySegmentImpl.checkAccess(AbstractMemorySegmentImpl.java:311)
        at java.base/java.lang.invoke.VarHandleSegmentAsInts.checkAddress(VarHandleSegmentAsInts.java:81)
        at java.base/java.lang.invoke.VarHandleSegmentAsInts.get(VarHandleSegmentAsInts.java:108)
        at java.base/java.lang.foreign.MemorySegment.get(MemorySegment.java:1552)
        at java.base/jdk.internal.foreign.abi.SharedUtils.read(SharedUtils.java:471)
        at java.base/jdk.internal.foreign.abi.Binding$BufferLoad.interpret(Binding.java:651)
        at java.base/jdk.internal.foreign.abi.BindingInterpreter.unbox(BindingInterpreter.java:38)
        at java.base/jdk.internal.foreign.abi.DowncallLinker.invokeInterpBindings(DowncallLinker.java:171)
        at java.base/java.lang.invoke.MethodHandle.invokeWithArguments(MethodHandle.java:733)
        at TestArrayStructs.testArrayStruct(TestArrayStructs.java:94)
        at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
        at java.base/java.lang.reflect.Method.invoke(Method.java:578)
        at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:132)
        at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:599)
        at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:174)
        at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
        at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:822)
        at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:147)
        at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
        at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
        at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
        at org.testng.TestRunner.privateRun(TestRunner.java:764)
        at org.testng.TestRunner.run(TestRunner.java:585)
        at org.testng.SuiteRunner.runTest(SuiteRunner.java:384)
        at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:378)
        at org.testng.SuiteRunner.privateRun(SuiteRunner.java:337)
        at org.testng.SuiteRunner.run(SuiteRunner.java:286)
        at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
        at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
        at org.testng.TestNG.runSuitesSequentially(TestNG.java:1218)
        at org.testng.TestNG.runSuitesLocally(TestNG.java:1140)
        at org.testng.TestNG.runSuites(TestNG.java:1069)
        at org.testng.TestNG.run(TestNG.java:1037)
        at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:93)
        at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:53)
        at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
        at java.base/java.lang.reflect.Method.invoke(Method.java:578)
        at com.sun.javatest.regtest.agent.MainWrapper$MainThread.run(MainWrapper.java:125)
        at java.base/java.lang.Thread.run(Thread.java:1623)",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8303604,,,,,,,,,,,,,,,,riscv,,,,,,,,21,,linux,,,,,,"0|i30o3v:",9223372036854775807,b14,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@28ce6b78,,,,,,,,,"2023-03-09 06:40;jvernee;I think all you'll have to do is pass the exact copy size to bufferLoad/bufferStore in CallArranger (e.g. here https://github.com/openjdk/jdk/blob/1e9942aa112edca33f964db127df6c9ce41e86ff/src/java.base/share/classes/jdk/internal/foreign/abi/riscv64/linux/LinuxRISCV64CallArranger.java#L308)

Similar to what we do on other platforms: https://github.com/openjdk/jdk/blob/5977f266d04a7a9890665d433d0a2ab627573ca4/src/java.base/share/classes/jdk/internal/foreign/abi/x64/sysv/CallArranger.java#L266;;;","2023-03-09 06:50;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/12950
Date: 2023-03-09 14:39:55 +0000;;;","2023-03-09 06:58;fjiang;[~jvernee] Yes, passing the exact copy size to bufferLoad/BufferStore will fix the issue, I have created a pr for this: https://git.openjdk.org/jdk/pull/12950;;;","2023-03-10 20:49;dukebot;Changeset: 98a7a60f
Author:    Feilong Jiang <fjiang@openjdk.org>
Committer: Fei Yang <fyang@openjdk.org>
Date:      2023-03-11 04:48:06 +0000
URL:       https://git.openjdk.org/jdk/commit/98a7a60fcb7d1efdba60438df3c468f5320fb64c
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,
Error handling step timeouts should never be blocked by OnError and others,JDK-8303861,5095829,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,stuefe,stuefe,stuefe,2023-03-08 21:30,2023-06-11 21:41,2023-10-01 09:56,2023-03-14 08:52,11,17,21,,,,,,21,hotspot,,0,azul-interest,jdk11u-fix-request,jdk11u-fix-yes,jdk17u-fix-request,jdk17u-fix-yes,redhat-interest,,,,,,,,,,,"Fatal error handling is subject to several timeouts:
- a global timeout (controlled via ErrorLogTimeout)
- local error reporting step timeouts.

The latter aims to ""give the JVM a kick"" if it gets stuck in one particular place during error reporting. This prevents one error reporting step from hogging all the time allotted to error reporting under ErrorLogTimeout.

There are three situations where atm we suppress the global error timeout:
- if the JVM is embedded and the launcher has its abort hook installed. Obviously, that must be allowed to run.
- if the user specified one or more OnError commands to run, and these did not yet run. These must have a chance to run unmolested.
- if the user (typically developer) specified ShowMessageBoxOnError, and the error box has not yet been shown

There is a bug though, that also prevents the step timeout from firing if either condition is true. That is plain wrong.

In addition to that, the test interval WatcherThread uses to check for timeouts should be decreased. It sits at 1 second, which is too coarse-grained.

",,,,,,,,,,,JDK-8307430,JDK-8309561,JDK-8309805,JDK-8307762,JDK-8309559,,,,,,,,,,,,,,,,JDK-8302073,,,,,JDK-8302073,,,,,JDK-8307811,JDK-8303862,JDK-8166944,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i30o3f:",9223372036854775807,b14,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,,,"2023-03-08 22:22;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/12936
Date: 2023-03-09 06:12:02 +0000;;;","2023-03-14 08:52;dukebot;Changeset: a00f5d24
Author:    Thomas Stuefe <stuefe@openjdk.org>
Date:      2023-03-14 15:51:20 +0000
URL:       https://git.openjdk.org/jdk/commit/a00f5d24d3824e3ab84208401a967efe0e7bf88e
;;;","2023-03-16 20:22;apavlyutkin;The customer tested the changes over zulu11 and found they work pretty well, so I'm going to backport the changes to 17 and 11. Thank you

Update: intriguing, my backport on zulu11 works fine, but original patch and backport to 17 does not, I use 

./build/linux-x86_64-server-release/images/jdk/bin/java -XX:ErrorLogTimeout=5 -XX:OnError='sleep 1;sleep 10;sleep 60' ./C.java

and it does not break OnError script. It seems there is not active step in 17+. END() macro in 11 does nothing so _step_start_time stays non-zero, but in 17 END clears the time. Looks like we have additionally enclose onError processing with STEP/END macro;;;","2023-03-17 03:19;stuefe;[~apavlyutkin] You were expecting, in your example, the OnError script to be interrupted? If so, that should not happen. This patch did not change the desired behavior that OnError scripts should run uninterrupted. This patch just makes sure that if we hang during hs-err file writing, we will not hang forever. We may still hang outside of hs-err file writing (though that is pretty rare) and we may hang in the OnError script. The former should be fixed separately, the latter works, for now, as intended. ;;;","2023-03-21 03:03;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/1211
Date: 2023-03-21 09:53:49 +0000;;;","2023-03-22 02:53;apavlyutkin;Fix request (17u)

The patch fixes error reporting timeout processing for the case when a user specifies OnError hook. Before the patch in this case JVM just ignored timeout and therefore WatcherThread could not break malloc() deadlock in error reporting routine.

If fact original patch applied without a scratch but there is a little conflict in the baselines, so the backport is not clean.

Verification/regression (amd64/LTS20.04): test/hotspot/jtreg/runtime/ErrorHandling (includes updated test);;;","2023-05-05 03:35;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk11u-dev/pull/1856
Date: 2023-05-05 10:24:07 +0000;;;","2023-05-06 23:15;apavlyutkin;Fix request (11u)

The patch fixes error reporting timeout processing for the case when a user specifies OnError hook. Before the patch in this case JVM just ignored timeout and therefore WatcherThread could not break malloc() deadlock in error reporting routine.

The only change compared with 17 concerns on void WatcherThread::run() function that lives in thread.cpp for 11 but in nonJavaThread.cpp for 17

Verification/regression (amd64/LTS20.04): test/hotspot/jtreg/runtime/ErrorHandling (includes updated test);;;","2023-05-09 23:17;goetz;[11u]
[~apavlyutkin] are you sure you ran the test? I see compile errors in our CI tonight:
test/hotspot/jtreg/runtime/ErrorHandling/TimeoutInErrorHandlingTest.java:99: error: cannot find symbol
                ""-XX:ErrorLogTimeout="" + ERROR_LOG_TIMEOUT,
                                         ^
  symbol:   variable ERROR_LOG_TIMEOUT
  location: class TimeoutInErrorHandlingTest
1 error
result: Failed. Compilation failed: Compilation failed;;;","2023-05-12 06:14;mbaesken;Looks like 11u-dev backport misses the  ""public static final int ERROR_LOG_TIMEOUT = 16;""
from jdk17u-dev  version of TimeoutInErrorHandlingTest.java :  https://github.com/openjdk/jdk17u-dev/pull/1211/files
 
 [~apavlyutkin]  , [~phh]  please file a new issue , add the variable  or just use ""-XX:ErrorLogTimeout=16"" in the test coding .;;;","2023-05-12 06:18;mbaesken;Seems there is a fix now for 11u-dev  TimeoutInErrorHandlingTest.java : https://bugs.openjdk.org/browse/JDK-8307811;;;",,,,,,,,,,,,,,,,,,,,
Update ISO 3166 country codes table,JDK-8303853,5095810,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,jlu,jlu,jlu,2023-03-08 14:43,2023-03-16 00:20,2023-10-01 09:56,2023-03-10 09:41,,,,,,,,,21,core-libs,,0,globalization,noreg-cleanup,,,,,,,,,,,,,,,"LocaleISOData contains the following table, isoCountryTable which consists of the 2-letter and 3-letter ISO 3166 country codes.

In order to proactively manage this table, it should be updated with the most up-to-date ISO 3166 data.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i30nzf:",9223372036854775807,b14,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@7644fb4c,,,,,,,,,"2023-03-09 09:59;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/12954
Date: 2023-03-09 17:50:32 +0000;;;","2023-03-10 09:41;dukebot;Changeset: a3358b10
Author:    Justin Lu <jlu@openjdk.org>
Committer: Naoto Sato <naoto@openjdk.org>
Date:      2023-03-10 17:39:13 +0000
URL:       https://git.openjdk.org/jdk/commit/a3358b10cab44a97404aee8c1d07d580930fd199
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Update the JNI spec GetVersion function to reflect the change to JNI_VERSION_20,JDK-8303841,5095795,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,dholmes,dholmes,dholmes,2023-03-08 12:59,2023-03-16 00:15,2023-10-01 09:56,2023-03-08 16:49,20,,,,,,,,21,hotspot,,0,jdk20u-fix-request,jdk20u-fix-yes,noreg-doc,,,,,,,,,,,,,,"JDK-8290482 made changes to the JNI Invocation API and bumped the JNI version to 20, but overlooked updating the information for the GetVersion function.",,,,,,,,,,,JDK-8304086,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8290482,,,,,,,,,,,,,,,,,,,,,,,,,,,,,20,,,,,,,,"0|i30nw3:",9223372036854775807,b14,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,,,"2023-03-08 21:41;dholmes;JDK 20u - Fix Request

This is a simple update to the JNI Specification that should have gone into JDK 20, but missed the cutoffs. It should at least go into the (closed) jdk20u repository, even if we don't generate the online version of the spec from it. Thanks.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
TestSegmentCopy times out,JDK-8303831,5095784,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,jvernee,jvernee,jvernee,2023-03-08 11:01,2023-04-14 06:31,2023-10-01 09:56,2023-04-14 06:31,repo-panama,,,,,,,,,core-libs,,0,foreign-memaccess+abi,,,,,,,,,,,,,,,,"java/foreign/TestSegmentCopy.java is timing out on WSL/Linux and the zero VM configuration. Failing reliably on the former, and intermittently on the latter.

The test runs in just a few seconds on other platforms, but on the failing platforms the tests seems to complete, but then jtreg hangs when waiting for the MainWrapper thread to join.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i30ntn:",9223372036854775807,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@28ce6b78,,,,,,,,,"2023-04-11 10:52;jvernee;After some investigation, it turns out that the test itself finishes in a reasonable amount of time, but jtreg/testNG take an incredibly long time to generate the XML test report. This is likely to do with the fact that the test generates 165890 different test cases, that all have to be parsed.

At the moment it is not clear to me why this is much faster on other platforms. There might be a bad interaction with file IO or the GC.;;;","2023-04-13 09:29;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/panama-foreign/pull/827
Date: 2023-04-13 16:23:37 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
[Solaris] Broken jdk8u build after JDK-8266391,JDK-8303828,5095779,Bug,Resolved,JDK,JDK,software,duke,,,P2,Fixed,afarley,afarley,afarley,2023-03-08 09:02,2023-03-28 11:26,2023-10-01 09:56,2023-03-09 09:17,,,,,,,,,openjdk8u372,core-svc,,0,jdk8u-critical-request,jdk8u-critical-yes,,,,,,,,,,,,,,,"OpenJDK8u doesn't have a copy of SystemMetrics (which the code references in Metrics.java) on Solaris, so the build fails with this error:

12:19:21  Compiling 9787 files for BUILD_JDK
12:20:01  /export/home/jenkins/sshagent/workspace/build-scripts/jobs/jdk8u/jdk8u-solaris-x64-temurin/workspace/build/src/jdk/src/share/classes/jdk/internal/platform/Metrics.java:57: error: cannot find symbol
12:20:01          return SystemMetrics.instance();
12:20:01                 ^
12:20:01    symbol:   variable SystemMetrics
12:20:01    location: interface Metrics

To resolve this issue, I suggest that we follow the approach taken in JDK-8303408.

I've already created the fix and tested it on Adoptium sparc and x64 solaris machines, so we know this fixes the issue. When it's the *right* fix is a bigger question. 

Thoughts welcome. :)",,,,,,,,,,,JDK-8305101,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8266391,JDK-8304053,JDK-8303408,,,,,,,,,,,,,,,,,,,sparc,x86_64,,,,,,,,,solaris,,,,,,"0|i30nsj:",9223372036854775807,b06,,,,,,,,,,,"2023-03-08 09:50;afarley;Fix Request [8u]
This change is a small addition to the JDK that enables builds to be completed on Solaris. The change has been tested on x64 and sparc, and appears to resolve the problem just like JDK-8303408 did for AIX.
https://github.com/openjdk/jdk8u-dev/pull/280;;;","2023-03-08 09:53;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk8u-dev/pull/280
Date: 2023-03-08 17:47:41 +0000;;;","2023-03-09 05:34;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk8u/pull/37
Date: 2023-03-09 12:32:11 +0000;;;","2023-03-09 08:55;sgehwolf;Build break on Solaris, qualifies as a critical fix to get included during rampdown. Approved for 8u372.;;;","2023-03-09 09:17;dukebot;Changeset: ebbd3a87
Author:    Adam Farley <afarley@openjdk.org>
Committer: Andrew John Hughes <andrew@openjdk.org>
Date:      2023-03-09 17:15:22 +0000
URL:       https://git.openjdk.org/jdk8u/commit/ebbd3a87b0c473a744499d5f7691e5207cd73186
;;;","2023-03-09 10:09;andrew;Do we know why this isn't an issue on 11u?  Solaris & SPARC support weren't removed until JDK 15: https://openjdk.org/projects/jdk/15/

My guess would be because there is an implementation of SystemMetrics.java in src/unix in 11u which matches that introduced by this change in 8u for Solaris and by JDK-8303408 in 8u for AIX. That same unix file was introduced into 8u by 8266391, but that change also introduced a null implementation for MacOS, which suggests to me that the unix copy is not being used in 8u, hence these follow-on bugs.;;;","2023-03-10 01:21;sgehwolf;I haven't dug into the details. Your guess is probably right. Pretty sure the build system change that landed in later JDKs make them immune to those kinds of issues.;;;","2023-03-14 08:03;sgehwolf;This caused a build break on the ramp down repo. Tracked with JDK-8304143.;;;","2023-03-14 08:06;afarley;Apologies for any inconvenience caused. We live and learn.;;;",,,,,,,,,,,,,,,,,,,,,,
[Lilliput] (AArch64) Use tbz instead of tst and br in load_klass(),JDK-8303813,5095764,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,rkennke,rkennke,rkennke,2023-03-08 01:40,2023-03-09 09:14,2023-10-01 09:56,2023-03-09 09:14,repo-lilliput,,,,,,,,repo-lilliput,hotspot,,0,lilliput,,,,,,,,,,,,,,,,"In the implementation of load_klass(), we have a test-and-branch idiom:

tst(dst, markWord::monitor_value);
br(Assembler::EQ, fast);

We can make this better:

tbz(dst, exact_log2(markWord::monitor_value), fast);

This is not only smaller and perhaps a little faster, it also has the advantage that it doesn't touch the condition flags. This is relevant in at least one place: in verify_oop() the condition flag is alive across the load_klass() call and one jtreg test (runtime/CheckUnhandledOops/TestVerifyOops.java) is failing because of that.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,aarch64,,,,,,,,,,generic,,,,,,"0|i30np7:",9223372036854775807,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,,,"2023-03-08 01:51;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/lilliput/pull/78
Date: 2023-03-08 09:43:02 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Dispose context in SPNEGO NegotiatorImpl,JDK-8303809,5095758,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,abakhtin,abakhtin,abakhtin,2023-03-08 00:17,2023-05-31 15:41,2023-10-01 09:56,2023-03-14 09:43,,,,,,,,,21,security-libs,,0,jdk11u-fix-request,jdk11u-fix-yes,jdk17u-fix-request,jdk17u-fix-yes,noreg-hard,,,,,,,,,,,,"SPNEGO NegotiatorImpl allocates GSSContext but does not dispose it.
There may be a memory leak in case of a custom native provider.
The leak was reported in production but it is hard to reproduce in a regression test.
The code is dated by 2009, so it is not a regression.",,,,,,,,,,,JDK-8308972,JDK-8309244,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i30nnv:",9223372036854775807,b14,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@5ce3d383,,,,,,,,,"2023-03-08 01:12;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/12920
Date: 2023-03-08 09:05:19 +0000;;;","2023-03-14 07:02;dfuchs;noreg-hard: minimal test coverage: sun/security/jgss, sun/security/krb5, sun/net/www/protocol/http;;;","2023-03-14 09:43;dukebot;Changeset: 10f16746
Author:    Alexey Bakhtin <abakhtin@openjdk.org>
Date:      2023-03-14 16:41:09 +0000
URL:       https://git.openjdk.org/jdk/commit/10f16746254ce62031f40ffb0f49f22e81cbe631
;;;","2023-03-15 10:09;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/1203
Date: 2023-03-15 16:35:23 +0000;;;","2023-04-17 23:52;abakhtin;Fix request (17u)

I'd like to backport this enhancement to fix issues in the custom native Kerberos provider
Backport is clean.

sun/security/jgss sun/security/krb5 sun/net/www/protocol/http tests passed successfully;;;","2023-05-26 11:45;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk11u-dev/pull/1906
Date: 2023-05-26 18:38:57 +0000;;;","2023-05-30 16:23;abakhtin;Fix request (11u)

I'd like to backport this enhancement to fix issues in the custom native Kerberos provider
Clean backport from JDK-17u

sun/security/jgss sun/security/krb5 sun/net/www/protocol/http tests passed successfully;;;",,,,,,,,,,,,,,,,,,,,,,,,
Fix some errors of If-VectorTest and CMove-VectorTest,JDK-8303804,5095752,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,wanghaomin,wanghaomin,wanghaomin,2023-03-07 19:43,2023-03-28 01:31,2023-10-01 09:56,2023-03-22 00:37,21,,,,,,,,21,hotspot,,0,c2,oracle-triage-11,oracle-triage-17,oracle-triage-21,vectorapi,,,,,,,,,,,,"After https://bugs.openjdk.org/browse/JDK-8292289 ,  the base class of VectorTestNode changed from Node to CmpNode. So I add two match rule into ad file.

match(If cop (VectorTest op1 op2));
match(Set dst (CMoveI (Binary cop (VectorTest op1 op2)) (Binary src1 src2)));

First error, rule1 shouldn't generate the statement ""node->_bottom_type = _leaf->bottom_type();"".
Second error, both rule1 and rule2 need to use VectorTestNode, the VectorTestNode should be cloned like CmpNode.
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8292289,,,,,,,,,,,,,,,,generic,,,,,,,,,,generic,,,,,,"0|i30nmj:",9223372036854775807,b15,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2023-03-07 19:58;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/12917
Date: 2023-03-08 03:52:33 +0000;;;","2023-03-08 02:04;thartmann;[~wanghaomin] Why is this in client-libs? Moving to hotspot/compiler.;;;","2023-03-08 02:13;thartmann;Tentative ILW = Failures during C2 compilation, not an issue with current code?, no workaround but disable compilation of affected method = MLM = P4;;;","2023-03-22 00:37;dukebot;Changeset: c039d266
Author:    Wang Haomin <wanghaomin@openjdk.org>
Committer: Tobias Hartmann <thartmann@openjdk.org>
Date:      2023-03-22 07:36:11 +0000
URL:       https://git.openjdk.org/jdk/commit/c039d26603e85ae37b0a53430a47f5751bf911af
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,
no-@Target annotations should be applicable to type parameter declarations,JDK-8303784,5095728,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,cushon,cushon,cushon,2023-03-07 15:43,2023-05-08 13:11,2023-10-01 09:56,2023-05-02 11:21,,,,,,,,,21,tools,,0,release-note=yes,type-annotations,,,,,,,,,,,,,,,"This was reported on: https://stackoverflow.com/q/75667924/4297386

After the changes in https://bugs.openjdk.org/browse/JDK-8261610, JLS 9.6.4.1 reads:

> If an annotation of type java.lang.annotation.Target is not present on the declaration of an annotation interface A, then A is applicable in all declaration contexts and in no type contexts.

'all declaration contexts' includes type parameter declarations.

javac still incorrectly rejects @Target-less annotations on type parameter declarations:

```
import java.lang.annotation.Retention;
import java.lang.annotation.RetentionPolicy;

@Retention(RetentionPolicy.RUNTIME)
@interface A {}

class B<@A C> {}
```

$ javac -fullversion
javac full version ""20-ea+35-2342""
$ javac B.java
B.java:7: error: annotation @A not applicable in this type context
class B<@A C> {}
        ^
1 error",,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8304169,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i30nh7:",9223372036854775807,b21,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4dca67bd,,,,,,,,,"2023-03-07 16:14;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/12914
Date: 2023-03-08 00:06:41 +0000;;;","2023-05-02 11:21;dukebot;Changeset: 8c106b0c
Author:    Liam Miller-Cushon <cushon@openjdk.org>
Date:      2023-05-02 18:19:03 +0000
URL:       https://git.openjdk.org/jdk/commit/8c106b0c8e4562a44ecd1e069c0911acfc428ecf
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
[Lilliput/JDK17] Fix interpreter asymmetric fast-locking,JDK-8303771,5095708,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,rkennke,rkennke,rkennke,2023-03-07 12:42,2023-03-10 09:09,2023-10-01 09:56,2023-03-10 09:09,repo-lilliput,,,,,,,,,hotspot,,0,lilliput,,,,,,,,,,,,,,,,"Backport of JDK-8303769.

Currently we get the asymmetric locking check in the interpreters wrong:

ldr(header_reg, Address(rthread, JavaThread::lock_stack_current_offset()));
cmpoop(header_reg, obj_reg);
br(Assembler::NE, slow_case);

The intention is to load the top of the lock-stack, and compare it to the unlocked object, and, if not equal, branch to the slow-path to handle it. However, what it really does is, it loads the *address* of the top of lock-stack, and compares that to the unlocked object. This can never succeed, and therefore we always call the slow-path. Additionally, the address is not the address of the topmost object, it is the address of the next free slot. What we really want to load is the element at -1 oop from that address. This is not incorrect, but it's unnecessarily slow.",,,,,,,,,,JDK-8303769,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,aarch64,x86,x86_64,,,,,,,,generic,,,,,,"0|i30ncr:",9223372036854775807,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,,,"2023-03-08 00:19;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/lilliput-jdk17u/pull/9
Date: 2023-03-07 20:49:27 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
[Lilliput] Fix interpreter asymmetric fast-locking ,JDK-8303769,5095706,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,rkennke,rkennke,rkennke,2023-03-07 12:09,2023-03-09 10:46,2023-10-01 09:56,2023-03-09 10:46,repo-lilliput,,,,,,,,repo-lilliput,hotspot,,0,lilliput,,,,,,,,,,,,,,,,"Currently we get the asymmetric locking check in the interpreters wrong:

ldr(header_reg, Address(rthread, JavaThread::lock_stack_current_offset()));
cmpoop(header_reg, obj_reg);
br(Assembler::NE, slow_case);

The intention is to load the top of the lock-stack, and compare it to the unlocked object, and, if not equal, branch to the slow-path to handle it. However, what it really does is, it loads the *address* of the top of lock-stack, and compares that to the unlocked object. This can never succeed, and therefore we always call the slow-path. Additionally, the address is not the address of the topmost object, it is the address of the next free slot. What we really want to load is the element at -1 oop from that address. This is not incorrect, but it's unnecessarily slow.",,,,,,,,,,,JDK-8303771,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,aarch64,x86,x86_64,,,,,,,,generic,,,,,,"0|i30ncb:",9223372036854775807,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,,,"2023-03-08 00:19;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/lilliput/pull/76
Date: 2023-03-07 20:38:28 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Visual Studio should use the primary variant in the IDE,JDK-8303760,5095697,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,jwaters,jwaters,jwaters,2023-03-07 08:41,2023-03-16 00:17,2023-10-01 09:56,2023-03-09 08:08,,,,,,,,,21,infrastructure,,0,,,,,,,,,,,,,,,,,Currently support for Visual Studio development always assumes server as the variant to use. More accurately this should instead be set to the primary variant instead,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i30nab:",9223372036854775807,b14,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@429c566,,,,,,,,,"2023-03-07 08:51;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/12906
Date: 2023-03-07 16:42:55 +0000;;;","2023-03-09 08:08;dukebot;Changeset: 3227b49a
Author:    Julian Waters <jwaters@openjdk.org>
Date:      2023-03-09 16:07:16 +0000
URL:       https://git.openjdk.org/jdk/commit/3227b49a7ab5c7a71b5c0a87f3a6984d4b528589
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
WebKit build fails with Visual Studio 2022 17.5.0,JDK-8303748,5095684,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,hmeda,kcr,kcr,2023-03-07 05:20,2023-09-01 06:30,2023-10-01 09:56,2023-06-01 10:44,8,jfx11,jfx17,jfx21,,,,,jfx21,javafx,,0,sn_144,sn_145,vs2022,,,,,,,,,,,,,,"Building JavaFX WebKit using VS2022 17.5.0 fails with the following error:

modules\javafx.web\src\main\native\Source\WebCore\testing\ServiceWorkerInternals.cpp(88): error C2327: 'WebCore::ServiceWorkerInternals::m_pushEventPromises': is not a type name, static, or enumerator

We will need to fix this for JavaFX 21 since we will likely need to update our compilers during this release.",,,,,,,,,,,JDK-8315543,JDK-8309653,JDK-8309316,JDK-8309655,,,,,,,,,,,,JDK-8308308,,,,,JDK-8306887,,,,,JDK-8307548,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,windows,,,,,,"0|i30n7f:",9223372036854775807,b21,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@5a8b92bd,,,,,,,,,"2023-03-12 21:49;hmeda;On changing the c++ version to 20 , the above failure is not observed. 
Verified build on local windows machine as well as Jenkins.
Investigating on how to resolve using c++17, as we are using C++17 in our current webkit
;;;","2023-05-23 07:05;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jfx/pull/1142
Date: 2023-05-20 14:58:40 +0000;;;","2023-06-01 10:44;dukebot;Changeset: 8fc1a256
Author:    Kevin Rushforth <kcr@openjdk.org>
Date:      2023-06-01 17:43:33 +0000
URL:       https://git.openjdk.org/jfx/commit/8fc1a256a90fa02bbf775317de3158c81e7b950d
;;;","2023-09-01 06:08;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jfx17u/pull/139
Date: 2023-09-01 13:03:03 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,
CompletableFuture.orTimeout leaks if the future completes exceptionally,JDK-8303742,5095630,Bug,Closed,JDK,JDK,software,duke,,,P4,Fixed,vklang,webbuggrp,webbuggrp,2023-03-06 15:34,2023-07-21 07:36,2023-10-01 09:56,2023-03-20 06:58,18,,,,,,,,21,core-libs,,0,additional-information-received,dcsaw,reproducer-yes,webbug,,,,,,,,,,,,,"ADDITIONAL SYSTEM INFORMATION :
This issue appears to be in all versions of CompletableFuture

A DESCRIPTION OF THE PROBLEM :
CompletableFuture.orTimeout schedules a delayed task which is used to exceptionally complete the future with a TimeoutException if it has not otherwise completed before the timeout expires. If the future completes before the timeout the delayed task is canceled and removed from the delayed executors queue. The bug is that this only occurs if the future was completed non-exceptionally, when completed exceptionally the delayed task is not cancelled and its memory is thus retained until the timeout even though it will no longer serve any purpose. Given that timeouts should be significantly longer than expected completion times this leak could be non-negligible if exceptional completions occur frequently.

The issue is in CompletableFuture.Canceller.accept, which has the following check:

            if (ex == null && f != null && !f.isDone())
                f.cancel(false);

The ""ex==null"" appears to be a premature optimization and is the cause of the leak.

STEPS TO FOLLOW TO REPRODUCE THE PROBLEM :
Create timeout based CompletableFutures in a loop and complete them exceptionally.

EXPECTED VERSUS ACTUAL BEHAVIOR :
EXPECTED -
Should run forever with periodic GC but no OOME.

---------- BEGIN SOURCE ----------
    while (true) {
      new CompletableFuture<>().orTimeout(1, TimeUnit.HOURS).completeExceptionally(new Exception());
    }
---------- END SOURCE ----------

CUSTOMER SUBMITTED WORKAROUND :
don't use orTimeout :(

FREQUENCY : always


",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8304557,,,,"2023-03-07 03:58;tongwan;Main.java;https://bugs.openjdk.org/secure/attachment/102909/Main.java",,,,,,,,,,,,generic,,,,,,,,,,generic,,,,,,"0|i30mvf:",9223372036854775807,b15,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@239b1eeb,,,,,,,Verified,,"2023-03-07 03:59;tongwan;By using System.gc(), the problem will be resolved.;;;","2023-03-13 22:23;pnarayanaswa;Additional Information from submitter
=============================
I'd contended that System.gc() will not resolve the problem. The ""leaked"" tasks are not yet garbage, they are sitting in a delayed queue needlessly awaiting their timeout to expire so they can ""do nothing"".  To put it another way if running the garbage collector was a solution, then the issue wouldn't happen in the first place and the GC would be able to clean these out, but the issue is that they cannot become garbage.;;;","2023-03-16 07:01;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/13059
Date: 2023-03-16 13:37:10 +0000;;;","2023-03-20 06:58;dukebot;Changeset: ded6a813
Author:    Viktor Klang <viktor.klang@oracle.com>
Committer: Jaikiran Pai <jpai@openjdk.org>
Date:      2023-03-20 13:55:47 +0000
URL:       https://git.openjdk.org/jdk/commit/ded6a8131970ac2f7ae59716769e6f6bae3b809a
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,
"JavaFX - Leak in Logging, Logging remembers last exception",JDK-8303740,5095677,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,fkirmaier,fkirmaier,fkirmaier,2023-03-07 03:35,2023-04-17 17:44,2023-10-01 09:56,2023-04-10 05:50,jfx21,,,,,,,,jfx21,javafx,,0,,,,,,,,,,,,,,,,,"When an exception is logged in JavaFX, then the exception is kept in a reference.
This way, always the last logged exception is retained.

This is a memory-leak.
This was done to write unit-tests to ensure certain error-cases are logged.

Simple fix is, to add a flag, to enable/disable retaining the exception.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i30n5v:",9223372036854775807,b13,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@233f6319,,,,,,,,,"2023-03-07 04:06;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jfx/pull/1053
Date: 2023-03-07 11:59:20 +0000;;;","2023-04-10 05:50;dukebot;Changeset: 18e40216
Author:    Florian Kirmaier <fkirmaier@openjdk.org>
Committer: Kevin Rushforth <kcr@openjdk.org>
Date:      2023-04-10 12:48:23 +0000
URL:       https://git.openjdk.org/jfx/commit/18e4021651c9e0db21f6817ed2c01ba4ca73781c
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
C2: Load can bypass subtype check that enforces it's from the right object type,JDK-8303737,5095673,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,roland,roland,roland,2023-03-07 02:25,2023-09-27 18:20,2023-10-01 09:56,2023-09-25 23:57,11,17,20,21,22,,,,22,hotspot,,0,amazon-interest,c2,javafuzzer,oracle-triage-21,,,,,,,,,,,,,"With attached test case run with:

java -XX:-BackgroundCompilation -XX:-UseOnStackReplacement -XX:-TieredCompilation -XX:CompileOnly=TestAddPChainMismatchedBase::test -XX:LoopMaxUnroll=2 -XX:+UseParallelGC -XX:+StressIGVN -XX:-UseLoopPredicate -XX:-UseProfiledLoopPredicate  -XX:StressSeed=2062976637 TestAddPChainMismatchedBase

I get:

 Internal Error (/home/roland/jdk-jdk/src/hotspot/share/opto/compile.cpp:3267), pid=2783357, tid=2783366
 assert(!addp->is_AddP() || addp->in(AddPNode::Base)>is_top() || addp>in(AddPNode::Base) == n->in(AddPNode::Base)) failed: Base pointers must match (addp 682)",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8139771,,,,,JDK-8297933,,,,"2023-03-07 02:22;roland;TestAddPChainMismatchedBase.java;https://bugs.openjdk.org/secure/attachment/102908/TestAddPChainMismatchedBase.java",,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i30n4z:",9223372036854775807,b17,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2023-03-07 02:28;roland;I haven't tried older releases but AFAICT this happens because of JDK-8139771 so all releases since are affected.;;;","2023-03-07 08:53;thartmann;This only reproduces since JDK-8297933 in JDK 21.;;;","2023-03-07 08:56;thartmann;ILW = Assert during C2 compilation, reproducible with targeted test and non-default arguments, disable compilation of affected method = HLM = P3;;;","2023-09-06 08:03;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/15595
Date: 2023-09-06 14:55:01 +0000;;;","2023-09-25 23:57;dukebot;Changeset: 52983ed5
Author:    Roland Westrelin <roland@openjdk.org>
Date:      2023-09-26 06:55:01 +0000
URL:       https://git.openjdk.org/jdk/commit/52983ed529182901db4e33857bfeab2727e235df
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,
Field sleeper.started should be volatile JdbLockTestTarg.java ,JDK-8303705,5095634,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,lmesnik,lmesnik,lmesnik,2023-03-06 19:14,2023-03-20 18:07,2023-10-01 09:56,2023-03-14 14:54,21,,,,,,,,21,core-svc,,0,noreg-self,,,,,,,,,,,,,,,,"Field sleeper.started in JdbLockTestTarg.java 
is updated and read in different threads.
Should be volatile.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i30mwb:",9223372036854775807,b14,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@3397f701,,,,,,,,,"2023-03-13 20:55;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/13010
Date: 2023-03-14 03:23:05 +0000;;;","2023-03-14 14:54;dukebot;Changeset: cd41c69d
Author:    Leonid Mesnik <lmesnik@openjdk.org>
Date:      2023-03-14 21:52:34 +0000
URL:       https://git.openjdk.org/jdk/commit/cd41c69d4484f900a89a71f1c9bab2bc2e383c1e
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Add support of execution tests using virtual thread factory jtreg plugin,JDK-8303703,5095631,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,lmesnik,lmesnik,lmesnik,2023-03-06 15:53,2023-04-26 23:15,2023-10-01 09:56,2023-04-21 06:34,21,,,,,,,,21,hotspot,,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i30mvn:",9223372036854775807,b20,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@78d03d9a,,,,,,,,,"2023-04-17 18:14;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/13432
Date: 2023-04-11 18:17:06 +0000;;;","2023-04-21 06:34;dukebot;Changeset: be6031b8
Author:    Leonid Mesnik <lmesnik@openjdk.org>
Date:      2023-04-21 13:31:45 +0000
URL:       https://git.openjdk.org/jdk/commit/be6031b87d6e0f088a79fdd1697982bb15a7145d
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
ProcessTools doesn't print last line of process output,JDK-8303697,5095624,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,lmesnik,lmesnik,lmesnik,2023-03-06 14:41,2023-03-23 00:32,2023-10-01 09:56,2023-03-17 06:47,21,,,,,,,,21,hotspot,,0,,,,,,,,,,,,,,,,,"See following example:

import jdk.test.lib.process.ProcessTools;

public class Main {


    public static void main(String[] args) throws Exception {
        if (args.length > 0) {
            System.out.print(args[0]);
            return;
        }
        // Needed to set property if run without using jtreg.
        System.setProperty(""test.jdk"", ""/Users/lmesnik/tools/jdk-19/macosx-x64"");
        Process p1 = ProcessTools.startProcess(""process"",ProcessTools.createJavaProcessBuilder(Main.class.getName(), ""ARG1""));
        p1.waitFor();

        System.out.println("">>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>"");

        Process p2 = ProcessTools.startProcess(""process"",ProcessTools.createJavaProcessBuilder(Main.class.getName(), ""ARG2\n""));
        p2.waitFor();

        System.out.println("">>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>"");

        Process p3 = ProcessTools.startProcess(""process"",ProcessTools.createJavaProcessBuilder(Main.class.getName(), ""ARG3\nARG3.1""));
        p3.waitFor();
    }
}

The output doesn't contain last line:
Command line: [/Users/lmesnik/tools/jdk-19/macosx-x64/bin/java -cp /Users/lmesnik/IdeaProjects/tests/out/production/tests Main ARG1 ]
[process]:/Users/lmesnik/tools/jdk-19/macosx-x64/bin/java -cp /Users/lmesnik/IdeaProjects/tests/out/production/tests Main ARG1
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Command line: [/Users/lmesnik/tools/jdk-19/macosx-x64/bin/java -cp /Users/lmesnik/IdeaProjects/tests/out/production/tests Main ARG2
 ]
[process]:/Users/lmesnik/tools/jdk-19/macosx-x64/bin/java -cp /Users/lmesnik/IdeaProjects/tests/out/production/tests Main ARG2

[process] ARG2
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Command line: [/Users/lmesnik/tools/jdk-19/macosx-x64/bin/java -cp /Users/lmesnik/IdeaProjects/tests/out/production/tests Main ARG3
ARG3.1 ]
[process]:/Users/lmesnik/tools/jdk-19/macosx-x64/bin/java -cp /Users/lmesnik/IdeaProjects/tests/out/production/tests Main ARG3
ARG3.1
[process] ARG3

Process finished with exit code 0",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i30mu3:",9223372036854775807,b15,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@78d03d9a,,,,,,,,,"2023-03-14 23:05;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/13034
Date: 2023-03-15 05:41:33 +0000;;;","2023-03-17 06:47;dukebot;Changeset: 8d2ebf24
Author:    Leonid Mesnik <lmesnik@openjdk.org>
Date:      2023-03-17 13:45:41 +0000
URL:       https://git.openjdk.org/jdk/commit/8d2ebf248e2884fbf138b603ae82f81bd0926cf3
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Fedora based devkit build should load more packages from archive location,JDK-8303691,5095616,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,clanger,clanger,clanger,2023-03-06 12:24,2023-03-16 00:18,2023-10-01 09:56,2023-03-09 14:01,21,,,,,,,,21,infrastructure,,0,,,,,,,,,,,,,,,,,"When building Fedora based Linux devkits, rpm packages are downloaded from locations at the Fedora project. The latest/active versions reside under https://dl.fedoraproject.org while older, archived versions live at https://archives.fedoraproject.org.

It seems more releases have been archived in the meanwhile, so e.g. a build based on Fedora 27, which is currently marked as default, would fail.

The make file has to be adapted to cater for the newer releases.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i30msb:",9223372036854775807,b14,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@429c566,,,,,,,,,"2023-03-06 12:35;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/12888
Date: 2023-03-06 20:28:22 +0000;;;","2023-03-09 14:01;dukebot;Changeset: 562c8fc6
Author:    Christoph Langer <clanger@openjdk.org>
Date:      2023-03-09 21:59:12 +0000
URL:       https://git.openjdk.org/jdk/commit/562c8fc668e3bfb8cfdf2ea8f60c618a787e7345
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Simplify HttpClient DebugLogger,JDK-8303682,5095604,Bug,Closed,JDK,JDK,software,duke,,,P4,Fixed,dfuchs,dfuchs,dfuchs,2023-03-06 09:33,2023-08-04 12:49,2023-10-01 09:56,2023-03-08 05:55,21,,,,,,,,21,core-libs,,0,httpclient,,,,,,,,,,,,,,,,"The HttpClient internal DebugLogger could be simplified if its configuration was held in a record. Some of the methods in Utils that return a debug logger could also be simplified/removed. The system property that configures the debug logging could be extended to choose between System.err, System.out, System.Logger, or any of these configurations.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8238292,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i30mpn:",9223372036854775807,b13,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@446e124a,,,,,,,Verified,,"2023-03-07 02:24;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/12900
Date: 2023-03-07 10:16:24 +0000;;;","2023-03-08 05:55;dukebot;Changeset: 56512cfe
Author:    Daniel Fuchs <dfuchs@openjdk.org>
Date:      2023-03-08 13:52:52 +0000
URL:       https://git.openjdk.org/jdk/commit/56512cfe1f0682c98ba3488af3d03ccef632c016
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
JFR: RemoteRecordingStream::setMaxAge() should accept null,JDK-8303681,5095603,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,egahlin,egahlin,egahlin,2023-03-06 08:50,2023-03-13 10:43,2023-10-01 09:56,2023-03-07 14:34,17,,,,,,,,21,hotspot,,0,,,,,,,,,,,,,,,,,Javadoc specifies that null is valid parameter (no maxAge set) and this is also what the recording class uses. ,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i30mpf:",9223372036854775807,b13,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@42995637,,,,,,,,,"2023-03-06 11:20;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/12886
Date: 2023-03-06 19:02:12 +0000;;;","2023-03-07 14:34;dukebot;Changeset: 32f4d8b5
Author:    Erik Gahlin <egahlin@openjdk.org>
Date:      2023-03-07 22:32:45 +0000
URL:       https://git.openjdk.org/jdk/commit/32f4d8b5eaf8c5fa5da745bc1348f513e2ffe3d3
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Virtual Flow freezes after calling scrollTo and scrollPixels in succession,JDK-8303680,5095602,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,fkirmaier,fkirmaier,fkirmaier,2023-03-06 07:41,2023-09-06 01:35,2023-10-01 09:56,2023-03-16 11:36,jfx21,,,,,,,,jfx21,javafx,,0,,,,,,,,,,,,,,,,,"When calling scrollTo and scrollPixels in succession, the Virtual Flow ""freezes"".
It no longer scrolls the content, but the scrollbar moves.",,,,,,,,,,,JDK-8315756,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"2023-03-07 01:55;fkirmaier;JumpTest.java;https://bugs.openjdk.org/secure/attachment/102907/JumpTest.java","2023-03-06 07:41;fkirmaier;virtual-flow-crash.mov;https://bugs.openjdk.org/secure/attachment/102900/virtual-flow-crash.mov",,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i30mp7:",9223372036854775807,b10,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@67282485,,,,,,,,,"2023-03-06 08:12;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jfx/pull/1052
Date: 2023-03-06 16:04:02 +0000;;;","2023-03-06 08:28;angorya;[~fkirmaier]: attached HelloJPro.java does not illustrate the issue (it's missing the ""Jump"" button and associated code).;;;","2023-03-16 11:36;dukebot;Changeset: 6be8703c
Author:    Florian Kirmaier <fkirmaier@openjdk.org>
Committer: Andy Goryachev <angorya@openjdk.org>
Date:      2023-03-16 18:34:33 +0000
URL:       https://git.openjdk.org/jfx/commit/6be8703ca9e6dccdda8b75b63efbcea5c6728d6f
;;;","2023-09-06 00:50;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jfx17u/pull/155
Date: 2023-09-06 07:45:58 +0000;;;","2023-09-06 01:23;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jfx17u/pull/156
Date: 2023-09-06 08:16:46 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,,,
JFR: TypeLibrary class not thread safe,JDK-8303674,5095596,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,egahlin,egahlin,egahlin,2023-03-06 06:30,2023-05-10 01:33,2023-10-01 09:56,2023-03-10 09:11,11,17,21,,,,,,21,hotspot,,0,,,,,,,,,,,,,,,,,"The TypeLibrary class is not properly protected from concurrent access. This can happen when creating dynamic events. A typical exception can look like this:

Exception in thread ""main"" java.lang.ExceptionInInitializerError
  at jdk.jfr/jdk.jfr.EventFactory.create(EventFactory.java:169)
...
Caused by: java.lang.ArrayIndexOutOfBoundsException\cf2 : Index 233 out of bounds for length 233
  at java.base/java.util.LinkedHashMap.valuesToArray(LinkedHashMap.java:555)
  at java.base/java.util.LinkedHashMap$LinkedValues.toArray(LinkedHashMap.java:635)
  at java.base/java.util.ArrayList.<init>(ArrayList.java:181)
  at jdk.jfr/jdk.jfr.internal.TypeLibrary.getTypes(TypeLibrary.java:122)
  at jdk.jfr/jdk.jfr.internal.MetadataRepository.initializeJVMEventTypes(MetadataRepository.java:74)
  at jdk.jfr/jdk.jfr.internal.MetadataRepository.<init>(MetadataRepository.java:69)
  at jdk.jfr/jdk.jfr.internal.MetadataRepository.<clinit>(MetadataRepository.java:56)

Normally all access to metadata requires the ""metadata lock"", but there are some exceptions. Problem is that the TypeLibrary can't depend on MetadataRepository class without a recursion. Some of this dealt with by using the TypeLibrary class lock, but not in all places.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8307298,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i30mnv:",9223372036854775807,b14,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@42995637,,,,,,,,,"2023-03-06 13:16;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/12884
Date: 2023-03-06 18:45:59 +0000;;;","2023-03-10 09:11;dukebot;Changeset: 9dd7b879
Author:    Erik Gahlin <egahlin@openjdk.org>
Date:      2023-03-10 17:09:56 +0000
URL:       https://git.openjdk.org/jdk/commit/9dd7b8799700e938688a28c8a2c14826eee96f5c
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
SelectVersion indexes past the end of the argv array,JDK-8303669,5095526,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,asotona,webbuggrp,webbuggrp,2023-03-03 19:00,2023-05-24 23:10,2023-10-01 09:56,2023-05-19 01:11,17,,,,,,,,21,tools,,0,dcsad,reproducer-yes,webbug,,,,,,,,,,,,,,"A DESCRIPTION OF THE PROBLEM :
libjli/java.c's SelectVersion method receives argc and argv but ignores argc in some circumstances an instead checks if *argv == 0 in its while loop, which results in a segmentation fault if the provided array is not NULL terminated.

STEPS TO FOLLOW TO REPRODUCE THE PROBLEM :
I've reproduced the issue using the appbundler launcher https://github.com/TheInfiniteKind/appbundler which calls the JLI_Launch function directly and passes in a valid argc and argv, however the argv array is exactly the right length and not null terminated. Providing an odd-numbered number of options (ie. -something) triggers the crash.


FREQUENCY : always


",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,generic,,,,,,,,,,generic,,,,,,"0|i30m8b:",9223372036854775807,b24,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@5d8045fc,,,,,,,,,"2023-03-06 04:12;adev;https://github.com/openjdk/jdk17u/blob/58b479b0c5f63cefd5e01dd99b077e44f630e909/src/java.base/share/native/libjli/java.c#L1014

 while ((arg = *argv) != 0 && *arg == '-') {
...

If the provided array is not NULL terminated, any call to JLI_Launch function directly can lead to segmentation fault as only argv is being checked in the while loop.;;;","2023-05-03 05:10;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/13775
Date: 2023-05-03 12:03:34 +0000;;;","2023-05-19 01:11;dukebot;Changeset: fa143148
Author:    Adam Sotona <asotona@openjdk.org>
Date:      2023-05-19 08:09:37 +0000
URL:       https://git.openjdk.org/jdk/commit/fa14314853e161c6ca5561be3e1e280691d8fe99
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,
The java.lang.Thread.FieldHolder can be null for JNI attaching threads,JDK-8303624,5095540,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,dholmes,dholmes,dholmes,2023-03-05 17:36,2023-03-16 00:18,2023-10-01 09:56,2023-03-09 19:10,19,20,21,,,,,,21,hotspot,,0,loom,noreg-hard,,,,,,,,,,,,,,,"With the introduction of virtual threads (JDK-8284161) a number of fields in java.lang.Thread were moved into a separate data structure, the FieldHolder class, so that only platform threads would have these. Unfortunately the logic in the VM to create the java.lang.Thread instance when attaching a native thread doesn't account for this properly as it can try to use these fields even if the Thread constructor threw an exception and failed to create the FieldHolder:

void JavaThread::allocate_threadObj(Handle thread_group, const char* thread_name,
                                    bool daemon, TRAPS) {
...
if (thread_name != nullptr) {
    Handle name = java_lang_String::create_from_str(thread_name, CHECK);
    // Thread gets assigned specified name and null target
    JavaCalls::call_special(&result,
...
                            THREAD);
  } else {
    JavaCalls::call_special(&result,
...
                            THREAD);
  }

<= Exception could be pending at this point due to use of THREAD not CHECK
  os::set_priority(this, NormPriority);

  if (daemon) {
    java_lang_Thread::set_daemon(thread_oop()); <== Could try to set null FieldHolder here
  }

Further, java_lang_Thread::is_daemon() also expects the FieldHolder to be set if you have a non-null Thread oop, but that is not guaranteed.

This problem manifests as a failed assertion in a debug build, when calling set_daemon, as the FieldHolder field is null. Crash reporting then calls is-daemon which fails the same assert and so we get a secondary crash.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8303549,JDK-8284161,,,,JDK-6404306,,,,,,,,,,,,,,,,,,,,,,,,19,,,,,,,,"0|i30mbf:",9223372036854775807,b14,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,,,"2023-03-05 17:41;dholmes;This potentially impacts access to all these fields:

  private static class FieldHolder {
        final ThreadGroup group;
        final Runnable task;
        final long stackSize;
        volatile int priority;
        volatile boolean daemon;
        volatile int threadStatus;

fortunately attaching threads are ignored in most cases until the attaching is complete. So it is really on the attach code itself, and crash reporting that needs to be resilient to this problem.;;;","2023-03-05 21:26;dholmes;Unfortunately there are cases where attaching threads are not ignored. In such cases it is not just that we have to avoid trying to access a null holder field but we also have to return the default values for these un-set holder fields.;;;","2023-03-05 21:49;dholmes;See JDK-6404306 for the general problem of JNI-attaching threads partial initialization. JVMTI exposes such threads so in theory could call any Thread methods on them. This would even ""work"" before the introduction of the FieldHolder because we have successfully allocated (but not initialized) the Thread instance and so can set the fields. Now however any ""set"" operation would have to be a no-op.

EDIT: correction. Prompted by a query from [~alanb] I re-examined the setter methods and none of them can be called on a JNI attaching thread whilst it is partially constructed. Such a thread could have regular Java methods called on it, but they would throw NPE when trying to access the FieldHolder. So it suffices to keep the assertion that holder!=nullptr in the setter methods.;;;","2023-03-05 23:13;dholmes;Marked as noreg-hard as we would need to be able to attach a thread and force the Thread constructor to throw an exception before initializing the FieldHolder, and then switch to another thread that invoked JVMTI to get access to the attaching thread and then invoke methods in it whilst still attaching. There is no way to do that.;;;","2023-03-06 13:59;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/12892
Date: 2023-03-06 21:52:47 +0000;;;","2023-03-09 19:10;dukebot;Changeset: e26cc526
Author:    David Holmes <dholmes@openjdk.org>
Date:      2023-03-10 03:08:26 +0000
URL:       https://git.openjdk.org/jdk/commit/e26cc526006b16765510e72bd085de069dfae419
;;;",,,,,,,,,,,,,,,,,,,,,,,,,
Compiler should disallow non-standard UTF-8 string encodings,JDK-8303623,5095539,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,acobbs,acobbs,acobbs,2023-03-05 15:25,2023-04-03 12:10,2023-10-01 09:56,2023-03-28 09:17,,,,,,,,,21,tools,,0,,,,,,,,,,,,,,,,,"In Java classfiles, ""Modified UTF-8"" encoding is used to 16 bit Unicode characters.

When reading UTF-8 strings from classfiles, the compiler does the minimum amount of work possible to decode each character. In particular, it does not validate that the characters are properly encoded:

* It doesn't verify that 2nd and 3rd bytes have 10 as the top two bits
* It doesn't verify that \u0000 is encoded in two bytes (as is required for ""Modified UTF"")
* It doesn't verify that the shortest possible encoding was used for each character.

This validation means the compiler will accept classfiles that the JVM would not, which is somewhat bad.

But a worse problem is that because it does not strictly validate the UTF-8 encoding, the compiler allows multiple encodings for the same character sequence. This is bad because the Names table, which is supposed to guarantee uniqueness, does that by hashing the UTF-8 data. So if the compiler reads a classfile that includes the same Name encoded in two different ways, it will add a duplicate Name to the table.",jdk-21+12-20-gf3abc4063de,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8304447,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i30mb7:",9223372036854775807,b16,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4dca67bd,,,,,,,,,"2023-03-06 15:08;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/12893
Date: 2023-03-06 22:59:51 +0000;;;","2023-03-28 09:17;dukebot;Changeset: c1f5ca11
Author:    Archie L. Cobbs <archie.cobbs@gmail.com>
Committer: Vicente Romero <vromero@openjdk.org>
Date:      2023-03-28 16:14:37 +0000
URL:       https://git.openjdk.org/jdk/commit/c1f5ca115d514327f4c3681e61663e22b686f8c7
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
SunMSCAPI provider leaks memory and keys,JDK-8303607,5095509,Bug,Resolved,JDK,JDK,software,duke,,,P2,Fixed,macarte,macarte,macarte,2023-03-03 12:06,2023-03-13 10:42,2023-10-01 09:56,2023-03-06 18:14,11,17,19,,,,,,21,security-libs,,0,noreg-hard,,,,,,,,,,,,,,,,"In some (if not all) cases the SunMSCAPI provider leaks keys.  When getting the keys and building certificate chains the provider silently gets the keys as a test which are then freed.  The Windows API for CryptAcquireCertificatePrivateKey details that the caller needs to release the key if the output value of pfCallerFreeProvOrNCryptKey is true.  The existing code handled this case but did not use the correct free in all cases.  There's a second output (pdwKeySpec) value which tells you whether to use CryptReleaseContext or NCryptFreeObject.  However the current code always calls CryptReleaseContext.

Here's a repro case (watch the handle counts in the windows task manager grow) for both java.exe and lsass.exe

Note that this issue existed prior to the support for localmachine stores was added

import java.security.*;

class AcpTest {
    public static void main(String[] args)
    {
        try {
            while (true)
            {     
                KeyStore keyStore = KeyStore.getInstance(""Windows-MY"");
                keyStore.load(null, null);
            }
        } catch (Exception ex) {
            System.out.println(""Error!"");
            ex.printStackTrace();            
        }
    }
}",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,x86,,,,,,,,,,windows_xp,,,,,,"0|i30m4j:",9223372036854775807,b13,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@35a9b277,,,,,,,,,"2023-03-03 12:08;macarte;Testing a fix;;;","2023-03-06 13:34;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/12891
Date: 2023-03-06 21:27:07 +0000;;;","2023-03-06 18:14;dukebot;Changeset: c51d40cf
Author:    Mat Carter <macarte@openjdk.org>
Committer: Weijun Wang <weijun@openjdk.org>
Date:      2023-03-07 02:12:30 +0000
URL:       https://git.openjdk.org/jdk/commit/c51d40cfebe793b2e979db0f2d91ac3b136311bb
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,
Memory leaks in Arguments::parse_each_vm_init_arg,JDK-8303606,5095508,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,jcking,jcking,jcking,2023-03-03 11:53,2023-03-20 18:06,2023-10-01 09:56,2023-03-13 09:24,21,,,,,,,,21,hotspot,,0,lsan,memory,,,,,,,,,,,,,,,LSan has identified multiple memory leaks related to Arguments::parse_each_vm_init_arg. These previously existed but where masked by NMTPreInit. The change in JDK-8302820 allowed LSan to better track them and identify them.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i30m4b:",9223372036854775807,b14,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,,,"2023-03-03 12:00;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/12867
Date: 2023-03-03 19:54:28 +0000;;;","2023-03-13 09:24;dukebot;Changeset: 671a4521
Author:    Justin King <jcking@openjdk.org>
Date:      2023-03-13 16:23:34 +0000
URL:       https://git.openjdk.org/jdk/commit/671a45219fd727f2a0e1ed040577ec726775f07e
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Memory leaks in Metaspace gtests,JDK-8303605,5095507,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,jcking,jcking,jcking,2023-03-03 11:36,2023-03-13 10:45,2023-10-01 09:56,2023-03-08 07:40,21,,,,,,,,21,hotspot,,0,lsan,memory,metaspace,noreg-self,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i30m43:",9223372036854775807,b13,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,,,"2023-03-03 11:50;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/12865
Date: 2023-03-03 19:40:40 +0000;;;","2023-03-08 07:40;dukebot;Changeset: ddcb369c
Author:    Justin King <jcking@openjdk.org>
Date:      2023-03-08 15:38:39 +0000
URL:       https://git.openjdk.org/jdk/commit/ddcb369ceabd2207699632e90a358baf251c6f36
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Passing by-value structs whose size is not power of 2 doesn't work on all platforms (mainline),JDK-8303604,5095506,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,jvernee,jvernee,jvernee,2023-03-03 11:26,2023-03-13 10:41,2023-10-01 09:56,2023-03-06 07:19,21,,,,,,,,21,core-libs,,0,,,,,,,,,,,,,,,,,Port of: https://bugs.openjdk.org/browse/JDK-8303017,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8303863,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i30m3v:",9223372036854775807,b13,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@28ce6b78,,,,,,,,,"2023-03-03 15:52;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/12863
Date: 2023-03-03 19:27:24 +0000;;;","2023-03-06 07:19;dukebot;Changeset: 5977f266
Author:    Jorn Vernee <jvernee@openjdk.org>
Date:      2023-03-06 15:18:39 +0000
URL:       https://git.openjdk.org/jdk/commit/5977f266d04a7a9890665d433d0a2ab627573ca4
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Remove VMOutOfMemoryError001 test from the problem list after 8303198,JDK-8303587,5095487,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,rriggs,rriggs,rriggs,2023-03-03 08:26,2023-03-08 23:30,2023-10-01 09:56,2023-03-03 10:30,,,,,,,,,21,core-svc,,0,,,,,,,,,,,,,,,,,"Remove fromthe problem list:
  vmTestbase/nsk/jdi/VMOutOfMemoryException/VMOutOfMemoryException001/VMOutOfMemoryException001.java 

The logging of Runtime.exit interfered with out-of-memory exception handling in this test.
Making the logging more robust in JDK-8303198 by handling exceptions restores the conditions expected by this test.
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8303057,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i30lzn:",9223372036854775807,b13,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@3397f701,,,,,,,,,"2023-03-03 08:51;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/12859
Date: 2023-03-03 16:40:41 +0000;;;","2023-03-03 10:30;dukebot;Changeset: 99443142
Author:    Roger Riggs <rriggs@openjdk.org>
Date:      2023-03-03 18:28:06 +0000
URL:       https://git.openjdk.org/jdk/commit/99443142cc8280a1fc896981ef3d0ac27365d035
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
[JVMCI] OOME causes crash while translating exceptions,JDK-8303577,5095470,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,dnsimon,dnsimon,dnsimon,2023-03-03 05:31,2023-03-28 01:14,2023-10-01 09:56,2023-03-06 08:12,20,21,,,,,,,21,hotspot,,0,jvmci,oracle-triage-11,oracle-triage-17,oracle-triage-21,,,,,,,,,,,,,"JDK-8297431 added code for special handling of OutOfMemoryError when translating an exception between libjvmci and HotSpot[1]. 
Unfortunately, this code was deleted in JDK-8298099 when moving the exception translation mechanism to VMSupport[2].
This causes the VM to crash when an OOME occurs while translating an exception from HotSpot to libjvmci:

#
# A fatal error has been detected by the Java Runtime Environment:
#
#  SIGSEGV (0xb) at pc=0x00000001198b925c, pid=86445, tid=41987
#
# JRE version: Java(TM) SE Runtime Environment GraalVM LIBGRAAL_EE 23.0.0-dev (20.0.1+6) (fastdebug build 20.0.1+6-jvmci-23.0-b08)
# Java VM: Java HotSpot(TM) 64-Bit Server VM GraalVM LIBGRAAL_EE 23.0.0-dev (fastdebug 20.0.1+6-jvmci-23.0-b08, mixed mode, tiered, jvmci, jvmci compiler, compressed oops, compressed class ptrs, g1 gc, bsd-aarch64)
# Problematic frame:
# C  [libjvmcicompiler.dylib+0x18b925c]  VMSupport_decodeAndThrowThrowable_6e5efc69ed24721573d80c8bd9388a70726b05d9+0x1c
#

Current CompileTask:
JVMCI-native:    625  218       4       java.lang.String::coder (15 bytes)

Stack: [0x00000001716a8000,0x0000000171aab000],  sp=0x0000000171aa9ff0,  free space=4103k
Native frames: (J=compiled Java code, j=interpreted, Vv=VM code, C=native code)
C  [libjvmcicompiler.dylib+0x18b925c]  VMSupport_decodeAndThrowThrowable_6e5efc69ed24721573d80c8bd9388a70726b05d9+0x1c
C  [libjvmcicompiler.dylib+0x157788c]  JNIJavaCallWrapperHolder_invoke_J_J_7350c0c1adfe87c35c2f17614c6f7ac562e74345+0x7c
C  [libjvmcicompiler.dylib+0x10b3a34]  JNIJavaCallVariantWrapperHolder_invokeJJIJ_J_VA_LIST_8a718de8224c87c5013a17d7fcef8924c81685f8+0xd4
V  [libjvm.dylib+0xa44470]  JNIEnv_::CallStaticVoidMethod(_jclass*, _jmethodID*, ...)+0x24
V  [libjvm.dylib+0xa61568]  HotSpotToSharedLibraryExceptionTranslation::decode(JavaThread*, Klass*, long)+0x90
V  [libjvm.dylib+0xa450d8]  ExceptionTranslation::doit(JavaThread*)+0x300
V  [libjvm.dylib+0xa45338]  JVMCIEnv::transfer_pending_exception_to_jni(JavaThread*, JVMCIEnv*, JVMCIEnv*)+0x14c
V  [libjvm.dylib+0xaa4344]  JVMCIRuntime::initialize(JVMCIEnv*)+0x72c
V  [libjvm.dylib+0xaa92a4]  JVMCIRuntime::compile_method(JVMCIEnv*, JVMCICompiler*, methodHandle const&, int)+0x144
V  [libjvm.dylib+0x4edb4c]  CompileBroker::invoke_compiler_on_method(CompileTask*)+0x76c
V  [libjvm.dylib+0x4ed20c]  CompileBroker::compiler_thread_loop()+0x288
V  [libjvm.dylib+0x898700]  JavaThread::thread_main_inner()+0x2a0
V  [libjvm.dylib+0xfd1c30]  Thread::call_run()+0x220
V  [libjvm.dylib+0xd9bbf0]  thread_native_entry(Thread*)+0x160
C  [libsystem_pthread.dylib+0x7878]  _pthread_start+0x140


[1] https://github.com/openjdk/jdk/commit/952e10055135613e8ea2b818a4f35842936f5633#diff-4d3a3b7e7e12e1d5b4cf3e4677d9e0de5e9df3bbf1bbfa0d8d43d12098d67dc4R222-R234
[2] https://github.com/openjdk/jdk/commit/8b69a2e434ad2fa3369079622b57afb973d5bd9a#diff-7292551772c27b7152a3333f03cbbad90a897c5e37c6a97d4026be835e6d8fe1R121-R125",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8298099,,,,,,,,,,,,,,,,,,,,,,,,20,,,,,,,,"0|i30lvv:",9223372036854775807,b13,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2023-03-03 10:01;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/12857
Date: 2023-03-03 15:40:01 +0000;;;","2023-03-06 08:12;dukebot;Changeset: cac81ddc
Author:    Doug Simon <dnsimon@openjdk.org>
Date:      2023-03-06 16:10:02 +0000
URL:       https://git.openjdk.org/jdk/commit/cac81ddc9259168a5b12c290ae2ce7db25a729fc
;;;","2023-03-07 01:16;thartmann;ILW = Crash during JVMCI compilation on OOME, with JVMVI when OOME occurs during translation of exceptions, no workaround but disable JVMCI compilation = HLM = P3;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,
addIdentitiesToKeystore in KeystoreImpl.m needs CFRelease call in early potential CHECK_NULL return,JDK-8303576,5095466,Bug,Closed,JDK,JDK,software,duke,,,P4,Fixed,mbaesken,mbaesken,mbaesken,2023-03-03 04:27,2023-08-24 06:18,2023-10-01 09:56,2023-03-09 00:38,21,,,,,,,,21,security-libs,,0,jdk11u-fix-request,jdk11u-fix-yes,jdk17u-fix-request,jdk17u-fix-yes,,,,,,,,,,,,,"similar to what had been done in JDK-8303354 , we miss CFRelease on the variable  identitySearch  in  early CHECK_NULL returns potentially done in the function addIdentitiesToKeystore.  
Maybe a CHECK_NULL_GOTO would make sense to handle these coding parts and the ones adjusted in  JDK-8303354 ?
This would look like   CHECK_NULL_GOTO(myvar, errOut);",,,,,,,,,,,JDK-8304715,JDK-8307915,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,generic,,,,,,,,,,os_x,,,,,,"0|i30luz:",9223372036854775807,b14,,,,,,,,,Verified,,"2023-03-07 08:04;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/12905
Date: 2023-03-07 15:56:55 +0000;;;","2023-03-09 00:38;dukebot;Changeset: a7e308ab
Author:    Matthias Baesken <mbaesken@openjdk.org>
Date:      2023-03-09 08:36:24 +0000
URL:       https://git.openjdk.org/jdk/commit/a7e308ab6e5dba7df790840d29fc7edbf3af2e24
;;;","2023-03-16 05:32;mbaesken;jdk17u backport request
I would like to have the patch in jdk17u-dev as well, because the issue is present there too. The patch applies cleanly and is low risk.;;;","2023-03-16 05:40;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/1205
Date: 2023-03-16 12:16:26 +0000;;;","2023-05-10 03:59;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk11u-dev/pull/1880
Date: 2023-05-10 10:53:43 +0000;;;","2023-05-10 04:20;mbaesken;jdk11u backport request
I would like to have the patch in jdk11u-dev as well, because the issue is present there too. The patch applies cleanly and is low risk.;;;",,,,,,,,,,,,,,,,,,,,,,,,,
adjust Xen handling on Linux aarch64,JDK-8303575,5095465,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,mbaesken,mbaesken,mbaesken,2023-03-03 03:54,2023-03-23 02:01,2023-10-01 09:56,2023-03-08 03:40,21,,,,,,,,21,hotspot,,0,jdk17u-fix-request,jdk17u-fix-yes,os,,,,,,,,,,,,,,"After JDK-8301050 the Xen handling on aarch64 should be slightly adjusted.
The output in VM_Version::print_platform_virtualization_info  was missed and needs to be added for Xen.
Additionally a new XenPVHVM  virtualization type could be introduced because this describes the Xen on aarch64 better.
See also https://community.arm.com/arm-community-blogs/b/architectures-and-processors-blog/posts/virtualization-on-arm-with-xen  where the naming is used.",,,,,,,,,,,JDK-8304786,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,aarch64,,,,,,,,,,linux,,,,,,"0|i30lur:",9223372036854775807,b13,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,,,"2023-03-03 05:01;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/12853
Date: 2023-03-03 12:56:55 +0000;;;","2023-03-08 03:40;dukebot;Changeset: 8eaf84f0
Author:    Matthias Baesken <mbaesken@openjdk.org>
Date:      2023-03-08 11:38:37 +0000
URL:       https://git.openjdk.org/jdk/commit/8eaf84f09476b08ed421efe74d7554e2b29bc5a7
;;;","2023-03-17 02:24;mbaesken;jdk17u backport request
I would like to have the patch in jdk17u-dev as well, because the issue is present there too. The backport is low risk and almost clean (copyright header issue in jfrOSInterface.cpp and seems something in the stride in vm_version_aarch64.cpp).;;;","2023-03-17 02:41;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/1207
Date: 2023-03-17 09:18:19 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,
"C2: ""Bad graph detected in build_loop_late"" after a CMove is wrongly split thru phi",JDK-8303564,5095452,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,roland,roland,roland,2023-03-03 01:51,2023-05-04 04:05,2023-10-01 09:56,2023-03-09 00:02,11,17,20,21,8,,,,21,hotspot,,0,c2,jdk11u-fix-request,jdk11u-fix-yes,jdk17u-fix-request,jdk17u-fix-yes,jdk20u-fix-request,jdk20u-fix-SQE-ok-next,jdk20u-fix-yes,oracle-triage-21,,,,,,,,"Running attached test case with:
java -XX:-BackgroundCompilation TestWrongCMovSplitIf

results in:

n:   817  AddI  === _ 355 355  [[ 1132 ]]  !orig=[743],[356],803 !jvms: TestWrongCMovSplitIf::testHelper @ bci:37 (line 74) TestWrongCMovSplitIf::test @ bci:43 (line 50)
early(n):   736  IfFalse  === 735  [[ 355 372 383 ]] #0 !orig=[727] !jvms: TestWrongCMovSplitIf::testHelper @ bci:28 (line 73) TestWrongCMovSplitIf::test @ bci:43 (line 50)
n->in(1):   355  LoadI  === 736 7 354  [[ 817 1132 817 ]]  @int[int:>=0] (java/lang/Cloneable,java/io/Serializable):exact+any *, idx=6; #int !orig=[763],[356],803 !jvms: TestWrongCMovSplitIf::testHelper @ bci:36 (line 74) TestWrongCMovSplitIf::test @ bci:43 (line 50)
early(n->in(1)):   736  IfFalse  === 735  [[ 355 372 383 ]] #0 !orig=[727] !jvms: TestWrongCMovSplitIf::testHelper @ bci:28 (line 73) TestWrongCMovSplitIf::test @ bci:43 (line 50)
n->in(1)->in(1):     7  Parm  === 3  [[ 730 1137 16 355 273 397 385 465 318 453 372 612 441 409 ]] Memory  Memory: @BotPTR *+bot, idx=Bot; !orig=[73] !jvms: TestWrongCMovSplitIf::test @ bci:-1 (line 43)
early(n->in(1)->in(1)):     3  Start  === 3 0  [[ 3 5 6 7 8 9 10 ]]  #{0:control, 1:abIO, 2:memory, 3:rawptr:BotPTR, 4:return_address, 5:int}
n->in(1)->in(2):   354  AddP  === _ 334 334 353  [[ 355 ]]  !jvms: TestWrongCMovSplitIf::testHelper @ bci:36 (line 74) TestWrongCMovSplitIf::test @ bci:43 (line 50)
early(n->in(1)->in(2)):   724  IfTrue  === 723  [[ 735 334 ]] #1
n->in(2):   355  LoadI  === 736 7 354  [[ 817 1132 817 ]]  @int[int:>=0] (java/lang/Cloneable,java/io/Serializable):exact+any *, idx=6; #int !orig=[763],[356],803 !jvms: TestWrongCMovSplitIf::testHelper @ bci:36 (line 74) TestWrongCMovSplitIf::test @ bci:43 (line 50)
early(n->in(2)):   736  IfFalse  === 735  [[ 355 372 383 ]] #0 !orig=[727] !jvms: TestWrongCMovSplitIf::testHelper @ bci:28 (line 73) TestWrongCMovSplitIf::test @ bci:43 (line 50)
n->in(2)->in(1):     7  Parm  === 3  [[ 730 1137 16 355 273 397 385 465 318 453 372 612 441 409 ]] Memory  Memory: @BotPTR *+bot, idx=Bot; !orig=[73] !jvms: TestWrongCMovSplitIf::test @ bci:-1 (line 43)
early(n->in(2)->in(1)):     3  Start  === 3 0  [[ 3 5 6 7 8 9 10 ]]  #{0:control, 1:abIO, 2:memory, 3:rawptr:BotPTR, 4:return_address, 5:int}
n->in(2)->in(2):   354  AddP  === _ 334 334 353  [[ 355 ]]  !jvms: TestWrongCMovSplitIf::testHelper @ bci:36 (line 74) TestWrongCMovSplitIf::test @ bci:43 (line 50)
early(n->in(2)->in(2)):   724  IfTrue  === 723  [[ 735 334 ]] #1

LCA(n):   253  IfTrue  === 252  [[ 248 ]] #1 !jvms: TestWrongCMovSplitIf::testHelper @ bci:10 (line 66) TestWrongCMovSplitIf::test @ bci:43 (line 50)
n->out(0):  1132  Phi  === 248 355 817  [[ 372 ]]  #int !orig=[1103],[752]
later(n->out(0)):   248  Region  === 248 254 253  [[ 248 723 258 1132 ]]  !jvms: TestWrongCMovSplitIf::testHelper @ bci:20 (line 72) TestWrongCMovSplitIf::test @ bci:43 (line 50)
n->out(0)->out(0):   372  StoreI  === 736 7 371 1132  [[ 465 409 385 397 16 612 441 453 ]]  @java/lang/Class (java/io/Serializable,java/lang/constant/Constable,java/lang/reflect/AnnotatedElement,java/lang/invoke/TypeDescriptor,java/lang/reflect/GenericDeclaration,java/lang/reflect/Type,java/lang/invoke/TypeDescriptor$OfField):exact+116 *, name=field3, idx=7;  Memory: @java/lang/Class (java/io/Serializable,java/lang/constant/Constable,java/lang/reflect/AnnotatedElement,java/lang/invoke/TypeDescriptor,java/lang/reflect/GenericDeclaration,java/lang/reflect/Type,java/lang/invoke/TypeDescriptor$OfField):exact+116 *, name=field3, idx=7; !orig=[420] !jvms: TestWrongCMovSplitIf::test @ bci:46 (line 50)
later(n->out(0)->out(0)):   736  IfFalse  === 735  [[ 355 372 383 ]] #0 !orig=[727] !jvms: TestWrongCMovSplitIf::testHelper @ bci:28 (line 73) TestWrongCMovSplitIf::test @ bci:43 (line 50)

idoms of early ""736 IfFalse"":
idom[4]:    252  If
idom[3]:    248  Region
idom[2]:    723  If
idom[1]:    724  IfTrue
idom[0]:    735  RangeCheck
n:          736  IfFalse

idoms of (wrong) LCA ""253 IfTrue"":
idom[0]:    252  If
n:          253  IfTrue

Real LCA of early ""736 IfFalse"" (idom[4]) and wrong LCA ""253 IfTrue"" (idom[0]):
  252  If  === 5 251  [[ 253 254 ]] P=0.900000, C=-1.000000 !jvms: TestWrongCMovSplitIf::testHelper @ bci:10 (line 66) TestWrongCMovSplitIf::test @ bci:43 (line 50)

#
# A fatal error has been detected by the Java Runtime Environment:
#
#  Internal Error (/home/roland/jdk-jdk/src/hotspot/share/opto/loopnode.cpp:5957), pid=3104555, tid=3104568
#  assert(false) failed: Bad graph detected in build_loop_late
#
# JRE version: OpenJDK Runtime Environment (21.0) (slowdebug build 21-internal-adhoc.roland.jdk-jdk)
# Java VM: OpenJDK 64-Bit Server VM (slowdebug 21-internal-adhoc.roland.jdk-jdk, mixed mode, tiered, compressed oops, compressed class ptrs, g1 gc, linux-amd64)
# Problematic frame:
# V  [libjvm.so+0xfb4b8a]  PhaseIdealLoop::build_loop_late_post_work(Node*, bool)+0x620
#
# Core dump will be written. Default location: Core dumps may be processed with ""/usr/lib/systemd/systemd-coredump %P %u %g %s %t %c %h"" (or dumping to /home/roland/tmp/core.3104555)
#
# An error report file with more information is saved as:
# /home/roland/tmp/hs_err_pid3104555.log
#
# If you would like to submit a bug report, please visit:
#   https://bugreport.java.com/bugreport/crash.jsp
#
Aborted
",,,,,,,,,,,JDK-8307440,JDK-8306156,JDK-8305560,JDK-8307438,JDK-8307039,JDK-8305146,JDK-8305127,,,,,,,,,,,,,,,,,,,,,,,,,,,,"2023-03-03 01:49;roland;TestWrongCMovSplitIf.java;https://bugs.openjdk.org/secure/attachment/102881/TestWrongCMovSplitIf.java",,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i30lrv:",9223372036854775807,b14,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2023-03-03 01:54;roland;I haven't tried the test case on older releases but I see 8 has the logic that causes the crash so I expect the bug to be present all the way back to 8.;;;","2023-03-03 02:28;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/12851
Date: 2023-03-03 10:22:55 +0000;;;","2023-03-03 02:56;thartmann;ILW = Assert during C2 compilation, reproducible with test but never showed up ""in the wild"", -XX:-SplitIfBlocks or disable compilation of affected method = HLM = P3;;;","2023-03-09 00:02;dukebot;Changeset: 5e232cf0
Author:    Roland Westrelin <roland@openjdk.org>
Date:      2023-03-09 07:59:32 +0000
URL:       https://git.openjdk.org/jdk/commit/5e232cf0a96cf81036a2d9d7814127b7bc9ebab1
;;;","2023-03-29 04:42;thartmann;Fix Request (JDK 20u)
Resolves an assert during C2 compilation. The fix is low risk, was already backported to Oracle JDK 17u / 11u and tested in the JDK 21 and 17u / 11u CIs. The backport applies cleanly.;;;","2023-03-29 04:46;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk20u/pull/38
Date: 2023-03-29 11:41:32 +0000;;;","2023-04-28 04:11;goetz;Fix request [11u,17u]

I backport this for parity with 11.0.20-oracke/17.0.8-oracle.
Simple change, low but typical C2 risk.
Clean backport.
Test passes, but also without the patch. SAP nightly testing passed.;;;","2023-04-28 04:23;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/1309
Date: 2023-04-28 11:17:45 +0000;;;","2023-04-28 04:25;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk11u-dev/pull/1854
Date: 2023-04-28 11:18:01 +0000;;;",,,,,,,,,,,,,,,,,,,,,,
GetCurrentThreadCpuTime and GetThreadCpuTime need further clarification for virtual threads,JDK-8303563,5095451,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,sspitsyn,alanb,alanb,2023-03-03 01:12,2023-04-12 23:22,2023-10-01 09:56,2023-04-05 18:31,21,,,,,,,,21,hotspot,,0,loom,noreg-doc,,,,,,,,,,,,,,,"This is a follow-up to JDK-8302615 where GetCurrentThreadCpuTime and GetThreadCpuTime were changed from being not supported to optional, when called from/with a virtual thread. There are two additional sentences that need adjustment to avoid creating a conflict in the spec.

--- a/src/hotspot/share/prims/jvmti.xml
+++ b/src/hotspot/share/prims/jvmti.xml
@@ -11022,7 +11022,8 @@ myInit() {
             the current thread (see
             <functionlink id=""GetCurrentThreadCpuTimerInfo""/> vs
             <functionlink id=""GetThreadCpuTimerInfo""/>).
-            The current thread may not be a virtual thread. Otherwise, the error code
+            An implementation is not required to support this function
+            when the current thread is a virtual thread, in which case
             <errorlink id=""JVMTI_ERROR_UNSUPPORTED_OPERATION""></errorlink> will be returned.
             On many platforms this call will be equivalent to:
 <example>
@@ -11125,7 +11126,8 @@ myInit() {
           <jthread null=""current"" impl=""noconvert""/>
             <description>
               The thread to query.
-              The <code>thread</code> may not be a virtual thread. Otherwise, the error code
+              An implementation is not required to support this function
+              when the given thread is a virtual thread, in which case
                <errorlink id=""JVMTI_ERROR_UNSUPPORTED_OPERATION""></errorlink> will be returned.
              </description>
         </param>",,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8305617,,,,,,,,JDK-8302615,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i30lrn:",9223372036854775807,b18,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@661b156a,,,,,,,,,"2023-04-04 13:41;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/13338
Date: 2023-04-04 20:33:46 +0000;;;","2023-04-05 18:31;dukebot;Changeset: 57641190
Author:    Serguei Spitsyn <sspitsyn@openjdk.org>
Date:      2023-04-06 01:30:31 +0000
URL:       https://git.openjdk.org/jdk/commit/5764119024be067ef7afb063a49a14ef59325af6
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
[AIX] TestNativeStack.java is failing with exit value 1,JDK-8303549,5095434,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,varadam,amitkumar,amitkumar,2023-03-02 21:37,2023-08-08 03:56,2023-10-01 09:56,2023-06-26 07:29,,,,,,,,,22,hotspot,,0,hgupdate-sync,oraclejdk-na,,,,,,,,,,,,,,,"Stackoverflow exception has caused an exit value 1 when native thread is attaching as daemon. 

On AIX the default stack size of POSIX thread is 192 KB [https://www.ibm.com/docs/en/aix/7.1?topic=p-pthread-attr-getstacksize-subroutine ]. But in VM's thread creation logic, we set the default thread stack size to 2 MB [ https://github.com/openjdk/jdk/blob/master/src/hotspot/os_cpu/aix_ppc/globals_aix_ppc.hpp#LL33C64-L33C64 ] . So, in the absence of an explicit -Xss value the Java threads have 2M as the default stack size. 
 
This stack size is used by the function CallJavaMainInNewThread() to explicitly set the pthread attribute for stack size: https://github.com/openjdk/jdk/blob/master/src/java.base/unix/native/libjli/java_md.c#L671
 
But on this particular test we are not going through any particular JVM thread creation routines instead we are using a pthread_create() function which is defined in pthread library, hence we are getting 192 KB as default stack size which is default stack size of posix thread on AIX.
 

Log:

stdout: [Triggering a JNI warning
Native thread is running and attaching as daemon ...
];
 stderr: [ Test ERROR. Can't attach current thread: -1 ]
 exitValue = 1

java.lang.RuntimeException: Expected to get exit value of [0], exit value is: [1]`",,,,,,,,,,,JDK-8313664,JDK-8313940,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8303624,JDK-8219652,,,"2023-03-03 21:06;amitkumar;hs_err_pid51642858.log;https://bugs.openjdk.org/secure/attachment/102888/hs_err_pid51642858.log",,,,,,,,,,,,ppc,,,,,,,,,,aix,,,,,,"0|i30lnv:",9223372036854775807,b04,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,,,"2023-03-02 21:53;dholmes;Please elaborate on what you think is happening. The pthread_create using the default attributes is obviously not failing (and one would never expect it to!). So what is actually going wrong?;;;","2023-03-03 04:37;amitkumar;@dholmes  The default stack size on AIX as 196608 bytes. It might require a larger stack size, setting to 1MB solves the problem. She also noted that on AIX the stack size for primordial thread is not defined. It is just ignoring by assert statement -"" os_aix.cpp"" on line number 405 : guarantee0(!os::is_primordial_thread()); . She further need to investigate ,why default size is not enough for thread to initialise.;;;","2023-03-03 13:19;dholmes;Okay but I think we need to understand the full reason as to why there is a problem, and exactly how it manifest as reported - a too small stack should trigger StackOverflowError or a crash. The above failure mode suggests we may not be checking for a pending exception somewhere.

Can you provide a full hs_err file please?;;;","2023-03-03 21:08;amitkumar;It is now available in attachment.;;;","2023-03-05 17:20;dholmes;Thanks! So there are two issues here:

1. Something is going wrong on AIX and the attempt to execute the Thread constructor throws an exception.
2. There is a bug in the VM doe to the relocation of certain Thread fields to a FieldHolder object as part of Loom - that fieldholder may not be set when we try to access it.

I will file a bug for #2 and fix it. In the meantime please run with -Xlog:exceptions and see why AIX is failing this simple code. Thanks.;;;","2023-03-05 17:37;dholmes;Filed JDK-8303624 for the VM bug.;;;","2023-03-10 00:05;amitkumar;Varada is working on this issue. ;;;","2023-05-29 22:02;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/14209
Date: 2023-05-30 04:55:36 +0000;;;","2023-05-31 14:29;dholmes;JDK-8219652 lists other tests that likely need the same fix.;;;","2023-06-26 07:29;dukebot;Changeset: 5ff42d14
Author:    Varada M <mvarada2000@gmail.com>
Committer: Tyler Steele <tsteele@openjdk.org>
Date:      2023-06-26 14:28:40 +0000
URL:       https://git.openjdk.org/jdk/commit/5ff42d14294199eb3bf10b66530f9249fb68810d
;;;","2023-08-01 09:00;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk21/pull/155
Date: 2023-08-01 15:56:01 +0000;;;",,,,,,,,,,,,,,,,,,,,
javadoc typos in Attr,JDK-8303539,5095422,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,vromero,vromero,vromero,2023-03-02 15:58,2023-03-08 23:29,2023-10-01 09:56,2023-03-03 02:34,21,,,,,,,,21,tools,,0,noreg-trivial,,,,,,,,,,,,,,,,"at Attr, the javadoc for method: Attr.ResultInfo::needsArgumentAttr is:

```
      /**
         * Should {@link Attr#attribTree} use the {@ArgumentAttr} visitor instead of this one?
         * @param tree The tree to be type-checked.
         * @return true if {@ArgumentAttr} should be used.
         */
```
here {@ArgumentAttr} should be {@code ArgumentAttr}",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i30ll7:",9223372036854775807,b13,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4dca67bd,,,,,,,,,"2023-03-02 20:18;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/12846
Date: 2023-03-03 04:11:56 +0000;;;","2023-03-03 02:34;dukebot;Changeset: 339ca887
Author:    Vicente Romero <vromero@openjdk.org>
Date:      2023-03-03 10:32:35 +0000
URL:       https://git.openjdk.org/jdk/commit/339ca887835d6456da9fcccdc32fb7716cbc60bb
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
"Changing ""arbitrary"" Name.compareTo() ordering breaks the regression suite",JDK-8303526,5095406,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,acobbs,acobbs,acobbs,2023-03-02 10:59,2023-04-03 12:09,2023-10-01 09:56,2023-03-27 20:41,,,,,,,,,21,tools,,0,cleanup,noreg-cleanup,,,,,,,,,,,,,,,"This was discovered during investigation for JDK-8268622.

The method Name.compareTo() looks like this:

    /** An arbitrary but consistent complete order among all Names.
     */
    public int compareTo(Name other) {
        return other.getIndex() - this.getIndex();
    }

Unfortunately, the ordering can be ""arbitrary"" only if you don't mind breaking the regression suite.

For example, if you apply this patch:

    --- a/src/jdk.compiler/share/classes/com/sun/tools/javac/util/Name.java
    +++ b/src/jdk.compiler/share/classes/com/sun/tools/javac/util/Name.java
    @@ -105,7 +105,7 @@ public abstract class Name implements javax.lang.model.element.Name, PoolConstan
         /** An arbitrary but consistent complete order among all Names.
          */
         public int compareTo(Name other) {
    -        return other.getIndex() - this.getIndex();
    +        return this.getIndex() - other.getIndex();
         }

         /** Return true if this is the empty name.

then the following tests will fail:

    TEST: tools/javac/8203436/T8203436b.java
    TEST: tools/javac/generics/7034019/T7034019c.java
    TEST: tools/javac/generics/7034019/T7034019d.java
    TEST: tools/javac/generics/diamond/neg/Neg21.java
    TEST: tools/javac/generics/diamond/neg/Neg22.java
    TEST: tools/javac/generics/inference/EagerReturnTypeResolution/EagerReturnTypeResolutionTestb.java
    TEST: tools/javac/patterns/InferenceUnitTest.java
    TEST: tools/javac/T8187978/FilterOutCandidatesForDiagnosticsTest.java
    TEST: tools/javac/varargs/6806876/T6806876.java

    ==============================
    Test summary
    ==============================
       TEST                                              TOTAL  PASS  FAIL ERROR
    >> jtreg:test/langtools:langtools_javac               3718  3709     9     0 <<
    ==============================

The javac regression suite should be robust against changes to something that can supposedly be ""arbitrary"".

It turns out there is only one user of Name.compareTo(): the method TypeSymbol.precedes():

        /**
         * A partial ordering between type symbols that refines the
         * class inheritance graph.
         *
         * Type variables always precede other kinds of symbols.
         */
        public final boolean precedes(TypeSymbol that, Types types) {
            if (this == that)
                return false;
            if (type.hasTag(that.type.getTag())) {
                if (type.hasTag(CLASS)) {
                    return
                        types.rank(that.type) < types.rank(this.type) ||
                        types.rank(that.type) == types.rank(this.type) &&
                        that.getQualifiedName().compareTo(this.getQualifiedName()) < 0;
                } else if (type.hasTag(TYPEVAR)) {
                    return types.isSubtype(this.type, that.type);
                }
            }
            return type.hasTag(TYPEVAR);
        }

If we want the above partial ordering to be stable, we need to specify how Name.compareTo() compares.

An obvious choice would be to require that Name.compareTo() orders consistently with String.compareTo(), i.e., lexicographically on the Unicode characters in the name.

Fortunately, this comparison can be done efficiently (i.e., without actually converting the Name into a String) because UTF-8 is ""lexicographically consistent"" with the characters it encodes, although Java's use of Modified UTF-8 means a special check for 0x0000 (which is encoded as two bytes) will be required.",jdk-21+11-25-g2fb1e3b7e72,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8268622,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i30lhn:",9223372036854775807,b16,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4dca67bd,,,,,,,,,"2023-03-04 08:54;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/12843
Date: 2023-03-02 23:29:42 +0000;;;","2023-03-27 20:41;dukebot;Changeset: 426025aa
Author:    Archie L. Cobbs <archie.cobbs@gmail.com>
Committer: Vicente Romero <vromero@openjdk.org>
Date:      2023-03-28 03:39:29 +0000
URL:       https://git.openjdk.org/jdk/commit/426025aab42d485541a899844b96c06570088771
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
HFAs with nested structs/unions/arrays not handled correctly on AArch64,JDK-8303516,5095383,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,jvernee,jvernee,jvernee,2023-03-02 05:44,2023-03-08 23:29,2023-10-01 09:56,2023-03-03 06:35,21,,,,,,,,21,core-libs,,0,,,,,,,,,,,,,,,,,Port https://bugs.openjdk.org/browse/JDK-8300294 & https://bugs.openjdk.org/browse/JDK-8299911 to mainline,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i30lcj:",9223372036854775807,b13,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@28ce6b78,,,,,,,,,"2023-03-02 18:33;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/12831
Date: 2023-03-02 13:48:26 +0000;;;","2023-03-03 06:35;dukebot;Changeset: c6de66c0
Author:    Jorn Vernee <jvernee@openjdk.org>
Date:      2023-03-03 14:33:56 +0000
URL:       https://git.openjdk.org/jdk/commit/c6de66c03f691469ff26c14923bf21bdefd5ae72
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
C2: LoadKlassNode::make fails with 'expecting TypeKlassPtr',JDK-8303513,5095380,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,rcastanedalo,rcastanedalo,rcastanedalo,2023-03-02 03:37,2023-07-12 13:11,2023-10-01 09:56,2023-06-15 03:11,21,22,,,,,,,22,hotspot,,0,c2,hgupdate-sync,intermittent,oracle-triage-11,oracle-triage-17,oracle-triage-21,test-bigapps-runThese,tier3,,,,,,,,,"RunThese8M/RunThese30M fails with ""assert(adr_type != 0LL) failed: expecting TypeKlassPtr"" on a fastdebug build of Generational ZGC (see attached HotSpot error files, pid78296 for windows-x64 and pid1054514 for linux-x64). The failure is observed on a Generational ZGC build using -XX:+UseZGC, but it is not GC-specific (can also be reproduced using -XX:+UseParallelGC -XX:-UseCompressedOops).

# A fatal error has been detected by the Java Runtime Environment:
#
#  Internal Error (c:\sb\prod\1677586887\workspace\open\src\hotspot\share\opto\memnode.cpp:2289), pid=78296, tid=48652
#  assert(adr_type != 0LL) failed: expecting TypeKlassPtr

Current CompileTask:
C2:1229395 128231 %     4       javasoft.sqe.tests.api.java.util.Collections.ncopies.Stream::lambda$getStreamFactory$2 @ 11 (73 bytes)

Stack: [0x0000002fc8e00000,0x0000002fc8f00000]
Native frames: (J=compiled Java code, j=interpreted, Vv=VM code, C=native code)
(...)
V  [jvm.dll+0xbaebeb]  LoadKlassNode::make+0x5b  (memnode.cpp:2289)
V  [jvm.dll+0xdf4b83]  SubTypeCheckNode::load_klass+0x153  (subtypenode.cpp:212)
V  [jvm.dll+0xdf51eb]  SubTypeCheckNode::verify+0x32b  (subtypenode.cpp:183)
V  [jvm.dll+0xdf4973]  SubTypeCheckNode::Ideal+0x2a3  (subtypenode.cpp:113)
V  [jvm.dll+0xcac915]  PhaseIterGVN::transform_old+0xe5  (phaseX.cpp:1356)
V  [jvm.dll+0xca8cb3]  PhaseIterGVN::optimize+0x2b3  (phaseX.cpp:1206)
V  [jvm.dll+0x51c682]  Compile::Optimize+0x1b2  (compile.cpp:2218)
V  [jvm.dll+0x51a43b]  Compile::Compile+0x16bb  (compile.cpp:834)
(...)

FAILURE ANALYSIS

The failure is caused by an implicit assumption made by the verification code within SubTypeCheckNode::Ideal() [1]. This code wrongly assumes that if obj_or_subklass (the ObjOrSubKlass input of the SubTypeCheck node) is a klass or OOP pointer, then 'obj_or_subklass->bottom_type() != TOP'. This assumption does not hold if obj_or_subklass is a projection of the TOP constant node, which can happen within IGVN e.g. if 'obj_or_subklass->in(0)' is an unreachable call node that gets replaced with TOP, as can be seen in before-after-removing-call.png (attached).

The consequence is that 'adr', the node computing the klass address of obj_or_subklass [2], has bottom type TOP, which triggers the reported assertion failure in LoadKlassNode::make() [3]. The failure is not specific to ZGC. It has only been observed with this GC configuration because a specific intermediate Idealization step in the IGVN sequence that leads to the above situation is only performed if UseCompressedOops is disabled. This step replaces a LoadP node with the value stored by a dominating StoreP node that writes into the same address, as can be seen in before-after-load-idealization.png (attached).

This Idealization is not performed if UseCompressedOops is enabled because, unlike LoadP, the corresponding LoadN node is not recorded for IGVN upon creation -- only its successor DecodeN node is [4,5]. This missing optimization opportunity should be addressed separately.

SUGGESTED SOLUTION

To skip verification of SubtypeCheck nodes [1] if 'obj_or_subklass->bottom_type == TOP'. This is a low-risk fix affecting debug-only code. An alternative, more invasive solution, would be to skip the entire SubtypeCheckNode::Ideal() call in this case.

[1] https://github.com/openjdk/jdk/blob/199b1bf5009120efd1fd37a1ddabc0c6fb84f62c/src/hotspot/share/opto/subtypenode.cpp#L113
[2] https://github.com/openjdk/jdk/blob/199b1bf5009120efd1fd37a1ddabc0c6fb84f62c/src/hotspot/share/opto/subtypenode.cpp#L211
[3] https://github.com/openjdk/jdk/blob/199b1bf5009120efd1fd37a1ddabc0c6fb84f62c/src/hotspot/share/opto/memnode.cpp#L2289
[4] https://github.com/openjdk/jdk/blob/bac02b6e9d9e1e93db27c7888188f29631e07f47/src/hotspot/share/opto/graphKit.cpp#L1561-L1566
[5] https://github.com/openjdk/jdk/blob/199b1bf5009120efd1fd37a1ddabc0c6fb84f62c/src/hotspot/share/opto/memnode.cpp#L956",,,,,,,,,,,JDK-8310137,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8059299,,,,,JDK-8310219,JDK-8310524,,,"2023-05-26 02:37;rcastanedalo;before-after-load-idealization.png;https://bugs.openjdk.org/secure/attachment/104040/before-after-load-idealization.png","2023-05-26 02:37;rcastanedalo;before-after-removing-call.png;https://bugs.openjdk.org/secure/attachment/104041/before-after-removing-call.png","2023-05-08 08:09;rcastanedalo;before-igvn.pdf;https://bugs.openjdk.org/secure/attachment/103754/before-igvn.pdf","2023-04-28 04:38;rcastanedalo;hs_err_pid1054514.log;https://bugs.openjdk.org/secure/attachment/103647/hs_err_pid1054514.log","2023-03-02 03:35;rcastanedalo;hs_err_pid78296.log;https://bugs.openjdk.org/secure/attachment/102872/hs_err_pid78296.log","2023-05-15 06:52;rcastanedalo;on-failure.pdf;https://bugs.openjdk.org/secure/attachment/103828/on-failure.pdf","2023-03-02 03:35;rcastanedalo;replay_pid78296.log;https://bugs.openjdk.org/secure/attachment/102873/replay_pid78296.log",,,,,,,,,,,,,,,,,,,,,,"0|i30lbv:",9223372036854775807,b03,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2023-03-02 04:20;thartmann;Smells like JDK-8297933, where [~epeter] reported something similar with the first version of the patch. Actually, the code path that fails was just added recently by JDK-8299155.;;;","2023-03-02 04:30;thartmann;ILW = Assert during C2 compilation, intermittent with long running stress test - only reproduced twice so far with generational ZGC, no known workaround but disable compilation of affected method = HLM = P3;;;","2023-05-03 07:53;rcastanedalo;Observations:
1. The failure can be reproduced on both the Generational ZGC repo and the integration PR in mainline.
2. Through the entire SubTypeCheckNode::Ideal(), in(ObjOrSubKlass) is a projection with the 'top' node (1 Con) as input (possibly the projection of a call node that has been optimized away).
3. Through the entire SubTypeCheckNode::Ideal(), phase->type(in(ObjOrSubKlass))->isa_oopptr() holds, but in(ObjOrSubKlass)->bottom_type() is TOP. The reason for this discrepancy is that phase->type(in(ObjOrSubKlass)) has not been updated yet, whereas in(ObjOrSubKlass)->bottom_type(), as a projection node, trivially propagates the TOP type from its input (the 'top' node) [1]. This causes adr->bottom_type() within SubTypeCheckNode::load_klass() to return TOP [2], which is unexpected by LoadKlassNode::make(..., adr, ...) [3] and triggers the assertion failure.
4. On entry of SubTypeCheckNode::Ideal(), it is common to observe phase->type(in(ObjOrSubKlass)) != in(ObjOrSubKlass)->Value(phase), this can be seen e.g. in compiler/arraycopy/stress/TestStressArrayCopy.java:
  - phase->type(in(ObjOrSubKlass)): java/lang/Object:NotNull *
  - in(ObjOrSubKlass)->Value(phase): java/lang/Object (java/util/stream/Sink,java/util/function/Consumer):NotNull *
5. The failure is independent of JDK-8299155 (can also be reproduced after reverting it).
6. The failure is dependent/triggered by JDK-8297933 (cannot be reproduced after reverting it).
7. At the point of failure, a very large number of classes is loaded (hundreds of thousands)
8. Removing the verification code does not lead to other C2 failures or obvious miscompilations, however it uncovers another issue which is likely unrelated (similarly to JDK-8234355, the JVM crashes when running the 'VM.class_hierarchy' diagnostic command due to the large number of loaded classes).
9. In generational ZGC, class unloading tends to be less frequent than in non-generational ZGC, since it is only triggered by major collections. This might explain why the issue is only reproducible with generational ZGC.

[1] https://github.com/openjdk/jdk/blob/dc4096ce136c867e0806070a2d7c8b4efef5294c/src/hotspot/share/opto/multnode.cpp#L117
[2] https://github.com/openjdk/jdk/blob/dc4096ce136c867e0806070a2d7c8b4efef5294c/src/hotspot/share/opto/addnode.cpp#L633-L634
[3] https://github.com/openjdk/jdk/blob/dc4096ce136c867e0806070a2d7c8b4efef5294c/src/hotspot/share/opto/memnode.cpp#L2288-L2289;;;","2023-05-05 01:50;rcastanedalo;This issue is dependent on/triggered by JDK-8297933 (cannot be reproduced if JDK-8297933 is reverted).;;;","2023-05-08 08:10;rcastanedalo;before-igvn.pdf shows the relevant subgraph before IGVN. The failing SubTypeCheck node is '1885 SubTypeCheck'. After some GVN iterations, '1787 Phi' is optimized away and '1805 Proj' becomes the ObjOrSubKlass input of 1885 (see on-failure.pdf). '1800 CallStaticJava' is also optimized away and replaced by the TOP node as input to 1805, causing the discrepancy between phase->type(1805 Proj) (non-TOP) and (1805 Proj)->bottom_type() (TOP) which ultimately leads to the assertion failure.;;;","2023-05-25 09:08;kvn;Is it possible that it relates to JDK-8308583? See Roland's fix for it.;;;","2023-05-26 02:40;rcastanedalo;[~kvn] Thanks for the pointer, I checked but the failure is still reproducible after JDK-8308583, see failure analysis in the updated description above.;;;","2023-05-26 09:02;kvn;Okay. Good analysis.;;;","2023-06-14 02:51;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/14463
Date: 2023-06-14 08:23:44 +0000;;;","2023-06-15 03:11;dukebot;Changeset: 83d92672
Author:    Roberto Castañeda Lozano <rcastanedalo@openjdk.org>
Date:      2023-06-15 10:08:28 +0000
URL:       https://git.openjdk.org/jdk/commit/83d92672d4c2637fc37ddd873533c85a9b083904
;;;","2023-06-15 03:32;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk21/pull/21
Date: 2023-06-15 10:25:30 +0000;;;","2023-06-17 06:29;dcubed;The fix for this bug is integrated in jdk-22+3-94 and in jdk-21+28-2346.;;;",,,,,,,,,,,,,,,,,,,
Race condition when computing is_loaded property of TypePtr::InterfaceSet,JDK-8303512,5095379,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,thartmann,rcastanedalo,rcastanedalo,2023-03-02 03:02,2023-07-10 00:17,2023-10-01 09:56,2023-05-15 04:08,21,,,,,,,,21,hotspot,,0,c2,intermittent,intermittent-low-frequency,noreg-hard,oracle-triage-11,oracle-triage-17,oracle-triage-21,tier1,,,,,,,,,"The test java/foreign/callarranger/TestRISCV64CallArranger.java crashes with SIGSEGV (within LibraryCallKit::generate_method_call) on macosx-x64, see attached HotSpot error file. The failure is observed on a Generational ZGC build, but it is unlikely to be Generational ZGC-specific. I failed to reproduce the crash using compilation replay.

# A fatal error has been detected by the Java Runtime Environment:
#
#  SIGSEGV (0xb) at pc=0x000000010a9c5306, pid=79781, tid=29955
#
# JRE version: Java(TM) SE Runtime Environment (21.0+4) (build 21-genzgc+4-LTS-29)
# Java VM: Java HotSpot(TM) 64-Bit Server VM (21-genzgc+4-LTS-29, mixed mode, sharing, tiered, compressed oops, compressed class ptrs, g1 gc, bsd-amd64)
# Problematic frame:
# V  [libjvm.dylib+0x7d5306]  LibraryCallKit::generate_method_call(vmIntrinsicID, bool, bool)+0x386

Current CompileTask:
C2:    762 1086       4       java.lang.invoke.MethodType::hashCode (53 bytes)

Stack: [0x0000700009a42000,0x0000700009b42000],  sp=0x0000700009b3fc30,  free space=1015k
Native frames: (J=compiled Java code, j=interpreted, Vv=VM code, C=native code)
V  [libjvm.dylib+0x7d5306]  LibraryCallKit::generate_method_call(vmIntrinsicID, bool, bool)+0x386
V  [libjvm.dylib+0x7b297e]  LibraryCallKit::inline_native_hashcode(bool, bool)+0xf7e
V  [libjvm.dylib+0x7af787]  LibraryCallKit::try_to_inline(int)+0x207
V  [libjvm.dylib+0x7af1f0]  LibraryIntrinsic::generate(JVMState*)+0xa0
V  [libjvm.dylib+0x45c14c]  Parse::do_call()+0x5ac
V  [libjvm.dylib+0x9576d8]  Parse::do_one_block()+0x218
V  [libjvm.dylib+0x956662]  Parse::do_all_blocks()+0x4e2
V  [libjvm.dylib+0x954076]  Parse::Parse(JVMState*, ciMethod*, float)+0x806
V  [libjvm.dylib+0x2d4a70]  ParseGenerator::generate(JVMState*)+0x80
V  [libjvm.dylib+0x384d7e]  Compile::Compile(ciEnv*, ciMethod*, int, Options, DirectiveSet*)+0xcbe
V  [libjvm.dylib+0x2d2c1f]  C2Compiler::compile_method(ciEnv*, ciMethod*, int, bool, DirectiveSet*)+0xef
V  [libjvm.dylib+0x3984ca]  CompileBroker::invoke_compiler_on_method(CompileTask*)+0x4ca
V  [libjvm.dylib+0x397f5c]  CompileBroker::compiler_thread_loop()+0x4ec
V  [libjvm.dylib+0x5c3524]  JavaThread::thread_main_inner()+0x94
V  [libjvm.dylib+0xad5495]  Thread::call_run()+0xa5
V  [libjvm.dylib+0x934cd7]  thread_native_entry(Thread*)+0x147
C  [libsystem_pthread.dylib+0x6259]  _pthread_start+0x7d
C  [libsystem_pthread.dylib+0x1c7b]  thread_start+0xf

Should this test be enabled at all on other platforms than RISCV64?",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8305339,,,,,,,,JDK-8307625,JDK-8297933,JDK-8293841,,"2023-03-02 03:00;rcastanedalo;hs_err_pid79781.log;https://bugs.openjdk.org/secure/attachment/102870/hs_err_pid79781.log","2023-03-02 03:00;rcastanedalo;replay_pid79781.log;https://bugs.openjdk.org/secure/attachment/102871/replay_pid79781.log",,,,,,,,,,,,,,,,,,b05,21,,,,,,,,"0|i30lbn:",9223372036854775807,b23,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2023-03-02 04:50;thartmann;Not sure what happened here and unfortunately, there is no core file to investigate.

ILW = Crash during intrinsification in C2 compilation, only happened once, no workaround but disable intrinsic or compilation of affected method = HLM = P3;;;","2023-03-02 07:53;thartmann;This also happened once with a completely different test on Linux x86_64 that is not using panama/foreign memory API:
java/net/httpclient/ManyRequests.java

Current CompileTask:
C2:   1058 1135       4       java.lang.invoke.MethodType::hashCode (53 bytes)

Stack: [0x00007f74635f5000,0x00007f74636f6000],  sp=0x00007f74636f2980,  free space=1014k
Native frames: (J=compiled Java code, j=interpreted, Vv=VM code, C=native code)
V  [libjvm.so+0xb24f58]  LibraryCallKit::generate_method_call(vmIntrinsicID, bool, bool)+0x208  (callnode.hpp:247)
V  [libjvm.so+0xb26d57]  LibraryCallKit::inline_native_hashcode(bool, bool)+0x1007  (library_call.cpp:4344)
V  [libjvm.so+0xb2b04c]  LibraryIntrinsic::generate(JVMState*)+0x15c  (library_call.cpp:116)
V  [libjvm.so+0x70d908]  Parse::do_call()+0x1f8  (doCall.cpp:662)
V  [libjvm.so+0xcd1af8]  Parse::do_one_block()+0x208  (parse1.cpp:1560)
V  [libjvm.so+0xcd1f25]  Parse::do_all_blocks()+0xe5  (parse1.cpp:707)
V  [libjvm.so+0xcd4675]  Parse::Parse(JVMState*, ciMethod*, float)+0x725  (parse1.cpp:613)
V  [libjvm.so+0x55710b]  ParseGenerator::generate(JVMState*)+0x8b  (callGenerator.cpp:99)
V  [libjvm.so+0x624975]  Compile::Compile(ciEnv*, ciMethod*, int, Options, DirectiveSet*)+0xd75  (compile.cpp:763)
V  [libjvm.so+0x556210]  C2Compiler::compile_method(ciEnv*, ciMethod*, int, bool, DirectiveSet*)+0x120  (c2compiler.cpp:113)
V  [libjvm.so+0x62bb5f]  CompileBroker::invoke_compiler_on_method(CompileTask*)+0xa6f  (compileBroker.cpp:2237)
V  [libjvm.so+0x62c9e8]  CompileBroker::compiler_thread_loop()+0x558  (compileBroker.cpp:1916)
V  [libjvm.so+0x8d8a18]  JavaThread::thread_main_inner() [clone .part.0]+0xb8  (javaThread.cpp:710)
V  [libjvm.so+0xe76f16]  Thread::call_run()+0xa6  (thread.cpp:224)
V  [libjvm.so+0xca2948]  thread_native_entry(Thread*)+0xd8  (os_linux.cpp:737);;;","2023-03-02 18:39;fjiang;[~thartmann] Seems it's not related to foreign API, but I can help to run tests on linux-riscv to see if this issue also happens on riscv.

> Should this test be enabled at all on other platforms than RISCV64?
Looks like CallArrangerTest just tests how the function arguments and return values passed.
Though it has platform-dependent implementations, they are all Java code, so I think it's okay to enable the test on other platforms.;;;","2023-03-02 22:57;thartmann;Thanks [~fjiang], the issue seems to be platform independent and from the stack trace on Linux x86, it looks like we crash in callnode.hpp:247, which would be JVMState::bci(). Probably, the JVMState is NULL.

Seems we are missing a stopped() check after null_check_receiver(), maybe that's the issue. I'll try to verify.;;;","2023-03-10 08:02;thartmann;After some more staring at the code, I'm still not sure how this can happen. Although we seem to be missing a stopped() check after the null_check_receiver() checks in LibraryCallKit::generate_method_call(), this should never be possible because we check the receiver for null before that in LibraryCallKit::inline_native_hashcode.

I'm closing this as Cannot Reproduce for now, hoping it shows up again in a more reproducible form.;;;","2023-03-16 09:44;dcubed;Here's the crashing thread's stack from the jdk-21+15-1172-tier1 sighting:

java/lang/ModuleLayer/automatic/AutomaticModulesTest.java

---------------  T H R E A D  ---------------

Current thread (0x00007fbbb3974c00):  JavaThread ""C2 CompilerThread0"" daemon [_thread_in_native, id=22787, stack(0x000070000a4e1000,0x000070000a5e1000)]


Current CompileTask:
C2:   2057 1753       4       java.lang.invoke.MethodType::hashCode (53 bytes)

Stack: [0x000070000a4e1000,0x000070000a5e1000],  sp=0x000070000a5deb90,  free space=1014k
Native frames: (J=compiled Java code, j=interpreted, Vv=VM code, C=native code)
V  [libjvm.dylib+0x7bae86]  LibraryCallKit::generate_method_call(vmIntrinsicID, bool, bool)+0x386
V  [libjvm.dylib+0x7984fe]  LibraryCallKit::inline_native_hashcode(bool, bool)+0xf7e
V  [libjvm.dylib+0x795307]  LibraryCallKit::try_to_inline(int)+0x207
V  [libjvm.dylib+0x794d70]  LibraryIntrinsic::generate(JVMState*)+0xa0
V  [libjvm.dylib+0x4523dc]  Parse::do_call()+0x5ac
V  [libjvm.dylib+0x939ed8]  Parse::do_one_block()+0x218
V  [libjvm.dylib+0x938e62]  Parse::do_all_blocks()+0x4e2
V  [libjvm.dylib+0x936876]  Parse::Parse(JVMState*, ciMethod*, float)+0x806
V  [libjvm.dylib+0x2cf620]  ParseGenerator::generate(JVMState*)+0x80
V  [libjvm.dylib+0x37bd9e]  Compile::Compile(ciEnv*, ciMethod*, int, Options, DirectiveSet*)+0xcbe
V  [libjvm.dylib+0x2cd7ef]  C2Compiler::compile_method(ciEnv*, ciMethod*, int, bool, DirectiveSet*)+0xef
V  [libjvm.dylib+0x38f67a]  CompileBroker::invoke_compiler_on_method(CompileTask*)+0x4ca
V  [libjvm.dylib+0x38f0fc]  CompileBroker::compiler_thread_loop()+0x5ec
V  [libjvm.dylib+0x5b33a4]  JavaThread::thread_main_inner()+0x94
V  [libjvm.dylib+0xab3a15]  Thread::call_run()+0xa5
V  [libjvm.dylib+0x917d67]  thread_native_entry(Thread*)+0x147
C  [libsystem_pthread.dylib+0x6259]  _pthread_start+0x7d
C  [libsystem_pthread.dylib+0x1c7b]  thread_start+0xf

siginfo: si_signo: 11 (SIGSEGV), si_code: 1 (SEGV_MAPERR), si_addr: 0x0000000000000038
;;;","2023-03-24 05:02;thartmann;I executed several thousand iterations of the failing tests (even with the same build and on the same machine) but I'm not able to reproduce this.;;;","2023-05-05 07:47;thartmann;I think this is related to JDK-8305339. I added more information there.;;;","2023-05-08 00:27;thartmann;This is a regression from JDK-8297933 and the root cause is a race condition among compiler threads computing TypePtr::InterfaceSet::_is_loaded for a shared type. One thread can set _is_loaded_computed before setting _is_loaded while another thread can already access _is_loaded (and wrongly observe _is_loaded = false). As a result, the klass of a TypePtr can be loaded while the interfaces it implements appear to be not loaded.

Another problem is that TypePtr::InterfaceSet::eq does not take the _is_loaded / _is_loaded_computed fields into account. A loaded type can therefore be replaced by an unloaded type during GVN.

In the case of the failure reported by this bug, LibraryCallKit::inline_native_hashcode first null checks the receiver and updates the type. Due to the issues described above, the null-free type is GVN'ed with it's unloaded counterpart and propagated to another, redundant null check emitted by LibraryCallKit::generate_method_call. Since the type is now unloaded, an uncommon trap is emitted and parsing is stopped(). We crash when trying to de-reference GraphKit::_map->_jvms which is NULL.

Another failure mode is reported by JDK-8305339.;;;","2023-05-08 08:00;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/13868
Date: 2023-05-08 14:52:21 +0000;;;","2023-05-15 04:08;dukebot;Changeset: ad348a8c
Author:    Tobias Hartmann <thartmann@openjdk.org>
Date:      2023-05-15 11:06:20 +0000
URL:       https://git.openjdk.org/jdk/commit/ad348a8cec50561d3e295b6289772530f541c6b1
;;;",,,,,,,,,,,,,,,,,,,,
C2: assert(get_ctrl(n) == cle_out) during unrolling,JDK-8303511,5095378,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,roland,roland,roland,2023-03-02 01:09,2023-06-25 05:31,2023-10-01 09:56,2023-03-07 00:38,11,17,19,20,21,,,,21,hotspot,,0,c2,jdk11u-fix-request,jdk11u-fix-yes,jdk17u-fix-request,jdk17u-fix-yes,jdk20u-fix-request,jdk20u-fix-SQE-ok-next,jdk20u-fix-yes,oracle-triage-21,,,,,,,,"Crash happens with the attached test run with:
java -XX:-BackgroundCompilation -XX:+UseParallelGC TestAddPAtOuterLoopHead

#  Internal Error (/home/roland/jdk-jdk/src/hotspot/share/opto/loopopts.cpp:2297), pid=1637441, tid=1637452
#  assert(get_ctrl(n) == cle_out) failed: what other control?
#
# JRE version: OpenJDK Runtime Environment (21.0) (fastdebug build 21-internal-adhoc.roland.jdk-jdk)
# Java VM: OpenJDK 64-Bit Server VM (fastdebug 21-internal-adhoc.roland.jdk-jdk, mixed mode, sharing, tiered, compressed oops, compressed class ptrs, parallel gc, linux-amd64)
# Problematic frame:
# V  [libjvm.so+0x14f8bae]  PhaseIdealLoop::clone_outer_loop(LoopNode*, PhaseIdealLoop::CloneLoopMode, IdealLoopTree*, IdealLoopTree*, int, Node_List&, Node_List&) [clone .part.0]+0xbfe

Current CompileTask:
C2:   2520 1300    b  4       TestAddPAtOuterLoopHead::test (151 bytes)

Stack: [0x00007f4cc7537000,0x00007f4cc7638000],  sp=0x00007f4cc7631a00,  free space=1002k
Native frames: (J=compiled Java code, j=interpreted, Vv=VM code, C=native code)
V  [libjvm.so+0x14b0d86]  PhaseIdealLoop::clone_outer_loop(LoopNode*, PhaseIdealLoop::CloneLoopMode, IdealLoopTree*, IdealLoopTree*, int, Node_List&, Node_List&) [clone .part.0]+0xbe6  (loopopts.cpp:2268)
V  [libjvm.so+0x14bedbc]  PhaseIdealLoop::clone_loop(IdealLoopTree*, Node_List&, int, PhaseIdealLoop::CloneLoopMode, Node*)+0x1ac
V  [libjvm.so+0x146cb5e]  PhaseIdealLoop::insert_post_loop(IdealLoopTree*, Node_List&, CountedLoopNode*, CountedLoopEndNode*, Node*&, Node*, CountedLoopNode*&)+0xce
V  [libjvm.so+0x146f4aa]  PhaseIdealLoop::insert_pre_post_loops(IdealLoopTree*, Node_List&, bool)+0x34a
V  [libjvm.so+0x147bd47]  IdealLoopTree::iteration_split_impl(PhaseIdealLoop*, Node_List&)+0x3c7
V  [libjvm.so+0x147c051]  IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&)+0x101
V  [libjvm.so+0x147bf8c]  IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&)+0x3c
V  [libjvm.so+0x147bf8c]  IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&)+0x3c
V  [libjvm.so+0x14ab431]  PhaseIdealLoop::build_and_optimize()+0xd81
V  [libjvm.so+0xaeeee1]  PhaseIdealLoop::optimize(PhaseIterGVN&, LoopOptsMode)+0x261
V  [libjvm.so+0xae8faf]  Compile::Optimize()+0xe2f
V  [libjvm.so+0xaed10e]  Compile::Compile(ciEnv*, ciMethod*, int, Options, DirectiveSet*)+0x18ce
V  [libjvm.so+0x8fec67]  C2Compiler::compile_method(ciEnv*, ciMethod*, int, bool, DirectiveSet*)+0x4e7
V  [libjvm.so+0xafa22c]  CompileBroker::invoke_compiler_on_method(CompileTask*)+0xa7c
V  [libjvm.so+0xafafe8]  CompileBroker::compiler_thread_loop()+0x5d8
V  [libjvm.so+0x1067896]  JavaThread::thread_main_inner()+0x206
V  [libjvm.so+0x1a6a8b0]  Thread::call_run()+0x100
V  [libjvm.so+0x16ff053]  thread_native_entry(Thread*)+0x103

Failure is related to loop strip mining",,,,,,,,,,,JDK-8305144,JDK-8305137,JDK-8305555,JDK-8307437,JDK-8306182,JDK-8307034,JDK-8310857,,,,,,,,,,,,,,,,,,,,,,,,,,,,"2023-03-02 01:12;roland;TestAddPAtOuterLoopHead.java;https://bugs.openjdk.org/secure/attachment/102869/TestAddPAtOuterLoopHead.java",,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i30lbf:",9223372036854775807,b13,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2023-03-02 01:29;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/12824
Date: 2023-03-02 09:24:17 +0000;;;","2023-03-02 03:22;thartmann;This first reproduces with JDK-8281429 in JDK 19 but that seems to only trigger it.;;;","2023-03-02 03:26;thartmann;ILW = Assert during C2 compilation, reproducible with targeted test, disable loop strip mining or compilation of affected method = HLM = P3;;;","2023-03-07 00:38;dukebot;Changeset: 3f2d929d
Author:    Roland Westrelin <roland@openjdk.org>
Date:      2023-03-07 08:37:37 +0000
URL:       https://git.openjdk.org/jdk/commit/3f2d929dc3336b301e7e5dceb899d59451645828
;;;","2023-03-29 04:43;thartmann;Fix Request (JDK 20u)
Resolves an assert during C2 compilation. The fix is low risk, was already backported to Oracle JDK 17u / 11u and tested in the JDK 21 and 17u / 11u CIs. The backport applies cleanly.;;;","2023-03-29 04:50;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk20u/pull/39
Date: 2023-03-29 11:42:59 +0000;;;","2023-04-28 03:33;goetz;Fix request [17u]

I backport this for parity with 17.0.8-oracle.
Simple change, still typical C2 risk.
I had to do trivial resolved because of formatting.
Test passes but passes also without the fix. SAP nightly testing passed.;;;","2023-04-28 03:38;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/1306
Date: 2023-04-28 10:32:18 +0000;;;","2023-06-21 05:49;goetz;Fix request [11u]

I backport this for parity with 11.0.20-oracle from 17.
Simple change, still typical C2 risk. 
Clean backport from 17.
Test passes.but passes also without the fix. SAP nighlty testing passed;;;","2023-06-21 05:57;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk11u-dev/pull/1973
Date: 2023-06-21 12:48:11 +0000;;;",,,,,,,,,,,,,,,,,,,,,
 Socket setTrafficClass does not work for IPv4 connections when IPv6 enabled,JDK-8303509,5095269,Bug,Resolved,JDK,JDK,software,duke,,,P5,Fixed,alanb,webbuggrp,webbuggrp,2023-02-28 22:43,2023-03-16 00:17,2023-10-01 09:56,2023-03-09 00:15,13,17,,,,,,,21,core-libs,,0,dcsaw,noreg-hard,webbug,,,,,,,,,,,,,,"ADDITIONAL SYSTEM INFORMATION :
Java:

/usr/lib/jvm/jdk-17-oracle-x64/bin/java -version
java version ""17.0.6"" 2023-01-17 LTS
Java(TM) SE Runtime Environment (build 17.0.6+9-LTS-190)
Java HotSpot(TM) 64-Bit Server VM (build 17.0.6+9-LTS-190, mixed mode, sharing)

uname -a
Linux xxx 3.10.0-327.28.3.el7.x86_64 #1 SMP Thu Aug 18 19:05:49 UTC 2016 x86_64 x86_64 x86_64 GNU/Linux


A DESCRIPTION OF THE PROBLEM :
Set traffc class value to 10 and get 10 by `getTrafficClass` method, but ip package show 0 in jdk17. 

But it works with jdk11.

STEPS TO FOLLOW TO REPRODUCE THE PROBLEM :
1. start server side by nc -l 8001
2. Capture the traffic by tcpdump :  tcpdump -vvv -nnX -c1000  
3. Run client and sent a package with traffic class 10 to server
4. You can see ip package tos value is 0x0

EXPECTED VERSUS ACTUAL BEHAVIOR :
EXPECTED -
ip tos value is 10
ACTUAL -
14:22:37.643746 IP (tos 0x0, ttl 61, id 4843, offset 0, flags [DF], proto TCP (6), length 52)
    10.203.24.118.48400 > 10.203.26.199.8001: Flags [S], cksum 0x99bd (correct), seq 1194522346, win 29200, options [mss 1460,nop,nop,sackOK,nop,wscale 9], length 0
	0x0000:  4500 0034 12eb 4000 3d06 e206 0acb 1876  E..4..@.=......v
	0x0010:  0acb 1ac7 bd10 1f41 4732 f6ea 0000 0000  .......AG2......
	0x0020:  8002 7210 99bd 0000 0204 05b4 0101 0402  ..r.............
	0x0030:  0103 0309                                ....
14:22:37.643789 IP (tos 0x0, ttl 61, id 4844, offset 0, flags [DF], proto TCP (6), length 40)
    10.203.24.118.48400 > 10.203.26.199.8001: Flags [.], cksum 0x71ab (correct), seq 1194522347, ack 584628180, win 58, length 0
	0x0000:  4500 0028 12ec 4000 3d06 e211 0acb 1876  E..(..@.=......v
	0x0010:  0acb 1ac7 bd10 1f41 4732 f6eb 22d8 b7d4  .......AG2..""...
	0x0020:  5010 003a 71ab 0000 0000 0000 0000       P..:q.........
14:22:37.645627 IP (tos 0x0, ttl 61, id 4845, offset 0, flags [DF], proto TCP (6), length 41)
    10.203.24.118.48400 > 10.203.26.199.8001: Flags [P.], cksum 0x70a2 (correct), seq 0:1, ack 1, win 58, length 1
	0x0000:  4500 0029 12ed 4000 3d06 e20f 0acb 1876  E..)..@.=......v
	0x0010:  0acb 1ac7 bd10 1f41 4732 f6eb 22d8 b7d4  .......AG2..""...
	0x0020:  5018 003a 70a2 0000 0100 0000 0000       P..:p.........
14:22:37.646338 IP (tos 0x0, ttl 61, id 4846, offset 0, flags [DF], proto TCP (6), length 40)
    10.203.24.118.48400 > 10.203.26.199.8001: Flags [F.], cksum 0x71a9 (correct), seq 1, ack 1, win 58, length 0
	0x0000:  4500 0028 12ee 4000 3d06 e20f 0acb 1876  E..(..@.=......v
	0x0010:  0acb 1ac7 bd10 1f41 4732 f6ec 22d8 b7d4  .......AG2..""...
	0x0020:  5011 003a 71a9 0000 0000 0000 0000       P..:q.........
14:22:37.646381 IP (tos 0x0, ttl 61, id 4847, offset 0, flags [DF], proto TCP (6), length 40)
    10.203.24.118.48400 > 10.203.26.199.8001: Flags [.], cksum 0x71a8 (correct), seq 2, ack 2, win 58, length 0
	0x0000:  4500 0028 12ef 4000 3d06 e20e 0acb 1876  E..(..@.=......v
	0x0010:  0acb 1ac7 bd10 1f41 4732 f6ed 22d8 b7d5  .......AG2..""...
	0x0020:  5010 003a 71a8 0000 0000 0000 0000       P..:q.........

---------- BEGIN SOURCE ----------

import java.io.IOException;
import java.io.OutputStream;
import java.net.Socket;

public class SetTrafficClassTest {

    public static void main(String[] args) throws IOException {
        if (args.length != 3) {
            System.err.println(""Arguments: <host> <port> <ip_tos>"");
            return;
        }

        Socket socket = new Socket(args[0], Integer.parseInt(args[1]));
        socket.setTcpNoDelay(true);
        OutputStream os = socket.getOutputStream();
        byte[] bytes = new byte[] {1};
        int tc = Integer.parseInt(args[2]);
        socket.setTrafficClass(tc);
        os.write(bytes);
        System.out.println(""Set Traffic class to "" + tc + "", got "" + socket.getTrafficClass());
        os.flush();
        os.close();
        socket.close();
    }

}

---------- END SOURCE ----------

FREQUENCY : always


",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"2023-03-05 01:07;alanb;IP_TOS.patch;https://bugs.openjdk.org/secure/attachment/102893/IP_TOS.patch","2023-03-01 23:01;tongwan;SetTrafficClassTest.java;https://bugs.openjdk.org/secure/attachment/102868/SetTrafficClassTest.java",,,,,,,,,,,generic,,,,,,,,,,linux,,,,,,"0|i30kn7:",9223372036854775807,b14,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@446e124a,,,,,,,,,"2023-03-01 06:38;alanb;IP_TOS and IPV6_TCLASS is usually not too interesting for stream/TCP sockets. When the underlying socket is IPv6 (the default on most systems), setTrafficClass maps to the IPPROTO_IPV6/IPV6_TCLASS so it might not be effective for IPv4 connections. It would be useful to know if running with -Djava.net.preferIPv4Stack=true can be traced as that should set IPPROTO/IP_TOS.;;;","2023-03-01 23:01;tongwan;The observations on Oracle Linux:
JDK 17: Passed, Set Traffic class to 10, got 10
;;;","2023-03-01 23:13;alanb;[~tongwan] This can't be tested with getTrafficClass, instead it needs a tcpdump or network analyzer to see the network packet.;;;","2023-03-02 00:18;alanb;I've changed this issue to make it clearer what it is about. In summary, since JDK 13, Socket.setTrafficClass only sets IPV6_TCLASS on Linux when IPv6 is enabled. On Linux it requires both IPV6_TCLASS and IP_TOS when the socket is not connected, and IP_TOS when the socket is connected to an IPv4 address.

It can be  worked around by using an IPv4 socket, e.g. SocketChannel.open(INET).socket() or running with -Djava.net.preferIPv4Stack=true.

As a general point is is somewhat unusual to see Socket.setTraffiClass actually used as setting IPV6_TCLASS or IP_TOS is more typical on UDP sockets. In StandardSocketOptions, IP_TOS is unspecified for stream-oriented sockets.

In any case, I've attached IP_TOS.patch to this issue with an initial patch. The patch adding a new mapping for UNSPEC/IP_TOS to the socket registry so that the socket option can be handled by the net code. This also limits the change to the NIO based SocketImpl.
;;;","2023-03-05 11:23;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/12872
Date: 2023-03-05 09:33:34 +0000;;;","2023-03-06 07:28;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/12852
Date: 2023-03-03 10:36:45 +0000;;;","2023-03-09 00:15;dukebot;Changeset: dd794108
Author:    Alan Bateman <alanb@openjdk.org>
Date:      2023-03-09 08:13:57 +0000
URL:       https://git.openjdk.org/jdk/commit/dd79410824fa57c7fb1ce56c643bb52540f9a206
;;;",,,,,,,,,,,,,,,,,,,,,,,,
Vector.lane() gets wrong value on x86,JDK-8303508,5095375,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,jbhateja,eliu,eliu,2023-03-01 23:41,2023-05-04 04:06,2023-10-01 09:56,2023-03-24 04:21,17,20,21,,,,,,21,hotspot,,0,c2,jdk17u-fix-request,jdk17u-fix-yes,jdk20u-fix-request,jdk20u-fix-SQE-ok-next,jdk20u-fix-yes,oracle-triage-11,oracle-triage-21,vectorapi,,,,,,,,"// test case
 public static short testShort() {
      ShortVector vecb = ShortVector.broadcast(ShortVector.SPECIES_128, -5);
      return vecb.lane(1);
  } 
C2:

$>../build-fastdebug/images/jdk/bin/java -ea -Xbatch --add-modules=jdk.incubator.vector Test1
WARNING: Using incubator modules: jdk.incubator.vector
65531
Interpreter:

$>../build-fastdebug/images/jdk/bin/java -ea -Xbatch -Xint --add-modules=jdk.incubator.vector Test1
WARNING: Using incubator modules: jdk.incubator.vector
-5",,,,,,,,,,,JDK-8307036,JDK-8306187,JDK-8305139,JDK-8307441,JDK-8305557,,,,,,,,,,,JDK-8303278,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,x86,,,,,,,,,,generic,,,,,,"0|i30lar:",9223372036854775807,b16,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2023-03-02 02:25;thartmann;Seems to be an old issue, already reproduces with JDK 16.

ILW = Incorrect results with C2 compiled code, with targeted vector api test, disable compilation/intrinsic of affected method = HLM = P3;;;","2023-03-22 17:43;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/13152
Date: 2023-03-23 00:37:29 +0000;;;","2023-03-24 04:21;dukebot;Changeset: d61de141
Author:    Jatin Bhateja <jbhateja@openjdk.org>
Date:      2023-03-24 11:19:07 +0000
URL:       https://git.openjdk.org/jdk/commit/d61de141eb8ba52122db43172429f9186ea47e61
;;;","2023-03-29 04:49;thartmann;Fix Request (JDK 20u)
Resolves an issue with incorrect execution of C2 compiled code. The fix is low risk, was already backported to Oracle JDK 17u and tested in the JDK 21 and 17u CIs. The backport applies cleanly.;;;","2023-03-29 04:57;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk20u/pull/43
Date: 2023-03-29 11:49:20 +0000;;;","2023-04-28 04:37;goetz;Fix request [17u]

I backport this for parity with 17.0.8-oracle.
Low risk, affects only x86, simple change.
One trivial resolve due to context was needed.
Test passes and fails without the fix. SAP nightly testing passed.;;;","2023-04-28 04:45;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/1311
Date: 2023-04-28 11:37:27 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,
Update LCMS to 2.15,JDK-8303482,5095340,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,achung,prr,prr,2023-03-01 12:16,2023-04-20 01:41,2023-10-01 09:56,2023-03-13 21:06,11,17,21,7,8,,,,21,client-libs,,0,11-bp,17-bp,3rdparty,8-bp,cssn23_03_02,jdk11u-fix-request,jdk11u-fix-yes,jdk17u-fix-request,jdk17u-fix-yes,littlecms,noreg-build,sn_139,,,,,"LittleCMS (aka LCMS) 2.15 released on March 1st 2023: 

it can be downloaded from here https://sourceforge.net/projects/lcms/files/latest/download
source repo is  at https://github.com/mm2/Little-CMS/
https://github.com/mm2/Little-CMS/releases/tag/lcms2.15

We should upgrade JDK 21 to use this.",,,,,,,,,,,JDK-8304704,JDK-8306501,JDK-8304457,JDK-8306519,JDK-8304365,JDK-8304151,,,,,,,,,,JDK-8215084,,,,,,,,,,,,,,,JDK-8297088,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i30l2z:",9223372036854775807,b14,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4b09ce31,,,,,,,,,"2023-03-10 15:15;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/12967
Date: 2023-03-10 03:38:35 +0000;;;","2023-03-13 21:06;dukebot;Changeset: c073ef2e
Author:    Alisen Chung <achung@openjdk.org>
Date:      2023-03-14 04:04:19 +0000
URL:       https://git.openjdk.org/jdk/commit/c073ef2ed59483c8dccec9fcac930c862885ff91
;;;","2023-04-17 08:23;goetz;Fix request [11u,17u]

I backport this for parity with 11.0.20/17.0.8-oracle.
One of the required updates of external libs.
Clean backport. SAP nightly testing passed.;;;","2023-04-17 08:35;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/1254
Date: 2023-04-17 15:25:05 +0000;;;","2023-04-17 08:41;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk11u-dev/pull/1834
Date: 2023-04-17 15:32:05 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,,,
CancelRequestTest assertTrue failing with AssertionError due to java.util.concurrent.CompletionException: java.io.EOFException: EOF reached while reading ,JDK-8303481,5095339,Bug,Closed,JDK,JDK,software,duke,,,P4,Fixed,dfuchs,dfuchs,dfuchs,2023-03-01 12:16,2023-08-08 12:06,2023-10-01 09:56,2023-03-03 05:19,21,,,,,,,,21,core-libs,,0,httpclient,,,,,,,,,,,,,,,,"The CancelRequestTest has been observed failing intermittently with this exception:

Got expected exception: java.util.concurrent.ExecutionException: java.io.EOFException: EOF reached while reading
cancelled jdk.internal.net.http.common.MinimalFuture@3564a02c[Completed exceptionally: java.util.concurrent.CompletionException: java.io.EOFException: EOF reached while reading] (id=6669)
test CancelRequestTest.testPostSendAsync(""http://localhost:49317/http2/x/same/interrupt"", true, true): failure
java.lang.AssertionError: expected [true] but found [false]
	at org.testng.Assert.fail(Assert.java:99)
	at org.testng.Assert.failNotEquals(Assert.java:1037)
	at org.testng.Assert.assertTrue(Assert.java:45)
	at org.testng.Assert.assertTrue(Assert.java:55)
	at CancelRequestTest.testPostSendAsync(CancelRequestTest.java:453)

Analysis of the logs shows that this is due to the Http2TestServer closing the associated connection after failing to queue up a frame for the stream in its connection readLoop. The frame could not be queued because the stream was already closed.

DEBUG: [pool-1-thread-4] [10s 773ms] Http2Connection(SocketTube(19)) Closed stream 27
Sent response headers 200
DEBUG: [readLoop] [10s 773ms] FramesDecoder decodes: 9
DEBUG: [readLoop] [10s 773ms] FramesDecoder Tail size is now: 0, current=
DEBUG: [readLoop] [10s 773ms] FramesDecoder Got frame: DATA: length=0, streamid=27, flags=END_STREAM 
DEBUG: [readLoop] [10s 773ms] FramesDecoder decodes: 0
DEBUG: [readLoop] [10s 773ms] FramesDecoder Tail size is now: 0, current=
java.io.IOException: closed
	at jdk.httpclient.test.lib.http2.BodyOutputStream.write(BodyOutputStream.java:84)
	at java.base/java.io.OutputStream.write(OutputStream.java:124)
	at CancelRequestTest$HTTPSlowHandler.handle(CancelRequestTest.java:676)
	at jdk.httpclient.test.lib.common.HttpServerAdapters$HttpChain$Http2Chain.doFilter(HttpServerAdapters.java:476)
	at jdk.httpclient.test.lib.common.HttpServerAdapters$HttpTestServer$Http2TestContext.handle(HttpServerAdapters.java:746)
	at jdk.httpclient.test.lib.common.HttpServerAdapters$HttpTestHandler.doHandle(HttpServerAdapters.java:395)
	at jdk.httpclient.test.lib.common.HttpServerAdapters$HttpTestHandler.lambda$toHttp2Handler$1(HttpServerAdapters.java:382)
	at jdk.httpclient.test.lib.http2.Http2TestServerConnection.handleRequest(Http2TestServerConnection.java:721)
	at jdk.httpclient.test.lib.http2.Http2TestServerConnection.lambda$createStream$4(Http2TestServerConnection.java:671)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:577)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:317)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1144)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:642)
	at java.base/java.lang.Thread.run(Thread.java:1623)
Http server reader thread shutdown
java.io.IOException: stream closed
	at jdk.httpclient.test.lib.http2.Queue.put(Queue.java:64)
	at jdk.httpclient.test.lib.http2.Http2TestServerConnection.readLoop(Http2TestServerConnection.java:833)
	at jdk.httpclient.test.lib.http2.Http2TestServerConnection$ConnectionThread.run(Http2TestServerConnection.java:466)

The readLoop should be more robust to asynchronous closing of HTTP/2 stream, and just drop the frame if the stream is already closed.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i30l2r:",9223372036854775807,b13,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@446e124a,,,,,,,Verified,,"2023-03-03 01:48;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/12850
Date: 2023-03-03 09:42:39 +0000;;;","2023-03-03 05:19;dukebot;Changeset: cbdc7a6f
Author:    Daniel Fuchs <dfuchs@openjdk.org>
Date:      2023-03-03 13:18:23 +0000
URL:       https://git.openjdk.org/jdk/commit/cbdc7a6f88511a08800400edfbf13f6d3f7ad4f6
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Miscellaneous fixes to mostly invisible doc comments,JDK-8303480,5095338,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,prappo,prappo,prappo,2023-03-01 11:57,2023-03-13 10:43,2023-10-01 09:56,2023-03-07 07:32,21,,,,,,,,21,core-libs,,0,noreg-doc,,,,,,,,,,,,,,,,"Recent analysis of doc comments suggested there is some incorrect, unintended, or misleading use of JavaDoc tags. The vast majority of the cases found does not affect the JDK API Documentation.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i30l2j:",9223372036854775807,b13,,,,,,,,,,,"2023-03-02 04:11;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/12826
Date: 2023-03-02 12:03:44 +0000;;;","2023-03-07 07:32;dukebot;Changeset: 45a616a8
Author:    Pavel Rappo <prappo@openjdk.org>
Date:      2023-03-07 15:31:42 +0000
URL:       https://git.openjdk.org/jdk/commit/45a616a891e4a4b0e77b1f2fa040522f4a99d172
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
potential null pointer dereference in filemap.cpp,JDK-8303475,5095332,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,ccheung,shadowbug,shadowbug,2023-03-01 10:28,2023-05-04 03:29,2023-10-01 09:56,2023-04-28 08:46,21,,,,,,,,21,hotspot,,0,bugdb_35136371,parfait,,,,,,,,,,,,,,,"An internal static analysis tool detected a potential null pointer dereference in SharedClassPathEntry::copy_from in filemap.cpp:

void SharedClassPathEntry::copy_from(SharedClassPathEntry* ent, ClassLoaderData* loader_data, TRAPS) {
  _type = ent->_type;
  _is_module_path = ent->_is_module_path;
  _timestamp = ent->_timestamp;
  _filesize = ent->_filesize;
  _from_class_path_attr = ent->_from_class_path_attr;
...

The ent could be null.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,other,,,,,,"0|i30l17:",9223372036854775807,b21,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,,,"2023-03-03 16:14;ccheung;The warning is regarding a null SharedClassPathEntry could be passed to the following function:
    SharedClassPathEntry::copy_from(SharedClassPathEntry* ent, ClassLoaderData* loader_data, TRAPS)

The copy_from is called from:

void FileMapInfo::copy_shared_path_table(ClassLoaderData* loader_data, TRAPS) {
  size_t entry_size = sizeof(SharedClassPathEntry);
  size_t bytes = entry_size * _shared_path_table.size();

  Array<u8>* array = MetadataFactory::new_array<u8>(loader_data, (int)bytes, CHECK);
  _saved_shared_path_table = SharedPathTable(array, _shared_path_table.size());

  for (int i = 0; i < _shared_path_table.size(); i++) {
    _saved_shared_path_table.path_at(i)->copy_from(shared_path(i), loader_data, CHECK);    <<<< shared_path(i) could return null
  }
  _saved_shared_path_table_array = array;
}

During CDS dumping, only non-null shared path will be included in the archive. So in practice, the _shared_path_table entries retrieved from the CDS archive during runtime should never be null.;;;","2023-04-27 18:06;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/13708
Date: 2023-04-28 01:00:50 +0000;;;","2023-04-28 08:46;dukebot;Changeset: e1196584
Author:    Calvin Cheung <ccheung@openjdk.org>
Date:      2023-04-28 15:45:44 +0000
URL:       https://git.openjdk.org/jdk/commit/e1196584d5c61e3a6baa3eb96801a518cd5dca64
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,
Add implied {@code} in java.lang.invoke.MethodHandles,JDK-8303473,5095330,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,prappo,jjg,jjg,2023-03-01 10:24,2023-03-08 23:29,2023-10-01 09:56,2023-03-03 01:14,21,,,,,,,,21,core-libs,,0,,,,,,,,,,,,,,,,,"In the following, `{@bytes}` should probably be `{@code bytes}`. If nothing else, `{@bytes}` is not a recognized inline tag for a doc comment.

$ grep -r '{@bytes' open/src 
open/src/java.base/share/classes/java/lang/invoke/MethodHandles.java:         * {@bytes} denotes a class in a different package than the lookup class
open/src/java.base/share/classes/java/lang/invoke/MethodHandles.java:         * {@bytes} denotes a class in a different package than the lookup class
open/src/java.base/share/classes/java/lang/invoke/MethodHandles.java:         * {@bytes} denotes a class in a different package than the lookup class
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i30l0r:",9223372036854775807,b13,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@1cfeb1de,,,,,,,,,"2023-03-01 10:57;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/12811
Date: 2023-03-01 18:47:14 +0000;;;","2023-03-03 01:14;dukebot;Changeset: e1745bc9
Author:    Pavel Rappo <prappo@openjdk.org>
Date:      2023-03-03 09:12:14 +0000
URL:       https://git.openjdk.org/jdk/commit/e1745bc98180e0d49ed4dd3116a43c90645a1a09
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Display name for region TR,JDK-8303472,5095329,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,jlu,naoto,naoto,2023-03-01 09:52,2023-03-08 23:30,2023-10-01 09:56,2023-03-03 09:19,,,,,,,,,21,core-libs,,0,,,,,,,,,,,,,,,,,"The English name for the region `TR` changed from `Turkey` to `Türkiye`. CLDR announced they will change the name in its upcoming version 43 (https://cldr.unicode.org/index/downloads/cldr-43#h.vkfyufr10adb). Although it will eventually be incorporated into the JDK, we should apply it to the existing CLDR locale data (and the legacy COMPAT data) on the spot so that they can be backported properly.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,generic,,,,,,,,,,generic,,,,,,"0|i30l0j:",9223372036854775807,b13,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@7644fb4c,,,,,,,,,"2023-03-01 14:05;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/12816
Date: 2023-03-01 21:58:00 +0000;;;","2023-03-03 09:19;dukebot;Changeset: e3016c11
Author:    Justin Lu <jlu@openjdk.org>
Committer: Naoto Sato <naoto@openjdk.org>
Date:      2023-03-03 17:18:44 +0000
URL:       https://git.openjdk.org/jdk/commit/e3016c11425f7f915eaf20b6e02a9ec0c9ec8690
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
C2: failed: malformed control flow. Limit type made precise with MaxL/MinL,JDK-8303466,5095320,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,epeter,epeter,epeter,2023-03-01 07:26,2023-09-06 01:56,2023-10-01 09:56,2023-04-25 22:44,11,17,19,20,21,,,,21,hotspot,,0,c2,javafuzzer,oracle-triage-21,performance,tier5,tier6,tier8,,,,,,,,,,"Attached Test.java triggers compilation bailout.

https://github.com/openjdk/jdk/blob/8f195ff236000d9c019f8beb2b13355083e211b5/src/hotspot/share/opto/compile.cpp#L3992

I set an assert at that position, and debugged it quickly. The issue seems to be that there is an IfNode with only one Proj output. This is obviously a BUG. Going futher back, it seems the second projection was removed during dead code removal.

Run with
./java -XX:CompileCommand=compileonly,Test::test -XX:MaxVectorSize=64 -Xcomp -XX:CompileCommand=dontinline,Test::* -XX:+UnlockExperimentalVMOptions -XX:PerMethodSpecTrapLimit=0 -XX:PerMethodTrapLimit=0 -XX:+PrintCompilation -XX:CompileCommand=quiet Test.java

In the PrintCompilation log, one can find this:

made not compilable on level 3  Test::run (11 bytes)   excluded by CompileCommand
   4123   84    b  3       Test::test (32 bytes)
   4124   85    b  4       Test::test (32 bytes)
   4163   85    b  4       Test::test (32 bytes)   COMPILE SKIPPED: malformed control flow (retry at different tier)

I found this bug during my work of JDK-8298935. The IR framework complained that one of my test functions is ""not compilable (anymore) at level C2"".

We should probably add
assert(false, ""reason"")
to as many bailout locations as possible, so that we can detect bugs in debug mode, rather than just ignoring broken graphs.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8307131,,,,,JDK-8298935,JDK-8286625,JDK-8308504,JDK-8303951,"2023-03-24 03:13;epeter;FuzzerUtils.java;https://bugs.openjdk.org/secure/attachment/103115/FuzzerUtils.java","2023-03-01 07:27;epeter;Test.java;https://bugs.openjdk.org/secure/attachment/102850/Test.java","2023-03-01 08:23;epeter;Test2.java;https://bugs.openjdk.org/secure/attachment/102851/Test2.java","2023-03-24 03:17;epeter;Test3.java;https://bugs.openjdk.org/secure/attachment/103117/Test3.java","2023-03-24 04:28;epeter;Test4.java;https://bugs.openjdk.org/secure/attachment/103119/Test4.java","2023-03-27 04:38;chagedorn;Test5.java;https://bugs.openjdk.org/secure/attachment/103133/Test5.java",,,,,,,,,,,,,,,,,,,,,,,"0|i30kyj:",9223372036854775807,b20,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2023-03-01 07:41;thartmann;This requires AVX-512, I could reproduce on a non-AVX-512 machine with Intel's SDE.;;;","2023-03-01 07:43;epeter;Both my local laptop and the windows-x64 machine on our testing system have avx512;;;","2023-03-01 07:46;epeter;I'll try to make this a WhiteBox test, so that we can run build-search and find the breaking change.

Update:
I created a WhiteBox test that checks for compilation.
Test2.java

~/Documents/jtreg/bin/jtreg -va -s -jdk:/home/emanuel/Documents/fork6-jdk/build/linux-x64-debug/jdk/ -javaoptions:"""" -J-Djavatest.maxOutputSize=1000000 /home/emanuel/Documents/fork6-jdk/open/test/hotspot/jtreg/compiler/loopopts/superword/Test2.java;;;","2023-03-01 07:47;thartmann;ILW = Bailout from C2 compilation (harmless but affects performance), with single test on AVX-512, -XX:-UseSuperWord or limit MaxVectorSize = MLM = P4;;;","2023-03-02 07:44;thartmann;Build search says that this was introduced/triggered by JDK-8286625 in JDK 19. But that fix was also backported to JDK 17.0.5, where the issue does not reproduce.;;;","2023-03-09 13:24;epeter;Yes, that makes sense. I see a CastII node that eventually becomes TOP, because of an impossible range (input_type and _type have no overlap). That CastII was Ideal-ed and cloned many times, but its origin is in the new CastII added in JDK-8286625.

Maybe we are preserving the type on one path more than another, and that leads to things collapsing Yes, it looks like the zero-trip-count of post-loop does not collapse, but the values going into post-loop do collapse. Need more investigation.;;;","2023-03-23 03:36;epeter;Update: since JDK-8303951, this now triggers an assert:

dist dump
---------------------------------------------
   0  2250  If  === 198 2249  [[ 267 ]] P=0.500000, C=-1.000000
   1   267  IfFalse  === 2250  [[ 316 ]] #0
#
# A fatal error has been detected by the Java Runtime Environment:
#
#  Internal Error (/home/emanuel/Documents/fork3-jdk/open/src/hotspot/share/opto/compile.cpp:4003), pid=439330, tid=439343
#  assert(false) failed: malformed control flow;;;","2023-03-24 03:13;epeter;I found a fuzzer test already. Let's see if we can reduce it.

./javac FuzzerUtils.java
./javac Test3.java
./java -Xcomp -XX:CompileOnly=Test3 Test3.java;;;","2023-03-24 04:28;epeter;Thanks [~chagedorn] for reducing it. I cleaned it up by hand (removed infinite loop, etc), and now it is quite simple.

./java -Xcomp -XX:CompileOnly=Test4 -XX:CompileCommand=printcompilation,Test4::* -XX:+TraceLoopOpts Test4.java;;;","2023-03-27 04:39;chagedorn;I've attached a reduced Java Fuzzer case which triggers with AVX 512:

$ java -XX:UseAVX=3 -Xcomp -XX:CompileOnly=Test Test5.java;;;","2023-03-28 06:45;thartmann;Raising priority because this now triggers an assert.;;;","2023-03-31 05:46;epeter;Draft PR:
https://github.com/openjdk/jdk/pull/13269;;;","2023-03-31 09:37;epeter;Update:
I suspect this is multiple bugs. I am probably close to fixing one of them.
But until we fixed everything it may take a bit.;;;","2023-04-05 02:54;epeter;I now have a fix for some of these failures.

However: some of the asserts seem to be related to missing skeleton/assertion predicates JDK-8288981.
Let's see how noisy this assert is after this change is integrated.;;;","2023-04-05 04:01;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/13269
Date: 2023-03-31 12:44:17 +0000;;;","2023-04-19 04:20;mbaesken;java/util/concurrent/tck/JSR166TestCase.java   jtreg test  (in curent jdk head)
triggered a similar looking issue on Windows 64bit, see below :

#
# A fatal error has been detected by the Java Runtime Environment:
#
#  Internal Error (d:\openjdk\jdk-dev\src\hotspot\share\opto\compile.cpp:4003), pid=59848, tid=77048
#  assert(false) failed: malformed control flow
#
# JRE version: OpenJDK Runtime Environment (21.0) (fastdebug build 21-internal-adhoc.jdk-dev)
# Java VM: OpenJDK 64-Bit Server VM (fastdebug 21-internal-adhoc.jdk-dev, mixed mode, sharing, tiered, compressed oops, compressed class ptrs, g1 gc, windows-amd64)
 
  . . .
---------------  T H R E A D  ---------------
 
Current thread (0x000001a367335650):  JavaThread ""C2 CompilerThread0"" daemon [_thread_in_native, id=77048, stack(0x0000009d2ed00000,0x0000009d2ee00000)]
 
 
Current CompileTask:
C2:  47387 6171       4       java.util.stream.ForEachOps$ForEachTask::compute (183 bytes)
 
Stack: [0x0000009d2ed00000,0x0000009d2ee00000]
Native frames: (J=compiled Java code, j=interpreted, Vv=VM code, C=native code)
V  [jvm.dll+0xbdd4f1]  os::win32::platform_print_native_stack+0xf1  (os_windows_x86.cpp:236)
V  [jvm.dll+0xeee2ec]  VMError::report+0x100c  (vmError.cpp:815)
V  [jvm.dll+0xeeff35]  VMError::report_and_die+0x645  (vmError.cpp:1588)
V  [jvm.dll+0xef0644]  VMError::report_and_die+0x64  (vmError.cpp:1353)
V  [jvm.dll+0x53545b]  report_vm_error+0x5b  (debug.cpp:191)
V  [jvm.dll+0x4cdb71]  Compile::final_graph_reshaping+0xcf1  (compile.cpp:4003)
V  [jvm.dll+0x4c8ad8]  Compile::Optimize+0x1328  (compile.cpp:2450)
V  [jvm.dll+0x4c5828]  Compile::Compile+0x1458  (compile.cpp:841)
V  [jvm.dll+0x3e474a]  C2Compiler::compile_method+0x11a  (c2compiler.cpp:121)
V  [jvm.dll+0x4e0733]  CompileBroker::invoke_compiler_on_method+0x883  (compileBroker.cpp:2268)
V  [jvm.dll+0x4ddeaf]  CompileBroker::compiler_thread_loop+0x36f  (compileBroker.cpp:1945)
V  [jvm.dll+0x7b12b4]  JavaThread::thread_main_inner+0x224  (javaThread.cpp:718)
V  [jvm.dll+0xe66496]  Thread::call_run+0x1c6  (thread.cpp:229)
V  [jvm.dll+0xbdbe10]  os::win32::thread_native_entry+0xa0  (os_windows.cpp:551)
C  [ucrtbase.dll+0x2268a]
C  [KERNEL32.DLL+0x17ab4]
C  [ntdll.dll+0x5a351]
;;;","2023-04-25 22:42;epeter;I now integrated the fix.

But the assert will still trigger with the fuzzer occasionally.

The assert will now still fail with the fuzzer occasionally because of the `assertion / skeleton predicate` bug that [~chagedorn] is already working on for a while. But I hope this fix will drastically reduce the rate of fuzzer failures with this assert.;;;","2023-04-25 22:44;dukebot;Changeset: cc894d84
Author:    Emanuel Peter <epeter@openjdk.org>
Date:      2023-04-26 05:42:26 +0000
URL:       https://git.openjdk.org/jdk/commit/cc894d849aa5f730d5a806acfc7a237cf5170af1
;;;","2023-04-28 13:04;dcubed;This fix is integrated in jdk-21+20-1660.;;;","2023-04-28 13:09;dcubed;[~epeter]

> But the assert will still trigger with the fuzzer occasionally. 
> 
> The assert will now still fail with the fuzzer occasionally because of the `assertion / skeleton
> predicate` bug that [~chagedorn] is already working on for a while. But I hope this fix will
> drastically reduce the rate of fuzzer failures with this assert.

Definitely an improvement on frequency. Here's the bug that I filed for the first sighting
since your fix went in:

JDK-8307131 C2: assert(false) failed: malformed control flow;;;","2023-05-01 23:25;epeter;[~dcubed]
Good to hear it reduced the frequency.

The ""malformed control flow"" has so far triggered 3 bugs:
JDK-8303466 (this here), JDK-8306997, JDK-8288981.;;;","2023-09-05 23:55;mbaesken;today we saw another assert this time on linuxx86_64 (fastdebug); triggered by test java/util/concurrent/tck/JSR166TestCase.java

#  Internal Error (/openjdk/linuxx86_64/jdk/src/hotspot/share/opto/compile.cpp:4013), pid=1735295, tid=1770794
#  assert(false) failed: malformed control flow

Current CompileTask:
C2:  75855 6145       4       java.util.stream.ForEachOps$ForEachTask::compute (183 bytes)

Stack: [0x00007f91a98fa000,0x00007f91a99fa000],  sp=0x00007f91a99f5290,  free space=1004k
Native frames: (J=compiled Java code, j=interpreted, Vv=VM code, C=native code)
V  [libjvm.so+0xa163a1]  Compile::final_graph_reshaping()+0x11f1  (compile.cpp:4013)
V  [libjvm.so+0xa177be]  Compile::Optimize()+0x136e  (compile.cpp:2466)
V  [libjvm.so+0xa19530]  Compile::Compile(ciEnv*, ciMethod*, int, Options, DirectiveSet*)+0x1b70  (compile.cpp:854)
V  [libjvm.so+0x86f71b]  C2Compiler::compile_method(ciEnv*, ciMethod*, int, bool, DirectiveSet*)+0x13b  (c2compiler.cpp:119)
V  [libjvm.so+0xa25bb0]  CompileBroker::invoke_compiler_on_method(CompileTask*)+0xb10  (compileBroker.cpp:2283)
V  [libjvm.so+0xa26a68]  CompileBroker::compiler_thread_loop()+0x618  (compileBroker.cpp:1944)
V  [libjvm.so+0xeef15e]  JavaThread::thread_main_inner()+0xee  (javaThread.cpp:720)
V  [libjvm.so+0x18fae8a]  Thread::call_run()+0xba  (thread.cpp:220)
V  [libjvm.so+0x14e2fda]  thread_native_entry(Thread*)+0x12a  (os_linux.cpp:785)
Registers:
RAX=0x00007f9223b10000, RBX=0x00007f922360a7a4, RCX=0x00007f9222fbec18, RDX=0x00007f9222fa8022
RSP=0x00007f91a99f5290, RBP=0x00007f91a99f5490, RSI=0x0000000000000fad, RDI=0x00007f9223062808
R8 =0x0000000000000000, R9 =0x0000000000000000, R10=0x0000000000000001, R11=0x0000000000000293
R12=0x00007f91a99f78d0, R13=0x0000000000000002, R14=0x00007f9180633b98, R15=0x00007f91a99f52f0
RIP=0x00007f9221e163a1, EFLAGS=0x0000000000010246, CSGSFS=0x002b000000000033, ERR=0x0000000000000006
  TRAPNO=0x000000000000000e

Should I maybe open a new JBS issue for this ?;;;","2023-09-06 00:24;chagedorn;Hi [~mbaesken], I think this is JDK-8312980 where incremental inlining is causing the graph to become malformed. It is highly intermittent due to requiring a specific profile in order to inline some methods late to trigger the assert.;;;","2023-09-06 00:40;mbaesken;Hi [~chagedorn] we see this assertion rather often in our nightly tests; ~ 5-10 times per month. The java/util/concurrent/tck/JSR166TestCase.java test seems to be good at triggering this assert. But correct it is intermittent.;;;","2023-09-06 01:56;chagedorn;This matches more or less the number of sightings with JSR166TestCase.java in our CI. Looks like this is the only (known) test that triggers the assert in this specific way with late inlining.;;;",,,,,,
"KeyStore of type KeychainStore, provider Apple does not show all trusted certificates",JDK-8303465,5095319,Bug,Closed,JDK,JDK,software,duke,,,P3,Fixed,clanger,mbaesken,mbaesken,2023-03-01 07:16,2023-07-21 07:36,2023-10-01 09:56,2023-06-05 01:40,11,17,21,,,,,,21,security-libs,,0,jdk11u-critical-request,jdk11u-critical-yes,jdk17u-critical-request,jdk17u-critical-yes,release-note=yes,,,,,,,,,,,,"JDK-8278449 (https://github.com/openjdk/jdk/commit/9ce2d75d0b5a98fe0d223a2f070b7b0f0fa89322) changed the behavior of the MacOS Keystore implementation (KeychainStore, provider ""Apple"") to only show certificates with proper trust. This was also documented in the release notes, e.g. here: https://www.oracle.com/java/technologies/javase/17-0-3-relnotes.html#JDK-8278449

However, the implementation seems flawed as not all possible trusted certificates are loaded. With the current code (https://github.com/openjdk/jdk/blob/2adb3b409e8cc87685a4379be3f7beeb53706e2e/src/java.base/macosx/native/libosxsecurity/KeystoreImpl.m#L440), certificates are only loaded if a trust record in the ""user domain"" exists. This however is not sufficient, as there might as well be records in the domains ""admin"" or ""system"".

Further details can be taken out of the MacOS API documentation:
https://developer.apple.com/documentation/security/1400261-sectrustsettingscopytrustsetting
https://developer.apple.com/documentation/security/sectrustsettingsdomain

The following example program can be used to display the Keystore contents from the MacOS key chain:

--------------
import java.security.KeyStore;

public class MacKeyChainStoreTrustDemo {

        @SuppressWarnings(""nls"")
        public static void main(String[] args) throws Exception {
                KeyStore keyStore = KeyStore.getInstance(""KeychainStore"", ""Apple"");
                keyStore.load(null, null);
                keyStore.aliases().asIterator().forEachRemaining(System.out::println);
                System.out.println(""size:"" + keyStore.size());
        }
}
--------------
",,,,,,,,,,,JDK-8309985,JDK-8309936,JDK-8309994,JDK-8310039,JDK-8310509,,,,,,,,,,,,,JDK-8308690,,,,,,,,,,,,,JDK-8278449,,,,,,,,,,,,,,,,generic,,,,,,,,,,os_x,,,,,,"0|i30kyb:",9223372036854775807,b26,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@2ec284e3,,,,,,,Verified,,"2023-03-02 05:41;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/12829
Date: 2023-03-02 13:33:53 +0000;;;","2023-05-11 14:44;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/13945
Date: 2023-05-11 21:38:35 +0000;;;","2023-06-05 01:40;dukebot;Changeset: ac41c030
Author:    Christoph Langer <clanger@openjdk.org>
Date:      2023-06-05 08:36:47 +0000
URL:       https://git.openjdk.org/jdk/commit/ac41c030030c3d31815474c793ac9c420c47e22c
;;;","2023-06-07 00:59;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u/pull/371
Date: 2023-06-07 07:50:43 +0000;;;","2023-06-07 01:14;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk11u/pull/73
Date: 2023-06-07 08:08:36 +0000;;;","2023-06-12 05:07;clanger;Fix request (11u,17u):
A bit late but I'd like to see this going into the July/2023 updates still. The upstream fix took a bit longer. It fixes a regression that was introduced in 17.0.3 and 11.0.16. After the above mentioned vulnerability fix, the keystore implementation on mac does not show all appropriate certificates from the keychain any more. It fixes a customer issue and they claim they need the fix in OpenJDK (e.g. Eclipse Temurin) and a downstream SapMachine fix would not suffice. So requesting 11u/17u critical to include it in rampdown.
There is a certain, but minor risk. Tested in GHA and SAP nightlies.;;;",,,,,,,,,,,,,,,,,,,,,,,,,
[Lilliput/JDK17] Runtime flag to enable Lilliput,JDK-8303450,5095303,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,rkennke,rkennke,rkennke,2023-03-01 05:21,2023-03-14 11:09,2023-10-01 09:56,2023-03-14 11:09,repo-lilliput-17,,,,,,,,repo-lilliput-17,hotspot,,0,lilliput,,,,,,,,,,,,,,,,This is a backport of JDK-8301562 to the lilliput/jdk17u repo.,,,,,,,,,,JDK-8301562,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,generic,,,,,,,,,,generic,,,,,,"0|i30kur:",9223372036854775807,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,,,"2023-03-07 07:41;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/lilliput-jdk17u/pull/8
Date: 2023-03-01 18:59:30 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
"The ""ZonedDateTime.parse"" may not accept the ""UTC+XX"" zone id",JDK-8303440,5095286,Bug,Closed,JDK,JDK,software,duke,,,P3,Fixed,naoto,serb,serb,2023-03-01 03:15,2023-09-12 01:26,2023-10-01 09:56,2023-03-06 09:25,11,11.0.9,17,20,,,,,21,core-libs,,0,11-bp,17-bp,20-bp,amazon-interest,jdk11u-fix-request,jdk11u-fix-yes,jdk17u-fix-request,jdk17u-fix-yes,jdk20u-fix-request,jdk20u-fix-SQE-ok-next,jdk20u-fix-yes,regression,,,,,"After integration of JDK-8236548 the next code stop working:

        ZoneId zid = ZoneId.of(""UTC+01:30"");

        String s = zid.toString() + "" 2023-01-01 00:00:00"";
        DateTimeFormatter FORMATTER;

        DateTimeFormatterBuilder builder = new DateTimeFormatterBuilder();
        builder.appendZoneText(TextStyle.NARROW)
               .appendLiteral("" "")
               .append(DateTimeFormatter.ofPattern(""uuuu-MM-dd""))
               .appendLiteral("" "")
               .append(DateTimeFormatter.ofPattern(""HH:mm:ss""));

        FORMATTER = builder.toFormatter();
        ZonedDateTime.parse(s, FORMATTER);

The root cause is this line in that change:

https://github.com/openjdk/jdk/commit/5c3a01591c5c945926636fdc9f164d60b5b4f29e?diff=unified#diff-5fcf976db1c06e8f44a8671356d7e34fdfbf5b057baa852e7c3e015c8797c889R4263

Note that the comment said about French, but the ""utc+"" is ignored for all locales.

That fix had a CSR JDK-8238914, but I did not found there a reason why ""utc+"" was excluded, it is only mentioned as ""Minor fix"" here:
https://mail.openjdk.org/pipermail/core-libs-dev/2020-February/064683.html

So the change was done intentionally, but it seems it contradicts the specification of the ""appendZoneText"" method, which is used in the test above. In the test the ""+utc"" is accepted as zoneID but rejected during parsing, but the spec says:
============
During parsing, either the textual zone name, the zone ID or the offset
     * is accepted. Many textual zone names are not unique, such as CST can be
     * for both ""Central Standard Time"" and ""China Standard Time"". In this
     * situation, the zone id will be determined by the region information from
     * formatter's 

https://docs.oracle.com/en/java/javase/19/docs/api/java.base/java/time/format/DateTimeFormatterBuilder.html#appendZoneText(java.time.format.TextStyle)

So the implementation should be aligned with the spec or the specification should be updated.",,,,,,,,,,,JDK-8304081,JDK-8304077,JDK-8307011,JDK-8313282,JDK-8304082,JDK-8313283,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8316096,JDK-8236548,,,,,,,,,,,,,,,generic,,,,,,,,,,generic,,,,,,"0|i30kqz:",9223372036854775807,b13,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@7644fb4c,,,,,,,Verified,,"2023-03-01 14:36;naoto;It's a regression caused by the fix mentioned in the description. Should not have blindly disabled parsing in case of `ZoneTextPrinterParser`.;;;","2023-03-03 12:57;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/12868
Date: 2023-03-03 20:51:14 +0000;;;","2023-03-06 09:25;dukebot;Changeset: cfb0a25a
Author:    Naoto Sato <naoto@openjdk.org>
Date:      2023-03-06 17:22:52 +0000
URL:       https://git.openjdk.org/jdk/commit/cfb0a25a4ee1a9cebd88c84fa622c46fe1c89bae
;;;","2023-03-08 02:39;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk20u/pull/14
Date: 2023-03-06 18:56:12 +0000;;;","2023-03-08 02:39;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk11u-dev/pull/1793
Date: 2023-03-06 18:49:45 +0000;;;","2023-03-08 02:39;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/1198
Date: 2023-03-06 18:44:23 +0000;;;","2023-03-08 10:32;serb;Fix request (20u, 17u, 11u)

Clean backport.
This is the fix for a problem (regression) introduced by the JDK 15 and then backported to 11.0.9.
The fiix verified by the new test, the ""java/time"" tests are green.

Review 20u: https://github.com/openjdk/jdk20u/pull/14
Review 17u-dev: https://github.com/openjdk/jdk17u-dev/pull/1198
Review 11u-dev: https://github.com/openjdk/jdk11u-dev/pull/1793
;;;",,,,,,,,,,,,,,,,,,,,,,,,
"Fixpath confused if unix root contains ""/jdk""",JDK-8303427,5094392,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,erikj,webbuggrp,webbuggrp,2023-02-16 11:30,2023-09-12 11:22,2023-10-01 09:56,2023-09-01 10:14,21,,,,,,,,22,infrastructure,,0,21ea,additional-information-received,dcsaw,reproducer-yes,webbug,,,,,,,,,,,,"ADDITIONAL SYSTEM INFORMATION :
Windows 10
Cygwin build environment

A DESCRIPTION OF THE PROBLEM :
I'm working on a patch for JDK-8302659. I tried to run an individual test directory like so:

make test TEST=""jdk/java/net/SocketOption""

Which resulted in this error:

Error: Unexpected exception occurred! java.nio.file.InvalidPathException: Illegal char <:> at index 5: testD:\cygwin\cygwin64\jdk\java\net\SocketOption
java.nio.file.InvalidPathException: Illegal char <:> at index 5: testD:\cygwin\cygwin64\jdk\java\net\SocketOption
	at java.base/sun.nio.fs.WindowsPathParser.normalize(WindowsPathParser.java:182)
	at java.base/sun.nio.fs.WindowsPathParser.parse(WindowsPathParser.java:153)
	at java.base/sun.nio.fs.WindowsPathParser.parse(WindowsPathParser.java:77)
	at java.base/sun.nio.fs.WindowsPath.parse(WindowsPath.java:92)
	at java.base/sun.nio.fs.WindowsFileSystem.getPath(WindowsFileSystem.java:232)
	at java.base/java.nio.file.Path.of(Path.java:147)
	at com.sun.javatest.regtest.config.TestManager$TestSpec.of(TestManager.java:201)
	at com.sun.javatest.regtest.tool.Tool$83.process(Tool.java:1014)
	at com.sun.javatest.regtest.tool.OptionDecoder.decodeArgs(OptionDecoder.java:84)
	at com.sun.javatest.regtest.tool.Tool.run(Tool.java:1072)
	at com.sun.javatest.regtest.tool.Tool.main(Tool.java:147)
	at com.sun.javatest.regtest.Main.main(Main.java:46)

I found jtreg.cmdline in the test-support directory. It looks like this:

( /jdk/jdk/build/windows-x86_64-server-release/fixpath exec /cygdrive/c/progra~1/ecee71~1/jdk-19~1.7-h/bin/java.exe -Xms64M -Xmx1600M -Duser.language=en -Duser.country=US -XX:+UnlockDiagnosticVMOptions -XX:-VerifySharedSpaces -XX:SharedArchiveFile=/jdk/jdk/build/windows-x86_64-server-release/configure-support/classes.jsa -Xshare:auto -Xmx768m -Dprogram=jtreg -jar /jdk/jtreg/lib/jtreg.jar -vmoption:-Xmx768m -agentvm -verbose:fail,error,summary -retain:fail,error -concurrency:4 -timeoutFactor:4 -vmoption:-XX:MaxRAMPercentage=6.25 -vmoption:-Dtest.boot.jdk=""/cygdrive/c/progra~1/ecee71~1/jdk-19~1.7-h"" -vmoption:-Djava.io.tmpdir=""/jdk/jdk/build/windows-x86_64-server-release/test-support/jtreg_test_jdk_java_net_SocketOption/tmp"" -automatic -ignore:quiet -e:JIB_DATA_DIR -e:_NT_SYMBOL_PATH -ea -esa -nativepath:/jdk/jdk/build/windows-x86_64-server-release/images/test/jdk/jtreg/native -exclude:/jdk/jdk/test/jdk/ProblemList.txt -e:TEST_IMAGE_DIR=/jdk/jdk/build/windows-x86_64-server-release/images/test -testjdk:/jdk/jdk/build/windows-x86_64-server-release/images/jdk -dir:/jdk/jdk -reportDir:/jdk/jdk/build/windows-x86_64-server-release/test-results/jtreg_test_jdk_java_net_SocketOption -workDir:/jdk/jdk/build/windows-x86_64-server-release/test-support/jtreg_test_jdk_java_net_SocketOption -report:files ${JTREG_STATUS} test/jdk/java/net/SocketOption && echo $? > /jdk/jdk/build/windows-x86_64-server-release/test-results/jtreg_test_jdk_java_net_SocketOption/exitcode.txt || echo $? > /jdk/jdk/build/windows-x86_64-server-release/test-results/jtreg_test_jdk_java_net_SocketOption/exitcode.txt )

Note that the directory name is correct at that point. Replacing 'exec' with 'print' confirms that fixpath is mangling the test name incorrectly.

The fixpath script that was generated by 'make configure' looks like this:

#!/bin/bash
export PATH=""$PATH:/usr/local/bin:/usr/bin:/cygdrive/c/Program Files/Eclipse Adoptium/jdk-17.0.6.10-hotspot/bin:/cygdrive/c/Program Files (x86)/Intel/iCLS Client:/cygdrive/c/Program Files/Intel/iCLS Client:/cygdrive/c/Program Files/Broadcom/Broadcom 802.11 Network Adapter:/cygdrive/c/Windows/system32:/cygdrive/c/Windows:/cygdrive/c/Windows/System32/Wbem:/cygdrive/c/Windows/System32/WindowsPowerShell/v1.0:/cygdrive/c/Program Files/WIDCOMM/Bluetooth Software:/cygdrive/c/Program Files/WIDCOMM/Bluetooth Software/syswow64:/cygdrive/c/Program Files/Intel/Intel(R) Management Engine Components/DAL:/cygdrive/c/Program Files/Intel/Intel(R) Management Engine Components/IPT:/cygdrive/c/Program Files (x86)/Intel/Intel(R) Management Engine Components/DAL:/cygdrive/c/Program Files (x86)/Intel/Intel(R) Management Engine Components/IPT:/cygdrive/c/Program Files/Acer/Remote Files:/cygdrive/c/Program Files/Microsoft SQL Server/Client SDK/ODBC/110/Tools/Binn:/cygdrive/c/Program Files (x86)/GNU/GnuPG/pub:/cygdrive/c/Program Files (x86)/NVIDIA Corporation/PhysX/Common:/cygdrive/c/Program Files/Microsoft SQL Server/110/Tools/Binn:/cygdrive/c/WINDOWS/system32:/cygdrive/c/WINDOWS:/cygdrive/c/WINDOWS/System32/Wbem:/cygdrive/c/WINDOWS/System32/WindowsPowerShell/v1.0:/cygdrive/c/Program Files (x86)/Microsoft SQL Server/130/Tools/Binn:/cygdrive/c/Program Files/Microsoft SQL Server/130/Tools/Binn:/cygdrive/c/Program Files (x86)/Microsoft SQL Server/130/DTS/Binn:/cygdrive/c/Program Files/Microsoft SQL Server/130/DTS/Binn:/cygdrive/c/Program Files/Microsoft SQL Server/Client SDK/ODBC/130/Tools/Binn:/cygdrive/c/Program Files (x86)/Microsoft SQL Server/140/Tools/Binn:/cygdrive/c/Program Files/Microsoft SQL Server/140/Tools/Binn:/cygdrive/c/Program Files/Microsoft SQL Server/140/DTS/Binn:/cygdrive/c/WINDOWS/System32/OpenSSH:/cygdrive/c/Program Files/Git/cmd:/cygdrive/c/Program Files/Azure Data Studio/bin:/cygdrive/c/Program Files (x86)/Pulse Secure/VC142.CRT/X64:/cygdrive/c/Program Files (x86)/Pulse Secure/VC142.CRT/X86:/cygdrive/c/Program Files/TortoiseSVN/bin:/cygdrive/c/Program Files (x86)/Common Files/Pulse Secure/TNC Client Plugin:/cygdrive/c/Program Files/Docker/Docker/resources/bin:/cygdrive/c/ProgramData/DockerDesktop/version-bin:/cygdrive/c/Program Files (x86)/Microsoft SQL Server/160/DTS/Binn:/cygdrive/c/Program Files/PowerShell/7:/cygdrive/c/Users//scoop/shims:/cygdrive/c/Users//AppData/Local/Microsoft/WindowsApps:/cygdrive/c/Users//AppData/Local/Microsoft/WindowsApps:/cygdrive/c/Program Files/Azure Data Studio/bin""
. /jdk/jdk/make/scripts/fixpath.sh -e /usr/bin/cygpath -p /cygdrive -r D:\\cygwin\\cygwin64 -t /tmp -c /cygdrive/c/Windows/system32/cmd.exe -q ""$@""



FREQUENCY : always


",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8302659,,,,,,,,,,,,,,,,generic,,,,,,,,,,windows,,,,,,"0|i30f8b:",9223372036854775807,b14,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@429c566,,,,,,,,,"2023-02-27 23:24;tongwan;Requested more details of reproducing the issue from the submitter.;;;","2023-02-28 22:21;tongwan;Additional information from the submitter:
The code is cloned from the official OpenJDK repo: https://github.com/openjdk/jdk

The commands come from the official build docs: https://github.com/openjdk/jdk/blob/master/doc/building.md
;;;","2023-03-01 06:22;erikj;My guess is that fixpath gets confused by the rather unusual directory this user is using for their jdk source dir: ""/jdk/jdk"". When trying to find absolute paths that need rewrite in the cmdline, it probably looks for ""/jdk"" and finds that in the test path, assumes that ""/jdk/java/net/SocketOption"" is an absolute path anchored at the root of the cygwin filesystem and rewrites it. 

I'm not sure what we can do about it without losing the ability to detect paths in cmdlines. A simple workaround for the user would be to use a different top level directory for the JDK source code.;;;","2023-08-28 16:54;erikj;This happens when a directory exists in the ""unix"" root with the same name as a directory in the ""test"" dir. Fixpath sees a string like this:

test/jdk/foo

It looks for the first `/` and checks if the first element following that, until the next `/` is an existing directory in the file system root. In this case, the reporter had a directory named ""/jdk"" which satisfies this heuristic check.

My suggested fix is to look at the prefix part, ""test"" in this case, and see if that itself is a valid path in the current working directory, as that would indicate that the string is intended to be a relative path.

I think we also need to account for possible prefixes with `:` and `=` here to handle a string like:

jtreg:test/jdk/foo

In that case we need to remove anything up to the last `:` before we try to match it as a relative directory.

Changing the heuristics of fixpath is rather sensitive and risky. I will post a review with this suggestion, but it will probably need a bit of testing by multiple people before it's safe to integrate.;;;","2023-08-28 17:22;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/15461
Date: 2023-08-29 00:16:46 +0000;;;","2023-09-01 10:14;dukebot;Changeset: 2f7c65ec
Author:    Erik Joelsson <erikj@openjdk.org>
Date:      2023-09-01 17:12:56 +0000
URL:       https://git.openjdk.org/jdk/commit/2f7c65ec48dc35d75eed8af411d482ba40de70dc
;;;",,,,,,,,,,,,,,,,,,,,,,,,,
[BACKOUT] 8303133: Update ProcessTools.startProcess(...) to exit early if process exit before linePredicate is printed.,JDK-8303421,5095263,Bug,Resolved,JDK,JDK,software,duke,,,P1,Fixed,lmesnik,lmesnik,lmesnik,2023-02-28 20:25,2023-03-06 11:44,2023-10-01 09:56,2023-02-28 21:23,21,,,,,,,,21,hotspot,,0,,,,,,,,,,,,,,,,,The fix break some tests in tire3,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8303133,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i30klv:",9223372036854775807,b12,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@78d03d9a,,,,,,,,,"2023-02-28 20:48;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/12799
Date: 2023-03-01 04:40:28 +0000;;;","2023-02-28 21:23;dukebot;Changeset: 3aeefbf1
Author:    Leonid Mesnik <lmesnik@openjdk.org>
Date:      2023-03-01 05:21:45 +0000
URL:       https://git.openjdk.org/jdk/commit/3aeefbf1defe95113a8abe3d3d11fdf3205bfd3b
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
[lworld] Fix JVM crash at Unsafe_FinishPrivateBuffer,JDK-8303416,5095255,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,xgong,xgong,xgong,2023-02-28 18:09,2023-03-13 08:47,2023-10-01 09:56,2023-03-13 08:47,repo-valhalla,,,,,,,,repo-valhalla,hotspot,,0,c2,lworld,valhalla,,,,,,,,,,,,,,"JVM crash with following assertion failure:
```
#  Internal Error (valhalla/src/hotspot/share/prims/unsafe.cpp:388), pid=29517, tid=29518
#  assert(v->mark().is_larval_state()) failed: must be a larval value
#
# JRE version: OpenJDK Runtime Environment (21.0) (fastdebug build 21-internal-git-05e4d0dba)
# Java VM: OpenJDK 64-Bit Server VM (fastdebug 21-internal-git-05e4d0dba, mixed mode, compressed oops, compressed class ptrs, g1 gc, linux-aarch64)
# Problematic frame:
# V  [libjvm.so+0x1a92a64]  Unsafe_FinishPrivateBuffer+0xc0
```
When running following java test:
```
import java.lang.reflect.*;

import jdk.internal.misc.Unsafe;

public class Test {
    private static int LENGTH = 10000;
    static byte[] arr = new byte[LENGTH];

    static {
        for (int i = 0; i < LENGTH; i++) {
            arr[i] = (byte) i;
        }
    }

    public static byte test(byte b) {
        Value obj = new Value();
        obj = Unsafe.getUnsafe().makePrivateBuffer(obj);
        Unsafe.getUnsafe().putByte(obj, obj.offset, b);
        obj = Unsafe.getUnsafe().finishPrivateBuffer(obj);
        return Unsafe.getUnsafe().getByte(obj, obj.offset);
    }

    public static void main(String[] args) {
        byte actual = 0;
        for (int i = 0; i < LENGTH; i++) {
            actual += test(arr[i]);
        }
    }

    primitive static class Value {
        byte field = 0;
        static long offset = fieldOffset();

        private static long fieldOffset() {
            try {
                var f = Value.class.getDeclaredField(""field"");
                return Unsafe.getUnsafe().objectFieldOffset(f);
            } catch (Exception e) {
                System.out.println(e);
            }
            return -1L;
        }
    }
}
```
The root cause is the allocated buffer created by ""makePrivateBuffer"" is optimized to the default oop of the primitive class in C2 compiler. The optimization miss the larval state of the allocated buffer, which is not marked to the default oop.  The assertion happens when the ""finishPrivateBuffer"" is compiled by interpreter, and the failure happens when it checks whether the expected larval state is set.
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8239003,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i30kk3:",9223372036854775807,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2023-02-28 22:19;thartmann;This is related to JDK-8239003. The private buffer code is currently broken.;;;","2023-02-28 22:33;xgong;Thanks for looking at this issue! I have prepared a patch to fix it by adding back the larval state if the private buffer is optimized out with the default oop as the replacement. And it seems it can also be fixed once JDK-8239003 is fixed. As I noticed that JDK-8239003 is not opened yet, do you think it's necessary to fix this issue temporarily now?;;;","2023-02-28 22:49;thartmann;Sure, fixing this independently is fine. I just wanted to point out that there a probably more issues. And maybe you can verify that your fix  does not conflict with JDK-8293800 (see https://github.com/openjdk/valhalla/compare/lworld...TobiHartmann:valhalla:JDK-8293800) which I'm hopefully integrating soon. Thanks!;;;","2023-02-28 22:57;xgong;Thanks! So I will push the patch soon as a separate fix. And we can re-see this issue once JDK-8239003 is fixed. And I didn't see any conflict with the patch you pointed out. Thanks!;;;","2023-02-28 23:29;thartmann;Sounds good, I can have a look at the PR once it's ready.;;;","2023-03-02 01:08;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/valhalla/pull/828
Date: 2023-03-02 09:00:41 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,,
(fs) Ignore polling interval sensitivity modifiers in PollingWatchService,JDK-8303413,5095252,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,bpb,bpb,bpb,2023-02-28 16:19,2023-04-28 03:46,2023-10-01 09:56,2023-03-03 10:35,21,,,,,,,,21,core-libs,,0,noreg-other,,,,,,,,,,,,,,,,"JDK-8285956 changed the default sensitivity from medium to high so the need to be able to adjust it now is relatively minor. Thus it is proposed to remove the use of polling interval sensitivity modifiers in PollingWatchService. Furthermore, this implementation is currently used only on macOS which it is hoped will eventually have a WatchService based on the native file system event facility.",,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8303175,,JDK-8303471,,,,,,,,JDK-8293067,JDK-8302806,,,,,,,,,,,,,,,,,,,,generic,,,,,,,,,,generic,,,,,,"0|i30kjf:",9223372036854775807,b13,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@674604a9,,,,,,,,,"2023-02-28 16:20;bpb;noreg-other: This change is covered by existing tests.;;;","2023-02-28 16:35;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/12795
Date: 2023-03-01 00:27:46 +0000;;;","2023-03-03 10:35;dukebot;Changeset: a04b1049
Author:    Brian Burkhalter <bpb@openjdk.org>
Date:      2023-03-03 18:33:58 +0000
URL:       https://git.openjdk.org/jdk/commit/a04b1049ffc29c2ab2ec1b39e70b72288a39b371
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,
Update linux_x64-to-linux_aarch64 cross compilation devkit at Oracle,JDK-8303412,5095250,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,mikael,mikael,mikael,2023-02-28 15:59,2023-07-31 23:51,2023-10-01 09:56,2023-02-28 16:52,,,,,,,,,21,infrastructure,,0,jdk17u-na,jdk20u-fix-request,jdk20u-fix-SQE-ok,jdk20u-fix-yes,,,,,,,,,,,,,Update the devkit used for cross compiling linux-aarch64 binaries on linux-x64 at Oracle.,,,,,,,,,,,JDK-8303529,JDK-8303502,JDK-8303492,JDK-8303751,,,,,,,,,,,,JDK-8303407,,,,,JDK-8303407,,,,,,,,,,,,,,,,,,,,,,,,,,aarch64,,,,,,,,,,linux,,,,,,"0|i30kiz:",9223372036854775807,b12,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@429c566,,,,,,,,,"2023-02-28 16:07;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/12793
Date: 2023-03-01 00:01:39 +0000;;;","2023-02-28 16:52;dukebot;Changeset: 65da2c5d
Author:    Mikael Vidstedt <mikael@openjdk.org>
Date:      2023-03-01 00:48:59 +0000
URL:       https://git.openjdk.org/jdk/commit/65da2c5d2dfea30e7d00b8f907f7abb5f6f887df
;;;","2023-03-01 10:12;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk20u/pull/10
Date: 2023-03-01 18:03:24 +0000;;;","2023-03-01 13:29;mikael;Fix Request

Backporting this Oracle-only fix to jdk20u to resolve a build problem. The risk is very low and does not affect any product bits.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,
JFR problem list entry for JDK-8247776 should be removed,JDK-8303411,5095249,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,mseledtsov,mseledtsov,mseledtsov,2023-02-28 15:56,2023-03-08 23:28,2023-10-01 09:56,2023-03-02 10:40,21,,,,,,,,21,hotspot,,0,noreg-self,noreg-trivial,,,,,,,,,,,,,,,"Issue ""JDK-8247776: JFR TestThreadContextSwitches.java failed ""RuntimeException: No events: expected false, was true"" has been closed as CNR, but the entry in test/jdk/ProblemList.txt has not been removed.

Just in case I will run repro prior to removal.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8247776,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i30kir:",9223372036854775807,b13,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@42995637,,,,,,,,,"2023-02-28 16:52;mseledtsov;  - test: jdk/jfr/event/os/TestThreadContextSwitches.java 
  - platform: windows-x64
  - likely an intermittent issue
  - additional command line options: None
  Ran 200 times on windows-x64, could not reproduce
;;;","2023-02-28 17:01;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/12796
Date: 2023-03-01 00:54:25 +0000;;;","2023-03-02 10:40;dukebot;Changeset: 2c7d2c0e
Author:    Mikhailo Seledtsov <mseledtsov@openjdk.org>
Date:      2023-03-02 18:38:50 +0000
URL:       https://git.openjdk.org/jdk/commit/2c7d2c0ea93f70d871d7242fcb190fe3f3fcb42d
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,
[AIX] Broken jdk8u build after JDK-8266391,JDK-8303408,5095246,Bug,Resolved,JDK,JDK,software,duke,,,P2,Fixed,tsteele,tsteele,tsteele,2023-02-28 15:00,2023-03-13 06:34,2023-10-01 09:56,2023-03-03 02:35,openjdk8u372,,,,,,,,openjdk8u372,core-svc,,0,jdk8u-critical-request,jdk8u-critical-yes,,,,,,,,,,,,,,,"The AIX build fails with the following error message, that appears to have happened after JDK-8266391 was backported to jdk8.

/home/hotspot/openjdk/jdk8u/jdk/src/share/classes/jdk/internal/platform/Metrics.java:57: error: cannot find symbol
        return SystemMetrics.instance();
               ^
  symbol:   variable SystemMetrics
  location: interface Metrics


The backport broke macosx as well, and the solution was to add an stub implementation of SystemMetrics for that platform.",,,,,,,,,,,JDK-8303800,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8304053,JDK-8266391,,,,JDK-8303828,,,,,,,,,,,,,,,,,,,,,,,,,,aix,,,,,,"0|i30ki3:",9223372036854775807,b05,,,,,,,,,,,"2023-03-01 04:57;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk8u-dev/pull/274
Date: 2023-03-01 12:51:25 +0000;;;","2023-03-02 02:25;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk8u/pull/33
Date: 2023-03-02 10:18:18 +0000;;;","2023-03-02 10:22;phh;Fix Request (8u).

On behalf of Deepa Kumari.

Effectively nop patch that defines an empty class to fix an AIX build failure.;;;","2023-03-03 02:27;sgehwolf;Low risk fix (not a feature implemented on AIX, returning null is fine). Critically approved for 8u372 which includes the cgroups v2 feature and JDK-8266391.;;;","2023-03-03 02:35;dukebot;Changeset: 4a837299
Author:    Deepa Kumari <dpakri181@gmail.com>
Committer: Severin Gehwolf <sgehwolf@openjdk.org>
Date:      2023-03-03 10:34:21 +0000
URL:       https://git.openjdk.org/jdk8u/commit/4a837299c68071be563e376efe6f12852bc130e7
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,
fix @returnss typo in ReflectionFactory,JDK-8303405,5095242,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,jlu,martin,martin,2023-02-28 12:43,2023-03-08 23:29,2023-10-01 09:56,2023-03-02 12:25,,,,,,,,,21,core-libs,,0,,,,,,,,,,,,,,,,,"./src/java.base/share/classes/jdk/internal/reflect/ReflectionFactory.java:482:     * @returnss the {@code writeReplace} MethodHandle or {@code null} if not found

1-byte fixes are the best!

BUT ... it shouldn't really be possible to have such typos in jdk sources, given the existence of doclint.  Bonus points for fixing that!",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i30kh7:",9223372036854775807,b13,,,,,,,,,,,"2023-02-28 16:30;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/12794
Date: 2023-03-01 00:24:31 +0000;;;","2023-03-01 15:47;prappo;> BUT ... it shouldn't really be possible to have such typos in jdk sources, given the existence of doclint. Bonus points for fixing that!

Whether DocLint is triggered depends on the configuration of the particular javac or javadoc run.;;;","2023-03-01 23:08;martin;> Whether DocLint is triggered depends on the configuration of the particular javac or javadoc run.

Sure, but ... we have the tools to trivially find and fix a large class of typos, but apparently those tools are never being run.  We need more code janitors!;;;","2023-03-02 12:25;dukebot;Changeset: 45d8a175
Author:    Justin Lu <jlu@openjdk.org>
Committer: Naoto Sato <naoto@openjdk.org>
Date:      2023-03-02 20:23:04 +0000
URL:       https://git.openjdk.org/jdk/commit/45d8a175b11bde953c8897c103d8c3cd6b26f9aa
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,
[JVMCI] thread is _thread_in_vm when committing JFR compilation event,JDK-8303357,5095192,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,dnsimon,dnsimon,dnsimon,2023-02-28 06:15,2023-03-28 01:14,2023-10-01 09:56,2023-03-01 02:49,19,20,21,,,,,,21,hotspot,,0,jfr,jvmci,oracle-triage-11,oracle-triage-17,oracle-triage-21,,,,,,,,,,,,"JDK-8280844 added a native-to-VM thread transition when committing a JFR compilation event. This is not necessary for a JVMCI compiler as it is already _thread_in_vm at the commit point. This is shown by the following assertion failure:

#  Internal Error (/b/b/e/main/jdk_tlda/open/src/hotspot/share/runtime/interfaceSupport.inline.hpp:97), pid=4974, tid=5013
#  assert(thread->thread_state() == _thread_in_native) failed: coming from wrong thread state

Stack: [0x000014376aff6000,0x000014376b1f7000],  sp=0x000014376b1f54b0,  free space=2045k
Native frames: (J=compiled Java code, j=interpreted, Vv=VM code, C=native code)
V  [libjvm.so+0xb1f1a2]  CompilerEvent::CompilationEvent::post(EventCompilation&, int, CompilerType, Method*, int, bool, bool, int, int)+0x192  (interfaceSupport.inline.hpp:97)
V  [libjvm.so+0xaf1ab9]  post_compilation_event(EventCompilation&, CompileTask*)+0x79
V  [libjvm.so+0xafb4fd]  CompileBroker::invoke_compiler_on_method(CompileTask*)+0xc7d
V  [libjvm.so+0xafc0b8]  CompileBroker::compiler_thread_loop()+0x5d8
V  [libjvm.so+0x106a7c6]  JavaThread::thread_main_inner()+0x206
V  [libjvm.so+0x1a6f260]  Thread::call_run()+0x100
V  [libjvm.so+0x1702eb3]  thread_native_entry(Thread*)+0x103",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8280844,,,,,,,,,,,,,,,,,,,,,,,,19,,,,,,,,"0|i30k63:",9223372036854775807,b12,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2023-02-28 07:11;thartmann;ILW = Assert due to invalid thread transition, with JVMCI and JFR, no workaround = MMH = P3;;;","2023-02-28 13:51;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/12787
Date: 2023-02-28 14:25:50 +0000;;;","2023-03-01 02:49;dukebot;Changeset: 2451c5a4
Author:    Doug Simon <dnsimon@openjdk.org>
Date:      2023-03-01 10:47:49 +0000
URL:       https://git.openjdk.org/jdk/commit/2451c5a4620d5aec0ea9bc52fee5f3a54eb89d62
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,
The Depend plugin does fully recompile when primitive type changes,JDK-8303355,5095189,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,jlahoda,jlahoda,jlahoda,2023-02-28 06:05,2023-03-08 23:28,2023-10-01 09:56,2023-03-02 01:43,20,21,,,,,,,21,infrastructure,,0,,,,,,,,,,,,,,,,,"When a primitive type is changed to a different primitive type in a public signature in the OpenJDK sources, the incremental build will not detect this change, and will not recompile the whole module, keeping references using the old type in other files.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i30k5f:",9223372036854775807,b13,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@429c566,,,,,,,,,"2023-03-01 02:20;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/12801
Date: 2023-03-01 10:12:41 +0000;;;","2023-03-02 01:43;dukebot;Changeset: dbb562d3
Author:    Jan Lahoda <jlahoda@openjdk.org>
Date:      2023-03-02 09:41:11 +0000
URL:       https://git.openjdk.org/jdk/commit/dbb562d3b128094cb5bca55237e1331e83526adb
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
addCertificatesToKeystore in KeystoreImpl.m needs CFRelease call in early potential CHECK_NULL return,JDK-8303354,5095188,Bug,Closed,JDK,JDK,software,duke,,,P3,Fixed,mbaesken,mbaesken,mbaesken,2023-02-28 05:56,2023-08-28 05:57,2023-10-01 09:56,2023-03-02 06:23,11,17,21,,,,,,21,security-libs,,0,jdk11u-fix-request,jdk11u-fix-yes,jdk17u-fix-request,jdk17u-fix-yes,,,,,,,,,,,,,We have a (potential) early return in addCertificatesToKeystore in KeystoreImpl.m . This is implemented by the CHECK_NULL macro. However this missed a CFRelease call.,,,,,,,,,,,JDK-8307914,JDK-8304392,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,generic,,,,,,,,,,os_x,,,,,,"0|i30k57:",9223372036854775807,b13,,,,,,,,,,,"2023-02-28 07:24;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/12788
Date: 2023-02-28 15:17:19 +0000;;;","2023-03-02 06:23;dukebot;Changeset: b51ea420
Author:    Matthias Baesken <mbaesken@openjdk.org>
Date:      2023-03-02 14:21:06 +0000
URL:       https://git.openjdk.org/jdk/commit/b51ea4204eaa18687e7712e87cdc92efbddfcb5b
;;;","2023-03-15 05:21;mbaesken;jdk17u backport request
I would like to have the patch in jdk17u-dev as well, because the issue is present there too. The backport is clean and low risk.;;;","2023-03-15 05:43;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/1202
Date: 2023-03-15 12:11:49 +0000;;;","2023-05-10 01:25;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk11u-dev/pull/1879
Date: 2023-05-10 08:15:49 +0000;;;","2023-05-10 01:57;mbaesken;jdk11u backport request
I would like to have the patch in jdk11u-dev as well, because the issue is present there too. The backport is clean and low risk.;;;",,,,,,,,,,,,,,,,,,,,,,,,,
[IR Framework] Add missing cpu feature avx512bw after JDK-8302681,JDK-8303351,5095185,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,jiefu,jiefu,jiefu,2023-02-28 05:36,2023-03-06 11:43,2023-10-01 09:56,2023-02-28 06:46,21,,,,,,,,21,hotspot,,0,ir-framework,noreg-self,oracle-triage-21,tencent-interest,,,,,,,,,,,,,"The following test fails with these violations:

testlibrary_tests/ir_framework/tests/TestCPUFeatureCheck.java 


Violations (3)
--------------
 - Provided CPU feature is not in verified list: avx512bw in @IR rule 1 at public static void ir_framework.tests.TestCPUFeatureCheck.test3()
 - Provided CPU feature is not in verified list: avx512bw in @IR rule 1 at public static void ir_framework.tests.TestCPUFeatureCheck.test2()
 - Provided CPU feature is not in verified list: avx512bw in @IR rule 1 at public static void ir_framework.tests.TestCPUFeatureCheck.test1()

        at compiler.lib.ir_framework.driver.TestVMProcess.throwTestVMException(TestVMProcess.java:233)
        at compiler.lib.ir_framework.driver.TestVMProcess.checkTestVMExitCode(TestVMProcess.java:219)
        at compiler.lib.ir_framework.driver.TestVMProcess.<init>(TestVMProcess.java:74)
        at compiler.lib.ir_framework.TestFramework.runTestVM(TestFramework.java:747)
        at compiler.lib.ir_framework.TestFramework.start(TestFramework.java:719)
        at compiler.lib.ir_framework.TestFramework.start(TestFramework.java:339)
        at compiler.lib.ir_framework.TestFramework.runWithFlags(TestFramework.java:245)
        at ir_framework.tests.TestCPUFeatureCheck.main(TestCPUFeatureCheck.java:53)
        at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
        at java.base/java.lang.reflect.Method.invoke(Method.java:578)
        at com.sun.javatest.regtest.agent.MainActionHelper$AgentVMRunnable.run(MainActionHelper.java:312)
        at java.base/java.lang.Thread.run(Thread.java:1623)",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8303400,,,JDK-8302681,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i30k4j:",9223372036854775807,b12,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2023-02-28 05:47;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/12785
Date: 2023-02-28 13:39:26 +0000;;;","2023-02-28 06:46;dukebot;Changeset: 4a415ad5
Author:    Jie Fu <jiefu@openjdk.org>
Date:      2023-02-28 14:44:38 +0000
URL:       https://git.openjdk.org/jdk/commit/4a415ad5848a33137c5c51ee0a843a7025bc1518
;;;","2023-02-28 07:09;thartmann;ILW = Test fails due to unexpected CPU feature (test bug), single test, no workaround = MLH = P4;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,
Fix mistyped {@code},JDK-8303350,5095184,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,prappo,prappo,prappo,2023-02-28 05:28,2023-03-06 11:43,2023-10-01 09:56,2023-02-28 07:42,21,,,,,,,,21,core-libs,,0,noreg-doc,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i30k4b:",9223372036854775807,b12,,,,,,,,,,,"2023-02-28 05:40;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/12784
Date: 2023-02-28 13:31:06 +0000;;;","2023-02-28 07:42;dukebot;Changeset: dc5ea6ae
Author:    Pavel Rappo <prappo@openjdk.org>
Date:      2023-02-28 15:40:05 +0000
URL:       https://git.openjdk.org/jdk/commit/dc5ea6aeb500d531b4ba49c8e95bf97744cc6c33
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
"After JDK-8302760, G1 heap verification does not exit VM after errors",JDK-8303344,5095177,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,tschatzl,tschatzl,tschatzl,2023-02-28 04:21,2023-03-06 11:45,2023-10-01 09:56,2023-03-01 04:36,21,,,,,,,,21,hotspot,,0,gc-g1,,,,,,,,,,,,,,,,After JDK-8302760 heap verification does not exit the VM unless there is a bad reference.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8302760,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i30k2r:",9223372036854775807,b12,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6b00f96c,,,,,,,,,"2023-02-28 04:32;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/12783
Date: 2023-02-28 12:25:18 +0000;;;","2023-03-01 04:36;dukebot;Changeset: 8b86e1ee
Author:    Thomas Schatzl <tschatzl@openjdk.org>
Date:      2023-03-01 12:34:53 +0000
URL:       https://git.openjdk.org/jdk/commit/8b86e1ee11818e47bbaac14631f645fd298c3252
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
C2: crash in SubTypeCheckNode::sub() at IGVN split if,JDK-8303279,5095109,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,roland,karianna,karianna,2023-02-27 18:46,2023-08-15 22:10,2023-10-01 09:56,2023-07-11 09:01,17.0.6,18.0.1.1,21,22,,,,,22,hotspot,,0,amazon-interest,c2,hgupdate-sync,intermittent,jdk17u-fix-request,jdk17u-fix-yes,oracle-triage-21,,,,,,,,,,"Originally reported at https://github.com/adoptium/containers/issues/336 and at  https://youtrack.jetbrains.com/issue/KT-54693/SIGSEGV-0xb-at-pc0x0000000000000000-C2-CompilerThread0

#
# A fatal error has been detected by the Java Runtime Environment:
#
#  SIGSEGV (0xb) at pc=0x0000000000000000, pid=1, tid=14
#
# JRE version: OpenJDK Runtime Environment Temurin-17.0.6+10 (17.0.6+10) (build 17.0.6+10)
# Java VM: OpenJDK 64-Bit Server VM Temurin-17.0.6+10 (17.0.6+10, mixed mode, sharing, tiered, compressed oops, compressed class ptrs, serial gc, linux-amd64)
# Problematic frame:
# C  0x0000000000000000
#
# Core dump will be written. Default location: /core.%e.1.%t
#
# JFR recording file will be written. Location: //hs_err_pid1.jfr
#
# If you would like to submit a bug report, please visit:
#   https://github.com/adoptium/adoptium-support/issues
#

---------------  S U M M A R Y ------------

Command Line: -Xms192m -Xmx192m -XX:ErrorFile=/jvm-dumps/hs_err_pid%p.log -javaagent:/opt/dd-java-agent.jar -Ddd.version=20230219.1 -Ddd.service=svc-ui-sync dev.r36.mercury.uisync.MainKt

Host: Intel(R) Xeon(R) CPU @ 2.20GHz, 4 cores, 728M, Ubuntu 22.04.1 LTS
Time: Fri Feb 24 23:40:19 2023 UTC elapsed time: 510178.339438 seconds (5d 21h 42m 58s)

---------------  T H R E A D  ---------------

Current thread (0x00007f30a806d090):  JavaThread ""C2 CompilerThread0"" daemon [_thread_in_native, id=14, stack(0x00007f30ac417000,0x00007f30ac517000)]


Current CompileTask:
C2:510178339 18521   !   4       io.grpc.kotlin.ServerCalls$serverCallListener$requests$1::invokeSuspend (285 bytes)

Stack: [0x00007f30ac417000,0x00007f30ac517000],  sp=0x00007f30ac512988,  free space=1006k

siginfo: si_signo: 11 (SIGSEGV), si_code: 1 (SEGV_MAPERR), si_addr: 0x0000000000000000

Register to memory mapping:

RAX=0x0000000000000011 is an unknown value
RBX=0x00007f3078023228 points into unknown readable memory: 0x00007f30aeefebb8 | b8 eb ef ae 30 7f 00 00
RCX=0x0 is NULL
RDX=0x00007f30786db101 points into unknown readable memory: b0 6d 78 30 7f 00 00
RSP=0x00007f30ac512988 is pointing into the stack for thread: 0x00007f30a806d090
RBP=0x00007f30ac5129d0 is pointing into the stack for thread: 0x00007f30a806d090
RSI=0x00007f30ae0ca250: <offset 0x00000000003df250> in /opt/java/openjdk/lib/server/libjvm.so at 0x00007f30adceb000
RDI=0x00007f3078023228 points into unknown readable memory: 0x00007f30aeefebb8 | b8 eb ef ae 30 7f 00 00
R8 =0x00007f30786db1a0 points into unknown readable memory: 0x00007f30aeeff288 | 88 f2 ef ae 30 7f 00 00
R9 =0x00007f3078ae62d8 points into unknown readable memory: 0x00007f30aef9c0d0 | d0 c0 f9 ae 30 7f 00 00
R10=0x00007f30784623e8 points into unknown readable memory: 0x00007f30aef9c1a0 | a0 c1 f9 ae 30 7f 00 00
R11=0x00007f3078c0a4a0 points into unknown readable memory: 0x00007f30aef86bd8 | d8 6b f8 ae 30 7f 00 00
R12=0x00007f3078699160 points into unknown readable memory: 0x00007f30aef79aa0 | a0 9a f7 ae 30 7f 00 00
R13=0x00007f3079237610 points into unknown readable memory: 0x00007f30aef9c1a0 | a0 c1 f9 ae 30 7f 00 00
R14=0x00007f3078ae6320 points into unknown readable memory: 0x00007f30aef81d50 | 50 1d f8 ae 30 7f 00 00
R15=0x00007f30786db1a0 points into unknown readable memory: 0x00007f30aeeff288 | 88 f2 ef ae 30 7f 00 00
",,,,,,,,,,,JDK-8314101,JDK-8312910,JDK-8312015,JDK-8314362,JDK-8312517,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8313262,,,,"2023-06-21 00:23;simonis;3992644_ideal.txt.gz;https://bugs.openjdk.org/secure/attachment/104378/3992644_ideal.txt.gz","2023-06-21 00:23;simonis;3992644_inlining.txt;https://bugs.openjdk.org/secure/attachment/104379/3992644_inlining.txt","2023-06-23 02:00;roland;TestCrashAtIGVNSplitIfSubType.java;https://bugs.openjdk.org/secure/attachment/104402/TestCrashAtIGVNSplitIfSubType.java","2023-06-20 10:58;simonis;grpc-test.zip;https://bugs.openjdk.org/secure/attachment/104369/grpc-test.zip","2023-02-27 18:45;karianna;hs_err_pid1.log;https://bugs.openjdk.org/secure/attachment/102815/hs_err_pid1.log","2023-06-20 10:58;simonis;hs_err_pid1152816.log;https://bugs.openjdk.org/secure/attachment/104367/hs_err_pid1152816.log","2023-06-27 13:23;vlivanov;hs_err_pid2467188.log;https://bugs.openjdk.org/secure/attachment/104432/hs_err_pid2467188.log","2023-06-20 10:57;simonis;hs_err_pid3992644.log;https://bugs.openjdk.org/secure/attachment/104365/hs_err_pid3992644.log","2023-06-20 10:58;simonis;replay_pid1152816.log;https://bugs.openjdk.org/secure/attachment/104368/replay_pid1152816.log","2023-06-27 13:23;vlivanov;replay_pid2467188.log;https://bugs.openjdk.org/secure/attachment/104431/replay_pid2467188.log","2023-06-20 10:57;simonis;replay_pid3992644.log;https://bugs.openjdk.org/secure/attachment/104366/replay_pid3992644.log",,,,,,,,,,,,generic,,,,,,"0|i30jnn:",9223372036854775807,b06,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2023-02-27 18:47;karianna;Kotlin folks suspect it is a genuine C2 compiler crash - also see commentary here: https://youtrack.jetbrains.com/issue/KT-54693/SIGSEGV-0xb-at-pc0x0000000000000000-C2-CompilerThread0;;;","2023-02-27 23:04;thartmann;There is not much we can do here without a reproducer. [~karianna], was a replay compilation file (replay_pid...log) generated that could be shared?;;;","2023-02-27 23:36;thartmann;In addition, could the reporter(s) try to reproduce with a debug VM build?

Given, that this is with Kotlin and the reporter mentioned ""we generate code, which is not possible to write in Java - we have non-canonical loops or jumps to catch blocks, which are likely to not be covered by tests"", it could be a problem with the handling of irreducible loops (JDK-8280126, [~epeter]).;;;","2023-02-28 16:38;karianna;I'll contact the Kotlin folks and see if they can produce a reproducer or at least that debug build

UPDATE:  I asked for more details at  https://youtrack.jetbrains.com/issue/KT-54693/;;;","2023-02-28 22:16;thartmann;Thanks, Martijn. It would also be interesting to know if this is a recent regression in JDK 17u or an old issue.

Pre-ILW = Crash during C2 compilation, intermittent and non-reproducible with Kotlin workload, no known workaround but disable compilation of affected method = HLM = P3;;;","2023-06-12 01:20;simonis;This seems to be related to the following two Corretto issues:

https://github.com/corretto/corretto-17/issues/110
https://github.com/corretto/corretto-17/issues/57

Especially the second one has a pretty long discussion thread and some more hs_err files. For some people, excluding the following methods from JIT-compilation seems to have helped to mitigate the problem:
```
-XX:CompileCommand=""exclude,kotlinx.coroutines.flow.AbstractFlow::collect""
-XX:CompileCommand=""exclude,kotlinx.coroutines.flow.SafeFlow::collectSafely""
-XX:CompileCommand=""exclude,kotlinx.coroutines.reactive.PublisherAsFlow::collectImpl""
-XX:CompileCommand=""exclude,io.grpc.kotlin.ServerCalls*::*""
```
;;;","2023-06-20 10:59;simonis;I've attached a stripped down reproducer from https://github.com/corretto/corretto-17/issues/110 provided by Umut Kocasarac [1].

Building:
```
$ unzip grpc-test.zip
$ cd grpc-test
$ mvn clean package spring-boot:repackage
```

To build and run the test you need JDK 17+ and Maven 3.9.2+.

Running:
```
terminal1:$ java -XX:CompileCommand='PrintInlining,io.grpc.kotlin.ServerCalls$serverCallListener$requests$1::invokeSuspend' -XX:CICompilerCount=16 -Dport=8008 -jar grpc-server/target/grpc-server-1.0-SNAPSHOT.jar
...
>>> server started
...
>>> received 100011
>>> time diff PT1M32.67601825S
>>> rate 6207
...
```

```
terminal2:$ java -showversion -Dport=8008 -jar grpc-client/target/grpc-client-1.0-SNAPSHOT.jar
```

Usually the server started in `terminal1` will crash in about one out of ten runs. Once you get no more compiles of `ServerCalls$serverCallListener$requests$1::invokeSuspend` (indicated by the output of `>>> received ..` lines without interleaving compilations) in the first terminal, you can kill and restart the server and hope for a crash in the next run :)

[1] https://github.com/umutkocasarac
;;;","2023-06-20 10:59;simonis;I managed to get the attached reproducer crashing with product and fastdebug builds of JDK 17, a product build of JDK 18 and a slowdebug build of JDK 21 although the crash frequency seems to be the highest with JDK 17. The stack traces for all versions look the same (except for product builds which have no stack trace in the hs_err file):

```
#  Internal Error (/priv/simonisv/OpenJDK/Git/jdk17u-dev/src/hotspot/share/opto/type.hpp:1735), pid=3992644, tid=3993484
#  assert(_base >= OopPtr && _base <= AryPtr) failed: Not a Java pointer
#
# JRE version: OpenJDK Runtime Environment (17.0.9) (fastdebug build 17.0.9-internal+0-adhoc.simonisv.jdk17u-dev)
...
Current CompileTask:
C2:  45915 5854   !   4       io.grpc.kotlin.ServerCalls$serverCallListener$requests$1::invokeSuspend (285 bytes)

Stack: [0x00007ffef67e8000,0x00007ffef68e9000],  sp=0x00007ffef68e3f20,  free space=1007k
Native frames: (J=compiled Java code, j=interpreted, Vv=VM code, C=native code)
V  [libjvm.so+0x195deb2]  SubTypeCheckNode::sub(Type const*, Type const*) const+0x3b2
V  [libjvm.so+0xe330e7]  split_if(IfNode*, PhaseIterGVN*)+0x3f7
V  [libjvm.so+0xe350d8]  IfNode::Ideal_common(PhaseGVN*, bool) [clone .part.0]+0x828
V  [libjvm.so+0xe401ea]  IfNode::Ideal(PhaseGVN*, bool)+0x3a
V  [libjvm.so+0x161ff78]  PhaseIterGVN::transform_old(Node*)+0xb8
V  [libjvm.so+0x16190ce]  PhaseIterGVN::optimize()+0x7e
V  [libjvm.so+0xa5303b]  Compile::Optimize()+0x90b
V  [libjvm.so+0xa54fb6]  Compile::Compile(ciEnv*, ciMethod*, int, bool, bool, bool, bool, bool, DirectiveSet*)+0x1306
V  [libjvm.so+0x87bc66]  C2Compiler::compile_method(ciEnv*, ciMethod*, int, bool, DirectiveSet*)+0x646
V  [libjvm.so+0xa66daa]  CompileBroker::invoke_compiler_on_method(CompileTask*)+0xd1a
V  [libjvm.so+0xa67b98]  CompileBroker::compiler_thread_loop()+0x628
V  [libjvm.so+0x1a191fc]  JavaThread::thread_main_inner()+0x36c
V  [libjvm.so+0x1a194cb]  JavaThread::run()+0x25b
V  [libjvm.so+0x1a1ed54]  Thread::call_run()+0x104
V  [libjvm.so+0x1597d8c]  thread_native_entry(Thread*)+0x10c
...
```
See attached hs_err_pid3992644.log

```
#  Internal Error (/priv/simonisv/OpenJDK/Git/jdk/src/hotspot/share/opto/type.hpp:2059), pid=1152816, tid=1154124
#  assert(_base >= OopPtr && _base <= AryPtr) failed: Not a Java pointer
#
# JRE version: OpenJDK Runtime Environment (21.0) (slowdebug build 21-internal-adhoc.simonisv.jdk)
...
Current CompileTask:
C2:  91009 8214   !   4       io.grpc.kotlin.ServerCalls$serverCallListener$requests$1::invokeSuspend (285 bytes)

Stack: [0x00007fff1306b000,0x00007fff1316c000],  sp=0x00007fff13166fe0,  free space=1007k
Native frames: (J=compiled Java code, j=interpreted, Vv=VM code, C=native code)
V  [libjvm.so+0x61d636]  Type::is_oopptr() const+0x4e  (type.hpp:2059)
V  [libjvm.so+0x14cee55]  SubTypeCheckNode::sub(Type const*, Type const*) const+0x53  (subtypenode.cpp:37)
V  [libjvm.so+0x14c66b0]  SubNode::Value(PhaseGVN*) const+0xa6  (subnode.cpp:107)
V  [libjvm.so+0xcdacb3]  split_if(IfNode*, PhaseIterGVN*)+0x2ce  (ifnode.cpp:111)
V  [libjvm.so+0xce044c]  IfNode::Ideal_common(PhaseGVN*, bool)+0x128  (ifnode.cpp:1438)
V  [libjvm.so+0xce0496]  IfNode::Ideal(PhaseGVN*, bool)+0x30  (ifnode.cpp:1448)
V  [libjvm.so+0x1298244]  PhaseGVN::apply_ideal(Node*, bool)+0x70  (phaseX.cpp:667)
V  [libjvm.so+0x129a0fd]  PhaseIterGVN::transform_old(Node*)+0x12d  (phaseX.cpp:1196)
V  [libjvm.so+0x12998df]  PhaseIterGVN::optimize()+0x16b  (phaseX.cpp:1045)
V  [libjvm.so+0x93f89e]  Compile::Optimize()+0xce0  (compile.cpp:2378)
V  [libjvm.so+0x9385fa]  Compile::Compile(ciEnv*, ciMethod*, int, Options, DirectiveSet*)+0x16ca  (compile.cpp:842)
V  [libjvm.so+0x806ab4]  C2Compiler::compile_method(ciEnv*, ciMethod*, int, bool, DirectiveSet*)+0x1a0  (c2compiler.cpp:118)
V  [libjvm.so+0x958bc8]  CompileBroker::invoke_compiler_on_method(CompileTask*)+0xa04  (compileBroker.cpp:2265)
V  [libjvm.so+0x9576fa]  CompileBroker::compiler_thread_loop()+0x462  (compileBroker.cpp:1944)
V  [libjvm.so+0x97b14a]  CompilerThread::thread_entry(JavaThread*, JavaThread*)+0x84  (compilerThread.cpp:58)
V  [libjvm.so+0xd434ce]  JavaThread::thread_main_inner()+0x15c  (javaThread.cpp:719)
V  [libjvm.so+0xd43368]  JavaThread::run()+0x258  (javaThread.cpp:704)
V  [libjvm.so+0x15481ea]  Thread::call_run()+0x1a8  (thread.cpp:217)
V  [libjvm.so+0x1230036]  thread_native_entry(Thread*)+0x1a5  (os_linux.cpp:778)
...
```
See attached hs_err_pid1152816.log
;;;","2023-06-20 11:00;simonis;The problem is the following:

`SubTypeCheckNode::sub()` expects that it's `sub_t` input `Type` is either a Klasspointer (i.e. `Type::KlassPtr`) or an Ooppointer (i.e. `Type::OopPtr`, `Type::InstPtr` or `Type::AryPtr`). It only checks for a Klasspointer and if that's not the case it assumes an Ooppointer. However, in the crashing case, `sub_t` has the generic pointer type `Type::AnyPtr` so debug builds will run into an assertion and product builds will just crash.

The `SubTypeCheckNode` in question has the following shape in `split_if()`:

```
 Con (#top)
  |
  | __IfTrue
  |/
  || __IfFalse
  |//
Region
  |     __ ConP (#NULL)
  |    /
  | __/  _ Phi (Oop:kotlinx/coroutines/internal/LockFreeLinkedListNode:NotNull)
  || ___/
  ||| ____ Phi (Oop:kotlinx/coroutines/internal/LockFreeLinkedListNode:NotNull)
  ||||
  |///
  Phi 
  |        ConP (Klass:precise klass kotlinx/coroutines/channels/Send)
  |          |
   \        /
  SubTypeCheck
```

`split_if()` then searches for the first contstant input pf `SubTypeCheck` `Phi`-node and finds `ConP (#NULL)`. It then calls `SubTypeCheckNode::sub()` with `sub_t` as `ConP (#NULL)`'s type which is `Type::AnyPtr` and crashes.

I've verified that returning `bottom_type()` from `SubTypeCheckNode::sub` for the `(!sub_t->isa_klassptr() && !sub_t->isa_oopptr())` case fixes the crash (by instrumenting the VM to ensure that the compilation as well as the further program execution succeeds if we take the new branch).

I'm only not sure if the unusual graph which leads to this crash is caused by the *uncommon* bytecode generated by the Kotlin compiler or if it is the result of another problem in an earlier optimization stage?

Unfortunately the attached replay files can't be used to reproduce the crash. I've tried both, using the original classes from `grpc-server-1.0-SNAPSHOT.jar` as well as using the classe dumped with the SA agent from a core file of the crash. Even if running with `-XX:ReplaySuppressInitializers=0` the inlining tree during replay is different from the original one during the crash (I've verified that with an instrumented VM which dumps the inlining tree before crashing). This may be caused by an issue of the replay functionality described in [this mail](https://mail.openjdk.org/pipermail/hotspot-compiler-dev/2023-June/065936.html) on hotspot-compiler-dev.
;;;","2023-06-20 23:42;thartmann;> I'm only not sure if the unusual graph which leads to this crash is caused by the *uncommon* bytecode generated by the Kotlin compiler or if it is the result of another problem in an earlier optimization stage?

[~simonis] It's hard to tell but most likely it's bytecode that would not be generated by javac that creates an uncommon C2 IR shape. From your example, it looks like a dying subgraph because the region input is top, probably because the null check was folded because the input is always null. Now we are in an intermittent state where the data path did not yet fold and we therefore observe a null input that should never happen.

This looks like a regression from JDK-8238691 in JDK 15 (paging [~roland]).;;;","2023-06-21 00:31;simonis;Thanks for your comments [~thartmann]. I've just uploaded the complete ideal graph (3992644_ideal.txt.gz) and inlining tree (3992644_inlining.txt) dumped from an instrumented JVM just before a crash which correspond to hs_err_pid3992644.log. Unfortunately I've never managed to get a crash when running with `-XX:PrintIdealGraphLevel` to get all the graphs before the crash.

Do you think the proposed fix in `SubTypeCheckNode::sub()` is OK or do you think we need a more elaborate fix which prevents this situation in the first place? ;;;","2023-06-21 00:41;thartmann;I think we should attempt to extract a standalone (jasm) reproducer and investigate more thoroughly. Such issues usually depend on the sequence in which nodes are processed by IGVN, so -XX:+StressIGVN -XX:RepeatCompilation=... might help.;;;","2023-06-21 10:28;simonis;While browsing JBS, I found JDK-8303513 which seems similar to this issue (i.e. also caused by a SubTypeCheckNode with an input of the TOP constant node).

While looking at `SubTypeCheckNode::Ideal()` I found that it already has exactly the same safeguard I proposed for  `SubTypeCheckNode::sub()`, namely:
```
  if (!super_t->isa_klassptr() ||
      (!sub_t->isa_klassptr() && !sub_t->isa_oopptr())) {
    return NULL;
  }
```

Because this seems to affect a lot of people, I've created a preliminary PR (https://github.com/openjdk/jdk/pull/14600) so others can check if this fix solves their problems. But I'm obviously open to better solutions (and digging deeper in order to find a more complete explanation and/or a better reproducer for the problem).;;;","2023-06-21 10:33;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/14600
Date: 2023-06-21 17:25:38 +0000;;;","2023-06-23 02:01;roland;Attached test case fails when run with:
java -XX:-TieredCompilation -XX:-BackgroundCompilation -XX:-UseOnStackReplacement -XX:+PrintCompilation -XX:CompileOnly=TestCrashAtIGVNSplitIfSubType::test -XX:CompileCommand=quiet -XX:+StressIGVN -XX:StressSeed=598200189 TestCrashAtIGVNSplitIfSubType
;;;","2023-06-23 05:23;thartmann;Nice, great work Roland!;;;","2023-06-27 04:28;roland;I was thinking this, maybe, as a fix:

https://github.com/openjdk/jdk/compare/master...rwestrel:jdk:JDK-8303279

A SubTypeCheck node should never see a possibly null input. The crash happens at split if with a dead branch that's not been entirely destroyed yet. The patch delays split if in that case. I ran into a number of cases where the assert I added to SubTypeCheckNode::sub fires for things that can't be null but didn't have their type set to non null.

;;;","2023-06-27 07:47;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/14678
Date: 2023-06-27 14:40:49 +0000;;;","2023-06-27 13:31;vlivanov;Failing test: serviceability/jvmti/DynamicCodeGenerated/DynamicCodeGeneratedTest.java

Logs: hs_err_pid2467188.log  replay_pid2467188.log

#  Internal Error (src/hotspot/share/opto/subtypenode.cpp:37),     pid=2467188, tid=2467203
#  assert(sub_t != Type::TOP && !TypePtr::NULL_PTR->higher_equal(sub_t)) failed: should be not null

Current CompileTask:
C2:  27178 6483    b  4       java.lang.invoke.StringConcatFactory::foldInLastMixers (313 bytes)

Stack: [0x00007f1805621000,0x00007f1805721000],  sp=0x00007f180571c210,  free space=1004k
Native frames: (J=compiled Java code, j=interpreted, Vv=VM code, C=native code)
V  [libjvm.so+0x16ec008]  SubTypeCheckNode::sub(Type const*, Type const*) const+0x5e8  (subtypenode.cpp:37)
V  [libjvm.so+0x15112d7]  PhaseIterGVN::transform_old(Node*)+0x317  (phaseX.cpp:1234)
V  [libjvm.so+0x15083f8]  PhaseIterGVN::optimize()+0x78  (phaseX.cpp:1045)
V  [libjvm.so+0x9ebc48]  Compile::inline_incrementally_cleanup(PhaseIterGVN&)+0x1b8  (compile.cpp:2067)
V  [libjvm.so+0x9ebf15]  Compile::inline_boxing_calls(PhaseIterGVN&)+0x135  (compile.cpp:2010)
V  [libjvm.so+0x9efbcb]  Compile::Optimize()+0x70b  (compile.cpp:2252)
V  [libjvm.so+0x9f263a]  Compile::Compile(ciEnv*, ciMethod*, int, Options, DirectiveSet*)+0x1c4a  (compile.cpp:851)
V  [libjvm.so+0x84d7ce]  C2Compiler::compile_method(ciEnv*, ciMethod*, int, bool, DirectiveSet*)+0x10e  (c2compiler.cpp:115)
V  [libjvm.so+0x9fe460]  CompileBroker::invoke_compiler_on_method(CompileTask*)+0xa00  (compileBroker.cpp:2265)
V  [libjvm.so+0x9ff2e8]  CompileBroker::compiler_thread_loop()+0x618  (compileBroker.cpp:1944)
V  [libjvm.so+0xeb0e4c]  JavaThread::thread_main_inner()+0xcc  (javaThread.cpp:719)
V  [libjvm.so+0x178797a]  Thread::call_run()+0xba  (thread.cpp:217)
V  [libjvm.so+0x148adbc]  thread_native_entry(Thread*)+0x11c  (os_linux.cpp:778)
;;;","2023-06-28 11:07;simonis;@vlivanov, I can't reproduce the crash with the replay_pid2467188.log file. Can you?

Also, the test passes for me. Does it always crash for you or just occasionally?;;;","2023-06-28 11:20;vlivanov;I didn't try replay file myself. There were multiple failures observed across different platforms during test run. All of the failures happened in `-Xcomp` mode.;;;","2023-07-11 09:01;dukebot;Changeset: caadad4f
Author:    Roland Westrelin <roland@openjdk.org>
Date:      2023-07-11 15:59:17 +0000
URL:       https://git.openjdk.org/jdk/commit/caadad4fdc78799dab2d492dba9b9f74b22d036e
;;;","2023-07-12 22:53;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk21/pull/119
Date: 2023-07-13 05:47:04 +0000;;;","2023-07-13 14:51;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk21u/pull/9
Date: 2023-07-13 21:45:10 +0000;;;","2023-07-13 14:51;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/1580
Date: 2023-07-13 21:44:45 +0000;;;","2023-07-18 13:31;btaylor;Fix request 17u - fixes a c2 crash, change passes jtreg tiers 1, 2, 3 and 4;;;",,,,,
Secondary assertion failure in AdapterHandlerLibrary::contains during crash reporting,JDK-8303276,5095105,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,coleenp,dholmes,dholmes,2023-02-27 17:03,2023-05-01 10:07,2023-10-01 09:56,2023-04-24 14:25,20,21,,,,,,,21,hotspot,,0,diagnostics,intermittent,oracle-triage-21,,,,,,,,,,,,,,"We have the following call chain:

VMError::report
  os::print_register_info
    CodeBlob::dump_for_addr
      AdapterHandlerLibrary::contains

where:

bool AdapterHandlerLibrary::contains(const CodeBlob* b) {
  bool found = false;
  auto findblob = [&] (AdapterFingerPrint* key, AdapterHandlerEntry* a) {
    return (found = (b == CodeCache::find_blob(a->get_i2c_entry())));
  };
  assert_locked_or_safepoint(AdapterHandlerLibrary_lock);
  _adapter_handler_table.iterate(findblob);
  return found;
}

but we don't hold the lock, nor are we at a safepoint.

This was spotted in one of the tests that deliberately crashes the VM. The hs_err file shows:

Register to memory mapping:

RIP=0x00007ffaf5ab1000 LingeredApp.dll
RAX=0x00007ffaf5ab1000 LingeredApp.dll
RBX={method} {0x0000023fd4401dc0} 'crash' '()I' in 'jdk/test/lib/apps/LingeredApp'
RCX=0x0000023fb77581e0 points into unknown readable memory: 0x00007ffaeaeede60 | 60 de ee ea fa 7f 00 00
RDX=0x000000f29a5ff1b8 is pointing into the stack for thread: 0x0000023fb7757ec0
RSP=0x000000f29a5ff138 is pointing into the stack for thread: 0x0000023fb7757ec0
RBP=0x000000f29a5ff1a8 is pointing into the stack for thread: 0x0000023fb7757ec0
RSI=0x000000000000000c is an unknown value
RDI=0x0000023fd4017ac0 is pointing into metadata
R8 ={method} {0x0000023fd4401dc0} 'crash' '()I' in 'jdk/test/lib/apps/LingeredApp'
R9 =
[error occurred during error reporting (printing register info), id 0xe0000000, Internal Error (c:\sb\prod\1677455098\workspace\open\src\hotspot\share\runtime\mutexLocker.cpp:179)]

and the Windows debugger stack dump showed the problematic call chain.",,,,,,,,,,,,,,,,,,,,,,,,,JDK-8303805,,,,,,,,,,,,,,,,JDK-8292384,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i30jmr:",9223372036854775807,b20,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,,,"2023-02-27 23:23;thartmann;ILW = Assert during error reporting when printing the contents of registers, intermittent during error reporting, no workaround = MMH = P3;;;","2023-02-27 23:25;thartmann;The assert in AdapterHandlerLibrary::contains was added by JDK-8292384 in JDK 20. [~coleenp], do you think we can simply remove it?

Ideally, we would have a test that uses -XX:CICrashAt and other means to crash the VM at random points and then checks that there was no additional error during error reporting. ;;;","2023-02-28 00:54;dholmes;I think the assertion may need to accommodate being called during error reporting, rather than just disabling it, as we should really have the lock or be at a safepoint, to access the table. Though I guess without the lock we could easily crash when accessing the table. So maybe this just isn't safe to use during error reporting?;;;","2023-02-28 04:29;thartmann;I think that depends on what exactly can happen during that stage of error reporting. Can new classes/methods be linked? If so, the table could be updated concurrently and I think it would be unsafe to access without holding the lock.;;;","2023-02-28 14:11;dholmes;Yes exactly - while the error reporting thread is calling contains, some other thread could be updating the table. Perhaps this was just as unsafe before the change.;;;","2023-03-10 06:52;coleenp;I think assert_locked_or_safepoint code should be disabled if:

    if (DebuggingContext::is_enabled() || VMError::is_error_reported()) {

We shouldn't take a lock for the adapter handler hash table in the unlikely event that another thread is accessing it during class linking during error reporting.;;;","2023-04-17 12:06;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/13500
Date: 2023-04-17 18:57:50 +0000;;;","2023-04-24 14:25;dukebot;Changeset: 2ea62c13
Author:    Coleen Phillimore <coleenp@openjdk.org>
Date:      2023-04-24 21:23:56 +0000
URL:       https://git.openjdk.org/jdk/commit/2ea62c136925299d4b767a0149419e7e9de3629a
;;;",,,,,,,,,,,,,,,,,,,,,,,
Use {@Return and @linkplain in Locale and related classes,JDK-8303275,5095103,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,jlu,jlu,jlu,2023-02-27 14:48,2023-03-13 10:43,2023-10-01 09:56,2023-03-07 10:21,20,21,,,,,,,21,core-libs,,0,noreg-doc,,,,,,,,,,,,,,,,"Locale and related classes (LocaleServiceProvider, LocaleServiceProviderPool) can benefit from using the following javadoc tags {@return ... } and @linkplain

",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,generic,,,,,,,,,,generic,,,,,,"0|i30jmb:",9223372036854775807,b13,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@7644fb4c,,,,,,,,,"2023-03-01 14:05;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/12780
Date: 2023-02-28 00:09:45 +0000;;;","2023-03-07 10:21;dukebot;Changeset: acf89961
Author:    Justin Lu <jlu@openjdk.org>
Committer: Naoto Sato <naoto@openjdk.org>
Date:      2023-03-07 18:18:59 +0000
URL:       https://git.openjdk.org/jdk/commit/acf899612f9b6c4fdd919c40a92ce9c40b3744ed
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
JFR: jdk/jfr/api/consumer/streaming/TestJVMCrash.java doesn't retry,JDK-8303261,5095082,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,egahlin,egahlin,egahlin,2023-02-27 09:31,2023-03-07 07:08,2023-10-01 09:56,2023-02-28 08:43,,,,,,,,,21,hotspot,,0,,,,,,,,,,,,,,,,,"The test is not able to access the process, so it tries to print some debugging information to standard out, but it fails with an exception which interrupts the retry loop.

",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8303311,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i30jhn:",9223372036854775807,b12,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@42995637,,,,,,,,,"2023-02-27 12:52;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/12776
Date: 2023-02-27 18:00:33 +0000;;;","2023-02-28 08:43;dukebot;Changeset: 6423065b
Author:    Erik Gahlin <egahlin@openjdk.org>
Date:      2023-02-28 16:42:19 +0000
URL:       https://git.openjdk.org/jdk/commit/6423065b7dc51748fcc8a2683af1226c01e93ce4
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
(fc) FileChannel::transferFrom should support position > size(),JDK-8303260,5095081,Bug,Closed,JDK,JDK,software,duke,,,P4,Fixed,bpb,bpb,bpb,2023-02-27 09:29,2023-07-21 07:35,2023-10-01 09:56,2023-04-04 09:00,21,,,,,,,,21,core-libs,,0,release-note=yes,,,,,,,,,,,,,,,,FileChannel::transferFrom is specified not to transfer any bytes if position > size(). This is inconsistent with the positional FileChannel::write which extends the file in this case. FileChannel::transferFrom should be modified also to extend the file in this case.,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8303474,,,,,,,,JDK-8029370,JDK-8305596,,,,,,,,,,,,,,,,,,,,generic,,,,,,,,,,generic,,,,,,"0|i30jhf:",9223372036854775807,b17,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@674604a9,,,,,,,Verified,,"2023-02-28 17:40;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/12797
Date: 2023-03-01 01:34:33 +0000;;;","2023-04-04 09:00;dukebot;Changeset: 7baccd9e
Author:    Brian Burkhalter <bpb@openjdk.org>
Date:      2023-04-04 15:57:56 +0000
URL:       https://git.openjdk.org/jdk/commit/7baccd9ee24bcbc2ca5e449d8d3e5b80860cc088
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Remove unnecessary calls to super() in java.time value based classes,JDK-8303253,5095073,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,rriggs,rriggs,rriggs,2023-02-27 07:45,2023-03-06 11:42,2023-10-01 09:56,2023-02-27 10:12,,,,,,,,,21,core-libs,,0,noreg-sqe,,,,,,,,,,,,,,,,"To simplify future work changing some java.time value based classes to Valhalla value classes, the explicit calls to super() are removed.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i30jfn:",9223372036854775807,b12,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@a9a7756,,,,,,,,,"2023-02-27 07:59;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/12771
Date: 2023-02-27 15:50:02 +0000;;;","2023-02-27 10:12;dukebot;Changeset: 4c169d2d
Author:    Roger Riggs <rriggs@openjdk.org>
Date:      2023-02-27 18:10:40 +0000
URL:       https://git.openjdk.org/jdk/commit/4c169d2d7c3082a278946175874777f78d45b0bc
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
JFR: Incorrect description of dumponexit,JDK-8303249,5095069,Bug,Resolved,JDK,JDK,software,duke,,,P5,Fixed,egahlin,egahlin,egahlin,2023-02-27 05:59,2023-03-06 11:42,2023-10-01 09:56,2023-02-27 14:35,,,,,,,,,21,hotspot,,0,,,,,,,,,,,,,,,,,The description for the dumponexit option for -XX:StartFlightRecording is mixed up with flush-interval. Impact of this is minimal since the description displayed for users come from printHelp().,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i30jer:",9223372036854775807,b12,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@42995637,,,,,,,,,"2023-02-27 06:25;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/12766
Date: 2023-02-27 14:13:45 +0000;;;","2023-02-27 14:35;dukebot;Changeset: bca60f47
Author:    Erik Gahlin <egahlin@openjdk.org>
Date:      2023-02-27 22:33:34 +0000
URL:       https://git.openjdk.org/jdk/commit/bca60f4767b6d9fbdb9925e175ba465ff397f6b2
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
ThreadMXBean issues with virtual threads,JDK-8303242,5095060,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,alanb,alanb,alanb,2023-02-27 03:58,2023-03-08 23:31,2023-10-01 09:56,2023-03-03 23:34,19,21,,,,,,,21,core-svc,,0,loom,,,,,,,,,,,,,,,,"ThreadMXBean is specified to provide a monitoring or management interface for platform threads, it is specified to not support virtual threads.

At this time, ThreadMXBean::isCurrentThreadCpuTimeSupported returns true when invoked from a virtual thread, it should return false.

Additionally, when using the alternative implementation of virtual threads (-XX:-VMContinuations), there are a few issues:

- getThreadXXXTime returns cpu/user time for virtual threads, it should set the elements corresponding to virtual threads to 1L.

- getThreadAllocatedBytes returns the allocation by virtual threads, it should set the elements corresponding to virtual threads to 1L.
",,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8303251,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i30jcr:",9223372036854775807,b13,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@411d4af6,,,,,,,,,"2023-02-28 02:37;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/12762
Date: 2023-02-27 12:23:09 +0000;;;","2023-03-03 23:34;dukebot;Changeset: 629a9053
Author:    Alan Bateman <alanb@openjdk.org>
Date:      2023-03-04 07:33:33 +0000
URL:       https://git.openjdk.org/jdk/commit/629a9053f072a3d8406b923f8fa8ab7056a1ab8d
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
java.util.Date.parse(String) and java.util.Date(String) don't declare thrown IllegalArgumentException,JDK-8303232,5095052,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,jlu,aturbanov,aturbanov,2023-02-27 02:34,2023-03-06 11:46,2023-10-01 09:56,2023-03-01 10:14,20,21,,,,,,,21,core-libs,,0,noreg-doc,,,,,,,,,,,,,,,,"I've noticed that method 'long java.util.Date.parse(String)' doesn't
have a reference to an IllegalArgumentException in its javadoc.
https://docs.oracle.com/en/java/javase/19/docs/api/java.base/java/util/Date.html#parse(java.lang.String)
But this exception is thrown in implementation - https://github.com/openjdk/jdk/blob/fbc036e7454720b589d99a8cae30369a10471528/src/java.base/share/classes/java/util/Date.java#L612

While this method is deprecated, it's still part of public API and should be properly documented.
Also it's still is used within JDK code itself. (see JDK-4097762).

Additionally, for consistency, the java.util.Date(String) constructor should also have a reference.",,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8303263,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i30jaz:",9223372036854775807,b12,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@7644fb4c,,,,,,,,,"2023-02-27 16:13;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/12779
Date: 2023-02-28 00:07:05 +0000;;;","2023-03-01 10:14;dukebot;Changeset: 05faa732
Author:    Justin Lu <jlu@openjdk.org>
Committer: Naoto Sato <naoto@openjdk.org>
Date:      2023-03-01 18:13:42 +0000
URL:       https://git.openjdk.org/jdk/commit/05faa7321bc076794048d3d069fa36b14f42ca70
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
JniObjWithEnv should be NullablePointer compliant,JDK-8303227,5095045,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,jwaters,jwaters,jwaters,2023-02-27 00:19,2023-03-06 11:43,2023-10-01 09:56,2023-02-28 10:38,15,19,20,21,,,,,21,tools,,0,,,,,,,,,,,,,,,,,"JniObjWithEnv is a struct that is commonly managed by std::unique_ptr. Although it can support managing objects that are not raw pointers, any such objects have to be NullablePointers (https://en.cppreference.com/w/cpp/named_req/NullablePointer). In the past this has broken the build when compiler upgrades were carried out, so we should add in the final requirements to make the struct a true NullablePointer once and for all, to prevent similar issues from happening in the future",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8244220,JDK-8288293,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,windows,,,,,,"0|i30j9f:",9223372036854775807,b12,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@3656b41f,,,,,,,,,"2023-02-27 00:27;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/12758
Date: 2023-02-27 08:19:53 +0000;;;","2023-02-28 10:38;dukebot;Changeset: 50dc041e
Author:    Julian Waters <jwaters@openjdk.org>
Date:      2023-02-28 18:35:40 +0000
URL:       https://git.openjdk.org/jdk/commit/50dc041ee69eb62454bbf5c47a9545c6183d43d1
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
"Webview loaded webpage is not showing play, volume related buttons for embeded Audio/Video elements",JDK-8303217,5095034,Bug,Resolved,JDK,JDK,software,duke,,,P2,Fixed,jbhaskar,jbhaskar,jbhaskar,2023-02-26 20:52,2023-03-22 09:10,2023-10-01 09:56,2023-03-06 08:01,8u371,jfx21,,,,,,,jfx21,javafx,,0,CPU23_04-critical-approved,CPU23_04-critical-SQE-OK,regression,sn_138,sn_139,webkit-2.38,,,,,,,,,,,"With the latest webkit-615.1, the media controls are not rendered for embedded html5 video",,,,,,,,,,,JDK-8304102,JDK-8304107,JDK-8303733,JDK-8304099,JDK-8303686,,,,,,,,,,JDK-8301022,,,,,,,,JDK-8302284,,,JDK-8300954,,,,,JDK-8299977,,,,,,,,,,,,,,,,generic,,,,,,,b03,8u371,,generic,,,,,,"0|i30j6z:",9223372036854775807,b08,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@5a8b92bd,,,,,,,,,"2023-02-26 20:59;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jfx/pull/1049
Date: 2023-02-26 16:47:23 +0000;;;","2023-02-27 08:00;kcr;NOTE: this is a follow-on to JDK-8301022;;;","2023-03-06 08:01;dukebot;Changeset: bbdc5998
Author:    Jay Bhaskar <jbhaskar@openjdk.org>
Date:      2023-03-06 15:59:47 +0000
URL:       https://git.openjdk.org/jfx/commit/bbdc59984a7f6427a5ad8b8ad39aa93ee3b4abbe
;;;","2023-03-13 16:43;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jfx17u/pull/128
Date: 2023-03-13 23:22:53 +0000;;;","2023-03-13 16:43;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jfx11u/pull/138
Date: 2023-03-13 23:22:49 +0000;;;","2023-03-13 17:48;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jfx20u/pull/8
Date: 2023-03-14 00:16:42 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,,
Typo in java.util.Collections#synchronizedNavigableMap javadoc,JDK-8303214,5095023,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,aturbanov,aturbanov,aturbanov,2023-02-25 11:32,2023-04-03 12:09,2023-10-01 09:56,2023-03-28 01:49,17,20,21,,,,,,21,core-libs,,0,noreg-doc,,,,,,,,,,,,,,,,"Created for https://github.com/openjdk/jdk/pull/11679

   NavigableMap m = Collections.synchronizedNavigableMap(new TreeMap());
   NavigableMap m2 = m.subMap(foo, true, bar, false);
       ...
   Set s2 = m2.keySet();  // Needn't be in synchronized block
       ...
   synchronized (m) {  // Synchronizing on m, not m2 or s2!
       Iterator i = s.iterator(); // Must be in synchronized block
       while (i.hasNext())
           foo(i.next());
   }

Should be 
       Iterator i = s2.iterator();",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i30j4j:",9223372036854775807,b16,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@73bf8bbe,,,,,,,,,"2023-02-25 13:38;martin;Agreed!;;;","2023-03-22 12:45;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/11679
Date: 2022-12-14 17:43:08 +0000;;;","2023-03-28 01:49;dukebot;Changeset: a06f4619
Author:    nbauma109 <nbauma109@users.noreply.github.com>
Committer: Andrey Turbanov <aturbanov@openjdk.org>
Date:      2023-03-28 08:47:55 +0000
URL:       https://git.openjdk.org/jdk/commit/a06f46196afd015db300ecf10bbb2a309b74e9d8
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,
JFR: 'jfr print' displays incorrect timestamps,JDK-8303208,5095015,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,egahlin,egahlin,egahlin,2023-02-24 20:38,2023-03-06 11:42,2023-10-01 09:56,2023-02-27 10:14,20,21,,,,,,,21,hotspot,,0,,,,,,,,,,,,,,,,,"Timestamps printed by 'jfr print' are one hour off, at least in CET. Reproducer:

$ java -XX:StartFlightRecording:filename=recording.jfr -version
$ jfr print recording.jfr

The problem is that DST is included even when it's not in effect.

TimeZone.getDefault().useDaylightTime()

returns true in February 25, which leads to an additional one hour (besides offset to UTC). The pretty printer uses RecordedObject::getOffsetDateTime(String) (not exposed in public API), which is based on a two hour offset instead of one.

The following code fixes the problem:

if (TimeZone.getDefault().inDaylightTime(new Date())) {
   dst = TimeZone.getDefault().getDSTSavings();
} else {
  dst = 0;
}

I would prefer to use java.time API, but not sure how to get the information splitted into GMT offset and DST, which happens to be how old JDK releases read newer recordings. ",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i30j2r:",9223372036854775807,b12,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@42995637,,,,,,,,,"2023-02-27 04:35;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/12757
Date: 2023-02-26 23:47:58 +0000;;;","2023-02-27 10:14;dukebot;Changeset: 54603aa1
Author:    Erik Gahlin <egahlin@openjdk.org>
Date:      2023-02-27 18:13:27 +0000
URL:       https://git.openjdk.org/jdk/commit/54603aa1b72bfbdd04d69f0f0bf5dcfeb9dcda92
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
System and Runtime.exit() resilience to logging errors ,JDK-8303198,5095004,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,rriggs,rriggs,rriggs,2023-02-24 12:46,2023-03-13 12:25,2023-10-01 09:56,2023-03-03 08:15,21,,,,,,,,21,core-libs,,0,noreg-sqe,,,,,,,,,,,,,,,,"The diagnostic logging added in JDK-8301627 is best effort and should guard against exceptions and errors caused by mis-configuration of the logging system or resource limitations such as out-of-memory errors that might interfere with the normal exit of the process.
",,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8303057,,,,,JDK-8303057,,,,,JDK-8301627,,,,,,,,,,,,,,,,,,,,,,,,,,,,b11,21,,,,,,,,"0|i30j0b:",9223372036854775807,b13,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4c088d55,,,,,,,,,"2023-02-25 21:54;dholmes;The logging should be in a try/catch or more simply try/finally as suggested by [~smarks] in the original PR.;;;","2023-02-27 07:52;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/12770
Date: 2023-02-27 15:41:01 +0000;;;","2023-03-03 08:15;dukebot;Changeset: 379f2061
Author:    Roger Riggs <rriggs@openjdk.org>
Date:      2023-03-03 16:14:45 +0000
URL:       https://git.openjdk.org/jdk/commit/379f2061aa4c83388a1becd9661c1ee7b2907830
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,
Missing Classpath exception from Continuation.c,JDK-8303186,5094991,Bug,Closed,JDK,JDK,software,duke,,,P4,Fixed,tsteele,tsteele,tsteele,2023-02-24 10:55,2023-08-08 13:54,2023-10-01 09:56,2023-03-01 17:08,19,20,21,,,,,,21,core-libs,,0,jdk20u-fix-request,jdk20u-fix-yes,,,,,,,,,,,,,,,GPL v2 code is present without a Classpath exception in src/java.base/share/native/libjava/Continuation.c,,,,,,,,,,,JDK-8307009,JDK-8303958,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i30ixf:",9223372036854775807,b13,,,,,,,,,Verified,,"2023-02-24 11:08;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/12747
Date: 2023-02-24 19:01:18 +0000;;;","2023-03-01 17:08;dukebot;Changeset: dc08216f
Author:    Tyler Steele <tsteele@openjdk.org>
Date:      2023-03-02 01:06:02 +0000
URL:       https://git.openjdk.org/jdk/commit/dc08216f0ef55970c96df43bcc86ebd5792d486e
;;;","2023-03-02 16:42;tsteele;[jdk20u fix request]

I recognize that we are in the RC stage of jdk20 release. I'd like to include this change in the first release of jdk20, as it probably should have happened in jdk19. It isn't a code change, so the risk is quite low.;;;","2023-03-02 16:44;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk20u/pull/13
Date: 2023-03-03 00:37:39 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,
Memory leak in Arguments::init_shared_archive_paths,JDK-8303183,5094986,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,jcking,jcking,jcking,2023-02-24 10:34,2023-03-06 11:46,2023-10-01 09:56,2023-03-01 07:55,21,,,,,,,,21,hotspot,,0,lsan,memory,,,,,,,,,,,,,,,"Direct leak of 119 byte(s) in 1 object(s) allocated from:
    #0 0x7ff0ce8b89cf in __interceptor_malloc ../../../../src/libsanitizer/asan/asan_malloc_linux.cpp:69
    #1 0x7ff0caeb55cf in os::malloc(unsigned long, MEMFLAGS, NativeCallStack const&) src/hotspot/share/runtime/os.cpp:654
    #2 0x7ff0c8a1b567 in AllocateHeap(unsigned long, MEMFLAGS, NativeCallStack const&, AllocFailStrategy::AllocFailEnum) src/hotspot/share/memory/allocation.cpp:42
    #3 0x7ff0c8a1b567 in AllocateHeap(unsigned long, MEMFLAGS, AllocFailStrategy::AllocFailEnum) src/hotspot/share/memory/allocation.cpp:52
    #4 0x7ff0c8a70fe8 in Arguments::get_default_shared_archive_path() src/hotspot/share/runtime/arguments.cpp:3421
    #5 0x7ff0c8a733a3 in Arguments::init_shared_archive_paths() src/hotspot/share/runtime/arguments.cpp:3477
    #6 0x7ff0c8a769ce in Arguments::set_shared_spaces_flags_and_archive_paths() src/hotspot/share/runtime/arguments.cpp:3404
    #7 0x7ff0c8a769ce in Arguments::apply_ergo() src/hotspot/share/runtime/arguments.cpp:4016
    #8 0x7ff0cb8a16f6 in Threads::create_vm(JavaVMInitArgs*, bool*) src/hotspot/share/runtime/threads.cpp:461
    #9 0x7ff0ca250b43 in JNI_CreateJavaVM_inner src/hotspot/share/prims/jni.cpp:3588
    #10 0x7ff0ca250b43 in JNI_CreateJavaVM src/hotspot/share/prims/jni.cpp:3674
    #11 0x7ff0cef93e25 in InitializeJVM src/java.base/share/native/libjli/java.c:1459
    #12 0x7ff0cef93e25 in JavaMain src/java.base/share/native/libjli/java.c:413
    #13 0x7ff0cef9c708 in ThreadJavaMain src/java.base/unix/native/libjli/java_md.c:650
    #14 0x7ff0ce6a7fd3 in start_thread nptl/pthread_create.c:442",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i30iw3:",9223372036854775807,b12,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,,,"2023-02-24 11:39;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/12749
Date: 2023-02-24 19:29:56 +0000;;;","2023-03-01 07:55;dukebot;Changeset: 4c985e52
Author:    Justin King <jcking@openjdk.org>
Date:      2023-03-01 15:52:49 +0000
URL:       https://git.openjdk.org/jdk/commit/4c985e527a4a03d5a78d85a145aa41c1843a3e22
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Memory leak in ClassLoaderExt::setup_app_search_path,JDK-8303181,5094984,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,jcking,jcking,jcking,2023-02-24 10:33,2023-03-08 23:30,2023-10-01 09:56,2023-03-03 10:09,21,,,,,,,,21,hotspot,,0,lsan,memory,,,,,,,,,,,,,,,"Direct leak of 154 byte(s) in 1 object(s) allocated from:                                                                                                                                                                                                                                   
    #0 0x7ff0ce8b83b7 in __interceptor_calloc ../../../../src/libsanitizer/asan/asan_malloc_linux.cpp:77                                                                                                                                                                                    
    #1 0x7ff0caeb3f5c in os::malloc(unsigned long, MEMFLAGS, NativeCallStack const&) src/hotspot/share/runtime/os.cpp:654                                                                                                                                                                   
    #2 0x7ff0caeb3f5c in os::malloc(unsigned long, MEMFLAGS) src/hotspot/share/runtime/os.cpp:622
    #3 0x7ff0caeb3f5c in os::strdup(char const*, MEMFLAGS) src/hotspot/share/runtime/os.cpp:594
    #4 0x7ff0c93009fa in ClassLoaderExt::setup_app_search_path(JavaThread*) src/hotspot/share/classfile/classLoaderExt.cpp:70
    #5 0x7ff0c93009fa in ClassLoaderExt::setup_search_paths(JavaThread*) src/hotspot/share/classfile/classLoaderExt.cpp:247
    #6 0x7ff0cb914544 in universe_init() src/hotspot/share/memory/universe.cpp:833
    #7 0x7ff0c9e5e358 in init_globals() src/hotspot/share/runtime/init.cpp:123
    #8 0x7ff0cb8a1a57 in Threads::create_vm(JavaVMInitArgs*, bool*) src/hotspot/share/runtime/threads.cpp:568
    #9 0x7ff0ca250b43 in JNI_CreateJavaVM_inner src/hotspot/share/prims/jni.cpp:3588
    #10 0x7ff0ca250b43 in JNI_CreateJavaVM src/hotspot/share/prims/jni.cpp:3674
    #11 0x7ff0cef93e25 in InitializeJVM src/java.base/share/native/libjli/java.c:1459
    #12 0x7ff0cef93e25 in JavaMain src/java.base/share/native/libjli/java.c:413
    #13 0x7ff0cef9c708 in ThreadJavaMain src/java.base/unix/native/libjli/java_md.c:650
    #14 0x7ff0ce6a7fd3 in start_thread nptl/pthread_create.c:442",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i30ivv:",9223372036854775807,b13,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,,,"2023-02-24 11:35;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/12748
Date: 2023-02-24 19:23:36 +0000;;;","2023-03-03 10:09;dukebot;Changeset: 40c5edfc
Author:    Justin King <jcking@openjdk.org>
Date:      2023-03-03 18:07:40 +0000
URL:       https://git.openjdk.org/jdk/commit/40c5edfcc4ad98af435d2edf3dd40f20f24fca46
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
(fs) Deprecate com.sun.nio.file.SensitivityWatchEventModifier for removal,JDK-8303175,5094972,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,bpb,bpb,bpb,2023-02-24 08:53,2023-03-08 23:30,2023-10-01 09:56,2023-03-03 10:40,21,,,,,,,,21,core-libs,,0,noreg-trivial,release-note=yes,,,,,,,,,,,,,,,"JDK-8303097 sought to remove this API but subsequent code searches revealed some undiscovered usages, so deprecate it instead for now.",,,,,,,,,,,,,,,,,,,,,,,,,JDK-8303413,JDK-8302806,,JDK-8303188,,,,,,,,JDK-8303097,,,,,,,,,,,,,,,,,,,,,generic,,,,,,,,7,,generic,,,,,,"0|i30it7:",9223372036854775807,b13,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@674604a9,,,,,,,,,"2023-02-24 10:30;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/12746
Date: 2023-02-24 18:23:06 +0000;;;","2023-03-03 10:40;dukebot;Changeset: ae290541
Author:    Brian Burkhalter <bpb@openjdk.org>
Date:      2023-03-03 18:38:13 +0000
URL:       https://git.openjdk.org/jdk/commit/ae290541d17be77bbedf56a4592102ead4e4691e
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Do not use a thread's uncaught exception handler for upcalls,JDK-8303171,5094968,Bug,Closed,JDK,JDK,software,duke,,,P4,Fixed,,jvernee,jvernee,2023-02-24 08:04,2023-03-15 15:28,2023-10-01 09:56,2023-03-15 15:28,repo-panama,,,,,,,,,core-libs,,0,foreign-memaccess+abi,,,,,,,,,,,,,,,,"After some discussion, we have arrived at the conclusion that we should be using a thread's uncaught exception handler when handling an uncaught exception from an upcall, since it is not specified to be used in such situations.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i30isb:",9223372036854775807,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@28ce6b78,,,,,,,,,"2023-03-15 15:28;jvernee;Fixed as part of JDK-8303835;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Remove Windows specific workaround from libdt,JDK-8303169,5094965,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,jwaters,jwaters,jwaters,2023-02-24 07:40,2023-03-06 11:41,2023-10-01 09:56,2023-02-27 07:38,,,,,,,,,21,hotspot,,0,,,,,,,,,,,,,,,,,"We no longer need to define PrId64 ourselves since the Visual C++ compiler supports inttypes.h on the only versions we support, so we can just replace it with an include to the standard header instead",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8288293,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i30irn:",9223372036854775807,b12,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@2846162a,,,,,,,,,"2023-02-24 07:47;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/12744
Date: 2023-02-24 15:36:36 +0000;;;","2023-02-27 07:38;dukebot;Changeset: 2fe4e5f8
Author:    Julian Waters <jwaters@openjdk.org>
Date:      2023-02-27 15:35:58 +0000
URL:       https://git.openjdk.org/jdk/commit/2fe4e5f8d76e20e34d6022417589d521483c78be
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
[vectorapi] VectorMask.cast narrow operation returns incorrect value with SVE,JDK-8303161,5094956,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,bkilambi,bkilambi,bkilambi,2023-02-24 04:52,2023-04-17 01:51,2023-10-01 09:56,2023-03-29 09:14,20,21,,,,,,,21,hotspot,,0,oracle-triage-11,oracle-triage-17,oracle-triage-21,vectorapi,,,,,,,,,,,,,"The cast operation for VectorMask from wider type to narrow type returns incorrect result for the trueCount() (and on some SVE machines toLong() as well) of the resultant mask vector on SVE machines. It is because the higher order bits are not cleared (since the result is narrowed down) and trueCount() counts the number of true values in the higher order bits as well, returning incorrect result.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8271515,,,,,,,,,,,,,,,,aarch64,,,,,,,,,,linux,,,,,,"0|i30ipn:",9223372036854775807,b16,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2023-02-26 22:35;thartmann;ILW = Incorrect result with compiled code, VectorMask.cast on SVE/SVE2, disable compilation/intrinsic = HLM = P3;;;","2023-02-26 22:35;thartmann;[~bkilambi] do you plan to work on this?;;;","2023-02-27 01:19;bkilambi;Hi yes, apologies I missed assigning it to me. I am working on it.;;;","2023-02-27 01:49;thartmann;Great, thanks for confirming.;;;","2023-03-07 03:03;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/12901
Date: 2023-03-07 10:56:40 +0000;;;","2023-03-29 09:14;dukebot;Changeset: 67274906
Author:    Bhavana Kilambi <bkilambi@openjdk.org>
Committer: Nick Gasson <ngasson@openjdk.org>
Date:      2023-03-29 16:12:56 +0000
URL:       https://git.openjdk.org/jdk/commit/67274906aeb7a6b83761e6aaf85688aa61aa8a20
;;;",,,,,,,,,,,,,,,,,,,,,,,,,
Native interpreter frame missing mirror,JDK-8303153,5094946,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,fbredberg,mgronlun,mgronlun,2023-02-24 01:19,2023-05-16 16:07,2023-10-01 09:56,2023-05-08 07:46,21,,,,,,,,21,hotspot,,0,interpreter,noreg-hard,,,,,,,,,,,,,,,"While debugging JDK-8302350, it was found that an interpreter frame had an InstanceKlass* in the mirror_oop slot, where there should have been an oop of type java/lang/Class. That is, there should have been the mirror oop for the method holder, not the direct InstanceKlass*. How it ended up there is not clear, but since there is actually two InstanceKlass*es in that frame, it suggests that there have been recent changes to the interpreter frame layout, where there is now something called ""extended_sp"" also being stored? The extended_sp slot also has an (the same) InstanceKlass*.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8154580,,,,,JDK-8302350,JDK-8288971,,,"2023-02-24 01:23;mgronlun;InstanceKlass_in_Interpreter_frame.jpg;https://bugs.openjdk.org/secure/attachment/102783/InstanceKlass_in_Interpreter_frame.jpg",,,,,,,,,,,,aarch64,,,,,,,,,,linux,,,,,,"0|i30inf:",9223372036854775807,b22,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,,,"2023-02-24 01:27;mgronlun;Maybe related to JDK-8288971?;;;","2023-02-28 11:15;mseledtsov;ILW = HLH = P2;;;","2023-03-02 06:55;coleenp;I was looking at generate_fixed_frame on aarch64 with Markus and noticed that the mirror oop isn't stored for native functions, which seems wrong.  Is the additional extended_sp slot a result of Loom changes?;;;","2023-03-10 01:39;aph;The additional extended_sp slot is a cleanup by me.;;;","2023-03-10 01:58;aph;I should perhaps have a look, but I can't reproduce the problem at my end.;;;","2023-03-10 04:40;coleenp;[~aph]I think the stack that Markus posted is really the problem in JDK-8302350, but if you look at generate_fixed_frame, if the method is native, you don't store the mirror in the mirror slot.
I don't think you can do this. It would be hard to write a test case but you could unload the klass containing the native method, which the mirror is preventing you from doing.;;;","2023-03-10 07:55;aph;OK, I'll grab it.;;;","2023-03-14 14:06;coleenp;Thanks [~aph].;;;","2023-03-14 14:07;coleenp;ILW = H (crash) L (unlikely) M (no workaround if native method unloaded) = P3;;;","2023-04-25 05:24;coleenp;I took this bug thinking I can figure it what this is doing and why, but it looks a bit more complicated than I thought.   The mirror needs to be stored in the frame for native calls also as it is on other platforms.

  // Get mirror
  __ load_mirror(r10, rmethod, r5, rscratch2);
  if (! native_call) {
    __ ldr(rscratch1, Address(rmethod, Method::const_offset()));
    __ ldrh(rscratch1, Address(rscratch1, ConstMethod::max_stack_offset()));
    __ add(rscratch1, rscratch1, MAX2(3, Method::extra_stack_entries()));
    __ sub(rscratch1, sp, rscratch1, ext::uxtw, 3);
    __ andr(rscratch1, rscratch1, -16);
    // Store extended SP and mirror
    __ stp(r10, rscratch1, Address(sp, 4 * wordSize));
    // Move SP out of the way
    __ mov(sp, rscratch1);
  } else {
    // Make sure there is room for the exception oop pushed in case method throws
    // an exception (see TemplateInterpreterGenerator::generate_throw_exception())
    __ sub(rscratch1, sp, 2 * wordSize);
    __ stp(zr, rscratch1, Address(sp, 4 * wordSize));
    __ mov(sp, rscratch1);
  }

Help!;;;","2023-05-04 01:12;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/13794
Date: 2023-05-04 08:00:23 +0000;;;","2023-05-08 07:46;dukebot;Changeset: 5a259d87
Author:    Fredrik Bredberg <fredrik.bredberg@oracle.com>
Committer: Coleen Phillimore <coleenp@openjdk.org>
Date:      2023-05-08 14:44:54 +0000
URL:       https://git.openjdk.org/jdk/commit/5a259d875ee6ebd93d3c0932d50784021bc97ea2
;;;",,,,,,,,,,,,,,,,,,,
[s390x] fast & slow debug builds are broken,JDK-8303147,5094939,Bug,Resolved,JDK,JDK,software,duke,,,P2,Fixed,amitkumar,amitkumar,amitkumar,2023-02-23 19:15,2023-04-10 10:24,2023-10-01 09:56,2023-04-04 07:31,21,,,,,,,,21,hotspot,,0,oraclejdk-na,oracle-triage-21,,,,,,,,,,,,,,,"After JDK-8302369 fast & slow debug builds are broken on s390x arch. Same assert statement is getting fired in both builds.

/usr/bin/bash: line 1: 2375751 Aborted (core dumped) /home/amit/build_test/jdk/build/linux-s390x-server-fastdebug/jdk/bin/java -Xms64M -Xmx1600M -cp /home/amit/build_test/jdk/build/linux-s390x-server-fastdebug/buildtools/tools_jigsaw_classes --add-exports java.base/jdk.internal.module=ALL-UNNAMED build.tools.jigsaw.AddPackagesAttribute /home/amit/build_test/jdk/build/linux-s390x-server-fastdebug/jdk > >(/usr/bin/tee -a /home/amit/build_test/jdk/build/linux-s390x-server-fastdebug/jdk/_optimize_image_exec.log) 2> >(/usr/bin/tee -a /home/amit/build_test/jdk/build/linux-s390x-server-fastdebug/jdk/_optimize_image_exec.log >&2)
make[3]: *** [ExplodedImageOptimize.gmk:41: /home/amit/build_test/jdk/build/linux-s390x-server-fastdebug/jdk/_optimize_image_exec.marker] Error 134
make[2]: *** [make/Main.gmk:444: exploded-image-optimize] Error 2

ERROR: Build failed for target 'images' in configuration 'linux-s390x-server-fastdebug' (exit code 2) 
Stopping javac server

=== Output from failing command(s) repeated here ===
* For target jdk__optimize_image_exec:
#
# A fatal error has been detected by the Java Runtime Environment:
#
#  Internal Error (/home/amit/build_test/jdk/src/hotspot/cpu/s390/c1_LIRAssembler_s390.cpp:2433), pid=2375751, tid=2375769
#  assert(offset_in_bytes < frame_map()->reserved_argument_area_size()) failed: invalid offset
#
# JRE version: OpenJDK Runtime Environment (21.0) (fastdebug build 21-internal-adhoc.amit.jdk)
# Java VM: OpenJDK 64-Bit Server VM (fastdebug 21-internal-adhoc.amit.jdk, mixed mode, tiered, compressed oops, compressed class ptrs, g1 gc, linux-s390x)
# Problematic frame:
# V  [libjvm.so+0x4b9d28]  LIR_Assembler::store_parameter(RegisterImpl*, int)+0x170
#
# Core dump will be written. Default location: Core dumps may be processed with ""/usr/share/apport/apport -p%p -s%s -c%c -d%d -P%P -u%u -g%g -- %E"" (or dumping to /home/amit/build_test/jdk/make/core.2375751)
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8302369,,,,"2023-02-23 19:17;amitkumar;hs_err_pid3083669.log;https://bugs.openjdk.org/secure/attachment/102775/hs_err_pid3083669.log","2023-02-23 19:17;amitkumar;replay_pid3083669.log;https://bugs.openjdk.org/secure/attachment/102776/replay_pid3083669.log",,,,,,,,,,,s390x,,,,,,,,,,linux,,,,,,"0|i30ilv:",9223372036854775807,b17,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2023-03-02 02:14;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/12825
Date: 2023-03-02 10:06:17 +0000;;;","2023-04-04 07:31;dukebot;Changeset: 62bd2eba
Author:    Amit Kumar <amitkumar@openjdk.org>
Committer: Martin Doerr <mdoerr@openjdk.org>
Date:      2023-04-04 14:28:09 +0000
URL:       https://git.openjdk.org/jdk/commit/62bd2ebac4dd11ceecafd7f988485fe2aaea1a5e
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
[lworld] Fix ArchivedEnumTest fail caused by changed Enum static field,JDK-8303137,5094927,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,rriggs,rriggs,rriggs,2023-02-23 14:29,2023-02-25 06:20,2023-10-01 09:56,2023-02-25 06:20,,,,,,,,,repo-valhalla,core-libs,,0,,,,,,,,,,,,,,,,,"The CDS test ArchivedEnumTest fails when it detects that AccessFlag.Location contains a static field that is modified at runtime.

The static final field SET_CLASS_SUPER_VALHALLA is computed to be stored in the field. The value can be computed as needed.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i30ij7:",9223372036854775807,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4c088d55,,,,,,,,,"2023-02-24 06:55;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/valhalla/pull/827
Date: 2023-02-24 14:47:59 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
"MemoryPoolMBean/isCollectionUsageThresholdExceeded/isexceeded005 failed with ""isCollectionUsageThresholdExceeded() returned true, while threshold = 1 and used = 0""",JDK-8303136,5094926,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,kevinw,dcubed,dcubed,2023-02-23 14:16,2023-03-13 10:44,2023-10-01 09:56,2023-03-08 00:21,21,,,,,,,,21,core-svc,,0,intermittent,tier8,,,,,,,,,,,,,,,"The following test failed in the JDK21 CI:

vmTestbase/nsk/monitoring/MemoryPoolMBean/isCollectionUsageThresholdExceeded/isexceeded005/TestDescription.java

Here's a snippet from the log file:

#section:main
----------messages:(6/444)----------
command: main nsk.monitoring.MemoryPoolMBean.isCollectionUsageThresholdExceeded.isexceeded001 -testMode=proxy -MBeanServer=custom
reason: User specified action: run main/othervm nsk.monitoring.MemoryPoolMBean.isCollectionUsageThresholdExceeded.isexceeded001 -testMode=proxy -MBeanServer=custom 
started: Thu Feb 23 14:54:03 UTC 2023
Mode: othervm [/othervm specified]
finished: Thu Feb 23 14:55:04 UTC 2023
elapsed time (seconds): 61.421
----------configuration:(0/0)----------
----------System.out:(55/2978)----------
MemoryMonitor   > Test mode:	access to MBean through proxy
MemoryMonitor   > MBeanServer:	CUSTOM
MemoryMonitor   > Memory:	heap	(This setting is used in lowmem* tests only)
MemoryMonitor   > Monitoring:	notification	(This setting is used in lowmem* tests only)
MemoryMonitor   > Threshold:	usage	(This setting is used in lowmem* tests only)
MemoryMonitor   > Timeout:	30	(This setting is used in lowmem* tests only)
0 pool CodeHeap 'non-nmethods'
  does not support collection usage thresholds
  UnsupportedOperationException is thrown
1 pool Metaspace
  does not support collection usage thresholds
  UnsupportedOperationException is thrown
2 pool CodeHeap 'profiled nmethods'
  does not support collection usage thresholds
  UnsupportedOperationException is thrown
3 pool PS Old Gen
  supports collection usage thresholds
  setting threshold 1 init = 268435456(262144K) used = 0(0K) committed = 0(0K) max = 716177408(699392K)
  threshold 1 is set, (used = 0, isExceeded = false)
  used value (0) did not cross the threshold value (1)
# ERROR: isCollectionUsageThresholdExceeded() returned true, while threshold = 1 and used = 0
The following stacktrace is for failure analysis.
nsk.share.TestFailure: isCollectionUsageThresholdExceeded() returned true, while threshold = 1 and used = 0
	at nsk.share.Log.logExceptionForFailureAnalysis(Log.java:432)
	at nsk.share.Log.complain(Log.java:403)
	at nsk.monitoring.MemoryPoolMBean.isCollectionUsageThresholdExceeded.isexceeded001.run(isexceeded001.java:144)
	at nsk.monitoring.MemoryPoolMBean.isCollectionUsageThresholdExceeded.isexceeded001.main(isexceeded001.java:37)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
	at java.base/java.lang.reflect.Method.invoke(Method.java:578)
	at com.sun.javatest.regtest.agent.MainWrapper$MainThread.run(MainWrapper.java:125)
	at java.base/java.lang.Thread.run(Thread.java:1623)
4 pool Compressed Class Space
  does not support collection usage thresholds
  UnsupportedOperationException is thrown
5 pool PS Survivor Space
  supports collection usage thresholds
  setting threshold 1 init = 16777216(16384K) used = 0(0K) committed = 16777216(16384K) max = 16777216(16384K)
  threshold 1 is set, (used = 0, isExceeded = false)
  used value (0) did not cross the threshold value (1)
6 pool PS Eden Space
  supports collection usage thresholds
  setting threshold 1 init = 100663296(98304K) used = 0(0K) committed = 100663296(98304K) max = 324009984(316416K)
  threshold 1 is set, (used = 0, isExceeded = false)
  used value (0) did not cross the threshold value (1)
7 pool CodeHeap 'non-profiled nmethods'
  does not support collection usage thresholds
  UnsupportedOperationException is thrown
TEST FAILED


#>  
#>  SUMMARY: Following errors occured
#>      during test execution:
#>  
# ERROR: isCollectionUsageThresholdExceeded() returned true, while threshold = 1 and used = 0
----------System.err:(0/0)----------
----------rerun:(41/7238)*----------",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,x86_64,,,,,,,,,,windows,,,,,,"0|i30iiz:",9223372036854775807,b13,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@411d4af6,,,,,,,,,"2023-03-01 04:28;kevinw;After the allocation, and testing isExceeded, we refresh ""usage"", but don't refresh ""used"".

In this failure, used < threshold because our allocation did not affect the PS Old Gen, but 
then it immediately checks isCollectionThresholdExceeded and sees ""true"".  
We previously logged: (used = 0, isExceeded = false)
..so this isExceeded=true must be a change.  But then we compare the old ""used"" value against threshold.
We see used < threshold and complain/fail.
We should refresh ""used"" before this check, if there has been a GC to promote objects into the old gen, 
the used value should now be above the threshold and validate that the isExceeded value does not show a problem.
;;;","2023-03-02 02:17;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/12823
Date: 2023-03-02 09:20:23 +0000;;;","2023-03-08 00:21;dukebot;Changeset: afda8fbf
Author:    Kevin Walls <kevinw@openjdk.org>
Date:      2023-03-08 08:20:27 +0000
URL:       https://git.openjdk.org/jdk/commit/afda8fbf0bcea18cbe741e9c693789ebe0c6c4c5
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,
JFR: Missing stack trace during chunk rotation stress,JDK-8303134,5094920,Bug,Closed,JDK,JDK,software,duke,,,P2,Fixed,mgronlun,egahlin,egahlin,2023-02-23 12:10,2023-09-19 07:19,2023-10-01 09:56,2023-07-14 05:52,,,,,,,,,21,hotspot,,0,,,,,,,,,,,,,,,,,"The test TestChunkIntegrity.java fails on Windows. 

Can easily be reproduce 1 out 30 times on Windows and Linux-

Veryfying chunk: disassembled\\recording_00.jfr 0
Veryfying chunk: disassembled\\recording_01.jfr 2359
Veryfying chunk: disassembled\\recording_02.jfr 6221
Failure file with only event 700 written to: failure.jfr
----------System.err:(12/781)----------
java.lang.AssertionError: Stack trace was null. Event number 700
	at jdk.jfr.jvm.TestChunkIntegrity.assertStressEvent(TestChunkIntegrity.java:153)
	at jdk.jfr.jvm.TestChunkIntegrity.main(TestChunkIntegrity.java:130)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
	at java.base/java.lang.reflect.Method.invoke(Method.java:578)
	at com.sun.javatest.regtest.agent.MainWrapper$MainThread.run(MainWrapper.java:125)
	at java.base/java.lang.Thread.run(Thread.java:1623)


The test is currently mark as ""@ignored"", but it should be fixed.",,,,,,,,,,,JDK-8312086,JDK-8312920,,,,,,,,,,,,,,,,,,,,,,,,JDK-8316525,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i30ihn:",9223372036854775807,b32,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@42995637,,,,,,,Verified,,"2023-07-03 03:29;mgronlun;Increasing the priority for this as it involves data loss. The root causes have been found, it involves problematic interaction with safepoint poll sites, especially when using Unsafe and the interpreter. Epoch shifts happens during safepoints, so the commit mechanism must be very detailed to avoid ending up in a pending safepoint before the data is committed. It involves a new intrinsic for JVM.commit().

;;;","2023-07-03 11:27;mgronlun;Detailed analysis of problematic sites:

src/hotspot/share/runtime/objectMonitor.cpp: 389

JavaMonitorEnter:

JFR_ONLY(JfrConditionalFlushWithStacktrace<EventJavaMonitorEnter> flush(current);) is a construct that was used pre-emptively before getting the monitor. It flushed the threads buffer and captured the current stack trace before entering. The problem happens here because entering a contended monitor could lead to the thread waiting with a safepoint check. That is, JFR could issue a safepoint to evolve the epoch during the time the thread was blocked on the monitor. Hence, the stack trace information would be stale once written to the event. The fix is to only pre-emptively flush the buffer but not take the stack trace pre-emptively.

StringPool:
    private static long storeString(String s) {
        long sid = sidIdx.getAndIncrement();
        /* we can race, but it is ok */
        cache.put(s, sid);
        synchronized (StringPool.class) {
            JVM.addStringConstant(sid, s);
            currentSizeUTF16 += s.length();
        }
        return sid;
    }

Here the thread adds a string to the string pool cache before being serialized to the JVM (under the StringPool.class lock). Other threads could pick up the not yet written string id before the string was committed to the JVM. Also, the string pool was cleared on every rotation, which was wasteful. A new generational scheme is introduced to help keep the strings in the cache and only write them to the JVM when needed (i.e. in a new epoch).

General issues with missing classes and stack traces:

The most general problematic site involves how the EventWriter writes data to the underlying native memory buffer. It consists in using the APIs in Unsafe. Unfortunately, Unsafe methods are not safepoint agnostic. This means that when writing the current position to the start position of the underlying buffer (i.e. committing an event), the thread would perform a safepoint check on the native to VM transition. If JFR is safepointing to evolve the epoch, the thread will block before the actual write. When the thread awakes from the safepoint and performs the commit, the data is already stale (artefacts tagged in the previous epoch).

We must rely on a transactional commit write mechanism to circumvent potential safepoint checks in the critical path. Therefore, a new native method JVM.commit() is added (for the interpreter and C1), complemented with a new C2 intrinsic.

These do not perform a transition from native to vm but stay in native until the buffer data has been committed. We instead take the safepoint check on the way back to Java, because, at this time, the event is already committed.

New platform-specific stubs act as trampolines for jumping back into the JVM from the new C2 intrinsic on the slow path.;;;","2023-07-03 11:40;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/14761
Date: 2023-07-03 18:33:30 +0000;;;","2023-07-14 04:47;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk21/pull/129
Date: 2023-07-14 11:38:32 +0000;;;","2023-07-14 05:52;dukebot;Changeset: c199b8c7
Author:    Markus Grönlund <mgronlun@openjdk.org>
Date:      2023-07-14 12:49:08 +0000
URL:       https://git.openjdk.org/jdk21/commit/c199b8c761c14542953a01c1efd6ccec95179234
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,
pandoc.exe mangles all processed html files,JDK-8303131,5094917,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,jwaters,jwaters,jwaters,2023-02-23 11:11,2023-03-01 22:55,2023-10-01 09:56,2023-02-24 00:49,,,,,,,,,21,infrastructure,,0,,,,,,,,,,,,,,,,,"pandoc.exe follows the Windows CRLF format of newlines, whereas we only ever have LF in our documentation files. As a result whenever we generate html the resulting html files will all be mangled, even if there was no change to the corresponding markdown file. We should force pandoc to always use LF with --eol=lf no matter what platform the pandoc executable was compiled for",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8223157,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i30igz:",9223372036854775807,b12,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@429c566,,,,,,,,,"2023-02-23 11:25;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/12733
Date: 2023-02-23 19:18:32 +0000;;;","2023-02-24 00:49;dukebot;Changeset: 7d8b8ba9
Author:    Julian Waters <jwaters@openjdk.org>
Date:      2023-02-24 08:47:41 +0000
URL:       https://git.openjdk.org/jdk/commit/7d8b8ba9c46475ededcae7db6c841b25fa83d167
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Document required Accessibility permissions on macOS,JDK-8303130,5094916,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,dmarkov,aivanov,aivanov,2023-02-23 10:27,2023-05-05 04:10,2023-10-01 09:56,2023-02-28 11:52,11,17,21,,,,,,21,docs,,0,cssn23_02_02,jdk11u-a11y-defer,jdk17u-fix-request,jdk17u-fix-yes,sustaining,,,,,,,,,,,,"Running client tests which use Robot to control UI requires granting Accessibility permissions on macOS. Both Java and Terminal should be granted the permission to ""control your computer"".

Otherwise, such tests will fail.",,,,,,,,,,,JDK-8304277,JDK-8304604,JDK-8304126,JDK-8306995,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,os_x,,,,,,"0|i30igr:",9223372036854775807,b12,,,,,,,,,,,"2023-02-27 08:04;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/12772
Date: 2023-02-27 15:54:28 +0000;;;","2023-02-28 11:52;dukebot;Changeset: a10d5ac6
Author:    Dmitry Markov <dmarkov@openjdk.org>
Date:      2023-02-28 19:50:49 +0000
URL:       https://git.openjdk.org/jdk/commit/a10d5ac61be3d074937f629959c7aeb694147203
;;;","2023-04-26 07:15;goetz;Fix request [17u]

I backport this for parity with 17.0.8-oracle.
No risk, only a doc change.
Clean backport.
SAP nightly testing passed.;;;","2023-04-26 07:32;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/1301
Date: 2023-04-26 14:14:59 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,
Update Internationalization guide for JDK-8301119 - Support for GB18030-2022,JDK-8303124,5094909,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,rgallard,korozcosanch,korozcosanch,2023-02-23 08:43,2023-06-19 05:25,2023-10-01 09:56,2023-06-19 05:25,11,17,20,21,7,8,,,21,docs,,0,CPU23_07-critical-approved,jdk11u-na,jdk17u-na,,,,,,,,,,,,,,Update Internationalization guide for JDK-8301119 - Support for GB18030-2022,,,,,,,,,,,JDK-8309284,JDK-8309292,JDK-8309452,JDK-8309293,JDK-8310104,JDK-8309294,JDK-8309217,,,,,,,,,,,,,,,,,,,,,,,,JDK-8301119,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i30if7:",9223372036854775807,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4eba8c33,,,,,,,,,"2023-06-05 10:55;goetz;[11u,17u]
As I understand this is a document not maintained in the open.;;;","2023-06-19 05:25;rgallard;https://docs-uat.us.oracle.com/en/java/javase/21/intl/supported-encodings.html#GUID-E20951E6-C420-4D2F-A6BE-1470B4D55B3B;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Add line break opportunity to single type parameters,JDK-8303123,5094908,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,hannesw,hannesw,hannesw,2023-02-23 08:26,2023-04-10 10:22,2023-10-01 09:56,2023-04-03 03:41,20,,,,,,,,21,tools,,0,,,,,,,,,,,,,,,,,"When linking a generic type with a single type parameter we do not currently add a line break opportunity (`<wbr>`). However, since type arguments can be nested these types can get quite long. This can trigger horizontal overflow/scrolling where we don't want it, like in the first column of the method summary table (see attached screenshot). 

It would probably be preferable to allow the browser to insert line breaks somewhere along the type parameter boundaries. ",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"2023-02-23 08:26;hannesw;screenshot-1.png;https://bugs.openjdk.org/secure/attachment/102769/screenshot-1.png",,,,,,,,,,,,generic,,,,,,,,,,generic,,,,,,"0|i30iez:",9223372036854775807,b17,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@7900061a,,,,,,,,,"2023-02-23 09:14;jjg;Maybe it is enough to put a break-point immediately before the first `<`

;;;","2023-02-24 06:31;hannesw;In this case types are rendered recursively, and we don't track depth of recursion. I'd suggest adding a break-point before every `<` and let the browser decide.;;;","2023-03-21 07:21;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/13119
Date: 2023-03-21 14:11:56 +0000;;;","2023-04-03 03:41;dukebot;Changeset: 2e91585a
Author:    Hannes Wallnöfer <hannesw@openjdk.org>
Date:      2023-04-03 10:39:56 +0000
URL:       https://git.openjdk.org/jdk/commit/2e91585ac945c9a5602decbd5cb1b0b646f8276f
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,
LoopRangeStrideTest fails IR verification on x86,JDK-8303105,5094885,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,jbhateja,thartmann,thartmann,2023-02-22 23:04,2023-03-16 00:17,2023-10-01 09:56,2023-03-09 04:07,21,,,,,,,,21,hotspot,,0,noreg-self,oraclejdk-na,oracle-triage-21,,,,,,,,,,,,,,"Reported by Eirik Bjørsnøs <eirbjo@gmail.com>: https://mail.openjdk.org/pipermail/hotspot-compiler-dev/2023-February/062905.html

After JDK-8302668 fixed the SSE rules, LoopRangeStrideTest.countDownLoopWithNegScale and LoopRangeStrideTest.countupLoopWithNegScale fail IR verification on Linux x86:

Run Test VM - [-XX:-OptimizeFill]:
Command line: [/home/runner/work/jdk/jdk/bundles/jdk/jdk-21/fastdebug/bin/java -cp /home/runner/work/jdk/jdk/build/run-test-prebuilt/test-support/jtreg_test_hotspot_jtreg_tier1_compiler/classes/compiler/vectorization/runner/LoopRangeStrideTest.d:/home/runner/work/jdk/jdk/test/hotspot/jtreg/compiler/vectorization/runner:/home/runner/work/jdk/jdk/build/run-test-prebuilt/test-support/jtreg_test_hotspot_jtreg_tier1_compiler/classes/test/lib:/home/runner/work/jdk/jdk/test/lib:/home/runner/work/jdk/jdk/build/run-test-prebuilt/test-support/jtreg_test_hotspot_jtreg_tier1_compiler/classes:/home/runner/work/jdk/jdk/test/hotspot/jtreg:/home/runner/work/jdk/jdk/jtreg/installed/lib/javatest.jar:/home/runner/work/jdk/jdk/jtreg/installed/lib/jtreg.jar -Djava.library.path=/home/runner/work/jdk/jdk/bundles/tests/hotspot/jtreg/native -Xbootclasspath/a:. -XX:+UnlockDiagnosticVMOptions -XX:+WhiteBoxAPI -XX:MaxRAMPercentage=25 -Dtest.boot.jdk=bootjdk/jdk -Djava.io.tmpdir=/home/runner/work/jdk/jdk/build/run-test-prebuilt/test-support/jtreg_test_hotspot_jtreg_tier1_compiler/tmp -XX:-CreateCoredumpOnCrash -Dir.framework.server.port=36331 -XX:-OptimizeFill -XX:+PrintCompilation -XX:+UnlockDiagnosticVMOptions -XX:+LogCompilation -XX:CompilerDirectivesFile=test-vm-compile-commands-pid-58826.log -XX:CompilerDirectivesLimit=91 -XX:-OmitStackTraceInFastThrow -DShouldDoIRVerification=true -XX:-BackgroundCompilation -XX:CompileCommand=quiet compiler.lib.ir_framework.test.TestVM compiler.vectorization.runner.LoopRangeStrideTest ]
[2023-02-22T18:31:21.995946498Z] Gathering output for process 58848
[2023-02-22T18:31:24.404010607Z] Waiting for completion for process 58848
[2023-02-22T18:31:24.404257105Z] Waiting for completion finished for process 58848
Output and diagnostic info for process 58848 was saved into 'pid-58848-output.log'
[2023-02-22T18:31:24.429929695Z] Waiting for completion for process 58848
[2023-02-22T18:31:24.430105294Z] Waiting for completion finished for process 58848

Compilations (2) of Failed Methods (2)
--------------------------------------
1) Compilation of ""public int[] compiler.vectorization.runner.LoopRangeStrideTest.countDownLoopWithNegScale()"":
> Phase ""PrintIdeal"":
AFTER: print_ideal
    0  Root  === 0 82 614 625 243 242 508 1114 529 1103 550 1093 571 604 593  [[ 0 1 3 22 23 228 26 28 1324 30 170 813 774 37 39 148 63 77 90 103 129 133 731 719 386 376 365 820 866 870 896 939 1002 1004 1007 1009 1011 1017 1072 1115 1197 1198 1199 1200 1204 1245 1247 1248 1249 1250 1251 1252 1253 1254 1287 1292 1293 1295 1300 1302 1304 1305 1313 1316 1317 1319 1360 1361 1363 1373 1376 1379 1409 ]] 
    1  Con  === 0  [[ ]]  #top
    3  Start  === 3 0  [[ 3 5 6 7 8 9 10 ]]  #{0:control, 1:abIO, 2:memory, 3:rawptr:BotPTR, 4:return_address, 5:compiler/vectorization/runner/LoopRangeStrideTest:NotNull *}
    5  Parm  === 3  [[ 1404 1365 1366 ]] Control !jvms: LoopRangeStrideTest::countDownLoopWithNegScale @ bci:-1 (line 214)
    6  Parm  === 3  [[ 1375 1358 ]] I_O !jvms: LoopRangeStrideTest::countDownLoopWithNegScale @ bci:-1 (line 214)
    7  Parm  === 3  [[ 317 150 131 172 16 1400 50 59 75 1365 1366 1382 ]] Memory  Memory: @BotPTR *+bot, idx=Bot; !orig=[112],[120] !jvms: LoopRangeStrideTest::countDownLoopWithNegScale @ bci:-1 (line 214)
    8  Parm  === 3  [[ 243 242 593 614 1400 78 604 625 82 508 529 550 571 1093 1114 1103 ]] FramePtr !orig=[507] !jvms: LoopRangeStrideTest::countDownLoopWithNegScale @ bci:-1 (line 214)
    9  Parm  === 3  [[ 243 242 78 ]] ReturnAdr !jvms: LoopRangeStrideTest::countDownLoopWithNegScale @ bci:-1 (line 214)
   10  Parm  === 3  [[ 130 130 78 1400 171 171 ]] Parm0: compiler/vectorization/runner/LoopRangeStrideTest:NotNull *  Oop:compiler/vectorization/runner/LoopRangeStrideTest:NotNull * !jvms: LoopRangeStrideTest::countDownLoopWithNegScale @ bci:-1 (line 214)
   16  MergeMem  === _ 1 7 1399 1399 1399 432  [[ 242 ]]  { N1399:rawptr:BotPTR N1399:java/lang/Object * N1399:java/lang/Object+4 * N432:int[int:>=0] (java/lang/Cloneable,java/io/Serializable):exact+any * }  Memory: @BotPTR *+bot, idx=Bot;
   22  ConI  === 0  [[ 1400 727 1387 ]]  #int:543
   23  ConP  === 0  [[ 1385 ]]  #precise [int (java/lang/Cloneable,java/io/Serializable): :Constant:exact *
   26  ConI  === 0  [[ 431 ]]  #int:-1
   28  ConI  === 0  [[ 1389 1164 430 443 ]]  #int:0
   30  ConI  === 0  [[ 1163 442 ]]  #int:2
   37  ConI  === 0  [[ 1367 1158 1147 1152 435 437 440 ]]  #int:2184
   39  ConI  === 0  [[ 1383 ]]  #int:1
   44  Proj  === 1400  [[ 47 ]] #0 !jvms: LoopRangeStrideTest::countDownLoopWithNegScale @ bci:3 (line 214)
   47  Catch  === 44 54  [[ 1401 49 ]]  !jvms: LoopRangeStrideTest::countDownLoopWithNegScale @ bci:3 (line 214)
   49  CatchProj  === 47  [[ 243 52 ]] #1@bci -1  !jvms: LoopRangeStrideTest::countDownLoopWithNegScale @ bci:3 (line 214)
   50  MergeMem  === _ 1 7 53  [[ 243 ]]  { N53:rawptr:BotPTR }  Memory: @BotPTR *+bot, idx=Bot; !jvms: LoopRangeStrideTest::countDownLoopWithNegScale @ bci:3 (line 214)
   52  CreateEx  === 49 54  [[ 243 ]]  #java/lang/Throwable (java/io/Serializable):NotNull *  Oop:java/lang/Throwable (java/io/Serializable):NotNull * !jvms: LoopRangeStrideTest::countDownLoopWithNegScale @ bci:3 (line 214)
   53  Proj  === 1400  [[ 50 1357 ]] #2  Memory: @BotPTR *+bot, idx=Bot; !jvms: LoopRangeStrideTest::countDownLoopWithNegScale @ bci:3 (line 214)
   54  Proj  === 1400  [[ 47 52 243 ]] #1 !orig=[111] !jvms: LoopRangeStrideTest::countDownLoopWithNegScale @ bci:3 (line 214)
   56  Initialize  === 1356 1 59 1 1 1 1357  [[ 1397 1396 ]]  !jvms: LoopRangeStrideTest::countDownLoopWithNegScale @ bci:3 (line 214)
   59  MergeMem  === _ 1 1357 1 1 1 7  [[ 56 ]]  { - - - N7:int[int:>=0] (java/lang/Cloneable,java/io/Serializable):exact+any * }  Memory: @BotPTR *+bot, idx=Bot; !jvms: LoopRangeStrideTest::countDownLoopWithNegScale @ bci:3 (line 214)
   60  CheckCastPP  === 1398 1359  [[ 242 957 78 1155 1156 1170 1153 221 437 438 438 469 1154 469 679 973 980 784 1172 1171 793 1156 966 1173 1152 ]]  #int[int:543] (java/lang/Cloneable,java/io/Serializable):NotNull:exact * !jvms: LoopRangeStrideTest::countDownLoopWithNegScale @ bci:3 (line 214)
   63  ConI  === 0  [[ 78 78 1408 ]]  #int:271
   75  MergeMem  === _ 1 7 1399 1399 1399 1399  [[ 78 ]]  { N1399:rawptr:BotPTR N1399:java/lang/Object * N1399:java/lang/Object+4 * N1399:int[int:>=0] (java/lang/Cloneable,java/io/Serializable):exact+any * }  Memory: @BotPTR *+bot, idx=Bot; !jvms: LoopRangeStrideTest::countDownLoopWithNegScale @ bci:11 (line 215)
   77  ConI  === 0  [[ 78 ]]  #int:-138
   78  CallStaticJava  === 266 1358 75 8 9 (77 10 60 63 63 ) [[ 79 ]] # Static uncommon_trap(reason='predicate' action='maybe_recompile')  void ( int ) C=0.000100 LoopRangeStrideTest::countDownLoopWithNegScale @ bci:11 (line 215) reexecute !jvms: LoopRangeStrideTest::countDownLoopWithNegScale @ bci:11 (line 215)
   79  Proj  === 78  [[ 82 ]] #0 !jvms: LoopRangeStrideTest::countDownLoopWithNegScale @ bci:11 (line 215)
   82  Halt  === 79 1 1 8 1  [[ 0 ]]  !jvms: LoopRangeStrideTest::countDownLoopWithNegScale @ bci:11 (line 215)
  129  ConI  === 0  [[ 130 1393 ]]  #int:16
  130  AddP  === _ 10 10 129  [[ 131 ]]   Oop:compiler/vectorization/runner/LoopRangeStrideTest:NotNull+16 * !jvms: LoopRangeStrideTest::countDownLoopWithNegScale @ bci:21 (line 216)
  131  LoadP  === _ 7 130  [[ 167 134 1161 1160 1159 1158 1178 960 968 795 1176 1177 787 975 982 682 472 472 1162 1162 441 441 440 1175 149 149 ]]  @compiler/vectorization/runner/LoopRangeStrideTest+16 *, name=a, idx=7; #int[int:>=0] (java/lang/Cloneable,java/io/Serializable):exact * !jvms: LoopRangeStrideTest::countDownLoopWithNegScale @ bci:21 (line 216)
  133  ConP  === 0  [[ 134 174 ]]  #NULL
  134  CmpP  === _ 131 133  [[ 135 ]]  !jvms: LoopRangeStrideTest::countDownLoopWithNegScale @ bci:29 (line 216)
  135  Bool  === _ 134  [[ 268 ]] [ne] !jvms: LoopRangeStrideTest::countDownLoopWithNegScale @ bci:29 (line 216)
  148  ConI  === 0  [[ 149 316 1386 ]]  #int:8
  149  AddP  === _ 131 131 148  [[ 150 ]]  !orig=[271],... !jvms: LoopRangeStrideTest::countDownLoopWithNegScale @ bci:29 (line 216)
  150  LoadRange  === 269 7 149  [[ 366 597 294 377 1314 1311 ]]  @bottom[int:>=0] (java/lang/Cloneable,java/io/Serializable)+8 *, idx=8; #int:>=0 !orig=[272],... !jvms: LoopRangeStrideTest::countDownLoopWithNegScale @ bci:29 (line 216)
  167  AddP  === _ 131 1162 1253  [[ 169 ]]  !jvms: LoopRangeStrideTest::countDownLoopWithNegScale @ bci:29 (line 216)
  169  LoadI  === 420 674 167  |269  [[ 206 ]]  @int[int:>=0] (java/lang/Cloneable,java/io/Serializable):exact+any *, idx=6; #int !jvms: LoopRangeStrideTest::countDownLoopWithNegScale @ bci:29 (line 216)
  170  ConI  === 0  [[ 171 ]]  #int:20
  171  AddP  === _ 10 10 170  [[ 172 ]]   Oop:compiler/vectorization/runner/LoopRangeStrideTest:NotNull+20 * !jvms: LoopRangeStrideTest::countDownLoopWithNegScale @ bci:31 (line 216)
  172  LoadP  === _ 7 171  [[ 316 174 1150 1149 1148 1147 1168 1151 1151 791 1166 1167 782 964 971 677 467 467 1165 436 436 435 978 203 955 316 ]]  @compiler/vectorization/runner/LoopRangeStrideTest+20 *, name=b, idx=9; #int[int:>=0] (java/lang/Cloneable,java/io/Serializable):exact * !jvms: LoopRangeStrideTest::countDownLoopWithNegScale @ bci:31 (line 216)
  174  CmpP  === _ 172 133  [[ 175 ]]  !jvms: LoopRangeStrideTest::countDownLoopWithNegScale @ bci:39 (line 216)
  175  Bool  === _ 174  [[ 313 ]] [ne] !jvms: LoopRangeStrideTest::countDownLoopWithNegScale @ bci:39 (line 216)
  203  AddP  === _ 172 1151 1253  [[ 205 ]]  !jvms: LoopRangeStrideTest::countDownLoopWithNegScale @ bci:39 (line 216)
  205  LoadI  === 420 674 203  |314  [[ 206 ]]  @int[int:>=0] (java/lang/Cloneable,java/io/Serializable):exact+any *, idx=6; #int !jvms: LoopRangeStrideTest::countDownLoopWithNegScale @ bci:39 (line 216)
  206  MulI  === _ 169 205  [[ 223 ]]  !jvms: LoopRangeStrideTest::countDownLoopWithNegScale @ bci:40 (line 216)
  221  AddP  === _ 60 1156 1253  [[ 223 ]]  !jvms: LoopRangeStrideTest::countDownLoopWithNegScale @ bci:41 (line 216)
  223  StoreI  === 1185 674 221 206  [[ 1188 446 ]]  @int[int:>=0] (java/lang/Cloneable,java/io/Serializable):exact+any *, idx=6;  Memory: @int[int:543] (java/lang/Cloneable,java/io/Serializable):NotNull:exact+any *, idx=6; !orig=695 !jvms: LoopRangeStrideTest::countDownLoopWithNegScale @ bci:41 (line 216)
  224  AddI  === _ 1189 1072  [[ 1189 246 ]]  !orig=[245],... !jvms: LoopRangeStrideTest::countDownLoopWithNegScale @ bci:42 (line 215)
  242  Return  === 449 1358 16 8 9 returns 60  [[ 0 ]] 
  243  Rethrow  === 49 54 50 8 9 exception 52  [[ 0 ]] 
  246  CmpI  === _ 224 1115  [[ 247 ]]  !orig=[231] !jvms: LoopRangeStrideTest::countDownLoopWithNegScale @ bci:11 (line 215)
  247  Bool  === _ 246  [[ 248 ]] [gt] !orig=[232] !jvms: LoopRangeStrideTest::countDownLoopWithNegScale @ bci:11 (line 215)
  248  CountedLoopEnd  === 1185 247  [[ 249 251 ]] [gt] P=0.996332, C=68452.000000 !orig=[233] !jvms: LoopRangeStrideTest::countDownLoopWithNegScale @ bci:11 (line 215)
  249  IfTrue  === 248  [[ 1185 ]] #1 !orig=[235] !jvms: LoopRangeStrideTest::countDownLoopWithNegScale @ bci:11 (line 215)
  251  IfFalse  === 248  [[ 1325 439 434 591 ]] #0 !orig=[250],[234] !jvms: LoopRangeStrideTest::countDownLoopWithNegScale @ bci:11 (line 215)
  266  Region  === 266 315 270 371 382 421 428  [[ 266 78 ]]  !orig=[74] !jvms: LoopRangeStrideTest::countDownLoopWithNegScale @ bci:11 (line 215)
  268  If  === 1398 135  [[ 269 270 ]] P=0.999999, C=-1.000000
  269  IfTrue  === 268  [[ 1410 1134 169 150 1131 439 471 681 950 947 786 1126 1118 777 942 959 1123 1157 1139 1142 ]] #1
  270  IfFalse  === 268  [[ 266 ]] #0
  294  ConvI2L  === _ 150  [[ 586 1320 ]]  #long:0..maxint
  313  If  === 381 175  [[ 314 315 ]] P=0.999999, C=-1.000000
  314  IfTrue  === 313  [[ 1412 1138 317 954 205 951 434 466 676 946 943 781 1122 1119 778 1130 1127 1146 1135 1143 ]] #1
  315  IfFalse  === 313  [[ 266 ]] #0
  316  AddP  === _ 172 172 148  [[ 317 ]]  !orig=[187] !jvms: LoopRangeStrideTest::countDownLoopWithNegScale @ bci:39 (line 216)
  317  LoadRange  === 314 7 316  [[ 423 409 338 618 1309 1307 ]]  @bottom[int:>=0] (java/lang/Cloneable,java/io/Serializable)+8 *, idx=8; #int:>=0 !orig=[188] !jvms: LoopRangeStrideTest::countDownLoopWithNegScale @ bci:39 (line 216)
  338  ConvI2L  === _ 317  [[ 607 1322 ]]  #long:0..maxint
  365  ConI  === 0  [[ 366 423 ]]  #int:272
  366  CmpU  === _ 150 365  [[ 368 ]]  !orig=[275]
  368  Bool  === _ 366  [[ 1410 ]] [le]
  370  IfFalse  === 1410  [[ 1411 ]] #0 !orig=[278]
  371  IfTrue  === 1410  [[ 266 ]] #1 !orig=[279]
  376  ConI  === 0  [[ 377 409 ]]  #int:542
  377  CmpU  === _ 150 376  [[ 379 ]]  !orig=[283]
  379  Bool  === _ 377  [[ 1411 ]] [le]
  381  IfFalse  === 1411  [[ 313 471 ]] #0 !orig=[286]
  382  IfTrue  === 1411  [[ 266 ]] #1 !orig=[287]
  386  ConL  === 0  [[ 585 ]]  #long:543
  409  CmpU  === _ 317 376  [[ 418 ]]  !orig=[328]
  418  Bool  === _ 409  [[ 1413 ]] [le]
  420  IfFalse  === 1413  [[ 464 466 681 1146 1143 1142 1139 1138 1135 1134 1131 1130 1127 1126 1123 1122 1119 1118 959 954 951 950 947 946 943 942 786 781 778 777 169 1157 1414 205 676 ]] #0 !orig=[331] !jvms: LoopRangeStrideTest::countDownLoopWithNegScale @ bci:11 (line 215)
  421  IfTrue  === 1413  [[ 266 ]] #1 !orig=[332]
  423  CmpU  === _ 317 365  [[ 425 ]]  !orig=[320]
  425  Bool  === _ 423  [[ 1412 ]] [le]
  427  IfFalse  === 1412  [[ 1413 ]] #0 !orig=[323]
  428  IfTrue  === 1412  [[ 266 ]] #1 !orig=[324]
  429  Bool  === _ 430  [[ 447 ]] [gt] !orig=247,[232] !jvms: LoopRangeStrideTest::countDownLoopWithNegScale @ bci:11 (line 215)
  430  CmpI  === _ 431 28  [[ 429 ]]  !orig=246,[231] !jvms: LoopRangeStrideTest::countDownLoopWithNegScale @ bci:11 (line 215)
  431  AddI  === _ 445 26  [[ 430 445 ]]  !orig=224,... !jvms: LoopRangeStrideTest::countDownLoopWithNegScale @ bci:42 (line 215)
  432  StoreI  === 444 446 437 433  [[ 446 16 ]]  @int[int:>=0] (java/lang/Cloneable,java/io/Serializable):exact+any *, idx=6;  Memory: @int[int:543] (java/lang/Cloneable,java/io/Serializable):NotNull:exact+any *, idx=6; !orig=223,695 !jvms: LoopRangeStrideTest::countDownLoopWithNegScale @ bci:41 (line 216)
  433  MulI  === _ 434 439  [[ 432 ]]  !orig=206 !jvms: LoopRangeStrideTest::countDownLoopWithNegScale @ bci:40 (line 216)
  434  LoadI  === 251 446 435  |314  [[ 433 ]]  @int[int:>=0] (java/lang/Cloneable,java/io/Serializable):exact+any *, idx=6; #int !orig=205 !jvms: LoopRangeStrideTest::countDownLoopWithNegScale @ bci:39 (line 216)
  435  AddP  === _ 172 436 37  [[ 434 ]]  !orig=203 !jvms: LoopRangeStrideTest::countDownLoopWithNegScale @ bci:39 (line 216)
  436  AddP  === _ 172 172 442  [[ 435 ]]  !orig=[359]
  437  AddP  === _ 60 438 37  [[ 432 ]]  !orig=221 !jvms: LoopRangeStrideTest::countDownLoopWithNegScale @ bci:41 (line 216)
  438  AddP  === _ 60 60 442  [[ 437 ]]  !orig=[360]
  439  LoadI  === 251 446 440  |269  [[ 433 ]]  @int[int:>=0] (java/lang/Cloneable,java/io/Serializable):exact+any *, idx=6; #int !orig=169 !jvms: LoopRangeStrideTest::countDownLoopWithNegScale @ bci:29 (line 216)
  440  AddP  === _ 131 441 37  [[ 439 ]]  !orig=167 !jvms: LoopRangeStrideTest::countDownLoopWithNegScale @ bci:29 (line 216)
  441  AddP  === _ 131 131 442  [[ 440 ]]  !orig=[358]
  442  LShiftI  === _ 443 30  [[ 436 438 441 ]]  !orig=[262]
  443  SubI  === _ 28 445  [[ 442 ]]  !orig=[259]
  444  CountedLoop  === 444 621 448  [[ 432 444 445 446 447 ]] inner stride: -1 post of N255 !orig=[255],[244],[118] !jvms: LoopRangeStrideTest::countDownLoopWithNegScale @ bci:14 (line 216)
  445  Phi  === 444 1327 431  [[ 431 443 ]]  #int:1..254:www #tripcount !orig=125 !jvms: LoopRangeStrideTest::countDownLoopWithNegScale @ bci:14 (line 216)
  446  Phi  === 444 223 432  [[ 432 434 439 ]]  #memory  Memory: @int[int:>=0] (java/lang/Cloneable,java/io/Serializable):exact+any *, idx=6; !orig=124 !jvms: LoopRangeStrideTest::countDownLoopWithNegScale @ bci:14 (line 216)
  447  CountedLoopEnd  === 444 429  [[ 448 449 ]] [gt] P=0.500000, C=68452.000000 !orig=248,[233] !jvms: LoopRangeStrideTest::countDownLoopWithNegScale @ bci:11 (line 215)
  448  IfTrue  === 447  [[ 444 ]] #1 !orig=249,[235] !jvms: LoopRangeStrideTest::countDownLoopWithNegScale @ bci:11 (line 215)
  449  IfFalse  === 447  [[ 242 ]] #0 !orig=251,[250],[234] !jvms: LoopRangeStrideTest::countDownLoopWithNegScale @ bci:11 (line 215)
  464  StoreI  === 420 1399 469 465  [[ 1188 ]]  @int[int:>=0] (java/lang/Cloneable,java/io/Serializable):exact+any *, idx=6;  Memory: @int[int:543] (java/lang/Cloneable,java/io/Serializable):NotNull:exact[272] *, idx=6; !orig=223,695 !jvms: LoopRangeStrideTest::countDownLoopWithNegScale @ bci:41 (line 216)
  465  MulI  === _ 466 471  [[ 464 ]]  !orig=206 !jvms: LoopRangeStrideTest::countDownLoopWithNegScale @ bci:40 (line 216)
  466  LoadI  === 420 1399 467  |314  [[ 465 ]]  @int[int:>=0] (java/lang/Cloneable,java/io/Serializable):exact+any *, idx=6; #int !orig=205 !jvms: LoopRangeStrideTest::countDownLoopWithNegScale @ bci:39 (line 216)
  467  AddP  === _ 172 172 1316  [[ 466 ]]  !orig=203 !jvms: LoopRangeStrideTest::countDownLoopWithNegScale @ bci:39 (line 216)
  469  AddP  === _ 60 60 1316  [[ 464 ]]  !orig=221 !jvms: LoopRangeStrideTest::countDownLoopWithNegScale @ bci:41 (line 216)
  471  LoadI  === 381 1399 472  |269  [[ 465 ]]  @int[int:>=0] (java/lang/Cloneable,java/io/Serializable):exact+any *, idx=6; #int !orig=169 !jvms: LoopRangeStrideTest::countDownLoopWithNegScale @ bci:29 (line 216)
  472  AddP  === _ 131 131 1316  [[ 471 ]]  !orig=167 !jvms: LoopRangeStrideTest::countDownLoopWithNegScale @ bci:29 (line 216)
  508  Halt  === 1355 1 1 8 1  [[ 0 ]] 
  529  Halt  === 1339 1 1 8 1  [[ 0 ]] 
  550  Halt  === 1351 1 1 8 1  [[ 0 ]] 
  571  Halt  === 1347 1 1 8 1  [[ 0 ]] 
  584  ConvI2L  === _ 1327  [[ 585 ]]  #long:14..254:www !orig=[562],[289],[383]
  585  SubL  === _ 386 584  [[ 586 607 ]]  !orig=[563],[387],[293]
  586  CmpUL  === _ 585 294  [[ 587 ]]  !orig=[564],[295]
  587  Bool  === _ 586  [[ 591 ]] [lt] !orig=[565],[296]
  589  IfTrue  === 591  [[ 1418 ]] #1 !orig=[567],[299]
  590  IfFalse  === 591  [[ 593 ]] #0 !orig=[568],[300]
  591  If  === 251 587  [[ 589 590 ]] P=0.999999, C=-1.000000 !orig=[569],[298]
  593  Halt  === 590 1 1 8 1  [[ 0 ]] 
  597  CmpU  === _ 727 150  [[ 598 ]]  !orig=[543],[307]
  598  Bool  === _ 597  [[ 1418 ]] [lt] !orig=[544],[308]
  600  IfTrue  === 1418  [[ 612 ]] #1 !orig=[546],[311]
  601  IfFalse  === 1418  [[ 604 ]] #0 !orig=[547],[312]
  604  Halt  === 601 1 1 8 1  [[ 0 ]] 
  607  CmpUL  === _ 585 338  [[ 608 ]]  !orig=[522],[339]
  608  Bool  === _ 607  [[ 612 ]] [lt] !orig=[523],[340]
  610  IfTrue  === 612  [[ 1419 ]] #1 !orig=[525],[343],[355]
  611  IfFalse  === 612  [[ 614 ]] #0 !orig=[526],[344]
  612  If  === 600 608  [[ 610 611 ]] P=0.999999, C=-1.000000 !orig=[527],[342]
  614  Halt  === 611 1 1 8 1  [[ 0 ]] 
  618  CmpU  === _ 727 317  [[ 619 ]]  !orig=[501],[351]
  619  Bool  === _ 618  [[ 1419 ]] [lt] !orig=[502],[352]
  621  IfTrue  === 1419  [[ 444 ]] #1 !orig=[504],[355]
  622  IfFalse  === 1419  [[ 625 ]] #0 !orig=[505],[356]
  625  Halt  === 622 1 1 8 1  [[ 0 ]] 
  674  StoreI  === 1185 775 679 675  [[ 169 223 205 ]]  @int[int:>=0] (java/lang/Cloneable,java/io/Serializable):exact+any *, idx=6;  Memory: @int[int:543] (java/lang/Cloneable,java/io/Serializable):NotNull:exact+any *, idx=6; !orig=223,695 !jvms: LoopRangeStrideTest::countDownLoopWithNegScale @ bci:41 (line 216)
  675  MulI  === _ 676 681  [[ 674 ]]  !orig=206 !jvms: LoopRangeStrideTest::countDownLoopWithNegScale @ bci:40 (line 216)
  676  LoadI  === 420 775 677  |314  [[ 675 ]]  @int[int:>=0] (java/lang/Cloneable,java/io/Serializable):exact+any *, idx=6; #int !orig=205 !jvms: LoopRangeStrideTest::countDownLoopWithNegScale @ bci:39 (line 216)
  677  AddP  === _ 172 1151 1251  [[ 676 ]]  !orig=203 !jvms: LoopRangeStrideTest::countDownLoopWithNegScale @ bci:39 (line 216)
  679  AddP  === _ 60 1156 1251  [[ 674 ]]  !orig=221 !jvms: LoopRangeStrideTest::countDownLoopWithNegScale @ bci:41 (line 216)
  681  LoadI  === 420 775 682  |269  [[ 675 ]]  @int[int:>=0] (java/lang/Cloneable,java/io/Serializable):exact+any *, idx=6; #int !orig=169 !jvms: LoopRangeStrideTest::countDownLoopWithNegScale @ bci:29 (line 216)
  682  AddP  === _ 131 1162 1251  [[ 681 ]]  !orig=167 !jvms: LoopRangeStrideTest::countDownLoopWithNegScale @ bci:29 (line 216)
  719  ConI  === 0  [[ 1189 ]]  #int:270
  727  SubI  === _ 22 1327  [[ 618 597 ]]  !orig=[617],[500],[422],[407],[350]
  775  StoreI  === 1185 779 793 776  [[ 674 676 681 ]]  @int[int:>=0] (java/lang/Cloneable,java/io/Serializable):exact+any *, idx=6;  Memory: @int[int:543] (java/lang/Cloneable,java/io/Serializable):NotNull:exact+any *, idx=6; !orig=223,695 !jvms: LoopRangeStrideTest::countDownLoopWithNegScale @ bci:41 (line 216)
  776  MulI  === _ 777 778  [[ 775 ]]  !orig=206 !jvms: LoopRangeStrideTest::countDownLoopWithNegScale @ bci:40 (line 216)
  777  LoadI  === 420 779 795  |269  [[ 776 ]]  @int[int:>=0] (java/lang/Cloneable,java/io/Serializable):exact+any *, idx=6; #int !orig=169 !jvms: LoopRangeStrideTest::countDownLoopWithNegScale @ bci:29 (line 216)
  778  LoadI  === 420 779 791  |314  [[ 776 ]]  @int[int:>=0] (java/lang/Cloneable,java/io/Serializable):exact+any *, idx=6; #int !orig=205 !jvms: LoopRangeStrideTest::countDownLoopWithNegScale @ bci:39 (line 216)
  779  StoreI  === 1185 940 784 780  [[ 775 777 778 ]]  @int[int:>=0] (java/lang/Cloneable,java/io/Serializable):exact+any *, idx=6;  Memory: @int[int:543] (java/lang/Cloneable,java/io/Serializable):NotNull:exact+any *, idx=6; !orig=674,223,695 !jvms: LoopRangeStrideTest::countDownLoopWithNegScale @ bci:41 (line 216)
  780  MulI  === _ 781 786  [[ 779 ]]  !orig=675,206 !jvms: LoopRangeStrideTest::countDownLoopWithNegScale @ bci:40 (line 216)
  781  LoadI  === 420 940 782  |314  [[ 780 ]]  @int[int:>=0] (java/lang/Cloneable,java/io/Serializable):exact+any *, idx=6; #int !orig=676,205 !jvms: LoopRangeStrideTest::countDownLoopWithNegScale @ bci:39 (line 216)
  782  AddP  === _ 172 1151 1252  [[ 781 ]]  !orig=677,203 !jvms: LoopRangeStrideTest::countDownLoopWithNegScale @ bci:39 (line 216)
  784  AddP  === _ 60 1156 1252  [[ 779 ]]  !orig=679,221 !jvms: LoopRangeStrideTest::countDownLoopWithNegScale @ bci:41 (line 216)
  786  LoadI  === 420 940 787  |269  [[ 780 ]]  @int[int:>=0] (java/lang/Cloneable,java/io/Serializable):exact+any *, idx=6; #int !orig=681,169 !jvms: LoopRangeStrideTest::countDownLoopWithNegScale @ bci:29 (line 216)
  787  AddP  === _ 131 1162 1252  [[ 786 ]]  !orig=682,167 !jvms: LoopRangeStrideTest::countDownLoopWithNegScale @ bci:29 (line 216)
  791  AddP  === _ 172 1151 1254  [[ 778 ]]  !orig=203 !jvms: LoopRangeStrideTest::countDownLoopWithNegScale @ bci:39 (line 216)
  793  AddP  === _ 60 1156 1254  [[ 775 ]]  !orig=221 !jvms: LoopRangeStrideTest::countDownLoopWithNegScale @ bci:41 (line 216)
  795  AddP  === _ 131 1162 1254  [[ 777 ]]  !orig=167 !jvms: LoopRangeStrideTest::countDownLoopWithNegScale @ bci:29 (line 216)
  940  StoreI  === 1185 944 966 941  [[ 779 781 786 ]]  @int[int:>=0] (java/lang/Cloneable,java/io/Serializable):exact+any *, idx=6;  Memory: @int[int:543] (java/lang/Cloneable,java/io/Serializable):NotNull:exact+any *, idx=6; !orig=223,695 !jvms: LoopRangeStrideTest::countDownLoopWithNegScale @ bci:41 (line 216)
  941  MulI  === _ 942 943  [[ 940 ]]  !orig=206 !jvms: LoopRangeStrideTest::countDownLoopWithNegScale @ bci:40 (line 216)
  942  LoadI  === 420 944 968  |269  [[ 941 ]]  @int[int:>=0] (java/lang/Cloneable,java/io/Serializable):exact+any *, idx=6; #int !orig=169 !jvms: LoopRangeStrideTest::countDownLoopWithNegScale @ bci:29 (line 216)
  943  LoadI  === 420 944 964  |314  [[ 941 ]]  @int[int:>=0] (java/lang/Cloneable,java/io/Serializable):exact+any *, idx=6; #int !orig=205 !jvms: LoopRangeStrideTest::countDownLoopWithNegScale @ bci:39 (line 216)
  944  StoreI  === 1185 948 973 945  [[ 940 942 943 ]]  @int[int:>=0] (java/lang/Cloneable,java/io/Serializable):exact+any *, idx=6;  Memory: @int[int:543] (java/lang/Cloneable,java/io/Serializable):NotNull:exact+any *, idx=6; !orig=674,223,695 !jvms: LoopRangeStrideTest::countDownLoopWithNegScale @ bci:41 (line 216)
  945  MulI  === _ 946 947  [[ 944 ]]  !orig=675,206 !jvms: LoopRangeStrideTest::countDownLoopWithNegScale @ bci:40 (line 216)
  946  LoadI  === 420 948 971  |314  [[ 945 ]]  @int[int:>=0] (java/lang/Cloneable,java/io/Serializable):exact+any *, idx=6; #int !orig=676,205 !jvms: LoopRangeStrideTest::countDownLoopWithNegScale @ bci:39 (line 216)
  947  LoadI  === 420 948 975  |269  [[ 945 ]]  @int[int:>=0] (java/lang/Cloneable,java/io/Serializable):exact+any *, idx=6; #int !orig=681,169 !jvms: LoopRangeStrideTest::countDownLoopWithNegScale @ bci:29 (line 216)
  948  StoreI  === 1185 952 980 949  [[ 944 946 947 ]]  @int[int:>=0] (java/lang/Cloneable,java/io/Serializable):exact+any *, idx=6;  Memory: @int[int:543] (java/lang/Cloneable,java/io/Serializable):NotNull:exact+any *, idx=6; !orig=775,223,695 !jvms: LoopRangeStrideTest::countDownLoopWithNegScale @ bci:41 (line 216)
  949  MulI  === _ 950 951  [[ 948 ]]  !orig=776,206 !jvms: LoopRangeStrideTest::countDownLoopWithNegScale @ bci:40 (line 216)
  950  LoadI  === 420 952 982  |269  [[ 949 ]]  @int[int:>=0] (java/lang/Cloneable,java/io/Serializable):exact+any *, idx=6; #int !orig=777,169 !jvms: LoopRangeStrideTest::countDownLoopWithNegScale @ bci:29 (line 216)
  951  LoadI  === 420 952 978  |314  [[ 949 ]]  @int[int:>=0] (java/lang/Cloneable,java/io/Serializable):exact+any *, idx=6; #int !orig=778,205 !jvms: LoopRangeStrideTest::countDownLoopWithNegScale @ bci:39 (line 216)
  952  StoreI  === 1185 1116 957 953  [[ 948 950 951 ]]  @int[int:>=0] (java/lang/Cloneable,java/io/Serializable):exact+any *, idx=6;  Memory: @int[int:543] (java/lang/Cloneable,java/io/Serializable):NotNull:exact+any *, idx=6; !orig=779,674,223,695 !jvms: LoopRangeStrideTest::countDownLoopWithNegScale @ bci:41 (line 216)
  953  MulI  === _ 954 959  [[ 952 ]]  !orig=780,675,206 !jvms: LoopRangeStrideTest::countDownLoopWithNegScale @ bci:40 (line 216)
  954  LoadI  === 420 1116 955  |314  [[ 953 ]]  @int[int:>=0] (java/lang/Cloneable,java/io/Serializable):exact+any *, idx=6; #int !orig=781,676,205 !jvms: LoopRangeStrideTest::countDownLoopWithNegScale @ bci:39 (line 216)
  955  AddP  === _ 172 1151 1247  [[ 954 ]]  !orig=782,677,203 !jvms: LoopRangeStrideTest::countDownLoopWithNegScale @ bci:39 (line 216)
  957  AddP  === _ 60 1156 1247  [[ 952 ]]  !orig=784,679,221 !jvms: LoopRangeStrideTest::countDownLoopWithNegScale @ bci:41 (line 216)
  959  LoadI  === 420 1116 960  |269  [[ 953 ]]  @int[int:>=0] (java/lang/Cloneable,java/io/Serializable):exact+any *, idx=6; #int !orig=786,681,169 !jvms: LoopRangeStrideTest::countDownLoopWithNegScale @ bci:29 (line 216)
  960  AddP  === _ 131 1162 1247  [[ 959 ]]  !orig=787,682,167 !jvms: LoopRangeStrideTest::countDownLoopWithNegScale @ bci:29 (line 216)
  964  AddP  === _ 172 1151 1250  [[ 943 ]]  !orig=203 !jvms: LoopRangeStrideTest::countDownLoopWithNegScale @ bci:39 (line 216)
  966  AddP  === _ 60 1156 1250  [[ 940 ]]  !orig=221 !jvms: LoopRangeStrideTest::countDownLoopWithNegScale @ bci:41 (line 216)
  968  AddP  === _ 131 1162 1250  [[ 942 ]]  !orig=167 !jvms: LoopRangeStrideTest::countDownLoopWithNegScale @ bci:29 (line 216)
  971  AddP  === _ 172 1151 1248  [[ 946 ]]  !orig=677,203 !jvms: LoopRangeStrideTest::countDownLoopWithNegScale @ bci:39 (line 216)
  973  AddP  === _ 60 1156 1248  [[ 944 ]]  !orig=679,221 !jvms: LoopRangeStrideTest::countDownLoopWithNegScale @ bci:41 (line 216)
  975  AddP  === _ 131 1162 1248  [[ 947 ]]  !orig=682,167 !jvms: LoopRangeStrideTest::countDownLoopWithNegScale @ bci:29 (line 216)
  978  AddP  === _ 172 1151 1249  [[ 951 ]]  !orig=791,203 !jvms: LoopRangeStrideTest::countDownLoopWithNegScale @ bci:39 (line 216)
  980  AddP  === _ 60 1156 1249  [[ 948 ]]  !orig=793,221 !jvms: LoopRangeStrideTest::countDownLoopWithNegScale @ bci:41 (line 216)
  982  AddP  === _ 131 1162 1249  [[ 950 ]]  !orig=795,167 !jvms: LoopRangeStrideTest::countDownLoopWithNegScale @ bci:29 (line 216)
 1002  ConI  === 0  [[ 1384 ]]  #int:4
 1004  ConI  === 0  [[ 1160 1154 1149 ]]  #int:2188
 1007  ConI  === 0  [[ 1159 1155 1150 ]]  #int:2192
 1009  ConI  === 0  [[ 1388 ]]  #int:12
 1011  ConI  === 0  [[ 1161 1153 1148 ]]  #int:2196
 1072  ConI  === 0  [[ 224 1327 ]]  #int:-16
 1093  Halt  === 1343 1 1 8 1  [[ 0 ]] 
 1103  Halt  === 1335 1 1 8 1  [[ 0 ]] 
 1114  Halt  === 1331 1 1 8 1  [[ 0 ]] 
 1115  ConI  === 0  [[ 246 ]]  #int:15
 1116  StoreI  === 1185 1120 1171 1117  [[ 952 954 959 ]]  @int[int:>=0] (java/lang/Cloneable,java/io/Serializable):exact+any *, idx=6;  Memory: @int[int:543] (java/lang/Cloneable,java/io/Serializable):NotNull:exact+any *, idx=6; !orig=223,695 !jvms: LoopRangeStrideTest::countDownLoopWithNegScale @ bci:41 (line 216)
 1117  MulI  === _ 1118 1119  [[ 1116 ]]  !orig=206 !jvms: LoopRangeStrideTest::countDownLoopWithNegScale @ bci:40 (line 216)
 1118  LoadI  === 420 1120 1176  |269  [[ 1117 ]]  @int[int:>=0] (java/lang/Cloneable,java/io/Serializable):exact+any *, idx=6; #int !orig=169 !jvms: LoopRangeStrideTest::countDownLoopWithNegScale @ bci:29 (line 216)
 1119  LoadI  === 420 1120 1166  |314  [[ 1117 ]]  @int[int:>=0] (java/lang/Cloneable,java/io/Serializable):exact+any *, idx=6; #int !orig=205 !jvms: LoopRangeStrideTest::countDownLoopWithNegScale @ bci:39 (line 216)
 1120  StoreI  === 1185 1124 1173 1121  [[ 1116 1118 1119 ]]  @int[int:>=0] (java/lang/Cloneable,java/io/Serializable):exact+any *, idx=6;  Memory: @int[int:543] (java/lang/Cloneable,java/io/Serializable):NotNull:exact+any *, idx=6; !orig=674,223,695 !jvms: LoopRangeStrideTest::countDownLoopWithNegScale @ bci:41 (line 216)
 1121  MulI  === _ 1122 1123  [[ 1120 ]]  !orig=675,206 !jvms: LoopRangeStrideTest::countDownLoopWithNegScale @ bci:40 (line 216)
 1122  LoadI  === 420 1124 1167  |314  [[ 1121 ]]  @int[int:>=0] (java/lang/Cloneable,java/io/Serializable):exact+any *, idx=6; #int !orig=676,205 !jvms: LoopRangeStrideTest::countDownLoopWithNegScale @ bci:39 (line 216)
 1123  LoadI  === 420 1124 1178  |269  [[ 1121 ]]  @int[int:>=0] (java/lang/Cloneable,java/io/Serializable):exact+any *, idx=6; #int !orig=681,169 !jvms: LoopRangeStrideTest::countDownLoopWithNegScale @ bci:29 (line 216)
 1124  StoreI  === 1185 1128 1172 1125  [[ 1120 1122 1123 ]]  @int[int:>=0] (java/lang/Cloneable,java/io/Serializable):exact+any *, idx=6;  Memory: @int[int:543] (java/lang/Cloneable,java/io/Serializable):NotNull:exact+any *, idx=6; !orig=775,223,695 !jvms: LoopRangeStrideTest::countDownLoopWithNegScale @ bci:41 (line 216)
 1125  MulI  === _ 1126 1127  [[ 1124 ]]  !orig=776,206 !jvms: LoopRangeStrideTest::countDownLoopWithNegScale @ bci:40 (line 216)
 1126  LoadI  === 420 1128 1177  |269  [[ 1125 ]]  @int[int:>=0] (java/lang/Cloneable,java/io/Serializable):exact+any *, idx=6; #int !orig=777,169 !jvms: LoopRangeStrideTest::countDownLoopWithNegScale @ bci:29 (line 216)
 1127  LoadI  === 420 1128 1168  |314  [[ 1125 ]]  @int[int:>=0] (java/lang/Cloneable,java/io/Serializable):exact+any *, idx=6; #int !orig=778,205 !jvms: LoopRangeStrideTest::countDownLoopWithNegScale @ bci:39 (line 216)
 1128  StoreI  === 1185 1132 1170 1129  [[ 1124 1126 1127 ]]  @int[int:>=0] (java/lang/Cloneable,java/io/Serializable):exact+any *, idx=6;  Memory: @int[int:543] (java/lang/Cloneable,java/io/Serializable):NotNull:exact+any *, idx=6; !orig=779,674,223,695 !jvms: LoopRangeStrideTest::countDownLoopWithNegScale @ bci:41 (line 216)
 1129  MulI  === _ 1130 1131  [[ 1128 ]]  !orig=780,675,206 !jvms: LoopRangeStrideTest::countDownLoopWithNegScale @ bci:40 (line 216)
 1130  LoadI  === 420 1132 1165  |314  [[ 1129 ]]  @int[int:>=0] (java/lang/Cloneable,java/io/Serializable):exact+any *, idx=6; #int !orig=781,676,205 !jvms: LoopRangeStrideTest::countDownLoopWithNegScale @ bci:39 (line 216)
 1131  LoadI  === 420 1132 1175  |269  [[ 1129 ]]  @int[int:>=0] (java/lang/Cloneable,java/io/Serializable):exact+any *, idx=6; #int !orig=786,681,169 !jvms: LoopRangeStrideTest::countDownLoopWithNegScale @ bci:29 (line 216)
 1132  StoreI  === 1185 1136 1153 1133  [[ 1128 1130 1131 ]]  @int[int:>=0] (java/lang/Cloneable,java/io/Serializable):exact+any *, idx=6;  Memory: @int[int:543] (java/lang/Cloneable,java/io/Serializable):NotNull:exact+any *, idx=6; !orig=940,223,695 !jvms: LoopRangeStrideTest::countDownLoopWithNegScale @ bci:41 (line 216)
 1133  MulI  === _ 1134 1135  [[ 1132 ]]  !orig=941,206 !jvms: LoopRangeStrideTest::countDownLoopWithNegScale @ bci:40 (line 216)
 1134  LoadI  === 420 1136 1161  |269  [[ 1133 ]]  @int[int:>=0] (java/lang/Cloneable,java/io/Serializable):exact+any *, idx=6; #int !orig=942,169 !jvms: LoopRangeStrideTest::countDownLoopWithNegScale @ bci:29 (line 216)
 1135  LoadI  === 420 1136 1148  |314  [[ 1133 ]]  @int[int:>=0] (java/lang/Cloneable,java/io/Serializable):exact+any *, idx=6; #int !orig=943,205 !jvms: LoopRangeStrideTest::countDownLoopWithNegScale @ bci:39 (line 216)
 1136  StoreI  === 1185 1140 1155 1137  [[ 1132 1134 1135 ]]  @int[int:>=0] (java/lang/Cloneable,java/io/Serializable):exact+any *, idx=6;  Memory: @int[int:543] (java/lang/Cloneable,java/io/Serializable):NotNull:exact+any *, idx=6; !orig=944,674,223,695 !jvms: LoopRangeStrideTest::countDownLoopWithNegScale @ bci:41 (line 216)
 1137  MulI  === _ 1138 1139  [[ 1136 ]]  !orig=945,675,206 !jvms: LoopRangeStrideTest::countDownLoopWithNegScale @ bci:40 (line 216)
 1138  LoadI  === 420 1140 1150  |314  [[ 1137 ]]  @int[int:>=0] (java/lang/Cloneable,java/io/Serializable):exact+any *, idx=6; #int !orig=946,676,205 !jvms: LoopRangeStrideTest::countDownLoopWithNegScale @ bci:39 (line 216)
 1139  LoadI  === 420 1140 1159  |269  [[ 1137 ]]  @int[int:>=0] (java/lang/Cloneable,java/io/Serializable):exact+any *, idx=6; #int !orig=947,681,169 !jvms: LoopRangeStrideTest::countDownLoopWithNegScale @ bci:29 (line 216)
 1140  StoreI  === 1185 1144 1154 1141  [[ 1136 1138 1139 ]]  @int[int:>=0] (java/lang/Cloneable,java/io/Serializable):exact+any *, idx=6;  Memory: @int[int:543] (java/lang/Cloneable,java/io/Serializable):NotNull:exact+any *, idx=6; !orig=948,775,223,695 !jvms: LoopRangeStrideTest::countDownLoopWithNegScale @ bci:41 (line 216)
 1141  MulI  === _ 1142 1143  [[ 1140 ]]  !orig=949,776,206 !jvms: LoopRangeStrideTest::countDownLoopWithNegScale @ bci:40 (line 216)
 1142  LoadI  === 420 1144 1160  |269  [[ 1141 ]]  @int[int:>=0] (java/lang/Cloneable,java/io/Serializable):exact+any *, idx=6; #int !orig=950,777,169 !jvms: LoopRangeStrideTest::countDownLoopWithNegScale @ bci:29 (line 216)
 1143  LoadI  === 420 1144 1149  |314  [[ 1141 ]]  @int[int:>=0] (java/lang/Cloneable,java/io/Serializable):exact+any *, idx=6; #int !orig=951,778,205 !jvms: LoopRangeStrideTest::countDownLoopWithNegScale @ bci:39 (line 216)
 1144  StoreI  === 1185 1188 1152 1145  [[ 1140 1142 1143 ]]  @int[int:>=0] (java/lang/Cloneable,java/io/Serializable):exact+any *, idx=6;  Memory: @int[int:543] (java/lang/Cloneable,java/io/Serializable):NotNull:exact+any *, idx=6; !orig=952,779,674,223,695 !jvms: LoopRangeStrideTest::countDownLoopWithNegScale @ bci:41 (line 216)
 1145  MulI  === _ 1146 1157  [[ 1144 ]]  !orig=953,780,675,206 !jvms: LoopRangeStrideTest::countDownLoopWithNegScale @ bci:40 (line 216)
 1146  LoadI  === 420 1188 1147  |314  [[ 1145 ]]  @int[int:>=0] (java/lang/Cloneable,java/io/Serializable):exact+any *, idx=6; #int !orig=954,781,676,205 !jvms: LoopRangeStrideTest::countDownLoopWithNegScale @ bci:39 (line 216)
 1147  AddP  === _ 172 1151 37  [[ 1146 ]]  !orig=955,782,677,203 !jvms: LoopRangeStrideTest::countDownLoopWithNegScale @ bci:39 (line 216)
 1148  AddP  === _ 172 1151 1011  [[ 1135 ]]  !orig=964,203 !jvms: LoopRangeStrideTest::countDownLoopWithNegScale @ bci:39 (line 216)
 1149  AddP  === _ 172 1151 1004  [[ 1143 ]]  !orig=978,791,203 !jvms: LoopRangeStrideTest::countDownLoopWithNegScale @ bci:39 (line 216)
 1150  AddP  === _ 172 1151 1007  [[ 1138 ]]  !orig=971,677,203 !jvms: LoopRangeStrideTest::countDownLoopWithNegScale @ bci:39 (line 216)
 1151  AddP  === _ 172 172 1163  [[ 1147 1148 1149 1150 1165 1168 1167 1166 971 677 203 782 955 964 978 791 ]]  !orig=[956],[783],[678],[359]
 1152  AddP  === _ 60 1156 37  [[ 1144 ]]  !orig=957,784,679,221 !jvms: LoopRangeStrideTest::countDownLoopWithNegScale @ bci:41 (line 216)
 1153  AddP  === _ 60 1156 1011  [[ 1132 ]]  !orig=966,221 !jvms: LoopRangeStrideTest::countDownLoopWithNegScale @ bci:41 (line 216)
 1154  AddP  === _ 60 1156 1004  [[ 1140 ]]  !orig=980,793,221 !jvms: LoopRangeStrideTest::countDownLoopWithNegScale @ bci:41 (line 216)
 1155  AddP  === _ 60 1156 1007  [[ 1136 ]]  !orig=973,679,221 !jvms: LoopRangeStrideTest::countDownLoopWithNegScale @ bci:41 (line 216)
 1156  AddP  === _ 60 60 1163  [[ 1152 1153 1154 1155 1170 1173 1172 1171 793 957 966 980 973 679 784 221 ]]  !orig=[958],[785],[680],[360]
 1157  LoadI  === 420 1188 1158  |269  [[ 1145 ]]  @int[int:>=0] (java/lang/Cloneable,java/io/Serializable):exact+any *, idx=6; #int !orig=959,786,681,169 !jvms: LoopRangeStrideTest::countDownLoopWithNegScale @ bci:29 (line 216)
 1158  AddP  === _ 131 1162 37  [[ 1157 ]]  !orig=960,787,682,167 !jvms: LoopRangeStrideTest::countDownLoopWithNegScale @ bci:29 (line 216)
 1159  AddP  === _ 131 1162 1007  [[ 1139 ]]  !orig=975,682,167 !jvms: LoopRangeStrideTest::countDownLoopWithNegScale @ bci:29 (line 216)
 1160  AddP  === _ 131 1162 1004  [[ 1142 ]]  !orig=982,795,167 !jvms: LoopRangeStrideTest::countDownLoopWithNegScale @ bci:29 (line 216)
 1161  AddP  === _ 131 1162 1011  [[ 1134 ]]  !orig=968,167 !jvms: LoopRangeStrideTest::countDownLoopWithNegScale @ bci:29 (line 216)
 1162  AddP  === _ 131 131 1163  [[ 1158 1159 1160 1161 1175 1178 1177 1176 795 960 975 982 968 682 787 167 ]]  !orig=[961],[788],[683],[358]
 1163  LShiftI  === _ 1164 30  [[ 1151 1156 1162 ]]  !orig=[962],[789],[684],[262]
 1164  SubI  === _ 28 1189  [[ 1163 ]]  !orig=[963],[790],[685],[259]
 1165  AddP  === _ 172 1151 1197  [[ 1130 ]]  !orig=782,677,203 !jvms: LoopRangeStrideTest::countDownLoopWithNegScale @ bci:39 (line 216)
 1166  AddP  === _ 172 1151 1198  [[ 1119 ]]  !orig=203 !jvms: LoopRangeStrideTest::countDownLoopWithNegScale @ bci:39 (line 216)
 1167  AddP  === _ 172 1151 1200  [[ 1122 ]]  !orig=677,203 !jvms: LoopRangeStrideTest::countDownLoopWithNegScale @ bci:39 (line 216)
 1168  AddP  === _ 172 1151 1199  [[ 1127 ]]  !orig=791,203 !jvms: LoopRangeStrideTest::countDownLoopWithNegScale @ bci:39 (line 216)
 1170  AddP  === _ 60 1156 1197  [[ 1128 ]]  !orig=784,679,221 !jvms: LoopRangeStrideTest::countDownLoopWithNegScale @ bci:41 (line 216)
 1171  AddP  === _ 60 1156 1198  [[ 1116 ]]  !orig=221 !jvms: LoopRangeStrideTest::countDownLoopWithNegScale @ bci:41 (line 216)
 1172  AddP  === _ 60 1156 1199  [[ 1124 ]]  !orig=793,221 !jvms: LoopRangeStrideTest::countDownLoopWithNegScale @ bci:41 (line 216)
 1173  AddP  === _ 60 1156 1200  [[ 1120 ]]  !orig=679,221 !jvms: LoopRangeStrideTest::countDownLoopWithNegScale @ bci:41 (line 216)
 1175  AddP  === _ 131 1162 1197  [[ 1131 ]]  !orig=787,682,167 !jvms: LoopRangeStrideTest::countDownLoopWithNegScale @ bci:29 (line 216)
 1176  AddP  === _ 131 1162 1198  [[ 1118 ]]  !orig=167 !jvms: LoopRangeStrideTest::countDownLoopWithNegScale @ bci:29 (line 216)
 1177  AddP  === _ 131 1162 1199  [[ 1126 ]]  !orig=795,167 !jvms: LoopRangeStrideTest::countDownLoopWithNegScale @ bci:29 (line 216)
 1178  AddP  === _ 131 1162 1200  [[ 1123 ]]  !orig=682,167 !jvms: LoopRangeStrideTest::countDownLoopWithNegScale @ bci:29 (line 216)
 1185  CountedLoop  === 1185 1330 249  [[ 1116 1120 1124 1128 1132 1136 1140 1144 1185 940 1188 1189 944 948 952 248 775 779 223 674 ]] inner stride: -16 main of N1185 !orig=[992],[802],[686],[255],[244],[118] !jvms: LoopRangeStrideTest::countDownLoopWithNegScale @ bci:14 (line 216)
 1188  Phi  === 1185 464 223  [[ 1144 1146 1157 ]]  #memory  Memory: @int[int:>=0] (java/lang/Cloneable,java/io/Serializable):exact+any *, idx=6; !orig=[995],[805],[688],124 !jvms: LoopRangeStrideTest::countDownLoopWithNegScale @ bci:14 (line 216)
 1189  Phi  === 1185 719 224  [[ 1164 224 1325 ]]  #int:30..270:www #tripcount !orig=[991],[806],[687],125 !jvms: LoopRangeStrideTest::countDownLoopWithNegScale @ bci:14 (line 216)
 1197  ConI  === 0  [[ 1165 1170 1175 ]]  #int:2200
 1198  ConI  === 0  [[ 1166 1171 1176 ]]  #int:2212
 1199  ConI  === 0  [[ 1168 1172 1177 ]]  #int:2204
 1200  ConI  === 0  [[ 1167 1173 1178 ]]  #int:2208
 1247  ConI  === 0  [[ 960 957 955 ]]  #int:2216
 1248  ConI  === 0  [[ 975 973 971 ]]  #int:2224
 1249  ConI  === 0  [[ 982 980 978 ]]  #int:2220
 1250  ConI  === 0  [[ 968 966 964 ]]  #int:2228
 1251  ConI  === 0  [[ 682 679 677 ]]  #int:2240
 1252  ConI  === 0  [[ 787 784 782 ]]  #int:2232
 1253  ConI  === 0  [[ 167 221 203 ]]  #int:2244
 1254  ConI  === 0  [[ 795 793 791 ]]  #int:2236
 1302  ConI  === 0  [[ 1309 1314 ]]  #int:273
 1304  ConI  === 0  [[ 1307 1311 ]]  #int:288
 1307  CmpU  === _ 317 1304  [[ 1328 ]]  !orig=[1107],[501],[351]
 1309  CmpU  === _ 317 1302  [[ 1352 ]]  !orig=[501],[351]
 1311  CmpU  === _ 150 1304  [[ 1340 ]]  !orig=[1086],[543],[307]
 1314  CmpU  === _ 150 1302  [[ 1348 ]]  !orig=[543],[307]
 1316  ConI  === 0  [[ 469 467 472 ]]  #int:1100
 1319  ConL  === 0  [[ 1320 1322 ]]  #long:273
 1320  CmpUL  === _ 294 1319  [[ 1344 ]]  !orig=[1075],[564],[295]
 1322  CmpUL  === _ 338 1319  [[ 1332 ]]  !orig=[1096],[522],[339]
 1325  CastII  === 251 1189  [[ 1327 ]]  #int:30..270:www unconditional dependency
 1327  AddI  === _ 1325 1072  [[ 727 584 445 ]]  !orig=[460],[720]
 1328  Bool  === _ 1307  [[ 1417 ]] [le]
 1330  IfFalse  === 1417  [[ 1185 ]] #0 !orig=[1110],[504],[355]
 1331  IfTrue  === 1417  [[ 1114 ]] #1 !orig=[1111],[505],[356]
 1332  Bool  === _ 1322  [[ 1333 1337 ]] [le] !orig=[1336]
 1333  If  === 1342 1332  [[ 1334 1335 ]] P=0.000001, C=-1.000000 !orig=[1101],[527],[342]
 1334  IfFalse  === 1333  [[ 1417 ]] #0 !orig=[1099],[525],[343],[355]
 1335  IfTrue  === 1333  [[ 1103 ]] #1 !orig=[1100],[526],[344]
 1337  If  === 1354 1332  [[ 1338 1339 ]] P=0.000001, C=-1.000000 !orig=[527],[342]
 1338  IfFalse  === 1337  [[ 1415 ]] #0 !orig=[525],[343],[355]
 1339  IfTrue  === 1337  [[ 529 ]] #1 !orig=[526],[344]
 1340  Bool  === _ 1311  [[ 1416 ]] [le]
 1342  IfFalse  === 1416  [[ 1333 ]] #0 !orig=[1089],[546],[311]
 1343  IfTrue  === 1416  [[ 1093 ]] #1 !orig=[1090],[547],[312]
 1344  Bool  === _ 1320  [[ 1345 ]] [le]
 1345  If  === 1350 1344  [[ 1346 1347 ]] P=0.000001, C=-1.000000 !orig=[569],[298]
 1346  IfFalse  === 1345  [[ 1416 ]] #0 !orig=[567],[299]
 1347  IfTrue  === 1345  [[ 571 ]] #1 !orig=[568],[300]
 1348  Bool  === _ 1314  [[ 1415 ]] [le]
 1350  IfFalse  === 1415  [[ 1345 ]] #0 !orig=[546],[311]
 1351  IfTrue  === 1415  [[ 550 ]] #1 !orig=[547],[312]
 1352  Bool  === _ 1309  [[ 1414 ]] [le]
 1354  IfFalse  === 1414  [[ 1337 ]] #0 !orig=[504],[355]
 1355  IfTrue  === 1414  [[ 508 ]] #1 !orig=[505],[356]
 1356  Region  === 1356 1401 1406  [[ 1356 1357 1358 1359 56 ]]  !orig=[48] !jvms: LoopRangeStrideTest::countDownLoopWithNegScale @ bci:3 (line 214)
 1357  Phi  === 1356 53 1408  [[ 59 56 ]]  #memory  Memory: @rawptr:BotPTR, idx=Raw;
 1358  Phi  === 1356 6 1381  [[ 242 78 ]]  #abIO
 1359  Phi  === 1356 1402 1366  [[ 60 ]]  #rawptr:BotPTR !orig=[55] !jvms: LoopRangeStrideTest::countDownLoopWithNegScale @ bci:3 (line 214)
 1360  ThreadLocal  === 0  [[ 1362 1364 ]] 
 1361  ConI  === 0  [[ 1362 ]]  #int:216
 1362  AddP  === _ 1 1360 1361  [[ 1366 1382 ]] 
 1363  ConI  === 0  [[ 1364 ]]  #int:224
 1364  AddP  === _ 1 1360 1363  [[ 1365 ]] 
 1365  LoadP  === 5 7 1364  [[ 1368 ]]  @rawptr:BotPTR, idx=Raw; #rawptr:BotPTR (does not depend only on test, raw access)
 1366  LoadP  === 5 7 1362  [[ 1367 1374 1377 1380 1383 1384 1384 1386 1386 1388 1388 1393 1393 1359 ]]  @rawptr:BotPTR, idx=Raw; #rawptr:BotPTR (does not depend only on test, raw access)
 1367  AddP  === _ 1 1366 37  [[ 1368 1374 1377 1380 1382 ]] 
 1368  CmpP  === _ 1367 1365  [[ 1403 ]] 
 1373  ConI  === 0  [[ 1374 ]]  #int:256
 1374  AddP  === _ 1366 1367 1373  [[ 1375 ]] 
 1375  PrefetchAllocation  === 1406 6 1374  [[ 1378 ]] 
 1376  ConI  === 0  [[ 1377 ]]  #int:320
 1377  AddP  === _ 1366 1367 1376  [[ 1378 ]] 
 1378  PrefetchAllocation  === _ 1375 1377  [[ 1381 ]] 
 1379  ConI  === 0  [[ 1380 ]]  #int:384
 1380  AddP  === _ 1366 1367 1379  [[ 1381 ]] 
 1381  PrefetchAllocation  === _ 1378 1380  [[ 1358 ]] 
 1382  StoreP  === 1406 7 1362 1367  [[ 1383 ]]  @rawptr:BotPTR, idx=Raw;  Memory: @rawptr:BotPTR, idx=Raw;
 1383  StoreI  === 1406 1382 1366 39  [[ 1385 ]]  @NULL  Memory: @rawptr:BotPTR, idx=Raw;
 1384  AddP  === _ 1366 1366 1002  [[ 1385 ]] 
 1385  StoreP  === 1406 1383 1384 23  [[ 1387 ]]  @NULL  Memory: @rawptr:BotPTR, idx=Raw;
 1386  AddP  === _ 1366 1366 148  [[ 1387 ]] 
 1387  StoreI  === 1406 1385 1386 22  [[ 1389 ]]  @NULL  Memory: @rawptr:BotPTR, idx=Raw;
 1388  AddP  === _ 1366 1366 1009  [[ 1389 ]] 
 1389  StoreI  === 1406 1387 1388 28  [[ 1408 ]]  @rawptr:BotPTR, idx=Raw;  Memory: @rawptr:BotPTR, idx=Raw;
 1393  AddP  === _ 1366 1366 129  [[ 1408 ]] 
 1395  MemBarStoreStore  === 1396 1 1397 1 1  [[ 1398 1399 ]] 
 1396  Proj  === 56  [[ 1395 ]] #0
 1397  Proj  === 56  [[ 1395 ]] #2  Memory: @rawptr:BotPTR, idx=Raw;
 1398  Proj  === 1395  [[ 60 268 ]] #0 !orig=[57] !jvms: LoopRangeStrideTest::countDownLoopWithNegScale @ bci:3 (line 214)
 1399  Proj  === 1395  [[ 75 75 75 75 466 471 16 16 16 464 ]] #2  Memory: @BotPTR *+bot, idx=Bot; !orig=[58],[116] !jvms: LoopRangeStrideTest::countDownLoopWithNegScale @ bci:3 (line 214)
 1400  CallStaticJava  === 1405 1 7 8 1 (1409 22 10 1 1 ) [[ 1402 54 53 44 ]] # Static _new_array_Java  rawptr:NotNull ( java/lang/Object:NotNull *, int ) C=0.000100 LoopRangeStrideTest::countDownLoopWithNegScale @ bci:3 (line 214) !orig=43 !jvms: LoopRangeStrideTest::countDownLoopWithNegScale @ bci:3 (line 214)
 1401  CatchProj  === 47  [[ 1356 ]] #0@bci -1  !orig=[48] !jvms: LoopRangeStrideTest::countDownLoopWithNegScale @ bci:3 (line 214)
 1402  Proj  === 1400  [[ 1359 ]] #5 !orig=[55] !jvms: LoopRangeStrideTest::countDownLoopWithNegScale @ bci:3 (line 214)
 1403  Bool  === _ 1368  [[ 1404 ]] [lt]
 1404  If  === 5 1403  [[ 1405 1406 ]] P=0.999900, C=-1.000000 !orig=[1370]
 1405  IfFalse  === 1404  [[ 1400 ]] #0 !orig=[1371]
 1406  IfTrue  === 1404  [[ 1356 1408 1389 1387 1385 1383 1382 1375 ]] #1 !orig=[1372]
 1408  ClearArray  === 1406 1389 63 1393  [[ 1357 ]]   Memory: @rawptr:BotPTR, idx=Raw; !orig=[1394]
 1409  ConP  === 0  [[ 1400 ]]  #precise [int (java/lang/Cloneable,java/io/Serializable): :Constant:exact *
 1410  If  === 269 368  [[ 371 370 ]] P=0.000001, C=-1.000000
 1411  If  === 370 379  [[ 382 381 ]] P=0.000001, C=-1.000000
 1412  If  === 314 425  [[ 428 427 ]] P=0.000001, C=-1.000000
 1413  If  === 427 418  [[ 421 420 ]] P=0.000001, C=-1.000000
 1414  If  === 420 1352  [[ 1355 1354 ]] P=0.000001, C=-1.000000
 1415  If  === 1338 1348  [[ 1351 1350 ]] P=0.000001, C=-1.000000
 1416  If  === 1346 1340  [[ 1343 1342 ]] P=0.000001, C=-1.000000
 1417  If  === 1334 1328  [[ 1331 1330 ]] P=0.000001, C=-1.000000
 1418  If  === 589 598  [[ 601 600 ]] P=0.999999, C=-1.000000
 1419  If  === 610 619  [[ 622 621 ]] P=0.999999, C=-1.000000

2) Compilation of ""public int[] compiler.vectorization.runner.LoopRangeStrideTest.countupLoopWithNegScale()"":
> Phase ""PrintIdeal"":
AFTER: print_ideal
    0  Root  === 0 82 628 616 243 242 509 1110 531 1099 552 1089 573 606 595  [[ 0 1 3 22 23 228 1327 28 170 30 815 813 148 37 39 808 63 77 90 103 129 133 256 769 726 396 386 376 817 863 867 935 998 1000 1002 1004 1006 1008 1014 1111 1192 1194 1195 1196 1197 1201 1242 1244 1245 1246 1247 1248 1249 1250 1251 1288 1289 1290 1292 1293 1299 1302 1307 1309 1311 1320 1323 1361 1362 1364 1376 1379 1388 1391 1411 ]] 
    1  Con  === 0  [[ ]]  #top
    3  Start  === 3 0  [[ 3 5 6 7 8 9 10 ]]  #{0:control, 1:abIO, 2:memory, 3:rawptr:BotPTR, 4:return_address, 5:compiler/vectorization/runner/LoopRangeStrideTest:NotNull *}
    5  Parm  === 3  [[ 1406 1366 1367 ]] Control !jvms: LoopRangeStrideTest::countupLoopWithNegScale @ bci:-1 (line 203)
    6  Parm  === 3  [[ 1375 1359 ]] I_O !jvms: LoopRangeStrideTest::countupLoopWithNegScale @ bci:-1 (line 203)
    7  Parm  === 3  [[ 316 150 172 131 16 1402 50 59 75 1366 1367 1382 ]] Memory  Memory: @BotPTR *+bot, idx=Bot; !orig=[112],[120] !jvms: LoopRangeStrideTest::countupLoopWithNegScale @ bci:-1 (line 203)
    8  Parm  === 3  [[ 243 242 616 595 1402 78 628 606 82 509 531 552 573 1099 1110 1089 ]] FramePtr !orig=[508] !jvms: LoopRangeStrideTest::countupLoopWithNegScale @ bci:-1 (line 203)
    9  Parm  === 3  [[ 243 242 78 ]] ReturnAdr !jvms: LoopRangeStrideTest::countupLoopWithNegScale @ bci:-1 (line 203)
   10  Parm  === 3  [[ 130 130 78 1402 171 171 ]] Parm0: compiler/vectorization/runner/LoopRangeStrideTest:NotNull *  Oop:compiler/vectorization/runner/LoopRangeStrideTest:NotNull * !jvms: LoopRangeStrideTest::countupLoopWithNegScale @ bci:-1 (line 203)
   16  MergeMem  === _ 1 7 1401 1401 1401 431  [[ 242 ]]  { N1401:rawptr:BotPTR N1401:java/lang/Object * N1401:java/lang/Object+4 * N431:int[int:>=0] (java/lang/Cloneable,java/io/Serializable):exact+any * }  Memory: @BotPTR *+bot, idx=Bot;
   22  ConI  === 0  [[ 430 78 1402 1387 ]]  #int:543
   23  ConP  === 0  [[ 1385 ]]  #precise [int (java/lang/Cloneable,java/io/Serializable): :Constant:exact *
   28  ConI  === 0  [[ 1390 442 1160 ]]  #int:0
   30  ConI  === 0  [[ 1159 441 ]]  #int:2
   37  ConI  === 0  [[ 1368 1154 1143 1148 434 436 439 ]]  #int:2184
   39  ConI  === 0  [[ 1383 443 366 423 ]]  #int:1
   44  Proj  === 1402  [[ 47 ]] #0 !jvms: LoopRangeStrideTest::countupLoopWithNegScale @ bci:3 (line 203)
   47  Catch  === 44 54  [[ 1403 49 ]]  !jvms: LoopRangeStrideTest::countupLoopWithNegScale @ bci:3 (line 203)
   49  CatchProj  === 47  [[ 243 52 ]] #1@bci -1  !jvms: LoopRangeStrideTest::countupLoopWithNegScale @ bci:3 (line 203)
   50  MergeMem  === _ 1 7 53  [[ 243 ]]  { N53:rawptr:BotPTR }  Memory: @BotPTR *+bot, idx=Bot; !jvms: LoopRangeStrideTest::countupLoopWithNegScale @ bci:3 (line 203)
   52  CreateEx  === 49 54  [[ 243 ]]  #java/lang/Throwable (java/io/Serializable):NotNull *  Oop:java/lang/Throwable (java/io/Serializable):NotNull * !jvms: LoopRangeStrideTest::countupLoopWithNegScale @ bci:3 (line 203)
   53  Proj  === 1402  [[ 50 1358 ]] #2  Memory: @BotPTR *+bot, idx=Bot; !jvms: LoopRangeStrideTest::countupLoopWithNegScale @ bci:3 (line 203)
   54  Proj  === 1402  [[ 47 52 243 ]] #1 !orig=[111] !jvms: LoopRangeStrideTest::countupLoopWithNegScale @ bci:3 (line 203)
   56  Initialize  === 1357 1 59 1 1 1 1358  [[ 1399 1398 ]]  !jvms: LoopRangeStrideTest::countupLoopWithNegScale @ bci:3 (line 203)
   59  MergeMem  === _ 1 1358 1 1 1 7  [[ 56 ]]  { - - - N7:int[int:>=0] (java/lang/Cloneable,java/io/Serializable):exact+any * }  Memory: @BotPTR *+bot, idx=Bot; !jvms: LoopRangeStrideTest::countupLoopWithNegScale @ bci:3 (line 203)
   60  CheckCastPP  === 1400 1360  [[ 242 953 78 1152 1151 1166 1149 221 436 437 437 468 1150 468 681 966 971 779 1168 1167 788 1152 976 1169 1148 ]]  #int[int:543] (java/lang/Cloneable,java/io/Serializable):NotNull:exact * !jvms: LoopRangeStrideTest::countupLoopWithNegScale @ bci:3 (line 203)
   63  ConI  === 0  [[ 1300 78 78 1312 1410 ]]  #int:271
   75  MergeMem  === _ 1 7 1401 1401 1401 1401  [[ 78 ]]  { N1401:rawptr:BotPTR N1401:java/lang/Object * N1401:java/lang/Object+4 * N1401:int[int:>=0] (java/lang/Cloneable,java/io/Serializable):exact+any * }  Memory: @BotPTR *+bot, idx=Bot; !jvms: LoopRangeStrideTest::countupLoopWithNegScale @ bci:14 (line 204)
   77  ConI  === 0  [[ 78 ]]  #int:-138
   78  CallStaticJava  === 265 1359 75 8 9 (77 10 60 63 63 22 ) [[ 79 ]] # Static uncommon_trap(reason='predicate' action='maybe_recompile')  void ( int ) C=0.000100 LoopRangeStrideTest::countupLoopWithNegScale @ bci:14 (line 204) reexecute !jvms: LoopRangeStrideTest::countupLoopWithNegScale @ bci:14 (line 204)
   79  Proj  === 78  [[ 82 ]] #0 !jvms: LoopRangeStrideTest::countupLoopWithNegScale @ bci:14 (line 204)
   82  Halt  === 79 1 1 8 1  [[ 0 ]]  !jvms: LoopRangeStrideTest::countupLoopWithNegScale @ bci:14 (line 204)
  129  ConI  === 0  [[ 130 224 1326 1395 ]]  #int:16
  130  AddP  === _ 10 10 129  [[ 131 ]]   Oop:compiler/vectorization/runner/LoopRangeStrideTest:NotNull+16 * !jvms: LoopRangeStrideTest::countupLoopWithNegScale @ bci:24 (line 205)
  131  LoadP  === _ 7 130  [[ 167 134 1157 1156 1155 1154 1174 978 1158 1158 1172 1173 782 968 1171 684 471 471 790 440 440 439 973 956 149 149 ]]  @compiler/vectorization/runner/LoopRangeStrideTest+16 *, name=a, idx=7; #int[int:>=0] (java/lang/Cloneable,java/io/Serializable):exact * !jvms: LoopRangeStrideTest::countupLoopWithNegScale @ bci:24 (line 205)
  133  ConP  === 0  [[ 134 174 ]]  #NULL
  134  CmpP  === _ 131 133  [[ 135 ]]  !jvms: LoopRangeStrideTest::countupLoopWithNegScale @ bci:32 (line 205)
  135  Bool  === _ 134  [[ 267 ]] [ne] !jvms: LoopRangeStrideTest::countupLoopWithNegScale @ bci:32 (line 205)
  148  ConI  === 0  [[ 149 315 1386 ]]  #int:8
  149  AddP  === _ 131 131 148  [[ 150 ]]  !orig=[270],... !jvms: LoopRangeStrideTest::countupLoopWithNegScale @ bci:32 (line 205)
  150  LoadRange  === 268 7 149  [[ 366 599 293 377 1312 1305 ]]  @bottom[int:>=0] (java/lang/Cloneable,java/io/Serializable)+8 *, idx=8; #int:>=0 !orig=[271],... !jvms: LoopRangeStrideTest::countupLoopWithNegScale @ bci:32 (line 205)
  167  AddP  === _ 131 1158 1250  [[ 169 ]]  !jvms: LoopRangeStrideTest::countupLoopWithNegScale @ bci:32 (line 205)
  169  LoadI  === 418 676 167  |268  [[ 206 ]]  @int[int:>=0] (java/lang/Cloneable,java/io/Serializable):exact+any *, idx=6; #int !jvms: LoopRangeStrideTest::countupLoopWithNegScale @ bci:32 (line 205)
  170  ConI  === 0  [[ 171 ]]  #int:20
  171  AddP  === _ 10 10 170  [[ 172 ]]   Oop:compiler/vectorization/runner/LoopRangeStrideTest:NotNull+20 * !jvms: LoopRangeStrideTest::countupLoopWithNegScale @ bci:34 (line 205)
  172  LoadP  === _ 7 171  [[ 315 174 1146 1145 1144 1143 1164 960 962 786 1162 1163 777 964 1147 1147 466 466 679 435 435 434 1161 203 951 315 ]]  @compiler/vectorization/runner/LoopRangeStrideTest+20 *, name=b, idx=9; #int[int:>=0] (java/lang/Cloneable,java/io/Serializable):exact * !jvms: LoopRangeStrideTest::countupLoopWithNegScale @ bci:34 (line 205)
  174  CmpP  === _ 172 133  [[ 175 ]]  !jvms: LoopRangeStrideTest::countupLoopWithNegScale @ bci:42 (line 205)
  175  Bool  === _ 174  [[ 312 ]] [ne] !jvms: LoopRangeStrideTest::countupLoopWithNegScale @ bci:42 (line 205)
  203  AddP  === _ 172 1147 1250  [[ 205 ]]  !jvms: LoopRangeStrideTest::countupLoopWithNegScale @ bci:42 (line 205)
  205  LoadI  === 418 676 203  |313  [[ 206 ]]  @int[int:>=0] (java/lang/Cloneable,java/io/Serializable):exact+any *, idx=6; #int !jvms: LoopRangeStrideTest::countupLoopWithNegScale @ bci:42 (line 205)
  206  MulI  === _ 169 205  [[ 223 ]]  !jvms: LoopRangeStrideTest::countupLoopWithNegScale @ bci:43 (line 205)
  221  AddP  === _ 60 1152 1250  [[ 223 ]]  !jvms: LoopRangeStrideTest::countupLoopWithNegScale @ bci:44 (line 205)
  223  StoreI  === 1181 676 221 206  [[ 1184 446 ]]  @int[int:>=0] (java/lang/Cloneable,java/io/Serializable):exact+any *, idx=6;  Memory: @int[int:543] (java/lang/Cloneable,java/io/Serializable):NotNull:exact+any *, idx=6; !orig=696 !jvms: LoopRangeStrideTest::countupLoopWithNegScale @ bci:44 (line 205)
  224  AddI  === _ 1185 129  [[ 1185 246 ]]  !orig=[245],... !jvms: LoopRangeStrideTest::countupLoopWithNegScale @ bci:45 (line 204)
  234  IfTrue  === 248  [[ 1181 ]] #1 !jvms: LoopRangeStrideTest::countupLoopWithNegScale @ bci:14 (line 204)
  242  Return  === 449 1359 16 8 9 returns 60  [[ 0 ]] 
  243  Rethrow  === 49 54 50 8 9 exception 52  [[ 0 ]] 
  246  CmpI  === _ 224 1111  [[ 247 ]]  !orig=[231] !jvms: LoopRangeStrideTest::countupLoopWithNegScale @ bci:14 (line 204)
  247  Bool  === _ 246  [[ 248 ]] [lt] !orig=[232] !jvms: LoopRangeStrideTest::countupLoopWithNegScale @ bci:14 (line 204)
  248  CountedLoopEnd  === 1181 247  [[ 249 234 ]] [lt] P=0.996347, C=68466.000000 !orig=[233] !jvms: LoopRangeStrideTest::countupLoopWithNegScale @ bci:14 (line 204)
  249  IfFalse  === 248  [[ 438 593 1324 433 ]] #0 !orig=[235] !jvms: LoopRangeStrideTest::countupLoopWithNegScale @ bci:14 (line 204)
  265  Region  === 265 314 269 371 382 419 428  [[ 265 78 ]]  !orig=[74] !jvms: LoopRangeStrideTest::countupLoopWithNegScale @ bci:14 (line 204)
  267  If  === 1400 135  [[ 268 269 ]] P=0.999999, C=-1.000000
  268  IfTrue  === 267  [[ 1412 1138 169 150 955 943 438 470 683 1127 938 781 1119 1114 772 946 1122 1153 1135 1130 ]] #1
  269  IfFalse  === 267  [[ 265 ]] #0
  293  ConvI2L  === _ 150  [[ 588 1316 ]]  #long:0..maxint
  312  If  === 381 175  [[ 313 314 ]] P=0.999999, C=-1.000000
  313  IfTrue  === 312  [[ 1414 1139 316 950 205 1115 433 465 678 947 776 1126 1118 773 942 939 1123 1142 1131 1134 ]] #1
  314  IfFalse  === 312  [[ 265 ]] #0
  315  AddP  === _ 172 172 148  [[ 316 ]]  !orig=[187] !jvms: LoopRangeStrideTest::countupLoopWithNegScale @ bci:42 (line 205)
  316  LoadRange  === 313 7 315  [[ 423 408 337 621 1300 1303 ]]  @bottom[int:>=0] (java/lang/Cloneable,java/io/Serializable)+8 *, idx=8; #int:>=0 !orig=[188] !jvms: LoopRangeStrideTest::countupLoopWithNegScale @ bci:42 (line 205)
  337  ConvI2L  === _ 316  [[ 609 1314 ]]  #long:0..maxint
  366  CmpU  === _ 150 39  [[ 368 ]]  !orig=[275]
  368  Bool  === _ 366  [[ 1412 ]] [le]
  370  IfFalse  === 1412  [[ 1413 ]] #0 !orig=[278]
  371  IfTrue  === 1412  [[ 265 ]] #1 !orig=[279]
  376  ConI  === 0  [[ 377 408 1185 ]]  #int:272
  377  CmpU  === _ 150 376  [[ 379 ]]  !orig=[282]
  379  Bool  === _ 377  [[ 1413 ]] [le]
  381  IfFalse  === 1413  [[ 312 470 ]] #0 !orig=[285]
  382  IfTrue  === 1413  [[ 265 ]] #1 !orig=[286]
  386  ConL  === 0  [[ 587 ]]  #long:543
  408  CmpU  === _ 316 376  [[ 416 ]]  !orig=[327]
  416  Bool  === _ 408  [[ 1415 ]] [le]
  418  IfFalse  === 1415  [[ 463 465 169 1142 1139 1138 1135 1134 1131 1130 1127 1126 1123 1122 1119 1118 1115 1114 955 950 947 946 943 942 939 938 781 776 773 772 683 678 205 1416 1153 ]] #0 !orig=[330] !jvms: LoopRangeStrideTest::countupLoopWithNegScale @ bci:14 (line 204)
  419  IfTrue  === 1415  [[ 265 ]] #1 !orig=[331]
  423  CmpU  === _ 316 39  [[ 425 ]]  !orig=[320]
  425  Bool  === _ 423  [[ 1414 ]] [le]
  427  IfFalse  === 1414  [[ 1415 ]] #0 !orig=[323]
  428  IfTrue  === 1414  [[ 265 ]] #1 !orig=[324]
  429  Bool  === _ 430  [[ 447 ]] [lt] !orig=247,[232] !jvms: LoopRangeStrideTest::countupLoopWithNegScale @ bci:14 (line 204)
  430  CmpI  === _ 443 22  [[ 429 ]]  !orig=246,[231] !jvms: LoopRangeStrideTest::countupLoopWithNegScale @ bci:14 (line 204)
  431  StoreI  === 444 446 436 432  [[ 446 16 ]]  @int[int:>=0] (java/lang/Cloneable,java/io/Serializable):exact+any *, idx=6;  Memory: @int[int:543] (java/lang/Cloneable,java/io/Serializable):NotNull:exact+any *, idx=6; !orig=223,696 !jvms: LoopRangeStrideTest::countupLoopWithNegScale @ bci:44 (line 205)
  432  MulI  === _ 433 438  [[ 431 ]]  !orig=206 !jvms: LoopRangeStrideTest::countupLoopWithNegScale @ bci:43 (line 205)
  433  LoadI  === 249 446 434  |313  [[ 432 ]]  @int[int:>=0] (java/lang/Cloneable,java/io/Serializable):exact+any *, idx=6; #int !orig=205 !jvms: LoopRangeStrideTest::countupLoopWithNegScale @ bci:42 (line 205)
  434  AddP  === _ 172 435 37  [[ 433 ]]  !orig=203 !jvms: LoopRangeStrideTest::countupLoopWithNegScale @ bci:42 (line 205)
  435  AddP  === _ 172 172 441  [[ 434 ]]  !orig=[358]
  436  AddP  === _ 60 437 37  [[ 431 ]]  !orig=221 !jvms: LoopRangeStrideTest::countupLoopWithNegScale @ bci:44 (line 205)
  437  AddP  === _ 60 60 441  [[ 436 ]]  !orig=[359]
  438  LoadI  === 249 446 439  |268  [[ 432 ]]  @int[int:>=0] (java/lang/Cloneable,java/io/Serializable):exact+any *, idx=6; #int !orig=169 !jvms: LoopRangeStrideTest::countupLoopWithNegScale @ bci:32 (line 205)
  439  AddP  === _ 131 440 37  [[ 438 ]]  !orig=167 !jvms: LoopRangeStrideTest::countupLoopWithNegScale @ bci:32 (line 205)
  440  AddP  === _ 131 131 441  [[ 439 ]]  !orig=[357]
  441  LShiftI  === _ 442 30  [[ 435 437 440 ]]  !orig=[261]
  442  SubI  === _ 28 445  [[ 441 ]]  !orig=[258]
  443  AddI  === _ 445 39  [[ 430 445 ]]  !orig=224,... !jvms: LoopRangeStrideTest::countupLoopWithNegScale @ bci:45 (line 204)
  444  CountedLoop  === 444 624 448  [[ 431 444 445 446 447 ]] inner stride: 1 post of N253 !orig=[253],[244],[118] !jvms: LoopRangeStrideTest::countupLoopWithNegScale @ bci:17 (line 205)
  445  Phi  === 444 1326 443  [[ 442 443 ]]  #int:288..542:www #tripcount !orig=125 !jvms: LoopRangeStrideTest::countupLoopWithNegScale @ bci:17 (line 205)
  446  Phi  === 444 223 431  [[ 431 433 438 ]]  #memory  Memory: @int[int:>=0] (java/lang/Cloneable,java/io/Serializable):exact+any *, idx=6; !orig=124 !jvms: LoopRangeStrideTest::countupLoopWithNegScale @ bci:17 (line 205)
  447  CountedLoopEnd  === 444 429  [[ 448 449 ]] [lt] P=0.500000, C=68466.000000 !orig=248,[233] !jvms: LoopRangeStrideTest::countupLoopWithNegScale @ bci:14 (line 204)
  448  IfTrue  === 447  [[ 444 ]] #1 !orig=234 !jvms: LoopRangeStrideTest::countupLoopWithNegScale @ bci:14 (line 204)
  449  IfFalse  === 447  [[ 242 ]] #0 !orig=249,[235] !jvms: LoopRangeStrideTest::countupLoopWithNegScale @ bci:14 (line 204)
  463  StoreI  === 418 1401 468 464  [[ 1184 ]]  @int[int:>=0] (java/lang/Cloneable,java/io/Serializable):exact+any *, idx=6;  Memory: @int[int:543] (java/lang/Cloneable,java/io/Serializable):NotNull:exact[272] *, idx=6; !orig=223,696 !jvms: LoopRangeStrideTest::countupLoopWithNegScale @ bci:44 (line 205)
  464  MulI  === _ 465 470  [[ 463 ]]  !orig=206 !jvms: LoopRangeStrideTest::countupLoopWithNegScale @ bci:43 (line 205)
  465  LoadI  === 418 1401 466  |313  [[ 464 ]]  @int[int:>=0] (java/lang/Cloneable,java/io/Serializable):exact+any *, idx=6; #int !orig=205 !jvms: LoopRangeStrideTest::countupLoopWithNegScale @ bci:42 (line 205)
  466  AddP  === _ 172 172 1320  [[ 465 ]]  !orig=203 !jvms: LoopRangeStrideTest::countupLoopWithNegScale @ bci:42 (line 205)
  468  AddP  === _ 60 60 1320  [[ 463 ]]  !orig=221 !jvms: LoopRangeStrideTest::countupLoopWithNegScale @ bci:44 (line 205)
  470  LoadI  === 381 1401 471  |268  [[ 464 ]]  @int[int:>=0] (java/lang/Cloneable,java/io/Serializable):exact+any *, idx=6; #int !orig=169 !jvms: LoopRangeStrideTest::countupLoopWithNegScale @ bci:32 (line 205)
  471  AddP  === _ 131 131 1320  [[ 470 ]]  !orig=167 !jvms: LoopRangeStrideTest::countupLoopWithNegScale @ bci:32 (line 205)
  509  Halt  === 1356 1 1 8 1  [[ 0 ]] 
  531  Halt  === 1340 1 1 8 1  [[ 0 ]] 
  552  Halt  === 1352 1 1 8 1  [[ 0 ]] 
  573  Halt  === 1348 1 1 8 1  [[ 0 ]] 
  586  ConvI2L  === _ 1326  [[ 587 ]]  #long:288..528:www !orig=[564],[288],[383]
  587  SubL  === _ 386 586  [[ 588 609 ]]  !orig=[565],[387],[292]
  588  CmpUL  === _ 587 293  [[ 589 ]]  !orig=[566],[294]
  589  Bool  === _ 588  [[ 593 ]] [lt] !orig=[567],[295]
  591  IfTrue  === 593  [[ 1420 ]] #1 !orig=[569],[298]
  592  IfFalse  === 593  [[ 595 ]] #0 !orig=[570],[299]
  593  If  === 249 589  [[ 591 592 ]] P=0.999999, C=-1.000000 !orig=[571],[297]
  595  Halt  === 592 1 1 8 1  [[ 0 ]] 
  599  CmpU  === _ 1328 150  [[ 600 ]]  !orig=[545],[306]
  600  Bool  === _ 599  [[ 1420 ]] [lt] !orig=[546],[307]
  602  IfTrue  === 1420  [[ 614 ]] #1 !orig=[548],[310]
  603  IfFalse  === 1420  [[ 606 ]] #0 !orig=[549],[311]
  606  Halt  === 603 1 1 8 1  [[ 0 ]] 
  609  CmpUL  === _ 587 337  [[ 610 ]]  !orig=[524],[338]
  610  Bool  === _ 609  [[ 614 ]] [lt] !orig=[525],[339]
  612  IfTrue  === 614  [[ 1421 ]] #1 !orig=[527],[342],[354]
  613  IfFalse  === 614  [[ 616 ]] #0 !orig=[528],[343]
  614  If  === 602 610  [[ 612 613 ]] P=0.999999, C=-1.000000 !orig=[529],[341]
  616  Halt  === 613 1 1 8 1  [[ 0 ]] 
  621  CmpU  === _ 1328 316  [[ 622 ]]  !orig=[502],[350]
  622  Bool  === _ 621  [[ 1421 ]] [lt] !orig=[503],[351]
  624  IfTrue  === 1421  [[ 444 ]] #1 !orig=[505],[354]
  625  IfFalse  === 1421  [[ 628 ]] #0 !orig=[506],[355]
  628  Halt  === 625 1 1 8 1  [[ 0 ]] 
  676  StoreI  === 1181 770 681 677  [[ 169 223 205 ]]  @int[int:>=0] (java/lang/Cloneable,java/io/Serializable):exact+any *, idx=6;  Memory: @int[int:543] (java/lang/Cloneable,java/io/Serializable):NotNull:exact+any *, idx=6; !orig=223,696 !jvms: LoopRangeStrideTest::countupLoopWithNegScale @ bci:44 (line 205)
  677  MulI  === _ 678 683  [[ 676 ]]  !orig=206 !jvms: LoopRangeStrideTest::countupLoopWithNegScale @ bci:43 (line 205)
  678  LoadI  === 418 770 679  |313  [[ 677 ]]  @int[int:>=0] (java/lang/Cloneable,java/io/Serializable):exact+any *, idx=6; #int !orig=205 !jvms: LoopRangeStrideTest::countupLoopWithNegScale @ bci:42 (line 205)
  679  AddP  === _ 172 1147 1251  [[ 678 ]]  !orig=203 !jvms: LoopRangeStrideTest::countupLoopWithNegScale @ bci:42 (line 205)
  681  AddP  === _ 60 1152 1251  [[ 676 ]]  !orig=221 !jvms: LoopRangeStrideTest::countupLoopWithNegScale @ bci:44 (line 205)
  683  LoadI  === 418 770 684  |268  [[ 677 ]]  @int[int:>=0] (java/lang/Cloneable,java/io/Serializable):exact+any *, idx=6; #int !orig=169 !jvms: LoopRangeStrideTest::countupLoopWithNegScale @ bci:32 (line 205)
  684  AddP  === _ 131 1158 1251  [[ 683 ]]  !orig=167 !jvms: LoopRangeStrideTest::countupLoopWithNegScale @ bci:32 (line 205)
  726  ConI  === 0  [[ 1384 ]]  #int:4
  770  StoreI  === 1181 774 788 771  [[ 676 678 683 ]]  @int[int:>=0] (java/lang/Cloneable,java/io/Serializable):exact+any *, idx=6;  Memory: @int[int:543] (java/lang/Cloneable,java/io/Serializable):NotNull:exact+any *, idx=6; !orig=223,696 !jvms: LoopRangeStrideTest::countupLoopWithNegScale @ bci:44 (line 205)
  771  MulI  === _ 772 773  [[ 770 ]]  !orig=206 !jvms: LoopRangeStrideTest::countupLoopWithNegScale @ bci:43 (line 205)
  772  LoadI  === 418 774 790  |268  [[ 771 ]]  @int[int:>=0] (java/lang/Cloneable,java/io/Serializable):exact+any *, idx=6; #int !orig=169 !jvms: LoopRangeStrideTest::countupLoopWithNegScale @ bci:32 (line 205)
  773  LoadI  === 418 774 786  |313  [[ 771 ]]  @int[int:>=0] (java/lang/Cloneable,java/io/Serializable):exact+any *, idx=6; #int !orig=205 !jvms: LoopRangeStrideTest::countupLoopWithNegScale @ bci:42 (line 205)
  774  StoreI  === 1181 936 779 775  [[ 770 772 773 ]]  @int[int:>=0] (java/lang/Cloneable,java/io/Serializable):exact+any *, idx=6;  Memory: @int[int:543] (java/lang/Cloneable,java/io/Serializable):NotNull:exact+any *, idx=6; !orig=676,223,696 !jvms: LoopRangeStrideTest::countupLoopWithNegScale @ bci:44 (line 205)
  775  MulI  === _ 776 781  [[ 774 ]]  !orig=677,206 !jvms: LoopRangeStrideTest::countupLoopWithNegScale @ bci:43 (line 205)
  776  LoadI  === 418 936 777  |313  [[ 775 ]]  @int[int:>=0] (java/lang/Cloneable,java/io/Serializable):exact+any *, idx=6; #int !orig=678,205 !jvms: LoopRangeStrideTest::countupLoopWithNegScale @ bci:42 (line 205)
  777  AddP  === _ 172 1147 1249  [[ 776 ]]  !orig=679,203 !jvms: LoopRangeStrideTest::countupLoopWithNegScale @ bci:42 (line 205)
  779  AddP  === _ 60 1152 1249  [[ 774 ]]  !orig=681,221 !jvms: LoopRangeStrideTest::countupLoopWithNegScale @ bci:44 (line 205)
  781  LoadI  === 418 936 782  |268  [[ 775 ]]  @int[int:>=0] (java/lang/Cloneable,java/io/Serializable):exact+any *, idx=6; #int !orig=683,169 !jvms: LoopRangeStrideTest::countupLoopWithNegScale @ bci:32 (line 205)
  782  AddP  === _ 131 1158 1249  [[ 781 ]]  !orig=684,167 !jvms: LoopRangeStrideTest::countupLoopWithNegScale @ bci:32 (line 205)
  786  AddP  === _ 172 1147 1248  [[ 773 ]]  !orig=203 !jvms: LoopRangeStrideTest::countupLoopWithNegScale @ bci:42 (line 205)
  788  AddP  === _ 60 1152 1248  [[ 770 ]]  !orig=221 !jvms: LoopRangeStrideTest::countupLoopWithNegScale @ bci:44 (line 205)
  790  AddP  === _ 131 1158 1248  [[ 772 ]]  !orig=167 !jvms: LoopRangeStrideTest::countupLoopWithNegScale @ bci:32 (line 205)
  936  StoreI  === 1181 940 966 937  [[ 774 776 781 ]]  @int[int:>=0] (java/lang/Cloneable,java/io/Serializable):exact+any *, idx=6;  Memory: @int[int:543] (java/lang/Cloneable,java/io/Serializable):NotNull:exact+any *, idx=6; !orig=223,696 !jvms: LoopRangeStrideTest::countupLoopWithNegScale @ bci:44 (line 205)
  937  MulI  === _ 938 939  [[ 936 ]]  !orig=206 !jvms: LoopRangeStrideTest::countupLoopWithNegScale @ bci:43 (line 205)
  938  LoadI  === 418 940 968  |268  [[ 937 ]]  @int[int:>=0] (java/lang/Cloneable,java/io/Serializable):exact+any *, idx=6; #int !orig=169 !jvms: LoopRangeStrideTest::countupLoopWithNegScale @ bci:32 (line 205)
  939  LoadI  === 418 940 960  |313  [[ 937 ]]  @int[int:>=0] (java/lang/Cloneable,java/io/Serializable):exact+any *, idx=6; #int !orig=205 !jvms: LoopRangeStrideTest::countupLoopWithNegScale @ bci:42 (line 205)
  940  StoreI  === 1181 944 971 941  [[ 936 938 939 ]]  @int[int:>=0] (java/lang/Cloneable,java/io/Serializable):exact+any *, idx=6;  Memory: @int[int:543] (java/lang/Cloneable,java/io/Serializable):NotNull:exact+any *, idx=6; !orig=676,223,696 !jvms: LoopRangeStrideTest::countupLoopWithNegScale @ bci:44 (line 205)
  941  MulI  === _ 942 943  [[ 940 ]]  !orig=677,206 !jvms: LoopRangeStrideTest::countupLoopWithNegScale @ bci:43 (line 205)
  942  LoadI  === 418 944 962  |313  [[ 941 ]]  @int[int:>=0] (java/lang/Cloneable,java/io/Serializable):exact+any *, idx=6; #int !orig=678,205 !jvms: LoopRangeStrideTest::countupLoopWithNegScale @ bci:42 (line 205)
  943  LoadI  === 418 944 973  |268  [[ 941 ]]  @int[int:>=0] (java/lang/Cloneable,java/io/Serializable):exact+any *, idx=6; #int !orig=683,169 !jvms: LoopRangeStrideTest::countupLoopWithNegScale @ bci:32 (line 205)
  944  StoreI  === 1181 948 976 945  [[ 940 942 943 ]]  @int[int:>=0] (java/lang/Cloneable,java/io/Serializable):exact+any *, idx=6;  Memory: @int[int:543] (java/lang/Cloneable,java/io/Serializable):NotNull:exact+any *, idx=6; !orig=770,223,696 !jvms: LoopRangeStrideTest::countupLoopWithNegScale @ bci:44 (line 205)
  945  MulI  === _ 946 947  [[ 944 ]]  !orig=771,206 !jvms: LoopRangeStrideTest::countupLoopWithNegScale @ bci:43 (line 205)
  946  LoadI  === 418 948 978  |268  [[ 945 ]]  @int[int:>=0] (java/lang/Cloneable,java/io/Serializable):exact+any *, idx=6; #int !orig=772,169 !jvms: LoopRangeStrideTest::countupLoopWithNegScale @ bci:32 (line 205)
  947  LoadI  === 418 948 964  |313  [[ 945 ]]  @int[int:>=0] (java/lang/Cloneable,java/io/Serializable):exact+any *, idx=6; #int !orig=773,205 !jvms: LoopRangeStrideTest::countupLoopWithNegScale @ bci:42 (line 205)
  948  StoreI  === 1181 1112 953 949  [[ 944 946 947 ]]  @int[int:>=0] (java/lang/Cloneable,java/io/Serializable):exact+any *, idx=6;  Memory: @int[int:543] (java/lang/Cloneable,java/io/Serializable):NotNull:exact+any *, idx=6; !orig=774,676,223,696 !jvms: LoopRangeStrideTest::countupLoopWithNegScale @ bci:44 (line 205)
  949  MulI  === _ 950 955  [[ 948 ]]  !orig=775,677,206 !jvms: LoopRangeStrideTest::countupLoopWithNegScale @ bci:43 (line 205)
  950  LoadI  === 418 1112 951  |313  [[ 949 ]]  @int[int:>=0] (java/lang/Cloneable,java/io/Serializable):exact+any *, idx=6; #int !orig=776,678,205 !jvms: LoopRangeStrideTest::countupLoopWithNegScale @ bci:42 (line 205)
  951  AddP  === _ 172 1147 1244  [[ 950 ]]  !orig=777,679,203 !jvms: LoopRangeStrideTest::countupLoopWithNegScale @ bci:42 (line 205)
  953  AddP  === _ 60 1152 1244  [[ 948 ]]  !orig=779,681,221 !jvms: LoopRangeStrideTest::countupLoopWithNegScale @ bci:44 (line 205)
  955  LoadI  === 418 1112 956  |268  [[ 949 ]]  @int[int:>=0] (java/lang/Cloneable,java/io/Serializable):exact+any *, idx=6; #int !orig=781,683,169 !jvms: LoopRangeStrideTest::countupLoopWithNegScale @ bci:32 (line 205)
  956  AddP  === _ 131 1158 1244  [[ 955 ]]  !orig=782,684,167 !jvms: LoopRangeStrideTest::countupLoopWithNegScale @ bci:32 (line 205)
  960  AddP  === _ 172 1147 1246  [[ 939 ]]  !orig=203 !jvms: LoopRangeStrideTest::countupLoopWithNegScale @ bci:42 (line 205)
  962  AddP  === _ 172 1147 1245  [[ 942 ]]  !orig=679,203 !jvms: LoopRangeStrideTest::countupLoopWithNegScale @ bci:42 (line 205)
  964  AddP  === _ 172 1147 1247  [[ 947 ]]  !orig=786,203 !jvms: LoopRangeStrideTest::countupLoopWithNegScale @ bci:42 (line 205)
  966  AddP  === _ 60 1152 1246  [[ 936 ]]  !orig=221 !jvms: LoopRangeStrideTest::countupLoopWithNegScale @ bci:44 (line 205)
  968  AddP  === _ 131 1158 1246  [[ 938 ]]  !orig=167 !jvms: LoopRangeStrideTest::countupLoopWithNegScale @ bci:32 (line 205)
  971  AddP  === _ 60 1152 1245  [[ 940 ]]  !orig=681,221 !jvms: LoopRangeStrideTest::countupLoopWithNegScale @ bci:44 (line 205)
  973  AddP  === _ 131 1158 1245  [[ 943 ]]  !orig=684,167 !jvms: LoopRangeStrideTest::countupLoopWithNegScale @ bci:32 (line 205)
  976  AddP  === _ 60 1152 1247  [[ 944 ]]  !orig=788,221 !jvms: LoopRangeStrideTest::countupLoopWithNegScale @ bci:44 (line 205)
  978  AddP  === _ 131 1158 1247  [[ 946 ]]  !orig=790,167 !jvms: LoopRangeStrideTest::countupLoopWithNegScale @ bci:32 (line 205)
 1000  ConI  === 0  [[ 1155 1150 1145 ]]  #int:2176
 1004  ConI  === 0  [[ 1157 1151 1146 ]]  #int:2180
 1008  ConI  === 0  [[ 1156 1149 1144 ]]  #int:2172
 1089  Halt  === 1344 1 1 8 1  [[ 0 ]] 
 1099  Halt  === 1336 1 1 8 1  [[ 0 ]] 
 1110  Halt  === 1332 1 1 8 1  [[ 0 ]] 
 1111  ConI  === 0  [[ 246 ]]  #int:528
 1112  StoreI  === 1181 1116 1167 1113  [[ 948 950 955 ]]  @int[int:>=0] (java/lang/Cloneable,java/io/Serializable):exact+any *, idx=6;  Memory: @int[int:543] (java/lang/Cloneable,java/io/Serializable):NotNull:exact+any *, idx=6; !orig=223,696 !jvms: LoopRangeStrideTest::countupLoopWithNegScale @ bci:44 (line 205)
 1113  MulI  === _ 1114 1115  [[ 1112 ]]  !orig=206 !jvms: LoopRangeStrideTest::countupLoopWithNegScale @ bci:43 (line 205)
 1114  LoadI  === 418 1116 1172  |268  [[ 1113 ]]  @int[int:>=0] (java/lang/Cloneable,java/io/Serializable):exact+any *, idx=6; #int !orig=169 !jvms: LoopRangeStrideTest::countupLoopWithNegScale @ bci:32 (line 205)
 1115  LoadI  === 418 1116 1161  |313  [[ 1113 ]]  @int[int:>=0] (java/lang/Cloneable,java/io/Serializable):exact+any *, idx=6; #int !orig=205 !jvms: LoopRangeStrideTest::countupLoopWithNegScale @ bci:42 (line 205)
 1116  StoreI  === 1181 1120 1168 1117  [[ 1112 1114 1115 ]]  @int[int:>=0] (java/lang/Cloneable,java/io/Serializable):exact+any *, idx=6;  Memory: @int[int:543] (java/lang/Cloneable,java/io/Serializable):NotNull:exact+any *, idx=6; !orig=676,223,696 !jvms: LoopRangeStrideTest::countupLoopWithNegScale @ bci:44 (line 205)
 1117  MulI  === _ 1118 1119  [[ 1116 ]]  !orig=677,206 !jvms: LoopRangeStrideTest::countupLoopWithNegScale @ bci:43 (line 205)
 1118  LoadI  === 418 1120 1162  |313  [[ 1117 ]]  @int[int:>=0] (java/lang/Cloneable,java/io/Serializable):exact+any *, idx=6; #int !orig=678,205 !jvms: LoopRangeStrideTest::countupLoopWithNegScale @ bci:42 (line 205)
 1119  LoadI  === 418 1120 1173  |268  [[ 1117 ]]  @int[int:>=0] (java/lang/Cloneable,java/io/Serializable):exact+any *, idx=6; #int !orig=683,169 !jvms: LoopRangeStrideTest::countupLoopWithNegScale @ bci:32 (line 205)
 1120  StoreI  === 1181 1124 1169 1121  [[ 1116 1118 1119 ]]  @int[int:>=0] (java/lang/Cloneable,java/io/Serializable):exact+any *, idx=6;  Memory: @int[int:543] (java/lang/Cloneable,java/io/Serializable):NotNull:exact+any *, idx=6; !orig=770,223,696 !jvms: LoopRangeStrideTest::countupLoopWithNegScale @ bci:44 (line 205)
 1121  MulI  === _ 1122 1123  [[ 1120 ]]  !orig=771,206 !jvms: LoopRangeStrideTest::countupLoopWithNegScale @ bci:43 (line 205)
 1122  LoadI  === 418 1124 1174  |268  [[ 1121 ]]  @int[int:>=0] (java/lang/Cloneable,java/io/Serializable):exact+any *, idx=6; #int !orig=772,169 !jvms: LoopRangeStrideTest::countupLoopWithNegScale @ bci:32 (line 205)
 1123  LoadI  === 418 1124 1164  |313  [[ 1121 ]]  @int[int:>=0] (java/lang/Cloneable,java/io/Serializable):exact+any *, idx=6; #int !orig=773,205 !jvms: LoopRangeStrideTest::countupLoopWithNegScale @ bci:42 (line 205)
 1124  StoreI  === 1181 1128 1166 1125  [[ 1120 1122 1123 ]]  @int[int:>=0] (java/lang/Cloneable,java/io/Serializable):exact+any *, idx=6;  Memory: @int[int:543] (java/lang/Cloneable,java/io/Serializable):NotNull:exact+any *, idx=6; !orig=774,676,223,696 !jvms: LoopRangeStrideTest::countupLoopWithNegScale @ bci:44 (line 205)
 1125  MulI  === _ 1126 1127  [[ 1124 ]]  !orig=775,677,206 !jvms: LoopRangeStrideTest::countupLoopWithNegScale @ bci:43 (line 205)
 1126  LoadI  === 418 1128 1163  |313  [[ 1125 ]]  @int[int:>=0] (java/lang/Cloneable,java/io/Serializable):exact+any *, idx=6; #int !orig=776,678,205 !jvms: LoopRangeStrideTest::countupLoopWithNegScale @ bci:42 (line 205)
 1127  LoadI  === 418 1128 1171  |268  [[ 1125 ]]  @int[int:>=0] (java/lang/Cloneable,java/io/Serializable):exact+any *, idx=6; #int !orig=781,683,169 !jvms: LoopRangeStrideTest::countupLoopWithNegScale @ bci:32 (line 205)
 1128  StoreI  === 1181 1132 1149 1129  [[ 1124 1126 1127 ]]  @int[int:>=0] (java/lang/Cloneable,java/io/Serializable):exact+any *, idx=6;  Memory: @int[int:543] (java/lang/Cloneable,java/io/Serializable):NotNull:exact+any *, idx=6; !orig=936,223,696 !jvms: LoopRangeStrideTest::countupLoopWithNegScale @ bci:44 (line 205)
 1129  MulI  === _ 1130 1131  [[ 1128 ]]  !orig=937,206 !jvms: LoopRangeStrideTest::countupLoopWithNegScale @ bci:43 (line 205)
 1130  LoadI  === 418 1132 1156  |268  [[ 1129 ]]  @int[int:>=0] (java/lang/Cloneable,java/io/Serializable):exact+any *, idx=6; #int !orig=938,169 !jvms: LoopRangeStrideTest::countupLoopWithNegScale @ bci:32 (line 205)
 1131  LoadI  === 418 1132 1144  |313  [[ 1129 ]]  @int[int:>=0] (java/lang/Cloneable,java/io/Serializable):exact+any *, idx=6; #int !orig=939,205 !jvms: LoopRangeStrideTest::countupLoopWithNegScale @ bci:42 (line 205)
 1132  StoreI  === 1181 1136 1150 1133  [[ 1128 1130 1131 ]]  @int[int:>=0] (java/lang/Cloneable,java/io/Serializable):exact+any *, idx=6;  Memory: @int[int:543] (java/lang/Cloneable,java/io/Serializable):NotNull:exact+any *, idx=6; !orig=940,676,223,696 !jvms: LoopRangeStrideTest::countupLoopWithNegScale @ bci:44 (line 205)
 1133  MulI  === _ 1134 1135  [[ 1132 ]]  !orig=941,677,206 !jvms: LoopRangeStrideTest::countupLoopWithNegScale @ bci:43 (line 205)
 1134  LoadI  === 418 1136 1145  |313  [[ 1133 ]]  @int[int:>=0] (java/lang/Cloneable,java/io/Serializable):exact+any *, idx=6; #int !orig=942,678,205 !jvms: LoopRangeStrideTest::countupLoopWithNegScale @ bci:42 (line 205)
 1135  LoadI  === 418 1136 1155  |268  [[ 1133 ]]  @int[int:>=0] (java/lang/Cloneable,java/io/Serializable):exact+any *, idx=6; #int !orig=943,683,169 !jvms: LoopRangeStrideTest::countupLoopWithNegScale @ bci:32 (line 205)
 1136  StoreI  === 1181 1140 1151 1137  [[ 1132 1134 1135 ]]  @int[int:>=0] (java/lang/Cloneable,java/io/Serializable):exact+any *, idx=6;  Memory: @int[int:543] (java/lang/Cloneable,java/io/Serializable):NotNull:exact+any *, idx=6; !orig=944,770,223,696 !jvms: LoopRangeStrideTest::countupLoopWithNegScale @ bci:44 (line 205)
 1137  MulI  === _ 1138 1139  [[ 1136 ]]  !orig=945,771,206 !jvms: LoopRangeStrideTest::countupLoopWithNegScale @ bci:43 (line 205)
 1138  LoadI  === 418 1140 1157  |268  [[ 1137 ]]  @int[int:>=0] (java/lang/Cloneable,java/io/Serializable):exact+any *, idx=6; #int !orig=946,772,169 !jvms: LoopRangeStrideTest::countupLoopWithNegScale @ bci:32 (line 205)
 1139  LoadI  === 418 1140 1146  |313  [[ 1137 ]]  @int[int:>=0] (java/lang/Cloneable,java/io/Serializable):exact+any *, idx=6; #int !orig=947,773,205 !jvms: LoopRangeStrideTest::countupLoopWithNegScale @ bci:42 (line 205)
 1140  StoreI  === 1181 1184 1148 1141  [[ 1136 1138 1139 ]]  @int[int:>=0] (java/lang/Cloneable,java/io/Serializable):exact+any *, idx=6;  Memory: @int[int:543] (java/lang/Cloneable,java/io/Serializable):NotNull:exact+any *, idx=6; !orig=948,774,676,223,696 !jvms: LoopRangeStrideTest::countupLoopWithNegScale @ bci:44 (line 205)
 1141  MulI  === _ 1142 1153  [[ 1140 ]]  !orig=949,775,677,206 !jvms: LoopRangeStrideTest::countupLoopWithNegScale @ bci:43 (line 205)
 1142  LoadI  === 418 1184 1143  |313  [[ 1141 ]]  @int[int:>=0] (java/lang/Cloneable,java/io/Serializable):exact+any *, idx=6; #int !orig=950,776,678,205 !jvms: LoopRangeStrideTest::countupLoopWithNegScale @ bci:42 (line 205)
 1143  AddP  === _ 172 1147 37  [[ 1142 ]]  !orig=951,777,679,203 !jvms: LoopRangeStrideTest::countupLoopWithNegScale @ bci:42 (line 205)
 1144  AddP  === _ 172 1147 1008  [[ 1131 ]]  !orig=960,203 !jvms: LoopRangeStrideTest::countupLoopWithNegScale @ bci:42 (line 205)
 1145  AddP  === _ 172 1147 1000  [[ 1134 ]]  !orig=962,679,203 !jvms: LoopRangeStrideTest::countupLoopWithNegScale @ bci:42 (line 205)
 1146  AddP  === _ 172 1147 1004  [[ 1139 ]]  !orig=964,786,203 !jvms: LoopRangeStrideTest::countupLoopWithNegScale @ bci:42 (line 205)
 1147  AddP  === _ 172 172 1159  [[ 1143 1144 1145 1146 1161 1164 1163 1162 964 679 203 777 951 960 962 786 ]]  !orig=[952],[778],[680],[358]
 1148  AddP  === _ 60 1152 37  [[ 1140 ]]  !orig=953,779,681,221 !jvms: LoopRangeStrideTest::countupLoopWithNegScale @ bci:44 (line 205)
 1149  AddP  === _ 60 1152 1008  [[ 1128 ]]  !orig=966,221 !jvms: LoopRangeStrideTest::countupLoopWithNegScale @ bci:44 (line 205)
 1150  AddP  === _ 60 1152 1000  [[ 1132 ]]  !orig=971,681,221 !jvms: LoopRangeStrideTest::countupLoopWithNegScale @ bci:44 (line 205)
 1151  AddP  === _ 60 1152 1004  [[ 1136 ]]  !orig=976,788,221 !jvms: LoopRangeStrideTest::countupLoopWithNegScale @ bci:44 (line 205)
 1152  AddP  === _ 60 60 1159  [[ 1148 1149 1150 1151 1166 1169 1168 1167 681 953 966 971 976 788 779 221 ]]  !orig=[954],[780],[682],[359]
 1153  LoadI  === 418 1184 1154  |268  [[ 1141 ]]  @int[int:>=0] (java/lang/Cloneable,java/io/Serializable):exact+any *, idx=6; #int !orig=955,781,683,169 !jvms: LoopRangeStrideTest::countupLoopWithNegScale @ bci:32 (line 205)
 1154  AddP  === _ 131 1158 37  [[ 1153 ]]  !orig=956,782,684,167 !jvms: LoopRangeStrideTest::countupLoopWithNegScale @ bci:32 (line 205)
 1155  AddP  === _ 131 1158 1000  [[ 1135 ]]  !orig=973,684,167 !jvms: LoopRangeStrideTest::countupLoopWithNegScale @ bci:32 (line 205)
 1156  AddP  === _ 131 1158 1008  [[ 1130 ]]  !orig=968,167 !jvms: LoopRangeStrideTest::countupLoopWithNegScale @ bci:32 (line 205)
 1157  AddP  === _ 131 1158 1004  [[ 1138 ]]  !orig=978,790,167 !jvms: LoopRangeStrideTest::countupLoopWithNegScale @ bci:32 (line 205)
 1158  AddP  === _ 131 131 1159  [[ 1154 1155 1156 1157 1171 1174 1173 1172 684 956 973 968 978 790 782 167 ]]  !orig=[957],[783],[685],[357]
 1159  LShiftI  === _ 1160 30  [[ 1147 1152 1158 ]]  !orig=[958],[784],[686],[261]
 1160  SubI  === _ 28 1185  [[ 1159 ]]  !orig=[959],[785],[687],[258]
 1161  AddP  === _ 172 1147 1195  [[ 1115 ]]  !orig=203 !jvms: LoopRangeStrideTest::countupLoopWithNegScale @ bci:42 (line 205)
 1162  AddP  === _ 172 1147 1196  [[ 1118 ]]  !orig=679,203 !jvms: LoopRangeStrideTest::countupLoopWithNegScale @ bci:42 (line 205)
 1163  AddP  === _ 172 1147 1194  [[ 1126 ]]  !orig=777,679,203 !jvms: LoopRangeStrideTest::countupLoopWithNegScale @ bci:42 (line 205)
 1164  AddP  === _ 172 1147 1197  [[ 1123 ]]  !orig=786,203 !jvms: LoopRangeStrideTest::countupLoopWithNegScale @ bci:42 (line 205)
 1166  AddP  === _ 60 1152 1194  [[ 1124 ]]  !orig=779,681,221 !jvms: LoopRangeStrideTest::countupLoopWithNegScale @ bci:44 (line 205)
 1167  AddP  === _ 60 1152 1195  [[ 1112 ]]  !orig=221 !jvms: LoopRangeStrideTest::countupLoopWithNegScale @ bci:44 (line 205)
 1168  AddP  === _ 60 1152 1196  [[ 1116 ]]  !orig=681,221 !jvms: LoopRangeStrideTest::countupLoopWithNegScale @ bci:44 (line 205)
 1169  AddP  === _ 60 1152 1197  [[ 1120 ]]  !orig=788,221 !jvms: LoopRangeStrideTest::countupLoopWithNegScale @ bci:44 (line 205)
 1171  AddP  === _ 131 1158 1194  [[ 1127 ]]  !orig=782,684,167 !jvms: LoopRangeStrideTest::countupLoopWithNegScale @ bci:32 (line 205)
 1172  AddP  === _ 131 1158 1195  [[ 1114 ]]  !orig=167 !jvms: LoopRangeStrideTest::countupLoopWithNegScale @ bci:32 (line 205)
 1173  AddP  === _ 131 1158 1196  [[ 1119 ]]  !orig=684,167 !jvms: LoopRangeStrideTest::countupLoopWithNegScale @ bci:32 (line 205)
 1174  AddP  === _ 131 1158 1197  [[ 1122 ]]  !orig=790,167 !jvms: LoopRangeStrideTest::countupLoopWithNegScale @ bci:32 (line 205)
 1181  CountedLoop  === 1181 1331 234  [[ 1112 1116 1120 1124 1128 1132 1136 1140 1181 936 1184 1185 940 944 948 248 770 774 223 676 ]] inner stride: 16 main of N1181 !orig=[988],[797],[689],[253],[244],[118] !jvms: LoopRangeStrideTest::countupLoopWithNegScale @ bci:17 (line 205)
 1184  Phi  === 1181 463 223  [[ 1140 1142 1153 ]]  #memory  Memory: @int[int:>=0] (java/lang/Cloneable,java/io/Serializable):exact+any *, idx=6; !orig=[991],[800],[691],124 !jvms: LoopRangeStrideTest::countupLoopWithNegScale @ bci:17 (line 205)
 1185  Phi  === 1181 376 224  [[ 1160 224 1324 ]]  #int:272..512:www #tripcount !orig=[987],[801],[690],125 !jvms: LoopRangeStrideTest::countupLoopWithNegScale @ bci:17 (line 205)
 1194  ConI  === 0  [[ 1163 1166 1171 ]]  #int:2168
 1195  ConI  === 0  [[ 1161 1167 1172 ]]  #int:2156
 1196  ConI  === 0  [[ 1162 1173 1168 ]]  #int:2160
 1197  ConI  === 0  [[ 1164 1169 1174 ]]  #int:2164
 1244  ConI  === 0  [[ 956 953 951 ]]  #int:2152
 1245  ConI  === 0  [[ 973 971 962 ]]  #int:2144
 1246  ConI  === 0  [[ 968 966 960 ]]  #int:2140
 1247  ConI  === 0  [[ 978 976 964 ]]  #int:2148
 1248  ConI  === 0  [[ 790 788 786 ]]  #int:2132
 1249  ConI  === 0  [[ 782 779 777 ]]  #int:2136
 1250  ConI  === 0  [[ 167 221 203 ]]  #int:2124
 1251  ConI  === 0  [[ 684 679 681 ]]  #int:2128
 1292  ConI  === 0  [[ 1305 1303 1374 ]]  #int:256
 1300  CmpU  === _ 316 63  [[ 1353 ]]  !orig=[502],[350]
 1303  CmpU  === _ 316 1292  [[ 1329 ]]  !orig=[1103],[502],[350]
 1305  CmpU  === _ 150 1292  [[ 1341 ]]  !orig=[1082],[545],[306]
 1311  ConL  === 0  [[ 1314 1316 ]]  #long:271
 1312  CmpU  === _ 150 63  [[ 1349 ]]  !orig=[545],[306]
 1314  CmpUL  === _ 337 1311  [[ 1333 ]]  !orig=[524],[338]
 1316  CmpUL  === _ 293 1311  [[ 1345 ]]  !orig=[566],[294]
 1320  ConI  === 0  [[ 468 466 471 ]]  #int:1100
 1324  CastII  === 249 1185  [[ 1326 1328 ]]  #int:272..512:www unconditional dependency
 1326  AddI  === _ 1324 129  [[ 445 586 ]]  !orig=[460],[715],[619],[500],[422],[347],[398]
 1327  ConI  === 0  [[ 1328 ]]  #int:527
 1328  SubI  === _ 1327 1324  [[ 621 599 ]]  !orig=[718],[598],[544],[397],[305]
 1329  Bool  === _ 1303  [[ 1419 ]] [le]
 1331  IfFalse  === 1419  [[ 1181 ]] #0 !orig=[1106],[505],[354]
 1332  IfTrue  === 1419  [[ 1110 ]] #1 !orig=[1107],[506],[355]
 1333  Bool  === _ 1314  [[ 1334 1338 ]] [le] !orig=[1337]
 1334  If  === 1343 1333  [[ 1335 1336 ]] P=0.000001, C=-1.000000 !orig=[1097],[529],[341]
 1335  IfFalse  === 1334  [[ 1419 ]] #0 !orig=[1095],[527],[342],[354]
 1336  IfTrue  === 1334  [[ 1099 ]] #1 !orig=[1096],[528],[343]
 1338  If  === 1355 1333  [[ 1339 1340 ]] P=0.000001, C=-1.000000 !orig=[529],[341]
 1339  IfFalse  === 1338  [[ 1417 ]] #0 !orig=[527],[342],[354]
 1340  IfTrue  === 1338  [[ 531 ]] #1 !orig=[528],[343]
 1341  Bool  === _ 1305  [[ 1418 ]] [le]
 1343  IfFalse  === 1418  [[ 1334 ]] #0 !orig=[1085],[548],[310]
 1344  IfTrue  === 1418  [[ 1089 ]] #1 !orig=[1086],[549],[311]
 1345  Bool  === _ 1316  [[ 1346 ]] [le]
 1346  If  === 1351 1345  [[ 1347 1348 ]] P=0.000001, C=-1.000000 !orig=[571],[297]
 1347  IfFalse  === 1346  [[ 1418 ]] #0 !orig=[569],[298]
 1348  IfTrue  === 1346  [[ 573 ]] #1 !orig=[570],[299]
 1349  Bool  === _ 1312  [[ 1417 ]] [le]
 1351  IfFalse  === 1417  [[ 1346 ]] #0 !orig=[548],[310]
 1352  IfTrue  === 1417  [[ 552 ]] #1 !orig=[549],[311]
 1353  Bool  === _ 1300  [[ 1416 ]] [le]
 1355  IfFalse  === 1416  [[ 1338 ]] #0 !orig=[505],[354]
 1356  IfTrue  === 1416  [[ 509 ]] #1 !orig=[506],[355]
 1357  Region  === 1357 1403 1408  [[ 1357 1358 1359 1360 56 ]]  !orig=[48] !jvms: LoopRangeStrideTest::countupLoopWithNegScale @ bci:3 (line 203)
 1358  Phi  === 1357 53 1410  [[ 59 56 ]]  #memory  Memory: @rawptr:BotPTR, idx=Raw;
 1359  Phi  === 1357 6 1381  [[ 242 78 ]]  #abIO
 1360  Phi  === 1357 1404 1367  [[ 60 ]]  #rawptr:BotPTR !orig=[55] !jvms: LoopRangeStrideTest::countupLoopWithNegScale @ bci:3 (line 203)
 1361  ThreadLocal  === 0  [[ 1363 1365 ]] 
 1362  ConI  === 0  [[ 1363 ]]  #int:216
 1363  AddP  === _ 1 1361 1362  [[ 1367 1382 ]] 
 1364  ConI  === 0  [[ 1365 ]]  #int:224
 1365  AddP  === _ 1 1361 1364  [[ 1366 ]] 
 1366  LoadP  === 5 7 1365  [[ 1369 ]]  @rawptr:BotPTR, idx=Raw; #rawptr:BotPTR (does not depend only on test, raw access)
 1367  LoadP  === 5 7 1363  [[ 1368 1374 1377 1380 1383 1384 1384 1386 1386 1389 1389 1395 1395 1360 ]]  @rawptr:BotPTR, idx=Raw; #rawptr:BotPTR (does not depend only on test, raw access)
 1368  AddP  === _ 1 1367 37  [[ 1369 1374 1377 1380 1382 ]] 
 1369  CmpP  === _ 1368 1366  [[ 1405 ]] 
 1374  AddP  === _ 1367 1368 1292  [[ 1375 ]] 
 1375  PrefetchAllocation  === 1408 6 1374  [[ 1378 ]] 
 1376  ConI  === 0  [[ 1377 ]]  #int:320
 1377  AddP  === _ 1367 1368 1376  [[ 1378 ]] 
 1378  PrefetchAllocation  === _ 1375 1377  [[ 1381 ]] 
 1379  ConI  === 0  [[ 1380 ]]  #int:384
 1380  AddP  === _ 1367 1368 1379  [[ 1381 ]] 
 1381  PrefetchAllocation  === _ 1378 1380  [[ 1359 ]] 
 1382  StoreP  === 1408 7 1363 1368  [[ 1383 ]]  @rawptr:BotPTR, idx=Raw;  Memory: @rawptr:BotPTR, idx=Raw;
 1383  StoreI  === 1408 1382 1367 39  [[ 1385 ]]  @NULL  Memory: @rawptr:BotPTR, idx=Raw;
 1384  AddP  === _ 1367 1367 726  [[ 1385 ]] 
 1385  StoreP  === 1408 1383 1384 23  [[ 1387 ]]  @NULL  Memory: @rawptr:BotPTR, idx=Raw;
 1386  AddP  === _ 1367 1367 148  [[ 1387 ]] 
 1387  StoreI  === 1408 1385 1386 22  [[ 1390 ]]  @NULL  Memory: @rawptr:BotPTR, idx=Raw;
 1388  ConI  === 0  [[ 1389 ]]  #int:12
 1389  AddP  === _ 1367 1367 1388  [[ 1390 ]] 
 1390  StoreI  === 1408 1387 1389 28  [[ 1410 ]]  @rawptr:BotPTR, idx=Raw;  Memory: @rawptr:BotPTR, idx=Raw;
 1395  AddP  === _ 1367 1367 129  [[ 1410 ]] 
 1397  MemBarStoreStore  === 1398 1 1399 1 1  [[ 1400 1401 ]] 
 1398  Proj  === 56  [[ 1397 ]] #0
 1399  Proj  === 56  [[ 1397 ]] #2  Memory: @rawptr:BotPTR, idx=Raw;
 1400  Proj  === 1397  [[ 60 267 ]] #0 !orig=[57] !jvms: LoopRangeStrideTest::countupLoopWithNegScale @ bci:3 (line 203)
 1401  Proj  === 1397  [[ 75 75 75 75 465 470 16 16 16 463 ]] #2  Memory: @BotPTR *+bot, idx=Bot; !orig=[58],[116] !jvms: LoopRangeStrideTest::countupLoopWithNegScale @ bci:3 (line 203)
 1402  CallStaticJava  === 1407 1 7 8 1 (1411 22 10 1 1 ) [[ 1404 54 53 44 ]] # Static _new_array_Java  rawptr:NotNull ( java/lang/Object:NotNull *, int ) C=0.000100 LoopRangeStrideTest::countupLoopWithNegScale @ bci:3 (line 203) !orig=43 !jvms: LoopRangeStrideTest::countupLoopWithNegScale @ bci:3 (line 203)
 1403  CatchProj  === 47  [[ 1357 ]] #0@bci -1  !orig=[48] !jvms: LoopRangeStrideTest::countupLoopWithNegScale @ bci:3 (line 203)
 1404  Proj  === 1402  [[ 1360 ]] #5 !orig=[55] !jvms: LoopRangeStrideTest::countupLoopWithNegScale @ bci:3 (line 203)
 1405  Bool  === _ 1369  [[ 1406 ]] [lt]
 1406  If  === 5 1405  [[ 1407 1408 ]] P=0.999900, C=-1.000000 !orig=[1371]
 1407  IfFalse  === 1406  [[ 1402 ]] #0 !orig=[1372]
 1408  IfTrue  === 1406  [[ 1357 1410 1390 1387 1385 1383 1382 1375 ]] #1 !orig=[1373]
 1410  ClearArray  === 1408 1390 63 1395  [[ 1358 ]]   Memory: @rawptr:BotPTR, idx=Raw; !orig=[1396]
 1411  ConP  === 0  [[ 1402 ]]  #precise [int (java/lang/Cloneable,java/io/Serializable): :Constant:exact *
 1412  If  === 268 368  [[ 371 370 ]] P=0.000001, C=-1.000000
 1413  If  === 370 379  [[ 382 381 ]] P=0.000001, C=-1.000000
 1414  If  === 313 425  [[ 428 427 ]] P=0.000001, C=-1.000000
 1415  If  === 427 416  [[ 419 418 ]] P=0.000001, C=-1.000000
 1416  If  === 418 1353  [[ 1356 1355 ]] P=0.000001, C=-1.000000
 1417  If  === 1339 1349  [[ 1352 1351 ]] P=0.000001, C=-1.000000
 1418  If  === 1347 1341  [[ 1344 1343 ]] P=0.000001, C=-1.000000
 1419  If  === 1335 1329  [[ 1332 1331 ]] P=0.000001, C=-1.000000
 1420  If  === 591 600  [[ 603 602 ]] P=0.999999, C=-1.000000
 1421  If  === 612 622  [[ 625 624 ]] P=0.999999, C=-1.000000

STDERR:

Command Line:
/home/runner/work/jdk/jdk/bundles/jdk/jdk-21/fastdebug/bin/java -DReproduce=true -cp /home/runner/work/jdk/jdk/build/run-test-prebuilt/test-support/jtreg_test_hotspot_jtreg_tier1_compiler/classes/compiler/vectorization/runner/LoopRangeStrideTest.d:/home/runner/work/jdk/jdk/test/hotspot/jtreg/compiler/vectorization/runner:/home/runner/work/jdk/jdk/build/run-test-prebuilt/test-support/jtreg_test_hotspot_jtreg_tier1_compiler/classes/test/lib:/home/runner/work/jdk/jdk/test/lib:/home/runner/work/jdk/jdk/build/run-test-prebuilt/test-support/jtreg_test_hotspot_jtreg_tier1_compiler/classes:/home/runner/work/jdk/jdk/test/hotspot/jtreg:/home/runner/work/jdk/jdk/jtreg/installed/lib/javatest.jar:/home/runner/work/jdk/jdk/jtreg/installed/lib/jtreg.jar -Djava.library.path=/home/runner/work/jdk/jdk/bundles/tests/hotspot/jtreg/native -Xbootclasspath/a:. -XX:+UnlockDiagnosticVMOptions -XX:+WhiteBoxAPI -XX:MaxRAMPercentage=25 -Dtest.boot.jdk=bootjdk/jdk -Djava.io.tmpdir=/home/runner/work/jdk/jdk/build/run-test-prebuilt/test-support/jtreg_test_hotspot_jtreg_tier1_compiler/tmp -XX:-CreateCoredumpOnCrash -Dir.framework.server.port=36331 -XX:-OptimizeFill -XX:+PrintCompilation -XX:+UnlockDiagnosticVMOptions -XX:+LogCompilation -XX:CompilerDirectivesFile=test-vm-compile-commands-pid-58826.log -XX:CompilerDirectivesLimit=91 -XX:-OmitStackTraceInFastThrow -DShouldDoIRVerification=true -XX:-BackgroundCompilation -XX:CompileCommand=quiet compiler.lib.ir_framework.test.TestVM compiler.vectorization.runner.LoopRangeStrideTest

One or more @IR rules failed:

Failed IR Rules (2) of Methods (2)
----------------------------------
1) Method ""public int[] compiler.vectorization.runner.LoopRangeStrideTest.countDownLoopWithNegScale()"" - [Failed IR rules: 1]:
   * @IR rule 1: ""@compiler.lib.ir_framework.IR(phase={DEFAULT}, applyIfCPUFeatureAnd={}, applyIfCPUFeatureOr={""asimd"", ""true"", ""sse4.1"", ""true""}, applyIf={}, applyIfCPUFeature={}, counts={""_#STORE_VECTOR#_"", "">0""}, failOn={}, applyIfAnd={}, applyIfOr={}, applyIfNot={})""
     > Phase ""PrintIdeal"":
       - counts: Graph contains wrong number of nodes:
         * Constraint 1: ""(\d+(\s){2}(StoreVector.*)+(\s){2}===.*)""
           - Failed comparison: [found] 0 > 0 [given]
           - No nodes matched!

2) Method ""public int[] compiler.vectorization.runner.LoopRangeStrideTest.countupLoopWithNegScale()"" - [Failed IR rules: 1]:
   * @IR rule 1: ""@compiler.lib.ir_framework.IR(phase={DEFAULT}, applyIfCPUFeatureAnd={}, applyIfCPUFeatureOr={""asimd"", ""true"", ""sse4.1"", ""true""}, applyIf={}, applyIfCPUFeature={}, counts={""_#STORE_VECTOR#_"", "">0""}, failOn={}, applyIfAnd={}, applyIfOr={}, applyIfNot={})""
     > Phase ""PrintIdeal"":
       - counts: Graph contains wrong number of nodes:
         * Constraint 1: ""(\d+(\s){2}(StoreVector.*)+(\s){2}===.*)""
           - Failed comparison: [found] 0 > 0 [given]
           - No nodes matched!

>>> Check stdout for compilation output of the failed methods


  #############################################################
   - To only run the failed tests use -DTest, -DExclude,
     and/or -DScenarios.
   - To also get the standard output of the test VM run with
     -DReportStdout=true or for even more fine-grained logging
     use -DVerbose=true.
  #############################################################


compiler.lib.ir_framework.driver.irmatching.IRViolationException: There were one or multiple IR rule failures. Please check stderr for more information.
	at compiler.lib.ir_framework.driver.irmatching.IRMatcher.reportFailures(IRMatcher.java:61)
	at compiler.lib.ir_framework.driver.irmatching.IRMatcher.match(IRMatcher.java:49)
	at compiler.lib.ir_framework.TestFramework.runTestVM(TestFramework.java:754)
	at compiler.lib.ir_framework.TestFramework.start(TestFramework.java:719)
	at compiler.lib.ir_framework.TestFramework.start(TestFramework.java:339)
	at compiler.vectorization.runner.VectorizationTestRunner.run(VectorizationTestRunner.java:85)
	at compiler.vectorization.runner.VectorizationTestRunner.main(VectorizationTestRunner.java:211)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
	at java.base/java.lang.reflect.Method.invoke(Method.java:578)
	at com.sun.javatest.regtest.agent.MainWrapper$MainThread.run(MainWrapper.java:125)
	at java.base/java.lang.Thread.run(Thread.java:1623)

JavaTest Message: Test threw exception: compiler.lib.ir_framework.driver.irmatching.IRViolationException: There were one or multiple IR rule failures. Please check stderr for more information.
JavaTest Message: shutting down test

STATUS:Failed.`main' threw exception: compiler.lib.ir_framework.driver.irmatching.IRViolationException: There were one or multiple IR rule failures. Please check stderr for more information.
rerun:
cd /home/runner/work/jdk/jdk/build/run-test-prebuilt/test-support/jtreg_test_hotspot_jtreg_tier1_compiler/scratch && \
HOME=/home/runner \
LANG=C.UTF-8 \
LC_ALL=C \
PATH=/bin:/usr/bin:/usr/sbin \
TEST_IMAGE_DIR=/home/runner/work/jdk/jdk/bundles/tests \
_JVM_DWARF_PATH=/home/runner/work/jdk/jdk/bundles/symbols/jdk-21/fastdebug \
CLASSPATH=/home/runner/work/jdk/jdk/build/run-test-prebuilt/test-support/jtreg_test_hotspot_jtreg_tier1_compiler/classes/compiler/vectorization/runner/LoopRangeStrideTest.d:/home/runner/work/jdk/jdk/test/hotspot/jtreg/compiler/vectorization/runner:/home/runner/work/jdk/jdk/build/run-test-prebuilt/test-support/jtreg_test_hotspot_jtreg_tier1_compiler/classes/test/lib:/home/runner/work/jdk/jdk/test/lib:/home/runner/work/jdk/jdk/build/run-test-prebuilt/test-support/jtreg_test_hotspot_jtreg_tier1_compiler/classes:/home/runner/work/jdk/jdk/test/hotspot/jtreg:/home/runner/work/jdk/jdk/jtreg/installed/lib/javatest.jar:/home/runner/work/jdk/jdk/jtreg/installed/lib/jtreg.jar \
    /home/runner/work/jdk/jdk/bundles/jdk/jdk-21/fastdebug/bin/java \
        -Dtest.vm.opts='-XX:MaxRAMPercentage=25 -Dtest.boot.jdk=bootjdk/jdk -Djava.io.tmpdir=/home/runner/work/jdk/jdk/build/run-test-prebuilt/test-support/jtreg_test_hotspot_jtreg_tier1_compiler/tmp' \
        -Dtest.tool.vm.opts='-J-XX:MaxRAMPercentage=25 -J-Dtest.boot.jdk=bootjdk/jdk -J-Djava.io.tmpdir=/home/runner/work/jdk/jdk/build/run-test-prebuilt/test-support/jtreg_test_hotspot_jtreg_tier1_compiler/tmp' \
        -Dtest.compiler.opts= \
        -Dtest.java.opts=-XX:-CreateCoredumpOnCrash \
        -Dtest.jdk=/home/runner/work/jdk/jdk/bundles/jdk/jdk-21/fastdebug \
        -Dcompile.jdk=/home/runner/work/jdk/jdk/bundles/jdk/jdk-21/fastdebug \
        -Dtest.timeout.factor=4.0 \
        -Dtest.nativepath=/home/runner/work/jdk/jdk/bundles/tests/hotspot/jtreg/native \
        -Dtest.root=/home/runner/work/jdk/jdk/test/hotspot/jtreg \
        -Dtest.name=compiler/vectorization/runner/LoopRangeStrideTest.java \
        -Dtest.file=/home/runner/work/jdk/jdk/test/hotspot/jtreg/compiler/vectorization/runner/LoopRangeStrideTest.java \
        -Dtest.src=/home/runner/work/jdk/jdk/test/hotspot/jtreg/compiler/vectorization/runner \
        -Dtest.src.path=/home/runner/work/jdk/jdk/test/hotspot/jtreg/compiler/vectorization/runner:/home/runner/work/jdk/jdk/test/lib:/home/runner/work/jdk/jdk/test/hotspot/jtreg \
        -Dtest.classes=/home/runner/work/jdk/jdk/build/run-test-prebuilt/test-support/jtreg_test_hotspot_jtreg_tier1_compiler/classes/compiler/vectorization/runner/LoopRangeStrideTest.d \
        -Dtest.class.path=/home/runner/work/jdk/jdk/build/run-test-prebuilt/test-support/jtreg_test_hotspot_jtreg_tier1_compiler/classes/compiler/vectorization/runner/LoopRangeStrideTest.d:/home/runner/work/jdk/jdk/build/run-test-prebuilt/test-support/jtreg_test_hotspot_jtreg_tier1_compiler/classes/test/lib:/home/runner/work/jdk/jdk/build/run-test-prebuilt/test-support/jtreg_test_hotspot_jtreg_tier1_compiler/classes \
        -Dtest.class.path.prefix=/home/runner/work/jdk/jdk/build/run-test-prebuilt/test-support/jtreg_test_hotspot_jtreg_tier1_compiler/classes/compiler/vectorization/runner/LoopRangeStrideTest.d:/home/runner/work/jdk/jdk/test/hotspot/jtreg/compiler/vectorization/runner:/home/runner/work/jdk/jdk/build/run-test-prebuilt/test-support/jtreg_test_hotspot_jtreg_tier1_compiler/classes/test/lib:/home/runner/work/jdk/jdk/build/run-test-prebuilt/test-support/jtreg_test_hotspot_jtreg_tier1_compiler/classes \
        -XX:MaxRAMPercentage=25 \
        -Dtest.boot.jdk=bootjdk/jdk \
        -Djava.io.tmpdir=/home/runner/work/jdk/jdk/build/run-test-prebuilt/test-support/jtreg_test_hotspot_jtreg_tier1_compiler/tmp \
        -XX:-CreateCoredumpOnCrash \
        -Djava.library.path=/home/runner/work/jdk/jdk/bundles/tests/hotspot/jtreg/native \
        -Xbootclasspath/a:. \
        -XX:+UnlockDiagnosticVMOptions \
        -XX:+WhiteBoxAPI \
        com.sun.javatest.regtest.agent.MainWrapper /home/runner/work/jdk/jdk/build/run-test-prebuilt/test-support/jtreg_test_hotspot_jtreg_tier1_compiler/compiler/vectorization/runner/LoopRangeStrideTest.d/main.0.jta

TEST RESULT: Failed. Execution failed: `main' threw exception: compiler.lib.ir_framework.driver.irmatching.IRViolationException: There were one or multiple IR rule failures. Please check stderr for more information.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8302668,,,,,JDK-8303885,,,,,,,,,,,,,,,,x86,,,,,,,,,,linux,,,,,,"0|i30i9v:",9223372036854775807,b14,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2023-02-22 23:07;thartmann;Rules were added by JDK-8298632 and later modified/fixed by JDK-8300638 and JDK-8302668.

ILW = Test fails IR verification, github actions with single test on Linux x86, no workaround = MMH = P3;;;","2023-02-22 23:08;thartmann;[~epeter], [~jbhateja], [~pli], could one of you please have a look at this? Thanks.;;;","2023-02-22 23:29;pli;This test is good on AArch64. It passed before JDK-8302668 because feature string used (sse4_1) was incorrect so the test was not run on x86.

[~jbhateja] It looks sse4.1 is still too weak to vectorize these 2 cases on x86.;;;","2023-02-23 23:28;thartmann;Jatin, could you please have a look? Thanks.;;;","2023-03-01 09:47;kvn;I see the test also failed in GHA in Tobias's latest PR https://github.com/openjdk/jdk/pull/12806
;;;","2023-03-03 18:05;kvn;Failed again in my PR on 32-bit linux-x86: https://github.com/openjdk/jdk/pull/12858;;;","2023-03-07 09:38;kvn;[~jbhateja] What is status of the fix for this issue?
;;;","2023-03-08 08:41;jbhateja;Hi Vladimir,
Problem is around recognizing valid address expression during SWPointer creation for memory operands with 32 bit jvm, this prevents gathering adjacent memory operations.   -XX:+TraceSuperWord -XX:+TraceNewVectors -XX:CompileCommand=VectorizeDebug,test::workload,3  shows following errors .

SWPointer::memory_alignment: SWPointer p invalid, return bottom_align
SWPointer::memory_alignment: SWPointer p invalid, return bottom_align
SWPointer::memory_alignment: SWPointer p invalid, return bottom_align
SWPointer::memory_alignment: SWPointer p invalid, return bottom_align
SWPointer::memory_alignment: SWPointer p invalid, return bottom_align

I check the behavior also existed in JDK17 LTS.

As an interim solution to prevent this showing up as a GHA test failure, we can enable the test only for x86_64 and aarch64 targets.

 * @requires (os.arch==""amd64"" | os.arch==""x86_64"" | os.simpleArch == ""aarch64"")

Please let me know if this sounds reasonable, I will separately root cause the difference in Address expression b/w 32 and 64 bit builds.



;;;","2023-03-08 10:44;kvn;[~jbhateja] Thank you for explanation. Yes, your suggestion is reasonable.
Enable test run only on 64-bit VM and fix 32-bit VM vectorization issue in separate bug.
;;;","2023-03-09 02:18;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/12938
Date: 2023-03-09 10:08:51 +0000;;;","2023-03-09 04:07;dukebot;Changeset: 713def0b
Author:    Jatin Bhateja <jbhateja@openjdk.org>
Date:      2023-03-09 12:05:29 +0000
URL:       https://git.openjdk.org/jdk/commit/713def0bf25c3488afb72e453f3b7cd09a909599
;;;",,,,,,,,,,,,,,,,,,,,
jcmd: ManagementAgent.status truncates the text longer than O_BUFLEN,JDK-8303102,5094880,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,serb,serb,serb,2023-02-22 20:28,2023-08-07 14:48,2023-10-01 09:56,2023-02-26 15:39,11,17,19,20,21,,,,21,hotspot,,0,11-bp,17-bp,20-bp,amazon-interest,jdk11u-fix-request,jdk11u-fix-yes,jdk17u-fix-request,jdk17u-fix-yes,jdk20u-fix-request,jdk20u-fix-SQE-ok-next,jdk20u-fix-yes,,,,,," Implementation of the ""ManagementAgent.status"" indirectly depends on the size ""O_BUFLEN"". If the output is longer it is truncated. 

The issue can be reproduced by the ""test/jdk/sun/management/jmxremote/startstop/JMXStatusTest.java"" if the hostname is too long.",,,,,,,,,,,JDK-8307017,JDK-8311234,JDK-8311235,JDK-8304909,JDK-8311454,JDK-8304981,JDK-8304901,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,generic,,,,,,,,,,generic,,,,,,"0|i30i8r:",9223372036854775807,b12,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@2846162a,,,,,,,,,"2023-02-23 02:21;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/12724
Date: 2023-02-23 05:16:52 +0000;;;","2023-02-26 15:39;dukebot;Changeset: a43931b7
Author:    Sergey Bylokhov <serb@openjdk.org>
Date:      2023-02-26 23:36:59 +0000
URL:       https://git.openjdk.org/jdk/commit/a43931b79cb25d218e8f9b4d4f3a106f59cb2d37
;;;","2023-03-09 00:58;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk20u/pull/15
Date: 2023-03-08 18:51:34 +0000;;;","2023-03-09 00:58;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/1196
Date: 2023-03-02 03:59:20 +0000;;;","2023-03-09 00:58;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk11u-dev/pull/1795
Date: 2023-03-08 18:56:25 +0000;;;","2023-03-24 00:28;serb;Fix request (20u, 17u, 11u)

Clean backport. Small fix to make ""ManagementAgent.status"" reports all information about the agent, and not cut it in the middle.

Review 20u: https://github.com/openjdk/jdk20u/pull/15
Review 17u-dev: https://github.com/openjdk/jdk17u-dev/pull/1196
Review 11u-dev: https://github.com/openjdk/jdk11u-dev/pull/1795;;;",,,,,,,,,,,,,,,,,,,,,,,,,
SIGSEGV in JavaThread::is_interp_only_mode(),JDK-8303086,5094856,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,sspitsyn,dcubed,dcubed,2023-02-22 11:04,2023-07-25 04:27,2023-10-01 09:56,2023-06-30 14:00,21,,,,,,,,22,hotspot,,0,hgupdate-sync,intermittent,loom,,,,,,,,,,,,,,"The following test crashed with a SIGSEGV in JavaThread::is_interp_only_mode():

serviceability/jvmti/stress/StackTrace/Suspended/GetStackTraceSuspendedStressTest.java

Here's snippets from the hs_err_pid file:

#  SIGSEGV (0xb) at pc=0x0000000109ebf5cc, pid=5235, tid=25603
#
# JRE version: Java(TM) SE Runtime Environment (21.0) (slowdebug build 21-internal-LTS-2023-02-16-1211495.dcubed...)
# Java VM: Java HotSpot(TM) 64-Bit Server VM (slowdebug 21-internal-LTS-2023-02-16-1211495.dcubed..., mixed mode, sharing, tiered, compressed oops, compressed class ptrs, g1 gc, bsd-aarch64)
# Problematic frame:
# V  [libjvm.dylib+0xebf5cc]  JavaThread::is_interp_only_mode()+0x14

<snip>

---------------  T H R E A D  ---------------

Current thread (0x0000000133810a10):  JavaThread ""JVMTI agent thread"" daemon [_thread_in_vm, id=25603, stack(0x000000016d998000,0x000000016db9b000)] _threads_hazard_ptr=0x0000000125558250, _nested_threads_hazard_ptr_cnt=1, _nested_threads_hazard_ptr=0x0000000125558250

Stack: [0x000000016d998000,0x000000016db9b000],  sp=0x000000016db9a6e0,  free space=2057k
Native frames: (J=compiled Java code, j=interpreted, Vv=VM code, C=native code)
V  [libjvm.dylib+0xebf5cc]  JavaThread::is_interp_only_mode()+0x14
V  [libjvm.dylib+0xb6a700]  JvmtiThreadState::is_interp_only_mode()+0x44
V  [libjvm.dylib+0xb6c660]  JvmtiEventControllerPrivate::recompute_thread_enabled(JvmtiThreadState*)+0x164
V  [libjvm.dylib+0xb6c91c]  JvmtiEventControllerPrivate::recompute_enabled()+0x1f0
V  [libjvm.dylib+0xb6df20]  JvmtiEventControllerPrivate::set_user_enabled(JvmtiEnvBase*, JavaThread*, Handle, jvmtiEvent, bool)+0x1a4
V  [libjvm.dylib+0xb6e570]  JvmtiEventController::set_user_enabled(JvmtiEnvBase*, JavaThread*, oopDesc*, jvmtiEvent, bool)+0xfc
V  [libjvm.dylib+0xb52588]  JvmtiEnv::SetEventNotificationMode(jvmtiEventMode, jvmtiEvent, _jobject*, ...)+0x1a4
V  [libjvm.dylib+0xafad3c]  jvmti_SetEventNotificationMode(_jvmtiEnv*, jvmtiEventMode, jvmtiEvent, _jobject*, ...)+0x140
C  [libGetStackTraceSuspendedStress.dylib+0x3b18]  _jvmtiEnv::SetEventNotificationMode(jvmtiEventMode, jvmtiEvent, _jobject*, ...)+0x3c
C  [libGetStackTraceSuspendedStress.dylib+0x5e50]  check_vthread_consistency_suspended(_jvmtiEnv*, JNIEnv_*, _jobject*)+0xc0
C  [libGetStackTraceSuspendedStress.dylib+0x4d80]  agentProc(_jvmtiEnv*, JNIEnv_*, void*)+0x19c
C  [libGetStackTraceSuspendedStress.dylib+0x545c]  agent_thread_wrapper(_jvmtiEnv*, JNIEnv_*, void*)+0x54
V  [libjvm.dylib+0xb801d8]  JvmtiAgentThread::call_start_function()+0x74
V  [libjvm.dylib+0xb8010c]  JvmtiAgentThread::start_function_wrapper(JavaThread*, JavaThread*)+0x60
V  [libjvm.dylib+0x90be18]  JavaThread::thread_main_inner()+0x108
V  [libjvm.dylib+0x90bd04]  JavaThread::run()+0x124
V  [libjvm.dylib+0xff82b0]  Thread::call_run()+0x154
V  [libjvm.dylib+0xdb6ed4]  thread_native_entry(Thread*)+0x138
C  [libsystem_pthread.dylib+0x7878]  _pthread_start+0x140

siginfo: si_signo: 11 (SIGSEGV), si_code: 2 (SEGV_ACCERR), si_addr: 0x0000000000000560",,,,,,,,,,,JDK-8311543,JDK-8312884,,,,,,,,,,,,,,,,,,,,,,,,JDK-8311177,JDK-8311218,,,,,,,,"2023-02-22 11:07;dcubed;jdk-21+10_macosx-aarch64.8303086.zip;https://bugs.openjdk.org/secure/attachment/102760/jdk-21%2B10_macosx-aarch64.8303086.zip","2023-02-28 14:13;dcubed;jdk-21+11_macosx-aarch64.8303086.zip;https://bugs.openjdk.org/secure/attachment/102835/jdk-21%2B11_macosx-aarch64.8303086.zip","2023-04-10 07:11;dcubed;jdk-21+17_linux-x64.8303086.zip;https://bugs.openjdk.org/secure/attachment/103382/jdk-21%2B17_linux-x64.8303086.zip","2023-04-17 09:09;dcubed;jdk-21+18_macosx-aarch64.8303086.zip;https://bugs.openjdk.org/secure/attachment/103470/jdk-21%2B18_macosx-aarch64.8303086.zip","2023-04-24 08:28;dcubed;jdk-21+19_macosx-aarch64.8303086.zip;https://bugs.openjdk.org/secure/attachment/103537/jdk-21%2B19_macosx-aarch64.8303086.zip","2023-05-22 12:00;dcubed;jdk-21+23_macosx-aarch64.8303086.zip;https://bugs.openjdk.org/secure/attachment/103920/jdk-21%2B23_macosx-aarch64.8303086.zip","2023-05-30 12:46;dcubed;jdk-21+24_macosx-aarch64.8303086.zip;https://bugs.openjdk.org/secure/attachment/104117/jdk-21%2B24_macosx-aarch64.8303086.zip","2023-06-05 09:06;dcubed;jdk-21+25_macosx-aarch64.8303086.zip;https://bugs.openjdk.org/secure/attachment/104192/jdk-21%2B25_macosx-aarch64.8303086.zip","2023-06-12 09:28;dcubed;jdk-21+26_macosx-aarch64.8303086.zip;https://bugs.openjdk.org/secure/attachment/104261/jdk-21%2B26_macosx-aarch64.8303086.zip",,,,aarch64,,,,,,,,,,os_x,,,,,,"0|i30i3f:",9223372036854775807,b05,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@661b156a,,,,,,,,,"2023-02-22 11:07;dcubed;Here's the logs from my jdk-21+10 stress run sighting on macosx-aarch64:

$ unzip -l jdk-21+10_macosx-aarch64.8303086.zip
Archive:  jdk-21+10_macosx-aarch64.8303086.zip
  Length      Date    Time    Name
---------  ---------- -----   ----
    23717  02-18-2023 05:06   jdk-21+10_2/failures.macosx-aarch64/GetStackTraceSuspendedStressTest.jtr.slowdebug
   111326  02-22-2023 14:04   jdk-21+10_2/failures.macosx-aarch64/hs_err_pid5235.log
---------                     -------
   135043                     2 files;;;","2023-02-22 14:07;dcubed;Here's the backtrace from lldb:

(lldb) bt
warning: could not execute support code to read Objective-C class data in the process. This may reduce the quality of type information available.
* thread #22, stop reason = signal SIGSTOP
  * frame #0: 0x00000001a2a6ce28 libsystem_kernel.dylib`__pthread_kill + 8
    frame #1: 0x00000001a2a9f43c libsystem_pthread.dylib`pthread_kill + 292
    frame #2: 0x00000001a29e7454 libsystem_c.dylib`abort + 124
    frame #3: 0x0000000109dc37a0 libjvm.dylib`os::abort(dump_core=true, siginfo=0x000000016db9a290, context=0x000000016db9a2f8) at os_posix.cpp:2014:5
    frame #4: 0x000000010a0a58d0 libjvm.dylib`VMError::report_and_die(id=11, message=0x0000000000000000, detail_fmt=""%s"", detail_args=""\x9eL\U0000001a\n\U00000001"", thread=0x0000000133810a10, pc=""\taE\xb9?\U00000001"", siginfo=0x000000016db9a290, context=0x000000016db9a2f8, filename=0x0000000000000000, lineno=0, size=0) at vmError.cpp:1687:7
    frame #5: 0x000000010a0a49fc libjvm.dylib`VMError::report_and_die(thread=0x0000000133810a10, sig=11, pc=""\taE\xb9?\U00000001"", siginfo=0x000000016db9a290, context=0x000000016db9a2f8, detail_fmt=""%s"") at vmError.cpp:1339:3
    frame #6: 0x000000010a0a5974 libjvm.dylib`VMError::report_and_die(thread=0x0000000133810a10, sig=11, pc=""\taE\xb9?\U00000001"", siginfo=0x000000016db9a290, context=0x000000016db9a2f8) at vmError.cpp:1345:3
    frame #7: 0x0000000109ee0d40 libjvm.dylib`::JVM_handle_bsd_signal(sig=11, info=0x000000016db9a290, ucVoid=0x000000016db9a2f8, abort_if_unrecognized=1) at signals_posix.cpp:655:5
    frame #8: 0x0000000109ee22c0 libjvm.dylib`javaSignalHandler(sig=11, info=0x000000016db9a290, context=0x000000016db9a2f8) at signals_posix.cpp:666:9
    frame #9: 0x00000001a2aeac44 libsystem_platform.dylib`_sigtramp + 56
    frame #10: 0x0000000109b6a700 libjvm.dylib`JvmtiThreadState::is_interp_only_mode(this=0x0000000000000000) at jvmtiThreadState.hpp:241:74
    frame #11: 0x0000000109b6a700 libjvm.dylib`JvmtiThreadState::is_interp_only_mode(this=0x00000001254507c0) at jvmtiThreadState.hpp:241:74
    frame #12: 0x0000000109b6c660 libjvm.dylib`JvmtiEventControllerPrivate::recompute_thread_enabled(state=0x00000001254507c0) at jvmtiEventController.cpp:593:31
    frame #13: 0x0000000109b6c91c libjvm.dylib`JvmtiEventControllerPrivate::recompute_enabled() at jvmtiEventController.cpp:668:33
    frame #14: 0x0000000109b6df20 libjvm.dylib`JvmtiEventControllerPrivate::set_user_enabled(env=0x000000013430d670, thread=0x0000000135808e10, thread_oop_h=Handle @ 0x000000016db9a9f8, event_type=JVMTI_EVENT_SINGLE_STEP, enabled=false) at jvmtiEventController.cpp:907:3
    frame #15: 0x0000000109b6e570 libjvm.dylib`JvmtiEventController::set_user_enabled(env=0x000000013430d670, thread=0x0000000135808e10, thread_oop=0x00000007fa678b98, event_type=JVMTI_EVENT_SINGLE_STEP, enabled=false) at jvmtiEventController.cpp:1060:5
    frame #16: 0x0000000109b52588 libjvm.dylib`JvmtiEnv::SetEventNotificationMode(this=0x000000013430d670, mode=JVMTI_DISABLE, event_type=JVMTI_EVENT_SINGLE_STEP, event_thread=0x00000001254a1f48) at jvmtiEnv.cpp:603:5
    frame #17: 0x0000000109afad3c libjvm.dylib`jvmti_SetEventNotificationMode(env=0x000000013430d670, mode=JVMTI_DISABLE, event_type=JVMTI_EVENT_SINGLE_STEP, event_thread=0x00000001254a1f48) at jvmtiEnter.cpp:5321:22
    frame #18: 0x0000000104bdfb18 libGetStackTraceSuspendedStress.dylib`_jvmtiEnv::SetEventNotificationMode(this=0x000000013430d670, mode=JVMTI_DISABLE, event_type=JVMTI_EVENT_SINGLE_STEP, event_thread=0x00000001254a1f48) at jvmti.h:2522:12
    frame #19: 0x0000000104be1e50 libGetStackTraceSuspendedStress.dylib`check_vthread_consistency_suspended(jvmti=0x000000013430d670, jni=0x0000000133810d38, vthread=0x00000001254a1f48) at libGetStackTraceSuspendedStress.cpp:131:16
    frame #20: 0x0000000104be0d80 libGetStackTraceSuspendedStress.dylib`agentProc(jvmti=0x000000013430d670, jni=0x0000000133810d38, arg=0x0000000000000000) at libGetStackTraceSuspendedStress.cpp:206:9
    frame #21: 0x0000000104be145c libGetStackTraceSuspendedStress.dylib`agent_thread_wrapper(jvmti_env=0x000000013430d670, agentJNI=0x0000000133810d38, arg=0x0000000000000000) at jvmti_thread.h:179:5
    frame #22: 0x0000000109b801d8 libjvm.dylib`JvmtiAgentThread::call_start_function(this=0x0000000133810a10) at jvmtiImpl.cpp:89:5
    frame #23: 0x0000000109b8010c libjvm.dylib`JvmtiAgentThread::start_function_wrapper(thread=0x0000000133810a10, __the_thread__=0x0000000133810a10) at jvmtiImpl.cpp:83:14
    frame #24: 0x000000010990be18 libjvm.dylib`JavaThread::thread_main_inner(this=0x0000000133810a10) at javaThread.cpp:710:5
    frame #25: 0x000000010990bd04 libjvm.dylib`JavaThread::run(this=0x0000000133810a10) at javaThread.cpp:695:3
    frame #26: 0x0000000109ff82b0 libjvm.dylib`Thread::call_run(this=0x0000000133810a10) at thread.cpp:224:9
    frame #27: 0x0000000109db6ed4 libjvm.dylib`thread_native_entry(thread=0x0000000133810a10) at os_bsd.cpp:572:11
    frame #28: 0x00000001a2a9f878 libsystem_pthread.dylib`_pthread_start + 320

Here's the crashing frame and 'this' is nullptr:

(lldb) frame select 10
frame #10: 0x0000000109b6a700 libjvm.dylib`JvmtiThreadState::is_interp_only_mode(this=0x0000000000000000) at jvmtiThreadState.hpp:241:74
   238 	
   239 	  // Used by the interpreter for fullspeed debugging support
   240 	  bool is_interp_only_mode()                {
-> 241 	    return _thread == nullptr ?  _saved_interp_only_mode != 0 : _thread->is_interp_only_mode();
   242 	  }
   243 	  void enter_interp_only_mode();
   244 	  void leave_interp_only_mode();
(lldb) print this
(JvmtiThreadState *) $0 = nullptr

That's not good so let's check the previous frame:

(lldb) up
frame #11: 0x0000000109b6a700 libjvm.dylib`JvmtiThreadState::is_interp_only_mode(this=0x00000001254507c0) at jvmtiThreadState.hpp:241:74
   238 	
   239 	  // Used by the interpreter for fullspeed debugging support
   240 	  bool is_interp_only_mode()                {
-> 241 	    return _thread == nullptr ?  _saved_interp_only_mode != 0 : _thread->is_interp_only_mode();
   242 	  }
   243 	  void enter_interp_only_mode();
   244 	  void leave_interp_only_mode();
(lldb) print this
(JvmtiThreadState *) $1 = 0x00000001254507c0
(lldb) print *this
(JvmtiThreadState) $2 = {
  _thread = nullptr
  _thread_saved = 0x0000000135029410
  _thread_oop_h = {
    _obj = 0x0000000134048728
  }
  _jvmti_event_queue = nullptr
  _is_virtual = false
  _hide_single_stepping = false
  _pending_interp_only_mode = false
  _pending_step_for_popframe = false
  _pending_step_for_earlyret = false
  _hide_level = 0
  _exception_state = ES_CLEARED
  _class_being_redefined = nullptr
  _class_load_kind = jvmti_class_load_kind_load
  _classes_being_redefined = nullptr
  _cur_stack_depth = -99
  _saved_interp_only_mode = 0
  _thread_event_enable = {
    _event_enabled = (_enabled_bits = 0, _init_guard = JEE_INIT_GUARD)
  }
  _head_env_thread_state = 0x00000001254508a0
  _next = 0x0000000125450670
  _prev = 0x0000000125450910
  _dynamic_code_event_collector = nullptr
  _vm_object_alloc_event_collector = nullptr
  _sampled_object_alloc_event_collector = nullptr
  _the_class_for_redefinition_verification = nullptr
  _scratch_class_for_redefinition_verification = nullptr
  _debuggable = true
  _earlyret_state = 0
  _earlyret_tos = ilgl
  _earlyret_value = (z = '\0', b = '\0', c = 0, s = 0, i = 0, j = 0, f = 0, d = 0, l = 0x0000000000000000)
  _earlyret_oop = nullptr
}

Okay so we have a JvmtiThreadState 'this', but the _thread field is nullptr so
when we called JavaThread::is_interp_only_mode() using that _thread field
we got a nullptr 'this' value.

Let's go up another frame:

(lldb) up
frame #12: 0x0000000109b6c660 libjvm.dylib`JvmtiEventControllerPrivate::recompute_thread_enabled(state=0x00000001254507c0) at jvmtiEventController.cpp:593:31
   590 	  }
   591 	  // compute interp_only mode
   592 	  bool should_be_interp = (any_env_enabled & INTERP_EVENT_BITS) != 0 || has_frame_pops;
-> 593 	  bool is_now_interp = state->is_interp_only_mode();
   594 	
   595 	  if (should_be_interp != is_now_interp) {
   596 	    if (should_be_interp) {

Let's see the code for is_interp_only_mode():

  bool is_interp_only_mode()                {
    return _thread == nullptr ?  _saved_interp_only_mode != 0 : _thread->is_interp_only_mode();
  }

Hmm... if the _thread field is nullptr, then we're supposed to return:

    _saved_interp_only_mode != 0

but the crash stack says that we called:

_thread->is_interp_only_mode() instead and crashed with SIGSEGV.

Now I have to wonder if the JvmtiThreadState::_thread field can change
while this code is executing...

Let's try to figure out which thread we had and perhaps this value from
JvmtiThreadState will do the trick:

  _thread_saved = 0x0000000135029410

(lldb) print *(JavaThread*)state->_thread_saved
(JavaThread) $5 = {
  Thread = {
    ThreadShadow = {
      _pending_exception = nullptr
      _exception_file = 0x0000000000000000
      _exception_line = 0
    }
    _nmethod_disarmed_guard_value = 1
    _gc_data = {
      [0] = 0
      [1] = 8192
      [2] = 0
      [3] = 17433981653976477952
      [4] = 0
      [5] = 2048
      [6] = 0
      [7] = 5169760768
      [8] = 17433981653976478193
      [9] = 17433981653976478193
      [10] = 17433981653976478193
      [11] = 17433981653976478193
      [12] = 17433981653976478193
      [13] = 17433981653976478193
      [14] = 17433981653976478193
      [15] = 17433981653976478193
      [16] = 17433981653976478193
      [17] = 17433981653976478193
      [18] = 17433981653976478193
    }
    _threads_hazard_ptr = nullptr
    _threads_list_ptr = nullptr
    _nested_threads_hazard_ptr_cnt = 0
    _suspendible_thread = false
    _last_handle_mark = 0x000000016e7e29e8
    _threads_do_token = 0
    _rcu_counter = 0
    _missed_ic_stub_refill_verifier = nullptr
    _skip_gcalot = false
    _tlab = {
      _start = 0x00000007fa1ec098
      _top = 0x00000007fa1f0e10
      _pf_top = 0x00000007fa1ec0c0
      _end = 0x00000007fa1ffc00
      _allocation_end = 0x00000007fa1ffc00
      _desired_size = 60293
      _refill_waste_limit = 942
      _allocated_before_last_gc = 0
      _bytes_since_last_sample_point = 0
      _number_of_refills = 3
      _refill_waste = 261
      _gc_waste = 0
      _slow_allocations = 0
      _allocated_size = 80676
      _allocation_fraction = (_average = 0.999998033, _sample_count = 1, _weight = 35, _is_old = false, _last_sample = 0.999998033)
    }
    _allocated_bytes = 561552
    _heap_sampler = (_bytes_until_sample = 800497)
    _statistical_info = (_start_time_stamp = 1277841645146583, _define_class_count = 10)
    _jfr_thread_local = {
      _java_event_writer = nullptr
      _java_buffer = nullptr
      _native_buffer = nullptr
      _shelved_buffer = nullptr
      _load_barrier_buffer_epoch_0 = nullptr
      _load_barrier_buffer_epoch_1 = nullptr
      _checkpoint_buffer_epoch_0 = nullptr
      _checkpoint_buffer_epoch_1 = nullptr
      _stackframes = nullptr
      _dcmd_arena = nullptr
      _thread = {
        _ptr = nullptr
      }
      _vthread_id = 134
      _jvm_thread_id = 149
      _thread_id_alias = 18446744073709551615
      _data_lost = 0
      _stack_trace_id = 18446744073709551615
      _parent_trace_id = 148
      _user_time = 0
      _cpu_time = 0
      _wallclock_time = 1277841645146750
      _stack_trace_hash = 0
      _stackdepth = 0
      _entering_suspend_flag = 0
      _critical_section = 0
      _vthread_epoch = 0
      _vthread_excluded = false
      _jvm_thread_excluded = false
      _vthread = true
      _dead = false
    }
    _current_pending_raw_monitor = nullptr
    _run_state = RUN
    _unhandled_oops = 0xf1f1f1f1f1f1f1f1
    _osthread = 0x0000000134244e50
    _resource_area = 0x0000000134244060
    _current_resource_mark = nullptr
    _handle_area = 0x0000000134244510
    _metadata_handles = 0x0000000134244670
    _stack_base = 0x000000016e7e3000 ""\xdf\xc9C\x937\xbb\x85)""
    _stack_size = 2109440
    _lgrp_id = -1
    _owned_locks = nullptr
    _jvmti_env_iteration_count = 0
    _ParkEvent = 0x0000000134244900
    _hashStateW = 1851578994
    _hashStateX = 222519383
    _hashStateY = 1221354648
    _hashStateZ = 1553654197
    _wx_init = true
    _wx_state = WXWrite
  }
  _on_thread_list = true
  _threadObj = {
    _obj = 0x000000013372e260
  }
  _vthread = {
    _obj = 0x000000013372e268
  }
  _jvmti_vthread = {
    _obj = 0x000000013372e270
  }
  _scopedValueCache = {
    _obj = 0x000000013372e278
  }
  _java_call_counter = 1
  _anchor = {
    _last_Java_sp = 0x000000016e7e21f0
    _last_Java_pc = 0x000000011b818264 ""\xa8""
    _last_Java_fp = 0x0000000000000000
  }
  _entry_point = 0x0000000109a10a24 (libjvm.dylib`thread_entry(JavaThread*, JavaThread*) at jvm.cpp:2920)
  _jni_environment = {
    functions = 0x000000010a4a88c0
  }
  _deopt_mark = nullptr
  _deopt_nmethod = nullptr
  _vframe_array_head = nullptr
  _vframe_array_last = 0x0000000134a2da10
  _jvmti_deferred_updates = nullptr
  _callee_target = 0x000000015807bd40
  _vm_result = nullptr
  _vm_result_2 = nullptr
  _deferred_card_mark = {
    _start = nullptr
    _word_size = 0
  }
  _current_pending_monitor = nullptr
  _current_pending_monitor_is_from_java = true
  _current_waiting_monitor = nullptr
  _active_handles = 0x00000001340588b0
  _free_handle_block = 0x0000000134245120
  _Stalled = 0
  _monitor_chunks = nullptr
  _suspend_flags = 0
  _thread_state = _thread_blocked
  _poll_data = (_polling_word = 18446744073709551614, _polling_page = 4374495232)
  _safepoint_state = 0x0000000134244e10
  _saved_exception_pc = 0x000000011b81d770 ""\x88\xe3A\xf9\xffc(\xebH""
  _requires_cross_modify_fence = false
  _no_safepoint_count = 0
  _visited_for_critical_count = 0
  _terminated = _not_terminated
  _in_deopt_handler = 0
  _doing_unsafe_access = false
  _do_not_unlock_if_synchronized = false
  _carrier_thread_suspended = false
  _is_in_VTMS_transition = true
  _is_in_tmp_VTMS_transition = false
  _is_VTMS_transition_disabler = false
  _jni_attach_state = _not_attaching_via_jni
  _pending_deoptimization = -1
  _pending_monitorenter = false
  _pending_transfer_to_interpreter = false
  _in_retryable_allocation = false
  _pending_failed_speculation = 0
  _jvmci = (_implicit_exception_pc = 0x0000000000000000, _alternate_call_target = 0x0000000000000000)
  _libjvmci_runtime = nullptr
  _jvmci_counters = 0x0000000000000000
  _jvmci_reserved0 = 0
  _jvmci_reserved1 = 0
  _jvmci_reserved_oop0 = nullptr
  _stack_overflow_state = {
    _stack_guard_state = stack_guard_enabled
    _stack_overflow_limit = 0x000000016e5fc000 """"
    _reserved_stack_activation = 0x000000016e7e3000 ""\xdf\xc9C\x937\xbb\x85)""
    _shadow_zone_safe_limit = 0x000000016e608000 """"
    _shadow_zone_growth_watermark = 0x000000016e7defc0 """"
    _stack_base = 0x000000016e7e3000 ""\xdf\xc9C\x937\xbb\x85)""
    _stack_end = 0x000000016e5e0000 """"
  }
  _exception_oop = nullptr
  _exception_pc = 0x0000000000000000
  _exception_handler_pc = 0x0000000000000000
  _is_method_handle_return = 0
  _jni_active_critical = 0
  _pending_jni_exception_check_fn = 0x0000000000000000
  _depth_first_number = 0
  _popframe_condition = 0
  _frames_to_pop_failed_realloc = 0
  _cont_entry = 0x000000016e7e22a0
  _cont_fastpath = 0x0000000000000000
  _cont_fastpath_thread_state = 1
  _held_monitor_count = 0
  _jni_monitor_count = 0
  _stack_watermarks = {
    _head = nullptr
  }
  _handshake = {
    _handshakee = 0x0000000135029410
    _queue = {
      _first = nullptr
    }
    _lock = {
      Mutex = {
        _owner = nullptr
        _lock = {
          PlatformMutex = {
            _impl = 0x0000000134244a40
          }
          _impl = 0x0000000134244aa0
        }
        _name = 0x0000000134244af0 ""HandshakeState_lock""
        _allow_vm_block = true
        _rank = nosafepoint
        _next = nullptr
        _last_owner = 0x0000000135029410
        _skip_rank_check = false
      }
    }
    _active_handshaker = nullptr
    _async_exceptions_blocked = false
    _suspended = false
    _async_suspend_handshake = false
  }
  _popframe_preserved_args = 0x0000000000000000
  _popframe_preserved_args_size = 0
  _jvmti_thread_state = 0x00000001336aafc0
  _interp_only_mode = 0
  _should_post_on_exceptions_flag = 0
  _thread_stat = 0x0000000134244b20
  _parker = {
    PlatformParker = {
      _counter = 0
      _cur_index = -1
      _mutex = {
        [0] = (__sig = 1297437786, __opaque = char [56] @ 0x0000000166ab4980)
      }
      _cond = {
        [0] = (__sig = 1129270852, __opaque = char [40] @ 0x0000000166ab49c0)
        [1] = (__sig = 1129270852, __opaque = char [40] @ 0x0000000166ab49f0)
      }
    }
  }
  _class_to_be_initialized = nullptr
  _SleepEvent = 0x0000000134244d00
}

The JavaThread's   _jvmti_thread_state = 0x00000001336aafc0 value
matches the current JvmtiThreadState so it looks like
_thread_saved = 0x0000000135029410 is a valid JavaThread*.

That JavaThread* value also appears on the current threads list:

Threads class SMR info:
_java_thread_list=0x0000000125558250, length=22, elements={
0x0000000135808210, 0x000000013582b610, 0x000000013582e410, 0x000000013582f010,
0x000000012580ae10, 0x000000013582fc10, 0x000000012580ba10, 0x000000013500c410,
0x0000000126008210, 0x00000001348c5810, 0x00000001348d6010, 0x0000000133810a10,
0x0000000136011410, 0x0000000135028c10, 0x0000000135808e10, 0x000000012584d410,
0x0000000135830810, 0x0000000135029410, 0x0000000136011c10, 0x0000000135831010,
0x000000013582c210, 0x00000001338b8410
}

so it is a valid and protected JavaThread*.;;;","2023-02-22 14:15;dcubed;So here's the code that sets the JvmtiThreadState::_thread field:

void JvmtiThreadState::set_thread(JavaThread* thread) {
  _thread_saved = nullptr;  // Common case.
  if (!_is_virtual && thread == nullptr) {
    // Save JavaThread* if carrier thread is being detached.
    _thread_saved = _thread;
  }
  _thread = thread;
}

Based on the above code and what I found in the core file, I think the
carrier thread was detached from JavaThread* 0x0000000135029410
at the same time that the crashing code was calling:

JavaThread::is_interp_only_mode()

I don't know if asynchronous carrier thread unmounting is allowed, but
if it is, then this code is bad:

  // Used by the interpreter for fullspeed debugging support
  bool is_interp_only_mode()                {
    return _thread == nullptr ?  _saved_interp_only_mode != 0 : _thread->is_interp_only_mode();
  }

because we can see a non-nullptr value here:
    _thread == nullptr 

and then try to use then non-nullptr value here:
    _thread->is_interp_only_mode()

and crash. A better way to write this function is:

  // Used by the interpreter for fullspeed debugging support
  bool is_interp_only_mode()                {
    JavaThread* jt = _thread;
    return jt == nullptr ?  _saved_interp_only_mode != 0 : jt->is_interp_only_mode();
  };;;","2023-02-22 14:32;dcubed;It looks like is_interp_only_mode was recently changed during the
work to convert NULL -> nullptr, but the bug exists before that:

9583e3657e43    (Alan Bateman   2022-05-07 08:06:16 +0000       236)  bool is_interp_only_mode()                {
9583e3657e43    (Alan Bateman   2022-05-07 08:06:16 +0000       237)    return _thread == NULL ?  _saved_interp_only_mode != 0 : _thread->is_interp_only_mode();
9583e3657e43    (Alan Bateman   2022-05-07 08:06:16 +0000       238)  }

9583e3657e43 is the original integration of JEP-425.;;;","2023-02-22 16:29;dholmes;A racy is_interp_mode is also suspected in JDK-8302351

>  return _thread == nullptr ? _saved_interp_only_mode != 0 : _thread->is_interp_only_mode(); 

_thread should be read only once in this kind of check.;;;","2023-02-22 16:59;dcubed;[~dholmes] - please see the proposed fix at the end of this comment:
https://bugs.openjdk.org/browse/JDK-8303086?focusedCommentId=14562326&page=com.atlassian.jira.plugin.system.issuetabpanels:comment-tabpanel#comment-14562326

> _thread should be read only once in this kind of check.

That's exactly what I proposed...;;;","2023-02-22 17:48;dholmes;Sorry Dan tl;dr :);;;","2023-02-28 14:13;dcubed;Here's the logs from my jdk-21+11 stress run sighting on macosx-aarch64:

$ unzip -l jdk-21+11_macosx-aarch64.8303086.zip
Archive:  jdk-21+11_macosx-aarch64.8303086.zip
  Length      Date    Time    Name
---------  ---------- -----   ----
    23694  02-25-2023 06:00   jdk-21+11_2/failures.macosx-aarch64/GetStackTraceSuspendedStressTest.jtr.slowdebug
   110824  02-25-2023 06:00   jdk-21+11_2/failures.macosx-aarch64/hs_err_pid27685.log
---------                     -------
   134518                     2 files;;;","2023-02-28 19:34;sspitsyn;Dan, thank you for great analysis as it helps a lot!
Is this started failing in the jdk-21+10 or it was also observed earlier?

I wonder if it was a regression from this fix integration:
  https://bugs.openjdk.org/browse/JDK-8298853 :
   JvmtiVTMSTransitionDisabler should support disabling one virtual thread transitions

VTMS transitions of the target thread are supposed to be disabled because
the JVMTI code is executed in a context of JvmtiVTMSTransitionDisabler:

JvmtiEnv::SetEventNotificationMode(jvmtiEventMode mode, jvmtiEvent event_type, jthread event_thread,   ...) {
  . . . . . .
  JvmtiVTMSTransitionDisabler disabler(event_thread);      <== There is a disabler here!

  if (event_thread == nullptr) {
    . . . . . .
    JvmtiEventController::set_user_enabled(this, nullptr, (oop) nullptr, event_type, enabled);
  } else {
    // We have a specified event_thread.
    ThreadsListHandle tlh;
    . . . . . .
    JvmtiEventController::set_user_enabled(this, java_thread, thread_obj, event_type, enabled);   <== This call is executed

Your suggestion fix is good as a work around.
However, it seems, there is a bug somewhere in the implementation which would be nice to identify.

Also, I wonder if this problem was fixed with the integration of this one:
  https://bugs.openjdk.org/browse/JDK-8299240 :
   rank of JvmtiVTMSTransition_lock can be safepoint

Are there any links to these stress test runs?
;;;","2023-03-01 08:37;dcubed;> Are there any links to these stress test runs?

These stress test runs are done on machines in my lab so there are
no usable links. However, I did include zip files containing the logs and
the hs_err_pid files from the runs.

I did not see the failure in jdk-21+9 stress testing. However, I suspect that
the failure mode can be intermittent.;;;","2023-03-02 07:39;sspitsyn;Thanks, Dan.
Let's see if it is failing in the jdk main line.
I'm suspecting that this can be fixed by the https://bugs.openjdk.org/browse/JDK-8299240 .;;;","2023-03-07 12:23;dcubed;[~sspitsyn] - I think you mean a different bug. JDK-8299240 is fixed in jdk-21+11.;;;","2023-04-10 07:11;dcubed;Here's the logs from my jdk-21+17 stress run sighting on linux-x64:

$ unzip -l jdk-21+17_linux-x64.8303086.zip
Archive:  jdk-21+17_linux-x64.8303086.zip
  Length      Date    Time    Name
---------  ---------- -----   ----
    22475  2023-04-07 02:39   jdk-21+17_1/failures.linux-x86_64/GetStackTraceSuspendedStressTest.jtr.slowdebug
---------                     -------
    22475                     1 file;;;","2023-04-17 09:09;dcubed;Here's the logs from my jdk-21+18 stress run sighting on macosx-aarch64:

$ unzip -l jdk-21+18_macosx-aarch64.8303086.zip
Archive:  jdk-21+18_macosx-aarch64.8303086.zip
  Length      Date    Time    Name
---------  ---------- -----   ----
    23772  04-14-2023 00:46   jdk-21+18_1/failures.macosx-aarch64/GetStackTraceSuspendedStressTest.jtr.slowdebug
   110690  04-14-2023 00:46   jdk-21+18_1/failures.macosx-aarch64/hs_err_pid9574.log
---------                     -------
   134462                     2 files;;;","2023-04-24 08:28;dcubed;Here's the logs from my jdk-21+19 stress run sighting on macosx-aarch64:

$ unzip -l jdk-21+19_macosx-aarch64.8303086.zip
Archive:  jdk-21+19_macosx-aarch64.8303086.zip
  Length      Date    Time    Name
---------  ---------- -----   ----
    23150  04-21-2023 04:49   jdk-21+19_1/failures.macosx-aarch64/GetStackTraceSuspendedStressTest.jtr.slowdebug
   109924  04-21-2023 04:49   jdk-21+19_1/failures.macosx-aarch64/hs_err_pid18550.log
---------                     -------
   133074                     2 files;;;","2023-05-09 10:35;pchilanomate;I looked at this crash and we are indeed accessing a JvmtiThreadState while the corresponding thread is transitioning. 

In this test the SetEventNotificationMode() operation is made on a particular vthread, meaning the JvmtiVTMSTransitionDisabler only disables transitions for this vthread. But when we call recompute_enabled() we process all states. One of this states happens to be from a thread that is transitioning so we hit the issue that Dan pointed out:

- We read _thread from the JvmtiThreadState and see that is not null
- Thread goes through a mount/unmount transition where the call to rebind_to_jvmti_thread_state_of() sets _thread to null.
- We read _thread again from the JvmtiThreadState state and crash when dereferencing it.

The bug is easily reproducible just by adding a os::naked_short_sleep() call between between the first and second read of _thread.
 There is another place in method JvmtiEventControllerPrivate::recompute_thread_enabled() where it seems this crash could happen:

if (state->get_thread() != nullptr) {
      // The JavaThread for carrier or mounted virtual thread case.
      // Update the cached value for thread-specific should_post_on_exceptions value.
      bool should_post_on_exceptions = (any_env_enabled & SHOULD_POST_ON_EXCEPTIONS_BITS) != 0;
      state->set_should_post_on_exceptions(should_post_on_exceptions);
 }

where set_should_post_on_exceptions() is defined as:

inline void JvmtiThreadState::set_should_post_on_exceptions(bool val) {
  get_thread_or_saved()->set_should_post_on_exceptions_flag(val ? JNI_TRUE : JNI_FALSE);
}

But that would require the ""if (any_env_enabled != was_any_env_enabled)"" conditional to be true for other threads besides the one we actually requested the operation on. For this test that never happens. But if it is possible in other cases then we would crash there too.
;;;","2023-05-22 12:01;dcubed;Here's the logs from my jdk-21+23 stress run sighting on macosx-aarch64:

$ unzip -l jdk-21+23_macosx-aarch64.8303086.zip
Archive:  jdk-21+23_macosx-aarch64.8303086.zip
  Length      Date    Time    Name
---------  ---------- -----   ----
    23163  05-21-2023 09:16   jdk-21+23_3/failures.macosx-aarch64/GetStackTraceSuspendedStressTest.jtr.slowdebug
   111453  05-21-2023 09:16   jdk-21+23_3/failures.macosx-aarch64/hs_err_pid49648.log
---------                     -------
   134616                     2 files;;;","2023-05-22 12:04;dcubed;[~pchilanomate]'s fix for the following bug:

    JDK-8307365 JvmtiStressModule hit SIGSEGV in JvmtiEventControllerPrivate::recompute_thread_enabled

is not included in jdk-21+23, but will be included in the jdk-21+24 snapshot.
I'm wondering if the fix for JDK-8307365 will also address this bug (JDK-8303086).;;;","2023-05-22 13:15;pchilanomate;[~dcubed] Unfortunately JDK-8307365 will not fix this issue. The problem here is that calling SetEventNotificationMode() targeting a single thread will just disable mount/unmount transitions for that particular thread, but when we later call recompute_enable() we will loop over all JvmtiThreadStates. The issue with that is that in the transitions the _thread field of a JvmtiThreadState can change from non-null to null (or the other way around). So in the crashing case we read a non-null value of _thread for the JvmtiThreadState of some thread that is transitioning, but then when we try to dereference it we first read it again and now the value is null so we crash in the dereference.

This is the code where we crash:

bool is_interp_only_mode()                {
    return _thread == nullptr ?  _saved_interp_only_mode != 0 : _thread->is_interp_only_mode();
}

The crash actually depends on the compiler generating the extra load instead of using the first one. That's why we are only seeing this crash in slowdebug mode.

You can reproduce the crash easily in slowdebug mode using this patch:

diff --git a/src/hotspot/share/prims/jvmtiThreadState.hpp b/src/hotspot/share/prims/jvmtiThreadState.hpp
index 8340a44d142..6136fe08358 100644
--- a/src/hotspot/share/prims/jvmtiThreadState.hpp
+++ b/src/hotspot/share/prims/jvmtiThreadState.hpp
@@ -259,7 +259,12 @@ class JvmtiThreadState : public CHeapObj<mtInternal> {

   // Used by the interpreter for fullspeed debugging support
   bool is_interp_only_mode()                {
-    return _thread == nullptr ?  _saved_interp_only_mode != 0 : _thread->is_interp_only_mode();
+    if (_thread == nullptr) {
+      return _saved_interp_only_mode != 0;
+    } else {
+      os::naked_short_sleep(1);
+      return _thread->is_interp_only_mode();
+    }
   }
   void enter_interp_only_mode();
   void leave_interp_only_mode();;;;","2023-05-30 12:46;dcubed;Here's the logs from my jdk-21+24 stress run sighting on macosx-aarch64:

$ unzip -l jdk-21+24_macosx-aarch64.8303086.zip
Archive:  jdk-21+24_macosx-aarch64.8303086.zip
  Length      Date    Time    Name
---------  ---------- -----   ----
    23249  05-26-2023 04:46   jdk-21+24_1/failures.macosx-aarch64/GetStackTraceSuspendedStressTest.jtr.slowdebug
   111505  05-26-2023 04:46   jdk-21+24_1/failures.macosx-aarch64/hs_err_pid69175.log
---------                     -------
   134754                     2 files;;;","2023-06-02 14:22;mwthomps;ILW=MMH=P3;;;","2023-06-05 09:06;dcubed;Here's the logs from my jdk-21+25 stress run sighting on macosx-aarch64:

$ unzip -l jdk-21+25_macosx-aarch64.8303086.zip
Archive:  jdk-21+25_macosx-aarch64.8303086.zip
  Length      Date    Time    Name
---------  ---------- -----   ----
    23156  06-03-2023 05:48   jdk-21+25_2/failures.macosx-aarch64/GetStackTraceSuspendedStressTest.jtr.slowdebug
   111617  06-03-2023 05:48   jdk-21+25_2/failures.macosx-aarch64/hs_err_pid54687.log
---------                     -------
   134773                     2 files;;;","2023-06-12 09:28;dcubed;Here's the logs from my jdk-21+26 stress run sighting on macosx-aarch64:

$ unzip -l jdk-21+26_macosx-aarch64.8303086.zip
Archive:  jdk-21+26_macosx-aarch64.8303086.zip
  Length      Date    Time    Name
---------  ---------- -----   ----
    23644  06-09-2023 17:22   jdk-21+26_1/failures.macosx-aarch64/GetStackTraceSuspendedStressTest.jtr.slowdebug
   111383  06-09-2023 17:22   jdk-21+26_1/failures.macosx-aarch64/hs_err_pid55884.log
---------                     -------
   135027                     2 files;;;","2023-06-30 04:33;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/14728
Date: 2023-06-30 11:27:58 +0000;;;","2023-06-30 14:00;dukebot;Changeset: 971c2efb
Author:    Serguei Spitsyn <sspitsyn@openjdk.org>
Date:      2023-06-30 20:58:15 +0000
URL:       https://git.openjdk.org/jdk/commit/971c2efb698065c65dcf7373d8c3027f58d5f503
;;;","2023-07-05 13:17;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk21/pull/96
Date: 2023-07-05 19:33:16 +0000;;;",,,,,
G1 Heap region liveness verification has inverted return value,JDK-8303084,5094853,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,tschatzl,tschatzl,tschatzl,2023-02-22 08:28,2023-02-27 10:36,2023-10-01 09:56,2023-02-22 09:09,21,,,,,,,,21,hotspot,,0,gc-g1,,,,,,,,,,,,,,,,"The changes in JDK-8302760, specifically G1VerifyLiveAndRemSetClosure::verify_liveness() has its intended return value inverted.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8302760,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i30i2r:",9223372036854775807,b11,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6b00f96c,,,,,,,,,"2023-02-22 08:43;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/12721
Date: 2023-02-22 16:30:56 +0000;;;","2023-02-22 09:09;dukebot;Changeset: d7ada661
Author:    Thomas Schatzl <tschatzl@openjdk.org>
Date:      2023-02-22 17:08:24 +0000
URL:       https://git.openjdk.org/jdk/commit/d7ada66129a8420d696b515aad4ddc730fe7104c
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
"(bf) Remove private DirectByteBuffer(long, int) constructor before JDK 21 GA",JDK-8303083,5094852,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,bpb,bpb,bpb,2023-02-22 08:14,2023-06-06 09:24,2023-10-01 09:56,2023-02-24 11:03,21,,,,,,,,21,core-libs,,0,noreg-hard,,,,,,,,,,,,,,,,"This DirectByteBuffer(long, int) constructor was removed by the fix for JDK-8299684 but that caused problems as described in JDK-8301277 and then was reinstated by the fix for JDK-8303073. It should be removed again before the JDK 21 GA release.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8301277,JDK-8303073,,,,,,,,,,,,,,,,,,,,generic,,,,,,,,,,generic,,,,,,"0|i30i2j:",9223372036854775807,b12,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@674604a9,,,,,,,,,"2023-02-24 09:14;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/12745
Date: 2023-02-24 17:06:36 +0000;;;","2023-02-24 11:03;dukebot;Changeset: ccf3340e
Author:    Brian Burkhalter <bpb@openjdk.org>
Date:      2023-02-24 19:02:12 +0000
URL:       https://git.openjdk.org/jdk/commit/ccf3340e829b1f033bd3e662c7ce782c34f7a89b
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
[AIX] Missing C++ name demangling with XLClang++,JDK-8303082,5094851,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,tsteele,tsteele,tsteele,2023-02-22 08:03,2023-04-10 10:24,2023-10-01 09:56,2023-04-04 07:28,21,,,,,,,,21,hotspot,,0,oraclejdk-na,,,,,,,,,,,,,,,,"Created on behalf of Deepa Kumari.

Names are not demangled on AIX with the xlclang++ compiler. This is leading to the failure of SecondaryErrorTest.java.

java.lang.RuntimeException: hs-err file incomplete (first missing pattern: .VMError::controlled_crash.)
at HsErrFileUtils.checkHsErrFileContent(HsErrFileUtils.java:135)
at HsErrFileUtils.checkHsErrFileContent(HsErrFileUtils.java:71)
at SecondaryErrorTest.main(SecondaryErrorTest.java:123)
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
at java.base/java.lang.reflect.Method.invoke(Method.java:578)
at com.sun.javatest.regtest.agent.MainActionHelper$AgentVMRunnable.run(MainActionHelper.java:312)
at java.base/java.lang.Thread.run(Thread.java:1623)

JavaTest Message: Test threw exception: java.lang.RuntimeException
JavaTest Message: shutting down test

A snippet from the hs_err log file shows the un-demangled names:

[error occurred during error reporting (test secondary crash 1), id 0xb, SIGSEGV (0xb) at pc=0x08000000001e297c]
[siginfo: si_signo: 11 (SIGSEGV), si_code: 51 (SEGV_ACCERR), si_addr: 0x0000000000001400]
[stack: Native frames: (J=compiled Java code, j=interpreted, Vv=VM code, C=native code)
V  [libjvm.so+0xffffffff]  _ZN7VMError16controlled_crashEi+0x43c
V  [libjvm.so+0xffffffff]  _ZN7VMError6reportEP12outputStreamb+0x5240
V  [libjvm.so+0xffffffff]  _ZN7VMError14report_and_dieEiPKcS1_PcP6ThreadPhPvS6_S1_im+0x1dc
V  [libjvm.so+0xffffffff]  _ZN7VMError14report_and_dieEP6ThreadjPhPvS3_+0x6c
V  [libjvm.so+0xffffffff]  JVM_handle_aix_signal+0x2e8
C  0x0000000000004b90
]
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,aix,,,,,,"0|i30i2b:",9223372036854775807,b17,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,,,"2023-02-26 22:39;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/12742
Date: 2023-02-24 15:16:08 +0000;;;","2023-04-04 07:28;dukebot;Changeset: f9ed8252
Author:    Deepa Kumari <dpakri181@gmail.com>
Committer: Martin Doerr <mdoerr@openjdk.org>
Date:      2023-04-04 14:26:24 +0000
URL:       https://git.openjdk.org/jdk/commit/f9ed825266cd0c05b0495d5106279b98d40743fd
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
"(bf) Temporarily reinstate private DirectByteBuffer(long, int) constructor",JDK-8303073,5094842,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,redestad,redestad,redestad,2023-02-22 06:02,2023-03-01 22:54,2023-10-01 09:56,2023-02-23 02:32,,,,,,,,,21,core-libs,,0,,,,,,,,,,,,,,,,,"In anticipation of a proper fix in the upstream benchmark project we'd like to re-instate the DirectByteBuffer(long, int) constructor. This to enable a set of benchmarks used for regression testing of the JDK. 

Intent is to remove this constructor again before 21 GA.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8299684,JDK-8301277,JDK-8303083,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i30i0b:",9223372036854775807,b12,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@674604a9,,,,,,,,,"2023-02-22 07:08;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/12717
Date: 2023-02-22 14:30:10 +0000;;;","2023-02-23 02:32;dukebot;Changeset: 1bab93b2
Author:    Claes Redestad <redestad@openjdk.org>
Date:      2023-02-23 10:31:14 +0000
URL:       https://git.openjdk.org/jdk/commit/1bab93b2d0ca62189fee1783d8796d056353c72e
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Memory leak in exeNullCallerTest.cpp,JDK-8303072,5094841,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,jcking,jcking,jcking,2023-02-22 06:00,2023-03-01 22:55,2023-10-01 09:56,2023-02-24 07:51,,,,,,,,,21,core-libs,,0,noreg-self,,,,,,,,,,,,,,,,"Direct leak of 7 byte(s) in 1 object(s) allocated from:                                                                                                                                                                                                                                     
    #0 0x7f25b04b89cf in __interceptor_malloc ../../../../src/libsanitizer/asan/asan_malloc_linux.cpp:69                                                                                                                                                                                    
    #1 0x7f25aeaaefbf in os::malloc(unsigned long, MEMFLAGS, NativeCallStack const&) src/hotspot/share/runtime/os.cpp:654                                                                                                                                                                   
    #2 0x7f25ac61dd17 in AllocateHeap(unsigned long, MEMFLAGS, NativeCallStack const&, AllocFailStrategy::AllocFailEnum) src/hotspot/share/memory/allocation.cpp:42                                                                                                                         
    #3 0x7f25ac61dd17 in AllocateHeap(unsigned long, MEMFLAGS, AllocFailStrategy::AllocFailEnum) src/hotspot/share/memory/allocation.cpp:52                                                                                                                                                 
    #4 0x7f25ade06961 in jni_GetStringUTFChars src/hotspot/share/prims/jni.cpp:2235                                                                                                                                                                                                         
    #5 0x5590ef797c23 in JNIEnv_::GetStringUTFChars(_jstring*, unsigned char*) build/linux-x86_64-server-release/support/modules_include/java.base/jni.h:1627                                                                                                                               
    #6 0x5590ef797c23 in getBundle(JNIEnv_*) test/jdk/jni/nullCaller/exeNullCallerTest.cpp:58                                                                                                                                                                                               
    #7 0x5590ef795a4f in run test/jdk/jni/nullCaller/exeNullCallerTest.cpp:180                                                                                                                                                                                                              
    #8 0x5590ef795a4f in main test/jdk/jni/nullCaller/exeNullCallerTest.cpp:205                                                                                                                                                                                                             
    #9 0x7f25aba46189 in __libc_start_call_main ../sysdeps/nptl/libc_start_call_main.h:58",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i30i03:",9223372036854775807,b12,,,,,,,,,,,"2023-02-22 06:17;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/12715
Date: 2023-02-22 14:02:28 +0000;;;","2023-02-24 07:51;dukebot;Changeset: 83d77b1c
Author:    Justin King <jcking@openjdk.org>
Date:      2023-02-24 15:49:00 +0000
URL:       https://git.openjdk.org/jdk/commit/83d77b1cbb6d0179e9c130d51b7fada2e76e86d3
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Memory leaks in libjdwp,JDK-8303071,5094840,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,jcking,jcking,jcking,2023-02-22 05:52,2023-08-21 23:21,2023-10-01 09:56,2023-02-23 07:25,,,,,,,,,21,core-svc,,0,lsan,,,,,,,,,,,,,,,,"Direct leak of 8 byte(s) in 1 object(s) allocated from:
    #0 0x7f44214b89cf in __interceptor_malloc ../../../../src/libsanitizer/asan/asan_malloc_linux.cpp:69
    #1 0x7f441daae8d7 in os::malloc(unsigned long, MEMFLAGS, NativeCallStack const&) src/hotspot/share/runtime/os.cpp:654
    #2 0x7f441daae8d7 in os::malloc(unsigned long, MEMFLAGS) src/hotspot/share/runtime/os.cpp:622
    #3 0x7f441d330102 in JvmtiEnv::GetTopThreadGroups(int*, _jobject***) src/hotspot/share/prims/jvmtiEnv.cpp:1613
    #4 0x7f441d20f0d8 in jvmti_GetTopThreadGroups build/linux-x86_64-server-release/hotspot/variant-server/gensrc/jvmtifiles/jvmtiEnter.cpp:1094
    #5 0x7f44205ba8d4 in util_initialize src/jdk.jdwp.agent/share/native/libjdwp/util.c:236
    #6 0x7f442057a305 in initialize src/jdk.jdwp.agent/share/native/libjdwp/debugInit.c:658
    #7 0x7f442057baaf in cbEarlyVMInit src/jdk.jdwp.agent/share/native/libjdwp/debugInit.c:394
    #8 0x7f441d39af79 in JvmtiExport::post_vm_initialized() src/hotspot/share/prims/jvmtiExport.cpp:713
    #9 0x7f441e49c151 in Threads::create_vm(JavaVMInitArgs*, bool*) src/hotspot/share/runtime/threads.cpp:758
    #10 0x7f441ce4c353 in JNI_CreateJavaVM_inner src/hotspot/share/prims/jni.cpp:3588
    #11 0x7f441ce4c353 in JNI_CreateJavaVM src/hotspot/share/prims/jni.cpp:3674
    #12 0x7f4421b05e25 in InitializeJVM src/java.base/share/native/libjli/java.c:1459
    #13 0x7f4421b05e25 in JavaMain src/java.base/share/native/libjli/java.c:413
    #14 0x7f4421b0e708 in ThreadJavaMain src/java.base/unix/native/libjli/java_md.c:650
    #15 0x7f44212a7fd3 in start_thread nptl/pthread_create.c:442

Direct leak of 6 byte(s) in 1 object(s) allocated from:
    #0 0x7fdd3a8b89cf in __interceptor_malloc ../../../../src/libsanitizer/asan/asan_malloc_linux.cpp:69
    #1 0x7fdd36eae8d7 in os::malloc(unsigned long, MEMFLAGS, NativeCallStack const&) src/hotspot/share/runtime/os.cpp:654
    #2 0x7fdd36eae8d7 in os::malloc(unsigned long, MEMFLAGS) src/hotspot/share/runtime/os.cpp:622
    #3 0x7fdd367239b4 in JvmtiEnvBase::allocate(long, unsigned char**) src/hotspot/share/prims/jvmtiEnvBase.hpp:255
    #4 0x7fdd367239b4 in JvmtiEnv::Allocate(long, unsigned char**) src/hotspot/share/prims/jvmtiEnv.cpp:136
    #5 0x7fdd36652323 in jvmti_Allocate build/linux-x86_64-server-release/hotspot/variant-server/gensrc/jvmtifiles/jvmtiEnter.cpp:354
    #6 0x7fdd399b9961 in jvmtiAllocate src/jdk.jdwp.agent/share/native/libjdwp/util.c:1775
    #7 0x7fdd1c042adb in startListening src/jdk.jdwp.agent/share/native/libdt_socket/socketTransport.c:694
    #8 0x7fdd1c042adb in socketTransport_startListening src/jdk.jdwp.agent/share/native/libdt_socket/socketTransport.c:770
    #9 0x7fdd399af6cb in transport_startTransport src/jdk.jdwp.agent/share/native/libjdwp/transport.c:562
    #10 0x7fdd39978e6a in startTransport src/jdk.jdwp.agent/share/native/libjdwp/debugInit.c:522
    #11 0x7fdd39973880 in bagEnumerateOver src/jdk.jdwp.agent/share/native/libjdwp/bag.c:154
    #12 0x7fdd3997a402 in initialize src/jdk.jdwp.agent/share/native/libjdwp/debugInit.c:677
    #13 0x7fdd3997baaf in cbEarlyVMInit src/jdk.jdwp.agent/share/native/libjdwp/debugInit.c:394
    #14 0x7fdd3679af79 in JvmtiExport::post_vm_initialized() src/hotspot/share/prims/jvmtiExport.cpp:713
    #15 0x7fdd3789c151 in Threads::create_vm(JavaVMInitArgs*, bool*) src/hotspot/share/runtime/threads.cpp:758
    #16 0x7fdd3624c353 in JNI_CreateJavaVM_inner src/hotspot/share/prims/jni.cpp:3588
    #17 0x7fdd3624c353 in JNI_CreateJavaVM src/hotspot/share/prims/jni.cpp:3674
    #18 0x7fdd3aeb6e25 in InitializeJVM src/java.base/share/native/libjli/java.c:1459
    #19 0x7fdd3aeb6e25 in JavaMain src/java.base/share/native/libjli/java.c:413
    #20 0x7fdd3aebf708 in ThreadJavaMain src/java.base/unix/native/libjli/java_md.c:650
    #21 0x7fdd3a6a7fd3 in start_thread nptl/pthread_create.c:442",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i30hzv:",9223372036854775807,b12,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@3397f701,,,,,,,,,"2023-02-22 06:34;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/12716
Date: 2023-02-22 14:26:08 +0000;;;","2023-02-23 07:25;dukebot;Changeset: 2cf8b860
Author:    Justin King <jcking@openjdk.org>
Date:      2023-02-23 15:23:03 +0000
URL:       https://git.openjdk.org/jdk/commit/2cf8b8607dac961e1d63a905c6492daa54c944d5
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Memory leak in DCmdArgument<char*>::parse_value,JDK-8303070,5094839,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,dholmes,jcking,jcking,2023-02-22 05:40,2023-03-06 11:46,2023-10-01 09:56,2023-03-01 13:47,21,,,,,,,,21,hotspot,,0,dcmd,lsan,memory,,,,,,,,,,,,,,"Direct leak of 3 byte(s) in 1 object(s) allocated from:
    #0 0x7fcbd10b89cf in __interceptor_malloc ../../../../src/libsanitizer/asan/asan_malloc_linux.cpp:69
    #1 0x7fcbcd6aefbf in os::malloc(unsigned long, MEMFLAGS, NativeCallStack const&) src/hotspot/share/runtime/os.cpp:654
    #2 0x7fcbcb21dd17 in AllocateHeap(unsigned long, MEMFLAGS, NativeCallStack const&, AllocFailStrategy::AllocFailEnum) src/hotspot/share/memory/allocation.cpp:42
    #3 0x7fcbcb21dd17 in AllocateHeap(unsigned long, MEMFLAGS, AllocFailStrategy::AllocFailEnum) src/hotspot/share/memory/allocation.cpp:52
    #4 0x7fcbcbf7cf17 in DCmdArgument<char*>::parse_value(char const*, unsigned long, JavaThread*) src/hotspot/share/services/diagnosticArgument.cpp:186
    #5 0x7fcbcbf7cf17 in DCmdArgument<char*>::init_value(JavaThread*) src/hotspot/share/services/diagnosticArgument.cpp:194
    #6 0x7fcbcbfa9d92 in DCmdParser::add_dcmd_option(GenDCmdArgument*) src/hotspot/share/services/diagnosticFramework.cpp:165
    #7 0x7fcbcd4123ba in DCmdFactoryImpl<NMTDCmd>::create_resource_instance(outputStream*) const src/hotspot/share/services/diagnosticFramework.hpp:418
    #8 0x7fcbcbfad5d2 in DCmd::parse_and_execute(DCmdSource, outputStream*, char const*, char, JavaThread*) src/hotspot/share/services/diagnosticFramework.cpp:405
    #9 0x7fcbcb51604e in jcmd src/hotspot/share/services/attachListener.cpp:203
    #10 0x7fcbcb518abe in attach_listener_thread_entry src/hotspot/share/services/attachListener.cpp:427
    #11 0x7fcbcb518abe in attach_listener_thread_entry src/hotspot/share/services/attachListener.cpp:377
    #12 0x7fcbcc7b81e8 in JavaThread::thread_main_inner() src/hotspot/share/runtime/javaThread.cpp:710
    #13 0x7fcbcc7b861f in JavaThread::thread_main_inner() src/hotspot/share/runtime/javaThread.cpp:689
    #14 0x7fcbcc7b861f in JavaThread::run() src/hotspot/share/runtime/javaThread.cpp:695
    #15 0x7fcbce0639e5 in Thread::call_run() src/hotspot/share/runtime/thread.cpp:224
    #16 0x7fcbcd6c753f in thread_native_entry src/hotspot/os/linux/os_linux.cpp:740
    #17 0x7fcbd0ea7fd3 in start_thread nptl/pthread_create.c:442",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i30hzn:",9223372036854775807,b12,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,,,"2023-02-22 14:59;dholmes;I think this is more runtime than svc - anyway I have taken it.;;;","2023-02-22 21:41;dholmes;[~jcking] can you provide the java command that was used to detect this problem? Was it the actual execution of the NMTDCmd or just running e.g. `java -version`?;;;","2023-02-23 07:41;jcking;This happens during the `runtime/NMT/JcmdWithNMTDisabled.java` jtreg test.;;;","2023-02-23 07:49;jcking;I think this is because the `char*` is allocated on the heap and the DCmd is allocated on the resource area, and the destructor of the DCmd is never called?;;;","2023-02-23 13:15;dholmes;The cleanup() function is called which in turn will call destroy_value() which calls FREE_C_HEAP_ARRAY. I'm struggling to see how any leak can arise here.;;;","2023-02-23 14:11;jcking;You are right, however I think _value is being set twice leaking the first allocation. parse_value should really be using realloc.;;;","2023-02-23 14:11;jcking;Its being called once to set the default and another time to parse the argument provided.;;;","2023-02-23 15:37;dholmes;Well spotted [~jcking]! Thanks for the assist.;;;","2023-02-23 16:31;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/12737
Date: 2023-02-24 00:26:13 +0000;;;","2023-03-01 13:47;dukebot;Changeset: 6e19387f
Author:    David Holmes <dholmes@openjdk.org>
Date:      2023-03-01 21:45:11 +0000
URL:       https://git.openjdk.org/jdk/commit/6e19387f29944aa9d5c82bf0ece3abf0ca53b39c
;;;",,,,,,,,,,,,,,,,,,,,,
Memory leak in CompilerOracle::parse_from_line,JDK-8303069,5094838,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,dfenacci,jcking,jcking,2023-02-22 05:36,2023-05-04 04:04,2023-10-01 09:56,2023-03-17 06:27,17,20,21,,,,,,21,hotspot,,0,compilercontrol,jdk17u-fix-request,jdk17u-fix-yes,jdk20u-fix-request,jdk20u-fix-SQE-ok-next,jdk20u-fix-yes,lsan,noreg-hard,oracle-triage-11,oracle-triage-21,starter,,,,,,"Direct leak of 56 byte(s) in 1 object(s) allocated from:                                                                                                                                                                                                                                    
    #0 0x7f312f8b89cf in __interceptor_malloc ../../../../src/libsanitizer/asan/asan_malloc_linux.cpp:69                                                                                                                                                                                    
    #1 0x7f312beaefbf in os::malloc(unsigned long, MEMFLAGS, NativeCallStack const&) src/hotspot/share/runtime/os.cpp:654                                                                                                                                                                   
    #2 0x7f3129a1dd17 in AllocateHeap(unsigned long, MEMFLAGS, NativeCallStack const&, AllocFailStrategy::AllocFailEnum) src/hotspot/share/memory/allocation.cpp:42                                                                                                                         
    #3 0x7f3129a1dd17 in AllocateHeap(unsigned long, MEMFLAGS, AllocFailStrategy::AllocFailEnum) src/hotspot/share/memory/allocation.cpp:52                                                                                                                                                 
    #4 0x7f312a467c9e in CHeapObjBase::operator new(unsigned long, MEMFLAGS) src/hotspot/share/memory/allocation.hpp:183                                                                                                                                                                    
    #5 0x7f312a467c9e in CHeapObj<(MEMFLAGS)7>::operator new(unsigned long) src/hotspot/share/memory/allocation.hpp:237                                                                                                                                                                     
    #6 0x7f312a467c9e in TypedMethodOptionMatcher::clone() src/hotspot/share/compiler/compilerOracle.cpp:246                                                                                                                                                                                
    #7 0x7f312a46a95e in CompilerOracle::parse_from_line(char*) src/hotspot/share/compiler/compilerOracle.cpp:867                                                                                                                                                                           
    #8 0x7f312a46dec1 in CompilerOracle::parse_from_string(char const*, void (*)(char*)) src/hotspot/share/compiler/compilerOracle.cpp:989                                                                                                                                                  
    #9 0x7f312a46dec1 in compilerOracle_init() src/hotspot/share/compiler/compilerOracle.cpp:993                                                                                                                                                                                            
    #10 0x7f312ae59bd8 in init_globals() src/hotspot/share/runtime/init.cpp:156                                                                                                                                                                                                             
    #11 0x7f312c89b1b7 in Threads::create_vm(JavaVMInitArgs*, bool*) src/hotspot/share/runtime/threads.cpp:568                                                                                                                                                                              
    #12 0x7f312b24c353 in JNI_CreateJavaVM_inner src/hotspot/share/prims/jni.cpp:3588                                                                                                                                                                                                       
    #13 0x7f312b24c353 in JNI_CreateJavaVM src/hotspot/share/prims/jni.cpp:3674                                                                                                                                                                                                             
    #14 0x7f312f7bfe25 in InitializeJVM src/java.base/share/native/libjli/java.c:1459                                                                                                                                                                                                       
    #15 0x7f312f7bfe25 in JavaMain src/java.base/share/native/libjli/java.c:413                                                                                                                                                                                                             
    #16 0x7f312f7c8708 in ThreadJavaMain src/java.base/unix/native/libjli/java_md.c:650                                                                                                                                                                                                     
    #17 0x7f312f65afd3 in start_thread nptl/pthread_create.c:442",,,,,,,,,,,JDK-8306170,JDK-8307041,JDK-8305849,JDK-8305133,JDK-8307439,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8259316,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i30hzf:",9223372036854775807,b15,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2023-02-23 00:29;thartmann;I quickly had a look at the code and I'm not sure if there is really a leak. While parsing the CompileCommand, a TypedMethodOptionMatcher is cloned and added to a linked list in register_command. That list is live and reachable via the option_list field during the entire lifetime of the VM.

ILW = Potential (benign) memory leak when parsing CompileCommands, with CompileCommands, no workaround = MLH = P4;;;","2023-02-23 00:30;thartmann;[~jcking], do you know why lsan thinks that there is a leak? Maybe I'm missing something.;;;","2023-02-23 00:34;thartmann;Ah, maybe it's when there's a parse error and we bail out. In that case, the VM will only print a warning and not exit.;;;","2023-02-23 07:30;jcking;FYI It is reported during the test `compiler/blackhole/BlackholeExperimentalUnlockTest.java`. Based on the stderr `OpenJDK 64-Bit Server VM warning: Blackhole compile option is experimental and must be enabled via -XX:+UnlockExperimentalVMOptions` I think you are correct in that there is an error and it leaks the memory.;;;","2023-03-16 00:21;dfenacci;The issue is indeed due to the blackhole compile command without enabling UnlockExperimentalVMOptions. We bail out but never delete the option and don't add it to the list (register_command in compilerOracle.cpp:312);;;","2023-03-16 08:38;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/13060
Date: 2023-03-16 14:08:13 +0000;;;","2023-03-17 06:27;dukebot;Changeset: 384a8b85
Author:    Damon Fenacci <damon.fenacci@oracle.com>
Committer: Tobias Hartmann <thartmann@openjdk.org>
Date:      2023-03-17 13:24:55 +0000
URL:       https://git.openjdk.org/jdk/commit/384a8b85a7266b920242ea73baf578577ca588ec
;;;","2023-04-04 06:26;thartmann;Fix Request (JDK 20u)
Fixes a memory leak. The fix is low risk, was already backported to Oracle JDK 17u and tested in the JDK 21 and 17u CIs. The backport applies cleanly.;;;","2023-04-04 06:36;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk20u/pull/48
Date: 2023-04-04 13:26:20 +0000;;;","2023-04-28 04:24;goetz;Fix request [17u]

I backport this for parity with 17.0.8-oracle.
Low risk, trivial change.
Clean backport.
SAP nightly testing passed.;;;","2023-04-28 04:36;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/1310
Date: 2023-04-28 11:29:43 +0000;;;",,,,,,,,,,,,,,,,,,,,
Memory leak in DwarfFile::LineNumberProgram::run_line_number_program,JDK-8303068,5094837,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,dholmes,jcking,jcking,2023-02-22 05:34,2023-03-06 11:42,2023-10-01 09:56,2023-02-27 13:40,20,,,,,,,,21,hotspot,,0,lsan,,,,,,,,,,,,,,,,"Direct leak of 144 byte(s) in 3 object(s) allocated from:
    #0 0x7f25b6cb89cf in __interceptor_malloc ../../../../src/libsanitizer/asan/asan_malloc_linux.cpp:69
    #1 0x7f25b32aefbf in os::malloc(unsigned long, MEMFLAGS, NativeCallStack const&) src/hotspot/share/runtime/os.cpp:654
    #2 0x7f25b0e1dd17 in AllocateHeap(unsigned long, MEMFLAGS, NativeCallStack const&, AllocFailStrategy::AllocFailEnum) src/hotspot/share/memory/allocation.cpp:42
    #3 0x7f25b0e1dd17 in AllocateHeap(unsigned long, MEMFLAGS, AllocFailStrategy::AllocFailEnum) src/hotspot/share/memory/allocation.cpp:52
    #4 0x7f25b1c2e83e in CHeapObjBase::operator new(unsigned long, MEMFLAGS, std::nothrow_t const&) src/hotspot/share/memory/allocation.hpp:202
    #5 0x7f25b1c2e83e in CHeapObj<(MEMFLAGS)9>::operator new(unsigned long, std::nothrow_t const&) src/hotspot/share/memory/allocation.hpp:251 
    #6 0x7f25b1c2e83e in DwarfFile::LineNumberProgram::run_line_number_program(char*, unsigned long, int*) src/hotspot/share/utilities/elfFile.cpp:1304
    #7 0x7f25b1c3003c in DwarfFile::LineNumberProgram::find_filename_and_line_number(char*, unsigned long, int*) src/hotspot/share/utilities/elfFile.cpp:1150
    #8 0x7f25b1c3003c in DwarfFile::get_filename_and_line_number(unsigned int, char*, unsigned long, int*, bool) src/hotspot/share/utilities/elfFile.cpp:704
    #9 0x7f25b1c303dc in ElfFile::get_source_info(unsigned int, char*, unsigned long, int*, bool) src/hotspot/share/utilities/elfFile.cpp:369
    #10 0x7f25b192f5ec in ElfDecoder::get_source_info(unsigned char*, char*, unsigned long, int*, bool) src/hotspot/share/utilities/decoder_elf.cpp:90
    #11 0x7f25b192eb60 in Decoder::get_source_info(unsigned char*, char*, unsigned long, int*, bool) src/hotspot/share/utilities/decoder.cpp:121
    #12 0x7f25b3e64d0b in VMError::print_native_stack(outputStream*, frame, Thread*, bool, int, char*, int) src/hotspot/share/utilities/vmError.cpp:366
    #13 0x7f25b23c63bc in JavaThread::print_jni_stack() src/hotspot/share/runtime/javaThread.cpp:1690
    #14 0x7f25b266665c in check_pending_exception src/hotspot/share/prims/jniCheck.cpp:193
    #15 0x7f25b266665c in check_pending_exception src/hotspot/share/prims/jniCheck.cpp:188
    #16 0x7f25b266665c in functionEnter src/hotspot/share/prims/jniCheck.cpp:219
    #17 0x7f25b267088c in checked_jni_CallStaticObjectMethod src/hotspot/share/prims/jniCheck.cpp:1290
    #18 0x7f25b620265c in thread_start test/hotspot/jtreg/runtime/jni/nativeStack/libnativeStack.c:79
    #19 0x7f25b6aa7fd3 in start_thread nptl/pthread_create.c:442",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8242181,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i30hz7:",9223372036854775807,b12,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,,,"2023-02-23 20:53;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/12738
Date: 2023-02-24 04:48:53 +0000;;;","2023-02-27 13:40;dukebot;Changeset: f7f10367
Author:    David Holmes <dholmes@openjdk.org>
Date:      2023-02-27 21:38:12 +0000
URL:       https://git.openjdk.org/jdk/commit/f7f10367b2169f9e10f79b430acb450aabb5dcb6
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Improve support for Unicode characters and digits in JavaDoc search,JDK-8303056,5094824,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,hannesw,hannesw,hannesw,2023-02-22 03:18,2023-08-14 11:56,2023-10-01 09:56,2023-08-09 02:51,20,,,,,,,,22,tools,,0,,,,,,,,,,,,,,,,,"There are a few problems in JavaDoc search related to Unicode (non-ASCII) letters and digits. 

 - Unicode (non-ASCII) letters confuse the word boundary algorithm and are findable when they occur in the middle or at the end of a word.
 - Unicode (non-ASCII) letters break the camel-case detection when they immediately follow an upper-case letter in a camel-case signature.
 - (Groups of) digits are not recognized as words by the search algorithm unless they follow a separator or non-letter character. 

Some of these issues are implementation bugs, but the JavaDoc search specification should be updated to be more explicit about how these cases are handled. There are also other areas where the search spec could use an update, for instance there are JavaDoc tags other than `{@index}` which create search items and should be mentioned/referred to in the spec.",,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8306303,,,,,,,,,,,,,,,,,,,,,,,,,,,,,generic,,,,,,,,,,generic,,,,,,"0|i30hwb:",9223372036854775807,b10,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@7900061a,,,,,,,,,"2023-04-27 05:54;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/13690
Date: 2023-04-27 12:50:07 +0000;;;","2023-08-09 02:51;dukebot;Changeset: 52ec4bcb
Author:    Hannes Wallnöfer <hannesw@openjdk.org>
Date:      2023-08-09 09:50:21 +0000
URL:       https://git.openjdk.org/jdk/commit/52ec4bcb1bab15dbf0a9b2488d33a23cdc1cb0e1
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
avoid NULL after 8301661,JDK-8303047,5094814,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,mbaesken,mbaesken,mbaesken,2023-02-22 00:30,2023-07-03 00:05,2023-10-01 09:56,2023-02-23 00:10,21,,,,,,,,21,hotspot,,0,jdk17u-fix-request,jdk17u-fix-yes,,,,,,,,,,,,,,,8301661 introduced a few usages of NULL in os_bsd.cpp and os_windows.cpp. This should be avoided  and replaced by nullptr .,,,,,,,,,,,JDK-8311229,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8301661,,,,,,,,,,,,,,,,generic,,,,,,,,,,generic,,,,,,"0|i30hu3:",9223372036854775807,b12,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,,,"2023-02-22 00:55;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/12709
Date: 2023-02-22 08:46:51 +0000;;;","2023-02-23 00:10;dukebot;Changeset: 221f3463
Author:    Matthias Baesken <mbaesken@openjdk.org>
Date:      2023-02-23 08:08:25 +0000
URL:       https://git.openjdk.org/jdk/commit/221f34634de58d339f6cf7b08b2520fb748fff82
;;;","2023-06-30 05:56;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/1524
Date: 2023-06-30 12:50:41 +0000;;;","2023-06-30 06:05;mbaesken;jdk17 backport request
I would like to have the patch in jdk17u-dev as well, to keep the sources closer to head and help future backports with less diffs (8301661 has been backported already).  The patch is clean and low risk.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,
Remove RegionNode::LoopStatus::NeverIrreducibleEntry assert with wrong assumption,JDK-8303045,5094812,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,epeter,djelinski,djelinski,2023-02-21 23:27,2023-03-28 01:11,2023-10-01 09:56,2023-02-26 23:17,21,,,,,,,,21,hotspot,,0,c2,intermittent,irreducibility,oracle-triage-11,oracle-triage-17,oracle-triage-21,regression,,,,,,,,,,"Happened once in a personal job.

# A fatal error has been detected by the Java Runtime Environment:
#
#  Internal Error (c:\\sb\\prod\\1676563492\\workspace\\open\\src\\hotspot\\share\\opto\\cfgnode.cpp:439), pid=20508, tid=18308
#  assert(status != RegionNode::LoopStatus::NeverIrreducibleEntry) failed: do not set this
#
# JRE version: Java(TM) SE Runtime Environment (21.0) (fastdebug build 21-internal-LTS-2023-02-16-1602470.daniel.jelinski.jdk)
# Java VM: Java HotSpot(TM) 64-Bit Server VM (fastdebug 21-internal-LTS-2023-02-16-1602470.daniel.jelinski.jdk, mixed mode, sharing, tiered, compressed oops, compressed class ptrs, g1 gc, windows-amd64)

From hs_err*.log:

---------------  T H R E A D  ---------------

Current thread (0x000001ebe8093700):  JavaThread ""C2 CompilerThread0"" daemon [_thread_in_native, id=18308, stack(0x00000079d3100000,0x00000079d3200000)]


Current CompileTask:
C2:  17281 4480 % !   4       DigestEchoServer$HttpsProxyTunnel$1::run @ 2 (164 bytes)

Stack: [0x00000079d3100000,0x00000079d3200000]
Native frames: (J=compiled Java code, j=interpreted, Vv=VM code, C=native code)
V  [jvm.dll+0xbf8011]  os::win32::platform_print_native_stack+0xf1  (os_windows_x86.cpp:236)
V  [jvm.dll+0xe701b0]  VMError::report+0x10c0  (vmError.cpp:813)
V  [jvm.dll+0xe71dee]  VMError::report_and_die+0x6ce  (vmError.cpp:1593)
V  [jvm.dll+0xe72534]  VMError::report_and_die+0x64  (vmError.cpp:1352)
V  [jvm.dll+0x577307]  report_vm_error+0xb7  (debug.cpp:286)
V  [jvm.dll+0x457efb]  RegionNode::set_loop_status+0x3b  (cfgnode.cpp:439)
V  [jvm.dll+0xaa56c6]  IdealLoopTree::split_fall_in+0x156  (loopnode.cpp:3148)
V  [jvm.dll+0xa8cec6]  IdealLoopTree::beautify_loops+0xf6  (loopnode.cpp:3441)
V  [jvm.dll+0xa8d6b2]  IdealLoopTree::beautify_loops+0x8e2  (loopnode.cpp:3505)
V  [jvm.dll+0xa8dbbb]  PhaseIdealLoop::build_and_optimize+0x4db  (loopnode.cpp:4335)
V  [jvm.dll+0x519018]  PhaseIdealLoop::optimize+0xd8  (loopnode.hpp:1192)
V  [jvm.dll+0x50c0a2]  Compile::Optimize+0x972  (compile.cpp:2292)
V  [jvm.dll+0x50969b]  Compile::Compile+0x16bb  (compile.cpp:834)
V  [jvm.dll+0x427665]  C2Compiler::compile_method+0x145  (c2compiler.cpp:116)
V  [jvm.dll+0x523b99]  CompileBroker::invoke_compiler_on_method+0x849  (compileBroker.cpp:2240)
V  [jvm.dll+0x52130d]  CompileBroker::compiler_thread_loop+0x23d  (compileBroker.cpp:1917)
V  [jvm.dll+0x7ef322]  JavaThread::thread_main_inner+0x282  (javaThread.cpp:711)
V  [jvm.dll+0xde5833]  Thread::call_run+0x253  (thread.cpp:229)
V  [jvm.dll+0xbf6948]  os::win32::thread_native_entry+0xb8  (os_windows.cpp:550)
C  [ucrtbase.dll+0x21bb2]
C  [KERNEL32.DLL+0x174b4]
C  [ntdll.dll+0x526a1]

",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8280126,,,,"2023-02-22 04:44;epeter;Test.jasm;https://bugs.openjdk.org/secure/attachment/102753/Test.jasm","2023-02-22 04:44;epeter;TestMain.java;https://bugs.openjdk.org/secure/attachment/102754/TestMain.java","2023-02-21 23:30;djelinski;test-support_jtreg_open_test_jdk_jdk_net_java_net_httpclient_HttpRedirectTest_replay_pid20508.log;https://bugs.openjdk.org/secure/attachment/102746/test-support_jtreg_open_test_jdk_jdk_net_java_net_httpclient_HttpRedirectTest_replay_pid20508.log",,,,,,,,,,,,,,,,,,21,,,,,,,,"0|i30htn:",9223372036854775807,b12,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2023-02-22 02:33;thartmann;The assert and corresponding logic was added by JDK-8280126 in JDK 21.;;;","2023-02-22 02:39;thartmann;Initial ILW = (Potentially harmless) assert during C2 compilation, only showed up once with single test, no known workaround but disable compilation of affected method = MLH = P4;;;","2023-02-22 02:39;thartmann;Emanuel, please have a look.;;;","2023-02-22 02:41;epeter;Ok, I can have a look.;;;","2023-02-22 03:57;epeter;Quick analysis:

This is part of the stacktrace:
V  [jvm.dll+0x577307]  report_vm_error+0xb7  (debug.cpp:286)
V  [jvm.dll+0x457efb]  RegionNode::set_loop_status+0x3b  (cfgnode.cpp:439)
V  [jvm.dll+0xaa56c6]  IdealLoopTree::split_fall_in+0x156  (loopnode.cpp:3148)

In IdealLoopTree::split_fall_in we call RegionNode::set_loop_status. We want to transfer the loop-status of the old loop header to the new landing_pad. But set_loop_status has an assert that we do not set the default value NeverIrreducibleEntry.

I think I should be able to create an example that triggers this, maybe in this way:
Loop must be in a inlined method. Then, by default the regions are tagged with NeverIrreducibleEntry (we cannot know if the inlined method sits inside only reducible loops or also inside an irreducible loop). Then, we must make sure that in the inlined method we have a loop that triggers split_fall_in. So we need a loop with multiple fall-in (entry) edges to the same loop-head.

If that is correct, I think we can just remove or at least somehow weaken the assert.;;;","2023-02-22 04:45;epeter;Update: I was able to construct a reproducer for the assert from other tests, basically as outlined above.

java -jar ~/Documents/asmtools-7.0-build/release/lib/asmtools.jar jasm Test.jasm
javac TestMain.java
./java -Xbatch -XX:CompileCommand=compileonly,Test*::test* -XX:CompileCommand=printcompilation,Test*::test* -XX:+PrintInlining -XX:PerMethodTrapLimit=0 TestMain

I get this (for debugging, I print the _head and landing_pad before we call set_loop_status):

CompileCommand: compileonly Test*.test* bool compileonly = true
CompileCommand: PrintCompilation Test*.test* bool PrintCompilation = true
    782   27    b  3       TestMain::test_outer (7 bytes)
                              @ 3   Test::test_inner (45 bytes)   callee is too large
    784   28    b  3       Test::test_inner (45 bytes)
    786   29    b  4       Test::test_inner (45 bytes)
split_fall_in
  69  Region  === 69 58 98 54  [[ 69 76 80 ]] #reducible  !jvms: Test::test_inner @ bci:23
 118  Region  === 118 _ _  [[ 118 ]] 
    788   30    b  4       TestMain::test_outer (7 bytes)
split_fall_in
  78  Region  === 78 67 107 63  [[ 78 85 89 ]]  !jvms: Test::test_inner @ bci:23 TestMain::test_outer @ bci:3 (line 32)
 128  Region  === 128 _ _  [[ 128 ]] 
#
# A fatal error has been detected by the Java Runtime Environment:
#
#  Internal Error (/home/emanuel/Documents/fork2-jdk/open/src/hotspot/share/opto/cfgnode.cpp:439), pid=691014, tid=691029
#  assert(status != RegionNode::LoopStatus::NeverIrreducibleEntry) failed: do not set this
#
.....;;;","2023-02-22 06:59;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/12713
Date: 2023-02-22 13:35:35 +0000;;;","2023-02-26 23:17;dukebot;Changeset: d2660a69
Author:    Emanuel Peter <epeter@openjdk.org>
Date:      2023-02-27 07:15:27 +0000
URL:       https://git.openjdk.org/jdk/commit/d2660a6915582d059d456f1ae8c78831b15f0ef2
;;;",,,,,,,,,,,,,,,,,,,,,,,
Build failure with the micro bench mark,JDK-8303033,5094772,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,naoto,naoto,naoto,2023-02-21 13:29,2023-02-22 23:19,2023-10-01 09:56,2023-02-21 13:42,,,,,,,,,21,core-libs,,0,,,,,,,,,,,,,,,,,"The testcase change is failing to compile:

```
open/test/micro/org/openjdk/bench/java/lang/Characters.java:115: error: case, default, or '}' expected
```",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8302877,,,,,,,,,,,,,,,,generic,,,,,,,,,,generic,,,,,,"0|i30hkr:",9223372036854775807,b11,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4c088d55,,,,,,,,,"2023-02-21 13:36;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/12701
Date: 2023-02-21 21:27:08 +0000;;;","2023-02-21 13:41;dukebot;Changeset: e950b954
Author:    Eirik Bjorsnos <eirbjo@gmail.com>
Committer: Naoto Sato <naoto@openjdk.org>
Date:      2023-02-21 21:39:35 +0000
URL:       https://git.openjdk.org/jdk/commit/e950b95486d468bbad758d5ba0e5a36445b4cc3c
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
[Lilliput/JDK17] Correctly resolve forwarded objects in G1 heap iteration,JDK-8303027,5094766,Bug,Resolved,JDK,JDK,software,duke,,,P2,Fixed,rkennke,rkennke,rkennke,2023-02-21 11:44,2023-02-23 11:22,2023-10-01 09:56,2023-02-23 11:22,repo-lilliput,,,,,,,,repo-lilliput,hotspot,,0,lilliput,,,,,,,,,,,,,,,,"A user provided a (pretty simple) test case that makes the VM crash with Lilliput, when it should exit (somewhat more) gracefully with an OOME. The reason for the crash is that in G1, object_iterate() (or rather, the block_size() method that it calls) does not correctly resolve possibly forwarded objects, and then crashes because it accesses the Klass*, which is overridden by the forwarding pointer.

The trouble is that, we don't need (or even can't) resolve forwarded objects during full-GC, because there we are using sliding-forwarding which is designed precisely to preserve the object's Klass* while being forwarded. Outside of full-GC we don't need to preserve the Klass* because the Klass* is preserved in the forwarded copy.

This bug only exists in Lilliput/JDK17, the code path that leads to object_iterate() (restoring self-forwarded objects at evac failure) doesn't exist anymore in later versions - it uses a better way to iterate over the relevant self-forwarded objects.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,generic,,,,,,,,,,generic,,,,,,"0|i30hjf:",9223372036854775807,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6b00f96c,,,,,,,,,"2023-02-21 12:10;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/lilliput-jdk17u/pull/6
Date: 2023-02-21 20:02:08 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
[TextField] IOOBE on setting text with control characters that replaces existing text,JDK-8303026,5094765,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,jpereda,jpereda,jpereda,2023-02-21 11:39,2023-03-14 05:40,2023-10-01 09:56,2023-03-02 07:52,jfx15,,,,,,,,jfx21,javafx,,0,regression,regression_8176270,,,,,,,,,,,,,,,"Related to the fixed issue JDK-8212102, when setting directly text with control characters an IOOBE is thrown.

Running the attached test causes:

Exception in thread ""JavaFX Application Thread"" java.lang.StringIndexOutOfBoundsException: begin 8, end 8, length 0
        at java.base/java.lang.String.checkBoundsBeginEnd(String.java:4601)
        at java.base/java.lang.String.substring(String.java:2704)
        at javafx.controls@21-ea/javafx.scene.control.TextInputControl.updateSelectedText(TextInputControl.java:184)
        at javafx.controls@21-ea/javafx.scene.control.TextInputControl.replaceText(TextInputControl.java:1272)
        at javafx.controls@21-ea/javafx.scene.control.TextInputControl.filterAndSet(TextInputControl.java:1228)
        at javafx.controls@21-ea/javafx.scene.control.TextInputControl$TextProperty.doSet(TextInputControl.java:1479)
        at javafx.controls@21-ea/javafx.scene.control.TextInputControl$TextProperty.set(TextInputControl.java:1392)
        at javafx.controls@21-ea/javafx.scene.control.TextInputControl.setText(TextInputControl.java:360)

The issue can be reproduced when:
- the new text consist only of control characters like ""\n"" or ""\t\n"",
- and the existing text has a length greater than the new text.

The same workaround provided in JDK-8212102 (use of a TextFormatter) prevents the issue.

JavaFX versions 11.0.2 to 11.0.18, 12 until 15-ea-7, work fine.

JavaFX versions 15-ea-8 to 15, 16, 17 to 17.0.6, 18, 19, 20-ea, 21-ea, head, fail.

So it seems the fix for the issue JDK-8176270 caused a regression (that is when TextInputControl::updateSelectedText was added), probably by removing these lines in https://github.com/effad/jfx/blob/master/modules/javafx.controls/src/main/java/javafx/scene/control/TextInputControl.java#L183:

    int start = sel.getStart();
    int end = sel.getEnd();
-    int length = txt.length();
-    if (end > start + length) end = length;
-    if (start > length-1) start = end = 0;
    selectedText.set(txt.substring(start, end));

Bringing them back seems to solve the issue.",,,,,,,,,,,JDK-8304068,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8176270,,,,"2023-02-21 11:17;jpereda;TextFieldBug.java;https://bugs.openjdk.org/secure/attachment/102743/TextFieldBug.java",,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i30hj7:",9223372036854775807,b07,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@67282485,,,,,,,,,"2023-02-21 12:37;angorya;I wonder if setting a multi-line text is a legal operation for a TextField.  The semantics of this control supports a single line of text.
Should the method throw an exception or silently discard the offending characters?  And what are the offending characters beside \n?
Tab \t should be accepted, but anything else < 0x20 probably should not, example: \b, \f, \r, BEL, etc.;;;","2023-02-21 12:39;angorya;JTextField seems to discard newlines, I think it should be the preferred behavior.

edit: and it is, the TextField discards the unwanted characters.;;;","2023-02-21 13:28;jpereda;The test fails with ""\t"" instead of ""\n"" as well, so this is not about what control characters should be allowed or not.
It was working fine, filtering out these control characters, up until 15-ea+7, so I believe there is no need to add code for this. 
Restoring the lines I mentioned seems enough.;;;","2023-02-21 13:40;kcr;[~jpereda] Do you want to take this bug? If so, go ahead and assign it to yourself.;;;","2023-02-21 14:49;jpereda;Yes, I'll take it.;;;","2023-02-21 15:53;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jfx/pull/1043
Date: 2023-02-21 23:11:52 +0000;;;","2023-03-02 07:52;dukebot;Changeset: 9df6039a
Author:    Jose Pereda <jpereda@openjdk.org>
Date:      2023-03-02 15:51:13 +0000
URL:       https://git.openjdk.org/jfx/commit/9df6039a27a78f40a929b5ba4de0e38ce233a6fc
;;;","2023-03-12 11:19;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jfx17u/pull/117
Date: 2023-03-12 18:13:20 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,
"""assert(allocates2(pc)) failed: not in CodeBuffer memory"" When linking downcall handle",JDK-8303022,5094760,Bug,Closed,JDK,JDK,software,duke,,,P2,Fixed,jvernee,jvernee,jvernee,2023-02-21 10:11,2023-07-24 11:04,2023-10-01 09:56,2023-03-15 16:45,21,repo-panama,,,,,,,21,core-libs,,0,foreign-memaccess+abi,,,,,,,,,,,,,,,,"When linking the following function (generated by fuzzer):

EXPORT struct S6 F84(struct S6 (*cb)(void*, short, long long, int, short, struct S5, long long, char, double, char,
                                     float, char, void*, char, struct S6, union U3, double, int, double, char, union U5,
                                     int),
        void* a0, short a1, long long a2, int a3, short a4, struct S5 a5, long long a6, char a7, double a8, char a9,
        float a10, char a11, void* a12, char a13, struct S6 a14, union U3 a15, double a16, int a17, double a18,
        char a19, union U5 a20, int a21){
    return cb(a0, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21);
}

(see also attached diff)

We hit an assert:

#
# A fatal error has been detected by the Java Runtime Environment:
#
#  Internal Error (src/hotspot/share/asm/codeBuffer.hpp:194), pid=19794, tid=19819
#  assert(allocates2(pc)) failed: not in CodeBuffer memory: 0x00007f356843cc80 <= 0x00007f356843d112 <= 0x00007f356843d110
#
# JRE version: OpenJDK Runtime Environment (21.0) (fastdebug build 21-internal-adhoc.jorn.foreign-abi)
# Java VM: OpenJDK 64-Bit Server VM (fastdebug 21-internal-adhoc.jorn.foreign-abi, mixed mode, sharing, tiered, compressed oops, compressed class ptrs, g1 gc, linux-amd64)
# Problematic frame:
# V  [libjvm.so+0x770b3b]  CodeSection::set_end(unsigned char*)+0x5b
#
# Core dump will be written. Default location: core.19794 (may not exist)
#

With the following stack track:

Stack: [0x00007f35510f0000,0x00007f35511f0000],  sp=0x00007f35511ebcd8,  free space=1007k
Native frames: (J=compiled Java code, j=interpreted, Vv=VM code, C=native code)
V  [libjvm.so+0x770b3b]  CodeSection::set_end(unsigned char*)+0x5b  (codeBuffer.hpp:194)
V  [libjvm.so+0x6d7303]  Assembler::emit_operand_helper(int, int, int, Address::ScaleFactor, int, RelocationHolder const&, int)+0x4a3  (codeBuffer.hpp:226)
V  [libjvm.so+0x6d8535]  Assembler::emit_operand(Register, Register, Register, Address::ScaleFactor, int, RelocationHolder const&, int) [clone .constprop.5]+0x65  (assembler_x86.cpp:713)
V  [libjvm.so+0x767ad2]  Assembler::movq(Address, Register)+0x142  (assembler_x86.cpp:1259)
V  [libjvm.so+0x1572889]  MacroAssembler::movptr(Address, Register)+0x69  (macroAssembler_x86.cpp:2582)
V  [libjvm.so+0xda0949]  RegSpiller::pd_store_reg(MacroAssembler*, int, VMStorage)+0x89  (foreignGlobals_x86_64.cpp:85)
V  [libjvm.so+0xd9da19]  RegSpiller::generate(MacroAssembler*, int, bool) const+0x89  (foreignGlobals.cpp:108)
V  [libjvm.so+0xd2c83b]  DowncallStubGenerator::generate()+0x18bb  (foreignGlobals.hpp:108)
V  [libjvm.so+0xd2cbbf]  DowncallLinker::make_downcall_stub(BasicType*, int, BasicType, ABIDescriptor const&, GrowableArray<VMStorage> const&, GrowableArray<VMStorage> const&, bool, int, bool)+0x2cf  (downcallLinker_x86_64.cpp:112)
V  [libjvm.so+0x16dedff]  NEP_makeDowncallStub+0x7df  (nativeEntryPoint.cpp:79)
j  jdk.internal.foreign.abi.NativeEntryPoint.makeDowncallStub(Ljava/lang/invoke/MethodType;Ljdk/internal/foreign/abi/ABIDescriptor;[Ljdk/internal/foreign/abi/VMStorage;[Ljdk/internal/foreign/abi/VMStorage;ZIZ)J+0 java.base@21-internal
j  jdk.internal.foreign.abi.NativeEntryPoint.lambda$make$1(Ljava/lang/invoke/MethodType;Ljdk/internal/foreign/abi/ABIDescriptor;[Ljdk/internal/foreign/abi/VMStorage;[Ljdk/internal/foreign/abi/VMStorage;ZIZLjdk/internal/foreign/abi/NativeEntryPoint$CacheKey;)Ljdk/internal/foreign/abi/NativeEntryPoint;+10 java.base@21-internal
j  jdk.internal.foreign.abi.NativeEntryPoint$$Lambda$101+0x000000080103a310.apply(Ljava/lang/Object;)Ljava/lang/Object;+32 java.base@21-internal
j  jdk.internal.foreign.abi.SoftReferenceCache$Node.get(Ljava/lang/Object;Ljava/util/function/Function;)Ljava/lang/Object;+45 java.base@21-internal
j  jdk.internal.foreign.abi.SoftReferenceCache.get(Ljava/lang/Object;Ljava/util/function/Function;)Ljava/lang/Object;+21 java.base@21-internal
j  jdk.internal.foreign.abi.NativeEntryPoint.make(Ljdk/internal/foreign/abi/ABIDescriptor;[Ljdk/internal/foreign/abi/VMStorage;[Ljdk/internal/foreign/abi/VMStorage;Ljava/lang/invoke/MethodType;ZIZ)Ljdk/internal/foreign/abi/NativeEntryPoint;+79 java.base@21-internal
j  jdk.internal.foreign.abi.DowncallLinker.getBoundMethodHandle()Ljava/lang/invoke/MethodHandle;+75 java.base@21-internal
j  jdk.internal.foreign.abi.x64.sysv.CallArranger.arrangeDowncall(Ljava/lang/invoke/MethodType;Ljava/lang/foreign/FunctionDescriptor;Ljdk/internal/foreign/abi/LinkerOptions;)Ljava/lang/invoke/MethodHandle;+22 java.base@21-internal
j  jdk.internal.foreign.abi.x64.sysv.SysVx64Linker.arrangeDowncall(Ljava/lang/invoke/MethodType;Ljava/lang/foreign/FunctionDescriptor;Ljdk/internal/foreign/abi/LinkerOptions;)Ljava/lang/invoke/MethodHandle;+3 java.base@21-internal
j  jdk.internal.foreign.abi.AbstractLinker.lambda$downcallHandle$0(Ljdk/internal/foreign/abi/AbstractLinker$LinkRequest;)Ljava/lang/invoke/MethodHandle;+19 java.base@21-internal
j  jdk.internal.foreign.abi.AbstractLinker$$Lambda$74+0x0000000801074b60.apply(Ljava/lang/Object;)Ljava/lang/Object;+8 java.base@21-internal
j  jdk.internal.foreign.abi.SoftReferenceCache$Node.get(Ljava/lang/Object;Ljava/util/function/Function;)Ljava/lang/Object;+45 java.base@21-internal
j  jdk.internal.foreign.abi.SoftReferenceCache.get(Ljava/lang/Object;Ljava/util/function/Function;)Ljava/lang/Object;+21 java.base@21-internal
j  jdk.internal.foreign.abi.AbstractLinker.downcallHandle(Ljava/lang/foreign/FunctionDescriptor;[Ljava/lang/foreign/Linker$Option;)Ljava/lang/invoke/MethodHandle;+39 java.base@21-internal
j  java.lang.foreign.Linker.downcallHandle(Ljava/lang/foreign/MemorySegment;Ljava/lang/foreign/FunctionDescriptor;[Ljava/lang/foreign/Linker$Option;)Ljava/lang/invoke/MethodHandle;+7 java.base@21-internal
j  NativeTestHelper.downcallHandle(Ljava/lang/String;Ljava/lang/foreign/FunctionDescriptor;[Ljava/lang/foreign/Linker$Option;)Ljava/lang/invoke/MethodHandle;+9
j  TestPCAssert.testOOB()V+189
...",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"2023-02-21 10:12;jvernee;pcassert.diff;https://bugs.openjdk.org/secure/attachment/102738/pcassert.diff",,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i30hi3:",9223372036854775807,b14,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@28ce6b78,,,,,,,Verified,,"2023-02-24 08:48;jvernee;The issue is caused by the size of the code buffer not being large enough. I think we want to scale this size to the number of arguments of the downcall stub;;;","2023-03-08 06:48;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/12908
Date: 2023-03-07 18:02:41 +0000;;;","2023-03-15 16:45;dukebot;Changeset: 2b81faeb
Author:    Jorn Vernee <jvernee@openjdk.org>
Date:      2023-03-15 23:43:18 +0000
URL:       https://git.openjdk.org/jdk/commit/2b81faeb3514060e6c8c950ef4e39e299c43199d
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,
Remove carriage return in pandoc version string,JDK-8303020,5094758,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,mikael,mikael,mikael,2023-02-21 09:56,2023-02-22 23:19,2023-10-01 09:56,2023-02-21 13:01,,,,,,,,,21,infrastructure,,0,,,,,,,,,,,,,,,,,"On windows/cygwin, the PANDOC_VERSION variable includes the carriage return ('\r') which makes the version check fail.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,windows,,,,,,"0|i30hhn:",9223372036854775807,b11,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@429c566,,,,,,,,,"2023-02-21 10:04;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/12696
Date: 2023-02-21 17:59:07 +0000;;;","2023-02-21 13:01;dukebot;Changeset: 729c26f7
Author:    Mikael Vidstedt <mikael@openjdk.org>
Date:      2023-02-21 21:00:38 +0000
URL:       https://git.openjdk.org/jdk/commit/729c26f70ea89232ba7c0f2d8e4cb8116d6ca051
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
cssref.html incorrect internal link in Path,JDK-8303019,5094757,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,angorya,angorya,angorya,2023-02-21 09:52,2023-03-02 15:56,2023-10-01 09:56,2023-02-24 08:15,jfx11,jfx20,,,,,,,jfx20,javafx,,0,noreg-doc,,,,,,,,,,,,,,,,"In the Path section,

```
- https://openjfx.io/javadoc/11/javafx.graphics/javafx/scene/doc-files/cssref.html#path Also has all properties of Shape
```

points to Node instead.",,,,,,,,,,,JDK-8303202,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i30hhf:",9223372036854775807,b19,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@1d1c7815,,,,,,,,,"2023-02-21 10:03;kcr;It's still wrong in JavaFX 20.

A fix could be done for 20 (in the jfx20 branch) during RDP2, since doc bugs of any priority can go in. Or it can be done in the master branch for 21.;;;","2023-02-23 12:19;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jfx/pull/1046
Date: 2023-02-23 20:12:16 +0000;;;","2023-02-24 08:15;dukebot;Changeset: 1dd0a598
Author:    Andy Goryachev <angorya@openjdk.org>
Date:      2023-02-24 16:12:34 +0000
URL:       https://git.openjdk.org/jfx/commit/1dd0a598bc06f939b392d2e91dd8374d5f1d8a0c
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,
Passing by-value structs whose size is not power of 2 doesn't work on all platforms,JDK-8303017,5094755,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,jvernee,jvernee,jvernee,2023-02-21 09:46,2023-03-02 11:35,2023-10-01 09:56,2023-03-02 11:35,repo-panama,,,,,,,,,core-libs,,0,foreign-memaccess+abi,,,,,,,,,,,,,,,,"When passing a struct like the following to native code:

struct S{
  short f0;
  short f1;
  short f2;
};

We get an IndexOutOfBoundsException on SysV (with -XX:+ShowHiddenFrames):

java.lang.IndexOutOfBoundsException: Out of bound access on segment MemorySegment{ array: Optional.empty address:140675014129552 limit: 6 }; new offset = 0; new length = 8
        at java.base/jdk.internal.foreign.AbstractMemorySegmentImpl.outOfBoundException(AbstractMemorySegmentImpl.java:421)
        at java.base/jdk.internal.foreign.AbstractMemorySegmentImpl.apply(AbstractMemorySegmentImpl.java:402)
        at java.base/jdk.internal.foreign.AbstractMemorySegmentImpl.apply(AbstractMemorySegmentImpl.java:69)
        at java.base/jdk.internal.util.Preconditions.outOfBounds(Preconditions.java:98)
        at java.base/jdk.internal.util.Preconditions.outOfBoundsCheckIndex(Preconditions.java:124)
        at java.base/jdk.internal.util.Preconditions.checkIndex(Preconditions.java:448)
        at java.base/jdk.internal.foreign.AbstractMemorySegmentImpl.checkBounds(AbstractMemorySegmentImpl.java:391)
        at java.base/jdk.internal.foreign.AbstractMemorySegmentImpl.checkAccess(AbstractMemorySegmentImpl.java:351)
        at java.base/java.lang.invoke.VarHandleSegmentAsLongs.checkAddress(VarHandleSegmentAsLongs.java:81)
        at java.base/java.lang.invoke.VarHandleSegmentAsLongs.get(VarHandleSegmentAsLongs.java:108)
        at java.base/java.lang.invoke.VarHandleGuards.guard_LJ_J(VarHandleGuards.java:230)
        at java.base/java.lang.foreign.MemorySegment.get(MemorySegment.java:1572)
        at java.base/jdk.internal.foreign.abi.DowncallStub/0x00000008010aec00.invoke(Unknown Source)
        at java.base/java.lang.invoke.LambdaForm$DMH/0x00000008010af400.invokeStaticInit(LambdaForm$DMH)
        at java.base/java.lang.invoke.LambdaForm$MH/0x00000008010be000.invoke(LambdaForm$MH)
        at java.base/java.lang.invoke.LambdaForm$MH/0x00000008010bac00.invoke(LambdaForm$MH)
        at java.base/java.lang.invoke.Invokers$Holder.invokeExact_MT(Invokers$Holder)
        at java.base/java.lang.invoke.MethodHandle.invokeWithArguments(MethodHandle.java:733)
        at TestOOB.testOOB(TestOOB.java:71)

The exact conditions for this are passing a struct by-value whose size is not a power of two. When the linker tries to load the value of this struct, it will try to use an 8 byte load, but this will fail, since the segment is only 6 bytes in size.

GCC will use an over-sized 8 byte load when calling a function that accepts this struct:

        mov     rdi, QWORD PTR [rsp+8]
        call    F

And when returning, GCC generates some kind of masking to make sure only 6 bytes are written:

F:
        movabs  rdx, 0xFFFF00000000
        mov     eax, edi
        and     rdi, rdx
        or      rax, rdi
        ret

To fix this, we might need to do an unchecked load of the value (and mask + unchecked write for returns)",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"2023-02-23 19:27;mdoerr;TestMiniStruct.c;https://bugs.openjdk.org/secure/attachment/102778/TestMiniStruct.c","2023-02-23 19:27;mdoerr;TestMiniStruct.java;https://bugs.openjdk.org/secure/attachment/102777/TestMiniStruct.java",,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i30hgz:",9223372036854775807,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@28ce6b78,,,,,,,,,"2023-02-23 19:29;mdoerr;Added example using a struct consisting of 3 chars (see attachments). Also note that using oversized loads/stores are problematic on Big Endian platforms!;;;","2023-02-27 11:44;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/panama-foreign/pull/806
Date: 2023-02-24 21:08:50 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Invalid escapes in grep patterns,JDK-8303016,5094754,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,mikael,mikael,mikael,2023-02-21 09:44,2023-02-22 23:19,2023-10-01 09:56,2023-02-21 14:12,,,,,,,,,21,infrastructure,,0,,,,,,,,,,,,,,,,,"In a few grep patterns characters are escaped when they shouldn't be. Some grep versions seem to ignore this, but Cygwin grep generates a warning:

/usr/bin/grep: warning: stray \ before +
/usr/bin/grep: warning: stray \ before -
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i30hgr:",9223372036854775807,b11,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@429c566,,,,,,,,,"2023-02-21 09:56;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/12695
Date: 2023-02-21 17:49:21 +0000;;;","2023-02-21 14:12;dukebot;Changeset: f319c92b
Author:    Mikael Vidstedt <mikael@openjdk.org>
Date:      2023-02-21 22:10:36 +0000
URL:       https://git.openjdk.org/jdk/commit/f319c92bd0fc68a64e6ac35ad4569740b858c9b2
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Add /DEBUG to LDFLAGS for MSVC with ASan,JDK-8303010,5094746,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,jcking,jcking,jcking,2023-02-21 08:34,2023-02-22 23:19,2023-10-01 09:56,2023-02-21 13:17,,,,,,,,,21,infrastructure,,0,,,,,,,,,,,,,,,,,MSVC complains quite heavily in the build output if /DEBUG is not passed to the linker when building with ASan. This happens under at least release builds.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i30hez:",9223372036854775807,b11,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@429c566,,,,,,,,,"2023-02-21 08:48;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/12693
Date: 2023-02-21 16:40:07 +0000;;;","2023-02-21 13:17;dukebot;Changeset: ce6de371
Author:    Justin King <jcking@openjdk.org>
Date:      2023-02-21 21:15:43 +0000
URL:       https://git.openjdk.org/jdk/commit/ce6de37172cadc3671c03423cb9dd3bb9d2be840
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
[lworld] C2 compilation fails with assert(phase->C->get_alias_index(t) == phase->C->get_alias_index(t_adr)) failed: correct memory chain,JDK-8303000,5094735,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,thartmann,thartmann,thartmann,2023-02-21 07:19,2023-04-21 04:43,2023-10-01 09:56,2023-04-21 04:43,repo-valhalla,,,,,,,,repo-valhalla,hotspot,,0,c2,intermittent,lworld,,,,,,,,,,,,,,"compiler/c2/TestGVNCrash.java fails intermittently and the failure is not reproducible:

# A fatal error has been detected by the Java Runtime Environment:
#
#  Internal Error (/opt/mach5/mesos/work_dir/slaves/91e16c40-06d4-468a-9fc3-7198a5bb7d5a-S115904/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/6bad2d99-b753-4700-b913-6cd7722c6bbd/runs/c5b1193e-8352-4e5d-9dc4-d0bf7ca73e0c/workspace/open/src/hotspot/share/opto/memnode.cpp:244), pid=2028729, tid=2028769
#  assert(phase->C->get_alias_index(t) == phase->C->get_alias_index(t_adr)) failed: correct memory chain
#
# JRE version: Java(TM) SE Runtime Environment (21.0+1) (fastdebug build 21-valhalla+1-LTS-8)
# Java VM: Java HotSpot(TM) 64-Bit Server VM (fastdebug 21-valhalla+1-LTS-8, mixed mode, sharing, compressed oops, compressed class ptrs, g1 gc, linux-amd64)
# Problematic frame:
# V  [libjvm.so+0x1645038]  MemNode::optimize_memory_chain(Node*, TypePtr const*, Node*, PhaseGVN*)+0x3e8

Current CompileTask:
C2:    305   18    b        compiler.c2.TestGVNCrash::test (152 bytes)

Stack: [0x00007f7fd9828000,0x00007f7fd9929000],  sp=0x00007f7fd9924000,  free space=1008k
Native frames: (J=compiled Java code, j=interpreted, Vv=VM code, C=native code)
V  [libjvm.so+0x1645038]  MemNode::optimize_memory_chain(Node*, TypePtr const*, Node*, PhaseGVN*)+0x3e8  (memnode.cpp:244)
V  [libjvm.so+0x164ac20]  LoadNode::Ideal(PhaseGVN*, bool)+0x250  (memnode.cpp:1807)
V  [libjvm.so+0x183ca13]  PhaseIterGVN::transform_old(Node*)+0xc3  (phaseX.cpp:1261)
V  [libjvm.so+0x1834655]  PhaseIterGVN::optimize()+0x75  (phaseX.cpp:1203)
V  [libjvm.so+0xb50548]  Compile::Optimize()+0xcb8  (compile.cpp:2797)
V  [libjvm.so+0xb54999]  Compile::Compile(ciEnv*, ciMethod*, int, Options, DirectiveSet*)+0x1959  (compile.cpp:843)
V  [libjvm.so+0x94716e]  C2Compiler::compile_method(ciEnv*, ciMethod*, int, bool, DirectiveSet*)+0x51e  (c2compiler.cpp:113)
V  [libjvm.so+0xb61fdc]  CompileBroker::invoke_compiler_on_method(CompileTask*)+0xa7c  (compileBroker.cpp:2237)
V  [libjvm.so+0xb62de8]  CompileBroker::compiler_thread_loop()+0x608  (compileBroker.cpp:1916)
V  [libjvm.so+0x10d67c6]  JavaThread::thread_main_inner()+0x206  (javaThread.cpp:711)
V  [libjvm.so+0x1b25ce0]  Thread::call_run()+0x100  (thread.cpp:224)
V  [libjvm.so+0x1797e33]  thread_native_entry(Thread*)+0x103  (os_linux.cpp:739)",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8288204,,,,,,,,,"2023-02-21 07:21;thartmann;hs_err_pid2028729.log;https://bugs.openjdk.org/secure/attachment/102729/hs_err_pid2028729.log","2023-02-21 07:21;thartmann;replay_pid2028729.log;https://bugs.openjdk.org/secure/attachment/102728/replay_pid2028729.log",,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i30hcj:",9223372036854775807,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2023-04-21 01:22;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/valhalla/pull/841
Date: 2023-04-21 08:14:28 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
(zipfs) Introduce new system property to turn off JDK-8251329 restrictions,JDK-8302992,5094728,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,rreddy,coffeys,coffeys,2023-02-21 06:12,2023-04-19 02:15,2023-10-01 09:56,2023-04-06 02:06,11-pool,17-pool,,,,,,,17.0.8-oracle,core-libs,,0,18-na,release-note=yes,,,,,,,,,,,,,,,"JDK-8251329 introduced behavioural changes for the zipfs API. Even though the change relates to badly generated zip archives, this change might be unsuitable for some older environments. As an interoperability aid, a new system property could be introduced in JDK Update releases to revert such changes.

A CSR will be required for such a change.",,,,,,,,,,,JDK-8306231,JDK-8304485,,,,,,,,,,,,,,,,JDK-8303878,,,,,,,,JDK-8251329,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i30haz:",9223372036854775807,b02,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@674604a9,,,,,,,,,"2023-04-18 13:13;goetz;Hi @darcy @rreddy
The csr mentioned in the release note is closed.
Is this intended?
https://bugs.openjdk.org/browse/JDK-8303878;;;","2023-04-19 02:02;coffeys;[~goetz] - it's Closed-> Approved. I believe that's correct status for an approved CSR;;;","2023-04-19 02:05;goetz;Hi [~coffeys], 
I don't mean that ""closed"". 
I mean it is Oracle-internal. Not visible to the public. 
Best regards, Goetz.;;;","2023-04-19 02:15;coffeys;Ah, I see. Corrected that now. Thanks for highlighting.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,
ZoneRulesProvider.registerProvider() twice will remove provider,JDK-8302983,5094617,Bug,Closed,JDK,JDK,software,duke,,,P3,Fixed,naoto,webbuggrp,webbuggrp,2023-02-20 06:26,2023-08-04 12:49,2023-10-01 09:56,2023-04-28 09:26,21,,,,,,,,21,core-libs,,0,21ea,dcsaw,regression,reproducer-yes,webbug,,,,,,,,,,,,"ADDITIONAL SYSTEM INFORMATION :
openjdk version ""21-ea"" 2023-09-19
OpenJDK Runtime Environment (build 21-ea+10-784)
OpenJDK 64-Bit Server VM (build 21-ea+10-784, mixed mode, sharing)



A DESCRIPTION OF THE PROBLEM :
Regression from JDK-8299571:
The fix to the above issue introduced a new bug when registering the same `java.time.zone.ZoneRulesProvider` twice it will in fact remove the provider from the registered ones again.

REGRESSION : Last worked in version 20

STEPS TO FOLLOW TO REPRODUCE THE PROBLEM :
1. Create a new `java.time.zone.ZoneRulesProvider` whichg provides a new unregistered ZoneId.
2. Call `java.time.zone.ZoneRulesProvider.registerProvider(zrp);` once. Provider will be registered.
3. Call `java.time.zone.ZoneRulesProvider.registerProvider(zrp);` again. Registering will fail with a `ZoneRulesException` as expected.
4. The newly introduced cleanup will remove the provider again.

EXPECTED VERSUS ACTUAL BEHAVIOR :
EXPECTED -
The provider should still be registered for the ZoneId because it was registered successfully once.
ACTUAL -
The provider is unregistered and the ZoneId is not available.

---------- BEGIN SOURCE ----------
import java.util.Set;
import java.util.NavigableMap;
import java.time.ZoneId;
import java.time.zone.ZoneRules;
import java.time.zone.ZoneRulesProvider;
import java.time.zone.ZoneRulesException;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.assertFalse;
import static org.junit.jupiter.api.Assertions.assertNotNull;
import static org.junit.jupiter.api.Assertions.assertTrue;
import static org.junit.jupiter.api.Assertions.assertThrows;

class ZoneRulesProviderTest {
    private static final String ZONE = ""MyZone"";
    @Test void registerProviderTwice() {
    	// setup
        ZoneRulesProvider zrp = new ZoneRulesProvider() {
            @Override protected Set<String> provideZoneIds() {
                return Set.of(ZONE);
            }
            @Override protected ZoneRules provideRules(String zoneId, boolean forCaching) {
                return null;
            }
            @Override protected NavigableMap<String, ZoneRules> provideVersions(String zoneId) {
                return null;
            }
        };
        assertFalse(ZoneId.getAvailableZoneIds().contains(ZONE));
        ZoneRulesProvider.registerProvider(zrp);
        assertTrue(ZoneId.getAvailableZoneIds().contains(ZONE));
        assertNotNull(ZoneId.of(ZONE));
        
        // exercise
        assertThrows(ZoneRulesException.class, () -> ZoneRulesProvider.registerProvider(zrp));
        
        // verify - these will fail
        assertTrue(ZoneId.getAvailableZoneIds().contains(ZONE));
        assertNotNull(ZoneId.of(ZONE));
    }
}

---------- END SOURCE ----------

CUSTOMER SUBMITTED WORKAROUND :
Register the provider again (?)

FREQUENCY : always


",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8302898,,,,,,,,,,JDK-8299571,,,,"2023-02-21 05:00;tongwan;Main.java;https://bugs.openjdk.org/secure/attachment/102726/Main.java",,,,,,,,,,,,generic,,,,,,,b05,21,,generic,,,,,,"0|i30gmb:",9223372036854775807,b21,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@a9a7756,,,,,,,Verified,,"2023-02-21 04:58;tongwan;The observations on Windows 10:
JDK 21ea+4: Passed.
JDK 21ea+5: Failed.;;;","2023-02-21 10:22;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/12690
Date: 2023-02-21 13:44:52 +0000;;;","2023-04-28 09:26;dukebot;Changeset: f83e7302
Author:    Madjosz <28844868+Madjosz@users.noreply.github.com>
Committer: Naoto Sato <naoto@openjdk.org>
Date:      2023-04-28 16:23:13 +0000
URL:       https://git.openjdk.org/jdk/commit/f83e7302c1660c128f866daa7317bc1dce156686
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,
Fix a typo in the doc comment for java.lang.Record.equals,JDK-8302981,5094720,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,prappo,prappo,prappo,2023-02-21 04:04,2023-02-22 23:19,2023-10-01 09:56,2023-02-21 05:13,21,,,,,,,,21,core-libs,,0,noreg-doc,,,,,,,,,,,,,,,,"{@link
     * java.util.Objects#equals(Object,Object)
     * Objects.equals(this.c, r.c}",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i30h97:",9223372036854775807,b11,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4c088d55,,,,,,,,,"2023-02-21 04:16;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/12689
Date: 2023-02-21 12:09:51 +0000;;;","2023-02-21 05:13;dukebot;Changeset: 8b20aa91
Author:    Pavel Rappo <prappo@openjdk.org>
Date:      2023-02-21 13:11:26 +0000
URL:       https://git.openjdk.org/jdk/commit/8b20aa919b810fc5b3856b392bd0d8b1f882c895
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
ZGC: Doesn't support gc/TestVerifySubSet.java,JDK-8302977,5094717,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,stefank,stefank,stefank,2023-02-21 02:40,2023-02-22 23:18,2023-10-01 09:56,2023-02-21 03:06,21,,,,,,,,21,hotspot,,0,zgc,,,,,,,,,,,,,,,,"8302741 removed ZGC's usage of Universe::verify. This breaks gc/TestVerifySubSet.java, which looks for this output.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i30h8j:",9223372036854775807,b11,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6b00f96c,,,,,,,,,"2023-02-21 02:54;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/12686
Date: 2023-02-21 10:47:12 +0000;;;","2023-02-21 03:06;dukebot;Changeset: 60e63789
Author:    Stefan Karlsson <stefank@openjdk.org>
Date:      2023-02-21 11:04:43 +0000
URL:       https://git.openjdk.org/jdk/commit/60e637892576792f663a25b8a949e39c29accd47
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
C2 Intrinsification of Float.floatToFloat16 and Float.float16ToFloat Yields Different Result than the Interpreter,JDK-8302976,5094716,Bug,Closed,JDK,JDK,software,duke,,,P2,Fixed,kvn,yzheng,yzheng,2023-02-21 02:29,2023-07-12 08:06,2023-10-01 09:56,2023-03-08 19:28,20,21,,,,,,,21,hotspot,,0,20bpr-critical-approved,c2,intrinsic,jdk20u-fix-request,jdk20u-fix-SQE-ok-next,jdk20u-fix-yes,oracle-triage-11,oracle-triage-17,oracle-triage-21,,,,,,,,"The following code snippet prints twice 31745 with the interpreter, and 32257 31745 with -Xcomp -XX:-TieredCompilation. This means, C2 will eliminate both intrinsifications if they are within the same compilation unit (the latter print), and return the same result as the interpreter. But if it applies the intrinsifications respectively in different compilation units and employ the underlying vcvtps2ph and vcvtph2ps instructions (the former print), then it will return a different value. 


public class Foo {
  public static short bar(float f) {
    return Float.floatToFloat16(f);
  }
  public static void main(String[] args) {
    System.out.println(bar(Float.float16ToFloat((short) 31745)));
    System.out.println(Float.floatToFloat16(Float.float16ToFloat((short) 31745)));
  }
} 
",,,,,,,,,,,JDK-8307015,JDK-8305576,JDK-8304741,,,,,,,,,,,,,,,,,,,,,,,JDK-8289552,,,,,JDK-8293991,JDK-8305294,JDK-8289551,,"2023-02-21 03:19;thartmann;Test.java;https://bugs.openjdk.org/secure/attachment/102725/Test.java","2023-02-22 01:49;thartmann;TestAll.java;https://bugs.openjdk.org/secure/attachment/102750/TestAll.java","2023-02-24 17:38;sviswanathan;TestAllFix.java;https://bugs.openjdk.org/secure/attachment/102792/TestAllFix.java","2023-02-24 17:34;sviswanathan;TestAllFloat.java;https://bugs.openjdk.org/secure/attachment/102791/TestAllFloat.java",,,,,,,,,aarch64,x86,,,,,,,,,,,,,,,"0|i30h8b:",9223372036854775807,b14,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,Verified,,"2023-02-21 03:20;thartmann;Thanks for the report, [~yzheng]. I attached a reproducer that does not require any command line options.;;;","2023-02-21 03:24;thartmann;ILW = Wrong result of C2 intrinsic, new Float.floatToFloat16 method added by JDK-8289551 (intrinsified by JDK-8289552), -XX:DisableIntrinsic=_floatToFloat16 = HMM = P2;;;","2023-02-21 03:25;thartmann;Smita, could you please have a look?;;;","2023-02-21 13:59;dlong;It looks like the problem for this test is NaN values, but there could be other values that cause problems.  I think we need a test for these intrinsics that covers all the interesting NaN, subnormal, 0, -0 values.  Or better yet, all values.  There's only 65536 to test, right?;;;","2023-02-21 15:35;kvn;Yes, 31745 is 0x7C01 NaN value. So HW instruction does not handle NaN value correctly? Or there is other bug.;;;","2023-02-21 15:41;kvn;Note, in this bug case NaN constant is used as argument and  HW instruction is NOT used. Instead `SharedRuntime::hf2f()` runtime function is called to get value:
https://github.com/openjdk/jdk/blob/master/src/hotspot/share/opto/convertnode.cpp#L239


;;;","2023-02-21 15:43;kvn;I wish we don't use runtime function for that but simple JIT compile Java method. Or always use HW instruction.
Note, runtime function is used only when HW instructions are present and intrinsic is enabled. Otherwise we JIT compile Java method.
;;;","2023-02-21 16:34;dlong;I think the problem is the C++ and Java implementations return a different NaN value than the HW instruction.

  https://github.com/openjdk/jdk/blob/master/src/java.base/share/classes/java/lang/Float.java#L1096-L1106

HW instruction returns a NaN value, but not the same one as the reference code.  If we need to be bit-for-bit the same, then it implies we can't use the HW instruction without a runtime check for NaN first (when the value is not a constant).;;;","2023-02-21 16:36;sviswanathan;[~thartmann], [~kvn], [~dlong], [~darcy] This is specific to NaN handling. The HW instructions generate QNaNs and not SNaNs for floating point instructions. This happens across double, float, and float16 data types. The most significant bit of mantissa is set to 1 for QNaNs. For Float16 data type (1 sign bit, 5 exponent bits, 10 mantissa bits): 0x7E01 would be a QNaN and 0x7C01 would be a SNaN. 

https://en.wikipedia.org/wiki/NaN#Encoding

As per my understanding we need to change the java/lang/float.java and the corresponding shared runtime constant expression evaluation to generate QNaN. I can send out a PR fixing this. Please let me know your thoughts.
;;;","2023-02-21 17:01;dlong;I got the same result on aarch64.  It looks like RISC-V also implements this intrinsic.;;;","2023-02-21 18:06;dlong;[~sviswanathan], I'm not sure the behavior is a bug.  The javadoc for Float.float16ToFloat() only says:
""If the argument is a NaN, the result is a NaN.""
It does not say what kind of NaN, or even that the same NaN will be returned for the same input.  This is in contrast to floatToIntBits(), which returns a canonical NaN value.;;;","2023-02-21 18:16;sviswanathan;[~dlong] I agree with you. In any case, I have submitted a PR for the mainline. https://github.com/openjdk/jdk/pull/12704;;;","2023-02-21 18:19;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/12704
Date: 2023-02-22 02:08:27 +0000;;;","2023-02-22 00:10;thartmann;[~dlong]:
> It looks like the problem for this test is NaN values, but there could be other values that cause problems. I think we need a test for these intrinsics that covers all the interesting NaN, subnormal, 0, -0 values. Or better yet, all values. There's only 65536 to test, right?

Yes, we should do that. I attached a corresponding test (TestAll.java). Both Float.floatToFloat16 and Float.float16ToFloat are affected. Input values in the ranges [-1023, -513] and [31745, 32255] ([0xfc01, 0xfdff], [0x7c01, 0x7dff]) corresponding to NaN return inconsistent values.;;;","2023-02-22 16:18;dlong;[~thartmann], I was wrong, we can test all the input values for float16ToFloat(), but not so easily for floatToFloat16(), with 2^32 inputs to test.
I posted a counter example here that demonstrates the problem:
https://github.com/openjdk/jdk/pull/12704#issuecomment-1441020334;;;","2023-02-22 23:50;thartmann;[~dlong], right, good catch. We need a more sophisticated test.;;;","2023-02-23 14:55;kvn;I took it.;;;","2023-02-24 01:11;thartmann;Similar issue from the past: JDK-8076373;;;","2023-02-24 16:10;kvn;I implemented usage of vcvtps2ph/vcvtph2ps instructions in Interpreter and run with TestAll.java. All NaN values failed:

Inconsistent result for Float.floatToFloat16(-1023): -511 != -1023 (NaN)
Inconsistent result for Float.floatToFloat16(-1022): -510 != -1022 (NaN)
Inconsistent result for Float.floatToFloat16(-1021): -509 != -1021 (NaN)
Inconsistent result for Float.floatToFloat16(-1020): -508 != -1020 (NaN)
...
Inconsistent result for Float.floatToFloat16(31745): 32257 != 31745 (NaN)
Inconsistent result for Float.floatToFloat16(31746): 32258 != 31746 (NaN)
Inconsistent result for Float.floatToFloat16(31747): 32259 != 31747 (NaN)
Inconsistent result for Float.floatToFloat16(31748): 32260 != 31748 (NaN)

[~sviswanathan]  The test execution simply push short value through vcvtph2ps->vcvtps2ph instructions and got back different result if intermittent float value is NaN.  The difference is 512 as this bug stated.  I really don't want to check for special NaN cases in assembler code and adjust result for that. Do you know other solutions on assembler level?
;;;","2023-02-24 16:47;kvn;Is this is why we have special stub to fix value after conversion between float and integer values? :
https://github.com/openjdk/jdk/blob/master/src/hotspot/cpu/x86/macroAssembler_x86.cpp#L9424
;;;","2023-02-24 17:28;sviswanathan;[~kvn] The QNaN bit difference is not an issue and similar thing happens today with float->double conversion and back. I mentioned this in my comment earlier that the behavior of adding the QNaN bit is consistent across float16/float/double data types. To show this, I translated the TestAll.java for float->double in file TestAllFloat.java. We see similar handling that the results for NaN differ by the QNaN bit in TestAllFloat.java as well.
In my thoughts the TestAll.java needs to be fixed as TestAllFix.java to be the correct test.;;;","2023-02-24 17:51;kvn;I also ran https://github.com/openjdk/jdk/blob/master/test/jdk/java/lang/Float/Binary16ConversionNaN.java [~darcy] wrote and it failed too:
Roundtrip failure on NaN value 7c01      got back 7e01
Roundtrip failure on NaN value fc01      got back fe01
Roundtrip failure on NaN value 7c02      got back 7e02
Roundtrip failure on NaN value fc02      got back fe02
...
Exception in thread ""main"" java.lang.RuntimeException: 1022 errors
	at Binary16ConversionNaN.main(Binary16ConversionNaN.java:51)

It does not fail with Java implemetation - run with -Xint without my code.
;;;","2023-02-24 17:58;sviswanathan;That is also because of the QNaN bit and needs similar change on line 84:
From:
if (s != s2) {

To:
if ((s & ~0x0200) != (s2 & ~0x0200)) {  // ignore QNaN bit;;;","2023-02-24 18:06;kvn;Okay, I got implementation which executes the same HW instructions in Interpreter, C1 and C2. So results will be consistent but they are different from what Java implementation and corresponding tests expect - roundtrip equality for float16.

;;;","2023-02-24 18:09;kvn;I will let [~darcy] say what he think about this.
;;;","2023-02-24 18:12;darcy;The test in question contains the following comment:

/*
 * The behavior tested below is an implementation property not
 * required by the specification. It would be acceptable for this
 * information to not be preserved (as long as a NaN is returned) if,
 * say, a intrinsified version using native hardware instructions
 * behaved differently.
 *
 * If that is the case, this test should be modified to disable
 * intrinsics or to otherwise not run on platforms with an differently
 * behaving intrinsic.
 */

The test has already been updated to limit the platforms on which it is run:

 * @requires (os.arch != ""x86"" & os.arch != ""i386"") | vm.opt.UseSSE == ""null"" | vm.opt.UseSSE > 0;;;","2023-02-24 19:03;sviswanathan;Thanks a lot [~kvn] [~darcy]. The sharedRuntime:hf2f and f2hf implementations will also need to be platform dependent for NaN handling.;;;","2023-03-06 08:12;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/12869
Date: 2023-03-03 21:41:35 +0000;;;","2023-03-08 19:28;dukebot;Changeset: 8cfd74f7
Author:    Vladimir Kozlov <kvn@openjdk.org>
Date:      2023-03-09 03:26:38 +0000
URL:       https://git.openjdk.org/jdk/commit/8cfd74f76afc9e5d50c52104fef9974784718dd4
;;;","2023-03-21 11:22;kvn;jdk20u backport request

This fixed inconsistency in Float.floatToFloat16 and Float.float16ToFloat results found in JDK 20 but is was late to push it there.
Risk is medium since changes are not small. But it was running in JDK 21 for 2 weeks already without any issues.
New tests were added to make sure the fix is correct.

JDK 20u PR: https://github.com/openjdk/jdk20u/pull/21
;;;","2023-03-21 14:54;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk20u/pull/21
Date: 2023-03-21 21:46:36 +0000;;;"
arm32 Raspberry Pi OS build broken by JDK-8301494,JDK-8302905,5094643,Bug,Closed,JDK,JDK,software,duke,,,P1,Fixed,dholmes,martin,martin,2023-02-20 15:23,2023-07-11 05:17,2023-10-01 09:56,2023-02-20 17:24,,,,,,,,,21,hotspot,,0,,,,,,,,,,,,,,,,,"Failure to build on ""Raspbian GNU/Linux 11 (bullseye)""

configure: Using gcc C compiler version 10.2.1 [gcc (Raspbian 10.2.1-6+rpi1) 10.2.1 20210110]

...

=== Output from failing command(s) repeated here ===
* For target hotspot_variant-server_libjvm_objs_interpreterRT_arm.o:
/home/martin/ws/jdk/src/hotspot/cpu/arm/interpreterRT_arm.cpp: In member function 'virtual void SlowSignatureHandler::pass_object()':
/home/martin/ws/jdk/src/hotspot/cpu/arm/interpreterRT_arm.cpp:309:56: error: operands to '?:' have different types 'std::nullptr_t' and 'intptr_t' {aka 'int'}
  309 |       _toGP[_last_gp++] = (*(intptr_t*)from_addr == 0) ? nullptr : from_addr;
      |                           ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~
/home/martin/ws/jdk/src/hotspot/cpu/arm/interpreterRT_arm.cpp:311:45: error: operands to '?:' have different types 'std::nullptr_t' and 'intptr_t' {aka 'int'}
  311 |       *_to++ = (*(intptr_t*)from_addr == 0) ? nullptr : from_addr;
      |                ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~

* All command lines available in /home/martin/ws/jdk/build/linux-arm-server-release/make-support/failure-logs.
=== End of repeated output ===
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8301494,,,,,,,,,,,,,,,,arm,,,,,,,,,,,,,,,,"0|i30gs3:",9223372036854775807,b11,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,Not verified,,"2023-02-20 15:25;martin;git bisect assigns blame;;;","2023-02-20 15:27;dholmes;This looks like a case where it should be 0 rather than nullptr. [~martin] does that change fix it for you?;;;","2023-02-20 16:15;dholmes;Fix in progress. PR very soon.;;;","2023-02-20 16:25;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/12679
Date: 2023-02-21 00:20:51 +0000;;;","2023-02-20 17:24;dukebot;Changeset: 91a2b5ec
Author:    David Holmes <dholmes@openjdk.org>
Date:      2023-02-21 01:23:06 +0000
URL:       https://git.openjdk.org/jdk/commit/91a2b5ec6f90b9895924a49319c2c6b7007d96bd
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,
[11u] Add modified test snippet after backport of JDK-8221871,JDK-8302903,5094641,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,clanger,clanger,clanger,2023-02-20 14:20,2023-03-01 01:16,2023-10-01 09:56,2023-02-27 00:57,11.0.17,,,,,,,,11.0.19,tools,,0,jdk11u-fix-request,jdk11u-fix-yes,,,,,,,,,,,,,,,"JDK-8221871 was backported to 11u. A snippet of test jdk/javadoc/doclet/testHtmlVersion/TestHtmlVersion.java was removed in that change. However, it was suggested that the removed part could be adapted to make it work in this PR comment: https://github.com/openjdk/jdk11u-dev/pull/1219#discussion_r1088684519",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8291821,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i30grn:",9223372036854775807,b04,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@7900061a,,,,,,,,,"2023-02-20 14:28;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk11u-dev/pull/1761
Date: 2023-02-20 22:23:00 +0000;;;","2023-02-24 13:27;clanger;Fix request (11u):
This change adds a snippet of test code that had been dropped when backporting JDK-8221871. Risk: low, only test fix. Passed SAP testing.;;;","2023-02-27 00:57;dukebot;Changeset: cfb05cb2
Author:    Christoph Langer <clanger@openjdk.org>
Date:      2023-02-27 08:55:59 +0000
URL:       https://git.openjdk.org/jdk11u-dev/commit/cfb05cb26d1b16fc12c2ba2486d00b8ebacc04da
;;;","2023-03-01 01:16;dukebot;Changeset: cfb05cb2
Author:    Christoph Langer <clanger@openjdk.org>
Date:      2023-02-27 08:55:59 +0000
URL:       https://git.openjdk.org/jdk11u/commit/cfb05cb26d1b16fc12c2ba2486d00b8ebacc04da
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,
containers/docker/TestJcmd.java fails when run as root under podman,JDK-8302888,5094624,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,sgehwolf,sgehwolf,sgehwolf,2023-02-20 08:50,2023-02-22 23:20,2023-10-01 09:56,2023-02-22 00:37,,,,,,,,,21,hotspot,,0,containers,testbug,,,,,,,,,,,,,,,"When running TestJcmd with podman under the root user I'm seeing a failure that looks like this:
----------System.err:(16/899)----------
[main-container-process] Error: keep-id is only supported in rootless mode
Failed to start a process (thread dump follows)
java.util.concurrent.TimeoutException
        at jdk.test.lib.process.ProcessTools.startProcess(ProcessTools.java:223)
        at jdk.test.lib.process.ProcessTools.startProcess(ProcessTools.java:143)
        at TestJcmd.startObservedContainer(TestJcmd.java:182)
        at TestJcmd.main(TestJcmd.java:77)
        at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
        at java.base/java.lang.reflect.Method.invoke(Method.java:578)
        at com.sun.javatest.regtest.agent.MainWrapper$MainThread.run(MainWrapper.java:125)
        at java.base/java.lang.Thread.run(Thread.java:1623)

JavaTest Message: Test threw exception: java.util.concurrent.TimeoutException
JavaTest Message: shutting down test

STATUS:Failed.`main' threw exception: java.util.concurrent.TimeoutException
----------rerun:(28/2230)*----------

The keep-id option should only be added when run as non-root.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,generic,,,,,,,,,,linux,,,,,,"0|i30gnv:",9223372036854775807,b11,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@78d03d9a,,,,,,,,,"2023-02-20 09:03;sgehwolf;This should fix it.

--- test/hotspot/jtreg/containers/docker/TestJcmd.java.orig	2023-02-20 17:51:49.587561044 +0100
+++ test/hotspot/jtreg/containers/docker/TestJcmd.java	2023-02-20 17:54:04.477637821 +0100
@@ -169,7 +169,8 @@
             .addDockerOpts(""--name"", CONTAINER_NAME)
             .addClassOptions("""" + TIME_TO_RUN_CONTAINER_PROCESS);
 
-        if (IS_PODMAN) {
+        String uid = getId(""-u"");
+        if (IS_PODMAN && !ROOT_UID.equals(uid)) {
             // map the current userid to the one in the target namespace
             opts.addDockerOpts(""--userns=keep-id"");
         }
;;;","2023-02-20 09:46;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/12673
Date: 2023-02-20 17:33:51 +0000;;;","2023-02-22 00:37;dukebot;Changeset: 7f353895
Author:    Severin Gehwolf <sgehwolf@openjdk.org>
Date:      2023-02-22 08:35:10 +0000
URL:       https://git.openjdk.org/jdk/commit/7f3538953367f17c8247cc7225ae3b43ed0564c5
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,
Implementations of MemorySegment::reinterpret should be final,JDK-8302885,5094622,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,jvernee,jvernee,jvernee,2023-02-20 07:31,2023-02-20 08:14,2023-10-01 09:56,2023-02-20 08:14,repo-panama,,,,,,,,,core-libs,,0,foreign-memaccess+abi,,,,,,,,,,,,,,,,"Since the MS::reinterpret methods are @CallerSensitive, the implementations should be final.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i30gnf:",9223372036854775807,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@28ce6b78,,,,,,,,,"2023-02-20 08:05;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/panama-foreign/pull/802
Date: 2023-02-20 15:36:10 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Newly added test javax/swing/JFileChooser/JFileChooserFontReset.java fails with HeadlessException,JDK-8302882,5094619,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,psadhukhan,psadhukhan,psadhukhan,2023-02-20 06:32,2023-04-27 23:42,2023-10-01 09:56,2023-02-20 06:50,21,,,,,,,,21,client-libs,,0,noreg-self,regression,regression_6753661,ursqe-triaged,,,,,,,,,,,,,"Test is failing in headless system with error

java.lang.reflect.InvocationTargetException
	at java.desktop/java.awt.EventQueue.invokeAndWait(EventQueue.java:1371)
	at java.desktop/java.awt.EventQueue.invokeAndWait(EventQueue.java:1346)
	at java.desktop/javax.swing.SwingUtilities.invokeAndWait(SwingUtilities.java:1480)
	at JFileChooserFontReset.main(JFileChooserFontReset.java:48)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
	at java.base/java.lang.reflect.Method.invoke(Method.java:578)
	at com.sun.javatest.regtest.agent.MainWrapper$MainThread.run(MainWrapper.java:125)
	at java.base/java.lang.Thread.run(Thread.java:1623)
Caused by: java.awt.HeadlessException: 
The application is not running in a desktop session,
but this program performed an operation which requires it.
	at java.desktop/java.awt.dnd.DropTarget.<init>(DropTarget.java:101)
	at java.desktop/java.awt.dnd.DropTarget.<init>(DropTarget.java:147)
	at java.desktop/com.apple.laf.AquaFileChooserUI.installListeners(AquaFileChooserUI.java:259)
	at java.desktop/com.apple.laf.AquaFileChooserUI.installUI(AquaFileChooserUI.java:215)",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,generic,,,,,,,,,,generic,,,,,,"0|i30gmr:",9223372036854775807,b11,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@568a5b31,,,,,,,,,"2023-02-20 06:45;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/12666
Date: 2023-02-20 14:38:01 +0000;;;","2023-02-20 06:50;dukebot;Changeset: e7316952
Author:    Prasanta Sadhukhan <psadhukhan@openjdk.org>
Date:      2023-02-20 14:47:45 +0000
URL:       https://git.openjdk.org/jdk/commit/e731695217b75fd55dc3e820c3123b8739a19c04
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
doc/building.md update link to jtreg builds,JDK-8302879,5094614,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,gdams,gdams,gdams,2023-02-20 06:18,2023-02-27 03:01,2023-10-01 09:56,2023-02-20 14:00,,,,,,,,,21,infrastructure,,0,jdk17u-fix-request,jdk17u-fix-yes,jdk20u-fix-request,jdk20u-fix-SQE-ok,jdk20u-fix-yes,,,,,,,,,,,,The Eclipse Adoptium project recently moved its CI from ci.adoptopenjdk.net to ci.adoptium.net. The link to jtreg builds needs updating,,,,,,,,,,,JDK-8303235,JDK-8302986,JDK-8302999,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i30gln:",9223372036854775807,b11,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@429c566,,,,,,,,,"2023-02-20 06:31;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/12665
Date: 2023-02-20 14:22:40 +0000;;;","2023-02-20 14:00;dukebot;Changeset: bb3dfd6a
Author:    George Adams <gdams@openjdk.org>
Committer: Christoph Langer <clanger@openjdk.org>
Date:      2023-02-20 21:58:55 +0000
URL:       https://git.openjdk.org/jdk/commit/bb3dfd6adbb58871bc7238107ed254831b22d48b
;;;","2023-02-20 14:11;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk19u/pull/107
Date: 2023-02-20 22:04:14 +0000;;;","2023-02-20 14:23;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk20u/pull/8
Date: 2023-02-20 22:17:48 +0000;;;","2023-02-20 14:38;gdams;fix request (20u)

Docs change only, no risk to build system;;;","2023-02-21 05:22;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/1183
Date: 2023-02-21 13:16:31 +0000;;;","2023-02-25 02:36;gdams;fix request (17u) 

Docs change only, no risk to build system
Edit
;;;",,,,,,,,,,,,,,,,,,,,,,,,
Illegal bytecode for break from if with instanceof pattern matching condition,JDK-8302865,5094424,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,jlahoda,webbuggrp,webbuggrp,2023-02-16 23:57,2023-07-12 13:20,2023-10-01 09:56,2023-06-21 02:18,16,17,19,20,21,,,,22,tools,,0,dcsad,hgupdate-sync,reproducer-yes,webbug,,,,,,,,,,,,,"ADDITIONAL SYSTEM INFORMATION :
Same result was obtained when testing under OSX/ARM64.

A DESCRIPTION OF THE PROBLEM :
When a Java method contains a labeled if condition with an instanceof pattern matching condition and then in the body does a break using that label, the compiler doesn't complain if any successor statements dereference the pattern variable. The produced code is illegal and results in a VerifyError when executed in the JVM.

The simple example under ""Source code for an executable test case results in the following error when compiled and executed:

Error: Unable to initialize main class T
Caused by: java.lang.VerifyError: Bad local variable type
Exception Details:
  Location:
    T.main([Ljava/lang/String;)V @18: aload_2
  Reason:
    Type top (current frame, locals[2]) is not assignable to reference type
  Current Frame:
    bci: @18
    flags: { }
    locals: { '[Ljava/lang/String;', 'java/lang/Object' }
    stack: { 'java/io/PrintStream' }
  Bytecode:
    0000000: 1207 4c2b c100 0999 0008 2bc0 0009 4db2
    0000010: 000b 2cb6 0011 b1
  Stackmap Table:
    append_frame(@15,Object[#2])


STEPS TO FOLLOW TO REPRODUCE THE PROBLEM :
Compile and execute the example class provided in ""Source code for an executable test case"".

EXPECTED VERSUS ACTUAL BEHAVIOR :
EXPECTED -
The code should fail to compile, because when breaking out of the if body the object `o` tested with instanceof is known not to be of type String and the pattern variable `s` should therefore not be dereferencable.
ACTUAL -
The code is compiled successfully (javap output pasted below) but fails to run in the JVM.

  public static void main(java.lang.String[]);
    Code:
       0: ldc           #7                  // String hello
       2: astore_1
       3: aload_1
       4: instanceof    #9                  // class java/lang/String
       7: ifeq          15
      10: aload_1
      11: checkcast     #9                  // class java/lang/String
      14: astore_2
      15: getstatic     #11                 // Field java/lang/System.out:Ljava/io/PrintStream;
      18: aload_2
      19: invokevirtual #17                 // Method java/io/PrintStream.println:(Ljava/lang/String;)V
      22: return


---------- BEGIN SOURCE ----------
class T {
    public static void main(String[] args) {
        Object o = ""hello"";
        X: if (!(o instanceof String s)) {
            break X;
        }
        System.out.println(s);
    }
}

---------- END SOURCE ----------

FREQUENCY : always


",,,,,,,,,,,JDK-8311328,JDK-8310504,,,,,,,,,,,,,,,,JDK-8310016,,,,,,,,,,,,,JDK-8305701,,,,"2023-02-20 03:39;adev;Test.java;https://bugs.openjdk.org/secure/attachment/102719/Test.java",,,,,,,,,,,,generic,,,,,,,,,,generic,,,,,,"0|i30fff:",9223372036854775807,b03,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4dca67bd,,,,,,,,,"2023-02-20 03:39;adev;The issue is reproducible:
PS C:\test> C:\jdk\jdk-17.0.5_windows-x64_bin\jdk-17.0.5\bin\java Test
Error: Unable to initialize main class Test
Caused by: java.lang.VerifyError: Bad local variable type
Exception Details:
  Location:
    Test.main([Ljava/lang/String;)V @18: aload_2
  Reason:
    Type top (current frame, locals[2]) is not assignable to reference type
  Current Frame:
    bci: @18
    flags: { }
    locals: { '[Ljava/lang/String;', 'java/lang/Object' }
    stack: { 'java/io/PrintStream' }
  Bytecode:
    0000000: 1207 4c2b c100 0999 0008 2bc0 0009 4db2
    0000010: 000b 2cb6 0011 b1
  Stackmap Table:
    append_frame(@15,Object[#2]);;;","2023-06-16 06:13;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/14517
Date: 2023-06-16 11:52:08 +0000;;;","2023-06-21 02:18;dukebot;Changeset: a15db1a5
Author:    Jan Lahoda <jlahoda@openjdk.org>
Date:      2023-06-21 09:15:48 +0000
URL:       https://git.openjdk.org/jdk/commit/a15db1a56c560406eac0ac60c29a0ffd15984267
;;;","2023-06-21 02:26;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk21/pull/47
Date: 2023-06-21 09:18:17 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,
Typo in FlightRecorderMXBeanImpl,JDK-8302856,5094593,Bug,Resolved,JDK,JDK,software,duke,,,P5,Fixed,pminborg,pminborg,pminborg,2023-02-20 02:45,2023-02-22 23:21,2023-10-01 09:56,2023-02-22 02:32,,,,,,,,,21,core-svc,,0,,,,,,,,,,,,,,,,,"The method ""createNotication()"" is misspelled and the exception message is also misspelled.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i30ggz:",9223372036854775807,b11,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@411d4af6,,,,,,,,,"2023-02-20 02:53;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/12655
Date: 2023-02-20 10:46:36 +0000;;;","2023-02-22 02:32;dukebot;Changeset: 60a35817
Author:    Per Minborg <pminborg@openjdk.org>
Date:      2023-02-22 10:29:40 +0000
URL:       https://git.openjdk.org/jdk/commit/60a358172a261d56bfa27fef6fabec2a54b4f352
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
SurfaceManager might expose partially constructed object,JDK-8302849,5094587,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,pminborg,pminborg,pminborg,2023-02-20 02:19,2023-08-07 14:50,2023-10-01 09:56,2023-02-22 03:48,17,,,,,,,,21,client-libs,,0,amazon-interest,jdk17u-fix-request,jdk17u-fix-yes,,,,,,,,,,,,,,"SurfaceManager is using a lazily initialized cacheMap that is initialized using a double-checked locking mechanism. Generally, objects initialized using such constructs need to be declared volatile.

See https://en.wikipedia.org/wiki/Double-checked_locking#Usage_in_Java",,,,,,,,,,,JDK-8305459,JDK-8304984,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i30gfn:",9223372036854775807,b11,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@5a9b3fd3,,,,,,,,,"2023-02-20 02:33;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/12654
Date: 2023-02-20 10:25:34 +0000;;;","2023-02-22 03:48;dukebot;Changeset: 63ef2143
Author:    Per Minborg <pminborg@openjdk.org>
Date:      2023-02-22 11:45:51 +0000
URL:       https://git.openjdk.org/jdk/commit/63ef2143289f4aac52c8b2a6b555ed2b33dc1c07
;;;","2023-03-26 17:11;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/1215
Date: 2023-03-24 07:33:29 +0000;;;","2023-03-26 18:01;serb;Fix request (17u)

Clean backport. Small fix for the implementation of DCL in java2d.

Review 17u-dev: https://github.com/openjdk/jdk17u-dev/pull/1215
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,
IGV: Zoom stuck when zooming out on large graphs,JDK-8302846,5094584,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,tholenstein,tholenstein,tholenstein,2023-02-20 01:51,2023-03-28 01:11,2023-10-01 09:56,2023-02-21 05:50,21,,,,,,,,21,hotspot,,0,igv,oracle-triage-11,oracle-triage-17,oracle-triage-21,,,,,,,,,,,,,"To reproduce:
1) open a very large graph
2) zoom out using the mouse wheel
3) when at min. zoom level (1% for example graph) the user cannot zoom in again using the mouse wheel",,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8297694,,,,,,,,,,,,,,,,,,,"2023-02-20 01:50;tholenstein;large_graph.xml;https://bugs.openjdk.org/secure/attachment/102715/large_graph.xml",,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i30gez:",9223372036854775807,b11,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2023-02-20 03:55;thartmann;ILW = Zooming in IGV stuck, when zooming out completely, reset zoom level via dropdown = MML = P4;;;","2023-02-20 05:16;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/12652
Date: 2023-02-20 09:55:29 +0000;;;","2023-02-21 05:50;dukebot;Changeset: 02eb240c
Author:    Tobias Holenstein <tholenstein@openjdk.org>
Date:      2023-02-21 13:48:49 +0000
URL:       https://git.openjdk.org/jdk/commit/02eb240c7126cf539baca21869ee2b382b28708c
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,
jabswitch main() should avoid calling exit explicitly,JDK-8302838,5094577,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,jwaters,jwaters,jwaters,2023-02-20 00:10,2023-02-22 23:20,2023-10-01 09:56,2023-02-21 22:29,,,,,,,,,21,client-libs,,0,,,,,,,,,,,,,,,,,"In jabswitch, main is defined as `void main()`, which requires an explicit exit call whenever an error occurs, and extra error checking code on our part. Visual C++ will automatically convert all instances of `void main()` to return 0 in all cases anyway, and there isn't anything gained from using this custom signature when the same can be achieved by simply returning the error value normally, so I propose we simply change it to the regular `int main` signature",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8288293,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,windows,,,,,,"0|i30gdf:",9223372036854775807,b11,,,,,,,,,,,"2023-02-20 00:17;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/12650
Date: 2023-02-20 08:10:54 +0000;;;","2023-02-21 22:29;dukebot;Changeset: cba817ae
Author:    Julian Waters <jwaters@openjdk.org>
Date:      2023-02-22 06:27:52 +0000
URL:       https://git.openjdk.org/jdk/commit/cba817ae590d1130196d7f9d6e75b8d9b37d384b
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Kernel32.cpp array memory release invokes undefined behaviour,JDK-8302837,5094575,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,jwaters,jwaters,jwaters,2023-02-19 23:46,2023-02-22 23:19,2023-10-01 09:56,2023-02-21 04:00,,,,,,,,,21,tools,,0,,,,,,,,,,,,,,,,,"When several arrays are allocated with the new operator in Kernel32, they use the wrong set of delete operators when freeing the allocated memory. In C++ this is undefined behaviour and they should be converted to use the correct operators",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8288293,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i30gcz:",9223372036854775807,b11,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@ef6d34f,,,,,,,,,"2023-02-19 23:47;jwaters;I have no idea what category this fits under, assigning to hotspot -> runtime temporarily until I can figure out what to properly assign this to;;;","2023-02-19 23:52;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/12649
Date: 2023-02-20 07:47:48 +0000;;;","2023-02-20 13:21;dholmes;Moved to tools->jshell based on other updates to this file.;;;","2023-02-21 04:00;dukebot;Changeset: 644fe0a9
Author:    Julian Waters <jwaters@openjdk.org>
Date:      2023-02-21 11:58:44 +0000
URL:       https://git.openjdk.org/jdk/commit/644fe0a9943e22654673265341ad922e51a78fe0
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,
PPC: compiler/codecache/TestStressCodeBuffers.java fails after JDK-8301819,JDK-8302831,5094569,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,rrich,rrich,rrich,2023-02-19 23:34,2023-02-22 23:20,2023-10-01 09:56,2023-02-21 22:32,21,,,,,,,,21,hotspot,,0,c2,oraclejdk-na,oracle-triage-21,ppc,,,,,,,,,,,,,"# Symptom

The test compiler/codecache/TestStressCodeBuffers.java often crashes after continuations are enabled by default (JDK-8301819)

# Analysis

The tests causes CodeBuffer::expand() to fail in increasing intervals. There are execution paths that lack a check if C2 compilation is failing before calling MacroAssembler::post_call_nop() where the crash happens when the nop instruction is written after code buffer expansion failed.

Crashes happen after JDK-8301819 because post_call_nop() does not emit instructions if continuations are disabled.

# Head of hs_err log

#
# A fatal error has been detected by the Java Runtime Environment:
#
#  SIGSEGV (0xb) at pc=0x00007581321f16c0, pid=88435, tid=88450
#
# JRE version: OpenJDK Runtime Environment (21.0) (fastdebug build 21-internal-adhoc.openjdk.jdk)
# Java VM: OpenJDK 64-Bit Server VM (fastdebug 21-internal-adhoc.openjdk.jdk, compiled mode, sharing, compressed oops, compressed class ptrs, g1 gc, linux-ppc64le)
# Problematic frame:
# V  [libjvm.so+0x14416c0]  Assembler::ori(Register, Register, int) [clone .constprop.101]+0x60
#
# Core dump will be written. Default location: Core dumps may be processed with ""/usr/share/apport/apport %p %s %c %d %P"" (or dumping to .../.../JTwork/scratch/core.88435)
#
# If you would like to submit a bug report, please visit:
#   https://bugreport.java.com/bugreport/crash.jsp
#

---------------  S U M M A R Y ------------

Command Line: -Dtest.vm.opts=-Xmx768m -Djava.awt.headless=true -Djava.util.prefs.userRoot=.../.../tmp -Djava.io.tmpdir=.../.../tmp -Dtest.getfreeport.max.tries=40 -ea -esa -Dtest.tool.vm.opts=-J-Xmx768m -J-Djava.awt.headless=true -J-Djava.util.prefs.userRoot=.../.../tmp -J-Djava.io.tmpdir=.../.../tmp -J-Dtest.getfreeport.max.tries=40 -J-ea -J-esa -Dtest.compiler.opts= -Dtest.java.opts= -Dtest.jdk=.../sapjvm_21 -Dcompile.jdk=.../sapjvm_21 -Dtest.timeout.factor=6.0 -Dtest.nativepath=.../.../test/hotspot/jtreg/native -Dtest.root=.../.../test/hotspot/jtreg -Dtest.name=compiler/codecache/TestStressCodeBuffers.java -Dtest.file=.../.../test/hotspot/jtreg/compiler/codecache/TestStressCodeBuffers.java -Dtest.src=.../.../test/hotspot/jtreg/compiler/codecache -Dtest.src.path=.../.../test/hotspot/jtreg/compiler/codecache -Dtest.classes=.../.../JTwork/classes/compiler/codecache/TestStressCodeBuffers.d -Dtest.class.path=.../.../JTwork/classes/compiler/codecache/TestStressCodeBuffers.d -Dtest.class.path.prefix=.../.../JTwork/classes/compiler/codecache/TestStressCodeBuffers.d:.../.../test/hotspot/jtreg/compiler/codecache -Xmx768m -Djava.awt.headless=true -Djava.util.prefs.userRoot=.../.../tmp -Djava.io.tmpdir=.../.../tmp -Dtest.getfreeport.max.tries=40 -ea -esa -Djava.library.path=.../.../test/hotspot/jtreg/native -Xcomp -XX:-TieredCompilation -XX:+StressCodeBuffers com.sun.javatest.regtest.agent.MainWrapper .../.../JTwork/compiler/codecache/TestStressCodeBuffers.d/main.0.jta

Host: ..., POWER9 (architected), altivec supported, 128 cores, 54G, Ubuntu 18.04.3 LTS
Time: Sun Feb 12 22:51:42 2023 CET elapsed time: 1.024270 seconds (0d 0h 0m 1s)

---------------  T H R E A D  ---------------

Current thread (0x000075812c4faef0):  JavaThread ""C2 CompilerThread0"" daemon [_thread_in_native, id=88450, stack(0x00007580fb400000,0x00007580fb800000)]


Current CompileTask:
C2:   1024  126    b        java.lang.invoke.MethodHandles$Lookup::unreflectField (126 bytes)

Stack: [0x00007580fb400000,0x00007580fb800000],  sp=0x00007580fb7fa080,  free space=4072k
Native frames: (J=compiled Java code, j=interpreted, Vv=VM code, C=native code)
V  [libjvm.so+0x14416c0]  Assembler::ori(Register, Register, int) [clone .constprop.101]+0x60  (codeBuffer.hpp:239)
V  [libjvm.so+0x1448e54]  MacroAssembler::post_call_nop()+0x54  (assembler_ppc.inline.hpp:245)
V  [libjvm.so+0x30fd4c]  CallStaticJavaDirectNode::emit(CodeBuffer&, PhaseRegAlloc*) const+0x37c  (ppc.ad:3453)
V  [libjvm.so+0x16be5c4]  PhaseOutput::fill_buffer(CodeBuffer*, unsigned int*)+0x594  (output.cpp:1617)
V  [libjvm.so+0x9aa098]  Compile::Code_Gen()+0x4e8  (compile.cpp:2971)
V  [libjvm.so+0x9ae9d4]  Compile::Compile(ciEnv*, ciMethod*, int, Options, DirectiveSet*)+0x1604  (compile.cpp:866)
V  [libjvm.so+0x73e1ac]  C2Compiler::compile_method(ciEnv*, ciMethod*, int, bool, DirectiveSet*)+0x21c  (c2compiler.cpp:113)
V  [libjvm.so+0x9bf990]  CompileBroker::invoke_compiler_on_method(CompileTask*)+0xaf0  (compileBroker.cpp:2237)
V  [libjvm.so+0x9c0498]  CompileBroker::compiler_thread_loop()+0x6d8  (compileBroker.cpp:1916)
V  [libjvm.so+0x9f7d34]  CompilerThread::thread_entry(JavaThread*, JavaThread*)+0x44  (compilerThread.cpp:58)
V  [libjvm.so+0xfdfbe0]  JavaThread::thread_main_inner()+0x2c0  (javaThread.cpp:710)
V  [libjvm.so+0x1b95508]  Thread::call_run()+0x148  (thread.cpp:224)
V  [libjvm.so+0x168de94]  thread_native_entry(Thread*)+0x174  (os_linux.cpp:737)
C  [libpthread.so.0+0x885c]  start_thread+0x10c

siginfo: si_signo: 11 (SIGSEGV), si_code: 3 (unknown), si_addr: 0xfffffffffffffffe",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8301819,,,,,,,,,,,,,,,,,,,,,ppc,,,,,,,,,,,,,,,,"0|i30gbn:",9223372036854775807,b11,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2023-02-20 03:58;thartmann;This is similar to JDK-8298720.

ILW = Same as JDK-8298720 = P3;;;","2023-02-21 02:37;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/12685
Date: 2023-02-21 10:24:08 +0000;;;","2023-02-21 22:32;dukebot;Changeset: f54e1080
Author:    Richard Reingruber <rrich@openjdk.org>
Date:      2023-02-22 06:29:48 +0000
URL:       https://git.openjdk.org/jdk/commit/f54e1080c5a1da558f548d8eb93f7dfcb6c05979
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,
INT_ARGB_PRE Pixelformat - Copy int[] data directly to the native texture without creating intermediate byte[],JDK-8302829,5094566,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,aghaisas,aghaisas,aghaisas,2023-02-19 21:42,2023-02-19 22:05,2023-10-01 09:56,2023-02-19 22:04,internal,,,,,,,,internal,javafx,,0,javafx-metal,sn_138,,,,,,,,,,,,,,,"INT_ARGB_PRE Pixelformat implementation of Metal pipeline uses an intermediate byte[] while copying int[] data to the native metal texture.

This can be easily avoided by directly copying the int[] to the native metal texture.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8301669,,,,,,,,,,,,,,,,,,,,,generic,,,,,,,,,,os_x,,,,,,"0|i30gaz:",9223372036854775807,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4143e3f7,,,,,,,,,"2023-02-19 22:04;aghaisas;Changeset: 9a705e73
Author:    aghaisas <ajitgh@gmail.com>
Date:      2023-02-20 11:32:23 +0000
URL:       https://git.openjdk.org/jfx-sandbox/commit/9a705e73a2a2bd743118c5e9ac85f01ddf59edfe;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Method/Field/Constructor/RecordComponent::getGenericInfo() is not thread safe,JDK-8302822,5094555,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,liach,liach,liach,2023-02-19 10:34,2023-06-08 17:44,2023-10-01 09:56,2023-06-01 08:34,19,,,,,,,,21,core-libs,,0,,,,,,,,,,,,,,,,,"In the getGenericInfo() methods of Method, Field, Constructor, and RecordComponent, the genericInfo field is read twice, and the second read returned may be null under race conditions.

Class::getGenericInfo() originally had the same issue, but was fixed in 8016236.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8016236,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i30g8j:",9223372036854775807,b26,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@313ae9a0,,,,,,,,,"2023-02-19 10:47;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/12643
Date: 2023-02-19 18:41:18 +0000;;;","2023-06-01 08:34;dukebot;Changeset: be36096a
Author:    Chen Liang <liach@openjdk.org>
Committer: Claes Redestad <redestad@openjdk.org>
Date:      2023-06-01 15:31:51 +0000
URL:       https://git.openjdk.org/jdk/commit/be36096a19bcfc12e789cdeaaa51d746567ac638
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
JFR: Periodic task thread spins after recording has stopped,JDK-8302821,5094554,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,egahlin,egahlin,egahlin,2023-02-19 10:04,2023-03-01 22:55,2023-10-01 09:56,2023-02-23 11:55,17,21,,,,,,,21,hotspot,,0,,,,,,,,,,,,,,,,,"Running the following program:

import jdk.jfr.Recording;
import jdk.jfr.Configuration;
public class P {
  public static void main(String... args) throws Exception {
    Configuration c = Configuration.getConfiguration(""default"");
    try (Recording r = new Recording(c)) {
       r.start();
       Thread.sleep(10_000);
    }
    System.out.println(""Recording finished"");
    Thread.sleep(1000_000);
  }
}

With the following line added to RequestEngine.java:

     private static long run_requests(Collection<RequestHook> entries, long eventTimestamp) {
         long last = lastTimeMillis;
+        System.out.println(""Time: "" + last);
         // The interval for periodic events is typically at least 1 s, so
         // System.currentTimeMillis() is sufficient. JVM.counterTime() lacks

results in:

Time: 1676829368686
Time: 1676829368699
Time: 1676829368711
Time: 1676829368722
Time: 1676829368735
Time: 1676829368747
Time: 1676829368760
Time: 1676829368773
...

The ""JFR Periodic Task"" thread runs back-to-back, with about 13 ms between each each turn. One would expect the thread to be stopped or at least sleep/wait when a recording is finished. Furthermore, flush calls are made into JVM.after native JFR has been destroyed. 

I think this can explain som strange things we have seen, crashes or timeouts.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i30g8b:",9223372036854775807,b12,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@42995637,,,,,,,,,"2023-02-21 13:44;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/12702
Date: 2023-02-21 21:32:36 +0000;;;","2023-02-23 11:55;dukebot;Changeset: 6b24b4a7
Author:    Erik Gahlin <egahlin@openjdk.org>
Date:      2023-02-23 19:53:21 +0000
URL:       https://git.openjdk.org/jdk/commit/6b24b4a70fac9ef1e9554fbbb2c7e1aa991ccc33
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
ArrayIndexOutOfBoundsException in TextRun.getWrapIndex(),JDK-8302797,5094528,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,prr,angorya,angorya,2023-02-17 13:08,2023-03-16 11:02,2023-10-01 09:56,2023-03-09 12:59,jfx21,,,,,,,,jfx21,javafx,,0,sn_139,,,,,,,,,,,,,,,,"TextFlow with the following text and font set to ""Noto Sans Arabic Regular 12"" throws ArrayIndexOutOfBoundsException at certain width.

To reproduce, one can use the monkey tester, TextFlow page, select Wrap Index Bug text, select ""Noto Sans Arabic Regular 12"" font and try to reduce the width of the TextFlow pane.
The issue cannot be reproduced with Al Bayan Bold font, for example.
Oriya MN - fails
American Typewriter - fails
Al Tarikh Regular - ok (baseline issue?)
Apple Chancery - fails
Arial - fails
Verdana - fails
Tahoma - ok



```
Exception in thread ""JavaFX Application Thread"" java.lang.ArrayIndexOutOfBoundsException: Index 14 out of bounds for length 14
	at javafx.graphics/com.sun.javafx.text.TextRun.getWrapIndex(TextRun.java:291)
	at javafx.graphics/com.sun.javafx.text.PrismTextLayout.layout(PrismTextLayout.java:1104)
	at javafx.graphics/com.sun.javafx.text.PrismTextLayout.ensureLayout(PrismTextLayout.java:230)
	at javafx.graphics/com.sun.javafx.text.PrismTextLayout.getBounds(PrismTextLayout.java:256)
	at javafx.graphics/javafx.scene.text.TextFlow.computePrefHeight(TextFlow.java:273)
	at javafx.graphics/javafx.scene.text.TextFlow.computeMinHeight(TextFlow.java:282)
	at javafx.graphics/javafx.scene.Parent.minHeight(Parent.java:1069)
	at javafx.graphics/javafx.scene.layout.Region.minHeight(Region.java:1570)
	at javafx.graphics/javafx.scene.layout.Region.computeChildMinAreaHeight(Region.java:1980)
	at javafx.graphics/javafx.scene.layout.BorderPane.getAreaHeight(BorderPane.java:629)
	at javafx.graphics/javafx.scene.layout.BorderPane.computeMinHeight(BorderPane.java:423)
	at javafx.graphics/javafx.scene.Parent.minHeight(Parent.java:1069)
	at javafx.graphics/javafx.scene.layout.Region.minHeight(Region.java:1570)
	at javafx.graphics/javafx.scene.layout.Region.boundedNodeSizeWithBias(Region.java:2210)
	at javafx.graphics/javafx.scene.layout.Region.layoutInArea(Region.java:2611)
	at javafx.graphics/javafx.scene.layout.Region.layoutInArea(Region.java:2524)
	at javafx.graphics/javafx.scene.layout.Region.layoutInArea(Region.java:2465)
	at javafx.graphics/javafx.scene.layout.StackPane.layoutChildren(StackPane.java:344)
	at javafx.graphics/javafx.scene.Parent.layout(Parent.java:1208)
	at javafx.graphics/javafx.scene.Parent.layout(Parent.java:1215)
	at javafx.graphics/javafx.scene.Parent.layout(Parent.java:1215)
	at javafx.graphics/javafx.scene.Parent.layout(Parent.java:1215)
	at javafx.graphics/javafx.scene.Parent.layout(Parent.java:1215)
	at javafx.graphics/javafx.scene.Parent.layout(Parent.java:1215)
	at javafx.graphics/javafx.scene.Parent.layout(Parent.java:1215)
	at javafx.graphics/javafx.scene.Parent.layout(Parent.java:1215)
	at javafx.graphics/javafx.scene.Parent.layout(Parent.java:1215)
	at javafx.graphics/javafx.scene.Scene.doLayoutPass(Scene.java:594)
	at javafx.graphics/javafx.scene.Scene$ScenePulseListener.pulse(Scene.java:2596)
	at javafx.graphics/com.sun.javafx.tk.Toolkit.lambda$2(Toolkit.java:398)
	at java.base/java.security.AccessController.doPrivileged(AccessController.java:399)
	at javafx.graphics/com.sun.javafx.tk.Toolkit.runPulse(Toolkit.java:397)
	at javafx.graphics/com.sun.javafx.tk.Toolkit.firePulse(Toolkit.java:427)
	at javafx.graphics/com.sun.javafx.tk.quantum.QuantumToolkit.pulse(QuantumToolkit.java:592)
	at javafx.graphics/com.sun.javafx.tk.quantum.QuantumToolkit.pulse(QuantumToolkit.java:572)
	at javafx.graphics/com.sun.javafx.tk.quantum.QuantumToolkit.pulseFromQueue(QuantumToolkit.java:565)
	at javafx.graphics/com.sun.javafx.tk.quantum.QuantumToolkit.lambda$11(QuantumToolkit.java:352)
	at javafx.graphics/com.sun.glass.ui.InvokeLaterDispatcher$Future.run(InvokeLaterDispatcher.java:95)
```

The failure was noticed on Mac OS Ventura 13.1 with jfx 21 master branch.
Also fails on Windows 11 with the 'system' font and Arial font.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"2023-02-17 13:09;angorya;Screenshot 2023-02-17 at 13.01.23.png;https://bugs.openjdk.org/secure/attachment/102699/Screenshot+2023-02-17+at+13.01.23.png","2023-02-17 13:20;angorya;TextFlow_8302797.java;https://bugs.openjdk.org/secure/attachment/102700/TextFlow_8302797.java",,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i30g2j:",9223372036854775807,b09,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4143e3f7,,,,,,,,,"2023-03-07 11:51;prr;The problem is in TextRun.java when iterating over the glyph positions assigned by OpenType/AAT layout to find the break point.

The (x,y) positions array looks like this
posarr=[3.9, -1.92, 0.0, 0.0, 13.584, 0.324, 13.116, 0.0, 18.072, 1.824, 17.592, 0.0, 22.536, 0.0, ]

Even values are for x pos, ie :-
posarr=[3.9, 0.0, 13.584, 13.116,  18.072, 17.592, 22.536, ]

There are 6 glyphs and total advance is 22.536

The code iterates over this clearly expecting a monotonically increasing x position
But perhaps due to where base glyphs and diacritics are placed it isn't like that.
There are several locations here where x(g[i]) > x(g[i+1])

The subtraction logic clearly expects pos[0] to be zero.

In the case of the exception the fn is asked to break at a very small wrapping width which
is less than pos[0] and we can never achieve that. And there's no check to see if we've
reached the end of the array, hence the exception.

Such a check would seem very prudent but I think we also need to change the way the
code is accumulating run width so instead of doing
runWidth -= glyphWidth
we should reverse  iterate over the array comparing the position with the target. ;;;","2023-03-07 12:01;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jfx/pull/1055
Date: 2023-03-07 19:54:15 +0000;;;","2023-03-09 12:59;dukebot;Changeset: 8cda7bc6
Author:    Phil Race <prr@openjdk.org>
Date:      2023-03-09 20:58:23 +0000
URL:       https://git.openjdk.org/jfx/commit/8cda7bc6a65893edb7ce6c2b9624d075412ed4ab
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,
Shared archive failed on old version class with jsr bytecode,JDK-8302795,5094526,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,ccheung,minqi,minqi,2023-02-17 12:20,2023-03-20 18:07,2023-10-01 09:56,2023-03-14 10:16,21,,,,,,,,21,hotspot,,0,cds,verifier,,,,,,,,,,,,,,,"CDS can archive old version class lower than version 50. Some old version class contain 'jsr' which is not generated in newer version. CDS will run fail on sharing CDS with old version with 'jsr'.

Here is the simple test:
import org.apache.xerces.parsers.SAXParser;
public class SaxExample {
    public static void main(String... args) throws Exception {
        SAXParser parser = new SAXParser();
        System.out.println(""Hello, SAXParser world!"");
    }
}

You can get the version of xercesImpl-2.12.0.jar from here:
https://mvnrepository.com/artifact/xerces/xercesImpl/2.12.0

put this jar on path, and create CDS archive, run with it then get:
---------------  T H R E A D  ---------------

Current thread (0xf5918040):  JavaThread ""main"" [_thread_in_vm, id=17441, stack(0xf5af8000,0xf5b49000)]

Stack: [0xf5af8000,0xf5b49000],  sp=0xf5b4796c,  free space=318k
Native frames: (J=compiled Java code, j=interpreted, Vv=VM code, C=native code)
V  [libjvm.so+0x580d94]  Array<Method*>::at_put(int, Method* const&)+0x68
V  [libjvm.so+0xca9679]  Rewriter::Rewriter(InstanceKlass*, constantPoolHandle const&, Array<Method*>*, JavaThread*)+0x369
V  [libjvm.so+0xca9289]  Rewriter::rewrite(InstanceKlass*, JavaThread*)+0x119
V  [libjvm.so+0x858451]  InstanceKlass::rewrite_class(JavaThread*)+0xa5
V  [libjvm.so+0x858141]  InstanceKlass::link_class_impl(JavaThread*)+0x3a1
V  [libjvm.so+0x857cfb]  InstanceKlass::link_class(JavaThread*)+0x67
V  [libjvm.so+0x8586cf]  InstanceKlass::initialize_impl(JavaThread*)+0x55
V  [libjvm.so+0x857c11]  InstanceKlass::initialize(JavaThread*)+0x2d
V  [libjvm.so+0xa5b853]  LinkResolver::resolve_static_call(CallInfo&, LinkInfo const&, bool, JavaThread*)+0x97
V  [libjvm.so+0xa5e522]  LinkResolver::resolve_invokestatic(CallInfo&, constantPoolHandle const&, int, JavaThread*)+0x50
V  [libjvm.so+0xa5e181]  LinkResolver::resolve_invoke(CallInfo&, Handle, constantPoolHandle const&, int, Bytecodes::Code, JavaThread*)+0x41
V  [libjvm.so+0x877964]  InterpreterRuntime::resolve_invoke(JavaThread*, Bytecodes::Code)+0x2b0
V  [libjvm.so+0x8782b0]  InterpreterRuntime::resolve_from_cache(JavaThread*, Bytecodes::Code)+0x8e
j  org.apache.xerces.parsers.SAXParser.<init>(Lorg/apache/xerces/util/SymbolTable;Lorg/apache/xerces/xni/grammars/XMLGrammarPool;)V+5
j  org.apache.xerces.parsers.SAXParser.<init>()V+3
j  SaxExample.main([Ljava/lang/String;)V+4
v  ~StubRoutines::call_stub
V  [libjvm.so+0x882e51]  JavaCalls::call_helper(JavaValue*, methodHandle const&, JavaCallArguments*, JavaThread*)+0x3eb
V  [libjvm.so+0xbf997b]  os::os_exception_wrapper(void (*)(JavaValue*, methodHandle const&, JavaCallArguments*, JavaThread*), JavaValue*, methodHandle const&, JavaCallArguments*, JavaThread*)+0x21
V  [libjvm.so+0x882a5c]  JavaCalls::call(JavaValue*, methodHandle const&, JavaCallArguments*, JavaThread*)+0x2e
V  [libjvm.so+0x9357c1]  jni_invoke_static(JNIEnv_*, JavaValue*, _jobject*, JNICallType, _jmethodID*, JNI_ArgumentPusher*, JavaThread*)+0x185
V  [libjvm.so+0x93feb3]  jni_CallStaticVoidMethod+0x110
C  [libjli.so+0x8a27]  JavaMain+0xb26
C  [libjli.so+0xe987]  ThreadJavaMain+0x30
C  [libpthread.so.0+0x6bbc]  start_thread+0xcc

'jsr' gets rewritten then the code is wrriten back to the read only shared region.

Maybe the fix could like this?
diff --git a/src/hotspot/share/interpreter/rewriter.cpp b/src/hotspot/share/interpreter/rewriter.cpp
index 080735ba41d..92a7af2cf0b 100644
--- a/src/hotspot/share/interpreter/rewriter.cpp
+++ b/src/hotspot/share/interpreter/rewriter.cpp
@@ -617,6 +617,9 @@ Rewriter::Rewriter(InstanceKlass* klass, const constantPoolHandle& cpool, Array<
   // rewritten in the RO section of the shared archive.
   // Relocated bytecodes don't have to be restored, only the cp cache entries
   int len = _methods->length();
+  // Don't write back to RO space for old jsr rewritten, the rewritten still
+  // needed for contant pool indices
+  bool do_update = !(UseSharedSpaces && _klass->is_shared() && _klass->major_version() < 50);
   for (int i = len-1; i >= 0; i--) {
     methodHandle m(THREAD, _methods->at(i));

@@ -630,7 +633,9 @@ Rewriter::Rewriter(InstanceKlass* klass, const constantPoolHandle& cpool, Array<
         return;
       }
       // Method might have gotten rewritten.
-      methods->at_put(i, m());
+      if (do_update) {
+        methods->at_put(i, m());
+      }
     }
   }
 }
 ",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i30g23:",9223372036854775807,b14,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,,,"2023-02-17 15:54;ccheung;Some initial findings. The Method at crash:

(gdb) print (Method)*0x800246a90
$19 = {<Metadata> = {<MetaspaceObj> = {
      static _shared_metaspace_base = 0x800000000, 
      static _shared_metaspace_top = 0x80092e000}, 
    _vptr.Metadata = 0x800000808, _valid = 0}, _constMethod = 0x800246b00, 
  _method_data = 0x0, _method_counters = 0x0, _adapter = 0x0, 
  _access_flags = {_flags = 276824074}, _vtable_index = -4, 
  _intrinsic_id = 0, _flags = 0, _trace_flags = {_flags = 0}, 
  _compiled_invocation_count = 0, _name = 0x8004b5de0, _i2i_entry = 0x0, 
  _from_compiled_entry = 0x0, _code = 0x0, _from_interpreted_entry = 0x0}

(gdb) print (ConstantPool)*0x800245510
$17 = {<Metadata> = {<MetaspaceObj> = {
      static _shared_metaspace_base = 0x800000000, 
      static _shared_metaspace_top = 0x80092e000}, 
    _vptr.Metadata = 0x800000060, _valid = 0}, _tags = 0x800245e18, 
  _cache = 0x7fab844020a8, _pool_holder = 0x800245308, _operands = 0x0, 
  _resolved_klasses = 0x800245f38, _major_version = 47, _minor_version = 0, 
  _generic_signature_index = 0, _source_file_name_index = 0, _flags = 6, 
  _length = 279, _saved = {_resolved_reference_length = 0, _version = 0}}

(gdb) print ((Method)*0x800246a90)._name
$20 = (Symbol *) 0x8004b5de0
(gdb) x/s &(((Method)*0x800246a90)._name._body)
0x8004b5de6:	""findJarServiceProvider""

The method is from the following class:
org/apache/xerces/parsers/ObjectFactory;;;","2023-02-24 15:35;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/12752
Date: 2023-02-24 23:28:14 +0000;;;","2023-03-14 10:16;dukebot;Changeset: 830fd413
Author:    Calvin Cheung <ccheung@openjdk.org>
Date:      2023-03-14 17:15:19 +0000
URL:       https://git.openjdk.org/jdk/commit/830fd413461709a494bcb81952e5c32088676ee3
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,
CDS archive heap not reproducible after JDK-8296344,JDK-8302781,5094509,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,iklam,dcubed,dcubed,2023-02-17 08:20,2023-08-03 08:49,2023-10-01 09:56,2023-02-18 22:01,21,,,,,,,,21,hotspot,,0,cds,reproducible-build,tier4,,,,,,,,,,,,,,"After JDK-8296344, the identity_hash of archived Java objects become unpredictable (usually for -XX:-UseCompressedOops).

***********************************

The Mach5 Tier5 cmp-baseline task has been failing again
on macosx-aarch64, macosx-x64, linux-aarch64 and linux-x64.

The files being complained about are related to CDS.

Here's a log file snippet from the macosx-x64-cmp-baseline task:

[2023-02-16T07:22:51,678Z] JDK Other files with binary differences...
[2023-02-16T07:22:53,003Z] ./lib/server/classes_nocoops.jsa
[2023-02-16T07:22:53,003Z] Binary files /System/Volumes/Data/mesos/work_dir/slaves/91e16c40-06d4-468a-9fc3-7198a5bb7d5a-S84880/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/48898f90-0ce0-4db2-8162-e013d6755094/runs/a6e0c878-2894-4503-8013-b2aa826244c9/workspace/build/macosx-x64-cmp-baseline/images/jdk/./lib/server/classes_nocoops.jsa and /System/Volumes/Data/mesos/work_dir/slaves/91e16c40-06d4-468a-9fc3-7198a5bb7d5a-S84880/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/48898f90-0ce0-4db2-8162-e013d6755094/runs/a6e0c878-2894-4503-8013-b2aa826244c9/workspace/build/compare-build/macosx-x64-cmp-baseline/images/jdk/./lib/server/classes_nocoops.jsa differ
[2023-02-16T07:22:53,281Z] JDK Bundle Other files with binary differences...
[2023-02-16T07:22:54,543Z] ./jdk-21.jdk/Contents/Home/lib/server/classes_nocoops.jsa
[2023-02-16T07:22:54,543Z] Binary files /System/Volumes/Data/mesos/work_dir/slaves/91e16c40-06d4-468a-9fc3-7198a5bb7d5a-S84880/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/48898f90-0ce0-4db2-8162-e013d6755094/runs/a6e0c878-2894-4503-8013-b2aa826244c9/workspace/build/macosx-x64-cmp-baseline/images/jdk-bundle/./jdk-21.jdk/Contents/Home/lib/server/classes_nocoops.jsa and /System/Volumes/Data/mesos/work_dir/slaves/91e16c40-06d4-468a-9fc3-7198a5bb7d5a-S84880/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/48898f90-0ce0-4db2-8162-e013d6755094/runs/a6e0c878-2894-4503-8013-b2aa826244c9/workspace/build/compare-build/macosx-x64-cmp-baseline/images/jdk-bundle/./jdk-21.jdk/Contents/Home/lib/server/classes_nocoops.jsa differ
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8302746,,,,,,,,JDK-8296344,,,,,,,,,,,,,,,,aarch64,x86_64,,,,,,,,,linux,os_x,,,,,"0|i30fyb:",9223372036854775807,b11,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,,,"2023-02-17 08:52;erikj;In the first failing build, I found this change, JDK-8296344, which seems like the most likely culprit. I haven't bisected to prove it though.;;;","2023-02-17 14:21;iklam;Evaluation:

From ""java -Xshare:dump -XX:-UseCompressedOops -Xlog:cds+map=trace:file=old.map:none:filesize=0"", I can see that the differences are only in the header words (16 bytes) of the archived Java objects. And the only part of the difference is in the identity_hash part of the object header.

****

Before JDK-8296344, for each archived obj, we compute obj->identity_hash() when obj is discovered.

https://github.com/openjdk/jdk/blob/f1d76fa92501e45f25a7d33d8c5eee7ef60973eb/src/hotspot/share/cds/heapShared.cpp#L326-L332

Because we always traverse the archived objects in a specific order, the order of discovery is always the same. 

obj->identity_hash() eventually calls get_next_hash() in synchronizer.cpp

https://github.com/openjdk/jdk/blob/f1d76fa92501e45f25a7d33d8c5eee7ef60973eb/src/hotspot/share/runtime/synchronizer.cpp#L819-L825

get_next_hash() always produces the same sequences of numbers. Therefore, across different runs of ""java -Xshare:dump"", we can guarantee that every archived object is always assigned the same identity_hash

****

Since JDK-8296344, the identity_hash() is computed when we make a final copy of the archived object. The copying order depends on the iteration order of HeapShared::archived_object_cache(), which depends on the addresses of the objects.

When running with  -XX:-UseCompressedOops, the (source) archived objects will have different addresses across ""java -Xshare:dump"" runs. As a result, they get assigned different identity_hash().

https://github.com/openjdk/jdk/blob/6b082fb3c658524905a9a7b33dcb58e375c95c1b/src/hotspot/share/cds/archiveHeapWriter.cpp#L481-L501
;;;","2023-02-17 14:22;iklam;The fix is to call obj->identity_hash() at the same place as before  JDK-8296344. I.e., when obj is discovered.;;;","2023-02-17 20:46;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/12628
Date: 2023-02-18 04:27:31 +0000;;;","2023-02-18 22:01;dukebot;Changeset: 7abe2693
Author:    Ioi Lam <iklam@openjdk.org>
Date:      2023-02-19 05:59:12 +0000
URL:       https://git.openjdk.org/jdk/commit/7abe26935ab4356de54acee93390a0d8be1ea289
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,
"HelidonAppTest.java fails with ""assert(_cb == CodeCache::find_blob(pc())) failed: Must be the same"" or SIGSEGV",JDK-8302779,5094506,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,pchilanomate,dcubed,dcubed,2023-02-17 07:28,2023-03-16 00:18,2023-10-01 09:56,2023-03-09 14:55,21,,,,,,,,21,hotspot,,0,intermittent,loom,problemlist,test-bigapps-Helidon,tier5,,,,,,,,,,,,"The following test failed in the JDK21 CI:

applications/helidonapp/HelidonAppTest.java

Here's a log file snippet from the windows-x64 sighting:

The tail of stress stdout is:
For random generator using seed: -2693253877557377341
To re-run test with same seed value please add ""-Djdk.test.lib.random.seed=-2693253877557377341"" to command line.
Stress process main method is started.
#
# A fatal error has been detected by the Java Runtime Environment:
#
#  Internal Error (c:\\sb\\prod\\1676585231\\workspace\\open\\src\\hotspot\\cpu\\x86\\frame_x86.inline.hpp:385), pid=31248, tid=25848
#  assert(_cb == CodeCache::find_blob(pc())) failed: Must be the same
#
# JRE version: Java(TM) SE Runtime Environment (21.0+11) (fastdebug build 21-ea+11-LTS-809)
# Java VM: Java HotSpot(TM) 64-Bit Server VM (fastdebug 21-ea+11-LTS-809, mixed mode, tiered, compressed oops, compressed class ptrs, g1 gc, windows-amd64)
# Core dump will be written. Default location: C:\\sb\\prod\\1676617263\\testoutput\\test-support\\jtreg_closed_test_hotspot_jtreg_applications_helidonapp_HelidonAppTest_java\\scratch\\0\\hs_err_pid31248.mdmp
#
# JFR recording file will be written. Location: C:\\sb\\prod\\1676617263\\testoutput\\test-support\\jtreg_closed_test_hotspot_jtreg_applications_helidonapp_HelidonAppTest_java\\scratch\\0\\hs_err_pid31248.jfr
#
Unsupported internal testing APIs have been used.

# An error report file with more information is saved as:
# C:\\sb\\prod\\1676617263\\testoutput\\test-support\\jtreg_closed_test_hotspot_jtreg_applications_helidonapp_HelidonAppTest_java\\scratch\\0\\hs_err_pid31248.log

[error occurred during error reporting (), id 0xe0000000, Internal Error (c:\\sb\\prod\\1676585231\\workspace\\open\\src\\hotspot\\share\\runtime\\mutex.cpp:57)]
#
# If you would like to submit a bug report, please visit:
#   https://bugreport.java.com/bugreport/crash.jsp
#
----------System.err:(211/27663)*----------

Here's the crashing thread's stack:

---------------  T H R E A D  ---------------

Current thread (0x0000019f1008db00):  VMThread ""VM Thread"" [stack: 0x000000358e100000,0x000000358e200000] [id=25848]

Stack: [0x000000358e100000,0x000000358e200000]
Native frames: (J=compiled Java code, j=interpreted, Vv=VM code, C=native code)
V  [jvm.dll+0xbf7c01]  os::win32::platform_print_native_stack+0xf1  (os_windows_x86.cpp:236)
V  [jvm.dll+0xe70ec0]  VMError::report+0x10c0  (vmError.cpp:813)
V  [jvm.dll+0xe72afe]  VMError::report_and_die+0x6ce  (vmError.cpp:1593)
V  [jvm.dll+0xe73244]  VMError::report_and_die+0x64  (vmError.cpp:1352)
V  [jvm.dll+0x576d86]  report_vm_error+0x96  (debug.cpp:181)
V  [jvm.dll+0x3fb6d1]  frame::sender_raw+0x1c1  (frame_x86.inline.hpp:385)
V  [jvm.dll+0x7ea899]  JavaThread::metadata_do+0xf9  (javaThread.cpp:1421)
V  [jvm.dll+0xdf5d24]  Threads::metadata_do+0xb4  (threads.cpp:1346)
V  [jvm.dll+0xb586ab]  MetadataOnStackMark::MetadataOnStackMark+0x11b  (metadataOnStackMark.cpp:66)
V  [jvm.dll+0x9ff326]  VM_RedefineClasses::doit+0x96  (jvmtiRedefineClasses.cpp:262)
V  [jvm.dll+0xe7a4f8]  VM_Operation::evaluate+0xc8  (vmOperations.cpp:72)
V  [jvm.dll+0xe7c0dc]  VMThread::evaluate_operation+0x9c  (vmThread.cpp:282)
V  [jvm.dll+0xe7c816]  VMThread::inner_execute+0x256  (vmThread.cpp:431)
V  [jvm.dll+0xe7cb80]  VMThread::run+0x150  (vmThread.cpp:175)
V  [jvm.dll+0xde5ea3]  Thread::call_run+0x253  (thread.cpp:229)
V  [jvm.dll+0xbf6538]  os::win32::thread_native_entry+0xb8  (os_windows.cpp:550)
C  [ucrtbase.dll+0x2268a]
C  [KERNEL32.DLL+0x17974]
C  [ntdll.dll+0x5a0b1]

VM_Operation (0x000000358f0fed10): RedefineClasses, mode: safepoint, requested by thread 0x0000019f1114cad0


Please note that the windows-x64 crash above is different than the
macosx-x64 crash below:


Here's a log file snippet from the macosx-x64 crash:

The tail of stress stdout is:
For random generator using seed: -2693253877557377341
To re-run test with same seed value please add ""-Djdk.test.lib.random.seed=-2693253877557377341"" to command line.
Stress process main method is started.
#
# A fatal error has been detected by the Java Runtime Environment:
#
#  SIGSEGV (0xb) at pc=0x0000000000000000, pid=92554, tid=33539
#
# JRE version: Java(TM) SE Runtime Environment (21.0+11) (fastdebug build 21-ea+11-LTS-809)
# Java VM: Java HotSpot(TM) 64-Bit Server VM (fastdebug 21-ea+11-LTS-809, mixed mode, tiered, compressed oops, compressed class ptrs, g1 gc, bsd-amd64)
# Problematic frame:
# 
[error occurred during error reporting (printing problematic frame), id 0xe0000000, Internal Error (/System/Volumes/Data/mesos/work_dir/slaves/91e16c40-06d4-468a-9fc3-7198a5bb7d5a-S84884/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/dd857bcb-0874-431c-8be1-131d6448d003/runs/23b8b037-5a50-4109-bca8-8b1719b592b5/workspace/open/src/hotspot/cpu/x86/frame_x86.inline.hpp:62)]
# Core dump will be written. Default location: core.92554
#
# JFR recording file will be written. Location: /System/Volumes/Data/mesos/work_dir/slaves/91e16c40-06d4-468a-9fc3-7198a5bb7d5a-S84886/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/4f5ae565-bb45-4d73-98fc-6d4c3b598aa6/runs/31169f6b-7075-4000-b0fa-67b165549523/testoutput/test-support/jtreg_closed_test_hotspot_jtreg_applications_helidonapp_HelidonAppTest_java/scratch/0/hs_err_pid92554.jfr
#
Unsupported internal testing APIs have been used.

# An error report file with more information is saved as:
# /System/Volumes/Data/mesos/work_dir/slaves/91e16c40-06d4-468a-9fc3-7198a5bb7d5a-S84886/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/4f5ae565-bb45-4d73-98fc-6d4c3b598aa6/runs/31169f6b-7075-4000-b0fa-67b165549523/testoutput/test-support/jtreg_closed_test_hotspot_jtreg_applications_helidonapp_HelidonAppTest_java/scratch/0/hs_err_pid92554.log
#
# If you would like to submit a bug report, please visit:
#   https://bugreport.java.com/bugreport/crash.jsp
#
----------System.err:(188/31508)----------

Here's the calling thread's stack (not much there):

---------------  T H R E A D  ---------------

Current thread (0x00007fd27d31fe10):  JavaThread ""ForkJoinPool-1-worker-6"" daemon [_thread_in_Java, id=33539, stack(0x0000700003f2a000,0x000070000402a000)]

Stack: [0x0000700003f2a000,0x000070000402a000]
[error occurred during error reporting (printing stack bounds), id 0xe0000000, Internal Error (/System/Volumes/Data/mesos/work_dir/slaves/91e16c40-06d4-468a-9fc3-7198a5bb7d5a-S84884/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/dd857bcb-0874-431c-8be1-131d6448d003/runs/23b8b037-5a50-4109-bca8-8b1719b592b5/workspace/open/src/hotspot/cpu/x86/frame_x86.inline.hpp:62)]

[error occurred during error reporting (printing native stack (with source info)), id 0xe0000000, Internal Error (/System/Volumes/Data/mesos/work_dir/slaves/91e16c40-06d4-468a-9fc3-7198a5bb7d5a-S84884/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/dd857bcb-0874-431c-8be1-131d6448d003/runs/23b8b037-5a50-4109-bca8-8b1719b592b5/workspace/open/src/hotspot/cpu/x86/frame_x86.inline.hpp:62)]

Retrying call stack printing without source information...

[error occurred during error reporting (retry printing native stack (no source info)), id 0xe0000000, Internal Error (/System/Volumes/Data/mesos/work_dir/slaves/91e16c40-06d4-468a-9fc3-7198a5bb7d5a-S84884/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/dd857bcb-0874-431c-8be1-131d6448d003/runs/23b8b037-5a50-4109-bca8-8b1719b592b5/workspace/open/src/hotspot/cpu/x86/frame_x86.inline.hpp:62)]

siginfo: si_signo: 11 (SIGSEGV), si_code: 1 (SEGV_MAPERR), si_addr: 0x0000000000000000


In the windows-x64 failure, the VMThread crashed and in the
macosx-x64 failure, ""ForkJoinPool-1-worker-6"" crashed.
Both crashes happened in frame code.

I'm starting this bug in hotspot/runtime for initial triage.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8303091,,,,,JDK-8302357,,,,"2023-03-07 14:20;pchilanomate;repro.zip;https://bugs.openjdk.org/secure/attachment/102910/repro.zip",,,,,,,,,,,,generic,,,,,,,,,,generic,,,,,,"0|i30fxn:",9223372036854775807,b14,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@661b156a,,,,,,,,,"2023-02-21 11:14;mseledtsov;ILW = HLM = P3;;;","2023-02-24 08:21;coleenp;V  [jvm.dll+0xbf7b71]  os::win32::platform_print_native_stack+0xf1  (os_windows_x86.cpp:236)
V  [jvm.dll+0xe70ad0]  VMError::report+0x10c0  (vmError.cpp:813)
V  [jvm.dll+0xe7270e]  VMError::report_and_die+0x6ce  (vmError.cpp:1593)
V  [jvm.dll+0xe72e54]  VMError::report_and_die+0x64  (vmError.cpp:1352)
V  [jvm.dll+0x576d86]  report_vm_error+0x96  (debug.cpp:181)
V  [jvm.dll+0x3fb6d1]  frame::sender_raw+0x1c1  (frame_x86.inline.hpp:385)
V  [jvm.dll+0x5623c2]  monitors_on_stack+0x212  (continuationFreezeThaw.cpp:1471)
V  [jvm.dll+0x554500]  freeze_internal<Config<0,G1BarrierSet> >+0x360  (continuationFreezeThaw.cpp:1541)
V  [jvm.dll+0x5504ce]  freeze<Config<0,G1BarrierSet> >+0xee  (continuationFreezeThaw.cpp:234)
C  0x000001faeed7b007

The stack looks messed up.  Also fails here.;;;","2023-02-24 09:51;coleenp;""assert(_cb == CodeCache::find_blob(pc())) failed""
(gdb) print _cb
$3 = (CodeBlob *) 0x151e08c5f990
(gdb) print CodeCache::find_blob(_pc)
$4 = (CodeBlob *) 0x151e09539d10

They're different but they have the same name

(gdb) print (char*)((nmethod*)_cb)->_method->_name->_body
$11 = 0x151e1c03d1d6 ""enterSpecial"", '\361' <repeats 21 times>, <incomplete sequence \361>
(gdb) print (char*)((nmethod*)0x151e09539d10)->_method->_name->_body
$12 = 0x151e1c03d1d6 ""enterSpecial"", '\361' <repeats 21 times>, <incomplete sequence \361>

(gdb) print *((nmethod*)_cb)
$15 = {<CompiledMethod> = {<CodeBlob> = {_vptr.CodeBlob = 0x151e209aa9e8 <vtable for nmethod+16>, 
      _code_begin = 0x151e08c5fb60 ""A\200\277\240\005"", _code_end = 0x151e08c5fee0 '\314' <repeats 32 times>, ""\a"", 
      _content_begin = 0x151e08c5fb60 ""A\200\277\240\005"", _data_end = 0x151e08c5fee0 '\314' <repeats 32 times>, ""\a"", 
(gdb) print *((nmethod*)0x151e09539d10)
$14 = {<CompiledMethod> = {<CodeBlob> = {_vptr.CodeBlob = 0x151e209aa9e8 <vtable for nmethod+16>, 
      _code_begin = 0x151e09539ee0 ""A\200\277\240\005"", _code_end = 0x151e0953a260 '\314' <repeats 32 times>, ""\006"", 

Does look like a loom problem.  I don't know why there are two.

it's easy to reproduce.  Adding watchers.;;;","2023-02-24 13:30;coleenp;
385	  CodeBlob* volatile pc_cb = CodeCache::find_blob(pc());
386	  assert(_cb == CodeCache::find_blob(pc()), ""Must be the same"");
387	  if (_cb != NULL) return sender_for_compiled_frame(map);

(gdb) print pc_cb
$1 = (CodeBlob * volatile) 0x149b8d0d1790
(gdb) print _cb
$2 = (CodeBlob *) 0x149b8cc2b390
(gdb) print *pc_cb
$3 = {_vptr.CodeBlob = 0x149ba5b449e8 <vtable for nmethod+16>, _code_begin = 0x149b8d0d1940 ""A\200\277\240\005"", 
  _code_end = 0x149b8d0d1ba0 '\314' <repeats 199 times>, <incomplete sequence \314>..., _content_begin = 0x149b8d0d1940 ""A\200\277\240\005"", 
  _data_end = 0x149b8d0d1ba0 '\314' <repeats 199 times>, <incomplete sequence \314>..., 
  _relocation_begin = 0x149b8d0d18f0 ""\003|y\245\200\001\233\024\016\070\016\062\253\""\005\200\223\""\005\200\n2\005\200\003|x\245\260\372\233\024\025\070\016\062\003|x\245\260\372\233\024=8\016\062E2\016\062\f"", _relocation_end = 0x149b8d0d1940 ""A\200\277\240\005"", 
  _oop_maps = 0x1471cc0096f0, _name = 0x149ba563ef7f ""native nmethod"", _size = 1040, _header_size = 352, _frame_complete_offset = 251, 
  _data_offset = 1040, _frame_size = 10, _caller_must_gc_arguments = false, _is_compiled = true, _type = compiler_none, _asm_remarks = {
    _remarks = 0x1471cc082870}, _dbg_strings = {_strings = 0x1471cc081c30}}
(gdb) print (char*)((nmethod*)pc_cb)->_method->_name->_body
$4 = 0x149b840161d6 ""enterSpecial"", '\361' <repeats 21 times>, <incomplete sequence \361>
(gdb) print (char*)((nmethod*)_cb)->_method->_name->_body
$5 = 0x149b840161d6 ""enterSpecial"", '\361' <repeats 21 times>, <incomplete sequence \361>

Why are we pointing to the wrong enterSpecial in the frame?  _pc points to one, _cb points to the other.;;;","2023-02-27 14:02;coleenp;From my crash log.  There are two.

R8 =0x0000149b8d0d1790 is at entry_point+-432 in (nmethod*)0x0000149b8d0d1790
Compiled method (n/a)  440476 9109     n 0       jdk.internal.vm.Continuation::enterSpecial (native)
 total in heap  [0x0000149b8d0d1790,0x0000149b8d0d1ba0] = 1040
 relocation     [0x0000149b8d0d18f0,0x0000149b8d0d1940] = 80
 main code      [0x0000149b8d0d1940,0x0000149b8d0d1b80] = 576
 stub code      [0x0000149b8d0d1b80,0x0000149b8d0d1ba0] = 32
...
R15=0x0000149b8cc2b390 is at entry_point+-432 in (nmethod*)0x0000149b8cc2b390
Compiled method (n/a)  440476 2924     n 0       jdk.internal.vm.Continuation::enterSpecial (native)
 total in heap  [0x0000149b8cc2b390,0x0000149b8cc2b7a0] = 1040
 relocation     [0x0000149b8cc2b4f0,0x0000149b8cc2b540] = 80
 main code      [0x0000149b8cc2b540,0x0000149b8cc2b780] = 576
 stub code      [0x0000149b8cc2b780,0x0000149b8cc2b7a0] = 32
;;;","2023-02-28 17:08;pchilanomate;We have two enterspecial and doYield nmethods because the Continuation class was redefined. The old enterspecial/doYield are replaced by new methods during redefinition [1]. Those new methods will not have the entry points set though, since enterspecial/doYield are actually linked the first time they are resolved. After the redefinition, the next time a thread calls enterspecial/doYield the nmethods will be generated again. 

The issue is that ContinuationEntry::to_frame(), which is called to create the frame representing enterspecial, calls the frame constructor passing the value of a static local variable for the _cb argument, which is only set the first time the method is called, but it uses the updated _return_pc value from the new CodeBlob for the _pc argument. [2]

Here is the sequence that leads to the crash:

1 - Some virtual thread workload runs and enterspecial/doYield are resolved, i.e the nmethods are generated.
2-  Redefinition happens for class Continuation.
3 - Some virtual thread calls enterspecial/doYield so the nmethods are generated again (different CodeBlobs!)
4 - There is a deoptimization request that leads to a handshake against all JavaThreads.
5 - One of those JavaThreads is a carrier thread that has a virtual thread mounted so while walking the stack we eventually reach the enterspecial frame.
6 - To create the frame for enterspecial we call Continuation::continuation_bottom_sender(), which in turn calls ContinuationEntry::to_frame().
7 -  We create the enterspecial frame with _cb pointing to the old CodeBlob but a _pc associated with the new CodeBlob.
8 - Then when getting the sender of enterspecial, we hit the assert: assert(_cb == CodeCache::find_blob(pc()), ""Must be the same"").


We don't really need that ""cb"" static local because we already have _enter_special available. But in any case using the updated value for the CodeBlob is not enough, because it is clear now that set_enter() can be called concurrently with to_frame() (with redefinition in the picture).
Probably the best thing would be to prevent the Continuation class from being redefined, or at least keep the already generated enterspecial/doYield nmethods.


[1] https://github.com/openjdk/jdk/blob/master/src/hotspot/share/prims/jvmtiRedefineClasses.cpp#L4280 
[2] https://github.com/openjdk/jdk/blob/master/src/hotspot/cpu/x86/continuationEntry_x86.inline.hpp#L35;;;","2023-03-07 14:31;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/12911
Date: 2023-03-07 22:14:39 +0000;;;","2023-03-09 14:55;dukebot;Changeset: 8b740b46
Author:    Patricio Chilano Mateo <pchilanomate@openjdk.org>
Date:      2023-03-09 22:53:44 +0000
URL:       https://git.openjdk.org/jdk/commit/8b740b46091c853c7cb66c361deda6dfbb2cedc8
;;;",,,,,,,,,,,,,,,,,,,,,,,
CDS should not relocate heap if mapping fails,JDK-8302777,5094503,Bug,Closed,JDK,JDK,software,duke,,,P2,Fixed,iklam,dcubed,dcubed,2023-02-17 07:06,2023-06-29 13:45,2023-10-01 09:56,2023-02-17 11:36,21,,,,,,,,21,hotspot,,0,cds,regression,tier4,,,,,,,,,,,,,,"The following test failed in the JDK21 CI:

runtime/cds/appcds/SharedArchiveConsistency.java

Here's a log file snippet from the linux-x64-debug sighting:

[0.091s][info][cds] CDS heap data relocation delta = 0 bytes
[0.091s][info][cds] Trying to map heap data: region[3] at 0x00000000fff00000, size =   532664 bytes
[0.093s][info][cds] Trying to map heap data: region[5] at 0x00000000ffe00000, size =   495368 bytes
[0.094s][info][cds] Checksum verification failed.
[0.094s][info][cds] UseSharedSpaces: mapped heap regions are corrupt
[0.094s][info][cds] optimized module handling: enabled
[0.094s][info][cds] full module graph: disabled
#
# A fatal error has been detected by the Java Runtime Environment:
#
#  SIGSEGV (0xb) at pc=0x00007fd53006d6fb, pid=442834, tid=442838
#
# JRE version:  (21.0+11) (fastdebug build )
# Java VM: Java HotSpot(TM) 64-Bit Server VM (fastdebug 21-ea+11-LTS-812, mixed mode, sharing, tiered, compressed oops, compressed class ptrs, g1 gc, linux-amd64)
# Problematic frame:
# V  [libjvm.so+0x66e6fb]  ArchiveHeapLoader::patch_native_pointers() [clone .part.0]+0x1bb
#
# Core dump will be written. Default location: Core dumps may be processed with ""/opt/core.sh %p"" (or dumping to /opt/mach5/mesos/work_dir/slaves/91e16c40-06d4-468a-9fc3-7198a5bb7d5a-S119895/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/ca30f168-4228-4faa-bf40-e6ef16ffa29a/runs/13c13fa6-3c87-4d55-b51b-00816b28aeb5/testoutput/test-support/jtreg_open_test_hotspot_jtreg_hotspot_cds_relocation/scratch/1/core.442834)
#
# An error report file with more information is saved as:
# /opt/mach5/mesos/work_dir/slaves/91e16c40-06d4-468a-9fc3-7198a5bb7d5a-S119895/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/ca30f168-4228-4faa-bf40-e6ef16ffa29a/runs/13c13fa6-3c87-4d55-b51b-00816b28aeb5/testoutput/test-support/jtreg_open_test_hotspot_jtreg_hotspot_cds_relocation/scratch/1/hs_err_pid442834.log
#
#
];
 stderr: []
 exitValue = 134

java.lang.RuntimeException: 'A fatal error has been detected by the Java Runtime Environment' found in stdout
	at jdk.test.lib.process.OutputAnalyzer.shouldNotContain(OutputAnalyzer.java:267)
	at SharedArchiveConsistency.testAndCheck(SharedArchiveConsistency.java:88)
	at SharedArchiveConsistency.main(SharedArchiveConsistency.java:222)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
	at java.base/java.lang.reflect.Method.invoke(Method.java:578)
	at com.sun.javatest.regtest.agent.MainWrapper$MainThread.run(MainWrapper.java:125)
	at java.base/java.lang.Thread.run(Thread.java:1623)

JavaTest Message: Test threw exception: java.lang.RuntimeException: 'A fatal error has been detected by the Java Runtime Environment' found in stdout
JavaTest Message: shutting down test

STATUS:Failed.`main' threw exception: java.lang.RuntimeException: 'A fatal error has been detected by the Java Runtime Environment' found in stdout
----------rerun:(40/7483)*----------


Here's the crashing thread's stack:

---------------  T H R E A D  ---------------

Current thread (0x00007fd52803e390):  JavaThread ""Unknown thread"" [_thread_in_vm, id=442838, stack(0x00007fd53283d000,0x00007fd53293e000)]

Stack: [0x00007fd53283d000,0x00007fd53293e000],  sp=0x00007fd53293ca70,  free space=1022k
Native frames: (J=compiled Java code, j=interpreted, Vv=VM code, C=native code)
V  [libjvm.so+0x66e6fb]  ArchiveHeapLoader::patch_native_pointers() [clone .part.0]+0x1bb  (archiveHeapLoader.cpp:526)
V  [libjvm.so+0x16129c0]  MetaspaceShared::initialize_shared_spaces()+0x80  (metaspaceShared.cpp:1434)
V  [libjvm.so+0x1aed321]  universe_init()+0x1f1  (universe.cpp:819)
V  [libjvm.so+0xffa5c7]  init_globals()+0x37  (init.cpp:123)
V  [libjvm.so+0x1ab5fdf]  Threads::create_vm(JavaVMInitArgs*, bool*)+0x37f  (threads.cpp:568)
V  [libjvm.so+0x11abb68]  JNI_CreateJavaVM+0x98  (jni.cpp:3588)
C  [libjli.so+0x3b0f]  JavaMain+0x8f  (java.c:1459)
C  [libjli.so+0x7a29]  ThreadJavaMain+0x9  (java_md.c:650)

siginfo: si_signo: 11 (SIGSEGV), si_code: 2 (SEGV_ACCERR), si_addr: 0x00000000ffe00018",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8302790,JDK-8296158,,,,,,,,,,,,,,,generic,,,,,,,,,,generic,,,,,,"0|i30fwz:",9223372036854775807,b11,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,Verified,,"2023-02-17 07:14;dcubed;The only changeset in jdk-21+11-812-tier4 is:

JDK-8296158 Refactor the verification of CDS region checksum

so it looks like JDK-8296158 is the root cause.;;;","2023-02-17 07:15;dcubed;Bumping from P4 -> P2 since this looks like a regression.;;;","2023-02-17 07:16;dcubed;[~iklam] - I think this might be the new bug that you were worried about.;;;","2023-02-17 09:22;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/12622
Date: 2023-02-17 17:15:04 +0000;;;","2023-02-17 11:36;dukebot;Changeset: a263f283
Author:    Ioi Lam <iklam@openjdk.org>
Date:      2023-02-17 19:34:26 +0000
URL:       https://git.openjdk.org/jdk/commit/a263f28368951e2352ee983d318d83c92ddf8e4d
;;;","2023-02-17 13:38;dcubed;This bug fix is integrated in jdk-21+11-824.;;;",,,,,,,,,,,,,,,,,,,,,,,,,
ZGC: Remove Universe::verify calls,JDK-8302741,5094464,Bug,Closed,JDK,JDK,software,duke,,,P2,Fixed,stefank,tschatzl,tschatzl,2023-02-17 05:27,2023-07-19 03:31,2023-10-01 09:56,2023-02-21 00:25,21,,,,,,,,21,hotspot,,0,zgc,,,,,,,,,,,,,,,,"When running some tests with -XX:+Verify/Before/DuringGC there are verification failures.

To do that I ran a build with these flags by default turned on. While this is a custom build, there were only G1 changes in it.

I suspect these are bugs in the verification.

Among them are
vmTestbase/metaspace/staticReferences/StaticReferences.java
runtime/MirrorFrame/Test8003720.java
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i30fob:",9223372036854775807,b11,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6b00f96c,,,,,,,Verified,,"2023-02-17 06:48;stefank;The verification trips on finalizable marked references. ZGC don't support the generic Universe::verify code, which performs raw loads on non-root oops (E.g. CLDG). Remove the calls to Universe::verify() and use our own root verification instead. This matches what we do in Generational ZGC, where we're even more susceptible to these kind of problems.;;;","2023-02-20 02:17;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/12653
Date: 2023-02-20 10:10:46 +0000;;;","2023-02-21 00:25;dukebot;Changeset: 63a35012
Author:    Stefan Karlsson <stefank@openjdk.org>
Date:      2023-02-21 08:23:28 +0000
URL:       https://git.openjdk.org/jdk/commit/63a3501273106289dba72384e570962f19264bc9
;;;","2023-07-19 03:31;enikitin;Verified in CI, by running the mentioned tests approx. 100 times, with the verification flags switched on in all possible combinations. No failures happened.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,
Major performance regression in Math.log on aarch64,JDK-8302736,5094211,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,tholenstein,webbuggrp,webbuggrp,2023-02-15 03:00,2023-09-20 00:32,2023-10-01 09:56,2023-05-24 00:32,11.0.2,17,19.0.2,21,,,,,21,hotspot,,0,amazon-interest,dcsswa,intrinsic,jdk17u-fix-request,jdk17u-fix-yes,oracle-triage-21,performance,webbug,,,,,,,,,"ADDITIONAL SYSTEM INFORMATION :
aarch64, Apple M1 Max, macOS 13.2.1

A DESCRIPTION OF THE PROBLEM :
Math.log using the generic dlog intrinsic is much slower than StrictMath.log on aarch64.

Caused by JDK-8215133
Related to JDK-8210858

STEPS TO FOLLOW TO REPRODUCE THE PROBLEM :
javac Main.java
java Main
java -XX:+UnlockDiagnosticVMOptions -XX:DisableIntrinsic=_dlog Main

EXPECTED VERSUS ACTUAL BEHAVIOR :
EXPECTED -
The elapsed time without additional options is less than or equal to the time with the _dlog intrinsic disabled.
ACTUAL -
java Main
6200ms

java -XX:+UnlockDiagnosticVMOptions -XX:DisableIntrinsic=_dlog Main
860ms

---------- BEGIN SOURCE ----------
import java.util.Random;
import java.util.concurrent.TimeUnit;

public class Main {
    public static void main(String[] args) throws Exception {
        while (true) {
            final Random random = new Random();
            final double[] values = new double[100_000_000];
            for (int i = 0; i < values.length; i++)
                values[i] = random.nextDouble();

            System.gc();

            final long start = System.nanoTime();

            double blackhole = 0;
            for (int i = 0; i < values.length; i++)
                blackhole += Math.log(values[i]);

            final long elapsed = TimeUnit.NANOSECONDS.toMillis(System.nanoTime() - start);

            System.out.println(elapsed + ""ms ("" + blackhole + "")"");
        }
    }
}
---------- END SOURCE ----------

CUSTOMER SUBMITTED WORKAROUND :
Disable the _dlog intrinsic on aarch64 like -XX:DisableIntrinsic=_dlog do and use the StrictMath implementation.

FREQUENCY : always


",,,,,,,,,,,JDK-8311924,JDK-8312685,JDK-8312449,,,,,,,,,,,,,,,,,,,,,,,JDK-8316392,,,,,JDK-8307817,JDK-8215133,,,"2023-03-23 09:01;tholenstein;JMH result.png;https://bugs.openjdk.org/secure/attachment/103101/JMH+result.png","2023-02-17 03:19;sswsharm;Main.java;https://bugs.openjdk.org/secure/attachment/102697/Main.java",,,,,,,,,,,aarch64,,,,,,,,,,os_x,,,,,,"0|i30e43:",9223372036854775807,b25,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2023-02-17 03:22;sswsharm;Issue is not reproduced on Windows OS

OS : Windows 10 (x64)
JDK 19.0.2: Pass

The elapsed time without additional options is less than the time with the _dlog intrinsic disabled.

The description mentions that the issue is only reproducible on Mac M1 aarch64, moving it to dev team for further analysis.

ILW = issue in Mac M1 aarch64, reproducible with single test , no workaround available =  MLM = P4
;;;","2023-02-17 06:25;thartmann;I can not reproduce this on Linux aarch64 (Ampere A1) with JDK 19.0.2:

19.0.2/bin/java Main
1386ms (-1.0000181323473875E8)
1431ms (-9.999069243067198E7)
1431ms (-1.0000593490621991E8)
1431ms (-1.000068413622054E8)

jdk-19.0.2/bin/java -XX:+UnlockDiagnosticVMOptions -XX:DisableIntrinsic=_dlog Main
1923ms (-1.0000122097311078E8)
1924ms (-1.000130371487033E8)
1925ms (-1.0000553223919515E8)
1923ms (-9.999498701601629E7)
;;;","2023-02-17 06:32;thartmann;But I can reproduce this on a Mac M1 machine:

jdk-19.0.2.jdk/Contents/Home/bin/java Main      
6267ms (-9.99850495092053E7)
6290ms (-1.000038166303315E8)
6290ms (-1.0001351541276565E8)

jdk-19.0.2.jdk/Contents/Home/bin/java -XX:+UnlockDiagnosticVMOptions -XX:DisableIntrinsic=_dlog  Main
861ms (-9.99948939255735E7)
874ms (-9.999978828501564E7)
872ms (-1.0000045283484954E8)

Same with latest JDK 21 (21-ea+10-LTS-784) and also with JDK 17.0.7. So this is not a (recent) regression.
;;;","2023-02-17 07:01;thartmann;The stub for the _dlog intrinsic was disabled by JDK-8215133 which should lead to LibraryCallKit::inline_math_native emitting a direct call to SharedRuntime::dlog -> __ieee754_log. I'm not sure why that one is so slow on Mac M1.;;;","2023-02-17 07:07;thartmann;ILW = Performance with intrinsic is worse than without, _dlog intrinsic on Mac M1, disable intrinsic = MMM = P3;;;","2023-02-17 07:11;thartmann;Toby, please have a look.;;;","2023-03-23 09:00;tholenstein;The class`java.lang.Math` contains methods for performing basic numeric operations such as the elementary exponential, logarithm, square root, and trigonometric functions. The numeric methods of class `java.lang.StrictMath`  are defined to return the bit-for-bit same results on all platforms. The implementations of the equivalent functions in class `java.lang.Math` do not have this requirement.  This relaxation permits better-performing implementations where strict reproducibility is not required. By default most of the `java.lang.Math` methods simply call the equivalent method in `java.lang.StrictMath` for their implementation.  Code generators (like C2) are encouraged to use platform-specific native libraries or microprocessor instructions, where available, to provide higher-performance implementations of `java.lang.Math` methods.  Such higher-performance implementations still must conform to the specification for `java.lang.Math`

I ran JMH benchmarks `org.openjdk.bench.java.lang.StrictMathBench` and  `org.openjdk.bench.java.lang.MathBench` on `Linux x64` , `Linux aarch64`  and `macOS aarch64`. It would be exprected that `java.lang.Math` is equally or faster than `java.lang.StrictMath` . But this is not always the case. Especially `exp`, `log`, `log10`, `pow` and `tan` on `macOS aarch64` are by around a factor 10 slower. 

On `macOS aarch64` C2 generates `StubRoutines` for `Math.sin` and `Math.cos`.  And a for `Math.tan`, `Math.exp`, `Math.log`, `Math.pow` and `Math.log10`  a call to a `c++` function. This happens in `LibraryCallKit::inline_math_native`  with funcAddr `CAST_FROM_FN_PTR(address, SharedRuntime::dsin)`

To the shared runtime functions: 
```c++
static jdouble dtan(jdouble x);
static jdouble dlog(jdouble x);
static jdouble dlog10(jdouble x);
static jdouble dexp(jdouble x);
static jdouble dpow(jdouble x, jdouble y);
```

- Which are implemented in `sharedRuntimeTrans.cpp`:
```c++
JRT_LEAF(jdouble, SharedRuntime::dlog10(jdouble x))
  return __ieee754_log10(x);
JRT_END

JRT_LEAF(jdouble, SharedRuntime::dexp(jdouble x))
  return __ieee754_exp(x);
JRT_END

JRT_LEAF(jdouble, SharedRuntime::dpow(jdouble x, jdouble y))
  return __ieee754_pow(x, y);
JRT_END

JRT_LEAF(jdouble, SharedRuntime::dlog(jdouble x))
  return __ieee754_log(x);
JRT_END
```
- And in `sharedRuntimeTrig.cpp`:
```c++
JRT_LEAF(jdouble, SharedRuntime::dtan(jdouble x))
  [...]
JRT_END
```


- The `JRT_LEAF`  makro :
```c++
#define JRT_LEAF(result_type, header)                                \
  result_type header {                                               \
  VM_LEAF_BASE(result_type, header)                                  \

```

- Whereas `VM_LEAF_BASE`  is
```c++
// LEAF routines do not lock, GC or throw exceptions

// On macos/aarch64 we need to maintain the W^X state of the thread.  So we
// take WXWrite on the enter to VM from the ""outside"" world, so the rest of JVM
// code can assume writing (but not executing) codecache is always possible
// without preliminary actions.
// JavaThread state should be changed only after taking WXWrite. The state
// change may trigger a safepoint, that would need WXWrite to do bookkeeping
// in the codecache.

#define VM_LEAF_BASE(result_type, header)                            \
  debug_only(NoHandleMark __hm;)                                     \
  MACOS_AARCH64_ONLY(ThreadWXEnable __wx(WXWrite,                    \
                                         JavaThread::current()));    \
  os::verify_stack_alignment();                                      \
```

- The reason for the 10x slowdown on macOS aarch64 seems to be `WXWrite`  - Without that the performance is as expected (similar to StrictMath);;;","2023-03-23 09:02;tholenstein;				|	Linux x64				|	Linux aarch64			|	macOS aarch64
---
Math.exp			|	4.996 ns/ops			|	16.444 ns/ops			|	**75.032 ns/ops**
StrictMath.exp		|	10.201 ns/ops			|	17.950 ns/ops			|	6.292 ns/ops
-------
Math.log			|	7.106 ns/ops			|	12.406 ns/ops			|	**62.073 ns/ops**
StrictMath.log		|	8.881 ns/ops			|	13.228 ns/ops			|	4.512 ns/ops
---
Math.log10		|	7.811 ns/ops			|	16.180 ns/ops			|	**67.623 ns/ops**
StrictMath.log10	|	12.724 ns/ops			|	16.968 ns/ops			|	6.611 ns/ops
---
Math.pow		|	1.958 ns/ops			|	**4.693 ns/ops**		|	**46.393 ns/ops**
StrictMath.pow	|	2.516 ns/ops			|	3.342 ns/ops			|	2.052 ns/ops
---
Math.ceil			|	**2.237 ns/ops**		|	0.748 ns/ops			|	 0.569 ns/ops
StrictMath.ceil		|	1.513 ns/ops			|	1.670 ns/ops			|	0.844 ns/ops
---
Math.floor		|	**2.236 ns/ops**		|	0.728 ns/ops			|	0.602 ns/ops
StrictMath.floor	|	1.051 ns/ops			|	1.336 ns/ops			|	0.771 ns/ops
---
Math.rint			|	**2.236 ns/ops**		|	 0.728 ns/ops			|	0.567 ns/ops
StrictMath.rint		|	0.980 ns/ops			|	1.363 ns/ops			|	0.739 ns/ops
---
Math.sin			|	**9.597 ns/ops**		|	8.264 ns/ops			|	3.738 ns/ops
StrictMath.sin		|	8.093 ns/ops			|	14.754 ns/ops			|	8.711 ns/ops
---
Math.cos			|	**9.424 ns/ops**		|	8.394 ns/ops			|	3.427 ns/ops
StrictMath.cos		|	7.602 ns/ops			|	14.055 ns/ops			|	8.102 ns/ops
---
Math.tan			|	14.159 ns/ops			|	23.009 ns/ops			|	**80.358 ns/ops**
StrictMath.tan		|	15.769 ns/ops			|	28.939 ns/ops			|	13.166 ns/ops;;;","2023-03-24 03:11;thartmann;Thanks for this thorough analysis, Toby!

Here's an explanation for what ""WXWrite"" actually does:
https://developer.apple.com/documentation/apple-silicon/porting-just-in-time-compilers-to-apple-silicon

I assume that setting WXWrite is required because entering the VM might trigger a safepoint and that might trigger writing into executable memory:

// JavaThread state should be changed only after taking WXWrite. The state
// change may trigger a safepoint, that would need WXWrite to do bookkeeping
// in the codecache.

I think it's best to hand this over to the macOS/AArch64 Port (JDK-8253795) experts to check if there's anything we can do about the performance of enabling/disabling write protections. If not, we should probably prefer the Java version over the intrinsics.;;;","2023-03-24 03:17;thartmann;[~akozlov], [~vkempik], [~burban], what do you think?;;;","2023-03-24 03:18;thartmann;Couldn't we defer the WXWrite to the safepoint? And actually, no safepoint should happen when entering via VM_LEAF_BASE, right?;;;","2023-03-24 03:52;akozlov;Indeed, thanks for the detailed analysis! :)

For these math function WX switching is not required. Probably in some other cases functions defined with VM_BASE_IMPL do access CodeCache for writing. I need to check the code why it's there. Another approach would be to remove WX management from these functions and leave that only where it is really required. ;;;","2023-03-24 09:40;tholenstein;I tested removing the `WXWrite` from `VM_LEAF_BASE` and then building the VM fails on macOs aarch64 with:

```
Stack: [0x000000016f768000,0x000000016f96b000],  sp=0x000000016f968fe0,  free space=2051k
Native frames: (J=compiled Java code, j=interpreted, Vv=VM code, C=native code)
V  [libjvm.dylib+0x7ccd1c]  NativeCall::set_destination_mt_safe(unsigned char*, bool)+0xc8
V  [libjvm.dylib+0x891e44]  SharedRuntime::fixup_callers_callsite(Method*, unsigned char*)+0x240
v  ~BufferBlob::I2C/C2I adapters 0x000000010a0d12a4
J 7 c1 java.lang.String.hashCode()I java.base (60 bytes) @ 0x0000000102b51f08 [0x0000000102b51d00+0x0000000000000208]
```

`SharedRuntime::fixup_callers_callsite` is `JRT_LEAF` and accesses the Code Cache via `call->set_destination_mt_safe(entry_point)`. Therefore we need `ThreadWXEnable` 

But the math functions I tested without the `WXWrite` and all tests passed. We could solve this Bug like that and investigate which `JRT_LEAF` functions need the `WXWrite` in a different RFE. What do you think?
;;;","2023-03-24 10:52;akozlov;Looks pretty good to me. The suggested path is a quick and straightforward fix for the problem, while the more generic fix for too many LEAF functions to handle WX will take a longer time and will require some effort to make it right. Probably we need to move WXWrite from LEAF entry down to NativeCall:set_*, where it feels more natural.;;;","2023-05-10 01:31;aph;This is another case of a general bug in the way WX is handled.

Instead of flipping WX when needed, there is a general presumption that when we're in VM code we should enable WXWrite. This is an example of temporal coupling, a classic code smell. As long as we insist on trying to maintain this convention, things will continue to break.;;;","2023-05-10 05:51;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/13606
Date: 2023-04-24 08:10:02 +0000;;;","2023-05-24 00:32;dukebot;Changeset: 466ec300
Author:    Tobias Holenstein <tholenstein@openjdk.org>
Date:      2023-05-24 07:29:25 +0000
URL:       https://git.openjdk.org/jdk/commit/466ec300fc8e5702553123cf2fa4b0d8c7d552d9
;;;","2023-07-17 02:27;goetz;Fix request [17u]

I backport this for parity with 17.0.9-oracle.
Medium risk, rather new change but small. Affects only mac on aarch64.
I had to resolve and skipped changes that are relevant for loom.
SAP nighlty testing passed.
;;;","2023-07-17 02:33;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/1588
Date: 2023-07-17 09:26:21 +0000;;;","2023-07-17 02:33;aph;Did you mean to add a fix request tag?;;;","2023-07-18 00:38;goetz;Sure, but only once I have a review for the change.;;;","2023-07-20 08:03;goetz;[11u notice]

If this was adressed for 11, we should seek a more restricted solution. See also discussion in backport PR for 17.;;;",,,,,,,,,
sun/net/www/http/HttpClient/MultiThreadTest.java still failing intermittently,JDK-8302732,5094450,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,djelinski,dfuchs,dfuchs,2023-02-17 02:28,2023-03-01 22:56,2023-10-01 09:56,2023-02-26 23:53,11.0.20-oracle,21,,,,,,,21,core-libs,,0,noreg-hard,,,,,,,,,,,,,,,,"INFO: 11 have been used, with 6 becoming idle for more than 1s while using 5 threads to make concurrent connections
waiting for worker to shutdown at 1760ms
worker: 1 end at 1699ms,  elapsed since worker start: 1687ms, elapsed since accept: 1687ms, timeout exceeded: 1, successfuly handled 12/12 genuine requests, , mayHaveTimedOut: true
worker: 4 end at 1699ms,  elapsed since worker start: 1685ms, elapsed since accept: 1686ms, timeout exceeded: 1, successfuly handled 10/10 genuine requests, , mayHaveTimedOut: true
worker: 2 end at 1700ms,  elapsed since worker start: 1688ms, elapsed since accept: 1688ms, timeout exceeded: 1, successfuly handled 11/11 genuine requests, , mayHaveTimedOut: true
worker: 3 end at 1700ms,  elapsed since worker start: 1687ms, elapsed since accept: 1687ms, timeout exceeded: 1, successfuly handled 12/12 genuine requests, , mayHaveTimedOut: true
worker: 5 end at 1699ms,  elapsed since worker start: 1654ms, elapsed since accept: 1655ms, timeout exceeded: 1, successfuly handled 8/8 genuine requests, , mayHaveTimedOut: true
worker: 7: Shutdown at 5190ms
worker: 6: Shutdown at 5190ms
worker: 8: Shutdown at 5190ms
worker: 6 end at 5190ms,  elapsed since worker start: 3521ms, elapsed since accept: 3522ms, timeout exceeded: 0, successfuly handled 11/11 genuine requests, , mayHaveTimedOut: true
worker: 7 end at 5190ms,  elapsed since worker start: 3521ms, elapsed since accept: 3521ms, timeout exceeded: 0, successfuly handled 9/9 genuine requests, , mayHaveTimedOut: true
worker: 10: Shutdown at 5190ms
worker: 9: Shutdown at 5190ms
worker: 8 end at 5190ms,  elapsed since worker start: 3521ms, elapsed since accept: 3521ms, timeout exceeded: 0, successfuly handled 8/8 genuine requests, , mayHaveTimedOut: true
worker: 9 end at 5191ms,  elapsed since worker start: 3521ms, elapsed since accept: 3521ms, timeout exceeded: 0, successfuly handled 9/9 genuine requests, , mayHaveTimedOut: true
worker: 10 end at 5191ms,  elapsed since worker start: 3519ms, elapsed since accept: 3521ms, timeout exceeded: 0, successfuly handled 8/8 genuine requests, , mayHaveTimedOut: true
main thread end - 61858ms
----------System.err:(15/719)----------

JavaTest Message: Test complete.


JavaTest Message: Problem cleaning up the following threads:
Worker-0
  at java.base@11.0.20-ea/java.net.SocketInputStream.socketRead0(Native Method)
  at java.base@11.0.20-ea/java.net.SocketInputStream.socketRead(SocketInputStream.java:115)
  at java.base@11.0.20-ea/java.net.SocketInputStream.read(SocketInputStream.java:168)
  at java.base@11.0.20-ea/java.net.SocketInputStream.read(SocketInputStream.java:140)
  at java.base@11.0.20-ea/java.io.BufferedInputStream.fill(BufferedInputStream.java:252)
  at java.base@11.0.20-ea/java.io.BufferedInputStream.read(BufferedInputStream.java:271)
  at Worker.readUntil(MultiThreadTest.java:427)
  at Worker.run(MultiThreadTest.java:469)

result: Error. Error while cleaning up threads after test

",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8296943,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i30fl7:",9223372036854775807,b12,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@446e124a,,,,,,,,,"2023-02-17 02:30;dfuchs;Here is the whole log:

----------System.out:(279/11775)----------
server: calling accept.
server: return accept (at 2ms)
server: Started worker 0
server: calling accept.
server: return accept (at 11ms)
server: Started worker 1
server: calling accept.
server: return accept (at 11ms)
server: Started worker 2
server: calling accept.
server: return accept (at 12ms)
server: Started worker 3
server: calling accept.
server: return accept (at 12ms)
server: Started worker 4
server: calling accept.
worker 1: Read request from client (204 bytes) at 12ms
worker 3: Read request from client (204 bytes) at 13ms
worker 4: Read request from client (204 bytes) at 13ms
worker 0: Read request from client (204 bytes) at 11ms
worker 2: Read request from client (204 bytes) at 12ms
client: read 11 bytes
client: read 11 bytes
client: read 11 bytes
client: read 11 bytes
client: read 11 bytes
worker 0: Read request from client (204 bytes) at 39ms
worker 2: Read request from client (204 bytes) at 40ms
worker 1: Read request from client (204 bytes) at 41ms
worker 3: Read request from client (204 bytes) at 41ms
worker 4: Read request from client (204 bytes) at 41ms
client: read 11 bytes
client: read 11 bytes
client: read 11 bytes
client: read 11 bytes
client: read 11 bytes
worker 1: Read request from client (205 bytes) at 43ms
worker 4: Read request from client (205 bytes) at 43ms
client: read 11 bytes
worker 3: Read request from client (205 bytes) at 43ms
worker 2: Read request from client (205 bytes) at 43ms
server: return accept (at 43ms)
client: read 11 bytes
server: Started worker 5
client: read 11 bytes
server: calling accept.
client: read 11 bytes
worker 4: Read request from client (205 bytes) at 44ms
worker 5: Read request from client (205 bytes) at 44ms
client: read 11 bytes
client: read 11 bytes
worker 2: Read request from client (205 bytes) at 45ms
worker 3: Read request from client (205 bytes) at 45ms
worker 1: Read request from client (205 bytes) at 45ms
client: read 11 bytes
client: read 11 bytes
client: read 11 bytes
worker 4: Read request from client (205 bytes) at 47ms
worker 5: Read request from client (205 bytes) at 47ms
client: read 11 bytes
worker 1: Read request from client (205 bytes) at 47ms
worker 3: Read request from client (205 bytes) at 48ms
client: read 11 bytes
worker 2: Read request from client (205 bytes) at 48ms
client: read 11 bytes
client: read 11 bytes
client: read 11 bytes
worker 1: Read request from client (205 bytes) at 48ms
worker 3: Read request from client (205 bytes) at 49ms
client: read 11 bytes
worker 2: Read request from client (205 bytes) at 49ms
worker 5: Read request from client (205 bytes) at 49ms
client: read 11 bytes
client: read 11 bytes
worker 1: Read request from client (205 bytes) at 49ms
client: read 11 bytes
worker 3: Read request from client (205 bytes) at 50ms
client: read 11 bytes
client: read 11 bytes
worker 5: Read request from client (205 bytes) at 50ms
worker 2: Read request from client (205 bytes) at 51ms
worker 1: Read request from client (205 bytes) at 51ms
client: read 11 bytes
worker 3: Read request from client (205 bytes) at 51ms
client: read 11 bytes
client: read 11 bytes
worker 4: Read request from client (205 bytes) at 52ms
client: read 11 bytes
client: read 11 bytes
worker 3: Read request from client (205 bytes) at 52ms
worker 1: Read request from client (205 bytes) at 52ms
worker 5: Read request from client (205 bytes) at 53ms
worker 4: Read request from client (205 bytes) at 53ms
client: read 11 bytes
client: read 11 bytes
worker 2: Read request from client (205 bytes) at 53ms
client: read 11 bytes
client: read 11 bytes
client: read 11 bytes
worker 5: Read request from client (205 bytes) at 54ms
worker 4: Read request from client (205 bytes) at 54ms
client: read 11 bytes
worker 2: Read request from client (205 bytes) at 54ms
worker 1: Read request from client (205 bytes) at 54ms
client: read 11 bytes
worker 3: Read request from client (205 bytes) at 54ms
client: read 11 bytes
client: read 11 bytes
client: read 11 bytes
worker 4: Read request from client (205 bytes) at 55ms
worker 1: Read request from client (205 bytes) at 55ms
worker 3: Read request from client (205 bytes) at 56ms
client: read 11 bytes
client: read 11 bytes
worker 2: Read request from client (205 bytes) at 56ms
worker 5: Read request from client (205 bytes) at 56ms
client: read 11 bytes
client: read 11 bytes
client: read 11 bytes
worker 3: Read request from client (205 bytes) at 57ms
worker 2: Read request from client (205 bytes) at 57ms
worker 5: Read request from client (205 bytes) at 57ms
client: read 11 bytes
worker 1: Read request from client (205 bytes) at 57ms
client: read 11 bytes
worker 4: Read request from client (205 bytes) at 57ms
client: read 11 bytes
client: read 11 bytes
client: read 11 bytes
server: return accept (at 1668ms)
server: Started worker 6
server: calling accept.
server: return accept (at 1669ms)
server: Started worker 7
server: calling accept.
worker 6: Read request from client (205 bytes) at 1669ms
server: return accept (at 1669ms)
server: Started worker 8
server: calling accept.
worker 7: Read request from client (205 bytes) at 1669ms
server: return accept (at 1669ms)
client: read 11 bytes
worker 8: Read request from client (205 bytes) at 1670ms
server: Started worker 9
server: calling accept.
server: return accept (at 1670ms)
client: read 11 bytes
server: Started worker 10
server: calling accept.
worker 9: Read request from client (205 bytes) at 1670ms
client: read 11 bytes
worker 10: Read request from client (205 bytes) at 1673ms
client: read 11 bytes
worker 6: Read request from client (205 bytes) at 1673ms
worker 7: Read request from client (205 bytes) at 1674ms
client: read 11 bytes
client: read 11 bytes
client: read 11 bytes
worker 9: Read request from client (205 bytes) at 1677ms
worker 7: Read request from client (205 bytes) at 1679ms
worker 8: Read request from client (205 bytes) at 1679ms
client: read 11 bytes
worker 6: Read request from client (205 bytes) at 1680ms
worker 10: Read request from client (205 bytes) at 1680ms
client: read 11 bytes
client: read 11 bytes
client: read 11 bytes
client: read 11 bytes
worker 8: Read request from client (205 bytes) at 1682ms
worker 6: Read request from client (205 bytes) at 1683ms
worker 7: Read request from client (205 bytes) at 1683ms
worker 10: Read request from client (205 bytes) at 1683ms
worker 9: Read request from client (205 bytes) at 1683ms
client: read 11 bytes
client: read 11 bytes
client: read 11 bytes
client: read 11 bytes
client: read 11 bytes
worker 6: Read request from client (205 bytes) at 1686ms
worker 7: Read request from client (205 bytes) at 1686ms
worker 9: Read request from client (205 bytes) at 1686ms
client: read 11 bytes
client: read 11 bytes
client: read 11 bytes
worker 8: Read request from client (205 bytes) at 1687ms
worker 10: Read request from client (205 bytes) at 1687ms
worker 7: Read request from client (205 bytes) at 1688ms
worker 6: Read request from client (205 bytes) at 1688ms
client: read 11 bytes
client: read 11 bytes
client: read 11 bytes
client: read 11 bytes
worker 9: Read request from client (205 bytes) at 1688ms
client: read 11 bytes
worker 6: Read request from client (205 bytes) at 1689ms
worker 10: Read request from client (205 bytes) at 1689ms
worker 8: Read request from client (205 bytes) at 1689ms
worker 7: Read request from client (205 bytes) at 1689ms
worker 9: Read request from client (205 bytes) at 1690ms
client: read 11 bytes
client: read 11 bytes
client: read 11 bytes
client: read 11 bytes
client: read 11 bytes
worker 8: Read request from client (205 bytes) at 1691ms
worker 10: Read request from client (205 bytes) at 1691ms
worker 9: Read request from client (205 bytes) at 1691ms
worker 6: Read request from client (205 bytes) at 1691ms
worker 7: Read request from client (205 bytes) at 1691ms
client: read 11 bytes
client: read 11 bytes
client: read 11 bytes
client: read 11 bytes
client: read 11 bytes
worker 7: Read request from client (205 bytes) at 1692ms
worker 6: Read request from client (205 bytes) at 1693ms
worker 10: Read request from client (205 bytes) at 1693ms
client: read 11 bytes
worker 9: Read request from client (205 bytes) at 1693ms
worker 8: Read request from client (205 bytes) at 1693ms
client: read 11 bytes
client: read 11 bytes
client: read 11 bytes
client: read 11 bytes
worker 10: Read request from client (205 bytes) at 1694ms
worker 9: Read request from client (205 bytes) at 1694ms
worker 8: Read request from client (205 bytes) at 1694ms
client: read 11 bytes
worker 6: Read request from client (205 bytes) at 1695ms
client: read 11 bytes
client: read 11 bytes
client: read 11 bytes
worker 6: Read request from client (205 bytes) at 1696ms
client: read 11 bytes
worker: 5: Shutdown at 1677ms
worker: 4: Shutdown at 1684ms
worker: 1: Shutdown at 1682ms
worker: 3: Shutdown at 1670ms
worker: 2: Shutdown at 1670ms
client: end at 1698ms, thread duration 1697ms
client: end at 1695ms, thread duration 1693ms
client: end at 1695ms, thread duration 1694ms
client: end at 1695ms, thread duration 1693ms
client: end at 1694ms, thread duration 1692ms
DONE at 1698ms
server: STE
Connections = 11
server: Shuting down at: 1724ms
Requests = 100
Connection count = 11 Request count = 100
Worker 0 may have timed out
Worker 1 may have timed out
Worker 2 may have timed out
Worker 3 may have timed out
Worker 4 may have timed out
Worker 5 may have timed out
Worker 6 has not timed out - last used at 1696
Worker 7 has not timed out - last used at 1693
Worker 8 has not timed out - last used at 1695
Worker 9 has not timed out - last used at 1694
Worker 10 has not timed out - last used at 1694
INFO: 11 have been used, with 6 becoming idle for more than 1s while using 5 threads to make concurrent connections
waiting for worker to shutdown at 1760ms
worker: 1 end at 1699ms,  elapsed since worker start: 1687ms, elapsed since accept: 1687ms, timeout exceeded: 1, successfuly handled 12/12 genuine requests, , mayHaveTimedOut: true
worker: 4 end at 1699ms,  elapsed since worker start: 1685ms, elapsed since accept: 1686ms, timeout exceeded: 1, successfuly handled 10/10 genuine requests, , mayHaveTimedOut: true
worker: 2 end at 1700ms,  elapsed since worker start: 1688ms, elapsed since accept: 1688ms, timeout exceeded: 1, successfuly handled 11/11 genuine requests, , mayHaveTimedOut: true
worker: 3 end at 1700ms,  elapsed since worker start: 1687ms, elapsed since accept: 1687ms, timeout exceeded: 1, successfuly handled 12/12 genuine requests, , mayHaveTimedOut: true
worker: 5 end at 1699ms,  elapsed since worker start: 1654ms, elapsed since accept: 1655ms, timeout exceeded: 1, successfuly handled 8/8 genuine requests, , mayHaveTimedOut: true
worker: 7: Shutdown at 5190ms
worker: 6: Shutdown at 5190ms
worker: 8: Shutdown at 5190ms
worker: 6 end at 5190ms,  elapsed since worker start: 3521ms, elapsed since accept: 3522ms, timeout exceeded: 0, successfuly handled 11/11 genuine requests, , mayHaveTimedOut: true
worker: 7 end at 5190ms,  elapsed since worker start: 3521ms, elapsed since accept: 3521ms, timeout exceeded: 0, successfuly handled 9/9 genuine requests, , mayHaveTimedOut: true
worker: 10: Shutdown at 5190ms
worker: 9: Shutdown at 5190ms
worker: 8 end at 5190ms,  elapsed since worker start: 3521ms, elapsed since accept: 3521ms, timeout exceeded: 0, successfuly handled 8/8 genuine requests, , mayHaveTimedOut: true
worker: 9 end at 5191ms,  elapsed since worker start: 3521ms, elapsed since accept: 3521ms, timeout exceeded: 0, successfuly handled 9/9 genuine requests, , mayHaveTimedOut: true
worker: 10 end at 5191ms,  elapsed since worker start: 3519ms, elapsed since accept: 3521ms, timeout exceeded: 0, successfuly handled 8/8 genuine requests, , mayHaveTimedOut: true
main thread end - 61858ms
----------System.err:(15/719)----------

JavaTest Message: Test complete.


JavaTest Message: Problem cleaning up the following threads:
Worker-0
  at java.base@11.0.20-ea/java.net.SocketInputStream.socketRead0(Native Method)
  at java.base@11.0.20-ea/java.net.SocketInputStream.socketRead(SocketInputStream.java:115)
  at java.base@11.0.20-ea/java.net.SocketInputStream.read(SocketInputStream.java:168)
  at java.base@11.0.20-ea/java.net.SocketInputStream.read(SocketInputStream.java:140)
  at java.base@11.0.20-ea/java.io.BufferedInputStream.fill(BufferedInputStream.java:252)
  at java.base@11.0.20-ea/java.io.BufferedInputStream.read(BufferedInputStream.java:271)
  at Worker.readUntil(MultiThreadTest.java:427)
  at Worker.run(MultiThreadTest.java:469)

result: Error. Error while cleaning up threads after test

;;;","2023-02-17 05:54;dfuchs;Worker 0 didn't finish in the 60s time slot main tried to join it at the end of the test. JTreg also gave up waiting on it.  The HttpClient of the HttpURLConnection or the KAC should have closed the connection after a while - which didn't seem to happen for the connection created for Worker 0.;;;","2023-02-20 09:49;djelinski;We still have a race in the keepalive cache.

The keepalive sweeper thread terminates when it finds an empty cache after doing its job. The check for empty cache is performed without holding the cache lock.

When a worker thread adds a connection to cache, it first acquires the lock, then checks if the sweeper thread is running (and start it if needed), then adds the connection to cache.

When the sweeper thread is started, the cache is cleared. This is probably a safeguard to protect against situations where the cleaner thread dies for whatever reason.

The race is as follows:
- the sweeper thread finishes removing connections from cache and releases the lock
- a worker thread acquires the lock, checks that the sweeper thread is alive
- the sweeper thread checks that the cache is empty and terminates
- the worker thread adds its connection to cache and releases the lock
- another worker thread acquires the lock, finds that the sweeper thread is dead, starts another sweeper thread and clears the cache, losing the recently added connection.

The window of opportunity for this race is very short, which explains why we only saw this failure once. It can be increased by adding a few Thread.sleep() calls, but reproducing this with a regression test is next to impossible.;;;","2023-02-21 03:44;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/12676
Date: 2023-02-20 19:38:35 +0000;;;","2023-02-26 23:53;dukebot;Changeset: a2c5a4ac
Author:    Daniel Jeliński <djelinski@openjdk.org>
Date:      2023-02-27 07:52:03 +0000
URL:       https://git.openjdk.org/jdk/commit/a2c5a4ac9ee10281470f291f5a8f8393acea02cc
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,
[11u] Update GHA Boot JDK to 11.0.18,JDK-8302694,5094404,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,clanger,clanger,clanger,2023-02-16 13:38,2023-02-22 00:53,2023-10-01 09:56,2023-02-17 01:59,11.0.19,,,,,,,,11.0.19,infrastructure,,0,jdk11u-fix-request,jdk11u-fix-yes,,,,,,,,,,,,,,,GHA of JDK11u currently uses JDK version 11.0.14. It should be updated to 11.0.18.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i30faz:",9223372036854775807,b03,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@429c566,,,,,,,,,"2023-02-16 13:46;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk11u-dev/pull/1760
Date: 2023-02-16 21:39:58 +0000;;;","2023-02-17 01:30;clanger;Fix request (11u):
Maintenance of Github Actions workflow. No risk. GHA run succesful.;;;","2023-02-17 01:59;dukebot;Changeset: 27219916
Author:    Christoph Langer <clanger@openjdk.org>
Date:      2023-02-17 09:57:25 +0000
URL:       https://git.openjdk.org/jdk11u-dev/commit/272199168cbe9d42cfadc532b0a826ad5265c501
;;;","2023-02-22 00:53;dukebot;Changeset: 27219916
Author:    Christoph Langer <clanger@openjdk.org>
Date:      2023-02-17 09:57:25 +0000
URL:       https://git.openjdk.org/jdk11u/commit/272199168cbe9d42cfadc532b0a826ad5265c501
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,
[17u] Update GHA Boot JDK to 17.0.6,JDK-8302692,5094402,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,clanger,clanger,clanger,2023-02-16 13:31,2023-02-22 00:40,2023-10-01 09:56,2023-02-17 01:59,17.0.7,,,,,,,,17.0.7,infrastructure,,0,jdk17u-fix-request,jdk17u-fix-yes,,,,,,,,,,,,,,,GHA of JDK17u currently uses JDK version 17.0.2. It should be updated to 17.0.6. ,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i30faj:",9223372036854775807,b03,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@429c566,,,,,,,,,"2023-02-16 13:40;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/1177
Date: 2023-02-16 21:33:25 +0000;;;","2023-02-17 01:24;clanger;Fix request (17u):
Maintenance of GHA workflow. No risk. GHA test successful.;;;","2023-02-17 01:59;dukebot;Changeset: d0e06335
Author:    Christoph Langer <clanger@openjdk.org>
Date:      2023-02-17 09:57:24 +0000
URL:       https://git.openjdk.org/jdk17u-dev/commit/d0e06335235ddd50012a9040a3af4eb5631dc49a
;;;","2023-02-22 00:38;dukebot;Changeset: d0e06335
Author:    Christoph Langer <clanger@openjdk.org>
Date:      2023-02-17 09:57:24 +0000
URL:       https://git.openjdk.org/jdk17u/commit/d0e06335235ddd50012a9040a3af4eb5631dc49a
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,
Some javac unit tests aren't reliably closing open files,JDK-8302685,5094394,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,acobbs,acobbs,acobbs,2023-02-16 12:09,2023-03-06 11:41,2023-10-01 09:56,2023-02-27 08:24,21,,,,,,,,21,tools,,0,noreg-self,,,,,,,,,,,,,,,,"Some unit tests aren't reliably closing open files; invariably these were written prior to (or without utilizing) try-with-resources.

Leaving files and other resources open can cause problems during automated builds, etc. See JDK-7127924 for example.

These tests should be updated to use try-with-resource.

Examples:
* 6400872/T6400872.java (line 127)
* 6638501/JarFromManifestFailure.java (line 147)
* T8152616.java (line 63, 69)
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-7127924,JDK-7129676,,,,,,,,,,,,,,,generic,,,,,,,,,,generic,,,,,,"0|i30f8r:",9223372036854775807,b12,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4dca67bd,,,,,,,,,"2023-02-16 13:39;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/12609
Date: 2023-02-16 21:32:44 +0000;;;","2023-02-27 08:24;dukebot;Changeset: 55e6bb6b
Author:    Archie L. Cobbs <archie.cobbs@gmail.com>
Committer: Vicente Romero <vromero@openjdk.org>
Date:      2023-02-27 16:21:57 +0000
URL:       https://git.openjdk.org/jdk/commit/55e6bb6b85828f9a0ac37467ac2d28fd3349c64f
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Cherry-pick WebKit 615.1 stabilization fixes (2),JDK-8302684,5094391,Bug,Resolved,JDK,JDK,software,duke,,,P2,Fixed,hmeda,hmeda,hmeda,2023-02-16 11:22,2023-03-13 17:31,2023-10-01 09:56,2023-02-17 04:51,8u371,jfx21,,,,,,,jfx21,javafx,,0,CPU23_04-critical-approved,CPU23_04-critical-SQE-OK,sn_137,webkit-2.38,,,,,,,,,,,,,Cherry-pick stablization fixes till v2.38.5,,,,,,,,,,,JDK-8302923,JDK-8302786,JDK-8304094,JDK-8304105,JDK-8304093,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8299977,JDK-8302294,,,,,,,,,,,,,,,generic,,,,,,,,,,generic,,,,,,"0|i30f83:",9223372036854775807,b06,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@5a8b92bd,,,,,,,,,"2023-02-16 12:29;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jfx/pull/1038
Date: 2023-02-16 19:29:26 +0000;;;","2023-02-17 04:51;dukebot;Changeset: 67c2b7a1
Author:    Hima Bindu Meda <hmeda@openjdk.org>
Committer: Kevin Rushforth <kcr@openjdk.org>
Date:      2023-02-17 12:49:28 +0000
URL:       https://git.openjdk.org/jfx/commit/67c2b7a13b5d3378c1006b8fd3af28aa8eb49c25
;;;","2023-03-13 15:50;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jfx17u/pull/126
Date: 2023-03-13 22:18:01 +0000;;;","2023-03-13 15:53;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jfx11u/pull/136
Date: 2023-03-13 22:17:47 +0000;;;","2023-03-13 17:15;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jfx20u/pull/6
Date: 2023-03-13 23:57:28 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,,,
Regression - Fix for JDK-8301669 broke BYTE_ALPHA pixel format,JDK-8302679,5094383,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,aghaisas,aghaisas,aghaisas,2023-02-16 09:21,2023-02-16 09:26,2023-10-01 09:56,2023-02-16 09:26,internal,,,,,,,,internal,javafx,,0,javafx-metal,regression,regression_8301669,,,,,,,,,,,,,,"Fix done for JDK-8301669 restructured the switch case handling various PixelFormats.
BYTE_ALPHA format was handled by the `default` case.

The code restructuring changed this default case.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8301669,,,,,,,,,,,,,,,,,,,,,generic,,,,,,,,,,os_x,,,,,,"0|i30f6b:",9223372036854775807,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4143e3f7,,,,,,,,,"2023-02-16 09:26;aghaisas;Changeset: 1e1a56b5
Author:    aghaisas <ajitgh@gmail.com>
Date:      2023-02-16 22:53:34 +0000
URL:       https://git.openjdk.org/jfx-sandbox/commit/1e1a56b508f9ab51e542e283d9dda6470e421a34;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
validate_source fails after JDK-8293313,JDK-8302678,5094381,Bug,Resolved,JDK,JDK,software,duke,,,P1,Fixed,dcubed,dcubed,dcubed,2023-02-16 09:01,2023-02-22 23:12,2023-10-01 09:56,2023-02-16 09:15,21,,,,,,,,21,hotspot,,0,noreg-trivial,tier1,,,,,,,,,,,,,,,"BAD COPYRIGHT: /System/Volumes/Data/work/shared/bug_hunt/XXXXXXX_for_jdk21.git/open/src/hotspot/share/services/mallocTracker.hpp
1 header format error(s).
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8293313,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i30f5v:",9223372036854775807,b11,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,,,"2023-02-16 09:05;dcubed;Here's the context diff for the proposed fix:

$ git diff
diff --git a/src/hotspot/share/services/mallocTracker.hpp b/src/hotspot/share/services/mallocTracker.hpp
index 461b73b35ee..80acc7e1854 100644
--- a/src/hotspot/share/services/mallocTracker.hpp
+++ b/src/hotspot/share/services/mallocTracker.hpp
@@ -1,6 +1,7 @@
 /*
  * Copyright (c) 2014, 2023, Oracle and/or its affiliates. All rights reserved.
  * Copyright (c) 2021, 2023 SAP SE. All rights reserved.
+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
  * under the terms of the GNU General Public License version 2 only, as;;;","2023-02-16 09:14;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/12599
Date: 2023-02-16 17:07:15 +0000;;;","2023-02-16 09:15;dukebot;Changeset: 574b48c6
Author:    Daniel D. Daugherty <dcubed@openjdk.org>
Date:      2023-02-16 17:13:16 +0000
URL:       https://git.openjdk.org/jdk/commit/574b48c6925ebfb31345fc46c7d23aa4153f99b0
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,
libawt has a memmove decay error,JDK-8302671,5094374,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,jwaters,jwaters,jwaters,2023-02-16 07:34,2023-02-22 23:12,2023-10-01 09:56,2023-02-16 11:00,,,,,,,,,21,client-libs,,0,,,,,,,,,,,,,,,,,"In libawt, the size parameter is issued by a sizeof on an array, which as expected decays into a pointer and breaks the cleanup code by giving the incorrect size",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8288293,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i30f4b:",9223372036854775807,b11,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@5a9b3fd3,,,,,,,,,"2023-02-16 07:40;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/12597
Date: 2023-02-16 15:33:51 +0000;;;","2023-02-16 11:00;dukebot;Changeset: e5042dd4
Author:    Julian Waters <jwaters@openjdk.org>
Date:      2023-02-16 18:56:59 +0000
URL:       https://git.openjdk.org/jdk/commit/e5042dd483d54216d0e82624bb964d9e029af484
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
use-after-free related to PhaseIterGVN interaction with Unique_Node_List and Node_Stack,JDK-8302670,5094373,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,epeter,jcking,jcking,2023-02-16 07:33,2023-06-04 20:14,2023-10-01 09:56,2023-05-30 00:17,11,17,21,,,,,,21,hotspot,,0,c2,oracle-triage-21,,,,,,,,,,,,,,,"Instrumenting Arena for ASan has revealed an awkward use-after-free in C2. It appears PhaseIterGVN ends up copying Compile::for_igvn() by value in its constructor. It then either intentionally or unintentionally causes the list to grow triggering Arealloc. This leaves the original Compile::for_igvn() Unique_Node_List now pointing to free'd memory which eventually gets used again.

We need to detangle the expectation with PhaseIterGVN and whether modifications to either Unique_Node_List or Node_Stack it copies by value in its constructors should be visible to the caller.

Should PhaseIterGVN be using copy-on-write semantics? Should PhaseIterGVN be propagating changes to either Unique_Node_List or Node_Stack back to the caller it copied it from?

==3227315==ERROR: AddressSanitizer: use-after-poison on address 0x6290005b9210 at pc 0x7f619ca47681 bp 0x7f60d80eb8e0 sp 0x7f60d80eb090                                                                                                                                           [105/1351]
WRITE of size 16384 at 0x6290005b9210 thread T17
    #0 0x7f619ca47680 in __interceptor_memset ../../../../src/libsanitizer/sanitizer_common/sanitizer_common_interceptors.inc:799
    #1 0x7f6197e15ccb in Copy::pd_zero_to_bytes(void*, unsigned long) src/hotspot/cpu/x86/copy_x86.hpp:59
    #2 0x7f6197e15ccb in Copy::zero_to_bytes(void*, unsigned long) src/hotspot/share/utilities/copy.hpp:298
    #3 0x7f6197e15ccb in Node_Array::clear() src/hotspot/share/opto/node.hpp:1548
    #4 0x7f6197e15ccb in Node_List::clear() src/hotspot/share/opto/node.hpp:1572
    #5 0x7f6197e15ccb in Unique_Node_List::clear() src/hotspot/share/opto/node.hpp:1623
    #6 0x7f6197e15ccb in Compile::Optimize() src/hotspot/share/opto/compile.cpp:2269
    #7 0x7f6197e1cf12 in Compile::Compile(ciEnv*, ciMethod*, int, Options, DirectiveSet*) src/hotspot/share/opto/compile.cpp:833
    #8 0x7f6197af05ce in C2Compiler::compile_method(ciEnv*, ciMethod*, int, bool, DirectiveSet*) src/hotspot/share/opto/c2compiler.cpp:113
    #9 0x7f6197e33890 in CompileBroker::invoke_compiler_on_method(CompileTask*) src/hotspot/share/compiler/compileBroker.cpp:2237
    #10 0x7f6197e364a7 in CompileBroker::compiler_thread_loop() src/hotspot/share/compiler/compileBroker.cpp:1916
    #11 0x7f61989b235b in JavaThread::thread_main_inner() src/hotspot/share/runtime/javaThread.cpp:710
    #12 0x7f61989b274f in JavaThread::thread_main_inner() src/hotspot/share/runtime/javaThread.cpp:689
    #13 0x7f61989b274f in JavaThread::run() src/hotspot/share/runtime/javaThread.cpp:695
    #14 0x7f619a1f0e75 in Thread::call_run() src/hotspot/share/runtime/thread.cpp:224
    #15 0x7f619986317f in thread_native_entry src/hotspot/os/linux/os_linux.cpp:737
    #16 0x7f619c8a7fd3 in start_thread nptl/pthread_create.c:442
    #17 0x7f619c92866b in clone3 ../sysdeps/unix/sysv/linux/x86_64/clone3.S:81

0x6290005b9210 is located 16 bytes inside of 16400-byte region [0x6290005b9200,0x6290005bd210)
allocated by thread T17 here:
    #0 0x7f619cab89cf in __interceptor_malloc ../../../../src/libsanitizer/asan/asan_malloc_linux.cpp:69
    #1 0x7f619984b0ba in os::malloc(unsigned long, MEMFLAGS, NativeCallStack const&) src/hotspot/share/runtime/os.cpp:673
    #2 0x7f619749a87e in Chunk::operator new(unsigned long, AllocFailStrategy::AllocFailEnum, unsigned long) src/hotspot/share/memory/arena.cpp:190
    #3 0x7f619749a87e in Arena::grow(unsigned long, AllocFailStrategy::AllocFailEnum) src/hotspot/share/memory/arena.cpp:319
    #4 0x7f619749ac5c in Arena::internal_amalloc(unsigned long, AllocFailStrategy::AllocFailEnum) src/hotspot/share/memory/arena.hpp:113
    #5 0x7f619749ac5c in Arena::Amalloc(unsigned long, AllocFailStrategy::AllocFailEnum) src/hotspot/share/memory/arena.hpp:133
    #6 0x7f619749ac5c in Arena::Arealloc(void*, unsigned long, unsigned long, AllocFailStrategy::AllocFailEnum) src/hotspot/share/memory/arena.cpp:370
    #7 0x7f61997a5f6f in Node_Array::grow(unsigned int) src/hotspot/share/opto/node.cpp:2778
    #8 0x7f61998fd96c in Node_Array::map(unsigned int, Node*) src/hotspot/share/opto/node.hpp:1543
    #9 0x7f61998fd96c in Node_List::push(Node*) src/hotspot/share/opto/node.hpp:1569
    #10 0x7f61998fd96c in Unique_Node_List::push(Node*) src/hotspot/share/opto/node.hpp:1601
    #11 0x7f61998fd96c in Compile::record_for_igvn(Node*) src/hotspot/share/opto/node.hpp:1672
    #12 0x7f61998fd96c in GraphKit::record_for_igvn(Node*) const src/hotspot/share/opto/graphKit.hpp:96
    #13 0x7f61998fd96c in Parse::merge_memory_edges(MergeMemNode*, int, bool) src/hotspot/share/opto/parse1.cpp:1886
    #14 0x7f61998fe585 in Parse::merge_common(Parse::Block*, int) src/hotspot/share/opto/parse1.cpp:1763
    #15 0x7f6199902b6e in Parse::do_all_blocks() src/hotspot/share/opto/parse1.cpp:707
    #16 0x7f619990c6b4 in Parse::Parse(JVMState*, ciMethod*, float) src/hotspot/share/opto/parse1.cpp:613
    #17 0x7f6197af3175 in ParseGenerator::generate(JVMState*) src/hotspot/share/opto/callGenerator.cpp:99
    #18 0x7f6197af9b11 in PredictedCallGenerator::generate(JVMState*) src/hotspot/share/opto/callGenerator.cpp:915
    #19 0x7f61981ff789 in Parse::do_call() src/hotspot/share/opto/doCall.cpp:662
    #20 0x7f619992e27f in Parse::do_one_bytecode() src/hotspot/share/opto/parse2.cpp:2704
    #21 0x7f6199901796 in Parse::do_one_block() src/hotspot/share/opto/parse1.cpp:1560
    #22 0x7f6199902b6e in Parse::do_all_blocks() src/hotspot/share/opto/parse1.cpp:707
    #23 0x7f619990c6b4 in Parse::Parse(JVMState*, ciMethod*, float) src/hotspot/share/opto/parse1.cpp:613
    #24 0x7f6197af3175 in ParseGenerator::generate(JVMState*) src/hotspot/share/opto/callGenerator.cpp:99
    #25 0x7f6197af9b11 in PredictedCallGenerator::generate(JVMState*) src/hotspot/share/opto/callGenerator.cpp:915
    #26 0x7f61981ff789 in Parse::do_call() src/hotspot/share/opto/doCall.cpp:662
    #27 0x7f619992e27f in Parse::do_one_bytecode() src/hotspot/share/opto/parse2.cpp:2704
    #28 0x7f6199901796 in Parse::do_one_block() src/hotspot/share/opto/parse1.cpp:1560
    #29 0x7f6199902b6e in Parse::do_all_blocks() src/hotspot/share/opto/parse1.cpp:707
    #30 0x7f619990c6b4 in Parse::Parse(JVMState*, ciMethod*, float) src/hotspot/share/opto/parse1.cpp:613
    #31 0x7f6197af3175 in ParseGenerator::generate(JVMState*) src/hotspot/share/opto/callGenerator.cpp:99
    #32 0x7f6197e1c9cc in Compile::Compile(ciEnv*, ciMethod*, int, Options, DirectiveSet*) src/hotspot/share/opto/compile.cpp:763
    #33 0x7f6197af05ce in C2Compiler::compile_method(ciEnv*, ciMethod*, int, bool, DirectiveSet*) src/hotspot/share/opto/c2compiler.cpp:113
    #34 0x7f6197e33890 in CompileBroker::invoke_compiler_on_method(CompileTask*) src/hotspot/share/compiler/compileBroker.cpp:2237
    #35 0x7f6197e364a7 in CompileBroker::compiler_thread_loop() src/hotspot/share/compiler/compileBroker.cpp:1916
    #36 0x7f61989b235b in JavaThread::thread_main_inner() src/hotspot/share/runtime/javaThread.cpp:710
    #37 0x7f61989b274f in JavaThread::thread_main_inner() src/hotspot/share/runtime/javaThread.cpp:689
    #38 0x7f61989b274f in JavaThread::run() src/hotspot/share/runtime/javaThread.cpp:695",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8301373,,,,,JDK-8307815,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i30f43:",9223372036854775807,b25,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2023-02-17 01:03;thartmann;Nice analysis, thanks for the report!

C->for_igvn() is used to record nodes during parsing (GVN) that should be put on the IGVN worklist later. Once IGVN is over, the for_igvn() node list is cleared and re-used when inlining (parsing) again incrementally.

> It then either intentionally or unintentionally causes the list to grow triggering Arealloc

Since C->for_igvn() is passed by value to PhaseIterGVN::_worklist but the underlying Node_Array::_nodes memory is shared, I would assume that a growing _worklist during IGVN, which is expected, affects C->for_igvn() as well, right?

> This leaves the original Compile::for_igvn() Unique_Node_List now pointing to free'd memory which eventually gets used again.

Right, I think the only reason that this does not cause any real problems is that a free in the Arena (Arena::Afree) is a NOP. We just drop the memory and allocate a new chunk. If C->for_igvn() still refers to it, it's guaranteed to not be re-used by something else.

I think C->for_igvn() should be ""owned"" by Compile and passed by reference to IGVN such that the same node list is re-used by all the parsing runs. This could also reduce overall memory consumption because we potentially don't need to re-allocate that often.;;;","2023-02-17 01:04;thartmann;ILW = Use-after-free in C2 code, most likely not an issue with current code but could affect memory consumption, no workaround = MMH = P3;;;","2023-02-17 10:48;jcking;I think the way to go about fixing this is probably to start by adding NONCOPYABLE to Type_Array, Node_Stack, Node_Array, NodeHash, and friends. This will trigger compile errors that will identify where the odd copying is being performed. Then it's a matter of determining whether it should be by reference or whether it should probably be a move.;;;","2023-02-19 23:28;thartmann;Right, that's a good suggestion.;;;","2023-02-20 03:37;thartmann;Emanuel, could you please have a look at this?;;;","2023-02-21 15:59;jcking;I have https://github.com/openjdk/jdk/pull/12703, but I am *really* not confident in it so I have no intention on taking it past a draft. Just dropping here as a discussion or starting point for somebody else. It makes phases and all the containers non-copyable. It uses some implicit moves (rvalues) to allow returning containers, some move-like functions (replace_with), and reset. This ensures only one container actually owns it at a single time. In this case, C2 might benefit from using rvalues and move constructors/assignments even though Hotspot in general has not decided on their usage.;;;","2023-04-25 05:02;epeter;[~jcking] Thanks for your PR.
I looked at the problem, and your suggested changes.
Currently, we really have a tangled mess.

I like the idea of having clear ownership of the Node_List, etc.
So making them non-copyable is a good start, that way we at least do not have inconsistent states because of internals being copied by value.

For the ""Phases"", we have some internal data-structures that get passed from phase to phase.
I see that you made the IGVN ""_worklist"" live in ""Compile"", and use it as reference everywhere else. I like that.
Can we do something similar with the ""_nodes"" and ""_types"" for ""PhaseTransform""? I'm not sure, but it might be that we also only need one of each of those per compilation (with the exception of the verification loop-opts).

I understand why you use the ""replace_with"" method: you want to move the internals of the source to the destination, and then remove the ownership of the source, by nullptr-ing out the memory references. This is nice, we only have one owner of the internally allocated memory. However, it just leaves the source as dead. What should happen if we use the source again? Throw an assert or hit a nullptr-dereference / SIGSEGV? Or should it just be empty, and re-allocate memory on insert, as you do with ""Node_Array::insert""?

In ""PhaseTransform::PhaseTransform( PhaseTransform *pt, PhaseNumber pnum )"", you initialize ""_nodes"" and ""_types"" with the ""Node_List::Node_List(Node_List *nl)"" constructor. This calls ""replace_with"", and invalidates/empties the ""_nodes"" and ""_types"" of the input ""pt"". I'm not sure that the user of the ""PhaseTransform"" (or subclass) constructor is aware that the internals will be moved over to the new phase, and the old phase is invalid/empty now.

I wonder if it would be smarter to keep the ""_nodes"" and ""_types"" outside the phase, and only use them as references inside?
We could keep them in the ""Compile"", or generate new ones temporarily if a ""PhaseTransform"" needs to have a new set of those data-structures. That way, the owner is clear (""Compile"", or some outer context owns it). And the owner will have a wider scope than the reference-uses: we will only pass them downward in the call hierarchy.;;;","2023-05-09 23:44;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/13833
Date: 2023-05-05 14:08:42 +0000;;;","2023-05-30 00:17;dukebot;Changeset: 1f1f6040
Author:    Emanuel Peter <epeter@openjdk.org>
Date:      2023-05-30 07:14:50 +0000
URL:       https://git.openjdk.org/jdk/commit/1f1f604071dc2fca4849eb6ce251d5f18b443e16
;;;",,,,,,,,,,,,,,,,,,,,,,
"[TESTBUG]  Tests require feature sse4_1 which does not exist, should be sse4.1",JDK-8302668,5094369,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,epeter,epeter,epeter,2023-02-16 07:04,2023-02-22 23:14,2023-10-01 09:56,2023-02-20 00:44,21,,,,,,,,21,hotspot,,0,noreg-self,oracle-triage-21,,,,,,,,,,,,,,,"I found this during the work of JDK-8302139.

This test bug means that multiple tests are ignored on intel machines. We have to replace ""sse4_1"" with ""sse4.1"".

As [~kvn] said:

sse4_1  comes from /proc/cpuinfo. sse4.1 is in CPU_FEATURE_FLAGS and produced by VM output. IR framework gets info from WHITE_BOX.getCPUFeatures() which calls VM_Version::features_string(). So you are right tests should use sse4.1

grep ""sse4"" test/hotspot/jtreg/compiler/ -r

test/hotspot/jtreg/compiler/vectorization/runner/BasicIntOpTest.java:    @IR(applyIfCPUFeatureOr = {""asimd"", ""true"", ""sse4_1"", ""true""},
test/hotspot/jtreg/compiler/vectorization/runner/BasicIntOpTest.java:    @IR(applyIfCPUFeatureOr = {""asimd"", ""true"", ""sse4_1"", ""true""},
test/hotspot/jtreg/compiler/vectorization/runner/BasicIntOpTest.java:    @IR(applyIfCPUFeatureOr = {""asimd"", ""true"", ""sse4_1"", ""true""},
test/hotspot/jtreg/compiler/vectorization/runner/MultipleLoopsTest.java:    @IR(applyIfCPUFeatureOr = {""asimd"", ""true"", ""sse4_1"", ""true""},
test/hotspot/jtreg/compiler/vectorization/runner/MultipleLoopsTest.java:    @IR(applyIfCPUFeatureOr = {""asimd"", ""true"", ""sse4_1"", ""true""},
test/hotspot/jtreg/compiler/vectorization/runner/BasicByteOpTest.java:    @IR(applyIfCPUFeatureOr = {""asimd"", ""true"", ""sse4_1"", ""true""},
test/hotspot/jtreg/compiler/vectorization/runner/BasicByteOpTest.java:    @IR(applyIfCPUFeatureOr = {""asimd"", ""true"", ""sse4_1"", ""true""},
test/hotspot/jtreg/compiler/vectorization/runner/BasicByteOpTest.java:    @IR(applyIfCPUFeatureOr = {""asimd"", ""true"", ""sse4_1"", ""true""},
test/hotspot/jtreg/compiler/vectorization/runner/BasicByteOpTest.java:    @IR(applyIfCPUFeatureOr = {""asimd"", ""true"", ""sse4_1"", ""true""},
test/hotspot/jtreg/compiler/vectorization/runner/BasicByteOpTest.java:    @IR(applyIfCPUFeatureOr = {""asimd"", ""true"", ""sse4_1"", ""true""},
test/hotspot/jtreg/compiler/vectorization/runner/BasicByteOpTest.java:    @IR(applyIfCPUFeatureOr = {""asimd"", ""true"", ""sse4_1"", ""true""},
test/hotspot/jtreg/compiler/vectorization/runner/BasicLongOpTest.java:    @IR(applyIfCPUFeatureOr = {""sve"", ""true"", ""sse4_1"", ""true""},
test/hotspot/jtreg/compiler/vectorization/runner/BasicLongOpTest.java:    @IR(applyIfCPUFeatureOr = {""sve"", ""true"", ""sse4_1"", ""true""},
test/hotspot/jtreg/compiler/vectorization/runner/BasicLongOpTest.java:    @IR(applyIfCPUFeatureOr = {""sve"", ""true"", ""sse4_1"", ""true""},
test/hotspot/jtreg/compiler/vectorization/runner/LoopLiveOutNodesTest.java:    @IR(applyIfCPUFeatureOr = {""asimd"", ""true"", ""sse4_1"", ""true""},
test/hotspot/jtreg/compiler/vectorization/runner/LoopArrayIndexComputeTest.java:    @IR(applyIfCPUFeatureOr = {""asimd"", ""true"", ""sse4_1"", ""true""},
test/hotspot/jtreg/compiler/vectorization/runner/LoopArrayIndexComputeTest.java:    @IR(applyIfCPUFeatureOr = {""asimd"", ""true"", ""sse4_1"", ""true""},
test/hotspot/jtreg/compiler/vectorization/runner/LoopArrayIndexComputeTest.java:    @IR(applyIfCPUFeatureOr = {""asimd"", ""true"", ""sse4_1"", ""true""},
test/hotspot/jtreg/compiler/vectorization/runner/LoopArrayIndexComputeTest.java:    @IR(applyIfCPUFeatureOr = {""asimd"", ""true"", ""sse4_1"", ""true""},
test/hotspot/jtreg/compiler/vectorization/runner/LoopRangeStrideTest.java:    @IR(applyIfCPUFeatureOr = {""asimd"", ""true"", ""sse4_1"", ""true""},
test/hotspot/jtreg/compiler/vectorization/runner/LoopRangeStrideTest.java:    @IR(applyIfCPUFeatureOr = {""asimd"", ""true"", ""sse4_1"", ""true""},
test/hotspot/jtreg/compiler/vectorization/runner/LoopRangeStrideTest.java:    @IR(applyIfCPUFeatureOr = {""asimd"", ""true"", ""sse4_1"", ""true""},
test/hotspot/jtreg/compiler/vectorization/runner/LoopRangeStrideTest.java:    @IR(applyIfCPUFeatureOr = {""asimd"", ""true"", ""sse4_1"", ""true""},
test/hotspot/jtreg/compiler/vectorization/runner/LoopCombinedOpTest.java:    @IR(applyIfCPUFeatureOr = {""asimd"", ""true"", ""sse4_1"", ""true""},
test/hotspot/jtreg/compiler/vectorization/runner/LoopCombinedOpTest.java:    @IR(applyIfCPUFeatureOr = {""asimd"", ""true"", ""sse4_1"", ""true""},
test/hotspot/jtreg/compiler/vectorization/runner/LoopCombinedOpTest.java:    @IR(applyIfCPUFeatureOr = {""asimd"", ""true"", ""sse4_1"", ""true""},
test/hotspot/jtreg/compiler/vectorization/runner/LoopCombinedOpTest.java:    @IR(applyIfCPUFeatureOr = {""asimd"", ""true"", ""sse4_1"", ""true""},
test/hotspot/jtreg/compiler/vectorization/runner/LoopCombinedOpTest.java:    @IR(applyIfCPUFeatureOr = {""asimd"", ""true"", ""sse4_1"", ""true""},
test/hotspot/jtreg/compiler/vectorization/runner/LoopCombinedOpTest.java:    @IR(applyIfCPUFeatureOr = {""asimd"", ""true"", ""sse4_1"", ""true""},
test/hotspot/jtreg/compiler/c2/cr7200264/TestSSE4IntVect.java: * @requires vm.cpu.features ~= "".*sse4\\.1.*"" & vm.debug & vm.flavor == ""server""
test/hotspot/jtreg/compiler/arraycopy/stress/TestStressArrayCopy.java:            if (containsFuzzy(cpuFeatures, ""sse4"")) {
test/hotspot/jtreg/compiler/vectorapi/TestVectorTest.java: * @requires (os.simpleArch == ""x64"" & vm.cpu.features ~= "".*sse4.*"" & (vm.opt.UseSSE == ""null"" | vm.opt.UseSSE > 3))
test/hotspot/jtreg/compiler/cpuflags/TestSSE4Disabled.java: * @requires vm.cpu.features ~= "".*sse4.*""

When I quickly ran one of them, I got this reported back to me:
[IREncodingPrinter] Disabling IR matching for rule 1 of 1 in opWithConstantAndLoopInvariant: None of the feature constraints met (applyIfCPUFeatureOr): asimd, true, sse4_1, true
[IREncodingPrinter] Disabling IR matching for rule 1 of 1 in partialVectorizableLoop: None of the feature constraints met (applyIfCPUFeatureOr): asimd, true, sse4_1, true
[IREncodingPrinter] Disabling IR matching for rule 1 of 1 in opWithLoopInvariant: None of the feature constraints met (applyIfCPUFeatureOr): asimd, true, sse4_1, true
[IREncodingPrinter] Disabling IR matching for rule 1 of 1 in multipleOpsWithMultipleConstants: None of the feature constraints met (applyIfCPUFeatureOr): asimd, true, sse4_1, true
[IREncodingPrinter] Disabling IR matching for rule 1 of 1 in multipleStoresWithCommonSubExpression: None of the feature constraints met (applyIfCPUFeatureOr): asimd, true, sse4_1, true
[IREncodingPrinter] Disabling IR matching for rule 1 of 1 in manuallyUnrolledStride2: None of the feature constraints met (applyIfCPUFeatureOr): asimd, true, sse4_1, true",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8303105,JDK-8302681,JDK-8302139,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i30f37:",9223372036854775807,b11,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2023-02-16 07:33;thartmann;ILW = IR verification not executed, some tests on AVX4 capable systems, no workaround = MLH = P4;;;","2023-02-16 09:51;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/12601
Date: 2023-02-16 17:28:46 +0000;;;","2023-02-20 00:43;dukebot;Changeset: 7e08275c
Author:    Emanuel Peter <epeter@openjdk.org>
Date:      2023-02-20 08:41:40 +0000
URL:       https://git.openjdk.org/jdk/commit/7e08275cc13bfc0f66b1d62b8df58986ecbb45ba
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,
Fix several incorrect usages of Preconditions.checkFromIndexSize,JDK-8302664,5094360,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,jpai,jpai,jpai,2023-02-16 06:29,2023-02-22 23:14,2023-10-01 09:56,2023-02-17 16:50,,,,,,,,,21,core-libs,,0,noreg-hard,,,,,,,,,,,,,,,,"The Preconditions.checkFromIndexSize has the following signature:

public static <X extends RuntimeException>
    int checkFromIndexSize(int fromIndex, int size, int length,
                           BiFunction<String, List<Number>, X> oobef)

i.e. it takes the ""fromIndex"" as the first parameter and the size as the second parameter. However, there are places in code right now, where the call to this method incorrectly passes the size as the first parameter and the fromIndex as the second parameter.
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8268698,,,,,,,,,,,,,,,,,,,,,,,,,,,,,18,,,,,,,,"0|i30f17:",9223372036854775807,b11,,,,,,,,,,,"2023-02-17 03:46;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/12595
Date: 2023-02-16 14:42:52 +0000;;;","2023-02-17 16:49;dukebot;Changeset: 43cf8b3d
Author:    Jaikiran Pai <jpai@openjdk.org>
Date:      2023-02-18 00:48:29 +0000
URL:       https://git.openjdk.org/jdk/commit/43cf8b3d8067bc7128c98f86d5f8b6fa8bbed80e
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Missing spaces in output of -XX:+CIPrintMethodCodes,JDK-8302656,5094349,Bug,Resolved,JDK,JDK,software,duke,,,P5,Fixed,tholenstein,tholenstein,tholenstein,2023-02-16 04:57,2023-03-28 01:11,2023-10-01 09:56,2023-02-20 00:36,11,17,20,21,,,,,21,hotspot,,0,oracle-triage-21,,,,,,,,,,,,,,,,"When doing `java -XX:+CIPrintMethodCodes -Xcomp | grep VirtualCallData` we get:
```
  0   bci: 1    VirtualCallData     count(3) nonprofiled_count(0) entries(0)
  112 bci: 25   VirtualCallData     count(0) nonprofiled_count(0) entries(0)
  32  bci: 7    VirtualCallData     count(0) nonprofiled_count(0) entries(0)
  64  bci: 15   VirtualCallData     count(0) nonprofiled_count(0) entries(0)
  32  bci: 11   VirtualCallData     count(0) nonprofiled_count(0) entries(0)

```

But for numbers >999 we get:
```
  11760bci: 1895VirtualCallData     count(0) nonprofiled_count(0) entries(0)
```

here we should add spaces to make it more readable",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i30eyr:",9223372036854775807,b11,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2023-02-16 05:03;thartmann;ILW = Missing space in debug output, with large number of method date in bytecode output, no workaround = LLH = P5;;;","2023-02-16 05:08;tholenstein;To blame for this issue is probably the use of `st->fill_to(6)` during printing;;;","2023-02-17 06:33;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/12591
Date: 2023-02-16 13:39:58 +0000;;;","2023-02-20 00:36;dukebot;Changeset: 743a85db
Author:    Tobias Holenstein <tholenstein@openjdk.org>
Date:      2023-02-20 08:35:30 +0000
URL:       https://git.openjdk.org/jdk/commit/743a85db06ea245dbe6234b1840f18f8b2466e69
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,
Race condition in HttpBodySubscriberWrapper when cancelling request,JDK-8302635,5094323,Bug,Closed,JDK,JDK,software,duke,,,P4,Fixed,dfuchs,dfuchs,dfuchs,2023-02-16 01:22,2023-07-21 07:35,2023-10-01 09:56,2023-02-17 06:45,,,,,,,,,21,core-libs,,0,httpclient,,,,,,,,,,,,,,,,"The HttpBodySubscriberWrapper is a class that ensures that a subscriber will be subscribed to before it is completed. It also provides hooks to its two subclasses (one for HTTP/1, one for HTTP/2) that allows subclasses to register the susbscriber with the HttpClient at subscription time, and to unregister it when it is eventualy completed, or when the subscription is cancelled. 

There is however a race condition that can happen when a subscription is cancelled: it can happen that unregister is called before register. The CancelRequestTest has been observed failing once or twice on personal jobs. Though the particular mechanics of this race is hard to understand, the logs of the tests have brought sufficient evidence that this is what was happening.

The symptom is finding one subscriber still registered after completion of the exchange:

test CancelRequestTest.testGetSendAsync(""https://localhost:42711/https1/x/same/interrupt"", true, true): failure
java.lang.AssertionError: WARNING: tracker for HttpClientImpl(13) has outstanding operations:
	Pending HTTP Requests: 0
	Pending HTTP/1.1 operations: 0
	Pending HTTP/2 streams: 0
	Pending WebSocket operations: 0
	Pending TCP connections: 0
	Pending Subscribers: 1
	Total pending operations: 0
	Facade referenced: true
	Selector alive: true
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i30esz:",9223372036854775807,b11,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@446e124a,,,,,,,Verified,,"2023-02-16 01:57;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/12587
Date: 2023-02-16 09:51:27 +0000;;;","2023-02-17 06:45;dukebot;Changeset: edf238b6
Author:    Daniel Fuchs <dfuchs@openjdk.org>
Date:      2023-02-17 14:43:58 +0000
URL:       https://git.openjdk.org/jdk/commit/edf238b65e441a1d626f3a4ba06170badd05ca7c
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Bad copyright line after JDK-8302385,JDK-8302625,5094311,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,thartmann,thartmann,thartmann,2023-02-15 23:21,2023-02-22 23:12,2023-10-01 09:56,2023-02-15 23:32,21,,,,,,,,21,hotspot,,0,,,,,,,,,,,,,,,,,"[2023-02-16T07:15:01,958Z] BAD COPYRIGHT LINE: ...workspace/open/test/hotspot/jtreg/runtime/Metaspace/elastic/MetaspaceTestArena.java",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8302385,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i30eqb:",9223372036854775807,b11,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,,,"2023-02-15 23:32;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/12582
Date: 2023-02-16 07:25:42 +0000;;;","2023-02-15 23:32;dukebot;Changeset: c77f6442
Author:    Tobias Hartmann <thartmann@openjdk.org>
Date:      2023-02-16 07:31:55 +0000
URL:       https://git.openjdk.org/jdk/commit/c77f64420abfdd060fb617e88ecf8b1281668faa
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
increase timeout for ContinuousCallSiteTargetChange.java,JDK-8302607,5094290,Bug,Resolved,JDK,JDK,software,duke,,,P5,Fixed,dcubed,dcubed,dcubed,2023-02-15 14:09,2023-08-29 23:15,2023-10-01 09:56,2023-04-24 09:12,21,,,,,,,,21,hotspot,,0,noreg-self,oracle-triage-11,oracle-triage-17,oracle-triage-21,,,,,,,,,,,,,"With the fix for the following bug in place:

    JDK-8300926 Several startup regressions ~6-70% in 21-b6 all platforms

ContinuousCallSiteTargetChange.java no longer needs to be disabled in slowdebug mode.

However, I'm still seeing timeouts of the test with slowdebug bits on macosx-aarch64
during my stress runs. I have repurposed this bug ID to adjust the default timeout
for the test.",,,,,,,,,,,JDK-8315091,JDK-8315301,JDK-8315312,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,generic,,,,,,,,,,generic,,,,,,"0|i30eln:",9223372036854775807,b20,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2023-02-15 23:56;thartmann;Since the parent issue was closed as duplicate, I'm closing this as Won't Fix for now. If required, we can still create a new subtask of JDK-8300926 to disable the test.;;;","2023-04-14 15:40;dlong;ILW = test timeout; macosx-aarch64  slowdebug; increase timeout manually = LMM = P5;;;","2023-04-21 14:52;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/13593
Date: 2023-04-21 21:35:07 +0000;;;","2023-04-24 09:12;dukebot;Changeset: 4b23bef5
Author:    Daniel D. Daugherty <dcubed@openjdk.org>
Date:      2023-04-24 16:10:44 +0000
URL:       https://git.openjdk.org/jdk/commit/4b23bef51df9c1a5bc8f43748a8d6c8d99995656
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,
Use Set.of in java.nio.charset.Charset,JDK-8302603,5094284,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,naoto,naoto,naoto,2023-02-15 11:24,2023-02-22 23:19,2023-10-01 09:56,2023-02-21 09:37,,,,,,,,,21,core-libs,,0,,,,,,,,,,,,,,,,,Details here: https://github.com/openjdk/jdk/pull/12570,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,generic,,,,,,,,,,generic,,,,,,"0|i30ekb:",9223372036854775807,b11,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@3962510e,,,,,,,,,"2023-02-15 13:08;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/12570
Date: 2023-02-15 09:42:53 +0000;;;","2023-02-21 09:37;dukebot;Changeset: 5489c821
Author:    Glavo <zjx001202@gmail.com>
Committer: Naoto Sato <naoto@openjdk.org>
Date:      2023-02-21 17:35:52 +0000
URL:       https://git.openjdk.org/jdk/commit/5489c821dc2e0c3cfa207dc96d9183d165640368
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
use-after-free related to GraphKit::clone_map,JDK-8302595,5094272,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,jcking,jcking,jcking,2023-02-15 08:57,2023-04-27 07:02,2023-10-01 09:56,2023-02-16 06:42,11,17,21,,,,,,21,hotspot,,0,c2,jdk17u-fix-request,jdk17u-fix-yes,jdk20u-fix-request,jdk20u-fix-SQE-ok-next,jdk20u-fix-yes,oracle-triage-21,,,,,,,,,,"See the conversion in https://mail.openjdk.org/pipermail/hotspot-compiler-dev/2023-February/062495.html and its related links.

GraphKit::clone_map duplicates SafePointNode and additionally calls record_for_igvn. In some cases the cloned map is not used and Node::destruct is called. This results in the now destructed SafePointNode, whose memory was free'd and may have been re-used, being present in Unique_Node_List from for_igvn().

To resolve this, we need a corresponding function in GraphKit which undoes the work of clone_map(), including removing the node from Unique_Node_List.",,,,,,,,,,,JDK-8306165,JDK-8306979,JDK-8307027,JDK-8305131,JDK-8305548,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8298984,JDK-8270028,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i30ehn:",9223372036854775807,b11,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2023-02-15 09:12;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/12578
Date: 2023-02-15 17:02:34 +0000;;;","2023-02-15 23:48;thartmann;ILW = Use-after-free in C2 code, no issues observed but affects current code, no workaround = MMH = P3;;;","2023-02-16 06:42;dukebot;Changeset: 3cc459b6
Author:    Justin King <jcking@openjdk.org>
Committer: Tobias Hartmann <thartmann@openjdk.org>
Date:      2023-02-16 14:40:38 +0000
URL:       https://git.openjdk.org/jdk/commit/3cc459b6c2f571987dc36fd548a2b830f0b33a0a
;;;","2023-03-29 03:58;thartmann;Fix Request (JDK 20u)
Resolves an use-after-free in C2 code. The fix is low risk, was already backported to Oracle JDK 17u and tested in the JDK 21 and 17u CIs. The backport applies cleanly.;;;","2023-03-29 04:05;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk20u/pull/27
Date: 2023-03-29 10:58:10 +0000;;;","2023-04-20 04:28;goetz;Fix request [17u]

I backport this for parity with 17.0.8-oracle.
Typical risk of a C2 change, not so small.
I had to resolve. 
SAP nightly testing passed.;;;","2023-04-20 04:35;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/1288
Date: 2023-04-20 11:29:53 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,
use-after-free in Node::destruct,JDK-8302594,5094271,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,jcking,jcking,jcking,2023-02-15 08:24,2023-04-27 07:01,2023-10-01 09:56,2023-02-16 06:16,11,17,21,,,,,,21,hotspot,,0,c2,jdk17u-fix-request,jdk17u-fix-yes,jdk20u-fix-request,jdk20u-fix-SQE-ok-next,jdk20u-fix-yes,oracle-triage-21,,,,,,,,,,"See the conversion in https://mail.openjdk.org/pipermail/hotspot-compiler-dev/2023-February/062495.html and its related links.

There is a use-after-free bug in Node::destruct. The storage for Node is passed to `Afree` and then subsequently referenced. Currently none of the methods called happen to allocate, which is good, however this is not guaranteed and could change in the future. The call to `Afree` should be moved to the bottom of the method after calling of other methods.",,,,,,,,,,,JDK-8307026,JDK-8305547,JDK-8305129,JDK-8306830,JDK-8306161,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8270028,JDK-8298984,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i30ehf:",9223372036854775807,b11,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2023-02-15 08:37;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/12577
Date: 2023-02-15 16:30:16 +0000;;;","2023-02-15 23:36;thartmann;ILW = Use-after-free in C2 code, not an issue with current code, no workaround = MLH = P4;;;","2023-02-16 06:16;dukebot;Changeset: 2e3cea01
Author:    Justin King <jcking@openjdk.org>
Committer: Tobias Hartmann <thartmann@openjdk.org>
Date:      2023-02-16 14:14:46 +0000
URL:       https://git.openjdk.org/jdk/commit/2e3cea01daca594dfa4477439a9849eea19b249e
;;;","2023-03-29 04:00;thartmann;Fix Request (JDK 20u)
Resolves an use-after-free in C2 code. The fix is low risk, was already backported to Oracle JDK 17u and tested in the JDK 21 and 17u CIs. The backport applies cleanly.;;;","2023-03-29 04:05;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk20u/pull/28
Date: 2023-03-29 10:59:30 +0000;;;","2023-04-20 04:20;goetz;Fix request [17u]

I backport this for parity with 17.0.8-oracle.
Typical risk of changing C2. Change touches central funcionality -- risky but will be tested thoroughly.
Clean backport.
SAP nightly testing passed.;;;","2023-04-20 04:29;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/1286
Date: 2023-04-20 11:22:03 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,
Editable JComboBox's popup blocks user from seeing characters in Aqua look and feel,JDK-8302558,5094228,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,dnguyen,landrews,landrews,2023-02-15 05:07,2023-04-03 12:08,2023-10-01 09:56,2023-03-27 12:05,19,20,,,,,,,21,client-libs,,0,sn_138,sn_139,sn_140,,,,,,,,,,,,,,"Test Scenario : Type characters into editable JComboBox.
Step to reproduce:
1) Run the attached test 
2) When the frame is visible. Click on the JComboBox which has the Title border. Observe that JComboBox popup is visible. 
3) I was expecting the popup to be visible below the Editable JComboBox textfield but popup is seen above the editable JComboBox textfield.
4) Try typing characters into the editable JComboBox textfield . You will not the see the character that is getting typed since popup blocks the user  from seeing. 
If you observe the same then the bug is reproduced.

This does happen when editable JComboBox with out titleBorder or border set.

This works fine in Java Look and feel
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"2023-02-15 05:07;landrews;JDK_8300269.java;https://bugs.openjdk.org/secure/attachment/102654/JDK_8300269.java","2023-02-15 05:07;landrews;Screen Shot 2023-02-15 at 5.06.11 AM.png;https://bugs.openjdk.org/secure/attachment/102653/Screen+Shot+2023-02-15+at+5.06.11+AM.png","2023-02-15 11:52;honkar;image.png;https://bugs.openjdk.org/secure/attachment/102659/image.png",,,,,,,,,,generic,,,,,,,,,,os_x,,,,,,"0|i30e7v:",9223372036854775807,b16,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@568a5b31,,,,,,,,,"2023-02-15 11:34;honkar;Replicable on mainline jdk (21). 

There are two issues associated with Editable combo box 
1) The overlap of popup box as described in this issue
2) Offset of textfield and combobox button when title border is used (see attachment section), this is related to JDK-8054572;;;","2023-02-15 11:39;honkar;Since this happens only on Aqua LAF updated the os version to mac;;;","2023-02-15 11:48;honkar;[~landrews] There are two buttons in your test, I'm not completely sure of the purpose, as they seem to be working fine. Were they added as a way to check how the border looks on other components (comparison purpose)?;;;","2023-02-15 11:50;honkar;Reassigning it to [~dnguyen] as part of it is related to JDK-8054572 changes;;;","2023-02-15 12:22;dnguyen;Issue spotted by Prasanta in this withdrawn PR (https://github.com/openjdk/jdk/pull/12087). Issue was unrelated to this regression fix and seems to have existed for some time. I will investigate the cause of this issue;;;","2023-02-15 16:23;dnguyen;In Aqua, comboBox's getBounds includes the border, and since including a TitledBorder increases the overall size of the comboBox and increases the insets, the adjustPopupAndGetBounds is not accounting for the extra height of the comboBox. In testing, adding a conditional in this method solves the issue in the test, but looking into other borders as well.;;;","2023-02-16 08:44;landrews;[~honkar], The attached testcase is a adhoc test that I wrote to test different swing components with different borders to verify https://bugs.openjdk.org/browse/JDK-8300269 . I found this issue and filed. ;;;","2023-02-24 14:08;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/12750
Date: 2023-02-24 21:54:30 +0000;;;","2023-03-09 15:49;dnguyen;On Ubuntu VM, the offset for height in comboBox's popup needed to be changed to 15 vs 8 for non-Linux OS's. Running tests to confirm if this is the case for Linux in general or just my local instance. This finding will allow me to adapt the test to be run on all OS's.;;;","2023-03-10 14:50;dnguyen;The mouse positioning issue that I observed locally may be a VM setup specific issue. I changed the VM from Wayland to X11 to allow the mouse cursor to be visible and track appropriately. I needed to disable Mouse Integration for this as well. With this, the test properly moved the mouse cursor to P(x,y), but needed different offsets from what I tested in my host Mac machine.

However, when someone else ran my test on a native Linux OS, the test passed with the original offsets. This was after adding a delay between setting the UI to visible and moving the cursor with robot. I applied the same change, tested on mach5, and now the test passes. These changes are shown in the latest update to the PR.;;;","2023-03-14 12:52;dnguyen;In review, it was discovered that the issue also exists with non-editable comboBoxes. The original fix for editable comboBoxes doesn't apply to the non-editable ones. So, I found a different fix to include for non-editable comboBoxes. I added non-editable comboBoxes to the new test and am re-running tests to ensure the position is OK for all iterations of editable and bordered comboBoxes.

This newly found issue is also only for Aqua L&F and not caused by the original fix since the original fix only applies to editable comboBoxes.;;;","2023-03-27 12:05;dukebot;Changeset: 80e2d52f
Author:    Damon Nguyen <dnguyen@openjdk.org>
Committer: Alexander Zvegintsev <azvegint@openjdk.org>
Date:      2023-03-27 19:03:56 +0000
URL:       https://git.openjdk.org/jdk/commit/80e2d52f76806bc886138a0fd4c34b1ca3dc4c0b
;;;",,,,,,,,,,,,,,,,,,,
Misleading error generated when empty class file encountered,JDK-8302514,5094183,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,acobbs,acobbs,acobbs,2023-02-14 15:10,2023-02-22 23:12,2023-10-01 09:56,2023-02-16 06:50,21,,,,,,,,21,tools,,0,,,,,,,,,,,,,,,,,"If javac encounters a class file on the classpath that is empty, it generates a ""bad class file"" as expected but then goes on to claim the ""class file contains wrong class: java.lang.AutoCloseable"".

There are several problems with the utility classes used by the compiler, and this error is a symptom of one of them.

The problems identified are:

*** ArrayUtils.java ***

1. There is no protection from integer overflows, which can occur in several places. We should add a few basic checks so at least we fail fast with IllegalArgumentException instead of fail slow with ArrayIndexOutOfBoundsException.

2. If ensureCapacity() were ever invoked on an array of length zero, an infinite loop would result.

*** ByteBuffer.java ***

1. The methods getInt(), getLong(), etc. do not check for data underflow (this is the root cause of the weird error above).

2. The appendStream() method only reads input.available() bytes from the InputStream, which is totally broken. To quote the Javadoc from InputStream.available(): ""Note that while some implementations of InputStream will return the total number of bytes in the stream, many will not. It is never correct to use the return value of this method to allocate a buffer intended to hold all data in this stream."" That's exactly what this method does. So this could easily break when retrieving class files from non-standard sources.

*** ClassReader.java, ModuleNameReader.java, PoolReader.java ***

It's not clear that these classes have systematic protection against truncated class files. Truncated files generate various different warnings, including:

  - index 25926 is not within pool size 13
  - bad constant pool tag: 0 at 28317
  - unexpected constant pool tag: 10 at 11
  - class file is invalid for class Empty
  - class file contains wrong class: java.lang.AutoCloseable

All of the above errors were triggered by simply truncating the class file at various points. It would be better if a ""truncated class file"" error were generated whenever a truncated class file is encountered (i.e., whenever the compiler tries to read past the end of a class file).
",jdk-21+9-20-g3b05a94c36e,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,generic,,,,,,,,,,generic,,,,,,"0|i30dxv:",9223372036854775807,b11,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4dca67bd,,,,,,,,,"2023-02-14 15:27;jjg;> 2. The appendStream() method only reads input.available() bytes from the InputStream, which is totally broken. To quote the Javadoc from InputStream.available(): ""Note that while some implementations of InputStream will return the total number of bytes in the stream, many will not. It is never correct to use the return value of this method to allocate a buffer intended to hold all data in this stream."" That's exactly what this method does. So this could easily break when retrieving class files from non-standard sources. 

I believe the semantics are better defined for FileInputStream, which is what is/was assumed.;;;","2023-02-14 16:00;acobbs;Hmm, I don't see where that's documented. The Javadoc for FileInputStream.available() says this:

------------------------
Returns an estimate of the number of remaining bytes that can be read (or skipped over) from this input stream without blocking by the next invocation of a method for this input stream. Returns 0 when the file position is beyond EOF. The next invocation might be the same thread or another thread. A single read or skip of this many bytes will not block, but may read or skip fewer bytes.

In some cases, a non-blocking read (or skip) may appear to be blocked when it is merely slow, for example when reading large files over slow networks.
------------------------

I do believe that on UNIX platforms it so happens that available() is always accurate for plain files. But that's not a safe assumption in general.

In any case, the method takes an InputStream, not a FileInputStream, so it seems like poor form to make such an undocumented assumption.;;;","2023-02-15 08:06;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/12574
Date: 2023-02-15 15:59:36 +0000;;;","2023-02-16 06:50;dukebot;Changeset: a58fa6e7
Author:    Archie L. Cobbs <archie.cobbs@gmail.com>
Committer: Julian Waters <jwaters@openjdk.org>
Date:      2023-02-16 14:48:39 +0000
URL:       https://git.openjdk.org/jdk/commit/a58fa6e73e4594cfb0e46bdbebad48072771e5bd
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,
HitInfo.toString() throws IllegalArgumentException,JDK-8302511,5094179,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,angorya,angorya,angorya,2023-02-14 13:34,2023-06-29 08:34,2023-10-01 09:56,2023-06-23 08:38,jfx21,,,,,,,,jfx21,javafx,,0,sn_146,,,,,,,,,,,,,,,,"toString() methods should not throw an exception under any circumstances (I think it is when the (x,y) coordinates are outside of the Text bounds).  The second invocation of toString on the same instance does not cause NPE, and the insertionIndex field gets set in getInsertionIndex() just before the exception is thrown - so not only we have an exception, but also the object might enter an inconsistent/incorrect state.

This may be a sign of a larger issue, but at least toString() should print N/A if HitInfo.getInsertionIndex() throws an exception.

```
Exception in thread ""JavaFX Application Thread"" java.lang.IllegalArgumentException: offset out of bounds
	at java.base/sun.text.RuleBasedBreakIterator.checkOffset(RuleBasedBreakIterator.java:730)
	at java.base/sun.text.RuleBasedBreakIterator.following(RuleBasedBreakIterator.java:744)
	at javafx.graphics/javafx.scene.text.HitInfo.getInsertionIndex(HitInfo.java:84)
	at javafx.graphics/javafx.scene.text.HitInfo.toString(HitInfo.java:100)
	at java.base/java.lang.String.valueOf(String.java:4225)
	at java.base/java.lang.StringBuilder.append(StringBuilder.java:173)
	at andy_test/goryachev.rich.RichTextAreaBehavior.nextCharacterVisually_textArea(RichTextAreaBehavior.java:506)
	at andy_test/goryachev.rich.RichTextAreaBehavior.nextCharacterVisually(RichTextAreaBehavior.java:389)
	at andy_test/goryachev.rich.RichTextAreaBehavior.moveLeft(RichTextAreaBehavior.java:316)
	at andy_test/goryachev.rich.RichTextAreaBehavior.handleKeyEvent(RichTextAreaBehavior.java:151)
	at javafx.base/com.sun.javafx.event.CompositeEventHandler$NormalEventHandlerRecord.handleBubblingEvent(CompositeEventHandler.java:247)
	at javafx.base/com.sun.javafx.event.CompositeEventHandler.dispatchBubblingEvent(CompositeEventHandler.java:80)
	at javafx.base/com.sun.javafx.event.EventHandlerManager.dispatchBubblingEvent(EventHandlerManager.java:232)
	at javafx.base/com.sun.javafx.event.EventHandlerManager.dispatchBubblingEvent(EventHandlerManager.java:189)
	at javafx.base/com.sun.javafx.event.CompositeEventDispatcher.dispatchBubblingEvent(CompositeEventDispatcher.java:59)
	at javafx.base/com.sun.javafx.event.BasicEventDispatcher.dispatchEvent(BasicEventDispatcher.java:58)
	at javafx.base/com.sun.javafx.event.EventDispatchChainImpl.dispatchEvent(EventDispatchChainImpl.java:114)
```",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8304831,,,,,JDK-8194704,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i30dwz:",9223372036854775807,b24,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4143e3f7,,,,,,,,,"2023-02-14 16:21;kcr;> toString() methods should not throw an exception under any circumstances 

Indeed they should not. Even if there is an underlying problem, this should be fixed in toString itself.;;;","2023-06-01 13:52;prr;So far as I can tell, this can only happen if the HitInfo was incorrectly constructed.
It would require that the charIndex passed be out of bounds for the text that was passed and that the hit is on the trailing edge.
Since HitInfo has no public constructor, only FX internal code could be responsible for that.
There are two calls to it - one in TextFlow passes null for the text and that will never trigger the use of the BreakIterator.
The other is in the Text 
    public final HitInfo hitTest(Point2D point) {
...
...
        TextLayout.Hit layoutHit = layout.getHitInfo((float)x, (float)y);
        return new HitInfo(layoutHit.getCharIndex(), layoutHit.getInsertionIndex(),
                           layoutHit.isLeading(), getText());

I suspect we have something like a string of length 5 and are indicating a hit on the trailing edge of charindex=6, perhaps
TextLayout.getHitInfo() is responsible for that.
I recall there was some bug/email thread about what should be returned if the x,y is outside the text.
I can't find it right now, but this code probably points to a good reason it shouldn't return a value beyond the length of the text.

It might be best to put code into the constructor that validates the charIndex + edge against the text - if any.
Then the code responsible for this would be easier to spot.

Also I think getInsertionIndex() should be setting insertionIndex only at the end .. not updating it multiple times.

toString() perhaps could be changed to just report the var - even if it hasn't been initialised yet. Not sure about this.
But also ""text"" probably ought to be part of what toString() returns.

;;;","2023-06-14 09:12;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jfx/pull/1154
Date: 2023-06-14 15:40:41 +0000;;;","2023-06-23 08:38;dukebot;Changeset: d2683b9e
Author:    Andy Goryachev <angorya@openjdk.org>
Date:      2023-06-23 15:35:57 +0000
URL:       https://git.openjdk.org/jfx/commit/d2683b9ebcb13361e8b5084e6c7da6c5a0204c93
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,
Runtime.exit incorrectly says it never throws an exception,JDK-8302496,5094161,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,smarks,rriggs,rriggs,2023-02-14 11:04,2023-05-08 14:30,2023-10-01 09:56,2023-05-02 16:22,20,,,,,,,,21,core-libs,,0,,,,,,,,,,,,,,,,,"Runtime.exit(status) says it ""it never returns or throws an exception"".
However, this contradicts the throws clause that allows the security manager to throw a SecurityException.",,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8307081,,,,,,,,JDK-8290036,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i30dsz:",9223372036854775807,b21,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4c088d55,,,,,,,,,"2023-02-14 12:37;smarks;System.exit() says ""this method never returns normally"" which is probably a better way of expressing the sentiment intended in the Runtime.exit() spec. But it should also be made clear that neither exit() method will throw an exception if some other thread has called exit() already, or if exit() is called from a shutdown hook, or if a shutdown hook throws an exception.;;;","2023-04-27 16:11;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/13706
Date: 2023-04-27 23:06:42 +0000;;;","2023-05-02 16:22;dukebot;Changeset: 05b9b582
Author:    Stuart Marks <smarks@openjdk.org>
Date:      2023-05-02 23:19:30 +0000
URL:       https://git.openjdk.org/jdk/commit/05b9b5821db0e0d5d998a1bd8574aa6021878c9e
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,
NoClassDefFoundError omits the original cause of an error,JDK-8302491,5094155,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,inakonechnyy,inakonechnyy,inakonechnyy,2023-02-14 09:34,2023-06-04 22:41,2023-10-01 09:56,2023-03-13 10:27,11,13,17,19,20,21,,,21,hotspot,,0,classloading,jdk17u-fix-request,jdk17u-fix-yes,jdk20u-fix-request,jdk20u-fix-SQE-ok-next,jdk20u-fix-yes,,,,,,,,,,,"If StackOverflowError causes NoClassDefFoundError, the original SOE is swallowed and isn't reported in the stack trace.

The issue happens in specific circumstances, when the class initialization procedure detects an error in class instantiation, tries to throw NCDFE with a correctly discovered cause (an original SOE), and catches another SOE when it tries to get the cause.

The reproducer is attached as jtreg test to the proposed fix.

Testing shows that the issue exists in versions 11, 13, 17, and 19.",,,,,,,,,,,JDK-8309013,JDK-8308912,JDK-8305956,JDK-8306448,JDK-8307051,,,,,,,,,,,,,,,,,,,,,JDK-8309034,,,,,JDK-8048190,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i30drn:",9223372036854775807,b14,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,,,"2023-02-14 14:03;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/12566
Date: 2023-02-14 21:58:01 +0000;;;","2023-02-21 20:52;dholmes;Just to clarify the exact scenario here, this is what happens with class initialization errors.

If C.<clinit> throws an exception E of any kind, it is caught,  a representation of it is stored away for future reference as the ""initialization error"" and the class C is marked as erroneous.

If the E is a subclass of Error then it is rethrown directly; otherwise an ExceptionInInitializerError is created with E as its cause, and that is thrown.

Once the class C has been marked erroneous subsequent attempts to use it, that require it to be initialized, will result in throwing NCDFE with the ""initialization error"" as the cause.

If initialization of a C's superclasses, or super interfaces, throws an exception E of any kind, then E is caught, a representation stored away for future reference as the ""initialization error"", C is marked erroneous and E is rethrown. (Note: no EIIE wrapper in this case.)

---

The way in which a representation of E is created for the ""initialization error"" is as follows (this code is in the very badly named `Throwable::get_cause_with_stack_trace` method).

1. An upcall to Java is performed to get the stacktrace for E
2. A message string is created consisting of E's type name, the thread name and E's message string
3. A new ExceptionInInitializerError instance is created using the message string from #2.
4. The stacktrace of the new exception is set with the stacktrace from step #1.

Both steps 1 and 3 can trigger secondary exceptions.

If step 1 throws an exception it remains pending and we return null.
If step 3 throws an exception it is not pending, but is actually produced in place of the requested EIIE instance. But that exception is ignored and we again return null.

If the process of creating the ""initialization error"" representation leaves an exception pending, or returns null, then any exception is cleared and no initializaton error is recorded for class C. In that case any future NCDFE pertaining to C will have a null cause and we have lost all information that E originally occurred.

This PR wants to try to ensure we produce the initialization error as expected with its references to E's name, message and stacktrace.



;;;","2023-03-06 13:07;inakonechnyy;The small and nice stacktrace with proper cause for SOE case, that was implemented in the first iteration of proposed fix:

Exception in thread ""main"" java.lang.NoClassDefFoundError: Could not initialize class java.lang.invoke.MethodHandleImpl$AsVarargsCollector
    at java.sql/java.sql.DriverManager.ensureDriversInitialized(DriverManager.java:628)
    at java.sql/java.sql.DriverManager.getDrivers(DriverManager.java:427)
    at jdbc.repro.DriverA.<init>(DriverA.java:22)
    at jdbc.repro.DriverRepro.main(DriverRepro.java:12)
Caused by: java.lang.StackOverflowError
    ... 4 more

can't be achieved in such a straightforward way: return the original Throwable (SOE in this particular case), if EIIE can't be created because of another SOE during the java call.

Why - is described in JDK-8048190;;;","2023-03-13 10:27;dukebot;Changeset: 56851075
Author:    Ilarion Nakonechnyy <inakonechnyy@openjdk.org>
Committer: Coleen Phillimore <coleenp@openjdk.org>
Date:      2023-03-13 17:26:25 +0000
URL:       https://git.openjdk.org/jdk/commit/5685107579f0f00b5eae881311315cec34c1ddcb
;;;","2023-03-28 13:10;inakonechnyy;As the linked issue was ported to downstream, I'd like to backport the fix to the 17 and 11 versions. 
Fix to 17 isn't applied cleanly. Run tier1 tests, passed ok on Mac OS. ;;;","2023-03-28 13:18;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/1226
Date: 2023-03-28 20:13:41 +0000;;;","2023-03-28 23:04;goetz;You miss a risk assessment.  Please use the usual heading in your comment. Do some more testing. Tier1 is already done by the GitHub actions and only a basic sanitiy check.;;;","2023-03-31 05:07;inakonechnyy;Fix request 17u.

The backporting of this patch enhances the workflow of JDK-8048190 by expanding the range of scenarios in which the root cause of a NoClassDefFoundError can be accurately reported. 
Risk: low, as the patch only corrects the process of creating ExceptionInInitializerError for a specific scenario.
The patch does not apply cleanly, a small adjustment has been done.
Tested with tier1 and tier2 tests.;;;","2023-04-13 02:58;clanger;[~inakonechnyy], could you please also backport this to jdk20u as well? I'd like to see it there as the fix is brand new and this could give it a little more coverage.;;;","2023-04-13 17:26;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk20u/pull/55
Date: 2023-04-14 00:20:03 +0000;;;","2023-04-14 04:31;inakonechnyy;Fix request 20u
Risk: low.
Tested with tier1 and tier2 tests.;;;",,,,,,,,,,,,,,,,,,,,
VM.classloader_stats memory size values are wrong,JDK-8302455,5094114,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,stuefe,stuefe,stuefe,2023-02-14 04:27,2023-02-22 23:12,2023-10-01 09:56,2023-02-15 22:58,16,17,18,19,20,21,,,21,hotspot,,0,metaspace,sap_interest,,,,,,,,,,,,,,,"VM.classloader_stats shows metaspace consumption in words, but should show bytes.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8221173,,,,,JDK-8302812,,,,,,,,,,,,,,,,,,,,,,,,16,,,,,,,,"0|i30dij:",9223372036854775807,b11,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,,,"2023-02-14 05:50;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/12556
Date: 2023-02-14 13:40:40 +0000;;;","2023-02-15 22:58;dukebot;Changeset: 6e2d3c6c
Author:    Thomas Stuefe <stuefe@openjdk.org>
Date:      2023-02-16 06:56:38 +0000
URL:       https://git.openjdk.org/jdk/commit/6e2d3c6c45ded862d818e30dd03d023980bf0ec2
;;;","2023-02-17 22:47;stuefe;Backporter hint: needs follow-up JDK-8302812;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,
[ZGC] Client build fails after JDK-8300255,JDK-8302368,5094023,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,jiefu,haosun,haosun,2023-02-13 18:58,2023-02-22 12:27,2023-10-01 09:56,2023-02-14 02:59,21,,,,,,,,21,hotspot,,0,tencent-interest,zgc,,,,,,,,,,,,,,,"Client build fails after JDK-8300255.
In my local test, it fails on both x86 and aarch64.

Configure: ""--with-debug-level=release --with-jvm-variants=client ""
 ====================================================
The existing configuration has been successfully updated in
/tmp/build-release
using configure arguments '--with-boot-jdk=~/boot-jdk/aarch64/master --with-debug-level=release --with-version-opt=git-13b1ebba2 --with-jvm-variants=client --with-gtest=~/googletest-1.13.0'.

Configuration summary:
* Name:           tmp/build-release
* Debug level:    release
* HS debug level: product
* JVM variants:   client
* JVM features:   client: 'cds compiler1 epsilongc g1gc jfr jni-check jvmti management parallelgc serialgc services shenandoahgc vm-structs zgc'
* OpenJDK target: OS: linux, CPU architecture: aarch64, address length: 64
* Version string: 21-internal-git-13b1ebba2 (21-internal)
* Source date:    1676342730 (2023-02-14T02:45:30Z)

Tools summary:
* Boot JDK:       openjdk version ""20-internal"" 2023-03-21 OpenJDK Runtime Environment (build 20-internal-git-a07975bf3) OpenJDK 64-Bit Server VM (build 20-internal-git-a07975bf3, mixed mode) (at ~/boot-jdk/aarch64/master)
* Toolchain:      gcc (GNU Compiler Collection)
* C Compiler:     Version 11.2.0 (at /usr/bin/gcc)
* C++ Compiler:   Version 11.2.0 (at /usr/bin/g++)

Build performance summary:
* Build jobs:     160
* Memory limit:   256020 MB



Error log:
====================================================
=== Output from failing command(s) repeated here ===
* For target hotspot_variant-client_libjvm_objs_zBarrierSetAssembler_aarch64.o:
~/jdk_src/src/hotspot/cpu/aarch64/gc/z/zBarrierSetAssembler_aarch64.cpp:451: error: ""__"" redefined [-Werror]
  451 | #define __ masm->
      | 
~/jdk_src/src/hotspot/cpu/aarch64/gc/z/zBarrierSetAssembler_aarch64.cpp:276: note: this is the location of the previous definition
  276 | #define __ sasm->
      | 
cc1plus: all warnings being treated as errors

* All command lines available in ~/build-release/make-support/failure-logs.
=== End of repeated output ===",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8300255,,,,,,,,,,,,,,,,,,,,,generic,,,,,,,,,,,,,,,,"0|i30cyb:",9223372036854775807,b10,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6b00f96c,,,,,,,,,"2023-02-13 19:35;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/12547
Date: 2023-02-14 03:29:51 +0000;;;","2023-02-14 02:58;dukebot;Changeset: 66742c83
Author:    Jie Fu <jiefu@openjdk.org>
Date:      2023-02-14 10:57:49 +0000
URL:       https://git.openjdk.org/jdk/commit/66742c83d43fd114b86bfadc823d34448da3cec6
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Behavior of adler32 changes after JDK-8300208,JDK-8302358,5094008,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,sviswanathan,cushon,cushon,2023-02-13 12:32,2023-03-28 01:10,2023-10-01 09:56,2023-02-17 13:34,21,,,,,,,,21,hotspot,,0,c2,oracle-triage-11,oracle-triage-17,oracle-triage-21,regression,,,,,,,,,,,,"JDK-8300208 (Optimize Adler32 stub for AVX-512 targets) seems to change the behaviour of adler32.

The attached repro shows that the adler32 checksum for the attached data file changes after the loop is optimized.

$ java AdlerTest
failed iteration: 5413 - expected 1265275828, actual 14717876

The data was generated with `head -c 72188 /dev/random`",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8300208,,,,,,,,,"2023-02-13 12:32;cushon;AdlerTest.java;https://bugs.openjdk.org/secure/attachment/102632/AdlerTest.java","2023-02-13 12:32;cushon;input;https://bugs.openjdk.org/secure/attachment/102633/input",,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i30cuz:",9223372036854775807,b11,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2023-02-13 18:04;kvn;As author of JDK-8300208 please look in this case.;;;","2023-02-13 19:22;dlong;Reproduces with C2.;;;","2023-02-13 19:26;dlong;ILW = wrong Adler32 result; with C2, specific test, AVX-512; disable C2 on affected methods = MMM = P3;;;","2023-02-15 17:44;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/12581
Date: 2023-02-16 01:29:44 +0000;;;","2023-02-17 13:34;dukebot;Changeset: 7c60b9c9
Author:    Sandhya Viswanathan <sviswanathan@openjdk.org>
Date:      2023-02-17 21:31:42 +0000
URL:       https://git.openjdk.org/jdk/commit/7c60b9c98f0b90a519fd98e43e93eecfb0b29c92
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,
InstanceKlass init state/thread should be atomic,JDK-8302354,5094004,Bug,Resolved,JDK,JDK,software,duke,,,P5,Fixed,rehn,rehn,rehn,2023-02-13 10:54,2023-02-22 12:28,2023-10-01 09:56,2023-02-14 06:40,21,,,,,,,,21,hotspot,,0,,,,,,,,,,,,,,,,,"These states are read 'lock-less' should thus be atomic.
Also the assert setting init thread state can be stricter.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i30cu3:",9223372036854775807,b10,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,,,"2023-02-13 11:06;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/12542
Date: 2023-02-13 18:56:19 +0000;;;","2023-02-14 06:40;dukebot;Changeset: 77519e5f
Author:    Robbin Ehn <rehn@openjdk.org>
Date:      2023-02-14 14:38:46 +0000
URL:       https://git.openjdk.org/jdk/commit/77519e5f4fe75f953c02fb3f15b7f9a58c933fea
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
"""assert(!JavaThread::current()->is_interp_only_mode() || !nm->method()->is_continuation_enter_intrinsic() || ContinuationEntry::is_interpreted_call(return_pc)) failed: interp_only_mode but not in enterSpecial interpreted entry"" in fixup_callers_callsite",JDK-8302351,5094001,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,pchilanomate,dcubed,dcubed,2023-02-13 09:49,2023-07-25 04:32,2023-10-01 09:56,2023-07-06 12:17,21,,,,,,,,22,hotspot,,0,hgupdate-sync,intermittent,loom,oracle-triage-21,test-bigapps-Kitchensink,tier4,tier7,tier8,,,,,,,,,"The following test failed in the JDK21 CI:

applications/kitchensink/Kitchensink.java

Here's a snippet from the log file:

[2023-02-11T20:43:15.889002068Z] Gathering output for process 2310136
[2023-02-11T20:43:22.081309540Z] Waiting for completion for process 2310136
[2023-02-11T20:43:22.081390780Z] Waiting for completion finished for process 2310136
Output and diagnostic info for process 2310136 was saved into 'pid-2310136-output.log'
[stress.process.out] #
[stress.process.out] # A fatal error has been detected by the Java Runtime Environment:
[stress.process.out] #
[stress.process.out] #  Internal Error (/opt/mach5/mesos/work_dir/slaves/0c72054a-24ab-4dbb-944f-97f9341a1b96-S151618/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/a4d65992-3afb-47b6-b336-7e34fa3a803f/runs/750ecb11-b813-450b-8537-da6a29c4cd6a/workspace/open/src/hotspot/share/runtime/sharedRuntime.cpp:2132), pid=2301175, tid=2310378
[stress.process.out] #  assert(!JavaThread::current()->is_interp_only_mode() || !nm->method()->is_continuation_enter_intrinsic() || ContinuationEntry::is_interpreted_call(return_pc)) failed: interp_only_mode but not in enterSpecial interpreted entry
[stress.process.out] #
[stress.process.out] # JRE version: Java(TM) SE Runtime Environment (21.0+10) (fastdebug build 21-ea+10-LTS-728)
[stress.process.out] # Java VM: Java HotSpot(TM) 64-Bit Server VM (fastdebug 21-ea+10-LTS-728, compiled mode, sharing, tiered, compressed oops, compressed class ptrs, g1 gc, linux-aarch64)
[stress.process.out] # Problematic frame:
[stress.process.out] # V  [libjvm.so+0x16a9bf0]  SharedRuntime::fixup_callers_callsite(Method*, unsigned char*)+0x2e0
[stress.process.out] #
[stress.process.out] # Core dump will be written. Default location: Core dumps may be processed with ""/opt/core.sh %p"" (or dumping to /opt/mach5/mesos/work_dir/slaves/91e16c40-06d4-468a-9fc3-7198a5bb7d5a-S33376/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/6d2b36a6-871e-4ef2-9072-52d82df296fd/runs/9e712550-718c-400e-afa6-b22ae22c70f7/testoutput/test-support/jtreg_closed_test_hotspot_jtreg_applications_kitchensink_Kitchensink_java/scratch/0/core.2301175)
[stress.process.out] #
[stress.process.out] Unsupported internal testing APIs have been used.
[stress.process.out] 
[stress.process.out] # An error report file with more information is saved as:
[stress.process.out] # /opt/mach5/mesos/work_dir/slaves/91e16c40-06d4-468a-9fc3-7198a5bb7d5a-S33376/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/6d2b36a6-871e-4ef2-9072-52d82df296fd/runs/9e712550-718c-400e-afa6-b22ae22c70f7/testoutput/test-support/jtreg_closed_test_hotspot_jtreg_applications_kitchensink_Kitchensink_java/scratch/0/hs_err_pid2301175.log
[stress.process.out] #
[stress.process.out] # If you would like to submit a bug report, please visit:
[stress.process.out] #   https://bugreport.java.com/bugreport/crash.jsp
[stress.process.out] #
[2023-02-11T20:44:22.086497406Z] Gathering output for process 2310520
[2023-02-11T20:44:22.094622277Z] Waiting for completion for process 2310520
[2023-02-11T20:44:22.094691037Z] Waiting for completion finished for process 2310520


Here's the crashing thread's stack:

---------------  T H R E A D  ---------------

Current thread (0x0000fffe800dc2a0):  JavaThread ""ForkJoinPool-1-worker-33"" daemon [_thread_in_Java, id=2310378, stack(0x0000fffea17a0000,0x0000fffea19a0000)]

Stack: [0x0000fffea17a0000,0x0000fffea19a0000],  sp=0x0000fffea199dbf0,  free space=2038k
Native frames: (J=compiled Java code, j=interpreted, Vv=VM code, C=native code)
V  [libjvm.so+0x16a9bf0]  SharedRuntime::fixup_callers_callsite(Method*, unsigned char*)+0x2e0  (sharedRuntime.cpp:2132)
v  ~BufferBlob::I2C/C2I adapters 0x0000ffff843ff190
J 16823  jdk.internal.vm.Continuation.enterSpecial(Ljdk/internal/vm/Continuation;ZZ)V java.base@21-ea (0 bytes) @ 0x0000ffff85c12ed8 [0x0000ffff85c12dc0+0x0000000000000118]

[error occurred during error reporting (printing native stack (with source info)), id 0xb, SIGSEGV (0xb) at pc=0x0000ffff9a74662c]

Retrying call stack printing without source information...
Native frames: (J=compiled Java code, j=interpreted, Vv=VM code, C=native code)
V  [libjvm.so+0x16a9bf0]  SharedRuntime::fixup_callers_callsite(Method*, unsigned char*)+0x2e0  (sharedRuntime.cpp:2132)
v  ~BufferBlob::I2C/C2I adapters 0x0000ffff843ff190
J 16823  jdk.internal.vm.Continuation.enterSpecial(Ljdk/internal/vm/Continuation;ZZ)V java.base@21-ea (0 bytes) @ 0x0000ffff85c12ed8 [0x0000ffff85c12dc0+0x0000000000000118]

[error occurred during error reporting (retry printing native stack (no source info)), id 0xb, SIGSEGV (0xb) at pc=0x0000ffff9a74662c]",,,,,,,,,,,JDK-8312900,JDK-8311876,,,,,,,,,,,,,,,,,,,,,,,,JDK-8311516,JDK-8304354,,,,JDK-8288949,JDK-8218403,JDK-8310340,,"2023-05-19 11:08;pchilanomate;Repro8302351.zip;https://bugs.openjdk.org/secure/attachment/103907/Repro8302351.zip",,,,,,,,,,,,aarch64,x86_64,,,,,,,,,linux,os_x,,,,,"0|i30ctf:",9223372036854775807,b06,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,,,"2023-02-13 20:37;dlong;[~rpressler], this assert was added by JDK-8288949.  Could it be too strong, or maybe there is a race setting interp_only_mode?;;;","2023-02-13 20:39;dlong;ILW = assert in debug build; seen in closed stress test only, intermittent; no workaround = MMH = P3;;;","2023-02-14 06:53;rpressler;[~dlong] Hmm, I'm not sure, but a race with interp_only_mode sounds like a reasonable explanation.;;;","2023-03-22 11:57;kvn;V [libjvm.so+0x16a9bf0] SharedRuntime::fixup_callers_callsite(Method*, unsigned char*)+0x2e0 (sharedRuntime.cpp:2132) 
v ~BufferBlob::I2C/C2I adapters 0x0000ffff843ff190 
J 16823 jdk.internal.vm.Continuation.enterSpecial(Ljdk/internal/vm/Continuation;ZZ)V java.base@21-ea (0 bytes) @ 0x0000ffff85c12ed8 [0x0000ffff85c12dc0+0x0000000000000118] 

It seems deoptimization happens when we process fixup request. There is no compiled method on top of call stack.
There is comment about that in SharedRuntime::fixup_callers_callsite():
https://github.com/openjdk/jdk/blob/master/src/hotspot/share/runtime/sharedRuntime.cpp#L2038
;;;","2023-05-02 22:43;thartmann;This does not look like a JIT issue, moved to hotspot/runtime.;;;","2023-05-19 11:09;pchilanomate;Ok, after looking at all the wrong places in the code(JVMTI) I finally found the issue. I attached a reproducer.

The issue is in all the calls to the runtime to resolve compiled callsites. An EnterInterpOnlyModeClosure handshake can caught the JavaThread at the JRT_BLOCK_END transition on those calls. None of those calls consider this scenario and just return callee_method->verified_code_entry() even if now the JavaThread is in interpreted only mode, e.g.:

// resolve virtual call and update inline cache to monomorphic
JRT_BLOCK_ENTRY(address, SharedRuntime::resolve_virtual_call_C(JavaThread* current))
  methodHandle callee_method;
  JRT_BLOCK
    callee_method = SharedRuntime::resolve_helper(true, false, CHECK_NULL);
    current->set_vm_result_2(callee_method());
  JRT_BLOCK_END
  // return compiled code entry point after potential safepoints
  assert(callee_method->verified_code_entry() != nullptr, "" Jump to zero!"");
  return callee_method->verified_code_entry();
JRT_END

The JavaThread will return back to the runtime stub where we restore all registers and will jump to callee_method->verified_code_entry(), which will be the compiled version of callee if there was one. The JavaThread will continue calling the compiled versions of methods without noticing it is in interpreted only mode until it either calls a method that hasn't been compiled yet or it returns to the caller of that resolved callee where the change to interpreter only mode happened (since the EnterInterpOnlyModeClosure handshake marked all the frames on the stack for deoptimization).

So in our crashing case: 
A carrier is on its path to mount some virtual thread. Somewhere along that path, before executing notifyJvmtiMount() where JVMTI operations will be disabled for this thread until the transition finishes, the carrier calls one of this methods to resolve some callsite. An EnterInterpOnlyModeClosure happens on the JRT_BLOCK_END transition. On return to Java we still call the compiled version of that method and continue in compiled mode all the way up to enterSpecial. In enterSpecial the static callsite to enter() happens to go through the c2i adapter where we see there is a compiled version of enter() so we call fixup_callers_callsite() and hit the assert.;;;","2023-05-19 11:11;pchilanomate;The assert we hit was added along the changes for JDK-8288949 but this issue is pre-existent. It's just that now the assert made the bug visible. I see this is actually a duplicate of JDK-8218403.

In JDK-8288949 there were changes made to resolve_static_call_C() that also deal with interpreted only mode. But the issue that was addressed in that bug was slightly different. It was trying to fix the case where the JavaThread already noticed it was in interpreted only mode but because enterSpecial didn't had an interpreted version we switched from interpreted to compiled and from there we incorrectly called the compiled version of enter() leading to asserts in JVMTI code about stack depth.
;;;","2023-05-19 14:12;pchilanomate;[~dlong] I read the possible solutions listed in 8218403. Whats wrong with just checking if the thread is in interpreted only mode before returning to Java and in that case return the c2i adapter instead?:

return current->is_interp_only_mode() ? callee_method->get_c2i_entry() : callee_method->verified_code_entry(); ;;;","2023-05-22 11:44;dlong;[~pchilanomate], it's been a long time since I thought about these problems, so my answers might not be 100% right.  I think your proposed solution above would probably work for most cases.  If I remember correctly, the hard cases for JDK-8218403 and when ForceEarlyReturn/PopFrame are involved, especially in the past when -Xcomp with JVMCI could cause a Java upcall in the resolve stub.  But JVMCI no longer does that, so some of the problems that caused me to file JDK-8218403 may be impossible to reproduce now.;;;","2023-05-22 13:33;pchilanomate;Thanks [~dlong]. I will finish testing the proposed fix then and send a PR to fix this crash. We can keep JDK-8218403 open if you think there are still other issues remaining with JVMCI.;;;","2023-05-23 15:21;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/14108
Date: 2023-05-23 22:07:37 +0000;;;","2023-07-06 12:17;dukebot;Changeset: 0c86c31b
Author:    Patricio Chilano Mateo <pchilanomate@openjdk.org>
Date:      2023-07-06 19:15:45 +0000
URL:       https://git.openjdk.org/jdk/commit/0c86c31bccd676e1cfbd35898ee16e89d5752688
;;;","2023-07-10 07:43;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk21/pull/106
Date: 2023-07-10 14:23:18 +0000;;;",,,,,,,,,,,,,,,,,,
JDK crashes if lib/modules contains non-zero byte containing ATTRIBUTE_END,JDK-8302337,5093987,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,sgehwolf,sgehwolf,sgehwolf,2023-02-13 08:15,2023-02-22 12:27,2023-10-01 09:56,2023-02-14 01:28,,,,,,,,,21,tools,,0,jimage,,,,,,,,,,,,,,,,"imageFile.hpp from the libjimage library has this comment about ATTRIBUTE_END:

//  - Even though ATTRIBUTE_END is used to mark the end of the attribute stream,
//      streams will contain non-zero byte values to represent lesser significant bits.
//      Thus, detecting a zero byte is not sufficient to detect the end of an attribute
//      stream.

Yet, the libjimage code doesn't handle non-zero bytes when it reads an image file here:

// Inflates the attribute stream into individual values stored in the long
// array _attributes. This allows an attribute value to be quickly accessed by
// direct indexing.  Unspecified values default to zero (from constructor.)
void ImageLocation::set_data(u1* data) {
    // Deflate the attribute stream into an array of attributes.
    u1 byte;
    // Repeat until end header is found.
    while ((data != NULL) && (byte = *data)) {
        // Extract kind from header byte.
        u1 kind = attribute_kind(byte);
        assert(kind < ATTRIBUTE_COUNT && ""invalid image location attribute"");
        if (kind == ATTRIBUTE_END) {
            break;
        }
        // Extract length of data (in bytes).
        u1 n = attribute_length(byte);
        // Read value (most significant first.)
        _attributes[kind] = attribute_value(data + 1, n);
        // Position to next attribute by skipping attribute header and data bytes.
        data += n + 1;
    }
}

So if a JDK would produce a lib/modules file with this patch, for example (setting all 3 lower length bits, thus making the byte non-zero):

diff --git a/src/java.base/share/classes/jdk/internal/jimage/ImageLocation.java b/src/java.base/share/classes/jdk/internal/jimage/ImageLocation.java
index f31c7291927..a7de4f9a6c2 100644
--- a/src/java.base/share/classes/jdk/internal/jimage/ImageLocation.java
+++ b/src/java.base/share/classes/jdk/internal/jimage/ImageLocation.java
@@ -99,7 +99,7 @@ public class ImageLocation {
             }
         }
 
-        stream.put(ATTRIBUTE_END << 3);
+        stream.put(ATTRIBUTE_END << 3 | 0x7);
 
         return stream.toArray();
      }

... it segfaults early on:

build/linux-x86_64-server-release/support/interim-image/bin/java -version
Segmentation fault (core dumped)",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,generic,,,,,,,,,,generic,,,,,,"0|i30cqb:",9223372036854775807,b10,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@3da653bd,,,,,,,,,"2023-02-13 09:05;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/12539
Date: 2023-02-13 16:57:17 +0000;;;","2023-02-14 01:28;dukebot;Changeset: ee5f6e15
Author:    Severin Gehwolf <sgehwolf@openjdk.org>
Date:      2023-02-14 09:27:36 +0000
URL:       https://git.openjdk.org/jdk/commit/ee5f6e156de0fd3d78adf60951866f43c492725b
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
IGV: Bytecode not showing,JDK-8302335,5093984,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,tholenstein,tholenstein,tholenstein,2023-02-13 07:02,2023-03-28 01:09,2023-10-01 09:56,2023-02-17 06:28,21,,,,,,,,21,hotspot,,0,igv,oracle-triage-11,oracle-triage-17,oracle-triage-21,,,,,,,,,,,,,"IGV can show the bytecode of a graph if it was transmitted in the XML file. 

Currently the ""Bytecode"" window remains empty although the bytecode is present in the XML file. ",,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8297694,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i30cpn:",9223372036854775807,b11,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2023-02-13 07:07;thartmann;ILW = IGV does not display bytecode information, always, no workaround = LHH = P4;;;","2023-02-13 07:40;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/12537
Date: 2023-02-13 15:09:11 +0000;;;","2023-02-17 06:28;dukebot;Changeset: 57c9bc39
Author:    Tobias Holenstein <tholenstein@openjdk.org>
Date:      2023-02-17 14:26:37 +0000
URL:       https://git.openjdk.org/jdk/commit/57c9bc39cd50067bce34b8e3c32bf89dc6da3e60
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,
Wrong comment in java.base/share/native/libjimage/imageFile.hpp,JDK-8302325,5093971,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,sgehwolf,sgehwolf,sgehwolf,2023-02-13 05:55,2023-02-22 12:29,2023-10-01 09:56,2023-02-15 01:56,,,,,,,,,21,tools,,0,jimage,,,,,,,,,,,,,,,,"The comment in imageFile.hpp around line 206 in imageFile.hpp reads:

// Ex. Container offset (ATTRIBUTE_OFFSET) 0x33562 would be represented as 0x22
// (kind = 4, length = 3), 0x03, 0x35, 0x62.

This assumes that ATTRIBUTE_OFFSET gets int value 4, while it currently has this enum definition:

    enum {
        ATTRIBUTE_END,                  // End of attribute stream marker
        ATTRIBUTE_MODULE,               // String table offset of module name
        ATTRIBUTE_PARENT,               // String table offset of resource path parent
        ATTRIBUTE_BASE,                 // String table offset of resource path base
        ATTRIBUTE_EXTENSION,        // String table offset of resource path extension
        ATTRIBUTE_OFFSET,               // Container byte offset of resource
        ATTRIBUTE_COMPRESSED,       // In image byte size of the compressed resource
        ATTRIBUTE_UNCOMPRESSED, // In memory byte size of the uncompressed resource
        ATTRIBUTE_COUNT                 // Number of attribute kinds
    };

So ATTRIBUTE_OFFSET is actually int value 5, not 4 as alluded to in the comment. ATTRIBUTE_EXTENSION is int value 4.

Also the ATTRIBUTE_END notes seem confusing. What's meant there, I think, is that lower 3 bits might be non-zero for an ATTRIBUTE_END byte, thus checking for a zero byte is not sufficient.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,generic,,,,,,,,,,generic,,,,,,"0|i30cmr:",9223372036854775807,b10,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@3da653bd,,,,,,,,,"2023-02-13 06:18;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/12533
Date: 2023-02-13 14:12:15 +0000;;;","2023-02-15 01:56;dukebot;Changeset: 11194e8b
Author:    Severin Gehwolf <sgehwolf@openjdk.org>
Date:      2023-02-15 09:54:47 +0000
URL:       https://git.openjdk.org/jdk/commit/11194e8b825ad2688f4ede35fdadb69d74c7a5f4
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Inheritance tree does not show correct type parameters/arguments,JDK-8302324,5093970,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,hannesw,hannesw,hannesw,2023-02-13 05:52,2023-02-22 12:27,2023-10-01 09:56,2023-02-14 04:45,20,,,,,,,,21,tools,,0,,,,,,,,,,,,,,,,,"The inheritance tree at the top of the type documentation page shows generic supertypes in the context of the local type. For instance, if a class extends java.util.HashSet<R> or java.util.HashSet<String>, R or String should be used in all generic collection superclasses of HashSet respectively. 

Currently, only the direct superclass shows the correct type parameter or argument, as can be seen here:

https://docs.oracle.com/en/java/javase/19/docs/api/java.desktop/javax/print/attribute/standard/JobStateReasons.html",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,generic,,,,,,,,,,generic,,,,,,"0|i30cmj:",9223372036854775807,b10,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@7900061a,,,,,,,,,"2023-02-13 12:31;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/12544
Date: 2023-02-13 20:22:59 +0000;;;","2023-02-14 04:45;dukebot;Changeset: 6d4b02b6
Author:    Hannes Wallnöfer <hannesw@openjdk.org>
Date:      2023-02-14 12:42:59 +0000
URL:       https://git.openjdk.org/jdk/commit/6d4b02b6c9b82f851b56055ba299f168618ab8ac
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
AsyncGetCallTrace obtains too few frames in sanity test,JDK-8302320,5093966,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,jbechberger,jbechberger,jbechberger,2023-02-13 05:26,2023-07-24 21:38,2023-10-01 09:56,2023-02-21 06:34,,,,,,,,,21,hotspot,,0,jdk17u-fix-request,jdk17u-fix-yes,,,,,,,,,,,,,,,"AsyncGetCallTrace returns only 3 frames in the sanity test, while GetStackTrace returns 11. The GetStackTrace trace conforms to the actual source code.

GetStackTrace returns a stack trace like the following:

```
Frame 0: Native frame Lprofiling/sanity/ASGSTBaseTest;.checkAsyncGetStackTraceCall()Z
Frame 1: Java frame   Lprofiling/sanity/ASGSTBaseTest;.main([Ljava/lang/String;)V: 0
Frame 2: Java frame   Ljava/lang/invoke/LambdaForm$DMH.0x0000000801002000;.invokeStatic(Ljava/lang/Object;Ljava/lang/Object;)V: 10
Frame 3: Java frame   Ljava/lang/invoke/LambdaForm$MH.0x0000000801003400;.invoke(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;: 33
Frame 4: Java frame   Ljava/lang/invoke/Invokers$Holder;.invokeExact_MT(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;: 20
Frame 5: Java frame   Ljdk/internal/reflect/DirectMethodHandleAccessor;.invokeImpl(Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/Object;: 55
Frame 6: Java frame   Ljdk/internal/reflect/DirectMethodHandleAccessor;.invoke(Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/Object;: 23
Frame 7: Java frame   Ljava/lang/reflect/Method;.invoke(Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/Object;: 102
Frame 8: Java frame   Lcom/sun/javatest/regtest/agent/MainWrapper$MainThread;.run()V: 134
Frame 9: Java frame   Ljava/lang/Thread;.runWith(Ljava/lang/Object;Ljava/lang/Runnable;)V: 5
Frame 10: Java frame   Ljava/lang/Thread;.run()V: 19
```

AsyncGetCallTrace returns:

```
Frame 0: Native frame Lprofiling/sanity/ASGSTBaseTest;.checkAsyncGetStackTraceCall()Z
Frame 1: Java frame   Lprofiling/sanity/ASGSTBaseTest;.main([Ljava/lang/String;)V: 0
Frame 2: Java frame   Ljava/lang/invoke/LambdaForm$DMH.0x0000000801002000;.invokeStatic(Ljava/lang/Object;Ljava/lang/Object;)V: 10
```

This is related to a bug in `frame::is_safe_for_sender` which is already fixed on PPC (https://bugs.openjdk.org/browse/JDK-8209996) but is still present on x86, albeit only for AsyncGetCallTrace and not for JFR.

The issue itself first appeared with the implementation of JDK-8271820 which altered the implementation of Java reflection which is used by the JTREG test runner. So it might affect other code that uses reflection heavily.

This test error occurs when checking for the length of the returned traces in the sanity test (see https://github.com/parttimenerd/jdk/commit/98fe63f42f5a3d5ec9fd151b034dfeb3ef767afd). ",,,,,,,,,,,JDK-8312638,JDK-8311566,JDK-8304253,,,,,,,,,,,,,,,,,,,,,,,JDK-8303168,JDK-8209996,,,,,,,,,,,,,,,,,,,,x86,,,,,,,,18,,generic,,,,,,"0|i30cln:",9223372036854775807,b11,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@2846162a,,,,,,,,,"2023-02-13 06:48;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/12535
Date: 2023-02-13 14:39:00 +0000;;;","2023-02-16 02:23;jbechberger;The error is also reproducible with a self-contained test case and JFR (https://gist.github.com/parttimenerd/502251b67d3e42baad17419442a72c39):

```java
import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;

public class Main {

    public static void main(String[] args) throws NoSuchMethodException, InvocationTargetException, IllegalAccessException {
        Class<?> klass = Main.class;
        Method mainMethod = klass.getMethod(""main"");
        mainMethod.invoke(null);
    }

    public static void main() {
        javaLoop();
    }

    public static void javaLoop() {
        long start = System.currentTimeMillis();
        while (start + 3000 > System.currentTimeMillis());
    }
}
```;;;","2023-02-21 06:34;dukebot;Changeset: db483a38
Author:    Johannes Bechberger <johannes.bechberger@sap.com>
Committer: Jorn Vernee <jvernee@openjdk.org>
Date:      2023-02-21 14:33:02 +0000
URL:       https://git.openjdk.org/jdk/commit/db483a38a815f85bd9668749674b5f0f6e4b27b4
;;;","2023-02-24 07:37;dcubed;This fix is integrated in jdk-21+11-869.;;;","2023-03-06 00:07;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u/pull/366
Date: 2023-03-06 07:58:36 +0000;;;","2023-03-06 00:20;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/1197
Date: 2023-03-06 08:12:47 +0000;;;","2023-03-07 00:09;jbechberger;Fix Request (17u):
Fixes a bug in ASGCT and JFR related to interpreted frames.
Tested using SAPs nightly tests. Applies clean.;;;",,,,,,,,,,,,,,,,,,,,,,,,
Examine cost of clone of primitive arrays compared to arraycopy,JDK-8302315,5093960,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,redestad,redestad,redestad,2023-02-13 03:14,2023-02-22 23:14,2023-10-01 09:56,2023-02-18 07:20,,,,,,,,,21,core-libs,,0,,,,,,,,,,,,,,,,,"During work on and review of https://git.openjdk.org/jdk/pull/12453 it was made apparent that array.clone() is sometimes a smidge slower than System.arraycopy, so for that patch we opted to keep helper methods and code around to call arraycopy.

One candidate is that zeroing is not properly eliminated for clone, making this related to https://bugs.openjdk.org/browse/JDK-8146828",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i30ckb:",9223372036854775807,b11,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4c088d55,,,,,,,,,"2023-02-17 02:09;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/12613
Date: 2023-02-17 09:58:54 +0000;;;","2023-02-18 07:20;dukebot;Changeset: d6716d2e
Author:    Claes Redestad <redestad@openjdk.org>
Date:      2023-02-18 15:17:57 +0000
URL:       https://git.openjdk.org/jdk/commit/d6716d2e5471ee794df8833430dd3171b565f78e
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
[Ventura][x64]Assertion in 2D shapes sample program with metal pipeline,JDK-8302309,5093954,Bug,Resolved,JDK,JDK,software,duke,,,P2,Fixed,arapte,aghaisas,aghaisas,2023-02-13 01:19,2023-02-13 01:58,2023-10-01 09:56,2023-02-13 01:57,internal,,,,,,,,internal,javafx,,0,javafx-metal,regression_8293341,,,,,,,,,,,,,,,"Looks like fix for JDK-8293341 has broken metal pipeline behaviour on my x64 based system : macOS 13.1.

Running 2D shapes draw PoC results in an assert with below log-

>>> MTLShader(): fragFuncName = Solid_Color
2023-02-13 14:41:08.655 java[36470:827135] 
2023-02-13 14:41:08.655 java[36470:827135] >>>> JNICALL Native: MTLShader_nCreateMetalShader
2023-02-13 14:41:08.655 java[36470:827135] 
2023-02-13 14:41:08.655 java[36470:827135] >>>> MetalShader.initWithContext()----> fragFuncName: Solid_Color
2023-02-13 14:41:08.655 java[36470:827135] getPRISMDict 
2023-02-13 14:41:08.655 java[36470:827135] getPRISMDict() : calling -> getSolid_Color_Uniform_VarID_Dict()
2023-02-13 14:41:08.655 java[36470:827135] getDECORADict 
2023-02-13 14:41:08.657 java[36470:827135] -> Native: MTLShader.initWithContext()  argumentBufferLength = 0
2023-02-13 14:41:08.657 java[36470:827135] MetalPipelineManager.getPipeStateWithFragFunc()
2023-02-13 14:41:08.832 java[36470:827135] *** Assertion failure in -[MetalPipelineManager getPipeStateWithFragFunc:], MetalPipelineManager.m:88
2023-02-13 14:41:08.833 java[36470:827135] *** Terminating app due to uncaught exception 'NSInternalInconsistencyException', reason: 'Failed to create pipeline state to render to texture: Error Domain=CompilerError Code=2 ""Compiler encountered an internal error"" UserInfo={NSLocalizedDescription=Compiler encountered an internal error}'
*** First throw call stack:
(
	0   CoreFoundation                      0x00007ff81329740b __exceptionPreprocess + 242
	1   libobjc.A.dylib                     0x00007ff812de3e25 objc_exception_throw + 48
	2   Foundation                          0x00007ff81413afb0 -[NSCalendarDate initWithCoder:] + 0
	3   libprism_mtl.dylib                  0x000000010b0b4cc9 -[MetalPipelineManager getPipeStateWithFragFunc:] + 329
	4   libprism_mtl.dylib                  0x000000010b0ce29e -[MetalShader initWithContext:withFragFunc:] + 670
	5   libprism_mtl.dylib                  0x000000010b0cf67f Java_com_sun_prism_mtl_MTLShader_nCreateMetalShader + 95
	6   ???                                 0x000000011c316051 0x0 + 4767965265
	7   ???                                 0x000000011c311dd0 0x0 + 4767948240
)
libc++abi: terminating with uncaught exception of type NSException

Process finished with exit code 134 (interrupted by signal 6: SIGABRT)",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8293341,,,,,,,,,,,,,,,,,,,,,x86_64,,,,,,,,internal,,os_x,,,,,,"0|i30ciz:",9223372036854775807,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4143e3f7,,,,,,,,,"2023-02-13 01:33;arapte;Issue is that it fails to create MTLRenderPipelineState with any fragment function.
There are no compile or linking time warnings generated.
The issue occurs with Ventura on x64 machine only.
Does NOT occur on,
1. Monterey with x64 
2. Ventura with M1

As part of JDK-8293341 : Decora POC
We pass a MTLSamplerState to fragment function as function argument and store it's reference in a file global sampler variable.
Saving reference into global variable seems to be the cause of this issue.

Fix:
We have to remove use of global variable. So we shall be passing the MTLSamplerState as argument to all user defined functions.
We already do this for sharing the Uniform across functions.
;;;","2023-02-13 01:57;arapte;Changeset: 5c58b648
Author: Ambarish Rapte <arapte@openjdk.org>
Date: 2023-02-13 15:24:10 +0530
URL: https://github.com/openjdk/jfx-sandbox/commit/5c58b64870ee9789498eafae0b14d53a6c02363e;;;","2023-02-13 01:58;arapte;The fix is tested by running several samples on three different machines:
1. Ventura, x64
2. Ventura, M1
3. Monterey, x64;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,
Cherry-pick WebKit 615.1 stabilization fixes,JDK-8302294,5093938,Bug,Resolved,JDK,JDK,software,duke,,,P2,Fixed,hmeda,hmeda,hmeda,2023-02-12 21:27,2023-03-13 17:14,2023-10-01 09:56,2023-02-15 06:20,8u371,jfx21,,,,,,,jfx21,javafx,,0,CPU23_04-critical-approved,CPU23_04-critical-SQE-OK,sn_137,webkit-2.38,,,,,,,,,,,,,https://webkitgtk.org/2023/02/02/webkitgtk2.38.4-released.html,,,,,,,,,,,JDK-8304091,JDK-8304104,JDK-8302921,JDK-8302605,JDK-8304092,,,,,,,,,,,,,,,,,,,,,JDK-8302684,,,,,JDK-8299977,,,,,,,,,,,,,,,,generic,,,,,,,,,,generic,,,,,,"0|i30cff:",9223372036854775807,b05,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@5a8b92bd,,,,,,,,,"2023-02-14 10:28;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jfx/pull/1033
Date: 2023-02-14 18:19:17 +0000;;;","2023-02-15 06:20;dukebot;Changeset: 97ae4b87
Author:    Hima Bindu Meda <hmeda@openjdk.org>
Committer: Kevin Rushforth <kcr@openjdk.org>
Date:      2023-02-15 14:18:39 +0000
URL:       https://git.openjdk.org/jfx/commit/97ae4b87c7e2ce0605ff051c82d48328f83a94ca
;;;","2023-03-13 15:23;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jfx17u/pull/125
Date: 2023-03-13 22:00:18 +0000;;;","2023-03-13 15:27;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jfx11u/pull/135
Date: 2023-03-13 21:59:02 +0000;;;","2023-03-13 17:14;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jfx20u/pull/5
Date: 2023-03-13 23:43:23 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,,,
VarHandle.describeConstable() fails to return a nominal descriptor for static public fields,JDK-8302260,5093891,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,mchung,lkuskov,lkuskov,2023-02-10 12:07,2023-02-22 12:28,2023-10-01 09:56,2023-02-14 13:16,21,,,,,,,,21,core-libs,,0,conformance,regression,tck-red-21,,,,,,,,,,,,,,"There are  classes (attached to this issue) 

public class CTestClass extends CTestSuperClass implements ITestInterfaceA {
    public static String ctestString =  ""CTestClass"";
    public static long  ctestLong =  1l;
}
&&
public class CTestSuperClass {
    public static String stringField = ""CTestSuperClass"";
    public static long longField = 100L;
    public static String stringField2 = ""CTestSuperClass2"";
    public static long longField2 = 102L;
}
&&
public interface ITestInterfaceA {
    String stringField = ""ITestInterfaceA"";
    long longField = 10l;
    String stringField3 = ""ITestInterfaceA3"";
    long longField3 = 13L;
}

and test runner that has the sequence of method invocations:

VarHandle vh = MethodHandles.lookup().findStaticVarHandle(CTestClass.class,”longField”, long.class);
// or
VarHandle vh = MethodHandles.lookup().findStaticVarHandle(CTestClass.class,”stringField”, Stirng.class);
// and
VarHandle.VarHandleDesc vhd = vh.describeConstable();

then vhd will erroneously describe : VarHandleDesc[static CTestClass.ctestLong:long] or VarHandleDesc[static CTestClass.ctestString:String] 
It happens only if CTestClass has both static fields  

otherwise if for example the field String ctestString is removed from the CTestClass.class then vh.describeConstable throws the exception:

java.lang.InternalError: Static field not found at offset
at java.base/java.lang.invoke.VarHandles.getStaticFieldFromBaseAndOffset(VarHandles.java:197)
at java.base/java.lang.invoke.VarHandleLongs$FieldStaticReadOnly.describeConstable(VarHandleLongs.java:410)
    
Thus VarHandle.describeConstable hasn’t been working  since fix of JDK-8297757
Also any exception thrown by describeConstable should be mentioned in the specification",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8302224,,,,,JDK-8297757,,,,,,,,,"2023-02-10 12:05;lkuskov;test.tar;https://bugs.openjdk.org/secure/attachment/102619/test.tar",,,,,,,,,,,,,,,,,,,,21,,,,,,,,"0|i30c4z:",9223372036854775807,b10,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@1cfeb1de,,,,,,,,,"2023-02-10 13:39;mchung;The declaring class of the field should be used when constructing the VarHandle for static fields instead of the reference class (which VarHandle for the instance fields needs).;;;","2023-02-13 11:42;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/12543
Date: 2023-02-13 19:35:52 +0000;;;","2023-02-14 13:16;dukebot;Changeset: 9c202a5a
Author:    Mandy Chung <mchung@openjdk.org>
Date:      2023-02-14 21:15:14 +0000
URL:       https://git.openjdk.org/jdk/commit/9c202a5a8fc5b0f334ea72487d079af7da275693
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,
failure_handler native.core should wait for coredump to finish,JDK-8302226,5093856,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,lujaniuk,lujaniuk,lujaniuk,2023-02-10 10:04,2023-02-22 23:13,2023-10-01 09:56,2023-02-17 06:59,18,,,,,,,,21,hotspot,,0,,,,,,,,,,,,,,,,,"The failure_handler configuration for linux[1] and macos[2] uses

kill -ABRT %p

to dump the core of a timed out jtreg test. This command returns immediatelly and the coredump is initiated in the background by the OS, making it impossible for the failure_handler to properly track the timeout of this action. Let's change to a coredump method which will wait until the coredump is actually finished before returning:

On Linux:
bash -c ""kill -ABRT %p && tail --pid=%p -f /dev/null""
On Mac:
bash -c ""kill -ABRT %p && lsof -p %p +r 1 &>/dev/null""
(credit: https://stackoverflow.com/a/41613532)

Dumping a core can also take longer than the default action timeout of 20 seconds. Some personal testing showed coredumps for heaps of size 10-20G to take roughly 1-2 minutes. Let's set a safe default of 10 minutes for this action.

[1]:https://github.com/openjdk/jdk/blob/master/test/failure_handler/src/share/conf/linux.properties
[2]:https://github.com/openjdk/jdk/blob/master/test/failure_handler/src/share/conf/mac.properties


",,,,,,,,,,,JDK-8302955,JDK-8302774,JDK-8302775,,,,,,,,,,,,,JDK-8301560,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i30bx7:",9223372036854775807,b11,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@78d03d9a,,,,,,,,,"2023-02-10 10:26;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/12515
Date: 2023-02-10 18:19:01 +0000;;;","2023-02-17 06:59;dukebot;Changeset: 6120319a
Author:    Ludvig Janiuk <lujaniuk@openjdk.org>
Committer: Erik Joelsson <erikj@openjdk.org>
Date:      2023-02-17 14:57:00 +0000
URL:       https://git.openjdk.org/jdk/commit/6120319afdba98b5ff547b870a0260479e8b683c
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
SunJCE Provider doesn't validate key sizes when using 'constrained' transforms for AES/KW and AES/KWP,JDK-8302225,5093854,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,valeriep,cushon,cushon,2023-02-10 09:57,2023-02-22 23:13,2023-10-01 09:56,2023-02-16 13:59,,,,,,,,,21,security-libs,,0,,,,,,,,,,,,,,,,,"One of my colleagues reported the following issue:

OpenJDK's SunJCE `Provider` doesn't validate key sizes when using ""constrained"" (see below) transforms for AES/KW and AES/KWP which were introduced in OpenJDK 17.

Re: Constrained. Looking at the ""Standard Names"" reference for Ciphers for Java 17: https://docs.oracle.com/en/java/javase/17/docs/specs/security/standard-names.html#cipher-algorithm-names which states for AES ""To use the AES cipher with only one valid key size, use the format AES_<n>, where <n> can be 128, 192 or 256"".

The following AESWrap and AESWrapPad sections have similar wording and state that AESWrap is the same as AES/KW and AESWrapPad is the same as AES/KWP. I.e. we should reasonably assume that AES_128/KW behaves the same as (e.g.) AES_128/CBC when it comes to valid key sizes.

However this is not the case.  For modes CBC, ECB etc, `Cipher.init()` will throw `InvalidKeyException` if an incorrectly sized key is passed in.  For mode KW and KWP, no exception is thrown and the operation just silently uses the key that is passed in and sets its internal key size to match.

A demo is provided (see attached `KeyWrap.java` file).

Its method `findDuplicateOutputs()` finds key-size-constrained transformations that give the same result.  So for example the first five lines:

```
Secret key length 128
128 bit KEK with AES/KWP/NoPadding -> 946628a78a4bd865a6169bdb460e05f25e793c8bed49d5fd
    AES_128/KWP/NoPadding with same 128 bit KEK gives the same result.
    AES_192/KWP/NoPadding with same 128 bit KEK gives the same result.
    AES_256/KWP/NoPadding with same 128 bit KEK gives the same result.
```
shows that AES/KWP/NoPadding, AES_128/KWP/NoPadding, AES_192/KWP/NoPadding and AES_256/KWP/NoPadding all give the result when passed a 128 bit key-encrypting key.

We know that AES/KWP/NoPadding is _supposed_ to use whatever key size is passed in, so this tells us that all 4 transforms are using a 128bit key and key size.  But from the Standard Names document, we would expect the AES_192 and AES_256 variants to throw.

The rest of the output repeats this for different secret key and key-encrypting key sizes to show the issue applies across the board.

The poc uses AES/KWP but the results are the same as for AES/KW.

The second method in the demo is `checkKeySizeConstraintsForAesCbc()`. This shows that for AES/CBC, trying to use an invalid key size throws in `init()`.  The same applies to ECB, GCM and all the other, non-wrapping modes.  Default output from this method is nothing... If it succeeds in initialising a `Cipher` with an invalid key then it will print.
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"2023-02-10 09:56;cushon;KeyWrap.java;https://bugs.openjdk.org/secure/attachment/102618/KeyWrap.java",,,,,,,,,,,,,,,,,,,,17,,,,,,,,"0|i30bwr:",9223372036854775807,b11,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@35a9b277,,,,,,,,,"2023-02-13 12:27;valeriep;Need to validate key size during initialization.;;;","2023-02-13 16:28;valeriep;There is an existing regression test on checking that InvalidKeyException being thrown for ""constrained"" transformations when an otherwise-valid AES key size is used; however, due to a test bug, it ends up using invalid AES keys, i.e. 128-byte key instead of 128-bit keys, which is caught and detected by the underlying AESCrypt class. Thus masking this AES KW impl bug.

Need to fix both the src and the regression test.;;;","2023-02-14 18:29;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/12569
Date: 2023-02-15 02:23:31 +0000;;;","2023-02-16 13:59;dukebot;Changeset: 4ce493f0
Author:    Valerie Peng <valeriep@openjdk.org>
Date:      2023-02-16 21:58:34 +0000
URL:       https://git.openjdk.org/jdk/commit/4ce493f09ea3a34322462e82fd73b8375be1cba5
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,
Typo in javadoc of Arrays.compare and Arrays.mismatch,JDK-8302214,5093839,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,jpai,jpai,jpai,2023-02-10 04:02,2023-02-22 12:27,2023-10-01 09:56,2023-02-13 23:01,,,,,,,,,21,core-libs,,0,noreg-doc,,,,,,,,,,,,,,,,"As noted in the current open PR https://github.com/openjdk/jdk/pull/12488:

The Javadocs of Arrays.compare and Arrays.mismatch uses the incorrect capitalization atoIndex and btoIndex when referencing the corresponding aToIndex and bToIndex parameters.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i30btf:",9223372036854775807,b10,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@38ded199,,,,,,,,,"2023-02-10 04:13;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/12488
Date: 2023-02-09 10:13:03 +0000;;;","2023-02-13 23:01;dukebot;Changeset: d782125c
Author:    Eirik Bjorsnos <eirbjo@gmail.com>
Committer: Jaikiran Pai <jpai@openjdk.org>
Date:      2023-02-14 06:58:56 +0000
URL:       https://git.openjdk.org/jdk/commit/d782125c8f3bfe087269e4430dd12328d8cc77f8
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Incorrect desugaring of null-allowed nested patterns,JDK-8302202,5093818,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,jlahoda,jlahoda,jlahoda,2023-02-10 00:53,2023-05-14 13:24,2023-10-01 09:56,2023-02-17 04:57,20,21,,,,,,,21,tools,,1,jdk20u-fix-request,jdk20u-fix-SQE-ok,jdk20u-fix-yes,,,,,,,,,,,,,,"Consider code like:
---
public class NullPatterns {

    public static void main(String[] args) {
        switch (new R(null)) {
            case R(Object o) when o == null -> {} //correct
            case R(Object o) -> throw new AssertionError(""Incorrect case!"");
        };
    }

    record R(Object o) {}

}
---

Running this leads to incorrect outcome:
---
$ java --enable-preview --source 21 NullPatterns.java
Note: NullPatterns.java uses preview features of Java SE 21.
Note: Recompile with -Xlint:preview for details.
Exception in thread ""main"" java.lang.AssertionError: Incorrect case!
        at NullPatterns.main(NullPatterns.java:6)
--

",,,,,,,,,,,JDK-8303347,JDK-8303247,,,,,,,,,,,,,,,,,,,JDK-8304863,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i30bor:",9223372036854775807,b11,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4dca67bd,,,,,,,,,"2023-02-15 05:23;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/12572
Date: 2023-02-15 13:16:10 +0000;;;","2023-02-17 04:57;dukebot;Changeset: dc55a7fc
Author:    Jan Lahoda <jlahoda@openjdk.org>
Date:      2023-02-17 12:55:47 +0000
URL:       https://git.openjdk.org/jdk/commit/dc55a7fc877ab5ea4efbed90454194008143aeb4
;;;","2023-02-20 00:40;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk20u/pull/7
Date: 2023-02-20 08:33:03 +0000;;;","2023-02-20 06:19;jlahoda;Fix Request

A valid code is compiled into classfile that works in a different way than it should. Despite this being in a preview feature, it would be desirable to provide a fix for users evaluating the preview feature before JDK 21.  The patch can be applied cleanly to JDK 21, but a backport for JDK-8301858 is a pre requisite for a correctly working backport (besides being a reasonable fix by itself). The risk outside of preview feature should be very small, as most of the fix is in a preview-specific code. The combined backports of this bug and JDK-8301858 pass tests.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,
Button border overlaps with button icon on macOS system LaF,JDK-8302173,5093666,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,dnguyen,webbuggrp,webbuggrp,2023-02-08 07:49,2023-03-01 22:55,2023-10-01 09:41,2023-02-23 12:42,19,20,,,,,,,21,client-libs,,0,dcspn,macos,regression,reproducer-yes,sn_137,sn_138,webbug,,,,,,,,,,"A DESCRIPTION OF THE PROBLEM :
Looks GOOD on JDK 17
<link>

Looks BAD on JDK 19:
<llink>

The issue seems to be specific to (1) macOS system LaF and (2) using HTML as button text and (3) using setHorizontalAlignment(LEFT) which in combination leads to icon / text / button border not aligning correctly.

REGRESSION : Last worked in version 17.0.6

STEPS TO FOLLOW TO REPRODUCE THE PROBLEM :
Please run the self-contained test case below on macOS with JDK 17 and JDK 19 and you will find that that JDK 19 does not render the icon in the correct location.


---------- BEGIN SOURCE ----------
package test;

import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.Component;
import java.awt.Graphics;

import javax.swing.Icon;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.SwingUtilities;
import javax.swing.UIManager;

public class Main {

	public static void main(String[] args) throws Exception {
		SwingUtilities.invokeLater(() -> {
			try {
				UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());
			} catch (Exception e) {
				e.printStackTrace();
			}

			JButton button = new JButton(""<html><nobr><u>Test</u></nobr></html>"", new TestIcon());
			button.setHorizontalAlignment(JButton.LEFT);

			JFrame window = new JFrame();
			window.getContentPane().add(button, BorderLayout.CENTER);

			window.pack();
			window.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
			window.setVisible(true);
		});
	}

	public static class TestIcon implements Icon {

		@Override
		public void paintIcon(Component c, Graphics g, int x, int y) {
			g.setColor(Color.MAGENTA);
			g.fillRect(x, y, 16, 16);
		}

		@Override
		public int getIconWidth() {
			return 16;
		}

		@Override
		public int getIconHeight() {
			return 16;
		}
	}

}

---------- END SOURCE ----------

CUSTOMER SUBMITTED WORKAROUND :
Use JDK 17 instead of JDK 19.

FREQUENCY : always


",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"2023-02-09 13:03;pnarayanaswa;Main.java;https://bugs.openjdk.org/secure/attachment/102603/Main.java","2023-02-09 13:04;pnarayanaswa;jdk17_capture.png;https://bugs.openjdk.org/secure/attachment/102605/jdk17_capture.png","2023-02-09 13:04;pnarayanaswa;jdk19_capture.png;https://bugs.openjdk.org/secure/attachment/102604/jdk19_capture.png",,,,,,,,,,x86_64,,,,,,,b13,19,,os_x,,,,,,"0|i30aqz:",9223372036854775807,b12,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@568a5b31,,,,,,,,,"2023-02-09 13:01;pnarayanaswa;Checked with attached testcase in macOS v11.7.3(BigSur), Issue is reproducible<attached screenshot>
Test Result
=========
8u361: Pass
jdk11: Pass
jdk17: Pass
jdk19 b12: Pass
jdk19 b13: Fail <-Regression
jdk20ea35: Fail;;;","2023-02-09 19:13;psadhukhan;Seems to be regression of JDK-8015854;;;","2023-02-10 09:58;dnguyen;Regression caused by HTML contents being text only. The change in JDK-8015854 is for HTML img. Fix understood by adding conditional to check if HTML is for img and testing to make sure provided test and existing HTML test passes.;;;","2023-02-13 09:11;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/12520
Date: 2023-02-11 00:23:05 +0000;;;","2023-02-23 12:42;dukebot;Changeset: 1a078714
Author:    Damon Nguyen <dnguyen@openjdk.org>
Committer: Harshitha Onkar <honkar@openjdk.org>
Date:      2023-02-23 20:41:25 +0000
URL:       https://git.openjdk.org/jdk/commit/1a078714546c7582c310537dcae91b521f3c2b40
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,
[JVMCI] HotSpotResolvedJavaMethodImpl.canBeInlined must respect ForceInline,JDK-8302172,5093782,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,dnsimon,dnsimon,dnsimon,2023-02-09 12:23,2023-05-05 04:10,2023-10-01 09:56,2023-02-11 07:40,11,17,20,21,,,,,21,hotspot,,0,jdk11-graalvm,jdk11u-jvmci-defer,jdk17-graalvm,jdk17u-fix-request,jdk17u-fix-yes,jdk20-graalvm,jdk20u-fix-request,jdk20u-fix-SQE-ok-next,jdk20u-fix-yes,jvmci,oracle-triage-21,,,,,,The implementation of HotSpotResolvedJavaMethodImpl.canBeInlined must return true for a method annotated with ForceInline.,,,,,,,,,,,JDK-8305147,JDK-8305138,JDK-8306828,JDK-8306184,JDK-8305545,JDK-8307024,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9,,,,,,,,"0|i30bgr:",9223372036854775807,b10,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2023-02-09 12:40;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/12501
Date: 2023-02-09 20:32:12 +0000;;;","2023-02-09 16:21;dlong;ILW = ForceInline annotation ignored; always; no workaround = LHH = P4;;;","2023-02-11 07:40;dukebot;Changeset: 1ef9f650
Author:    Doug Simon <dnsimon@openjdk.org>
Date:      2023-02-11 15:38:59 +0000
URL:       https://git.openjdk.org/jdk/commit/1ef9f6507ba45419f0fa896915eec064762c5153
;;;","2023-03-29 04:02;thartmann;Fix Request (JDK 20u)
Resolves a JVMCI issue with an ignored ForceInline annotation. The fix is low risk, was already backported to Oracle JDK 17u / 11u and tested in the JDK 21 and 17u / 11u CIs. The backport applies cleanly.;;;","2023-03-29 04:07;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk20u/pull/29
Date: 2023-03-29 11:01:16 +0000;;;","2023-04-20 04:16;goetz;Fix request [17u]

I backport this for parity with 17.0.8-oracle.
Low risk, JVMCI only and small change.
Clean backport.
SAP nightly testing passed.;;;","2023-04-20 04:22;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/1285
Date: 2023-04-20 11:15:48 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,
PPC: test/jdk/jdk/internal/vm/Continuation/Fuzz.java: AssertionError: res: false shouldPin: false,JDK-8302158,5093765,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,rrich,rrich,rrich,2023-02-09 07:28,2023-02-22 23:13,2023-10-01 09:56,2023-02-17 05:22,21,,,,,,,,21,hotspot,,0,loom,oraclejdk-na,oracle-triage-21,,,,,,,,,,,,,,"# Symptom

test/jdk/jdk/internal/vm/Continuation/Fuzz.java fails sporadically with

Exception in thread ""main"" java.lang.AssertionError: res: false shouldPin: false
	at Fuzz.verifyPin(Fuzz.java:479)
	at Fuzz.postYield(Fuzz.java:689)
    // ...

# Analysis
(Line  numbers refer to attachment yield_after_deopt_failure.log)

The recursive freeze of stack frames does not stop at the bottom frame (line 79) and then fails when trying to freeze the frame of the continuation enter intrinsic `Continuation.enterSpecial` (line 1) with `freeze_pinned_native`. This causes the test failure because freeze/yield should succeed.

The recursion is supposed to stop when the expression `FKind::frame_bottom(f) >= _bottom_address - 1` is true
(https://github.com/openjdk/jdk/blob/e4d1cff6597ac25d435fe16e0fc49d23f6e65df4/src/hotspot/share/runtime/continuationFreezeThaw.cpp#L834)
but there is dead space between `FreezeBase::_bottom_address` (line 23) and `ContinuationHelper::InterpretedFrame::frame_bottom` (line 35)

The dead space is left over from deoptimization of `Fuzz.com_mny(IIDJFLjava/lang/Object;IDJFLjava/lang/Object;IDJFLjava/lang/Object;IDJFLjava/lang/Object;)I`. It used to accomodate the stack args for the compiled frame.
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"2023-02-09 07:29;rrich;yield_after_deopt_failure.log;https://bugs.openjdk.org/secure/attachment/102602/yield_after_deopt_failure.log",,,,,,,,,,,,ppc,,,,,,,,,,,,,,,,"0|i30bcz:",9223372036854775807,b11,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2023-02-14 06:22;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/12557
Date: 2023-02-14 14:10:08 +0000;;;","2023-02-17 05:22;dukebot;Changeset: b8c9d6cd
Author:    Richard Reingruber <rrich@openjdk.org>
Date:      2023-02-17 13:20:08 +0000
URL:       https://git.openjdk.org/jdk/commit/b8c9d6cdf60ea5e680eb00d5c01a1c4d2ed04006
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
BMPImageReader throws an exception reading BMP images,JDK-8302151,5093462,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,jdv,webbuggrp,webbuggrp,2023-02-06 11:56,2023-04-20 01:38,2023-10-01 09:56,2023-02-20 23:32,11.0.13,17.0.1,18,19,20,8u311,,,21,client-libs,,0,additional-information-received,dcspn,jdk11u-fix-request,jdk11u-fix-yes,jdk17u-fix-request,jdk17u-fix-yes,regression,reproducer-yes,sn_138,webbug,,,,,,,"ADDITIONAL SYSTEM INFORMATION :
Windows 10, Java 19.0.2

A DESCRIPTION OF THE PROBLEM :
A black and white BMP image from multiple TWAIN scanners throws this exception:

javax.imageio.IIOException: Invalid width/height for BI_RGB image data.
	at java.desktop/com.sun.imageio.plugins.bmp.BMPImageReader.readHeader(BMPImageReader.java:621)
	at java.desktop/com.sun.imageio.plugins.bmp.BMPImageReader.read(BMPImageReader.java:859)
	at java.desktop/javax.imageio.ImageIO.read(ImageIO.java:1466)
	at java.desktop/javax.imageio.ImageIO.read(ImageIO.java:1315)
	at com.usdataworks.javaplay.ReadBmpFromTwainScanner.main(ReadBmpFromTwainScanner.java:14)


REGRESSION : Last worked in version 11

STEPS TO FOLLOW TO REPRODUCE THE PROBLEM :
Run the attached source code on a bitonal (1 bit per pixel) BMP images from a TWAIN scanner.
I can provide an image if needed.

EXPECTED VERSUS ACTUAL BEHAVIOR :
EXPECTED -
BMP image file is read into a BufferedImage.
ACTUAL -
This exception is thrown:

javax.imageio.IIOException: Invalid width/height for BI_RGB image data.
	at java.desktop/com.sun.imageio.plugins.bmp.BMPImageReader.readHeader(BMPImageReader.java:621)
	at java.desktop/com.sun.imageio.plugins.bmp.BMPImageReader.read(BMPImageReader.java:859)
	at java.desktop/javax.imageio.ImageIO.read(ImageIO.java:1466)
	at java.desktop/javax.imageio.ImageIO.read(ImageIO.java:1315)
	at com.usdataworks.javaplay.ReadBmpFromTwainScanner.main(ReadBmpFromTwainScanner.java:14)


---------- BEGIN SOURCE ----------
package com.usdataworks.javaplay;

import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;

import javax.imageio.ImageIO;

public class ReadBmpFromTwainScanner {

	public static void main(String[] args) {
		try {
			File input = new File(""The Scanner Image 1675710585648.bmp"");
			BufferedImage theImage = ImageIO.read(input);
			System.out.println(""theImage width="" + theImage.getWidth() + "" height="" + theImage.getHeight());
		} catch (IOException e) {
			e.printStackTrace();
		}
	}
}

---------- END SOURCE ----------

FREQUENCY : always


",,,,,,,,,,,JDK-8303111,JDK-8306497,JDK-8303107,JDK-8303109,JDK-8303296,JDK-8306517,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"2023-02-09 06:26;pnarayanaswa;ReadBmpFromTwainScanner.java;https://bugs.openjdk.org/secure/attachment/102600/ReadBmpFromTwainScanner.java","2023-02-10 05:23;pnarayanaswa;The Scanner Image 1675710585648.bmp;https://bugs.openjdk.org/secure/attachment/102614/The+Scanner+Image+1675710585648.bmp","2023-02-09 06:26;pnarayanaswa;flower.bmp;https://bugs.openjdk.org/secure/attachment/102599/flower.bmp",,,,,,,,,,generic,,,,,,,b02,8u311,,generic,,,,,,"0|i309hn:",9223372036854775807,b11,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@377c353d,,,,,,,,,"2023-02-10 01:58;jdv;We need 1bpp image that customer is mentioning of getting generated from TWAIN scanner. This will give some idea about how relevant are these images to verify whether we need update our tighter checks in our BMP implementation.

Attached flower.bmp image doesn't comply with BMP specification as mentioned below:
FileSize = 21713
Width = 186
Height = 155
bitsPerPixel = 24

From the above info we expect image data size without padding to be : (width * height * (bitsPerPixel / 8)) = 86490 bytes ;;;","2023-02-10 03:13;pnarayanaswa;Mail to submitter
=============
Please share the image, to analyze the issue better.;;;","2023-02-10 05:23;pnarayanaswa;Additional information from submitter
============================
I've attached a bitonal scan of a printer test sheet. We've found this happens for any bitonal BMP image, from this or any other TWAIN scanner.

Attached image from submitter<The Scanner Image 1675710585648.bmp>
More info:

Not sure if that was in the original bug report, but the problem was introduced by this commit:

https://github.com/openjdk/jdk/commit/c70f7cad47c9be0a203079de52ffab0ce53ba965
;;;","2023-02-13 02:22;jdv;FileSize from metadata is 14, which is wrong for image with width 1698 and height 2228.
But the check added under https://github.com/openjdk/jdk/commit/c70f7cad47c9be0a203079de52ffab0ce53ba965 will not work properly if we have color palette.
Its better to avoid this check when we have color palette and bpp is less than 16 (According to https://learn.microsoft.com/en-us/windows/win32/api/wingdi/ns-wingdi-bitmapv4header it is not necessary to have color palette from 16bpp);;;","2023-02-15 05:25;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/12573
Date: 2023-02-15 13:18:31 +0000;;;","2023-02-20 23:32;dukebot;Changeset: aa10f0d3
Author:    Jayathirth D V <jdv@openjdk.org>
Date:      2023-02-21 07:30:17 +0000
URL:       https://git.openjdk.org/jdk/commit/aa10f0d3ee5d77d83950c9ed4aab11589b822ff4
;;;","2023-04-18 08:36;goetz;Fix request [11u,17u]

I backport this for parity with 11.0.20/17.0.8-oracle.
Low risk, simple fix.
Clean backport.
Test passes and fails without the fix. SAP nightly testing passed.;;;","2023-04-18 08:47;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/1263
Date: 2023-04-18 15:39:03 +0000;;;","2023-04-18 08:53;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk11u-dev/pull/1836
Date: 2023-04-18 15:48:11 +0000;;;",,,,,,,,,,,,,,,,,,,,,,
IgnoreUnrecognizedVMOptions flag causes failure in ArchiveHeapTestClass,JDK-8302117,5093715,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,rsunderbabu,rsunderbabu,rsunderbabu,2023-02-08 21:22,2023-02-15 23:18,2023-10-01 09:56,2023-02-09 21:59,21,,,,,,,,21,hotspot,,0,archive-heap,cds,sqebug,,,,,,,,,,,,,,"Test: runtime/cds/appcds/cacheObject/ArchiveHeapTestClass.java
VM flag: -XX:+IgnoreUnrecognizedVMOptions 
Product tested: JDK-21+3
OS/architecture: Generic
Reproducible: Always
Is it a Regression: No

Excerpt from Log:
java.lang.RuntimeException: 'VM option 'ArchiveHeapTestClass' is develop and is available only in debug version of VM.' missing from stdout/stderr
	at jdk.test.lib.process.OutputAnalyzer.shouldContain(OutputAnalyzer.java:221)
	at ArchiveHeapTestClass.mustContain(ArchiveHeapTestClass.java:92)
	at ArchiveHeapTestClass.mustFail(ArchiveHeapTestClass.java:97)
	at ArchiveHeapTestClass.testProductBuild(ArchiveHeapTestClass.java:177)
	at ArchiveHeapTestClass.main(ArchiveHeapTestClass.java:67)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:578)
	at com.sun.javatest.regtest.agent.MainActionHelper$AgentVMRunnable.run(MainActionHelper.java:312)
	at java.base/java.lang.Thread.run(Thread.java:1623)",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8293182,,,,,,,,,,,,,,,,,,,,,generic,,,,,,,,,,,,,,,,"0|i30b1v:",9223372036854775807,b10,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,,,"2023-02-08 23:18;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/12483
Date: 2023-02-09 07:13:05 +0000;;;","2023-02-09 21:59;dukebot;Changeset: 723433db
Author:    Ramkumar Sunderbabu <rsunderbabu@openjdk.org>
Committer: David Holmes <dholmes@openjdk.org>
Date:      2023-02-10 05:58:12 +0000
URL:       https://git.openjdk.org/jdk/commit/723433dbebc6b542dab445a89b7437149730b858
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
RISC-V: Several foreign jtreg tests fail with debug build after JDK-8301818,JDK-8302114,5093711,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,fjiang,fyang,fyang,2023-02-08 19:24,2023-07-09 19:27,2023-10-01 09:56,2023-02-12 18:03,21,,,,,,,,21,hotspot,,0,,,,,,,,,,,,,,,,,"1. Run foreign jtreg tests with fastdebug build on linux-riscv64 platform:
  $ make run-test-only TEST=""jdk_foreign"" JTREG=""TIMEOUT_FACTOR=24""

--------------------------------------------------
TEST: java/foreign/TestDowncallScope.java
TEST JDK: /home/fyang/openjdk-jdk/build/linux-riscv64-server-fastdebug/images/jdk

......

test TestDowncallScope.testDowncall(9928, ""f16_P_PSS_DP"", NON_VOID, [POINTER, STRUCT, STRUCT], [DOUBLE, POINTER]): success
test TestDowncallScope.testDowncall(9945, ""f16_P_PSS_IPI"", NON_VOID, [POINTER, STRUCT, STRUCT], [INT, POINTER, INT]): success
test TestDowncallScope.testDowncall(9962, ""f16_P_PSS_FPF"", NON_VOID, [POINTER, STRUCT, STRUCT], [FLOAT, POINTER, FLOAT]): success
test TestDowncallScope.testDowncall(9979, ""f16_P_PSS_DPD"", NON_VOID, [POINTER, STRUCT, STRUCT], [DOUBLE, POINTER, DOUBLE]): success
test TestDowncallScope.testDowncall(9996, ""f16_P_PSS_PPP"", NON_VOID, [POINTER, STRUCT, STRUCT], [POINTER, POINTER, POINTER]): success
test TestDowncallScope.testDowncall(10013, ""f16_S_SII_PI"", NON_VOID, [STRUCT, INT, INT], [POINTER, INT]): success
#
# A fatal error has been detected by the Java Runtime Environment:
#
#  Internal Error (0xe0000000), pid=464665, tid=464685
#  stop: must be a primitive array
#
# JRE version: OpenJDK Runtime Environment (21.0) (fastdebug build 21-internal-adhoc.fyang.openjdk-jdk)
# Java VM: OpenJDK 64-Bit Server VM (fastdebug 21-internal-adhoc.fyang.openjdk-jdk, mixed mode, sharing, tiered, compressed oops, compressed class ptrs, g1 gc, linux-riscv64)
# Problematic frame:
# v  ~StubRoutines::generic_arraycopy 0x0000003fa3de0df4
#
# Core dump will be written. Default location: Core dumps may be processed with ""/usr/share/apport/apport -p%p -s%s -c%c -d%d -P%P -u%u -g%g -- %E"" (or dumping to /home/fyang/openjdk-jdk/build/linux-riscv64-server-fastdebug/test-support/jtreg_test_jdk_jdk_foreign/scratch/0/core.464665)
#
# An error report file with more information is saved as:
# /home/fyang/openjdk-jdk/build/linux-riscv64-server-fastdebug/test-support/jtreg_test_jdk_jdk_foreign/scratch/0/hs_err_pid464665.log
[73.630s][warning][os] Loading hsdis library failed
#
# If you would like to submit a bug report, please visit:
#   https://bugreport.java.com/bugreport/crash.jsp
#

......

--------------------------------------------------

2. Some initial analysis:
This problem only triggers when using debug build to run foreign jtreg tests.
JDK-8301818 made following code changes in function generate_generic_copy [1]:

```
    // At this point, it is known to be a typeArray (array_tag 0x3).
 #ifdef ASSERT
     {
       BLOCK_COMMENT(""assert primitive array {"");
       Label L;
-      __ mvw(t1, Klass::_lh_array_tag_type_value << Klass::_lh_array_tag_shift);
+      __ mv(t1, Klass::_lh_array_tag_type_value << Klass::_lh_array_tag_shift);
       __ bge(lh, t1, L);
       __ stop(""must be a primitive array"");
       __ bind(L);
       BLOCK_COMMENT(""} assert primitive array done"");
    }
 #endif
```

Notably, Klass::_lh_array_tag_type_value is of type unsigned int:
```
  static const unsigned int _lh_array_tag_type_value = 0Xffffffff;
  static const int _lh_array_tag_shift         = BitsPerInt - _lh_array_tag_bits;
  static const int _lh_array_tag_bits          = 2;
```
So Klass::_lh_array_tag_type_value << Klass::_lh_array_tag_shift would be 0xc0000000 of type unsigned int.

Previously, 'mvw' function would sign-extend this value into 64-bit 0xffffffffc0000000 since we want to do 64-bit signed compare and branch with 'bge' instruction next.
```
  template<typename T, ENABLE_IF(std::is_integral<T>::value)>
  inline void mv(Register Rd, T o)                    { li(Rd, (int64_t)o); }

  inline void mvw(Register Rd, int32_t imm32)         { mv(Rd, imm32); }
```

But this is not the case when changed to use 'mv' with type unsigned int. So I think this changes the behaviour.
Simple fix would be adding an explict int32_t type conversion for this value, like:
__ mv(t1, (int32_t)(Klass::_lh_array_tag_type_value << Klass::_lh_array_tag_shift));

[1] https://github.com/openjdk/jdk/commit/c04a982eb47170f3c613617179fca012bb4d40ae",,,,,,,,,,,JDK-8311752,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8301818,,,,"2023-02-08 19:31;fyang;hs_err_pid464665.log;https://bugs.openjdk.org/secure/attachment/102592/hs_err_pid464665.log",,,,,,,,,,,,riscv,,,,,,,,,,linux,,,,,,"0|i30b0z:",9223372036854775807,b10,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,,,"2023-02-08 22:23;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/12481
Date: 2023-02-09 06:14:18 +0000;;;","2023-02-12 18:03;dukebot;Changeset: 7c233bc1
Author:    Feilong Jiang <fjiang@openjdk.org>
Committer: Fei Yang <fyang@openjdk.org>
Date:      2023-02-13 02:01:25 +0000
URL:       https://git.openjdk.org/jdk/commit/7c233bc1c88564b53ee3b46dbe7763de81ef5468
;;;","2023-05-26 07:35;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/riscv-port-jdk17u/pull/62
Date: 2023-05-26 14:27:17 +0000;;;","2023-06-19 20:39;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/1427
Date: 2023-06-13 09:43:25 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,
javax/management/remote/mandatory/notif/NotifReconnectDeadlockTest.java update,JDK-8302069,5093657,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,kevinw,kevinw,kevinw,2023-02-08 04:07,2023-02-15 23:18,2023-10-01 09:56,2023-02-10 00:34,7,8,9,,,,,,21,core-svc,,0,,,,,,,,,,,,,,,,,"NotifReconnectDeadlockTest.java has been problemlisted for a long time.  The originally reported problem (""No reconnection happened"") cannot be reproduced, although there are occasional failures when the test is run.

Those failures are more like the connection failures fixed in similar tests (e.g. JDK-8227337), where:
java.rmi.NoSuchObjectException: no such object in table
..is reported, a startup issue, before the notification work, a failure to connect:

at java.management/javax.management.remote.JMXConnectorFactory.connect(JMXConnectorFactory.java:270)
at NotifReconnectDeadlockTest.main(NotifReconnectDeadlockTest.java:88)

We should do something similar here, but not such that it affects the deadlock timing. 
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8042596,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i30aoz:",9223372036854775807,b10,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@1f101086,,,,,,,,,"2023-02-08 04:27;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/12472
Date: 2023-02-08 11:57:21 +0000;;;","2023-02-10 00:34;dukebot;Changeset: 1c7b09bc
Author:    Kevin Walls <kevinw@openjdk.org>
Date:      2023-02-10 08:32:39 +0000
URL:       https://git.openjdk.org/jdk/commit/1c7b09bc23ac37f83b9043de35b71bea7e814da5
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
[AIX] AIX build error on os_aix_ppc.cpp,JDK-8302067,5093655,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,amitkumar,amitkumar,amitkumar,2023-02-08 03:28,2023-02-15 23:17,2023-10-01 09:56,2023-02-09 01:49,21,,,,,,,,21,hotspot,,0,,,,,,,,,,,,,,,,,"Created on behalf of Varada.

After JDK-8301500, build is broken on AIX with below error. 
/home/hotspot/openjdk/jdk/src/hotspot/os_cpu/aix_ppc/os_aix_ppc.cpp:145:17: error: invalid operands to binary expression ('intptr_t' (aka 'long') and 'nullptr_t')
if (*fr->sp() == nullptr) {
~~~~~~~~~ ^ ~~~~~~~
1 error generated.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8301500,,,,,,,,,,,,,,,,ppc,,,,,,,,,,aix,,,,,,"0|i30aoj:",9223372036854775807,b10,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@11336cca,,,,,,,,,"2023-02-08 22:20;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/12482
Date: 2023-02-09 06:14:55 +0000;;;","2023-02-09 01:49;dukebot;Changeset: 916374d7
Author:    Varada M <mvarada2000@gmail.com>
Committer: Thomas Stuefe <stuefe@openjdk.org>
Date:      2023-02-09 09:47:34 +0000
URL:       https://git.openjdk.org/jdk/commit/916374d766561c6433c047129586c222db16727f
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Counter _number_of_nmethods_with_dependencies should be atomic.,JDK-8302066,5093650,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,rehn,rehn,rehn,2023-02-08 03:20,2023-02-15 23:17,2023-10-01 09:56,2023-02-09 10:40,21,,,,,,,,21,hotspot,,0,,,,,,,,,,,,,,,,,"We increment this counter when holding CodeCache, but loads are holding Compile_lock.
Lets just make it atomic so we don't need to reason about if there is some race here.
Also we are trying to avoid 'dirty' reads in the code base. (since in theory it is subject to things like word-tearing)",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i30anf:",9223372036854775807,b10,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,,,"2023-02-08 03:55;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/12470
Date: 2023-02-08 11:48:13 +0000;;;","2023-02-09 10:40;dukebot;Changeset: 77ead449
Author:    Robbin Ehn <rehn@openjdk.org>
Date:      2023-02-09 18:39:45 +0000
URL:       https://git.openjdk.org/jdk/commit/77ead449e494f4dae147144dbcc978bb107e2817
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
[AIX] Safefetch fails for bad_addressN and bad_address32,JDK-8302043,5093626,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,amitkumar,amitkumar,amitkumar,2023-02-07 22:54,2023-02-15 23:17,2023-10-01 09:56,2023-02-09 01:38,,,,,,,,,21,hotspot,,0,,,,,,,,,,,,,,,,,"This issue is being created on behalf of Varada.

AIX could read the value at the address even at 0. Whereas on other platforms they give a segmentation fault. The test_safefetch.cpp takes bad_addressN and bad_address32 as 5120 thus handling safefetch fails. This is solved by setting bad_addressN and bad_address32 to -1 for AIX",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,ppc,,,,,,,,,,aix,,,,,,"0|i30ai3:",9223372036854775807,b10,,,,,,,,,,,"2023-02-07 23:35;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/12468
Date: 2023-02-08 07:30:15 +0000;;;","2023-02-09 01:38;dukebot;Changeset: a4039e30
Author:    Varada M <mvarada2000@gmail.com>
Committer: Thomas Stuefe <stuefe@openjdk.org>
Date:      2023-02-09 09:36:40 +0000
URL:       https://git.openjdk.org/jdk/commit/a4039e30e8ca85749e6a893ad83e6329471522c6
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
InlineTree should consult replay file in release build,JDK-8302004,5093582,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,xliu,xliu,xliu,2023-02-07 13:11,2023-03-28 02:56,2023-10-01 09:56,2023-02-10 05:40,20,21,,,,,,,21,hotspot,,0,ci-replay,oracle-triage-11,oracle-triage-17,oracle-triage-21,,,,,,,,,,,,,"JDK-8292561 changed JVM option ReplayCompiles from debug to product.  It effectively unlocks the feature ReplayCompiles in release build. 

Currently, InlineTree::should_inline() and InlineTree::should_not_inline() only read from replay files without the macro guard PRODUCT.  That's to say, HotSpot can't playback the exact inlining decisions from replay files in release build. 

I think we should build the logic unconditionally. More discussion are in JDK-8292561
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8292561,,,,,,,,,,,,,,,,generic,,,,,,,,20,,generic,,,,,,"0|i30a8b:",9223372036854775807,b10,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2023-02-07 14:53;dlong;ILW = incorrect inlining replay; product builds; no workaround = MMH = P3;;;","2023-02-09 06:33;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/12492
Date: 2023-02-09 14:25:50 +0000;;;","2023-02-10 05:40;dukebot;Changeset: 5830c03e
Author:    Matthijs Bijman <mbijman@amazon.com>
Committer: Paul Hohensee <phh@openjdk.org>
Date:      2023-02-10 13:38:42 +0000
URL:       https://git.openjdk.org/jdk/commit/5830c03e531f2c84c31a61cd49c40bb5e549a91d
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,
[11u] A subtle race condition during jdk11u build,JDK-8302000,5093578,Bug,Resolved,JDK,JDK,software,duke,,,P2,Fixed,ksrini,ksrini,ksrini,2023-02-07 11:04,2023-03-07 12:27,2023-10-01 09:56,2023-03-03 09:59,11,,,,,,,,11.0.19,infrastructure,,0,jdk11u-fix-request,jdk11u-fix-yes,noreg-build,,,,,,,,,,,,,,"A recent change to jdk11 has exposed a very subtle race condition during a jdk11u build. 

The fix for JDK-8257679, adds this changeset.
https://github.com/openjdk/jdk11u/commit/40f4fc2da8532252a1660c7f082eb19046f4bc70
	$(call ExecuteWithLog, $(SUPPORT_OUTPUTDIR)/gensrc/java.base/_charset_decoder, \
		$(TOOL_SPP) < $< >$@.tmp \

The problem above is two fold:
The Spp tool reads from stdin and writes to stdout and is missing a set of parenthesis.

The parenthesis is required otherwise a subtle race condition in the shell  will clobber the output,  resulting in mysterious build failures. This is consistently reproducible on  Windows and if the top-level make is invoked via Python .

So why is the missing parenthesis a problem ? 
Please read this comment very carefully.
https://github.com/openjdk/jdk11u/blob/master/make/common/MakeBase.gmk#L1060

Adding the ExcecuteWithLog will result in a pseudo code as follows:

Spp < in-file > out-file > (some.log) (blah)
Notice the second redirection to stdout in the above.

Now adding a parenthesis will create a subshell and redirect the output (if any) from the tool.
(Spp < in-file > out-file) > (some.log) (blah)

There are couple of ways of solving this:
1. Undo the change introduced by JDK-8257679
2. Add parenthesis to all those call-sites of Spp with ExecuteWithLog
3. Back-port the change for Spp and fix the call-sites to use -i and -o arguments instead of reading stdin and writing to stdout.
https://github.com/openjdk/jdk/blob/master/make/jdk/src/classes/build/tools/spp/Spp.java

IMHO #3 is the way to go, when the legacy Spp shell script was converted to Java, it should have eliminated the need for stdin/stdout operations and replaced with input/output files.


",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8218460,JDK-8257679,,,,,,,,,,,,,,,,,,,,generic,,,,,,,,,,generic,,,,,,"0|i30a7f:",9223372036854775807,b05,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@429c566,,,,,,,,,"2023-02-16 08:04;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk11u/pull/67
Date: 2023-02-16 15:49:11 +0000;;;","2023-02-18 18:54;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk11u/pull/68
Date: 2023-02-19 02:49:48 +0000;;;","2023-02-24 09:10;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk11u-dev/pull/1774
Date: 2023-02-24 17:04:39 +0000;;;","2023-03-01 10:48;ksrini;Fix Request 11u
 
Back-porting this patch eliminates a very subtle race condition while building OpenJDK on Windows.

The risk is low. This change affects only Spp.java, changing how it performs its IO. Rest of the changes 
are minimal and simple, mostly affecting build logic. Most of these changes are imported from 
JDK-8215445. Clearly JDK-8215445 is a very large commit and majority of the changes are not required, for the
immediate problem being solved. Thus only a few pertinent fixes have been transported to jdk11u base from JDK-8215445.

JDK-8218460 is required, in order to adjust the test pattern generators to Spp.java's modifications.
Please note: the test pattern generators are not invoked by any build or testing logic. Typically the 
SQE Dev team manually execute these shell scripts to generate the test patterns from templates, 
as needed. This patch applies in its entirety but not cleanly.

Finally, a small improvement to Spp.java has been extracted from JDK-8223347, to update Spp.java 
and make it identical to the upstream version.

I have personally run tier1 and tier2 regressions on Windows and Linux, additionally I tested manually 
the test pattern generators described in JDK-8218460.;;;","2023-03-03 09:59;dukebot;Changeset: 915ac570
Author:    Kumar Srinivasan <ksrini@openjdk.org>
Date:      2023-03-03 17:57:46 +0000
URL:       https://git.openjdk.org/jdk11u-dev/commit/915ac570b54aa820adf474ab5046e17007601f4e
;;;","2023-03-07 12:23;dukebot;Changeset: 915ac570
Author:    Kumar Srinivasan <ksrini@openjdk.org>
Date:      2023-03-03 17:57:46 +0000
URL:       https://git.openjdk.org/jdk11u/commit/915ac570b54aa820adf474ab5046e17007601f4e
;;;",,,,,,,,,,,,,,,,,,,,,,,,,
Update HarfBuzz to 7.0.1,JDK-8301998,5093576,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,honkar,vdyakov,vdyakov,2023-02-07 09:17,2023-08-02 13:04,2023-10-01 09:56,2023-03-14 13:20,11,17,20,21,,,,,21,client-libs,,0,11-bp,17-bp,3rdparty,cssn23_03_02,harfbuzz,jdk11u-fix-request,jdk11u-fix-yes,jdk17u-fix-request,jdk17u-fix-yes,jdk20u-fix-request,jdk20u-fix-SQE-ok-next,jdk20u-fix-yes,noreg-other,sn_137,sn_138,sn_139,"The harfbuzz OpenType font layout engine was last updated to 4.4.1 in JDK 20
Since then it has had numerous updates and we should upgrade JDK to the latest",,,,,,,,,,,JDK-8304992,JDK-8307014,JDK-8307829,JDK-8306727,JDK-8304424,JDK-8305021,JDK-8305588,,,,,,,,,JDK-8302084,JDK-8215065,,,JDK-8289853,,,,,,JDK-8304321,JDK-8307301,JDK-8304434,JDK-8313643,JDK-8304291,JDK-8304295,JDK-8261169,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i30a6z:",9223372036854775807,b06,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4b09ce31,,,,,,,,,"2023-02-22 10:43;honkar;New version of harfbuzz includes patches for build and bug fixes, hence harfbuzz update version changed to v7.0.1.;;;","2023-03-03 11:47;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/12864
Date: 2023-03-03 19:36:29 +0000;;;","2023-03-06 12:22;honkar;Testing in-progress with updated changes.;;;","2023-03-07 15:38;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/12913
Date: 2023-03-07 23:31:16 +0000;;;","2023-03-14 13:20;dukebot;Changeset: f5c8b68c
Author:    Harshitha Onkar <honkar@openjdk.org>
Date:      2023-03-14 20:18:44 +0000
URL:       https://git.openjdk.org/jdk/commit/f5c8b68c1c4d8bdbf4838aafdcd657fc104420d8
;;;","2023-03-17 09:46;honkar;Fix request (20u)

Clean backport. This PR consists of harfbuzz library upgrade changes from v4.4.1 to v7.0.1
Review: https://github.com/openjdk/jdk20u/pull/20;;;","2023-03-17 10:12;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk20u/pull/20
Date: 2023-03-17 16:33:43 +0000;;;","2023-04-18 09:30;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/1264
Date: 2023-04-18 16:07:37 +0000;;;","2023-04-18 23:03;goetz;Fix request [17u]

I backport this for parity with 17.0.8-oracle.
One of the required updates of external libs.
Clean backport, but I included a build fix in the patch that had to be resolved.
SAP nightly testing passed.;;;","2023-05-05 10:17;goetz;Fix request [11u]

I backport this for parity with 11.0.20-oracle.
One of the required updates of external libs.
Backport from 17, but again I had to resolve the build file. 
SAP nightly testing passed.;;;","2023-05-08 00:28;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk11u-dev/pull/1864
Date: 2023-05-08 07:21:27 +0000;;;",,,,,,,,,,,,,,,,,,,,
new javax.swing.text.DefaultCaret().setBlinkRate(N) results in NPE,JDK-8301989,5093563,Bug,Resolved,JDK,JDK,software,duke,,,P2,Fixed,kizune,dbessono,dbessono,2023-02-07 07:07,2023-02-16 00:35,2023-10-01 09:56,2023-02-08 15:57,20,20.0.1,21,,,,,,20,client-libs,,0,conformance,jdk20-fix-request,jdk20-fix-yes,regression,sn_137,tck-red-20,,,,,,,,,,,"Execution of the following code:

        new DefaultCaret().setBlinkRate(100);

leads to

Exception in thread ""main"" java.lang.NullPointerException: Cannot invoke ""javax.swing.text.JTextComponent.isEditable()"" because ""this.component"" is null
	at java.desktop/javax.swing.text.DefaultCaret.setBlinkRate(DefaultCaret.java:1053)",,,,,,,,,,,JDK-8302633,JDK-8302134,JDK-8302629,,,,,,,,,,,,,,,,,,,,,,,JCK-7318725,JDK-8299077,,,,,,,,"2023-02-10 01:53;dtm;JTextAreaTests.jtr;https://bugs.openjdk.org/secure/attachment/102612/JTextAreaTests.jtr",,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i30a43:",9223372036854775807,b36,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@568a5b31,,,,,,,,,"2023-02-07 11:26;kizune;While trying to implement a logic of tracking the editable state of the component we neglected the check that the component is already assigned.;;;","2023-02-07 14:55;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk20/pull/122
Date: 2023-02-07 22:49:55 +0000;;;","2023-02-07 15:21;kizune;Fix Request

Reason:
This is a fix for regression that potentially can cause client applications to crash with the new JDK. Regression was introduced by the fix for JDK-4512626. The change is minimal and non-destructive.

Risk:
low

Testing:
new automated regression test test/jdk/javax/swing/text/DefaultCaret/SetCaretRateTest.java is created to track this issue.;;;","2023-02-07 22:10;prr;I am unhappy with the justification, ""minimal and non-destrcutive""
Minimal means small but a small change can be really high risk
""non-destructive"" is just an uninterpretable comment. I have zero idea what you mean.
And ""crash"" ? you mean the VM exits ? oh, you mean an NPE .. that is NOT a crash.

So start over and write a new justification with clear explanation and details and no generalisation.;;;","2023-02-08 04:25;kizune;Fix Request 

Reason: 
While implementing fix for the bug JDK-4512626 the new code was added that slightly alters the behaviour of the default Caret implementation for Swing text based components. The fix was contained within the javax.swing.text.DefaultCaret class and employed analyzing of the editability status of the component to which the caret is assigned. In doing so the new code fails to take into account possibility that the caret can be initialized and configured separately from the component and assigned to the component later. Because of that the method can be called from a null which causes a NullPointerException. If such code exists in the client application that can cause a slew of side effects ranging from missing UI components to abnormal termination of the application. In addition this behaviour is undocumented and as such was deemed as a JCK certification failure by the JCK team.

Giving all that with heavy hart must I request to amend the code on such a late stage of the development. The idea of the proposed fix is simple: we should ensure that there is a text component associated with the Caret before calling methods from it. In case when the component is not yet assigned we should safely store the provided value in a way that will preserve the Caret configuration so when caret is assigned to the component it will not loose customization of the blink rate made by the user.

The nature of the fix makes code safer and the fix in question will not bring any additional instability to the amended class. Fix was tested using both automated regression tests for the components affected by the change and with manual tests that were created to simulate various scenarios of the DefaultCaret use on different text components (JTextArea, JTextField, JTextPane).

Risk: 
Low 

Testing: 
New automated regression test test/jdk/javax/swing/text/DefaultCaret/SetCaretRateTest.java is created to prevent the potential unnoticed reappearance of the problem.
;;;","2023-02-08 15:57;dukebot;Changeset: e81f20b5
Author:    Alexander Zuev <kizune@openjdk.org>
Date:      2023-02-08 23:55:58 +0000
URL:       https://git.openjdk.org/jdk20/commit/e81f20b50405dc02963c8bf549000c60e78152d8
;;;",,,,,,,,,,,,,,,,,,,,,,,,,
VerifyLiveClosure::verify_liveness asserts on bad pointers outside heap,JDK-8301988,5093562,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,tschatzl,tschatzl,tschatzl,2023-02-07 06:36,2023-02-15 23:17,2023-10-01 09:56,2023-02-09 12:10,21,,,,,,,,21,hotspot,,0,gc-g1,gc-pending-review,,,,,,,,,,,,,,,"G1 uses this closure to verify object references. It has the following issues:

- it uses decode_not_null which will assert if the given oop address is not in the heap, making the remainder of the verification useless in that case
- if the referenced object is not in the heap, we try to get its heap region too when printing, which also fails some assertions
- in the innermost if lots of code is duplicated in both cases

Fix these issues.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i30a3v:",9223372036854775807,b10,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6b00f96c,,,,,,,,,"2023-02-07 07:10;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/12456
Date: 2023-02-07 15:03:36 +0000;;;","2023-02-09 12:10;dukebot;Changeset: 0aeebee2
Author:    Thomas Schatzl <tschatzl@openjdk.org>
Date:      2023-02-09 20:09:13 +0000
URL:       https://git.openjdk.org/jdk/commit/0aeebee284effe9abd0ed3cf2845430b40bb53bd
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Compile command in compiler.loopopts.TestRemoveEmptyCountedLoop does not work,JDK-8301959,5093533,Bug,Resolved,JDK,JDK,software,duke,,,P5,Fixed,tholenstein,chagedorn,chagedorn,2023-02-07 01:23,2023-06-20 13:42,2023-10-01 09:56,2023-02-16 05:53,17,21,,,,,,,21,hotspot,,0,jdk11u-fix-request,jdk11u-fix-yes,jdk17u-fix-request,jdk17u-fix-yes,noreg-self,oracle-triage-21,,,,,,,,,,,"This test uses the asterisk operator in CompileOnly which is not supported:
 -XX:CompileOnly=compiler.loopopts.TestRemoveEmptyCountedLoop::test*

We should use CompileCommand=compileonly instead to use the asterisk operator.",,,,,,,,,,,JDK-8310208,JDK-8305960,JDK-8306252,JDK-8310482,,,,,,,,,,,,,,,,,,,,,,JDK-8289748,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i309xf:",9223372036854775807,b11,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2023-02-07 01:24;chagedorn;ILW = Test does not compile due to wrong CompileOnly flag, single test, no workaround = LLH = P5;;;","2023-02-15 08:14;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/12575
Date: 2023-02-15 16:08:24 +0000;;;","2023-02-16 05:53;dukebot;Changeset: 9b911b49
Author:    Tobias Holenstein <tholenstein@openjdk.org>
Date:      2023-02-16 13:51:11 +0000
URL:       https://git.openjdk.org/jdk/commit/9b911b492f56fbf94682535a1d20dde07c62940f
;;;","2023-06-14 01:33;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/1436
Date: 2023-06-14 08:25:58 +0000;;;","2023-06-15 04:44;goetz;Fix request [11u.17u]

I backport this for parity with 11.0.20/17.0.8-oracle.
Follow up to JDK-8289748, included in that backport.
SAP nightly testing passed.;;;","2023-06-16 05:59;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk11u-dev/pull/1951
Date: 2023-06-16 12:50:31 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,,
java/net/httpclient/DigestEchoClientSSL.java fail with -Xcomp,JDK-8301942,5093514,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,sguoyun,sguoyun,sguoyun,2023-02-06 22:59,2023-02-22 12:26,2023-10-01 09:56,2023-02-13 04:52,,,,,,,,,21,core-libs,,0,,,,,,,,,,,,,,,,,"This test failed with VM_OPTIONS=-Xcomp and CONF=fastdebug
on the LOONGARCH64 architecture.

java.lang.AssertionError: WARNING: tracker for HttpClientImpl(1) has outstanding operations:
    Pending HTTP Requests: 0
    Pending HTTP/1.1 operations: 0
    Pending HTTP/2 streams: 0
    Pending WebSocket operations: 0
    Pending TCP connections: 1
    Total pending operations: 0
    Facade referenced: false
    Selector alive: true
Found 0 client still active, with 0 operations still pending out of 1 tracked clients.
    at ReferenceTracker.check(ReferenceTracker.java:201)
    at ReferenceTracker.checkShutdown(ReferenceTracker.java:270)
    at DigestEchoClient.testBasic(DigestEchoClient.java:516)
    at DigestEchoClient.main(DigestEchoClient.java:283)
    at DigestEchoClientSSL.main(DigestEchoClientSSL.java:51)
    at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
    at java.base/java.lang.reflect.Method.invoke(Method.java:578)
    at com.sun.javatest.regtest.agent.MainWrapper$MainThread.run(MainWrapper.java:125)
    at java.base/java.lang.Thread.run(Thread.java:1589)

JavaTest Message: Test threw exception: java.lang.AssertionError: WARNING: tracker for HttpClientImpl(1) has outstanding operations:
    Pending HTTP Requests: 0
    Pending HTTP/1.1 operations: 0
    Pending HTTP/2 streams: 0
    Pending WebSocket operations: 0
    Pending TCP connections: 1
    Total pending operations: 0
    Facade referenced: false
    Selector alive: true
Found 0 client still active, with 0 operations still pending out of 1 tracked clients.
JavaTest Message: shutting down test

STATUS:Failed.`main' threw exception: java.lang.AssertionError: WARNING: tracker for HttpClientImpl(1) has outstanding operations: Pending HTTP Requests: 0 Pending HTTP/1.1 operations: 0 Pending HTTP/2 streams: 0 Pending WebSocket operations: 0 Pending TCP connections: 1 Total pending operations: 0 Facade referenced: false Selector alive: true Found 0 client still active, with 0 operations still pending out of 1 tracked clients.
----------rerun:(44/11300)*----------",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,other,,,,,,,,,,linux,,,,,,"0|i309t7:",9223372036854775807,b10,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@446e124a,,,,,,,,,"2023-02-07 00:01;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/12449
Date: 2023-02-07 07:57:04 +0000;;;","2023-02-13 04:52;dukebot;Changeset: df93880e
Author:    sunguoyun <sunguoyun@loongson.cn>
Committer: Daniel Fuchs <dfuchs@openjdk.org>
Date:      2023-02-13 12:50:28 +0000
URL:       https://git.openjdk.org/jdk/commit/df93880efd60804118a1578e6da2a2291e8abae1
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
[lworld] Value class APIs should have annotation for PreviewFeature,JDK-8301899,5093470,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,rriggs,rriggs,rriggs,2023-02-06 14:22,2023-02-07 12:56,2023-10-01 09:56,2023-02-07 12:56,,,,,,,,,repo-valhalla,core-libs,,0,,,,,,,,,,,,,,,,,"The value class specific APIs should be annotated with \@PrevewFeature.
For example,

\@PreviewFeature(feature = PreviewFeature.Feature.VALUE_OBJECTS)

The tests using those APIs will need to add '@EnablePreview'.
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8301720,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i309jf:",9223372036854775807,,,,,,,,,,,,"2023-02-07 09:24;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/valhalla/pull/823
Date: 2023-02-07 17:15:53 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
[backout] Revert addition of PreviewFeature for Value classes,JDK-8301896,5093467,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,rriggs,rriggs,rriggs,2023-02-06 14:00,2023-02-06 15:17,2023-10-01 09:56,2023-02-06 15:17,repo-valhalla,,,,,,,,repo-valhalla,core-libs,,0,,,,,,,,,,,,,,,,,"Backup incomplete addition of PreviewFeature Value classes.
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8301720,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i309ir:",9223372036854775807,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4c088d55,,,,,,,,,"2023-02-06 14:20;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/valhalla/pull/821
Date: 2023-02-06 22:02:53 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Crash in DumpTimeClassInfo::add_verification_constraint,JDK-8301876,5093444,Bug,Closed,JDK,JDK,software,duke,,,P2,Fixed,iklam,ecaspole,ecaspole,2023-02-06 07:07,2023-06-29 14:33,2023-10-01 09:56,2023-02-08 20:55,20,21,,,,,,,21,hotspot,,0,cds,jdk20-defer-request,jdk20-defer-yes,jdk20u-fix-request,jdk20u-fix-SQE-ok,jdk20u-fix-yes,regression,,,,,,,,,,"This happens in pre-21-b9  builds in our startup perf tests, this runs on linux-x64.

#
# A fatal error has been detected by the Java Runtime Environment:
#
#  SIGSEGV (0xb) at pc=0x00007f677259f39e, pid=736196, tid=736217
#
# JRE version: Java(TM) SE Runtime Environment (21.0+9) (build 21-ea+9-LTS-639)
# Java VM: Java HotSpot(TM) 64-Bit Server VM (21-ea+9-LTS-639, mixed mode, emulated-client, sharing, tiered, compressed oops, compressed class ptrs, g1 gc, linux-amd64)
# Problematic frame:
# V  [libjvm.so+0x70e39e]  DumpTimeClassInfo::add_verification_constraint(InstanceKlass*, Symbol*, Symbol*, bool, bool, bool)+0x2e
#
# No core dump will be written. Core dumps have been disabled. To enable core dumping, try ""ulimit -c unlimited"" before starting Java again
#
# If you would like to submit a bug report, please visit:
#   https://bugreport.java.com/bugreport/crash.jsp
#

---------------  S U M M A R Y ------------

Command Line: -XX:-UsePerfData -XX:CICompilerCount=2 -XX:TieredStopAtLevel=1 -XX:ArchiveClassesAtExit=App.jsa netty-startup-1.24-SNAPSHOT.jar

Host: AMD EPYC 7J13 64-Core Processor, 6 cores, 9G, Oracle Linux Server release 8.7
Time: Mon Feb  6 15:03:39 2023 UTC elapsed time: 1.047766 seconds (0d 0h 0m 1s)

---------------  T H R E A D  ---------------

Current thread (0x00007f676c5df750):  JavaThread ""nioEventLoopGroup-2-1"" [_thread_in_vm, id=736217, stack(0x00007f6746808000,0x00007f6746909000)]

Stack: [0x00007f6746808000,0x00007f6746909000],  sp=0x00007f67469025f0,  free space=1001k
Native frames: (J=compiled Java code, j=interpreted, Vv=VM code, C=native code)
V  [libjvm.so+0x70e39e]  DumpTimeClassInfo::add_verification_constraint(InstanceKlass*, Symbol*, Symbol*, bool, bool, bool)+0x2e
V  [libjvm.so+0xe356ed]  SystemDictionaryShared::add_verification_constraint(InstanceKlass*, Symbol*, Symbol*, bool, bool, bool)+0x7d
V  [libjvm.so+0xed182b]  VerificationType::is_reference_assignable_from(VerificationType const&, ClassVerifier*, bool, JavaThread*) const+0x16b
V  [libjvm.so+0xede191]  ClassVerifier::verify_exception_handler_table(unsigned int, char*, int&, int&, JavaThread*)+0x351
V  [libjvm.so+0xee0472]  ClassVerifier::verify_method(methodHandle const&, JavaThread*)+0x1d2
V  [libjvm.so+0xee7cfa]  ClassVerifier::verify_class(JavaThread*)+0xea
V  [libjvm.so+0xee812a]  Verifier::verify(InstanceKlass*, bool, JavaThread*)+0x32a
V  [libjvm.so+0x896e52]  InstanceKlass::link_class_impl(JavaThread*)+0x432
V  [libjvm.so+0x9a69c4]  get_class_declared_methods_helper(JNIEnv_*, _jclass*, unsigned char, bool, Klass*, JavaThread*) [clone .constprop.0]+0xd4
V  [libjvm.so+0x9a6ed2]  JVM_GetClassDeclaredConstructors+0x92
j  java.lang.Class.getDeclaredConstructors0(Z)[Ljava/lang/reflect/Constructor;+0 java.base@21-ea
j  java.lang.Class.privateGetDeclaredConstructors(Z)[Ljava/lang/reflect/Constructor;+52 java.base@21-ea
j  java.lang.Class.getConstructor0([Ljava/lang/Class;I)Ljava/lang/reflect/Constructor;+14 java.base@21-ea
j  java.lang.Class.getConstructor([Ljava/lang/Class;)Ljava/lang/reflect/Constructor;+24 java.base@21-ea
j  java.lang.reflect.Proxy$ProxyBuilder.build()Ljava/lang/reflect/Constructor;+16 java.base@21-ea
j  java.lang.reflect.Proxy.lambda$getProxyConstructor$0(Ljava/lang/ClassLoader;Ljdk/internal/loader/AbstractClassLoaderValue$Sub;)Ljava/lang/reflect/Constructor;+15 java.base@21-ea
j  java.lang.reflect.Proxy$$Lambda$76+0x0000000801076708.apply(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;+8 java.base@21-ea
j  jdk.internal.loader.AbstractClassLoaderValue$Memoizer.get()Ljava/lang/Object;+75 java.base@21-ea
j  jdk.internal.loader.AbstractClassLoaderValue.computeIfAbsent(Ljava/lang/ClassLoader;Ljava/util/function/BiFunction;)Ljava/lang/Object;+63 java.base@21-ea
j  java.lang.reflect.Proxy.getProxyConstructor(Ljava/lang/Class;Ljava/lang/ClassLoader;[Ljava/lang/Class;)Ljava/lang/reflect/Constructor;+40 java.base@21-ea
j  java.lang.reflect.Proxy.newProxyInstance(Ljava/lang/ClassLoader;[Ljava/lang/Class;Ljava/lang/reflect/InvocationHandler;)Ljava/lang/Object;+22 java.base@21-ea
j  sun.reflect.annotation.AnnotationParser$1.run()Ljava/lang/annotation/Annotation;+33 java.base@21-ea
J 1269 c1 sun.reflect.annotation.AnnotationParser.parseAnnotation2(Ljava/nio/ByteBuffer;Ljdk/internal/reflect/ConstantPool;Ljava/lang/Class;Z[Ljava/lang/Class;)Ljava/lang/annotation/Annotation; java.base@21-ea (275 bytes) @ 0x00007f67656b24ac [0x00007f67656b1ea0+0x000000000000060c]
",,,,,,,,,,,JDK-8303348,JDK-8303268,JDK-8302110,,,,,,,,,,,,,,,,,,,,,,,JDK-8264735,,,,,JDK-8290739,,,,,,,,,,,,,,,,generic,,,,,,,b09,20,,generic,,,,,,"0|i309dn:",9223372036854775807,b10,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,Verified,,"2023-02-06 23:26;thartmann;As [~rehn] pointed out in JDK-8299074, it seems that the fix triggers more handshakes during startup, so it might well be that it just reveals an existing race condition.;;;","2023-02-06 23:46;thartmann;When trying to reproduce, I'm hitting an assert right away:

# A fatal error has been detected by the Java Runtime Environment:
#
#  Internal Error (/oracle/jdk/open/src/hotspot/share/cds/dumpTimeClassInfo.cpp:202), pid=404999, tid=405026
#  assert(p != nullptr) failed: we must not see any non-shared InstanceKlass* that's not stored with SystemDictionaryShared::init_dumptime_info
#
# JRE version: Java(TM) SE Runtime Environment (21.0) (fastdebug build 21-internal-LTS-2023-02-07-0730119.tobias...)
# Java VM: Java HotSpot(TM) 64-Bit Server VM (fastdebug 21-internal-LTS-2023-02-07-0730119.tobias..., mixed mode, emulated-client, sharing, tiered, compressed oops, compressed class ptrs, g1 gc, linux-amd64)
# Problematic frame:
# V  [libjvm.so+0xcec397]  DumpTimeSharedClassTable::get_info(InstanceKlass*)+0x157

Stack: [0x00007f50e98bd000,0x00007f50e99be000],  sp=0x00007f50e99b7540,  free space=1001k
Native frames: (J=compiled Java code, j=interpreted, Vv=VM code, C=native code)
V  [libjvm.so+0xcec397]  DumpTimeSharedClassTable::get_info(InstanceKlass*)+0x157  (dumpTimeClassInfo.cpp:202)
V  [libjvm.so+0x1a3cdd4]  SystemDictionaryShared::get_info(InstanceKlass*)+0x54  (systemDictionaryShared.cpp:192)
V  [libjvm.so+0x1a3f0e8]  SystemDictionaryShared::add_verification_constraint(InstanceKlass*, Symbol*, Symbol*, bool, bool, bool)+0x48  (systemDictionaryShared.cpp:699)
V  [libjvm.so+0x1b42c9a]  VerificationType::is_reference_assignable_from(VerificationType const&, ClassVerifier*, bool, JavaThread*) const+0x2da  (verificationType.cpp:113)
V  [libjvm.so+0x1b5176c]  ClassVerifier::verify_exception_handler_table(unsigned int, char*, int&, int&, JavaThread*)+0x25c  (verifier.cpp:1895)
V  [libjvm.so+0x1b53545]  ClassVerifier::verify_method(methodHandle const&, JavaThread*)+0x205  (verifier.cpp:733)
V  [libjvm.so+0x1b59893]  ClassVerifier::verify_class(JavaThread*)+0x283  (verifier.cpp:642)
V  [libjvm.so+0x1b5a3a7]  Verifier::verify(InstanceKlass*, bool, JavaThread*)+0x617  (verifier.cpp:198)
V  [libjvm.so+0x100a1c4]  InstanceKlass::link_class_impl(JavaThread*)+0x1f4  (instanceKlass.cpp:752);;;","2023-02-07 00:00;thartmann;[~ccheung], how did you narrow this down to JDK-8299074? I can also reproduce the assert with JDK 21 b5, which does not include the fix for JDK-8299074:

# A fatal error has been detected by the Java Runtime Environment:
#
#  Internal Error (/workspace/open/src/hotspot/share/cds/dumpTimeClassInfo.cpp:202), pid=413119, tid=413146
#  assert(p != __null) failed: we must not see any non-shared InstanceKlass* that's not stored with SystemDictionaryShared::init_dumptime_info
#
# JRE version: Java(TM) SE Runtime Environment (21.0+5) (fastdebug build 21-ea+5-LTS-271)
;;;","2023-02-07 00:57;thartmann;I narrowed it down to JDK 20 b09, this is a regression from JDK-8290739.;;;","2023-02-07 10:47;iklam;The class that causes the crash is a generated proxy class whose name starts with ""jdk/proxy2/$Proxy"". It gets removed from the _dumptime_table after the dynamic dump has finished. However, before the VM exits, there's a brief period where some Java code might be executed which tries to use the _dumptime_table.

The fix is to avoid removing such entries from the table:

@@ -1449,11 +1453,11 @@ class CloneDumpTimeClassTable: public StackObj {
     assert(_cloned_table != nullptr, ""_cloned_table is nullptr"");
   }
   void do_entry(InstanceKlass* k, DumpTimeClassInfo& info) {
-    if (!info.is_excluded()) {
       bool created;
       _cloned_table->put_if_absent(k, info, &created);
       assert(created, ""must be"");
-    }
   }
 };
 
The problem probably predates JDK-8290739, but this changeset probably made the crash more likely.
;;;","2023-02-07 11:14;mwthomps;ILW=HMM=P2;;;","2023-02-07 17:07;iklam;I can confirm that the crash happens easily in JDK 20-b09 (the first build with JDK-8290739) but not in b08

x=1; while b09/jdk-20/fastdebug/bin/java -XX:-UsePerfData -XX:CICompilerCount=2 -XX:TieredStopAtLevel=1 -XX:ArchiveClassesAtExit=App.jsa -jar netty-startup-1.24-SNAPSHOT.jar; do x=$(expr $x + 1); echo; echo ======================$x; echo; done

The above crashes in the first few iterations:

vs

x=1; while b08/jdk-20/fastdebug/bin/java -XX:-UsePerfData -XX:CICompilerCount=2 -XX:TieredStopAtLevel=1 -XX:ArchiveClassesAtExit=App.jsa -jar netty-startup-1.24-SNAPSHOT.jar; do x=$(expr $x + 1); echo; echo ======================$x; echo; done

The above doesn't crash after 100 iterations;;;","2023-02-07 17:22;iklam;JDK 20 deferral justification:

With product build:

Latest JDK 20 product build (b34) - does not crash (1000 runs)
JDK 21 product build (b05) - does not crash (1000 runs)
JDK 21 product build (b06) - crashes almost immediately - this is first promoted build with JDK-8299074

Because JDK 20 RDP2 is ending soon, and this bug doesn't seem to affect the product build of JDK 20, I think it's more prudent to fix this bug first in JDK 21, and then backport to JDK 20.1 after more careful testing.;;;","2023-02-07 23:32;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/12467
Date: 2023-02-08 07:26:13 +0000;;;","2023-02-08 16:20;kvn;JDK 20 deferral request approved.

Yes, let backport it into update release.
;;;","2023-02-08 20:53;iklam;Fix was pushed while main bug was targeted to 20. Reset the main bug to fixed in 21 and copied the Robo Duke entry here.;;;","2023-02-08 20:53;iklam;Changeset: dc6d52ce
Author: Ioi Lam <iklam@openjdk.org>
Date: 2023-02-09 00:30:07 +0000
URL: https://git.openjdk.org/jdk/commit/dc6d52cea54eb8c8793dd0f46002c28ec43d9d2c;;;","2023-02-09 13:50;iklam;Fix request for 20u:
Applies cleanly and tests are passed.;;;","2023-02-27 13:04;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk20u/pull/9
Date: 2023-02-27 20:16:53 +0000;;;",,,,,,,,,,,,,,,,,
"[lworld] BlackholeTest triggers assert ""Should have been buffered""",JDK-8301867,5093435,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,thartmann,thartmann,thartmann,2023-02-06 05:42,2023-02-06 06:01,2023-10-01 09:56,2023-02-06 06:01,repo-valhalla,,,,,,,,repo-valhalla,hotspot,,0,c2,lworld,regression,,,,,,,,,,,,,,"# A fatal error has been detected by the Java Runtime Environment:
#
#  Internal Error (/oracle/valhalla/open/src/hotspot/share/opto/compile.cpp:2027), pid=244972, tid=244987
#  assert(false) failed: Should have been buffered
#
# JRE version: Java(TM) SE Runtime Environment (21.0) (fastdebug build 21-lworld4ea-LTS-2023-02-06-0803323.tobias...)
# Java VM: Java HotSpot(TM) 64-Bit Server VM (fastdebug 21-lworld4ea-LTS-2023-02-06-0803323.tobias..., compiled mode, compressed oops, compressed class ptrs, g1 gc, linux-amd64)
# Problematic frame:
# V  [libjvm.so+0xb32fc1]  Compile::process_inline_types(PhaseIterGVN&, bool)+0x511

Current CompileTask:
C2:  13141 3608    b        compiler.valhalla.inlinetypes.BlackholeTest::testNew (21 bytes)

Stack: [0x00007fcce9dfe000,0x00007fcce9eff000],  sp=0x00007fcce9efa0b0,  free space=1008k
Native frames: (J=compiled Java code, j=interpreted, Vv=VM code, C=native code)
V  [libjvm.so+0xb32fc1]  Compile::process_inline_types(PhaseIterGVN&, bool)+0x511  (compile.cpp:2027)
V  [libjvm.so+0xb511a9]  Compile::Optimize()+0x1919  (compile.cpp:2910)
V  [libjvm.so+0xb54989]  Compile::Compile(ciEnv*, ciMethod*, int, Options, DirectiveSet*)+0x1959  (compile.cpp:842)
V  [libjvm.so+0x94716e]  C2Compiler::compile_method(ciEnv*, ciMethod*, int, bool, DirectiveSet*)+0x51e  (c2compiler.cpp:113)
V  [libjvm.so+0xb61fcc]  CompileBroker::invoke_compiler_on_method(CompileTask*)+0xa7c  (compileBroker.cpp:2237)
V  [libjvm.so+0xb62dd8]  CompileBroker::compiler_thread_loop()+0x608  (compileBroker.cpp:1916)
V  [libjvm.so+0x10d6876]  JavaThread::thread_main_inner()+0x206  (javaThread.cpp:711)
V  [libjvm.so+0x1b25b40]  Thread::call_run()+0x100  (thread.cpp:224)
V  [libjvm.so+0x1797cc3]  thread_native_entry(Thread*)+0x103  (os_linux.cpp:739)",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i309bn:",9223372036854775807,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2023-02-06 05:57;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/valhalla/pull/820
Date: 2023-02-06 13:51:32 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
ObjectInputFilter example incorrectly calls rejectUndecidedClass,JDK-8301863,5093403,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,rriggs,webbuggrp,webbuggrp,2023-02-05 10:24,2023-02-16 00:34,2023-10-01 09:56,2023-02-08 14:11,17,19,20,,,,,,20,core-libs,,0,additional-information-received,dcsaw,doc-only,reproducer-yes,webbug,,,,,,,,,,,,"A DESCRIPTION OF THE PROBLEM :
I was trying to get my head around the FilterInThread example in JEP 415 (https://openjdk.org/jeps/415) and the JavaDoc for the ObjectInputFilter (https://docs.oracle.com/en/java/javase/17/docs/api/java.base/java/io/ObjectInputFilter.html)

For example, let's assume we have three filters. The first allow ArrayList, the second allows Integer, the third restricts arrays to not be larger than 1000.

    ObjectInputFilter allowArrayList = ObjectInputFilter.allowFilter(
            Set.of(ArrayList.class, Object.class)::contains, UNDECIDED
    );
    ObjectInputFilter allowInteger = ObjectInputFilter.allowFilter(
            Set.of(Number.class, Integer.class)::contains, UNDECIDED
    );
    ObjectInputFilter restrictLargeArrays =
ObjectInputFilter.Config.createFilter(""maxarray=1000"");

Let's say that we create a FilterInThread instance and install that as our factory. Furthermore, we set the allowArrayList as the global serial filter. When we call filterInThread.doWithSerialFilter() we pass in the allowInteger filter. Lastly, during the actual deserialization, we call setObjectInputFilter() on the ObjectInputStream with the restrictLargeArrays filter. Ideally, I would want the final filter to look like this:

rejectUndecidedClass(merge(restrictLargeArrays,merge(allowInteger,allowArrayList)))

However, in the FilterInThread example, we add the rejectUndecidedClass() wrapper around each of the steps. Thus we would get something like:

rejectUndecidedClass(merge(restrictLargeArrays,rejectUndecidedClass(merge(allowInteger,rejectUndecidedClass(allowArrayList)))))

Thus we could never allow any classes except for ArrayList.

STEPS TO FOLLOW TO REPRODUCE THE PROBLEM :
Mistake in documentation of JEP415 and Javadocs, and possibly mistake in the design that allows cascaded rejectUndecidedClass() filters

EXPECTED VERSUS ACTUAL BEHAVIOR :
EXPECTED -
It should wire the composite filters so that ArrayList is allowed.
ACTUAL -
It rejects ArrayList

---------- BEGIN SOURCE ----------

import java.io.ObjectInputFilter;
import java.util.function.BinaryOperator;

// example from JEP415
public class FilterInThread implements BinaryOperator<ObjectInputFilter> {
    private final ThreadLocal<ObjectInputFilter> filterThreadLocal =
            new ThreadLocal<>();

    // Construct a FilterInThread deserialization filter factory.
    public FilterInThread() {}

    // Returns a composite filter of the static JVM-wide filter, a thread-specific filter,
    // and the stream-specific filter.
    public ObjectInputFilter apply(ObjectInputFilter curr, ObjectInputFilter next) {
        if (curr == null) {
            // Called from the OIS constructor or perhaps OIS.setObjectInputFilter with no current filter
            var filter = filterThreadLocal.get();
            if (filter != null) {
                // Wrap the filter to reject UNDECIDED results
                filter = ObjectInputFilter.rejectUndecidedClass(filter);
            }
            if (next != null) {
                // Merge the next filter with the thread filter, if any
                // Initially this is the static JVM-wide filter passed from the OIS constructor
                // Wrap the filter to reject UNDECIDED results
                filter = ObjectInputFilter.merge(next, filter);
                filter = ObjectInputFilter.rejectUndecidedClass(filter);
            }
            return filter;
        } else {
            // Called from OIS.setObjectInputFilter with a current filter and a stream-specific filter.
            // The curr filter already incorporates the thread filter and static JVM-wide filter
            // and rejection of undecided classes
            // If there is a stream-specific filter wrap it and a filter to recheck for undecided
            if (next != null) {
                next = ObjectInputFilter.merge(next, curr);
                next = ObjectInputFilter.rejectUndecidedClass(next);
                return next;
            }
            return curr;
        }
    }

    // Applies the filter to the thread and invokes the runnable.
    public void doWithSerialFilter(ObjectInputFilter filter, Runnable runnable) {
        var prevFilter = filterThreadLocal.get();
        try {
            filterThreadLocal.set(filter);
            runnable.run();
        } finally {
            filterThreadLocal.set(prevFilter);
        }
    }
}


import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.InvalidClassException;
import java.io.ObjectInputFilter;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.io.UncheckedIOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.LinkedList;
import java.util.List;
import java.util.Set;
import java.util.stream.Collectors;
import java.util.stream.IntStream;

import org.opentest4j.AssertionFailedError;

import static org.junit.jupiter.api.Assertions.*;

public class FilterInThreadDemo {
    protected static final ThreadLocal<ObjectInputFilter> ourFilter = new ThreadLocal<>();
    protected static final FilterInThread filterInThread = new FilterInThread();
    private static final String STARS = ""*"".repeat(20);

    protected static void test(ObjectInputFilter additionalFilter,
                               boolean shouldPass) {
        try {
            filterInThread.doWithSerialFilter(
                    additionalFilter, () -> {
                        try {
                            testAll();
                        } catch (IOException e) {
                            throw new UncheckedIOException(e);
                        }
                    }
            );
            System.out.println(STARS + "" SUCCESS "" + STARS);
            assertTrue(shouldPass);
        } catch (AssertionFailedError e) {
            System.out.println(STARS + "" FAILURE "" + STARS);
            System.out.println(e);
            assertFalse(shouldPass);
        }
        System.out.println();
    }

    public static void testAll() throws IOException {
        testGood(); // good
        testGood(""hello world""); // good
        testGood(""hello"", ""world""); // good
        testGood(123); // good
        testGood(new ArrayList<>(List.of(""Hello"", ""World""))); // good
        testBad(new LinkedList<>(List.of(""Hello"", ""World""))); // bad
        testBad(List.of(""Hello"", ""World"")); // bad
        testBad(Set.of(""Hello"", ""World"")); // bad
        testGood(IntStream.range(0, 1000)
                .boxed()
                .collect(Collectors.toList())); // good
        testBad(IntStream.range(0, 1001)
                .boxed()
                .collect(Collectors.toList())); // bad
    }

    private static void testGood(Object... values) {
        assertDoesNotThrow(() -> readAndPrint(makeStream(values)));
        System.out.println();
    }

    private static void testBad(Object... values) {
        assertThrows(InvalidClassException.class, () -> readAndPrint(makeStream(values)));
        System.out.println();
    }

    private static InputStream makeStream(Object... values) throws IOException {
        System.out.println(""Making stream from "" + Arrays.toString(values)
                + "" types "" +
                Arrays.stream(values).map(Object::getClass)
                        .map(Class::getTypeName)
                        .collect(Collectors.joining("", "", ""["", ""]"")));
        ByteArrayOutputStream bout = new ByteArrayOutputStream();
        try (ObjectOutputStream out = new ObjectOutputStream(bout)) {
            for (Object value : values) {
                out.writeObject(value);
            }
            out.writeObject(null);
        }
        return new ByteArrayInputStream(bout.toByteArray());
    }

    public static void readAndPrint(InputStream is)
            throws IOException, ClassNotFoundException {
        System.out.println(""Testing ..."");
        try (ObjectInputStream in = new ObjectInputStream(is)) {
            ObjectInputFilter filter = ourFilter.get();
            if (filter != null) in.setObjectInputFilter(filter);
            Object obj;
            while ((obj = in.readObject()) != null) {
                System.out.println(""Read: "" + obj);
            }
        }
    }
}



import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;
import static org.junit.jupiter.api.Assertions.assertThrows;

public class FilterInThreadDemo1WithNoFactory extends FilterInThreadDemo {
    public static void main(String... args) {
        // expect to fail
        test(null, false);

        ourFilter.set(Filters.compositeFilter);
        // expect to pass
        test(null, true);
        ourFilter.remove();
    }
}



import java.io.ObjectInputFilter;

public class FilterInThreadDemo2WithFactory extends FilterInThreadDemo {
    public static void main(String... args) {
        ObjectInputFilter.Config.setSerialFilterFactory(filterInThread);

        // expect to fail
        test(null, false);

        ourFilter.set(Filters.compositeFilter);
        // expect to pass
        test(null, true);
        ourFilter.remove();
    }
}



import java.io.ObjectInputFilter;

public class FilterInThreadDemo3WithFactoryAndGlobalFilter extends FilterInThreadDemo {
    public static void main(String... args) {
        ObjectInputFilter.Config.setSerialFilterFactory(filterInThread);
        ObjectInputFilter.Config.setSerialFilter(Filters.allowArrayList);

        // expect to fail
        test(null, false);

        ourFilter.set(Filters.restrictLargeArrays);
        // expect to pass, but fails
        test(Filters.allowInteger, true);
        ourFilter.remove();

        ourFilter.set(Filters.compositeFilter);
        // expect to pass, but fails
        test(null, true);
        ourFilter.remove();

        ourFilter.set(Filters.limitedCompositeFilter);
        // expect to pass, but fails
        test(null, true);
        ourFilter.remove();

        // expect to pass, but fails
        test(Filters.limitedCompositeFilter, true);

        // expect to pass
        test(Filters.compositeFilter, true);
    }
}


import java.io.ObjectInputFilter;
import java.util.ArrayList;
import java.util.LinkedList;
import java.util.Set;

import static java.io.ObjectInputFilter.Status.UNDECIDED;
import static java.io.ObjectInputFilter.allowFilter;
import static java.io.ObjectInputFilter.rejectFilter;
import static java.util.Set.of;

public class Filters {
    public static final ObjectInputFilter allowArrayList =
            allowFilter(of(ArrayList.class, Object.class)::contains, UNDECIDED);
    public static final ObjectInputFilter rejectLinkedList =
            rejectFilter(LinkedList.class::equals, UNDECIDED);
    public static final ObjectInputFilter allowInteger = allowFilter(
            of(Number.class, Integer.class)::contains, UNDECIDED
    );
    public static final ObjectInputFilter restrictLargeArrays =
            ObjectInputFilter.Config.createFilter(""maxarray=1000"");
    public static final ObjectInputFilter limitedCompositeFilter =
            ObjectInputFilter.merge(allowInteger, restrictLargeArrays);
    public static final ObjectInputFilter compositeFilter =
            ObjectInputFilter.rejectUndecidedClass(
                    ObjectInputFilter.merge(allowArrayList, limitedCompositeFilter));
}


---------- END SOURCE ----------

CUSTOMER SUBMITTED WORKAROUND :
Not sure how to work around this, except that perhaps merge() could remove downstream ""rejectUndecidedClass"" filters. However, that behaviour would need to be carefully documented.

FREQUENCY : always


",,,,,,,,,,,JDK-8302628,JDK-8302133,JDK-8302632,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"2023-02-06 05:08;tongwan;FilterInThread.java;https://bugs.openjdk.org/secure/attachment/102555/FilterInThread.java","2023-02-06 05:08;tongwan;FilterInThreadDemo.java;https://bugs.openjdk.org/secure/attachment/102556/FilterInThreadDemo.java","2023-02-06 05:08;tongwan;FilterInThreadDemo1WithNoFactory.java;https://bugs.openjdk.org/secure/attachment/102557/FilterInThreadDemo1WithNoFactory.java","2023-02-06 05:08;tongwan;FilterInThreadDemo2WithFactory.java;https://bugs.openjdk.org/secure/attachment/102558/FilterInThreadDemo2WithFactory.java","2023-02-06 05:08;tongwan;FilterInThreadDemo3WithFactoryAndGlobalFilter.java;https://bugs.openjdk.org/secure/attachment/102559/FilterInThreadDemo3WithFactoryAndGlobalFilter.java","2023-02-06 05:08;tongwan;Filters.java;https://bugs.openjdk.org/secure/attachment/102560/Filters.java",,,,,,,generic,,,,,,,,,,generic,,,,,,"0|i3094j:",9223372036854775807,b35,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@7e74daa7,,,,,,,,,"2023-02-05 23:47;tongwan;The reproducer contains an unknown class, Filters.  Requested more details from the submitter.;;;","2023-02-06 05:10;tongwan;The observations on Windows 10:
JDK 17: Failed, test failed observed.
JDK 19: Failed.
JDK 20ea+23: Failed.;;;","2023-02-06 08:30;rriggs;fyi, the Filters class is included in the source provided.;;;","2023-02-06 12:12;rriggs;The suggested update to the example code is:
 *     // Returns a composite filter of the static JVM-wide filter, a thread-specific filter,
 *     // and the stream-specific filter.
 *     public ObjectInputFilter apply(ObjectInputFilter curr, ObjectInputFilter next) {
 *         if (curr == null) {
 *             // Called from the OIS constructor or perhaps OIS.setObjectInputFilter with no current filter
 *             var filter = filterThreadLocal.get();
 *             if (filter != null) {
 *                 // Merge to invoke the thread local filter and then the JVM-wide filter (if any)
 *                 filter = ObjectInputFilter.merge(filter, next);
 *                 return ObjectInputFilter.rejectUndecidedClass(filter);
 *             }
 *             return (next == null) ? null : ObjectInputFilter.rejectUndecidedClass(next);
 *         } else {
 *             // Called from OIS.setObjectInputFilter with a current filter and a stream-specific filter.
 *             // The curr filter already incorporates the thread filter and static JVM-wide filter
 *             // and rejection of undecided classes
 *             // If there is a stream-specific filter merge to invoke it and then the current filter.
 *             if (next != null) {
 *                 return ObjectInputFilter.merge(next, curr);
 *             }
 *             return curr;
 *         }
 *     }
;;;","2023-02-06 14:46;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk20/pull/121
Date: 2023-02-06 20:40:08 +0000;;;","2023-02-08 14:11;dukebot;Changeset: 6f460e48
Author:    Roger Riggs <rriggs@openjdk.org>
Date:      2023-02-08 22:09:22 +0000
URL:       https://git.openjdk.org/jdk20/commit/6f460e4885b274f01c9097f41a65c637654858ce
;;;",,,,,,,,,,,,,,,,,,,,,,,,,
Verification error when compiling switch with record patterns,JDK-8301858,5093428,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,abimpoudis,abimpoudis,abimpoudis,2023-02-06 04:33,2023-05-08 17:48,2023-10-01 09:56,2023-02-09 08:05,,,,,,,,,21,tools,,0,jdk20u-fix-request,jdk20u-fix-SQE-ok,jdk20u-fix-yes,,,,,,,,,,,,,,"Fails with verification error:

    public static int runCheckExpressionWithUnconditionalAndParams(R1 r) {
        switch (r) {
            case R1(Integer i):
                return meth_I(i);
            case R1(Object o):
                return meth_O(o);  // problematic case
        }
    }
    public static int meth_I(Integer i) { return 1; }
    public static int meth_O(Object o) { return 2;}",,,,,,,,,,,JDK-8303346,JDK-8303228,,,,,,,,,,,,,,,,,,,JDK-8305878,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i309a3:",9223372036854775807,b10,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4dca67bd,,,,,,,,,"2023-02-06 05:14;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/12438
Date: 2023-02-06 13:06:30 +0000;;;","2023-02-09 08:05;dukebot;Changeset: 3b05a94c
Author:    Aggelos Biboudis <abimpoudis@openjdk.org>
Committer: Vicente Romero <vromero@openjdk.org>
Date:      2023-02-09 16:03:34 +0000
URL:       https://git.openjdk.org/jdk/commit/3b05a94c36e5d54693694c2e9950eca42626962b
;;;","2023-02-20 00:35;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk20u/pull/6
Date: 2023-02-20 08:28:14 +0000;;;","2023-02-20 05:09;jlahoda;Fix Request

A valid code is compiled into classfile that does not pass verification. This is in an implementation of a preview feature, and it would be nice if users could evaluate the fixed version before JDK 21. This is also a per-requisite for a safe backport of JDK-8302202. Risks for non-preview features are minimal, as the changes are only in parts that are guarded by --enable-preview. Tests are passing for the backport.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,
JFR: increase checkpoint event size for stacktrace and string pool,JDK-8301842,5093412,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,evergizova,evergizova,evergizova,2023-02-06 01:50,2023-02-24 04:43,2023-10-01 09:56,2023-02-14 03:04,20,21,,,,,,,21,hotspot,,0,jdk11u-fix-request,jdk11u-fix-yes,jdk17u-fix-request,jdk17u-fix-yes,,,,,,,,,,,,,"This is a follow up to JDK-8298129.
JDK-8298129 increases checkpoint event size beyond u4 limit, but doesn't support it for stacktrace and string pools, that can exceed u4 limit.",,,,,,,,,,,JDK-8303160,JDK-8302648,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8298129,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i3096j:",9223372036854775807,b10,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@42995637,,,,,,,,,"2023-02-06 02:04;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/12432
Date: 2023-02-06 09:56:01 +0000;;;","2023-02-14 03:04;dukebot;Changeset: 7dfe75cf
Author:    Ekaterina Vergizova <evergizova@openjdk.org>
Committer: Yuri Nesterenko <yan@openjdk.org>
Date:      2023-02-14 11:02:39 +0000
URL:       https://git.openjdk.org/jdk/commit/7dfe75cf553193faf709cff6b8b2505680d7cebc
;;;","2023-02-14 11:49;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/1173
Date: 2023-02-14 19:40:49 +0000;;;","2023-02-15 06:02;evergizova;Fix Request [17u]
I'd like to backport it as a small follow up fix for JDK-8298129 which is already included in 17u.
The patch applies cleanly.
Tested with tier1 and jdk/jfr.;;;","2023-02-16 12:53;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk11u-dev/pull/1759
Date: 2023-02-16 20:46:32 +0000;;;","2023-02-22 06:42;evergizova;Fix Request [11u]
I'd like to backport it as a small follow up fix for JDK-8298129 which is already included in 11u.
The patch doesn't apply cleanly, minor modifications are described in the PR. The changes apply only to checkpoint events, that are well covered by jdk/jfr tests, so it is rather low risk.
Tested with tier1 and jdk/jfr.;;;",,,,,,,,,,,,,,,,,,,,,,,,,
InputMethodEvents are not enabled for text input controls,JDK-8301832,5093404,Bug,Resolved,JDK,JDK,software,duke,,,P2,Fixed,angorya,mfox,mfox,2023-02-05 12:49,2023-02-10 07:01,2023-10-01 09:56,2023-02-08 08:22,jfx20,,,,,,,,jfx20,javafx,,0,InputMethodEvent,noreg-hard,openjfx20-fix-request,openjfx20-fix-yes,regression,regression_8268877,sn_137,TextInputControlSkin,,,,,,,,,"Normally the IME is enabled by default on controls that accept text input. This is not working in JavaFX 20. No OnInputMethodEvent handler is being installed so when the Scene is establishing focus it’s not calling into the platform to enable InputMethodEvents. I’ve confirmed that this was working in JavaFX 19.

To reproduce open any JavaFX app that contains a TextField or TextArea and try to enter, say, Japanese text. On a Mac there's an easier test if you're using a US keyboard: press Option+e followed by e. You should see an accent followed by an accented e. If you don't see the initial accent it's because the Scene hasn't enabled the IME. I've only tested those two controls, the bug may affect others. I have confirmed this is cross-platform.


",,,,,,,,,,,JDK-8302141,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8268877,,,,"2023-02-05 12:44;mfox;IMEBug.java;https://bugs.openjdk.org/secure/attachment/102545/IMEBug.java","2023-02-06 08:52;angorya;Screenshot 2023-02-06 at 08.50.33.png;https://bugs.openjdk.org/secure/attachment/102564/Screenshot+2023-02-06+at+08.50.33.png",,,,,,,,,,,generic,,,,,,,,jfx20,,generic,,,,,,"0|i3094r:",9223372036854775807,b18,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@67282485,,,,,,,,,"2023-02-06 05:23;kcr;This might be related to the fix for JDK-8268877 which touched IME handling in TextInputControl.;;;","2023-02-06 07:09;kcr;I can confirm that this regression was introduced by the fix for JDK-8268877. If I locally revert that fix, the bug goes away.

We should consider fixing this in JavaFX 20.;;;","2023-02-06 08:53;angorya;Even with  JDK-8268877 reverted I see a problem positioning the IME popup:

(see the screenshot Screenshot 2023-02-06 at 08.50.33.png);;;","2023-02-06 08:58;kcr;Yes, the positioning does seem off, although I suspect that's an unrelated problem.;;;","2023-02-06 09:40;kcr;On Windows, there is a position problem that exactly correlates, in that the IME window is wrongly displayed in the upper-left corner of the screen in jfx20, and is positioned correctly with the fix for JDK-8268877 reverted. The problem you are seeing on mac may or may not be the same thing then. I don't see a positioning problem on my system (running macOS 13), so I can only speculate.;;;","2023-02-06 10:11;angorya;Are you testing with MonkeyTester or a different application?  I wonder if the layout is important, but in any case the incorrect positioning of the IME window is likely to be a separate issue.

I found the root cause.  When fixing the skin replacement issue, I've replaced control.setOnInputMethodTextChanged() with control.addEventHandler(InputMethodEvent.INPUT_METHOD_TEXT_CHANGED, ...)
Apparently, this is not equivalent, as the code in Scene:2242 checks for both getInputMethodRequests() and **getOnInputMethodTextChanged()**

The fix is to switch back to setOnInputMethodTextChanged() property in install().

There are no other places where this change is required (whew!);;;","2023-02-06 10:22;kcr;That's good news.

I tested with HelloTextArea and with the IMEBug program attached to this bug. I do think that whatever you are seeing with positioning is a different issue and should be looked at separately.
;;;","2023-02-06 10:29;angorya;It is definitely a different issue - the position is off with 18.0.1+10, and there are more issues with IME decorations when Alignment is other than left.  I'll either create a separate bug or find an existing (there are quite a few!).;;;","2023-02-06 11:07;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jfx/pull/1024
Date: 2023-02-06 18:45:10 +0000;;;","2023-02-06 11:22;angorya;Fix Request

Regression caused by replacing setting a control property with adding an event handler.  While almost equivalent, it broke logic in Scene which determined whether the IME should be enabled.  The fix is small and the risk, in my opinion, is fairly low.;;;","2023-02-06 11:23;angorya;Thank you [~mfox] for noticing the issue!;;;","2023-02-06 13:11;kcr;Fix request approved

Approved to go into jfx20.;;;","2023-02-08 08:22;dukebot;Changeset: abe80587
Author:    Andy Goryachev <angorya@openjdk.org>
Date:      2023-02-08 16:20:39 +0000
URL:       https://git.openjdk.org/jfx/commit/abe80587a3515bbae5ba2f3d3a65cc0614e254fb
;;;",,,,,,,,,,,,,,,,,,
BasicLookAndFeel does not need to check for null after checking for type,JDK-8301822,5093392,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,jwaters,jwaters,jwaters,2023-02-04 06:49,2023-02-15 23:17,2023-10-01 09:56,2023-02-09 09:47,17,19,20,21,,,,,21,client-libs,,0,,,,,,,,,,,,,,,,,"BasicLookAndFeel checks an instanceof in its AWTEventHelper listener class, but the result of that will always be non-null. The check should be removed.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i30923:",9223372036854775807,b10,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@568a5b31,,,,,,,,,"2023-02-04 11:19;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/12019
Date: 2023-01-16 20:30:08 +0000;;;","2023-02-09 09:47;dukebot;Changeset: 597a9a48
Author:    SWinxy <swinxythecat@gmail.com>
Committer: Julian Waters <jwaters@openjdk.org>
Date:      2023-02-09 17:46:35 +0000
URL:       https://git.openjdk.org/jdk/commit/597a9a485216f6d5b1082eebfa1029524f247e8d
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Bad caret position in error message,JDK-8301813,5093378,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,jjg,jjg,jjg,2023-02-03 13:57,2023-02-13 11:06,2023-10-01 09:56,2023-02-06 10:44,,,,,,,,,21,tools,,0,,,,,,,,,,,,,,,,,"From https://github.com/openjdk/jdk/pull/12372#discussion_r1094348012

For a block tag:

    error: no tag name after '@'
         @/
          ^
For an inline tag:

    error: no tag name after '@'
         {@/
          ^
(FWIW, @jonathan-gibbons, note that the caret positions differ: the former points to / while the latter points to @. )

",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8300914,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i308yz:",9223372036854775807,b09,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@7900061a,,,,,,,,,"2023-02-03 15:03;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/12421
Date: 2023-02-03 22:56:58 +0000;;;","2023-02-06 10:44;dukebot;Changeset: d53ade12
Author:    Jonathan Gibbons <jjg@openjdk.org>
Date:      2023-02-06 18:41:04 +0000
URL:       https://git.openjdk.org/jdk/commit/d53ade12a863cc9e9c2bf2528dd0f0f90416f779
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Bug in doctree DocCommentTester.compress,JDK-8301810,5093372,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,jjg,jjg,jjg,2023-02-03 11:33,2023-02-13 11:09,2023-10-01 09:56,2023-02-07 10:49,21,,,,,,,,21,tools,,0,noreg-self,,,,,,,,,,,,,,,,"The following code is supposed to print the beginning and end of long content in TextTree nodes.

                return (s.length() < 32)
                        ? s
                        : s.substring(0, 16) + ""..."" + s.substring(16);

Instead, it always prints all the content for long strings.  The second substring should be `s.substring(s.length() - 16)`",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8300914,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i308xn:",9223372036854775807,b09,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@7900061a,,,,,,,,,"2023-02-03 11:34;jjg;This change will break the ""golden tree"" for some tests.

If we're doing that, it would be worth improving that code to use symbolic constants, and maybe increase the supported length.;;;","2023-02-03 12:26;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/12418
Date: 2023-02-03 20:18:29 +0000;;;","2023-02-07 10:49;dukebot;Changeset: 74485a3f
Author:    Jonathan Gibbons <jjg@openjdk.org>
Date:      2023-02-07 18:48:02 +0000
URL:       https://git.openjdk.org/jdk/commit/74485a3f231695aab1f27b38f2f658a92a3fcc99
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,
TestNulls does not cover all API classes,JDK-8301806,5093367,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,jvernee,jvernee,jvernee,2023-02-03 11:11,2023-02-10 10:21,2023-10-01 09:56,2023-02-10 10:21,repo-panama,,,,,,,,,core-libs,,0,foreign-memaccess+abi,,,,,,,,,,,,,,,,"The TestNulls test does not cover the following API classes: Linker.Option, PaddingLayout, StructLayout, UnionLayout.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i308wj:",9223372036854775807,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@28ce6b78,,,,,,,,,"2023-02-10 09:22;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/panama-foreign/pull/787
Date: 2023-02-10 16:35:46 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
[BACKOUT] jdb ThreadStartRequest and ThreadDeathRequest should use SUSPEND_NONE instead of SUSPEND_ALL,JDK-8301798,5093358,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,cjplummer,cjplummer,cjplummer,2023-02-03 10:38,2023-02-08 23:41,2023-10-01 09:56,2023-02-03 14:24,21,,,,,,,,21,core-svc,,0,,,,,,,,,,,,,,,,,"There are at least 4 different JDI tests failing after this change. I'm not 100% sure of the reason for 3 of them, but they all involve I/O related issues, and seem at least partly due to the ThreadStartEvent issuing a ThreadReference.IsVirtual command, and that getting stuck. I wasn't aware of this command being issued when I made the change to use SUSPEND_NONE. So now it is being made while the app continues to run rather than while it is suspended. Also, it is possible for something like a breakpoint to happen before the new thread has been registered with jdb (since all threads are no suspended), and this has the potential to cause problems, so I think it is best to just undo this change. It had good intentions, but is not worth the hassle of the problems it is introducing for tests and jdb.

JDK-8301644 com/sun/jdi/JdbStopThreadTest.java fails after JDK-8300811
JDK-8301695 com/sun/jdi/JdbOptions.java failed with ""RuntimeException: waitForPrompt timed out after 240 seconds""
JDK-8301735 Test com/sun/jdi/RedefineG.java timing out on macos
JDK-8301795 com/sun/jdi/RedefineIntConstantToLong.java failed with ""waitForPrompt timed out"" ",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8301795,JDK-8301735,JDK-8301695,JDK-8301735,JDK-8300811,JDK-8301644,JDK-8301695,JDK-8301795,,,,,,,,,,,,,,,,,,,,,,,,,21,,,,,,,,"0|i308uj:",9223372036854775807,b09,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@3397f701,,,,,,,,,"2023-02-03 11:02;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/12416
Date: 2023-02-03 18:56:39 +0000;;;","2023-02-03 14:24;dukebot;Changeset: 3be5317b
Author:    Chris Plummer <cjplummer@openjdk.org>
Date:      2023-02-03 22:22:55 +0000
URL:       https://git.openjdk.org/jdk/commit/3be5317b592f1bda76aea5fbcbb98c6fa633401c
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Pagination control has the wrong size,JDK-8301797,5093357,Bug,Resolved,JDK,JDK,software,duke,,,P2,Fixed,angorya,kcr,kcr,2023-02-03 09:52,2023-02-10 07:01,2023-10-01 09:56,2023-02-06 08:18,jfx20,jfx21,,,,,,,jfx20,javafx,,0,openjfx20-fix-request,openjfx20-fix-yes,regression,regression_8295754,sn_137,,,,,,,,,,,,"To reproduce this run the test program attached to this issue. The Pagination control is not rendered with the correct size. It should show a pagination control with 5 buttons (for pages 1-5), but only a single button for page 1 is shown.
",,,,,,,,,,,JDK-8302140,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8301742,,,,,JDK-8295754,,,,"2023-02-03 09:52;kcr;Pagination-JavaFX_19.png;https://bugs.openjdk.org/secure/attachment/102540/Pagination-JavaFX_19.png","2023-02-03 09:52;kcr;Pagination-JavaFX_20.png;https://bugs.openjdk.org/secure/attachment/102541/Pagination-JavaFX_20.png","2023-02-03 09:50;kcr;PaginationDisappear.java;https://bugs.openjdk.org/secure/attachment/102542/PaginationDisappear.java",,,,,,,,,,,,,,,,,,jfx20,,,,,,,,"0|i308ub:",9223372036854775807,b18,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@67282485,,,,,,,,,"2023-02-03 09:59;kcr;Depending on how likely this bug is to occur, and whether there is a feasible workaround, it might be a P2.;;;","2023-02-03 10:28;kcr;Since this happens always, and is a very visible regression introduced in JavaFX 20, it is a P2.

If a safe fix can be found, we might consider it to go into 20 during RDP2.;;;","2023-02-03 11:37;angorya;Introduced by yours truly in JDK-8295754;;;","2023-02-03 12:38;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jfx/pull/1021
Date: 2023-02-03 20:15:46 +0000;;;","2023-02-03 13:49;angorya;Fix Request

This is a regression introduced by a recent change JDK-8295754.  The fix is relatively small; it makes sense to correct the mistake before it goes to production.  I'd estimate the risk to be fairly low.   ;;;","2023-02-03 15:22;kcr;Fix request approved

Approved to go into jfx20.;;;","2023-02-06 08:18;dukebot;Changeset: 192ba4fc
Author:    Andy Goryachev <angorya@openjdk.org>
Date:      2023-02-06 16:15:03 +0000
URL:       https://git.openjdk.org/jfx/commit/192ba4fc71b585d9ff5a81c75499187944f548dc
;;;",,,,,,,,,,,,,,,,,,,,,,,,
Fix regex for tags in jtreg jcheck.conf,CODETOOLS-7903453,5097545,Bug,Resolved,CODETOOLS,Code Tools,software,duke,,,P3,Fixed,jjg,jjg,jjg,2023-03-30 10:47,2023-08-15 23:52,2023-10-01 09:56,2023-03-30 11:13,,,,,,,,,,tools,,0,,,,,,,,,,,,,,,,,"tags=jtreg(?:4\.1-b[0-9]{2}|5\.[01]-b[0-9]{2}|6|-[6789](?:\.[0-9]+)?+[0-9]+)

The penultimate `+` needs to be escaped",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,CODETOOLS-7903524,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i30yor:",9223372036854775807,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@41617238,,,,,,,,,"2023-03-30 11:01;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jtreg/pull/149
Date: 2023-03-30 17:57:42 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Jextract generates structs that cannot be compiled,CODETOOLS-7903449,5097074,Bug,Resolved,CODETOOLS,Code Tools,software,duke,,,P3,Fixed,mcimadamore,mcimadamore,mcimadamore,2023-03-24 08:25,2023-03-30 07:52,2023-10-01 09:56,2023-03-30 07:52,,,,,,,,,,tools,,0,,,,,,,,,,,,,,,,,"When compiling structs with lots and lots of function pointer fields, jextract can sometime end up with sources which cannot be compiled, due to classfile limitations (constant pool, or code size).

The problem is caused by the fact that a functional interface reuses the ""nearest"" constant builder - so, if a functional interface is defined inside a struct, the struct class itself is used as holder for the upcall constants.

While this behavior was meant to minimize the generation of constant classes, it is easy to see how it would fail to scale for very large structs (and also, how it would defeat the initialization performance guarantees provided by jextract).",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i30vs3:",9223372036854775807,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@2791a97a,,,,,,,,,"2023-03-24 09:05;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jextract/pull/117
Date: 2023-03-24 15:57:29 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
System.out and System.err messages are missing in jtr file when a test times out in agentvm mode,CODETOOLS-7903441,5095143,Bug,Resolved,CODETOOLS,Code Tools,software,duke,,,P4,Fixed,jpai,jpai,jpai,2023-02-27 22:15,2023-05-12 01:09,2023-10-01 09:56,2023-05-12 01:09,,,,,,,,,,tools,,0,,,,,,,,,,,,,,,,,"Consider this trivial jtreg test:

/*
 * @test
 * @summary Test to verify that jtreg's jtr file contains System.out and System.err messages when
 *          the test times out when run in agent vm mode
 * @run main/timeout=15 TimeoutTest
 */
public class TimeoutTest {

    public static void main(final String[] args) throws Exception {
        System.out.println(""**** A System.out message"");
        System.err.println(""**** A System.err message"");
        final int numSecs = 600;
        System.out.println(""Sleeping for "" + numSecs + "" seconds"");
        Thread.sleep(numSecs * 1000);
        System.out.println(""Done sleeping"");
    }
}

The test writes to System.out and System.err and (intentionally) sleeps for 10 minutes to simulate a test that times out. The test is marked with ""@run main/timeout=15"" just to complete the test execution quickly. Other than that it plays no role in the issue being reported here.

When this test is run in either implicit or explicit agent vm mode:

jtreg -avm -report:files -jdk:build/macosx-aarch64/images/jdk  <paht-to-test-file>

The test fails with a timeout as expected. When the corresponding jtr file is checked, it doesn't contain any of the System.out or System.err messages that the test had logged before it timed out.
If the same test is run in othervm mode (either implicitly or explicitly), the jtr file does indeed contain the System.out and System.err messages. So this only affects agent vm mode.

This affects many tests that timeout on mach5.

Locally, the jtreg version in use is:

jtreg -version
jtreg 7.1.1+1-1
Installed in /home/me/jtreg/jtreg-7.1.1+1/lib/jtreg.jar
Running on platform version 19.0.2 from /home/me/jdk-19.0.2.jdk/Contents/Home.
Built with Java(TM) 2 SDK, Version 11.0.16+11-LTS-199 on December 06, 2022.
Copyright (c) 1999, 2022, Oracle and/or its affiliates. All rights reserved.
Use is subject to license terms.
JT Harness, version 6.0 ea b24 (September 27, 2022)
Java Assembler Tools, version 7.0 ea b09 (June 04, 2020)
TestNG: testng-7.3.0.jar, jcommander-1.78.jar, guice-4.2.3.jar
JUnit: junit-platform-console-standalone-1.8.2.jar
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,CODETOOLS-7902198,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i30jv7:",9223372036854775807,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@41617238,,,,,,,,,"2023-05-10 04:54;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jtreg/pull/155
Date: 2023-05-10 11:50:07 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
TestDocComments fails on Windows,CODETOOLS-7903435,5094471,Bug,Resolved,CODETOOLS,Code Tools,software,duke,,,P3,Fixed,jvernee,jvernee,jvernee,2023-02-17 06:13,2023-03-10 05:41,2023-10-01 09:56,2023-03-10 05:41,,,,,,,,,,tools,,0,,,,,,,,,,,,,,,,,"TestDocComments fails on Windows because it's trying to typedef size_t with the type unsigned long, which is different from the Windows type unsigned long long.

Using the latter works accross supported platforms though. ",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i30fpv:",9223372036854775807,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@2791a97a,,,,,,,,,"2023-02-17 06:18;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jextract/pull/106
Date: 2023-02-16 21:38:32 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
