Summary,Issue key,Issue id,Issue Type,Status,Project key,Project name,Project type,Project lead,Project description,Project url,Priority,Resolution,Assignee,Reporter,Creator,Created,Updated,Last Viewed,Resolved,Affects Version/s,Affects Version/s,Affects Version/s,Affects Version/s,Affects Version/s,Affects Version/s,Affects Version/s,Fix Version/s,Component/s,Due Date,Votes,Labels,Labels,Labels,Labels,Labels,Labels,Labels,Labels,Labels,Labels,Labels,Labels,Labels,Labels,Labels,Labels,Labels,Labels,Labels,Labels,Labels,Description,Environment,Original Estimate,Remaining Estimate,Time Spent,Work Ratio,Σ Original Estimate,Σ Remaining Estimate,Σ Time Spent,Security Level,Inward issue link (Backport),Outward issue link (Backport),Outward issue link (Backport),Outward issue link (Backport),Outward issue link (Backport),Outward issue link (Backport),Outward issue link (Backport),Outward issue link (Backport),Outward issue link (Backport),Outward issue link (Backport),Outward issue link (Backport),Outward issue link (Backport),Outward issue link (Backport),Inward issue link (Blocks),Outward issue link (Blocks),Outward issue link (Blocks),Outward issue link (Blocks),Outward issue link (CSR),Inward issue link (Cloners),Outward issue link (Cloners),Inward issue link (Duplicate),Inward issue link (Duplicate),Outward issue link (Duplicate),Outward issue link (Duplicate),Outward issue link (Duplicate),Inward issue link (Relates),Inward issue link (Relates),Inward issue link (Relates),Inward issue link (Relates),Inward issue link (Relates),Outward issue link (Relates),Outward issue link (Relates),Outward issue link (Relates),Outward issue link (Relates),Outward issue link (Relates),Attachment,Attachment,Attachment,Attachment,Custom field ( Type of Bug [Challenge] ),Custom field (CPU),Custom field (CPU),Custom field (Cost of Delay),Custom field (Epic Link),Custom field (Imported),Custom field (Indexed),Custom field (Introduced In Build),Custom field (Introduced In Version),Custom field (Number of Tests Affected [Challenge]),Custom field (OS),Custom field (OS),Custom field (Oracle Evaluation),Custom field (Original story points),Custom field (Parent Link),Custom field (Rank),Custom field (Rank (Obsolete)),Custom field (Resolved In Build),Sprint,Custom field (Story Points),Custom field (Subcomponent),Custom field (Target end),Custom field (Target start),Custom field (Team),Custom field (Time Spent),Custom field (Understanding),Custom field (Value),Custom field (Verification),Custom field (external_bug),Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment
Skara: TagCommand creates malformed Markdown link,SKARA-1206,5060066,Bug,Resolved,SKARA,Skara,software,darcy,,,P4,Fixed,gli,webbuggrp,webbuggrp,2021-10-09 19:32,2021-11-22 09:15,2023-10-01 09:57,2021-11-22 09:15,,,,,,,,1.0,bots,,0,dcsaw,webbug,,,,,,,,,,,,,,,,,,,,"A DESCRIPTION OF THE PROBLEM :
It looks like Skara's TagCommand creates a malformed Markdown link, see https://github.com/openjdk/skara/blob/c731445ce5dc110ad1967c8f6b1e7065a49c4f9e/bots/pr/src/main/java/org/openjdk/skara/bots/pr/TagCommand.java#L97

It appends a square bracket ']' instead of a parenthesis ')' after the `hashUrl`.


",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2ulr7:",9223372036854775807,,,,,,,,,,,,,"2021-11-22 09:15;roboduke;Changeset: 7367e956
Author:    Guoxiong Li <gli@openjdk.org>
Committer: Erik Joelsson <erikj@openjdk.org>
Date:      2021-11-22 17:15:20 +0000
URL:       https://git.openjdk.java.net/skara/commit/7367e956982a3095a9c5716595af030af608081f
;;;",,,,,,,,,,,,,,,,,,,,,,,,,
Skara bot fails to update role in jdk-sandbox or jfx-sandbox for new Committer in census,SKARA-1205,5059838,Bug,Resolved,SKARA,Skara,software,darcy,,,P3,Fixed,erikj,kcr,kcr,2021-10-05 14:48,2022-12-09 14:26,2023-10-01 09:57,2022-12-08 14:24,,,,,,,,,bots,,0,,,,,,,,,,,,,,,,,,,,,,"The following OpenJDK user was recently granted the Committer role in the openjfx project in the OpenJDK census:

https://openjdk.java.net/census#tsayao

The openjdk/jfx-sandbox repo is configured to grant write access to all users with the Committer role (or higher) in the project, but his access was not updated, and he is not able to push to that repo.

I will manually grant him write access to that repo, but the Skara bot should do this automatically.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,SKARA-1477,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2ukcj:",9223372036854775807,,,,,,,,,,,,,"2022-06-24 08:57;kcr;This also happened to at least one (and likely many more) user in the jdk-sandbox:

https://openjdk.org/census#asotona;;;",,,,,,,,,,,,,,,,,,,,,,,,,
Add GitHub user savoptik,SKARA-1203,5059729,Bug,Resolved,SKARA,Skara,software,darcy,,,P4,Fixed,kcr,asemenov,asemenov,2021-10-04 05:27,2021-10-04 07:41,2023-10-01 09:57,2021-10-04 07:41,,,,,,,,,bots,,0,,,,,,,,,,,,,,,,,,,,,,"Please associate my GitHub account with my OpenJDK identity. 

https://github.com/savoptik
https://openjdk.java.net/census#asemenov",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2ujob:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Multiple command reply messages include 'HostUserDetails',SKARA-1201,5059509,Bug,Resolved,SKARA,Skara,software,darcy,,,P4,Fixed,ihse,webbuggrp,webbuggrp,2021-09-29 15:32,2021-10-06 23:23,2023-10-01 09:57,2021-10-06 23:23,,,,,,,,1.0,bots,,0,webbug,,,,,,,,,,,,,,,,,,,,,"A DESCRIPTION OF THE PROBLEM :
The command reply of multiple commands erroneously (?) contains `@HostUserDetails{...}`, for example https://github.com/openjdk/jdk/pull/4382#issuecomment-901430117

The issue appears to be that some commands print '@' followed by the `HostUser`. At least for pull request commands this seems to be redundant because PullRequestCommandWorkItem.processCommand already includes that.

For commit commands the situation is slightly different because CommitCommandWorkItem.processCommand is apparently not adding the prefix `@username`.

It might therefore be good to:
(- Adjust CommitCommandWorkItem.processCommand to always print `@username ` as prefix similar to PullRequestCommandWorkItem)
- Remove all `@username` printing in pull request (and commit) command implementations



",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2uibf:",9223372036854775807,,,,,,,,,,,,,"2021-10-05 04:46;ihse;HostUser:::toString is responsible for printing these ""HostUserDetails{...}"" messages. Apparently we get a HostUser object in multiple places (at least confirmed for the `/open` command, as the example in the bug report shows), and just appends it to a string, hoping that it will return just the user name.

It is not clear to me if the best approach is to change toString to do just that, or if we should fix all instances. The former is probably more robust.;;;","2021-10-06 23:23;roboduke;Changeset: c731445c
Author:    Magnus Ihse Bursie <ihse@openjdk.org>
Date:      2021-10-07 06:22:38 +0000
URL:       https://git.openjdk.java.net/skara/commit/c731445ce5dc110ad1967c8f6b1e7065a49c4f9e
;;;",,,,,,,,,,,,,,,,,,,,,,,,
Label changes from java.nio.** as nio,SKARA-1197,5059489,Bug,Resolved,SKARA,Skara,software,darcy,,,P4,Fixed,prappo,prappo,prappo,2021-09-29 06:57,2021-09-30 04:14,2023-10-01 09:57,2021-09-30 04:14,,,,,,,,1.0,bots,,0,,,,,,,,,,,,,,,,,,,,,,"I've recently filed two PRs that exclusively changed classes in the java.nio.file package. Neither PR was automatically labelled by the bot. Every time I got this message:

@pavelrappo To determine the appropriate audience for reviewing this pull request, one or more labels corresponding to different subsystems will normally be applied automatically. However, no automatic labelling rule matches the changes in this pull request. In order to have an ""RFR"" email sent to the correct mailing list, you will need to add one or more applicable labels manually using the /label pull request command.

Please fix this. I presume, that the respective rule should include java.nio.** (java.nio and all its ""subpackages"").",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2ui6z:",9223372036854775807,,,,,,,,,,,,,"2021-09-29 06:59;alanb;Looks like src/java.base/\\w+/classes/java/nio/ is missing from the ""nio"" element.;;;","2021-09-29 07:06;prappo;Here are the PRs mentioned in the description:
 
  1. https://git.openjdk.java.net/jdk/pull/5649
  2. https://git.openjdk.java.net/jdk/pull/5749 ;;;","2021-09-30 04:14;roboduke;Changeset: acda2667
Author:    Pavel Rappo <prappo@openjdk.org>
Committer: Magnus Ihse Bursie <ihse@openjdk.org>
Date:      2021-09-30 11:14:12 +0000
URL:       https://git.openjdk.java.net/skara/commit/acda266705b101b0905aa10de5f31670003ed2c4
;;;",,,,,,,,,,,,,,,,,,,,,,,
CommitCommentWorkItem overwhelms scheduler,SKARA-1191,5059320,Bug,Resolved,SKARA,Skara,software,darcy,,,P2,Fixed,erikj,erikj,erikj,2021-09-27 06:51,2021-09-28 05:43,2023-10-01 09:57,2021-09-28 05:43,1.0,,,,,,,1.0,bots,,0,,,,,,,,,,,,,,,,,,,,,,"Recently, we have seen the PR bot getting slowed down to a crawl, taking hours responding to updates in PRs (e.g. SKARA-1178). I believe I have finally found the cause. The scheduler is slowly getting filled up with CommitCommentWorkItems.

A CommitCommentWorkItem is scheduled for each repository every time PullRequestBot::getPeriodicItems is called, which is every 10 seconds. So unless we are able to process these for every repository in 10 seconds, they will start to pile up. Until recently, we probably could, but the more repositories we create, the more of these get scheduled.

The defense for this is the WorkItem::concurrentWith method, which is supposed to protect both WorkItems that touch the same data from getting into races, but also to avoid keeping duplicate WorkItems in the pending queue. In the case of CommitCommentWorkItem, ::concurrentWith just returns true, so there is no protection against flooding.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,SKARA-1178,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2uh5f:",9223372036854775807,,,,,,,,,,,,,"2021-09-28 05:43;roboduke;Changeset: 91be684a
Author:    Erik Joelsson <erikj@openjdk.org>
Date:      2021-09-28 12:43:15 +0000
URL:       https://git.openjdk.java.net/skara/commit/91be684a5dec13840b9fba9d8dbb23c1a6dc0beb
;;;",,,,,,,,,,,,,,,,,,,,,,,,,
The pr/NNNN branches are not always deleted when a PR is closed,SKARA-1188,5059149,Bug,Resolved,SKARA,Skara,software,darcy,,,P4,Fixed,gli,kcr,kcr,2021-09-23 13:19,2022-11-17 06:26,2023-10-01 09:57,2021-11-22 09:15,1.0,,,,,,,1.0,bots,,0,,,,,,,,,,,,,,,,,,,,,,"Skara creates a pr/NNNN branch for every PR once it becomes ""rfr"", in support of dependent PRs. It deletes them when the PR is closed. In at least one case, this didn't happen:

https://github.com/openjdk/jdk/pull/3855
https://github.com/openjdk/jdk/tree/pr/3855

The PR was closed on May 5, but the branch is still present in openjdk/jdk.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,SKARA-1680,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2ug3f:",9223372036854775807,,,,,,,,,,,,,"2021-09-23 13:22;kcr;Two other cases:

https://github.com/openjdk/jdk/pull/4035
https://github.com/openjdk/jdk/tree/pr/4035

https://github.com/openjdk/jdk/pull/4408
https://github.com/openjdk/jdk/tree/pr/4408;;;","2021-11-22 09:15;roboduke;Changeset: e951b64e
Author:    Guoxiong Li <gli@openjdk.org>
Committer: Erik Joelsson <erikj@openjdk.org>
Date:      2021-11-22 17:14:54 +0000
URL:       https://git.openjdk.java.net/skara/commit/e951b64e020941414866d292c81594e42e43243a
;;;",,,,,,,,,,,,,,,,,,,,,,,,
Backport command stopped working on Gitlab,SKARA-1186,5059071,Bug,Resolved,SKARA,Skara,software,darcy,,,P2,Fixed,ihse,erikj,erikj,2021-09-22 13:51,2021-10-06 03:54,2023-10-01 09:57,2021-10-06 03:54,,,,,,,,1.0,libraries,,0,,,,,,,,,,,,,,,,,,,,,,"It seems a new version of Gitlab is causing us to fail the /backport command. Here is the stack trace from the log:

org.openjdk.skara.network.UncheckedRestException: Request returned bad status: 415
	at org.openjdk.skara.network/org.openjdk.skara.network.RestRequest.transformBadResponse(RestRequest.java:326)
	at org.openjdk.skara.network/org.openjdk.skara.network.RestRequest.execute(RestRequest.java:403)
	at org.openjdk.skara.network/org.openjdk.skara.network.RestRequest$QueryBuilder.execute(RestRequest.java:189)
	at org.openjdk.skara.forge/org.openjdk.skara.forge.gitlab.GitLabRepository.addCollaborator(GitLabRepository.java:585)
	at org.openjdk.skara.bots.pr/org.openjdk.skara.bots.pr.BackportCommand.handle(BackportCommand.java:168)
	at org.openjdk.skara.bots.pr/org.openjdk.skara.bots.pr.CommitCommandWorkItem.processCommand(CommitCommandWorkItem.java:131)
	at org.openjdk.skara.bots.pr/org.openjdk.skara.bots.pr.CommitCommandWorkItem.run(CommitCommandWorkItem.java:171)
	at org.openjdk.skara.bot/org.openjdk.skara.bot.BotRunner$RunnableWorkItem.runMeasured(BotRunner.java:190)
	at org.openjdk.skara.bot/org.openjdk.skara.bot.BotRunner$RunnableWorkItem.run(BotRunner.java:146)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:304)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1130)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:630)
	at java.base/java.lang.Thread.run(Thread.java:831)

It looks like the rest request we use to add a collaborator to the fork repository is failing.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2ufm3:",9223372036854775807,,,,,,,,,,,,,"2021-10-05 03:48;ihse;HTTP status code 415 is "" Unsupported Media Type"". A quick googling indicates that a common source of this error is content-type encoding issues, especially with json. I'm looking into exactly how we are doing the request.;;;","2021-10-05 03:53;ihse;Well, it's one of these ""how can this ever have worked???"" bugs:

        var accessLevel = canPush ? ""30"" : ""20"";
        var data = ""user_id="" + user.id() + ""&access_level="" + accessLevel;
        request.post(""members"")
               .body(data)
               .execute();

I'm pretty certain the body of the POST request should not be a ""user_id=nn&access_level=yy"" string, but a json object. That looks more like a GET request. I'll try to find up to date gitlab API documentation.;;;","2021-10-05 04:05;ihse;Actually, this is correct according to the documentation: https://docs.gitlab.com/ee/api/members.html. The main suspect right now is that the Content-Type is not set when sending ""raw POST data"", and this is afaict, the only place where we do so in GitLabRepository.java. Maybe we need a content type even for raw data, and not just json?;;;","2021-10-06 03:54;roboduke;Changeset: dc477842
Author:    Magnus Ihse Bursie <ihse@openjdk.org>
Date:      2021-10-06 10:54:28 +0000
URL:       https://git.openjdk.java.net/skara/commit/dc47784296aa6daee79745fbe1897db6e3aa45be
;;;",,,,,,,,,,,,,,,,,,,,,,
Failure to retrieve the JBS bug should be an integration blocker,SKARA-1184,5058979,Bug,Resolved,SKARA,Skara,software,darcy,,,P3,Fixed,erikj,kcr,kcr,2021-09-21 11:28,2022-01-25 15:28,2023-10-01 09:57,2021-10-25 06:38,,,,,,,,1.0,bots,,0,,,,,,,,,,,,,,,,,,,,,,"For a PR in a project that is configured to use JBS, Skara will retrieve the JBS bug and do various things with it:

1. Check the issue type (must be Bug, Enhancement, New Feature, Task, or Sub-task)
2. Check that the title of the bug matches the title of the PR
3. Adds links in the JBS bug for the core review
4. Resolved the bug as ""Fixed"" when the PR is integrated, adding a link to the commit

When the JBS bug is not accessible, which usually happens when the bug is Confidential, the above checks cannot be done. In addition to the bug not being resolved properly, it complicated creating a backport of that bug.

Currently, such a failure is a warning, but will not block integration. We should make this an integration blocker along with many similar conditions.

See this thread [1] in jdk-dev for a recent example.

[1] https://mail.openjdk.java.net/pipermail/jdk-dev/2021-September/006061.html",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,SKARA-752,,,,,SKARA-1225,,,,,SKARA-1330,,,,,,,,,,,,,,,,,,,,,,,,"0|i2uf1n:",9223372036854775807,,,,,,,,,,,,,"2021-09-21 11:41;kcr;One possible case to consider is when JBS is down for maintenance, but I think the bots are stuck in that case anyway.;;;","2021-09-22 01:09;sgehwolf;Should there be a need for allowing a closed issue, implementing a skara bot command to override the integration blocker would be preferred rather than keeping the status quo (warning on the issue of the PR which can be easily missed).;;;","2021-10-15 06:50;erikj;I agree with Severin, an overriding command would cover any actual need for using a confidential bug.

Regarding what happens in JBS is down. Currently it's possible to /integrate a PR with JBS down. Notification is a separate step handled by a different bot and will happen once JBS is up again. I do believe that changing a PR to RFR would be blocked if JBS was down, as it wouldn't be able to verify the bug number and fetch the correct title, but I'm not sure. I will need to investigate to figure out exactly what the consequences will be to support this feature.;;;","2021-10-25 06:38;roboduke;Changeset: e2db496a
Author:    Erik Joelsson <erikj@openjdk.org>
Date:      2021-10-25 13:37:44 +0000
URL:       https://git.openjdk.java.net/skara/commit/e2db496a0d28318125c263fe167f345698d65572
;;;","2021-10-25 06:46;clanger;Is the integration blocker now active with this change? As I see it, there's also no override command, correct?;;;","2021-10-25 08:18;erikj;The change has been integrated but not yet deployed live. I have not implemented an override command. I can file a followup for that.;;;","2021-10-25 08:23;clanger;OK, thanks. I guess us folks from outside Oracle wouldn't need the override, though. So the followup is not needed from my end.;;;","2021-10-26 09:13;erikj;The change went live yesterday afternoon PT.;;;",,,,,,,,,,,,,,,,,,
Mirroring of jfx:master to jfx-sandbox:master is not working,SKARA-1175,5058625,Bug,Resolved,SKARA,Skara,software,darcy,,,P3,Fixed,kcr,kcr,kcr,2021-09-15 07:05,2021-09-15 08:40,2023-10-01 09:57,2021-09-15 08:40,,,,,,,,,admin,,0,,,,,,,,,,,,,,,,,,,,,,"The Skara bots should continuously mirror the jfx:master branch to jfx-sandbox:master, but the latter is out of date.

https://github.com/openjdk/jfx/commits/master
https://github.com/openjdk/jfx-sandbox/commits/master

The changes pushed in the last couple of days to jfx:master aren't reflected in the jfx-sandbox.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2ucuz:",9223372036854775807,,,,,,,,,,,,,"2021-09-15 08:02;erikj;This error keeps being posted in the log:

remote: error: GH006: Protected branch update failed for refs/heads/master.        
remote: error: You're not authorized to push to this branch. Visit https://docs.github.com/articles/about-protected-branches/ for more information. ;;;","2021-09-15 08:40;kcr;This was a misconfiguration in the repo itself, which has since been corrected. it is working now.;;;",,,,,,,,,,,,,,,,,,,,,,,,
Dependent PR feature does not work with protected branches in newer Gitlab version,SKARA-1173,5058449,Bug,Resolved,SKARA,Skara,software,darcy,,,P3,Fixed,erikj,erikj,erikj,2021-09-13 09:28,2023-02-24 09:17,2023-10-01 09:57,2023-01-19 11:42,,,,,,,,1.0,bots,,0,,,,,,,,,,,,,,,,,,,,,,"We can't use the dependent PR feature with Gitlab. The pr/* branches have to be protected to avoid letting any developer freely push to, or create such branches. The problem is that since a recent version, Gitlab will not allow us to delete protected branches using the API.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,SKARA-1164,SKARA-979,SKARA-1171,SKARA-1830,,,,,,,,,,,,,,,,,,,,,"0|i2ubrv:",9223372036854775807,,,,,,,,,,,,,"2022-05-27 09:07;erikj;A way to work around this could be to dynamically add protection for each individual pr/X branch prior to creating it, and then removing that protection before deleting. I just tested this manually in a private repository in the UI like this:

1. Added a ""wildcard"" protection on the form ""pr/4711"", and that was accepted.
2. Created a branch with that name, and it was protected as expected. 
3. Removed the protection for ""pr/4711"", the branch was no longer protected.
4. Removed the branch. The extra remove protected branch dialog did not show.;;;","2023-01-03 08:43;erikj;I have a working prototype for this. I have verified that it works against a live repository.;;;","2023-01-03 09:25;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/skara/pull/1452
Date: 2023-01-03 17:24:36 +0000;;;","2023-01-19 11:42;roboduke;Changeset: 5823b37f
Author:    Erik Joelsson <erikj@openjdk.org>
Date:      2023-01-19 19:41:50 +0000
URL:       https://git.openjdk.org/skara/commit/5823b37f47256417601ec4275be6a2b3958265c6
;;;",,,,,,,,,,,,,,,,,,,,,,
Notify bot reposts commit comments if another notifier fails,SKARA-1170,5058443,Bug,Resolved,SKARA,Skara,software,darcy,,,P2,Fixed,erikj,erikj,erikj,2021-09-13 08:29,2021-09-13 12:00,2023-10-01 09:57,2021-09-13 12:00,1.0,,,,,,,1.0,bots,,0,,,,,,,,,,,,,,,,,,,,,,"The PullRequestWorkItem in the NotifyBot runs several notifications in a single WorkItem. Because of this, if one fails, none of them get recorded as being done, so the next time the WorkItem runs, all the notifications will happen again.

This should work fine as long as the notifications themselves are clever and avoid repeating. This is however not the case. The CommitCommentNotifier will happily repost the same comment over and over. Right now, we have an issue with the PullRequestBranchNotifier failing (on Gitlab) which is causing hundreds of commit comments to be posted.

While the underlying issue is the failing notifier, we need to protect other notifiers from wrecking havoc too. Fixing the CommitCommentNotifier should be simple enough.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,SKARA-1164,,,,,,,,,,,,,,,,,,,,,,,,"0|i2ubqj:",9223372036854775807,,,,,,,,,,,,,"2021-09-13 12:00;roboduke;Changeset: a6c854a5
Author:    Erik Joelsson <erikj@openjdk.org>
Date:      2021-09-13 19:00:10 +0000
URL:       https://git.openjdk.java.net/skara/commit/a6c854a5af65c4dc9488829ca24843dc1cff7783
;;;",,,,,,,,,,,,,,,,,,,,,,,,,
Update the mapping of files for the client group,SKARA-1167,5058293,Bug,Resolved,SKARA,Skara,software,darcy,,,P4,Fixed,serb,serb,serb,2021-09-09 19:55,2021-09-11 04:55,2023-10-01 09:57,2021-09-11 04:55,1.0,,,,,,,1.0,admin,,0,,,,,,,,,,,,,,,,,,,,,,Some client related files/folders should be added to the jdk.json.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2uat7:",9223372036854775807,,,,,,,,,,,,,"2021-09-11 04:55;roboduke;Changeset: d816d143
Author:    Sergey Bylokhov <serb@openjdk.org>
Committer: Kevin Rushforth <kcr@openjdk.org>
Date:      2021-09-11 11:54:49 +0000
URL:       https://git.openjdk.java.net/skara/commit/d816d1431e0efc9a4024c5ff3deea13642c62707
;;;",,,,,,,,,,,,,,,,,,,,,,,,,
"New Gitlab version is causing ""Initial paginated response no longer paginated"" errors",SKARA-1166,5058284,Bug,Resolved,SKARA,Skara,software,darcy,,,P2,Fixed,erikj,erikj,erikj,2021-09-09 14:04,2021-09-13 13:52,2023-10-01 09:57,2021-09-13 13:52,1.0,,,,,,,1.0,bots,,0,,,,,,,,,,,,,,,,,,,,,,"With a newer Gitlab version, we have started seeing error messages like this randomly, but quite often:

Exception during item execution (RepositoryWorkItem@XXX): Initial paginated response no longer paginated:

This seems to be a change of behavior in Gitlab for paginated results. We need to investigate if this affects the data being returned or not, and if so we can ignore it. The error implies that while following ""next"" links in the result header to request the next page, suddenly we receive a page with no links in the header.

It could also be that this is a symptom of the server giving us bogus results. In that case we will need some kind of better handling to not get overwhelmed by error log messages from Skara.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2uar7:",9223372036854775807,,,,,,,,,,,,,"2021-09-13 12:25;erikj;This was initially just happening for one but, but has since spread and is happening pretty much everywhere. It's not frequent enough to cause real problems, other than overwhelming our error reporting channel. I think the best cause of action right now is to downgrade this error by change from throwing a RuntimeException to the already existing UncheckedRestException. This will have the same effect for the executing WorkItem, which will fail but most likely get to run again later, but logging a WARNING instead of SEVERE. This should basically be viewed as any other failed rest call.;;;","2021-09-13 13:52;roboduke;Changeset: 38e1a409
Author:    Erik Joelsson <erikj@openjdk.org>
Date:      2021-09-13 20:51:25 +0000
URL:       https://git.openjdk.java.net/skara/commit/38e1a409c6d94771d4301a657f89195003ac6f7b
;;;",,,,,,,,,,,,,,,,,,,,,,,,
Add GitHub user alisenchung,SKARA-1155,5057971,Bug,Resolved,SKARA,Skara,software,darcy,,,P4,Fixed,kcr,achung,achung,2021-09-03 12:42,2021-11-08 11:55,2023-10-01 09:57,2021-11-08 11:55,,,,,,,,,admin,,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2u8tn:",9223372036854775807,,,,,,,,,,,,,"2021-09-03 13:01;kcr;Since you do not have an OpenJDK ID, this request cannot be processed at this time. Once you have the role of Author (or higher) in any OpenJDK project, you can reopen this.;;;","2021-11-08 11:55;kcr;Done.;;;",,,,,,,,,,,,,,,,,,,,,,,,
Some emails still not posted as comments in PR,SKARA-1153,5057855,Bug,Resolved,SKARA,Skara,software,darcy,,,P2,Fixed,erikj,erikj,erikj,2021-09-01 13:33,2021-09-03 11:40,2023-10-01 09:57,2021-09-03 09:55,,,,,,,,1.0,bots,,0,,,,,,,,,,,,,,,,,,,,,,"After fixing SKARA-1148, there are still some emails that aren't being posted as comments in PRs. One such example is:

https://mail.openjdk.java.net/pipermail/openjfx-dev/2021-July/031314.html
https://github.com/openjdk/jfx/pull/579

This time the cause is Skara failing to piece together the conversation correctly for this email. Skara needs to resolve a conversation back to the initial RFR email in order to figure out which PR it belongs to.

In the case above, there are missing emails in the archive, or rather, there are emails that Skara tried to send, and that are then being referenced in the In-Reply-To header of later emails. When Mbox.java resolves conversations, it only looks at the In-Reply-To header, which has the ID of the direct parent in the conversation, so if an email in this chain is missing, resolving fails. The email archive linked above only has 5 mails in this thread (including the one Kevin wrote manually), while Skara has stored 7 mails in its internal archive, which are all generated by Skara, so 3 are missing.

Luckily, the emails have a fallback header called References, which lists all ancestors in the conversation. To properly handle missing emails, we need to fall back on this References field and find the last ID in the list that actually exists.

This is obviously what pipermail does when reconstructing conversations in the thread view: https://mail.openjdk.java.net/pipermail/openjfx-dev/2021-July/thread.html#31279",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2u83v:",9223372036854775807,,,,,,,,,,,,,"2021-09-02 05:31;erikj;I have a solution for this implemented. Now running it in a modified bot locally to find out exactly what PRs and emails that would be processed if this was deployed.;;;","2021-09-02 14:48;erikj;In addition to this small change to Mbox, I'm also tinkering with some other things that are related. These were things I stumbled over and needed to properly debug and test the issue.

As I noted in SKARA-1148 already, the MailingListArchiveReaderBot is doing a lot of redundant work. I blame this on SKARA-843, where this bot was changed from one global instance to running one instance for each configured repository. There were two problems introduced with this change.

1. Each instance still has all the configured repositories, so every found conversation is evaluated against every repository in every instance. This creates an unnecessary N^2 complexity in number of configured repositories.

2. Each instance has its own MailingListReader, configured for exactly the set of mailing lists used for the repository. We have a lot of repositories that share the exact same mailing list config. This means that each of these instances will read all the archives for themselves, with no sharing of this data. The reader already does caching, so after the first time around, it's much faster. Still, the first time around we read jdk-updates-dev a pretty large number of times.

My solution for 1 is to only have one single repository in each MailingListArchiveReaderBot. This looks like a simple oversight in the previous patch.

For 2, I make sure to only create one MailingListReader for each unique set of mailing lists. This will not remove all the redundant reads, but it will bring them down significantly. I also think it's the functionally correct solution as we will then only consider email threads on the relevant mailing lists for each repository, so less unnecessary (and potentially bad) cross evaluation between mailing lists and repositories that aren't configured as related.

To get 2 to actually work correctly, I needed to tweak the logic that protects us from running the wrong WorkItems concurrently. To be able to share MailingListReader between multiple WorkItems, we have WorkItem::concurrentWith. Unfortunately, this method was also used to detect duplicate WorkItems in the pending pool of the scheduler. This is correct in most cases, but not here. An ArchiveReaderWorkItem for jdk11u and jdk15u shares MailingListReader, but queueing one should not replace the other. To solve this I added another method WorkItem::replaces for this particular check (with a default method to preserve the current behavior for all other WorkItems).

Finally I also changed ArchiveReaderWorkItem::toString to print the repository name rather than the list of mailing lists. This made a lot more sense to me while debugging as we now create an instance per repository rather than based on mailinglists.;;;","2021-09-03 09:55;roboduke;Changeset: 3293f7af
Author:    Erik Joelsson <erikj@openjdk.org>
Date:      2021-09-03 16:55:05 +0000
URL:       https://git.openjdk.java.net/skara/commit/3293f7afda04febc4ca212d2a7acedb682d5cb5f
;;;","2021-09-03 11:40;erikj;This is now deployed and seems to be working.;;;",,,,,,,,,,,,,,,,,,,,,,
Migrate skara tooling for client code to reference the new client-libs-dev list,SKARA-1150,5057777,Bug,Resolved,SKARA,Skara,software,darcy,,,P3,Fixed,erikj,prr,prr,2021-08-31 13:12,2021-09-09 13:40,2023-10-01 09:57,2021-09-09 13:40,,,,,,,,1.0,admin,,0,,,,,,,,,,,,,,,,,,,,,,"The OpenJDK client groups (awt,2d,swing,sound) have been consolidated
into the new client-libs group.

All subscribers to client mailing lists - those for the above groups and also the beans-dev list have been subscribed to the new client-libs-dev list.

Whilst we are NOT YET retiring / archiving the existing lists  a necessary
precursor to this is to migrate all parts of the skara tooling to be aware of
the new list and classify all client source code as belonging to this group so that notifications go to client-libs-dev@ojn and the label ""client"" is applied to PRs.

I gather there also needs to be co-ordinated work between what is in the skara repo and github hosted bots and perhaps more.

This change should greatly simplify the source code->group mapping and I've already mapped out on the new group page which source code, test + demo and make/build directories are ""client"". It may not be 100% comprehensive but should be close.

I don't know, but would not be surprised to learn, that you can't simultaneously remove all the references to the old lists in the tooling until in-flight PRs are completed or withdrawn. So there may need to be a follow-on clean up bug.
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2u7mj:",9223372036854775807,,,,,,,,,,,,,"2021-08-31 13:57;erikj;Here is my suggestion on how I would like to do this based on how I understand things.

1. Change the Skara bot configuration to introduce the new ""client"" label as well as the new client-libs-dev mailing list for the openjdk/jdk and openjdk/jdk17 repos. Also move the labels ""2d"", ""awt"", ""sound"", ""swing"" to be associated with this new mailing list instead of the old ones. Once deployed, all emails sent _from_ Skara for PRs will be using the new mailing list. Note that this will automatically create the new label in Github.
2. Change https://github.com/openjdk/skara/blob/master/config/mailinglist/rules/jdk.json with the new default mappings for labels. I have a local patch for this with a rough conversion. This will cause new PRs to use the new ""client"" label by default instead of the old ones.
3. Change the Skara bot configuration and remove the old mailing lists completely for openjdk/jdk and openjdk/jdk17. This will stop adding email replies on these lists as comments on PRs.
4. Eventually remove the old labels from the openjdk/jdk configuration in Skara. (Note that this will not automatically remove them from Github)

We can do 3 together with 1 to make things simpler. I would prefer it that way, but the transition will not be quite as smooth.;;;","2021-09-01 05:25;kcr;The list of above steps looks good.

As for 4, I presume you will file a follow-on issue? And we may not want to remove the labels from GitHub, since they are still valid for old PRs that used them (although maybe that doesn't matter).;;;","2021-09-01 08:10;prr;- When it becomes clear that a follow-on bug is needed, I expect the person it will become clear to is Erik :-), so if at that time he wants me to I can but I was assuming he would do it.
- I am not 100% sure about the labels. I suppose we may not be able to remove existing labels if they aren't recognised but I don't see that as important.;;;","2021-09-01 08:28;erikj;Right, step 4 has no urgency and may be a cleanup far down the road. I don't think we can ever remove the labels from the github/openjdk/jdk.;;;","2021-09-07 12:15;erikj;I'm going to deploy step 1 today, unless I hear objections.;;;","2021-09-07 12:21;erikj;Step 1 done. Going to post review for step 2 using this BUG id.;;;","2021-09-08 12:05;erikj;Corrected step 1 by removing ""beans-dev"" and adding ""beans"" label to the new ""client-libs-dev"" list.;;;","2021-09-09 13:40;roboduke;Changeset: e398e44b
Author:    Erik Joelsson <erikj@openjdk.org>
Date:      2021-09-09 20:39:42 +0000
URL:       https://git.openjdk.java.net/skara/commit/e398e44b7682d6f99789c8ff00622766c2be82c5
;;;",,,,,,,,,,,,,,,,,,
Emails on mailing lists are not posted to GitHub PR,SKARA-1148,5057717,Bug,Resolved,SKARA,Skara,software,darcy,,,P2,Fixed,erikj,erikj,erikj,2021-08-30 16:14,2021-09-01 07:04,2023-10-01 09:57,2021-09-01 07:04,1.0,,,,,,,1.0,bots,,0,,,,,,,,,,,,,,,,,,,,,,"For a bit over a month, the mlbridge bot seems to be having trouble posting emails as comments in PRs. 

Here is one example, which is unfortunately older than 14 days, so mlbridge will not attempt any retry on this without source modification.

http://mail.openjdk.java.net/pipermail/hotspot-dev/2021-August/054035.html
https://github.com/openjdk/jdk/pull/5070

I would like to find more recent examples if possible.

An interesting note on the above example is that there is no entry in the logs from the CommentPosterWorkItem for that particular PR. This leads me to suspect that the issue is in some kind of bot scheduling starving out certain WorkItems rather than faulty logic.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2u797:",9223372036854775807,,,,,,,,,,,,,"2021-08-30 16:19;erikj;I have tried to reproduce the issue by running a subset of the bot config in a debugger. This confirmed that as long as the CommentPosterWorkItem gets to run, it will post the comment. I don't dare trying to run the full thing in the debugger though as it may cause weird things to happen with production data. I think the next step is to add more logging and see if we can get some more clues. Ideally I would need a fresher example of a missing comment to focus this on though.;;;","2021-08-30 17:30;dholmes;[~erikj] this email:

http://mail.openjdk.java.net/pipermail/hotspot-dev/2021-August/054356.html

was not sent to this PR:

https://github.com/openjdk/jdk/pull/5218

Hopefully the fact the PR was closed does not make a difference.;;;","2021-08-30 18:31;dholmes;Another one:

http://mail.openjdk.java.net/pipermail/hotspot-runtime-dev/2021-August/051175.html

did not go to:

https://github.com/openjdk/jdk/pull/5300;;;","2021-08-31 06:05;erikj;Thanks David! This gives me something to work with.

Just as with the previous instance I investigated, the bot has never even tried to run a CommentPosterWorkItem for any of these PRs.;;;","2021-08-31 07:23;kbarrett;This one:

https://mail.openjdk.java.net/pipermail/hotspot-runtime-dev/2021-August/051136.html

did not go to:

https://github.com/openjdk/jdk/pull/5215

I later noticed and ""resent"" via the github PR, but with a comment mentioning the reflector failure.
;;;","2021-08-31 10:29;erikj;I think I've found the problem. The reading of the mailing list archives happens in MailmanListReader::conversations. There we loop over mailing lists and months. If a particular archive file (combo of mailing list and month) does not exist, the inner loop breaks. This break is the bug. In our case, the mailing list ide-support-dev does not have any emails for August and (I think because of that) the URL https://mail.openjdk.java.net/pipermail/ide-support-dev/2021-August.txt returns 404. This is triggering the break, which is stopping the inner loop (which loops over mailing lists) so it never gets to hotspot-dev (and a few others).

Looking at the history, this broke in SKARA-843, where the inner loop was added. The break statements then started acting on the wrong loop.

After having debugged this for a while, it seems to me we are doing a lot of duplicate work parsing these mailing lists over and over. I will probably file a followup to try to reduce this redundant work.;;;","2021-09-01 07:04;roboduke;Changeset: 59c46b88
Author:    Erik Joelsson <erikj@openjdk.org>
Date:      2021-09-01 14:03:34 +0000
URL:       https://git.openjdk.java.net/skara/commit/59c46b888358dbc839613081fe0e0d74b4819cb0
;;;",,,,,,,,,,,,,,,,,,,
NPE in GitHubPullRequest::reviews,SKARA-1145,5057610,Bug,Resolved,SKARA,Skara,software,darcy,,,P2,Fixed,erikj,erikj,erikj,2021-08-27 16:37,2021-08-31 12:09,2023-10-01 09:57,2021-08-31 12:09,,,,,,,,1.0,bots,,0,,,,,,,,,,,,,,,,,,,,,,"If a GitHubPullRequest has a review that points to a no longer existing change hash, then the reviews() method will throw NPE when trying to parse the ""commit_id"" field. I believe this happens if a PR is rebased after being reviewed.",,,,,,,,,,,,,,,,,,,,,,,,SKARA-1143,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2u6lf:",9223372036854775807,,,,,,,,,,,,,"2021-08-30 12:55;erikj;Handling review objects without a hash has ripple effects throughout the code. Still, I think we need to do it properly. I believe the same thing will happen to ReviewComments when the hash disappears. I'm opting to wrap the return value of Review::hash and ReviewComment::hash with Optional to properly force every caller to handle the situation.;;;","2021-08-30 13:22;erikj;GitLabMergeRequest::reviews was incorrectly adding the first commit hash to any review where we otherwise couldn't find one, even if the review was older than that commit. Since we are now handling non existing hashes in reviews, I changed this too.

Another consequence of this change is that a review that was previously considered just ""stale"" could now be completely invalid. I don't think we can reasonably count reviews that happened for source code that is no longer present in the PR/MR. This means that if a PR author rebases the code after receiving a review on it, then a new review will always be required.;;;","2021-08-31 12:09;roboduke;Changeset: 14015529
Author:    Erik Joelsson <erikj@openjdk.org>
Date:      2021-08-31 19:09:03 +0000
URL:       https://git.openjdk.java.net/skara/commit/140155295b523a02b331ca3ba85dcb20d3527fc7
;;;",,,,,,,,,,,,,,,,,,,,,,,
Recreated tag causes HostedRepositoryPool to fail fetch,SKARA-1144,5057608,Bug,Resolved,SKARA,Skara,software,darcy,,,P2,Fixed,erikj,erikj,erikj,2021-08-27 15:29,2021-08-31 12:10,2023-10-01 09:57,2021-08-31 12:10,,,,,,,,1.0,bots,,0,,,,,,,,,,,,,,,,,,,,,,"In jdk11u-dev, the tag jdk-11.0.13+1 was created and then recreated. This is causing trouble for (at least) the mlbridge bot which has local caches of this repo through the HostedRespositoryPool. The error looks like this:

java.io.UncheckedIOException: java.io.IOException: Unexpected exit code
'git fetch --recurse-submodules=on-demand --tags https://x-access-token:ghs_3YpQh266nWIxSsWMNSQAFuTeNMqk8e3Anvwo@github.com/openjdk/jdk11u-dev.git +d7f822f4b86413b676fb502215cba30d3f570e1e:hostedrepositorypool' exited with status: 1
[stdout]
[stderr]
> From https://github.com/openjdk/jdk11u-dev
>  + 9dd09a224a...d7f822f4b8 d7f822f4b86413b676fb502215cba30d3f570e1e -> hostedrepositorypool  (forced update)
>  ! [rejected]              jdk-11.0.13+1 -> jdk-11.0.13+1  (would clobber existing tag)
	at org.openjdk.skara.bots.mlbridge/org.openjdk.skara.bots.mlbridge.ArchiveWorkItem.run(ArchiveWorkItem.java:413)
	at org.openjdk.skara.bot/org.openjdk.skara.bot.BotRunner$RunnableWorkItem.runMeasured(BotRunner.java:185)
	at org.openjdk.skara.bot/org.openjdk.skara.bot.BotRunner$RunnableWorkItem.run(BotRunner.java:141)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:304)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1130)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:630)
	at java.base/java.lang.Thread.run(Thread.java:831)
Caused by: java.io.IOException: Unexpected exit code
'git fetch --recurse-submodules=on-demand --tags https://x-access-token:ghs_3YpQh266nWIxSsWMNSQAFuTeNMqk8e3Anvwo@github.com/openjdk/jdk11u-dev.git +d7f822f4b86413b676fb502215cba30d3f570e1e:hostedrepositorypool' exited with status: 1
[stdout]
[stderr]
> From https://github.com/openjdk/jdk11u-dev
>  + 9dd09a224a...d7f822f4b8 d7f822f4b86413b676fb502215cba30d3f570e1e -> hostedrepositorypool  (forced update)
>  ! [rejected]              jdk-11.0.13+1 -> jdk-11.0.13+1  (would clobber existing tag)
	at org.openjdk.skara.vcs/org.openjdk.skara.vcs.git.GitRepository.await(GitRepository.java:116)
	at org.openjdk.skara.vcs/org.openjdk.skara.vcs.git.GitRepository.fetch(GitRepository.java:501)
	at org.openjdk.skara.vcs/org.openjdk.skara.vcs.Repository.fetch(Repository.java:45)
	at org.openjdk.skara.forge/org.openjdk.skara.forge.HostedRepositoryPool.checkout(HostedRepositoryPool.java:184)
	at org.openjdk.skara.forge/org.openjdk.skara.forge.HostedRepositoryPool.checkout(HostedRepositoryPool.java:198)
	at org.openjdk.skara.forge/org.openjdk.skara.forge.PullRequestUtils.materialize(PullRequestUtils.java:163)
	at org.openjdk.skara.bots.mlbridge/org.openjdk.skara.bots.mlbridge.ArchiveWorkItem.run(ArchiveWorkItem.java:340)
	... 8 more

The HostedRepositoryPool::checkout method already has a fallback on certain failures where it will just nuke and recreate the repo from scratch. Unfortunately, this particular error isn't covered.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2u6kz:",9223372036854775807,,,,,,,,,,,,,"2021-08-30 09:59;erikj;Looking into Git a bit more, it's possible to use the --force flag to force updating of local tags when fetching. I think this is a better solution for the HostedRepositoryPool.;;;","2021-08-31 12:10;roboduke;Changeset: 34c770a9
Author:    Erik Joelsson <erikj@openjdk.org>
Date:      2021-08-31 19:09:43 +0000
URL:       https://git.openjdk.java.net/skara/commit/34c770a94b5bdebd9005fd4fa9840017ff6d694c
;;;",,,,,,,,,,,,,,,,,,,,,,,,
Source branch for /backport PRs is outdated,SKARA-1133,5057255,Bug,Resolved,SKARA,Skara,software,darcy,,,P3,Fixed,kcr,clanger,clanger,2021-08-24 08:24,2021-08-27 13:15,2023-10-01 09:57,2021-08-27 13:15,1.0,,,,,,,1.0,bots,,0,,,,,,,,,,,,,,,,,,,,,,"When I create backports to jdk11u-dev by commenting /backport on the original change, I see that the source branch of the pull request is based on an outdated version.

See this PR: https://github.com/openjdk/jdk11u-dev/pull/286

It feels like SKARA-1080, although this one should be fixed already.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,SKARA-1080,,,,,SKARA-1140,,,,,,,,,,,,,,,,,,,,,,,,"0|i2u50j:",9223372036854775807,,,,,,,,,,,,,"2021-08-24 08:59;kcr;As a workaround for this bug, I manually synced openjdk/jdk11u-dev master --> openjdk-bots/jdk11u-dev but the root cause is still there.

As I understand it from looking at SKARA-1080 it shouldn't matter whether the master branch of openjdk-bots/jdk11u-dev is up to date or not if the PRs are all based off of the upstream openjdk/jdk11u-dev master.;;;","2021-08-24 09:06;clanger;Yes, this is no workaround. I synced the master branch of the bots repository myself a few days ago but this didn't have an effect on my PRs. So maybe there's still something wrong in the code? Let me know if I can help you, e.g. by triggering another PR for test purposes to collect logs or such.;;;","2021-08-24 09:10;kcr;Ah, OK. There is something else wrong then. Yes, if you can create a new PR now, that would be helpful.;;;","2021-08-24 09:58;clanger;I did so here:
https://github.com/openjdk/jdk/commit/34397c4914925b990a5d74a238b01bb05d5b7c44#commitcomment-55366639
https://github.com/openjdk/jdk11u-dev/pull/291

The issue persists.;;;","2021-08-24 10:10;kcr;I think I can see what the bug is. It looks like the fix for SKARA-1080 was a partial solution that would only work when cloning a fresh repo. Over time it will get more and more stale.

The fix for SKARA-1080 was to clone from the target repo, openjdk/NAME, rather than openjdk-bots/NAME, but it didn't address the root cause, which is that it doesn't fetch from the target repo after checking out the target branch. So the PR will be based off the (stale) HEAD of the target branch at the time it was cloned.;;;","2021-08-27 13:15;roboduke;Changeset: 82a58618
Author:    Kevin Rushforth <kcr@openjdk.org>
Date:      2021-08-27 20:14:44 +0000
URL:       https://git.openjdk.java.net/skara/commit/82a586189d7e6f4ca6e172e863561f682da1beec
;;;",,,,,,,,,,,,,,,,,,,,
Fix incorrect identifier in result for biased locking revocation rule,JMC-7417,5059775,Bug,Resolved,JMC,Java Mission Control,software,hirt,The production time profiling and diagnostics tools-suite for the HotSpot JDK.,,P3,Fixed,hirt,hdafgard,hdafgard,2021-10-04 11:53,2022-04-06 22:30,2023-10-01 09:57,2022-01-24 21:33,,,,,,,,8.2.0,Mission Control Core,,0,,,,,,,,,,,,,,,,,,,,,,The result text for the biased locking revocation rule is using the incorrect identifier for the typed result.,,,,,,,,,,,JMC-7752,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2ujyj:",9223372036854775807,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@25ad7987,,,,,,,,,"2022-01-20 15:31;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jmc/pull/309
Date: 2021-09-20 06:40:14 +0000;;;","2022-01-24 21:33;roboduke;Changeset: 87be29c5
Author:    Motohiro Ohno <m-ohno@atware.co.jp>
Committer: Marcus Hirt <hirt@openjdk.org>
Date:      2022-01-25 05:32:06 +0000
URL:       https://git.openjdk.java.net/jmc/commit/87be29c5945628285bc3fc687adcd9b42faf0eac
;;;",,,,,,,,,,,,,,,,,,,,,,,,
Fix building JMC with Docker,JMC-7413,5059680,Bug,Resolved,JMC,Java Mission Control,software,hirt,The production time profiling and diagnostics tools-suite for the HotSpot JDK.,,P4,Fixed,hirt,hirt,hirt,2021-10-02 08:16,2022-04-06 22:25,2023-10-01 09:57,2021-10-04 02:00,,,,,,,,8.2.0,Release Engineering,,0,,,,,,,,,,,,,,,,,,,,,,"See[ Fix building JMC with Docker by dreis2211 · Pull Request #317 · openjdk/jmc (github.com).|https://github.com/openjdk/jmc/pull/317]",,,,,,,,,,,JMC-7703,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2ujdf:",9223372036854775807,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@5dc4c445,,,,,,,,,"2021-10-04 02:00;roboduke;Changeset: 085a4a69
Author:    Christoph Dreis <christoph.dreis@freenet.de>
Committer: Marcus Hirt <hirt@openjdk.org>
Date:      2021-10-04 08:57:44 +0000
URL:       https://git.openjdk.java.net/jmc/commit/085a4a6927588c010cdcf881fb02c0a6e7ced169
;;;",,,,,,,,,,,,,,,,,,,,,,,,,
Update the jacoco maven plugin,JMC-7412,5059679,Bug,Resolved,JMC,Java Mission Control,software,hirt,The production time profiling and diagnostics tools-suite for the HotSpot JDK.,,P4,Fixed,reinhapa,reinhapa,reinhapa,2021-10-01 22:41,2022-04-06 22:25,2023-10-01 09:57,2021-10-04 05:33,,,,,,,,8.2.0,Infrastructure,,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JMC-7706,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2ujd7:",9223372036854775807,,JMC 8.2 Sprint 1,,,,,,,,,,,"2021-10-04 05:33;roboduke;Changeset: 01fb8981
Author:    Patrick Reinhart <reinhapa@openjdk.org>
Committer: Marcus Hirt <hirt@openjdk.org>
Date:      2021-10-04 12:32:01 +0000
URL:       https://git.openjdk.java.net/jmc/commit/01fb89814cc63fa52ff5934103436b2d0007ff7b
;;;",,,,,,,,,,,,,,,,,,,,,,,,,
GPG signing in Github action fails,JMC-7411,5059678,Bug,Resolved,JMC,Java Mission Control,software,hirt,The production time profiling and diagnostics tools-suite for the HotSpot JDK.,,P4,Fixed,reinhapa,reinhapa,reinhapa,2021-10-01 22:22,2022-04-06 22:26,2023-10-01 09:57,2021-10-04 05:34,,,,,,,,8.2.0,Infrastructure,,0,,,,,,,,,,,,,,,,,,,,,,"Signing of artifacts using Github actions fails with the following errors:

{code:bash}
 gpg: signing failed: Inappropriate ioctl for device
 gpg: signing failed: Inappropriate ioctl for device
{code}
 
",,,,,,,,,,,JMC-7707,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2ujcz:",9223372036854775807,,JMC 8.2 Sprint 1,,,,,,,,,,,"2021-10-04 05:34;roboduke;Changeset: 4d413ee0
Author:    Patrick Reinhart <reinhapa@openjdk.org>
Committer: Marcus Hirt <hirt@openjdk.org>
Date:      2021-10-04 12:33:30 +0000
URL:       https://git.openjdk.java.net/jmc/commit/4d413ee06cb932f4e63969f8cdc3f549f9bd880e
;;;",,,,,,,,,,,,,,,,,,,,,,,,,
Update the spotless maven plugin,JMC-7409,5059653,Bug,Resolved,JMC,Java Mission Control,software,hirt,The production time profiling and diagnostics tools-suite for the HotSpot JDK.,,P4,Fixed,hirt,hirt,hirt,2021-10-01 09:06,2022-04-06 22:26,2023-10-01 09:57,2021-10-05 01:19,,,,,,,,8.2.0,Release Engineering,,0,,,,,,,,,,,,,,,,,,,,,,"I was also hoping to being able to configure it to barf when the modifier order is wrong, but apparently that is not possible, and - if it ever gets in, it will be part of the cleanup settings ([https://bugs.eclipse.org/bugs/show_bug.cgi?id=322494).] 

May be interesting to grab the ball there and run with it for someone. :) ",,,,,,,,,,,JMC-7710,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2uj7f:",9223372036854775807,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@5dc4c445,,,,,,,,,"2021-10-05 01:19;roboduke;Changeset: 3424e723
Author:    Marcus Hirt <hirt@openjdk.org>
Date:      2021-10-05 08:18:53 +0000
URL:       https://git.openjdk.java.net/jmc/commit/3424e723dba8cc0196697a9c2b0e771d30c17ac6
;;;",,,,,,,,,,,,,,,,,,,,,,,,,
Fix JFR Parser struct types hashcode,JMC-7403,5059385,Bug,Resolved,JMC,Java Mission Control,software,hirt,The production time profiling and diagnostics tools-suite for the HotSpot JDK.,,P2,Fixed,hirt,jbachorik,hirt,2021-09-28 01:53,2022-04-06 22:26,2023-10-01 09:57,2021-10-04 05:35,,,,,,,,8.2.0,Mission Control Core,,0,,,,,,,,,,,,,,,,,,,,,,"A bunch of JFR Parser struct types (eg. StructTypes.JfrFrame, StructTypes.JfrMethod) are using lazily initialized attributes which happen to be a part of hashCode/equals computations.
The problem is that the hashCode/equals computation does not force the attribute initialization so if someone adds an instance of one of those types to eg. a hashmap before accessing some of its fields via getters the hash code will be different than when it is done after accessing those fields. Also, which fields are accessed makes difference.

 

The proposed solution is to have guarded initialization of the state necessary for hashCode/equals computations and force init of all required fields there.",,,,,,,,,,,JMC-7708,,,,,,,,,,,,,,,,,,JMC-7349,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2uhjv:",9223372036854775807,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@250111f,,,,,,,,,"2021-09-28 01:54;hirt;See Egor's comment in the original issue.;;;","2021-10-04 05:35;roboduke;Changeset: 90165cfb
Author:    Marcus Hirt <hirt@openjdk.org>
Date:      2021-10-04 12:34:18 +0000
URL:       https://git.openjdk.java.net/jmc/commit/90165cfb10f573fb68e1d233e08e8d969ace2811
;;;",,,,,,,,,,,,,,,,,,,,,,,,
 jdk.unsupported/sun.reflect.ReflectionFactory.readObjectNoDataForSerialization uses wrong signature,JDK-8275137,5060082,Bug,Closed,JDK,JDK,software,duke,,,P4,Fixed,jboes,webbuggrp,webbuggrp,2021-10-10 16:35,2022-04-08 03:44,2023-10-01 09:57,2021-10-26 05:19,11,17,18,,,,,18,core-libs,,0,18ea,dcsaw,reproducer-other,webbug,,,,,,,,,,,,,,,,,,"A DESCRIPTION OF THE PROBLEM :
The deserialization method `readObjectNoData()` has no parameters (see serialization spec, or for example `Serializable` doc); however ReflectionFactory.readObjectNoDataForSerialization checks for the signature `readObjectNoData(ObjectInputStream)` (similarly the javadoc of the method sun.reflect.ReflectionFactory.readObjectNoDataForSerialization is also wrong).

Similarly the tests in `ReflectionFactoryTest` are also faulty / need improvements; they only manually invoke an ill-formed `readObjectNoData(ObjectInputStream)` method, but none of the tests seems to actually try deserialize data where a proper `readObjectNoData()` method would be called.


",,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8275392,,,,,,,,,,,,,,,,,,,,,,,generic,,,,,,,,,generic,,,,,"0|i2ulur:",9223372036854775807,b21,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@7e74daa7,,,,,,,Verified,,"2021-10-12 06:18;tongwan;Here are the document and code mentioned in the report:
https://docs.oracle.com/en/java/javase/17/docs/specs/serialization/input.html#the-readobject-method
https://github.com/openjdk/jdk/blob/master/src/java.base/share/classes/jdk/internal/reflect/ReflectionFactory.java#L480
https://github.com/openjdk/jdk/blob/master/test/jdk/sun/reflect/ReflectionFactory/ReflectionFactoryTest.java;;;","2021-10-12 07:07;alanb;This issue is about jdk.unsupported/sun.reflect.ReflectionFactory, a critical internal API (JEP 260). It may be used by 3rd party serialization libraries.;;;","2021-10-12 16:55;smarks;For what it's worth, Yawkat's Java browser doesn't show any uses of readObjectNoDataForSerialization in its index. Click on the grey right-pointing guillemets next to the method declaration.

https://code.yawk.at/java/17/jdk.unsupported/sun/reflect/ReflectionFactory.java

Of course, a more comprehensive corpus search could also be done.;;;","2021-10-12 20:58;pnarayanaswa;Additional Information from submitter
===========================
Adding to Stuart Marks' comment:
It looks like there is one usage here: https://github.com/jboss-remoting/jboss-marshalling/blob/9967cb7d4fcdebca515dc8ead4e53cd1161f4910/api/src/main/java9/org/jboss/marshalling/reflect/JDKSpecific.java#L62

However that MethodHandle is later only used without additional arguments (here: https://github.com/jboss-remoting/jboss-marshalling/blob/9967cb7d4fcdebca515dc8ead4e53cd1161f4910/api/src/main/java9/org/jboss/marshalling/reflect/JDKSpecific.java#L117) which suggests that it never picked up a readObjectNoData(ObjectInputStream) method (the one currently detected by ReflectionFactory) in reality, otherwise the invocation would have failed due to the missing ObjectInputStream argument.
(Found with https://sourcegraph.com/search?q=context:global+readObjectNoDataForSerialization+-file:ReflectionFactoryTest.java+-file:ReflectionFactory.java+-file:jdk.unsupported-9.sym.txt&patternType=literal);;;","2021-10-26 05:18;roboduke;Changeset: 4961373a
Author:    Julia Boes <jboes@openjdk.org>
Date:      2021-10-26 12:17:47 +0000
URL:       https://git.openjdk.java.net/jdk/commit/4961373a676126cd557f92a2e7bbc8c66b2976b1
;;;","2022-04-08 03:44;sqetools;verified;;;",,,,,,,,,,,,,,,,,,,,
/src/jdk.management.jfr/share/classes/module-info.java has non-canonical order,JDK-8275091,5059625,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,mgronlun,webbuggrp,webbuggrp,2021-10-01 02:22,2021-10-18 12:55,2023-10-01 09:57,2021-10-12 04:39,16.0.2,,,,,,,18,hotspot,,0,dcsswa,regression,reproducer-yes,webbug,,,,,,,,,,,,,,,,,,"A DESCRIPTION OF THE PROBLEM :
The canonical order of declarations inside the module-info.java file seems to follow the order:

`module some.module.name {
requires ...

requires transitive ...

exports ...

exports ... to ...

opens ... to ...

uses ...

provides ... with ...
}
`

The ""requires"" was changed to ""requires transitive"" as part of a larger change 8248564, but not reordered.

This is the only module-info.java file in the src/** directory that deviates from what appears to be the canonical order.


REGRESSION : Last worked in version 15

STEPS TO FOLLOW TO REPRODUCE THE PROBLEM :
Look at the /src/jdk.management.jfr/share/classes/module-info.java file. It reads:

module jdk.management.jfr {
    requires transitive jdk.jfr;
    requires jdk.management;

    requires transitive java.management;

....

EXPECTED VERSUS ACTUAL BEHAVIOR :
EXPECTED -
In order to stay consistent with the canonical order, this should have read:

module jdk.management.jfr {
    requires jdk.management;

    requires transitive java.management;
    requires transitive jdk.jfr;

ACTUAL -
module jdk.management.jfr {
    requires transitive jdk.jfr;
    requires jdk.management;

    requires transitive java.management;

....

CUSTOMER SUBMITTED WORKAROUND :
It is not a serious issue.

FREQUENCY : always


",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,generic,,,,,,,,,generic,,,,,"0|i2uj17:",9223372036854775807,b19,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@42995637,,,,,,,,,"2021-10-11 21:48;sswsharm;The src/jdk.management.jfr/share/classes/module-info.java file does not has canonical order.

Moving it to dev team for further evaluation.;;;","2021-10-12 04:39;roboduke;Changeset: b460d6dd
Author:    kabutz <heinz@javaspecialists.eu>
Committer: Markus Grönlund <mgronlun@openjdk.org>
Date:      2021-10-12 11:38:21 +0000
URL:       https://git.openjdk.java.net/jdk/commit/b460d6ddafcd1be76bcf407254f843df6bbfb70b
;;;",,,,,,,,,,,,,,,,,,,,,,,,
Implementation of Foreign Function & Memory API (Second incubator),JDK-8275063,5060136,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,mcimadamore,mcimadamore,mcimadamore,2021-10-11 08:33,2023-01-31 01:47,2023-10-01 09:57,2021-11-24 03:53,,,,,,,,18,core-libs,,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8268743,JDK-8270798,,JDK-8275064,,,,,JDK-8270798,JDK-8268743,,JDK-8277602,JDK-8272372,,,,JDK-8274073,JDK-8301471,,,,,,,,,,,,,,,,,,,,,,,"0|i2um6r:",9223372036854775807,b26,,,,,,,,,,,,"2021-11-24 03:53;roboduke;Changeset: 96e36071
Author:    Maurizio Cimadamore <mcimadamore@openjdk.org>
Date:      2021-11-24 11:51:16 +0000
URL:       https://git.openjdk.java.net/jdk/commit/96e36071b63b624d56739b014b457ffc48147c4f
;;;",,,,,,,,,,,,,,,,,,,,,,,,,
Exceptions thrown from non-void upcalls are not handled,JDK-8275061,5060134,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,jvernee,jvernee,jvernee,2021-10-11 08:09,2021-10-11 09:29,2023-10-01 09:57,2021-10-11 09:29,repo-panama,,,,,,,,tools,,0,foreign-memaccess+abi,,,,,,,,,,,,,,,,,,,,,Exceptions thrown from non-void upcalls are currently not handled,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2um6b:",9223372036854775807,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@2251e2f8,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Racy updates when releasing confined scopes,JDK-8275054,5060126,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,mcimadamore,mcimadamore,mcimadamore,2021-10-11 06:23,2021-10-11 09:48,2023-10-01 09:57,2021-10-11 09:48,repo-panama,,,,,,,,tools,,0,foreign-memaccess+abi,,,,,,,,,,,,,,,,,,,,,"A confined scope, even if it can only be acquired by the same thread as the owner thread, can still be released by different threads. This can happen in two cases:

1. the confined scope is acquired by another confined scope featuring implicit cleanup - in which case the cleaner thread will do the release

2. the confined scope is acquired, in the same thread, by a shared scope. Since a shared scope can be closed by any other thread, it follows that release can also be done by any thread.

In both cases, this can lead to a racy update of the lock count: there could be release vs. release races, but also acquire vs. release races too.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2um4j:",9223372036854775807,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@2251e2f8,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
AArch64: Severe AES/GCM slowdown on MacOS for short blocks,JDK-8275052,5060124,Bug,Closed,JDK,JDK,software,duke,,,P2,Fixed,aph,aph,aph,2021-10-11 05:51,2022-01-10 16:44,2023-10-01 09:57,2021-10-28 08:52,18,,,,,,,18,hotspot,,0,performance,,,,,,,,,,,,,,,,,,,,,"This is more of the fallout from JDK-8273297.
We've noticed that blocks of less than 8kbytes are very slowly encrypted with AES/GCM . This is because of incorrect flag handling in vm_version_bsd_aarch64.cpp.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8273297,,,,,,,,,,aarch64,,,,,,,,,os_x,,,,,"0|i2um43:",9223372036854775807,b22,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,Verified,,"2021-10-28 08:52;roboduke;Changeset: cb989cf3
Author:    Andrew Haley <aph@openjdk.org>
Date:      2021-10-28 15:51:29 +0000
URL:       https://git.openjdk.java.net/jdk/commit/cb989cf3a182ee07fe127b4536e7ff4213f31eaf
;;;",,,,,,,,,,,,,,,,,,,,,,,,,
Shenandoah: Correct ordering of requested gc cause and gc request flag,JDK-8275051,5060123,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,zgu,zgu,zgu,2021-10-11 05:37,2021-10-20 05:50,2023-10-01 09:57,2021-10-12 04:59,11-pool,17-pool,18,8-shenandoah,,,,18,hotspot,,0,gc-shenandoah,jdk11u-fix-request,jdk11u-fix-yes,jdk17u-fix-request,jdk17u-fix-yes,redhat-interest,,,,,,,,,,,,,,,,"To ensure read side sees latest requested gc cause, when gc request flag is set.",,,,,,,,,,,JDK-8275637,JDK-8275363,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2um3v:",9223372036854775807,b19,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6b00f96c,,,,,,,,,"2021-10-12 04:59;roboduke;Changeset: 1ab64143
Author:    Zhengyu Gu <zgu@openjdk.org>
Date:      2021-10-12 11:58:35 +0000
URL:       https://git.openjdk.java.net/jdk/commit/1ab64143c06e33e23172dd77c39e434443347364
;;;","2021-10-15 10:21;zgu;Fix Request (17u)

I would like to backport this Shenandoah specific patch to 17u.

The patch corrects the order of a couple of GC flags, ensure GC sees latest GC cause when a GC is requested.

The original patch applies cleanly to 17u.

;;;","2021-10-18 06:25;zgu;11u code review: https://github.com/openjdk/jdk11u-dev/pull/533
;;;","2021-10-19 05:07;zgu;Fix Request (11u)

I would like to backport this Shenandoah specific patch to 11u.

The patch corrects the order of a couple of GC flags, ensure GC sees latest GC cause when a GC is requested. The original patch does not apply cleanly, 11u patch has been reviewed by @phh.

;;;",,,,,,,,,,,,,,,,,,,,,,
[ZGC] missing null check in ZNMethod::log_register,JDK-8275049,5060121,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,mdoerr,mdoerr,mdoerr,2021-10-11 05:14,2021-10-18 12:57,2023-10-01 09:57,2021-10-13 00:14,17,18,,,,,,18,hotspot,,0,jdk17u-fix-request,jdk17u-fix-yes,zgc,,,,,,,,,,,,,,,,,,,"We are getting SIGSEGV when running the test ""runtime/logging/RedefineClasses.java"" with ZGC on PPC64.

The VM crashes while trying to read (*p)->klass() in ""ZNMethod::log_register"". ‘p’ points to an Oops table slot in an nmethod which contains a null Oop.

This happens on PPC64, because C1 allocates Oop slots for PatchingStubs and initializes them to null. (The actual Oop will get inserted during execution time when the PatchingStub gets executed.)
""ZNMethod::log_register"" needs to be able to deal with null Oops on PPC64 for this reason.

Note: C1 PatchingStubs are not used on aarch64 and x86_64 uses Oops embedded into the instruction stream instead of the nmethod Oop slots.
",,,,,,,,,,,JDK-8275399,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8274851,,,,,,,,,,ppc,,,,,,,,,,,,,,"0|i2um3f:",9223372036854775807,b19,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6b00f96c,,,,,,,,,"2021-10-13 00:14;roboduke;Changeset: cf828673
Author:    Martin Doerr <mdoerr@openjdk.org>
Date:      2021-10-13 07:12:52 +0000
URL:       https://git.openjdk.java.net/jdk/commit/cf828673a9b76fd3f26db9a3f714166861a65c9e
;;;","2021-10-15 05:56;mdoerr;Fix Request (17u): 
Prerequisite for backport of ZGC on PPC64. VM crashes in logging code without this fix. Tested in jdk18. No regression. Fix is simple and applies cleanly.;;;",,,,,,,,,,,,,,,,,,,,,,,,
Refer to JEP 378 in Programmer's Guide to Text Blocks,JDK-8275046,5060118,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,rgallard,prappo,prappo,2021-10-11 05:01,2021-10-28 11:11,2023-10-01 09:57,2021-10-28 11:11,17,,,,,,,17.0.1,docs,,0,,,,,,,,,,,,,,,,,,,,,,"Programmer's Guide to Text Blocks ( https://docs.oracle.com/en/java/javase/17/text-blocks/index.html ) refers to two JEPs on Text Blocks. The first time it refers to the standard feature JEP 378, the second time it refers to the first preview feature JEP 355:

> JEP 378 adds the language feature text blocks to Java SE 15 and later. While the JEP explains the feature in great detail, it's not always apparent how the feature can and should be used.

> The algorithm for determining incidental white space is described in JEP 355 in scary detail.

The context of these references suggests that the reference to JEP 355 is simply outdated and should be changed to a reference to JEP 378.

The Description section of JEP 378 explicitly states that:

> This section is identical to the same section in this JEP's predecessor, JEP 355, except for the addition of the subsection on new escape sequences.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2um2r:",9223372036854775807,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4eba8c33,,,,,,,,,"2021-10-28 11:11;rgallard;Page updated: https://docs.oracle.com/en/java/javase/17/text-blocks/index.html;;;",,,,,,,,,,,,,,,,,,,,,,,,,
Test vmTestbase/nsk/sysdict/vm/stress/btree/btree011/btree011.java crashes with memory exhaustion on Windows,JDK-8275037,5060105,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,hseigel,dholmes,dholmes,2021-10-11 02:13,2022-03-17 01:33,2023-10-01 09:57,2021-11-17 06:26,18,,,,,,,18,hotspot,,0,intermittent,jdk17u-fix-request,jdk17u-fix-yes,tier5,,,,,,,,,,,,,,,,,," stdout: [#
# There is insufficient memory for the Java Runtime Environment to continue.
# Native memory allocation (mmap) failed to map 3078619136 bytes for G1 virtual space
# An error report file with more information is saved as:
# T:\\testoutput\\test-support\\jtreg_open_test_hotspot_jtreg_vmTestbase_nsk_sysdict\\scratch\\1\\hs_err_pid52256.log
];
 stderr: [Java HotSpot(TM) 64-Bit Server VM warning: INFO: os::commit_memory(0x000000061f800000, 3078619136, 0) failed; error='The paging file is too small for this operation to complete' (DOS error/errno=1455)
Java HotSpot(TM) 64-Bit Server VM warning: INFO: os::commit_memory(0x000000061f800000, 3078619136, 0) failed; error='The paging file is too small for this operation to complete' (DOS error/errno=1455)
]
 exitValue = 1",,,,,,,,,,,JDK-8281256,JDK-8283299,,,,,,,,,,,,,,,,,,JDK-8275575,,,,,,,,,,,,,,,,,,,,,,,,,,,,,windows,,,,,"0|i2ulzv:",9223372036854775807,b24,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,,,"2021-10-11 02:16;dholmes;Similar problem also previously seen with: vmTestbase/nsk/sysdict/vm/stress/btree/btree009/btree009.java;;;","2021-10-12 11:11;mseledtsov;ILW = HLM = P3;;;","2021-11-10 11:24;hseigel;All the OOM failures occur when running javac to compile BTree.java and BtreeInfo.java and the platform is windows-x64-debug.;;;","2021-11-17 06:26;roboduke;Changeset: 9f2f46ee
Author:    Harold Seigel <hseigel@openjdk.org>
Date:      2021-11-17 14:25:17 +0000
URL:       https://git.openjdk.java.net/jdk/commit/9f2f46ee4576d9cd0190530949e5e50f796a6bdc
;;;","2021-11-17 13:13;dcubed;The fix is in jdk-18+24-1606.;;;","2022-03-14 05:29;goetz;Fix request [17u]

I backport this for parity with 17.0.4-oracle.
No risk, only a test change.
Clean backport.
SAP nightly testing passed.;;;","2022-03-14 05:36;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk17u-dev/pull/249
Date: 2022-03-14 12:31:13 +0000;;;",,,,,,,,,,,,,,,,,,,
"Drag and drop a file produces NullPointerException Cannot read field ""dragboard""",JDK-8275033,5059998,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,tsayao,webbuggrp,webbuggrp,2021-10-07 16:18,2023-01-26 05:50,2023-10-01 09:57,2023-01-20 14:12,jfx17,jfx18,jfx19,,,,,jfx21,javafx,,0,dcspn,reproducer-other,webbug,,,,,,,,,,,,,,,,,,,"ADDITIONAL SYSTEM INFORMATION :
GNU/LINUX Fedora 34 (x86_64)
Kernel 5.14.9-200.fc34.x86_64
openjdk 17 2021-09-14
OpenJDK Runtime Environment 21.9 (build 17+35)
OpenJDK 64-Bit Server VM 21.9 (build 17+35, mixed mode, sharing)

A DESCRIPTION OF THE PROBLEM :
Using Fedora 34 (GNOME), dragging and dropping a file on a JavaFX GridPane will produce a NullPointerException:

Exception in thread ""JavaFX Application Thread"" java.lang.NullPointerException: Cannot read field ""dragboard"" because ""this.this$0.dndGesture"" is null
	at javafx.graphics/javafx.scene.Scene$DropTargetListener.drop(Scene.java:3004)
	at javafx.graphics/com.sun.javafx.tk.quantum.GlassSceneDnDEventHandler.lambda$handleDragDrop$2(GlassSceneDnDEventHandler.java:111)
	at java.base/java.security.AccessController.doPrivileged(AccessController.java:399)
	at javafx.graphics/com.sun.javafx.tk.quantum.GlassSceneDnDEventHandler.handleDragDrop(GlassSceneDnDEventHandler.java:107)
	at javafx.graphics/com.sun.javafx.tk.quantum.GlassViewEventHandler.lambda$handleDragDrop$11(GlassViewEventHandler.java:772)
	at javafx.graphics/com.sun.javafx.tk.quantum.QuantumToolkit.runWithoutRenderLock(QuantumToolkit.java:424)
	at javafx.graphics/com.sun.javafx.tk.quantum.GlassViewEventHandler.handleDragDrop(GlassViewEventHandler.java:771)
	at javafx.graphics/com.sun.glass.ui.View.handleDragDrop(View.java:714)
	at javafx.graphics/com.sun.glass.ui.View.notifyDragDrop(View.java:1043)
	at javafx.graphics/com.sun.glass.ui.gtk.GtkApplication._runLoop(Native Method)
	at javafx.graphics/com.sun.glass.ui.gtk.GtkApplication.lambda$runLoop$11(GtkApplication.java:290)
	at java.base/java.lang.Thread.run(Thread.java:833)

STEPS TO FOLLOW TO REPRODUCE THE PROBLEM :
Git clone this repository (branch feature/drag-and-drop):
https://github.com/CodeDead/opal/tree/feature/drag-and-drop

Run the application, and drag and drop a file on the main window, and regardless of what you do, you will always get the following exception:
Exception in thread ""JavaFX Application Thread"" java.lang.NullPointerException: Cannot read field ""dragboard"" because ""this.this$0.dndGesture"" is null

Problematic code in question:

    /**
     * Method that is invoked when a drag-over event is occurring
     *
     * @param dragEvent The {@link DragEvent} object
     */
    @FXML
    private void onDragOver(final DragEvent dragEvent) {
        if (dragEvent.getGestureSource() != scpMain && dragEvent.getDragboard().hasFiles()) {
            dragEvent.acceptTransferModes(TransferMode.COPY_OR_MOVE);
        }
        dragEvent.consume();
    }

    /**
     * Method that is invoked when a drag-drop event occurred
     *
     * @param dragEvent The {@link DragEvent} object
     */
    @FXML
    public void onDragDropped(final DragEvent dragEvent) {
        final Dragboard db = dragEvent.getDragboard();
        boolean success = false;
        
        if (db.hasFiles()) {
            success = true;
        }

        dragEvent.setDropCompleted(success);
        dragEvent.consume();
    }

EXPECTED VERSUS ACTUAL BEHAVIOR :
EXPECTED -
The exception should not happen
ACTUAL -
The NullPointerException happens every single time you drag and drop a file

---------- BEGIN SOURCE ----------
Code available on GitHub:
https://github.com/CodeDead/opal/tree/feature/drag-and-drop

Please make sure to use the `feature/drag-and-drop` branch
---------- END SOURCE ----------

CUSTOMER SUBMITTED WORKAROUND :
None found

FREQUENCY : always


",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8293894,,JDK-8165749,,,,,,,,,,,,,,,,,,x86_64,,,,,,,,,linux,,,,,"0|i2ulc3:",9223372036854775807,b02,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4f591050,,,,,,,,,"2021-10-11 02:06;pnarayanaswa;Looks like duplicate of JDK-8165749, 
Mail to submitter
=============
Can you please verify if the issue is reproducible in JavaFX version 17.0.0.1.
https://gluonhq.com/products/javafx/;;;","2021-10-11 06:53;kcr;I tend to agree that this looks like JDK-8165749, which was fixed in JavaFX 17. I suspect that the submitter is running an earlier version of JavaFX (there is no clear indication of what version of FX was used).;;;","2021-10-12 19:56;pnarayanaswa;Additional information from submitter:
===========================
The issue is reproducible on the following versions of JavaFX:
17.0.0.1
18-ea+1
18-ea+2
18-ea+3

I have not tested the 18-ea+4 version yet.
;;;","2021-10-13 13:47;mhanl;Just tried it on Windows and it worked for me. Might be linux specific. 
Anyway a minimum reproducable example would help.;;;","2021-10-20 22:48;pnarayanaswa;Mail to submitter:
=============
Please can you share minimal reproducible testcase. ;;;","2021-11-22 23:36;pnarayanaswa;Additional information not received from submitter, closing this issue as incomplete, shall reopen if any updates received. ;;;","2022-09-15 04:32;nlisker;The submitter added this info:

======

package org.example;

import javafx.application.Application;
import javafx.scene.Scene;
import javafx.scene.input.Dragboard;
import javafx.scene.input.TransferMode;
import javafx.scene.layout.StackPane;
import javafx.stage.Stage;

public class Main extends Application {
    public static void main(String[] args) {
        launch(args);
    }

    @Override
    public void start(final Stage primaryStage) {
        final StackPane root = new StackPane();
        primaryStage.setScene(new Scene(root, 300, 250));
        primaryStage.show();

        root.setOnDragOver(event -> {
            if (event.getGestureSource() != root && event.getDragboard().hasFiles()) {
                event.acceptTransferModes(TransferMode.COPY_OR_MOVE);
            }
            event.consume();
        });

        root.setOnDragDropped(event -> {
            final Dragboard db = event.getDragboard();
            boolean success = false;
            if (db.hasFiles()) {
                db.getFiles().forEach(f -> System.out.println(f.getAbsolutePath()));
                success = true;
            }
            event.setDropCompleted(success);
            event.consume();
        });
    }
}

Steps to reproduce:

Run an up-to-date Linux OS (e.g. Fedora 36 / ..)

Copy, paste and run the code snippet

Drag and drop a file to the window

Watch the exception output

It doesn't crash the JavaFX application, but it does produce a NullPointerException.

More people are having the same issue over in this repo:
https://github.com/JabRef/jabref/issues/7072

PS. As far as JavaFX versions are concerned, the bug is present from JFX 17 (possibly earlier, I haven't checked) up to all current pre-releases and the recently released version 19.

======

I'm reopening for further inspection. I don't use Fedora so can't verify myself.;;;","2022-09-15 04:55;nlisker;[~tsayao] Do you have any insight into this?;;;","2023-01-19 07:15;tsayao;It's reproducible on Wayland. It might have something to do with event order. I'll take a look.;;;","2023-01-19 08:22;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jfx/pull/1005
Date: 2023-01-19 16:16:18 +0000;;;","2023-01-20 14:12;dukebot;Changeset: 294e82e6
Author:    Thiago Milczarek Sayao <tsayao@openjdk.org>
Date:      2023-01-20 22:09:33 +0000
URL:       https://git.openjdk.org/jfx/commit/294e82e636a74aab73491c4dea9a31a97c389353
;;;",,,,,,,,,,,,,,,
runtime/ErrorHandling/MachCodeFramesInErrorFile.java fails when hsdis is present,JDK-8275031,5060100,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,shade,shade,shade,2021-10-11 01:51,2023-07-04 23:44,2023-10-01 09:57,2021-10-11 23:23,18,,,,,,,18,hotspot,,0,hs_err,jdk17-graalvm,jdk17u-fix-request,jdk17u-fix-yes,noreg-self,oracle-triage-18,ursqe-triaged,,,,,,,,,,,,,,,"tier1 test that is newly added by JDK-8272586 fails on hsdis-enabled machine here:

$ CONF=linux-x86_64-server-fastdebug make run-test TEST=runtime/ErrorHandling/MachCodeFramesInErrorFile.java

STDERR:
java.lang.RuntimeException: Mach code headers: []

Extracted MachCode:
null

Extracted native frames:
J 15 c2 MachCodeFramesInErrorFile$Crasher.method3(J)V (19 bytes) @ 0x00007f83b0ab9377 [0x00007f83b0ab9340+0x0000000000000037]
J 14 c2 MachCodeFramesInErrorFile$Crasher.method2(J)V (13 bytes) @ 0x00007f83b0ab977c [0x00007f83b0ab9740+0x000000000000003c]
j  MachCodeFramesInErrorFile$Crasher.method1(J)V+9
J 12 c2 MachCodeFramesInErrorFile$Crasher.main([Ljava/lang/String;)V (7 bytes) @ 0x00007f83b0ab9e38 [0x00007f83b0ab9e20+0x0000000000000018]
v  ~StubRoutines::call_stub
V  [libjvm.so+0xe75324]  JavaCalls::call_helper(JavaValue*, methodHandle const&, JavaCallArguments*, JavaThread*)+0x504
V  [libjvm.so+0xf99f21]  jni_invoke_static(JNIEnv_*, JavaValue*, _jobject*, JNICallType, _jmethodID*, JNI_ArgumentPusher*, JavaThread*) [clone .isra.0] [clone .constprop.1]+0x331
V  [libjvm.so+0xf9d5f9]  jni_CallStaticVoidMethod+0x1c9
C  [libjli.so+0x528e]  JavaMain+0xc2e
C  [libjli.so+0x7f3d]  ThreadJavaMain+0xd: expected true, was false
	at jdk.test.lib.Asserts.fail(Asserts.java:594)
	at jdk.test.lib.Asserts.assertTrue(Asserts.java:486)
	at MachCodeFramesInErrorFile.main(MachCodeFramesInErrorFile.java:119)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:76)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:51)
	at java.base/java.lang.reflect.Method.invoke(Method.java:569)
	at com.sun.javatest.regtest.agent.MainActionHelper$AgentVMRunnable.run(MainActionHelper.java:312)
	at java.base/java.lang.Thread.run(Thread.java:833)

JavaTest Message: Test threw exception: java.lang.RuntimeException
JavaTest Message: shutting down test
",,,,,,,,,,,JDK-8310375,JDK-8310610,JDK-8311438,,,,,,,,,,,,,,,,,,,,,,JDK-8272586,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2ulyr:",9223372036854775807,b19,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2021-10-11 07:03;chagedorn;ILW = Test failure when hsdis is present, single test in tier1, no workaround = MMH = P3;;;","2021-10-11 23:23;roboduke;Changeset: a5f09d10
Author:    Aleksey Shipilev <shade@openjdk.org>
Date:      2021-10-12 06:22:13 +0000
URL:       https://git.openjdk.java.net/jdk/commit/a5f09d1088d9dd610139370739e9fbd6e34416cb
;;;","2023-06-19 06:14;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/1446
Date: 2023-06-15 16:57:40 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,
Unable to inline vectmask convert,JDK-8275025,5060093,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,njian,njian,njian,2021-10-10 22:51,2021-10-11 03:16,2023-10-01 09:57,2021-10-11 03:16,repo-panama,,,,,,,repo-panama,hotspot,,0,,,,,,,,,,,,,,,,,,,,,,"Due to incorrect vectmask type checking in inline_vector_convert(), vectmask cast operations are not able to inline. Should be:

@@ -2414,8 +2414,8 @@ bool LibraryCallKit::inline_vector_convert() {
   // where certain masks (depending on the species) are either propagated
   // through a vector or predicate register.
   if (is_mask &&
-      ((src_type->isa_vect() && dst_type->isa_vectmask()) ||
-      (dst_type->isa_vect() && src_type->isa_vectmask()))) {
+      ((src_type->isa_vectmask() == NULL && dst_type->isa_vectmask()) ||
+       (dst_type->isa_vectmask() == NULL && src_type->isa_vectmask()))) {
     return false;
   }",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8274631,,,,,,,,,,generic,,,,,,,,,generic,,,,,"0|i2ulx7:",9223372036854775807,,,,,,,,,,,,,"2021-10-10 23:02;njian;Patch:

diff --git a/src/hotspot/share/opto/vectorIntrinsics.cpp b/src/hotspot/share/opto/vectorIntrinsics.cpp
index 70f84104b9b..198f43efada 100644
--- a/src/hotspot/share/opto/vectorIntrinsics.cpp
+++ b/src/hotspot/share/opto/vectorIntrinsics.cpp
@@ -2414,8 +2414,8 @@ bool LibraryCallKit::inline_vector_convert() {
   // where certain masks (depending on the species) are either propagated
   // through a vector or predicate register.
   if (is_mask &&
-      ((src_type->isa_vect() && dst_type->isa_vectmask()) ||
-      (dst_type->isa_vect() && src_type->isa_vectmask()))) {
+      ((src_type->isa_vectmask() == NULL && dst_type->isa_vectmask()) ||
+       (dst_type->isa_vectmask() == NULL && src_type->isa_vectmask()))) {
     return false;
   }
 
@@ -2481,8 +2481,8 @@ bool LibraryCallKit::inline_vector_convert() {
       op = gvn().transform(VectorCastNode::make(cast_vopc, op, elem_bt_to, num_elem_to));
     } else {
       if (is_mask) {
-        if((dst_type->isa_vectmask() && src_type->isa_vectmask()) ||
-           (type2aelembytes(elem_bt_from) == type2aelembytes(elem_bt_to))) {
+        if ((dst_type->isa_vectmask() && src_type->isa_vectmask()) ||
+            (type2aelembytes(elem_bt_from) == type2aelembytes(elem_bt_to))) {
           op = gvn().transform(new VectorMaskCastNode(op, dst_type));
         } else {
           // Special handling for casting operation involving floating point types.;;;",,,,,,,,,,,,,,,,,,,,,,,,,
Test serviceability/sa/TestJmapCore.java fails with: java.io.IOException: Stack frame 0x4 not found,JDK-8275021,5060089,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,lzang,dholmes,dholmes,2021-10-10 21:20,2021-10-18 12:55,2023-10-01 09:57,2021-10-11 08:28,18,,,,,,,18,hotspot,,0,tencent-interest,tier2,tier4,tier5,tier6,tier7,,,,,,,,,,,,,,,,"Following  the integration of JDK-8274620, which introduced a buffered output stream, we now see this failure:

----------System.err:(18/998)----------

java.io.IOException: Stack frame 0x4 not found
	at jdk.test.lib.hprof.parser.HprofReader.read(HprofReader.java:335)
	at jdk.test.lib.hprof.parser.Reader.readFile(Reader.java:95)
	at jdk.test.lib.hprof.HprofParser.parse(HprofParser.java:85)
	at jdk.test.lib.hprof.HprofParser.parse(HprofParser.java:54)
	at TestJmapCore.test(TestJmapCore.java:106)
	at TestJmapCore.main(TestJmapCore.java:70)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:76)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:51)
	at java.base/java.lang.reflect.Method.invoke(Method.java:569)
	at com.sun.javatest.regtest.agent.MainActionHelper$AgentVMRunnable.run(MainActionHelper.java:312)
	at java.base/java.lang.Thread.run(Thread.java:833)


Presumably there is a missing flush/close causing the missing output.

Failures on macOs only so far.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,x86_64,,,,,,,18,,,,,,,"0|i2ulwb:",9223372036854775807,b19,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@714e388c,,,,,,,,,"2021-10-10 21:53;cjplummer;>  Presumably there is a missing flush/close causing the missing output. 

There is a lot of chaining of OutputStreams, but the outermost one is flushed before closing. Does this not propagate to all the intermediate OutputStreams?;;;","2021-10-10 22:03;cjplummer;DataOutpuStream.close() (via FilterOutputStream) calls flush() before closing. flush() calls out.flush(), and ""out""  is the newly introduced BufferedOutputStream. close() then calls out.close(). So I don't see what more to do here.
;;;","2021-10-10 22:48;cjplummer;Seems to fail on every OSX run. I tried adding an explicit flush of the BufferedOutputStream, but that didn't help.;;;","2021-10-10 23:01;lzang;This may not related to the flush of BufferedOutputStream. I am investigating the root cause, will update asap, Thanks.;;;","2021-10-10 23:25;cjplummer;It fails every run on OSX with your fix in place. It passes when I undo it. It might be that the introduction of BufferedOutputStream is triggering a latent bug elsewhere in the code.;;;","2021-10-11 02:08;dholmes;Also causing failure of sun/tools/jhsdb/JShellHeapDumpTest.java

If no quick fix coming we will need to ProblemList these tests as the failures are creating a lot of noise in the CI.;;;","2021-10-11 02:10;dholmes;JShellHeapDumpTest failure seen on Windows with slightly different form:

Test ERROR java.io.IOException\: Stack frame 0x5ce6f9f00000004 not found;;;","2021-10-11 02:13;lzang;I am investigating the issue, but I think it is reasonable to problemList it at present.;;;","2021-10-11 02:57;lzang;The root cause has been identified.  I will upload a patch by EOD today. ;;;","2021-10-11 03:32;lzang;I have uploaded the fix. 
The root cause is that when not using segmented heap dump,there is logic for calculating class record size with file position. So there must be a flush before getting the pos of the file. 
This is why after introducing the BufferedOutputStream causes the problem - the data written calculated by file position is incorrect without the flush().

This also makes me think that maybe the code could be simplified by not using position of the file. Which can unify the data length calculation for both segmented and non-segmented dump, but IMO it is not part of this fix, I will create a new bug to investigate.

Thanks.;;;","2021-10-11 05:01;dholmes;Also test: sun/tools/jhsdb/HeapDumpTestWithActiveProcess.java;;;","2021-10-11 08:28;roboduke;Changeset: 3f01d03a
Author:    Lin Zang <lzang@openjdk.org>
Date:      2021-10-11 15:27:28 +0000
URL:       https://git.openjdk.java.net/jdk/commit/3f01d03a10cb3f647735ed4bbea1768ff18bf8f2
;;;",,,,,,,,,,,,,,
"Improve discussion of serialization method declarations in java.io.Object{Input, Output}Stream",JDK-8275013,5060079,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,darcy,darcy,darcy,2021-10-10 13:09,2021-10-20 17:32,2023-10-01 09:57,2021-10-15 09:19,18,,,,,,,18,core-libs,,0,noreg-doc,,,,,,,,,,,,,,,,,,,,,The discussion of the serialization method declarations in java.io.ObjectInputStream and java.io.ObjectOutputStream is not consistent and should be improved.,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8275014,,,,,,,,JDK-8202056,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2ulu3:",9223372036854775807,b20,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@7e74daa7,,,,,,,,,"2021-10-15 09:19;roboduke;Changeset: 8c4da9c1
Author:    Joe Darcy <darcy@openjdk.org>
Date:      2021-10-15 16:17:29 +0000
URL:       https://git.openjdk.java.net/jdk/commit/8c4da9c15fec7bd27e243e9a6c9ebcad63109506
;;;",,,,,,,,,,,,,,,,,,,,,,,,,
gtest build failure due to stringop-overflow warning with gcc11,JDK-8275008,5060069,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,jiefu,jiefu,jiefu,2021-10-10 05:56,2023-03-31 03:04,2023-10-01 09:57,2021-10-11 03:52,17,18,,,,,,18,infrastructure,,0,amazon-interest,jdk11u-fix-request,jdk11u-fix-yes,jdk17u-fix-request,jdk17u-fix-yes,tencent-interest,,,,,,,,,,,,,,,,"* For target hotspot_variant-server_libjvm_gtest_objs_test_guardedMemory.o:
In file included from /usr/include/string.h:495,
                 from /home/jdk/src/hotspot/share/utilities/globalDefinitions_gcc.hpp:35,
                 from /home/jdk/src/hotspot/share/utilities/globalDefinitions.hpp:35,
                 from /home/jdk/src/hotspot/share/memory/allocation.hpp:29,
                 from /home/jdk/test/hotspot/gtest/memory/test_guardedMemory.cpp:25:
In function 'void* memset(void*, int, size_t)',
    inlined from 'virtual void GuardedMemory_buffer_overrun_tail_Test::TestBody()' at /home/jdk/test/hotspot/gtest/memory/test_guardedMemory.cpp:125:11:
/usr/include/x86_64-linux-gnu/bits/string_fortified.h:71:33: error: 'void* __builtin_memset(void*, int, long unsigned int)' writing between 2 and 262144 bytes into a region of size 0 overflows the destination [-Werror=stringop-overflow=]
   71 |   return __builtin___memset_chk (__dest, __ch, __len, __bos0 (__dest));
      |          ~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
cc1plus: all warnings being treated as errors",,,,,,,,,,,JDK-8275088,JDK-8292819,JDK-8305357,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2ulrv:",9223372036854775807,b19,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@429c566,,,,,,,,,"2021-10-11 03:52;roboduke;Changeset: c55dd365
Author:    Jie Fu <jiefu@openjdk.org>
Date:      2021-10-11 10:51:39 +0000
URL:       https://git.openjdk.java.net/jdk/commit/c55dd365e3463670697b09de0ff70877203e5a69
;;;","2021-10-11 06:11;dbuck;Removing jdk17u-fix-request label for now. Please see rule 1 (https://openjdk.java.net/projects/jdk-updates/approval.html).;;;","2021-10-11 06:26;jiefu;Fix request

I'd like to backport this patch to jdk17u.
It will fix the gtest build failure with gcc11.
It can be applied cleanly.
The risk is low since only one warning is disabled in the build script.;;;","2022-08-19 12:17;dlutker;Fix request (11u)

Amazon has started seeing this when building RPMs on AmazonLinux 2022 which uses hardened defaults for GCC. This is low risk since just disabling a warning in test code that is expected.;;;","2022-08-19 12:36;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk11u-dev/pull/1333
Date: 2022-08-18 23:01:27 +0000;;;",,,,,,,,,,,,,,,,,,,,,
Java fails to start with null charset if LC_ALL is set to certain locales,JDK-8275007,5060064,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,naoto,webbuggrp,webbuggrp,2021-10-09 13:18,2021-11-25 00:25,2023-10-01 09:57,2021-11-17 17:20,11,17,18,,,,,18,core-libs,,0,dcsaw,noreg-hard,regression,reproducer-yes,webbug,,,,,,,,,,,,,,,,,"ADDITIONAL SYSTEM INFORMATION :
Debian 12 testing/bookworm amd64

A DESCRIPTION OF THE PROBLEM :
Java app fails to start if LC_ALL is set to locale whose charset is not in the list known by java.nio.Charset

This issue manifested during reproducibility test of Kodi on Debian bookworm using reprotest. For those not familiar with reproducible builds, reprotest performs first build of Debian or RPM package with fixed set of environment, reported kernel (uname -m), build path, locale, timezone and local time etc then does the second build of the same package with totally different (varied) ingredients.

Locale on the experiment build is chosen of: fr_CH.UTF-8, kk_KZ.RK1048 es_ES.ISO-8859-1, zh_CN.GB1232
While es_ES.ISO-8859-1 and fr_CH.UTF-8 have charsets known to java.nio.Charset (Latin and UTF-8, respectively),
Kazakh locale (kk_KZ.RK1048) charset is not known.

The easiest Dockerfile reproducer shows the stacktrace running ""java -version"":

# java -version
Error occurred during initialization of VM
java.lang.IllegalArgumentException: Null charset name
        at java.nio.charset.Charset.lookup(java.base/Charset.java:455)
        at java.nio.charset.Charset.defaultCharset(java.base/Charset.java:608)
        at java.lang.StringCoding.decode(java.base/StringCoding.java:316)
        at java.lang.String.<init>(java.base/String.java:592)
        at java.lang.String.<init>(java.base/String.java:614)
        at java.lang.System.initProperties(java.base/Native Method)
        at java.lang.System.initPhase1(java.base/System.java:1948)

STEPS TO FOLLOW TO REPRODUCE THE PROBLEM :
Build the following Dockerfile with JDK 18 from official Oracle downloads using ""docker build -f Dockerfile"".

EXPECTED VERSUS ACTUAL BEHAVIOR :
EXPECTED -
Docker image must be created without errors
ACTUAL -
Java refuses to start, halting the reproducer Dockerfile build.

---------- BEGIN SOURCE ----------
#FROM docker.io/library/debian:bookworm
FROM debian:bookworm

RUN export DEBIAN_FRONTEND=noninteractive && \
    apt-get update && \
    apt-get install -yq locales wget && \
    sed -i '/# kk_KZ.RK1048/s/^# //' /etc/locale.gen && \
    echo 'kk_KZ.RK1048' > /etc/default/locale && \
    dpkg-reconfigure --frontend=noninteractive locales && \
    wget -qO /tmp/openjdk.tar.gz https://download.java.net/java/early_access/jdk18/18/GPL/openjdk-18-ea+18_linux-x64_bin.tar.gz && \
    cd /tmp && \
    tar xf openjdk.tar.gz && \
    LC_ALL=kk_KZ.RK1048 /tmp/jdk-18/bin/java -version
---------- END SOURCE ----------

CUSTOMER SUBMITTED WORKAROUND :
Setting locale to C or POSIX or C.UTF-8 fixes the issue

FREQUENCY : always


",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,x86_64,,,,,,b07,11,,linux_debian_3.0,,,,,"0|i2ulqr:",9223372036854775807,b25,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@7644fb4c,,,,,,,,,"2021-10-10 02:16;tongwan;The observations on Debian:
JDK 8: Passed.
JDK 11ea+6: Passed.
JDK 11ea+7: Failed, IllegalArgumentException: Null charset name
JDK 17: Failed.
JDK 18ea+1: Failed.;;;","2021-10-15 10:01;naoto;Obviously, the reason for the exception is because JDK does not support that `RK1048` encoding, thus it cannot boot up.
We have been closing such an issue as `will not fix` or `not an issue`, but in light of JEP 400, we would be able to boot the JDK with `UTF-8` as the default charset. Need more consideration here.;;;","2021-10-17 22:24;pnarayanaswa;Additional Information from submitter:
===========================
I have created a simple patch and rebuilt OpenJDK 11 to fix the bug:

--- a/src/java.base/share/classes/java/nio/charset/Charset.java
+++ b/src/java.base/share/classes/java/nio/charset/Charset.java
@@ -605,7 +605,14 @@
             synchronized (Charset.class) {
                 String csn = GetPropertyAction
                         .privilegedGetProperty(""file.encoding"");
-                Charset cs = lookup(csn);
+                Charset cs = null;
+               try {
+                    cs = lookup(csn);
+                } catch (IllegalArgumentException iae) {
+                    // JDK-8275007: Consume the exception and
+                    // let JVM set default charset
+                    cs = null;
+                }
                 if (cs != null)
                     defaultCharset = cs;
                 else;;;","2021-11-17 17:20;roboduke;Changeset: b8453ebd
Author:    Naoto Sato <naoto@openjdk.org>
Date:      2021-11-18 01:13:26 +0000
URL:       https://git.openjdk.java.net/jdk/commit/b8453ebdb471e08cc8d62c777f33ad52902f67d7
;;;",,,,,,,,,,,,,,,,,,,,,,
CDS build failure with gcc11,JDK-8275004,5060067,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,jiefu,jiefu,jiefu,2021-10-09 23:04,2021-10-18 12:54,2023-10-01 09:57,2021-10-10 07:02,18,,,,,,,18,hotspot,,0,cds,tencent-interest,,,,,,,,,,,,,,,,,,,,"* For target hotspot_variant-server_libjvm_objs_whitebox.o:
In file included from /home/jdk/src/hotspot/share/prims/whitebox.cpp:27:
/home/jdk/src/hotspot/share/cds/cdsConstants.hpp:32:3: error: 'size_t' does not name a type
   32 |   size_t _value;
      |   ^~~~~~
/home/jdk/src/hotspot/share/cds/cdsConstants.hpp:29:1: note: 'size_t' is defined in header '<cstddef>'; did you forget to '#include <cstddef>'?
   28 | #include ""memory/allStatic.hpp""
  +++ |+#include <cstddef>
   29 |
/home/jdk/src/hotspot/share/cds/cdsConstants.hpp:40:10: error: 'size_t' does not name a type
   40 |   static size_t get_cds_constant(const char* name);
      |          ^~~~~~
/home/jdk/src/hotspot/share/cds/cdsConstants.hpp:40:10: note: 'size_t' is defined in header '<cstddef>'; did you forget to '#include <cstddef>'?
/home/jdk/src/hotspot/share/cds/cdsConstants.hpp:41:10: error: 'size_t' does not name a type
   41 |   static size_t get_cds_offset(const char* name);
      |          ^~~~~~
   ... (rest of output omitted)",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8271569,,,,,,,,,,,,,,,,,,,,,,,,"0|i2ulrf:",9223372036854775807,b19,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,,,"2021-10-10 07:02;roboduke;Changeset: 2ff3977a
Author:    Jie Fu <jiefu@openjdk.org>
Date:      2021-10-10 14:00:58 +0000
URL:       https://git.openjdk.java.net/jdk/commit/2ff3977a66c8d8b521cd0ad266ba954682a268ce
;;;",,,,,,,,,,,,,,,,,,,,,,,,,
hotspot/jtreg/serviceability/jvmti/negative/thrstat04/thrstat04.java SEGV in java_lang_VirtualThread::is_instance,JDK-8275001,5060061,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,sspitsyn,alanb,alanb,2021-10-09 07:56,2021-10-23 23:48,2023-10-01 09:57,2021-10-19 01:53,repo-loom,,,,,,,repo-loom,hotspot,,0,,,,,,,,,,,,,,,,,,,,,,This test is failing in the loom repo when run with -XX:+CheckUnhandledOops.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2ulq3:",9223372036854775807,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@661b156a,,,,,,,,,"2021-10-19 01:45;sspitsyn;The suggested fix is:
diff --git a/src/hotspot/share/prims/jvmtiExport.cpp b/src/hotspot/share/prims/jvmtiExport.cpp
index 3c0c0e0fd63..274eceaa30d 100644
--- a/src/hotspot/share/prims/jvmtiExport.cpp
+++ b/src/hotspot/share/prims/jvmtiExport.cpp
@@ -805,6 +805,9 @@ JvmtiExport::cv_external_thread_to_JavaThread(ThreadsList * t_list,
 
   if (!thread_oop->is_a(vmClasses::Thread_klass())) {
     // The oop is not a java.lang.Thread.
+    if (thread_oop_p != NULL) {
+      *thread_oop_p = NULL;
+    }
     return JVMTI_ERROR_INVALID_THREAD;
   }
   // Looks like a java.lang.Thread oop at this point.;;;","2021-10-19 01:53;sspitsyn;Changeset is:
https://github.com/openjdk/loom/commit/991d27640a15105616442732f2c7f2bb47f7e081;;;","2021-10-23 23:48;alanb;[~sspitsyn] You'll need to remove the test from ProblemList.txt so that it is no longer excluded.;;;",,,,,,,,,,,,,,,,,,,,,,,
C1 optimizes the invocation of private interface methods,JDK-8274983,5060043,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,xliu,xliu,xliu,2021-10-08 11:26,2022-03-03 01:58,2023-10-01 09:57,2021-11-30 10:57,15,16,17,18,,,,18,hotspot,,0,c1,hs-comp-triaged,jdk17u-fix-request,jdk17u-fix-yes,oracle-triage-11,oracle-triage-17,oracle-triage-18,performance,perf-regression,regression,,,,,,,,,,,,"C1 has performance regression for the following code after jdk15. C2 doesn't have this issue. 

Pattern p = Pattern.compile(""[A-Za-z0-9]+"");
p.matcher(str)

Here is the test of our attachment SlowStartupTest.  we can observe slowdown for tier1~3. 

JDK 11 (AdoptOpenJDK build 11.0.7+10)
-XInt                  : Executed 10000 iterations in 85ms
-XX:TieredStopAtLevel=1: Executed 10000 iterations in 2ms
-XX:TieredStopAtLevel=2: Executed 10000 iterations in 3ms
-XX:TieredStopAtLevel=3: Executed 10000 iterations in 4ms
-XX:TieredStopAtLevel=4: Executed 10000 iterations in 1ms
JDK 14 (AdoptOpenJDK build 14.0.2+12)
-XInt                  : Executed 10000 iterations in 76ms
-XX:TieredStopAtLevel=1: Executed 10000 iterations in 2ms
-XX:TieredStopAtLevel=2: Executed 10000 iterations in 2ms
-XX:TieredStopAtLevel=3: Executed 10000 iterations in 4ms
-XX:TieredStopAtLevel=4: Executed 10000 iterations in 1ms
JDK 15 (AdoptOpenJDK build 15.0.2+7, similar also on build 15+36)
-XInt                  : Executed 10000 iterations in 54ms
-XX:TieredStopAtLevel=1: Executed 10000 iterations in 170ms ??
-XX:TieredStopAtLevel=2: Executed 10000 iterations in 178ms ??
-XX:TieredStopAtLevel=3: Executed 10000 iterations in 174ms ??
-XX:TieredStopAtLevel=4: Executed 10000 iterations in 1ms
JDK 16 (AdoptOpenJDK-16.0.1+9)
-XInt                  : Executed 10000 iterations in 54ms
-XX:TieredStopAtLevel=1: Executed 10000 iterations in 160ms ??
-XX:TieredStopAtLevel=2: Executed 10000 iterations in 160ms ??
-XX:TieredStopAtLevel=3: Executed 10000 iterations in 160ms ??
-XX:TieredStopAtLevel=4: Executed 10000 iterations in 1ms
JDK 17 (Temurin-17+35)
-XInt                  : Executed 10000 iterations in 56ms
-XX:TieredStopAtLevel=1: Executed 10000 iterations in 162ms ??
-XX:TieredStopAtLevel=2: Executed 10000 iterations in 165ms ??
-XX:TieredStopAtLevel=3: Executed 10000 iterations in 177ms ??
-XX:TieredStopAtLevel=4: Executed 10000 iterations in 1ms

We did binary search on revisions, then we attribute this performance regression to JDK-8238358.

We also tested on x86_64 and aarch64. both suffer from this issue.
Profile it with async-profiler and you'll see huge amounts of time in 
 `SharedRuntime::handle_wrong_method_ic_miss` and `SharedRuntime::resolve_virtual_call_C` for `java.util.regex.Pattern$BmpCharPredicate$$Lambda$22.0x80000002b.is(int)`.

[update 11/23/2021]
The performance issue identified by the regex example(SlowStartupTest.java)  has been resolved by JDK-8276216. 
C1 still generates less efficient code for the invocation of private interface methods, manifested by InvokePrivateInterfaceMethod.java.",,,,,,,,,,,JDK-8282595,JDK-8280688,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8238358,JDK-8169766,,,,"2021-11-29 12:15;xliu;InterfacePrivateCalls.java;https://bugs.openjdk.org/secure/attachment/97215/InterfacePrivateCalls.java","2021-11-14 13:18;xliu;InvokePrivateInterfaceMethod.java;https://bugs.openjdk.org/secure/attachment/97081/InvokePrivateInterfaceMethod.java","2021-10-08 11:29;xliu;SlowStartupTest.java;https://bugs.openjdk.org/secure/attachment/96690/SlowStartupTest.java",,,generic,,,,,,,,,generic,,,,,"0|i2ulm3:",9223372036854775807,b26,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2021-10-08 12:55;dlong;ILW = MMH = P3;;;","2021-10-08 14:00;xliu;We have seen a lot of hits on  SharedRuntime::handle_wrong_method_ic_miss(JavaThread*)

""Executing pns""
Native frames: (J=compiled Java code, A=aot compiled Java code, j=interpreted, Vv=VM code, C=native code)
V  [libjvm.so+0xfa6f19]  SharedRuntime::handle_wrong_method_ic_miss(JavaThread*)+0x15
v  ~RuntimeStub::ic_miss_stub
J 343 c1 java.util.regex.Pattern$BmpCharPredicate$$Lambda$37+0x000000080009aec0.is(I)Z java.base (15 bytes) @ 0x00007fffe15fd5fc [0x00007fffe15fd560+0x000000000000009c]
j  java.util.regex.Pattern$BmpCharPredicate.lambda$union$2(Ljava/util/regex/Pattern$CharPredicate;I)Z+2 java.base
J 343 c1 java.util.regex.Pattern$BmpCharPredicate$$Lambda$37+0x000000080009aec0.is(I)Z java.base (15 bytes) @ 0x00007fffe15fd5fc [0x00007fffe15fd560+0x000000000000009c]
J 350 c1 java.util.regex.Pattern$BmpCharPropertyGreedy.match(Ljava/util/regex/Matcher;ILjava/lang/CharSequence;)Z java.base (89 bytes) @ 0x00007fffe15f5654 [0x00007fffe15f55a0+0x00000000000000b4]
J 346 c1 java.util.regex.Matcher.match(II)Z java.base (154 bytes) @ 0x00007fffe15f4e14 [0x00007fffe15f4c00+0x0000000000000214]
J 354 c1 java.util.regex.Matcher.matches()Z java.base (10 bytes) @ 0x00007fffe15fc0fc [0x00007fffe15fc0c0+0x000000000000003c]
j  SlowStartupTest.main([Ljava/lang/String;)V+74
v  ~StubRoutines::call_stub
V  [libjvm.so+0x9f1b7d]  JavaCalls::call_helper(JavaValue*, methodHandle const&, JavaCallArguments*, Thread*)+0x5dd
V  [libjvm.so+0xec565c]  os::os_exception_wrapper(void (*)(JavaValue*, methodHandle const&, JavaCallArguments*, Thread*), JavaValue*, methodHandle const&, JavaCallArguments*, Thread*)+0x32
V  [libjvm.so+0x9f159c]  JavaCalls::call(JavaValue*, methodHandle const&, JavaCallArguments*, Thread*)+0x8e
V  [libjvm.so+0xa93ca7]  jni_invoke_static(JNIEnv_*, JavaValue*, _jobject*, JNICallType, _jmethodID*, JNI_ArgumentPusher*, Thread*)+0x188
V  [libjvm.so+0xaaae5f]  jni_CallStaticVoidMethod+0x349
C  [libjli.so+0x4e0f]  JavaMain+0xbf1
C  [libjli.so+0xbdb3]  ThreadJavaMain+0x27;;;","2021-10-08 14:26;xliu;The regex pattern generates 2 lambdas. java.util.regex.Pattern$BmpCharPredicate$$Lambda$37+0x000000080009aec0.is(I)Z (15 bytes) calls 
java.util.regex.Pattern$BmpCharPredicate::lambda$union$2 (26 bytes)

however,  after first resolve_virtual_call, hotspot backfills $0x80009aec0 for lambda$union$2. 
   0x7fffe15fd5ed:      movabs $0x80009aec0,%rax
   0x7fffe15fd5f7:      callq  0x7fffe15fd960

This value doesn't match the klass of lambda$union$2 (0x80009ac18). as a result, ic_miss is triggered . ;;;","2021-10-08 17:38;dlong;One significant difference is that the generated lambda method now uses invokeinterface instead of invokespecial.  Turning on -XX:+TraceCallFixup shows a lot of messages like this:

resolving virtual (invokeinterface) call to java.util.regex.Pattern$BmpCharPredicate::lambda$union$2 at pc: 0x00007f12c98052e4 to code: 0x0000000000000000
handle_wrong_method reresolving call to java.util.regex.Pattern$BmpCharPredicate::lambda$union$2 code: 0x0000000000000000
converting IC miss to reresolve (invokeinterface) call to java.util.regex.Pattern$BmpCharPredicate::lambda$union$2 from pc: 0x00007f12c98052e4
 code: 0x0000000000000000
;;;","2021-10-08 22:05;dlong;There seems to be two problems here:
1) SharedRuntime doesn't handle ""can be statically bound"" virtual calls very well
2) C1 generates a ""can be statically bound"" virtual call when it probably shouldn't;;;","2021-10-08 22:56;xliu;hi, Dean, 

the ic stub is this one in java.util.regex.Pattern$BmpCharPredicate$$Lambda$37/0x000000080009aec0::is (15 bytes), 
  0x00007f5ce4fa0b6d:   movabs $0xffffffffffffffff,%rax
  0x00007f5ce4fa0b77:   callq  0x00007f5ce4ab87a0           ; ImmutableOopMap {}
                                                            ;*invokeinterface lambda$union$2 {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - java.util.regex.Pattern$BmpCharPredicate$$Lambda$37/0x000000080009aec0::is@9
                                                            ;   {virtual_call}

the callsite is 'invokeinterface', but find_callee_info() of SharedRuntime::handle_ic_miss_helper works out that call_info is a direct call.  is it right? 

(gdb) p call_info
$5 = {
  <StackObj> = {
    <AllocatedObj> = {
      _vptr.AllocatedObj = 0x7ffff70932a8 <vtable for CallInfo+16>
    }, <No data fields>},
  members of CallInfo:
  _resolved_klass = 0x80009a748,
  _resolved_method = {
    <StackObj> = {
      <AllocatedObj> = {
        _vptr.AllocatedObj = 0x7ffff7016660 <vtable for methodHandle+16>
      }, <No data fields>},
    members of methodHandle:
    _value = 0x7fff83dd5768,
    _thread = 0x7ffff0031000
  },
  _selected_method = {
    <StackObj> = {
      <AllocatedObj> = {
        _vptr.AllocatedObj = 0x7ffff7016660 <vtable for methodHandle+16>
      }, <No data fields>},
    members of methodHandle:
    _value = 0x7fff83dd5768,
    _thread = 0x7ffff0031000
  },
  _call_kind = CallInfo::direct_call,
  _call_index = -2,
  _resolved_appendix = {
    _handle = 0x0
  },
  _resolved_method_name = {
    _handle = 0x0
  }
}

(gdb) call call_info.resolved_method()->print_on(tty)
{method}
 - this oop:          0x00007fff83dd5768
 - method holder:     'java/util/regex/Pattern$BmpCharPredicate'
 - constants:         0x00007fff83dd5b30 constant pool [94]/operands[35] {0x00007fff83dd5b30} for 'java/util/regex/Pattern$BmpCharPredicate' cache=0x00007fff83dd6528
 - access:            0x1002  private synthetic
 - name:              'lambda$union$2'
 - signature:         '(Ljava/util/regex/Pattern$CharPredicate;I)Z'
 - max stack:         3
 - max locals:        3
 - size of params:    3
 - method size:       13
 - highest level:     1
 - vtable index:      -2
 - i2i entry:         0x00007fffe1010de0
 - adapters:          AHE@0x00007ffff0388750: 0xbba00000 i2c: 0x00007fffe1057ee0 c2i: 0x00007fffe1057fca c2iUV: 0x00007fffe1057f91 c2iNCI: 0x00007fffe1058007
 - compiled entry     0x00007fffe15fdc80
 - code size:         26
 - code start:        0x00007fff83dd5720
 - code end (excl):   0x00007fff83dd573a
 - method data:       0x00007fff83de4140
 - checked ex length: 0
 - linenumber start:  0x00007fff83dd573a
 - localvar length:   3
 - localvar start:    0x00007fff83dd5742
 - compiled code: nmethod 520973  342       1       java.util.regex.Pattern$BmpCharPredicate::lambda$union$2 (26 bytes);;;","2021-10-11 13:07;dlong;[~xliu] Yes, that's what I'm seeing too.;;;","2021-10-12 09:22;dlong;Vladimir, please take a look.;;;","2021-11-09 11:44;xliu;JDK-8238358 changes the call from invokespecial to invokeinterface. 

here is the original version. 
final class java.util.regex.Pattern$BmpCharPredicate$$Lambda$37 implements java.util.regex.Pattern$BmpCharPredicate {
  public boolean is(int);
    Code:
       0: aload_0
       1: getfield      #17                 // Field arg$1:Ljava/util/regex/Pattern$BmpCharPredicate;
       4: aload_0
       5: getfield      #19                 // Field arg$2:Ljava/util/regex/Pattern$CharPredicate;
       8: iload_1
       9: invokespecial #30                 // InterfaceMethod java/util/regex/Pattern$BmpCharPredicate.lambda$union$2:(Ljava/util/regex/Pattern$CharPredicate;I)Z
      12: ireturn
}

After hidden class patch, it changes to.
9: invokeinterface #25,  3           // InterfaceMethod java/util/regex/Pattern$BmpCharPredicate.lambda$union$2:(Ljava/util/regex/Pattern$CharPredicate;I)Z

I think both of them are correct. invokeinterface makes more sense because java/util/regex/Pattern$BmpCharPredicate is indeed an interface.
invokespecial doesn't need to call SharedRuntime::resolve_virtual_call_C(). it avoids this problem in the 1st place. 
;;;","2021-11-12 11:23;xliu;For the callsite of invokeinterface, the receiver is actually is 'Field arg$1:Ljava/util/regex/Pattern$BmpCharPredicate; '. 
9: invokeinterface #25, 3 // InterfaceMethod java/util/regex/Pattern$BmpCharPredicate.lambda$union$2:(Ljava/util/regex/Pattern$CharPredicate;I)Z 

Besides aforementioned j.u.r.Pattern$BmpCharPredicate$$Lambda$37, there are other classes which implement the interface j.u.r.Pattern$BmpCharPredicate.

eg. 
$javap -p -c DUMP_CLASS_FILES/java/util/regex/'CharPredicates$$Lambda$29.class'
final class java.util.regex.CharPredicates$$Lambda$29 implements java.util.regex.Pattern$BmpCharPredicate {
...
  public boolean is(int);
    Code:
       0: iload_1
       1: invokestatic  #17                 // Method java/util/regex/CharPredicates.lambda$ASCII_DIGIT$18:(I)Z
       4: ireturn
}
javap -p -c DUMP_CLASS_FILES/java/util/regex/'Pattern$$Lambda$26.class'
final class java.util.regex.Pattern$$Lambda$26 implements java.util.regex.Pattern$BmpCharPredicate {
  private final int arg$1;
  private final int arg$2;

...

  public boolean is(int);
    Code:
       0: aload_0
       1: getfield      #16                 // Field arg$1:I
       4: aload_0
       5: getfield      #18                 // Field arg$2:I
       8: iload_1
       9: invokestatic  #26                 // Method java/util/regex/Pattern.lambda$Range$10:(III)Z
      12: ireturn
}

I think a CompiledIC stub doesn't work for an interface method because different oop's klasses are different. 
;;;","2021-11-12 11:42;xliu;$java -XX:TieredStopAtLevel=1 -XX:+TraceCallFixup -XX:+TraceICs -XX:+PrintC1Statistics SlowStartupTest 1 
the trace shows that an IC stub is repeatedly updated and handle_wrong_method_ic_miss is triggered after then. 

C1 Runtime statistics:
 _resolve_invoke_virtual_cnt:     38601
 _resolve_invoke_opt_virtual_cnt: 187
 _resolve_invoke_static_cnt:      47
 _handle_wrong_method_cnt:        38533
 _ic_miss_cnt:                    37
 _generic_arraycopystub_cnt:      0
 _byte_arraycopy_cnt:             6996
 _short_arraycopy_cnt:            0
 _int_arraycopy_cnt:              0
 _long_arraycopy_cnt:             0
 _oop_arraycopy_cnt:              9
 _arraycopy_slowcase_cnt:         0
 _arraycopy_checkcast_cnt:        0
 _arraycopy_checkcast_attempt_cnt:0
 _new_type_array_slowcase_cnt:    2
 _new_object_array_slowcase_cnt:  0
 _new_instance_slowcase_cnt:      0
 _new_multi_array_slowcase_cnt:   0
 _monitorenter_slowcase_cnt:      0
 _monitorexit_slowcase_cnt:       0
 _patch_code_slowcase_cnt:        2
 _throw_range_check_exception_count:            0:
 _throw_index_exception_count:                  0:
 _throw_div0_exception_count:                   0:
 _throw_null_pointer_exception_count:           0:
 _throw_class_cast_exception_count:             0:
 _throw_incompatible_class_change_error_count:  0:
 _throw_count:                                  0:

   37 inline cache miss in compiled
38533 wrong method
   47 unresolved static call site
38601 unresolved virtual call site
  187 unresolved opt virtual call site
  301 slow partial subtype
 7179 byte array copies
   84 short array copies
   62 int array copies
   55 long array copies
  327 unsafe array copies
;;;","2021-11-16 01:11;xliu;C1 and C2 have different strategies for the invocation of private interface methods. 

C1 can't recognize the new code pattern(invokeinterface), icvirtual call is generated.
c1_LIRGenerator.cpp

    case Bytecodes::_invokespecial:
    case Bytecodes::_invokevirtual:
    case Bytecodes::_invokeinterface:
      // for loaded and final (method or class) target we still produce an inline cache,
      // in order to be able to call mixed mode
      if (x->code() == Bytecodes::_invokespecial || x->target_is_final()) {
        __ call_opt_virtual(target, receiver, result_register,
                            SharedRuntime::get_resolve_opt_virtual_call_stub(),
                            arg_list, info);
      } else {
        __ call_icvirtual(target, receiver, result_register,
                          SharedRuntime::get_resolve_virtual_call_stub(),
                          arg_list, info);
      }
      break;


On the other hand, C2 generates checkcast code for this case. 
doCall.cpp
  if (iter().cur_bc_raw() == Bytecodes::_invokespecial && !orig_callee->is_object_initializer()) {
    ciInstanceKlass* calling_klass = method()->holder();
    ciInstanceKlass* sender_klass = calling_klass;
    if (sender_klass->is_interface()) {
      receiver_constraint = sender_klass;
    }
  } else if (iter().cur_bc_raw() == Bytecodes::_invokeinterface && orig_callee->is_private()) {
    assert(holder->is_interface(), ""How did we get a non-interface method here!"");
    receiver_constraint = holder;
  }

  if (receiver_constraint != NULL) {
    Node* receiver_node = stack(sp() - nargs);
    Node* cls_node = makecon(TypeKlassPtr::make(receiver_constraint));
    Node* bad_type_ctrl = NULL;
    Node* casted_receiver = gen_checkcast(receiver_node, cls_node, &bad_type_ctrl);

;;;","2021-11-30 10:57;roboduke;Changeset: 21d9ca6c
Author:    Xin Liu <xliu@openjdk.org>
Date:      2021-11-30 18:55:24 +0000
URL:       https://git.openjdk.java.net/jdk/commit/21d9ca6cd942ac98a3be2577ded8eaf92dac7d46
;;;","2022-03-02 08:37;mdoerr;Fix Request (17u):
Should get backported for parity with 17.0.4-oracle. Applies cleanly.;;;","2022-03-02 08:51;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk17u-dev/pull/186
Date: 2022-03-02 16:39:25 +0000;;;",,,,,,,,,,,
Add implicit allocator factory,JDK-8274978,5060036,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,mcimadamore,mcimadamore,mcimadamore,2021-10-08 07:07,2021-10-08 13:46,2023-10-01 09:57,2021-10-08 13:46,repo-panama,,,,,,,,core-libs,,0,foreign-memaccess+abi,,,,,,,,,,,,,,,,,,,,,"It is quite common to allocate segments which should be backed by fresh, independent implicit scopes. While SegmentAllocator allows clients to do so:

```
SegmentAllocator implicitAllocator = (size, align) -> MemorySegment.allocateNative(size, align, ResourceScope.globalScope());
```

The above code is relatively verbose and has to be repeated whenever an implicit allocator is required. Since this seems a pretty useful functionality, there should be a factory for this.
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2ulkj:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
[lworld] compiler/c2/irTests/TestPostParseCallDevirtualization.java fails with valhalla,JDK-8274973,5060029,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,roland,roland,roland,2021-10-08 04:39,2021-11-19 04:51,2023-10-01 09:57,2021-11-19 04:51,repo-valhalla,,,,,,,repo-valhalla,hotspot,,0,c2,lw3,lworld,,,,,,,,,,,,,,,,,,,"With the upcoming merge, this new test fails with valhalla with ""Failed IR Rules"" messages

It's unclear to me whether the failure is c2 related or not.

I could reproduce the failure with and so is unrelated to the merge:
commit 13035717c97321939a8e152db98ba15f4268a93c (origin/lworld, origin/HEAD, lworld)
Author: Jesper Steen Møller <jespersm@openjdk.org>
Date:   Thu Sep 23 21:45:04 2021 +0000

    8273360: [lworld] Invoking a reflection-generated constructor for primitive class gives InstantiationError
    
    Reviewed-by: mchung
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2uliz:",9223372036854775807,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2021-10-15 05:09;thartmann;Will be problem listed by JDK-8275331.;;;",,,,,,,,,,,,,,,,,,,,,,,,,
[lworld] TestLWorld.test151() fails with IR verification errors,JDK-8274972,5060028,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,roland,roland,roland,2021-10-08 04:36,2021-10-18 03:57,2023-10-01 09:57,2021-10-18 02:12,repo-valhalla,,,,,,,repo-valhalla,hotspot,,0,lw3,lworld,,,,,,,,,,,,,,,,,,,,"The test failure is caused by this:
bool LateInlineVirtualCallGenerator::do_late_inline_check(Compile* C, JVMState* jvms) {
  // Method handle linker case is handled in CallDynamicJavaNode::Ideal().
  // Unless inlining is performed, _override_symbolic_info bit will be set in DirectCallGenerator::generate().
  // Implicit receiver null checks introduce problems when exception states are combined.
  Node* receiver = jvms->map()->argument(jvms, 0);
  const Type* recv_type = C->initial_gvn()->type(receiver);
  if (recv_type->maybe_null()) {
    return false;
  }
That's new code with the upcoming merge. receiver should be not null (it's a InlineTypePtrNode) I think but that type is lost on the way. The InlineTypePtrNode is created when pushed down through Phis. The oop input of that InlineTypePtrNode is a Phi. That Phi is not created with type NotNull. It's actually a chain of Phis with all non Phi inputs NotNull but because it's a loop, IGVN doesn't prove that the Phis are NotNull. ",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8275400,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2ulir:",9223372036854775807,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2021-10-13 05:16;thartmann;Test will be temporarily disabled by JDK-8275220.;;;",,,,,,,,,,,,,,,,,,,,,,,,,
jdk/jfr/api/consumer/TestRecordedFrameType.java failed when c1 disabled,JDK-8274952,5060009,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,aoqi,aoqi,aoqi,2021-10-08 01:53,2021-10-18 12:54,2023-10-01 09:57,2021-10-10 19:18,18,,,,,,,18,hotspot,,0,,,,,,,,,,,,,,,,,,,,,,"jdk/jfr/api/consumer/TestRecordedFrameType.java requires c1:

 73                 if (!WB.enqueueMethodForCompilation(mtd, 1)) {
 74                     throw new Exception(""Could not enqueue method for CompLevel_simple"");
 75                 }

When c1 is disabled, the test failed:

STDOUT:
2 compiler directives added
WB error: no compiler for requested compilation level 1
STDERR:
java.lang.Exception: Could not enqueue method for CompLevel_simple
	at jdk.jfr.api.consumer.TestRecordedFrameType.main(TestRecordedFrameType.java:74)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:76)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:51)
	at java.base/java.lang.reflect.Method.invoke(Method.java:569)
	at com.sun.javatest.regtest.agent.MainWrapper$MainThread.run(MainWrapper.java:127)
	at java.base/java.lang.Thread.run(Thread.java:833)

JavaTest Message: Test threw exception: java.lang.Exception: Could not enqueue method for CompLevel_simple
JavaTest Message: shutting down test

STATUS:Failed.`main' threw exception: java.lang.Exception: Could not enqueue method for CompLevel_simple",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2ulej:",9223372036854775807,b19,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@42995637,,,,,,,,,"2021-10-10 19:18;roboduke;Changeset: a05873a2
Author:    Ao Qi <aoqi@openjdk.org>
Committer: Jie Fu <jiefu@openjdk.org>
Date:      2021-10-11 02:17:56 +0000
URL:       https://git.openjdk.java.net/jdk/commit/a05873a225c40d12e60870794b9c993d1ea89cfe
;;;",,,,,,,,,,,,,,,,,,,,,,,,,
[lworld] LoadNode::Identity optimization should not skip casts,JDK-8274950,5060007,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,thartmann,roland,roland,2021-10-08 01:15,2021-10-19 06:27,2023-10-01 09:57,2021-10-19 06:27,repo-valhalla,,,,,,,repo-valhalla,hotspot,,0,c2,lw3,lworld,,,,,,,,,,,,,,,,,,,"#  Internal Error (/home/roland/valhalla/src/hotspot/share/ci/ciInlineKlass.cpp:52), pid=2898322, tid=2898332
#  assert(contains_field_offset(offset)) failed: invalid field offset

Stack: [0x00007f851b03a000,0x00007f851b13b000],  sp=0x00007f851b135080,  free space=1004k
Native frames: (J=compiled Java code, j=interpreted, Vv=VM code, C=native code)
V  [libjvm.so+0x8e92c4]  ciInlineKlass::field_index_by_offset(int)+0x134
V  [libjvm.so+0xea4ee6]  InlineTypeBaseNode::field_value_by_offset(int, bool) const+0x36
V  [libjvm.so+0x14e9445]  LoadNode::Identity(PhaseGVN*)+0x1e5
V  [libjvm.so+0x16c3ca2]  PhaseIterGVN::transform_old(Node*)+0x2f2
V  [libjvm.so+0x16bcc3e]  PhaseIterGVN::optimize()+0x7e
V  [libjvm.so+0xa460ac]  Compile::inline_incrementally_cleanup(PhaseIterGVN&)+0x75c
V  [libjvm.so+0xa505c9]  Compile::inline_incrementally(PhaseIterGVN&)+0x289
V  [libjvm.so+0xa50e89]  Compile::Optimize()+0x359
V  [libjvm.so+0xa53c56]  Compile::Compile(ciEnv*, ciMethod*, int, bool, bool, bool, bool, bool, DirectiveSet*)+0x1656
V  [libjvm.so+0x847f00]  C2Compiler::compile_method(ciEnv*, ciMethod*, int, bool, DirectiveSet*)+0x6a0
V  [libjvm.so+0xa63e59]  CompileBroker::invoke_compiler_on_method(CompileTask*)+0xc39
V  [libjvm.so+0xa64ab8]  CompileBroker::compiler_thread_loop()+0x518
V  [libjvm.so+0x19776fc]  JavaThread::thread_main_inner()+0x27c
V  [libjvm.so+0x197dcb0]  Thread::call_run()+0x100
V  [libjvm.so+0x162e574]  thread_native_entry(Thread*)+0x104

Failure occurs in LoadNode::Identity()
base is a CheckCastPP to java/lang/String
base->in(1) is an InlineTypePtr
base->in(0) is an If projection for a test that checks the class of base->in(1) and the type of the CheckCastPP are the same

That test should constant fold and the branch where the LoadNode is be removed but that hasn't happened yet. ",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8267665,,,,,,,,,,,,,,,,,,,,,,,,"0|i2ule3:",9223372036854775807,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2021-10-14 23:18;thartmann;I can not reproduce this failure with ArrayElementVarHandleTest.java but with test/jdk/valhalla/valuetypes/ValueArray.java and an old build. Will investigate.;;;","2021-10-18 07:49;thartmann;Same problem exists in PhiNode::push_inline_types_through, I have simple regression tests for both.;;;",,,,,,,,,,,,,,,,,,,,,,,,
AppCDS dump causes SEGV in VM thread while adjusting lambda proxy class info,JDK-8274944,5059845,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,ccheung,webbuggrp,webbuggrp,2021-10-05 20:25,2022-07-11 23:31,2023-10-01 09:57,2021-10-26 09:27,17,,,,,,,18,hotspot,,0,cds,dcsswa,jdk17u-fix-request,jdk17u-fix-yes,reproducer-yes,webbug,,,,,,,,,,,,,,,,"ADDITIONAL SYSTEM INFORMATION :
Linux 5.14.9-100.fc33.x86_64 x86_64 CentOS 8

A DESCRIPTION OF THE PROBLEM :
We have a moderately complicated Java test integration application that loads a number of isolated environments in custom ClassLoaders. In order to improve startup time, we want to adopt CDS, but initial attempts to follow the CDS guide and run -XX:ArchiveClassesAtExit lead to a JVM crash. Reproduced in 16.0.1, 17 GA, and a slowdebug build of 17u at 393547b2. The release builds crash with a SEGV, so I tried the slowdebug build to see if it gave more information, and it trips an assertion instead.

ERROR MESSAGES/STACK TRACES THAT OCCUR :
#
# A fatal error has been detected by the Java Runtime Environment:
#
#  Internal Error (/home/service/jdk17u/src/hotspot/share/cds/archiveBuilder.hpp:296), pid=142855, tid=142874
#  assert(is_in_buffer_space(obj)) failed: must be
#
# JRE version: OpenJDK Runtime Environment (17.0) (slowdebug build 17-internal+0-adhoc.service.jdk17u)
# Java VM: OpenJDK 64-Bit Server VM (slowdebug 17-internal+0-adhoc.service.jdk17u, mixed mode, sharing, tiered, compressed oops, compressed class ptrs, g1 gc, linux-amd64)
# Problematic frame:
# V  [libjvm.so+0x510f62]  unsigned char* ArchiveBuilder::to_requested<unsigned char*>(unsigned char*) const+0x34
#
# Core dump will be written. Default location: Core dumps may be processed with ""/usr/lib/systemd/systemd-coredump %P %u %g %s %t %c %h"" (or dumping to /usr/local/lib/service/core.142855)
#
# If you would like to submit a bug report, please visit:
#   https://bugreport.java.com/bugreport/crash.jsp
#

(see attached hs err log for details)",,,,,,,,,,,JDK-8281201,JDK-8276421,,,,,,,,,,,JDK-8264735,,,,,,,JDK-8276997,,,,,,,,,,,,,,,"2021-10-12 16:30;ccheung;hs-err.log;https://bugs.openjdk.org/secure/attachment/96713/hs-err.log",,,,,generic,,,,,,,,,generic,,,,,"0|i2uke3:",9223372036854775807,b21,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,,,"2021-10-08 00:10;sswsharm;The crash is in ArchiveBuilder (cds) 
# Problematic frame:
# V [libjvm.so+0x510f62] unsigned char* ArchiveBuilder::to_requested<unsigned char*>(unsigned char*) const+0x34

# Internal Error (/home/service/jdk17u/src/hotspot/share/cds/archiveBuilder.hpp:296), pid=142855, tid=142874
# assert(is_in_buffer_space(obj)) failed:

It is observed on OpenJDK 64-Bit Server VM (slowdebug 17-internal+0-adhoc.service.jdk17u).
Submitter is not able to share a reproducer due to large application size.;;;","2021-10-12 11:18;mseledtsov;ILW = HLM = P3;;;","2021-10-17 22:18;pnarayanaswa;Additional Information from submitter:
===========================
I managed to significantly narrow down the scope of the problem. It appears to be using a lambda expression to implement javax.inject.Provider (from Jakarta inject-api). Using an abstract class does not cause CDS errors. Copying the source for Provider and using the local copy does not cause CDS errors. Only when linking the Jakarta artifact from Maven Central does CDS crash.

To reproduce, 

Fetch well-known inject api jar:
curl -L -o inject-api.jar 'https://search.maven.org/remotecontent?filepath=jakarta/inject/jakarta.inject-api/1.0.3/jakarta.inject-api-1.0.3.jar'

Compile the source:

import javax.inject.Provider;

public class CdsTest {
    public static void main(final String... args) {
        getProvider();
    }

    public static Provider<Object> getProvider() {
        return () -> {
            return null;
        };
    }
}

Create a JAR of it:
jar --create --file CdsTest.jar CdsTest.class

Attempt to archive CDS at exit:
% java -XX:ArchiveClassesAtExit=test.jsa -cp CdsTest.jar:inject-api.jar CdsTest 
[0.094s][warning][cds] Pre JDK 6 class not supported by CDS: 49.0 javax/inject/Provider
[0.094s][warning][cds] Skipping CdsTest$$Lambda$1+0x0000000800c00c08: Old class has been linked
#
# A fatal error has been detected by the Java Runtime Environment:
#
#  SIGSEGV (0xb) at pc=0x00007fe343b989b0, pid=274380, tid=274387
#
# JRE version: OpenJDK Runtime Environment 21.9 (17.0+35) (build 17+35)
# Java VM: OpenJDK 64-Bit Server VM 21.9 (17+35, mixed mode, sharing, tiered, compressed oops, compressed class ptrs, g1 gc, linux-amd64)
# Problematic frame:
# V  [libjvm.so+0xe849b0]  SystemDictionaryShared::adjust_lambda_proxy_class_dictionary()+0xa0
#
# Core dump will be written. Default location: Core dumps may be processed with ""/usr/lib/systemd/systemd-coredump %P %u %g %s %t %c %h"" (or dumping to /home/######/#######/############/######/core.274380)
#
# An error report file with more information is saved as:
# /home/######/#######/############/######/hs_err_pid274380.log;;;","2021-10-19 10:24;ccheung;The java/inject/Provider interface has a major version of 49.

Below is an excerpt of output from javap:
public interface javax.inject.Provider<T extends java.lang.Object>
  minor version: 0
  major version: 49

The CdsTest class has a lambda proxy class (e.g. CdsTest$$Lambda$1/0x0000000800c00bf8) which contains the above interface due to the following code:
public static Provider<Object> getProvider() { 
        return () -> { 

We currently don't support archiving classes with major version < 50 which have been linked during dump time.
Since the lambda proxy class of CdsTest contains an interface which cannot be archived, we should also skip archiving the lambda proxy class.;;;","2021-10-26 08:14;iklam;I think the fix should be back ported to 17.;;;","2021-10-26 09:27;roboduke;Changeset: e5cd2692
Author:    Calvin Cheung <ccheung@openjdk.org>
Date:      2021-10-26 16:26:57 +0000
URL:       https://git.openjdk.java.net/jdk/commit/e5cd2692da6327c6fde954f86595a08fe5edf43f
;;;","2022-01-06 01:45;shade;Looks like 17u backport depends on JDK-8264735.;;;","2022-01-31 01:21;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk17u-dev/pull/133
Date: 2022-01-31 09:16:17 +0000;;;","2022-01-31 01:29;goetz;Fix request [17u]

I backport this for parity with 17.0.3-oracle.
It applies clean, but I had to adapt a test.

I think there is no technical reason for the ""blocked"" relation to JDK-8264735.
I could not find any comments why this was added.
If I run the test appcds/dynamicArchive/LambdaContainsOldInf.java
without the fix I get a crash. If I run it with the fix the test 
passes.  I had to remove the check for ""Skipping OldProvider: Old class
has been linked' missing from stdout/stderr""

The change depends on ""JDK-8271506: Add ResourceHashtable support for 
deleting selected entries"" which does not fit well into 17 because 
""8269004: Implement ResizableResourceHashtable"" is missing. I reworked
the code to adapt it to the ResourceHashtable of 17 and made a seperate PR.

The test appcds/dynamicArchive/LambdaContainsOldInf.java fails as-is.
It does not use OldProvider at all because of 
""Pre JDK 6 class not supported by CDS: 49.0 OldProvider"".
Therefore later ""Skipping OldProvider: Old class has been linked' missing
from stdout/stderr"" is not found in the output.  Removing that check makes the
test pass.
;;;",,,,,,,,,,,,,,,,,
AssertionError at jdk.compiler/com.sun.tools.javac.util.Assert.error(Assert.java:155) ,JDK-8274942,5059802,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,gli,webbuggrp,webbuggrp,2021-10-05 03:07,2021-11-23 13:06,2023-10-01 09:57,2021-11-02 18:59,11,14,18,9,,,,18,tools,,0,dcsad,jdk17u-fix-request,jdk17u-fix-SQE-ok,jdk17u-fix-yes,regression,reproducer-yes,webbug,,,,,,,,,,,,,,,"A DESCRIPTION OF THE PROBLEM :
The following code fails to compile with javac:
 
__________________________________SOURCE___________________________________________________________________________
import java.lang.annotation.*;

public class MyClass {
    public enum Pack1 {a1, a2, a3, a4};
    public enum Pack2 {b0, b1, b2, b3, b4, b5, b6, b7, b8, b9};
    
    public @interface SomeAnnot {
        public float[] ff() default {};
        Pack1[] ee() default {Pack1.a1};
    }
        
    @Retention(RetentionPolicy.RUNTIME)
    @Target({ElementType.TYPE_USE, ElementType.TYPE_PARAMETER})
    public @interface SomeAnnots {
        public Pack2[] ee();
        public SomeAnnot[] params();
        int a() default -1;
    }
    public static void main(String args[]) {
      double d = 3.5;
      int a = (@SomeAnnots(ee = {}, params = {}, a = (@SomeAnnots(ee = {}, params = {}) int) 1.5) int) 2.3;
      System.out.println(a);
    }
}
______________________________________________________________________________________________________________________

And outputs the following assertion error on jdk 9 and jdk 10:
An exception has occurred in the compiler (9.0.1). Please file a bug against the Java compiler via the Java bug reporting page (http://bugreport.java.com) after checking the Bug Database (http://bugs.java.com) for duplicates. Include your program and the following diagnostic in your report. Thank you.
java.lang.AssertionError
	at jdk.compiler/com.sun.tools.javac.util.Assert.error(Assert.java:155)
	at jdk.compiler/com.sun.tools.javac.util.Assert.checkNonNull(Assert.java:62)
	at jdk.compiler/com.sun.tools.javac.comp.Annotate.fromAnnotations(Annotate.java:160)
	at jdk.compiler/com.sun.tools.javac.comp.Annotate.lambda$annotateTypeSecondStage$5(Annotate.java:993)
	at jdk.compiler/com.sun.tools.javac.comp.Annotate.flush(Annotate.java:187)
	at jdk.compiler/com.sun.tools.javac.comp.Attr.visitMethodDef(Attr.java:1091)
	at jdk.compiler/com.sun.tools.javac.tree.JCTree$JCMethodDecl.accept(JCTree.java:866)
	at jdk.compiler/com.sun.tools.javac.comp.Attr.attribTree(Attr.java:653)
	at jdk.compiler/com.sun.tools.javac.comp.Attr.attribStat(Attr.java:723)
	at jdk.compiler/com.sun.tools.javac.comp.Attr.attribClassBody(Attr.java:4562)
	at jdk.compiler/com.sun.tools.javac.comp.Attr.attribClass(Attr.java:4454)
	at jdk.compiler/com.sun.tools.javac.comp.Attr.attribClass(Attr.java:4383)
	at jdk.compiler/com.sun.tools.javac.comp.Attr.attrib(Attr.java:4328)
	at jdk.compiler/com.sun.tools.javac.main.JavaCompiler.attribute(JavaCompiler.java:1329)
	at jdk.compiler/com.sun.tools.javac.main.JavaCompiler.compile(JavaCompiler.java:959)
	at jdk.compiler/com.sun.tools.javac.main.Main.compile(Main.java:302)
	at jdk.compiler/com.sun.tools.javac.main.Main.compile(Main.java:162)
	at jdk.compiler/com.sun.tools.javac.Main.compile(Main.java:57)
	at jdk.compiler/com.sun.tools.javac.Main.main(Main.java:43)

And the following assertion error on jdk 11:  
compiler message file broken: key=compiler.misc.msg.bug arguments=11.0.5, {1}, {2}, {3}, {4}, {5}, {6}, {7}
java.lang.AssertionError
	at jdk.compiler/com.sun.tools.javac.util.Assert.error(Assert.java:155)
	at jdk.compiler/com.sun.tools.javac.util.Assert.checkNonNull(Assert.java:62)
	at jdk.compiler/com.sun.tools.javac.comp.Annotate.fromAnnotations(Annotate.java:167)
	at jdk.compiler/com.sun.tools.javac.comp.Annotate.lambda$annotateTypeSecondStage$5(Annotate.java:1025)
	at jdk.compiler/com.sun.tools.javac.comp.Annotate.flush(Annotate.java:194)
	at jdk.compiler/com.sun.tools.javac.comp.Attr.visitMethodDef(Attr.java:1095)
	at jdk.compiler/com.sun.tools.javac.tree.JCTree$JCMethodDecl.accept(JCTree.java:866)
	at jdk.compiler/com.sun.tools.javac.comp.Attr.attribTree(Attr.java:655)
	at jdk.compiler/com.sun.tools.javac.comp.Attr.attribStat(Attr.java:724)
	at jdk.compiler/com.sun.tools.javac.comp.Attr.attribClassBody(Attr.java:4683)
	at jdk.compiler/com.sun.tools.javac.comp.Attr.attribClass(Attr.java:4574)
	at jdk.compiler/com.sun.tools.javac.comp.Attr.attribClass(Attr.java:4503)
	at jdk.compiler/com.sun.tools.javac.comp.Attr.attrib(Attr.java:4448)
	at jdk.compiler/com.sun.tools.javac.main.JavaCompiler.attribute(JavaCompiler.java:1341)
	at jdk.compiler/com.sun.tools.javac.main.JavaCompiler.compile(JavaCompiler.java:973)
	at jdk.compiler/com.sun.tools.javac.api.JavacTaskImpl.lambda$doCall$0(JavacTaskImpl.java:104)
	at jdk.compiler/com.sun.tools.javac.api.JavacTaskImpl.handleExceptions(JavacTaskImpl.java:147)
	at jdk.compiler/com.sun.tools.javac.api.JavacTaskImpl.doCall(JavacTaskImpl.java:100)
	at jdk.compiler/com.sun.tools.javac.api.JavacTaskImpl.call(JavacTaskImpl.java:94)
	at com.jdoodle.CompilerService.compileJava(CompilerService.java:775)
	at com.jdoodle.CompilerService.compileAndCopyJava(CompilerService.java:741)
	at com.jdoodle.CompilerService.compileInMemoryForJava(CompilerService.java:225)
	at com.jdoodle.CompilerService.executeProgram(CompilerService.java:104)
	at com.jdoodle.CompilerController.executeNonInteractive(CompilerController.java:125)
	at jdk.internal.reflect.GeneratedMethodAccessor114.invoke(Unknown Source)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:205)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:133)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:97)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:827)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:738)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:85)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:963)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:897)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:970)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:872)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:661)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:846)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:742)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:52)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:99)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.HttpPutFormContentFilter.doFilterInternal(HttpPutFormContentFilter.java:105)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.HiddenHttpMethodFilter.doFilterInternal(HiddenHttpMethodFilter.java:81)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:197)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:198)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:478)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:140)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:80)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:87)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:342)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:799)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:66)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:861)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1455)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.base/java.lang.Thread.run(Thread.java:834)


With jdk 8 this code compiles and executes without problems.

FREQUENCY: always.


REGRESSION : Last worked in version 8


FREQUENCY : always


",,,,,,,,,,,JDK-8277618,JDK-8277705,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"2021-10-07 22:20;adev;Test.java;https://bugs.openjdk.org/secure/attachment/96677/Test.java",,,,,generic,,,,,,,9,,generic,,,,,"0|i2uk4j:",9223372036854775807,b22,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4dca67bd,,,,,,,,,"2021-10-07 22:11;adev;The issue is reproducible with JDK 9 onwards:
Following are the observations:
1. JDK 8-pool pass
2. JDK 9: fails with Assertion error
3. JDK 11: fails with Assertion error
4. JDK 14: fails with Assertion error
5. JDK 18: fails with Assertion error
;;;","2021-11-02 18:59;roboduke;Changeset: 2b02b6f5
Author:    Guoxiong Li <gli@openjdk.org>
Date:      2021-11-03 01:57:52 +0000
URL:       https://git.openjdk.java.net/jdk/commit/2b02b6f513b062261195ca1edd059d16abb7bec6
;;;","2021-11-09 19:12;gli;Fix Request(17u)

Request to backport this change to jdk17u. The code applies cleanly.

Thanks!;;;",,,,,,,,,,,,,,,,,,,,,,,
Incorrect size of the pixel storage is used by the robot on macOS,JDK-8274939,5060000,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,serb,serb,serb,2021-10-07 19:36,2022-12-19 17:11,2023-10-01 09:57,2022-02-12 14:11,11,17,18,9,,,,19,client-libs,,0,11-bp,17-bp,jdk11u-fix-request,jdk11u-fix-yes,jdk17u-fix-request,jdk17u-fix-yes,macos,regression,regression_8162959,,,,,,,,,,,,,"On macOS, the robot class prepares the data for pixel storage in some clumsy way so for some scale factors the size of the storage is calculated wrong causes the pixels to be misplaced.",,,,,,,,,,,JDK-8285822,JDK-8284222,JDK-8299062,,,,,,,,,,,,,,,,,,,,,,JDK-8280861,,,,,JDK-8162959,,,,,,,,,,generic,,,,,,b161,9,,os_x,,,,,"0|i2ulcj:",9223372036854775807,b10,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@5a9b3fd3,,,,,,,,,"2021-12-10 09:05;vdyakov;this is not a P2 by severity of issue and introduced in JDK 9 years ago;;;","2021-12-10 09:06;vdyakov;the proposed fix is too risky and not appropriate for stabilizing JDK 18, so re-targeted to 19;;;","2022-02-12 14:11;roboduke;Changeset: eff5dafb
Author:    Sergey Bylokhov <serb@openjdk.org>
Date:      2022-02-12 22:10:11 +0000
URL:       https://git.openjdk.java.net/jdk/commit/eff5dafba9f72bd0612357712ffa472ce1c9166a
;;;","2022-03-31 16:16;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk17u-dev/pull/324
Date: 2022-03-31 23:02:10 +0000;;;","2022-03-31 16:36;serb;Fix Request (17u)

- Justification: The fix for the possible buffer overrun in native code.
- Risk Analysis: Low, trivial change of the size used to store the pixels.
- Testing: The fix verified by the test, and the jdk_desktop tests are green
- PR: https://github.com/openjdk/jdk17u-dev/pull/324

The patch from jdk-dev (19) applies cleanly to 17u;;;","2022-12-17 17:59;serb;Fix Request (11u)

- Justification: The fix for the possible buffer overrun in native code.
- Risk Analysis: Low, trivial change of the size used to store the pixels.
- Testing: The fix verified by the test, and the jdk_desktop tests are green
- PR: https://github.com/openjdk/jdk11u-dev/pull/1600;;;","2022-12-17 18:04;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk11u-dev/pull/1600
Date: 2022-12-17 02:37:20 +0000;;;",,,,,,,,,,,,,,,,,,,
"Remove compress(m, v) and expand(m, v) flavor from Vector API",JDK-8274936,5059996,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,sviswanathan,sviswanathan,sviswanathan,2021-10-07 15:08,2021-10-07 16:31,2023-10-01 09:57,2021-10-07 16:31,repo-panama,,,,,,,,core-libs,,0,,,,,,,,,,,,,,,,,,,,,,"Remove compress(m, v) and expand(m, v) flavor from Vector API.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2ulbn:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
dumptime_table has stale entry,JDK-8274935,5059995,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,coleenp,coleenp,coleenp,2021-10-07 14:44,2022-01-27 05:36,2023-10-01 09:57,2021-10-11 05:12,18,,,,,,,18,hotspot,,0,cds,,,,,,,,,,,,,,,,,,,,,"With the fix for JDK-8274753, there's a stale entry that is in the dumptime_table but not cleaned up with class unloading.  It's not in the CLD::_klasses list.

adding com/sun/net/httpserver/HttpExchange to the table 0x0000000800c01c20
Expected: java.lang.LinkageError: loader constraint violation: loader java.net.URLClassLoader @7cca494b wants to load abstract class com.sun.net.httpserver.HttpExchange. A different abstract class with the same name was previously loaded by 'platform'. (com.sun.net.httpserver.HttpExchange is in module jdk.httpserver of loader 'platform')
adding java/lang/Throwable$PrintStreamOrWriter to the table 0x0000000800c481f0
adding java/lang/Throwable$WrappedPrintStream to the table 0x0000000800c48400
java.lang.LinkageError: loader constraint violation: loader java.net.URLClassLoader @7cca494b wants to load abstract class com.sun.net.httpserver.HttpExchange. A different abstract class with the same name was previously loaded by 'platform'. (com.sun.net.httpserver.HttpExchange is in module jdk.httpserver of loader 'platform')

The class gets a linkage error but it's never deleted because it's put on the deallocate_list as an error class, and when the class loader is unloaded, it's been removed from the _klasses list.

So it's left in the table with contents deleted, which is bad.",,,,,,,,,,,JDK-8280803,JDK-8276225,,,,,,,,,,,,,,,,,,,,,,,JDK-8274753,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2ulbf:",9223372036854775807,b19,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,,,"2021-10-11 05:11;roboduke;Changeset: 110e38de
Author:    Coleen Phillimore <coleenp@openjdk.org>
Date:      2021-10-11 12:11:11 +0000
URL:       https://git.openjdk.java.net/jdk/commit/110e38ded8e09361f24c582c770d35f5cfdabf82
;;;","2021-12-20 05:17;roboduke;A pull request was submitted for review.

URL: https://git.openjdk.java.net/jdk17u-dev/pull/10
Date: 2021-12-20 13:11:41 +0000
;;;","2021-12-20 05:19;goetz;Fix request [17u]

I backport this for parity with 17.0.3-oracle.
Same as  JDK-8274753.
Clean backport.;;;","2022-01-25 01:25;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk17u-dev/pull/118
Date: 2022-01-25 09:20:30 +0000;;;",,,,,,,,,,,,,,,,,,,,,,
Attempting to acquire lock JNICritical_lock/41 out of order with lock MultiArray_lock/41,JDK-8274934,5059994,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,coleenp,dcubed,dcubed,2021-10-07 13:53,2021-10-13 17:39,2023-10-01 09:57,2021-10-08 14:12,18,,,,,,,18,hotspot,,0,intermittent,tier4,tier5,tier8,,,,,,,,,,,,,,,,,,"The following test failed in the JDK18 CI:

vmTestbase/nsk/sysdict/vm/stress/btree/btree006/btree006.java

Here's a snippet from the log file:

#section:main
----------messages:(4/331)----------
command: main -XX:-UseGCOverheadLimit nsk.sysdict.share.BTreeTest -jarpath btree.jar:fats.jar -useFatClass
reason: User specified action: run main/othervm -XX:-UseGCOverheadLimit nsk.sysdict.share.BTreeTest -jarpath btree.jar${path.separator}fats.jar -useFatClass 
Mode: othervm [/othervm specified]
elapsed time (seconds): 13.209
----------configuration:(0/0)----------
----------System.out:(57/4169)----------
The level = 3 the height = 4
Stress time: 120 seconds
Stress iterations factor: 1
Stress threads factor: 1
Stress runs factor: 1
Max memory: 3120562176
Sleep time: 500
Iterations: 0
Number of threads: 16
Run GC thread: false
Run mem diag thread: false
Run forever: false
For random generator using seed: 4242882341725657613
To re-run test with same seed value please add ""-Djdk.test.lib.random.seed=4242882341725657613"" to command line.
Starting Thread[nsk.sysdict.share.SysDictTest$Worker@15ee8277,5,MainThreadGroup]
Starting Thread[nsk.sysdict.share.SysDictTest$Worker@b8188f5,5,MainThreadGroup]
Starting Thread[nsk.sysdict.share.SysDictTest$Worker@6a1d4ec8,5,MainThreadGroup]
Starting Thread[nsk.sysdict.share.SysDictTest$Worker@36ffcba8,5,MainThreadGroup]
Starting Thread[nsk.sysdict.share.SysDictTest$Worker@2e533164,5,MainThreadGroup]
Starting Thread[nsk.sysdict.share.SysDictTest$Worker@2992c27b,5,MainThreadGroup]
Starting Thread[nsk.sysdict.share.SysDictTest$Worker@2979b28f,5,MainThreadGroup]
Starting Thread[nsk.sysdict.share.SysDictTest$Worker@61139e83,5,MainThreadGroup]
Starting Thread[nsk.sysdict.share.SysDictTest$Worker@56fc4bd4,5,MainThreadGroup]
Starting Thread[nsk.sysdict.share.SysDictTest$Worker@6942ca6a,5,MainThreadGroup]
Starting Thread[nsk.sysdict.share.SysDictTest$Worker@d4bf007,5,MainThreadGroup]
Starting Thread[nsk.sysdict.share.SysDictTest$Worker@70d190ab,5,MainThreadGroup]
Starting Thread[nsk.sysdict.share.SysDictTest$Worker@4447d78e,5,MainThreadGroup]
Starting Thread[nsk.sysdict.share.SysDictTest$Worker@3ba954f6,5,MainThreadGroup]
Starting Thread[nsk.sysdict.share.SysDictTest$Worker@6930404c,5,MainThreadGroup]
Starting Thread[nsk.sysdict.share.SysDictTest$Worker@1598c109,5,MainThreadGroup]
 Locks owned:
Mutex: [0x0000fffc540264a0] MultiArray_lock - owner: 0x0000fffc54317010 safepoint_check_always
# To suppress the following error report, specify this argument
# after -XX: or in .hotspotrc:  SuppressErrorAt=/mutex.cpp:418
#
# A fatal error has been detected by the Java Runtime Environment:
#
#  Internal Error (/opt/mach5/mesos/work_dir/slaves/ff806ead-2cac-495d-9cbc-62116f99bf14-S30351/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/05471bf8-5f3a-4bd5-9073-1b709c806616/runs/77cd69ac-438f-48dc-82b6-c1adf3484e80/workspace/open/src/hotspot/share/runtime/mutex.cpp:418), pid=3796057, tid=3796091
#  assert(false) failed: Attempting to acquire lock JNICritical_lock/41 out of order with lock MultiArray_lock/41 -- possible deadlock
#
# JRE version: Java(TM) SE Runtime Environment (18.0+19) (fastdebug build 18-ea+19-1101)
# Java VM: Java HotSpot(TM) 64-Bit Server VM (fastdebug 18-ea+19-1101, mixed mode, sharing, tiered, compressed oops, compressed class ptrs, g1 gc, linux-aarch64)
# Problematic frame:
# V  [libjvm.so+0x13e6a6c][thread 3796124 also had an error]
  Mutex::check_rank(Thread*)+0x10c
#
# Core dump will be written. Default location: Core dumps may be processed with ""/opt/core.sh %p"" (or dumping to /opt/mach5/mesos/work_dir/slaves/35546316-ed70-4084-8244-d672e7734fd1-S13291/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/ee5067a9-ec34-41ad-acb0-52fabfebbd75/runs/556f6905-c928-4d38-80e8-acf92eb12676/testoutput/test-support/jtreg_open_test_hotspot_jtreg_vmTestbase_nsk_sysdict/scratch/2/core.3796057)
#
# An error report file with more information is saved as:
# /opt/mach5/mesos/work_dir/slaves/35546316-ed70-4084-8244-d672e7734fd1-S13291/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/ee5067a9-ec34-41ad-acb0-52fabfebbd75/runs/556f6905-c928-4d38-80e8-acf92eb12676/testoutput/test-support/jtreg_open_test_hotspot_jtreg_vmTestbase_nsk_sysdict/scratch/2/hs_err_pid3796057.log
#
# Compiler replay data is saved as:
# /opt/mach5/mesos/work_dir/slaves/35546316-ed70-4084-8244-d672e7734fd1-S13291/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/ee5067a9-ec34-41ad-acb0-52fabfebbd75/runs/556f6905-c928-4d38-80e8-acf92eb12676/testoutput/test-support/jtreg_open_test_hotspot_jtreg_vmTestbase_nsk_sysdict/scratch/2/replay_pid3796057.log
#
# If you would like to submit a bug report, please visit:
#   https://bugreport.java.com/bugreport/crash.jsp
#
----------System.err:(0/0)----------
----------rerun:(33/7574)*----------


Here's the crashing thread's stack:

---------------  T H R E A D  ---------------

Current thread (0x0000fffc54317010):  JavaThread ""C1 CompilerThread0"" daemon [_thread_in_vm, id=3796091, stack(0x0000fffc24e00000,0x0000fffc25000000)]


Current CompileTask:
C1:   6863  833       3       java.security.AccessControlContext::optimize (319 bytes)

Stack: [0x0000fffc24e00000,0x0000fffc25000000],  sp=0x0000fffc24ffc920,  free space=2034k
Native frames: (J=compiled Java code, j=interpreted, Vv=VM code, C=native code)
V  [libjvm.so+0x13e6a6c]  Mutex::check_rank(Thread*)+0x10c
V  [libjvm.so+0x13e84bc]  Mutex::lock(Thread*)+0x38
V  [libjvm.so+0xcd929c]  GCLocker::stall_until_clear()+0x9c
V  [libjvm.so+0xbfc444]  G1CollectedHeap::attempt_allocation_slow(unsigned long)+0x834
V  [libjvm.so+0xc0140c]  G1CollectedHeap::attempt_allocation(unsigned long, unsigned long, unsigned long*)+0x3ec
V  [libjvm.so+0x132ed94]  MemAllocator::allocate_inside_tlab_slow(MemAllocator::Allocation&) const+0x300
V  [libjvm.so+0x132fd84]  MemAllocator::allocate() const+0x154
V  [libjvm.so+0xe0a788]  InstanceMirrorKlass::allocate_instance(Klass*, JavaThread*)+0x58
V  [libjvm.so+0xe5f5a8]  java_lang_Class::create_mirror(Klass*, Handle, Handle, Handle, Handle, JavaThread*)+0x148
V  [libjvm.so+0x6574f4]  ArrayKlass::complete_create_array_klass(ArrayKlass*, Klass*, ModuleEntry*, JavaThread*)+0x214
V  [libjvm.so+0x1426cf0]  ObjArrayKlass::allocate_objArray_klass(ClassLoaderData*, int, Klass*, JavaThread*)+0x50c
V  [libjvm.so+0xdeb704]  InstanceKlass::array_klass(int, JavaThread*)+0xd4
V  [libjvm.so+0x142697c]  ObjArrayKlass::allocate_objArray_klass(ClassLoaderData*, int, Klass*, JavaThread*)+0x198
V  [libjvm.so+0xdeb704]  InstanceKlass::array_klass(int, JavaThread*)+0xd4
V  [libjvm.so+0x8e0484]  ciObjArrayKlass::make_impl(ciKlass*)+0x80
V  [libjvm.so+0x88c9bc]  ciEnv::get_klass_by_name_impl(ciKlass*, constantPoolHandle const&, ciSymbol*, bool)+0x428
V  [libjvm.so+0x88ce8c]  ciEnv::get_klass_by_index_impl(constantPoolHandle const&, int, bool&, ciInstanceKlass*)+0x14c
V  [libjvm.so+0x89d5e0]  ciField::ciField(ciInstanceKlass*, int)+0x790
V  [libjvm.so+0x88ba78]  ciEnv::get_field_by_index_impl(ciInstanceKlass*, int)+0x78
V  [libjvm.so+0x88c560]  ciEnv::get_field_by_index(ciInstanceKlass*, int)+0x90
V  [libjvm.so+0x8ffc64]  ciBytecodeStream::get_field(bool&)+0x84
V  [libjvm.so+0x71fac4]  GraphBuilder::access_field(Bytecodes::Code)+0x30
V  [libjvm.so+0x724d20]  GraphBuilder::iterate_bytecodes_for_block(int)+0x910
V  [libjvm.so+0x726798]  GraphBuilder::iterate_all_blocks(bool)+0x94
V  [libjvm.so+0x727a2c]  GraphBuilder::GraphBuilder(Compilation*, IRScope*)+0x568
V  [libjvm.so+0x736860]  IRScope::IRScope(Compilation*, IRScope*, int, ciMethod*, int, bool)+0x3c0
V  [libjvm.so+0x736a74]  IR::IR(Compilation*, ciMethod*, int)+0xd0
V  [libjvm.so+0x6fe77c]  Compilation::build_hir() [clone .part.0]+0x22c
V  [libjvm.so+0x702ef4]  Compilation::compile_java_method()+0x1b0
V  [libjvm.so+0x703d48]  Compilation::compile_method()+0x1d8
V  [libjvm.so+0x7046d8]  Compilation::Compilation(AbstractCompiler*, ciEnv*, ciMethod*, int, BufferBlob*, bool, DirectiveSet*)+0x2d8
V  [libjvm.so+0x705bf8]  Compiler::compile_method(ciEnv*, ciMethod*, int, bool, DirectiveSet*)+0x158
V  [libjvm.so+0x9e4ec8]  CompileBroker::invoke_compiler_on_method(CompileTask*)+0x8b8
V  [libjvm.so+0x9e593c]  CompileBroker::compiler_thread_loop()+0x2dc
V  [libjvm.so+0x1756074]  JavaThread::thread_main_inner()+0x284
V  [libjvm.so+0x175c648]  Thread::call_run()+0xf8
V  [libjvm.so+0x1487594]  thread_native_entry(Thread*)+0x104
C  [libpthread.so.0+0x7738]  start_thread+0x198

Starting this one in hotspot/runtime since @coleenp has been
changing the internal mutex code.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,aarch64,,,,,,,,,linux,,,,,"0|i2ulb7:",9223372036854775807,b19,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,,,"2021-10-07 20:26;dcubed;Here's the crashing thread's stack for the jdk-18+19-1111-tier4 sighting:

applications/kitchensink/Kitchensink.java 

---------------  T H R E A D  ---------------

Current thread (0x00007f7173abd470):  JavaThread ""C2 CompilerThread1"" daemon [_thread_in_vm, id=3968033, stack(0x00007f70a4cfd000,0x00007f70a4dfe000)]


Current CompileTask:
C2: 448070 19857    b        com.sun.tools.javac.comp.Resolve::findIdentInternal (102 bytes)

Stack: [0x00007f70a4cfd000,0x00007f70a4dfe000],  sp=0x00007f70a4df9a70,  free space=1010k
Native frames: (J=compiled Java code, j=interpreted, Vv=VM code, C=native code)
V  [libjvm.so+0x14d9ad0]  Mutex::check_rank(Thread*)+0xe0
V  [libjvm.so+0x14db591]  Mutex::lock(Thread*)+0x31
V  [libjvm.so+0xd02db2]  GCLocker::stall_until_clear()+0x92
V  [libjvm.so+0xc1c1eb]  G1CollectedHeap::attempt_allocation_slow(unsigned long)+0x83b
V  [libjvm.so+0xc21187]  G1CollectedHeap::attempt_allocation(unsigned long, unsigned long, unsigned long*)+0x397
V  [libjvm.so+0x141a2b4]  MemAllocator::allocate_inside_tlab_slow(MemAllocator::Allocation&) const+0x344
V  [libjvm.so+0x141b241]  MemAllocator::allocate() const+0x151
V  [libjvm.so+0xe46175]  InstanceMirrorKlass::allocate_instance(Klass*, JavaThread*)+0x55
V  [libjvm.so+0xe9ff6e]  java_lang_Class::create_mirror(Klass*, Handle, Handle, Handle, Handle, JavaThread*)+0x13e
V  [libjvm.so+0x5cfa0c]  ArrayKlass::complete_create_array_klass(ArrayKlass*, Klass*, ModuleEntry*, JavaThread*)+0x21c
V  [libjvm.so+0x1518142]  ObjArrayKlass::allocate_objArray_klass(ClassLoaderData*, int, Klass*, JavaThread*)+0x4f2
V  [libjvm.so+0xe27027]  InstanceKlass::array_klass(int, JavaThread*)+0xf7
V  [libjvm.so+0x8fcd4b]  ciObjArrayKlass::make_impl(ciKlass*) [clone .constprop.0]+0x7b
V  [libjvm.so+0x8feff1]  ciObjArrayKlass::make(ciKlass*)+0x2b1
V  [libjvm.so+0x938d5a]  ciTypeFlow::StateVector::apply_one_bytecode(ciBytecodeStream*)+0xe7a
V  [libjvm.so+0x93ec18]  ciTypeFlow::flow_block(ciTypeFlow::Block*, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*)+0x208
V  [libjvm.so+0x93ff4b]  ciTypeFlow::df_flow_types(ciTypeFlow::Block*, bool, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*)+0x44b
V  [libjvm.so+0x94068e]  ciTypeFlow::flow_types()+0x41e
V  [libjvm.so+0x9411c6]  ciTypeFlow::do_flow()+0x26
V  [libjvm.so+0x8d4f84]  ciMethod::get_flow_analysis()+0x64
V  [libjvm.so+0x6bb75e]  InlineTree::check_can_parse(ciMethod*)+0xee
V  [libjvm.so+0x6bcd3e]  InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&, bool&)+0xde
V  [libjvm.so+0xb53694]  Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool)+0x914
V  [libjvm.so+0xb5496c]  Parse::do_call()+0x29c
V  [libjvm.so+0x15cf938]  Parse::do_one_bytecode()+0x428
V  [libjvm.so+0x15bda48]  Parse::do_one_block()+0x838
V  [libjvm.so+0x15be970]  Parse::do_all_blocks()+0x130
V  [libjvm.so+0x15c3775]  Parse::Parse(JVMState*, ciMethod*, float)+0xb95
V  [libjvm.so+0x8230e0]  ParseGenerator::generate(JVMState*)+0x110
V  [libjvm.so+0xa06c82]  Compile::Compile(ciEnv*, ciMethod*, int, bool, bool, bool, bool, bool, DirectiveSet*)+0x1352
V  [libjvm.so+0x820146]  C2Compiler::compile_method(ciEnv*, ciMethod*, int, bool, DirectiveSet*)+0x646
V  [libjvm.so+0xa171d9]  CompileBroker::invoke_compiler_on_method(CompileTask*)+0xc39
V  [libjvm.so+0xa17e38]  CompileBroker::compiler_thread_loop()+0x518
V  [libjvm.so+0x1893eac]  JavaThread::thread_main_inner()+0x27c
V  [libjvm.so+0x189a460]  Thread::call_run()+0x100
V  [libjvm.so+0x1577c54]  thread_native_entry(Thread*)+0x104;;;","2021-10-08 14:12;roboduke;Changeset: 3cb9724e
Author:    Coleen Phillimore <coleenp@openjdk.org>
Date:      2021-10-08 21:10:42 +0000
URL:       https://git.openjdk.java.net/jdk/commit/3cb9724ed94a7267853c5cddb18b4ae868ecf2e9
;;;","2021-10-09 14:52;dcubed;This fix is integrated in jdk-18+19-1122.;;;",,,,,,,,,,,,,,,,,,,,,,,
Render scales in EmbeddedWindow are not properly updated,JDK-8274932,5059807,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,psadhukhan,webbuggrp,webbuggrp,2021-10-05 03:53,2023-08-30 04:41,2023-10-01 09:57,2023-08-21 02:54,jfx11,jfx16,jfx17,jfx18,,,,jfx22,javafx,,0,dcspn,reproducer-yes,sn_150,sn_151,webbug,,,,,,,,,,,,,,,,,"ADDITIONAL SYSTEM INFORMATION :
Windows 10 Enterprise 21H1 (19043.1237)
openjdk version ""11.0.11"" 2021-04-20
OpenJDK Runtime Environment AdoptOpenJDK-11.0.11+9 (build 11.0.11+9)
OpenJDK 64-Bit Server VM AdoptOpenJDK-11.0.11+9 (build 11.0.11+9, mixed mode)

One screen with a Windows scaling of 125%

A DESCRIPTION OF THE PROBLEM :
Layouting of JavaFX components rely on proper values for renderScaleX and renderScaleY of the stage. If the scale is 1.0 instead of 1.25, then images and text looks blurry after scaled by the operating system.
When the JavaFX scene is set before it is really shown, then those scale factors are not properly propagated to the EmbeddedWindow.

STEPS TO FOLLOW TO REPRODUCE THE PROBLEM :
Use any Windows display with a scaling of 125% and start the attached test case (using SET_FRAME_VISIBLE_LATE set to true, i.e. setScene() is called before frame.setVisibile()).

EXPECTED VERSUS ACTUAL BEHAVIOR :
EXPECTED -
The text should be 125% and the filled rectangular box shows only black pixels, including all pixels that are part of the edges.
ACTUAL -
The text is 100% and the pixels at the edges are gray instead of black.

---------- BEGIN SOURCE ----------
package de.empic.openjfx;

import javax.swing.JFrame;
import javax.swing.SwingUtilities;

import javafx.application.Platform;
import javafx.embed.swing.JFXPanel;
import javafx.geometry.Insets;
import javafx.scene.Scene;
import javafx.scene.control.Label;
import javafx.scene.layout.Background;
import javafx.scene.layout.BackgroundFill;
import javafx.scene.layout.CornerRadii;
import javafx.scene.layout.HBox;
import javafx.scene.layout.Region;
import javafx.scene.layout.VBox;
import javafx.scene.paint.Color;

public class Main
{
   private static final boolean SET_FRAME_VISIBLE_LATE = true;

   private static void initAndShowGUI()
   {
      JFrame frame = new JFrame(""Swing and JavaFX"");
      final JFXPanel fxPanel = new JFXPanel();
      frame.add(fxPanel);
      frame.setSize(300, 200);
      frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);

      if (!SET_FRAME_VISIBLE_LATE)
      {
         setFrameVisible(frame);
      }

      Platform.runLater(() -> initFX(fxPanel, frame));
   }

   private static void initFX(JFXPanel fxPanel, JFrame frame)
   {
      // This method is invoked on the JavaFX thread
      Scene scene = createScene();
      fxPanel.setScene(scene);
      if (SET_FRAME_VISIBLE_LATE)
      {
         SwingUtilities.invokeLater(() -> setFrameVisible(frame));
      }
   }

   private static void setFrameVisible(JFrame frame)
   {
      frame.setVisible(true);
   }

   private static Scene createScene()
   {
      VBox root = new VBox();
      root.setPadding(new Insets(5));
      Scene scene = new Scene(root);

      HBox hBox = new HBox();
      hBox.setPrefSize(30, 30);
      hBox.setMaxWidth(Region.USE_PREF_SIZE);
      hBox.setBackground(new Background(new BackgroundFill(Color.BLACK, CornerRadii.EMPTY, Insets.EMPTY)));

      Label label = new Label();

      scene.windowProperty().addListener((ob, oldWindow, newWindow) ->
                                         {
                                            newWindow.renderScaleXProperty().addListener((obs, oldValue, newValue) -> updateText(label, newValue));
                                            updateText(label, newWindow.getRenderScaleX());
                                         });

      root.getChildren().addAll(hBox, label);

      return (scene);
   }

   private static void updateText(Label label, Number scaleX)
   {
      if (scaleX == null)
      {
         label.setText(""Unknown scale x"");
      }
      else
      {
         label.setText(String.format(""%.0f%%"", scaleX.doubleValue() * 100));
      }
   }

   public static void main(String[] args)
   {
      SwingUtilities.invokeLater(Main::initAndShowGUI);
   }
}

---------- END SOURCE ----------

CUSTOMER SUBMITTED WORKAROUND :
Change the order of setScene() and setVisible(true).

FREQUENCY : always


",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"2021-10-07 13:26;pnarayanaswa;Capture.PNG;https://bugs.openjdk.org/secure/attachment/96675/Capture.PNG","2021-10-07 13:26;pnarayanaswa;Main.java;https://bugs.openjdk.org/secure/attachment/96676/Main.java",,,,generic,,,,,,,,,generic,,,,,"0|i2uk5n:",9223372036854775807,b06,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@368b4b86,,,,,,,,,"2021-10-07 13:26;pnarayanaswa;Checked with attached test case,changed display scaling to 125%, issue is reproducible<attached screenshot for reference>
Test Result:
=========
openjfx11: Fail
openjfx16: Fail
openjfx17: Fail
openjfx18ea: Fail;;;","2023-07-06 06:16;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jfx/pull/1171
Date: 2023-07-06 13:10:44 +0000;;;","2023-08-21 02:54;dukebot;Changeset: 6a7c7437
Author:    Prasanta Sadhukhan <psadhukhan@openjdk.org>
Date:      2023-08-21 09:52:48 +0000
URL:       https://git.openjdk.org/jfx/commit/6a7c743765f50d469ab72be907c45005202be6b5
;;;",,,,,,,,,,,,,,,,,,,,,,,
sun/tools/jps/TestJps.java can fail with long VM arguments string,JDK-8274930,5059990,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,amenkov,amenkov,amenkov,2021-10-07 12:01,2021-11-09 09:19,2023-10-01 09:57,2021-11-02 14:59,,,,,,,,18,core-svc,,0,,,,,,,,,,,,,,,,,,,,,,"make run-test TEST=open/test/jdk/sun/tools/jps/TestJps.java TEST_VM_OPTS=""-XX:+IgnoreUnrecognizedVMOptions -XX:-MylonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglongOption""

fails with:
java.lang.RuntimeException: '^25968.*-XX:Flags=C:\\\\ade\\\\jvm\\\\jdk-master\\\\build\\\\windows-x64-debug\\\\test-support\\\\jtreg_open_test_jdk_sun_tools_jps_TestJps_java\\\\scratch\\\\0\\\\vmflags.*' missing from stdout/stderr 

	at jdk.test.lib.process.OutputAnalyzer.shouldMatch(OutputAnalyzer.java:340)
	at JpsHelper.runJpsVariants(JpsHelper.java:243)
	at TestJps.testJps(TestJps.java:56)
	at TestJps.main(TestJps.java:64)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at com.sun.javatest.regtest.agent.MainWrapper$MainThread.run(MainWrapper.java:127)
	at java.base/java.lang.Thread.run(Thread.java:833)


The test fails analyzing ""jps -v"" output
Corresponding log:
25968 LingeredAppForJps -Xmx768m -XX:MaxRAMPercentage=6.25 -Djava.io.tmpdir=c:\\ade\\jvm\\jdk-master\\build\\windows-x64-debug\\test-support\\jtreg_open_test_jdk_sun_tools_jps_TestJps_java\\tmp -XX:+IgnoreUnrecognizedVMOptions -XX:-MylonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglongOption -ea -esa -XX:+UsePerfData -Xmx512m -Xlog:gc -Dmultiline.prop=value1\\nvalue2\\r\\nvalue3 -XX:Flags=C:\\ade\\jvm\\jdk

This is artificial example, but we have failures in Oracle CI in some environments due long paths which make VM argument string too long (> 1024 symbols)",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8274402,,,,,,,,,,JDK-7091209,,,,,,,,,,generic,,,,,,,,,generic,,,,,"0|i2ulab:",9223372036854775807,b22,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@22f3cc74,,,,,,,,,"2021-11-02 14:59;roboduke;Changeset: bb92fb02
Author:    Alex Menkov <amenkov@openjdk.org>
Date:      2021-11-02 21:57:16 +0000
URL:       https://git.openjdk.java.net/jdk/commit/bb92fb02ca8c5795989065a9037748dc39ed77db
;;;",,,,,,,,,,,,,,,,,,,,,,,,,
Crash while reading specific clipboard content,JDK-8274929,5059588,Bug,Resolved,JDK,JDK,software,duke,,,P2,Fixed,kcr,webbuggrp,webbuggrp,2021-09-30 08:43,2021-11-23 07:03,2023-10-01 09:57,2021-11-11 05:49,8,jfx11,jfx17,,,,,jfx18,javafx,,0,8bpr-critical-approved,bugdb_33532031,CPU22_01-critical-approved,CPU22_01-critical-SQE-OK,dcspn,reproducer-yes,sn_105,webbug,,,,,,,,,,,,,,"A DESCRIPTION OF THE PROBLEM :
If Windows Clipboard contains specific content it causes a crash of the JVM. 

We provide you with comprehensive informations:
- Error Log (glass.dll)
- Standalone Testcase
Please download from: <Link>
Please inform me after downloading the files!

This issue relates to old bug tickets, which weren't solved because of missing information about the error:
https://bugs.openjdk.java.net/browse/JDK-8117544
https://bugs.openjdk.java.net/browse/JDK-8115102

Thank you very much!

Kind regards,

Mathias Tratschuk


STEPS TO FOLLOW TO REPRODUCE THE PROBLEM :
See Standalone Testcase
<link>



FREQUENCY : always


",,,,,,,,,,,JDK-8277067,JDK-8277005,JDK-8277141,JDK-8277648,JDK-8277068,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8117544,JDK-8115102,JDK-8277544,,,"2021-10-12 07:15;kcr;ClipboardCrash.java;https://bugs.openjdk.org/secure/attachment/96710/ClipboardCrash.java",,,,,x86_64,,,,,,,,,windows_10,,,,,"0|i2uisz:",9223372036854775807,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4f591050,,,,,,,,,"2021-10-12 05:54;kcr;The provided test case uses internal classes and methods. We need a test case that uses public API only.

Marking as incomplete pending a conformant test case.;;;","2021-10-12 07:07;kcr;Even though this is using internal interfaces, it should not crash, and is still a bug in our code.

I can reproduce this on JDK 8u301 as well as the latest JavaFX 18-ea build.

For JavaFX 11 and later, it is necessary to run it as follows:

$ java --add-exports java.desktop/sun.awt.datatransfer=ALL-UNNAMED --add-exports javafx.graphics/com.sun.glass.ui=ALL-UNNAMED ClipboardCrash;;;","2021-11-11 05:49;roboduke;Changeset: effcc866
Author:    Kevin Rushforth <kcr@openjdk.org>
Date:      2021-11-11 13:48:36 +0000
URL:       https://git.openjdk.java.net/jfx/commit/effcc86667f0ed7cf2899384fbc5fd97b8c9f7b5
;;;",,,,,,,,,,,,,,,,,,,,,,,
Shenandoah: shenandoah/TestAllocHumongousFragment.java test failed on lock rank check,JDK-8274925,5059987,Bug,Resolved,JDK,JDK,software,duke,,,P2,Fixed,zgu,zgu,zgu,2021-10-07 10:42,2021-10-18 12:55,2023-10-01 09:57,2021-10-11 10:00,18,,,,,,,18,hotspot,,0,gc-shenandoah,,,,,,,,,,,,,,,,,,,,,"The test failed with iu aggressive mode.

#
# A fatal error has been detected by the Java Runtime Environment:
#
#  Internal Error (/home/zgu/ws/jdk/src/hotspot/share/runtime/mutex.cpp:418), pid=1345654, tid=1345669
#  assert(false) failed: Attempting to acquire lock ShenandoahAllocFailureGC_lock/41 out of order with lock MultiArray_lock/41 -- possible deadlock
#
# JRE version: OpenJDK Runtime Environment (18.0) (fastdebug build 18-internal+0-adhoc.zgu.jdk)
# Java VM: OpenJDK 64-Bit Server VM (fastdebug 18-internal+0-adhoc.zgu.jdk, mixed mode, sharing, tiered, compressed oops, compressed class ptrs, shenandoah gc, linux-amd64)
# Problematic frame:
# V  [libjvm.so+0x15012d0]  Mutex::check_rank(Thread*)+0xf0
#
# No core dump will be written. Core dumps have been disabled. To enable core dumping, try ""ulimit -c unlimited"" before starting Java again
#
# If you would like to submit a bug report, please visit:
#   https://bugreport.java.com/bugreport/crash.jsp
#
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8275204,,,,,,,,JDK-8273917,,,,,,,,,,,,,,,,,,,,,,,,"0|i2ul9n:",9223372036854775807,b19,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6b00f96c,,,,,,,,,"2021-10-08 05:20;zgu;JDK-8273917 changed MultiArray_lock rank from nonleaf+2 to nonleaf;;;","2021-10-11 10:00;roboduke;Changeset: 75f5145e
Author:    Zhengyu Gu <zgu@openjdk.org>
Date:      2021-10-11 16:58:53 +0000
URL:       https://git.openjdk.java.net/jdk/commit/75f5145e21a1320c1a08080af861497ce7c3f266
;;;",,,,,,,,,,,,,,,,,,,,,,,,
"testlibrary_tests/ir_framework/tests/TestIRMatching.java fails with ""java.lang.RuntimeException: Should have thrown exception""",JDK-8274911,5059971,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,chagedorn,dcubed,dcubed,2021-10-07 07:06,2022-12-27 01:23,2023-10-01 09:57,2021-10-12 06:22,17,18,,,,,,18,hotspot,,0,intermittent,ir-framework,jdk17u-fix-request,jdk17u-fix-yes,noreg-self,oracle-triage-18,tier5,,,,,,,,,,,,,,,"The following test failed in the JDK18 CI:

testlibrary_tests/ir_framework/tests/TestIRMatching.java

Here's a snippet from the log file:

TestIRMatching failed with one or more exceptions:
Should have thrown exception
java.lang.RuntimeException: Should have thrown exception
	at jdk.test.lib.Asserts.fail(Asserts.java:594)
	at ir_framework.tests.Utils.shouldHaveThrownException(Utils.java:38)
	at ir_framework.tests.TestIRMatching.runCheck(TestIRMatching.java:342)
	at ir_framework.tests.TestIRMatching.main(TestIRMatching.java:146)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:76)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:51)
	at java.base/java.lang.reflect.Method.invoke(Method.java:569)
	at com.sun.javatest.regtest.agent.MainWrapper$MainThread.run(MainWrapper.java:127)
	at java.base/java.lang.Thread.run(Thread.java:833)
---------
java.lang.RuntimeException: TestIRMatching failed with one or more exceptions - check stderr and stdout
	at ir_framework.tests.TestIRMatching.main(TestIRMatching.java:312)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:76)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:51)
	at java.base/java.lang.reflect.Method.invoke(Method.java:569)
	at com.sun.javatest.regtest.agent.MainWrapper$MainThread.run(MainWrapper.java:127)
	at java.base/java.lang.Thread.run(Thread.java:833)

JavaTest Message: Test threw exception: java.lang.RuntimeException: TestIRMatching failed with one or more exceptions - check stderr and stdout
JavaTest Message: shutting down test

STATUS:Failed.`main' threw exception: java.lang.RuntimeException: TestIRMatching failed with one or more exceptions - check stderr and stdout
----------rerun:(38/9780)*----------",,,,,,,,,,,JDK-8299360,JDK-8296866,,,,,,,,,,,,,,,,,,JDK-8296852,,,,,,,,,,JDK-8271471,JDK-8275173,,,,,,,,,,,,,,,,,,,,,,,"0|i2ul63:",9223372036854775807,b19,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2021-10-07 07:56;chagedorn;ILW = IR framework test fails intermittently, intermittent and only occurred once, no workaround =  MLH = P4;;;","2021-10-12 06:22;roboduke;Changeset: f6234606
Author:    Christian Hagedorn <chagedorn@openjdk.org>
Date:      2021-10-12 13:21:35 +0000
URL:       https://git.openjdk.java.net/jdk/commit/f62346066869b681d1cc9f63775393b11a48722a
;;;","2022-12-23 02:35;goetz;Fix request [17u]

I backport this for parity with 17.0.7-oracle.
No risk, only a test change.
Clean backport.
Tests pass. SAP nightly testing passed.;;;","2022-12-23 02:40;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/981
Date: 2022-12-23 10:33:36 +0000;;;",,,,,,,,,,,,,,,,,,,,,,
Too weak variable type leads to unnecessary cast in jdk.javadoc,JDK-8274900,5059959,Bug,Resolved,JDK,JDK,software,duke,,,P5,Fixed,aturbanov,aturbanov,aturbanov,2021-10-07 04:46,2021-10-13 17:39,2023-10-01 09:57,2021-10-08 16:09,17,18,,,,,,18,tools,,0,,,,,,,,,,,,,,,,,,,,,,"There are several redundant casts, caused by fact, that related declared variable has too weak type.
They are detected by IntelliJ IDEA inspection 'Too weak variable type leads to unnecessary cast'.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2ul3f:",9223372036854775807,b19,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@7900061a,,,,,,,,,"2021-10-08 16:09;roboduke;Changeset: 9c431dd1
Author:    Andrey Turbanov <turbanoff@gmail.com>
Committer: Pavel Rappo <prappo@openjdk.org>
Date:      2021-10-08 23:08:05 +0000
URL:       https://git.openjdk.java.net/jdk/commit/9c431dd168c8a752d4aa1bde2268db0425d76990
;;;",,,,,,,,,,,,,,,,,,,,,,,,,
(se) Selector.open throws IAE when the default file system provider is changed to a custom provider,JDK-8274883,5059941,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,michaelm,mkartashev,mkartashev,2021-10-07 01:10,2021-12-13 19:16,2023-10-01 09:57,2021-12-07 09:00,16,17,,,,,,18,core-libs,,0,,,,,,,,,,,,,,,,,,,,,,"An attempt to use `SelectorProvider.provider().openSelector()` on Windows when the file system was specified via `-Djava.nio.file.spi.DefaultFileSystemProvider` fails with an exception starting with Java 16. 

To reproduce: on a Windows system, in the JDK root, go to `test/jdk/java/nio/file/spi`, compile `TestProvider.java` and this test class:
```
import java.nio.channels.spi.SelectorProvider;
public class UnixSocketInNonDefaultFS {
    public static void main(String args[]) throws java.io.IOException {
            try {
                    SelectorProvider.provider().openSelector();
            } catch(ExceptionInInitializerError e) {
                    e.getCause().printStackTrace();
            }
    }
}
```
Executing `java  -Djava.nio.file.spi.DefaultFileSystemProvider=TestProvider UnixSocketInNonDefaultFS` produces this output:
```
java.lang.IllegalArgumentException
        at java.base/java.net.UnixDomainSocketAddress.of(UnixDomainSocketAddress.java:168)
        at java.base/java.net.UnixDomainSocketAddress.of(UnixDomainSocketAddress.java:146)
        at java.base/sun.nio.ch.UnixDomainSockets.<clinit>(UnixDomainSockets.java:47)
        at java.base/sun.nio.ch.SelectorProviderImpl.openServerSocketChannel(SelectorProviderImpl.java:101
)
        at java.base/java.nio.channels.ServerSocketChannel.open(ServerSocketChannel.java:176)
        at java.base/sun.nio.ch.PipeImpl.createListener(PipeImpl.java:221)
        at java.base/sun.nio.ch.PipeImpl$Initializer$LoopbackConnector.run(PipeImpl.java:125)
        at java.base/sun.nio.ch.PipeImpl$Initializer.run(PipeImpl.java:83)
        at java.base/sun.nio.ch.PipeImpl$Initializer.run(PipeImpl.java:67)
        at java.base/java.security.AccessController.doPrivileged(AccessController.java:569)
        at java.base/sun.nio.ch.PipeImpl.<init>(PipeImpl.java:195)
        at java.base/sun.nio.ch.WEPollSelectorImpl.<init>(WEPollSelectorImpl.java:78)
        at java.base/sun.nio.ch.WEPollSelectorProvider.openSelector(WEPollSelectorProvider.java:33)
        at UnixSocketInNonDefaultFS.main(UnixSocketInNonDefaultFS.java:15)
```

Doing the same with JDK11 produces no such exception.

The problem seems to be in the early bail-out during the static initialization of the `UnixDomainSockets.UNNAMED` field even though it isn't used on this code path.",,,,,,,,,,,JDK-8278688,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8245194,,,,,,,,,,generic,,,,,,,,,windows,,,,,"0|i2ukzf:",9223372036854775807,b27,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@674604a9,,,,,,,,,"2021-12-07 09:00;roboduke;Changeset: 7217cb78
Author:    Maxim Kartashev <maxim.kartashev@jetbrains.com>
Committer: Michael McMahon <michaelm@openjdk.org>
Date:      2021-12-07 16:59:34 +0000
URL:       https://git.openjdk.java.net/jdk/commit/7217cb78789046cfc823b63cacc36f6cf2b825f5
;;;",,,,,,,,,,,,,,,,,,,,,,,,,
Remove Amman/Cairo hacks in ZoneInfoFile,JDK-8274864,5059918,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,naoto,naoto,naoto,2021-10-06 16:37,2023-05-19 06:36,2023-10-01 09:57,2021-10-08 09:12,,,,,,,,18,core-libs,,0,jdk11u-fix-request,jdk11u-fix-yes,jdk17u-fix-request,jdk17u-fix-yes,jdk8u-fix-no,jdk8u-fix-request,noreg-cleanup,,,,,,,,,,,,,,,"There's a piece of hacks in sun/util/calendar/ZoneInfoFile.java, to tweak endOfDay rules for Asia/Amman and Africa/Cairo. These hacks are no longer needed as secondOfDay holds correct values, even beyond the end of day. It is a leftover of JDK-8212970.
In fact, the hacks would be problematic, say if Jordan had a DST starting rule at ""lastFri & startTime= 0:00"", it would be incorrectly translated into ""lastThu & startTime=24:00""",,,,,,,,,,,JDK-8307443,JDK-8306232,JDK-8308421,JDK-8305725,JDK-8307839,JDK-8305727,JDK-8305965,JDK-8305967,JDK-8305723,,,,,,,,,,,,,,,,,,,,,JDK-8212970,,,,,,,,,,generic,,,,,,,,,generic,,,,,"0|i2ukub:",9223372036854775807,b19,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@7644fb4c,,,,,,,,,"2021-10-08 09:12;roboduke;Changeset: ec199072
Author:    Naoto Sato <naoto@openjdk.org>
Date:      2021-10-08 16:11:22 +0000
URL:       https://git.openjdk.java.net/jdk/commit/ec199072c5867624d66840238cc8828e16ae8da7
;;;","2023-04-12 11:32;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/1240
Date: 2023-04-12 18:23:05 +0000;;;","2023-04-12 12:28;andrew;Fix Request [11u, 17u]

Clean backport and makes backport of tzdata 2023c (JDK-8305113) near clean. Potentially fixes bugs that may occur with new timezone rules. Already backported to Oracle's 11.0.20 & 17.0.8.;;;","2023-04-12 18:13;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk11u-dev/pull/1828
Date: 2023-04-13 01:05:53 +0000;;;","2023-04-13 16:46;vrudomet;Fix Request [8u] 

Clean backport and is a prerequisite for tzdata 2023c update (JDK-8305113). Already backported to Oracle 8u381, as well as 11, 17.
Run tests in jdk/test/java/util/TimeZone jdk/test/java/time/test jdk/test/sun/util/resources jdk/test/sun/text/resources jdk/test/sun/util/calendar: Test results: passed: 123
;;;","2023-04-13 16:51;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk8u-dev/pull/304
Date: 2023-04-13 23:45:54 +0000;;;","2023-04-13 19:02;andrew;8u does not have JDK-8212970 and still uses rearguard format, so I don't believe this change is safe to apply there.;;;",,,,,,,,,,,,,,,,,,,
gcc 10.2.1 produces an uninitialized warning in sharedRuntimeTrig.cpp,JDK-8274860,5059912,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,alvdavi,alvdavi,alvdavi,2021-10-06 14:04,2023-03-22 21:45,2023-10-01 09:57,2021-11-19 10:14,11,,,,,,,11.0.14,hotspot,,0,jdk11u-fix-request,jdk11u-fix-yes,noreg-build,,,,,,,,,,,,,,,,,,,"Opening on behalf of Joshua Cao <joshcao@amazon.com>

There is a warning when trying to build OpenJDK11 using gcc10.2.1. This warning does not happen when building newer JDK versions, it seems JDK-8211029 disabled the warning for maybe-uninitialized.

* For target hotspot_variant-server_libjvm_objs_sharedRuntimeTrig.o:
/home/joshcao/jdk/jdk11u-dev/src/hotspot/share/runtime/sharedRuntimeTrig.cpp: In function 'int __kernel_rem_pio2(double*, double*, int, int, int, const int*)':
/home/joshcao/jdk/jdk11u-dev/src/hotspot/share/runtime/sharedRuntimeTrig.cpp:300:14: error: 'fq[0]' may be used uninitialized in this function [-Werror=maybe-uninitialized]
  300 |     fw = fq[0]-fw;
      |          ~~~~^
cc1plus: all warnings being treated as errors",,,,,,,,,,,JDK-8304766,,,,,,,,,,,,,,,,,,,,,,,,JDK-8211029,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2uksz:",9223372036854775807,b04,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,,,"2021-10-12 11:26;mseledtsov;This code change should be applied to JDK 18 as well.;;;","2021-10-12 11:39;phh;In that case, add 13, 15, 17, and 18 to the Affected Version/s, apply the patch to 18, then backport it.
;;;","2021-11-02 18:44;dholmes;This warning looks like a false positive to me. I'd prefer to see the warning disabled than make a change to highly optimised math code.;;;","2021-11-18 13:56;phh;Fix Request (11u)

On behalf of joshcao@amazon.com. Suppresses a warning, no semantic change.
;;;","2021-11-19 10:14;roboduke;Changeset: 5e085484
Author:    Joshua Cao <joshcao@amazon.com>
Committer: Paul Hohensee <phh@openjdk.org>
Date:      2021-11-19 18:13:20 +0000
URL:       https://git.openjdk.java.net/jdk11u-dev/commit/5e085484dfe5cff46e921c887266661ac97041a5
;;;","2021-11-23 22:39;roboduke;Changeset: 5e085484
Author:    Joshua Cao <joshcao@amazon.com>
Committer: Paul Hohensee <phh@openjdk.org>
Date:      2021-11-19 18:13:20 +0000
URL:       https://git.openjdk.java.net/jdk11u/commit/5e085484dfe5cff46e921c887266661ac97041a5
;;;",,,,,,,,,,,,,,,,,,,,
Failing jpackage tests with fastdebug/release build,JDK-8274856,5059907,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,asemenyuk,rkennke,rkennke,2021-10-06 12:52,2022-07-19 00:59,2023-10-01 09:57,2021-11-15 09:59,17,18,,,,,,18,tools,,0,jdk17u-fix-request,jdk17u-fix-yes,redhat-interest,sn_103,sn_104,sn_105,sn_106,,,,,,,,,,,,,,,"I noticed that several jpackage tests are failing in my fastdebug builds, for example:

LANG=C LOG=info CONF=linux-x86_64-server-fastdebug make run-test TEST=tools/jpackage/share/jdk/jpackage/tests/BasicTest.java

fails with several stacktraces like this:
java.lang.AssertionError: Expected [0]. Actual [134]: Check command [""/home/rkennke/src/openjdk/lilliput/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_tools_jpackage_share_jdk_jpackage_tests_BasicTest_java/scratch/0/./testWhitespaceInPaths/jumps over the lazy dog/WhitespaceInPathsBasicTest/bin/WhitespaceInPathsBasicTest""](1) exited with 0 code
	at jdk.jpackage.test.TKit.error(TKit.java:264)
	at jdk.jpackage.test.TKit.assertEquals(TKit.java:567)
	at jdk.jpackage.test.Executor$Result.assertExitCodeIs(Executor.java:183)

executing the package directly results in crash with coredump:
./build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_tools_jpackage_share_jdk_jpackage_tests_BasicTest_java/tools/jpackage/share/jdk/jpackage/tests/BasicTest/testWhitespaceInPaths/jumps\ over\ the\ lazy\ dog/WhitespaceInPathsBasicTest/bin/WhitespaceInPathsBasicTest
hello: Environment supports a display
hello: Environment supports a desktop
jpackage test application
args.length: 0
hello: Output file: [appOutput.txt]
pure virtual method called
terminate called without an active exception
Aborted (core dumped)

when running it in gdb, I am getting the following stacktrace:
(gdb) bt
#0  0x00007ffff783e37f in raise () from /lib64/libc.so.6
#1  0x00007ffff7828db5 in abort () from /lib64/libc.so.6
#2  0x00007ffff72dc09b in __gnu_cxx::__verbose_terminate_handler() [clone .cold.1] () from /lib64/libstdc++.so.6
#3  0x00007ffff72e253c in __cxxabiv1::__terminate(void (*)()) () from /lib64/libstdc++.so.6
#4  0x00007ffff72e2597 in std::terminate() () from /lib64/libstdc++.so.6
#5  0x00007ffff72e33f5 in __cxa_pure_virtual () from /lib64/libstdc++.so.6
#6  0x00007ffff75fcab8 in Logger::log(Logger::LogLevel, char const*, int, char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&) const ()
   from /home/rkennke/src/openjdk/lilliput/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_tools_jpackage_share_jdk_jpackage_tests_BasicTest_java/tools/jpackage/share/jdk/jpackage/tests/BasicTest/testWhitespaceInPaths/jumps over the lazy dog/WhitespaceInPathsBasicTest/lib/libapplauncher.so
#7  0x00007ffff75e88bc in (anonymous namespace)::dcon() ()
   from /home/rkennke/src/openjdk/lilliput/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_tools_jpackage_share_jdk_jpackage_tests_BasicTest_java/tools/jpackage/share/jdk/jpackage/tests/BasicTest/testWhitespaceInPaths/jumps over the lazy dog/WhitespaceInPathsBasicTest/lib/libapplauncher.so
#8  0x00007ffff7ddfc96 in _dl_fini () from /lib64/ld-linux-x86-64.so.2
#9  0x00007ffff7840b0c in __run_exit_handlers () from /lib64/libc.so.6
#10 0x00007ffff7840c40 in exit () from /lib64/libc.so.6
#11 0x00007ffff782a49a in __libc_start_main () from /lib64/libc.so.6
#12 0x0000555555400e4e in _start ()

the call into __cxa_pure_virtual () seems to indicate that the binary is linked such that it's calling into a pure virtual method.

Curiously, I cannot reproduce the problem with a slowdebug build.
It does reproduce with release and fastdebug builds.

Please let me know what I can do to help narrow the problem.",,,,,,,,,,,JDK-8289941,JDK-8290506,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8263466,JDK-8279370,,,,,,,,,x86_64,,,,,,,,,linux_redhat_8.0,,,,,"0|i2ukrv:",9223372036854775807,b24,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@3656b41f,,,,,,,,,"2021-10-06 13:25;asemenyuk;Is this 100% reproducible? Seems to be related to JDK-8263466.
Can you try running the test app with JPACKAGE_DEBUG env variable set to ""true"":
---
env JPACKAGE_DEBUG=true .../bin/WhitespaceInPathsBasicTest
---
It should produce log messages that might help clarify the problem.
It seems like libapplauncher.so is not unloaded by dynamic linker before JVM is started. Unload happens during vm shutdown and it messes up things.;;;","2021-10-06 13:30;rkennke;Yes, it is 100% reproducible. Yes, looks similar to JDK-8263466. I should also add that this problem is already present for some time, at least JDK 17 timeframe, maybe JDK 16.;;;","2021-10-06 14:00;asemenyuk;It crashes at https://github.com/openjdk/jdk/blob/af3df6300efddc8ba12f095b87205cc2fea1f1e8/src/jdk.jpackage/linux/native/libapplauncher/LinuxLauncherLib.cpp#L157. We can remove LOG_TRACE statement and see what will happen, but this would be hiding a problem, not a fix.;;;","2021-10-07 01:36;rkennke;This is the complete output with JPACKAGE_DEBUG=true:
$ JPACKAGE_DEBUG=true ./build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_tools_jpackage_share_jdk_jpackage_tests_BasicTest_java/tools/jpackage/share/jdk/jpackage/tests/BasicTest/testWhitespaceInPaths/jumps\ over\ the\ lazy\ dog/WhitespaceInPathsBasicTest/bin/WhitespaceInPathsBasicTest
popen: (rpm --queryformat '%{NAME}' -qf '/home/rkennke/src/openjdk/lilliput/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_tools_jpackage_share_jdk_jpackage_tests_BasicTest_java/tools/jpackage/share/jdk/jpackage/tests/BasicTest/testWhitespaceInPaths/jumps over the lazy dog/WhitespaceInPathsBasicTest/bin/WhitespaceInPathsBasicTest' 2>/dev/null)
popen: [file /home/rkennke/src/openjdk/lilliput/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_tools_jpackage_share_jdk_jpackage_tests_BasicTest_java/tools/jpackage/share/jdk/jpackage/tests/BasicTest/testWhitespaceInPaths/jumps over the lazy dog/WhitespaceInPathsBasicTest/bin/WhitespaceInPathsBasicTest is not owned by any package]
popen: exit: 256
popen: (dpkg -S '/home/rkennke/src/openjdk/lilliput/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_tools_jpackage_share_jdk_jpackage_tests_BasicTest_java/tools/jpackage/share/jdk/jpackage/tests/BasicTest/testWhitespaceInPaths/jumps over the lazy dog/WhitespaceInPathsBasicTest/bin/WhitespaceInPathsBasicTest' 2>/dev/null)
popen: exit: 32512
[TRACE] app.cpp:123: Entering launch
[TRACE] Executor.cpp:41: Reading output of [rpm --queryformat '%{NAME}' -qf '/home/rkennke/src/openjdk/lilliput/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_tools_jpackage_share_jdk_jpackage_tests_BasicTest_java/tools/jpackage/share/jdk/jpackage/tests/BasicTest/testWhitespaceInPaths/jumps over the lazy dog/WhitespaceInPathsBasicTest/bin/WhitespaceInPathsBasicTest' 2>/dev/null] command
[TRACE] Executor.cpp:57: Next line: [file /home/rkennke/src/openjdk/lilliput/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_tools_jpackage_share_jdk_jpackage_tests_BasicTest_java/tools/jpackage/share/jdk/jpackage/tests/BasicTest/testWhitespaceInPaths/jumps over the lazy dog/WhitespaceInPathsBasicTest/bin/WhitespaceInPathsBasicTest is not owned by any package]
[TRACE] Executor.cpp:41: Reading output of [dpkg -S '/home/rkennke/src/openjdk/lilliput/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_tools_jpackage_share_jdk_jpackage_tests_BasicTest_java/tools/jpackage/share/jdk/jpackage/tests/BasicTest/testWhitespaceInPaths/jumps over the lazy dog/WhitespaceInPathsBasicTest/bin/WhitespaceInPathsBasicTest' 2>/dev/null] command
[TRACE] LinuxLauncherLib.cpp:122: Set _JPACKAGE_LAUNCHER=[0]
[TRACE] AppLauncher.cpp:118: Launcher config file path: ""/home/rkennke/src/openjdk/lilliput/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_tools_jpackage_share_jdk_jpackage_tests_BasicTest_java/tools/jpackage/share/jdk/jpackage/tests/BasicTest/testWhitespaceInPaths/jumps over the lazy dog/WhitespaceInPathsBasicTest/lib/app/WhitespaceInPathsBasicTest.cfg""
[TRACE] JvmLauncher.cpp:43: Jvm(0x561ea3f4af90)::Jvm()
[TRACE] AppLauncher.cpp:76: Property ""app.runtime"" not found in ""Application"" section of launcher config file. Using Java runtime from ""/home/rkennke/src/openjdk/lilliput/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_tools_jpackage_share_jdk_jpackage_tests_BasicTest_java/tools/jpackage/share/jdk/jpackage/tests/BasicTest/testWhitespaceInPaths/jumps over the lazy dog/WhitespaceInPathsBasicTest/lib/runtime"" directory
[TRACE] app.cpp:0: Exiting launch (entered at app.cpp:123)
[TRACE] JvmLauncher.cpp:48: Jvm(0x561ea3f4af90)::~Jvm()
[TRACE] JvmLauncher.cpp:273: Need 1358 bytes for JvmlLauncherData buffer
[TRACE] JvmLauncher.cpp:273: Need 1358 bytes for JvmlLauncherData buffer
[TRACE] JvmLauncher.cpp:270: Initialized 1358 bytes at 0x561ea3f4c7e0 address
jli lib: [/home/rkennke/src/openjdk/lilliput/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_tools_jpackage_share_jdk_jpackage_tests_BasicTest_java/tools/jpackage/share/jdk/jpackage/tests/BasicTest/testWhitespaceInPaths/jumps over the lazy dog/WhitespaceInPathsBasicTest/lib/runtime/lib/libjli.so]
jli arg[0]: [/home/rkennke/src/openjdk/lilliput/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_tools_jpackage_share_jdk_jpackage_tests_BasicTest_java/tools/jpackage/share/jdk/jpackage/tests/BasicTest/testWhitespaceInPaths/jumps over the lazy dog/WhitespaceInPathsBasicTest/bin/WhitespaceInPathsBasicTest]
jli arg[1]: [-classpath]
jli arg[2]: [/home/rkennke/src/openjdk/lilliput/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_tools_jpackage_share_jdk_jpackage_tests_BasicTest_java/tools/jpackage/share/jdk/jpackage/tests/BasicTest/testWhitespaceInPaths/jumps over the lazy dog/WhitespaceInPathsBasicTest/lib/app/a/b c.jar]
jli arg[3]: [-Djpackage.app-version=1.0]
jli arg[4]: [-Djpackage.app-path=/home/rkennke/src/openjdk/lilliput/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_tools_jpackage_share_jdk_jpackage_tests_BasicTest_java/tools/jpackage/share/jdk/jpackage/tests/BasicTest/testWhitespaceInPaths/jumps over the lazy dog/WhitespaceInPathsBasicTest/bin/WhitespaceInPathsBasicTest]
jli arg[5]: [Hello]
hello: Environment supports a display
hello: Environment supports a desktop
jpackage test application
args.length: 0
hello: Output file: [appOutput.txt]
pure virtual method called
terminate called without an active exception
Aborted (core dumped)
;;;","2021-10-07 08:09;asemenyuk;Log messages from the app launcher look as expected. 
Can you try running the same app with JPACKAGE_DEBUG=true on slowdebug build? To get an idea when libapplauncher.so is unloaded in your environment in the run that doesn't end up in a crash.;;;","2021-10-07 11:39;rkennke;How can I preserve the app from a non-failing test run?;;;","2021-10-07 12:14;asemenyuk;I think this will work: 

make run-test TEST=tools/jpackage/share/jdk/jpackage/tests/BasicTest.java JTREG_RETAIN=all ""JTREG_JAVA_OPTIONS=-Djpackage.test.keep-work-dir=f,p""

Based on https://github.com/openjdk/jdk/blob/75404ea25ed5ed77fda41afc6662b1fe7ea2fb43/make/RunTests.gmk.
;;;","2021-10-07 12:27;rkennke;This is output from successful slowdebug run:

$ JPACKAGE_DEBUG=true ./build/linux-x86_64-server-slowdebug/test-support/jtreg_test_jdk_tools_jpackage_share_jdk_jpackage_tests_BasicTest_java/tools/jpackage/share/jdk/jpackage/tests/BasicTest/testWhitespaceInPaths/jumps\ over\ the\ lazy\ dog/WhitespaceInPathsBasicTest/bin/WhitespaceInPathsBasicTest
popen: (rpm --queryformat '%{NAME}' -qf '/home/rkennke/src/openjdk/lilliput/build/linux-x86_64-server-slowdebug/test-support/jtreg_test_jdk_tools_jpackage_share_jdk_jpackage_tests_BasicTest_java/tools/jpackage/share/jdk/jpackage/tests/BasicTest/testWhitespaceInPaths/jumps over the lazy dog/WhitespaceInPathsBasicTest/bin/WhitespaceInPathsBasicTest' 2>/dev/null)
popen: [Die Datei /home/rkennke/src/openjdk/lilliput/build/linux-x86_64-server-slowdebug/test-support/jtreg_test_jdk_tools_jpackage_share_jdk_jpackage_tests_BasicTest_java/tools/jpackage/share/jdk/jpackage/tests/BasicTest/testWhitespaceInPaths/jumps over the lazy dog/WhitespaceInPathsBasicTest/bin/WhitespaceInPathsBasicTest gehört zu keinem Paket]
popen: exit: 256
popen: (dpkg -S '/home/rkennke/src/openjdk/lilliput/build/linux-x86_64-server-slowdebug/test-support/jtreg_test_jdk_tools_jpackage_share_jdk_jpackage_tests_BasicTest_java/tools/jpackage/share/jdk/jpackage/tests/BasicTest/testWhitespaceInPaths/jumps over the lazy dog/WhitespaceInPathsBasicTest/bin/WhitespaceInPathsBasicTest' 2>/dev/null)
popen: exit: 32512
[TRACE] app.cpp:123: Entering launch
[TRACE] Executor.cpp:41: Reading output of [rpm --queryformat '%{NAME}' -qf '/home/rkennke/src/openjdk/lilliput/build/linux-x86_64-server-slowdebug/test-support/jtreg_test_jdk_tools_jpackage_share_jdk_jpackage_tests_BasicTest_java/tools/jpackage/share/jdk/jpackage/tests/BasicTest/testWhitespaceInPaths/jumps over the lazy dog/WhitespaceInPathsBasicTest/bin/WhitespaceInPathsBasicTest' 2>/dev/null] command
[TRACE] Executor.cpp:57: Next line: [Die Datei /home/rkennke/src/openjdk/lilliput/build/linux-x86_64-server-slowdebug/test-support/jtreg_test_jdk_tools_jpackage_share_jdk_jpackage_tests_BasicTest_java/tools/jpackage/share/jdk/jpackage/tests/BasicTest/testWhitespaceInPaths/jumps over the lazy dog/WhitespaceInPathsBasicTest/bin/WhitespaceInPathsBasicTest gehört zu keinem Paket]
[TRACE] Executor.cpp:41: Reading output of [dpkg -S '/home/rkennke/src/openjdk/lilliput/build/linux-x86_64-server-slowdebug/test-support/jtreg_test_jdk_tools_jpackage_share_jdk_jpackage_tests_BasicTest_java/tools/jpackage/share/jdk/jpackage/tests/BasicTest/testWhitespaceInPaths/jumps over the lazy dog/WhitespaceInPathsBasicTest/bin/WhitespaceInPathsBasicTest' 2>/dev/null] command
[TRACE] LinuxLauncherLib.cpp:122: Set _JPACKAGE_LAUNCHER=[0]
[TRACE] AppLauncher.cpp:118: Launcher config file path: ""/home/rkennke/src/openjdk/lilliput/build/linux-x86_64-server-slowdebug/test-support/jtreg_test_jdk_tools_jpackage_share_jdk_jpackage_tests_BasicTest_java/tools/jpackage/share/jdk/jpackage/tests/BasicTest/testWhitespaceInPaths/jumps over the lazy dog/WhitespaceInPathsBasicTest/lib/app/WhitespaceInPathsBasicTest.cfg""
[TRACE] JvmLauncher.cpp:43: Jvm(0x556c215d5d30)::Jvm()
[TRACE] AppLauncher.cpp:76: Property ""app.runtime"" not found in ""Application"" section of launcher config file. Using Java runtime from ""/home/rkennke/src/openjdk/lilliput/build/linux-x86_64-server-slowdebug/test-support/jtreg_test_jdk_tools_jpackage_share_jdk_jpackage_tests_BasicTest_java/tools/jpackage/share/jdk/jpackage/tests/BasicTest/testWhitespaceInPaths/jumps over the lazy dog/WhitespaceInPathsBasicTest/lib/runtime"" directory
[TRACE] app.cpp:0: Exiting launch (entered at app.cpp:123)
[TRACE] JvmLauncher.cpp:48: Jvm(0x556c215d5d30)::~Jvm()
[TRACE] JvmLauncher.cpp:273: Need 1358 bytes for JvmlLauncherData buffer
[TRACE] JvmLauncher.cpp:273: Need 1358 bytes for JvmlLauncherData buffer
[TRACE] JvmLauncher.cpp:270: Initialized 1358 bytes at 0x556c215d7720 address
[TRACE] LinuxLauncherLib.cpp:157: unload
jli lib: [/home/rkennke/src/openjdk/lilliput/build/linux-x86_64-server-slowdebug/test-support/jtreg_test_jdk_tools_jpackage_share_jdk_jpackage_tests_BasicTest_java/tools/jpackage/share/jdk/jpackage/tests/BasicTest/testWhitespaceInPaths/jumps over the lazy dog/WhitespaceInPathsBasicTest/lib/runtime/lib/libjli.so]
jli arg[0]: [/home/rkennke/src/openjdk/lilliput/build/linux-x86_64-server-slowdebug/test-support/jtreg_test_jdk_tools_jpackage_share_jdk_jpackage_tests_BasicTest_java/tools/jpackage/share/jdk/jpackage/tests/BasicTest/testWhitespaceInPaths/jumps over the lazy dog/WhitespaceInPathsBasicTest/bin/WhitespaceInPathsBasicTest]
jli arg[1]: [-classpath]
jli arg[2]: [/home/rkennke/src/openjdk/lilliput/build/linux-x86_64-server-slowdebug/test-support/jtreg_test_jdk_tools_jpackage_share_jdk_jpackage_tests_BasicTest_java/tools/jpackage/share/jdk/jpackage/tests/BasicTest/testWhitespaceInPaths/jumps over the lazy dog/WhitespaceInPathsBasicTest/lib/app/a/b c.jar]
jli arg[3]: [-Djpackage.app-version=1.0]
jli arg[4]: [-Djpackage.app-path=/home/rkennke/src/openjdk/lilliput/build/linux-x86_64-server-slowdebug/test-support/jtreg_test_jdk_tools_jpackage_share_jdk_jpackage_tests_BasicTest_java/tools/jpackage/share/jdk/jpackage/tests/BasicTest/testWhitespaceInPaths/jumps over the lazy dog/WhitespaceInPathsBasicTest/bin/WhitespaceInPathsBasicTest]
jli arg[5]: [Hello]
hello: Environment supports a display
hello: Environment supports a desktop
jpackage test application
args.length: 0
hello: Output file: [appOutput.txt]
;;;","2021-10-07 18:44;asemenyuk;In the failing test run:
---
[TRACE] JvmLauncher.cpp:270: Initialized 1358 bytes at 0x561ea3f4c7e0 address
jli lib: [...]
---

In the good test run:
---
[TRACE] JvmLauncher.cpp:270: Initialized 1358 bytes at 0x556c215d7720 address
[TRACE] LinuxLauncherLib.cpp:157: unload
jli lib: [...]
---

In the good test run, libapplauncher.so is unloaded before libjli.so is loaded. This is indicated with ""[TRACE] LinuxLauncherLib.cpp:157: unload"" log statement.
libapplauncher.so unload request is at https://github.com/openjdk/jdk/blob/af3df6300efddc8ba12f095b87205cc2fea1f1e8/src/jdk.jpackage/linux/native/applauncher/LinuxLauncher.c#L98
However, the request is ignored by dynamic linker in fastdebug build and libapplauncher.so is not unloaded.
It is important to unload libapplauncher.so before libjli.so is loaded as libapplauncher.so is linked to libstdc++ and having both libapplauncher.so and libjli.so in address space results in crashes at VM shutdown (More details on the problem with libstdc++ is in JDK-8254702).
It is not the most reliable to rely on the assumption that a shared library will be unloaded after dlcolse() call in general. Need to find a better solution on how to keep libstdc++ used by jpackage applauncher away from the address space where libjli.so will be loaded.;;;","2021-10-11 10:59;asemenyuk;As there is no reliable way to unload libapplauncher.so before libjli.so is loaded, then the suggested workaround could be to fork app launcher process and load libapplauncher.so in the forked process. Use shared memory to pass data constructed in libapplauncher.so to the main process.
The alternative would be to rewrite app launcher in plain C, but this is too much work and too risky.
;;;","2021-11-15 09:59;roboduke;Changeset: fe45835f
Author:    Alexey Semenyuk <asemenyuk@openjdk.org>
Date:      2021-11-15 17:57:58 +0000
URL:       https://git.openjdk.java.net/jdk/commit/fe45835f7cebfccd4544ae19d88bdc7f07560fbe
;;;","2022-07-18 04:19;goetz;Fix request [17u]

I backport this for parity with 17.0.5-oracle.
Clean backport.  SAP nightly testing passed.;;;","2022-07-18 05:19;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/559
Date: 2022-07-18 12:10:15 +0000;;;",,,,,,,,,,,,,
vectorapi tests failing with assert(!vbox->is_Phi()) failed,JDK-8274855,5059906,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,iveresov,dlong,dlong,2021-10-06 12:38,2022-03-07 03:15,2023-10-01 09:57,2021-10-29 11:03,16,17,18,,,,,18,hotspot,,0,hs-comp-triaged,jdk17u-fix-request,jdk17u-fix-yes,oracle-triage-11,oracle-triage-18,regression,tier7,tier8,,,,,,,,,,,,,,"#  Error: assert(!vbox->is_Phi()) failed

Current CompileTask:
C2:  50944 6357 %  b        compiler.vectorapi.VectorCastShape64Test::testIntToShort @ 50 (110 bytes)

Stack: [0x00007fd78dcfd000,0x00007fd78ddfe000],  sp=0x00007fd78ddf9030,  free space=1008k
Native frames: (J=compiled Java code, j=interpreted, Vv=VM code, C=native code)
V  [libjvm.so+0x1917df3]  PhaseVector::expand_vbox_node_helper(Node*, Node*, TypeInstPtr const*, TypeVect const*)+0xb3
V  [libjvm.so+0x1918ac8]  PhaseVector::expand_vbox_node(VectorBoxNode*)+0x1a8
V  [libjvm.so+0x1918d5b]  PhaseVector::expand_vbox_nodes()+0x14b
V  [libjvm.so+0x191b6ec]  PhaseVector::optimize_vector_boxes()+0xdc
V  [libjvm.so+0xa05146]  Compile::Optimize()+0xec6
V  [libjvm.so+0xa0751e]  Compile::Compile(ciEnv*, ciMethod*, int, bool, bool, bool, bool, bool, DirectiveSet*)+0x15ae
V  [libjvm.so+0x820136]  C2Compiler::compile_method(ciEnv*, ciMethod*, int, bool, DirectiveSet*)+0x646
V  [libjvm.so+0xa17819]  CompileBroker::invoke_compiler_on_method(CompileTask*)+0xc39
V  [libjvm.so+0xa18478]  CompileBroker::compiler_thread_loop()+0x518
V  [libjvm.so+0x189456c]  JavaThread::thread_main_inner()+0x27c
V  [libjvm.so+0x189ab20]  Thread::call_run()+0x100
V  [libjvm.so+0x1578314]  thread_native_entry(Thread*)+0x104",,,,,,,,,,,JDK-8280694,JDK-8282741,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2ukrn:",9223372036854775807,b22,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2021-10-06 12:43;dlong;The failures seem to have started after JDK-8273612.  [~iveresov] please take a look.;;;","2021-10-06 12:48;dlong;ILW = MMH = P3;;;","2021-10-06 12:56;kvn;CI build jdk-18+18-1078 Tier7 has next changesets:

JDK-8273612  Fix for JDK-8272873 causes timeout in running some tests with -Xcomp
JDK-8274793  Suppress warnings on non-serializable non-transient instance fields in sun.net
JDK-8274729  Define Position.NOPOS == Diagnostic.NOPOS
JDK-8273670  Remove weak etypes from default krb5 etype list
JDK-8274656  Remove default_checksum and safe_checksum_type from krb5.conf
JDK-8272855  Add linux-aarch64 to tier4 builds
JDK-8274397  [macOS] Stop setting env. var JAVA_MAIN_CLASS_ in launcher code
JDK-8274244  ReportOnImportedModuleAnnotation.java fails on rerun
JDK-8267853  Remove unused styles from stylesheet
JDK-8274744  TestSnippetTag test fails after recent integration
JDK-8273745  VerifyLocale.java occasionally times out
JDK-8274282  Clarify special wait assert
JDK-8274286  Skip null for make_referent_alive in referenceProcessor
JDK-8274299  Make Method/Constructor/Field accessors @Stable
JDK-8274079  Cleanup unnecessary calls to Throwable.initCause() in java.base module
JDK-8273342  Null pointer dereference in classFileParser.cpp:2817
;;;","2021-10-22 12:57;iveresov;It seems that it's triggered by JDK-8273612, but it's not directly related. The problem is with a particular graph shape that occurs when compiling
 compiler.vectorapi.VectorCastShape64Test::testIntToShort @ 50, most likely because it's an OSR with the part of the loop peeled.
I'm not familiar with vector api but looking at the graphs...;;;","2021-10-27 11:53;iveresov;The graph is actually legal. It's just the we don't seem to handle the case when the allocation input to VectorBoxNode is a phi but the vector input is not, which can definitely be the case if the vector input has been GVNed.;;;","2021-10-29 11:03;roboduke;Changeset: 5021a12c
Author:    Igor Veresov <iveresov@openjdk.org>
Date:      2021-10-29 18:03:10 +0000
URL:       https://git.openjdk.java.net/jdk/commit/5021a12ceada3192e81e2c06b556e7c80cd6cf31
;;;","2022-03-04 03:14;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk17u-dev/pull/193
Date: 2022-03-04 11:07:47 +0000;;;","2022-03-05 01:49;mdoerr;Fix Request (17u):
Should get backported for parity with 17.0.4-oracle. Applies cleanly except ProblemList removal (not problem listed in 17u). No new test failures observed (our nightly tests).;;;",,,,,,,,,,,,,,,,,,
Mnemonics for menu containing numeric text not working,JDK-8274854,5059330,Bug,Resolved,JDK,JDK,software,duke,,,P2,Fixed,mstrauss,webbuggrp,webbuggrp,2021-09-27 09:08,2021-11-09 10:17,2023-10-01 09:57,2021-11-08 12:04,jfx17,jfx18,,,,,,jfx18,javafx,,0,dcspn,regression,regression_8137323,reproducer-yes,webbug,,,,,,,,,,,,,,,,,"ADDITIONAL SYSTEM INFORMATION :
Win 10, OpenJDK 17, OpenJFX 17.0.0.1

A DESCRIPTION OF THE PROBLEM :
I've had mnemonics for several releases with no issues. I just updated to JavaFX 17.0.0.1 and mnemonic parsing for a menu which contains only numbers doesn't work as expected. When the app is run the menu text begins with the '_' and mnemonic doesn't work.

All other mnemonics work as in previous versions.

I tested this with OpenJDK16 and OpenJFX 17 and observed the same behavior so I'm assuming the change occurred due to OpenJFX 17.

A few other tests showed that a numeric mnemonic doesn't work regardless of where in the menu text it present.



FREQUENCY : always


",,,,,,,,,,,JDK-8276827,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8137323,,,,,"2021-10-06 12:29;pnarayanaswa;Capture.PNG;https://bugs.openjdk.org/secure/attachment/96671/Capture.PNG","2021-10-06 12:29;pnarayanaswa;Main.java;https://bugs.openjdk.org/secure/attachment/96672/Main.java",,,,generic,,,,,,,,,generic,,,,,"0|i2uh7n:",9223372036854775807,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@67282485,,,,,,,,,"2021-10-06 12:29;pnarayanaswa;Checked with attached test case, issue is reproducible in openjfx 17.0.0.1
Test Result:
=========
8u301:Pass
openjfx11: Pass
openjfx16: Pass
openjfx17.0.0.1: Fail<--Regression
openjfx 18ea2: Fail ;;;","2021-10-09 06:46;mhanl;probably introduced by https://github.com/openjdk/jfx/pull/453;;;","2021-10-11 06:40;kcr;Yes, this regression is very likely introduced by the fix for JDK-8137323.;;;","2021-11-08 12:04;roboduke;Changeset: 6749ab60
Author:    Michael Strauß <mstrauss@openjdk.org>
Committer: Kevin Rushforth <kcr@openjdk.org>
Date:      2021-11-08 20:03:22 +0000
URL:       https://git.openjdk.java.net/jfx/commit/6749ab60b7673a0838d55fbd09cabf4232d5da60
;;;",,,,,,,,,,,,,,,,,,,,,,
LambdaMetaFactory::metafactory on REF_invokeSpecial impl method has incorrect behavior,JDK-8274848,5059898,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,mchung,mchung,mchung,2021-10-06 09:18,2021-11-03 18:01,2023-10-01 09:57,2021-10-28 15:26,15,16,17,18,,,,18,core-libs,,0,jdk17u-fix-request,jdk17u-fix-yes,,,,,,,,,,,,,,,,,,,,"Reported on https://mail.openjdk.java.net/pipermail/jdk-dev/2021-October/006099.html

This is to follow up the behavorial change on LambdaMetaFactory::metafactory when the implementation is REF_invokeSpecial method handle on a public/protected method in the target class.  This won't happen for classes compiled from javac since REF_invokeSpecial method handle is generated when the method is a private method whereas REF_invokeVirtual method handle would be generated on a public/protected.

To reproduce:
1. compile it with java 8
2. modify the access of testPrivate from private to public in .class file (do not modify any invokespecial and ref_invokespecial).
3. Java 14 without JEP 371, the method reference `this::testPrivate` with REF_invokeSpecial kind will be resolved to ExampleClass::testPrivate on a receiver of type ExampleClass$SubClass.   With JEP 371 change, the method reference `test::testPrivate` with REF_invokeSpecial kind will be resolved to ExampleClass$Subclass::testPrivate instead.


import java.util.function.Supplier;

public class ExampleClass {
    public static void main(String[] args) {
        System.out.println(new SubClass().test());
        System.out.println(new SubClass().testWithLMF());
    }

    public String test() {
        return this.testPrivate();
    }

    public String testWithLMF() {
        Supplier<String> supplier = this::testPrivate;
        return supplier.get();
    }

    private String testPrivate() {
        return ""123"";
    }

    public static class SubClass extends ExampleClass {
        public String testPrivate() {
            return ""456"";
        }
    }
}

Java 14:

$ java ExampleClass
123
123

Java 15:

$ java ExampleClass
123
456",,,,,,,,,,,JDK-8276361,JDK-8276261,,,,,,,,,,,,,,,JDK-8276255,,,,,,,,JDK-8246790,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2ukpv:",9223372036854775807,b22,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@1cfeb1de,,,,,,,,,"2021-10-11 13:43;mchung;For classes compiled for a release prior to the nestmate support, the implementation method handle on a private method has to be REF_invokeSpecial reference kind.  Since JDK 15, the lambda proxy class is a hidden class and a nestmate of the host class and LambdaMetaFactory adjusts it to REF_invokeVirtual or REF_invokeInterface for compatibility. 

LMF implementation should only adjust the reference kind if the implementation method is declared in the host class *and* also it's private.   The current implementation only checks the implementation method declared in the host class of any access.

The fix is to check if it's a private method in addition to the declaring class.;;;","2021-10-28 15:26;roboduke;Changeset: 21da2183
Author:    Mandy Chung <mchung@openjdk.org>
Date:      2021-10-28 22:24:56 +0000
URL:       https://git.openjdk.java.net/jdk/commit/21da2183875feca3dbf4f1bd875b268a7fc8d560
;;;","2021-10-29 12:37;mchung;JDK 17u Fix Request:

This issue is a regression introduced by the implementation of JEP 371 (JDK-8238358).  A lambda class, a nestmate of the original class, does not have access to use invokespecial on the original class's super methods.  For such case, the lambda class will invoke the implementation method directly on the method handle (i.e. via MethodHandle::invoke).    On the other hand, invokespecial was used to invoke private methods prior to Java 11 (JEP 181).  Since Java 11, invokespecial is only used to invoke private nestmate constructor.  invokevirtual or invokeinterface is used to the implementation method if it's not a constructor and therefore JDK-8238358 converts REF_invokeSpecial method handle to REF_invokeVirtual or REF_invokeInterface method handle for compatibility reason but such conversion should only apply if the method handle is private.

The fix is trivial and do the conversion only if the implementation method is private.

The commit is applied to jdk17u cleanly.

;;;",,,,,,,,,,,,,,,,,,,,,,,
Update OS detection code to recognize Windows 11,JDK-8274840,5059887,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,mbaesken,mbaesken,mbaesken,2021-10-06 06:21,2023-01-17 05:31,2023-10-01 09:57,2021-10-07 23:41,11,11.0.13-oracle,17,18,7u321,8u311,,18,hotspot,,0,8bpr-critical-approved,azul-interest,CPU21_10-defer-approved,CPU21_10-defer-SQE-OK,jdk11u-fix-request,jdk11u-fix-yes,jdk13u-fix-request,jdk13u-fix-yes,jdk15u-fix-request,jdk15u-fix-yes,jdk17u-fix-request,jdk17u-fix-yes,jdk8u-fix-request,jdk8u-fix-yes,release-note=yes,sqebug,windows11,,,,,"The OS detection code of the JDK/JVM should recognize the new Windows 11. For details see :

https://docs.microsoft.com/en-us/windows/release-health/windows11-release-information

OS build number is : 22000.194 for 21H2 (original release)",,,,,,,,,,,JDK-8275158,JDK-8279280,JDK-8276898,JDK-8275611,JDK-8275323,JDK-8275696,JDK-8275697,JDK-8275284,JDK-8275292,JDK-8293124,,,,,,,,,,JDK-8290422,,JDK-8274499,,,,,,,,JDK-8274499,JDK-8276697,,,,,,,,,generic,,,,,,,,,windows,,,,,"0|i2uknf:",9223372036854775807,b19,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,,,"2021-10-07 23:41;roboduke;Changeset: 97ea9dd2
Author:    Matthias Baesken <mbaesken@openjdk.org>
Date:      2021-10-08 06:40:18 +0000
URL:       https://git.openjdk.java.net/jdk/commit/97ea9dd2f24f9f1fb9b9345a4202a825ee28e014
;;;","2021-10-12 13:51;jnordstrom;For this fix to work in <= JDK8, the change in JDK-8071530 has to be backported.;;;","2021-10-13 01:10;mdoerr;Fix Request (11u):
Should get backported for parity with 11.0.14-oracle. Applies cleanly.;;;","2021-10-13 06:53;hseigel;Fix Request (17u)

This bug fix should be backported to JDK-17u so it can recognize when running on Windows 11.  The fix is small and low risk.  It uses the os build number to determine the Window version.  The patch applied cleanly and was tested with Mach5 tiers 1-5 on Windows x64.;;;","2021-10-19 11:14;omikhaltcova;Fix request (13u) 

I'd like to backport this fix to jdk13u for parity with jdk11u. 
The original patch applied cleanly. Tested via a simple test printing System.getProperty(""os.name"") on Windows 10 and 11.;;;","2021-10-19 11:42;omikhaltcova;Fix request (15u) 

I'd like to backport this fix to jdk15u for parity with jdk11u. 
The original patch applied cleanly. Tested via a simple test printing System.getProperty(""os.name"") on Windows 10 and 11.;;;","2022-07-29 16:41;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk8u-dev/pull/93
Date: 2022-07-29 22:38:36 +0000;;;","2022-08-01 13:32;phh;Fix Request (8u)

On behalf of Rui Li, rgithubli, <ruiamzn@amazon.com>. 

Clean backport from 11u for Oracle parity.
;;;",,,,,,,,,,,,,,,,,,
runtime/cds/appcds/TestSerialGCWithCDS.java fails on Windows,JDK-8274838,5059885,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,jiefu,jiefu,jiefu,2021-10-06 05:42,2021-10-13 17:38,2023-10-01 09:57,2021-10-07 05:43,18,,,,,,,18,hotspot,,0,tencent-interest,,,,,,,,,,,,,,,,,,,,,"3. Exec with -XX:+UseSerialGC -Xmx2m
Command line: [e:\jiefu\ws\jdk\build\windows-x86_64-server-fastdebug\images\jdk\bin\java.exe -cp E:\jiefu\ws\jdk\build\windows-x86_64-server-fastdebug\test-support\jtreg_test_hotspot_jtreg_runtime_cds_appcds_TestSerialGCWithCDS_java\classes\0\runtime\cds\appcds\TestSerialGCWithCDS.d;E:\jiefu\ws\jdk\test\hotspot\jtreg\runtime\cds\appcds;E:\jiefu\ws\jdk\build\windows-x86_64-server-fastdebug\test-support\jtreg_test_hotspot_jtreg_runtime_cds_appcds_TestSerialGCWithCDS_java\classes\0\test\lib;E:\jiefu\ws\jdk\build\windows-x86_64-server-fastdebug\test-support\jtreg_test_hotspot_jtreg_runtime_cds_appcds_TestSerialGCWithCDS_java\classes\0\test\hotspot\jtreg\runtime\cds\appcds;E:\jiefu\ws\gitcode\dev-tools\jtreg\lib\javatest.jar;E:\jiefu\ws\gitcode\dev-tools\jtreg\lib\jtreg.jar;E:\jiefu\ws\gitcode\dev-tools\jtreg\lib\junit.jar;E:\jiefu\ws\gitcode\dev-tools\jtreg\lib\hamcrest.jar;E:\jiefu\ws\gitcode\dev-tools\jtreg\lib\testng.jar;E:\jiefu\ws\gitcode\dev-tools\jtreg\lib\jcommander.jar;E:\jiefu\ws\gitcode\dev-tools\jtreg\lib\guice.jar -XX:MaxRAMPercentage=3.125 -Djava.io.tmpdir=e:\jiefu\ws\jdk\build\windows-x86_64-server-fastdebug\test-support\jtreg_test_hotspot_jtreg_runtime_cds_appcds_TestSerialGCWithCDS_java\tmp -Xshare:on -showversion -XX:SharedArchiveFile=E:\jiefu\ws\jdk\build\windows-x86_64-server-fastdebug\test-support\jtreg_test_hotspot_jtreg_runtime_cds_appcds_TestSerialGCWithCDS_java\scratch\0\appcds-16h18m24s168.jsa -Dtest.timeout.factor=4.0 -cp E:\jiefu\ws\jdk\build\windows-x86_64-server-fastdebug\test-support\jtreg_test_hotspot_jtreg_runtime_cds_appcds_TestSerialGCWithCDS_java\scratch\0\hello.jar -XX:+UnlockDiagnosticVMOptions -XX:VerifyArchivedFields=1 -XX:+UseSerialGC -Xmx256m -XX:ObjectAlignmentInBytes=64 -Xmx2m -Xlog:cds Hello ]
[2021-10-06T08:18:25.938775800Z] Gathering output for process 83324
[ELAPSED: 110 ms]
[logging stdout to E:\jiefu\ws\jdk\build\windows-x86_64-server-fastdebug\test-support\jtreg_test_hotspot_jtreg_runtime_cds_appcds_TestSerialGCWithCDS_java\scratch\0\runtime.cds.appcds.TestSerialGCWithCDS.java-0012-exec.stdout]
[logging stderr to E:\jiefu\ws\jdk\build\windows-x86_64-server-fastdebug\test-support\jtreg_test_hotspot_jtreg_runtime_cds_appcds_TestSerialGCWithCDS_java\scratch\0\runtime.cds.appcds.TestSerialGCWithCDS.java-0012-exec.stderr]
[STDERR]

[2021-10-06T08:18:26.048131900Z] Waiting for completion for process 83324
[2021-10-06T08:18:26.048131900Z] Waiting for completion finished for process 83324
[2021-10-06T08:18:26.048131900Z] Waiting for completion for process 83324
[2021-10-06T08:18:26.048131900Z] Waiting for completion finished for process 83324
STDERR:
 stdout: [[0.010s][info][cds] trying to map E:\jiefu\ws\jdk\build\windows-x86_64-server-fastdebug\test-support\jtreg_test_hotspot_jtreg_runtime_cds_appcds_TestSerialGCWithCDS_java\scratch\0\appcds-16h18m24s168.jsa
[0.010s][info][cds] Opened archive E:\jiefu\ws\jdk\build\windows-x86_64-server-fastdebug\test-support\jtreg_test_hotspot_jtreg_runtime_cds_appcds_TestSerialGCWithCDS_java\scratch\0\appcds-16h18m24s168.jsa.
[0.010s][info][cds] Archive was created with UseCompressedOops = 1, UseCompressedClassPointers = 1
[0.010s][info][cds] full module graph: disabled because archive was created without full module graph
[0.010s][info][cds] Core region alignment: 65536
[0.010s][info][cds] Reserved archive_space_rs [0x0000000800000000 - 0x0000000800c00000] (12582912) bytes
[0.010s][info][cds] Reserved class_space_rs   [0x0000000800c00000 - 0x0000000840c00000] (1073741824) bytes
[0.010s][info][cds] Windows mmap workaround: releasing archive space.
[0.010s][info][cds] Mapped static  region #0 at base 0x0000000800000000 top 0x0000000800480000 (ReadWrite)
[0.010s][info][cds] Mapped static  region #1 at base 0x0000000800480000 top 0x0000000800c00000 (ReadOnly)
[0.010s][info][cds] optimized module handling: enabled
[0.010s][info][cds] full module graph: disabled
Error occurred during initialization of VM
GC triggered before VM initialization completed. Try increasing NewSize, current value 640K.
];
 stderr: []
 exitValue = 1

java.lang.RuntimeException: 'Too small maximum heap' missing from stdout/stderr

        at jdk.test.lib.process.OutputAnalyzer.shouldContain(OutputAnalyzer.java:221)
        at TestSerialGCWithCDS.test(TestSerialGCWithCDS.java:116)
        at TestSerialGCWithCDS.main(TestSerialGCWithCDS.java:57)
        at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
        at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
        at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
        at java.base/java.lang.reflect.Method.invoke(Method.java:568)
        at com.sun.javatest.regtest.agent.MainActionHelper$AgentVMRunnable.run(MainActionHelper.java:312)
        at java.base/java.lang.Thread.run(Thread.java:833)

JavaTest Message: Test threw exception: java.lang.RuntimeException
JavaTest Message: shutting down test


TEST RESULT: Failed. Execution failed: `main' threw exception: java.lang.RuntimeException: 'Too small maximum heap' missing from stdout/stderr",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8273508,,,,,,,,,,,,,,,,,,,,,,,,"0|i2ukmz:",9223372036854775807,b19,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,,,"2021-10-07 05:43;roboduke;Changeset: 722d639f
Author:    Jie Fu <jiefu@openjdk.org>
Date:      2021-10-07 12:42:16 +0000
URL:       https://git.openjdk.java.net/jdk/commit/722d639fad2e4fc6eb2aabd427e2719501899cfe
;;;",,,,,,,,,,,,,,,,,,,,,,,,,
[lworld] Primitive classes can't be retransformed,JDK-8274800,5059843,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,amenkov,jespersm,jespersm,2021-10-05 16:22,2022-01-12 02:00,2023-10-01 09:57,2021-12-10 14:36,repo-valhalla,,,,,,,repo-valhalla,hotspot,,0,lworld,,,,,,,,,,,,,,,,,,,,,"In Valhalla, it appears that the bytecodes of primitive classes are garbled before being retransformed by sun.instrument.InstrumentationImpl.

See the test RedefinePrimitive which is modeled after the RedefineRecord test. Explanation is as follow:

0) The test will first run RedefinePrimitive to create an redefineagent.jar
1) The test will then run RedefinePrimitive again, starting itself inside a new process, using this redefineagent.jar file an an -javaagent.
2) This will launch RedefinePrimitive.premain which will set up a transformer (LoggingTransformer) and add it to the Instrumentation.
3) Then RedefinePrimitive$PrimitiveTester is explicitly loaded, triggering the LoggingTransformer before loading. The class is loaded as expected, which I've verified in classFileParser.cpp.
4) Then the loaded class is passed to Instrumentation.retransformClasses(...), and passed yet through the LoggingTransformer. This time, the bytecode is garbled slightly (see below).
5) When these bytes are checked by classFileParser.cpp, the problems are found in ClassFileParser::parse_methods, explicitly when checking the constructor, yielding a ClassFormatError: ""Method <init> in class RedefinePrimitive$PrimitiveTester (not an inline class) has illegal modifiers: 0x8""

I've attached the difference in 'javap' outputs of RedefinePrimitive$PrimitiveTester (original is 'load.txt', the one seen when redefining is 'redefine.txt'):
 - the 0x10 access flag for the class is missing (which is why ClassFileParser claims it's not an inline class)
 - The field indexes of the three ""withfield"" instructions are modified to something wrong.
Other changes, seen when testing a primitive record:
- The order of the methods were changed
- The parameter names attribute in the constructor were stripped.

I've debugged so far as the JvmtiClassFileReconstituter, this could be it.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"2021-10-07 23:09;jespersm;RedefinePrimitive.java;https://bugs.openjdk.org/secure/attachment/96679/RedefinePrimitive.java","2021-10-07 23:09;jespersm;load.txt;https://bugs.openjdk.org/secure/attachment/96680/load.txt","2021-10-07 23:09;jespersm;redefine.txt;https://bugs.openjdk.org/secure/attachment/96681/redefine.txt",,,x86,,,,,,,,,generic,,,,,"0|i2ukdn:",9223372036854775807,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,,,"2021-10-05 16:23;jespersm;I'd like to try a patch, but it's not ready yet.;;;","2021-10-07 23:14;jespersm;I've pushed a patch to https://github.com/jespersm/valhalla/tree/8274800-redefine-primitive-class but it gives heap corruption!;;;","2021-10-08 05:39;jespersm;The heap corruption is discovered on JVM shutdown, when iterating over the heap entries, stopping at a klass of some object, where it appears that the klass has been zapped by BlockTree::zap_range. This leads me to wonder if there is something wrong being freed in VM_RedefineClasses::doit() or thereabouts, but I'm not familiar with this area at all.

Funnily, the heap corruption is not seen if there's a GC before shutdown, or if the class being redefined (here RedefinePrimitive$PrimitiveTester) is not a primitive class. Could it be that the size of the klass allocated is somehow miscalculated?
;;;","2021-11-30 13:41;jespersm;By the way: I tried to single-step through what happened, and as I recall, the corrupted klass pointer matched the redefined class! I don't understand why there would be an instance of the redefined class on the heap at all?!?;;;","2021-11-30 13:44;amenkov;[~jespersm] It was caused by default_value object which was allocated during class parsing. It's fixed now;;;","2021-11-30 13:56;jespersm;[~amenkov] Was this the change in JDK-8277570, by chance?

So, in other words, I could now continue with this bug (i.e. make jvmtiClassFileReconstituter.cpp work for value classes, and fix the flag masks)?;;;","2021-12-01 10:46;amenkov;[~jespersm] I already work on the issue, there is no sense to duplicate the work;;;","2021-12-01 11:15;jespersm;[~amenkov] Sorry — no work done, I just reposted my original patch on top of the current lworld head.;;;","2021-12-01 15:09;amenkov;[~jespersm] I'd suggest to withdraw your request. It's incomplete and most likely causes other test failures.
I'll send my request as soon as complete development and testing.;;;","2022-01-12 02:00;sadayapalam;[~amenkov] The test jdk/java/lang/instrument/valhalla/RedefinePrimitive.java has started failing after the integration of https://bugs.openjdk.java.net/browse/JDK-8279368 into Valhalla. 

stdout: [>>main (Reconstituter sanity)
>>retransformClasses (MyPrimitive)
>>transform, class=MyPrimitive
<<transform, class=MyPrimitive
<<retransformClasses (MyPrimitive)
Reading test class from /home/srikanth/testruns/JTwork/classes/0/java/lang/instrument/valhalla/RedefinePrimitive.d/MyPrimitive.class
comparing class bytes for class MyPrimitive
class bytes mismatch
.class saved to MyPrimitive_redefined.class
Disassembly difference (/home/srikanth/testruns/JTwork/classes/0/java/lang/instrument/valhalla/RedefinePrimitive.d/MyPrimitive.class vs MyPrimitive_redefined.class):
[2022-01-12T08:28:31.531860804Z] Gathering output for process 3779597
[2022-01-12T08:28:32.309883227Z] Waiting for completion for process 3779597
[2022-01-12T08:28:32.310046145Z] Waiting for completion finished for process 3779597
Output and diagnostic info for process 3779597 was saved into 'pid-3779597-output.log'
[2022-01-12T08:28:32.462442533Z] Gathering output for process 3779625
[2022-01-12T08:28:33.238461110Z] Waiting for completion for process 3779625
[2022-01-12T08:28:33.238585736Z] Waiting for completion finished for process 3779625
Output and diagnostic info for process 3779625 was saved into 'pid-3779625-output.log'
< (5) final primitive value class MyPrimitive
< (8)   flags: (0x0930) ACC_FINAL, ACC_SUPER, ACC_PRIMITIVE, ACC_VALUE
> (5) final primitive class MyPrimitive
> (8)   flags: (0x0830) ACC_FINAL, ACC_SUPER, ACC_PRIMITIVE

Basically, Valhalla compiler now emits an additional flag bit ACC_VALUE along side ACC_PRIMITIVE for primitive classes.

I have raised https://bugs.openjdk.java.net/browse/JDK-8279912 for the failing test;;;",,,,,,,,,,,,,,,,
ciReplay: Potential crash due to uninitialized Compile::_ilt variable,JDK-8274785,5059822,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,chagedorn,chagedorn,chagedorn,2021-10-05 07:48,2021-10-13 17:38,2023-10-01 09:57,2021-10-08 07:52,11,17,18,8,,,,18,hotspot,,0,c2,ci-replay,hs-comp-triaged,oracle-triage-11,oracle-triage-18,,,,,,,,,,,,,,,,,"The inline tree Compile::_ilt is not initialized directly by the initializer list but only later in Compile::Compile() when calling:

 _ilt = InlineTree::build_inline_tree_root();

Before this assignment, _ilt contains garbage (i.e. != NULL). When hitting an assert or crash before returning from build_inline_tree_root(), replay compilation is trying to dump the inline tree and fails to notice that the inline tree is still uninitialized. This results in a segmentation fault (tested by adding an artificial assert(false, ""asdf"")):

# To suppress the following error report, specify this argument
# after -XX: or in .hotspotrc:  SuppressErrorAt=/compile.cpp:614
#
# A fatal error has been detected by the Java Runtime Environment:
#
#  Internal Error (/home/christian/jdk/open/src/hotspot/share/opto/compile.cpp:614), pid=68690, tid=68698
#  assert(false) failed: asdf
#
# JRE version: Java(TM) SE Runtime Environment (18.0) (slowdebug build 18-internal+0-2021-10-04-0649352.christian...)
# Java VM: Java HotSpot(TM) 64-Bit Server VM (slowdebug 18-internal+0-2021-10-04-0649352.christian..., compiled mode, compressed oops, compressed class ptrs, serial gc, linux-amd64)
# Problematic frame:
# V  [libjvm.so+0x7aca5c]  Compile::Compile(ciEnv*, ciMethod*, int, bool, bool, bool, bool, bool, DirectiveSet*)+0x81c
#
# No core dump will be written. Core dumps have been disabled. To enable core dumping, try ""ulimit -c unlimited"" before starting Java again
#
# An error report file with more information is saved as:
# /home/christian/repro/ciReplay/hs_err_pid68690.log

[error occurred during error reporting (), id 0xb, SIGSEGV (0xb) at pc=0x00007ff6cef2a748]

#
# If you would like to submit a bug report, please visit:
#   https://bugreport.java.com/bugreport/crash.jsp
#
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8028468,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2uk8z:",9223372036854775807,b19,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2021-10-05 07:49;chagedorn;ILW = Potential crash when dumping inline data on error (crash, assertion) with a debug build, never observed, no workaround = MLH = P4;;;","2021-10-08 07:52;roboduke;Changeset: 36b89a18
Author:    Christian Hagedorn <chagedorn@openjdk.org>
Date:      2021-10-08 14:51:18 +0000
URL:       https://git.openjdk.java.net/jdk/commit/36b89a18931d42b8002a843ec8218b5c1ba54374
;;;",,,,,,,,,,,,,,,,,,,,,,,,
jshell: Garbled character was displayed by System.out.println(...) on Japanese Windows,JDK-8274784,5059821,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,itakiguchi,itakiguchi,itakiguchi,2021-10-05 07:35,2021-12-01 17:45,2023-10-01 09:57,2021-11-28 16:12,18,,,,,,,18,tools,,0,,,,,,,,,,,,,,,,,,,,,,"JEP-400 was implemented by JDK18-b13.
After JDK18-b13, garbled character was displayed by following code on Japanese Windows' command prompt.

System.out.println(""\u3042"")

Japanese ""A"" should be displayed, but garbled character was displayed.
See jshell-image01.png

Also saved jshell command list did not work as expected if Japanese character was there.
See jshell-image02.png

Following issue has some information
8274544: Langtools command's usage were garbled on Japanese Windows #5771 
https://github.com/openjdk/jdk/pull/5771",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8274544,,,,,JDK-8187041,,,,,"2021-10-05 07:35;itakiguchi;jshell-image01.png;https://bugs.openjdk.org/secure/attachment/96654/jshell-image01.png","2021-10-05 07:46;itakiguchi;jshell-image02.png;https://bugs.openjdk.org/secure/attachment/96655/jshell-image02.png",,,,generic,,,,,,b13,18,,windows,,,,,"0|i2uk8r:",9223372036854775807,b26,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@ef6d34f,,,,,,,,,"2021-10-05 08:25;alanb;I assume this will go away once the tools are updated via JDK-8274544.;;;","2021-11-28 16:12;roboduke;Changeset: 8f9eb620
Author:    Ichiroh Takiguchi <itakiguchi@openjdk.org>
Date:      2021-11-29 00:11:28 +0000
URL:       https://git.openjdk.java.net/jdk/commit/8f9eb620acbc447cf9124b1fe5574a9f02115f45
;;;",,,,,,,,,,,,,,,,,,,,,,,,
Use monospace font for enclosing interface,JDK-8274781,5059817,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,hannesw,prappo,prappo,2021-10-05 06:19,2022-05-20 16:33,2023-10-01 09:57,2021-10-14 05:21,18,,,,,,,18,tools,,0,,,,,,,,,,,,,,,,,,,,,,"https://docs.oracle.com/en/java/javase/17/docs/api/java.base/java/util/stream/Collector.Characteristics.html search for ""Collector<T,A,R>""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8255413,,,,,,,,JDK-8287118,,,,,"2021-10-05 06:15;prappo;2021-10-01_23-44-50.png;https://bugs.openjdk.org/secure/attachment/96653/2021-10-01_23-44-50.png",,,,,,,,,,,,,,,,,,,"0|i2uk7v:",9223372036854775807,b20,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@7900061a,,,,,,,,,"2021-10-14 05:21;roboduke;Changeset: 8d9004b7
Author:    Hannes Wallnöfer <hannesw@openjdk.org>
Date:      2021-10-14 12:19:26 +0000
URL:       https://git.openjdk.java.net/jdk/commit/8d9004b7f4fd9b53d3f2240b382e7d71d7399125
;;;",,,,,,,,,,,,,,,,,,,,,,,,,
ChannelInputStream.readNBytes(int) incorrectly calls readAllBytes(),JDK-8274780,5059816,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,fweimer,fweimer,fweimer,2021-10-05 06:09,2021-10-13 17:38,2023-10-01 09:57,2021-10-07 00:02,18,,,,,,,18,core-libs,,0,,,,,,,,,,,,,,,,,,,,,,"JDK-8268435 contains a cut-and-paste error which calls readNBytes() from the readAllBytes() implementation:

        if (!(ch instanceof SeekableByteChannel sbc))
            return super.readAllBytes();

https://github.com/openjdk/jdk/commit/0786d8b7b367e3aa3ffa54a3e339572938378dca#diff-21e4ff89fd54955e45fcd085ae8c08033b6c92de7f98ab0c836d4f754117ececR171

Since IntputStream.readAllBytes() calls readNBytes() again, this results in a stack overflow (rather than incorrect data being returned).",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8268435,,,,,,,,,,,,,,,generic,,,,,,,18,,generic,,,,,"0|i2uk7n:",9223372036854775807,b19,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@674604a9,,,,,,,,,"2021-10-07 00:02;roboduke;Changeset: 5762ec25
Author:    Florian Weimer <fweimer@openjdk.org>
Committer: Alan Bateman <alanb@openjdk.org>
Date:      2021-10-07 07:02:01 +0000
URL:       https://git.openjdk.java.net/jdk/commit/5762ec25877ab9207a2fb05888f952690737e318
;;;",,,,,,,,,,,,,,,,,,,,,,,,,
HttpURLConnection: HttpClient and HttpsClient incorrectly check request method when set to POST,JDK-8274779,5059815,Bug,Closed,JDK,JDK,software,duke,,,P3,Fixed,ewhelan,shadowbug,shadowbug,2021-10-05 05:58,2022-04-08 03:44,2023-10-01 09:57,2021-10-21 06:34,18,8u301,,,,,,18,core-libs,,0,8bpr-critical-approved,bugdb_33374421,jdk11u-fix-request,jdk11u-fix-yes,jdk13u-fix-request,jdk13u-fix-yes,jdk15u-fix-request,jdk15u-fix-yes,jdk17u-fix-request,jdk17u-fix-SQE-ok,jdk17u-fix-yes,jdk8u-fix-request,jdk8u-fix-yes,,,,,,,,,"URLConnection pools HttpClient / HttpsClient to serve connections to the same server.  When picking up the HttpClient/HttpsClient from the pool, the check is performed whether the connection is still usable.  However, this logic is broken for POST requests.

https://github.com/openjdk/jdk/blob/722d639fad2e4fc6eb2aabd427e2719501899cfe/src/java.base/share/classes/sun/net/www/http/HttpClient.java#L310

- this line checks for literal value of ""POST"", whereas it should check for equality. 
As a consequence, the check is performed as intended only if the request method is set using a literal string ""POST"".  The check is not performed, if the request method is set to ""POST"", but the string is constructed - e.g.  read from a property or extracted from configuration.
A similar issue exists in HttpsClient.

Expected behaviour: 
The connection liveness check behaviour should be identical, irrespective of how the request method is set.

Proof: 
A patch for application-side code checking whether the request method is equal to ""POST"", and setting the requestMethod to a literal ""POST"", solves the issue on the application side.
",,,,,,,,,,,JDK-8276900,JDK-8279112,JDK-8276762,JDK-8276069,JDK-8275922,JDK-8276097,JDK-8276092,JDK-8275961,JDK-8276089,,,,,,,,,,,,,,,,,,,,,JDK-8276697,,,,,,,,,,,,,,,,,,,,,,,,"0|i2uk7f:",9223372036854775807,b21,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@446e124a,,,,,,,Verified,,"2021-10-21 06:34;roboduke;Changeset: 45ce06c9
Author:    Evan Whelan <ewhelan@openjdk.org>
Committer: Sean Coffey <coffeys@openjdk.org>
Date:      2021-10-21 13:33:21 +0000
URL:       https://git.openjdk.java.net/jdk/commit/45ce06c9f3e9bee7d4bda313c38f0f0e8786a4db
;;;","2021-10-26 01:53;ewhelan;Fix Request (17u):

This patch applies cleanly and would be nice to get into 17u before the close of RDP2. 
Risk of regression: Very low
No related test failures;;;","2021-10-27 00:20;goetz;Fix request [11u]

I backport this for parity with 11.0.14-oracle.
Low risk, very limited fix.
Clean backport.
Test passes.  Nighttests pass.;;;","2021-10-28 00:51;yan;Fix request (15u):

this useful fix should be ported here, too. Clean. All relevant tests pass.;;;","2021-10-28 01:11;yan;Fix request (13u):

here, too, the patch applied cleanly, tests pass.;;;","2021-11-02 10:45;zgu;8u code review: https://mail.openjdk.java.net/pipermail/jdk8u-dev/2021-November/014392.html
;;;","2021-11-02 12:23;zgu;Fix Request (8u)

Parity backport with Oracle 8u331.

Backport is not clean, 8u change has been reviewed by @phh



;;;","2022-04-08 03:44;sqetools;verified;;;",,,,,,,,,,,,,,,,,,
[TESTBUG] UnsafeIntrinsicsTest intermittently fails on weak memory model platform,JDK-8274773,5059808,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,mdoerr,mdoerr,mdoerr,2021-10-05 03:55,2023-01-03 23:19,2023-10-01 09:57,2021-10-11 03:32,11,17,18,,,,,18,hotspot,,0,jdk11u-fix-request,jdk11u-fix-yes,jdk17u-fix-request,jdk17u-fix-yes,testbug,ursqe-triaged,,,,,,,,,,,,,,,,"We observed test failures with NullPointerException when running the test with experimental ZGC on PPC64:
java.lang.NullPointerException: Cannot invoke ""compiler.gcbarriers.Node.next()"" because ""this.current"" is null
	at compiler.gcbarriers.Runner.run(UnsafeIntrinsicsTest.java:226)

It failed while ""Testing Load with 4 thread and 133700 nodes"".

During ""testWithSharedData"", ""mergeImplLoad"" calls ""setNext"" to install newly created Nodes without any memory barrier. Note that the field ""Node.next"" is not volatile. The JMM does not require concurrent readers to observe any field updates which were done before inserting the new Nodes. So, it's legal that the concurrent reader sees ""Node.next == null"".",,,,,,,,,,,JDK-8277841,JDK-8275394,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8274851,,,,,,,,,,aarch64,ppc,,,,,,,,,,,,,"0|i2uk5v:",9223372036854775807,b19,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6b00f96c,,,,,,,,,"2021-10-11 03:32;roboduke;Changeset: 49f8ce6e
Author:    Martin Doerr <mdoerr@openjdk.org>
Date:      2021-10-11 10:31:54 +0000
URL:       https://git.openjdk.java.net/jdk/commit/49f8ce6e9c797cd11ea586e3cf87398888bc8cf1
;;;","2021-10-15 05:40;mdoerr;Fix Request (17u):
Test failures can be observed with ZGC on PPC64. So, this simple test fix should get backported before backporting new GCs on PPC64. In addition, failures were observed during development of generational ZGC on aarch64. Fix applies cleanly.;;;","2021-11-23 13:21;mdoerr;Fix Request (11u):
ZGC and ShenandoahGC on aarch64 are affected in 11u. Backport needed manual integration due to unrelated context changes, but Skara recognizes it as clean backport: https://github.com/openjdk/jdk11u-dev/pull/650;;;",,,,,,,,,,,,,,,,,,,,,,,
[PPC64] resolve_jobject needs a generic implementation to support load barriers,JDK-8274770,5059803,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,mdoerr,mdoerr,mdoerr,2021-10-05 03:22,2021-10-18 12:55,2023-10-01 09:57,2021-10-12 05:20,17,18,,,,,,18,hotspot,,0,jdk17u-fix-request,jdk17u-fix-yes,,,,,,,,,,,,,,,,,,,,BarrierSetAssembler::resolve_jobject is not compatible with new GCs which use load barriers. The standard implementation should be generic.,,,,,,,,,,,JDK-8275397,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8274851,,,,,,,,,,ppc,,,,,,,,,,,,,,"0|i2uk4r:",9223372036854775807,b19,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6b00f96c,,,,,,,,,"2021-10-12 05:20;roboduke;Changeset: e16b93ad
Author:    Martin Doerr <mdoerr@openjdk.org>
Date:      2021-10-12 12:18:49 +0000
URL:       https://git.openjdk.java.net/jdk/commit/e16b93ad52c96fddd9097c2cb0fa78ae781c547b
;;;","2021-10-15 05:46;mdoerr;Fix Request (17u):
Prerequisite for backport of ZGC or ShenandoahGC on PPC64. Current implementation of resolve_jobject misses load barriers which are required for these GCs. Only touches PPC64 code. Applies cleanly.;;;",,,,,,,,,,,,,,,,,,,,,,,,
ZGC: SEGV in MetaspaceShared::link_shared_classes,JDK-8274753,5059784,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,coleenp,dholmes,dholmes,2021-10-04 21:00,2022-01-27 05:36,2023-10-01 09:57,2021-10-11 05:11,18,,,,,,,18,hotspot,,0,cds,intermittent,jdk17u-fix-request,jdk17u-fix-yes,tier6,zgc,,,,,,,,,,,,,,,,"Test: runtime/cds/appcds/javaldr/GCDuringDump.java

#
# A fatal error has been detected by the Java Runtime Environment:
#
#  SIGSEGV (0xb) at pc=0x0000000109c92fd8, pid=49600, tid=6147
#
# JRE version: Java(TM) SE Runtime Environment (18.0+18) (fastdebug build 18-ea+18-1045)
# Java VM: Java HotSpot(TM) 64-Bit Server VM (fastdebug 18-ea+18-1045, interpreted mode, tiered, compressed class ptrs, z gc, bsd-aarch64)
# Problematic frame:
# V  [libjvm.dylib+0xc92fd8]  MetaspaceShared::link_shared_classes(JavaThread*)+0x1a4

---------------  T H R E A D  ---------------

Current thread (0x0000000113008a20):  JavaThread ""main"" [_thread_in_vm, id=6147, stack(0x000000016b688000,0x000000016b88b000)]

Stack: [0x000000016b688000,0x000000016b88b000],  sp=0x000000016b88a930,  free space=2058k
Native frames: (J=compiled Java code, j=interpreted, Vv=VM code, C=native code)
V  [libjvm.dylib+0xc92fd8]  MetaspaceShared::link_shared_classes(JavaThread*)+0x1a4
V  [libjvm.dylib+0xc93630]  MetaspaceShared::preload_and_dump_impl(JavaThread*)+0x9c
V  [libjvm.dylib+0xc931d4]  MetaspaceShared::preload_and_dump()+0x50
V  [libjvm.dylib+0xf7bd44]  Threads::create_vm(JavaVMInitArgs*, bool*)+0xc08
V  [libjvm.dylib+0x9062f4]  JNI_CreateJavaVM+0xa8
C  [libjli.dylib+0x49a4]  JavaMain+0x104
C  [libjli.dylib+0x7570]  ThreadJavaMain+0xc
C  [libsystem_pthread.dylib+0x706c]  _pthread_start+0x140


siginfo: si_signo: 11 (SIGSEGV), si_code: 2 (SEGV_ACCERR), si_addr: 0xbababababababac6

Looks very similar to the crash in JDK-8273505",,,,,,,,,,,JDK-8276224,JDK-8280802,,,,,,,,,,,,,,,,,,,,,,,JDK-8277998,JDK-8273505,JDK-8274338,,,JDK-8274935,,,,,,,,,,aarch64,,,,,,,,,os_x,,,,,"0|i2uk0j:",9223372036854775807,b19,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,,,"2021-10-05 11:07;mseledtsov;ILW = HLM = P3;;;","2021-10-05 13:14;coleenp;Both this and JDK-8274338  use the Handles to keep CLD->phantom_holder() alive so that GC won't unload these classes, but it still unloads the class.  I don't see an intervening HandleMark in either of these cases.  This only happens for ZGC, so I'm going to reassign to gc to have a look.;;;","2021-10-06 01:19;stefank;I know what the problem is. It's a misuse of Handles.

Look at the following code:
```
void MetaspaceShared::link_shared_classes(TRAPS) {
  LambdaFormInvokers::regenerate_holder_classes(CHECK);

  // Collect all loaded ClassLoaderData.
  CollectCLDClosure collect_cld(THREAD);
  {
    // ClassLoaderDataGraph::loaded_cld_do requires ClassLoaderDataGraph_lock.
    // We cannot link the classes while holding this lock (or else we may run into deadlock).
    // Therefore, we need to first collect all the CLDs, and then link their classes after
    // releasing the lock.
    MutexLocker lock(ClassLoaderDataGraph_lock);
    ClassLoaderDataGraph::loaded_cld_do(&collect_cld);
  }

... <code assuming that the klass holders will be held alive + safepoints>
```


CollectCLDClosure visits all CLDs and creates a Handle for each holder object. These handles will be registered in the handle area _AND_ they are copied into an array of Handles. The last part is done to ensure that the holder objects are kept alive:
  GrowableArray<Handle> _loaded_cld_handles; // keep the CLDs alive
...
  void do_cld(ClassLoaderData* cld) {
    if (!cld->is_unloading()) {
      _loaded_cld.append(cld);
      _loaded_cld_handles.append(Handle(_current_thread, cld->holder_phantom()));
    }
  }

However, this array doesn't help at all. The GC is not aware of the existence of this array. It is only handles in the handle area that the GC will find. And that's the problem.

The code in ClassLoaderDataGraph::loaded_cld_do sets up a handle mark inside ClassLoaderDataGraphIterator. All holder objects gets registered in the handle area by the do_cld call above, then when we're done with the iterator, the handle mark is destructed, and all the added handles are invalidated (the GC will not find them). So, now we don't have anything that keeps the holder objects alive. Remember that the _loaded_cld_handles array isn't visted by the GC. In fact, that array now contains pointer into stale memory that could / will be reused by new Handles.

I think the fix for this is to register OopHandles instead. 

;;;","2021-10-06 05:11;coleenp;If GC doesn't know about this Handle array, how does GC know about local variable Handles?
Handles are pointers to the oop, which should be fixed by GC in Thread::handle_area, so the pointers should remain good.;;;","2021-10-06 06:05;stefank;I haven't been able to reproduce this bug with the test in the Bug. However, I can reproduce it with the test in JDK-8273505, which is the Bug that introduced the Handles array:
make -C ../build/fastdebug/ test TEST=""runtime/cds/appcds/loaderConstraints/DynamicLoaderConstraintsTest.java#default-cl""  JTREG=""JAVA_OPTIONS=-XX:+UseZGC -XX:ZCollectionInterval=0.01""

Converting the array from using Handles to OopHandles seems to fix the problem.

Unfortunately, that reproducer also crashes in another path:
V  [libjvm.so+0x76871e]  ClassLoaderData::keep_alive() const+0xc
V  [libjvm.so+0x766f0e]  ClassLoaderData::is_alive() const+0x18
V  [libjvm.so+0x713ffc]  Klass::is_loader_alive() const+0x20
V  [libjvm.so+0x11624b6]  IterateDumpTimeSharedClassTable::do_entry(InstanceKlass*, DumpTimeClassInfo&)+0x32
V  [libjvm.so+0x1163bfa]  void ResourceHashtableBase<FixedResourceHashtableStorage<15889u, InstanceKlass*, DumpTimeClassInfo>, InstanceKlass*, DumpTimeClassInfo, (ResourceObj::allocation_type)2, (MEMFLAGS)13, &(DumpTimeSharedClassTable_hash(InstanceKlass* const&)), &(bool primitive_equals<InstanceKlass*>(InstanceKlass* const&, InstanceKlass* const&))>::iterate<IterateDumpTimeSharedClassTable>(IterateDumpTimeSharedClassTable*) const+0x7c
V  [libjvm.so+0x115e714]  SystemDictionaryShared::dumptime_classes_do(MetaspaceClosure*)+0x4a
V  [libjvm.so+0x8e4798]  DynamicArchiveBuilder::iterate_roots(MetaspaceClosure*, bool)+0x32
V  [libjvm.so+0x4f36af]  ArchiveBuilder::gather_klasses_and_symbols()+0x83
V  [libjvm.so+0x4f431d]  ArchiveBuilder::gather_source_objs()+0x4f
V  [libjvm.so+0x8e449d]  DynamicArchiveBuilder::doit()+0x71
V  [libjvm.so+0x8e4937]  VM_PopulateDynamicDumpSharedSpace::doit()+0x7f

When crashing, we have the following address in the register:
 0x0000000800c01a0

which sort-of matches one of the unloaded classes:
Classes unloaded (2 events):
Event: 0.649 Thread 0x00007f1d2c06de80 Unloading class 0x0000000800c01a00 'MyHttpHandler'
Event: 0.649 Thread 0x00007f1d2c06de80 Unloading class 0x0000000800c01800 'LoaderConstraintsApp'

I think we need a new Bug for this crash.;;;","2021-10-06 08:33;coleenp;It's more like Low frequency, and workaround is to not use CDS, which is medium.  This isn't a P1 at any rate.;;;","2021-10-06 08:53;iklam;The problem is as [~stefank] described. The HandleMark wipes out the contents of the handles stored in _loaded_cld_handles. This can be observed by setting a memory breakpoint on the contents of the Handle:

class CollectCLDClosure : public CLDClosure {
  void do_cld(ClassLoaderData* cld) {
    if (!cld->is_unloading()) {
      _loaded_cld.append(cld);
      _loaded_cld_handles.append(Handle(_current_thread, cld->holder_phantom())); <<<<
    }

is executed inside a HandleMark, so the Handles will be deleted, so we can't keep the loaders alive.

 0 __memset_sse2  << memory break point hit
 1 HandleMark::~HandleMark
 2 ClassLoaderDataGraphIterator::~ClassLoaderDataGraphIterator
 3 ClassLoaderDataGraph::loaded_cld_do
 4 MetaspaceShared::link_shared_classes
 5 MetaspaceShared::preload_and_dump_impl
 6 MetaspaceShared::preload_and_dump

================

The problem can also be verified with this patch

I can verify the problem with this patch:

===============
diff --git a/src/hotspot/share/cds/metaspaceShared.cpp b/src/hotspot/share/cds/metaspaceShared.cpp
index a884cbd0c00..67c59f77118 100644
--- a/src/hotspot/share/cds/metaspaceShared.cpp
+++ b/src/hotspot/share/cds/metaspaceShared.cpp
@@ -588,11 +588,16 @@ class CollectCLDClosure : public CLDClosure {
   Thread* _current_thread;
 public:
   CollectCLDClosure(Thread* thread) : _current_thread(thread) {}
-  ~CollectCLDClosure() {
+  void validate() {
     for (int i = 0; i < _loaded_cld.length(); i++) {
       ClassLoaderData* cld = _loaded_cld.at(i);
+      assert(!cld->is_unloading(), ""must be still alive"");
+      assert(_loaded_cld_handles.at(i)() == cld->holder_phantom(), ""must still be the same"");
     }
   }
+  ~CollectCLDClosure() {
+    validate();
+  }
   void do_cld(ClassLoaderData* cld) {
     if (!cld->is_unloading()) {
       _loaded_cld.append(cld);
@@ -655,6 +660,8 @@ void MetaspaceShared::link_shared_classes(TRAPS) {
     ClassLoaderDataGraph::loaded_cld_do(&collect_cld);
   }

+  collect_cld.validate();
+
   while (true) {
     bool has_linked = false;
     for (int i = 0; i < collect_cld.nof_cld(); i++) {
=============== 

Instead, _loaded_cld_handles.at(i)() returns NULL.

As [~stefank]  suggested, The fix would be change the array to GrowableArray<OopHandle>, to avoid getting wiped out by the HandleMark.
;;;","2021-10-06 17:05;coleenp;Yes, I think the smallest fix to backport to JDK 17 would be to use OopHandles.;;;","2021-10-07 14:21;coleenp;The ZGC crash that Stefan found is that there's this class in the dumptime_table, which is not loaded:

adding com/sun/net/httpserver/HttpExchange to the table 0x0000000800c01c20

The ZGC parameters cause class unloading but this class isn't cleaned up because it's not also in ClassLoaderData::_klasses array.

;;;","2021-10-11 05:11;roboduke;Changeset: 110e38de
Author:    Coleen Phillimore <coleenp@openjdk.org>
Date:      2021-10-11 12:11:11 +0000
URL:       https://git.openjdk.java.net/jdk/commit/110e38ded8e09361f24c582c770d35f5cfdabf82
;;;","2021-12-20 05:12;goetz;Fix request [17u]

I backport this for parity with 17.0.3-oracle.
Clean backport.;;;","2021-12-20 05:17;roboduke;A pull request was submitted for review.

URL: https://git.openjdk.java.net/jdk17u-dev/pull/10
Date: 2021-12-20 13:11:41 +0000
;;;","2022-01-25 01:25;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk17u-dev/pull/118
Date: 2022-01-25 09:20:30 +0000;;;","2022-01-25 22:02;stuefe;Fix Request (17u): (second attempt, Goetz' didn't work).

Fix needed a small adaptation to work correctly in jdk17. See PR for details: https://github.com/openjdk/jdk17u-dev/pull/118 (needs reviews, hint hint).

We want to fix this to prevent the JVM from crashing when running with Zgc. The risk should be pretty low. The patch has been tested for two weeks in SAPs nightlies.;;;",,,,,,,,,,,,
Drag And Drop hangs on Windows,JDK-8274751,5059408,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,dmarkov,webbuggrp,webbuggrp,2021-09-28 05:50,2022-04-29 11:11,2023-10-01 09:57,2022-01-24 02:56,11.0.12,16,17,8u301,,,,19,client-libs,,0,cssn21_10_01,cssn22_01_02,dcspks,dcspn,jdk11u-fix-request,jdk11u-fix-yes,jdk15u-fix-request,jdk15u-fix-yes,jdk17u-fix-request,jdk17u-fix-yes,jdk18u-fix-request,jdk18u-fix-SQE-OK,jdk18u-fix-yes,jdk8u-fix-request,jdk8u-fix-yes,noreg-hard,regression,regression_8262446,reproducer-yes,sustaining,webbug,"ADDITIONAL SYSTEM INFORMATION :
Windows 10 x64

A DESCRIPTION OF THE PROBLEM :
The drag and drop operation from Java application to Windows explorer hangs the application.
This worked before JDK 8u301 and JDK 11.0.12. It seems like this issue is caused by https://bugs.openjdk.java.net/browse/JDK-8262446



STEPS TO FOLLOW TO REPRODUCE THE PROBLEM :
1. Start the attached application
2. Drag a file from the attached application
3. Drop it in a Windows explorer

EXPECTED VERSUS ACTUAL BEHAVIOR :
EXPECTED -
The dragged file should appear in the Windows explorer
ACTUAL -
The dragged file does not show up in the drop area and the client is locked.

---------- BEGIN SOURCE ----------
package com.test.testing;

import java.awt.AWTEvent;
import java.awt.EventQueue;
import java.awt.Toolkit;
import java.awt.datatransfer.DataFlavor;
import java.awt.datatransfer.Transferable;
import java.awt.datatransfer.UnsupportedFlavorException;
import java.io.File;
import java.io.IOException;
import java.lang.reflect.Method;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.concurrent.ExecutionException;
import java.util.concurrent.Future;
import java.util.concurrent.Semaphore;
import java.util.concurrent.atomic.AtomicReference;
import java.util.stream.Collectors;

import javax.swing.JComponent;
import javax.swing.JDialog;
import javax.swing.JFrame;
import javax.swing.JScrollPane;
import javax.swing.JTextField;
import javax.swing.JTree;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;
import javax.swing.TransferHandler;
import javax.swing.tree.DefaultMutableTreeNode;
import javax.swing.tree.DefaultTreeModel;
import javax.swing.tree.TreePath;

public class App implements Runnable {

	// Set this to true to reproduce the problem
	private static final boolean ENABLE_PROBLEM = true;

	private DefaultMutableTreeNode root;
	private DefaultTreeModel treeModel;
	private JTree tree;

	@Override
	public void run() {
		JFrame frame = new JFrame(""File Browser"");
		frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);

		File fileRoot = File.listRoots()[0];
		root = new DefaultMutableTreeNode(new FileNode(fileRoot));
		treeModel = new DefaultTreeModel(root);

		tree = new JTree(treeModel);
		tree.setShowsRootHandles(true);
		tree.setDragEnabled(true);
		tree.setTransferHandler(new FileTransferHandler());

		JScrollPane scrollPane = new JScrollPane(tree);

		frame.add(scrollPane);
		frame.setLocationByPlatform(true);
		frame.setSize(640, 480);
		frame.setVisible(true);

		CreateChildNodes ccn = new CreateChildNodes(fileRoot, root);
		new Thread(ccn).start();
	}

	public class CreateChildNodes implements Runnable {

		private DefaultMutableTreeNode root;
		private File fileRoot;

		public CreateChildNodes(File fileRoot, DefaultMutableTreeNode root) {
			this.fileRoot = fileRoot;
			this.root = root;
		}

		@Override
		public void run() {
			createChildren(fileRoot, root);
		}

		private void createChildren(File fileRoot, DefaultMutableTreeNode node) {
			File[] files = fileRoot.listFiles();
			if (files == null)
				return;

			for (File file : files) {
				DefaultMutableTreeNode childNode = new DefaultMutableTreeNode(new FileNode(file));
				node.add(childNode);
				if (file.isDirectory()) {
					createChildren(file, childNode);
				}
			}
		}
	}

	public class FileNode {

		private File file;

		public FileNode(File file) {
			this.file = file;
		}

		@Override
		public String toString() {
			String name = file.getName();
			if (name.equals("""")) {
				return file.getAbsolutePath();
			} else {
				return name;
			}
		}
	}

	private class FileTransferHandler extends TransferHandler {

		private static final long serialVersionUID = 1L;

		@Override
		protected Transferable createTransferable(JComponent c) {
			JTree list = (JTree) c;
			List<File> files = new ArrayList<File>();
			for (TreePath path : list.getSelectionPaths()) {
				files.add(new File(Arrays.stream(path.getPath()).map(Object::toString)
						.collect(Collectors.joining(File.separator))));
			}
			return new FileTransferable(files);
		}

		@Override
		public int getSourceActions(JComponent c) {
			return COPY;
		}
	}

	private class FileTransferable implements Transferable {

		// Just a list of files that should be ""downloaded""
		private List<File> files;

		private AtomicReference<List<File>> mDownloadedFiles = new AtomicReference<List<File>>();
		private boolean mHasFetchedFiles;

		public FileTransferable(List<File> files) {
			this.files = files;
		}

		public DataFlavor[] getTransferDataFlavors() {
			return new DataFlavor[] { DataFlavor.javaFileListFlavor };
		}

		public boolean isDataFlavorSupported(DataFlavor flavor) {
			return flavor.equals(DataFlavor.javaFileListFlavor);
		}

		public Object getTransferData(DataFlavor flavor) throws UnsupportedFlavorException, IOException {
			if (!isDataFlavorSupported(flavor)) {
				throw new UnsupportedFlavorException(flavor);
			}

			List<File> data = mDownloadedFiles.get();
			if (data == null) {
				data = fetchFileData();
				if (data == null) {
					System.out.println(""Unsupported operation!"");
					throw new UnsupportedFlavorException(flavor);
				}
			}
			return data;
		}

		private synchronized List<File> fetchFileData() {
			if (!mHasFetchedFiles) {
				mHasFetchedFiles = true;
				try {
					DownloadableWorker downloadable = new DownloadableWorker(files);
					// Start the download in background
					downloadable.execute();

					// Wait for the download to complete
					mDownloadedFiles.set(new EventDispatchThreadUtil().futureGet(downloadable));
				} catch (Exception e) {
					throw new RuntimeException(e);
				}
			}
			return mDownloadedFiles.get();
		}
	}

	private static class DownloadableWorker extends SwingWorker<List<File>, Object> {
		private List<File> files;

		public DownloadableWorker(List<File> files) {
			this.files = files;

			// Adding this will alter the events so we will block the application for ever
			// when dropping file into a windows folder
			if (ENABLE_PROBLEM)
			{
				MyProgressDialog myProgressDialog = new MyProgressDialog();
				myProgressDialog.setVisible(true);
			}
		}

		@Override
		protected List<File> doInBackground() throws Exception {
			// We have a list of files that needs to be downloaded, simulated here with a
			// thread sleep
			try {
				System.out.println(""-- Starting download"");
				Thread.sleep(2000);
				System.out.println(""-- Files downloaded"");
			} catch (InterruptedException e) {
				e.printStackTrace();
			}
			return files;
		}
	}

	private static class MyProgressDialog extends JDialog {
		private static final long serialVersionUID = 1L;

		public MyProgressDialog() {
			JTextField textField = new JTextField(""Some progress..."");
			getContentPane().add(textField);
		}
	}

	private static class EventDispatchThreadUtil
	{
	    private static final Runnable NOOP_RUNNABLE = new Runnable()
	    {
	        @Override
	        public void run()
	        {
	            // Do nothing
	        }
	    };
	    private static final Method DISPATCH_EVENT_METHOD;
	    static
	    {
	        Method m = null;
	        try
	        {
	            m = EventQueue.class.getDeclaredMethod(""dispatchEvent"", AWTEvent.class);
	            m.setAccessible(true);
	        }
	        catch (Exception e)
	        {
	            throw new RuntimeException(e);
	        }
	        DISPATCH_EVENT_METHOD = m;
	    }

	    /**
	     * Gets one event from the event queue and then dispatches it. If the
	     * event queue is empty then the call will block until an event is
	     * available. This method must be called by the event dispatch thread.
	     */
	    public void pumpOneEvent() throws InterruptedException
	    {
	        if (!SwingUtilities.isEventDispatchThread())
	        {
	            String msg = ""Must be called from the event dispatch thread."";
	            throw new IllegalStateException(msg);
	        }
	        EventQueue eventQueue = Toolkit.getDefaultToolkit().getSystemEventQueue();
	        // blocks when the event queue is empty.
	        AWTEvent event = eventQueue.getNextEvent();
	        try
	        {
	            DISPATCH_EVENT_METHOD.invoke(eventQueue, event);
	        }
	        catch (Exception e)
	        {
	            throw new RuntimeException(e);
	        }
	    }

	    /**
	     * If a call to this method is made from the event dispatch thread then it
	     * will simulate a blocking call to Future#get() by creating a helper thread
	     * that blocks on the get call. While the call is being performed the event
	     * queue is pumped by the thread calling this method. When the call is done
	     * the helper thread notifies this thread which then returns. If the call is
	     * made by another thread then the get-method of the given future will be
	     * called directly.
	     * @param <T> the generic type of the future
	     * @param future the future to get the result from
	     * @return the result of the future
	     */
	    public <T> T futureGet(final Future<T> future)
	        throws InterruptedException, ExecutionException
	    {
	        if (!EventQueue.isDispatchThread())
	        {
	            return future.get();
	        }

	        final Semaphore semaphore = new Semaphore(1);
	        semaphore.acquire();

	        // start a helper thread that will block for us
	        Thread t = new Thread(new Runnable()
	        {
	            @Override
	            public void run()
	            {
	                try
	                {
	                    future.get();
	                }
	                catch (Exception e)
	                {
	                	e.printStackTrace();
	                }
	                finally
	                {
	                    release(semaphore);
	                }
	            }
	        });
	        t.start();

	        acquire(semaphore);

	        // our helper thread finished successfully
	        T result = future.get();

	        return result;
	    }

	    /**
	     * Will block in the call until a permit is acquired from the semaphore.
	     * May be called from any thread. If called from the event dispatch thread
	     * then we will as long as we fail to tryAcquire a permit, pump one event on
	     * the event dispatch thread and the repeat the process until a permit
	     * has been acquired. However, when we pump the event dispatch queue, if
	     * there is no events on the queue then we will block on the queue until
	     * an event arrives. This method should be used together with
	     * {@link #release(Semaphore)} that additionally to releasing a permit also
	     * posts a noop event on the event dispatch queue and by that wakes us up
	     * if we're blocking.
	     * @param semaphore the semaphore to acquire a permit from
	     * @throws InterruptedException if the blocking thread is interrupted
	     */
	    public void acquire(Semaphore semaphore) throws InterruptedException
	    {
	        if (!EventQueue.isDispatchThread())
	        {
	            semaphore.acquire();
	            return;
	        }

	        // pump the event queue until the thread exits controlled
	        while (!semaphore.tryAcquire())
	        {
	            pumpOneEvent();
	        }
	    }

	    /**
	     * Releases one permit on the given semaphore and pokes the event dispatch
	     * thread. May be called from any thread. Will also post a noop event to
	     * the event dispatch queue. Should be used together with
	     * {@link #acquire(Semaphore)}.
	     * @param semaphore
	     */
	    public void release(Semaphore semaphore)
	    {
	        semaphore.release();
	        // unblock the event dispatch thread by dispatching
	        // a noop runnable on the event dispatch thread
	        EventQueue.invokeLater(NOOP_RUNNABLE);
	    }
	}

	public static void main(String[] args) {
		SwingUtilities.invokeLater(new App());
	}
}
---------- END SOURCE ----------

FREQUENCY : always


",,,,,,,,,,,JDK-8284049,JDK-8283902,JDK-8280955,JDK-8280883,JDK-8283295,JDK-8281980,JDK-8283734,JDK-8280787,JDK-8280874,,,,,,,,,,,,,,,,,,,,,JDK-8262446,,,,,"2021-10-04 17:17;pardesha;App.java;https://bugs.openjdk.org/secure/attachment/96645/App.java",,,,,x86_64,,,,,,b01,8u301,,windows_10,,,,,"0|i2uhoz:",9223372036854775807,b07,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@5a9b3fd3,,,,,,,,,"2021-10-04 17:17;pardesha;Reported with JDK 8u301, The drag and drop operation from Java application to Windows explorer hangs the application.
Checked this with reported version and could confirm the issue.
To verify, run the attached test case with respective JDK versions. Drag a file on the Droppable Desktop Pane.

Result:
========
JDK 11.0.11 - OK
JDK 11.0.12 - Fail
JDK 8u301 - Fail
JDK 8u291 - OK
JDK 17 - Fails with Exception in thread ""AWT-EventQueue-0"" java.lang.ExceptionInInitializerError
JDK 18 ea b17: Fails with exception..
JDK 16.0.2 - Fails with Exception in thread ""AWT-EventQueue-0"" java.lang.ExceptionInInitializerError
JDK 16.0.1 - Fails with exception

To verify, run the attached test case with respective JDK versions. This seems a regression introduced with JDK-8262446 fix.;;;","2021-12-11 04:06;dmarkov;According to the test results the hang takes on JDK 11.0.12 and 8u301; on other JDK branches 16/17/18 it fails with ExceptiionInInitializer Error (which might indicate some problems in the test).
Based on this I am lowering the priority to 3 and re-targeting the bug to 19. ;;;","2022-01-17 05:25;dmarkov;I can reproduce the issue. It is necessary to use ""--add-opens"" option in the command line to avoid the exception, (i.e. java --add-opens java.desktop/java.awt=ALL-UNNAMED App).;;;","2022-01-17 05:45;dmarkov;When an object is moved from one window (DnD source) to another window (DnD target) the first window may also be considered as a DnD target and the native OS sends corresponding events to it. That event processing clears isInDoDragDropLoop flag, which is currently used to indicate DnD operation, and causes a hang.
It is necessary to distinguish events related to the DnD source and events related to the DnD target, (i.e. use two indication flags).;;;","2022-01-18 04:57;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/7125
Date: 2022-01-18 12:51:56 +0000;;;","2022-01-24 02:55;roboduke;Changeset: 7a0a6c95
Author:    Dmitry Markov <dmarkov@openjdk.org>
Date:      2022-01-24 10:55:13 +0000
URL:       https://git.openjdk.java.net/jdk/commit/7a0a6c95a53c6cb3340328d6543a97807320b740
;;;","2022-01-24 04:09;dmarkov;Fix Request (18u) 

- Justification: The changes fix the regression introduced by JDK-8262446
- Risk Analysis: Low, trivial changes in native part of DnD feature
- Testing: The fix may be verified using the test attached to the bug (see steps to reproduce above) 

The patch from jdk-dev (19) applies cleanly to 18u.;;;","2022-01-24 05:40;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk18u/pull/7
Date: 2022-01-24 13:34:52 +0000;;;","2022-01-31 12:23;serb;Working on backporting this fix to the OpenJDK 17, 11, and 8.;;;","2022-02-02 13:17;serb;Fix Request (17u)

- Parity with 17.0.4-oracle
- Justification: The changes fix the regression introduced by JDK-8262446
- Risk Analysis: Low, trivial changes in the native part of the DnD feature
- Testing: The fix verified by the test from the description, the jdk_desktop tests are green

The patch from jdk-dev (19) applies cleanly to 17u. ;;;","2022-02-02 13:18;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk17u-dev/pull/142
Date: 2022-02-02 04:42:55 +0000;;;","2022-02-08 00:11;goetz;[~serb], this fix is very new. The problem though is in 17 since first release.
I would prefer to wait with this for 17.0.4.  Is there any reason to bring this 
to 17.0.3?;;;","2022-02-08 19:06;serb;17.0.4 is fine, I can wait the March 2 to integrate.;;;","2022-02-10 10:13;goetz;Thanks. Please add the fix-request tag again after that point and I'll approve it right away.;;;","2022-03-23 19:28;serb;Fix Request (11u)

- Parity with 11.0.16-oracle
- Justification: The changes fix the regression introduced by JDK-8262446
- Risk Analysis: Low, trivial changes in the native part of the DnD feature
- Testing: The fix verified by the test from the description, the jdk_desktop tests are green

The patch from jdk-dev (19) applies cleanly to 11u (the one conflict is in the copyright date).;;;","2022-03-23 20:45;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk11u-dev/pull/942
Date: 2022-03-24 01:25:56 +0000;;;","2022-03-27 23:31;serb;Fix Request (8u)

- Parity with 8u341
- Justification: The changes fix the regression introduced by JDK-8262446
- Risk Analysis: Low, trivial changes in the native part of the DnD feature
- Testing: The fix verified by the test from the description, the jdk_desktop tests are green

The patch from jdk-dev (19) applies cleanly to 8u (the one conflict is in the copyright date). ;;;","2022-03-27 23:33;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk8u-dev/pull/23
Date: 2022-03-28 05:01:41 +0000;;;","2022-03-29 23:56;serb;Fix Request (15u)

- Justification: The changes fix the regression introduced by JDK-8262446
- Risk Analysis: Low, trivial changes in the native part of the DnD feature
- Testing: The fix verified by the test from the description, the jdk_desktop tests are green

The patch from jdk-dev (19) applies cleanly to 15u;;;","2022-03-30 00:00;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk15u-dev/pull/188
Date: 2022-03-30 02:32:26 +0000;;;",,,,,,
java/io/File/GetXSpace.java failed: '/dev': 191488 != 190976,JDK-8274750,5059782,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,bpb,dholmes,dholmes,2021-10-04 17:00,2023-03-17 04:34,2023-10-01 09:57,2021-10-29 09:15,18,,,,,,,18,core-libs,,0,7-wnf,investigate-UT,jdk11u-todo,jdk17u-fix-request,jdk17u-fix-yes,noreg-self,tier7,,,,,,,,,,,,,,,"----------System.err:(20/1536)----------
WARNING: A terminally deprecated method in java.lang.System has been called
WARNING: System::setSecurityManager has been called by GetXSpace (file:/Volumes/Mesos/mesos/work_dir/slaves/a2dc162d-743b-4800-9e92-31f85abb45b1-S12745/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/970dfe88-2af5-4208-a3bd-63f3fe8295d9/runs/0898aa3a-1284-4f64-9edd-7e7e90f9284f/testoutput/test-support/jtreg_open_test_jdk_jdk_io/classes/0/java/io/File/GetXSpace.d/)
WARNING: Please consider reporting this to the maintainers of GetXSpace
WARNING: System::setSecurityManager will be removed in a future release
FAILED: '/dev': 191488 != 190976
FAILED: '/dev': 191488 != 190976
182 tests: 2 failure(s); first: java.lang.RuntimeException: '/dev': 191488 != 190976
java.lang.RuntimeException: 1 test(s) failed
	at GetXSpace.main(GetXSpace.java:452)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at com.sun.javatest.regtest.agent.MainWrapper$MainThread.run(MainWrapper.java:127)
	at java.base/java.lang.Thread.run(Thread.java:833)",,,,,,,,,,,JDK-8278200,JDK-8278199,JDK-8281442,JDK-8301656,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,x86_64,,,,,,,,,os_x,,,,,"0|i2uk03:",9223372036854775807,b22,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@5f132e58,,,,,,,,,"2021-10-26 09:28;dcubed;So far there are three sightings of this failure mode and
all three are in tier7-common-usage-tracker tasks so I'm
going to add the investigate-UT label.;;;","2021-10-26 10:50;bpb;For the respective three sightings, the failing values are:

FAILED: '/dev': 191488 != 190976
FAILED: '/dev': 191488 != 190976

FAILED: '/dev': 189440 != 188416
FAILED: '/dev': 189440 != 188416

FAILED: '/dev': 192512 != 192000

In all cases the 'df' output is larger than File.getTotalSpace(). The odd thing is that in the second case it is larger by 1024 bytes (2 blocks) rather than 512 bytes (1 block). Is it possible that the amount of space actually changed between when 'df' is exec'd and when File.getTotalSpace() is invoked?;;;","2021-10-26 11:07;bpb;Better detail:

/dev:
  df   total=       191488 free =            0 usable =            0
  getX total=       190976 free =            0 usable =            0

/dev:
  df   total=       189440 free =            0 usable =            0
  getX total=       188416 free =            0 usable =            0

/dev:
  df   total=       192512 free =            0 usable =            0
  getX total=       192000 free =            0 usable =            0

I have observed on my own machine that the value 'df' returns for /dev can vary over time. Therefore I wonder whether there should be a tolerance for this case or whether /dev should simply be ignored, at least on macOS?;;;","2021-10-26 11:57;bpb;The cause appears to be that the total size of /dev can vary over time.;;;","2021-10-28 11:07;bpb;Output of a test which prints

1) the output of ‘df’;
2) the value of File.getTotalSpace() before and after exec’ing df’.

every minute for an hour with output suppressed if no change:

$ java PrintSpace /dev 60 1
0 minutes
Filesystem 512-blocks Used Available Capacity iused ifree %iused  Mounted on
devfs             389  389         0   100%     682     0  100%   /dev
before: 389, after: 389

1 minutes
Filesystem 512-blocks Used Available Capacity iused ifree %iused  Mounted on
devfs             378  378         0   100%     654     0  100%   /dev
before: 378, after: 378

2 minutes
Filesystem 512-blocks Used Available Capacity iused ifree %iused  Mounted on
devfs             377  377         0   100%     652     0  100%   /dev
before: 377, after: 377

46 minutes
Filesystem 512-blocks Used Available Capacity iused ifree %iused  Mounted on
devfs             390  390         0   100%     676     0  100%   /dev
before: 390, after: 390

47 minutes
Filesystem 512-blocks Used Available Capacity iused ifree %iused  Mounted on
devfs             392  392         0   100%     688     0  100%   /dev
before: 392, after: 392;;;","2021-10-29 09:15;roboduke;Changeset: 13265f99
Author:    Brian Burkhalter <bpb@openjdk.org>
Date:      2021-10-29 16:13:23 +0000
URL:       https://git.openjdk.java.net/jdk/commit/13265f9901ab8334bbe1e7a571a9c5f386275dbf
;;;","2022-01-30 05:36;goetz;Fix request [17u]

I backport this for parity with 11.0.15-oracle.
No risk, only a test change.
Clean backport.
Test passes.  SAP nighlty testing passes.;;;","2022-01-30 05:47;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk17u-dev/pull/129
Date: 2022-01-30 13:40:39 +0000;;;",,,,,,,,,,,,,,,,,,
ProblemList TestSnippetTag.java,JDK-8274745,5059773,Bug,Closed,JDK,JDK,software,duke,,,P2,Fixed,jjg,jjg,jjg,2021-10-04 11:39,2022-02-10 14:28,2023-10-01 09:57,2021-10-04 12:02,,,,,,,,18,tools,,0,,,,,,,,,,,,,,,,,,,,,,"We should problem-list TestSnippetTag.java while we investigate JDK-8274744
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2ujy3:",9223372036854775807,b18,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@7900061a,,,,,,,Verified,,"2021-10-04 12:02;roboduke;Changeset: 75d6688d
Author:    Jonathan Gibbons <jjg@openjdk.org>
Date:      2021-10-04 19:00:21 +0000
URL:       https://git.openjdk.java.net/jdk/commit/75d6688df9845ecb8f370b4cd2d5a36f13d3cdc0
;;;",,,,,,,,,,,,,,,,,,,,,,,,,
TestSnippetTag test fails after recent integration,JDK-8274744,5059772,Bug,Resolved,JDK,JDK,software,duke,,,P2,Fixed,jjg,jjg,jjg,2021-10-04 11:24,2021-10-11 15:46,2023-10-01 09:57,2021-10-05 08:30,18,,,,,,,18,tools,,0,noreg-self,ursqe-triaged,,,,,,,,,,,,,,,,,,,,TestSnippetTag has started failing.  It should be problem-listed until the underlying cause can be addressed.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8274746,,,,,,,,JDK-8273244,,,,,,,,,,,,,,,,,,,,,,,,"0|i2ujxv:",9223372036854775807,b18,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@7900061a,,,,,,,,,"2021-10-04 14:12;jjg;Root cause is the recent change in caret positions, in JDK-8273244, requiring expected error messages to be updated.

In most cases, just the caret position needs to be updated. In some cases, the line referred to by the caret needs to be updated.;;;","2021-10-05 08:29;roboduke;Changeset: 4e3948f1
Author:    Jonathan Gibbons <jjg@openjdk.org>
Date:      2021-10-05 15:27:02 +0000
URL:       https://git.openjdk.java.net/jdk/commit/4e3948f18b9b8dab96239ad24473134b712ada1a
;;;",,,,,,,,,,,,,,,,,,,,,,,,
ZGC: Use relaxed atomic load when reading bits in the live map,JDK-8274738,5059764,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,pliden,pliden,pliden,2021-10-04 10:41,2021-10-11 15:47,2023-10-01 09:57,2021-10-06 00:45,17,18,,,,,,18,hotspot,,0,zgc,,,,,,,,,,,,,,,,,,,,,ZLiveMap::get() currently uses a non-atomic load to read bits in the live map. This should really be an relaxed atomic load.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2ujw3:",9223372036854775807,b18,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6b00f96c,,,,,,,,,"2021-10-06 00:45;roboduke;Changeset: 2faced09
Author:    Per Liden <pliden@openjdk.org>
Date:      2021-10-06 07:44:47 +0000
URL:       https://git.openjdk.java.net/jdk/commit/2faced09ce0f6901dcdc969e6c85f2a5b55778f1
;;;",,,,,,,,,,,,,,,,,,,,,,,,,
Concurrent read/close of SSLSockets causes SSLSessions to be invalidated unnecessarily,JDK-8274736,5059760,Bug,Closed,JDK,JDK,software,duke,,,P3,Fixed,jnimeh,shadowbug,shadowbug,2021-10-04 10:08,2022-06-02 08:48,2023-10-01 09:57,2021-11-09 17:25,11,,,,,,,18,security-libs,,0,bugdb_33427465,jdk11u-fix-request,jdk11u-fix-yes,jdk13u-fix-request,jdk13u-fix-yes,jdk15u-fix-request,jdk15u-fix-yes,jdk17u-fix-request,jdk17u-fix-SQE-ok,jdk17u-fix-yes,licbug,sustaining,,,,,,,,,,"A race in the code in sun.security.ssl.SSLSocketImpl for closing and reading
from SSLSockets causes SSLSessions to be invalidated unnecessarily. The
problem happens when one thread calls SSLSocketImpl.close() while another
thread is in SSLSocketImpl.AppInputStream.read().

Before it attempts to read from the socket, the implementation of
SSLSocketImpl.AppInputStream.read() checks whether the underlying socket is
closed and if it is, a SocketException will be thrown without invalidating
the SSLSession. If the socket is open, the code continues and tries to read
from the socket.

The problem happens when another thread closes the socket after the closed
check in SSLSocketImpl.AppInputStream.read(). When this happens, the attempt
to read from the Socket will trigger a SocketException, which is caught and
handled as a fatal condition, and the SSLSession is invalidated. This seems
to be incorrect - as described above, if the socket is closed just a moment
before, it is handled gracefully and the SSLSession is not invalidated.

The code in the testcase below is very contrived to try and force the issue
to occur, but we have seen this in the wild with LDAP connections, where the
reads are handled on an LDAP connection thread and another thread can close
the socket by closing the LDAP context. We have even seen this when the LDAP
context is not closed explicitly, with the finalizer thread doing the close.

If the SSLSession is invalidated, the next SSLSocket opened against the same
server requires a new handshake instead of resuming the previous SSLSession.
These extra handshakes lead to increased CPU usage and worse performance.

SUGGESTED FIX
-------------
The suggested fix is to catch any SocketExceptions thrown when reading from the socket and simply rethrow them, instead of handling them as fatal conditions and invalidating the SSLSessions.

There is lots of synchronization in the SSLSocketImpl implementation, but none of it seems to prevent closing and reading from the underlying socket at the same time. It *might* be possible to address this with some additional synchronization, but this will be difficult because the socket could also be closed by the peer at just the wrong moment. This would trigger a ""socket reset"" SocketException instead of ""socket closed"", but the end result would still be the same.

REPRODUCTION INSTRUCTIONS
-------------------------
> javac ReadCloseSSLSockets.java
> java ReadCloseSSLSockets

In the output, note that SSLSessions are invalidated instead of being re-used:

==========================
436765411266600:   Main Thread: Opened SSLSocket@00d94a8b
436765411505400:   Main Thread: Started handshake on SSLSocket@00d94a8b
javax.net.ssl|ALL|01|  Main Thread|2021-09-28 10:28:19.576 BST|SSLSessionImpl.java:220|Session initialized:  Session(1632821299576|TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256)
436765585578700:   Main Thread: Finished handshake on SSLSocket@00d94a8b
436765585993900:   Main Thread: *** OPENED NEW SESSION ***: Session(1632821299576|TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256)
436765586474400: Reader Thread: Started reading from SSLSocket@00d94a8b
436765605629400:   Main Thread: Closing SSLSocket@00d94a8b
436765609877400:   Main Thread: Closed SSLSocket@00d94a8b
javax.net.ssl|ALL|08|Reader Thread|2021-09-28 10:28:19.718 BST|SSLSessionImpl.java:839|Invalidated session:  Session(1632821299576|TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256)
436765613350000: Reader Thread: Exception reading from SSLSocket@00d94a8b: javax.net.ssl.SSLException: java.net.SocketException: Socket closed
436766119398800:   Main Thread: *** Session(1632821299576|TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256) IS INVALID ***

436767146294700:   Main Thread: Opened SSLSocket@00322d26
436767146728500:   Main Thread: Started handshake on SSLSocket@00322d26
javax.net.ssl|ALL|01|  Main Thread|2021-09-28 10:28:21.289 BST|SSLSessionImpl.java:220|Session initialized:  Session(1632821301289|TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256)
436767233906900:   Main Thread: Finished handshake on SSLSocket@00322d26
436767234081700:   Main Thread: *** OPENED NEW SESSION ***: Session(1632821301289|TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256)
436767235490600: Reader Thread: Started reading from SSLSocket@00322d26
436767248896500:   Main Thread: Closing SSLSocket@00322d26
436767250400100:   Main Thread: Closed SSLSocket@00322d26
javax.net.ssl|ALL|08|Reader Thread|2021-09-28 10:28:21.358 BST|SSLSessionImpl.java:839|Invalidated session:  Session(1632821301289|TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256)
436767252442500: Reader Thread: Exception reading from SSLSocket@00322d26: javax.net.ssl.SSLException: java.net.SocketException: Socket closed
436767761053200:   Main Thread: *** Session(1632821301289|TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256) IS INVALID ***
==========================

The testcase can also be run in single threaded mode like this:

> java ReadCloseSSLSockets single

The output shows that the closed socket is not handled as a fatal condition if the close doesn't happen at the ""wrong"" moment:

==========================
435390504657400:   Main Thread: Opened SSLSocket@00d94a8b
435390505082600:   Main Thread: Started handshake on SSLSocket@00d94a8b
javax.net.ssl|ALL|01|  Main Thread|2021-09-28 10:05:24.789 BST|SSLSessionImpl.java:220|Session initialized:  Session(1632819924787|TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256)
435390784052800:   Main Thread: Finished handshake on SSLSocket@00d94a8b
435390784427000:   Main Thread: *** OPENED NEW SESSION ***: Session(1632819924787|TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256)
435390784647000:   Main Thread: Closing SSLSocket@00d94a8b
435390785825700:   Main Thread: Closed SSLSocket@00d94a8b
435390786017500:   Main Thread: Started reading from SSLSocket@00d94a8b
435390786250000:   Main Thread: Finished reading from SSLSocket@00d94a8b
435390786468100:   Main Thread: *** Session(1632819924787|TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256) IS VALID ***

435391823632700:   Main Thread: Opened SSLSocket@00322d26
435391824545900:   Main Thread: Started handshake on SSLSocket@00322d26
435391869696700:   Main Thread: Finished handshake on SSLSocket@00322d26
435391870646900:   Main Thread: *** RE-USED PREVIOUS SESSION ***: Session(1632819924787|TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256))
435391871107900:   Main Thread: Closing SSLSocket@00322d26
435391872033500:   Main Thread: Closed SSLSocket@00322d26
435391872464600:   Main Thread: Started reading from SSLSocket@00322d26
435391872899100:   Main Thread: Finished reading from SSLSocket@00322d26
435391873318400:   Main Thread: *** Session(1632819924787|TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256) IS VALID ***
==========================

Note that the CLOSE_DELAY value may need to be tweaked to get the timing right in different environments. Setting it to 0 makes
the problem more intermittent, and the results vary by release. For example, when I test in my environment on 8u261 with
CLOSE_DELAY = 0, I see what happens when the check in SSLSocketImpl.AppInputStream.read() detects that the socket is closed
and handles it gracefully by throwing a SocketException without invalidating the session. For example:

==========================
438032838812500:   Main Thread: Opened SSLSocket@566776ad
438032839276500:   Main Thread: Started handshake on SSLSocket@566776ad
438032976327800:   Main Thread: Finished handshake on SSLSocket@566776ad
438032976736400:   Main Thread: *** OPENED NEW SESSION ***: [Session-2, TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256]
438032977193900:   Main Thread: Closing SSLSocket@566776ad
438032977246200: Reader Thread: Started reading from SSLSocket@566776ad
438032978115500:   Main Thread: Closed SSLSocket@566776ad
438032978296400: Reader Thread: Exception reading from SSLSocket@566776ad: java.net.SocketException: Socket is closed
438033491791200:   Main Thread: *** [Session-2, TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256] IS VALID ***

438034523456500:   Main Thread: Opened SSLSocket@14acaea5
438034523784700:   Main Thread: Started handshake on SSLSocket@14acaea5
438034547768100:   Main Thread: Finished handshake on SSLSocket@14acaea5
438034548001500:   Main Thread: *** RE-USING PREVIOUS SESSION ***: [Session-2, TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256])
438034548481500:   Main Thread: Closing SSLSocket@14acaea5
438034548488400: Reader Thread: Started reading from SSLSocket@14acaea5
438034550469400:   Main Thread: Closed SSLSocket@14acaea5
438034550799800: Reader Thread: Exception reading from SSLSocket@14acaea5: java.net.SocketException: Socket is closed
438035053576100:   Main Thread: *** [Session-2, TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256] IS VALID ***
==========================

TESTCASE
--------
import java.io.IOException;
import java.io.InputStream;
import javax.net.ssl.SSLSocket;
import javax.net.ssl.SSLContext;
import javax.net.ssl.SSLSession;
import java.security.NoSuchAlgorithmException;

public class ReadCloseSSLSockets {
        private static final String HOSTNAME = ""www.google.com"";
        private static final int PORT = 443;
       
        private static final int ITERATIONS = 5;
       
        // This controls how long the main thread waits before closing the socket.
        // This may need tweaking for different environments to get the timing right.
        private static final int CLOSE_DELAY = 10;
               
        private static SSLSocket theSSLSocket;
        private static SSLSession theSSLSession;
        private static InputStream theInputStream;
        private static String theSSLSocketHashCode;
        private static SSLSession lastSSLSession;
       
        private static volatile boolean readFromSocket = false;
        private static volatile boolean finished = false;
        private static boolean multiThreaded = true;

        public static void main(String[] args) {
                if (args.length != 0) {
                        if (args[0].equals(""single"")) {
                                multiThreaded = false;
                        }
                }

                if (System.getProperty(""javax.net.debug"") == null) {
                        System.setProperty(""javax.net.debug"", ""session"");
                }
               
                Thread.currentThread().setName(""  Main Thread"");
               
                if (multiThreaded) {
                        // Create the reader thread
                        ReaderThread readerThread = new ReaderThread();
                        readerThread.setName(""Reader Thread"");
                        readerThread.start();
                }
               
                try {
                        for (int i = 0; i < ITERATIONS; i++) {
                                openSSLSocket();
                                doHandshake();
                                getInputStream();
                                getAndCompareSession();
                               
                                if (multiThreaded) {
                                        readCloseMultiThreaded();
                                } else {
                                        readCloseSingleThreaded();
                                }
                               
                                isSessionValid();
                               
                                lastSSLSession = theSSLSession;
                               
                                // Insert a short gap between iterations
                                Thread.sleep(1000);
                                System.out.println();
                        }
                } catch (Exception e) {
                        logToConsole(""Unexpected Exception: "" + e);
                } finally {
                        if (multiThreaded) {
                                // Tell the reader thread to finish
                                finished = true;
                        }
                }
        }
       
        private static void readCloseMultiThreaded() throws IOException, InterruptedException {
                // Tell the reader thread to start trying to read from this socket
                readFromSocket = true;
                                       
                // Short pause to give the reader thread time to start reading.
                if (CLOSE_DELAY > 0) {
                        Thread.sleep(CLOSE_DELAY);
                }

                // The problem happens when the reader thread tries to read
                // from the socket while this thread is in the close() call
                closeSSLSocket();

                // Pause to give the reader thread time to discover that the
                // socket is closed and throw a SocketException
                Thread.sleep(500);
        }
       
        private static void readCloseSingleThreaded() throws IOException, InterruptedException {
                closeSSLSocket();
               
                // Try to read from the socket now that it's closed. This will throw
                // a SocketException, but the SSLSession won't be invalidated.
                try {
                        readFromSSLSocket();
                } catch (Exception e) {
                        logToConsole(""Exception reading from SSLSocket@"" + theSSLSocketHashCode + "": "" + e);
                }
        }
       
        private static class ReaderThread extends Thread {
                public void run() {
                        // This thread runs in a tight loop until readFromSocket == true
                        while (!finished) {
                                if (readFromSocket) {
                                        int result = 0;
                                        try {
                                                // If the timing is just right, this will throw a SocketException
                                                // and the SSLSession will be invalidated.
                                                result = readFromSSLSocket();
                                        } catch (Exception e) {
                                                logToConsole(""Exception reading from SSLSocket@"" + theSSLSocketHashCode + "": "" + e);

                                                // Stop trying to read from the socket now
                                                readFromSocket = false;
                                        }

                                        if (result == -1) {
                                                logToConsole(""Reached end of stream reading from SSLSocket@"" + theSSLSocketHashCode);

                                                // Stop trying to read from the socket now
                                                readFromSocket = false;
                                        }
                                }
                        }
                }
        }

        private static void openSSLSocket() throws IOException, NoSuchAlgorithmException {
                theSSLSocket = (SSLSocket) SSLContext.getDefault().getSocketFactory().createSocket(HOSTNAME, PORT);
                theSSLSocketHashCode = String.format(""%08x"", theSSLSocket.hashCode());
                logToConsole(""Opened SSLSocket@"" + theSSLSocketHashCode);
        }
       
        private static void doHandshake() throws IOException {
                logToConsole(""Started handshake on SSLSocket@"" + theSSLSocketHashCode);
                theSSLSocket.startHandshake();
                logToConsole(""Finished handshake on SSLSocket@"" + theSSLSocketHashCode);
        }
       
        private static void getInputStream() throws IOException {
                theInputStream = theSSLSocket.getInputStream();
        }
       
        private static void getAndCompareSession() {
                theSSLSession = theSSLSocket.getSession();
               
                // Have we opened a new session or re-used the last one?
                if (lastSSLSession == null || !theSSLSession.equals(lastSSLSession)) {
                        logToConsole(""*** OPENED NEW SESSION ***: "" + theSSLSession);
                } else {
                        logToConsole(""*** RE-USING PREVIOUS SESSION ***: "" + theSSLSession + "")"");
                }
        }
       
        private static void closeSSLSocket() throws IOException {
                logToConsole(""Closing SSLSocket@"" + theSSLSocketHashCode);
                theSSLSocket.close();
                logToConsole(""Closed SSLSocket@"" + theSSLSocketHashCode);
        }

        private static int readFromSSLSocket() throws Exception {
                logToConsole(""Started reading from SSLSocket@"" + theSSLSocketHashCode);
                int result = theInputStream.read();
                logToConsole(""Finished reading from SSLSocket@"" + theSSLSocketHashCode + "": result = "" + result);
                return result;
        }
       
        private static void isSessionValid() {
                // Is the session still valid?
                if (theSSLSession.isValid()) {
                        logToConsole(""*** "" + theSSLSession + "" IS VALID ***"");
                } else {
                        logToConsole(""*** "" + theSSLSession + "" IS INVALID ***"");
                }
        }
       
        private static void logToConsole(String s) {
                System.out.println(System.nanoTime() + "": "" + Thread.currentThread().getName() + "": "" + s);
        }
}
",,,,,,,,,,,JDK-8278070,JDK-8281530,JDK-8281534,JDK-8279012,JDK-8277633,JDK-8277636,JDK-8277709,,,,,,,,,,,,,,,,,,JDK-8277970,JDK-8280158,JDK-8274524,,,JDK-8278388,JDK-8287739,,,,,,,,,,,,,,,,,,,,,,,"0|i2ujv7:",9223372036854775807,b23,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@2ec284e3,,,,,,,Verified,,"2021-11-09 17:25;roboduke;Changeset: 8822d41f
Author:    Jamil Nimeh <jnimeh@openjdk.org>
Date:      2021-11-10 01:24:33 +0000
URL:       https://git.openjdk.java.net/jdk/commit/8822d41fdcc2c2d568badd72635dc587d21dbd63
;;;","2021-12-15 06:24;zgu;Fix Request (11u)

Backport for parity with Oracle 11.0.15.

Original patch applies cleanly, but new test does not build. 11u patch has been reviewed and new test passes.
;;;","2021-12-15 10:07;ostuart;not for BPR inclusion on the advice of Kevin B;;;","2022-02-09 03:07;yan;Fix request  (15u):

for parity with major releases. The patch applies cleanly, all (non-ignored) jdk/javax/net/ssl tests pass in 15u.;;;","2022-02-09 03:16;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk15u-dev/pull/172
Date: 2022-02-09 11:10:09 +0000;;;","2022-02-09 03:59;yan;Fix request (13u):

the fix applies cleanly but one of the tests does require an additional line with a declaration. With that, all test/jdk/javax/net/ssl,  test/jdk/sun/security/ssl do pass.;;;","2022-02-09 04:01;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk13u-dev/pull/324
Date: 2022-02-09 11:56:50 +0000;;;","2022-04-08 03:44;sqetools;verified;;;",,,,,,,,,,,,,,,,,,
javax.imageio.IIOException: Unsupported Image Type  while processing a valid JPEG image,JDK-8274735,5059759,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,prr,shadowbug,shadowbug,2021-10-04 10:08,2022-05-21 09:21,2023-10-01 09:57,2022-03-25 08:09,11,17,8,,,,,19,client-libs,,0,amazon-interest,bugdb_33421444,jdk11u-fix-request,jdk11u-fix-yes,jdk15u-fix-request,jdk15u-fix-yes,jdk17u-fix-request,jdk17u-fix-yes,sn_114,,,,,,,,,,,,," ImageIO.read on JPEG image with CMYK throws
         javax.imageio.IIOException: Unsupported Image Type
          Here is the stack:
          javax.imageio.IIOException: Unsupported Image Type at
           com.sun.imageio.plugins.jpeg.JPEGImageReader.readInternal(JPEGImageReader.java:1079) at
          com.sun.imageio.plugins.jpeg.JPEGImageReader.read(JPEGImageReader.java:1050)
          at javax.imageio.ImageIO.read(ImageIO.java:1448)
          at javax.imageio.ImageIO.read(ImageIO.java:1352)",,,,,,,,,,,JDK-8284610,JDK-8283913,JDK-8285955,JDK-8285953,JDK-8284551,JDK-8285948,,,,,,,,,,,,,,JDK-5100094,,,,,JDK-8287120,,,,,JDK-5100094,,,,,,,,,,,,,,,,,,,,,,,,"0|i2ujuz:",9223372036854775807,b16,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@377c353d,,,,,,,,,"2022-03-16 20:22;prr;https://bugs.openjdk.java.net/browse/JDK-5100094 can be used for full support of CMYK JPEGs.
This bug can be used for basic reading of CMYK JPEGs so we don't get an exception.;;;","2022-03-17 11:40;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/7849
Date: 2022-03-17 03:23:49 +0000;;;","2022-03-25 08:09;dukebot;Changeset: f8a16491
Author:    Phil Race <prr@openjdk.org>
Date:      2022-03-25 15:07:44 +0000
URL:       https://git.openjdk.java.net/jdk/commit/f8a164915fff5e9e8f3c9c1996b51e7e4fe5d68d
;;;","2022-04-25 11:25;serb;Working on the backport to the openjdk 11/15/17. ;;;","2022-04-25 19:59;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk17u-dev/pull/365
Date: 2022-04-26 00:59:20 +0000;;;","2022-04-25 21:02;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk15u-dev/pull/201
Date: 2022-04-26 01:47:08 +0000;;;","2022-04-25 22:42;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk11u-dev/pull/1048
Date: 2022-04-26 01:53:10 +0000;;;","2022-04-26 13:45;serb;Fix Request (17u)

- Parity with 17.0.4-oracle
- Risk Analysis: Low
- Testing: The fix verified by the test, the jdk_desktop tests are green
- PR: https://github.com/openjdk/jdk17u-dev/pull/365;;;","2022-04-26 13:46;serb;Fix Request (15u)

- Risk Analysis: Low
- Testing: The fix verified by the test, the jdk_desktop tests are green
- PR: https://github.com/openjdk/jdk15u-dev/pull/201;;;","2022-04-26 13:47;serb;Fix Request (11u)

- Parity with 11.0.16-oracle
- Risk Analysis: Low
- Testing: The fix verified by the test, the jdk_desktop tests are green
- PR: https://github.com/openjdk/jdk11u-dev/pull/1048;;;",,,,,,,,,,,,,,,,
the method jdk.jshell.SourceCodeAnalysis documentation not working,JDK-8274734,5059596,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,jlahoda,webbuggrp,webbuggrp,2021-09-30 13:18,2021-11-15 15:07,2023-10-01 09:57,2021-11-08 05:20,17,18,,,,,,18,tools,,0,additional-information-received,dcsad,reproducer-yes,webbug,,,,,,,,,,,,,,,,,,"A DESCRIPTION OF THE PROBLEM :
The method jdk.jshell.SourceCodeAnalysis documentation(String input, int cursor, boolean computeJavadoc) returns empty list for jdk.jshell.JShell when another SourceCodeAnalysis is already used for documentation.

The problem is in the method jdk.shell.SourceCodeAnalysisImpl List<Path> findSources()

The first SourceCodeAnalysis opens file system and keeps it open. 
The second SourceCodeAnalysis tries to open the file system and fails.


EXPECTED VERSUS ACTUAL BEHAVIOR :
EXPECTED -
I expected that JShell instances are independent and it is possible to use multiple JShell instances in the same application.

---------- BEGIN SOURCE ----------
import java.util.List;

import jdk.jshell.JShell;
import jdk.jshell.SourceCodeAnalysis.Documentation;

public class Test {

	public static void main(String[] args) {
		
		JShell jsh1 = JShell.create();
		List<Documentation> docs1 = jsh1.sourceCodeAnalysis().documentation(""String"",
                6, false);
		
		System.out.println(docs1.get(0).signature());
		
		JShell jsh2 = JShell.create();
		List<Documentation> docs2 = jsh2.sourceCodeAnalysis().documentation(""String"",
                6, false);
		
		System.out.println(docs2);

	}
}
---------- END SOURCE ----------

FREQUENCY : always


",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"2021-10-04 10:07;adev;Test.java;https://bugs.openjdk.org/secure/attachment/96642/Test.java",,,,,generic,,,,,,,,,generic,,,,,"0|i2uiur:",9223372036854775807,b23,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@ef6d34f,,,,,,,,,"2021-10-04 10:06;adev;Does calling jsh1.close(); resolve the issue?;;;","2021-10-05 22:12;pnarayanaswa;Additional Information from submitter:
==============================
jsh1.close() releases the file system, but jsh1 will no longer be usable. The point is to use both jsh1 and jsh2.
""Close this state engine. Frees resources. Should be called when this state engine is no longer needed.""

I would rather call 
sourceCodeAnalysis.close()
but this method is defined only in SourceCodeAnalysisImpl but not in SourceCodeAnalysis;;;","2021-11-08 05:20;roboduke;Changeset: 4c14eddf
Author:    Jan Lahoda <jlahoda@openjdk.org>
Date:      2021-11-08 13:19:51 +0000
URL:       https://git.openjdk.java.net/jdk/commit/4c14eddf41f1d9984417dc5ac6aba6f268b31029
;;;",,,,,,,,,,,,,,,,,,,,,,,
"(loom) j.io.PrintWriter(Writer, boolean) constructor doesn't throw NPE ",JDK-8274731,5059757,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,alanb,dbessono,dbessono,2021-10-04 08:51,2021-10-04 11:07,2023-10-01 09:57,2021-10-04 11:07,repo-loom,,,,,,,repo-loom,core-libs,,0,conformance,loom,,,,,,,,,,,,,,,,,,,,"=== java.io =====
Unless otherwise noted, passing a null argument to a constructor or method in any class or interface in this package will cause a NullPointerException to be thrown. 
========

Code sample

  new java.io.PrintWriter((java.io.Writer)null, false);

doesn't produce NPE with the JDK-loom implementation.

The change in behavior is likely caused by https://github.com/openjdk/loom/commit/20d1240b2e4e233549fd057149b6cec7bc2cc14a#diff-59afb0eab27ce903c9507c69b41a224dd3d121797d32ad4bd5d832d66d72d139L115

While JDK-mainline generates:

Exception in thread ""main"" java.lang.NullPointerException
	at java.base/java.io.Writer.<init>(Writer.java:174)
	at java.base/java.io.PrintWriter.<init>(PrintWriter.java:112)
	at Test.main(Test.java:3)

",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2ujuj:",9223372036854775807,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@5f132e58,,,,,,,,,"2021-10-04 08:56;alanb;Thanks, the locking is re-implemented in this area so PrintWriter no longer relies on the super class to check for null.;;;",,,,,,,,,,,,,,,,,,,,,,,,,
AArch64: AES/GCM acceleration is broken by the fix for JDK-8273297,JDK-8274730,5059756,Bug,Closed,JDK,JDK,software,duke,,,P2,Fixed,aph,aph,aph,2021-10-04 08:27,2022-02-03 05:49,2023-10-01 09:57,2021-10-06 01:18,18,,,,,,,18,hotspot,,0,hs-comp-triaged,oracle-triage-11,oracle-triage-17,oracle-triage-18,regression,,,,,,,,,,,,,,,,,"The recent AES/GCM acceleration on AArch64 was broken by https://bugs.openjdk.java.net/browse/JDK-8273297 . This was entirely expected, and I approved the patch, but now we must make AArch64 acceleration work again. ",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8273297,,,,,,,,,,aarch64,,,,,,,,,generic,,,,,"0|i2ujub:",9223372036854775807,b18,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,Verified,,"2021-10-05 16:19;dlong;ILW = HLH = P2;;;","2021-10-06 01:18;roboduke;Changeset: c74726db
Author:    Andrew Haley <aph@openjdk.org>
Date:      2021-10-06 08:18:10 +0000
URL:       https://git.openjdk.java.net/jdk/commit/c74726dbd0767d02abf9535361a86ffb69b646d9
;;;",,,,,,,,,,,,,,,,,,,,,,,,
"(loom) Original impl of j.io.Writer::write(String, int, int) throws NegativeArraySizeException instead of the required IOOBE",JDK-8274728,5059754,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,alanb,dbessono,dbessono,2021-10-04 08:05,2021-10-04 11:44,2023-10-01 09:57,2021-10-04 11:07,repo-loom,,,,,,,repo-loom,core-libs,,0,conformance,loom,,,,,,,,,,,,,,,,,,,,"=== java.io.Writer::write(String, int, int) =====
IndexOutOfBoundsException – Implementations should throw this exception if off is negative, or len is negative, or off + len is negative or greater than the length of the given string
========

Code sample:

import java.io.IOException;
import java.io.Writer;

public class Test {
    public static void main(String[] args) throws IOException {
        Writer writer = new Writer() {
            @Override public void write(char[] cbuf, int off, int len) {}
            @Override public void flush() {}
            @Override public void close() {}
        };
        // len is negative :
        writer.write(""0123456789"", 2, -1);
    }
}


JDK-mainline:

Exception in thread ""main"" java.lang.StringIndexOutOfBoundsException: Range [2, 1) out of bounds for length 10
	at java.base/jdk.internal.util.Preconditions$1.apply(Preconditions.java:55)
	at java.base/jdk.internal.util.Preconditions$1.apply(Preconditions.java:52)
	at java.base/jdk.internal.util.Preconditions$4.apply(Preconditions.java:213)
	at java.base/jdk.internal.util.Preconditions$4.apply(Preconditions.java:210)
	at java.base/jdk.internal.util.Preconditions.outOfBounds(Preconditions.java:98)
	at java.base/jdk.internal.util.Preconditions.outOfBoundsCheckFromToIndex(Preconditions.java:112)
	at java.base/jdk.internal.util.Preconditions.checkFromToIndex(Preconditions.java:349)
	at java.base/java.lang.String.checkBoundsBeginEnd(String.java:4586)
	at java.base/java.lang.String.getChars(String.java:1669)
	at java.base/java.io.Writer.write(Writer.java:289)
	at Test.main(Test.java:11)


JDK-loom:

Exception in thread ""main"" java.lang.NegativeArraySizeException: -1
	at java.base/java.io.Writer.write(Writer.java:274)
	at Test.main(Test.java:11)",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JCK-7316868,,,,,,,,,,,,,,,,,,,,,,,,"0|i2ujtv:",9223372036854775807,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@5f132e58,,,,,,,,,"2021-10-04 08:13;dbessono;Probably the related change in the impl: https://github.com/openjdk/loom/commit/60f409caf5f747a57db86c953fd07cf9f56e647b#diff-14b751c409c01172a74e6234ba0282a58bbb42d55eabc626603190618dd45ce8R265;;;","2021-10-04 08:20;alanb;Thanks, it needs Objects.checkFromIndexSize here to get the same behavior as the implicit check in the main line.;;;",,,,,,,,,,,,,,,,,,,,,,,,
"UnixSystem fails to provide uid, gid or groups if no username is available",JDK-8274721,5059681,Bug,Closed,JDK,JDK,software,duke,,,P4,Fixed,weijun,webbuggrp,webbuggrp,2021-10-02 14:32,2022-04-25 10:56,2023-10-01 09:57,2021-10-18 06:25,11,17,18,8,,,,18,security-libs,,0,dcsaw,reproducer-yes,webbug,,,,,,,,,,,,,,,,,,,"ADDITIONAL SYSTEM INFORMATION :
The tests were run inside the openjdk:17-jdk docker image to easily supply the nameless user.
The docker daemon was running on an Ubuntu 21.04 instance (based on the Linux 5.11.0-37-generic kernel) under a x86-64 architecture.

A DESCRIPTION OF THE PROBLEM :
The 'com.sun.security.auth.module.UnixSystem' class fails to correctly provider a users uid, gid or groups if the username of that user cannot be found.

This issue, while uncommon on servers or desktop setups, is found mostly when running java inside a container (e.g. docker), as these may be configured with an user id that was not created prior to prevent any form of writing inside the container. 
An example of this on the docker platform would be `docker run --rm -it --user 999:999 openjdk:17-jdk bash`.

--Potential causes/Solutions--
Unix.c (https://github.com/openjdk/jdk/blob/master/src/jdk.security.auth/unix/native/libjaas/Unix.c#L99) presumably jumps to 'cleanUpAndReturn' early if no username could be found for the current user uid, skipping the uid, gid and group assignments. As the effective uid and gid are already known they should, at least in my mind, still be assigned to the UnixSystem fields.

--Context--
This issue was found while attempting to implement a root user detection for https://github.com/PaperMC/Paper. As the UnixSystem utility falls back to uid 0 in the case of a missing name, users without a username were incorrectly flagged as the root user.

STEPS TO FOLLOW TO REPRODUCE THE PROBLEM :
As it is easier to create this inside a docker container, I'll provide the steps required for this setup.
By accessing a container with a uid/gid that do not exist/have no permission, all files must be mounted in as the user will not have any write permissions.

1) Create a small sample application on the docker host ( such as https://gist.github.com/lynxplay/52f836dd53b8885c4d4d58fb21189d03 )
2) Run a docker container with a user that is not defined in the image and mount the sample application created in step 1 into it (e.g. 'docker run --rm -it --user 998:998 -v ""/path/to/my/app:/path/inside/container"" openjdk:17-jdk bash')
3) Execute the sample application (through `java -jar sample.jar` or `java Sample.java`)

EXPECTED VERSUS ACTUAL BEHAVIOR :
EXPECTED -
I expect the username to be null, as the user that started the process does not have a username, yet I expect the uid, gid and groups to be correctly set.
ACTUAL -
The example application will show a uid/gid of 0 and a null groups array.

---------- BEGIN SOURCE ----------
public class UnixSystemNameless {

    public static void main(String[] args) {
        final var unixSystem = new com.sun.security.auth.module.UnixSystem();
        System.out.printf(""username: %s%n"", unixSystem.getUsername());
        System.out.printf(""uid: %d%n"", unixSystem.getUid());
        System.out.printf(""gid: %d%n"", unixSystem.getGid());
        System.out.printf(""groups: %s%n"", java.util.Arrays.toString(unixSystem.getGroups()));
    }

}
---------- END SOURCE ----------

CUSTOMER SUBMITTED WORKAROUND :
A current temporary workout is the usage of the `id` binary available on most linux based distributions which may be called using a plain java process and the `-u` parameter to fetch the current `uid` which is enough for validating if the process is run by the root user.

FREQUENCY : always


",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"2021-10-04 06:44;tongwan;Main.java;https://bugs.openjdk.org/secure/attachment/96640/Main.java",,,,,generic,,,,,,,,,generic,,,,,"0|i2ujdn:",9223372036854775807,b20,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@7817f935,,,,,,,Verified,,"2021-10-04 06:41;tongwan;The observations on Oracle Linux:
JDK 8: Failed, username: null, uid: 0, gid: 0, groups: null
JDK 11: Failed.
JDK 17: Failed.
JDK 18ea+13: Failed.;;;","2021-10-18 06:25;roboduke;Changeset: a619f890
Author:    Weijun Wang <weijun@openjdk.org>
Date:      2021-10-18 13:24:39 +0000
URL:       https://git.openjdk.java.net/jdk/commit/a619f8909bb074712db22746e785f7485795a8f5
;;;","2022-04-25 10:56;sqetools;verified;;;",,,,,,,,,,,,,,,,,,,,,,,
runtime/cds/appcds/LambdaEagerInit.java fails with -XX:-CompactStrings,JDK-8274718,5059746,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,fmatte,shade,shade,2021-10-04 06:17,2023-06-22 11:40,2023-10-01 09:57,2021-10-13 08:40,17,18,,,,,,18,hotspot,,0,amazon-interest,cds,,,,,,,,,,,,,,,,,,,,"When executed with -XX:-CompactStrings, some CDS tests fail.

$ make run-test TEST=runtime/cds/ TEST_VM_OPTS=""-XX:-CompactStrings""

TEST: runtime/cds/appcds/LambdaEagerInit.java
...

STDERR:
 stdout: [[0.081s][info][cds] trying to map /home/shade/trunks/jdk/build/linux-x86_64-server-fastdebug/images/jdk/lib/server/classes.jsa
[0.081s][info][cds] Opened archive /home/shade/trunks/jdk/build/linux-x86_64-server-fastdebug/images/jdk/lib/server/classes.jsa.
Error occurred during initialization of VM
Unable to use shared archive.
];
 stderr: [An error has occurred while processing the shared archive file.
The shared archive file's CompactStrings setting (enabled) does not equal the current CompactStrings setting (disabled).
] 
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2ujs3:",9223372036854775807,b19,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,,,"2021-10-05 11:16;mseledtsov;ILW = MLM = P4;;;","2021-10-06 10:23;iklam;Maybe some tests should be changed to require vm.flagless;;;","2021-10-11 19:49;iklam;This test uses the default CDS archive with -Xshare:on. However, the default CDS archive may fail to load when a few VM flags are mismatched. You can see FileMapHeader::validate() for various failure conditions. E.g., ObjectAlignmentInBytes, CompactStrings, etc.

I think there are two ways to fix it:
[1] more restrictive -- require vm.flagless
[2] more forgiving -- run with -Xshare:auto instead of -Xshare:on for testDefaultArchiveWithEagerInitializationEnabled() and testDefaultArchiveWithEagerInitializationDisabled(). If the system archive fails to load, then don't require the lambdaLoadedFromArchive and cdsLoadedLambdaProxy to be printed.;;;","2021-10-11 19:50;iklam;I updated the bug synopsis. Only LambdaEagerInit.java seems to be affected by this issue.;;;","2021-10-13 08:40;roboduke;Changeset: d8f6b6c1
Author:    Fairoz Matte <fmatte@openjdk.org>
Committer: Ioi Lam <iklam@openjdk.org>
Date:      2021-10-13 15:38:36 +0000
URL:       https://git.openjdk.java.net/jdk/commit/d8f6b6c19a591512ff4e956823cb87a83e088ae8
;;;",,,,,,,,,,,,,,,,,,,,,
JDWP Spec: the description for the Dispose command confuses suspend with resume.,JDK-8274716,5059744,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,rrich,rrich,rrich,2021-10-04 06:06,2021-11-30 09:58,2023-10-01 09:57,2021-10-07 01:20,11,17,18,,,,,18,core-svc,,0,jdk17u-fix-request,jdk17u-fix-SQE-ok,jdk17u-fix-yes,serviceability,,,,,,,,,,,,,,,,,,"The following sentence describing the Dispose command confuses resume with suspend [1]:

  All threads suspended by the thread-level *resume* command or the VM-level
  *resume* command are resumed as many times as necessary for them to run.

It should be changed to

  All threads suspended by the thread-level *suspend* command or the VM-level
  *suspend* command are resumed as many times as necessary for them to run.

[1] JDWP Spec, Dispose Command (JDK17).
    https://docs.oracle.com/en/java/javase/17/docs/specs/jdwp/jdwp-protocol.html#JDWP_VirtualMachine_Dispose",,,,,,,,,,,JDK-8277859,JDK-8278005,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2ujrn:",9223372036854775807,b19,,,,,,,,,,,,"2021-10-07 01:20;roboduke;Changeset: 29dcbb72
Author:    Richard Reingruber <rrich@openjdk.org>
Date:      2021-10-07 08:20:20 +0000
URL:       https://git.openjdk.java.net/jdk/commit/29dcbb72a2d9b224203d92ad3224cf149a7d08de
;;;","2021-11-17 02:27;rrich;Fix request (17u)

I would like to backport this to jdk17u.
Applies cleanly.;;;",,,,,,,,,,,,,,,,,,,,,,,,
Incorrect verifier protected access error message,JDK-8274714,5059741,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,hseigel,hseigel,hseigel,2021-10-04 05:41,2021-12-28 08:23,2023-10-01 09:57,2021-10-21 06:51,18,,,,,,,18,hotspot,,0,jdk11u-fix-request,jdk11u-fix-yes,jdk17u-fix-request,jdk17u-fix-yes,verifier,,,,,,,,,,,,,,,,,"The verifier throws VerifyError with the following message when it detects an issue with protected access for a getfield or putfield bytecode:

          verify_error(ErrorContext::bad_type(bci,
              current_frame->stack_top_ctx(),
              TypeOrigin::implicit(current_type())),
              ""Bad access to protected data in getfield"");

The bad access could be caused by a putfield.  So, the message should not be hardwired to say 'getfield'.",,,,,,,,,,,JDK-8279306,JDK-8276068,JDK-8278496,JDK-8276065,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2ujqz:",9223372036854775807,b21,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,,,"2021-10-21 06:51;roboduke;Changeset: e39bdc9d
Author:    Harold Seigel <hseigel@openjdk.org>
Date:      2021-10-21 13:50:32 +0000
URL:       https://git.openjdk.java.net/jdk/commit/e39bdc9ddb7ba50160d07a27e6038cdea6a594a8
;;;","2021-12-07 03:33;goetz;Fix request [11u]

I backport this for parity with 11.0.15-oracle.
No risk, changes only exception message.
Clean backport.
Test passes.  SAP nightly tests pass.;;;","2021-12-20 05:38;goetz;Fix request [17u]

I backport this for parity with 17.0.3-oracle.
Clean backport.
SAP nightly tests passed.;;;","2021-12-20 05:44;roboduke;A pull request was submitted for review.

URL: https://git.openjdk.java.net/jdk17u-dev/pull/11
Date: 2021-12-20 13:37:43 +0000
;;;",,,,,,,,,,,,,,,,,,,,,,
Certain blend modes cannot be set from CSS,JDK-8274699,5059491,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,mhanl,webbuggrp,webbuggrp,2021-09-29 08:02,2021-12-01 05:19,2023-10-01 09:57,2021-10-29 08:38,jfx11,,,,,,,jfx18,javafx,,0,dcspn,reproducer-other,webbug,,,,,,,,,,,,,,,,,,,"A DESCRIPTION OF THE PROBLEM :
Blend modes ""add"", ""red"", ""green"" and ""blue"" cannot be set via CSS (-fx-blend-mode: red) I assume because they get parsed as colors and not blend mode enum values. (add becomes 0xaadddd most likely?)

Warning that gets logged:

```
Sep 29, 2021 10:13:55 AM javafx.scene.CssStyleHelper calculateValue
WARNING: Caught 'java.lang.ClassCastException: class javafx.scene.paint.Color cannot be cast to class java.lang.String (javafx.scene.paint.Color is in module javafx.graphics@11.0.12 of loader 'platform'; java.lang.String is in module java.base of loader 'bootstrap')' while converting value for '-fx-blend-mode' from inline style on Label@1b4e2356[styleClass=label rainbow blend-test]'add'
```

Additionally, `src-atop` and all the other `src-*` blend modes referenced in the documentation here seemingly cannot be set at all: https://openjfx.io/javadoc/11/javafx.graphics/javafx/scene/doc-files/cssref.html

In the source code the blend modes `src-*` are only referenced in the documentation based on this search: https://github.com/openjdk/jfx/search?q=src-atop (Maybe it should just be removed?)


",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8088385,,,,,,,,JDK-8276180,JDK-8268657,,,,,,,,,x86_64,,,,,,,,,os_x,,,,,"0|i2ui7f:",9223372036854775807,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@67282485,,,,,,,,,"2021-10-04 04:54;pnarayanaswa;Duplicates to JDK-8268657;;;","2021-10-05 18:43;mhanl;I think those are different issues although they look the same at first.;;;","2021-10-14 10:27;kcr;This is not a duplicate of JDK-8268657, but is a unique (and only somewhat related) issue.;;;","2021-10-29 08:38;roboduke;Changeset: c6f4ff01
Author:    Marius Hanl <mhanl@openjdk.org>
Committer: Kevin Rushforth <kcr@openjdk.org>
Date:      2021-10-29 15:37:24 +0000
URL:       https://git.openjdk.java.net/jfx/commit/c6f4ff01f2af7d2616b0b49a51ded3ec69f7b0a5
;;;",,,,,,,,,,,,,,,,,,,,,,
JDWP deadlocks if some Java thread reaches wait in blockOnDebuggerSuspend,JDK-8274687,5059708,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,rrich,rrich,rrich,2021-10-04 02:09,2022-12-08 07:42,2023-10-01 09:57,2021-11-14 23:03,11,17,18,,,,,18,core-svc,,0,jdk11u-fix-request,jdk11u-fix-yes,jdk17u-fix-request,jdk17u-fix-yes,serviceability,,,,,,,,,,,,,,,,,"Case 1: Deadlock on resume by debugger
======================================

The JDWP agent deadlocks the vm if

* A thread T is blocked in blockOnDebuggerSuspend because it called
  j.l.Thread.resume() on a thread ""resumee"" that is currently suspended by the
  debugger

* The debugger tries to resume one or all threads

because T owns handlerLock waiting for a resume by the debugger and the debugger
needs handlerLock for the resume.

Stacks on Deadlock
------------------

### Stack of Thread T

#0  futex_wait_cancelable
#1  __pthread_cond_wait_common
#2  __pthread_cond_wait
#3  os::PlatformEvent::park
#4  JvmtiRawMonitor::simple_wait
#5  JvmtiRawMonitor::raw_wait
#6  JvmtiEnv::RawMonitorWait
#7  debugMonitorWait
#8  blockOnDebuggerSuspend
#9  handleAppResumeBreakpoint
#10 event_callback
#11 cbBreakpoint
#12 JvmtiExport::post_raw_breakpoint
#13 InterpreterRuntime::_breakpoint

### JDWP Agent Stack

#0  futex_wait_cancelable
#1  __pthread_cond_wait_common
#2  __pthread_cond_wait
#3  os::PlatformEvent::park
#4  JvmtiRawMonitor::simple_enter
#5  JvmtiRawMonitor::raw_enter
#6  JvmtiEnv::RawMonitorEnter
#7  debugMonitorEnter
#8  eventHandler_lock
#9  threadControl_resumeThread
#10 resume
#11 debugLoop_run
#12 connectionInitiated
#13 attachThread
#14 JvmtiAgentThread::call_start_function
#15 JavaThread::thread_main_inner
#16 Thread::call_run
#17 thread_native_entry
#18 start_thread
#19 clone

See attachment for jtreg reproducer.

Case 2: Deadlock on JDWP Dispose command
========================================

We see sporadic timouts running
test/hotspot/jtreg/vmTestbase/nsk/jdi/VirtualMachine/dispose/dispose003 because
the debuggee main thread and the JDWP agent thread deadlock with the following
stacks:

### Debuggee Main Thread ""M""

#0  futex_wait_cancelable 
#1  __pthread_cond_wait_common 
#2  __pthread_cond_wait 
#3  os::PlatformEvent::park 
#4  JvmtiRawMonitor::simple_wait 
#5  JvmtiRawMonitor::raw_wait 
#6  JvmtiEnv::RawMonitorWait 
#7  debugMonitorWait 
#8  blockOnDebuggerSuspend 
#9  handleAppResumeBreakpoint 
#10 event_callback 
#11 cbBreakpoint 
#12 JvmtiExport::post_raw_breakpoint 
#13 InterpreterRuntime::_breakpoint 

### JDWP Agent Thread ""A""

#0  futex_wait_cancelable 
#1  __pthread_cond_wait_common 
#2  __pthread_cond_wait 
#3  os::PlatformEvent::park 
#4  JvmtiRawMonitor::simple_enter 
#5  JvmtiRawMonitor::raw_enter 
#6  JvmtiEnv::RawMonitorEnter 
#7  debugMonitorEnter 
#8  eventHandler_free 
#9  threadControl_onDisconnect 
#10 debugLoop_run 
#11 connectionInitiated 
#12 attachThread 
#13 JvmtiAgentThread::call_start_function 
#14 JavaThread::thread_main_inner 
#15 Thread::call_run 
#16 thread_native_entry 
#17 start_thread 
#18 clone

#### How to reproduce

The deadlock will likely be reached with the following patch. Apply and run dispose003.

--- a/src/jdk.jdwp.agent/share/native/libjdwp/debugLoop.c
+++ b/src/jdk.jdwp.agent/share/native/libjdwp/debugLoop.c
@@ -180,6 +180,9 @@ debugLoop_run(void)
             shouldListen = !lastCommand(cmd);
         }
     }
+    /* Sleep to trigger deadlock in test/hotspot/jtreg/vmTestbase/nsk/jdi/VirtualMachine/dispose/dispose003 */
+    fprintf(stderr, ""debugLoop: sleep\n"");
+    sleep(1);
     threadControl_onDisconnect();
     standardHandlers_onDisconnect();

#### Analysis

M hit the internal breakpoint in j.l.Thread.resume()[1]. The resumee
""testedThread"" (named ""thread2"" in log output[2]) is currently suspended
therefore M waits on threadLock until resumee is not suspended anymore while
owning handlerLock (acquired in event_callback)[3].

A should call threadControl_reset to resume all threads including ""testedThread"" so
that M can continue but it is blocked before that in eventHandler_free trying to
enter handlerLock owned by M.

Note that the vm.dispose() call by the debugger immediately returns. Resuming
all suspended threads is done asynchronously[4].

[1] M calls j.l.Thread.resume() and hits the internal breakpoint set by the JDWP agent
    https://github.com/openjdk/jdk/blob/32811026ce5ecb1d27d835eac33de9ccbd51fcbf/test/hotspot/jtreg/vmTestbase/nsk/jdi/VirtualMachine/dispose/dispose003a.java#L139

[2] ""testedThread"" is named ""thread2"" in log output.
    https://github.com/openjdk/jdk/blob/32811026ce5ecb1d27d835eac33de9ccbd51fcbf/test/hotspot/jtreg/vmTestbase/nsk/jdi/VirtualMachine/dispose/dispose003a.java#L137

[3] M calls `blockOnDebuggerSuspend()` when hitting the internal
    breakpoint in j.l.Thread.resume(). There it waits while the resumee is
    suspended by the debugger.
    https://github.com/openjdk/jdk/blob/32811026ce5ecb1d27d835eac33de9ccbd51fcbf/src/jdk.jdwp.agent/share/native/libjdwp/threadControl.c#L749

[4] vm.dispose() call by debugger returns immediately. Threads are resumed asynchronously.
    https://github.com/openjdk/jdk/blob/32811026ce5ecb1d27d835eac33de9ccbd51fcbf/test/hotspot/jtreg/vmTestbase/nsk/jdi/VirtualMachine/dispose/dispose003.java#L228
",,,,,,,,,,,JDK-8286631,JDK-8296255,JDK-8296082,JDK-8290664,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8275764,JDK-8296089,,,,"2021-10-07 06:28;rrich;ResumeAfterThreadResumeCallTest.java;https://bugs.openjdk.org/secure/attachment/96673/ResumeAfterThreadResumeCallTest.java",,,,,,,,,,,,,,,,,,,"0|i2ujjn:",9223372036854775807,b24,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@3397f701,,,,,,,,,"2021-11-14 23:03;roboduke;Changeset: ca2efb73
Author:    Richard Reingruber <rrich@openjdk.org>
Date:      2021-11-15 07:02:22 +0000
URL:       https://git.openjdk.java.net/jdk/commit/ca2efb73f59112d9be2ec29db405deb4c58dd435
;;;","2022-05-06 05:43;rrich;Fix request (17u)

I would like to backport this to jdk17u to avoid the described issues.
Applies cleanly.

The fix passed CI testing at SAP. This includes JCK and JTREG tests on the standard platforms and also on Linux/PPC64le.

I'd consider the risk of this change low. The code is only triggered if a thread
calls j.l.Thread.suspend() which is deprecated since Java 8.
;;;","2022-05-09 06:10;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk17u-dev/pull/375
Date: 2022-04-29 08:12:39 +0000;;;","2022-06-29 23:58;rrich;Fix request (11u)

Applies cleanly except for one minor conflict because of the comments on the declarations of `current_ei` and `pendingStop` not present in jdk11.

Otherwise just like 17u backport above.

TODO: the included test needs to be adapted.;;;","2022-06-30 23:26;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk11u-dev/pull/1189
Date: 2022-06-30 06:53:10 +0000;;;",,,,,,,,,,,,,,,,,,,,,
Documentation suggests there are ArbitrarilyJumpableGenerator when none,JDK-8274685,5059603,Bug,Closed,JDK,JDK,software,duke,,,P4,Fixed,gls,webbuggrp,webbuggrp,2021-09-30 15:54,2022-04-28 04:22,2023-10-01 09:57,2021-11-22 08:21,17,18,,,,,,18,core-libs,,0,dcsaw,reproducer-yes,webbug,,,,,,,,,,,,,,,,,,,"ADDITIONAL SYSTEM INFORMATION :
Windows 10 21H1 64 bit JDK 17

A DESCRIPTION OF THE PROBLEM :
Running this code:
    System.out.println(""isArbitrarilyJumpable() factories:"");
    RandomGeneratorFactory.all().filter(x->x.isArbitrarilyJumpable())
    .forEach(x->System.out.println(x.name()));
produces no generators that are arbitrarily jumpable when the documentation
https://docs.oracle.com/en/java/javase/17/docs/api/java.base/java/util/random/package-summary.html includes this text:
There is also an interface RandomGenerator.ArbitrarilyJumpableGenerator for algorithms that allow jumping along the state cycle by any user-specified distance. In this package, implementations of these interfaces include ""Xoroshiro128PlusPlus"", and ""Xoshiro256PlusPlus"".


STEPS TO FOLLOW TO REPRODUCE THE PROBLEM :
Run the code:
 System.out.println(""isArbitrarilyJumpable() factories:"");
 RandomGeneratorFactory.all().filter(x->x.isArbitrarilyJumpable())
    .forEach(x->System.out.println(x.name()));

EXPECTED VERSUS ACTUAL BEHAVIOR :
EXPECTED -
Expect there to be two factories as documented.
ACTUAL -
No factories are output, implying none are capable of arbitrary jumps.

---------- BEGIN SOURCE ----------
  public void test()
  {
    assertNotEquals(0, RandomGeneratorFactory.all().filter(x->x.isArbitrarilyJumpable()).count());
  }

---------- END SOURCE ----------

CUSTOMER SUBMITTED WORKAROUND :
None.

FREQUENCY : always


",,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8277002,,,,,,,,,,,,,,,,,,"2021-10-04 01:35;tongwan;Main.java;https://bugs.openjdk.org/secure/attachment/96630/Main.java",,,,,generic,,,,,,,,,generic,,,,,"0|i2uiwb:",9223372036854775807,b25,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@38ded199,,,,,,,Verified,,"2021-10-04 01:36;tongwan;The observations on Windows 10:
JDK 17: Failed, test failed.
JDK 18: Failed.;;;","2021-10-12 18:10;gls;I have now inspected the code. The report is correct; the documentation does say that

There is also an interface RandomGenerator.ArbitrarilyJumpableGenerator for algorithms that allow jumping along the state cycle by any user-specified distance. In this package, implementations of these interfaces include ""Xoroshiro128PlusPlus"", and ""Xoshiro256PlusPlus"".

and the code for those two algorithms says only that they implement LeapableGenerator, not ArbitrarilyJumpableGenerator.

There are two ways to correct this mismatch. One it to revise the documentation; the other is to add code so that these two algorithms can be subtypes of ArbitrarilyJumpableGenerator. Such code is already available, but it is rather complicated compared to the current implementation.;;;","2021-11-22 08:21;roboduke;Changeset: 8683de5e
Author:    Jim Laskey <jlaskey@openjdk.org>
Date:      2021-11-22 16:19:23 +0000
URL:       https://git.openjdk.java.net/jdk/commit/8683de5eda2d1a04f187073f969140245908f324
;;;","2022-04-28 04:22;isipka;documentation inspected;;;",,,,,,,,,,,,,,,,,,,,,,
Code example provided by RandomGeneratorFactory does not compile,JDK-8274683,5059601,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,jlaskey,webbuggrp,webbuggrp,2021-09-30 15:17,2022-04-27 23:27,2023-10-01 09:57,2022-04-21 06:41,17,18,,,,,,19,core-libs,,0,dcsaw,noreg-doc,webbug,,,,,,,,,,,,,,,,,,,"ADDITIONAL SYSTEM INFORMATION :
JDK17 Windows 10 21H1 64bit

A DESCRIPTION OF THE PROBLEM :
In https://docs.oracle.com/en/java/javase/17/docs/api/java.base/java/util/random/RandomGeneratorFactory.html the code provided as:
RandomGeneratorFactory<RandomGenerator> best = RandomGeneratorFactory.all()
         .sorted(Comparator.comparingInt(RandomGenerator::stateBits).reversed())
         .findFirst()
         .orElse(RandomGeneratorFactory.of(""Random""));
does not compile.  The correct code appears to include:
    .sorted(Comparator.comparingInt(RandomGeneratorFactory<RandomGenerator>::stateBits).reversed())


STEPS TO FOLLOW TO REPRODUCE THE PROBLEM :
Attempt to compile the example code provided in the documentation using JDK17.

EXPECTED VERSUS ACTUAL BEHAVIOR :
EXPECTED -
The example code should compile.
ACTUAL -
The example code does not compile.

---------- BEGIN SOURCE ----------
  public static void main(final String[] args)
  {
    RandomGeneratorFactory<RandomGenerator> best = RandomGeneratorFactory.all()
        .sorted(Comparator.comparingInt(RandomGenerator::stateBits).reversed())
        // .sorted(Comparator.comparingInt(RandomGeneratorFactory<RandomGenerator>::stateBits).reversed())  //<----- correct code
        .findFirst()
        .orElse(RandomGeneratorFactory.of(""Random""));
    System.out.println(best.name() + "" in "" + best.group() + "" was selected"");

    RandomGenerator rng = best.create();
}
---------- END SOURCE ----------

CUSTOMER SUBMITTED WORKAROUND :
Correct the example code.

FREQUENCY : always


",,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8284013,,,,,,,,,,,,,,,,,,"2021-10-04 01:23;tongwan;Main.java;https://bugs.openjdk.org/secure/attachment/96629/Main.java",,,,,generic,,,,,,,,,generic,,,,,"0|i2uivv:",9223372036854775807,b20,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@38ded199,,,,,,,,,"2021-10-04 01:19;tongwan;The observation on Windows 10:
JDK 17: Failed, compilation failed.

RandomGeneratorFactory is created since 17.;;;","2022-03-30 07:32;jlaskey;        RandomGeneratorFactory<RandomGenerator> best = RandomGeneratorFactory.all()
                .filter(rgf -> !rgf.name().equals(""SecureRandom""))
                .sorted(Comparator.comparingInt(RandomGeneratorFactory<RandomGenerator>::stateBits).reversed())
                .findFirst()
                .orElse(RandomGeneratorFactory.of(""Random""));


Is better;;;","2022-04-05 06:51;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/8108
Date: 2022-04-05 13:47:57 +0000;;;","2022-04-21 06:41;dukebot;Changeset: 4732b1d0
Author:    Jim Laskey <jlaskey@openjdk.org>
Date:      2022-04-21 13:40:02 +0000
URL:       https://git.openjdk.java.net/jdk/commit/4732b1d038d086aba31b7644c18e5db083277969
;;;",,,,,,,,,,,,,,,,,,,,,,
Dialog sometimes ignores max height,JDK-8274669,5059683,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,mhanl,mhanl,mhanl,2021-10-02 16:24,2021-10-27 15:45,2023-10-01 09:57,2021-10-25 21:33,jfx11,jfx17,,,,,,jfx18,javafx,,0,Dialog,Height,layoutChildren,,,,,,,,,,,,,,,,,,,"Dialogs sometimes ignores the max height when the pref height of the dialog content is bigger.
This will lead to a visual glitch where the dialog is flickering between the max height and the pref height.
-----
- First layout pass: The dialog will incorrectly resize to a the pref height, which is bigger than the max height.
- Second layout pass: The dialog will correctly resize to the max height
... (repeat)

--- TESTCASE SOURCE START ---
import javafx.application.Application;
import javafx.scene.control.ButtonType;
import javafx.scene.control.Dialog;
import javafx.scene.control.Label;
import javafx.scene.layout.Background;
import javafx.scene.layout.BackgroundFill;
import javafx.scene.layout.HBox;
import javafx.scene.layout.StackPane;
import javafx.scene.paint.Color;
import javafx.stage.Stage;

public class ScrollPaneApp extends Application {

    public static void run(String[] args) {
        launch(args);
    }

    @Override
    public void start(Stage primaryStage) throws Exception {
        StackPane stackPane = new StackPane();
        stackPane.setBackground(new Background(new BackgroundFill(Color.RED, null, null)));
        stackPane.setPrefHeight(700);

        Dialog<ButtonType> dialog = new Dialog<>();

        dialog.getDialogPane().setContent(stackPane);
        dialog.getDialogPane().setMaxHeight(400);

        dialog.show();
    }
}
--- TESTCASE SOURCE END---",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,generic,,,,,,,,,generic,,,,,"0|i2uje3:",9223372036854775807,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@67282485,,,,,,,,,"2021-10-25 21:33;roboduke;Changeset: 717cfdc8
Author:    Marius Hanl <mhanl@openjdk.org>
Committer: Ajit Ghaisas <aghaisas@openjdk.org>
Date:      2021-10-26 04:32:01 +0000
URL:       https://git.openjdk.java.net/jfx/commit/717cfdc85817aee57d5326e592340c849382d7a4
;;;",,,,,,,,,,,,,,,,,,,,,,,,,
(loom) VM crashes on ThreadGroup creation with a scheduler and a custom SecurityManager,JDK-8274668,5059682,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,alanb,dbessono,dbessono,2021-10-02 14:39,2021-12-21 22:32,2023-10-01 09:57,2021-12-21 22:32,repo-loom,,,,,,,repo-loom,hotspot,,0,loom,,,,,,,,,,,,,,,,,,,,,"During some experiments with the new and the legacy APIs it was found that the following code has high chances to crash JDK-loom VM .

==============
import java.security.Permission;
import java.util.List;
import java.util.concurrent.Executor;
import java.util.function.Supplier;

public class Test {
    public static void main(String... args) {
        System.setSecurityManager(new SecurityManager() {
            @Override
            public void checkAccess(ThreadGroup g) {System.out.println(""Test.checkAccess"");}
            @Override
            public void checkAccess(Thread t1) {System.out.println(""Test.checkAccess"");}
            @Override
            public void checkPermission(Permission perm) {System.out.println(""Test.checkPermission"");}
        });
        List.of(
          Thread.ofVirtual(),
          Thread.ofVirtual().scheduler(new Executor() {
                @Override public void execute(Runnable command) {
                    Thread.ofPlatform().start(command);
                }}
            )
        ).forEach(b -> b.start(() -> new ThreadGroup(""group"")));
    }
}
==============

Failure looks 100% reproducible with https://github.com/openjdk/loom/commit/8dd8404f057484c016bf9e0e4f225fc707850fb9 at least when built/run on Linux-amd64 and MacOS/ARM64

Usually the failure looks like

MacOS
#
# A fatal error has been detected by the Java Runtime Environment:
#
#  SIGSEGV (0xb) at pc=0x0000000104cdbab8, pid=51172, tid=7683
#
# JRE version: OpenJDK Runtime Environment (18.0) (build 18-internal+0-local-build)
# Java VM: OpenJDK 64-Bit Server VM (18-internal+0-local-build, mixed mode, sharing, tiered, compressed oops, compressed class ptrs, g1 gc, bsd-aarch64)
# Problematic frame:
# V  [libjvm.dylib+0x4dbab8]  _ZN16java_lang_Thread17get_thread_statusEP7oopDesc+0x24
#
# No core dump will be written. Core dumps have been disabled. To enable core dumping, try ""ulimit -c unlimited"" before starting Java again
#
# An error report file with more information is saved as:
# ............/jdk-loom/build/macosx-aarch64-server-release/images/jdk/bin/hs_err_pid51172.log
[thread 24835 also had an error]
#
# If you would like to submit a bug report, please visit:
#   https://bugreport.java.com/bugreport/crash.jsp
#

Linux
#
# A fatal error has been detected by the Java Runtime Environment:
#
#  SIGSEGV (0xb) at pc=0x00007f97c537ec4c, pid=1958572, tid=1958573
#
# JRE version: OpenJDK Runtime Environment (18.0) (build 18-internal+0-2021-10-02-1445097.jckqausr.openjdk)
# Java VM: OpenJDK 64-Bit Server VM (18-internal+0-2021-10-02-1445097.jckqausr.openjdk, mixed mode, sharing, tiered, compressed oops, compressed class ptrs, g1 gc, linux-amd64)
# Problematic frame:
# V  [libjvm.so+0x840c4c]  java_lang_Thread::get_thread_status(oopDesc*)+0x1c
#
#
# An error report file with more information is saved as:
# .../hs_err_pid1958572.log
[thread 1958594 also had an error]
#
# If you would like to submit a bug report, please visit:
#   https://bugreport.java.com/bugreport/crash.jsp
#


In addition to that approximately once out of 10-20 attempts (at least on an Apple M1 system) the failure looks like :

Exception in thread ""<unnamed>"" Exception in thread ""<unnamed>"" Exception in thread ""Thread-0"" java.lang.NoClassDefFoundError: Could not initialize class jdk.internal.misc.Blocker
	at java.base/java.io.FileOutputStream.write(FileOutputStream.java:365)
	at java.base/java.io.BufferedOutputStream.flushBuffer(BufferedOutputStream.java:126)
	at java.base/java.io.BufferedOutputStream.lockedFlush(BufferedOutputStream.java:251)
	at java.base/java.io.BufferedOutputStream.flush(BufferedOutputStream.java:239)
	at java.base/java.io.PrintStream.lockedWrite(PrintStream.java:650)
	at java.base/java.io.PrintStream.write(PrintStream.java:628)
	at java.base/sun.nio.cs.StreamEncoder.writeBytes(StreamEncoder.java:308)
	at java.base/sun.nio.cs.StreamEncoder.implFlushBuffer(StreamEncoder.java:404)
	at java.base/sun.nio.cs.StreamEncoder.lockedFlushBuffer(StreamEncoder.java:126)
	at java.base/sun.nio.cs.StreamEncoder.flushBuffer(StreamEncoder.java:113)
	at java.base/java.io.OutputStreamWriter.flushBuffer(OutputStreamWriter.java:173)
	at java.base/java.io.PrintStream.lockedWrite(PrintStream.java:817)
	at java.base/java.io.PrintStream.write(PrintStream.java:795)
	at java.base/java.io.PrintStream.print(PrintStream.java:1007)
	at java.base/java.lang.ThreadGroup.uncaughtException(ThreadGroup.java:685)
	at java.base/java.lang.ThreadGroup.uncaughtException(ThreadGroup.java:678)
	at java.base/java.lang.Thread.dispatchUncaughtException(Thread.java:2959)
	at java.base/java.lang.VirtualThread.run(VirtualThread.java:314)
	at java.base/java.lang.VirtualThread$VThreadContinuation.lambda$new$0(VirtualThread.java:179)
	at java.base/jdk.internal.vm.Continuation.enter0(Continuation.java:374)
	at java.base/jdk.internal.vm.Continuation.enter(Continuation.java:367)
Caused by: java.lang.ExceptionInInitializerError: Exception java.lang.BootstrapMethodError: bootstrap method initialization exception [in thread ""ForkJoinPool-1-worker-1""]
	at java.base/java.lang.invoke.BootstrapMethodInvoker.invoke(BootstrapMethodInvoker.java:188)
	at java.base/java.lang.invoke.CallSite.makeSite(CallSite.java:315)
	at java.base/java.lang.invoke.MethodHandleNatives.linkCallSiteImpl(MethodHandleNatives.java:281)
	at java.base/java.lang.invoke.MethodHandleNatives.linkCallSite(MethodHandleNatives.java:271)
	at java.base/jdk.internal.misc.Blocker.<clinit>(Blocker.java:59)
	at java.base/java.io.FileOutputStream.write(FileOutputStream.java:365)
	at java.base/java.io.BufferedOutputStream.flushBuffer(BufferedOutputStream.java:126)
	at java.base/java.io.BufferedOutputStream.lockedFlush(BufferedOutputStream.java:251)
	at java.base/java.io.BufferedOutputStream.flush(BufferedOutputStream.java:239)
	at java.base/java.io.PrintStream.lockedWrite(PrintStream.java:650)
	at java.base/java.io.PrintStream.write(PrintStream.java:628)
	at java.base/sun.nio.cs.StreamEncoder.writeBytes(StreamEncoder.java:308)
	at java.base/sun.nio.cs.StreamEncoder.implFlushBuffer(StreamEncoder.java:404)
	at java.base/sun.nio.cs.StreamEncoder.lockedFlushBuffer(StreamEncoder.java:126)
	at java.base/sun.nio.cs.StreamEncoder.flushBuffer(StreamEncoder.java:113)
	at java.base/java.io.OutputStreamWriter.flushBuffer(OutputStreamWriter.java:173)
	at java.base/java.io.PrintStream.lockedWriteln(PrintStream.java:854)
	at java.base/java.io.PrintStream.writeln(PrintStream.java:831)
	at java.base/java.io.PrintStream.println(PrintStream.java:1173)
	at Test$1.checkAccess(Test.java:10)
	at java.base/java.lang.ThreadGroup.checkAccess(ThreadGroup.java:344)
	at java.base/java.lang.ThreadGroup.checkParentAccess(ThreadGroup.java:120)
	at java.base/java.lang.ThreadGroup.<init>(ThreadGroup.java:172)
	at java.base/java.lang.ThreadGroup.<init>(ThreadGroup.java:146)
	at Test.lambda$main$0(Test.java:23)
	at java.base/java.lang.VirtualThread.run(VirtualThread.java:312)
	... 3 more


",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2ujdv:",9223372036854775807,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,,,"2021-10-03 01:07;alanb;I expect this test will eventually run into the same issues as JDK-8155659, meaning a BootstrapMethodError caused by a stack overflow, but this time because the java.io implementation is using lambda expressions so possible that linking of call sites that end up invoking the SM again. In the mean-time, the SIGSEGV is that the thread status is being accessed from the ""current thread"" before its Thread object is fully initialized. This arises here when DestroyJavaVM attaches and the construction of the Thread object is calling into the Test's permission check and essentially running arbitrary code before the Thread is fully initialized.;;;","2021-10-10 23:42;alanb;It no longer crashes but we still have the issue with JNI attached threads (and DestroyJavaVM) when running with a SM in that code is executing in the context of the thread before the Thread object is fully initialized. Given than the SM is deprecated and will disabled by default very soon then it's not clear it's worth trying to fix this 20+ year old issue.;;;","2021-12-04 23:13;alanb;The first release is unlikely to have support for custom schedulers so the ""scheduler"" method in the test no longer exists and the specific issue report here does not happen. However, there the underlying issue (which is a 20 year issue) of calling the SM on a JNI-attached Thread that is not fully initialized still exists.;;;","2021-12-21 22:32;alanb;This issue no longer exists in the loom repo so I'm closing this bug. If a JNI thread attaches then it will not call out to the SecurityManager during the Thread constructor. This removes the potential for a SM to execute arbitrary code in the context of an uninitialised Thread.;;;",,,,,,,,,,,,,,,,,,,,,,
Add support for compress/expand api methods,JDK-8274664,5059671,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,sviswanathan,sviswanathan,sviswanathan,2021-10-01 15:09,2022-04-19 11:52,2023-10-01 09:57,2021-10-04 15:57,,,,,,,,,core-libs,,0,vectorapi,,,,,,,,,,,,,,,,,,,,,Add support for the cross lane operations to compress/expand the lane elements of a vector selecting lanes under the control of a mask. The remaining lanes of the destination vector could be either set to zero or get the value from corresponding elements of the background vector.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8285050,,,,,,,,,,,,,,,,,,,,,,,,"0|i2ujbf:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
ISO 4217 Amendment 170 Update,JDK-8274658,5059661,Bug,Closed,JDK,JDK,software,duke,,,P3,Fixed,naoto,naoto,naoto,2021-10-01 10:15,2022-04-08 03:44,2023-10-01 09:57,2021-10-04 08:08,,,,,,,,18,core-libs,,0,iso4217,jdk11u-fix-request,jdk11u-fix-yes,jdk13u-fix-request,jdk13u-fix-yes,jdk15u-fix-request,jdk15u-fix-yes,jdk17u-fix-request,jdk17u-fix-yes,jdk8u-fix-request,jdk8u-fix-yes,,,,,,,,,,,"The Bolívar Soberano (VES) is redenominated by removing six zeros from the denominations. A new currency code VED/926 representing the new valuation (1,000,000 times old VES/928) is introduced on 1 October 2021 for any internal needs during the redenomination process, but is not replacing VES as the official currency code. The Central Bank of Venezuela will not adopt the new codes in the local system,
VES/928 remains in use.
The actual currency code VES/928 remains the valid code after 1 October 2021 to use in any future
transactions to indicate the redenominated Bolívar Soberano.
Until further notice, VES/928 and VED/926 remain on ""List one: Currency, fund and precious metal
codes"".",,,,,,,,,,,JDK-8280276,JDK-8275114,JDK-8279305,JDK-8275113,JDK-8279576,JDK-8275580,JDK-8275115,JDK-8283871,JDK-8280278,,,,,,,,,,,,,,,,,,,,,,,,,,"2021-10-01 10:16;naoto;dl_currency_iso_amendment_170.pdf;https://bugs.openjdk.org/secure/attachment/96623/dl_currency_iso_amendment_170.pdf",,,,,generic,,,,,,,,,generic,,,,,"0|i2uj97:",9223372036854775807,b18,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@7644fb4c,,,,,,,Verified,,"2021-10-04 08:08;roboduke;Changeset: f2404d60
Author:    Naoto Sato <naoto@openjdk.org>
Date:      2021-10-04 15:06:48 +0000
URL:       https://git.openjdk.java.net/jdk/commit/f2404d60de2b58c590bf885f5cce50c289073673
;;;","2021-12-20 05:01;goetz;Fix request [17u]

I backport this for parity with 17.0.3-oracle.
Low risk, change is required.
Clean backport except for @bug section in test. 
SAP nightly tests all passed.;;;","2021-12-20 05:03;roboduke;A pull request was submitted for review.

URL: https://git.openjdk.java.net/jdk17u-dev/pull/9
Date: 2021-12-20 12:58:18 +0000
;;;","2022-01-04 08:04;goetz;Fix request [11u]

I backport this for parity with 11.0.15-oracle.
Needed update.
Backport from jdk17u-dev needed trivial resolve in @bug
tag of test, marked as /clean.
SAP nightly testing passes.;;;","2022-01-04 08:21;roboduke;A pull request was submitted for review.

URL: https://git.openjdk.java.net/jdk11u-dev/pull/736
Date: 2022-01-04 16:16:45 +0000
;;;","2022-01-19 06:51;yan;Fix request (15u)

backport to 15u is almost clean: the bugID lists in two tests slightly differ, that's all.
All relevant tests do pass.;;;","2022-01-19 06:54;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk15u-dev/pull/157
Date: 2022-01-19 14:48:56 +0000;;;","2022-01-19 07:21;yan;Fix request (13u)

backport to 13u is almost as clean as to 15u with one more copyright header to adjust.
Will set the label once the tests pass.;;;","2022-01-19 07:34;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk13u-dev/pull/310
Date: 2022-01-19 15:30:13 +0000;;;","2022-03-28 07:29;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk8u-dev/pull/24
Date: 2022-03-28 14:24:42 +0000;;;","2022-03-28 13:18;andrew;Fix Request [8u]:

Another currency data update, already in other update releases.
Patch applied mostly clean and was reviewed by Severin Gehwolf. 
;;;","2022-04-08 03:44;sqetools;verified;;;",,,,,,,,,,,,,,
Possible race in FontDesignMetrics.KeyReference.dispose,JDK-8274651,5059652,Bug,Resolved,JDK,JDK,software,duke,,,P5,Fixed,aturbanov,aturbanov,aturbanov,2021-10-01 08:56,2021-10-11 15:45,2023-10-01 09:57,2021-10-04 17:54,16,17,18,,,,,18,client-libs,,0,,,,,,,,,,,,,,,,,,,,,,"Possible race condition could happen if another thread put value into 'metricsCache' by the same key.

        /* It is possible that since this reference object has been
        /* It is possible that since this reference object has been
         * enqueued, that a new metrics has been put into the table
         * enqueued, that a new metrics has been put into the table
         * for the same key value. So we'll test to see if the table maps
         * for the same key value. So we'll test to see if the table maps
         * to THIS reference. If its a new one, we'll leave it alone.
         * to THIS reference. If it's a new one, we'll leave it alone.
         * It is possible that a new entry comes in after our test, but
         * it is unlikely and if this were a problem we would need to
         * synchronize all 'put' and 'remove' accesses to the cache which
         * I would prefer not to do.
         */
         */
        public void dispose() {
        public void dispose() {
            if (metricsCache.get(key) == this) {
            metricsCache.remove(key, this);
                metricsCache.remove(key);
            }
        }

We can use `ConcurrentHashMap.remove(key, value)` method to avoid it.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2uj77:",9223372036854775807,b18,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4b09ce31,,,,,,,,,"2021-10-04 17:54;roboduke;Changeset: e43f540c
Author:    Andrey Turbanov <turbanoff@gmail.com>
Committer: Sergey Bylokhov <serb@openjdk.org>
Date:      2021-10-05 00:53:17 +0000
URL:       https://git.openjdk.java.net/jdk/commit/e43f540cde58ee973b97a943f14d3c60e064b801
;;;",,,,,,,,,,,,,,,,,,,,,,,,,
Improve logic for acquiring by reference parameters in downcall handles,JDK-8274648,5059644,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,mcimadamore,mcimadamore,mcimadamore,2021-10-01 07:36,2021-10-05 06:19,2023-10-01 09:57,2021-10-05 06:19,repo-panama,,,,,,,,tools,,0,foreign-memaccess+abi,,,,,,,,,,,,,,,,,,,,,"To ensure safety w.r.t. scope closure when calling downcall method handles, it is necessary to acquire by-reference parameters. When multiple by-reference parameters are used, if they all share the same scope, only one acquire operation is necessary. The current implementation adopts a naive approach where each argument is acquired an released independently, so, even when working with multiple parameters backed by same scope, the cost of acquire/release will increase linearly with the number of parameters passed by reference.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2uj5f:",9223372036854775807,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@2251e2f8,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
jdk/jshell/CommandCompletionTest.java fails with NoSuchElementException after JDK-8271287,JDK-8274642,5059637,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,clanger,clanger,clanger,2021-10-01 05:35,2021-11-05 00:42,2023-10-01 09:57,2021-10-05 14:08,18,,,,,,,18,tools,,0,jdk11u-fix-request,jdk11u-fix-yes,jdk17u-fix-request,jdk17u-fix-yes,testbug,,,,,,,,,,,,,,,,,"After integration of JDK-8271287, we see an issue with jdk/jshell/CommandCompletionTest.java in some of our CI systems. The failure logs look like this:
...
config ReplToolTesting.setUp(): success
test CommandCompletionTest.testUserHome(): failure
java.util.NoSuchElementException: No value present
	at java.base/java.util.Optional.get(Optional.java:143)
	at CommandCompletionTest.testUserHome(CommandCompletionTest.java:340)
...

This occurs when user.home does not contain any files that match CLASSPATH_FILTER, e.g. in some of our CI images where user.home contains nothing but very few .* configuration files. CLASSPATH filter would require some directory or .zip or .jar files.",,,,,,,,,,,JDK-8274959,JDK-8274957,JDK-8276344,,,,,,,,,,,,,,,,,,,,,,JDK-8271287,,,,,,,,,,,,,,,,,,,,,b16,18,,,,,,,"0|i2uj3v:",9223372036854775807,b18,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@ef6d34f,,,,,,,,,"2021-10-05 14:08;roboduke;Changeset: 47262670
Author:    Christoph Langer <clanger@openjdk.org>
Date:      2021-10-05 21:06:52 +0000
URL:       https://git.openjdk.java.net/jdk/commit/47262670f371923a704ec521da40010c2a46be5a
;;;","2021-10-07 06:01;mdoerr;Fix Request (11u):
Follow-up fix for JDK-8271287 which was backported in 11.0.14-oracle. We should have both fixes in OpenJDK 11.0.14, too. Applies cleanly.;;;","2021-10-07 06:27;mdoerr;Fix Request (17u):
Follow-up fix for JDK-8271287 which was backported to 17.0.2. See comments there. Applies cleanly.;;;",,,,,,,,,,,,,,,,,,,,,,,
Cleanup unnecessary null comparison before instanceof check in java.desktop,JDK-8274640,5059635,Bug,Resolved,JDK,JDK,software,duke,,,P5,Fixed,aturbanov,aturbanov,aturbanov,2021-10-01 04:48,2021-12-08 17:45,2023-10-01 09:57,2021-12-03 05:05,16,17,18,,,,,18,client-libs,,0,,,,,,,,,,,,,,,,,,,,,,"Update code checks both non-null and instance of a class in java.desktopmodule classes.
The checks and explicit casts could also be replaced with pattern matching for the instanceof operator. 
For example the following code:

        if (parent != null) {
            if (parent instanceof ScreenMenu) {
                final ScreenMenu sm = (ScreenMenu)parent;
                sm.setChildVisible(fInvoker, b);
            }
        }


Can be simplified to:
    
        if (parent instanceof ScreenMenu sm) {
            sm.setChildVisible(fInvoker, b);
        }",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2uj3f:",9223372036854775807,b27,,,,,,,,,,,,"2021-12-03 05:05;roboduke;Changeset: 18c54b4e
Author:    Andrey Turbanov <turbanoff@gmail.com>
Committer: Alexey Ivanov <aivanov@openjdk.org>
Date:      2021-12-03 13:04:26 +0000
URL:       https://git.openjdk.java.net/jdk/commit/18c54b4e1ade2ea5531054ed19441d5bff84fcdc
;;;",,,,,,,,,,,,,,,,,,,,,,,,,
Provide a way to disable warnings for cross-modular links,JDK-8274639,5059633,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,hannesw,hannesw,hannesw,2021-10-01 04:23,2022-09-27 00:53,2023-10-01 09:57,2021-12-02 01:41,11,15,16,17,,,,18,tools,,0,,,,,,,,,,,,,,,,,,,,,,"Since JDK-8240169 javadoc is able to create external links to libraries documented with ""mismatching"" modularity.  However, a warning such as the following is generated when this happens: 

warning: The code being documented uses packages in the unnamed module, but the packages defined in <URL> are in named modules.

This is a problem for projects using the -Werror option to treat warnings as errors. The message should probably be purely informational and not a warning. 

Update: It was decided that the warning should remain as default behaviour, but it should be possible to disable it via a new option.",,,,,,,,,,,JDK-8294353,,,,,,,,,,,,,,,,JDK-8274969,,,,,,,,,,,,,JDK-8278077,,,,,,,,,,generic,,,,,,,,,generic,,,,,"0|i2uj2z:",9223372036854775807,b27,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@7900061a,,,,,,,,,"2021-10-01 08:07;jjg;Instead of reducing the warning level for all users, it may be better to provide an option to disable this specific warning for users that know that the links are acceptable.
;;;","2021-10-04 04:09;cstein;In order to make that said option more powerful/flexible, let's take it a parameter defining the kind of action the user wants to happen when cross-modular links are generated. For example:

    --link-modularity-mismatch=parameter

With valid values for parameter:

- warn (current implementation and default value)
- info (as suggested in this issue description)
- permit/ignore/quiet (print nothing);;;","2021-10-04 06:34;hannesw;While the generated links should usually be valid, I agree the warning may be useful for some users (those controlling the documentation they link to, or those able to choose between modular and non-modular versions). So leaving the warning but making it optional does make some sense. I'm not sure we need the fine-grained verbosity control. 

Finding a concise option name may be a non-trivial task. `link-modularity-mismatch` is already quite long, and it doesn't yet define what should be done about it.;;;","2021-12-02 01:41;roboduke;Changeset: 103da8fa
Author:    Hannes Wallnöfer <hannesw@openjdk.org>
Date:      2021-12-02 09:40:24 +0000
URL:       https://git.openjdk.java.net/jdk/commit/103da8fae12a2aaff1a02a219690ce89fc098641
;;;","2022-09-23 02:25;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/723
Date: 2022-09-23 07:05:31 +0000;;;","2022-09-23 02:29;apavlyutkin;Fix request (17u)

The patch adds the ability to disable Link Modularity Mismatch warnings and so projects using cross-modular links can be compiled with -Werror flag.

Original patch applied cleanly.

Verification (amd64/20.04LTS): test/langtools/jdk/javadoc/doclet/testLinkOption/TestLinkOptionWithModule.java
Regression (amd64/20.04LTS): test/langtools/jdk/javadoc;;;",,,,,,,,,,,,,,,,,,,,
Possible pointer overflow in PretouchTask chunk claiming,JDK-8274632,5059624,Bug,Closed,JDK,JDK,software,duke,,,P2,Fixed,kbarrett,kbarrett,kbarrett,2021-10-01 01:32,2023-05-17 08:30,2023-10-01 09:57,2021-10-05 01:08,17,18,,,,,,18,hotspot,,0,amazon-interest,,,,,,,,,,,,,,,,,,,,,"PretouchTask unconditionally (atomically) adds _chunk_size to _cur_addr to claim the next chunk. That addition can overflow. There is followup code that attempts to detect and handle overflow, but since pointer arithmetic overflow is UB, that isn't reliable.
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2uj0z:",9223372036854775807,b18,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6b00f96c,,,,,,,Verified,,"2021-10-05 01:08;roboduke;Changeset: a914ee72
Author:    Kim Barrett <kbarrett@openjdk.org>
Date:      2021-10-05 08:07:02 +0000
URL:       https://git.openjdk.java.net/jdk/commit/a914ee72167f642b76b1c1cdddd7ff0698d061cc
;;;",,,,,,,,,,,,,,,,,,,,,,,,,
assert(false) failed: bad AD file with -XX:UseKNLSetting,JDK-8274631,5059623,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,jbhateja,jbhateja,jbhateja,2021-10-01 01:29,2022-02-06 23:30,2023-10-01 09:57,2021-10-01 12:37,repo-panama,,,,,,,repo-panama,hotspot,,0,vectorIntrinsics,vectorIntrinsics+mask,,,,,,,,,,,,,,,,,,,,test/hotspot/jtreg/compiler/vectorapi/VectorMaskCastTest.java crashes during compilation over KNL target.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8275025,,,,,JDK-8272971,,,,,,,,,,x86,,,,,,,,,,,,,,"0|i2uj0r:",9223372036854775807,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Back out the commit done for JDK-8274628 as the folder structure is wrong,JDK-8274629,5059618,Bug,Resolved,JDK,JDK,software,duke,,,P5,Fixed,aj,aj,aj,2021-10-01 00:56,2021-11-01 22:19,2023-10-01 09:57,2021-10-01 01:06,,,,,,,,8u321,client-libs,,0,noreg-self,,,,,,,,,,,,,,,,,,,,,Back out the commit done for JDK-8274628 as the folder structure is wrong,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2uizn:",9223372036854775807,b01,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@568a5b31,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Search field placeholder behavior,JDK-8274625,5059300,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,hannesw,webbuggrp,webbuggrp,2021-09-27 01:32,2021-10-11 15:47,2023-10-01 09:57,2021-10-06 02:30,11,,,,,,,18,tools,,0,dcsad,reproducer-yes,webbug,,,,,,,,,,,,,,,,,,,"A DESCRIPTION OF THE PROBLEM :
Documentation site, generated by the by javadoc tool, has a Search field, in wich the placeholder (""Search"") is not a real placeholder, and this causes issues.

STEPS TO FOLLOW TO REPRODUCE THE PROBLEM :
Generate documentation site and see the ""Search"" field. It behaves strangely. As an example, clear and start typing ""SearchTerm"". 

EXPECTED VERSUS ACTUAL BEHAVIOR :
EXPECTED -
Field must be contain ""SearchTerm"". A real HTML placeholder should be used.
ACTUAL -
The field will be erased, and finally contains only ""Term"".

CUSTOMER SUBMITTED WORKAROUND :
Type ""Term"" first, then type ""Search"" before it. However, no (easy) way to search for ""Search"".

FREQUENCY : always


",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,generic,,,,,,,,,generic,,,,,"0|i2uh0z:",9223372036854775807,b18,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@7900061a,,,,,,,,,"2021-10-01 00:12;adev;As soon as we type keyword ""SearchTerm"" in the Search box in javadoc created by the javadoc tool, search word gets truncated and the rest of the word retains. ;;;","2021-10-01 02:24;hannesw;The ""Search"" placeholder is an awkward workaround caused by missing support of HTML5 ""placeholder"" attribute in some browsers. 

I tried to fix this as part of JDK-8221366 in March 2019 but found some problems in old Windows browsers:

https://mail.openjdk.java.net/pipermail/javadoc-dev/2019-March/000987.html

Maybe now is a good time to go ahead with this.;;;","2021-10-06 02:30;roboduke;Changeset: cdf89304
Author:    Hannes Wallnöfer <hannesw@openjdk.org>
Date:      2021-10-06 09:28:37 +0000
URL:       https://git.openjdk.java.net/jdk/commit/cdf89304eafce58e66127d4e277f5fcaf07c9954
;;;",,,,,,,,,,,,,,,,,,,,,,,
NullPointerException because listenAddress[0] is null,JDK-8274621,5059612,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,amenkov,dholmes,dholmes,2021-09-30 23:15,2021-11-03 18:02,2023-10-01 09:57,2021-10-29 14:39,18,,,,,,,18,core-svc,,0,tier5,,,,,,,,,,,,,,,,,,,,,"Test: com/sun/jdi/RedefineAddPrivateMethod.java

----------System.err:(19/1478)----------
[debuggee] Java HotSpot(TM) 64-Bit Server VM warning: Option AllowRedefinitionToAddDeleteMethods was deprecated in version 13.0 and will likely be removed in a future release.
java.lang.NullPointerException: Cannot invoke ""jdk.test.lib.JDWP$ListenAddress.transport()"" because ""listenAddress[0]"" is null
	at lib.jdb.Debuggee.<init>(Debuggee.java:135)
	at lib.jdb.Debuggee$Launcher.launch(Debuggee.java:117)
	at lib.jdb.Debuggee$Launcher.launch(Debuggee.java:120)
	at lib.jdb.JdbTest.setup(JdbTest.java:117)
	at lib.jdb.JdbTest.run(JdbTest.java:94)
	at RedefineAddPrivateMethod.main(RedefineAddPrivateMethod.java:54)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at com.sun.javatest.regtest.agent.MainWrapper$MainThread.run(MainWrapper.java:127)
	at java.base/java.lang.Thread.run(Thread.java:833)",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8022221,,,,,,,,,,x86_64,,,,,,,,,os_x,,,,,"0|i2uiyb:",9223372036854775807,b22,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@3397f701,,,,,,,,,"2021-10-01 16:02;amenkov;Looks like we have a race between stdout and stderr of debugee process.
[debuggee] Listening for transport dt_socket at address: 59530  <= stdout
[debuggee] Java HotSpot(TM) 64-Bit Server VM warning: Option AllowRedefinitionToAddDeleteMethods was deprecated in version 13.0 and will likely be removed in a future release.  <= stderr

ProcessTools.startProcess spec says:
     * @param linePredicate  The {@linkplain Predicate} to use on the STDOUT
     *                       Used to determine the moment the target app is
     *                       properly warmed-up.
     *                       It can be null - in that case the warmup is skipped.
But actually it's used for both stdout and stderr:
        if (linePredicate != null) {
            StreamPumper.LinePump pump = new StreamPumper.LinePump() {
                @Override
                protected void processLine(String line) {
                    if (latch.getCount() > 0 && linePredicate.test(line)) {
                        latch.countDown();
                    }
                }
            };
            stdout.addPump(pump);
            stderr.addPump(pump);
        } else {

stdout and stderr are handled by different threads and we have a race:
stdout thread:
  - latch.getCount() > 0  <= return true
  - linePredicate.test(line) <= return true;
stderr thread:
  - latch.getCount() <= returns true; (latch.countDown() is not yet executed on stdout thread)
  - linePredicate.test(line) <= called again

This was introduced by JDK-8022221
Looks like test/sun/management/jmxremote/startstop/JMXStartStopTest.java need to analyze stderr as well (in some cases it expects exception message);;;","2021-10-04 13:38;amenkov;Use ""warm-up"" predicate to catch error output does not look good in general.
JMXStartStopTest.java analyzes stderr output in output consumer, so it does not need it in warmup predicate.
;;;","2021-10-05 12:42;amenkov;test/hotspot/jtreg/serviceability/sa/sadebugd/SADebugDTest.java requires stderr in warmup predicate.;;;","2021-10-27 15:59;cjplummer;So when the race happens, does the test fail because the extra linePredicate.test(line) call consumes a line of output that the test is expecting later?;;;","2021-10-28 12:00;amenkov;[~cjplummer] No. Predicate sets a variable which is used later in the test (listening address). Extra call of the predicate in other thread (stderr) overrides the value.
So we can update this test to handle the race, but actually processTools.startProcess already tries to avoid extra predicate calls (but not good enough) and other tests also don't expect race like this, so it looks better to fix processTools.startProcess;;;","2021-10-29 14:39;roboduke;Changeset: 5bbc8d3c
Author:    Alex Menkov <amenkov@openjdk.org>
Date:      2021-10-29 21:38:24 +0000
URL:       https://git.openjdk.java.net/jdk/commit/5bbc8d3cb2ce487b367ee1a621d78699c9b30100
;;;",,,,,,,,,,,,,,,,,,,,
resourcehogs/serviceability/sa/TestHeapDumpForLargeArray.java is timing out,JDK-8274620,5059611,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,lzang,dholmes,dholmes,2021-09-30 23:10,2021-10-18 12:54,2023-10-01 09:57,2021-10-10 18:58,18,,,,,,,18,hotspot,,0,tencent-interest,tier3,tier5,,,,,,,,,,,,,,,,,,,"Seen numerous times in the CI over the past couple of days:

resourcehogs/serviceability/sa/TestHeapDumpForLargeArray.java

----------System.out:(22/2437)----------
Target JDK is not signed.
Command line: ['/System/Volumes/Data/mesos/work_dir/jib-master/install/jdk-18+17-992/macosx-x64-debug.jdk/jdk-18/fastdebug/bin/java' '-XX:MaxRAMPercentage=4.16667' '-Djava.io.tmpdir=/System/Volumes/Data/mesos/work_dir/slaves/a2dc162d-743b-4800-9e92-31f85abb45b1-S4169/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/e3dedbc4-6e82-4da2-96f1-761536eb8ce1/runs/18f4be6f-c840-4113-b0e9-d53b45ab85dd/testoutput/test-support/jtreg_open_test_hotspot_jtreg_hotspot_misc/tmp' '-XX:+UsePerfData' '-Xmx8g' '-cp' '/System/Volumes/Data/mesos/work_dir/slaves/a2dc162d-743b-4800-9e92-31f85abb45b1-S4169/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/e3dedbc4-6e82-4da2-96f1-761536eb8ce1/runs/18f4be6f-c840-4113-b0e9-d53b45ab85dd/testoutput/test-support/jtreg_open_test_hotspot_jtreg_hotspot_misc/classes/0/resourcehogs/serviceability/sa/TestHeapDumpForLargeArray.d:/System/Volumes/Data/mesos/work_dir/slaves/a2dc162d-743b-4800-9e92-31f85abb45b1-S4169/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/e3dedbc4-6e82-4da2-96f1-761536eb8ce1/runs/18f4be6f-c840-4113-b0e9-d53b45ab85dd/testoutput/test-support/jtreg_open_test_hotspot_jtreg_hotspot_misc/classes/0/test/lib' 'LingeredAppWithLargeArray' '81aef759-8df5-4776-9aa4-27447162a6bd.lck']
Adding 'sudo -E -n' to the command.
sudo -E -n /System/Volumes/Data/mesos/work_dir/jib-master/install/jdk-18+17-992/macosx-x64-debug.jdk/jdk-18/fastdebug/bin/jhsdb jmap --binaryheap --dumpfile LargeArrayHeapDump.bin --pid 91714
[2021-09-28T20:00:29.659094Z] Gathering output for process 91724
Timeout refired 7200 times
[2021-09-28T22:02:46.989901Z] Waiting for completion for process 91724
[2021-09-28T22:02:46.990018Z] Waiting for completion finished for process 91724
Output and diagnostic info for process 91724 was saved into 'pid-91724-output.log'
[2021-09-28T22:02:46.996445Z] Waiting for completion for process 91724
[2021-09-28T22:02:46.996536Z] Waiting for completion finished for process 91724
Attaching to process ID 91714, please wait...
Debugger attached successfully.
Server compiler detected.
JVM version is 18-ea+17-992
heap written to LargeArrayHeapDump.bin
WARNING: Cannot dump array of type int with length 1073741823; truncating to length 1073741819
WARNING: Cannot dump array of type int with length 1073741823; truncating to length 1073741819

 LingeredApp stdout: [];
 LingeredApp stderr: []
 LingeredApp exitValue = 0
----------System.err:(1/15)----------
STATUS:Passed.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8269685,,,,,,,,,,x86_64,,,,,,,,,os_x,,,,,"0|i2uiy3:",9223372036854775807,b19,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@714e388c,,,,,,,,,"2021-10-05 10:35;cjplummer;21 failures since Sep 28th, all OSX, variety of hosts running 10.15.7 and 11.6.

It seems to always fail in tier3 and tier5, but pass in tier8. The test has timeout=1800, and tier3 and tier5 use timeoutfactor=4, so that's 7200 seconds, or 2 hours, which is when we see the timeout occur. Tier8 uses timeoutfactor=10, and I'm seeing this test always passing in tier8 after about 2 hours, although in many cases well over that, for example 2.5 hours. However, I don't think giving the test more time is necessarily the answer since before the failures started, it used to only take a few minutes to run, so first I need to find out why it is now taking a lot longer.;;;","2021-10-05 10:56;cjplummer;Seems to be due to JDK-8269685. I'm seeing a pretty big increase in the time this takes on all platforms, but normally still takes well under 1 hr so they don't time out.

[~lzang] Can you have a look at this?;;;","2021-10-05 14:28;dcubed;[~cjplummer] - I'm seeing 14 CI failures linked to this bug ID and all of those
are in Tier5 on macosx-x64. That's a high enough count where I want to
ProblemList this test on macosx-64.;;;","2021-10-05 14:31;cjplummer;Yes, please do.;;;","2021-10-05 16:51;lzang;I will take a look at it.;;;","2021-10-07 23:07;lzang;The root cause is that JDK-8269685 missed the use of BufferedOutputStream. 
The fix is https://github.com/openjdk/jdk/pull/5860.

Thanks!;;;","2021-10-10 18:58;roboduke;Changeset: 5ecc99bb
Author:    Lin Zang <lzang@openjdk.org>
Date:      2021-10-11 01:56:34 +0000
URL:       https://git.openjdk.java.net/jdk/commit/5ecc99bbf55e631b5bfa07e2c36b38e820682363
;;;",,,,,,,,,,,,,,,,,,,
Fix jaxp/javax/xml/jaxp/unittest/transform/SurrogateTest.java test,JDK-8274606,5059591,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,akasko,akasko,akasko,2021-09-30 11:14,2023-07-06 14:23,2023-10-01 09:57,2021-10-04 06:35,18,,,,,,,18,xml,,0,jdk11u-fix-request,jdk11u-fix-yes,jdk17u-fix-request,jdk17u-fix-SQE-ok,jdk17u-fix-yes,testbug,ursqe-triaged,,,,,,,,,,,,,,,"jaxp/javax/xml/jaxp/unittest/transform/SurrogateTest.java test introduced in JDK-8268457 contains minor flaws that prevents it to actually verify the code change:

1. compareWith* helper methods are used without Assert.assertTrue() wrapping, so they are effectively ignored

2. this.getClass().getResourceAsStream() is used to load test input data, it actually returns null in test run, so transformation is done without input data

Note, that SurrogateTest.zip reproducer attached to JDK-8268457 is valid and fully functional, problems likely were introduced when it was adapted into test.",,,,,,,,,,,JDK-8277270,JDK-8277063,JDK-8311603,,,,,,,,,,,,,,,,,,,,,,JDK-8268457,,,,,,,,,,,,,,,generic,,,,,,b04,18,,generic,,,,,"0|i2uitn:",9223372036854775807,b18,,,,,,,,,,,,"2021-10-04 06:35;roboduke;Changeset: 7eb0372e
Author:    Alex Kasko <akasko@openjdk.org>
Committer: Aleksey Shipilev <shade@openjdk.org>
Date:      2021-10-04 12:38:34 +0000
URL:       https://git.openjdk.java.net/jdk/commit/7eb0372e55f23275b12470593adc97f1b79bc965
;;;","2021-11-10 03:07;akasko;Fix request (17u)

Clean backport of a JAXP test fix.;;;","2023-06-06 02:49;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk11u-dev/pull/1934
Date: 2023-06-06 09:31:33 +0000;;;","2023-06-25 18:03;myano;Fix request (11u)

Clean backport of a JAXP test fix.;;;",,,,,,,,,,,,,,,,,,,,,,
Fix predicate guarantees on returned values in (Doc)SourcePositions,JDK-8274605,5059590,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,prappo,prappo,prappo,2021-09-30 10:57,2021-10-06 18:04,2023-10-01 09:57,2021-10-01 09:16,18,,,,,,,18,tools,,0,noreg-doc,,,,,,,,,,,,,,,,,,,,,The examples call non-existent methods on trees.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2uitf:",9223372036854775807,b18,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4dca67bd,,,,,,,,,"2021-10-01 09:16;roboduke;Changeset: 05d38604
Author:    Pavel Rappo <prappo@openjdk.org>
Date:      2021-10-01 16:15:48 +0000
URL:       https://git.openjdk.java.net/jdk/commit/05d38604a2c620dcaf8682f02dae2fddab8e0c0b
;;;",,,,,,,,,,,,,,,,,,,,,,,,,
Generalize UpcallStub into NativeSymbol,JDK-8274602,5059586,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,mcimadamore,mcimadamore,mcimadamore,2021-09-30 08:03,2021-10-05 10:53,2023-10-01 09:57,2021-10-05 10:53,repo-panama,,,,,,,,tools,,0,foreign-memaccess+abi,,,,,,,,,,,,,,,,,,,,,We have introduced a new class called UpcallStub which is used for upcalls. A scoped abstraction would be useful also in the case of SymbolLookup (even though the lookup we provides all return symbols based on the global scope).,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2uisj:",9223372036854775807,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@2251e2f8,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Some of the dnd tests time out and fail intermittently,JDK-8274597,5059578,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,mvs,mvs,mvs,2021-09-30 07:05,2022-11-07 09:49,2023-10-01 09:57,2022-04-29 03:36,11,17,18,19,20,8,,19,client-libs,,0,jdk11u-fix-request,jdk11u-fix-yes,jdk17u-fix-request,jdk17u-fix-yes,noreg-self,sqebug,testbug,,,,,,,,,,,,,,,"Four dnd tests fails with a time out intermittently in some machines(mostly Windows 11) which creates frequent noise in CI.
1. java/awt/dnd/AcceptDropMultipleTimes/AcceptDropMultipleTimes.java
2. java/awt/dnd/DropTargetEnterExitTest/MissedDragExitTest.java
3. java/awt/dnd/DropTargetEnterExitTest/ExtraDragEnterTest.java
4. java/awt/dnd/MissingDragExitEventTest/MissingDragExitEventTest.java

Combined logs are attached.

Issue :
This doesn't seem to be a deadlock. When there is no sufficient delay after the mouse release(dragged mouse pointer release to drop the content), the frame is getting disposed even before the drop() method gets called. So it waits for the drop() method which will never happen as the frame has been already disposed and the test times out after some time.

Fix:
1. Waiting for the drop() method to get called before disposing the frame.
2. Refactoring some parts of code to make it more stable

Testing: 
1. All the four tests are run 10 times per platform and got all pass
2. All the four tests are run 10 times on Windows 11 and got all pass",,,,,,,,,,,JDK-8288851,JDK-8295201,JDK-8288946,JDK-8288856,JDK-8288955,,,,,,,,,,,,,,,JDK-8041904,,,,,JDK-8028998,,,,,JDK-8261016,JDK-8030121,JDK-8197825,,,"2021-09-30 07:05;mvs;log-dnd.txt;https://bugs.openjdk.org/secure/attachment/96616/log-dnd.txt",,,,,generic,,,,,,,,,generic,,,,,"0|i2uiqr:",9223372036854775807,b21,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@5a9b3fd3,,,,,,,,,"2022-04-20 06:08;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/8316
Date: 2022-04-20 13:03:48 +0000;;;","2022-04-29 03:36;dukebot;Changeset: 669ac611
Author:    Manukumar V S <mvs@openjdk.org>
Committer: Abdul Kolarkunnu <akolarkunnu@openjdk.org>
Date:      2022-04-29 10:33:44 +0000
URL:       https://git.openjdk.java.net/jdk/commit/669ac611b269bbda5c53d84173e5c9d0eb4ce919
;;;","2022-06-21 06:29;goetz;Fix request [17u]

I backport this for parity with 17.0.5-oracle.
No risk, only a test change.
Clean backport.
Tests pass. SAP nighlty testing passed.;;;","2022-06-21 06:40;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/483
Date: 2022-06-21 13:30:45 +0000;;;","2022-10-11 01:06;goetz;Fix request [11u]

I backport this for parity with 11.0.18-oracle.
No risk, only a test change.
Clean backport.
Tests pass. SAP nighlty testing passed.;;;","2022-10-11 01:35;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk11u-dev/pull/1437
Date: 2022-10-11 08:26:55 +0000;;;",,,,,,,,,,,,,,,,,,,,
DisableRMIOverHTTPTest failed: connection refused,JDK-8274595,5059576,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,abakhtin,abakhtin,abakhtin,2021-09-30 06:45,2021-11-12 08:26,2023-10-01 09:57,2021-11-06 05:36,openjdk8u312,,,,,,,openjdk8u322,core-libs,,0,jdk8u-fix-request,jdk8u-fix-yes,,,,,,,,,,,,,,,,,,,,"jtreg test sun/rmi/transport/tcp/DisableRMIOverHttp/DisableRMIOverHTTPTest.java failed with Exception:

STATUS:Failed.`main' threw exception: java.rmi.ConnectException: Connection refused to host: *.*.*.*; nested exception is: java.net.ConnectException: Connection refused (Connection refused)

The same test passed on the JDK8u302
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2uiqb:",9223372036854775807,b02,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@50807e59,,,,,,,,,"2021-10-16 09:01;abakhtin;Fix Request [8u]
8u RFR: https://mail.openjdk.java.net/pipermail/jdk8u-dev/2021-October/014365.html;;;","2021-11-06 05:36;hgupdate;URL:   https://hg.openjdk.java.net/jdk8u/jdk8u-dev/jdk/rev/57dbb89256e8
User:  abakhtin
Date:  2021-11-06 12:31:57 +0000
;;;","2021-11-12 08:25;hgupdate;URL:   https://hg.openjdk.java.net/jdk8u/jdk8u/jdk/rev/57dbb89256e8
User:  andrew
Date:  2021-11-12 16:17:48 +0000
;;;",,,,,,,,,,,,,,,,,,,,,,,
Performance regression in upcalls,JDK-8274592,5059573,Bug,Resolved,JDK,JDK,software,duke,,,P2,Fixed,mcimadamore,mcimadamore,mcimadamore,2021-09-30 06:41,2021-09-30 07:39,2023-10-01 09:57,2021-09-30 07:39,repo-panama,,,,,,,,tools,,0,foreign-memaccess+abi,,,,,,,,,,,,,,,,,,,,,"Following recent API refresh, upcalls seems slower than they used to be.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2uipn:",9223372036854775807,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@2251e2f8,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
X86 backend related incorrectness issues in legacy store mask patterns ,JDK-8274569,5059550,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,jbhateja,jbhateja,jbhateja,2021-09-30 05:31,2021-10-04 10:09,2023-10-01 09:57,2021-10-04 10:09,repo-panama,,,,,,,repo-panama,hotspot,,0,vectorIntrinsics,vectorIntrinsics+mask,,,,,,,,,,,,,,,,,,,,"- Issue was seen while unit testing changes for masking related optimizations on vectorIntrinsics branch.
- Following patterns emit incorrect instruction sequence.
  - instruct storeMask2B
  - instruct storeMask4B
  - instruct storeMask8B
  - instruct storeMask8B_avx
  - instruct ReplI_M1
  

",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8274533,,,JDK-8262356,,,,,,,,,,,,,,,x86_64,,,,,,,,,,,,,,"0|i2uikj:",9223372036854775807,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
(fs) UserDefinedFileAttributeView doesn't correctly determine if supported when using OverlayFS,JDK-8274562,5059517,Bug,Closed,JDK,JDK,software,duke,,,P3,Fixed,bpb,webbuggrp,webbuggrp,2021-09-29 22:36,2023-09-11 22:59,2023-10-01 09:57,2021-10-01 08:31,17,18,,,,,,18,core-libs,,0,additional-information-received,dcsaw,jdk17u-fix-request,jdk17u-fix-yes,noreg-hard,regression,reproducer-yes,webbug,,,,,,,,,,,,,,"ADDITIONAL SYSTEM INFORMATION :
Ubuntu 20.04, Java 17+35-Ubuntu-120.04

A DESCRIPTION OF THE PROBLEM :
JDK-8262957 (https://github.com/openjdk/jdk/pull/2816) introduced a fast-fail mechanism determining if a filesystem
supports `UserDefinedFileAttributeView` based on if `_SYS_XATTR_H_` is defined; which is defined by `xattr.h`. 

The problem with this approach is that this variable is not the same in both MacOS `_SYS_XATTR_H_` and Linux `_SYS_XATTR_H` which can cause the JDK to incorrectly determine that a Linux filesystem doesn't support user defined file attributes when it does using: 

Files.getFileStore(Paths.get( ""/tmp/testfile""))
        .supportsFileAttributeView(UserDefinedFileAttributeView.class);

Proposed Fix
One solution is to cover both cases

#if defined _SYS_XATTR_H || defined _SYS_XATTR_H_
    capabilities |= sun_nio_fs_UnixNativeDispatcher_SUPPORTS_XATTR;
#endif

The proposed solution here is to use XATTR_CREATE which is defined in both MacOS (https://github.com/apple/darwin-xnu/blob/2ff845c2e033bd0ff64b5b6aa6063a1f8f65aa32/bsd/sys/xattr.h#L38) and Linux glibc (https://github.com/bminor/glibc/blob/88361b408b9dbd313f15413cc2e6be0f1cafb01a/misc/sys/xattr.h#L33)

Proposed Fix: https://github.com/openjdk/jdk/pull/5767

REGRESSION : Last worked in version 16.0.2

STEPS TO FOLLOW TO REPRODUCE THE PROBLEM :
Run test case using a Linux based system with OverlayFS. May be reproducible on any non-ext4 file system due to special handling of EXT4

EXPECTED VERSUS ACTUAL BEHAVIOR :
EXPECTED -
Expected that JDK would correctly determine if a filesystem supports user defined file attributes. Returning ""true"" if it supports it, or ""false"" if it does not. But it should not return false that it is not supported if it actually does.
ACTUAL -
JDK 17 reports that filesystem does not support extended attributes when it does

---------- BEGIN SOURCE ----------
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.nio.file.attribute.UserDefinedFileAttributeView;

public class ExtFileAttributeChecker {
    public static void main(String[] args) throws IOException {
        System.out.println(Files.getFileStore(Paths.get(""/tmp/testfile"")).supportsFileAttributeView(UserDefinedFileAttributeView.class));
    }
} 
---------- END SOURCE ----------

CUSTOMER SUBMITTED WORKAROUND :
No known work-around

FREQUENCY : always


",,,,,,,,,,,JDK-8274754,JDK-8313413,JDK-8316075,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8262957,,,,,,,,,,x86_64,,,,,,b18,17,,linux,,,,,"0|i2uid7:",9223372036854775807,b18,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@674604a9,,,,,,,Verified,,"2021-09-30 04:09;tongwan;The observations on Ubuntu:
JDK 17ea+17: Passed, returned true.
JDK 17ea+18: Failed, returned false.
JDK 18ea+1: Failed.
;;;","2021-09-30 14:06;bpb;noreg-hard as this appears difficult to test.

The fix was verified by using an overlayfs:

$ pushd /tmp
$ mkdir lower upper workdir overlay
$ sudo mount -t overlay -o lowerdir=/tmp/lower,upperdir=/tmp/upper,workdir=/tmp/workdir none /tmp/overlay

Running the provided test against ""/tmp/overlay"" prints ""false"" before the proposed fix and ""true"" thereafter.;;;","2021-10-01 08:31;roboduke;Changeset: 3d7671b6
Author:    Brian Burkhalter <bpb@openjdk.org>
Date:      2021-10-01 15:30:55 +0000
URL:       https://git.openjdk.java.net/jdk/commit/3d7671b65e8491f3b1fcac8b96401401f783c9f4
;;;","2021-10-09 23:18;tongwan;Requested the submitter verify the fix by downloading the latest version of JDK 18 from https://jdk.java.net/18/;;;","2021-10-12 20:32;tongwan;Additional information from the submitter:
When I reported the bug I recommended two options for the fix:
1) Similar fix to what was merged
2) I opened a pull-request with my preference: https://github.com/openjdk/jdk/pull/5767
;;;","2021-10-12 20:33;tongwan;From the submitter
 I validated the fix in the latest build: 18-ea+18-1093 and now it works as expected. Now my team is just waiting on the JDK17 backport of the fix.;;;","2021-11-18 02:37;ewhelan;Fix Request(17u): 

This is a simple fix which fixes a regression introduced in 16.0.1.
Risk of regression is low 
Patch applies cleanly;;;","2022-02-14 05:28;goetz;Fix Request(17u): 
I'll finish this for jdk17u-dev.
SAP nightly tests passed.;;;","2022-02-14 05:32;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk17u-dev/pull/160
Date: 2022-02-14 13:27:38 +0000;;;",,,,,,,,,,,,,,,,,
JFR: Typo in 'jfr help configure' text,JDK-8274559,5059535,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,egahlin,egahlin,egahlin,2021-09-30 03:38,2021-10-11 15:45,2023-10-01 09:57,2021-10-04 14:19,17,18,,,,,,18,hotspot,,0,,,,,,,,,,,,,,,,,,,,,,"The help text says ""--ouput <file>"".

It should be ""--output""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2uih7:",9223372036854775807,b18,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@42995637,,,,,,,,,"2021-10-04 14:19;roboduke;Changeset: 7e757f6a
Author:    Erik Gahlin <egahlin@openjdk.org>
Date:      2021-10-04 21:19:19 +0000
URL:       https://git.openjdk.java.net/jdk/commit/7e757f6a2cbfd03ba9ac602b800d15ba33f6f5f4
;;;",,,,,,,,,,,,,,,,,,,,,,,,,
c2i entry barriers read int as long on PPC,JDK-8274550,5059531,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,mdoerr,shade,shade,2021-09-30 02:59,2021-10-18 02:35,2023-10-01 09:57,2021-10-01 01:22,17,18,,,,,,18,hotspot,,0,jdk17u-fix-request,jdk17u-fix-yes,redhat-interest,,,,,,,,,,,,,,,,,,,"I suspect that JDK-8260372 suffers from the same problem like JDK-8274501 fixes for AArch64.

  // Fast path: If class loader is strong, the holder cannot be unloaded.
  __ ld(tmp2, in_bytes(ClassLoaderData::keep_alive_offset()), tmp1_class_loader_data);

_ld should be _lwz?",,,,,,,,,,,JDK-8275395,,,,,,,,,,,,,,,,,,,,,,,,JDK-8260372,JDK-8274501,,,,JDK-8274851,,,,,,,,,,ppc,,,,,,,,,,,,,,"0|i2uigb:",9223372036854775807,b18,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6b00f96c,,,,,,,,,"2021-09-30 07:22;mdoerr;Thanks for filing this issue. P4 is fine. It's only used by experimental GC implementations which are not yet contributed.;;;","2021-10-01 01:22;roboduke;Changeset: 5e4b514e
Author:    Martin Doerr <mdoerr@openjdk.org>
Date:      2021-10-01 08:20:51 +0000
URL:       https://git.openjdk.java.net/jdk/commit/5e4b514e6e7e1b9f51fac1983b6c12a988f7f5a8
;;;","2021-10-15 05:41;mdoerr;Fix Request (17u):
Trivial fix in PPC64 platform code. Should get backported before backporting new GCs (ZGC and ShenandoahGC) on PPC64. Applies cleanly.;;;",,,,,,,,,,,,,,,,,,,,,,,
"(fc) FileChannel gathering write fails with IOException ""Invalid argument"" on macOS 11.6 ",JDK-8274548,5059505,Bug,Closed,JDK,JDK,software,duke,,,P4,Fixed,bpb,webbuggrp,webbuggrp,2021-09-29 12:06,2022-04-13 04:19,2023-10-01 09:57,2021-10-12 08:27,17,,,,,,,18,core-libs,,0,dcsaw,reproducer-yes,webbug,,,,,,,,,,,,,,,,,,,"ADDITIONAL SYSTEM INFORMATION :
OSX 11.6 on Apple M1 MacBook Pro
Fails on both the Arm64 and x86 version of JDK 17
openjdk version ""17"" 2021-09-14
OpenJDK Runtime Environment (build 17+35-2724)
OpenJDK 64-Bit Server VM (build 17+35-2724, mixed mode, sharing)


A DESCRIPTION OF THE PROBLEM :
FileChannel.write(ByteBuffer[] ..) with 3x 1Gb direct ByteBuffers fails with IOException 
Exception in thread ""main"" java.io.IOException: Invalid argument
        at java.base/sun.nio.ch.FileDispatcherImpl.writev0(Native Method)
        at java.base/sun.nio.ch.FileDispatcherImpl.writev(FileDispatcherImpl.java:74)
        at java.base/sun.nio.ch.IOUtil.write(IOUtil.java:182)
        at java.base/sun.nio.ch.FileChannelImpl.write(FileChannelImpl.java:314)
        at java.base/java.nio.channels.FileChannel.write(FileChannel.java:424)
        at jasperdb.FileChannel2GLimitTest.main(FileChannel2GLimitTest.java:23)
It fails on Mac but works on linux with the but only writes 2Gb of data filled in bug internal review ID : 9071589

STEPS TO FOLLOW TO REPRODUCE THE PROBLEM :
Example failing code attached. Basically just call FIleChannel.write(new ByteBuffer[] {
                ByteBuffer.allocateDirect(GB),
                ByteBuffer.allocateDirect(GB),
                ByteBuffer.allocateDirect(GB)
        })

EXPECTED VERSUS ACTUAL BEHAVIOR :
EXPECTED -
File with 3GB of zero data
ACTUAL -
IOException

---------- BEGIN SOURCE ----------
import java.io.IOException;
import java.nio.ByteBuffer;
import java.nio.channels.FileChannel;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.StandardOpenOption;

public class FileChannel2GLimitTest {
    static final int GB = 1024*1024*1024;
    public static void main(String[] args) throws IOException {
        ByteBuffer[] bigBuffers = new ByteBuffer[] {
                ByteBuffer.allocateDirect(GB),
                ByteBuffer.allocateDirect(GB),
                ByteBuffer.allocateDirect(GB)
        };
        for(ByteBuffer buf:bigBuffers) buf.clear();
        Path tempFile = Files.createTempFile(""FileChannel2GLimitTest"","".dat"");
        try {
            System.out.println(""Starting to write 3Gb of data..."");
            FileChannel fc = FileChannel.open(tempFile, StandardOpenOption.CREATE,StandardOpenOption.WRITE);
            long bytesWritten = fc.write(bigBuffers);
            System.out.printf(""Bytes written = %,d\n"",bytesWritten);
            System.out.printf(""Total bytes   = %,d\n"",GB*3L);
        } finally {
            Files.delete(tempFile);
        }
    }
}
---------- END SOURCE ----------

CUSTOMER SUBMITTED WORKAROUND :
Seems like calling write 3 times with 1Gb each works fine

 ByteBuffer bigBuffer = ByteBuffer.allocateDirect(GB);
        bigBuffer.clear();
        Path tempFile = Files.createTempFile(""FileChannel2GLimitTest"","".dat"");
        try {
            System.out.println(""Starting to write 3Gb of data..."");
            FileChannel fc = FileChannel.open(tempFile, StandardOpenOption.CREATE,StandardOpenOption.WRITE);
            long bytesWritten = fc.write(bigBuffer);
            System.out.printf(""Bytes written = %,d\n"",bytesWritten);
            bigBuffer.clear();
            bytesWritten = fc.write(bigBuffer);
            System.out.printf(""Bytes written = %,d\n"",bytesWritten);
            bigBuffer.clear();
            bytesWritten = fc.write(bigBuffer);
            System.out.printf(""Bytes written = %,d\n"",bytesWritten);
            System.out.printf(""Total bytes   = %,d\n"",GB*3L);
            fc.close();
        } finally {
            Files.delete(tempFile);
        }

FREQUENCY : always


",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8275070,JDK-8275265,,,,"2021-09-30 02:31;tongwan;FileChannel2GLimitTest.java;https://bugs.openjdk.org/secure/attachment/96614/FileChannel2GLimitTest.java","2021-10-04 12:48;bpb;wv.c;https://bugs.openjdk.org/secure/attachment/96644/wv.c",,,,aarch64,,,,,,,,,os_x,,,,,"0|i2uiaj:",9223372036854775807,b19,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@674604a9,,,,,,,Verified,,"2021-09-30 02:35;tongwan;The observations on Windows 10:
JDK 17: Passed, IOException thrown
On Ubuntu:
JDK 17: Passed.

Can not reproduce on Windows nor on Ubuntu.;;;","2021-09-30 19:16;bpb;In the macOS man page WRITE(2) it states

     In addition, writev() may return one of the following errors:
     ...
     [EINVAL]    The sum of the iov_len values in the iov array over-
                        flows a 32-bit integer.

In the attached test, iov_len is 3 with each buffer being 1 GB = 1024*1024*1024 = 1073741824 bytes. I reran the test for three other size configurations {1 GB, 1 GB - 1}, {1 GB, 1 GB}, and {1 GB, 1GB + 1}. The first of these succeeded but the latter two failed. The maximim value of a signed 32-bit integer is 2147483647 = 2 GB - 1 which fits with the sum of the iov_len values overflowing a 32-bit integer. Thus one might surmise that for some reason Apple decided to start enforcing this restriction in macOS 11.

The test was not yet run on Linux, but the man page writev(3P) states

       In addition, the writev() function shall fail if:

       EINVAL The sum of the iov_len values in the iov array would
              overflow an ssize_t.;;;","2021-10-04 12:52;bpb;When run on macOS 10.15.7 the attached program wv.c prints

size 2147483644
Wrote 2147483644 bytes
size 2147483645
Wrote 2147483645 bytes
size 2147483646
Wrote 2147483646 bytes
size 2147483647
Wrote 2147483647 bytes
size 2147483648
Wrote 2147483648 bytes
size 2147483649
Wrote 2147483649 bytes

but on macOS 11.6 and 12-beta prints

size 2147483644
Wrote 2147483644 bytes
size 2147483645
Wrote 2147483645 bytes
size 2147483646
Wrote 2147483646 bytes
size 2147483647
Wrote 2147483647 bytes
size 2147483648
writev: Invalid argument

That is to say that it now fails if the sum of the iov_len fields exceeds INT_MAX (2147483647).;;;","2021-10-12 08:26;roboduke;Changeset: 07b1f1c2
Author:    Brian Burkhalter <bpb@openjdk.org>
Date:      2021-10-12 15:25:53 +0000
URL:       https://git.openjdk.java.net/jdk/commit/07b1f1c282ee0a7df6a6b0f240962a032ea3a413
;;;","2022-04-13 04:19;sqetools;verified;;;",,,,,,,,,,,,,,,,,,,,,
sun/security/tools/jarsigner/multiRelease/MVJarSigningTest.java fails due to recursive initialisation,JDK-8274536,5059518,Bug,Resolved,JDK,JDK,software,duke,,,P2,Fixed,mullan,alanb,alanb,2021-09-29 23:12,2021-10-04 03:39,2023-10-01 09:57,2021-10-04 03:39,repo-loom,,,,,,,repo-loom,security-libs,,0,,,,,,,,,,,,,,,,,,,,,,"sun/security/tools/jarsigner/multiRelease/MVJarSigningTest.java is failing in the loom repo since the disabling of SHA-1 in jdk-18+18. It duplicates on all platforms with images builds.

The loom repo has many changes that subtly change the order that classes are loaded and/or initialized and I suspect we are running into a lurking bug.

WARNING: A command line option has enabled the Security Manager
WARNING: The Security Manager is deprecated and will be removed in a future release
Error: A JNI error has occurred, please check your installation and try again
Exception in thread ""main"" java.util.ServiceConfigurationError: Locale provider adapter ""CLDR""cannot be instantiated.
	at java.base/sun.util.locale.provider.LocaleProviderAdapter.forType(LocaleProviderAdapter.java:199)
	at java.base/sun.util.locale.provider.LocaleServiceProviderPool.findProviders(LocaleServiceProviderPool.java:302)
	at java.base/sun.util.locale.provider.LocaleServiceProviderPool.getLocalizedObjectImpl(LocaleServiceProviderPool.java:274)
	at java.base/sun.util.locale.provider.LocaleServiceProviderPool.getLocalizedObject(LocaleServiceProviderPool.java:256)
	at java.base/sun.util.locale.provider.CalendarDataUtility.retrieveFirstDayOfWeek(CalendarDataUtility.java:76)
	at java.base/java.util.Calendar.setWeekCountData(Calendar.java:3397)
	at java.base/java.util.Calendar.<init>(Calendar.java:1607)
	at java.base/java.util.GregorianCalendar.<init>(GregorianCalendar.java:738)
	at java.base/java.util.Calendar$Builder.build(Calendar.java:1492)
	at java.base/sun.security.util.DisabledAlgorithmConstraints$DenyAfterConstraint.<init>(DisabledAlgorithmConstraints.java:702)
	at java.base/sun.security.util.DisabledAlgorithmConstraints$Constraints.<init>(DisabledAlgorithmConstraints.java:419)
	at java.base/sun.security.util.DisabledAlgorithmConstraints.<init>(DisabledAlgorithmConstraints.java:144)
	at java.base/sun.security.util.DisabledAlgorithmConstraints.<init>(DisabledAlgorithmConstraints.java:118)
	at java.base/sun.security.util.DisabledAlgorithmConstraints$JarHolder.<clinit>(DisabledAlgorithmConstraints.java:96)
	at java.base/sun.security.util.DisabledAlgorithmConstraints.jarConstraints(DisabledAlgorithmConstraints.java:108)
	at java.base/sun.security.pkcs.SignerInfo.<clinit>(SignerInfo.java:61)
	at java.base/sun.security.pkcs.PKCS7.parseSignedData(PKCS7.java:390)
	at java.base/sun.security.pkcs.PKCS7.parse(PKCS7.java:174)
	at java.base/sun.security.pkcs.PKCS7.parse(PKCS7.java:142)
	at java.base/sun.security.pkcs.PKCS7.<init>(PKCS7.java:124)
	at java.base/sun.security.util.SignatureFileVerifier.<init>(SignatureFileVerifier.java:118)
	at java.base/java.util.jar.JarVerifier.processEntry(JarVerifier.java:302)
	at java.base/java.util.jar.JarVerifier.update(JarVerifier.java:234)
	at java.base/java.util.jar.JarFile.initializeVerifier(JarFile.java:763)
	at java.base/java.util.jar.JarFile.ensureInitialization(JarFile.java:1034)
	at java.base/java.util.jar.JavaUtilJarAccessImpl.ensureInitialization(JavaUtilJarAccessImpl.java:72)
	at java.base/jdk.internal.loader.URLClassPath$JarLoader$2.getManifest(URLClassPath.java:880)
	at java.base/jdk.internal.loader.BuiltinClassLoader.defineClass(BuiltinClassLoader.java:848)
	at java.base/jdk.internal.loader.BuiltinClassLoader$4.run(BuiltinClassLoader.java:773)
	at java.base/jdk.internal.loader.BuiltinClassLoader$4.run(BuiltinClassLoader.java:768)
	at java.base/java.security.AccessController.doPrivileged(AccessController.java:318)
	at java.base/jdk.internal.loader.BuiltinClassLoader.findClassOnClassPathOrNull(BuiltinClassLoader.java:781)
	at java.base/jdk.internal.loader.BuiltinClassLoader.loadClassOrNull(BuiltinClassLoader.java:681)
	at java.base/jdk.internal.loader.BuiltinClassLoader.loadClass(BuiltinClassLoader.java:639)
	at java.base/jdk.internal.loader.ClassLoaders$AppClassLoader.loadClass(ClassLoaders.java:188)
	at java.base/java.lang.ClassLoader.loadClass(ClassLoader.java:520)
	at java.base/java.lang.Class.forName0(Native Method)
	at java.base/java.lang.Class.forName(Class.java:467)
	at java.base/sun.launcher.LauncherHelper.loadMainClass(LauncherHelper.java:791)
	at java.base/sun.launcher.LauncherHelper.checkAndLoadMain(LauncherHelper.java:686)
Caused by: java.lang.reflect.InvocationTargetException
	at java.base/jdk.internal.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)
	at java.base/jdk.internal.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:85)
	at java.base/jdk.internal.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)
	at java.base/java.lang.reflect.Constructor.newInstanceWithCaller(Constructor.java:499)
	at java.base/java.lang.reflect.Constructor.newInstance(Constructor.java:480)
	at java.base/sun.util.locale.provider.LocaleProviderAdapter.forType(LocaleProviderAdapter.java:188)
	... 39 more
Caused by: java.util.ServiceConfigurationError: sun.util.locale.provider.LocaleDataMetaInfo: Unable to load sun.util.resources.cldr.provider.CLDRLocaleDataMetaInfo
	at java.base/java.util.ServiceLoader.fail(ServiceLoader.java:586)
	at java.base/java.util.ServiceLoader.loadProvider(ServiceLoader.java:870)
	at java.base/java.util.ServiceLoader$ModuleServicesLookupIterator.hasNext(ServiceLoader.java:1084)
	at java.base/java.util.ServiceLoader$2.hasNext(ServiceLoader.java:1309)
	at java.base/java.util.ServiceLoader$3.hasNext(ServiceLoader.java:1393)
	at java.base/sun.util.cldr.CLDRLocaleProviderAdapter.lambda$new$0(CLDRLocaleProviderAdapter.java:86)
	at java.base/java.security.AccessController.doPrivileged(AccessController.java:569)
	at java.base/sun.util.cldr.CLDRLocaleProviderAdapter.<init>(CLDRLocaleProviderAdapter.java:85)
	... 45 more
Caused by: java.lang.NoClassDefFoundError: Could not initialize class javax.crypto.JceSecurity
	at java.base/javax.crypto.Cipher.getInstance(Cipher.java:547)
	at java.base/sun.security.pkcs12.PKCS12KeyStore.lambda$engineLoad$1(PKCS12KeyStore.java:2147)
	at java.base/sun.security.pkcs12.PKCS12KeyStore$RetryWithZero.run(PKCS12KeyStore.java:257)
	at java.base/sun.security.pkcs12.PKCS12KeyStore.engineLoad(PKCS12KeyStore.java:2145)
	at java.base/sun.security.util.KeyStoreDelegator.engineLoad(KeyStoreDelegator.java:221)
	at java.base/java.security.KeyStore.load(KeyStore.java:1473)
	at java.base/sun.security.util.PolicyUtil.getKeyStore(PolicyUtil.java:166)
	at java.base/sun.security.provider.PolicyFile.init(PolicyFile.java:532)
	at java.base/sun.security.provider.PolicyFile$4.run(PolicyFile.java:422)
	at java.base/sun.security.provider.PolicyFile$4.run(PolicyFile.java:394)
	at java.base/java.security.AccessController.doPrivileged(AccessController.java:318)
	at java.base/sun.security.provider.PolicyFile.initPolicyFile(PolicyFile.java:394)
	at java.base/sun.security.provider.PolicyFile.initPolicyFile(PolicyFile.java:381)
	at java.base/sun.security.provider.PolicyFile.init(PolicyFile.java:338)
	at java.base/sun.security.provider.PolicyFile.<init>(PolicyFile.java:292)
	at java.base/java.security.Policy.loadPolicyProvider(Policy.java:221)
	at java.base/java.security.Policy.getPolicyNoCheck(Policy.java:191)
	at java.base/java.security.ProtectionDomain.implies(ProtectionDomain.java:325)
	at java.base/java.security.ProtectionDomain.impliesWithAltFilePerm(ProtectionDomain.java:357)
	at java.base/java.security.AccessControlContext.checkPermission(AccessControlContext.java:463)
	at java.base/java.security.AccessController.checkPermission(AccessController.java:1068)
	at java.base/java.lang.SecurityManager.checkPermission(SecurityManager.java:416)
	at java.base/java.lang.SecurityManager.checkPackageAccess(SecurityManager.java:1332)
	at java.base/java.lang.ClassLoader$1.run(ClassLoader.java:690)
	at java.base/java.lang.ClassLoader$1.run(ClassLoader.java:688)
	at java.base/java.security.AccessController.doPrivileged(AccessController.java:399)
	at java.base/java.lang.ClassLoader.checkPackageAccess(ClassLoader.java:688)
	at java.base/java.lang.ClassLoader.defineClass2(Native Method)
	at java.base/java.lang.ClassLoader.defineClass(ClassLoader.java:1103)
	at java.base/java.security.SecureClassLoader.defineClass(SecureClassLoader.java:182)
	at java.base/jdk.internal.loader.BuiltinClassLoader.defineClass(BuiltinClassLoader.java:821)
	at java.base/jdk.internal.loader.BuiltinClassLoader.lambda$findClassInModuleOrNull$2(BuiltinClassLoader.java:743)
	at java.base/java.security.AccessController.doPrivileged(AccessController.java:318)
	at java.base/jdk.internal.loader.BuiltinClassLoader.findClassInModuleOrNull(BuiltinClassLoader.java:744)
	at java.base/jdk.internal.loader.BuiltinClassLoader.findClass(BuiltinClassLoader.java:621)
	at java.base/java.lang.ClassLoader.loadClass(ClassLoader.java:632)
	at java.base/java.lang.Class.forName(Class.java:545)
	at java.base/java.util.ServiceLoader.lambda$loadProvider$1(ServiceLoader.java:864)
	at java.base/java.security.AccessController.doPrivileged(AccessController.java:569)
	at java.base/java.util.ServiceLoader.loadProvider(ServiceLoader.java:866)
	... 51 more
Caused by: java.lang.ExceptionInInitializerError: Exception java.lang.Error: Circular loading of URL stream handler providers detected [in thread ""main""]
	at java.base/java.net.URL.lookupViaProviders(URL.java:1352)
	at java.base/java.net.URL.getURLStreamHandler(URL.java:1440)
	at java.base/java.net.URL.<init>(URL.java:681)
	at java.base/java.net.URL.<init>(URL.java:570)
	at java.base/java.net.URL.<init>(URL.java:517)
	at java.base/javax.crypto.JceSecurity.<clinit>(JceSecurity.java:246)
	at java.base/javax.crypto.Cipher.getInstance(Cipher.java:547)
	at java.base/sun.security.pkcs12.PKCS12KeyStore.lambda$engineLoad$1(PKCS12KeyStore.java:2147)
	at java.base/sun.security.pkcs12.PKCS12KeyStore$RetryWithZero.run(PKCS12KeyStore.java:257)
	at java.base/sun.security.pkcs12.PKCS12KeyStore.engineLoad(PKCS12KeyStore.java:2145)
	at java.base/sun.security.util.KeyStoreDelegator.engineLoad(KeyStoreDelegator.java:221)
	at java.base/java.security.KeyStore.load(KeyStore.java:1473)
	at java.base/sun.security.util.PolicyUtil.getKeyStore(PolicyUtil.java:166)
	at java.base/sun.security.provider.PolicyFile.init(PolicyFile.java:532)
	at java.base/sun.security.provider.PolicyFile$4.run(PolicyFile.java:422)
	at java.base/sun.security.provider.PolicyFile$4.run(PolicyFile.java:394)
	at java.base/java.security.AccessController.doPrivileged(AccessController.java:318)
	at java.base/sun.security.provider.PolicyFile.initPolicyFile(PolicyFile.java:394)
	at java.base/sun.security.provider.PolicyFile.initPolicyFile(PolicyFile.java:381)
	at java.base/sun.security.provider.PolicyFile.init(PolicyFile.java:338)
	at java.base/sun.security.provider.PolicyFile.<init>(PolicyFile.java:292)
	at java.base/java.security.Policy.loadPolicyProvider(Policy.java:221)
	at java.base/java.security.Policy.getPolicyNoCheck(Policy.java:191)
	at java.base/java.security.ProtectionDomain.implies(ProtectionDomain.java:325)
	at java.base/java.security.ProtectionDomain.impliesWithAltFilePerm(ProtectionDomain.java:357)
	at java.base/java.security.AccessControlContext.checkPermission(AccessControlContext.java:463)
	at java.base/java.security.AccessController.checkPermission(AccessController.java:1068)
	at java.base/java.lang.SecurityManager.checkPermission(SecurityManager.java:416)
	at java.base/java.lang.SecurityManager.checkPackageAccess(SecurityManager.java:1332)
	at java.base/java.lang.ClassLoader$1.run(ClassLoader.java:690)
	at java.base/java.lang.ClassLoader$1.run(ClassLoader.java:688)
	at java.base/java.security.AccessController.doPrivileged(AccessController.java:399)
	at java.base/java.lang.ClassLoader.checkPackageAccess(ClassLoader.java:688)
	at java.security.jgss/sun.security.jgss.SunProvider.<init>(SunProvider.java:104)
	at java.base/jdk.internal.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)
	at java.base/jdk.internal.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:85)
	at java.base/jdk.internal.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)
	at java.base/java.lang.reflect.Constructor.newInstanceWithCaller(Constructor.java:499)
	at java.base/java.lang.reflect.Constructor.newInstance(Constructor.java:480)
	at java.base/java.util.ServiceLoader$ProviderImpl$2.run(ServiceLoader.java:797)
	at java.base/java.security.AccessController.doPrivileged(AccessController.java:712)
	at java.base/java.util.ServiceLoader$ProviderImpl.newInstance(ServiceLoader.java:802)
	at java.base/java.util.ServiceLoader$ProviderImpl.get(ServiceLoader.java:729)
	at java.base/java.util.ServiceLoader$3.next(ServiceLoader.java:1403)
	at java.base/sun.security.jca.ProviderConfig$ProviderLoader.load(ProviderConfig.java:347)
	at java.base/sun.security.jca.ProviderConfig$3.run(ProviderConfig.java:254)
	at java.base/sun.security.jca.ProviderConfig$3.run(ProviderConfig.java:248)
	at java.base/java.security.AccessController.doPrivileged(AccessController.java:318)
	at java.base/sun.security.jca.ProviderConfig.doLoadProvider(ProviderConfig.java:248)
	at java.base/sun.security.jca.ProviderConfig.getProvider(ProviderConfig.java:226)
	at java.base/sun.security.jca.ProviderList.getProvider(ProviderList.java:268)
	at java.base/sun.security.jca.ProviderList.getService(ProviderList.java:381)
	at java.base/sun.security.jca.GetInstance.getInstance(GetInstance.java:157)
	at java.base/java.security.Security.getImpl(Security.java:694)
	at java.base/java.security.AlgorithmParameters.getInstance(AlgorithmParameters.java:157)
	at java.base/sun.security.pkcs12.PKCS12KeyStore.parseAlgParameters(PKCS12KeyStore.java:847)
	at java.base/sun.security.pkcs12.PKCS12KeyStore.engineLoad(PKCS12KeyStore.java:2113)
	... 87 more",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8269039,,,,,,,,,,,,,,,,,,,,,,,,"0|i2uidf:",9223372036854775807,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@2ec284e3,,,,,,,,,"2021-09-29 23:16;alanb;EventHelper.isLoggingSecurity works around a similar issue by testing JarFile::isInitializing. It's possible that there are other places will need the same check. One difference between the main line and the loom repo is that the main line uses thread locals to catch recursive initialisation issue in both the JarFile and URL code. In loom these have been replaced with a non-TL solution. From what I can tell, these are working correctly and the issue is something to do with the executing of DisabledAlgorithmConstraints.jarConstraints while loading a signed JAR.;;;","2021-10-04 03:39;alanb;Sean diagnosed this issue to be specific to the loom repo. The TLs used to track recursive initialisation in the URL and JarFile code were incorrectly detecting recursive initialisation when initialising both at the same time. This has not been fixed.;;;",,,,,,,,,,,,,,,,,,,,,,,,
Add comment to explain an HKDF optimization in SSLSecretDerivation,JDK-8274528,5059511,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,wetmore,wetmore,wetmore,2021-09-29 17:46,2021-10-06 18:03,2023-10-01 09:57,2021-09-30 08:48,,,,,,,,18,security-libs,,0,,,,,,,,,,,,,,,,,,,,,,"While reading this code, it wasn't clear why this optimization was here.  Add a couple lines for the next reader.

    private static final byte[] sha256EmptyDigest = new byte[] {
    ...deleted...
    private static final byte[] sha384EmptyDigest = new byte[] {
    ...deleted...

",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2uibv:",9223372036854775807,b18,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@39d9862,,,,,,,,,"2021-09-30 08:48;roboduke;Changeset: c57ed22e
Author:    Bradford Wetmore <wetmore@openjdk.org>
Date:      2021-09-30 15:46:29 +0000
URL:       https://git.openjdk.java.net/jdk/commit/c57ed22e779e7efc8ff7f3c7ec08ce2cb1a738cb
;;;",,,,,,,,,,,,,,,,,,,,,,,,,
Minimal VM build fails after JDK-8273459,JDK-8274527,5059510,Bug,Resolved,JDK,JDK,software,duke,,,P1,Fixed,jiefu,jiefu,jiefu,2021-09-29 16:32,2022-11-11 06:51,2023-10-01 09:57,2021-09-30 16:12,17,18,,,,,,18,hotspot,,0,hs-comp-triaged,jdk17u-fix-request,jdk17u-fix-yes,noreg-build,oraclejdk-na,oracle-triage-11,oracle-triage-17,oracle-triage-18,tencent-interest,,,,,,,,,,,,,"
#
# A fatal error has been detected by the Java Runtime Environment:
#
#  Internal Error (/jdk/src/hotspot/cpu/x86/macroAssembler_x86.cpp:1182), pid=96868, tid=96874
#  assert(modulus <= CodeEntryAlignment) failed: Alignment must be <= CodeEntryAlignment
#
# JRE version:  (18.0) (fastdebug build )
# Java VM: OpenJDK 64-Bit Minimal VM (fastdebug 18-internal+0-adhoc.jvm.jdk, mixed mode, emulated-client, compressed oops, compressed class ptrs, serial gc, linux-amd64)
# Problematic frame:
# V  [libjvm.so+0x390e16]
#",,,,,,,,,,,JDK-8296891,JDK-8296752,,,,,,,,,,,,,,,,,,,,,,,JDK-8273459,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2uibn:",9223372036854775807,b18,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2021-09-30 01:34;chagedorn;ILW = HMH = P1;;;","2021-09-30 16:12;roboduke;Changeset: a8edd1b3
Author:    Jie Fu <jiefu@openjdk.org>
Date:      2021-09-30 23:11:56 +0000
URL:       https://git.openjdk.java.net/jdk/commit/a8edd1b360d4e5f35aff371a91fda42eeb00d395
;;;","2022-11-07 19:28;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/863
Date: 2022-11-08 02:58:15 +0000;;;","2022-11-07 19:54;sgibbons;Fix Request 17u
 
Backporting this patch adds the align32() macro for proper encode table alignment..
Low risk as this has been in JDK18 for months. Depends on backport of JDK-8268276, JDK-8269404, and JDK-8273459 to cleanly integrate.
Patch applies cleanly to 17u.
Testing: x86_64 build, affected tests, tier1;;;","2022-11-09 17:55;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/869
Date: 2022-11-10 01:47:43 +0000;;;",,,,,,,,,,,,,,,,,,,,,
SSLSocket.close() hangs if it is called during the ssl handshake,JDK-8274524,5059503,Bug,Closed,JDK,JDK,software,duke,,,P2,Fixed,abakhtin,abakhtin,abakhtin,2021-09-29 11:40,2023-09-01 01:33,2023-10-01 09:57,2022-02-12 03:55,11,13,15,17,18,8,,19,security-libs,,0,amazon-interest,azul-interest,CPU22_04-defer-approved,CPU22_04-defer-SQE-OK,jdk11u-fix-request,jdk11u-fix-yes,jdk13u-fix-request,jdk13u-fix-yes,jdk15u-fix-request,jdk15u-fix-yes,jdk17u-fix-request,jdk17u-fix-yes,jdk18u-fix-request,jdk18u-fix-SQE-OK-next,jdk18u-fix-yes,jdk8u-fix-request,jdk8u-fix-yes,review-requested,,,,"JCK test api/javax_net/ssl/SSLSocket/setUseClientMode.html fails on Linux & NioSocket  with ""Error. test was interrupted! (timeout?)""

During TLS handshake socket read operations are not protected by readLock. Here is a stack trace of the read during handshake:
	at java.base/sun.nio.ch.SocketDispatcher.read(SocketDispatcher.java:48)
	at java.base/sun.nio.ch.NioSocketImpl.tryRead(NioSocketImpl.java:261)
	at java.base/sun.nio.ch.NioSocketImpl.implRead(NioSocketImpl.java:312)
	at java.base/sun.nio.ch.NioSocketImpl.read(NioSocketImpl.java:350)
	at java.base/sun.nio.ch.NioSocketImpl$1.read(NioSocketImpl.java:803)
	at java.base/java.net.Socket$SocketInputStream.read(Socket.java:981)
	at java.base/sun.security.ssl.SSLSocketInputRecord.read(SSLSocketInputRecord.java:478)
	at java.base/sun.security.ssl.SSLSocketInputRecord.readFully(SSLSocketInputRecord.java:461)
	at java.base/sun.security.ssl.SSLSocketInputRecord.decodeInputRecord(SSLSocketInputRecord.java:243)
	at java.base/sun.security.ssl.SSLSocketInputRecord.decode(SSLSocketInputRecord.java:181)
	at java.base/sun.security.ssl.SSLTransport.decode(SSLTransport.java:110)
	at java.base/sun.security.ssl.SSLSocketImpl.decode(SSLSocketImpl.java:1491)
	at java.base/sun.security.ssl.SSLSocketImpl.readHandshakeRecord(SSLSocketImpl.java:1397)
	at java.base/sun.security.ssl.SSLSocketImpl.startHandshake(SSLSocketImpl.java:444)
	at java.base/sun.security.ssl.SSLSocketImpl.startHandshake(SSLSocketImpl.java:415)

SSLSocket.close() also reads from socket after JDK-8268965:
	at java.base/sun.nio.ch.SocketDispatcher.read(SocketDispatcher.java:48)
	at java.base/sun.nio.ch.NioSocketImpl.tryRead(NioSocketImpl.java:261)
	at java.base/sun.nio.ch.NioSocketImpl.implRead(NioSocketImpl.java:312)
	at java.base/sun.nio.ch.NioSocketImpl.read(NioSocketImpl.java:350)
	at java.base/sun.nio.ch.NioSocketImpl$1.read(NioSocketImpl.java:803)
	at java.base/java.net.Socket$SocketInputStream.read(Socket.java:981)
	at java.base/java.io.InputStream.skip(InputStream.java:544)
	at java.base/sun.security.ssl.SSLSocketInputRecord.deplete(SSLSocketInputRecord.java:504)
	at java.base/sun.security.ssl.SSLSocketImpl.closeSocket(SSLSocketImpl.java:1762)
	at java.base/sun.security.ssl.SSLSocketImpl.shutdown(SSLSocketImpl.java:1739)
	at java.base/sun.security.ssl.SSLSocketImpl.bruteForceCloseInput(SSLSocketImpl.java:773)
	at java.base/sun.security.ssl.SSLSocketImpl.duplexCloseOutput(SSLSocketImpl.java:638)
	at java.base/sun.security.ssl.SSLSocketImpl.close(SSLSocketImpl.java:570)

InputStream.skip() is implemented as a simple read from NIO socket without any locks. It is implemented as a loop of read(available()) As result, in case of called concurrently, SSLSocket.close() could hangs trying to read available bytes from socket, while startHandshake() already read them

The issue does not affect concurrent SSLSocket.close() and application input stream because of SSLSocketInputRecord.deplete() is protected by Application Input Stream read lock.
",,,,,,,,,,,JDK-8282433,JDK-8282949,JDK-8281825,JDK-8282749,JDK-8282748,JDK-8282750,JDK-8282055,JDK-8281821,JDK-8282052,JDK-8282437,JDK-8302902,,,,,,,,,,,,,,JDK-8280946,JDK-8315422,,,,JDK-8268965,JDK-8274736,,,,"2022-01-28 06:36;abakhtin;ClientSocketCloseHang.jtr;https://bugs.openjdk.org/secure/attachment/97769/ClientSocketCloseHang.jtr","2022-01-28 06:37;abakhtin;jstack.log;https://bugs.openjdk.org/secure/attachment/97770/jstack.log",,,,,,,,,,,,,,,,,,"0|i2uia3:",9223372036854775807,b10,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@39d9862,,,,,,,Verified,,"2022-01-27 12:06;dbessono;This could possibly be an intermittent failure.
Would also much appreciate to have logs attached to JDK-8274524.;;;","2022-01-28 06:39;abakhtin;Yes, This is an intermittent failure but it can be reproduced with the test from my review: https://github.com/alexeybakhtin/jdk/blob/02aa671f71daf633f2aefaf692b3d04822183bae/test/jdk/sun/security/ssl/SSLSocketImpl/ClientSocketCloseHang.java
SSL log and jstack are attached;;;","2022-02-10 10:25;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/7432
Date: 2022-02-10 18:19:41 +0000;;;","2022-02-12 03:55;roboduke;Changeset: 58dae60d
Author:    Alexey Bakhtin <abakhtin@openjdk.org>
Date:      2022-02-12 11:54:22 +0000
URL:       https://git.openjdk.java.net/jdk/commit/58dae60da0711c4ae0cb23f8ce2328e051d603b2
;;;","2022-02-14 05:48;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk17u-dev/pull/161
Date: 2022-02-14 13:43:12 +0000;;;","2022-02-14 05:55;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk15u-dev/pull/176
Date: 2022-02-14 13:50:22 +0000;;;","2022-02-14 05:56;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk13u-dev/pull/326
Date: 2022-02-14 13:51:17 +0000;;;","2022-02-14 05:56;abakhtin;Fix request [17u]

I'd like to backport it to JDK17u to fix intermittent deadlocks
Backport is clean.;;;","2022-02-14 10:04;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk11u-dev/pull/823
Date: 2022-02-14 17:58:42 +0000;;;","2022-02-14 10:11;abakhtin;Fix request [15u]

I'd like to backport it to JDK15u to fix intermittent deadlocks
Backport is almost clean except for a trivial fix for Pattern Matching in the instanceof (not available in JDK15) and braces for the if-clauses.;;;","2022-02-14 10:12;abakhtin;Fix request [13u]

I'd like to backport it to JDK13u to fix intermittent deadlocks
Backport is almost clean except for a trivial fix for Pattern Matching in the instanceof (not available in JDK13) and braces for the if-clauses.;;;","2022-02-14 10:41;abakhtin;Fix request [11u]

I'd like to backport it to JDK11u to fix intermittent deadlocks
Backport is almost clean except for a trivial fix for Pattern Matching in the instanceof (not available in JDK11) and braces for the if-clauses.;;;","2022-02-16 04:48;abakhtin;Fix request [8u]

I'd like to backport this fix to JDK8u to prevent intermittent deadlocks.
11u patch applied cleanly after fixing file path

sun/security/ssl regression tests passed;;;","2022-03-06 21:35;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk18u/pull/33
Date: 2022-03-07 05:29:32 +0000;;;",,,,,,,,,,,,
java/lang/management/MemoryMXBean/MemoryTest.java test should handle Shenandoah,JDK-8274523,5059500,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,shade,shade,shade,2021-09-29 10:54,2021-12-07 06:30,2023-10-01 09:57,2021-09-29 23:55,11.0.9,17,18,8-shenandoah,,,,18,core-svc,,0,gc-shenandoah,jdk11u-fix-request,jdk11u-fix-yes,jdk17u-fix-request,jdk17u-fix-SQE-ok,jdk17u-fix-yes,redhat-interest,testbug,,,,,,,,,,,,,,"Currently it fails with:

$ CONF=linux-x86_64-server-fastdebug make run-test TEST=java/lang/management/MemoryMXBean/MemoryTest.java TEST_VM_OPTS=""-XX:+UseShenandoahGC""

STDERR:
java.lang.RuntimeException: TEST FAILED: Number of heap pools = 1 but expected <= 3 and >= 3

Z already handles it with a special configuration, Shenandoah should do the same.",,,,,,,,,,,JDK-8277262,JDK-8278345,JDK-8276883,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2ui9f:",9223372036854775807,b18,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@411d4af6,,,,,,,,,"2021-09-29 23:55;roboduke;Changeset: f8415a9b
Author:    Aleksey Shipilev <shade@openjdk.org>
Date:      2021-09-30 06:54:13 +0000
URL:       https://git.openjdk.java.net/jdk/commit/f8415a9b2f610ed431e6948c8174f6d982e5b31f
;;;","2021-11-08 02:17;shade;Fix Request (17u)

Fixes another test with Shenandoah. Applies cleanly. Test starts to pass.;;;","2021-12-06 09:17;shade;Fix Request (11u)

Same reason as for 17u. Does not apply cleanly to 11u, simple conflicts in test tags, see RFR.;;;",,,,,,,,,,,,,,,,,,,,,,,
java/lang/management/ManagementFactory/MXBeanException.java test fails with Shenandoah,JDK-8274522,5059499,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,shade,shade,shade,2021-09-29 10:41,2021-11-16 12:15,2023-10-01 09:57,2021-09-29 23:57,11.0.9,17,18,8-shenandoah,,,,18,core-svc,,0,gc-shenandoah,jdk11u-fix-request,jdk11u-fix-yes,jdk17u-fix-request,jdk17u-fix-SQE-ok,jdk17u-fix-yes,redhat-interest,testbug,,,,,,,,,,,,,,"$ CONF=linux-x86_64-server-fastdebug make run-test TEST=java/lang/management/ManagementFactory/MXBeanException.java TEST_VM_OPTS=""-XX:+UseShenandoahGC""

...

java.lang.NullPointerException: Cannot invoke ""java.lang.management.MemoryPoolMXBean.setUsageThreshold(long)"" because ""MXBeanException.pool"" is null


This test tries to find the pool that is !p.isUsageThresholdSupported(), and for Shenandoah there is no such pool. Likewise with ZGC, which is already filtered.",,,,,,,,,,,JDK-8277261,JDK-8276938,JDK-8276882,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2ui97:",9223372036854775807,b18,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@411d4af6,,,,,,,,,"2021-09-29 23:57;roboduke;Changeset: c0533ef2
Author:    Aleksey Shipilev <shade@openjdk.org>
Date:      2021-09-30 06:55:24 +0000
URL:       https://git.openjdk.java.net/jdk/commit/c0533ef2d8e526aaec0eebe862f4bbefc159ea37
;;;","2021-11-08 02:10;shade;Fix Request (17u)

Fixes one of the tests with Shenandoah. Applies cleanly. Test is now ignored for Shenandoah.;;;","2021-11-08 02:16;shade;Fix Request (11u)

Same reason as for 17u.;;;",,,,,,,,,,,,,,,,,,,,,,,
jdk/jfr/event/gc/detailed/TestGCLockerEvent.java fails when other GC is selected,JDK-8274521,5059497,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,shade,shade,shade,2021-09-29 09:50,2021-11-16 12:20,2023-10-01 09:57,2021-10-04 05:24,17,18,,,,,,18,hotspot,,0,jdk17u-fix-request,jdk17u-fix-SQE-ok,jdk17u-fix-yes,redhat-interest,testbug,,,,,,,,,,,,,,,,,"$ CONF=linux-x86_64-server-fastdebug make run-test TEST=jdk/jfr/event/gc/detailed/TestGCLockerEvent.java TEST_VM_OPTS=""-XX:+UseShenandoahGC""

STDOUT:
Error occurred during initialization of VM
Multiple garbage collectors selected

I think the test misses @requires G1, like other G1-specific tests.",,,,,,,,,,,JDK-8277179,JDK-8277279,,,,,,,,,,,,,,,,,,,,,,,JDK-8259808,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2ui8r:",9223372036854775807,b18,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@42995637,,,,,,,,,"2021-10-04 05:24;roboduke;Changeset: 0828273b
Author:    Aleksey Shipilev <shade@openjdk.org>
Date:      2021-10-04 12:22:55 +0000
URL:       https://git.openjdk.java.net/jdk/commit/0828273b898cca5368344e75f1c3f4c3a29dde80
;;;","2021-11-12 00:51;shade;Fix Request (17u)

Improves testing. Applies cleanly. Tests pass.;;;",,,,,,,,,,,,,,,,,,,,,,,,
java/util/DoubleStreamSums/CompensatedSums.java fails with expected [true] but found [false],JDK-8274517,5059492,Bug,Closed,JDK,JDK,software,duke,,,P4,Fixed,rgiulietti,tschatzl,tschatzl,2021-09-29 08:09,2023-07-27 23:32,2023-10-01 09:57,2022-05-09 07:55,18,19,,,,,,19,core-libs,,0,intermittent,jdk11u-fix-request,jdk11u-fix-yes,jdk17u-fix-request,jdk17u-fix-yes,tier1,tier8,,,,,,,,,,,,,,,"Test fails with


test CompensatedSums.testCompensatedSums(): failure
java.lang.AssertionError: expected [true] but found [false]
	at org.testng.Assert.fail(Assert.java:99)
	at org.testng.Assert.failNotEquals(Assert.java:1037)
	at org.testng.Assert.assertTrue(Assert.java:45)
	at org.testng.Assert.assertTrue(Assert.java:55)
	at CompensatedSums.testCompensatedSums(CompensatedSums.java:88)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:132)
	at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:599)
	at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:174)
	at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
	at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:822)
	at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:147)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
	at org.testng.TestRunner.privateRun(TestRunner.java:764)
	at org.testng.TestRunner.run(TestRunner.java:585)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:384)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:378)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:337)
	at org.testng.SuiteRunner.run(SuiteRunner.java:286)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1218)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1140)
	at org.testng.TestNG.runSuites(TestNG.java:1069)
	at org.testng.TestNG.run(TestNG.java:1037)
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:94)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at com.sun.javatest.regtest.agent.MainActionHelper$AgentVMRunnable.run(MainActionHelper.java:312)
	at java.base/java.lang.Thread.run(Thread.java:833)

===============================================
java/util/DoubleStreamSums/CompensatedSums.java
Total tests run: 1, Passes: 0, Failures: 1, Skips: 0
===============================================

----------System.err:(12/714)----------
java.lang.Exception: failures: 1
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:96)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at com.sun.javatest.regtest.agent.MainActionHelper$AgentVMRunnable.run(MainActionHelper.java:312)
	at java.base/java.lang.Thread.run(Thread.java:833)",,,,,,,,,,,JDK-8293078,JDK-8293077,JDK-8288245,JDK-8288389,,,,,,,,,,,,,,,,,,,,,JDK-8313297,,,,,JDK-8214761,JDK-8288280,,,,,,,,,,,,,,,,,,,,,,,"0|i2ui7n:",9223372036854775807,b22,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@38ded199,,,,,,,Verified,,"2022-02-03 05:18;jpai;Saw this fail in one of the GitHub actions job for an unrelated PR https://github.com/openjdk/jdk/pull/7334/checks?check_run_id=5051924113

OS details are as follows:

2022-02-03T09:08:16.2245397Z ##[group]Virtual Environment
2022-02-03T09:08:16.2245847Z Environment: ubuntu-20.04
2022-02-03T09:08:16.2247162Z Version: 20220131.1
2022-02-03T09:08:16.2247750Z Included Software: https://github.com/actions/virtual-environments/blob/ubuntu20/20220131.1/images/linux/Ubuntu2004-Readme.md
2022-02-03T09:08:16.2248620Z Image Release: https://github.com/actions/virtual-environments/releases/tag/ubuntu20%2F20220131.1
2022-02-03T09:08:16.2249107Z ##[endgroup]


The logs are as follows:

2022-02-03T09:13:43.2043632Z TEST: java/util/DoubleStreamSums/CompensatedSums.java
2022-02-03T09:13:43.2044673Z TEST JDK: /home/runner/jdk-linux-x64/jdk-19-internal+0_linux-x64_bin/jdk-19
2022-02-03T09:13:43.2045028Z 
2022-02-03T09:13:43.2045420Z ACTION: build -- Passed. Build successful
2022-02-03T09:13:43.2045727Z REASON: Named class compiled on demand
2022-02-03T09:13:43.2046024Z TIME:   0.066 seconds
2022-02-03T09:13:43.2046257Z messages:
2022-02-03T09:13:43.2046512Z command: build CompensatedSums
2022-02-03T09:13:43.2046797Z reason: Named class compiled on demand
2022-02-03T09:13:43.2047063Z Test directory:
2022-02-03T09:13:43.2047319Z   compile: CompensatedSums
2022-02-03T09:13:43.2047694Z elapsed time (seconds): 0.066
2022-02-03T09:13:43.2047864Z 
2022-02-03T09:13:43.2048139Z ACTION: compile -- Passed. Compilation successful
2022-02-03T09:13:43.2048575Z REASON: .class file out of date or does not exist
2022-02-03T09:13:43.2048943Z TIME:   0.066 seconds
2022-02-03T09:13:43.2049236Z messages:
2022-02-03T09:13:43.2049631Z command: compile /home/runner/work/jdk/jdk/test/jdk/java/util/DoubleStreamSums/CompensatedSums.java
2022-02-03T09:13:43.2050135Z reason: .class file out of date or does not exist
2022-02-03T09:13:43.2050493Z Mode: agentvm
2022-02-03T09:13:43.2050725Z Agent id: 1
2022-02-03T09:13:43.2050981Z elapsed time (seconds): 0.066
2022-02-03T09:13:43.2051247Z configuration:
2022-02-03T09:13:43.2051507Z Boot Layer (javac runtime environment)
2022-02-03T09:13:43.2051840Z   class path: /home/runner/jtreg/lib/javatest.jar 
2022-02-03T09:13:43.2052169Z               /home/runner/jtreg/lib/jtreg.jar 
2022-02-03T09:13:43.2052948Z   patch:      java.base /home/runner/work/jdk/jdk/build/run-test-prebuilt/test-support/jtreg_test_jdk_tier1_part2/patches/java.base
2022-02-03T09:13:43.2053366Z 
2022-02-03T09:13:43.2053557Z javac compilation environment
2022-02-03T09:13:43.2053926Z   source path: /home/runner/work/jdk/jdk/test/jdk/java/util/DoubleStreamSums
2022-02-03T09:13:43.2054561Z   class path:  /home/runner/work/jdk/jdk/test/jdk/java/util/DoubleStreamSums
2022-02-03T09:13:43.2055340Z                /home/runner/work/jdk/jdk/build/run-test-prebuilt/test-support/jtreg_test_jdk_tier1_part2/classes/java/util/DoubleStreamSums/CompensatedSums.d
2022-02-03T09:13:43.2055888Z                /home/runner/jtreg/lib/testng.jar
2022-02-03T09:13:43.2056254Z                /home/runner/jtreg/lib/jcommander.jar
2022-02-03T09:13:43.2056634Z                /home/runner/jtreg/lib/guice.jar
2022-02-03T09:13:43.2056877Z 
2022-02-03T09:13:43.2057026Z rerun:
2022-02-03T09:13:43.2057514Z cd /home/runner/work/jdk/jdk/build/run-test-prebuilt/test-support/jtreg_test_jdk_tier1_part2/scratch && \
2022-02-03T09:13:43.2057949Z HOME=/home/runner \
2022-02-03T09:13:43.2058499Z JDK8_HOME=/home/runner/bootjdk/17 \
2022-02-03T09:13:43.2058875Z JTREG_KEYWORDS=!headful \
2022-02-03T09:13:43.2059404Z JTREG_VERBOSE=fail,error,time \
2022-02-03T09:13:43.2059700Z LANG=C.UTF-8 \
2022-02-03T09:13:43.2059939Z LC_ALL=C \
2022-02-03T09:13:43.2060179Z PATH=/bin:/usr/bin:/usr/sbin \
2022-02-03T09:13:43.2060797Z TEST_IMAGE_DIR=/home/runner/jdk-linux-x64/jdk-19-internal+0_linux-x64_bin-tests \
2022-02-03T09:13:43.2061320Z     /home/runner/jdk-linux-x64/jdk-19-internal+0_linux-x64_bin/jdk-19/bin/javac \
2022-02-03T09:13:43.2061722Z         -J-Xmx768m \
2022-02-03T09:13:43.2062081Z         -J-XX:MaxRAMPercentage=25 \
2022-02-03T09:13:43.2062782Z         -J-Djava.io.tmpdir=/home/runner/work/jdk/jdk/build/run-test-prebuilt/test-support/jtreg_test_jdk_tier1_part2/tmp \
2022-02-03T09:13:43.2063209Z         -J-ea \
2022-02-03T09:13:43.2063580Z         -J-esa \
2022-02-03T09:13:43.2063947Z         -J-XX:-CreateCoredumpOnCrash \
2022-02-03T09:13:43.2064515Z         -J-Djava.library.path=/home/runner/jdk-linux-x64/jdk-19-internal+0_linux-x64_bin-tests/jdk/jtreg/native \
2022-02-03T09:13:43.2065297Z         -J-Dtest.vm.opts='-Xmx768m -XX:MaxRAMPercentage=25 -Djava.io.tmpdir=/home/runner/work/jdk/jdk/build/run-test-prebuilt/test-support/jtreg_test_jdk_tier1_part2/tmp -ea -esa' \
2022-02-03T09:13:43.2066206Z         -J-Dtest.tool.vm.opts='-J-Xmx768m -J-XX:MaxRAMPercentage=25 -J-Djava.io.tmpdir=/home/runner/work/jdk/jdk/build/run-test-prebuilt/test-support/jtreg_test_jdk_tier1_part2/tmp -J-ea -J-esa' \
2022-02-03T09:13:43.2066789Z         -J-Dtest.compiler.opts= \
2022-02-03T09:13:43.2067230Z         -J-Dtest.java.opts=-XX:-CreateCoredumpOnCrash \
2022-02-03T09:13:43.2067765Z         -J-Dtest.jdk=/home/runner/jdk-linux-x64/jdk-19-internal+0_linux-x64_bin/jdk-19 \
2022-02-03T09:13:43.2068305Z         -J-Dcompile.jdk=/home/runner/jdk-linux-x64/jdk-19-internal+0_linux-x64_bin/jdk-19 \
2022-02-03T09:13:43.2068753Z         -J-Dtest.timeout.factor=4.0 \
2022-02-03T09:13:43.2069302Z         -J-Dtest.nativepath=/home/runner/jdk-linux-x64/jdk-19-internal+0_linux-x64_bin-tests/jdk/jtreg/native \
2022-02-03T09:13:43.2069821Z         -J-Dtest.root=/home/runner/work/jdk/jdk/test/jdk \
2022-02-03T09:13:43.2070301Z         -J-Dtest.name=java/util/DoubleStreamSums/CompensatedSums.java \
2022-02-03T09:13:43.2070886Z         -J-Dtest.file=/home/runner/work/jdk/jdk/test/jdk/java/util/DoubleStreamSums/CompensatedSums.java \
2022-02-03T09:13:43.2071447Z         -J-Dtest.src=/home/runner/work/jdk/jdk/test/jdk/java/util/DoubleStreamSums \
2022-02-03T09:13:43.2071992Z         -J-Dtest.src.path=/home/runner/work/jdk/jdk/test/jdk/java/util/DoubleStreamSums \
2022-02-03T09:13:43.2072727Z         -J-Dtest.classes=/home/runner/work/jdk/jdk/build/run-test-prebuilt/test-support/jtreg_test_jdk_tier1_part2/classes/java/util/DoubleStreamSums/CompensatedSums.d \
2022-02-03T09:13:43.2073873Z         -J-Dtest.class.path=/home/runner/work/jdk/jdk/build/run-test-prebuilt/test-support/jtreg_test_jdk_tier1_part2/classes/java/util/DoubleStreamSums/CompensatedSums.d \
2022-02-03T09:13:43.2074980Z         -J-Dtest.class.path.prefix=/home/runner/work/jdk/jdk/build/run-test-prebuilt/test-support/jtreg_test_jdk_tier1_part2/classes/java/util/DoubleStreamSums/CompensatedSums.d:/home/runner/work/jdk/jdk/test/jdk/java/util/DoubleStreamSums \
2022-02-03T09:13:43.2075879Z         -d /home/runner/work/jdk/jdk/build/run-test-prebuilt/test-support/jtreg_test_jdk_tier1_part2/classes/java/util/DoubleStreamSums/CompensatedSums.d \
2022-02-03T09:13:43.2076752Z         -sourcepath /home/runner/work/jdk/jdk/test/jdk/java/util/DoubleStreamSums \
2022-02-03T09:13:43.2078268Z         -classpath /home/runner/work/jdk/jdk/test/jdk/java/util/DoubleStreamSums:/home/runner/work/jdk/jdk/build/run-test-prebuilt/test-support/jtreg_test_jdk_tier1_part2/classes/java/util/DoubleStreamSums/CompensatedSums.d:/home/runner/jtreg/lib/testng.jar:/home/runner/jtreg/lib/jcommander.jar:/home/runner/jtreg/lib/guice.jar /home/runner/work/jdk/jdk/test/jdk/java/util/DoubleStreamSums/CompensatedSums.java
2022-02-03T09:13:43.2079028Z 
2022-02-03T09:13:43.2079494Z ACTION: testng -- Failed. Execution failed: `main' threw exception: java.lang.Exception: failures: 1
2022-02-03T09:13:43.2079919Z REASON: User specified action: run testng CompensatedSums 
2022-02-03T09:13:43.2080210Z TIME:   9.385 seconds
2022-02-03T09:13:43.2080429Z messages:
2022-02-03T09:13:43.2080750Z command: testng CompensatedSums
2022-02-03T09:13:43.2081160Z reason: User specified action: run testng CompensatedSums 
2022-02-03T09:13:43.2081519Z Mode: agentvm
2022-02-03T09:13:43.2081797Z Agent id: 5
2022-02-03T09:13:43.2082046Z elapsed time (seconds): 9.385
2022-02-03T09:13:43.2082383Z configuration:
2022-02-03T09:13:43.2082597Z Boot Layer
2022-02-03T09:13:43.2083010Z   class path: /home/runner/jtreg/lib/javatest.jar 
2022-02-03T09:13:43.2083446Z               /home/runner/jtreg/lib/jtreg.jar 
2022-02-03T09:13:43.2083840Z               /home/runner/jtreg/lib/junit.jar 
2022-02-03T09:13:43.2084240Z               /home/runner/jtreg/lib/hamcrest.jar 
2022-02-03T09:13:43.2084630Z               /home/runner/jtreg/lib/testng.jar 
2022-02-03T09:13:43.2085041Z               /home/runner/jtreg/lib/jcommander.jar 
2022-02-03T09:13:43.2085443Z               /home/runner/jtreg/lib/guice.jar 
2022-02-03T09:13:43.2086278Z   patch:      java.base /home/runner/work/jdk/jdk/build/run-test-prebuilt/test-support/jtreg_test_jdk_tier1_part2/patches/java.base
2022-02-03T09:13:43.2086688Z 
2022-02-03T09:13:43.2102383Z Test Layer
2022-02-03T09:13:43.2103243Z   class path: /home/runner/work/jdk/jdk/build/run-test-prebuilt/test-support/jtreg_test_jdk_tier1_part2/classes/java/util/DoubleStreamSums/CompensatedSums.d
2022-02-03T09:13:43.2103955Z               /home/runner/work/jdk/jdk/test/jdk/java/util/DoubleStreamSums
2022-02-03T09:13:43.2104291Z 
2022-02-03T09:13:43.2143945Z rerun:
2022-02-03T09:13:43.2152184Z cd /home/runner/work/jdk/jdk/build/run-test-prebuilt/test-support/jtreg_test_jdk_tier1_part2/scratch && \
2022-02-03T09:13:43.2152617Z HOME=/home/runner \
2022-02-03T09:13:43.2152894Z JDK8_HOME=/home/runner/bootjdk/17 \
2022-02-03T09:13:43.2153161Z JTREG_KEYWORDS=!headful \
2022-02-03T09:13:43.2153444Z JTREG_VERBOSE=fail,error,time \
2022-02-03T09:13:43.2153763Z LANG=C.UTF-8 \
2022-02-03T09:13:43.2153976Z LC_ALL=C \
2022-02-03T09:13:43.2154222Z PATH=/bin:/usr/bin:/usr/sbin \
2022-02-03T09:13:43.2154711Z TEST_IMAGE_DIR=/home/runner/jdk-linux-x64/jdk-19-internal+0_linux-x64_bin-tests \
2022-02-03T09:13:43.2155263Z     /home/runner/jdk-linux-x64/jdk-19-internal+0_linux-x64_bin/jdk-19/bin/java \
2022-02-03T09:13:43.2156191Z         -Dtest.vm.opts='-Xmx768m -XX:MaxRAMPercentage=25 -Djava.io.tmpdir=/home/runner/work/jdk/jdk/build/run-test-prebuilt/test-support/jtreg_test_jdk_tier1_part2/tmp -ea -esa' \
2022-02-03T09:13:43.2157133Z         -Dtest.tool.vm.opts='-J-Xmx768m -J-XX:MaxRAMPercentage=25 -J-Djava.io.tmpdir=/home/runner/work/jdk/jdk/build/run-test-prebuilt/test-support/jtreg_test_jdk_tier1_part2/tmp -J-ea -J-esa' \
2022-02-03T09:13:43.2157693Z         -Dtest.compiler.opts= \
2022-02-03T09:13:43.2158070Z         -Dtest.java.opts=-XX:-CreateCoredumpOnCrash \
2022-02-03T09:13:43.2158568Z         -Dtest.jdk=/home/runner/jdk-linux-x64/jdk-19-internal+0_linux-x64_bin/jdk-19 \
2022-02-03T09:13:43.2159102Z         -Dcompile.jdk=/home/runner/jdk-linux-x64/jdk-19-internal+0_linux-x64_bin/jdk-19 \
2022-02-03T09:13:43.2159510Z         -Dtest.timeout.factor=4.0 \
2022-02-03T09:13:43.2160015Z         -Dtest.nativepath=/home/runner/jdk-linux-x64/jdk-19-internal+0_linux-x64_bin-tests/jdk/jtreg/native \
2022-02-03T09:13:43.2160498Z         -Dtest.root=/home/runner/work/jdk/jdk/test/jdk \
2022-02-03T09:13:43.2160960Z         -Dtest.name=java/util/DoubleStreamSums/CompensatedSums.java \
2022-02-03T09:13:43.2161527Z         -Dtest.file=/home/runner/work/jdk/jdk/test/jdk/java/util/DoubleStreamSums/CompensatedSums.java \
2022-02-03T09:13:43.2162060Z         -Dtest.src=/home/runner/work/jdk/jdk/test/jdk/java/util/DoubleStreamSums \
2022-02-03T09:13:43.2162794Z         -Dtest.src.path=/home/runner/work/jdk/jdk/test/jdk/java/util/DoubleStreamSums \
2022-02-03T09:13:43.2163536Z         -Dtest.classes=/home/runner/work/jdk/jdk/build/run-test-prebuilt/test-support/jtreg_test_jdk_tier1_part2/classes/java/util/DoubleStreamSums/CompensatedSums.d \
2022-02-03T09:13:43.2164393Z         -Dtest.class.path=/home/runner/work/jdk/jdk/build/run-test-prebuilt/test-support/jtreg_test_jdk_tier1_part2/classes/java/util/DoubleStreamSums/CompensatedSums.d \
2022-02-03T09:13:43.2165394Z         -Dtest.class.path.prefix=/home/runner/work/jdk/jdk/build/run-test-prebuilt/test-support/jtreg_test_jdk_tier1_part2/classes/java/util/DoubleStreamSums/CompensatedSums.d:/home/runner/work/jdk/jdk/test/jdk/java/util/DoubleStreamSums \
2022-02-03T09:13:43.2166997Z         -classpath /home/runner/work/jdk/jdk/build/run-test-prebuilt/test-support/jtreg_test_jdk_tier1_part2/classes/java/util/DoubleStreamSums/CompensatedSums.d:/home/runner/work/jdk/jdk/test/jdk/java/util/DoubleStreamSums:/home/runner/jtreg/lib/testng.jar:/home/runner/jtreg/lib/jcommander.jar:/home/runner/jtreg/lib/guice.jar:/home/runner/jtreg/lib/javatest.jar:/home/runner/jtreg/lib/jtreg.jar \
2022-02-03T09:13:43.2167817Z         com.sun.javatest.regtest.agent.TestNGRunner java/util/DoubleStreamSums/CompensatedSums.java false CompensatedSums
2022-02-03T09:13:43.2168173Z STDOUT:
2022-02-03T09:13:43.2168428Z test CompensatedSums.testCompensatedSums(): failure
2022-02-03T09:13:43.2168748Z java.lang.AssertionError: expected [true] but found [false]
2022-02-03T09:13:43.2169046Z 	at org.testng.Assert.fail(Assert.java:99)
2022-02-03T09:13:43.2169348Z 	at org.testng.Assert.failNotEquals(Assert.java:1037)
2022-02-03T09:13:43.2169655Z 	at org.testng.Assert.assertTrue(Assert.java:45)
2022-02-03T09:13:43.2169958Z 	at org.testng.Assert.assertTrue(Assert.java:55)
2022-02-03T09:13:43.2170306Z 	at CompensatedSums.testCompensatedSums(CompensatedSums.java:88)
2022-02-03T09:13:43.2171030Z 	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
2022-02-03T09:13:43.2171575Z 	at java.base/java.lang.reflect.Method.invoke(Method.java:577)
2022-02-03T09:13:43.2172091Z 	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:132)
2022-02-03T09:13:43.2172625Z 	at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:599)
2022-02-03T09:13:43.2173115Z 	at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:174)
2022-02-03T09:13:43.2173609Z 	at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
2022-02-03T09:13:43.2174123Z 	at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:822)
2022-02-03T09:13:43.2174636Z 	at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:147)
2022-02-03T09:13:43.2175181Z 	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
2022-02-03T09:13:43.2175703Z 	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
2022-02-03T09:13:43.2176125Z 	at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
2022-02-03T09:13:43.2176518Z 	at org.testng.TestRunner.privateRun(TestRunner.java:764)
2022-02-03T09:13:43.2176886Z 	at org.testng.TestRunner.run(TestRunner.java:585)
2022-02-03T09:13:43.2177256Z 	at org.testng.SuiteRunner.runTest(SuiteRunner.java:384)
2022-02-03T09:13:43.2177652Z 	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:378)
2022-02-03T09:13:43.2178073Z 	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:337)
2022-02-03T09:13:43.2178455Z 	at org.testng.SuiteRunner.run(SuiteRunner.java:286)
2022-02-03T09:13:43.2178853Z 	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
2022-02-03T09:13:43.2179295Z 	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
2022-02-03T09:13:43.2179715Z 	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1218)
2022-02-03T09:13:43.2180137Z 	at org.testng.TestNG.runSuitesLocally(TestNG.java:1140)
2022-02-03T09:13:43.2180487Z 	at org.testng.TestNG.runSuites(TestNG.java:1069)
2022-02-03T09:13:43.2180898Z 	at org.testng.TestNG.run(TestNG.java:1037)
2022-02-03T09:13:43.2181313Z 	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:94)
2022-02-03T09:13:43.2181888Z 	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
2022-02-03T09:13:43.2182417Z 	at java.base/java.lang.reflect.Method.invoke(Method.java:577)
2022-02-03T09:13:43.2182915Z 	at com.sun.javatest.regtest.agent.MainActionHelper$AgentVMRunnable.run(MainActionHelper.java:312)
2022-02-03T09:13:43.2238287Z 	at java.base/java.lang.Thread.run(Thread.java:828)
2022-02-03T09:13:43.2238489Z 
2022-02-03T09:13:43.2238782Z ===============================================
2022-02-03T09:13:43.2239048Z java/util/DoubleStreamSums/CompensatedSums.java
2022-02-03T09:13:43.2239341Z Total tests run: 1, Passes: 0, Failures: 1, Skips: 0
2022-02-03T09:13:43.2239573Z ===============================================;;;","2022-02-16 23:41;goetz;We see this failure too:

17.Feb.22    fastdebug    linuxx86_64      17    
23.Jan.22    fastdebug    linuxppc64le     18    
13.Dec.21    fastdebug    linuxppc64le     17    
22.Nov.21    product      linuxaarch64     18      ;;;","2022-03-14 11:42;dcubed;Here's a log file snippet for the jdk-19+14-847-tier1 sighting: 

java/util/DoubleStreamSums/CompensatedSums.java

----------System.out:(41/2521)----------
test CompensatedSums.testCompensatedSums(): failure
java.lang.AssertionError: expected [true] but found [false]
	at org.testng.Assert.fail(Assert.java:99)
	at org.testng.Assert.failNotEquals(Assert.java:1037)
	at org.testng.Assert.assertTrue(Assert.java:45)
	at org.testng.Assert.assertTrue(Assert.java:55)
	at CompensatedSums.testCompensatedSums(CompensatedSums.java:88)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:577)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:132)
	at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:599)
	at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:174)
	at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
	at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:822)
	at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:147)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
	at org.testng.TestRunner.privateRun(TestRunner.java:764)
	at org.testng.TestRunner.run(TestRunner.java:585)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:384)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:378)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:337)
	at org.testng.SuiteRunner.run(SuiteRunner.java:286)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1218)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1140)
	at org.testng.TestNG.runSuites(TestNG.java:1069)
	at org.testng.TestNG.run(TestNG.java:1037)
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:94)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:577)
	at com.sun.javatest.regtest.agent.MainActionHelper$AgentVMRunnable.run(MainActionHelper.java:312)
	at java.base/java.lang.Thread.run(Thread.java:828)

===============================================
java/util/DoubleStreamSums/CompensatedSums.java
Total tests run: 1, Passes: 0, Failures: 1, Skips: 0
===============================================;;;","2022-04-11 08:53;rgiulietti;Despite the method's comment in the test, computeFinalSum(double[]) is not the same as in Collectors (in JDK 19):

first code line in the test class
    double tmp = summands[0] + summands[1];

first code line in Collectors
    double tmp = summands[0] - summands[1];

I didn't dive in the Kahan summation implementation, though, so the difference might be legit.;;;","2022-04-19 01:45;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/8290
Date: 2022-04-19 08:40:51 +0000;;;","2022-05-09 07:55;dukebot;Changeset: 97a98352
Author:    Raffaello Giulietti <raffaello.giulietti@oracle.com>
Committer: Alan Bateman <alanb@openjdk.org>
Date:      2022-05-09 14:53:10 +0000
URL:       https://git.openjdk.java.net/jdk/commit/97a983526b41d26fcd1caa162a089690119874b0
;;;","2022-06-10 01:33;goetz;Fix request [11u/17u]

I backport this test fix to fix issues we see in the Pre-submit tests. E.g.:
11: https://github.com/openjdk-bots/jdk17u-dev/runs/6817698220?check_suite_focus=true
17: https://github.com/openjdk-bots/jdk17u-dev/runs/6817698220?check_suite_focus=true
Clean backport.
Test passes. SAP nighlty testing passed (11/17).;;;","2022-06-10 01:37;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/460
Date: 2022-06-10 08:30:34 +0000;;;","2022-06-10 01:43;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk11u-dev/pull/1140
Date: 2022-06-10 08:36:27 +0000;;;",,,,,,,,,,,,,,,,,
Remove stray * and stylistic . from doc comments,JDK-8274509,5059481,Bug,Resolved,JDK,JDK,software,duke,,,P5,Fixed,prappo,prappo,prappo,2021-09-29 05:46,2021-10-06 18:02,2023-10-01 09:57,2021-09-29 10:11,17,,,,,,,18,core-libs,,0,noreg-doc,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2ui57:",9223372036854775807,b18,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@674604a9,,,,,,,,,"2021-09-29 10:11;roboduke;Changeset: 97b28742
Author:    Pavel Rappo <prappo@openjdk.org>
Date:      2021-09-29 17:09:08 +0000
URL:       https://git.openjdk.java.net/jdk/commit/97b28742b4d3083cadbe4dc10b625ec9fb944353
;;;",,,,,,,,,,,,,,,,,,,,,,,,,
TestPids.java and TestPidsLimit.java fail with podman run as root,JDK-8274506,5059478,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,sgehwolf,sgehwolf,sgehwolf,2021-09-29 05:24,2022-06-27 01:21,2023-10-01 09:57,2021-09-30 01:55,17,18,,,,,,18,hotspot,,0,containers,jdk11u-fix-request,jdk11u-fix-yes,jdk17u-fix-request,jdk17u-fix-yes,noreg-self,testbug,,,,,,,,,,,,,,,"After JDK-8266490 the new tests added with it fail when run via podman as root:

[COMMAND]
podman run --tty=true --rm --volume /disk/openjdk/upstream-sources/git/jdk-jdk/JTwork/hotspot_jtreg/classes/containers/docker/TestPids.d:/test-classes/ --pids-limit=-1 jdk-internal:test-pids /jdk/bin/java -Xlog:os+container=trace -cp /test-classes/ -Xbootclasspath/a:/test-classes/whitebox.jar -XX:+UnlockDiagnosticVMOptions -XX:+WhiteBoxAPI -Djdk.test.docker.image.name=fedora -Djdk.test.docker.image.version=34 -Djdk.test.container.command=podman PrintContainerInfo


----------System.err:(24/1172)----------
 stdout: [];
 stderr: [Error: OCI runtime error: writing file `pids.max`: Invalid argument
]
 exitValue = 126

java.lang.RuntimeException: Expected to get exit value of [0]

        at jdk.test.lib.process.OutputAnalyzer.shouldHaveExitValue(OutputAnalyzer.java:489)
        at jdk.test.lib.containers.docker.Common.run(Common.java:85)
        at TestPids.testPids(TestPids.java:134)
        at TestPids.testPids(TestPids.java:71)
        at TestPids.main(TestPids.java:58)
        at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
        at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
        at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
        at java.base/java.lang.reflect.Method.invoke(Method.java:568)
        at com.sun.javatest.regtest.agent.MainWrapper$MainThread.run(MainWrapper.java:127)
        at java.base/java.lang.Thread.run(Thread.java:833)

JavaTest Message: Test threw exception: java.lang.RuntimeException: Expected to get exit value of [0]

[COMMAND]
podman run --tty=true --rm --pids-limit=-1 jdk-internal:test-pids /jdk/bin/java -XshowSettings:system -Djdk.test.docker.image.name=fedora -Djdk.test.docker.image.version=34 -Djdk.test.container.command=podman -version

----------System.err:(22/1095)----------
 stdout: [];
 stderr: [Error: OCI runtime error: writing file `pids.max`: Invalid argument
]
 exitValue = 126

java.lang.RuntimeException: Expected to get exit value of [0]

        at jdk.test.lib.process.OutputAnalyzer.shouldHaveExitValue(OutputAnalyzer.java:489)
        at TestPidsLimit.testPidsLimit(TestPidsLimit.java:116)
        at TestPidsLimit.main(TestPidsLimit.java:56)
        at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
        at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
        at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
        at java.base/java.lang.reflect.Method.invoke(Method.java:568)
        at com.sun.javatest.regtest.agent.MainWrapper$MainThread.run(MainWrapper.java:127)
        at java.base/java.lang.Thread.run(Thread.java:833)

JavaTest Message: Test threw exception: java.lang.RuntimeException: Expected to get exit value of [0]",,,,,,,,,,,JDK-8280014,JDK-8280036,JDK-8289200,,,,,,,,,,,,,,,,,,,,,,JDK-8266490,,,,,,,,,,,,,,,generic,,,,,,,,,linux,,,,,"0|i2ui4j:",9223372036854775807,b18,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@78d03d9a,,,,,,,,,"2021-09-29 05:26;sgehwolf;This is actually a podman/docker run inconsistency which I've reported here:

https://github.com/containers/podman/issues/11782

For the time being we should be passing '0' instead of '-1' for podman.;;;","2021-09-30 01:55;roboduke;Changeset: 94e31e5c
Author:    Severin Gehwolf <sgehwolf@openjdk.org>
Date:      2021-09-30 08:53:31 +0000
URL:       https://git.openjdk.java.net/jdk/commit/94e31e5ca51d1c4c253cf7ac5acd950d10c22267
;;;","2022-01-13 23:49;mbaesken;Fix Request (17u)
I would like to have the patch in 17u as well, because the issue is present there too. The patch applies cleanly.;;;","2022-01-13 23:55;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk17u-dev/pull/95
Date: 2022-01-14 07:51:41 +0000;;;","2022-06-24 06:03;mbaesken;Fix Request (11u)
After the integration of 8266490 to jdk11u-dev we should integrate this one as well to jdk11u-dev.  The patch applies cleanly. Low risk, only test changes.;;;","2022-06-24 06:07;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk11u-dev/pull/1186
Date: 2022-06-24 12:59:26 +0000;;;",,,,,,,,,,,,,,,,,,,,
Too weak variable type leads to unnecessary cast in java.desktop,JDK-8274505,5059477,Bug,Resolved,JDK,JDK,software,duke,,,P5,Fixed,aturbanov,aturbanov,aturbanov,2021-09-29 04:10,2021-10-06 18:04,2023-10-01 09:57,2021-10-01 20:08,17,18,,,,,,18,client-libs,,0,,,,,,,,,,,,,,,,,,,,,,"There are several redundant casts, caused by fact, that related declared variable has too weak type.
They are detected by IntelliJ IDEA inspection 'Too weak variable type leads to unnecessary cast' ",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2ui4b:",9223372036854775807,b18,,,,,,,,,,,,"2021-10-01 20:08;roboduke;Changeset: 9ca6bf0d
Author:    Andrey Turbanov <turbanoff@gmail.com>
Committer: Sergey Bylokhov <serb@openjdk.org>
Date:      2021-10-02 03:06:29 +0000
URL:       https://git.openjdk.java.net/jdk/commit/9ca6bf0d22ac39d4ee29c756903038f09087ca12
;;;",,,,,,,,,,,,,,,,,,,,,,,,,
c2i entry barriers read int as long on AArch64,JDK-8274501,5059472,Bug,Closed,JDK,JDK,software,duke,,,P2,Fixed,eosterlund,eosterlund,eosterlund,2021-09-29 03:11,2022-02-10 14:26,2023-10-01 09:57,2021-09-30 08:53,15,17,18,,,,,18,hotspot,,0,azul-interest,jdk15u-fix-request,jdk15u-fix-yes,jdk17u-fix-request,jdk17u-fix-SQE-ok,jdk17u-fix-yes,redhat-interest,,,,,,,,,,,,,,,"There was a bug in the x86_64 implementation of the c2i entry barriers. We read the CLD::_keep_alive int as a 64 bit integer, while it is of course in fact a 32 bit integer. It was fixed in the patch that ported it to x86_32 (JDK-8235262). However, somewhere in-between I think the wrong code was used as a basis for the AArch64 implementation, which now seemingly has that same bug.",,,,,,,,,,,JDK-8277269,JDK-8275794,JDK-8277039,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8216557,JDK-8274550,,,,,,,,,aarch64,,,,,,,,,,,,,,"0|i2ui37:",9223372036854775807,b18,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6b00f96c,,,,,,,Verified,,"2021-09-29 03:16;eosterlund;Similar to when the bug was discovered on x86_64, this doesn't seem to cause any actual failures. But it should be fixed either way.;;;","2021-09-30 08:53;roboduke;Changeset: f08180f3
Author:    Erik Österlund <eosterlund@openjdk.org>
Date:      2021-09-30 15:52:36 +0000
URL:       https://git.openjdk.java.net/jdk/commit/f08180f35f18263e33d96b6d1f06e5129328f01a
;;;","2021-10-04 07:15;shade;Introduced as part of JDK-8216557 in 15.;;;","2021-10-22 04:28;dbuck;Removing jdk17u-fix-request label for now. Please see rule 1 (https://openjdk.java.net/projects/jdk-updates/approval.html).;;;","2021-10-22 05:59;snazarki;Fix Request
Trivial fix for jdk17u and jdk15u in AARCH64 platform code. Should get backported to fix obvious bug. Applies cleanly. ;;;",,,,,,,,,,,,,,,,,,,,,
Unnecessary Vector usage in AquaFileSystemModel,JDK-8274497,5059468,Bug,Resolved,JDK,JDK,software,duke,,,P5,Fixed,aturbanov,aturbanov,aturbanov,2021-09-29 01:43,2021-10-13 17:38,2023-10-01 09:57,2021-10-06 20:43,16,17,,,,,,18,client-libs,,0,,,,,,,,,,,,,,,,,,,,,,"Fields 'AquaFileSystemModel.fileCache' and 'AquaFileSystemModel.FilesLoader.queuedTasks' are accessed only under synchronized(fileCacheLock).
It means extract synchronization by Vector is not needed. And we can use non-thread safe ArrayList instead.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2ui2b:",9223372036854775807,b19,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@568a5b31,,,,,,,,,"2021-10-06 20:43;roboduke;Changeset: 4e960fe5
Author:    Andrey Turbanov <turbanoff@gmail.com>
Committer: Sergey Bylokhov <serb@openjdk.org>
Date:      2021-10-07 03:42:50 +0000
URL:       https://git.openjdk.java.net/jdk/commit/4e960fe53f0948c0b0decfeb13f6dd8f74bf3d6f
;;;",,,,,,,,,,,,,,,,,,,,,,,,,
Add support for RSASSA-PSS in OCSP Response,JDK-8274471,5059414,Bug,Closed,JDK,JDK,software,duke,,,P3,Fixed,weijun,webbuggrp,webbuggrp,2021-09-28 07:14,2023-06-06 02:38,2023-10-01 09:57,2021-10-04 08:32,11,17,18,8,,,,18,security-libs,,0,additional-information-received,dcsaw,jdk11u-todo,jdk17u-fix-request,jdk17u-fix-yes,release-note=yes,reproducer-yes,webbug,,,,,,,,,,,,,,"ADDITIONAL SYSTEM INFORMATION :
C:\work\java\jdk-11.0.2\bin>java -version
openjdk version ""11.0.2"" 2019-01-15
OpenJDK Runtime Environment 18.9 (build 11.0.2+9)
OpenJDK 64-Bit Server VM 18.9 (build 11.0.2+9, mixed mode)

Windows 10

A DESCRIPTION OF THE PROBLEM :
Verification of OCSP Response signed with RSASSA-PSS fails even it works with openssl library.

Java runtime throws an exception with message ""Parameters required for RSASSA-PSS signatures"" during trying to verify the signature of an OCSP Response. 

Certificate under test has an intermediate and root certificate in chain but OCSP Response is signed by another certificate, which is signed by the same root.

OCSP Response contains the signer certificate. Java can verify the OCSP signer certificate but verification of the Response message fails. Same certificate chain can be verified by the openssl command line tool.


STEPS TO FOLLOW TO REPRODUCE THE PROBLEM :
Use Java CertPathValidator.validate method to validate the revocation status of a certificate and see that it is not working due to an internal error.

EXPECTED VERSUS ACTUAL BEHAVIOR :
EXPECTED -
Results returned by Java about the revocation status should be consistent with the openssl library since certificate is not revoked.

Response from openssl:
edi_vertrieb_strom_abita@datenaustausch-service.de.cer: good
 This Update: Sep 21 15:31:32 2021 GMT
 Next Update: Sep 21 16:31:32 2021 GMT
Response verify OK

ACTUAL -
Example program is started with -Djava.security.auth.debug=certpath,ocsp

start program
...
certpath: KeySizeConstraints.permits(): RSA
certpath: Responder's certificate includes the extension id-pkix-ocsp-nocheck.
certpath: OCSP response is signed by an Authorized Responder
...
certpath: RevocationChecker.check() java.security.SignatureException: Parameters required for RSASSA-PSS signatures
certpath: RevocationChecker.check() preparing to failover
.....
Parameters required for RSASSA-PSS signatures
end program


---------- BEGIN SOURCE ----------

import java.io.ByteArrayInputStream;
import java.io.IOException;
import java.security.GeneralSecurityException;
import java.security.KeyStore;
import java.security.Security;
import java.security.cert.CertPath;
import java.security.cert.CertPathValidator;
import java.security.cert.CertPathValidatorException;
import java.security.cert.CertPathValidatorResult;
import java.security.cert.Certificate;
import java.security.cert.CertificateFactory;
import java.security.cert.PKIXParameters;
import java.util.Arrays;
import java.util.Date;

public class Main {

    private static final String APPLICATION = ""-----BEGIN CERTIFICATE-----\n"" +
            ""MIIHATCCBLWgAwIBAgIIBzJDL6Dfy7swQQYJKoZIhvcNAQEKMDSgDzANBglghkgB\n"" +
            ""ZQMEAgEFAKEcMBoGCSqGSIb3DQEBCDANBglghkgBZQMEAgEFAKIDAgEgMGQxMDAu\n"" +
            ""BgNVBAMMJ3Byb2NpbG9uIEdST1VQIEN1c3RvbWVyIENBIC0gRURJRkFDVCAwMjEP\n"" +
            ""MA0GA1UECwwGU3ViIENBMRIwEAYDVQQKDAlTUEktQ0xPVUQxCzAJBgNVBAYTAkRF\n"" +
            ""MB4XDTIwMDQxNDEzNDA0MVoXDTIzMDQxNDEzNDA0MVowgcoxQTA/BgkqhkiG9w0B\n"" +
            ""CQEWMmVkaV92ZXJ0cmllYl9zdHJvbV9hYml0YUBkYXRlbmF1c3RhdXNjaC1zZXJ2\n"" +
            ""aWNlLmRlMRUwEwYDVQQDDAxWZXJ0cmllYiBTV0sxETAPBgNVBAsMCFZlcnRyaWVi\n"" +
            ""MTUwMwYDVQQKDCxTV0sgU3RhZHR3ZXJrZSBLYWlzZXJzbGF1dGVybiBWZXJzb3Jn\n"" +
            ""dW5ncy1BRzEXMBUGA1UEBwwOS2Fpc2Vyc2xhdXRlcm4xCzAJBgNVBAYTAkRFMIIB\n"" +
            ""IjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAg7bTfGMD8uXn0zPdCjjS3XqP\n"" +
            ""b5v7R9dJVU2tpHTImlYFRKPqrnm0tJ2y1pvbk3iq9TUuJ7aK83n16cnLsE+IwW7f\n"" +
            ""I2QcJjF5iVB+WAtw8oRHReY+rvsdX4VtlCjDDrfOfB1XVE6FjWjwy7sS938+bDe+\n"" +
            ""r2Y9t2dpW2mZQ7TLhJRBebhHPrQNtZD/l5cWNPDsSY2y2Ir5eI0eko9C+m3HQThD\n"" +
            ""sNS5C9tPHDoHy+rKWGmgl5jd+DsKQCu79308vhw+e1zmq0IF1GIVXrlzY3cLcBrP\n"" +
            ""3WY4fNWfn6b0HVrtLSPjenn7b5cKEG3qEbjfQ8IUpDny2S4fa0jgeacCMNIL5wID\n"" +
            ""AQABo4IB5jCCAeIwawYIKwYBBQUHAQEEXzBdMCwGCCsGAQUFBzAChiBodHRwczov\n"" +
            ""L3BraS5zcGktY2xvdWQuY29tL2lzc3VlcjAtBggrBgEFBQcwAYYhaHR0cDovL29j\n"" +
            ""c3Auc3BpLWNsb3VkLmNvbS9zdGF0dXMvMB0GA1UdDgQWBBS5fNPRn5R3jnOUNZea\n"" +
            ""qIBdyUkIkDAMBgNVHRMBAf8EAjAAMB8GA1UdIwQYMBaAFLRScBn+HHr8CzX4H8cM\n"" +
            ""Rxb4nKbbMIHABgNVHR8EgbgwgbUwgbKgRqBEhkJodHRwOi8vcGtpLnNwaS1jbG91\n"" +
            ""ZC5jb20vY3JsL3Byb2NpbG9uX0dST1VQX0N1c3RvbWVyX0NBX0VESUZBQ1RfMDKi\n"" +
            ""aKRmMGQxMDAuBgNVBAMMJ3Byb2NpbG9uIEdST1VQIEN1c3RvbWVyIENBIC0gRURJ\n"" +
            ""RkFDVCAwMjEPMA0GA1UECwwGU3ViIENBMRIwEAYDVQQKDAlTUEktQ0xPVUQxCzAJ\n"" +
            ""BgNVBAYTAkRFMA4GA1UdDwEB/wQEAwIEsDATBgNVHSUEDDAKBggrBgEFBQcDBDA9\n"" +
            ""BgNVHREENjA0gTJlZGlfdmVydHJpZWJfc3Ryb21fYWJpdGFAZGF0ZW5hdXN0YXVz\n"" +
            ""Y2gtc2VydmljZS5kZTBBBgkqhkiG9w0BAQowNKAPMA0GCWCGSAFlAwQCAQUAoRww\n"" +
            ""GgYJKoZIhvcNAQEIMA0GCWCGSAFlAwQCAQUAogMCASADggIBAGHartmLOBxHHS7W\n"" +
            ""owTM0RaZ1rODYVwLiRPBUATZEbReco/wtbyPu3PhmDORutQsf3UF6dhgpw3Kgmvi\n"" +
            ""r0FuWp76YIpJ6eEtgycOw9nO9Qxv6m6eOJVUh8IB+ri2G0mdWwI/HON7FGPgXeeU\n"" +
            ""56zlK+REwD54uZ2pkIK/O13DmebcxzGnVj4BxfaFFdv4bwypYTvUzlAzExI/yewy\n"" +
            ""1A0TNEopz3SHZKavKBaQ7+baYcqWpsDPL5LqU7JpmWLOjtQgY5LT1hpDxowt1IKd\n"" +
            ""kfJQBmjeKReJVHrbdgYKuXb6OsBujoVWGHkFInCGmJuAWjVLEUSTuiMAFV6kY+u2\n"" +
            ""3FSWMoDg3wZeQ1ToYgBWXuV4+rgoVKLIQxrZ6D8VygDFJTLg8aoeIMKOUCArdTR1\n"" +
            ""7VUHCbnXaxDObKErSI6UWAIYcdfRAb+5yN8Jp/eRGjAZN/eHch6UakKLVypR2E+h\n"" +
            ""Yjrw9wR4j8eKG/k7+guRst9J4Qxn71jxBha3Bjp9+20uwByz40/nT5+wB5rxxoDN\n"" +
            ""Oz67KutDqgQPufvlQBe2/2QJs/TUWifJkQuD3+5XHlBYcyoIJYkZZiO+AVlIbeU5\n"" +
            ""iZ6FNs5led6EN3bk+ZzJHNh+DNEpCrsZnkOsT52Npj8FRyg/84Zy/5pJUr/gCyRS\n"" +
            ""AffV+edGqkmMRrHUxqZ4zMecnn2B\n"" +
            ""-----END CERTIFICATE-----\n"";

    private static final String INTERMEDIATE = ""-----BEGIN CERTIFICATE-----\n"" +
            ""MIIHPDCCBPCgAwIBAgIITbAjxatoRTgwQQYJKoZIhvcNAQEKMDSgDzANBglghkgB\n"" +
            ""ZQMEAgEFAKEcMBoGCSqGSIb3DQEBCDANBglghkgBZQMEAgEFAKIDAgEgMF8xKjAo\n"" +
            ""BgNVBAMMIXByb2NpbG9uIEdST1VQIEN1c3RvbWVyIFJvb3RDQSAwMjEQMA4GA1UE\n"" +
            ""CwwHUm9vdCBDQTESMBAGA1UECgwJU1BJLUNMT1VEMQswCQYDVQQGEwJERTAeFw0x\n"" +
            ""OTEyMDIxMTE1MzBaFw0yNDExMzAxMTE1MzBaMGQxMDAuBgNVBAMMJ3Byb2NpbG9u\n"" +
            ""IEdST1VQIEN1c3RvbWVyIENBIC0gRURJRkFDVCAwMjEPMA0GA1UECwwGU3ViIENB\n"" +
            ""MRIwEAYDVQQKDAlTUEktQ0xPVUQxCzAJBgNVBAYTAkRFMIICIjANBgkqhkiG9w0B\n"" +
            ""AQEFAAOCAg8AMIICCgKCAgEAg4m1dq9k2xFYoRigYgHkiSBnuI3nDtIgD9ISWuMB\n"" +
            ""AqYffalpceOT/kK3qmhW4h/bease6GdnBwF5oudB+QpIkD1Bc3eB2rDHrBybYrF9\n"" +
            ""FDT6QaWXb7IoBN1DXQsZoS5VdZMVBx+uvmq9l6XAgA9UwA67hZ3jy8mWcv7umlVU\n"" +
            ""Ukak1682xRUt2VU2z02A2ax4PCTyHb20XMVNTlvbhmhhsphXIia7XgDQ65/a7i5d\n"" +
            ""Hl3tHZX9V2fGRwMxWgNSN3N66xasNVahtzGXKrF8sc93RHxu67P+/JCiaUs5OBBU\n"" +
            ""Gt60DC0FrswljKSSBvANwQgMSgDbR2uNTos1qAfbkVMNRgcotEUrnjv8n9QUCC1V\n"" +
            ""6GyPUzAmyCeHDfubbJHY/GycqZewX2EqJJJNER69aX6/sHDsnUZ2X8AHmNYWDc1r\n"" +
            ""5tsw8MEJLwL7mZOox185rYjOAsOvBdod+0wRHGRqL5qECmI0ntXf6cAOgNB7kzy1\n"" +
            ""stqRJSQcCOqq91FTX0TFU0WTr3qGDfztaLDBQMw4tvpy5pLDK+aFUMWCe0cwDgne\n"" +
            ""1D+T/F5AKQrduosmlq5FIPMyhxixFPBg4xn3dWWorCRWxvzDDkvUFK1zrQ7dZAWO\n"" +
            ""V06dhRjrxXyCakDh3FFn/LAs24XUS8MnowpqpX/mUdsxlz1TiKkAZW5r67Lq6Z0s\n"" +
            ""krMCAwEAAaOCAY0wggGJMGkGCCsGAQUFBwEBBF0wWzAqBggrBgEFBQcwAoYeaHR0\n"" +
            ""cHM6Ly9wa2kucHJvdGVjdHIuZGUvaXNzdWVyMC0GCCsGAQUFBzABhiFodHRwOi8v\n"" +
            ""b2NzcC5zcGktY2xvdWQuY29tL3N0YXR1cy8wHQYDVR0OBBYEFLRScBn+HHr8CzX4\n"" +
            ""H8cMRxb4nKbbMBIGA1UdEwEB/wQIMAYBAf8CAQAwHwYDVR0jBBgwFoAUIUT6yHSx\n"" +
            ""qwB8Kh41w07l/dyQR6gwgbcGA1UdHwSBrzCBrDCBqaBCoECGPmh0dHA6Ly9wa2ku\n"" +
            ""c3BpLWNsb3VkLmNvbS9jcmwvcHJvY2lsb25fR1JPVVBfQ3VzdG9tZXJfUm9vdENB\n"" +
            ""XzAyomOkYTBfMSowKAYDVQQDDCFwcm9jaWxvbiBHUk9VUCBDdXN0b21lciBSb290\n"" +
            ""Q0EgMDIxEDAOBgNVBAsMB1Jvb3QgQ0ExEjAQBgNVBAoMCVNQSS1DTE9VRDELMAkG\n"" +
            ""A1UEBhMCREUwDgYDVR0PAQH/BAQDAgEGMEEGCSqGSIb3DQEBCjA0oA8wDQYJYIZI\n"" +
            ""AWUDBAIBBQChHDAaBgkqhkiG9w0BAQgwDQYJYIZIAWUDBAIBBQCiAwIBIAOCAgEA\n"" +
            ""DDEUZGm5GF2xkOLhDFXwJwfIh5FRM1Vp3LMWhzAqIeLigKJctniQ0eJ53z9b5zmf\n"" +
            ""deU5mVz42D6mqtybjuBwQtSCeBVYkuCFtt/tWz0yelOgmp12R/+TJamQX0MxTEXh\n"" +
            ""hY2xXqZxNHittzVQXXERe5taMhPLem5lQxDg4msdvzkAyvNyUeWss7RGM5nA/ycX\n"" +
            ""aQ58o5sbLmnbf+rXotlPHnhpQDOMiUaKifCx5i3Ox2yBwQWYjvy2Xwcf7ZCCmuSD\n"" +
            ""WBFzNCF7GevEihcW47IF2EIwRzq1mKMWuxlDLjJ9VU9uQY1XcP8wQtebCzdh7nIS\n"" +
            ""Uy63yrIngXrWOTac7481Z1lFj7CA0J3bNc42PJJQ50+rQU48fGJnUuUBPItAS3Ej\n"" +
            ""RzRRLScJ1SzuDGDKldxy5fpB7y+doTvZB2v5/a3OjF7XinUes5adgwjWlNVDXZtZ\n"" +
            ""hoHAjhXFnCPnsecbFdPq/EiYa/ozBL9vqoJ60EKXb7FgFVbOZEgM/3W0ginuiSy7\n"" +
            ""b4nh8GHFu+Z8CWiDMkfVwPw6CKWAD/+7fBHxF6sNE2U+ptnx2AdIZDLw4GUtbKU9\n"" +
            ""OlZAHrziQXUNEs07dHobPXC8cnIaEL8cCmOra7gt2G5W4WE5SA7YmH43RHIzKbmo\n"" +
            ""PUyVS7rvDAZzdLmrlBtBf933c1g9Hc3BTG2DNJylPqo=\n"" +
            ""-----END CERTIFICATE-----\n"";

    private static final String ROOT = ""-----BEGIN CERTIFICATE-----\n"" +
            ""MIIHGDCCBMygAwIBAgIIO/QcNXn/Ue4wQQYJKoZIhvcNAQEKMDSgDzANBglghkgB\n"" +
            ""ZQMEAgEFAKEcMBoGCSqGSIb3DQEBCDANBglghkgBZQMEAgEFAKIDAgEgMF8xKjAo\n"" +
            ""BgNVBAMMIXByb2NpbG9uIEdST1VQIEN1c3RvbWVyIFJvb3RDQSAwMjEQMA4GA1UE\n"" +
            ""CwwHUm9vdCBDQTESMBAGA1UECgwJU1BJLUNMT1VEMQswCQYDVQQGEwJERTAeFw0x\n"" +
            ""ODAxMTcxNDI2MDdaFw0zMzAxMTMxNDI2MDdaMF8xKjAoBgNVBAMMIXByb2NpbG9u\n"" +
            ""IEdST1VQIEN1c3RvbWVyIFJvb3RDQSAwMjEQMA4GA1UECwwHUm9vdCBDQTESMBAG\n"" +
            ""A1UECgwJU1BJLUNMT1VEMQswCQYDVQQGEwJERTCCAiIwDQYJKoZIhvcNAQEBBQAD\n"" +
            ""ggIPADCCAgoCggIBAJEQ8ByHGbqGjIJirzwMMyAv546huFouzMA88is/lW6ehlSG\n"" +
            ""7oZX4u8/S8+n35G5pwouoQkoCJCmbvhky2taeinKkmm+lvtoiPvcJHb7KDpn7fLd\n"" +
            ""iNR5V8lfmWTthk7/AsLuaXrbnGj6S7hGMU13xmbc6JGbYS6L2PM5PVN+Vpjs5F0v\n"" +
            ""ZdA7iFVh8q79J5Jcr1AFBVhlgQkZuSxRfyQZ0NaoSLB1eI7X7MUT2km9GYueL4sL\n"" +
            ""ZPZXXPJgiwIZao5dNnFNoASEduzxHsMPrfOi9WCITRAEEHCHOzMDS5S5fKIP50ZP\n"" +
            ""Msna5co7IkqFPw5ZDlVk10lxkaTTkeXW89V1HqF/Z3RWQhtbUGn5FgjjsgDpQXIQ\n"" +
            ""oXLTjkPueT6B8L54XVkz+1yH1nLAKbrvPfQBrT6lbXJmJ3ysoqG3Wi7tCb47H8YA\n"" +
            ""1U6Wa+gTkrD/+uN1vVL1ZcV43mdQODO0joUM7A3s24EvBhi9X1tJmwimCk0V+ZtN\n"" +
            ""Y0eX7uPbxOZlG7l4kORhV7AXq+iJXh8UMc1aONqQi6nH0UlviFJrA9KnyDCT6ZQ2\n"" +
            ""T8wwR8rb5qCSTCCXgd8csONid9y1g/JwICtO0LU3IXvPekx1YoBcDWq7yOKzUnF6\n"" +
            ""crNMKjeheVepCsvt9DWElJnjVU6B1T3p0k7g3CxYr5bEa/M7to3FNtcq/X3/AgMB\n"" +
            ""AAGjggFuMIIBajBrBggrBgEFBQcBAQRfMF0wLAYIKwYBBQUHMAKGIGh0dHBzOi8v\n"" +
            ""cGtpLnNwaS1jbG91ZC5jb20vaXNzdWVyMC0GCCsGAQUFBzABhiFodHRwOi8vb2Nz\n"" +
            ""cC5zcGktY2xvdWQuY29tL3N0YXR1cy8wHQYDVR0OBBYEFCFE+sh0sasAfCoeNcNO\n"" +
            ""5f3ckEeoMBIGA1UdEwEB/wQIMAYBAf8CAQEwgbcGA1UdHwSBrzCBrDCBqaBCoECG\n"" +
            ""Pmh0dHA6Ly9wa2kuc3BpLWNsb3VkLmNvbS9jcmwvcHJvY2lsb25fR1JPVVBfQ3Vz\n"" +
            ""dG9tZXJfUm9vdENBXzAyomOkYTBfMSowKAYDVQQDDCFwcm9jaWxvbiBHUk9VUCBD\n"" +
            ""dXN0b21lciBSb290Q0EgMDIxEDAOBgNVBAsMB1Jvb3QgQ0ExEjAQBgNVBAoMCVNQ\n"" +
            ""SS1DTE9VRDELMAkGA1UEBhMCREUwDgYDVR0PAQH/BAQDAgEGMEEGCSqGSIb3DQEB\n"" +
            ""CjA0oA8wDQYJYIZIAWUDBAIBBQChHDAaBgkqhkiG9w0BAQgwDQYJYIZIAWUDBAIB\n"" +
            ""BQCiAwIBIAOCAgEAMJuPwO6T2llgcA9XhIhUoKRFr5StZXCBPWZR9qCGXQ6PnZe8\n"" +
            ""LuxE1hvtQKI0vt9yIWKG22JYwvlrI0b2bxh8x2oIKUeBL45CT9Z5mnY3PJmk76tN\n"" +
            ""xbRpvKQzEtkhLijoxcCWK3RqGOR0uMZJmudU250AkvMH9XKrXiGQOyY+VJNndiiA\n"" +
            ""Vy685JktXY3xg1dJ99QzSlij2feMg5jjPkTOlm6SvcQ0eIVspo4s+rX1R7AjIx51\n"" +
            ""WRe0Ykakk04Z1YOgHWZCWyE58hrJXl7JP81ef/DfF19MhcLLwI/VE9OkUfCsby+w\n"" +
            ""cdKKLtpV87IxZc6V8vb64QwGLqG5HaE7phMH0pupOqiIYUQQIt428Jf+pOh9t/SB\n"" +
            ""3z0fzg/Og69l2aeEgMKFFtRYvVDl8Q5H25UHJBHu9ccJhkFWfO54sZiw/wRWZxQw\n"" +
            ""oUDVQCg5qVxNzVfA9vbP853lvbdNtOdZuX+y2JoTmWuzEVD62QSh/uGKs/eurf1o\n"" +
            ""i/iOA+8McagW0GO7X5PClIHwMTDS516LsqfSVksOVP9L5kwkt+Us4dDf0peNRj2O\n"" +
            ""xu9h/OoD6yPGyDJD2NKW/zXqeZEiZPDmUTHA2FnS9nuVfJnHmxs3qMWlmjPnub+i\n"" +
            ""xNLuCDQN9HUBTIvFdkhSaYyiGypf6hYWmSWPAPz4MGYq6y5LtMe9VmTmY6g=\n"" +
            ""-----END CERTIFICATE-----\n"";


    public static void main(String[] args) {

        System.out.println(""start program"");
        // Execute with
        // -Djava.security.auth.debug=certpath
        // to see debug output from java

        executeValidation(APPLICATION, INTERMEDIATE, ROOT);

        System.out.println(""end program"");
    }

    private static void executeValidation(String application, String intermediate, String root) {
        try {
            KeyStore keyStore = KeyStore.getInstance(""JCEKS"");
            keyStore.load(null, """".toCharArray());

            CertificateFactory cf = CertificateFactory.getInstance(""X509"");
            Certificate applicationCertificate = cf
                    .generateCertificate(new ByteArrayInputStream(application.getBytes()));
            Certificate intermediateCertificate = cf
                    .generateCertificate(new ByteArrayInputStream(intermediate.getBytes()));
            Certificate rootCertificate = cf.generateCertificate(new ByteArrayInputStream(root.getBytes()));

            keyStore.setCertificateEntry(""application"", applicationCertificate);
            keyStore.setCertificateEntry(""intermediate"", intermediateCertificate);
            keyStore.setCertificateEntry(""root"", rootCertificate);

            String result = processValidationInternal(keyStore, applicationCertificate, true, false, true);
            System.out.println(result);

        } catch (IOException | GeneralSecurityException e) {
            e.printStackTrace();
        }
    }

    private static String processValidationInternal(KeyStore keyStore, Certificate certificate,
                                                    boolean revocationCheckEnabled,
                                                    boolean ignoreRevocationCheckFailures,
                                                    boolean oscpCheckEnabled) {

        if (revocationCheckEnabled) {
            System.setProperty(""com.sun.security.enableCRLDP"", ""true"");

            if (oscpCheckEnabled) {
                Security.setProperty(""ocsp.enable"", ""true"");
            }

        } else {
            System.setProperty(""com.sun.security.enableCRLDP"", ""false"");
            Security.setProperty(""ocsp.enable"", ""false"");
        }

        String warning = null;

        try {
            CertificateFactory cf = CertificateFactory.getInstance(certificate.getType());
            CertPath certificatePath = cf.generateCertPath(Arrays.asList(certificate));
            CertPathValidator cpv = CertPathValidator.getInstance(CertPathValidator.getDefaultType());

            PKIXParameters defaultStoreParams = new PKIXParameters(keyStore);
            defaultStoreParams.setRevocationEnabled(revocationCheckEnabled);
            defaultStoreParams.setDate(new Date(System.currentTimeMillis()));


            CertPathValidatorResult defaultStoreResult = cpv.validate(certificatePath, defaultStoreParams);
            if (defaultStoreResult != null) {
                // Default key store validates the certificate chain.
                warning = ""success"";
            }
        } catch (CertPathValidatorException e) {
            warning = e.getCause().getMessage();
        } catch (RuntimeException | GeneralSecurityException e) {
            System.out.println(""Key store can not validate certificate:"" + e.getMessage());
            warning = e.getCause().getMessage();
        }
        return warning;

    }

}
---------- END SOURCE ----------

CUSTOMER SUBMITTED WORKAROUND :
Use openssl ocsp verification tool instead of java:

openssl ocsp -CAfile ROOT.cer -issuer INTERMEDIATE.cer -cert APPLICATION.cer -text -url http://ocsp.spi-cloud.com/status/

FREQUENCY : always


",,,,,,,,,,,JDK-8282494,JDK-8288786,JDK-8294903,JDK-8288787,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"2021-09-28 21:00;tongwan;Main.java;https://bugs.openjdk.org/secure/attachment/96600/Main.java",,,,,generic,,,,,,,,,generic,,,,,"0|i2uhqb:",9223372036854775807,b18,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@2ec284e3,,,,,,,Verified,,"2021-09-28 20:44;tongwan;The observations on Windows 10:
JDK 8: Failed, Parameters required for RSASSA-PSS signatures
JDK 11: Failed.
JDK 17: Failed, OCSP response error: MALFORMED_REQUEST
JDK 18ea+1: Failed.;;;","2021-10-04 08:32;roboduke;Changeset: f63c4a83
Author:    Weijun Wang <weijun@openjdk.org>
Date:      2021-10-04 15:30:44 +0000
URL:       https://git.openjdk.java.net/jdk/commit/f63c4a832a1aea451f47aaf86d5361e970c6a28f
;;;","2021-10-09 23:28;tongwan;Requested the submitter verify the fix by downloading the latest version of JDK 18 from https://jdk.java.net/18/;;;","2021-10-11 21:25;tongwan;From the submitter:
Yes I tested it and I can verify that it works with Java 18 JDK as expected.
Thank you very much for your effort.
Here is the output of my example program with debug flags enabled:

C:\work\java\jdk-18\bin\java.exe -Djava.security.auth.debug=certpath,ocsp 
start program
...
certpath: Verified signature of OCSP Response
certpath: OCSP response validity interval is from Mon Oct 11 13:49:56 CEST 2021 until Mon Oct 11 14:49:56 CEST 2021
certpath: Checking validity of OCSP response on Mon Oct 11 13:49:56 CEST 2021 with allowed interval between Mon Oct 11 13:34:56 CEST 2021 and Mon Oct 11 14:04:56 CEST 2021
certpath: -checker7 validation succeeded
certpath: 
cert1 validation succeeded.
certpath: Cert path validation succeeded. (PKIX validation algorithm)
certpath: --------------------------------------------------------------
...
success
end program
;;;","2021-11-18 05:34;yan;Fix Request (17u)
on behalf of Alexey Pavlyutkin:

The patch fixes internal error upon verification of OCSP Response signed with RSASSA-PSS.
The original patch applied with minor changes to src/java.base/share/classes/sun/security/provider/certpath/OCSP.java
resolved baseline conflict: originally changes were done on top of https://bugs.openjdk.java.net/browse/JDK-8272120 and cannot be applied cleanly although they delete the changes done against JDK-8272120 (see lines 249-241)
imported few required packages
Verified (LTS 20.04/amd64) with the procedure from defect description. Regression: jdk:tier2;;;","2021-12-24 09:27;roboduke;A pull request was submitted for review.

URL: https://git.openjdk.java.net/jdk17u-dev/pull/36
Date: 2021-12-24 17:23:26 +0000
;;;","2022-01-21 12:10;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk11u-dev/pull/787
Date: 2022-01-21 20:05:36 +0000;;;","2022-01-22 01:18;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk11u-dev/pull/788
Date: 2022-01-22 09:13:30 +0000;;;","2022-02-08 10:00;apavlyutkin;Fix Request (17u-dev)

The patch fixes internal error upon verification of OCSP Response signed with RSASSA-PSS.
The original patch applied with minor changes to src/java.base/share/classes/sun/security/provider/certpath/OCSP.java
resolved baseline conflict: originally changes were done on top of https://bugs.openjdk.java.net/browse/JDK-8272120 and cannot be applied cleanly although they delete the changes done against JDK-8272120 (see lines 249-241)
imported few required packages
Verified (LTS 20.04/amd64) with the procedure from defect description. Regression: jdk:tier2;;;","2022-02-23 16:41;andrew;You need to replace the jdk17-fix-request with jdk17u-fix-request.

As to the 11u patch, we should only consider that after 17u is approved and integrated.;;;","2022-02-23 19:56;apavlyutkin;Sure, thank you;;;","2022-03-01 10:02;apavlyutkin;Fix Request (11u-dev)

The patch fixes internal error upon verification of OCSP Response signed with RSASSA-PSS.
The patch requires https://bugs.openjdk.java.net/browse/JDK-8179503 (Java should support GET OCSP calls) as a dependency
The following changes were done to 17u-dev patch

src/java.base/share/classes/sun/security/provider/certpath/OCSP.java
- changes to absent revokation checking code ignored

src/java.base/share/classes/sun/security/util/SignatureUtil.java
- absent 
    Signature fromKey(String sigAlg, PrivateKey key, String provider);
    Signature fromKey(String sigAlg, PrivateKey key, Provider provider);
    Signature autoInitInternal(String alg, PrivateKey key, Signature s) ;
    AlgorithmId fromSignature(Signature sigEngine, PrivateKey key);
methods were transferred from 17u-dev
- EdEcKey (unsupported in jdk11) hook removed from fromSignature() method
- transferred SignatureUtil.autoInitInternal() method updated to use AlgorithmId.getDefaultAlgorithmParameterSpec() instead of SignatureUtil.getDefaultParamSpec()
- imported AlgorithmId class

test/jdk/java/security/testlibrary/SimpleOCSPServer.java
- imported SignatureUtil class

Verified (LTS 20.04/amd64) with the procedure from defect description. Regression: jdk:tier2;;;","2022-04-05 23:53;goetz;[11u] 
We think this change and JDK-8179503 are not appropriate for jdk11u. See also the reasoning in JDK-8179503.;;;","2023-03-16 21:17;apavlyutkin;This one depends on JDK-8179503, and I backported the both an year ago, but the backports were rejected by [~goetz] with explanation

[11u]

This is an enhancement. Together with JDK-8274471, it will change
the behavior of the JVM wrt. the handling of certificates. The
JVM will accept more connections. Even if this is the nature
of bug fixes, it might be undesired or unexpected in the security
context. Follow up problems might show up that will not
appear in Oracle jdk11u. So far we tried to stay close in this
matter. The current backport request does not argue well enough
why this is needed in 11. No tests beyond jtreg tests were made.
After all, there is jdk17u if these features are needed. For
jdk11u, we think this change and JDK-8274471 are not appropriate.

The changes are still on my fork and can be applied.;;;","2023-05-23 10:46;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk11u-dev/pull/1891
Date: 2023-05-23 17:40:03 +0000;;;","2023-05-31 03:58;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk11u-dev/pull/1918
Date: 2023-05-31 10:50:12 +0000;;;","2023-06-06 02:38;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk8u-dev/pull/331
Date: 2023-06-06 09:33:06 +0000;;;",,,,,,,,,
TimeZoneTest.java fails with tzdata2021b,JDK-8274468,5059441,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,naoto,ysatowse,ysatowse,2021-09-28 18:55,2021-12-21 01:45,2023-10-01 09:57,2021-10-07 08:33,18,,,,,,,18,core-libs,,0,,,,,,,,,,,,,,,,,,,,,,"test/jdk/java/util/TimeZone/TimeZoneTest.java fails with below with tzdata2021b:


TimeZoneTest {
  TestShortZoneIDs {
    Fail: Expected Zone[""MIT"", GMT+13:00, Daylight]; got Zone[""MIT"", GMT+13:00, Standard]
    Uncaught exception thrown in test method TestShortZoneIDs
STDERR:
java.lang.RuntimeException: Uncaught exception thrown in test method TestShortZoneIDs
	at IntlTest.errImpl(IntlTest.java:198)
	at IntlTest.errln(IntlTest.java:185)
	at IntlTest.run(IntlTest.java:126)
	at TimeZoneTest.main(TimeZoneTest.java:44)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at com.sun.javatest.regtest.agent.MainActionHelper$AgentVMRunnable.run(MainActionHelper.java:312)
	at java.base/java.lang.Thread.run(Thread.java:833)

JavaTest Message: Test threw exception: java.lang.RuntimeException
JavaTest Message: shutting down test


TEST RESULT: Failed. Execution failed: `main' threw exception: java.lang.RuntimeException: Uncaught exception thrown in test method TestShortZoneIDs",,,,,,,,,,,JDK-8275902,JDK-8275896,JDK-8275782,JDK-8277833,JDK-8279056,JDK-8275214,JDK-8275899,,,,,,,JDK-8274407,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2uhwb:",9223372036854775807,b19,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@a9a7756,,,,,,,,,"2021-10-04 16:02;naoto;Will be fixed with 2021c upgrade;;;","2021-10-05 18:58;naoto;The test case did not reflect that the Samoa time no longer transitioning into DST.;;;","2021-10-07 08:33;roboduke;Changeset: 8ca08461
Author:    Naoto Sato <naoto@openjdk.org>
Date:      2021-10-07 15:32:11 +0000
URL:       https://git.openjdk.java.net/jdk/commit/8ca084617f331b6af934179f3f776c8158da5bba
;;;","2021-10-25 03:11;mdoerr;Fix Request (11u):
Should get backported for parity with 11.0.14-oracle (together with JDK-8274407 and JDK-8274467 which were fixed with the same commit). Applies cleanly. ;;;",,,,,,,,,,,,,,,,,,,,,,
TestZoneInfo310.java fails with tzdata2021b,JDK-8274467,5059440,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,naoto,ysatowse,ysatowse,2021-09-28 18:22,2021-12-21 01:45,2023-10-01 09:57,2021-10-07 08:33,18,,,,,,,18,core-libs,,0,,,,,,,,,,,,,,,,,,,,,,"test/jdk/sun/util/calendar/zi/TestZoneInfo310.java fails with below with tzdata2021b:

STDOUT:
Compiling tz files!
testing!
OLD.getZoneInfoOld()[1]=174
OLD.getZoneInfoOld()[2]=73
OLD.getZoneInfoOld()[3]=51
OLD.getAvailableIDs()=291, total=629
OLD.getAliasTable()=195, total=239
OLD.TotalTZ()=11 (ms)
NEW.getTimeZone()[1]=406
NEW.getTimeZone()[2]=307
NEW.getTimeZone()[3]=221
NEW.getAvailableIDs()=14, total=629
NEW.getAliasTable()=29, total=239
NEW.TotalTZ()=12 (ms)
******************************
Asia/Amman : Asia/Amman
    offset=7200000,dstSavings=3600000,useDaylight=true,transitions=118,offsets=4,checksum=-793295463,gmtChanged=false
[NG]offset=7200000,dstSavings=3600000,useDaylight=true,transitions=118,offsets=4,checksum=-1898949168,gmtChanged=false
    -------------
                  1900-01-01T00:00  [utc=-2208988800   raw=fffffdfdae01dc00, offset=8624/+02:23:44, saving=0]
    (OK)          1900-01-01T00:00  [utc=-2208988800   raw=fffffdfdae01dc00, offset=8624/+02:23:44, saving=0]
            -----
                  1931-01-01T00:00  [utc=-1230776624   raw=fffffee16fff1c80, offset=7200/+02:00, saving=0]
    (OK)          1931-01-01T00:00  [utc=-1230776624   raw=fffffee16fff1c80, offset=7200/+02:00, saving=0]
            -----
                  1973-06-06T00:00  [utc=108165600   raw=192f2c1300, offset=10800/+03:00, saving=3600]
    (OK)          1973-06-06T00:00  [utc=108165600   raw=192f2c1300, offset=10800/+03:00, saving=3600]
            -----
                  1973-10-01T00:00  [utc=118270800   raw=1b897d3080, offset=7200/+02:00, saving=0]
    (OK)          1973-10-01T00:00  [utc=118270800   raw=1b897d3080, offset=7200/+02:00, saving=0]
            -----
                  1974-05-01T00:00  [utc=136591200   raw=1fcd784f00, offset=10800/+03:00, saving=3600]
    (OK)          1974-05-01T00:00  [utc=136591200   raw=1fcd784f00, offset=10800/+03:00, saving=3600]
            -----
                  1974-10-01T00:00  [utc=149806800   raw=22e12e5c80, offset=7200/+02:00, saving=0]
    (OK)          1974-10-01T00:00  [utc=149806800   raw=22e12e5c80, offset=7200/+02:00, saving=0]
            -----
                  1975-05-01T00:00  [utc=168127200   raw=2725297b00, offset=10800/+03:00, saving=3600]
    (OK)          1975-05-01T00:00  [utc=168127200   raw=2725297b00, offset=10800/+03:00, saving=3600]
            -----
                  1975-10-01T00:00  [utc=181342800   raw=2a38df8880, offset=7200/+02:00, saving=0]
    (OK)          1975-10-01T00:00  [utc=181342800   raw=2a38df8880, offset=7200/+02:00, saving=0]
            -----
                  1976-05-01T00:00  [utc=199749600   raw=2e82010300, offset=10800/+03:00, saving=3600]
    (OK)          1976-05-01T00:00  [utc=199749600   raw=2e82010300, offset=10800/+03:00, saving=3600]
            -----
                  1976-11-01T00:00  [utc=215643600   raw=32355c3480, offset=7200/+02:00, saving=0]
    (OK)          1976-11-01T00:00  [utc=215643600   raw=32355c3480, offset=7200/+02:00, saving=0]
            -----
                  1977-05-01T00:00  [utc=231285600   raw=35d9b22f00, offset=10800/+03:00, saving=3600]
    (OK)          1977-05-01T00:00  [utc=231285600   raw=35d9b22f00, offset=10800/+03:00, saving=3600]
            -----
                  1977-10-01T00:00  [utc=244501200   raw=38ed683c80, offset=7200/+02:00, saving=0]
    (OK)          1977-10-01T00:00  [utc=244501200   raw=38ed683c80, offset=7200/+02:00, saving=0]
            -----
                  1978-04-30T00:00  [utc=262735200   raw=3d2c3cff00, offset=10800/+03:00, saving=3600]
    (OK)          1978-04-30T00:00  [utc=262735200   raw=3d2c3cff00, offset=10800/+03:00, saving=3600]
            -----
                  1978-09-30T00:00  [utc=275950800   raw=403ff30c80, offset=7200/+02:00, saving=0]
    (OK)          1978-09-30T00:00  [utc=275950800   raw=403ff30c80, offset=7200/+02:00, saving=0]
            -----
                  1985-04-01T00:00  [utc=481154400   raw=7007097f00, offset=10800/+03:00, saving=3600]
    (OK)          1985-04-01T00:00  [utc=481154400   raw=7007097f00, offset=10800/+03:00, saving=3600]
            -----
                  1985-10-01T00:00  [utc=496962000   raw=73b53e5480, offset=7200/+02:00, saving=0]
    (OK)          1985-10-01T00:00  [utc=496962000   raw=73b53e5480, offset=7200/+02:00, saving=0]
            -----
                  1986-04-04T00:00  [utc=512949600   raw=776e2dbf00, offset=10800/+03:00, saving=3600]
    (OK)          1986-04-04T00:00  [utc=512949600   raw=776e2dbf00, offset=10800/+03:00, saving=3600]
            -----
                  1986-10-03T00:00  [utc=528670800   raw=7b173c3880, offset=7200/+02:00, saving=0]
    (OK)          1986-10-03T00:00  [utc=528670800   raw=7b173c3880, offset=7200/+02:00, saving=0]
            -----
                  1987-04-03T00:00  [utc=544399200   raw=7ec0b88f00, offset=10800/+03:00, saving=3600]
    (OK)          1987-04-03T00:00  [utc=544399200   raw=7ec0b88f00, offset=10800/+03:00, saving=3600]
            -----
                  1987-10-02T00:00  [utc=560120400   raw=8269c70880, offset=7200/+02:00, saving=0]
    (OK)          1987-10-02T00:00  [utc=560120400   raw=8269c70880, offset=7200/+02:00, saving=0]
            -----
                  1988-04-01T00:00  [utc=575848800   raw=8613435f00, offset=10800/+03:00, saving=3600]
    (OK)          1988-04-01T00:00  [utc=575848800   raw=8613435f00, offset=10800/+03:00, saving=3600]
            -----
                  1988-10-07T00:00  [utc=592174800   raw=89e05e5c80, offset=7200/+02:00, saving=0]
    (OK)          1988-10-07T00:00  [utc=592174800   raw=89e05e5c80, offset=7200/+02:00, saving=0]
            -----
                  1989-05-08T00:00  [utc=610581600   raw=8e297fd700, offset=10800/+03:00, saving=3600]
    (OK)          1989-05-08T00:00  [utc=610581600   raw=8e297fd700, offset=10800/+03:00, saving=3600]
            -----
                  1989-10-06T00:00  [utc=623624400   raw=9132e92c80, offset=7200/+02:00, saving=0]
    (OK)          1989-10-06T00:00  [utc=623624400   raw=9132e92c80, offset=7200/+02:00, saving=0]
            -----
                  1990-04-27T00:00  [utc=641167200   raw=95488b0f00, offset=10800/+03:00, saving=3600]
    (OK)          1990-04-27T00:00  [utc=641167200   raw=95488b0f00, offset=10800/+03:00, saving=3600]
            -----
                  1990-10-05T00:00  [utc=655074000   raw=988573fc80, offset=7200/+02:00, saving=0]
    (OK)          1990-10-05T00:00  [utc=655074000   raw=988573fc80, offset=7200/+02:00, saving=0]
            -----
                  1991-04-17T00:00  [utc=671839200   raw=9c6cbca300, offset=10800/+03:00, saving=3600]
    (OK)          1991-04-17T00:00  [utc=671839200   raw=9c6cbca300, offset=10800/+03:00, saving=3600]
            -----
                  1991-09-27T00:00  [utc=685918800   raw=9fb3f24880, offset=7200/+02:00, saving=0]
    (OK)          1991-09-27T00:00  [utc=685918800   raw=9fb3f24880, offset=7200/+02:00, saving=0]
            -----
                  1992-04-10T00:00  [utc=702856800   raw=a3a587a700, offset=10800/+03:00, saving=3600]
    (OK)          1992-04-10T00:00  [utc=702856800   raw=a3a587a700, offset=10800/+03:00, saving=3600]
            -----
                  1992-10-02T00:00  [utc=717973200   raw=a72a899c80, offset=7200/+02:00, saving=0]
    (OK)          1992-10-02T00:00  [utc=717973200   raw=a72a899c80, offset=7200/+02:00, saving=0]
            -----
                  1993-04-02T00:00  [utc=733701600   raw=aad405f300, offset=10800/+03:00, saving=3600]
    (OK)          1993-04-02T00:00  [utc=733701600   raw=aad405f300, offset=10800/+03:00, saving=3600]
            -----
                  1993-10-01T00:00  [utc=749422800   raw=ae7d146c80, offset=7200/+02:00, saving=0]
    (OK)          1993-10-01T00:00  [utc=749422800   raw=ae7d146c80, offset=7200/+02:00, saving=0]
            -----
                  1994-04-01T00:00  [utc=765151200   raw=b22690c300, offset=10800/+03:00, saving=3600]
    (OK)          1994-04-01T00:00  [utc=765151200   raw=b22690c300, offset=10800/+03:00, saving=3600]
            -----
                  1994-09-16T00:00  [utc=779662800   raw=b587863480, offset=7200/+02:00, saving=0]
    (OK)          1994-09-16T00:00  [utc=779662800   raw=b587863480, offset=7200/+02:00, saving=0]
            -----
                  1995-04-07T00:00  [utc=797205600   raw=b99d281700, offset=10800/+03:00, saving=3600]
    (OK)          1995-04-07T00:00  [utc=797205600   raw=b99d281700, offset=10800/+03:00, saving=3600]
            -----
                  1995-09-15T01:00  [utc=811116000   raw=bcda47f300, offset=7200/+02:00, saving=0]
    (OK)          1995-09-15T01:00  [utc=811116000   raw=bcda47f300, offset=7200/+02:00, saving=0]
            -----
                  1996-04-05T00:00  [utc=828655200   raw=c0efb2e700, offset=10800/+03:00, saving=3600]
    (OK)          1996-04-05T00:00  [utc=828655200   raw=c0efb2e700, offset=10800/+03:00, saving=3600]
            -----
                  1996-09-20T01:00  [utc=843170400   raw=c450df4700, offset=7200/+02:00, saving=0]
    (OK)          1996-09-20T01:00  [utc=843170400   raw=c450df4700, offset=7200/+02:00, saving=0]
            -----
                  1997-04-04T00:00  [utc=860104800   raw=c8423db700, offset=10800/+03:00, saving=3600]
    (OK)          1997-04-04T00:00  [utc=860104800   raw=c8423db700, offset=10800/+03:00, saving=3600]
            -----
                  1997-09-19T01:00  [utc=874620000   raw=cba36a1700, offset=7200/+02:00, saving=0]
    (OK)          1997-09-19T01:00  [utc=874620000   raw=cba36a1700, offset=7200/+02:00, saving=0]
            -----
                  1998-04-03T00:00  [utc=891554400   raw=cf94c88700, offset=10800/+03:00, saving=3600]
    (OK)          1998-04-03T00:00  [utc=891554400   raw=cf94c88700, offset=10800/+03:00, saving=3600]
            -----
                  1998-09-18T01:00  [utc=906069600   raw=d2f5f4e700, offset=7200/+02:00, saving=0]
    (OK)          1998-09-18T01:00  [utc=906069600   raw=d2f5f4e700, offset=7200/+02:00, saving=0]
            -----
                  1999-07-01T00:00  [utc=930780000   raw=d8b6cfaf00, offset=10800/+03:00, saving=3600]
    (OK)          1999-07-01T00:00  [utc=930780000   raw=d8b6cfaf00, offset=10800/+03:00, saving=3600]
            -----
                  1999-09-24T01:00  [utc=938124000   raw=da6c8c3b00, offset=7200/+02:00, saving=0]
    (OK)          1999-09-24T01:00  [utc=938124000   raw=da6c8c3b00, offset=7200/+02:00, saving=0]
            -----
                  2000-03-30T00:00  [utc=954367200   raw=de34b7cb00, offset=10800/+03:00, saving=3600]
    (OK)          2000-03-30T00:00  [utc=954367200   raw=de34b7cb00, offset=10800/+03:00, saving=3600]
            -----
                  2000-09-29T01:00  [utc=970178400   raw=e1e3238f00, offset=7200/+02:00, saving=0]
    (OK)          2000-09-29T01:00  [utc=970178400   raw=e1e3238f00, offset=7200/+02:00, saving=0]
            -----
                  2001-03-29T00:00  [utc=985816800   raw=e587429b00, offset=10800/+03:00, saving=3600]
    (OK)          2001-03-29T00:00  [utc=985816800   raw=e587429b00, offset=10800/+03:00, saving=3600]
            -----
                  2001-09-28T01:00  [utc=1001628000   raw=e935ae5f00, offset=7200/+02:00, saving=0]
    (OK)          2001-09-28T01:00  [utc=1001628000   raw=e935ae5f00, offset=7200/+02:00, saving=0]
            -----
                  2002-03-29T00:00  [utc=1017352800   raw=ecdef3c700, offset=10800/+03:00, saving=3600]
    (OK)          2002-03-29T00:00  [utc=1017352800   raw=ecdef3c700, offset=10800/+03:00, saving=3600]
            -----
                  2002-09-27T01:00  [utc=1033077600   raw=f088392f00, offset=7200/+02:00, saving=0]
    (OK)          2002-09-27T01:00  [utc=1033077600   raw=f088392f00, offset=7200/+02:00, saving=0]
            -----
                  2003-03-28T00:00  [utc=1048802400   raw=f4317e9700, offset=10800/+03:00, saving=3600]
    (OK)          2003-03-28T00:00  [utc=1048802400   raw=f4317e9700, offset=10800/+03:00, saving=3600]
            -----
                  2003-10-24T01:00  [utc=1066946400   raw=f86af60f00, offset=7200/+02:00, saving=0]
    (OK)          2003-10-24T01:00  [utc=1066946400   raw=f86af60f00, offset=7200/+02:00, saving=0]
            -----
                  2004-03-26T00:00  [utc=1080252000   raw=fb84096700, offset=10800/+03:00, saving=3600]
    (OK)          2004-03-26T00:00  [utc=1080252000   raw=fb84096700, offset=10800/+03:00, saving=3600]
            -----
                  2004-10-15T01:00  [utc=1097791200   raw=ff99745b00, offset=7200/+02:00, saving=0]
    (OK)          2004-10-15T01:00  [utc=1097791200   raw=ff99745b00, offset=7200/+02:00, saving=0]
            -----
                  2005-04-01T00:00  [utc=1112306400   raw=102faa0bb00, offset=10800/+03:00, saving=3600]
    (OK)          2005-04-01T00:00  [utc=1112306400   raw=102faa0bb00, offset=10800/+03:00, saving=3600]
            -----
                  2005-09-30T01:00  [utc=1128031200   raw=106a3e62300, offset=7200/+02:00, saving=0]
    (OK)          2005-09-30T01:00  [utc=1128031200   raw=106a3e62300, offset=7200/+02:00, saving=0]
            -----
                  2006-03-31T00:00  [utc=1143756000   raw=10a4d2b8b00, offset=10800/+03:00, saving=3600]
    (OK)          2006-03-31T00:00  [utc=1143756000   raw=10a4d2b8b00, offset=10800/+03:00, saving=3600]
            -----
                  2006-10-27T01:00  [utc=1161900000   raw=10e86a30300, offset=7200/+02:00, saving=0]
    (OK)          2006-10-27T01:00  [utc=1161900000   raw=10e86a30300, offset=7200/+02:00, saving=0]
            -----
                  2007-03-30T00:00  [utc=1175205600   raw=1119fb65b00, offset=10800/+03:00, saving=3600]
    (OK)          2007-03-30T00:00  [utc=1175205600   raw=1119fb65b00, offset=10800/+03:00, saving=3600]
            -----
                  2007-10-26T01:00  [utc=1193349600   raw=115d92dd300, offset=7200/+02:00, saving=0]
    (OK)          2007-10-26T01:00  [utc=1193349600   raw=115d92dd300, offset=7200/+02:00, saving=0]
            -----
                  2008-03-28T00:00  [utc=1206655200   raw=118f2412b00, offset=10800/+03:00, saving=3600]
    (OK)          2008-03-28T00:00  [utc=1206655200   raw=118f2412b00, offset=10800/+03:00, saving=3600]
            -----
                  2008-10-31T01:00  [utc=1225404000   raw=11d4fc52700, offset=7200/+02:00, saving=0]
    (OK)          2008-10-31T01:00  [utc=1225404000   raw=11d4fc52700, offset=7200/+02:00, saving=0]
            -----
                  2009-03-27T00:00  [utc=1238104800   raw=12044cbfb00, offset=10800/+03:00, saving=3600]
    (OK)          2009-03-27T00:00  [utc=1238104800   raw=12044cbfb00, offset=10800/+03:00, saving=3600]
            -----
                  2009-10-30T01:00  [utc=1256853600   raw=124a24ff700, offset=7200/+02:00, saving=0]
    (OK)          2009-10-30T01:00  [utc=1256853600   raw=124a24ff700, offset=7200/+02:00, saving=0]
            -----
                  2010-03-26T00:00  [utc=1269554400   raw=1279756cb00, offset=10800/+03:00, saving=3600]
    (OK)          2010-03-26T00:00  [utc=1269554400   raw=1279756cb00, offset=10800/+03:00, saving=3600]
            -----
                  2010-10-29T01:00  [utc=1288303200   raw=12bf4dac700, offset=7200/+02:00, saving=0]
    (OK)          2010-10-29T01:00  [utc=1288303200   raw=12bf4dac700, offset=7200/+02:00, saving=0]
            -----
                  2011-04-01T00:00  [utc=1301608800   raw=12f0dee1f00, offset=10800/+03:00, saving=3600]
    (OK)          2011-04-01T00:00  [utc=1301608800   raw=12f0dee1f00, offset=10800/+03:00, saving=3600]
            -----
                  2011-10-28T01:00  [utc=1319752800   raw=13347659700, offset=7200/+02:00, saving=0]
    (OK)          2011-10-28T01:00  [utc=1319752800   raw=13347659700, offset=7200/+02:00, saving=0]
            -----
                  2012-03-30T00:00  [utc=1333058400   raw=1366078ef00, offset=10800/+03:00, saving=3600]
    (OK)          2012-03-30T00:00  [utc=1333058400   raw=1366078ef00, offset=10800/+03:00, saving=3600]
            -----
                  2013-12-20T00:00  [utc=1387486800   raw=1430ca86880, offset=7200/+02:00, saving=0]
    (OK)          2013-12-20T00:00  [utc=1387486800   raw=1430ca86880, offset=7200/+02:00, saving=0]
            -----
                  2014-03-28T00:00  [utc=1395957600   raw=145058e8f00, offset=10800/+03:00, saving=3600]
    (OK)          2014-03-28T00:00  [utc=1395957600   raw=145058e8f00, offset=10800/+03:00, saving=3600]
            -----
                  2014-10-31T01:00  [utc=1414706400   raw=14963128b00, offset=7200/+02:00, saving=0]
    (OK)          2014-10-31T01:00  [utc=1414706400   raw=14963128b00, offset=7200/+02:00, saving=0]
            -----
                  2015-03-27T00:00  [utc=1427407200   raw=14c58195f00, offset=10800/+03:00, saving=3600]
    (OK)          2015-03-27T00:00  [utc=1427407200   raw=14c58195f00, offset=10800/+03:00, saving=3600]
            -----
                  2015-10-30T01:00  [utc=1446156000   raw=150b59d5b00, offset=7200/+02:00, saving=0]
    (OK)          2015-10-30T01:00  [utc=1446156000   raw=150b59d5b00, offset=7200/+02:00, saving=0]
            -----
                  2016-04-01T00:00  [utc=1459461600   raw=153ceb0b300, offset=10800/+03:00, saving=3600]
    (OK)          2016-04-01T00:00  [utc=1459461600   raw=153ceb0b300, offset=10800/+03:00, saving=3600]
            -----
                  2016-10-28T01:00  [utc=1477605600   raw=15808282b00, offset=7200/+02:00, saving=0]
    (OK)          2016-10-28T01:00  [utc=1477605600   raw=15808282b00, offset=7200/+02:00, saving=0]
            -----
                  2017-03-31T00:00  [utc=1490911200   raw=15b213b8300, offset=10800/+03:00, saving=3600]
    (OK)          2017-03-31T00:00  [utc=1490911200   raw=15b213b8300, offset=10800/+03:00, saving=3600]
            -----
                  2017-10-27T01:00  [utc=1509055200   raw=15f5ab2fb00, offset=7200/+02:00, saving=0]
    (OK)          2017-10-27T01:00  [utc=1509055200   raw=15f5ab2fb00, offset=7200/+02:00, saving=0]
            -----
                  2018-03-30T00:00  [utc=1522360800   raw=16273c65300, offset=10800/+03:00, saving=3600]
    (OK)          2018-03-30T00:00  [utc=1522360800   raw=16273c65300, offset=10800/+03:00, saving=3600]
            -----
                  2018-10-26T01:00  [utc=1540504800   raw=166ad3dcb00, offset=7200/+02:00, saving=0]
    (OK)          2018-10-26T01:00  [utc=1540504800   raw=166ad3dcb00, offset=7200/+02:00, saving=0]
            -----
                  2019-03-29T00:00  [utc=1553810400   raw=169c6512300, offset=10800/+03:00, saving=3600]
    (OK)          2019-03-29T00:00  [utc=1553810400   raw=169c6512300, offset=10800/+03:00, saving=3600]
            -----
                  2019-10-25T01:00  [utc=1571954400   raw=16dffc89b00, offset=7200/+02:00, saving=0]
    (OK)          2019-10-25T01:00  [utc=1571954400   raw=16dffc89b00, offset=7200/+02:00, saving=0]
            -----
                  2020-03-27T00:00  [utc=1585260000   raw=17118dbf300, offset=10800/+03:00, saving=3600]
    (OK)          2020-03-27T00:00  [utc=1585260000   raw=17118dbf300, offset=10800/+03:00, saving=3600]
            -----
                  2020-10-30T01:00  [utc=1604008800   raw=175765fef00, offset=7200/+02:00, saving=0]
    (OK)          2020-10-30T01:00  [utc=1604008800   raw=175765fef00, offset=7200/+02:00, saving=0]
            -----
                  2021-03-26T00:00  [utc=1616709600   raw=1786b66c300, offset=10800/+03:00, saving=3600]
    (OK)          2021-03-26T00:00  [utc=1616709600   raw=1786b66c300, offset=10800/+03:00, saving=3600]
            -----
                  2021-10-29T01:00  [utc=1635458400   raw=17cc8eabf00, offset=7200/+02:00, saving=0]
    (OK)          2021-10-29T01:00  [utc=1635458400   raw=17cc8eabf00, offset=7200/+02:00, saving=0]
            -----
                  2022-02-25T00:00  [utc=1645740000   raw=17f2dbf8300, offset=10800/+03:00, saving=3600]
    (OK)          2022-02-25T00:00  [utc=1645740000   raw=17f2dbf8300, offset=10800/+03:00, saving=3600]
            -----
                  2022-10-28T01:00  [utc=1666908000   raw=1841b758f00, offset=7200/+02:00, saving=0]
    (OK)          2022-10-28T01:00  [utc=1666908000   raw=1841b758f00, offset=7200/+02:00, saving=0]
            -----
                  2023-02-24T00:00  [utc=1677189600   raw=186804a5300, offset=10800/+03:00, saving=3600]
    (OK)          2023-02-24T00:00  [utc=1677189600   raw=186804a5300, offset=10800/+03:00, saving=3600]
            -----
                  2023-10-27T01:00  [utc=1698357600   raw=18b6e005f00, offset=7200/+02:00, saving=0]
    (OK)          2023-10-27T01:00  [utc=1698357600   raw=18b6e005f00, offset=7200/+02:00, saving=0]
            -----
                  2024-03-02T00:00  [utc=1709330400   raw=18dfc080300, offset=10800/+03:00, saving=3600]
    (NG)          2024-03-01T00:00  [utc=1709244000   raw=18df6e1a700, offset=10800/+03:00, saving=3600]
            -----
                  2024-10-25T01:00  [utc=1729807200   raw=192c08b2f00, offset=7200/+02:00, saving=0]
    (OK)          2024-10-25T01:00  [utc=1729807200   raw=192c08b2f00, offset=7200/+02:00, saving=0]
            -----
                  2025-03-01T00:00  [utc=1740780000   raw=1954e92d300, offset=10800/+03:00, saving=3600]
    (NG)          2025-02-28T00:00  [utc=1740693600   raw=195496c7700, offset=10800/+03:00, saving=3600]
            -----
                  2025-10-31T01:00  [utc=1761861600   raw=19a37228300, offset=7200/+02:00, saving=0]
    (OK)          2025-10-31T01:00  [utc=1761861600   raw=19a37228300, offset=7200/+02:00, saving=0]
            -----
                  2026-02-28T00:00  [utc=1772229600   raw=19ca11da300, offset=10800/+03:00, saving=3600]
    (NG)          2026-02-27T00:00  [utc=1772143200   raw=19c9bf74700, offset=10800/+03:00, saving=3600]
            -----
                  2026-10-30T01:00  [utc=1793311200   raw=1a189ad5300, offset=7200/+02:00, saving=0]
    (OK)          2026-10-30T01:00  [utc=1793311200   raw=1a189ad5300, offset=7200/+02:00, saving=0]
            -----
                  2027-02-27T00:00  [utc=1803679200   raw=1a3f3a87300, offset=10800/+03:00, saving=3600]
    (NG)          2027-02-26T00:00  [utc=1803592800   raw=1a3ee821700, offset=10800/+03:00, saving=3600]
            -----
                  2027-10-29T01:00  [utc=1824760800   raw=1a8dc382300, offset=7200/+02:00, saving=0]
    (OK)          2027-10-29T01:00  [utc=1824760800   raw=1a8dc382300, offset=7200/+02:00, saving=0]
            -----
                  2028-02-26T00:00  [utc=1835128800   raw=1ab46334300, offset=10800/+03:00, saving=3600]
    (NG)          2028-02-25T00:00  [utc=1835042400   raw=1ab410ce700, offset=10800/+03:00, saving=3600]
            -----
                  2028-10-27T01:00  [utc=1856210400   raw=1b02ec2f300, offset=7200/+02:00, saving=0]
    (OK)          2028-10-27T01:00  [utc=1856210400   raw=1b02ec2f300, offset=7200/+02:00, saving=0]
            -----
                  2029-02-24T00:00  [utc=1866578400   raw=1b298be1300, offset=10800/+03:00, saving=3600]
    (NG)          2029-02-23T00:00  [utc=1866492000   raw=1b29397b700, offset=10800/+03:00, saving=3600]
            -----
                  2029-10-26T01:00  [utc=1887660000   raw=1b7814dc300, offset=7200/+02:00, saving=0]
    (OK)          2029-10-26T01:00  [utc=1887660000   raw=1b7814dc300, offset=7200/+02:00, saving=0]
            -----
                  2030-03-02T00:00  [utc=1898632800   raw=1ba0f556700, offset=10800/+03:00, saving=3600]
    (NG)          2030-03-01T00:00  [utc=1898546400   raw=1ba0a2f0b00, offset=10800/+03:00, saving=3600]
            -----
                  2030-10-25T01:00  [utc=1919109600   raw=1bed3d89300, offset=7200/+02:00, saving=0]
    (OK)          2030-10-25T01:00  [utc=1919109600   raw=1bed3d89300, offset=7200/+02:00, saving=0]
            -----
                  2031-03-01T00:00  [utc=1930082400   raw=1c161e03700, offset=10800/+03:00, saving=3600]
    (NG)          2031-02-28T00:00  [utc=1929996000   raw=1c15cb9db00, offset=10800/+03:00, saving=3600]
            -----
                  2031-10-31T01:00  [utc=1951164000   raw=1c64a6fe700, offset=7200/+02:00, saving=0]
    (OK)          2031-10-31T01:00  [utc=1951164000   raw=1c64a6fe700, offset=7200/+02:00, saving=0]
            -----
                  2032-02-28T00:00  [utc=1961532000   raw=1c8b46b0700, offset=10800/+03:00, saving=3600]
    (NG)          2032-02-27T00:00  [utc=1961445600   raw=1c8af44ab00, offset=10800/+03:00, saving=3600]
            -----
                  2032-10-29T01:00  [utc=1982613600   raw=1cd9cfab700, offset=7200/+02:00, saving=0]
    (OK)          2032-10-29T01:00  [utc=1982613600   raw=1cd9cfab700, offset=7200/+02:00, saving=0]
            -----
                  2033-02-26T00:00  [utc=1992981600   raw=1d006f5d700, offset=10800/+03:00, saving=3600]
    (NG)          2033-02-25T00:00  [utc=1992895200   raw=1d001cf7b00, offset=10800/+03:00, saving=3600]
            -----
                  2033-10-28T01:00  [utc=2014063200   raw=1d4ef858700, offset=7200/+02:00, saving=0]
    (OK)          2033-10-28T01:00  [utc=2014063200   raw=1d4ef858700, offset=7200/+02:00, saving=0]
            -----
                  2034-02-25T00:00  [utc=2024431200   raw=1d75980a700, offset=10800/+03:00, saving=3600]
    (NG)          2034-02-24T00:00  [utc=2024344800   raw=1d7545a4b00, offset=10800/+03:00, saving=3600]
            -----
                  2034-10-27T01:00  [utc=2045512800   raw=1dc42105700, offset=7200/+02:00, saving=0]
    (OK)          2034-10-27T01:00  [utc=2045512800   raw=1dc42105700, offset=7200/+02:00, saving=0]
            -----
                  2035-02-24T00:00  [utc=2055880800   raw=1deac0b7700, offset=10800/+03:00, saving=3600]
    (NG)          2035-02-23T00:00  [utc=2055794400   raw=1dea6e51b00, offset=10800/+03:00, saving=3600]
            -----
                  2035-10-26T01:00  [utc=2076962400   raw=1e3949b2700, offset=7200/+02:00, saving=0]
    (OK)          2035-10-26T01:00  [utc=2076962400   raw=1e3949b2700, offset=7200/+02:00, saving=0]
            -----
                  2036-03-01T00:00  [utc=2087935200   raw=1e622a2cb00, offset=10800/+03:00, saving=3600]
    (NG)          2036-02-29T00:00  [utc=2087848800   raw=1e61d7c6f00, offset=10800/+03:00, saving=3600]
            -----
                  2036-10-31T01:00  [utc=2109016800   raw=1eb0b327b00, offset=7200/+02:00, saving=0]
    (OK)          2036-10-31T01:00  [utc=2109016800   raw=1eb0b327b00, offset=7200/+02:00, saving=0]
            -----
                  2037-02-28T00:00  [utc=2119384800   raw=1ed752d9b00, offset=10800/+03:00, saving=3600]
    (NG)          2037-02-27T00:00  [utc=2119298400   raw=1ed70073f00, offset=10800/+03:00, saving=3600]
            -----
                  2037-10-30T01:00  [utc=2140466400   raw=1f25dbd4b00, offset=7200/+02:00, saving=0]
    (OK)          2037-10-30T01:00  [utc=2140466400   raw=1f25dbd4b00, offset=7200/+02:00, saving=0]
            -----
    -------------
STDERR:
javazic: warning: found last rules for Morocco inconsistent.
javazic: warning: found last rules for Morocco inconsistent.
javazic: warning: found last rules for Eire inconsistent.
java.lang.RuntimeException:   FAILED:  Asia/Amman
	at TestZoneInfo310.main(TestZoneInfo310.java:204)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at com.sun.javatest.regtest.agent.MainActionHelper$AgentVMRunnable.run(MainActionHelper.java:312)
	at java.base/java.lang.Thread.run(Thread.java:833)

JavaTest Message: Test threw exception: java.lang.RuntimeException
JavaTest Message: shutting down test


TEST RESULT: Failed. Execution failed: `main' threw exception: java.lang.RuntimeException: FAILED: Asia/Amman",,,,,,,,,,,JDK-8275213,JDK-8277832,JDK-8275781,JDK-8279055,JDK-8275898,JDK-8275895,JDK-8275901,,,,,,,JDK-8274407,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2uhw3:",9223372036854775807,b19,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@a9a7756,,,,,,,,,"2021-10-04 16:02;naoto;Will be fixed with 2021c upgrade;;;","2021-10-05 18:56;naoto;Calculation of transitions between rule's last year till 2037 was wrong. It incorrectly adds one day if the time is at the end of the transition day, which is already taken into account in secondOfDay as 86400. ;;;","2021-10-07 08:33;roboduke;Changeset: 8ca08461
Author:    Naoto Sato <naoto@openjdk.org>
Date:      2021-10-07 15:32:11 +0000
URL:       https://git.openjdk.java.net/jdk/commit/8ca084617f331b6af934179f3f776c8158da5bba
;;;","2021-10-25 03:11;mdoerr;Fix Request (11u):
Should get backported for parity with 11.0.14-oracle (together with JDK-8274407 and JDK-8274468 which were fixed with the same commit). Applies cleanly. ;;;",,,,,,,,,,,,,,,,,,,,,,
Fix javax/swing/text/ParagraphView/6364882/bug6364882.java failures,JDK-8274465,5059438,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,aivanov,jiefu,jiefu,2021-09-28 16:35,2022-03-28 06:15,2023-10-01 09:57,2021-10-01 11:42,18,,,,,,,18,client-libs,,0,cssn21_09_02,cssn21_12_02,cssn22_01_02,jdk11u-fix-request,jdk11u-fix-yes,jdk17u-fix-request,jdk17u-fix-yes,noreg-self,regression,regression_8273634,sustaining,tencent-interest,testbug,tier3,,,,,,,,"javax/swing/text/ParagraphView/6364882/bug6364882.java was observed failing on our non-GUI platforms. 

The OS is tlinux which is developed and widely used in our company.

STDERR:
java.lang.reflect.InvocationTargetException
        at java.desktop/java.awt.EventQueue.invokeAndWait(EventQueue.java:1371)
        at java.desktop/java.awt.EventQueue.invokeAndWait(EventQueue.java:1346)
        at java.desktop/javax.swing.SwingUtilities.invokeAndWait(SwingUtilities.java:1480)
        at bug6364882.main(bug6364882.java:83)
        at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
        at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
        at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
        at java.base/java.lang.reflect.Method.invoke(Method.java:568)
        at com.sun.javatest.regtest.agent.MainWrapper$MainThread.run(MainWrapper.java:127)
        at java.base/java.lang.Thread.run(Thread.java:833)
Caused by: java.lang.AssertionError: paragraph doesn't have 6 rows of text
        at bug6364882.checkJustification(bug6364882.java:137)
        at bug6364882.lambda$main$0(bug6364882.java:87)
        at java.desktop/java.awt.event.InvocationEvent.dispatch(InvocationEvent.java:308)
        at java.desktop/java.awt.EventQueue.dispatchEventImpl(EventQueue.java:773)
        at java.desktop/java.awt.EventQueue$4.run(EventQueue.java:720)
        at java.desktop/java.awt.EventQueue$4.run(EventQueue.java:714)
        at java.base/java.security.AccessController.doPrivileged(AccessController.java:399)
        at java.base/java.security.ProtectionDomain$JavaSecurityAccessImpl.doIntersectionPrivilege(ProtectionDomain.java:86)
        at java.desktop/java.awt.EventQueue.dispatchEvent(EventQueue.java:742)
        at java.desktop/java.awt.EventDispatchThread.pumpOneEventForFilters(EventDispatchThread.java:203)
        at java.desktop/java.awt.EventDispatchThread.pumpEventsForFilter(EventDispatchThread.java:124)
        at java.desktop/java.awt.EventDispatchThread.pumpEventsForHierarchy(EventDispatchThread.java:113)
        at java.desktop/java.awt.EventDispatchThread.pumpEvents(EventDispatchThread.java:109)
        at java.desktop/java.awt.EventDispatchThread.pumpEvents(EventDispatchThread.java:101)
        at java.desktop/java.awt.EventDispatchThread.run(EventDispatchThread.java:90)

This test passed on our GUI platforms but failed without GUI.",,,,,,,,,,,JDK-8279266,JDK-8279269,JDK-8279501,JDK-8281030,JDK-8279968,,,,,,,,,,,,,,,,,,,,JDK-8273634,,,,,,,,,,"2021-09-29 23:08;jiefu;editorPane7.png;https://bugs.openjdk.org/secure/attachment/96610/editorPane7.png",,,,,,,,,,,,,,,,,,,"0|i2uhvn:",9223372036854775807,b18,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@568a5b31,,,,,,,,,"2021-09-29 13:51;aivanov;[~jiefu] I've re-assigned the bug to myself and posted a new PR: https://github.com/openjdk/jdk/pull/5761

Could you please fill in the missing details? On what platform does the test fail? Could you also attached the image, please, as discussed in your PR?;;;","2021-09-30 17:07;jiefu;OS info has been added.
It fails on our tlinux before this fix.
The image had been attached in the JBS yesterday.;;;","2021-09-30 19:00;prr;We've now seen this fail in CI on Ubuntu 20.04

java.lang.reflect.InvocationTargetException
	at java.desktop/java.awt.EventQueue.invokeAndWait(EventQueue.java:1371)
	at java.desktop/java.awt.EventQueue.invokeAndWait(EventQueue.java:1346)
	at java.desktop/javax.swing.SwingUtilities.invokeAndWait(SwingUtilities.java:1480)
	at bug6364882.main(bug6364882.java:83)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at com.sun.javatest.regtest.agent.MainWrapper$MainThread.run(MainWrapper.java:127)
	at java.base/java.lang.Thread.run(Thread.java:833)
Caused by: java.lang.AssertionError: paragraph doesn't have 6 rows of text
	at bug6364882.checkJustification(bug6364882.java:137)
	at bug6364882.lambda$main$0(bug6364882.java:87)
	at java.desktop/java.awt.event.InvocationEvent.dispatch(InvocationEvent.java:308)
	at java.desktop/java.awt.EventQueue.dispatchEventImpl(EventQueue.java:773)
	at java.desktop/java.awt.EventQueue$4.run(EventQueue.java:720)
	at java.desktop/java.awt.EventQueue$4.run(EventQueue.java:714)
	at java.base/java.security.AccessController.doPrivileged(AccessController.java:399)
	at java.base/java.security.ProtectionDomain$JavaSecurityAccessImpl.doIntersectionPrivilege(ProtectionDomain.java:86)
	at java.desktop/java.awt.EventQueue.dispatchEvent(EventQueue.java:742)
	at java.desktop/java.awt.EventDispatchThread.pumpOneEventForFilters(EventDispatchThread.java:203)
	at java.desktop/java.awt.EventDispatchThread.pumpEventsForFilter(EventDispatchThread.java:124)
	at java.desktop/java.awt.EventDispatchThread.pumpEventsForHierarchy(EventDispatchThread.java:113)
	at java.desktop/java.awt.EventDispatchThread.pumpEvents(EventDispatchThread.java:109)
	at java.desktop/java.awt.EventDispatchThread.pumpEvents(EventDispatchThread.java:101)
	at java.desktop/java.awt.EventDispatchThread.run(EventDispatchThread.java:90)

JavaTest Message: Test threw exception: java.lang.reflect.InvocationTargetException
JavaTest Message: shutting down test

STATUS:Failed.`main' threw exception: java.lang.reflect.InvocationTargetException;;;","2021-10-01 11:42;roboduke;Changeset: bb4500d0
Author:    Alexey Ivanov <aivanov@openjdk.org>
Date:      2021-10-01 18:41:51 +0000
URL:       https://git.openjdk.java.net/jdk/commit/bb4500d0d227cbb238bd6c862e143f864106a31a
;;;","2022-01-04 22:54;goetz;Fix request [17u]

I backport this for parity with 17.0.3-oracle.
No risk, only a test change.
Clean backport.
Required follow-up for JDK-8273643. Test passed and SAP nightly tests passed.;;;","2022-01-04 23:10;roboduke;A pull request was submitted for review.

URL: https://git.openjdk.java.net/jdk17u-dev/pull/59
Date: 2022-01-05 07:04:35 +0000
;;;","2022-01-12 07:13;goetz;Fix request [11u]

I backport this for parity with 11.0.15-oracle.
No risk, only a test change.
Clean backport.
Required follow-up for JDK-8273643. Test passed. SAP nightly testing passed.;;;","2022-01-12 07:19;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk11u-dev/pull/754
Date: 2022-01-12 15:12:52 +0000;;;",,,,,,,,,,,,,,,,,,
(sctp) com/sun/nio/sctp/SctpChannel/CloseDescriptors.java test should be resilient to lsof warnings,JDK-8274453,5059418,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,shade,shade,shade,2021-09-28 08:30,2021-10-06 18:02,2023-10-01 09:57,2021-09-29 09:59,18,,,,,,,18,core-libs,,0,testbug,ursqe-triaged,,,,,,,,,,,,,,,,,,,,"I am seeing com/sun/nio/sctp/SctpChannel/CloseDescriptors.java failing like below. It reliably reproduces on my machine.

$ CONF=linux-x86_64-server-fastdebug make run-test TEST=com/sun/nio/sctp/SctpChannel/CloseDescriptors.java
...

99
  0
  1
  2
  3
  4
  5
  6
  7
  8
  9
end
lsof: WARNING: can't stat() fuse.gvfsd-fuse file system /run/user/1000/gvfs
      Output information may be incomplete.
lsof: WARNING: can't stat() fuse file system /run/user/1000/doc
      Output information may be incomplete.
COMMAND     PID     USER   FD   TYPE             DEVICE SIZE/OFF      NODE NAME
java    1941570 buildbot    6u  unix 0x0000000000000000      0t0 153539367 type=STREAM
STDERR:
java.lang.RuntimeException: Failed: detected unclosed FD.
	at CloseDescriptors.main(CloseDescriptors.java:92)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at com.sun.javatest.regtest.agent.MainWrapper$MainThread.run(MainWrapper.java:127)
	at java.base/java.lang.Thread.run(Thread.java:833)
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8238274,,,,,,,,,,,,,,,,,,,,,,,,"0|i2uhr7:",9223372036854775807,b18,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@446e124a,,,,,,,,,"2021-09-28 08:47;shade;AFAICS, the test verifies that lsof outputs no more than LIMIT_LINES (2) lines. And on my machine, lsof prints some warnings that blow that limit. So this is a test bug. lsof -w might be used to suppress the warnings, I think.

Adding line numbers to the log:

line 0: lsof: WARNING: can't stat() squashfs file system ...
line 1:       Output information may be incomplete.
line 2: lsof: WARNING: can't stat() squashfs file system ...
line 3:       Output information may be incomplete.
line 4: lsof: WARNING: can't stat() squashfs file system ...
line 5:       Output information may be incomplete.
line 6: COMMAND    PID  USER   FD   TYPE             DEVICE SIZE/OFF      NODE NAME
line 7: java    970022 shade    6u  unix 0x0000000000000000      0t0 160035770 type=STREAM
;;;","2021-09-29 09:59;roboduke;Changeset: b1b66965
Author:    Aleksey Shipilev <shade@openjdk.org>
Date:      2021-09-29 16:57:40 +0000
URL:       https://git.openjdk.java.net/jdk/commit/b1b66965f1ec6eae547cc4f70f8271bd39ded6da
;;;",,,,,,,,,,,,,,,,,,,,,,,,
EXCEPTION_ACCESS_VIOLATION in BFSClosure::closure_impl,JDK-8274435,5059391,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,evergizova,evergizova,evergizova,2021-09-28 03:42,2021-10-06 18:04,2023-10-01 09:57,2021-10-01 05:55,14,15,17,18,,,,18,hotspot,,0,azul-interest,jdk15u-fix-request,jdk15u-fix-yes,jdk17u-fix-request,jdk17u-fix-yes,,,,,,,,,,,,,,,,,"The following tests intermittently failed with EXCEPTION_ACCESS_VIOLATION using jdk18 win32 client jvm:
jdk/jfr/event/oldobject/TestG1.java
jdk/jfr/event/oldobject/TestHeapDeep.java
jdk/jfr/event/oldobject/TestReferenceChainLimit.java
jdk/jfr/jcmd/TestJcmdDumpPathToGCRoots.java

Full hs_err logs are attached for jdk18 release build (hs_err_pid768.log) and jdk15u-dev slowdebug build (hs_err_pid2068.log), that has the same crash, but more representative stacktrace.

#
# A fatal error has been detected by the Java Runtime Environment:
#
#  EXCEPTION_ACCESS_VIOLATION (0xc0000005) at pc=0x7421d704, pid=768, tid=396
#
# JRE version: OpenJDK Runtime Environment (18.0) (build 18-internal+0-adhoc.tester.jdk)
# Java VM: OpenJDK Client VM (18-internal+0-adhoc.tester.jdk, mixed mode, emulated-client, serial gc, windows-x86)
# Problematic frame:
# V  [jvm.dll+0x2d704]  BFSClosure::closure_impl+0x54
#
# Core dump will be written. Default location: C:\Users\tester\tmp\JTwork\scratch\hs_err_pid768.mdmp
#
# JFR recording file will be written. Location: C:\Users\tester\tmp\JTwork\scratch\hs_err_pid768.jfr
#
# If you would like to submit a bug report, please visit:
#   https://bugreport.java.com/bugreport/crash.jsp
#

---------------  S U M M A R Y ------------

Command Line: -Dtest.vm.opts= -Dtest.tool.vm.opts= -Dtest.compiler.opts= -Dtest.java.opts= -Dtest.jdk=C:\Users\tester\tmp\jdk -Dcompile.jdk=C:\Users\tester\tmp\jdk -Dtest.timeout.factor=1.0 -Dtest.root=C:\Users\tester\tmp\openjdk\test\jdk -Dtest.name=jdk/jfr/jcmd/TestJcmdDumpPathToGCRoots.java -Dtest.file=C:\Users\tester\tmp\openjdk\test\jdk\jdk\jfr\jcmd\TestJcmdDumpPathToGCRoots.java -Dtest.src=C:\Users\tester\tmp\openjdk\test\jdk\jdk\jfr\jcmd -Dtest.src.path=C:\Users\tester\tmp\openjdk\test\jdk\jdk\jfr\jcmd;C:\Users\tester\tmp\openjdk\test\lib;C:\Users\tester\tmp\openjdk\test\jdk -Dtest.classes=C:\Users\tester\tmp\JTwork\classes\jdk\jfr\jcmd\TestJcmdDumpPathToGCRoots.d -Dtest.class.path=C:\Users\tester\tmp\JTwork\classes\jdk\jfr\jcmd\TestJcmdDumpPathToGCRoots.d;C:\Users\tester\tmp\JTwork\classes\test\lib;C:\Users\tester\tmp\JTwork\classes\test\jdk -Dtest.modules=jdk.jfr/jdk.jfr.internal.test --add-modules=jdk.jfr --add-exports=jdk.jfr/jdk.jfr.internal.test=ALL-UNNAMED -XX:TLABSize=2k com.sun.javatest.regtest.agent.MainWrapper C:\Users\tester\tmp\JTwork\jdk\jfr\jcmd\TestJcmdDumpPathToGCRoots.d\main.1.jta

Host: AMD EPYC 7R32, 8 cores, 15G,  Windows Server 2012 R2 , 64 bit Build 9600 (6.3.9600.19994)
Time: Mon Sep 27 20:33:26 2021 /GM elapsed time: 0.497426 seconds (0d 0h 0m 0s)

---------------  T H R E A D  ---------------

Current thread (0x13c247e0):  VMThread ""VM Thread"" [stack: 0x03300000,0x03350000] [id=396]

Stack: [0x03300000,0x03350000],  sp=0x0334f270,  free space=316k
Native frames: (J=compiled Java code, j=interpreted, Vv=VM code, C=native code)
V  [jvm.dll+0x2d704]  BFSClosure::closure_impl+0x54  (bfsclosure.cpp:131)

siginfo: EXCEPTION_ACCESS_VIOLATION (0xc0000005), reading address 0x00000000",,,,,,,,,,,JDK-8274690,JDK-8274697,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8229189,,,,,"2021-09-28 03:41;evergizova;hs_err_pid2068.log;https://bugs.openjdk.org/secure/attachment/96589/hs_err_pid2068.log","2021-09-28 03:41;evergizova;hs_err_pid768.log;https://bugs.openjdk.org/secure/attachment/96590/hs_err_pid768.log",,,,,,,,,,,14,,,,,,,"0|i2uhl7:",9223372036854775807,b18,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@42995637,,,,,,,,,"2021-10-01 05:55;roboduke;Changeset: c05dc268
Author:    Ekaterina Vergizova <evergizova@openjdk.org>
Committer: Yuri Nesterenko <yan@openjdk.org>
Date:      2021-10-01 12:53:08 +0000
URL:       https://git.openjdk.java.net/jdk/commit/c05dc268acaf87236f30cf700ea3ac778e3b20e5
;;;","2021-10-01 06:02;evergizova;Fix Request (17u)
I'd like to backport this fix to jdk17u. It prevents JVM crashes during JFR path to GC roots calculation.
The patch applies cleanly, tested with jdk/jfr.;;;","2021-10-01 07:43;evergizova;Fix Request (15u)
I'd like to backport this fix to 15u. It prevents JVM crashes during JFR path to GC roots calculation.
The patch applies cleanly, tested with jdk/jfr.;;;","2021-10-04 07:12;shade;I believe it was introduced by JDK-8229189 in 14, linking up.;;;",,,,,,,,,,,,,,,,,,,,,,
All Cells: misbehavior of startEdit,JDK-8274433,5059389,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,fastegal,fastegal,fastegal,2021-09-28 03:02,2021-10-27 15:45,2023-10-01 09:57,2021-10-04 03:53,jfx17,,,,,,,jfx18,javafx,,0,ListCell,startEdit,TableCell,TreeCell,TreeTableCell,,,,,,,,,,,,,,,,,"happens if (super) startEdit didn't succeed (== !cell.isEditing) 

- must not fire editStart event
- must not update control's editing location

failing tests for ListCell (each failing on the last assert):

    @Test
    public void testStartEditOffRangeMustNotFireStartEdit() {
        list.setEditable(true);
        cell.updateListView(list);
        cell.updateIndex(list.getItems().size());
        List<EditEvent> events = new ArrayList<>();
        list.addEventHandler(ListView.editStartEvent(), events::add);
        cell.startEdit();
        assertFalse(""sanity: off-range cell must not be editing"", cell.isEditing());
        assertEquals(""must not fire editStart"", 0, events.size());
    }
    
    @Test
    public void testStartEditOffRangeMustNotUpdateEditingLocation() {
        list.setEditable(true);
        cell.updateListView(list);
        cell.updateIndex(list.getItems().size());
        cell.startEdit();
        assertFalse(""sanity: cell must not be editing if index off range"", cell.isEditing());
        assertEquals(""editing location"", - 1, list.getEditingIndex());
    }
    
for list, it sets the editingIndex to the off-range value. For tree-/table, a fix of JDK-8187474 leads to a stackoverflow error. Tree not yet tested, probably similar.

Problem seems to be the implementation pattern of startEdit (which is basically the same for all concrete cells)

     // backout if not editable for any reason
     if (notEditable ...) return;
     // note: null control and/or other related parties is allowed
     super.startEdit();
     if (eventTarget != null) 
         fire(editStart)
     if (editingControl != null)
        editingControl.edit(cellLocation)

that is, both firing and updating control's state will happen even if the cell is not in editing state.

Checking EditEvent spec: listView.setOnEditStart

""the EventHandler that will be called when the user begins an edit"" implies (for me at least ;) that the edit actually _did_ start.

Fix would be to backout if cell is not in editing state after calling super (just as the really editable cells in the xx.cell package are doing, see JDK-8188026):

      ....
      super.startEdit();
      if (!isEditing()) return;
      ...

P3 because it blocks JDK-8187474
",,,,,,,,,,,,,,,,,,,,,,,,JDK-8187474,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2uhkr:",9223372036854775807,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@67282485,,,,,,,,,"2021-10-04 03:53;roboduke;Changeset: 2c86e0fc
Author:    Jeanette Winzenburg <fastegal@openjdk.org>
Date:      2021-10-04 10:51:56 +0000
URL:       https://git.openjdk.java.net/jfx/commit/2c86e0fc81074f6ad49b798c891a358a5fe15f94
;;;",,,,,,,,,,,,,,,,,,,,,,,,,
"RunThese30M.java failed ""assert(!LCA_orig->dominates(pred_block) || early->dominates(pred_block)) failed: early is high enough""",JDK-8274406,5059360,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,chagedorn,dcubed,dcubed,2021-09-27 18:06,2021-11-09 10:11,2023-10-01 09:57,2021-09-30 01:31,17,18,,,,,,18,hotspot,,0,c2,hs-comp-triaged,intermittent,jdk17u-fix-request,jdk17u-fix-yes,oracle-triage-11,oracle-triage-17,oracle-triage-18,test-bigapps-runThese,tier4,tier7,,,,,,,,,,,"The following test failed in the JDK18 CI:

applications/runthese/RunThese30M.java

Here's a snippet from the log file:

#
# A fatal error has been detected by the Java Runtime Environment:
#
#  Internal Error (/opt/mach5/mesos/work_dir/slaves/ff806ead-2cac-495d-9cbc-62116f99bf14-S14127/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/746347b9-9223-414d-9ead-3b7a2b870188/runs/01306816-de37-49bf-906c-342650ce7894/workspace/open/src/hotspot/share/opto/gcm.cpp:766), pid=31424, tid=31440
#  assert(!LCA_orig->dominates(pred_block) || early->dominates(pred_block)) failed: early is high enough
#
# JRE version: Java(TM) SE Runtime Environment (18.0+17) (fastdebug build 18-ea+17-984)
# Java VM: Java HotSpot(TM) 64-Bit Server VM (fastdebug 18-ea+17-984, compiled mode, sharing, tiered, compressed oops, compressed class ptrs, g1 gc, linux-amd64)
# Problematic frame:
# V  [libjvm.so+0xd188d5]  PhaseCFG::insert_anti_dependences(Block*, Node*, bool)+0x1895
#
# Core dump will be written. Default location: Core dumps may be processed with ""/opt/core.sh %p"" (or dumping to /opt/mach5/mesos/work_dir/slaves/ff806ead-2cac-495d-9cbc-62116f99bf14-S13973/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/01f3c21f-3d7f-451d-a68d-df11c4eeb5ed/runs/837f014e-5a4c-47b1-9fb1-856e452f4d72/testoutput/test-support/jtreg_closed_test_hotspot_jtreg_applications_runthese_RunThese30M_java/scratch/0/core.31424)
#
# JFR recording file will be written. Location: /opt/mach5/mesos/work_dir/slaves/ff806ead-2cac-495d-9cbc-62116f99bf14-S13973/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/01f3c21f-3d7f-451d-a68d-df11c4eeb5ed/runs/837f014e-5a4c-47b1-9fb1-856e452f4d72/testoutput/test-support/jtreg_closed_test_hotspot_jtreg_applications_runthese_RunThese30M_java/scratch/0/hs_err_pid31424.jfr
#
Unsupported internal testing APIs have been used.

# An error report file with more information is saved as:
# /opt/mach5/mesos/work_dir/slaves/ff806ead-2cac-495d-9cbc-62116f99bf14-S13973/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/01f3c21f-3d7f-451d-a68d-df11c4eeb5ed/runs/837f014e-5a4c-47b1-9fb1-856e452f4d72/testoutput/test-support/jtreg_closed_test_hotspot_jtreg_applications_runthese_RunThese30M_java/scratch/0/hs_err_pid31424.log
#
# Compiler replay data is saved as:
# /opt/mach5/mesos/work_dir/slaves/ff806ead-2cac-495d-9cbc-62116f99bf14-S13973/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/01f3c21f-3d7f-451d-a68d-df11c4eeb5ed/runs/837f014e-5a4c-47b1-9fb1-856e452f4d72/testoutput/test-support/jtreg_closed_test_hotspot_jtreg_applications_runthese_RunThese30M_java/scratch/0/replay_pid31424.log
#
# If you would like to submit a bug report, please visit:
#   https://bugreport.java.com/bugreport/crash.jsp
#
----------System.err:(1076/75173)----------


Here's the crashing thread's stack:

---------------  T H R E A D  ---------------

Current thread (0x00007f437827f970):  JavaThread ""C2 CompilerThread0"" daemon [_thread_in_native, id=31440, stack(0x00007f43284f9000,0x00007f43285fa000)]


Current CompileTask:
C2: 538830 63738   !b  4       jdk.jfr.internal.JVMUpcalls::onRetransform (188 bytes)

Stack: [0x00007f43284f9000,0x00007f43285fa000],  sp=0x00007f43285f46b0,  free space=1005k
Native frames: (J=compiled Java code, j=interpreted, Vv=VM code, C=native code)
V  [libjvm.so+0xd188d5]  PhaseCFG::insert_anti_dependences(Block*, Node*, bool)+0x1895
V  [libjvm.so+0xd1f78b]  PhaseCFG::schedule_late(VectorSet&, Node_Stack&)+0xc7b
V  [libjvm.so+0xd1ffc5]  PhaseCFG::global_code_motion()+0x325
V  [libjvm.so+0xd241e1]  PhaseCFG::do_global_code_motion()+0x51
V  [libjvm.so+0x9f99b3]  Compile::Code_Gen()+0x293
V  [libjvm.so+0xa05ee8]  Compile::Compile(ciEnv*, ciMethod*, int, bool, bool, bool, bool, bool, DirectiveSet*)+0x1678
V  [libjvm.so+0x81ea56]  C2Compiler::compile_method(ciEnv*, ciMethod*, int, bool, DirectiveSet*)+0x646
V  [libjvm.so+0xa16119]  CompileBroker::invoke_compiler_on_method(CompileTask*)+0xc39
V  [libjvm.so+0xa16d78]  CompileBroker::compiler_thread_loop()+0x518
V  [libjvm.so+0x18911ac]  JavaThread::thread_main_inner()+0x27c
V  [libjvm.so+0x1897750]  Thread::call_run()+0x100
V  [libjvm.so+0x1575494]  thread_native_entry(Thread*)+0x104",,,,,,,,,,,JDK-8275043,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8274074,,,,,,,,,,x86_64,,,,,,,,,linux,,,,,"0|i2uheb:",9223372036854775807,b18,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2021-09-27 23:13;chagedorn;ILW = C2 assertion in global code motion, single test, disable compilation of affected method = HLM = P3;;;","2021-09-30 01:31;roboduke;Changeset: dfc557cb
Author:    Christian Hagedorn <chagedorn@openjdk.org>
Date:      2021-09-30 08:29:43 +0000
URL:       https://git.openjdk.java.net/jdk/commit/dfc557cbea342b2991f9d129235470ac789b50a2
;;;","2021-10-11 01:16;thartmann;Fix request (17u):
This fixes a regression introduced by JDK-8274074 in JDK 17u. The fix is low risk and has been tested in the JDK 18 for a while and with tier1-3 in JDK 17u. The patch applies cleanly.;;;",,,,,,,,,,,,,,,,,,,,,,,
C2: GraphKit::load_array_element bypasses Access API,JDK-8274401,5059355,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,mdoerr,mdoerr,mdoerr,2021-09-27 15:01,2021-10-18 02:37,2023-10-01 09:57,2021-09-30 01:42,17,18,,,,,,18,hotspot,,0,c2,gc-shenandoah,hs-comp-triaged,jdk17u-fix-request,jdk17u-fix-yes,oracle-triage-11,oracle-triage-17,oracle-triage-18,redhat-interest,,,,,,,,,,,,,"C2: GraphKit::load_array_element only creates nodes for loading a raw element from the given array. This is wrong when the element is an Oop which needs a load barrier for some GCs.

There's currently only one usage of load_array_element for an Oop element in code which is only used by PPC64 and s390. These platforms currently don't support GCs with load barriers. So, this issue needs to get fixed in order to support these GCs.

It will also need to get fixed for possible future usages with Oop elements.


",,,,,,,,,,,JDK-8275398,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8274851,,,,,,,,,,,,,,,,,,,,,,,,"0|i2uhd7:",9223372036854775807,b18,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2021-09-27 23:18;chagedorn;ILW = Possible bypass of Access API in the future, not observed today, no workaround = MLH = P4;;;","2021-09-30 01:42;roboduke;Changeset: a8210c53
Author:    Martin Doerr <mdoerr@openjdk.org>
Date:      2021-09-30 08:41:03 +0000
URL:       https://git.openjdk.java.net/jdk/commit/a8210c53e7af1cb558251fcb420de1b8a5461b25
;;;","2021-10-15 05:50;mdoerr;Fix Request (17u): 
Prerequisite for backport of ZGC or ShenandoahGC on PPC64. Current implementation of GraphKit::load_array_element misses load barriers which are required for these GCs. It's a bug in C2 platform independent code, but currently only affects PPC64 and s390 which use this function for Oop array accesses. Note that future usages may require this fix on other platforms, too. Tested in jdk18. No regression. Applies cleanly.;;;",,,,,,,,,,,,,,,,,,,,,,,
[lworld] LambdaConversionException thrown when the receiver type is a primitive reference type and the implementation type is the primitive value type of the same class ,JDK-8274399,5059353,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,mchung,mchung,mchung,2021-09-27 14:41,2022-02-07 16:35,2023-10-01 09:57,2022-02-07 16:35,repo-valhalla,,,,,,,,core-libs,,0,lworld,,,,,,,,,,,,,,,,,,,,,"
public primitive class CheckRefLambda.val {
    int theInteger;
    public CheckRefLambda(int newValue) {
        theInteger = newValue;
    }
    public Supplier<CheckRefLambda.ref> makeCopier() {
        return () -> new CheckRefLambda(this.theInteger + 1);
    }
    // ...
}

if javac generates the following code where the receiver type is a primitive reference type and the implementation type is the primitive value type of the same primitive class, LambdaConversionException will be thrown:

```
public java.util.function.Supplier<X> makeCopier();
    descriptor: ()Ljava/util/function/Supplier;
    flags: (0x0001) ACC_PUBLIC
    Code:
      stack=1, locals=1, args_size=1
         0: aload_0
         1: invokedynamic #7,  0              // InvokeDynamic #0:get:(LX;)Ljava/util/function/Supplier;
         6: areturn
      LineNumberTable:
        line 12: 0
      LocalVariableTable:
        Start  Length  Slot  Name   Signature
            0       7     0  this   QX;
```

won't bootstrap the lambda, but fails with:

java.lang.BootstrapMethodError: bootstrap method initialization exception
at java.base/java.lang.invoke.BootstrapMethodInvoker.invoke(BootstrapMethodInvoker.java:188)
at java.base/java.lang.invoke.CallSite.makeSite(CallSite.java:315)
at java.base/java.lang.invoke.MethodHandleNatives.linkCallSiteImpl(MethodHandleNatives.java:281)
at java.base/java.lang.invoke.MethodHandleNatives.linkCallSite(MethodHandleNatives.java:271)
at CheckRefLambda.makeCopyer(CheckRefLambda.java:42)
at CheckRefLambda.main(CheckRefLambda.java:47)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.base/java.lang.reflect.Method.invoke(Method.java:569)
at com.sun.javatest.regtest.agent.MainActionHelper$AgentVMRunnable.run(MainActionHelper.java:312)
at java.base/java.lang.Thread.run(Thread.java:833)
Caused by: java.lang.invoke.LambdaConversionException: Invalid receiver type primitive CheckRefLambda; not a subtype of implementation type primitive CheckRefLambda
at java.base/java.lang.invoke.AbstractValidatingLambdaMetafactory.validateMetafactoryArgs(AbstractValidatingLambdaMetafactory.java:271)
at java.base/java.lang.invoke.LambdaMetafactory.metafactory(LambdaMetafactory.java:340)
at java.base/java.lang.invoke.BootstrapMethodInvoker.invoke(BootstrapMethodInvoker.java:134)
... 11 more ",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8273301,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2uhcr:",9223372036854775807,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@1cfeb1de,,,,,,,,,"2022-02-07 16:18;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/valhalla/pull/631
Date: 2022-02-07 12:33:39 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,,
[macOS] Stop setting env. var JAVA_MAIN_CLASS_<pid> in launcher code,JDK-8274397,5059347,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,prr,prr,prr,2021-09-27 13:47,2021-10-11 15:46,2023-10-01 09:57,2021-10-05 10:31,11,17,18,,,,,18,client-libs,,0,jdk11-graalvm,jdk17-graalvm,macos,sn_103,,,,,,,,,,,,,,,,,,"https://bugs.openjdk.java.net/browse/JDK-8270549 describes a thread safety problem with ProcessEnvironment
due to concurrent use in JDK code of getenv and setenv/putenv which are (according to that bug) not thread safe anyway

Whilst there are a number of places in JDK native code that setenv/putenv is used,  the cases in the launcher code for macOS are where a problem was observed by graal snapshotting

These macos launcher cases are :

APP_NAME_<pid>  : set if -Xdock:name=<str> is specified
APP_ICON_<pid>   : set if -Xdock:icon=<str> is specified
JAVA_MAIN_CLASS_<pid> : set unconditionally
JAVA_STARTED_ON_FIRST_THREAD_<pid>:  set if -XstartOnFirstThread is specified

You can see these set in java.base/macosx/native/libjli/java_md_macosx.m

All except the last one are used to set the names seen on the macOS desktop such as the system menu bar.

Also this old bug https://bugs.openjdk.java.net/browse/JDK-7131021
added comments to all of them that :

     * NOTE: It is used by SWT, and JavaFX.

The bug also says these were set all the way back in the Apple  JDK 6 days

The bug JDK-7131021 also says
SWT relies on APP_NAME and APP_ICON. We should not drop support for these variables.

I think that is more precise than the source code comment since I've looked at SWT 2011 v2.7 and 2021 latest SWT
and I see (in both) that APP_NAME and APP_ICON are used but neither uses the others.

FX also does use APP_ICON but not APP_NAME

JAVA_STARTED_ON_FIRST_THREAD is for the *benefit* of FX but it is AWT that uses it not FX

So in summary
JAVA_STARTED_ON_FIRST_THREAD - JDK internal
    - I need to understand the splash screen case here - code there reads this and splash can be running
      early on but this is set in post VM init code ...
JAVA_MAIN_CLASS_<pid> - JDK internal - set unconditionally
APP_ICON_<pid> - JDK internal + SWT + FX
APP_NAME_<pid>  - JDK internal + SWT

APP_ICON and APP_NAME  may be difficult to get rid of because of SWT but they are not set unless the app explicitly asks for it.
And it appears they are set before the VM is up and running so it is still in single-threaded mode and not likely to be a problem


JAVA_STARTED_ON_FIRST_THREAD perhaps has potential to be an issue but again it is only set in extremely rare cases

The real problem is JAVA_MAIN_CLASS_<pid>

I think we can get rid of setting that.  The AWT code already checks another env. var a system property and various
Apple app bundle values as well .. so let's just set it as the System property AWT is already looking for.
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8270549,,,,,JDK-7131021,,,,,,,,,,,,,,,,,,,,,,,,"0|i2uhbf:",9223372036854775807,b18,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@5a9b3fd3,,,,,,,,,"2021-10-05 10:31;roboduke;Changeset: 37890650
Author:    Phil Race <prr@openjdk.org>
Date:      2021-10-05 17:30:31 +0000
URL:       https://git.openjdk.java.net/jdk/commit/37890650a7c97d484b6b520d909f677dac4e46e1
;;;",,,,,,,,,,,,,,,,,,,,,,,,,
JNI call of getAccessibleSelection on a wrong thread,JDK-8274383,5059333,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,asemenov,ant,ant,2021-09-27 09:54,2023-05-05 03:52,2023-10-01 09:57,2021-09-28 09:41,18,,,,,,,18,client-libs,,0,a11y,jdk11u-a11y-defer,jdk17u-fix-request,jdk17u-fix-SQE-ok,jdk17u-fix-yes,macos,,,,,,,,,,,,,,,,"[ComboBoxAccessibility accessibilityValue] defines the getAccessibleSelection method on the AccessibleContext class, however the call should go through CAccessibility so that it is executed on the Event Dispatch thread.",,,,,,,,,,,JDK-8287652,JDK-8277464,JDK-8277686,JDK-8288261,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,os_x,,,,,"0|i2uh8b:",9223372036854775807,b17,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4785f47c,,,,,,,,,"2021-09-28 09:41;roboduke;Changeset: b36881fa
Author:    Artem Semenov <Artem.Semenov@jetbrains.com>
Committer: Anton Tarasov <ant@openjdk.org>
Date:      2021-09-28 16:40:47 +0000
URL:       https://git.openjdk.java.net/jdk/commit/b36881fa3b3f37400d4f2c0bca3192d88179f2ff
;;;","2021-11-17 08:46;asemenov;Fix request (17u) 
getAccessibleSelection may receive invalid data.
PR: https://github.com/openjdk/jdk17u/pull/280
 ;;;",,,,,,,,,,,,,,,,,,,,,,,,
missing CAccessibility definitions in JNI code ,JDK-8274381,5059329,Bug,Closed,JDK,JDK,software,duke,,,P2,Fixed,asemenov,ant,ant,2021-09-27 08:47,2022-01-26 13:59,2023-10-01 09:57,2021-09-28 09:12,18,,,,,,,18,client-libs,,0,a11y,azul-interest,jdk11u-fix-request,jdk11u-fix-yes,jdk13u-fix-request,jdk13u-fix-yes,jdk15u-fix-request,jdk15u-fix-yes,jdk17u-fix-request,jdk17u-fix-SQE-ok-next,jdk17u-fix-yes,jnf,macos,,,,,,,,,"accessibilityHitTest in JavaComponentAccessibility and getAxComponentSize in JavaAccessibilityUtilities use but do not define sjc_CAccessibility. It works when sjc_CAccessibility is defined by other methods, otherwise it crashes.",,,,,,,,,,,JDK-8274844,JDK-8274884,JDK-8274557,JDK-8275504,JDK-8274843,JDK-8274790,,,,,,,,,,,,,,,,JDK-8274327,,,,,,,,,,,,,,,,,,,,,,,,,,,os_x,,,,,"0|i2uh7f:",9223372036854775807,b17,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4785f47c,,,,,,,Verified,,"2021-09-28 09:12;roboduke;Changeset: be403737
Author:    Artem Semenov <Artem.Semenov@jetbrains.com>
Committer: Anton Tarasov <ant@openjdk.org>
Date:      2021-09-28 16:08:30 +0000
URL:       https://git.openjdk.java.net/jdk/commit/be4037374520917d5a0ed54eebb3d5d6d100d429
;;;","2021-09-30 03:07;ant;Fix request (17u)
A part of this fix (getAxComponentSize in JavaAccessibilityUtilities) is a followup to the fix JDK-8274056 ""JavaAccessibilityUtilities leaks JNI objects"" which has been back ported to 17u. The patch has been applied manually to 17u.
PR: https://github.com/openjdk/jdk17u/pull/120;;;","2021-10-06 02:43;mdoerr;Fix Request (11u):
Should get backported for parity with 11.0.14-oracle. Fix from 17u applies cleanly (see previous comment, JDK-8274056 is also backported to 11.0.14).;;;","2021-10-06 07:38;omikhaltcova;Fix request (13u)

I'd like to backport this fix to jdk13u as a followup to JDK-8274056 that has been already backported to jdk13u.
The original patch applied manually and it's absolutely identical to that one applied to jdk17u.;;;","2021-10-06 07:38;omikhaltcova;Fix request (15u)

I'd like to backport this fix to jdk15u as a followup to JDK-8274056 that has been already backported to jdk15u.
The original patch applied manually and it's absolutely identical to that one applied to jdk17u.;;;","2021-10-11 05:57;dbuck;[~asemenov] I will retroactively approve this for 17u. In the future, please be sure to wait until *after* receiving approval before integrating your changes.;;;","2022-01-26 13:59;landrews;Run SwingSet2 and found no crash ;;;",,,,,,,,,,,,,,,,,,,
Re-indent stack-trace examples for Throwable.printStackTrace,JDK-8274367,5059312,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,prappo,prappo,prappo,2021-09-27 04:44,2021-10-04 13:39,2023-10-01 09:57,2021-09-27 15:34,18,,,,,,,18,core-libs,,0,noreg-doc,,,,,,,,,,,,,,,,,,,,,"1. Indentation in stack-trace output is significant. The cause of an exception is output on the same level of indentation as that of the exception. A suppressed exception is output at a deeper level of indentation than that of the containing exception. The last example for Throwable.printStackTrace violates this.

2. Indentation in examples for Throwable.printStackTrace that relate to suppressed exceptions is inconsistent with that of cause exceptions.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2uh3n:",9223372036854775807,b17,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4c088d55,,,,,,,,,"2021-09-27 15:34;roboduke;Changeset: c880b87a
Author:    Pavel Rappo <prappo@openjdk.org>
Date:      2021-09-27 22:32:49 +0000
URL:       https://git.openjdk.java.net/jdk/commit/c880b87a205cc9611fe88cb29f506293dfebf946
;;;",,,,,,,,,,,,,,,,,,,,,,,,,
Transitively sealed classes not considered exhaustive in switches,JDK-8274363,5059311,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,jlahoda,jlahoda,jlahoda,2021-09-27 04:24,2021-10-06 18:04,2023-10-01 09:57,2021-10-01 01:57,17,18,,,,,,18,tools,,0,,,,,,,,,,,,,,,,,,,,,,"As reported here:

https://mail.openjdk.java.net/pipermail/amber-spec-experts/2021-July/003049.html

Consider this case:
---
public class SwitchCoverage {
    sealed interface A {}
    sealed interface B1 extends A {}
    sealed interface B2 extends A {}
    sealed interface C extends A {}
    final class D1 implements B1, C {}
    final class D2 implements B2, C {}
    
    void test(A arg) {
        int i = switch (arg) {
            case B1 b1 -> 1;
            case B2 b2 -> 2;
        };
    }
    
}
---

The case should be considered exhaustive, but it is not.
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2uh3f:",9223372036854775807,b18,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4dca67bd,,,,,,,,,"2021-10-01 01:57;roboduke;Changeset: 292d7bb1
Author:    Jan Lahoda <jlahoda@openjdk.org>
Date:      2021-10-01 08:54:18 +0000
URL:       https://git.openjdk.java.net/jdk/commit/292d7bb1d5d311b517b2cd6d0f6dc77e35b3f649
;;;",,,,,,,,,,,,,,,,,,,,,,,,,
ForkJoinPool.commonPool() does not work with 1 CPU,JDK-8274349,5059254,Bug,Closed,JDK,JDK,software,duke,,,P3,Fixed,dholmes,webbuggrp,webbuggrp,2021-09-25 08:36,2022-01-12 14:23,2023-10-01 09:57,2021-10-04 16:15,17,18,,,,,,18,core-libs,,0,additional-information-received,dcsaw,jdk17u-fix-request,jdk17u-fix-yes,regression,reproducer-yes,webbug,,,,,,,,,,,,,,,"ADDITIONAL SYSTEM INFORMATION :
$ java -version
openjdk version ""17"" 2021-09-14
OpenJDK Runtime Environment Temurin-17+35 (build 17+35)
OpenJDK 64-Bit Server VM Temurin-17+35 (build 17+35, mixed mode, sharing)

A DESCRIPTION OF THE PROBLEM :
The common pool does not process any submitted tasks if the JVM was started with Runtime.getRuntime().availableProcessors() reporting 1. This can be the case when starting it in a container or by setting the -XX:ActiveProcessorCount=1 flag.

REGRESSION : Last worked in version 16.0.2

STEPS TO FOLLOW TO REPRODUCE THE PROBLEM :
Run the code given below with `java -XX:ActiveProcessorCount=1 ForkJoinForget`.
""Hello World"" won't be printed this way

EXPECTED VERSUS ACTUAL BEHAVIOR :
EXPECTED -
Tasks submitted to the common pool get executed.
ACTUAL -
Tasks submitted to the common pool aren't executed.

---------- BEGIN SOURCE ----------
import java.util.concurrent.ForkJoinPool;

public class ForkJoinForget {

        public static void main(String[] args) throws Exception {
                ForkJoinPool.commonPool().submit(() -> System.out.println(""Hello World""));
                Thread.sleep(1000);
        }
}
---------- END SOURCE ----------

CUSTOMER SUBMITTED WORKAROUND :
One of:
- Not using containers with 1 CPU 
- manually set the property `java.util.concurrent.ForkJoinPool.common.parallelism` to 1
- Not using -XX:ActiveProcessorCount=1 as startup flag

FREQUENCY : always


",,,,,,,,,,,JDK-8274756,,,,,,,,,,,,,,,,,,,,,,,,JDK-8279484,,,,,JDK-8246585,,,,,"2021-09-26 22:39;tongwan;ForkJoinForget.java;https://bugs.openjdk.org/secure/attachment/96571/ForkJoinForget.java",,,,,generic,,,,,,b05,17,,generic,,,,,"0|i2ugqr:",9223372036854775807,b18,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@239b1eeb,,,,,,,Verified,,"2021-09-27 00:03;tongwan;The observations on Windows 10:
JDK 17ea+4: Passed, ""Hello World"" was printed
JDK 17ea+5: Failed,  ""Hello World"" was not printed
JDK 18ea+1: Failed.;;;","2021-09-27 01:55;dholmes;Likely related to JDK-8246585 - ForkJoin Updates

Paging [~martin] and [~dl];;;","2021-09-27 04:07;dl;It is a known and documented limitation that unjoined tasks may not complete when   java.util.concurrent.ForkJoinPool.common.parallelism is zero. Setting -XX:ActiveProcessorCount=1 now has this effect, because the default is NCPUs-1 It seems that we should check for explicit setting parallelism to zero versus keeping at one due to ActiveProcessorCount.;;;","2021-09-27 07:31;martin;Single CPU computers are becoming rare, but not non-existent.  Java based software should work well on Raspberry Pi Zero and in single-cpu containers.;;;","2021-09-27 12:15;dl;Actually, there doesn't seem to be anything that could or should be changed. The current behavior is as specified, but is surprising due to how -XX:ActiveProcessorCount=1 now works.  There isn't any way to guess the intent of users in the given test case without requiring use of -Djava.util.concurrent.ForkJoinPool.common.parallelism. I suppose we could discuss changing the spec if people are routinely surprised.;;;","2021-09-28 15:52;dholmes;Shouldn't the default be max(1, NCPUs-1)? Setting ActiveProcessorCount is just a simple way to replicate the issue, the real issue is single CPU containers.;;;","2021-09-28 21:24;martin;[~dl] I can't find anywhere that we specify the default parallelism of the common pool.  From the spec one might guess default parallelism is availableProcessors() , NOT availableProcessors()  - 1

I agree with [~dholmes] that max(1, NCPUs-1) is a reasonable choice.

We do document that setting java.util.concurrent.ForkJoinPool.common.parallelism to zero is a ""warranty-voiding operation"" - but that's not happening here.  It's very reasonable to expect the common pool to always provide at least one thread to run queued tasks.

This feels like a regression from jdk16 that should be fixed.;;;","2021-09-30 10:29;dl;Oh, I hadn't appreciated that jdk17 version was actually incompatible with previous version (not just due to -XX:ActiveProcessorCount). This should be fixed. The obvious patch to jsr166 version is below. Would someone like to commit to openjdk

--- ForkJoinPool.java.~1.402.~	2021-09-30 13:07:08.037109830 -0400
+++ ForkJoinPool.java	2021-09-30 13:23:27.316766510 -0400
@@ -2524,7 +2524,7 @@
      * overridden by system properties
      */
     private ForkJoinPool(byte forCommonPoolOnly) {
-        int parallelism = Runtime.getRuntime().availableProcessors() - 1;
+        int parallelism = Math.max(1, Runtime.getRuntime().availableProcessors() - 1);
         ForkJoinWorkerThreadFactory fac = null;
         UncaughtExceptionHandler handler = null;
         try {  // ignore exceptions in accessing/parsing properties
;;;","2021-09-30 16:15;dholmes;[~dl], [~martin] I'll push this through the PR process.

FTR it seems the regression was introduced when this expression:

if (parallelism < 0 && // default 1 less than #cores
    (parallelism = Runtime.getRuntime().availableProcessors() - 1) <= 0)
       parallelism = 1;

was refactored.;;;","2021-09-30 21:27;martin;One way to test running java single-cpu is via 
taskset 0x1 command ....
All current java tests should pass in such an environment - single CPU should be completely supported.
Running java tests this way should be a regular QA task.
But it is not.
Running jsr166 tck tests under taskset 0x1 fails:
JUnit Failure: testAwaitQuiescence2(ForkJoinPool8Test): null

Fixing all java tests for single-cpu tolerance would be a good project for a test engineer.;;;","2021-09-30 21:38;martin;While poking at this, I wrote some test improvements.
David, could you add these?

diff --git a/test/jdk/java/util/concurrent/tck/ForkJoinPoolTest.java b/test/jdk/java/util/concurrent/tck/ForkJoinPoolTest.java
index 781b7bffe6d..4703bc51483 100644
--- a/test/jdk/java/util/concurrent/tck/ForkJoinPoolTest.java
+++ b/test/jdk/java/util/concurrent/tck/ForkJoinPoolTest.java
@@ -51,6 +51,7 @@ import java.util.concurrent.ForkJoinWorkerThread;
 import java.util.concurrent.Future;
 import java.util.concurrent.RecursiveTask;
 import java.util.concurrent.RejectedExecutionException;
+import java.util.concurrent.ThreadLocalRandom;
 import java.util.concurrent.atomic.AtomicBoolean;
 import java.util.concurrent.atomic.AtomicInteger;
 import java.util.concurrent.locks.ReentrantLock;
@@ -223,13 +224,46 @@ public class ForkJoinPoolTest extends JSR166TestCase {
     /**
      * getParallelism returns size set in constructor
      */
-    public void testGetParallelism() {
-        ForkJoinPool p = new ForkJoinPool(1);
+    public void testGetParallelism_requestedValue() {
+        int parallelism = ThreadLocalRandom.current().nextInt(1, 4);
+        ForkJoinPool p = new ForkJoinPool(parallelism);
         try (PoolCleaner cleaner = cleaner(p)) {
-            assertEquals(1, p.getParallelism());
+            assertEquals(parallelism, p.getParallelism());
         }
     }
 
+    private static int availableProcessors() {
+        return Runtime.getRuntime().availableProcessors();
+    }
+
+    /**
+     * default pool parallelism is availableProcessors()
+     */
+    public void testParallelism_defaultValue() {
+        ForkJoinPool p = new ForkJoinPool();
+        try (PoolCleaner cleaner = cleaner(p)) {
+            assertEquals(availableProcessors(), p.getParallelism());
+        }
+    }
+
+    /**
+     * default common pool parallelism is max(1, availableProcessors() - 1)
+     * But getParallelism() returns 1 when property-requested parallelism is 0.
+     */
+    public void testCommonPoolParallelism_defaultValue() {
+        if (!testImplementationDetails) return;
+
+        Integer propertyParallelism =
+            Integer.getInteger(
+                ""java.util.concurrent.ForkJoinPool.common.parallelism"");
+
+        int expectedParallelism = (propertyParallelism == null)
+            ? Math.max(1, availableProcessors() - 1)
+            : Math.max(1, propertyParallelism);
+        assertEquals(expectedParallelism,
+                     ForkJoinPool.commonPool().getParallelism());
+    }
+
     /**
      * getPoolSize returns number of started workers.
      */
;;;","2021-09-30 22:07;dholmes;[~martin] test update applied to PR.;;;","2021-10-04 16:15;roboduke;Changeset: 2e542e33
Author:    David Holmes <dholmes@openjdk.org>
Date:      2021-10-04 23:14:12 +0000
URL:       https://git.openjdk.java.net/jdk/commit/2e542e33b81a53652956bb5e9636e7f4af5540f7
;;;","2021-10-04 16:25;dholmes;JDK 17u Fix request:

This fixes a regression in JDK 17 so it is important to get it into JDK 17u. The backport applies cleanly and is very low risk.;;;","2021-10-09 23:31;tongwan;Requested the submitter verify the fix by downloading the latest version of JDK 18 from https://jdk.java.net/18/;;;","2021-10-11 21:29;tongwan;From the submitter:
I just checked out the latest early access build and it works fine now. ;;;",,,,,,,,,,
Passing a *nested* switch expression as a parameter causes an NPE during compile,JDK-8274347,5059066,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,jlahoda,webbuggrp,webbuggrp,2021-09-22 13:12,2021-11-12 04:24,2023-10-01 09:57,2021-10-11 05:39,17,18,,,,,,18,tools,,0,azul-interest,dcsad,jdk17u-fix-request,jdk17u-fix-yes,regression,reproducer-yes,webbug,,,,,,,,,,,,,,,"ADDITIONAL SYSTEM INFORMATION :
openjdk 17 2021-09-14
OpenJDK Runtime Environment (build 17+35-2724)
OpenJDK 64-Bit Server VM (build 17+35-2724, mixed mode, sharing)

javac 17

A DESCRIPTION OF THE PROBLEM :
Non-nested switch expressions passed as parameters are successfully compiled but when there is a nested inner switch expression (within the outer expression passed as the parameter) then compilation results in a NullPointerException.

REGRESSION : Last worked in version 16.0.2

STEPS TO FOLLOW TO REPRODUCE THE PROBLEM :
Attempt to compile source code which passes a nested switch expression as a parameter to a method. Eg: "".../jdk-17/bin/javac.exe NestedSwitchExpressionCompileError.java"" (see example source code below)


EXPECTED VERSUS ACTUAL BEHAVIOR :
EXPECTED -
Expecting a successful compilation instead of a NullPointerException
ACTUAL -
> .../jdk-17/bin/javac.exe NestedSwitchExpressionCompileError.java

An exception has occurred in the compiler (17). Please file a bug against the Java compiler via the Java bug reporting page (http://bugreport.java.com) after checking the Bug Database (http://bugs.java.com) for duplicates. Include your program, the following diagnostic, and the parameters passed to the Java compiler in your report. Thank you.
java.lang.NullPointerException: Cannot read field ""tsym"" because ""selector.type"" is null
        at jdk.compiler/com.sun.tools.javac.tree.TreeInfo.isErrorEnumSwitch(TreeInfo.java:1344)
        at jdk.compiler/com.sun.tools.javac.comp.Flow$AliveAnalyzer.visitSwitchExpression(Flow.java:728)
        at jdk.compiler/com.sun.tools.javac.tree.JCTree$JCSwitchExpression.accept(JCTree.java:1380)
        at jdk.compiler/com.sun.tools.javac.tree.TreeScanner.scan(TreeScanner.java:49)
        at jdk.compiler/com.sun.tools.javac.comp.Flow$BaseAnalyzer.scan(Flow.java:444)
        at jdk.compiler/com.sun.tools.javac.comp.Flow$AliveAnalyzer.visitYield(Flow.java:874)
        at jdk.compiler/com.sun.tools.javac.tree.JCTree$JCYield.accept(JCTree.java:1658)
        at jdk.compiler/com.sun.tools.javac.tree.TreeScanner.scan(TreeScanner.java:49)
        at jdk.compiler/com.sun.tools.javac.comp.Flow$BaseAnalyzer.scan(Flow.java:444)
        at jdk.compiler/com.sun.tools.javac.tree.TreeScanner.scan(TreeScanner.java:57)
        at jdk.compiler/com.sun.tools.javac.tree.TreeScanner.visitCase(TreeScanner.java:181)
        at jdk.compiler/com.sun.tools.javac.tree.JCTree$JCCase.accept(JCTree.java:1335)
        at jdk.compiler/com.sun.tools.javac.tree.TreeScanner.scan(TreeScanner.java:49)
        at jdk.compiler/com.sun.tools.javac.comp.Flow$BaseAnalyzer.scan(Flow.java:444)
        at jdk.compiler/com.sun.tools.javac.comp.Flow$AliveAnalyzer.analyzeTree(Flow.java:945)
        at jdk.compiler/com.sun.tools.javac.comp.Flow.aliveAfter(Flow.java:273)
        at jdk.compiler/com.sun.tools.javac.comp.Attr.handleSwitch(Attr.java:1800)
        at jdk.compiler/com.sun.tools.javac.comp.Attr.visitSwitchExpression(Attr.java:1610)
        at jdk.compiler/com.sun.tools.javac.tree.JCTree$JCSwitchExpression.accept(JCTree.java:1380)
        at jdk.compiler/com.sun.tools.javac.comp.Attr.attribTree(Attr.java:674)
        at jdk.compiler/com.sun.tools.javac.comp.DeferredAttr.attribSpeculative(DeferredAttr.java:500)
        at jdk.compiler/com.sun.tools.javac.comp.DeferredAttr.attribSpeculative(DeferredAttr.java:480)
        at jdk.compiler/com.sun.tools.javac.comp.DeferredAttr.attribSpeculative(DeferredAttr.java:467)
        at jdk.compiler/com.sun.tools.javac.comp.ArgumentAttr.lambda$processArg$0(ArgumentAttr.java:220)
        at jdk.compiler/com.sun.tools.javac.comp.ArgumentAttr.processArg(ArgumentAttr.java:242)
        at jdk.compiler/com.sun.tools.javac.comp.ArgumentAttr.processArg(ArgumentAttr.java:219)
        at jdk.compiler/com.sun.tools.javac.comp.ArgumentAttr.visitSwitchExpression(ArgumentAttr.java:260)
        at jdk.compiler/com.sun.tools.javac.tree.JCTree$JCSwitchExpression.accept(JCTree.java:1380)
        at jdk.compiler/com.sun.tools.javac.comp.ArgumentAttr.attribArg(ArgumentAttr.java:197)
        at jdk.compiler/com.sun.tools.javac.comp.Attr.attribTree(Attr.java:672)
        at jdk.compiler/com.sun.tools.javac.comp.Attr.attribArgs(Attr.java:775)
        at jdk.compiler/com.sun.tools.javac.comp.Attr.visitApply(Attr.java:2554)
        at jdk.compiler/com.sun.tools.javac.tree.JCTree$JCMethodInvocation.accept(JCTree.java:1797)
        at jdk.compiler/com.sun.tools.javac.comp.Attr.attribTree(Attr.java:674)
        at jdk.compiler/com.sun.tools.javac.comp.Attr.attribExpr(Attr.java:727)
        at jdk.compiler/com.sun.tools.javac.comp.Attr.visitExec(Attr.java:2272)
        at jdk.compiler/com.sun.tools.javac.tree.JCTree$JCExpressionStatement.accept(JCTree.java:1584)
        at jdk.compiler/com.sun.tools.javac.comp.Attr.attribTree(Attr.java:674)
        at jdk.compiler/com.sun.tools.javac.comp.Attr.attribStat(Attr.java:748)
        at jdk.compiler/com.sun.tools.javac.comp.Attr.attribStats(Attr.java:767)
        at jdk.compiler/com.sun.tools.javac.comp.Attr.visitBlock(Attr.java:1445)
        at jdk.compiler/com.sun.tools.javac.tree.JCTree$JCBlock.accept(JCTree.java:1091)
        at jdk.compiler/com.sun.tools.javac.comp.Attr.attribTree(Attr.java:674)
        at jdk.compiler/com.sun.tools.javac.comp.Attr.attribStat(Attr.java:748)
        at jdk.compiler/com.sun.tools.javac.comp.Attr.visitMethodDef(Attr.java:1235)
        at jdk.compiler/com.sun.tools.javac.tree.JCTree$JCMethodDecl.accept(JCTree.java:921)
        at jdk.compiler/com.sun.tools.javac.comp.Attr.attribTree(Attr.java:674)
        at jdk.compiler/com.sun.tools.javac.comp.Attr.attribStat(Attr.java:748)
        at jdk.compiler/com.sun.tools.javac.comp.Attr.attribClassBody(Attr.java:5474)
        at jdk.compiler/com.sun.tools.javac.comp.Attr.attribClass(Attr.java:5365)
        at jdk.compiler/com.sun.tools.javac.comp.Attr.attribClass(Attr.java:5196)
        at jdk.compiler/com.sun.tools.javac.comp.Attr.attrib(Attr.java:5141)
        at jdk.compiler/com.sun.tools.javac.main.JavaCompiler.attribute(JavaCompiler.java:1317)
        at jdk.compiler/com.sun.tools.javac.main.JavaCompiler.compile(JavaCompiler.java:946)
        at jdk.compiler/com.sun.tools.javac.main.Main.compile(Main.java:317)
        at jdk.compiler/com.sun.tools.javac.main.Main.compile(Main.java:176)
        at jdk.compiler/com.sun.tools.javac.Main.compile(Main.java:64)
        at jdk.compiler/com.sun.tools.javac.Main.main(Main.java:50)

---------- BEGIN SOURCE ----------
class NestedSwitchExpressionCompileError {
	/* Based on JEP 361 example (https://openjdk.java.net/jeps/361#Switch-expressions) */
	static void howMany(int i, int j) {
		System.out.println(
			switch (i) {
			case 1 ->
				switch (j) {
				case 1 -> ""one and one"";
				default -> ""one and many"";
				};
			case 2 -> ""two"";
			default -> ""many"";
			}
		);
	}
}
---------- END SOURCE ----------

CUSTOMER SUBMITTED WORKAROUND :
Extract the result of the switch expression into a variable, then pass the variable as the parameter to the method call instead.
----------

class NestedSwitchExpressionCompileWorkaround{
	static void howMany(int i, int j) {
		String result = switch (i) {
		case 1 ->
			switch (j) {
			case 1 -> ""one and one"";
			default -> ""one and many"";
			};
		case 2 -> ""two"";
		default -> ""many"";
		}
		System.out.println(result);
	}
}

FREQUENCY : always


",,,,,,,,,,,JDK-8275402,,,,,,,,,,,,,,,,,,,JDK-8276147,,JDK-8277050,,,,,,,,,,,,,"2021-09-26 22:46;adev;Test.java;https://bugs.openjdk.org/secure/attachment/96572/Test.java",,,,,generic,,,,,,b31,17,,generic,,,,,"0|i2ufkz:",9223372036854775807,b19,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4dca67bd,,,,,,,,,"2021-09-26 22:46;adev;The issue is reproducible with JDK 17 b 31
Following is my observation:
JDK 16: pass (compiles successfully)
JDK 17b30: pass (compiles successfully)
JDK 17b31 onward: fail (NPE)
JDK 18: fail (NPE)
;;;","2021-10-11 05:38;roboduke;Changeset: b870468b
Author:    Jan Lahoda <jlahoda@openjdk.org>
Date:      2021-10-11 12:38:08 +0000
URL:       https://git.openjdk.java.net/jdk/commit/b870468bdc99938fbb19a41b0ede0a3e3769ace2
;;;","2021-10-15 06:37;evergizova;Fix Request (17u)
I'd like to backport this fix to 17u. It fixes regression in javac introduced in jdk17.
The patch applies cleanly.
Tested with langtools tests, updated tests fail without the patch, pass with it.;;;",,,,,,,,,,,,,,,,,,,,,,,
make build-test-lib is broken,JDK-8274345,5059292,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,jiefu,jiefu,jiefu,2021-09-26 19:43,2023-09-28 03:12,2023-10-01 09:57,2021-09-27 11:21,18,,,,,,,18,infrastructure,,0,jdk17u-fix-request,jdk17u-fix-yes,tencent-interest,,,,,,,,,,,,,,,,,,,"This is on behalf of Bob.

=== Output from failing command(s) repeated here ===
* For target support_test_lib_test-lib_classes__the.BUILD_TEST_LIB_JAR_batch:
/Users/fool/df/jdk/test/lib/jdk/test/lib/NetworkConfiguration.java:466: warning: [removal] AccessController in java.security has been deprecated and marked for removal
        AccessController.doPrivileged(pa);
        ^
error: warnings found and -Werror specified
/Users/fool/df/jdk/test/lib/jdk/test/lib/SA/SATestUtils.java:167: warning: [removal] AccessController in java.security has been deprecated and marked for removal
                var bb = AccessController.doPrivileged(
                         ^
/Users/fool/df/jdk/test/lib/jdk/test/lib/SA/SATestUtils.java:189: warning: [removal] AccessController in java.security has been deprecated and marked for removal
                var bb = AccessController.doPrivileged(
                         ^
/Users/fool/df/jdk/test/lib/jdk/test/lib/net/IPSupport.java:88: warning: [removal] AccessController in java.security has been deprecated and marked for removal
            return AccessController.doPrivileged(pa);
                   ^
/Users/fool/df/jdk/test/lib/jdk/test/lib/net/SimpleSSLContext.java:60: warning: [removal] AccessController in java.security has been deprecated and marked for removal
            AccessController.doPrivileged(new PrivilegedExceptionAction<Void>() {
   ... (rest of output omitted)
* For target support_test_lib_wb_classes__the.BUILD_WB_JAR_batch:
/Users/fool/df/jdk/test/lib/sun/hotspot/WhiteBox.java:35: error: package jdk.test.whitebox.parser does not exist
import jdk.test.whitebox.parser.DiagnosticCommand;
                               ^
/Users/fool/df/jdk/test/lib/sun/hotspot/WhiteBox.java:196: error: cannot find symbol
  private  native Object[]    parseCommandLine0(String commandline, char delim, DiagnosticCommand[] args);
                                                                                ^
  symbol:   class DiagnosticCommand
  location: class WhiteBox
/Users/fool/df/jdk/test/lib/sun/hotspot/WhiteBox.java:197: error: cannot find symbol
  public          Object[]    parseCommandLine(String commandline, char delim, DiagnosticCommand[] args) {
                                                                               ^
  symbol:   class DiagnosticCommand
  location: class WhiteBox
/Users/fool/df/jdk/test/lib/sun/hotspot/code/BlobType.java:86: warning: [deprecation] WhiteBox in sun.hotspot has been deprecated
        WhiteBox whiteBox = WhiteBox.getWhiteBox();
   ... (rest of output omitted)",,,,,,,,,,,JDK-8317231,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2ugz7:",9223372036854775807,b17,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@429c566,,,,,,,,,"2021-09-27 05:45;erikj;How are you configuring your build to reproduce this?;;;","2021-09-27 05:55;erikj;Ah, I see now that it's broken and that this isn't something we normally build as part of a product or test-image build, but an optional extra build step introduced in JDK-8136378.;;;","2021-09-27 11:21;roboduke;Changeset: 0865120e
Author:    bobpengxie <bobpengxie@tencent.com>
Committer: Magnus Ihse Bursie <ihse@openjdk.org>
Date:      2021-09-27 18:16:51 +0000
URL:       https://git.openjdk.java.net/jdk/commit/0865120e95f31f3c84282613860e9198a7d3003c
;;;","2023-09-27 07:12;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/1801
Date: 2023-09-27 11:26:02 +0000;;;","2023-09-27 07:26;roboduke;[jdk17u-fix-request] Approval Request from Vishal Chand
Fixes build-test-lib target. Applies as stack of three clean commits. make build-test-lib now works.;;;",,,,,,,,,,,,,,,,,,,,,
[BACKOUT] JDK-8271880: Tighten condition for excluding regions from collecting cards with cross-references,JDK-8274340,5059286,Bug,Closed,JDK,JDK,software,duke,,,P2,Fixed,tschatzl,dcubed,dcubed,2021-09-26 18:57,2022-02-10 14:26,2023-10-01 09:57,2021-09-29 07:01,18,,,,,,,18,hotspot,,0,gc-g1,gc-g1-fullgc,gc-pending-review,tier8,,,,,,,,,,,,,,,,,,"The following test failed in the JDK18 CI:

applications/kitchensink/Kitchensink24HStress.java

Here's a snippet from the log file:

#
# A fatal error has been detected by the Java Runtime Environment:
#
#  SIGSEGV (0xb) at pc=0x00007ff209bdaeec, pid=21948, tid=22024
#
# JRE version: Java(TM) SE Runtime Environment (18.0+17) (build 18-ea+17-965)
# Java VM: Java HotSpot(TM) 64-Bit Server VM (18-ea+17-965, mixed mode, sharing, tiered, compressed oops, compressed class ptrs, g1 gc, linux-amd64)
# Problematic frame:
# V  [libjvm.so+0x6e5eec]  G1RegionMarkStatsCache::add_live_words(oopDesc*)+0x15c
#
# Core dump will be written. Default location: Core dumps may be processed with ""/opt/core.sh %p"" (or dumping to /opt/mach5/mesos/work_dir/slaves/ff806ead-2cac-495d-9cbc-62116f99bf14-S13996/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/23ea0fe5-ccc5-4438-bfdd-11ff21b35df5/runs/f8cd76ab-f465-4380-b5fa-5a79c42b8131/testoutput/test-support/jtreg_closed_test_hotspot_jtreg_applications_kitchensink_Kitchensink24HStress_java/scratch/0/core.21948)
#
# JFR recording file will be written. Location: /opt/mach5/mesos/work_dir/slaves/ff806ead-2cac-495d-9cbc-62116f99bf14-S13996/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/23ea0fe5-ccc5-4438-bfdd-11ff21b35df5/runs/f8cd76ab-f465-4380-b5fa-5a79c42b8131/testoutput/test-support/jtreg_closed_test_hotspot_jtreg_applications_kitchensink_Kitchensink24HStress_java/scratch/0/hs_err_pid21948.jfr
#
Unsupported internal testing APIs have been used.

# An error report file with more information is saved as:
# /opt/mach5/mesos/work_dir/slaves/ff806ead-2cac-495d-9cbc-62116f99bf14-S13996/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/23ea0fe5-ccc5-4438-bfdd-11ff21b35df5/runs/f8cd76ab-f465-4380-b5fa-5a79c42b8131/testoutput/test-support/jtreg_closed_test_hotspot_jtreg_applications_kitchensink_Kitchensink24HStress_java/scratch/0/hs_err_pid21948.log
#
# If you would like to submit a bug report, please visit:
#   https://bugreport.java.com/bugreport/crash.jsp
#
----------System.err:(944/81629)----------


Here's the crashing thread's stack:

---------------  T H R E A D  ---------------

Current thread (0x00007ff19c016ea0):  GCTaskThread ""GC Thread#3"" [stack: 0x00007ff10f4f4000,0x00007ff10f5f4000] [id=22024]

Stack: [0x00007ff10f4f4000,0x00007ff10f5f4000],  sp=0x00007ff10f5f2bd0,  free space=1018k
Native frames: (J=compiled Java code, j=interpreted, Vv=VM code, C=native code)
V  [libjvm.so+0x6e5eec]  G1RegionMarkStatsCache::add_live_words(oopDesc*)+0x15c
V  [libjvm.so+0x6b24c8]  void OopOopIterateDispatch<G1MarkAndPushClosure>::Table::oop_oop_iterate<InstanceRefKlass, narrowOop>(G1MarkAndPushClosure*, oopDesc*, Klass*)+0xf18
V  [libjvm.so+0x6b9f6a]  G1FullGCMarker::complete_marking(GenericTaskQueueSet<OverflowTaskQueue<oopDesc*, (MEMFLAGS)5, 131072u>, (MEMFLAGS)5>*, GenericTaskQueueSet<OverflowTaskQueue<ObjArrayTask, (MEMFLAGS)5, 131072u>, (MEMFLAGS)5>*, TaskTerminator*)+0xaa
V  [libjvm.so+0x6b983e]  G1FullGCMarkTask::work(unsigned int)+0xde
V  [libjvm.so+0xdf2fbf]  GangWorker::loop()+0x5f
V  [libjvm.so+0xdf301f]
V  [libjvm.so+0xd456f0]  Thread::call_run()+0xc0
V  [libjvm.so+0xbab221]  thread_native_entry(Thread*)+0xe1


siginfo: si_signo: 11 (SIGSEGV), si_code: 1 (SEGV_MAPERR), si_addr: 0x0000000000000100",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8274343,JDK-8274787,JDK-8274452,JDK-8274452,,,,,JDK-8271880,JDK-8274344,JDK-8274343,JDK-8274516,,,,,,,x86_64,,,,,,,,,linux,,,,,"0|i2ugxv:",9223372036854775807,b17,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6b00f96c,,,,,,,Verified,,"2021-09-27 07:57;tschatzl;The crash itself looks a bit like ones fixed with JDK-8271880, and the build contains that fix. A closed test case used for verifying JDK-8271880 however does not reproduce any issue after a few 1000 runs.

There does not seem to be anything interesting in the hs_err except that we are failing iterating an InstanceRefKlass (hence the connection to JDK-8271880). Further connection is that this crash is a full gc after evacuation failure.

There are other crashes in Kitchensink with that build, JDK-8274343 and JDK-8274344 which may be related (but no idea either way). 

Need to try to reproduce with kitchensink.;;;","2021-09-28 00:54;tschatzl;Reproduces with Kitchensink. Testing revert of JDK-8271880 which is likely the issue.;;;","2021-09-28 02:06;tschatzl;[171.616s][1632757560415ms][error][gc,verify      ] GC(129) Missing rem set entry:
[171.616s][1632757560415ms][error][gc,verify      ] GC(129) Field 0x00000007fb1008f0 of obj 0x00000007fb1008d8 in region 1485:(O)[0x00000007fb000000,0x00000007fc00000
[171.616s][1632757560415ms][error][gc,verify      ] GC(129) NULL card setjava.lang.invoke.MethodType$ConcurrentWeakInternSet$WeakEntry
[171.616s][1632757560415ms][error][gc,verify      ] GC(129) {0x00000007fb1008d8} - klass: 'java/lang/invoke/MethodType$ConcurrentWeakInternSet$WeakEntry'
[171.616s][1632757560415ms][error][gc,verify      ] GC(129)  - ---- fields (total size 4 words):
[171.616s][1632757560415ms][error][gc,verify      ] GC(129)  - private 'referent' 'Ljava/lang/Object;' @12  NULL (0)
[171.616s][1632757560416ms][error][gc,verify      ] GC(129)  - volatile 'queue' 'Ljava/lang/ref/ReferenceQueue;' @16  a 'java/lang/ref/ReferenceQueue'{0x0000000541336
[171.616s][1632757560416ms][error][gc,verify      ] GC(129)  - volatile 'next' 'Ljava/lang/ref/Reference;' @20  NULL (0)
[171.616s][1632757560416ms][error][gc,verify      ] GC(129)  - private transient 'discovered' 'Ljava/lang/ref/Reference;' @24  a 'java/lang/invoke/MethodType$Concurre
[171.616s][1632757560416ms][error][gc,verify      ] GC(129)  - public final 'hashcode' 'I' @28  1920153987 (72733983)
[171.616s][1632757560416ms][error][gc,verify      ] GC(129) points to obj 0x00000004d9abd4c8 in region 683:(S)[0x00000004d9000000,0x00000004da000000,0x00000004da00000
[171.616s][1632757560416ms][error][gc,verify      ] GC(129) java.lang.invoke.MethodType$ConcurrentWeakInternSet$WeakEntry
[171.616s][1632757560416ms][error][gc,verify      ] GC(129) {0x00000004d9abd4c8} - klass: 'java/lang/invoke/MethodType$ConcurrentWeakInternSet$WeakEntry'

Kitchensink runs crash within a few minutes with -XX:+UnlockDiagnosticVMOptions -XX:+VerifyAfterGC -XX:VerifyGCType=young-evac-fail;;;","2021-09-29 07:01;roboduke;Changeset: 1dc8fa99
Author:    Thomas Schatzl <tschatzl@openjdk.org>
Date:      2021-09-29 13:59:58 +0000
URL:       https://git.openjdk.java.net/jdk/commit/1dc8fa9902cf2cfa3556ccffb15244115f594966
;;;",,,,,,,,,,,,,,,,,,,,,,
"com/sun/jdi/RedefineCrossEvent.java failed ""assert(m != __null) failed: NULL mirror""",JDK-8274338,5059284,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,coleenp,dcubed,dcubed,2021-09-26 18:32,2022-01-13 05:28,2023-10-01 09:57,2021-10-15 05:11,18,,,,,,,18,hotspot,,0,classloading,jdk11u-fix-request,jdk11u-fix-yes,jdk17u-fix-request,jdk17u-fix-yes,tier6,zgc,,,,,,,,,,,,,,,"The following test failed in the JDK18 CI:

com/sun/jdi/RedefineCrossEvent.java

Here's a snippet from the log file:

----------System.out:(30/2488)----------
vmOpts: '-Xmx768m -XX:MaxRAMPercentage=4.16667 -Djava.io.tmpdir=/opt/mach5/mesos/work_dir/slaves/ff806ead-2cac-495d-9cbc-62116f99bf14-S13934/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/e0a31b42-087a-47ac-bcb3-5dfbecc2c39b/runs/a4f5fde5-fe07-4985-8e04-96641cfc5aed/testoutput/test-support/jtreg_open_test_jdk_jdk_jdi/tmp -ea -esa'
javaOpts: '-XX:+CreateCoredumpOnCrash -XX:+UseZGC'
JVM version:18-ea
JDI version: 18.0
JVM description: Java Debug Interface (Reference Implementation) version 18.0 
Java Debug Wire Protocol (Reference Implementation) version 18.0
JVM Debug Interface version 18.0
JVM version 18-ea (Java HotSpot(TM) 64-Bit Server VM, mixed mode, sharing)
Howdy!
# To suppress the following error report, specify this argument
# after -XX: or in .hotspotrc:  SuppressErrorAt=/classLoaderData.cpp:362
#
# A fatal error has been detected by the Java Runtime Environment:
#
#  Internal Error (/opt/mach5/mesos/work_dir/slaves/a2dc162d-743b-4800-9e92-31f85abb45b1-S1317/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/6cc982f3-0197-4d8f-b494-7dc978f0fec0/runs/e0a416ab-5d4f-4994-aa46-3742148ba1d7/workspace/open/src/hotspot/share/classfile/classLoaderData.cpp:362), pid=3968, tid=4018
#  assert(m != __null) failed: NULL mirror
#
# JRE version: Java(TM) SE Runtime Environment (18.0+17) (fastdebug build 18-ea+17-971)
# Java VM: Java HotSpot(TM) 64-Bit Server VM (fastdebug 18-ea+17-971, mixed mode, sharing, tiered, compressed class ptrs, z gc, linux-amd64)
# Problematic frame:
# V  [libjvm.so+0x97c055]  ClassLoaderData::loaded_classes_do(KlassClosure*)+0x245
#
# Core dump will be written. Default location: Core dumps may be processed with ""/opt/core.sh %p"" (or dumping to /opt/mach5/mesos/work_dir/slaves/ff806ead-2cac-495d-9cbc-62116f99bf14-S13934/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/e0a31b42-087a-47ac-bcb3-5dfbecc2c39b/runs/a4f5fde5-fe07-4985-8e04-96641cfc5aed/testoutput/test-support/jtreg_open_test_jdk_jdk_jdi/scratch/0/core.3968)
#
# An error report file with more information is saved as:
# /opt/mach5/mesos/work_dir/slaves/ff806ead-2cac-495d-9cbc-62116f99bf14-S13934/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/e0a31b42-087a-47ac-bcb3-5dfbecc2c39b/runs/a4f5fde5-fe07-4985-8e04-96641cfc5aed/testoutput/test-support/jtreg_open_test_jdk_jdk_jdi/scratch/0/hs_err_pid3968.log
#
# If you would like to submit a bug report, please visit:
#   https://bugreport.java.com/bugreport/crash.jsp
#
----------System.err:(24/1767)----------
[0ms] run args: [-redefstart, -redefevent, ClassesByName2Targ]
[316ms] Redefining class ClassesByName2Targ (loaded by instance of jdk.internal.loader.ClassLoaders$AppClassLoader(id=47))
[319ms] Redefining class ClassesByName2Targ (loaded by instance of jdk.internal.loader.ClassLoaders$AppClassLoader(id=47))
com.sun.jdi.VMDisconnectedException
	at jdk.jdi/com.sun.tools.jdi.TargetVM.waitForReply(TargetVM.java:310)
	at jdk.jdi/com.sun.tools.jdi.VirtualMachineImpl.waitForTargetReply(VirtualMachineImpl.java:1173)
	at jdk.jdi/com.sun.tools.jdi.PacketStream.waitForReply(PacketStream.java:89)
	at jdk.jdi/com.sun.tools.jdi.JDWP$VirtualMachine$AllClassesWithGeneric.waitForReply(JDWP.java:1610)
	at jdk.jdi/com.sun.tools.jdi.JDWP$VirtualMachine$AllClassesWithGeneric.process(JDWP.java:1596)
	at jdk.jdi/com.sun.tools.jdi.VirtualMachineImpl.retrieveAllClasses(VirtualMachineImpl.java:1143)
	at jdk.jdi/com.sun.tools.jdi.VirtualMachineImpl.allClasses(VirtualMachineImpl.java:338)
	at ClassesByName2Test.runTests(ClassesByName2Test.java:163)
	at TestScaffold.startTests(TestScaffold.java:431)
	at ClassesByName2Test.main(ClassesByName2Test.java:123)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at com.sun.javatest.regtest.agent.MainActionHelper$AgentVMRunnable.run(MainActionHelper.java:312)
	at java.base/java.lang.Thread.run(Thread.java:833)

JavaTest Message: Test threw exception: com.sun.jdi.VMDisconnectedException
JavaTest Message: shutting down test

result: Failed. Execution failed: `main' threw exception: com.sun.jdi.VMDisconnectedException


Here's the crashing thread's stack:

---------------  T H R E A D  ---------------

Current thread (0x00007f2bbc2b1e70):  JavaThread ""JDWP Transport Listener: dt_socket"" daemon [_thread_in_vm, id=4018, stack(0x00007f2ba43f8000,0x00007f2ba44f9000)]

Stack: [0x00007f2ba43f8000,0x00007f2ba44f9000],  sp=0x00007f2ba44f7860,  free space=1022k
Native frames: (J=compiled Java code, j=interpreted, Vv=VM code, C=native code)
V  [libjvm.so+0x97c055]  ClassLoaderData::loaded_classes_do(KlassClosure*)+0x245
V  [libjvm.so+0x986c2d]  ClassLoaderDataGraph::loaded_classes_do(KlassClosure*)+0x1bd
V  [libjvm.so+0x11e0258]  JvmtiGetLoadedClasses::getLoadedClasses(JvmtiEnv*, int*, _jclass***)+0xd8
V  [libjvm.so+0x114077a]  jvmti_GetLoadedClasses+0x10a
C  [libjdwp.so+0xce19]  allClasses1.part.0+0x39
C  [libjdwp.so+0xde73]  allClassesWithGeneric+0x23
C  [libjdwp.so+0x134a9]  debugLoop_run+0x299
C  [libjdwp.so+0x26ef4]  attachThread+0x54
V  [libjvm.so+0x11e1c5b]  JvmtiAgentThread::call_start_function()+0x17b
V  [libjvm.so+0x18910ec]  JavaThread::thread_main_inner()+0x27c
V  [libjvm.so+0x1897690]  Thread::call_run()+0x100
V  [libjvm.so+0x15753d4]  thread_native_entry(Thread*)+0x104

Since this assertion failure happened in
ClassLoaderData::loaded_classes_do(), I'm starting this
bug off in hotspot/runtime for initial triage.",,,,,,,,,,,JDK-8276381,JDK-8279959,JDK-8276342,JDK-8276729,JDK-8276785,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8275318,JDK-8274753,JDK-8276943,,,,,,,,x86_64,,,,,,,,,linux,,,,,"0|i2ugxf:",9223372036854775807,b20,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,,,"2021-09-28 11:09;mseledtsov;ILW = HLM = P3;;;","2021-10-05 11:52;coleenp;class ClassLoaderDataGraphIterator : public StackObj {
...
    // Skip already unloaded CLD for concurrent unloading.
    while (cld != NULL && !cld->is_alive()) {
      cld = cld->next();
    }
    if (cld != NULL) {
      // Keep cld that is being returned alive.
      _holder = Handle(_thread, cld->holder_phantom());
      _next = cld->next();

This should keep the cld alive while iterating, so why is it unloaded here?;;;","2021-10-06 00:34;stefank;According to the hs_err file this crashes very early, before any GC has run:
GC Heap History (0 events):
No events

also:
Classes unloaded (0 events):
No events

I don't think this is related to class unloading.
;;;","2021-10-13 10:01;coleenp;One thread is doing JVMTI GetLoadedClasses, so walks the ClassLoaderDataGraph with loaded_classes_do:

This is the assert it gets in ClassLoaderData::loaded_classes_do, where this is the NULL CLD.
359	    if (k->is_array_klass() || (k->is_instance_klass() && InstanceKlass::cast(k)->is_loaded())) {
360	#ifdef ASSERT
361	      oop m = k->java_mirror();
362	      assert(m != NULL, ""NULL mirror"");

The class is an ObjArrayKlass, and in gdb the mirror looks perfectly good:

(gdb)     print k->_java_mirror->_obj._o
$350 = (oopDesc *) 0x100000805940
The other mirrors in the previous classes that it walked look similar:
(gdb) set $k = _klasses
(gdb) while ($k != k)
 >    print $k->_java_mirror->_obj._o
 >    set $k = $k->_next_link
 >end
$293 = (oopDesc *) 0x100000a0f900
$294 = (oopDesc *) 0x100000c04118
$295 = (oopDesc *) 0x100000c03fe0
...
$348 = (oopDesc *) 0x100000a016b0
$349 = (oopDesc *) 0x100000c00b50

The only thing that looks suspicious is that in InstanceKlass, we link the klass into the ClassLoaderData::_klasses after we create the mirror, and for ObjArrayKlass, we link them before we create the mirror.  In the former case, we test is_loaded() but in the ObjArrayKlass we cannot.  So maybe there's a race here.  The other thread in this core file is loading classes from the shared archive, which has the same timing, but not this class.;;;","2021-10-13 13:25;coleenp;105	    // To get a consistent list of classes we need MultiArray_lock to ensure
106	    // array classes aren't created.
107	    MutexLocker ma(MultiArray_lock);
108	

InstanceKlass::restore_unshareable_info doesn't lock MultiArray_lock before restoring array classes.  The lock is held when creating array classes.  The class that fails is shared:

(gdb) print /x k->_access_flags._flags
$3 = 0x82000000
(gdb) print (char*)k->_name->_body
$4 = 0x8004a21ee ""[Ljava/lang/invoke/LambdaForm$NamedFunction;""

Since this is a crash that happened essentially once, this could be the reason for this rare race.;;;","2021-10-15 05:11;roboduke;Changeset: 172aed1a
Author:    Coleen Phillimore <coleenp@openjdk.org>
Date:      2021-10-15 12:10:27 +0000
URL:       https://git.openjdk.java.net/jdk/commit/172aed1a2d75756b140cb723133ac5fb67f7745e
;;;","2021-11-03 10:20;zgu;Fix Request (17u)

A clean backport for parity with Oracle 17.0.3. The patch fixed a subtle race that can result fatal error.



;;;","2021-11-05 08:28;zgu;Fix Request (11u)

I would like to backport this patch to openjdk 11u for parity with Oracle 11.0.15. The patch fixed a subtle race that can result fatal error.

The original patch applies cleanly, but needs to take additional MultiArray_lock on CDS path to get it work correctly. The 11u patch has been reviewed by @phh;;;","2022-01-07 07:09;roboduke;A pull request was submitted for review.

URL: https://git.openjdk.java.net/jdk11u-dev/pull/632
Date: 2021-11-16 15:17:24 +0000
;;;","2022-01-10 05:43;zgu;Fix Request (11u Redo)

I would like to backport this patch to openjdk 11u for parity with Oracle 11.0.15. The patch fixed a subtle race that can result fatal error.

Early JDK11u backport failed and had been backed out by JDK-8276943 . This redo-patch has been reviewed by @phh. ;;;","2022-01-13 03:08;goetz;Zhengyu, thanks for addressing this again!;;;",,,,,,,,,,,,,,,
Redundant null comparison after Pattern.split,JDK-8274333,5059277,Bug,Resolved,JDK,JDK,software,duke,,,P5,Fixed,aturbanov,aturbanov,aturbanov,2021-09-26 13:50,2021-11-25 00:27,2023-10-01 09:57,2021-11-19 10:50,16,17,,,,,,18,core-libs,,0,,,,,,,,,,,,,,,,,,,,,,"In couple of classes, result part of arrays of Pattern.split is compared with `null`.
Pattern.split (and hence String.split) never returns `null` in array elements. Such comparisons are redundant.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2ugvv:",9223372036854775807,b25,,,,,,,,,,,,"2021-11-19 10:50;roboduke;Changeset: 36b59f38
Author:    Andrey Turbanov <turbanoff@gmail.com>
Committer: Roger Riggs <rriggs@openjdk.org>
Date:      2021-11-19 18:49:04 +0000
URL:       https://git.openjdk.java.net/jdk/commit/36b59f3814fdaa44c9c04a0e8d63d0ba56929326
;;;",,,,,,,,,,,,,,,,,,,,,,,,,
[Vector API] Build failure on MacOS after JDK-8273949,JDK-8274331,5059273,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,jiefu,jiefu,jiefu,2021-09-26 08:32,2021-09-27 03:00,2023-10-01 09:57,2021-09-27 03:00,repo-panama,,,,,,,repo-panama,hotspot,,0,noreg-build,tencent-interest,vectorIntrinsics+mask,,,,,,,,,,,,,,,,,,,"Creating support/demos/image/jfc/J2Ddemo/J2Ddemo.jar
Creating jdk image
/Users/fool/df/panama-vector/build/macosx-x86_64-server-fastdebug/support/test/micro/classes/org/openjdk/bench/jdk/incubator/vector/jmh_generated/MaskQueryOperationsBenchmark_testToLongLong_jmhTest.java:36: error: class MaskQueryOperationsBenchmark_testToLonglong_jmhTest is public, should be declared in a file named MaskQueryOperationsBenchmark_testToLonglong_jmhTest.java
public final class MaskQueryOperationsBenchmark_testToLonglong_jmhTest {
             ^
/Users/fool/df/panama-vector/build/macosx-x86_64-server-fastdebug/support/test/micro/classes/org/openjdk/bench/jdk/incubator/vector/jmh_generated/MaskQueryOperationsBenchmark_testToLonglong_jmhTest.java:36: error: duplicate class: org.openjdk.bench.jdk.incubator.vector.jmh_generated.MaskQueryOperationsBenchmark_testToLonglong_jmhTest
public final class MaskQueryOperationsBenchmark_testToLonglong_jmhTest {
             ^
2 errors
make[3]: *** [/Users/fool/df/panama-vector/build/macosx-x86_64-server-fastdebug/support/test/micro/classes/_the.BUILD_JDK_MICROBENCHMARK_batch] Error 1
make[2]: *** [build-microbenchmark] Error 2
make[2]: *** Waiting for unfinished jobs....
Creating CDS archive for jdk image
Creating CDS-NOCOOPS archive for jdk image

ERROR: Build failed for target 'test' in configuration 'macosx-x86_64-server-fastdebug' (exit code 2)
Stopping sjavac server",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8273949,,,,,,,,,,x86,,,,,,,,,os_x,,,,,"0|i2uguz:",9223372036854775807,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2021-09-26 08:44;jiefu;PR: https://github.com/openjdk/panama-vector/pull/133;;;",,,,,,,,,,,,,,,,,,,,,,,,,
Incorrect encoding of the DistributionPointName object in IssuingDistributionPointExtension,JDK-8274330,5059270,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,weijun,weijun,weijun,2021-09-26 06:19,2021-10-06 18:02,2023-10-01 09:57,2021-09-29 08:39,,,,,,,,18,security-libs,,0,,,,,,,,,,,,,,,,,,,,,,"There is an encoding bug related to the DistributionPointName object in sun/security/x509/IssuingDistributionPointExtension.java:
*
* The fix would be:
*
* ***************
* *** 395,397 ****
*     distributionPoint.encode(tmp);
* !   tagged.writeImplicit(DerValue.createTag(DerValue.TAG_CONTEXT, true,
*         TAG_DISTRIBUTION_POINT), tmp);
* --- 395,397 ----
*     distributionPoint.encode(tmp);
* !   tagged.write(DerValue.createTag(DerValue.TAG_CONTEXT, true,
*         TAG_DISTRIBUTION_POINT), tmp);
*

The reason is that a CHOICE field should not be encode as IMPLICIT, otherwise, the choice number is lost.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2ugub:",9223372036854775807,b18,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@2ec284e3,,,,,,,,,"2021-09-26 06:21;weijun;Bug is reported at http://mail.openjdk.java.net/pipermail/security-dev/2021-September/027468.html;;;","2021-09-29 08:39;roboduke;Changeset: edd9d1c9
Author:    Weijun Wang <weijun@openjdk.org>
Date:      2021-09-29 15:37:16 +0000
URL:       https://git.openjdk.java.net/jdk/commit/edd9d1c97b7fb50e76abc05d298c9d55db39cc1b
;;;",,,,,,,,,,,,,,,,,,,,,,,,
Fix non-portable HotSpot code in MethodMatcher::parse_method_pattern,JDK-8274329,5059269,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,jiefu,jiefu,jiefu,2021-09-26 02:42,2021-10-13 17:38,2023-10-01 09:57,2021-10-06 16:23,11,17,18,,,,,18,hotspot,,0,hs-comp-triaged,jdk11u-fix-request,jdk11u-fix-yes,jdk17u-fix-request,jdk17u-fix-yes,noreg-build,oracle-triage-11,oracle-triage-18,tencent-interest,,,,,,,,,,,,,"Compiling 100 properties into resource bundles for java.desktop
Compiling 3038 files for java.base
e:\jiefu\ws\jdk\src\hotspot\share\compiler\methodMatcher.cpp(269): error C2220: the following warning is treated as an error
e:\jiefu\ws\jdk\src\hotspot\share\compiler\methodMatcher.cpp(269): warning C4778: 'sscanf' : unterminated format string '%255[*\x01\x02\x03\x04\x05\x06\a\b\n\v\f\r\x0e\x0f\x10\x11\x12\x13\x14\x15\x16\x17\x18\x19\x1a\x1b\x1c\x1d\x1e\x1f!\""#$%&'*+,-0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ\\^_`abcdefghijklmnopqrstuvwxyz{|}~\xe2\x82\xac\xe4\xba\x97\xe5\x84\x8e\xe5\x8e\x97%n'
e:\jiefu\ws\jdk\src\hotspot\share\compiler\methodMatcher.cpp(269): warning C4474: 'sscanf' : too many arguments passed for format string
e:\jiefu\ws\jdk\src\hotspot\share\compiler\methodMatcher.cpp(269): note: placeholders and their parameters expect 1 variadic arguments, but 3 were provided
e:\jiefu\ws\jdk\src\hotspot\share\compiler\methodMatcher.cpp(319): warning C4778: 'sscanf' : unterminated format string '%1022[[);/\x01\x02\x03\x04\x05\x06\a\b\n\v\f\r\x0e\x0f\x10\x11\x12\x13\x14\x15\x16\x17\x18\x19\x1a\x1b\x1c\x1d\x1e\x1f!\""#$%&'*+,-0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ\\^_`abcdefghijklmnopqrstuvwxyz{|}~\xe2\x82\xac\xe4\xba\x97\xe5\x84\x8e\xe5\x8e%n'
e:\jiefu\ws\jdk\src\hotspot\share\compiler\methodMatcher.cpp(319): warning C4474: 'sscanf' : too many arguments passed for format string
e:\jiefu\ws\jdk\src\hotspot\share\compiler\methodMatcher.cpp(319): note: placeholders and their parameters expect 0 variadic arguments, but 2 were provided",,,,,,,,,,,JDK-8275098,JDK-8274997,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,x86,,,,,,,,,windows,,,,,"0|i2ugu3:",9223372036854775807,b19,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2021-09-26 02:56;jiefu;PR: https://github.com/openjdk/jdk/pull/5704;;;","2021-09-26 23:47;chagedorn;ILW = Build failure with Cygwin on Windows due to non-ASCII characters, only on Cygwin on Windows 2016 + VS2019, disable warnings = HLM = P3;;;","2021-10-06 16:23;roboduke;Changeset: c833b4d1
Author:    Jie Fu <jiefu@openjdk.org>
Date:      2021-10-06 23:22:04 +0000
URL:       https://git.openjdk.java.net/jdk/commit/c833b4d130fabfa6a6f3a38313f76eb7e392c6a5
;;;","2021-10-10 23:57;jiefu;Fix request for jdk11u:
I'd like to backport this patch to fix the jdk11u build failure on Windows for non-English speaking countries.
Thanks.;;;","2021-10-11 03:51;clanger;[~jiefu], would you mind opening a PR to jdk11u-dev?;;;","2021-10-11 03:53;jiefu;Yes, I will open a PR for jdk11u-dev.
Thanks.;;;",,,,,,,,,,,,,,,,,,,,
[macos] Ensure initialisation of sun/lwawt/macosx/CAccessibility in JavaComponentAccessibility.m,JDK-8274326,5059264,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,prr,prr,prr,2021-09-25 20:26,2021-10-19 03:50,2023-10-01 09:57,2021-09-27 09:46,11,17,18,,,,,18,client-libs,,0,a11y,jdk11u-fix-request,jdk11u-fix-yes,jdk17u-fix-request,jdk17u-fix-yes,jnf,macos,sn_103,,,,,,,,,,,,,,"In src/java.desktop/macosx/native/libawt_lwawt/awt/JavaComponentAccessibility.m
accessibilityHitTest()
uses a reference to the class sun/lwawt/macosx/CAccessibility 
Usually this will be initialised before this code is invoked on the custom control by the macOS accessibility APIs but it is possible that it is not.
So we should ensure it is initialised",,,,,,,,,,,JDK-8274604,JDK-8274612,JDK-8274830,JDK-8275503,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,os_x,,,,,"0|i2ugsz:",9223372036854775807,b17,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4785f47c,,,,,,,,,"2021-09-25 20:28;prr;Fix

--- a/src/java.desktop/macosx/native/libawt_lwawt/awt/JavaComponentAccessibility.m
+++ b/src/java.desktop/macosx/native/libawt_lwawt/awt/JavaComponentAccessibility.m
@@ -1404,6 +1404,7 @@ - (BOOL)accessibilityIsIgnored
 
 - (id)accessibilityHitTest:(NSPoint)point withEnv:(JNIEnv *)env
 {
+    GET_CACCESSIBILITY_CLASS_RETURN(nil);
     DECLARE_CLASS_RETURN(jc_Container, ""java/awt/Container"", nil);
     DECLARE_STATIC_METHOD_RETURN(jm_accessibilityHitTest, sjc_CAccessibility, ""accessibilityHitTest"",
                                  ""(Ljava/awt/Container;FF)Ljavax/accessibility/Accessible;"", nil);;;;","2021-09-27 09:46;roboduke;Changeset: 2cffe4c8
Author:    Phil Race <prr@openjdk.org>
Date:      2021-09-27 16:41:00 +0000
URL:       https://git.openjdk.java.net/jdk/commit/2cffe4c8e0b8e6d5843b7e9545e4b4408c56465c
;;;","2021-09-29 16:45;prr;Fix Request:
This fixes a regression in JDK 17.
It should only affect A11Y but it was also seen by a user not using A11Y at all, so definitely needs to be backported in time for 17.0.2
The one line fix is extremely low risk and just ensures a JNI reference is initialised
18 fix cleanly applies to 17u : https://github.com/openjdk/jdk17u/pull/119
;;;","2021-10-05 05:48;mdoerr;Fix Request (11u):
Should get backported for parity with 11.0.14-oracle. Applies cleanly.
;;;",,,,,,,,,,,,,,,,,,,,,,
C4819 warning at vm_version_x86.cpp on Windows after JDK-8234160,JDK-8274325,5059263,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,jiefu,jiefu,jiefu,2021-09-25 19:42,2021-10-09 04:46,2023-10-01 09:57,2021-09-27 02:41,17,18,,,,,,18,hotspot,,0,hs-comp-triaged,jdk17u-fix-request,jdk17u-fix-yes,noreg-build,oracle-triage-11,oracle-triage-17,oracle-triage-18,tencent-interest,,,,,,,,,,,,,,"Compiling 272 files for java.xml.crypto
Compiling 241 files for jdk.javadoc
Compiling 95 files for jdk.jshell
Compiling 56 files for java.sql.rowset
e:\jiefu\ws\jdk\src\hotspot\cpu\x86\vm_version_x86.cpp(1658): warning C4819: The file contains a character that cannot be represented in the current code page (936). Save the file in Unicode format to prevent data loss
Compiling 2610 files for java.desktop
Creating support/modules_libs/java.base/verify.dll from 1 file(s)
Creating support/modules_libs/java.base/java.dll from 61 file(s)",,,,,,,,,,,JDK-8274996,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8234160,,,,,,,,,,x86,,,,,,,,,windows,,,,,"0|i2ugsr:",9223372036854775807,b17,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2021-09-25 19:55;jiefu;PR: https://github.com/openjdk/jdk/pull/5701;;;","2021-09-26 23:40;chagedorn;ILW = Warning due to non-ASCII chars in comments, when building, disable warnings = LHM = P4;;;","2021-09-27 02:41;roboduke;Changeset: 7426fd4c
Author:    Jie Fu <jiefu@openjdk.org>
Date:      2021-09-27 09:38:16 +0000
URL:       https://git.openjdk.java.net/jdk/commit/7426fd4c9c0428411d2c4a2c675fcad6646ea90a
;;;",,,,,,,,,,,,,,,,,,,,,,,
"compiler/codegen/aes/TestAESMain.java failed with ""Error: invalid offset: -1434443640"" after 8273297",JDK-8274323,5059261,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,svkamath,dcubed,dcubed,2021-09-25 18:38,2022-01-10 09:33,2023-10-01 09:57,2021-12-20 12:11,18,,,,,,,18,hotspot,,0,hs-comp-triaged,oracle-triage-11,oracle-triage-17,oracle-triage-18,regression,tier7,,,,,,,,,,,,,,,,"The following test failed in the JDK18 CI:

compiler/codegen/aes/TestAESMain.java

Here's a snippet from the log file:

----------System.err:(24/1636)----------
java.lang.Error: invalid offset: -1434443640
	at compiler.codegen.aes.TestAESDecode.run(TestAESDecode.java:51)
	at compiler.codegen.aes.TestAESMain.main(TestAESMain.java:192)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at com.sun.javatest.regtest.agent.MainWrapper$MainThread.run(MainWrapper.java:127)
	at java.base/java.lang.Thread.run(Thread.java:833)
Caused by: java.lang.RuntimeException: invalid offset: -1434443640
	at java.base/com.sun.crypto.provider.GHASH.ghashRangeCheck(GHASH.java:252)
	at java.base/com.sun.crypto.provider.GHASH.update(GHASH.java:179)
	at java.base/com.sun.crypto.provider.GaloisCounterMode$DecryptOp.update(GaloisCounterMode.java:1777)
	at java.base/com.sun.crypto.provider.GaloisCounterMode$GCMDecrypt.decryptBlocks(GaloisCounterMode.java:1638)
	at java.base/com.sun.crypto.provider.GaloisCounterMode$GCMDecrypt.doFinal(GaloisCounterMode.java:1484)
	at java.base/com.sun.crypto.provider.GaloisCounterMode.engineDoFinal(GaloisCounterMode.java:439)
	at java.base/javax.crypto.Cipher.doFinal(Cipher.java:2418)
	at compiler.codegen.aes.TestAESDecode.run(TestAESDecode.java:43)
	... 7 more

JavaTest Message: Test threw exception: java.lang.Error: invalid offset: -1434443640
JavaTest Message: shutting down test

STATUS:Failed.`main' threw exception: java.lang.Error: invalid offset: -1434443640
----------rerun:(54/8744)*----------",,,,,,,,,,,JDK-8279107,JDK-8279743,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8273297,,,,,,,,,,x86_64,,,,,,,,,linux,windows,,,,"0|i2ugsb:",9223372036854775807,b29,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2021-09-26 23:50;chagedorn;Initial ILW = Runtime exception in test, single test but reliably triggered, no workaround = MMH = P3;;;","2021-10-01 18:35;dlong;Failures seem to have started right after 8273297 got pushed.;;;","2021-10-04 11:52;svkamath;I'm not able to reproduce the error. Could you please upload the hs_err file?;;;","2021-10-04 12:05;kvn;Flags (with run command from test): 
-Xcomp -ea -esa -XX:CompileThreshold=100 -XX:+UnlockExperimentalVMOptions -XX:-TieredCompilation -XX:+DeoptimizeALot -Xbatch -DcheckOutput=true -Dmode=GCM -DencInputOffset=1 -DmsgSize=8326 -XX:+UnlockDiagnosticVMOptions -XX:+WhiteBoxAPI -Xbootclasspath/a:. compiler.codegen.aes.TestAESMain

It also failed with -XX:+TieredCompilation
;;;","2021-10-04 12:14;kvn;There is no hs_err file because test failed with Java error.
;;;","2021-10-06 10:44;kvn;[~svkamath] Was you able to reproduce the issue with these flags?
;;;","2021-10-06 10:51;svkamath;@Vladmir Kozlov Thank you for providing the details. Yes, I was able to reproduce it with the flags. I'm in the process of debugging the issue.;;;","2021-12-19 22:54;kvn;testing V02:
t1: https://mach5.us.oracle.com/mdash/jobs/vkozlov-8274323_v02_t1-20211220-0637-27463586
t2: https://mach5.us.oracle.com/mdash/jobs/vkozlov-8274323_v02_t2-20211220-0718-27463856
t3: https://mach5.us.oracle.com/mdash/jobs/vkozlov-8274323_v02_t3-20211220-0718-27463858;;;","2021-12-20 12:11;roboduke;Changeset: 819f9bd0
Author:    Smita Kamath <svkamath@openjdk.org>
Committer: Sandhya Viswanathan <sviswanathan@openjdk.org>
Date:      2021-12-20 20:09:42 +0000
URL:       https://git.openjdk.java.net/jdk18/commit/819f9bd084fa49222a4310fbcf4933005e9f0ca4
;;;",,,,,,,,,,,,,,,,,
Standardize values of @since tags in javax.lang.model,JDK-8274321,5059256,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,prappo,prappo,prappo,2021-09-25 09:43,2021-09-29 17:15,2023-10-01 09:57,2021-09-25 14:05,,,,,,,,18,core-libs,,0,noreg-doc,,,,,,,,,,,,,,,,,,,,,Some @since tags use 8 instead of 1.8.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2ugr7:",9223372036854775807,b17,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@3c6c40,,,,,,,,,"2021-09-25 14:05;roboduke;Changeset: 5ec1cdca
Author:    Pavel Rappo <prappo@openjdk.org>
Date:      2021-09-25 21:04:17 +0000
URL:       https://git.openjdk.java.net/jdk/commit/5ec1cdcaf39229a7d2457313600b0dc2bf8c6453
;;;",,,,,,,,,,,,,,,,,,,,,,,,,
Unnecessary reentrant synchronized block in java.awt.Cursor,JDK-8274317,5059250,Bug,Resolved,JDK,JDK,software,duke,,,P5,Fixed,aturbanov,aturbanov,aturbanov,2021-09-25 03:36,2021-09-29 17:15,2023-10-01 09:57,2021-09-27 05:10,16,17,,,,,,18,client-libs,,0,,,,,,,,,,,,,,,,,,,,,,"There is lock on a field java.awt.Cursor.systemCustomCursors which is taken twice:
1. In a method java.awt.Cursor#getSystemCustomCursor:
```
            synchronized(systemCustomCursors) {
                if (systemCustomCursorProperties == null)
                    loadSystemCustomCursorProperties();
            }
```
2. And then again in method 'loadSystemCustomCursorProperties' itself
```
private static void loadSystemCustomCursorProperties() throws AWTException {
        synchronized(systemCustomCursors) {
            systemCustomCursorProperties = new Properties();
```

Such reentrancy is redundant and confusing.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2ugpv:",9223372036854775807,b17,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@5a9b3fd3,,,,,,,,,"2021-09-27 05:10;roboduke;Changeset: 7436a77e
Author:    Andrey Turbanov <turbanoff@gmail.com>
Committer: Pankaj Bansal <pbansal@openjdk.org>
Date:      2021-09-27 12:07:29 +0000
URL:       https://git.openjdk.java.net/jdk/commit/7436a77e3d1232303264081cefb7166456601cac
;;;",,,,,,,,,,,,,,,,,,,,,,,,,
JFR: One closed state per file or stream,JDK-8274315,5059245,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,egahlin,egahlin,egahlin,2021-09-25 00:22,2022-01-10 09:35,2023-10-01 09:57,2021-12-22 06:30,,,,,,,,18,hotspot,,0,,,,,,,,,,,,,,,,,,,,,,"Numerous JFR streaming tests have timed out sporadically, for example TestOnEvent. One possible reason for the timeouts could be the closed state of a stream not being propagated.

When a user calls EventStream::close(), both the ChunkParser and the underlying stream, for example RecordingStream, must be closed. Today this is handled by a volatile boolean field in both the stream class and the ChunkParser class. When a new chunk is being parsed, a new instance of the ChunkParser is instantiated with the closed field set to false.

There is a potential risk that the call EventStream::close() can happen on an old instance of the ChunkParser which could leave the parser thread stuck in ChunkParser::awaitUpdatedHeader(...) waiting for the closed state being true.

The solution is to have one closed state per recording file or stream. This can be implemented using an AtomicBoolean that is instantiated once and passed around. When it is flipped, it will be seen by all the subsystems.

If it turns out that timeouts in tests disappear after this bug has been fixed, those test bugs can be closed as duplicates. If not, something else is going on that needs further investigation. ",,,,,,,,,,,JDK-8279174,JDK-8279755,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2ugor:",9223372036854775807,b30,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@42995637,,,,,,,,,"2021-12-21 18:59;roboduke;A pull request was submitted for review.

URL: https://git.openjdk.java.net/jdk18/pull/62
Date: 2021-12-21 20:16:26 +0000
;;;","2021-12-22 06:30;roboduke;Changeset: dfb15c3e
Author:    Erik Gahlin <egahlin@openjdk.org>
Date:      2021-12-22 14:29:46 +0000
URL:       https://git.openjdk.java.net/jdk18/commit/dfb15c3e343974eb138ca1a8db3364cd2bac70a4
;;;",,,,,,,,,,,,,,,,,,,,,,,,
"Typo in WatchService#poll(long timeout, TimeUnit unit) javadoc",JDK-8274314,5059244,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,jpai,jpai,jpai,2021-09-24 23:26,2021-09-29 17:15,2023-10-01 09:57,2021-09-25 05:42,,,,,,,,18,core-libs,,0,apache-ant-found,noreg-doc,,,,,,,,,,,,,,,,,,,,"The WatchService#poll(long timeout, TimeUnit unit) javadoc has this for the ""timeout"" param:

     * @param   timeout
     *          how to wait before giving up, in units of unit

I think it should be ""how long to wait...""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2ugoj:",9223372036854775807,b17,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@674604a9,,,,,,,,,"2021-09-25 05:42;roboduke;Changeset: 8c122af6
Author:    Jaikiran Pai <jpai@openjdk.org>
Date:      2021-09-25 12:42:03 +0000
URL:       https://git.openjdk.java.net/jdk/commit/8c122af6d8c3028dc0c49d7f3d48471faa3ceaa8
;;;",,,,,,,,,,,,,,,,,,,,,,,,,
JFR Thread Sampler thread must not acquire malloc lock after suspending a thread because of possible deadlock,JDK-8274298,5059225,Bug,Closed,JDK,JDK,software,duke,,,P2,Fixed,mgronlun,mgronlun,mgronlun,2021-09-24 09:30,2023-05-17 08:16,2023-10-01 09:57,2021-12-09 01:31,15,16,17,18,,,,18,hotspot,,0,amazon-interest,datadog-interest,noreg-hard,,,,,,,,,,,,,,,,,,,"Suspendee thread (state ""sigsuspended""):

    frame #0: 0x00007fff20413dde libsystem_kernel.dylib`__sigsuspend + 10
    frame #1: 0x00000001103c5f98 libjvm.dylib`SR_handler(int, __siginfo*, __darwin_ucontext*) + 248
    frame #2: 0x00007fff2046bd7d libsystem_platform.dylib`_sigtramp + 29
    frame #3: 0x00007fff2024f0f9 libsystem_malloc.dylib`small_malloc_from_free_list + 532
    frame #4: 0x00007fff2024e877 libsystem_malloc.dylib`small_malloc_should_clear + 259
    frame #5: 0x00007fff2024e692 libsystem_malloc.dylib`szone_malloc_should_clear + 109
    frame #6: 0x00007fff20267f3b libsystem_malloc.dylib`_malloc_zone_malloc + 118
    frame #7: 0x0000000110312e80 libjvm.dylib`os::malloc(unsigned long, MEMFLAGS, NativeCallStack const&) + 240
    frame #8: 0x000000010fbf5e32 libjvm.dylib`AllocateHeap(unsigned long, MEMFLAGS, AllocFailStrategy::AllocFailEnum) + 98
    frame #9: 0x00000001104def34 libjvm.dylib`vframeArray::allocate(JavaThread*, int, GrowableArray<compiledVFrame*>*, RegisterMap*, frame, frame, frame, bool) + 52
    frame #10: 0x000000010fdfba4c libjvm.dylib`Deoptimization::fetch_unroll_info_helper(JavaThread*, int) + 1356
    frame #11: 0x000000010fdfb4aa libjvm.dylib`Deoptimization::fetch_unroll_info(JavaThread*, int) + 42

JFR Thread Sampler thread:

    frame #5: 0x0000000110312e80 libjvm.dylib`os::malloc(unsigned long, MEMFLAGS, NativeCallStack const&) + 240
    frame #6: 0x000000010fbf5d84 libjvm.dylib`AllocateHeap(unsigned long, MEMFLAGS, NativeCallStack const&, AllocFailStrategy::AllocFailEnum) + 20
    frame #7: 0x000000010ffb7cea libjvm.dylib`JfrCHeapObj::allocate_array_noinline(unsigned long, unsigned long) + 106
    frame #8: 0x000000010fff346c libjvm.dylib`JfrEpochStorageHost<JfrBuffer, JfrMspaceRemoveRetrieval, false>::acquire(unsigned long, Thread*) + 220
    frame #9: 0x000000010fff2b70 libjvm.dylib`JfrEpochQueue<JfrEpochQueueKlassPolicy>::enqueue(Klass const*) + 160
    frame #10: 0x000000010ffe636f libjvm.dylib`JfrStackTrace::record_thread(JavaThread&, frame&) + 607
    frame #11: 0x000000010ffefaeb libjvm.dylib`OSThreadSampler::protected_task(os::SuspendedThreadTaskContext const&) + 139
    frame #12: 0x000000011031da3f libjvm.dylib`os::ThreadCrashProtection::call(os::CrashProtectionCallback&) + 79
    frame #13: 0x000000010ffef953 libjvm.dylib`OSThreadSampler::do_task(os::SuspendedThreadTaskContext const&) + 131
    frame #14: 0x00000001103c6203 libjvm.dylib`os::SuspendedThreadTask::internal_do_task() + 67
    frame #15: 0x000000011031505e libjvm.dylib`os::SuspendedThreadTask::run() + 14
    frame #16: 0x000000010fff02b1 libjvm.dylib`JfrThreadSampleClosure::do_sample_thread(JavaThread*, JfrStackFrame*, unsigned int, JfrSampleType) + 385
    frame #17: 0x000000010fff0c59 libjvm.dylib`JfrThreadSampler::task_stacktrace(JfrSampleType, JavaThread**) + 793
    frame #18: 0x000000010fff08d1 libjvm.dylib`JfrThreadSampler::run() + 353

An invariant exists that the JFR Thread Sampler thread does not take critical locks because it can result in deadlock situations just like the one listed above. 

JDK-8233705 introduced a means to only iterate the incrementally tagged set of klasses in the JVM - instead of all - as part of serializing metadata information. The newly tagged klasses are enqueued onto a thread-local buffer using a load barrier. If the buffer runs out of space, another is accommodated from a free list or via a new allocation. Unfortunately, this is problematic for the JfrThreadSampler because the suspended thread can hold the malloc lock. For example, if the suspended thread is in the process of deoptimization (above). The Deoptimization::UnrollBlock is a CHeapObj, and the vframes arrays use the NEW_C_HEAP_ARRAY macro. 

 The enqueue mechanism introduced in JDK-8233705 needs to accommodate special handling for the JFR Thread Sampler thread. 

 One solution to this problem is to explicitly monitor the size of the thread-local buffer of the JfrThreadSampler thread and pre-emptively renew it before thread suspension. ",,,,,,,,,,,JDK-8278739,,,,,,,,,,,,,,,,,,,,,,,,JDK-8293167,,,,,JDK-8233705,,,,,,,,,,,,,,,,,,,,,,,,"0|i2ugkb:",9223372036854775807,b28,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@42995637,,,,,,,Not verified,,"2021-12-09 01:31;roboduke;Changeset: 965ea8d9
Author:    Markus Grönlund <mgronlun@openjdk.org>
Date:      2021-12-09 09:29:59 +0000
URL:       https://git.openjdk.java.net/jdk/commit/965ea8d9cd29aee41ba2b1b0b0c67bb67eca22dd
;;;",,,,,,,,,,,,,,,,,,,,,,,,,
Update or Problem List tests which may fail with uiScale=2 on macOS,JDK-8274296,5059223,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,prr,prr,prr,2021-09-24 09:25,2022-10-25 12:36,2023-10-01 09:57,2021-09-24 10:32,17,18,,,,,,18,client-libs,,0,jdk11u-fix-request,jdk11u-fix-yes,jdk17u-fix-request,jdk17u-fix-yes,macos,noreg-self,testbug,,,,,,,,,,,,,,,"As described in https://bugs.openjdk.java.net/browse/JDK-8274106
a number of tests fail due to some inaccuracy in pixels copied from the screen when scaling down from device space to user space.
The subject of most of these tests is such that uiScale isn't important and we can have them pass with -Dsun.java2d.uiScale=1.
For the rest we can problem list them - as narrowly as we can on macos-aarch64 which is the only place we've seen the problem (not happening on retina displays with x64 it seems) whilst we try to figure out the root cause which is either in Apple code or something we are doing to trigger that Apple API misbehaviour. ",,,,,,,,,,,JDK-8292604,JDK-8294200,JDK-8295913,JDK-8292603,JDK-8292605,,,,,,,,,,,,,,,,,,,,JDK-8274304,JDK-8275234,,,,,,,,,,,,,,aarch64,,,,,,,,,os_x,,,,,"0|i2ugjv:",9223372036854775807,b17,,,,,,,,,,,,"2021-09-24 10:32;roboduke;Changeset: 753b2563
Author:    Phil Race <prr@openjdk.org>
Date:      2021-09-24 17:31:19 +0000
URL:       https://git.openjdk.java.net/jdk/commit/753b25633bf07eed40fd25b4b89313644763cd56
;;;","2022-09-21 03:32;goetz;Fix request [17u]

I backport this for parity with 17.0.6-oracle.
No risk, only a test change.
Clean backport besides one change to a test not in 17. 
SAP nightly testing passed.;;;","2022-09-21 03:37;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/704
Date: 2022-09-21 10:30:41 +0000;;;","2022-10-12 05:20;goetz;Fix request [11u]

I backport this for parity with 11.0.18-oracle.
Clean backport from 17.
Test pass except ChildAlwaysOnTopTest, which is known to be failing (JDK-8222323). SAP nighlty testing passed.;;;","2022-10-24 01:17;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk11u-dev/pull/1470
Date: 2022-10-24 08:07:52 +0000;;;",,,,,,,,,,,,,,,,,,,,,
Update the javadoc man page to reflect JDK 17 changes,JDK-8274295,5059222,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,hannesw,bkorando,bkorando,2021-09-24 08:30,2021-12-13 03:02,2023-10-01 09:57,2021-11-16 01:23,17,,,,,,,18,tools,,0,noreg-doc,review-requested,,,,,,,,,,,,,,,,,,,,"Several new command line options were added to `javadoc` with the JDK 17 release, however the javadoc tool spec page does not provide descriptions 
`--since`
`--since-label` 
`--legal-notices`

Descriptions provided from help output of command line tool.

Recent API:
```
    --since <release>(,<release>)*
                  Document new and deprecated API in the specified releases
    --since-label <text>
                  Provide text to use in the heading of the ""New API"" page
```

legal-notices:
```
    --legal-notices 'default' | 'none' | <directory>
                  Control legal notices in the generated output
```",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8274801,,,,,JDK-8274211,JDK-8263468,JDK-8266163,,,,,,,,,,,,,,,,,,,,17,,,,,,,"0|i2ugjn:",9223372036854775807,b24,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@7900061a,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Build failure on macOS with Xcode 13.0 as vfork is deprecated,JDK-8274293,5059220,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,jiefu,jiefu,jiefu,2021-09-24 08:28,2021-11-18 04:39,2023-10-01 09:57,2021-09-26 07:49,18,,,,,,,18,hotspot,,0,azul-interest,jdk11u-fix-request,jdk11u-fix-yes,jdk13u-fix-request,jdk13u-fix-yes,jdk15u-fix-request,jdk15u-fix-yes,jdk17u-fix-request,jdk17u-fix-yes,tencent-interest,,,,,,,,,,,,"This is on behalf of xiepeng.

=== Output from failing command(s) repeated here ===
* For target hotspot_variant-server_libjvm_objs_os_posix.o:
/Users/xiepeng/codes/opensource/bobjdk/src/hotspot/os/posix/os_posix.cpp:1887:26: error: 'vfork' is deprecated: Use posix_spawn or fork [-Werror,-Wdeprecated-declarations]
  pid = prefer_vfork ? ::vfork() : ::fork();
                         ^
/Users/xiepeng/dev/Xcode-beta.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX12.0.sdk/usr/include/unistd.h:604:1: note: 'vfork' has been explicitly marked deprecated here
__deprecated_msg(""Use posix_spawn or fork"")
^
/Users/xiepeng/dev/Xcode-beta.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX12.0.sdk/usr/include/sys/cdefs.h:208:48: note: expanded from macro '__deprecated_msg'
        #define __deprecated_msg(_msg) __attribute__((__deprecated__(_msg)))
                                                      ^
1 error generated.",,,,,,,,,,,JDK-8275665,JDK-8277395,JDK-8277386,JDK-8275455,JDK-8275129,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,x86,,,,,,,,,os_x,,,,,"0|i2ugj7:",9223372036854775807,b17,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,,,"2021-09-26 07:49;roboduke;Changeset: 252aaa92
Author:    bobpengxie <bobpengxie@tencent.com>
Committer: Jie Fu <jiefu@openjdk.org>
Date:      2021-09-26 14:48:19 +0000
URL:       https://git.openjdk.java.net/jdk/commit/252aaa9249d8979366b37d59487b5b039d923e35
;;;","2021-10-11 06:11;dbuck;Removing jdk17u-fix-request label for now. Please see rule 1 (https://openjdk.java.net/projects/jdk-updates/approval.html).;;;","2021-10-11 19:10;pxie;Fix request

I'd like to backport this patch to jdk17u.
It will fix build failure with Xcode13.
It can be applied cleanly.
This risk is low，The patch affects only MacOS and vfork was not even an option on MacOS.;;;","2021-10-17 19:44;pxie;Fix request

I'd like to backport this patch to jdk11u.
It will fix build failure with Xcode13.
The patch doesn't apply clean.
The modification affects only MacOS and vfork was not even an option on MacOS.
This risk is low.;;;","2021-11-16 15:00;omikhaltcova;Fix request (13u) - will label after testing completed

I'd like to backport this fix to jdk13u for parity with jdk11u.
The same issue is observed on macOS Monterey 12.0.1 with Xcode 13.0. After applying the patch the issue is eliminated. 
The patch applied not cleanly but it's absolutely identical to that one applied to jdk11u.;;;","2021-11-16 15:02;omikhaltcova;Fix request (15u) - will label after testing completed 

I'd like to backport this fix to jdk15u for parity with jdk11u. 
The same issue is observed on macOS Monterey 12.0.1 with Xcode 13.0. After applying the patch the issue is eliminated. 
The original patch applied cleanly but partially only to ProcessImpl_md.c because os_posix.cpp doesn't need any fixes due to JDK-8262955 is not included to jdk15u.;;;",,,,,,,,,,,,,,,,,,,,
"jdk/jfr/api/consumer/TestRecordedFrameType.java failed with ""RuntimeException: assertNotEquals: expected Interpreted to not equal Interpreted""",JDK-8274289,5059216,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,egahlin,dcubed,dcubed,2021-09-24 07:01,2021-09-29 17:15,2023-10-01 09:57,2021-09-26 21:05,18,,,,,,,18,hotspot,,0,tier5,,,,,,,,,,,,,,,,,,,,,"The following test failed in the JDK18 CI:

jdk/jfr/api/consumer/TestRecordedFrameType.java

Here's a snippet from the log file:

#section:main
----------messages:(5/422)----------
command: main -Xbootclasspath/a:. -XX:+UnlockDiagnosticVMOptions -XX:+WhiteBoxAPI jdk.jfr.api.consumer.TestRecordedFrameType
reason: User specified action: run main/othervm -Xbootclasspath/a:. -XX:+UnlockDiagnosticVMOptions -XX:+WhiteBoxAPI jdk.jfr.api.consumer.TestRecordedFrameType 
Mode: othervm [/othervm specified]
Additional options from @modules: --add-modules jdk.jfr,java.management
elapsed time (seconds): 3.796
----------configuration:(3/51)----------
Boot Layer
  add modules: jdk.jfr java.management

----------System.out:(17/380)----------
2 compiler directives added
Found frame with method named: interpreted
{
  method = jdk.jfr.api.consumer.TestRecordedFrameType.interpreted()
  lineNumber = 110
  bytecodeIndex = 14
  type = ""Interpreted""
}

Found frame with method named: compiled
{
  method = jdk.jfr.api.consumer.TestRecordedFrameType.compiled()
  lineNumber = 116
  bytecodeIndex = 14
  type = ""Interpreted""
}

----------System.err:(16/1131)----------
java.lang.RuntimeException: assertNotEquals: expected Interpreted to not equal Interpreted
	at jdk.test.lib.Asserts.fail(Asserts.java:594)
	at jdk.test.lib.Asserts.assertNotEquals(Asserts.java:394)
	at jdk.test.lib.Asserts.assertNotEquals(Asserts.java:378)
	at jdk.jfr.api.consumer.TestRecordedFrameType.main(TestRecordedFrameType.java:91)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at com.sun.javatest.regtest.agent.MainWrapper$MainThread.run(MainWrapper.java:127)
	at java.base/java.lang.Thread.run(Thread.java:833)

JavaTest Message: Test threw exception: java.lang.RuntimeException: assertNotEquals: expected Interpreted to not equal Interpreted
JavaTest Message: shutting down test

STATUS:Failed.`main' threw exception: java.lang.RuntimeException: assertNotEquals: expected Interpreted to not equal Interpreted
----------rerun:(43/6882)*----------",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8273714,,,,,,,,,,aarch64,,,,,,,,,linux,,,,,"0|i2ugib:",9223372036854775807,b17,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@42995637,,,,,,,,,"2021-09-24 07:06;dcubed;These failures were first spotted in jdk-18+17-949-tier5 which
includes the fix for:

JDK-8273714 jdk/jfr/api/consumer/TestRecordedFrame.java still times out after JDK-8273047;;;","2021-09-26 21:05;roboduke;Changeset: e3aff8f8
Author:    Erik Gahlin <egahlin@openjdk.org>
Date:      2021-09-27 04:02:36 +0000
URL:       https://git.openjdk.java.net/jdk/commit/e3aff8f8d8b928348bf89715ba9eb905f0f21fa9
;;;",,,,,,,,,,,,,,,,,,,,,,,,
Add a way to specify block size of unbounded arena allocator,JDK-8274287,5059214,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,mcimadamore,mcimadamore,mcimadamore,2021-09-24 06:58,2021-09-24 08:43,2023-10-01 09:57,2021-09-24 08:43,repo-panama,,,,,,,,tools,,0,foreign-memaccess+abi,,,,,,,,,,,,,,,,,,,,,"See discussion:
https://mail.openjdk.java.net/pipermail/panama-dev/2021-May/013815.html",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2ughv:",9223372036854775807,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@2251e2f8,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
By reference parameters should be kept alive during downcalls,JDK-8274285,5059211,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,mcimadamore,mcimadamore,mcimadamore,2021-09-24 06:03,2021-09-24 08:30,2023-10-01 09:57,2021-09-24 08:30,repo-panama,,,,,,,,tools,,0,foreign-memaccess+abi,,,,,,,,,,,,,,,,,,,,,"All by-reference parameters in a downcall method handle (of type Addressable) should be acquired before the downcall, and released afterwards.

See:
https://inside.java/2021/05/28/taming-resource-scopes/",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2ugh7:",9223372036854775807,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@2251e2f8,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Suspicious string concatenation in logTestUtils.inline.hpp,JDK-8274265,5059180,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,jespersm,jespersm,jespersm,2021-09-24 01:11,2021-12-02 05:06,2023-10-01 09:57,2021-09-28 11:23,17,,,,,,,18,hotspot,,0,jdk11u-fix-request,jdk11u-fix-yes,jdk17u-fix-request,jdk17u-fix-SQE-ok,jdk17u-fix-yes,noreg-trivial,testbug,,,,,,,,,,,,,,,"When compiling with newest XCode / LLVM 13.0

In file included from <...>/test/hotspot/gtest/logging/test_logConfiguration.cpp:28:
<...>/test/hotspot/gtest/logging/logTestUtils.inline.hpp:35:70: error: suspicious concatenation of string literals in an array initialization; did you mean to separate the elements with a comma? [-Werror,-Wstring-concatenation]
  ""="", ""+"", "" "", ""+="", ""+=*"", ""*+"", "" +"", ""**"", ""++"", ""."", "","", "",,"" "",+"",

This looks like a simple oversight. Adding the missing commas doesn't change any test results, apparently.
",,,,,,,,,,,JDK-8278081,JDK-8278148,JDK-8277933,JDK-8278006,,,,,,,,,,,,,,,,JDK-8274283,,,,,,,,,,,,,,,,,,,,x86_64,,,,,,,,,os_x,,,,,"0|i2ugab:",9223372036854775807,b17,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,,,"2021-09-24 07:46;dcubed;Moving from hotspot/test -> hotspot/runtime.
Tests for a product area live in that product area's subcat.;;;","2021-09-28 11:23;roboduke;Changeset: c57a6c62
Author:    Jesper Steen Møller <jespersm@openjdk.org>
Committer: Christoph Langer <clanger@openjdk.org>
Date:      2021-09-28 18:22:15 +0000
URL:       https://git.openjdk.java.net/jdk/commit/c57a6c62baecde0bc10bfca89e0616b0c1fbb714
;;;","2021-10-17 15:29;serb;Please consider backport to jdk 17u2;;;","2021-11-25 03:26;mbaesken;Fix Request (17u): I would like to have the patch in jdk17 as well, because the issue is present there too and the backport is low risk.
The patch applies cleanly.;;;","2021-11-29 05:57;mbaesken;Fix Request (11u): I would like to have the patch in jdk11u-dev as well, because the issue is present there too (however it currently seems not to show up in the builds because of different clang compile flags) and the backport is low risk.
The patch applies cleanly.;;;",,,,,,,,,,,,,,,,,,,,,
Not all of G1 young collection verification honors the verification type,JDK-8274264,5059179,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,bstafford,tschatzl,tschatzl,2021-09-24 00:55,2023-03-16 00:17,2023-10-01 09:57,2023-03-09 01:41,18,,,,,,,21,hotspot,,0,gc-g1,starter,,,,,,,,,,,,,,,,,,,,"VerifyGCType is a flag to control during which pauses to do verification.

Verification before and after young collection checks this flag only for the ""main"" bulk of verification, not others.

Eg. from G1CollectedHeap::verify_before_young_collection:

void G1CollectedHeap::verify_before_young_collection(G1HeapVerifier::G1VerifyType type) {
  if (!VerifyBeforeGC) {
    return;
  }
  Ticks start = Ticks::now();
  _verifier->verify_region_sets_optional();
  _verifier->verify_dirty_young_regions();
  if (VerifyRememberedSets) {
    log_info(gc, verify)(""[Verifying RemSets before GC]"");
    VerifyRegionRemSetClosure v_cl;
    heap_region_iterate(&v_cl);
  }
  _verifier->verify_before_gc(type);         <---- !!!! only this call honors verification type
  _verifier->check_bitmaps(""GC Start"");
  verify_numa_regions(""GC Start"");
  phase_times()->record_verify_before_time_ms((Ticks::now() - start).seconds() * MILLIUNITS);

Only the marked call honors the verification type. Everything else is executed unconditionally when VerifyBeforeGC is enabled. Similar with VerifyAfterGC.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2uga3:",9223372036854775807,b14,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6b00f96c,,,,,,,,,"2022-01-04 17:36;macarte;[posted on behalf of Ana Marsh]

I have a few clarifying questions about this issue.

It appears that the best way to honor the verification type for all calls in this function would be to add a conditional statement that does similar logic to the type check happening in verify_before_gc(type).

This would result in another if statement right after confirming that VerifyBeforeGC is enabled:

void G1CollectedHeap::verify_before_young_collection(G1HeapVerifier::G1VerifyType type) {
  if (!VerifyBeforeGC) {
    return;
  }

  if (!G1HeapVerifier::should_verify(type)) {
    return;
  }

.....

Does this seem like the appropriate fix to the issue above? And if this is the case then it seems that we should remove passing the type to verify_before_gc(type), as that would be redundant?

Furthermore, upon investigation of this issue I see that there are two calls that are not a function specific to G1HeapVerifier and are therefore not called with _verifier. These two functions are heap_region_iterate and verify_numa_regions. Is there a particular reason why these are instead defined in G1CollectedHeap?;;;","2022-05-17 07:17;macarte;Un-assigning from myself (on behalf of Ana Marsh), without some answers to the previously posted question we feel this is a non-starter;;;","2022-07-21 13:54;tschatzl;[~macarte]: sorry for the late answer, these two comments slipped through the cracks - I only noticed when going through issues, looking for a few easy cleanups. I really recommend posting questions about issues to the hotspot-gc-dev mailing list, as at least I'm getting quite a lot of automatic notifications from JBS at this point. Or just create a pull request.

About your question: yes, the solution you suggest is roughly what is expected to be done here.;;;","2023-03-07 11:46;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/12818
Date: 2023-03-01 22:24:03 +0000;;;","2023-03-09 01:41;dukebot;Changeset: 34a92466
Author:    Ahmed Muhsin <36454324+ahmedmuhsin@users.noreply.github.com>
Committer: Thomas Schatzl <tschatzl@openjdk.org>
Date:      2023-03-09 09:39:39 +0000
URL:       https://git.openjdk.org/jdk/commit/34a92466a615415b76c8cb6010ff7e6e1a1d63b4
;;;",,,,,,,,,,,,,,,,,,,,,
G1: assert(check_alignment(result)) failed: address not aligned: 0x00000008baadbabe after JDK-8270009,JDK-8274259,5059174,Bug,Closed,JDK,JDK,software,duke,,,P2,Fixed,hshi,hshi,hshi,2021-09-23 23:33,2022-02-10 14:26,2023-10-01 09:57,2021-09-28 05:35,18,,,,,,,18,hotspot,,0,gc-g1,tencent-interest,,,,,,,,,,,,,,,,,,,,"Submit and assign this bug on behalf of tobytbzhang@tencent.com.

Following test crashes on debug build with the options: ""-XX:+UseG1GC -XX:+ExplicitGCInvokesConcurrent -XX:+VerifyBeforeGC -XX:+VerifyRememberedSets"".

public class A {
    public static void main(String... args) {
        System.gc();
    }
}

#
# A fatal error has been detected by the Java Runtime Environment:
#
#  Internal Error (/data1/ws/jdk/src/hotspot/share/oops/compressedOops.inline.hpp:135), pid=1161112, tid=1161119
#  assert(check_alignment(result)) failed: address not aligned: 0x00000008baadbabe
#
# JRE version: OpenJDK Runtime Environment (18.0) (fastdebug build 18-internal+0-adhoc.root.jdk)
# Java VM: OpenJDK 64-Bit Server VM (fastdebug 18-internal+0-adhoc.root.jdk, mixed mode, sharing, tiered, compressed oops, compressed class ptrs, g1 gc, linux-amd64)
# Problematic frame:
# V  [libjvm.so+0xb3ef72]  HeapRegion::block_size(HeapWordImpl* const*) const+0x232
#
# Core dump will be written. Default location: Core dumps may be processed with ""/usr/lib/systemd/systemd-coredump %P %u %g %s %t %c %h %e"" (or dumping to /data1/ws/jdk/core.1161112)
#
# If you would like to submit a bug report, please visit:
#   https://bugreport.java.com/bugreport/crash.jsp
#

---------------  S U M M A R Y ------------

Command Line: -Xlog:gc*=trace -XX:+UseG1GC -XX:+ExplicitGCInvokesConcurrent -XX:+VerifyBeforeGC -XX:+VerifyRememberedSets -Xmx4m A

Host: VM-232-99-centos, AMD EPYC 7K62 48-Core Processor, 16 cores, 31G, CentOS Linux release 8.2.2.2004 (Core) 
Time: Fri Sep 24 14:21:40 2021 CST elapsed time: 0.054486 seconds (0d 0h 0m 0s)

---------------  T H R E A D  ---------------

Current thread (0x00007f30a415adc0):  VMThread ""VM Thread"" [stack: 0x00007f308c870000,0x00007f308c970000] [id=1161119]

Stack: [0x00007f308c870000,0x00007f308c970000],  sp=0x00007f308c96def0,  free space=1015k
Native frames: (J=compiled Java code, j=interpreted, Vv=VM code, C=native code)
V  [libjvm.so+0xb3ef72]  HeapRegion::block_size(HeapWordImpl* const*) const+0x232
V  [libjvm.so+0xccabb1]  HeapRegion::verify_rem_set(VerifyOption, bool*) const+0x201
V  [libjvm.so+0xccae37]  HeapRegion::verify_rem_set() const+0x17
V  [libjvm.so+0xb6a4ed]  VerifyRegionRemSetClosure::do_heap_region(HeapRegion*)+0x3d
V  [libjvm.so+0xcd7a39]  HeapRegionManager::iterate(HeapRegionClosure*) const+0x159
V  [libjvm.so+0xb6881a]  G1CollectedHeap::verify_before_young_collection(G1HeapVerifier::G1VerifyType)+0x8a
V  [libjvm.so+0xc2e662]  G1YoungCollector::collect()+0x592
V  [libjvm.so+0xb61e89]  G1CollectedHeap::do_collection_pause_at_safepoint_helper(double)+0xe9
V  [libjvm.so+0xb61fdb]  G1CollectedHeap::do_collection_pause_at_safepoint(double)+0x9b
V  [libjvm.so+0xc2b5ef]  VM_G1TryInitiateConcMark::doit()+0xff
V  [libjvm.so+0x1894cd7]  VM_Operation::evaluate()+0x187
V  [libjvm.so+0x18b99b8]  VMThread::inner_execute(VM_Operation*)+0x348
V  [libjvm.so+0x18ba433]  VMThread::loop()+0x253
V  [libjvm.so+0x18ba6cd]  VMThread::run()+0xbd
V  [libjvm.so+0x17bcbc8]  Thread::call_run()+0xf8
V  [libjvm.so+0x13c6be9]  thread_native_entry(Thread*)+0x109

Register to memory mapping:",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8270009,,,,,,,,,,,,,,,generic,,,,,,,,,generic,,,,,"0|i2ug8z:",9223372036854775807,b17,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6b00f96c,,,,,,,Verified,,"2021-09-28 05:35;roboduke;Changeset: 79865cd7
Author:    Tongbao Zhang <tobytbzhang@tencent.com>
Committer: Thomas Schatzl <tschatzl@openjdk.org>
Date:      2021-09-28 12:32:39 +0000
URL:       https://git.openjdk.java.net/jdk/commit/79865cd797737f22cd4efe7e9c03ddbb86095e64
;;;",,,,,,,,,,,,,,,,,,,,,,,,,
"Update javac messages to use ""enum class"" rather than ""enum type""",JDK-8274255,5059170,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,darcy,darcy,darcy,2021-09-23 22:50,2021-09-29 17:15,2023-10-01 09:57,2021-09-27 09:31,,,,,,,,18,tools,,0,noreg-other,,,,,,,,,,,,,,,,,,,,,"After a terminology update in JavaSE 16, the JLS uses the phrase ""enum classes"" rather than ""enum types"": compare

https://docs.oracle.com/javase/specs/jls/se15/html/jls-8.html#jls-8.9
https://docs.oracle.com/javase/specs/jls/se17/html/jls-8.html#jls-8.9

The messages in javac's compiler properties should be aligned with the revised wording.

 See ""Consistent Class and Interface Terminology"" document:
https://download.java.net/java/early_access/jdk16/docs/specs/class-terminology-jls.html
for the full terminology update.
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8202056,JDK-8257638,JDK-8246772,,,,,,,,,,,,,,,,,,,,,,"0|i2ug83:",9223372036854775807,b17,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4dca67bd,,,,,,,,,"2021-09-23 22:54;darcy;Noticed during work on JDK-8202056.;;;","2021-09-27 09:31;roboduke;Changeset: 172900da
Author:    Joe Darcy <darcy@openjdk.org>
Date:      2021-09-27 16:28:17 +0000
URL:       https://git.openjdk.java.net/jdk/commit/172900dab133aad9029c904101ff9ddaaced6a8f
;;;",,,,,,,,,,,,,,,,,,,,,,,,
sun/tools/jmap/BasicJMapTest.java Mutex rank failures,JDK-8274245,5059161,Bug,Closed,JDK,JDK,software,duke,,,P2,Fixed,lzang,coleenp,coleenp,2021-09-23 17:49,2021-12-15 10:49,2023-10-01 09:57,2021-09-30 07:47,18,,,,,,,18,hotspot,,0,tier5,tier6,tier7,,,,,,,,,,,,,,,,,,,"The test sun/tools/jmap/BasicJMapTest.java fails with Mutex rank violations due to the changes for JDK-8273915.

#  Internal Error (/scratch/cphillim/hg/18test/src/hotspot/share/runtime/mutex.cpp:291), pid=14632, tid=14677
#  assert(_rank <= nosafepoint || _safepoint_check_required == _safepoint_check_always) failed: Locks above nosafepoint rank should safepoint: Dumper Controller lock
#

When the ranks are fixed, the test also gets:

#  Internal Error (/scratch/cphillim/hg/18test/src/hotspot/share/runtime/mutex.cpp:390), pid=33218, tid=33341
#  assert(false) failed: Attempting to wait on monitor HProfCompressionBackend_lock/20 while holding lock ParallelHProfWriter_lock/21 -- possible deadlock. Should not block(wait) while holding a lock of rank nosafepoint or below.
#

Because of some old check in the mutex rank checking where it assumed special was the least ranked lock.
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8274196,,,,,JDK-8273915,,,,,,,,,,,,,,,,,,,,,,,,"0|i2ug63:",9223372036854775807,b18,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,Verified,,"2021-09-24 06:48;dcubed;I've spotted three different failure modes:

sun/tools/jmap/BasicJMapTest.java#Z

# To suppress the following error report, specify this argument
# after -XX: or in .hotspotrc:  SuppressErrorAt=/mutex.cpp:291
#
# A fatal error has been detected by the Java Runtime Environment:
#
#  Internal Error (/opt/mach5/mesos/work_dir/slaves/35546316-ed70-4084-8244-d672e7734fd1-S13310/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/94b15eb7-932c-4908-8a12-1077124f2ac3/runs/1526910e-3a44-491a-b5a8-c5c6e7845609/workspace/open/src/hotspot/share/runtime/mutex.cpp:291), pid=1050318, tid=1050356
#  assert(_rank <= nosafepoint || _safepoint_check_required == _safepoint_check_always) failed: Locks above nosafepoint rank should safepoint: Parallel HProf writer lock
#
# JRE version: Java(TM) SE Runtime Environment (18.0+17) (fastdebug build 18-ea+17-949)
# Java VM: Java HotSpot(TM) 64-Bit Server VM (fastdebug 18-ea+17-949, mixed mode, sharing, tiered, compressed class ptrs, z gc, linux-aarch64)
# Problematic frame:
# V  [libjvm.so+0x13e68b8]  Mutex::Mutex(int, char const*, Mutex::SafepointCheckRequired, bool)+0xd4
#
# Core dump will be written. Default location: Core dumps may be processed with ""/opt/core.sh %p"" (or dumping to /opt/mach5/mesos/work_dir/slaves/35546316-ed70-4084-8244-d672e7734fd1-S13250/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/2723360e-d58f-4837-9fda-403a9babd5ca/runs/485c5b8f-6ed8-4124-8a08-fbb6dd95d412/testoutput/test-support/jtreg_open_test_jdk_jdk_svc/scratch/2/core.1050318)
#
# An error report file with more information is saved as:
# /opt/mach5/mesos/work_dir/slaves/35546316-ed70-4084-8244-d672e7734fd1-S13250/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/2723360e-d58f-4837-9fda-403a9babd5ca/runs/485c5b8f-6ed8-4124-8a08-fbb6dd95d412/testoutput/test-support/jtreg_open_test_jdk_jdk_svc/scratch/2/hs_err_pid1050318.log
#
# If you would like to submit a bug report, please visit:
#   https://bugreport.java.com/bugreport/crash.jsp
#


sun/tools/jmap/BasicJMapTest.java#Serial

# To suppress the following error report, specify this argument
# after -XX: or in .hotspotrc:  SuppressErrorAt=/heapDumper.cpp:1883
#
# A fatal error has been detected by the Java Runtime Environment:
#
#  Internal Error (/opt/mach5/mesos/work_dir/slaves/35546316-ed70-4084-8244-d672e7734fd1-S13310/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/94b15eb7-932c-4908-8a12-1077124f2ac3/runs/1526910e-3a44-491a-b5a8-c5c6e7845609/workspace/open/src/hotspot/share/services/heapDumper.cpp:1883), pid=1049779, tid=1049784
#  assert(_num_writer_threads >= 1) failed: Must be at least one writer
#
# JRE version: Java(TM) SE Runtime Environment (18.0+17) (fastdebug build 18-ea+17-949)
# Java VM: Java HotSpot(TM) 64-Bit Server VM (fastdebug 18-ea+17-949, mixed mode, sharing, tiered, compressed oops, compressed class ptrs, serial gc, linux-aarch64)
# Problematic frame:
# V  [libjvm.so+0xd5f4b4]  VM_HeapDumper::work(unsigned int)+0x8f4
#
# Core dump will be written. Default location: Core dumps may be processed with ""/opt/core.sh %p"" (or dumping to /opt/mach5/mesos/work_dir/slaves/35546316-ed70-4084-8244-d672e7734fd1-S13250/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/2723360e-d58f-4837-9fda-403a9babd5ca/runs/485c5b8f-6ed8-4124-8a08-fbb6dd95d412/testoutput/test-support/jtreg_open_test_jdk_jdk_svc/scratch/1/core.1049779)
#
# An error report file with more information is saved as:
# /opt/mach5/mesos/work_dir/slaves/35546316-ed70-4084-8244-d672e7734fd1-S13250/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/2723360e-d58f-4837-9fda-403a9babd5ca/runs/485c5b8f-6ed8-4124-8a08-fbb6dd95d412/testoutput/test-support/jtreg_open_test_jdk_jdk_svc/scratch/1/hs_err_pid1049779.log
#
# If you would like to submit a bug report, please visit:
#   https://bugreport.java.com/bugreport/crash.jsp
#


sun/tools/jmap/BasicJMapTest.java#Serial

#
# A fatal error has been detected by the Java Runtime Environment:
#
#  SIGSEGV (0xb) at pc=0x0000000104da775a, pid=85362, tid=19715
#
# JRE version: Java(TM) SE Runtime Environment (18.0+17) (fastdebug build 18-ea+17-949)
# Java VM: Java HotSpot(TM) 64-Bit Server VM (fastdebug 18-ea+17-949, mixed mode, sharing, tiered, compressed oops, compressed class ptrs, serial gc, bsd-amd64)
# Problematic frame:
# V  [libjvm.dylib+0x81675a]  DumperController::start_dump()+0xa
#
# Core dump will be written. Default location: core.85362
#
# An error report file with more information is saved as:
# /System/Volumes/Data/mesos/work_dir/slaves/a2dc162d-743b-4800-9e92-31f85abb45b1-S4700/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/ac84a07c-eb4d-4178-bbfd-50bb02fd8ace/runs/f7a3fe43-2ada-44b2-b140-b1a359b9ab6e/testoutput/test-support/jtreg_open_test_jdk_jdk_svc/scratch/2/hs_err_pid85362.log
#
# If you would like to submit a bug report, please visit:
#   https://bugreport.java.com/bugreport/crash.jsp
#;;;","2021-09-24 06:53;lzang;Hi Daniel, 
I believe the three issues can be fixed by https://github.com/openjdk/jdk/pull/5681.

Thanks,
Lin;;;","2021-09-28 11:13;mseledtsov;ILW = HLH = P2;;;","2021-09-30 07:47;roboduke;Changeset: bfd61634
Author:    Lin Zang <lzang@openjdk.org>
Date:      2021-09-30 14:44:59 +0000
URL:       https://git.openjdk.java.net/jdk/commit/bfd616347126a802c641326a6be5a14c4cd7af90
;;;",,,,,,,,,,,,,,,,,,,,,,
ReportOnImportedModuleAnnotation.java fails on rerun,JDK-8274244,5059159,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,darcy,darcy,darcy,2021-09-23 17:08,2022-03-11 05:47,2023-10-01 09:57,2021-10-05 10:34,18,,,,,,,18,tools,,0,jdk17u-fix-request,jdk17u-fix-yes,noreg-self,ursqe-triaged,,,,,,,,,,,,,,,,,,"The test

tools/javac/processing/ReportOnImportedModuleAnnotation/ReportOnImportedModuleAnnotation.java

fails if re-run with existing JTwork and JTreport directories.",,,,,,,,,,,JDK-8281321,JDK-8283031,,,,,,,,,,,,,,,,,,,,,,,JDK-8235457,JDK-8235458,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2ug5n:",9223372036854775807,b18,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4dca67bd,,,,,,,,,"2021-10-03 15:19;darcy;In jtreg build directive terms, the test wants to do

* build annotation processing sources
* compile module sources, running build annotation processor

Since implicit module-based compilation is being used, there needs to be the effect of a clean step for at least the module-info.java sources being compiled.;;;","2021-10-05 10:34;roboduke;Changeset: c391e59e
Author:    Joe Darcy <darcy@openjdk.org>
Date:      2021-10-05 17:31:57 +0000
URL:       https://git.openjdk.java.net/jdk/commit/c391e59ea6fe6759553425e342b2d97824dd9323
;;;","2022-03-10 08:13;goetz;Fix request [17u]

I backport this for parity with 17.0.4-oracle.
No risk, only a test change.
Clean backport.
Test passes.
;;;","2022-03-10 08:25;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk17u-dev/pull/233
Date: 2022-03-10 16:17:55 +0000;;;",,,,,,,,,,,,,,,,,,,,,,
Implement fast-path for ASCII-compatible CharsetEncoders on x86,JDK-8274242,5059156,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,redestad,redestad,redestad,2021-09-23 16:04,2022-02-06 08:06,2023-10-01 09:57,2021-09-29 06:02,17,18,,,,,,18,hotspot,,0,hs-comp-triaged,jdk17u-fix-request,jdk17u-fix-SQE-ok,jdk17u-fix-yes,oracle-triage-11,oracle-triage-17,oracle-triage-18,performance,,,,,,,,,,,,,,"A regression and performance discrepancy was reported where some CharsetEncoders are much slower than string.getBytes for the same encoding, particularly UTF-8.

Analysis shows there's a regression to the UTF-8 CharsetEncoder caused by CompactStrings in JDK 9, while much of the performance difference between UTF_8$Encoder and String.getBytes(UTF-8) is really due to the latter taking advantage of some optimized intrinsics and seeing a large speed-up in JDK 9.

Still, to fix the regression it made most sense to explore ways to take advantage of the existing intrinsics from various CharsetEncoders. The best result comes from extending the ISO_8859_1.implEncodeISOArray intrinsic to work also for ASCII encoding, which makes UTF_8$Encoder perform on par with (or outperform) string.getBytes(UTF-8). Extending the intrinsic on all platforms appear feasible, but it was only straightforward on x86. Since it doesn't seem reasonable to hold this fix up until implemented on all supported platforms I've limited it to x86 and will file follow-ups for the other platforms.",,,,,,,,,,,JDK-8278002,JDK-8277642,,,,,,,,,,,,JDK-8275863,JDK-8274243,JDK-8277846,,,,,,,,,,,,,,,,,,,,,,,,x86,,,,,,,,,generic,,,,,"0|i2ug4z:",9223372036854775807,b17,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2021-09-23 16:16;dlong;ILW = performance regression, turn off  CompactStrings? = MMM = P3;;;","2021-09-24 08:09;redestad;FWIW turning off compact strings means either insignificant score change or a large regression in the micros I'm looking at.;;;","2021-09-29 06:02;roboduke;Changeset: aaa36cc0
Author:    Claes Redestad <redestad@openjdk.org>
Date:      2021-09-29 12:58:14 +0000
URL:       https://git.openjdk.java.net/jdk/commit/aaa36cc0069043e34b47e89769eb9eba39e5362a
;;;","2021-11-23 05:20;redestad;Fix request

* This resolves - on x86 - some minor regressions vs JDK 8 and a large performance discrepancy where these CharsetEncoder APIs fell behind as JDK 9 improved performance of encoding bytes from Strings

* The risk is low: the patch adds a variant of an intrinsic that has been in production use since JDK 8, and no new bugs has been detected after more than a month of testing

* The patch applies cleanly to 17u with some fuzzing;;;",,,,,,,,,,,,,,,,,,,,,,
-Xshare:dump should not call vm_direct_exit,JDK-8274235,5059144,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,ccheung,iklam,iklam,2021-09-23 12:59,2022-07-18 12:31,2023-10-01 09:57,2022-07-11 08:39,18,,,,,,,20,hotspot,,0,cds,,,,,,,,,,,,,,,,,,,,,"See https://github.com/openjdk/jdk/blob/0aa63feca8704c8958530ef9e3df128570c50e12/src/hotspot/share/cds/metaspaceShared.cpp#L579

  // There may be pending VM operations. We have changed some global states
  // (such as vmClasses::_klasses) that may cause these VM operations
  // to fail. For safety, forget these operations and exit the VM directly.
  vm_direct_exit(0);


This is unsafe because C++ global destructors may be executed as a result of calling vm_direct_exit. This may cause a race condition with concurrent GC threads that are updating global objects and result in a crash.

Suggested fix:

- As a hack, we could call _exit(), which will quit the process without doing global cleanups
- But a more wholesome fix would be to avoid modifying the global states (such as vmClasses::_klasses) during -Xshare:dump. This should be fairly easy to implement.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2ug2b:",9223372036854775807,b06,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,,,"2021-09-23 15:11;dholmes;I like the idea of a wholesome fix, if it is actually feasible. But FYI I'm adding os::_exit(int val)  to fix JDK-8274136.;;;","2021-09-23 22:32;dholmes;Looking through:

./share/cds/archiveBuilder.cpp 
./share/cds/heapShared.cpp 
./share/cds/metaspaceShared.cpp

there are a number of calls to vm_direct_exit, and I'm not sure any of them should exist. If the vm is still being initialized then vm_exit_during_initialization would be appropriate. Otherwise, a regular shutdown seems in order, unless we truly have an extreme error condition.;;;","2021-09-28 11:15;mseledtsov;ILW = MLM = P4;;;","2022-07-07 22:36;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/9421
Date: 2022-07-08 05:27:04 +0000;;;","2022-07-11 08:39;dukebot;Changeset: c33fa55c
Author:    Calvin Cheung <ccheung@openjdk.org>
Date:      2022-07-11 15:33:18 +0000
URL:       https://git.openjdk.org/jdk/commit/c33fa55cf8e194e2662c11d342eee68ec67abb4d
;;;",,,,,,,,,,,,,,,,,,,,,
Cleanup unnecessary null comparison before instanceof check in jdk.jdi,JDK-8274232,5059140,Bug,Resolved,JDK,JDK,software,duke,,,P5,Fixed,aturbanov,aturbanov,aturbanov,2021-09-23 11:00,2021-11-22 21:50,2023-10-01 09:57,2021-11-15 11:15,16,17,,,,,,18,core-svc,,0,,,,,,,,,,,,,,,,,,,,,,"Update code checks both non-null and instance of a class in jdk.jdi module classes.
The checks and explicit casts could also be replaced with pattern matching for the instanceof operator. ",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2ug1f:",9223372036854775807,b24,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@3397f701,,,,,,,,,"2021-11-15 11:15;roboduke;Changeset: db0c8d52
Author:    Andrey Turbanov <turbanoff@gmail.com>
Committer: Chris Plummer <cjplummer@openjdk.org>
Date:      2021-11-15 19:14:17 +0000
URL:       https://git.openjdk.java.net/jdk/commit/db0c8d522704d2e12bce4ebeb9297b57e3789f4f
;;;",,,,,,,,,,,,,,,,,,,,,,,,,
"Remove ""impl.prefix"" jdk system property usage from InetAddress",JDK-8274227,5059135,Bug,Closed,JDK,JDK,software,duke,,,P4,Fixed,aefimov,aefimov,aefimov,2021-09-23 10:16,2022-04-25 10:57,2023-10-01 09:57,2021-10-01 02:49,,,,,,,,18,core-libs,,0,release-note=yes,,,,,,,,,,,,,,,,,,,,,"""impl.prefix"" jdk system property is used to locate concrete implementation of package protected ""java.net.InetAddressImpl"" interface.
This mechanism is obsolete and should be removed.",,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8274230,,,,,,,,JDK-8270847,,,,,,,,,,,,,,,generic,,,,,,,,,generic,,,,,"0|i2ug0b:",9223372036854775807,b18,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@446e124a,,,,,,,Verified,,"2021-10-01 02:48;roboduke;Changeset: cc14c6f0
Author:    Aleksei Efimov <aefimov@openjdk.org>
Date:      2021-10-01 09:48:09 +0000
URL:       https://git.openjdk.java.net/jdk/commit/cc14c6f076356731f78aea4e890027f4e2a91642
;;;","2022-04-25 10:57;sqetools;verified;;;",,,,,,,,,,,,,,,,,,,,,,,,
Add back generic factory to create value layouts,JDK-8274219,5059127,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,mcimadamore,mcimadamore,mcimadamore,2021-09-23 10:05,2021-09-23 13:35,2023-10-01 09:57,2021-09-23 13:35,repo-panama,,,,,,,,tools,,0,foreign-memaccess+abi,,,,,,,,,,,,,,,,,,,,,"The recent API refresh removed value layout factory. While it is not possible to come up with a parameterized API, some dynamic use cases would benefit from having a generic value layout factory.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2ufyj:",9223372036854775807,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@2251e2f8,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Remove globalsignr2ca root from 17.0.2,JDK-8274215,5059123,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,rhalade,rhalade,rhalade,2021-09-23 09:40,2021-10-11 10:40,2023-10-01 09:57,2021-09-23 12:37,17.0.2,,,,,,,17.0.2,security-libs,,0,cac-remv,release-note=yes,,,,,,,,,,,,,,,,,,,,"""globalsignr2ca [jdk]"" was removed with JDK-8225083. This fix got pulled in to 17.0.1 (Oct 2021) release so had to be backed out with JDK-8273150. Since it was not allowed to be backed out from 17.0.1 repo only, it was backed out from 17.0.2 as well.

Now that Oct release is finalized, the fix for JDK-8225083 can be added back to 17.0.2.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8273150,JDK-8225083,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2ufxn:",9223372036854775807,b01,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@2ec284e3,,,,,,,,,"2021-09-23 12:37;roboduke;Changeset: 8cd93192
Author:    Rajan Halade <rhalade@openjdk.org>
Date:      2021-09-23 19:36:24 +0000
URL:       https://git.openjdk.java.net/jdk17u/commit/8cd93192a470a81daf233a3bc9a2e2cd31841892
;;;",,,,,,,,,,,,,,,,,,,,,,,,,
Test man page that options are documented,JDK-8274211,5059117,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,jjg,jjg,jjg,2021-09-23 07:58,2023-09-27 00:46,2023-10-01 09:57,2021-10-06 15:41,17,,,,,,,18,tools,,0,jdk17u-fix-request,jdk17u-fix-yes,noreg-self,,,,,,,,,,,,,,,,,,,"We should create a test that ensures that options are documented in man pages.

For now, we can scrape the info from the `.1` file. Ideally, we should eventually read the `.md` file. Perhaps the test can be written up front to accept either, defaulting to the `.1` file.",,,,,,,,,,,JDK-8317013,JDK-8313514,JDK-8313308,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8274295,,,,,,,,,,,,,,,,,,,,,,,,"0|i2ufwb:",9223372036854775807,b19,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@7900061a,,,,,,,,,"2021-09-24 08:51;prappo;Linked the issue that describes the situation that influenced this bug.;;;","2021-10-05 16:41;jjg;Seek, and ye shall find:

Error:  The following options are defined by the tool or doclet, but not defined in the man page:
    --legal-notices, --link-platform-properties, --no-platform-links, --since, --since-label, --snippet-path;;;","2021-10-06 15:41;roboduke;Changeset: 734d1fbd
Author:    Jonathan Gibbons <jjg@openjdk.org>
Date:      2021-10-06 22:40:44 +0000
URL:       https://git.openjdk.java.net/jdk/commit/734d1fbd33be0aa20b26e6e8c776709f478069de
;;;","2023-09-25 01:16;goetz;Fix request [17u]

I backport this for parity with 17.0.10-oracle.
No risk, only a test change.
Clean backport.
Test passes. SAP nightly testing passed.;;;","2023-09-25 01:28;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/1782
Date: 2023-09-25 08:20:57 +0000;;;",,,,,,,,,,,,,,,,,,,,,
Handle KDC_ERR_SVC_UNAVAILABLE error code from KDC,JDK-8274205,5059111,Bug,Closed,JDK,JDK,software,duke,,,P3,Fixed,abakhtin,abakhtin,abakhtin,2021-09-23 06:23,2023-06-13 22:46,2023-10-01 09:57,2021-09-24 05:11,11,13,15,17,18,8,,18,security-libs,,0,8bpr-critical-approved,azul-interest,jdk11u-fix-request,jdk11u-fix-yes,jdk17u-fix-request,jdk17u-fix-SQE-ok,jdk17u-fix-yes,,,,,,,,,,,,,,,"Current KRB5 implementation does not handle KDC_ERR_SVC_UNAVAILABLE error code after sending the AS Request to the specified KDC. Implementation treats all error codes from KDC (except of KRB_ERR_RESPONSE_TOO_BIG) as terminal and does not retry with another available KDC if possible.
KDC_ERR_SVC_UNAVAILABLE is defined as ""A service is not available"" in the RFC4120 [1]. KDC sends this error indicating temporary error, for example if server has been restarting.
MIT implementation handles KDC_ERR_SVC_UNAVAILABLE error from KDC and reattempts to connect to the next KDC as per the config [2]. I suggest to do the same.
  [1] - https://datatracker.ietf.org/doc/html/rfc4120#section-7.5.9
  [2] - https://krbdev.mit.edu/rt/Ticket/Display.html?id=3334",,,,,,,,,,,JDK-8275701,JDK-8309982,JDK-8303231,JDK-8303343,JDK-8305435,JDK-8305448,JDK-8303712,JDK-8304064,JDK-8303753,,,,,,,,,,,,,,,,,,,,,JDK-8303651,,,,,,,,,,,,,,,,,,,,,,,,"0|i2ufuz:",9223372036854775807,b17,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@7a7b7e03,,,,,,,Verified,,"2021-09-24 05:11;roboduke;Changeset: 5ba0d09f
Author:    Alexey Bakhtin <abakhtin@openjdk.org>
Committer: Vladimir Kempik <vkempik@openjdk.org>
Date:      2021-09-24 12:09:38 +0000
URL:       https://git.openjdk.java.net/jdk/commit/5ba0d09fe47439880daf913f4ff0b978ed9c1ac6
;;;","2021-10-19 10:30;abakhtin;Fix request (17u):
Request to include in 17u, applies cleanly, all relevant tests passed. ;;;","2022-04-08 03:45;sqetools;verified;;;","2023-06-06 08:18;goetz;Fix request [11u]

I backport this for parity with 11.0.20-oracle.
Low risk, a simple check of an error code. But it throws a new exception, the one missed so far.
Clean backport but had to adapt Test to Java 11 syntax.
Test passes and fails without the fix. SAP nightly testing passed.;;;","2023-06-06 08:40;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk11u-dev/pull/1935
Date: 2023-06-06 15:32:52 +0000;;;",,,,,,,,,,,,,,,,,,,,,
Crashes in VM_HeapDumper::work after JDK-8252842,JDK-8274196,5059102,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,lzang,tschatzl,tschatzl,2021-09-23 05:35,2021-10-06 18:03,2023-10-01 09:57,2021-09-30 07:47,18,,,,,,,18,core-svc,,0,epsilon,tier2,tier3,tier6,zgc,,,,,,,,,,,,,,,,,"serviceability/dcmd/gc/HeapDump*Test.java started failing with 

V  [jvm.dll+0xadea11]  os::platform_print_native_stack+0xf1  (os_windows_x86.cpp:235)
V  [jvm.dll+0xcfd625]  VMError::report+0x1005  (vmError.cpp:742)
V  [jvm.dll+0xcfefce]  VMError::report_and_die+0x7fe  (vmError.cpp:1552)
V  [jvm.dll+0xcff754]  VMError::report_and_die+0x64  (vmError.cpp:1333)
V  [jvm.dll+0x4cdab7]  report_vm_error+0xb7  (debug.cpp:282)
V  [jvm.dll+0x1de1f]  oopDesc::klass+0x9f  (oop.inline.hpp:85)
V  [jvm.dll+0x402374]  oopDesc::is_instance+0x14  (oop.inline.hpp:206)
V  [jvm.dll+0x660229]  JNIGlobalsDumper::do_oop+0x29  (heapDumper.cpp:1634)
V  [jvm.dll+0x77b4ee]  JNIHandles::oops_do+0x1ce  (jniHandles.cpp:168)
V  [jvm.dll+0x665815]  VM_HeapDumper::work+0x545  (heapDumper.cpp:2317)
V  [jvm.dll+0xd4360a]  GangWorker::loop+0x8a  (workgroup.cpp:239)
V  [jvm.dll+0xd436ad]  GangWorker::run+0x1d  (workgroup.cpp:206)

or

Stack: [0x00007f68407db000,0x00007f68408db000],  sp=0x00007f68408d9c20,  free space=1019k
Native frames: (J=compiled Java code, j=interpreted, Vv=VM code, C=native code)
V  [libjvm.so+0x8ae7df]  CompressedKlassPointers::decode_not_null(unsigned int, unsigned char*)+0x8f
V  [libjvm.so+0xd80152]  JNIGlobalsDumper::do_oop(oop*)+0x242
V  [libjvm.so+0xfe6c26]  JNIHandles::oops_do(OopClosure*)+0xd6
V  [libjvm.so+0xd8a13b]  VM_HeapDumper::work(unsigned int)+0x18b
V  [libjvm.so+0x19f94f5]  GangWorker::run_task(WorkData)+0x85

Probably after integration of JDK-8252842",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8252842,,,,,JDK-8274245,JDK-8274218,JDK-8274603,,,,,,,,,,,,,,,,,,,,,,"0|i2ufsz:",9223372036854775807,b18,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@22f3cc74,,,,,,,,,"2021-09-23 06:04;dholmes;Tests are failing with ZGC and Epsilon GC;;;","2021-09-23 09:26;dcubed;So far all failure sightings for:

serviceability/dcmd/gc/HeapDumpAllTest.java
serviceability/dcmd/gc/HeapDumpTest.java

are with ZGC on linux-aarch64, linux-x64 and win-x64.
I have no sightings on macosx-aarch64 or macosx-x64 (yet?).;;;","2021-09-23 10:17;dcubed;I have been able to reproduce the serviceability/dcmd/gc/HeapDumpAllTest.java 
crash with ZGC on my Ubuntu 20.04 test machine readily. I'm not able to reproduce
the serviceability/dcmd/gc/HeapDumpTest.java crash on the same machine.

I have not been able to reproduce the serviceability/dcmd/gc/HeapDumpAllTest.java
in a repo without the fix for:

JDK-8252842 Extend JMap to support parallel heap dump

so I believe that this bug is a regression caused by JDK-8252842.;;;","2021-09-23 18:18;coleenp;This change also runs into Mutex rank checking assertions due to colliding changes.;;;","2021-09-23 21:28;lzang;I am starting to investigate this issue. will update ASAP.;;;","2021-09-24 03:08;lzang;Root cause has been identified. I will submit a fix soon.
The root cause for crash in ZGC is that the JNIHandles are processed before object iteration. And ZGC would update the JNIHandles at object iteration with read barrier. So the crash is cause by accessing the invalid address which can be dummy info after zgc, and hence crash. 

The lock rank issue can be fixed because the related mutexes are acquired in safepoint. so the safepoint_check_required could be safepoint_check_always.

The Epsilon issue is caused by wrong _num_dumper_thread calculated when the gang==NULL.

Sorry for introduced these issues. 

Testing is still WIP, I will update the test result when it complete. 

Thanks,
Lin;;;","2021-09-24 05:17;coleenp;[~lzang] Ok, I'm going to assign JDK-8274245 to you and close my PR.  I'll file another bug for the special mutex wait problem that this ran into, but it won't affect you if you make these locks safepoint_check_always.  PIck 'leaf' mutex rank for now.  I'm removing that rank but I'll fix these locks when I do that afterwards.;;;","2021-09-24 05:35;coleenp;Also I renamed your locks to have sort of the standard format names that many of the mutexLocker.cpp locks have, which is nice for logging:  Can you do this?

-    _lock = new (std::nothrow) PaddedMonitor(Mutex::leaf, ""Parallel HProf writer lock"", Mutex::_safepoint_check_never);
+    _lock = new (std::nothrow) PaddedMonitor(Mutex::nosafepoint, ""ParallelHProfWriter_lock"", Mutex::_safepoint_check_never);

and

-     _lock(new (std::nothrow) PaddedMonitor(Mutex::leaf, ""Dumper Controller lock"",
+     _lock(new (std::nothrow) PaddedMonitor(Mutex::nosafepoint, ""DumperController_lock"",;;;","2021-09-24 05:42;lzang;[~coleenp], No Problem, I will do this.
BTW, do you happen to have some materials about the design of the lock rank in hotspot? I want to study more about it.

Thanks,
Lin;;;","2021-09-24 06:23;coleenp;I tried to write down the plan of what I'm doing with the lock rankings in JDK-8176393

Essentially checking for safepoints and lock ranking are going to be tightly coupled, and you can only take out locks with lower than your rank.  The heapDumping code is a bit of a mess wrt to this.  My suggestion is to leave them nosafepoint and nosafepoint-1 ranks and I'll get rid of the assert that waiting on the lower ranked one hits.;;;","2021-09-30 07:47;roboduke;Changeset: bfd61634
Author:    Lin Zang <lzang@openjdk.org>
Date:      2021-09-30 14:44:59 +0000
URL:       https://git.openjdk.java.net/jdk/commit/bfd616347126a802c641326a6be5a14c4cd7af90
;;;",,,,,,,,,,,,,,,
Doc cleanup in java.nio.file ,JDK-8274195,5059099,Bug,Resolved,JDK,JDK,software,duke,,,P5,Fixed,prappo,prappo,prappo,2021-09-23 04:58,2021-09-29 17:14,2023-10-01 09:57,2021-09-23 09:19,18,,,,,,,18,core-libs,,0,noreg-doc,,,,,,,,,,,,,,,,,,,,,Minor doc cleanup.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2ufsb:",9223372036854775807,b17,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@674604a9,,,,,,,,,"2021-09-23 09:19;roboduke;Changeset: 5ffbe755
Author:    Pavel Rappo <prappo@openjdk.org>
Date:      2021-09-23 16:18:07 +0000
URL:       https://git.openjdk.java.net/jdk/commit/5ffbe7555771c67e28b5361d2a569f3dd858ff36
;;;",,,,,,,,,,,,,,,,,,,,,,,,,
(fc) java/nio/channels/FileChannel/Transfer2GPlus.java still failed in timeout,JDK-8274175,5059078,Bug,Closed,JDK,JDK,software,duke,,,P4,Fixed,bpb,dcubed,dcubed,2021-09-22 15:27,2022-04-25 10:57,2023-10-01 09:57,2021-09-23 08:57,18,,,,,,,18,core-libs,,0,intermittent,tier2,,,,,,,,,,,,,,,,,,,,"The following test failed in the JDK18 CI:

java/nio/channels/FileChannel/Transfer2GPlus.java

Here's a snippet from the log file:

#section:main
----------messages:(6/210)----------
command: main Transfer2GPlus
reason: User specified action: run main/othervm Transfer2GPlus 
Mode: othervm [/othervm specified]
Timeout information:
--- Timeout information end.
elapsed time (seconds): 540.473
----------configuration:(0/0)----------
----------System.out:(2/55)----------
Transferred 2147484671 bytes
Timeout refired 480 times
----------System.err:(0/0)----------
----------rerun:(35/7810)*----------

<snip>

result: Error. Program `/Volumes/D1/mesos/work_dir/jib-master/install/jdk-18+16-926/macosx-x64.jdk/jdk-18.jdk/Contents/Home/bin/java' timed out (timeout set to 480000ms, elapsed time including timeout handling was 540467ms).


This failure occurred in jdk-18+16-926-tier2. The fix for:

JDK-8272759 (fc) java/nio/channels/FileChannel/Transfer2GPlus.java failed in timeout

was integrated in jdk-18+16-923.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8272759,,,,,,,,,,,,,,,x86_64,,,,,,,,,os_x,,,,,"0|i2ufnn:",9223372036854775807,b17,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@674604a9,,,,,,,Verified,,"2021-09-22 15:33;bpb;Another vintage 2010 MacPro5,1. Probably need to up the timeout on this one.;;;","2021-09-23 08:57;roboduke;Changeset: 1fdc6560
Author:    Brian Burkhalter <bpb@openjdk.org>
Date:      2021-09-23 15:57:12 +0000
URL:       https://git.openjdk.java.net/jdk/commit/1fdc6560841f72b761756d935dd02e4bb2395ec6
;;;","2022-04-25 10:57;sqetools;verified;;;",,,,,,,,,,,,,,,,,,,,,,,
Convert JavadocTester to use NIO,JDK-8274172,5059075,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,jjg,jjg,jjg,2021-09-22 14:45,2022-03-15 02:19,2023-10-01 09:57,2021-09-28 16:54,,,,,,,,18,tools,,0,javadoc-tester,jdk17u-fix-request,jdk17u-fix-yes,noreg-self,,,,,,,,,,,,,,,,,,"Convert JavadocTester to use NIO, only retaining use of File as needed in the API.",,,,,,,,,,,JDK-8283158,JDK-8282856,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8274233,,,,,,,,,,,,,,,,,,,,,,,,"0|i2ufmz:",9223372036854775807,b17,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@7900061a,,,,,,,,,"2021-09-28 16:54;roboduke;Changeset: 5b0c9ccc
Author:    Jonathan Gibbons <jjg@openjdk.org>
Date:      2021-09-28 23:53:49 +0000
URL:       https://git.openjdk.java.net/jdk/commit/5b0c9ccc495b6bf8061c161d48f73238c7167bc0
;;;","2022-03-14 05:24;goetz;Fix request [17u]

I backport this for parity with 17.0.4-oracle.
No risk, only a test change.
Clean backport.
Tests pass. SAP nightly testing passes.;;;","2022-03-14 05:32;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk17u-dev/pull/248
Date: 2022-03-14 12:26:39 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,
"java/nio/file/Files/probeContentType/Basic.java failed on ""Content type"" mismatches",JDK-8274171,5059074,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,jboes,dcubed,dcubed,2021-09-22 14:14,2022-10-19 18:47,2023-10-01 09:57,2021-09-24 01:09,18,,,,,,,18,core-libs,,0,intermittent,jdk11u-critical-request,jdk11u-critical-yes,jdk17u-fix-request,jdk17u-fix-yes,noreg-self,testbug,tier2,ursqe-triaged,,,,,,,,,,,,,"The following test failed in the JDK18 CI:

java/nio/file/Files/probeContentType/Basic.java

Here's a snippet from the log file:

----------System.err:(15/900)----------
Content type: text/x-python; expected: [text/plain, text/x-python-script]
Content type: application/rar; expected: [application/vnd.rar]
java.lang.RuntimeException: Test failed!
	at Basic.main(Basic.java:192)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at com.sun.javatest.regtest.agent.MainWrapper$MainThread.run(MainWrapper.java:127)
	at java.base/java.lang.Thread.run(Thread.java:833)

JavaTest Message: Test threw exception: java.lang.RuntimeException: Test failed!
JavaTest Message: shutting down test

STATUS:Failed.`main' threw exception: java.lang.RuntimeException: Test failed!
----------rerun:(35/6631)*----------",,,,,,,,,,,JDK-8281958,JDK-8287698,JDK-8293076,JDK-8287988,JDK-8293075,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8273655,,,,,,,,,,x86_64,,,,,,,,,linux_ubuntu,,,,,"0|i2ufmr:",9223372036854775807,b17,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@674604a9,,,,,,,,,"2021-09-22 14:23;bpb;Apparently at line 181 of the test, ""application/rar"" needs to be added to the list of expected results.;;;","2021-09-23 09:33;dcubed;It looks like this test is only failing on Ubuntu 20.04 test machines.
When the test task runs on another Linux version, the test passes
so that's what makes it look like an intermittent failure.;;;","2021-09-24 01:09;roboduke;Changeset: bb74ae87
Author:    Julia Boes <jboes@openjdk.org>
Date:      2021-09-24 08:08:27 +0000
URL:       https://git.openjdk.java.net/jdk/commit/bb74ae87abee0fb550e4138242919ec791f7791c
;;;","2022-02-15 00:20;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk17u-dev/pull/162
Date: 2022-02-15 08:16:19 +0000;;;","2022-02-15 00:29;mbaesken;Fix Request (17u)
I would like to have the patch in 17u as well, because the issue is present there too. The patch applies cleanly.;;;","2022-05-30 20:11;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk11u-dev/pull/1120
Date: 2022-05-31 03:06:22 +0000;;;","2022-05-31 06:06;andrew;Fix Request [11u]

Test continues to show failures on some platforms after backport of JDK-8273655 and the fix in JDK-8285720. Patch applies clean and test passes here on RHEL 8 as before: https://github.com/openjdk/jdk11u-dev/pull/1120;;;","2022-06-01 07:21;mbaesken;Hi Andrew [~andrew] , would be good to bring this to 11u and not only 11u-dev because the predecessor https://bugs.openjdk.java.net/browse/JDK-8273655 is now already in jdk11u .;;;","2022-06-01 10:22;andrew;Yeah, I did label this yesterday with the hope of getting it in before rampdown :)

I'll move this to a critical request for 11u.;;;","2022-06-01 10:29;andrew;Critical Fix Request [11u]

Test continues to show failures on some platforms after backport of JDK-8273655 and the fix in JDK-8285720. Patch applies clean and test passes here on RHEL 8 as before: https://github.com/openjdk/jdk11u/pull/40

Test will regress from 11.0.15 on some platforms without this so we should fix this in 11.0.16.;;;","2022-06-01 10:34;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk11u/pull/40
Date: 2022-06-01 17:27:24 +0000;;;",,,,,,,,,,,,,,,
HotSpot Style Guide has stale link to chromium style guide,JDK-8274169,5059070,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,cushon,cushon,cushon,2021-09-22 13:46,2021-09-29 17:14,2023-10-01 09:57,2021-09-23 06:43,,,,,,,,18,hotspot,,0,hotspot-style-guide,,,,,,,,,,,,,,,,,,,,,"In https://bugs.chromium.org/p/chromium/issues/detail?id=1243839 the styleguide was moved from https://chromium-cpp.appspot.com/ to https://chromium.googlesource.com/chromium/src/+/main/styleguide/c++/c++11.md.

There are references to the old url in https://github.com/openjdk/jdk/blob/master/doc/hotspot-style.html and https://github.com/openjdk/jdk/blob/master/doc/hotspot-style.md that should be updated.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2uflv:",9223372036854775807,b17,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@11336cca,,,,,,,,,"2021-09-23 06:43;roboduke;Changeset: 1b7f4b7d
Author:    Liam Miller-Cushon <cushon@openjdk.org>
Date:      2021-09-23 13:41:10 +0000
URL:       https://git.openjdk.java.net/jdk/commit/1b7f4b7dd8a6070d290875a95099780c9f060139
;;;",,,,,,,,,,,,,,,,,,,,,,,,,
Some CDS tests ignore -Dtest.cds.runtime.options,JDK-8274166,5059064,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,matsaave,iklam,iklam,2021-09-22 12:50,2023-06-01 14:28,2023-10-01 09:57,2023-04-06 07:00,18,,,,,,,21,hotspot,,0,cds,noreg-self,,,,,,,,,,,,,,,,,,,,"See https://github.com/openjdk/jdk/blob/8821b0004170e18c8e7d6e5bbe8759344ff769b1/test/lib/jdk/test/lib/cds/CDSOptions.java#L103

The test.cds.runtime.options property is used to execute the CDS tests in a special mode. E.g., create the archived with G1 but load the archive with EpsilonGC.

Currently tests that are launched with TestCommon.runWithArchive() and CDSTestUtils.runWithArchive() can handle -Dtest.cds.runtime.options. However, some test cases, such as dynamicArchive/HelloDynamic.java, do not call the above two methods, so they ignore -Dtest.cds.runtime.options.

The fix is to move the handling of -Dtest.cds.runtime.options to TestCommon.executeAndLog, because most CDS tests use this function to launch a child JVM.
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8274033,,,,,JDK-8270489,,,,,,,,,,,,,,,,,,,,,,,,"0|i2ufkj:",9223372036854775807,b18,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,,,"2023-03-31 14:19;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/13273
Date: 2023-03-31 18:20:55 +0000;;;","2023-04-06 07:00;dukebot;Changeset: ce10460e
Author:    Matias Saavedra Silva <matsaave@openjdk.org>
Date:      2023-04-06 13:59:08 +0000
URL:       https://git.openjdk.org/jdk/commit/ce10460e94c03f178943fa44dafae18acc480094
;;;",,,,,,,,,,,,,,,,,,,,,,,,
java/awt/Window/ShapedAndTranslucentWindows/Common.java delay is too high,JDK-8274160,5059054,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,azvegint,azvegint,azvegint,2021-09-22 11:13,2022-09-16 00:21,2023-10-01 09:57,2021-10-19 10:26,12,17,18,,,,,18,client-libs,,0,jdk17u-fix-request,jdk17u-fix-yes,sn_104,test_sprint,testbug,,,,,,,,,,,,,,,,,"Looks like along with a JDK-8210776 fix a typo was pushed accidentally:

delay was increased from 1000 to 55000 in java/awt/Window/ShapedAndTranslucentWindows/Common.java",,,,,,,,,,,JDK-8293481,JDK-8293912,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,12,,generic,,,,,"0|i2ufib:",9223372036854775807,b20,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@5a9b3fd3,,,,,,,,,"2021-10-19 10:26;roboduke;Changeset: 895e2bd7
Author:    Alexander Zvegintsev <azvegint@openjdk.org>
Date:      2021-10-19 17:24:20 +0000
URL:       https://git.openjdk.java.net/jdk/commit/895e2bd7c0bded5283eca8792fbfb287bb75016b
;;;","2022-09-15 07:21;goetz;Fix request [17u]

I backport this for parity with 17.0.6-oracle.
No risk, only a test change.
Clean backport.
Tests pass wrt to fixed issue.;;;","2022-09-15 07:31;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/682
Date: 2022-09-15 14:22:18 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,
java.foreign: Add method MemorySegment::asOverlappingSlice,JDK-8274157,5059050,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,jboes,jboes,jboes,2021-09-22 09:44,2021-10-06 05:34,2023-10-01 09:57,2021-10-05 06:26,repo-panama,,,,,,,,tools,,0,foreign-memaccess+abi,,,,,,,,,,,,,,,,,,,,,Add a method to java.foreign.MemorySegment::asOverlappingSlice that detects the overlap of two segments,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2ufhf:",9223372036854775807,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@2251e2f8,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Foreign API refresh - jextract update,JDK-8274155,5059047,Bug,Resolved,JDK,JDK,software,duke,,,P2,Fixed,mcimadamore,mcimadamore,mcimadamore,2021-09-22 08:43,2021-09-24 05:12,2023-10-01 09:57,2021-09-23 03:53,repo-panama,,,,,,,,tools,,0,foreign-jextract,,,,,,,,,,,,,,,,,,,,,We should update jextract to work with the latest version of the foreign API.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8274280,,,,,JDK-8273905,,,,,,,,,,,,,,,,,,,,,,,,"0|i2ufgr:",9223372036854775807,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@2251e2f8,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
C2: condition incorrectly made redundant with dominating main loop exit condition,JDK-8274145,5059034,Bug,Closed,JDK,JDK,software,duke,,,P2,Fixed,roland,shade,shade,2021-09-22 06:23,2022-02-03 05:54,2023-10-01 09:57,2021-10-08 07:49,17,18,,,,,,18,hotspot,,0,c2,hs-comp-triaged,javafuzzer,jdk17u-fix-request,jdk17u-fix-yes,oracle-triage-11,oracle-triage-17,oracle-triage-18,redhat-interest,regression,,,,,,,,,,,,"Attached Fuzzer test produces different result in C2:

$ build/linux-x86_64-server-fastdebug/images/jdk/bin/java -Xint Test | grep instanceCount | tail -n 3
Test.instanceCount Test.bFld iFld = -13,0,-1965776755
Test.instanceCount Test.bFld iFld = -13,0,-492785072
Test.instanceCount Test.bFld iFld = -13,0,1109812339

$ build/linux-x86_64-server-fastdebug/images/jdk/bin/java -Xcomp -XX:TieredStopAtLevel=1 Test | grep instanceCount | tail -n 3
Test.instanceCount Test.bFld iFld = -13,0,-1965776755
Test.instanceCount Test.bFld iFld = -13,0,-492785072
Test.instanceCount Test.bFld iFld = -13,0,1109812339

$ build/linux-x86_64-server-fastdebug/images/jdk/bin/java -Xcomp -XX:-TieredCompilation Test | grep instanceCount | tail -n 3
Test.instanceCount Test.bFld iFld = -13,0,787372637
Test.instanceCount Test.bFld iFld = -13,0,-1876561976
Test.instanceCount Test.bFld iFld = -13,0,139528539

Bisection points to JDK-8269752.",,,,,,,,,,,JDK-8275094,,,,,,,,,,,,,,,,,,,,,,,,JDK-8269752,,,,,,,,,,"2021-09-22 06:14;shade;059716.tar.gz;https://bugs.openjdk.org/secure/attachment/96547/059716.tar.gz",,,,,,,,,,,,,,,,,,,"0|i2ufdv:",9223372036854775807,b19,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,Verified,,"2021-09-22 08:13;chagedorn;ILW = Incorrect result with C2 compiled code, only single Java Fuzzer test, no workaround = HLH = P2;;;","2021-10-08 07:49;roboduke;Changeset: 2aacd422
Author:    Roland Westrelin <roland@openjdk.org>
Date:      2021-10-08 14:48:35 +0000
URL:       https://git.openjdk.java.net/jdk/commit/2aacd4220a01b467de671212c7a74e6c81a2ad3c
;;;","2021-10-11 05:24;thartmann;Fix request (17u):
The patch fixes a bug in C2 that leads to incorrect execution of compiled code (regression in JDK 17). The fix is low risk and has been tested in the JDK 18 for a while and with tier1-3 in JDK 17u. The patch applied cleanly.;;;",,,,,,,,,,,,,,,,,,,,,,,
TableView scrollbar/header misaligned when reloading data,JDK-8274137,5059027,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,rlichten,rlichten,rlichten,2021-09-22 05:04,2022-05-02 06:37,2023-10-01 09:57,2021-10-13 05:53,jfx17,,,,,,,jfx18,javafx,,0,,,,,,,,,,,,,,,,,,,,,,"When a TableView is scrolled horizontally, then cleared, then loaded again, the content of the TableView will be shown with the horizontal offset, while the scrollbar and the header will be reset to zero.",Tested against JavaFX-17.0.0.1 on a linux machine. But also happens on Windows.,,,,,,,,,,JDK-8286005,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"2021-09-22 05:09;rlichten;JDK8274137_screenshot.png;https://bugs.openjdk.org/secure/attachment/96546/JDK8274137_screenshot.png","2021-09-22 05:05;rlichten;TableViewRefreshScrollingBug.java;https://bugs.openjdk.org/secure/attachment/96545/TableViewRefreshScrollingBug.java",,,,generic,,,,,,,,,generic,,,,,"0|i2ufcb:",9223372036854775807,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@67282485,,,,,,,,,"2021-09-22 05:07;rlichten;TableViewRefreshScrollingBug.java can be used to reproduce the problem.
* Start the application, then scroll to the right so that the ""Quote"" column becomes visible
* Hit ""Clear""
* Hit ""Load""
=> Data gets reloaded, the quotes become visible again, but the header and the scrollbar are misaligned.
;;;","2021-09-22 07:59;rlichten;I think this happens, because javafx.scene.control.skin.VirtualFlow.updateHbar() will return immediately, if the VirtualFlow is not visible.
When the TableView gets cleared, the VirtualFlow will be made invisible and after that, the Position of the horizontal scrollbar will be reset to 0.
When data is reloaded, the VirtualFlow will be made visible again, but no update of the clipView.setClipX will happen.

Possible solutions:
a) No immediate return if VirtualFlow is not visible
b) Explicit call to VirtualFlow updateHBar after it is made visible again
;;;","2021-09-22 08:05;rlichten;git history does not indicate why this line:
        if (! isVisible() || getScene() == null) return;
is present in updateHbar().
;;;","2021-09-22 08:17;rlichten;b) seems to be the less intrusive way to fix this bug. Adding a call to flow.updateHBar() into javafx.scene.control.skin.TableViewSkinBase.updatePlaceholderRegionVisibility() seems to do the trick.
I will try to come up with a test case for this issue and then send a Pull Request.
;;;","2021-09-23 05:29;rlichten;On further thought, this really is a bug in VirtualFlow, because VirtualFlow does not keep it's clipX value in sync with it's own horizontal scrollbar in case it is currently invisible or has no scene.

So we either have to add 
        visibleProperty().addListener(listenerX);
        sceneProperty().addListener(listenerX);
in the constructor of VirtualFlow()

or get rid of the (premature?) optimisation in updateHbar
;;;","2021-09-23 09:23;kcr;> git history does not indicate why this line:
>         if (! isVisible() || getScene() == null) return;
> is present in updateHbar().

The code was added prior to open-sourcing JavaFX as part of the fix for JDK-8112072.

That bug was confidential, but didn't need to be, so I opened it up. I suspect that the particular line of code in question was added by way of optimization rather than something needed for correctness, but please run the program attached to the referenced bug (JDK-8112383) using the instructions in JDK-8112072, in addition to verifying the performance implications of removing the optimization.
;;;","2021-09-23 23:03;rlichten;I can confirm that the fix proposed in https://github.com/openjdk/jfx/pull/629 will not change the behaviour with regards to the issues you named above. The list will remain scrolled to the right as long as long items exist and the list view does not ""go white"".
I had to adapt the ScrollableListBroken example in JDK-8112383 a little to make it compileable.
;;;","2021-10-13 05:53;roboduke;Changeset: b591912c
Author:    Robert Lichtenberger <rlichten@openjdk.org>
Committer: Kevin Rushforth <kcr@openjdk.org>
Date:      2021-10-13 12:52:29 +0000
URL:       https://git.openjdk.java.net/jfx/commit/b591912c749edef1e6c1b8509a8ea10e9fe9000f
;;;","2022-04-30 11:49;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jfx17u/pull/49
Date: 2022-04-30 18:44:09 +0000;;;",,,,,,,,,,,,,,,,,
-XX:+ExitOnOutOfMemoryError calls exit while threads are running,JDK-8274136,5059026,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,dholmes,stefank,stefank,2021-09-22 04:44,2021-10-04 13:41,2023-10-01 09:57,2021-09-28 16:27,18,,,,,,,18,hotspot,,0,,,,,,,,,,,,,,,,,,,,,,"In JDK-8274072 we found that JDWP forcefully calls exit, which will run the destructors of global variables. This is problematic because other threads, like the GC threads, could still be using those objects.

We have a similar problem with -XX:+ExitOnOutOfMemoryError. It calls os::exit(), and causes the same problem.

I can reproduce this issue by adding this patch:
---
$ git diff
diff --git a/src/hotspot/share/gc/shared/gcTimer.cpp b/src/hotspot/share/gc/shared/gcTimer.cpp
index ca835e30ed3..150e03be0af 100644
--- a/src/hotspot/share/gc/shared/gcTimer.cpp
+++ b/src/hotspot/share/gc/shared/gcTimer.cpp
@@ -117,9 +117,16 @@ TimePartitions::TimePartitions() {
   clear();
 }
 
+#include ""runtime/os.hpp""
+#include ""runtime/globals.hpp""
 TimePartitions::~TimePartitions() {
   delete _phases;
   _phases = NULL;
+  if (UseNewCode) {
+  fprintf(stderr, ""~TimePartitions sleep\n"");
+  os::naked_short_sleep(999);
+  fprintf(stderr, ""~TimePartitions sleep done\n"");
+  }
 }
 
 void TimePartitions::clear() {
---

and then running, say, SPECjbb2005:
java -XX:+UseZGC -XX:+UseNewCode -Xlog:gc -Xmx32m -Xms32m -XX:+ExitOnOutOfMemoryError -cp jbb.jar:check.jar spec.jbb.JBBmain

which results in:
Terminating due to java.lang.OutOfMemoryError: Java heap space
~TimePartitions sleep
...
# A fatal error has been detected by the Java Runtime Environment:
...
# V  [libjvm.so+0xd06b08]  GCTimer::register_gc_start(TimeInstant<CompositeCounterRepresentation, CompositeElapsedCounterSource> const&)+0x8
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8274072,,,,,JDK-8138745,,,,,,,,,,,,,,,,,,,,,,,,"0|i2ufc3:",9223372036854775807,b17,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,,,"2021-09-22 18:00;dholmes;Given we have both ExitOnOutOfMemoryError and CrashOnOutOfMemoryError, it does seem like ExitOnOutOfMemoryError should be performing a more controlled/orderly ""exit"". The question is: should that be an actual orderly VM shutdown that runs Java exit hooks etc? Or should it just be a close as possible to an abort with no coredump? Presently it is the latter but not as close as it could be if we used _exit() instead of exit() - avoiding the running of at_exit handlers and global destructors.;;;","2021-09-22 18:04;dholmes;Also note that while running at_exit handlers etc may be a problem for the VM, it is possible that applications using this flag actually install their own at_exit handlers and expect them to run in this case.;;;","2021-09-22 21:48;dholmes;From reading this:

https://github.com/eclipse-openj9/openj9/issues/8552

it appears that OpenJ9 actually does an orderly shutdown in response to ExitOnOutOfMemoryError.;;;","2021-09-22 22:38;dholmes;I went back through JDK-8138745 (which introduced these flags) to try and get a sense of expectations. The primary motivation was to make it easier to do ""--XX:OnOutOfMemoryError=`kill -9 %p`"" (which is problematic due to quoting issues when passed through various init files and scripts), which suggests an expectation of immediate termination with no cleanup. The actual API provided ExitOn... and CrashOn... because that is what Jrockit had provided (and the documention there doesn't clearly set expectations either). I can't find any bug reports that might expose any specific expectations, nor does an internet search provide any insight.

Based on the above I will create a PR to call _exit() instead and we shall see if anyone else has specific expectations here.

Actually arranging the call to _exit() is itself not so simple due to the plethora of existing termination methods: os::exit(), os::abort() and os::die() - none of which are exactly what we want on all platforms. os::die() is exactly what we want for Windows, but not Posix (which calls ::abort and core dumps). So we need to flag yet-another-special-case - probably in os::die().

Aside: another oddity/inconsistency in all this is that os::abort() calls os::shutdown() while os::exit() does not.;;;","2021-09-23 16:12;dholmes;I decided for simplicity and clarity to just add os::_exit() to call _exit().;;;","2021-09-28 11:18;mseledtsov;ILW = MLM = P4;;;","2021-09-28 16:27;roboduke;Changeset: 2657bcbd
Author:    David Holmes <dholmes@openjdk.org>
Date:      2021-09-28 23:24:23 +0000
URL:       https://git.openjdk.java.net/jdk/commit/2657bcbd9965d8af83f4063e3602c409735493d1
;;;",,,,,,,,,,,,,,,,,,,
[lworld] [aarch64] ClassInitializationFailuresTest.java stop: klass not initialized,JDK-8274131,5059018,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,ngasson,dsimms,dsimms,2021-09-22 03:00,2021-10-14 02:10,2023-10-01 09:57,2021-10-14 02:10,repo-valhalla,,,,,,,repo-valhalla,hotspot,,0,lw3,lworld,,,,,,,,,,,,,,,,,,,,"runtime/valhalla/inlinetypes/ClassInitializationFailuresTest.java

#
# A fatal error has been detected by the Java Runtime Environment:
#
#  Internal Error (0xe0000000), pid=983159, tid=986980
#  stop: klass not initialized
#
# JRE version: Java(TM) SE Runtime Environment (18.0) (fastdebug build 18-lworld3ea+0-2021-09-22-0751054.david.simms.valhalla)
# Java VM: Java HotSpot(TM) 64-Bit Server VM (fastdebug 18-lworld3ea+0-2021-09-22-0751054.david.simms.valhalla, mixed mode, tiered, compressed oops, compressed class ptrs, g1 gc, linux-aarch64)
# Problematic frame:
# j  runtime.valhalla.inlinetypes.ClassInitializationFailuresTest.testEscapedValueInObject()V+36

Current thread (0x0000fffe44802780):  JavaThread ""AgentVMThread"" [_thread_in_Java, id=986980, stack(0x0000fffdfe400000,0x0000fffdfe600000)]

Stack: [0x0000fffdfe400000,0x0000fffdfe600000],  sp=0x0000fffdfe5fd980,  free space=2038k
Native frames: (J=compiled Java code, j=interpreted, Vv=VM code, C=native code)
j  runtime.valhalla.inlinetypes.ClassInitializationFailuresTest.testEscapedValueInObject()V+36
j  runtime.valhalla.inlinetypes.ClassInitializationFailuresTest.main([Ljava/lang/String;)V+9
v  ~StubRoutines::call_stub
V  [libjvm.so+0xe30b48]  JavaCalls::call_helper(JavaValue*, methodHandle const&, JavaCallArguments*, JavaThread*)+0x428
V  [libjvm.so+0x15b1b44]  invoke(InstanceKlass*, methodHandle const&, Handle, bool, objArrayHandle, BasicType, objArrayHandle, bool, JavaThread*) [clone .constprop.0]+0x11e4
V  [libjvm.so+0x15b261c]  Reflection::invoke_method(oop, Handle, objArrayHandle, JavaThread*)+0x24c
V  [libjvm.so+0xfa5d78]  JVM_InvokeMethod+0x208
j  jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Ljava/lang/reflect/Method;Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/Object;+0 java.base@18-lworld3ea
j  jdk.internal.reflect.NativeMethodAccessorImpl.invoke(Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/Object;+133 java.base@18-lworld3ea
j  jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/Object;+6 java.base@18-lworld3ea
j  java.lang.reflect.Method.invoke(Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/Object;+59 java.base@18-lworld3ea
j  com.sun.javatest.regtest.agent.MainActionHelper$AgentVMRunnable.run()V+10
j  java.lang.Thread.run()V+11 java.base@18-lworld3ea
v  ~StubRoutines::call_stub
V  [libjvm.so+0xe30b48]  JavaCalls::call_helper(JavaValue*, methodHandle const&, JavaCallArguments*, JavaThread*)+0x428
V  [libjvm.so+0xe316dc]  JavaCalls::call_virtual(JavaValue*, Klass*, Symbol*, Symbol*, JavaCallArguments*, JavaThread*)+0x3e8
V  [libjvm.so+0xe31a60]  JavaCalls::call_virtual(JavaValue*, Handle, Klass*, Symbol*, Symbol*, JavaThread*)+0x70
V  [libjvm.so+0xf943c8]  thread_entry(JavaThread*, JavaThread*)+0x118
V  [libjvm.so+0x178ed54]  JavaThread::thread_main_inner()+0x284
V  [libjvm.so+0x179520c]  Thread::call_run()+0xf8
V  [libjvm.so+0x149ac94]  thread_native_entry(Thread*)+0x104
C  [libpthread.so.0+0x7738]  start_thread+0x198


aarch64 specific (both Linux and Mac)",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,aarch64,,,,,,,,,,,,,,"0|i2ufab:",9223372036854775807,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,,,"2021-10-13 01:40;ngasson;This test was added in JDK-8273650 which also removed the ""klass not initialized"" check on x86. The same change needs to be made on AArch64 as well.;;;",,,,,,,,,,,,,,,,,,,,,,,,,
C2: MulNode::Ideal chained transformations may act on wrong nodes,JDK-8274130,5059017,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,shade,shade,shade,2021-09-22 02:53,2022-12-16 01:55,2023-10-01 09:57,2021-09-28 22:43,17,18,,,,,,18,hotspot,,0,c2,hs-comp-triaged,jdk17u-fix-request,jdk17u-fix-yes,oracle-triage-11,oracle-triage-17,oracle-triage-18,redhat-interest,,,,,,,,,,,,,,"I was puzzled by it when fixing JDK-8274060. It looks that new optimizations added by JDK-8273454 and JDK-8263006 rewire in(1) and in(2) in MulNode::Ideal, which means the chained transformations should see them? Yet, both inputs and their Type-s are cached locally and not refreshed. I have not seen failures due to this yet, but it looks that the current code is subtly incorrect because of this.",,,,,,,,,,,JDK-8279373,JDK-8298922,,,,,,,,,,,,,,,,,,,,,,,JDK-8263006,JDK-8273454,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2ufa3:",9223372036854775807,b17,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2021-09-22 05:17;chagedorn;ILW = Potential wrong execution, never observed, no workaround = MLH = P4;;;","2021-09-28 22:43;roboduke;Changeset: 756d22c3
Author:    Aleksey Shipilev <shade@openjdk.org>
Date:      2021-09-29 05:41:34 +0000
URL:       https://git.openjdk.java.net/jdk/commit/756d22c3563ac92e74bb68d5eecb86d4fbab2c6b
;;;","2021-12-21 11:39;roboduke;A pull request was submitted for review.

URL: https://git.openjdk.java.net/jdk17u-dev/pull/25
Date: 2021-12-21 19:23:04 +0000
;;;","2021-12-21 23:06;shade;Fix Request (17u)

Fixes a potential C2 bug introduced in 17. Does not apply cleanly, because some transformations are not present in 17. RFR acked by kvn. tier{1,2,3} passes.;;;",,,,,,,,,,,,,,,,,,,,,,
Cherry pick GTK WebKit 2.32.4 changes,JDK-8274107,5058985,Bug,Resolved,JDK,JDK,software,duke,,,P2,Fixed,arapte,kcr,kcr,2021-09-21 13:55,2021-10-05 02:29,2023-10-01 09:57,2021-09-24 08:26,8u311,jfx18,,,,,,jfx18,javafx,,0,CPU21_10-critical-approved,CPU21_10-critical-SQE-OK,sn_102,webkit-2.32,,,,,,,,,,,,,,,,,,https://webkitgtk.org/2021/09/17/webkitgtk2.32.4-released.html,,,,,,,,,,,JDK-8274348,JDK-8274302,JDK-8274384,JDK-8274385,,,,,,,,,,,,,,,,,,,,,JDK-8268849,JDK-8272329,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2uf2z:",9223372036854775807,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@5a8b92bd,,,,,,,,,"2021-09-24 08:26;roboduke;Changeset: 478512b7
Author:    Ambarish Rapte <arapte@openjdk.org>
Date:      2021-09-24 15:24:18 +0000
URL:       https://git.openjdk.java.net/jfx/commit/478512b705af840cd9f658b22f272165bc1c1bc3
;;;",,,,,,,,,,,,,,,,,,,,,,,,,
Windows DLL path not set correctly.,JDK-8274087,5058959,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,herrick,herrick,herrick,2021-09-21 08:33,2021-09-29 17:15,2023-10-01 09:57,2021-09-24 05:45,17,18,,,,,,18,tools,,0,jdk17u-fix-request,jdk17u-fix-SQE-ok-next,jdk17u-fix-yes,sn_102,,,,,,,,,,,,,,,,,,"Windows native code in java in several places assumes the runtime bin directory is in the DLL path by loading dll's without full path.
One example of this is zip.dll, src/java.base/share/native/libjimage/imageDecompressor.cpp where LoadLibrary(""zip.dll""); is called (no full path to dll used).  There are other instances of this.

In jpackage we work around this by calling SetDllDirectory(runtimeBinPath.c_str());
in WinLauncher.cpp, but the runtimeBinPath used is based on the default runtime location, instead of the actual runtime location.

As a result, if runtime is moved, custom splash screen will fail to load.
Also using https connection may result in:
 Exception in thread ""Reader-BG-1"" java.lang.InternalError: platform 
encoding not initialized

",,,,,,,,,,,JDK-8274290,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"2021-09-21 15:59;swpalmer;FetchURL.zip;https://bugs.openjdk.org/secure/attachment/96535/FetchURL.zip",,,,,,,,,,,,,,windows,,,,,"0|i2uex7:",9223372036854775807,b17,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@3656b41f,,,,,,,,,"2021-09-21 08:40;kcr;This seems a good candidate to consider for a backport to jdk17u for 17.0.2.;;;","2021-09-21 16:03;swpalmer;Uploaded example project FetchURL.zip that results in ""java.lang.InternalError: platform encoding not initialized"" when the runtime folder isn't the default.
(may need to tweak the toolchain in the build.gradle file to remove the vendor spec);;;","2021-09-24 05:45;roboduke;Changeset: f36a2bbd
Author:    Andy Herrick <herrick@openjdk.org>
Date:      2021-09-24 12:43:25 +0000
URL:       https://git.openjdk.java.net/jdk/commit/f36a2bbd15d94d4371c2117ce08b7f04a0d59da4
;;;",,,,,,,,,,,,,,,,,,,,,,,
Fix miscellaneous typos in java.base,JDK-8274075,5058943,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,prappo,prappo,prappo,2021-09-21 05:23,2021-09-29 17:14,2023-10-01 09:57,2021-09-23 01:09,18,,,,,,,18,core-libs,,0,noreg-doc,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2uetn:",9223372036854775807,b17,,,,,,,,,,,,"2021-09-23 01:09;roboduke;Changeset: 87998565
Author:    Pavel Rappo <prappo@openjdk.org>
Date:      2021-09-23 08:08:39 +0000
URL:       https://git.openjdk.java.net/jdk/commit/8799856528f5804b616b734caed3fc4ba9811bfa
;;;",,,,,,,,,,,,,,,,,,,,,,,,,
SIGFPE with C2 compiled code with -XX:+StressGCM,JDK-8274074,5058941,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,chagedorn,chagedorn,chagedorn,2021-09-21 05:03,2022-06-07 00:38,2023-10-01 09:57,2021-09-27 07:06,17,18,,,,,,18,hotspot,,0,c2,hs-comp-triaged,javafuzzer,jdk17u-fix-request,jdk17u-fix-yes,oracle-triage-11,oracle-triage-17,oracle-triage-18,redhat-interest,,,,,,,,,,,,,"The attached JavaFuzzer test crashes with SIGFPE after JDK-8252372:

To reproduce:
$ java -Xcomp -XX:CompileOnly=Test -XX:-TieredCompilation -XX:+StressGCM -XX:StressSeed=307976640 Test.java
$ java -Xcomp -XX:CompileOnly=Reduced -XX:-TieredCompilation -XX:+StressGCM -XX:StressSeed=4177789702 Reduced.java

#
# A fatal error has been detected by the Java Runtime Environment:
#
#  SIGFPE (0x8) at pc=0x00007fa8017d7912, pid=20735, tid=20736
#
# JRE version: Java(TM) SE Runtime Environment (17.0+35) (fastdebug build 17+35-LTS-2724)
# Java VM: Java HotSpot(TM) 64-Bit Server VM (fastdebug 17+35-LTS-2724, compiled mode, sharing, compressed oops, compressed class ptrs, g1 gc, linux-amd64)
# Problematic frame:
# J 3 c2 Test.mainTest([Ljava/lang/String;)V (838 bytes) @ 0x00007fa8017d7912 [0x00007fa8017d7620+0x00000000000002f2]
.............
Command Line: -Xmx1G -Xcomp -Xbatch -XX:CompileOnly=Test -XX:CompileCommand=quiet -XX:-TieredCompilation -XX:+IgnoreUnrecognizedVMOptions -XX:+UnlockDiagnosticVMOptions -XX:+StressLCM -XX:+StressGCM -XX:+StressIGVN -XX:StressSeed=307976640 Test
.............
Current thread (0x00007fa80c028b10):  JavaThread ""main"" [_thread_in_Java, id=20736, stack(0x00007fa815b1b000,0x00007fa815c1c000)]

Stack: [0x00007fa815b1b000,0x00007fa815c1c000],  sp=0x00007fa815c1a8f0,  free space=1022k
Native frames: (J=compiled Java code, j=interpreted, Vv=VM code, C=native code)
J 3 c2 Test.mainTest([Ljava/lang/String;)V (838 bytes) @ 0x00007fa8017d7912 [0x00007fa8017d7620+0x00000000000002f2]
J 2 c2 Test.main([Ljava/lang/String;)V (45 bytes) @ 0x00007fa8017d9598 [0x00007fa8017d93a0+0x00000000000001f8]
v  ~StubRoutines::call_stub
V  [libjvm.so+0xe95914]  JavaCalls::call_helper(JavaValue*, methodHandle const&, JavaCallArguments*, JavaThread*)+0x504
V  [libjvm.so+0xfd1035]  jni_invoke_static(JNIEnv_*, JavaValue*, _jobject*, JNICallType, _jmethodID*, JNI_ArgumentPusher*, JavaThread*) [clone .constprop.1]+0x375
V  [libjvm.so+0xfd4675]  jni_CallStaticVoidMethod+0x1c5
C  [libjli.so+0x47e7]  JavaMain+0xd37
C  [libjli.so+0x7d19]  ThreadJavaMain+0x9",,,,,,,,,,,JDK-8275029,,,,,,,,,,,,,,,,,,,,,,,,JDK-8252372,JDK-8274406,JDK-8286305,,,,,,,,"2021-09-21 05:06;chagedorn;FuzzerUtils.java;https://bugs.openjdk.org/secure/attachment/96500/FuzzerUtils.java","2021-09-21 05:06;chagedorn;Reduced.java;https://bugs.openjdk.org/secure/attachment/96499/Reduced.java","2021-09-21 05:06;chagedorn;Test.java;https://bugs.openjdk.org/secure/attachment/96498/Test.java","2021-09-21 05:06;chagedorn;hs_err_pid20735.log;https://bugs.openjdk.org/secure/attachment/96497/hs_err_pid20735.log",,,,,,,,b24,17,,,,,,,"0|i2uet7:",9223372036854775807,b17,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2021-09-21 05:05;chagedorn;ILW = SIGFPE crash in C2 compiled code, only single JavaFuzzer test, use -XX:-SplitIfBlocks or disable compilation of affected method = HLM = P3;;;","2021-09-27 07:06;roboduke;Changeset: b0983df5
Author:    Christian Hagedorn <chagedorn@openjdk.org>
Date:      2021-09-27 14:05:51 +0000
URL:       https://git.openjdk.java.net/jdk/commit/b0983df5a404adb2f547d714d0fd19a090d1b3d3
;;;","2021-09-28 00:00;thartmann;Fix request (17u):
The bug leads to SIGFPE during execution of C2 compiled code (regression in JDK 17). The fix is low risk and has been tested in the JDK 18 for a while and with tier1-3 in JDK 17u. The patch applies cleanly.;;;","2021-09-28 23:23;thartmann;Putting the backport to JDK 17 on hold because a regression (JDK-8274406) showed up.;;;",,,,,,,,,,,,,,,,,,,,,,
Clean up java.lang.ref comments and documentation,JDK-8274071,5058938,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,prappo,prappo,prappo,2021-09-21 04:33,2021-09-28 07:13,2023-10-01 09:57,2021-09-22 06:42,18,,,,,,,18,core-libs,,0,noreg-doc,,,,,,,,,,,,,,,,,,,,,"There's one typo in an inline comment and overlinking in a doc comment. See the linked PR for details.

From ""How to Write Doc Comments for the Javadoc Tool"":
""""""
Use in-line links economically
You are encouraged to add links for API names (listed immediately above) using the {@link} tag. It is not necessary to add links for all API names in a doc comment. Because links call attention to themselves (by their color and underline in HTML, and by their length in source code doc comments), it can make the comments more difficult to read if used profusely. We therefore recommend adding a link to an API name if:

The user might actually want to click on it for more information (in your judgment), and
Only for the first occurrence of each API name in the doc comment (don't bother repeating a link)
Our audience is advanced (not novice) programmers, so it is generally not necessary to link to API in the java.lang package (such as String), or other API you feel would be well-known.""""""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2uesj:",9223372036854775807,b16,,,,,,,,,,,,"2021-09-22 06:42;roboduke;Changeset: c6df3c95
Author:    Pavel Rappo <prappo@openjdk.org>
Date:      2021-09-22 13:42:23 +0000
URL:       https://git.openjdk.java.net/jdk/commit/c6df3c9571cfa9607f3deffeaa77701dde9fea15
;;;",,,,,,,,,,,,,,,,,,,,,,,,,
Rectify problemlist platform for failing test on macos12,JDK-8274070,5058937,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,psadhukhan,psadhukhan,psadhukhan,2021-09-21 04:31,2021-09-28 07:13,2023-10-01 09:57,2021-09-22 01:03,,,,,,,,18,client-libs,,0,,,,,,,,,,,,,,,,,,,,,,"It was mentioned in JDK-8273618

java/awt/FullScreen/DisplayChangeVITest/DisplayChangeVITest.java is timing out on a macOS 12 aarch64 (an Apple Silicon Mac Mini) system.
I'm not seeing the same on x64.

but it is problemlisted for macos-all..It should be problemlisted only for macos-aarch64.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2uesb:",9223372036854775807,b16,,,,,,,,,,,,"2021-09-22 01:03;roboduke;Changeset: 688b3fe2
Author:    Prasanta Sadhukhan <psadhukhan@openjdk.org>
Date:      2021-09-22 08:02:13 +0000
URL:       https://git.openjdk.java.net/jdk/commit/688b3fe2eb2593e2cad675fb0f40b8bc6adce22f
;;;",,,,,,,,,,,,,,,,,,,,,,,,,
Tree-/TableRowSkin: misbehavior on switching skin,JDK-8274061,5058931,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,fastegal,fastegal,fastegal,2021-09-21 03:44,2021-12-08 04:01,2023-10-01 09:57,2021-11-25 04:46,jfx17,,,,,,,jfx18,javafx,,0,TableRowSkin,TableRowSkinBase,TreeTableRowSkin,,,,,,,,,,,,,,,,,,,"misbehavior:

memory leak 
- manually registered listener to itemProperty not removed (TableRowSkinBase)
- logic error in add/remove listener to fixedCellSize (Tree/TableRowSkin)

NPE 
- due to access of skinnable after dispose, from listener to visibleLeafColumns and itemProperty (TableRowSkinBase)

The cleanup will
- change listener registration to use skinBase api always (for automatic removal in dispose)
- replace listening to fixedCellSize by looking up the value as needed: this is basically the same as the fix for ListCellSkin JDK-8246745
",,,,,,,,,,,,,,,,,,,,,,,,JDK-8241364,,,,,,,,,,,JDK-8246745,,,,,JDK-8274065,JDK-8277000,,,,,,,,,,,,,,,,,,,,,,,"0|i2ueqz:",9223372036854775807,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@67282485,,,,,,,,,"2021-11-03 07:58;fastegal;stepping back from planned fix strategy: ""replace listening to fixedCellSize by looking up the value as needed""

Doing so introduced the side effect of horizontal scrollbar being incorrectly initialized if tree/table has many columns and fixedCellSize set (then the thumb covers nearly all its width initially, shrinking to its correct size only after scrolling to the end of row). 

The underlying reason for this is, that the cells are (re-)created and updated in the constructor of TableRowSkinBase - at which time isFixedCellSizeEnabled field always is false because it is set in subclasses. For some reason (which I don't fully understand ;) the initial false seems to be required to initialize the scrollbar correctly. That's a bug in itself (because the real state of the table is disrespected), might be part of the horizontal layout problems with fixedCellSize, see JDK-8185887 and related). Will not touch that to keep this issue bounded.

Digging further in the issue here (that is memory leak from listening to changes of fixedCellSize):

- the change listener to fixedCellSizeProperty is fine: registered via skin api and auto-removed on dispose
- culprit is the manually installed invalidation listener to row's tableViewProperty: it is meant  to remove itself after being notified once - which is fine if indeed it _is_ notified .. which doesn't happen for empty cells which never are attached to a tableView (don't know how that might happen)

The revised fix for fixedCellSize is:

- register the invalidation listener to tableViewProperty via skin api
- let it register the change listener to fixedCellSizeProperty only on its first run, do nothing after the first run

Note: this part of the fixed needs to be revisited:

- after/when fixing JDK-8274065 (complete support change of tableView)
- after/when fixing the row layout/performance problems with fixedCellSize
;;;","2021-11-25 04:46;roboduke;Changeset: d14be6a8
Author:    Jeanette Winzenburg <fastegal@openjdk.org>
Date:      2021-11-25 12:45:33 +0000
URL:       https://git.openjdk.java.net/jfx/commit/d14be6a811591df70ef99fd6ec5448423be6fb7d
;;;",,,,,,,,,,,,,,,,,,,,,,,,
C2: Incorrect computation after JDK-8273454,JDK-8274060,5058930,Bug,Closed,JDK,JDK,software,duke,,,P1,Fixed,shade,shade,shade,2021-09-21 03:13,2022-02-03 05:56,2023-10-01 09:57,2021-09-22 01:42,18,,,,,,,18,hotspot,,0,c2,hs-comp-triaged,javafuzzer,oracle-triage-11,oracle-triage-17,oracle-triage-18,redhat-interest,regression,,,,,,,,,,,,,,"Attached Fuzzer test caught a serious regression after JDK-8273454. Note how the result is different in C2:

$ ~/trunks/jdk/build/linux-x86_64-server-fastdebug/images/jdk/bin/java -Xint Test | grep Test.instanceCount | uniq
Test.instanceCount Test.iFld Test.byFld = -2635249129509180159,2,0

 ~/trunks/jdk/build/linux-x86_64-server-fastdebug/images/jdk/bin/java -XX:TieredStopAtLevel=1 Test | grep Test.instanceCount | uniq
Test.instanceCount Test.iFld Test.byFld = -2635249129509180159,2,0

$ ~/trunks/jdk/build/linux-x86_64-server-fastdebug/images/jdk/bin/java -XX:-TieredCompilation Test | grep Test.instanceCount | uniq
Test.instanceCount Test.iFld Test.byFld = 2635249177264977449,2,0


Minimized test case:

public class Test {
    public static int f;

    public static void main(String... strArr) {
        for (int c = 0; c < 2; c++) {
            f += c;
            f *= -1;
        }
        f &= f;
        System.out.println(""final = "" + f);
    }
}

$ ~/trunks/jdk/build/linux-x86_64-server-fastdebug/images/jdk/bin/java -Xint Test
final = -1

$ ~/trunks/jdk/build/linux-x86_64-server-fastdebug/images/jdk/bin/java -Xcomp -XX:-TieredCompilation Test
final = 1

I suspect the trouble is here:

Node *AndINode::Ideal(PhaseGVN *phase, bool can_reshape) {
  // Special case constant AND mask
  const TypeInt *t2 = phase->type( in(2) )->isa_int();
  if( !t2 || !t2->is_con() ) return MulNode::Ideal(phase, can_reshape); // <--- calls new code through here

So while ((-x) * (-y)) == (x * y) is always true indeed, ((-x) & (-y)) == (x & y) is not!",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8273454,,,,,,,,,,"2021-09-21 03:13;shade;070840.tar.gz;https://bugs.openjdk.org/secure/attachment/96491/070840.tar.gz",,,,,,,,,,,,,,,,,,,"0|i2ueqr:",9223372036854775807,b16,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,Verified,,"2021-09-21 06:45;chagedorn;ILW = Incorrect result for C2 compiled code (recent regression), medium?, no workaround = HMH = P1;;;","2021-09-22 01:42;roboduke;Changeset: c77ebe88
Author:    Aleksey Shipilev <shade@openjdk.org>
Date:      2021-09-22 08:40:04 +0000
URL:       https://git.openjdk.java.net/jdk/commit/c77ebe88748b0a55f1fc7a5497314a752eab1e2a
;;;",,,,,,,,,,,,,,,,,,,,,,,,
JavaAccessibilityUtilities leaks JNI objects,JDK-8274056,5058928,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,asemenov,ant,ant,2021-09-21 02:43,2021-10-19 03:50,2023-10-01 09:57,2021-09-21 05:41,17,,,,,,,18,client-libs,,0,azul-interest,jdk11u-fix-request,jdk11u-fix-yes,jdk13u-fix-request,jdk13u-fix-yes,jdk15u-fix-request,jdk15u-fix-yes,jdk17u-fix-request,jdk17u-fix-SQE-ok-next,jdk17u-fix-yes,jnf,macos,,,,,,,,,,"The following methods in JavaAccessibilityUtilities leak JNI objects got from up-calls to Java:
- getAxComponentSize
- getJavaRole

Also, getAxComponentSize calls jm_getSize on wrong class.",,,,,,,,,,,JDK-8274502,JDK-8274503,JDK-8275502,JDK-8274231,JDK-8274382,JDK-8274500,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,os_x,,,,,"0|i2ueqb:",9223372036854775807,b16,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4785f47c,,,,,,,,,"2021-09-21 05:41;roboduke;Changeset: 42d5d2ab
Author:    Artem Semenov <Artem.Semenov@jetbrains.com>
Committer: Anton Tarasov <ant@openjdk.org>
Date:      2021-09-21 12:38:29 +0000
URL:       https://git.openjdk.java.net/jdk/commit/42d5d2abaad8a88a5e1326ea8b4494aeb8b5748b
;;;","2021-09-22 16:41;prr;The ""leaks"" look long standing but the wrong name is from JDK-8257853;;;","2021-09-22 16:52;prr;Fix request (17u) 
This fix is for a regression in JDK 17. 
The leaks are not the issue, it is just about the wrong class name in a JNI up-call.
This is specific to macOS client code and is low risk.
The JDK 18 patch applied cleanly (and clean in the skara sense too) to 17u
PR is here : https://github.com/openjdk/jdk17u/pull/83;;;","2021-09-28 05:03;mdoerr;Fix Request (11u):
Should get backported for parity with 11.0.14-oracle. Applies cleanly.;;;","2021-09-29 03:11;vkempik;Fix Request (15u):
Should get backported for parity with 11. Applies cleanly.
;;;","2021-09-29 03:11;vkempik;Fix Request (13u):
Should get backported for parity with 11. Applies cleanly.
;;;",,,,,,,,,,,,,,,,,,,,
[BACKOUT] JDK-8270842: G1: Only young regions need to redirty outside references in remset.,JDK-8274053,5058924,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,tschatzl,tschatzl,tschatzl,2021-09-21 01:50,2021-11-15 02:29,2023-10-01 09:57,2021-09-21 02:23,18,,,,,,,18,hotspot,,0,gc-g1,gc-performance,,,,,,,,,,,,,,,,,,,,"Back-out JDK-8270842 because during implementation of JDK-8271880 this issue has been found buggy. See PR#5037 for the history.

A better implementation (splitting up JDK-8271880 a bit) will be provided soon.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8273304,,,,,JDK-8270842,,,,,JDK-8274054,,,,,,,,,,,,,,,,,,,,,,,,"0|i2uepf:",9223372036854775807,b16,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6b00f96c,,,,,,,,,"2021-09-21 02:22;roboduke;Changeset: afd218d3
Author:    Thomas Schatzl <tschatzl@openjdk.org>
Date:      2021-09-21 09:20:21 +0000
URL:       https://git.openjdk.java.net/jdk/commit/afd218d39a3125fcea50968edef6e6cfbacfff50
;;;",,,,,,,,,,,,,,,,,,,,,,,,,
codestrings gtest fails when hsdis is present,JDK-8274039,5058908,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,phedlin,shade,shade,2021-09-20 23:08,2021-09-28 07:13,2023-10-01 09:57,2021-09-22 07:20,18,,,,,,,18,hotspot,,0,testbug,,,,,,,,,,,,,,,,,,,,,"This seems to happen starting from the initial integration of JDK-8264207. I believe I only see it on my desktop, because there hsdis is in /usr/lib, and so the hotspot disassembler is enabled for all VMs, including the test one. If I remove that system-wide hsdis, the test starts to pass.

Actually, I think the test path in disasm_string_check is not taken for a default system installation, as no hsdis is present in test JDK.

$ CONF=linux-x86_64-server-fastdebug make run-test TEST=gtest:codestrings
Building target 'run-test' in configuration 'linux-x86_64-server-fastdebug'
Updating hotspot/variant-server/libjvm/gtest/libjvm.so due to 1 file(s)
Test selection 'gtest:codestrings', will run:
* gtest:codestrings/server

Running test 'gtest:codestrings/server'
Note: Google Test filter = codestrings*
[==========] Running 1 test from 1 test case.
[----------] Global test environment set-up.
[----------] 1 test from codestrings
[ RUN      ] codestrings.validate_vm
/home/shade/trunks/jdk/test/hotspot/gtest/code/test_codestrings.cpp:81: Failure
Expected equality of these values:
  replace_addr_expr(out1.as_string())
    Which is: ""--------------------------------------------------------------------------------\n ;; First block comment.\n  <addr>:   nop\n--------------------------------------------------------------------------------\n""
  replace_addr_expr(out2.as_string())
    Which is: ""--------------------------------------------------------------------------------\n ;; First block comment.\n  <addr>:   nop\n  <addr>:   hlt    \n  <addr>:   hlt    \n  <addr>:   hlt    \n  <addr>:   hlt    \n  <addr>:   hlt    \n  <addr>:   hlt    \n  <addr>:   hlt    \n--------------------------------------------------------------------------------\n""
With diff:
@@ +2,10 @@
  ;; First block comment.
   <addr>:   nop
+  <addr>:   hlt    
+  <addr>:   hlt    
+  <addr>:   hlt    
+  <addr>:   hlt    
+  <addr>:   hlt    
+  <addr>:   hlt    
+  <addr>:   hlt    
 --------------------------------------------------------------------------------\n
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8264207,,,,,,,,,,x86_64,,,,,,,,,,,,,,"0|i2uelv:",9223372036854775807,b16,,,,,,,,,,,,"2021-09-21 03:48;phedlin;Padding (removal) expression not updated for x64.;;;","2021-09-22 07:20;roboduke;Changeset: c9de8063
Author:    Patric Hedlin <phedlin@openjdk.org>
Date:      2021-09-22 14:20:17 +0000
URL:       https://git.openjdk.java.net/jdk/commit/c9de80635e25badbb5410e22b6619379598a9a57
;;;",,,,,,,,,,,,,,,,,,,,,,,,
Some tier-4 CDS EpsilonGC tests throw OOM,JDK-8274033,5058901,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,iklam,dcubed,dcubed,2021-09-20 19:56,2021-09-29 17:06,2023-10-01 09:57,2021-09-22 20:51,18,,,,,,,18,hotspot,,0,cds,gc-epsilon,tier4,,,,,,,,,,,,,,,,,,,"The following two tests failed in the JDK18 CI:

runtime/cds/appcds/methodHandles/MethodHandlesSpreadArgumentsTest.java
runtime/cds/appcds/methodHandles/MethodHandlesAsCollectorTest.java

Here's a snippet from the MethodHandlesSpreadArgumentsTest.java
log file:

----------System.err:(76/5001)----------
 stdout: [[0.016s][warning][gc,init] Consider setting -Xms equal to -Xmx to avoid resizing hiccups
[0.016s][warning][gc,init] Consider enabling -XX:+AlwaysPreTouch to avoid memory commit hiccups
class test.java.lang.invoke.MethodHandlesSpreadArgumentsTest
     annotation: @org.junit.Test(timeout=0L, expected=org.junit.Test$None.class)
    invoking method: testSpreadArguments
Terminating due to java.lang.OutOfMemoryError: Java heap space
];
 stderr: []
 exitValue = 3


Here's a snippet from the MethodHandlesAsCollectorTest.java
log file:

----------System.err:(76/4973)----------
 stdout: [[0.019s][warning][gc,init] Consider setting -Xms equal to -Xmx to avoid resizing hiccups
[0.019s][warning][gc,init] Consider enabling -XX:+AlwaysPreTouch to avoid memory commit hiccups
class test.java.lang.invoke.MethodHandlesAsCollectorTest
     annotation: @org.junit.Test(timeout=0L, expected=org.junit.Test$None.class)
    invoking method: testAsCollector
Terminating due to java.lang.OutOfMemoryError: Java heap space
];
 stderr: []
 exitValue = 3",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8270489,JDK-8274166,,,,,,,,,x86_64,,,,,,,,,os_x,,,,,"0|i2uekb:",9223372036854775807,b17,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,,,"2021-09-20 21:38;ccheung;The tests were run with the following VM options:
-Dtest.java.opts=-Dtest.cds.runtime.options=-XX:+UnlockExperimentalVMOptions,-XX:+UseEpsilonGC

Running CDS tests with EpsilonGC was added via JDK-8270489: Support archived heap objects in EpsilonGC
;;;","2021-09-20 21:39;iklam;These tests were executed in Oracle tier-4 with EpsilonGC to test for JDK-8270489 (Support archived heap objects in EpsilonGC). The problem is EpsilonGC doesn't support garbage collection, so the test would run out on memory when running on a host with limited RAM.

To address this, we should limit the testing of CDS+EpsilonGC to a small set of tests that are known to use very small amount of memory.;;;","2021-09-20 21:49;fmatte;Both the failing tests have -XX:+UseEpsilonGC ;;;","2021-09-22 20:51;roboduke;Changeset: 0fbbe4c9
Author:    Ioi Lam <iklam@openjdk.org>
Date:      2021-09-23 03:49:06 +0000
URL:       https://git.openjdk.java.net/jdk/commit/0fbbe4c9a779c24d5502648c866b7f1e1e50acc0
;;;",,,,,,,,,,,,,,,,,,,,,,
Typo in StringBuilder.readObject,JDK-8274031,5058899,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,darcy,darcy,darcy,2021-09-20 18:58,2021-09-28 07:12,2023-10-01 09:57,2021-09-20 19:25,18,,,,,,,18,core-libs,,0,noreg-doc,,,,,,,,,,,,,,,,,,,,,"The javadoc for StringBuilder.readObject uses ""StringBuffer"" where ""StringBuilder"" is meant.

Reported on core-libs:

https://mail.openjdk.java.net/pipermail/core-libs-dev/2021-September/081277.html",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2uejv:",9223372036854775807,b16,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4c088d55,,,,,,,,,"2021-09-20 19:25;roboduke;Changeset: 9c91ff57
Author:    Joe Darcy <darcy@openjdk.org>
Date:      2021-09-21 02:23:52 +0000
URL:       https://git.openjdk.java.net/jdk/commit/9c91ff57e8b4b48e997e0424ff93b29e695ec527
;;;",,,,,,,,,,,,,,,,,,,,,,,,,
Additional Memory Leak in ControlAcceleratorSupport,JDK-8274022,5058751,Bug,Resolved,JDK,JDK,software,duke,,,P2,Fixed,fkirmaier,webbuggrp,webbuggrp,2021-09-16 18:26,2022-03-21 05:37,2023-10-01 09:57,2021-11-15 08:30,8u321,jfx17,jfx18,,,,,jfx18,javafx,,2,11-na,CPU22_01-defer-approved,CPU22_01-defer-SQE-OK,dcspn,regression,regression_8208088,reproducer-yes,webbug,,,,,,,,,,,,,,"ADDITIONAL SYSTEM INFORMATION :
Windows 10 1909 64bit
OpenJDK 17 (build 17+35-2724)

A DESCRIPTION OF THE PROBLEM :
If there are MenuItems in the Stage, after closing the Stage, the MenuItems won't get garbage collected, and thus also leaking its listeners and other related objects. It only happens on JFX 17, on JFX 16 the memory leak won't happen. Might be related with https://github.com/openjdk/jfx/pull/429.

REGRESSION : Last worked in version openjfx16

STEPS TO FOLLOW TO REPRODUCE THE PROBLEM :
Place a MenuItem in a Stage and launch this Stage, then launch a new Stage and close previous Stage, the MenuItem in the previous Stage won't get garbage collected.

EXPECTED VERSUS ACTUAL BEHAVIOR :
EXPECTED -
The MenuItem in the closed Stage get garbage collected.
ACTUAL -
The MenuItem in the closed Stage won't be garbage collected.

---------- BEGIN SOURCE ----------
import javafx.application.Application;
import javafx.geometry.Pos;
import javafx.scene.Scene;
import javafx.scene.control.Button;
import javafx.scene.control.Menu;
import javafx.scene.control.MenuBar;
import javafx.scene.control.MenuItem;
import javafx.scene.layout.StackPane;
import javafx.stage.Stage;
import java.lang.ref.WeakReference;
import java.util.ArrayList;
import java.util.Arrays;

public class JavaApp extends Application {

    private static final ArrayList<WeakReference<MenuItem>> uncollectedMenuItems = new ArrayList<>();

    private static void clearNullMenuItems() {
        uncollectedMenuItems.removeIf(ref -> ref.get() == null);
    }

    private static void launchNewStage(Stage stage) {
        MenuItem menuItem = new MenuItem(""Restart Stage"");
        menuItem.setOnAction(actionEvent -> {
            launchNewStage(new Stage());
            stage.close();
        });
        uncollectedMenuItems.add(new WeakReference<>(menuItem));
        MenuBar menuBar = new MenuBar(new Menu(""MENU"", null, menuItem));
        Button button = new Button(""Call GC and Print MenuItems"");
        button.setOnAction(actionEvent -> {
            System.gc();
            clearNullMenuItems();
            System.out.println(Arrays.toString(uncollectedMenuItems.toArray()));
        });
        StackPane root = new StackPane(menuBar, button);
        StackPane.setAlignment(menuBar, Pos.TOP_CENTER);
        stage.setTitle(""JFX-Test"");
        stage.setMinWidth(400.0);
        stage.setMinHeight(300.0);
        stage.setScene(new Scene(root));
        stage.show();
    }

    @Override
    public void start(Stage primaryStage) {
        launchNewStage(primaryStage);
    }

    public static void main(String[] args) {
        launch();
    }
}
---------- END SOURCE ----------

FREQUENCY : always


",,,,,,,,,,,JDK-8279786,JDK-8277142,,,,,,,,,,,JDK-8244075,,,,,,,JDK-8274023,JDK-8276917,,,,JDK-8283449,,,,,JDK-8208088,,,,,"2021-09-20 11:01;pnarayanaswa;App.java;https://bugs.openjdk.org/secure/attachment/96488/App.java","2021-09-20 11:08;pnarayanaswa;Capture.PNG;https://bugs.openjdk.org/secure/attachment/96489/Capture.PNG",,,,x86_64,,,,,,,jfx17,,windows_10,,,,,"0|i2udmz:",9223372036854775807,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@67282485,,,,,,,,,"2021-09-20 11:01;pnarayanaswa;Checked with attached testcase in Windows 10, Issue is reproducible<attached screenshot for reference> and is regression from openjfx17
Test Result:
=========
8u301: Pass
openjfx11: Pass
openjfx16: Pass
openjfx17: Fail <--Regression
openjfx18: Fail;;;","2021-09-20 11:07;kcr;It's possible that the fix for JDK-8208088 fixed one memory leak, while introducing another.;;;","2021-10-06 08:48;shadzic;Do we have a work-around that can be manually applied somehow to remove the leak?
Edit: it seems that calling ""dispose()"" on the skin manually when the menuButton is not used anymore is working to remove the memory leak.;;;","2021-10-08 04:21;fastegal;hmm .. dispose the skin of which control when? don't see a menuButton, *cough, could you update the example, please.
 ;;;","2021-10-08 06:31;shadzic;I have the issue with MenuButtons whereas the issue here is raised on MenuBar. 
Calling ""dispose()"" on the MenuButtonSkin seems to be working but I have not tested it specifically on MenuBar.;;;","2021-10-16 06:07;fkirmaier;I've seen it quite often since the latest version - so this is probably quite common.;;;","2021-10-30 05:10;kcr;Based on the comments in the PR about how frequently this is encountered, the fact that there is no known application level workaround, and given that it is a regression introduced in JavaFX 17, I am raising the priority to P2. This would be a good candidate for a backport to a JavaFX 17 update release.;;;","2021-11-15 08:30;roboduke;Changeset: 0d5b8f8b
Author:    Florian Kirmaier <fkirmaier@openjdk.org>
Committer: Kevin Rushforth <kcr@openjdk.org>
Date:      2021-11-15 16:28:40 +0000
URL:       https://git.openjdk.java.net/jfx/commit/0d5b8f8b3f71b1301a65adcc41fe0c7308d4ff01
;;;",,,,,,,,,,,,,,,,,,
[REDO] VM Exit does not abort concurrent mark,JDK-8274007,5058868,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,tschatzl,tschatzl,tschatzl,2021-09-20 09:18,2022-09-06 06:15,2023-10-01 09:57,2022-01-13 00:43,18,,,,,,,18,hotspot,,0,gc-g1,gc-pending-review,gc-performance,,,,,,,,,,,,,,,,,,,"JDK-8273605 introduced some change to early abort concurrent operation when the VM is about to exit. However this caused fairly frequent crashes in JDK-8273940 that were traced back to JDK-8273605. JDK-8273940 reverted that change.

The task is to try again implementing concurrent mark abort at exit as indicated by JDK-8273605.",,,,,,,,,,,JDK-8280633,JDK-8280309,,,,,,,,,,,,,,,,,,,,,,,JDK-8273605,JDK-8291725,,,,JDK-8273940,JDK-8293431,,,,,,,,,,,,,,,,,,,,,,,"0|i2uecz:",9223372036854775807,b32,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6b00f96c,,,,,,,,,"2021-12-06 07:40;tschatzl;The problem with the original change is (I think) that setting the _has_aborted flag can interfere with Full GC operation. In particular, it causes the next bitmap to be not cleared during G1ConcurrentMark::concurrent_cycle_abort() called by Full GC. 

So if the VM-exit call that stops the threads happens just before a full gc (and before actual VM exit), the former sets _has_aborted, the next bitmap is not cleared properly at Full GC start, and so the full gc operation gets confused.;;;","2021-12-06 08:33;tschatzl;Log output of a crash confirms this:

### TRACE 1: TEST PASSED
[1.284s][info][gc      ] stop-service                                    // debug log message printed in CollectedHeap::stop()
[1.284s][info][gc,start] GC(17) Pause Full (System.gc())

There are a few more related asserts firing - we simply can not set has_aborted at any time.;;;","2022-01-13 00:43;roboduke;Changeset: 33814791
Author:    Thomas Schatzl <tschatzl@openjdk.org>
Date:      2022-01-13 08:42:17 +0000
URL:       https://git.openjdk.java.net/jdk18/commit/33814791d917b0c09909bf19b432dd8dfc6cd9db
;;;","2022-01-17 17:11;roboduke;Changeset: 33814791
Author:    Thomas Schatzl <tschatzl@openjdk.org>
Date:      2022-01-13 08:42:17 +0000
URL:       https://git.openjdk.java.net/jdk/commit/33814791d917b0c09909bf19b432dd8dfc6cd9db
;;;","2022-01-25 04:28;roboduke;Changeset: 33814791
Author:    Thomas Schatzl <tschatzl@openjdk.org>
Date:      2022-01-13 08:42:17 +0000
URL:       https://git.openjdk.java.net/jdk18u/commit/33814791d917b0c09909bf19b432dd8dfc6cd9db
;;;",,,,,,,,,,,,,,,,,,,,,
ProcessHandleImpl.Info toString has an if check which is always true,JDK-8274003,5058863,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,rriggs,sundar,sundar,2021-09-20 08:30,2021-09-28 07:13,2023-10-01 09:57,2021-09-22 06:59,18,,,,,,,18,core-libs,,0,,,,,,,,,,,,,,,,,,,,,,"I report this bug because of corelibs-dev email from ""Andrey Turbanov""

ProcessHandleImpl.Info.toString code:

StringBuilder sb = new StringBuilder(60);
sb.append('[');
if (user != null) {
    sb.append(""user: "");
    sb.append(user());
}
if (command != null) {
    if (sb.length() != 0) sb.append("", "");
    sb.append(""cmd: "");
    sb.append(command);
}

Opening bracket '[' is added unconditionally to the StringBuilder. But later the code checks ""if (sb.length() != 0)"". This condition will always be true.

See also:

https://mail.openjdk.java.net/pipermail/core-libs-dev/2021-September/081774.html",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2uebv:",9223372036854775807,b16,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4c088d55,,,,,,,,,"2021-09-22 06:59;roboduke;Changeset: 33df388a
Author:    Roger Riggs <rriggs@openjdk.org>
Date:      2021-09-22 13:57:37 +0000
URL:       https://git.openjdk.java.net/jdk/commit/33df388a24267e868574e4604b2e2ab170dc5a09
;;;",,,,,,,,,,,,,,,,,,,,,,,,,
Clarify specification for Window properties controlled by the window manager,JDK-8273998,5058856,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,kcr,kcr,kcr,2021-09-20 07:57,2022-05-12 11:14,2023-10-01 09:57,2022-01-18 11:42,8,jfx11,jfx17,,,,,jfx18,javafx,,0,noreg-doc,sn_107,sn_108,sn_109,sn_110,,,,,,,,,,,,,,,,,"Several properties of a Window can be set programmatically, but are ultimately under control of the platform. Such properties include a window's position on the screen, its size, its stacking order relative to other windows, and whether or not the window is iconified or maximized. Many platforms have a window system that allows these properties to be specified by the program, but then allows the end-user to alter them.

By way of example, a window's initial position and size can be specified, but the end-user can later drag or resize the window, which will affect the values of these properties. A tiling window manager might even move and resize a window from its initial position and size in order to not overlap another window. Similarly, the stacking order and whether or not a window is iconified or maximized can be altered by the end-user. Some systems (e.g., mobile or embedded systems), have a fixed position and size that can't be changed by the application at all.

The specification of these properties should be clarified to indicate that their values can be changed or ignored by the platform. Several of the properties already have a comment to the effect that the value can change externally, and thus the properties are not bindable, but this should be clarified further and for all such properties.",,,,,,,,,,,JDK-8286487,JDK-8285968,JDK-8280316,JDK-8284967,,,,,,,,,,,,,JDK-8279620,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2ueab:",9223372036854775807,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@18948797,,,,,,,,,"2022-01-07 10:22;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jfx/pull/708
Date: 2022-01-07 18:19:23 +0000;;;","2022-01-18 11:42;roboduke;Changeset: 7a1a19c0
Author:    Kevin Rushforth <kcr@openjdk.org>
Date:      2022-01-18 19:40:29 +0000
URL:       https://git.openjdk.java.net/jfx/commit/7a1a19c098e21572077c9c3d75cc2141fadc99f6
;;;","2022-04-30 06:53;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jfx11u/pull/99
Date: 2022-04-30 13:48:57 +0000;;;","2022-05-09 14:21;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jfx17u/pull/57
Date: 2022-05-09 21:15:34 +0000;;;",,,,,,,,,,,,,,,,,,,,,,
JEditorPane HTML Demo - Accessibility issues,JDK-8273986,5057940,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,abhiscxk,webbuggrp,webbuggrp,2021-09-03 03:29,2023-03-29 23:16,2023-10-01 09:57,2023-03-24 09:18,11,16,17,18,8,,,21,client-libs,,0,a11y,accessibility,additional-information-received,dcspn,reproducer-yes,sn_126,sn_133,sn_134,sn_135,sn_136,sn_137,sn_138,sn_139,sn_140,webbug,,,,,,,"ADDITIONAL SYSTEM INFORMATION :
Windows

A DESCRIPTION OF THE PROBLEM :
Accessibility issues for JEditorPane when it renders HTML content inside.

The bug replicates from Java 8 to Java 16.

STEPS TO FOLLOW TO REPRODUCE THE PROBLEM :
1. Open the SwingSet test application and jaccesswalker (or any other accessibility viewer tool). 
2. Navigate to JEditorPane HTML Demo page and analyze the hierarchy.
3. Observe that the hyperlinks are identifiable.
4. Navigate to one of the hyperlinks, let's say ""Title Page"" and then navigate back to the first page.
5. Observe the hyperlinks are not accessible anymore.

EXPECTED VERSUS ACTUAL BEHAVIOR :
EXPECTED -
The accessibility should work smoothly even if we switch pages.


ACTUAL -
Elements are not accessible anymore.

---------- BEGIN SOURCE ----------
https://github.com/AdoptOpenJDK/openjdk-jdk11/blob/master/src/demo/share/jfc/SwingSet2

---------- END SOURCE ----------

CUSTOMER SUBMITTED WORKAROUND :
Did some research on my own and found out that the rootElementInfo cannotBeValid anymore and thus it does not report well its children via getAccessibleChildrenCount API. Getting a new accessibleContext everytime HTMLEditorKit.getAccessibleContext() is called solves the problem, but since Java 16 strong encapsulation features, it's impossible to do that anymore.

KeyFiles: AccessibleHTML.java, ElementInfo.java HTMLAccessibleContext.java.


FREQUENCY : always


",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"2021-10-21 08:34;pnarayanaswa;Capture1.PNG;https://bugs.openjdk.org/secure/attachment/96776/Capture1.PNG","2021-10-21 08:34;pnarayanaswa;Capture2.PNG;https://bugs.openjdk.org/secure/attachment/96777/Capture2.PNG",,,,generic,,,,,,,,,generic,,,,,"0|i2u8mr:",9223372036854775807,b16,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4785f47c,,,,,,,,,"2021-10-21 06:09;pnarayanaswa;Checked with testcase, following the reproducible step 
1. Open SwingSet test application
2. Navigate to JEditorPane HTML Demo page(Cover Page) 
3. Observing the hyperlinks<Capture1.png>
4. Navigate to one of the hyperlinks, ->>""Title Page"" (jaccesswalker->File->refresh tree)
5. navigating back <Capture2.png>

Test Result:
=========
8: Fail
8u311: Fail
11: Fail
11.0.13: Fail
17: Fail
17.0.1: Fail
18ea21: Fail

Step 3 is correlated to <Capture1.png>, refers to all the text from Untitled document.
Step 5 is correlated to <Capture2.png>, refers to not seeing the same elements as before under the JEditorPane.
;;;","2023-02-05 23:13;abhiscxk;I am able to reproduce the bug. Analysis is in progress.;;;","2023-02-21 21:30;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/12707
Date: 2023-02-22 05:24:20 +0000;;;","2023-03-24 09:18;dukebot;Changeset: 97649489
Author:    Abhishek Kumar <abhiscxk@openjdk.org>
Date:      2023-03-24 16:16:16 +0000
URL:       https://git.openjdk.org/jdk/commit/97649489d078a3aa34a73e7f686e507f34155788
;;;",,,,,,,,,,,,,,,,,,,,,,
Multi-core choke point in CMM engine (LCMSTransform.doTransform),JDK-8273972,5058821,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,serb,serb,serb,2021-09-19 21:00,2022-06-27 06:14,2023-10-01 09:57,2021-09-28 14:40,11,16,17,,,,,18,client-libs,,0,jdk17u-fix-request,jdk17u-fix-SQE-ok-next,jdk17u-fix-yes,,,,,,,,,,,,,,,,,,,"Initially, the bug was discussed here:
https://stackoverflow.com/questions/35264582/why-is-multithreading-slowing-down/35264813

The method LCMSTransform.doTransform() is synchronized which means we cannot transform different images in parallel. See the link above for an example and additional details.",,,,,,,,,,,JDK-8280483,JDK-8287027,,,,,,,,,,,,,,,,,,,,,,,JDK-8286201,JDK-8287824,,,,,,,,,,,,,,generic,,,,,,,,,generic,,,,,"0|i2ue2j:",9223372036854775807,b17,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4b09ce31,,,,,,,,,"2021-09-21 18:53;serb;My experiments shows that we can speedup this code by xCPU_NUMBER, so an example attached to the stackoverflow works x8 times faster than single threaded program, and 16 times faster than multithreaded program before the fix.;;;","2021-09-28 14:40;roboduke;Changeset: e49e5b5a
Author:    Sergey Bylokhov <serb@openjdk.org>
Date:      2021-09-28 21:38:40 +0000
URL:       https://git.openjdk.java.net/jdk/commit/e49e5b5a7ed9e493380fb73100057898c707b31b
;;;","2021-12-04 13:50;serb;Fix request (17u)

Performance improvement. The patch applies cleanly. The jdk_desktop tests are green.
PR: https://github.com/openjdk/jdk17u/pull/318;;;","2021-12-30 10:51;roboduke;A pull request was submitted for review.

URL: https://git.openjdk.java.net/jdk17u-dev/pull/47
Date: 2021-12-29 23:39:58 +0000
;;;",,,,,,,,,,,,,,,,,,,,,,
Memory Leak on the Runnable provided to Platform.startup,JDK-8273969,5058818,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,fkirmaier,fkirmaier,fkirmaier,2021-09-19 08:28,2021-10-01 16:51,2023-10-01 09:57,2021-09-23 04:57,jfx17,,,,,,,jfx18,javafx,,0,,,,,,,,,,,,,,,,,,,,,,The Lambda in Platform.startup stays referenced forever.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2ue1v:",9223372036854775807,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@1d9a38b8,,,,,,,,,"2021-09-23 04:57;roboduke;Changeset: 4b9cb210
Author:    Florian Kirmaier <fkirmaier@openjdk.org>
Committer: Kevin Rushforth <kcr@openjdk.org>
Date:      2021-09-23 11:55:57 +0000
URL:       https://git.openjdk.java.net/jfx/commit/4b9cb2106c688574ed0f6602818ee9683e802ee7
;;;",,,,,,,,,,,,,,,,,,,,,,,,,
gtest os.dll_address_to_function_and_library_name_vm fails on macOS12,JDK-8273967,5058812,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,dcubed,prr,prr,2021-09-18 14:35,2022-01-14 04:49,2023-10-01 09:57,2021-11-05 10:05,17.0.3-oracle,18,,,,,,18,hotspot,,0,jdk17u-fix-request,jdk17u-fix-yes,,,,,,,,,,,,,,,,,,,,"I am running our automated tests on macOS 12 - of which we have a grand total of ONE x64 system available to run headless tests.
Specifically I've been trying to run all tier1->tier3 tests and it looks to me as if there is one hotspot issue - reported by two tests on both production and debug
builds although  the production build case doesn't crash it still fails

The tests are

gtest/GTestWrapper.java
and
gtest/NMTGtests.java#nmt-detail

and the specific subtest in ALL of the 4 failures I've seen is for this

os.dll_address_to_function_and_library_name_vm


I see this test was previously problem listed on macOS and fixed earlier this year.
https://bugs.openjdk.java.net/browse/JDK-8259569 but I don't know how related this is to that .

The links and results are here :-

MACH5 JOB #1
===========


tests : open/test/hotspot/jtreg/:tier1_common


production :

gtest/GTestWrapper.java

[ RUN      ] os.dll_address_to_function_and_library_name_vm
open/test/hotspot/gtest/runtime/test_os.cpp:726: Failure
Value of: os::print_function_and_library_name(&st, addr)
  Actual: true
Expected: false
[  FAILED  ] os.dll_address_to_function_and_library_name_vm (13 ms)
[ RUN      ] os.iso8601_time_vm
====

debug :
gtest/GTestWrapper.java

 RUN      ] os.dll_address_to_function_and_library_name_vm
# To suppress the following error report, specify this argument
# after -XX: or in .hotspotrc:  SuppressErrorAt=/decoder_machO.hpp:43
#
# A fatal error has been detected by the Java Runtime Environment:
#
#  Internal Error (//workspace/open/src/hotspot/os/bsd/decoder_machO.hpp:43), pid=41911, tid=259
#  Error: ShouldNotReachHere()
#
# JRE version: Java(TM) SE Runtime Environment (18.0) (fastdebug build 18-internal+0-2021-09-17-1847254.philip.race.jdkmac.git)
# Java VM: Java HotSpot(TM) 64-Bit Server VM (fastdebug 18-internal+0-2021-09-17-1847254.philip.race.jdkmac.git, mixed mode, sharing, tiered, compressed oops, compressed class ptrs, g1 gc, bsd-amd64)
# Core dump will be written. Default location: core.41911
#
# An error report file with more information is saved as:
# /testoutput/test-support/jtreg_open_test_hotspot_jtreg_tier1_common/scratch/2/hs_err_pid41911.log
#
# If you would like to submit a bug report, please visit:
#   https://bugreport.java.com/bugreport/crash.jsp
# The crash happened outside the Java Virtual Machine in native code.
# See problematic frame for where to report the bug.
...
...
...

==============

gtest/NMTGtests.java#nmt-detail

[ RUN      ] os.dll_address_to_function_and_library_name_vm
# To suppress the following error report, specify this argument
# after -XX: or in .hotspotrc:  SuppressErrorAt=/decoder_machO.hpp:43
#
# A fatal error has been detected by the Java Runtime Environment:
#
#  Internal Error (/workspace/open/src/hotspot/os/bsd/decoder_machO.hpp:43), pid=41918, tid=259
#  Error: ShouldNotReachHere()
#
# JRE version: Java(TM) SE Runtime Environment (18.0) (fastdebug build 18-internal+0-2021-09-17-1847254.philip.race.jdkmac.git)
# Java VM: Java HotSpot(TM) 64-Bit Server VM (fastdebug 18-internal+0-2021-09-17-1847254.philip.race.jdkmac.git, mixed mode, sharing, tiered, compressed oops, compressed class ptrs, g1 gc, bsd-amd64)
# Core dump will be written. Default location: core.41918
#
# An error report file with more information is saved as:
# /testoutput/test-support/jtreg_open_test_hotspot_jtreg_tier1_common/scratch/0/hs_err_pid41918.log
#
# If you would like to submit a bug report, please visit:
#   https://bugreport.java.com/bugreport/crash.jsp
# The crash happened outside the Java Virtual Machine in native code.
# See problematic frame for where to report the bug.
#
assert failed: Error: ShouldNotReachHere()assert failed: assert(pc != __null) failed: no pc?
[2021-09-18T02:11:49.308259Z] Waiting for completion for process 41918
[2021-09-18T02:11:49.308586Z] Waiting for completion finished for process 41918

=========


MACH 5 JOB #2
=============


test : gtest/NMTGtests.java#nmt-detail

[ RUN      ] os.dll_address_to_function_and_library_name_vm
# To suppress the following error report, specify this argument
# after -XX: or in .hotspotrc:  SuppressErrorAt=/decoder_machO.hpp:43
#
# A fatal error has been detected by the Java Runtime Environment:
#
#  Internal Error (/workspace/open/src/hotspot/os/bsd/decoder_machO.hpp:43), pid=14605, tid=259
#  Error: ShouldNotReachHere()
#
# JRE version: Java(TM) SE Runtime Environment (18.0) (fastdebug build 18-internal+0-2021-09-17-1827261.philip.race.jdkmac.git)
# Java VM: Java HotSpot(TM) 64-Bit Server VM (fastdebug 18-internal+0-2021-09-17-1827261.philip.race.jdkmac.git, mixed mode, sharing, tiered, compressed oops, compressed class ptrs, g1 gc, bsd-amd64)
# Core dump will be written. Default location: core.14605
#
# An error report file with more information is saved as:
# //testoutput/test-support/jtreg_open_test_hotspot_jtreg_tier1_common/scratch/0/hs_err_pid14605.log
#
# If you would like to submit a bug report, please visit:
#   https://bugreport.java.com/bugreport/crash.jsp
# The crash happened outside the Java Virtual Machine in native code.
# See problematic frame for where to report the bug.
#
assert failed: Error: ShouldNotReachHere()assert failed: assert(pc != __null) failed: no pc?
[2021-09-17T23:39:44.503687Z] Waiting for completion for process 14605
[2021-09-17T23:39:44.504040Z] Waiting for completion finished for process 14605


",,,,,,,,,,,JDK-8278105,JDK-8280012,,,,,,,,,,,,,,,,,,,,JDK-8276037,,,JDK-8274388,,,,,,,,,,,,,,,,,,,,,,,,os_x,,,,,"0|i2ue0j:",9223372036854775807,b23,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,,,"2021-09-21 11:13;mseledtsov;ILW = MMM = P3;;;","2021-10-26 14:43;dcubed;Here's the relevant function:

src/hotspot/os/bsd/os_bsd.cpp:

bool os::dll_address_to_function_name(address addr, char *buf,
                                      int buflen, int *offset,
                                      bool demangle) {
  // buf is not optional, but offset is optional
  assert(buf != NULL, ""sanity check"");

  Dl_info dlinfo;
  char localbuf[MACH_MAXSYMLEN];

  if (dladdr((void*)addr, &dlinfo) != 0) {
    // see if we have a matching symbol
    if (dlinfo.dli_saddr != NULL && dlinfo.dli_sname != NULL) {
      if (!(demangle && Decoder::demangle(dlinfo.dli_sname, buf, buflen))) {
        jio_snprintf(buf, buflen, ""%s"", dlinfo.dli_sname);
      }
      if (offset != NULL) *offset = addr - (address)dlinfo.dli_saddr;
      return true;
    }
    // no matching symbol so try for just file info
    if (dlinfo.dli_fname != NULL && dlinfo.dli_fbase != NULL) {
      if (Decoder::decode((address)(addr - (address)dlinfo.dli_fbase),
                          buf, buflen, offset, dlinfo.dli_fname, demangle)) {
        return true;
      }
    }

    // Handle non-dynamic manually:
    if (dlinfo.dli_fbase != NULL &&
        Decoder::decode(addr, localbuf, MACH_MAXSYMLEN, offset,
                        dlinfo.dli_fbase)) {
      if (!(demangle && Decoder::demangle(localbuf, buf, buflen))) {
        jio_snprintf(buf, buflen, ""%s"", localbuf);
      }
      return true;
    }
  }
  buf[0] = '\0';
  if (offset != NULL) *offset = -1;
  return false;
}

Based on code inspection, it looks like we're hitting this block:

    // no matching symbol so try for just file info
    if (dlinfo.dli_fname != NULL && dlinfo.dli_fbase != NULL) {
      if (Decoder::decode((address)(addr - (address)dlinfo.dli_fbase),
                          buf, buflen, offset, dlinfo.dli_fname, demangle)) {

However, the 6 parameter version of decode() looks like this:

src/hotspot/os/bsd/decoder_machO.hpp:

  virtual bool decode(address pc, char* buf, int buflen, int* offset,
                      const char* module_path, bool demangle) {
    ShouldNotReachHere();
    return false;
  }

I'll have to research what we're expecting this
6-parameter decode() function as compared to
the 5-parameter decode() function.
;;;","2021-10-26 20:42;dholmes;Also affects Aarch64.;;;","2021-10-27 08:35;dcubed;In [~prr]'s original testing on macosx-x64, we saw this failure mode with release bits:

[ RUN      ] os.dll_address_to_function_and_library_name_vm
open/test/hotspot/gtest/runtime/test_os.cpp:726: Failure
Value of: os::print_function_and_library_name(&st, addr)
  Actual: true
Expected: false
[  FAILED  ] os.dll_address_to_function_and_library_name_vm (13 ms)

and with the original testing on macosx-x64, we saw this failure mode with fastdebug bits:

[ RUN      ] os.dll_address_to_function_and_library_name_vm
# To suppress the following error report, specify this argument
# after -XX: or in .hotspotrc:  SuppressErrorAt=/decoder_machO.hpp:43
#
# A fatal error has been detected by the Java Runtime Environment:
#
#  Internal Error (/System/Volumes/Data/mesos/work_dir/slaves/35546316-ed70-4084-8244-d672e7734fd1-S109184/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/75fd3a15-4ca7-4792-a015-f84387fcbf7e/runs/3b98a10b-1831-4b00-a25b-c1ab401e9877/workspace/open/src/hotspot/os/bsd/decoder_machO.hpp:43), pid=41911, tid=259
#  Error: ShouldNotReachHere()
#
# JRE version: Java(TM) SE Runtime Environment (18.0) (fastdebug build 18-internal+0-2021-09-17-1847254.philip.race.jdkmac.git)
# Java VM: Java HotSpot(TM) 64-Bit Server VM (fastdebug 18-internal+0-2021-09-17-1847254.philip.race.jdkmac.git, mixed mode, sharing, tiered, compressed oops, compressed class ptrs, g1 gc, bsd-amd64)
# Core dump will be written. Default location: core.41911
#
# An error report file with more information is saved as:
# /System/Volumes/Data/mesos/work_dir/slaves/a2dc162d-743b-4800-9e92-31f85abb45b1-S147/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/3a6cf344-afa6-448e-94e8-3306b0bfe1af/runs/8518c335-b104-494b-9193-a1f31adb202b/testoutput/test-support/jtreg_open_test_hotspot_jtreg_tier1_common/scratch/2/hs_err_pid41911.log
#
# If you would like to submit a bug report, please visit:
#   https://bugreport.java.com/bugreport/crash.jsp
# The crash happened outside the Java Virtual Machine in native code.
# See problematic frame for where to report the bug.
#

For some reason, all of the macosx-aarch64 failures look like
the macosx-x64 release bits failures. No ""ShouldNotReachHere"" errors
at all. I'm not sure why.;;;","2021-10-27 12:30;dcubed;I added additional logging to the test to identify which EXPECT_FALSE
case was failing. I got two failures with macosx-aarch64-debug bits:

gtest/NMTGtests.java#nmt-detail

[ RUN      ] os.dll_address_to_function_and_library_name_vm
os::print_function_and_library_name(st, -1) expects FALSE.
/System/Volumes/Data/mesos/work_dir/slaves/a2dc162d-743b-4800-9e92-31f85abb45b1-S12587/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/be10439c-5deb-414e-91c6-08cc37a297d7/runs/26787da0-e294-499f-b8e5-c4473a11f10e/workspace/open/test/hotspot/gtest/runtime/test_os.cpp:727: Failure
Value of: os::print_function_and_library_name(&st, addr)
  Actual: true
Expected: false
os::print_function_and_library_name(st, NULL) expects FALSE.
shorten_paths=0, demangle=0, strip_arguments=0, provide_scratch_buffer=0
_ZN7Threads9create_vmEP14JavaVMInitArgsPb in /System/Volumes/Data/mesos/work_dir/jib-master/install/2021-10-27-1641248.daniel.daugherty.8273967_for_jdk18.git/macosx-aarch64-debug.test/hotspot/gtest/server/libjvm.dylib
shorten_paths=1, demangle=0, strip_arguments=0, provide_scratch_buffer=0
_ZN7Threads9create_vmEP14JavaVMInitArgsPb in libjvm.dylib
shorten_paths=0, demangle=1, strip_arguments=0, provide_scratch_buffer=0
Threads::create_vm(JavaVMInitArgs*, bool*) in /System/Volumes/Data/mesos/work_dir/jib-master/install/2021-10-27-1641248.daniel.daugherty.8273967_for_jdk18.git/macosx-aarch64-debug.test/hotspot/gtest/server/libjvm.dylib
shorten_paths=1, demangle=1, strip_arguments=0, provide_scratch_buffer=0
Threads::create_vm(JavaVMInitArgs*, bool*) in libjvm.dylib
shorten_paths=0, demangle=0, strip_arguments=1, provide_scratch_buffer=0
_ZN7Threads9create_vmEP14JavaVMInitArgsPb in /System/Volumes/Data/mesos/work_dir/jib-master/install/2021-10-27-1641248.daniel.daugherty.8273967_for_jdk18.git/macosx-aarch64-debug.test/hotspot/gtest/server/libjvm.dylib
shorten_paths=1, demangle=0, strip_arguments=1, provide_scratch_buffer=0
_ZN7Threads9create_vmEP14JavaVMInitArgsPb in libjvm.dylib
shorten_paths=0, demangle=1, strip_arguments=1, provide_scratch_buffer=0
Threads::create_vm in /System/Volumes/Data/mesos/work_dir/jib-master/install/2021-10-27-1641248.daniel.daugherty.8273967_for_jdk18.git/macosx-aarch64-debug.test/hotspot/gtest/server/libjvm.dylib
shorten_paths=1, demangle=1, strip_arguments=1, provide_scratch_buffer=0
Threads::create_vm in libjvm.dylib
shorten_paths=0, demangle=0, strip_arguments=0, provide_scratch_buffer=1
_ZN7Threads9create_vmEP14JavaVMInitArgsPb in /System/Volumes/Data/mesos/work_dir/jib-master/install/2021-10-27-1641248.daniel.daugherty.8273967_for_jdk18.git/macosx-aarch64-debug.test/hotspot/gtest/server/libjvm.dylib
_ZN7Threa in /System/V
shorten_paths=1, demangle=0, strip_arguments=0, provide_scratch_buffer=1
_ZN7Threads9create_vmEP14JavaVMInitArgsPb in libjvm.dylib
_ZN7Threa in V
shorten_paths=0, demangle=1, strip_arguments=0, provide_scratch_buffer=1
Threads::create_vm(JavaVMInitArgs*, bool*) in /System/Volumes/Data/mesos/work_dir/jib-master/install/2021-10-27-1641248.daniel.daugherty.8273967_for_jdk18.git/macosx-aarch64-debug.test/hotspot/gtest/server/libjvm.dylib
Threads:: in /System/V
shorten_paths=1, demangle=1, strip_arguments=0, provide_scratch_buffer=1
Threads::create_vm(JavaVMInitArgs*, bool*) in libjvm.dylib
Threads:: in V
shorten_paths=0, demangle=0, strip_arguments=1, provide_scratch_buffer=1
_ZN7Threads9create_vmEP14JavaVMInitArgsPb in /System/Volumes/Data/mesos/work_dir/jib-master/install/2021-10-27-1641248.daniel.daugherty.8273967_for_jdk18.git/macosx-aarch64-debug.test/hotspot/gtest/server/libjvm.dylib
_ZN7Threa in /System/V
shorten_paths=1, demangle=0, strip_arguments=1, provide_scratch_buffer=1
_ZN7Threads9create_vmEP14JavaVMInitArgsPb in libjvm.dylib
_ZN7Threa in V
shorten_paths=0, demangle=1, strip_arguments=1, provide_scratch_buffer=1
Threads::create_vm in /System/Volumes/Data/mesos/work_dir/jib-master/install/2021-10-27-1641248.daniel.daugherty.8273967_for_jdk18.git/macosx-aarch64-debug.test/hotspot/gtest/server/libjvm.dylib
Threads:: in /System/V
shorten_paths=1, demangle=1, strip_arguments=1, provide_scratch_buffer=1
Threads::create_vm in libjvm.dylib
Threads:: in V
[  FAILED  ] os.dll_address_to_function_and_library_name_vm (12 ms)

gtest/GTestWrapper.java

[ RUN      ] os.dll_address_to_function_and_library_name_vm
os::print_function_and_library_name(st, -1) expects FALSE.
/System/Volumes/Data/mesos/work_dir/slaves/a2dc162d-743b-4800-9e92-31f85abb45b1-S12587/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/be10439c-5deb-414e-91c6-08cc37a297d7/runs/26787da0-e294-499f-b8e5-c4473a11f10e/workspace/open/test/hotspot/gtest/runtime/test_os.cpp:727: Failure
Value of: os::print_function_and_library_name(&st, addr)
  Actual: true
Expected: false
os::print_function_and_library_name(st, NULL) expects FALSE.
shorten_paths=0, demangle=0, strip_arguments=0, provide_scratch_buffer=0
_ZN7Threads9create_vmEP14JavaVMInitArgsPb in /System/Volumes/Data/mesos/work_dir/jib-master/install/2021-10-27-1641248.daniel.daugherty.8273967_for_jdk18.git/macosx-aarch64-debug.test/hotspot/gtest/server/libjvm.dylib
shorten_paths=1, demangle=0, strip_arguments=0, provide_scratch_buffer=0
_ZN7Threads9create_vmEP14JavaVMInitArgsPb in libjvm.dylib
shorten_paths=0, demangle=1, strip_arguments=0, provide_scratch_buffer=0
Threads::create_vm(JavaVMInitArgs*, bool*) in /System/Volumes/Data/mesos/work_dir/jib-master/install/2021-10-27-1641248.daniel.daugherty.8273967_for_jdk18.git/macosx-aarch64-debug.test/hotspot/gtest/server/libjvm.dylib
shorten_paths=1, demangle=1, strip_arguments=0, provide_scratch_buffer=0
Threads::create_vm(JavaVMInitArgs*, bool*) in libjvm.dylib
shorten_paths=0, demangle=0, strip_arguments=1, provide_scratch_buffer=0
_ZN7Threads9create_vmEP14JavaVMInitArgsPb in /System/Volumes/Data/mesos/work_dir/jib-master/install/2021-10-27-1641248.daniel.daugherty.8273967_for_jdk18.git/macosx-aarch64-debug.test/hotspot/gtest/server/libjvm.dylib
shorten_paths=1, demangle=0, strip_arguments=1, provide_scratch_buffer=0
_ZN7Threads9create_vmEP14JavaVMInitArgsPb in libjvm.dylib
shorten_paths=0, demangle=1, strip_arguments=1, provide_scratch_buffer=0
Threads::create_vm in /System/Volumes/Data/mesos/work_dir/jib-master/install/2021-10-27-1641248.daniel.daugherty.8273967_for_jdk18.git/macosx-aarch64-debug.test/hotspot/gtest/server/libjvm.dylib
shorten_paths=1, demangle=1, strip_arguments=1, provide_scratch_buffer=0
Threads::create_vm in libjvm.dylib
shorten_paths=0, demangle=0, strip_arguments=0, provide_scratch_buffer=1
_ZN7Threads9create_vmEP14JavaVMInitArgsPb in /System/Volumes/Data/mesos/work_dir/jib-master/install/2021-10-27-1641248.daniel.daugherty.8273967_for_jdk18.git/macosx-aarch64-debug.test/hotspot/gtest/server/libjvm.dylib
_ZN7Threa in /System/V
shorten_paths=1, demangle=0, strip_arguments=0, provide_scratch_buffer=1
_ZN7Threads9create_vmEP14JavaVMInitArgsPb in libjvm.dylib
_ZN7Threa in V
shorten_paths=0, demangle=1, strip_arguments=0, provide_scratch_buffer=1
Threads::create_vm(JavaVMInitArgs*, bool*) in /System/Volumes/Data/mesos/work_dir/jib-master/install/2021-10-27-1641248.daniel.daugherty.8273967_for_jdk18.git/macosx-aarch64-debug.test/hotspot/gtest/server/libjvm.dylib
Threads:: in /System/V
shorten_paths=1, demangle=1, strip_arguments=0, provide_scratch_buffer=1
Threads::create_vm(JavaVMInitArgs*, bool*) in libjvm.dylib
Threads:: in V
shorten_paths=0, demangle=0, strip_arguments=1, provide_scratch_buffer=1
_ZN7Threads9create_vmEP14JavaVMInitArgsPb in /System/Volumes/Data/mesos/work_dir/jib-master/install/2021-10-27-1641248.daniel.daugherty.8273967_for_jdk18.git/macosx-aarch64-debug.test/hotspot/gtest/server/libjvm.dylib
_ZN7Threa in /System/V
shorten_paths=1, demangle=0, strip_arguments=1, provide_scratch_buffer=1
_ZN7Threads9create_vmEP14JavaVMInitArgsPb in libjvm.dylib
_ZN7Threa in V
shorten_paths=0, demangle=1, strip_arguments=1, provide_scratch_buffer=1
Threads::create_vm in /System/Volumes/Data/mesos/work_dir/jib-master/install/2021-10-27-1641248.daniel.daugherty.8273967_for_jdk18.git/macosx-aarch64-debug.test/hotspot/gtest/server/libjvm.dylib
Threads:: in /System/V
shorten_paths=1, demangle=1, strip_arguments=1, provide_scratch_buffer=1
Threads::create_vm in libjvm.dylib
Threads:: in V
[  FAILED  ] os.dll_address_to_function_and_library_name_vm (11 ms)


So this debug info tells me that this test code:

  // Invalid addresses
  LOG(""os::print_function_and_library_name(st, -1) expects FALSE."");
  address addr = (address)(intptr_t)-1;
  EXPECT_FALSE(os::print_function_and_library_name(&st, addr));
  LOG(""os::print_function_and_library_name(st, NULL) expects FALSE."");
  addr = NULL;
  EXPECT_FALSE(os::print_function_and_library_name(&st, addr));

passed the ""NULL"" case, but not the ""-1"" case. I wasn't lucky enough to
get any macosx-x64 machines running macOS12 so I don't have any
extra debug info for that failure mode (yet).;;;","2021-10-27 13:28;dcubed;I updated the debug code to show what the ""successful""
os::print_function_and_library_name(&st, -1) was printing:

[ RUN      ] os.dll_address_to_function_and_library_name_vm
open/test/hotspot/gtest/runtime/test_os.cpp:727: Failure
Value of: os::print_function_and_library_name(&st, addr)
  Actual: true
Expected: false
output for -1 addr='_dyld_private+-48857097 in gtestLauncher'

So it looks like ""-1"" is no longer a good sentinel for a failing call
to os::print_function_and_library_name() with macOS12.;;;","2021-10-28 14:50;dcubed;I cannot find any Monterey/macOS12 release note that talks about changes
to the dladdr() API. HOWEVER, I did determine this:

% man dladdr
No manual entry for dladdr

% man dlopen
No manual entry for dlopen

% man dyld
<Man page displays>

So the dladdr() and dlopen() APIs are no longer documented in Monterey/macOS12.;;;","2021-11-05 10:05;roboduke;Changeset: 92d21763
Author:    Daniel D. Daugherty <dcubed@openjdk.org>
Date:      2021-11-05 17:04:39 +0000
URL:       https://git.openjdk.java.net/jdk/commit/92d2176362954a7093894057748056610eeafe4b
;;;","2022-01-10 00:08;goetz;Fix request [17u]

I am adding this comment on behalf of Johannes Bechberger, a colleague who
will now also contribute to OpenJDK for SAP.
He backported this for parity with 17.0.3-oracle.
No risk, only a test change.
Test passes on macOS 12. SAP nightly testing passed. 
PR: https://github.com/openjdk/jdk17u-dev/pull/68;;;","2022-01-13 18:21;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk17u-dev/pull/68
Date: 2022-01-08 11:51:09 +0000;;;",,,,,,,,,,,,,,,,
some testlibrary_tests/ir_framework tests fail when c1 disabled,JDK-8273965,5058810,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,aoqi,aoqi,aoqi,2021-09-18 08:45,2021-11-02 08:57,2023-10-01 09:57,2021-09-21 19:30,17,18,,,,,,18,hotspot,,0,hs-comp-triaged,ir-framework,jdk17u-fix-request,jdk17u-fix-yes,noreg-self,oracle-triage-18,,,,,,,,,,,,,,,,"These tests failed with c2-only build:
test/hotspot/jtreg/testlibrary_tests/ir_framework/tests/TestCompLevels.java
test/hotspot/jtreg/testlibrary_tests/ir_framework/tests/TestControls.java
test/hotspot/jtreg/testlibrary_tests/ir_framework/tests/TestRunTests.java",,,,,,,,,,,JDK-8276133,JDK-8276354,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2ue03:",9223372036854775807,b16,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2021-09-19 23:44;chagedorn;ILW = Some IR tests fail, only with C2-only build, no workaround = MLH = P4;;;","2021-09-21 19:30;roboduke;Changeset: 517405e4
Author:    Ao Qi <aoqi@openjdk.org>
Committer: Yi Yang <yyang@openjdk.org>
Date:      2021-09-22 02:28:49 +0000
URL:       https://git.openjdk.java.net/jdk/commit/517405e462dc6104c33471c58242ea7b244c6218
;;;","2021-10-12 01:46;aoqi;Fix Request (17u)

Please approve this for backport to 17u. The patch applies clean. Low risk, only test changes.;;;",,,,,,,,,,,,,,,,,,,,,,,
jdk/nio/zipfs/ZipFSTester.java fails if file path contains '+' character,JDK-8273961,5058807,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,lancea,aoqi,aoqi,2021-09-18 02:28,2021-10-11 04:58,2023-10-01 09:57,2021-09-22 04:40,11,17,18,,,,,18,core-libs,,0,jdk11u-fix-request,jdk11u-fix-yes,jdk17u-fix-request,jdk17u-fix-SQE-ok-next,jdk17u-fix-yes,testbug,,,,,,,,,,,,,,,,"Filed on behalf of Sun Xu (sunxu01@loongson.cn).

The ZipFSTester.java generates the basic.jar for testing.
However, if the path has plus character, the following string will be delivered to the newZipFileSystem method:

jdk-ls+18/build/linux-loongarch64-server-release/test-support/jtreg_test_jdk_jdk_nio_zipfs_ZipFSTester_java/scratch/0/basic.jar

After processing via URLDecoder.decode within newZipFileSystem, the ""+"" is replaced by "" "":

jdk-ls 18/build/linux-loongarch64-server-release/test-support/jtreg_test_jdk_jdk_nio_zipfs_ZipFSTester_java/scratch/0/basic.jar

Then, the FileSystems.newFileSystem method will raise java.nio.file.NoSuchFileException for the inexistent ""jdk-ls 18"" path.

TEST RESULT: Failed. Execution failed: `main' threw exception: java.nio.file.NoSuchFileException: jdk-ls 18/build/linux-loongarch64-server-release/test-support/jtreg_test_jdk_jdk_nio_zipfs_ZipFSTester_java/scratch/0/basic.jar",,,,,,,,,,,JDK-8275044,JDK-8274473,JDK-8274474,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2udzf:",9223372036854775807,b16,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@5f132e58,,,,,,,,,"2021-09-22 04:40;roboduke;Changeset: 7f78803b
Author:    sunxu <sunxu01@loongson.cn>
Committer: Lance Andersen <lancea@openjdk.org>
Date:      2021-09-22 11:38:29 +0000
URL:       https://git.openjdk.java.net/jdk/commit/7f78803b0926ea194334ad9b3c9f06cbe17a83dd
;;;","2021-09-27 21:48;tvoniadka;17u fix request:

Please approve this for backport to 17u. Patch applies clean, and test passes on all platforms.;;;","2021-10-09 05:27;goetz;Fix request [11u]

I backport this for parity with 11.0.14-oracle.
No risk, only a test change.
Clean backport except for Copyright.
Test passes.  Nighttests pass.
;;;",,,,,,,,,,,,,,,,,,,,,,,
Redundant condition in Metadata.TypeComparator.compare,JDK-8273960,5058806,Bug,Resolved,JDK,JDK,software,duke,,,P5,Fixed,aturbanov,aturbanov,aturbanov,2021-09-18 02:03,2021-09-29 17:15,2023-10-01 09:57,2021-09-25 04:43,17,18,,,,,,18,hotspot,,0,,,,,,,,,,,,,,,,,,,,,,"In method jdk.jfr.internal.tool.Metadata.TypeComparator#compare
https://github.com/openjdk/jdk/blob/master/src/jdk.jfr/share/classes/jdk/jfr/internal/tool/Metadata.java#L67
```
if (package1.equals(package2)) {
    return n1.compareTo(n2);
} else {
    // Ensure that jdk.* are printed first
    // This makes it easier to find user defined events at the end.
    if (Type.SUPER_TYPE_EVENT.equals(t1.getSuperType()) && !package1.equals(package2)) {
        if (package1.equals(""jdk.jfr"")) {
            return -1;
        }
        if (package2.equals(""jdk.jfr"")) {
            return 1;
        }
    }
    return package1.compareTo(package2);
}
```
Equality of 'package1' and 'package2' is already checked first. No need to recheck it again.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2udz7:",9223372036854775807,b17,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@42995637,,,,,,,,,"2021-09-25 04:43;roboduke;Changeset: 9bc865d3
Author:    Andrey Turbanov <turbanoff@gmail.com>
Committer: Erik Gahlin <egahlin@openjdk.org>
Date:      2021-09-25 11:42:03 +0000
URL:       https://git.openjdk.java.net/jdk/commit/9bc865d38c7e33036dd77392960d7d289d6eefa4
;;;",,,,,,,,,,,,,,,,,,,,,,,,,
Move clearQuad method to BaseShaderGraphics superclass,JDK-8273946,5058786,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,kcr,kcr,kcr,2021-09-17 08:20,2022-03-07 11:09,2023-10-01 09:57,2021-09-22 06:48,jfx11,jfx17,,,,,,jfx18,javafx,,0,11-bp,17-bp,noreg-cleanup,sn_102,,,,,,,,,,,,,,,,,,"After the fix for JDK-8090547 the clearQuad methods in D3DGraphics and ES2Graphics are identical, which should have been the case all along. The fact that they weren't identical was the source of a bug that was only discovered during the testing of JDK-8090547 on the es2 pipeline.

The clearQuad method should be moved to the BaseShaderGraphics superclass to get rid of the unnecessary code duplication. This will be helpful when implementing the metal pipeline as well.

This fix can be backported to 17u and 11u, even though there is no plan to backport the fix for JDK-8090547.
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8090547,,,,,,,,,,,,,,,,,,,,,,,,"0|i2udur:",9223372036854775807,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4143e3f7,,,,,,,,,"2021-09-22 06:48;roboduke;Changeset: 338b9994
Author:    Kevin Rushforth <kcr@openjdk.org>
Date:      2021-09-22 13:47:39 +0000
URL:       https://git.openjdk.java.net/jfx/commit/338b999414ed5dc8fea19c12bd3e656fd9cab6f4
;;;",,,,,,,,,,,,,,,,,,,,,,,,,
G1 GC tuning guide updates for JDK18,JDK-8273941,5058779,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,tschatzl,tschatzl,tschatzl,2021-09-17 05:42,2022-03-14 02:49,2023-10-01 09:57,2022-03-14 02:48,18,,,,,,,18.0.1,docs,,0,gc-docs,gc-g1,noreg-doc,,,,,,,,,,,,,,,,,,,"With JDK-8017163 there were significant changes to not only how the remembered set is represented, but also output the garbage collector provides.

The GC tuning guide (linking the one for 17: https://docs.oracle.com/en/java/javase/17/gctuning/garbage-first-garbage-collector-tuning.html#GUID-A0343B53-A690-4DDE-98F9-9877096DBF0F) the section ""High Update RS and Scan RS Times"" needs to be revised.

Requested changes are added as comments starting with the ""change:"" keyword.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8281743,,,,,,,,JDK-8017163,JDK-8281743,,,,,,,,,,,,,,,,,,,,,,,"0|i2udt7:",9223372036854775807,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4eba8c33,,,,,,,,,"2021-09-20 00:44;tschatzl;Actually I think that the mentioned section has been out of date for quite some time.;;;","2021-09-20 03:36;tschatzl;The guide should also make it clear the ""Mixed"" collections are a type of young collections. They are somewhat called out completely different than Young collections. The text mentions young-only though, but not in the context of collection names.;;;","2021-11-19 02:39;tschatzl;Also add information about heap region size changes and configurable card size

Here's some snipped comment about the card size that could be added there:

In general, applications spending a significant amount of time scanning for references into evacuated areas may benefit significantly from smaller card sizes. Conversely, applications spending only a very small amount of time scanning for references may benefit from larger card sizes. E.g. for G1, with `-Xlog:gc+phases=debug` logging you can see a breakdown of the `Evacuate Collection Set` phase, looking for the `Scan Heap Roots` time. There is no such logging for Serial and Parallel GC.;;;","2022-02-23 02:22;tschatzl;change:

in section ""Garbage Collection Cycle"" (https://docs.oracle.com/en/java/javase/17/gctuning/garbage-first-g1-garbage-collector1.html#GUID-F1BE86FA-3EDC-4D4F-BDB4-4B044AD83180), in the item ""Concurrent Start"" below figure 7.2, 

""Concurrent Start : This type of collection starts the marking process in addition to performing a Normal young collection. Concurrent marking determines all currently reachable (live) objects in the old generation regions to be kept for the following space-reclamation phase. While collection marking hasn’t completely finished, Normal young collections may occur. Marking finishes with two special stop-the-world pauses: Remark and Cleanup. ""

At the end, add:

The Concurrent Start pause may also determine that there is no need to follow through with marking: in this case, a short concurrent mark undo phase occurs, and the Young Only phase continues. In this case no Remark and Cleanup pauses will occur.
;;;","2022-02-23 02:33;tschatzl;change:

 in section ""Garbage Collection Cycle"" (https://docs.oracle.com/en/java/javase/17/gctuning/garbage-first-g1-garbage-collector1.html#GUID-F1BE86FA-3EDC-4D4F-BDB4-4B044AD83180), in the item ""Space reclamation"" (item 2) below figure 7.2, 

Space-reclamation phase: This phase consists of multiple Mixed collections that in
addition to young generation regions, also evacuate live objects of sets of old
generation regions. The space-reclamation phase ends when G1 determines that
evacuating more old generation regions wouldn't yield enough free space worth
the effort.

replace with:

Space-reclamation phase: This phase consists of multiple young collections that in addition to young generation regions, also evacuate live objects of sets of old generation regions. These collections are also called Mixed collections. The space-reclamation phase ends when G1 determines that evacuating more old generation regions wouldn't yield enough free space worth the effort.
;;;","2022-02-23 02:43;tschatzl;change:

in section ""Garbage Collection Pauses and Collection Set"" (https://docs.oracle.com/en/java/javase/17/gctuning/garbage-first-g1-garbage-collector1.html#GUID-3A99AE6C-F80A-4565-A27C-B4AEDF5CDF71), the last paragraph:

G1 prepares the collection set candidate regions during the concurrent cycle. During the
Remark pause, G1 selects regions that have a low occupancy, which are regions that contain
a significant amount of free space. These regions are then prepared concurrently between
the Remark and Cleanup pauses for later collection. The Cleanup pause sorts the results of
this preparation according to their efficiency. More efficient regions that seem to take less
time to collect and that contain more free space are preferred in subsequent mixed
collections.

replace with:

The collection set candidate regions are regions that are highly likely to be collected in the space reclamation phase. G1 selects them during the Remark pause according to how much live data they contain and their connectivity with other regions. Regions with little live data (lots of free space) are preferred over regions that are mostly live, and regions with little connectivity over regions with high connectivity, as the effort to collect these more ""efficient"" regions is smaller. G1 will drop regions that do not contribute much to free memory gain from the collection set candidate regions. This includes all regions where the amount of space that can be reclaimed is less than -XX:G1HeapWastePercent percent of the current heap size. G1 will not collect these regions later this space reclamation phase.

Between the Remark and Cleanup pause G1 proceeds to prepare them for later collection, with the Cleanup pause finishing the work and sorting them according to efficiency. More efficient regions that take less time to collect and that contain more free space are preferably collected in the subsequent Mixed collections.;;;","2022-02-23 02:53;tschatzl;change:

in section ""Java Heap Sizing"" (https://docs.oracle.com/en/java/javase/17/gctuning/garbage-first-g1-garbage-collector1.html#GUID-3F6AE9BA-32AF-4C36-B8C0-721EE45D17A7), replace the first paragraph:

G1 respects standard rules when resizing the Java heap, using -XX:InitialHeapSize as the
minimum Java heap size, -XX:MaxHeapSize as the maximum Java heap size, -
XX:MinHeapFreeRatio for the minimum percentage of free memory, -XX:MaxHeapFreeRatio
for determining the maximum percentage of free memory after resizing. The G1 collector
considers to resize the Java heap during a the Remark and the Full GC pauses only. This
process may release memory to or allocate memory from the operating system.

with (keep formatting of words with ""-XX:""):

G1 respects standard rules when resizing the Java heap, using -XX:InitialHeapSize as the
minimum Java heap size, -XX:MaxHeapSize as the maximum Java heap size, -
XX:MinHeapFreeRatio for the minimum percentage of free memory, -XX:MaxHeapFreeRatio
for determining the maximum percentage of free memory after resizing. The G1 collector
considers to resize the Java heap according to these options during a the Remark and the Full GC pauses only. This
process may release memory to or allocate memory from the operating system.

Heap expansion occurs within the collection pause, while memory release occurs after the pause concurrent to the application.
;;;","2022-02-23 02:57;tschatzl;change:

 in section ""Space-Reclamation Phase Generation Sizing"" (https://docs.oracle.com/en/java/javase/17/gctuning/garbage-first-g1-garbage-collector1.html#GUID-6D6B18B1-063B-48FF-99E3-5AF059C43CE8), replace the paragraph: 

The Space-Reclamation phase ends when the remaining amount of space that can be
reclaimed in the collection set candidate regions is less than the percentage set by -
XX:G1HeapWastePercent.

with

The Space-Reclamation phase ends when there are no more regions in the collection set candidate regions set.;;;","2022-02-23 03:17;tschatzl;change:

in section ""Determining Initiating Heap Occupancy"" (https://docs.oracle.com/en/java/javase/17/gctuning/garbage-first-g1-garbage-collector1.html#GUID-572C9203-AB27-46F1-9D33-42BA4F3C6BF3), replace the first paragraph

The Initiating Heap Occupancy Percent (IHOP) is the threshold at which an Initial Mark
collection is triggered and it is defined as a percentage of the old generation size.

with

The Initiating Heap Occupancy Percent (IHOP) is the threshold at which a Concurrent Start
collection is triggered and it is defined as a percentage of the old generation size.;;;","2022-02-23 04:30;tschatzl;change:

in section ""Behavior in Very Tight Heap Situations"" (https://docs.oracle.com/en/java/javase/17/gctuning/garbage-first-g1-garbage-collector1.html#GUID-BE157AF6-29E7-461A-82CF-50C1978785DA). Between the second and third paragraph add:

G1 tries to avoid evacuation failure during young collections by scheduling Preventive young collections. The assumption is that an additional regular young collection that does not incur an evacuation failure might free enough memory in the old generation by reclaiming humongous regions to not incur the overhead of such a garbage collection at all. Preventive young collections may be turned off using the -XX:-UsePreventiveGC option.;;;","2022-02-23 04:37;tschatzl;change:

in the ""Ergonmic Defaults for G1 GC"" (https://docs.oracle.com/en/java/javase/17/gctuning/garbage-first-g1-garbage-collector1.html#GUID-082C967F-2DAC-4B59-8A81-0CEC6EEB9016) section, in Table 7-1, ""Ergonomic Defaults for G1 GC"",

in the row with ""-XX:G1HeapRegionSize=<ergo>"", change the text in the second column to:

The size of the heap regions. The default value is based on the maximum heap size and it is calculated
to render roughly 2048 regions, with a maximum ergonomically determined value of 32 MB. A size given by the user must be a power of 2, and valid values range from 1 to 512 MB.


;;;","2022-03-01 04:05;tschatzl;change:

in the ""Young-Only Phase Generation Sizing"" (https://docs.oracle.com/en/java/javase/17/gctuning/garbage-first-g1-garbage-collector1.html#GUID-C268549C-7D95-499C-9B24-A6670B44E49C) section, in the first paragraph:

Replace the first paragraph

G1 always sizes the young generation at the end of a normal young collection for the
next mutator phase. This way, G1 can meet the pause time goals that were set using -
XX:MaxGCPauseTimeMillis and -XX:PauseTimeIntervalMillis based on long-term
observations of actual pause time. It takes into account how long it took young
generations of similar size to evacuate. This includes information like how many
objects had to be copied during collection, and how interconnected these objects had
been.

With

G1 always sizes the young generation at the end of a normal young collection for the
next mutator phase. This way, G1 can meet the pause time goals that were set using -
XX:MaxGCPauseTimeMillis and -XX:GCPauseIntervalMillis based on long-term
observations of actual pause time. This calculation takes into account how long it took young
generations of similar size to evacuate. This includes information like how many
objects had to be copied during collection, and how interconnected these objects had
been.

The -XX:GCPauseIntervalMillis and -XX:MaxGCPauseTimeMillis options define a minimum mutator utilization (MMU). G1 will try for every possible time range of -XX:GCPauseIntervalMillis at most use -XX:MaxGCPauseTimeMillis milliseconds for garbage collection pauses. ;;;","2022-03-01 04:16;tschatzl;change:

in the ""Space-Reclamation Phase Generation Sizing"" (https://docs.oracle.com/en/java/javase/17/gctuning/garbage-first-g1-garbage-collector1.html#GUID-6D6B18B1-063B-48FF-99E3-5AF059C43CE8) section, replace the first paragraph:

During the space-reclamation phase, G1 tries to maximize the amount of space that is
reclaimed in the old generation in a single garbage collection pause. The size of the
young generation is set to the minimum allowed, typically as determined by -
XX:G1NewSizePercent.

Replace with

During the space-reclamation phase, G1 tries to maximize the amount of space that is reclaimed in the old generation in a single garbage collection pause. The size of the young generation is typically set to the minimum allowed, typically as determined by -XX:G1NewSizePercent, but also considering the MMU  specification.;;;","2022-03-01 04:57;tschatzl;change:

in the ""Observing Full Garbage Collections"" (https://docs.oracle.com/en/java/javase/17/gctuning/garbage-first-garbage-collector-tuning.html#GUID-0DD93225-0BCF-4605-B365-E9833F5BD2FC) section, replace the first paragraph:

A full heap garbage collection (Full GC) is often very time consuming. Full GCs caused
by too high heap occupancy in the old generation can be detected by finding the words
Pause Full (Allocation Failure) in the log. Full GCs are typically preceded by garbage
collections that encounter an evacuation failure indicated by to-space exhausted
tags.

with

A full heap garbage collection (Full GC) is often very time consuming. Full GCs caused
by too high heap occupancy in the old generation can be detected by finding the words
*Pause Full (G1 Compaction Pause)* in the log. Full GCs are typically preceded by garbage
collections that encounter an evacuation failure indicated by *Evacuation Failure*
tags.

;;;","2022-03-01 06:08;tschatzl;change:

in section ""Mixed Collections take too long"" (https://docs.oracle.com/en/java/javase/17/gctuning/garbage-first-garbage-collector-tuning.html#GUID-D2B6ADCE-6766-4FF8-AA9D-B7F4F3D0F469), replace first paragraph:

Mixed collections are used to reclaim space in the old generation. The collection set of
mixed collections contains young and old generation regions. You can obtain
information about how much time evacuation of either young or old generation regions
contribute to the pause-time by enabling the gc+ergo+cset=trace log output. Look at
the predicted young region time and predicted old region time for young and old generation
regions respectively.
If the predicted young region time is too long, then see Young-Only Collections Within the
Young-Only Phase Take Too Long for options. Otherwise, to reduce the contribution of the old
generation regions to the pause-time, G1 provides three options:

with

Mixed young collections are used to reclaim space in the old generation. The collection set of
mixed collections contains young and old generation regions. You can obtain
information about how much time evacuation of either young or old generation regions
contribute to the pause-time by enabling the gc+ergo+cset=debug log output. Look for the following log message:

Added young regions to CSet. [...] predicted eden time: 4.86ms, predicted base time: 9.98ms, target pause time: 200.00ms, [...]

Eden time and base time together give the predicted young region time, i.e. the time G1 expects evacuating the young generation will take.

The log message for predicting old region time looks as follows:

Finish choosing collection set old regions. [...] predicted initial time: 147.70ms, predicted optional time: 15.45ms, [...]

Here, predicted initial time represents predicted old region time, i.e. the time G1 expects evacuating the minimum set of old generation regions will take.

If the predicted young region time is too long, then see Young-Only Collections Within the
Young-Only Phase Take Too Long for options. Otherwise, to reduce the contribution of the old
generation regions to the pause-time, G1 provides three options:
;;;","2022-03-01 06:17;tschatzl;add:

after section ""Mixed Collections take too long"" (https://docs.oracle.com/en/java/javase/17/gctuning/garbage-first-garbage-collector-tuning.html#GUID-D2B6ADCE-6766-4FF8-AA9D-B7F4F3D0F469), add the following section

Collections Occur Back to Back

G1 default MMU settings allow back-to-back garbage collections. The default value of -XX:GCPauseIntervalMillis is just slightly higher than -XX:MaxGCPauseMillis. In case you observe continuous back-to-back garbage collections, which results in the application not progressing, increase the value of -XX:GCPauseIntervalMillis to an acceptable value. G1 will then try to space out garbage collections more. 
;;;","2022-03-01 08:24;tschatzl;change:

in section ""Garbage Collection Pauses and Collection Set"" (https://docs.oracle.com/en/java/javase/17/gctuning/garbage-first-g1-garbage-collector1.html#GUID-3A99AE6C-F80A-4565-A27C-B4AEDF5CDF71), before the paragraph

The collection set is the set of source regions to reclaim space from. Depending on the type
of garbage collection, the collection set consists of different kinds of regions:

add a ""Collection Set"" subheading;;;","2022-03-01 08:53;tschatzl;change:

 in section ""Garbage Collection Pauses and Collection Set"" (https://docs.oracle.com/en/java/javase/17/gctuning/garbage-first-g1-garbage-collector1.html#GUID-3A99AE6C-F80A-4565-A27C-B4AEDF5CDF71), at the end of the section add the following paragraphs (including a sub-heading)

Remembered Set

To evacuate the collection set G1 manages a remembered set: the set of locations outside the collection set that contain references into the collection set.
When an object from the collection set moves during garbage collection, any other references to that object from outside the collection set need to be changed to point to the new location of the object.

The remembered set entries represent approximate locations to save memory: often references close together reference objects close together. G1 logically partitions the heap into cards, by default 512 byte sized areas. Remembered set entries are compressed indexes of these cards.

For recovering the original references, G1 maintains two tables representing state of these cards, each taking up 1/card size percent of the Java heap.

G1 initially manages this remembered set on a per-region basis: every region contains a per-region remembered set, the set of locations with potential references into this region. During garbage collection, the remembered set for the entire collection set is generated from these.

The remembered sets are created mostly lazily: between the Remark and Cleanup pause G1 rebuilds the remembered set of all collection set candidate regions. Other than that G1 always maintains remembered sets for young generation region as they are collected at every collection and by default some humongous objects for eager reclaim.

Garbage Collection Process

A garbage collection consists of four phases.

  * the ""Pre Evacuate Collection Set"" phase performs some preparatory work for garbage collection: disconnecting TLABs from mutator threads, selecting the collection set for this collection as described in Section 7-4 ""Java Heap Sizing"" section and other small preparatory work.
  * during ""Merge Heap Roots"" G1 creates a single unified remembered set for later easier parallel processing from the collection set regions. This removes many duplicates from the individual remembered sets that would otherwise be needed to be filtered out later in a more expensive way.
  * the ""Evacuate Collection Set"" phase contains the bulk of the work: G1 starts moving objects starting from the roots. A root reference is a reference from outside the collection set, either from some VM internal data structure (External Roots), code (Code Roots) or from the remainder of the Java heap (Heap Roots). For all roots, G1 copies the referenced object in the collection set to its destination, processes its references into the collection set as new roots until there are no more roots.
Individual timing for these phases can be observed with -Xlog:gc+phases=debug logging in the Ext Root Scanning, Code Root Scan, Scan Heap Roots and Object Copy sub-phases respectively.
G1 may optionally repeat main evacuation phases for optional collection sets.
  * ""Post Evacuate Collection Set"" consists of clean-up work including reference processing and setup for the following mutator phase.

These phases correspond to the phases printed with -Xlog:gc+phases=info logging.;;;","2022-03-02 01:05;tschatzl;change:

in section ""High Update RS and Scan RS Times"" (https://docs.oracle.com/en/java/javase/17/gctuning/garbage-first-garbage-collector-tuning.html#GUID-A0343B53-A690-4DDE-98F9-9877096DBF0F) replace the whole subsection with:

High Merge Heap Roots and Scan Heap Roots Times

One way to reduce these phases is to decrease the number of remembered set entries in the combined remembered sets. Adjusting the size of the heap regions by using the option -XX:G1HeapRegionSize decreases the number of cross-region references  size of the remembered set. Larger regions tend to have fewer cross-region references, so the relative amount of work spent in processing them decreases, although at the same time, larger regions may mean more live objects to evacuate per region, increasing the time for other phases.

If a significant amount of time of the garbage collection, i.e. more than 60%, is spent in these two phases, one option could be decreasing the granularity of the remembered set entries by decreasing the value of the -XX:GCCardSizeInBytes option: higher granularity decreases the amount of work to find references, at the cost of some additional memory. See the ""Remembered Set"" section for more information about the tradeoff.

Spurious high Scan Heap Roots times in combination with the application allocating large objects may be caused by an optimization that tries to reduce concurrent remembered set updates work by batching it. If the application that created such a batch happens just before a garbage collection, this might have a negative impact on Merge Heap Roots time. Use -XX:-ReduceInitialCardMarks to disable this optimization and potentially avoid this situation.;;;","2022-03-03 02:12;tschatzl;change:

in section ""Garbage Collector, Heap, and Runtime Compiler Default Selections"" (https://docs.oracle.com/en/java/javase/17/gctuning/ergonomics.html#GUID-DA88B6A6-AF89-4423-95A6-BBCBD9FAE781), replace the item

* Garbage-First (G1) Collector

with

* Garbage-First (G1) Collector on server-class machines, Serial Collector otherwise.
;;;","2022-03-03 02:14;tschatzl;change:

in section ""Garbage Collector, Heap, and Runtime Compiler Default Selections"" (https://docs.oracle.com/en/java/javase/17/gctuning/ergonomics.html#GUID-DA88B6A6-AF89-4423-95A6-BBCBD9FAE781), at the end of the list:

add the note:

Note: The VM considers machines as server-class if the VM detects more than two processors and a heap size larger or equal to 1792 MB.;;;","2022-03-10 07:41;schetan;Hi Thomas,

I have incorporated the suggested changes. Request you to review and confirm if the changes looks OK.
Here is the link to html:
 https://docs-uat.us.oracle.com/en/java/javase/18/gctuning/index.html
;;;","2022-03-14 02:49;tschatzl;Everything seems good. I resolved this issue - I hope this is the correct way to carry documentation issues along the process.;;;",,,
vmTestbase/vm/mlvm/meth/stress/gc/callSequencesDuringGC/Test.java crashes in full gc during VM exit,JDK-8273940,5058778,Bug,Closed,JDK,JDK,software,duke,,,P1,Fixed,tschatzl,tschatzl,tschatzl,2021-09-17 05:08,2022-02-10 14:26,2023-10-01 09:57,2021-09-20 09:20,18,,,,,,,18,hotspot,,0,gc-g1,tier2,tier3,tier6,tier7,,,,,,,,,,,,,,,,,"vmTestbase/vm/mlvm/meth/stress/gc/callSequencesDuringGC/Test.java crashes after passing the test during a full gc:

### TRACE 1: RNG seed = -3538409234787716714 (0xcee50b8c5a843196)
For random generator using seed: -3538409234787716714
To re-run test with same seed value please add ""-Djdk.test.lib.random.seed=-3538409234787716714"" to command line.
### TRACE 1: TEST PASSED
# To suppress the following error report, specify this argument
# after -XX: or in .hotspotrc:  SuppressErrorAt=\\gc/g1/g1FullGCOopClosures.inline.hpp:91
[thread 47912 also had an error]
#
# A fatal error has been detected by the Java Runtime Environment:
#
#  Internal Error (...\\open\\src\\hotspot\\share\\gc/g1/g1FullGCOopClosures.inline.hpp:91), pid=55268, tid=50632
#  assert(G1CollectedHeap::heap()->is_in_reserved(forwardee)) failed: should be in object space
#
# JRE version: Java(TM) SE Runtime Environment (18.0+16) (fastdebug build 18-ea+16-845)
# Java VM: Java HotSpot(TM) 64-Bit Server VM (fastdebug 18-ea+16-845, compiled mode, sharing, tiered, compressed oops, compressed class ptrs, g1 gc, windows-amd64)
# Core dump will be written. Default location: ...\\test-support\\jtreg_open_test_hotspot_jtreg_vmTestbase_vm_mlvm\\scratch\\2\\hs_err_pid55268.mdmp
#
# An error report file with more information is saved as:
# T...\\jtreg_open_test_hotspot_jtreg_vmTestbase_vm_mlvm\\scratch\\2\\hs_err_pid55268.log
[thread 27724 also had an error]
#
# If you would like to submit a bug report, please visit:
#   https://bugreport.java.com/bugreport/crash.jsp
#",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8274416,,,JDK-8274007,JDK-8274416,,,,JDK-8273605,,,,,,,,,,,,,,,,,,,,,,,,"0|i2udsz:",9223372036854775807,b16,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6b00f96c,,,,,,,Verified,,"2021-09-19 22:25;dholmes;There are now multiple different crashes in this test linked to his bug:

#  assert(G1CollectedHeap::heap()->is_in_reserved(forwardee)) failed: should be in object space

Native frames: (J=compiled Java code, j=interpreted, Vv=VM code, C=native code)
V  [jvm.dll+0xadd241]  os::platform_print_native_stack+0xf1  (os_windows_x86.cpp:235)
V  [jvm.dll+0xcfbe05]  VMError::report+0x1005  (vmError.cpp:742)
V  [jvm.dll+0xcfd7ae]  VMError::report_and_die+0x7fe  (vmError.cpp:1552)
V  [jvm.dll+0xcfdf34]  VMError::report_and_die+0x64  (vmError.cpp:1333)
V  [jvm.dll+0x4cda67]  report_vm_error+0xb7  (debug.cpp:282)
V  [jvm.dll+0x5d0c8a]  G1AdjustClosure::adjust_pointer<oopDesc *>+0x20a  (g1FullGCOopClosures.inline.hpp:91)

---

#  assert(check_alignment(result)) failed: address not aligned: 0x000000082f617661

Stack: [0x000000a83b800000,0x000000a83b900000]
Native frames: (J=compiled Java code, j=interpreted, Vv=VM code, C=native code)
V  [jvm.dll+0xadd241]  os::platform_print_native_stack+0xf1  (os_windows_x86.cpp:235)
V  [jvm.dll+0xcfbe05]  VMError::report+0x1005  (vmError.cpp:742)
V  [jvm.dll+0xcfd7ae]  VMError::report_and_die+0x7fe  (vmError.cpp:1552)
V  [jvm.dll+0xcfdf34]  VMError::report_and_die+0x64  (vmError.cpp:1333)
V  [jvm.dll+0x4cda67]  report_vm_error+0xb7  (debug.cpp:282)
V  [jvm.dll+0x1dbc4]  CompressedKlassPointers::decode_not_null+0x84  (compressedOops.inline.hpp:129)
V  [jvm.dll+0x5d78dc]  HeapRegion::apply_to_marked_objects<G1FullGCPrepareTask::G1PrepareCompactLiveClosure>+0x12c  (heapRegion.inline.hpp:245)
V  [jvm.dll+0x5d80b9]  G1FullGCPrepareTask::G1CalculatePointersClosure::prepare_for_compaction+0xa9  (g1FullGCPrepareTask.cpp:200)
V  [jvm.dll+0x5d7dbe]  G1FullGCPrepareTask::G1CalculatePointersClosure::do_heap_region+0x10e  (g1FullGCPrepareTask.cpp:59)
V  [jvm.dll+0x6724b6]  HeapRegionManager::par_iterate+0x156  (heapRegionManager.cpp:608)
V  [jvm.dll+0x5d85b1]  G1FullGCPrepareTask::work+0xa1  (g1FullGCPrepareTask.cpp:122)
V  [jvm.dll+0xd41dea]  GangWorker::loop+0x8a  (workgroup.cpp:239)

---

#  assert(!is_free(obj)) failed: Should not have objects in free regions.
# Problematic frame:
# V  [libjvm.so+0xc5a27c]  void G1AdjustClosure::adjust_pointer<oop>(oop*)+0x5fc


9 failures over last 3 days;;;","2021-09-20 02:44;tschatzl;Stack trace from one of the failures with the

 # assert(!is_free(obj)) failed: Should not have objects in free regions.
# Problematic frame:
# V [libjvm.so+0xc5a27c] void G1AdjustClosure::adjust_pointer<oop>(oop*)+0x5fc 

message shows that we are processing oopstorage when finding a bad oop:

#27 0x00007fab25e5c2c6 in G1FullGCHeapRegionAttr::is_compacting (obj=<optimized out>, this=<optimized out>) at /src/hotspot/share/gc/g1/g1FullGCHeapRegionAttr.hpp:69
#28 G1FullCollector::is_compacting (obj=..., obj=..., this=0x7faaf532e490) at /src/hotspot/share/gc/g1/g1FullCollector.inline.hpp:35
#29 G1AdjustClosure::adjust_pointer<oop> (this=<optimized out>, p=0x7fab20368880) at /src/hotspot/share/gc/g1/g1FullGCOopClosures.inline.hpp:74
#30 0x00007fab25e699dd in G1AdjustClosure::do_oop_work<oop> (p=0x7fab20368880, this=0x7faaf532e310) at /src/hotspot/share/gc/g1/g1FullGCOopClosures.hpp:86
#31 G1AdjustClosure::do_oop (p=0x7fab20368880, this=0x7faaf532e310) at /src/hotspot/share/gc/g1/g1FullGCOopClosures.inline.hpp:95
#32 WeakProcessor::CountingClosure<AlwaysTrueClosure, G1AdjustClosure>::do_oop (p=0x7fab20368880, this=<synthetic pointer>) at /src/hotspot/share/gc/shared/weakProcessor.inline.hpp:65
#33 OopStorage::OopFn<WeakProcessor::CountingClosure<AlwaysTrueClosure, G1AdjustClosure> >::operator()<oop*> (ptr=0x7fab20368880, this=<synthetic pointer>) at /src/hotspot/share/gc/shared/oopStorage.inline.hpp:240
#34 OopStorage::BasicParState::AlwaysTrueFn<OopStorage::OopFn<WeakProcessor::CountingClosure<AlwaysTrueClosure, G1AdjustClosure> > >::operator()<oop*> (ptr=0x7fab20368880, this=<synthetic pointer>) at /src/hotspot/share/gc/shared/oopStorageParState.inline.hpp:42
#35 OopStorage::Block::iterate_impl<OopStorage::BasicParState::AlwaysTrueFn<OopStorage::OopFn<WeakProcessor::CountingClosure<AlwaysTrueClosure, G1AdjustClosure> > >, OopStorage::Block*> (block=0x7fab20368880, f=...) at /src/hotspot/share/gc/shared/oopStorage.inline.hpp:337
#36 OopStorage::Block::iterate<OopStorage::BasicParState::AlwaysTrueFn<OopStorage::OopFn<WeakProcessor::CountingClosure<AlwaysTrueClosure, G1AdjustClosure> > > > (f=..., this=0x7fab20368880) at /src/hotspot/share/gc/shared/oopStorage.inline.hpp:346
#37 OopStorage::BasicParState::iterate<false, OopStorage::OopFn<WeakProcessor::CountingClosure<AlwaysTrueClosure, G1AdjustClosure> > > (f=..., this=0x7faaf532e110) at /src/hotspot/share/gc/shared/oopStorageParState.inline.hpp:63
#38 OopStorage::ParState<false, false>::iterate<OopStorage::OopFn<WeakProcessor::CountingClosure<AlwaysTrueClosure, G1AdjustClosure> > > (f=..., this=0x7faaf532e110) at /src/hotspot/share/gc/shared/oopStorageParState.inline.hpp:82
#39 OopStorage::ParState<false, false>::oops_do<WeakProcessor::CountingClosure<AlwaysTrueClosure, G1AdjustClosure> > (cl=<synthetic pointer>, this=0x7faaf532e110) at /src/hotspot/share/gc/shared/oopStorageParState.inline.hpp:87
#40 WeakProcessor::Task::work<AlwaysTrueClosure, G1AdjustClosure> (this=this@entry=0x7faaf532e0b0, worker_id=worker_id@entry=0, is_alive=is_alive@entry=0x7faaf41f7ce8, keep_alive=keep_alive@entry=0x7faaf532e310) at /src/hotspot/share/gc/shared/weakProcessor.inline.hpp:91
#41 0x00007fab25e659a3 in G1FullGCAdjustTask::work (this=0x7faaf532df30, worker_id=0) at /src/hotspot/share/gc/g1/g1FullGCAdjustTask.cpp:106

ConcurrentMark::_has_aborted = true, so maybe that full gc aborted the conc mark as g1CollectorState::_mark_or_rebuild_in_progress = true too.

That object reference is 0xffe56bd8, that points to

|  13|0x0000000084b00000, 0x0000000084b00000, 0x0000000084c00000|  0%| F|  |TAMS 0x0000000084b00000, 0x0000000084b00000| Untracked
|  14|0x0000000084c00000, 0x0000000084c00000, 0x0000000084d00000|  0%| F|  |TAMS 0x0000000084c00000, 0x0000000084c00000| Untracked
|1984|0x00000000ffe00000, 0x00000000ffe00000, 0x00000000fff00000|  0%| F|  |TAMS 0x00000000ffe00000, 0x00000000ffe00000| Untracked
|1985|0x00000000fff00000, 0x00000000fff76000, 0x0000000100000000| 46%|CA|  |TAMS 0x00000000fff76000, 0x00000000fff76000| Untracked

I.e. a former Open Archive region (it's number is 1984, so highly likely an OA region) that is now a free region. Some issue with reclaiming completely empty OA regions?;;;","2021-09-20 03:12;tschatzl;The 

 # assert(G1CollectedHeap::heap()->is_in_reserved(forwardee)) failed: should be in object space

error gives ~this stack trace (OSX)

Native frames: (J=compiled Java code, j=interpreted, Vv=VM code, C=native code) 

crash:

V  [libjvm.dylib+0x5d649d]  report_vm_error(char const*, int, char const*, char const*, ...)+0xdd
V  [libjvm.dylib+0x730e64]  void G1AdjustClosure::adjust_pointer<oop>(oop*)+0x3c4
V  [libjvm.dylib+0x5382db]  ClassLoaderData::oops_do(OopClosure*, int, bool)+0x8b
V  [libjvm.dylib+0x53dc36]  ClassLoaderDataGraph::roots_cld_do(CLDClosure*, CLDClosure*)+0x56
V  [libjvm.dylib+0x797d74]  G1RootProcessor::process_java_roots(G1RootClosures*, G1GCPhaseTimes*, unsigned int)+0xc4
V  [libjvm.dylib+0x7982d6]  G1RootProcessor::process_all_roots(OopClosure*, CLDClosure*, CodeBlobClosure*)+0x36
V  [libjvm.dylib+0x72fba0]  G1FullGCAdjustTask::work(unsigned int)+0x1a0
V  [libjvm.dylib+0x1158d6e]  GangWorker::run_task(WorkData)+0x5e

Apparently bad oop in the CLDG?

No particular observations with archive regions:

| 130|0x00000007c8200000, 0x00000007c8200000, 0x00000007c8300000|  0%| F|  |TAMS 0x00000007c8200000, 0x00000007c8200000| Untracked 
|1022|0x00000007ffe00000, 0x00000007ffe74000, 0x00000007fff00000| 45%|OA|  |TAMS 0x00000007ffe74000, 0x00000007ffe74000| Untracked 
|1023|0x00000007fff00000, 0x00000007fff72000, 0x0000000800000000| 44%|CA|  |TAMS 0x00000007fff00000, 0x00000007fff72000| Untracked 

Log output (added -Xlog:gc,gc+marking):

[0.964s][info][gc,marking] GC(12) Concurrent Mark Abort
[0.964s][info][gc        ] GC(12) Concurrent Undo Cycle 61.103ms
### TRACE 1: TEST PASSED
[1.038s][info][gc        ] GC(14) Pause Young (Concurrent Start) (G1 Humongous Allocation) 4M->1M(10M) 42.141ms
[1.038s][info][gc        ] GC(15) Concurrent Undo Cycle
[1.038s][info][gc,marking] GC(15) Concurrent Cleanup for Next Mark
# To suppress the following error report, specify this argument
# after -XX: or in .hotspotrc:  SuppressErrorAt=/g1FullGCOopClosures.inline.hpp:91
|1364|0x00000007ffe00000, 0x00000007ffe74000, 0x00000007fff00000| 45%|OA|  |TAMS 0x00000007ffe74000, 0x00000007ffe74000| Untracked 
|1365|0x00000007fff00000, 0x00000007fff72000, 0x0000000800000000| 44%|CA|  |TAMS 0x00000007fff00000, 0x00000007fff72000| Untracked ;;;","2021-09-20 03:14;tschatzl;Another

#  assert(!is_free(obj)) failed: Should not have objects in free regions.

crash:

0.754s][info][gc        ] GC(10) Concurrent Undo Cycle 1.351ms
[0.898s][info][gc        ] GC(11) Pause Full (System.gc()) 10M->1M(17M) 111.757ms
### TRACE 1: TEST PASSED
[1.050s][info][gc        ] GC(12) Pause Young (Concurrent Start) (G1 Humongous Allocation) 6M->4M(17M) 78.479ms
[1.050s][info][gc        ] GC(13) Concurrent Mark Cycle
[1.050s][info][gc,marking] GC(13) Concurrent Clear Claimed Marks
[1.050s][info][gc,marking] GC(13) Concurrent Clear Claimed Marks 0.007ms
[1.050s][info][gc,marking] GC(13) Concurrent Scan Root Regions
[1.050s][info][gc,marking] GC(13) Concurrent Scan Root Regions 0.187ms
[1.050s][info][gc,marking] GC(13) Concurrent Mark
[1.050s][info][gc,marking] GC(13) Concurrent Mark From Roots
# To suppress the following error report, specify this argument
# after -XX: or in .hotspotrc:  SuppressErrorAt=/g1FullGCHeapRegionAttr.hpp:69
#
# A fatal error has been detected by the Java Runtime Environment:
#
#  Internal Error (open/src/hotspot/share/gc/g1/g1FullGCHeapRegionAttr.hpp:69), pid=51351, tid=11779
#  assert(!is_free(obj)) failed: Should not have objects in free regions.

with the following stack trace:

V  [jvm.dll+0x4cda67]  report_vm_error+0xb7  (debug.cpp:282)
V  [jvm.dll+0x5d0c8a]  G1AdjustClosure::adjust_pointer<oopDesc *>+0x20a  (g1FullGCOopClosures.inline.hpp:91)
V  [jvm.dll+0x451c98]  ClassLoaderData::ChunkedHandleList::oops_do_chunk+0x58  (classLoaderData.cpp:212)
V  [jvm.dll+0x451b3c]  ClassLoaderData::ChunkedHandleList::oops_do+0x3c  (classLoaderData.cpp:224)
V  [jvm.dll+0x455379]  ClassLoaderDataGraph::roots_cld_do+0x59  (classLoaderDataGraph.cpp:275)
V  [jvm.dll+0x6080fa]  G1RootProcessor::process_java_roots+0xda  (g1RootProcessor.cpp:193)
V  [jvm.dll+0x607fc3]  G1RootProcessor::process_all_roots+0x43  (g1RootProcessor.cpp:140)
V  [jvm.dll+0x5d388a]  G1FullGCAdjustTask::work+0x25a  (g1FullGCAdjustTask.cpp:113)
V  [jvm.dll+0xd41eea]  GangWorker::loop+0x8a  (workgroup.cpp:239)

That one does not have archive regions at all (on Windows?);;;","2021-09-20 04:13;tschatzl;I do not think this has much to do about archive regions after all.

Initially I though maybe this is about aborting Concurrent Undo operations as most (all?) OSX crashes seem to be that way, but the Windows crash above disproves that theory.

It looks like there is an issue with JDK-8273605. At least with that reverted, 2000 executions of this test are fine, while otherwise there is a ~2% failure rate.;;;","2021-09-20 09:20;roboduke;Changeset: 4b3a4fff
Author:    Thomas Schatzl <tschatzl@openjdk.org>
Date:      2021-09-20 16:17:52 +0000
URL:       https://git.openjdk.java.net/jdk/commit/4b3a4fff39c1fba0d7eae719525e2a46b0a6d6ed
;;;",,,,,,,,,,,,,,,,,,,,
Backport of 8248414 to JDK11 breaks MacroAssembler::adrp,JDK-8273939,5058777,Bug,Resolved,JDK,JDK,software,duke,,,P1,Fixed,vkempik,vkempik,vkempik,2021-09-17 04:41,2021-11-03 07:27,2023-10-01 09:57,2021-09-18 14:12,11.0.13,,,,,,,11.0.13,hotspot,,0,jdk11u-critical-request,jdk11u-critical-yes,oraclejdk-na,oracle-triage-18,,,,,,,,,,,,,,,,,,"Backport 8248414 to openjdk11 removed a line which was not supposed to be removed, need to restore it asap.
https://github.com/openjdk/jdk11u/commit/bf01efaa24c58bcc87d465325e8c130c35148294#diff-0f4150a9c607ccd590bf256daa800c0276144682a92bc6bdced5e8bc1bb81f3aL4246

the issue was found during testing of zulu11 with latest openjdk fixes on macos12beta_arm64. Affects linux_aarch64 too when working with memory regions above 32-bits limit

jdk16/17 aren't affected",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8248414,,,,,,,,,,aarch64,,,,,,,,,,,,,,"0|i2udsr:",9223372036854775807,b01,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2021-09-17 05:12;vkempik;Fix Request (11u, critical):

This fixes issue introduced by backport of 8248414 to 11 ( by mistake). this fix simply reverts one line of 8248414. Pretty safe.
Will break linux-aarch64 when working with memory regions above 32-bits limit.
It's important to get it into 11.0.13;;;","2021-09-18 14:05;clanger;Approved for 11.0.13. Please integrate jdk11u PR and close the 11u-dev one. It'll get merged over there soon.;;;","2021-09-18 14:12;roboduke;Changeset: f336c729
Author:    Vladimir Kempik <vkempik@openjdk.org>
Date:      2021-09-18 21:10:28 +0000
URL:       https://git.openjdk.java.net/jdk11u/commit/f336c729e35b6793d0910beec167b2c739ec95e7
;;;","2021-09-22 02:26;roboduke;Changeset: f336c729
Author:    Vladimir Kempik <vkempik@openjdk.org>
Date:      2021-09-18 21:10:28 +0000
URL:       https://git.openjdk.java.net/jdk11u-dev/commit/f336c729e35b6793d0910beec167b2c739ec95e7
;;;",,,,,,,,,,,,,,,,,,,,,,
(zipfs) Files.getFileAttributeView() throws UOE instead of returning null when view not supported,JDK-8273935,5058773,Bug,Closed,JDK,JDK,software,duke,,,P4,Fixed,lancea,sgehwolf,sgehwolf,2021-09-17 02:25,2022-04-25 06:31,2023-10-01 09:57,2021-09-21 12:27,17,18,,,,,,18,core-libs,,0,jdk15u-fix-request,jdk15u-fix-yes,jdk17u-fix-request,jdk17u-fix-yes,,,,,,,,,,,,,,,,,,"When trying to get a FileAttributeView from a zip entry JDK 17+ throws an undeclared UnsupportedOperationException. The javadoc of Files.getFileAttributeView() says:

https://docs.oracle.com/en/java/javase/17/docs/api/java.base/java/nio/file/Files.html#getFileAttributeView(java.nio.file.Path,java.lang.Class,java.nio.file.LinkOption...)
""""""
Returns:
    a file attribute view of the specified type, or null if the attribute view type is not available
""""""

Yet, an exception is thrown in some cases. That is a regression to JDK 11. See the attached reproducer.

JDK 11 run:
--------------------------
Debug: Creating test-zip-file.zip...
Debug: reading entry: /noperm_entry
Debug: os.name == Linux
Non-Windows Test PASSED! env=posix view=null, featureVersion: 11
Debug: reading entry: /noperm_entry
Debug: os.name == Linux
Non-Windows Test PASSED! env=empty view=null, featureVersion: 11

JDK 17+ runs:
--------------------------
Debug: Creating test-zip-file.zip...
Debug: reading entry: /noperm_entry
Debug: os.name == Linux
Non-Windows Test PASSED! env=posix view=jdk.nio.zipfs.ZipPosixFileAttributeView@2f2c9b19, featureVersion: 17
Debug: reading entry: /noperm_entry
Debug: Files.getFileAttributeView() threw exception: java.lang.UnsupportedOperationException: view <interface java.nio.file.attribute.PosixFileAttributeView> is not supported
Debug: os.name == Linux
Exception in thread ""main"" java.lang.RuntimeException: Test failed! view=null
	at TestPosixAttributeView.runTest(TestPosixAttributeView.java:83)
	at TestPosixAttributeView.main(TestPosixAttributeView.java:105)

This was originally reported here, where the issue is that on Windows, where Posix permissions are not supported, suddenly throws an exception when it didn't before JDK-8213031:
https://github.com/adoptium/adoptium-support/issues/363",,,,,,,,,,,JDK-8285582,JDK-8274607,,,,,,,,,,,,,,,,,,,,JDK-8282425,,,JDK-8213031,,,,,,,,,,"2021-09-17 02:24;sgehwolf;TestPosixAttributeView.java;https://bugs.openjdk.org/secure/attachment/96469/TestPosixAttributeView.java",,,,,generic,,,,,,,14,,generic,,,,,"0|i2udrv:",9223372036854775807,b16,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@674604a9,,,,,,,Verified,,"2021-09-17 02:25;sgehwolf;[~clanger] Perhaps you want to have a look at this?;;;","2021-09-17 03:44;lancea;Looks like line 71 which throws UnsupportedOperationException, should  just return null as UnixFileSystemProvider does;;;","2021-09-21 12:27;roboduke;Changeset: 161fdb4a
Author:    Lance Andersen <lancea@openjdk.org>
Date:      2021-09-21 19:23:49 +0000
URL:       https://git.openjdk.java.net/jdk/commit/161fdb4afbc6e67cc7580fe753112c4d894a9b6b
;;;","2021-09-29 10:03;sgehwolf;Fix Request (OpenJDK 17u):

Please approve backporting this fix to 17u. The problem exists there too and was actually discovered as a change in an 11->17 upgrade attempt. The JDK 18 change applies clean and no regressions observed. Should be low risk (return null instead of throwing an undeclared exception).;;;","2022-04-08 03:45;sqetools;verified;;;","2022-04-25 05:38;yan;Fix request (15u)

I'd like to backport it to 15 where this issue exists, too. Applies perfectly barring a comma in copyright.  All zipfs tests pass OK.;;;","2022-04-25 05:43;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk15u-dev/pull/199
Date: 2022-04-25 12:38:07 +0000;;;",,,,,,,,,,,,,,,,,,,
[TESTBUG] Test must run without preallocated exceptions,JDK-8273933,5058770,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,neliasso,neliasso,neliasso,2021-09-17 02:19,2022-01-21 04:23,2023-10-01 09:57,2021-09-20 08:01,17,18,,,,,,18,hotspot,,0,hs-comp-triaged,jdk11u-fix-request,jdk11u-fix-yes,jdk17u-fix-request,jdk17u-fix-yes,noreg-self,oracle-triage-18,,,,,,,,,,,,,,,"Executing vmTestbase/jit/t/t105/t105.java with the fix for (JDK-8273277) makes the test fail when run with the following arguments:

-XX:+TieredCompilation
-XX:Tier0BackedgeNotifyFreqLog=0
-XX:Tier2BackedgeNotifyFreqLog=0
-XX:Tier3BackedgeNotifyFreqLog=0
-XX:Tier2BackEdgeThreshold=1
-XX:Tier3BackEdgeThreshold=1
-XX:Tier4BackEdgeThreshold=1
-Xbatch

The problem is that the tests expects a detailed message from ArrayIndexOutOfBoundsException, but this test will trigger the optimization that reuses preallocated exceptions that have an empty detailed exceptions. 

It is wrong for the test to assume exceptions messages. 

Solution Disable preallocated exceptions with the flag -XX:-ProfileTraps.



",,,,,,,,,,,JDK-8279448,JDK-8280453,JDK-8279554,JDK-8279497,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8273277,,,,,,,,,,,,,,,,,,,,,,,,"0|i2udr7:",9223372036854775807,b16,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2021-09-17 03:42;chagedorn;ILW = Test failure with backedge flags, single test, use -XX:-ProfileTraps = MLM = P4;;;","2021-09-20 08:01;roboduke;Changeset: 4d95a5d6
Author:    Nils Eliasson <neliasso@openjdk.org>
Date:      2021-09-20 14:59:44 +0000
URL:       https://git.openjdk.java.net/jdk/commit/4d95a5d6dc7cc3d2b239c554a1302ac647807bd6
;;;","2022-01-04 07:48;goetz;Fix request [17u]

I backport this for parity with 11.0.15-oracle.
As it is in 11, it should go to 17, too.
No risk, only a test change.
Clean backport.
Test passes.;;;","2022-01-04 07:54;roboduke;A pull request was submitted for review.

URL: https://git.openjdk.java.net/jdk17u-dev/pull/57
Date: 2022-01-04 15:48:53 +0000
;;;","2022-01-19 12:44;goetz;Fix request [11u]

I backport this for parity with 11.0.15-oracle.
No risk, only a test change.
Clean backport.
Test passes.;;;","2022-01-19 12:48;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk11u-dev/pull/783
Date: 2022-01-19 20:43:31 +0000;;;",,,,,,,,,,,,,,,,,,,,
ArrayIndexOutOfBoundsException thrown in java.util.JapaneseImperialCalendar.add(),JDK-8273924,5058758,Bug,Closed,JDK,JDK,software,duke,,,P3,Fixed,naoto,shadowbug,shadowbug,2021-09-16 21:08,2022-04-08 03:45,2023-10-01 09:57,2021-09-22 08:52,11.0.13,16.0.2,18,8u271,,,,18,core-libs,,0,bugdb_33365808,jdk11u-fix-request,jdk11u-fix-yes,jdk17u-fix-request,jdk17u-fix-SQE-ok-next,jdk17u-fix-yes,licbug,sustaining,,,,,,,,,,,,,,"java.util.Calendar.add throws ArrayIndexOutOfBoundsException under the below condition.

X = 1- ((Calendar.MONTH+1) + amount), and if X is a multiple of 12, AIOOBE is thrown.

The reproducer is below:

jshell> var calendar = Calendar.getInstance(new Locale(""ja"", ""JP"", ""JP""))
calendar ==> java.util.JapaneseImperialCalendar[time=163184924 ...
SET=32400000,DST_OFFSET=0]

jshell> var month = 2
month ==> 2

jshell> var amount = -14
amount ==> -14

jshell> calendar.set(2, month, 1, 1, 0)

jshell> calendar.add(Calendar.MONTH, amount)
|  例外java.lang.ArrayIndexOutOfBoundsException: Index 13 out of bounds for
length 13
|        at BaseCalendar.getDayOfYear (BaseCalendar.java:348)
|        at BaseCalendar.getFixedDate (BaseCalendar.java:381)
|        at BaseCalendar.getFixedDate (BaseCalendar.java:356)
|        at AbstractCalendar.getTime (AbstractCalendar.java:175)
|        at BaseCalendar.normalize (BaseCalendar.java:228)
|        at LocalGregorianCalendar.normalize
(LocalGregorianCalendar.java:328)
|        at JapaneseImperialCalendar.pinDayOfMonth
(JapaneseImperialCalendar.java:2288)
|        at JapaneseImperialCalendar.add (JapaneseImperialCalendar.java:452)
|        at (#5:1)


In this reproducer, X=1-((2+1)+(-14)) = 12.  In this case, AIOOBE is thrown.
The issue is reproduced in 18, 16.0.2, 11.0.13 and 8u311.",,,,,,,,,,,JDK-8274831,JDK-8274248,JDK-8274247,JDK-8274246,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,generic,,,,,,,,,generic,,,,,"0|i2udoj:",9223372036854775807,b16,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@7644fb4c,,,,,,,Verified,,"2021-09-22 08:52;roboduke;Changeset: d39aad92
Author:    Naoto Sato <naoto@openjdk.org>
Date:      2021-09-22 15:50:49 +0000
URL:       https://git.openjdk.java.net/jdk/commit/d39aad92308fbc28bd2de164e331062ebf62da85
;;;","2021-09-28 00:14;ysatowse;Fix request (17u): 
request to include in 17u, applies cleanly, all relevant tests passed.;;;","2021-10-05 05:50;mdoerr;Fix Request (11u):
Should get backported for parity with 11.0.14-oracle. Applies cleanly.;;;","2022-04-08 03:45;sqetools;verified;;;",,,,,,,,,,,,,,,,,,,,,,
(fs) UserDefinedFileAttributeView doesn't handle file names that are just under the MAX_PATH limit (win),JDK-8273922,5058706,Bug,Closed,JDK,JDK,software,duke,,,P4,Fixed,bpb,webbuggrp,webbuggrp,2021-09-16 03:58,2022-06-08 23:34,2023-10-01 09:57,2021-11-03 09:56,11,17,18,7,,,,18,core-libs,,0,dcsaw,reproducer-yes,webbug,,,,,,,,,,,,,,,,,,,"A DESCRIPTION OF THE PROBLEM :
There's a bug in the Windows NIO FS implementation revealed by the attached test case. The cause is inconsistent handling of MAX_PATH limits. Windows treats extended attributes as just any other kind of file with a "":ea-name"" suffix. When a path is just under the MAX_PATH length, adding the name of the extended attribute can push it over the limit, which would require a magic \\?\ prefix to be added to the path. This doesn't happen, creating a small ""black hole"" where paths of just the wrong length can't have EAs set.

From examining the code, it tries to use short path form when possible (WindowsPath.java:178). It isn't clear to me why the code tries to do this. There don't seem to be any advantages to using the non \\?\ prefixed form, implying the code could be simplified by always using the long-capable form.

STEPS TO FOLLOW TO REPRODUCE THE PROBLEM :
1. Compile and run attached test case on a Windows system.
2. Observe that an exception is thrown for the long EA name but not for the short EA name.
3. Play with the value of ""padding"" to see that the issue goes away if the path length is adjusted.

EXPECTED VERSUS ACTUAL BEHAVIOR :
EXPECTED -
No exception.
ACTUAL -
Exception in thread ""main"" java.nio.file.NoSuchFileException: C:\scratch\ea-length-bug\xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx:reallyquitelonglongattrname
        at java.base/sun.nio.fs.WindowsException.translateToIOException(WindowsException.java:85)
        at java.base/sun.nio.fs.WindowsException.rethrowAsIOException(WindowsException.java:96)
        at java.base/sun.nio.fs.WindowsUserDefinedFileAttributeView.write(WindowsUserDefinedFileAttributeView.java:202)
        at java.base/sun.nio.fs.AbstractUserDefinedFileAttributeView.setAttribute(AbstractUserDefinedFileAttributeView.java:72)
        at java.base/sun.nio.fs.AbstractFileSystemProvider.setAttribute(AbstractFileSystemProvider.java:81)
        at java.base/java.nio.file.Files.setAttribute(Files.java:1911)
        at software.hydraulic.ExtendedAttributeLengthBugTest.setEA(ExtendedAttributeLengthBugTest.java:39)
        at software.hydraulic.ExtendedAttributeLengthBugTest.main(ExtendedAttributeLengthBugTest.java:27)

---------- BEGIN SOURCE ----------
import java.io.IOException;
import java.nio.ByteBuffer;
import java.nio.charset.StandardCharsets;
import java.nio.file.Files;
import java.nio.file.Path;

public class ExtendedAttributeLengthBugTest {
    public static void main(String[] args) throws IOException {
        // Somewhere we can try out the bug.
        var tmp = Files.createDirectory(Path.of(""ea-length-bug"")).toAbsolutePath();
        try {
            // Temp directory adds some characters.
            var len = tmp.toString().length();
            // We need to run up to MAX_PATH for directories, but not quite go over it.
            var MAX_PATH = 247;
            var requiredLen = MAX_PATH - len - 2;
            // Create a really long directory name.
            Path longPath = tmp.resolve(""x"".repeat(requiredLen));
            // Make sure the directory exists.
            Files.createDirectory(longPath);
            // Try to set an extended attribute on it.
            try {
                setEA(longPath, ""user:short"");
                setEA(longPath, ""user:reallyquitelonglongattrname"");
            } finally {
                Files.delete(longPath);
            }
            // Should get here but can't because the length of the EA name + the file name > MAX_PATH.
        } finally {
            Files.delete(tmp);
        }
    }

    private static void setEA(Path longPath, String s) throws IOException {
        System.out.println(""Setting short EA '"" + s + ""' on path of length "" + longPath.toString().length());
        Files.setAttribute(longPath, s, ByteBuffer.wrap(""ea-value"".getBytes(StandardCharsets.UTF_8)));
    }
}

---------- END SOURCE ----------

CUSTOMER SUBMITTED WORKAROUND :
There is none beyond ensuring the path length never falls into the ""bad zone"", but this is often infeasible when parts of the path are chosen by the user.

",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8276661,JDK-8288088,,,,,,,,,"2021-09-16 20:47;tongwan;ExtendedAttributeLengthBugTest.java;https://bugs.openjdk.org/secure/attachment/96466/ExtendedAttributeLengthBugTest.java",,,,,x86_64,,,,,,,,,windows_10,,,,,"0|i2udcz:",9223372036854775807,b23,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@674604a9,,,,,,,Verified,,"2021-09-16 20:46;tongwan;The observations on Windows 10:
JDK 8: The test case is not applicable.
JDK 11: Failed, NoSuchFileException thrown
JDK 17: Failed.
JDK 18ea+1: Failed.;;;","2021-09-16 22:31;alanb;The issue here is that that "":<name>"" is added after the file path for Windows is determined, looks like this issue goes back to JDK 7.;;;","2021-11-03 09:56;roboduke;Changeset: 684edbb4
Author:    Brian Burkhalter <bpb@openjdk.org>
Date:      2021-11-03 16:55:23 +0000
URL:       https://git.openjdk.java.net/jdk/commit/684edbb4c884cbc3e05118e4bc9808b5d5b71a74
;;;","2022-04-13 04:18;sqetools;verified;;;",,,,,,,,,,,,,,,,,,,,,,
Indy string concat changes order of operations,JDK-8273914,5058743,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,cushon,cushon,cushon,2021-09-16 16:37,2023-05-17 12:59,2023-10-01 09:57,2022-01-11 07:46,11,13,15,17,18,19,,19,tools,,0,amazon-interest,redhat-interest,release-note=yes,,,,,,,,,,,,,,,,,,,"The invokedynamic string concatenation strategies don't preserve the order of operations when evaluating subexpressions and converting them to strings.

With the inline strategy, each subexpression is evaluated and converted to a string in order. With indy each subexpression is evaluated in order *but not converted to a string*, and later each subexpression is converted to a string in order.

Originally reported on compiler-dev@ [1]. briangoetz confirmed the original behaviour of the inline strategy [2] is correct, and sketched one possible fix [3]:

> The nature of indy leads to the structure we ended up with.  The natural 
> way to do this is to have the various arguments passed as real stack 
> arguments, causing them to all be evaluated before being pushed through 
> the MH nest (which is where the string conversion happens, using 
> MethodHandle::filterArguments.)  We'd essentially have to write a new 
> bootstrap (but leave the old one in place), and have the compiler 
> generate bytecode to do the string conversion as the values are being 
> pushed on the stack.  This requires a different bootstrap and a 
> different calling convention.  So old bytecode will stay around, and the 
> old bootstrap would have to be kept around ... pretty disruptive.

[1] https://mail.openjdk.java.net/pipermail/compiler-dev/2021-September/017911.html
[2] https://mail.openjdk.java.net/pipermail/compiler-dev/2021-September/017912.html
[3] https://mail.openjdk.java.net/pipermail/compiler-dev/2021-September/017929.html

Repro:

class T {
  static String test() {
    StringBuilder builder = new StringBuilder(""foo"");
    return """" + builder + builder.append(""bar"");
  }

  public static void main(String[] args) {
    System.err.println(test());
  }
}

$ javac -XDstringConcat=inline T.java ; java T
foofoobar

$ javac -XDstringConcat=indy T.java ; java T
foobarfoobar",,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8274863,,,JDK-8282627,,,,,JCK-7317157,,,,,JDK-8085796,,,,,,,,,,,,,,,,,,,,,,,,"0|i2udl7:",9223372036854775807,b05,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4dca67bd,,,,,,,,,"2021-10-06 06:38;shade;It looks to me that the easier way to solve this would be to call toString() on all non-trivial inputs to existing SCF BSM. (Trivial: primitives, String, Numbers, etc.);;;","2021-10-06 09:44;redestad;StringBuilder builder = new StringBuilder(""foo"");
System.out.println("""" + builder + builder.append(""bar""));

translates to:

         0: new           #7                  // class java/lang/StringBuilder
         3: dup
         4: ldc           #9                  // String foo
         6: invokespecial #11                 // Method java/lang/StringBuilder.""<init>"":(Ljava/lang/String;)V
         9: astore_1
        10: getstatic     #14                 // Field java/lang/System.out:Ljava/io/PrintStream;
        13: aload_1
        14: aload_1
        15: ldc           #20                 // String bar
        17: invokevirtual #22                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
        20: invokedynamic #26,  0             // InvokeDynamic #0:makeConcatWithConstants:(Ljava/lang/StringBuilder;Ljava/lang/StringBuilder;)Ljava/lang/String;
        25: invokevirtual #30                 // Method java/io/PrintStream.println:(Ljava/lang/String;)V

To be compliant with JLS, the toString() calls would have to happen before the invokedynamic, so I think we need to desugar to something like this:

   StringBuilder sb = new StringBuilder(""foo"");
   System.out.println("""" + String.valueOf(sb) + String.valueOf(sb.append(""bar"")));

... which translates to:

         0: new           #7                  // class java/lang/StringBuilder
         3: dup
         4: ldc           #9                  // String foo
         6: invokespecial #11                 // Method java/lang/StringBuilder.""<init>"":(Ljava/lang/String;)V
         9: astore_1
        10: getstatic     #14                 // Field java/lang/System.out:Ljava/io/PrintStream;
        13: aload_1
        14: invokestatic  #20                 // Method java/lang/String.valueOf:(Ljava/lang/Object;)Ljava/lang/String;
        17: aload_1
        18: ldc           #26                 // String bar
        20: invokevirtual #28                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
        23: invokestatic  #20                 // Method java/lang/String.valueOf:(Ljava/lang/Object;)Ljava/lang/String;
        26: invokedynamic #32,  0             // InvokeDynamic #0:makeConcatWithConstants:(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;
        31: invokevirtual #36                 // Method java/io/PrintStream.println:(Ljava/lang/String;)V

Which will ensure evaluation happens in the expected order.

Was it something like this you had in mind, Aleksey? In any case I agree it seems we can salvage this with a similar desugaring without the need to specify and add an entirely new bootstrap method. This should be able to retain most performance characteristics (the redundant toStrings might be possible for JITs to elide). 

Incidentally this would more or less resolve the concern I had when filing JDK-8245719, since all non-trivial Objects would be converted to String and the number of possible method types the BSM will see will be much reduced. ;;;","2021-10-06 09:58;shade;> Was it something like this you had in mind, Aleksey? 

Yes. The original intent with keeping the exact types and passing the objects for stringification at BSM side was largely driven by the future use for cracking open known types like Integer, or other interesting future types, e.g. records, value type boxes, etc.

But this bug shows the danger of doing that, and we should instead stringify non-trivial Objects before handing them off to BSM. Since this effectively just reshuffles the stringification that BSM already does, I would expect little to none performance impact. The call to BSM would have these arguments as Strings, so the BSM could just skip the excess stringification (I think it would still need to perform null check, though, which would be the job for JIT to elide).

Doing this by recasting the input expressions into MH trees or some other IR opens up more interesting opportunities for more interesting bugs, which I don't like.;;;","2021-10-06 11:10;cushon;> call toString() on all non-trivial inputs to existing SCF BSM. (Trivial: primitives, String, Numbers, etc.)

I think that's consensus from the compiler-dev thread as well: https://mail.openjdk.java.net/pipermail/compiler-dev/2021-September/018000.html

I was planning to clean that patch up and open a PR, if that sounds like what you were envisioning.;;;","2021-10-06 12:33;redestad;[~cushon]: that sounds like what I was envisioning. (I don't think the implementation is optimizing concatenation of boxed primitives today, but I guess it won't hurt too much to keep that particular door open);;;","2021-10-06 12:40;redestad;> The call to BSM would have these arguments as Strings, so the BSM could just skip the excess stringification (I think it would still need to perform null check, though, which would be the job for JIT to elide). 

The BSM can't really know whether the calling code has pre-emptively stringified or not, can it? I think it has to keep doing the same checks and stringification it's already doing.;;;","2022-01-11 07:46;roboduke;Changeset: cfee4512
Author:    Liam Miller-Cushon <cushon@openjdk.org>
Date:      2022-01-11 15:45:15 +0000
URL:       https://git.openjdk.java.net/jdk/commit/cfee4512f7048e9cf440078e9eb87d37c7ebcdd9
;;;",,,,,,,,,,,,,,,,,,,
Problem list some headful client jtreg tests that fail on macOS 12,JDK-8273913,5058741,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,prr,prr,prr,2021-09-16 13:52,2023-08-23 03:09,2023-10-01 09:57,2021-09-17 08:03,,,,,,,,18,client-libs,,0,testbug,ursqe-triaged,,,,,,,,,,,,,,,,,,,,"Bugs have been filed against client tests that fail on macOS 12
A couple have been resolved but there's still some that are open and we need to problem list these until they are fixed if we want to enable testing on macOS 12 systems.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8314871,,,,,,,,,,,,,,,,,,,,,,,,"0|i2udkr:",9223372036854775807,b16,,,,,,,,,,,,"2021-09-17 08:03;roboduke;Changeset: 17f7a45c
Author:    Phil Race <prr@openjdk.org>
Date:      2021-09-17 15:00:52 +0000
URL:       https://git.openjdk.java.net/jdk/commit/17f7a45ce40ecf0666f282e68be1844d38a5d1c7
;;;",,,,,,,,,,,,,,,,,,,,,,,,,
Redundant condition and assignment in java.net.URI,JDK-8273910,5058735,Bug,Resolved,JDK,JDK,software,duke,,,P5,Fixed,aturbanov,aturbanov,aturbanov,2021-09-16 13:21,2021-10-13 17:38,2023-10-01 09:57,2021-10-07 10:00,17,,,,,,,18,core-libs,,0,,,,,,,,,,,,,,,,,,,,,,"1. Assignment `ru.host = child.host;` is duplicated and hence redundant in
java.net.URI#resolve(java.net.URI, java.net.URI)
https://github.com/openjdk/jdk/blob/master/src/java.base/share/classes/java/net/URI.java#L2210
2. Condition `q > p` is always `true`, because it just bellow inverse check
```
                if (q <= p)
                    break;
```
https://github.com/openjdk/jdk/blob/master/src/java.base/share/classes/java/net/URI.java#L3493",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2udjf:",9223372036854775807,b19,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@446e124a,,,,,,,,,"2021-10-07 10:00;roboduke;Changeset: 7de2cf85
Author:    Andrey Turbanov <turbanoff@gmail.com>
Committer: Daniel Fuchs <dfuchs@openjdk.org>
Date:      2021-10-07 16:55:45 +0000
URL:       https://git.openjdk.java.net/jdk/commit/7de2cf852d75ea6eb039e69067d4e32421283de5
;;;",,,,,,,,,,,,,,,,,,,,,,,,,
"vmTestbase/nsk/jdi/Event/request/request001 can still fail with ""ERROR: new event is not ThreadStartEvent""",JDK-8273909,5058734,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,amenkov,cjplummer,cjplummer,2021-09-16 13:19,2023-04-20 01:00,2023-10-01 09:57,2021-09-20 13:19,18,,,,,,,18,core-svc,,0,jdk17u-fix-request,jdk17u-fix-yes,noreg-self,,,,,,,,,,,,,,,,,,,"JDK-8262080 attempted to fix the issue of request001 failing due to unexpected THREAD_START events for threads unrelated to the test. However, the fix is not working, and fails consistently with loom, which creates a large number of carrier threads if the test is run in vthread wrapper mode.

The problem is when JDIBase.getEventSetForThreadStartDeath() is called. It is suppose to exit when a THREAD_START or THREAD_END event arrives for the named thread, and skip all other THREAD_START and THREAD_END events, so it should work when there are extra THREAD_START events for carrier threads. However, there are two bugs, one in the test and one in getEventSetForThreadStartDeath().

The bug in the test is that it adds a count filter of 1 to the ThreadStartRequest (and ThreadDeathRequest). This means that once the first spurious THREAD_START is received, all future THREAD_START event are filtered out. I'm not sure why the count filter was added in the first place (it was there before your fix). I think it can be removed, although to be extra safe probably the event request should also be disabled once the event is received.

The other bug has its origins in the test, but is really in getEventSetForThreadStartDeath(). The test sets up the ThreadStartRequest and ThreadDeathRequest with a suspend policy of SUSPEND_ALL. This means once the first spurious THREAD_START is received, all threads are suspended and never resume. A call to vm.resume() is needed after each of these spurious events. Otherwise the test just times out waiting for the next event.

After fixing these two issues I have the test passing, but I'm a little unsure if they are proper fixes. It looks like the only other test could end up with this same issue is nsk/jdi/ThreadDeathRequest/addThreadFilter/addthreadfilter001, although I haven't seen it fail. That's probably because it only uses getEventSetForThreadStartDeath() for the THREAD_END event, and we don't get any spurious THREAD_END events. So it is likely not going to be impacted by my changes.",,,,,,,,,,,JDK-8305234,JDK-8306204,JDK-8306496,,,,,,,,,,,,,,,,,JDK-8270426,,,,,JDK-8262080,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2udj7:",9223372036854775807,b16,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@3397f701,,,,,,,,,"2021-09-20 13:19;roboduke;Changeset: 5fde4b64
Author:    Alex Menkov <amenkov@openjdk.org>
Date:      2021-09-20 20:17:57 +0000
URL:       https://git.openjdk.java.net/jdk/commit/5fde4b64e25a3b3a4c01c57064624b9f930a1324
;;;","2023-04-19 06:48;goetz;Fix request [17u]

I backport this for parity with 17.0.8-oracle.
No risk, only a test change.
Clean backport. SAP nightly testing passed.;;;","2023-04-19 07:03;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/1277
Date: 2023-04-19 13:51:55 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,
Foreign API refresh,JDK-8273905,5058728,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,mcimadamore,mcimadamore,mcimadamore,2021-09-16 09:44,2021-12-07 16:29,2023-10-01 09:57,2021-09-22 08:20,repo-panama,,,,,,,,tools,,0,foreign-memaccess+abi,,,,,,,,,,,,,,,,,,,,,"As described here:

https://mail.openjdk.java.net/pipermail/panama-dev/2021-September/014946.html

There are few areas in the foreign memory access and foreign linker API that are in need of improvements:

* dereference: there is a mismatch between API points which create segments (which take a layout) and dereference API points, which do not take layouts

* role of memory address: in Java 17, MemoryAddress has become a stateful carrier, which is attached to a scope. This is inconvienient, as in most cases, a memory address is just a raw pointer that arises when interacting with native code.

* resource scopes: the API for scopes has too many flavors to pick from, many of which overlap. The fact that scopes and segment allocators are unrelated forces clients to introduce ad hoc conversions from scopes to allocators, and library developers to add overloads. Finally, the API for acquiring scopes doesn't work well with try-with-resources, and could also be simplified.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8270376,,,JDK-8274155,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2udhv:",9223372036854775807,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@2251e2f8,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
debug agent ArrayTypeImp::newInstance() fails to send reply packet if there is an error,JDK-8273904,5058727,Bug,Resolved,JDK,JDK,software,duke,,,P5,Fixed,cjplummer,cjplummer,cjplummer,2021-09-16 09:43,2022-01-03 14:34,2023-10-01 09:57,2021-12-14 19:13,,,,,,,,19,core-svc,,0,noreg-hard,,,,,,,,,,,,,,,,,,,,,"ArrayTypeImp::newInstance() is called by the following code, which calls all the debug agent command handlers:

            } else {
                /* Call the command handler */
                replyToSender = func(&in, &out);
            }

And then the reply to the command is done by the following:

            /* Reply to the sender */
            if (replyToSender) {
                if (inStream_error(&in)) {
                    outStream_setError(&out, inStream_error(&in));
                }
                outStream_sendReply(&out);
            }

So if the command handler returns FALSE, no reply is sent. The JDWP ArrayType.newInstance command is suppose to always send a reply, even if there is an error, but there is one error condition where it doesn't:

    error = classSignature(arrayClass, &signature, NULL);
    if ( error == JVMTI_ERROR_NONE ) {
        outStream_setError(out, map2jdwpError(error));
        return JNI_FALSE;
    }

If for any reason classSignature() should fail, FALSE is returned from ArrayTypeImp::newInstance(), thus no reply is sent. TRUE should be returned, allowing the reply to be sent with the error.

I only noticed this problem by observation. I went looking for when command handlers that returned FALSE (and thus no reply) and stumbled on this one. It turns out there aren't any that are allowed to return FALSE, and this is the only one I found, which the exception of VirtualMachineImp::doExit(), which actually exits the process before returning.

We have no test for this failure and it's hard to write one. I did however modify the above code to always produce an error and then ran vmTestbase/nsk/jdi/ArrayType/newInstance/newinstance001. It timed out waiting for a reply packet. I then fixed the above code to return TRUE when there is a failure, and the test then failed quickly with the expected exception in the output.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2udhn:",9223372036854775807,b02,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@3397f701,,,,,,,,,"2021-12-14 19:13;roboduke;Changeset: 758fe9be
Author:    Chris Plummer <cjplummer@openjdk.org>
Date:      2021-12-15 03:11:27 +0000
URL:       https://git.openjdk.java.net/jdk/commit/758fe9bed3daf9a31d15291ef9787dc5a914451f
;;;",,,,,,,,,,,,,,,,,,,,,,,,,
Memory leak in OopStorage due to bug in OopHandle::release(),JDK-8273902,5058725,Bug,Closed,JDK,JDK,software,duke,,,P2,Fixed,simonis,simonis,simonis,2021-09-16 08:55,2022-01-19 04:29,2023-10-01 09:57,2021-09-16 14:55,16,17,18,,,,,18,hotspot,,0,jdk17u-fix-request,jdk17u-fix-SQE-ok-next,jdk17u-fix-yes,noreg-hard,,,,,,,,,,,,,,,,,,"Currently, OopHandle::release() is implemented as follows:

inline void OopHandle::release(OopStorage* storage) {
  if (peek() != NULL) {
    // Clear the OopHandle first
    NativeAccess<>::oop_store(_obj, (oop)NULL);
    storage->release(_obj);
  }
}

However, peek() returns NULL not only if the oop* `_obj` is NULL, but also when `_obj` points to a zero oop. In the latter case, the oop* `_obj` will not be released from the corresponding OopStorage and the slot it occupies will remain alive forever.

This behavior can be easily triggered with the attached LeakTestMinimal.java test (thanks to Oli Gillespie from the Amazon Profiler team for detecting the issue and providing a reproducer).

The fix is trivial:

diff --git a/src/hotspot/share/oops/oopHandle.inline.hpp b/src/hotspot/share/oops/oopHandle.inline.hpp
index 44362499a2c..20de5146ec3 100644
--- a/src/hotspot/share/oops/oopHandle.inline.hpp
+++ b/src/hotspot/share/oops/oopHandle.inline.hpp
@@ -48,7 +48,7 @@ inline OopHandle::OopHandle(OopStorage* storage, oop obj) :
 }
 
 inline void OopHandle::release(OopStorage* storage) {
-  if (peek() != NULL) {
+  if (_obj != NULL) {
     // Clear the OopHandle first
     NativeAccess<>::oop_store(_obj, (oop)NULL);
     storage->release(_obj);
",,,,,,,,,,,JDK-8273908,,,,,,,,,,,,,,,,,,,,,JDK-8280240,,,JDK-8247878,,,,,,,,,,"2021-09-16 08:57;simonis;LeakTestMinimal.java;https://bugs.openjdk.org/secure/attachment/96458/LeakTestMinimal.java",,,,,generic,,,,,,,16,,generic,,,,,"0|i2udh7:",9223372036854775807,b16,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,Verified,,"2021-09-16 13:42;simonis;Fix request (17u)

This is a fix for a memory leak which should be downported as quickly as possible to jdk17u.
Applies cleanly. See: https://github.com/openjdk/jdk17u/pull/79
;;;","2021-09-16 14:55;clanger;Changeset: bc48a0ac
Author: Volker Simonis <simonis@openjdk.org>
Date: 2021-09-16 19:56:12 +0000
URL: https://git.openjdk.java.net/jdk/commit/bc48a0ac297b99a997482dcb59f85acc1cdb0c47;;;","2021-09-16 15:00;clanger;I think there was a bug in the tools. For some strange reason the integration of the fix created a backport bug for 18. Maybe it was because on this bug there was a fix version of both, 17-pool and 18. I fixed that by resolving this bug for 18 and reopening JDK-8273908, changing it to 17-pool. It should get resolved when the 17u backport is integrated.;;;","2021-09-20 10:17;dcubed;> Maybe it was because on this bug there was a fix version of both, 17-pool and 18. 

Correct. The fix version for this bug should have been just 18.
We don't use multiple values in the fix version field.;;;","2021-09-20 11:26;simonis;Sorry, my fault. I apologize.
Thanks Christoph for fixing things up!;;;","2021-11-30 11:26;mseledtsov;[~simonis] Would it be possible to add the jtreg regression test for this fix? ;;;","2021-12-01 06:48;hseigel;I ran the LeakTestMinimal.java program provided with this bug report using both JDK 18-ea+14, which did not contain this fix, and  JDK 18-ea+25, which did contain this fix.

Without the fix, NMT showed that the total amount of reserved memory increased by 140,000K between test loop iterations 1,000,000 and 2,000,000.

With the fix, NMT showed that the total amount of reserved memory increased by only 4k between test loop iterations 1,000,000 and 2,000,000.  So, marking this bug fix as verified in JDK-18.;;;","2022-01-17 05:42;shade;To let users search for the related fixes (I just followed up on one 17.0.1 bug report, completely missing this fix because none of the keywords I used matched), I am copy-pasting the symptoms here from the minimal example.

When doing continuous:
        ThreadMXBean bean = ManagementFactory.getThreadMXBean();
        bean.getThreadInfo(bean.getAllThreadIds(), Integer.MAX_VALUE);

NMT would show the apparent leak here:

 [0x00007f07fe70ba3e] OopStorage::try_add_block()+0x2e
 [0x00007f07fe70c0ad] OopStorage::allocate()+0x3d
 [0x00007f07fe8cfc58] StackFrameInfo::StackFrameInfo(javaVFrame*, bool)+0x68
 [0x00007f07fe8d07d4] ThreadStackTrace::dump_stack_at_safepoint(int)+0xe4
                              (malloc=1940MB type=Serviceability +1578MB #3219458 +2618513);;;",,,,,,,,,,,,,,,,,,
"compiler/ciReplay/TestVMNoCompLevel.java fails due to wrong data size with TieredStopAtLevel=2,3",JDK-8273895,5058715,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,chagedorn,chagedorn,chagedorn,2021-09-16 07:04,2023-02-24 12:15,2023-10-01 09:57,2021-09-20 05:55,17,18,,,,,,18,hotspot,,0,17-bp,ci-replay,ci-replay-failed,hs-comp-triaged,jdk11u-fix-request,jdk11u-fix-yes,jdk17u-fix-request,jdk17u-fix-SQE-ok,jdk17u-fix-yes,noreg-self,oracle-triage-18,,,,,,,,,,,"compiler/ciReplay/TestVMNoCompLevel.java fails when executed with TieredStopAtLevel=2 or 3 with the following assertion:

#
# A fatal error has been detected by the Java Runtime Environment:
#
#  Internal Error (/home/christian/jdk/open/src/hotspot/share/ci/ciReplay.cpp:1353), pid=51529, tid=51545
#  assert(m->_data_size + m->_extra_data_size == rec->_data_length * (int)sizeof(rec->_data[0]) || m->_data_size == rec->_data_length * (int)sizeof(rec->_data[0])) failed: must agree
#
# JRE version: Java(TM) SE Runtime Environment (18.0) (slowdebug build 18-internal+0-2021-09-16-0618098.christian...)
# Java VM: Java HotSpot(TM) 64-Bit Server VM (slowdebug 18-internal+0-2021-09-16-0618098.christian..., mixed mode, compressed oops, compressed class ptrs, g1 gc, linux-amd64)
# Problematic frame:
# V  [libjvm.so+0x71e669]  ciReplay::initialize(ciMethodData*)+0x17d
...........
Command Line: -XX:TieredStopAtLevel=2 -XX:-CreateCoredumpOnCrash -XX:+IgnoreUnrecognizedVMOptions -XX:TypeProfileLevel=222 -XX:+ReplayCompiles -XX:ReplayDataFile=test_replay.txt -XX:-TieredCompilation 
...........
Current thread (0x00007f00e0310cd0):  JavaThread ""C2 CompilerThread0"" daemon [_thread_in_vm, id=51545, stack(0x00007f00d46ff000,0x00007f00d4800000)]


Current CompileTask:
C2:   1362   25    b        compiler.ciReplay.CiReplayBase$TestMain::test (30 bytes)

Stack: [0x00007f00d46ff000,0x00007f00d4800000],  sp=0x00007f00d47fc990,  free space=1014k
Native frames: (J=compiled Java code, j=interpreted, Vv=VM code, C=native code)
V  [libjvm.so+0x71e669]  ciReplay::initialize(ciMethodData*)+0x17d
V  [libjvm.so+0x70dab3]  ciMethodData::load_data()+0x457
V  [libjvm.so+0x707cb8]  ciMethod::ensure_method_data(methodHandle const&)+0x11e
V  [libjvm.so+0x707e10]  ciMethod::ensure_method_data()+0x136
V  [libjvm.so+0x7abb36]  Compile::Compile(ciEnv*, ciMethod*, int, bool, bool, bool, bool, bool, DirectiveSet*)+0xa8c
V  [libjvm.so+0x699436]  C2Compiler::compile_method(ciEnv*, ciMethod*, int, bool, DirectiveSet*)+0x138
V  [libjvm.so+0x7c978b]  CompileBroker::invoke_compiler_on_method(CompileTask*)+0x885
V  [libjvm.so+0x7c8417]  CompileBroker::compiler_thread_loop()+0x3df
V  [libjvm.so+0x7e86c3]  CompilerThread::thread_entry(JavaThread*, JavaThread*)+0x69
V  [libjvm.so+0x1193053]  JavaThread::thread_main_inner()+0x15d
V  [libjvm.so+0x1192eef]  JavaThread::run()+0x165
V  [libjvm.so+0x11907e4]  Thread::call_run()+0x180
V  [libjvm.so+0xf9a7bb]  thread_native_entry(Thread*)+0x18f",,,,,,,,,,,JDK-8279349,JDK-8277635,JDK-8277040,JDK-8298004,JDK-8303196,,,,,,,,,,,,,,,,,JDK-8266895,,,,,,,,JDK-8251462,,,,,,,,,,,,,,,,,,,,,,,,"0|i2udez:",9223372036854775807,b16,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2021-09-16 07:42;chagedorn;Starts to fail after JDK-8251462.;;;","2021-09-20 05:55;roboduke;Changeset: a561eac9
Author:    Christian Hagedorn <chagedorn@openjdk.org>
Date:      2021-09-20 12:53:56 +0000
URL:       https://git.openjdk.java.net/jdk/commit/a561eac912740da6a5982c47558e13f34481219f
;;;","2021-12-29 12:39;goetz;Fix request [17u]

I backport this for parity with 17.0.3-oracle.
No risk, only a test change.
Clean backport.
This was already approved by Rob.
SAP nightly tests passed.;;;","2021-12-29 12:42;roboduke;A pull request was submitted for review.

URL: https://git.openjdk.java.net/jdk17u-dev/pull/44
Date: 2021-12-29 20:38:31 +0000
;;;","2023-02-23 04:49;goetz;Fix request [11u]

I backport this for parity with 11.0.19-oracle.
No risk, only a test change.
Clean backport.
Test passes. SAP nightly testing passed.;;;","2023-02-23 05:00;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk11u-dev/pull/1768
Date: 2023-02-23 12:53:04 +0000;;;",,,,,,,,,,,,,,,,,,,,
ConcurrentModificationException raised every time ReferralsCache drops referral,JDK-8273894,5058515,Bug,Closed,JDK,JDK,software,duke,,,P4,Fixed,jpai,webbuggrp,webbuggrp,2021-09-14 05:07,2022-12-12 03:50,2023-10-01 09:57,2021-09-22 22:39,11,17,18,8,,,,18,security-libs,,0,additional-information-received,additional-information-requested,dcsaw,jdk11u-fix-request,jdk11u-fix-yes,jdk13u-fix-request,jdk13u-fix-yes,jdk15u-fix-request,jdk15u-fix-yes,jdk17u-fix-request,jdk17u-fix-yes,redhat-interest,reproducer-other,webbug,,,,,,,,"A DESCRIPTION OF THE PROBLEM :
ConcurrentModificationException raised every time ReferralsCache drops referral. Method pruneExpired always raises exception is a referral TGT has expired.

Example trace:
Caused by: java.util.ConcurrentModificationException
	at java.util.HashMap$HashIterator.nextNode(HashMap.java:1493) ~[?:?]
	at java.util.HashMap$EntryIterator.next(HashMap.java:1526) ~[?:?]
	at java.util.HashMap$EntryIterator.next(HashMap.java:1524) ~[?:?]
	at sun.security.krb5.internal.ReferralsCache.pruneExpired(ReferralsCache.java:152) ~[java.security.jgss:?]
	at sun.security.krb5.internal.ReferralsCache.get(ReferralsCache.java:133) ~[java.security.jgss:?]
	at sun.security.krb5.internal.CredentialsUtil.serviceCredsReferrals(CredentialsUtil.java:365) ~[java.security.jgss:?]
	at sun.security.krb5.internal.CredentialsUtil.serviceCreds(CredentialsUtil.java:333) ~[java.security.jgss:?]
	at sun.security.krb5.internal.CredentialsUtil.serviceCreds(CredentialsUtil.java:314) ~[java.security.jgss:?]


",,,,,,,,,,,JDK-8274764,JDK-8274709,JDK-8277624,JDK-8298564,JDK-8298565,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8215032,,,,,,,,,,generic,,,,,,,,,generic,,,,,"0|i2uc6j:",9223372036854775807,b17,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@7a7b7e03,,,,,,,Verified,,"2021-09-16 00:10;tongwan;Requested a reproducer from the submitter.;;;","2021-09-16 04:05;tongwan;Additional information from the submitter:
I am not able to reproduce it in our testing environment. The issue happens all the time in one of our customer's environments. They have a multi-domain environment where kerberos authentication stops working after 10 hours of running the server. They have provided the exception trace where you can see that the exception is raised in method ReferralsCache.pruneExpired. This class seems to cache TGTs when a referral is transitioned during the kerberos negotiation. Once the TGT expires, it will try to remove it from the cache, raising the exception.

Caused by: java.util.ConcurrentModificationException
at java.util.HashMap$HashIterator.nextNode(HashMap.java:1493) ~[?:?]
at java.util.HashMap$EntryIterator.next(HashMap.java:1526) ~[?:?]
at java.util.HashMap$EntryIterator.next(HashMap.java:1524) ~[?:?]
at sun.security.krb5.internal.ReferralsCache.pruneExpired(ReferralsCache.java:152) ~[java.security.jgss:?]
at sun.security.krb5.internal.ReferralsCache.get(ReferralsCache.java:133) ~[java.security.jgss:?]
at sun.security.krb5.internal.CredentialsUtil.serviceCredsReferrals(CredentialsUtil.java:365) ~[java.security.jgss:?]
at sun.security.krb5.internal.CredentialsUtil.serviceCreds(CredentialsUtil.java:333) ~[java.security.jgss:?]
at sun.security.krb5.internal.CredentialsUtil.serviceCreds(CredentialsUtil.java:314) ~[java.security.jgss:?]
at sun.security.krb5.internal.CredentialsUtil.acquireServiceCreds(CredentialsUtil.java:169) ~[java.security.jgss:?]
at sun.security.krb5.Credentials.acquireServiceCreds(Credentials.java:490) ~[java.security.jgss:?]
at sun.security.jgss.krb5.Krb5Context.initSecContext(Krb5Context.java:697) ~[java.security.jgss:?]

Then I looked at this method implementation, on JDK 11.0.12.7.hotspot from AdoptOpenJDK and I saw this:
for (Entry<String, ReferralCacheEntry> mapEntry :
        entries.entrySet()) {
    if (mapEntry.getValue().getCreds().getEndTime().before(now)) {
        entries.remove(mapEntry.getKey());
    }
}
If execution enters the IF statement, the remove call will always throw ConcurrentModificationException. The correct way would be to obtain an iterator and call the iterator's remove method.
;;;","2021-09-16 06:24;tongwan;The source code caused the problem can be found at:
https://hg.openjdk.java.net/jdk8u/jdk8u/jdk/file/ece8c902f3e0/src/share/classes/sun/security/krb5/internal/ReferralsCache.java#l151
https://hg.openjdk.java.net/jdk/jdk/file/643978a35f6e/src/java.security.jgss/share/classes/sun/security/krb5/internal/ReferralsCache.java#l151
https://github.com/openjdk/jdk/blob/master/src/java.security.jgss/share/classes/sun/security/krb5/internal/ReferralsCache.java#L177;;;","2021-09-22 22:39;roboduke;Changeset: 2166ed13
Author:    Jaikiran Pai <jpai@openjdk.org>
Date:      2021-09-23 05:37:19 +0000
URL:       https://git.openjdk.java.net/jdk/commit/2166ed136917bb68f8155a25e4f4a6c5c7115566
;;;","2021-10-01 02:23;shade;Fix Request (17u)

Fixes a bug in ReferralsCache. Seen in production by the original reporter. Patch applies cleanly, jdk_security tests pass.;;;","2021-10-01 02:40;shade;Fix Request (11u)

Same reason as for 17u.;;;","2021-10-09 23:16;tongwan;Requested the submitter verify the fix by downloading the latest version of JDK 18 from https://jdk.java.net/18/;;;","2022-04-25 10:57;sqetools;verified;;;","2022-12-12 03:01;yan;Fix request (13u, 15u)
backporting for parity with LTS releases. Clean backport, security tests do pass (all but one failing because of JDK-8296485);;;","2022-12-12 03:08;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk15u-dev/pull/315
Date: 2022-12-12 11:01:29 +0000;;;","2022-12-12 03:38;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk13u-dev/pull/442
Date: 2022-12-12 11:29:54 +0000;;;",,,,,,,,,,,,,,,
[macos] java/awt/color/ICC_ColorSpace/MTTransformReplacedProfile.java timed out,JDK-8273887,5058708,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,serb,landrews,landrews,2021-09-16 05:15,2021-09-30 12:38,2023-10-01 09:57,2021-09-20 14:28,18,,,,,,,18,client-libs,,0,jdk17u-fix-request,jdk17u-fix-yes,macos,,,,,,,,,,,,,,,,,,,"
java/awt/color/ICC_ColorSpace/MTTransformReplacedProfile.java timed out with following error message

test result: Error. Program `/Volumes/D1/mesos/work_dir/jib-master/install/jdk-18+16-843/macosx-x64.jdk/jdk-18.jdk/Contents/Home/bin/java' timed out (timeout set to 480000ms, elapsed time including timeout handling was 523018ms).


Platform : Mac OS X 10.13.6 (x86_64)
JDK version : jdk-18+16-843/macosx-x64.jdk/jdk-18.jdk",,,,,,,,,,,JDK-8274608,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8273135,,,,,"2021-09-20 10:44;landrews;MTTransformReplacedProfile.jtr;https://bugs.openjdk.org/secure/attachment/96487/MTTransformReplacedProfile.jtr",,,,,x86,,,,,,,,,os_x,,,,,"0|i2uddf:",9223372036854775807,b16,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4b09ce31,,,,,,,,,"2021-09-16 19:53;serb;Does it timeout before? Or it is the first time?;;;","2021-09-16 19:55;serb;Does the mach5 is affected or it fails on the local system? How often it fails?;;;","2021-09-16 20:02;serb;The falure handler should be able generate a stack trace of the test on the timeout, please attach it to the jbs.;;;","2021-09-20 08:44;landrews;[~vdyakov], sure I will check and update the ticket today .;;;","2021-09-20 10:44;landrews;Run the test case more than 15 times on the same host where the test failed out of 15  run only 2 run test passed and all the remaining all the run test was timeout . I have attached the jtreg result file (jtr) 

Tested on jdk18 b15.;;;","2021-09-20 11:17;serb;Maybe that system just slow, what happen if you increase/triple the timeout?
 /**
  * @test
  * @bug 8271718
  * @summary Verifies MT safety of color transformation while profile is changed
+ * @run main/othervm/timeout=300 MTTransformReplacedProfile
  */

The log file is cut, suggestion from jtreg is:
=========
If you need to see more of the output from the test,
set the system property javatest.maxOutputSize to a higher
value. The current value is 100000
=========;;;","2021-09-20 11:32;serb;All traces in the log which use the ""StampedLock"" are parked, probably something useful might be hidden in the ""cut"" part.;;;","2021-09-20 12:39;landrews;added timeout and increased the javatest.maxOutputSize value to 10000000 and run the test case several time and the timeout issue was not reproduced and each time the test case passed.
 * @run main/othervm/timeout=300 MTTransformReplacedProfile ;;;","2021-09-20 14:28;roboduke;Changeset: 1bd11a7f
Author:    Sergey Bylokhov <serb@openjdk.org>
Date:      2021-09-20 21:25:40 +0000
URL:       https://git.openjdk.java.net/jdk/commit/1bd11a7f2ca433f4aa9c545a20960e0778ec545e
;;;","2021-09-29 15:50;serb;Fix request (17u)

This is update of the the test to make its execution time less. The patch applies cleanly.
PR: https://github.com/openjdk/jdk17u/pull/118;;;",,,,,,,,,,,,,,,,
os::unsetenv unused,JDK-8273877,5058695,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,mbaesken,mbaesken,mbaesken,2021-09-16 01:48,2021-09-22 19:08,2023-10-01 09:57,2021-09-17 05:54,17,18,,,,,,18,hotspot,,0,,,,,,,,,,,,,,,,,,,,,,It seems the HS function os::unsetenv is not used any more for some time and could be removed.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8256844,,,,,,,,,,generic,,,,,,,,,generic,,,,,"0|i2udaj:",9223372036854775807,b16,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,,,"2021-09-17 05:54;roboduke;Changeset: 27d747ad
Author:    Matthias Baesken <mbaesken@openjdk.org>
Date:      2021-09-17 12:53:38 +0000
URL:       https://git.openjdk.java.net/jdk/commit/27d747ad4f13193d5fc651d893540465248c48a6
;;;","2021-09-19 16:26;dholmes;The use of unsetenv was removed by JDK-8256844 just a few weeks ago.;;;",,,,,,,,,,,,,,,,,,,,,,,,
ZGC: Explicitly use 2M large pages,JDK-8273872,5058689,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,pliden,pliden,pliden,2021-09-16 00:43,2021-09-22 19:08,2023-10-01 09:57,2021-09-17 00:53,17,18,,,,,,18,hotspot,,0,zgc,,,,,,,,,,,,,,,,,,,,,"ZGC requires large pages to be 2M. However, ZGC doesn't explicitly asks for this page size and instead relies on the default large pages size for the system to be 2M. On systems where this is not true, ZGC will fails with an error message. To avoid this, ZGC should explicitly ask for 2M large pages and not rely on the system default. Furthermore, ZGC currently ignores -XX:LargePageSizeInBytes. ZGC should fails with an error message if it's specified to something other than 2M.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2ud97:",9223372036854775807,b16,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6b00f96c,,,,,,,,,"2021-09-17 00:53;roboduke;Changeset: 1890d85c
Author:    Per Liden <pliden@openjdk.org>
Date:      2021-09-17 07:51:45 +0000
URL:       https://git.openjdk.java.net/jdk/commit/1890d85c0e647d3f890e3c7152f8cd2e60dfd826
;;;",,,,,,,,,,,,,,,,,,,,,,,,,
gc/shenandoah/TestJcmdHeapDump.java does not have a @requires vm.gc.shenandoah,JDK-8273832,5058639,Bug,Resolved,JDK,JDK,software,duke,,,P2,Fixed,tschatzl,tschatzl,tschatzl,2021-09-15 09:05,2021-09-20 12:56,2023-10-01 09:57,2021-09-15 10:23,18,,,,,,,18,hotspot,,0,gc-shenandoah,noreg-self,testbug,,,,,,,,,,,,,,,,,,,"... and so the test fails in builds without Shenandoah.

",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8273559,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2ucy3:",9223372036854775807,b15,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6b00f96c,,,,,,,,,"2021-09-15 10:23;roboduke;Changeset: cbffecc6
Author:    Thomas Schatzl <tschatzl@openjdk.org>
Date:      2021-09-15 17:21:44 +0000
URL:       https://git.openjdk.java.net/jdk/commit/cbffecc61e4a9ac1172926ef4f20d918d73adde9
;;;","2021-09-15 10:28;dcubed;Bumped from P4 -> P2. 120 failures in Tier2 is what
we call a train wreck. [~tschatzl] - thanks for fixing this
so quickly.;;;",,,,,,,,,,,,,,,,,,,,,,,,
"PrintServiceLookup spawns 2 threads in the current classloader, getting orphaned",JDK-8273831,5057292,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,serb,webbuggrp,webbuggrp,2021-08-24 14:19,2023-08-30 01:15,2023-10-01 09:57,2021-10-30 02:05,11,17,18,7,8,,,18,client-libs,,0,11-bp,17-bp,additional-information-received,dcspn,jdk17u-fix-request,jdk17u-fix-yes,reproducer-yes,webbug,,,,,,,,,,,,,,"ADDITIONAL SYSTEM INFORMATION :
Tested under Tomcat 9.0.52, Windows 10, Coretto-JDK 11.0.12_7

A DESCRIPTION OF THE PROBLEM :
We are using Tomcat 9 and our application uses the following code snippet:
DocFlavor flav = DocFlavor.SERVICE_FORMATTED.PRINTABLE;
PrintService[] printers = PrintServiceLookup.lookupPrintServices(flav, null);

The underlying PrintServiceLookupProvider will spawn 2 threads, namely ""PrinterListener"" and ""RemotePrinterListener"" (around line 134 in sun.print.PrintServiceLookupProvider).
These two threads are connected to the classloader of the web-application.
During undeployment the classloader gets removed together with the two orphaned threads.
Tomcat issues a warning on undeployment:
""org.apache.catalina.loader.WebappClassLoaderBase.clearReferencesThreads The web application [ROOT] appears to have started a thread named [PrinterListener] but has failed to stop it. This is very likely to create a memory leak. ""
The two threads should not be started in the current classloaders context because that classloader might get deleted on web applications.

STEPS TO FOLLOW TO REPRODUCE THE PROBLEM :
Run the two lines within e.g. a jsp-page within Tomcat:
DocFlavor flav = DocFlavor.SERVICE_FORMATTED.PRINTABLE;
PrintService[] printers = PrintServiceLookup.lookupPrintServices(flav, null);

Undeploy the application and the catalina.log will report the two orphaned threads which get killed.

EXPECTED VERSUS ACTUAL BEHAVIOR :
EXPECTED -
The application should either be able to get a handle to these threads for a clean shutdown or maybe a flag to prevent starting these two threads.
Another option would be to attach the threads to the root classloader to prevent problems during undeployment of web applications.
ACTUAL -
The two threads are recognized as orphaned and are forcely closed by web container.

CUSTOMER SUBMITTED WORKAROUND :
Before calling PrintServiceLookup.lookupPrintServices(...) we now change the thread's classloader to the parent and afterwards resetting the thread's classloader to the original one.

FREQUENCY : always


",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,generic,,,,,,,,,generic,,,,,"0|i2u58r:",9223372036854775807,b22,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4b09ce31,,,,,,,,,"2021-09-15 08:45;pnarayanaswa;Mail to submitter:
=============
Please can you share minimal reproducible testcase to reproduce the issue.;;;","2021-10-03 20:53;pnarayanaswa;Additional Information received:
======================
The threads are created when executing the following lines:

import javax.print.DocFlavor;
import javax.print.PrintService;
import javax.print.PrintServiceLookup;

public class PrinterTest
{
       public static void main(String[] args) throws InterruptedException
       {
              DocFlavor flav = DocFlavor.SERVICE_FORMATTED.PRINTABLE;
             //PrintServiceLookupProvider spawns 2 threads in java 11
             PrintService[] printers = PrintServiceLookup.lookupPrintServices(flav, null);
             System.out.println(printers.length);
       }
}

If you set a breakpoint at System.out you can check that two threads are spawned in the background.

If PrintServiceLookup.lookupPrintServices is used within a we application (e.g. Tomcat), the spawned threads can’t be terminated when undeploying the web application.
Thus the two background threads are “leaking”.

The 2 threads are spawned within:
https://github.com/AdoptOpenJDK/openjdk-jdk11/blob/master/src/java.desktop/windows/classes/sun/print/PrintServiceLookupProvider.java
within the method public PrintServiceLookupProvider() { …}

Maybe there should be a way to prevent these threads or shut them down in a clean way.

The „RemotePrinterListener“-Thread can be prevented by settings „sun.java2d.print.polling=false”
Whereas the “PrinterListener”-Thread is always created.

Both threads can’t be accessed afterwards and shut down in a clean way.


;;;","2021-10-12 14:29;serb;RemotePrinterListener thread was added by the JDK-8153732, and the ""sun.java2d.print.polling” property was removed by the JDK-8263311 where the code was reworked.
;;;","2021-10-12 15:34;serb;Looks like the tomcat has special machinery to workaround such threads:
https://cwiki.apache.org/confluence/display/tomcat/MemoryLeakProtection#MemoryLeakProtection-cclThreadSpawnedByJRE
But it should be updated each time we add/update/rename the threads in the JDK. So JreMemoryLeakPreventionListener can be updated to solve this problem, but it will be good to reset the ref to the app class loader as we usually do for our internal threads.;;;","2021-10-30 02:05;roboduke;Changeset: 68756782
Author:    Sergey Bylokhov <serb@openjdk.org>
Date:      2021-10-30 09:03:27 +0000
URL:       https://git.openjdk.java.net/jdk/commit/687567822a5380fb7d8c5b54ae548b2a5c848187
;;;","2023-08-28 19:28;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/1625
Date: 2023-07-26 00:01:40 +0000;;;","2023-08-29 15:55;serb;Fix request (17u)

Clean backport. The fix for a regression initailly introduced somewhere before JDK 11(and then backported to JDK 8 and JDK 7). The fix verified by the new test, Other jdk_desktop tests are green.

Review 17u-dev: https://github.com/openjdk/jdk17u-dev/pull/1625
;;;",,,,,,,,,,,,,,,,,,,
Correct Manifest file name and NPE checks,JDK-8273826,5058634,Bug,Closed,JDK,JDK,software,duke,,,P3,Fixed,coffeys,shadowbug,shadowbug,2021-09-15 08:28,2022-04-27 23:33,2023-10-01 09:57,2021-10-07 08:14,18,8u291,,,,,,18,security-libs,,0,bugdb_33358724,cssn21_09_02,jdk11u-fix-request,jdk11u-fix-yes,jdk13u-fix-request,jdk13u-fix-yes,jdk15u-fix-request,jdk15u-fix-yes,jdk17u-fix-request,jdk17u-fix-yes,jdk8u-fix-request,jdk8u-fix-yes,regression,sustaining,,,,,,,,"Upgrading from JRE 8.0.281 to JRE 8.0.291 throws the following exceptions:
 
basic: exception: java.lang.reflect.InvocationTargetException.
java.lang.RuntimeException: java.lang.reflect.InvocationTargetException
              at sun.plugin2.applet.Plugin2ClassLoader.defineClassHelper(Unknown Source)
              at sun.plugin2.applet.Plugin2ClassLoader.access$100(Unknown Source)
              at sun.plugin2.applet.Plugin2ClassLoader$2.run(Unknown Source)
              at sun.plugin2.applet.Plugin2ClassLoader$2.run(Unknown Source)
              at java.security.AccessController.doPrivileged(Native Method)
              at sun.plugin2.applet.Plugin2ClassLoader.findClassHelper(Unknown Source)
              at sun.plugin2.applet.Applet2ClassLoader.findClass(Unknown Source)
              at sun.plugin2.applet.Plugin2ClassLoader.loadClass0(Unknown Source)
              at sun.plugin2.applet.Plugin2ClassLoader.loadClass(Unknown Source)
              at sun.plugin2.applet.Plugin2ClassLoader.loadClass(Unknown Source)
              at java.lang.ClassLoader.loadClass(Unknown Source)
              at sun.plugin2.applet.Plugin2ClassLoader.loadCode(Unknown Source)
              at sun.plugin2.applet.Plugin2Manager.initAppletAdapter(Unknown Source)
              at sun.plugin2.applet.Plugin2Manager$AppletExecutionRunnable.run(Unknown Source)
              at java.lang.Thread.run(Unknown Source)
Caused by: java.lang.reflect.InvocationTargetException
              at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
              at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
              at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
              at java.lang.reflect.Method.invoke(Unknown Source)
              ... 15 more
Caused by: java.lang.NullPointerException
              at java.util.Hashtable.contains(Unknown Source)
              at java.util.Hashtable.containsValue(Unknown Source)
              at sun.security.util.ManifestEntryVerifier.getParams(Unknown Source)
              at sun.security.util.ManifestEntryVerifier.verify(Unknown Source)
              at java.util.jar.JarVerifier.processEntry(Unknown Source)
              at java.util.jar.JarVerifier.update(Unknown Source)
              at java.util.jar.JarVerifier$VerifierStream.read(Unknown Source)
              at sun.misc.Resource.getBytes(Unknown Source)
              at sun.plugin2.applet.Plugin2ClassLoader$WrapResource.getBytes(Unknown Source)
              at java.net.URLClassLoader.defineClass(Unknown Source)
              ... 19 more",,,,,,,,,,,JDK-8275045,JDK-8285786,JDK-8276890,JDK-8275224,JDK-8274958,JDK-8274985,JDK-8276844,JDK-8275335,,,,,,,,,,,,,,,,,JDK-8278851,,,,,JDK-8249906,,,,,,,,,,,,,,,,,,,,,,,,"0|i2ucwz:",9223372036854775807,b19,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@2ec284e3,,,,,,,Verified,,"2021-10-07 08:14;roboduke;Changeset: 03a8d342
Author:    Sean Coffey <coffeys@openjdk.org>
Date:      2021-10-07 15:12:13 +0000
URL:       https://git.openjdk.java.net/jdk/commit/03a8d342b86e720d3cba08d540182b4ab161fba3
;;;","2021-10-07 08:23;coffeys;Fix Request:
Fix up a recent regression in the jar verifier area for corner case where Manifest file name differs in case from MANIFEST.MF;;;","2021-10-09 09:30;goetz;Fix request [11u]

I backport this for parity with 11.0.14-oracle.
Some minor adaptions were necessary.
Test passes.  Nighttesting passed.;;;","2021-11-04 16:30;mbalao;8u RFR: https://mail.openjdk.java.net/pipermail/jdk8u-dev/2021-November/014400.html;;;","2021-11-05 07:06;mbalao;8u fix request

I'd like to have this fix backported to 8u not only because of parity with other JDKs but also because there are users affected by this bug. The patch does not apply cleanly but has been review-approved here: https://mail.openjdk.java.net/pipermail/jdk8u-dev/2021-November/014401.html;;;","2021-11-09 00:15;yan;Fix request (15u):

backport this regression fix to 15u is easy: the patch goes cleanly, tests run OK. The attached test, though, doesn't fail for me before the fix: behavior of jarsigner is the same before and after on both variants of the testing jar.;;;","2022-04-08 03:43;sqetools;verified;;;","2022-04-27 07:01;yan;Fix request (13u):

I need to backport this fix for parity with other releases and as a part of backports chain. Some context adjustments were necessary. The relevant tests run fine.;;;","2022-04-27 07:10;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk13u-dev/pull/344
Date: 2022-04-27 14:03:13 +0000;;;",,,,,,,,,,,,,,,,,
TestIRMatching.java fails after JDK-8266550,JDK-8273825,5058633,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,chagedorn,chagedorn,chagedorn,2021-09-15 08:03,2022-05-06 09:33,2023-10-01 09:57,2021-09-20 05:59,18,,,,,,,18,hotspot,,0,c2,hs-comp-triaged,ir-framework,noreg-self,oracle-triage-18,regression,tier5,ursqe-triaged,,,,,,,,,,,,,,testlibrary_tests/ir_framework/tests/TestIRMatching.java fails on Aarch64 after JDK-8266550 which changed some default regexes.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8266550,,,,,,,,,,,,,,,generic,,,,,,,,,,,,,,"0|i2ucwr:",9223372036854775807,b16,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2021-09-15 14:16;dlong;ILW = one test fails = LHH = P4;;;","2021-09-16 01:01;chagedorn;Hi [~mdoerr], is PPC or s390 also affected?;;;","2021-09-16 01:43;mdoerr;PPC64:
Compilation(s) of failed match(es):
>>> Compilation of public void ir_framework.tests.AndOr1.test1(int):
PrintIdeal:
 10  Parm  ===  3  [[ 37 ]] Parm0: ir_framework/tests/AndOr1:NotNull *  Oop:ir_framework/tests/AndOr1:NotNull * !jvms: AndOr1::test1 @ bci:-1 (line 393)
 7  Parm  ===  3  [[ 37 ]] Memory  Memory: @BotPTR *+bot, idx=Bot; !jvms: AndOr1::test1 @ bci:-1 (line 393)
 6  Parm  ===  3  [[ 37 ]] I_O !jvms: AndOr1::test1 @ bci:-1 (line 393)
 5  Parm  ===  3  [[ 37 ]] Control !jvms: AndOr1::test1 @ bci:-1 (line 393)
 38  Proj  ===  37  [[ 43 ]] #0 !jvms: AndOr1::test1 @ bci:1 (line 393)
 3  Start  ===  3  0  [[ 3  5  6  7  8  9  10 ]]  #{0:control, 1:abIO, 2:memory, 3:rawptr:BotPTR, 4:return_address, 5:ir_framework/tests/AndOr1:NotNull *, 6:int}
 37  CallStaticJava  ===  5  6  7  8  1 ( 10  1  1 ) [[ 38  39  40 ]] # Static  ir_framework.tests.AndOr1::dontInline void ( ir_framework/tests/AndOr1:NotNull * ) AndOr1::test1 @ bci:1 (line 393) !jvms: AndOr1::test1 @ bci:1 (line 393)
 43  Catch  ===  38  39  [[ 44  45 ]]  !jvms: AndOr1::test1 @ bci:1 (line 393)
 48  CreateEx  ===  45  39  [[ 52 ]]  #java/lang/Throwable:NotNull *  Oop:java/lang/Throwable:NotNull * !jvms: AndOr1::test1 @ bci:1 (line 393)
 45  CatchProj  ===  43  [[ 52  48 ]] #1@bci -1  !jvms: AndOr1::test1 @ bci:1 (line 393)
 9  Parm  ===  3  [[ 52  51 ]] ReturnAdr !jvms: AndOr1::test1 @ bci:-1 (line 393)
 8  Parm  ===  3  [[ 52  51  37 ]] FramePtr !jvms: AndOr1::test1 @ bci:-1 (line 393)
 40  Proj  ===  37  [[ 52  51 ]] #2  Memory: @BotPTR *+bot, idx=Bot; !jvms: AndOr1::test1 @ bci:1 (line 393)
 39  Proj  ===  37  [[ 52  43  51  48 ]] #1 !jvms: AndOr1::test1 @ bci:1 (line 393)
 44  CatchProj  ===  43  [[ 51 ]] #0@bci -1  !jvms: AndOr1::test1 @ bci:1 (line 393)
 52  Rethrow  ===  45  39  40  8  9 exception 48  [[ 0 ]] 
 51  Return  ===  44  39  40  8  9  [[ 0 ]] 
 0  Root  ===  0  51  52  [[ 0  1  3 ]] inner

s390 is now maintained by IBM (we don't build 18);;;","2021-09-16 03:02;chagedorn;> PPC64:
> Compilation(s) of failed match(es):

test1 should have an IR fail which is expected in the test. Is TestIRMatching failing and if so what is the exception message?

> s390 is now maintained by IBM (we don't build 18)

Okay;;;","2021-09-16 03:08;mdoerr;TestIRMatching failed with one or more exceptions:
Constraint BadFailOnConstraint, Class CheckCastArray, Method array(), Rule 2 with ""failOn"", regex: 1 should have been matched: expected true, was false
java.lang.RuntimeException: Constraint BadFailOnConstraint, Class CheckCastArray, Method array(), Rule 2 with ""failOn"", regex: 1 should have been matched: expected true, was false;;;","2021-09-16 07:48;chagedorn;Thanks Martin!;;;","2021-09-20 05:59;roboduke;Changeset: 6f3e40c1
Author:    Christian Hagedorn <chagedorn@openjdk.org>
Date:      2021-09-20 12:56:08 +0000
URL:       https://git.openjdk.java.net/jdk/commit/6f3e40c16db899f1add67b997dede17eeb83418f
;;;","2021-09-20 10:45;dcubed;The fix is integrated in jdk-18+16-870.;;;",,,,,,,,,,,,,,,,,,
move have_special_privileges to os_posix for POSIX platforms,JDK-8273815,5058621,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,mbaesken,mbaesken,mbaesken,2021-09-15 06:43,2021-09-22 19:08,2023-10-01 09:57,2021-09-20 01:31,18,,,,,,,18,hotspot,,0,,,,,,,,,,,,,,,,,,,,,,We have identical have_special_privileges() for  Linux/AIX/BSD so the function is a good candidate to be moved to os_posix.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,generic,,,,,,,,,generic,,,,,"0|i2ucu3:",9223372036854775807,b16,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,,,"2021-09-20 01:31;roboduke;Changeset: dc7f452a
Author:    Matthias Baesken <mbaesken@openjdk.org>
Date:      2021-09-20 08:29:12 +0000
URL:       https://git.openjdk.java.net/jdk/commit/dc7f452acbe3afa5aa6e31d316bd5e669c86d6f6
;;;",,,,,,,,,,,,,,,,,,,,,,,,,
Cleanup AddFontsToX11FontPath,JDK-8273808,5058613,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,mbaesken,mbaesken,mbaesken,2021-09-15 04:33,2021-10-20 08:27,2023-10-01 09:57,2021-09-17 01:20,17,18,,,,,,18,client-libs,,0,jdk17u-fix-request,jdk17u-fix-yes,,,,,,,,,,,,,,,,,,,,Seems  AddFontsToX11FontPath from fontpath.c  is unused/unreferenced and can be removed.,,,,,,,,,,,JDK-8275649,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,generic,,,,,,,,,generic,,,,,"0|i2ucsb:",9223372036854775807,b16,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@5a9b3fd3,,,,,,,,,"2021-09-17 01:20;roboduke;Changeset: 35f6f1d6
Author:    Matthias Baesken <mbaesken@openjdk.org>
Date:      2021-09-17 08:20:10 +0000
URL:       https://git.openjdk.java.net/jdk/commit/35f6f1d69f4238f16595b9b8f1d11db9e49d4cc9
;;;","2021-10-12 01:21;mbaesken;jdk17u Fix request:
I would like to have the fix in 17u as well because the function can be removed there too. The patch applies cleanly.;;;",,,,,,,,,,,,,,,,,,,,,,,,
Zero: Drop incorrect test block from compiler/startup/NumCompilerThreadsCheck.java,JDK-8273807,5058612,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,shade,shade,shade,2021-09-15 04:07,2023-06-27 07:52,2023-10-01 09:57,2021-09-16 01:14,11,17,18,,,,,18,hotspot,,0,hs-comp-triaged,jdk11u-fix-request,jdk11u-fix-yes,jdk17u-fix-request,jdk17u-fix-yes,noreg-self,oracle-triage-18,redhat-interest,,,,,,,,,,,,,,"There is a Zero-specific test block in compiler/startup/NumCompilerThreadsCheck.java, which currently fails:

$ CONF=linux-x86_64-zero-fastdebug make exploded-test TEST=compiler/startup/NumCompilerThreadsCheck.java
...

STDERR:
 stdout: [];
 stderr: [intx CICompilerCount=-1 is outside the allowed range [ 0 ... 2147483647 ]
Improperly specified VM option 'CICompilerCount=-1'
Error: Could not create the Java Virtual Machine.
Error: A fatal exception has occurred. Program will exit.
]
 exitValue = 1

java.lang.RuntimeException: 'must be at least 0' missing from stdout/stderr 

	at jdk.test.lib.process.OutputAnalyzer.shouldContain(OutputAnalyzer.java:221)
	at compiler.startup.NumCompilerThreadsCheck.main(NumCompilerThreadsCheck.java:53)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at com.sun.javatest.regtest.agent.MainActionHelper$AgentVMRunnable.run(MainActionHelper.java:312)
	at java.base/java.lang.Thread.run(Thread.java:833)

I believe it was rendered obsolete by JDK-8122937.",,,,,,,,,,,JDK-8274707,JDK-8310964,JDK-8306574,,,,,,,,,,,,,,,,,,,,,,JDK-8122937,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2ucs3:",9223372036854775807,b16,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2021-09-15 06:49;chagedorn;ILW = Single test failure on Zero, only affects Zero, no workaround = MLH = P4;;;","2021-09-16 01:14;roboduke;Changeset: 1c5de8b8
Author:    Aleksey Shipilev <shade@openjdk.org>
Date:      2021-09-16 08:12:31 +0000
URL:       https://git.openjdk.java.net/jdk/commit/1c5de8b86b038f5d5c313c504a8868e36fc80bde
;;;","2021-10-01 04:04;shade;Fix Request (17u)

Fixes test for Zero. Applies cleanly. Test starts to pass.;;;","2023-06-22 07:29;goetz;Fix request [11u]

I backport this for parity with 11.0.20-oracle.
No risk, only a test change.
Clean backport. 
SAP nighlty testing passed;;;","2023-06-22 07:43;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk11u-dev/pull/1990
Date: 2023-06-22 14:35:44 +0000;;;",,,,,,,,,,,,,,,,,,,,,
compiler/cpuflags/TestSSE4Disabled.java should test for CPU feature explicitly,JDK-8273806,5058611,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,shade,shade,shade,2021-09-15 03:57,2023-02-24 12:15,2023-10-01 09:57,2021-09-16 01:25,11,17,18,,,,,18,hotspot,,0,hs-comp-triaged,jdk11u-fix-request,jdk11u-fix-yes,jdk17u-fix-request,jdk17u-fix-yes,noreg-self,oracle-triage-18,redhat-interest,,,,,,,,,,,,,,"JDK-8158214 added a test that verifies that machines with SSE4 support do not crash when lower SSE level is required. But it tests for CPU capabilities weirdly.

This _tangentially_ manifests when running the test with Zero:

```
$ CONF=linux-x86_64-zero-fastdebug make exploded-test TEST=compiler/cpuflags/TestSSE4Disabled.java
...
STDERR:
Unrecognized VM option 'UseSSE=3'
Error: Could not create the Java Virtual Machine.
Error: A fatal exception has occurred. Program will exit.
```

I think we can test that target CPU supports SSE4, and only run the test then. It would implicitly fix Zero test failure too, as Zero impersonates a ""generic"" featureless CPU. Plus, it would stop running the -Xcomp test on arches that do not actually need to run this test.",,,,,,,,,,,JDK-8274708,JDK-8298001,JDK-8303195,,,,,,,,,,,,,,,,,,,,,,JDK-8158214,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2ucrv:",9223372036854775807,b16,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2021-09-15 06:53;chagedorn;ILW = Single test failure on Zero due to badly testing CPU capabilities, only affects Zero?, no workaround = MLH = P4;;;","2021-09-16 01:25;roboduke;Changeset: 09ecb119
Author:    Aleksey Shipilev <shade@openjdk.org>
Date:      2021-09-16 08:23:55 +0000
URL:       https://git.openjdk.java.net/jdk/commit/09ecb11927f0042ddc0c5c23d747b275ab70b36b
;;;","2021-10-01 03:52;shade;Fix Request (17u)

Fixes the test on Zero. Applies cleanly.;;;","2023-02-23 04:46;goetz;Fix request [11u]

I backport this for parity with 11.0.19-oracle.
No risk, only a test change.
Clean backport.
Test passes.SAP nightly testing passed.;;;","2023-02-23 04:57;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk11u-dev/pull/1767
Date: 2023-02-23 12:49:00 +0000;;;",,,,,,,,,,,,,,,,,,,,,
gc/g1/TestGCLogMessages.java test should handle non-JFR configs,JDK-8273805,5058610,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,shade,shade,shade,2021-09-15 03:39,2022-03-29 02:56,2023-10-01 09:57,2021-09-16 01:25,18,,,,,,,18,hotspot,,0,gc-g1,testbug,ursqe-triaged,,,,,,,,,,,,,,,,,,,"JDK-8273147 introduced a more thorough GC messages test, which includes JFR. But it is not guaranteed that JFR is actually in the build, like in the case of Zero:

$ CONF=linux-x86_64-zero-fastdebug make exploded-test TEST=gc/g1/TestGCLogMessages.java

java.lang.RuntimeException: '\[debug.*Weak JFR Old Object Samples' missing from stdout/stderr 

	at jdk.test.lib.process.OutputAnalyzer.shouldMatch(OutputAnalyzer.java:340)
	at gc.g1.TestGCLogMessages.checkMessagesAtLevel(TestGCLogMessages.java:193)
	at gc.g1.TestGCLogMessages.testNormalLogs(TestGCLogMessages.java:224)
	at gc.g1.TestGCLogMessages.main(TestGCLogMessages.java:199)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at com.sun.javatest.regtest.agent.MainWrapper$MainThread.run(MainWrapper.java:127)
	at java.base/java.lang.Thread.run(Thread.java:833)
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8273147,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2ucrn:",9223372036854775807,b16,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6b00f96c,,,,,,,,,"2021-09-16 01:25;roboduke;Changeset: 99cfc160
Author:    Aleksey Shipilev <shade@openjdk.org>
Date:      2021-09-16 08:22:48 +0000
URL:       https://git.openjdk.java.net/jdk/commit/99cfc160af119ab70fa3549711cf6948402c4df8
;;;",,,,,,,,,,,,,,,,,,,,,,,,,
Platform.isTieredSupported should handle the no-compiler case,JDK-8273804,5058609,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,shade,shade,shade,2021-09-15 03:23,2022-03-07 02:49,2023-10-01 09:57,2021-09-16 00:53,11,17,18,,,,,18,hotspot,,0,jdk17u-fix-request,jdk17u-fix-yes,redhat-interest,,,,,,,,,,,,,,,,,,,"Happens with Zero tests:

$ CONF=linux-x86_64-zero-fastdebug make exploded-test TEST=compiler/codecache/CheckSegmentedCodeCache.java
...

java.lang.NullPointerException: Cannot invoke ""String.contains(java.lang.CharSequence)"" because ""jdk.test.lib.Platform.compiler"" is null
	at jdk.test.lib.Platform.isTieredSupported(Platform.java:82)
	at compiler.codecache.CheckSegmentedCodeCache.verifySegmentedCodeCache(CheckSegmentedCodeCache.java:61)
	at compiler.codecache.CheckSegmentedCodeCache.main(CheckSegmentedCodeCache.java:108)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at com.sun.javatest.regtest.agent.MainWrapper$MainThread.run(MainWrapper.java:127)
	at java.base/java.lang.Thread.run(Thread.java:833)
",,,,,,,,,,,JDK-8282732,JDK-8280811,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2ucrf:",9223372036854775807,b16,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@78d03d9a,,,,,,,,,"2021-09-16 00:53;roboduke;Changeset: 46af82e5
Author:    Aleksey Shipilev <shade@openjdk.org>
Date:      2021-09-16 07:52:24 +0000
URL:       https://git.openjdk.java.net/jdk/commit/46af82e5b0d176e340f46125f8a3bb17e56bd7b3
;;;","2022-03-04 03:19;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk17u-dev/pull/194
Date: 2022-03-04 11:15:34 +0000;;;","2022-03-05 01:49;mdoerr;Fix Request (17u):
Should get backported for parity with 17.0.4-oracle. Applies cleanly. No new test failures observed (our nightly tests).;;;",,,,,,,,,,,,,,,,,,,,,,,
Zero SPARC64 debug builds fail due to missing interpreter fields,JDK-8273795,5058599,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,shade,shade,shade,2021-09-15 01:34,2021-11-03 07:19,2023-10-01 09:57,2021-09-16 08:26,11,,,,,,,11.0.14,hotspot,,0,jdk11u-fix-request,jdk11u-fix-yes,,,,,,,,,,,,,,,,,,,,"Current Zero SPARC64 build fails with:

/home/buildbot/worker/build-jdk11u-dev-linux/build/src/hotspot/share/interpreter/bytecodeInterpreter.cpp: In member function 'void BytecodeInterpreter::print()':
/home/buildbot/worker/build-jdk11u-dev-linux/build/src/hotspot/share/interpreter/bytecodeInterpreter.cpp:3491:67: error: 'class BytecodeInterpreter' has no member named '_last_Java_pc'
 3491 |   tty->print_cr(""last_Java_pc: "" INTPTR_FORMAT, (uintptr_t) this->_last_Java_pc);
      |                                                                   ^~~~~~~~~~~~~
/home/buildbot/worker/build-jdk11u-dev-linux/build/src/hotspot/share/interpreter/bytecodeInterpreter.cpp:3492:67: error: 'class BytecodeInterpreter' has no member named '_frame_bottom'
 3492 |   tty->print_cr(""frame_bottom: "" INTPTR_FORMAT, (uintptr_t) this->_frame_bottom);
      |                                                                   ^~~~~~~~~~~~~
/home/buildbot/worker/build-jdk11u-dev-linux/build/src/hotspot/share/interpreter/bytecodeInterpreter.cpp:3493:71: error: 'class BytecodeInterpreter' has no member named '_native_fresult'
 3493 |   tty->print_cr(""&native_fresult: "" INTPTR_FORMAT, (uintptr_t) &this->_native_fresult);
      |                                                                       ^~~~~~~~~~~~~~~
/home/buildbot/worker/build-jdk11u-dev-linux/build/src/hotspot/share/interpreter/bytecodeInterpreter.cpp:3494:69: error: 'class BytecodeInterpreter' has no member named '_native_lresult'
 3494 |   tty->print_cr(""native_lresult: "" INTPTR_FORMAT, (uintptr_t) this->_native_lresult);
      |                                                                     ^~~~~~~~~~~~~~~

This is a SPARC-specific, Zero-specific, 11u-specific problem.

JDK-8074457 removed the fields with the non-zero C++ interpreter, which broke Zero build:
http://hg.openjdk.java.net/jdk9/jdk9/hotspot/rev/d321ba06d890#l29.36

Mainline is not affected, because JDK-8244224 removed the SPARC support along with the affected block in bytecodeInterpreter.cpp. 

So we just want to fix it in 11u, I think.
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8074457,JDK-8244224,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2ucp7:",9223372036854775807,b01,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,,,"2021-09-16 00:59;shade;Fix Request (11u)

Fixes one odd Zero configuration. 11u-specific patch, acked by Coleen.;;;","2021-09-16 08:26;roboduke;Changeset: e3f923f9
Author:    Aleksey Shipilev <shade@openjdk.org>
Date:      2021-09-16 15:24:13 +0000
URL:       https://git.openjdk.java.net/jdk11u-dev/commit/e3f923f9dd24e3882b52bcc03ea47390a828c90b
;;;","2021-11-03 07:12;roboduke;Changeset: e3f923f9
Author:    Aleksey Shipilev <shade@openjdk.org>
Date:      2021-09-16 15:24:13 +0000
URL:       https://git.openjdk.java.net/jdk11u/commit/e3f923f9dd24e3882b52bcc03ea47390a828c90b
;;;",,,,,,,,,,,,,,,,,,,,,,,
JumpableGenerator.rngs() documentation refers to wrong method,JDK-8273792,5058571,Bug,Closed,JDK,JDK,software,duke,,,P4,Fixed,gls,webbuggrp,webbuggrp,2021-09-14 17:49,2021-11-29 14:49,2023-10-01 09:57,2021-11-22 08:19,17,,,,,,,18,core-libs,,0,dcsaw,noreg-doc,webbug,,,,,,,,,,,,,,,,,,,"A DESCRIPTION OF THE PROBLEM :
https://docs.oracle.com/en/java/javase/17/docs/api/java.base/java/util/random/RandomGenerator.JumpableGenerator.html#rngs() says:
> The default implementation calls jump().

However, this is incorrect. The default implementation calls jump*s*. Both the link text and the link need to be corrected.


",,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8277003,,,,,,,,,,,,,,,,,,,,,,,generic,,,,,,,,,generic,,,,,"0|i2uciz:",9223372036854775807,b25,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@38ded199,,,,,,,Verified,,"2021-09-15 01:21;tongwan;Moved to JDK for further evaluations.;;;","2021-09-15 19:05;gls;The report is correct. I will replace

{@link JumpableGenerator#jump jump}

with

{@link JumpableGenerator#jumps jumps}

in the doc comment.;;;","2021-11-22 08:19;roboduke;Changeset: 6b4fbaed
Author:    Jim Laskey <jlaskey@openjdk.org>
Date:      2021-11-22 16:17:01 +0000
URL:       https://git.openjdk.java.net/jdk/commit/6b4fbaedbb782c5f028735ac1d92838895589192
;;;","2021-11-29 14:49;tongwan;Verified.;;;",,,,,,,,,,,,,,,,,,,,,,
Potential cyclic dependencies between Gregorian and CalendarSystem,JDK-8273790,5058595,Bug,Closed,JDK,JDK,software,duke,,,P3,Fixed,jpai,yyang,yyang,2021-09-15 01:08,2022-04-08 03:45,2023-10-01 09:57,2021-09-27 22:04,11,12,13,14,15,16,17,18,core-libs,,0,jdk11u-fix-request,jdk11u-fix-yes,jdk13u-fix-request,jdk13u-fix-yes,jdk15u-fix-request,jdk15u-fix-yes,jdk17u-fix-request,jdk17u-fix-SQE-ok-next,jdk17u-fix-yes,,,,,,,,,,,,,"We find cyclic dependencies between Gregorian and CalendarSystem classes in our test environment when using JDK11 AOT(It also affects JDK tip).

The class hierarchies are as follows(w/ some simplifications):

```
class GregorianCalendar {
	static Gregorian base = CalendarSystem.getGregorianCalendar();
}

class Gregorian extends BaseCalendar { }
class BaseCalendar extends AbstractCalendar {}
class AbstractCalendar extends CalendarSystem {}

public class CalendarSystem {
	Gregorian GREGORIAN_INSTANCE = new Gregorian();
}
```

We create two new threads to link GregorianCalendar and AbstractCalendar, respectively.

T1: new GregorianCalendar()
GregorianCalendar -> Gregorian -> BaseCalendar -> AbstractCalendar -> CalendarSystem

T2:  Unsafe.ensureInitialized(AbstractCalendar.class)
AbstractCalendar -> CalendarSystem -> Gregorian

What would next happen, is that application hanging due to deadlock between inGregorian and AbstractCalendar.",,,,,,,,,,,JDK-8275321,JDK-8276235,JDK-8275036,JDK-8276237,JDK-8278201,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"2021-09-23 00:25;yyang;aothang.txt;https://bugs.openjdk.org/secure/attachment/96557/aothang.txt","2021-09-23 00:25;yyang;aothang2.txt;https://bugs.openjdk.org/secure/attachment/96558/aothang2.txt",,,,generic,,,,,,,,,generic,,,,,"0|i2ucob:",9223372036854775807,b17,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@7644fb4c,,,,,,,Verified,,"2021-09-15 09:37;naoto;Although there's a possible cyclic dependency, it is highly unlikely that this could be a real problem case because `AbstractCalendar` is not a public API and is an abstract class. Lowering the priority.;;;","2021-09-17 19:42;yyang;Hi [~naoto] This is a real problem when we use AOT compilation. It calls Unsafe.ensureInitialized w/o knowing class hierarchies.;;;","2021-09-21 13:15;naoto;Hi [~yyang], can you please post the actual thread dump for the deadlock (and reopen this issue)? In the example above, I cannot seem to get why the deadlock occurs, as CalendarSystem.getGregorianCalendar() does not wait for other dependencies.;;;","2021-09-24 06:53;jpai;I was able to reproduce this in a simple jtreg test which looks like:

```
import java.util.ArrayList;
import java.util.Collections;
import java.util.List;
import java.util.concurrent.Callable;
import java.util.concurrent.CountDownLatch;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;

/**
 * @test
 * @bug 8273790
 * @summary Verify that concurrent classloading of sun.util.calendar.Gregorian and
 * sun.util.calendar.CalendarSystem doesn't lead to a deadlock
 * @modules java.base/sun.util.calendar:open
 * @run main/othervm CalendarSystemDeadLockTest
 * @run main/othervm CalendarSystemDeadLockTest
 * @run main/othervm CalendarSystemDeadLockTest
 * @run main/othervm CalendarSystemDeadLockTest
 * @run main/othervm CalendarSystemDeadLockTest
 */
public class CalendarSystemDeadLockTest {

    public static void main(final String[] args) throws Exception {
        testConcurrentClassLoad();
    }

    /**
     * Loads {@code sun.util.calendar.Gregorian} and {@code sun.util.calendar.CalendarSystem}
     * and invokes {@code sun.util.calendar.CalendarSystem#getGregorianCalendar()} concurrently
     * in a thread of their own and expects the classloading of both those classes
     * to succeed. Additionally, after these tasks are done, calls the
     * sun.util.calendar.CalendarSystem#getGregorianCalendar() and expects it to return a singleton
     * instance
     */
    private static void testConcurrentClassLoad() throws Exception {
        final int numTasks = 4;
        final CountDownLatch taskTriggerLatch = new CountDownLatch(numTasks);
        final List<Callable<?>> tasks = new ArrayList<>();
        // add the sun.util.calendar.Gregorian and sun.util.calendar.CalendarSystem for classloading.
        // there are main 2 classes which had a cyclic call in their static init
        tasks.add(new ClassLoadTask(""sun.util.calendar.Gregorian"", taskTriggerLatch));
        tasks.add(new ClassLoadTask(""sun.util.calendar.CalendarSystem"", taskTriggerLatch));
        // add a couple of tasks which directly invoke sun.util.calendar.CalendarSystem#getGregorianCalendar()
        tasks.add(new GetGregorianCalTask(taskTriggerLatch));
        tasks.add(new GetGregorianCalTask(taskTriggerLatch));
        final ExecutorService executor = Executors.newFixedThreadPool(tasks.size());
        try {
            final Future<?>[] results = new Future[tasks.size()];
            // submit
            int i = 0;
            for (final Callable<?> task : tasks) {
                results[i++] = executor.submit(task);
            }
            // wait for completion
            for (i = 0; i < tasks.size(); i++) {
                results[i].get();
            }
        } finally {
            executor.shutdownNow();
        }
        // check that the sun.util.calendar.CalendarSystem#getGregorianCalendar() does indeed return
        // a proper instance
        final Object gCal = callCalSystemGetGregorianCal();
        if (gCal == null) {
            throw new RuntimeException(""sun.util.calendar.CalendarSystem#getGregorianCalendar()"" +
                    "" unexpectedly returned null"");
        }
        // now verify that each call to getGregorianCalendar(), either in the tasks or here, returned the exact
        // same instance
        if (GetGregorianCalTask.instances.size() != 2) {
            throw new RuntimeException(""Unexpected number of results from call "" +
                    ""to sun.util.calendar.CalendarSystem#getGregorianCalendar()"");
        }
        // intentional identity check since sun.util.calendar.CalendarSystem#getGregorianCalendar() is
        // expected to return a singleton instance
        if ((gCal != GetGregorianCalTask.instances.get(0)) || (gCal != GetGregorianCalTask.instances.get(1))) {
            throw new RuntimeException(""sun.util.calendar.CalendarSystem#getGregorianCalendar()"" +
                    "" returned different instances"");
        }
    }

    /**
     * Reflectively calls sun.util.calendar.CalendarSystem#getGregorianCalendar() and returns
     * the result
     */
    private static Object callCalSystemGetGregorianCal() throws Exception {
        final Class<?> k = Class.forName(""sun.util.calendar.CalendarSystem"");
        return k.getDeclaredMethod(""getGregorianCalendar"").invoke(null);
    }

    private static class ClassLoadTask implements Callable<Class<?>> {
        private final String className;
        private final CountDownLatch latch;

        private ClassLoadTask(final String className, final CountDownLatch latch) {
            this.className = className;
            this.latch = latch;
        }

        @Override
        public Class<?> call() {
            System.out.println(Thread.currentThread().getName() + "" loading "" + this.className);
            try {
                // let the other tasks know we are ready to trigger our work
                latch.countDown();
                // wait for the other task to let us know they are ready to trigger their work too
                latch.await();
                return Class.forName(this.className);
            } catch (Exception e) {
                throw new RuntimeException(e);
            }
        }
    }

    private static class GetGregorianCalTask implements Callable<Object> {
        // keeps track of the instances returned by calls to sun.util.calendar.CalendarSystem#getGregorianCalendar()
        // by this task
        private static final List<Object> instances = Collections.synchronizedList(new ArrayList<>());
        private final CountDownLatch latch;

        private GetGregorianCalTask(final CountDownLatch latch) {
            this.latch = latch;
        }

        @Override
        public Object call() {
            System.out.println(Thread.currentThread().getName()
                    + "" calling  sun.util.calendar.CalendarSystem#getGregorianCalendar()"");
            try {
                // let the other tasks know we are ready to trigger our work
                latch.countDown();
                // wait for the other task to let us know they are ready to trigger their work too
                latch.await();
                final Object inst = callCalSystemGetGregorianCal();
                instances.add(inst);
                return inst;
            } catch (Exception e) {
                throw new RuntimeException(e);
            }
        }
    }
}
```
This test times out due to a deadlock and the relevant threads are these:

""main"" #1 prio=5 os_prio=31 cpu=144.38ms elapsed=120.22s tid=0x00007fa3ae811a00 nid=8707 in Object.wait()  [0x000070000c9e3000]
   java.lang.Thread.State: WAITING (on object monitor)
	at java.lang.Object.wait(java.base@18-internal/Native Method)
	- waiting on <0x000000070fc1a048> (a java.lang.Thread)
	at java.lang.Thread.join(java.base@18-internal/Thread.java:1304)
	- locked <0x000000070fc1a048> (a java.lang.Thread)
	at java.lang.Thread.join(java.base@18-internal/Thread.java:1372)
	at com.sun.javatest.regtest.agent.MainWrapper.main(MainWrapper.java:74)

""MainThread"" #15 prio=5 os_prio=31 cpu=12.11ms elapsed=120.07s tid=0x00007fa3ad822000 nid=23811 waiting on condition  [0x000070000dd1f000]
   java.lang.Thread.State: WAITING (parking)
	at jdk.internal.misc.Unsafe.park(java.base@18-internal/Native Method)
	- parking to wait for  <0x000000070fc81df0> (a java.util.concurrent.FutureTask)
	at java.util.concurrent.locks.LockSupport.park(java.base@18-internal/LockSupport.java:211)
	at java.util.concurrent.FutureTask.awaitDone(java.base@18-internal/FutureTask.java:447)
	at java.util.concurrent.FutureTask.get(java.base@18-internal/FutureTask.java:190)
	at CalendarSystemDeadLockTest.testConcurrentClassLoad(CalendarSystemDeadLockTest.java:80)
	at CalendarSystemDeadLockTest.main(CalendarSystemDeadLockTest.java:48)
	at jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(java.base@18-internal/Native Method)
	at jdk.internal.reflect.NativeMethodAccessorImpl.invoke(java.base@18-internal/NativeMethodAccessorImpl.java:77)
	at jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(java.base@18-internal/DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(java.base@18-internal/Method.java:568)
	at com.sun.javatest.regtest.agent.MainWrapper$MainThread.run(MainWrapper.java:127)
	at java.lang.Thread.run(java.base@18-internal/Thread.java:833)

""pool-1-thread-1"" #16 prio=5 os_prio=31 cpu=20.97ms elapsed=120.05s tid=0x00007fa3b0010800 nid=24067 in Object.wait()  [0x000070000de22000]
   java.lang.Thread.State: RUNNABLE
	at java.lang.Class.forName0(java.base@18-internal/Native Method)
	- waiting on the Class initialization monitor for sun.util.calendar.CalendarSystem
	at java.lang.Class.forName(java.base@18-internal/Class.java:375)
	at CalendarSystemDeadLockTest$ClassLoadTask.call(CalendarSystemDeadLockTest.java:132)
	at CalendarSystemDeadLockTest$ClassLoadTask.call(CalendarSystemDeadLockTest.java:115)
	at java.util.concurrent.FutureTask.run(java.base@18-internal/FutureTask.java:264)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(java.base@18-internal/ThreadPoolExecutor.java:1136)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(java.base@18-internal/ThreadPoolExecutor.java:635)
	at java.lang.Thread.run(java.base@18-internal/Thread.java:833)

""pool-1-thread-2"" #17 prio=5 os_prio=31 cpu=14.79ms elapsed=120.05s tid=0x00007fa3b0010e00 nid=38147 in Object.wait()  [0x000070000df25000]
   java.lang.Thread.State: RUNNABLE
	at sun.util.calendar.CalendarSystem.<clinit>(java.base@18-internal/CalendarSystem.java:114)
	- waiting on the Class initialization monitor for sun.util.calendar.Gregorian
	at java.lang.Class.forName0(java.base@18-internal/Native Method)
	at java.lang.Class.forName(java.base@18-internal/Class.java:375)
	at CalendarSystemDeadLockTest$ClassLoadTask.call(CalendarSystemDeadLockTest.java:132)
	at CalendarSystemDeadLockTest$ClassLoadTask.call(CalendarSystemDeadLockTest.java:115)
	at java.util.concurrent.FutureTask.run(java.base@18-internal/FutureTask.java:264)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(java.base@18-internal/ThreadPoolExecutor.java:1136)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(java.base@18-internal/ThreadPoolExecutor.java:635)
	at java.lang.Thread.run(java.base@18-internal/Thread.java:833)

""pool-1-thread-3"" #18 prio=5 os_prio=31 cpu=4.47ms elapsed=120.05s tid=0x00007fa3ad820a00 nid=24835 in Object.wait()  [0x000070000e028000]
   java.lang.Thread.State: RUNNABLE
	at java.lang.Class.forName0(java.base@18-internal/Native Method)
	- waiting on the Class initialization monitor for sun.util.calendar.CalendarSystem
	at java.lang.Class.forName(java.base@18-internal/Class.java:375)
	at CalendarSystemDeadLockTest.callCalSystemGetGregorianCal(CalendarSystemDeadLockTest.java:111)
	at CalendarSystemDeadLockTest$GetGregorianCalTask.call(CalendarSystemDeadLockTest.java:158)
	at java.util.concurrent.FutureTask.run(java.base@18-internal/FutureTask.java:264)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(java.base@18-internal/ThreadPoolExecutor.java:1136)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(java.base@18-internal/ThreadPoolExecutor.java:635)
	at java.lang.Thread.run(java.base@18-internal/Thread.java:833)

""pool-1-thread-4"" #19 prio=5 os_prio=31 cpu=4.45ms elapsed=120.05s tid=0x00007fa3ac85be00 nid=37891 in Object.wait()  [0x000070000e12b000]
   java.lang.Thread.State: RUNNABLE
	at java.lang.Class.forName0(java.base@18-internal/Native Method)
	- waiting on the Class initialization monitor for sun.util.calendar.CalendarSystem
	at java.lang.Class.forName(java.base@18-internal/Class.java:375)
	at CalendarSystemDeadLockTest.callCalSystemGetGregorianCal(CalendarSystemDeadLockTest.java:111)
	at CalendarSystemDeadLockTest$GetGregorianCalTask.call(CalendarSystemDeadLockTest.java:158)
	at java.util.concurrent.FutureTask.run(java.base@18-internal/FutureTask.java:264)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(java.base@18-internal/ThreadPoolExecutor.java:1136)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(java.base@18-internal/ThreadPoolExecutor.java:635)
	at java.lang.Thread.run(java.base@18-internal/Thread.java:833)


The pool-1-thread-x are the threads where the real work (classloading stuff) is triggered and they get deadlocked.

I have a potential patch for this which I'll propose as a pull request.

;;;","2021-09-24 11:21;naoto;Upgraded the priority to P3, as the deadlock seems to occur in normal (non-AOT) situations.;;;","2021-09-27 22:04;roboduke;Changeset: ddc26274
Author:    Jaikiran Pai <jpai@openjdk.org>
Date:      2021-09-28 05:00:27 +0000
URL:       https://git.openjdk.java.net/jdk/commit/ddc262746aea99050b9a6484f51c7ddb8f4bc991
;;;","2021-10-10 19:14;yyang;Fix request [17u]

I backport this for parity with 17u. Low risk, only use holer pattern of a singleton object. Apply cleanly. Test passes.;;;","2021-10-10 23:54;goetz;Yi, please add a ""Fix request [11u]"" comment with an elaboration on the reason for the downport and its risk before labeling with jdk11u-fix-request.
(Also, I do not understand your above comment: how can you downport something to 17u for parity with 17u?);;;","2021-10-11 03:31;yyang;Hi [~goetz], I'm not sure what you mean, can you elaborate more? As I see, the original patch was targeted to jdk tip, and I try to backport it to jdk17u.;;;","2021-10-11 04:42;goetz;Hi,
As I read the history, you added tags ""jdk11u-fix-request jdk17u-fix-request"".
You also opened a jdk11u-dev Pull Request.
If you add jdk11u-fix-request, you need to add a ""Fix request [11u]""  comment.
I removed the tag. You can add it again after adding the comment.  I need the comment 
to decide whether to admit the change to 11u or not.

And to explain my comment in parentheses: Its basically about wording.
JBS records backports for two Java 11 JVM projects: the oracle internal one, and the OpenJDK one.  The versions are for example 11.0.14 for the OpenJDK, and 11.0.14-oracle for the Oracle internal one.

For OpenJDK 11u, we want to have similar quality to the Oracle version, therefor we backport most of the changes Oracle did backport.  In this context it makes sense to reason ""I backport this change for parity with 11.0.14-oracle to open 11.0.14.""

For 17u, there is only one project (so far), thus the reasoning ""for parity"" makes no sense. Parity with what?;;;","2021-10-11 19:17;yyang;[~goetz] Thank you for your explanation. I misunderstood the meaning of the word ""parity"". I thought it meant to keep jdk17 and jdktip consistent.;;;","2021-10-12 18:30;yyang;Fix request [11u]

I backport this for 11u to avoid potential application hanging when occasionally loading these classes in such manner. Low risk, only use holer pattern of a singleton object. Apply cleanly. Test passes with release build.;;;","2021-11-01 08:21;yan;Fix request (13u, 15u):

this useful fix applies cleanly in both cases. The test works fine, the risk seems low.;;;","2022-04-08 03:45;sqetools;verified;;;",,,,,,,,,,,,
CDSPluginTest should only expect classes_nocoops.jsa exists on supported 64-bit platforms,JDK-8273774,5058577,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,ccheung,aoqi,aoqi,2021-09-14 19:42,2021-09-27 19:55,2023-10-01 09:57,2021-09-17 09:42,18,,,,,,,18,tools,,0,ursqe-triaged,,,,,,,,,,,,,,,,,,,,,"Filed on behalf of Sun Xu (sunxu01@loongson.cn).

The test assumes that it always runs on 64-bit platform and classes_nocoops.jsa is always created.
It's a test bug. The test should only expect classes_nocoops.jsa exists if it's running on a supported 64-bit platform.
However, for unknown target platform, it's unknown if it's 64-bit or not.

This patch fix the test to check if classes_nocoops.jsa exists only on one of the JDK supported platforms (x64 or aarch64) via the sun.arch.data.model system property.
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8264322,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2uckb:",9223372036854775807,b16,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@3da653bd,,,,,,,,,"2021-09-17 09:42;roboduke;Changeset: 83020617
Author:    sunxu <sunxu01@loongson.cn>
Committer: Calvin Cheung <ccheung@openjdk.org>
Date:      2021-09-17 16:41:51 +0000
URL:       https://git.openjdk.java.net/jdk/commit/83020617e70d40a42029720534af561f8af8bce2
;;;",,,,,,,,,,,,,,,,,,,,,,,,,
Re-introduce Automatic-Module-Name in empty jars,JDK-8273754,5058549,Bug,Resolved,JDK,JDK,software,duke,,,P2,Fixed,abagarwal,abagarwal,abagarwal,2021-09-14 12:55,2022-06-30 10:39,2023-10-01 09:57,2021-09-15 02:01,jfx17,,,,,,,jfx18,javafx,,0,noreg-build,regression,,,,,,,,,,,,,,,,,,,,"In JDK-8264998 [1], Automatic-Module-Name was removed from empty Maven jars to allow seamless adaptation of JPMS.

It turns out that with the current approach of publishing platform agnostic jars, empty jars need this entry[2]. A better alternative to empty jars is still been discussed. It will need both time and effort.

Until an alternative is finalized, it is best revert the change made in JDK-8264998.

[1] https://bugs.openjdk.java.net/browse/JDK-8264998
[2] https://mail.openjdk.java.net/pipermail/openjfx-dev/2021-September/031934.html",,,,,,,,,,,JDK-8274164,JDK-8273833,,,,,,,,,,,,,,,,,,,,JDK-8274103,JDK-8274254,,JDK-8264998,,,,,,,,,,,,,,,,,,,,,,jfx17,,,,,,,"0|i2uce3:",9223372036854775807,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@1556b386,,,,,,,,,"2021-09-14 14:21;kcr;Once integrated into jfx mainline (for JavaFX 18), it can (and should be) backported to jfx17u for 17.0.1.;;;","2021-09-15 02:01;roboduke;Changeset: 7329279e
Author:    Abhinay Agarwal <abhinay.agarwal@gluonhq.com>
Committer: Johan Vos <jvos@openjdk.org>
Date:      2021-09-15 08:58:09 +0000
URL:       https://git.openjdk.java.net/jfx/commit/7329279e504070355ba9aa0517f0279e7e72c2cf
;;;",,,,,,,,,,,,,,,,,,,,,,,,
Grant JWS JavaFX apps access to Windows trust store,JDK-8273747,5058541,Bug,Closed,JDK,JDK,software,duke,,,P3,Fixed,aivanov,shadowbug,shadowbug,2021-09-14 12:08,2022-04-11 08:21,2023-10-01 09:57,2022-01-26 04:23,8u202,,,,,,,8u341,deploy,,0,8bpr-critical-approved,bugdb_33327484,cssn21_09_02,cssn21_10_02,cssn21_11_01,cssn21_11_02,cssn21_12_01,cssn21_12_02,cssn22_01_01,cssn22_01_02,sustaining,,,,,,,,,,,"A JNLP app that uses JavaFX (that uses <jfx:javafx-runtime version=""2.2+""/> tag in its <resources> element) does not take into account certificates from Windows Certificate store.

The JNLP app is hosted on a server that uses an SSL certificate that is issued by an internal Certification Authority (CA). When Java establishes the connection to the server, it cannot find a trusted root certificate and displays a security warning dialog with the message “The connection to this website is untrusted” and asks the user to confirm they trust the certificate.

The root certificate of the CA is installed into ""Trusted Root Certification Authorities"" store in the Windows trust store.

Regular Java Web Start apps (JNLP) as well as applets load the certificates from the Windows trust store and no security warning is displayed: the SSL certificate of the server is trusted because Java can find a trusted root certificate. It's the expected behaviour.

But it does not happen if the app uses JavaFX.
Only JavaFX apps are affected.",,,,,,,,,,,JDK-8280763,JDK-8284589,,,,,,,,,,,,,,,,,,,,,,,JDK-8280427,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2uccb:",9223372036854775807,b01,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@2d000be9,,,,,,,Verified,,"2022-01-26 04:17;aivanov;When the certificates from the Windows trust store are loaded, one can see the following lines in the deploy trace files:

security: Loading certificates from Internet Explorer ROOT certificate store
security: Loaded certificates from Internet Explorer ROOT certificate store

If you can't find these lines, the certificates from the Windows trust store are not loaded.


The certificates are loaded by Java Web Start apps and applets but they are not loaded in case of Java Web Start apps that use JavaFX.;;;",,,,,,,,,,,,,,,,,,,,,,,,,
VerifyLocale.java occasionally times out,JDK-8273745,5058536,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,jjg,jjg,jjg,2021-09-14 08:24,2021-10-11 15:46,2023-10-01 09:57,2021-10-05 08:23,18,,,,,,,18,tools,,0,noreg-self,ursqe-triaged,,,,,,,,,,,,,,,,,,,,"The javadoc test VerifyLocale.java occasionally times out, because it tries running javadoc on *all* available locales, which can number a 1000 or more. This is excessive.

We should reduce the number of invocations down to a reasonable number, perhaps configurable.  One default could be one-per-language.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2ucb7:",9223372036854775807,b18,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@7900061a,,,,,,,,,"2021-10-04 16:47;jjg;Proposed solution: skip cases for which we have seen any of the country, language or variant before.

This reduces the number of test cases down to under 400.  Current results:

Skipped 623 locales
Tested 393 locales;;;","2021-10-05 06:09;prappo;This timeout seems to have been observed at least once before: JDK-8212713.;;;","2021-10-05 08:23;roboduke;Changeset: 92b64a20
Author:    Jonathan Gibbons <jjg@openjdk.org>
Date:      2021-10-05 15:21:44 +0000
URL:       https://git.openjdk.java.net/jdk/commit/92b64a2053e3f3e0314ed489b92afd37c285ac5f
;;;",,,,,,,,,,,,,,,,,,,,,,,
half-closed SSLEngine status may cause application dead loop,JDK-8273734,5058523,Bug,Closed,JDK,JDK,software,duke,,,P4,Fixed,abakhtin,sgehwolf,sgehwolf,2021-09-14 06:32,2021-09-14 06:36,2023-10-01 09:57,2021-09-14 06:36,,,,,,,,openjdk8u312,security-libs,,0,,,,,,,,,,,,,,,,,,,,,,Explicit OpenJDK backport bug for JDK-8241054 and JDK-8214418 (closed).,,,,,,,,,,JDK-8241054,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,generic,,,,,,,,,generic,,,,,"0|i2uc8b:",9223372036854775807,b01,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@39d9862,,,,,,,,,"2021-09-14 06:35;sgehwolf;https://hg.openjdk.java.net/jdk8u/jdk8u-dev/jdk/rev/6ad1494ea3f4 ;;;","2021-09-14 06:36;sgehwolf;https://hg.openjdk.java.net/jdk8u/jdk8u/jdk/rev/6ad1494ea3f4;;;",,,,,,,,,,,,,,,,,,,,,,,,
"[lworld] C2 compilation fails with ""missed optimization opportunity""",JDK-8273715,5058497,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,thartmann,thartmann,thartmann,2021-09-14 01:39,2021-11-12 07:23,2023-10-01 09:57,2021-11-12 04:36,repo-valhalla,,,,,,,repo-valhalla,hotspot,,0,c2,intermittent,lw3,lworld,,,,,,,,,,,,,,,,,,"# A fatal error has been detected by the Java Runtime Environment:
#
#  Internal Error (/opt/mach5/mesos/work_dir/slaves/ff806ead-2cac-495d-9cbc-62116f99bf14-S13932/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/0d95c3b6-7f97-43db-a8b3-9f2fe274c9a1/runs/6e430950-69ff-469e-9c45-9138d1b69b09/workspace/open/src/hotspot/share/opto/compile.cpp:2776), pid=30645, tid=30659
#  assert(_late_inlines.length() == 0) failed: missed optimization opportunity
#
# JRE version: Java(TM) SE Runtime Environment (18.0+1) (fastdebug build 18-valhalla+1-85)
# Java VM: Java HotSpot(TM) 64-Bit Server VM (fastdebug 18-valhalla+1-85, mixed mode, sharing, tiered, compressed oops, compressed class ptrs, g1 gc, linux-amd64)
# Problematic frame:
# V  [libjvm.so+0xa522b9]  Compile::Optimize()+0x1a69
#
# Core dump will be written. Default location: Core dumps may be processed with ""/opt/core.sh %p"" (or dumping to /opt/mach5/mesos/work_dir/slaves/ff806ead-2cac-495d-9cbc-62116f99bf14-S13901/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/b96fd774-d9bb-4494-8451-3d8ab73333dd/runs/f245d3d2-3dd2-4bb2-b884-c0a2aea7e414/testoutput/test-support/jtreg_open_test_hotspot_jtreg_ctw_2/scratch/1/core.30645)
#
# If you would like to submit a bug report, please visit:
#   https://bugreport.java.com/bugreport/crash.jsp
#

---------------  S U M M A R Y ------------

Command Line: -XX:MaxRAMPercentage=4.16667 -Djava.io.tmpdir=/opt/mach5/mesos/work_dir/slaves/ff806ead-2cac-495d-9cbc-62116f99bf14-S13901/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/b96fd774-d9bb-4494-8451-3d8ab73333dd/runs/f245d3d2-3dd2-4bb2-b884-c0a2aea7e414/testoutput/test-support/jtreg_open_test_hotspot_jtreg_ctw_2/tmp -XX:+CreateCoredumpOnCrash -ea -esa -XX:CompileThreshold=100 -XX:+UnlockExperimentalVMOptions -XX:+TieredCompilation -Djava.awt.headless=true -Xbatch -XX:-UseCounterDecay -XX:-ShowMessageBoxOnError -XX:+UnlockDiagnosticVMOptions -XX:+DisplayVMOutputToStderr -DCompileTheWorldStartAt=0 -DCompileTheWorldStopAt=2726 -XX:+WhiteBoxAPI -Xbootclasspath/a:. --add-exports=java.base/jdk.internal.jimage=ALL-UNNAMED --add-exports=java.base/jdk.internal.misc=ALL-UNNAMED --add-exports=java.base/jdk.internal.reflect=ALL-UNNAMED --add-exports=java.base/jdk.internal.access=ALL-UNNAMED -XX:+LogCompilation -XX:LogFile=hotspot_modules_java_desktop_0_%p.log -XX:ErrorFile=hs_err_modules_java_desktop_0_%p.log -XX:ReplayDataFile=replay_modules_java_desktop_0_%p.log -XX:CompileCommand=exclude,java/lang/invoke/MethodHandle.* -XX:+IgnoreUnrecognizedVMOptions -XX:+StressLCM -XX:+StressGCM -XX:+StressIGVN -XX:+StressCCP -XX:StressSeed=634263233994806140 sun.hotspot.tools.ctw.CompileTheWorld modules:java.desktop

Host: ol7-x64-852056, AMD EPYC 7J13 64-Core Processor, 12 cores, 46G, Oracle Linux Server release 7.9
Time: Mon Sep 13 21:05:33 2021 UTC elapsed time: 189.266300 seconds (0d 0h 3m 9s)

---------------  T H R E A D  ---------------

Current thread (0x00007fc04432b9b0):  JavaThread ""C2 CompilerThread0"" daemon [_thread_in_native, id=30659, stack(0x00007fc028021000,0x00007fc028122000)]


Current CompileTask:
C2: 189266 80319    b  4       javax.swing.Spring$CompoundSpring::getPreferredValue (36 bytes)

Stack: [0x00007fc028021000,0x00007fc028122000],  sp=0x00007fc02811d410,  free space=1009k
Native frames: (J=compiled Java code, j=interpreted, Vv=VM code, C=native code)
V  [libjvm.so+0xa522b9]  Compile::Optimize()+0x1a69
V  [libjvm.so+0xa53950]  Compile::Compile(ciEnv*, ciMethod*, int, bool, bool, bool, bool, bool, DirectiveSet*)+0x1630
V  [libjvm.so+0x844670]  C2Compiler::compile_method(ciEnv*, ciMethod*, int, bool, DirectiveSet*)+0x6a0
V  [libjvm.so+0xa63ab1]  CompileBroker::invoke_compiler_on_method(CompileTask*)+0xd31
V  [libjvm.so+0xa647e8]  CompileBroker::compiler_thread_loop()+0x598
V  [libjvm.so+0x196888c]  JavaThread::thread_main_inner()+0x27c
V  [libjvm.so+0x196eeb0]  Thread::call_run()+0x100
V  [libjvm.so+0x161fd74]  thread_native_entry(Thread*)+0x104
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8277062,,,,,JDK-8273323,,,,,,,,,,,,,,,,,,,,,,,,"0|i2uc2j:",9223372036854775807,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
jdk/jfr/api/consumer/TestRecordedFrame.java	still times out after JDK-8273047,JDK-8273714,5058496,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,egahlin,tschatzl,tschatzl,2021-09-14 01:38,2021-09-29 17:14,2023-10-01 09:57,2021-09-22 14:30,18,,,,,,,18,hotspot,,0,tier5,,,,,,,,,,,,,,,,,,,,,"jdk/jfr/api/consumer/TestRecordedFrame.java still times out even after JDK-8273047.

",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8273047,JDK-8274289,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2uc2b:",9223372036854775807,b17,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@42995637,,,,,,,,,"2021-09-22 14:30;roboduke;Changeset: 60313889
Author:    Erik Gahlin <egahlin@openjdk.org>
Date:      2021-09-22 21:28:11 +0000
URL:       https://git.openjdk.java.net/jdk/commit/603138895f1665e75f01bb787af3222f08abc4db
;;;",,,,,,,,,,,,,,,,,,,,,,,,,
DrawStringWithInfiniteXform.java failed : drawString with InfiniteXform transform takes long time,JDK-8273704,5058488,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,prr,tschatzl,tschatzl,2021-09-14 00:46,2022-05-27 04:56,2023-10-01 09:57,2021-11-01 19:51,18,,,,,,,18,client-libs,,0,jdk11u-fix-request,jdk11u-fix-yes,jdk17u-fix-request,jdk17u-fix-SQE-ok-next,jdk17u-fix-yes,macos,testbug,tier3,,,,,,,,,,,,,,"java/awt/FontClass/DrawStringWithInfiniteXform.java fails with

result: Failed. Execution failed: `main' threw exception: java.lang.RuntimeException: drawString with InfiniteXform transform takes long time

",,,,,,,,,,,JDK-8279153,JDK-8280049,JDK-8282310,JDK-8287032,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8282404,,,,,,,,,,x86_64,,,,,,,,,os_x,,,,,"0|i2uc0j:",9223372036854775807,b22,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4b09ce31,,,,,,,,,"2021-09-15 07:16;prr;Hmm, this test is timing sensitive but seems like it has never failed before on any platform.
The test system must have been running really slowly.;;;","2021-11-01 19:51;roboduke;Changeset: acceffcb
Author:    Phil Race <prr@openjdk.org>
Date:      2021-11-02 02:49:56 +0000
URL:       https://git.openjdk.java.net/jdk/commit/acceffcbf73aa4416c487f890f3ca65e55e47164
;;;","2021-11-30 00:49;goetz;We see this failure very rarely, but over all our tested VMs.  A small history:
 9.Nov.21    linuxx86_64     11  dbg
25.Nov.21    linuxx86_64     11  dbg
19.Oct.21    linuxaarch64    18  opt
13.Oct.21    linuxaarch64    18  opt
10.Oct.21    linuxaarch64    18  opt
30.Sep.21    linuxaarch64    18  opt
29.Sep.21    darwinintel64   11  dbg
29.Sep.21    linuxx86_64     11  dbg
27.Sep.21    linuxx86_64     11  dbg
17.Sep.21    linuxx86_64     11  dbg
11.Sep.21    linuxaarch64    18  opt
01.Sep.21    linuxx86_64     11  dbg
19.Aug.21    linuxx86_64     11  dbg
07.Aug.21    linuxppc64le    11  dbg
29.Jul.21    linuxaarch64    18  opt
10.Jul.21    linuxppc64      11  dbg
09.Jul.21    linuxx86_64     11  dbg
09.Jul.21    linuxppc64      11  dbg
01.Jul.21    linuxx86_64     11  dbg
Older logs show the failure in 15, 16 and 17.;;;","2021-11-30 00:49;goetz;Fix request [17u]

I would like to backport this to 17 because we see the problem there, too.
Only a test fix, so no risk.;;;","2021-12-20 01:29;roboduke;A pull request was submitted for review.

URL: https://git.openjdk.java.net/jdk17u-dev/pull/3
Date: 2021-12-20 09:25:40 +0000
;;;","2022-01-14 03:08;goetz;Fix request [11u]

I would like to backport this to 11 because we see the problem there, too.
Only a test fix, so no risk. 
Clean backport.
SAP nightly testing now passes.;;;","2022-01-14 03:12;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk11u-dev/pull/762
Date: 2022-01-14 11:07:23 +0000;;;",,,,,,,,,,,,,,,,,,,
Safepoint deadlock on VMOperation_lock,JDK-8273695,5058473,Bug,Closed,JDK,JDK,software,duke,,,P2,Fixed,rehn,dholmes,dholmes,2021-09-13 18:07,2023-05-26 04:51,2023-10-01 09:57,2021-10-03 23:48,17,18,,,,,,18,hotspot,,0,intermittent,jdk17u-fix-request,jdk17u-fix-yes,maintainer-pain,tier1,tier2,tier3,tier4,zgc,,,,,,,,,,,,,"gc/stringdedup/TestStringDeduplicationYoungGC.java#id4
gc/stringdedup/TestStringDeduplicationAgeThreshold.java#id4
gc/stringdedup/TestStringDeduplicationTableResize.java#id4
gc/stringdedup/TestStringDeduplicationPrintOptions.java#id4

All timing out in tier4 on linux x64 and linux aarch64.",,,,,,,,,,,JDK-8274896,,,,,,,,,,,,,,,,,,,,,JDK-8273353,JDK-8273776,JDK-8270958,JDK-8270958,JDK-8274309,JDK-8271834,JDK-8273353,,,,,,,"2021-09-14 19:14;dholmes;TestStringDeduplicationAgeThreshold.java-id4log.txt;https://bugs.openjdk.org/secure/attachment/96443/TestStringDeduplicationAgeThreshold.java-id4log.txt",,,,,,,,,,,,18,,linux,,,,,"0|i2ubx7:",9223372036854775807,b18,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,Verified,,"2021-09-13 18:10;dholmes;[~zgu] Can you please take a look at this. Thanks.;;;","2021-09-13 18:12;dholmes;Also seen in tier2 now;;;","2021-09-14 16:55;zgu;[~dholmes] I am not able to reproduce locally. Is it possible to provide a *.jtr file (TestStringDeduplicationYoungGC_id4.jtr or TestStringDeduplicationAgeThreshold_id4.jtr)? I suspect ZGC may not emit ""end of GC cycle"" in certain circumstance. Thanks.;;;","2021-09-14 19:13;dholmes;Sorry [~zgu] I missed that the failng testcases were explicitly using ZGC, or else the test run was done with ZGC. So this does seem ZGC specific. Nothing of use here:

TestStringDeduplicationYoungGC.java\#id4

----------System.out:(1/2048)----------
Command line: [/opt/mach5/mesos/work_dir/jib-master/install/jdk-18+15-821/linux-x64-debug.jdk/jdk-18/fastdebug/bin/java -cp /opt/mach5/mesos/work_dir/slaves/ff806ead-2cac-495d-9cbc-62116f99bf14-S13977/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/052d6b46-74e3-4bfa-a213-c6eb89ff2988/runs/947e307c-8be1-4c99-88b6-1f84d969bc93/testoutput/test-support/jtreg_open_test_hotspot_jtreg_hotspot_gc/classes/5/gc/stringdedup/TestStringDeduplicationYoungGC_id4.d:/opt/mach5/mesos/work_dir/jib-master/install/jdk-18+15-821/src.full/open/test/hotspot/jtreg/gc/stringdedup:/opt/mach5/mesos/work_dir/slaves/ff806ead-2cac-495d-9cbc-62116f99bf14-S13977/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/052d6b46-74e3-4bfa-a213-c6eb89ff2988/runs/947e307c-8be1-4c99-88b6-1f84d969bc93/testoutput/test-support/jtreg_open_test_hotspot_jtreg_hotspot_gc/classes/5:/opt/mach5/mesos/work_dir/slaves/ff806ead-2cac-495d-9cbc-62116f99bf14-S13977/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/052d6b46-74e3-4bfa-a213-c6eb89ff2988/runs/947e307c-8be1-4c99-88b6-1f84d969bc93/testoutput/test-support/jtreg_open_test_hotspot_jtreg_hotspot_gc/classes/5/test/lib:/opt/mach5/mesos/work_dir/jib-master/install/jtreg/6/1/bundles/jtreg-6+1.zip/jtreg/lib/javatest.jar:/opt/mach5/mesos/work_dir/jib-master/install/jtreg/6/1/bundles/jtreg-6+1.zip/jtreg/lib/jtreg.jar:/opt/mach5/mesos/work_dir/jib-master/install/jtreg/6/1/bundles/jtreg-6+1.zip/jtreg/lib/junit.jar:/opt/mach5/mesos/work_dir/jib-master/install/jtreg/6/1/bundles/jtreg-6+1.zip/jtreg/lib/hamcrest.jar:/opt/mach5/mesos/work_dir/jib-master/install/jtreg/6/1/bundles/jtreg-6+1.zip/jtreg/lib/testng.jar:/opt/mach5/mesos/work_dir/jib-master/install/jtreg/6/1/bundles/jtreg-6+1.zip/jtreg/lib/jcommander.jar:/opt/mach5/mesos/work_dir/jib-master/install/jtreg/6/1/bundles/jtreg-6+1.zip/jtreg/lib/guice.jar -XX:MaxRAMPercentage=4.16667 -Djava.io.tmpdir=/opt/mach5/mesos/work_dir/slaves/ff806ead-2cac-495d-9cbc-62116f99bf14-S13977/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executo
result: Error. Agent error: java.lang.Exception: Agent 46 timed out with a timeout of 1200 seconds; check console log for any additional details

But I've attached a jtr file for TestStringDeduplicationAgeThreshold.java\#id4


;;;","2021-09-15 06:32;zgu;I don't believe ZGC honors StringDeduplicationAgeThreshold and it needs only one cycle to deduplicate strings. Before JDK-8271834, I suspect it did not run as many expected GC cycles to declare victory.

ZGC appears to run much longer GC cycle, comparing to other GCs (twice as long as Shenaodoah in my local tests). In this test case, it likely runs into back-to-back GCs, which might have negative impact on delivering notification (?). One case, I saw the first ""end of GC cycle"" after 158 GC cycles.

One possible solution is to slow down allocation rate to let ZGC to catch up.


 ;;;","2021-09-15 10:11;dcubed;The ZGC ProblemListing is in jdk-18+15-840.;;;","2021-09-15 10:15;dcubed;The most recent timeout for this test is in jdk-18+15-839-tier1
on linux-aarch64 with no JVM args so no ZGC involved from
the task definition.

HOWEVER, I see that '-XX:+UseZGC' is in the log file for
this most recent test timeout.

Sure enough, the test itself specified various GC's. Here's
the last entry:

/*
 * @test TestStringDeduplicationAgeThreshold
 * @summary Test string deduplication age threshold
 * @bug 8029075
 * @requires vm.gc.Z
 * @library /test/lib
 * @library /
 * @modules java.base/jdk.internal.misc:open
 * @modules java.base/java.lang:open
 *          java.management
 * @run driver gc.stringdedup.TestStringDeduplicationAgeThreshold Z
 */;;;","2021-09-15 10:25;dcubed;I'm caught up now. The ProblemListing fix added these entries:

diff --git a/test/hotspot/jtreg/ProblemList.txt b/test/hotspot/jtreg/ProblemList.txt
index d4a7c0ca456..ad4a6d771d1 100644
--- a/test/hotspot/jtreg/ProblemList.txt
+++ b/test/hotspot/jtreg/ProblemList.txt
@@ -85,6 +85,11 @@ gc/stress/gclocker/TestGCLockerWithParallel.java 8180622 generic-all
 gc/stress/gclocker/TestGCLockerWithG1.java 8180622 generic-all
 gc/stress/TestJNIBlockFullGC/TestJNIBlockFullGC.java 8192647 generic-all
 gc/metaspace/CompressedClassSpaceSizeInJmapHeap.java 8241293 macosx-x64
+gc/stringdedup/TestStringDeduplicationAgeThreshold.java#id4 8273695 generic-all
+gc/stringdedup/TestStringDeduplicationPrintOptions.java#id4 8273695 generic-all
+gc/stringdedup/TestStringDeduplicationInterned.java#id4 8273695 generic-all
+gc/stringdedup/TestStringDeduplicationTableResize.java#id4 8273695 generic-all
+gc/stringdedup/TestStringDeduplicationYoungGC.java#id4 8273695 generic-all
 
 #############################################################################

So the ZGC sub-test should be ProblemListed in build IDs after jdk-18+15-840 on
all configs.;;;","2021-09-15 10:52;zgu;Can not say it definitely works, because I could not reproduce locally. But comparing before and after the following patch [1], the result is promising.

Before patch, ZGC ran 8 GC cycles before TestStringDeduplicationAgeThreshold.java test reported 4/4 Young GC.

After patch, only ran 4 GC cycles.

[1] Slow allocation rate patch
diff --git a/test/hotspot/jtreg/gc/stringdedup/TestStringDeduplicationTools.java b/test/hotspot/jtreg/gc/stringdedup/TestStringDeduplicationTools.java
index 43b480b1468..db10334a4ba 100644
--- a/test/hotspot/jtreg/gc/stringdedup/TestStringDeduplicationTools.java
+++ b/test/hotspot/jtreg/gc/stringdedup/TestStringDeduplicationTools.java
@@ -141,8 +141,16 @@ class TestStringDeduplicationTools {
             // there will be deduplication work that will be reported.
             newStrings.add(createStrings(SmallNumberOfStrings, SmallNumberOfStrings));
             System.out.println(""Begin: Young GC "" + (currentCount + 1) + ""/"" + numberOfTimes);
+            long count = 0;
             while (currentCount == gcCount) {
                 dummy = new byte[objectSize];
+                count++;
+                if (count % 1000 == 0) {
+                    try {
+                        Thread.sleep(10);
+                    } catch (Exception e) {
+                    }
+                }
             }
             System.out.println(""End: Young GC "" + (currentCount + 1) + ""/"" + numberOfTimes);
;;;","2021-09-16 04:52;pliden;Just looking briefly at the stack trace when this happened and this looks unrelated to the any MXBean stuff. Instead it looks like a Java thread finds a broken oop when processing its stack via StackWatermark::on_safepoint() and it gets stuck there.;;;","2021-09-20 02:12;pliden;Looked at the core file in more depth. This looks like a safepoint/suspend issue, where we can end up calling StackWatermarkSet::on_safepoint() while we're still holding the VMOperation_lock. This can/will cause a deadlock, because inside StackWatermarkSet::on_safepoint(), a thread might block and wait for relocation to complete. However, the relocation can only get started after the ZDriver thread completes its VM_RelocateStart safepoint. In this case, the VMThread has completed the execution of VM_RelocateStart, but the ZDriver is still waiting for the completion signal, which is never receives because the Java thread calling StackWatermarkSet::on_safepoint() holds the VMOperation_lock.


Java thread calling StackWatermarkSet::on_safepoint() while holding the VMOperation_lock:

Thread 22 (LWP 906592):
#0  0x00007febad79231c in pthread_cond_wait@@GLIBC_2.3.2 () from /lib64/libpthread.so.0
#1  0x00007febac6751e0 in os::PlatformMonitor::wait (this=this@entry=0x7fe978051de8, millis=millis@entry=0) at src/hotspot/os/posix/os_posix.cpp:1855
#2  0x00007febacb1fcba in ZConditionLock::wait (millis=0, this=0x7fe978051de8) at src/hotspot/share/gc/z/zLock.inline.hpp:94
#3  ZForwarding::wait_page_released (this=0x7fe978051dc0) at src/hotspot/share/gc/z/zForwarding.cpp:142
#4  0x00007febacb201f5 in ZForwarding::wait_page_released (this=this@entry=0x7fe978051dc0) at src/hotspot/share/gc/z/zForwarding.cpp:147
#5  0x00007febacb6d995 in ZRelocate::relocate_object (this=<optimized out>, forwarding=0x7fe978051dc0, from_addr=17592286735272) at src/hotspot/share/gc/z/zRelocate.cpp:111
#6  0x00007febacae7ebc in ZHeap::relocate_object (addr=<optimized out>, this=<optimized out>) at src/hotspot/share/gc/z/zHeap.inline.hpp:104
#7  0x00007febacaeafb5 in ZBarrier::relocate_or_mark (addr=<optimized out>) at src/hotspot/share/gc/z/zBarrier.cpp:115
#8  ZBarrier::load_barrier_on_oop_slow_path (addr=<optimized out>) at src/hotspot/share/gc/z/zBarrier.cpp:130
#9  ZBarrier::barrier<&ZBarrier::is_good_or_null_fast_path, &ZBarrier::load_barrier_on_oop_slow_path> (o=..., o=..., p=<optimized out>) at src/hotspot/share/gc/z/zBarrier.inline.hpp:149
#10 ZBarrier::load_barrier_on_oop_field_preloaded (o=..., o=..., p=0x7fe9446b5d38) at src/hotspot/share/gc/z/zBarrier.inline.hpp:236
#11 ZBarrier::load_barrier_on_oop_field (p=0x7fe9446b5d38) at src/hotspot/share/gc/z/zBarrier.inline.hpp:232
#12 ZLoadBarrierOopClosure::do_oop (this=<optimized out>, p=0x7fe9446b5d38) at src/hotspot/share/gc/z/zBarrier.cpp:268
#13 0x00007febabe55b78 in chunk_oops_do (chunk_top=0x7fe9446b5de8 '\274' <repeats 40 times>, '\253' <repeats 16 times>, ""\272\272\272\272\272\272\272\272e"", chunk=<optimized out>, f=0x7feba42b0bd8) at src/hotspot/share/runtime/handles.cpp:100
#14 HandleArea::oops_do (this=<optimized out>, f=f@entry=0x7feba42b0bd8) at src/hotspot/share/runtime/handles.cpp:108
#15 0x00007febac97ae99 in Thread::oops_do_no_frames (cf=0x7feba42b0be8, f=0x7feba42b0bd8, this=0x7feba42b0070) at src/hotspot/share/runtime/thread.hpp:425
#16 JavaThread::oops_do_no_frames (this=0x7feba42b0070, f=0x7feba42b0bd8, cf=0x7feba42b0be8) at src/hotspot/share/runtime/thread.cpp:1956
#17 0x00007febacb78714 in ZStackWatermark::start_processing_impl (this=0x7feba42b0b00, context=0x0) at src/hotspot/share/gc/z/zStackWatermark.cpp:75
#18 0x00007febac847c6c in StackWatermark::start_processing (this=0x7feba42b0b00) at src/hotspot/share/runtime/stackWatermark.cpp:303
#19 StackWatermark::start_processing (this=0x7feba42b0b00) at src/hotspot/share/runtime/stackWatermark.cpp:299
#20 StackWatermark::on_safepoint (this=0x7feba42b0b00) at src/hotspot/share/runtime/stackWatermark.cpp:292
#21 0x00007febac8481f8 in StackWatermarkSet::on_safepoint (jt=jt@entry=0x7feba42b0070) at src/hotspot/share/runtime/stackWatermarkSet.cpp:115
#22 0x00007febac5c8bfd in SafepointMechanism::should_process_no_suspend (thread=0x7feba42b0070) at src/hotspot/share/runtime/safepointMechanism.inline.hpp:71
#23 SafepointMechanism::should_process_no_suspend (thread=0x7feba42b0070) at src/hotspot/share/runtime/safepointMechanism.inline.hpp:65
#24 SafepointMechanism::should_process (allow_suspend=false, thread=0x7feba42b0070) at src/hotspot/share/runtime/safepointMechanism.inline.hpp:84
#25 ThreadBlockInVMPreprocess<InFlightMutexRelease>::~ThreadBlockInVMPreprocess (this=<synthetic pointer>, __in_chrg=<optimized out>) at src/hotspot/share/runtime/interfaceSupport.inline.hpp:234
#26 Monitor::wait (this=this@entry=0x7feba4026750, timeout=timeout@entry=0) at src/hotspot/share/runtime/mutex.cpp:254
#27 0x00007febaca9c546 in MonitorLocker::wait (this=<synthetic pointer>, this=<synthetic pointer>, timeout=0) at src/hotspot/share/runtime/mutexLocker.hpp:240
#28 VMThread::wait_until_executed (op=op@entry=0x7fe96f6f5240) at src/hotspot/share/runtime/vmThread.cpp:369
#29 0x00007febaca9dbef in VMThread::execute (op=op@entry=0x7fe96f6f5240) at src/hotspot/share/runtime/vmThread.cpp:550
#30 0x00007febabe5755c in Handshake::execute (hs_cl=hs_cl@entry=0x7fe96f6f52b0) at src/hotspot/share/runtime/handshake.cpp:341
#31 0x00007febabb90347 in Deoptimization::deoptimize_all_marked (nmethod_only=nmethod_only@entry=0x0) at src/hotspot/share/runtime/deoptimization.cpp:915
#32 0x00007febabaaabd3 in CodeCache::flush_dependents_on (dependee=dependee@entry=0x800c54730) at src/hotspot/share/code/codeCache.cpp:1194
#33 0x00007febac9187fc in SystemDictionary::add_to_hierarchy (k=k@entry=0x800c54730) at src/hotspot/share/classfile/systemDictionary.cpp:1583
#34 0x00007febac91fa22 in SystemDictionary::define_instance_class (k=k@entry=0x800c54730, class_loader=class_loader@entry=..., __the_thread__=__the_thread__@entry=0x7feba42b0070) at src/hotspot/share/classfile/systemDictionary.cpp:1440
#35 0x00007febac91ff2c in SystemDictionary::find_or_define_helper (class_name=class_name@entry=0x7feba854b118, class_loader=..., k=k@entry=0x800c54730, __the_thread__=__the_thread__@entry=0x7feba42b0070) at src/hotspot/share/classfile/systemDictionary.cpp:1524
#36 0x00007febac920228 in SystemDictionary::find_or_define_instance_class (class_name=class_name@entry=0x7feba854b118, class_loader=..., class_loader@entry=..., k=0x800c54730, __the_thread__=__the_thread__@entry=0x7feba42b0070) at src/hotspot/share/classfile/systemDictionary.cpp:1546
#37 0x00007febac922569 in SystemDictionary::load_instance_class_impl (class_name=class_name@entry=0x7feba854b118, class_loader=..., __the_thread__=__the_thread__@entry=0x7feba42b0070) at src/hotspot/share/classfile/systemDictionary.cpp:1294
#38 0x00007febac920588 in SystemDictionary::load_instance_class (name_hash=name_hash@entry=514162710, name=name@entry=0x7feba854b118, class_loader=class_loader@entry=..., __the_thread__=__the_thread__@entry=0x7feba42b0070) at src/hotspot/share/classfile/systemDictionary.cpp:1353
#39 0x00007febac920e2d in SystemDictionary::resolve_instance_class_or_null (name=name@entry=0x7feba854b118, class_loader=..., protection_domain=..., __the_thread__=__the_thread__@entry=0x7feba42b0070) at src/hotspot/share/classfile/systemDictionary.cpp:722
#40 0x00007febac921163 in SystemDictionary::resolve_instance_class_or_null_helper (class_name=class_name@entry=0x7feba854b118, class_loader=..., protection_domain=..., __the_thread__=__the_thread__@entry=0x7feba42b0070) at src/hotspot/share/classfile/systemDictionary.cpp:293
#41 0x00007febac922b5a in SystemDictionary::resolve_or_null (__the_thread__=0x7feba42b0070, protection_domain=..., class_loader=..., class_name=0x7feba854b118, class_name@entry=0x7feba42b0070) at src/hotspot/share/classfile/systemDictionary.cpp:276
#42 SystemDictionary::resolve_or_fail (class_name=class_name@entry=0x7feba854b118, class_loader=..., protection_domain=..., throw_error=throw_error@entry=true, __the_thread__=__the_thread__@entry=0x7feba42b0070) at src/hotspot/share/classfile/systemDictionary.cpp:262
#43 0x00007febabb3fb43 in ConstantPool::klass_at_impl (this_cp=..., which=which@entry=292, __the_thread__=__the_thread__@entry=0x7feba42b0070) at src/hotspot/share/oops/constantPool.cpp:513
#44 0x00007febab8cf867 in ConstantPool::klass_at (__the_thread__=0x7feba42b0070, which=292, this=0x7fe96fb14880) at src/hotspot/share/oops/constantPool.hpp:401
#45 Runtime1::patch_code (current=current@entry=0x7feba42b0070, stub_id=stub_id@entry=Runtime1::load_klass_patching_id) at src/hotspot/share/c1/c1_Runtime1.cpp:1004
#46 0x00007febab8d15b7 in Runtime1::move_klass_patching (current=0x7feba42b0070) at src/hotspot/share/c1/c1_Runtime1.cpp:1355
#47 0x00007feb8d764444 in ?? ()
#48 0x0000000000000000 in ?? ()

ZDriver thread is waiting the the signal that the VM_RelocateStart operation has completed. This operation has already been completed by the VMThread but the ZDriver has not yet received the signal since it can't grab the VMOperation_lock when leaving the Monitor::wait():

Thread 14 (LWP 906469):
#0  0x00007febad79567d in __lll_lock_wait () from /lib64/libpthread.so.0
#1  0x00007febad790907 in __pthread_mutex_cond_lock () from /lib64/libpthread.so.0
#2  0x00007febad79220d in pthread_cond_wait@@GLIBC_2.3.2 () from /lib64/libpthread.so.0
#3  0x00007febac6751e0 in os::PlatformMonitor::wait (this=this@entry=0x7feba4026760, millis=millis@entry=0) at src/hotspot/os/posix/os_posix.cpp:1855
#4  0x00007febac5c707a in Monitor::wait_without_safepoint_check (this=this@entry=0x7feba4026750, timeout=timeout@entry=0) at src/hotspot/share/runtime/mutex.cpp:228
#5  0x00007febaca9c642 in MonitorLocker::wait (this=<synthetic pointer>, this=<synthetic pointer>, timeout=0) at src/hotspot/share/runtime/mutexLocker.hpp:240
#6  VMThread::wait_until_executed (op=op@entry=0x7feba899ccf0) at src/hotspot/share/runtime/vmThread.cpp:379
#7  0x00007febaca9dbef in VMThread::execute (op=0x7feba899ccf0) at src/hotspot/share/runtime/vmThread.cpp:550
#Thread 14 (LWP 906469):
#0  0x00007febad79567d in __lll_lock_wait () from /lib64/libpthread.so.0
#1  0x00007febad790907 in __pthread_mutex_cond_lock () from /lib64/libpthread.so.0
#2  0x00007febad79220d in pthread_cond_wait@@GLIBC_2.3.2 () from /lib64/libpthread.so.0
#3  0x00007febac6751e0 in os::PlatformMonitor::wait (this=this@entry=0x7feba4026760, millis=millis@entry=0) at src/hotspot/os/posix/os_posix.cpp:1855
#4  0x00007febac5c707a in Monitor::wait_without_safepoint_check (this=this@entry=0x7feba4026750, timeout=timeout@entry=0) at src/hotspot/share/runtime/mutex.cpp:228
#5  0x00007febaca9c642 in MonitorLocker::wait (this=<synthetic pointer>, this=<synthetic pointer>, timeout=0) at src/hotspot/share/runtime/mutexLocker.hpp:240
#6  VMThread::wait_until_executed (op=op@entry=0x7feba899ccf0) at src/hotspot/share/runtime/vmThread.cpp:379
#7  0x00007febaca9dbef in VMThread::execute (op=0x7feba899ccf0) at src/hotspot/share/runtime/vmThread.cpp:550
#8  0x00007febacb1c09e in ZDriver::pause<VM_ZRelocateStart> (this=<optimized out>) at src/hotspot/share/gc/z/zDriver.cpp:268
#9  ZDriver::pause_relocate_start (this=<optimized out>) at src/hotspot/share/gc/z/zDriver.cpp:337
#10 ZDriver::gc (this=this@entry=0x7feba405f9c0, request=...) at src/hotspot/share/gc/z/zDriver.cpp:476
#11 0x00007febacb1cc6f in ZDriver::run_service (this=0x7feba405f9c0) at src/hotspot/share/gc/z/zDriver.cpp:494
#12 0x00007febabb31eeb in ConcurrentGCThread::run (this=0x7feba405f9c0) at src/hotspot/share/gc/shared/concurrentGCThread.cpp:51
#13 0x00007febac987730 in Thread::call_run (this=this@entry=0x7feba405f9c0) at src/hotspot/share/runtime/thread.cpp:360
#14 0x00007febac665324 in thread_native_entry (thread=0x7feba405f9c0) at src/hotspot/os/linux/os_linux.cpp:720
#15 0x00007febad78c16a in start_thread () from /lib64/libpthread.so.0
#16 0x00007febad2b9f83 in clone () from /lib64/libc.so.6
8  0x00007febacb1c09e in ZDriver::pause<VM_ZRelocateStart> (this=<optimized out>) at src/hotspot/share/gc/z/zDriver.cpp:268
#9  ZDriver::pause_relocate_start (this=<optimized out>) at src/hotspot/share/gc/z/zDriver.cpp:337
#10 ZDriver::gc (this=this@entry=0x7feba405f9c0, request=...) at src/hotspot/share/gc/z/zDriver.cpp:476
#11 0x00007febacb1cc6f in ZDriver::run_service (this=0x7feba405f9c0) at src/hotspot/share/gc/z/zDriver.cpp:494
#12 0x00007febabb31eeb in ConcurrentGCThread::run (this=0x7feba405f9c0) at src/hotspot/share/gc/shared/concurrentGCThread.cpp:51
#13 0x00007febac987730 in Thread::call_run (this=this@entry=0x7feba405f9c0) at src/hotspot/share/runtime/thread.cpp:360
#14 0x00007febac665324 in thread_native_entry (thread=0x7feba405f9c0) at src/hotspot/os/linux/os_linux.cpp:720
#15 0x00007febad78c16a in start_thread () from /lib64/libpthread.so.0
#16 0x00007febad2b9f83 in clone () from /lib64/libc.so.6


VMThread is idle, waiting for the next operation:

Thread 17 (LWP 906474):
#0  0x00007febad79567d in __lll_lock_wait () from /lib64/libpthread.so.0
#1  0x00007febad790907 in __pthread_mutex_cond_lock () from /lib64/libpthread.so.0
#2  0x00007febad79251c in pthread_cond_timedwait@@GLIBC_2.3.2 () from /lib64/libpthread.so.0
#3  0x00007febac675129 in os::PlatformMonitor::wait (this=this@entry=0x7feba4026760, millis=<optimized out>, millis@entry=1000) at src/hotspot/os/posix/os_posix.cpp:1847
#4  0x00007febac5c707a in Monitor::wait_without_safepoint_check (this=this@entry=0x7feba4026750, timeout=1000) at src/hotspot/share/runtime/mutex.cpp:228
#5  0x00007febaca9c22a in MonitorLocker::wait (this=<synthetic pointer>, this=<synthetic pointer>, timeout=<optimized out>) at src/hotspot/share/runtime/mutexLocker.hpp:258
#6  VMThread::wait_for_operation (this=this@entry=0x7feba4172ed0) at src/hotspot/share/runtime/vmThread.cpp:478
#7  0x00007febaca9d838 in VMThread::loop (this=this@entry=0x7feba4172ed0) at src/hotspot/share/runtime/vmThread.cpp:494
#8  0x00007febaca9d987 in VMThread::run (this=0x7feba4172ed0) at src/hotspot/share/runtime/vmThread.cpp:176
#9  0x00007febac987730 in Thread::call_run (this=this@entry=0x7feba4172ed0) at src/hotspot/share/runtime/thread.cpp:360
#10 0x00007febac665324 in thread_native_entry (thread=0x7feba4172ed0) at src/hotspot/os/linux/os_linux.cpp:720
#11 0x00007febad78c16a in start_thread () from /lib64/libpthread.so.0
#12 0x00007febad2b9f83 in clone () from /lib64/libc.so.6


Looking at the offending Java thread in more details.

In Monitor::wait() calls the ThreadBlockInVMPreprocess destructor when coming out from _lock.wait().

bool Monitor::wait(int64_t timeout) {
  [....]
  InFlightMutexRelease ifmr(this);

  {
    ThreadBlockInVMPreprocess<InFlightMutexRelease> tbivmdc(self, ifmr);
    OSThreadWaitState osts(self->osthread(), false /* not Object.wait() */);

    wait_status = _lock.wait(timeout);
  }
 [...]
}

However, we never reach _pr(thread), which would have released the lock, because SafepointMechanism::should_process() has the side-effect that is might call StackWatermarkSet::on_safepoint() if allow_suspend is false (which it is in this case).

~ThreadBlockInVMPreprocess() {
  assert(_thread->thread_state() == _thread_blocked, ""coming from wrong thread state"");
  // Change to transition state and ensure it is seen by the VM thread.
  _thread->set_thread_state_fence(_thread_blocked_trans);


  if (SafepointMechanism::should_process(_thread, _allow_suspend)) {
    _pr(_thread);
    SafepointMechanism::process_if_requested(_thread, _allow_suspend);
  }

  _thread->set_thread_state(_thread_in_vm);
}

bool SafepointMechanism::should_process(JavaThread* thread, bool allow_suspend) {
  if (!local_poll_armed(thread)) {
    return false;
  } else if (allow_suspend) {
    return true;
  }
  return should_process_no_suspend(thread);
}

bool SafepointMechanism::should_process_no_suspend(JavaThread* thread) {
  if (global_poll() || thread->handshake_state()->has_a_non_suspend_operation()) {
    return true;
  } else {
    // We ignore suspend requests if any and just check before returning if we need
    // to fix the thread's oops and first few frames due to a possible safepoint.
    StackWatermarkSet::on_safepoint(thread);
    update_poll_values(thread);
    OrderAccess::cross_modify_fence();
    return false;
  }
}

From what I can tell, this deadlock was introduced by JDK-8270085 ""Suspend during block transition may deadlock if lock held"". Before that fix, we always called StackWatermarkSet::on_safepoint() after releasing the VMOperations_lock via the call to _pr(thread).;;;","2021-09-20 03:17;pliden;Discussed the problem and a possible solution with [~rehn]. Assigning this to him.;;;","2021-09-20 23:43;dholmes;Question: this is obviously a fairly complex interaction but how can the VM_RelocateStart have been processed by the VMThread when the JavaThread holds the VMOperation_lock, which would have prevented the VMThread from pulling the op from the queue in the first place?;;;","2021-09-21 01:07;rehn;- A JavaThread (JT) tries to execute VM op, e.g. deoptimize all.
- Transitions to blocked to acquire VMOperation_lock.
- <GC safepoint>
- Waits from VMOperation_lock.
- Acquires VMOperation_lock.
- In transition to VM we process the StackWaterMark.
- We cannot finish processing the StackWaterMark, we need to wait for the ZDriver.
- The ZDriver trying execute VM_ZRelocateStart, thus trying to acquire the VMOperation_lock.

The fix is to release the lock if StackWaterMark needs processing, same as we do for handshakes/safepoints.
This is what I'm testing:
https://github.com/openjdk/jdk/compare/master...robehn:8273695-swm-should-proc?expand=1;;;","2021-09-21 05:03;pliden;[~dholmes] Yes, the interaction is non-obvious. Let me try:
1) The VMThread completed execution of VM_RelocateStart, which was issued by the ZDriver thread.
2) However, the ZDriver thread is still in VMThread::wait_until_executed() waiting to be notified that the operation completed.
3) Before the ZDriver thread manages to re-acquire the VMOperation_lock (in VMThread::wait_until_executed()) a new VM operation is executed (deoptimize all), which caused the JavaThread issuing that VM operation to process its StackWaterMark while it's holding the VMOperation_lock.
4) The processing of the StackWaterMark can only complete after the ZDriver thread has been notified that the VM_RelocateStart operation has completed.
... so we deadlock.;;;","2021-09-21 05:21;rehn;[~pliden] Thanks, I forgot about reacquire, but my scenario also seems possible?
We hit the relocation stall, in the stackwatermark, before ZDriver have started to execute the VM_ZRelocateStart?;;;","2021-09-21 05:22;pliden;Looks like JDK-8270958 and JDK-8273353 is caused by the same issue.;;;","2021-09-21 05:25;pliden;[~rehn] No, relocation stalls can only happen when we're in the relocation phase, and that phase starts after VM_ZRelocateStart has been executed.;;;","2021-09-21 05:46;rehn;[~pliden] Thanks for clarification.;;;","2021-10-03 23:48;roboduke;Changeset: 79579942
Author:    Robbin Ehn <rehn@openjdk.org>
Date:      2021-10-04 06:47:27 +0000
URL:       https://git.openjdk.java.net/jdk/commit/7957994273e20d541b8f2a873781be7fedf712f1
;;;","2021-10-05 07:56;rehn;Fix Request

Fixes a unrecoverable deadlock, application freezes.

StackWatermarks are now processed in slow-path instead of fast-path.
Before entering slow-path the Mutex being acquired is released, thus it can no longer deadlock.

Applied clean, low risk;;;",,,,,
Missing comma after 2021 in GraphemeTestAccessor.java copyright notice,JDK-8273691,5058467,Bug,Closed,JDK,JDK,software,duke,,,P3,Fixed,dholmes,dholmes,dholmes,2021-09-13 16:57,2022-04-25 10:57,2023-10-01 09:57,2021-09-13 18:04,18,,,,,,,18,core-libs,,0,tier1,ursqe-triaged,,,,,,,,,,,,,,,,,,,,"caused by:
https://github.com/openjdk/jdk/commit/3d9dc8f824abf597d9b28f456cfeb5af927221b8",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8273430,,,,,,,,,,,,,,,,,,,,,,18,,,,,,,"0|i2ubvv:",9223372036854775807,b15,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@557d5cff,,,,,,,Verified,,"2021-09-13 18:04;roboduke;Changeset: c54a918a
Author:    David Holmes <dholmes@openjdk.org>
Date:      2021-09-14 01:01:07 +0000
URL:       https://git.openjdk.java.net/jdk/commit/c54a918a0e526403a395ad76c1dd0519be136ac7
;;;","2022-04-25 10:57;sqetools;verified;;;",,,,,,,,,,,,,,,,,,,,,,,,
TableAccessibility and TableRowAccessibility miss autorelease,JDK-8273678,5058445,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,asemenov,ant,ant,2021-09-13 08:36,2023-05-05 03:51,2023-10-01 09:57,2021-10-25 09:28,17,18,,,,,,18,client-libs,,0,17-bp,a11y,accessibility,jdk11u-a11y-defer,jdk17u-fix-request,jdk17u-fix-SQE-ok,jdk17u-fix-yes,macos,,,,,,,,,,,,,,"The TableAccessibility obj-c class should call [autorelease] on an object it allocates (see: [TableRowAccessibility alloc] and [ColumnAccessibility alloc]).

The TableRowAccessibility obj-c class should not call [retain] on an allocated object (see: [CellAccessibility alloc]).

""You own any object you create"", see: https://developer.apple.com/library/archive/documentation/Cocoa/Conceptual/MemoryMgmt/Articles/mmRules.html",,,,,,,,,,,JDK-8277770,JDK-8277737,JDK-8287654,JDK-8288263,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,18,,os_x,,,,,"0|i2ubqz:",9223372036854775807,b21,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4785f47c,,,,,,,,,"2021-10-21 06:04;ant;The logic of creating a CellAccessibility object will be reimplemented in the context of JDK-8275720.;;;","2021-10-25 09:28;roboduke;Changeset: 3221a14f
Author:    Artem Semenov <asemenov@openjdk.org>
Committer: Anton Tarasov <ant@openjdk.org>
Date:      2021-10-25 16:26:43 +0000
URL:       https://git.openjdk.java.net/jdk/commit/3221a14f9eaf002d91597d84efdb125704710a4c
;;;","2021-11-19 03:06;asemenov;Fix request (17u) 
This fix could not be backported automatically. WE have resolved the conflict.


- On file: src/java.desktop/macosx/classes/sun/lwawt/macosx/CAccessible.java:135

Conflict lines:
```java
- } else if (name.equals(ACCESSIBLE_ACTIVE_DESCENDANT_PROPERTY)) {
+ } else if (name.compareTo(ACCESSIBLE_ACTIVE_DESCENDANT_PROPERTY) == 0 ) {
```
pr: https://github.com/openjdk/jdk17u/pull/289;;;",,,,,,,,,,,,,,,,,,,,,,,
Backport of 8260616 misses one JNF header inclusion removal,JDK-8273671,5058437,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,vkempik,vkempik,vkempik,2021-09-13 07:20,2021-10-06 15:17,2023-10-01 09:57,2021-09-13 07:46,11.0.12,13.0.8,15.0.4,,,,,15.0.5,client-libs,,0,azul-interest,jdk11u-fix-request,jdk11u-fix-yes,jdk13u-fix-request,jdk13u-fix-yes,jdk15u-fix-request,jdk15u-fix-yes,,,,,,,,,,,,,,,"Durring backporting of JDK-8260616 one removal of old JNF includes in GeomUtilities.m was missed.
Need to remove line: #import <JavaNativeFoundation/JavaNativeFoundation.h>

affects openjdk11/13/15 only",,,,,,,,,,,JDK-8273673,JDK-8273771,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2ubp7:",9223372036854775807,b02,,,,,,,,,,,,"2021-09-13 07:38;vkempik;Fix Request ( 15u): simple removal of uneeded header, without it the compilation on older Xcodes may be broken.;;;","2021-09-13 07:44;vkempik;Fix Request ( 13u): simple removal of uneeded header, without it the compilation on older Xcodes may be broken.
;;;","2021-09-13 07:46;roboduke;Changeset: 9a174b32
Author:    Vladimir Kempik <vkempik@openjdk.org>
Date:      2021-09-13 14:44:48 +0000
URL:       https://git.openjdk.java.net/jdk15u-dev/commit/9a174b3248801051967255556a4c50076faa8068
;;;","2021-09-13 12:53;vkempik;Fix Request (11u): simple removal of uneeded header, without it the compilation on older Xcodes may be broken.;;;","2021-09-21 03:40;roboduke;Changeset: 9a174b32
Author:    Vladimir Kempik <vkempik@openjdk.org>
Date:      2021-09-13 14:44:48 +0000
URL:       https://git.openjdk.java.net/jdk15u/commit/9a174b3248801051967255556a4c50076faa8068
;;;",,,,,,,,,,,,,,,,,,,,,
Replay compilation crashes with SIGSEGV since 8271911,JDK-8273659,5058423,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,roland,roland,roland,2021-09-13 04:27,2021-09-27 22:56,2023-10-01 09:57,2021-09-16 05:04,18,,,,,,,18,hotspot,,0,ci-replay,ci-replay-failed,hs-comp-triaged,oracle-triage-11,oracle-triage-17,oracle-triage-18,regression,,,,,,,,,,,,,,,"I noticed replay fails when it encounters classes that it can't resolve and when running with -XX:+ReplayIgnoreInitErrors:

#  SIGSEGV (0xb) at pc=0x00007fc72b691f1b, pid=305274, tid=305275
#
# JRE version: OpenJDK Runtime Environment (18.0) (fastdebug build 18-internal+0-adhoc.roland.jdk-jdk)
# Java VM: OpenJDK 64-Bit Server VM (fastdebug 18-internal+0-adhoc.roland.jdk-jdk, mixed mode, sharing, tiered, compressed oops, compressed class ptrs, g1 gc, linux-amd64)
# Problematic frame:
# V  [libjvm.so+0x940f1b]  CompileReplay::parse_cp_ref(JavaThread*)+0x2eb
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8271911,,,,,,,,,,,,,,,,,,,,,,,,"0|i2ubm3:",9223372036854775807,b16,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2021-09-13 15:15;dlong;ILW = crash in debug build during replay = MMH = P3;;;","2021-09-16 05:04;roboduke;Changeset: 59b2478a
Author:    Roland Westrelin <roland@openjdk.org>
Date:      2021-09-16 12:02:46 +0000
URL:       https://git.openjdk.java.net/jdk/commit/59b2478abd7f233531262b0fa190e027a785da79
;;;",,,,,,,,,,,,,,,,,,,,,,,,
[lworld] Interpreter fails with fatal error: DEBUG MESSAGE: klass not initialized,JDK-8273650,5058393,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,fparain,thartmann,thartmann,2021-09-13 02:05,2021-10-20 01:35,2023-10-01 09:57,2021-09-17 12:33,repo-valhalla,,,,,,,repo-valhalla,hotspot,,0,lw3,lworld,,,,,,,,,,,,,,,,,,,,"Attached test fails with -Xint:

# A fatal error has been detected by the Java Runtime Environment:
#
#  Internal Error (/oracle/valhalla2/open/src/hotspot/cpu/x86/macroAssembler_x86.cpp:869), pid=3452862, tid=3452863
#  fatal error: DEBUG MESSAGE: klass not initialized
#
# JRE version: Java(TM) SE Runtime Environment (18.0) (fastdebug build 18-internal+0-2021-05-07-0658132.tobias...)
# Java VM: Java HotSpot(TM) 64-Bit Server VM (fastdebug 18-internal+0-2021-05-07-0658132.tobias..., interpreted mode, compressed oops, compressed class ptrs, g1 gc, linux-amd64)
# Problematic frame:
# V  [libjvm.so+0x13cfd25]  MacroAssembler::debug64(char*, long, long*)+0x45
#
# Core dump will be written. Default location: Core dumps may be processed with ""/usr/share/apport/apport %p %s %c %d %P %E"" (or dumping to /oracle/valhalla3/open/core.3452862)
#
# If you would like to submit a bug report, please visit:
#   https://bugreport.java.com/bugreport/crash.jsp
#

---------------  S U M M A R Y ------------

Command Line: -Xint Test

Host: prometheus, Intel(R) Core(TM) i7-9850H CPU @ 2.60GHz, 12 cores, 31G, Ubuntu 20.04.3 LTS
Time: Mon Sep 13 10:59:21 2021 CEST elapsed time: 0.261424 seconds (0d 0h 0m 0s)

---------------  T H R E A D  ---------------

Current thread (0x00007f76580282e0):  JavaThread ""main"" [_thread_in_Java, id=3452863, stack(0x00007f765e29f000,0x00007f765e3a0000)]

Stack: [0x00007f765e29f000,0x00007f765e3a0000],  sp=0x00007f765e39e820,  free space=1022k
Native frames: (J=compiled Java code, j=interpreted, Vv=VM code, C=native code)
V  [libjvm.so+0x13cfd25]  MacroAssembler::debug64(char*, long, long*)+0x45
j  Test.test23()Ljava/lang/Object;+3
j  Test.main([Ljava/lang/String;)V+23
v  ~StubRoutines::call_stub
V  [libjvm.so+0xef8713]  JavaCalls::call_helper(JavaValue*, methodHandle const&, JavaCallArguments*, JavaThread*)+0x4d3
V  [libjvm.so+0x1032bc5]  jni_invoke_static(JNIEnv_*, JavaValue*, _jobject*, JNICallType, _jmethodID*, JNI_ArgumentPusher*, JavaThread*) [clone .constprop.1]+0x375
V  [libjvm.so+0x1036cf5]  jni_CallStaticVoidMethod+0x1c5
C  [libjli.so+0x4797]  JavaMain+0xd37
C  [libjli.so+0x7aa9]  ThreadJavaMain+0x9


Attached Test2 is similar and fails with 

Exception in thread ""main"" java.lang.RuntimeException: Should have thrown NoClassDefFoundError, iteration: 1
	at Test2.main(Test2.java:35)

I.e. the interpreter throws a NoClassDefFoundError during the first iteration but not any more for subsequent iterations. I'm wondering if that is expected behavior.",,,,,,,,,,,,,,,,,,,,,,,,JDK-8273594,,,,,,,,,,,,,,,,JDK-8275606,,,,,"2021-09-13 02:03;thartmann;Test.java;https://bugs.openjdk.org/secure/attachment/96431/Test.java","2021-09-13 02:34;thartmann;Test2.java;https://bugs.openjdk.org/secure/attachment/96432/Test2.java",,,,,,,,,,,,,,,,,,"0|i2ubff:",9223372036854775807,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Add openssl from path variable also in to Default System Openssl Path in OpensslArtifactFetcher,JDK-8273646,5058386,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,tvoniadka,akolarkunnu,akolarkunnu,2021-09-12 22:58,2021-10-12 00:23,2023-10-01 09:57,2021-09-21 02:02,18,,,,,,,18,security-libs,,0,jdk11u-fix-request,jdk11u-fix-yes,jdk17u-fix-request,jdk17u-fix-SQE-ok-next,jdk17u-fix-yes,noreg-self,testbug,,,,,,,,,,,,,,,"Right now OpensslArtifactFetcher invokes openssl from one of the following 2 absolute paths (in that order):

/usr/bin/openssl
/usr/local/bin/openssl

However, on some systems, especially Cygwin-based windows machines, the openssl may not necessarily be found on those paths. The test fails on such machines even though a valid openssl installation exists.

Consider adding a default openssl invocation without any absolute path specification.",,,,,,,,,,,JDK-8274184,JDK-8275100,JDK-8274277,JDK-8274188,,,,,,,,,,,,,,,,,,,,,JDK-8266182,,,,,INTJDK-7629729,,,,,,,,,,generic,,,,,,,,,generic,,,,,"0|i2ubdv:",9223372036854775807,b16,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@2ec284e3,,,,,,,,,"2021-09-13 06:25;weijun;How necessary is this?;;;","2021-09-14 23:59;tvoniadka;[~weijun], we have had issues with this test on some of our test machines, especially windows. I have now updated the bug description to describe it better. I have now tested a patch on one such windows machines, and it seems to be adding value - instead of skipping openssl execution, it is now able to pick up the default-path openssl on that machine. Since the patch is simple, hope this is ok to go forward with..
;;;","2021-09-21 02:02;roboduke;Changeset: a5108a60
Author:    Thejasvi Voniadka <tvoniadka@openjdk.org>
Committer: Abdul Kolarkunnu <akolarkunnu@openjdk.org>
Date:      2021-09-21 09:01:09 +0000
URL:       https://git.openjdk.java.net/jdk/commit/a5108a605e6a1e427d90dbeeb8630a3d01d6b405
;;;","2021-09-21 04:25;tvoniadka;17u fix request:

Please approve this to backport to 17u.The patch applies clean, and the tests pass.;;;","2021-10-09 05:28;goetz;Fix request [11u]

I backport this for parity with 11.0.14-oracle.
No risk, only a test change.
Clean backport. Nighttests pass.;;;",,,,,,,,,,,,,,,,,,,,,
(bf) Buffer subclasses documentation contains template strings,JDK-8273641,5058365,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,bpb,webbuggrp,webbuggrp,2021-09-11 08:22,2021-09-23 06:51,2023-10-01 09:57,2021-09-14 12:14,16,17,18,,,,,18,core-libs,,0,additional-information-requested,dcsaw,noreg-doc,regression,webbug,,,,,,,,,,,,,,,,,"A DESCRIPTION OF THE PROBLEM :
The documentation for the type specific java.nio.Buffer subclasses contains template strings since Java 16.
For example https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/nio/IntBuffer.html contains:
- {#if[char]?, a string,}
- {#if[!byte]? and}
- {#if[char]?or string}

REGRESSION : Last worked in version 15


",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,generic,,,,,,,,,generic,,,,,"0|i2ub97:",9223372036854775807,b15,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@674604a9,,,,,,,,,"2021-09-12 21:56;tongwan;The problem only happens at https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/nio/IntBuffer.html
JDK 11 and 15 are OK.;;;","2021-09-14 12:14;roboduke;Changeset: e7ab3724
Author:    Brian Burkhalter <bpb@openjdk.org>
Date:      2021-09-14 19:12:53 +0000
URL:       https://git.openjdk.java.net/jdk/commit/e7ab3724e79312cf76c7a8fa6befc92e9c960607
;;;","2021-09-23 06:51;tongwan;Requested the submitter review the fix at https://git.openjdk.java.net/jdk/commit/e7ab3724e79312cf76c7a8fa6befc92e9c960607;;;",,,,,,,,,,,,,,,,,,,,,,,
"tests fail with ""assert(_handle_mark_nesting > 1) failed: memory leak: allocating handle outside HandleMark""",JDK-8273639,5058371,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,pliden,dcubed,dcubed,2021-09-11 19:50,2021-09-20 12:53,2023-10-01 09:57,2021-09-14 01:40,18,,,,,,,18,hotspot,,0,tier6,tier7,tier8,,,,,,,,,,,,,,,,,,,"The following test failed in the JDK18 CI:

serviceability/dcmd/gc/HeapDumpAllTest.java

Here's a snippet from the log file:

----------stdout:(18/1117)*----------
# To suppress the following error report, specify this argument
# after -XX: or in .hotspotrc:  SuppressErrorAt=\\handles.cpp:35
#
# A fatal error has been detected by the Java Runtime Environment:
#
#  Internal Error (t:\\workspace\\open\\src\\hotspot\\share\\runtime\\handles.cpp:35), pid=3540, tid=25336
#  assert(_handle_mark_nesting > 1) failed: memory leak: allocating handle outside HandleMark
#
# JRE version: Java(TM) SE Runtime Environment (18.0+15) (fastdebug build 18-ea+15-794)
# Java VM: Java HotSpot(TM) 64-Bit Server VM (fastdebug 18-ea+15-794, compiled mode, tiered, compressed oops, compressed class ptrs, g1 gc, windows-amd64)
# Core dump will be written. Default location: T:\\testoutput\\test-support\\jtreg_open_test_hotspot_jtreg_hotspot_serviceability\\scratch\\5\\hs_err_pid3540.mdmp
#
# An error report file with more information is saved as:
# T:\\testoutput\\test-support\\jtreg_open_test_hotspot_jtreg_hotspot_serviceability\\scratch\\5\\hs_err_pid3540.log
#
# If you would like to submit a bug report, please visit:
#   https://bugreport.java.com/bugreport/crash.jsp
#
result: Error. Agent communication error: java.net.SocketException: Connection reset; check console log for any additional details


Here's the crashing thread's stack:

---------------  T H R E A D  ---------------

Current thread (0x000001a491005d00):  GCTaskThread ""GC Thread#2"" [stack: 0x0000003d8c300000,0x0000003d8c400000] [id=25336] _threads_hazard_ptr=0x000001a48f54e810, _nested_threads_hazard_ptr_cnt=0

Stack: [0x0000003d8c300000,0x0000003d8c400000]
Native frames: (J=compiled Java code, j=interpreted, Vv=VM code, C=native code)
V  [jvm.dll+0xadc411]  os::platform_print_native_stack+0xf1  (os_windows_x86.cpp:235)
V  [jvm.dll+0xcf9675]  VMError::report+0x1005  (vmError.cpp:742)
V  [jvm.dll+0xcfb01e]  VMError::report_and_die+0x7fe  (vmError.cpp:1552)
V  [jvm.dll+0xcfb7a4]  VMError::report_and_die+0x64  (vmError.cpp:1333)
V  [jvm.dll+0x4ce027]  report_vm_error+0xb7  (debug.cpp:282)
V  [jvm.dll+0x6594c0]  HandleArea::allocate_handle+0x40  (handles.cpp:35)
V  [jvm.dll+0x4cfeb2]  ConstantOopReadValue::ConstantOopReadValue+0x162  (debugInfo.cpp:267)
V  [jvm.dll+0x4d05d8]  ScopeValue::read_from+0xe8  (debugInfo.cpp:108)
V  [jvm.dll+0x4d07ee]  ObjectValue::read_object+0x1e  (debugInfo.cpp:152)
V  [jvm.dll+0x4d0b6a]  DebugInfoReadStream::read_object_value+0x1aa  (debugInfo.cpp:80)
V  [jvm.dll+0x4d0663]  ScopeValue::read_from+0x173  (debugInfo.cpp:111)
V  [jvm.dll+0xb87d1d]  ScopeDesc::ScopeDesc+0x13d  (scopeDesc.cpp:39)
V  [jvm.dll+0xcebba0]  compiledVFrame::compiledVFrame+0xa0  (vframe_hp.cpp:293)
V  [jvm.dll+0xce7c23]  vframe::new_vframe+0x173  (vframe.cpp:86)
V  [jvm.dll+0xce906e]  vframe::sender+0x1be  (vframe.cpp:112)
V  [jvm.dll+0xced8a5]  compiledVFrame::sender+0xd5  (vframe_hp.cpp:388)
V  [jvm.dll+0xc8f693]  ThreadStackTrace::dump_stack_at_safepoint+0x153  (threadService.cpp:669)
V  [jvm.dll+0x66380f]  VM_HeapDumper::dump_stack_traces+0x23f  (heapDumper.cpp:1868)
V  [jvm.dll+0x6650c6]  VM_HeapDumper::work+0x226  (heapDumper.cpp:1815)
V  [jvm.dll+0xd3f28a]  GangWorker::loop+0x8a  (workgroup.cpp:240)
V  [jvm.dll+0xd3f32d]  GangWorker::run+0x1d  (workgroup.cpp:207)
V  [jvm.dll+0xc7c164]  Thread::call_run+0x1b4  (thread.cpp:365)
V  [jvm.dll+0xadadce]  thread_native_entry+0xae  (os_windows.cpp:549)
C  [ucrtbase.dll+0x1fb80]
C  [KERNEL32.DLL+0x84d4]
C  [ntdll.dll+0x51781]",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8273482,JDK-8273733,,,,,,,,,x86_64,,,,,,,,,windows,,,,,"0|i2ubaj:",9223372036854775807,b15,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,,,"2021-09-11 20:00;dcubed;The following test failed the same assert in the JDK18 CI:

serviceability/dcmd/gc/HeapDumpTest.java

Here's a snippet from the log file:

----------stdout:(21/1866)----------
# To suppress the following error report, specify this argument
# after -XX: or in .hotspotrc:  SuppressErrorAt=/handles.cpp:35
#
# A fatal error has been detected by the Java Runtime Environment:
#
#  Internal Error (/opt/mach5/mesos/work_dir/slaves/ff806ead-2cac-495d-9cbc-62116f99bf14-S13815/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/07d36d5b-fee2-45e0-a832-229be203cb25/runs/538c354b-ab44-471b-9fc8-90402e8494c7/workspace/open/src/hotspot/share/runtime/handles.cpp:35), pid=28440, tid=30705
#  assert(_handle_mark_nesting > 1) failed: memory leak: allocating handle outside HandleMark
#
# JRE version: Java(TM) SE Runtime Environment (18.0+15) (fastdebug build 18-ea+15-786)
# Java VM: Java HotSpot(TM) 64-Bit Server VM (fastdebug 18-ea+15-786, compiled mode, compressed oops, compressed class ptrs, g1 gc, linux-amd64)
# Problematic frame:
# V  [libjvm.so+0xd66b74]  HandleArea::allocate_handle(oop)+0x214
#
# Core dump will be written. Default location: Core dumps may be processed with ""/opt/core.sh %p"" (or dumping to /opt/mach5/mesos/work_dir/slaves/ff806ead-2cac-495d-9cbc-62116f99bf14-S13974/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/2e269cef-d4f7-434d-ba13-83d25173f189/runs/56a8b3ca-f8d0-48fc-827d-b817e27840e7/testoutput/test-support/jtreg_open_test_hotspot_jtreg_hotspot_serviceability/scratch/3/core.28440)
#
# An error report file with more information is saved as:
# /opt/mach5/mesos/work_dir/slaves/ff806ead-2cac-495d-9cbc-62116f99bf14-S13974/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/2e269cef-d4f7-434d-ba13-83d25173f189/runs/56a8b3ca-f8d0-48fc-827d-b817e27840e7/testoutput/test-support/jtreg_open_test_hotspot_jtreg_hotspot_serviceability/scratch/3/hs_err_pid28440.log
#
# If you would like to submit a bug report, please visit:
#   https://bugreport.java.com/bugreport/crash.jsp
#
result: Error. Agent communication error: java.io.EOFException; check console log for any additional details

Here's the crashing thread's stack:

---------------  T H R E A D  ---------------

Current thread (0x00007fc614008f80):  GCTaskThread ""GC Thread#8"" [stack: 0x00007fc61c6f1000,0x00007fc61c7f1000] [id=30705] _threads_hazard_ptr=0x00007fc5d82a3300, _nested_threads_hazard_ptr_cnt=0

Stack: [0x00007fc61c6f1000,0x00007fc61c7f1000],  sp=0x00007fc61c7ec0a0,  free space=1004k
Native frames: (J=compiled Java code, j=interpreted, Vv=VM code, C=native code)
V  [libjvm.so+0xd66b74]  HandleArea::allocate_handle(oop)+0x214
V  [libjvm.so+0xa7a414]  ConstantOopReadValue::ConstantOopReadValue(DebugInfoReadStream*)+0x94
V  [libjvm.so+0xa7aef0]  ScopeValue::read_from(DebugInfoReadStream*)+0x1e0
V  [libjvm.so+0xa7a79f]  ObjectValue::read_object(DebugInfoReadStream*)+0x1f
V  [libjvm.so+0xa7ac50]  DebugInfoReadStream::read_object_value(bool)+0x350
V  [libjvm.so+0x16efe43]  ScopeDesc::decode_object_values(int)+0x193
V  [libjvm.so+0x16efef4]  ScopeDesc::ScopeDesc(CompiledMethod const*, PcDesc*, bool)+0x44
V  [libjvm.so+0xa25e6a]  CompiledMethod::scope_desc_at(unsigned char*)+0xda
V  [libjvm.so+0x1963b1a]  compiledVFrame::compiledVFrame(frame const*, RegisterMap const*, JavaThread*, CompiledMethod*)+0x6a
V  [libjvm.so+0x1958a38]  vframe::new_vframe(frame const*, RegisterMap const*, JavaThread*) [clone .part.0]+0x68
V  [libjvm.so+0x1959038]  vframe::sender() const+0x128
V  [libjvm.so+0x1963910]  compiledVFrame::sender() const+0x50
V  [libjvm.so+0x18b21f6]  ThreadStackTrace::dump_stack_at_safepoint(int)+0xc6
V  [libjvm.so+0xd83b8d]  VM_HeapDumper::dump_stack_traces()+0x1ed
V  [libjvm.so+0xd84028]  VM_HeapDumper::work(unsigned int) [clone .part.0]+0xc8
V  [libjvm.so+0x19f32d5]  GangWorker::run_task(WorkData)+0x85
V  [libjvm.so+0x19f3414]  GangWorker::loop()+0x44
V  [libjvm.so+0x19f346a]
V  [libjvm.so+0x1898cb0]  Thread::call_run()+0x100
V  [libjvm.so+0x15768b4]  thread_native_entry(Thread*)+0x104;;;","2021-09-11 20:09;dcubed;The following tests failed the same assert in the JDK18 CI: 

serviceability/dcmd/gc/HeapDumpCompressedTest.java#id1
serviceability/dcmd/gc/HeapDumpCompressedTest.java#id2
serviceability/dcmd/gc/HeapDumpCompressedTest.java#id3

Here's a snippet from one of the HeapDumpCompressedTest.java#id1 log files: 

---------------- stderr ----------------

----------------------------------------

Running DCMD 'GC.heap_dump -gz=1 T:\\testoutput\\test-support\\jtreg_open_test_hotspot_jtreg_hotspot_serviceability\\scratch\\0\\jcmd.gc.heap_dump.1631391589436.hprof.gz' through 'PidJcmdExecutor'
Executing command '[c:\\ade\\mesos\\work_dir\\jib-master\\install\\jdk-18+15-786\\windows-x64-debug.jdk\\jdk-18\\fastdebug\\bin\\jcmd.exe, 14176, GC.heap_dump -gz=1 T:\\testoutput\\test-support\\jtreg_open_test_hotspot_jtreg_hotspot_serviceability\\scratch\\0\\jcmd.gc.heap_dump.1631391589436.hprof.gz]'
[2021-09-11T20:20:13.443763100Z] Gathering output for process 34576
# To suppress the following error report, specify this argument
# after -XX: or in .hotspotrc:  SuppressErrorAt=\\handles.cpp:35
#
# A fatal error has been detected by the Java Runtime Environment:
#
#  Internal Error (t:\\workspace\\open\\src\\hotspot\\share\\runtime\\handles.cpp:35), pid=14176, tid=20108
#  assert(_handle_mark_nesting > 1) failed: memory leak: allocating handle outside HandleMark
#
# JRE version: Java(TM) SE Runtime Environment (18.0+15) (fastdebug build 18-ea+15-786)
# Java VM: Java HotSpot(TM) 64-Bit Server VM (fastdebug 18-ea+15-786, compiled mode, sharing, tiered, compressed oops, compressed class ptrs, parallel gc, windows-amd64)
# Core dump will be written. Default location: T:\\testoutput\\test-support\\jtreg_open_test_hotspot_jtreg_hotspot_serviceability\\scratch\\0\\hs_err_pid14176.mdmp
#
# An error report file with more information is saved as:
# T:\\testoutput\\test-support\\jtreg_open_test_hotspot_jtreg_hotspot_serviceability\\scratch\\0\\hs_err_pid14176.log
#
# If you would like to submit a bug report, please visit:
#   https://bugreport.java.com/bugreport/crash.jsp
#
----------System.err:(0/0)----------
----------rerun:(53/6416)*----------


Here's a snippet from one of the HeapDumpCompressedTest.java#id2 log files:

---------------- stderr ----------------

----------------------------------------

Running DCMD 'GC.heap_dump -gz=1 T:\\testoutput\\test-support\\jtreg_open_test_hotspot_jtreg_hotspot_serviceability\\scratch\\1\\jcmd.gc.heap_dump.1631391511832.hprof.gz' through 'PidJcmdExecutor'
Executing command '[c:\\ade\\mesos\\work_dir\\jib-master\\install\\jdk-18+15-786\\windows-x64-debug.jdk\\jdk-18\\fastdebug\\bin\\jcmd.exe, 20340, GC.heap_dump -gz=1 T:\\testoutput\\test-support\\jtreg_open_test_hotspot_jtreg_hotspot_serviceability\\scratch\\1\\jcmd.gc.heap_dump.1631391511832.hprof.gz]'
[2021-09-11T20:18:38.666715400Z] Gathering output for process 32372
# To suppress the following error report, specify this argument
# after -XX: or in .hotspotrc:  SuppressErrorAt=\\handles.cpp:35
#
# A fatal error has been detected by the Java Runtime Environment:
#
#  Internal Error (t:\\workspace\\open\\src\\hotspot\\share\\runtime\\handles.cpp:35), pid=20340, tid=58424
#  assert(_handle_mark_nesting > 1) failed: memory leak: allocating handle outside HandleMark
#
# JRE version: Java(TM) SE Runtime Environment (18.0+15) (fastdebug build 18-ea+15-786)
# Java VM: Java HotSpot(TM) 64-Bit Server VM (fastdebug 18-ea+15-786, compiled mode, sharing, compressed oops, compressed class ptrs, g1 gc, windows-amd64)
# Core dump will be written. Default location: T:\\testoutput\\test-support\\jtreg_open_test_hotspot_jtreg_hotspot_serviceability\\scratch\\1\\hs_err_pid20340.mdmp
#
# An error report file with more information is saved as:
# T:\\testoutput\\test-support\\jtreg_open_test_hotspot_jtreg_hotspot_serviceability\\scratch\\1\\hs_err_pid20340.log
#
# If you would like to submit a bug report, please visit:
#   https://bugreport.java.com/bugreport/crash.jsp
#
----------System.err:(0/0)----------
----------rerun:(53/6410)*----------


Here's a snippet from one of the HeapDumpCompressedTest.java#id3 log files:

---------------- stderr ----------------

----------------------------------------

Running DCMD 'GC.heap_dump -gz=1 /opt/mach5/mesos/work_dir/slaves/ff806ead-2cac-495d-9cbc-62116f99bf14-S13974/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/2e269cef-d4f7-434d-ba13-83d25173f189/runs/56a8b3ca-f8d0-48fc-827d-b817e27840e7/testoutput/test-support/jtreg_open_test_hotspot_jtreg_hotspot_serviceability/scratch/1/jcmd.gc.heap_dump.1631389520528.hprof.gz' through 'PidJcmdExecutor'
Executing command '[/opt/mach5/mesos/work_dir/jib-master/install/jdk-18+15-786/linux-x64-debug.jdk/jdk-18/fastdebug/bin/jcmd, 27907, GC.heap_dump -gz=1 /opt/mach5/mesos/work_dir/slaves/ff806ead-2cac-495d-9cbc-62116f99bf14-S13974/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/2e269cef-d4f7-434d-ba13-83d25173f189/runs/56a8b3ca-f8d0-48fc-827d-b817e27840e7/testoutput/test-support/jtreg_open_test_hotspot_jtreg_hotspot_serviceability/scratch/1/jcmd.gc.heap_dump.1631389520528.hprof.gz]'
[2021-09-11T19:45:25.830172574Z] Gathering output for process 28093
# To suppress the following error report, specify this argument
# after -XX: or in .hotspotrc:  SuppressErrorAt=/handles.cpp:35
#
# A fatal error has been detected by the Java Runtime Environment:
#
#  Internal Error (/opt/mach5/mesos/work_dir/slaves/ff806ead-2cac-495d-9cbc-62116f99bf14-S13815/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/07d36d5b-fee2-45e0-a832-229be203cb25/runs/538c354b-ab44-471b-9fc8-90402e8494c7/workspace/open/src/hotspot/share/runtime/handles.cpp:35), pid=27907, tid=27921
#  assert(_handle_mark_nesting > 1) failed: memory leak: allocating handle outside HandleMark
#
# JRE version: Java(TM) SE Runtime Environment (18.0+15) (fastdebug build 18-ea+15-786)
# Java VM: Java HotSpot(TM) 64-Bit Server VM (fastdebug 18-ea+15-786, compiled mode, sharing, compressed class ptrs, z gc, linux-amd64)
# Problematic frame:
# V  [libjvm.so+0xd66b74]  HandleArea::allocate_handle(oop)+0x214
#
# Core dump will be written. Default location: Core dumps may be processed with ""/opt/core.sh %p"" (or dumping to /opt/mach5/mesos/work_dir/slaves/ff806ead-2cac-495d-9cbc-62116f99bf14-S13974/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/2e269cef-d4f7-434d-ba13-83d25173f189/runs/56a8b3ca-f8d0-48fc-827d-b817e27840e7/testoutput/test-support/jtreg_open_test_hotspot_jtreg_hotspot_serviceability/scratch/1/core.27907)
#
# An error report file with more information is saved as:
# /opt/mach5/mesos/work_dir/slaves/ff806ead-2cac-495d-9cbc-62116f99bf14-S13974/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/2e269cef-d4f7-434d-ba13-83d25173f189/runs/56a8b3ca-f8d0-48fc-827d-b817e27840e7/testoutput/test-support/jtreg_open_test_hotspot_jtreg_hotspot_serviceability/scratch/1/hs_err_pid27907.log
#
# If you would like to submit a bug report, please visit:
#   https://bugreport.java.com/bugreport/crash.jsp
#
----------System.err:(0/0)----------
----------rerun:(48/7741)*----------;;;","2021-09-13 04:51;pliden;Looks like a missing HandleMark. This is a unintended side-effect of my fix for JDK-8273482. With that fix, calls to ThreadStackTrace::dump_stack_at_safepoint() can now be made from Worker threads. Previously it was always done from the VMThread, which always puts a HandleMark on the stack before evaluating the VM operation. The reason this wasn't noticed when testing JDK-8273482 is that you needs to be a little bit unlucky, and take the stacktrace when there's certain types op frames on the stack. Assigning this to myself.;;;","2021-09-14 01:40;roboduke;Changeset: f5272899
Author:    Per Liden <pliden@openjdk.org>
Date:      2021-09-14 08:36:39 +0000
URL:       https://git.openjdk.java.net/jdk/commit/f52728993dc8f61a537b899ed0c47d83ca594738
;;;",,,,,,,,,,,,,,,,,,,,,,
javax/swing/JTable/4235420/bug4235420.java fails in GTK L&F,JDK-8273638,5058369,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,serb,serb,serb,2021-09-11 19:10,2022-01-11 07:12,2023-10-01 09:57,2021-09-14 22:17,17,18,,,,,,18,client-libs,,0,jdk11u-fix-request,jdk11u-fix-yes,jdk17u-fix-request,jdk17u-fix-SQE-ok-next,jdk17u-fix-yes,noreg-self,,,,,,,,,,,,,,,,"As discussed here https://github.com/openjdk/jdk/pull/1813 the test should skip the GTK L&F unfortunately the name of the GTK L&F is ""GTK look and feel"" not ""GTK"".",,,,,,,,,,,JDK-8279156,JDK-8279862,JDK-8274409,JDK-8278497,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,generic,,,,,,,,,linux,,,,,"0|i2uba3:",9223372036854775807,b15,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@568a5b31,,,,,,,,,"2021-09-14 22:17;roboduke;Changeset: 6cf70f5f
Author:    Sergey Bylokhov <serb@openjdk.org>
Date:      2021-09-15 05:15:44 +0000
URL:       https://git.openjdk.java.net/jdk/commit/6cf70f5f0809276904094bf8eba8786892bf034e
;;;","2021-09-25 17:20;serb;Fix request (17u)

This is request to backport the fix for the testbug. The patch applies cleanly.
PR: https://github.com/openjdk/jdk17u/pull/89
;;;","2021-12-15 03:58;goetz;Fix request [11u]

I backport this for parity with 11.0.15-oracle.
No risk, only a test change.
Clean backport.
Test passes.  SAP nightly tests pass.;;;",,,,,,,,,,,,,,,,,,,,,,,
Attempting to acquire lock StackWatermark_lock/9 out of order with lock tty_lock/3,JDK-8273635,5058362,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,coleenp,dcubed,dcubed,2021-09-11 07:52,2021-09-29 00:10,2023-10-01 09:57,2021-09-14 06:11,18,,,,,,,18,hotspot,,0,hs-comp-triaged,intermittent,oracle-triage-11,oracle-triage-17,oracle-triage-18,tier6,zgc,,,,,,,,,,,,,,,"compiler/vectorapi/TestVectorShiftImm.java fails with ""assert(false) failed: Attempting to acquire lock StackWatermark_lock/9 out of order with lock tty_lock/3 -- possible deadlock detected.

The following test failed in the JDK18 CI:

compiler/vectorapi/TestVectorShiftImm.java

The log file has a garbled portion of the crash mess:

1034    B140: #	out( N1 ) <- in( B23 )  Freq: 4.7682e-07
1034 +  spill R1 -> [sp, #40]	# spill size = 32
1038 +  spill R3 -> [sp, #56]	# spill size = 32
103c +  spill R11 -> [sp, #44]	# spill size = 32
1040 +  spill R17 -> [sp, #32]	# spill size = 64
1044 +  spill R19 -> [sp, #24]	# spill size = 64
1044 +  mov R1, #-187	# int
1048    spill R15 -> [sp, #8]	# spill size = 64
104c    call,static 0x00000001100d5140 	// ==>  wrapper for: uncommon_trap(reason='unstable_if' action='reinterpret' debug_id='0')
        # jdk.incubator.vector.VectorOperators$OperatorImpl::opCode @ bci:26 (line 830) L[0]=sp + #24 L[1]=#2048 L[2]=#512#
# Compiler replay data is saved as:
#  L[3]=sp + #44/System/Volumes/Data/mesos/work_dir/slaves/a2dc162d-743b-4800-9e92-31f85abb45b1-S16/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/95b84b56-03ec-44a6-8c93-1d134ddc92de/runs/c2fdfe43-31e6-4076-ab6c-94c8610f8622/testoutput/test-support/jtreg_open_test_hotspot_jtreg_hotspot_compiler_all_gcs/scratch/2/replay_pid63454.log
 STK[0]=R29 STK[1]=#512
        # jdk.incubator.vector.VectorOperators::opCode @ bci:6 (line 403) L[0]=_ L[1]=_ L[2]=_
        # jdk.incubator.vector.ByteVector::opCode @ bci:7 (line 63) L[0]=_
        # jdk.incubator.vector.ByteVector::lanewiseShiftTemplate @ bci:29 (line 806) L[0]=sp + #48 L[1]=sp + #16 L[2]=#1 L[3]=_
        ##
# If you would like to submit a bug report, please visit:
#   https://bugreport.java.com/bugreport/crash.jsp
#
 jdk.incubator.vector.Byte64Vector::
----------System.err:(1/55)----------
WARNING: Using incubator modules: jdk.incubator.vector
----------rerun:(41/6424)*----------


Here's snippets from the hs_err_pid file:

#  Internal Error (/System/Volumes/Data/mesos/work_dir/slaves/a2dc162d-743b-4800-9e92-31f85abb45b1-S22/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/c8ef3af4-816b-4614-a062-bed26f74e970/runs/c297bafa-efc6-40a8-971f-ba31f46b3e2d/workspace/open/src/hotspot/share/runtime/mutex.cpp:415), pid=63454, tid=25603
#  assert(false) failed: Attempting to acquire lock StackWatermark_lock/9 out of order with lock tty_lock/3 -- possible deadlock
#
# JRE version: Java(TM) SE Runtime Environment (18.0+15) (fastdebug build 18-ea+15-786)
# Java VM: Java HotSpot(TM) 64-Bit Server VM (fastdebug 18-ea+15-786, mixed mode, sharing, compressed class ptrs, z gc, bsd-aarch64)
# Core dump will be written. Default location: core.63454

<snip>

---------------  T H R E A D  ---------------

Current thread (0x000000011600a420):  JavaThread ""C2 CompilerThread0"" daemon [_thread_in_vm, id=25603, stack(0x0000000172448000,0x000000017264b000)]


Current CompileTask:
C2:   1099  385 %           compiler.vectorapi.TestVectorShiftImm::shift_and_accumulate @ 20 (144 bytes)

Stack: [0x0000000172448000,0x000000017264b000],  sp=0x0000000172646660,  free space=2041k
Native frames: (J=compiled Java code, j=interpreted, Vv=VM code, C=native code)
V  [libjvm.dylib+0xfadac4]  VMError::report_and_die(int, char const*, char const*, char*, Thread*, unsigned char*, void*, void*, char const*, int, unsigned long)+0x5d8
V  [libjvm.dylib+0xfae200]  VMError::report_and_die(Thread*, void*, char const*, int, char const*, char const*, char*)+0x40
V  [libjvm.dylib+0x501198]  report_vm_error(char const*, int, char const*, char const*, ...)+0x80
V  [libjvm.dylib+0xc7e84c]  Mutex::check_rank(Thread*)+0x30c
V  [libjvm.dylib+0xc7ea14]  Mutex::lock_without_safepoint_check(Thread*)+0x60
V  [libjvm.dylib+0xe22514]  StackWatermark::on_safepoint()+0x3c
V  [libjvm.dylib+0xdd1544]  SafepointMechanism::process(JavaThread*, bool)+0x90
V  [libjvm.dylib+0x41ee90]  ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState, bool)+0x1c0
V  [libjvm.dylib+0x41ec8c]  ThreadInVMfromNative::ThreadInVMfromNative(JavaThread*)+0xb4
V  [libjvm.dylib+0x436f48]  ciSymbol::as_utf8()+0x40
V  [libjvm.dylib+0xf3cc40]  TypeKlassPtr::dump2(Dict&, unsigned int, outputStream*) const+0x58
V  [libjvm.dylib+0xf2f4a4]  Type::dump_on(outputStream*) const+0x9c
V  [libjvm.dylib+0x12e750]  loadConNKlassNode::format(PhaseRegAlloc*, outputStream*) const+0xec
V  [libjvm.dylib+0xcfcd50]  PhaseOutput::dump_asm_on(outputStream*, int*, unsigned int)+0x7dc
V  [libjvm.dylib+0xcf48ec]  PhaseOutput::fill_buffer(CodeBuffer*, unsigned int*)+0x2088
V  [libjvm.dylib+0x4ad374]  Compile::Code_Gen()+0x480
V  [libjvm.dylib+0x4aad4c]  Compile::Compile(ciEnv*, ciMethod*, int, bool, bool, bool, bool, bool, DirectiveSet*)+0x1554
V  [libjvm.dylib+0x3a9c7c]  C2Compiler::compile_method(ciEnv*, ciMethod*, int, bool, DirectiveSet*)+0x134
V  [libjvm.dylib+0x4c5900]  CompileBroker::invoke_compiler_on_method(CompileTask*)+0x604
V  [libjvm.dylib+0x4c50fc]  CompileBroker::compiler_thread_loop()+0x2c0
V  [libjvm.dylib+0xf0f218]  JavaThread::thread_main_inner()+0x254
V  [libjvm.dylib+0xf0c4f0]  Thread::call_run()+0x21c
V  [libjvm.dylib+0xce1640]  thread_native_entry(Thread*)+0x160
C  [libsystem_pthread.dylib+0x7878]  _pthread_start+0x140


I'm starting this bug in hotspot/compiler since this is a compiler
test and we're crashing in compiler code, but [~coleenp] has
been recently working on the internal locks so I'm going to
send this bug her way for an initial evaluation.
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8273456,,,,,,,,,,aarch64,,,,,,,,,os_x,,,,,"0|i2ub8j:",9223372036854775807,b15,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2021-09-14 06:11;roboduke;Changeset: 1d3eb147
Author:    Coleen Phillimore <coleenp@openjdk.org>
Date:      2021-09-14 13:09:46 +0000
URL:       https://git.openjdk.java.net/jdk/commit/1d3eb147ee7dd9b237d3cf633a5792544f8cac30
;;;",,,,,,,,,,,,,,,,,,,,,,,,,
[TEST_BUG] Improve javax/swing/text/ParagraphView/6364882/bug6364882.java,JDK-8273634,5058361,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,aivanov,aivanov,aivanov,2021-09-11 05:23,2022-03-28 06:16,2023-10-01 09:57,2021-09-28 12:20,6,,,,,,,18,client-libs,,0,11-bp,17-bp,8-bp,cssn21_09_01,cssn21_09_02,cssn21_12_02,cssn22_01_02,jdk11u-fix-request,jdk11u-fix-yes,jdk17u-fix-request,jdk17u-fix-yes,sustaining,testbug,,,,,,,,,"The test for bug6364882 could be simplified, improved, and made headless.",,,,,,,,,,,JDK-8279265,JDK-8279215,JDK-8281029,JDK-8279965,JDK-8279492,,,,,,,,,,,,,,,,,,,,JDK-8239502,JDK-6364882,,,,JDK-8274465,,,,,,,,,,,,,,,,,,,,,,,,"0|i2ub8b:",9223372036854775807,b17,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@568a5b31,,,,,,,,,"2021-09-23 12:16;aivanov;The javax/swing/text/ParagraphView/6364882/bug6364882.java test is somewhat related to JDK-8239502: The behaviour fixed by JDK-6364882 also affects the bug6318524.java test.;;;","2021-09-28 12:20;roboduke;Changeset: 67e52a30
Author:    Alexey Ivanov <aivanov@openjdk.org>
Date:      2021-09-28 19:16:58 +0000
URL:       https://git.openjdk.java.net/jdk/commit/67e52a3078b0e7e522297c6008f5ac3792937c6a
;;;","2021-09-29 04:38;aivanov;I updated the bug6364882.java test so that it's headless now. If it fails, the image of the editorPane is saved for analysis. I also added more asserts which verify:

• the first three lines are aligned to the right edge;
• the fourth line isn't justified and its width is less than 3/4 of the width;
• the fifth and sixth lines have width less than that of the fourth line and have the same width.

There's an option to show the UI for visual inspection as well as to save the image even if the test passes; use -show and/or -save parameters to the test correspondingly.

[1] JDK-6364882: Last line of a paragraph should not be justified;;;","2021-12-29 12:50;goetz;Fix request [17u]

I backport this for parity with 17.0.3-oracle.
No risk, only a test change.
Clean backport.
Requires follow-up JDK-8274465. Test passed with follow-up.;;;","2021-12-29 12:54;roboduke;A pull request was submitted for review.

URL: https://git.openjdk.java.net/jdk17u-dev/pull/46
Date: 2021-12-29 20:49:50 +0000
;;;","2022-01-12 06:58;goetz;Fix request [11u]

I backport this for parity with 11.0.15-oracle.
No risk, only a test change.
Clean backport.
Requires follow-up JDK-8274465. Test passed with follow-up. ;;;","2022-01-12 07:03;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk11u-dev/pull/753
Date: 2022-01-12 14:57:42 +0000;;;","2022-01-12 07:10;goetz;Fix request [11u]

I backport this for parity with 11.0.15-oracle.
No risk, only a test change.
Clean backport.
SAP nightly testing passed.;;;",,,,,,,,,,,,,,,,,,
compiler/uncommontrap/TestDeoptOOM.java fails with release VMs,JDK-8273629,5058356,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,jiefu,jiefu,jiefu,2021-09-10 23:10,2023-09-27 12:55,2023-10-01 09:57,2021-09-13 05:12,18,,,,,,,18,hotspot,,0,hs-comp-triaged,jdk17u-todo,noreg-self,oracle-triage-18,tencent-interest,tier6,tier8,,,,,,,,,,,,,,,"
STDERR:
Error: VM option 'LogCompilation' is diagnostic and must be enabled via -XX:+UnlockDiagnosticVMOptions.
Error: The unlock option must precede 'LogCompilation'.
Error: Could not create the Java Virtual Machine.
Error: A fatal exception has occurred. Program will exit.",,,,,,,,,,,JDK-8289731,,,,,,,,,,,,,,,,,,,,,JDK-8273636,,,JDK-8273456,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2ub77:",9223372036854775807,b15,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2021-09-11 19:40;dcubed;Single failure sighting in jdk-18+15-794-tier6.;;;","2021-09-13 05:12;roboduke;Changeset: 261cb44b
Author:    Jie Fu <jiefu@openjdk.org>
Date:      2021-09-13 12:10:56 +0000
URL:       https://git.openjdk.java.net/jdk/commit/261cb44b13e5910180a2599ca756eb7ae6f9c443
;;;","2021-09-15 09:54;dcubed;The fix for this bug is in jdk-18+15-800.;;;","2022-07-28 07:47;goetz;Fix request [17u]

I backport this for parity with 17.0.5-oracle.
I added a new test description from JDK-8273456. Test code only, no risk.
Test passes.;;;","2022-07-28 07:54;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/604
Date: 2022-07-28 14:46:00 +0000;;;","2023-09-27 12:55;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/1807
Date: 2023-09-27 19:47:37 +0000;;;",,,,,,,,,,,,,,,,,,,,
Fix trivial doc typos in the java.base module,JDK-8273616,5058341,Bug,Resolved,JDK,JDK,software,duke,,,P5,Fixed,prappo,prappo,prappo,2021-09-10 13:33,2021-09-20 12:53,2023-10-01 09:57,2021-09-13 10:48,18,,,,,,,18,core-libs,,0,noreg-doc,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2ub3v:",9223372036854775807,b15,,,,,,,,,,,,"2021-09-13 10:48;roboduke;Changeset: b4b12101
Author:    Pavel Rappo <prappo@openjdk.org>
Date:      2021-09-13 17:46:13 +0000
URL:       https://git.openjdk.java.net/jdk/commit/b4b121018d16e531f3a51ff75ae37fdc374d530b
;;;",,,,,,,,,,,,,,,,,,,,,,,,,
Shenandoah: intermittent  timeout with ConcurrentGCBreakpoint tests,JDK-8273614,5058339,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,zgu,zgu,zgu,2021-09-10 12:56,2021-10-18 12:55,2023-10-01 09:57,2021-10-11 08:12,17-pool,18,,,,,,18,hotspot,,0,gc-shenandoah,jdk17u-fix-request,jdk17u-fix-yes,,,,,,,,,,,,,,,,,,,"I have seen following tests timed out intermittently.

gc/TestConcurrentGCBreakpoints.java:
gc/TestJNIWeak/TestJNIWeak.java",,,,,,,,,,,JDK-8275362,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2ub3f:",9223372036854775807,b19,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6b00f96c,,,,,,,,,"2021-10-07 06:52;zgu;I were able to reproduce by running aggressive heuristics with gc/TestJNIWeak/TestJNIWeak.java.

Control thread:
[Switching to thread 5 (Thread 0x7f3b9c6ef640 (LWP 1211865))]
#0  0x00007f3bbab97a8a in __futex_abstimed_wait_common64 (futex_word=futex_word@entry=0x7f3bb4064968, expected=expected@entry=0, clockid=clockid@entry=0, 
    abstime=abstime@entry=0x0, private=private@entry=0, cancel=cancel@entry=true) at ../sysdeps/nptl/futex-internal.c:74
74	    err = INTERNAL_SYSCALL_CANCEL (futex_time64, futex_word, op, expected,
(gdb) bt
#0  0x00007f3bbab97a8a in __futex_abstimed_wait_common64 (futex_word=futex_word@entry=0x7f3bb4064968, expected=expected@entry=0, clockid=clockid@entry=0, 
    abstime=abstime@entry=0x0, private=private@entry=0, cancel=cancel@entry=true) at ../sysdeps/nptl/futex-internal.c:74
#1  0x00007f3bbab97aef in __GI___futex_abstimed_wait_cancelable64 (futex_word=futex_word@entry=0x7f3bb4064968, expected=expected@entry=0, clockid=clockid@entry=0, 
    abstime=abstime@entry=0x0, private=private@entry=0) at ../sysdeps/nptl/futex-internal.c:123
#2  0x00007f3bbab912c0 in __pthread_cond_wait_common (abstime=0x0, clockid=0, mutex=0x7f3bb4064918, cond=0x7f3bb4064940) at pthread_cond_wait.c:504
#3  __pthread_cond_wait (cond=0x7f3bb4064940, mutex=0x7f3bb4064918) at pthread_cond_wait.c:619
#4  0x00007f3bb9d7c600 in os::PlatformMonitor::wait (this=this@entry=0x7f3bb4064910, millis=millis@entry=0) at /home/zgu/ws/jdk/src/hotspot/os/posix/os_posix.cpp:1936
#5  0x00007f3bb9cc013a in Monitor::wait_without_safepoint_check (this=this@entry=0x7f3bb4064900, timeout=timeout@entry=0)
    at /home/zgu/ws/jdk/src/hotspot/share/runtime/mutex.cpp:228
#6  0x00007f3bb9f58cbb in MonitorLocker::wait (this=<synthetic pointer>, this=<synthetic pointer>, timeout=0)
    at /home/zgu/ws/jdk/src/hotspot/share/runtime/mutexLocker.hpp:253
#7  ShenandoahBreakpoint::at_before_gc () at /home/zgu/ws/jdk/src/hotspot/share/gc/shenandoah/shenandoahBreakpoint.cpp:45
#8  0x00007f3bb9f64ff3 in ShenandoahBreakpointGCScope::ShenandoahBreakpointGCScope (this=<synthetic pointer>)
    at /home/zgu/ws/jdk/src/hotspot/share/gc/shenandoah/shenandoahConcurrentGC.cpp:55
#9  ShenandoahConcurrentGC::collect (this=this@entry=0x7f3b9c6eeab0, cause=cause@entry=GCCause::_shenandoah_concurrent_gc)
    at /home/zgu/ws/jdk/src/hotspot/share/gc/shenandoah/shenandoahConcurrentGC.cpp:92
#10 0x00007f3bb9f711af in ShenandoahControlThread::service_concurrent_normal_cycle (this=this@entry=0x7f3bb40e5650, 
    cause=cause@entry=GCCause::_shenandoah_concurrent_gc) at /home/zgu/ws/jdk/src/hotspot/share/gc/shenandoah/shenandoahControlThread.cpp:393
#11 0x00007f3bb9f71f90 in ShenandoahControlThread::run_service (this=0x7f3bb40e5650)
    at /home/zgu/ws/jdk/src/hotspot/share/gc/shenandoah/shenandoahControlThread.cpp:205
#12 0x00007f3bb922c0ab in ConcurrentGCThread::run (this=0x7f3bb40e5650) at /home/zgu/ws/jdk/src/hotspot/share/gc/shared/concurrentGCThread.cpp:51
#13 0x00007f3bba1b8e80 in Thread::call_run (this=0x7f3bb40e5650) at /home/zgu/ws/jdk/src/hotspot/share/runtime/thread.cpp:360
#14 0x00007f3bb9d6c164 in thread_native_entry (thread=0x7f3bb40e5650) at /home/zgu/ws/jdk/src/hotspot/os/linux/os_linux.cpp:705
#15 0x00007f3bbab8b299 in start_thread (arg=0x7f3b9c6ef640) at pthread_create.c:481
#16 0x00007f3bbaaac353 in clone () at ../sysdeps/unix/sysv/linux/x86_64/clone.S:95



This is due to a race between regular concurrent gc and wb triggered gc. Since Shenandoah does not set _gc_start flag for none _wb_breakpoint gc, therefore, ShenandoahBreakpoint::at_before_gc () is forever blocked.
;;;","2021-10-11 08:12;roboduke;Changeset: 3f073377
Author:    Zhengyu Gu <zgu@openjdk.org>
Date:      2021-10-11 15:10:57 +0000
URL:       https://git.openjdk.java.net/jdk/commit/3f07337722a0c8c6b452a44745598268d67c0864
;;;","2021-10-15 12:12;zgu;Fix Request (17u)

I would like to backport this Shenandoah specific patch to avoid intermittent test timeout.

The original patch applies cleanly to 17u.
;;;",,,,,,,,,,,,,,,,,,,,,,,
JFR: RemoteRecordingStream::start() blocks close(),JDK-8273613,5058338,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,egahlin,egahlin,egahlin,2021-09-10 11:55,2023-08-15 08:29,2023-10-01 09:57,2021-09-20 16:16,,,,,,,,18,hotspot,,0,,,,,,,,,,,,,,,,,,,,,,"The method jdk.management.jfr.RemoteRecordingStream::start() takas a lock that is needed to close the stream. This means the stream can't be shutdown from another thread. This doesn't happen with startAsync() as the method returns after the stream has started,

This is a regression introduced with ""8263332: JFR: Dump recording from a recording stream"" and should be backported to JDK 17. Technically it doesn't break the specification, but it's expected behavior, and should work like JDK 16.
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8272943,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2ub37:",9223372036854775807,b16,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@42995637,,,,,,,,,"2021-09-20 16:16;roboduke;Changeset: d16bf04c
Author:    Erik Gahlin <egahlin@openjdk.org>
Date:      2021-09-20 23:15:39 +0000
URL:       https://git.openjdk.java.net/jdk/commit/d16bf04c95ad20a003af70679e7b735b0780ac30
;;;",,,,,,,,,,,,,,,,,,,,,,,,,
Fix for JDK-8272873 causes timeout in running some tests with -Xcomp,JDK-8273612,5058337,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,iveresov,ccheung,ccheung,2021-09-10 11:30,2022-05-05 00:27,2023-10-01 09:57,2021-10-05 12:45,18,,,,,,,18,hotspot,,0,hs-comp-triaged,oracle-triage-11,oracle-triage-17,oracle-triage-18,performance,perf-regression,regression,,,,,,,,,,,,,,,"The timeout, which was mostly observed on the macosx-x64 platform, was first discovered in tier8 testing (see JDK-8273109).

When the test runtime/cds/appcds/loaderConstraints/DynamicLoaderConstraintsTest.java is run with the following vmoptions:
""-Xcomp -XX:+CreateCoredumpOnCrash -ea -esa -XX:CompileThreshold=100 -XX:+UnlockExperimentalVMOptions -server -XX:+TieredCompilation -XX:+DeoptimizeALot"",
without the fix for JDK-8272873, the custom-cl case took around totalTime=744005. With the fix, the custom-cl timeout totalTime=1361245.

The slow down seems to be related to excessive inlining. Here's one example from the two attached log files:

Before:

  12578 2425    b  4       java.lang.invoke.InvokerBytecodeGenerator::emitPushArgument (150 bytes)
  12588 2424       3       java.lang.invoke.InvokerBytecodeGenerator::emitPushArgument (150 bytes)   made not entrant
  12588 2425   size: 3264(1088) time: 9 inlined: 60 bytes

After:
  54396 5810    b  4       java.lang.invoke.InvokerBytecodeGenerator::emitPushArgument (150 bytes)
  54796 5809       3       java.lang.invoke.InvokerBytecodeGenerator::emitPushArgument (150 bytes)   made not entrant
  54799 5810   size: 54872(23776) time: 402 inlined: 4651 bytes
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8273284,JDK-8284944,JDK-8278420,JDK-8273331,,JDK-8275328,JDK-8273109,JDK-8272873,JDK-8273509,JDK-8275326,"2021-09-10 11:33;ccheung;custom-cl-after.log;https://bugs.openjdk.org/secure/attachment/96423/custom-cl-after.log","2021-09-10 11:33;ccheung;custom-cl-before.log;https://bugs.openjdk.org/secure/attachment/96424/custom-cl-before.log",,,,,,,,,,,,,,,,,,"0|i2ub2z:",9223372036854775807,b18,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2021-09-10 11:34;ccheung;Attaching 2 logs with the output from -XX:+PrintCompilation -XX:+PrintCompilation2 from running the DynamicLoaderConstraintsTest.java test.;;;","2021-09-10 16:38;dlong;ILW = tests timeout = MMH = P3;;;","2021-09-17 00:28;iklam;It seems like JDK-8272873 has made inlining more aggressive and slowed down the compilation of many methods. Before the change,  there were 15 methods that took 100ms or more to compile. Afterwards,  there were 101 methods

$ grep 'time: ' custom-cl-before.log  | sed -e 's/.*time: //g' | sort -n | grep '^... ' | wc
     15      60     356

$ grep 'time: ' custom-cl-after.log  | sed -e 's/.*time: //g' | sort -n | grep '^... ' | wc
    101     404    2421

$ grep 'time: ' custom-cl-before.log  | sed -e 's/.*time: //g' | sort -n | tail -20
84 inlined: 464 bytes
86 inlined: 1588 bytes
88 inlined: 116 bytes
93 inlined: 1442 bytes
98 inlined: 347 bytes
102 inlined: 126 bytes
102 inlined: 919 bytes
104 inlined: 126 bytes
115 inlined: 1793 bytes
133 inlined: 970 bytes
137 inlined: 3193 bytes
173 inlined: 1335 bytes
215 inlined: 2013 bytes
332 inlined: 2476 bytes
351 inlined: 2927 bytes
509 inlined: 3398 bytes
536 inlined: 3713 bytes
580 inlined: 3480 bytes
620 inlined: 4331 bytes
941 inlined: 3910 bytes

$ grep 'time: ' custom-cl-after.log  | sed -e 's/.*time: //g' | sort -n | tail -20
449 inlined: 2739 bytes
451 inlined: 7597 bytes
453 inlined: 4317 bytes
469 inlined: 8655 bytes
471 inlined: 8669 bytes
479 inlined: 3081 bytes
501 inlined: 3398 bytes
502 inlined: 7028 bytes
503 inlined: 7080 bytes
511 inlined: 7433 bytes
525 inlined: 7413 bytes
531 inlined: 3713 bytes
533 inlined: 7722 bytes
541 inlined: 4457 bytes
561 inlined: 7476 bytes
569 inlined: 7195 bytes
596 inlined: 7553 bytes
730 inlined: 7781 bytes
742 inlined: 6090 bytes
1014 inlined: 7299 bytes
;;;","2021-09-29 10:16;iklam;Total time spent in the compiler increased from 27 to 53 seconds

~/tmp$ grep 'time: ' custom-cl-before.log | sed -e 's/.*time: //g' -e 's/ .*//g' | paste -sd+ | bc
27375
~/tmp$ grep 'time: ' custom-cl-after.log | sed -e 's/.*time: //g' -e 's/ .*//g' | paste -sd+ | bc
53531
;;;","2021-10-05 12:45;roboduke;Changeset: 83b22192
Author:    Igor Veresov <iveresov@openjdk.org>
Date:      2021-10-05 19:44:17 +0000
URL:       https://git.openjdk.java.net/jdk/commit/83b2219220266c1365466970d08606fef766c4fa
;;;",,,,,,,,,,,,,,,,,,,,,
LogTestFixture::restore_config() should not restore options,JDK-8273610,5058335,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,iklam,iklam,iklam,2021-09-10 10:57,2021-09-15 20:06,2023-10-01 09:57,2021-09-12 18:59,,,,,,,,18,hotspot,,0,,,,,,,,,,,,,,,,,,,,,,"Apply the following patch so you know what's happening:

--- a/test/hotspot/gtest/logging/logTestFixture.cpp
+++ b/test/hotspot/gtest/logging/logTestFixture.cpp
@@ -87,6 +87,9 @@ void LogTestFixture::restore_config() {
     // Extract the different parameters by replacing the spaces with NULLs.
     char* str = _configuration_snapshot[i];
 
+    printf(""restore_config(%d: %s)\n"", (int)i, str);
     char* name = str;
     str = strchr(str, ' ');

============================
$ JAVA_TOOL_OPTIONS=-Xlog:cds:file=cds.log make test TEST=gtest:LogTest
Building target 'test-only' in configuration '/home/iklam/jdk/bld/nep'
Test selection 'gtest:LogTest', will run:
* gtest:LogTest/server

Running test 'gtest:LogTest/server'
Note: Google Test filter = LogTest*
[==========] Running 7 tests from 1 test case.
[----------] Global test environment set-up.
[----------] 7 tests from LogTest
[ RUN      ] LogTest.large_message_vm
Picked up JAVA_TOOL_OPTIONS: -Xlog:cds:file=cds.log
restore_config(0: stdout all=warning uptime,level,tags)
restore_config(1: stderr all=off uptime,level,tags)
restore_config(2: file=cds.log all=off,cds=info uptime,level,tags filecount=5,filesize=20480K,async=false)
open/test/hotspot/gtest/logging/logTestFixture.cpp:64: Failure
Expected equality of these values:
  """"
  errmsg
    Which is: ""Invalid option 'async' for log file output.\nInitialization of output 'file=cds.log' using options 'filecount=5,filesize=20480K,async=false' failed.\n""
With diff:
@@ -1,1 +1,2 @@
-""""
+Invalid option 'async' for log file output.
+Initialization of output 'file=cds.log' using options 'filecount=5,filesize=20480K,async=false' failed.\n

Unexpected error reported
open/test/hotspot/gtest/logging/logTestFixture.cpp:65: Failure
Value of: success
  Actual: false
Expected: true
Shouldn't cause errors
============================================
[Background]

Unified Logging does not allow the options of a log output to be changed:

(1) Specifying the same output twice is OK:

$ java -Xlog:cds:file=foo -Xlog:gc:file=foo -Xlog:logging -version
...
[0.019s][info][logging]   #2: file=foo all=off,gc=info,cds=info uptime,level,tags filecount=5,filesize=20480K,async=false

(2) But options can be specified only in the very first use of an output. I.e., the ""async=true"" for ""-Xlog:gc:file=foo"" is ignored:

$ java -Xlog:cds:file=foo -Xlog:gc:file=foo::async=true -Xlog:logging -version
[0.000s][warning][logging] Output options for existing outputs are ignored.
...
[0.018s][info   ][logging]  #2: file=foo all=off,gc=info,cds=info uptime,level,tags filecount=5,filesize=20480K,async=false

(3) The warning fails even if you try to set it to the same value as before:

$ java -Xlog:cds:file=foo -Xlog:gc:file=foo::async=false -Xlog:logging -version
[0.000s][warning][logging] Output options for existing outputs are ignored.
...
[0.018s][info   ][logging]  #2: file=foo all=off,gc=info,cds=info uptime,level,tags filecount=5,filesize=20480K,async=false

============================================
[Suggested fix]

Do not attempt to change the options of the outputs inside LogTestFixture::restore_config() -- No one is able to change them, so there's no need to ""restore"" the options.
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2ub2j:",9223372036854775807,b15,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,,,"2021-09-12 18:59;roboduke;Changeset: 9f86082f
Author:    Ioi Lam <iklam@openjdk.org>
Date:      2021-09-13 01:57:04 +0000
URL:       https://git.openjdk.java.net/jdk/commit/9f86082fd5174b4543eb6abc0879690430208ba0
;;;",,,,,,,,,,,,,,,,,,,,,,,,,
Fix trivial doc typos in the compiler area,JDK-8273609,5058334,Bug,Resolved,JDK,JDK,software,duke,,,P5,Fixed,prappo,prappo,prappo,2021-09-10 10:37,2021-09-15 20:06,2023-10-01 09:57,2021-09-10 12:34,18,,,,,,,18,tools,,0,noreg-doc,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2ub2b:",9223372036854775807,b15,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4dca67bd,,,,,,,,,"2021-09-10 12:34;roboduke;Changeset: f42b9279
Author:    Pavel Rappo <prappo@openjdk.org>
Date:      2021-09-10 19:33:54 +0000
URL:       https://git.openjdk.java.net/jdk/commit/f42b92790a6977ff17869762cd90a58cddccb8be
;;;",,,,,,,,,,,,,,,,,,,,,,,,,
VM Exit does not abort concurrent mark,JDK-8273605,5058327,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,tschatzl,tschatzl,tschatzl,2021-09-10 08:14,2021-09-20 12:54,2023-10-01 09:57,2021-09-15 01:29,16,17,18,,,,,18,hotspot,,0,gc-g1,gc-pending-review,noreg-hard,,,,,,,,,,,,,,,,,,,"Following log on a 50gb HeapRAMTester, running for 10s (actual runtime):

2021-09-13 09:57:45 - Hit rate = 0.2001949695124563; total hits = 350550; total misses = 1400493; total reads = 1751043; free memory = 3619MB; max time taken = 0.977226ms; uptime = 29 s; tp
2021-09-13 09:57:46 - Hit rate = 0.19992681200864684; total hits = 82497; total misses = 330139; total reads = 412636; free memory = 3643MB; max time taken = 615.887194ms; uptime = 30 s; tp
2021-09-13 09:57:47 - Hit rate = 0.19931418396618797; total hits = 248948; total misses = 1000075; total reads = 1249023; free memory = 2906MB; max time taken = 615.887194ms; uptime = 31 s;
2021-09-13 09:57:48 - Hit rate = 0.19986780274836977; total hits = 251881; total misses = 1008357; total reads = 1260238; free memory = 2162MB; max time taken = 615.887194ms; uptime = 32 s;
2021-09-13 09:57:49 - Hit rate = 0.20071151200371223; total hits = 123274; total misses = 490911; total reads = 614185; free memory = 1988MB; max time taken = 615.887194ms; uptime = 33 s; t
2021-09-13 09:57:50 - Hit rate = 0.19965430015393493; total hits = 229051; total misses = 918187; total reads = 1147238; free memory = 1400MB; max time taken = 615.887194ms; uptime = 34 s;
2021-09-13 09:57:51 - Hit rate = 0.20023346984418983; total hits = 187652; total misses = 749514; total reads = 937166; free memory = 897MB; max time taken = 615.887194ms; uptime = 35 s; tp
1437112360
2021-09-13 09:57:52 - Hit rate = 0.19942183763963975; total hits = 144454; total misses = 579910; total reads = 724364; free memory = 503MB; max time taken = 615.8871

I.e. on 9:57:52 the last log message from the program occurred (and that ""1437112360"" string is a printout at the end of the application).

Relevant application code here:

    private void go(int seconds) throws InterruptedException {
        int keys = createData();
        accessCache(keys, seconds);
        exit = true;
        System.out.println(totalSum);  <-------- this is that 143...60 printout; after that the application exits.
    }


Looking at the corresponding gc log show that the last message is at

[...]
[2021-09-13T09:58:20.184+0200] GC(23) Finalize Concurrent Mark Cleanup 5.291ms
[2021-09-13T09:58:20.184+0200] GC(23) Pause Cleanup 50694M->50694M(51200M) 6.816ms
[2021-09-13T09:58:20.184+0200] GC(23) Concurrent Cleanup for Next Mark
[2021-09-13T09:58:20.185+0200] GC(23) Running G1 Clear Bitmap with 5 workers for 800 work units.
[2021-09-13T09:58:20.222+0200] GC(23) Concurrent Cleanup for Next Mark 37.406ms
[2021-09-13T09:58:20.222+0200] GC(23) Concurrent Mark Cycle 34499.877ms

right after completion of a mark cycle (also attached, test.log).

I.e. the VM exited only 30s after application exit.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8273940,,,,,JDK-8274007,,,,,"2021-09-13 01:05;tschatzl;test.log;https://bugs.openjdk.org/secure/attachment/96429/test.log","2021-09-13 01:05;tschatzl;test.out;https://bugs.openjdk.org/secure/attachment/96430/test.out",,,,,,,,,,,,,,,,,,"0|i2ub0r:",9223372036854775807,b15,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6b00f96c,,,,,,,,,"2021-09-15 01:29;roboduke;Changeset: 02af541b
Author:    Thomas Schatzl <tschatzl@openjdk.org>
Date:      2021-09-15 08:27:43 +0000
URL:       https://git.openjdk.java.net/jdk/commit/02af541b7427a4b74eecab9513a770026d1a8426
;;;",,,,,,,,,,,,,,,,,,,,,,,,,
tools/jpackage tests do not work on apt-based Linux distros like Debian,JDK-8273595,5058312,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,aoqi,aoqi,aoqi,2021-09-10 04:39,2021-11-16 12:27,2023-10-01 09:57,2021-09-10 16:14,16,17,18,,,,,18,tools,,0,jdk17u-fix-request,jdk17u-fix-yes,testbug,,,,,,,,,,,,,,,,,,,"A similar issue on Ubuntu has been fixed by JDK-8238953. However, tools/jpackage tests do not work on Debian Linux or other apt-based Linux, when rpm package is installed. This issue proposes a general fix for apt-based Linux.",,,,,,,,,,,JDK-8277208,JDK-8277295,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8238953,,,,,,,,,,generic,,,,,,,,,linux,,,,,"0|i2uaxf:",9223372036854775807,b15,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@3656b41f,,,,,,,,,"2021-09-10 16:14;roboduke;Changeset: f189dff5
Author:    Ao Qi <aoqi@openjdk.org>
Committer: Jie Fu <jiefu@openjdk.org>
Date:      2021-09-10 23:13:18 +0000
URL:       https://git.openjdk.java.net/jdk/commit/f189dff5cbd4d47e1b2f3c0e5f2c866a7effccdf
;;;","2021-10-29 00:46;aoqi;Fix Request (17u)

The patch applies clean. Low risk, only test changes. test/jdk/tools/jpackage tests passed on x64/Ubuntu and x64/Debian.;;;",,,,,,,,,,,,,,,,,,,,,,,,
[lworld] JITs need to properly handle static inline type field with unloaded type,JDK-8273594,5058311,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,thartmann,thartmann,thartmann,2021-09-10 03:54,2021-10-14 23:00,2023-10-01 09:57,2021-10-14 23:00,repo-valhalla,,,,,,,repo-valhalla,hotspot,,0,c1,c2,lw3,lworld,,,,,,,,,,,,,,,,,,"Running runtime/valhalla/inlinetypes/CircularityTest.java with -Xcomp triggers compilation of the static initializer of CircularityTest$B which contains an access to a static inline type field with unloaded type.

C1 crashes with:

# A fatal error has been detected by the Java Runtime Environment:
#
#  Internal Error (/opt/mach5/mesos/work_dir/slaves/ff806ead-2cac-495d-9cbc-62116f99bf14-S14161/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/d1022ba1-d7ea-4bf2-b8ce-2a145f73e2ac/runs/ed978567-bfa0-4b2d-a463-1b9bc997ce93/workspace/open/src/hotspot/share/c1/c1_LIRGenerator.cpp:2050), pid=3369, tid=3387
#  assert(!could_be_null || !field->holder()->is_loaded()) failed: inline type field should be loaded
#
# JRE version: Java(TM) SE Runtime Environment (18.0) (fastdebug build 18-lworld3ea+0-2021-09-09-1338040.tobias.hartmann.valhalla3)
# Java VM: Java HotSpot(TM) 64-Bit Server VM (fastdebug 18-lworld3ea+0-2021-09-09-1338040.tobias.hartmann.valhalla3, compiled mode, tiered, compressed oops, compressed class ptrs, g1 gc, linux-amd64)
# Problematic frame:
# V  [libjvm.so+0x7847c2]  LIRGenerator::inline_type_field_access_prolog(AccessField*, CodeEmitInfo*)+0x212

Current CompileTask:
C1: 136414 19542    b  3       runtime.valhalla.inlinetypes.CircularityTest$B::<clinit> (12 bytes)

Stack: [0x00007f2ce85fa000,0x00007f2ce86fb000],  sp=0x00007f2ce86f8d50,  free space=1019k
Native frames: (J=compiled Java code, j=interpreted, Vv=VM code, C=native code)
V  [libjvm.so+0x7847c2]  LIRGenerator::inline_type_field_access_prolog(AccessField*, CodeEmitInfo*)+0x212
V  [libjvm.so+0x79c899]  LIRGenerator::do_LoadField(LoadField*)+0xe9
V  [libjvm.so+0x782184]  LIRGenerator::do_root(Instruction*)+0xa4
V  [libjvm.so+0x7860de]  non-virtual thunk to LIRGenerator::block_do(BlockBegin*)+0x5e
V  [libjvm.so+0x7458f4]  BlockList::iterate_forward(BlockClosure*)+0x94
V  [libjvm.so+0x700669]  Compilation::emit_lir()+0x5c9
V  [libjvm.so+0x70366f]  Compilation::compile_java_method()+0x3ff
V  [libjvm.so+0x7042e0]  Compilation::compile_method()+0x1d0
V  [libjvm.so+0x704d5a]  Compilation::Compilation(AbstractCompiler*, ciEnv*, ciMethod*, int, BufferBlob*, bool, DirectiveSet*)+0x3ca
V  [libjvm.so+0x706293]  Compiler::compile_method(ciEnv*, ciMethod*, int, bool, DirectiveSet*)+0x1a3
V  [libjvm.so+0xa639f1]  CompileBroker::invoke_compiler_on_method(CompileTask*)+0xd31
V  [libjvm.so+0xa64728]  CompileBroker::compiler_thread_loop()+0x598
V  [libjvm.so+0x1966a1c]  JavaThread::thread_main_inner()+0x27c
V  [libjvm.so+0x196d040]  Thread::call_run()+0x100
V  [libjvm.so+0x161dfa4]  thread_native_entry(Thread*)+0x104

C2 crashes with:

# A fatal error has been detected by the Java Runtime Environment:
#
#  Internal Error (/opt/mach5/mesos/work_dir/slaves/ff806ead-2cac-495d-9cbc-62116f99bf14-S14161/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/d1022ba1-d7ea-4bf2-b8ce-2a145f73e2ac/runs/ed978567-bfa0-4b2d-a463-1b9bc997ce93/workspace/open/src/hotspot/share/ci/ciMetadata.hpp:112), pid=23942, tid=23970
#  assert(is_inlinetype()) failed: bad cast
#
# JRE version: Java(TM) SE Runtime Environment (18.0) (fastdebug build 18-lworld3ea+0-2021-09-09-1338040.tobias.hartmann.valhalla3)
# Java VM: Java HotSpot(TM) 64-Bit Server VM (fastdebug 18-lworld3ea+0-2021-09-09-1338040.tobias.hartmann.valhalla3, compiled mode, compressed oops, compressed class ptrs, g1 gc, linux-amd64)
# Problematic frame:
# V  [libjvm.so+0x1684414]  Parse::do_get_xxx(Node*, ciField*)+0x824

Current CompileTask:
C2:  38981 5832    b        runtime.valhalla.inlinetypes.CircularityTest$B::<clinit> (12 bytes)

Stack: [0x00007f8014afb000,0x00007f8014bfc000],  sp=0x00007f8014bf8940,  free space=1014k
Native frames: (J=compiled Java code, j=interpreted, Vv=VM code, C=native code)
V  [libjvm.so+0x1684414]  Parse::do_get_xxx(Node*, ciField*)+0x824
V  [libjvm.so+0x1686042]  Parse::do_field_access(bool, bool)+0x502
V  [libjvm.so+0x167ff70]  Parse::do_one_bytecode()+0x1d20
V  [libjvm.so+0x1666618]  Parse::do_one_block()+0x838
V  [libjvm.so+0x1667540]  Parse::do_all_blocks()+0x130
V  [libjvm.so+0x166c68c]  Parse::Parse(JVMState*, ciMethod*, float)+0xe1c
V  [libjvm.so+0x848e65]  ParseGenerator::generate(JVMState*)+0x115
V  [libjvm.so+0xa5369b]  Compile::Compile(ciEnv*, ciMethod*, int, bool, bool, bool, bool, bool, DirectiveSet*)+0x143b
V  [libjvm.so+0x844640]  C2Compiler::compile_method(ciEnv*, ciMethod*, int, bool, DirectiveSet*)+0x6a0
V  [libjvm.so+0xa639f1]  CompileBroker::invoke_compiler_on_method(CompileTask*)+0xd31
V  [libjvm.so+0xa64728]  CompileBroker::compiler_thread_loop()+0x598
V  [libjvm.so+0x1966a1c]  JavaThread::thread_main_inner()+0x27c
V  [libjvm.so+0x196d040]  Thread::call_run()+0x100
V  [libjvm.so+0x161dfa4]  thread_native_entry(Thread*)+0x104",,,,,,,,,,,,,,,,,,,,,,,JDK-8273650,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2uax7:",9223372036854775807,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
[REDO] Warn user when using mac-sign option with unsigned app-image.,JDK-8273593,5058310,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,herrick,herrick,kcr,2021-09-10 03:36,2022-05-16 21:31,2023-10-01 09:57,2021-09-14 11:11,16,17,18,,,,,17.0.2,tools,,0,jdk17u-fix-request,jdk17u-fix-SQE-ok-next,jdk17u-fix-yes,sn_99,,,,,,,,,,,,,,,,,,"When jpackage is building a dmg or pkg bundle in two phases (that is, building an app-image type first and then using that app-image to build dmg or pkg bundle), and if signing is used, the --mac-sign option may be needed in both phases.
Though not strictly an error (you can build a signed pkg containing an unsigned app-image, or an unsigned pkg containing a signed app-image) the result could not be notarized, as both package and app-image needs to be signed to pass notarization.

We have had at least one user wondering why notarization failed in such a case, So this issue proposes to add a warning message when an unsigned app-image is used to build a bundle using --mac-sign option.",,,,,,,,,,,,,,,,,,,,,,,JDK-8273592,,,,,,JDK-8271868,,,,,,,,,,,JDK-8286850,JDK-8271868,,,,,,,,,,,,,,,,,,os_x,,,,,"0|i2uawz:",9223372036854775807,b01,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@3656b41f,,,,,,,,,"2021-09-10 03:39;kcr;Now that the original fix for JDK-8271868 is backed out by JDK-8273592, and synced into jdk17u, it can be redone in jdk17u (not jdk17) for 17.0.2 using this bug ID.

NOTE: It does not need to be redone in mainline jdk for JDK 18, since the original fix is still present and actual there.;;;","2021-09-14 11:11;roboduke;Changeset: ec0b85ab
Author:    Andy Herrick <herrick@openjdk.org>
Date:      2021-09-14 18:11:12 +0000
URL:       https://git.openjdk.java.net/jdk17u/commit/ec0b85ab5fd4cee7586911ab4f3448469b171bbb
;;;",,,,,,,,,,,,,,,,,,,,,,,,
String.charAt performance degrades due to JDK-8268698,JDK-8273585,5058301,Bug,Resolved,JDK,JDK,software,duke,,,P2,Fixed,yyang,jzhu,jzhu,2021-09-10 01:00,2022-12-01 04:17,2023-10-01 09:57,2021-10-26 18:22,18,,,,,,,18,hotspot,,0,c2,noreg-hard,noreg-perf,oracle-triage-11,oracle-triage-17,oracle-triage-18,performance,,,,,,,,,,,,,,,"The attached program shows that the performance degradation over 100% after JDK-8268698.

The result of
""time linux-x86_64-server-release/images/jdk/bin/java Test"":

Before JDK-8268698,
    real    0m8.369s
    user    0m8.386s
    sys     0m0.019s

After JDK-8268698,
    real    0m19.722s
    user    0m19.748s
    sys     0m0.013s",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8268698,JDK-8297307,JDK-8290432,,,,,,,,"2021-09-10 01:00;jzhu;Test.java;https://bugs.openjdk.org/secure/attachment/96421/Test.java",,,,,,,,,,,,18,,,,,,,"0|i2uauz:",9223372036854775807,b21,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2021-10-26 18:22;roboduke;Changeset: b0d1e4ff
Author:    Yi Yang <yyang@openjdk.org>
Date:      2021-10-27 01:21:12 +0000
URL:       https://git.openjdk.java.net/jdk/commit/b0d1e4ff4d3806851fe998717822e8e52987357c
;;;","2022-01-27 03:27;dboyle;Change is in jdk/src/hotspot/share/opto/library_call.cpp - relabelled to hotspot;;;",,,,,,,,,,,,,,,,,,,,,,,,
TypeElement.getSuperclass crashes for a record TypeElement when j.l.Record is not available,JDK-8273584,5058300,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,jlahoda,jlahoda,jlahoda,2021-09-10 00:48,2021-09-15 20:06,2023-10-01 09:57,2021-09-13 02:26,18,,,,,,,18,tools,,0,,,,,,,,,,,,,,,,,,,,,,"Consider a TypeElement for a record when the j.l.Record is unavailable for any reason. Calling TypeElement.getSuperclass() leads to a NPE like:
---
java.lang.NullPointerException: Cannot invoke ""com.sun.tools.javac.tree.JCTree.accept(com.sun.tools.javac.tree.JCTree$Visitor)"" because ""tree"" is null
""MainThread""
	at com.sun.tools.javac.comp.TypeEnter$AbstractHeaderPhase$Synthesizer.visit(TypeEnter.java:595)
	at com.sun.tools.javac.comp.TypeEnter$AbstractHeaderPhase$1.getModelType(TypeEnter.java:575)
	at com.sun.tools.javac.code.Symbol$ClassSymbol.getSuperclass(Symbol.java:1443)
	at com.sun.tools.javac.code.Symbol$ClassSymbol.getSuperclass(Symbol.java:1257)
	at RecordsErrorRecovery.getSuperclass(RecordsErrorRecovery.java:73)
---
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8273263,,,,,,,,,,,,,,,,,,,,,,,,"0|i2uaur:",9223372036854775807,b15,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4dca67bd,,,,,,,,,"2021-09-13 02:26;roboduke;Changeset: b0d04976
Author:    Jan Lahoda <jlahoda@openjdk.org>
Date:      2021-09-13 09:24:06 +0000
URL:       https://git.openjdk.java.net/jdk/commit/b0d04976bd334f840cb91e3f6dfa2ea680948a39
;;;",,,,,,,,,,,,,,,,,,,,,,,,,
javax/swing/JMenu/4515762/bug4515762.java fails on macOS 12,JDK-8273578,5058290,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,psadhukhan,prr,prr,2021-09-09 16:53,2023-06-14 08:58,2023-10-01 09:57,2021-09-22 22:17,11,17,18,8,,,,18,client-libs,,0,amazon-interest,jdk11u-fix-request,jdk11u-fix-yes,jdk17u-fix-request,jdk17u-fix-yes,macos,macos12,sn_102,testbug,,,,,,,,,,,,,"This has failed in all my test runs using the jtreg/mach5 harness
on both ARM and x64 versions of macOS 12

The test log is just
java.lang.RuntimeException: Action has not been received
	at bug4515762.checkAction(bug4515762.java:106)
	at bug4515762.main(bug4515762.java:165)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at com.sun.javatest.regtest.agent.MainWrapper$MainThread.run(MainWrapper.java:127)
	at java.base/java.lang.Thread.run(Thread.java:833)

JavaTest Message: Test threw exception: java.lang.RuntimeException: Action has not been received
JavaTest Message: shutting down test

STATUS:Failed.`main' threw exception: java.lang.RuntimeException: Action has not been received

Since this is right after the robot has called
            robot.keyPress(KeyEvent.VK_M);
            robot.keyRelease(KeyEvent.VK_M);

It looks like it may be related to the problem described in https://bugs.openjdk.java.net/browse/JDK-8273520

But in this case I have not (yet) been able to reproduce it on macOS 12 outside the test harness ..

Possibly it isn't reproducing using screen sharing which is what I had to use today but it is repeatable enougj in the harness to need a bug and investigation.",,,,,,,,,,,JDK-8290773,JDK-8296105,JDK-8296106,JDK-8293788,JDK-8290701,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2uasj:",9223372036854775807,b17,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@568a5b31,,,,,,,,,"2021-09-12 22:40;psadhukhan;Don't have macos12 to triage but 
I see we have ""m"" mnemonic set for

javax/swing/event/RightAltKeyTest.java
javax/swing/JMenu/4692443/bug4692443.java
javax/swing/JMenu/6470128/bug6470128.java
javax/swing/JMenu/PopupReferenceMemoryLeak.java
javax/swing/JMenuBar/4750590/bug4750590.java
javax/swing/JMenuItem/ShortcutNotDiplayed/ShortcutNotDisplayedTest.java
javax/swing/JPopupMenu/4458079/bug4458079.java

which does not fail (or is it?) so not sure if ""m"" shortcut has problem in macos12 (as doubted in JDK-8273520) or the test does something not agreeable to macos12;;;","2021-09-22 22:17;roboduke;Changeset: 45adc922
Author:    Prasanta Sadhukhan <psadhukhan@openjdk.org>
Date:      2021-09-23 05:15:37 +0000
URL:       https://git.openjdk.java.net/jdk/commit/45adc9227a28c8d614c41ac496bbeaa752e5fd7b
;;;","2022-10-24 18:11;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/829
Date: 2022-10-25 01:02:18 +0000;;;","2022-10-24 18:19;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk11u-dev/pull/1474
Date: 2022-10-25 01:09:47 +0000;;;","2022-10-25 13:56;phh;Fix Request (17u, 11u).

On behalf of Josh Cao joshcao@amazon.com

Test-only Oracle parity fix, clean except test not in ProblemList.txt, test passes.;;;",,,,,,,,,,,,,,,,,,,,,
"memory leak in appendBootClassPath(), paths must be deallocated",JDK-8273575,5058285,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,sspitsyn,sspitsyn,sspitsyn,2021-09-09 14:09,2022-12-15 16:24,2023-10-01 09:57,2021-09-15 13:02,17,18,8,,,,,18,core-svc,,0,azul-interest,jdk11u-fix-request,jdk11u-fix-yes,jdk13u-fix-request,jdk13u-fix-yes,jdk15u-fix-request,jdk15u-fix-yes,jdk17u-fix-request,jdk17u-fix-yes,jdk8u-fix-request,jdk8u-fix-yes,redhat-interest,,,,,,,,,,"The memory allocated and hold in paths variable is never deallocated:
    splitPathList(pathList, &count, &paths);

So, it is a memory leak which needs to be fixed.
",,,,,,,,,,,JDK-8276134,JDK-8278573,JDK-8280975,JDK-8278840,JDK-8276356,JDK-8275040,JDK-8275057,JDK-8278467,JDK-8298899,JDK-8281577,,,,,,,,,,,,,,,JDK-8266187,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2uarf:",9223372036854775807,b15,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@dc685aa,,,,,,,,,"2021-09-15 13:02;roboduke;Changeset: 74ffe122
Author:    Serguei Spitsyn <sspitsyn@openjdk.org>
Date:      2021-09-15 20:00:21 +0000
URL:       https://git.openjdk.java.net/jdk/commit/74ffe12267cb3ae63072a06f50083fd0352d8049
;;;","2021-10-11 02:15;omikhaltcova;Fix request (17u)

I'd like to backport this fix to jdk17u. 
The original patch applied cleanly.;;;","2021-10-11 02:56;omikhaltcova;Fix request (15u) 

I'd like to backport this fix to jdk15u. 
The original patch applied cleanly.;;;","2021-10-11 03:15;omikhaltcova;Fix request (13u) 

I'd like to backport this fix to jdk13u. 
The original patch applied cleanly.;;;","2021-12-10 01:29;goetz;Fix request [11u]

I backport this for parity with 11.0.15-oracle.
Low risk, trivial change.
Clean backport.;;;","2022-01-12 08:07;zgu;Fix Request (8u)

I would like to backport this patch to 8u for parity with Oracle 8u331. The original patch applies cleanly.
;;;",,,,,,,,,,,,,,,,,,,,
[macos12] ActionListenerCalledTwiceTest.java fails on macOS 12,JDK-8273573,5058282,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,azvegint,prr,prr,2021-09-09 13:23,2022-06-09 22:30,2023-10-01 09:57,2022-06-07 06:59,11,17,18,,,,,19,client-libs,,0,intermittent,macos,macos12,sn_105,sn_106,sn_107,sn_108,sn_109,sn_110,sn_111,sn_119,sn_120,,,,,,,,,,"javax/swing/JMenuItem/ActionListenerCalledTwice/ActionListenerCalledTwiceTest.java is repeatedly failing on macOS 12

https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/java/awt/Desktop.html#setDefaultMenuBar(javax.swing.JMenuBar)

provides a menu bar that can still be accessed when there are no active frames.
This is using the system menu bar on maOS and was implemented as part of https://openjdk.java.net/jeps/272

The test effectively runs twice  once with the window active and again iconified.
It is the latter which fails because no events are delivered and  we get

Exception in thread ""main"" java.lang.Exception: DefaultMenuBar Test failed: ActionListener for Item1 called 0 times instead of 1!
    at ActionListenerCalledTwiceTest.testForTwice(ActionListenerCalledTwiceTest.java:114)
    at ActionListenerCalledTwiceTest.main(ActionListenerCalledTwiceTest.java:48)

It appears that in this test when the app is in the iconfied state the test is expecting the keystrokes to go
to this menu bar still. I don't know if the expecation is correct, but this isn't happening and worked in earlier versions of macOS

Also I noticed that the test doesn't exit. It appears that the call to

Desktop.getDesktop().setDefaultMenuBar(bar);

is effectively creating another visible window so the AWT thread doesn't exit.

Adding this line below allows the test to exit and should be added to the test
            SwingUtilities.invokeAndWait(() -> Desktop.getDesktop().setDefaultMenuBar(null));

One thing it I noticed tho' i that the spec of this method doesn't actually say null is allowed ..
It might be a good idea to update it - probably as a separate bug since any fix to this may need
to be backported.
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8278348,,,,,,,,,,,,,,,,,,,,,,,,"0|i2uaqr:",9223372036854775807,b26,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@5a9b3fd3,,,,,,,,,"2021-12-02 08:39;azvegint;The issue is reproducible on macOS12 x64, but not on aarch64.;;;","2021-12-03 12:53;azvegint;It seems to be a robot/system configuration issue, but a strange one.

It was tested on 3 configurations: macOS 12 aarch64, macOS 12 x64 and my laptop macOS  11.6.1 x64.
All of them have Terminal.app added and enabled  Security & Privacy → Accessibility.

Basically it should allow to its child processes to control mouse and keyboard.

local macOS 11.6.1 x64:
works as expected

vnc: macOS 12 aarch64:
works as expected

vnc: macOS 12 x64
Behaves very strange:
mouse is successfully moved, but keyboard and mouse keypress/keyrelease are not delivered.

Adding java executable directly in  Security & Privacy → Accessibility  doesn't change anything.
But if you uncheck Terminal.app in  Security & Privacy → Accessibility  the robot won't even be able to move the mouse.;;;","2021-12-08 18:24;azvegint;Not every macOS 12 x64 is affected by this issue.

But as for the specific failing macOS 12 x64 machine,
reverting CRobot.m to state before JDK-8242174 fix allows to send keyboard and mouse keypress/keyrelease events on it.




;;;","2021-12-15 06:28;azvegint;This affected machine is no longer able to reproduce the issue.;;;","2021-12-21 05:27;azvegint;It is reproducible again.;;;","2022-06-02 13:18;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/9003
Date: 2022-06-02 20:12:01 +0000;;;","2022-06-07 06:59;dukebot;Changeset: 1499e5ea
Author:    Alexander Zvegintsev <azvegint@openjdk.org>
Date:      2022-06-07 13:57:01 +0000
URL:       https://git.openjdk.java.net/jdk/commit/1499e5eac0cad3745495baeda7b5f9157647ebe9
;;;",,,,,,,,,,,,,,,,,,,
Shenandoah: Shenandoah should support multi-threaded heap dump,JDK-8273559,5058266,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,zgu,zgu,zgu,2021-09-09 07:33,2023-06-15 12:24,2023-10-01 09:57,2021-09-15 06:11,17,18,,,,,,18,hotspot,,0,amazon-interest,gc-shenandoah,,,,,,,,,,,,,,,,,,,,"Shenandoah heap dump was designed to be single-threaded, but JDK-8237354 broke the assumption.
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8237354,JDK-8279540,,,,JDK-8273482,JDK-8273832,,,,,,,,,,,,,,,,,,,,,,,"0|i2uan7:",9223372036854775807,b15,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6b00f96c,,,,,,,,,"2021-09-15 06:11;roboduke;Changeset: 8132bfd2
Author:    Zhengyu Gu <zgu@openjdk.org>
Date:      2021-09-15 13:10:13 +0000
URL:       https://git.openjdk.java.net/jdk/commit/8132bfd23f2f7fb52e502a3e6fe488fbdb537df0
;;;","2023-06-15 12:24;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/1450
Date: 2023-06-15 18:19:11 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,
sun.security.ssl.SSLEngineImpl.closeInbound also has similar error of JDK-8253368,JDK-8273553,5058254,Bug,Closed,JDK,JDK,software,duke,,,P3,Fixed,wetmore,webbuggrp,webbuggrp,2021-09-09 04:18,2023-03-29 20:06,2023-10-01 09:57,2022-04-01 17:33,15,16,17,18,,,,19,security-libs,,0,additional-information-received,bugdb_34394367,dcsaw,jdk11u-fix-request,jdk11u-fix-yes,jdk15u-fix-request,jdk15u-fix-yes,jdk17u-fix-request,jdk17u-fix-yes,regression,release-note=yes,reproducer-other,webbug,,,,,,,,,"ADDITIONAL SYSTEM INFORMATION :
Initially observed in OpenJDK 15, also observed in OpenJDK 16.

A DESCRIPTION OF THE PROBLEM :
I am seeing the same behaviour as in the original bug report, only the exception is thrown at java.base/sun.security.ssl.SSLEngineImpl.closeInbound(SSLEngineImpl.java:796) rather than at sun.security.ssl.SSLSocketImpl.shutdownInput(SSLSocketImpl.java:656). The two methods are very similar, so I was wondering if the exception thrown in the former should also be a non-fatal one, i.e. the fix implemented for the original bug. This is the stacktrace:

00:00:18,708 ERROR [stderr] (default task-1) javax.net.ssl|ERROR|A4|default task-1|2021-09-03 24:00:18.708 BST|TransportContext.java:361|Fatal (INTERNAL_ERROR): closing inbound before receiving peer's close_notify (
00:00:18,708 ERROR [stderr] (default task-1) ""throwable"" : {
00:00:18,708 ERROR [stderr] (default task-1)   javax.net.ssl.SSLException: closing inbound before receiving peer's close_notify
00:00:18,708 ERROR [stderr] (default task-1)    at java.base/sun.security.ssl.Alert.createSSLException(Alert.java:133)
00:00:18,708 ERROR [stderr] (default task-1)    at java.base/sun.security.ssl.Alert.createSSLException(Alert.java:117)
00:00:18,708 ERROR [stderr] (default task-1)    at java.base/sun.security.ssl.TransportContext.fatal(TransportContext.java:356)
00:00:18,708 ERROR [stderr] (default task-1)    at java.base/sun.security.ssl.TransportContext.fatal(TransportContext.java:312)
00:00:18,708 ERROR [stderr] (default task-1)    at java.base/sun.security.ssl.TransportContext.fatal(TransportContext.java:303)
00:00:18,708 ERROR [stderr] (default task-1)    at java.base/sun.security.ssl.SSLEngineImpl.closeInbound(SSLEngineImpl.java:796)
00:00:18,708 ERROR [stderr] (default task-1)    at io.undertow.core@2.2.8.Final//io.undertow.server.protocol.http.ALPNLimitingSSLEngine.closeInbound(ALPNLimitingSSLEngine.java:169)
00:00:18,708 ERROR [stderr] (default task-1)    at io.undertow.core@2.2.8.Final//io.undertow.protocols.ssl.SslConduit.notifyReadClosed(SslConduit.java:636)
00:00:18,708 ERROR [stderr] (default task-1)    at io.undertow.core@2.2.8.Final//io.undertow.protocols.ssl.SslConduit.closed(SslConduit.java:1064)
00:00:18,708 ERROR [stderr] (default task-1)    at io.undertow.core@2.2.8.Final//io.undertow.protocols.ssl.SslConduit.close(SslConduit.java:1196)
00:00:18,708 ERROR [stderr] (default task-1)    at io.undertow.core@2.2.8.Final//io.undertow.protocols.ssl.UndertowSslConnection.closeAction(UndertowSslConnection.java:155)
00:00:18,708 ERROR [stderr] (default task-1)    at org.jboss.xnio@3.8.4.Final//org.xnio.Connection.close(Connection.java:132)
00:00:18,708 ERROR [stderr] (default task-1)    at io.undertow.core@2.2.8.Final//io.undertow.server.AbstractServerConnection.close(AbstractServerConnection.java:159)
00:00:18,708 ERROR [stderr] (default task-1)    at org.jboss.xnio@3.8.4.Final//org.xnio.IoUtils.safeClose(IoUtils.java:152)

REGRESSION : Last worked in version 8


FREQUENCY : often


",,,,,,,,,,,JDK-8291471,JDK-8291242,JDK-8295637,JDK-8294222,JDK-8295360,JDK-8291168,,,,,,,,,,,JDK-8305214,,,JDK-8279308,,,,,JDK-8283149,JDK-8279308,JDK-8303608,,,JDK-8253368,,,,,,,,,,generic,,,,,,,,,generic,,,,,"0|i2uakj:",9223372036854775807,b17,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@39d9862,,,,,,,Verified,,"2021-09-09 05:51;tongwan;Requested the submitter download the latest version of JDK 17 from https://jdk.java.net/17/ and test again.;;;","2021-09-09 06:00;tongwan;The additional information from the submitter:
I am aware that JDK-8253368 has been fixed, but I'm seeing the same error being thrown in a different class. The original bug was reported for sun.security.ssl.SSLSocketImpl.shutdownInput(SSLSocketImpl.java:656) whereas in my case the error is thrown in sun.security.ssl.SSLEngineImpl.closeInbound(SSLEngineImpl.java:796). The two methods are very similar, so I was wondering if the fix applied to the first can also be applied to the second. Here's the stacktrace:

00:00:18,708 ERROR [stderr] (default task-1) javax.net.ssl|ERROR|A4|default task-1|2021-09-03 24:00:18.708 BST|TransportContext.java:361|Fatal (INTERNAL_ERROR): closing inbound before receiving peer's close_notify (
00:00:18,708 ERROR [stderr] (default task-1) ""throwable"" : {
00:00:18,708 ERROR [stderr] (default task-1)   javax.net.ssl.SSLException: closing inbound before receiving peer's close_notify
00:00:18,708 ERROR [stderr] (default task-1)    at java.base/sun.security.ssl.Alert.createSSLException(Alert.java:133)
00:00:18,708 ERROR [stderr] (default task-1)    at java.base/sun.security.ssl.Alert.createSSLException(Alert.java:117)
00:00:18,708 ERROR [stderr] (default task-1)    at java.base/sun.security.ssl.TransportContext.fatal(TransportContext.java:356)
00:00:18,708 ERROR [stderr] (default task-1)    at java.base/sun.security.ssl.TransportContext.fatal(TransportContext.java:312)
00:00:18,708 ERROR [stderr] (default task-1)    at java.base/sun.security.ssl.TransportContext.fatal(TransportContext.java:303)
00:00:18,708 ERROR [stderr] (default task-1)    at java.base/sun.security.ssl.SSLEngineImpl.closeInbound(SSLEngineImpl.java:796)
00:00:18,708 ERROR [stderr] (default task-1)    at io.undertow.core@2.2.8.Final//io.undertow.server.protocol.http.ALPNLimitingSSLEngine.closeInbound(ALPNLimitingSSLEngine.java:169)
00:00:18,708 ERROR [stderr] (default task-1)    at io.undertow.core@2.2.8.Final//io.undertow.protocols.ssl.SslConduit.notifyReadClosed(SslConduit.java:636)
00:00:18,708 ERROR [stderr] (default task-1)    at io.undertow.core@2.2.8.Final//io.undertow.protocols.ssl.SslConduit.closed(SslConduit.java:1064)
00:00:18,708 ERROR [stderr] (default task-1)    at io.undertow.core@2.2.8.Final//io.undertow.protocols.ssl.SslConduit.close(SslConduit.java:1196)
00:00:18,708 ERROR [stderr] (default task-1)    at io.undertow.core@2.2.8.Final//io.undertow.protocols.ssl.UndertowSslConnection.closeAction(UndertowSslConnection.java:155)
00:00:18,708 ERROR [stderr] (default task-1)    at org.jboss.xnio@3.8.4.Final//org.xnio.Connection.close(Connection.java:132)
00:00:18,708 ERROR [stderr] (default task-1)    at io.undertow.core@2.2.8.Final//io.undertow.server.AbstractServerConnection.close(AbstractServerConnection.java:159)
00:00:18,708 ERROR [stderr] (default task-1)    at org.jboss.xnio@3.8.4.Final//org.xnio.IoUtils.safeClose(IoUtils.java:152) [...]
;;;","2021-10-11 06:02;coffeys;The TLS specification in this area seems to have altered over the years in the newer TLS protocol versions that were released. I've captured some of the main differences in this area in the notes below.

I think we should re-examine if the above example should indeed lead to a fatal alert of not. Note that unlike SSLSocket, SSLEngine exposes more API control in this area for closing inbound/outbound traffic. 

=====

Closure Alert RFC changes since TLSv1.0

TLS v1:
        This message notifies the recipient that the sender will not send
        any more messages on this connection. The session becomes
        unresumable if any connection is terminated without proper
        close_notify messages with level equal to warning.
	
TLS v1.1:
       Note that as of TLS 1.1,
       failure to properly close a connection no longer requires that a
       session not be resumed.  This is a change from TLS 1.0 to conform
       with widespread implementation practice.

TLS v1 to TLS v1.2:
    Unless some other fatal alert has been transmitted, each party is
    required to send a close_notify alert before closing the write side
    of the connection.  The other party MUST respond with a close_notify
    alert of its own and close down the connection immediately,
    discarding any pending writes.  It is not required for the initiator
    of the close to wait for the responding close_notify alert before
    closing the read side of the connection.
	
   If the application protocol using TLS provides that any data may be
   carried over the underlying transport after the TLS connection is
   closed, the TLS implementation must receive the responding
   close_notify alert before indicating to the application layer that
   the TLS connection has ended.  If the application protocol will not
   transfer any additional data, but will only close the underlying
   transport connection, then the implementation MAY choose to close the
   transport without waiting for the responding close_notify.
   
   
   TLS v1.2 (text) versus TLS v1.3:
   
    close_notify
       This message notifies the recipient that the sender will not send
       any more messages on this connection.  Note that as of TLS 1.1,
       failure to properly close a connection no longer requires that a
       session not be resumed.  This is a change from TLS 1.0 to conform
       with widespread implementation practice.
	   
    close_notify
       This alert notifies the recipient that the sender will
       not send any more messages on this connection.  Any data received
       after a closure alert has been received MUST be ignored.
	   
Further clarification in TLS v1.3:

    Either party MAY initiate a close of its write side of the connection
    by sending a ""close_notify"" alert.  Any data received after a closure
    alert has been received MUST be ignored.  If a transport-level close
    is received prior to a ""close_notify"", the receiver cannot know that
    all the data that was sent has been received.

    Each party MUST send a ""close_notify"" alert before closing its write
    side of the connection, unless it has already sent some error alert.
    This does not have any effect on its read side of the connection.
    Note that this is a change from versions of TLS prior to TLS 1.3 in
    which implementations were required to react to a ""close_notify"" by
    discarding pending writes and sending an immediate ""close_notify""
    alert of their own.  That previous requirement could cause truncation
    in the read side.  Both parties need not wait to receive a
    ""close_notify"" alert before closing their read side of the
    connection, though doing so would introduce the possibility of
    truncation.

;;;","2022-03-11 02:29;tongwan;Requested a simple reproducer from the submitter.;;;","2022-03-11 02:52;coffeys;contacting submitter shouldn't be necessary. Here's a simple edit to an existing test case to mimic the issue

diff --git a/test/jdk/javax/net/ssl/SSLEngine/LargePacket.java b/test/jdk/javax/net/ssl/SSLEngine/LargePacket.java
index 33f2c4f49ba..894d23541aa 100644
--- a/test/jdk/javax/net/ssl/SSLEngine/LargePacket.java
+++ b/test/jdk/javax/net/ssl/SSLEngine/LargePacket.java
@@ -101,6 +101,8 @@ public class LargePacket extends SSLEngineService {
         // send out application data
         deliver(ssle, sc);

+        ssle.closeInbound();
+
         // close the socket channel.
         sc.close();
         ssc.close();
;;;","2022-03-11 17:47;wetmore;A draft pull request has been created.

https://github.com/openjdk/jdk/pull/7796

More details to follow.

;;;","2022-03-18 11:49;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/7796
Date: 2022-03-12 00:55:07 +0000;;;","2022-04-01 16:50;wetmore;During the test development, I chose to use SSLSocketSSLEngineTemplate as the test base so that we could check that both SSLSocket and SSLEngine behavior was similar.

One code review comment was to use the flat text keystore (non-binary) that has been developed for SSLSocketTemplate/SSLEngineTemplate.  The  SSLSocketTemplate, SSLEngineTemplate and SSLSocketSSLEngineTemplate testbeds have diverged broadly (as noted in JDK-8284047), so this is not an easy fix.  There are customer requests for quick relief, so in the interest of time, I'll use the existing template, and hope someone can address JDK-8284047 for future issues. As many existing tests still use the binary keystores, so this will just be one more.

;;;","2022-04-01 17:33;dukebot;Changeset: 0b09f70a
Author:    Bradford Wetmore <wetmore@openjdk.org>
Date:      2022-04-02 00:30:48 +0000
URL:       https://git.openjdk.java.net/jdk/commit/0b09f70a730404ceb827673f1d3c82fbf495bb41
;;;","2022-09-19 13:42;goetz;Fix request [17u]

I backport this for parity with 17.0.6-oracle.
No risk, only a test change.  -- After pushing this: I must correct myself. It touches Security code, medium risk.
Clean backport. 
SAP nightly testing passed.;;;","2022-09-19 13:58;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/695
Date: 2022-09-19 20:45:56 +0000;;;","2022-10-09 12:02;goetz;Fix request [11u]

I backport this for parity with 11.0.18-oracle.
The test fails without the fix, and passes with it.
At least medium risk, it changes an exception. But as I understand a needed fix.
I had to resolve a chunk and adapt the coding slightly.
SAP nighlty testing passed.;;;","2022-10-09 12:05;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk11u-dev/pull/1422
Date: 2022-10-09 18:58:00 +0000;;;","2022-10-19 00:02;yan;Fix request (15u)

I'd like to backport it for parity with major releases. Clean backport. Security tests run fine.;;;","2022-10-19 00:12;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk15u-dev/pull/289
Date: 2022-10-19 07:03:12 +0000;;;",,,,,,,,,,,
[11u] [JVMCI] Partial module-info.java backport of JDK-8223332,JDK-8273547,5058257,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,sgehwolf,sgehwolf,sgehwolf,2021-09-09 05:25,2021-11-03 07:16,2023-10-01 09:57,2021-09-10 06:44,11.0.12,,,,,,,11.0.14,hotspot,,0,16-na,17-na,18-na,jdk11u-fix-request,jdk11u-fix-yes,jvmci,oracle-triage-18,,,,,,,,,,,,,,,"JDK-8223332 updated JVMCI in jdk head (JDK 13 timeframe). That rather large patch includes some module-info.java updates for the jdk.internal.vm.ci module so as to export the 'code' package to the jdk.internal.vm.compiler module.

This module export is needed for using native-image (the binary over the launcher script) of Graal VM with OpenJDK 11.

See also: https://github.com/graalvm/mandrel/issues/234

Rather than backporting the large patch of  JDK-8223332 to a stable updates release I propose to only backport the module-info.java changes so as to reduce risk.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8223332,,,,,,,,,,,,,,,generic,,,,,,,,,generic,,,,,"0|i2ual7:",9223372036854775807,b01,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2021-09-10 03:37;sgehwolf;Fix Request (OpenJDK 11u):

Please approve this tiny module-info.java change which allows for running mandrel's native-image in native mode. For that the extra export to the jdk.internal.vm.compiler module are needed. Change should be low risk, JVMCI-only change. Tested with jvmci tests, bootstrap test and manual reproducer from mandrel. Patch has been reviewed by Christoph Langer.

RFR: https://git.openjdk.java.net/jdk11u-dev/pull/318;;;","2021-09-10 06:44;roboduke;Changeset: bfb52f28
Author:    Severin Gehwolf <sgehwolf@openjdk.org>
Date:      2021-09-10 13:38:30 +0000
URL:       https://git.openjdk.java.net/jdk11u-dev/commit/bfb52f28c8ceaa199de5b06d23e60376038f3420
;;;","2021-11-03 07:09;roboduke;Changeset: bfb52f28
Author:    Severin Gehwolf <sgehwolf@openjdk.org>
Date:      2021-09-10 13:38:30 +0000
URL:       https://git.openjdk.java.net/jdk11u/commit/bfb52f28c8ceaa199de5b06d23e60376038f3420
;;;",,,,,,,,,,,,,,,,,,,,,,,
DecimalFormat documentation contains literal HTML character references,JDK-8273546,5058224,Bug,Closed,JDK,JDK,software,duke,,,P5,Fixed,naoto,webbuggrp,webbuggrp,2021-09-08 17:51,2021-10-11 21:23,2023-10-01 09:57,2021-09-23 05:50,16,,,,,,,18,core-libs,,0,additional-information-received,dcsaw,noreg-doc,starter-bug,webbug,,,,,,,,,,,,,,,,,"A DESCRIPTION OF THE PROBLEM :
https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/text/DecimalFormat.html

Contains multiple literal HTML character references instead of the respective character. Open the documentation in the browser and search for ""&#"" (without quotes).
A similar issue for the documentation of ServiceLoader was solved by using the U+XXXX notation, see JDK-8261306.

---

Slightly related (in case you want to fix that as well):
Javadoc for BigInteger also contains several times ""<sup>"" inside a ""{@code ...}"" inline tag, which would end up literally in the rendered output as well. However, that seems to affect only internal methods and is not visible in the publicly facing documentation.



",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,generic,,,,,,,,,generic,,,,,"0|i2uadv:",9223372036854775807,b17,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6fc9e792,,,,,,,Verified,,"2021-09-09 05:06;tongwan;Several '&#"" are found in the document.;;;","2021-09-23 05:50;roboduke;Changeset: c4345285
Author:    Naoto Sato <naoto@openjdk.org>
Date:      2021-09-23 12:48:49 +0000
URL:       https://git.openjdk.java.net/jdk/commit/c43452859d7211f0d6537d71bd0df89412d4ff6f
;;;","2021-10-09 23:05;tongwan;Requested the submitter review the fix, https://git.openjdk.java.net/jdk/commit/c43452859d7211f0d6537d71bd0df89412d4ff6f;;;","2021-10-11 21:23;tongwan;From the submitter:
I have checked https://download.java.net/java/early_access/jdk18/docs/api/java.base/java/text/DecimalFormat.html (for DRAFT 18-ea+18-1093) and the changes look good.;;;",,,,,,,,,,,,,,,,,,,,,,
Increase test coverage for snippets,JDK-8273544,5058255,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,prappo,prappo,prappo,2021-09-09 04:56,2021-11-25 00:27,2023-10-01 09:57,2021-11-19 12:52,18,,,,,,,18,tools,,0,review-requested,,,,,,,,,,,,,,,,,,,,,JDK-8266666 was undercovered. Test coverage should be increased.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2uakr:",9223372036854775807,b25,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@7900061a,,,,,,,,,"2021-11-19 12:52;roboduke;Changeset: 2ab43ec2
Author:    Pavel Rappo <prappo@openjdk.org>
Date:      2021-11-19 20:51:22 +0000
URL:       https://git.openjdk.java.net/jdk/commit/2ab43ec2428edaebfe9a7fb0e716ff7141a28de0
;;;",,,,,,,,,,,,,,,,,,,,,,,,,
Cleaner Thread creates with normal priority instead of MAX_PRIORITY - 2,JDK-8273541,5058252,Bug,Closed,JDK,JDK,software,duke,,,P4,Fixed,redestad,alanb,alanb,2021-09-09 03:31,2022-04-28 04:16,2023-10-01 09:57,2021-09-10 07:15,17,,,,,,,18,core-libs,,0,jdk11u-fix-request,jdk11u-fix-yes,oracle-bake,regression,,,,,,,,,,,,,,,,,,JDK-8261036 seems to have introduced a regression when refactoring the cleaner code.,,,,,,,,,,,JDK-8273893,,,,,,,,,,,,,,,,,,,,,JDK-8273557,,,,,,,,JDK-8261036,,,,,,,,,,,,,,,,,17,,,,,,,"0|i2uak3:",9223372036854775807,b15,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4c088d55,,,,,,,,,"2021-09-10 07:15;roboduke;Changeset: 4e6de5f9
Author:    kabutz <heinz@javaspecialists.eu>
Committer: Claes Redestad <redestad@openjdk.org>
Date:      2021-09-10 14:13:59 +0000
URL:       https://git.openjdk.java.net/jdk/commit/4e6de5f9defc031158e027bcbbaf6232b8c03d60
;;;","2021-09-15 09:15;mdoerr;Fix Request (11u):
Follow-up for JDK-8261036. See my ""Fix Request"" comment there. Applies cleanly.;;;",,,,,,,,,,,,,,,,,,,,,,,,
[PPC64] gtest build error after JDK-8264207,JDK-8273539,5058250,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,mdoerr,mdoerr,mdoerr,2021-09-09 02:22,2021-09-15 20:04,2023-10-01 09:57,2021-09-09 03:49,18,,,,,,,18,hotspot,,0,,,,,,,,,,,,,,,,,,,,,,"In file included from jdk/src/hotspot/share/asm/assembler.hpp:450,
                 from jdk/src/hotspot/share/asm/macroAssembler.hpp:28,
                 from jdk/test/hotspot/gtest/code/test_codestrings.cpp:29:
jdk/src/hotspot/cpu/ppc/assembler_ppc.hpp:1608:15: error: inline function 'void Assembler::nop()' used but never defined [-Werror]
   inline void nop();
               ^~~

""assembler_ppc.inline.hpp"" is not included in ""test_codestrings.cpp"".",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8264207,,,,,,,,,,,,,,,ppc,,,,,,,,,,,,,,"0|i2uajn:",9223372036854775807,b15,,,,,,,,,,,,"2021-09-09 03:49;roboduke;Changeset: f6cc1732
Author:    Martin Doerr <mdoerr@openjdk.org>
Date:      2021-09-09 10:48:02 +0000
URL:       https://git.openjdk.java.net/jdk/commit/f6cc1732f47672cea413fa842c4f106c1314c626
;;;",,,,,,,,,,,,,,,,,,,,,,,,,
Avoid ByteArrayOutputStream.toByteArray when converting stream to String,JDK-8273528,5058238,Bug,Resolved,JDK,JDK,software,duke,,,P5,Fixed,aturbanov,aturbanov,aturbanov,2021-09-08 23:56,2021-09-15 20:05,2023-10-01 09:57,2021-09-09 14:50,16,17,18,,,,,18,client-libs,,0,,,,,,,,,,,,,,,,,,,,,,Using ByteArrayOutputStream.toString to convert its content to a String is cleaner than new String(out.toByteArray()). Also it's a bit faster because of one less array copy.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2uagz:",9223372036854775807,b15,,,,,,,,,,,,"2021-09-09 14:50;roboduke;Changeset: 2e321dc7
Author:    Andrey Turbanov <turbanoff@gmail.com>
Committer: Sergey Bylokhov <serb@openjdk.org>
Date:      2021-09-09 21:47:59 +0000
URL:       https://git.openjdk.java.net/jdk/commit/2e321dc782e0de9995b1772e4cee9c0304bc183d
;;;",,,,,,,,,,,,,,,,,,,,,,,,,
java/util/DoubleStreamSums/CompensatedSums.java failure,JDK-8273514,5058216,Bug,Resolved,JDK,JDK,software,duke,,,P2,Fixed,igraves,dcubed,dcubed,2021-09-08 15:49,2021-12-09 04:52,2023-10-01 09:57,2021-09-15 06:08,18,,,,,,,18,core-libs,,0,jdk11u-fix-request,jdk11u-fix-yes,jdk17u-fix-request,jdk17u-fix-SQE-ok-next,jdk17u-fix-yes,testbug,tier1,ursqe-triaged,,,,,,,,,,,,,,"The following test failed in the JDK18 CI:

java/util/DoubleStreamSums/CompensatedSums.java

Here's a snippet from the log file:

#section:testng
----------messages:(5/148)----------
command: testng CompensatedSums
reason: User specified action: run testng CompensatedSums 
Mode: agentvm
Agent id: 11
elapsed time (seconds): 7.298
----------configuration:(14/1604)----------
Boot Layer
  class path: /opt/mach5/mesos/work_dir/jib-master/install/jtreg/6/1/bundles/jtreg-6+1.zip/jtreg/lib/javatest.jar 
              /opt/mach5/mesos/work_dir/jib-master/install/jtreg/6/1/bundles/jtreg-6+1.zip/jtreg/lib/jtreg.jar 
              /opt/mach5/mesos/work_dir/jib-master/install/jtreg/6/1/bundles/jtreg-6+1.zip/jtreg/lib/junit.jar 
              /opt/mach5/mesos/work_dir/jib-master/install/jtreg/6/1/bundles/jtreg-6+1.zip/jtreg/lib/hamcrest.jar 
              /opt/mach5/mesos/work_dir/jib-master/install/jtreg/6/1/bundles/jtreg-6+1.zip/jtreg/lib/testng.jar 
              /opt/mach5/mesos/work_dir/jib-master/install/jtreg/6/1/bundles/jtreg-6+1.zip/jtreg/lib/jcommander.jar 
              /opt/mach5/mesos/work_dir/jib-master/install/jtreg/6/1/bundles/jtreg-6+1.zip/jtreg/lib/guice.jar 
  patch:      java.base /opt/mach5/mesos/work_dir/slaves/ff806ead-2cac-495d-9cbc-62116f99bf14-S14152/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/0aca7fce-f9c3-4f63-b471-a1c61ff4c32a/runs/3e6ae3e0-c791-4f37-8ca8-cf8029e465ca/testoutput/test-support/jtreg_open_test_jdk_tier1_part2/patches/java.base

Test Layer
  class path: /opt/mach5/mesos/work_dir/slaves/ff806ead-2cac-495d-9cbc-62116f99bf14-S14152/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/0aca7fce-f9c3-4f63-b471-a1c61ff4c32a/runs/3e6ae3e0-c791-4f37-8ca8-cf8029e465ca/testoutput/test-support/jtreg_open_test_jdk_tier1_part2/classes/5/java/util/DoubleStreamSums/CompensatedSums.d
              /opt/mach5/mesos/work_dir/jib-master/install/jdk-18+14-758/src.full/open/test/jdk/java/util/DoubleStreamSums

----------rerun:(29/5062)*----------

<snip>

----------System.out:(45/2917)----------
test CompensatedSums.testCompensatedSums(): failure
java.lang.AssertionError: expected [0.0] but found [3.1554436208840472E-30]
	at org.testng.Assert.fail(Assert.java:99)
	at org.testng.Assert.failNotEquals(Assert.java:1037)
	at org.testng.Assert.assertEquals(Assert.java:701)
	at org.testng.Assert.assertEquals(Assert.java:712)
	at CompensatedSums.testCompensatedSums(CompensatedSums.java:90)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:132)
	at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:599)
	at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:174)
	at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
	at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:822)
	at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:147)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
	at org.testng.TestRunner.privateRun(TestRunner.java:764)
	at org.testng.TestRunner.run(TestRunner.java:585)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:384)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:378)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:337)
	at org.testng.SuiteRunner.run(SuiteRunner.java:286)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1218)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1140)
	at org.testng.TestNG.runSuites(TestNG.java:1069)
	at org.testng.TestNG.run(TestNG.java:1037)
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:94)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at com.sun.javatest.regtest.agent.MainActionHelper$AgentVMRunnable.run(MainActionHelper.java:312)
	at java.base/java.lang.Thread.run(Thread.java:833)

===============================================
java/util/DoubleStreamSums/CompensatedSums.java
Total tests run: 1, Passes: 0, Failures: 1, Skips: 0
===============================================

----------System.err:(12/714)----------
java.lang.Exception: failures: 1
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:96)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at com.sun.javatest.regtest.agent.MainActionHelper$AgentVMRunnable.run(MainActionHelper.java:312)
	at java.base/java.lang.Thread.run(Thread.java:833)

JavaTest Message: Test threw exception: java.lang.Exception
JavaTest Message: shutting down test

result: Failed. Execution failed: `main' threw exception: java.lang.Exception: failures: 1",,,,,,,,,,,JDK-8278495,JDK-8275117,JDK-8274017,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8214761,,,,,,,,,,,,,,,,,,,,,,,,"0|i2uac3:",9223372036854775807,b15,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@38ded199,,,,,,,,,"2021-09-08 16:48;rriggs;Can you take a look at this recent failure?;;;","2021-09-15 06:08;roboduke;Changeset: f531b5c7
Author:    Ian Graves <igraves@openjdk.org>
Date:      2021-09-15 13:08:15 +0000
URL:       https://git.openjdk.java.net/jdk/commit/f531b5c79633a12efa56c55366e0b7196350e896
;;;","2021-12-08 08:42;goetz;Fix request [11u]

I backport this for parity with 11.0.15-oracle.
No risk, only a test change.
Clean backport.
Test passes.  SAP nightly tests pass.;;;",,,,,,,,,,,,,,,,,,,,,,,
Make java.io.FilterInputStream specification more precise about overrides,JDK-8273513,5058214,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,bpb,bpb,bpb,2021-09-08 13:43,2021-09-20 12:53,2023-10-01 09:57,2021-09-13 10:51,18,,,,,,,18,core-libs,,0,noreg-doc,,,,,,,,,,,,,,,,,,,,,"The class level specification of FilterInputStream states

""The class FilterInputStream itself simply overrides all methods of InputStream with versions that pass all requests to the contained input stream.""

which is no longer true.",,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8273517,,,,,,,,JDK-8255878,,,,,,,,,,,,,,,generic,,,,,,,,,generic,,,,,"0|i2uabn:",9223372036854775807,b15,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@5f132e58,,,,,,,,,"2021-09-13 10:51;roboduke;Changeset: 6cf5079d
Author:    Brian Burkhalter <bpb@openjdk.org>
Date:      2021-09-13 17:50:10 +0000
URL:       https://git.openjdk.java.net/jdk/commit/6cf5079d8e789c82646a3e16b1763e2c7646d400
;;;",,,,,,,,,,,,,,,,,,,,,,,,,
Fix the copyright header of x86 macroAssembler files,JDK-8273512,5058212,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,sviswanathan,sviswanathan,sviswanathan,2021-09-08 13:05,2021-09-27 23:01,2023-10-01 09:57,2021-09-10 08:40,11,17,18,,,,,18,hotspot,,0,hs-comp-triaged,oracle-triage-11,oracle-triage-17,oracle-triage-18,,,,,,,,,,,,,,,,,,Fix the copyright header of x86 macroAssembler files to match others.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,x86,,,,,,,,,,,,,,"0|i2uab7:",9223372036854775807,b15,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2021-09-08 18:22;dlong;ILW = MLH = P4;;;","2021-09-10 08:40;roboduke;Changeset: e58c12e6
Author:    Sandhya Viswanathan <sviswanathan@openjdk.org>
Date:      2021-09-10 15:39:48 +0000
URL:       https://git.openjdk.java.net/jdk/commit/e58c12e61828485bfffbc9d1b865302b93a94158
;;;",,,,,,,,,,,,,,,,,,,,,,,,
java Robot API did the 'm' keypress and caused /awt/event/KeyEvent/KeyCharTest/KeyCharTest.html is timing out on macOS 12,JDK-8273506,5058205,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,kizune,prr,prr,2021-09-08 10:05,2023-02-02 03:45,2023-10-01 09:57,2022-05-03 10:10,16,17,18,8,,,,19,client-libs,,0,jdk17u-fix-request,jdk17u-fix-yes,macos,macos12,sn_102,sn_103,sn_105,sn_106,sn_107,sn_116,sn_117,test_sprint,,,,,,,,,,"Historically this closed test has been a bit flaky but it is timing out here on macOS 12 for some reason that needs investigating.

The test runs through sending keypressed and keyreleased events to a window for keycodes 32 to 127.
When it reaches keycode 77, the test slows down so that every event sent causes a 10 seconds delay.

Robot.waitForIdle() now seems to think that it has to wait for what seems like just over 10000 ms between every subsequent keypress/release 

Not coincidentally waitForIdle calls Toolkit.realSync(10000) where 10000 come from SunToolkit.DEFAULT_WAIT_TIME.

It isn't clear from what I see on screen what is happening.
It doesn't look like focus is lost and indeed explicitly giving focus to *any* window on the desktop gets things going again.

But without some such kick 20 seconds per iteration will exceed the 240 second time out before the test finishes. 

It needs debugging as to 
1) What keycode 77 does to provoke this
2) what is Robot doing in those 10 seconds

",,,,,,,,,,,JDK-8290151,JDK-8290213,JDK-8290950,,,,,,,,,,,,,,,,,JDK-8283729,,JDK-8273520,JDK-8276074,JDK-8290057,,,,,,JDK-8301013,,,,,,,,,,,,,,,,,,,os_x,,,,,"0|i2ua9n:",9223372036854775807,b21,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@5a9b3fd3,,,,,,,,,"2021-09-08 10:58;prr;If we need to do any updates to the test, we should consider
1) making it a main program test
2) Opening it
3) Making it smarter about what keys it tests. F11 on my mac hides all windows so you need to turn off short cuts
4) Just getting rid of the test or explaining exactly why it is more use than annoyance ... ;;;","2021-09-26 10:41;pbansal;I also see the same outcome. If I remove the key 'm', the test works fine without any issue. With letter 'm', it fails almost certainly.
;;;","2021-11-28 23:26;pbansal;I have seen on macOS 12 machine that pressing 'm' key with keyboard does not cause any issue as such. So the issue was reproducible only if Robot API did the 'm' keypress. I was not able to find the root cause of this behaviour with Robot API.;;;","2022-04-19 13:45;kizune;The reason for this failure is in combination of factors:
1. This test issues a key press/key release events for all the keys in a range from 0x20 to 0x7F. Some of that key events (notably 0x28 - VK_DOWN) when submitted trough CGEventPost in native Robot peer trigger setting an extended event flags in the global system event queue. This means that until these flags are reset all key presses are treated by the system as if corresponding modifiers are set. One of such modifiers is kCGEventFlagMaskSecondaryFn and this means that system processes subsequent key events as if the Function key on apple keyboard is in pressed state.
2. That was not a problem before Mac OS X 12 because Function key status did not cause any functional difference (pun not intended) so we could just ignore it. But since OS X 12 new keyboard shortcuts were added like Fn+m, which transfers focus to the Mac OS X system menubar (Apple menu becomes selected) which affects the logic of the test and all the tests that are run within the same VM since flags are set in the global event queue and unless they are accidentally refreshed as a side effect by some mouse or keyboard event they might affect keyboard interaction in other tests too.

The idea of the fix is to detect this flag and reset it for every keyboard event we generate. Since we do not have any ability to press Function key from the AWT Robot directly - there's no key that is mapped into the Apple Function key in AWT - this should not cause any problem with the Robot based tests. At least i ran all the headful tests on both Mac OS X 11 and 12 and everything passed on both platforms.;;;","2022-04-20 10:09;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/8320
Date: 2022-04-20 17:04:09 +0000;;;","2022-05-03 10:10;dukebot;Changeset: 39e50c2d
Author:    Alexander Zuev <kizune@openjdk.org>
Date:      2022-05-03 17:08:17 +0000
URL:       https://git.openjdk.java.net/jdk/commit/39e50c2d6900d73ab7ac8604b79ca2b6e0661056
;;;","2022-07-21 10:42;goetz;Fix request [17u]

I backport this for parity with 17.0.5-oracle.
Clean backport.
SAP nightly testing passed.;;;","2022-07-21 10:52;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/580
Date: 2022-07-21 17:43:57 +0000;;;",,,,,,,,,,,,,,,,,,
runtime/cds/appcds/loaderConstraints/DynamicLoaderConstraintsTest.java#default-cl crashed with SIGSEGV in MetaspaceShared::link_shared_classes,JDK-8273505,5058203,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,ccheung,dcubed,dcubed,2021-09-08 08:54,2022-06-02 08:35,2023-10-01 09:57,2021-09-20 10:03,18,,,,,,,18,hotspot,,0,cds,intermittent,jdk17u-fix-request,jdk17u-fix-yes,tier8,,,,,,,,,,,,,,,,,"The following test crashed in the JDK18 CI:

runtime/cds/appcds/loaderConstraints/DynamicLoaderConstraintsTest.java#default-cl

Here's a snippet from the log file:

[148.932s][info][class,loader,constraints] purging loader MyClassLoader @1ddc4ec2 from constraint for name com/sun/net/httpserver/HttpExchange
[148.932s][info][class,loader,constraints] new loader list:
[148.932s][info][class,loader,constraints]     [0]: 'platform'
[148.932s][info][class,loader,constraints] purging complete constraint for name com/sun/net/httpserver/HttpExchange
#
# A fatal error has been detected by the Java Runtime Environment:
#
#  SIGSEGV (0xb) at pc=0x0000000110d51227, pid=89224, tid=8963
#
# JRE version: Java(TM) SE Runtime Environment (18.0+14) (fastdebug build 18-ea+14-700)
# Java VM: Java HotSpot(TM) 64-Bit Server VM (fastdebug 18-ea+14-700, compiled mode, sharing, tiered, compressed class ptrs, g1 gc, bsd-amd64)
# Problematic frame:
# V  [libjvm.dylib+0xd51227]  MetaspaceShared::link_shared_classes(JavaThread*)+0x1d7
#
# Core dump will be written. Default location: core.89224
#
# An error report file with more information is saved as:
# /mesos/work_dir/slaves/369e65c9-433d-40ff-b6a0-b4e65701097a-S4971/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/ab5006d0-0738-44c0-80b4-bf4d6f6ec0b2/runs/887fb39d-d2e0-4453-86af-e0b2edea301c/testoutput/test-support/jtreg_open_test_hotspot_jtreg_hotspot_runtime/scratch/0/hs_err_pid89224.log
#
# If you would like to submit a bug report, please visit:
#   https://bugreport.java.com/bugreport/crash.jsp
#
];
 stderr: []
 exitValue = 134

java.lang.RuntimeException: Expected to get exit value of [0]

	at jdk.test.lib.process.OutputAnalyzer.shouldHaveExitValue(OutputAnalyzer.java:489)
	at jdk.test.lib.cds.CDSTestUtils$Result.assertNormalExit(CDSTestUtils.java:195)
	at DynamicLoaderConstraintsTest.doTest(DynamicLoaderConstraintsTest.java:140)
	at DynamicLoaderConstraintsTest.doTest(DynamicLoaderConstraintsTest.java:98)
	at DynamicArchiveTestBase.runTest(DynamicArchiveTestBase.java:74)
	at DynamicLoaderConstraintsTest.main(DynamicLoaderConstraintsTest.java:89)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at com.sun.javatest.regtest.agent.MainWrapper$MainThread.run(MainWrapper.java:127)
	at java.base/java.lang.Thread.run(Thread.java:833)

JavaTest Message: Test threw exception: java.lang.RuntimeException: Expected to get exit value of [0]

JavaTest Message: shutting down test

STATUS:Failed.`main' threw exception: java.lang.RuntimeException: Expected to get exit value of [0]
----------rerun:(49/11225)*----------


Here's the crashing thread's stack:

---------------  T H R E A D  ---------------

Current thread (0x00007fe665daf220):  JavaThread ""DestroyJavaVM"" [_thread_in_vm, id=8963, stack(0x0000000111986000,0x0000000111a86000)]

Stack: [0x0000000111986000,0x0000000111a86000],  sp=0x0000000111a85bc0,  free space=1022k
Native frames: (J=compiled Java code, j=interpreted, Vv=VM code, C=native code)
V  [libjvm.dylib+0xd51227]  MetaspaceShared::link_shared_classes(JavaThread*)+0x1d7
V  [libjvm.dylib+0x67813c]  DynamicArchive::prepare_for_dynamic_dumping()+0x3c
V  [libjvm.dylib+0x104636a]  JavaThread::invoke_shutdown_hooks()+0x3a
V  [libjvm.dylib+0x104659d]  Threads::destroy_vm()+0x1bd
V  [libjvm.dylib+0x970ae3]  jni_DestroyJavaVM+0x163
C  [libjli.dylib+0x51c0]  JavaMain+0xc20
C  [libjli.dylib+0x7649]  ThreadJavaMain+0x9
C  [libsystem_pthread.dylib+0x3661]  _pthread_body+0x154
C  [libsystem_pthread.dylib+0x350d]  _pthread_body+0x0
C  [libsystem_pthread.dylib+0x2bf9]  thread_start+0xd


siginfo: si_signo: 11 (SIGSEGV), si_code: 0 (unknown), si_addr: 0x0000000000000000
",,,,,,,,,,,JDK-8275285,,,,,,,,,,,,,,,,,,,,,,,,JDK-8273109,,,,,JDK-8274753,,,,,,,,,,x86_64,,,,,,,,,os_x,,,,,"0|i2ua97:",9223372036854775807,b16,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,,,"2021-09-09 10:40;ccheung;Initial core dump analysis using lldb:

call stack:
(lldb) bt
* thread #4, stop reason = signal SIGSTOP
    frame #0: 0x00007fff682bcb66 libsystem_kernel.dylib`__pthread_kill + 10
    frame #1: 0x00007fff68487080 libsystem_pthread.dylib`pthread_kill + 333
    frame #2: 0x00007fff682181ae libsystem_c.dylib`abort + 127
    frame #3: 0x0000000110e11c21 libjvm.dylib`os::abort(dump_core=true, siginfo=<unavailable>, context=<unavailable>) at os_posix.cpp:1971:5 [opt]
    frame #4: 0x00000001110e78ec libjvm.dylib`VMError::report_and_die(id=11, message=<unavailable>, detail_fmt=""%s"", detail_args=0x0000000111a85700, thread=0x00007fe665daf220, pc=""D\x8bs\fE\x85?A??H\x8b\x03H\x89??\x90\x10\x01"", siginfo=0x0000000111a85aa0, context=0x0000000111a85b08, filename=0x0000000000000000, lineno=0, size=0) at vmError.cpp:1646:7 [opt]
    frame #5: 0x00000001110e6cf5 libjvm.dylib`VMError::report_and_die(thread=<unavailable>, sig=<unavailable>, pc=<unavailable>, siginfo=<unavailable>, context=<unavailable>, detail_fmt=<unavailable>) at vmError.cpp:1320:3 [opt]
    frame #6: 0x00000001110e7a41 libjvm.dylib`VMError::report_and_die(thread=<unavailable>, sig=<unavailable>, pc=<unavailable>, siginfo=<unavailable>, context=<unavailable>) at vmError.cpp:1326:3 [opt]
    frame #7: 0x0000000110f2af45 libjvm.dylib`::JVM_handle_bsd_signal(sig=11, info=0x0000000111a85aa0, ucVoid=0x0000000111a85b08, abort_if_unrecognized=1) at signals_posix.cpp:661:5 [opt]
    frame #8: 0x00007fff6847af5a libsystem_platform.dylib`_sigtramp + 26
    frame #9: 0x0000000110d51228 libjvm.dylib`MetaspaceShared::link_shared_classes(JavaThread*) [inlined] Klass::layout_helper(this=0xbabababababababa) const at klass.hpp:273:49 [opt]
    frame #10: 0x0000000110d51227 libjvm.dylib`MetaspaceShared::link_shared_classes(JavaThread*) [inlined] Klass::is_instance_klass(this=0xbabababababababa) const at klass.hpp:598 [opt]
  * frame #11: 0x0000000110d51227 libjvm.dylib`MetaspaceShared::link_shared_classes(__the_thread__=<unavailable>) at metaspaceShared.cpp:663 [opt]
    frame #12: 0x000000011067813c libjvm.dylib`DynamicArchive::prepare_for_dynamic_dumping() at dynamicArchive.cpp:358:3 [opt]
    frame #13: 0x000000011104636a libjvm.dylib`JavaThread::invoke_shutdown_hooks(this=0x00007fe665daf220) at thread.cpp:3282:5 [opt]
    frame #14: 0x000000011104659d libjvm.dylib`Threads::destroy_vm() at thread.cpp:3368:11 [opt]
    frame #15: 0x0000000110970ae3 libjvm.dylib`::jni_DestroyJavaVM(JavaVM *) [inlined] jni_DestroyJavaVM_inner(vm=<unavailable>) at jni.cpp:3758:3 [opt]
    frame #16: 0x0000000110970984 libjvm.dylib`::jni_DestroyJavaVM(vm=<unavailable>) at jni.cpp:3770 [opt]
    frame #17: 0x000000010df641c0 libjli.dylib`JavaMain(_args=<unavailable>) at java.c:0 [opt]
    frame #18: 0x000000010df66649 libjli.dylib`ThreadJavaMain(args=<unavailable>) at java_md_macosx.m:722:29 [opt]
    frame #19: 0x00007fff68484661 libsystem_pthread.dylib`_pthread_body + 340
    frame #20: 0x00007fff6848450d libsystem_pthread.dylib`_pthread_start + 377
    frame #21: 0x00007fff68483bf9 libsystem_pthread.dylib`thread_start + 13

(lldb) f 11
frame #11: 0x0000000110d51227 libjvm.dylib`MetaspaceShared::link_shared_classes(__the_thread__=<unavailable>) at metaspaceShared.cpp:663 [opt]
(lldb) fr v
(JavaThread *) __the_thread__ = <variable not available>

(ResourceMark) rm = {
  _impl = {
    _area = 0x00007fe6633d82a0
    _saved_state = {
      _chunk = 0x00007fe660800020
      _hwm = 0x00007fe660800038 ""??b^
      _max = 0x00007fe660800410 ""????????????????4453-86af-e0b2edea301c/testoutput/test-support/jtreg_open_test_hotspot_jtreg_hotspot_runtime/classes/4/test/hotspot/jtreg/runtime/cds/appcds:/mesos/work_dir/jib-master/install/jdk-18+14-700/src.full/open/test/hotspot/jtreg/runtime/cds/appcds:/mesos/work_dir/slaves/369e65c9-433d-40ff-b6a0-b4e65701097a-S4971/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/ab5006d0-0738-44c0-80b4-bf4d6f6ec0b2/runs/887fb39d-d2e0-4453-86af-e0b2edea301c/testoutput/test-support/jtreg_""
      _size_in_bytes = 984
      _nesting = 1
    }
  }
  _thread = 0x00007fe665daf220
  _previous_resource_mark = 0x0000000111a85ca0
}
(CollectCLDClosure) collect_cld = {
  _loaded_cld = {
    GrowableArrayWithAllocator<ClassLoaderData *, GrowableArray<ClassLoaderData *> > = {
      GrowableArrayView<ClassLoaderData *> = {
        GrowableArrayBase = {
          ResourceObj = {
            _allocation_t = ([0] = 18446744069118338023, [1] = 0)
          }
          _len = 131
          _max = 256
        }
        _data = 0x00007fe65ecd7638
      }
    }
    _metadata = {
      _bits = 0
      _nesting_check = (_nesting = 2)
    }
  }
}
(bool) has_linked = false
(int) i = 110
(ClassLoaderData *) cld = <variable not available>

(Klass *) klass = 0xbabababababababa

So it looks like klass is an invalid pointer in the following function:

void MetaspaceShared::link_shared_classes(TRAPS) {
  // Collect all loaded ClassLoaderData.
  ResourceMark rm;

  LambdaFormInvokers::regenerate_holder_classes(CHECK);
  CollectCLDClosure collect_cld;
  {
    // ClassLoaderDataGraph::loaded_cld_do requires ClassLoaderDataGraph_lock.
    // We cannot link the classes while holding this lock (or else we may run into deadlock).
    // Therefore, we need to first collect all the CLDs, and then link their classes after
    // releasing the lock.
    MutexLocker lock(ClassLoaderDataGraph_lock);
    ClassLoaderDataGraph::loaded_cld_do(&collect_cld);
  }

  while (true) {
    bool has_linked = false;
    for (int i = 0; i < collect_cld.nof_cld(); i++) {
      ClassLoaderData* cld = collect_cld.cld_at(i);
      for (Klass* klass = cld->klasses(); klass != NULL; klass = klass->next_link()) {
        if (klass->is_instance_klass()) {            <<<< crashes here
          InstanceKlass* ik = InstanceKlass::cast(klass);
          if (may_be_eagerly_linked(ik)) {
            has_linked |= link_class_for_cds(ik, CHECK);
          }
        }
      }
    }

    if (!has_linked) {
      break;
    }
    // Class linking includes verification which may load more classes.
    // Keep scanning until we have linked no more classes.
  }
};;;","2021-09-09 10:54;iklam;I think the problem may be that the cld has been garbage collected. [~coleenp] any suggestions?;;;","2021-09-09 13:25;coleenp;Oh yeah, that doesn't seem safe.
The classes are kept alive during the CLDG iteration but anything can happen afterwards, and since link_class_for_cds can safepoint, we can't really put an NSV around so that there isn't a handshake making cld memory go away.

You could try creating a sibling growable array of Handle(cld->holder()), that keeps the CLD alive while this is linking it.;;;","2021-09-10 16:53;ccheung;[~coleenp] Do you mean the following?

diff --git a/src/hotspot/share/cds/metaspaceShared.cpp b/src/hotspot/share/cds/metaspaceShared.cpp
index a67450cb122..4b77f495636 100644
--- a/src/hotspot/share/cds/metaspaceShared.cpp
+++ b/src/hotspot/share/cds/metaspaceShared.cpp
@@ -584,6 +584,7 @@ void VM_PopulateDumpSharedSpace::doit() {
 
 class CollectCLDClosure : public CLDClosure {
   GrowableArray<ClassLoaderData*> _loaded_cld;
+  GrowableArray<Handle> _loaded_cld_handles; // keep the CLDs alive
 public:
   CollectCLDClosure() {}
   ~CollectCLDClosure() {
@@ -596,6 +597,7 @@ public:
     if (!cld->is_unloading()) {
       cld->inc_keep_alive();
       _loaded_cld.append(cld);
+      _loaded_cld_handles.append(Handle(Thread::current(), cld->holder_phantom()));
     }
   };;;","2021-09-14 11:25;mseledtsov;ILW = HLM = P3;;;","2021-09-14 12:05;coleenp;I'm looking at this again.  If there's an inc_keep_alive() I don't know why the class loader is being unloaded.;;;","2021-09-14 16:47;ccheung;(lldb) p *collect_cld._loaded_cld._data[110]
(ClassLoaderData) $4 = {
  _holder = {
    _obj = 0xbabababababababa
  }
  _class_loader = {
    _obj = 0xabababababababab
  }
  _metaspace = 0x001cabababababab
  _metaspace_lock = 0xabababababababab
  _unloading = true
  _has_class_mirror_holder = true
  _modified_oops = true
  _keep_alive = -1414812757
  _claim = 64
  _handles = {
    _head = 0x0000000000000000
  }
  _dependency_count = -1162167622
  _klasses = 0xbabababababababa
  _packages = 0xbabababababababa
  _modules = 0xbabababababababa
  _unnamed_module = 0xbabababababababa
  _dictionary = 0xbabababababababa
  _jmethod_ids = 0xbabababababababa
  _deallocate_list = 0xbabababababababa
  _next = 0xabababababababab
  _class_loader_klass = 0x0023abababababab
  _name = 0xabababababababab
  _name_and_id = 0xabababababababab
  _trace_id = 64
}

The cld was unloaded.;;;","2021-09-20 10:02;roboduke;Changeset: a67f0f9d
Author:    Calvin Cheung <ccheung@openjdk.org>
Date:      2021-09-20 16:56:32 +0000
URL:       https://git.openjdk.java.net/jdk/commit/a67f0f9dc04200c22db05e277346f24d31306b53
;;;","2021-10-13 07:53;hseigel;Fix Request (17u)

Backporting this bug fix would fix the above issue and also simplify backporting the fixes for JDK-8274935 and JDK-8274753.  The patch is small and applied cleanly except that function MetaspaceShared::link_shared_classes() is called MetaspaceShared::link_and_cleanup_shared_classes() in JDK-17u. The backport was tested with Mach5 tiers 1-2 on Linux, Mac OS, and Windows, and Mach5 tiers 3-5 on Linux x64.

Review of the fix: https://github.com/openjdk/jdk17u/pull/187
;;;",,,,,,,,,,,,,,,,,
compiler/c2/Test7179138_1.java timed out,JDK-8273498,5058196,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,thartmann,dcubed,dcubed,2021-09-08 07:47,2021-10-08 02:30,2023-10-01 09:57,2021-09-09 06:55,11,17,18,,,,,18,hotspot,,0,hs-comp-triaged,jdk11u-fix-request,jdk11u-fix-yes,jdk17u-fix-request,jdk17u-fix-yes,noreg-self,oracle-triage-17,oracle-triage-18,testbug,tier6,tier7,tier8,,,,,,,,,,"The following test timed out in the JDK18 CI:

compiler/c2/Test7179138_1.java

Here's a snippet from the log file:

#section:main
----------messages:(6/513)----------
command: main -Xbatch -XX:+IgnoreUnrecognizedVMOptions -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:+StressIGVN -XX:RepeatCompilation=100 compiler.c2.Test7179138_1
reason: User specified action: run main/othervm -Xbatch -XX:+IgnoreUnrecognizedVMOptions -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:+StressIGVN -XX:RepeatCompilation=100 compiler.c2.Test7179138_1 
Mode: othervm [/othervm specified]
Timeout information:
--- Timeout information end.
elapsed time (seconds): 1303.943
----------configuration:(0/0)----------
----------System.out:(1/28)----------
Timeout refired 1200 times
----------System.err:(0/0)----------
----------rerun:(53/5416)*----------

<snip>

result: Error. Program `c:\ade\mesos\work_dir\jib-master\install\jdk-18+14-734\windows-x64-debug.jdk\jdk-18\fastdebug\bin\java' timed out (timeout set to 1200000ms, elapsed time including timeout handling was 1303928ms).
",,,,,,,,,,,JDK-8274955,JDK-8274514,JDK-8274515,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8271341,,,,,,,,,,x86_64,,,,,,,,,linux,windows,,,,"0|i2ua7n:",9223372036854775807,b15,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2021-09-08 07:49;dcubed;The test task's JVM args for the jdk-18+14-734-tier6 sighting are:

-Xcomp -XX:+CreateCoredumpOnCrash -ea -esa -XX:CompileThreshold=100 -XX:+UnlockExperimentalVMOptions -server -XX:+TieredCompilation;;;","2021-09-08 07:52;dcubed;jdk-18+14-734-tier6 includes the following fix:

JDK-8271341 Opcode() != Op_If && Opcode() != Op_RangeCheck) || outcnt() == 2 assert failure with Test7179138_1.java

for the same test. [~roland] do you mind taking a look at this test failure?;;;","2021-09-08 08:27;thartmann;I think the problem is the newly added RepeatCompilation=100 which leads to an extrem slowdown of the test (especially with -Xcomp). Marking this as test bug.;;;","2021-09-08 08:30;thartmann;ILW = Test times out (test bug), single test with -Xcomp at tier6, no workaround = MLH = P4;;;","2021-09-08 16:01;dcubed;The test task's JVM args for jdk-18+14-738-tier6 sighting are:

-Xcomp -XX:+CreateCoredumpOnCrash -ea -esa -XX:CompileThreshold=100 -XX:+UnlockExperimentalVMOptions -server -XX:+TieredCompilation;;;","2021-09-08 17:15;dcubed;7 instances (so far) on Win-X64 in jdk-18+14-734-tier7.

This is rather noisy.;;;","2021-09-08 19:14;dcubed;jdk-18+14-734-tier7 now has a single sighting (so far) on linux-x64.
Not as noisy as win-x64, but disappointing none the less since I've
already ProblemListed the test on win-x64...;;;","2021-09-09 06:55;roboduke;Changeset: c81690d7
Author:    Tobias Hartmann <thartmann@openjdk.org>
Date:      2021-09-09 13:54:47 +0000
URL:       https://git.openjdk.java.net/jdk/commit/c81690d7166c32caff6ef3a55fe9b157049e2b56
;;;","2021-09-09 07:29;dcubed;The ProblemListing is in jdk-18+14-759.

The fix for the bug is in jdk-18+15-769.;;;","2021-09-28 23:58;thartmann;Fix request (17u):
This fixes a test bug that was introduced by JDK-8271341. The fix is low risk and has been tested in the JDK 18 for a while and with tier1-3 in JDK 17u. The patch did not apply cleanly because I had to omit the changes to the ProblemList (the test is not problem listed in JDK 17u).;;;","2021-10-07 06:32;mdoerr;Fix Request (11u):
Should get backported for parity with 11.0.14-oracle. Follow-up fix for JDK-8271341. Fix from 17u applies cleanly (not problem listed in 11u, either, see previous comment).;;;",,,,,,,,,,,,,,,
building.md should link to both md and html,JDK-8273497,5058194,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,heidinga,heidinga,heidinga,2021-09-08 07:16,2023-02-13 06:23,2023-10-01 09:57,2021-09-14 04:32,,,,,,,,18,infrastructure,,0,jdk11u-fix-request,jdk11u-fix-yes,jdk17u-fix-request,jdk17u-fix-yes,,,,,,,,,,,,,,,,,,"docs/building.md links to the testing.html file for details on running JTREG tests.  This is hard to read online.

A better link would be to the testing.md file.

",,,,,,,,,,,JDK-8297789,JDK-8302327,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2ua77:",9223372036854775807,b15,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@429c566,,,,,,,,,"2021-09-14 04:32;roboduke;Changeset: 5bfd043e
Author:    Magnus Ihse Bursie <ihse@openjdk.org>
Date:      2021-09-14 11:28:19 +0000
URL:       https://git.openjdk.java.net/jdk/commit/5bfd043e16fa79a101a1bee38c59d42d4cd69a48
;;;","2022-11-21 17:12;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/914
Date: 2022-11-22 01:04:17 +0000;;;","2022-11-28 10:00;btaylor;Fix request (17u): Documentation fix;;;","2023-02-10 13:56;clanger;Fix request (11u):
Simple documentation update to make backporting JDK-8293550 cleaner. No risk. Testing GHA and SAP nightlies.;;;","2023-02-10 13:58;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk11u-dev/pull/1717
Date: 2023-02-10 21:51:58 +0000;;;",,,,,,,,,,,,,,,,,,,,,
java.util.spi.LocaleServiceProvider spec contains statement that is too strict,JDK-8273491,5058186,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,naoto,dbessono,dbessono,2021-09-08 04:56,2021-09-20 12:54,2023-10-01 09:57,2021-09-14 05:49,,,,,,,,18,core-libs,,0,conformance,noreg-doc,,,,,,,,,,,,,,,,,,,,"Specification for java.util.spi.LocaleServiceProvider
( https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/spi/LocaleServiceProvider.html#java.locale.providers )

says:
========
The search order of locale sensitive services can be configured by using the java.locale.providers system property. This system property declares the user's preferred order for looking up the locale sensitive services separated by a comma. It is only read at the Java runtime startup, so the later call to System.setProperty() won't affect the order. 
========

However as experiments show it seems that for OpenJDK programmatic setting of System.setProperty() still affects the implementation behaviour - say if a simple program is started with 

  -Djava.locale.providers=SPI

and then the program itself calls 

  System.setProperty(""java.locale.providers"", ""CLDR,COMPAT”)

this would lead to behavior different than the expected SPI-type defined at Java runtime startup.
",,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8273577,,,,,,,,JCK-7316527,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2ua5f:",9223372036854775807,b15,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@7644fb4c,,,,,,,,,"2021-09-08 09:23;naoto;Some clarification of the spec is needed.;;;","2021-09-14 05:49;roboduke;Changeset: 31667daa
Author:    Naoto Sato <naoto@openjdk.org>
Date:      2021-09-14 12:46:08 +0000
URL:       https://git.openjdk.java.net/jdk/commit/31667daa50b2faf82943821ee02071d222e38268
;;;",,,,,,,,,,,,,,,,,,,,,,,,
"Zero: Handle ""zero"" variant in runtime tests",JDK-8273487,5058182,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,shade,shade,shade,2021-09-08 03:54,2021-10-05 00:30,2023-10-01 09:57,2021-09-09 01:08,17,18,,,,,,18,hotspot,,0,jdk17u-fix-request,jdk17u-fix-yes,redhat-interest,testbug,,,,,,,,,,,,,,,,,,"JDK-8179317 rewritten runtime shell tests to Java. There is a little omission in VM variant selection, which makes Zero fail some of the tier1 tests, like:

$ CONF=linux-x86_64-zero-fastdebug make exploded-test TEST=runtime/StackGap/TestStackGap.java

STDERR:
java.lang.Error: TESTBUG: unsupported vm variant
	at jdk.test.lib.Platform.variant(Platform.java:368)
	at jdk.test.lib.Platform.jvmLibDir(Platform.java:357)
	at jdk.test.lib.process.ProcessTools.addJvmLib(ProcessTools.java:585)
	at jdk.test.lib.process.ProcessTools.createNativeTestProcessBuilder(ProcessTools.java:575)
",,,,,,,,,,,JDK-8274759,,,,,,,,,,,,JDK-8273373,,,,,,,,,,,,JDK-8179317,,,,,JDK-8273494,,,,,,,,,,,,,,,,,,,,,,,,"0|i2ua4j:",9223372036854775807,b15,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,,,"2021-09-09 01:08;roboduke;Changeset: 8c16f485
Author:    Aleksey Shipilev <shade@openjdk.org>
Date:      2021-09-09 08:07:00 +0000
URL:       https://git.openjdk.java.net/jdk/commit/8c16f485b341ee3071c91df39dfb9ba8b9caa44d
;;;","2021-10-04 07:02;shade;Fix Request (17u)

Fixes a few remaining tests in `tier1` for Zero. Applies cleanly, tests start to pass.;;;",,,,,,,,,,,,,,,,,,,,,,,,
Zero: Handle DiagnoseSyncOnValueBasedClasses VM option,JDK-8273486,5058181,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,shade,shade,shade,2021-09-08 03:40,2022-06-13 01:04,2023-10-01 09:57,2021-09-14 01:15,17,18,,,,,,18,hotspot,,0,jdk17u-fix-request,jdk17u-fix-SQE-ok,jdk17u-fix-yes,redhat-interest,,,,,,,,,,,,,,,,,,"JDK-8257027 added a diagnostic option to check for synchronization on value-based classes. Zero does not support it, so it would fail the relevant test:

$ CONF=linux-x86_64-zero-fastdebug make exploded-test TEST=runtime/Monitor/SyncOnValueBasedClassTest.java

STDERR:
 stdout: [];
 stderr: [Exception in thread ""main"" java.lang.RuntimeException: synchronization on value based class did not fail
	at SyncOnValueBasedClassTest$FatalTest.main(SyncOnValueBasedClassTest.java:128)
]
 exitValue = 1

java.lang.RuntimeException: 'fatal error: Synchronizing on object' missing from stdout/stderr 

Template interpreters implement this check by going to to slowpath that calls InterpreterRuntime::monitorenter. Zero already goes to that path when UseHeavyMonitors is enabled, so we might just enable it when lock diagnostics is requested. This would cost us zero (pun intended) when diagnostic option is disabled.",,,,,,,,,,,JDK-8277199,JDK-8277292,,,,,,,,,,,,,,,,,,,,,,,JDK-8257027,JDK-8288282,,,,JDK-8273489,,,,,,,,,,,,,,,,,,,,,,,,"0|i2ua4b:",9223372036854775807,b15,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,,,"2021-09-14 01:15;roboduke;Changeset: 86a8e552
Author:    Aleksey Shipilev <shade@openjdk.org>
Date:      2021-09-14 08:14:35 +0000
URL:       https://git.openjdk.java.net/jdk/commit/86a8e5524ddb5e25dab54b4f56cc1b9c27d0a4a6
;;;","2021-10-01 08:06;shade;17u backporting note: the test uses UseOptoBiasInlining that is C2-specific flag and not available for Zero.;;;","2021-11-16 00:20;shade;Fix Request (17u)

Fixes another Zero test for 17u. Does not apply cleanly, requires a minor adjustment in the test. Patch acked by phh.;;;",,,,,,,,,,,,,,,,,,,,,,,
Cleanup unnecessary null comparison before instanceof check in java.naming,JDK-8273484,5058177,Bug,Resolved,JDK,JDK,software,duke,,,P5,Fixed,aturbanov,aturbanov,aturbanov,2021-09-08 03:01,2021-09-15 20:06,2023-10-01 09:57,2021-09-12 06:49,16,17,,,,,,18,core-libs,,0,,,,,,,,,,,,,,,,,,,,,,"Update code checks both non-null and instance of a class in java.naming module classes.
The checks and explicit casts could also be replaced with pattern matching for the instanceof operator.
For example the following code:

        return (obj != null &&
                obj instanceof CompoundName &&
                impl.equals(((CompoundName)obj).impl));


Can be simplified to:
    
        return (obj instanceof CompoundName other) &&
                impl.equals(other.impl);
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2ua3f:",9223372036854775807,b15,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@226ed983,,,,,,,,,"2021-09-12 06:49;roboduke;Changeset: 2ee1f96c
Author:    Andrey Turbanov <turbanoff@gmail.com>
Committer: Aleksei Efimov <aefimov@openjdk.org>
Date:      2021-09-12 13:48:24 +0000
URL:       https://git.openjdk.java.net/jdk/commit/2ee1f96c14b80b63a29445629b1f2e1caf88e075
;;;",,,,,,,,,,,,,,,,,,,,,,,,,
Zero: Clear pending JNI exception check in native method handler,JDK-8273483,5058176,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,shade,shade,shade,2021-09-08 03:01,2021-10-04 05:33,2023-10-01 09:57,2021-09-09 02:48,11,17,18,,,,,18,hotspot,,0,jdk17u-fix-request,jdk17u-fix-yes,redhat-interest,,,,,,,,,,,,,,,,,,,"If you run Zero with existing tier1 test, then it would fail like this:

$ CONF=linux-x86_64-zero-fastdebug make exploded-test TEST=runtime/jni/checked/TestCheckedJniExceptionCheck.java

 stdout: [TEST STARTED
testSingleCallNoCheck start
WARNING in native method: JNI call made without checking exceptions when required to from CallVoidMethod
	at java.lang.Object.getClass(java.base/Native Method)
	at java.io.PrintStream.println(java.base/PrintStream.java:1035)
	at TestCheckedJniExceptionCheck.testSingleCallNoCheck(TestCheckedJniExceptionCheck.java:82)
	at TestCheckedJniExceptionCheck.test(TestCheckedJniExceptionCheck.java:66)
	at TestCheckedJniExceptionCheck.main(TestCheckedJniExceptionCheck.java:203)
testSingleCallNoCheck end

In other words, there is a warning from the native call to Object.getClass from the test println itself, which it does not expect. This is because Zero does not clear the pending JNI exception check flag. All other (template) interpreter implementation do clear it in native call handlers. So the test rightfully reports the excess warning. ",,,,,,,,,,,JDK-8274705,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2ua37:",9223372036854775807,b15,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,,,"2021-09-09 02:48;roboduke;Changeset: aa931118
Author:    Aleksey Shipilev <shade@openjdk.org>
Date:      2021-09-09 09:46:16 +0000
URL:       https://git.openjdk.java.net/jdk/commit/aa9311182ae88312a70b18afd85939718415b77c
;;;","2021-10-01 04:43;shade;Fix Request (17u)

Fixes another Zero bug that manifests as tier1 test failure. Applies cleanly. Affected test passes.;;;",,,,,,,,,,,,,,,,,,,,,,,,
[macos11] JTabbedPane selected and pressed tab is not legible,JDK-8273478,5058168,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,psadhukhan,psadhukhan,psadhukhan,2021-09-08 01:53,2021-09-20 17:41,2023-10-01 09:57,2021-09-12 21:44,17,18,,,,,,18,client-libs,,0,sn_101,,,,,,,,,,,,,,,,,,,,,"on macOS 11 (bigsur), using the Swing Aqua Look and Feel,
the text of the selected and ""pressed"" JTabbedPane tab title text is just a light gray
outline of white text on a white background",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"2021-09-08 01:53;psadhukhan;tabpane-selpressed-bigsur-issue.png;https://bugs.openjdk.org/secure/attachment/96383/tabpane-selpressed-bigsur-issue.png",,,,,x86_64,,,,,,,,,os_x,,,,,"0|i2ua1f:",9223372036854775807,b15,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@568a5b31,,,,,,,,,"2021-09-12 21:44;roboduke;Changeset: 4efcd200
Author:    Prasanta Sadhukhan <psadhukhan@openjdk.org>
Date:      2021-09-13 04:44:01 +0000
URL:       https://git.openjdk.java.net/jdk/commit/4efcd2006f00a6347987ecdacd6e09d59a0006f4
;;;","2021-09-20 17:41;serb;Initially discussed here:
https://github.com/openjdk/jdk/pull/5217#issuecomment-914954190;;;",,,,,,,,,,,,,,,,,,,,,,,,
Remove unreachable return in  mutexLocker::wait,JDK-8273451,5058111,Bug,Resolved,JDK,JDK,software,duke,,,P5,Fixed,lmesnik,lmesnik,lmesnik,2021-09-07 12:36,2021-09-27 07:20,2023-10-01 09:57,2021-09-08 12:30,18,,,,,,,18,hotspot,,0,jdk17u-fix-request,jdk17u-fix-yes,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8274376,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2u9or:",9223372036854775807,b15,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,,,"2021-09-08 12:30;roboduke;Changeset: 9b5991e8
Author:    Leonid Mesnik <lmesnik@openjdk.org>
Date:      2021-09-08 19:30:17 +0000
URL:       https://git.openjdk.java.net/jdk/commit/9b5991e811b789fe8b60701657c2f0dd2c222c2e
;;;","2021-09-27 04:37;omikhaltcova;Fix request (17u)

I'd like to backport this fix to jdk17u. 
The original patch applied cleanly.;;;",,,,,,,,,,,,,,,,,,,,,,,,
Fix the copyright header of SVML files,JDK-8273450,5058108,Bug,Closed,JDK,JDK,software,duke,,,P4,Fixed,sviswanathan,sviswanathan,sviswanathan,2021-09-07 11:29,2022-04-25 10:57,2023-10-01 09:57,2021-09-08 09:08,17,,,,,,,18,core-libs,,1,jdk17u-fix-request,jdk17u-fix-SQE-ok,jdk17u-fix-yes,,,,,,,,,,,,,,,,,,,Fix the copyright header of SVML files,,,,,,,,,,,JDK-8277265,JDK-8276910,,,,,,,,,,,,,,,,,,,,JDK-8273458,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2u9o3:",9223372036854775807,b14,,,,,,,,,,Verified,,"2021-09-08 09:08;roboduke;Changeset: d7efd0e8
Author:    Sandhya Viswanathan <sviswanathan@openjdk.org>
Date:      2021-09-08 16:07:45 +0000
URL:       https://git.openjdk.java.net/jdk/commit/d7efd0e8cf14c732427d2c1363b60278bebdc06a
;;;","2021-11-05 13:09;sviswanathan;Fix Request
  Patch applies cleanly to JDK17u. Changes only in the copyright header of files. Need to have correct copyright header. Please approve. ;;;","2022-04-25 10:57;sqetools;verified;;;",,,,,,,,,,,,,,,,,,,,,,,
"Backport JDK-8273426 caused build failure due to missing ""All rights reserved.""",JDK-8273436,5058089,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,rgangadhar,rgangadhar,rgangadhar,2021-09-07 07:04,2021-10-11 08:44,2023-10-01 09:57,2021-09-07 07:40,11.0.14-oracle,,,,,,,11.0.14-oracle,client-libs,,0,openjdk-na,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2u9jv:",9223372036854775807,b01,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Suspicious duplicate condition in java.util.regex.Grapheme#isExcludedSpacingMark,JDK-8273430,5058082,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,igraves,jlaskey,jlaskey,2021-09-07 05:27,2023-05-17 09:49,2023-10-01 09:57,2021-09-13 14:52,17,18,,,,,,18,core-libs,,0,amazon-interest,,,,,,,,,,,,,,,,,,,,,"Hello.
I found suspicious condition in the method
java.util.regex.Grapheme#isExcludedSpacingMark
It's detected by IntelliJ IDEA inspection 'Condition is covered by
further condition'
https://github.com/openjdk/jdk/blob/master/src/java.base/share/classes/java/util/regex/Grapheme.java#L157

```
private static boolean isExcludedSpacingMark(int cp) {
  return  cp == 0x102B || cp == 0x102C || cp == 0x1038 ||
          cp >= 0x1062 && cp <= 0x1064 ||
          cp >= 0x1062 && cp <= 0x106D ||  // <== here is the warning
          cp == 0x1083 ||
          cp >= 0x1087 && cp <= 0x108C ||
          cp == 0x108F ||
          cp >= 0x109A && cp <= 0x109C ||
          cp == 0x1A61 || cp == 0x1A63 || cp == 0x1A64 ||
          cp == 0xAA7B || cp == 0xAA7D;
}
```
There are 2 sub-conditions in this complex condition:
cp >= 0x1062 && cp <= 0x1064 ||
cp >= 0x1062 && cp <= 0x106D ||

The second condition is _wider_ than the first one.
I believe it's a bug. The second condition (according to
https://www.compart.com/en/unicode/category/Mc) should look like this:

cp >= 0x1067 && cp <= 0x106D ||

0x1065, 0x1066 are not from the Spacing_Mark category.


Andrey Turbanov",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8273691,,,,,,,,,,generic,,,,,,,,,generic,,,,,"0|i2u9ib:",9223372036854775807,b15,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@557d5cff,,,,,,,,,"2021-09-07 13:07;igraves;Confirming U+1065 and U+1067 are not spacing marks and should be excluded from the given range. Range should be fixed up as to not overlap with the existing ranges.;;;","2021-09-08 02:57;aturbanov;Did you mean U+1066 instead of U+1067, right?;;;","2021-09-08 09:10;igraves;Yes, thank you.;;;","2021-09-13 14:52;roboduke;Changeset: 3d9dc8f8
Author:    Ian Graves <igraves@openjdk.org>
Date:      2021-09-13 21:48:28 +0000
URL:       https://git.openjdk.java.net/jdk/commit/3d9dc8f824abf597d9b28f456cfeb5af927221b8
;;;",,,,,,,,,,,,,,,,,,,,,,
"C2: assert(false) failed: bad AD file after JDK-8252372 with UseSSE={0,1}",JDK-8273416,5058066,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,shade,shade,shade,2021-09-07 02:37,2021-11-16 12:18,2023-10-01 09:57,2021-11-01 05:32,17,18,,,,,,18,hotspot,,0,c2,hs-comp-triaged,jdk17u-fix-request,jdk17u-fix-SQE-ok,jdk17u-fix-yes,oracle-triage-11,oracle-triage-17,oracle-triage-18,redhat-interest,regression,,,,,,,,,,,,"This reliably reproduces with the existing test:

$ CONF=linux-x86-server-fastdebug make run-test TEST=java/util/Random/RandomTestMoments.java TEST_VM_OPTS=""-XX:UseAVX=0 -XX:UseSSE=0""

#  Internal Error (/home/shade/trunks/jdk/src/hotspot/share/opto/matcher.cpp:1681), pid=1313665, tid=1313681
#  assert(false) failed: bad AD file


o1789  AddD  === _ o1790 o436  [[o1785 ]] 

--N: o1789  AddD  === _ o1790 o436  [[o1785 ]] 

   --N: o1790  CastDD  === o1112 o1086  [[o1789 ]]  #double unconditional dependency
   REGD  100  castDD
   LEGREGD  200  MoveD2LEG
   VLREGD  200  MoveD2VL

      --N: o1086  RoundDouble  === _ o1085  [[o1189 o1792 o1790 ]] 
      REGDPR  0  REGDPR
      REGDPR1  0  REGDPR1
      REGDPR2  0  REGDPR2
      REGNOTDPR1  0  REGNOTDPR1
      REGD  100  MoveVL2D
      LEGREGD  200  MoveD2LEG
      VLREGD  0  VLREGD

   --N: o436  Phi  === o1762 o380 o1459  [[o1451 o730 o1458 o1789 o1791 ]]  #double
   REGDPR  0  REGDPR
   REGDPR1  0  REGDPR1
   REGDPR2  0  REGDPR2
   REGNOTDPR1  0  REGNOTDPR1
   REGD  100  MoveVL2D
   LEGREGD  200  MoveD2LEG
   VLREGD  0  VLREGD

I think the newly added CastDD nodes should handle regDPR instead of just regD to avoid this mismatch error.",,,,,,,,,,,JDK-8277273,JDK-8277104,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8252372,JDK-8276846,,,,,,,,,,,,,,,,,,,,,,,"0|i2u9er:",9223372036854775807,b22,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2021-09-07 09:42;thartmann;ILW = Crash in C2's matcher (regression in JDK 17), reproducible with test and -XX:UseAVX=0 -XX:UseSSE=0, disable compilation of affected method = HMM = P2;;;","2021-11-01 05:32;roboduke;Changeset: 89ade1d7
Author:    Aleksey Shipilev <shade@openjdk.org>
Date:      2021-11-01 12:30:43 +0000
URL:       https://git.openjdk.java.net/jdk/commit/89ade1d7e88ee005c3fd2136d84e298d94f9a67c
;;;","2021-11-10 06:38;shade;Fix Request (17u)

This fixes a recent regression in 17u. Patch applies cleanly, fixes some x86_32 failures, and does not regress x86_64.;;;",,,,,,,,,,,,,,,,,,,,,,,
ResourceObj::operator delete should handle nullptr in debug builds,JDK-8273414,5058064,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,lkorinth,lkorinth,lkorinth,2021-09-07 01:55,2021-09-20 12:54,2023-10-01 09:57,2021-09-14 14:19,18,,,,,,,18,hotspot,,0,,,,,,,,,,,,,,,,,,,,,,The current assert does assume p not being nullptr and tries to dereference it. Delete should handle (and ignore) nullptr.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2u9eb:",9223372036854775807,b15,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,,,"2021-09-07 11:04;mseledtsov;ILW = MLM = P4;;;","2021-09-14 14:19;roboduke;Changeset: e66bf472
Author:    Leo Korinth <lkorinth@openjdk.org>
Date:      2021-09-14 21:17:59 +0000
URL:       https://git.openjdk.java.net/jdk/commit/e66bf472484f6873faf45d634f17b68777fdcfa6
;;;",,,,,,,,,,,,,,,,,,,,,,,,
SunJSSE Provider protocol list out of date,JDK-8273413,5057729,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,rgallard,webbuggrp,webbuggrp,2021-08-30 22:43,2021-11-24 01:42,2023-10-01 09:57,2021-11-18 21:59,11,16,8,,,,,8u321,docs,,0,CPU22_01-critical-approved,dcsaw,jdk11u-na,noreg-doc,securitydocs,webbug,,,,,,,,,,,,,,,,"A DESCRIPTION OF THE PROBLEM :
In 8 the 'Protocols' item under SunJSSE in SunProviders notes that in 8u31 up SSLv3 is disabled by security property, but lists TLSv1 (meaning 1.0) and TLSv1.1 as enabled and does not note that in 8u291 up they are similarly disabled. (The Customizing section in JSSERefGuide _does_ show this and other recent changes to jdk.tls.disabledAlgorithms if you know to look there.)

Similarly in 11 the 'SunJSSE Provider Protocol Parameters' item under SunJSSE in oracle-providers shows SSLv3 as disabled but not TLSv1 and TLSv1.1 which are disabled in 11.0.11 up; this one links to the Customizing section in java-secure-socket-extension-jsse-reference-guide which does show this. And similarly in 16 where 1.0 and 1.1 are disabled in _all_ updates (including '16.0.0').


",,,,,,,,,,,JDK-8273499,JDK-8277354,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8202343,,,,,,,,,,generic,,,,,,,,,generic,,,,,"0|i2u7bv:",9223372036854775807,b06,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4eba8c33,,,,,,,,,"2021-09-07 00:52;tongwan;Moved to JDK to investigate the listed protocols in the following documents:
https://docs.oracle.com/javase/8/docs/technotes/guides/security/SunProviders.html#SunJSSEProvider
https://docs.oracle.com/en/java/javase/11/security/oracle-providers.html#GUID-7093246A-31A3-4304-AC5F-5FB6400405E2
https://docs.oracle.com/en/java/javase/16/security/oracle-providers.html#GUID-7093246A-31A3-4304-AC5F-5FB6400405E2;;;","2021-09-07 07:25;mullan;The JSSE Reference Guide and JDK Providers Guide need to be updated with additional changes now that TLS v1.0 and TLS v1.1 are disabled by default.;;;","2021-10-29 02:10;goetz;11u backport notice
I flagged this as not applicaple for 11u because it is a change to Oracle documentation 
that is publicly visible. There is no 'open' copy of this documentation.
Probably tag openjdk-na would be more appropriate :);;;",,,,,,,,,,,,,,,,,,,,,,,
"IR verification framework fails with ""Should find method name in validIrRulesMap""",JDK-8273410,5058059,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,chagedorn,thartmann,thartmann,2021-09-06 23:48,2022-12-29 01:35,2023-10-01 09:57,2021-10-06 01:23,17,18,,,,,,18,hotspot,,0,hs-comp-triaged,ir-framework,jdk17u-fix-request,jdk17u-fix-yes,noreg-self,oracle-triage-18,,,,,,,,,,,,,,,,"Attached test fails with:

compiler.lib.ir_framework.shared.TestFrameworkException: Internal Test Framework exception - please file a bug:
Should find method name in validIrRulesMap for public int compiler.c2.irTests.TestPostParseCallDevirtualization.test1()
	at compiler.lib.ir_framework.TestFramework.check(TestFramework.java:715)
	at compiler.lib.ir_framework.driver.IRMatcher.setupTestMethods(IRMatcher.java:88)
	at compiler.lib.ir_framework.driver.IRMatcher.<init>(IRMatcher.java:66)
	at compiler.lib.ir_framework.TestFramework.runTestVM(TestFramework.java:699)
	at compiler.lib.ir_framework.TestFramework.start(TestFramework.java:668)
	at compiler.lib.ir_framework.TestFramework.startWithScenarios(TestFramework.java:566)
	at compiler.lib.ir_framework.TestFramework.start(TestFramework.java:332)
	at compiler.c2.irTests.TestPostParseCallDevirtualization.main(TestPostParseCallDevirtualization.java:42)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at com.sun.javatest.regtest.agent.MainWrapper$MainThread.run(MainWrapper.java:127)
	at java.base/java.lang.Thread.run(Thread.java:833)

",,,,,,,,,,,JDK-8299403,JDK-8296870,,,,,,,,,,,,,,,,,,,,,,,JDK-8254129,,,,,,,,,,"2021-09-06 23:48;thartmann;TestPostParseCallDevirtualization.java;https://bugs.openjdk.org/secure/attachment/96364/TestPostParseCallDevirtualization.java",,,,,,,,,,,,,,,,,,,"0|i2u9d7:",9223372036854775807,b18,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2021-09-06 23:49;thartmann;ILW = IR verification framework fails (framework bug), with single test, don't use @Check methods = MLM = P4;;;","2021-09-06 23:50;thartmann;Christian, could you please have a look?;;;","2021-09-06 23:51;thartmann;I think the problem is that IR verification for the test fails and that confuses the @Check logic.;;;","2021-09-23 06:29;chagedorn;Sure, I'll have a look at it, thanks for reporting it.;;;","2021-10-06 01:23;roboduke;Changeset: df125f68
Author:    Christian Hagedorn <chagedorn@openjdk.org>
Date:      2021-10-06 08:21:18 +0000
URL:       https://git.openjdk.java.net/jdk/commit/df125f680b6a4517109be80512a113064ca6281d
;;;","2022-12-27 03:44;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/988
Date: 2022-12-27 11:37:12 +0000;;;","2022-12-27 03:48;goetz;Fix request [17u]

I backport this for parity with 17.0.7-oracle.
No risk, only a test change.
Clean backport.
One test passes.  The other requires follow-up 8275173.
SAP nighlyt testing passed including the follow up.;;;",,,,,,,,,,,,,,,,,,,
Receiver type narrowed by CCP does not always trigger post-parse call devirtualization ,JDK-8273409,5058058,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,thartmann,thartmann,thartmann,2021-09-06 23:11,2021-09-28 00:20,2023-10-01 09:57,2021-09-09 06:46,16,17,18,,,,,18,hotspot,,0,c2,hs-comp-triaged,oracle-triage-11,oracle-triage-17,oracle-triage-18,performance,,,,,,,,,,,,,,,,CCP is often able to narrow the receiver type of a virtual call which in turn should trigger post-parse call devirtualization if the type is exact.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8257211,,,,,JDK-8273496,,,,,,,,,,,,,,,,,,,,,,,,"0|i2u9cz:",9223372036854775807,b15,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2021-09-06 23:13;thartmann;ILW = Missed optimization opportunity in C2, rare cases where CCP is able to narrow the receiver type but IGVN does not re-process the call, no workaround = MLH = P4;;;","2021-09-09 06:46;roboduke;Changeset: 4866eaa9
Author:    Tobias Hartmann <thartmann@openjdk.org>
Date:      2021-09-09 13:44:05 +0000
URL:       https://git.openjdk.java.net/jdk/commit/4866eaa997b2ee2a47bdcd0d96202f220fb2774d
;;;",,,,,,,,,,,,,,,,,,,,,,,,
java.lang.AssertionError: typeSig ERROR on generated class property of record,JDK-8273408,5057983,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,gli,webbuggrp,webbuggrp,2021-09-03 22:09,2022-11-29 22:56,2023-10-01 09:57,2021-09-16 22:36,14,16,18,,,,,18,tools,,0,dcsad,jdk17u-fix-request,jdk17u-fix-yes,reproducer-yes,webbug,,,,,,,,,,,,,,,,,"ADDITIONAL SYSTEM INFORMATION :
System:
Linux 4.19.128-microsoft-standard #1 SMP Tue Jun 23 12:58:10 UTC 2020 x86_64

OS: 
Fedora 34 in WSL

Java runtime:
openjdk version ""16.0.2"" 2021-07-20
OpenJDK Runtime Environment 21.3 (build 16.0.2+7)
OpenJDK 64-Bit Server VM 21.3 (build 16.0.2+7, mixed mode, sharing)


A DESCRIPTION OF THE PROBLEM :
When a generated class is used as type of a record's property, compilation fails with the following stacktrace:

java.lang.AssertionError: typeSig ERROR
        at jdk.compiler/com.sun.tools.javac.code.Types$SignatureGenerator.assembleSig(Types.java:5168)
        at jdk.compiler/com.sun.tools.javac.jvm.PoolWriter$SharedSignatureGenerator.assembleSig(PoolWriter.java:298)
        at jdk.compiler/com.sun.tools.javac.jvm.PoolWriter.typeSig(PoolWriter.java:492)
        at jdk.compiler/com.sun.tools.javac.jvm.PoolWriter.putDescriptor(PoolWriter.java:139)
        at jdk.compiler/com.sun.tools.javac.jvm.PoolWriter.putDescriptor(PoolWriter.java:146)
        at jdk.compiler/com.sun.tools.javac.jvm.ClassWriter.writeRecordAttribute(ClassWriter.java:852)
        at jdk.compiler/com.sun.tools.javac.jvm.ClassWriter.writeClassFile(ClassWriter.java:1650)
        at jdk.compiler/com.sun.tools.javac.jvm.ClassWriter.writeClass(ClassWriter.java:1504)
        at jdk.compiler/com.sun.tools.javac.main.JavaCompiler.genCode(JavaCompiler.java:757)
        at jdk.compiler/com.sun.tools.javac.main.JavaCompiler.generate(JavaCompiler.java:1644)
        at jdk.compiler/com.sun.tools.javac.main.JavaCompiler.generate(JavaCompiler.java:1612)
        at jdk.compiler/com.sun.tools.javac.main.JavaCompiler.compile(JavaCompiler.java:973)
        at jdk.compiler/com.sun.tools.javac.main.Main.compile(Main.java:317)
        at jdk.compiler/com.sun.tools.javac.main.Main.compile(Main.java:176)
        at jdk.compiler/com.sun.tools.javac.Main.compile(Main.java:64)
        at jdk.compiler/com.sun.tools.javac.Main.main(Main.java:50)

It cannot be reproduced by just annotation a random class with @Generated and doesn't happen when replacing the stub with the full generated class and removing code generation altogether

Hard to tell if it's immutables in the wrong or not, so here goes as per the error message's recommendation

STEPS TO FOLLOW TO REPRODUCE THE PROBLEM :
Given the following interface (using https://immutables.github.io/ ):

@Immutable
public interface SomeImmutable {}

Using the generated concrete class as a record property as such:

public record SomeRecord(
    ImmutableSomeImmutable someImmutable
) { }

Full reproduction sample at https://github.com/Tristan971/javac-typesig-error

EXPECTED VERSUS ACTUAL BEHAVIOR :
EXPECTED -
Successful compilation
ACTUAL -
java.lang.AssertionError: typeSig ERROR
        at jdk.compiler/com.sun.tools.javac.code.Types$SignatureGenerator.assembleSig(Types.java:5168)
        at jdk.compiler/com.sun.tools.javac.jvm.PoolWriter$SharedSignatureGenerator.assembleSig(PoolWriter.java:298)
        at jdk.compiler/com.sun.tools.javac.jvm.PoolWriter.typeSig(PoolWriter.java:492)
        at jdk.compiler/com.sun.tools.javac.jvm.PoolWriter.putDescriptor(PoolWriter.java:139)
        at jdk.compiler/com.sun.tools.javac.jvm.PoolWriter.putDescriptor(PoolWriter.java:146)
        at jdk.compiler/com.sun.tools.javac.jvm.ClassWriter.writeRecordAttribute(ClassWriter.java:852)
        at jdk.compiler/com.sun.tools.javac.jvm.ClassWriter.writeClassFile(ClassWriter.java:1650)
        at jdk.compiler/com.sun.tools.javac.jvm.ClassWriter.writeClass(ClassWriter.java:1504)
        at jdk.compiler/com.sun.tools.javac.main.JavaCompiler.genCode(JavaCompiler.java:757)
        at jdk.compiler/com.sun.tools.javac.main.JavaCompiler.generate(JavaCompiler.java:1644)
        at jdk.compiler/com.sun.tools.javac.main.JavaCompiler.generate(JavaCompiler.java:1612)
        at jdk.compiler/com.sun.tools.javac.main.JavaCompiler.compile(JavaCompiler.java:973)
        at jdk.compiler/com.sun.tools.javac.main.Main.compile(Main.java:317)
        at jdk.compiler/com.sun.tools.javac.main.Main.compile(Main.java:176)
        at jdk.compiler/com.sun.tools.javac.Main.compile(Main.java:64)
        at jdk.compiler/com.sun.tools.javac.Main.main(Main.java:50)

---------- BEGIN SOURCE ----------
@Immutable
public interface SomeImmutable {}

public record SomeRecord(
    ImmutableSomeImmutable someImmutable
) { }

---------- END SOURCE ----------

CUSTOMER SUBMITTED WORKAROUND :
Not using an immutables-generated class as a record property type

FREQUENCY : always


",,,,,,,,,,,JDK-8274476,,,,,,,,,,,,,,,,,,,,,,,,JDK-8284255,JDK-8297831,,,,,,,,,"2021-09-06 21:00;adev;javac-typesig-error-main.zip;https://bugs.openjdk.org/secure/attachment/96363/javac-typesig-error-main.zip",,,,,generic,,,,,,,,,generic,,,,,"0|i2u8wb:",9223372036854775807,b16,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4dca67bd,,,,,,,,,"2021-09-06 22:13;adev;Issue is reproducible. Although I've tried to narrow down the issue.
In SomeImmutable.java, when using 
@Value.Immutable
crash does not happen.

Using @Immutable alone causes the crash
;;;","2021-09-15 00:48;gli;Both @Value.Immutable and @Immutable could crash the compiler. But if we use `mvn compile` twice without using `mvn clean`, the newly generated class `ImmutableSomeImmutable` will exist and obscure the bug. So we should always use `mvn clean` before using `mvn compile` to reproduce the issue.;;;","2021-09-16 22:36;roboduke;Changeset: e07ab82e
Author:    Guoxiong Li <gli@openjdk.org>
Date:      2021-09-17 05:34:25 +0000
URL:       https://git.openjdk.java.net/jdk/commit/e07ab82ee555f27921287a871ba582e0906ad45c
;;;","2021-09-28 05:09;gli;Fix Request(17u)

I would like to backport this patch about records to jdk17u. The code applies cleanly.

Thanks.;;;",,,,,,,,,,,,,,,,,,,,,,
remove some unreferenced gtk-related functions,JDK-8273387,5058032,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,mbaesken,mbaesken,mbaesken,2021-09-06 07:40,2022-02-04 08:29,2023-10-01 09:57,2021-09-08 23:16,16,17,18,,,,,18,client-libs,,0,gtk,jdk17u-fix-request,jdk17u-fix-yes,,,,,,,,,,,,,,,,,,,Looks like there are a few functions like gtk2_paint_diamond that are unreferenced and can be removed.,,,,,,,,,,,JDK-8281280,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,generic,,,,,,,,,generic,,,,,"0|i2u977:",9223372036854775807,b15,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@5a9b3fd3,,,,,,,,,"2021-09-08 23:16;roboduke;Changeset: 6eba4434
Author:    Matthias Baesken <mbaesken@openjdk.org>
Date:      2021-09-09 06:15:15 +0000
URL:       https://git.openjdk.java.net/jdk/commit/6eba443428ff7abe7c0509047ec76432affebe65
;;;","2022-01-05 06:15;mbaesken;Fix Request (17u)
I would like to have the patch in 17u as well, because the issue is present there too. The patch applies cleanly.;;;","2022-01-07 03:13;mbaesken;jdk11u-fix-yes meant jdk17u-fix-yes, corrected the label;;;","2022-01-07 03:23;roboduke;A pull request was submitted for review.

URL: https://git.openjdk.java.net/jdk17u-dev/pull/65
Date: 2022-01-07 11:18:25 +0000
;;;",,,,,,,,,,,,,,,,,,,,,,
vmTestbase/vm/gc/containers/Combination05/TestDescription.java crashes verifying length of DCQS,JDK-8273383,5058027,Bug,Closed,JDK,JDK,software,duke,,,P2,Fixed,kbarrett,tschatzl,tschatzl,2021-09-06 05:07,2022-02-10 14:26,2023-10-01 09:57,2022-01-18 20:37,18,19,,,,,,18,hotspot,,0,gc-g1,tier4,tier7,,,,,,,,,,,,,,,,,,,"vmTestbase/vm/gc/containers/Combination05/TestDescription.java crashes with the following stack trace:

# A fatal error has been detected by the Java Runtime Environment:
#
#  Internal Error (...\src\hotspot\share\gc\g1\g1DirtyCardQueue.cpp:175), pid=13180, tid=43620
#  assert(actual == Atomic::load(&_num_cards)) failed: Num entries in completed buffers should be 42569 but are 7241
#
# JRE version: Java(TM) SE Runtime Environment (18.0+14) (fastdebug build 18-ea+14-714)
# Java VM: Java HotSpot(TM) 64-Bit Server VM (fastdebug 18-ea+14-714, compiled mode, sharing, tiered, compressed oops, compressed class ptrs, g1 gc, windows-amd64)
# Core dump will be written. Default location: ...\testoutput\test-support\jtreg_open_test_hotspot_jtreg_vmTestbase_vm_gc_quick\scratch\0\hs_err_pid13180.mdmp
#
# If you would like to submit a bug report, please visit:
#   https://bugreport.java.com/bugreport/crash.jsp
#

---------------  S U M M A R Y ------------

Current thread (0x000001ffa95b9ec0):  VMThread ""VM Thread"" [stack: 0x0000006984100000,0x0000006984200000] [id=43620]

Stack: [0x0000006984100000,0x0000006984200000]
Native frames: (J=compiled Java code, j=interpreted, Vv=VM code, C=native code)
V  [jvm.dll+0xada9d1]  os::platform_print_native_stack+0xf1  (os_windows_x86.cpp:235)
V  [jvm.dll+0xcf7625]  VMError::report+0x1005  (vmError.cpp:742)
V  [jvm.dll+0xcf8fae]  VMError::report_and_die+0x7fe  (vmError.cpp:1552)
V  [jvm.dll+0xcf9734]  VMError::report_and_die+0x64  (vmError.cpp:1333)
V  [jvm.dll+0x4cccc7]  report_vm_error+0xb7  (debug.cpp:282)
V  [jvm.dll+0x5cc5e2]  G1DirtyCardQueueSet::verify_num_cards+0x82  (g1DirtyCardQueue.cpp:176)
V  [jvm.dll+0x5cb1cb]  G1DirtyCardQueueSet::concatenate_logs+0x8b  (g1DirtyCardQueue.cpp:574)
V  [jvm.dll+0x5b1abc]  G1CollectedHeap::pre_evacuate_collection_set+0x1fc  (g1CollectedHeap.cpp:3546)
V  [jvm.dll+0x5aa928]  G1CollectedHeap::do_collection_pause_at_safepoint_helper+0x6c8  (g1CollectedHeap.cpp:3112)
V  [jvm.dll+0x5aa24d]  G1CollectedHeap::do_collection_pause_at_safepoint+0x15d  (g1CollectedHeap.cpp:2875)
V  [jvm.dll+0x60ffc3]  VM_G1CollectForAllocation::doit+0x73  (g1VMOperations.cpp:157)
V  [jvm.dll+0xcfec59]  VM_Operation::evaluate+0xb9  (vmOperations.cpp:71)
V  [jvm.dll+0xd00b74]  VMThread::evaluate_operation+0xa4  (vmThread.cpp:284)
V  [jvm.dll+0xd012d5]  VMThread::inner_execute+0x255  (vmThread.cpp:433)",,,,,,,,,,,JDK-8280332,JDK-8280666,,,,,,,,,,,,,,,,,,,,JDK-8274940,,,,,,,,JDK-8279294,JDK-8280832,,,,,,,,,,,,,,,,,,,,,,,"0|i2u963:",9223372036854775807,b32,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6b00f96c,,,,,,,Verified,,"2021-10-16 15:40;dcubed;Here's the crashing thread's stack for the jdk-18+20-1207-tier4 sighting:

---------------  T H R E A D  ---------------

Current thread (0x0000ffff882c5600):  VMThread ""VM Thread"" [stack: 0x0000ffff69880000,0x0000ffff69a80000] [id=3771814]

Stack: [0x0000ffff69880000,0x0000ffff69a80000],  sp=0x0000ffff69a7dbd0,  free space=2038k
Native frames: (J=compiled Java code, j=interpreted, Vv=VM code, C=native code)
V  [libjvm.so+0xc23cf0]  G1DirtyCardQueueSet::concatenate_logs()+0x100
V  [libjvm.so+0xcbcfec]  G1YoungCollector::pre_evacuate_collection_set(G1EvacInfo*, G1ParScanThreadStateSet*)+0xfc
V  [libjvm.so+0xcbe66c]  G1YoungCollector::collect()+0x4a8
V  [libjvm.so+0xbee604]  G1CollectedHeap::do_collection_pause_at_safepoint_helper(double)+0xa0
V  [libjvm.so+0xbee74c]  G1CollectedHeap::do_collection_pause_at_safepoint(double)+0xbc
V  [libjvm.so+0xcbbd88]  VM_G1CollectForAllocation::doit()+0x68
V  [libjvm.so+0x182c65c]  VM_Operation::evaluate()+0x15c
V  [libjvm.so+0x185476c]  VMThread::evaluate_operation(VM_Operation*)+0x12c
V  [libjvm.so+0x1855540]  VMThread::inner_execute(VM_Operation*)+0x430
V  [libjvm.so+0x1855674]  VMThread::loop()+0xc4
V  [libjvm.so+0x18557a8]  VMThread::run()+0xd4
V  [libjvm.so+0x1748398]  Thread::call_run()+0xf8
V  [libjvm.so+0x1474aa4]  thread_native_entry(Thread*)+0x104
C  [libpthread.so.0+0x7738]  start_thread+0x198;;;","2021-11-17 02:55;tschatzl;Observation from some asserts: 

# assert(actual == Atomic::load(&_num_cards)) failed: Num entries in completed buffers should be 42569 but are 7241 

(42569-7241)/256; these are 138 complete refinement buffers

#  assert(actual == Atomic::load(&_num_cards)) failed: Num entries in completed buffers should be 17815 but are 4247

(17815-4247)/256 = 53; these are 53 complete refinement buffers

#  assert(actual == Atomic::load(&_num_cards)) failed: Num entries in completed buffers should be 16245 but are 7541

-> 34 complete refinement buffers are missing

#  assert(actual == Atomic::load(&_num_cards)) failed: Num entries in completed buffers should be 30618 but are 6810

-> 93 complete refinement buffers are missing

we seem to be always missing complete (and not partial) refinement buffers in the DCQS.;;;","2021-11-17 03:02;tschatzl;Reproduction rate with this test is like 1/8000.;;;","2021-11-27 01:30;kbarrett;First occurrence was the same day that JDK-8273386 was pushed, which changed DCQS::abandon_completed_buffers.  But that change doesn't look like it could cause anything like this.  DCQS has been fairly stable for a while.;;;","2021-12-05 13:49;kbarrett;I added some additional assertions and more info to some of them. The problem exists on entry to concatenate_logs. It doesn't seem to be (directly) caused by paused buffer handling.  On entry to concatenate_logs, the number of cards directly in the queue is 0, and there are cards in the paused list, but num_cards is N * buffer-size higher than it should be.

For example:
#  assert(actual == expected) failed: Num entries in completed and paused buffers at concatenate_logs pre_threads should be 44491 but are  2251 (0 + 2251)

where 0 is the number of cards directly in the queue, and 2251 is the number of cards in the paused list.

In all the failures I've looked at so far, the immediately preceding GC to the one that failed is a full gc, which is where abandon_completed_buffers is called.  This again points a finger at JDK-8273386 or something in that vicinity, though I still can't see how.
;;;","2021-12-06 01:20;kbarrett;I added some code to detect incorrect usage, where one of the not-thread-safe operations on the NonblockingQueue (like take_all) is concurrent with one of the other operations.  Such a thing might explain seemingly missing buffers.  That didn't detect any such problems, but I also didn't get any of the verify_num_cards failures either in 15K test runs.  Given that this seems to rarely reproduce (I've been seeing similar rates to [~tschatzl] 1/8000), it could just be that I had bad luck.  Or maybe the additional checks changed some timing or something in an unfortunate way.
;;;","2021-12-09 00:39;kbarrett;Added some more verification, this time around various GC safepoint handlers.  

#  assert(actual == expected) failed: Num entries in completed and paused buffers at VM_G1CollectForAllocation enter should be 9876 but are  2964 (2048 + 916)

The verification presumably passed at the end of the previous GC. However, the previous GC was *not* a full GC this time, according to the hs_err event log.  So full GCs could be a red herring, though having it be so frequently related seems odd.
;;;","2021-12-14 11:49;dcubed;Here's the crashing stack trace for the jdk-19+2-23-tier7 sighting:

vmTestbase/vm/gc/containers/Combination05/TestDescription.java

---------------  T H R E A D  ---------------

Current thread (0x00007fb0802e7100):  VMThread ""VM Thread"" [stack: 0x00007fafe843a000,0x00007fafe853a000] [id=27334]

Stack: [0x00007fafe843a000,0x00007fafe853a000],  sp=0x00007fafe8538080,  free space=1016k
Native frames: (J=compiled Java code, j=interpreted, Vv=VM code, C=native code)
V  [libjvm.so+0xce09f2]  G1DirtyCardQueueSet::concatenate_logs()+0xf2
V  [libjvm.so+0xd87011]  G1YoungCollector::pre_evacuate_collection_set(G1EvacInfo*, G1ParScanThreadStateSet*)+0x141
V  [libjvm.so+0xd88b9f]  G1YoungCollector::collect()+0x5ef
V  [libjvm.so+0xca9757]  G1CollectedHeap::do_collection_pause_at_safepoint_helper(double)+0xc7
V  [libjvm.so+0xca98b3]  G1CollectedHeap::do_collection_pause_at_safepoint(double)+0xa3
V  [libjvm.so+0xd85cc8]  VM_G1CollectForAllocation::doit()+0x68
V  [libjvm.so+0x1a26ffa]  VM_Operation::evaluate()+0x18a
V  [libjvm.so+0x1a4a6f3]  VMThread::evaluate_operation(VM_Operation*)+0x183
V  [libjvm.so+0x1a4b567]  VMThread::inner_execute(VM_Operation*)+0x3f7
V  [libjvm.so+0x1a4b695]  VMThread::loop()+0xb5
V  [libjvm.so+0x1a4b7b4]  VMThread::run()+0xb4
V  [libjvm.so+0x1931e00]  Thread::call_run()+0x100
V  [libjvm.so+0x16141b4]  thread_native_entry(Thread*)+0x104;;;","2021-12-27 07:42;kbarrett;Running the test with a very small value for the dirty card queue buffer size, like `-XX:G1UpdateBufferSize=2`, seems to increase the failure rate to something slightly more useful, on the order of 1/1000 or so.
;;;","2021-12-27 07:47;kbarrett;Adding verification at all safepoint boundaries (after threads quiesced and before restarting threads), the problem is always detected at the start of the safepoint.  The problem still occurs if the DCQS PausedBuffer mechanism is disabled.  So it looks like the problem is in NonblockingQueue.  (It could also be a missed ABA problem, but I don't think so.)

Using some additional verification in NonblockingQueue, when the problem is detected the queue seems to be ""intact"".  That is, head/tail are both null or head is a list that leads to tail and then an end-marker.  So it looks like what's happened is that some (often large) number of buffers have just disappeared from the queue, or were never properly inserted.

No failures with 20K runs with concurrent refinement completely disabled (no refinement threads and don't do any refinement by mutator threads), so only pushes onto the queue.  That suggests the problem is not arising from conflicting concurrent push operations.  That's not too surprising, as the interaction between concurrent push/append is relatively simple, with most of the complexity arising from concurrent pop.  But useful to more or less rule this case out.
;;;","2021-12-27 09:00;kbarrett;I found *a* bug in NonblockingQueue::try_pop (JDK-8279294), but it's not the cause of this failure.  I can still get this one even with the other fixed (not surprisingly, given the nature of that other one).
;;;","2021-12-27 09:48;kbarrett;I tried having only concurrent pops, isolated from all pushes.  No failures in 12.5K runs, suggesting it's not just a conflict between concurrent pops.  I'm less certain about that conclusion than in the only-pushes-no-pops case, since the complexity of this change is higher.  I added a LockFreeStack to the DCQS, with pushes going there.  When dequeing, if the NonblockingQueue is empty then block any further try_pops while transferring all the buffers from the push-stack to the queue, then allow try_pops to resume.

Unfortunately, lack of failure there suggests the problem is an interaction between concurrent pushes and pops. Hopefully it doesn't also require more than two threads for things to go wrong.
;;;","2022-01-16 10:09;kbarrett;The problem is an ABA issue in G1DirtyCardQueueSet's use of NonblockingQueue.

Consider queue q contains one entry, `X`.

Thread1 begins a push/append operation. WOLG, assume a push of `Y`. It atomically exchanges `q._tail` with `Y`, retaining the old value of `q._tail`, which is `X`. Pause Thread1 here.

Thread2 pops `X` from the queue. It successfully changes `X._next` from end-marker to null and `q._head` from `X` to null. Thread2 fails to change `q._tail` from `X` to null, as Thread1 already changed it to `Y`.

Various threads add entries to the queue after `Y`, and various threads try to pop entries and find the queue ""empty"" because `q._head` will remain null until Thread1 proceeds.

In parallel with entries being added, Thread2 processes `X` and releases it for reuse. Some thread reallocates it, fills it, and pushes it onto the queue.  We now have a chain from `Y` => `X` in `q._tail` with `q._head` still null.

If Thread1 resumes at that point, it finds `X._next` == end-marker, successfully changes it to `Y`, and ""completes"". We now have `q._head` == null and `q._tail` == `X`, with `X` => `Y` => `X`. The next push/append will observe `q._tail` of `X` having a non-end-marker `_next` and change both `q._head` and `q._tail`, dropping the list containing `X`, `Y`, &etc on the floor.

There may be other similarly bad scenarios, depending on exactly what is going on when Thread1 resumes.

All of these are fixed by performing the push operation in a critical section, so that `X` cannot be reused until the push that is observing it completes.  That is, in `DirtyCardQueueSet::enqueue_completed_buffer`, put `_completed.push(*cbn);` in a GlobalCounter critical section.
;;;","2022-01-16 10:23;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk18/pull/104
Date: 2022-01-16 18:20:07 +0000;;;","2022-01-18 20:37;roboduke;Changeset: 69cfa9cb
Author:    Kim Barrett <kbarrett@openjdk.org>
Date:      2022-01-19 04:37:09 +0000
URL:       https://git.openjdk.java.net/jdk18/commit/69cfa9cb36ab2b5490c231c30306f682665faab4
;;;","2022-01-25 04:31;roboduke;Changeset: 69cfa9cb
Author:    Kim Barrett <kbarrett@openjdk.org>
Date:      2022-01-19 04:37:09 +0000
URL:       https://git.openjdk.java.net/jdk18u/commit/69cfa9cb36ab2b5490c231c30306f682665faab4
;;;",,,,,,,,,,
jextract should generete alias layout for pointer typedefs,JDK-8273382,5058026,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,sundar,sundar,sundar,2021-09-06 05:03,2021-09-08 05:46,2023-10-01 09:57,2021-09-08 05:46,repo-panama,,,,,,,,tools,,0,,,,,,,,,,,,,,,,,,,,,,"File: test.h


typedef int* intptr;

struct Point {
    int x, y;
};

typedef struct Point* pointptr;

----- test.h ends ---

Nothing generated for both intptr and pointptr. A C_POINTER alias in header class would be useful.
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,generic,,,,,,,,,generic,,,,,"0|i2u95v:",9223372036854775807,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@2251e2f8,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Assert in PtrQueueBufferAllocatorTest.stress_free_list_allocator_vm,JDK-8273381,5058025,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,kbarrett,stuefe,stuefe,2021-09-06 04:38,2022-04-27 07:20,2023-10-01 09:57,2021-10-06 04:16,17,18,,,,,,18,hotspot,,0,gc-g1,jdk17u-fix-request,jdk17u-fix-yes,noreg-self,,,,,,,,,,,,,,,,,,"Happened during gtests on x86 in GHAs for an unrelated patch in our SapMachine 18 CI. Delta between SapMachine and stock OpenJDK not different enough to cause this, so I believe this to be an upstream problem.

```
2021-09-05T07:14:24.4105685Z [----------] 2 tests from PtrQueueBufferAllocatorTest
2021-09-05T07:14:24.4106571Z [ RUN      ] PtrQueueBufferAllocatorTest.test_vm
2021-09-05T07:14:24.4107504Z [       OK ] PtrQueueBufferAllocatorTest.test_vm (0 ms)
2021-09-05T07:14:24.4108542Z [ RUN      ] PtrQueueBufferAllocatorTest.stress_free_list_allocator_vm
2021-09-05T07:14:24.4109347Z Stressing allocator for 1000 ms
2021-09-05T07:14:24.4109773Z allocations: 399676
2021-09-05T07:14:24.4110563Z allocations: 397190
2021-09-05T07:14:24.4111158Z allocations: 410792
2021-09-05T07:14:24.4111562Z allocations: 413994
2021-09-05T07:14:24.4111969Z total allocations: 1621652
2021-09-05T07:14:24.4112418Z allocator free count: 172177
2021-09-05T07:14:24.4113133Z # To suppress the following error report, specify this argument
2021-09-05T07:14:24.4114288Z # after -XX: or in .hotspotrc:  SuppressErrorAt=/test_ptrQueueBufferAllocator.cpp:115
2021-09-05T07:14:24.4114996Z #
2021-09-05T07:14:24.4115593Z # A fatal error has been detected by the Java Runtime Environment:
2021-09-05T07:14:24.4116088Z #
2021-09-05T07:14:24.4116944Z #  Internal Error (/home/runner/work/SapMachine/SapMachine/jdk/test/hotspot/gtest/gc/shared/test_ptrQueueBufferAllocator.cpp:115), pid=2002, tid=2002
2021-09-05T07:14:24.4118035Z #  assert(_completed_list.empty()) failed: completed list not empty
2021-09-05T07:14:24.4118554Z #
2021-09-05T07:14:24.4119938Z # JRE version: OpenJDK Runtime Environment (18.0) (fastdebug build 18-internal+0-tstuefe-8fc8374bdbcd511e057c8c50fe73c9ad39be9ebf)
2021-09-05T07:14:24.4122244Z # Java VM: OpenJDK Server VM (fastdebug 18-internal+0-tstuefe-8fc8374bdbcd511e057c8c50fe73c9ad39be9ebf, mixed mode, tiered, g1 gc, linux-x86)
2021-09-05T07:14:24.4123538Z # Problematic frame:
2021-09-05T07:14:24.4124431Z # V  [libjvm.so+0x50d403]  PtrQueueBufferAllocatorTest_stress_free_list_allocator_vm_Test::TestBody()+0x1443
2021-09-05T07:14:24.4125182Z #
2021-09-05T07:14:24.4126700Z # Core dump will be written. Default location: Core dumps may be processed with ""/usr/share/apport/apport %p %s %c %d %P %E"" (or dumping to /home/runner/work/SapMachine/SapMachine/build/run-test-prebuilt/test-support/jtreg_test_hotspot_jtreg_tier1_common/scratch/core.2002)
2021-09-05T07:14:24.4127878Z #
2021-09-05T07:14:24.4128357Z # An error report file with more information is saved as:
2021-09-05T07:14:24.4129557Z # /home/runner/work/SapMachine/SapMachine/build/run-test-prebuilt/test-support/jtreg_test_hotspot_jtreg_tier1_common/scratch/hs_err_pid2002.log
2021-09-05T07:14:24.4130370Z #
2021-09-05T07:14:24.4130837Z # If you would like to submit a bug report, please visit:
2021-09-05T07:14:24.4131586Z #   https://bugreport.java.com/bugreport/crash.jsp
2021-09-05T07:14:24.4132375Z # The crash happened outside the Java Virtual Machine in native code.
2021-09-05T07:14:24.4133068Z # See problematic frame for where to report the bug.
2021-09-05T07:14:24.4133526Z #
```

Feel free to access the original GHA results:

https://github.com/SAP/SapMachine/pull/942/checks?check_run_id=3516709429",,,,,,,,,,,JDK-8280556,JDK-8281018,,,,,,,,,,,,,,,,,,JDK-8269073,,,,,,,,,,,,,,,,,,,,x86,,,,,,,,,,,,,,"0|i2u95n:",9223372036854775807,b18,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6b00f96c,,,,,,,,,"2021-09-06 05:19;tschatzl;Maybe the same as JDK-8273383.;;;","2021-09-06 09:35;kbarrett;I think this is a test bug.

The test requests the allocator threads to stop and waits for them to do so.  It then requests the processing threads to stop and waits for them to do so.  However, there's nothing in the processing thread stop handling that ensures all the buffers in the CompletedList have been processed before the last such thread finishes; they just stop as soon as the detect the request, whether there are still buffers in the completed list or not. If there happen to be buffers still in the completed list after that, the later assertion that the list is empty will fail.  This is just a simple race, that could fail at any time, and I'm kind of surprised it hasn't failed before.

Let's say for simplicity that we're down to one remaining alloc thread and the queue is currently empty.  All of the processing threads try to pop and get null, and then ""delay"" (e.g. this is where the timing window opens).  The one remaining alloc thread pushes a new buffer, then notices the termination request and exits.  The master thread then requests the processing threads to stop.  All of the processing threads notice the stop request and stop, without noticing that lingering buffer.

So I guess that might be pretty rare.  It turns out that it has been seen before, but not reported, by Thomas in a github test a while ago.

This suggest that this failure is not related to JDK-8273383.
;;;","2021-09-08 00:33;tschatzl;Makes sense, I removed the link to JDK-8273383.;;;","2021-10-06 04:16;roboduke;Changeset: c80a6127
Author:    Kim Barrett <kbarrett@openjdk.org>
Date:      2021-10-06 11:14:26 +0000
URL:       https://git.openjdk.java.net/jdk/commit/c80a612709f1e483575e2843c1f0ea84e1b9a257
;;;","2022-01-28 08:06;goetz;Fix request [17u]

I backport this for parity with 17.0.3-oracle.
No risk, only a test change.
Clean backport. SAP nightly testing passes;;;","2022-01-28 08:14;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk17u-dev/pull/128
Date: 2022-01-28 16:05:53 +0000;;;",,,,,,,,,,,,,,,,,,,,
Zero: Disable vtable/itableStub gtests,JDK-8273376,5058018,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,shade,shade,shade,2021-09-06 02:56,2022-08-26 06:43,2023-10-01 09:57,2021-09-07 01:53,11,17,18,,,,,18,hotspot,,0,jdk17u-fix-request,jdk17u-fix-yes,noreg-self,redhat-interest,testbug,,,,,,,,,,,,,,,,,"Zero does not support vtable/itableStubs, so a generic gtest fails:

[----------] 3 tests from code
[ RUN      ] code.dependency_context_vm
[       OK ] code.dependency_context_vm (0 ms)
[ RUN      ] code.vtableStubs_vm

# A fatal error has been detected by the Java Runtime Environment:
#
#  Internal Error (/home/shade/trunks/jdk/src/hotspot/cpu/zero/vtableStubs_zero.cpp:31), pid=584340, tid=584340
#  Error: ShouldNotCall()

This is a test bug, the test should be disabled for Zero.",,,,,,,,,,,JDK-8274760,,,,,,,,,,,,JDK-8273373,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2u943:",9223372036854775807,b14,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,,,"2021-09-07 01:53;roboduke;Changeset: a522d6b5
Author:    Aleksey Shipilev <shade@openjdk.org>
Date:      2021-09-07 08:52:53 +0000
URL:       https://git.openjdk.java.net/jdk/commit/a522d6b53cd841b4bfe87eac5778c9e5cdf5e90f
;;;","2021-10-04 06:48;shade;Fix Request (17u)

Fixes all remaining failing gtests for Zero. Applies cleanly.;;;",,,,,,,,,,,,,,,,,,,,,,,,
Remove redundant 'new String' calls after concatenation in java.desktop,JDK-8273375,5058016,Bug,Resolved,JDK,JDK,software,duke,,,P5,Fixed,aturbanov,aturbanov,aturbanov,2021-09-06 02:13,2021-09-27 07:16,2023-10-01 09:57,2021-09-08 07:29,17,18,,,,,,18,client-libs,,0,azul-interest,cleanup,jdk17u-fix-request,jdk17u-fix-yes,noreg-cleanup,,,,,,,,,,,,,,,,,"Result of string concatenation is a newly created String object. There is no need it wrap it in another 'new String' call.
Such calls are confusing and produce warnings in IDE. Without them code is easier to read.",,,,,,,,,,,JDK-8274375,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2u93n:",9223372036854775807,b14,,,,,,,,,,,,"2021-09-07 13:11;aivanov;I don't think this issue is an enhancement, I've changed it to bug type.;;;","2021-09-08 07:29;roboduke;Changeset: 59c9f750
Author:    Andrey Turbanov <turbanoff@gmail.com>
Committer: Alexey Ivanov <aivanov@openjdk.org>
Date:      2021-09-08 14:28:07 +0000
URL:       https://git.openjdk.java.net/jdk/commit/59c9f750414e4f131c906a5bc20f32f2f9cfe9ec
;;;","2021-09-24 09:18;omikhaltcova;Fix request (17u) - will label after testing completed.

I'd like to backport this fix to jdk17u. 
The original patch applied cleanly.;;;",,,,,,,,,,,,,,,,,,,,,,,
Zero: Cannot invoke JVM in primordial threads on Zero,JDK-8273373,5058014,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,shade,shade,shade,2021-09-06 01:48,2021-10-05 01:03,2023-10-01 09:57,2021-09-14 08:51,11,17,18,,,,,18,hotspot,,0,jdk11u-fix-request,jdk11u-fix-yes,jdk17u-fix-request,jdk17u-fix-yes,oraclejdk-na,redhat-interest,,,,,,,,,,,,,,,,"Running current Zero with gtests:

$ CONF=linux-x86_64-zero-fastdebug make exploded-test TEST=jtreg:gtest/

# A fatal error has been detected by the Java Runtime Environment:
#
#  Internal Error (/home/shade/trunks/jdk/src/hotspot/os/linux/os_linux.cpp:3227), pid=562477, tid=562477
#  assert(imin <= imax) failed: Unexpected page size

The actual problem is underflow in os::pd_create_stack_guard_pages() here:

stack_extent = (uintptr_t) get_stack_commited_bottom(
os::Linux::initial_thread_stack_bottom(),
(size_t)addr - stack_extent);

For Zero x86_64, these are off by a page, so the (addr - stack_extent) underflows, then get_stack_commited_bottom gets called with super-large size, which then fails the assert above. The assert should check for underflow specifically.

[0.002s][warning][os] Addr: 0x00007fff35e73000, stack_extent: 0x00007fff35e74000

I believe the root cause is primordial thread (which is why it is only seen in gtests?) having a weird stack base, which is explicitly handled by the shared code commonned by JDK-8169373. I see little reason not to use the same code for Zero. There is the IA64 block in Zero version that handles the double stack on Itanium, but I think we can sacrifice it since Itanium is discontinued.",,,,,,,,,,,JDK-8274700,JDK-8274762,,,,,,,,,,,,JDK-8273376,JDK-8273487,,,,,,,,,,JDK-8169373,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2u937:",9223372036854775807,b15,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,,,"2021-09-14 08:51;roboduke;Changeset: 0f31d0fb
Author:    Aleksey Shipilev <shade@openjdk.org>
Date:      2021-09-14 15:49:00 +0000
URL:       https://git.openjdk.java.net/jdk/commit/0f31d0fb2c0d5db305e75e1d61bcc44de3e77839
;;;","2021-10-01 07:54;shade;Fix Request (17u)

This fixes the gtests and other tests running Zero in primordial threads. Patch applies cleanly, tests start to pass.;;;","2021-10-04 07:06;shade;Fix Request (11u)

Same reason as for 17u.;;;",,,,,,,,,,,,,,,,,,,,,,,
[Vector API] Crash in Assembler::evpermd when code-gen for masked rearrange operation on AVX512,JDK-8273371,5058012,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,jiefu,jiefu,jiefu,2021-09-06 01:19,2021-09-06 23:56,2023-10-01 09:57,2021-09-06 23:56,repo-panama,,,,,,,,hotspot,,0,tencent-interest,vectorIntrinsics+mask,,,,,,,,,,,,,,,,,,,,"Two tests crash in Assembler::evpermd for masked rearrange operation on AVX512 with -ea -esa -Xcomp -XX:CompileThreshold=100
  jdk/incubator/vector/Float128VectorTests.java
  jdk/incubator/vector/Int128VectorTests.java

```
test Float128VectorTests.RearrangeFloat128VectorTests(float[-i * 5], shuffle[random]): success
test Float128VectorTests.RearrangeFloat128VectorTests(float[i * 5], shuffle[random]): success
test Float128VectorTests.RearrangeFloat128VectorTests(float[i + 1], shuffle[random]): success
test Float128VectorTests.RearrangeFloat128VectorTests(float[cornerCaseValue(i)], shuffle[random]): success
# To suppress the following error report, specify this argument
# after -XX: or in .hotspotrc:  SuppressErrorAt=/assembler_x86.cpp:8965
#
# A fatal error has been detected by the Java Runtime Environment:
#
#  Internal Error (/panama-vector/src/hotspot/cpu/x86/assembler_x86.cpp:8965), pid=25198, tid=25213
#  Error: assert(VM_Version::supports_evex() && vector_len > AVX_128bit) failed
#
# JRE version: OpenJDK Runtime Environment (18.0) (fastdebug build 18-internal+0-adhoc.jvm.panama-vector)
# Java VM: OpenJDK 64-Bit Server VM (fastdebug 18-internal+0-adhoc.jvm.panama-vector, compiled mode, sharing, compressed oops, compressed class ptrs, g1 gc, linux-amd64)
# Problematic frame:
# V  [libjvm.so+0x63a988]  Assembler::evpermd(XMMRegisterImpl*, KRegisterImpl*, XMMRegisterImpl*, XMMRegisterImpl*, bool, int)+0x148
#
```

```
test Int128VectorTests.RearrangeInt128VectorTests(int[-i * 5], shuffle[random]): success
test Int128VectorTests.RearrangeInt128VectorTests(int[i * 5], shuffle[random]): success
test Int128VectorTests.RearrangeInt128VectorTests(int[i + 1], shuffle[random]): success
test Int128VectorTests.RearrangeInt128VectorTests(int[cornerCaseValue(i)], shuffle[random]): success
# To suppress the following error report, specify this argument
# after -XX: or in .hotspotrc:  SuppressErrorAt=/assembler_x86.cpp:8965
#
# A fatal error has been detected by the Java Runtime Environment:
#
#  Internal Error (/panama-vector/src/hotspot/cpu/x86/assembler_x86.cpp:8965), pid=20494, tid=20511
#  Error: assert(VM_Version::supports_evex() && vector_len > AVX_128bit) failed
#
# JRE version: OpenJDK Runtime Environment (18.0) (fastdebug build 18-internal+0-adhoc.jvm.panama-vector)
# Java VM: OpenJDK 64-Bit Server VM (fastdebug 18-internal+0-adhoc.jvm.panama-vector, compiled mode, sharing, compressed oops, compressed class ptrs, g1 gc, linux-amd64)
# Problematic frame:
# V  [libjvm.so+0x63a988]  Assembler::evpermd(XMMRegisterImpl*, KRegisterImpl*, XMMRegisterImpl*, XMMRegisterImpl*, bool, int)+0x148
#
```",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2u92r:",9223372036854775807,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Preferences.exportSubtree() generates invalid XML if value contains control char,JDK-8273370,5057998,Bug,Closed,JDK,JDK,software,duke,,,P4,Fixed,joehw,webbuggrp,webbuggrp,2021-09-05 04:46,2022-08-17 11:26,2023-10-01 09:57,2022-03-25 11:12,11,16,18,,,,,19,core-libs,,0,dcsaw,reproducer-yes,webbug,,,,,,,,,,,,,,,,,,,"A DESCRIPTION OF THE PROBLEM :
Preferences.exportSubtree() allows users to export XML that cannot later be imported via Preferences.importPreferences() because the former correctly (?) XML encodes control characters (e.g. \u0018 becomes &#24;) just fine, but the parse will complain about invalid XML characters on import.

STEPS TO FOLLOW TO REPRODUCE THE PROBLEM :
See test case.

EXPECTED VERSUS ACTUAL BEHAVIOR :
EXPECTED -
Preferences export followed by import should work, or at least fail fast on export, or do some Preferences API specific custom encoding/decoding.
ACTUAL -
Exception in thread ""main"" java.util.prefs.InvalidPreferencesFormatException: org.xml.sax.SAXParseException; lineNumber: 8; columnNumber: 39; Character reference ""&#24"" is an invalid XML character.
	at java.prefs/java.util.prefs.XmlSupport.importPreferences(XmlSupport.java:216)
	at java.prefs/java.util.prefs.Preferences.importPreferences(Preferences.java:1289)
	at test.Main.main(Main.java:21)
Caused by: org.xml.sax.SAXParseException; lineNumber: 8; columnNumber: 39; Character reference ""&#24"" is an invalid XML character.
	at java.xml/com.sun.org.apache.xerces.internal.util.ErrorHandlerWrapper.createSAXParseException(ErrorHandlerWrapper.java:204)
	at java.xml/com.sun.org.apache.xerces.internal.util.ErrorHandlerWrapper.fatalError(ErrorHandlerWrapper.java:178)
	at java.xml/com.sun.org.apache.xerces.internal.impl.XMLErrorReporter.reportError(XMLErrorReporter.java:400)
	at java.xml/com.sun.org.apache.xerces.internal.impl.XMLErrorReporter.reportError(XMLErrorReporter.java:327)
	at java.xml/com.sun.org.apache.xerces.internal.impl.XMLScanner.reportFatalError(XMLScanner.java:1471)
	at java.xml/com.sun.org.apache.xerces.internal.impl.XMLScanner.scanCharReferenceValue(XMLScanner.java:1344)
	at java.xml/com.sun.org.apache.xerces.internal.impl.XMLScanner.scanAttributeValue(XMLScanner.java:895)
	at java.xml/com.sun.org.apache.xerces.internal.impl.XMLDocumentFragmentScannerImpl.scanAttribute(XMLDocumentFragmentScannerImpl.java:1512)
	at java.xml/com.sun.org.apache.xerces.internal.impl.XMLDocumentFragmentScannerImpl.scanStartElement(XMLDocumentFragmentScannerImpl.java:1353)
	at java.xml/com.sun.org.apache.xerces.internal.impl.XMLDocumentFragmentScannerImpl$FragmentContentDriver.next(XMLDocumentFragmentScannerImpl.java:2710)
	at java.xml/com.sun.org.apache.xerces.internal.impl.XMLDocumentScannerImpl.next(XMLDocumentScannerImpl.java:605)
	at java.xml/com.sun.org.apache.xerces.internal.impl.XMLDocumentFragmentScannerImpl.scanDocument(XMLDocumentFragmentScannerImpl.java:534)
	at java.xml/com.sun.org.apache.xerces.internal.parsers.XML11Configuration.parse(XML11Configuration.java:888)
	at java.xml/com.sun.org.apache.xerces.internal.parsers.XML11Configuration.parse(XML11Configuration.java:824)
	at java.xml/com.sun.org.apache.xerces.internal.parsers.XMLParser.parse(XMLParser.java:141)
	at java.xml/com.sun.org.apache.xerces.internal.parsers.DOMParser.parse(DOMParser.java:246)
	at java.xml/com.sun.org.apache.xerces.internal.jaxp.DocumentBuilderImpl.parse(DocumentBuilderImpl.java:339)
	at java.prefs/java.util.prefs.XmlSupport.loadPrefsDoc(XmlSupport.java:250)
	at java.prefs/java.util.prefs.XmlSupport.importPreferences(XmlSupport.java:199)
	... 2 more


---------- BEGIN SOURCE ----------
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.nio.file.Files;
import java.util.prefs.Preferences;

public class Main {

	public static void main(String[] args) throws Exception {
		Preferences p = Preferences.userRoot().node(""test"");
		p.put(""key"", ""[\u0018\u0019]"");

		File f = new File(""preferences.xml"");
		p.exportSubtree(new FileOutputStream(f));

		System.out.println(Files.readString(f.toPath()));

		Preferences.importPreferences(new FileInputStream(f));

	}

}
---------- END SOURCE ----------

CUSTOMER SUBMITTED WORKAROUND :
Ask users not to paste control characters into text fields that happens to be persisted via the Preferences API.

FREQUENCY : always


",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"2021-09-05 20:56;tongwan;Main.java;https://bugs.openjdk.org/secure/attachment/96337/Main.java",,,,,generic,,,,,,,,,generic,,,,,"0|i2u8zn:",9223372036854775807,b16,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@38ded199,,,,,,,Verified,,"2021-09-05 21:00;tongwan;The observations on Windows 10:
JDK 11: Failed, InvalidPreferencesFormatException thrown
JDK 16: Failed.
JDK 18ea+1: Failed.;;;","2022-03-24 11:32;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/7945
Date: 2022-03-24 18:21:05 +0000;;;","2022-03-25 11:12;dukebot;Changeset: f4fd53d0
Author:    Joe Wang <joehw@openjdk.org>
Date:      2022-03-25 18:10:45 +0000
URL:       https://git.openjdk.java.net/jdk/commit/f4fd53d0aee67319bf2c7bcaa671c2e97e66383f
;;;",,,,,,,,,,,,,,,,,,,,,,,
Computing micros between two instants unexpectedly overflows for some cases,JDK-8273369,5057984,Bug,Closed,JDK,JDK,software,duke,,,P4,Fixed,naoto,webbuggrp,webbuggrp,2021-09-04 00:29,2023-05-17 09:11,2023-10-01 09:57,2021-09-10 09:38,11,17,,,,,,18,core-libs,,0,additional-information-received,amazon-interest,dcsaw,reproducer-yes,webbug,,,,,,,,,,,,,,,,,"A DESCRIPTION OF THE PROBLEM :
When the distance between two instants is larger that Long.MAX_VALUE nanos, but less than Long.MAX_VALUE micros, ChronoUnit.MICROS.between() fails. This is due to the computation performed, which in OpenJDK 11 is in java.time.Instant, line 1148: nanosUntil(end) / 1000. nanosUntil overflows and throws an arithmetic exception.

STEPS TO FOLLOW TO REPRODUCE THE PROBLEM :
Instant gregorianEpoch = Instant.EPOCH.minusSeconds(12219292800l);
Instant now = Instant.now();
long micros = ChronoUnit.MICROS.between(gregorianEpoch, now); -> Math.addExact throws ArithmeticException

EXPECTED VERSUS ACTUAL BEHAVIOR :
EXPECTED -
Correct long value returned
ACTUAL -
ArithmeticException

FREQUENCY : always


",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8307466,,,,,,,,,,"2021-09-05 20:44;tongwan;Main.java;https://bugs.openjdk.org/secure/attachment/96336/Main.java",,,,,generic,,,,,,,,,generic,,,,,"0|i2u8wj:",9223372036854775807,b15,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@a9a7756,,,,,,,Verified,,"2021-09-05 20:44;tongwan;The observations on Windows 10:
JDK 11: Failed,  ArithmeticException thrown
From the javadoc:
https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/time/temporal/TemporalUnit.html#between(java.time.temporal.Temporal,java.time.temporal.Temporal)
ArithmeticException is thrown if numeric overflow occurs

This incident can be closed as not an issue.;;;","2021-09-07 11:24;naoto;Directly calling `nanosUntil(end)` will throw an ArithmeticException in the cases described. (in multiplyExact() method). Avoid calculating directly with nano unit but in micro unit will solve the issue.;;;","2021-09-10 09:38;roboduke;Changeset: 81d2acee
Author:    Naoto Sato <naoto@openjdk.org>
Date:      2021-09-10 16:36:57 +0000
URL:       https://git.openjdk.java.net/jdk/commit/81d2acee57188a4507c798b46b0bd129dc302fec
;;;","2021-09-23 03:07;tongwan;Requested the submitter verify the fix by downloading the latest version of JDK 18 from https://jdk.java.net/18/;;;","2021-09-23 07:03;tongwan;Verification from the submitter:
I confirm the fix with the latest build of JDK 18.
Thank you and your fellow developers for an amazing response to this bug report!
;;;",,,,,,,,,,,,,,,,,,,,,
[Vector API] Fix a regression of rearrange intrinsic after JDK-8272479,JDK-8273367,5058009,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,jiefu,jiefu,jiefu,2021-09-05 19:32,2021-09-07 18:20,2023-10-01 09:57,2021-09-07 18:20,repo-panama,,,,,,,,hotspot,,0,tencent-interest,vectorIntrinsics+mask,,,,,,,,,,,,,,,,,,,,"After JDK-8272479, the following crash was observed on x86 with `-ea -esa -Xcomp -XX:CompileThreshold=100`

test Double256VectorTests.RearrangeDouble256VectorTests(double[-i * 5], shuffle[random]): success
test Double256VectorTests.RearrangeDouble256VectorTests(double[i * 5], shuffle[random]): success
test Double256VectorTests.RearrangeDouble256VectorTests(double[i + 1], shuffle[random]): success
test Double256VectorTests.RearrangeDouble256VectorTests(double[cornerCaseValue(i)], shuffle[random]): success
o114  ReplicateD  === _ o73  [[o340 ]]  #vectory[4]:{double}

--N: o114  ReplicateD  === _ o73  [[o340 ]]  #vectory[4]:{double}

   --N: o73  ConI  === o0  [[o166 o173 o114 ]]  #int:0
   IMMI  10  IMMI
   IMMI_0  0  IMMI_0
   IMMI2  0  IMMI2
   IMMU7  5  IMMU7
   IMMI8  5  IMMI8
   IMMU8  5  IMMU8
   IMMI16  10  IMMI16
   IMMU31  0  IMMU31
   RREGI  50  loadConI0
   RAX_REGI  50  loadConI0
   RBX_REGI  50  loadConI0
   RCX_REGI  50  loadConI0
   RDX_REGI  50  loadConI0
   RDI_REGI  50  loadConI0
   NO_RAX_RDX_REGI  50  loadConI0
   STACKSLOTI  150  storeSSI

Affected tests:
jdk/incubator/vector/Double256VectorTests.java
jdk/incubator/vector/DoubleMaxVectorTests.java
jdk/incubator/vector/Float128VectorTests.java
jdk/incubator/vector/Float256VectorTests.java
jdk/incubator/vector/FloatMaxVectorTests.java
jdk/incubator/vector/Long256VectorTests.java
jdk/incubator/vector/LongMaxVectorTests.java",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8272479,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2u923:",9223372036854775807,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
[testbug] javax/swing/UIDefaults/6302464/bug6302464.java fails on macOS12,JDK-8273366,5058007,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,psadhukhan,prr,prr,2021-09-05 13:55,2022-01-14 04:23,2023-10-01 09:57,2021-09-14 23:19,17,18,,,,,,18,client-libs,,0,jdk11u-fix-request,jdk11u-fix-yes,jdk17u-fix-request,jdk17u-fix-yes,macos,macos12,sn_101,sn_102,testbug,,,,,,,,,,,,,"javax/swing/UIDefaults/6302464/bug6302464.java fails as follows

jdk17/Contents/Home/bin/java -Djava.awt.headless=true bug6302464

Exception in thread ""main"" java.lang.reflect.InvocationTargetException
	at java.desktop/java.awt.EventQueue.invokeAndWait(EventQueue.java:1369)
	at java.desktop/java.awt.EventQueue.invokeAndWait(EventQueue.java:1344)
	at java.desktop/javax.swing.SwingUtilities.invokeAndWait(SwingUtilities.java:1480)
	at bug6302464.main(bug6302464.java:56)
Caused by: java.lang.RuntimeException: Wrong number of antialiased colors.
	at bug6302464.testAntialiasingHints(bug6302464.java:143)
	at bug6302464.testAntialiasingProperties(bug6302464.java:62)
	at java.desktop/java.awt.event.InvocationEvent.dispatch(InvocationEvent.java:308)
	at java.desktop/java.awt.EventQueue.dispatchEventImpl(EventQueue.java:771)
	at java.desktop/java.awt.EventQueue$4.run(EventQueue.java:722)
	at java.desktop/java.awt.EventQueue$4.run(EventQueue.java:716)
	at java.base/java.security.AccessController.doPrivileged(AccessController.java:399)
	at java.base/java.security.ProtectionDomain$JavaSecurityAccessImpl.doIntersectionPrivilege(ProtectionDomain.java:86)
	at java.desktop/java.awt.EventQueue.dispatchEvent(EventQueue.java:741)
	at java.desktop/java.awt.EventDispatchThread.pumpOneEventForFilters(EventDispatchThread.java:203)
	at java.desktop/java.awt.EventDispatchThread.pumpEventsForFilter(EventDispatchThread.java:124)
	at java.desktop/java.awt.EventDispatchThread.pumpEventsForHierarchy(EventDispatchThread.java:113)
	at java.desktop/java.awt.EventDispatchThread.pumpEvents(EventDispatchThread.java:109)
	at java.desktop/java.awt.EventDispatchThread.pumpEvents(EventDispatchThread.java:101)
	at java.desktop/java.awt.EventDispatchThread.run(EventDispatchThread.java:90)


seems to have some
choices where it has expectations that if
        if (!isMacOSX14 && !isMacOSXBigSur) {
then we are on some older release .. 

the problem is this 
            } else if (version.startsWith(""11."")) {
                isMacOSXBigSur = true;
            }

I think it means 11 or later .. 

",,,,,,,,,,,JDK-8278136,JDK-8280011,JDK-8278477,JDK-8277894,,,,,,,,,,,,,,,,,,JDK-8273619,,,JDK-8199079,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2u91n:",9223372036854775807,b15,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@568a5b31,,,,,,,,,"2021-09-14 23:19;roboduke;Changeset: febcc72a
Author:    Prasanta Sadhukhan <psadhukhan@openjdk.org>
Date:      2021-09-15 05:43:03 +0000
URL:       https://git.openjdk.java.net/jdk/commit/febcc72a549e973de4649503fc686fc520e3b3cd
;;;","2021-12-08 01:27;mdoerr;Fix Request (11u): 
Should get backported for parity with 11.0.15-oracle. Applies cleanly on top of JDK-8199079. Test has passed.;;;","2022-01-07 04:31;goetz;Fix request [17u]

I am adding this comment on behalf of Johannes Bechberger, a colleague who
will now also contribute to OpenJDK for SAP.
He backported this for parity with 17.0.3-oracle.
No risk, only a test change.
Clean backport.
Test passes on macOS 12. SAP nightly testing passed.
PR: https://github.com/openjdk/jdk17u-dev/pull/67;;;","2022-01-13 18:21;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk17u-dev/pull/67
Date: 2022-01-07 11:44:32 +0000;;;",,,,,,,,,,,,,,,,,,,,,,
InfoOptsTest is failing in tier1,JDK-8273361,5057999,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,shade,jpai,jpai,2021-09-05 06:02,2021-10-04 03:15,2023-10-01 09:57,2021-09-08 09:37,17.0.2,18,,,,,,18,tools,,0,apache-ant-found,jdk17u-fix-request,jdk17u-fix-yes,testbug,tier1,,,,,,,,,,,,,,,,,"As seen in the GitHub actions jobs in an unrelated PR https://github.com/openjdk/jdk/pull/5372#issuecomment-913150215 the InfoOptsTest is consistently failing on all OS variants in tier1. It's likely related to this commit which went in recently https://github.com/openjdk/jdk/commit/d05494f98bad351532cdb769c9da6b6e2359b16e

The logs show:

2021-09-04T16:37:24.7528210Z Running test testUniqueInfoOpts
2021-09-04T16:37:24.7630470Z Main [--help, --help] []
2021-09-04T16:37:24.7635480Z rc:0
2021-09-04T16:37:24.7736940Z javac/DIRECT:
2021-09-04T16:37:24.7762440Z Usage: javac <options> <source files>
2021-09-04T16:37:24.7863980Z where possible options include:
2021-09-04T16:37:24.7892480Z   @<filename>                  Read options and filenames from file
2021-09-04T16:37:24.7986700Z   -Akey[=value]                Options to pass to annotation processors
2021-09-04T16:37:24.8003100Z   --add-modules <module>(,<module>)*
2021-09-04T16:37:24.8030720Z         Root modules to resolve in addition to the initial modules, or all modules
2021-09-04T16:37:24.8106550Z         on the module path if <module> is ALL-MODULE-PATH.
2021-09-04T16:37:24.8108330Z   --boot-class-path <path>, -bootclasspath <path>
2021-09-04T16:37:24.8110830Z         Override location of bootstrap class files
2021-09-04T16:37:24.8112470Z   --class-path <path>, -classpath <path>, -cp <path>
2021-09-04T16:37:24.8113590Z         Specify where to find user class files and annotation processors
2021-09-04T16:37:24.8115140Z   -d <directory>               Specify where to place generated class files
2021-09-04T16:37:24.8116530Z   -deprecation
2021-09-04T16:37:24.8117490Z         Output source locations where deprecated APIs are used
2021-09-04T16:37:24.8118770Z   --enable-preview
2021-09-04T16:37:24.8120330Z         Enable preview language features. To be used in conjunction with either -source or --release.
2021-09-04T16:37:24.8129810Z   -encoding <encoding>         Specify character encoding used by source files
2021-09-04T16:37:24.8136440Z   -endorseddirs <dirs>         Override location of endorsed standards path
2021-09-04T16:37:24.8239190Z   -extdirs <dirs>              Override location of installed extensions
2021-09-04T16:37:24.8251400Z   -g                           Generate all debugging info
2021-09-04T16:37:24.8290250Z   -g:{lines,vars,source}       Generate only some debugging info
2021-09-04T16:37:24.8291910Z   -g:none                      Generate no debugging info
2021-09-04T16:37:24.8293200Z   -h <directory>
2021-09-04T16:37:24.8294170Z         Specify where to place generated native header files
2021-09-04T16:37:24.8296270Z   --help, -help, -?            Print this help message
2021-09-04T16:37:24.8297720Z   --help-extra, -X             Print help on extra options
2021-09-04T16:37:24.8299160Z   -implicit:{none,class}
2021-09-04T16:37:24.8300250Z         Specify whether or not to generate class files for implicitly referenced files
2021-09-04T16:37:24.8301820Z   -J<flag>                     Pass <flag> directly to the runtime system
2021-09-04T16:37:24.8303230Z   --limit-modules <module>(,<module>)*
2021-09-04T16:37:24.8304210Z         Limit the universe of observable modules
2021-09-04T16:37:24.8305570Z   --module <module>(,<module>)*, -m <module>(,<module>)*
2021-09-04T16:37:24.8306630Z         Compile only the specified module(s), check timestamps
2021-09-04T16:37:24.8307980Z   --module-path <path>, -p <path>
2021-09-04T16:37:24.8309050Z         Specify where to find application modules
2021-09-04T16:37:24.8310500Z   --module-source-path <module-source-path>
2021-09-04T16:37:24.8311660Z         Specify where to find input source files for multiple modules
2021-09-04T16:37:24.8313050Z   --module-version <version>
2021-09-04T16:37:24.8314040Z         Specify version of modules that are being compiled
2021-09-04T16:37:24.8315390Z   -nowarn                      Generate no warnings
2021-09-04T16:37:24.8316640Z   -parameters
2021-09-04T16:37:24.8317620Z         Generate metadata for reflection on method parameters
2021-09-04T16:37:24.8361300Z   -proc:{none,only}
2021-09-04T16:37:24.8362510Z         Control whether annotation processing and/or compilation is done.
2021-09-04T16:37:24.8364150Z   -processor <class1>[,<class2>,<class3>...]
2021-09-04T16:37:24.8365410Z         Names of the annotation processors to run; bypasses default discovery process
2021-09-04T16:37:24.8366910Z   --processor-module-path <path>
2021-09-04T16:37:24.8367990Z         Specify a module path where to find annotation processors
2021-09-04T16:37:24.8369540Z   --processor-path <path>, -processorpath <path>
2021-09-04T16:37:24.8370620Z         Specify where to find annotation processors
2021-09-04T16:37:24.8371840Z   -profile <profile>
2021-09-04T16:37:24.8372800Z         Check that API used is available in the specified profile
2021-09-04T16:37:24.8374080Z   --release <release>
2021-09-04T16:37:24.8375110Z         Compile for the specified Java SE release. Supported releases: 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18
2021-09-04T16:37:24.8377060Z   -s <directory>               Specify where to place generated source files
2021-09-04T16:37:24.8378940Z   --source <release>, -source <release>
2021-09-04T16:37:24.8380150Z         Provide source compatibility with the specified Java SE release. Supported releases: 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18
2021-09-04T16:37:24.8381690Z   --source-path <path>, -sourcepath <path>
2021-09-04T16:37:24.8382670Z         Specify where to find input source files
2021-09-04T16:37:24.8383990Z   --system <jdk>|none          Override location of system modules
2021-09-04T16:37:24.8385370Z   --target <release>, -target <release>
2021-09-04T16:37:24.8386570Z         Generate class files suitable for the specified Java SE release. Supported releases: 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18
2021-09-04T16:37:24.8388070Z   --upgrade-module-path <path>
2021-09-04T16:37:24.8389040Z         Override location of upgradeable modules
2021-09-04T16:37:24.8390480Z   -verbose                     Output messages about what the compiler is doing
2021-09-04T16:37:24.8391930Z   --version, -version          Version information
2021-09-04T16:37:24.8393380Z   -Werror                      Terminate compilation if warnings occur
2021-09-04T16:37:24.8394150Z 
2021-09-04T16:37:24.8395160Z Main [-X, -X] []
2021-09-04T16:37:24.8395860Z rc:0
2021-09-04T16:37:24.8396520Z javac/DIRECT:
2021-09-04T16:37:24.8397830Z   --add-exports <module>/<package>=<other-module>(,<other-module>)*
2021-09-04T16:37:24.8399140Z         Specify a package to be considered as exported from its defining module
2021-09-04T16:37:24.8400780Z         to additional modules, or to all unnamed modules if <other-module> is ALL-UNNAMED.
2021-09-04T16:37:24.8403050Z   --add-reads <module>=<other-module>(,<other-module>)*
2021-09-04T16:37:24.8404200Z         Specify additional modules to be considered as required by a given module.
2021-09-04T16:37:24.8405750Z         <other-module> may be ALL-UNNAMED to require the unnamed module.
2021-09-04T16:37:24.8407430Z   --default-module-for-created-files <module-name>
2021-09-04T16:37:24.8408890Z         Fallback target module for files created by annotation processors, if none specified or inferred.
2021-09-04T16:37:24.8410640Z   -Djava.endorsed.dirs=<dirs>  Override location of endorsed standards path
2021-09-04T16:37:24.8412280Z   -Djava.ext.dirs=<dirs>       Override location of installed extensions
2021-09-04T16:37:24.8413820Z   --help-lint                  Print the supported keys for -Xlint
2021-09-04T16:37:24.8415200Z   --patch-module <module>=<file>(:<file>)*
2021-09-04T16:37:24.8416210Z         Override or augment a module with classes and resources
2021-09-04T16:37:24.8417110Z         in JAR files or directories
2021-09-04T16:37:24.8418510Z   -Xbootclasspath:<path>       Override location of bootstrap class files
2021-09-04T16:37:24.8420080Z   -Xbootclasspath/a:<path>     Append to the bootstrap class path
2021-09-04T16:37:24.8421630Z   -Xbootclasspath/p:<path>     Prepend to the bootstrap class path
2021-09-04T16:37:24.8423170Z   -Xdiags:{compact,verbose}    Select a diagnostic mode
2021-09-04T16:37:24.8424430Z   -Xdoclint
2021-09-04T16:37:24.8425370Z         Enable recommended checks for problems in javadoc comments
2021-09-04T16:37:24.8426730Z   -Xdoclint:(all|none|[-]<group>)[/<access>]
2021-09-04T16:37:24.8427770Z         Enable or disable specific checks for problems in javadoc comments,
2021-09-04T16:37:24.8428920Z         where <group> is one of accessibility, html, missing, reference, or syntax,
2021-09-04T16:37:24.8430170Z         and <access> is one of public, protected, package, or private.
2021-09-04T16:37:24.8431760Z   -Xdoclint/package:[-]<packages>(,[-]<package>)*
2021-09-04T16:37:24.8432880Z         Enable or disable checks in specific packages. Each <package> is either the
2021-09-04T16:37:24.8434310Z         qualified name of a package or a package name prefix followed by .*, which
2021-09-04T16:37:24.8435940Z         expands to all sub-packages of the given package. Each <package> can be prefixed
2021-09-04T16:37:24.8438060Z         with - to disable checks for the specified package or packages.
2021-09-04T16:37:24.8439610Z   -Xlint                       Enable recommended warnings
2021-09-04T16:37:24.8440840Z   -Xlint:<key>(,<key>)*
2021-09-04T16:37:24.8441750Z         Warnings to enable or disable, separated by comma.
2021-09-04T16:37:24.8443150Z         Precede a key by - to disable the specified warning.
2021-09-04T16:37:24.8444570Z         Use --help-lint to see the supported keys.
2021-09-04T16:37:24.8446010Z   -Xmaxerrs <number>           Set the maximum number of errors to print
2021-09-04T16:37:24.8447550Z   -Xmaxwarns <number>          Set the maximum number of warnings to print
2021-09-04T16:37:24.8550380Z   -Xpkginfo:{always,legacy,nonempty}
2021-09-04T16:37:24.8636310Z         Specify handling of package-info files
2021-09-04T16:37:24.8639600Z   -Xplugin:""name args""
2021-09-04T16:37:24.8663470Z         Name and optional arguments for a plug-in to be run
2021-09-04T16:37:24.8665480Z   -Xprefer:{source,newer}
2021-09-04T16:37:24.8683700Z         Specify which file to read when both a source file and class file are found for an implicitly compiled class
2021-09-04T16:37:24.8728280Z   -Xprint
2021-09-04T16:37:24.8729520Z         Print out a textual representation of specified types
2021-09-04T16:37:24.8730900Z   -XprintProcessorInfo
2021-09-04T16:37:24.8731960Z         Print information about which annotations a processor is asked to process
2021-09-04T16:37:24.8733270Z   -XprintRounds
2021-09-04T16:37:24.8734200Z         Print information about rounds of annotation processing
2021-09-04T16:37:24.8736230Z   -Xstdout <filename>          Redirect standard output
2021-09-04T16:37:24.8736940Z 
2021-09-04T16:37:24.8737760Z These extra options are subject to change without notice.
2021-09-04T16:37:24.8739170Z Main [--help-lint, --help-lint] []
2021-09-04T16:37:24.8739960Z rc:0
2021-09-04T16:37:24.8740890Z javac/DIRECT:
2021-09-04T16:37:24.8742040Z The supported keys for -Xlint are:
2021-09-04T16:37:24.8742920Z     all                  Enable all warnings
2021-09-04T16:37:24.8743980Z     auxiliaryclass       Warn about an auxiliary class that is hidden in a source file, and is used from other files.
2021-09-04T16:37:24.8744800Z     cast                 Warn about use of unnecessary casts.
2021-09-04T16:37:24.8745500Z     classfile            Warn about issues related to classfile contents.
2021-09-04T16:37:24.8746200Z     deprecation          Warn about use of deprecated items.
2021-09-04T16:37:24.8747550Z     dep-ann              Warn about items marked as deprecated in JavaDoc but not using the @Deprecated annotation.
2021-09-04T16:37:24.8748410Z     divzero              Warn about division by constant integer 0.
2021-09-04T16:37:24.8749030Z     empty                Warn about empty statement after if.
2021-09-04T16:37:24.8749680Z     exports              Warn about issues regarding module exports.
2021-09-04T16:37:24.8750470Z     fallthrough          Warn about falling through from one case of a switch statement to the next.
2021-09-04T16:37:24.8751300Z     finally              Warn about finally clauses that do not terminate normally.
2021-09-04T16:37:24.8752780Z     missing-explicit-ctor Warn about missing explicit constructors in public and protected classes in exported packages.
2021-09-04T16:37:24.8753780Z     module               Warn about module system related issues.
2021-09-04T16:37:24.8754410Z     opens                Warn about issues regarding module opens.
2021-09-04T16:37:24.8755110Z     options              Warn about issues relating to use of command line options.
2021-09-04T16:37:24.8755850Z     overloads            Warn about issues regarding method overloads.
2021-09-04T16:37:24.8756560Z     overrides            Warn about issues regarding method overrides.
2021-09-04T16:37:24.8757270Z     path                 Warn about invalid path elements on the command line.
2021-09-04T16:37:24.8758010Z     processing           Warn about issues regarding annotation processing.
2021-09-04T16:37:24.8759040Z     rawtypes             Warn about use of raw types.
2021-09-04T16:37:24.8759730Z     removal              Warn about use of API that has been marked for removal.
2021-09-04T16:37:24.8761030Z     requires-automatic   Warn about use of automatic modules in the requires clauses.
2021-09-04T16:37:24.8762640Z     requires-transitive-automatic Warn about automatic modules in requires transitive.
2021-09-04T16:37:24.8763680Z     serial               Warn about Serializable classes that do not provide a serial version ID. 
2021-09-04T16:37:24.8765050Z                          Also warn about access to non-public members from a serializable element.
2021-09-04T16:37:24.8765870Z     static               Warn about accessing a static member using an instance.
2021-09-04T16:37:24.8766610Z     strictfp             Warn about unnecessary use of the strictfp modifier.
2021-09-04T16:37:24.8767930Z     synchronization      Warn about synchronization attempts on instances of value-based classes.
2021-09-04T16:37:24.8769460Z     text-blocks          Warn about inconsistent white space characters in text block indentation.
2021-09-04T16:37:24.8770810Z     try                  Warn about issues relating to use of try blocks (i.e. try-with-resources).
2021-09-04T16:37:24.8771580Z     unchecked            Warn about unchecked operations.
2021-09-04T16:37:24.8772250Z     varargs              Warn about potentially unsafe vararg methods.
2021-09-04T16:37:24.8772950Z     preview              Warn about use of preview language features.
2021-09-04T16:37:24.8773540Z     none                 Disable all warnings
2021-09-04T16:37:24.8774850Z Main [-version, -version] []
2021-09-04T16:37:24.8775370Z rc:0
2021-09-04T16:37:24.8775690Z javac/DIRECT:
2021-09-04T16:37:24.8776460Z javac 18-internal
2021-09-04T16:37:24.8777290Z Main [-fullversion, -fullversion] []
2021-09-04T16:37:24.8777740Z rc:0
2021-09-04T16:37:24.8778060Z javac/DIRECT:
2021-09-04T16:37:24.8779450Z javac full version ""18-internal+0-jaikiran-85748cf4a8efb69cbe69667851a14321804a51b6""
2021-09-04T16:37:24.8780590Z >>>>> Expected string appears more than once: 18
2021-09-04T16:37:24.8780950Z 
2021-09-04T16:37:24.8781400Z java.lang.Exception: 1 errors occurred
2021-09-04T16:37:24.8782230Z 	at OptionModesTester.runTests(OptionModesTester.java:81)
2021-09-04T16:37:24.8783100Z 	at InfoOptsTest.main(InfoOptsTest.java:41)
2021-09-04T16:37:24.8784350Z 	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
2021-09-04T16:37:24.8786310Z 	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
2021-09-04T16:37:24.8788620Z 	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
2021-09-04T16:37:24.8791250Z 	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
2021-09-04T16:37:24.8792700Z 	at com.sun.javatest.regtest.agent.MainActionHelper$AgentVMRunnable.run(MainActionHelper.java:312)
2021-09-04T16:37:24.8794000Z 	at java.base/java.lang.Thread.run(Thread.java:833)
2021-09-04T16:37:24.8794420Z 
2021-09-04T16:37:24.8794980Z JavaTest Message: Test threw exception: java.lang.Exception
2021-09-04T16:37:24.8795660Z JavaTest Message: shutting down test
2021-09-04T16:37:24.8795990Z 
2021-09-04T16:37:24.8796190Z 
2021-09-04T16:37:24.8797640Z TEST RESULT: Failed. Execution failed: `main' threw exception: java.lang.Exception: 1 errors occurred

",,,,,,,,,,,JDK-8274691,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8266239,,,,,,,,,,,,,,,,,,,,,,,,"0|i2u8zv:",9223372036854775807,b14,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4dca67bd,,,,,,,,,"2021-09-05 06:33;jpai;Looking into that test case, what it is doing is running ""javac -fullversion -fullversion"" and expecting the output to contain the value of ""java.specification.version"" (in this case 18) just once. However, the fullversion is constructed differently on different setups and in the GitHub actions job, the job configurations use ""--with-version-opt"" while building the JDK[1]. These jobs use the SHA of the commit id for generating the fullversion and as a result, if the commit id itself has a substring ""18"" in it, then this test will fail, like it does in this PR since the SHA is 85748cf4a8efb69cbe69667851a14321804a51b6 which generates the fullversion:
javac full version ""18-internal+0-jaikiran-85748cf4a8efb69cbe69667851a14321804a51b6""

[1] https://github.com/openjdk/jdk/blob/master/.github/workflows/submit.yml#L185;;;","2021-09-06 00:52;ihse;I think the test is sound but we should either exclude it on GHA, or change the way version strings are generated on GHA.;;;","2021-09-06 05:13;tschatzl;Also occurs in mach5, jdk-jdk pipeline, with version string:

javac full version ""18-ea+14-718""
>>>>> Expected string appears more than once: 18;;;","2021-09-06 06:40;shade;It looks to me that JDK-8266239 added the test that is way too sensitive to version strings, and the test should be fixed instead: https://github.com/openjdk/jdk/pull/5381;;;","2021-09-07 03:20;ihse;[~shade] I agree. The test is too fragile and needs to be fixed.;;;","2021-09-08 09:37;roboduke;Changeset: 267c61a1
Author:    Aleksey Shipilev <shade@openjdk.org>
Date:      2021-09-08 16:36:31 +0000
URL:       https://git.openjdk.java.net/jdk/commit/267c61a16a916e35762e8df5737ec74b06defae8
;;;","2021-10-02 23:28;shade;Fix Request (17u)

Fixes the regression from JDK-8266239. Applies cleanly. Test passes locally.;;;",,,,,,,,,,,,,,,,,,,
[lworld] Invoking a reflection-generated constructor for primitive class gives InstantiationError,JDK-8273360,5057997,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,jespersm,jespersm,jespersm,2021-09-05 04:41,2021-09-23 14:46,2023-10-01 09:57,2021-09-23 14:46,repo-valhalla,,,,,,,repo-valhalla,core-libs,,0,lw2,lworld,,,,,,,,,,,,,,,,,,,,"As noted in JDK-8207315, the constructor invocation generated by jdk.internal.reflect.MethodAccessorGenerator doesn't work for primitive classes.

Thus, invoking a static factory method for a primitive class more than 15 times will break (as controlled by jdk.internal.reflect.ReflectionFactory.inflationThreshold())",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8207315,,,,,,,,,,,,,,,generic,,,,,,,,,generic,,,,,"0|i2u8zf:",9223372036854775807,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@313ae9a0,,,,,,,,,"2021-09-05 08:19;jespersm;Fix in PR: https://github.com/openjdk/valhalla/pull/546

The fix is not very pretty, just adds a separate path for reflectively calling the factory method instead of a ctor, but doesn't move the code generation from the JDK's own ClassFileAssembler to ASM, for example.

I also tested the regular method access, but it required no changes in my test.;;;",,,,,,,,,,,,,,,,,,,,,,,,,
CI: ciInstanceKlass::get_canonical_holder() doesn't respect instance size,JDK-8273359,5057993,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,vlivanov,dcubed,dcubed,2021-09-04 17:28,2022-01-25 01:39,2023-10-01 09:57,2021-09-08 09:19,17,18,,,,,,18,hotspot,,0,hs-comp-triaged,jdk15u-fix-request,jdk15u-fix-yes,jdk17u-fix-request,jdk17u-fix-yes,oracle-triage-11,oracle-triage-17,oracle-triage-18,regression,tier8,,,,,,,,,,,,"The following test failed in the JDK18 CI:

java/util/stream/test/org/openjdk/tests/java/util/stream/DoublePrimitiveOpsTests.java

Here's a snippet from the log file:

#section:testng
----------messages:(5/396)----------
command: testng org.openjdk.tests.java.util.stream.DoublePrimitiveOpsTests
reason: Assumed action based on file name: run testng org.openjdk.tests.java.util.stream.DoublePrimitiveOpsTests 
Mode: othervm [test requires non-default system module, test or library overrides a system module]
Additional options from @modules: --add-modules jdk.incubator.foreign
elapsed time (seconds): 1188.404
----------configuration:(5/226)*----------
Boot Layer
  add modules: jdk.incubator.foreign 
  add reads:   java.base ALL-UNNAMED
  patch:       java.base T:\\testoutput\\test-support\\jtreg_open_test_jdk_jdk_util\\classes\\5\\lib\\testlibrary\\bootlib\\java.base

----------System.out:(23/1755)*----------
test org.openjdk.tests.java.util.stream.DoublePrimitiveOpsTests.testFlags(): success
test org.openjdk.tests.java.util.stream.DoublePrimitiveOpsTests.testLimit(): success
# To suppress the following error report, specify this argument
# after -XX: or in .hotspotrc:  SuppressErrorAt=\\compile.cpp:1596
#
# A fatal error has been detected by the Java Runtime Environment:
#
#  Internal Error (t:\\workspace\\open\\src\\hotspot\\share\\opto\\compile.cpp:1596), pid=52068, tid=41388
#  assert(flat == flatten_alias_type(flat)) failed: not idempotent: adr_type = java/util/stream/Nodes$SizedCollectorTask:NotNull+68 * [narrow]; flat = java/util/concurrent/ForkJoinTask+68 * [narrow] => oopptr:BotPTR+any [narrow]
#
# JRE version: Java(TM) SE Runtime Environment (18.0+14) (fastdebug build 18-ea+14-700)
# Java VM: Java HotSpot(TM) 64-Bit Server VM (fastdebug 18-ea+14-700, compiled mode, tiered, compressed oops, compressed class ptrs, g1 gc, windows-amd64)
# Core dump will be written. Default location: T:\\testoutput\\test-support\\jtreg_open_test_jdk_jdk_util\\java\\util\\stream\\test\\org\\openjdk\\tests\\java\\util\\stream\\DoublePrimitiveOpsTests\\hs_err_pid52068.mdmp
#
# An error report file with more information is saved as:
# T:\\testoutput\\test-support\\jtreg_open_test_jdk_jdk_util\\java\\util\\stream\\test\\org\\openjdk\\tests\\java\\util\\stream\\DoublePrimitiveOpsTests\\hs_err_pid52068.log
#
# Compiler replay data is saved as:
# T:\\testoutput\\test-support\\jtreg_open_test_jdk_jdk_util\\java\\util\\stream\\test\\org\\openjdk\\tests\\java\\util\\stream\\DoublePrimitiveOpsTests\\replay_pid52068.log
#
# If you would like to submit a bug report, please visit:
#   https://bugreport.java.com/bugreport/crash.jsp
#
----------System.err:(1/57)----------
WARNING: Using incubator modules: jdk.incubator.foreign
----------rerun:(56/6080)*----------

<snip>

result: Failed. Unexpected exit from test [exit code: 1]


Here's the crashing thread's stack:

---------------  T H R E A D  ---------------

Current thread (0x000001bc4591f460):  JavaThread ""C2 CompilerThread0"" daemon [_thread_in_native, id=41388, stack(0x000000b4a0500000,0x000000b4a0600000)]


Current CompileTask:
C2: 115247 11801    b  4       java.util.concurrent.ForkJoinPool::scan (235 bytes)

Stack: [0x000000b4a0500000,0x000000b4a0600000]
Native frames: (J=compiled Java code, j=interpreted, Vv=VM code, C=native code)
V  [jvm.dll+0xad7791]  os::platform_print_native_stack+0xf1  (os_windows_x86.cpp:235)
V  [jvm.dll+0xcf45c5]  VMError::report+0x1005  (vmError.cpp:742)
V  [jvm.dll+0xcf5f4e]  VMError::report_and_die+0x7fe  (vmError.cpp:1552)
V  [jvm.dll+0xcf66d4]  VMError::report_and_die+0x64  (vmError.cpp:1333)
V  [jvm.dll+0x4c9267]  report_vm_error+0xb7  (debug.cpp:282)
V  [jvm.dll+0x4891ff]  Compile::find_alias_type+0x17f  (compile.cpp:1595)
V  [jvm.dll+0xa2998f]  MemNode::Ideal_common+0x68f  (memnode.cpp:368)
V  [jvm.dll+0xa271c9]  LoadNode::Ideal+0x39  (memnode.cpp:1716)
V  [jvm.dll+0xb1a211]  PhaseIterGVN::transform_old+0xc1  (phaseX.cpp:1258)
V  [jvm.dll+0xb1779f]  PhaseIterGVN::optimize+0x2cf  (phaseX.cpp:1206)
V  [jvm.dll+0x48d5cb]  PhaseIdealLoop::optimize+0x16b  (loopnode.hpp:1153)
V  [jvm.dll+0x481a14]  Compile::Optimize+0xc04  (compile.cpp:2210)
V  [jvm.dll+0x47eda7]  Compile::Compile+0x1457  (compile.cpp:785)
V  [jvm.dll+0x3b20c1]  C2Compiler::compile_method+0x121  (c2compiler.cpp:110)
V  [jvm.dll+0x497d2f]  CompileBroker::invoke_compiler_on_method+0x7bf  (compileBroker.cpp:2290)
V  [jvm.dll+0x495657]  CompileBroker::compiler_thread_loop+0x2b7  (compileBroker.cpp:1966)
V  [jvm.dll+0xc80bdd]  JavaThread::thread_main_inner+0x1fd  (thread.cpp:1272)
V  [jvm.dll+0xc77174]  Thread::call_run+0x1b4  (thread.cpp:365)
V  [jvm.dll+0xad614e]  thread_native_entry+0xae  (os_windows.cpp:549)
C  [ucrtbase.dll+0x1fb80]
C  [KERNEL32.DLL+0x84d4]
C  [ntdll.dll+0x51781]",,,,,,,,,,,JDK-8274492,JDK-8280577,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8237767,,,,,,,,,,,,,,,,,,,,,,,,"0|i2u8yj:",9223372036854775807,b14,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2021-09-07 11:05;vlivanov;It's a regression from JDK-8237767 which went into 15.;;;","2021-09-07 18:54;dlong;ILW = assert in debug build, one test = MMH = P3;;;","2021-09-08 09:19;roboduke;Changeset: f7e9f56e
Author:    Vladimir Ivanov <vlivanov@openjdk.org>
Date:      2021-09-08 16:17:56 +0000
URL:       https://git.openjdk.java.net/jdk/commit/f7e9f56e235dc50daae0a85c9790d5b04c9c60f0
;;;","2021-09-09 15:09;dcubed;The fix is integrated in jdk-18+14-752.;;;","2021-09-28 00:52;thartmann;Fix request (17u):
The bug leads to an assert during JIT compilation. The fix is medium risk and has been tested in the JDK 18 for a while and with tier1-3 in JDK 17u. The patch applies cleanly.;;;","2022-01-25 00:05;yan;Fix request (15u):
to fix the regression where it has been introduced.
The patch applies not exactly  clean because of some context differences. The relevant tests run OK: the included test doesn't fail on 15u even before the fix:-(;;;","2022-01-25 00:14;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk15u-dev/pull/159
Date: 2022-01-25 08:09:22 +0000;;;",,,,,,,,,,,,,,,,,,,
macOS Monterey does not have the font Times needed by Serif,JDK-8273358,5057992,Bug,Closed,JDK,JDK,software,duke,,,P2,Fixed,prr,prr,prr,2021-09-04 16:44,2022-01-26 09:36,2023-10-01 09:57,2021-09-10 09:37,11,16,17,18,7,8,,18,client-libs,,0,azul-interest,CPU21_10-critical-approved,CPU21_10-critical-SQE-OK,jdk11u-fix-request,jdk11u-fix-yes,jdk13u-fix-request,jdk13u-fix-yes,jdk15u-fix-request,jdk15u-fix-yes,jdk17u-fix-request,jdk17u-fix-SQE-ok,jdk17u-fix-yes,macos,macos12,sn_101,,,,,,,"From what I have seen on multiple systems running macOS Monterey Beta,
the long standing font ""Times"" which was the name of one of the original
Postscript fonts isn't available.
I don't see it in Font Book and JDK's look up fails and JDK prints a warning message :
Warning: the fonts ""Times"" and ""Times"" are not available for the Java logical font ""Serif"", which may have unexpected appearance or behavior. Re-enable the ""Times"" font to remove this warning.

One bad part about is that it looks like the way the macOS implementation works is that it decides to return you Dialog instead of Serif ... this could surprise many apps since Serif is a required logical font name.

I don't see any macOS release note about this so it is possible it is an unintended regression that is, or will be fixed in a later beta update or by GA
But unless we are sure of that we don't want to wait for GA to see .. 
",,,,,,,,,,,JDK-8273889,JDK-8273755,JDK-8273851,JDK-8273688,JDK-8273830,JDK-8273850,JDK-8274594,JDK-8274593,JDK-8273722,JDK-8273723,JDK-8273844,,,,,,,,,,,,,,,,,,,,,,,,,,,,,generic,,,,,,,,,os_x,,,,,"0|i2u8yb:",9223372036854775807,b15,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4b09ce31,,,,,,,Verified,,"2021-09-04 16:47;prr;I think this can be most safely fixed by specifying Times New Roman which is compatible with TImes and has been shipped with many MacOS releases.
I'm not sure of this but I suspect that recent macOS releases actually mapped Times to TImes New Roman and didn't really have TImes at all ..  my
macOS 11 system enumerates TImes but I can't see a separate font file for it on disk.

Note: I'm not implying any recent macOS shipped a Type 1 font .. macOS X has never supported Type 1. If there ever was a separate font file it was in OTF or TrueType format .. whether in a dfont or not.;;;","2021-09-10 09:37;roboduke;Changeset: efe3ed1e
Author:    Phil Race <prr@openjdk.org>
Date:      2021-09-10 16:36:06 +0000
URL:       https://git.openjdk.java.net/jdk/commit/efe3ed1e705a6f3785761e64f7187de809daa731
;;;","2021-09-10 09:37;prr;The issue was reported to apple (FB9606331) noting that
        NSFontManager *fontManager = [NSFontManager sharedFontManager];
        NSArray *allFamilies = [fontManager availableFontFamilies];

No longer reports TImes and the following response was received
--
> Times isn't enumerated any more in this family list on macOS 12
Yes, that is expected. The family has been deprecated. Existing documents requesting it will still display it but new documents with it cannot be created.
---

So this fix is definitely required;;;","2021-09-10 10:13;prr;Fix request (17u) 
This fix is needed for macOS 12 support
Add Times New Roman as a fallback for Serif to replace the deprecated Times
This is specific to macOS client code and the risk is extremely low. 
The 17u backport is clean and the PR can be seen here : https://github.com/openjdk/jdk17u/pull/71;;;","2021-09-14 03:29;mdoerr;Fix Request (11u):
Should get backported for parity with 11.0.14-oracle. Applies cleanly, but logging code needs replacement for methods which are not available in 11u. Review: https://github.com/openjdk/jdk11u-dev/pull/343;;;","2021-09-30 04:16;omikhaltcova;Fix request (13u)

I'd like to backport this fix to jdk13u for parity with jdk11u. 
The original patch applied cleanly but 2 logging methods were replaced as in the patch for jdk11u because they are not available in jdk13u as well.;;;","2021-09-30 04:18;omikhaltcova;Fix request (15u) 

I'd like to backport this fix to jdk15u for parity with jdk11u.
The original patch applied cleanly but 2 logging methods were replaced as in the patch for jdk11u because they are not available in jdk15u as well.;;;",,,,,,,,,,,,,,,,,,,
SecurityManager deprecation warning from java/awt/regtesthelpers/Util.java,JDK-8273357,5057990,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,prr,prr,prr,2021-09-04 14:12,2023-05-24 23:09,2023-10-01 09:57,2022-12-05 09:56,17,18,,,,,,20,client-libs,,0,sn_132,sn_133,testbug,,,,,,,,,,,,,,,,,,,"https://bugs.openjdk.java.net/browse/JDK-8266459

suppressed the SecurityManager removal deprecation warning across the JDK as seen here 
https://github.com/openjdk/jdk/commit/6765f902505fbdd02f25b599f942437cd805cad1

but it looks like I found a missing one that I noticed in a jtreg log

test/jdk/java/awt/regtesthelpers/Util.java:452: warning: [removal] AccessController in java.security has been deprecated and marked for removal
[2021-09-04T20:22:01,685Z]             Method m_getWMID = (Method)AccessController.doPrivileged(new PrivilegedAction() {",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,17,,,,,,,"0|i2u8xv:",9223372036854775807,b27,,,,,,,,,,,,"2022-12-02 15:16;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/11492
Date: 2022-12-02 23:07:45 +0000;;;","2022-12-05 09:56;dukebot;Changeset: 601264d9
Author:    Phil Race <prr@openjdk.org>
Date:      2022-12-05 17:54:15 +0000
URL:       https://git.openjdk.org/jdk/commit/601264d97d5cb1a8feb4aebadcb58bf2364916b4
;;;",,,,,,,,,,,,,,,,,,,,,,,,
Flickering on tooltip appearance IntelliJ IDEA 2021.2.1,JDK-8273355,5057988,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,avu,avu,avu,2021-09-04 09:43,2023-07-04 03:50,2023-10-01 09:57,2022-03-29 00:59,17,18,,,,,,19,client-libs,,0,lanai,macos,ogl-macosx,,,,,,,,,,,,,,,,,,,"Tooltips sometimes flicker, showing initial white background. ",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8310896,,,,,,,,,,"2021-09-04 09:43;avu;tooltip_flick.mov;https://bugs.openjdk.org/secure/attachment/96332/tooltip_flick.mov",,,,,,,,,,,,17,,os_x,,,,,"0|i2u8xf:",9223372036854775807,b16,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@5a9b3fd3,,,,,,,,,"2021-12-03 07:57;avu;The issue is still reproducible with the recent sources;;;","2022-03-23 08:03;avu;The problem is also reproducible with the OGL pipeline. According to my investigation, it was caused by a lag between the appearance of a popup/tooltip window and actual rendering into the window Layer. Here are the timestamps (in ms) logged at the moment of a window appearance (Component.show() method)  and the beginning of the rendering ([CGLLayer blitTexture]). As you can see  1648043891502 - 1648043891462  = 40, so the lag is more than 30ms and could be noticeable. 

...
Layer texture 55 
Paint:1648043891445
Begin setVisible: 1648043891462
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
Layer texture 117 
Paint:1648043891502
^^^^^^^^^^^^^^^^^^^^^^^^
Layer texture 55 
Paint:1648043891502
Layer texture 55 
Paint:1648043891504
Layer texture 117 
Paint:1648043891527
Layer texture 117 
Paint:1648043891529
Layer texture 55 
Paint:1648043891553
...;;;","2022-03-23 13:38;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/7931
Date: 2022-03-23 20:01:54 +0000;;;","2022-03-24 09:38;kcr;Bugs and Enhancements must have no more than one fixVersion. Removing ""17"" from the fIxVerion list.;;;","2022-03-24 10:47;prr;From the fix suggestions it seems like this is more an AWT bug than a 2D one.
I've removed lanai-to-default since it is not a metal-specific bug, or fix, but I guess it was a lot more
obvious with metal for some reason .. or perhaps we were just looking more closely for problems ?
Still good to fix though !;;;","2022-03-28 19:12;serb;I think we should file a bug for the performance issue, the current fix will solve a small subset of the problem kind of appearance of the window background, but it does not solve the actual performance issues, so the actual rendering still will be slow.;;;","2022-03-29 00:59;dukebot;Changeset: 043b0a7f
Author:    Alexey Ushakov <avu@openjdk.org>
Date:      2022-03-29 07:57:35 +0000
URL:       https://git.openjdk.java.net/jdk/commit/043b0a7ffe0ae965a9b9a798f4030a494b79a961
;;;","2022-03-29 07:40;avu;
Agree, I'll file the bug
;;;","2022-03-31 02:56;aghaisas;Another similar UI refresh issue is observed with Metal pipeline (See bug JDK-8268217). It is reproducible after multiple attempts indicating underlying cause might be related to the timing.
;;;",,,,,,,,,,,,,,,,,
bad tag in jdk.random module-info.java,JDK-8273351,5057980,Bug,Closed,JDK,JDK,software,duke,,,P4,Fixed,jlaskey,jjg,jjg,2021-09-03 16:29,2022-07-27 14:38,2023-10-01 09:57,2021-09-10 11:00,18,,,,,,,18,core-libs,,0,doclint,jdk17u-fix-request,jdk17u-fix-SQE-ok-next,jdk17u-fix-yes,,,,,,,,,,,,,,,,,,"open/src/jdk.random/share/classes/module-info.java:43: error: unknown tag: use
 * @use java.util.random.RandomGenerator
   ^
open/src/jdk.random/share/classes/module-info.java:44: error: unknown tag: use
 * @use jdk.internal.util.random.RandomSupport
   ^
2 errors",,,,,,,,,,,JDK-8279150,,,,,,,,,,,,,,,,JDK-8273431,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2u8vn:",9223372036854775807,b15,,,,,,,,,,Verified,,"2021-09-10 11:00;roboduke;Changeset: d4177a98
Author:    Jim Laskey <jlaskey@openjdk.org>
Date:      2021-09-10 17:58:33 +0000
URL:       https://git.openjdk.java.net/jdk/commit/d4177a98c1a3d331033f4cbad8c7af184cd5d486
;;;","2021-09-10 11:01;jlaskey;jdk17u-fix-request

Correctness issue in documentation. No risk.

diff --git a/src/jdk.random/share/classes/module-info.java b/src/jdk.random/share/classes/module-info.java
index 1b2193ef557..3d82090f313 100644
--- a/src/jdk.random/share/classes/module-info.java
+++ b/src/jdk.random/share/classes/module-info.java
@@ -40,8 +40,7 @@ import jdk.internal.util.random.RandomSupport;
  * @provides jdk.random.Xoroshiro128PlusPlus
  * @provides jdk.random.Xoshiro256PlusPlus
  *
- * @use java.util.random.RandomGenerator
- * @use jdk.internal.util.random.RandomSupport
+ * @uses java.util.random.RandomGenerator
  *
  * @moduleGraph
  * @since 16
;;;","2021-11-18 03:45;shade;I see there is jdk17u-fix-yes, but where is the 17u backport RFR and/or push? Jim, are you still working on integrating it in 17u? ;;;","2021-11-18 08:46;jlaskey;As far as I understand that automatic backports stopped when the 18 branch was forked. I and not actively backporting so you are welcome to take it on.;;;","2021-12-20 02:40;roboduke;A pull request was submitted for review.

URL: https://git.openjdk.java.net/jdk17u-dev/pull/7
Date: 2021-12-20 10:35:30 +0000
;;;","2021-12-20 03:11;shade;I dropped jdk17u-fix-yes to let new 17u maintainers re-approve the 17u integration.;;;",,,,,,,,,,,,,,,,,,,,
Null pointer dereference in classFileParser.cpp:2817,JDK-8273342,5057969,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,hseigel,shadowbug,shadowbug,2021-09-03 11:58,2021-10-12 05:22,2023-10-01 09:57,2021-10-05 05:40,18,,,,,,,18,hotspot,,0,bugdb_33313784,jdk11u-fix-request,jdk11u-fix-yes,jdk17u-fix-request,jdk17u-fix-yes,jdk8u-fix-request,jdk8u-fix-yes,noreg-hard,parfait,,,,,,,,,,,,,Null pointer dereference in classFileParser.cpp:2817,,,,,,,,,,,JDK-8274902,JDK-8274786,JDK-8275133,JDK-8274842,JDK-8274852,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8270404,,,,,,,,,,,,,,,,,,,,,,,,"0|i2u8t7:",9223372036854775807,b18,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,,,"2021-09-07 11:23;mseledtsov;ILW = HLM = P3;;;","2021-10-05 05:40;roboduke;Changeset: 8609ea55
Author:    Harold Seigel <hseigel@openjdk.org>
Date:      2021-10-05 12:39:56 +0000
URL:       https://git.openjdk.java.net/jdk/commit/8609ea55acdcc203408f58f7bf96ea9228aef613
;;;","2021-10-05 07:37;hseigel;Fix Request

This fix prevents code analyzers from reporting null pointer dereferences for callers of fieldDescriptor::generic_signature() by returning a non-null value for the affected code.  The risk is low because the fix is in code that should never get executed and is very small. It was tested on JDK-17u with mach5 tiers 1-2 on Linux, Mac OS, and Windows.  The patch applied cleanly to JDK-17u.
;;;","2021-10-05 12:13;zgu;Fix Request (11u)

A clean backport for parity with Oracle 11.0.14.
;;;","2021-10-11 09:13;zgu;Fix Request (8u)

A clean backport for parity with Oracle 8u321.
;;;",,,,,,,,,,,,,,,,,,,,,
IOOBE with ListChangeListener added to the selectedItems list of a TableView,JDK-8273339,5057965,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,jpereda,jpereda,jpereda,2021-09-03 11:17,2022-06-29 00:49,2023-10-01 09:57,2022-04-07 05:56,8u301,jfx11.0.2,jfx17,,,,,jfx19,javafx,,0,,,,,,,,,,,,,,,,,,,,,,"Given a TableView with multiple selection mode and cell selection enabled, with a ListChangeListener added to the selectedItems list of the TableView's selection model. If the first cell of a row is selected, when command+clicking another cell in the same row, this exception is thrown:

Exception in thread ""JavaFX Application Thread"" java.lang.IndexOutOfBoundsException: toIndex = 2
        at java.base/java.util.AbstractList.subListRangeCheck(AbstractList.java:507)
        at java.base/java.util.AbstractList.subList(AbstractList.java:497)
        at javafx.base/com.sun.javafx.collections.ChangeHelper.addRemoveChangeToString(ChangeHelper.java:38)
        at javafx.base/javafx.collections.ListChangeBuilder$SingleChange.toString(ListChangeBuilder.java:630)
        at java.base/java.lang.String.valueOf(String.java:2951)
        at com.gluonhq.TableSelectionIssue.lambda$start$0(TableSelectionIssue.java:52)
        at javafx.base/com.sun.javafx.collections.ListListenerHelper$SingleChange.fireValueChangedEvent(ListListenerHelper.java:164)
        at javafx.base/com.sun.javafx.collections.ListListenerHelper.fireValueChangedEvent(ListListenerHelper.java:73)
        at javafx.base/javafx.collections.ObservableListBase.fireChange(ObservableListBase.java:239)
        at javafx.base/javafx.collections.ListChangeBuilder.commit(ListChangeBuilder.java:482)
        at javafx.base/javafx.collections.ListChangeBuilder.endChange(ListChangeBuilder.java:541)
        at javafx.base/javafx.collections.ObservableListBase.endChange(ObservableListBase.java:211)
        at javafx.controls/com.sun.javafx.scene.control.SelectedItemsReadOnlyObservableList.lambda$new$0(SelectedItemsReadOnlyObservableList.java:91)
        at javafx.base/com.sun.javafx.collections.ListListenerHelper$Generic.fireValueChangedEvent(ListListenerHelper.java:329)
        at javafx.base/com.sun.javafx.collections.ListListenerHelper.fireValueChangedEvent(ListListenerHelper.java:73)
        at javafx.base/javafx.collections.ObservableListBase.fireChange(ObservableListBase.java:239)
        at javafx.base/javafx.collections.ListChangeBuilder.commit(ListChangeBuilder.java:482)
        at javafx.base/javafx.collections.ListChangeBuilder.endChange(ListChangeBuilder.java:541)
        at javafx.base/javafx.collections.ObservableListBase.endChange(ObservableListBase.java:211)
        at javafx.controls/com.sun.javafx.scene.control.ReadOnlyUnbackedObservableList._endChange(ReadOnlyUnbackedObservableList.java:64)
        at javafx.controls/javafx.scene.control.MultipleSelectionModelBase$SelectedIndicesList._endChange(MultipleSelectionModelBase.java:898)
        at javafx.controls/javafx.scene.control.ControlUtils.updateSelectedIndices(ControlUtils.java:204)
        at javafx.controls/javafx.scene.control.TableView$TableViewArrayListSelectionModel.fireCustomSelectedCellsListChangeEvent(TableView.java:3026)
        at javafx.base/com.sun.javafx.collections.ListListenerHelper$SingleChange.fireValueChangedEvent(ListListenerHelper.java:164)
        at javafx.base/com.sun.javafx.collections.ListListenerHelper.fireValueChangedEvent(ListListenerHelper.java:73)
        at javafx.base/javafx.collections.ObservableListBase.fireChange(ObservableListBase.java:239)
        at javafx.base/javafx.collections.ListChangeBuilder.commit(ListChangeBuilder.java:482)
        at javafx.base/javafx.collections.ListChangeBuilder.endChange(ListChangeBuilder.java:541)
        at javafx.base/javafx.collections.ObservableListBase.endChange(ObservableListBase.java:211)
        at javafx.base/javafx.collections.transformation.SortedList.sourceChanged(SortedList.java:111)
        at javafx.base/javafx.collections.transformation.TransformationList.lambda$getListener$0(TransformationList.java:106)
        at javafx.base/javafx.collections.WeakListChangeListener.onChanged(WeakListChangeListener.java:88)
        at javafx.base/com.sun.javafx.collections.ListListenerHelper$SingleChange.fireValueChangedEvent(ListListenerHelper.java:164)
        at javafx.base/com.sun.javafx.collections.ListListenerHelper.fireValueChangedEvent(ListListenerHelper.java:73)
        at javafx.base/javafx.collections.ObservableListBase.fireChange(ObservableListBase.java:239)
        at javafx.base/javafx.collections.ListChangeBuilder.commit(ListChangeBuilder.java:482)
        at javafx.base/javafx.collections.ListChangeBuilder.endChange(ListChangeBuilder.java:541)
        at javafx.base/javafx.collections.ObservableListBase.endChange(ObservableListBase.java:211)
        at javafx.base/javafx.collections.ModifiableObservableListBase.add(ModifiableObservableListBase.java:162)
        at java.base/java.util.AbstractList.add(AbstractList.java:111)
        at javafx.controls/com.sun.javafx.scene.control.SelectedCellsMap.add(SelectedCellsMap.java:105)
        at javafx.controls/javafx.scene.control.TableView$TableViewArrayListSelectionModel.select(TableView.java:2508)
        at javafx.controls/javafx.scene.control.TableView$TableViewSelectionModel.select(TableView.java:1952)
        at javafx.controls/com.sun.javafx.scene.control.behavior.TableCellBehaviorBase.doSelect(TableCellBehaviorBase.java:155)
        at javafx.controls/com.sun.javafx.scene.control.behavior.CellBehaviorBase.mousePressed(CellBehaviorBase.java:176)
        at javafx.controls/com.sun.javafx.scene.control.inputmap.InputMap.handle(InputMap.java:274)
        at javafx.base/com.sun.javafx.event.CompositeEventHandler$NormalEventHandlerRecord.handleBubblingEvent(CompositeEventHandler.java:247)
        at javafx.base/com.sun.javafx.event.CompositeEventHandler.dispatchBubblingEvent(CompositeEventHandler.java:80)
        at javafx.base/com.sun.javafx.event.EventHandlerManager.dispatchBubblingEvent(EventHandlerManager.java:234)
        at javafx.base/com.sun.javafx.event.EventHandlerManager.dispatchBubblingEvent(EventHandlerManager.java:191)
        at javafx.base/com.sun.javafx.event.CompositeEventDispatcher.dispatchBubblingEvent(CompositeEventDispatcher.java:59)
        at javafx.base/com.sun.javafx.event.BasicEventDispatcher.dispatchEvent(BasicEventDispatcher.java:58)
        at javafx.base/com.sun.javafx.event.EventDispatchChainImpl.dispatchEvent(EventDispatchChainImpl.java:114)
        at javafx.base/com.sun.javafx.event.BasicEventDispatcher.dispatchEvent(BasicEventDispatcher.java:56)
        at javafx.base/com.sun.javafx.event.EventDispatchChainImpl.dispatchEvent(EventDispatchChainImpl.java:114)
        at javafx.base/com.sun.javafx.event.BasicEventDispatcher.dispatchEvent(BasicEventDispatcher.java:56)
        at javafx.base/com.sun.javafx.event.EventDispatchChainImpl.dispatchEvent(EventDispatchChainImpl.java:114)
        at javafx.base/com.sun.javafx.event.BasicEventDispatcher.dispatchEvent(BasicEventDispatcher.java:56)
        at javafx.base/com.sun.javafx.event.EventDispatchChainImpl.dispatchEvent(EventDispatchChainImpl.java:114)
        at javafx.base/com.sun.javafx.event.BasicEventDispatcher.dispatchEvent(BasicEventDispatcher.java:56)
        at javafx.base/com.sun.javafx.event.EventDispatchChainImpl.dispatchEvent(EventDispatchChainImpl.java:114)
        at javafx.base/com.sun.javafx.event.BasicEventDispatcher.dispatchEvent(BasicEventDispatcher.java:56)
        at javafx.base/com.sun.javafx.event.EventDispatchChainImpl.dispatchEvent(EventDispatchChainImpl.java:114)
        at javafx.base/com.sun.javafx.event.EventUtil.fireEventImpl(EventUtil.java:74)
        at javafx.base/com.sun.javafx.event.EventUtil.fireEvent(EventUtil.java:54)
        at javafx.base/javafx.event.Event.fireEvent(Event.java:198)
        at javafx.graphics/javafx.scene.Scene$MouseHandler.process(Scene.java:3880)
        at javafx.graphics/javafx.scene.Scene.processMouseEvent(Scene.java:1873)
        at javafx.graphics/javafx.scene.Scene$ScenePeerListener.mouseEvent(Scene.java:2606)
        at javafx.graphics/com.sun.javafx.tk.quantum.GlassViewEventHandler$MouseEventNotification.run(GlassViewEventHandler.java:411)
        at javafx.graphics/com.sun.javafx.tk.quantum.GlassViewEventHandler$MouseEventNotification.run(GlassViewEventHandler.java:301)
        at java.base/java.security.AccessController.doPrivileged(Native Method)
        at javafx.graphics/com.sun.javafx.tk.quantum.GlassViewEventHandler.lambda$handleMouseEvent$2(GlassViewEventHandler.java:450)
        at javafx.graphics/com.sun.javafx.tk.quantum.QuantumToolkit.runWithoutRenderLock(QuantumToolkit.java:423)
        at javafx.graphics/com.sun.javafx.tk.quantum.GlassViewEventHandler.handleMouseEvent(GlassViewEventHandler.java:449)
        at javafx.graphics/com.sun.glass.ui.View.handleMouseEvent(View.java:557)
        at javafx.graphics/com.sun.glass.ui.View.notifyMouse(View.java:943)
        at javafx.graphics/com.sun.glass.ui.mac.MacView.notifyMouse(MacView.java:127)

This can be reproduced with any JavaFX version from 11 to head.

Attached is a test that can be used to reproduce the issue.

Steps:

Steps: 
1. Select the first cell in the first row by mouse clicking on it. Log: 
Change: { [Person{a b}] added at 0 }, selected items: [Person{a b}] 

2. Press Command (Mac) or Control (Windows) and mouse click to select the other cell in the same row. The exception is thrown.
 
However, if the second cell is selected, command+click the first one works as expected and no exception is thrown. 

It can be seen that with any given selected cell, any other selection of a cell in the same row with higher column index leads to the exception, but when the column index is lower, there is no exception and selection works as expected.

When the ListChangeListener is removed, there is no exception in any case.
",,,,,,,,,,,JDK-8289432,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"2021-09-03 10:47;jpereda;TableSelectionIssue.java;https://bugs.openjdk.org/secure/attachment/96330/TableSelectionIssue.java",,,,,,,,,,,,,,,,,,,"0|i2u8sb:",9223372036854775807,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@67282485,,,,,,,,,"2021-09-06 11:01;jpereda;If the ListChangeListener attached to the SelectedItemsList is removed, there is no exception, but this doesn't mean that the error is gone, we only don't see it. 

It can always be reproduced just by calling `change.getAddedSubList()`, which calls `getList().subList(getFrom(), getTo())`, and selecting one cell, and then command/control+selecting another cell with a higher column index from the same item/row.

The issue happens because the SubChange in the list of selected cells is passed as is all the way down to the list of items of the TableView, and these are two very different lists.
 
When selection goes to a lower column index, the new selected cell is always added at index 0 of the selected cells list, and the subchange always goes from 0 to 1, which can be applied to the list of items/rows of the tableView, because 0 is always a valid index if one item/row was already selected at position 0, and nothing changes in this list.

However, when selection goes to a higher column index the new selected cell is added at index > 0 (for instance, 1, if there was only a previous selected cell at index 0), so the subchange goes from 1 to 2. But then, this subchange is passed down as is (meaning same From=1 and To=2) to the list of items. Note that there is still a single item selected, so 1 is already out of range.

A possible fix should maps the subchange in the list of selected cells into a valid subchange in the list of selected items.;;;","2022-01-06 05:40;jpereda;The issue happens in ControlUtils::updateSelectedIndices.

It takes a Change of TablePositions (_cells_), and converts it to a list of _row_ indices.

However, when it calls sm.selectedIndices._nextAdd(c.from(), to), it is passing a _cell_ index (c.from()) into a list of _rows_.

The issue has origin in TableView::selectRange, when calling new NonIterableChange.SimpleAddChange<>(startIndex, endIndex + 1, selectedCellsSeq): the start, end indices are referred to a list of selected cells. 

For instance, tableView 2x2:
a b
c d

If we shift-select from cell c to cell b, the four cells will be selected. Then:
selectedCellsMap contains {a, b, c, d}, startChangeIndex (c) is 2, endChangeIndex (b) is 1, then:
startIndex=1, endIndex=2, selectedCellsSeq contains {a, b, c, d}, and the change is propagated.

When ControlUtils::updateSelectedIndices updates sm.selectedIndices, it converts cells to rows, and indices 0,1 are selected.

However, in the final step, the call
sm.selectedIndices._nextAdd(c.getFrom(), to);
is using c.getFrom() = 1(from the SimpleAddChange), to = 3, but selectedIndices has only 2 elements, giving the IOOBE: toIndex = 3.

To be correct, it should be from = 0, to = 2, being 0 the row index of the first selected cell.

For cases where the selection is a range of cells that creates a list of selected rows, the latter always starts in 0, so a possible fix is:

- ListChangeListener.Change c = new NonIterableChange.SimpleAddChange<>(startIndex, endIndex + 1, selectedCellsSeq);
+ List<TablePosition<S, ?>> tpSelection = selectedCellsSeq.subList(startIndex, endIndex + 1);
+ ListChangeListener.Change<TablePosition<S, ?>> c = new NonIterableChange.SimpleAddChange<>(0, endIndex - startIndex + 1, FXCollections.observableArrayList(tpSelection));
                
[~mstrauss] Maybe you can have a look at this as well, it is closely related to the same underlying issue as JDK-8273336, mixing lists for cells with list for rows;;;","2022-01-07 03:33;jpereda;The above patch fixes the issue when the change comes from TableViewArrayListSelectionModel::selectRange, which happens with shift+mouse click.
However, there are other ways to select a range of cells, and that goes through a different path.

For instance, tableView 2x2: 
a b 
c d 

Either:
- Select a, press shift, and arrow right to select also b. 
- Select a, press command/control and select b

With the print out of the change in the attached test, this also throws the same exception:

Exception in thread ""JavaFX Application Thread"" java.lang.IndexOutOfBoundsException: toIndex = 2
        at java.base/java.util.AbstractList.subListRangeCheck(AbstractList.java:507)
        at java.base/java.util.AbstractList.subList(AbstractList.java:497)
        at javafx.base/com.sun.javafx.collections.ChangeHelper.addRemoveChangeToString(ChangeHelper.java:36)
        at javafx.base/javafx.collections.ListChangeBuilder$SingleChange.toString(ListChangeBuilder.java:630)
        at java.base/java.lang.String.valueOf(String.java:2951)
        at TableSelectionIssue.lambda$start$1(TableSelectionIssue.java:53)
        at javafx.base/com.sun.javafx.collections.ListListenerHelper$SingleChange.fireValueChangedEvent(ListListenerHelper.java:164)
        at javafx.base/com.sun.javafx.collections.ListListenerHelper.fireValueChangedEvent(ListListenerHelper.java:73)
        at javafx.base/javafx.collections.ObservableListBase.fireChange(ObservableListBase.java:233)
        at javafx.base/javafx.collections.ListChangeBuilder.commit(ListChangeBuilder.java:482)
        at javafx.base/javafx.collections.ListChangeBuilder.endChange(ListChangeBuilder.java:541)
        at javafx.base/javafx.collections.ObservableListBase.endChange(ObservableListBase.java:205)
        at javafx.controls@18-ea/com.sun.javafx.scene.control.SelectedItemsReadOnlyObservableList.lambda$new$0(SelectedItemsReadOnlyObservableList.java:91)
        at javafx.base/com.sun.javafx.collections.ListListenerHelper$Generic.fireValueChangedEvent(ListListenerHelper.java:329)
        at javafx.base/com.sun.javafx.collections.ListListenerHelper.fireValueChangedEvent(ListListenerHelper.java:73)
        at javafx.base/javafx.collections.ObservableListBase.fireChange(ObservableListBase.java:233)
        at javafx.base/javafx.collections.ListChangeBuilder.commit(ListChangeBuilder.java:482)
        at javafx.base/javafx.collections.ListChangeBuilder.endChange(ListChangeBuilder.java:541)
        at javafx.base/javafx.collections.ObservableListBase.endChange(ObservableListBase.java:205)
        at javafx.controls@18-ea/com.sun.javafx.scene.control.ReadOnlyUnbackedObservableList._endChange(ReadOnlyUnbackedObservableList.java:64)
        at javafx.controls@18-ea/javafx.scene.control.MultipleSelectionModelBase$SelectedIndicesList._endChange(MultipleSelectionModelBase.java:908)
        at javafx.controls@18-ea/javafx.scene.control.ControlUtils.updateSelectedIndices(ControlUtils.java:208)

In this case, the change is fired from ListChangeBuilder::commit, with new SingleChange<>(finalizeSubChange(addRemoveChanges.get(0)), list);
For instance, the single change after the shitf+right arrow is:  change = { [TablePosition[0,1]] added at 1 }
This goes to ControlUtils::updateSelectedIndices, and causes the same issue: sm.selectedIndices has [0] as the selected row, but sm.selectedIndices._nextAdd(c.getFrom(), to); uses c.getFrom() = 1.




        ;;;","2022-01-07 12:03;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jfx/pull/710
Date: 2022-01-07 20:00:27 +0000;;;","2022-04-07 05:56;dukebot;Changeset: c55931f6
Author:    Jose Pereda <jpereda@openjdk.org>
Date:      2022-04-07 12:52:58 +0000
URL:       https://git.openjdk.java.net/jfx/commit/c55931f662ccbb4cdbb602a31d3d61231ebf79ca
;;;","2022-06-28 11:12;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jfx17u/pull/67
Date: 2022-06-28 18:05:33 +0000;;;",,,,,,,,,,,,,,,,,,,,
Clicking a selected cell from a group of selected cells in a TableView clears the selected items list but remains selected,JDK-8273336,5057961,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,jpereda,jpereda,jpereda,2021-09-03 10:30,2022-06-28 11:09,2023-10-01 09:57,2022-02-09 00:43,jfx11.0.2,jfx17,,,,,,jfx19,javafx,,0,,,,,,,,,,,,,,,,,,,,,,"Given a TableView with multiple selection mode and cell selection enabled, after selecting some cells (with shift), and deselecting them by clicking on one of the selected cells, this last cell remains selected (the cell keeps the selected pseudoclass state), but the list of selected items is empty.

Also, if a ListChangeListener is added to such list, the Change.removed list contains a null element, instead of the first element of the list.

This can be reproduced with any JavaFX version from 11 to head (though JDK-8273324 is found after 17-ea+14).

Attached is a test that can be used to reproduce the issue, with any version lower than 17-ea+14 (to avoid JDK-8273324). 

Steps: 
1. Select the first cell in the first row by mouse clicking on it. Log: 
Change: { [Person{a b}] added at 0 }, selected items: [Person{a b}] 

2. Press Shift and mouse click the other cell in the same row. Log: 
Change: { [Person{a b}] removed at 0 }, selected items: [] 
Change: { [Person{a b}] added at 0 }, selected items: [Person{a b}] 

3. Release Shift, and mouse click on one of the already-selected cells. Log:
Change: { [null] removed at 1 }, selected items: [] 

Same with these steps:

 1. Select the first cell ""a"" in the first row by mouse clicking on it. Log: 
Change: { [Person{a b}] added at 0 }, selected items: [Person{a b}] 

2. Press Shift and mouse click the cell ""d"" in the second row. Log: 
Change: { [Person{a b}] removed at 0 }, selected items: [] 
Change: { [Person{a b}, Person{c d}] added at 0 },  selected items: [Person{a b}, Person{c d}]

3. Release Shift, and mouse click either on the selected cell ""a"", log:
Change: { [Person{c d}, null] removed at 1 },  selected items: []

or ""c"", log:
Change: { [Person{c d}, null] removed at 1 },  selected items: []

In any case, the null element of the removed change list seems to be corresponding to the first item (person {a,b}).

If the selected items list is empty, the selected pseudoclass should be removed from the cell. It is possible that the null element is preventing this.
",,,,,,,,,,,JDK-8289380,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"2021-09-03 09:51;jpereda;TableSelectionIssue.java;https://bugs.openjdk.org/secure/attachment/96328/TableSelectionIssue.java",,,,,,,,,,,,,,,,,,,"0|i2u8rf:",9223372036854775807,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@67282485,,,,,,,,,"2021-09-07 05:51;jpereda;[~mstrauss] Since you have been working recently with ControlUtils::buildClearAndSelectChange, let me ask you something: 

while debugging this current issue, I noticed that it defines Change.to the same as Change.from:

https://github.com/openjdk/jfx/blob/master/modules/javafx.controls/src/main/java/javafx/scene/control/ControlUtils.java#L100

Don't you find it odd? The method name is ""clear"" and ""select"", but for the latter to work we need to>from, or the change.addedSubList will be always empty.

With this simple change:

@Override public int getTo() {
    return getFrom() + 1;
}

the attached test case gets fixed. 

Probably it needs more complex logic, though, like passing down the size of the selection from the callers, but it seems to be always 1.

Thoughts?
                ;;;","2021-09-07 08:34;mstrauss;`ControlUtils.buildClearAndSelectChange` is only called when the to-be-selected cell/row is already selected. That's why the returned `ListChangeListener.Change` only removes elements, but doesn't add any. For example, consider the following list, of which all rows are currently selected:
Row1
Row2
Row3
Row4

Clicking on 'Row3' will cause `buildClearAndSelectChange` to be invoked, which yields a change consisting of two sub-changes:
1. remove [Row1, Row2]
2. remove [Row4]

Since we are dealing with removals, getFrom()==getTo() is correct according to the specification of `ListChangeListener.Change`.
This leaves us with 'Row3' still being selected, which is what we wanted to achieve.

That being said, here's where I assume the existing logic is incorrect:
Assume that we don't have a list, but a table, of which all cells are currently selected:

Cell1a, Cell1b
Cell2a, Cell2b

Clicking on 'Cell2b' will again cause 'buildClearAndSelectChange' to be invoked, which will yield a `Change` consisting of single sub-change:
1. remove [Cell1a, Cell1b, Cell2a]

Note that in this case, we are not dealing with row indices, but with `TablePosition`s.
While we have removed table positions in both rows, keep in mind that the second row is still selected (because a table position within that row is still selected).

After that, `ControlUtils.updateSelectedIndices` is invoked with our `Change`. And here's the crucial part:
https://github.com/openjdk/jfx/blob/78ae4a815b728f5a0dca8fa6de8ca68a27a1d189/modules/javafx.controls/src/main/java/javafx/scene/control/ControlUtils.java#L162

This just iterates over all removed cells, and then unconditionally removes all selected row indices in which the cells are located.
Quite obviously, this is incorrect: we can't remove a selected row index just because a cell within that row happened to be deselected. We can only remove the selected row index if ALL of its selected cells are deselected.;;;","2021-09-07 09:11;jpereda;I see your point, but there are two parts in updateSelectedIndices:

1. Remove:
c.getRemoved().stream()
                    .map(TablePositionBase::getRow)
                    .peek(sm.selectedIndices::clear)
2. Add:
            c.getAddedSubList().stream()
                    .map(TablePositionBase::getRow)
                    .peek(sm.selectedIndices::set)

When called after buildClearAndSelectChange we are always assuming that, because from=to, there is never a sublist to be added, and we are only removing indices, and that potentially leads to the issue you describe (wrong removal of rows because cells are removed).

So either we fix:
 
c.getRemoved().stream()
                    .map(TablePositionBase::getRow)
                    .peek(sm.selectedIndices::clear)

to clear an index if, and only if, all cells in that row are deselected, or we modify buildClearAndSelectChange to include sublists to be added after the rows are removed.

This is what I'm testing now:

in TableView::clearAndSelect:

if (wasSelected) {
                change = ControlUtils.buildClearAndSelectChange(
                        selectedCellsSeq, previousSelection, newTablePosition, Comparator.comparing(TablePosition::getRow),
                        isCellSelectionEnabled ? getSelectedCells().size() : 0); // <--- Add size of change if cell selection is enabled
            }

in ControlUtils:

static <T> ListChangeListener.Change<T> buildClearAndSelectChange(
            ObservableList<T> list, List<T> removed, T retainedRow, Comparator<T> rowComparator, int changeSize) {
    ...
@Override public int getTo() {
                return getFrom() + changeSize;
            }
...
}

That works for the tests I've done (including your asserts for the test ensureRowRemainsSelectedWhenSelectingCellInSameRow).;;;","2021-09-07 10:15;mstrauss;I think the first approach makes more sense. If you click on an already-selected item, you don't expect the selection to be cleared and added again. Instead, only the not-to-be-selected items should be deselected, while the to-be-selected item should be retained.
You're correct in that the method name is confusing and not factual, I think it should be renamed to something like `buildClearChange`.;;;","2021-09-07 10:28;jpereda;If you check TableView::clearAndSelect, the change is done atomically in two steps: 
- clear selection first, 
- then select again.

Then the change is built via ControlUtils.buildClearAndSelectChange
And finally it is fired with ControlUtils.updateSelectedIndices, where it is processed atomically, first clearing and then selecting, but only one event is triggered.

So I don't see why ControlUtils.buildClearAndSelectChange can't have two parts, following its name: clear first and then select. Note that in the Change is built, not fired, so in any case there are not two changes but just one.

For this reason, I'm more inclined to version 2: the issue can be fixed by finding out when Change.to should be different than Change.from.
;;;","2021-09-09 07:10;jpereda;This is what is finally working fine for me:

In ControlUtils:
 
 static <T> ListChangeListener.Change<T> buildClearAndSelectChange(
            ObservableList<T> list, List<T> removed, T retainedRow, Comparator<T> rowComparator, int changeSize) {
        return new ListChangeListener.Change<T>(list) {
  
@Override public int getTo() {
                return getFrom() + (atFirstRange ? changeSize : 0);
            }

In MultipleSelectionModelBase:

@Override public void clearAndSelect(int row) {
    ...
if (wasSelected) {
            change = ControlUtils.buildClearAndSelectChange(
                    selectedIndices, previousSelectedIndices, row, Comparator.naturalOrder(), 0);
        }...
}

and in TreeTableView/TableView:

@Override public void clearAndSelect(int row, ...) {
        ...
if (wasSelected) {
                change = ControlUtils.buildClearAndSelectChange(
                        selectedCellsSeq, previousSelection, newTablePosition, Comparator.comparing(Tree/TablePosition::getRow),
                        isCellSelectionEnabled ? getSelectedCells().size() : 0);
            } ...

This passes all :controls tests and the commented assertions of ensureRowRemainsSelectedWhenSelectingCellInSameRow

but I keep bumping into JDK-8273339, so I'm not sure if these two issues can be treated separatedly or as a whole.;;;","2022-01-05 11:44;jpereda;[~mstrauss] While the option two has been working fine for a while, we have just found an issue with it, so following your advice now I'm trying option 1.

What do you think about this possible change in ControlUtils:updateSelectedIndices?

+    ObservableList<TablePosition> selectedCells = ((TableView.TableViewSelectionModel<S>) sm).getSelectedCells();
            final List<Integer> removed = c.getRemoved().stream()
                    .map(TablePositionBase::getRow)
+    .filter(row -> {
+        // Only remove the row index if there are no more selected cells in such row
+         return selectedCells.stream().noneMatch(tp -> tp.getRow() == row);
+    })
                    .distinct()
                    .peek(sm.selectedIndices::clear)
                    .collect(Collectors.toList());
;;;","2022-01-05 12:44;mstrauss;I've tried your proposed change with the following modifications:

1. First, I've factored out the row filter function as a parameter `Predicate<Integer> removeRowFilter` for the `updateSelectedIndices` function to account for the fact that `sm` is not always a `TableViewSelectionModel` (you'll get ClassCastExceptions otherwise).

2. If we don't remove selected rows, we also shouldn't build a `Change` that adds them again, so we need another filter in the next step.

This is the relevant part of the function, with my modifications:

    while (c.next()) {
        // it may look like all we are doing here is collecting the removed elements (and
        // counting the added elements), but the call to 'peek' is also crucial - it is
        // ensuring that the selectedIndices bitset is correctly updated.

        sm.startAtomic();
        final List<Integer> removed = c.getRemoved().stream()
                .map(TablePositionBase::getRow)
+               .filter(removeRowFilter)
                .distinct()
                .peek(sm.selectedIndices::clear)
                .collect(Collectors.toList());

        final int addedSize = (int)c.getAddedSubList().stream()
                .map(TablePositionBase::getRow)
                .distinct()
+               .filter(row -> !sm.selectedIndices.contains(row))
                .peek(sm.selectedIndices::set)
                .count();
        sm.stopAtomic();

        final int to = c.getFrom() + addedSize;

        if (c.wasReplaced()) {
+           if (c.getFrom() != to) {
+               sm.selectedIndices._nextReplace(c.getFrom(), to, removed);
+           }
        } else if (c.wasRemoved()) {
            sm.selectedIndices._nextRemove(c.getFrom(), removed);
        } else if (c.wasAdded()) {
+           if (c.getFrom() != to) {
+               sm.selectedIndices._nextAdd(c.getFrom(), to);
+           }
        }
    }

However, I'm getting unit test failures with this code. Not sure whether they are substantial, or simply an artifact of retaining already selected rows instead of clearing and adding them again.;;;","2022-01-05 14:17;jpereda;Yes, of course, refactoring the predicate is required to take into account other types of selection models, like the TreeTableViewSelectionModel, and also to include the case !sm.isCellSelectionEnabled().

The second filter you have added is causing some issues, as suddenly after the expected change, changes of null items removed from 0 are reported. 

In fact, applying the first filter only, :controls:test reports green.

Including the second one (but without the from-to checks):
8542 tests completed, 11 failed, 245 skipped
and with the checks:
8542 tests completed, 9 failed, 245 skipped


;;;","2022-01-05 14:30;mstrauss;With just the first filter, I'm getting a test failure for TableViewTest.test_rt_39256, and the cause seems to be that rows are added in `updateSelectedIndices`, even though they're already there.;;;","2022-01-05 15:29;jpereda;test_rt_39256 failed for me too, but adding a check for sm.isCellSelectionEnabled() fixed it.
This is my predicate so far:

private static <S> Predicate<Integer> removeRowFilter(MultipleSelectionModelBase<S> sm) {
        if (sm instanceof TableView.TableViewSelectionModel) {
            TableView.TableViewSelectionModel<S> tvsm = (TableView.TableViewSelectionModel<S>) sm;
            if (!tvsm.isCellSelectionEnabled()) {
                return row -> true;
            }
            ObservableList<TablePosition> selectedCells = tvsm.getSelectedCells();
            // Only remove the row index if there are no more selected cells in such row
            return row -> selectedCells.stream().noneMatch(tp -> tp.getRow() == row);
        } else if (sm instanceof TreeTableView.TreeTableViewSelectionModel) {
            TreeTableView.TreeTableViewSelectionModel<S> ttvsm = (TreeTableView.TreeTableViewSelectionModel<S>) sm;
            if (!ttvsm.isCellSelectionEnabled()) {
                return row -> true;
            }
            ObservableList<TreeTablePosition<S,?>> selectedCells = ttvsm.getSelectedCells();
            // Only remove the row index if there are no more selected cells in such row
            return row -> selectedCells.stream().noneMatch(tp -> tp.getRow() == row);
        }
        return row -> true;
    };;;","2022-01-05 16:13;mstrauss;Maybe it would be cleaner to place the predicates at the call site in their respective classes (TableViewSelectionModel / TreeTableViewSelectionModel).
Other than that, are you planning to create a PR for this issue?;;;","2022-01-05 17:15;jpereda;Moving the predicate to each model is a good idea indeed.
I can work on a PR, but probably I'll need to add some more tests...;;;","2022-01-07 11:40;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jfx/pull/709
Date: 2022-01-07 19:36:45 +0000;;;","2022-02-09 00:43;roboduke;Changeset: 590033f4
Author:    Jose Pereda <jpereda@openjdk.org>
Date:      2022-02-09 08:41:47 +0000
URL:       https://git.openjdk.java.net/jfx/commit/590033f4cb2b5bbe02261a845c554dd08c7866ff
;;;","2022-06-28 00:18;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jfx17u/pull/66
Date: 2022-06-28 07:10:58 +0000;;;",,,,,,,,,,
Zero should warn about unimplemented -XX:+LogTouchedMethods,JDK-8273333,5057956,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,shade,shade,shade,2021-09-03 08:27,2021-10-04 05:32,2023-10-01 09:57,2021-09-07 00:36,11,17,18,8,,,,18,hotspot,,0,jdk17u-fix-request,jdk17u-fix-yes,redhat-interest,,,,,,,,,,,,,,,,,,,"Currently Zero VM does not implement -XX:+LogTouchedMethods runtime features, which makes runtime/CommandLine/PrintTouchedMethods.java tier1 test fail with it.

Instead of implementing it (risking performance and rare bugs), Zero should just reject the option.",,,,,,,,,,,JDK-8274703,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2u8qb:",9223372036854775807,b14,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,,,"2021-09-07 00:36;roboduke;Changeset: 81c719be
Author:    Aleksey Shipilev <shade@openjdk.org>
Date:      2021-09-07 07:35:23 +0000
URL:       https://git.openjdk.java.net/jdk/commit/81c719be3995fa54974e8b8826ad81bf07bd012f
;;;","2021-10-01 04:38;shade;Fix Request (17u)

Fixes another tier1 test for Zero. Tests pass as expected.;;;",,,,,,,,,,,,,,,,,,,,,,,,
IllegalArgumentException: fromIndex(0) > toIndex(-1) after clear and select TableCell,JDK-8273324,5057946,Bug,Resolved,JDK,JDK,software,duke,,,P2,Fixed,mstrauss,jpereda,jpereda,2021-09-03 05:40,2021-09-18 07:02,2023-10-01 09:57,2021-09-08 07:28,jfx17,,,,,,,jfx18,javafx,,0,regression,regression_8196065,,,,,,,,,,,,,,,,,,,,"Given a TableView with multiple selection mode and cell selection enabled, after selecting some cells (with shift), and deselecting them by clicking on one of the selected cells, this exception is thrown:

Exception in thread ""JavaFX Application Thread"" java.lang.IllegalArgumentException: fromIndex(0) > toIndex(-1)
        at java.base/java.util.AbstractList.subListRangeCheck(AbstractList.java:509)
        at java.base/java.util.ArrayList.subList(ArrayList.java:1137)
        at javafx.controls/javafx.scene.control.ControlUtils$1.<init>(ControlUtils.java:90)
        at javafx.controls/javafx.scene.control.ControlUtils.buildClearAndSelectChange(ControlUtils.java:75)
        at javafx.controls/javafx.scene.control.TableView$TableViewArrayListSelectionModel.clearAndSelect(TableView.java:2468)
        at javafx.controls/javafx.scene.control.TableView$TableViewSelectionModel.clearAndSelect(TableView.java:1966)
        at javafx.controls/com.sun.javafx.scene.control.behavior.TableCellBehaviorBase.simpleSelect(TableCellBehaviorBase.java:213)
        at javafx.controls/com.sun.javafx.scene.control.behavior.TableCellBehaviorBase.doSelect(TableCellBehaviorBase.java:195)
        at javafx.controls/com.sun.javafx.scene.control.behavior.CellBehaviorBase.mouseReleased(CellBehaviorBase.java:185)
        at javafx.controls/com.sun.javafx.scene.control.inputmap.InputMap.handle(InputMap.java:274)
        at javafx.base/com.sun.javafx.event.CompositeEventHandler$NormalEventHandlerRecord.handleBubblingEvent(CompositeEventHandler.java:247)
        at javafx.base/com.sun.javafx.event.CompositeEventHandler.dispatchBubblingEvent(CompositeEventHandler.java:80)
        at javafx.base/com.sun.javafx.event.EventHandlerManager.dispatchBubblingEvent(EventHandlerManager.java:234)
        at javafx.base/com.sun.javafx.event.EventHandlerManager.dispatchBubblingEvent(EventHandlerManager.java:191)
        at javafx.base/com.sun.javafx.event.CompositeEventDispatcher.dispatchBubblingEvent(CompositeEventDispatcher.java:59)
        at javafx.base/com.sun.javafx.event.BasicEventDispatcher.dispatchEvent(BasicEventDispatcher.java:58)
        at javafx.base/com.sun.javafx.event.EventDispatchChainImpl.dispatchEvent(EventDispatchChainImpl.java:114)
        at javafx.base/com.sun.javafx.event.BasicEventDispatcher.dispatchEvent(BasicEventDispatcher.java:56)
        at javafx.base/com.sun.javafx.event.EventDispatchChainImpl.dispatchEvent(EventDispatchChainImpl.java:114)
        at javafx.base/com.sun.javafx.event.BasicEventDispatcher.dispatchEvent(BasicEventDispatcher.java:56)
        at javafx.base/com.sun.javafx.event.EventDispatchChainImpl.dispatchEvent(EventDispatchChainImpl.java:114)
        at javafx.base/com.sun.javafx.event.BasicEventDispatcher.dispatchEvent(BasicEventDispatcher.java:56)
        at javafx.base/com.sun.javafx.event.EventDispatchChainImpl.dispatchEvent(EventDispatchChainImpl.java:114)
        at javafx.base/com.sun.javafx.event.BasicEventDispatcher.dispatchEvent(BasicEventDispatcher.java:56)
        at javafx.base/com.sun.javafx.event.EventDispatchChainImpl.dispatchEvent(EventDispatchChainImpl.java:114)
        at javafx.base/com.sun.javafx.event.BasicEventDispatcher.dispatchEvent(BasicEventDispatcher.java:56)
        at javafx.base/com.sun.javafx.event.EventDispatchChainImpl.dispatchEvent(EventDispatchChainImpl.java:114)
        at javafx.base/com.sun.javafx.event.EventUtil.fireEventImpl(EventUtil.java:74)
        at javafx.base/com.sun.javafx.event.EventUtil.fireEvent(EventUtil.java:54)
        at javafx.base/javafx.event.Event.fireEvent(Event.java:198)
        at javafx.graphics/javafx.scene.Scene$MouseHandler.process(Scene.java:3880)
        at javafx.graphics/javafx.scene.Scene.processMouseEvent(Scene.java:1873)
        at javafx.graphics/javafx.scene.Scene$ScenePeerListener.mouseEvent(Scene.java:2606)
        at javafx.graphics/com.sun.javafx.tk.quantum.GlassViewEventHandler$MouseEventNotification.run(GlassViewEventHandler.java:411)
        at javafx.graphics/com.sun.javafx.tk.quantum.GlassViewEventHandler$MouseEventNotification.run(GlassViewEventHandler.java:301)
        at java.base/java.security.AccessController.doPrivileged(Native Method)
        at javafx.graphics/com.sun.javafx.tk.quantum.GlassViewEventHandler.lambda$handleMouseEvent$2(GlassViewEventHandler.java:450)
        at javafx.graphics/com.sun.javafx.tk.quantum.QuantumToolkit.runWithoutRenderLock(QuantumToolkit.java:423)
        at javafx.graphics/com.sun.javafx.tk.quantum.GlassViewEventHandler.handleMouseEvent(GlassViewEventHandler.java:449)
        at javafx.graphics/com.sun.glass.ui.View.handleMouseEvent(View.java:557)
        at javafx.graphics/com.sun.glass.ui.View.notifyMouse(View.java:943)
        at javafx.graphics/com.sun.glass.ui.mac.MacView.notifyMouse(MacView.java:127)

This happens only after JDK-8196065 integration (starting 17-ea+14). 

Attached is a test that can be used to reproduce the issue, with head or any ea greater than 17-ea+13.

Steps:
1. Select the first cell in the first row by mouse clicking on it. Log:
Change: { [Person{a b}] added at 0 },  selected items: [Person{a b}]

2. Press Shift and mouse click the other cell in the same row. Log:
Change: { [Person{a b}] removed at 0 },  selected items: []
Change: { [Person{a b}] added at 0 },  selected items: [Person{a b}]

3. Release Shift, and mouse click on one of the already-selected cells.

Before 17-ea+14, it will log:
Change: { [null] removed at 1 },  selected items: []
However, starting with 17-ea+14, the above exception is thrown.

After a quick look, it seems that JDK-8196065 introduced Collections.binarySearch in ControlUtils::buildClearAndSelectChange, which after following the above steps, it returns 0 for some reason, which sets midIndex = -1, causing subList(0, midIndex) to return the above exception.

",,,,,,,,,,,JDK-8273849,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8196065,,,,,"2021-09-03 05:29;jpereda;TableSelectionIssue.java;https://bugs.openjdk.org/secure/attachment/96327/TableSelectionIssue.java",,,,,,,,,,,,jfx17,,,,,,,"0|i2u8o3:",9223372036854775807,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@67282485,,,,,,,,,"2021-09-03 05:55;kcr;[~jpereda] Do you want to take a stab at this or would you prefer [~mstrauss] to look into it?;;;","2021-09-03 06:04;jpereda;I just gave a quick look at the changes done by  [~mstrauss], and noticed this possible case where the binary search can return 0, but I rather prefer him to look into it. ;;;","2021-09-03 10:54;mstrauss;While it's trivial to prevent an exception from popping up, it's not like this particular scenario was working as expected before the change.

When multiple cells in a single row are selected, and then the selection is narrowed down by clicking on one of the already-selected cells, the old behavior would result in the entire row (i.e. the item) being deselected. This can be seen in the pre-17-ea+14 log:

Change: { [null] removed at 1 }, selected items: []

It's obviously incorrect that no items are selected, even though a cell was clearly selected by clicking on it.

The reason for this is that in ControlUtils.updateSelectedIndices, the selected indices are updated based on the row index of the deselected cell alone, without taking into account whether other cells in the same row might still be selected.;;;","2021-09-03 11:15;jpereda;Yes, you are right about the incorrect behaviour of deselection. I've just filed https://bugs.openjdk.java.net/browse/JDK-8273336 precisely for that a few minutes ago.

Nonetheless, given that the Javadoc for binarySearch states[1] that 0 is a possible returned value, I believe we should have a guard against that scenario.

[1]: https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Collections.html#binarySearch(java.util.List,T);;;","2021-09-08 07:28;roboduke;Changeset: a272c4f6
Author:    Michael Strauß <mstrauss@openjdk.org>
Committer: Kevin Rushforth <kcr@openjdk.org>
Date:      2021-09-08 14:26:49 +0000
URL:       https://git.openjdk.java.net/jfx/commit/a272c4f6bd08fee8928c78e17428574aec485cfd
;;;",,,,,,,,,,,,,,,,,,,,,
[lworld] Fix post-parse call devirtualization with inline type receiver,JDK-8273323,5057945,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,thartmann,thartmann,thartmann,2021-09-03 05:20,2021-09-14 01:39,2023-10-01 09:57,2021-09-09 06:46,repo-valhalla,,,,,,,repo-valhalla,hotspot,,0,c2,lworld,,,,,,,,,,,,,,,,,,,,"Post-parse call devirtualization (JDK-8257211) converts virtual calls to static calls which allows an inline type receiver to be passed as fields and the corresponding buffer allocation to become useless.

Currently, the inline type nodes created during that optimization and also such useless buffer allocations are not removed, leading to missed optimization opportunities and asserts like below.

# A fatal error has been detected by the Java Runtime Environment:
#
#  Internal Error (/oracle/valhalla2/open/src/hotspot/share/opto/compile.cpp:4104), pid=2752650, tid=2752665
#  assert(false) failed: inline type node was not removed

Current CompileTask:
C2:   3704 1217    b  4       compiler.valhalla.inlinetypes.TestLWorld::test150 (54 bytes)

Stack: [0x00007fab1783a000,0x00007fab1793b000],  sp=0x00007fab17935fa0,  free space=1007k
Native frames: (J=compiled Java code, j=interpreted, Vv=VM code, C=native code)
V  [libjvm.so+0xa3db26]  Compile::final_graph_reshaping_main_switch(Node*, Final_Reshape_Counts&, unsigned int)+0x496
V  [libjvm.so+0xa3f3c5]  Compile::final_graph_reshaping_impl(Node*, Final_Reshape_Counts&) [clone .part.0]+0x85
V  [libjvm.so+0xa3fac8]  Compile::final_graph_reshaping_walk(Node_Stack&, Node*, Final_Reshape_Counts&)+0x138
V  [libjvm.so+0xa4c011]  Compile::final_graph_reshaping()+0x331
V  [libjvm.so+0xa5214a]  Compile::Optimize()+0x193a
V  [libjvm.so+0xa53890]  Compile::Compile(ciEnv*, ciMethod*, int, bool, bool, bool, bool, bool, DirectiveSet*)+0x1630
V  [libjvm.so+0x844640]  C2Compiler::compile_method(ciEnv*, ciMethod*, int, bool, DirectiveSet*)+0x6a0
V  [libjvm.so+0xa639f1]  CompileBroker::invoke_compiler_on_method(CompileTask*)+0xd31
V  [libjvm.so+0xa64728]  CompileBroker::compiler_thread_loop()+0x598
V  [libjvm.so+0x1966a1c]  JavaThread::thread_main_inner()+0x27c
V  [libjvm.so+0x196d040]  Thread::call_run()+0x100
V  [libjvm.so+0x161dfa4]  thread_native_entry(Thread*)+0x104",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8273715,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2u8nv:",9223372036854775807,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Some containers/docker/TestJFREvents.java configs are running out of memory,JDK-8273318,5057937,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,shade,shade,shade,2021-09-03 03:12,2021-10-06 00:40,2023-10-01 09:57,2021-09-08 00:44,11,17,18,,,,,18,hotspot,,0,containers,jdk17u-fix-request,jdk17u-fix-yes,noreg-self,redhat-interest,,,,,,,,,,,,,,,,,"$ CONF=linux-x86_64-server-fastdebug make run-test TEST=containers/docker/TestJFREvents.java

STDERR:
 stdout: [];
 stderr: [WARNING: Your kernel does not support swap limit capabilities or the cgroup is not mounted. Memory limited without swap.
]
 exitValue = 137

java.lang.RuntimeException: Expected to get exit value of [0]

	at jdk.test.lib.process.OutputAnalyzer.shouldHaveExitValue(OutputAnalyzer.java:489)
	at TestJFREvents.testContainerInfo(TestJFREvents.java:110)
	at TestJFREvents.containerInfoTestCase(TestJFREvents.java:89)
	at TestJFREvents.main(TestJFREvents.java:74)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at com.sun.javatest.regtest.agent.MainActionHelper$AgentVMRunnable.run(MainActionHelper.java:312)
	at java.base/java.lang.Thread.run(Thread.java:833)

exitValue = 137 suggests the container was killed by OOM killer. The failing configuration is with 64m, it is apparently too low.",,,,,,,,,,,JDK-8274712,,,,,,,,,,,,,,,,,,,,,,,,JDK-8273314,,,,,JDK-8203359,,,,,,,,,,,,,,,,,,,,,,,,"0|i2u8m3:",9223372036854775807,b14,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@78d03d9a,,,,,,,,,"2021-09-08 00:44;roboduke;Changeset: 7d24a334
Author:    Aleksey Shipilev <shade@openjdk.org>
Date:      2021-09-08 07:43:28 +0000
URL:       https://git.openjdk.java.net/jdk/commit/7d24a3342129d4c71fad0d8d50d20758291d64b7
;;;","2021-10-01 01:04;shade;Fix Request (17u)

Clean backport to fix the test. Test starts to pass.;;;","2021-10-06 00:40;shade;Problematic test case was introduced by JDK-8203359.;;;",,,,,,,,,,,,,,,,,,,,,,,
crash in cmovP_cmpP_zero_zeroNode::bottom_type(),JDK-8273317,5057936,Bug,Resolved,JDK,JDK,software,duke,,,P5,Fixed,sguoyun,sguoyun,sguoyun,2021-09-03 02:56,2021-11-11 07:43,2023-10-01 09:57,2021-10-19 23:38,18,,,,,,,18,hotspot,,0,c2,hs-comp-triaged,oracle-triage-11,oracle-triage-17,oracle-triage-18,,,,,,,,,,,,,,,,,"When I implement a new match under MIPS64 and Loongarch64architecture

match(Set dst (CMoveP (Binary cop (CmpP op1 zero)) (Binary dst zero)));

this means right child of CmpP is immediate zero and right child of CmovP also is immediate zero, then an exception will occur:
#
# A fatal error has been detected by the Java Runtime Environment:
#
#  SIGSEGV (0xb) at pc=0x000000fff410fcc4, pid=11130, tid=11146
#
# JRE version: OpenJDK Runtime Environment (17.0) (build 17-internal+0-jenkins-slave-20210821140615-jdk-ls-a526852e137)
# Java VM: OpenJDK 64-Bit Server VM (17-internal+0-jenkins-slave-20210821140615-jdk-ls-a526852e137, compiled mode, compressed oops, compressed class ptrs, g1 gc, linux-loongarch64)
# Problematic frame:
# V  [libjvm.so+0x21fcc4]  cmovP_cmpP_zero_zeroNode::bottom_type() const+0x44
#
# No core dump will be written. Core dumps have been disabled. To enable core dumping, try ""ulimit -c unlimited"" before starting Java again
#
# If you would like to submit a bug report, please visit:
#   https://bugreport.java.com/bugreport/crash.jsp
#


",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,other,,,,,,,,,linux,,,,,"0|i2u8lv:",9223372036854775807,b20,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2021-09-08 23:52;thartmann;ILW = Crash in C2's matcher (does not affect current code), only with newly implemented instruction, no workaround = LLH = P5;;;","2021-10-19 23:38;roboduke;Changeset: bd0bed71
Author:    sunguoyun <sunguoyun@loongson.cn>
Committer: Tobias Hartmann <thartmann@openjdk.org>
Date:      2021-10-20 06:37:20 +0000
URL:       https://git.openjdk.java.net/jdk/commit/bd0bed71e55f0bb8b4619495c79184f94c0701fb
;;;",,,,,,,,,,,,,,,,,,,,,,,,
Standard Names specification for MessageDigest missing SHA-512,JDK-8273316,5057728,Bug,Closed,JDK,JDK,software,duke,,,P4,Fixed,mullan,webbuggrp,webbuggrp,2021-08-30 22:08,2021-10-18 01:43,2023-10-01 09:57,2021-09-20 09:05,11,16,,,,,,18,security-libs,,0,additional-information-received,dcsaw,noreg-doc,regression,webbug,,,,,,,,,,,,,,,,,"A DESCRIPTION OF THE PROBLEM :
It is not in the list of names, although it is in the description (and is listed as _implemented_ in the separate page for sunproviders now oracle-providers). Wrong in 9-16, although only 11 and 16 are supported; correct in 8.

REGRESSION : Last worked in version 8

STEPS TO FOLLOW TO REPRODUCE THE PROBLEM :
browse e.g. https://docs.oracle.com/en/java/javase/16/docs/specs/security/standard-names.html#messagedigest-algorithms 


",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,generic,,,,,,,11,,generic,,,,,"0|i2u7bn:",9223372036854775807,b16,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@2ec284e3,,,,,,,Verified,,"2021-09-03 02:35;tongwan;The related javadoc can be found at:
https://docs.oracle.com/javase/8/docs/technotes/guides/security/StandardNames.html#MessageDigest
https://docs.oracle.com/en/java/javase/11/docs/specs/security/standard-names.html#messagedigest-algorithms
https://docs.oracle.com/en/java/javase/16/docs/specs/security/standard-names.html#messagedigest-algorithms;;;","2021-09-20 07:24;mullan;The SHA-512 entry was accidentally removed as part of JEP 273 when the SHA-512/224 and SHA-512/256 entries were added. No need for a CSR as this was previously approved when SHA-512 support was added to the JDK.;;;","2021-10-11 21:22;tongwan;Requested the submitter verify the fix at https://download.java.net/java/early_access/jdk18/docs/specs/security/standard-names.html#messagedigest-algorithms;;;","2021-10-18 01:43;tongwan;From the submitter:
Thank you.;;;",,,,,,,,,,,,,,,,,,,,,,
AES/GCM non-AVX512+VAES CPUs suffer after 8267125,JDK-8273297,5057914,Bug,Resolved,JDK,JDK,software,duke,,,P2,Fixed,svkamath,ascarpino,ascarpino,2021-09-02 11:30,2022-03-17 13:43,2023-10-01 09:57,2021-09-24 12:22,18,,,,,,,18,security-libs,,0,noreg-perf,,,,,,,,,,,,,,,,,,,,,"Performance dropped up to 10% for 1k data after 8267125 for CPUs that do not support the new intrinsic. Tests run were crypto.full.AESGCMBench and crypto.full.AESGCMByteBuffer from the jmh micro benchmarks.

The problem is each instance of GHASH allocates 96 extra longs for the AVX512+VAES intrinsic regardless if the intrinsic is used.  This extra table space should be allocated differently so that non-supporting CPUs do not suffer this penalty.  This issue also affects non-Intel CPUs too.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8274323,JDK-8267125,JDK-8274730,JDK-8283022,JDK-8275052,JDK-8267125,,,,,,,,,,generic,,,,,,,,,generic,,,,,"0|i2u8gz:",9223372036854775807,b17,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@35a9b277,,,,,,,,,"2021-09-02 11:31;ascarpino;Most likely solution is to have the intrinsic allocate the memory it needs.  It may not be efficient allocate each intrinsic call, but a pointer could be passed back to the GHASH object with the allocated memory perhaps?;;;","2021-09-24 12:22;roboduke;Changeset: 13e9ea9e
Author:    Smita Kamath <svkamath@openjdk.org>
Committer: Anthony Scarpino <ascarpino@openjdk.org>
Date:      2021-09-24 19:21:32 +0000
URL:       https://git.openjdk.java.net/jdk/commit/13e9ea9e922030927775345b1abde1313a6ec03f
;;;",,,,,,,,,,,,,,,,,,,,,,,,
Update README.md and CONTRIBUTING.md for jfx17u,JDK-8273280,5057886,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,kcr,kcr,kcr,2021-09-02 04:51,2023-03-10 14:14,2023-10-01 09:57,2021-09-14 05:51,jfx17.0.1,,,,,,,jfx17.0.1,javafx,,0,noreg-doc,,,,,,,,,,,,,,,,,,,,,"Once the jfx17u repo is forked, we need to update the `README.md` and `CONTRIBUTING.md` files at the top of the repo as appropriate for update releases.

This will be similar to what was done for jfx11u in JDK-8265667. I plan to copy those two files from jfx11u, changing the release version number from 11 to 17 as needed.
",,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8304008,,,,,,,JDK-8265667,,,,,JDK-8273732,,,,,,,,,,,,,,,,,,,,,,,,"0|i2u8ar:",9223372036854775807,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@1d1c7815,,,,,,,,,"2021-09-14 05:51;roboduke;Changeset: d0f52c4a
Author:    Kevin Rushforth <kcr@openjdk.org>
Date:      2021-09-14 12:49:30 +0000
URL:       https://git.openjdk.java.net/jfx17u/commit/d0f52c4a2c92a67a1dde72e7952a1ef9c0b6bb33
;;;",,,,,,,,,,,,,,,,,,,,,,,,,
C2: Move conditional negation into rc_predicate,JDK-8273277,5057883,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,neliasso,thartmann,thartmann,2021-09-02 03:43,2022-01-26 00:10,2023-10-01 09:57,2021-11-12 02:09,11,17,18,,,,,18,hotspot,,0,c2,c2-loopopts,hs-comp-triaged,jdk11u-fix-request,jdk11u-fix-yes,jdk17u-fix-request,jdk17u-fix-yes,oracle-triage-18,tencent-interest,,,,,,,,,,,,,"Executing vmTestbase/jit/t/t105/t105.java with the following arguments:

-XX:+TieredCompilation
-XX:Tier0BackedgeNotifyFreqLog=0
-XX:Tier2BackedgeNotifyFreqLog=0
-XX:Tier3BackedgeNotifyFreqLog=0
-XX:Tier2BackEdgeThreshold=1
-XX:Tier3BackEdgeThreshold=1
-XX:Tier4BackEdgeThreshold=1
-Xbatch

# A fatal error has been detected by the Java Runtime Environment:
#
#  Internal Error (/workspace/open/src/hotspot/share/opto/loopPredicate.cpp:1254), pid=17531, tid=17559
#  assert(proj->_con && predicate_proj->_con) failed: not a range check?
#
# JRE version: Java(TM) SE Runtime Environment (18.0) (fastdebug build 18-internal+0-2021-09-02-0844081.tobias.hartmann.jdk)
# Java VM: Java HotSpot(TM) 64-Bit Server VM (fastdebug 18-internal+0-2021-09-02-0844081.tobias.hartmann.jdk, mixed mode, sharing, tiered, compressed oops, compressed class ptrs, g1 gc, linux-amd64)
# Problematic frame:
# V  [libjvm.so+0x12afc0c]  PhaseIdealLoop::insert_initial_skeleton_predicate(IfNode*, IdealLoopTree*, ProjNode*, ProjNode*, ProjNode*, int, Node*, Node*, Node*, int, Node*, bool&, Deoptimization::DeoptReason)+0x4ac
#
# Core dump will be written. Default location: Core dumps may be processed with ""/opt/core.sh %p"" (or dumping to /testoutput/test-support/jtreg_open_test_hotspot_jtreg_vmTestbase_vm_compiler/scratch/5/core.17531)
#
# If you would like to submit a bug report, please visit:
#   https://bugreport.java.com/bugreport/crash.jsp

Current CompileTask:
C2:   7266  666   !b  4       jit.t.t105.t105::main (54 bytes)

Stack: [0x00007fe39dcfd000,0x00007fe39ddfe000],  sp=0x00007fe39ddf7e70,  free space=1003k
Native frames: (J=compiled Java code, j=interpreted, Vv=VM code, C=native code)
V  [libjvm.so+0x12afc0c]  PhaseIdealLoop::insert_initial_skeleton_predicate(IfNode*, IdealLoopTree*, ProjNode*, ProjNode*, ProjNode*, int, Node*, Node*, Node*, int, Node*, bool&, Deoptimization::DeoptReason)+0x4ac
V  [libjvm.so+0x12b1593]  PhaseIdealLoop::loop_predication_impl_helper(IdealLoopTree*, ProjNode*, ProjNode*, CountedLoopNode*, ConNode*, Invariance&, Deoptimization::DeoptReason)+0x1153
V  [libjvm.so+0x12b2428]  PhaseIdealLoop::loop_predication_impl(IdealLoopTree*) [clone .part.0]+0x548
V  [libjvm.so+0x12b3119]  IdealLoopTree::loop_predication(PhaseIdealLoop*)+0x109
V  [libjvm.so+0x12f9edf]  PhaseIdealLoop::build_and_optimize(LoopOptsMode)+0x11cf
V  [libjvm.so+0xa0aa6a]  PhaseIdealLoop::optimize(PhaseIterGVN&, LoopOptsMode)+0x28a
V  [libjvm.so+0xa0646a]  Compile::Optimize()+0x4aa
V  [libjvm.so+0xa08f68]  Compile::Compile(ciEnv*, ciMethod*, int, bool, bool, bool, bool, bool, DirectiveSet*)+0x1588
V  [libjvm.so+0x81d476]  C2Compiler::compile_method(ciEnv*, ciMethod*, int, bool, DirectiveSet*)+0x646
V  [libjvm.so+0xa191c1]  CompileBroker::invoke_compiler_on_method(CompileTask*)+0xd31
V  [libjvm.so+0xa19ef8]  CompileBroker::compiler_thread_loop()+0x598
V  [libjvm.so+0x188e71c]  JavaThread::thread_main_inner()+0x27c
V  [libjvm.so+0x1894d10]  Thread::call_run()+0x100
V  [libjvm.so+0x1572d34]  thread_native_entry(Thread*)+0x104
",,,,,,,,,,,JDK-8279605,JDK-8280698,JDK-8280093,JDK-8279495,,,,,,,,,,,,,,,,,,,,,JDK-8273933,,,,,JDK-8193130,,,,,"2021-09-02 03:45;thartmann;hs_err_pid17531.log;https://bugs.openjdk.org/secure/attachment/96313/hs_err_pid17531.log","2021-09-02 03:45;thartmann;replay_pid17531.log;https://bugs.openjdk.org/secure/attachment/96314/replay_pid17531.log",,,,,,,,,,,,,,,,,,"0|i2u8a3:",9223372036854775807,b24,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2021-09-02 03:50;thartmann;ILW = Assert during C2 compilation, only reproducible with extreme threshold settings, disable loop predication = HLM = P3;;;","2021-10-11 19:14;wchao;We have the following fix for this crash

diff --git a/src/hotspot/share/opto/loopPredicate.cpp b/src/hotspot/share/opto/loopPredicate.cpp
index fdb2bdb..54d8084 100644
--- a/src/hotspot/share/opto/loopPredicate.cpp
+++ b/src/hotspot/share/opto/loopPredicate.cpp
@@ -1251,10 +1251,13 @@ ProjNode* PhaseIdealLoop::insert_initial_skeleton_predicate(IfNode* iff, IdealLo
                                                             Node* rng, bool &overflow,
                                                             Deoptimization::DeoptReason reason) {
   // First predicate for the initial value on first loop iteration
-  assert(proj->_con && predicate_proj->_con, ""not a range check?"");
   Node* opaque_init = new OpaqueLoopInitNode(C, init);
   register_new_node(opaque_init, upper_bound_proj);
   BoolNode* bol = rc_predicate(loop, upper_bound_proj, scale, offset, opaque_init, limit, stride, rng, (stride > 0) != (scale > 0), ov
+  if (proj->_con != predicate_proj->_con) {
+    bol = new BoolNode(bol->in(1), bol->_test.negate());
+    register_new_node(bol, upper_bound_proj);
+  }
   Node* opaque_bol = new Opaque4Node(C, bol, _igvn.intcon(1)); // This will go away once loop opts are over
   C->add_skeleton_predicate_opaq(opaque_bol);
   register_new_node(opaque_bol, upper_bound_proj);
@@ -1273,6 +1276,10 @@ ProjNode* PhaseIdealLoop::insert_initial_skeleton_predicate(IfNode* iff, IdealLo
   max_value = new AddINode(opaque_init, max_value);
   register_new_node(max_value, new_proj);
   bol = rc_predicate(loop, new_proj, scale, offset, max_value, limit, stride, rng, (stride > 0) != (scale > 0), overflow);
+  if (proj->_con != predicate_proj->_con) {
+    bol = new BoolNode(bol->in(1), bol->_test.negate());
+    register_new_node(bol, new_proj);
+  }
   opaque_bol = new Opaque4Node(C, bol, _igvn.intcon(1));
   C->add_skeleton_predicate_opaq(opaque_bol);
   register_new_node(opaque_bol, new_proj);
;;;","2021-11-12 02:09;roboduke;Changeset: 710f4964
Author:    Nils Eliasson <neliasso@openjdk.org>
Date:      2021-11-12 10:08:26 +0000
URL:       https://git.openjdk.java.net/jdk/commit/710f496456d642c3e98d230270598f0b2dc75aba
;;;","2022-01-14 02:50;goetz;Fix request [17u]

I backport this for parity with 17.0.3-oracle.
A bugfix we should take.
Clean backport.
SAP nightly Testing passes.;;;","2022-01-14 02:53;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk17u-dev/pull/96
Date: 2022-01-14 10:50:31 +0000;;;","2022-01-24 06:50;goetz;Fix request [11u]

I backport this for parity with 11.0.15-oracle.
A bugfix we should take.
Clean backport. 
Test passes. SAP nightly testing passes.;;;","2022-01-24 06:55;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk11u-dev/pull/792
Date: 2022-01-24 14:47:00 +0000;;;",,,,,,,,,,,,,,,,,,,
Incorrect recovery attribution of record component type when j.l.Record is unavailable,JDK-8273263,5057868,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,jlahoda,jlahoda,jlahoda,2021-09-02 01:14,2021-09-10 07:48,2023-10-01 09:57,2021-09-03 02:31,17,18,,,,,,18,tools,,0,,,,,,,,,,,,,,,,,,,,,,"Consider a record like:
---
public record R(String s1, String s2) implements I {}
interface I {}
---

When this is attributed when j.l.Record does not exist, an error about the missing Record class is reported (correct), but the first `String` will be attributed as erroneous, which is not correct. The erroneous part is the supertype, not the component type.
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8273584,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2u86r:",9223372036854775807,b14,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4dca67bd,,,,,,,,,"2021-09-03 02:31;roboduke;Changeset: f17ee0c5
Author:    Jan Lahoda <jlahoda@openjdk.org>
Date:      2021-09-03 09:29:45 +0000
URL:       https://git.openjdk.java.net/jdk/commit/f17ee0c5c796951801c2026a2acac895a5c0af73
;;;",,,,,,,,,,,,,,,,,,,,,,,,,
Character.getName doesn't follow Unicode spec for ideographs,JDK-8273259,5057852,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,naoto,webbuggrp,webbuggrp,2021-09-01 13:16,2021-09-23 06:40,2023-10-01 09:57,2021-09-13 09:07,11,16,18,8,,,,18,core-libs,,0,additional-information-requested,dcsaw,noreg-doc,reproducer-yes,webbug,,,,,,,,,,,,,,,,,"A DESCRIPTION OF THE PROBLEM :
The Unicode spec chapter 4 at
https://www.unicode.org/versions/Unicode13.0.0/ch04.pdf gives a naming scheme on page 182, NR2, to systematically derive names for Unicode codepoints in a set of ranges.

This naming scheme is not followed by Character.getName. rather, most of these ranges are treated like the characters have no name, and the block based derivation rules seem to be used.

STEPS TO FOLLOW TO REPRODUCE THE PROBLEM :
Character.getName(0x2000A) 

EXPECTED VERSUS ACTUAL BEHAVIOR :
EXPECTED -
Return ""CJK UNIFIED IDEOGRAPH-2000A""
ACTUAL -
Returns ""CJK UNIFIED IDEOGRAPHS EXTENSION B 2000A""

---------- BEGIN SOURCE ----------
Character.getName(0x2000A)
---------- END SOURCE ----------

FREQUENCY : always


",,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8273296,,,,,,,,,,,,,,,,,,"2021-09-01 19:20;tongwan;Main.java;https://bugs.openjdk.org/secure/attachment/96311/Main.java",,,,,generic,,,,,,,,,generic,,,,,"0|i2u837:",9223372036854775807,b15,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4c088d55,,,,,,,,,"2021-09-01 20:20;tongwan;The observations on Windows 10:
JDK 8: Failed, returns ""CJK UNIFIED IDEOGRAPHS EXTENSION B 2000A""
JDK 11: Failed.
JDK 16: Failed.
JDK 18ea+1: Failed.
;;;","2021-09-02 06:57;naoto;The naming scheme for characters that have not been assigned the names in the UCD files is well defined in the j.l.Character.getName() spec. I agree that it deviates Unicode's spec as you noted, Java's scheme is also used to parse the name programmatically with Character.codePointOf(name), so modifying the scheme would be an incompatible change. Instead, I would add some description in those methods explaining the situation.;;;","2021-09-02 10:29;naoto;We may need to introduce `Unicode Name Property` scheme conformant name, e.g., `getUnicodeName()`, but I don't see any real requirement at the moment.;;;","2021-09-02 13:44;naoto;Question to the submitter: what was the use case for the issue? Was this inconsistency actually causing any issues in your application?;;;","2021-09-02 22:33;tongwan;Requested the submitter to provide further information for the above questions.;;;","2021-09-05 19:36;tongwan;Response from the submitter:
The case where I ran in to this issue were failing unit tests for a project, where names were not as I expected.

I can work around the issue by trying to replicate the JDK behavior through exhaustive checking, since this isn't the only block of characters that has this issue. Or just not running these teste: it's output to users, there is no automated interop required.

Making the javasoc of getCharacter align with the implemention more by adapting the scaladoc would also be a possibility.

Some examples which show the inconsistencies:

names of ideograps where the unicode name should be derived from the group, but getName returns the name of the block followed by the codepoint instead

Unexpected:

u+17007: getName returns ""TANGUT 17007"", expected TANGUT IDEOGRAPH-17007
u+2000A: getName returns ""CJK UNIFIED IDEOGRAPHS EXTENSION B 2000A"", the original example
u+18D04: getName returns ""TANGUT SUPPLEMENT 18D04"", expected TANGUT IDEOGRAPH-18D04

Expected:

u+FA21: getName returns ""CJK COMPATIBILITY IDEOGRAPH-FA21"" as expected
u+18B6E: getName returns ""KHITAN SMALL SCRIPT CHARACTER-18B6E"" as expected
u+1B19E: getName returns ""NUSHU CHARACTER-1B19E"" as expected
u+2F82C: getName returns  ""CJK COMPATIBILITY IDEOGRAPH-2F82C"" as expected

If getName chooses to use a different scheme from the Unicode standard way of deriving names, then it's unclear why it would do so for e.g. block ""Tangut supplement"", but not for block ""Nushu""
;;;","2021-09-08 06:04;naoto;Thanks for the reply. 
As to the inconsistent expected/unexpected name issue, they are simply because the Unicode conforming names (e.g. for NUSHU, such as `NUSHU CHARACTER-1B19E`) are explicitly included in the `UnicodeData.txt` file. Thus `getName()` retrieves them. Others (e.g., `TANGUT SUPPLEMENT 18D04`) are not in the source file, thus are composed based on the described formula.;;;","2021-09-13 09:07;roboduke;Changeset: 4cfa230e
Author:    Naoto Sato <naoto@openjdk.org>
Date:      2021-09-13 16:06:10 +0000
URL:       https://git.openjdk.java.net/jdk/commit/4cfa230e2daac118f21c7d8996d48a1a15d87a62
;;;","2021-09-23 06:39;tongwan;Requested the submitter review https://github.com/openjdk/jdk/commit/4cfa230e2daac118f21c7d8996d48a1a15d87a62;;;",,,,,,,,,,,,,,,,,
jshell doesn't compile a sealed hierarchy with a sealed interface and a non-sealed leaf,JDK-8273257,5057859,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,jlahoda,vromero,vromero,2021-09-01 18:09,2021-09-08 22:55,2023-10-01 09:57,2021-09-03 02:33,17,18,,,,,,18,tools,,0,javac-sealed,,,,,,,,,,,,,,,,,,,,,"jshell is not compiling this code:

sealed interface I permits C {}
non-sealed class C implements I {}",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8246353,,,,,,,,,,,,,,,,,,,,,,,,"0|i2u84r:",9223372036854775807,b14,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@ef6d34f,,,,,,,,,"2021-09-03 02:33;roboduke;Changeset: 7b023a3f
Author:    Jan Lahoda <jlahoda@openjdk.org>
Date:      2021-09-03 09:30:56 +0000
URL:       https://git.openjdk.java.net/jdk/commit/7b023a3f607f44da1b13bc9d2884a5f13723d524
;;;",,,,,,,,,,,,,,,,,,,,,,,,,
runtime/cds/appcds/TestEpsilonGCWithCDS.java fails due to Unrecognized VM option 'ObjectAlignmentInBytes=64' on x86_32,JDK-8273256,5057858,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,jiefu,jiefu,jiefu,2021-09-01 16:33,2021-09-08 22:53,2023-10-01 09:57,2021-09-01 21:11,18,,,,,,,18,hotspot,,0,tencent-interest,,,,,,,,,,,,,,,,,,,,,"STDERR:
 stdout: [];
 stderr: [Unrecognized VM option 'ObjectAlignmentInBytes=64'
Error: Could not create the Java Virtual Machine.
Error: A fatal exception has occurred. Program will exit.
]
 exitValue = 1

java.lang.RuntimeException: 'Dumping shared data to file:' missing from stdout/stderr

        at jdk.test.lib.process.OutputAnalyzer.shouldContain(OutputAnalyzer.java:221)
        at TestEpsilonGCWithCDS.test(TestEpsilonGCWithCDS.java:83)
        at TestEpsilonGCWithCDS.main(TestEpsilonGCWithCDS.java:57)
        at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
        at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
        at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
        at java.base/java.lang.reflect.Method.invoke(Method.java:568)
        at com.sun.javatest.regtest.agent.MainActionHelper$AgentVMRunnable.run(MainActionHelper.java:312)
        at java.base/java.lang.Thread.run(Thread.java:833)

JavaTest Message: Test threw exception: java.lang.RuntimeException
JavaTest Message: shutting down test",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8270489,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2u84j:",9223372036854775807,b14,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,,,"2021-09-01 21:11;roboduke;Changeset: a9a83b24
Author:    Jie Fu <jiefu@openjdk.org>
Date:      2021-09-02 04:10:46 +0000
URL:       https://git.openjdk.java.net/jdk/commit/a9a83b248e4a575e3d22541c122b27246a52dc7b
;;;",,,,,,,,,,,,,,,,,,,,,,,,,
Address javadoc issues in Deflater::setDictionationary,JDK-8273250,5057848,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,lancea,lancea,lancea,2021-09-01 11:27,2021-09-08 22:55,2023-10-01 09:57,2021-09-02 09:08,,,,,,,,18,core-libs,,0,noreg-trivial,,,,,,,,,,,,,,,,,,,,,"Intellij reports

Symbol 'getAdler' is inaccessible from here 

For
'@see Inflater#getAdler'

In Deflater.java as there are multiple getAdler methods",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2u82b:",9223372036854775807,b14,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@62714d2c,,,,,,,,,"2021-09-02 09:08;roboduke;Changeset: aaa6f696
Author:    Lance Andersen <lancea@openjdk.org>
Date:      2021-09-02 16:06:55 +0000
URL:       https://git.openjdk.java.net/jdk/commit/aaa6f696b06b335f81efccf0966612b086dd2e73
;;;",,,,,,,,,,,,,,,,,,,,,,,,,
Amend the test  java/nio/channels/DatagramChannel/ManySourcesAndTargets.java to execute in othervm mode ,JDK-8273246,5057842,Bug,Closed,JDK,JDK,software,duke,,,P4,Fixed,msheppar,msheppar,msheppar,2021-09-01 10:04,2022-04-25 10:57,2023-10-01 09:57,2021-09-07 15:20,,,,,,,,18,core-libs,,0,ursqe-triaged,,,,,,,,,,,,,,,,,,,,,"There are a number of intermittent failures for ManySourcesAndTargets.java where test output is being ""lost"". It has been found that othervm mode of execution allows for this test diagnostic output to be captured successfully.
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8273158,JDK-8264385,,,,,,,,,arm,,,,,,,,,os_x,,,,,"0|i2u80z:",9223372036854775807,b14,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@674604a9,,,,,,,Verified,,"2021-09-07 15:20;roboduke;Changeset: d6d6c069
Author:    Mark Sheppard <msheppar@openjdk.org>
Date:      2021-09-07 22:18:23 +0000
URL:       https://git.openjdk.java.net/jdk/commit/d6d6c0692bff77bd18127ed61455aac39370a089
;;;","2022-04-25 10:57;sqetools;verified;;;",,,,,,,,,,,,,,,,,,,,,,,,
Improve diagnostic output related to ErroneousTree,JDK-8273244,5057840,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,jjg,prappo,prappo,2021-09-01 09:40,2021-10-11 15:45,2023-10-01 09:57,2021-10-04 10:00,18,,,,,,,18,tools,,0,,,,,,,,,,,,,,,,,,,,,,"Consider the following example source:

```
package pkg1;

/**
 * {@link
 *     Object!equals
 *     equals
 * }
 */
public class A { }
```

The above source features the `@link` tag which is unusually but legitimately formatted to span multiple lines. The reference `Object!equals` is malformed since it contains `!`, which the user is likely mistyped for the correct `#`.

When presented with that source, javadoc (tool) reports the following error:

```
src/pkg1/A.java:4: error: unexpected text
 * {@link
   ^
```

As you can see, the diagnostic output positioned the caret quite far away from the actual error position. This could be improved. Here are some suggestions for the diagnostic output.


Good:

```
src/pkg1/A.java:5: error: unexpected text
 *     Object!
             ^
```

Very good:

```
src/pkg1/A.java:5: error: unexpected text
 *     Object!equals
             ^
```

Extremely chatty:

```
src/pkg1/A.java:4-7 error: unexpected text
04 * {@link
05 * Object!equals
           ^
06 * equals
07 * }
```

The latter suggestion might require quite a lot of surgery in javac reporting facilities.

---------
To implement this, we need to better translate DocCommentParser.ParseException to DCErroneousTree (think JCDiagnostic.DiagnosticPosition, DCEndPosTree) and then properly log errors related to those error trees.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8274744,JDK-8266666,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2u80j:",9223372036854775807,b18,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@7900061a,,,,,,,,,"2021-09-01 09:41;prappo;Came across this issue while working on JDK-8266666.;;;","2021-09-01 09:49;prappo;While looking into mechanics of this issue, I found an interesting thing: com.sun.source.util.DocTreeFactory#newErroneousTree(java.lang.String, javax.tools.Diagnostic) seems to be unused. DocCommentParser uses com.sun.tools.javac.tree.DocTreeMaker#newErroneousTree(java.lang.String, com.sun.tools.javac.util.DiagnosticSource, java.lang.String, java.lang.Object...) instead.;;;","2021-09-01 10:08;prappo;JBS seems to be garbling formatting in some of the description code blocks; sigh. In every suggestion  the caret should be positioned right below the exclamation mark (!).;;;","2021-09-02 08:31;jjg;General thoughts:

1. `ErroneousTree` is a subtype of `TextTree`, meaning it will inherit definitions of the `start` and `end` positions for the content. What's missing is the ability to set the `pos` value within the `[start,end)` range, suggesting that we should add a `pos` member for the node.

2. We could/should add the ability to specify a `pos` value when we throw `ParseException` in `DocCommentParser`.

3. Generally, if we throw `ParseException` from a tag parser for an inline tag, either the tag parser itself or the catch block should skip to the closing `}`. If the catch block does it, we *may* be able to avoid the need for a `pos` parameter to `ParseException` if it is acceptable to use the current position as the default value for `pos`.  (Maybe we can support both: an explicit value, and a default value.)

4. The `Reporter.print` method that takes a `DocTreePath` and a `start,pos,end` triple should be enhanced to accept `ErroneousTree`.  This is almost trivial (just accept `Kind.Erroneous`) since `ErroneousTree` is a subtype of `TextTree`.
While strongly related, this is technically separate, and will need a CSR, so can be handled by a separate issue.

5. In DCTree:86, a `SimpleDiagnosticPosition` is used, which should be upgraded to handle a full `start,pos,end` triple. ;;;","2021-09-08 13:45;jjg;More general thoughts:

Generally, the position system for DocTree/DCTree nodes is modeled on the position system for Tree/JCTree nodes, which continues to provide useful precedents for issues to be resolved.  With that in mind ...

1. JCTree (and hence all subtypes) implement DiagnosticPosition, with its 3 methods to get the start/preferred/end position for a node.   DCTree does not (and should not) directly implement DiagnosticPosition, because DP positions are ""file""-based whereas DCTree positions are ""comment""-based, and need to be translated to ""file""-based positions, which is relatively expensive, since the mapping is discontinuous.   However, DCTree could (and maybe should) declare 3 methods to get the start/preferred/end positions for the node, using ""comment""-based values. 

2. Using the 3 methods on DCTree for start/preferred/end positions would allow us to fix the particularly egregious line of code in DCTree:86, to always use a SimpleDiagnosticPosition for the ""file""-based positions.
    public JCDiagnostic.DiagnosticPosition pos(DCDocComment dc) {
        return new SimpleDiagnosticPosition(dc.comment.getSourcePos(pos));
    }

3. Currently, DCTree only models the start and end positions.  This most obviously shows up in DocSourcePositions, implemented in JavacTrees :244
    DocSourcePositions getSourcePositions() {
The start position is always assumed to be pos; the end position is modeled by a combination of using a supertype of EndPosTree (for leaf nodes) and the recursive ""end of the last non-null child"" for nodes that contain (and end with) child nodes. (This is most notably, all subtypes of BlockTagTree)  Using pos as the start position is almost always the right thing, and always the case for inline tag trees and block tag trees, which being with `{` and `@` respectively. That leaves various minor leaf nodes (doctype, entity, text, comment, etc) and AttributeTree and ErroneousTree.

4. AttributeTree should be modified so that the start position is the start of the rightmost child ... i.e. the attribute name, and the preferred position should be `pos`, which should be the `=` character.  (Update: no ... the attribute name is a `Name` and not a child node.)

5. ErroneousTree (the doctree version) is unusual for being a leaf node (it's a subtype of TextTree) and for it to be reasonable for the start and preferred positions to be different values.
In javac, the javac variant of ErroneousTree (JCErroneous) contains a `List<JCTree>` and so the recursive definition of getStartPosition (using the start of the leftmost child) comes into play, using pos for the standard use of the preferred position. We can't change the definition of DocTree ErroneousTree, so the solution is probably to explicitly model the start position as well as the preferred position.;;;","2021-09-08 14:27;jjg;On ParseException and erroneous

There are 10 calls of `erroneous` in `DocCommentParser`, which is the utility method to create an ErroneousTree, using DocTreeMaker.newErroneousTree.  These potentially all need to be updated to provide both `start` and `preferred` positions.
Currently, a single value is passed in, and used for `DCTree.pos`, which is treated as both `start` and `preferred` positions.

There are two instances of `catch ParseException`, both of which call `erroneous`. The instances are when reading inline tags and block tags. For block tags, any remaining block content is skipped, and so should be included in the ErroneousTree.  For inline tags there is no default error recovery; any recovery would have to be handled inside the relevant TagParser, subject to the syntactic rules of the tag.  If no recovery is done, the remaining content of the inline tag will appear as plain-text content in the enclosing node.

If we are to pass an extra parameter down into `erroneous`, it would make sense to pass a position into the `ParseException` at the point at which the exception is thrown. This recursively extends to `ReferenceParser.ParseException`.;;;","2021-09-08 16:14;jjg;Complication:

There are two methodologies for getting positions from a DocTree node.

1. DocSourcePositions, primarily implemented in JavacTrees starting at line 244, which does the double task of computing positions (e.g. end positions) *and* converting them to ""file""-based values.  This is the public access, and only provides ""start"" and ""end"" positions.

2. DCTree.pos which simply creates a SimpleDiagnosticPosition, because it does not have easy access to DocSourcePositions, to get a better end value.  (Maybe this explains the use of SimpleDiagnosticPosition). This is used for diagnostics, and includes all 3 start/preferred/end positions.

Note that javac uses static methods in TreeInfo to compute start and end positions; these methods are used by both JCTree.pos and SourcePositions.  

One solution would be to explore (as suggested earlier) methods on DCTree that return start/preferred/end positions in ""comment""-based positions, and only convert these values to ""file""-based positions in DCTree.pos() and DocSourcePositions ... i.e. when the enclosing DCDocComment is available.   Indeed, we may want to move DCTree.pos() to DCDocComment and have it return a DiagnosticPosition that lazily evaluates the ""file""-based positions.

An initial implementation of moving code from DocTreePositions to DocTree would be to simply move the getEndPosition code (switch and all) to DocTree. That would then open up the subsequent possibility of replacing the switch with overriding methods in  subtypes of DocTree.;;;","2021-09-08 16:43;jjg;Note:

This code to handle DCReturn in DocTreePositions.getEndPosition may be unnecessary because DCReturn now extends EndPosTree, although the value may not be being set for the block-tag variant.

                            if (tree.getKind() == DocTree.Kind.RETURN) {
                                DCTree.DCReturn dcReturn = (DCTree.DCReturn) tree;
                                pos = dcReturn.pos;
                                name = dcReturn.getTagName();
                            } else {

and even without that, it should be possible to merge the then and else clauses, perhaps by using the common supertype of BlockTagTree;;;","2021-09-10 09:54;jjg;Observation: there are maybe _four_ conceptual positions of note for a tree node:

1. the position of the first character that is specific to this node (and not part of any child node)... this is typically the ""pos"" value set by the (Doc)TreeMaker

2. the first position of the tree node .... which in some cases may be the recursive first position of the left-most child node

3. the ""preferred"" position of the tree node ... this is generally the position of the caret in diagnostic messages

4. the last position of the tree node  ... which oil some cases may be the recursive last position of the right-most child node


The positions need not be different: often #1, #2, and #3 will be the same.;;;","2021-10-04 10:00;roboduke;Changeset: 0ca094bc
Author:    Jonathan Gibbons <jjg@openjdk.org>
Date:      2021-10-04 16:59:30 +0000
URL:       https://git.openjdk.java.net/jdk/commit/0ca094bc5f568842b1619229206ec4a385e5ebf6
;;;",,,,,,,,,,,,,,,,
Fix indentations in java.net.InetAddress methods,JDK-8273243,5057839,Bug,Resolved,JDK,JDK,software,duke,,,P5,Fixed,aefimov,aefimov,aefimov,2021-09-01 09:31,2021-09-08 22:54,2023-10-01 09:57,2021-09-02 03:36,,,,,,,,18,core-libs,,0,noreg-cleanup,,,,,,,,,,,,,,,,,,,,,"Indentations in the following InetAddress methods can be corrected to improve their readability:
getAddressesFromNameService
getHostFromNameService",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,generic,,,,,,,,,generic,,,,,"0|i2u80b:",9223372036854775807,b14,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@446e124a,,,,,,,,,"2021-09-02 03:36;roboduke;Changeset: 0c1b16b7
Author:    Aleksei Efimov <aefimov@openjdk.org>
Date:      2021-09-02 10:36:08 +0000
URL:       https://git.openjdk.java.net/jdk/commit/0c1b16b75a2361431cbf9f4112dcd6049e981a78
;;;",,,,,,,,,,,,,,,,,,,,,,,,,
(test) Refactor to use TestNG for RuntimeTests ExecCommand tests,JDK-8273242,5057838,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,rriggs,rriggs,rriggs,2021-09-01 09:28,2021-09-15 20:04,2023-10-01 09:57,2021-09-08 13:54,,,,,,,,18,core-libs,,0,,,,,,,,,,,,,,,,,,,,,,"The ExecCommand test of Runtime.exec is difficult to maintain.
This cleanup convert to use TestNG DataProviders.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2u803:",9223372036854775807,b15,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4c088d55,,,,,,,,,"2021-09-08 13:54;roboduke;Changeset: 7fd6b0bf
Author:    Roger Riggs <rriggs@openjdk.org>
Date:      2021-09-08 20:53:25 +0000
URL:       https://git.openjdk.java.net/jdk/commit/7fd6b0bfd8ab3c64b374c71010bdfa369f0c67e8
;;;",,,,,,,,,,,,,,,,,,,,,,,,,
keytool does not accurately warn about algorithms that are disabled but have additional constraints,JDK-8273236,5057825,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,hchao,mullan,mullan,2021-09-01 05:27,2022-11-07 04:43,2023-10-01 09:57,2022-01-26 12:33,,,,,,,,19,security-libs,,0,jdk11u-fix-request,jdk11u-fix-yes,jdk17u-fix-request,jdk17u-fix-yes,,,,,,,,,,,,,,,,,,keytool uses a simpler scheme to warn about algorithms that are disabled which does not take into account constraints such as `Usage` or `DenyAfter`.,,,,,,,,,,,JDK-8295473,JDK-8291668,JDK-8291666,JDK-8296466,JDK-8291667,,,,,,,,JDK-8275887,,,,,,,,,,,,JDK-8265086,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2u7x7:",9223372036854775807,b08,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@2ec284e3,,,,,,,,,"2022-01-11 18:20;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/7039
Date: 2022-01-12 02:15:45 +0000;;;","2022-01-26 12:33;roboduke;Changeset: c2ee1b33
Author:    Hai-May Chao <hchao@openjdk.org>
Date:      2022-01-26 20:31:04 +0000
URL:       https://git.openjdk.java.net/jdk/commit/c2ee1b33c37e6f2848dc8b3e5417b93b1dac1112
;;;","2022-10-13 10:23;goetz;Fix request [17u]

I backport this for parity with 17.0.6-oracle.
A change to security files, not trivial. I think we need to go along here, though.
Clean backport, but to compile I had to do trivial changes.
Test passes. SAP nightly testing passes.;;;","2022-10-13 12:34;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/789
Date: 2022-10-13 17:19:45 +0000;;;","2022-11-03 10:45;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk11u-dev/pull/1497
Date: 2022-11-03 17:34:06 +0000;;;","2022-11-06 10:44;goetz;Fix request [11u]

I backport this for parity with 11.0.18-oracle.
A change to security files, not trivial. I think we need to go along here, though. 
Not clean, I had to resolve.
Test passes.  SAP nighlty testing passed.;;;",,,,,,,,,,,,,,,,,,,,
tools/launcher/HelpFlagsTest.java Fails on Windows 32bit,JDK-8273235,5057824,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,cstein,afarley,afarley,2021-09-01 05:22,2021-12-13 00:37,2023-10-01 09:57,2021-11-08 00:11,11,16,17,,,,,18,tools,,0,jdk11u-fix-request,jdk11u-fix-yes,jdk17u-fix-request,jdk17u-fix-SQE-ok,jdk17u-fix-yes,redhat-interest,testbug,,,,,,,,,,,,,,,"HelpFlagsTest.java appears to fail on Windows 32bit (and not Windows 64bit), with the following error:

23:47:39  STDERR:
23:47:39  java.lang.AssertionError: HelpFlagsTest failed:
23:47:39  Tool jaccessinspector-32.exe not covered by this test. Add specification to jdkTools array!
23:47:39  Tool jaccesswalker-32.exe not covered by this test. Add specification to jdkTools array!
23:47:39  
23:47:39  	at HelpFlagsTest.main(HelpFlagsTest.java:378)
23:47:39  	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
23:47:39  	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
23:47:39  	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
23:47:39  	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
23:47:39  	at com.sun.javatest.regtest.agent.MainActionHelper$AgentVMRunnable.run(MainActionHelper.java:298)
23:47:39  	at java.base/java.lang.Thread.run(Thread.java:829)
23:47:39  
23:47:39  JavaTest Message: Test threw exception: java.lang.AssertionError
23:47:39  JavaTest Message: shutting down test

Since this appears to be a straightforward test setup/config issue with low priority, I'm raising this bug to register the issue's existence until such time as I (or anyone else with free time) get around to creating a fix. 

Note: Looks to be as simple as adding jaccessinspector-32 and jaccesswalker-32 to TOOLS_NOT_TO_TEST at the top of HelpFlagsTest.java, as the non-32bit versions are already there.

Issue seen on JDK11 and JDK16, and the test doesn't appear to exist on JDK8.",,,,,,,,,,,JDK-8277629,JDK-8277951,JDK-8277644,JDK-8277706,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,x86,,,,,,,,,windows,,,,,"0|i2u7wz:",9223372036854775807,b23,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@5d8045fc,,,,,,,,,"2021-11-04 06:15;cstein;Adam, your suggested fix looks good to me - I filed https://github.com/openjdk/jdk/pull/6256 to address it.;;;","2021-11-04 06:37;afarley;Thanks Christian. :);;;","2021-11-08 00:11;roboduke;Changeset: fc0fe256
Author:    Christian Stein <cstein@openjdk.org>
Committer: Aleksey Shipilev <shade@openjdk.org>
Date:      2021-11-08 08:09:51 +0000
URL:       https://git.openjdk.java.net/jdk/commit/fc0fe256793b33430c1247e0c091150a091da3c4
;;;","2021-11-16 12:59;afarley;Fix Request
Error is identical when tested locally on 11 and 17.
Request to backport this change to jdk11u-dev and jdk17u, please.
Patch applies cleanly. 
I want to backport this so the test can run against the executables it should be run against, without this bug causing the results to potentially be dismissed out of hand (""Oh that test ALWAYS fails!"").
I determine the risk to be minimal, as we're only specifying what executables *not* to test.;;;","2021-11-16 13:42;afarley;PRs have been created so the automated tests and such can run.

JDK11u-dev - https://github.com/openjdk/jdk11u-dev/pull/633
JDK17u - https://github.com/openjdk/jdk17u/pull/274

Will ""/integrate"" once we have a ""yes"" tag for each fork.;;;",,,,,,,,,,,,,,,,,,,,,
extended 'for' with expression of type tvar causes the compiler to crash,JDK-8273234,5057583,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,vromero,webbuggrp,webbuggrp,2021-08-27 06:56,2021-12-01 22:20,2023-10-01 09:57,2021-09-03 06:11,17,18,,,,,,18,tools,,0,17ea,azul-interest,dcsad,jdk17u-fix-request,jdk17u-fix-yes,regression,reproducer-yes,webbug,,,,,,,,,,,,,,"ADDITIONAL SYSTEM INFORMATION :
x86-64 / Ubuntu 21.04 / JDK 17 RC

A DESCRIPTION OF THE PROBLEM :
When building the Ghidra project (https://github.com/NationalSecurityAgency/ghidra) with JDK 17, I am getting a compiler exception in the :SoftwareModeling:compileJava gradle task.  Unfortunately the stack trace does not provide me with enough information to track down the issue to a specific task. 

REGRESSION : Last worked in version 16.0.2

STEPS TO FOLLOW TO REPRODUCE THE PROBLEM :
Follow the build instructions at https://github.com/NationalSecurityAgency/ghidra/blob/master/README.md#build using the latest JDK 17 and Gradle 7 instead of the suggested versions.  

EXPECTED VERSUS ACTUAL BEHAVIOR :
EXPECTED -
The gradle buildGhidra task should succeeded without error as it did for JDK 16.
ACTUAL -
> Task :SoftwareModeling:compileJava
Note: Some input files use or override a deprecated API.
Note: Recompile with -Xlint:deprecation for details.
Note: Some input files use or override a deprecated API that is marked for removal.
Note: Recompile with -Xlint:removal for details.
An exception has occurred in the compiler (17). Please file a bug against the Java compiler via the Java bug reporting page (http://bugreport.java.com) after checking the Bug Database (http://bugs.java.com) for duplicates. Include your program, the following diagnostic, and the parameters passed to the Java compiler in your report. Thank you.
java.lang.AssertionError: isSubClass P
        at jdk.compiler/com.sun.tools.javac.code.Symbol.isSubClass(Symbol.java:546)
        at jdk.compiler/com.sun.tools.javac.code.Symbol.isMemberOf(Symbol.java:555)
        at jdk.compiler/com.sun.tools.javac.code.Symbol$MethodSymbol.overrides(Symbol.java:2092)
        at jdk.compiler/com.sun.tools.javac.code.Symbol$MethodSymbol.overrides(Symbol.java:2052)
        at jdk.compiler/com.sun.tools.javac.code.Types$ImplementationCache.implementationInternal(Types.java:2984)
        at jdk.compiler/com.sun.tools.javac.code.Types$ImplementationCache.get(Types.java:2969)
        at jdk.compiler/com.sun.tools.javac.code.Types.implementation(Types.java:3004)
        at jdk.compiler/com.sun.tools.javac.code.Symbol$MethodSymbol.implementation(Symbol.java:2159)
        at jdk.compiler/com.sun.tools.javac.code.Symbol$MethodSymbol.implementation(Symbol.java:2152)
        at jdk.compiler/com.sun.tools.javac.comp.Resolve.notOverriddenIn(Resolve.java:471)
        at jdk.compiler/com.sun.tools.javac.comp.Resolve.selectBest(Resolve.java:1572)
        at jdk.compiler/com.sun.tools.javac.comp.Resolve.findMethodInScope(Resolve.java:1788)
        at jdk.compiler/com.sun.tools.javac.comp.Resolve.findMethod(Resolve.java:1879)
        at jdk.compiler/com.sun.tools.javac.comp.Resolve.findMethod(Resolve.java:1832)
        at jdk.compiler/com.sun.tools.javac.comp.Resolve$11.doLookup(Resolve.java:2737)
        at jdk.compiler/com.sun.tools.javac.comp.Resolve$BasicLookupHelper.lookup(Resolve.java:3454)
        at jdk.compiler/com.sun.tools.javac.comp.Resolve.lookupMethod(Resolve.java:3704)
        at jdk.compiler/com.sun.tools.javac.comp.Resolve.resolveQualifiedMethod(Resolve.java:2734)
        at jdk.compiler/com.sun.tools.javac.comp.Resolve.resolveInternalMethod(Resolve.java:2828)
        at jdk.compiler/com.sun.tools.javac.comp.Attr.visitForeachLoop(Attr.java:1545)
        at jdk.compiler/com.sun.tools.javac.tree.JCTree$JCEnhancedForLoop.accept(JCTree.java:1231)
        at jdk.compiler/com.sun.tools.javac.comp.Attr.attribTree(Attr.java:674)
        at jdk.compiler/com.sun.tools.javac.comp.Attr.attribStat(Attr.java:748)
        at jdk.compiler/com.sun.tools.javac.comp.Attr.attribStats(Attr.java:767)
        at jdk.compiler/com.sun.tools.javac.comp.Attr.visitBlock(Attr.java:1445)
        at jdk.compiler/com.sun.tools.javac.tree.JCTree$JCBlock.accept(JCTree.java:1091)
        at jdk.compiler/com.sun.tools.javac.comp.Attr.attribTree(Attr.java:674)
        at jdk.compiler/com.sun.tools.javac.comp.Attr.attribStat(Attr.java:748)
        at jdk.compiler/com.sun.tools.javac.comp.Attr.visitMethodDef(Attr.java:1235)
        at jdk.compiler/com.sun.tools.javac.tree.JCTree$JCMethodDecl.accept(JCTree.java:921)
        at jdk.compiler/com.sun.tools.javac.comp.Attr.attribTree(Attr.java:674)
        at jdk.compiler/com.sun.tools.javac.comp.Attr.attribStat(Attr.java:748)
        at jdk.compiler/com.sun.tools.javac.comp.Attr.attribClassBody(Attr.java:5474)
        at jdk.compiler/com.sun.tools.javac.comp.Attr.attribClass(Attr.java:5365)
        at jdk.compiler/com.sun.tools.javac.comp.Attr.attribClass(Attr.java:5217)
        at jdk.compiler/com.sun.tools.javac.comp.Attr.attribClass(Attr.java:5196)
        at jdk.compiler/com.sun.tools.javac.comp.Attr.attrib(Attr.java:5141)
        at jdk.compiler/com.sun.tools.javac.main.JavaCompiler.attribute(JavaCompiler.java:1317)
        at jdk.compiler/com.sun.tools.javac.main.JavaCompiler.compile(JavaCompiler.java:946)
        at jdk.compiler/com.sun.tools.javac.api.JavacTaskImpl.lambda$doCall$0(JavacTaskImpl.java:104)
        at jdk.compiler/com.sun.tools.javac.api.JavacTaskImpl.invocationHelper(JavacTaskImpl.java:152)
        at jdk.compiler/com.sun.tools.javac.api.JavacTaskImpl.doCall(JavacTaskImpl.java:100)
        at jdk.compiler/com.sun.tools.javac.api.JavacTaskImpl.call(JavacTaskImpl.java:94)
        at org.gradle.internal.compiler.java.IncrementalCompileTask.call(IncrementalCompileTask.java:89)
        at org.gradle.api.internal.tasks.compile.AnnotationProcessingCompileTask.call(AnnotationProcessingCompileTask.java:94)
        at org.gradle.api.internal.tasks.compile.ResourceCleaningCompilationTask.call(ResourceCleaningCompilationTask.java:57)
        at org.gradle.api.internal.tasks.compile.JdkJavaCompiler.execute(JdkJavaCompiler.java:54)
        at org.gradle.api.internal.tasks.compile.JdkJavaCompiler.execute(JdkJavaCompiler.java:39)
        at org.gradle.api.internal.tasks.compile.daemon.AbstractDaemonCompiler$CompilerWorkAction.execute(AbstractDaemonCompiler.java:135)
        at org.gradle.workers.internal.DefaultWorkerServer.execute(DefaultWorkerServer.java:63)
        at org.gradle.workers.internal.AbstractClassLoaderWorker$1.create(AbstractClassLoaderWorker.java:49)
        at org.gradle.workers.internal.AbstractClassLoaderWorker$1.create(AbstractClassLoaderWorker.java:43)
        at org.gradle.internal.classloader.ClassLoaderUtils.executeInClassloader(ClassLoaderUtils.java:97)
        at org.gradle.workers.internal.AbstractClassLoaderWorker.executeInClassLoader(AbstractClassLoaderWorker.java:43)
        at org.gradle.workers.internal.FlatClassLoaderWorker.run(FlatClassLoaderWorker.java:32)
        at org.gradle.workers.internal.FlatClassLoaderWorker.run(FlatClassLoaderWorker.java:22)
        at org.gradle.workers.internal.WorkerDaemonServer.run(WorkerDaemonServer.java:85)
        at org.gradle.workers.internal.WorkerDaemonServer.run(WorkerDaemonServer.java:55)
        at org.gradle.process.internal.worker.request.WorkerAction$1.call(WorkerAction.java:138)
        at org.gradle.process.internal.worker.child.WorkerLogEventListener.withWorkerLoggingProtocol(WorkerLogEventListener.java:41)
        at org.gradle.process.internal.worker.request.WorkerAction.run(WorkerAction.java:135)
        at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
        at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
        at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
        at java.base/java.lang.reflect.Method.invoke(Method.java:568)
        at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:36)
        at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:24)
        at org.gradle.internal.remote.internal.hub.MessageHubBackedObjectConnection$DispatchWrapper.dispatch(MessageHubBackedObjectConnection.java:182)
        at org.gradle.internal.remote.internal.hub.MessageHubBackedObjectConnection$DispatchWrapper.dispatch(MessageHubBackedObjectConnection.java:164)
        at org.gradle.internal.remote.internal.hub.MessageHub$Handler.run(MessageHub.java:414)
        at org.gradle.internal.concurrent.ExecutorPolicy$CatchAndRecordFailures.onExecute(ExecutorPolicy.java:64)
        at org.gradle.internal.concurrent.ManagedExecutorImpl$1.run(ManagedExecutorImpl.java:48)
        at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
        at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
        at org.gradle.internal.concurrent.ThreadFactoryImpl$ManagedThreadRunnable.run(ThreadFactoryImpl.java:61)
        at java.base/java.lang.Thread.run(Thread.java:833)

> Task :SoftwareModeling:compileJava FAILED

FAILURE: Build failed with an exception.


CUSTOMER SUBMITTED WORKAROUND :
Continue to use JDK 11-16.

FREQUENCY : always


",,,,,,,,,,,JDK-8275401,,,,,,,,,,,,,,,,,,,JDK-8278113,,JDK-8276082,,,,,,,,,,,,,,,,,,generic,,,,,,,17,,generic,,,,,"0|i2u6ff:",9223372036854775807,b14,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4dca67bd,,,,,,,,,"2021-09-01 04:34;adev;I am able to reproduce the issue. But I am not able to get the actual class that is failing.
Requested the submitter to provide enough information so that I can look into the class which is causing the crash.;;;","2021-09-01 04:46;adev;The file is attached for reproducing the crash. Use ""gradle build"" for the same.
Following is my observation:
JDK 8 - 16: Pass
JDK 17: Fail
JDK 18: Fail
Fails with:
 Fail java.lang.AssertionError: isSubClass P
        at jdk.compiler/com.sun.tools.javac.code.Symbol.isSubClass(Symbol.java:546)

;;;","2021-09-01 19:06;vromero;probably not the bare minimum but a very reduced test case that reproduces the issue:

import java.util.*;

abstract class A {}

abstract class ACD<E> implements Iterable<E> {
    public Iterator<E> iterator() { return null; }
}

abstract class ALD<E> extends ACD<E> implements List<E> {}

abstract class ASP<NT extends A> extends ALD<A> {
    <P extends ASP<NT>> void foo(P prod) {
        for (A sym : prod) {}
    }
};;;","2021-09-03 06:11;roboduke;Changeset: 8c379092
Author:    Vicente Romero <vromero@openjdk.org>
Date:      2021-09-03 13:11:27 +0000
URL:       https://git.openjdk.java.net/jdk/commit/8c379092747301de70db1ef8e441cbe09fd742e7
;;;","2021-09-28 09:12;adev;Additional reply from the submitter
===========================
Do you plan on backporting the fix to the 17 LTS release?;;;","2021-10-11 04:25;evergizova;Fix Request (17u)
I'd like to backport this fix to 17u. It fixes regression in javac introduced in jdk17.
The patch applies cleanly.
Tested with langtools tests, new test fails without the patch, passes with it.;;;",,,,,,,,,,,,,,,,,,,,
Update OS detection code to recognize Windows Server 2022,JDK-8273229,5057818,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,mbaesken,mbaesken,mbaesken,2021-09-01 03:42,2022-12-15 16:23,2023-10-01 09:57,2021-09-02 04:24,11.0.13-oracle,17.0.1,18,7u321,8u311,,,18,hotspot,,0,8bpr-critical-approved,azul-interest,CPU21_10-defer-approved,CPU21_10-defer-SQE-OK,jdk11u-fix-request,jdk11u-fix-yes,jdk13u-fix-request,jdk13u-fix-yes,jdk15u-fix-request,jdk15u-fix-yes,jdk17u-fix-request,jdk17u-fix-SQE-ok-next,jdk17u-fix-yes,jdk8u-fix-request,jdk8u-fix-yes,release-note=yes,windows2022,,,,,"The OS detection code of the JDK/JVM should recognize the new Windows server 2022 :

https://docs.microsoft.com/en-us/lifecycle/products/windows-server-2022

https://docs.microsoft.com/en-us/windows-server/get-started/windows-server-release-info

The build number according to the documentation is 20348 .",,,,,,,,,,,JDK-8274897,JDK-8275221,JDK-8275489,JDK-8274954,JDK-8279279,JDK-8274681,JDK-8275282,JDK-8276897,JDK-8275488,JDK-8280969,JDK-8298895,JDK-8281573,,JDK-8275068,,,,,,,,,,,,,,,,JDK-8276697,,,,,,,,,,generic,,,,,,,,,windows,,,,,"0|i2u7vn:",9223372036854775807,b14,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,,,"2021-09-02 04:24;roboduke;Changeset: c2e015c3
Author:    Matthias Baesken <mbaesken@openjdk.org>
Date:      2021-09-02 11:22:49 +0000
URL:       https://git.openjdk.java.net/jdk/commit/c2e015c3c1a2274112bb8e6671a85bc7fb624fde
;;;","2021-10-06 03:10;mdoerr;Fix Request (11u):
Should get backported for parity with 11.0.14-oracle. Applies cleanly.;;;","2021-10-06 22:45;clanger;Fix Request (17u):
This OS detection update is needed in JDK17u as well. Applies cleanly.;;;","2021-10-18 10:43;omikhaltcova;Fix request (13u) 

I'd like to backport this fix to jdk13u for parity with jdk11u.
The original patch applied cleanly.;;;","2021-10-18 11:10;omikhaltcova;Fix request (15u) 

I'd like to backport this fix to jdk15u for parity with jdk11u. 
The original patch applied cleanly.;;;","2022-01-19 17:39;roboduke;Changeset: b70e4998
Author:    Joakim Nordström <jnordstrom@openjdk.org>
Committer: Kevin Walls <kevinw@openjdk.org>
Date:      2021-10-08 08:22:06 +0000
URL:       https://git.openjdk.java.net/jdk17u/commit/b70e4998a394ff511675fb2a54403abf72be41ef
;;;","2022-01-20 05:46;roboduke;Changeset: b70e4998
Author:    Joakim Nordström <jnordstrom@openjdk.org>
Committer: Kevin Walls <kevinw@openjdk.org>
Date:      2021-10-08 08:22:06 +0000
URL:       https://git.openjdk.java.net/jdk17u-dev/commit/b70e4998a394ff511675fb2a54403abf72be41ef
;;;","2022-01-25 12:12;zgu;Fix Request (8u)

Clean backport for parity with Oracle 8u331.;;;",,,,,,,,,,,,,,,,,,
Make ParHeapInspectTask _safepoint_check_never,JDK-8273217,5057796,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,coleenp,coleenp,coleenp,2021-08-31 18:22,2021-09-08 22:53,2023-10-01 09:57,2021-09-01 09:48,18,,,,,,,18,hotspot,,0,,,,,,,,,,,,,,,,,,,,,,Since this lock is taken out by the VMThread in a VMOperation it doesn't make sense to make it safepoint check.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2u7qr:",9223372036854775807,b14,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,,,"2021-09-01 09:48;roboduke;Changeset: dacd1978
Author:    Coleen Phillimore <coleenp@openjdk.org>
Date:      2021-09-01 16:48:06 +0000
URL:       https://git.openjdk.java.net/jdk/commit/dacd1978972b46510049086c8431bb12e5f3722f
;;;",,,,,,,,,,,,,,,,,,,,,,,,,
JCMD does not work across container boundaries with Podman,JDK-8273216,5057795,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,sgehwolf,mseledtsov,mseledtsov,2021-08-31 17:49,2021-10-06 18:03,2023-10-01 09:57,2021-09-30 08:27,11.0.12,17,18,,,,,18,hotspot,,0,redhat-interest,,,,,,,,,,,,,,,,,,,,,"The test test/hotspot/jtreg/containers/docker/TestJcmd.java that tests how jcmd works across container boundary (invoke from host system to send commands to JVM running inside a container) works well with Docker, but does not work with Podman.

Please note that this test is under development, see: ""8195809: [TESTBUG] jps and jcmd -l support for containers is not tested"" for details.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8195809,,,,,,,,,,,,,,,,,,,linux,,,,,"0|i2u7qj:",9223372036854775807,b18,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@2846162a,,,,,,,,,"2021-08-31 17:53;mseledtsov;Failure exception message:

jcmd $PID help
<PID>:
java.io.IOException: Permission denied
    at java.base/java.io.UnixFileSystem.createFileExclusively(Native Method)
    at java.base/java.io.File.createNewFile(File.java:1043)
    at jdk.attach/sun.tools.attach.VirtualMachineImpl.createAttachFile(VirtualMachineImpl.java:307)
    at jdk.attach/sun.tools.attach.VirtualMachineImpl.<init>(VirtualMachineImpl.java:80)
    at jdk.attach/sun.tools.attach.AttachProviderImpl.attachVirtualMachine(AttachProviderImpl.java:58)
    at jdk.attach/com.sun.tools.attach.VirtualMachine.attach(VirtualMachine.java:207)
    at jdk.jcmd/sun.tools.jcmd.JCmd.executeCommandForPid(JCmd.java:113)
    at jdk.jcmd/sun.tools.jcmd.JCmd.main(JCmd.java:97)
;;;","2021-09-07 10:46;lcable;should check to see if this bug is manifest against 'runc'/'containerd' which is the actual component responsible for starting the container, delegated to from podman (& docker I believe)

Also should check against 'rootless' containers to ensure this works (or determine that when rootless it may well work)

should also consider improving the the exception msg to include the file that failed to be created exclusively!;;;","2021-09-28 05:00;sgehwolf;For podman the best approach is to use --userns=keep-id switch when running as root-less. The permission denied error is likely caused by the missing 'z' option to the --volume option.;;;","2021-09-28 08:51;sgehwolf;$ ps ax | grep EventGeneratorLoop
   4740 pts/0    Sl     0:00 /jdk/bin/java -cp /test-classes/ EventGeneratorLoop 400
$ jcmd 4740 help
4740:
Attach file: /proc/4740/root/tmp/.attach_pid17
java.io.IOException: Permission denied
	at java.base/java.io.UnixFileSystem.createFileExclusively(Native Method)
	at java.base/java.io.File.createNewFile(File.java:1043)
	at jdk.attach/sun.tools.attach.VirtualMachineImpl.createAttachFile(VirtualMachineImpl.java:309)
	at jdk.attach/sun.tools.attach.VirtualMachineImpl.<init>(VirtualMachineImpl.java:81)
	at jdk.attach/sun.tools.attach.AttachProviderImpl.attachVirtualMachine(AttachProviderImpl.java:58)
	at jdk.attach/com.sun.tools.attach.VirtualMachine.attach(VirtualMachine.java:207)
	at jdk.jcmd/sun.tools.jcmd.JCmd.executeCommandForPid(JCmd.java:113)
	at jdk.jcmd/sun.tools.jcmd.JCmd.main(JCmd.java:97)

This seems to be happening with podman version 3.2.3 and below, but doesn't seem to be happening with podman 3.3.1 and better. The file that fails is /proc/<host-pid>/root/tmp/.attach_pid<container-pid> from this code segment:

    // On Linux a simple handshake is used to start the attach mechanism
    // if not already started. The client creates a .attach_pid<pid> file in the
    // target VM's working directory (or temp directory), and the SIGQUIT handler
    // checks for the file.
    private File createAttachFile(int pid, int ns_pid) throws IOException {
        String fn = "".attach_pid"" + ns_pid;
        String path = ""/proc/"" + pid + ""/cwd/"" + fn;
        File f = new File(path);
        try {
            // Do not canonicalize the file path, or we will fail to attach to a VM in a container.
            f.createNewFile();
        } catch (IOException x) {
            String root;
            if (pid != ns_pid) {
                // A process may not exist in the same mount namespace as the caller.
                // Instead, attach relative to the target root filesystem as exposed by
                // procfs regardless of namespaces.
                root = ""/proc/"" + pid + ""/root/"" + tmpdir;
            } else {
                root = tmpdir;
            }
            f = new File(root, fn); // <--- Here
            f.createNewFile();
        }
        return f;
    }

It works fine for me with podman 3.3.1. So it seems a podman bug which causes this.;;;","2021-09-30 08:27;roboduke;Changeset: 9180d9a2
Author:    Severin Gehwolf <sgehwolf@openjdk.org>
Date:      2021-09-30 15:23:44 +0000
URL:       https://git.openjdk.java.net/jdk/commit/9180d9a2f990e71ca6ac9c14e55a21f7372929ac
;;;",,,,,,,,,,,,,,,,,,,,,
jdk/jfr/event/gc/collection/TestG1ParallelPhases.java fails after JDK-8159979,JDK-8273206,5057783,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,jiefu,jiefu,jiefu,2021-08-31 16:00,2021-09-08 22:53,2023-10-01 09:57,2021-09-01 00:56,18,,,,,,,18,hotspot,,0,gc-g1,tencent-interest,tier5,tier6,,,,,,,,,,,,,,,,,,"JDK-8273206 added new JFR events for phases that the test does not expect and crashes with:

STDERR:
java.lang.RuntimeException: Compare events expected and received, Not found phases: , Not expected phases: CLDClearClaimedMarks, NoteStartOfMark, ResetMarkingState: expected true, was false
        at jdk.test.lib.Asserts.fail(Asserts.java:594)
        at jdk.test.lib.Asserts.assertTrue(Asserts.java:486)
        at jdk.jfr.event.gc.collection.TestG1ParallelPhases.main(TestG1ParallelPhases.java:136)
        at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
        at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
        at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
        at java.base/java.lang.reflect.Method.invoke(Method.java:568)
        at com.sun.javatest.regtest.agent.MainWrapper$MainThread.run(MainWrapper.java:127)
        at java.base/java.lang.Thread.run(Thread.java:833)

JavaTest Message: Test threw exception: java.lang.RuntimeException: Compare events expected and received, Not found phases: , Not expected phases: CLDClearClaimedMarks, NoteStartOfMark, ResetMarkingState: expected true, was false
JavaTest Message: shutting down test",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8159979,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2u7nv:",9223372036854775807,b13,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@42995637,,,,,,,,,"2021-08-31 20:09;dcubed;Here's a log file snippet for the jdk-18+13-664-tier5 sighting on linux-x64: 

jdk/jfr/event/gc/collection/TestG1ParallelPhases.java 

----------System.err:(15/1370)----------
java.lang.RuntimeException: Compare events expected and received, Not found phases: , Not expected phases: CLDClearClaimedMarks, NoteStartOfMark, ResetMarkingState: expected true, was false
	at jdk.test.lib.Asserts.fail(Asserts.java:594)
	at jdk.test.lib.Asserts.assertTrue(Asserts.java:486)
	at jdk.jfr.event.gc.collection.TestG1ParallelPhases.main(TestG1ParallelPhases.java:136)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at com.sun.javatest.regtest.agent.MainWrapper$MainThread.run(MainWrapper.java:127)
	at java.base/java.lang.Thread.run(Thread.java:833)

JavaTest Message: Test threw exception: java.lang.RuntimeException: Compare events expected and received, Not found phases: , Not expected phases: CLDClearClaimedMarks, NoteStartOfMark, ResetMarkingState: expected true, was false
JavaTest Message: shutting down test

STATUS:Failed.`main' threw exception: java.lang.RuntimeException: Compare events expected and received, Not found phases: , Not expected phases: CLDClearClaimedMarks, NoteStartOfMark, ResetMarkingState: expected true, was false
----------rerun:(53/9412)*----------;;;","2021-09-01 00:56;roboduke;Changeset: f1c5e26e
Author:    Jie Fu <jiefu@openjdk.org>
Date:      2021-09-01 07:55:20 +0000
URL:       https://git.openjdk.java.net/jdk/commit/f1c5e26e48ca2db0fc2b7ad2cf1bda4853bdeea9
;;;","2021-09-01 06:55;dcubed;The fix for this bug was integrated in jdk-18+13-677.;;;",,,,,,,,,,,,,,,,,,,,,,,
[Vector API] Crash in C2_MacroAssembler::vprotate_var after JDK-8271366,JDK-8273205,5057782,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,jiefu,epavlova,epavlova,2021-08-31 13:41,2021-09-27 22:57,2023-10-01 09:57,2021-09-06 21:27,repo-panama,,,,,,,repo-panama,hotspot,,0,hs-comp-triaged,tencent-interest,vectorIntrinsics+mask,,,,,,,,,,,,,,,,,,,"A lot of Vector API tests from ""vectorIntrinsics+mask"" branch crash with

#  Internal Error (open/src/hotspot/cpu/x86/c2_MacroAssembler_x86.cpp:1100), pid=31906, tid=31922
#  assert(etype == T_LONG) failed: expected type T_LONG
#
# JRE version: Java(TM) SE Runtime Environment (18.0) (fastdebug build 18-internal+0-2021-08-31-1905506.katya...)
# Java VM: Java HotSpot(TM) 64-Bit Server VM (fastdebug 18-internal+0-2021-08-31-1905506.katya..., compiled mode, sharing, compressed oops, compressed class ptrs, g1 gc, linux-amd64)
# Problematic frame:
# V  [libjvm.so+0x8675c8]  C2_MacroAssembler::vprotate_var(int, BasicType, XMMRegisterImpl*, XMMRegisterImpl*, XMMRegisterImpl*, int)+0x158


To reproduce run for example jdk/incubator/vector/Byte128VectorTests.java with ""-ea -esa -Xcomp -XX:CompileThreshold=100"" flags.

Perhaps this is known issue but I didn't find open bugs, so filled new one.
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8271366,,,,,"2021-08-31 13:46;epavlova;hs_err_bug8273205.log;https://bugs.openjdk.org/secure/attachment/96296/hs_err_bug8273205.log",,,,,,,,,,,,,,,,,,,"0|i2u7nn:",9223372036854775807,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Document the two possible cases when Lookup::ensureInitialized returns,JDK-8273194,5057762,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,mchung,mchung,mchung,2021-08-31 09:34,2021-09-15 20:06,2023-10-01 09:57,2021-09-10 10:18,18,,,,,,,18,core-libs,,0,noreg-doc,,,,,,,,,,,,,,,,,,,,,"Document the cases when Lookup::ensureInitialized() returns:
1. the class is fully initialized;
2. the class is being initialized and the current thread is the initializing one.
",,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8273253,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2u7j7:",9223372036854775807,b15,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@1cfeb1de,,,,,,,,,"2021-09-10 10:18;roboduke;Changeset: ec9d1beb
Author:    Mandy Chung <mchung@openjdk.org>
Date:      2021-09-10 17:17:31 +0000
URL:       https://git.openjdk.java.net/jdk/commit/ec9d1bebd772b3ca4ad3e0654cb4833c72ee238a
;;;",,,,,,,,,,,,,,,,,,,,,,,,,
"java/lang/instrument/BootClassPath/BootClassPathTest.sh fails with ""FATAL ERROR in native method: processing of -javaagent failed, processJavaStart failed""",JDK-8273188,5057756,Bug,Closed,JDK,JDK,software,duke,,,P2,Fixed,naoto,dcubed,dcubed,2021-08-31 07:04,2022-01-21 13:37,2023-10-01 09:57,2021-09-09 12:42,18,,,,,,,18,core-svc,,0,regression,tier5,tier6,tier7,tier8,,,,,,,,,,,,,,,,,"The following test failed in the JDK18 CI:

java/lang/instrument/BootClassPath/BootClassPathTest.sh

Here's a snippet from the log file:

#section:shell
----------messages:(3/142)----------
command: shell BootClassPathTest.sh
reason: User specified action: run shell/timeout=240 BootClassPathTest.sh 
elapsed time (seconds): 17.544
----------System.out:(14/1531)*----------
COMPILEJAVA=/System/Volumes/Data/mesos/work_dir/jib-master/install/jdk-18+13-659/macosx-x64-debug.jdk/jdk-18/fastdebug
Creating manifest file...
Env vars:
  LANG=null
  LC_ALL=C
  LC_CTYPE=null
Created /System/Volumes/Data/mesos/work_dir/slaves/369e65c9-433d-40ff-b6a0-b4e65701097a-S2204/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/99495dd2-ba91-4795-b19f-2b2b5f25b724/runs/2c6114b7-3144-4cb8-a362-50f904d10eba/testoutput/test-support/jtreg_open_test_jdk_jdk_svc/classes/1/java/lang/instrument/BootClassPath/BootClassPathTest.d/boot\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffdLietuvi\ufffd\ufffd\ufffd\ufffde\ufffd\ufffdtinaT\ufffd\ufffdrk\ufffd\ufffdeespa\ufffd\ufffdol\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd
Building test classes...
Creating agent jar file...
added manifest
adding: Agent.class(in = 1393) (out= 731)(deflated 47%)
Running test...
FATAL ERROR in native method: processing of -javaagent failed, processJavaStart failed
Cleanup...
----------System.err:(17/1830)----------
Exception in thread ""main"" java.lang.reflect.InvocationTargetException
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at java.instrument/sun.instrument.InstrumentationImpl.loadClassAndStartAgent(InstrumentationImpl.java:491)
	at java.instrument/sun.instrument.InstrumentationImpl.loadClassAndCallPremain(InstrumentationImpl.java:503)
Caused by: java.lang.ClassNotFoundException: AgentSupport
	at java.base/jdk.internal.loader.BuiltinClassLoader.loadClass(BuiltinClassLoader.java:641)
	at java.base/jdk.internal.loader.ClassLoaders$AppClassLoader.loadClass(ClassLoaders.java:188)
	at java.base/java.lang.ClassLoader.loadClass(ClassLoader.java:520)
	at java.base/java.lang.Class.forName0(Native Method)
	at java.base/java.lang.Class.forName(Class.java:375)
	at Agent.premain(Agent.java:36)
	... 6 more
*** java.lang.instrument ASSERTION FAILED ***: ""result"" with message agent load/premain call failed at /System/Volumes/Data/mesos/work_dir/slaves/35546316-ed70-4084-8244-d672e7734fd1-S109179/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/b7325ed7-6067-4497-823f-288ea8ef4db3/runs/90d9009d-09f5-4984-8177-3ff66fc4b45b/workspace/open/src/java.instrument/share/native/libinstrument/JPLISAgent.c line: 422
/System/Volumes/Data/mesos/work_dir/jib-master/install/jdk-18+13-659/src.full/open/test/jdk/java/lang/instrument/BootClassPath/BootClassPathTest.sh: line 86: 97423 Abort trap: 6           (core dumped) ""${JAVA}"" ${TESTVMOPTS} -javaagent:""${TESTCLASSES}""/Agent.jar -classpath ""${TESTCLASSES}"" DummyMain
----------rerun:(30/3806)*----------",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8260265,,,,,"2021-08-31 11:01;dcubed;8273188-repro-logs.zip;https://bugs.openjdk.org/secure/attachment/96294/8273188-repro-logs.zip",,,,,generic,,,,,,,,,generic,,,,,"0|i2u7hv:",9223372036854775807,b15,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@dc685aa,,,,,,,Verified,,"2021-08-31 07:11;dcubed;jdk-18+13-659 contains only three change sets: 


2021-08-31 00:24 
minqi: 9732fb - OpenJDK 
8273153 Consolidate file_exists into os:file_exists 

2021-08-30 21:13 
naoto: 7fc854 - OpenJDK 
8260265 UTF-8 by Default 

2021-08-30 21:16 
vromero: 060942 - OpenJDK 
8272347 ObjectMethods::bootstrap should specify NPE if any argument except lookup is null 

Of these three, this fix looks the most related: 

JDK-8260265 UTF-8 by Default 

[~naoto] - Can you investigate to see if JDK-8260265 has caused these test failures?;;;","2021-08-31 11:01;dcubed;Reproduced the test failure on my MBP13 with release, fastdebug 
and slow debug bits. Attached the logs:

$ unzip -l 8273188-repro-logs.zip
Archive:  8273188-repro-logs.zip
  Length      Date    Time    Name
---------  ---------- -----   ----
     8840  08-31-2021 11:49   test_failures.2021-08-31-114444/BootClassPathTest.jtr.fastdebug
     8723  08-31-2021 11:46   test_failures.2021-08-31-114444/BootClassPathTest.jtr.release
     8841  08-31-2021 11:54   test_failures.2021-08-31-114444/BootClassPathTest.jtr.slowdebug
---------                     -------
    26404                     3 files;;;","2021-08-31 11:11;cjplummer;The linux failure has additional text in stderr that doesn't appear on the macosx failures, but may be indicative of the root cause:

error: illegal argument for -d: java.nio.file.InvalidPathException: Malformed input or input contains unmappable characters: /opt/mach5/mesos/work_dir/slaves/ff806ead-2cac-495d-9cbc-62116f99bf14-S13788/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/226be985-2b3f-4a6e-b87e-453114a41db0/runs/fdc6335f-e332-43c0-b620-eea8d0025582/testoutput/test-support/jtreg_open_test_jdk_jdk_svc/classes/2/java/lang/instrument/BootClassPath/BootClassPathTest.d/boot?????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????Lietuvi????????????e??????tinaT??????rk??????eespa??????ol???????????????????????????
Exception in thread ""main"" java.nio.file.InvalidPathException: Malformed input or input contains unmappable characters: /opt/mach5/mesos/work_dir/slaves/ff806ead-2cac-495d-9cbc-62116f99bf14-S13788/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/226be985-2b3f-4a6e-b87e-453114a41db0/runs/fdc6335f-e332-43c0-b620-eea8d0025582/testoutput/test-support/jtreg_open_test_jdk_jdk_svc/classes/2/java/lang/instrument/BootClassPath/BootClassPathTest.d/boot???????????????????????????????????????????????????????????????????????????????????????????????????Lietuvi????e??tinaT??rk??eespa??ol?????????
	at java.base/sun.nio.fs.UnixPath.encode(UnixPath.java:121)
	at java.base/sun.nio.fs.UnixPath.<init>(UnixPath.java:68)
	at java.base/sun.nio.fs.UnixFileSystem.getPath(UnixFileSystem.java:279)
	at java.base/java.nio.file.Path.of(Path.java:147)
	at java.base/java.nio.file.Paths.get(Paths.java:69)
	at jdk.compiler/com.sun.tools.javac.main.Arguments.checkDirectory(Arguments.java:864)
	at jdk.compiler/com.sun.tools.javac.main.Arguments.validate(Arguments.java:470)
	at jdk.compiler/com.sun.tools.javac.main.Main.compile(Main.java:276)
	at jdk.compiler/com.sun.tools.javac.main.Main.compile(Main.java:176)
	at jdk.compiler/com.sun.tools.javac.Main.compile(Main.java:64)
	at jdk.compiler/com.sun.tools.javac.Main.main(Main.java:50)
Exception in thread ""main"" java.lang.reflect.InvocationTargetException
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at java.instrument/sun.instrument.InstrumentationImpl.loadClassAndStartAgent(InstrumentationImpl.java:491)
	at java.instrument/sun.instrument.InstrumentationImpl.loadClassAndCallPremain(InstrumentationImpl.java:503)
Caused by: java.lang.ClassNotFoundException: AgentSupport
	at java.base/jdk.internal.loader.BuiltinClassLoader.loadClass(BuiltinClassLoader.java:641)
	at java.base/jdk.internal.loader.ClassLoaders$AppClassLoader.loadClass(ClassLoaders.java:188)
	at java.base/java.lang.ClassLoader.loadClass(ClassLoader.java:520)
	at java.base/java.lang.Class.forName0(Native Method)
	at java.base/java.lang.Class.forName(Class.java:375)
	at Agent.premain(Agent.java:36)
	... 6 more;;;","2021-08-31 11:38;cjplummer;Fails every time on linux-x64-debug and macosx-x64-debug. The failure goes away when I revert JDK-8260265. ;;;","2021-08-31 11:59;dcubed;Built a new repo with the HEAD just before the fix for:

    JDK-8260265 UTF-8 by Default 

$ git log HEAD^!
commit 32048536e9ea9245437eb37308e905435cce6305 (HEAD)
Author: Ioi Lam <iklam@openjdk.org>
Date:   Mon Aug 30 21:06:26 2021 +0000

    8272343: Remove MetaspaceClosure::FLAG_MASK
    
    Reviewed-by: ccheung, minqi

$ do_java_test ""sun/tools/jcmd/JcmdOutputEncodingTest.java sun/tools/jstack/BasicJStackTest.java java/lang/instrument/BootClassPath/BootClassPathTest.sh""
INFO: GNUMAKE=make
INFO: GNUMAKE version is: GNU Make 3.81

INFO: JTREG options:
INFO:   JOBS=1
INFO:   TEST_MODE=agentvm
INFO:   EXTRA_PROBLEM_LISTS=ProblemList-extra.txt
INFO:   VM_OPTIONS=
INFO: test_val=sun/tools/jcmd/JcmdOutputEncodingTest.java sun/tools/jstack/BasicJStackTest.java java/lang/instrument/BootClassPath/BootClassPathTest.sh
Test Config: macosx-x86_64-normal-server-release
    INFO: TIMEOUT_FACTOR=4
    Done testing
    Test Run macosx-x86_64-normal-server-release time: 0.67 minutes.

    TEST                                              TOTAL  PASS  FAIL ERROR
    jtreg:open/test/jdk/sun/tools/jcmd/JcmdOutputEncodingTest.java
                                                          1     1     0     0
    jtreg:open/test/jdk/sun/tools/jstack/BasicJStackTest.java
                                                          1     1     0     0
    jtreg:open/test/jdk/java/lang/instrument/BootClassPath/BootClassPathTest.sh
                                                          1     1     0     0

Test Config: macosx-x86_64-normal-server-fastdebug
    INFO: TIMEOUT_FACTOR=6
    Done testing
    Test Run macosx-x86_64-normal-server-fastdebug time: 1.13 minutes.

    TEST                                              TOTAL  PASS  FAIL ERROR
    jtreg:open/test/jdk/sun/tools/jcmd/JcmdOutputEncodingTest.java
                                                          1     1     0     0
    jtreg:open/test/jdk/sun/tools/jstack/BasicJStackTest.java
                                                          1     1     0     0
    jtreg:open/test/jdk/java/lang/instrument/BootClassPath/BootClassPathTest.sh
                                                          1     1     0     0

Test Config: macosx-x86_64-normal-server-slowdebug
    INFO: TIMEOUT_FACTOR=12
    Done testing
    Test Run macosx-x86_64-normal-server-slowdebug time: 3.27 minutes.

    TEST                                              TOTAL  PASS  FAIL ERROR
    jtreg:open/test/jdk/sun/tools/jcmd/JcmdOutputEncodingTest.java
                                                          1     1     0     0
    jtreg:open/test/jdk/sun/tools/jstack/BasicJStackTest.java
                                                          1     1     0     0
    jtreg:open/test/jdk/java/lang/instrument/BootClassPath/BootClassPathTest.sh
                                                          1     1     0     0

Total test time: 5.08 minutes.

While not proof, this is a strong indicator that this test failure:

java/lang/instrument/BootClassPath/BootClassPathTest.sh

is a regression caused by JDK-8260265.;;;","2021-08-31 12:29;dcubed;I ran the test 3 additional times in release, fast debug and slow debug and
did not get any failures.;;;","2021-08-31 12:32;dcubed;This test failure is only observed in linux-x64 and macOS-x64 in Tier5.
The test is passing on windows-x64 for some reason.;;;","2021-09-07 16:25;naoto;java.instrument/unix/native/libinstrument/EncodingSupport_md.c uses `iconv` to convert UTF-8 to Platform encoding which is US-ASCII in this case.;;;","2021-09-08 12:45;naoto;The gist of the issue is that the test case now always creates the boot class path with non-ASCII chars, because the default encoding is fixed to UTF-8 with the fix to JDK-8260265.

On macOS, javaagent tries to load the class with US-ASCII by nl_langinfo(). The file system encoding is always UTF-8 on mac, so no need to determine the encoding with nl_langinfo.

On Linux, the ""defaultEncoding"" in Setup.java used to be US-ASCII in ""C"" locale (which matches the result from nl_langinfo()), so no `unicode` suffix was appended to the `boot` path. But now the ""defaultEncoding"" is always UTF-8, the setup code appends the unicode path, which fails to read in the native code using US-ASCII. The setup code should use the encoding from ""sun.jnu.encoding"" instead. Actually, the code there was copied from UnicodeTest.java which was modified with JDK-8260265, so the same fix needs to be applied.;;;","2021-09-09 12:42;roboduke;Changeset: 54dee132
Author:    Naoto Sato <naoto@openjdk.org>
Date:      2021-09-09 19:41:56 +0000
URL:       https://git.openjdk.java.net/jdk/commit/54dee132d1a149165e7478b29b740d086c18c424
;;;",,,,,,,,,,,,,,,,
jtools tests fail with missing markerName check,JDK-8273187,5057755,Bug,Closed,JDK,JDK,software,duke,,,P2,Fixed,naoto,dcubed,dcubed,2021-08-31 06:57,2022-01-21 13:42,2023-10-01 09:57,2021-09-20 06:42,18,,,,,,,18,core-svc,,0,noreg-self,regression,tier5,tier6,tier7,tier8,,,,,,,,,,,,,,,,"The following tests failed in the JDK18 CI:

   6 sun/tools/jcmd/JcmdOutputEncodingTest.java
   6 sun/tools/jstack/BasicJStackTest.java

There are sightings of this test failure on all platforms in Tier5.

Here's a snippet from one of the log files:

 stderr: []
 exitValue = 0

java.lang.RuntimeException: 'markerName????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????' missing from stdout/stderr 

	at jdk.test.lib.process.OutputAnalyzer.shouldContain(OutputAnalyzer.java:221)
	at BasicJStackTest.testJstackUTF8Encoding(BasicJStackTest.java:67)
	at BasicJStackTest.main(BasicJStackTest.java:46)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at com.sun.javatest.regtest.agent.MainWrapper$MainThread.run(MainWrapper.java:127)
	at java.base/java.lang.Thread.run(Thread.java:833)

JavaTest Message: Test threw exception: java.lang.RuntimeException: 'markerName????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????' missing from stdout/stderr 

JavaTest Message: shutting down test

STATUS:Failed.<EncodeD>60 6d 61 69 6e 27 20 74 68 72 65 77 20 65 78 63 65 70 74 69 6f 6e 3a 20 6a 61 76 61 2e 6c 61 6e 67 2e 52 75 6e 74 69 6d 65 45 78 63 65 70 74 69 6f 6e 3a 20 27 6d 61 72 6b 65 72 4e 61 6d 65 e4 bb5 e4 bb5 e4 bb5 e4 bb5 e4 bb5 e4 bb5 e4 bb5 e4 bb5 e4 bb5 e4 bb5 e4 bb5 e4 bb5 e4 bb5 e4 bb5 e4 bb5 e4 bb5 e4 bb5 e4 bb5 e4 bb5 e4 bb5 e4 bb5 e4 bb5 e4 bb5 e4 bb5 e4 bb5 e4 bb5 e4 bb5 e4 bb5 e4 bb5 e4 bb5 e4 bb5 e4 bb5 e4 bb5 e4 bb5 e4 bb5 e4 bb5 e4 bb5 e4 bb5 e4 bb5 e4 bb5 e4 bb5 e4 bb5 e4 bb5 e4 bb5 e4 bb5 e4 bb5 e4 bb5 e4 bb5 e4 bb5 e4 bb5 e4 bb5 e4 bb5 e4 bb5 e4 bb5 e4 bb5 e4 bb5 e4 bb5 e4 bb5 e4 bb5 e4 bb5 27 20 6d 69 73 73 69 6e 67 20 66 72 6f 6d 20 73 74 64 6f 75 74 2f 73 74 64 65 72 72 </EncodeD>
----------rerun:(40/7002)*----------


The output in question does have a line that contain markerName:

""markerName????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????"" #14 prio=5 os_prio=31 cpu=212.90ms elapsed=2.16s tid=0x00007ffc5c00a020 nid=40451 in Object.wait()  [0x0000700007e58000]
   java.lang.Thread.State: WAITING (on object monitor)
Thread: 0x00007ffc5c00a020  [0x9e03] State: _at_safepoint _at_poll_safepoint 0
   JavaThread state: _thread_blocked
	at java.lang.Object.wait(java.base@18-ea/Native Method)
	- waiting on <0x00000007efaae268> (a java.lang.ProcessImpl)
	at java.lang.Object.wait(java.base@18-ea/Object.java:338)
	at java.lang.ProcessImpl.waitFor(java.base@18-ea/ProcessImpl.java:434)
	- locked <0x00000007efaae268> (a java.lang.ProcessImpl)
	at jdk.test.lib.process.ProcessTools.executeProcess(ProcessTools.java:445)
	at BasicJStackTest.jstack(BasicJStackTest.java:86)
	at BasicJStackTest.testJstackUTF8Encoding(BasicJStackTest.java:65)
	at BasicJStackTest.main(BasicJStackTest.java:46)
	at jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(java.base@18-ea/Native Method)
	at jdk.internal.reflect.NativeMethodAccessorImpl.invoke(java.base@18-ea/NativeMethodAccessorImpl.java:77)
	at jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(java.base@18-ea/DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(java.base@18-ea/Method.java:568)
	at com.sun.javatest.regtest.agent.MainWrapper$MainThread.run(MainWrapper.java:127)
	at java.lang.Thread.run(java.base@18-ea/Thread.java:833)
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8260265,,,,,"2021-08-31 11:02;dcubed;8273187-repro-logs.zip;https://bugs.openjdk.org/secure/attachment/96295/8273187-repro-logs.zip",,,,,generic,,,,,,,,,generic,,,,,"0|i2u7hn:",9223372036854775807,b16,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@22f3cc74,,,,,,,Verified,,"2021-08-31 07:10;dcubed;jdk-18+13-659 contains only three change sets:


2021-08-31 00:24
minqi: 9732fb - OpenJDK
8273153  Consolidate file_exists into os:file_exists

2021-08-30 21:13
naoto: 7fc854 - OpenJDK
8260265  UTF-8 by Default

2021-08-30 21:16
vromero: 060942 - OpenJDK
8272347  ObjectMethods::bootstrap should specify NPE if any argument except lookup is null

Of these three, this fix looks the most related:

JDK-8260265 UTF-8 by Default

[~naoto] - Can you investigate to see if JDK-8260265 has caused these test failures?;;;","2021-08-31 07:18;naoto;Most likely related to JDK-8260265;;;","2021-08-31 10:59;dcubed;Reproduced the two test failures on my MBP13 with release, fastdebug
and slow debug bits. Attached the logs:

$ unzip -l 8273187-repro-logs.zip
Archive:  8273187-repro-logs.zip
  Length      Date    Time    Name
---------  ---------- -----   ----
    71961  08-31-2021 11:48   test_failures.2021-08-31-114444/BasicJStackTest.jtr.fastdebug
    62964  08-31-2021 11:45   test_failures.2021-08-31-114444/BasicJStackTest.jtr.release
    71975  08-31-2021 11:52   test_failures.2021-08-31-114444/BasicJStackTest.jtr.slowdebug
    33420  08-31-2021 11:47   test_failures.2021-08-31-114444/JcmdOutputEncodingTest.jtr.fastdebug
    31068  08-31-2021 11:44   test_failures.2021-08-31-114444/JcmdOutputEncodingTest.jtr.release
    33324  08-31-2021 11:51   test_failures.2021-08-31-114444/JcmdOutputEncodingTest.jtr.slowdebug
---------                     -------
   304712                     6 files;;;","2021-08-31 12:01;dcubed;Built a new repo with the HEAD just before the fix for: 

    JDK-8260265 UTF-8 by Default 

$ git log HEAD^! 
commit 32048536e9ea9245437eb37308e905435cce6305 (HEAD) 
Author: Ioi Lam <iklam@openjdk.org> 
Date: Mon Aug 30 21:06:26 2021 +0000 

    8272343: Remove MetaspaceClosure::FLAG_MASK 
     
    Reviewed-by: ccheung, minqi 

$ do_java_test ""sun/tools/jcmd/JcmdOutputEncodingTest.java sun/tools/jstack/BasicJStackTest.java java/lang/instrument/BootClassPath/BootClassPathTest.sh"" 
INFO: GNUMAKE=make 
INFO: GNUMAKE version is: GNU Make 3.81 

INFO: JTREG options: 
INFO: JOBS=1 
INFO: TEST_MODE=agentvm 
INFO: EXTRA_PROBLEM_LISTS=ProblemList-extra.txt 
INFO: VM_OPTIONS= 
INFO: test_val=sun/tools/jcmd/JcmdOutputEncodingTest.java sun/tools/jstack/BasicJStackTest.java java/lang/instrument/BootClassPath/BootClassPathTest.sh 
Test Config: macosx-x86_64-normal-server-release 
    INFO: TIMEOUT_FACTOR=4 
    Done testing 
    Test Run macosx-x86_64-normal-server-release time: 0.67 minutes. 

    TEST TOTAL PASS FAIL ERROR 
    jtreg:open/test/jdk/sun/tools/jcmd/JcmdOutputEncodingTest.java 
                                                          1 1 0 0 
    jtreg:open/test/jdk/sun/tools/jstack/BasicJStackTest.java 
                                                          1 1 0 0 
    jtreg:open/test/jdk/java/lang/instrument/BootClassPath/BootClassPathTest.sh 
                                                          1 1 0 0 

Test Config: macosx-x86_64-normal-server-fastdebug 
    INFO: TIMEOUT_FACTOR=6 
    Done testing 
    Test Run macosx-x86_64-normal-server-fastdebug time: 1.13 minutes. 

    TEST TOTAL PASS FAIL ERROR 
    jtreg:open/test/jdk/sun/tools/jcmd/JcmdOutputEncodingTest.java 
                                                          1 1 0 0 
    jtreg:open/test/jdk/sun/tools/jstack/BasicJStackTest.java 
                                                          1 1 0 0 
    jtreg:open/test/jdk/java/lang/instrument/BootClassPath/BootClassPathTest.sh 
                                                          1 1 0 0 

Test Config: macosx-x86_64-normal-server-slowdebug 
    INFO: TIMEOUT_FACTOR=12 
    Done testing 
    Test Run macosx-x86_64-normal-server-slowdebug time: 3.27 minutes. 

    TEST TOTAL PASS FAIL ERROR 
    jtreg:open/test/jdk/sun/tools/jcmd/JcmdOutputEncodingTest.java 
                                                          1 1 0 0 
    jtreg:open/test/jdk/sun/tools/jstack/BasicJStackTest.java 
                                                          1 1 0 0 
    jtreg:open/test/jdk/java/lang/instrument/BootClassPath/BootClassPathTest.sh 
                                                          1 1 0 0 

Total test time: 5.08 minutes. 

While not proof, this is a strong indicator that these test failures: 

sun/tools/jcmd/JcmdOutputEncodingTest.java
sun/tools/jstack/BasicJStackTest.java 

is a regression caused by JDK-8260265.;;;","2021-08-31 12:29;dcubed;I ran the tests 3 additional times in release, fast debug and slow debug and
did not get any failures.;;;","2021-09-01 16:17;dcubed;Spotted in the jdk-18+13-659-tier8 CI job set:

https://mach5.us.oracle.com/mdash/jobs/mach5-one-jdk-18+13-659-tier8-20210901-2207-24211149/results?search=status%3Afailed%20AND%20-state%3Ainvalid%20AND%20(name%3Asun%2Ftools%2Fjstack%2FBasicJStackTest.java%20OR%20name%3Asun%2Ftools%2Fjcmd%2FJcmdOutputEncodingTest.java)

sun/tools/jstack/BasicJStackTest.java
sun/tools/jcmd/JcmdOutputEncodingTest.java

2 sightings (1 for each test, so far);;;","2021-09-02 16:29;naoto;JDK-8260265 was mainly moving the default charset to UTF-8, but it also modified the default System.out/err encoding *not in terminal* to the following:
---
-        // defaults to Charset.defaultCharset()
-        setOut0(newPrintStream(fdOut, props.getProperty(""sun.stdout.encoding"")));
-        setErr0(newPrintStream(fdErr, props.getProperty(""sun.stderr.encoding"")));
+        // defaults to native.encoding
+        setOut0(newPrintStream(fdOut, props.getProperty(""sun.stdout.encoding"", StaticProperty.nativeEncoding())));
+        setErr0(newPrintStream(fdErr, props.getProperty(""sun.stderr.encoding"", StaticProperty.nativeEncoding())));
---

So the environment that is not a terminal (e.g. a process created by ProcessBuilder), it now defaults to `native.encoding` instead of Charset.defaultCharset(). Thus the output from ProcessBuilder's process has to be compared with the marker string through the encoder with native.encoding. In case of 'C' locale on macOS, the native.encoding is `US-ASCII`, thus the problem occurs. Before JDK-8260865, it happened to be working because native.encoding == Charset.defaultCharset() == US_ASCII.;;;","2021-09-17 09:13;naoto;The proposed fix is to pass sun.stdout.encoding=UTF-8 as well as file.encoding so that tool process' System.out is in UTF-8 as well.;;;","2021-09-20 06:42;roboduke;Changeset: f71df142
Author:    Naoto Sato <naoto@openjdk.org>
Date:      2021-09-20 13:38:38 +0000
URL:       https://git.openjdk.java.net/jdk/commit/f71df142a97f522b40e90c3105e0e5bd8d5af9a2
;;;",,,,,,,,,,,,,,,,,
Add @since tags to the DocTree.Kind enum constants,JDK-8273175,5057741,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,prappo,prappo,prappo,2021-08-31 04:10,2021-12-13 19:17,2023-10-01 09:57,2021-12-07 10:59,18,,,,,,,18,tools,,0,noreg-doc,,,,,,,,,,,,,,,,,,,,,Lack of @since tags became apparent when reviewing CSR for snippets: JDK-8266669. This issues is created as a reminder to retroactively add such tags.,,,,,,,,,,,JDK-8278692,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8266669,,,,,,,,,,,,,,,,,,,,,,,,"0|i2u7ej:",9223372036854775807,b27,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@7900061a,,,,,,,,,"2021-12-07 10:59;roboduke;Changeset: 061017a9
Author:    Pavel Rappo <prappo@openjdk.org>
Date:      2021-12-07 18:56:58 +0000
URL:       https://git.openjdk.java.net/jdk/commit/061017a9f4280657987524092b60611bfae8b95f
;;;",,,,,,,,,,,,,,,,,,,,,,,,,
java/util/regex/NegativeArraySize.java failed after JDK-8271302,JDK-8273169,5057734,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,jjiang,jjiang,jjiang,2021-08-31 02:10,2022-03-30 02:25,2023-10-01 09:57,2021-08-31 10:32,18,,,,,,,18,core-libs,,0,32-bit,jdk17u-fix-request,jdk17u-fix-yes,starter-bug,tencent-interest,testbug,,,,,,,,,,,,,,,,"https://github.com/openjdk/jdk/pull/5092#issuecomment-909008362

Invalid initial heap size: -Xms5G
The specified size exceeds the maximum representable size.
Error: Could not create the Java Virtual Machine.
Error: A fatal exception has occurred. Program will exit.",,,,,,,,,,,JDK-8283939,JDK-8283768,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8271302,,,,,,,,,,,,,,,,,,,,,,,,"0|i2u7cz:",9223372036854775807,b13,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@557d5cff,,,,,,,,,"2021-08-31 10:32;roboduke;Changeset: 683e30db
Author:    bobpengxie <bobpengxie@tencent.com>
Committer: Sergey Bylokhov <serb@openjdk.org>
Date:      2021-08-31 17:31:03 +0000
URL:       https://git.openjdk.java.net/jdk/commit/683e30db79789ee44b3cc0b44c085de4615bca7b
;;;","2022-03-29 03:15;mdoerr;Fix Request (17u):
Should get backported for parity with 17.0.4-oracle. Applies cleanly on top of JDK-8271302.;;;","2022-03-29 03:37;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk17u-dev/pull/291
Date: 2022-03-29 10:25:04 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,
Remove superfluous use of boxing in java.desktop,JDK-8273168,5057733,Bug,Resolved,JDK,JDK,software,duke,,,P5,Fixed,aturbanov,aturbanov,aturbanov,2021-08-31 01:32,2021-09-13 14:24,2023-10-01 09:57,2021-09-07 14:13,11,16,17,18,,,,18,client-libs,,0,cleanup,noreg-cleanup,,,,,,,,,,,,,,,,,,,,"Usages of methods Integer.valueOf, Byte.valueOf, Short.valueOf, Float.valueOf, Double.valueOf, Long.valueOf often can be simplified by using their pair methods parseInt/parseLong/parseShort/parseByte/parseFloat.
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2u7cr:",9223372036854775807,b14,,,,,,,,,,,,"2021-09-07 14:13;roboduke;Changeset: 708407ed
Author:    Andrey Turbanov <turbanoff@gmail.com>
Committer: Alexey Ivanov <aivanov@openjdk.org>
Date:      2021-09-07 21:12:35 +0000
URL:       https://git.openjdk.java.net/jdk/commit/708407eddc9d52c01de02e3986c05e1c6225fa85
;;;",,,,,,,,,,,,,,,,,,,,,,,,,
"GraphKit::combine_exception_states fails with ""matching stack sizes"" assert",JDK-8273165,5057730,Bug,Closed,JDK,JDK,software,duke,,,P2,Fixed,vlivanov,thartmann,thartmann,2021-08-30 23:21,2022-02-04 08:14,2023-10-01 09:57,2021-09-02 04:48,17,18,,,,,,18,hotspot,,0,c2,hs-comp-triaged,jdk17u-fix-request,jdk17u-fix-yes,oracle-triage-11,oracle-triage-17,oracle-triage-18,,,,,,,,,,,,,,,"We started hitting this a lot in Valhalla but I noticed that it also triggers in the mainline CI:

#
# A fatal error has been detected by the Java Runtime Environment:
#
#  Internal Error (/workspace/open/src/hotspot/share/opto/graphKit.cpp:348), pid=6599, tid=6615
#  assert(ex_jvms->sp() == phi_map->_jvms->sp()) failed: matching stack sizes
#
# JRE version: Java(TM) SE Runtime Environment (18.0+13) (fastdebug build 18-ea+13-623)
# Java VM: Java HotSpot(TM) 64-Bit Server VM (fastdebug 18-ea+13-623, compiled mode, sharing, compressed oops, compressed class ptrs, g1 gc, linux-amd64)
# Problematic frame:
# V  [libjvm.so+0xd43e36]  GraphKit::combine_exception_states(SafePointNode*, SafePointNode*) [clone .part.0]+0xc6
#
# Core dump will be written. Default location: Core dumps may be processed with ""/opt/core.sh %p"" (or dumping to /testoutput/test-support/jck_runtime_api_java_util/core.6599)
#
# If you would like to submit a bug report, please visit:
#   https://bugreport.java.com/bugreport/crash.jsp
#
Current CompileTask:
C2: 134735 11496    b        javasoft.sqe.tests.api.java.util.concurrent.atomic.AtomicIntegerFieldUpdater.GetAndUpdate::test (65 bytes)

Stack: [0x00007f3dd82fb000,0x00007f3dd83fc000],  sp=0x00007f3dd83f6fc0,  free space=1007k
Native frames: (J=compiled Java code, j=interpreted, Vv=VM code, C=native code)
V  [libjvm.so+0xd43e36]  GraphKit::combine_exception_states(SafePointNode*, SafePointNode*) [clone .part.0]+0xc6
V  [libjvm.so+0xd4f22c]  GraphKit::replace_call(CallNode*, Node*, bool)+0x63c
V  [libjvm.so+0x825c0b]  CallGenerator::do_late_inline_helper()+0xbbb
V  [libjvm.so+0xa04b3d]  Compile::inline_incrementally_one()+0x33d
V  [libjvm.so+0xa05427]  Compile::process_late_inline_calls_no_inline(PhaseIterGVN&)+0x117
V  [libjvm.so+0xa06d70]  Compile::Optimize()+0x1860
V  [libjvm.so+0xa084b8]  Compile::Compile(ciEnv*, ciMethod*, int, bool, bool, bool, bool, bool, DirectiveSet*)+0x1588
V  [libjvm.so+0x81cd56]  C2Compiler::compile_method(ciEnv*, ciMethod*, int, bool, DirectiveSet*)+0x646
V  [libjvm.so+0xa18711]  CompileBroker::invoke_compiler_on_method(CompileTask*)+0xd31
V  [libjvm.so+0xa19448]  CompileBroker::compiler_thread_loop()+0x598
V  [libjvm.so+0x1886a5c]  JavaThread::thread_main_inner()+0x27c
V  [libjvm.so+0x188d050]  Thread::call_run()+0x100
V  [libjvm.so+0x156b244]  thread_native_entry(Thread*)+0x104
",,,,,,,,,,,JDK-8274481,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8257211,JDK-8275638,JDK-8278873,JDK-8271276,,"2021-08-30 23:23;thartmann;hs_err_pid6599.log;https://bugs.openjdk.org/secure/attachment/96287/hs_err_pid6599.log","2021-08-30 23:23;thartmann;replay_pid6599.log;https://bugs.openjdk.org/secure/attachment/96288/replay_pid6599.log",,,,,,,,,,,,,,,,,,"0|i2u7c3:",9223372036854775807,b14,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,Verified,,"2021-08-30 23:35;thartmann;I can reproduce the issue reliably by running tests with ""-XX:+UnlockExperimentalVMOptions -XX:PerMethodSpecTrapLimit=0 -XX:PerMethodTrapLimit=0"".;;;","2021-08-30 23:45;thartmann;ILW = Assert during C2 compilation, intermittent but reliably reproducible with stress flags, -XX:-IncrementalInlineVirtual = HMM = P2;;;","2021-08-30 23:49;thartmann;This is related to IncrementalInlineVirtual (JDK-8257211) and seems to be a regression from JDK-8271276.;;;","2021-08-31 02:45;thartmann;Vladimir, please have a look.;;;","2021-09-02 04:48;roboduke;Changeset: 632a7e08
Author:    Vladimir Ivanov <vlivanov@openjdk.org>
Date:      2021-09-02 11:46:19 +0000
URL:       https://git.openjdk.java.net/jdk/commit/632a7e0885596b70d34be319bd09d4df8e151d12
;;;","2021-09-03 08:00;dcubed;This fix is integrated in jdk-18+14-695.;;;","2021-09-27 23:39;thartmann;Fix request (17u):
The bug leads to an assert in C2 (regression in JDK 17). The fix is low risk (bail out) and has been tested in the JDK 18 for a while and with tier1-3 in JDK 17u. The patch applies cleanly.;;;","2021-10-20 06:30;thartmann;I can still reproduce the same assert failure and filed JDK-8275638.;;;",,,,,,,,,,,,,,,,,,
AbstractSplittableWithBrineGenerator does not create a random salt,JDK-8273162,5057184,Bug,Closed,JDK,JDK,software,duke,,,P3,Fixed,jlaskey,webbuggrp,webbuggrp,2021-08-23 09:29,2023-07-31 06:26,2023-10-01 09:57,2021-09-10 11:51,17,,,,,,,18,core-libs,,0,17ea,dcsaw,jdk17u-fix-request,jdk17u-fix-SQE-ok-next,jdk17u-fix-yes,reproducer-yes,webbug,,,,,,,,,,,,,,,"A DESCRIPTION OF THE PROBLEM :
Class: java.base/jdk/internal/util/random/RandomSupport.java
Internal Class: RandomSupport.AbstractSplittableWithBrineGenerator
Method: makeSplitsSpliterator

This method is intending to create a salt from a random long. The salt should have random letters of size 4 for each consecutive 4 bits and then the last 4 bits as ff, i.e. all bits set.

However the loop is never executed, the random bits are not used and the salt is always the same.

This condition is false on the first execution:

long multiplier = (1L << SALT_SHIFT) - 1;
long salt = multiplier << (64 - SALT_SHIFT);
while ((salt & multiplier) != 0) {

multiplier == 0xffL
salt == 0xff00_0000_0000_0000L

The bitwise AND returns false and the salt is kept as the initial value.

I believe the intention is to keep shifting the ff digit in the salt to the right while appending random 4 bit digits at the top of the salt. When the initial ff digit reaches the least significant bits then this is detected and the loop stops.

This can be corrected by changing:

while ((salt & multiplier) != 0) {

to

while ((salt & multiplier) == 0) {




STEPS TO FOLLOW TO REPRODUCE THE PROBLEM :
I am not familiar with how to make this bug manifest in code. It will apply to splittable generators. I believe the intention is that a call to 'SplittableGenerator#splits()' will create a stream of generators that will have a distinct state cycle (because the salt is random and unique). However the salt will not be random and so successive calls to splits() will create streams of generators that are all using the same state cycle. However given that the salt is only part of the seed state then the output from the generators will still be random and different.

Here is test code for the salt generation:

  @Test
  public void testSalt() {
    SplittableRandom rng = new SplittableRandom(42L);
    for (int shift = 3; shift <= 5; shift++) {
      for (int i = 0; i < 10; i++) {
        long bits = rng.nextLong();
        System.out.printf(""%d %22d -> %22d or %22d%n"", shift, bits, getSalt1(shift, bits), getSalt2(shift, bits));
      }
    }
  }

  private static long getSalt1(int SALT_SHIFT, long bits) {
    long multiplier = (1L << SALT_SHIFT) - 1;
    long salt = multiplier << (64 - SALT_SHIFT);
    while ((salt & multiplier) != 0) {
      long digit = Math.multiplyHigh(bits, multiplier);
      salt = (salt >>> SALT_SHIFT) | (digit << (64 - SALT_SHIFT));
      bits *= multiplier;
    }
    return salt;
  }

  private static long getSalt2(int SALT_SHIFT, long bits) {
    long multiplier = (1L << SALT_SHIFT) - 1;
    long salt = multiplier << (64 - SALT_SHIFT);
    while ((salt & multiplier) == 0) {
      long digit = Math.multiplyHigh(bits, multiplier);
      salt = (salt >>> SALT_SHIFT) | (digit << (64 - SALT_SHIFT));
      bits *= multiplier;
    }
    return salt;
  }

This will output the same salt using the current implementation or a random salt using the updated version:

3   -4767286540954276203 ->   -2305843009213693952 or    4349124269383043310
3    2949826092126892291 ->   -2305843009213693952 or    8945531224453011486
3    5139283748462763858 ->   -2305843009213693952 or     517819905960023966
3    6349198060258255764 ->   -2305843009213693952 or   -6659264277579162322
3     701532786141963250 ->   -2305843009213693952 or    5085857321298041998
3   -2430762948046562554 ->   -2305843009213693952 or   -7817602704379359106
3    4028864712777624925 ->   -2305843009213693952 or   -2622394274348337634
3   -3677692746721775708 ->   -2305843009213693952 or    2708571132827182830
3    6270620877612482005 ->   -2305843009213693952 or    5716212649416045870
3   -7037763681458882642 ->   -2305843009213693952 or   -2998217625047725730
4    3779771651426294207 ->   -1152921504606846976 or     212116472798449983
4    9094045341461139646 ->   -1152921504606846976 or   -3440073421829053057
4   -8976257307478440218 ->   -1152921504606846976 or   -7620503532181156977
4   -8854191821003330121 ->   -1152921504606846976 or    8417340289440550287
4   -6176718654468026660 ->   -1152921504606846976 or   -5759382560450891857
4    3752715396868486130 ->   -1152921504606846976 or    1725956634110967871
4    1910607418205583989 ->   -1152921504606846976 or    2729220554143385887
4    9140336935745592861 ->   -1152921504606846976 or   -7417744488025262465
4    1723436047706647047 ->   -1152921504606846976 or    7718206646484469279
4   -5737926661510088608 ->   -1152921504606846976 or    4401412089535661503
5    -787210419263134744 ->    -576460752303423488 or    8568385709579009520
5    1347604182271487641 ->    -576460752303423488 or   -1429488610206153232
5   -7382086223805147691 ->    -576460752303423488 or    -737100742167566352
5   -7013100964912248687 ->    -576460752303423488 or   -5246235741689107984
5    1368025501988796752 ->    -576460752303423488 or    3035404726796699120
5    5120214421805786385 ->    -576460752303423488 or   -7156035961266843152
5   -4759641710321948619 ->    -576460752303423488 or   -4432805587863457296
5   -3956836574347814625 ->    -576460752303423488 or    7601807688214426608
5   -1071251766013039353 ->    -576460752303423488 or    4194725726029200880
5   -5641428018500444605 ->    -576460752303423488 or    1152243442133003760





---------- BEGIN SOURCE ----------
Given that the salt member variable is package private it should be possible to construct a RandomSplitsSpliteratorWithSalt class using the AbstractSplittableWithBrineGenerator.makeSplitsSpliterator method and assert that the salt is always the same.


---------- END SOURCE ----------

",,,,,,,,,,,JDK-8279151,JDK-8313409,,,,,,,,,,,,,,,JDK-8273183,,,,,,,,,,,,,,,,,,"2021-08-30 06:27;jlaskey;patch-2021-08-27;https://bugs.openjdk.org/secure/attachment/96281/patch-2021-08-27",,,,,generic,,,,,,,,,generic,,,,,"0|i2u4kr:",9223372036854775807,b15,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@38ded199,,,,,,,Verified,,"2021-09-10 11:05;jlaskey;jdk17u-fix-request 

Low risk. Functional correction.

diff --git a/src/java.base/share/classes/jdk/internal/util/random/RandomSupport.java b/src/java.base/share/classes/jdk/internal/util/random/RandomSupport.java
index 8f5ea82ed1c..1d64432979d 100644
--- a/src/java.base/share/classes/jdk/internal/util/random/RandomSupport.java
+++ b/src/java.base/share/classes/jdk/internal/util/random/RandomSupport.java
@@ -2380,7 +2380,7 @@ public class RandomSupport {
             long bits = nextLong();
             long multiplier = (1L << SALT_SHIFT) - 1;
             long salt = multiplier << (64 - SALT_SHIFT);
-            while ((salt & multiplier) != 0) {
+            while ((salt & multiplier) == 0) {
                 long digit = Math.multiplyHigh(bits, multiplier);
                 salt = (salt >>> SALT_SHIFT) | (digit << (64 - SALT_SHIFT));
                 bits *= multiplier;;;;","2021-09-10 11:51;roboduke;Changeset: 5e1df2c7
Author:    Jim Laskey <jlaskey@openjdk.org>
Date:      2021-09-10 18:03:45 +0000
URL:       https://git.openjdk.java.net/jdk/commit/5e1df2c7d71e9393beaa4fd2d8812b065d053392
;;;","2021-09-16 05:32;tongwan;The submitter verified the fix.;;;","2021-11-18 03:45;shade;I see there is jdk17u-fix-yes, but where is the 17u backport RFR and/or push? Jim, are you still working on integrating it in 17u?;;;","2021-11-18 08:46;jlaskey;As far as I understand that automatic backports stopped when the 18 branch was forked. I and not actively backporting so you are welcome to take it on.;;;","2021-11-18 22:31;shade;OK. [~robm], does your approval for 17u still holds? If yes, I would push.;;;","2021-12-20 02:22;roboduke;A pull request was submitted for review.

URL: https://git.openjdk.java.net/jdk17u-dev/pull/6
Date: 2021-12-20 10:17:41 +0000
;;;","2021-12-20 03:11;shade;I dropped jdk17u-fix-yes to let new 17u maintainers re-approve the 17u integration.;;;",,,,,,,,,,,,,,,,,,
"Provide a JavadocTester method for non-overlapping, unordered output matching",JDK-8273154,5057710,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,jjg,prappo,prappo,2021-08-30 12:32,2023-01-16 09:51,2023-10-01 09:57,2021-11-10 07:25,18,,,,,,,18,tools,,0,javadoc-tester,jdk17u-fix-request,jdk17u-fix-yes,noreg-self,review-requested,,,,,,,,,,,,,,,,,"Here's a use case. Consider errors being reported out of order with respect to the their source lines. Consider also that the test doesn't want to hardcode those line numbers and wants to make sure that the errors are found at least once.

The functionality described in the above use case is somewhat similar to that of java.util.Collection#containsAll. I don't think any of methods such as checkOutput, checkUnique, or prospective checkOrder(...Output...) would do. ",,,,,,,,,,,JDK-8299510,JDK-8300214,,,,,,,,,,,,,,,,,,,,,,,JDK-8270836,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2u77n:",9223372036854775807,b24,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@7900061a,,,,,,,,,"2021-08-31 06:26;prappo;This came up when I was writing tests for JDK-8266666.;;;","2021-09-03 07:56;prappo;I'm sure there's a better title (the ""summary"" field) for this issue. However, as of today I cannot think of one.;;;","2021-09-03 08:11;jjg;* Well, the current checkOutput handles unordered, although we've thought about changing that.

* Non-overlapping should be handled by providing long enough strings to find ... although I guess there's a corner case of duplicate messages at different line numbers, so noted for that

*We have considered variants of check... in the past that allow regexs

Maybe we should come up with a general wishlist of check methods for JavadocTester

...

Jonathan Gibbons  8:06 AM
A variant of a regex would be a format-like pattern, so that a check string could begin %f/%l: to match a file name and some line number (i.e.[1-9][0-9]*
8:07
Maybe we could introduce a Checker object so that we can ""build"" custom checks to avoid excessive arbitrary overloads.
:+1:
1

8:09
FWIW, although not well documented, any one test class can create custom check methods, by following the checking / [passed|failed] pattern. There are already some tests that do this. This is a good way to experiment with new check methods without having to install them in JavadocTester.;;;","2021-09-03 08:21;jjg;Maybe the pattern is new Checker(file).configure.check(args) where configure is a series of set... methods that specify orderedness, etc, and check is overloaded with String... or Pattern...

Also note we can create and play with Checker without modifying the existing check... methods until we choose to do so.;;;","2021-09-03 08:22;prappo;I thought about checkOutput, but it has its own bag of issues. One of which is JDK-8270836. That issue lured to use checkOrdered, which then failed on unordered input.;;;","2021-09-03 08:31;jjg;Checker could either be an inner class of JavadocTester or it would need a reference to the instance of JavadocTester so could be created from factory methods in JavadocTester as in

    newChecker(file).setOrdered(false).check(args);;;;","2021-09-22 10:36;jjg;Comments and notes in javadoc TestSnippetTag.java

 * 1. Some of the below tests could benefit from using a combinatorics library
 * as they are otherwise very wordy.
 *
 * 2. One has to be careful when using JavadocTester.checkOutput with duplicating
 * strings. If JavadocTester.checkOutput(x) is true, then it will also be true
 * if x is passed to that method additionally N times: JavadocTester.checkOutput(x, x, ..., x).
 * This is because a single occurrence of x in the output will be matched N times.
 */
public class TestSnippetTag extends JavadocTester {
--
--
        ));
    }

    // TODO This is a temporary method; it should be removed after JavadocTester has provided similar functionality (JDK-8273154).
    private void checkOrder(Output output, String... strings) {
        String outputString = getOutput(output);
        int prevIndex = -1;
--
--
        checkExit(Exit.ERROR);
        // TODO
        //   In this and all similar tests check that there are no other errors, let alone errors related to {@snippet}
        //   To achieve that, we might need to change JavadocTester (i.e. add ""consume output"", ""check that the output is empty"", etc.)
        checkOutput(Output.OUT, true,
                    """"""
                    A.java:3: error: @snippet specifies multiple external contents, which is ambiguous"""""");
--
--
        checkNoCrashes();
    }

    // TODO: perhaps this method could be added to JavadocTester
    private void checkOutputEither(Output out, String first, String... other) {
        checking(""checkOutputEither"");
        String output = getOutput(out);;;;","2021-11-10 07:25;roboduke;Changeset: ce3ed65a
Author:    Jonathan Gibbons <jjg@openjdk.org>
Date:      2021-11-10 15:24:27 +0000
URL:       https://git.openjdk.java.net/jdk/commit/ce3ed65ac3411a533052a8c01231f7e540803afb
;;;","2023-01-12 08:48;goetz;Fix request [17u]

I backport this for parity with 17.0.7-oracle.
No risk, only a test change.
Clean backport.
Test passes. SAP nightly testing passed.;;;","2023-01-12 09:04;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/1063
Date: 2023-01-12 16:55:29 +0000;;;",,,,,,,,,,,,,,,,
"Revert ""8225083: Remove Google certificate that is expiring in December 2021""",JDK-8273150,5057704,Bug,Resolved,JDK,JDK,software,duke,,,P2,Fixed,rhalade,rhalade,rhalade,2021-08-30 09:21,2021-10-11 10:35,2023-10-01 09:57,2021-09-02 08:43,17.0.1,,,,,,,17.0.2,security-libs,,0,18-na,cac-issue,cac-remv,hgupdate-sync,jdk17u-fix-request,jdk17u-fix-SQE-ok,jdk17u-fix-yes,,,,,,,,,,,,,,,"The removal of Google's GlobalSign root was pulled into 17.0.1 which is to be released in Oct 2021. But this root (""globalsignr2ca [jdk]"") doesn't expire until Dec 2021 so the fix should be backed out from 17.0.1. ",,,,,,,,,,,JDK-8273399,,,,,,,,,,,,,,,,,,,,,,,,JDK-8225083,,,,,JDK-8274215,,,,,,,,,,,,,,,,,,,,,,,,"0|i2u76b:",9223372036854775807,b01,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@2ec284e3,,,,,,,,,"2021-08-30 14:39;rhalade;Fix Request (17u):
This is a low risk data only change to revert removal of expired root certificate from cacerts file. The fix has the regression test update with it and applies cleanly for jdk17u.
https://github.com/openjdk/jdk17u/pull/45;;;","2021-09-02 08:43;roboduke;Changeset: 3623ea69
Author:    Rajan Halade <rhalade@openjdk.org>
Date:      2021-09-02 15:41:58 +0000
URL:       https://git.openjdk.java.net/jdk17u/commit/3623ea697de88fcb08c7dbb1304d9cf2d77fffe1
;;;","2021-09-02 08:45;rhalade;[~robm] can you please pull this in for 17.0.1 release?;;;",,,,,,,,,,,,,,,,,,,,,,,
Start of release updates for JDK 19,JDK-8273146,5057700,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,darcy,darcy,darcy,2021-08-30 08:44,2022-04-13 17:30,2023-10-01 09:57,2021-12-09 09:04,,,,,,,,19,core-libs,,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8267630,,,,,JDK-8277518,JDK-8284858,,,,,,,,,,,,,,,,,,,,,,,"0|i2u75f:",9223372036854775807,b01,,,,,,,,,,,,"2021-12-09 09:04;roboduke;Changeset: 09831e7a
Author:    Joe Darcy <darcy@openjdk.org>
Committer: Jesper Wilhelmsson <jwilhelm@openjdk.org>
Date:      2021-12-09 17:01:59 +0000
URL:       https://git.openjdk.java.net/jdk/commit/09831e7aa47ebe41eab2f3014ebbacf338097ef6
;;;",,,,,,,,,,,,,,,,,,,,,,,,,
"Remove dependancy of TestHttpServer, HttpTransaction, HttpCallback from open/test/jdk/sun/net/www/protocol/http/ tests",JDK-8273142,5057696,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,mchhipa,mchhipa,mchhipa,2021-08-30 08:12,2022-04-01 01:58,2023-10-01 09:57,2021-09-30 04:30,,,,,,,,18,core-libs,,0,7-wnf,jdk17u-fix-request,jdk17u-fix-yes,noreg-self,testbug,,,,,,,,,,,,,,,,,"There are some regression tests depending on TestHttpsServer. internal API dependency should be removed from tests:

open/test/jdk/sun/net/www/protocol/http/ResponseCacheStream.java
open/test/jdk/sun/net/www/protocol/http/SetChunkedStreamingMode.java
open/test/jdk/sun/net/www/protocol/http/RelativeRedirect.java
open/test/jdk/sun/net/www/protocol/http/B6296310.java

",,,,,,,,,,,JDK-8284158,JDK-8284070,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2u74j:",9223372036854775807,b18,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@446e124a,,,,,,,,,"2021-09-30 04:30;roboduke;Changeset: 2f955d6f
Author:    Mahendra Chhipa <mahendra.chhipa@oracle.com>
Committer: Michael McMahon <michaelm@openjdk.org>
Date:      2021-09-30 11:29:20 +0000
URL:       https://git.openjdk.java.net/jdk/commit/2f955d6f5ba15fc2c06eaf683d1ffa3ade97521b
;;;","2022-03-31 08:24;mdoerr;Fix Request (17u):
Should get backported for parity with 17.0.4-oracle. Applies cleanly. Tests have passed.;;;","2022-03-31 08:30;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk17u-dev/pull/323
Date: 2022-03-31 15:26:22 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,
C2: assert(f <= 1 && f >= 0) failed: Incorrect frequency,JDK-8273139,5057692,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,epeter,chagedorn,chagedorn,2021-08-30 06:31,2022-07-25 03:16,2023-10-01 09:57,2022-01-19 03:49,17,18,19,,,,,19,hotspot,,0,c2,hs-comp-triaged,javafuzzer,jdk17u-fix-request,jdk17u-fix-yes,jdk18u-fix-request,jdk18u-fix-SQE-OK,jdk18u-fix-yes,oracle-triage-11,oracle-triage-18,starter,,,,,,,,,,,"The attached testcase fails with the following assertion:

To reproduce:
$ java -Xcomp -XX:CompileOnly=Test Test.java
$ java -Xcomp -XX:CompileOnly=Reduced Reduced.java

#
# A fatal error has been detected by the Java Runtime Environment:
#
#  Internal Error (/opt/mach5/mesos/work_dir/slaves/ff806ead-2cac-495d-9cbc-62116f99bf14-S13890/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/e1985841-cb1f-4767-b2e4-927825614993/runs/9fce6d83-2b2c-4178-b4c4-97cbe003ff2d/workspace/open/src/hotspot/share/opto/loopPredicate.cpp:888), pid=18540, tid=18553
#  assert(f <= 1 && f >= 0) failed: Incorrect frequency
#
# JRE version: Java(TM) SE Runtime Environment (17.0+35) (fastdebug build 17+35-LTS-2724)
# Java VM: Java HotSpot(TM) 64-Bit Server VM (fastdebug 17+35-LTS-2724, compiled mode, sharing, tiered, compressed oops, compressed class ptrs, g1 gc, linux-amd64)
# Problematic frame:
# V  [libjvm.so+0x12df66d]  PathFrequency::to(Node*)+0xc2d
..........
Command Line: -Xmx1G -Xcomp -Xbatch -XX:CompileOnly=Test -XX:CompileCommand=quiet Test
..........
Current thread (0x00007fa02c4821a0):  JavaThread ""C2 CompilerThread0"" daemon [_thread_in_native, id=18553, stack(0x00007fa0056ff000,0x00007fa005800000)]


Current CompileTask:
C2:   1524   71   !b  4       Test::mainTest (2044 bytes)

Stack: [0x00007fa0056ff000,0x00007fa005800000],  sp=0x00007fa0057f9d60,  free space=1003k
Native frames: (J=compiled Java code, j=interpreted, Vv=VM code, C=native code)
V  [libjvm.so+0x12df66d]  PathFrequency::to(Node*)+0xc2d
V  [libjvm.so+0x12da934]  PhaseIdealLoop::loop_predication_follow_branches(Node*, IdealLoopTree*, float, PathFrequency&, Node_Stack&, VectorSet&, Node_List&)+0x574
V  [libjvm.so+0x12dbd12]  PhaseIdealLoop::loop_predication_impl(IdealLoopTree*) [clone .part.0]+0x1192
V  [libjvm.so+0x12dc259]  IdealLoopTree::loop_predication(PhaseIdealLoop*)+0x109
V  [libjvm.so+0x12dc195]  IdealLoopTree::loop_predication(PhaseIdealLoop*)+0x45
V  [libjvm.so+0x12dc195]  IdealLoopTree::loop_predication(PhaseIdealLoop*)+0x45
V  [libjvm.so+0x12dc178]  IdealLoopTree::loop_predication(PhaseIdealLoop*)+0x28
V  [libjvm.so+0x12dc195]  IdealLoopTree::loop_predication(PhaseIdealLoop*)+0x45
V  [libjvm.so+0x12dc195]  IdealLoopTree::loop_predication(PhaseIdealLoop*)+0x45
V  [libjvm.so+0x12dc195]  IdealLoopTree::loop_predication(PhaseIdealLoop*)+0x45
V  [libjvm.so+0x132487f]  PhaseIdealLoop::build_and_optimize(LoopOptsMode)+0x11cf
V  [libjvm.so+0xa377da]  PhaseIdealLoop::optimize(PhaseIterGVN&, LoopOptsMode)+0x2da
V  [libjvm.so+0xa340f5]  Compile::Optimize()+0x14f5
V  [libjvm.so+0xa35c78]  Compile::Compile(ciEnv*, ciMethod*, int, bool, bool, bool, bool, bool, DirectiveSet*)+0x1618
V  [libjvm.so+0x84b116]  C2Compiler::compile_method(ciEnv*, ciMethod*, int, bool, DirectiveSet*)+0x646
V  [libjvm.so+0xa45cc1]  CompileBroker::invoke_compiler_on_method(CompileTask*)+0xb71
V  [libjvm.so+0xa46968]  CompileBroker::compiler_thread_loop()+0x5a8
V  [libjvm.so+0x18dca01]  JavaThread::thread_main_inner()+0x271
V  [libjvm.so+0x18e3ff0]  Thread::call_run()+0x100
V  [libjvm.so+0x15a9cf4]  thread_native_entry(Thread*)+0x104",,,,,,,,,,,JDK-8280855,JDK-8281990,JDK-8281189,JDK-8283171,,,,,,,,,,,,,,,,,,,,,JDK-8268184,,,,,,,,,,"2021-08-30 06:31;chagedorn;FuzzerUtils.java;https://bugs.openjdk.org/secure/attachment/96282/FuzzerUtils.java","2021-10-06 06:35;chagedorn;Reduced.java;https://bugs.openjdk.org/secure/attachment/96663/Reduced.java","2021-08-30 06:31;chagedorn;Test.java;https://bugs.openjdk.org/secure/attachment/96284/Test.java","2021-08-30 06:31;chagedorn;hs_err_pid18540.log;https://bugs.openjdk.org/secure/attachment/96283/hs_err_pid18540.log",,,,,,,,b13,17,,,,,,,"0|i2u73n:",9223372036854775807,b07,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2021-08-30 06:34;chagedorn;ILW = Assertion failure in C2 loop predication likely due to some rounding errors (should be harmless in product), only with single JavaFuzzer test, disable compilation of affected method or use -XX:-UseLoopPredicate = HLM = P3;;;","2022-01-17 00:57;epeter;Bug does not manifest any more since change 83b2219220266c1365466970d08606fef766c4fa.
However, it is still there, just does not get triggered any more.
The bug is caused by incorrect rounding (many float operations are not rounded properly). The exact ""f <= 1"" check can fail in some occasions, if the sum of probabilities slightly exceeds 1, due to these rounding issues.;;;","2022-01-18 00:07;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/7113
Date: 2022-01-17 14:27:48 +0000;;;","2022-01-19 03:49;roboduke;Changeset: 68b40ec2
Author:    Emanuel Peter <emanuel.peter@oracle.com>
Committer: Tobias Hartmann <thartmann@openjdk.org>
Date:      2022-01-19 11:47:17 +0000
URL:       https://git.openjdk.java.net/jdk/commit/68b40ec28658a2dd829c77281b0025e16095c170
;;;","2022-02-01 02:26;thartmann;Fix Request (JDK 18u)
The fix has already been backported to JDK 17u and should be backported to JDK 18u as well to avoid a regression. The fix is low risk and applies cleanly. It has been tested manually with tier1-3 and in the JDK 17u and JDK 19 CI.;;;","2022-02-01 02:34;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk18u/pull/14
Date: 2022-02-01 10:27:20 +0000;;;","2022-03-14 08:12;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk17u-dev/pull/252
Date: 2022-03-14 15:05:38 +0000;;;","2022-03-15 02:46;mdoerr;Fix Request (17u):
Should get backported for parity with 17.0.4-oracle. Applies cleanly. Nightly tests have passed.
;;;",,,,,,,,,,,,,,,,,,
BidirectionalBinding fails to observe changes of invalid properties,JDK-8273138,5057691,Bug,Resolved,JDK,JDK,software,duke,,,P2,Fixed,mstrauss,mstrauss,mstrauss,2021-08-30 06:29,2021-09-18 07:02,2023-10-01 09:57,2021-09-08 03:57,jfx17,,,,,,,jfx18,javafx,,0,regression,regression_8264770,,,,,,,,,,,,,,,,,,,,BidirectionalBinding sometimes fails to observe changes of invalid properties because it doesn't validate the target property of the change.,,,,,,,,,,,JDK-8273848,,,,,,,,,,,,,,,,,,,,,,,,JDK-8264770,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2u73f:",9223372036854775807,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@233f6319,,,,,,,,,"2021-09-01 07:26;mstrauss;Can we get this fix in for jfx17? We would otherwise risk applications potentially breaking, and having to wait until jfx18 to have a fix.;;;","2021-09-01 08:35;kcr;It is too late for jfx17, since we are past code freeze (only P1 release stoppers at this point). This seems a good candidate for 17.0.1, though.;;;","2021-09-08 03:57;roboduke;Changeset: 26d6438e
Author:    Michael Strauß <mstrauss@openjdk.org>
Committer: Nir Lisker <nlisker@openjdk.org>
Date:      2021-09-08 10:56:10 +0000
URL:       https://git.openjdk.java.net/jfx/commit/26d6438ea267d703039facac7dab67175b863b46
;;;",,,,,,,,,,,,,,,,,,,,,,,
java/awt/color/ICC_ColorSpace/MTTransformReplacedProfile.java crashes in liblcms.dylib with NULLSeek+0x7,JDK-8273135,5057688,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,serb,tschatzl,tschatzl,2021-08-30 05:26,2021-09-29 15:31,2023-10-01 09:57,2021-09-14 23:19,18,,,,,,,18,client-libs,,0,jdk17u-fix-request,jdk17u-fix-yes,tier3,,,,,,,,,,,,,,,,,,,"----------System.out:(119/4461)----------
#
# A fatal error has been detected by the Java Runtime Environment:
#
#  SIGSEGV (0xb) at pc=0x0000000105870277, pid=90914, tid=31747
#
# JRE version: Java(TM) SE Runtime Environment (18.0+13) (build 18-ea+13-643)
# Java VM: Java HotSpot(TM) 64-Bit Server VM (18-ea+13-643, mixed mode, sharing, tiered, compressed oops, compressed class ptrs, g1 gc, bsd-amd64)
# Problematic frame:
# C  [liblcms.dylib+0x24277]  NULLSeek+0x7
#
# Core dump will be written. Default location: core.90914
#
# An error report file with more information is saved as:
# /System/Volumes/Data/mesos/work_dir/slaves/ff806ead-2cac-495d-9cbc-62116f99bf14-S30740/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/43a0319a-e888-449c-8658-0119f1057e7d/runs/3e650a97-7ff5-4469-bdad-143b0eae32b0/testoutput/test-support/jtreg_open_test_jdk_jdk_desktop/java/awt/color/ICC_ColorSpace/MTTransformReplacedProfile/hs_err_pid90914.log

",,,,,,,,,,,JDK-8274526,,,,,,,,,,,,,,,,,,,,,,,,JDK-8273887,,,,,JDK-8271718,,,,,,,,,,x86_64,,,,,,,,,linux,os_x,,,,"0|i2u72r:",9223372036854775807,b15,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4b09ce31,,,,,,,,,"2021-08-30 09:36;prr;This is a brand new test introduced by the fix for
8271718: Crash when during color transformation the color profile is replaced
So it seems like there's still a problem.;;;","2021-08-30 10:04;prr;#
# A fatal error has been detected by the Java Runtime Environment:
#
#  SIGSEGV (0xb) at pc=0x0000000105870277, pid=90914, tid=31747
#
# JRE version: Java(TM) SE Runtime Environment (18.0+13) (build 18-ea+13-643)
# Java VM: Java HotSpot(TM) 64-Bit Server VM (18-ea+13-643, mixed mode, sharing, tiered, compressed oops, compressed class ptrs, g1 gc, bsd-amd64)
# Problematic frame:
# C  [liblcms.dylib+0x24277]  NULLSeek+0x7
#
# Core dump will be written. Default location: core.90914
#
# An error report file with more information is saved as:
# java/awt/color/ICC_ColorSpace/MTTransformReplacedProfile/hs_err_pid90914.log
[thread 55811 also had an error]
[thread 70659 also had an error]
[thread 69891 also had an error]
[thread 56067 also had an error]
[thread 56579 also had an error]
[thread 56835 also had an error]
[thread 57091 also had an error]
[thread 57347 also had an error]
[thread 57859 also had an error]
[thread 68611 also had an error]
[thread 58627 also had an error]
[thread 59139 also had an error]
[thread 68355 also had an error]
[thread 67843 also had an error]
[thread 67075 also had an error]
[thread 60419 also had an error]
[thread 66307 also had an error]
[thread 60675 also had an error]
[thread 65795 also had an error]
[thread 65283 also had an error]
[thread 61443 also had an error]
[thread 61699 also had an error]
[thread 64771 also had an error]
[thread 63235 also had an error]
[thread 62979 also had an error]
[thread 87555 also had an error]
[thread 88067 also had an error]
[thread 130563 also had an error]
[thread 88579 also had an error]
[thread 89091 also had an error]
[thread 128515 also had an error]
[thread 89347 also had an error]
[thread 127747 also had an error]
[thread 127235 also had an error]
[thread 126723 also had an error]
[thread 126467 also had an error]
[thread 89859 also had an error]
[thread 90115 also had an error]
[thread 125699 also had an error]
[thread 90883 also had an error]
[thread 91395 also had an error]
[thread 91907 also had an error]
[thread 92675 also had an error]
[thread 92419 also had an error]
[thread 92931 also had an error]
[thread 124675 also had an error]
[thread 93187 also had an error]
[thread 93443 also had an error]
[thread 93699 also had an error]
[thread 122883 also had an error]
[thread 123395 also had an error]
[thread 122371 also had an error]
[thread 94211 also had an error]
[thread 122115 also had an error]
[thread 94723 also had an error]
[thread 96515 also had an error]
[thread 96771 also had an error]
[thread 97027 also had an error]
[thread 119555 also had an error]
[thread 97539 also had an error]
[thread 119299 also had an error]
[thread 118531 also had an error]
[thread 97795 also had an error]
[thread 118019 also had an error]
[thread 98563 also had an error]
[thread 99331 also had an error]
[thread 99843 also had an error]
[thread 100099 also had an error]
[thread 100355 also had an error]
[thread 116995 also had an error]
[thread 116483 also had an error]
[thread 101123 also had an error]
[thread 101635 also had an error]
[thread 102147 also had an error]
[thread 102403 also had an error]
[thread 104195 also had an error]
[thread 104451 also had an error]
[thread 114179 also had an error]
[thread 113155 also had an error]
[thread 113667 also had an error][thread 112899 also had an error]

[thread 112643 also had an error]
[thread 113411 also had an error]
[thread 112387 also had an error]
[thread 111875 also had an error]
[thread 105987 also had an error]
[thread 106755 also had an error]
[thread 111363 also had an error]
[thread 107267 also had an error]
[thread 107779 also had an error]
[thread 108035 also had an error]
[thread 108291 also had an error]
[thread 108803 also had an error]
[thread 110339 also had an error]
[thread 109827 also had an error]
[thread 110083 also had an error]
[thread 131075 also had an error]
[thread 131331 also had an error]
[thread 131843 also had an error]
#
# If you would like to submit a bug report, please visit:
#   https://bugreport.java.com/bugreport/crash.jsp
# The crash happened outside the Java Virtual Machine in native code.
# See problematic frame for where to report the bug.
#

;;;","2021-09-02 21:50;serb;How often the bug is reproduced? Is it specific to the macOS only?;;;","2021-09-02 22:31;serb;Is it possible to attach the hs_err_pid12716.log file or the trace from the core dump?;;;","2021-09-03 11:17;serb;Was able to reproduce it on macOS using 10 tests executing in parallel for 8 hours:

Stack: [0x00007000177d8000,0x00007000178d8000],  sp=0x00007000178d6160,  free space=1016k
Native frames: (J=compiled Java code, j=interpreted, Vv=VM code, C=native code)
C  [liblcms.dylib+0x24150]  NULLSeek+0x30
C  [liblcms.dylib+0x266e8]  cmsReadTag+0x118
C  [liblcms.dylib+0x28a2e]  ReadICCMatrixRGB2XYZ+0x1e
C  [liblcms.dylib+0x27e14]  _cmsReadOutputLUT+0x234
C  [liblcms.dylib+0xeca9]  DefaultICCintents+0x2e9
C  [liblcms.dylib+0x4e5fb]  cmsCreateExtendedTransform+0x2db
C  [liblcms.dylib+0x4f165]  cmsCreateMultiprofileTransform+0x105
C  [liblcms.dylib+0x3e9f]  Java_sun_java2d_cmm_lcms_LCMS_createNativeTransform+0x23f
j  sun.java2d.cmm.lcms.LCMS.createNativeTransform([JIIZIZLjava/lang/Object;)J+0 java.desktop@18-internal
j  sun.java2d.cmm.lcms.LCMS.createTransform([Lsun/java2d/cmm/lcms/LCMSProfile;IIZIZLjava/lang/Object;)J+70 java.desktop@18-internal
j  sun.java2d.cmm.lcms.LCMSTransform.doTransform(Lsun/java2d/cmm/lcms/LCMSImageLayout;Lsun/java2d/cmm/lcms/LCMSImageLayout;)V+134 java.desktop@18-internal
j  sun.java2d.cmm.lcms.LCMSTransform.colorConvert([S[S)[S+92 java.desktop@18-internal
j  java.awt.color.ICC_ColorSpace.toRGB([F)[F+166 java.desktop@18-internal
j  MTTransformReplacedProfile.lambda$test$2(Ljava/util/concurrent/atomic/AtomicBoolean;Ljava/awt/color/ColorSpace;[F)V+15
j  MTTransformReplacedProfile$$Lambda$9+0x0000000800c03420.run()V+12
j  java.lang.Thread.run()V+11 java.base@18-internal
v  ~StubRoutines::call_stub
V  [libjvm.dylib+0x4f1779]  JavaCalls::call_helper(JavaValue*, methodHandle const&, JavaCallArguments*, JavaThread*)+0x299
V  [libjvm.dylib+0x4f07f7]  JavaCalls::call_virtual(JavaValue*, Klass*, Symbol*, Symbol*, JavaCallArguments*, JavaThread*)+0x147
V  [libjvm.dylib+0x4f08c3]  JavaCalls::call_virtual(JavaValue*, Handle, Klass*, Symbol*, Symbol*, JavaThread*)+0x63
V  [libjvm.dylib+0x599108]  thread_entry(JavaThread*, JavaThread*)+0x98
V  [libjvm.dylib+0xa3abdc]  JavaThread::thread_main_inner()+0xcc
V  [libjvm.dylib+0xa3911f]  Thread::call_run()+0xcf
V  [libjvm.dylib+0x867b88]  thread_native_entry(Thread*)+0x148
C  [libsystem_pthread.dylib+0x68fc]  _pthread_start+0xe0
C  [libsystem_pthread.dylib+0x2443]  thread_start+0xf

Java frames: (J=compiled Java code, j=interpreted, Vv=VM code)
j  sun.java2d.cmm.lcms.LCMS.createNativeTransform([JIIZIZLjava/lang/Object;)J+0 java.desktop@18-internal
j  sun.java2d.cmm.lcms.LCMS.createTransform([Lsun/java2d/cmm/lcms/LCMSProfile;IIZIZLjava/lang/Object;)J+70 java.desktop@18-internal
j  sun.java2d.cmm.lcms.LCMSTransform.doTransform(Lsun/java2d/cmm/lcms/LCMSImageLayout;Lsun/java2d/cmm/lcms/LCMSImageLayout;)V+134 java.desktop@18-internal
j  sun.java2d.cmm.lcms.LCMSTransform.colorConvert([S[S)[S+92 java.desktop@18-internal
j  java.awt.color.ICC_ColorSpace.toRGB([F)[F+166 java.desktop@18-internal
j  MTTransformReplacedProfile.lambda$test$2(Ljava/util/concurrent/atomic/AtomicBoolean;Ljava/awt/color/ColorSpace;[F)V+15
j  MTTransformReplacedProfile$$Lambda$9+0x0000000800c03420.run()V+12
j  java.lang.Thread.run()V+11 java.base@18-internal
v  ~StubRoutines::call_stub;;;","2021-09-03 11:18;serb;Something bad is occurred when we get a crash since in the common use case the NULLSeek method is not executed.;;;","2021-09-04 17:36;serb;Highly depends from the timings, can be reproduced more often by this command:

for n in {1..10000}; do  ./.../jdk/bin/java MTTransformReplacedProfile & echo $n ; done

But this can move the system to reboot.;;;","2021-09-04 17:45;serb;On linux:
C  [libc.so.6+0x18e6f7]
C  [liblcms.so+0x4ac70]  _cmsReadTypeBase+0x20
C  [liblcms.so+0x253aa]  cmsReadTag+0x1ba
C  [liblcms.so+0x2629e]  ReadICCMatrixRGB2XYZ+0x1e
C  [liblcms.so+0x26acc]  _cmsReadOutputLUT+0xac
C  [liblcms.so+0x125ff]  DefaultICCintents+0x39f
C  [liblcms.so+0x5fbe3]  cmsCreateExtendedTransform+0x2a3
C  [liblcms.so+0x6019c]  cmsCreateMultiprofileTransformTHR+0xfc
C  [liblcms.so+0x6022a]  cmsCreateMultiprofileTransform+0x5a
C  [liblcms.so+0x5abe]  Java_sun_java2d_cmm_lcms_LCMS_createNativeTransform+0x1ae
j  sun.java2d.cmm.lcms.LCMS.createNativeTransform([JIIZIZLjava/lang/Object;)J+0 java.desktop@18-internal
j  sun.java2d.cmm.lcms.LCMS.createTransform([Lsun/java2d/cmm/lcms/LCMSProfile;IIZIZLjava/lang/Object;)J+70 java.desktop@18-internal
j  sun.java2d.cmm.lcms.LCMSTransform.doTransform(Lsun/java2d/cmm/lcms/LCMSImageLayout;Lsun/java2d/cmm/lcms/LCMSImageLayout;)V+134 java.desktop@18-internal
j  sun.java2d.cmm.lcms.LCMSTransform.colorConvert([S[S)[S+92 java.desktop@18-internal
j  java.awt.color.ICC_ColorSpace.toRGB([F)[F+166 java.desktop@18-internal
j  MTTransformReplacedProfile.test([B[B[BI)V+77
j  MTTransformReplacedProfile.lambda$main$0(Ljava/awt/color/ICC_Profile;[B[BI)V+7
j  MTTransformReplacedProfile$$Lambda$7+0x0000000800c009f0.run()V+16
j  java.lang.Thread.run()V+11 java.base@18-internal
v  ~StubRoutines::call_stub
V  [libjvm.so+0x807a35]  JavaCalls::call_helper(JavaValue*, methodHandle const&, JavaCallArguments*, JavaThread*)+0x325
V  [libjvm.so+0x80937b]  JavaCalls::call_virtual(JavaValue*, Handle, Klass*, Symbol*, Symbol*, JavaThread*)+0x1db
V  [libjvm.so+0x8caa4e]  thread_entry(JavaThread*, JavaThread*)+0x8e
V  [libjvm.so+0xe54712]  JavaThread::thread_main_inner()+0xc2
V  [libjvm.so+0xe58764]  Thread::call_run()+0xc4
V  [libjvm.so+0xbf1ff9]  thread_native_entry(Thread*)+0xe9;;;","2021-09-05 00:46;serb;Reported to the upstream LCMS:
https://github.com/mm2/Little-CMS/pull/278;;;","2021-09-14 23:19;roboduke;Changeset: 1017a2c2
Author:    Sergey Bylokhov <serb@openjdk.org>
Date:      2021-09-15 05:18:35 +0000
URL:       https://git.openjdk.java.net/jdk/commit/1017a2c2d7ae99e0076abcfaf5e730fec3cb9c6c
;;;","2021-09-28 14:11;serb;Fix request (17u)

This is request to backport the fix for the jvm crash. The patch applies cleanly.
PR: https://github.com/openjdk/jdk17u/pull/112;;;",,,,,,,,,,,,,,,
CountedLoopEndNode::stride_con crash in debug build with -XX:+TraceLoopOpts,JDK-8273115,5057667,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,roland,hshi,hshi,2021-08-29 22:09,2022-06-21 11:07,2023-10-01 09:57,2022-04-25 01:34,17,18,19,,,,,19,hotspot,,0,c2,hs-comp-triaged,jdk17u-fix-request,jdk17u-fix-yes,oracle-triage-11,oracle-triage-18,starter,,,,,,,,,,,,,,,"This crash happens for compiler.loopopts.TestMainNeverExecuted.java and compiler.c2.TestCMoveHasTopInput.java with -XX:+TraceLoopOpts. 

CountedLoopEnd's incr node expected be AddI, but is ConI, this causes crash when printing counted loop info with -XX:+TraceLoopOpts.

#  SIGSEGV (0xb) at pc=0x00002abc249ab2b8, pid=8589, tid=8606
#
# JRE version: OpenJDK Runtime Environment (18.0) (fastdebug build 18-internal+0-adhoc.shihui.jdkmaster)
# Java VM: OpenJDK 64-Bit Server VM (fastdebug 18-internal+0-adhoc.shihui.jdkmaster, compiled mode, sharing, compressed oops, compressed class ptrs, g1 gc, linux-amd64)
# Problematic frame:
# V  [libjvm.so+0x11412b8]  CountedLoopNode::stride_con() const+0x98
#
# No core dump will be written. Core dumps have been disabled. To enable core dumping, try ""ulimit -c unlimited"" before starting Java again
#
# If you would like to submit a bug report, please visit:
#   https://bugreport.java.com/bugreport/crash.jsp
#

Current CompileTask:
C2:    193    3    b        TestMainNeverExecuted::vMeth (106 bytes)

Stack: [0x00002abc3be06000,0x00002abc3bf07000],  sp=0x00002abc3bf01280,  free space=1004k
Native frames: (J=compiled Java code, j=interpreted, Vv=VM code, C=native code)
V  [libjvm.so+0x11412b8]  CountedLoopNode::stride_con() const+0x98
V  [libjvm.so+0x1146c4e]  IdealLoopTree::dump_head() const+0x3be
V  [libjvm.so+0x1146e04]  IdealLoopTree::dump() const+0x14
V  [libjvm.so+0x1146e25]  IdealLoopTree::dump() const+0x35
V  [libjvm.so+0x1146e25]  IdealLoopTree::dump() const+0x35
V  [libjvm.so+0x11580b9]  PhaseIdealLoop::build_and_optimize(LoopOptsMode)+0x9e9
V  [libjvm.so+0x935734]  PhaseIdealLoop::optimize(PhaseIterGVN&, LoopOptsMode)+0x1b4
V  [libjvm.so+0x932e06]  Compile::Optimize()+0xfe6
V  [libjvm.so+0x9343ae]  Compile::Compile(ciEnv*, ciMethod*, int, bool, bool, bool, bool, bool, DirectiveSet*)+0x132e
V  [libjvm.so+0x7875cd]  C2Compiler::compile_method(ciEnv*, ciMethod*, int, bool, DirectiveSet*)+0x12d
V  [libjvm.so+0x941e96]  CompileBroker::invoke_compiler_on_method(CompileTask*)+0xc56
V  [libjvm.so+0x9429b8]  CompileBroker::compiler_thread_loop()+0x468
V  [libjvm.so+0x178ccd7]  JavaThread::thread_main_inner()+0x2e7
V  [libjvm.so+0x178d00a]  JavaThread::run()+0x27a
V  [libjvm.so+0x1791d18]  Thread::call_run()+0xf8
V  [libjvm.so+0x1393e49]  thread_native_entry(Thread*)+0x109",,,,,,,,,,,JDK-8286107,JDK-8288860,,,,,,,,,,,,,,,,,,,,JDK-8277054,,,,,,,,JDK-8252372,,,,,"2022-03-24 06:51;tholenstein;Reproduce.java;https://bugs.openjdk.org/secure/attachment/98370/Reproduce.java",,,,,generic,,,,,,b24,17,,generic,,,,,"0|i2u6y3:",9223372036854775807,b20,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2021-08-29 23:34;chagedorn;Hi [~hshi], can you attach or show a failing testcase?;;;","2021-08-29 23:40;chagedorn;ILW = Crash while dumping a loop tree with debug flag TraceLoopOpts (does not affect product), single test? with TraceLoopOpts only, no workaround but disable TraceLoopOpts = MLM = P4;;;","2021-08-30 00:18;hshi;This can reproduce with existing testcases

make CONF=fastdebug run-test TEST=""test/hotspot/jtreg/compiler/c2/TestCMoveHasTopInput.java test/hotspot/jtreg/compiler/loopopts/TestMainNeverExecuted.java"" JTREG=""VM_OPTIONS=-XX:+TraceLoopOpts"";;;","2021-08-30 00:50;chagedorn;Ah, sorry I somehow missed that. Thanks!;;;","2021-11-03 02:44;chagedorn;Re-targeting to 19 as it only affects debug build. 

[~hshi] are you currently working on that or could it be reassigned?;;;","2022-03-08 06:15;tholenstein;was introduced by JDK-8252372;;;","2022-04-11 05:34;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/8178
Date: 2022-04-11 12:30:32 +0000;;;","2022-04-25 01:34;dukebot;Changeset: dc635844
Author:    Roland Westrelin <roland@openjdk.org>
Date:      2022-04-25 08:32:50 +0000
URL:       https://git.openjdk.java.net/jdk/commit/dc6358444b34a4861758a6b41aeebbe737345106
;;;","2022-06-09 00:43;goetz;Fix request [17u]

I backport this for parity with 17.0.5-oracle.
A C2 fix we should backport.
Clean backport.
SAP nightly testing passed.;;;","2022-06-09 00:50;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk17u-dev/pull/449
Date: 2022-06-09 07:43:13 +0000;;;","2022-06-21 00:21;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk18u/pull/154
Date: 2022-06-21 07:10:51 +0000;;;",,,,,,,,,,,,,,,
-Xloggc:<filename> should override -verbose:gc,JDK-8273112,5057663,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,xwlu,xwlu,xwlu,2021-08-29 20:29,2021-09-08 22:55,2023-10-01 09:57,2021-09-02 22:30,18,,,,,,,18,hotspot,,0,alibaba-interest,logging,,,,,,,,,,,,,,,,,,,,"According to java 16 specifications for java command (https://docs.oracle.com/en/java/javase/16/docs/specs/man/java.html), the command line option -Xloggc should override -verbose:gc if both options are given with the same java command. However, gc information still outputs to console even if gc log file is specified.
```
$java -Xloggc:gc.log -verbose:gc -version
[0.000s][warning][gc] -Xloggc is deprecated. Will use -Xlog:gc:gc.log instead.
[0.003s][info   ][gc] Using G1
$cat gc.log
[0.003s][info][gc] Using G1
```
As a result, we propose to put off the log configuration of -verbose:gc option until we are confident that there isn’t -Xloggc option.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,generic,,,,,,,,,generic,,,,,"0|i2u6x7:",9223372036854775807,b14,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,,,"2021-08-31 11:16;mseledtsov;ILW = MLM = P4;;;","2021-09-02 22:30;roboduke;Changeset: fa9c8657
Author:    Xiaowei Lu <lxw263044@alibaba-inc.com>
Committer: David Holmes <dholmes@openjdk.org>
Date:      2021-09-03 05:29:02 +0000
URL:       https://git.openjdk.java.net/jdk/commit/fa9c8657dfaa2018f501de1a8aa62f004342c245
;;;",,,,,,,,,,,,,,,,,,,,,,,,
runtime/cds/appcds/loaderConstraints/DynamicLoaderConstraintsTest times out,JDK-8273109,5057659,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,dcubed,dholmes,dholmes,2021-08-29 17:39,2021-09-13 14:33,2023-10-01 09:57,2021-09-08 11:34,18,,,,,,,18,hotspot,,0,cds,tier7,tier8,,,,,,,,,,,,,,,,,,,No obvious reason in log.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8273612,,,,,JDK-8273509,JDK-8273505,,,,,,,,,,,,,,,,,,,,,,,"0|i2u6wb:",9223372036854775807,b14,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,,,"2021-08-31 11:02;ccheung;The test was run with the following -Xcomp vmoptions in both tiers 7 and 8:
-Dtest.java.opts='-Xcomp -XX:+CreateCoredumpOnCrash -ea -esa -XX:CompileThreshold=100 -XX:+UnlockExperimentalVMOptions -server -XX:+TieredCompilation -XX:+DeoptimizeALot'

The test contains 2 sub-tests ""default-cl"" and ""custom-cl"".

Below are the timeout info obtained from the logs.

Tier7:
default-cl
(timeout set to 1200000ms, elapsed time including timeout handling was 1233491ms)
custom-cl
(timeout set to 1200000ms, elapsed time including timeout handling was 1301765ms)

Tier8:
(timeout set to 1200000ms, elapsed time including timeout handling was 1271090ms)
Custom-cl
(timeout set to 1200000ms, elapsed time including timeout handling was 1264831ms)

The test has a default timeout of 120s and was run with the timeout factor set to 10.
Increasing the timeout to 240s should hopefully fix the problem.;;;","2021-08-31 11:19;mseledtsov;ILW = MLM = P4;;;","2021-09-02 16:03;dcubed;[~ccheung] - has something changed recently that is causing these tests
to fail? It looks like they first showed up on 2021.08.28 in jdk-18+13-623-tier8...
And now they are showing up quite a bit in Tier7 and Tier8...;;;","2021-09-08 09:14;mseledtsov;This failure happens now every day. Re-evaluating the priority: MMM --> P3;;;","2021-09-08 11:20;dcubed;There are currently 17 sightings in Tier7 and Tier8. Here's my
analysis of those sightings:

jdk-18+13-623-tier8 macos-x64 -Xcomp default-cl timeout-passed@1271
jdk-18+13-623-tier8 macos-x64 -Xcomp custom-cl  timeout-failed@1264
jdk-18+13-640-tier7 linux-x64 -Xcomp default-cl timeout-passed@1233
jdk-18+13-640-tier7 linux-x64 -Xcomp custom-cl  timeout-failed@1301
jdk-18+13-642-tier8 macos-x64 -Xcomp custom-cl  timeout-passed@1292
jdk-18+13-659-tier8 macos-x64 -Xcomp default-cl timeout-failed@1274
jdk-18+13-659-tier8 macos-x64 -Xcomp custom-cl  timeout-failed@1275
jdk-18+13-659-tier8 macos-x64 -Xcomp custom-cl  timeout-failed@1358
jdk-18+13-677-tier7 linux-x64 -Xcomp default-cl timeout-passed@1279
jdk-18+13-677-tier7 linux-x64 -Xcomp custom-cl  timeout-failed@1307
jdk-18+13-677-tier7 linux-x64 -Xcomp custom-cl  timeout-passed@1234
jdk-18+14-692-tier7 linux-x64 -Xcomp custom-cl  timeout-passed@1262
jdk-18+14-700-tier8 macos-x64 -Xcomp custom-cl  timeout-passed@1303
jdk-18+14-700-tier8 macos-x64 -Xcomp custom-cl  timeout-failed@1295
jdk-18+14-714-tier8 macos-x64 -Xcomp default-cl timeout-failed@1306
jdk-18+14-714-tier8 macos-x64 -Xcomp custom-cl  timeout-failed@1269
jdk-18+14-723-tier7 linux-x64 -Xcomp default-cl timeout-passed@1307

A ""timeout-passed"" entry means that the test timed out, but passed while
the timeout handler was running.

A ""timeout-failed"" entry means that the test timed out, but did NOT pass
while the timeout handler was running.

There were previously 20 sightings in the JDK18 CI, but when I analyzed
those failures I figured out that the failure mode was different than a simple
timeout. Please see:

JDK-8273505 runtime/cds/appcds/loaderConstraints/DynamicLoaderConstraintsTest.java#default-cl crashed with SIGSEGV in MetaspaceShared::link_shared_classes

JDK-8273509 runtime/cds/appcds/loaderConstraints/DynamicLoaderConstraintsTest.java sub-tests fail with exitValue = 134

Since these timeout failure sightings are all with -Xcomp enabled, I think
that's why the timeoutFactor == 10. Based on my analysis of the above
data, I think we should bump the default timeout value for both of these
sub-tests from 120 to 180. That *should* give sufficient time for these
tests to pass when -Xcomp is enabled.;;;","2021-09-08 11:26;dcubed;Here's the context diff for a proposed fix:

$ git diff
diff --git a/test/hotspot/jtreg/runtime/cds/appcds/loaderConstraints/DynamicLoaderConstraintsTest.java b/test/hotspot/jtreg/runtime/cds/appcds/loaderConstraints/DynamicLoaderConstraintsTest.java
index 1a7ea7ca2dd..95edc901a35 100644
--- a/test/hotspot/jtreg/runtime/cds/appcds/loaderConstraints/DynamicLoaderConstraintsTest.java
+++ b/test/hotspot/jtreg/runtime/cds/appcds/loaderConstraints/DynamicLoaderConstraintsTest.java
@@ -33,7 +33,7 @@
  *          jdk.httpserver
  * @build sun.hotspot.WhiteBox
  * @run driver jdk.test.lib.helpers.ClassFileInstaller sun.hotspot.WhiteBox
- * @run main/othervm -XX:+UnlockDiagnosticVMOptions -XX:+WhiteBoxAPI -Xbootclasspath/a:. DynamicLoaderConstraintsTest
+ * @run main/othervm/timeout=180 -XX:+UnlockDiagnosticVMOptions -XX:+WhiteBoxAPI -Xbootclasspath/a:. DynamicLoaderConstraintsTest
  */
 
 /**
@@ -49,7 +49,7 @@
  *          jdk.httpserver
  * @build sun.hotspot.WhiteBox
  * @run driver jdk.test.lib.helpers.ClassFileInstaller sun.hotspot.WhiteBox
- * @run main/othervm -XX:+UnlockDiagnosticVMOptions -XX:+WhiteBoxAPI -Xbootclasspath/a:. DynamicLoaderConstraintsTest custom
+ * @run main/othervm/timeout=180 -XX:+UnlockDiagnosticVMOptions -XX:+WhiteBoxAPI -Xbootclasspath/a:. DynamicLoaderConstraintsTest custom
  */
 
 import com.sun.net.httpserver.HttpExchange;;;;","2021-09-08 11:34;roboduke;Changeset: ba31eee4
Author:    Daniel D. Daugherty <dcubed@openjdk.org>
Date:      2021-09-08 18:33:04 +0000
URL:       https://git.openjdk.java.net/jdk/commit/ba31eee4fc92bba3657e5f3fec2b85f55120d7a1
;;;","2021-09-09 09:09;dcubed;The fix for this test is in jdk-18+14-755.;;;",,,,,,,,,,,,,,,,,,
RunThese24H crashes with SEGV in markWord::displaced_mark_helper() after JDK-8268276,JDK-8273108,5057658,Bug,Closed,JDK,JDK,software,duke,,,P2,Fixed,sgibbons,dholmes,dholmes,2021-08-29 17:32,2022-11-11 07:05,2023-10-01 09:57,2021-12-12 08:09,17,18,,,,,,18,hotspot,,0,intermittent,jdk17u-fix-request,jdk17u-fix-yes,oracle-triage-11,oracle-triage-17,oracle-triage-18,test-bigapps-runThese,tier3,tier7,tier8,,,,,,,,,,,,"#
# A fatal error has been detected by the Java Runtime Environment:
#
#  SIGSEGV (0xb) at pc=0x00007f30dce9d694, pid=17690, tid=22854
#
# JRE version: Java(TM) SE Runtime Environment (18.0+12) (build 18-ea+12-613)
# Java VM: Java HotSpot(TM) 64-Bit Server VM (18-ea+12-613, mixed mode, sharing, tiered, compressed oops, compressed class ptrs, g1 gc, linux-amd64)
# Problematic frame:
# V  [libjvm.so+0xaf2694]  markWord::displaced_mark_helper() const+0x14
#",,,,,,,,,,,JDK-8278648,JDK-8296755,JDK-8296893,,,,,,,,,,,,,,,,,,,JDK-8275427,JDK-8275203,,JDK-8276613,,,,,JDK-8268276,JDK-8272809,,,,"2021-12-09 03:22;chagedorn;Reproducer.java;https://bugs.openjdk.org/secure/attachment/97312/Reproducer.java",,,,,,,,,,,,,,,,,,,"0|i2u6w3:",9223372036854775807,b28,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,Verified,,"2021-08-31 11:23;hseigel;ILW = HLM = p3;;;","2021-08-31 16:05;dcubed;Here's the crashing thread's stack for the jdk-18+12-580-tier8 sighting:

---------------  T H R E A D  ---------------

Current thread (0x00007f2e480ca810):  GCTaskThread ""GC Thread#6"" [stack: 0x00007f2dda963000,0x00007f2ddaa63000] [id=11445]

Stack: [0x00007f2dda963000,0x00007f2ddaa63000],  sp=0x00007f2ddaa61980,  free space=1018k
Native frames: (J=compiled Java code, j=interpreted, Vv=VM code, C=native code)
V  [libjvm.so+0x13d19b0]  markWord::displaced_mark_helper() const+0x60
V  [libjvm.so+0xcac6ec]  G1ParScanThreadState::do_copy_to_survivor_space(G1HeapRegionAttr, oop, markWord)+0x2cc
V  [libjvm.so+0xcb18e0]  void G1ParScanThreadState::do_oop_evac<narrowOop>(narrowOop*)+0xd0
V  [libjvm.so+0xcad6f3]  G1ParScanThreadState::trim_queue_to_threshold(unsigned int)+0x343
V  [libjvm.so+0xcada07]  G1ParScanThreadState::steal_and_trim_queue(GenericTaskQueueSet<OverflowTaskQueue<ScannerTask, (MEMFLAGS)5, 131072u>, (MEMFLAGS)5>*)+0x277
V  [libjvm.so+0xc22de7]  G1ParEvacuateFollowersClosure::do_void()+0x157
V  [libjvm.so+0xc2c1a8]  G1EvacuateRegionsBaseTask::evacuate_live_objects(G1ParScanThreadState*, unsigned int, G1GCPhaseTimes::GCParPhases, G1GCPhaseTimes::GCParPhases)+0x98
V  [libjvm.so+0xc24d36]  G1EvacuateRegionsBaseTask::work(unsigned int)+0x66
V  [libjvm.so+0x19e13a5]  GangWorker::run_task(WorkData)+0x85
V  [libjvm.so+0x19e14e4]  GangWorker::loop()+0x44
V  [libjvm.so+0x19e153a]
V  [libjvm.so+0x1885e80]  Thread::call_run()+0x100
V  [libjvm.so+0x1565284]  thread_native_entry(Thread*)+0x104


siginfo: si_signo: 11 (SIGSEGV), si_code: 128 (SI_KERNEL), si_addr: 0x0000000000000000
;;;","2021-08-31 16:07;dcubed;Here's the crashing thread's stack for the jdk-18+12-613-tier8 sighting:

---------------  T H R E A D  ---------------

Current thread (0x00007f2fe8656e00):  JavaThread ""javasoft.sqe.tests.api.javax.print.PrintService.hashCodeTests "" daemon [_thread_in_vm, id=22854, stack(0x00007f2ea5dfe000,0x00007f2ea5eff000)]

Stack: [0x00007f2ea5dfe000,0x00007f2ea5eff000],  sp=0x00007f2ea5efc4e8,  free space=1017k
Native frames: (J=compiled Java code, j=interpreted, Vv=VM code, C=native code)
V  [libjvm.so+0xaf2694]  markWord::displaced_mark_helper() const+0x14
V  [libjvm.so+0xced941]  ObjectSynchronizer::enter(Handle, BasicLock*, JavaThread*)+0xc1
V  [libjvm.so+0xc57acb]  SharedRuntime::complete_monitor_locking_C(oopDesc*, BasicLock*, JavaThread*)+0x6b

Java frames: (J=compiled Java code, j=interpreted, Vv=VM code)
v  ~RuntimeStub::_complete_monitor_locking_Java
J 1272960 c2 java.util.ConcurrentModificationException.<init>()V java.base@18-ea (5 bytes) @ 0x00007f30c87a36f8 [0x00007f30c87a32c0+0x0000000000000438]
J 1273319% c2 javax.print.PrintServiceLookup.lookupDefaultPrintService()Ljavax/print/PrintService; java.desktop@18-ea (46 bytes) @ 0x00007f30c5521828 [0x00007f30c5521760+0x00000000000000c8]
j  javasoft.sqe.tests.api.javax.print.PrintService.hashCodeTests.hashCode001()Ljavasoft/sqe/javatest/Status;+0
v  ~StubRoutines::call_stub
J 2610  jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Ljava/lang/reflect/Method;Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/Object; java.base@18-ea (0 bytes) @ 0x00007f30c53976bf [0x00007f30c5397640+0x000000000000007f]
J 1147161 c2 jdk.internal.reflect.NativeMethodAccessorImpl.invoke(Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/Object; java.base@18-ea (137 bytes) @ 0x00007f30c9803758 [0x00007f30c98036e0+0x0000000000000078]
J 1145644 c2 jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/Object; java.base@18-ea (10 bytes) @ 0x00007f30c5407ef4 [0x00007f30c5407ea0+0x0000000000000054]
J 1145801 c2 java.lang.reflect.Method.invoke(Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/Object; java.base@18-ea (65 bytes) @ 0x00007f30c56fe084 [0x00007f30c56fe000+0x0000000000000084]
j  javasoft.sqe.javatest.lib.MultiTest.invokeTestCase(Ljava/lang/reflect/Method;)Ljavasoft/sqe/javatest/Status;+8
j  javasoft.sqe.javatest.lib.MultiTest.run([Ljava/lang/String;Ljava/io/PrintWriter;Ljava/io/PrintWriter;)Ljavasoft/sqe/javatest/Status;+139
j  javasoft.sqe.javatest.lib.MultiTest.run([Ljava/lang/String;Ljava/io/PrintStream;Ljava/io/PrintStream;)Ljavasoft/sqe/javatest/Status;+40
j  javasoft.sqe.tests.api.javax.print.PrintService.hashCodeTests.main([Ljava/lang/String;)V+16
v  ~StubRoutines::call_stub
J 2610  jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Ljava/lang/reflect/Method;Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/Object; java.base@18-ea (0 bytes) @ 0x00007f30c53976bf [0x00007f30c5397640+0x000000000000007f]
J 1147161 c2 jdk.internal.reflect.NativeMethodAccessorImpl.invoke(Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/Object; java.base@18-ea (137 bytes) @ 0x00007f30c9803758 [0x00007f30c98036e0+0x0000000000000078]
J 1145644 c2 jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/Object; java.base@18-ea (10 bytes) @ 0x00007f30c5407ef4 [0x00007f30c5407ea0+0x0000000000000054]
J 1168081 c1 applications.kitchensink.process.stress.modules.JckStressModule$TestRunner$1.run()V (127 bytes) @ 0x00007f30c364fc1c [0x00007f30c364faa0+0x000000000000017c]
v  ~StubRoutines::call_stub

siginfo: si_signo: 11 (SIGSEGV), si_code: 128 (SI_KERNEL), si_addr: 0x0000000000000000;;;","2021-08-31 17:59;dholmes;The SI_KERNEL here is very suspect. There is another bug that also shows SI_KERNEL SEGVs  - JDK-8272809.;;;","2021-09-14 21:31;dholmes;But now also seen on Windows, so not an SI_KERNEL issue.;;;","2021-09-16 06:07;coleenp;(gdb) print old
$11 = {_o = 0x2a2aab478}
(gdb) x /g 0x2a2aab478
0x2a2aab478:	0x7878787878787878
0x2a2aab480:	0x0000000400001240
0x2a2aab488:	0xffe0f8554821afba
0x2a2aab490:	0x4821972effe0f847

The old_mark passed in is also 0x7878 etc.
But the klass looks ok.

(gdb) print *klass
$5 = {<Metadata> = {<MetaspaceObj> = {}, _vptr.Metadata = 0x800000728, _valid = 0}, _layout_helper = -2146431998, 
  _id = ObjArrayKlassID, _vtable_len = 5, _super_check_offset = 64, _name = 0x800490a80, 
  _secondary_super_cache = 0x800001678, _secondary_supers = 0x80060f200, _primary_supers = {0x800000e18, 0x800001240, 
    0x0, 0x0, 0x0, 0x0, 0x0, 0x0}, _java_mirror = {_obj = 0x7f2eb01309d0}, _super = 0x800000e18, _subklass = 0x0, 
  _next_sibling = 0x800002840, _next_link = 0x800000e18, _class_loader_data = 0x7f2eb01145d0, _modifier_flags = 1041, 
  _access_flags = {_flags = -2113929216}, _trace_id = 13898241, _shared_class_path_index = -1, 
  _shared_class_flags = 0, _archived_mirror_index = -1}
(gdb) print *klass->_next_link
$6 = {<Metadata> = {<MetaspaceObj> = {}, _vptr.Metadata = 0x8000000d0, _valid = 0}, _layout_helper = 16, 
  _id = InstanceKlassID, _vtable_len = 5, _super_check_offset = 56, _name = 0x80048a068, _secondary_super_cache = 0x0, 
  _secondary_supers = 0x80060f218, _primary_supers = {0x800000e18, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0}, _java_mirror = {
    _obj = 0x7f2eb01309c8}, _super = 0x0, _subklass = 0x80128f7c8, _next_sibling = 0x0, _next_link = 0x0, 
  _class_loader_data = 0x7f2eb01145d0, _modifier_flags = 1, _access_flags = {_flags = 589299745}, 
  _trace_id = 13834757, _shared_class_path_index = 0, _shared_class_flags = 8, _archived_mirror_index = -1};;;","2021-10-05 15:22;dcubed;Here's log file snippets from the jdk-18+18-1044-tier8 sighting:

[stress.process.out] [40248.351s][info ][class,unload] unloading class javasoft.sqe.javatest.Test 0x0000000803f7b000
[stress.process.out] [40248.411s][info ][gc          ] GC(3586) Pause Remark 535M->535M(1440M) 72.665ms
[stress.process.out] [40248.603s][info ][gc          ] GC(3586) Pause Cleanup 611M->611M(1440M) 0.218ms
[stress.process.out] [40248.628s][info ][gc          ] GC(3586) Concurrent Mark Cycle 608.697ms
[stress.process.out] [40250.743s][info ][gc          ] GC(3587) Pause Young (Prepare Mixed) (G1 Preventive Collection) 1299M->460M(1872M) 16.480ms
[stress.process.out] [40250.803s][info ][gc          ] GC(3588) Pause Young (Mixed) (G1 Evacuation Pause) 476M->459M(1872M) 18.911ms
[stress.process.out] #
[stress.process.out] # A fatal error has been detected by the Java Runtime Environment:
[stress.process.out] #
[stress.process.out] #  EXCEPTION_ACCESS_VIOLATION (0xc0000005) at pc=0x00007ff82824fbf1, pid=15124, tid=50484
[stress.process.out] #
[stress.process.out] # JRE version: Java(TM) SE Runtime Environment (18.0+18) (build 18-ea+18-1044)
[stress.process.out] # Java VM: Java HotSpot(TM) 64-Bit Server VM (18-ea+18-1044, mixed mode, sharing, tiered, compressed oops, compressed class ptrs, g1 gc, windows-amd64)
[stress.process.out] # Problematic frame:
[stress.process.out] # V  [jvm.dll+0x5ffbf1]  markWord::displaced_mark_helper+0x21
[stress.process.out] #
[stress.process.out] # Core dump will be written. Default location: T:\\testoutput\\test-support\\jtreg_closed_test_hotspot_jtreg_applications_runthese_RunThese24H_java\\scratch\\0\\hs_err_pid15124.mdmp
[stress.process.out] #
[stress.process.out] Unsupported internal testing APIs have been used.
[stress.process.out] 
[stress.process.out] # An error report file with more information is saved as:
[stress.process.out] # T:\\testoutput\\test-support\\jtreg_closed_test_hotspot_jtreg_applications_runthese_RunThese24H_java\\scratch\\0\\hs_err_pid15124.log
[stress.process.out] #
[stress.process.out] # If you would like to submit a bug report, please visit:
[stress.process.out] #   https://bugreport.java.com/bugreport/crash.jsp
[stress.process.out] #
[2021-10-05T21:09:06.353736800Z] Gathering output for process 49436


Here's the crashing thread's stack trace:

---------------  T H R E A D  ---------------

Current thread (0x000001ca697fc9a0):  JavaThread ""javasoft.sqe.tests.api.java.util.Arrays.AsListStream "" daemon [_thread_in_vm, id=50484, stack(0x0000011e53600000,0x0000011e53700000)]

Stack: [0x0000011e53600000,0x0000011e53700000],  sp=0x0000011e536f9520,  free space=997k
Native frames: (J=compiled Java code, j=interpreted, Vv=VM code, C=native code)
V  [jvm.dll+0x5ffbf1]  markWord::displaced_mark_helper+0x21  (markWord.cpp:45)
V  [jvm.dll+0x742c51]  ObjectSynchronizer::inflate+0x1f1  (synchronizer.cpp:1210)
V  [jvm.dll+0x74175e]  ObjectSynchronizer::FastHashCode+0xfe  (synchronizer.cpp:874)
V  [jvm.dll+0x6609cb]  oopDesc::slow_identity_hash+0x8b  (oop.cpp:99)
V  [jvm.dll+0x7b9fdc]  Verifier::verify+0xcc  (verifier.cpp:172)
V  [jvm.dll+0x373182]  InstanceKlass::link_class_impl+0x2d2  (instanceKlass.cpp:908)
V  [jvm.dll+0x3722f4]  InstanceKlass::initialize_impl+0x44  (instanceKlass.cpp:1071)
V  [jvm.dll+0x372298]  InstanceKlass::initialize+0x28  (instanceKlass.cpp:800)
V  [jvm.dll+0x381ada]  InterpreterRuntime::_new+0x8a  (interpreterRuntime.cpp:225)
C  0x000001ca077c7877

Java frames: (J=compiled Java code, j=interpreted, Vv=VM code)
j  javasoft.sqe.tests.api.java.util.stream.Stream.MapTests.MapTestsBase.map_umbrella(Ljavasoft/sqe/tests/api/java/util/stream/AdjustedStreamData;)V+19
v  ~StubRoutines::call_stub
J 3717  jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Ljava/lang/reflect/Method;Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/Object; java.base@18-ea (0 bytes) @ 0x000001ca0f4002a7 [0x000001ca0f400220+0x0000000000000087]
J 7424645 c2 jdk.internal.reflect.NativeMethodAccessorImpl.invoke(Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/Object; java.base@18-ea (137 bytes) @ 0x000001ca0f4fa458 [0x000001ca0f4fa3e0+0x0000000000000078]
J 7423783 c2 jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/Object; java.base@18-ea (10 bytes) @ 0x000001ca1169c8d4 [0x000001ca1169c880+0x0000000000000054]
J 7437792 c1 com.oracle.tck.lib.autd2.processors.tc.TGFTestCaseMethodSetting.lambda$processSettingMethodPhase$0(Lcom/oracle/tck/lib/autd2/TestCaseContext;)Ljava/lang/Object; (63 bytes) @ 0x000001ca0b19f52c [0x000001ca0b19f2a0+0x000000000000028c]
J 7437791 c1 com.oracle.tck.lib.autd2.processors.tc.TGFTestCaseMethodSetting$$Lambda$2208504+0x00000008043f9648.call()Ljava/lang/Object; (12 bytes) @ 0x000001ca09f99094 [0x000001ca09f99020+0x0000000000000074]
J 7437781 c1 com.oracle.tck.lib.autd2.processors.tc.DefaultThreadRunning.process(Lcom/oracle/tck/lib/autd2/TestCaseContext$TestCaseLifePhase;Lcom/oracle/tck/lib/autd2/TestCaseContext;)V (48 bytes) @ 0x000001ca09f9a95c [0x000001ca09f9a8e0+0x000000000000007c]
J 7437780 c1 com.oracle.tck.lib.autd2.processors.tc.DefaultThreadRunning.process(Lcom/oracle/tck/lib/autd2/LifePhase;Lcom/oracle/tck/lib/autd2/Context;)V (13 bytes) @ 0x000001ca09f9bb9c [0x000001ca09f9bac0+0x00000000000000dc]
J 7436615 c1 com.oracle.tck.lib.autd2.AUTD2Utils.iterateThroughProcessorsUntilAllAreDone(Lcom/oracle/tck/lib/autd2/Context;Ljava/util/TreeMap;Lcom/oracle/tck/lib/autd2/LifePhase;Ljava/util/List;)V (207 bytes) @ 0x000001ca0aae8524 [0x000001ca0aae79c0+0x0000000000000b64]
J 7456242 c1 com.oracle.tck.lib.autd2.AUTD2Utils.iterateLifePhases(Lcom/oracle/tck/lib/autd2/Context;[Lcom/oracle/tck/lib/autd2/LifePhase;)V (173 bytes) @ 0x000001ca086c9344 [0x000001ca086c8600+0x0000000000000d44]
j  com.oracle.tck.lib.autd2.AUTD2Utils.iterateTestCaseLifePhase(Lcom/oracle/tck/lib/autd2/TestCaseContext;)Lcom/oracle/tck/lib/autd2/TestResult;+29
j  com.oracle.tck.lib.autd2.processors.tg.RunningTestCases.runTestCaseAsNeeded(Lcom/oracle/tck/lib/autd2/TestCaseContext;)Lcom/oracle/tck/lib/autd2/TestResult;+1
j  com.oracle.tck.lib.autd2.processors.tg.RunningTestCases.lambda$process$0(Lcom/oracle/tck/lib/autd2/TestGroupContext;Lcom/oracle/tck/lib/autd2/TestCaseContext;)V+24
j  com.oracle.tck.lib.autd2.processors.tg.RunningTestCases$$Lambda$2208340+0x000000080365fd30.accept(Ljava/lang/Object;)V+12
J 7425215 c2 java.lang.Iterable.forEach(Ljava/util/function/Consumer;)V java.base@18-ea (39 bytes) @ 0x000001ca119cc6e0 [0x000001ca119cc640+0x00000000000000a0]
j  com.oracle.tck.lib.autd2.processors.tg.RunningTestCases.process(Lcom/oracle/tck/lib/autd2/TestGroupContext$TestGroupLifePhase;Lcom/oracle/tck/lib/autd2/TestGroupContext;)V+13
j  com.oracle.tck.lib.autd2.processors.tg.RunningTestCases.process(Lcom/oracle/tck/lib/autd2/LifePhase;Lcom/oracle/tck/lib/autd2/Context;)V+9
J 7436615 c1 com.oracle.tck.lib.autd2.AUTD2Utils.iterateThroughProcessorsUntilAllAreDone(Lcom/oracle/tck/lib/autd2/Context;Ljava/util/TreeMap;Lcom/oracle/tck/lib/autd2/LifePhase;Ljava/util/List;)V (207 bytes) @ 0x000001ca0aae8524 [0x000001ca0aae79c0+0x0000000000000b64]
J 7456242 c1 com.oracle.tck.lib.autd2.AUTD2Utils.iterateLifePhases(Lcom/oracle/tck/lib/autd2/Context;[Lcom/oracle/tck/lib/autd2/LifePhase;)V (173 bytes) @ 0x000001ca086c9344 [0x000001ca086c8600+0x0000000000000d44]
j  com.oracle.tck.lib.autd2.TestRunner.performRun(Lcom/oracle/tck/lib/autd2/TestGroupContext;Ljava/util/Set;Ljava/util/Set;)V+273
j  com.oracle.tck.lib.autd2.TestRunner.run(Ljava/lang/Object;Ljava/io/PrintWriter;Ljava/io/PrintWriter;Ljava/util/Set;Ljava/util/Set;[Ljava/lang/String;)Lcom/oracle/tck/lib/autd2/TestResult;+151
j  com.oracle.tck.lib.autd2.AUTD2.run(Ljava/lang/Object;Ljava/io/PrintWriter;Ljava/io/PrintWriter;[Ljava/lang/String;)Ljavasoft/sqe/javatest/Status;+29
j  com.oracle.tck.lib.autd2.AUTD2.run([Ljava/lang/String;Ljava/io/PrintWriter;Ljava/io/PrintWriter;)Ljavasoft/sqe/javatest/Status;+4
j  javasoft.sqe.tests.api.java.util.stream.GenericStreamTestsBase.runTests(Ljavasoft/sqe/tests/api/java/util/stream/GenericStreamTestsBase$NewTest;)Ljavasoft/sqe/javatest/Status;+26
j  javasoft.sqe.tests.api.java.util.stream.GenericStreamTests.checkMapRef1()Ljavasoft/sqe/javatest/Status;+6
v  ~StubRoutines::call_stub
J 3717  jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Ljava/lang/reflect/Method;Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/Object; java.base@18-ea (0 bytes) @ 0x000001ca0f4002a7 [0x000001ca0f400220+0x0000000000000087]
J 7424645 c2 jdk.internal.reflect.NativeMethodAccessorImpl.invoke(Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/Object; java.base@18-ea (137 bytes) @ 0x000001ca0f4fa458 [0x000001ca0f4fa3e0+0x0000000000000078]
J 7423552 c2 java.lang.reflect.Method.invoke(Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/Object; java.base@18-ea (65 bytes) @ 0x000001ca11c479f0 [0x000001ca11c47940+0x00000000000000b0]
j  com.oracle.tck.lib.autd2.processors.tc.DefaultNoArgTestCaseMethodSetting.lambda$process$0(Lcom/oracle/tck/lib/autd2/TestCaseContext;)Ljava/lang/Object;+12
j  com.oracle.tck.lib.autd2.processors.tc.DefaultNoArgTestCaseMethodSetting$$Lambda$2208351+0x0000000803acd968.call()Ljava/lang/Object;+4
J 7437781 c1 com.oracle.tck.lib.autd2.processors.tc.DefaultThreadRunning.process(Lcom/oracle/tck/lib/autd2/TestCaseContext$TestCaseLifePhase;Lcom/oracle/tck/lib/autd2/TestCaseContext;)V (48 bytes) @ 0x000001ca09f9a95c [0x000001ca09f9a8e0+0x000000000000007c]
J 7437780 c1 com.oracle.tck.lib.autd2.processors.tc.DefaultThreadRunning.process(Lcom/oracle/tck/lib/autd2/LifePhase;Lcom/oracle/tck/lib/autd2/Context;)V (13 bytes) @ 0x000001ca09f9bb9c [0x000001ca09f9bac0+0x00000000000000dc]
J 7436615 c1 com.oracle.tck.lib.autd2.AUTD2Utils.iterateThroughProcessorsUntilAllAreDone(Lcom/oracle/tck/lib/autd2/Context;Ljava/util/TreeMap;Lcom/oracle/tck/lib/autd2/LifePhase;Ljava/util/List;)V (207 bytes) @ 0x000001ca0aae8524 [0x000001ca0aae79c0+0x0000000000000b64]
J 7456242 c1 com.oracle.tck.lib.autd2.AUTD2Utils.iterateLifePhases(Lcom/oracle/tck/lib/autd2/Context;[Lcom/oracle/tck/lib/autd2/LifePhase;)V (173 bytes) @ 0x000001ca086c9344 [0x000001ca086c8600+0x0000000000000d44]
j  com.oracle.tck.lib.autd2.AUTD2Utils.iterateTestCaseLifePhase(Lcom/oracle/tck/lib/autd2/TestCaseContext;)Lcom/oracle/tck/lib/autd2/TestResult;+29
j  com.oracle.tck.lib.autd2.processors.tg.RunningTestCases.runTestCaseAsNeeded(Lcom/oracle/tck/lib/autd2/TestCaseContext;)Lcom/oracle/tck/lib/autd2/TestResult;+1
j  com.oracle.tck.lib.autd2.processors.tg.RunningTestCases.lambda$process$0(Lcom/oracle/tck/lib/autd2/TestGroupContext;Lcom/oracle/tck/lib/autd2/TestCaseContext;)V+24
j  com.oracle.tck.lib.autd2.processors.tg.RunningTestCases$$Lambda$2208340+0x000000080365fd30.accept(Ljava/lang/Object;)V+12
J 7425215 c2 java.lang.Iterable.forEach(Ljava/util/function/Consumer;)V java.base@18-ea (39 bytes) @ 0x000001ca119cc6e0 [0x000001ca119cc640+0x00000000000000a0]
j  com.oracle.tck.lib.autd2.processors.tg.RunningTestCases.process(Lcom/oracle/tck/lib/autd2/TestGroupContext$TestGroupLifePhase;Lcom/oracle/tck/lib/autd2/TestGroupContext;)V+13
j  com.oracle.tck.lib.autd2.processors.tg.RunningTestCases.process(Lcom/oracle/tck/lib/autd2/LifePhase;Lcom/oracle/tck/lib/autd2/Context;)V+9
j  com.oracle.tck.lib.autd2.AUTD2Utils.iterateThroughProcessorsUntilAllAreDone(Lcom/oracle/tck/lib/autd2/Context;Ljava/util/TreeMap;Lcom/oracle/tck/lib/autd2/LifePhase;Ljava/util/List;)V+120
j  com.oracle.tck.lib.autd2.AUTD2Utils.iterateLifePhases(Lcom/oracle/tck/lib/autd2/Context;[Lcom/oracle/tck/lib/autd2/LifePhase;)V+72
j  com.oracle.tck.lib.autd2.TestRunner.performRun(Lcom/oracle/tck/lib/autd2/TestGroupContext;Ljava/util/Set;Ljava/util/Set;)V+273
j  com.oracle.tck.lib.autd2.TestRunner.run(Ljava/lang/Object;Ljava/io/PrintWriter;Ljava/io/PrintWriter;Ljava/util/Set;Ljava/util/Set;[Ljava/lang/String;)Lcom/oracle/tck/lib/autd2/TestResult;+151
j  com.oracle.tck.lib.autd2.AUTD2.run(Ljava/lang/Object;Ljava/io/PrintWriter;Ljava/io/PrintWriter;[Ljava/lang/String;)Ljavasoft/sqe/javatest/Status;+29
j  com.oracle.tck.lib.autd2.AUTD2.run(Ljava/lang/Object;[Ljava/lang/String;)Ljavasoft/sqe/javatest/Status;+34
j  javasoft.sqe.tests.api.java.util.Arrays.AsListStream.main([Ljava/lang/String;)V+8
v  ~StubRoutines::call_stub
J 3717  jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Ljava/lang/reflect/Method;Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/Object; java.base@18-ea (0 bytes) @ 0x000001ca0f4002a7 [0x000001ca0f400220+0x0000000000000087]
J 7424645 c2 jdk.internal.reflect.NativeMethodAccessorImpl.invoke(Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/Object; java.base@18-ea (137 bytes) @ 0x000001ca0f4fa458 [0x000001ca0f4fa3e0+0x0000000000000078]
J 7423783 c2 jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/Object; java.base@18-ea (10 bytes) @ 0x000001ca1169c8d4 [0x000001ca1169c880+0x0000000000000054]
J 7428361 c1 applications.kitchensink.process.stress.modules.JckStressModule$TestRunner$1.run()V (127 bytes) @ 0x000001ca0ab1598c [0x000001ca0ab15800+0x000000000000018c]
v  ~StubRoutines::call_stub

siginfo: EXCEPTION_ACCESS_VIOLATION (0xc0000005), reading address 0xffffffffffffffff;;;","2021-11-04 07:36;dcubed;Here's the stack track for the jdk-18+23-1435-tier3 sighting:

applications/runthese/RunThese30M.java

---------------  T H R E A D  ---------------

Current thread (0x00007fb268274ff0):  VMThread ""VM Thread"" [stack: 0x00007fb26d95e000,0x00007fb26da5e000] [id=23517]

Stack: [0x00007fb26d95e000,0x00007fb26da5e000],  sp=0x00007fb26da5bc70,  free space=1015k
Native frames: (J=compiled Java code, j=interpreted, Vv=VM code, C=native code)
V  [libjvm.so+0x13e1ea0]  markWord::displaced_mark_helper() const+0x60
V  [libjvm.so+0xa82e20]  DefNewGeneration::copy_to_survivor_space(oop)+0x5a0
V  [libjvm.so+0xa8c411]  void FastScanClosure<DefNewScanClosure>::do_oop_work<narrowOop>(narrowOop*)+0xc1
V  [libjvm.so+0xa8c76f]  void OopOopIterateDispatch<DefNewScanClosure>::Table::oop_oop_iterate<ObjArrayKlass, narrowOop>(DefNewScanClosure*, oop, Klass*)+0xef
V  [libjvm.so+0xa881b6]  void ContiguousSpace::oop_since_save_marks_iterate<DefNewScanClosure>(DefNewScanClosure*)+0x116
V  [libjvm.so+0xa80dc2]  DefNewGeneration::FastEvacuateFollowersClosure::do_void()+0x42
V  [libjvm.so+0xa81531]  DefNewGeneration::collect(bool, bool, unsigned long, bool)+0x581
V  [libjvm.so+0xd2e9b7]  GenCollectedHeap::collect_generation(Generation*, bool, unsigned long, bool, bool, bool)+0x3e7
V  [libjvm.so+0xd2fb8b]  GenCollectedHeap::do_collection(bool, bool, unsigned long, bool, GenCollectedHeap::GenerationType)+0x8bb
V  [libjvm.so+0xd30729]  GenCollectedHeap::satisfy_failed_allocation(unsigned long, bool)+0x69
V  [libjvm.so+0xd18002]  VM_GenCollectForAllocation::doit()+0x52
V  [libjvm.so+0x198052a]  VM_Operation::evaluate()+0x18a
V  [libjvm.so+0x19a3ac3]  VMThread::evaluate_operation(VM_Operation*)+0x183
V  [libjvm.so+0x19a4937]  VMThread::inner_execute(VM_Operation*)+0x3f7
V  [libjvm.so+0x19a4a65]  VMThread::loop()+0xb5
V  [libjvm.so+0x19a4b8c]  VMThread::run()+0xbc
V  [libjvm.so+0x1891af0]  Thread::call_run()+0x100
V  [libjvm.so+0x1572204]  thread_native_entry(Thread*)+0x104


siginfo: si_signo: 11 (SIGSEGV), si_code: 128 (SI_KERNEL), si_addr: 0x0000000000000000;;;","2021-11-17 12:35;pchilanomate;I've been trying to reproduce the crash locally but without success so far.
One thing I noticed is that all hs_err files have out of memory and stack overflow exceptions. For example for the jdk-18+21-1265-tier8 crash:

OutOfMemory and StackOverflow Exception counts:
OutOfMemoryError java_heap_errors=161
StackOverflowErrors=21
LinkageErrors=152172

For the single RunThese30M.java crash spotted there is only one out of memory error:

OutOfMemory and StackOverflow Exception counts:
OutOfMemoryError java_heap_errors=1
LinkageErrors=12605
 
I added code to call Exceptions::print_exception_counts_on_error() on VM exit and don't see any OutOfMemory or StackOverflow exceptions in the successful runs. This might indicate the bug is only triggered after an out of memory condition. I tried using -Xmx to reduce the max heap size and see if that triggers an out of memory exception, which in turn might lead to the same crash, but so far the test still passes.;;;","2021-11-18 07:41;pchilanomate;I've been running RunThese30M.java so far which only runs kitchensink for 30 minutes that's why I wasn't seeing too much. Running RunThese24H.java does show out of memory exceptions during the run, but there is no crash so it doesn't seem to be the reason for the failure we are seeing. I haven't spotted yet stack overflow exceptions, but I only run the test for a couple of hours, not the full 24 hours. I will try to run several instances of RunThese24H.java in parallel the full 24 hours.;;;","2021-12-02 10:09;pchilanomate;The theory about the stack overflow exceptions led nowhere. RunThese30.java is failing with no StackOverflowErrors. 

I looked in the heap at the nearby objects to the one that has the invalid markword (0x7878787878787878) and I see that the previous object contiguously in memory is always a big byte array(~12k bytes) that contains what seems like a base64 encoded string (something like ""Vm0wd2QyVkhVWGhVV0dSUFZs.....WVmxaS2VWVkdSVGxRVVQwOQ==""). Interestingly, I found other byte arrays in the heap with the same format, i.e. base64 strings that end with that same special 0x7878787878787878 value. So it seems the 0x7878787878787878 value belongs to the previous byte array that is just overwriting the markword of this object. In other words, this looks a lot like an off-by-one error somewhere, causing an overflow that overwrites the memory of the next contiguous object in memory.  
This would explain why after adding asserts in all methods that write to the markword to catch the special 0x7878787878787878 value, the test still crashes without hitting the assert. 

So currently I'm trying to see if I can catch the place where we write to those byte arrays to verify if this is indeed an off-by-one error and try to find where the bug is in the code.

I'm also trying to narrow down the commit where the crash first appears but the crash is too intermittent and the test needs to run for about half an hour so it's unreliable and takes a lot of time.;;;","2021-12-07 05:42;coleenp;JDK-8275427 seems to have a corrupted object in eden and this bug seems to also have a corrupted object in eden (copy_to_survivor_space is copying from eden (?)).  Therefore, linking them together.  JDK-8275427 has a weird pattern too.  Different weird pattern tho.;;;","2021-12-07 21:40;pchilanomate;I think I found the issue. The problem is not in the base64 encoding, it's in the base64 decoding! (JDK-8268276).

The 0x7878787878787878 pattern is sometimes being written at the end of these byte[] arrays by code in StubRoutines::_base64_decodeBlock. By looking in gdb at some of the strings that are being decoded it looks like there is no reason for that pattern to be generated and it is just a bug in the decoding implementation. For example, if I add a watchpoint in gdb to catch the moment when 0x7878787878787878 is being written to memory on some byte array I see the following state when hitting the breakpoint:

(gdb) info registers
rax            0x7f9e02886098	140316624052376
rbx            0x0	0
rcx            0x22f7f7ed0	9386819280
rdx            0x3bcc	15308
rsi            0x0	0
rdi            0x22f7f51d0	9386807760
rbp            0x7f9e19ad8720	0x7f9e19ad8720
rsp            0x7f9e19ad86f0	0x7f9e19ad86f0
r8             0x0	0
r9             0x0	0
r10            0x7f9fa56ebd60	140323652025696
r11            0x0	0
r12            0x0	0
r13            0x0	0
r14            0x4c	76
r15            0x11000	69632
rip            0x7f9fa56ebfa3	0x7f9fa56ebfa3

rip is inside StubRoutines::_base64_decodeBlock:

(gdb) p StubRoutines::_base64_decodeBlock
$9 = (address) 0x7f9fa56ebd60 

(gdb) p StubRoutines::_multiplyToLen  (next one to be generated)
$10 = (address) 0x7f9fa56ec1a0 

rdi points to a byte[] that contains the string we are decoding. Currently it actually points to the last 0x4c bytes (r14) since we are almost done:

(gdb) x/14gx 0x22f7f51d0
0x22f7f51d0:	0x7955315534315756	0x587046526a646b53
0x22f7f51e0:	0x455a46654e646b59	0x3152574d6a466d52
0x22f7f51f0:	0x754a56616f784756	0x6868586257646c51
0x22f7f5200:	0x725a3156574a7a55	0x53683352574e465a
0x22f7f5210:	0x52393064525a6c56	0x000000003d305450
0x22f7f5220:	0x0000000000000001	0x000255f800002050
0x22f7f5230:	0x7951326477306d56	0x4f703161576c5855

The header of the byte[] is:

(gdb) x/10gx 0x22f7f1640
0x22f7f1640:	0x0000000000000001	0x00003bcc00002050
0x22f7f1650:	0x7951326477306d56	0x58784757566c5855
0x22f7f1660:	0x735a315477465459	0x336c6c525739475a

And this is what those last 76 characters that we are decoding look like as a string:

(gdb) x/s 0x22f7f51d0
0x22f7f51d0:	""VW14U1UySkdjRFpXYkdNeFZERmFjMWR1VGxoaVJuQldWbXhhUzJWV1ZrZFNWR3hSVlZRd09RPT0=""


rcx points to the dst byte[] where we are storing the result of the base64 decoding:

(gdb) x/12gx 0x22F7F7Ed0
0x22f7f7ed0:	0x474a325553786d55	0x784d4762575a4463
0x22f7f7ee0:	0x7564316361464456	0x57426e5269686c54
0x22f7f7ef0:	0x5756325361786d56	0x5278475653646b56
0x22f7f7f00:	0x3d3d514f77515656	0x7878787878787878
0x22f7f7f10:	0x0000000000000000	0x0000000000000000
0x22f7f7f20:	0x0000000000000000	0x0000000000000000

The header of the byte[] is:

(gdb) x/10gx 0x22f7f5220
0x22f7f5220:	0x0000000000000001	0x000255f800002050
0x22f7f5230:	0x7951326477306d56	0x4f703161576c5855
0x22f7f5240:	0x775946566f646c56	0x30786d525852445a

And this is what those last characters that we decoded look like as a string:

(gdb) x/s 0x22f7f7ed0
0x22f7f7ed0:	""UmxSU2JGcDZWbGMxVDFac1duTlhiRnBWVmxaS2VWVkdSVGxRVVQwOQ==xxxxxxxx""


The base64 decode of the 76 characters shown initially should be(echo string | base64 -d):

""UmxSU2JGcDZWbGMxVDFac1duTlhiRnBWVmxaS2VWVkdSVGxRVVQwOQ==""

If we compare it with the string decoded by us we can see the extra xxxxxxxx(0x7878787878787878) generated at the end.

If I revert JDK-8268276 and do the same test adding watchpoints I never see that pattern being generated at the end of those byte[].

This base64 test is creating byte arrays of size 11480 for encoding/decoding, and from the cases I've seen the full length of the array is needed for decoding. So, if the base64 decoding stub happens to add these extra bytes then we will overwrite the header of the next object since there is no available space in the array. This would explain the crashes we are seeing. The test also uses some bigger arrays(153080 as we see above) for encoding/decoding but those have a lot of empty space at the end so we wouldn't see any issues there.

Also, I've reverted JDK-8268276 and run the test in mach5 800 times already with no failures. Usually with 300 runs on the current tip I get at least 1 crash.;;;","2021-12-09 01:31;dlong;[~pchilanomate], thanks for tracking this down.;;;","2021-12-09 01:33;dlong;ILW = heap corruption with base64 intrinsic, AVX-512 only?, disable intrinsic? = HML = P2;;;","2021-12-09 02:20;dlong;[~sviswanathan], please help with this.;;;","2021-12-09 03:22;chagedorn;Very nice analysis [~pchilanomate]! Following your steps, I extracted a simple reproducer which shows the wrong result of decode() (see Reproducer.java):
Run:
java -Xbatch Reproducer.java

Output:
Exception in thread ""main"" java.lang.RuntimeException: Non matching strings!
Expected: UmxSU2JGcDZWbGMxVDFac1duTlhiRnBWVmxaS2VWVkdSVGxRVVQwOQ==
Found:      UmxSU2JGcDZWbGMxVDFac1duTlhiRnBWVmxaS2VWVkdSVGxRVVQwOQ==xxxxxxxx
	at Reproducer.main(Reproducer.java:39)

Hope this helps!;;;","2021-12-09 10:49;sgibbons;I believe I have found the bug and am working on a fix.  My algorithm was writing 64 bytes when it should only have written 48, which wrote past the end of the array.  I will also update the test to catch this issue.;;;","2021-12-09 15:41;sgibbons;Great job finding this.  Thank you.  I have submitted a PR and added a test for overrun.;;;","2021-12-09 22:35;kvn;Note, Base64 intrinsics are only supported on x86 CPU with AVX512:
https://github.com/openjdk/jdk/blob/master/src/hotspot/cpu/x86/vm_version_x86.cpp#L967

To verify the fix we need to run on such machine.;;;","2021-12-09 23:40;dlong;The new AVX512 intrinsic code is also guarded with this:

    if(VM_Version::supports_avx512_vbmi() && VM_Version::supports_avx512bw()) {;;;","2021-12-12 08:09;roboduke;Changeset: 9a1bbaf8
Author:    Scott Gibbons <scott.gibbons@intel.com>
Committer: Vladimir Kozlov <kvn@openjdk.org>
Date:      2021-12-12 16:08:35 +0000
URL:       https://git.openjdk.java.net/jdk18/commit/9a1bbaf8db0e869ab76be8ab1bd0ddeb23693e7e
;;;","2021-12-17 08:55;dcubed;The fix for this bug is in jdk-18+28-1965 and jdk-19+2-32.;;;","2022-11-07 19:43;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/864
Date: 2022-11-08 03:35:43 +0000;;;","2022-11-07 19:52;sgibbons;Fix Request 17u
 
Backporting this patch eliminates a bug where decode was overwriting past end of buffer.
Low risk as this has been in JDK18 for months. Depends on backport of JDK-8268276, JDK-8269404, JDK-8273459, and JDK-8274527 to cleanly integrate.
Patch applies cleanly to 17u.
Testing: x86_64 build, affected tests, tier1;;;","2022-11-09 18:12;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/870
Date: 2022-11-10 02:03:18 +0000;;;"
"RunThese24H times out with ""java.lang.management.ThreadInfo.getLockName()"" is null",JDK-8273107,5057657,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,dcubed,dholmes,dholmes,2021-08-29 17:25,2022-01-10 09:33,2023-10-01 09:57,2021-12-17 13:26,18,,,,,,,18,hotspot,,0,intermittent,test-bigapps-runThese,tier8,,,,,,,,,,,,,,,,,,,"These errors have been seen in many RunThese24H runs, but in the past we then saw the access violation in get_thread_status() that was fixed by JDK-8269934, and the NPE was ignored:

[stress.process.err] java.lang.NullPointerException: Cannot invoke ""String.startsWith(String)"" because the return value of ""java.lang.management.ThreadInfo.getLockName()"" is null
[stress.process.err] 	at javasoft.sqe.tests.api.java.util.concurrent.JSR166TestCase.dumpTestThreads(JSR166TestCase.java:659)
[stress.process.err] 	at javasoft.sqe.tests.api.java.util.concurrent.JSR166TestCase.tearDownFail(JSR166TestCase.java:331)
[stress.process.err] 	at javasoft.sqe.tests.api.java.util.concurrent.JSR166TestCase.checkForkJoinPoolThreadLeaks(JSR166TestCase.java:387)
[stress.process.err] 	at javasoft.sqe.tests.api.java.util.concurrent.JSR166TestCase.tearDown(JSR166TestCase.java:364)
[stress.process.err] 	at javasoft.sqe.tests.api.junit.TestCase.invokeTestCase(TestCase.java:53)
[stress.process.err] 	at javasoft.sqe.javatest.lib.MultiTest.run(MultiTest.java:193)
[stress.process.err] 	at javasoft.sqe.javatest.lib.MultiTest.run(MultiTest.java:125)
[stress.process.err] 	at javasoft.sqe.tests.api.java.util.concurrent.LinkedBlockingDequeTest.main(LinkedBlockingDequeTest.java:51)
[stress.process.err] 	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
[stress.process.err] 	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
[stress.process.err] 	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
[stress.process.err] 	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
[stress.process.err] 	at applications.kitchensink.process.stress.modules.JckStressModule$TestRunner$1.run(JckStressModule.java:275)

There are many such NPE's seen in the overall test times out. We also see many:

[stress.process.err] javasoft.sqe.tests.api.java.util.concurrent.CompletableFutureTest@410cadb8: ForkJoin common pool thread stuck",,,,,,,,,,,JDK-8279103,JDK-8279739,,,,,,,,,,,,,,,,,,,,,,,JDK-8269934,JDK-8278364,JDK-8263864,JDK-8277956,,JDK-8278968,JDK-8253064,,,,,,,,,,,,,,,,,,,,,,,"0|i2u6vv:",9223372036854775807,b29,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,,,"2021-08-31 11:24;hseigel;ILW = MMM = P3;;;","2021-09-15 11:37;coleenp;This last instance with ZGC looks a lot like the string dedup table bug that I looked at this morning JDK-8273695
I didn't see getLockName() in the log output.;;;","2021-09-17 08:05;coleenp;I am still trying to figure out why getLockName() returns NULL in the test, even though the test has cases where it checks for NULL and doesn't call startsWith() on the name.  The last instance of this crash is stopped in ObjectSynchronizer::monitors_iterate()

There are ~1300 threads and for each thread, it's going through 
(gdb) print _in_use_list
$4 = {_head = 0x7fdea0ac89d0, _count = 853608, _max = 853608}

977	  while (iter.has_next()) {
978	    ObjectMonitor* mid = iter.next();
979	    if (mid->owner() != thread) {
980	      continue;
981	    }

All the other threads are stopped at a safepoint (during allocation) and there are 6 threads waiting telling the VMThread to do
#18 0x00007fdf6ad04db5 in jmm_DumpThreads (env=<optimized out>, thread_ids=<optimized out>, locked_monitors=1 '\001', locked_synchronizers=1 '\001', maxDepth=<optimized out>) at open/src/hotspot/share/services/management.cpp:1273

Not sure why the monitor list is so long.

(?)

(gdb) print ObjectSynchronizer::_is_async_deflation_requested
$9 = false
(gdb) print _no_progress_cnt
$10 = 0
(gdb) print AsyncDeflationInterval
$11 = 250
(gdb) print MonitorUsedDeflationThreshold
$12 = 90
(gdb) print _in_use_list_ceiling
$13 = 1352704
(gdb) 
;;;","2021-09-17 08:38;coleenp;It's weird how the line numbers don't line up in the exception message:
[stress.process.err] Exception in thread ""pool-4019-thread-1"" java.lang.NullPointerException: Cannot invoke ""String.startsWith(String)"" because the return value of ""java.lang.management.ThreadInfo.getLockName()"" is null
[stress.process.err] 	at javasoft.sqe.tests.api.java.util.concurrent.JSR166TestCase.dumpTestThreads(JSR166TestCase.java:659)
[stress.process.err] 	at javasoft.sqe.tests.api.java.util.concurrent.JSR166TestCase.threadRecordFailure(JSR166TestCase.java:320)
[stress.process.err] 	at javasoft.sqe.tests.api.java.util.concurrent.JSR166TestCase.threadUnexpectedException(JSR166TestCase.java:510)
[stress.process.err] 	at javasoft.sqe.tests.api.java.util.concurrent.JSR166TestCase$CheckedRunnable.run(JSR166TestCase.java:1068)
[stress.process.err] 	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
[stress.process.err] 	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
[stress.process.err] 	at java.base/java.lang.Thread.run(Thread.java:833)

getLockName is called in dumpTestThreads() but has null checks around it:
...
            if ((lockName = info.getLockName()) != null
                && lockName.startsWith(""java.lang.ref""))
                return false;
        }
        if ((name.equals(""Finalizer"") || name.equals(""Common-Cleaner""))
            && (lockName = info.getLockName()) != null
            && lockName.startsWith(""java.lang.ref""))
            return false;
        if (name.startsWith(""ForkJoinPool.commonPool-worker"")
            && (lockName = info.getLockName()) != null
            && lockName.startsWith(""java.util.concurrent.ForkJoinPool""))
            return false;

lockName can be null if the thread that we're getting ThreadInfo isn't waiting on a lock (blocker_object) when the JVM constructs it. So I can't explain this NPE.  I don't think it's why the test is hanging though.;;;","2021-09-22 06:07;coleenp;Every other one of these core files won't load in gdb.;;;","2021-09-22 06:11;coleenp;This  jdk-18+16-854-tier8 CI job failure is also stuck in monitors_iterate.

Thread 1368 (Thread 0x7f9494fff700 (LWP 11865)):
#0  0x00007f94ecc9ecff in ObjectSynchronizer::monitors_iterate(MonitorClosure*, JavaThread*) () from jdk-18/lib/server/libjvm.so
#1  0x00007f94eccfdd2c in ThreadStackTrace::dump_stack_at_safepoint(int) () from jdk-18/lib/server/libjvm.so
#2  0x00007f94ecd6fc25 in VM_ThreadDump::doit() () from jdk-18/lib/server/libjvm.so
#3  0x00007f94ecd6fe7a in VM_Operation::evaluate() () from jdk-18/lib/server/libjvm.so
#4  0x00007f94ecd71818 in VMThread::evaluate_operation(VM_Operation*) () from jdk-18/lib/server/libjvm.so;;;","2021-09-22 09:04;dcubed;[~coleenp] - Please check in with [~lmesnik] about his recent work on:

JDK-8265489 Stress test times out because of long ObjectSynchronizer::monitors_iterate(...) operation

It could be that while his fix has made things better, there is still an issue where
we're spending way too much time in ObjectSynchronizer::monitors_iterate().;;;","2021-09-23 11:21;coleenp;The core files that I've looked at have this fix.  I think the basic problem is that there are lot of threads, and for each thread, the code is looking through the monitor _in_use_list looking for monitor->owner == thread.;;;","2021-11-01 06:12;coleenp;That would explain a lot [~stefank].  I looked at the code and the line numbers didn't match but the code did check for null and not throw NPE.;;;","2021-12-03 10:56;dcubed;Starting with adding some additional tracking of stats
for in-use monitors.;;;","2021-12-04 05:30;coleenp;diff --git a/src/hotspot/share/runtime/vmOperations.cpp b/src/hotspot/share/runtime/vmOperations.cpp
index a6d42120582..8335918ea7e 100644
--- a/src/hotspot/share/runtime/vmOperations.cpp
+++ b/src/hotspot/share/runtime/vmOperations.cpp
@@ -279,6 +279,10 @@ void VM_ThreadDump::doit() {
     concurrent_locks.dump_at_safepoint();
   }
 
+  if (_with_locked_monitors) {
+    (void)ObjectSynchronizer::deflate_idle_monitors();
+  }
+
   if (_num_threads == 0) {
     // Snapshot all live threads
 
I wonder if deflating idle monitors in the heap dump safepoint might help.;;;","2021-12-04 05:59;dcubed;[~coleenp] - That's where I'm headed if the stats that I gather indicate that's
where the problem lies... I'm also going to look at adding a hash table since
we have to search the list of in-use monitors for each requested thread...
I'll likely be asking you questions about the latest hash table thoughts...;;;","2021-12-14 10:08;dcubed;Tested the new patch for memory leaks in the new VM_ThreadDump::doit()
logic by hacking one of my existing stress tests:

$ git diff test/hotspot/jtreg/serviceability/monitoring/ThreadInfo/GetLockOwnerName/GetLockOwnerName.java
diff --git a/test/hotspot/jtreg/serviceability/monitoring/ThreadInfo/GetLockOwnerName/GetLockOwnerName.java b/test/hotspot/jtreg/serviceability/monitoring/ThreadInfo/GetLockOwnerName/GetLockOwnerName.java
index 53ac3819d70..1e5fd4f3d4f 100644
--- a/test/hotspot/jtreg/serviceability/monitoring/ThreadInfo/GetLockOwnerName/GetLockOwnerName.java
+++ b/test/hotspot/jtreg/serviceability/monitoring/ThreadInfo/GetLockOwnerName/GetLockOwnerName.java
@@ -29,7 +29,8 @@
  *   to getThreadInfo() and ThreadInfo.getLockOwnerName() until the thread
  *   has exited.
  * @requires vm.jvmti
- * @run main/othervm/native -agentlib:GetLockOwnerName GetLockOwnerName
+ * @run main/othervm/native/timeout=900 -agentlib:GetLockOwnerName
+ * GetLockOwnerName 600
  */
 
 import java.io.PrintStream;
@@ -247,6 +248,7 @@ public class GetLockOwnerName {
             id = contender.getId();
             info = mbean.getThreadInfo(id, 0);
             String name = info.getLockOwnerName();
+ThreadInfo junk[] = mbean.dumpAllThreads(/* lockedMonitors */ true, /* lockedSynchronizers */false);
 
             if (name == null) {
                 out.println(""Failure at "" + count + "" loops."");

Modified the test to:
- run for 10 minutes
- call ThreadMXBean.dumpAllThreads() to force execution of VM_ThreadDump::doit()

Ran the hacked test against the baseline and then ran the test against
the new patch. The memory usage profile for both test runs was the
same.

I was originally planning to stress test memory usage by using:

test/hotspot/jtreg/serviceability/monitoring/ThreadInfo/GetLockOwnerName/GetLockOwnerName.java

with a modified ""-iterations=50000"" parameter, but that test leaks
memory without any of my changes. If I remember correctly it leaked
about 1.3GB in about 9 minutes of runtime...;;;","2021-12-17 13:26;roboduke;Changeset: a5f5d60f
Author:    Daniel D. Daugherty <dcubed@openjdk.org>
Date:      2021-12-17 21:24:51 +0000
URL:       https://git.openjdk.java.net/jdk18/commit/a5f5d60f2529bb28eee6d309bfbde904e188e540
;;;","2021-12-17 19:36;dcubed;This fix is integrated in jdk-18+29-1991.;;;",,,,,,,,,,,
Refactoring option parser for UL,JDK-8273104,5057653,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,ysuenaga,ysuenaga,ysuenaga,2021-08-28 20:34,2021-09-13 14:24,2023-10-01 09:57,2021-09-07 18:29,18,,,,,,,18,hotspot,,0,,,,,,,,,,,,,,,,,,,,,,"As we discussed in PR for JDK-8271186 and in its CSR, we want to introduce `foldmultilines` to stdout/err UL output. However we have no chance to configure `LogOutput` for stdout/err (`LogStdoutOutput`/`LogStderrOutput`) becasuse they will be instantiated statically in logFileStreamOutput.cpp.

So we need to refactor UL option parser to propagate options to all extended classes of `LogOutput`.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8271186,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2u6uz:",9223372036854775807,b14,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,,,"2021-09-07 18:29;roboduke;Changeset: 4eacdb38
Author:    Yasumasa Suenaga <ysuenaga@openjdk.org>
Date:      2021-09-08 01:27:13 +0000
URL:       https://git.openjdk.java.net/jdk/commit/4eacdb38a83b545603928392eccb116c744ef3b3
;;;",,,,,,,,,,,,,,,,,,,,,,,,,
Delete deprecated for removal the empty finalize() in java.desktop module,JDK-8273102,5057649,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,serb,serb,serb,2021-08-28 18:05,2021-10-16 07:13,2023-10-01 09:57,2021-10-06 15:32,18,,,,,,,18,client-libs,,0,noreg-cleanup,release-note=yes,,,,,,,,,,,,,,,,,,,,"The ""java.desktop"" module had a few implementations of the finalize() that were no-ops. These methods were deprecated in Java 9, terminally deprecated in Java 16, and have been removed in this release.",,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8273103,,,,,,,,JDK-8274933,JDK-8254798,JDK-8274878,,,JDK-8165641,JDK-8253568,,,,,,,,,generic,,,,,,,,,generic,,,,,"0|i2u6u3:",9223372036854775807,b19,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4b09ce31,,,,,,,,,"2021-10-06 15:32;roboduke;Changeset: 9561fea7
Author:    Sergey Bylokhov <serb@openjdk.org>
Date:      2021-10-06 22:31:23 +0000
URL:       https://git.openjdk.java.net/jdk/commit/9561fea79035f23ca3a6619c9e150433cdf4a232
;;;",,,,,,,,,,,,,,,,,,,,,,,,,
"vmTestbase/vm/mlvm/anonloader/stress/oome/heap/Test.java fails with ""wrong OOME""",JDK-8273095,5057604,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,dlong,dlong,dlong,2021-08-27 15:01,2022-04-27 02:28,2023-10-01 09:57,2021-11-22 15:18,18,,,,,,,18,hotspot,,0,hs-comp-triaged,intermittent,jdk17u-fix-request,jdk17u-fix-yes,noreg-self,oracle-triage-18,testbug,tier7,,,,,,,,,,,,,,"### TRACE 1: Test started.
### TRACE 1: RNG seed = 2617869316039064307 (0x24548a45dae73af3)
For random generator using seed: 2617869316039064307
To re-run test with same seed value please add ""-Djdk.test.lib.random.seed=2617869316039064307"" to command line.
### TRACE 1: Caught OOME : Java heap space: failed reallocation of scalar replaced objects
#>  
#>  WARNING: switching log to verbose mode,
#>      because error is complained
#>  
# ERROR: Test caught an exception: 
# ERROR: java.lang.RuntimeException: TEST FAIL : wrong OOME
# ERROR: 	at vm.mlvm.anonloader.stress.oome.heap.Test.checkOOME(Test.java:67)
# ERROR: 	at vm.mlvm.share.MlvmOOMTest.run(MlvmOOMTest.java:53)
# ERROR: 	at vm.mlvm.share.MlvmTestExecutor.runMlvmTestInstance(MlvmTestExecutor.java:382)
# ERROR: 	at vm.mlvm.share.MlvmTestExecutor.runMlvmTest(MlvmTestExecutor.java:327)
# ERROR: 	at vm.mlvm.share.MlvmTestExecutor.launch(MlvmTestExecutor.java:244)
# ERROR: 	at vm.mlvm.share.MlvmTestExecutor.launch(MlvmTestExecutor.java:186)
# ERROR: 	at vm.mlvm.share.MlvmTestExecutor.launch(MlvmTestExecutor.java:157)
# ERROR: 	at vm.mlvm.share.MlvmTestExecutor.launch(MlvmTestExecutor.java:133)
# ERROR: 	at vm.mlvm.anonloader.stress.oome.heap.Test.main(Test.java:91)
# ERROR: 	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
# ERROR: 	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
# ERROR: 	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
# ERROR: 	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
# ERROR: 	at com.sun.javatest.regtest.agent.MainWrapper$MainThread.run(MainWrapper.java:127)
# ERROR: 	at java.base/java.lang.Thread.run(Thread.java:833)
# ERROR: Caused by: java.lang.OutOfMemoryError: Java heap space: failed reallocation of scalar replaced objects",,,,,,,,,,,JDK-8285704,JDK-8285449,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8227309,JDK-8226536,,,,,,,,,,,,,,,,,,,,,,,"0|i2u6k3:",9223372036854775807,b26,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2021-08-27 15:03;dlong;I filed this as hotspot/runtime because it seems like the test should not be assuming that, after eating all memory, the OOME thrown is from a predictable place.  ;;;","2021-08-31 15:15;dlong;ILW = MMH = P3;;;","2021-11-19 19:39;dlong;I can reproduce this with jdk-18+14, but not with the latest JDK.  I'm guessing this has to do with recent changes to inlining heuristics.
Also, it seems to be a different problem than JDK-8226536.  Calling eatMemory through a MethodHandle (as in 8226536) doesn't help.  I see no evidence that the OOME is not being caught.  Rather, it is being caught correctly, but the test expects only ""Java heap space"" as the exception message, and rejects the more specific ""Java heap space: failed reallocation of scalar replaced objects"" message.  Possible solutions I can think of:
1) relax the message check (use startsWith instead of equals)
2) run the test with -XX:-EliminateAllocations to turn off the c2 optimization that triggers the different OOME message.  This is consistent with how we already run the test with -XX:-UseGCOverheadLimit to disable yet another OOME message that the test doesn't like.;;;","2021-11-22 15:18;roboduke;Changeset: f62b81c3
Author:    Dean Long <dlong@openjdk.org>
Date:      2021-11-22 23:17:46 +0000
URL:       https://git.openjdk.java.net/jdk/commit/f62b81c3b5e34895e06bedec137bcef701d49df6
;;;","2022-04-25 07:49;mdoerr;Fix Request (17u):
Should get backported for parity with 17.0.4-oracle. Applies cleanly except removal from problem list because it's not problem listed in 17u. Test has passed.;;;","2022-04-25 07:52;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk17u-dev/pull/360
Date: 2022-04-25 14:47:45 +0000;;;",,,,,,,,,,,,,,,,,,,,
"Doc of [Strict]Math.floorDiv(long,int) erroneously documents int in @return tag",JDK-8273091,5057598,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,rgiulietti,rgiulietti,rgiulietti,2021-08-27 12:02,2021-09-01 18:47,2023-10-01 09:57,2021-08-27 15:49,11,16,,,,,,18,core-libs,,0,,,,,,,,,,,,,,,,,,,,,,"A typo in the doc of [Strict]Math.floorDiv(long,int) erroneously documents to return an int rather than a long.
This only affects the JavaDoc, not the implementation.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,generic,,,,,,,9,,generic,,,,,"0|i2u6ir:",9223372036854775807,b13,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4c088d55,,,,,,,,,"2021-08-27 15:49;roboduke;Changeset: 51167846
Author:    Raffaello Giulietti <raffaello.giulietti@gmail.com>
Committer: Brian Burkhalter <bpb@openjdk.org>
Date:      2021-08-27 22:48:52 +0000
URL:       https://git.openjdk.java.net/jdk/commit/51167846cb5a60dfb31b4f8dfa214ba26640175c
;;;",,,,,,,,,,,,,,,,,,,,,,,,,
Reconcile specification and implementation of link parsing,JDK-8273083,5057587,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,jjg,prappo,prappo,2021-08-27 07:31,2022-12-07 15:22,2023-10-01 09:57,2022-06-27 13:17,18,,,,,,,19,tools,,0,javadoc-tagspec,noreg-doc,,,,,,,,,,,,,,,,,,,,"The specification does not seem to allow omission of # (hash sign) when referring to a method or a field of this class, interface, enum or record. Javadoc seems to be more forgiving and allows to do that.

On the one hand, this might be a sensible thing for javadoc to do. On the other hand, it results in situation when something that works in javadoc is invalid in third party tools, such as IDEs.

(The robustness principle is a design guideline for software that states: ""be conservative in what you do, be liberal in what you accept from others"". This principle has been criticized.)",,,,,,,,,,,JDK-8289405,JDK-8291170,JDK-8291075,,,,,,,,,,,,,,,,,,,,,,JDK-8266636,JDK-8273070,,,,,,,,,"2021-08-27 07:45;prappo;after.png;https://bugs.openjdk.org/secure/attachment/96217/after.png","2021-08-27 07:43;prappo;before.png;https://bugs.openjdk.org/secure/attachment/96216/before.png",,,,,,,,,,,,,,,,,,"0|i2u6gb:",9223372036854775807,b29,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@7900061a,,,,,,,,,"2021-08-27 07:39;prappo;If nothing else, javadoc should emit warning when sees an omitted hash sign in a reference.;;;","2022-06-02 10:19;jjg;Maybe we should run a cleanup pass over the JDK docs for this.;;;","2022-06-24 15:47;jjg;The latest form of the specification does very weakly allow this, when it talks about leading and trailing components can be omitted.

> Leading components can be omitted when they can be inferred from the surrounding context. Trailing components can be omitted when they are not required.

This is marginally better than the version in JDK 18:

> Parts of the name can be omitted as appropriate. 

There are many sites in JDK API docs where the '#' is omitted, which suggests this is an accepted behavior, that would be petty, annoying and somewhat gratuitous to change. I think the best thing is to clarify the spec. The main source of ambiguity seems to be a simple identifier, in which case the lookup is class or interface name, field name, method name, with possibly module name in the list as well. Note that common naming conventions help avoid ambiguity between some of those element kinds ... e.g. module names are typically qualified and not simple identifiers; class or interface names typically have an initial uppercase letter; fields and method names do not. (I don't know how that plays in non-Latin alphabets).

I don't think we should give a warning for an omitted hash sign. It is possible we could give a warning if the reference is ambiguous.  It's not clear that the spec should mandate a warning for an ambiguous reference.

A reasonable suggestion would be this:  The current spec says:

> The member may be any constructor, method, annotation member, field or enum member, but not a nested class or interface. 

Immediately following this sentence, it would be reasonable to add more text about members, giving conditions when the reference up to and including `#` can be omitted, and when the parameter list can be omitted. Also, to use the type name for a constructor.;;;",,,,,,,,,,,,,,,,,,,,,,,
Fix copyright in httpclient test policy files 16 and 17,JDK-8273080,5057580,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,ewhelan,ewhelan,ewhelan,2021-08-27 06:46,2021-11-14 13:33,2023-10-01 09:57,2021-08-27 07:11,11.0.14-oracle,,,,,,,11.0.14-oracle,core-libs,,0,jdk11u-na,,,,,,,,,,,,,,,,,,,,,"JDK-8264119 introduced two new policy files in the httpclient tests (16.policy & 17.policy)

Validate headers expects two spaces between these sentences:

""FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License""

The backported headers contained only one:

""FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2u6er:",9223372036854775807,b01,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@446e124a,,,,,,,,,"2021-09-28 07:47;goetz;jdk11u-na: Change not visible in the open.;;;","2021-09-28 07:58;clanger;Not quite true. We know the files affected and they show the issue:
https://github.com/openjdk/jdk11u-dev/blob/master/test/jdk/java/net/httpclient/security/16.policy
https://github.com/openjdk/jdk11u-dev/blob/master/test/jdk/java/net/httpclient/security/17.policy

But it was fixed by backport of JDK-8237589. :);;;",,,,,,,,,,,,,,,,,,,,,,,,
Avoid using += in configure,JDK-8273072,5057569,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,ihse,ihse,ihse,2021-08-27 03:18,2021-09-01 18:47,2023-10-01 09:57,2021-08-27 06:54,,,,,,,,18,infrastructure,,0,,,,,,,,,,,,,,,,,,,,,,"JDK-8272700 was created to fix a bug in a variable assignment in configure. While it fixed the bug, it kept the problematic syntax that caused the bug in the first place.

We do not use the ""FOO+=appended"" syntax for appending to variables in shell scripts, since this differs from what you'd expect (and what make produces) in that no space is added before the appended text.

Instead, we use the longer, but clearer ""FOO=$FOO appended"".",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2u6cb:",9223372036854775807,b13,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@429c566,,,,,,,,,"2021-08-27 06:54;roboduke;Changeset: a033aa5a
Author:    Magnus Ihse Bursie <ihse@openjdk.org>
Date:      2021-08-27 13:53:33 +0000
URL:       https://git.openjdk.java.net/jdk/commit/a033aa5a3d9c63d72d11af218b9896b037fbd8de
;;;",,,,,,,,,,,,,,,,,,,,,,,,,
SeparatorSkin: must remove child on dispose,JDK-8273071,5057568,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,fastegal,fastegal,fastegal,2021-08-27 03:08,2021-09-03 15:24,2023-10-01 09:57,2021-09-03 03:08,jfx16,,,,,,,jfx18,javafx,,0,SeparatorSkin,,,,,,,,,,,,,,,,,,,,,"Skin adds the line but never removes it.

failing test:

    @Test
    public void testControlChildren() {
        installDefaultSkin(control);
        int childCount = control.getChildrenUnmodifiable().size();
        replaceSkin(control);
        assertEquals(""skin must remove direct children that it has added"", 
                childCount, control.getChildrenUnmodifiable().size());
    }
    
fix: remove in dispose
",,,,,,,,,,,,,,,,,,,,,,,,JDK-8241364,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2u6c3:",9223372036854775807,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@67282485,,,,,,,,,"2021-09-03 03:08;roboduke;Changeset: 2267b115
Author:    Jeanette Winzenburg <fastegal@openjdk.org>
Date:      2021-09-03 10:07:22 +0000
URL:       https://git.openjdk.java.net/jfx/commit/2267b115f907e7c9c447691569e48cf0b2b95029
;;;",,,,,,,,,,,,,,,,,,,,,,,,,
Redundant Math.min call in Http2ClientImpl#getConnectionWindowSize,JDK-8273059,5057555,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,michaelm,michaelm,michaelm,2021-08-27 01:08,2021-09-01 18:48,2023-10-01 09:57,2021-08-30 01:59,,,,,,,,18,core-libs,,0,noreg-trivial,,,,,,,,,,,,,,,,,,,,,"There is a redundant call to Math.min in method
jdk.internal.net.http.Http2ClientImpl#getConnectionWindowSize
https://github.com/openjdk/jdk/blob/master/src/java.net.http/share/classes/jdk/internal/net/http/Http2ClientImpl.java#L240

int defaultValue = Math.min(Integer.MAX_VALUE,
        Math.max(streamWindow, K*K*32));

Call of method Math.min(int, int) is redundant if one of parameters is
known to be Integer.MAX_VALUE (or Integer.MIN_VALUE)",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2u697:",9223372036854775807,b13,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@446e124a,,,,,,,,,"2021-08-27 06:21;michaelm;The following code is also redundant and can be removed

diff --git a/src/java.net.http/share/classes/jdk/internal/net/http/ResponseContent.java b/src/java.net.http/share/classes/jdk/internal/net/http/ResponseContent.java
index 013dbac2b21..c67ec91f241 100644
--- a/src/java.net.http/share/classes/jdk/internal/net/http/ResponseContent.java
+++ b/src/java.net.http/share/classes/jdk/internal/net/http/ResponseContent.java
@@ -489,7 +489,6 @@ class ResponseContent {
                     debug.log(""already closed: "" + closedExceptionally);
                 return;
             }
-            boolean completed = false;
             try {
                 if (debug.on())
                     debug.log(""Parser got %d bytes "", b.remaining());
@@ -506,9 +505,6 @@ class ResponseContent {
             } catch (Throwable t) {
                 if (debug.on()) debug.log(""Unexpected exception"", t);
                 closedExceptionally = t;
-                if (!completed) {
-                    onComplete.accept(t);
-                }
             }
         }
;;;","2021-08-27 07:07;dfuchs;Actually - you need to keep `onComplete.accept(t);`  since completed==false then (!completed)==true;;;","2021-08-30 01:59;roboduke;Changeset: 16e83058
Author:    Michael McMahon <michaelm@openjdk.org>
Date:      2021-08-30 08:57:17 +0000
URL:       https://git.openjdk.java.net/jdk/commit/16e83058cab4dd4d4a3fba812c8fe50e4286bd22
;;;",,,,,,,,,,,,,,,,,,,,,,,
java.util.random does not correctly sample exponential or Gaussian distributions,JDK-8273056,5057368,Bug,Closed,JDK,JDK,software,duke,,,P4,Fixed,gls,webbuggrp,webbuggrp,2021-08-25 10:28,2022-12-08 09:41,2023-10-01 09:57,2021-12-02 05:01,17,18,,,,,,18,core-libs,,0,17ea,additional-information-received,dcsaw,jdk17u-fix-request,jdk17u-fix-yes,nopoc-hard,noreg-external,redhat-interest,reproducer-yes,webbug,,,,,,,,,,,,"A DESCRIPTION OF THE PROBLEM :
The modified ziggurat algorithm is not correctly implemented in java.base/jdk/internal/util/random/RandomSupport.java.

Create a histogram of a million samples using 2000 uniform bins with the following range:
Exponential range from 0 to 12. Gaussian range from -8 to 8.

This does not pass a Chi-square test. If you look at the histogram it is obviously not showing the shape of the PDF for these distributions. Look closely at the range around zero (e.g. +/- 0.5).

The following steps can be used to correct the implementation:

Exponential:
1. When the sample is not within the main ziggurat the deviate U1 is recycled, including the sign bit. If the next region is selected as an overhang (j>0) the sign bit must be cleared from U1. This is done in the inner loop when creating a new U1 but not for the first entry to that loop. Corrected using:

    if (j > 0) {   // Sample overhang j
        // U1 is recycled bits. It must be positive.
        U1 = U1 >>> 1;

2. When the loop executes to sample the overhang (j>0) the value x is computed from U1. However reflection in the hypotenuse will swap U1 and U2. So x is now invalid as it corresponds to U2. x should be computed after any reflection to avoid the upper-right triangle.

3. Y is not computed correctly.
The value of y is computed as:
y = (Y[j] * 0x1.0p63) + ((Y[j] - Y[j-1]) * (double)U2);

(X[j],Y[j]) corresponds to the upper-left corner of the overhang rectangle. (X[j-1],Y[j-1]) corresponds to the lower-right corner.

U1 is the distance to move right from the left side of the rectangle:
x = (X[j] * 0x1.0p63) + ((X[j-1] - X[j]) * (double)U1)
This is implemented correctly.

U2 is the distance to move down from the top side of the rectangle.
The original paper by McFarland used:
y = (Y[j-1] * 0x1.0p63) + ((Y[j] - Y[j-1]) * (double)(0x1.0p63-U2));
This effectively moves up from the bottom of the rectangle using 1-u2.

The code is currently using:
y = (Y[j] * 0x1.0p63) + ((Y[j] - Y[j-1]) * (double)U2);
Since Y[j] is the top and Y[j-1] is the bottom this moves out of the rectangle. Any Y created by this will not be accepted. I ran a coverage tool on the exponential sampler method when issue 1 and 2 are fixed and only y is computed incorrectly. There is no coverage of the branch where y is below the curve.

The code can be fixed to move down from the top of the rectangle:
y = (Y[j] * 0x1.0p63) + ((Y[j-1] - Y[j]) * (double)U2);
Where (Y[j-1] - Y[j]) is negative. This just swaps the indices used to compute the height of the rectangle region.

Gaussian:
1. Fix sampling when reflection occurs by computing x after the reflection. This is the same as #2 for the exponential.

2. Fix the computation of y to be inside the rectangle. This is the same as #3 for the exponential.


STEPS TO FOLLOW TO REPRODUCE THE PROBLEM :
Use the new RandomGenerator interface to create samples. Histogram then with small histogram bins and inspect the histogram. It should trace the outline of the exponential/Gaussian PDF.


---------- BEGIN SOURCE ----------
I extracted the RandomSupport class and ran it under Java 8 using SplittableRandom. This required updating RandomSupport to accept a SplittableRandom in-place of a RandomGenerator. This allows Apache Commons Math to be used to perform the Chi-square test. I do not know what the equivalent test environment should be for JDK 17.

The testGaussianSamplesWithQuantiles function often passes. The others consistently fail.

---
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import java.util.Arrays;
import java.util.SplittableRandom;
import java.util.function.DoubleSupplier;
import org.apache.commons.math3.distribution.AbstractRealDistribution;
import org.apache.commons.math3.distribution.ExponentialDistribution;
import org.apache.commons.math3.distribution.NormalDistribution;
import org.apache.commons.math3.stat.inference.ChiSquareTest;

/**
 * Test for {@link RandomSupport}.
 */
class RandomSupportTest {

    /**
     * Test Gaussian samples using a large number of bins based on uniformly spaced quantiles.
     */
    @Test
    void testGaussianSamplesWithQuantiles() {
        final int bins = 2000;
        final NormalDistribution dist = new NormalDistribution(null, 0.0, 1.0);
        final double[] quantiles = new double[bins];
        for (int i = 0; i < bins; i++) {
            quantiles[i] = dist.inverseCumulativeProbability((i + 1.0) / bins);
        }
        testSamples(quantiles, false);
    }

    /**
     * Test Gaussian samples using a large number of bins uniformly spaced in a range.
     */
    @Test
    void testGaussianSamplesWithUniformValues() {
        final int bins = 2000;
        final double[] values = new double[bins];
        final double minx = -8;
        final double maxx = 8;
        for (int i = 0; i < bins; i++) {
            values[i] = minx + (maxx - minx) * (i + 1.0) / bins;
        }
        // Ensure upper bound is the support limit
        values[bins - 1] = Double.POSITIVE_INFINITY;
        testSamples(values, false);
    }

    /**
     * Test exponential samples using a large number of bins based on uniformly spaced quantiles.
     */
    @Test
    void testExponentialSamplesWithQuantiles() {
        final int bins = 2000;
        final ExponentialDistribution dist = new ExponentialDistribution(null, 1.0);
        final double[] quantiles = new double[bins];
        for (int i = 0; i < bins; i++) {
            quantiles[i] = dist.inverseCumulativeProbability((i + 1.0) / bins);
        }
        testSamples(quantiles, true);
    }

    /**
     * Test exponential samples using a large number of bins uniformly spaced in a range.
     */
    @Test
    void testExponentialSamplesWithUniformValues() {
        final int bins = 2000;
        final double[] values = new double[bins];
        final double minx = 0;
        // Enter the tail of the distribution
        final double maxx = 12;
        for (int i = 0; i < bins; i++) {
            values[i] = minx + (maxx - minx) * (i + 1.0) / bins;
        }
        // Ensure upper bound is the support limit
        values[bins - 1] = Double.POSITIVE_INFINITY;
        testSamples(values, true);
    }

    /**
     * Test samples using the provided bins. Values correspond to the bin upper limit. It
     * is assumed the values span most of the distribution. Additional tests are performed
     * using a region of the distribution sampled using the edge of the ziggurat.
     *
     * @param values Bin upper limits
     * @param exponential Set the true to use an exponential sampler
     */
    private static void testSamples(double[] values,
                                    boolean exponential) {
        final int bins = values.length;

        final int samples = 10000000;
        final long[] observed = new long[bins];
        final SplittableRandom rng = new SplittableRandom();
        final DoubleSupplier sampler = exponential ?
            () -> RandomSupport.computeNextExponential(rng) :
            () -> RandomSupport.computeNextGaussian(rng);
        for (int i = 0; i < samples; i++) {
            final double x = sampler.getAsDouble();
            final int index = findIndex(values, x);
            observed[index]++;
        }

        // Compute expected
        final AbstractRealDistribution dist = exponential ?
            new ExponentialDistribution(null, 1.0) : new NormalDistribution(null, 0.0, 1.0);
        final double[] expected = new double[bins];
        double x0 = Double.NEGATIVE_INFINITY;
        for (int i = 0; i < bins; i++) {
            final double x1 = values[i];
            expected[i] = dist.probability(x0, x1);
            x0 = x1;
        }

        final double significanceLevel = 0.001;

        final double lowerBound = dist.getSupportLowerBound();

        final ChiSquareTest chiSquareTest = new ChiSquareTest();
        // Pass if we cannot reject null hypothesis that the distributions are the same.
        final double pValue = chiSquareTest.chiSquareTest(expected, observed);
        Assertions.assertFalse(pValue < 0.001,
            () -> String.format(""(%s <= x < %s) Chi-square p-value = %s"",
                                lowerBound, values[bins - 1], pValue));

        // Test bins sampled from the edge of the ziggurat. This is always around zero.
        for (final double range : new double[] {0.5, 0.25, 0.1, 0.05}) {
            final int min = findIndex(values, -range);
            final int max = findIndex(values, range);
            final long[] observed2 = Arrays.copyOfRange(observed, min, max + 1);
            final double[] expected2 = Arrays.copyOfRange(expected, min, max + 1);
            final double pValue2 = chiSquareTest.chiSquareTest(expected2, observed2);
            Assertions.assertFalse(pValue2 < significanceLevel,
                () -> String.format(""(%s <= x < %s) Chi-square p-value = %s"",
                                    min == 0 ? lowerBound : values[min - 1], values[max], pValue2));
        }
    }

    /**
     * Find the index of the value in the data such that:
     * <pre>
     * data[index - 1] <= x < data[index]
     * </pre>
     *
     * <p>This is a specialised binary search that assumes the bounds of the data are the
     * extremes of the support, and the upper support is infinite. Thus an index cannot
     * be returned as equal to the data length.
     *
     * @param data the data
     * @param x the value
     * @return the index
     */
    private static int findIndex(double[] data, double x) {
        int low = 0;
        int high = data.length - 1;

        // Bracket so that low is just above the value x
        while (low <= high) {
            final int mid = (low + high) >>> 1;
            final double midVal = data[mid];

            if (x < midVal) {
                // Reduce search range
                high = mid - 1;
            } else {
                // Set data[low] above the value
                low = mid + 1;
            }
        }
        // Verify the index is correct
        Assertions.assertTrue(x < data[low]);
        if (low != 0) {
            Assertions.assertTrue(x >= data[low - 1]);
        }
        return low;
    }
}

---------- END SOURCE ----------

FREQUENCY : always


",,,,,,,,,,,JDK-8285599,JDK-8282817,,,,,,,,,,,,,,,,,,,,,,,JDK-8283878,,,,,JDK-8283877,JDK-8283876,,,,"2021-08-27 00:28;tongwan;RandomSupportTest.java;https://bugs.openjdk.org/secure/attachment/96209/RandomSupportTest.java",,,,,generic,,,,,,,,,generic,,,,,"0|i2u5pn:",9223372036854775807,b27,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@38ded199,,,,,,,,,"2021-08-25 20:27;tongwan;Got the following error:
java: cannot find symbol
  symbol:   variable RandomSupport

Requested more details from the submitter.
;;;","2021-08-27 00:36;tongwan;Additional information from the submitter:
I found this bug by reading the source code in the src.zip bundled with the latest JDK 17 EA release. The sampling code looked wrong so I extracted it and ran some tests using it. I raised another 2 bug reports on the java.util.random package but have not yet received feedback about those. I am happy that this one has been picked up as it is the most significant.

To find how this is tested in the source code I've gone back to the git repository:
https://github.com/openjdk/jdk.git

and found the file here:

src/java.base/share/classes/jdk/internal/util/random/RandomSupport.java

All the tests for the new java/util/random packages are here:

test/jdk/java/util/Random

I've had a look through a few of the test classes in this directory and there is no use of JUnit. The documentation on building the JDK mentions use of jtreg and the Google test framework. I do not currently have this set-up.

In there I see that nextGaussian is tested on all the implementations of RandomGenerator using raw moments. This test is too crude to detect the bugs I have found. The ziggurat algorithm returns more than 98.5% of the time (252/256 and 253/256 for exponential or Gaussian respectively) a correct variate using the fast exit path. The remaining ~1% of samples use overhang sampling. Even if all of these are wrong due to poor rejection sampling then these bad samples are still confined to the correct region of the distribution and this is not enough to create a bad moment. A robust test requires examination of the distribution of the deviates inside a single overhang layer of the ziggurat. The number of samples inside each overhang will be correct, the distribution within the overhang will not.

Just to verify the bug you can pull out the RandomSupport class from the above location and put it in the same directory as the RandomSupportTest class I send in the bug report. That can then be run in a project that uses JUnit.

To add a test in the supported format to the JDK test hierarchy will take a bit of time. This should construct an expected histogram for a region of the output distribution. A set of samples can be generated that fit in the region and the observed histogram compared to the expected and tested using a chi-square test (or other test such as a G-test [1]).

The expected and observed histograms must have bin widths that are smaller than the width differences of the ziggurat layers. Otherwise the test will not identify issues. You can find the widths by multiplying the X tables in the RandomSupport.DoubleZigguratTables class by 2^63. E.g. for the Gaussian the start and end are:

3.64 3.43 3.30 3.21
0.422 0.388 0.347 0.292

So bin widths should be less than 0.05. My test used a range of 16/2000 = 0.008 for the Gaussian and 12/2000 = 0.006 for the exponential. This tested the entire histogram and then a region around 0. However on further consideration the test should target more than just the region around 0 (I originally wrote this test to identify a known bug in my own implementation of the ziggurat algorithm).

For an exponential the testing is simple as all overhangs are sampled using the same method. So you can pick the biggest overhang which is the region closest to zero. The tail (x>7.57) uses another exponential. This should be verified as well to check that the algorithm is recursive and the tail is correctly sampled.

For a Gaussian there are 3 overhangs: convex, concave and the inflection point around x=1. There is also the tail (x>3.64). Each should be tested to sample correctly.

This test is time consuming as you must sample millions of numbers to create an adequate sample within a small region of the PDF (probability density function). So perhaps should be run using only 1 random generator.

A second caveat is that any random tests that are checked against a reference distribution will be expected to sometimes fail when compared to a significance threshold. However this frequency should be about the same as the p-value. So if the test uses a significance level of 0.01 the test will fail every 1/100 times. If it fails a lot more then there is a bug.

How to handle this has a few strategies:

- Set the significance p-value very low (1/1000 or less). Tests should not fail very often.
- Allow the test to be repeated if it fails.
- Use a fixed seed(s) known to work.

In the second case the success rate then can be predicted using the cumulative probability of a negative binomial distribution NB(k; r, p) with r=1 as the number of success, p=probability of success and k the number of tests that are allowed to fail, i.e. how often do we see the number of failed tests n as n <= k when the pass rate is expected to be p.

This effect is compounded if there are many tests that are all expected to fail with some probability. The overall test suite will have a reduced chance of passing. Again this success can be predicted.

This is an issue that has been covered in the test suite of Commons RNG (for which I am the maintainer). That test suite has many tests that fail with a given probability. An analysis of the failure rate of each random generator in the library showed that in the core tests the failure rate was as expected. The p-values were updated such that the entire test suite had a failure rate of about 0.998. This was done in Oct 2018. There have been changes and updates since then but in general I have only seen a few PRs fail due to flaky tests and then a re-run of the PR passes on the second attempt. Note that I do not hold the Commons RNG test suite as a model of how to test randomness. There are many issues with the test suite that could be improved. However it currently works, uses random seeds, and reports on flaky tests (allowed failures) show they occur in a frequency that is expected given the test significance p-value thresholds.

I can then help add a test in the supported format for the JDK if required, or leave it to a maintainer to take this up. This may require some discussion at the JDK team on whether to support flaky tests. I do personally do not support adding tests that will be known to make the build suite fail (with a small probability). Perhaps there is a way to add the tests so they do not run by default and they can be run to check for regressions.
;;;","2021-08-27 00:38;tongwan;The observations on Windows 10:
JDK 17: Failed, only testGaussianSamplesWithQuantiles passed, the rest of 3 tests are failed.
JDK 18ea+1: Failed.;;;","2021-08-27 14:09;gls;Andrew, thanks for the careful testing and for catching this and carefully documenting it. Great job!  I had done some testing, but obviously not careful enough to reveal these errors.

Reading through your description, it all sounds right to me (they seem like exactly the kinds of mistakes I might have made with that code, even after thinking about it carefully!). Next week I will get this code back into my head and then re-read your comments very carefully while comparing to the code so that I can verify the repairs you have suggested.;;;","2021-12-02 05:01;roboduke;Changeset: 3d98ec1b
Author:    Jim Laskey <jlaskey@openjdk.org>
Date:      2021-12-02 13:00:14 +0000
URL:       https://git.openjdk.java.net/jdk/commit/3d98ec1b7bc77237177ecfc069c0e9a7e75829bc
;;;","2022-03-04 11:38;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk17u-dev/pull/199
Date: 2022-03-04 19:33:13 +0000;;;","2022-03-04 12:56;phh;Fix Request (17u).

On behalf of Dan Lutker, <lutkerd@amazon.com>

Necessary small fix, clean backport.
;;;","2022-03-07 09:07;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk17u-dev/pull/204
Date: 2022-03-07 17:02:58 +0000;;;",,,,,,,,,,,,,,,,,,
test jfr/api/consumer/TestRecordedFrame.java timing out,JDK-8273047,5057543,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,dcubed,dholmes,dholmes,2021-08-26 19:44,2021-09-14 01:38,2023-10-01 09:57,2021-09-07 19:14,18,,,,,,,18,hotspot,,0,intermittent,tier5,,,,,,,,,,,,,,,,,,,,"----------System.out:(3/52)----------
Timeout refired 480 times
type: JIT compiled
bci: 3
----------System.err:(1/15)----------
STATUS:Passed.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8273488,,,,,,,,JDK-8273714,,,,,"2021-09-05 07:41;dcubed;jdk-18+13_linux.8273047.zip;https://bugs.openjdk.org/secure/attachment/96333/jdk-18%2B13_linux.8273047.zip",,,,,x86,,,,,,,,,os_x,,,,,"0|i2u66j:",9223372036854775807,b14,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@42995637,,,,,,,,,"2021-08-27 01:23;egahlin;This is probably related to the flags passed to the test, i.e. ""-Xint  -XX:+UseInterpreter"" or ""-Xcomp -XX:-UseInterpreter"", and not the contents of RecordedFrame, which seems fine.

Could possibly be in combination with the use of Thread.currentThread().getStackTrace(), which is kind of unusual.;;;","2021-09-05 07:41;dcubed;Here's the log files from the sightings in my jdk-18+13 stress testing:

$ unzip -l jdk-18+13_linux.8273047.zip
Archive:  jdk-18+13_linux.8273047.zip
  Length      Date    Time    Name
---------  ---------- -----   ----
    21832  2021-09-02 16:47   jdk-18+13_1/failures.linux-x86_64/TestRecordedFrame.jtr.slowdebug
    21832  2021-09-03 16:05   jdk-18+13_2/failures.linux-x86_64/TestRecordedFrame.jtr.slowdebug
    21832  2021-09-04 15:23   jdk-18+13_3/failures.linux-x86_64/TestRecordedFrame.jtr.slowdebug
---------                     -------
    65496                     3 files;;;","2021-09-05 15:34;dholmes;Looks like it needs more execution time on x64 Macs.;;;","2021-09-07 18:56;dcubed;There are two sub-tests in this test:

 * @run main/othervm -Xint  -XX:+UseInterpreter -Dinterpreted=true  jdk.jfr.api.consumer.TestRecordedFrame

For the failures mentioned in this bug report, I see execution times from
5 -> 13 seconds.


 * @run main/othervm -Xcomp -XX:-UseInterpreter -Dinterpreted=false jdk.jfr.api.consumer.TestRecordedFrame

For the failures mentioned in this bug report, this is the sub-test that
times out. In most cases the test passes while the timeout handler
is running (around 525 -> 575 seconds). So the default timeout value
with a timeoutFactor of 4 yields a 480 second total timeout which isn't
enough for many macOS configs. The macOS 10.13.X machines don't
pass while the timeout handler and have a timed out value of ~595 seconds.

I think bumping the second test from the default to 2 minutes/120 seconds
to 3 minutes/180 seconds will likely work. It will definitely solve the slowdebug
timeouts that I reported on my Ubuntu 20.04 machine.;;;","2021-09-07 19:02;dcubed;Here's the context diff for the proposed fix:

$ git diff
diff --git a/test/jdk/jdk/jfr/api/consumer/TestRecordedFrame.java b/test/jdk/jdk/jfr/api/consumer/TestRecordedFrame.java
index 38d4d06b080..52f7ecd7d53 100644
--- a/test/jdk/jdk/jfr/api/consumer/TestRecordedFrame.java
+++ b/test/jdk/jdk/jfr/api/consumer/TestRecordedFrame.java
@@ -43,7 +43,7 @@ import jdk.test.lib.jfr.SimpleEvent;
  * @requires vm.hasJFR
  * @library /test/lib
  * @run main/othervm -Xint  -XX:+UseInterpreter -Dinterpreted=true  jdk.jfr.api.consumer.TestRecordedFrame
- * @run main/othervm -Xcomp -XX:-UseInterpreter -Dinterpreted=false jdk.jfr.api.consumer.TestRecordedFrame
+ * @run main/othervm/timeout=180 -Xcomp -XX:-UseInterpreter -Dinterpreted=false jdk.jfr.api.consumer.TestRecordedFrame
  */
 public final class TestRecordedFrame {;;;","2021-09-07 19:14;roboduke;Changeset: ea4907a8
Author:    Daniel D. Daugherty <dcubed@openjdk.org>
Date:      2021-09-08 02:13:41 +0000
URL:       https://git.openjdk.java.net/jdk/commit/ea4907a8789e00f9ec8d4175241246b8cf53f3f6
;;;","2021-09-08 07:38;dcubed;The fix for this bug is in jdk-18+14-739.;;;",,,,,,,,,,,,,,,,,,,
Fix misc javadoc bugs in the java.security and javax.net.ssl code,JDK-8273045,5057538,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,wetmore,wetmore,wetmore,2021-08-26 16:19,2021-09-01 18:47,2023-10-01 09:57,2021-08-26 22:12,,,,,,,,18,security-libs,,0,,,,,,,,,,,,,,,,,,,,,,"Found some issues where IntelliJ was not properly parsing style variants, plus found some other issues, so might as well do a quick sweep.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8273070,,,,,,,,,,"2021-08-27 04:51;prappo;doc-comment-reference.png;https://bugs.openjdk.org/secure/attachment/96214/doc-comment-reference.png","2021-08-27 04:51;prappo;source-definition.png;https://bugs.openjdk.org/secure/attachment/96213/source-definition.png",,,,,,,,,,,,,,,,,,"0|i2u65f:",9223372036854775807,b13,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@39d9862,,,,,,,,,"2021-08-26 22:12;roboduke;Changeset: 76baace2
Author:    Bradford Wetmore <wetmore@openjdk.org>
Date:      2021-08-27 05:11:25 +0000
URL:       https://git.openjdk.java.net/jdk/commit/76baace2f07cb7b5d5fd20abd1612085bdba4292
;;;","2021-08-27 04:08;prappo;This is no fault of IntelliJ IDEA; the Javadoc team needs to better specify how references are parsed. I filed JDK-8273070 to track that.;;;",,,,,,,,,,,,,,,,,,,,,,,,
[TEST_BUG] Automate NimbusJTreeSelTextColor.java,JDK-8273043,5057531,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,aivanov,aivanov,aivanov,2021-08-26 12:00,2023-08-15 23:38,2023-10-01 09:57,2021-09-07 12:06,18,,,,,,,18,client-libs,,0,cssn21_08_02,jdk17u-fix-request,jdk17u-fix-yes,noreg-self,sustaining,testbug,ursqe-triaged,,,,,,,,,,,,,,,The recently added test/jdk/javax/swing/plaf/nimbus/NimbusJTreeSelTextColor.java test can be automated.,,,,,,,,,,,JDK-8293907,JDK-8293621,,,,,,,,,,,,,,,,,,,,,,,JDK-8271315,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2u63v:",9223372036854775807,b14,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@568a5b31,,,,,,,,,"2021-09-07 12:06;roboduke;Changeset: 270a9d92
Author:    Alexey Ivanov <aivanov@openjdk.org>
Date:      2021-09-07 19:05:35 +0000
URL:       https://git.openjdk.java.net/jdk/commit/270a9d929307dce52e6961e57492c03a633ed044
;;;","2022-09-15 06:48;goetz;Fix request [17u]

I backport this for parity with 17.0.6-oracle.
No risk, only a test change.
Clean backport.
Test passes.;;;","2022-09-15 06:59;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/679
Date: 2022-09-15 13:50:39 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,
Turning off JpAllowDowngrades (or Upgrades),JDK-8273040,5057528,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,herrick,herrick,herrick,2021-08-26 11:02,2022-07-18 02:38,2023-10-01 09:57,2021-09-14 10:48,16,17,,,,,,18,tools,,0,jdk17u-fix-request,jdk17u-fix-yes,sn_100,sn_101,sn_102,,,,,,,,,,,,,,,,,"Strange behavior noticed if I jpackage an application creating both an ""msi"" and an ""exe"" installer.

1.) If I install the msi with ""misexec -i <name>-<version>.msi"" I can repeat that command over and over, and the app is ""reinstalled"" on top of existing one (same veersion).

2.) If I Install the exe over and over again I get the same thing - application wil ""re-install"" without any dialog or unexpected behavior.

Now trying one of each that is not the same ...
3.) If I install the exe first, then try to install the msi, I get a dialog saying that another version of the app is already installed, and I should remove it first.

4.) If I first install the msi, then try to install the exe, it will hang. (possibly the embedded msi is trying to display the dialog as in 3, but cannot because msi is being invoked from the exe wrapper.

Note that in case 1), if I re-build the msi with the same version, then run msiexec again I will get the dialog as in 3, so apparently  windows can tell it is a different msi file, even with all the same attributes (name version etc) but just different times.
This would explain 4, because the exe wrapper always builds a new msi to wrap.

In general we set the wix parameters to allow both upgrades and downgrades (though this can be overridden with custom main.wix file resource), and generally have acceptable behavior when re-installing the same build, but when reinstalling different build of the same version thie above behavior makes little sense.




",,,,,,,,,,,JDK-8290435,JDK-8289955,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,x86_64,,,,,,,,,windows,,,,,"0|i2u637:",9223372036854775807,b15,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@3656b41f,,,,,,,,,"2021-08-26 11:08;herrick;note the problem is not dependent on mixing msi and exe builds.
I can create the hang just by building the exe - running the exe, and then re-building the exe and re-running the exe without uninstalling.
I think at least this hang needs to be taken care of, possibly by adding the /quiet arg when the msi is launched from the exe wrapper.

;;;","2021-08-26 11:24;herrick;We cannot run msi with the /quiet (or similar) options since there are many cases where we need to display dialogs from the installer, such as when using --win-dir-chooser.  In such cases running msi with /quiet causes installer to fail silently.
We can show these dialogs from msi wrapped in exe, so we need to figure how to show the ""same version already installed"" dialog as well (or how to skip it and just do ""repair"" action like re-installing the same build does.

;;;","2021-09-03 10:05;herrick;There are two problems here.
1.) Although comments in override.wxi state you can disallow upgrades or downgrades, you can't.
The variables JpAllowUpgrades and JpAllowDowngrades are defined to equal ""yes"", and you can overwrite these values in overrides.wxi, but  the code in main.wix does not care what the values are, only if they are defined:
<?ifdef JpAllowDowngrades ?>
...
and nothing you can do in overrides.wxi will cause the variable to be undefined.
This part is easily fixed, by using <?if $(var.JpAllowDowngrades) == ""yes"" ?> instead, which then gets to second problem.
2.) If upgrades or downgrades can be disallowed, the msi will want to show the dialog when disallowing.  This brings up the problem described above, where hang occurs when launching msiexec from MsiWrapper.cpp
One  option I tries was to use the /passive arg, but this has the same problem as /quiet, in that dialogs we want are not displayed (like from win-dir-chosser option).


3) an unrelated problem, comment in overrides.wxi says you can change the variable JpCompressedMsi to change the Compression of the Msi.
You can't.  The variable is defined and set in main.wxi:
  <?define JpCompressedMsi=yes ?>
changing it to any other value causes an invalid msi to be created for a java runtime. Instead of containing the runtime, the runtime will be side by side with the msi file.  An application has a similar problem.
The payload will be places side by side with the msi file.  If the msi is run from that directory it installs fine, but if msi file is copied anywhere else it will install nothing.
Unless someone can understand what this is, I suggest we just remove the comment in overrides.msi that says you can overwrite tis variable to modify the compression.

;;;","2021-09-07 07:43;herrick;I am not seeing the hang when actually downgrading (v 1.1 to v 1.0) with an exe - I get the dialog and all works as expected.  I am seeing the hang when re-installing a different build of the same version.
This is after changing main.wxs to allow setting JpAllowDowngrade = ""no"" in overrides.wxi;;;","2021-09-07 08:41;asemenyuk;3) Is because msi and exe installers are not the same, they have different PackageCode which is generated automatically by MSI. Even if you create two msi installers using the same jpackage command line they will be different as they will have different PackageCodes. It is OK to run multiple times the same MSI, but running different msi-s with the same version, ProductCode, etc, but different PackageCodes will fail.

4) exe installer is a wrapper that calls msiexec.exe and it doesn't handle failures of msiexec.exe. It simply hangs when an installation error occurs because there is no reliable way to detect if msiexec.exe is running or stuck. This part of exe installer needs to be revised: in order to handle installation errors, we should call MSI API directly instead of invoking msiexec.exe.;;;","2021-09-07 09:17;asemenyuk;> comment in overrides.wxi says you can change the variable JpCompressedMsi to change the Compression of the Msi.
> You can't.
This is for debug purposes to review the payload of MSI file.

Comments in overrides.wxi are misleading and outdated, they needs to be updated.

Also, ""<?include $(var.JpConfigDir)/overrides.wxi ?>"" in main.wxs is misplaced, it should proceed ""<?ifdef JpAllowUpgrades ?>"".;;;","2021-09-13 06:36;herrick;yes - just be moving the include you can disable downgrades (or upgrades) using
 <?undef JpAllowDowngrades ?>
I believe all that is needed for this bug is to do that and update comments in overrides.wxi accordingly.
I also contend the default for a runtime installer should be to disallow downgrades.

The problem of hanging when installing a different build of the same version of an app is a separate issue that could only be addressed by rewriting msi wrapper to not use msiexec.  This could be a future project, but is not a priority since it doesn't effect end users (just developers) and there is easy work-around.;;;","2021-09-14 10:48;roboduke;Changeset: 22a7191f
Author:    Andy Herrick <herrick@openjdk.org>
Date:      2021-09-14 17:45:49 +0000
URL:       https://git.openjdk.java.net/jdk/commit/22a7191f700c6966c59dcd12476f01452243542b
;;;","2022-07-14 08:35;goetz;Fix request [17u]

I backport this for parity with 17.0.5-oracle.
Clean backport.
SAP nightly testing passed.;;;","2022-07-14 08:43;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/550
Date: 2022-07-14 15:35:04 +0000;;;",,,,,,,,,,,,,,,,
"JShell crashes when naming variable or method ""abstract"" or ""strictfp""",JDK-8273039,5057515,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,jlahoda,webbuggrp,webbuggrp,2021-08-26 08:27,2021-11-25 00:26,2023-10-01 09:57,2021-11-18 23:51,16,17,18,,,,,18,tools,,0,dcsad,regression,reproducer-yes,webbug,,,,,,,,,,,,,,,,,,"ADDITIONAL SYSTEM INFORMATION :
Tested with the JShells of the following JDK versions on Windows 10 Pro 20H2 (build 19042.1165):
working in OpenJDK 64-Bit Server VM AdoptOpenJDK (build 15.0.2+7, mixed mode, sharing)
crashing in OpenJDK 64-Bit Server VM Temurin-16.0.2+7 (build 16.0.2+7, mixed mode, sharing)
crashing in OpenJDK 64-Bit Server VM (build 17+35-2724, mixed mode, sharing)
crashing in OpenJDK 64-Bit Server VM (build 18-ea+11-557, mixed mode, sharing)

A DESCRIPTION OF THE PROBLEM :
In the JShell when naming a variable or method ""abstract"" or ""strictfp"", the JShell crashes with an InternalError. This happens since JDK 16 and also in latest JDK 17 and JDK 18. In JDK 9 until JDK 15 a normal error message is shown that ""abstract"" is nonsense in this place.
Bug was possibly introduced by implementation of https://bugs.java.com/bugdatabase/view_bug.do?bug_id=8247456

REGRESSION : Last worked in version 15

STEPS TO FOLLOW TO REPRODUCE THE PROBLEM :
Open /path/to/jdk/bin/jshell.exe
jshell> int abstract = 1;
or
jshell> int strictfp = 1;

EXPECTED VERSUS ACTUAL BEHAVIOR :
EXPECTED -
JDK 15:
jshell> int abstract = 1;
|  Error:
|  '.class' expected
|  int abstract = 1;
|      ^
|  Error:
|  class, interface, or enum expected
|  int abstract = 1;
|      ^-------^
|  Error:
|  unexpected type
|    required: value
|    found:    class
|  int abstract = 1;
|  ^--^
ACTUAL -
JShell crashes with the following StackTrace (JDK 18, line numbers differ in other versions):
Exception in thread ""main"" java.lang.InternalError: Exception during analyze - java.lang.AssertionError
        at jdk.jshell/jdk.jshell.TaskFactory$AnalyzeTask.analyze(TaskFactory.java:393)
        at jdk.jshell/jdk.jshell.TaskFactory$AnalyzeTask.<init>(TaskFactory.java:384)
        at jdk.jshell/jdk.jshell.TaskFactory.lambda$analyze$1(TaskFactory.java:177)
        at jdk.jshell/jdk.jshell.TaskFactory.lambda$runTask$4(TaskFactory.java:212)
        at jdk.compiler/com.sun.tools.javac.api.JavacTaskPool.getTask(JavacTaskPool.java:193)
        at jdk.jshell/jdk.jshell.TaskFactory.runTask(TaskFactory.java:205)
        at jdk.jshell/jdk.jshell.TaskFactory.analyze(TaskFactory.java:174)
        at jdk.jshell/jdk.jshell.TaskFactory.analyze(TaskFactory.java:160)
        at jdk.jshell/jdk.jshell.TaskFactory.analyze(TaskFactory.java:149)
        at jdk.jshell/jdk.jshell.ExpressionToTypeInfo.expressionInfo(ExpressionToTypeInfo.java:239)
        at jdk.jshell/jdk.jshell.Eval.processExpression(Eval.java:604)
        at jdk.jshell/jdk.jshell.Eval.lambda$sourceToSnippets$1(Eval.java:220)
        at jdk.jshell/jdk.jshell.TaskFactory.lambda$parse$6(TaskFactory.java:254)
        at jdk.jshell/jdk.jshell.TaskFactory.lambda$runTask$4(TaskFactory.java:212)
        at jdk.compiler/com.sun.tools.javac.api.JavacTaskPool.getTask(JavacTaskPool.java:193)
        at jdk.jshell/jdk.jshell.TaskFactory.runTask(TaskFactory.java:205)
        at jdk.jshell/jdk.jshell.TaskFactory.parse(TaskFactory.java:139)
        at jdk.jshell/jdk.jshell.TaskFactory.parse(TaskFactory.java:239)
        at jdk.jshell/jdk.jshell.Eval.sourceToSnippets(Eval.java:194)
        at jdk.jshell/jdk.jshell.Eval.eval(Eval.java:130)
        at jdk.jshell/jdk.jshell.JShell.eval(JShell.java:493)
        at jdk.jshell/jdk.internal.jshell.tool.JShellTool.processSource(JShellTool.java:3618)
        at jdk.jshell/jdk.internal.jshell.tool.JShellTool.processSourceCatchingReset(JShellTool.java:1342)
        at jdk.jshell/jdk.internal.jshell.tool.JShellTool.processInput(JShellTool.java:1240)
        at jdk.jshell/jdk.internal.jshell.tool.JShellTool.run(JShellTool.java:1211)
        at jdk.jshell/jdk.internal.jshell.tool.JShellTool.start(JShellTool.java:995)
        at jdk.jshell/jdk.internal.jshell.tool.JShellToolBuilder.start(JShellToolBuilder.java:261)
        at jdk.jshell/jdk.internal.jshell.tool.JShellToolProvider.main(JShellToolProvider.java:120)
Caused by: java.lang.IllegalStateException: java.lang.AssertionError
        at jdk.compiler/com.sun.tools.javac.api.JavacTaskImpl.analyze(JavacTaskImpl.java:383)
        at jdk.jshell/jdk.jshell.TaskFactory$AnalyzeTask.analyze(TaskFactory.java:390)
        ... 27 more
Caused by: java.lang.AssertionError
        at jdk.compiler/com.sun.tools.javac.comp.Attr.visitTree(Attr.java:5128)
        at jdk.compiler/com.sun.tools.javac.tree.JCTree$Visitor.visitModifiers(JCTree.java:3462)
        at jdk.compiler/com.sun.tools.javac.tree.JCTree$JCModifiers.accept(JCTree.java:2937)
        at jdk.compiler/com.sun.tools.javac.comp.Attr.attribTree(Attr.java:674)
        at jdk.compiler/com.sun.tools.javac.comp.Attr.visitErroneous(Attr.java:5120)
        at jdk.compiler/com.sun.tools.javac.tree.JCTree$JCErroneous.accept(JCTree.java:3256)
        at jdk.compiler/com.sun.tools.javac.comp.Attr.attribTree(Attr.java:674)
        at jdk.compiler/com.sun.tools.javac.comp.Attr.attribExpr(Attr.java:727)
        at jdk.compiler/com.sun.tools.javac.comp.Attr.visitExec(Attr.java:2272)
        at jdk.compiler/com.sun.tools.javac.tree.JCTree$JCExpressionStatement.accept(JCTree.java:1584)
        at jdk.compiler/com.sun.tools.javac.comp.Attr.attribTree(Attr.java:674)
        at jdk.compiler/com.sun.tools.javac.comp.Attr.attribStat(Attr.java:748)
        at jdk.compiler/com.sun.tools.javac.comp.Attr.attribStats(Attr.java:767)
        at jdk.compiler/com.sun.tools.javac.comp.Attr.visitBlock(Attr.java:1445)
        at jdk.compiler/com.sun.tools.javac.tree.JCTree$JCBlock.accept(JCTree.java:1091)
        at jdk.compiler/com.sun.tools.javac.comp.Attr.attribTree(Attr.java:674)
        at jdk.compiler/com.sun.tools.javac.comp.Attr.attribStat(Attr.java:748)
        at jdk.compiler/com.sun.tools.javac.comp.Attr.visitMethodDef(Attr.java:1235)
        at jdk.compiler/com.sun.tools.javac.tree.JCTree$JCMethodDecl.accept(JCTree.java:921)
        at jdk.compiler/com.sun.tools.javac.comp.Attr.attribTree(Attr.java:674)
        at jdk.compiler/com.sun.tools.javac.comp.Attr.attribStat(Attr.java:748)
        at jdk.compiler/com.sun.tools.javac.comp.Attr.attribClassBody(Attr.java:5479)
        at jdk.compiler/com.sun.tools.javac.comp.Attr.attribClass(Attr.java:5370)
        at jdk.compiler/com.sun.tools.javac.comp.Attr.attribClass(Attr.java:5201)
        at jdk.compiler/com.sun.tools.javac.comp.Attr.attrib(Attr.java:5146)
        at jdk.compiler/com.sun.tools.javac.main.JavaCompiler.attribute(JavaCompiler.java:1317)
        at jdk.compiler/com.sun.tools.javac.main.JavaCompiler.attribute(JavaCompiler.java:1290)
        at jdk.compiler/com.sun.tools.javac.api.JavacTaskImpl.analyze(JavacTaskImpl.java:404)
        at jdk.compiler/com.sun.tools.javac.api.JavacTaskImpl.lambda$analyze$1(JavacTaskImpl.java:379)
        at jdk.compiler/com.sun.tools.javac.api.JavacTaskImpl.invocationHelper(JavacTaskImpl.java:152)
        at jdk.compiler/com.sun.tools.javac.api.JavacTaskImpl.analyze(JavacTaskImpl.java:379)
        ... 28 more

---------- BEGIN SOURCE ----------
Shortest code in JShell:
int abstract<RETURN>
---------- END SOURCE ----------

CUSTOMER SUBMITTED WORKAROUND :
Don't write invalid Java code.
""abstract"" and ""strictfp"" give this result. Other keywords and modifiers ""work"" as expected (as they are giving a normal error message).

FREQUENCY : always


",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8247456,,,,,,,,,,generic,,,,,,,16,,generic,,,,,"0|i2u60b:",9223372036854775807,b25,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@ef6d34f,,,,,,,,,"2021-08-26 10:53;adev;The issue is reproducible. While using ""strictfp"" and ""abstract"" as variable name, jshell crashes with:
 Exception in thread ""main"" java.lang.InternalError: Exception during analyze - java.lang.AssertionError 

The cause of the exception be may due to the changes introduced by https://bugs.openjdk.java.net/browse/JDK-8247456.;;;","2021-08-26 10:55;adev;The issue is reproducible with JDK 16 onwards.
JDK 15: Pass
JDK 16: Fail with exception
JDK 17: Fail with exception
JDK 18: Fail with exception
;;;","2021-11-18 23:51;roboduke;Changeset: 2f20b0d8
Author:    Jan Lahoda <jlahoda@openjdk.org>
Date:      2021-11-19 07:49:58 +0000
URL:       https://git.openjdk.java.net/jdk/commit/2f20b0d8daca6bdc53b4b9e1837c428930d34236
;;;",,,,,,,,,,,,,,,,,,,,,,,
Slow LoginContext.login() on multi threading application ,JDK-8273026,5057506,Bug,Closed,JDK,JDK,software,duke,,,P3,Fixed,inakonechnyy,inakonechnyy,inakonechnyy,2021-08-26 06:36,2022-09-26 06:39,2023-10-01 09:57,2021-10-29 04:38,11,9,,,,,,18,security-libs,,0,jdk11u-fix-request,jdk11u-fix-yes,jdk13u-fix-request,jdk13u-fix-yes,jdk15u-fix-request,jdk15u-fix-yes,jdk17u-fix-request,jdk17u-fix-SQE-ok,jdk17u-fix-yes,,,,,,,,,,,,,"LoginContext.login() performs slow in comparison with OpenJDK8. 
ServiceLoader lookup ( method ServiceLoader.load() ) performs many times repeatedly, each time when application calls LoginContext.login().   
On multi-threading application, this leads to having a lot of threads waiting for synchronized code URLClassPath.getLoader().

""HTTP Handler 10.21.48.63"" #455 daemon prio=5 os_prio=0 cpu=1828.13ms elapsed=150.65s allocated=195M defined_classes=0 tid=0x000002636709c000 nid=0x4a18 waiting for monitor entry  [0x000000aef69fb000]
   java.lang.Thread.State: BLOCKED (on object monitor)
        at jdk.internal.loader.URLClassPath.getLoader(java.base@11.0.11/URLClassPath.java:422)
        - waiting to lock <0x00000007139003c8> (a jdk.internal.loader.URLClassPath)
        at jdk.internal.loader.URLClassPath$1.next(java.base@11.0.11/URLClassPath.java:340)
        at jdk.internal.loader.URLClassPath$1.hasMoreElements(java.base@11.0.11/URLClassPath.java:351)
        at java.net.URLClassLoader$3$1.run(java.base@11.0.11/URLClassLoader.java:687)
        at java.net.URLClassLoader$3$1.run(java.base@11.0.11/URLClassLoader.java:685)
        at java.security.AccessController.doPrivileged(java.base@11.0.11/Native Method)
        at java.net.URLClassLoader$3.next(java.base@11.0.11/URLClassLoader.java:684)
        at java.net.URLClassLoader$3.hasMoreElements(java.base@11.0.11/URLClassLoader.java:709)
        at java.lang.CompoundEnumeration.next(java.base@11.0.11/ClassLoader.java:3032)
        at java.lang.CompoundEnumeration.hasMoreElements(java.base@11.0.11/ClassLoader.java:3041)
        at java.lang.CompoundEnumeration.next(java.base@11.0.11/ClassLoader.java:3032)
        at java.lang.CompoundEnumeration.hasMoreElements(java.base@11.0.11/ClassLoader.java:3041)
        at java.util.ServiceLoader$LazyClassPathLookupIterator.nextProviderClass(java.base@11.0.11/ServiceLoader.java:1203)
        at java.util.ServiceLoader$LazyClassPathLookupIterator.hasNextService(java.base@11.0.11/ServiceLoader.java:1221)
        at java.util.ServiceLoader$LazyClassPathLookupIterator.hasNext(java.base@11.0.11/ServiceLoader.java:1265)
        at java.util.ServiceLoader$2.hasNext(java.base@11.0.11/ServiceLoader.java:1300)
        at java.util.ServiceLoader$3.hasNext(java.base@11.0.11/ServiceLoader.java:1385)
(1)     at javax.security.auth.login.LoginContext.invoke(java.base@11.0.11/LoginContext.java:691)
        at javax.security.auth.login.LoginContext$4.run(java.base@11.0.11/LoginContext.java:665)
        at javax.security.auth.login.LoginContext$4.run(java.base@11.0.11/LoginContext.java:663)
        at java.security.AccessController.doPrivileged(java.base@11.0.11/Native Method)
        at javax.security.auth.login.LoginContext.invokePriv(java.base@11.0.11/LoginContext.java:663)
        at javax.security.auth.login.LoginContext.login(java.base@11.0.11/LoginContext.java:574)
        at com.application.server.AuthenticationManager.authenticate_JAAS(AuthenticationManager.java:191)
        at com.application.server.AuthenticationManager.authenticate(AuthenticationManager.java:113)
        at com.application.server.HTTPState.getBasicAuthenticatedUser(HTTPState.java:1183)
        at com.application.server.HTTPState.getAuthenticatedUser(HTTPState.java:1070)
        at com.application.server.HTTPState.processHeader(HTTPState.java:324)
        at com.application.server.Dispatch.processHeader(Dispatch.java:274)
        at com.application.server.Dispatch.run(Dispatch.java:417)
        at com.application.util.pool.PooledThread.run(PooledThread.java:127)
",,,,,,,,,,,JDK-8276860,JDK-8277568,JDK-8277041,JDK-8277651,JDK-8277258,JDK-8288788,JDK-8288789,,,,,,,,,,,,,,,JDK-8230297,,,JDK-8230297,,,,,,,,,,,,,,,,,,,,,,9,,,,,,,"0|i2u5yb:",9223372036854775807,b22,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@5c1d831a,,,,,,,Verified,,"2021-08-26 06:50;inakonechnyy;A similar issue has already has been reported to OpenJDK, as bug JDK-8230297. Our observed bug has different symptoms, but the root cause analyses lead to the same conclusions:

 ""This issue was tracked down to JDK-8047789 which changed the way the lookup of LoginModules is done in LoginContext.invoke. Previously, it was a simple Class.forName that is of course extremely optimized. After JDK-8047789, there is first a ServiceLoader-based lookup for the class. This lookup doesn't seem to be cached. ""

This services lookup performs every time in login operation, even if the login module isn't declared as a service.
I'd like to implement an approach with a static cached services list, one instance for each LoginContext, that gets filled with discovered services at the initialization of the LoginContext object. And performs cache lookup in the login() method. If LoginModule wasn't found in the cache, the login module will be initialized via reflection.
This approach was tested and gives pretty good performance values, comparable with Java8.  
;;;","2021-10-27 05:26;inakonechnyy;The proposed approach above leads to failure in JCK test, the code was corrected to get JCK passed. Details in linked PR review. ;;;","2021-10-29 04:38;roboduke;Changeset: c0cda1db
Author:    Ilarion Nakonechnyy <Ilarion@azul.com>
Committer: Weijun Wang <weijun@openjdk.org>
Date:      2021-10-29 11:37:45 +0000
URL:       https://git.openjdk.java.net/jdk/commit/c0cda1db4fe74b86faa12136336bdf98c96758d2
;;;","2021-10-29 10:56;inakonechnyy;Request the backport to 11u, 13u:
The patch applies with a conflict. 
For Java 11 The fix was tested by run-test-tier2, looks good. ;;;","2021-10-30 01:41;clanger;[~inakonechnyy], as we want to make sure that backports of bugfixes bubble down the LTS releases from top, can you please backport this to jdk17u first? Also, please open a PR for the backport to jdk11u-dev.;;;","2021-11-01 08:36;inakonechnyy;PR for jdk17u was created. The fix is applied cleanly, tested with tier-2.;;;","2021-11-09 03:50;inakonechnyy;Kindly reminding about PR for jdk17u, waiting for a sponsor for this PR. ;;;","2021-11-11 01:15;aph;This one looks like it probably meets the ""gross performance deficit"" criterion at https://wiki.openjdk.java.net/display/JDKUpdates/JDK11u, so it should be considered.;;;","2021-11-22 09:05;inakonechnyy;Fix request for jdk15u-dev. Fix applies with conflicts, was tested by tier-2;;;","2022-04-08 03:43;sqetools;verified;;;",,,,,,,,,,,,,,,,
LibraryCallKit::sharpen_unsafe_type does not handle narrow oop array,JDK-8273020,5057397,Bug,Resolved,JDK,JDK,software,duke,,,P5,Fixed,thartmann,thartmann,thartmann,2021-08-26 01:27,2021-09-27 23:14,2023-10-01 09:57,2021-08-26 22:39,11,17,18,,,,,18,hotspot,,0,c2,hs-comp-triaged,noreg-hard,oracle-triage-11,oracle-triage-17,oracle-triage-18,redhat-interest,,,,,,,,,,,,,,,"The following code in LibraryCallKit::sharpen_unsafe_type sets elem_type to NULL if the array element is a narrow oop:

const TypeOopPtr *elem_type = adr_type->is_aryptr()->elem()->isa_oopptr();
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-7023898,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2u5w3:",9223372036854775807,b13,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2021-08-26 01:30;thartmann;ILW = Type not sharpened in C2 (should not have any impact with current code), with unsafe array accesses, no workaround = LLH = P5;;;","2021-08-26 22:39;roboduke;Changeset: c925c7f3
Author:    Tobias Hartmann <thartmann@openjdk.org>
Date:      2021-08-27 05:38:24 +0000
URL:       https://git.openjdk.java.net/jdk/commit/c925c7f3e8e1470d0a157ca3387d11137366706f
;;;",,,,,,,,,,,,,,,,,,,,,,,,
ImageIO.read() throws incorrect exception type,JDK-8272998,5057373,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,prr,mowerfel,mowerfel,2021-08-25 14:10,2023-09-11 03:47,2023-10-01 09:57,2022-08-04 13:53,16,17,8,,,,,20,client-libs,,0,11-bp,17-bp,8-bp,amazon-interest,eel-fuzz,fuzzing,jdk17u-fix-request,jdk17u-fix-yes,sn_103,sn_105,sn_106,sn_107,sn_118,sn_119,sn_120,sn_121,sn_122,sn_123,sn_124,,,"The following test throws IllegalArgumentException in ImageIO.read(). According to spec only the following exceptions are expected:

 -  IllegalArgumentException - if input is null.
 -  IOException - if an error occurs during reading or when not able to create required ImageInputStream.

There is a discrepancy between the Java specification and the implementation which needs to be resolved. According to the specification the expected outcome for this scenario would be an IOException.

../../../jdk/jdk-17.jdk/Contents/Home/bin/java Test
Exception in thread ""main"" java.lang.IllegalArgumentException: Invalid scanline stride
	at java.desktop/java.awt.image.ComponentSampleModel.getBufferSize(ComponentSampleModel.java:265)
	at java.desktop/java.awt.image.ComponentSampleModel.verify(ComponentSampleModel.java:243)
	at java.desktop/java.awt.image.ComponentSampleModel.<init>(ComponentSampleModel.java:158)
	at java.desktop/java.awt.image.PixelInterleavedSampleModel.<init>(PixelInterleavedSampleModel.java:87)
	at java.desktop/java.awt.image.PixelInterleavedSampleModel.createCompatibleSampleModel(PixelInterleavedSampleModel.java:144)
	at java.desktop/javax.imageio.ImageTypeSpecifier.getSampleModel(ImageTypeSpecifier.java:1039)
	at java.desktop/javax.imageio.ImageTypeSpecifier.createBufferedImage(ImageTypeSpecifier.java:1072)
	at java.desktop/javax.imageio.ImageReader.getDestination(ImageReader.java:2877)
	at java.desktop/com.sun.imageio.plugins.jpeg.JPEGImageReader.readInternal(JPEGImageReader.java:1159)
	at java.desktop/com.sun.imageio.plugins.jpeg.JPEGImageReader.read(JPEGImageReader.java:1127)
	at java.desktop/javax.imageio.ImageIO.read(ImageIO.java:1470)
	at java.desktop/javax.imageio.ImageIO.read(ImageIO.java:1365)
	at Test.reproduceIssue(Test.java:46)
	at Test.<init>(Test.java:28)
	at Test.main(Test.java:78)",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8078589,,,,,,,,,,generic,,,,,,,,,generic,,,,,"0|i2u5qr:",9223372036854775807,b10,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@377c353d,,,,,,,,,"2021-08-27 00:44;jdv;I am seeing IllegalArgumentException and i dont see NegativeArraySizeException(which is mentioned in description) in latest JDK code.
Because of fuzzed image looks like we are hitting this scenario.;;;","2022-06-08 14:22;prr;ImageIO.read(..) is intended to be a convenience interface so it shouldn't
have an array of conditions to deal with. Apart from the programming mistake
of setting no input, it should just be some kind of IOException - usually an IIOException

And IAE isn't actually the only possible exception, so just catch RuntimeException and
report it wrapped in the checked IIOException.

That's probably the fix we want here, but there's potential for some follow up work.

ImageReader.read(...) declares a number of possible RuntimeExceptions including IAE
although the cited possible reasons for that isn't as comprehensive as it should be, but
it at least has something.

The same is true of some *public* APIs in ImageIO and the imaging classes that are
called internally to ImageReader.read()

In principle we should only throw these exceptions if it was due to a programmer error.

Eg if we are decoding an image and the values would cause an exception - the image
being too large to store is probably the main example - that is very borderline in
terms of being something we'd expect an application to be prepared.

So what that means is where we (internally) call these we should do some verification
before calling them OR catch the exception and rethrow as IIOException. The latter
is easier as it can be tricky and onerous to  check all the possible reasons exactly
as the implementation does, even if it properly enumerates them.

But we DO want to propagate an IAE that corresponds to a reason that ImageReader.read(..) documents.

Also the onus for that part is on the actual plugin - which is one good reason for catching RTE
at the ImageIO.read() level - so there's no absolute guarantee  that can be made by the framework.

A couple of specifics  :
- java.awt.image.PixelInterleavedSampleModel.createCompatibleSampleModel() doesn't document enough of the
reasons it might throw IAE, and nor do some of the called methods there

Obviously if w*h > max_int it will be a problem for array backed storage, but there are places that
fail to mention that w*h*components-per-pixel (ie including pixelStride) need to be < max-int too ..
perhaps because it can depend on whether each component is stored in a separate bank (array)

- javax.imageio.ImageTypeSpecifier.getSampleModel() is a public API and doesn't even document the
reasons it might get IAE from calling createCompatibleSampleModel().
It probably has a tricky task here since it depends on what SampleModel is called and I can also
believe that the exceptions documented have changed over time.
Perhaps this just needs to be broad like
throws IAE if a SampleModel of the specified width and height exceed the maximum sizes supported.
i.e you might be able to have w*h be < max_int but w*h*pixelStride exceeds it ..

I think we can leave those for some other documentation focused-fix.;;;","2022-06-09 12:59;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/9113
Date: 2022-06-09 19:53:22 +0000;;;","2022-08-04 13:53;dukebot;Changeset: 6ad6b1c4
Author:    Phil Race <prr@openjdk.org>
Date:      2022-08-04 20:51:48 +0000
URL:       https://git.openjdk.org/jdk/commit/6ad6b1c454cbc41de5a401aecda910d668c71e39
;;;","2023-07-13 16:40;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/1582
Date: 2023-07-13 23:32:49 +0000;;;","2023-09-07 10:51;jshivayogi;Fix request (17u)

Clean trivial backport to throw correct exception type;;;",,,,,,,,,,,,,,,,,,,,
JNDI DNS provider fails to resolve SRV entries when IPV6 stack is enabled,JDK-8272996,5057371,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,aefimov,macarte,macarte,2021-08-25 13:16,2023-07-17 05:45,2023-10-01 09:57,2022-02-07 04:11,16,,,,,,,19,core-libs,,1,jdk17u-fix-request,jdk17u-fix-yes,jdk18u-fix-request,jdk18u-fix-SQE-OK,jdk18u-fix-yes,noreg-hard,,,,,,,,,,,,,,,,"Background:
Minecraft is using JNDI to resolve SRV entries from DNS when connecting to server (code below).

We have recently received a report about this functionality not working (https://bugs.mojang.com/browse/MC-232009) and it seems that following steps are required to reproduce:
·       User is on Windows
·       IPv6 stack enabled, but no connectivity
·       At least one DNSv6 server is configured

The original report mentions this happening only with non-default ports.  In fact it’s due to that specific server configuration (redirect pointing to the same host, but different port)

Simplified code:

Hashtable<String, String> env = new Hashtable<>();
env.put(""java.naming.factory.initial"", ""com.sun.jndi.dns.DnsContextFactory"");
env.put(""java.naming.provider.url"", ""dns:"");
env.put(""com.sun.jndi.dns.timeout.retries"", ""1"");
DirContext context = new InitialDirContext(env);
Attributes attributes = context.getAttributes(""_minecraft._tcp."" + host, new String[]{""SRV""});
Attribute srvAttribute = attributes.get(""srv"");

Problem:
SRV resolver is always throwing java.io.UncheckedIOException: java.net.SocketException: Network is unreachable: connect, even if there are also valid IPv4 DNS servers configured.

Analysis:
·       JDK internals changed in 15 (JDK-7006496) to now also return IPv6 DNS entries (and usually they are listed before v4 entries)
·       Datagram socket started throwing UncheckedIOException on connection failure (JDK-8232673 + JDK-8235783) - https://github.com/openjdk/jdk/blob/master/src/java.base/share/classes/sun/nio/ch/DatagramSocketAdaptor.java#L120
·       During DNS query (https://github.com/openjdk/jdk/blob/master/src/jdk.naming.dns/share/classes/com/sun/jndi/dns/DnsClient.java#L171-L319) method is supposed to check all servers and ignore failed ones (see doNotRetry variable), but only handles few exception types and not the one thrown from `doUdpQuery` call on line 214.","Windows 10 21H1
Minecraft 1.17.1, Bundled Java 16 (issue persists on AdoptOpenJDK HotSpot 16)",,,,,,,,,,JDK-8282430,JDK-8282269,JDK-8282517,,,,,,,,,,,,,,,,,JDK-8272997,,,,,,,,,,,,,,,,,,,,,,,,,,,,,windows_10,,,,,"0|i2u5qb:",9223372036854775807,b09,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@226ed983,,,,,,,,,"2021-08-26 10:42;macarte;copy-paste error fixed: reference to JDK-8232817 was supposed to be JDK-8232673;;;","2021-08-26 10:45;macarte;example  server where this bug prevents connection: ""mc-central.net"" (which resolves to sponsor1234.mccentral.org);;;","2022-02-03 12:16;macarte;[~aefimov] did we provide enough details on this issue for you? We've recently been in contact with the Minecraft folks and we do know it's still an issue with 17.0.1 (so likely all of 17.0.x). Are there any known workarounds we can try until a solution lands?;;;","2022-02-04 07:42;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/7353
Date: 2022-02-04 15:36:35 +0000;;;","2022-02-07 04:11;roboduke;Changeset: 4c169495
Author:    Aleksei Efimov <aefimov@openjdk.org>
Date:      2022-02-07 12:10:14 +0000
URL:       https://git.openjdk.java.net/jdk/commit/4c169495a2c4bfdcbc82e94e9ca1ee0cc050daf9
;;;","2022-02-16 07:58;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk18u/pull/25
Date: 2022-02-16 15:53:07 +0000;;;","2022-02-17 08:41;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk18u/pull/29
Date: 2022-02-17 16:36:59 +0000;;;","2022-02-17 10:22;macarte;Fix request

JNDI's DnsClient can fail with UncheckedIOException during connect or disconnect method calls. It is a known behavior of DatagramSocket.

Currently, DnsClient method fast-fails when UncheckedIOException is observed during connect attempt. But it supposed to mark such server as invalid and continue checking other servers.

Clean backport

The goal is to backport from 18u to 17u-dev

Testing: JNDI/DNS testing passed and tier1 tests show no failures relevant to the proposed changed

An unrelated issue was found during tier1 testing and a JBS issue has been created: https://bugs.openjdk.java.net/browse/JDK-8282023

;;;","2022-02-17 10:23;macarte;Please note that the PR is currently experiencing issues that seem unrelated to the fix itself: the test stage is unable to download the artifact from the build stage [investigating];;;","2022-02-17 10:49;aefimov;A note about 18u backport testing: available JNDI/DNS tests have been executed in a CI and no failures have been observed with a change from the jdk18u 'pr/29' branch;;;","2022-02-22 11:57;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk17u-dev/pull/172
Date: 2022-02-22 19:52:24 +0000;;;","2022-02-23 20:28;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk17u-dev/pull/176
Date: 2022-02-24 04:23:07 +0000;;;","2022-02-24 08:17;macarte;Fix request

JNDI's DnsClient can fail with UncheckedIOException during connect or disconnect method calls. It is a known behavior of DatagramSocket.

Currently, DnsClient method fast-fails when UncheckedIOException is observed during connect attempt. But it supposed to mark such server as invalid and continue checking other servers.

Clean backport

Testing: JNDI/DNS testing passed as do tier1 tests, also Minecraft devs confirmed the fix addresses the issue
;;;",,,,,,,,,,,,,
Reference discovery is confused about atomicity and degree of parallelism,JDK-8272985,5057356,Bug,Closed,JDK,JDK,software,duke,,,P2,Fixed,tschatzl,tschatzl,tschatzl,2021-08-25 07:57,2023-01-25 00:43,2023-10-01 09:57,2021-09-06 02:09,17,18,,,,,,18,hotspot,,0,gc-g1,gc-parallel,gc-pending-review,jdk11u-fix-request,jdk11u-fix-yes,jdk17u-fix-request,jdk17u-fix-yes,,,,,,,,,,,,,,,"This code in ReferenceProcessor::discover_reference enqueues a reference during discovery looks like this:

     if (_discovery_is_mt) {
[1]    add_to_discovered_list_mt(*list, obj, discovered_addr);
     } else {
[2]    // We do a raw store here: the field will be visited later when processing
       // the discovered references.
       oop current_head = list->head();
       // The last ref must have its discovered field pointing to itself.
       oop next_discovered = (current_head != NULL) ? current_head : obj;

       assert(discovered == NULL, ""control point invariant"");
       RawAccess<>::oop_store(discovered_addr, next_discovered);
       list->set_head(obj);
       list->inc_length(1);

       log_develop_trace(gc, ref)(""Discovered reference ("" INTPTR_FORMAT "": %s)"", p2i(obj), obj->klass()->internal_name());
     }

[2] argues that there is no need for a barrier because we visit this later when processing the discovered references *during gc*.

However, some G1 code sets _discovery_is_mt to false for concurrent precleaning (in G1ConcurrentMark::preclean()). This causes missing barriers in G1.

[1] executes a barrier always, just because we are using multiple threads, even during gc when it is not required.

This adds overhead for parallel gc and G1 during GC.

I.e. there is a confusion between ""atomicity"" and ""degree of parallelism"" in this code.",,,,,,,,,,,JDK-8301049,JDK-8300189,JDK-8300583,JDK-8300858,JDK-8300190,JDK-8300188,,,,,,,,,,,,,,,,,,,,,,,,JDK-8273185,,,,,,,,,,,,,,,,,,,,,,,,"0|i2u5mz:",9223372036854775807,b14,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6b00f96c,,,,,,,Verified,,"2021-09-06 02:09;roboduke;Changeset: fb5b144e
Author:    Thomas Schatzl <tschatzl@openjdk.org>
Date:      2021-09-06 09:07:43 +0000
URL:       https://git.openjdk.java.net/jdk/commit/fb5b144eca761d4b4c667efe05ca638536c065ac
;;;","2023-01-17 01:21;goetz;Fix request [17u]

I backport this for parity with 17.0.7-oracle.
A larger change, not trivial and adding barriers, thus potential negative performance effect. Nevertheless 
I think this should be fixed.
Clean backport.
SAP nighlty testing passed.;;;","2023-01-17 01:27;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/1073
Date: 2023-01-17 09:18:23 +0000;;;","2023-01-23 08:23;goetz;Fix request [11u]

I backport this for parity with 11.0.19-oracle.
A larger change, not trivial and adding barriers, thus potential negative
performance effect. Also, in 11 I had to resolve it. Nevertheless
I think this should be fixed. 
SAP nightly testing passed.;;;","2023-01-23 08:47;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk11u-dev/pull/1678
Date: 2023-01-23 16:22:45 +0000;;;",,,,,,,,,,,,,,,,,,,,,
Incorrect compile command used by TestIllegalArrayCopyBeforeInfiniteLoop,JDK-8272973,5057341,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,thartmann,thartmann,thartmann,2021-08-25 02:35,2021-09-21 01:44,2023-10-01 09:57,2021-08-26 01:36,11.0.13,17.0.1,18,,,,,18,hotspot,,0,hs-comp-triaged,jdk17u-fix-request,jdk17u-fix-yes,noreg-self,oracle-triage-18,redhat-interest,,,,,,,,,,,,,,,,"STDOUT:
CompileCommand: An error occurred during parsing
Error:  Embedded * not allowed
Line: 'compileonly,""*TestIllegalArrayCopyBeforeInfiniteLoop::foo""'

Usage: '-XX:CompileCommand=<option>,<method pattern>' - to set boolean option to true
Usage: '-XX:CompileCommand=<option>,<method pattern>,<value>'
Use:   '-XX:CompileCommand=help' for more information and to list all option.


The test also does not reliably trigger compilation of the foo method because the number of iterations is too low.",,,,,,,,,,,JDK-8273556,,,,,,,,,,,,,,,,,,,,,,,,JDK-8272131,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2u5jn:",9223372036854775807,b13,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2021-08-25 02:36;thartmann;ILW = Compile command does not have any effect, single test, no workaround = MLH = P4;;;","2021-08-26 01:36;roboduke;Changeset: 9166ba37
Author:    Tobias Hartmann <thartmann@openjdk.org>
Date:      2021-08-26 08:34:46 +0000
URL:       https://git.openjdk.java.net/jdk/commit/9166ba37b631aa7ae641488f6167cdbd7fcdff00
;;;","2021-09-08 09:52;shade;Fix Request (17u)

This fixes the affected tests. Patch applies cleanly, test now does not complain about broken CompilerCommand.;;;",,,,,,,,,,,,,,,,,,,,,,,
test/jdk/java/awt/Robot/FlushCurrentEvent.java fails by timeout,JDK-8272966,5057015,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,serb,webbuggrp,webbuggrp,2021-08-19 09:16,2021-11-03 07:16,2023-10-01 09:57,2021-09-10 10:39,11.0.12,,,,,,,11.0.14,client-libs,,0,15-na,additional-information-received,dcspks,jdk11u-fix-request,jdk11u-fix-yes,reproducer-yes,webbug,,,,,,,,,,,,,,,"ADDITIONAL SYSTEM INFORMATION :
MacOS, Windows, Linux/ x86_64/ OpenJDK Runtime Environment 18.9 (build 11.0.12+7)

A DESCRIPTION OF THE PROBLEM :
The test test/jdk/java/awt/Robot/FlushCurrentEvent.java fails by timeout with freeze.

The issue is caused by fix for JDK-8196100

STEPS TO FOLLOW TO REPRODUCE THE PROBLEM :
jtreg -v -a  -testjdk:<test_jdk>  test/jdk/java/awt/Robot/FlushCurrentEvent.java

EXPECTED VERSUS ACTUAL BEHAVIOR :
EXPECTED -
Test passed
ACTUAL -
The test failed by timeout with the following error:

```
----------messages:(154/10513)----------
command: main FlushCurrentEvent
reason: Assumed action based on file name: run main FlushCurrentEvent 
Mode: othervm
Additional options from @modules: --add-modules java.desktop
Timeout information:
Running jstack on process 62746
2021-08-19 20:28:49
Full thread dump OpenJDK 64-Bit Server VM (11.0.12-internal+0-adhoc.mgrishchenko.JetBrainsRuntime mixed mode):

Threads class SMR info:
_java_thread_list=0x00007f5ca4002aa0, length=15, elements={
0x00007f5cf0028800, 0x00007f5cf020b000, 0x00007f5cf020f000, 0x00007f5cf0224000,
0x00007f5cf0226000, 0x00007f5cf0228800, 0x00007f5cf022a800, 0x00007f5cf022c800,
0x00007f5cf02f0000, 0x00007f5cf03fe800, 0x00007f5c90157000, 0x00007f5c9015c800,
0x00007f5c90284000, 0x00007f5c9035b000, 0x00007f5ca4001000
}

""main"" #1 prio=5 os_prio=0 cpu=93.47ms elapsed=120.33s tid=0x00007f5cf0028800 nid=0xf51b in Object.wait()  [0x00007f5cf67a7000]
   java.lang.Thread.State: WAITING (on object monitor)
	at java.lang.Object.wait(java.base@11.0.12-internal/Native Method)
	- waiting on <0x0000000718cf67e0> (a java.lang.Thread)
	at java.lang.Thread.join(java.base@11.0.12-internal/Thread.java:1300)
	- waiting to re-lock in wait() <0x0000000718cf67e0> (a java.lang.Thread)
	at java.lang.Thread.join(java.base@11.0.12-internal/Thread.java:1375)
	at com.sun.javatest.regtest.agent.MainWrapper.main(MainWrapper.java:74)

""Reference Handler"" #2 daemon prio=10 os_prio=0 cpu=0.19ms elapsed=120.32s tid=0x00007f5cf020b000 nid=0xf525 waiting on condition  [0x00007f5ccc185000]
   java.lang.Thread.State: RUNNABLE
	at java.lang.ref.Reference.waitForReferencePendingList(java.base@11.0.12-internal/Native Method)
	at java.lang.ref.Reference.processPendingReferences(java.base@11.0.12-internal/Reference.java:241)
	at java.lang.ref.Reference$ReferenceHandler.run(java.base@11.0.12-internal/Reference.java:213)

""Finalizer"" #3 daemon prio=8 os_prio=0 cpu=0.21ms elapsed=120.31s tid=0x00007f5cf020f000 nid=0xf526 in Object.wait()  [0x00007f5cc57fe000]
   java.lang.Thread.State: WAITING (on object monitor)
	at java.lang.Object.wait(java.base@11.0.12-internal/Native Method)
	- waiting on <0x0000000718d09008> (a java.lang.ref.ReferenceQueue$Lock)
	at java.lang.ref.ReferenceQueue.remove(java.base@11.0.12-internal/ReferenceQueue.java:155)
	- waiting to re-lock in wait() <0x0000000718d09008> (a java.lang.ref.ReferenceQueue$Lock)
	at java.lang.ref.ReferenceQueue.remove(java.base@11.0.12-internal/ReferenceQueue.java:176)
	at java.lang.ref.Finalizer$FinalizerThread.run(java.base@11.0.12-internal/Finalizer.java:170)

""Signal Dispatcher"" #4 daemon prio=9 os_prio=0 cpu=0.24ms elapsed=120.31s tid=0x00007f5cf0224000 nid=0xf527 runnable  [0x0000000000000000]
   java.lang.Thread.State: RUNNABLE

""Service Thread"" #5 daemon prio=9 os_prio=0 cpu=0.03ms elapsed=120.31s tid=0x00007f5cf0226000 nid=0xf528 runnable  [0x0000000000000000]
   java.lang.Thread.State: RUNNABLE

""C2 CompilerThread0"" #6 daemon prio=9 os_prio=0 cpu=150.53ms elapsed=120.31s tid=0x00007f5cf0228800 nid=0xf529 waiting on condition  [0x0000000000000000]
   java.lang.Thread.State: RUNNABLE
   No compile task

""C1 CompilerThread0"" #9 daemon prio=9 os_prio=0 cpu=113.93ms elapsed=120.31s tid=0x00007f5cf022a800 nid=0xf52a waiting on condition  [0x0000000000000000]
   java.lang.Thread.State: RUNNABLE
   No compile task

""Sweeper thread"" #10 daemon prio=9 os_prio=0 cpu=0.03ms elapsed=120.31s tid=0x00007f5cf022c800 nid=0xf52b runnable  [0x0000000000000000]
   java.lang.Thread.State: RUNNABLE

""Common-Cleaner"" #11 daemon prio=8 os_prio=0 cpu=0.39ms elapsed=120.28s tid=0x00007f5cf02f0000 nid=0xf52c in Object.wait()  [0x00007f5cc441a000]
   java.lang.Thread.State: TIMED_WAITING (on object monitor)
	at java.lang.Object.wait(java.base@11.0.12-internal/Native Method)
	- waiting on <0x0000000718c05a98> (a java.lang.ref.ReferenceQueue$Lock)
	at java.lang.ref.ReferenceQueue.remove(java.base@11.0.12-internal/ReferenceQueue.java:155)
	- waiting to re-lock in wait() <0x0000000718c05a98> (a java.lang.ref.ReferenceQueue$Lock)
	at jdk.internal.ref.CleanerImpl.run(java.base@11.0.12-internal/CleanerImpl.java:148)
	at java.lang.Thread.run(java.base@11.0.12-internal/Thread.java:829)
	at jdk.internal.misc.InnocuousThread.run(java.base@11.0.12-internal/InnocuousThread.java:134)

""MainThread"" #13 prio=5 os_prio=0 cpu=179.62ms elapsed=120.24s tid=0x00007f5cf03fe800 nid=0xf52e in Object.wait()  [0x00007f5cc4216000]
   java.lang.Thread.State: WAITING (on object monitor)
	at java.lang.Object.wait(java.base@11.0.12-internal/Native Method)
	- waiting on <0x000000071886d830> (a java.awt.EventQueue$1AWTInvocationLock)
	at java.lang.Object.wait(java.base@11.0.12-internal/Object.java:328)
	at java.awt.EventQueue.invokeAndWait(java.desktop@11.0.12-internal/EventQueue.java:1367)
	- waiting to re-lock in wait() <0x000000071886d830> (a java.awt.EventQueue$1AWTInvocationLock)
	at java.awt.EventQueue.invokeAndWait(java.desktop@11.0.12-internal/EventQueue.java:1348)
	at sun.awt.SunToolkit.realSync(java.desktop@11.0.12-internal/SunToolkit.java:1518)
	at sun.awt.SunToolkit.realSync(java.desktop@11.0.12-internal/SunToolkit.java:1464)
	at java.awt.Robot.waitForIdle(java.desktop@11.0.12-internal/Robot.java:693)
	- locked <0x0000000718b31108> (a java.awt.Robot)
	at FlushCurrentEvent.main(FlushCurrentEvent.java:43)
	at jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(java.base@11.0.12-internal/Native Method)
	at jdk.internal.reflect.NativeMethodAccessorImpl.invoke(java.base@11.0.12-internal/NativeMethodAccessorImpl.java:62)
	at jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(java.base@11.0.12-internal/DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(java.base@11.0.12-internal/Method.java:566)
	at com.sun.javatest.regtest.agent.MainWrapper$MainThread.run(MainWrapper.java:127)
	at java.lang.Thread.run(java.base@11.0.12-internal/Thread.java:829)

""Java2D Disposer"" #15 daemon prio=10 os_prio=0 cpu=0.08ms elapsed=120.14s tid=0x00007f5c90157000 nid=0xf537 in Object.wait()  [0x00007f5c895c9000]
   java.lang.Thread.State: WAITING (on object monitor)
	at java.lang.Object.wait(java.base@11.0.12-internal/Native Method)
	- waiting on <0x000000071882d6a8> (a java.lang.ref.ReferenceQueue$Lock)
	at java.lang.ref.ReferenceQueue.remove(java.base@11.0.12-internal/ReferenceQueue.java:155)
	- waiting to re-lock in wait() <0x000000071882d6a8> (a java.lang.ref.ReferenceQueue$Lock)
	at java.lang.ref.ReferenceQueue.remove(java.base@11.0.12-internal/ReferenceQueue.java:176)
	at sun.java2d.Disposer.run(java.desktop@11.0.12-internal/Disposer.java:144)
	at java.lang.Thread.run(java.base@11.0.12-internal/Thread.java:829)

""AWT-XAWT"" #16 daemon prio=6 os_prio=0 cpu=35.94ms elapsed=120.14s tid=0x00007f5c9015c800 nid=0xf538 runnable  [0x00007f5c894c8000]
   java.lang.Thread.State: RUNNABLE
	at sun.awt.X11.XToolkit.waitForEvents(java.desktop@11.0.12-internal/Native Method)
	at sun.awt.X11.XToolkit.run(java.desktop@11.0.12-internal/XToolkit.java:693)
	at sun.awt.X11.XToolkit.run(java.desktop@11.0.12-internal/XToolkit.java:657)
	at java.lang.Thread.run(java.base@11.0.12-internal/Thread.java:829)

""AWT-Shutdown"" #18 prio=5 os_prio=0 cpu=0.14ms elapsed=120.05s tid=0x00007f5c90284000 nid=0xf539 in Object.wait()  [0x00007f5c88141000]
   java.lang.Thread.State: WAITING (on object monitor)
	at java.lang.Object.wait(java.base@11.0.12-internal/Native Method)
	- waiting on <0x0000000718867c98> (a java.lang.Object)
	at java.lang.Object.wait(java.base@11.0.12-internal/Object.java:328)
	at sun.awt.AWTAutoShutdown.run(java.desktop@11.0.12-internal/AWTAutoShutdown.java:291)
	- waiting to re-lock in wait() <0x0000000718867c98> (a java.lang.Object)
	at java.lang.Thread.run(java.base@11.0.12-internal/Thread.java:829)

""AWT-EventQueue-0"" #17 prio=6 os_prio=0 cpu=7.75ms elapsed=120.05s tid=0x00007f5c9035b000 nid=0xf53a waiting for monitor entry  [0x00007f5c73ffc000]
   java.lang.Thread.State: BLOCKED (on object monitor)
	at java.awt.Robot.delay(java.desktop@11.0.12-internal/Robot.java:672)
	- waiting to lock <0x0000000718b31108> (a java.awt.Robot)
	at FlushCurrentEvent.lambda$main$0(FlushCurrentEvent.java:40)
	at FlushCurrentEvent$$Lambda$30/0x00000008000e2840.run(Unknown Source)
	at java.awt.event.InvocationEvent.dispatch(java.desktop@11.0.12-internal/InvocationEvent.java:313)
	at java.awt.EventQueue.dispatchEventImpl(java.desktop@11.0.12-internal/EventQueue.java:776)
	at java.awt.EventQueue$4.run(java.desktop@11.0.12-internal/EventQueue.java:727)
	at java.awt.EventQueue$4.run(java.desktop@11.0.12-internal/EventQueue.java:721)
	at java.security.AccessController.doPrivileged(java.base@11.0.12-internal/Native Method)
	at java.security.ProtectionDomain$JavaSecurityAccessImpl.doIntersectionPrivilege(java.base@11.0.12-internal/ProtectionDomain.java:85)
	at java.awt.EventQueue.dispatchEvent(java.desktop@11.0.12-internal/EventQueue.java:746)
	at java.awt.EventDispatchThread.pumpOneEventForFilters(java.desktop@11.0.12-internal/EventDispatchThread.java:203)
	at java.awt.EventDispatchThread.pumpEventsForFilter(java.desktop@11.0.12-internal/EventDispatchThread.java:124)
	at java.awt.EventDispatchThread.pumpEventsForHierarchy(java.desktop@11.0.12-internal/EventDispatchThread.java:113)
	at java.awt.EventDispatchThread.pumpEvents(java.desktop@11.0.12-internal/EventDispatchThread.java:109)
	at java.awt.EventDispatchThread.pumpEvents(java.desktop@11.0.12-internal/EventDispatchThread.java:101)
	at java.awt.EventDispatchThread.run(java.desktop@11.0.12-internal/EventDispatchThread.java:90)

""Attach Listener"" #19 daemon prio=9 os_prio=0 cpu=0.39ms elapsed=0.10s tid=0x00007f5ca4001000 nid=0xf581 waiting on condition  [0x0000000000000000]
   java.lang.Thread.State: RUNNABLE

""VM Thread"" os_prio=0 cpu=7.66ms elapsed=120.32s tid=0x00007f5cf0203000 nid=0xf524 runnable  

""GC Thread#0"" os_prio=0 cpu=0.75ms elapsed=120.33s tid=0x00007f5cf0040800 nid=0xf51d runnable  

""G1 Main Marker"" os_prio=0 cpu=0.18ms elapsed=120.33s tid=0x00007f5cf009e000 nid=0xf51e runnable  

""G1 Conc#0"" os_prio=0 cpu=0.02ms elapsed=120.33s tid=0x00007f5cf00a0000 nid=0xf51f runnable  

""G1 Refine#0"" os_prio=0 cpu=0.14ms elapsed=120.33s tid=0x00007f5cf019e000 nid=0xf520 runnable  

""G1 Young RemSet Sampling"" os_prio=0 cpu=21.76ms elapsed=120.33s tid=0x00007f5cf019f800 nid=0xf521 runnable  
""VM Periodic Task Thread"" os_prio=0 cpu=107.57ms elapsed=120.26s tid=0x00007f5cf034e000 nid=0xf52d waiting on condition  

JNI global refs: 70, weak refs: 0

--- Timeout information end.
elapsed time (seconds): 120.4
```


FREQUENCY : always


",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8196100,,,,,,,,,,generic,,,,,,,,,generic,,,,,"0|i2u3j7:",9223372036854775807,b01,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@5a9b3fd3,,,,,,,,,"2021-08-25 23:11;pardesha;Checked this for Windows 10 and macOS 11.5.2 and issue does not reproduce with JDK 11.0.12 b08. Written back to the submitter requesting to recheck with latest build and reconfirm the status.

% ./jtreg -v -a ~/workspace/jdk/repository/jdk11u-cpu-open/test/jdk/java/awt/Robot/FlushCurrentEvent.java
Directory ""JTwork"" not found: creating
Directory ""JTreport"" not found: creating
runner starting test: java/awt/Robot/FlushCurrentEvent.java
runner finished test: java/awt/Robot/FlushCurrentEvent.java
Passed. Execution successful
Test results: passed: 1
Report written to /Users/user/workspace/sqe/jtreg/bin/JTreport/html/report.html
Results written to /Users/user/workspace/sqe/jtreg/bin/JTwork;;;","2021-08-26 18:09;pardesha;Update from submitter:
=========================================================
I checked this test on on Windows 10 (64-bit), this failure is still reproduced. I checked it with OpenJDK 11.0.12+7-ga. It is also observed with OpenJDK  11.0.12+7-ga built by myself.
 
$ /cygdrive/C/Work/jtreg/bin/jtreg -a -v -testjdk:'/cygdrive/d/IdeaProjects/jdk11u-dev/build/windows-x86_64-normal-server-release/images/jdk' test/jdk/java/awt/Robot/FlushCurrentEvent.java
runner starting test: java/awt/Robot/FlushCurrentEvent.java
runner finished test: java/awt/Robot/FlushCurrentEvent.java
Error. Program `d:\IdeaProjects\jdk11u-dev\build\windows-x86_64-normal-server-release\images\jdk\bin\java' timed out (timeout set to 120000ms, elapsed time including timeout hand
ling was 120424ms).
Test results: error: 1
Report written to D:\IdeaProjects\jdk11u-dev\JTreport\html\report.html
Results written to D:\IdeaProjects\jdk11u-dev\JTwork
Error: Some tests failed or other problems occurred.
 
The test hangs on src/java.desktop/share/classes/sun/awt/SunToolkit.java:1491
 
Does this test require any specific environment settings?
=========================================================;;;","2021-09-02 02:56;pardesha;Submitter has responded back with confirmation that the test continued to fail at his end. 
""The test also fails by timeout on Ubuntu 20.04. Besides that I run the test as a standalone application and it also hangs."";;;","2021-09-02 12:51;serb;The problem caused by the backport JDK-8267722, The test should not be pushed as-is to jdk11.;;;","2021-09-02 13:00;serb;Pardeep Sharma cannot reproduce the bug because the cpu repo was used, this bug is for openjdk only. ;;;","2021-09-09 18:43;serb;Fix Request (11u).

This is the fix for the new test failure recently backported to the jdk11.
;;;","2021-09-10 10:39;roboduke;Changeset: 180bc526
Author:    Sergey Bylokhov <serb@openjdk.org>
Date:      2021-09-10 17:39:08 +0000
URL:       https://git.openjdk.java.net/jdk11u-dev/commit/180bc526b025e815b43070150369ae399e27753f
;;;","2021-11-03 07:09;roboduke;Changeset: 180bc526
Author:    Sergey Bylokhov <serb@openjdk.org>
Date:      2021-09-10 17:39:08 +0000
URL:       https://git.openjdk.java.net/jdk11u/commit/180bc526b025e815b43070150369ae399e27753f
;;;",,,,,,,,,,,,,,,,,,
java/nio/file/Files/InterruptCopy.java fails with java.lang.RuntimeException: Copy was not interrupted,JDK-8272964,5057316,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,bpb,dholmes,dholmes,2021-08-24 19:46,2022-04-05 02:53,2023-10-01 09:57,2021-08-27 09:10,18,,,,,,,18,core-libs,,0,jdk11u-fix-request,jdk11u-fix-yes,jdk17u-fix-request,jdk17u-fix-yes,noreg-self,tier2,,,,,,,,,,,,,,,,"This problem was fixed in April but has reappeared.

----------System.out:(6/184)----------
Checking space (/ (/dev/sda3))
Creating source file...
Source file created.
Copying file at 1629858457189 ms...
Interrupting at 1629858457240 ms...
Done copying at 1629858457617 ms...
----------System.err:(13/761)----------
java.lang.RuntimeException: Copy was not interrupted
	at InterruptCopy.doTest(InterruptCopy.java:113)
	at InterruptCopy.main(InterruptCopy.java:61)",,,,,,,,,,,JDK-8283931,JDK-8283936,JDK-8284083,JDK-8284343,,,,,,,,,,,,,,,,,,,,,JDK-8265261,JDK-8281951,,,,JDK-8265261,,,,,,,,,,x86_64,,,,,,,,,linux,,,,,"0|i2u5e3:",9223372036854775807,b13,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@674604a9,,,,,,,,,"2021-08-27 09:10;roboduke;Changeset: dfeb4132
Author:    Brian Burkhalter <bpb@openjdk.org>
Date:      2021-08-27 16:08:29 +0000
URL:       https://git.openjdk.java.net/jdk/commit/dfeb4132e402c0466740a029c3b1d2d213955822
;;;","2022-03-30 03:11;mdoerr;Fix Request (17u):
Should get backported for parity with 17.0.4-oracle. Applies cleanly. Test has passed.;;;","2022-03-30 03:23;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk17u-dev/pull/308
Date: 2022-03-30 10:16:01 +0000;;;","2022-04-01 03:26;goetz;Fix request [11u]

I backport this for parity with 11.0.16-oracle.
No risk, only a test change.
Clean backport.
Test passes.  SAP nightly testing passed.;;;","2022-04-01 03:32;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk11u-dev/pull/981
Date: 2022-04-01 10:26:10 +0000;;;",,,,,,,,,,,,,,,,,,,,,
Copyright year was modified unintentionally in jlink.properties and ImagePluginStack.java,JDK-8272916,5057262,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,ccheung,ccheung,ccheung,2021-08-24 10:04,2021-08-30 17:34,2023-10-01 09:57,2021-08-24 11:12,,,,,,,,18,tools,,0,,,,,,,,,,,,,,,,,,,,,,"During the fix for JDK-8264322, jlink.properties and ImagePluginStack.java were modified but the changes were later reverted based on review comments. However, the copyright year were not reverted. This bug is to revert the changes to the copyright year on the two files.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8264322,,,,,,,,,,,,,,,,,,,,,,,,"0|i2u523:",9223372036854775807,b12,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@3da653bd,,,,,,,,,"2021-08-24 11:12;roboduke;Changeset: c547ead4
Author:    Calvin Cheung <ccheung@openjdk.org>
Date:      2021-08-24 18:09:56 +0000
URL:       https://git.openjdk.java.net/jdk/commit/c547ead493fafb6716550996a83276afc0ec018a
;;;",,,,,,,,,,,,,,,,,,,,,,,,,
(doc) package-info typo in extLink,JDK-8272915,5057261,Bug,Closed,JDK,JDK,software,duke,,,P4,Fixed,wetmore,rriggs,rriggs,2021-08-24 09:24,2022-04-25 10:57,2023-10-01 09:57,2021-08-27 16:02,17,,,,,,,18,security-libs,,0,doc-only,,,,,,,,,,,,,,,,,,,,,"The java.security.interfaces package-info.java has an ""{extLink"" without a leading ""@"".
Line 63:",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2u51v:",9223372036854775807,b13,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@2ec284e3,,,,,,,Verified,,"2021-08-27 16:02;roboduke;Changeset: 1fb798d3
Author:    Bradford Wetmore <wetmore@openjdk.org>
Date:      2021-08-27 23:01:51 +0000
URL:       https://git.openjdk.java.net/jdk/commit/1fb798d320c708dfcbc0bb157511a2937fafb9e6
;;;","2022-04-25 10:57;sqetools;verified;;;",,,,,,,,,,,,,,,,,,,,,,,,
Missing coverage for certain classes in com.sun.org.apache.xml.internal.security,JDK-8272908,5057248,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,fguallini,fguallini,fguallini,2021-08-24 07:15,2022-04-05 02:56,2023-10-01 09:57,2021-10-14 11:27,,,,,,,,18,security-libs,,0,codecoverage,jdk11u-fix-request,jdk11u-fix-yes,jdk17u-fix-request,jdk17u-fix-yes,noreg-self,testbug,,,,,,,,,,,,,,,"there has been lost coverage in the following classes:
- com.sun.org.apache.xml.internal.security.algorithms.implementations.IntegrityHmac
- com.sun.org.apache.xml.internal.security.utils.ElementProxy

In addition, may be worthwhile adding coverage to:
- com.sun.org.apache.xml.internal.security.keys.KeyInfo

The root cause of the lost code coverage may be the following major update during JDK17 development:
https://github.com/openjdk/jdk17/commit/cb742f956078f420be328d7899fcba768939020f


",,,,,,,,,,,JDK-8284084,JDK-8283924,JDK-8284069,JDK-8283920,JDK-8284344,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2u4yz:",9223372036854775807,b20,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@2ee0b2af,,,,,,,,,"2021-10-14 11:27;roboduke;Changeset: a16f2d0a
Author:    Fernando Guallini <fguallini@openjdk.org>
Committer: Rajan Halade <rhalade@openjdk.org>
Date:      2021-10-14 18:26:27 +0000
URL:       https://git.openjdk.java.net/jdk/commit/a16f2d0a3c326dd8b3b2133a9c170d998b7aa631
;;;","2022-03-30 03:18;mdoerr;Fix Request (17u):
Should get backported for parity with 17.0.4-oracle. Applies cleanly. Tests have passed.;;;","2022-03-30 03:28;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk17u-dev/pull/309
Date: 2022-03-30 10:20:09 +0000;;;","2022-04-01 03:44;goetz;Fix request [11u]

I backport this for parity with 11.0.16-oracle.
No risk, only a test change.
Clean backport.
Tests pass.  SAP nightly testing passes.;;;","2022-04-01 04:03;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk11u-dev/pull/983
Date: 2022-04-01 10:46:09 +0000;;;",,,,,,,,,,,,,,,,,,,,,
Missing license header in ArenaAllocator.java,JDK-8272903,5057238,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,mcimadamore,bae,bae,2021-08-24 04:41,2021-09-15 20:04,2023-10-01 09:57,2021-09-09 10:29,17,18,,,,,,18,core-libs,,0,,,,,,,,,,,,,,,,,,,,,,Missing license header in src/jdk.incubator.foreign/share/classes/jdk/internal/foreign/ArenaAllocator.java  (added by JDK-8264774),,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,b25,17,,,,,,,"0|i2u4wr:",9223372036854775807,b15,,,,,,,,,,,,"2021-09-09 10:29;roboduke;Changeset: 96614da0
Author:    Maurizio Cimadamore <mcimadamore@openjdk.org>
Date:      2021-09-09 17:28:06 +0000
URL:       https://git.openjdk.java.net/jdk/commit/96614da0254e7fd4ac9dd3c3059bf23c1aaf37ff
;;;",,,,,,,,,,,,,,,,,,,,,,,,,
JEP 381 cleanup: Remove unused Solaris code in sun.font.TrueTypeGlyphMapper,JDK-8272878,5057194,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,prr,webbuggrp,webbuggrp,2021-08-23 15:22,2021-09-08 22:59,2023-10-01 09:57,2021-09-06 01:15,15,16,17,18,,,,18,client-libs,,0,18ea,dcspks,reproducer-other,webbug,,,,,,,,,,,,,,,,,,"A DESCRIPTION OF THE PROBLEM :
During the recent JEP 381 removal of Solaris code, a few Solaris-specific constants and private methods were left behind in sun.font.TrueTypeGlyphMapper.

The proposed fix (removal of the unused code) is available as a GitHub PR: https://github.com/openjdk/jdk/pull/5232


",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8241787,,,,,,,,,,x86_64,,,,,,,,,windows_7,,,,,"0|i2u4mz:",9223372036854775807,b14,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4b09ce31,,,,,,,,,"2021-09-06 01:15;roboduke;Changeset: 70ed6c5b
Author:    Daniel Gredler <daniel.gredler@gmail.com>
Committer: Jayathirth D V <jdv@openjdk.org>
Date:      2021-09-06 08:13:22 +0000
URL:       https://git.openjdk.java.net/jdk/commit/70ed6c5b8c52dc1c1c25967a09164a013bdb4bdd
;;;",,,,,,,,,,,,,,,,,,,,,,,,,
C2: Inlining should not depend on absolute call site counts,JDK-8272873,5057213,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,iveresov,iveresov,iveresov,2021-08-23 20:42,2021-09-27 23:13,2023-10-01 09:57,2021-08-25 17:18,11,17,18,,,,,18,hotspot,,0,c2,hs-comp-triaged,oracle-triage-11,oracle-triage-17,oracle-triage-18,performance,,,,,,,,,,,,,,,,"C2 considers absolute call site counts in its inlining decisions, which seems very wrong considering the asynchronous nature of profiling and background compilation (See InlineTree::should_inline()). It causes substantial over-inlining, which in presence of a depth-first inlining can lead to an early cut off. It also is inherently unstable. C2 already uses call frequency as an additional factor and it's better to consider only that in the inlining heuristic. I did extensive benchmarking it yielded almost no losses and single-digit wins (up to 5%) on some benchmarks. I think it's safe to remove/deprecate InlineFrequencyCount and continue using InlineFrequencyRatio instead. I found that converting the frequency computation to FP and setting InlineFrequencyRatio=0.25 (inline a method that is called a least 25% of the time) works best.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8273612,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2u4r7:",9223372036854775807,b13,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2021-08-24 05:26;chagedorn;ILW = Performance loss due to wrong/sub-optimal inline decisions, medium?, no workaround = MMH = P3;;;","2021-08-25 17:18;roboduke;Changeset: 673ce7ef
Author:    Igor Veresov <iveresov@openjdk.org>
Date:      2021-08-26 00:17:15 +0000
URL:       https://git.openjdk.java.net/jdk/commit/673ce7efa56e7eb54266af6fe795d46d57f51bdc
;;;",,,,,,,,,,,,,,,,,,,,,,,,
JFR: ManagementSupport.removeBefore() lost coverage,JDK-8272867,5057206,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,egahlin,mseledtsov,mseledtsov,2021-08-23 18:52,2021-09-28 07:11,2023-10-01 09:57,2021-09-21 13:53,17,18,,,,,,18,hotspot,,0,,,,,,,,,,,,,,,,,,,,,,"According to JDK 17 ATR coverage report, the following method lost coverage:
jdk.jfr.internal.management.ManagementSupport.removeBefore(jdk.jfr.Recording,java.time.Instant)

See details in the comments below",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8264559,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2u4pn:",9223372036854775807,b16,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@42995637,,,,,,,,,"2021-09-21 11:38;kcr;This bug was recently made public, after integration. I don't know whether the Skara bot will resolve this as fixed given that the integration happened while the bug was still inaccessible. If not, then it will need to be resolved/fixed against JDK 18 manually.

PR: https://git.openjdk.java.net/jdk/pull/5453
Commit: https://git.openjdk.java.net/jdk/commit/dad5d27172dbe24ae13b6386d1cdf15549f6619d;;;",,,,,,,,,,,,,,,,,,,,,,,,,
java.util.random package summary contains incorrect mixing function in table,JDK-8272866,5057177,Bug,Closed,JDK,JDK,software,duke,,,P4,Fixed,jlaskey,webbuggrp,webbuggrp,2021-08-23 07:34,2022-07-27 14:38,2023-10-01 09:57,2021-08-27 11:47,17,,,,,,,18,core-libs,,0,dcsaw,jdk17u-fix-request,jdk17u-fix-SQE-ok,jdk17u-fix-yes,noreg-doc,webbug,,,,,,,,,,,,,,,,"A DESCRIPTION OF THE PROBLEM :
The table 'LXM Multipliers' at the end of the javadoc for the java.util.random package states that the mixing function is mixLea32 for all the 64/128-bit LCG based generators. This should be updated to mixLea64 for the 64/128-bit LCG generators. Only the L32X64MixRandom which uses a 32-bit LCG will use the mixLea32 mixing function.

STEPS TO FOLLOW TO REPRODUCE THE PROBLEM :
Extract the source for jdk.random and search for the mix function:

grep mixLea jdk.random/jdk/random/*

jdk.random/jdk/random/L128X1024MixRandom.java:        final long result = RandomSupport.mixLea64(sh + s0);
jdk.random/jdk/random/L128X128MixRandom.java:        final long result = RandomSupport.mixLea64(sh + x0);
jdk.random/jdk/random/L128X256MixRandom.java:        final long result = RandomSupport.mixLea64(sh + x0);
jdk.random/jdk/random/L32X64MixRandom.java:        // The low half of the seed is hashed by mixLea32 to produce the initial `x0`,
jdk.random/jdk/random/L32X64MixRandom.java:        // GOLDEN_RATIO_32 as the gamma value and mixLea32 as the mixer.
jdk.random/jdk/random/L32X64MixRandom.java:             RandomSupport.mixLea32((int)(seed)),
jdk.random/jdk/random/L32X64MixRandom.java:             RandomSupport.mixLea32((int)(seed) + RandomSupport.GOLDEN_RATIO_32));
jdk.random/jdk/random/L32X64MixRandom.java:        final int result = RandomSupport.mixLea32(s + x0);
jdk.random/jdk/random/L64X1024MixRandom.java:       final long result = RandomSupport.mixLea64(s + s0);
jdk.random/jdk/random/L64X128MixRandom.java:        final long result = RandomSupport.mixLea64(s + x0);
jdk.random/jdk/random/L64X256MixRandom.java:        final long result = RandomSupport.mixLea64(s + x0);

Only the L32X64MixRandom is using the mixLea32 mixing function. All others use the mixLea64 function.

This is not reflected in the java.base/java/util/random/package-info.java documentation.


EXPECTED VERSUS ACTUAL BEHAVIOR :
EXPECTED -
Update the java.base/java/util/random/package-info.java to correct the LXM Multipliers table at the end of the file.


FREQUENCY : always


",,,,,,,,,,,JDK-8282390,,,,,,,,,,,,,,,,JDK-8272988,,,,,,,,,,,,,,,,,,,,,,,generic,,,,,,,,,generic,,,,,"0|i2u4j7:",9223372036854775807,b13,,,,,,,,,,Verified,,"2021-08-23 18:46;tongwan;The source code can be found at:
https://github.com/openjdk/jdk/tree/master/src/jdk.random/share/classes/jdk/random;;;","2021-08-27 11:47;roboduke;Changeset: e66c8afb
Author:    Jim Laskey <jlaskey@openjdk.org>
Date:      2021-08-27 18:45:52 +0000
URL:       https://git.openjdk.java.net/jdk/commit/e66c8afb59b57c4546656efa97f723f084964330
;;;","2021-08-27 12:14;jlaskey;Fix Request: Doc change only. The LXM Multipliers table entries are ""obviously wrong"". The fix is to replace the mixing column of six final entries to be mixLea64 (not mixLea32.) Zero risk. https://github.com/openjdk/jdk/pull/5279.;;;","2021-09-16 05:30;tongwan;Requested the submitter review the fix:
https://git.openjdk.java.net/jdk/commit/e66c8afb59b57c4546656efa97f723f084964330;;;","2021-09-16 06:25;tongwan;The submitter confirm the fix.;;;","2021-11-18 03:46;shade;I see there is jdk17u-fix-yes, but where is the 17u backport RFR and/or push? Jim, are you still working on integrating it in 17u? ;;;","2021-11-18 08:47;jlaskey;As far as I understand that automatic backports stopped when the 18 branch was forked. I and not actively backporting so you are welcome to take it on.;;;","2022-02-24 02:58;goetz;Fix request [17u]
I'll just do it.;;;","2022-02-24 03:04;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk17u-dev/pull/178
Date: 2022-02-24 10:59:39 +0000;;;",,,,,,,,,,,,,,,,,
Replace usages of Collections.sort with List.sort call in public java modules,JDK-8272863,5057203,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,aturbanov,serb,serb,2021-08-23 16:25,2021-09-01 18:47,2023-10-01 09:57,2021-08-26 13:48,11,17,,,,,,18,core-libs,,0,noreg-cleanup,,,,,,,,,,,,,,,,,,,,,"Collections.sort() is just a wrapper, so it is better to use an instance method directly.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8272992,,,,,,,,,,generic,,,,,,,,,generic,,,,,"0|i2u4oz:",9223372036854775807,b13,,,,,,,,,,,,"2021-08-26 13:48;roboduke;Changeset: d732c309
Author:    Andrey Turbanov <turbanoff@gmail.com>
Committer: Sergey Bylokhov <serb@openjdk.org>
Date:      2021-08-26 20:47:02 +0000
URL:       https://git.openjdk.java.net/jdk/commit/d732c3091fea0a7c6d6767227de89002564504e5
;;;",,,,,,,,,,,,,,,,,,,,,,,,,
Javadoc external links should only have feature version number in URL,JDK-8272859,5057198,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,ihse,rgallard,rgallard,2021-08-23 15:32,2022-02-10 07:30,2023-10-01 09:57,2021-08-26 03:01,16.0.2,,,,,,,18,infrastructure,,0,build-infra,jdk17u-fix-request,jdk17u-fix-yes,,,,,,,,,,,,,,,,,,,"Link to license terms from the JavaDoc API footer is broken in point releases (for example, 16.0.2).

For example, in the JDK 16 JavaDoc API:

https://docs.oracle.com/en/java/javase/16/docs/api/index.html

The link to the license terms is this:

https://www.oracle.com/java/javase/terms/license/java16.0.2speclicense.html

However, it should be this:

https://www.oracle.com/java/javase/terms/license/java16speclicense.html
",,,,,,,,,,,JDK-8277694,JDK-8277772,,,,,,,,,,,,,,,,,,,,JDK-8279544,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2u4nv:",9223372036854775807,b13,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@429c566,,,,,,,,,"2021-08-26 03:01;roboduke;Changeset: b94fd32f
Author:    Magnus Ihse Bursie <ihse@openjdk.org>
Date:      2021-08-26 10:00:21 +0000
URL:       https://git.openjdk.java.net/jdk/commit/b94fd32f08bbb0012874eb918a4a1fe2d06eb943
;;;","2021-11-23 09:53;mr;[~robm], [~coffeys] Could we please get this backported to 17.0.2? The links at the bottom of the published JDK 17 JavaDoc pages to both the java SE Documentation and the license terms are broken (https://docs.oracle.com/en/java/javase/17/docs/api/index.html).;;;","2021-11-23 13:02;coffeys;jdk17u fix request:
Correction to the Java SE documentation links in the generated JavaDoc pages;;;",,,,,,,,,,,,,,,,,,,,,,,
DoubleFlagWithIntegerValue uses G1GC-only flag,JDK-8272856,5057195,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,iignatyev,iignatyev,iignatyev,2021-08-23 15:24,2021-10-07 00:01,2023-10-01 09:57,2021-08-24 11:44,11,17,18,,,,,18,hotspot,,0,cmd,jdk17u-fix-request,jdk17u-fix-yes,noreg-self,redhat-interest,,,,,,,,,,,,,,,,,"`runtime/CommandLine/DoubleFlagWithIntegerValue.java` test uses `G1ConcMarkStepDurationMillis` flag which is available only on the builds w/ G1 GC, hence this test might fail on the builds where G1 is disabled.

instead of adding `@requires` to exclude the test from running on builds w/o G1, the test can be updated to use the flag that is available in all builds.",,,,,,,,,,,JDK-8274877,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8178364,,,,,,,,,,,,,,,,,,,,,,,,"0|i2u4n7:",9223372036854775807,b12,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,,,"2021-08-24 11:05;mseledtsov;ILW = MLM = P4;;;","2021-08-24 11:44;roboduke;Changeset: 6ace805f
Author:    Igor Ignatyev <iignatyev@openjdk.org>
Date:      2021-08-24 18:43:54 +0000
URL:       https://git.openjdk.java.net/jdk/commit/6ace805f8c69b273bf998f084f9651bc5bcd52b6
;;;","2021-10-06 02:16;shade;Reproduces with Minimal VM in 17u, and Zero VM in 11u.;;;","2021-10-06 02:22;shade;Fix Request (17u)

Clean backport to fix a test on non-G1 VMs. Patch applies cleanly. Minimal VM starts to pass the test.;;;",,,,,,,,,,,,,,,,,,,,,,
Add correct licenses to jszip.md,JDK-8272828,5057152,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,ewhelan,ewhelan,ewhelan,2021-08-23 01:53,2021-10-11 08:40,2023-10-01 09:57,2021-08-23 03:00,11,,,,,,,11.0.14-oracle,tools,,0,CPU21_10-critical-approved,CPU21_10-critical-SQE-OK,hgupdate-sync,jdk11u-fix-request,jdk11u-fix-yes,,,,,,,,,,,,,,,,,"Upgrading the current jszip.md license file to include relevant 4th-party copyright headers.

",,,,,,,,,,,JDK-8272962,JDK-8274872,,,,,,,,,,,,,,,,,,,,,,,JDK-8272180,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2u4dn:",9223372036854775807,b01,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@7900061a,,,,,,,,,"2021-08-23 02:54;ewhelan;This fix is only applicable to 11u and earlier, the dependency on jszip was removed in jdk 15 (https://bugs.openjdk.java.net/browse/JDK-8237909);;;","2021-09-29 01:41;jdowland;pre-fix request (11u)

I've prepared an 11u patch for this that is awaiting review:
https://github.com/openjdk/jdk11u-dev/pull/407;;;",,,,,,,,,,,,,,,,,,,,,,,,
jpackage --type rpm produces an error: Invalid or unsupported type: [null] ,JDK-8272815,5056589,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,asemenyuk,webbuggrp,webbuggrp,2021-08-12 13:26,2022-07-18 02:41,2023-10-01 09:57,2021-09-15 06:24,16,17,,,,,,18,tools,,0,dcsad,jdk17u-fix-request,jdk17u-fix-yes,reproducer-yes,sn_101,sn_102,webbug,,,,,,,,,,,,,,,"ADDITIONAL SYSTEM INFORMATION :
Fedora 34 with either OpenJDK 16.01, 16.02, or 17 EA releases - I've tried it with all three versions.  I also tried it with a directly rpm-installed version of OpenJDK.

A DESCRIPTION OF THE PROBLEM :
When I try to create a "".rpm"" installer using jpackage on Fedora:
     jpackage --name MyApp --app-version 1.0.0 --icon /some/path/bigLogo.png --input ./ --main-jar my_app.jar
I get an error message from jpackage:
     Error: Invalid or unsupported type: [null]
The same thing happens if I specifically request 'rpm':
     Error: Invalid or unsupported type: [rpm]

For comparison, when I install the identical JDK on an Ubuntu instance, the above command (without specifying --type rpm) works.  Specifying ""--type rpm"" on Ubuntu also doesn't work - even though jpackage --help tells me it is a supported format.
I asked for help on stack overflow here - but no help:
https://stackoverflow.com/questions/68746207/unable-to-create-a-jpackage-installer-on-fedora-but-it-works-in-ubuntu-macos-a

STEPS TO FOLLOW TO REPRODUCE THE PROBLEM :
1. Install Fedora 34 on a VM or real machine
2. Go to https://jdk.java.net/16/ and download the x64 tar file for OpenJDK 16.02
3. Extract the tar file somewhere and setup PATH and JAVA_HOME
4. Go to a directory with an application jar and its needed libraries.
5. Run jpackage similar to above

Alternatively, install JDK via ""sudo dnf install java-latest-openjdk-devel"" - it makes no difference in eventual result.

EXPECTED VERSUS ACTUAL BEHAVIOR :
EXPECTED -
I expect a "".rpm"" file in the directory where I ran the jpackage command
ACTUAL -
On Fedora, I get the above mentioned error.
On Ubuntu, it works as expected.  On macOS it works as expected.  On Windows it works as expected.

FREQUENCY : always


",,,,,,,,,,,JDK-8290437,JDK-8289938,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"2021-08-22 22:18;adev;Test.java;https://bugs.openjdk.org/secure/attachment/96095/Test.java",,,,,x86_64,,,,,,,,,linux_redhat_6.0,,,,,"0|i2u0wr:",9223372036854775807,b15,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@3656b41f,,,,,,,,,"2021-08-22 22:13;adev;The issue is reproducible on Fedora Workstation 34.
The command used is :
$ jdk-17/bin/jpackage --name MyApp --verbose --app-version 1.0.0  --input ./ --main-jar Test.jar 
and jpackage fails with:
[10:40:31.355] Running dpkg
[10:40:31.409] Running dpkg
[10:40:31.410] Running dpkg
[10:40:31.425] Running rpmbuild
[10:40:31.432] jdk.jpackage.internal.PackagerException: Error: Invalid or unsupported type: [null]
	at jdk.jpackage/jdk.jpackage.internal.Arguments.generateBundle(Arguments.java:670)
	at jdk.jpackage/jdk.jpackage.internal.Arguments.processArguments(Arguments.java:550)
	at jdk.jpackage/jdk.jpackage.main.Main.execute(Main.java:91)
	at jdk.jpackage/jdk.jpackage.main.Main.main(Main.java:52)

;;;","2021-08-22 22:26;adev;Using --type app-image works fine though.;;;","2021-09-07 08:01;asemenyuk;The reason for the error is the missing rpm package on the machine. 
Error message issued by jpackage (Error: Invalid or unsupported type: [null]) is not helpful and should be replaced with a better alternative.;;;","2021-09-15 06:24;roboduke;Changeset: a3ca7702
Author:    Alexey Semenyuk <asemenyuk@openjdk.org>
Date:      2021-09-15 13:22:26 +0000
URL:       https://git.openjdk.java.net/jdk/commit/a3ca770227065aecc2df9f9c711687fd8ec5d34e
;;;","2022-07-14 08:39;goetz;Fix request [17u]

I backport this for parity with 17.0.5-oracle.
Clean backport.
Test passes. SAP nightly testing passed.;;;","2022-07-14 08:48;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/551
Date: 2022-07-14 15:39:22 +0000;;;",,,,,,,,,,,,,,,,,,,,
JFR thread sampler SI_KERNEL SEGV in metaspace::VirtualSpaceList::contains,JDK-8272809,5057130,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,kvn,dholmes,dholmes,2021-08-22 17:21,2022-11-11 07:05,2023-10-01 09:57,2021-12-12 08:09,18,,,,,,,18,hotspot,,0,tier8,,,,,,,,,,,,,,,,,,,,,"
#
# A fatal error has been detected by the Java Runtime Environment:
#
#  SIGSEGV (0xb) at pc=0x00007f00c54b9a09, pid=13309, tid=13487
#
# JRE version: Java(TM) SE Runtime Environment (18.0+12) (fastdebug build 18-ea+12-580)
# Java VM: Java HotSpot(TM) 64-Bit Server VM (fastdebug 18-ea+12-580, mixed mode, sharing, tiered, compressed class ptrs, z gc, linux-amd64)
# Problematic frame:
# V  [libjvm.so+0x1960a09]  metaspace::VirtualSpaceList::contains(MetaWordImpl* const*) const+0x9

---------------  T H R E A D  ---------------

Current thread (0x00007efe1d0ae270):  JfrThreadSampler ""JFR Thread Sampler"" [stack: 0x00007efe44440000,0x00007efe44540000] [id=13487] _threads_hazard_ptr=0x00007efd9830a7c0, _nested_threads_hazard_ptr_cnt=0

Stack: [0x00007efe44440000,0x00007efe44540000],  sp=0x00007efe4453d3b8,  free space=1012k
Native frames: (J=compiled Java code, j=interpreted, Vv=VM code, C=native code)
V  [libjvm.so+0x1960a09]  metaspace::VirtualSpaceList::contains(MetaWordImpl* const*) const+0x9
V  [libjvm.so+0xbcb869]  frame::is_interpreted_frame_valid(JavaThread*) const+0x99
V  [libjvm.so+0xbcbe97]  frame::safe_for_sender(JavaThread*)+0x457
V  [libjvm.so+0xf32f1f]  JfrStackTrace::record_thread(JavaThread&, frame&)+0x27f
V  [libjvm.so+0xf4ff4a]  JfrNativeSamplerCallback::call()+0xea
V  [libjvm.so+0xf51118]  JfrThreadSampleClosure::sample_thread_in_native(JavaThread*, JfrStackFrame*, unsigned int)+0xf8
V  [libjvm.so+0xf514cb]  JfrThreadSampleClosure::do_sample_thread(JavaThread*, JfrStackFrame*, unsigned int, JfrSampleType)+0x2db
V  [libjvm.so+0xf54c72]  JfrThreadSampler::task_stacktrace(JfrSampleType, JavaThread**) [clone .constprop.0]+0x2f2
V  [libjvm.so+0xf55bdf]  JfrThreadSampler::run()+0x15f
V  [libjvm.so+0x1885e80]  Thread::call_run()+0x100
V  [libjvm.so+0x1565284]  thread_native_entry(Thread*)+0x104


siginfo: si_signo: 11 (SIGSEGV), si_code: 128 (SI_KERNEL), si_addr: 0x0000000000000000",,,,,,,,,,,JDK-8278649,JDK-8296756,JDK-8296894,,,,,,,,,,,,,,,,,,,,,,JDK-8273108,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2u48r:",9223372036854775807,b28,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@42995637,,,,,,,,,"2021-12-12 08:09;roboduke;Changeset: 9a1bbaf8
Author:    Scott Gibbons <scott.gibbons@intel.com>
Committer: Vladimir Kozlov <kvn@openjdk.org>
Date:      2021-12-12 16:08:35 +0000
URL:       https://git.openjdk.java.net/jdk18/commit/9a1bbaf8db0e869ab76be8ab1bd0ddeb23693e7e
;;;","2022-11-07 19:43;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/864
Date: 2022-11-08 03:35:43 +0000;;;","2022-11-09 18:12;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/870
Date: 2022-11-10 02:03:18 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,
"[macOS] ""Apple AWT Internal Exception"" when input method is changed",JDK-8272806,5057123,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,prr,prr,prr,2021-08-21 21:24,2022-07-29 03:12,2023-10-01 09:57,2021-08-24 08:23,11.0.12-oracle,17,,,,,,18,client-libs,,0,jdk11u-fix-request,jdk11u-fix-yes,jdk13u-fix-request,jdk13u-fix-yes,jdk15u-fix-request,jdk15u-fix-yes,jdk17u-fix-request,jdk17u-fix-SQE-ok,jdk17u-fix-yes,jnf,macos,sn_100,,,,,,,,,,"The message ""Apple AWT Internal Exception: Java Exception""
is printed to the console in some cases when input methods are switched.
To reproduce this first install an alternate input source (eg Simplified Chinese Pinyin) 
To do this on macOS 11
1) Open the System Settings application.
2) Select ""Keyboard Preferences .. ""
3) Select the ""Input Sources"" tab
4) Click ""+"" and choose ""Chinese Simplied, Pinyin""

This will now be an option on the top menu bar.
Leave the System in default (eg US) mode for now.

Now 
1) use JDK 17 to run SwingSet2.jar (or any other Swing app that has a text component that accepts focus) and 
2) click in the text component to give it focus.
3) click in the terminal window from which you started the app so the Java app and component loses focus
4) Select the Pinyin input method
5) Click back in the Swing text field

The exception message should now be printed.




",,,,,,,,,,,JDK-8273891,JDK-8272993,JDK-8273209,JDK-8273002,JDK-8282537,JDK-8291551,JDK-8291553,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,17,,os_x,,,,,"0|i2u477:",9223372036854775807,b07,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@5a9b3fd3,,,,,,,,,"2021-08-21 21:39;prr;This was introduced by https://bugs.openjdk.java.net/browse/JDK-8259869

A lot of bugs stem from a missing check for null.
This one is the opposite. It is because of a check for null :-)

Briefly, we are no longer nulling out the input method reference in native which is the way native was ""told"" to not send notifications to Java

Details :

The exception occurs because calls are made up to  methods in CInputMethod.java which expect
to be called only if fAwtFocussedComponent is non-null .

By setting a debug variable added by the JNF removalc changes you can see this being logged

export JNU_APPKIT_DEBUG=1


Exception in thread ""AppKit Thread"" java.lang.NullPointerException: Null component provided to invokeAndWait
	at java.base/java.util.Objects.requireNonNull(Objects.java:233)
	at java.desktop/sun.lwawt.macosx.LWCToolkit.invokeAndWait(LWCToolkit.java:721)
	at java.desktop/sun.lwawt.macosx.CInputMethod.selectedRange(CInputMethod.java:650)

When focus is lost, the Java code nulls out fAwtFocussedComponent and then calls down to set a null input method
so that there are no more up-calls.
Previously in this function the input method was still wrapped in a JNF object and
the test for null was to avoid de-deferencing a (bad) null. But now the check
is not only no longer needed but prevents being able to null out the input method ...
Since the exception is handled I think the warning message is the only consequence.


I also note that the warning message can be made ""more noisy"" by including the native stack trace
which will help the diagnosis a bit more than just the message.


The change that introduced the bug is this code in CInputMethod.m
-+ (void) _nativeNotifyPeerWithView:(AWTView *)view inputMethod:(JNFJObjectWrapper *) inputMethod {
++ (void) _nativeNotifyPeerWithView:(AWTView *)view inputMethod:(jobject) inputMethod {
     AWT_ASSERT_APPKIT_THREAD;
 
     if (!view) return;
     if (!inputMethod) return;
 
-    [view setInputMethod:[inputMethod jObject]];
+    [view setInputMethod:inputMethod]; // inputMethod is a GlobalRef
 }

The fix is just to delete the obsolete check for null :
-         if (!inputMethod) return;;;;","2021-08-24 08:23;roboduke;Changeset: f681d654
Author:    Phil Race <prr@openjdk.org>
Date:      2021-08-24 15:23:15 +0000
URL:       https://git.openjdk.java.net/jdk/commit/f681d6544ac2506cb72e45c1f9ed8dfbbde099f2
;;;","2021-08-24 09:58;prr;Fix request (17u)
This fix is for a regression in JDK 17. 
An internal NPE is generated and caught whilst caught internally still results in a warning message in the terminal and it would be safer to not rely on that.
This is specific to macOS client code and the risk is extremely low.
The patch is trivial (remove a superfluous null check) and applies cleanly to 17u
Client tests all pass
Review link : https://git.openjdk.java.net/jdk/pull/5211;;;","2021-09-14 03:41;mdoerr;Fix Request (11u):
Should get backported for parity with 11.0.14-oracle. Applies cleanly.;;;","2022-07-29 02:39;yan;Fix request (13u, 15u):

should be backported to accompany JDK-8259869 in these releases.;;;","2022-07-29 02:54;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk15u-dev/pull/245
Date: 2022-07-29 09:45:49 +0000;;;","2022-07-29 02:59;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk13u-dev/pull/382
Date: 2022-07-29 09:46:18 +0000;;;",,,,,,,,,,,,,,,,,,,
11u fix for 8272362 is missing the new test created for it.,JDK-8272799,5057110,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,prr,prr,prr,2021-08-20 14:59,2021-10-19 06:31,2023-10-01 09:57,2021-08-21 15:39,11.0.14-oracle,,,,,,,11.0.14-oracle,client-libs,,0,16-na,17-na,18-na,8-na,openjdk-na,testbug,,,,,,,,,,,,,,,,"
For this 11u-only bug (8272362) a new test was created : TestSaveFileWithPrinter.java
But what was pushed was an unnecessary update to the very similarly named existing test
TestSaveFileWithoutPrinter.java

However the test update that was pushed exactly tests what is needed to be tested for this fix - it just leaves the test not testing the previous scenario

The fix here is to add the new test that should have been pushed and revert the change to the old test so we test both scenarios.
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2u44b:",9223372036854775807,b01,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4b09ce31,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
"[lworld] Test CustomClassListDump.java fails with Pattern ""CustomLoadee id: [0-9]+ super: [0-9]+ source: .*/custom.jar"" not found in classlist",JDK-8272793,5057102,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,fparain,fparain,fparain,2021-08-20 12:58,2022-07-05 06:00,2023-10-01 09:57,2021-08-20 13:07,repo-valhalla,,,,,,,,hotspot,,0,lworld,,,,,,,,,,,,,,,,,,,,,"Test fails with stacktrace:

java.lang.RuntimeException: Pattern ""CustomLoadee id: [0-9]+ super: [0-9]+ source: .*/custom.jar"" not found in classlist
	at CustomClassListDump.check(CustomClassListDump.java:119)
	at CustomClassListDump.main(CustomClassListDump.java:77)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:569)
	at com.sun.javatest.regtest.agent.MainActionHelper$AgentVMRunnable.run(MainActionHelper.java:312)
	at java.base/java.lang.Thread.run(Thread.java:833)


The test fails because the patterns used to analyze the output don't take into account the injected IdentityObject interface.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8289747,,,,,,,,,,,,,,,,,,,,,,,,"0|i2u42j:",9223372036854775807,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
java -XX:BlockZeroingLowLimit=1 crashes after 8270947,JDK-8272791,5057100,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,aph,lmesnik,lmesnik,2021-08-20 11:16,2022-11-04 11:42,2023-10-01 09:57,2022-05-25 02:06,11,17,18,19,repo-loom,,,19,hotspot,,0,fibers-only,hs-comp-triaged,jdk17u-fix-request,jdk17u-fix-yes,oracle-triage-11,oracle-triage-17,oracle-triage-18,wrapper,,,,,,,,,,,,,,"java -XX:BlockZeroingLowLimit=1

crashes with 

#

Internal Error (/home/opc/jdk/open/src/hotspot/cpu/aarch64/macroAssembler_aarch64.cpp:4683), pid=3200679, tid=3200693
guarantee(zero_words_block_size < BlockZeroingLowLimit) failed: increase BlockZeroingLowLimit
#",,,,,,,,,,,JDK-8293473,JDK-8295484,JDK-8293589,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8270947,,,,,,,,,,aarch64,,,,,,,,,,,,,,"0|i2u423:",9223372036854775807,b24,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2021-08-20 11:20;lmesnik;Found it by running test  runtime/CommandLine/OptionsValidation/TestOptionsWithRanges.java in loom repo.


java -XX:BlockZeroingLowLimit=1 crashes in jdk/jdk as well, however, seems not to be triggered in runtime/CommandLine/OptionsValidation/TestOptionsWithRanges.java;;;","2021-08-20 14:55;dlong;ILW = HLL = P4;;;","2021-08-22 22:59;thartmann;[~aph] could you please have a look?;;;","2021-09-27 05:07;phedlin;Should we simply ensure BlockZeroingLowLimit is greater than 8 (changing the lower bound of the range(L,H) expression to, say, 16)?

(Draft: https://github.com/openjdk/jdk/pull/5772);;;","2022-04-26 03:36;alanb;This seems to duplicate easily in the loom repo with:

Command Line: --enable-preview -Xmx1024m -XX:-ZapUnusedHeapArea -XX:+UseG1GC -XX:+UnlockDiagnosticVMOptions -XX:+UnlockExperimentalVMOptions -XX:BlockZeroingLowLimit=1 jdk.test.lib.process.ProcessTools Virtual optionsvalidation.JVMStartup

The stack trace of the compiler thread is always:

Stack: [0x0000fffe20c80000,0x0000fffe20e80000],  sp=0x0000fffe20e7b970,  free space=2030k
Native frames: (J=compiled Java code, j=interpreted, Vv=VM code, C=native code)
V  [libjvm.so+0x140a220]  MacroAssembler::zero_words(RegisterImpl const*, unsigned long)+0x3b0
V  [libjvm.so+0x85dee0]  C1_MacroAssembler::initialize_object(RegisterImpl const*, RegisterImpl const*, RegisterImpl const*, int, RegisterImpl const*, RegisterImpl const*, bool)+0x33c
V  [libjvm.so+0x7f264c]  LIR_Assembler::emit_alloc_obj(LIR_OpAllocObj*)+0xac
V  [libjvm.so+0x7dcea4]  LIR_OpAllocObj::emit_code(LIR_Assembler*)+0x20
V  [libjvm.so+0x7eda8c]  LIR_Assembler::emit_lir_list(LIR_List*)+0xdc
V  [libjvm.so+0x7ee1c8]  LIR_Assembler::emit_code(BlockList*)+0x74
V  [libjvm.so+0x7947d4]  Compilation::emit_code_body()+0x144
V  [libjvm.so+0x794f2c]  Compilation::compile_java_method()+0x55c
V  [libjvm.so+0x795a68]  Compilation::compile_method()+0x1d8
V  [libjvm.so+0x796404]  Compilation::Compilation(AbstractCompiler*, ciEnv*, ciMethod*, int, BufferBlob*, bool, DirectiveSet*)+0x2e4
V  [libjvm.so+0x797b08]  Compiler::compile_method(ciEnv*, ciMethod*, int, bool, DirectiveSet*)+0x158
V  [libjvm.so+0xa7d6b4]  CompileBroker::invoke_compiler_on_method(CompileTask*)+0x914
V  [libjvm.so+0xa7e578]  CompileBroker::compiler_thread_loop()+0x694
V  [libjvm.so+0x18ba4b8]  JavaThread::thread_main_inner()+0x238
V  [libjvm.so+0x18c7248]  Thread::call_run()+0xf8
V  [libjvm.so+0x15c1fe4]  thread_native_entry(Thread*)+0x104
C  [libpthread.so.0+0x7868]  start_thread+0x188;;;","2022-04-27 07:59;lmesnik;The issue is reproduced with virtual on aarch64 only.;;;","2022-05-17 11:14;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/8756
Date: 2022-05-17 18:08:58 +0000;;;","2022-05-25 02:06;dukebot;Changeset: e17118aa
Author:    Andrew Haley <aph@openjdk.org>
Date:      2022-05-25 09:03:13 +0000
URL:       https://git.openjdk.java.net/jdk/commit/e17118aa8afb14dfca049f19fd98a1483b2b5c1b
;;;","2022-10-14 07:18;goetz;Fix request [17u]

I backport this for parity with 17.0.6-oracle.
Low risk, trivial change. Follow-up to 8270947.
Clean backport.  SAP nightly testing passed.;;;","2022-10-14 07:28;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/798
Date: 2022-10-14 14:17:19 +0000;;;","2022-11-04 11:42;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk11u-dev/pull/1504
Date: 2022-11-04 18:31:41 +0000;;;",,,,,,,,,,,,,,,
Package docs for javafx.embed.swing are misleading,JDK-8272779,5057082,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,psadhukhan,kcr,kcr,2021-08-20 07:38,2021-09-03 15:24,2023-10-01 09:57,2021-08-24 23:42,jfx16,,,,,,,jfx18,javafx,,0,noreg-doc,,,,,,,,,,,,,,,,,,,,,"The API docs for the javafx.embed.swing package are misleading in that they only talk about the JFXPanel capability (embedding a JavaFX Scene in a Swing JComponent) and ignore the SwingNode functionality entirely. The module docs for the javafx.swing package correctly describe both directions of embedding and could provide a starting point for fixing the pacakge docs. In fact, just copying the module docs to the package docs would be better than what is there now.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2u3y3:",9223372036854775807,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@368b4b86,,,,,,,,,"2021-08-24 23:42;roboduke;Changeset: 91f01709
Author:    Prasanta Sadhukhan <psadhukhan@openjdk.org>
Date:      2021-08-25 06:41:33 +0000
URL:       https://git.openjdk.java.net/jfx/commit/91f017091786654a4564a5a054dbd22e6a01c120
;;;",,,,,,,,,,,,,,,,,,,,,,,,,
NullPointerException not reported,JDK-8272776,5057077,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,jlahoda,jlahoda,jlahoda,2021-08-20 06:04,2022-09-29 09:14,2023-10-01 09:57,2021-09-03 02:33,17,,,,,,,18,tools,,0,jdk17u-fix-request,jdk17u-fix-yes,,,,,,,,,,,,,,,,,,,,"As reported here:
https://mail.openjdk.java.net/pipermail/compiler-dev/2021-August/017768.html

A NPE should be reported for:
---
public void foo(Object o) {
        switch (o) {
          default: break;
          case String s :System.out.println(s); break;
        } 
}
public static void main(String[] args) {
        (new X()).foo(null); // NPE expected, but prints null
}
---

but it is not.",,,,,,,,,,,JDK-8294393,JDK-8293854,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2u3wz:",9223372036854775807,b14,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4dca67bd,,,,,,,,,"2021-09-03 02:33;roboduke;Changeset: 93eec9a1
Author:    Jan Lahoda <jlahoda@openjdk.org>
Date:      2021-09-03 09:31:54 +0000
URL:       https://git.openjdk.java.net/jdk/commit/93eec9a103de7f4d9a87eac5b295c9a50702ee94
;;;","2022-09-14 10:26;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/667
Date: 2022-09-14 17:14:38 +0000;;;","2022-09-15 00:38;apavlyutkin;Fix request (17u)

Original patch applied cleanly.

Verification (amd64/20.04LTS): test/langtools/tools/javac/patterns/NullSwitch.java (updated)
Regression (amd64/20.04LTS): test/langtools/tools/javac
;;;",,,,,,,,,,,,,,,,,,,,,,,
Shenandoah: compiler/c2/aarch64/TestVolatilesShenandoah.java fails in 11u,JDK-8272772,5057070,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,shade,shade,shade,2021-08-20 04:27,2021-08-25 05:40,2023-10-01 09:57,2021-08-24 02:51,11.0.9,,,,,,,11.0.13,hotspot,,0,gc-shenandoah,jdk11u-fix-request,jdk11u-fix-yes,oracle-triage-18,testbug,,,,,,,,,,,,,,,,,"If you run current test on 11u AArch64, then Shenandoah would fail:

$ CONF=linux-aarch64-normal-server-fastdebug make run-test TEST=compiler/c2/aarch64/TestVolatilesShenandoah.java 

TEST RESULT: Failed. Execution failed: `main' threw exception: java.lang.RuntimeException: Missing expected output cmpxchgw?_acq_shenandoah!

This is because the 11.0.9 backport brought the test in broken form.

Compare for example:

master hunk:
  https://github.com/openjdk/jdk/blob/fb1dfc6f49f62990aa9988e9d6f7ffd1adf45d8e/test/hotspot/jtreg/compiler/c2/aarch64/TestVolatiles.java#L360-L371

11u hunk:
  https://github.com/openjdk/jdk11u-dev/blob/90d529355b0fa36ca3378efae8dc6ba4b5203869/test/hotspot/jtreg/compiler/c2/aarch64/TestVolatiles.java#L562-L573

",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8250784,JDK-8205694,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2u3vf:",9223372036854775807,b04,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2021-08-20 05:08;shade;Fix Request (11u)

This fixes the broken Shenandoah test in 11u. This is 11u-specific patch. 11u RFR is acked by rkennke (who is not formally a Reviewer yet, so another ack is needed).;;;","2021-08-20 14:58;dlong;ILW = 1 test fails (testbug) = MMH = P3;;;","2021-08-23 15:34;clanger;Approved. Maybe you want to nominate rkennke as jdk-updates Reviewer? :);;;","2021-08-24 02:51;roboduke;Changeset: 83d916eb
Author:    Aleksey Shipilev <shade@openjdk.org>
Date:      2021-08-24 09:24:19 +0000
URL:       https://git.openjdk.java.net/jdk11u-dev/commit/83d916eb0c827c3b46912f8fe5a9444e1e53b43c
;;;","2021-08-25 05:40;roboduke;Changeset: 83d916eb
Author:    Aleksey Shipilev <shade@openjdk.org>
Date:      2021-08-24 09:24:19 +0000
URL:       https://git.openjdk.java.net/jdk11u/commit/83d916eb0c827c3b46912f8fe5a9444e1e53b43c
;;;",,,,,,,,,,,,,,,,,,,,,
[lworld] Aarch64 part of JDK-8272753,JDK-8272760,5057057,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,ngasson,thartmann,thartmann,2021-08-20 03:07,2021-08-25 01:49,2023-10-01 09:57,2021-08-25 01:49,repo-valhalla,,,,,,,repo-valhalla,hotspot,,0,c2,lworld,,,,,,,,,,,,,,,,,,,,"JDK-8272753 only fixed x86 but I think aarch64 is affected as well.

We should then completely remove PhaseOutput::sp_inc_offset() and the related code.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8272753,,,,,,,,,,,,,,,aarch64,,,,,,,,,,,,,,"0|i2u3sj:",9223372036854775807,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2021-08-20 03:57;thartmann;Nick, could you please have a look? Thanks.;;;",,,,,,,,,,,,,,,,,,,,,,,,,
(fc) java/nio/channels/FileChannel/Transfer2GPlus.java failed in timeout,JDK-8272759,5057056,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,bpb,dfuchs,dfuchs,2021-08-20 02:49,2021-09-28 07:15,2023-10-01 09:57,2021-09-22 09:30,18,,,,,,,18,core-libs,,0,intermittent,noreg-self,tier2,ursqe-triaged,,,,,,,,,,,,,,,,,,"#section:main
----------messages:(8/220)----------
command: main Transfer2GPlus
reason: User specified action: run main Transfer2GPlus 
Mode: agentvm
Agent id: 20
Timeout refired 480 times
Timeout information:
--- Timeout information end.
elapsed time (seconds): 595.488



""AgentVMThread"" #717 prio=5 os_prio=31 cpu=8597.64ms elapsed=522.13s allocated=274K defined_classes=24 tid=0x00007fe8ba000000 nid=77095 runnable  [0x000070000af2f000]
   java.lang.Thread.State: RUNNABLE
	at java.io.FileOutputStream.writeBytes(java.base@18-cpu/Native Method)
	at java.io.FileOutputStream.write(java.base@18-cpu/FileOutputStream.java:349)
	at java.io.DataOutputStream.write(java.base@18-cpu/DataOutputStream.java:112)
	- locked <0x0000000791414a58> (a java.io.DataOutputStream)
	at java.nio.channels.Channels$WritableByteChannelImpl.write(java.base@18-cpu/Channels.java:463)
	- locked <0x0000000791414cd8> (a java.lang.Object)
	at sun.nio.ch.FileChannelImpl.transferToArbitraryChannel(java.base@18-cpu/FileChannelImpl.java:655)
	at sun.nio.ch.FileChannelImpl.transferTo(java.base@18-cpu/FileChannelImpl.java:703)
	at Transfer2GPlus.testToWritableByteChannel(Transfer2GPlus.java:127)
	at Transfer2GPlus.main(Transfer2GPlus.java:59)
	at jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(java.base@18-cpu/Native Method)
	at jdk.internal.reflect.NativeMethodAccessorImpl.invoke(java.base@18-cpu/NativeMethodAccessorImpl.java:77)
	at jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(java.base@18-cpu/DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(java.base@18-cpu/Method.java:568)
	at com.sun.javatest.regtest.agent.MainActionHelper$AgentVMRunnable.run(MainActionHelper.java:312)
	at java.lang.Thread.run(java.base@18-cpu/Thread.java:833)

   Locked ownable synchronizers:
	- None


",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8274175,,,,,,,,,,x86,,,,,,,,,os_x,,,,,"0|i2u3sb:",9223372036854775807,b16,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@674604a9,,,,,,,,,"2021-09-21 09:15;bpb;Of the four failures noted, three are on the same machine and all are on a mid-2010 vintage MacPro5,1 [*]. None of the logs contain any useful information except for the single failure on the machine where it failed just once (so far) where the log states:

----------System.out:(2/58)----------
Transferred 2147484671 bytes
Transferred 2147484671 bytes
----------System.err:(3/35)----------

JavaTest Message: Test complete.

which indicates that the test actually succeeded but not before the harness hit the timeout.

[*] https://support.apple.com/kb/SP589?locale=en_US;;;","2021-09-22 09:30;roboduke;Changeset: 81d41647
Author:    Brian Burkhalter <bpb@openjdk.org>
Date:      2021-09-22 16:29:04 +0000
URL:       https://git.openjdk.java.net/jdk/commit/81d416477f9856861a5af13058bfc3028bcb9b60
;;;",,,,,,,,,,,,,,,,,,,,,,,,
"[lworld] ""Invalid frame size"" assert in frame::repair_sender_sp",JDK-8272753,5057049,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,thartmann,thartmann,thartmann,2021-08-20 01:34,2021-08-20 05:51,2023-10-01 09:57,2021-08-20 05:51,repo-valhalla,,,,,,,repo-valhalla,hotspot,,0,c2,intermittent,lworld,,,,,,,,,,,,,,,,,,,"# A fatal error has been detected by the Java Runtime Environment:
#
#  Internal Error (workspace/open/src/hotspot/cpu/x86/frame_x86.cpp:772), pid=15711, tid=15989
#  assert(real_frame_size >= _cb->frame_size() && real_frame_size <= 1000000) failed: invalid frame size
#
# JRE version: Java(TM) SE Runtime Environment (18.0+1) (fastdebug build 18-valhalla+1-71)
# Java VM: Java HotSpot(TM) 64-Bit Server VM (fastdebug 18-valhalla+1-71, mixed mode, compressed oops, compressed class ptrs, g1 gc, linux-amd64)
# Problematic frame:
# V  [libjvm.so+0xc31e7a]  frame::repair_sender_sp(long*, long**) const+0x9a

Stack: [0x00007f489dcfd000,0x00007f489ddfd000],  sp=0x00007f489ddfa680,  free space=1013k
Native frames: (J=compiled Java code, j=interpreted, Vv=VM code, C=native code)
V  [libjvm.so+0xc31e7a]  frame::repair_sender_sp(long*, long**) const+0x9a
V  [libjvm.so+0xc32b66]  frame::sender_for_compiled_frame(RegisterMap*) const+0x56
V  [libjvm.so+0xc333c9]  frame::sender(RegisterMap*) const+0xe9
V  [libjvm.so+0x1963f0c]  JavaThread::oops_do_frames(OopClosure*, CodeBlobClosure*) [clone .part.0]+0xcc
V  [libjvm.so+0x196e1d7]  Threads::possibly_parallel_oops_do(bool, OopClosure*, CodeBlobClosure*)+0x1f7
V  [libjvm.so+0xd572d6]  G1RootProcessor::process_java_roots(G1RootClosures*, G1GCPhaseTimes*, unsigned int)+0x76
V  [libjvm.so+0xd57c90]  G1RootProcessor::evacuate_roots(G1ParScanThreadState*, unsigned int)+0x70
V  [libjvm.so+0xc8d672]  G1EvacuateRegionsTask::scan_roots(G1ParScanThreadState*, unsigned int)+0x22
V  [libjvm.so+0xc8e356]  G1EvacuateRegionsBaseTask::work(unsigned int)+0x56
V  [libjvm.so+0x1adb9e5]  GangWorker::run_task(WorkData)+0x85
V  [libjvm.so+0x1adbb24]  GangWorker::loop()+0x44
V  [libjvm.so+0x1adbb7a]
V  [libjvm.so+0x1970010]  Thread::call_run()+0x100
V  [libjvm.so+0x1620664]  thread_native_entry(Thread*)+0x104

JavaThread 0x00007f48bc0295a0 (nid = 15712) was being processed
Java frames: (J=compiled Java code, j=interpreted, Vv=VM code)
j  jdk.internal.misc.Unsafe.getValue(Ljava/lang/Object;JLjava/lang/Class;)Ljava/lang/Object;+0 java.base@18-valhalla
J 1596 c2 java.lang.invoke.LambdaForm$MH+0x000000010010f400.invoke(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)I java.base@18-valhalla (142 bytes) @ 0x00007f48b1bd1888 [0x00007f48b1bd1420+0x0000000000000468]
J 1493 c2 java.lang.runtime.PrimitiveObjectMethods.isSubstitutable(Ljava/lang/Object;Ljava/lang/Object;)Z java.base@18-valhalla (133 bytes) @ 0x00007f48b1b869a8 [0x00007f48b1b867e0+0x00000000000001c8]
J 1697 c2 compiler.valhalla.inlinetypes.TestIntrinsics.test63(Qcompiler/valhalla/inlinetypes/MyValue1;Qcompiler/valhalla/inlinetypes/MyValue1;)Z (49 bytes) @ 0x00007f48b1c26730 [0x00007f48b1c25f00+0x0000000000000830]
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8272760,,,,,,,,,,,,,,,,,,,,,,,,"0|i2u3qr:",9223372036854775807,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
ZipFile can't open big file (NegativeArraySizeException),JDK-8272746,5056891,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,lancea,webbuggrp,webbuggrp,2021-08-18 02:46,2022-01-25 00:11,2023-10-01 09:57,2022-01-18 10:22,11,16,18,,,,,19,core-libs,,0,dcsaw,reproducer-yes,webbug,,,,,,,,,,,,,,,,,,,"ADDITIONAL SYSTEM INFORMATION :
Ubuntu Linux 20.04, Amazon Corretto 15.0.2, Amazon Corretto 16.0.2

A DESCRIPTION OF THE PROBLEM :
ZipFile tries to read CEN into array, but it is larger than 2Gb. Java8 use native library and works fine, as well as native linux unzip.

Opening large file throws exception:
java.lang.NegativeArraySizeException: -1319967274
  at java.base/java.util.zip.ZipFile$Source.initCEN(ZipFile.java:1487)
  ...

STEPS TO FOLLOW TO REPRODUCE THE PROBLEM :
Test class provided. Works about 1 hour on my machine, because of creating about 7Gb zip file.

EXPECTED VERSUS ACTUAL BEHAVIOR :
EXPECTED -
No exceptions, file read as usual.
ACTUAL -
java.lang.NegativeArraySizeException

---------- BEGIN SOURCE ----------
public class BadZipTest {
	File hugeZipFile;

	@BeforeEach
	void setUp() throws Exception {
		hugeZipFile = File.createTempFile(""hugeZip"", "".zip"");
	}

	@AfterEach
	void tearDown() throws Exception {
		hugeZipFile.delete();
	}

	@Test
	void testParseBigZipCEN() throws Exception {
		long startTime = System.currentTimeMillis();
		try (ZipOutputStream zip = new ZipOutputStream(new FileOutputStream(hugeZipFile))) {
			int dirCount = 25_000;
			long nextLog = System.currentTimeMillis();
			for (int dirN = 0; dirN < dirCount; dirN++) {
				String dirName = UUID.randomUUID() + ""/"";
				for (int fileN = 0; fileN < 1_000; fileN++) {
					ZipEntry entry = new ZipEntry(dirName + UUID.randomUUID());
					zip.putNextEntry(entry);
					zip.closeEntry(); // all files are empty
				}
				if (System.currentTimeMillis() >= nextLog) {
					nextLog = 30_000 + System.currentTimeMillis();
					System.out.printf(""Processed %s%% directories (%s), file size is %sMb (%ss)%n"",
						dirN * 100 / dirCount, dirN, hugeZipFile.length() / 1024 / 1024,
						(System.currentTimeMillis() - startTime) / 1000);
				}
			}
		}
		System.out.printf(""File generated in %ss, file size is %sMb%n"",
			(System.currentTimeMillis() - startTime) / 1000, hugeZipFile.length() / 1024 / 1024);

		// the exception thrown here
		// java.lang.NegativeArraySizeException: -1319967274
		//   at java.base/java.util.zip.ZipFile$Source.initCEN(ZipFile.java:1487)
		try (ZipFile zip = new ZipFile(hugeZipFile)) {
			assertTrue(zip.entries().hasMoreElements());
		}
	}
}
---------- END SOURCE ----------

CUSTOMER SUBMITTED WORKAROUND :
ZipInputStream works fine, if you don't need to navigate over zip internals.

FREQUENCY : always


",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"2021-08-19 20:38;tongwan;BadZipTest.java;https://bugs.openjdk.org/secure/attachment/96087/BadZipTest.java",,,,,generic,,,,,,,,,generic,,,,,"0|i2u2rn:",9223372036854775807,b06,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@62714d2c,,,,,,,,,"2021-08-19 21:04;tongwan;The observations on Windows 10:
JDK 11: Failed, NegativeArraySizeException thrown
JDK 16: Failed.
JDK 18: Failed.;;;","2021-12-23 02:59;roboduke;A pull request was submitted for review.

URL: https://git.openjdk.java.net/jdk/pull/6927
Date: 2021-12-23 10:55:08 +0000
;;;","2022-01-18 10:22;roboduke;Changeset: 848b16a3
Author:    Masanori Yano <myano@openjdk.org>
Committer: Lance Andersen <lancea@openjdk.org>
Date:      2022-01-18 18:20:57 +0000
URL:       https://git.openjdk.java.net/jdk/commit/848b16a3f933c1cffbce93337a5d9b4e48ce4b45
;;;",,,,,,,,,,,,,,,,,,,,,,,
Misformatted error message in EventHandlerCreator,JDK-8272739,5057029,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,zgu,zgu,zgu,2021-08-19 13:59,2021-08-25 18:14,2023-10-01 09:57,2021-08-20 05:24,17-pool,18,,,,,,18,hotspot,,0,,,,,,,,,,,,,,,,,,,,,,"Missing a space, result a confusing message.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2u3mb:",9223372036854775807,b12,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@42995637,,,,,,,,,"2021-08-20 05:24;roboduke;Changeset: c701f6e5
Author:    Zhengyu Gu <zgu@openjdk.org>
Date:      2021-08-20 12:23:10 +0000
URL:       https://git.openjdk.java.net/jdk/commit/c701f6e5383030e0192bbd2d95059d9a5b9b0ab7
;;;",,,,,,,,,,,,,,,,,,,,,,,,,
javac ignores any -J option in @argfiles silently,JDK-8272728,5057018,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,cstein,sundar,sundar,2021-08-19 10:16,2021-12-01 17:44,2023-10-01 09:57,2021-11-24 08:51,16,17,18,,,,,18,tools,,0,,,,,,,,,,,,,,,,,,,,,,"File: args
-J-verbose

$ javac @args Main.java

javac neither supports -J options from argfile (no verbose class loading messages printed by the above javac command) nor reports an error.

The -J option could be invalid VM option as well. 

File: args
-J-xyz

@javac @args Main.java

Observed: silent compilation
Expected: error message

I verified this with jdk 16 as well as latest local build of ""jdk"" repo ",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8277806,,,,,,,,,,,,,,,generic,,,,,,,,,generic,,,,,"0|i2u3jv:",9223372036854775807,b26,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4dca67bd,,,,,,,,,"2021-11-24 08:51;roboduke;Changeset: 663e33de
Author:    Christian Stein <cstein@openjdk.org>
Committer: Jonathan Gibbons <jjg@openjdk.org>
Date:      2021-11-24 16:50:25 +0000
URL:       https://git.openjdk.java.net/jdk/commit/663e33de13788586fa49bd9816bd148e58ad1031
;;;",,,,,,,,,,,,,,,,,,,,,,,,,
Fix the implementation of loop unrolling heuristic with LoopPercentProfileLimit,JDK-8272720,5057005,Bug,Resolved,JDK,JDK,software,duke,,,P5,Fixed,jiefu,jiefu,jiefu,2021-08-19 06:00,2022-12-16 01:56,2023-10-01 09:57,2021-08-20 05:44,11,16,17,18,9,,,18,hotspot,,0,c2,hs-comp-triaged,jdk11u-fix-request,jdk11u-fix-yes,jdk13u-fix-request,jdk13u-fix-yes,jdk15u-fix-request,jdk15u-fix-yes,jdk17u-fix-request,jdk17u-fix-SQE-ok,jdk17u-fix-yes,oracle-triage-18,redhat-interest,tencent-interest,,,,,,,,"There is no difference for LoopPercentProfileLimit = 60, 70, 80 ...",,,,,,,,,,,JDK-8275393,JDK-8276692,JDK-8293848,JDK-8293847,JDK-8298924,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8149421,,,,,,,,,,,,,,,,,,,,,,,,"0|i2u3gz:",9223372036854775807,b12,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2021-08-19 07:48;chagedorn;ILW = Some values of LoopPercentProfileLimit make no difference due to integer instead of floating point division, only with C2 related LoopPercentProfileLimit flag, no workaround =  LLH = P5;;;","2021-08-20 05:44;roboduke;Changeset: 1ea437a4
Author:    Jie Fu <jiefu@openjdk.org>
Date:      2021-08-20 12:43:29 +0000
URL:       https://git.openjdk.java.net/jdk/commit/1ea437a4b87381b558cf8157ac52fc03e37ac507
;;;","2021-08-25 08:57;inakonechnyy;Request a backport to OpenJDK 17, applies cleanly, passed tier1 tests. ;;;","2021-11-04 20:25;jiefu;Fix request

I'd like to backport this bug fix for jdk11u.
It applies cleanly and no risk.

Thanks.;;;","2022-09-15 01:14;yan;Fix request (15u, 13u):
on behalf of Roman Marchenko:
clean backport, no tier1 regressions;;;","2022-09-15 01:27;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk13u-dev/pull/404
Date: 2022-09-15 08:21:12 +0000;;;","2022-09-15 01:28;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk15u-dev/pull/278
Date: 2022-09-15 08:21:51 +0000;;;",,,,,,,,,,,,,,,,,,,
[8u] Build failure after backport of JDK-8248901 with MSVC 2013,JDK-8272714,5056995,Bug,Resolved,JDK,JDK,software,duke,,,P2,Fixed,shade,shade,shade,2021-08-19 03:34,2021-09-01 20:05,2023-10-01 09:57,2021-08-23 03:20,openjdk8u312,,,,,,,openjdk8u312,hotspot,,0,11-na,16-na,17-na,18-na,jdk8u-fix-request,jdk8u-fix-yes,,,,,,,,,,,,,,,,"JDK-8272214 fixed the build failure with MSVC 2010, but my build servers that use MSVC 2013 still fail with the same error. The check introduced by JDK-8272214 should probably accept both MSVCs.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8272214,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2u3er:",9223372036854775807,b05,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,,,"2021-08-20 02:52;shade;Fix Request (8u)

This improves the JDK-8272214 fix. This is 8u-specific fix, 8u RFR acked by sgehwolf.;;;","2021-08-20 03:02;sgehwolf;The build seems to have passed for one single (!) VS 2013 build, and then no more.

Edit: After some investigation it looks like it fails on VS 2013, where it - once - passed. Not sure why, so we definitely need this fix!;;;","2021-08-23 02:59;sgehwolf;Broken builds with VS2013 which include JDK-8272214:
https://ci.adoptopenjdk.net/job/build-scripts/job/jobs/job/jdk8u/job/jdk8u-windows-x64-hotspot/1096/;;;","2021-08-23 03:20;hgupdate;URL:   https://hg.openjdk.java.net/jdk8u/jdk8u-dev/hotspot/rev/a878df156b91
User:  shade
Date:  2021-08-23 10:16:06 +0000
;;;","2021-09-01 20:04;hgupdate;URL:   https://hg.openjdk.java.net/jdk8u/jdk8u/hotspot/rev/a878df156b91
User:  andrew
Date:  2021-09-02 03:03:44 +0000
;;;",,,,,,,,,,,,,,,,,,,,,
[Test]: Cleanup: test/jdk/security/infra/java/security/cert/CertPathValidator/certification/BuypassCA.java no longer needs ocspEnabled,JDK-8272708,5056989,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,tvoniadka,tvoniadka,tvoniadka,2021-08-19 02:54,2021-10-20 01:07,2023-10-01 09:57,2021-08-19 20:16,11,17,18,8,,,,18,security-libs,,0,jdk11u-fix-request,jdk11u-fix-yes,jdk17u-fix-request,jdk17u-fix-SQE-ok,jdk17u-fix-yes,noreg-self,sqebug,testbug,,,,,,,,,,,,,,"The test test/jdk/security/infra/java/security/cert/CertPathValidator/certification/BuypassCA.java no longer requires ""ocspEnabled"" variable. It can be cleaned-up:

...
        boolean ocspEnabled = true;

        if (args.length >= 1 && ""CRL"".equalsIgnoreCase(args[0])) {
            pathValidator.enableCRLCheck();
            ocspEnabled = false;
...
        new BuypassClass3().runTest(pathValidator, ocspEnabled);
...",,,,,,,,,,,JDK-8272954,JDK-8272826,JDK-8275598,JDK-8272825,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2u3df:",9223372036854775807,b12,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@2ec284e3,,,,,,,,,"2021-08-19 20:16;roboduke;Changeset: 4bd37c31
Author:    Thejasvi Voniadka <tvoniadka@openjdk.org>
Committer: Abdul Kolarkunnu <akolarkunnu@openjdk.org>
Date:      2021-08-20 03:15:04 +0000
URL:       https://git.openjdk.java.net/jdk/commit/4bd37c315333325b69db8d55c0c3aaf74c95024f
;;;","2021-08-19 22:21;tvoniadka;JDK 17u fix request:

Please approve this fix for 17u. The patch applies cleanly and the test passes post applying the patch.;;;","2021-10-19 06:37;mdoerr;Fix Request (11u):
Should get backported for parity with 11.0.14-oracle. Applies cleanly.;;;",,,,,,,,,,,,,,,,,,,,,,,
Resolving URI relative path with no / may lead to incorrect toString,JDK-8272702,5056860,Bug,Closed,JDK,JDK,software,duke,,,P4,Fixed,dfuchs,webbuggrp,webbuggrp,2021-08-17 14:10,2023-02-24 07:07,2023-10-01 09:57,2022-08-22 02:27,11,16,18,8,,,,20,core-libs,,0,dcsaw,jdk17u-fix-request,jdk17u-fix-yes,reproducer-yes,webbug,,,,,,,,,,,,,,,,,"ADDITIONAL SYSTEM INFORMATION :
Fedora 33 Linux 5.13.9-100.fc33.x86_64
openjdk version ""16.0.2"" 2021-07-20


A DESCRIPTION OF THE PROBLEM :
Given an absolute URI: 'http://example.com' (note no trailing '/')
and a relative path: 'test'
intuitively one would expect resolving to result in 'http://example.com/test'
This is how Python behaves, for example.

However, doing so in Java leads to a surprising result: 'http://example.comtest'
Seemingly the relative path ends up in the authority!
Under the hood, it turns out that 'test' is correctly set as the path, but there is never a '/' character introduced to separate the authority from the path.

STEPS TO FOLLOW TO REPRODUCE THE PROBLEM :
The attached test case shows the issue.

EXPECTED VERSUS ACTUAL BEHAVIOR :
EXPECTED -
http://example.com/test
ACTUAL -
http://example.comtest

---------- BEGIN SOURCE ----------
import java.net.URI;

class UriResolve {
    public static void main(String[] args) {
        var base = URI.create(""http://example.com"");
        var rel = URI.create(""test"");
        System.out.format(""base a: %s p: %s u: %s%n"", base.getAuthority(), base.getPath(), base);
        System.out.format(""rel  a: %s p: %s u: %s%n"", rel.getAuthority(), rel.getPath(), rel);
        var res = base.resolve(rel);
        System.out.format(""res  a: %s p: %s u: %s%n"", res.getAuthority(), res.getPath(), res);
    }
}

---------- END SOURCE ----------

FREQUENCY : always


",,,,,,,,,,,JDK-8303164,,,,,,,,,,,,,,,,,,,,,JDK-8214448,JDK-4666701,JDK-8233764,,,,,,JDK-6523089,,,,,"2021-08-19 00:56;tongwan;UriResolve.java;https://bugs.openjdk.org/secure/attachment/96072/UriResolve.java",,,,,generic,,,,,,,,,generic,,,,,"0|i2u2kr:",9223372036854775807,b12,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@446e124a,,,,,,,Verified,,"2021-08-19 01:00;tongwan;JDK 8: Failed, http://example.comtest returned.
JDK 11: Failed.
JDK 16: Failed.
JDK 18ea+1: Failed.;;;","2022-05-29 23:07;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/8899
Date: 2022-05-26 09:18:56 +0000;;;","2022-08-22 02:27;dukebot;Changeset: 79597f1e
Author:    KIRIYAMA Takuya <kiriyama.takuya@fujitsu.com>
Committer: Daniel Fuchs <dfuchs@openjdk.org>
Date:      2022-08-22 09:22:59 +0000
URL:       https://git.openjdk.org/jdk/commit/79597f1ea6844f374beeeba219719cd9d5fe7d03
;;;","2023-02-16 05:27;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/1176
Date: 2023-02-16 12:38:24 +0000;;;","2023-02-20 00:19;yan;Fix request (17u):
on behalf of Radim Vansa:
I backport this as the problem appears in version 17, too.
The risk is low to medium; theoretically there could be an application that uses path to construct authority part, but that's clearly a misuse.
Backport is not clean due to a conflict with JDK-8285521, test applies cleanly.;;;",,,,,,,,,,,,,,,,,,,,,
[macos] Build failure with Xcode 13.0 after JDK-8264848,JDK-8272700,5056979,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,jiefu,jiefu,jiefu,2021-08-18 23:58,2021-09-13 08:31,2023-10-01 09:57,2021-08-19 16:12,11,17,18,,,,,18,infrastructure,,0,azul-interest,jdk11u-fix-request,jdk11u-fix-yes,jdk15u-fix-request,jdk15u-fix-yes,jdk17u-fix-request,jdk17u-fix-SQE-ok,jdk17u-fix-yes,tencent-interest,,,,,,,,,,,,,"Compiling 56 files for java.sql.rowset
Compiling 82 files for jdk.jlink
Compiling 95 files for jdk.jshell
error: invalid integral value '16-DMAC_OS_X_VERSION_MIN_REQUIRED=10120' in '-mstack-alignment=16-DMAC_OS_X_VERSION_MIN_REQUIRED=10120'
make[3]: *** [/Users/jdk/build/macosx-x86_64-server-fastdebug/hotspot/variant-server/libjvm/objs/bsd_x86_64.o] Error 1
make[3]: *** Waiting for unfinished jobs....
Compiling 229 files for jdk.javadoc
make[2]: *** [hotspot-server-libs] Error 2
make[2]: *** Waiting for unfinished jobs....
Compiling 2736 files for java.desktop

ERROR: Build failed for target 'images' in configuration 'macosx-x86_64-server-fastdebug' (exit code 2)
Stopping sjavac server

make[1]: *** [main] Error 2
=== Output from failing command(s) repeated here ===
make: *** [images] Error 2
* For target hotspot_variant-server_libjvm_objs_bsd_x86_64.o:
error: invalid integral value '16-DMAC_OS_X_VERSION_MIN_REQUIRED=10120' in '-mstack-alignment=16-DMAC_OS_X_VERSION_MIN_REQUIRED=10120'

* All command lines available in /Users/jdk/build/macosx-x86_64-server-fastdebug/make-support/failure-logs.
=== End of repeated output ===",,,,,,,,,,,JDK-8272960,JDK-8273677,JDK-8272967,JDK-8272891,,,,,,,,,,,,,,,,,,,,,JDK-8264848,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2u3b7:",9223372036854775807,b12,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@429c566,,,,,,,,,"2021-08-19 00:16;dholmes;I can't see how this has ever actually worked:

JVM_BASIC_ASFLAGS=""-x assembler-with-cpp -mno-omit-leaf-frame-pointer -mstack-alignment=16""
    # Fix linker warning.
    # Code taken from make/autoconf/flags-cflags.m4 and adapted.
    JVM_BASIC_ASFLAGS+=""-DMAC_OS_X_VERSION_MIN_REQUIRED=$MACOSX_VERSION_MIN_NODOTS \
        -mmacosx-version-min=$MACOSX_VERSION_MIN""

this will concatenate the settings to give -mstack-alignment=16-DMAC_OS_X_VERSION_MIN_REQUIRED=...;;;","2021-08-19 16:12;roboduke;Changeset: d007be09
Author:    Jie Fu <jiefu@openjdk.org>
Date:      2021-08-19 23:11:31 +0000
URL:       https://git.openjdk.java.net/jdk/commit/d007be0952abdc8beb7b68ebf7529a939162307b
;;;","2021-08-19 16:42;jiefu;Fix request for jdk11u and jdk17u.
Fail to build with Xcode 13.0 on MacOSX.
Thanks.;;;","2021-09-13 08:23;vkempik;Fix request (15u), applies cleanly, a combined pr with JDK-8264848;;;",,,,,,,,,,,,,,,,,,,,,,
"Fix HotSpot style guide terminology for ""non-local variables""",JDK-8272691,5056967,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,kbarrett,kbarrett,kbarrett,2021-08-18 21:32,2022-03-14 10:26,2023-10-01 09:57,2022-03-07 10:22,18,,,,,,,19,hotspot,,0,hotspot-style-guide,noreg-doc,,,,,,,,,,,,,,,,,,,,"The HotSpot Style Guide currently says (under ""Excluded Features"")

""* Avoid namespace-scoped variables with non-constexpr initialization.""

""namespace-scoped"" is the wrong terminology / criteria.  It should be ""non-local variables"" (C++14 3.6.2).
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2u38j:",9223372036854775807,b13,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@11336cca,,,,,,,,,"2022-03-04 06:17;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/7695
Date: 2022-03-04 14:13:24 +0000;;;","2022-03-07 10:22;dukebot;Changeset: 2e298b8b
Author:    Kim Barrett <kbarrett@openjdk.org>
Date:      2022-03-07 18:20:01 +0000
URL:       https://git.openjdk.java.net/jdk/commit/2e298b8bf45edc37269b8b70f7784082a8f87306
;;;",,,,,,,,,,,,,,,,,,,,,,,,
Replace StringBuffer with StringBuilder in RuleBasedCollator,JDK-8272687,5056830,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,jlu,webbuggrp,webbuggrp,2021-08-17 08:04,2022-10-03 12:29,2023-10-01 09:57,2022-09-26 15:34,17,,,,,,,20,core-libs,,0,dcsaw,noreg-cleanup,reproducer-other,starter-bug,webbug,,,,,,,,,,,,,,,,,"A DESCRIPTION OF THE PROBLEM :
java.text.RuleBasedCollator is using three instances of the synchronized StringBuffer in getCollationKey(), even though that method is synchronized by itself. Please consider replacing these with unsynchronized StringBuilder instances to speed up this expensive method a bit. Also, please consider replacing calls like ""primResult.append(secResult.toString())"" with ""primResult.append(secResult)"" in this method to reduce unnecessary creation of String object.


",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,generic,,,,,,,,,generic,,,,,"0|i2u2eb:",9223372036854775807,b17,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6fc9e792,,,,,,,,,"2021-08-18 21:02;tongwan;Moved to JDK to evaluate the requested performance enhancement.;;;","2021-08-20 16:26;naoto;There are other locations in i18n code, where StringBuffer(s) linger. Need to cleanup those as well.;;;","2022-09-26 15:19;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/10432
Date: 2022-09-26 18:25:34 +0000;;;","2022-09-26 15:34;dukebot;Changeset: 43eff2b3
Author:    Justin Lu <justin.lu@oracle.com>
Committer: Brent Christian <bchristi@openjdk.org>
Date:      2022-09-26 22:31:51 +0000
URL:       https://git.openjdk.org/jdk/commit/43eff2b309e2ef275bdd5adf196da81d4e23f535
;;;",,,,,,,,,,,,,,,,,,,,,,
Logging missing keytab file in Krb5LoginModule,JDK-8272674,5056949,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,weijun,weijun,weijun,2021-08-18 15:27,2021-08-25 18:14,2023-10-01 09:57,2021-08-19 12:03,,,,,,,,18,security-libs,,0,noreg-trivial,,,,,,,,,,,,,,,,,,,,,"When debugging is enabled for com.sun.security.auth.module.Krb5LoginModule and the file specified by ""keyTab"" is not found, Krb5LoginModule simply emits a generic message, similar to this:
""Key for the principal foobar@acme.com not available in /home/foobar/foobar.keytab""

This message can be quite confusing and counterintuitive if the file is actually not there, because, based on the message, one would think that the JVM probed the file, found it, loaded the data, but still could not use the keytab data for authentication.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2u34j:",9223372036854775807,b12,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@7a7b7e03,,,,,,,,,"2021-08-19 12:03;roboduke;Changeset: 9569159d
Author:    Weijun Wang <weijun@openjdk.org>
Date:      2021-08-19 19:02:22 +0000
URL:       https://git.openjdk.java.net/jdk/commit/9569159d2552d6079cd039b602264a324dcdfe49
;;;",,,,,,,,,,,,,,,,,,,,,,,,,
substandard error messages from the docs build,JDK-8272667,5056940,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,jjg,jjg,jjg,2021-08-18 14:01,2021-08-25 18:14,2023-10-01 09:57,2021-08-18 16:42,,,,,,,,18,infrastructure,,0,,,,,,,,,,,,,,,,,,,,,,"The docs build uses an internal tool to ""fix up"" the output from pandoc.  If there are errors in the input, the source of the error is reported as ""<stdin>"".

$ make docs
Building target 'docs' in configuration 'macosx-x64'
Generating JDK_API javadoc for 60 modules
<stdin>:236: bad html
<stdin>:236: bad html
<stdin>:773: bad html
<stdin>:773: bad html
Finished building target 'docs' in configuration 'macosx-x64'

It would be better if the tool indicated the actual file in error.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2u32j:",9223372036854775807,b12,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@429c566,,,,,,,,,"2021-08-18 16:42;roboduke;Changeset: 6d3d4795
Author:    Jonathan Gibbons <jjg@openjdk.org>
Date:      2021-08-18 23:40:44 +0000
URL:       https://git.openjdk.java.net/jdk/commit/6d3d47957ef03c90ed3b1cb7a48902366cd1bc27
;;;",,,,,,,,,,,,,,,,,,,,,,,,,
G1 heap region info print order changed by JDK-8269914,JDK-8272651,5056922,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,sjohanss,sjohanss,sjohanss,2021-08-18 07:17,2021-09-01 18:48,2023-10-01 09:57,2021-08-30 07:38,18,,,,,,,18,hotspot,,0,gc-g1,gc-g1-fullgc,,,,,,,,,,,,,,,,,,,,"In JDK-8269914 the heap region usage was factored into G1HeapPrinterMark. The region information is printed in the destructor and for the Full GC this is a bit to late. We have:
```
  G1FullCollector collector(this, explicit_gc, do_clear_all_soft_refs, do_maximum_compaction);
  GCTraceTime(Info, gc) tm(""Pause Full"", NULL, gc_cause(), true);
```
And G1FullCollector has a member G1FullGCScope which in turn has a G1HeapPrinterMark as a member. The order can be easily changed by first starting the timer and then create the collector object.

",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2u2yj:",9223372036854775807,b13,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6b00f96c,,,,,,,,,"2021-08-18 07:27;sjohanss;Wasn't exactly that easy, since the scope holds the GCIdMark and also the GCTraceCPUTime which should both live longer than the GCTraceTime.;;;","2021-08-18 07:40;sjohanss;Looking a bit more at this the gc+heap=debug for young GC has also move and I think it is making the structure of the logs harder to follow:
This is -Xlog:gc*,gc+heap=debug
JDK 17
---
[0,052s][debug][gc,heap     ] GC(0) Heap before GC invocations=0 (full 0):
[0,052s][debug][gc,heap     ] GC(0)  garbage-first heap   total 1052672K, used 2016K [0x0000000700000000, 0x0000000800000000)
[0,052s][debug][gc,heap     ] GC(0)   region size 2048K, 1 young (2048K), 0 survivors (0K)
[0,052s][debug][gc,heap     ] GC(0)  Metaspace       used 73K, committed 320K, reserved 1056768K
[0,052s][debug][gc,heap     ] GC(0)   class space    used 3K, committed 128K, reserved 1048576K
[0,052s][info ][gc,start    ] GC(0) Pause Young (Concurrent Start) (System.gc())
[0,055s][info ][gc,task     ] GC(0) Using 24 workers of 28 for evacuation
[0,056s][info ][gc,phases   ] GC(0)   Pre Evacuate Collection Set: 0,1ms
[0,056s][info ][gc,phases   ] GC(0)   Merge Heap Roots: 0,1ms
[0,056s][info ][gc,phases   ] GC(0)   Evacuate Collection Set: 0,3ms
[0,056s][info ][gc,phases   ] GC(0)   Post Evacuate Collection Set: 0,3ms
[0,056s][info ][gc,phases   ] GC(0)   Other: 2,5ms
[0,056s][info ][gc,heap     ] GC(0) Eden regions: 1->0(24)
[0,056s][info ][gc,heap     ] GC(0) Survivor regions: 0->1(4)
[0,056s][info ][gc,heap     ] GC(0) Old regions: 0->0
[0,056s][info ][gc,heap     ] GC(0) Archive regions: 2->2
[0,056s][info ][gc,heap     ] GC(0) Humongous regions: 0->0
[0,056s][info ][gc,metaspace] GC(0) Metaspace: 73K(320K)->73K(320K) NonClass: 70K(192K)->70K(192K) Class: 3K(128K)->3K(128K)
[0,056s][debug][gc,heap     ] GC(0) Heap after GC invocations=1 (full 0):
[0,056s][debug][gc,heap     ] GC(0)  garbage-first heap   total 1052672K, used 2874K [0x0000000700000000, 0x0000000800000000)
[0,056s][debug][gc,heap     ] GC(0)   region size 2048K, 1 young (2048K), 1 survivors (2048K)
[0,056s][debug][gc,heap     ] GC(0)  Metaspace       used 73K, committed 320K, reserved 1056768K
[0,056s][debug][gc,heap     ] GC(0)   class space    used 3K, committed 128K, reserved 1048576K
[0,056s][info ][gc          ] GC(0) Pause Young (Concurrent Start) (System.gc()) 3M->2M(1028M) 3,334ms
[0,056s][info ][gc,cpu      ] GC(0) User=0,00s Sys=0,00s Real=0,01s

JDK 18
---
[0,050s][info ][gc,task     ] GC(0) Using 24 workers of 28 for evacuation
[0,050s][info ][gc,start    ] GC(0) Pause Young (Concurrent Start) (System.gc())
[0,050s][debug][gc,heap     ] GC(0) Heap before GC invocations=0 (full 0):
[0,050s][debug][gc,heap     ] GC(0)  garbage-first heap   total 1052672K, used 2016K [0x0000000700000000, 0x0000000800000000)
[0,050s][debug][gc,heap     ] GC(0)   region size 2048K, 1 young (2048K), 0 survivors (0K)
[0,050s][debug][gc,heap     ] GC(0)  Metaspace       used 73K, committed 320K, reserved 1056768K
[0,050s][debug][gc,heap     ] GC(0)   class space    used 3K, committed 128K, reserved 1048576K
[0,051s][info ][gc,heap     ] GC(0) Eden regions: 1->0(24)
[0,051s][info ][gc,heap     ] GC(0) Survivor regions: 0->1(4)
[0,051s][info ][gc,heap     ] GC(0) Old regions: 0->0
[0,051s][info ][gc,heap     ] GC(0) Archive regions: 2->2
[0,051s][info ][gc,heap     ] GC(0) Humongous regions: 0->0
[0,051s][info ][gc,metaspace] GC(0) Metaspace: 73K(320K)->73K(320K) NonClass: 70K(192K)->70K(192K) Class: 3K(128K)->3K(128K)
[0,051s][debug][gc,heap     ] GC(0) Heap after GC invocations=1 (full 0):
[0,051s][debug][gc,heap     ] GC(0)  garbage-first heap   total 1052672K, used 2874K [0x0000000700000000, 0x0000000800000000)
[0,051s][debug][gc,heap     ] GC(0)   region size 2048K, 1 young (2048K), 1 survivors (2048K)
[0,051s][debug][gc,heap     ] GC(0)  Metaspace       used 73K, committed 320K, reserved 1056768K
[0,051s][debug][gc,heap     ] GC(0)   class space    used 3K, committed 128K, reserved 1048576K
[0,051s][info ][gc,phases   ] GC(0)   Pre Evacuate Collection Set: 0,2ms
[0,051s][info ][gc,phases   ] GC(0)   Merge Heap Roots: 0,1ms
[0,051s][info ][gc,phases   ] GC(0)   Evacuate Collection Set: 0,4ms
[0,051s][info ][gc,phases   ] GC(0)   Post Evacuate Collection Set: 0,3ms
[0,051s][info ][gc,phases   ] GC(0)   Other: 0,5ms
[0,051s][info ][gc          ] GC(0) Pause Young (Concurrent Start) (System.gc()) 3M->2M(1028M) 1,494ms
[0,051s][info ][gc,cpu      ] GC(0) User=0,00s Sys=0,01s Real=0,00s;;;","2021-08-20 01:21;kbarrett;This part seems very wrong.  Having part of the logging for a GC before the [gc,start] entry is really confusing.
[0,050s][info ][gc,task ] GC(0) Using 24 workers of 28 for evacuation
[0,050s][info ][gc,start ] GC(0) Pause Young (Concurrent Start) (System.gc())
;;;","2021-08-20 02:34;sjohanss;I agree that some other logs are a bit strange as well. To me something like this would should be the end goal:
---
[0,050s][debug][gc,heap ] GC(0) Heap before GC invocations=0 (full 0):
[0,050s][debug][gc,heap ] GC(0) garbage-first heap total 1052672K, used 2016K [0x0000000700000000, 0x0000000800000000)
[0,050s][debug][gc,heap ] GC(0) region size 2048K, 1 young (2048K), 0 survivors (0K)
[0,050s][debug][gc,heap ] GC(0) Metaspace used 73K, committed 320K, reserved 1056768K
[0,050s][debug][gc,heap ] GC(0) class space used 3K, committed 128K, reserved 1048576K
[0,050s][info ][gc,start ] GC(0) Pause Young (Concurrent Start) (System.gc())
[0,050s][info ][gc,task ] GC(0) Using 24 workers of 28 for evacuation
[0,051s][info ][gc,phases ] GC(0) Pre Evacuate Collection Set: 0,2ms
[0,051s][info ][gc,phases ] GC(0) Merge Heap Roots: 0,1ms
[0,051s][info ][gc,phases ] GC(0) Evacuate Collection Set: 0,4ms
[0,051s][info ][gc,phases ] GC(0) Post Evacuate Collection Set: 0,3ms
[0,051s][info ][gc,phases ] GC(0) Other: 0,5ms
[0,051s][info ][gc,heap ] GC(0) Eden regions: 1->0(24)
[0,051s][info ][gc,heap ] GC(0) Survivor regions: 0->1(4)
[0,051s][info ][gc,heap ] GC(0) Old regions: 0->0
[0,051s][info ][gc,heap ] GC(0) Archive regions: 2->2
[0,051s][info ][gc,heap ] GC(0) Humongous regions: 0->0
[0,051s][info ][gc,metaspace] GC(0) Metaspace: 73K(320K)->73K(320K) NonClass: 70K(192K)->70K(192K) Class: 3K(128K)->3K(128K)
[0,051s][info ][gc ] GC(0) Pause Young (Concurrent Start) (System.gc()) 3M->2M(1028M) 1,494ms
[0,051s][info ][gc,cpu ] GC(0) User=0,00s Sys=0,01s Real=0,00s 
[0,051s][debug][gc,heap ] GC(0) Heap after GC invocations=1 (full 0):
[0,051s][debug][gc,heap ] GC(0) garbage-first heap total 1052672K, used 2874K [0x0000000700000000, 0x0000000800000000)
[0,051s][debug][gc,heap ] GC(0) region size 2048K, 1 young (2048K), 1 survivors (2048K)
[0,051s][debug][gc,heap ] GC(0) Metaspace used 73K, committed 320K, reserved 1056768K
[0,051s][debug][gc,heap ] GC(0) class space used 3K, committed 128K, reserved 1048576K
---
Still there are some logs before and after the start/end messages of ""Pause Young"", but having the before/after heap logs kind of makes sense.;;;","2021-08-20 02:36;sjohanss;I would be ok having them ""inside"" of the start end as well, but then I think we need to alter the way they are printed to get a better structure.;;;","2021-08-30 07:38;roboduke;Changeset: f11e099a
Author:    Stefan Johansson <sjohanss@openjdk.org>
Date:      2021-08-30 14:37:03 +0000
URL:       https://git.openjdk.java.net/jdk/commit/f11e099a149adfecc474ba37276ec8672067d090
;;;",,,,,,,,,,,,,,,,,,,,
Backout JDK-8176837 from 8u312,JDK-8272643,5056913,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,abakhtin,abakhtin,abakhtin,2021-08-18 06:11,2022-09-04 22:57,2023-10-01 09:57,2021-09-13 16:31,openjdk8u312,,,,,,,openjdk8u312,security-libs,,0,jdk8u-critical-request,jdk8u-critical-yes,,,,,,,,,,,,,,,,,,,,"Commit message with incorrect Bug ID
Changeset https://hg.openjdk.java.net/jdk8u/jdk8u-dev/jdk/rev/b196b541720a is related to JDK-8268965, not JDK-8176837. This changeset should be backout and committed again with the correct Bug ID (JDK-8268965)


",,,,,,,,,,,JDK-8276269,,,,,,,,,,,,,,,,,,,,,,,,JDK-8268965,JDK-8176837,JDK-8293345,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2u2wj:",9223372036854775807,b06,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@7cafbd52,,,,,,,,,"2021-09-01 20:20;andrew;As we are now in rampdown for 8u312, jdk8u-critical-yes will be needed to push this. Revoking jdk8u-fix-yes as it makes no sense for 8u322.;;;","2021-09-06 00:21;abakhtin;Sorry, I was away for two weeks. I can push these changes as soon as it will be marked with jdk8u-fix-yes back.;;;","2021-09-06 07:30;andrew;To make 8u312, it now needs jdk8u-critical-request & jdk8u-critical-yes.  We really do need to fix this there, especially if the real 8176837 is not present.;;;","2021-09-13 16:31;hgupdate;URL:   https://hg.openjdk.java.net/jdk8u/jdk8u/jdk/rev/c466b0a5a4b9
User:  andrew
Date:  2021-09-13 23:26:21 +0000
;;;",,,,,,,,,,,,,,,,,,,,,,
jpackaged applications using microphone on mac,JDK-8272639,5056907,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,herrick,herrick,herrick,2021-08-18 05:16,2023-08-22 19:21,2023-10-01 09:57,2021-08-24 14:01,16,17,18,,,,,18,tools,,0,jdk17u-fix-request,jdk17u-fix-SQE-ok-next,jdk17u-fix-yes,sn_100,,,,,,,,,,,,,,,,,,"When a Java application using the microphone on macosx is launched for the first time (using the java launcher), the system will pop up a dialog asking user if it is ok for this app to use the microphone.  When the same application is built with jpackage and launched by double clicking on the app in finder, no such dialog will be shown and the microphone access will be blocked.
This has nothing to do with signing the app.
The java launcher's plist has the following entry, that is not present in the plist of the application as generated by jpackage:
    <key>NSMicrophoneUsageDescription</key>
    <string>The application is requesting access to the microphone.</string>

Adding this property in src/jdk.jpackage/macosx/classes/jdk/jpackage/internal/resources/Info-lite.plist.template fixes this issue.
",,,,,,,,,,,JDK-8273241,,,,,,,,,,,,,,,,,,,JDK-8272818,,,,,JDK-8313579,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2u2v7:",9223372036854775807,b12,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@3656b41f,,,,,,,,,"2021-08-18 05:21;herrick;also, when signing for distribution outside the mac app store, we add the the entitlement :
    <key>com.apple.security.device.audio-input</key>
    <true/>
we do not add this when signing for the app store, so the above should be added to resources/sandbox.plist;;;","2021-08-18 05:36;herrick;It should be possible to work around this issue in JDK17 (or JDK16) by using the --resource-dir option:
1.) create an empty directory test-resources 
2.) copy from the openjdk sources the file src/jdk.jpackage/macosx/classes/jdk/jpackage/internal/resources/Info-lite.plist.template to test-resources/Info.plist.
3.) edit test-resources/info.plist to include the key:
   <key>NSMicrophoneUsageDescription</key>
    <string>The application is requesting access to the microphone.</string>
4.) now add ""--resource-dir test-resources"" option to your jpackage command, and it will use this plist template instead of the default one.

To work around issue with mac app store copy the default entitlements file for an at  src/jdk.jpackage/macosx/classes/jdk/jpackage/internal/resources/sandbox.plist , add the lines:
    <key>com.apple.security.device.audio-input</key>
    <true/> 
save that file and use it as value of jpackage ""--mac-entitlements"" option.
;;;","2021-08-24 14:01;roboduke;Changeset: b17b821a
Author:    Andy Herrick <herrick@openjdk.org>
Date:      2021-08-24 20:59:43 +0000
URL:       https://git.openjdk.java.net/jdk/commit/b17b821a570930e4188bcdfb396f0a7abe99caf6
;;;","2021-09-01 09:24;herrick;Fix request (17u) 
macosx apps using the microphone need this fix.
clean backport needs JDK-8273282 backport first
;;;",,,,,,,,,,,,,,,,,,,,,,
Unnecessary Attr.visitIdent.noOuterThisPath,JDK-8272618,5056886,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,jlahoda,jlahoda,jlahoda,2021-08-18 01:23,2021-09-08 22:53,2023-10-01 09:57,2021-08-31 23:06,18,,,,,,,18,tools,,0,,,,,,,,,,,,,,,,,,,,,,"As reported here:
https://mail.openjdk.java.net/pipermail/compiler-dev/2021-August/017755.html

The Attr.visitIdent.noOuterThisPath variable is unnecessary, as it is currently only assigned to false. This is a consequence of -source <= 5 support removal.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8011044,,,,,,,,,,,,,,,,,,,,,,,,"0|i2u2qj:",9223372036854775807,b13,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4dca67bd,,,,,,,,,"2021-08-18 09:26;darcy;Removal of -source/-target 5 done under JDK-8011044.;;;","2021-08-31 23:06;roboduke;Changeset: e600fe1a
Author:    Jan Lahoda <jlahoda@openjdk.org>
Date:      2021-09-01 06:06:17 +0000
URL:       https://git.openjdk.java.net/jdk/commit/e600fe1a1a57d7e4060b3a1b9a8ecdb65664a506
;;;",,,,,,,,,,,,,,,,,,,,,,,,
Strange code in java.text.DecimalFormat#applyPattern,JDK-8272616,5056884,Bug,Resolved,JDK,JDK,software,duke,,,P5,Fixed,aturbanov,aturbanov,aturbanov,2021-08-18 00:38,2021-08-25 18:14,2023-10-01 09:57,2021-08-19 08:59,17,,,,,,,18,core-libs,,0,intellij-found,noreg-trivial,,,,,,,,,,,,,,,,,,,,"DecimalFormat.java contains following at line 3404 
https://github.com/openjdk/jdk/blob/master/src/java.base/share/classes/java/text/DecimalFormat.java#L3404

{code}
} else if (ch == QUOTE) {
    // A quote outside quotes indicates either the
    // opening quote or two quotes, which is a quote
    // literal. That is, we have the first quote in 'do'
    // or o''clock.
    if (ch == QUOTE) {
        if ((pos+1) < pattern.length() &&
            pattern.charAt(pos+1) == QUOTE) {
            ++pos;
            affix.append(""''""); // o''clock
        } else {
            inQuote = true; // 'do'
        }
        continue;
    }
{code}

It seems that the second condition is always true.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2u2q3:",9223372036854775807,b12,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6fc9e792,,,,,,,,,"2021-08-19 08:59;roboduke;Changeset: 51c1b9a6
Author:    Andrey Turbanov <turbanoff@gmail.com>
Committer: Brian Burkhalter <bpb@openjdk.org>
Date:      2021-08-19 15:57:18 +0000
URL:       https://git.openjdk.java.net/jdk/commit/51c1b9a6870bd9644e92227e47082a53e2d1c066
;;;",,,,,,,,,,,,,,,,,,,,,,,,,
CharsetDecoder.decode(ByteBuffer) throws IllegalArgumentException,JDK-8272613,5056857,Bug,Closed,JDK,JDK,software,duke,,,P4,Fixed,naoto,webbuggrp,webbuggrp,2021-08-17 12:11,2023-07-21 07:35,2023-10-01 09:57,2023-03-29 09:10,16,,,,,,,21,core-libs,,0,dcsaw,reproducer-yes,webbug,,,,,,,,,,,,,,,,,,,"A DESCRIPTION OF THE PROBLEM :
If CharsetDecoder.decode(ByteBuffer) is called on a ByteBuffer with size close to Integer.MAX_VALUE, IllegalArgumentException is thrown due to integer overflow in output buffer size allocation.

In most cases (characters per byte 1.0 or less), decode() should handle up to Integer.MAX_VALUE sized ByteBuffers. In cases where characters per byte can be greater than one and output size would exceed Integer.MAX_VALUE, then perhaps some new subclass of CharacterCodingException, such as ""OutputSizeException"" could be thrown.

STEPS TO FOLLOW TO REPRODUCE THE PROBLEM :
Run as:
   java -Xms8G -Xmx8G CharsetDecoderBug


EXPECTED VERSUS ACTUAL BEHAVIOR :
EXPECTED -
No output.
ACTUAL -
Exception in thread ""main"" java.lang.IllegalArgumentException: capacity < 0: (-2000127 < 0)
	at java.base/java.nio.Buffer.createCapacityException(Buffer.java:278)
	at java.base/java.nio.CharBuffer.allocate(CharBuffer.java:360)
	at java.base/java.nio.charset.CharsetDecoder.decode(CharsetDecoder.java:814)
	at CharsetDecoderBug.main(CharsetDecoderBug.java:14)


---------- BEGIN SOURCE ----------
import java.nio.charset.*;
import java.nio.*;

public class CharsetDecoderBug {
   public static void main(String[] args) {
      Charset charset = Charset.forName(""utf8"");
      CharsetDecoder decoder = charset.newDecoder();
      // This works. // int size = Integer.MAX_VALUE - 10000000;
      int size = Integer.MAX_VALUE - 1000000;
      byte[] bytes = new byte[size];
      ByteBuffer bb = ByteBuffer.wrap(bytes, 0, size);
      try {
         decoder.decode(bb);
      }
      catch (CharacterCodingException ignored) {
      }
   }
}

---------- END SOURCE ----------

CUSTOMER SUBMITTED WORKAROUND :
Enforce a lower limit on the size of the ByteBuffer before calling decode().

FREQUENCY : always


",,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8304842,,,,,,,,,,,,,,,,,,"2021-08-17 22:57;tongwan;CharsetDecoderBug.java;https://bugs.openjdk.org/secure/attachment/96055/CharsetDecoderBug.java",,,,,generic,,,,,,,,,generic,,,,,"0|i2u2k3:",9223372036854775807,b16,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@3962510e,,,,,,,Verified,,"2021-08-17 22:58;tongwan;The observation on Windows 10:
JDK 16: got java.lang.IllegalArgumentException: capacity < 0: (-2000127 < 0)

This looks like an enhancement.  Moved to JDK for more evaluations.;;;","2023-03-23 18:55;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/13131
Date: 2023-03-21 22:40:48 +0000;;;","2023-03-29 09:10;dukebot;Changeset: f07decb7
Author:    Naoto Sato <naoto@openjdk.org>
Date:      2023-03-29 16:08:57 +0000
URL:       https://git.openjdk.org/jdk/commit/f07decb74b525072cf035b1e11569d43390952ed
;;;",,,,,,,,,,,,,,,,,,,,,,,
java_lang_System::allow_security_manager() doesn't set its initialization flag,JDK-8272608,5056872,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,msaavedrasil,dholmes,dholmes,2021-08-17 18:14,2022-12-09 07:33,2023-10-01 09:57,2021-09-09 18:07,17,18,,,,,,18,hotspot,,0,jdk17u-fix-request,jdk17u-fix-yes,noreg-cleanup,redhat-interest,,,,,,,,,,,,,,,,,,"javaClasses.cpp:

bool java_lang_System::allow_security_manager() {
  static int initialized = false;
  static bool allowed = true; // default
  if (!initialized) {
    oop base = vmClasses::System_klass()->static_field_base_raw();
    int never = base->int_field(_static_never_offset);
    allowed = (base->int_field(_static_allow_security_offset) != never);
  }
  return allowed;
}

We never set `initialized` to true, so every call to allow_security_manager() re-reads the System class field.",,,,,,,,,,,JDK-8296522,JDK-8298483,,,,,,,,,,,,,,,,,,,,,,,JDK-8195744,,,,,,,,,,,,,,,,,,,,,b09,17,,,,,,,"0|i2u2nf:",9223372036854775807,b15,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,,,"2021-09-09 18:07;roboduke;Changeset: 08f0be83
Author:    matias9927 <matias@udel.edu>
Committer: Coleen Phillimore <coleenp@openjdk.org>
Date:      2021-09-10 01:05:37 +0000
URL:       https://git.openjdk.java.net/jdk/commit/08f0be8388914901ac40525ed995136ce020f432
;;;","2021-10-06 02:31;shade;Worth picking up to 17u as the followup for JDK-8195744?;;;","2022-10-26 04:35;shade;Fix Request (17u) 

Fixes a minor performance bug. Applies cleanly. Testing passes.;;;","2022-10-26 04:44;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/843
Date: 2022-10-26 11:34:38 +0000;;;",,,,,,,,,,,,,,,,,,,,,,
[macOS] not all KEY_PRESSED events sent when control modifier is used,JDK-8272602,5056854,Bug,Closed,JDK,JDK,software,duke,,,P2,Fixed,prr,vkempik,vkempik,2021-08-17 10:51,2022-06-01 08:20,2023-10-01 09:57,2021-08-19 17:09,11.0.12,11.0.12-oracle,13.0.8,15.0.4,17,18,,18,client-libs,,0,CPU21_10-critical-approved,CPU21_10-critical-SQE-OK,jdk11u-fix-request,jdk11u-fix-yes,jdk15u-fix-request,jdk15u-fix-yes,jdk17u-fix-request,jdk17u-fix-SQE-ok,jdk17u-fix-yes,jnf,macos,regression,regression_8260616,sn_100,,,,,,,,"This got broken somewhere between jdk16.0.2 and jdk17-ea+22.
Latest EA is broken as well.

Run the reproducer, in awt window press control+space key combo.

expected behaviour:
key pressed: KEY_PRESSED,keyCode=17,keyText=⌃,keyChar=Undefined keyChar,modifiers=⌃,extModifiers=⌃,keyLocation=KEY_LOCATION_LEFT,rawCode=0,primaryLevelUnicode=0,scancode=0,extendedKeyCode=0x11
key pressed: KEY_PRESSED,keyCode=32,keyText=␣,keyChar=' ',modifiers=⌃,extModifiers=⌃,keyLocation=KEY_LOCATION_STANDARD,rawCode=0,primaryLevelUnicode=0,scancode=0,extendedKeyCode=0x20
key typed: KEY_TYPED,keyCode=0,keyText=Unknown keyCode: 0x0,keyChar=' ',modifiers=⌃,extModifiers=⌃,keyLocation=KEY_LOCATION_UNKNOWN,rawCode=0,primaryLevelUnicode=0,scancode=0,extendedKeyCode=0x20
key released: KEY_RELEASED,keyCode=32,keyText=␣,keyChar=' ',modifiers=⌃,extModifiers=⌃,keyLocation=KEY_LOCATION_STANDARD,rawCode=0,primaryLevelUnicode=0,scancode=0,extendedKeyCode=0x20
key released: KEY_RELEASED,keyCode=17,keyText=⌃,keyChar=Undefined keyChar,keyLocation=KEY_LOCATION_LEFT,rawCode=0,primaryLevelUnicode=0,scancode=0,extendedKeyCode=0x11

actual behaviour:

key pressed: KEY_PRESSED,keyCode=17,keyText=⌃,keyChar=Undefined keyChar,modifiers=⌃,extModifiers=⌃,keyLocation=KEY_LOCATION_LEFT,rawCode=0,primaryLevelUnicode=0,scancode=0,extendedKeyCode=0x11
key released: KEY_RELEASED,keyCode=17,keyText=⌃,keyChar=Undefined keyChar,keyLocation=KEY_LOCATION_LEFT,rawCode=0,primaryLevelUnicode=0,scancode=0,extendedKeyCode=0x11


other release trains got broken between april and july updates of 2021",,,,,,,,,,,JDK-8272790,JDK-8272961,JDK-8272785,JDK-8272781,JDK-8272798,JDK-8272950,JDK-8272794,JDK-8287677,,,,,,,,,,,,,,JDK-8276786,,,,,,,,JDK-8260616,,,,,"2021-08-17 10:49;vkempik;Scratch.java;https://bugs.openjdk.org/secure/attachment/96053/Scratch.java",,,,,,,,,,,,,,os_x,,,,,"0|i2u2jn:",9223372036854775807,b12,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@5a9b3fd3,,,,,,,Verified,,"2021-08-17 10:54;vkempik;This also breaks Netbeans AutoComplete.;;;","2021-08-18 03:41;vkempik;I was able to bisect the regression and found the cause, it's JDK-8260616;;;","2021-08-18 07:30;vdyakov;please evaluate;;;","2021-08-18 11:58;prr;I believe I see the problem. It is in String conversion.
When Ctrl-Space is pressed the generated string is of length one with the character code 0 (zero)
Unfortunately the conversion to a Java string is using NewStringUTF which sees just a byte sequence
that with zeros and hence sees it as a zero length null terminated string.

We need to use a different JNI String API to be able to specify the expected number of characters
ie NewString;;;","2021-08-19 17:09;roboduke;Changeset: ddcd851c
Author:    Phil Race <prr@openjdk.org>
Date:      2021-08-20 00:08:42 +0000
URL:       https://git.openjdk.java.net/jdk/commit/ddcd851c43aa97477c7e406490c0c7c7d71ac629
;;;","2021-08-19 17:14;prr;Fix Request:
This fix is for a regression in JDK 17. It does not seem to meet the 17 stopper criteria
since it is a platform-specific (macOS) client-side bug (and FWIW the fix risk
is limited to the same) and is already out there in 11.0.12 (July CPU) and has
been in JDK 17 since b09 (early Feb 2021) and was only discovered in the last few days.
However it should be fixed in the earliest feasible update releases.
The fix is just to use a different way of converting a macOS native string to a Java string.
A new test is provided but since the updated fn is used in multiple places in the macOS
client code it was necessary to re-run as many client tests as possible on macOS.
Meaning all the automated ones, and select manual testing.
The fix for JDK 18 linked in this bug should apply cleanly to JDK 17u
Review link : https://git.openjdk.java.net/jdk/pull/5177;;;","2021-08-20 06:03;vkempik;Fix Request (15u): similar to previous. Applies cleanly, testing: jdk:tier1, tier2, netbeans autocompletion by control+space;;;","2021-08-20 08:29;vkempik;Fix Request (13u): similar to 17u. Applies cleanly, testing: tier1, tier2, netbeans autocompletion by control+space
;;;","2021-08-20 09:39;vkempik;Fix Request (11u): similar to 17u. Applies cleanly, testing: tier1, tier2, netbeans autocompletion by control+space
;;;",,,,,,,,,,,,,,,,,
sun/security/pkcs11/Provider/MultipleLogins.sh fails after JDK-8266182,JDK-8272581,5056829,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,akolarkunnu,akolarkunnu,akolarkunnu,2021-08-17 08:01,2021-10-06 23:02,2023-10-01 09:57,2021-08-17 09:56,18,,,,,,,18,security-libs,,0,jdk11u-fix-request,jdk11u-fix-yes,jdk17u-fix-request,jdk17u-fix-SQE-ok,jdk17u-fix-yes,noreg-self,testbug,,,,,,,,,,,,,,,"/opt/mach5/mesos/work_dir/jib-master/install/jdk-18+11-543/src.full/open/test/jdk/sun/security/pkcs11/Provider/../../../../../lib/jdk/test/lib/artifacts/OpensslArtifactFetcher.java:28: error: cannot find symbol
import jdk.test.lib.Platform;
                   ^
  symbol:   class Platform
  location: package jdk.test.lib
/opt/mach5/mesos/work_dir/jib-master/install/jdk-18+11-543/src.full/open/test/jdk/sun/security/pkcs11/Provider/../../../../../lib/jdk/test/lib/artifacts/OpensslArtifactFetcher.java:29: error: package jdk.test.lib.process does not exist
import jdk.test.lib.process.ProcessTools;
                           ^
/opt/mach5/mesos/work_dir/jib-master/install/jdk-18+11-543/src.full/open/test/jdk/sun/security/pkcs11/Provider/../../../../../lib/jdk/test/lib/artifacts/OpensslArtifactFetcher.java:59: error: cannot find symbol
            } else if (Platform.is64bit()) {
                       ^
  symbol:   variable Platform
  location: class OpensslArtifactFetcher
/opt/mach5/mesos/work_dir/jib-master/install/jdk-18+11-543/src.full/open/test/jdk/sun/security/pkcs11/Provider/../../../../../lib/jdk/test/lib/artifacts/OpensslArtifactFetcher.java:60: error: cannot find symbol
                if (Platform.isLinux()) {
                    ^
  symbol:   variable Platform
  location: class OpensslArtifactFetcher
/opt/mach5/mesos/work_dir/jib-master/install/jdk-18+11-543/src.full/open/test/jdk/sun/security/pkcs11/Provider/../../../../../lib/jdk/test/lib/artifacts/OpensslArtifactFetcher.java:62: error: cannot find symbol
                } else if (Platform.isOSX()) {
                           ^
  symbol:   variable Platform
  location: class OpensslArtifactFetcher
/opt/mach5/mesos/work_dir/jib-master/install/jdk-18+11-543/src.full/open/test/jdk/sun/security/pkcs11/Provider/../../../../../lib/jdk/test/lib/artifacts/OpensslArtifactFetcher.java:64: error: cannot find symbol
                } else if (Platform.isWindows()) {
                           ^
  symbol:   variable Platform
  location: class OpensslArtifactFetcher
/opt/mach5/mesos/work_dir/jib-master/install/jdk-18+11-543/src.full/open/test/jdk/sun/security/pkcs11/Provider/../../../../../lib/jdk/test/lib/artifacts/OpensslArtifactFetcher.java:96: error: cannot find symbol
                ProcessTools.executeCommand(path, ""version"")
                ^
  symbol:   variable ProcessTools
  location: class OpensslArtifactFetcher",,,,,,,,,,,JDK-8273005,JDK-8273212,JDK-8274870,JDK-8273007,JDK-8273014,,,,,,,,,,,,,,,,,,,,JDK-8266182,,,,,,,,,,,,,,,generic,,,,,,,18,,generic,,,,,"0|i2u2e3:",9223372036854775807,b11,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@2ec284e3,,,,,,,,,"2021-08-17 09:07;akolarkunnu;MultipleLogins.sh compiles all files under lib/jdk/test/lib/artifacts, Since JDK-8266182 added a new file OpensslArtifactFetcher.java in to same package and it has dependency with some other library files jdk.test.lib.process.ProcessTools & jdk.test.lib.Platform. These libraries are not there in MultipleLogins's class path and this test fails with compilation error.

So as a fix moving OpensslArtifactFetcher.java to the package jdk.test.lib.security.;;;","2021-08-17 09:56;roboduke;Changeset: a199ebc0
Author:    Abdul Kolarkunnu <akolarkunnu@openjdk.org>
Date:      2021-08-17 16:54:32 +0000
URL:       https://git.openjdk.java.net/jdk/commit/a199ebc0175f9882f051551cff9ce08016f204a4
;;;","2021-08-25 02:38;akolarkunnu;JDK 17u fix request:

Please approve this fix for 17u. The patch applies cleanly, test only fix and the test passes post applying the patch. This needs to backport along with JDK-8266182.;;;","2021-10-06 02:34;jdowland;Fix Request (11u)

Please consider this backport for jdk11u. 

The patch applies cleanly and MultipleLogins.sh passes after applying. Note that in my testing, in 11u, the test does not fail prior to applying: although it's clear from the output that it failed to build OpensslArtifactFetcher.

PR (and review): https://github.com/openjdk/jdk11u-dev/pull/400;;;",,,,,,,,,,,,,,,,,,,,,,
C2: assert(false) failed: Bad graph detected in build_loop_late,JDK-8272574,5056822,Bug,Closed,JDK,JDK,software,duke,,,P2,Fixed,wchao,wchao,wchao,2021-08-17 04:45,2023-02-15 08:42,2023-10-01 09:57,2021-09-14 13:57,11,17,18,8u251,,,,18,hotspot,,0,hs-comp-triaged,jdk11u-fix-request,jdk11u-fix-yes,jdk13u-fix-request,jdk13u-fix-yes,jdk15u-fix-request,jdk15u-fix-yes,jdk17u-fix-request,jdk17u-fix-yes,oracle-triage-11,oracle-triage-17,oracle-triage-18,tencent-interest,,,,,,,,,"Crash happened when run the following test
#
# A fatal error has been detected by the Java Runtime Environment:
#
#  SIGSEGV (0xb) at pc=0x00007f109e08240b, pid=19518, tid=19536
#
# JRE version: OpenJDK Runtime Environment (18.0) (build 18-internal+0-adhoc.root.jdkdev)
# Java VM: OpenJDK 64-Bit Server VM (18-internal+0-adhoc.root.jdkdev, mixed mode, tiered, compressed oops, compressed class ptrs, g1 gc, linux-amd64)
# Problematic frame:
# V  [libjvm.so+0xa8f40b]  PhaseIdealLoop::build_loop_late_post_work(Node*, bool)+0x13b
#
# No core dump will be written. Core dumps have been disabled. To enable core dumping, try ""ulimit -c unlimited"" before starting Java again
#
# If you would like to submit a bug report, please visit:
#   https://bugreport.java.com/bugreport/crash.jsp
#

---------------  S U M M A R Y ------------

Command Line: LoadSplitThruPhi

Host: AMD EPYC 7K62 48-Core Processor, 8 cores, 60000G, CentOS Linux release 7.2 (Final)
Time: Tue Aug 17 19:41:33 2021 CST elapsed time: 0.280694 seconds (0d 0h 0m 0s)

---------------  T H R E A D  ---------------

Current thread (0x00007f10041ba540):  JavaThread ""C2 CompilerThread2"" daemon [_thread_in_native, id=19536, stack(0x00007f1031cfd000,0x00007f1031dfe000)]


Current CompileTask:
C2:    280  378       4       LoadSplitThruPhi::getPermutations1 (86 bytes)

Stack: [0x00007f1031cfd000,0x00007f1031dfe000],  sp=0x00007f1031df8dc0,  free space=1007k
Native frames: (J=compiled Java code, j=interpreted, Vv=VM code, C=native code)
V  [libjvm.so+0xa8f40b]  PhaseIdealLoop::build_loop_late_post_work(Node*, bool)+0x13b
V  [libjvm.so+0xa8fa80]  PhaseIdealLoop::build_loop_late(VectorSet&, Node_List&, Node_Stack&)+0x180
V  [libjvm.so+0xa903ab]  PhaseIdealLoop::build_and_optimize(LoopOptsMode)+0x75b
V  [libjvm.so+0x59b1f9]  PhaseIdealLoop::optimize(PhaseIterGVN&, LoopOptsMode)+0x149
V  [libjvm.so+0x598c5e]  Compile::Optimize()+0x85e
V  [libjvm.so+0x59aae2]  Compile::Compile(ciEnv*, ciMethod*, int, bool, bool, bool, bool, bool, DirectiveSet*)+0xe52
V  [libjvm.so+0x4db911]  C2Compiler::compile_method(ciEnv*, ciMethod*, int, bool, DirectiveSet*)+0x191
V  [libjvm.so+0x5a37f8]  CompileBroker::invoke_compiler_on_method(CompileTask*)+0xf68
V  [libjvm.so+0x5a4428]  CompileBroker::compiler_thread_loop()+0x4a8
V  [libjvm.so+0xdfe760]  JavaThread::thread_main_inner()+0x190
V  [libjvm.so+0xe02730]  Thread::call_run()+0xc0
V  [libjvm.so+0xbd04d1]  thread_native_entry(Thread*)+0xe1",,,,,,,,,,,JDK-8275270,JDK-8274483,JDK-8287372,JDK-8275109,JDK-8287374,,,,,,,,,,,,,,,,,,,,JDK-8277529,JDK-8277738,JDK-8300028,,,JDK-8280799,JDK-8278230,,,,"2021-08-17 04:45;wchao;SDD1.java;https://bugs.openjdk.org/secure/attachment/96046/SDD1.java","2021-08-17 04:45;wchao;hs_err_pid19518.log;https://bugs.openjdk.org/secure/attachment/96047/hs_err_pid19518.log","2021-08-17 18:26;wchao;hs_err_pid3611.log;https://bugs.openjdk.org/secure/attachment/96054/hs_err_pid3611.log",,,,,,,,,,,,,,,,,"0|i2u2cj:",9223372036854775807,b15,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,Verified,,"2021-08-17 15:59;dlong;ILW = crash/bad graph, seen in one reproducer, no workaround = HLH = P2;;;","2021-08-17 18:27;wchao;The test also crashes on debug versions:


# A fatal error has been detected by the Java Runtime Environment:
#
#  Internal Error (/data/openjdk/jdk_dev/src/hotspot/share/opto/loopnode.cpp:5343), pid=3611, tid=3630
#  assert(false) failed: Bad graph detected in build_loop_late
#
# JRE version: OpenJDK Runtime Environment (18.0) (fastdebug build 18-internal+0-adhoc.root.jdkdev)
# Java VM: OpenJDK 64-Bit Server VM (fastdebug 18-internal+0-adhoc.root.jdkdev, mixed mode, tiered, compressed oops, compressed class ptrs, g1 gc, linux-amd64)
# Problematic frame:
# V  [libjvm.so+0x12f20b7]  PhaseIdealLoop::build_loop_late_post_work(Node*, bool)+0x307
#
# No core dump will be written. Core dumps have been disabled. To enable core dumping, try ""ulimit -c unlimited"" before starting Java again
#
# If you would like to submit a bug report, please visit:
#   https://bugreport.java.com/bugreport/crash.jsp
#

---------------  S U M M A R Y ------------

Command Line: LoadSplitThruPhi

Host: VM_235_31_centos, AMD EPYC 7K62 48-Core Processor, 8 cores, 60000G, CentOS Linux release 7.2 (Final)
Time: Wed Aug 18 09:24:33 2021 CST elapsed time: 0.474709 seconds (0d 0h 0m 0s)

---------------  T H R E A D  ---------------

Current thread (0x00007f54542b62c0):  JavaThread ""C2 CompilerThread1"" daemon [_thread_in_native, id=3630, stack(0x00007f54945f6000,0x00007f54946f7000)]


Current CompileTask:
C2:    474  310       4       LoadSplitThruPhi::getPermutations1 (86 bytes)

Stack: [0x00007f54945f6000,0x00007f54946f7000],  sp=0x00007f54946f12c0,  free space=1004k
Native frames: (J=compiled Java code, j=interpreted, Vv=VM code, C=native code)
V  [libjvm.so+0x12f20b7]  PhaseIdealLoop::build_loop_late_post_work(Node*, bool)+0x307
V  [libjvm.so+0x12f255a]  PhaseIdealLoop::build_loop_late(VectorSet&, Node_List&, Node_Stack&)+0xba
V  [libjvm.so+0x12f2ec7]  PhaseIdealLoop::build_and_optimize(LoopOptsMode)+0x507
V  [libjvm.so+0xa1b693]  PhaseIdealLoop::optimize(PhaseIterGVN&, LoopOptsMode)+0x283
V  [libjvm.so+0xa1827c]  Compile::Optimize()+0x102c
V  [libjvm.so+0xa1a187]  Compile::Compile(ciEnv*, ciMethod*, int, bool, bool, bool, bool, bool, DirectiveSet*)+0x1247
V  [libjvm.so+0x83f616]  C2Compiler::compile_method(ciEnv*, ciMethod*, int, bool, DirectiveSet*)+0x646
V  [libjvm.so+0xa29904]  CompileBroker::invoke_compiler_on_method(CompileTask*)+0xd04
V  [libjvm.so+0xa2a578]  CompileBroker::compiler_thread_loop()+0x598
V  [libjvm.so+0x19c4d9e]  JavaThread::thread_main_inner()+0x64e
V  [libjvm.so+0x19cb6e0]  Thread::call_run()+0x100
V  [libjvm.so+0x1561d64]  thread_native_entry(Thread*)+0x104
;;;","2021-08-17 21:20;dlong;We have two other bugs failing with the same assert: JDK-8272562 and JDK-8271954.  Could they be related?;;;","2021-08-17 23:49;chagedorn;Both of these referred bugs are regressions from JDK-8252372 and do not trigger if we disable split if with -XX:-SplitfBlocks. However, this bug here still reproduces with -XX:-SplitIfBlocks. This is also confirmed by looking at the open review which talks about loop predication without mentioning anything related to JDK-8252372.;;;","2021-09-14 13:57;roboduke;Changeset: 16c3ad1f
Author:    casparcwang <casparcwang@tencent.com>
Committer: Jie Fu <jiefu@openjdk.org>
Date:      2021-09-14 20:55:01 +0000
URL:       https://git.openjdk.java.net/jdk/commit/16c3ad1ff4d9a0e21f15656c73a96a6c143c811a
;;;","2021-09-27 23:49;thartmann;Fix request (17u):
The bug leads to a crash in C2. The fix is medium risk and has been tested in the JDK 18 for a while and with tier1-3 in JDK 17u. The patch applies cleanly.;;;","2021-10-13 01:20;mdoerr;Fix Request (11u):
Should get backported for parity with 11.0.14-oracle. Applies cleanly.;;;","2022-05-26 06:19;yan;Fix request (13u,15u):

Should be backported for parity with major releases. First series of tests run OK.;;;","2022-05-26 06:23;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk13u-dev/pull/352
Date: 2022-05-26 13:18:19 +0000;;;","2022-05-26 07:06;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk15u-dev/pull/213
Date: 2022-05-26 13:58:59 +0000;;;",,,,,,,,,,,,,,,,
C2: crash in PhaseCFG::global_code_motion,JDK-8272570,5056818,Bug,Closed,JDK,JDK,software,duke,,,P2,Fixed,wchao,wchao,wchao,2021-08-17 04:08,2022-02-03 06:24,2023-10-01 09:57,2021-08-24 18:18,11,17,18,,,,,18,hotspot,,0,azul-interest,hs-comp-triaged,jdk11u-fix-request,jdk11u-fix-yes,jdk13u-fix-request,jdk13u-fix-yes,jdk15u-fix-request,jdk15u-fix-yes,jdk17u-fix-request,jdk17u-fix-yes,oracle-triage-11,oracle-triage-17,oracle-triage-18,tencent-interest,,,,,,,,"Crash happened when run a small test in the attachment

#
# A fatal error has been detected by the Java Runtime Environment:
#
#  SIGSEGV (0xb) at pc=0x00007fa95e1b72a9, pid=29802, tid=29816
#
# JRE version: OpenJDK Runtime Environment (18.0) (build 18-internal+0-adhoc.root.jdkdev)
# Java VM: OpenJDK 64-Bit Server VM (18-internal+0-adhoc.root.jdkdev, mixed mode, tiered, compressed oops, compressed class ptrs, g1 gc, linux-amd64)
# Problematic frame:
# V  [libjvm.so+0xa242a9]  PhaseCFG::select(Block*, Node_List&, GrowableArray<int>&, VectorSet&, unsigned int, long*)+0x449
#
# No core dump will be written. Core dumps have been disabled. To enable core dumping, try ""ulimit -c unlimited"" before starting Java again
#
# If you would like to submit a bug report, please visit:
#   https://bugreport.java.com/bugreport/crash.jsp
#

---------------  S U M M A R Y ------------

Command Line: Test

Host: AMD EPYC 7K62 48-Core Processor, 8 cores, 60000G, CentOS Linux release 7.2 (Final)
Time: Tue Aug 17 18:59:39 2021 CST elapsed time: 0.139895 seconds (0d 0h 0m 0s)

---------------  T H R E A D  ---------------

Current thread (0x00007fa958189850):  JavaThread ""C2 CompilerThread0"" daemon [_thread_in_native, id=29816, stack(0x00007fa9004f9000,0x00007fa9005fa000)]


Current CompileTask:
C2:    139  374       4       Test::foo (38 bytes)

Stack: [0x00007fa9004f9000,0x00007fa9005fa000],  sp=0x00007fa9005f5350,  free space=1008k
Native frames: (J=compiled Java code, j=interpreted, Vv=VM code, C=native code)
V  [libjvm.so+0xa242a9]  PhaseCFG::select(Block*, Node_List&, GrowableArray<int>&, VectorSet&, unsigned int, long*)+0x449
V  [libjvm.so+0xa24e69]  PhaseCFG::schedule_local(Block*, GrowableArray<int>&, VectorSet&, long*)+0x8b9
V  [libjvm.so+0x7564a3]  PhaseCFG::global_code_motion()+0x5a3
V  [libjvm.so+0x7577fa]  PhaseCFG::do_global_code_motion()+0x4a
V  [libjvm.so+0x5961dc]  Compile::Code_Gen()+0x29c
V  [libjvm.so+0x59bcc7]  Compile::Compile(ciEnv*, ciMethod*, int, bool, bool, bool, bool, bool, DirectiveSet*)+0x13c7
V  [libjvm.so+0x4dd001]  C2Compiler::compile_method(ciEnv*, ciMethod*, int, bool, DirectiveSet*)+0x191
V  [libjvm.so+0x5a4468]  CompileBroker::invoke_compiler_on_method(CompileTask*)+0xf68
V  [libjvm.so+0x5a5098]  CompileBroker::compiler_thread_loop()+0x4a8
V  [libjvm.so+0xdfff60]  JavaThread::thread_main_inner()+0x190
V  [libjvm.so+0xe03fee]  Thread::call_run()+0xde
V  [libjvm.so+0xbd1001]  thread_native_entry(Thread*)+0xe1
",,,,,,,,,,,JDK-8274480,JDK-8274832,JDK-8280425,JDK-8274511,JDK-8280439,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"2021-08-17 04:08;wchao;Test.java;https://bugs.openjdk.org/secure/attachment/96040/Test.java","2021-08-18 20:44;wchao;hs_err_pid12528.log;https://bugs.openjdk.org/secure/attachment/96067/hs_err_pid12528.log","2021-08-17 04:07;wchao;hs_err_pid29802.log;https://bugs.openjdk.org/secure/attachment/96041/hs_err_pid29802.log",,,,,,,,,,,,,,,,,"0|i2u2bn:",9223372036854775807,b12,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,Verified,,"2021-08-17 16:36;dlong;ILW = crash, seen in one reproducer, no workaround = HLH = P2 ;;;","2021-08-18 23:23;wchao;The test also crashes in fastdebug & slowdebug version;;;","2021-08-24 18:18;roboduke;Changeset: 0f428ca5
Author:    casparcwang <casparcwang@tencent.com>
Committer: Jie Fu <jiefu@openjdk.org>
Date:      2021-08-25 01:16:48 +0000
URL:       https://git.openjdk.java.net/jdk/commit/0f428ca533627e758cdca599d4589f39c21e27b6
;;;","2021-09-27 23:24;thartmann;Fix request (17u):
The bug leads to a crash in C2. The fix is low risk and has been tested in the JDK 18 for a while and with tier1-3 in JDK 17u. The patch applies cleanly.;;;","2021-10-04 13:53;mdoerr;Fix Request (11u):
Should get backported for parity with 11.0.14-oracle. Applies cleanly.;;;","2022-01-19 08:46;yan;Fix request (15u)
problem reproduced, the fix applies cleanly, will set label after the nightly test run.;;;","2022-01-20 23:04;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk15u-dev/pull/158
Date: 2022-01-21 06:58:51 +0000;;;","2022-01-21 01:22;yan;Fix request (13u)
fix applies cleanly, hotspot tests run OK;;;","2022-01-21 01:29;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk13u-dev/pull/311
Date: 2022-01-21 09:25:00 +0000;;;",,,,,,,,,,,,,,,,,
[lworld] [AArch64] G1 write barrier slow path needs to save more registers,JDK-8272566,5056813,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,ngasson,ngasson,ngasson,2021-08-17 02:33,2021-08-18 08:27,2023-10-01 09:57,2021-08-18 08:27,repo-valhalla,,,,,,,repo-valhalla,hotspot,,0,lw3,lworld,,,,,,,,,,,,,,,,,,,,"Not seen any failures due to this, but we need to apply the same fix as JDK-8242210 and JDK-8251398 on x86 and save the argument registers when calling into the runtime slow path.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8242210,,,,,,,,,,,,,,,aarch64,,,,,,,,,,,,,,"0|i2u2aj:",9223372036854775807,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Incorrect attribution of method invocations of Object methods on interfaces,JDK-8272564,5056807,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,jlahoda,jlahoda,jlahoda,2021-08-17 01:43,2022-09-16 13:30,2023-10-01 09:57,2021-10-05 03:19,18,,,,,,,18,tools,,0,,,,,,,,,,,,,,,,,,,,,,"Consider code like:
---
interface I {
     public String toString();
}
interface J extends I {}

I i = null;
i.toString(); //attributed as I.toString();
J j = null;
j.toString(); //attributed as j.toString();
---

This does not seem quite right - the method is inherited in ""J"" from ""I"", not from Object.

Moreover, calling `Elements.getAllMembers()` will return ""toString"" from ""I"" in the result, but calling `Trees.isAccessible(..., ""toString"", ""I"");` will return false, because it will appear that the method is implemented in j.l.Object.",,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8272715,,,,,,,,JDK-8293890,,,,,JDK-8282080,,,,,,,,,,,,,,,,,,,,,,,,"0|i2u297:",9223372036854775807,b18,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4dca67bd,,,,,,,,,"2021-10-05 03:19;roboduke;Changeset: a5080eff
Author:    Jan Lahoda <jlahoda@openjdk.org>
Date:      2021-10-05 10:17:24 +0000
URL:       https://git.openjdk.java.net/jdk/commit/a5080effc7ec7e260e84e3169c36c5217f18d231
;;;",,,,,,,,,,,,,,,,,,,,,,,,,
assert(is_double_stack() && !is_virtual()) failed: type check,JDK-8272563,5056639,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,fmatte,webbuggrp,webbuggrp,2021-08-13 04:45,2021-09-28 00:28,2023-10-01 09:57,2021-09-01 03:13,11,17,18,,,,,18,hotspot,,0,hs-comp-triaged,oracle-triage-11,oracle-triage-17,oracle-triage-18,webbug,,,,,,,,,,,,,,,,,"ADDITIONAL SYSTEM INFORMATION :
A part of relevant code is in java/hotspot/cpu/x86.


A DESCRIPTION OF THE PROBLEM :
Hi,

I'm not sure this is the appropriate place to report this bug. If not please let me know where to report.

The method CardTableBarrierSetC1::post_barrier generates a move LIR when TwoOperandLIRForm flag is true to move the address to be marked in the card table to a temporary register.
>   __ move(addr, tmp);
This seems valid because the method computes the effective address so that `addr` must be a register operand beforehand. However, the this code only guarantees that `addr` is a valid register for LIR, which can be a virtual register. If the virtual register for `addr` is spilled to the stack by chance, the `move(addr, tmp)`
is compiled to a memory-to-register move, ie., `move [stack:xx|L],  [rxxrxx|J]`. This causes an assertion failure because a memory-to-register move requires their arguments to have the same size.

The following replace may fix:
- __move(addr, tmp);
+ if (addr->is_oop()) {
+   LIR_Opr tmp2 = gen->new_register(T_OBJECT);
+  __ move(addr, tmp2);
+  __ move(tmp2, tmp);
+ } else
+  __ move(addr, tmp);



STEPS TO FOLLOW TO REPRODUCE THE PROBLEM :
This assertion failure happened in reality when I extended the CardTableBarrierSetC1 and called a runtime function, clobbering registers, before calling post_barrier.


FREQUENCY : always


",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"2021-08-26 07:31;fmatte;error.log;https://bugs.openjdk.org/secure/attachment/96202/error.log","2021-08-26 07:31;fmatte;replay_pid28744.log;https://bugs.openjdk.org/secure/attachment/96203/replay_pid28744.log",,,,generic,,,,,,,,,generic,,,,,"0|i2u17v:",9223372036854775807,b13,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2021-08-17 16:42;dlong;ILW = assert after code modification, otherwise never seen, no workaround = MLH = P4;;;","2021-09-01 03:13;roboduke;Changeset: a58cf165
Author:    Fairoz Matte <fmatte@openjdk.org>
Committer: Tobias Hartmann <thartmann@openjdk.org>
Date:      2021-09-01 10:12:25 +0000
URL:       https://git.openjdk.java.net/jdk/commit/a58cf16509f3120d69fc18bd4c2c49e9ad590f73
;;;",,,,,,,,,,,,,,,,,,,,,,,,
C2: assert(false) failed: Bad graph detected in build_loop_late,JDK-8272562,5056805,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,roland,chagedorn,chagedorn,2021-08-17 00:13,2022-11-22 08:51,2023-10-01 09:57,2021-09-29 07:52,17,18,,,,,,18,hotspot,,0,c2,hs-comp-triaged,javafuzzer,jdk17u-fix-request,jdk17u-fix-yes,oracle-triage-11,oracle-triage-17,oracle-triage-18,,,,,,,,,,,,,,"The attached Java Fuzzer test starts to fail after JDK-8252372. This bug is different from JDK-8271954 but fails with the same assertion:

To reproduce:

$ java -Xmx1G Test.java (fails intermittently)
$ java -XX:CompileOnly=Reduced -XX:-TieredCompilation -Xbatch  Reduced.java (always fails)

#
# A fatal error has been detected by the Java Runtime Environment:
#
#  Internal Error (/opt/mach5/mesos/work_dir/slaves/ff806ead-2cac-495d-9cbc-62116f99bf14-S13890/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/e1985841-cb1f-4767-b2e4-927825614993/runs/9fce6d83-2b2c-4178-b4c4-97cbe003ff2d/workspace/open/src/hotspot/share/opto/loopnode.cpp:5343), pid=24365, tid=24378
#  assert(false) failed: Bad graph detected in build_loop_late
#
# JRE version: Java(TM) SE Runtime Environment (17.0+35) (fastdebug build 17+35-LTS-2724)
# Java VM: Java HotSpot(TM) 64-Bit Server VM (fastdebug 17+35-LTS-2724, mixed mode, sharing, tiered, compressed oops, compressed class ptrs, g1 gc, linux-amd64)
# Problematic frame:
# V  [libjvm.so+0x1322da7]  PhaseIdealLoop::build_loop_late_post_work(Node*, bool)+0x307
............
Command Line: -Xmx1G Test
............
Current thread (0x00007fd7a8481e10):  JavaThread ""C2 CompilerThread0"" daemon [_thread_in_native, id=24378, stack(0x00007fd78c2fe000,0x00007fd78c3ff000)]


Current CompileTask:
C2:    659  284 % !   4       Test::vMeth @ 86 (273 bytes)

Stack: [0x00007fd78c2fe000,0x00007fd78c3ff000],  sp=0x00007fd78c3f9310,  free space=1004k
Native frames: (J=compiled Java code, j=interpreted, Vv=VM code, C=native code)
V  [libjvm.so+0x1322da7]  PhaseIdealLoop::build_loop_late_post_work(Node*, bool)+0x307
V  [libjvm.so+0x132324a]  PhaseIdealLoop::build_loop_late(VectorSet&, Node_List&, Node_Stack&)+0xba
V  [libjvm.so+0x1323bb7]  PhaseIdealLoop::build_and_optimize(LoopOptsMode)+0x507
V  [libjvm.so+0xa377da]  PhaseIdealLoop::optimize(PhaseIterGVN&, LoopOptsMode)+0x2da
V  [libjvm.so+0xa340f5]  Compile::Optimize()+0x14f5
V  [libjvm.so+0xa35c78]  Compile::Compile(ciEnv*, ciMethod*, int, bool, bool, bool, bool, bool, DirectiveSet*)+0x1618
V  [libjvm.so+0x84b116]  C2Compiler::compile_method(ciEnv*, ciMethod*, int, bool, DirectiveSet*)+0x646
V  [libjvm.so+0xa45cc1]  CompileBroker::invoke_compiler_on_method(CompileTask*)+0xb71
V  [libjvm.so+0xa46968]  CompileBroker::compiler_thread_loop()+0x5a8
V  [libjvm.so+0x18dca01]  JavaThread::thread_main_inner()+0x271
V  [libjvm.so+0x18e3ff0]  Thread::call_run()+0x100
V  [libjvm.so+0x15a9cf4]  thread_native_entry(Thread*)+0x104
",,,,,,,,,,,JDK-8275092,,,,,,,,,,,,,,,,,,,,,,,,JDK-8252372,JDK-8293941,,,,JDK-8275330,JDK-8275202,,,,"2021-08-17 00:13;chagedorn;FuzzerUtils.java;https://bugs.openjdk.org/secure/attachment/96033/FuzzerUtils.java","2021-08-17 00:13;chagedorn;Reduced.java;https://bugs.openjdk.org/secure/attachment/96032/Reduced.java","2021-08-17 00:13;chagedorn;Test.java;https://bugs.openjdk.org/secure/attachment/96031/Test.java","2021-08-17 00:13;chagedorn;hs_err_pid24365.log;https://bugs.openjdk.org/secure/attachment/96030/hs_err_pid24365.log",,,,,,,,b24,17,,,,,,,"0|i2u28r:",9223372036854775807,b18,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2021-08-17 00:15;chagedorn;ILW = C2 assertion failure, found with single Java Fuzzer test, use -XX:-SplitIfBlocks = HLM = P3 ;;;","2021-08-17 21:16;dlong;Could this be related to JDK-8272574?;;;","2021-08-17 23:47;chagedorn;It's unrelated. This bug is caused by JDK-8252372 which is an optimization in split if and does not reproduce with -XX:-SplitIfBlocks while JDK-8272574 crashes with -XX:-SplitIfBlocks.;;;","2021-08-23 01:04;chagedorn;I coincidentally found the same fix as JDK-8271600 for which a PR is currently open. An explanation is posted as comment to the PR: https://github.com/openjdk/jdk/pull/5199#pullrequestreview-735143057;;;","2021-09-29 07:52;roboduke;Changeset: 980c50dc
Author:    Roland Westrelin <roland@openjdk.org>
Date:      2021-09-29 14:51:33 +0000
URL:       https://git.openjdk.java.net/jdk/commit/980c50dc607e60e12879bd6fb7ff4034469e88d8
;;;","2021-10-11 05:05;thartmann;Fix request (17u):
The bug leads to an assert during C2 compilation (regression in JDK 17). The fix is low risk (bailout from optimization) and has been tested in the JDK 18 for a while and with tier1-3 in JDK 17u. The patch applies cleanly.;;;",,,,,,,,,,,,,,,,,,,,
IR Test Framework README misses some flags,JDK-8272558,5056800,Bug,Resolved,JDK,JDK,software,duke,,,P5,Fixed,thartmann,thartmann,thartmann,2021-08-16 23:22,2021-09-21 01:39,2023-10-01 09:57,2021-08-17 21:49,17,18,,,,,,18,hotspot,,0,hs-comp-triaged,ir-framework,noreg-doc,oracle-triage-11,oracle-triage-18,,,,,,,,,,,,,,,,,"The README misses -DExcludeRandom, -DReportStdout and -DPreferCommandLineFlags.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8254129,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2u27n:",9223372036854775807,b11,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2021-08-16 23:22;thartmann;ILW = Missing flags in README = LLL= P5;;;","2021-08-17 21:49;roboduke;Changeset: 5189047d
Author:    Tobias Hartmann <thartmann@openjdk.org>
Date:      2021-08-18 04:47:58 +0000
URL:       https://git.openjdk.java.net/jdk/commit/5189047d09e976cfd17d4ab5ec12097c242f3435
;;;",,,,,,,,,,,,,,,,,,,,,,,,
Incorrect overflow test in Toom-Cook branch of BigInteger multiplication,JDK-8272541,5056777,Bug,Closed,JDK,JDK,software,duke,,,P4,Fixed,bpb,bpb,bpb,2021-08-16 11:11,2022-04-08 03:44,2023-10-01 09:57,2021-08-27 09:10,11,17,18,8,,,,18,core-libs,,0,jdk11u-fix-request,jdk11u-fix-yes,jdk13u-fix-request,jdk13u-fix-yes,jdk15u-fix-request,jdk15u-fix-yes,jdk17u-fix-request,jdk17u-fix-yes,redhat-interest,,,,,,,,,,,,,"In this code

if (bitLength(mag, mag.length) +
   bitLength(val.mag, val.mag.length) >
   32L*MAX_MAG_LENGTH) {
   reportOverflow();
}

In the above, bitLength() returns 'int', hence the left operand of the '>' comparison is 'int' too, but the right operand of the '>' comparison is 'long' with value == Integer.MAX_VALUE + 1 hence this condition is always false.",,,,,,,,,,,JDK-8281737,JDK-8282033,JDK-8281759,JDK-8281760,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8200659,,,,,,,,,,generic,,,,,,,,,generic,,,,,"0|i2u22j:",9223372036854775807,b13,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@28853e3d,,,,,,,Verified,,"2021-08-27 09:10;roboduke;Changeset: d1aeca11
Author:    Brian Burkhalter <bpb@openjdk.org>
Date:      2021-08-27 16:09:28 +0000
URL:       https://git.openjdk.java.net/jdk/commit/d1aeca117ccc4334d67b2692ff087a9f8d808a59
;;;","2021-08-30 00:05;shade;As far as I can see, the offending code block was added by JDK-8200659, which is a CPU patch that proliferated to 8u, 11u, 17u. We need to backport the fix there as well.;;;","2022-02-09 07:57;andrew;Fix Request [17u]:

Clean backport to code backported for the January 2019 security update.;;;","2022-02-09 08:01;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk17u-dev/pull/154
Date: 2022-02-09 15:56:59 +0000;;;","2022-02-14 05:52;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk11u-dev/pull/822
Date: 2022-02-14 13:46:23 +0000;;;","2022-02-14 08:15;andrew;Fix Request [11u,13u,15u]:

Clean backport to code backported for the January 2019 security update. ;;;","2022-02-14 09:08;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk13u-dev/pull/327
Date: 2022-02-14 17:04:08 +0000;;;","2022-02-14 09:12;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk15u-dev/pull/177
Date: 2022-02-14 17:06:37 +0000;;;","2022-04-08 03:44;sqetools;verified;;;",,,,,,,,,,,,,,,,,
Suboptimal code generation around Preconditions.checkIndex intrinsic with AVX2,JDK-8272493,5056718,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,yyang,redestad,redestad,2021-08-15 16:25,2022-04-07 02:10,2023-10-01 09:57,2022-03-10 18:30,11,17,18,19,,,,19,hotspot,,0,c2,hs-comp-triaged,jdk11u-fix-request,jdk11u-fix-yes,jdk17u-fix-request,jdk17u-fix-yes,jdk18u-fix-request,jdk18u-fix-SQE-OK-next,jdk18u-fix-yes,oracle-triage-18,performance,regression,,,,,,,,,,"JDK-8268698 changed from a custom checkIndex to  use Preconditions.checkIndex in a number of places, which cause a small regression in a few microbenchmarks.

Cursory examination of assembly shows that likely unnecessary vzeroupper instructions are emitted in a few places.

-prof perfasm of StringBuilders::charAtLatin1 on a Intel SandyBridge system (AVX=2 default):

c2, level 4, org.openjdk.bench.java.lang.StringBuilders::charAtLatin1, version 648 (91 bytes) 

            # {method} {0x00007f35abc73c50} &apos;charAtLatin1&apos; &apos;()C&apos; in &apos;org/openjdk/bench/java/lang/StringBuilders&apos;
            #           [sp+0x30]  (sp of caller)
            0x00007f35dd247e20:   mov    0x8(%rsi),%r10d
            0x00007f35dd247e24:   movabs $0x800000000,%r11
            0x00007f35dd247e2e:   add    %r11,%r10
            0x00007f35dd247e31:   cmp    %r10,%rax
            0x00007f35dd247e34:   jne    0x00007f35d56c3780           ;   {runtime_call ic_miss_stub}
            0x00007f35dd247e3a:   xchg   %ax,%ax
            0x00007f35dd247e3c:   nopl   0x0(%rax)
          [Verified Entry Point]
  1.62%     0x00007f35dd247e40:   mov    %eax,-0x14000(%rsp)
 10.14%     0x00007f35dd247e47:   push   %rbp
  5.21%     0x00007f35dd247e48:   sub    $0x20,%rsp                   ;*synchronization entry
                                                                      ; - org.openjdk.bench.java.lang.StringBuilders::charAtLatin1@-1 (line 345)
            0x00007f35dd247e4c:   mov    0xc(%rsi),%r9d               ;*getfield charAt_index {reexecute=0 rethrow=0 return_oop=0}
                                                                      ; - org.openjdk.bench.java.lang.StringBuilders::charAtLatin1@5 (line 345)
 25.33%     0x00007f35dd247e50:   mov    0x24(%rsi),%r11d             ;*getfield sbLatin1 {reexecute=0 rethrow=0 return_oop=0}
                                                                      ; - org.openjdk.bench.java.lang.StringBuilders::charAtLatin1@1 (line 345)
            0x00007f35dd247e54:   mov    0xc(%r12,%r11,8),%r10d       ; implicit exception: dispatches to 0x00007f35dd247f00
                                                                      ;*getfield count {reexecute=0 rethrow=0 return_oop=0}
                                                                      ; - java.lang.AbstractStringBuilder::charAt@2 (line 352)
                                                                      ; - java.lang.StringBuilder::charAt@2 (line 87)
                                                                      ; - org.openjdk.bench.java.lang.StringBuilders::charAtLatin1@8 (line 345)
            0x00007f35dd247e59:   test   %r10d,%r10d
            0x00007f35dd247e5c:   jl     0x00007f35dd247ecc
            0x00007f35dd247e5e:   cmp    %r10d,%r9d
         ╭  0x00007f35dd247e61:   jae    0x00007f35dd247e9c
  2.89%  │  0x00007f35dd247e63:   movsbl 0x10(%r12,%r11,8),%ebp       ;*invokestatic checkIndex {reexecute=0 rethrow=0 return_oop=0}
         │                                                            ; - java.lang.AbstractStringBuilder::charAt@8 (line 352)
         │                                                            ; - java.lang.StringBuilder::charAt@2 (line 87)
         │                                                            ; - org.openjdk.bench.java.lang.StringBuilders::charAtLatin1@8 (line 345)
         │  0x00007f35dd247e69:   test   %ebp,%ebp
         │  0x00007f35dd247e6b:   jne    0x00007f35dd247ee8           ;*ifne {reexecute=0 rethrow=0 return_oop=0}
         │                                                            ; - java.lang.AbstractStringBuilder::isLatin1@10 (line 1676)
         │                                                            ; - java.lang.AbstractStringBuilder::charAt@13 (line 353)
         │                                                            ; - java.lang.StringBuilder::charAt@2 (line 87)
         │                                                            ; - org.openjdk.bench.java.lang.StringBuilders::charAtLatin1@8 (line 345)
         │  0x00007f35dd247e6d:   mov    0x14(%r12,%r11,8),%ebp       ;*getfield value {reexecute=0 rethrow=0 return_oop=0}
         │                                                            ; - java.lang.AbstractStringBuilder::charAt@20 (line 354)
         │                                                            ; - java.lang.StringBuilder::charAt@2 (line 87)
         │                                                            ; - org.openjdk.bench.java.lang.StringBuilders::charAtLatin1@8 (line 345)
         │  0x00007f35dd247e72:   mov    0xc(%r12,%rbp,8),%r10d       ; implicit exception: dispatches to 0x00007f35dd247f10
  1.62%  │  0x00007f35dd247e77:   cmp    %r10d,%r9d
         │  0x00007f35dd247e7a:   jae    0x00007f35dd247eb8
         │  0x00007f35dd247e7c:   lea    (%r12,%rbp,8),%r10
         │  0x00007f35dd247e80:   movzbl 0x10(%r10,%r9,1),%eax        ;*iand {reexecute=0 rethrow=0 return_oop=0}
         │                                                            ; - java.lang.AbstractStringBuilder::charAt@28 (line 354)
         │                                                            ; - java.lang.StringBuilder::charAt@2 (line 87)
         │                                                            ; - org.openjdk.bench.java.lang.StringBuilders::charAtLatin1@8 (line 345)
  3.31%  │  0x00007f35dd247e86:   vzeroupper 
  1.55%  │  0x00007f35dd247e89:   add    $0x20,%rsp
         │  0x00007f35dd247e8d:   pop    %rbp
         │  0x00007f35dd247e8e:   cmp    0x338(%r15),%rsp             ;   {poll_return}
         │  0x00007f35dd247e95:   ja     0x00007f35dd247f20
  1.55%  │  0x00007f35dd247e9b:   retq   
         ↘  0x00007f35dd247e9c:   mov    $0xffffffe4,%esi
            0x00007f35dd247ea1:   mov    %r11d,%ebp
            0x00007f35dd247ea4:   mov    %r9d,0x4(%rsp)
            0x00007f35dd247ea9:   mov    %r10d,0x8(%rsp)
            0x00007f35dd247eae:   xchg   %ax,%ax
            0x00007f35dd247eb0:   vzeroupper 
            0x00007f35dd247eb3:   callq  0x00007f35d56c9000           ; ImmutableOopMap {rbp=NarrowOop }
                                                                      ;*invokestatic checkIndex {reexecute=0 rethrow=0 return_oop=0}
                                                                      ; - java.lang.AbstractStringBuilder::charAt@8 (line 352)
                                                                      ; - java.lang.StringBuilder::charAt@2 (line 87)

UseAVX=0|1 improves microbenchmark score by 1.2ns/op (~1.06x):


UseAVX=1

c2, level 4, org.openjdk.bench.java.lang.StringBuilders::charAtLatin1, version 647 (88 bytes) 

            # {method} {0x00007f5687873c50} &apos;charAtLatin1&apos; &apos;()C&apos; in &apos;org/openjdk/bench/java/lang/StringBuilders&apos;
            #           [sp+0x30]  (sp of caller)
            0x00007f56b92471a0:   mov    0x8(%rsi),%r10d
            0x00007f56b92471a4:   movabs $0x800000000,%r11
            0x00007f56b92471ae:   add    %r11,%r10
            0x00007f56b92471b1:   cmp    %r10,%rax
            0x00007f56b92471b4:   jne    0x00007f56b16c3780           ;   {runtime_call ic_miss_stub}
            0x00007f56b92471ba:   xchg   %ax,%ax
            0x00007f56b92471bc:   nopl   0x0(%rax)
          [Verified Entry Point]
  1.71%     0x00007f56b92471c0:   mov    %eax,-0x14000(%rsp)
 11.09%     0x00007f56b92471c7:   push   %rbp
  7.29%     0x00007f56b92471c8:   sub    $0x20,%rsp                   ;*synchronization entry
                                                                      ; - org.openjdk.bench.java.lang.StringBuilders::charAtLatin1@-1 (line 345)
            0x00007f56b92471cc:   mov    0xc(%rsi),%r9d               ;*getfield charAt_index {reexecute=0 rethrow=0 return_oop=0}
                                                                      ; - org.openjdk.bench.java.lang.StringBuilders::charAtLatin1@5 (line 345)
 28.14%     0x00007f56b92471d0:   mov    0x24(%rsi),%r11d             ;*getfield sbLatin1 {reexecute=0 rethrow=0 return_oop=0}
                                                                      ; - org.openjdk.bench.java.lang.StringBuilders::charAtLatin1@1 (line 345)
            0x00007f56b92471d4:   mov    0xc(%r12,%r11,8),%r10d       ; implicit exception: dispatches to 0x00007f56b924726c
                                                                      ;*getfield count {reexecute=0 rethrow=0 return_oop=0}
                                                                      ; - java.lang.AbstractStringBuilder::charAt@2 (line 352)
                                                                      ; - java.lang.StringBuilder::charAt@2 (line 87)
                                                                      ; - org.openjdk.bench.java.lang.StringBuilders::charAtLatin1@8 (line 345)
            0x00007f56b92471d9:   test   %r10d,%r10d
            0x00007f56b92471dc:   jl     0x00007f56b9247240
            0x00007f56b92471de:   cmp    %r10d,%r9d
         ╭  0x00007f56b92471e1:   jae    0x00007f56b9247219
  3.21%  │  0x00007f56b92471e3:   movsbl 0x10(%r12,%r11,8),%ebp       ;*invokestatic checkIndex {reexecute=0 rethrow=0 return_oop=0}
         │                                                            ; - java.lang.AbstractStringBuilder::charAt@8 (line 352)
         │                                                            ; - java.lang.StringBuilder::charAt@2 (line 87)
         │                                                            ; - org.openjdk.bench.java.lang.StringBuilders::charAtLatin1@8 (line 345)
         │  0x00007f56b92471e9:   test   %ebp,%ebp
         │  0x00007f56b92471eb:   jne    0x00007f56b9247258           ;*ifne {reexecute=0 rethrow=0 return_oop=0}
         │                                                            ; - java.lang.AbstractStringBuilder::isLatin1@10 (line 1676)
         │                                                            ; - java.lang.AbstractStringBuilder::charAt@13 (line 353)
         │                                                            ; - java.lang.StringBuilder::charAt@2 (line 87)
         │                                                            ; - org.openjdk.bench.java.lang.StringBuilders::charAtLatin1@8 (line 345)
         │  0x00007f56b92471ed:   mov    0x14(%r12,%r11,8),%ebp       ;*getfield value {reexecute=0 rethrow=0 return_oop=0}
         │                                                            ; - java.lang.AbstractStringBuilder::charAt@20 (line 354)
         │                                                            ; - java.lang.StringBuilder::charAt@2 (line 87)
         │                                                            ; - org.openjdk.bench.java.lang.StringBuilders::charAtLatin1@8 (line 345)
         │  0x00007f56b92471f2:   mov    0xc(%r12,%rbp,8),%r10d       ; implicit exception: dispatches to 0x00007f56b924727c
  1.64%  │  0x00007f56b92471f7:   cmp    %r10d,%r9d
         │  0x00007f56b92471fa:   jae    0x00007f56b9247230
         │  0x00007f56b92471fc:   lea    (%r12,%rbp,8),%r10
         │  0x00007f56b9247200:   movzbl 0x10(%r10,%r9,1),%eax        ;*iand {reexecute=0 rethrow=0 return_oop=0}
         │                                                            ; - java.lang.AbstractStringBuilder::charAt@28 (line 354)
         │                                                            ; - java.lang.StringBuilder::charAt@2 (line 87)
         │                                                            ; - org.openjdk.bench.java.lang.StringBuilders::charAtLatin1@8 (line 345)
  3.45%  │  0x00007f56b9247206:   add    $0x20,%rsp
         │  0x00007f56b924720a:   pop    %rbp
         │  0x00007f56b924720b:   cmp    0x338(%r15),%rsp             ;   {poll_return}
         │  0x00007f56b9247212:   ja     0x00007f56b924728c
  1.74%  │  0x00007f56b9247218:   retq   
         ↘  0x00007f56b9247219:   mov    $0xffffffe4,%esi
            0x00007f56b924721e:   mov    %r11d,%ebp
            0x00007f56b9247221:   mov    %r9d,0x4(%rsp)
            0x00007f56b9247226:   mov    %r10d,0x8(%rsp)
            0x00007f56b924722b:   callq  0x00007f56b16c9000           ; ImmutableOopMap {rbp=NarrowOop }
                                                                      ;*invokestatic checkIndex {reexecute=0 rethrow=0 return_oop=0}
                                                                      ; - java.lang.AbstractStringBuilder::charAt@8 (line 352)
                                                                      ; - java.lang.StringBuilder::charAt@2 (line 87)
                                                                      ; - org.openjdk.bench.java.lang.StringBuilders::charAtLatin1@8 (line 345)
                                                                      ;   {runtime_call UncommonTrapBlob}

Disabling the Preconditions_checkIndex intrinsic improves benchmark score similarly, but with slightly different code shape:

c2, level 4, org.openjdk.bench.java.lang.StringBuilders::charAtUtf16, version 658 (77 bytes) 

            # {method} {0x00007fe485c73d18} &apos;charAtUtf16&apos; &apos;()C&apos; in &apos;org/openjdk/bench/java/lang/StringBuilders&apos;
            #           [sp+0x40]  (sp of caller)
            0x00007fe4b124a020:   mov    0x8(%rsi),%r10d
            0x00007fe4b124a024:   movabs $0x800000000,%r11
            0x00007fe4b124a02e:   add    %r11,%r10
            0x00007fe4b124a031:   cmp    %r10,%rax
            0x00007fe4b124a034:   jne    0x00007fe4a96c3780           ;   {runtime_call ic_miss_stub}
            0x00007fe4b124a03a:   xchg   %ax,%ax
            0x00007fe4b124a03c:   nopl   0x0(%rax)
          [Verified Entry Point]
  2.74%     0x00007fe4b124a040:   mov    %eax,-0x14000(%rsp)
  9.91%     0x00007fe4b124a047:   push   %rbp
  6.59%     0x00007fe4b124a048:   sub    $0x30,%rsp                   ;*synchronization entry
                                                                      ; - org.openjdk.bench.java.lang.StringBuilders::charAtUtf16@-1 (line 351)
            0x00007fe4b124a04c:   mov    0xc(%rsi),%ecx               ;*getfield charAt_index {reexecute=0 rethrow=0 return_oop=0}
                                                                      ; - org.openjdk.bench.java.lang.StringBuilders::charAtUtf16@5 (line 351)
 12.96%     0x00007fe4b124a04f:   mov    0x28(%rsi),%r11d             ;*getfield sbUtf16 {reexecute=0 rethrow=0 return_oop=0}
                                                                      ; - org.openjdk.bench.java.lang.StringBuilders::charAtUtf16@1 (line 351)
            0x00007fe4b124a053:   mov    0xc(%r12,%r11,8),%r10d       ; implicit exception: dispatches to 0x00007fe4b124a0e4
                                                                      ;*getfield count {reexecute=0 rethrow=0 return_oop=0}
                                                                      ; - java.lang.AbstractStringBuilder::charAt@2 (line 352)
                                                                      ; - java.lang.StringBuilder::charAt@2 (line 87)
                                                                      ; - org.openjdk.bench.java.lang.StringBuilders::charAtUtf16@8 (line 351)
            0x00007fe4b124a058:   test   %ecx,%ecx
         ╭  0x00007fe4b124a05a:   jl     0x00007fe4b124a08e           ;*iflt {reexecute=0 rethrow=0 return_oop=0}
         │                                                            ; - jdk.internal.util.Preconditions::checkIndex@1 (line 301)
         │                                                            ; - java.lang.AbstractStringBuilder::charAt@8 (line 352)
         │                                                            ; - java.lang.StringBuilder::charAt@2 (line 87)
         │                                                            ; - org.openjdk.bench.java.lang.StringBuilders::charAtUtf16@8 (line 351)
  1.42%  │  0x00007fe4b124a05c:   cmp    %r10d,%ecx
         │  0x00007fe4b124a05f:   jge    0x00007fe4b124a0a8           ;*if_icmplt {reexecute=0 rethrow=0 return_oop=0}
         │                                                            ; - jdk.internal.util.Preconditions::checkIndex@6 (line 301)
         │                                                            ; - java.lang.AbstractStringBuilder::charAt@8 (line 352)
         │                                                            ; - java.lang.StringBuilder::charAt@2 (line 87)
         │                                                            ; - org.openjdk.bench.java.lang.StringBuilders::charAtUtf16@8 (line 351)
  1.80%  │  0x00007fe4b124a061:   movsbl 0x10(%r12,%r11,8),%r8d       ;*getfield coder {reexecute=0 rethrow=0 return_oop=0}
         │                                                            ; - java.lang.AbstractStringBuilder::isLatin1@7 (line 1676)
         │                                                            ; - java.lang.AbstractStringBuilder::charAt@13 (line 353)
         │                                                            ; - java.lang.StringBuilder::charAt@2 (line 87)
         │                                                            ; - org.openjdk.bench.java.lang.StringBuilders::charAtUtf16@8 (line 351)
         │  0x00007fe4b124a067:   test   %r8d,%r8d
         │  0x00007fe4b124a06a:   je     0x00007fe4b124a0c4           ;*ifeq {reexecute=0 rethrow=0 return_oop=0}
         │                                                            ; - java.lang.AbstractStringBuilder::charAt@16 (line 353)
         │                                                            ; - java.lang.StringBuilder::charAt@2 (line 87)
         │                                                            ; - org.openjdk.bench.java.lang.StringBuilders::charAtUtf16@8 (line 351)
         │  0x00007fe4b124a06c:   mov    0x14(%r12,%r11,8),%r11d      ;*getfield value {reexecute=0 rethrow=0 return_oop=0}
         │                                                            ; - java.lang.AbstractStringBuilder::charAt@32 (line 356)
         │                                                            ; - java.lang.StringBuilder::charAt@2 (line 87)
         │                                                            ; - org.openjdk.bench.java.lang.StringBuilders::charAtUtf16@8 (line 351)
         │  0x00007fe4b124a071:   lea    (%r12,%r11,8),%r10
  1.77%  │  0x00007fe4b124a075:   movzwl 0x10(%r10,%rcx,2),%eax       ;*invokestatic getChar {reexecute=0 rethrow=0 return_oop=0}
         │                                                            ; - java.lang.AbstractStringBuilder::charAt@36 (line 356)
         │                                                            ; - java.lang.StringBuilder::charAt@2 (line 87)
         │                                                            ; - org.openjdk.bench.java.lang.StringBuilders::charAtUtf16@8 (line 351)
  5.96%  │  0x00007fe4b124a07b:   add    $0x30,%rsp
         │  0x00007fe4b124a07f:   pop    %rbp
         │  0x00007fe4b124a080:   cmp    0x338(%r15),%rsp             ;   {poll_return}
         │  0x00007fe4b124a087:   ja     0x00007fe4b124a0f0
  1.56%  │  0x00007fe4b124a08d:   retq   
         ↘  0x00007fe4b124a08e:   mov    $0xffffff45,%esi
            0x00007fe4b124a093:   mov    %r11d,%ebp
            0x00007fe4b124a096:   mov    %ecx,0x4(%rsp)
            0x00007fe4b124a09a:   mov    %r10d,0x8(%rsp)
            0x00007fe4b124a09f:   mov    %ecx,0xc(%rsp)
            0x00007fe4b124a0a3:   callq  0x00007fe4a96c9000           ; ImmutableOopMap {rbp=NarrowOop }
                                                                      ;*iflt {reexecute=1 rethrow=0 return_oop=0}
                                                                      ; - (reexecute) jdk.internal.util.Preconditions::checkIndex@1 (line 301)
                                                                      ; - java.lang.AbstractStringBuilder::charAt@8 (line 352)
                                                                      ; - java.lang.StringBuilder::charAt@2 (line 87)
",,,,,,,,,,,JDK-8284517,JDK-8284054,JDK-8284264,JDK-8283831,JDK-8284082,,,,,,,,,,,,,,,,,,,,JDK-8268698,,,,,,,,,,,,,,,x86,,,,,,,,,,,,,,"0|i2u1pf:",9223372036854775807,b14,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2021-08-16 07:45;chagedorn;ILW = Small performance regression with Preconditions.checkIndex intrinsic, only observed with microbenchmarks, no workaround = MLH = P4;;;","2021-10-19 01:01;yyang;After a quick investigation, I found that inline_preconditions_checkIndex generated a CastII node (because it is known that length>index>=0 now), which may have confused subsequent optimizations, i.e. loop optimization. Using the original index node, the performance becomes normal as before, which is also valid for JDK-8273585. I need more time to confirm the more specific root cause.;;;","2021-11-16 06:53;chagedorn;Hi [~yyang], as the fork's soon coming up in early December, are you planing to get this fixed in 18? Otherwise, it needs to be deferred to 19 once RDP 1 starts (because it's a P4).;;;","2021-11-16 18:26;yyang;Hi [~chagedorn], this causes minor regression, I'm not sure if I have time to investigate and fix this problem in jdk18, so I clear the assignee, anyone who is interested in this problem (including me) can also investigate it later. Thanks.;;;","2021-11-16 23:37;chagedorn;Thanks Yi for the update! I will re-target it to 19 for now but if you or someone else wants to fix it in 18, please move it to 18 again.;;;","2022-02-28 23:52;thartmann;[~yyang] as I understand, JDK-8272493 did not fix this issue. Do you plan to look into it for JDK 19?

[~roland] who originally implemented the checkIndex intrinsic with JDK-8042997 might also have some insights.;;;","2022-03-08 22:51;yyang;[~thartmann] I will take a close look at this.;;;","2022-03-08 23:01;thartmann;Thanks!;;;","2022-03-08 23:32;yyang;I could reproduce this minor regression. The vzerouppers are introduced in JDK-8190934, which are emitted by clear_upper_avx within inline_preconditions_checkIndex. I did some digging into the history of this code. Please correct me if I misunderstand something..

JDK-8178811 emits vzeroupper on every MachEpilogueNode to avoid AVX <-> SSE transition penalty during the call.

JDK-8190934 emits vzeroupper on some MachEpilogueNode by setting clear_upper_avx flag, because vzeroupper itself is a high-cost instruction, we don't want to emit it everywhere a function is finished.

JDK-8272493 emits vzeroupper because inline_preconditions_checkIndex sets clear_upper_avx flag.

-------Preconditions.checkIndex without clear_upper_avx
Benchmark                    Mode  Cnt  Score   Error  Units
StringBuilders.charAtLatin1  avgt   15  6.257 ± 0.011  ns/op

Benchmark                    Mode  Cnt  Score   Error  Units
StringBuilders.charAtLatin1  avgt   15  6.251 ± 0.008  ns/op

Benchmark                    Mode  Cnt  Score   Error  Units
StringBuilders.charAtLatin1  avgt   15  6.254 ± 0.003  ns/op

-------Preconditions.checkIndex with clear_upper_avx(Current Implementation)
Benchmark                    Mode  Cnt  Score   Error  Units
StringBuilders.charAtLatin1  avgt   15  6.421 ± 0.003  ns/op

Benchmark                    Mode  Cnt  Score   Error  Units
StringBuilders.charAtLatin1  avgt   15  6.419 ± 0.002  ns/op

Benchmark                    Mode  Cnt  Score   Error  Units
StringBuilders.charAtLatin1  avgt   15  6.433 ± 0.044  ns/op

------- -XX:DisableIntrinsic=_Preconditions_checkIndex
Benchmark                    Mode  Cnt  Score   Error  Units
StringBuilders.charAtLatin1  avgt   15  6.229 ± 0.018  ns/op

Benchmark                    Mode  Cnt  Score   Error  Units
StringBuilders.charAtLatin1  avgt   15  6.224 ± 0.006  ns/op

Benchmark                    Mode  Cnt  Score   Error  Units
StringBuilders.charAtLatin1  avgt   15  6.218 ± 0.011  ns/op

------- -XX:UseAVX=1
Benchmark                    Mode  Cnt  Score   Error  Units
StringBuilders.charAtLatin1  avgt   15  6.247 ± 0.022  ns/op

Benchmark                    Mode  Cnt  Score   Error  Units
StringBuilders.charAtLatin1  avgt   15  6.234 ± 0.018  ns/op

Benchmark                    Mode  Cnt  Score   Error  Units
StringBuilders.charAtLatin1  avgt   15  6.261 ± 0.042  ns/op;;;","2022-03-10 00:00;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/7770
Date: 2022-03-10 07:55:16 +0000;;;","2022-03-10 18:30;dukebot;Changeset: 88f0938c
Author:    Yi Yang <yyang@openjdk.org>
Date:      2022-03-11 02:28:07 +0000
URL:       https://git.openjdk.java.net/jdk/commit/88f0938c943bfacf748ddb0588a301c2cf7e941e
;;;","2022-03-29 07:01;mdoerr;Fix Request (17u):
Should get backported for parity with 17.0.4-oracle. Applies cleanly.;;;","2022-03-29 07:09;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk17u-dev/pull/305
Date: 2022-03-29 14:03:45 +0000;;;","2022-03-29 08:09;thartmann;Fix Request (JDK 18u)
Fixes a performance regression in C2. The fix is low risk and applies cleanly. Already tested and backported to Oracle JDK 17u. Tier 1-3 testing is running for JDK 18u.;;;","2022-03-29 08:15;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk18u/pull/61
Date: 2022-03-29 15:08:59 +0000;;;","2022-04-06 01:02;goetz;Fix request [11u]

I backport this for parity with 11.0.16-oracle.
Low risk, simple change.
Clean backport.
SAP nightly testing passed.;;;","2022-04-06 01:08;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk11u-dev/pull/1012
Date: 2022-04-06 08:02:24 +0000;;;",,,,,,,,,
Problem list javax/swing/JFrame/NSTexturedJFrame/NSTexturedJFrame.java on macos,JDK-8272491,5056709,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,prr,prr,prr,2021-08-15 09:12,2023-05-25 02:21,2023-10-01 09:57,2021-08-15 09:52,18,,,,,,,18,client-libs,,0,testbug,ursqe-triaged,,,,,,,,,,,,,,,,,,,,"At first I thought this might be an occasional timing issue but it also failed both times in some metal-specific testing we are running, so I think it fails every time. 

Need to problem list ASAP",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,18,,,,,,,"0|i2u1nf:",9223372036854775807,b11,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4b09ce31,,,,,,,,,"2021-08-15 09:52;roboduke;Changeset: 6a5241c3
Author:    Phil Race <prr@openjdk.org>
Date:      2021-08-15 16:50:38 +0000
URL:       https://git.openjdk.java.net/jdk/commit/6a5241c3adfd3ba886e469156dea56ed5b9673ff
;;;",,,,,,,,,,,,,,,,,,,,,,,,,
[macos] javax/swing/JFrame/NSTexturedJFrame/NSTexturedJFrame.java fails,JDK-8272481,5056691,Bug,Closed,JDK,JDK,software,duke,,,P2,Fixed,avu,dcubed,dcubed,2021-08-14 19:40,2022-01-26 08:59,2023-10-01 09:57,2021-08-26 05:56,18,,,,,,,18,client-libs,,0,macos,regression,regression_8266079,tier4,,,,,,,,,,,,,,,,,,"The following test failed in the JDK18 CI:

javax/swing/JFrame/NSTexturedJFrame/NSTexturedJFrame.java

Here's a snippet from the log file:

#section:main
----------messages:(5/194)----------
command: main NSTexturedJFrame
reason: User specified action: run main NSTexturedJFrame 
Mode: othervm
Additional options from @modules: --add-modules java.desktop
elapsed time (seconds): 3.797
----------configuration:(3/40)----------
Boot Layer
  add modules: java.desktop

----------System.out:(0/0)----------
----------System.err:(47/3486)----------
java.lang.reflect.InvocationTargetException
	at java.desktop/java.awt.EventQueue.invokeAndWait(EventQueue.java:1371)
	at java.desktop/java.awt.EventQueue.invokeAndWait(EventQueue.java:1346)
	at java.desktop/javax.swing.SwingUtilities.invokeAndWait(SwingUtilities.java:1480)
	at NSTexturedJFrame.createUI(NSTexturedJFrame.java:109)
	at NSTexturedJFrame.showFrame(NSTexturedJFrame.java:102)
	at NSTexturedJFrame.main(NSTexturedJFrame.java:67)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at com.sun.javatest.regtest.agent.MainWrapper$MainThread.run(MainWrapper.java:127)
	at java.base/java.lang.Thread.run(Thread.java:833)
Caused by: java.lang.NullPointerException: Cannot invoke ""sun.lwawt.macosx.CFLayer.setOpaque(boolean)"" because ""this.windowLayer"" is null
	at java.desktop/sun.lwawt.macosx.CPlatformView.setWindowLayerOpaque(CPlatformView.java:138)
	at java.desktop/sun.lwawt.macosx.CPlatformWindow.setOpaque(CPlatformWindow.java:931)
	at java.desktop/sun.lwawt.LWWindowPeer.updateOpaque(LWWindowPeer.java:508)
	at java.desktop/sun.lwawt.LWWindowPeer.setTextured(LWWindowPeer.java:524)
	at java.desktop/sun.lwawt.macosx.CPlatformWindow.getInitialStyleBits(CPlatformWindow.java:533)
	at java.desktop/sun.lwawt.macosx.CPlatformWindow.initialize(CPlatformWindow.java:333)
	at java.desktop/sun.lwawt.LWWindowPeer.<init>(LWWindowPeer.java:198)
	at java.desktop/sun.lwawt.LWToolkit.createDelegatedPeer(LWToolkit.java:213)
	at java.desktop/sun.lwawt.LWToolkit.createFrame(LWToolkit.java:242)
	at java.desktop/java.awt.Frame.addNotify(Frame.java:485)
	at java.desktop/java.awt.Window.show(Window.java:1053)
	at java.desktop/java.awt.Component.show(Component.java:1728)
	at java.desktop/java.awt.Component.setVisible(Component.java:1675)
	at java.desktop/java.awt.Window.setVisible(Window.java:1036)
	at NSTexturedJFrame.lambda$createUI$0(NSTexturedJFrame.java:121)
	at java.desktop/java.awt.event.InvocationEvent.dispatch(InvocationEvent.java:308)
	at java.desktop/java.awt.EventQueue.dispatchEventImpl(EventQueue.java:773)
	at java.desktop/java.awt.EventQueue$4.run(EventQueue.java:720)
	at java.desktop/java.awt.EventQueue$4.run(EventQueue.java:714)
	at java.base/java.security.AccessController.doPrivileged(AccessController.java:399)
	at java.base/java.security.ProtectionDomain$JavaSecurityAccessImpl.doIntersectionPrivilege(ProtectionDomain.java:86)
	at java.desktop/java.awt.EventQueue.dispatchEvent(EventQueue.java:742)
	at java.desktop/java.awt.EventDispatchThread.pumpOneEventForFilters(EventDispatchThread.java:203)
	at java.desktop/java.awt.EventDispatchThread.pumpEventsForFilter(EventDispatchThread.java:124)
	at java.desktop/java.awt.EventDispatchThread.pumpEventsForHierarchy(EventDispatchThread.java:113)
	at java.desktop/java.awt.EventDispatchThread.pumpEvents(EventDispatchThread.java:109)
	at java.desktop/java.awt.EventDispatchThread.pumpEvents(EventDispatchThread.java:101)
	at java.desktop/java.awt.EventDispatchThread.run(EventDispatchThread.java:90)

JavaTest Message: Test threw exception: java.lang.reflect.InvocationTargetException
JavaTest Message: shutting down test

STATUS:Failed.`main' threw exception: java.lang.reflect.InvocationTargetException
----------rerun:(42/7386)*----------",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8266079,,,,,,,,,,aarch64,x86_64,,,,,,,,os_x,,,,,"0|i2u1jf:",9223372036854775807,b13,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@568a5b31,,,,,,,Verified,,"2021-08-14 19:44;dcubed;The failing build-ID is jdk-18+11-519 and it only contains a single changeset:

JDK-8266079 Lanai: AlphaComposite shows differences on Metal compared to OpenGL

This fix appears to be macOS related and the two sightings of this failures are on
macOS-X64 and macOS-aarch64.;;;","2021-08-15 09:07;prr;I am sure this is a regression of the fix for
https://bugs.openjdk.java.net/browse/JDK-8266079
;;;","2021-08-15 09:25;prr;I am problem listing this test under bug ID https://bugs.openjdk.java.net/browse/JDK-8272491;;;","2021-08-15 10:02;prr;I should correct myself to say it this fails with *and* without metal (ie with OpenGL too),
which makes it more urgent since OpenGL is the default pipeline.;;;","2021-08-17 11:20;prr;Bumped to P2. The fix seems to have caused a regression in launching netbeans and it is *possible* that the
buried root cause is this NPE. Or it could be something else but the netbeans startup bug has been regressed
to this fix when starting with
~/software/netbeans/bin/netbeans -J-Djava.security.manager=allow --jdkhome $JAVA_HOME
;;;","2021-08-17 14:39;vdyakov;[~avu] could you please fix this issue?;;;","2021-08-17 14:44;avu;I'm looking into it;;;","2021-08-18 02:52;avu;The problem was caused by LWWindowPeer.setTextured method that was updated by JDK-8266079 fix. LWWindowPeer.setTextured can be invoked by setting client property Window.style to ""textured"" value and it can be done before initialization of platform window.;;;","2021-08-19 22:36;jdv;With latest commit in https://github.com/openjdk/jdk/pull/5172, Netbeans is coming up but i see resurgence of issue JDK-8243547 in Metal pipeline.;;;","2021-08-23 11:03;avu;I've fixed the issue with NB. Please, check the latest commit in the pull request.;;;","2021-08-26 05:56;roboduke;Changeset: c4205305
Author:    Alexey Ushakov <avu@openjdk.org>
Date:      2021-08-26 12:56:03 +0000
URL:       https://git.openjdk.java.net/jdk/commit/c4205305496f73f49e58e64dd303154fca5bfafd
;;;",,,,,,,,,,,,,,,
Additional cleanup of test/jdk/java/nio/file/spi/SetDefaultProvider.java,JDK-8272477,5056686,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,lancea,lancea,lancea,2021-08-14 12:18,2022-03-30 17:58,2023-10-01 09:57,2022-03-24 11:39,,,,,,,,19,core-libs,,0,noreg-cleanup,,,,,,,,,,,,,,,,,,,,,Minor clean up of test/jdk/java/nio/file/spi/SetDefaultProvider.java ,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2u1ib:",9223372036854775807,b16,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@674604a9,,,,,,,,,"2022-03-23 10:48;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/7927
Date: 2022-03-23 17:43:49 +0000;;;","2022-03-24 11:39;dukebot;Changeset: 90750dec
Author:    Lance Andersen <lancea@openjdk.org>
Date:      2022-03-24 18:35:13 +0000
URL:       https://git.openjdk.java.net/jdk/commit/90750decb47772420eaf127b19efa9b5cdacccfe
;;;",,,,,,,,,,,,,,,,,,,,,,,,
Parsing epoch seconds at a DST transition with a non-UTC parser is wrong,JDK-8272473,5056588,Bug,Closed,JDK,JDK,software,duke,,,P4,Fixed,naoto,webbuggrp,webbuggrp,2021-08-12 13:02,2022-04-25 10:57,2023-10-01 09:57,2021-08-26 09:22,16,17,,,,,,18,core-libs,,0,additional-information-requested,dcsaw,jdk11u-fix-request,jdk11u-fix-yes,jdk17u-fix-request,jdk17u-fix-SQE-ok-next,jdk17u-fix-yes,reproducer-yes,webbug,,,,,,,,,,,,,"ADDITIONAL SYSTEM INFORMATION :
java 16.0.2 2021-07-20
Java(TM) SE Runtime Environment (build 16.0.2+7-67)
Java HotSpot(TM) 64-Bit Server VM (build 16.0.2+7-67, mixed mode, sharing)

I had a few older versions of java installed as well, and the same thing happened on Java 11 and Java 8

A DESCRIPTION OF THE PROBLEM :
If you build a DateTimeFormatter that accepts INSTANT_SECONDS only, and give it a time zone that experiences daylight savings transitions (I used America/New_York in my reproduction case, but saw it fail on some others), then use that formatter to parse an epoch date string, the resulting date is an hour earlier than it should be.  This happens when transitioning from daylight savings time to standard time.  Parsing the same timestamp with a different format got the correct result.

I did some tracing, and it looked to me like the problem happens in java.time.format.Parsed#resolve(), which seemed to convert the unambiguous INSTANT_SECONDS value into an ambiguous date + time + timezone value, then generated a fresh INSTANT_SECONDS value, and incorrectly chose the earlier of the two possible values.

STEPS TO FOLLOW TO REPRODUCE THE PROBLEM :
Construct a DateTimeFormatter that read INSTANT_SECONDS in a time zone with daylight saving time.  Try to parse a daylight savings time transition moment with that formatter.  Observe the resulting INSTANT_SECONDS is not the value we read in.

EXPECTED VERSUS ACTUAL BEHAVIOR :
EXPECTED -
parsing epoch seconds should get the correct value
ACTUAL -
The parsed value was an hour earlier than expected.

---------- BEGIN SOURCE ----------
import java.time.ZoneId;
import java.time.ZoneOffset;
import java.time.ZonedDateTime;
import java.time.format.DateTimeFormatter;
import java.time.format.DateTimeFormatterBuilder;
import java.time.format.SignStyle;
import java.time.temporal.ChronoField;
import java.time.temporal.TemporalAccessor;
import java.util.Locale;

public class DateParseBug {
    public static void main(String[] args) {
        final DateTimeFormatter epochSecondFormatter = new DateTimeFormatterBuilder()
                .appendValue(ChronoField.INSTANT_SECONDS, 1, 19, SignStyle.NORMAL)
                .toFormatter(Locale.ROOT)
                .withZone(ZoneId.of(""America/New_York""));
        // This is the transition point from DST to Standard time for that year in America/New_York tz
        ZonedDateTime sixAm = ZonedDateTime.of(2020, 11, 1, 6, 0, 0, 0, ZoneOffset.UTC);
        TemporalAccessor actual = epochSecondFormatter.parse(epochSecondFormatter.format(sixAm));
        if (actual.getLong(ChronoField.INSTANT_SECONDS) != sixAm.getLong(ChronoField.INSTANT_SECONDS)) {
            System.out.println(""Parsed back a wrong value.  Expected: ["" + sixAm.getLong(ChronoField.INSTANT_SECONDS) +
                    ""]   Actual: ["" + actual.getLong(ChronoField.INSTANT_SECONDS) + ""]"");
        } else {
            System.out.println(""Parsed Correctly"");
        }
    }
}

---------- END SOURCE ----------

FREQUENCY : always


",,,,,,,,,,,JDK-8273530,JDK-8275122,JDK-8275127,JDK-8278487,,,,,,,,,,,,,,,,,,,,,JI-9071222,,,,,JI-9071222,JI-9071355,,,,"2021-08-14 06:08;tongwan;DateParseBug.java;https://bugs.openjdk.org/secure/attachment/96012/DateParseBug.java","2021-08-17 05:23;tongwan;InstantSecondParsingTest.java;https://bugs.openjdk.org/secure/attachment/96048/InstantSecondParsingTest.java",,,,,,,,,,,,,,,,,,"0|i2u0wj:",9223372036854775807,b13,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@a9a7756,,,,,,,Verified,,"2021-08-13 06:43;tongwan;Instead of using ZoneOffset.UTC
ZonedDateTime sixAm = ZonedDateTime.of(2020, 11, 1, 6, 0, 0, 0, ZoneOffset.UTC); 
use ZoneId.of(""America/New_York"")
ZonedDateTime sixAm = ZonedDateTime.of(2020, 11, 1, 6, 0, 0, 0, ZoneId.of(""America/New_York""));
will resolve the issue.
Daylight Saving Time (DST) can be applied by providing country (or region) and city.
Close as not an issue.;;;","2021-08-17 02:56;tongwan;Additional information from another submitter:
When parsing with a formatter that has ChronoField.INSTANT_SECONDS field and has a zoneId set we loose the information about the original epoch value that was parsed.
I suspect the problem originates in
private void resolveInstantFields0(ZoneId selectedZone) {
        Instant instant = Instant.ofEpochSecond(fieldValues.remove(INSTANT_SECONDS));
        ChronoZonedDateTime<?> zdt = chrono.zonedDateTime(instant, selectedZone);
        updateCheckConflict(zdt.toLocalDate());
        updateCheckConflict(INSTANT_SECONDS, SECOND_OF_DAY, (long) zdt.toLocalTime().toSecondOfDay());
    }

int this method we loose the information about ChronoField.INSTANT_SECONDS as we set the local values only.
we cannot unambiguously convert from local value to UTC anymore as we don't have information about the original instant_seconds and formatter contain ZoneId only
There is no information about the zone transition

STEPS TO FOLLOW TO REPRODUCE THE PROBLEM :
I added a smaller testcase to highlight a problem

EXPECTED VERSUS ACTUAL BEHAVIOR :
EXPECTED -
parsing ChronoField.INSTANT_SECONDS should allow to get back ChronoField.INSTANT_SECONDS
ChronoField.INSTANT_SECONDS is epoch seconds
ACTUAL -
when parsed instant epoch-seconds falls in DST then getting a value of ChronoField.INSTANT_SECONDS returns a timestamp where incorrect zone transition is applied

---------- BEGIN SOURCE ----------

import java.time.ZoneId;
import java.time.format.DateTimeFormatter;
import java.time.format.DateTimeFormatterBuilder;
import java.time.format.SignStyle;
import java.time.temporal.ChronoField;
import java.time.temporal.TemporalAccessor;
import java.util.Locale;

public class InstantSecondParsingTest {

    public static void main(String[] args) {
        final long epochSeconds = 1604210400; // 2020-11-01T06:00 UTC
        final DateTimeFormatter dateTimeFormatter = new DateTimeFormatterBuilder()
            .appendValue(ChronoField.INSTANT_SECONDS, 1, 19, SignStyle.NORMAL)
            .toFormatter(Locale.ROOT)
            .withZone(ZoneId.of(""America/New_York""));
        final TemporalAccessor parse = dateTimeFormatter.parse(String.valueOf(epochSeconds));

        assert parse.getLong(ChronoField.INSTANT_SECONDS) == epochSeconds :
            ""expect instant_seconds to the same as parsed value."" +
                ""\nExpected: "" + epochSeconds +
                ""\nActual: "" + parse.getLong(ChronoField.INSTANT_SECONDS);
    }
} ;;;","2021-08-17 05:26;tongwan;Instead of using ZoneId.of(""America/New_York""), use ZoneOffset.UTC will resolve the problem in InstantSecondParsingTest;;;","2021-08-17 15:09;naoto;Since the specified instant falls in the overlap of DST/STD transition, the instant can be expressed in two ZonedDateTime. The text in ZonedDateTime reads:
---
For Overlaps, the general strategy is that if the local date-time falls in the middle of an Overlap, then the previous offset will be retained. If there is no previous offset, or the previous offset is invalid, then the earlier offset is used, typically ""summer"" time
---
The default is to adopt the earlier offset which is for DST. Thus when this zdt instance translates back to an Instant, its epoch seconds is smaller by 3,600 seconds.;;;","2021-08-18 23:41;tongwan;Additional information from the submitter:

""Instead of using ZoneId.of(""America/New_York""), use ZoneOffset.UTC will resolve the problem in InstantSecondParsingTest""
and a reply from Naoto Sato

I agree that in scenarios when a formatter only accepts INSTANT_SECONDS the timezone is redundant because INSTANT_SECONDS are seconds since epoch (so in UTC) 
Not using a zone here solves the problem.

But if you set a zone on a formatter, it cannot parse its own output. Even though the values are not ambiguous.

re:
Since the specified instant falls in the overlap of DST/STD transition, the instant can be expressed in two ZonedDateTime. The text in ZonedDateTime reads:
---
For Overlaps, the general strategy is that if the local date-time falls in the middle of an Overlap, then the previous offset will be retained. If there is no previous offset, or the previous offset is invalid, then the earlier offset is used, typically ""summer"" time
---
The default is to adopt the earlier offset which is for DST. Thus when this zdt instance translates back to an Instant, its epoch seconds is smaller by 3,600 seconds.
I am not even creating a ZonedDateTime here. My intention is to get a
 parse.getLong(ChronoField.INSTANT_SECONDS)
and current behaviour in https://github.com/AdoptOpenJDK/openjdk-jdk16u/blob/master/src/java.base/share/classes/java/time/format/Parsed.java#L359 removes that information
and then incorrectly calculates this (as mentioned earlier, localtime-> utc time cannot be unambiguously determined with overlap) in https://github.com/AdoptOpenJDK/openjdk-jdk16u/blob/master/src/java.base/share/classes/java/time/format/Parsed.java#L657  

In other words, I think that when parsing INSTANT_SECONDS, the information about the offset is implicitly present (seconds from epoch are in UTC). The argument would be similar to https://bugs.openjdk.java.net/browse/JDK-8066982 where the offset is present in the parsed date.
;;;","2021-08-20 14:02;naoto;One solution may be to preserve the parsed INSTANT_SECONDS at the resolving phase, not allowing override from localdate/time calculation.;;;","2021-08-20 14:21;naoto;[~scolebourne], would this be the right approach? Or would you suggest something else?
diff --git a/src/java.base/share/classes/java/time/format/Parsed.java b/src/java.base/share/classes/java/time/format/Parsed.java
index 377b5aa1ef6..8c24786f4af 100644
--- a/src/java.base/share/classes/java/time/format/Parsed.java
+++ b/src/java.base/share/classes/java/time/format/Parsed.java
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2012, 2020, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2012, 2021, Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
@@ -354,7 +354,7 @@ final class Parsed implements TemporalAccessor {
     }
 
     private void resolveInstantFields0(ZoneId selectedZone) {
-        Instant instant = Instant.ofEpochSecond(fieldValues.remove(INSTANT_SECONDS));
+        Instant instant = Instant.ofEpochSecond(fieldValues.get(INSTANT_SECONDS));
         ChronoZonedDateTime<?> zdt = chrono.zonedDateTime(instant, selectedZone);
         updateCheckConflict(zdt.toLocalDate());
         updateCheckConflict(INSTANT_SECONDS, SECOND_OF_DAY, (long) zdt.toLocalTime().toSecondOfDay());
@@ -641,9 +641,9 @@ final class Parsed implements TemporalAccessor {
     }
 
     private void resolveInstant() {
-        // add instant seconds if we have date, time and zone
+        // add instant seconds (if not present) if we have date, time and zone
         // Offset (if present) will be given priority over the zone.
-        if (date != null && time != null) {
+        if (!fieldValues.containsKey(INSTANT_SECONDS) && date != null && time != null) {
             Long offsetSecs = fieldValues.get(OFFSET_SECONDS);
             if (offsetSecs != null) {
                 ZoneOffset offset = ZoneOffset.ofTotalSeconds(offsetSecs.intValue());
;;;","2021-08-21 06:36;scolebourne;While that would probably work, I think the fix is slightly more subtle. In resolveInstantFields0(), we currently record the date and time, but not the offset (despite the offset being an important part of ZDT). If a line like this was added at the end of resolveInstantFields0() it should have the desired effect, while also ensuring that any offset in the formatter is consistent with the instant and zone:

updateCheckConflict(INSTANT_SECONDS, OFFSET_SECONDS, (long) zdt.getOffset().getTotalSeconds());

With this change, there is no need to change resolveInstant(), as the offset will cause the correct INSTANT_SECONDS to be recalculated. However, it is obviously more efficient to combine your proposed change with mine to avoid the slowdown of recalculating INSTANT_SECONDS when we already have it.
;;;","2021-08-21 13:36;naoto;Thanks. Will create a PR based on the discussion here.;;;","2021-08-24 16:25;naoto;The PR is now under review, [~scolebourne], would you please review it? Thanks.;;;","2021-08-26 09:22;roboduke;Changeset: fe7d7088
Author:    Naoto Sato <naoto@openjdk.org>
Date:      2021-08-26 16:21:23 +0000
URL:       https://git.openjdk.java.net/jdk/commit/fe7d70886cc9985478c5810eff0790648a9aae41
;;;","2021-09-03 03:50;chegar;[~naoto] Are there any concerns with porting this to 17u? ( if not, then I will proceed with an appropriate fix request );;;","2021-09-03 05:45;naoto;I don't see any issues, [~chegar]. I think this can be ported back to jdk8.;;;","2021-09-07 02:54;chegar;Fix Request a backport to jdk17u, applies cleanly, passed tier1 tests.
  Backport PR: https://github.com/openjdk/jdk17u/pull/54
;;;","2021-09-23 03:00;tongwan;Requested the submitter verify the fix by downloading the latest version of JDK 18 from https://jdk.java.net/18/;;;","2021-12-06 07:25;goetz;Fix request [11u]

I backport this for parity with 11.0.15-oracle.
Small risk, downport recommended by Naoto Sato.
Resolve of Copyright and test specification.
Test passes.  SAP nightly tests pass.;;;","2022-04-25 10:57;sqetools;verified;;;",,,,,,,,,
StackGuardPages test doesn't build with glibc 2.34,JDK-8272472,5056682,Bug,Resolved,JDK,JDK,software,duke,,,P2,Fixed,dholmes,doko,doko,2021-08-14 02:52,2022-11-30 23:54,2023-10-01 09:57,2021-08-21 18:15,11,17,,,,,,18,hotspot,,0,jdk11u-fix-request,jdk11u-fix-yes,jdk13u-fix-request,jdk13u-fix-yes,jdk15u-fix-request,jdk15u-fix-yes,jdk17-fix-no,jdk17-fix-request,jdk17u-fix-request,jdk17u-fix-SQE-ok,jdk17u-fix-yes,noreg-build,noreg-self,,,,,,,,,"All OpenJDK versions fail to build with glibc 2.34 (this version in the current Fedora and Ubuntu development releases):


/<<PKGBUILDDIR>>/test/hotspot/jtreg/runtime/StackGuardPages/exeinvoke.c: In
function 'set_signal_handler':
/<<PKGBUILDDIR>>/test/hotspot/jtreg/runtime/StackGuardPages/exeinvoke.c:72:15:
error: storage size of 'altstack' isn't constant
    72 |   static char altstack[SIGSTKSZ];
       |               ^~~~~~~~
gmake[4]: *** [test/JtregNativeHotspot.gmk:1525:
/<<PKGBUILDDIR>>/build/support/test/hotspot/jtreg/native/support/exeinvoke/exeinvoke.o]
Error 1 

caused by an intentional change in glibc 2.34:

* Add _SC_MINSIGSTKSZ and _SC_SIGSTKSZ.  When _DYNAMIC_STACK_SIZE_SOURCE
  or _GNU_SOURCE are defined, MINSIGSTKSZ and SIGSTKSZ are no longer
  constant on Linux.  MINSIGSTKSZ is redefined to sysconf(_SC_MINSIGSTKSZ)
  and SIGSTKSZ is redefined to sysconf (_SC_SIGSTKSZ).  This supports
  dynamic sized register sets for modern architectural features like
  Arm SVE.
",,,,,,,,,,,JDK-8272955,JDK-8273155,JDK-8272898,JDK-8272871,JDK-8293918,JDK-8293636,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,linux,,,,,"0|i2u1hf:",9223372036854775807,b12,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,,,"2021-08-15 05:19;dholmes;We should be able to build this test without defining _GNU_SOURCE and so avoid the problem. Or we can just malloc the array.;;;","2021-08-15 14:56;dholmes;Opting for malloc'ing the array as it can be tested anywhere.;;;","2021-08-15 15:35;dholmes;Impact: H - failed build out-of-the-box
Likelihood: M - need newer glibc
Workaround: L - need to disable problematic test from being built

HML  -> P2;;;","2021-08-15 15:41;dholmes;Fix Request

This fix addresses a test issue that will prevent the JDK 17 GA test sources from building on more recent Linux distributions with Glibc 2.34. The fix is extremely low risk and has zero impact on actual product bits (sources or binaries). Fixing this issue will improve the out-of-box experience for developers wanting to work with the JDK 17 GA source bundles.;;;","2021-08-16 09:26;mr;Exactly which versions of which Linux distributions include glibc 2.34? Have these distributions been released for general use, or are they still in development?;;;","2021-08-16 09:47;fweimer;Fedora 35 is scheduled to release on 2021-10-19 (“Final Release Public Availability (GA)“ in https://fedorapeople.org/groups/schedule/f-35/f-35-all-tasks.html). It will come with glibc 2.34.

CentOS Stream 9 also has glibc 2.34. I think the scheduled release data for that (and Red Hat Enterprise Linux 9 derived from it) was mentioned publicly, but I can't find a reference right now, so I don't know what to say, sorry.;;;","2021-08-16 09:51;iignatyev;AFAIK, Ubuntu 21.10, and Fedora 35 include glibc 2.34, both haven't been released yet. given glibc 2.34 was (just) released on Aug 1st, I doubt there are any commonly used Linux distributions that use glibc 2.34 and have been released.;;;","2021-08-16 10:36;doko;the planned release date for Ubuntu 21.10 is October 16;;;","2021-08-16 12:50;mr;Thanks for the additional information.

Is there any evidence that this change to glibc affects the operation of the built JDK? Does the built JDK pass all the other jtreg tests? Has anyone run the JCK against one of these builds?
;;;","2021-08-17 00:15;fweimer;Upstream glibc received a report here:

glibc 2.34 problems with Java SE 8
https://sourceware.org/pipermail/libc-help/2021-August/005972.html

But to my knowledge, we haven't encountered this issue with our builds based on OpenJDK 8, so I haven't been able to investigate further.;;;","2021-08-17 23:57;dholmes;Just to restate Mark's question, has, or can, anyone build and run JDK 17 with this new glibc to validate there are no issues other than this one test compilation problem?;;;","2021-08-18 01:57;doko;yes 17+35 builds, using a bootcycle build, both for Hotspot and Zero. I haven't been able to run the JCK
see https://launchpad.net/ubuntu/+source/openjdk-17/17~35ea-1ubuntu2
;;;","2021-08-19 10:19;mr;Fix request rejected

There is no evidence that JDK 17 itself does not run against glibc 2.34. Please aim to fix this test bug in 17.0.1.;;;","2021-08-19 21:00;dholmes;Fixing first in 18 then a 17.0.1 backport.;;;","2021-08-21 18:15;roboduke;Changeset: f77a1a15
Author:    David Holmes <dholmes@openjdk.org>
Date:      2021-08-22 01:13:27 +0000
URL:       https://git.openjdk.java.net/jdk/commit/f77a1a156f3da9068d012d9227c7ee0fee58f571
;;;","2021-08-22 16:00;dholmes;Fix Request - 17u

Please approve this simple test fix for backport to 17u as it addresses a compilation problem on new Linux distributions with Glibc 2.34. The fix has been applied to 18 and tested there, and was also tested for 17 though not accepted for inclusion during the RC phase.

The patch applies cleanly.;;;","2021-08-23 01:21;shade;Fix Request (11u)

Same reason as for 17u. Applies cleanly.;;;","2022-09-12 03:25;yan;Fix request (15u, 13u)

the same for 15u, applies cleanly. (and 13u);;;","2022-09-12 03:31;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk15u-dev/pull/274
Date: 2022-09-12 10:26:18 +0000;;;","2022-09-16 00:59;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk13u-dev/pull/407
Date: 2022-09-16 07:53:27 +0000;;;","2022-11-30 23:54;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/crac/pull/37
Date: 2022-12-01 07:44:21 +0000;;;",,,,,
"[lworld] C2 compilation fails with ""Bad graph detected in build_loop_late""",JDK-8272448,5056646,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,thartmann,thartmann,thartmann,2021-08-13 05:53,2021-10-19 23:03,2023-10-01 09:57,2021-10-19 23:03,repo-valhalla,,,,,,,repo-valhalla,hotspot,,0,c2,lw3,lworld,,,,,,,,,,,,,,,,,,,"With the patch for JDK-8271959, some of the java/foreign/ tests fail with:

# A fatal error has been detected by the Java Runtime Environment:
#
#  Internal Error (/oracle/valhalla3/open/src/hotspot/share/opto/loopnode.cpp:5343), pid=651209, tid=651245
#  assert(false) failed: Bad graph detected in build_loop_late
#
# JRE version: Java(TM) SE Runtime Environment (18.0) (fastdebug build 18-lworld3ea+0-2021-07-08-0750194.tobias...)
# Java VM: Java HotSpot(TM) 64-Bit Server VM (fastdebug 18-lworld3ea+0-2021-07-08-0750194.tobias..., mixed mode, sharing, tiered, compressed oops, compressed class ptrs, g1 gc, linux-amd64)
# Problematic frame:
# V  [libjvm.so+0x138f93b]  PhaseIdealLoop::build_loop_late_post_work(Node*, bool)+0x18b
#
# Core dump will be written. Default location: Core dumps may be processed with ""/usr/share/apport/apport %p %s %c %d %P %E"" (or dumping to /oracle/valhalla3/JTwork/scratch/core.651209)
#
# If you would like to submit a bug report, please visit:
#   https://bugreport.java.com/bugreport/crash.jsp
#

Current CompileTask:
C2:   8110 4560       4       java.lang.invoke.LambdaFormEditor::bindArgumentForm (269 bytes)

Stack: [0x00007f0dc1eff000,0x00007f0dc2000000],  sp=0x00007f0dc1ffa1f0,  free space=1004k
Native frames: (J=compiled Java code, j=interpreted, Vv=VM code, C=native code)
V  [libjvm.so+0x138f93b]  PhaseIdealLoop::build_loop_late_post_work(Node*, bool)+0x18b
V  [libjvm.so+0x138ff5a]  PhaseIdealLoop::build_loop_late(VectorSet&, Node_List&, Node_Stack&)+0xba
V  [libjvm.so+0x13908c7]  PhaseIdealLoop::build_and_optimize(LoopOptsMode)+0x507
V  [libjvm.so+0xa5a257]  PhaseIdealLoop::optimize(PhaseIterGVN&, LoopOptsMode)+0x287
V  [libjvm.so+0xa56be4]  Compile::Optimize()+0x1434
V  [libjvm.so+0xa58830]  Compile::Compile(ciEnv*, ciMethod*, int, bool, bool, bool, bool, bool, DirectiveSet*)+0x1630
V  [libjvm.so+0x841d80]  C2Compiler::compile_method(ciEnv*, ciMethod*, int, bool, DirectiveSet*)+0x6a0
V  [libjvm.so+0xa686d1]  CompileBroker::invoke_compiler_on_method(CompileTask*)+0xb71
V  [libjvm.so+0xa69368]  CompileBroker::compiler_thread_loop()+0x598
V  [libjvm.so+0x196991c]  JavaThread::thread_main_inner()+0x27c
V  [libjvm.so+0x196ff60]  Thread::call_run()+0x100
V  [libjvm.so+0x16205b4]  thread_native_entry(Thread*)+0x104
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8271959,,,,,,,,,,"2021-08-16 00:40;thartmann;hs_err_pid683256.log;https://bugs.openjdk.org/secure/attachment/96019/hs_err_pid683256.log","2021-08-16 00:40;thartmann;replay_pid683256.log;https://bugs.openjdk.org/secure/attachment/96020/replay_pid683256.log",,,,,,,,,,,,,,,,,,"0|i2u19f:",9223372036854775807,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2021-08-16 00:38;thartmann;To reproduce, apply JDK-8271959 (https://github.com/openjdk/valhalla/compare/lworld...mlchung:refval.diff) and run 
 make test TEST=""test/jdk/java/foreign/TestUpcall.java""
;;;","2021-08-16 01:03;thartmann;It seems to be another regression of JDK-8252372 in mainline. I've disabled that optimization with JDK-8272511 until it's stable in mainline. We should then re-investigate if this issue still reproduces.;;;","2021-08-17 01:51;thartmann;Potentially related: JDK-8271954, JDK-8272562;;;",,,,,,,,,,,,,,,,,,,,,,,
C1: Raw version of UnsafeGet generates load barriers,JDK-8272446,5056642,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,stefank,stefank,stefank,2021-08-13 05:08,2021-09-21 01:38,2023-10-01 09:57,2021-08-16 23:37,18,,,,,,,18,hotspot,,0,c1,hs-comp-triaged,oracle-triage-11,oracle-triage-17,oracle-triage-18,,,,,,,,,,,,,,,,,"
After rebasing the ZGC Generational code to latest openjdk/jdk we hit a crash because a load barrier was generated for some oops that are not supposed to have a load barrier. In upstream ZGC this isn't a problem because these load barriers are just redundant and will find healed good oops. However, in the Generational version un-barriered roots (e.g. thread stacks) have no metadata bits, and we should never perform normal load barriers on them (they are handled by stack watermarks and nmethod barriers).

This load barrier was introduced with:
JDK-8266746: C1: Replace UnsafeGetRaw with UnsafeGet when setting up OSR entry block

which makes UnsafeGet _also_ handle ""raw"" loads. However, the ""raw"" path introduced a load barrier. Note that ""raw"" is often used to denote a function that loads/stores values without using a barrier.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8266746,,,,,,,,,,,,,,,,,,,,,,,,"0|i2u18j:",9223372036854775807,b11,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2021-08-16 07:39;chagedorn;ILW = Wrongly added load barrier results in crashes with ZGC, only observed with ZGC in a single test?, possibly use another GC or -XX:-TieredCompilation = HLM = P3;;;","2021-08-16 23:37;roboduke;Changeset: df1427b7
Author:    Stefan Karlsson <stefank@openjdk.org>
Date:      2021-08-17 06:36:09 +0000
URL:       https://git.openjdk.java.net/jdk/commit/df1427b72ba1d02d440018a4f6f8a287fecad460
;;;",,,,,,,,,,,,,,,,,,,,,,,,
ZGC: fastdebug build crashes when printing ClassLoaderData,JDK-8272417,5056609,Bug,Closed,JDK,JDK,software,duke,,,P2,Fixed,hshi,hshi,hshi,2021-08-12 23:59,2022-08-22 23:20,2023-10-01 09:57,2021-08-23 04:56,17,18,,,,,,18,hotspot,,0,jdk17u-fix-request,jdk17u-fix-yes,tencent-interest,zgc,,,,,,,,,,,,,,,,,,"submit and assign this bug on behalf of tobytbzhang@tencent.com

Following test fails on fastdebug build with the options: ""-XX:+UseZGC -XX:+VerifyAfterGC -Xlog:gc*=trace"". It crashes on the unknown claim value of the ClassLoaderData

public class A {
    public static void main(String... args) {
        System.gc();
    }
}

#
# A fatal error has been detected by the Java Runtime Environment:
#
#  Internal Error (/data/ws/jdk/src/hotspot/share/classfile/classLoaderData.cpp:971), pid=22619, tid=22620
#  Error: ShouldNotReachHere()
#
# JRE version: OpenJDK Runtime Environment (18.0) (fastdebug build 18-internal+0-adhoc.root.jdk)
# Java VM: OpenJDK 64-Bit Server VM (fastdebug 18-internal+0-adhoc.root.jdk, mixed mode, sharing, tiered, compressed class ptrs, z gc, linux-amd64)
# Problematic frame:
# V  [libjvm.so+0x8afd16]  ClassLoaderData::print_on(outputStream*) const+0x8a6
#
# Core dump will be written. Default location: /data/ws/jdk/core.22619
#
# If you would like to submit a bug report, please visit:
#   https://bugreport.java.com/bugreport/crash.jsp
#

---------------  S U M M A R Y ------------

Command Line: -XX:+UseZGC -XX:+VerifyAfterGC -Xlog:gc*=trace A

Host: tobytbzhang1597919431388-0, Intel(R) Xeon(R) Gold 61xx CPU, 32 cores, 32G, CentOS Linux release 7.2 (Final)
Time: Fri Aug 13 14:23:26 2021 CST elapsed time: 0.234355 seconds (0d 0h 0m 0s)

---------------  T H R E A D  ---------------

Current thread (0x00007f9cb002c630):  JavaThread ""DestroyJavaVM"" [_thread_in_vm, id=22620, stack(0x00007f9cba0f1000,0x00007f9cba1f2000)]

Stack: [0x00007f9cba0f1000,0x00007f9cba1f2000],  sp=0x00007f9cba1f0920,  free space=1022k
Native frames: (J=compiled Java code, j=interpreted, Vv=VM code, C=native code)
V  [libjvm.so+0x8afd16]  ClassLoaderData::print_on(outputStream*) const+0x8a6
V  [libjvm.so+0x8bb4c3]  ClassLoaderDataGraph::print_on(outputStream*)+0x1d3
V  [libjvm.so+0xd4e225]  before_exit(JavaThread*)+0x335
V  [libjvm.so+0x17bcfff]  Threads::destroy_vm()+0x23f
V  [libjvm.so+0xe65bd3]  jni_DestroyJavaVM+0xc3
C  [libjli.so+0x41b3]  JavaMain+0x403
C  [libjli.so+0x7609]  ThreadJavaMain+0x9

Register to memory mapping:

",,,,,,,,,,,JDK-8292759,,,,,,,,,,,,,,,,,,,,,,,,JDK-8227175,,,,,,,,,,,,,,,generic,,,,,,,,,generic,,,,,"0|i2u117:",9223372036854775807,b12,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6b00f96c,,,,,,,Verified,,"2021-08-13 00:45;stefank;The printing code is incorrect:
  switch(_claim) {
    case _claim_none:       out->print_cr(""none""); break;
    case _claim_finalizable:out->print_cr(""finalizable""); break;
    case _claim_strong:     out->print_cr(""strong""); break;
    case _claim_other:      out->print_cr(""other""); break;
    default:                ShouldNotReachHere();
  }

The _claim value could contain a combination of those values.

FWIW, we changed how the clearing of the claim bits where done in the ZGC Generational repository. Instead of clearing at the start of the heap iteration, we clear at the end:
https://github.com/openjdk/zgc/blob/82417594649b801bf98a3a99ffca443ce4c49c05/src/hotspot/share/gc/z/zHeapIterator.cpp#L230

compared to upstream:
https://github.com/openjdk/jdk/blob/d06d0b9e9d9d27aa549455f19b9803752431bcbb/src/hotspot/share/gc/z/zHeapIterator.cpp#L202

I think that makes this issue less likely to reproduce in that repository, because the safepoints that use _claim_other will clean up after they have run.

I think you could still end up with a _claim_finalizable + _claim_strong combo, so even with that I think we should fix the printing code.;;;","2021-08-13 05:03;hshi;Send this on hehalf of tobytbzhang@tencent.com

Thanks for your advice!

Because of the pull request is still pending on an OCA check, the fix is not shown in this page: https://github.com/openjdk/jdk/pull/5107

Agree, we should change the printing code to solve this problem, with this we can even call print_loader_data_graph in the debugger (it means anywhere).

I check the code of the CLD's claim value in the ZGC, it seems the combos could be ""_claim_strong | _claim_other"" and ""_claim_finalizable | _claim_other"". Are these combos enough?

Would you mind new PR also clear _claim_other bit in ZHeapIterator::~ZHeapIterator now?;;;","2021-08-13 05:31;stefank;I think you can also have _claim_finalizable | _claim_strong | _claim_other. A CLD could be claimed for ""finalizer marking"", and then later also be claimed for normal strong marking.

Let's wait with the ~ZHeapIterator. I think I'll pull that into the upstream repo at some point in the near future.;;;","2021-08-23 04:56;roboduke;Changeset: 741f58c1
Author:    Tongbao Zhang <tobytbzhang@tencent.com>
Committer: Stefan Karlsson <stefank@openjdk.org>
Date:      2021-08-23 11:54:52 +0000
URL:       https://git.openjdk.java.net/jdk/commit/741f58c18c3dc49c5e1b793e411d8479770f2772
;;;","2022-08-22 01:56;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/643
Date: 2022-08-22 08:31:01 +0000;;;","2022-08-22 05:03;apavlyutkin;Fix Request 17u-dev:

The original patch fixes crashes in ClassLoaderData logging for debug builds. The patch is applied cleanly

Verification (amd64/Ubuntu 20.04):

> echo ""public class A { public static void main(String... args) { System.gc(); } }"" > A.java
> ./build/linux-x86_64-server-fastdebug/images/jdk/bin/java -XX:+UseZGC -XX:+VerifyAfterGC -Xlog:gc*=trace A.java;;;",,,,,,,,,,,,,,,,,,,,
Incorrect num of element count calculation for vector cast,JDK-8272413,5056605,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,whuang,whuang,whuang,2021-08-12 23:56,2021-09-28 23:19,2023-10-01 09:57,2021-09-08 07:40,17,18,,,,,,18,hotspot,,0,c2,hs-comp-triaged,huawei-interest,jdk17u-fix-request,jdk17u-fix-yes,oracle-triage-11,oracle-triage-17,oracle-triage-18,vectorapi,,,,,,,,,,,,,"Closed JDK-8265244 has split into two issues : JDK-8268966 and this issue. During this issue, I will fix the mid-end comparsion. ",,,,,,,,,,,JDK-8274484,,,,,,,,,,,,,JDK-8259948,,,,,,,,,,,,,,,,JDK-8268966,JDK-8265244,,,,,,,,,generic,,,,,,,,,generic,,,,,"0|i2u10b:",9223372036854775807,b14,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2021-08-16 07:49;chagedorn;Hi [~whuang], can you provide some more information about the bug and how it manifests?;;;","2021-08-16 23:53;whuang;Thank [~chagedorn] for your question. This problem is the same as JDK-8265244. After discussion with [~nsjian] and [~eliu], the origin problem can be solved in two patches. The first patch (JDK-8268966 ) has pushed by [~eliu]. In my issue(JDK-8272413), I will fix the mid-end problem of JDK-8265244. ;;;","2021-08-17 00:25;chagedorn;Thanks for your explanation! Are you planing to work on it soon/get it into JDK 18? (you set the Fix Version to tbd, that's why I'm asking);;;","2021-08-17 00:26;chagedorn;ILW = Same as JDK-8265244 and JDK-8268966 = P3;;;","2021-08-17 00:41;eliu;Hi [~chagedorn], thanks for your attention. https://bugs.openjdk.java.net/browse/JDK-8268966 is a workaround by marking those missing rules as unsupported, due to the deadline of JDK17 release at that time. And I think this issue is a pre-task of https://bugs.openjdk.java.net/browse/JDK-8259948, which is in review now(https://github.com/openjdk/jdk/pull/4839). And it intends to supplement those missing pattern rules, but some of them should not be supported at all and should be filtered in mid-end. E.g., In AArch64, we don’t support vector size that less than 64 bits, so that rules like 2Sto2I is useless (https://github.com/openjdk/jdk/pull/4839#discussion_r685865132).
 
- eliu
;;;","2021-08-17 02:11;chagedorn;Hi [~eliu], thanks for the additional information! By pre-task you mean that this bug is a blocker for JDK-8259948 (i.e. required before integrating) or can JDK-8259948 be integrated independently?;;;","2021-08-17 02:35;eliu;I think JDK-8259948 could be integrated independently but with some codes which are actually not needed. Besides, JDK-8259948 is mainly for the codegen part and only related to AArch64 port, but this task could effect all platforms. Given by this, I suggest to fix this task first and update JDK-8259948 later.;;;","2021-08-17 02:49;chagedorn;Okay that sounds reasonable. Then I'll target this bug to 18 and link it as blocker for JDK-8259948.;;;","2021-09-08 07:40;roboduke;Changeset: 7e662e7b
Author:    Wang Huang <whuang@openjdk.org>
Committer: Tobias Hartmann <thartmann@openjdk.org>
Date:      2021-09-08 14:39:23 +0000
URL:       https://git.openjdk.java.net/jdk/commit/7e662e7b9d7ea5113f568418e0acac4234ebfb88
;;;","2021-09-28 00:12;thartmann;Fix request (17u):
The bug leads to a crash in C2. The fix is low risk and has been tested in the JDK 18 for a while and with tier1-3 in JDK 17u. The patch applies cleanly.;;;",,,,,,,,,,,,,,,,
mismatching debug output streams,JDK-8272396,5056587,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,xuelei,xuelei,xuelei,2021-08-12 12:37,2021-08-18 17:41,2023-10-01 09:57,2021-08-13 14:34,,,,,,,,18,security-libs,,0,noreg-cleanup,,,,,,,,,,,,,,,,,,,,,"In the RSAKeyExchange.java code, both System.out and System.err are used for the same debug log message.

                // unlikely to happen, otherwise, must be a provider exception
                if (SSLLogger.isOn && SSLLogger.isOn(""ssl,handshake"")) {
-                   SSLLogger.fine(""RSA premaster secret generation error:"");
-                   iae.printStackTrace(System.out);
+                  SSLLogger.fine(""RSA premaster secret generation error"", iae);
                }

For consistency, the SSLLogger method should be used for debugging information dumping.
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2u0wb:",9223372036854775807,b11,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@39d9862,,,,,,,,,"2021-08-13 14:34;roboduke;Changeset: 6b8b160e
Author:    Xue-Lei Andrew Fan <xuelei@openjdk.org>
Date:      2021-08-13 21:33:22 +0000
URL:       https://git.openjdk.java.net/jdk/commit/6b8b160e374a4a566d193a594d9a228646e8e067
;;;",,,,,,,,,,,,,,,,,,,,,,,,,
Bad HTML in JVMTI man page,JDK-8272395,5056586,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,sspitsyn,jjg,jjg,2021-08-12 12:15,2021-12-13 19:09,2023-10-01 09:57,2021-12-07 00:17,18,,,,,,,18,core-svc,,0,noreg-doc,,,,,,,,,,,,,,,,,,,,,"Reported by HTML tidy

build/macosx-x64/images/docs/specs//jvmti.html:15264:33: Warning: <a> illegal characters found in URI
build/macosx-x64/images/docs/specs//jvmti.html:15408:25: Warning: <a> illegal characters found in URI
build/macosx-x64/images/docs/specs//jvmti.html:15544:11: Warning: <a> illegal characters found in URI
Info: Document content looks like HTML5
Tidy found 3 warnings and 0 errors!


",,,,,,,,,,,JDK-8278660,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2u0w3:",9223372036854775807,b27,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@22f3cc74,,,,,,,,,"2021-12-06 16:24;sspitsyn;There 3 URLs defined in the jvmti.xml with invalid characters '[]' that have to be escaped.;;;","2021-12-07 00:17;roboduke;Changeset: e535cb3f
Author:    Serguei Spitsyn <sspitsyn@openjdk.org>
Date:      2021-12-07 08:16:49 +0000
URL:       https://git.openjdk.java.net/jdk/commit/e535cb3fbac11785cfdb43c9b6f73b2a38a621d6
;;;",,,,,,,,,,,,,,,,,,,,,,,,
Lanai: SwingSet2. Black background on expanding tree node ,JDK-8272392,5056582,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,avu,avu,avu,2021-08-12 11:55,2021-12-15 17:51,2023-10-01 09:57,2021-12-08 09:49,17,18,,,,,,18,client-libs,,0,lanai,lanai-to-default,,,,,,,,,,,,,,,,,,,,"Steps to reproduce

1. Run SwingSet2 with metal pipeline enabled and provide -Dapple.awt.application.appearance=NSAppearanceNameDarkAqua  VM option 
2. Click on all tabs starting from the second one, delay on each tab for the second or so
3. On the tab with swing tree control try to expand some tree nodes -> you'll see black rectangles while performing the clicks
4. Repeat from step 2 if no artifacts are visible

This problem is not reproducible with OGL ",,,,,,,,,,,JDK-8278719,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,generic,,,,,,,,,os_x,,,,,"0|i2u0v7:",9223372036854775807,b28,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4b09ce31,,,,,,,,,"2021-10-10 00:45;avu;The reason for this issue is that MTLBlitLoops_IsoBlit does not take into account composition mode (SRC) while rendering into the newly created texture. So, at some point garbage from VRAM appears in rendering AquaTreeUI animated control.;;;","2021-12-08 09:49;roboduke;Changeset: 83454530
Author:    Alexey Ushakov <avu@openjdk.org>
Date:      2021-12-08 17:48:53 +0000
URL:       https://git.openjdk.java.net/jdk/commit/83454530ea538c80e2f1205cd8d2f9732503b592
;;;",,,,,,,,,,,,,,,,,,,,,,,,
Undeleted debug information,JDK-8272391,5056581,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,xuelei,xuelei,xuelei,2021-08-12 11:34,2021-10-25 08:29,2023-10-01 09:57,2021-08-12 12:29,11,17,18,8,,,,18,security-libs,,0,jdk17u-fix-request,jdk17u-fix-SQE-ok,jdk17u-fix-yes,noreg-cleanup,redhat-interest,,,,,,,,,,,,,,,,,"The debug information should be deleted in the DSAParameterGenerator.java:
        MessageDigest hashObj = null;
        try {
            hashObj = MessageDigest.getInstance(hashAlg);
        } catch (NoSuchAlgorithmException nsae) {
            // should never happen
-           nsae.printStackTrace();
        }
",,,,,,,,,,,JDK-8275879,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-7044060,,,,,,,,,,,,,,,,,,,,,,,,"0|i2u0uz:",9223372036854775807,b11,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@2ec284e3,,,,,,,,,"2021-08-12 12:29;roboduke;Changeset: e4766ee0
Author:    Xue-Lei Andrew Fan <xuelei@openjdk.org>
Date:      2021-08-12 19:28:01 +0000
URL:       https://git.openjdk.java.net/jdk/commit/e4766ee0aa96ab80aeaca36afac5fcaa516620ef
;;;","2021-08-13 00:39;shade;Apparently added by JDK-7044060 in 8.;;;","2021-08-25 06:34;inakonechnyy;Backport request to jdk17, applies cleanly, tier1 runs ok.;;;",,,,,,,,,,,,,,,,,,,,,,,
"Enforce ECPrivateKey d value to be in the range [1, n-1] for SunEC provider",JDK-8272385,5056575,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,jnimeh,jnimeh,jnimeh,2021-08-12 11:02,2021-09-08 22:55,2023-10-01 09:57,2021-09-02 10:55,,,,,,,,18,security-libs,,0,,,,,,,,,,,,,,,,,,,,,,"Per ANSI X9.62 and FIPS 186-4 the private key for EC should sit in the range [1, n-1] where ""n"" is the order of the generator for the curve.

In the SunEC Provider, if an ECPrivateKey is created with a value that exceeds the order of the generator then a Signature can still be performed.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2u0tn:",9223372036854775807,b14,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@2ec284e3,,,,,,,,,"2021-09-02 10:55;roboduke;Changeset: 29e0f138
Author:    Jamil Nimeh <jnimeh@openjdk.org>
Date:      2021-09-02 17:54:08 +0000
URL:       https://git.openjdk.java.net/jdk/commit/29e0f1386d247731e8733f6fdd1307642b2b9f96
;;;",,,,,,,,,,,,,,,,,,,,,,,,,
Update version to 6.2,CODETOOLS-7903025,5058672,Bug,Resolved,CODETOOLS,Code Tools,software,duke,,,P3,Fixed,jjg,jjg,jjg,2021-09-15 16:40,2022-07-01 12:29,2023-10-01 09:57,2021-09-15 19:36,,,,,,,,,tools,,0,,,,,,,,,,,,,,,,,,,,,,The next promoted version will be 6.2,,,,,,,,,,,,,,,,,,,,,,,,,,,,CODETOOLS-7903226,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2ud5f:",9223372036854775807,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@41617238,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Command line error: Incorrect output filename  - can't write,CODETOOLS-7903020,5057532,Bug,Resolved,CODETOOLS,Code Tools,software,duke,,,P1,Fixed,lkuskov,shurailine,shurailine,2021-08-26 12:27,2021-08-30 14:17,2023-10-01 09:57,2021-08-30 14:15,,,,,,,,,tools,,0,,,,,,,,,,,,,,,,,,,,,,"While using Merger:
java ... com.sun.tdk.jcov.Merger -o <output file> <file>...

the error is printed for the output file",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2u643:",9223372036854775807,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@33767a5b,,,,,,,,,"2021-08-26 12:32;shurailine;Cause: in Merger class next checks are done for the output file:

Utils.checkFileNotNull(output, ""output filename"", Utils.CheckOptions.FILE_NOTISDIR, Utils.CheckOptions.FILE_CANWRITE, Utils.CheckOptions.FILE_PARENTEXISTS);

Utils.CheckOptions.FILE_CANWRITE is later mapped to File.canWrite():
                case FILE_CANWRITE:
                    if (!file.canWrite()) {
                        throw new EnvHandlingException(""Incorrect "" + description + "" ("" + file.getPath() + "") - can't write"");
                    }
                    break;

File.canWrite javadoc says:
     * @return  {@code true} if and only if the file system actually
     *          contains a file denoted by this abstract pathname <em>and</em>
     *          the application is allowed to write to the file;
     *          {@code false} otherwise.

The output file does not have to exist.;;;","2021-08-30 14:15;roboduke;Changeset: f3ee5df6
Author:    Leonid Kuskov <lkuskov@openjdk.org>
Date:      2021-08-30 21:15:20 +0000
URL:       https://git.openjdk.java.net/jcov/commit/f3ee5df68e2d8acf0f889ad9ad16367ca4d1e337
;;;",,,,,,,,,,,,,,,,,,,,,,,,
jcstress: Very long exceptions break the VM data streams,CODETOOLS-7903019,5057524,Bug,Closed,CODETOOLS,Code Tools,software,duke,,,P4,Fixed,shade,shade,shade,2021-08-26 10:41,2021-08-27 03:07,2023-10-01 09:57,2021-08-27 03:07,,,,,,,,,tools,,0,,,,,,,,,,,,,,,,,,,,,,"Force a StackOverflowException in a test, and observe:

   VM error stream:
     Exception in thread ""main"" java.io.UTFDataFormatException: encoded string (java.lan...va:49) too long: 167966 bytes
         at java.base/java.io.DataOutputStream.writeUTF(DataOutputStream.java:368)
         at java.base/java.io.DataOutputStream.writeUTF(DataOutputStream.java:332)
         at org.openjdk.jcstress.infra.collectors.TestResult.write(TestResult.java:95)
         at org.openjdk.jcstress.link.BinaryLinkClient.doneResult(BinaryLinkClient.java:73)
         at org.openjdk.jcstress.ForkedMain.main(ForkedMain.java:93)

There is a limitation in DataOutputStream that does not allow us to write Strings larger than 64K.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2u62b:",9223372036854775807,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@50120698,,,,,,,,,"2021-08-27 03:07;shade;https://github.com/openjdk/jcstress/commit/14e330632272bc74d7b58953c7db24a70486660b;;;",,,,,,,,,,,,,,,,,,,,,,,,,
RunTestsHandler passes arguments to lastIndexOf in the wrong order,CODETOOLS-7903017,5057201,Bug,Resolved,CODETOOLS,Code Tools,software,duke,,,P4,Fixed,cushon,cushon,cushon,2021-08-23 16:21,2021-09-27 13:05,2023-10-01 09:57,2021-09-27 13:04,,,,,,,,,tools,,0,,,,,,,,,,,,,,,,,,,,,,"The first argument to String#lastIndexOf(int, int) is a character, to search for, the second argument is a start index.

In https://github.com/openjdk/jtharness/blob/master/src/com/sun/javatest/exec/RunTestsHandler.java, `curr.lastIndexOf(slash, '#')` should probably be `curr.lastIndexOf('#', slash)`",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2u4oj:",9223372036854775807,,,,,,,,,,,,,"2021-09-27 13:04;roboduke;Changeset: ccb9209a
Author:    Liam Miller-Cushon <cushon@openjdk.org>
Committer: Dmitry Bessonov <dbessono@openjdk.org>
Date:      2021-09-27 20:03:14 +0000
URL:       https://git.openjdk.java.net/jtharness/commit/ccb9209a23a82541866fe75d486d4cf0820793d0
;;;",,,,,,,,,,,,,,,,,,,,,,,,,
