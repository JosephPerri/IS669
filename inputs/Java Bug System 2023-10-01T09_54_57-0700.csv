Summary,Issue key,Issue id,Issue Type,Status,Project key,Project name,Project type,Project lead,Project description,Project url,Priority,Resolution,Assignee,Reporter,Creator,Created,Updated,Last Viewed,Resolved,Affects Version/s,Affects Version/s,Affects Version/s,Affects Version/s,Affects Version/s,Affects Version/s,Affects Version/s,Fix Version/s,Component/s,Due Date,Votes,Labels,Labels,Labels,Labels,Labels,Labels,Labels,Labels,Labels,Labels,Labels,Labels,Labels,Labels,Labels,Labels,Labels,Labels,Labels,Description,Environment,Log Work,Original Estimate,Remaining Estimate,Time Spent,Work Ratio,Σ Original Estimate,Σ Remaining Estimate,Σ Time Spent,Security Level,Inward issue link (Backport),Outward issue link (Backport),Outward issue link (Backport),Outward issue link (Backport),Outward issue link (Backport),Outward issue link (Backport),Outward issue link (Backport),Outward issue link (Backport),Outward issue link (Backport),Outward issue link (Backport),Outward issue link (Backport),Outward issue link (Backport),Outward issue link (Backport),Outward issue link (Backport),Inward issue link (Blocks),Inward issue link (Blocks),Outward issue link (Blocks),Outward issue link (Blocks),Outward issue link (CSR),Inward issue link (Cloners),Inward issue link (Cloners),Outward issue link (Cloners),Inward issue link (Duplicate),Inward issue link (Duplicate),Inward issue link (Duplicate),Outward issue link (Duplicate),Outward issue link (Duplicate),Inward issue link (Relates),Inward issue link (Relates),Inward issue link (Relates),Inward issue link (Relates),Outward issue link (Relates),Outward issue link (Relates),Outward issue link (Relates),Attachment,Attachment,Attachment,Attachment,Attachment,Attachment,Attachment,Custom field ( Type of Bug [Challenge] ),Custom field (CPU),Custom field (CPU),Custom field (Cost of Delay),Custom field (Epic Link),Custom field (Imported),Custom field (Indexed),Custom field (Introduced In Build),Custom field (Introduced In Version),Custom field (Number of Tests Affected [Challenge]),Custom field (OS),Custom field (OS),Custom field (Oracle Evaluation),Custom field (Original story points),Custom field (Parent Link),Custom field (Rank),Custom field (Rank (Obsolete)),Custom field (Resolved In Build),Custom field (Story Points),Custom field (Subcomponent),Custom field (Target end),Custom field (Target start),Custom field (Team),Custom field (Time Spent),Custom field (Understanding),Custom field (Value),Custom field (Verification),Custom field (external_bug),Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment
"After enabled maintainer approval in a repo, some pull requests are not updated",SKARA-2049,5111430,Bug,Resolved,SKARA,Skara,software,darcy,,,P4,Fixed,zsong,zsong,zsong,2023-09-28 10:56,2023-09-28 14:22,2023-10-01 09:55,2023-09-28 14:22,,,,,,,,1.0,bots,,0,,,,,,,,,,,,,,,,,,,,"Today, I enabled maintainer approval feature in openjdk/jdk8u-dev.

After we enabled this feature, we expect to see the progress like ""JDK-XXXXXXX needs maintainer approval"" in the pr body.

However, this pr(https://github.com/openjdk/jdk8u-dev/pull/368) is not updated.

The reason is that although after we enabled the maintainer approval feature, the issue labels will be calculated in the issueMetaData, there still exists some issues that doesn't contain any label.

To solve this, I think we could add a string ""approval"" to issueMetaData after we enabled the maintainer approval.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i33bcr:",9223372036854775807,,,,,,,,,,,,"2023-09-28 11:04;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/skara/pull/1563
Date: 2023-09-28 17:58:34 +0000;;;","2023-09-28 14:22;roboduke;Changeset: be89a78a
Author:    Zhao Song <zsong@openjdk.org>
Date:      2023-09-28 21:22:03 +0000
URL:       https://git.openjdk.org/skara/commit/be89a78a5ca9d5922021b67387894d7fd8a62fbb
;;;",,,,,,,,,,,,,,,,,,,,,,,,,
Make maintainer approval feature compatible with dependent pr feature.,SKARA-2045,5111268,Bug,Resolved,SKARA,Skara,software,darcy,,,P4,Fixed,zsong,zsong,zsong,2023-09-27 10:30,2023-09-29 12:14,2023-10-01 09:55,2023-09-29 12:14,,,,,,,,1.0,bots,,0,,,,,,,,,,,,,,,,,,,,"A user reported that a dependent pr in a repo which configured with maintainer approval feature is not marked for approval.
https://github.com/openjdk/jdk21u/pull/200

After investigation, I realized that the skara bot would determine whether this pr needs maintainer approval by checking whether merging into the target branch needs maintainer approval.
 
In this case, we only configured that merging into master branch of jdk21u needs maintainer approval, however, for dependent pull requests, the target branch is pr/XXX.

To fix this issue, we should let the skara bot be able to find the real target ref.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i33acr:",9223372036854775807,,,,,,,,,,,,"2023-09-27 13:54;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/skara/pull/1562
Date: 2023-09-27 19:50:25 +0000;;;","2023-09-29 12:14;roboduke;Changeset: ba26745a
Author:    Zhao Song <zsong@openjdk.org>
Date:      2023-09-29 19:14:05 +0000
URL:       https://git.openjdk.org/skara/commit/ba26745a5e73aa6e15671d81704f53d5774299dd
;;;",,,,,,,,,,,,,,,,,,,,,,,,,
Skara mistakenly tagged the wrong commit when processing a /tag command,SKARA-2043,5111194,Bug,Resolved,SKARA,Skara,software,darcy,,,P2,Fixed,erikj,kcr,kcr,2023-09-27 06:44,2023-09-29 10:33,2023-10-01 09:55,2023-09-29 10:33,,,,,,,,1.0,bots,,0,,,,,,,,,,,,,,,,,,,,"I tagged a commit in a stabilization branch, using the Skara '/tag' command as a commit comment, and it mistakenly tagged a different commit in the master branch instead.
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i339wb:",9223372036854775807,,,,,,,,,,,,"2023-09-27 07:26;erikj;I tried to reproduce this in a debugger, but it's doing the right thing for these commit comments now. I suspect that this was caused by a glitch in GitLab.;;;","2023-09-27 08:01;kcr;I wondered if that might have been the case. We have occasionally seen such glitches, possibly due to a server side caching bug, where recent commits don't show up for some small period of time. I don't think we've ever been able to characterize these glitches.;;;","2023-09-27 09:31;erikj;That said, I have a theory on what could have caused this to happen and if that's the case (or close enough) there is something we can do.

To find recent commit comments, we list ""events"" for the repo, and filter for notes on commits. The note event has the comment body, author, timestamp and the commit title (but notably not the commit hash). To match that back to actual commits, we build a map using a local clone of the repo, from commit title to list of hashes with that title. When finding a note event and if that matches multiple possible commits, we go through each candidate commit and fetch the actual comments on each of them, and match those against the note event. The first match is taken and processed.

The problem I think we have is when only one commit candidate is found in the map. In that case we never verify if the commit actually has a comment matching the note event, we just shortcut and return the single candidate. I believe this could happen due to a race, and possibly made more likely by caching in Gitlab. The local repository is refreshed first, before we query for note events. This means a commit could theoretically be pushed and commented on after the repository is cloned/refreshed but before events are queried. In the particular case described here, it looks like the commit was pushed a few minutes before the bot started acting, but the comment was made close enough in time to maybe fall in between. If Gitlab was always presenting coherent and up to date data, this wouldn't have caused a problem.

I think the fix here is to remove the early return when there is only one candidate. We need to always verify that a suitable commit actually exists on the commit that was found through events. Specifically, the early return in GitLabRepository::commitWithComment should be removed. Not sure if we should throw exception in that method though.;;;","2023-09-27 12:43;erikj;Keeping this as P2. It's likely a rare occurrence, but when it happens it's severe. The wrong commit gets tagged.;;;","2023-09-27 16:25;zsong;And after we found the commit, we could use the 'note id' to double check whether the comment really belongs to the commit. But we need to make another request and I don't know whether it worth.;;;","2023-09-28 06:50;erikj;Not sure what you mean here. What ""note id"" are you referring to?;;;","2023-09-28 08:47;zsong;Sorry, I didn't state it clearly. 'note id' is the 'commitComment id'. And I just noticed you already mentioned this in your comment ""We need to always verify that a suitable commit actually exists on the commit that was found through events."";;;","2023-09-28 09:06;erikj;Have you looked at the GitLab APIs for commit comments? There is no ""id"" to very or compare against. That's why we have to resort to comparing author and createdAt instead. The event has a target_id, but this doesn't show up anywhere in either commits or commit comments. It's quite frustrating.;;;","2023-09-28 10:47;erikj;After offline discussion and investigation, we have concluded that there is an alternate API for ""discussions"" on a commit, which does return the comment ID for each discussion item. This makes it possible to connect event notes with commit comments via ID rather than matching author and create_at. I will use this to make the implementation for recentCommitComments a bit more robust.;;;","2023-09-28 11:18;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/skara/pull/1564
Date: 2023-09-28 18:17:29 +0000;;;","2023-09-29 10:33;roboduke;Changeset: 439d2662
Author:    Erik Joelsson <erikj@openjdk.org>
Date:      2023-09-29 17:31:55 +0000
URL:       https://git.openjdk.org/skara/commit/439d26621820896e247803f59e388976b9e4b957
;;;",,,,,,,,,,,,,,,,
Don't post error message of invalid jcheck configuration when encountering UncheckedIOException,SKARA-2038,5110869,Bug,Resolved,SKARA,Skara,software,darcy,,,P4,Fixed,zsong,zsong,zsong,2023-09-22 11:18,2023-09-22 14:32,2023-10-01 09:55,2023-09-22 14:32,,,,,,,,1.0,bots,,0,,,,,,,,,,,,,,,,,,,,"In CheckWorkItem, the bot would check whether this pull request has valid jcheck configuration and if not, the bot would post an error message of invalid jcheck configuration in the pull request.

Today, a user reported that he saw this error message in his pull request and he couldn't determine whether the pull request is good. After reading the log, I found that it's just a temporary glitch.  The bot was trying to read jcheck configuration in GitHub but got HttpTimeoutException, so the bot posted the error message. But it recovers in the next try.
https://github.com/openjdk/panama-foreign/pull/893

To sum, in the cases of some temporary glitches, we shouldn't post error message to pull request to confuse users.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i337w3:",9223372036854775807,,,,,,,,,,,,"2023-09-22 12:41;erikj;Do you know what exception you get if the file doesn't exist?;;;","2023-09-22 12:45;zsong;If the file doesn't exist, the exception will be UncheckedRestException and the status code will be 404.
We already special handled this in HostedRepository#fileContents.;;;","2023-09-22 12:58;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/skara/pull/1559
Date: 2023-09-22 18:30:04 +0000;;;","2023-09-22 14:32;roboduke;Changeset: f59da95a
Author:    Zhao Song <zsong@openjdk.org>
Date:      2023-09-22 21:31:34 +0000
URL:       https://git.openjdk.org/skara/commit/f59da95aa040dd02edd363686bacd0d66b19a0d5
;;;",,,,,,,,,,,,,,,,,,,,,,,
Change the order of bots in PullRequestBotFactory,SKARA-2037,5110800,Bug,Resolved,SKARA,Skara,software,darcy,,,P4,Fixed,zsong,zsong,zsong,2023-09-21 13:54,2023-09-22 11:31,2023-10-01 09:55,2023-09-22 11:31,,,,,,,,1.0,bots,,0,,,,,,,,,,,,,,,,,,,,"Today, when restarting the bot, I found that the IssueBot was down for a long time(about 30 minutes), and then I realized that in PullRequestBotFactory, we will create all pullRequestBot first, then CSRIssueBot, and IssueBots last.

After the bot is restarted, the botRunner would run all pullRequestBots first and we have a lot of pullRequestBots, so it will take a lot of time. And if users make changes to issues in JBS during this interval, the IssueBot may not be able to get all updated issues. It's really bad. 

To solve this problem, we could to reverse the order of bots in PullRequestBotFactory, therefore we could make sure IssueBot will be run firstly.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i337gr:",9223372036854775807,,,,,,,,,,,,"2023-09-21 17:51;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/skara/pull/1558
Date: 2023-09-21 21:16:17 +0000;;;","2023-09-22 11:31;roboduke;Changeset: 1da0b82b
Author:    Zhao Song <zsong@openjdk.org>
Date:      2023-09-22 18:30:43 +0000
URL:       https://git.openjdk.org/skara/commit/1da0b82b91d6ab3ba810b40a201d0f4dd41bb7b4
;;;",,,,,,,,,,,,,,,,,,,,,,,,,
Initial run of PR IssueBot misses issue updates,SKARA-2015,5109679,Bug,Resolved,SKARA,Skara,software,darcy,,,P3,Fixed,zsong,erikj,erikj,2023-09-05 14:04,2023-09-20 14:17,2023-10-01 09:55,2023-09-20 14:17,,,,,,,,1.0,bots,,0,,,,,,,,,,,,,,,,,,,,"When the PR bot runner is restarted, the initial run of PullRequestBot polls all open PRs and 7 days of closed PRs, to make sure we process any updates that happened while the bot was down, and to make sure we process PRs with the potentially updated bot implementation. The CheckWorkItem tries to prevent re-evaluating PRs too much by storing a checksum of the last checked state in the PR itself on the forge. This state is split between PR state and (Jira) Issue state. Depending on which kind of Bot instance (Issue or PullRequest) that spawned the CheckWorkItem, only the relevant checksum is recalculated and compared. This selective checking is good for performance when the bot runner has reached steady state, but is the cause for missing Issue updates (or updates to Issue evaluation) when the bot runner is restarted. Only the PullRequestBot does the initial big poll of PRs, while the IssueBot only starts polling for current updates. This means that if an Issue was updated while the bot runner was restarting, CheckWorkItem won't compare the checksum for Issues in this first run.

I think we can solve this without too much trouble. In the initial run, PullRequestBot needs to make CheckWorkItem compare both checksums. ",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,SKARA-2016,,,,SKARA-2013,,,,,,,,,,,,,,,,,,,,,,,,,"0|i330jv:",9223372036854775807,,,,,,,,,,,,"2023-09-05 14:05;erikj;Discovered this when investigating why SKARA-2013 wasn't marking existing PRs.;;;","2023-09-06 11:21;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/skara/pull/1554
Date: 2023-09-06 18:19:19 +0000;;;","2023-09-20 14:17;roboduke;Changeset: ef81acbb
Author:    Zhao Song <zsong@openjdk.org>
Date:      2023-09-20 21:17:01 +0000
URL:       https://git.openjdk.org/skara/commit/ef81acbbe2cf97c6d56cc0b765e4b2bb9acc75a5
;;;",,,,,,,,,,,,,,,,,,,,,,,,
Handle both ignoreopt and matchprefix together in IssueNotifier,SKARA-2010,5109302,Bug,Resolved,SKARA,Skara,software,darcy,,,P4,Fixed,erikj,erikj,erikj,2023-08-30 09:30,2023-08-31 07:13,2023-10-01 09:55,2023-08-31 07:13,,,,,,,,1.0,bots,,0,,,,,,,,,,,,,,,,,,,,"The two configuration options for tags in the IssueNotifier, ""ignoreopt"" and ""matchprefix"" do not work together if ""matchprefix"" is set to false (which is the default value). We need to configure a repository where the tag format and the fixVersion differ in both prefix and ""opt"" suffix, so this needs to be fixed.",,,,,,,,,,,,,,,,,,,,,,,,,,,SKARA-2008,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i32y83:",9223372036854775807,,,,,,,,,,,,"2023-08-30 12:40;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/skara/pull/1551
Date: 2023-08-30 19:39:47 +0000;;;","2023-08-31 07:13;roboduke;Changeset: 1f6e3de8
Author:    Erik Joelsson <erikj@openjdk.org>
Date:      2023-08-31 14:12:49 +0000
URL:       https://git.openjdk.org/skara/commit/1f6e3de8e6a4f53852caa4b8bc7ee820fd47ae55
;;;",,,,,,,,,,,,,,,,,,,,,,,,,
Field 'groups' in Class GitLabHost should be 'List',SKARA-2004,5108797,Bug,Resolved,SKARA,Skara,software,darcy,,,P4,Fixed,zsong,zsong,zsong,2023-08-24 09:03,2023-08-24 10:43,2023-10-01 09:55,2023-08-24 10:43,,,,,,,,1.0,bots,,0,,,,,,,,,,,,,,,,,,,,"Currently, the field 'groups' in GitLabHost is a set. However, we would like the bot has some preference for some groups, so this field should be able to keep the order.

The solution is to change this field to List.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i32v3v:",9223372036854775807,,,,,,,,,,,,"2023-08-24 09:19;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/skara/pull/1550
Date: 2023-08-24 16:10:19 +0000;;;","2023-08-24 10:43;roboduke;Changeset: 844337a9
Author:    Zhao Song <zsong@openjdk.org>
Date:      2023-08-24 17:42:03 +0000
URL:       https://git.openjdk.org/skara/commit/844337a9944d615ad3b24c73189ab10ab06a7afa
;;;",,,,,,,,,,,,,,,,,,,,,,,,,
Timing out lock in RestRequestCache stops the bot,SKARA-2003,5108723,Bug,Resolved,SKARA,Skara,software,darcy,,,P4,Fixed,zsong,erikj,erikj,2023-08-23 07:29,2023-09-12 10:42,2023-10-01 09:55,2023-09-12 10:42,,,,,,,,1.0,admin,,0,,,,,,,,,,,,,,,,,,,,"In RestRequestCache, there is a lock to prevent concurrent calls to services like github. This lock has a hard coded timeout of 10 minutes and if that ever hits, it calls System.exit(1). I think this is a bit drastic, especially since the intention of this action isn't logged, just printed to stderr.

I think a more appropriate action would be to throw an exception. The exception would then be logged SEVERE automatically by the BotRunner.

Last night the mlbridge bot exited because of this.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i32unf:",9223372036854775807,,,,,,,,,,,,"2023-09-06 14:21;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/skara/pull/1555
Date: 2023-09-06 21:15:28 +0000;;;","2023-09-12 10:42;roboduke;Changeset: 07dde6d6
Author:    Zhao Song <zsong@openjdk.org>
Date:      2023-09-12 17:41:48 +0000
URL:       https://git.openjdk.org/skara/commit/07dde6d63d49cf29b68e46135af4d27af0b8c332
;;;",,,,,,,,,,,,,,,,,,,,,,,,,
GitToHgConverter fails on merge with ancestor,SKARA-2002,5108649,Bug,Resolved,SKARA,Skara,software,darcy,,,P2,Fixed,erikj,erikj,erikj,2023-08-22 14:53,2023-08-23 06:43,2023-10-01 09:55,2023-08-23 06:43,,,,,,,,1.0,libraries,,0,,,,,,,,,,,,,,,,,,,,"Sometimes through weird circumstances we can end up with Git repositories where merges between a commit and an ancestor to that commit. Converting such a commit to Mercurial can be tricky, and in one case we are currently failing.

The GitToHgConverter is already trying to solve this issue, but only detects the ancestor relationship in one direction between the commits to be merged, and not the other. Specifically if the first parent is an ancestor of the second parent, the conversion will identify the situation and apply the workaround. But, if instead the second parent is an ancestor of first parent, it's not detected. The first case is quite commonly achieved by merging in a branch using --no-ff, but the second seems rarer.

I think the same workaround can be applied regardless of the direction of this relationship and that should solve the issue we are currently facing with one of our conversion jobs.",,,,,,,,,,,,,,,,,,,,,,,,,,,SKARA-2001,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i32u6z:",9223372036854775807,,,,,,,,,,,,"2023-08-22 16:25;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/skara/pull/1549
Date: 2023-08-22 23:24:46 +0000;;;","2023-08-23 06:43;roboduke;Changeset: 67d9f091
Author:    Erik Joelsson <erikj@openjdk.org>
Date:      2023-08-23 13:41:38 +0000
URL:       https://git.openjdk.org/skara/commit/67d9f09103f46d751b833f25237ca9b4ea35e839
;;;",,,,,,,,,,,,,,,,,,,,,,,,,
Escape user handles in bug titles in pr body,SKARA-2000,5108584,Bug,Resolved,SKARA,Skara,software,darcy,,,P4,Fixed,zsong,erikj,erikj,2023-08-22 05:47,2023-08-23 08:37,2023-10-01 09:55,2023-08-23 08:37,,,,,,,,1.0,bots,,0,,,,,,,,,,,,,,,,,,,,"Similar to SKARA-1807, we should also escape '@' characters in issue titles as those could otherwise be interpreted as GitHub usernames and tag those users. Note that this applies to the PR body, not the title.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,SKARA-1807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i32tsj:",9223372036854775807,,,,,,,,,,,,"2023-08-22 14:17;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/skara/pull/1548
Date: 2023-08-22 21:14:48 +0000;;;","2023-08-23 08:37;roboduke;Changeset: 5eb862ef
Author:    Zhao Song <zsong@openjdk.org>
Date:      2023-08-23 15:36:55 +0000
URL:       https://git.openjdk.org/skara/commit/5eb862ef7c1d7913208d34e7a8d202f225d88120
;;;",,,,,,,,,,,,,,,,,,,,,,,,,
Only post ApprovalNeededComment after pr is otherwise ready for integration,SKARA-1999,5108490,Bug,Resolved,SKARA,Skara,software,darcy,,,P4,Fixed,zsong,zsong,zsong,2023-08-21 11:37,2023-08-22 09:09,2023-10-01 09:55,2023-08-22 09:09,,,,,,,,1.0,bots,,0,,,,,,,,,,,,,,,,,,,,"In SKARA-1199, I made a bug about posting approvalNeededComment.

Before the bot posting ApprovalNeededComment, we need to make sure this pr could pass all the checks.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i32t7n:",9223372036854775807,,,,,,,,,,,,"2023-08-21 12:54;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/skara/pull/1546
Date: 2023-08-21 19:49:51 +0000;;;","2023-08-22 09:09;roboduke;Changeset: c31c8b4d
Author:    Zhao Song <zsong@openjdk.org>
Date:      2023-08-22 16:08:44 +0000
URL:       https://git.openjdk.org/skara/commit/c31c8b4dd7ac2debe1ee09bd042ad66c41ebf874
;;;",,,,,,,,,,,,,,,,,,,,,,,,,
The logic for getting repository name and branch name in the backport pr command is inconsistent,SKARA-1995,5108257,Bug,Resolved,SKARA,Skara,software,darcy,,,P4,Fixed,zsong,zsong,zsong,2023-08-16 13:29,2023-08-17 09:54,2023-10-01 09:55,2023-08-17 09:54,,,,,,,,1.0,bots,,0,,,,,,,,,,,,,,,,,,,,"In the backport pull request command, the process of getting the repository name and branch name differs between cancelling a backport request and creating a backport request.

The solution is to make it consistent.
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i32rrv:",9223372036854775807,,,,,,,,,,,,"2023-08-16 14:04;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/skara/pull/1545
Date: 2023-08-16 20:32:34 +0000;;;","2023-08-17 09:54;roboduke;Changeset: 924a0a0e
Author:    Zhao Song <zsong@openjdk.org>
Date:      2023-08-17 16:54:13 +0000
URL:       https://git.openjdk.org/skara/commit/924a0a0e5ba2ac1c390a20a6355ce9f6157784d5
;;;",,,,,,,,,,,,,,,,,,,,,,,,,
Reply from /reviewer credit can be clearer,SKARA-1994,5108032,Bug,Resolved,SKARA,Skara,software,darcy,,,P4,Fixed,zsong,erikj,erikj,2023-08-15 06:26,2023-08-23 08:37,2023-10-01 09:55,2023-08-23 08:37,,,,,,,,1.0,bots,,0,,,,,,,,,,,,,,,,,,,,"If a PR author uses the /reviewer credit command to add a reviewer who has already performed an actual review of a PR, the error message is:

""Reviewer <user> has already made an authenticated review of this PR, and does not need to be credited manually.""

This makes sense if the review was an approval, but if it was just a comment or a rejection, we should change the wording to something like:

""Reviewer <user> has already made an authenticated review of this PR, but did not approve it. Manually crediting them is not allowed.""
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i32qdv:",9223372036854775807,,,,,,,,,,,,"2023-08-22 10:49;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/skara/pull/1547
Date: 2023-08-22 17:38:30 +0000;;;","2023-08-23 08:37;roboduke;Changeset: 30fda5b3
Author:    Zhao Song <zsong@openjdk.org>
Date:      2023-08-23 15:36:15 +0000
URL:       https://git.openjdk.org/skara/commit/30fda5b389426b6bb17160e83f9873e29514e9ff
;;;",,,,,,,,,,,,,,,,,,,,,,,,,
Fix MailingListNotifierTests#testMailingListBranch,SKARA-1990,5107894,Bug,Resolved,SKARA,Skara,software,darcy,,,P4,Fixed,zsong,zsong,zsong,2023-08-11 10:58,2023-08-14 10:17,2023-10-01 09:55,2023-08-14 10:17,,,,,,,,1.0,bots,,0,,,,,,,,,,,,,,,,,,,,"In SKARA-1979, when generating a notification email for the first branch of a repository, all refs except pr/X branches are regarded as potential candidates.

Therefore, this test sometimes fails because the master branch and testlock branch are identical, and it's uncertain which one will be selected as the base for the new branch.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i32pj7:",9223372036854775807,,,,,,,,,,,,"2023-08-11 11:24;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/skara/pull/1543
Date: 2023-08-11 18:01:07 +0000;;;","2023-08-14 10:17;roboduke;Changeset: 5ebf0975
Author:    Zhao Song <zsong@openjdk.org>
Date:      2023-08-14 17:17:26 +0000
URL:       https://git.openjdk.org/skara/commit/5ebf09753830b5fddae61f94b1b6e2a99a2b51eb
;;;",,,,,,,,,,,,,,,,,,,,,,,,,
Format error of Issues in pull Request body,SKARA-1985,5107275,Bug,Resolved,SKARA,Skara,software,darcy,,,P4,Fixed,zsong,zsong,zsong,2023-08-02 16:42,2023-08-02 17:26,2023-10-01 09:55,2023-08-02 17:26,,,,,,,,1.0,bots,,0,,,,,,,,,,,,,,,,,,,,We need to add some line break in pull request body.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"2023-08-02 16:44;zsong;Screenshot 2023-08-02 at 16.43.54.png;https://bugs.openjdk.org/secure/attachment/104959/Screenshot+2023-08-02+at+16.43.54.png",,,,,,,,,,,,,,,,,,,,,,"0|i32lpn:",9223372036854775807,,,,,,,,,,,,"2023-08-02 16:47;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/skara/pull/1542
Date: 2023-08-02 23:44:42 +0000;;;","2023-08-02 17:26;roboduke;Changeset: bc424dbc
Author:    Zhao Song <zsong@openjdk.org>
Date:      2023-08-03 00:25:43 +0000
URL:       https://git.openjdk.org/skara/commit/bc424dbcd455b0d9eaa3c3bc2ebd7f552851a986
;;;",,,,,,,,,,,,,,,,,,,,,,,,,
SKARA bot couldn't handle jep command if the jep doesn't have JEP Number,SKARA-1984,5107269,Bug,Resolved,SKARA,Skara,software,darcy,,,P4,Fixed,zsong,zsong,zsong,2023-08-02 13:41,2023-08-02 15:33,2023-10-01 09:55,2023-08-02 15:33,,,,,,,,1.0,bots,,0,,,,,,,,,,,,,,,,,,,,"A user issued command /jep JDK-8310626 in https://github.com/openjdk/jdk/pull/15103 and skara bot kept throwing exceptions because the JEP doesn't have a JEP number.

[~kcr] suggested that it makes more sense to make skara bot be able to associate a PR with a JEP before it is a Candidate.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i32lob:",9223372036854775807,,,,,,,,,,,,"2023-08-02 14:52;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/skara/pull/1541
Date: 2023-08-02 21:27:13 +0000;;;","2023-08-02 15:33;roboduke;Changeset: 57610580
Author:    Zhao Song <zsong@openjdk.org>
Date:      2023-08-02 22:32:35 +0000
URL:       https://git.openjdk.org/skara/commit/576105808ccf1b000906a026d0a1148121db02b4
;;;",,,,,,,,,,,,,,,,,,,,,,,,,
JMC should fail properly when executed with <17 JDK,JMC-8121,5111399,Bug,Resolved,JMC,Java Mission Control,software,hirt,The production time profiling and diagnostics tools-suite for the HotSpot JDK.,,P4,Fixed,ssatish,jbechberger,jbechberger,2023-09-28 04:56,2023-09-28 08:06,2023-10-01 09:55,2023-09-28 08:02,,,,,,,,9.0.0,docs,,0,sap-interest,,,,,,,,,,,,,,,,,,,"The ""jmc.product"" file currently doesn't state the minimally required JDK version to run via the osgi.requiredJavaVersion property. This leads to hard to comprehend error message when starting JMC with Java 8: Just a popup that tells us that some error occurred and the name of the log file, yet even the log file doesn't state the error clearly.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i33b5v:",9223372036854775807,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@2bd35217,,,,,,,,,"2023-09-28 05:17;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jmc/pull/516
Date: 2023-09-28 12:06:32 +0000;;;","2023-09-28 08:02;roboduke;Changeset: ed9c2456
Author:    Johannes Bechberger <jbechberger@openjdk.org>
Committer: Alex Macdonald <aptmac@openjdk.org>
Date:      2023-09-28 15:01:16 +0000
URL:       https://git.openjdk.org/jmc/commit/ed9c2456f7c19750191fe06560afee4af84c00b5
;;;",,,,,,,,,,,,,,,,,,,,,,,,,
mvn clean install on JMC Core fails if path contains space,JMC-8117,5108309,Bug,Resolved,JMC,Java Mission Control,software,hirt,The production time profiling and diagnostics tools-suite for the HotSpot JDK.,,P3,Fixed,vpurnam,vpurnam,vpurnam,2023-08-17 08:56,2023-08-20 18:19,2023-10-01 09:55,2023-08-17 22:31,,,,,,,,9.0.0,Mission Control Core,,0,,,,,,,,,,,,,,,,,,,,mvn clean install on JMC Core fails if path contains space.  ,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"2023-08-17 09:07;vpurnam;JMC-8117.png;https://bugs.openjdk.org/secure/attachment/105150/JMC-8117.png",,,,,,,,,,,,,,,,,,,,,,"0|i32s3f:",9223372036854775807,,,,,,,,,,,,"2023-08-17 10:03;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jmc/pull/512
Date: 2023-08-17 16:56:44 +0000;;;","2023-08-17 22:31;roboduke;Changeset: 6003efc5
Author:    Virag Purnam <vpurnam@openjdk.org>
Date:      2023-08-18 05:30:10 +0000
URL:       https://git.openjdk.org/jmc/commit/6003efc56f0b43bf2a2392d800394438c8e0a967
;;;",,,,,,,,,,,,,,,,,,,,,,,,,
JavaFX Developer build broken on Windows - NativeLibrary file contains invalid character ':',JDK-8317308,5111481,Bug,Resolved,JDK,JDK,software,duke,,,P2,Fixed,fkirmaier,fkirmaier,fkirmaier,2023-09-29 03:30,2023-09-30 05:54,2023-10-01 09:55,2023-09-29 06:36,jfx21,,,,,,,jfx22,javafx,,0,noreg-build,regression,regression_8264449,,,,,,,,,,,,,,,,,"The format of the timestamp has changed to ISO 8601. This contains the “:” Character.
A copy of the dll is saved at <home>/.openjfx/cache/"" + jfxVersion + ""/"" + arch .
On Windows, the character ‘:’ is invalid in files, causing internal errors.

This only happens on developer/non-hudson builds, because on hudson-builds, the timestamp is omitted.

This bug was introduced in jfx21",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8264449,,,,,,,,,,,,,,,,,,jfx21,,,,,,,"0|i33bo3:",9223372036854775807,master,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@1556b386,,,,,,,,,"2023-09-29 03:47;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jfx/pull/1251
Date: 2023-09-29 10:40:52 +0000;;;","2023-09-29 05:21;kcr;I had to do something similar in our CI build scripts (which are outside the jfx repo).;;;","2023-09-29 05:27;kcr;[~fkirmaier] After this is integrated into main line, I think this would be a good candidate to be backported to jfx21u so that developer builds of 21.0.x will also not run into this problem. If you want to make the request, I'll approve it.;;;","2023-09-29 06:36;dukebot;Changeset: 25862787
Author:    Florian Kirmaier <fkirmaier@openjdk.org>
Committer: Kevin Rushforth <kcr@openjdk.org>
Date:      2023-09-29 13:32:53 +0000
URL:       https://git.openjdk.org/jfx/commit/25862787d2e1b6c4da17089a1d5695c4e4b9fd6e
;;;","2023-09-29 10:24;kcr;[~fkirmaier] After further discussion, let's not consider this fix for a backport. As mentioned in this PR comment:

https://github.com/openjdk/jfx/pull/1251#issuecomment-1741236596

[~jgneff] will propose a fix for the root cause. That fix needs to be backported anyway, and once done, this fix becomes unnecessary. This fix can stay in mainline (since it is not harmful), but there will then be no need to backport it.
;;;",,,,,,,,,,,,,,,,,,,,,,
jpackage tests run osx-specific checks on windows and linux,JDK-8317283,5111450,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,asemenyuk,asemenyuk,asemenyuk,2023-09-28 14:33,2023-09-29 08:37,2023-10-01 09:55,2023-09-29 07:56,20,,,,,,,22,tools,,0,sn_153,,,,,,,,,,,,,,,,,,,"In all app image packaging tests output of on all platforms:
---
[17:31:52.845] TRACE: assertTrue(): Unexptected value in app image file for <signed>
[17:31:52.860] TRACE: assertTrue(): Unexptected value in app image file for <app-store>
---

These checks were introduced in JDK-8293462. Commit - https://github.com/openjdk/jdk/commit/1e222bccd3807c1be0d1d824e0ff9745751d8375#diff-1c3ecd7a8a4a4125f52b6f7a7d4f83a050b5f3603d074151ab946f877e6c6d9fR845

The checks are harmless but should be executed only on osx.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8293462,,,,,,,,,,,,,,,generic,,,,,,,,,generic,,,,,"0|i33bh7:",9223372036854775807,master,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@3656b41f,,,,,,,,,"2023-09-28 17:17;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/15975
Date: 2023-09-28 23:38:51 +0000;;;","2023-09-29 07:56;dukebot;Changeset: 179792be
Author:    Alexey Semenyuk <asemenyuk@openjdk.org>
Date:      2023-09-29 14:53:42 +0000
URL:       https://git.openjdk.org/jdk/commit/179792beb4e766756971fc3c80a79046b34893f4
;;;",,,,,,,,,,,,,,,,,,,,,,,,,
Pattern.Bound has `static` fields that should be `static final`.,JDK-8317264,5111426,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,emcmanus,emcmanus,emcmanus,2023-09-28 10:27,2023-09-29 00:53,2023-10-01 09:55,2023-09-28 16:03,17,21,22,,,,,22,core-libs,,0,amazon-interest,,,,,,,,,,,,,,,,,,,"    static final class Bound extends Node {
        static int LEFT = 0x1;
        static int RIGHT= 0x2;
        static int BOTH = 0x3;
        static int NONE = 0x4;

The fields are never reassigned and the lack of `final` seems to be an oversight.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,generic,,,,,,,,,generic,,,,,"0|i33bbv:",9223372036854775807,master,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@557d5cff,,,,,,,,,"2023-09-28 10:53;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/15967
Date: 2023-09-28 17:20:47 +0000;;;","2023-09-28 16:03;dukebot;Changeset: ecb5e8a0
Author:    Eamonn McManus <emcmanus@openjdk.org>
Date:      2023-09-28 23:01:18 +0000
URL:       https://git.openjdk.org/jdk/commit/ecb5e8a03f67c92d7956201de1fa7d07cc6af9cb
;;;",,,,,,,,,,,,,,,,,,,,,,,,,
RISC-V: llvm build broken,JDK-8317257,5111417,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,vkempik,vkempik,vkempik,2023-09-28 08:32,2023-09-29 00:09,2023-10-01 09:55,2023-09-28 22:17,22,,,,,,,22,hotspot,,0,oraclejdk-na,oracle-triage-22,,,,,,,,,,,,,,,,,,"using clang16 and performing build on the risc-v board getting next error:

/home/user/openjdk/jdk/src/hotspot/cpu/riscv/c1_LIRAssembler_riscv.cpp:1518:10: error: call to member function 'null_check' is ambiguous
      __ null_check(obj);
      ~~~^~~~~~~~~~
/home/user/openjdk/jdk/src/hotspot/cpu/riscv/macroAssembler_riscv.hpp:238:16: note: candidate function
  virtual void null_check(Register reg, int offset = -1);
               ^
/home/user/openjdk/jdk/src/hotspot/cpu/riscv/c1_MacroAssembler_riscv.hpp:109:8: note: candidate function
  void null_check(Register r, Label *Lnull = nullptr) { MacroAssembler::null_check(r); }
       ^
1 error generated.


fast fix was to change caller site to  __ null_check(obj, nullptr);",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8278479,,,,,,,,,,,riscv,,,,,,,,,linux,,,,,"0|i33b9v:",9223372036854775807,master,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2023-09-28 08:51;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/15965
Date: 2023-09-28 15:37:54 +0000;;;","2023-09-28 22:17;dukebot;Changeset: bd7bb67d
Author:    Vladimir Kempik <vkempik@openjdk.org>
Date:      2023-09-29 05:15:23 +0000
URL:       https://git.openjdk.org/jdk/commit/bd7bb67d8f2a6a6bda43b6e2443099574151a7dc
;;;",,,,,,,,,,,,,,,,,,,,,,,,,
Redundant entries in Windows `tzmappings` file,JDK-8317126,5111278,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,naoto,naoto,naoto,2023-09-27 16:17,2023-09-29 09:54,2023-10-01 09:55,2023-09-29 09:39,,,,,,,,22,core-libs,,0,noreg-cleanup,,,,,,,,,,,,,,,,,,,"Windows JDK has `lib/tzmappings` file that maps Windows time zones and Java's time zones. There are redundant entries, e.g., 
```
Mountain Standard Time (Mexico):MX:America/Mazatlan:
Mountain Standard Time (Mexico):001:America/Mazatlan: 
```
The latter line should cover all regions including `MX`, so the former line should be removed.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,generic,,,,,,,,,windows,,,,,"0|i33aez:",9223372036854775807,master,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@7644fb4c,,,,,,,,,"2023-09-28 10:53;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/15968
Date: 2023-09-28 17:37:00 +0000;;;","2023-09-29 09:39;dukebot;Changeset: 014c95a5
Author:    Naoto Sato <naoto@openjdk.org>
Date:      2023-09-29 16:36:29 +0000
URL:       https://git.openjdk.org/jdk/commit/014c95a54d6cebe8f2b6422c2a484d538cdb2261
;;;",,,,,,,,,,,,,,,,,,,,,,,,,
Remove unused imports in the java.util.stream package,JDK-8317119,5111269,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,mabbay,mabbay,mabbay,2023-09-27 10:42,2023-09-28 15:10,2023-10-01 09:55,2023-09-28 15:10,,,,,,,,22,core-libs,,0,,,,,,,,,,,,,,,,,,,,"There are unused imports in the java.util.stream package, it can be removed.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i33acz:",9223372036854775807,master,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@c356540,,,,,,,,,"2023-09-27 10:55;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/15949
Date: 2023-09-27 17:45:58 +0000;;;","2023-09-28 15:10;dukebot;Changeset: f2c221de
Author:    Mourad Abbay <mourad.abbay@oracle.com>
Committer: Paul Sandoz <psandoz@openjdk.org>
Date:      2023-09-28 22:07:12 +0000
URL:       https://git.openjdk.org/jdk/commit/f2c221def1071e3200e502d0c40ace73a1d1967a
;;;",,,,,,,,,,,,,,,,,,,,,,,,,
Remove redundant type arguments in the java.util.stream package,JDK-8316998,5111138,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,mabbay,mabbay,mabbay,2023-09-26 17:39,2023-09-29 09:21,2023-10-01 09:55,2023-09-29 08:37,,,,,,,,22,core-libs,,0,,,,,,,,,,,,,,,,,,,,"There are cases of redundant type arguments in java.util.stream package, they can be removed.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i339jv:",9223372036854775807,master,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@c356540,,,,,,,,,"2023-09-26 23:17;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/15936
Date: 2023-09-27 00:58:01 +0000;;;","2023-09-29 08:37;dukebot;Changeset: fa0697a6
Author:    Mourad Abbay <mourad.abbay@oracle.com>
Committer: Paul Sandoz <psandoz@openjdk.org>
Date:      2023-09-29 15:36:16 +0000
URL:       https://git.openjdk.org/jdk/commit/fa0697a6371a89f19af3f88136886b0b2fbe4817
;;;",,,,,,,,,,,,,,,,,,,,,,,,,
ListFormat creation is unsuccessful for some of the supported Locales ,JDK-8316974,5111112,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,naoto,kganapureddy,kganapureddy,2023-09-26 10:17,2023-09-28 09:09,2023-10-01 09:55,2023-09-28 09:07,22,,,,,,,22,core-libs,,0,conformance,,,,,,,,,,,,,,,,,,,"As part of conformance test development for https://bugs.openjdk.org/browse/JDK-8295240 
Observed that, creating ListFormat throws IllegalArgumentException for some of the Locales obtained from ListFormat:: getAvailableLocales().

Expected that, creation of ListFormat (ListFormat.getInstance(locale, ListFormat.Type, ListFormat.Style)) shall be successful for all the Locale’s obtained from getAvailableLocales().

The sample code snippet is attached.
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8295240,,,,,,,"2023-09-26 10:20;kganapureddy;ListFormat_GetInstance.java;https://bugs.openjdk.org/secure/attachment/106593/ListFormat_GetInstance.java",,,,,,,,,,,,,,,,,,,,,,"0|i339e3:",9223372036854775807,master,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6fc9e792,,,,,,,,,"2023-09-26 14:54;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/15935
Date: 2023-09-26 21:49:11 +0000;;;","2023-09-28 09:07;dukebot;Changeset: 3481a485
Author:    Naoto Sato <naoto@openjdk.org>
Date:      2023-09-28 16:04:46 +0000
URL:       https://git.openjdk.org/jdk/commit/3481a485716a1949706a4dcb94181b07e88e804d
;;;",,,,,,,,,,,,,,,,,,,,,,,,,
jtreg failure handler pages are mislabelling the jcmd/thread/dump_to_file results.,JDK-8316946,5111085,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,jpai,kevinw,kevinw,2023-09-26 04:12,2023-09-27 22:45,2023-10-01 09:55,2023-09-27 22:45,,,,,,,,22,infrastructure,,0,noreg-other,,,,,,,,,,,,,,,,,,,"jtreg failure handler pages are labelling jcmd/thread/dump_to_file results with the wrong PID.  The right files are actually there if you manually change the link.

e.g.
11904
  common
    jcmd
      thread
        dump_to_file

iteration_0
----------------------------------------
[...] [...\windows-x64-debug.jdk\jdk-22\fastdebug\bin\jcmd.exe, 11904, Thread.dump_to_file, -format=json, JavaThread.dump.11904.0] timeout=20000
----------------------------------------
11904:
Created .....\testoutput\test-support\jtreg_open_test_jdk_jdk_jdi\scratch\4\JavaThread.dump.11904.0
----------------------------------------
[...] exit code: 0 time: 583 ms
----------------------------------------
JavaThread.dump.11888.5


If we expand pid 11904, it says it's creating JavaThread.dump.11904.0 (which it does!), but always links to JavaThread.dump.11888.5

11888 was an earlier Java process which had artifacts gathered.

",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8308475,,,,,,,,,,,,,,,,,,,,,,,,,"0|i33983:",9223372036854775807,master,,,,,,,,,,,"2023-09-27 00:19;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/15939
Date: 2023-09-27 07:11:59 +0000;;;","2023-09-27 22:45;dukebot;Changeset: 42924ed4
Author:    Jaikiran Pai <jpai@openjdk.org>
Date:      2023-09-28 05:42:26 +0000
URL:       https://git.openjdk.org/jdk/commit/42924ed4e59a9f93e165047bd91f829ba1e86c78
;;;",,,,,,,,,,,,,,,,,,,,,,,,,
RISC-V: compiler/vectorapi/VectorCastShape128Test.java fails when using RVV,JDK-8316933,5111070,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,gcao,gcao,gcao,2023-09-25 23:09,2023-09-28 08:39,2023-10-01 09:55,2023-09-27 00:20,22,,,,,,,22,hotspot,,0,c2,jdk21u-fix-request,jdk21u-fix-yes,oraclejdk-na,oracle-triage-22,,,,,,,,,,,,,,,"Hi, we are experiencing test failures in test/hotspot/jtreg/compiler/vectorapi/VectorCastShape128Test.java using latest qemu:

```
zifeihan@plct-c8:~/qemu-master-riscv64/bin$ ./qemu-riscv64 -version
qemu-riscv64 version 8.1.50
Copyright (c) 2003-2023 Fabrice Bellard and the QEMU Project developers
```
By the way, using a lower version of qemu (qemu-riscv64 version 7.0.91) no such problems were encountered. we infer that version 8.1.50 of qemu adds better checks.

```
/home/zifeihan/jtreg/bin/jtreg -J-Djavatest.maxOutputSize=500000 -Djdk.lang.Process.launchMechanism=vfork -v:default -concurrency:48 -timeout:50 -javaoption:-XX:+UnlockExperimentalVMOptions -javaoption:-XX:+UseRVV -jdk:/home/zifeihan/jdk/build/linux-riscv64-server-fastdebug/jdk -compilejdk:/home/zifeihan/jdk-rvv/build/linux-x86_64-server-release/jdk /home/zifeihan/jdk/test/hotspot/jtreg/compiler/vectorapi/VectorCastShape128Test.java
```

```
----------System.out:(21/1314)----------
For random generator using seed: 262884223316435826
To re-run test with same seed value please add ""-Djdk.test.lib.random.seed=262884223316435826"" to command line.
#
# A fatal error has been detected by the Java Runtime Environment:
#
#  SIGILL (0x4) at pc=0x00002aaab582605a, pid=1865891, tid=1868167
#
# JRE version: OpenJDK Runtime Environment (22.0) (fastdebug build 22-internal-adhoc.zifeihan.jdk)
# Java VM: OpenJDK 64-Bit Server VM (fastdebug 22-internal-adhoc.zifeihan.jdk, mixed mode, compressed oops, compressed class ptrs, g1 gc, linux-riscv64)
# Problematic frame:
# J 2181% c2 compiler.vectorapi.VectorCastShape128Test.testFloatToByte()V (111 bytes) @ 0x00002aaab582605a [0x00002aaab5825f40+0x000000000000011a]
#
# Core dump will be written. Default location: Core dumps may be processed with ""/usr/share/apport/apport -p%p -s%s -c%c -d%d -P%P -u%u -g%g -- %E"" (or dumping to /home/zifeihan/jdk/build/linux-riscv64-server-fastdebug/jdk/bin/JTwork/scratch/0/core.1865891)
#
# An error report file with more information is saved as:
# /home/zifeihan/jdk/build/linux-riscv64-server-fastdebug/jdk/bin/JTwork/scratch/0/hs_err_pid1865891.log
[49.618s][warning][os] Loading hsdis library failed
#
# If you would like to submit a bug report, please visit:
#   https://bugreport.java.com/bugreport/crash.jsp
#
----------System.err:(1/22)----------
```
1. SEW setting is not accurate

https://github.com/openjdk/jdk/blob/e2e8e8e210ea9a7a9d901a1da729551714015d04/src/hotspot/cpu/riscv/c2_MacroAssembler_riscv.cpp#L2195-L2207

The reason for the error reported for the vcvtFtoX_narrow node is because the vmfeq_vv directive is used here, but when the macro is called, the vsetvli type is set to T_SHORT, not T_FLOAT, so an exception occurs here. 

For vcvtFtoL, vcvtDtoX_narrow nodes, there was also the problem of inaccurate setting of both SEW, which is also changed here.

2. Register usage constraints
For the vcvtStoX_fp_extend node, the operands of the vfwcvt_f_f_v instruction inside, the same register cannot be used here[1], so that has also been modified.

[1] https://github.com/riscv/riscv-v-spec/blob/v1.0/v-spec.adoc#sec-vec-operands

",,,,,,,,,,,,JDK-8317258,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,riscv,,,,,,,,,linux,,,,,"0|i3394r:",9223372036854775807,b17,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2023-09-25 23:27;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/15911
Date: 2023-09-26 06:19:21 +0000;;;","2023-09-26 02:16;chagedorn;ILW = SIGILL with experimental RVV option, edge case?, use -XX:-UseRVV = MLM = P4;;;","2023-09-27 00:20;dukebot;Changeset: e39197ec
Author:    Gui Cao <gcao@openjdk.org>
Committer: Fei Yang <fyang@openjdk.org>
Date:      2023-09-27 07:18:42 +0000
URL:       https://git.openjdk.org/jdk/commit/e39197ec62ca9363d9862d1ae1fca5b1b0286d59
;;;","2023-09-27 00:31;gcao;Fix Request (21u):
Hi, This issue also exists in the JDK21U, so i would like to backport this to jdk21u make vector api work correctly using latest qemu. see jbs issue for exception information.
`test/hotspot/jtreg/compiler/vectorapi/VectorCastShape128Test.java` passed with fastdebug and using latest qemu.;;;","2023-09-27 00:35;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk21u/pull/206
Date: 2023-09-27 07:28:24 +0000;;;",,,,,,,,,,,,,,,,,,,,,,
java/lang/Thread/virtual/stress/ParkALot.java times out,JDK-8316924,5111059,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,alanb,msheppar,msheppar,2023-09-25 16:03,2023-09-29 01:13,2023-10-01 09:55,2023-09-27 05:56,22,,,,,,,22,core-libs,,0,amazon-interest,noreg-self,sbr,,,,,,,,,,,,,,,,,"Inconsistent execution behaviour leads to a jtreg test timeout.

In some instances the test is marked as passed BUT test has not terminated gracefully with threads remain executing and have not completed their task execution

Other instances the test is stuck in the startup iteration and the test is moribund
 extract below
----------messages:(8/289)----------
command: main ParkALot 500000
reason: User specified action: run main/othervm ParkALot 500000 
started: Thu Sep 21 15:32:04 UTC 2023
Mode: othervm [/othervm specified]
Timeout information:
--- Timeout information end.
finished: Thu Sep 21 15:40:50 UTC 2023
elapsed time (seconds): 525.827
----------configuration:(0/0)----------
----------System.out:(33/1499)----------
2023-09-21T15:32:04.411187696Z 1 threads ...
2023-09-21T15:32:06.243404694Z 2 threads ...
2023-09-21T15:32:08.334409048Z 3 threads ...
2023-09-21T15:32:10.797923912Z 4 threads ...
2023-09-21T15:32:13.861938532Z 5 threads ...
2023-09-21T15:32:17.809720497Z 6 threads ...
2023-09-21T15:32:23.305455821Z 7 threads ...
2023-09-21T15:32:30.054651730Z 8 threads ...
2023-09-21T15:32:38.691064971Z 9 threads ...
2023-09-21T15:32:48.688304398Z 10 threads ...
2023-09-21T15:32:58.963760433Z 11 threads ...
2023-09-21T15:33:07.805807140Z 12 threads ...
2023-09-21T15:33:16.660177008Z 13 threads ...
2023-09-21T15:33:27.716685491Z 14 threads ...
2023-09-21T15:33:39.170794058Z 15 threads ...
2023-09-21T15:33:53.489750556Z 16 threads ...
2023-09-21T15:34:11.380673436Z 17 threads ...
2023-09-21T15:34:30.943381201Z 18 threads ...
2023-09-21T15:34:50.278798259Z 19 threads ...
2023-09-21T15:35:10.190032985Z 20 threads ...
2023-09-21T15:35:31.109356765Z 21 threads ...
2023-09-21T15:35:51.139607996Z 22 threads ...
2023-09-21T15:36:11.584651552Z 23 threads ...
2023-09-21T15:36:32.447378200Z 24 threads ...
2023-09-21T15:36:54.518852830Z 25 threads ...
2023-09-21T15:37:17.470204912Z 26 threads ...
2023-09-21T15:37:42.300813763Z 27 threads ...
2023-09-21T15:38:08.437603958Z 28 threads ...
2023-09-21T15:38:35.754687548Z 29 threads ...
2023-09-21T15:39:04.156057341Z 30 threads ...
2023-09-21T15:39:32.658074312Z 31 threads ...
2023-09-21T15:40:02.006672023Z 32 threads ...
Timeout signalled after 480 seconds
----------System.err:(0/0)----------
----------rerun:(36/5799)*----------

test result: Error. Program `/opt/mach5/mesos/work_dir/jib-master/install/jdk-22+16-1247/linux-x64.jdk/jdk-22/bin/java' timed out (timeout set to 480000ms, elapsed time including timeout handling was 525822ms).


""MainThread"" #34 [2683474] prio=5 os_prio=0 cpu=97.56ms elapsed=490.64s allocated=983K defined_classes=48 tid=0x00007f4e804350d0 nid=2683474 waiting on condition  [0x00007f4e55887000]
   java.lang.Thread.State: TIMED_WAITING (parking)
	at jdk.internal.misc.Unsafe.park(java.base@22-ea/Native Method)
	- parking to wait for  <0x00000000d1400ab8> (a java.util.concurrent.CountDownLatch$Sync)
	at java.util.concurrent.locks.LockSupport.parkNanos(java.base@22-ea/LockSupport.java:269)
	at java.util.concurrent.locks.AbstractQueuedSynchronizer.acquire(java.base@22-ea/AbstractQueuedSynchronizer.java:756)
	at java.util.concurrent.locks.AbstractQueuedSynchronizer.tryAcquireSharedNanos(java.base@22-ea/AbstractQueuedSynchronizer.java:1126)
	at java.util.concurrent.CountDownLatch.await(java.base@22-ea/CountDownLatch.java:276)
	at java.util.concurrent.ThreadPerTaskExecutor.awaitTermination(java.base@22-ea/ThreadPerTaskExecutor.java:181)
	at java.util.concurrent.ThreadPerTaskExecutor.awaitTermination(java.base@22-ea/ThreadPerTaskExecutor.java:195)
	at java.util.concurrent.ThreadPerTaskExecutor.close(java.base@22-ea/ThreadPerTaskExecutor.java:212)
	at ParkALot.main(ParkALot.java:61)
	at java.lang.invoke.LambdaForm$DMH/0x00007f4e07002000.invokeStatic(java.base@22-ea/LambdaForm$DMH)
	at java.lang.invoke.LambdaForm$MH/0x00007f4e07003400.invoke(java.base@22-ea/LambdaForm$MH)
	at java.lang.invoke.Invokers$Holder.invokeExact_MT(java.base@22-ea/Invokers$Holder)
	at jdk.internal.reflect.DirectMethodHandleAccessor.invokeImpl(java.base@22-ea/DirectMethodHandleAccessor.java:154)
	at jdk.internal.reflect.DirectMethodHandleAccessor.invoke(java.base@22-ea/DirectMethodHandleAccessor.java:103)
	at java.lang.reflect.Method.invoke(java.base@22-ea/Method.java:580)
	at com.sun.javatest.regtest.agent.MainWrapper$MainTask.run(MainWrapper.java:138)
	at java.lang.Thread.runWith(java.base@22-ea/Thread.java:1583)
	at java.lang.Thread.run(java.base@22-ea/Thread.java:1570)

 ....

""VirtualThread-unparker"" #38 [2683510] daemon prio=5 os_prio=0 cpu=17832.85ms elapsed=490.59s allocated=56657K defined_classes=0 tid=0x00007f4dc8002440 nid=2683510 waiting on condition  [0x00007f4e55584000]
   java.lang.Thread.State: TIMED_WAITING (parking)
	at jdk.internal.misc.Unsafe.park(java.base@22-ea/Native Method)
	- parking to wait for  <0x00000000d0003048> (a java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject)
	at java.util.concurrent.locks.LockSupport.parkNanos(java.base@22-ea/LockSupport.java:269)
	at java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject.awaitNanos(java.base@22-ea/AbstractQueuedSynchronizer.java:1758)
	at java.util.concurrent.ScheduledThreadPoolExecutor$DelayedWorkQueue.take(java.base@22-ea/ScheduledThreadPoolExecutor.java:1182)
	at java.util.concurrent.ScheduledThreadPoolExecutor$DelayedWorkQueue.take(java.base@22-ea/ScheduledThreadPoolExecutor.java:899)
	at java.util.concurrent.ThreadPoolExecutor.getTask(java.base@22-ea/ThreadPoolExecutor.java:1070)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(java.base@22-ea/ThreadPoolExecutor.java:1130)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(java.base@22-ea/ThreadPoolExecutor.java:642)
	at java.lang.Thread.runWith(java.base@22-ea/Thread.java:1583)
	at java.lang.Thread.run(java.base@22-ea/Thread.java:1570)
	at jdk.internal.misc.InnocuousThread.run(java.base@22-ea/InnocuousThread.java:186)

....

""Thread-527"" #1175 [2813272] prio=5 os_prio=0 cpu=12953.29ms elapsed=13.03s allocated=4399K defined_classes=0 tid=0x00007f4dd005f1f0 nid=2813272 runnable  [0x00007f4cb98d6000]
   java.lang.Thread.State: RUNNABLE
	at java.lang.System$2.unparkVirtualThread(java.base@22-ea/System.java:2657)
	at jdk.internal.misc.VirtualThreads.unpark(java.base@22-ea/VirtualThreads.java:93)
	at java.util.concurrent.locks.LockSupport.unpark(java.base@22-ea/LockSupport.java:179)
	at ParkALot.parkALot(ParkALot.java:88)
	at ParkALot.lambda$main$0(ParkALot.java:59)
	at ParkALot$$Lambda/0x00007f4e07001200.run(Unknown Source)
	at java.util.concurrent.Executors$RunnableAdapter.call(java.base@22-ea/Executors.java:572)
	at java.util.concurrent.FutureTask.run(java.base@22-ea/FutureTask.java:317)
	at java.lang.Thread.runWith(java.base@22-ea/Thread.java:1583)
	at java.lang.Thread.run(java.base@22-ea/Thread.java:1570)

   Locked ownable synchronizers:
	- None

""Thread-528"" #1177 [2813273] prio=5 os_prio=0 cpu=12952.30ms elapsed=13.03s allocated=4425K defined_classes=0 tid=0x00007f4dd0060200 nid=2813273 runnable  [0x00007f4cb8ecc000]
   java.lang.Thread.State: RUNNABLE
	at java.lang.System$2.unparkVirtualThread(java.base@22-ea/System.java:2657)
	at jdk.internal.misc.VirtualThreads.unpark(java.base@22-ea/VirtualThreads.java:93)
	at java.util.concurrent.locks.LockSupport.unpark(java.base@22-ea/LockSupport.java:179)
	at ParkALot.parkALot(ParkALot.java:88)
	at ParkALot.lambda$main$0(ParkALot.java:59)
	at ParkALot$$Lambda/0x00007f4e07001200.run(Unknown Source)
	at java.util.concurrent.Executors$RunnableAdapter.call(java.base@22-ea/Executors.java:572)
	at java.util.concurrent.FutureTask.run(java.base@22-ea/FutureTask.java:317)
	at java.lang.Thread.runWith(java.base@22-ea/Thread.java:1583)
	at java.lang.Thread.run(java.base@22-ea/Thread.java:1570)


",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i3392b:",9223372036854775807,b17,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4c088d55,,,,,,,,,"2023-09-25 23:12;alanb;This is a stress test that interleaves untimed and timed parking. Like the the other stress tests in this directory, a race condition or other bug would likely hang, crash, or cause other failures. The test runs from to 1 up to ncpus/2, so 1..32 on this test host. Note that the close method waits for threads to terminate, if a thread is not unparked then the main thread will block indefinitely in close (waiting for the threads started in the executer to terminate) and the test will timeout. The issue here doesn't seem to be a hang or bug, it's just that it the test slows down at each iteration. In the output, testing with 30 threads took 34s, testing with 31 threads took 35s, the testing with 32 threads didn't finish before the test timed out.;;;","2023-09-26 05:00;alanb;[~msheppar] The TEST.properties in the stress directly ensures that they don't run concurrently. On your analysis, then test N, there are N virtual threads spinning parking and N platform thread spinning unparking. This is why it only pushes concurrency to nprocs/2. I'll dial down this test to avoid it taking too long on these big systems. I'll also dial down the number of iterations for debug builds as they are really slow when running with -XX:+VerifyContinuations.;;;","2023-09-27 00:55;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/15940
Date: 2023-09-27 07:47:19 +0000;;;","2023-09-27 05:56;dukebot;Changeset: b24ad7cf
Author:    Alan Bateman <alanb@openjdk.org>
Date:      2023-09-27 12:54:29 +0000
URL:       https://git.openjdk.org/jdk/commit/b24ad7cf5710c698f5946e10d44785f24431f966
;;;","2023-09-28 04:56;msheppar;I had a few comments/questions, but lgtm got in before I could make them.

The test is classified as a stress test and a certain amount of ""stress"" was observed on the SBR runs. For stress typically you are looking at pushing the bounds or limits  of normal operation, to create extreme conditions, to see what are the side effects. Alternatively, incrementally increasing the operational load, creating intense conditions to challenge the operational stability of a system, to establish some measure of maximum capacity or capability.

It can be observed on Windows SBR that at iteration 23 i.e. activating 23 threads with 500,000 park/unpark operations the test exceeds its allotted execution time.  This is taking in the region of 12minutes  On the linux SBR system the successful execution takes just under 8 minutes and all time timeout conditions are just beyond 8 minutes. Thus, this would suggest extending the jtreg timeout, or reduce the number of iterations seems in order. In this instance the change has opted for a reduction in number operations. :+1

However, the reduction in the max number of threads to 4, seems questionable, and would contradicts the stress goals of the test. So what is the current purpose of this test. What are its expected failure criteria?

Then there is the change of spinOnWait to yield. The latter is good citizen behaviour, but why do anything? Why not just loop again to possibly force the OS to bump the thread on its time slice? Again create extreme conditions for instability.

Based on the dial back changes, what is the current objective of the test and what are its success and failure criteria ?





;;;","2023-09-28 05:39;alanb;> Based on the dial back changes, what is the current objective of the test and what are its success and failure criteria ? 

The stress tests in this directory mostly bash on parking, timed-parking, parking while pinned, and hence stress the freeze and thaw code.  Success is the tests completely successfully. Failure would be a crash, assert, or hang/timeout. These tests run in tier1 so their execution time has to be limited for the default configuration (release builds). Debug builds with -XX:+VerifyContinuations is important for anyone touching the continuation or virtual thread implementation.;;;",,,,,,,,,,,,,,,,,,,,,
tools/jpackage/junit tests fail on AIX after JDK-8316547,JDK-8316897,5111029,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,mbaesken,mbaesken,mbaesken,2023-09-25 06:25,2023-09-27 18:21,2023-10-01 09:55,2023-09-26 23:45,22,,,,,,,22,tools,,0,oraclejdk-na,,,,,,,,,,,,,,,,,,,"The tools/jpackage/junit tests fail on AIX after JDK-8316547.
Looks like the build-step does not work nicely.
This might be related to different jtreg behavior on Linux vs. AIX.
We do not see the issue on other platforms.

error is for example :
TEST: tools/jpackage/junit/jdk.jpackage/jdk/jpackage/internal/CompareDottedVersionTest.java
TEST RESULT: Error. can't find jdk.jpackage.jdk.jpackage.internal.AppImageFileTest in test directory or libraries

Seems the build - commands found in jtr file differ on AIX vs. Linux, see
AIX :

#section:build
----------messages:(3/691)----------
command: build jdk.jpackage.jdk.jpackage.internal.AppImageFileTest jdk.jpackage.jdk.jpackage.internal.ApplicationLayoutTest jdk.jpackage.jdk.jpackage.internal.CompareDottedVersionTest jdk.jpackage.jdk.jpackage.internal.DeployParamsTest jdk.jpackage.jdk.jpackage.internal.DottedVersionTest jdk.jpackage.jdk.jpackage.internal.EnquoterTest jdk.jpackage.jdk.jpackage.internal.InvalidDottedVersionTest jdk.jpackage.jdk.jpackage.internal.OverridableResourceTest jdk.jpackage.jdk.jpackage.internal.PathGroupTest jdk.jpackage.jdk.jpackage.internal.PlatformVersionTest jdk.jpackage.jdk.jpackage.internal.ToolValidatorTest
reason: Named class compiled on demand
started: Mon Sep 25 12:31:58 CEST 2023
result: Not run. Test running...

test result: Error. can't find jdk.jpackage.jdk.jpackage.internal.AppImageFileTest in test directory or libraries


Linux (works nicely) :

#section:build
----------messages:(5/177)----------
command: build jdk.jpackage/*
reason: Named class compiled on demand
started: Mon Sep 25 13:18:59 CEST 2023
finished: Mon Sep 25 13:18:59 CEST 2023
elapsed time (seconds): 0.01
result: Passed. All files up to date


Linux uses command: build jdk.jpackage/* while AIX has something different (and wrong). Maybe it is a jtreg issue ?
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8316547,,,,,,,,,,,generic,,,,,,,,,aix,,,,,"0|i338vn:",9223372036854775807,b17,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@3656b41f,,,,,,,,,"2023-09-25 12:21;cstein;What's the version of jtreg you use on AIX, 7.3.1+1?
Can you attach the entire .jtr file from the run on AIX, please?

Except for code handling low level differences for Cygwin or WSL and setting enviroment variables, there's no platform-specific code in jtreg when generating the build command.;;;","2023-09-26 00:55;mbaesken;Hi [~cstein]  the difference is that AIX uses listClasses  vs.  Linux uses listModules ; this leads to the different build/compile call .
Why listClasses on AIX  vs. listModules on Linux ?  Because  ""jdk.jpackage""  is found as a system module on Linux but not on AIX.
We use  jtreg 7.3.1+1 on all platforms.;;;","2023-09-26 02:33;cstein;Adding module `jdk.jpackage` as a system module on AIX is out of scope, right?;;;","2023-09-26 02:49;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/15916
Date: 2023-09-26 09:40:11 +0000;;;","2023-09-26 04:52;mbaesken;> Adding module `jdk.jpackage` as a system module on AIX is out of scope, right?

Maybe mid/long term but not in the next time.;;;","2023-09-26 23:45;dukebot;Changeset: b659e034
Author:    Matthias Baesken <mbaesken@openjdk.org>
Date:      2023-09-27 06:43:50 +0000
URL:       https://git.openjdk.org/jdk/commit/b659e0343a3273867560e75a38b12e6223b301e7
;;;",,,,,,,,,,,,,,,,,,,,,
"make test  TEST=""jtreg:test/jdk/...""  fails on AIX",JDK-8316894,5111025,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,mbaesken,mbaesken,mbaesken,2023-09-25 06:07,2023-09-28 08:57,2023-10-01 09:55,2023-09-28 08:55,21,22,,,,,,22,infrastructure,,0,build-infra,,,,,,,,,,,,,,,,,,,"Running  jtreg tests with  make test, for example
make test  TEST=""jtreg:test/jdk/java/util/prefs""  fails currently on AIX without setting the number of JOBS manually.
We get  this error message:
Error: Bad use of -concurrency

Log of cmdargs  shows :
-vmoption:-Xmx768m
-agentvm
-verbose:fail,error,summary
-retain:fail,error
-concurrency:7.000000
....

So currently a float is used for the concurrency value, seems this is not supported.
Seems the  number of test jobs auto calculation  https://github.com/openjdk/jdk/blob/master/make/RunTests.gmk#L151
is not doing so well on AIX.
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,generic,,,,,,,,,aix,,,,,"0|i338ur:",9223372036854775807,master,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@429c566,,,,,,,,,"2023-09-26 04:16;ihse;I think it boils down to: What does this print on AIX: `printf ""%.0f"", c`? I have some highly specific opinions on what I believe would be correct behavior, but I encourage you to test (and perhaps check POSIX specifications)

;;;","2023-09-26 07:31;mbaesken;could we use  `printf ""%d"", c;`   ? This works with both  nawk and gawk on AIX .
Currently configure picks up unfortunately gawk on AIX and there the  `printf ""%.0f"", c`   syntax seems not to work nicely but leads to 7.000000  which makes the make test fail.
 ;;;","2023-09-27 00:15;ihse;Ah, I misunderstood things. I looked to sloppy at the code, and thought we called the printf command. I did not realize it was part of an awk script.

I assume the reason this output format was chosen as a way to convert fractional numbers to integers, since we're doing divisions in the calculation. Maybe there is another way of achieving this.;;;","2023-09-27 00:23;ihse;You must be using an ancient gawk. This is what I get:

$ gawk 'BEGIN {printf ""%.0f\n"", 7}'
7
$ gawk --version | head -1
GNU Awk 5.2.2, API 3.2, (GNU MPFR 4.2.0-p12, GNU MP 6.2.1)
;;;","2023-09-27 00:24;ihse;But yeah, using %d seems to work as well. In theory, it can change the result somewhat since it does floor instead of round, so 7.9 would be printed as 7, instead of 8 (with %f). But I doubt that matters much; this is just a heuristic, and I don't think the original author gave that edge case much thought.;;;","2023-09-27 00:31;mbaesken;Hi [~ihse] thanks for looking into this - so if you think %d is okay too, I would prepare a PR doing just that - is that fine with you?;;;","2023-09-27 00:34;ihse;Yes, go ahead! :);;;","2023-09-27 01:29;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/15941
Date: 2023-09-27 08:18:45 +0000;;;","2023-09-27 10:05;erikj;As the original author, the intention was definitely to get proper rounding rather than floor. Can we maybe spend a bit more time trying to come up with a solution that both works for everyone and does the right thing?;;;","2023-09-28 08:55;dukebot;Changeset: 29348b3c
Author:    Matthias Baesken <mbaesken@openjdk.org>
Date:      2023-09-28 15:53:03 +0000
URL:       https://git.openjdk.org/jdk/commit/29348b3cf65951e1aacd52c517b6b0d29449a78e
;;;",,,,,,,,,,,,,,,,,
Skip failing IconifyTestcanIconifyDecoratedStage on Linux,JDK-8316892,5111023,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,lkostyra,kcr,kcr,2023-09-25 05:55,2023-09-30 05:54,2023-10-01 09:55,2023-09-29 04:05,jfx21,,,,,,,jfx22,javafx,,0,testbug,,,,,,,,,,,,,,,,,,,We are setting intermittent failures in IconifyTestcanIconifyDecoratedStage on Linux. See JDK-8316891. We should consider skipping the failing test until JDK-8316891 is fixed.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8316891,,,,,,,,,,,,,,,,,,,,,,,,linux,,,,,"0|i338ub:",9223372036854775807,master,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4f591050,,,,,,,,,"2023-09-28 03:42;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jfx/pull/1250
Date: 2023-09-28 10:37:28 +0000;;;","2023-09-29 04:05;dukebot;Changeset: 1733d2ea
Author:    Lukasz Kostyra <lkostyra@openjdk.org>
Date:      2023-09-29 11:01:52 +0000
URL:       https://git.openjdk.org/jfx/commit/1733d2ea6c2be087aaf26509d5ebcb70601d1412
;;;",,,,,,,,,,,,,,,,,,,,,,,,,
RegionMatches1Tests fails if CompactStrings are disabled after JDK-8302163,JDK-8316879,5111011,Bug,Resolved,JDK,JDK,software,duke,,,P2,Fixed,avoitylov,avoitylov,avoitylov,2023-09-25 04:16,2023-09-29 09:13,2023-10-01 09:55,2023-09-28 11:14,21,22,,,,,,22,core-libs,,0,amazon-interest,conformance,jdk21u-fix-request,tck-exclude-21,tck-red-22,,,,,,,,,,,,,,,"After changes for JDK-8302163, if two UTF-16 strings come to compare with length that is close to Integer.MIN_VALUE, attempt to divide the length by UTF-16 symbol size will overflow the int type and cause wrong value of length to be passed to the next comparison step.
This bug causes JCK test RegionMatches1Tests to fail on ARM32 platform where CompactStrings are disabled by default. This test also fails on other platforms with -XX:-CompactStrings.

s2.regionMatches(8,s3,2,Integer.MIN_VALUE+1) = false",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JCK-7319768,JDK-8302163,,"2023-09-25 04:51;avoitylov;a.patch;https://bugs.openjdk.org/secure/attachment/106563/a.patch",,,,,,,,,,,,,,,,,,,,,,"0|i338rn:",9223372036854775807,master,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4c088d55,,,,,,,,,"2023-09-25 04:16;avoitylov;According to language specification, false should be returned if:

There is some nonnegative integer k less than len such that: this.charAt(toffset + k) != other.charAt(ooffset + k)
For negative length, this condition will never be satisfied, so it's safe to return true immediately if len is negative.;;;","2023-09-25 04:51;avoitylov;Tentative fix being tested now attached.;;;","2023-09-25 09:01;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/15906
Date: 2023-09-25 15:52:12 +0000;;;","2023-09-28 11:14;dukebot;Changeset: cfcbfc6c
Author:    Aleksei Voitylov <avoitylov@openjdk.org>
Committer: Roger Riggs <rriggs@openjdk.org>
Date:      2023-09-28 18:11:40 +0000
URL:       https://git.openjdk.org/jdk/commit/cfcbfc6cae7d8fc276c5a54917e97adea7cf5621
;;;","2023-09-29 08:35;roboduke;[jdk21u-fix-request] Approval Request from voitylov
allows java.lang.String.RegionMatches1Tests to pass.;;;","2023-09-29 09:13;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk21u/pull/216
Date: 2023-09-29 15:23:00 +0000;;;",,,,,,,,,,,,,,,,,,,,,
Exclude 3D subscene perspective camera picking tests,JDK-8316807,5110937,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,jdv,jdv,jdv,2023-09-24 21:59,2023-09-29 06:41,2023-10-01 09:55,2023-09-29 06:36,jfx22,,,,,,,jfx22,javafx,,0,noreg-self,sn_153,,,,,,,,,,,,,,,,,,"When we subscene not just ParallelCamera but even Perspective Camera test fail.

These tests fail because of AssertionFailedError or  TimeoutExpiredException:

test test.scenegraph.fx3d.picking.MeshPickingTests.distanceTest(): failure
junit.framework.AssertionFailedError: Expected 2200.9616080250016, but was 1007.6537180435971
	at junit.framework.Assert.fail(Assert.java:57)
	at junit.framework.Assert.assertTrue(Assert.java:22)
	at test.scenegraph.fx3d.picking.MeshPickingTests.distanceTest(MeshPickingTests.java:108)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:577)
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:59)
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:56)
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
	at org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:299)
	at org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:293)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.lang.Thread.run(Thread.java:833)


Or

test test.scenegraph.fx3d.picking.PickingTestOverall.fillTest(): failure
org.jemmy.TimeoutExpiredException: State 'test.scenegraph.fx3d.picking.PickingTestFunctions$1@5c3ed7b3' has not been reached in 1000 milliseconds
	at org.jemmy.timing.Waiter.ensureValue(Waiter.java:93)
	at test.scenegraph.fx3d.picking.PickingTestFunctions.click(PickingTestFunctions.java:53)
	at test.scenegraph.fx3d.picking.PickingTestOverall.fillTest(PickingTestOverall.java:134)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:577)
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:59)
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:56)
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
	at org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:299)
	at org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:293)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.lang.Thread.run(Thread.java:833)
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8317309,JDK-8123900,,,,,,,,,,generic,,,,,,,,,generic,,,,,"0|i338b7:",9223372036854775807,inapplicable,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4143e3f7,,,,,,,,,"2023-09-26 08:20;jdv;Commented out all the tests except PickingTestOverall.pickResultTest().
Added debug logs and what i see is we are getting MouseEvent for the case where we try to click on point using PickingTestOverall.getNotNullClickPoint().
But when are not getting MouseEvent_CLICKED when we clock on the point fetched using getNullClickPoint().

We are drawing subscene with border, so removed borders to make sure that bounds of scene as well as subscene are same(so that it matches non-subscene tests). Even with this change we are not getting any mouse events when we use getNullClickPoint(). Overrode values in getNullClickPoint() and what i see that when we add hit Point (475, 475) which is well under (500, 500) view width and height we dont get any mouse events. This can be a product bug.

When we dont use subscene we get appropriate mouse events at both getNullClickPoint() & getNotNullClickPoint().;;;","2023-09-28 05:44;jdv;More observations:
Looks like is it intended behaviour of subscene to not capture mouse events when not clicked on any rendered object. This is captured in the bug https://bugs.openjdk.org/browse/JDK-8123900 : ""SubScene has null fill and so cannot be clikced by default, which is intended. Setting fill makes it clickable, this is also intended. However, the cylinder should be clickable and the event should bubble up to the SubScene, this is a duplicate of RT-31255. ""

We can make any area in SubScene to catch mouse event by setting subscene.setPickOnBounds(true), but this causes PickResult.getIntersectedPoint() to be not NULL at places where nothing is drawn and this causes some test to continue to fail.

Failure of these Jemmy JavaFX SubScene picking tests are also captured at same bug : https://bugs.openjdk.org/browse/JDK-8123900.
We should not run current picking tests using SubScene.;;;","2023-09-29 04:14;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jfx-tests/pull/13
Date: 2023-09-29 11:03:56 +0000;;;","2023-09-29 06:36;roboduke;Changeset: 780824d1
Author:    Jayathirth D V <jdv@openjdk.org>
Committer: Ajit Ghaisas <aghaisas@openjdk.org>
Date:      2023-09-29 13:26:31 +0000
URL:       https://git.openjdk.org/jfx-tests/commit/780824d15bd3629854528164727fcbe41202e784
;;;",,,,,,,,,,,,,,,,,,,,,,,
[premain] unresolved classes may be encountered by compiler,JDK-8316802,5110929,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,iklam,iklam,iklam,2023-09-24 17:51,2023-09-28 11:16,2023-10-01 09:55,2023-09-28 11:13,repo-leyden,,,,,,,repo-leyden,hotspot,,0,cds,leyden,premain,,,,,,,,,,,,,,,,,"When -XX:+ArchiveInvokeDynamic is enabled, some classes in java.base may have a pre-resolved invokehandle or invokedynamic constant pool entry whose class (a LambdaForm or Lambda Proxy) is not yet loaded. This can happen between the window of 

  ClassPrelinker::init_javabase_preloaded_classes(CHECK_JNI_ERR);

and

  initialize_jsr292_core_classes(CHECK_JNI_ERR);

in https://github.com/openjdk/leyden/blob/cddf20a5baee9b55805700547d5148560e4d7f1f/src/hotspot/share/runtime/threads.cpp#L736-L747

=======================
The proper fix would be to do this first:

- Load all the preloaded classes in java.base (including all archived LambdaForm classes, and the Lambda Proxy classes that belong to java.base)
- Of the above classes, initialize all the ones that were dump-time initialized

The above should be done very quickly with just a few thousand bytecodes.

We then start the compiler and replay the training data -- which will cause some of the methods in the above classes to be eagerly compiled (either with the JIT or loaded from the AOT cache).",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i3389f:",9223372036854775807,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,,,"2023-09-28 11:13;iklam;Fixed in

https://github.com/openjdk/leyden/tree/premain
->
https://github.com/openjdk/leyden/commit/c8f40024d70a0827fe0ba21ef43806a7b46fd984;;;",,,,,,,,,,,,,,,,,,,,,,,,,,
"Legal, Monarch paper sizes are incorrect in javafx.print.Paper",JDK-8316781,5110893,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,jhendrikx,jhendrikx,jhendrikx,2023-09-22 23:06,2023-09-30 05:54,2023-10-01 09:55,2023-09-25 10:31,8,jfx11,,,,,,jfx22,javafx,,0,,,,,,,,,,,,,,,,,,,,"The sizes should be 8.5 wide for legal, and 3.875 wide for monarch.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i3381f:",9223372036854775807,b11,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4143e3f7,,,,,,,,,"2023-09-23 12:39;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jfx/pull/1248
Date: 2023-09-23 06:24:26 +0000;;;","2023-09-25 10:31;dukebot;Changeset: 5d1254fb
Author:    John Hendrikx <jhendrikx@openjdk.org>
Date:      2023-09-25 17:29:16 +0000
URL:       https://git.openjdk.org/jfx/commit/5d1254fb1a126ac3d6baff5c5a303ed750d083fa
;;;",,,,,,,,,,,,,,,,,,,,,,,,,
GenShen: Serviceability needs to know about ShenandoahGenerationalHeap,JDK-8316755,5110863,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,wkemper,wkemper,wkemper,2023-09-22 09:14,2023-09-25 11:47,2023-10-01 09:55,2023-09-25 11:47,repo-shenandoah,,,,,,,,hotspot,,0,amazon-interest,gc,gc-shenandoah,genshen,genshen-isolation,,,,,,,,,,,,,,,We recently added a class derived from `ShenandoahHeap` and it broke some serviceability functionality.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i337ur:",9223372036854775807,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6b00f96c,,,,,,,,,"2023-09-22 13:52;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/shenandoah/pull/329
Date: 2023-09-22 20:45:26 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,,,
SEGV in LoaderConstraintTable::find_loader_constraint after JDK-8310874,JDK-8316711,5110814,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,coleenp,dholmes,dholmes,2023-09-21 23:42,2023-09-27 18:20,2023-10-01 09:55,2023-09-22 14:59,22,,,,,,,22,hotspot,,0,classloading,tier5,tier6,tier8,,,,,,,,,,,,,,,,"#
# A fatal error has been detected by the Java Runtime Environment:
#
#  SIGSEGV (0xb) at pc=0x0000ffffb1291060, pid=1698473, tid=1699797
#
# JRE version: Java(TM) SE Runtime Environment (22.0+17) (fastdebug build 22-ea+17-1272)
# Java VM: Java HotSpot(TM) 64-Bit Server VM (fastdebug 22-ea+17-1272, mixed mode, sharing, tiered, compressed oops, compressed class ptrs, serial gc, linux-aarch64)
# Problematic frame:
# V  [libjvm.so+0x111c060]  LoaderConstraintTable::find_loader_constraint(Symbol*, ClassLoaderData*)+0x40
#

---------------  T H R E A D  ---------------

Current thread (0x0000ffff583001e0):  JavaThread ""Loading Thread #1""        [_thread_in_vm, id=1699797, stack(0x0000ffffad9ab000,0x0000ffffadba9000) (2040K)]

Stack: [0x0000ffffad9ab000,0x0000ffffadba9000],  sp=0x0000ffffadba3f90,  free space=2019k
Native frames: (J=compiled Java code, j=interpreted, Vv=VM code, C=native code)
V  [libjvm.so+0x111c060]  LoaderConstraintTable::find_loader_constraint(Symbol*, ClassLoaderData*)+0x40  (symbol.hpp:160)
V  [libjvm.so+0x111d144]  LoaderConstraintTable::remove_failed_loaded_klass(InstanceKlass*, ClassLoaderData*)+0x20  (loaderConstraints.cpp:452)
V  [libjvm.so+0x15d37c0]  SystemDictionary::find_or_define_instance_class(Symbol*, Handle, InstanceKlass*, JavaThread*)+0xb0  (systemDictionary.cpp:1532)
V  [libjvm.so+0x15d3a0c]  SystemDictionary::resolve_class_from_stream(ClassFileStream*, Symbol*, Handle, ClassLoadInfo const&, JavaThread*)+0xfc  (systemDictionary.cpp:902)
V  [libjvm.so+0xee0d5c]  jvm_define_class_common(char const*, _jobject*, signed char const*, int, _jobject*, char const*, JavaThread*)+0x1fc  (jvm.cpp:912)
V  [libjvm.so+0xee0f98]  JVM_DefineClassWithSource+0xa4  (jvm.cpp:1079)
C  [libjava.so+0xf27c]  Java_java_lang_ClassLoader_defineClass1+0x1bc  (ClassLoader.c:139)
J 582  java.lang.ClassLoader.defineClass1(Ljava/lang/ClassLoader;Ljava/lang/String;[BIILjava/security/ProtectionDomain;Ljava/lang/String;)Ljava/lang/Class; java.base@22-ea (0 bytes) @ 0x0000ffff986333c4 [0x0000ffff986332c0+0x0000000000000104]

[error occurred during error reporting (printing native stack (with source info)), id 0xe0000000, Internal Error (/opt/mach5/mesos/work_dir/slaves/cd627e65-f015-4fb1-a1d2-b6c9b8127f98-S182938/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/90b5fced-8df5-4b60-a116-547d3d5b81b0/runs/81fa2877-3037-401a-a571-f3cf8c380b3e/workspace/open/src/hotspot/share/code/codeCache.inline.hpp:49)]",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8316744,,JDK-8316744,JDK-8310874,,,,,,,,,,,,,,,,,,,,,22,,,,,,,"0|i337jv:",9223372036854775807,b17,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,,,"2023-09-22 05:29;coleenp;The problem is that we hit a safepoint while taking out the SystemDictionary_lock, deallocated the InstanceKlass, then tried to remove it from the loader constraint table.  This code is in the wrong order.;;;","2023-09-22 09:58;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/15891
Date: 2023-09-22 16:51:42 +0000;;;","2023-09-22 14:59;dukebot;Changeset: 68a9c810
Author:    Coleen Phillimore <coleenp@openjdk.org>
Date:      2023-09-22 21:58:01 +0000
URL:       https://git.openjdk.org/jdk/commit/68a9c81040affe165341ec7dcd2c07932c8a7188
;;;","2023-09-22 16:24;dcubed;The fix for this bug is integrated in jdk-22+17-1299.;;;",,,,,,,,,,,,,,,,,,,,,,,
TestDynamicConstant.java fails with release VMs,JDK-8316699,5110804,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,jiefu,jiefu,jiefu,2023-09-21 16:49,2023-09-27 18:19,2023-10-01 09:55,2023-09-21 19:16,22,,,,,,,22,hotspot,,0,jvmci,noreg-self,oracle-triage-22,tencent-interest,tier4,tier6,tier8,,,,,,,,,,,,,"
STDERR:
Error: VM option 'UseBootstrapCallInfo' is diagnostic and must be enabled via -XX:+UnlockDiagnosticVMOptions.
Error: The unlock option must precede 'UseBootstrapCallInfo'.
Error: Could not create the Java Virtual Machine.
Error: A fatal exception has occurred. Program will exit.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8316700,,JDK-8315771,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i337hn:",9223372036854775807,b17,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2023-09-21 17:03;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/15877
Date: 2023-09-21 23:56:37 +0000;;;","2023-09-21 19:16;dukebot;Changeset: 775e22a8
Author:    Jie Fu <jiefu@openjdk.org>
Date:      2023-09-22 02:14:52 +0000
URL:       https://git.openjdk.org/jdk/commit/775e22a8a68b3bcedabc673b1d612dee8028d5d0
;;;","2023-09-21 23:33;thartmann;ILW = Test bug, single test with release VM, no workaround = MLH = P4;;;","2023-09-22 07:45;dcubed;The fix for this bug is integrated in jdk-22+17-1281.

[~dnsimon] - This particular test didn't fail until Tier4 and also failed in Tier6.
For some tests, we don't see 'release' bits related failures until Tier6. It depends
on the task definitions for the various test suites.;;;","2023-09-22 08:01;dnsimon;Thanks for the info. We're used to pre-merge testing on release bits in GraalVM so made the false assumption something similar is done in JDK testing.
Maybe it's worth doing testing on release bits on a single platform in tier1, at least on GitHub.;;;",,,,,,,,,,,,,,,,,,,,,,
build failure caused by JDK-8316456,JDK-8316698,5110803,Bug,Resolved,JDK,JDK,software,duke,,,P1,Fixed,mchung,mchung,mchung,2023-09-21 16:28,2023-09-27 18:19,2023-10-01 09:55,2023-09-21 17:12,22,,,,,,,22,hotspot,,0,,,,,,,,,,,,,,,,,,,,src/hotspot/share/prims/stackwalk.cpp:523:24: error: too many arguments for format [-Werror=format-extra-args],,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8316456,,,,,,,,,,,,,,,,,,,,,,,,,"0|i337hf:",9223372036854775807,b17,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,,,"2023-09-21 16:40;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/15876
Date: 2023-09-21 23:34:27 +0000;;;","2023-09-21 17:12;dukebot;Changeset: a1e03463
Author:    Mandy Chung <mchung@openjdk.org>
Date:      2023-09-22 00:10:06 +0000
URL:       https://git.openjdk.org/jdk/commit/a1e03463accfe830eef0aa53a806d0d5ba873b24
;;;",,,,,,,,,,,,,,,,,,,,,,,,,
Widen allowable error bound of Math.hypot,JDK-8316688,5110788,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,darcy,darcy,darcy,2023-09-21 10:30,2023-09-27 18:20,2023-10-01 09:55,2023-09-22 09:38,22,,,,,,,22,core-libs,,0,noreg-doc,,,,,,,,,,,,,,,,,,,"The Math.hypot method claims its error bound is one ulp.

The paper

""Accuracy of Mathematical Functions in Single, Double, Double
Extended, and Quadruple Precision""
Brian Gladman, Vincenzo Innocente and Paul Zimmermann
September 21, 2023
https://members.loria.fr/PZimmermann/papers/accuracy.pdf

lists a known worst-case error of 1.21 ulps for hypot for the ""OpenLibm"" math library, which is a derivative of FDLIBM.

The specification of Math.hypot should be updated to acknowledge the wider error bound.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8316690,,,,,,,,,JDK-8229259,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i337e3:",9223372036854775807,b17,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4c088d55,,,,,,,,,"2023-09-21 12:26;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/15868
Date: 2023-09-21 19:19:34 +0000;;;","2023-09-22 09:38;dukebot;Changeset: b66ded9a
Author:    Joe Darcy <darcy@openjdk.org>
Date:      2023-09-22 16:35:55 +0000
URL:       https://git.openjdk.org/jdk/commit/b66ded9a5b699e4936db25b58944587432e64f46
;;;",,,,,,,,,,,,,,,,,,,,,,,,,
sun/security/ssl/SSLSocketImpl/SSLSocketCloseHang.java test fails intermittent with Read timed out,JDK-8316671,5110763,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,mbaesken,mbaesken,mbaesken,2023-09-21 05:50,2023-09-27 18:21,2023-10-01 09:55,2023-09-26 07:03,21,22,,,,,,22,core-libs,,0,amazon-interest,jdk21u-fix-request,,,,,,,,,,,,,,,,,,"We sometimes run into the following error. This especially occurs when running with fastdebug binaries and on Linux ppc64le machines.
Current timeout set in the test is 1 second.

Server accepting: 315357614990101
Server accepted: 315359219006041
Client starting handshake: 315359228098300
java.net.SocketTimeoutException: Read timed out
	at java.base/sun.nio.ch.NioSocketImpl.timedRead(NioSocketImpl.java:278)
	at java.base/sun.nio.ch.NioSocketImpl.implRead(NioSocketImpl.java:304)
	at java.base/sun.nio.ch.NioSocketImpl.read(NioSocketImpl.java:346)
	at java.base/sun.nio.ch.NioSocketImpl$1.read(NioSocketImpl.java:796)
	at java.base/java.net.Socket$SocketInputStream.read(Socket.java:1096)
	at java.base/sun.security.ssl.SSLSocketInputRecord.read(SSLSocketInputRecord.java:489)
	at java.base/sun.security.ssl.SSLSocketInputRecord.readHeader(SSLSocketInputRecord.java:483)
	at java.base/sun.security.ssl.SSLSocketInputRecord.decode(SSLSocketInputRecord.java:160)
	at java.base/sun.security.ssl.SSLTransport.decode(SSLTransport.java:111)
	at java.base/sun.security.ssl.SSLSocketImpl.decode(SSLSocketImpl.java:1507)
	at java.base/sun.security.ssl.SSLSocketImpl.readHandshakeRecord(SSLSocketImpl.java:1422)
	at java.base/sun.security.ssl.SSLSocketImpl.startHandshake(SSLSocketImpl.java:455)
	at java.base/sun.security.ssl.SSLSocketImpl.startHandshake(SSLSocketImpl.java:426)
	at SSLSocketCloseHang.doClientSide(SSLSocketCloseHang.java:149)
	at SSLSocketCloseHang.startClient(SSLSocketCloseHang.java:320)
	at SSLSocketCloseHang.<init>(SSLSocketCloseHang.java:246)
	at SSLSocketCloseHang.main(SSLSocketCloseHang.java:232)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
	at java.base/java.lang.reflect.Method.invoke(Method.java:580)
	at com.sun.javatest.regtest.agent.MainWrapper$MainTask.run(MainWrapper.java:138)
	at java.base/java.lang.Thread.run(Thread.java:1570)",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,generic,,,,,,,,,linux,,,,,"0|i3378j:",9223372036854775807,b17,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@674604a9,,,,,,,,,"2023-09-26 00:29;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/15912
Date: 2023-09-26 07:23:20 +0000;;;","2023-09-26 07:03;dukebot;Changeset: 1f7dfda7
Author:    Matthias Baesken <mbaesken@openjdk.org>
Date:      2023-09-26 14:01:45 +0000
URL:       https://git.openjdk.org/jdk/commit/1f7dfda7059f9dc14bff61b3c77d769ade85557d
;;;","2023-09-27 03:39;mbaesken;jdk21u backport request
I would like to have the patch in jdk21u as well, because the issue was observed there too. The patch is clean and low risk.;;;","2023-09-27 03:45;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk21u/pull/207
Date: 2023-09-27 10:36:39 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,
CompilerThread leaks CodeBlob memory when dynamically stopping compiler thread in non-product,JDK-8316661,5110749,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,tschatzl,tschatzl,tschatzl,2023-09-21 03:57,2023-09-29 01:12,2023-10-01 09:55,2023-09-27 08:18,11-pool,17,21,22,,,,22,hotspot,,0,amazon-interest,memory-leak,oracle-triage-22,,,,,,,,,,,,,,,,,"CodeBlob::flush() is not called when a compiler thread is stopped due to dynamic compiler thread policy (and during shutdown of the compiler runtime).

This leaks memory (asm_strings and dbg_strings allocated memory) in non-product builds.
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8198756,,,,,,,,,,,,,,,,,,11,,,,,,,"0|i3375f:",9223372036854775807,b17,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2023-09-21 05:21;thartmann;[~tschatzl], I assume this is about the CompilerThread::_buffer_blob, right?

ILW = Memory leak when compiler thread is stopped (release build is not affected), in debug builds when compiler threads are stopped, -XX:-UseDynamicNumberOfCompilerThreads = MMM = P3;;;","2023-09-21 05:23;tschatzl;Yes. I un-confused the title a bit.;;;","2023-09-21 09:03;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/15858
Date: 2023-09-21 11:18:36 +0000;;;","2023-09-27 08:18;dukebot;Changeset: edcc559f
Author:    Thomas Schatzl <tschatzl@openjdk.org>
Date:      2023-09-27 15:14:57 +0000
URL:       https://git.openjdk.org/jdk/commit/edcc559f09364da3692862e1f3d0636aa8eec1d4
;;;",,,,,,,,,,,,,,,,,,,,,,,
"assert(LockingMode != LM_LIGHTWEIGHT || flag == CCR0) failed: bad condition register",JDK-8316659,5110747,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,mdoerr,mdoerr,mdoerr,2023-09-21 03:33,2023-09-27 18:19,2023-10-01 09:55,2023-09-21 05:08,21,22,,,,,,22,hotspot,,0,amazon-interest,lilliput,oraclejdk-na,oracle-triage-22,,,,,,,,,,,,,,,,"We're running into the assertion (macroAssembler_ppc.cpp:2183) since JDK-8315880. The native wrapper doesn't use the correct ConditionRegister for the new locking mode:
V  [libjvm.so+0x14c65bc]  MacroAssembler::compiler_fast_lock_object(ConditionRegister, Register, Register, Register, Register, Register)+0x44c  (macroAssembler_ppc.cpp:2183)
V  [libjvm.so+0x18c4220]  SharedRuntime::generate_native_wrapper(MacroAssembler*, methodHandle const&, int, BasicType*, VMRegPair*, BasicType)+0x29f0  (sharedRuntime_ppc.cpp:2408)
V  [libjvm.so+0x18a1360]  AdapterHandlerLibrary::create_native_wrapper(methodHandle const&)+0x6e0  (sharedRuntime.cpp:3095)
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8308469,,,,,,,,,,,ppc,,,,,,,,,,,,,,"0|i3374z:",9223372036854775807,b17,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2023-09-21 03:50;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/15857
Date: 2023-09-21 10:41:56 +0000;;;","2023-09-21 05:01;mdoerr;Workaround: Use another LockingMode.;;;","2023-09-21 05:08;dukebot;Changeset: 6a4b6655
Author:    Martin Doerr <mdoerr@openjdk.org>
Date:      2023-09-21 12:06:27 +0000
URL:       https://git.openjdk.org/jdk/commit/6a4b6655507582ff685a999c21e7fd3992a39816
;;;",,,,,,,,,,,,,,,,,,,,,,,,
serviceability/jvmti/RedefineClasses/RedefineLeakThrowable.java	fails intermittently,JDK-8316658,5110746,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,jpbempel,chagedorn,chagedorn,2023-09-21 03:15,2023-09-27 19:47,2023-10-01 09:55,2023-09-27 19:46,22,,,,,,,22,hotspot,,0,intermittent,problemlist,tier2,tier5,tier6,tier7,,,,,,,,,,,,,,The test serviceability/jvmti/RedefineClasses/RedefineLeakThrowable.java fails intermittently (8 out of 200 runs). This was first observed in a personal run in tier2. The test was added recently with JDK-8308762.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8308762,,,,,,,,,,,,,,,,,,,,,,,,,"0|i3374r:",9223372036854775807,master,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@661b156a,,,,,,,,,"2023-09-21 03:27;chagedorn;[~jpbempel] since you added the test, you might want to have a look at it.;;;","2023-09-21 05:06;jpbempel;I will look into that, thanks for notifying me!;;;","2023-09-21 05:24;chagedorn;Thanks Jean-Philippe! I've assigned it to you.;;;","2023-09-21 08:29;dcubed;Bumping from P4 -> P2 since this is labeled as a regression.;;;","2023-09-21 08:42;dcubed;It turns out that this is a new test so it should not be
labeled as a regression. I've lowered the priority from
P2 -> P3 (since we're seeing Tier2 failures).;;;","2023-09-21 08:47;dcubed;The fix for ""JDK-8308762 Metaspace leak with Instrumentation.retransform"" was
integrated in jdk-22+16-1249. There were 4 Tier2s including jdk-22+16-1249-tier2
without any failures. The first CI failure occurred in jdk-22+17-1258-tier2.;;;","2023-09-21 12:32;coleenp;The test is getting OOM metaspace.

java.lang.OutOfMemoryError
	at java.instrument/sun.instrument.InstrumentationImpl.redefineClasses0(Native Method)
	at java.instrument/sun.instrument.InstrumentationImpl.redefineClasses(InstrumentationImpl.java:251)
	at RedefineClassHelper.redefineClass(RedefineClassHelper.java:61)
	at RedefineClassHelper.redefineClass(RedefineClassHelper.java:51)
	at RedefineLeakThrowable.main(RedefineLeakThrowable.java:64)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
	at java.base/java.lang.reflect.Method.invoke(Method.java:580)
	at com.sun.javatest.regtest.agent.MainWrapper$MainTask.run(MainWrapper.java:138)
	at java.base/java.lang.Thread.run(Thread.java:1570)

JavaTest Message: Test threw exception: java.lang.OutOfMemoryError;;;","2023-09-21 15:43;dholmes;Very strange that this would be intermittent. If the tier2 test is run the same way each time then it really should either pass or fail each time.;;;","2023-09-21 18:58;dholmes;I tested this locally and found that it fails with OOME every time for me. Turning on exception logging I was surprised/disturbed to find many, many exceptions being thrown as part of the execution of the in-memory javac compiler used for the retransformation. It seems in part there is a locale/environment issue that might cause failed class loading which in turn chews up metaspace, which may explain why some systems pass and others fail. Here is a snippet of the start of the log:

[0.667s][info][exceptions] Exception <a 'java/lang/ClassNotFoundException'{0x00000004545d3938}: com.sun.tools.javac.resources.spi.compilerProvider>
 thrown in interpreter method <{method} {0x00007f52910758d8} 'loadClass' '(Ljava/lang/String;Z)Ljava/lang/Class;' in 'jdk/internal/loader/ClassLoaders$AppClassLoader'>
 at bci 36 for thread 0x00007f52d43b2e50 (MainThread)
[0.667s][info][exceptions] Exception <a 'java/lang/ClassNotFoundException'{0x00000004545d3938}: com.sun.tools.javac.resources.spi.compilerProvider>
 thrown in C1 compiled method <{method} {0x00007f52910164b0} 'loadClass' '(Ljava/lang/String;)Ljava/lang/Class;' in 'java/lang/ClassLoader'>
 at PC0x00007f52bcc0e7cc for thread 0x00007f52d43b2e50
[0.667s][info][exceptions] Thread 0x00007f52d43b2e50 continuing at PC 0x00007f52bcc0e81e for exception thrown at PC 0x00007f52bcc0e7cc
[0.667s][info][exceptions] Exception <a 'java/lang/ClassNotFoundException'{0x00000004545d3938}: com.sun.tools.javac.resources.spi.compilerProvider>
 thrown in interpreter method <{method} {0x00007f52914eb578} 'forName0' '(Ljava/lang/String;ZLjava/lang/ClassLoader;Ljava/lang/Class;)Ljava/lang/Class;' in 'java/lang/Class'>
 at bci 0 for thread 0x00007f52d43b2e50 (MainThread)
[0.667s][info][exceptions] Exception <a 'java/lang/ClassNotFoundException'{0x00000004545d3938}: com.sun.tools.javac.resources.spi.compilerProvider>
 thrown in interpreter method <{method} {0x00007f52914eb7b8} 'forName' '(Ljava/lang/String;ZLjava/lang/ClassLoader;Ljava/lang/Class;)Ljava/lang/Class;' in 'java/lang/Class'>
 at bci 37 for thread 0x00007f52d43b2e50 (MainThread)
[0.667s][info][exceptions] Exception <a 'java/lang/ClassNotFoundException'{0x00000004545d3938}: com.sun.tools.javac.resources.spi.compilerProvider>
 thrown in interpreter method <{method} {0x00007f52914eb828} 'forName' '(Ljava/lang/String;ZLjava/lang/ClassLoader;)Ljava/lang/Class;' in 'java/lang/Class'>
 at bci 20 for thread 0x00007f52d43b2e50 (MainThread)
[0.667s][info][exceptions] Exception <a 'java/lang/ClassNotFoundException'{0x00000004545d3938}: com.sun.tools.javac.resources.spi.compilerProvider>
 thrown in interpreter method <{method} {0x00007f52840bddf0} 'run' '()Ljava/lang/Class;' in 'java/util/ResourceBundle$3'>
 at bci 9 for thread 0x00007f52d43b2e50 (MainThread)
[0.667s][info][exceptions] Found matching handler for exception of type ""java.lang.ClassNotFoundException"" in method ""run"" at BCI: 29
[0.696s][info][exceptions] Exception <a 'java/lang/ClassNotFoundException'{0x00000004545e30e0}: com.sun.tools.javac.resources.compiler_en>
 thrown in interpreter method <{method} {0x00007f52910758d8} 'loadClass' '(Ljava/lang/String;Z)Ljava/lang/Class;' in 'jdk/internal/loader/ClassLoaders$AppClassLoader'>
 at bci 36 for thread 0x00007f52d43b2e50 (MainThread)
[0.696s][info][exceptions] Exception <a 'java/lang/ClassNotFoundException'{0x00000004545e30e0}: com.sun.tools.javac.resources.compiler_en>
 thrown in C1 compiled method <{method} {0x00007f52910164b0} 'loadClass' '(Ljava/lang/String;)Ljava/lang/Class;' in 'java/lang/ClassLoader'>
 at PC0x00007f52bcc0e7cc for thread 0x00007f52d43b2e50
[0.696s][info][exceptions] Exception <a 'java/lang/ClassNotFoundException'{0x00000004545e30e0}: com.sun.tools.javac.resources.compiler_en>
 thrown in interpreter method <{method} {0x00007f52914eb578} 'forName0' '(Ljava/lang/String;ZLjava/lang/ClassLoader;Ljava/lang/Class;)Ljava/lang/Class;' in 'java/lang/Class'>
 at bci 0 for thread 0x00007f52d43b2e50 (MainThread)
[0.696s][info][exceptions] Exception <a 'java/lang/ClassNotFoundException'{0x00000004545e30e0}: com.sun.tools.javac.resources.compiler_en>
 thrown in interpreter method <{method} {0x00007f52914eb7b8} 'forName' '(Ljava/lang/String;ZLjava/lang/ClassLoader;Ljava/lang/Class;)Ljava/lang/Class;' in 'java/lang/Class'>
 at bci 37 for thread 0x00007f52d43b2e50 (MainThread)
[0.696s][info][exceptions] Exception <a 'java/lang/ClassNotFoundException'{0x00000004545e30e0}: com.sun.tools.javac.resources.compiler_en>
 thrown in interpreter method <{method} {0x00007f52914eb828} 'forName' '(Ljava/lang/String;ZLjava/lang/ClassLoader;)Ljava/lang/Class;' in 'java/lang/Class'>
 at bci 20 for thread 0x00007f52d43b2e50 (MainThread)
[0.696s][info][exceptions] Exception <a 'java/lang/ClassNotFoundException'{0x00000004545e30e0}: com.sun.tools.javac.resources.compiler_en>
 thrown in interpreter method <{method} {0x00007f529132d998} 'loadResourceBundle' '(Ljava/lang/Module;Ljava/lang/Module;Ljava/lang/String;Ljava/util/Locale;)Ljava/util/ResourceBundle;' in 'java/util/ResourceBundle$ResourceBundleProviderHelper'>
 at bci 89 for thread 0x00007f52d43b2e50 (MainThread)
[0.696s][info][exceptions] Found matching handler for exception of type ""java.lang.ClassNotFoundException"" in method ""loadResourceBundle"" at BCI: 211
[0.702s][info][exceptions] Exception <a 'java/lang/ClassNotFoundException'{0x00000004545ec5d0}: com.sun.tools.javac.resources.compiler_en_US>
 thrown in interpreter method <{method} {0x00007f52910758d8} 'loadClass' '(Ljava/lang/String;Z)Ljava/lang/Class;' in 'jdk/internal/loader/ClassLoaders$AppClassLoader'>


;;;","2023-09-21 19:09;dholmes;Indeed we have now seen this fail in tier5 with product bits IIUC and there we see:

----------System.err:(73/5887)----------
java.lang.Error: java.util.ServiceConfigurationError: javax.tools.JavaCompiler: Provider com.sun.tools.javac.api.JavacTool could not be instantiated
	at java.compiler@22-ea/javax.tools.ToolProvider.getSystemTool(ToolProvider.java:125)
	at java.compiler@22-ea/javax.tools.ToolProvider.getSystemJavaCompiler(ToolProvider.java:62)
	at jdk.test.lib.compiler.InMemoryJavaCompiler.getCompiler(InMemoryJavaCompiler.java:199)
	at jdk.test.lib.compiler.InMemoryJavaCompiler.compile(InMemoryJavaCompiler.java:187)
	at RedefineClassHelper.redefineClass(RedefineClassHelper.java:50)
	at RedefineLeakThrowable.main(RedefineLeakThrowable.java:64)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
	at java.base/java.lang.reflect.Method.invoke(Method.java:580)
	at com.sun.javatest.regtest.agent.MainWrapper$MainTask.run(MainWrapper.java:138)
	at java.base/java.lang.Thread.run(Thread.java:1570)
Caused by: java.util.ServiceConfigurationError: javax.tools.JavaCompiler: Provider com.sun.tools.javac.api.JavacTool could not be instantiated
	at java.base/java.util.ServiceLoader.fail(ServiceLoader.java:582)
	at java.base/java.util.ServiceLoader$ProviderImpl.newInstance(ServiceLoader.java:809)
	at java.base/java.util.ServiceLoader$ProviderImpl.get(ServiceLoader.java:725)
	at java.base/java.util.ServiceLoader$3.next(ServiceLoader.java:1397)
	at java.compiler@22-ea/javax.tools.ToolProvider.getSystemTool(ToolProvider.java:120)
	... 9 more
Caused by: java.lang.OutOfMemoryError: Metaspace
	at java.base/java.lang.ClassLoader.defineClass0(Native Method)
	at java.base/java.lang.System$2.defineClass(System.java:2394)
	at java.base/java.lang.invoke.MethodHandles$Lookup$ClassDefiner.defineClass(MethodHandles.java:2498)
	at java.base/java.lang.invoke.InvokerBytecodeGenerator.loadMethod(InvokerBytecodeGenerator.java:249)
	at java.base/java.lang.invoke.InvokerBytecodeGenerator.generateCustomizedCode(InvokerBytecodeGenerator.java:712)
	at java.base/java.lang.invoke.LambdaForm.compileToBytecode(LambdaForm.java:849)
	at java.base/java.lang.invoke.LambdaForm.customize(LambdaForm.java:468)
	at java.base/java.lang.invoke.MethodHandle$1.apply(MethodHandle.java:1857)
	at java.base/java.lang.invoke.MethodHandle$1.apply(MethodHandle.java:1855)
	at java.base/java.lang.invoke.MethodHandle.updateForm(MethodHandle.java:1877)
	at java.base/java.lang.invoke.MethodHandle.customize(MethodHandle.java:1855)
	at java.base/java.lang.invoke.MethodHandle.maybeCustomize(MethodHandle.java:1845)
	at java.base/java.lang.invoke.Invokers.maybeCustomize(Invokers.java:632)
	at java.base/java.lang.invoke.Invokers.checkCustomized(Invokers.java:626)
	at java.base/java.lang.invoke.Invokers$Holder.invokeExact_MT(Invokers$Holder)
	at java.base/jdk.internal.reflect.DirectConstructorHandleAccessor.invokeImpl(DirectConstructorHandleAccessor.java:86)
	at java.base/jdk.internal.reflect.DirectConstructorHandleAccessor.newInstance(DirectConstructorHandleAccessor.java:62)
	at java.base/java.lang.reflect.Constructor.newInstanceWithCaller(Constructor.java:502)
	at java.base/java.lang.reflect.Constructor.newInstance(Constructor.java:486)
	at java.base/java.util.ServiceLoader$ProviderImpl.newInstance(ServiceLoader.java:785)
	at java.base/java.util.ServiceLoader$ProviderImpl.get(ServiceLoader.java:725)
	at java.base/java.util.ServiceLoader$3.next(ServiceLoader.java:1397)
	at java.compiler@22-ea/javax.tools.ToolProvider.getSystemTool(ToolProvider.java:120)
	at java.compiler@22-ea/javax.tools.ToolProvider.getSystemJavaCompiler(ToolProvider.java:62)
	at jdk.test.lib.compiler.InMemoryJavaCompiler.getCompiler(InMemoryJavaCompiler.java:199)
	at jdk.test.lib.compiler.InMemoryJavaCompiler.compile(InMemoryJavaCompiler.java:187)
	at RedefineClassHelper.redefineClass(RedefineClassHelper.java:50)
	at RedefineLeakThrowable.main(RedefineLeakThrowable.java:64)
	at java.base/java.lang.invoke.LambdaForm$DMH/0x000001ce9d004000.invokeStatic(LambdaForm$DMH)
	at java.base/java.lang.invoke.LambdaForm$MH/0x000001ce9d005000.invoke(LambdaForm$MH)
	at java.base/java.lang.invoke.Invokers$Holder.invokeExact_MT(Invokers$Holder)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invokeImpl(DirectMethodHandleAccessor.java:154);;;","2023-09-21 19:28;dholmes;[~jpbempel] I increased the metaspace size to 17M and it passed for me, whilst still failing with OOM on an unpatched VM. I shall run further tests.;;;","2023-09-21 22:30;dholmes;I ran the modified test (17M) 10x on each platform* across a range of different machines and did not see any failures.

* llinux,macos,windows  x64, linux, macos, aarch64, release and fastdebug;;;","2023-09-21 23:56;jpbempel;Thanks David, I was not yet able to reproduce on my side, but glad you could have on your side.
I will open a PR to increase the Metaspace to 24M and increase the number of iterations for the loop to 1000
;;;","2023-09-22 00:21;mbaesken;We saw the test fail as well in our test infra, 2 times on AIX, 2 times on Linux.
Example from AIX:
--------------------------------
java.lang.OutOfMemoryError: Metaspace
	at java.base/java.text.MessageFormat.subformat(MessageFormat.java:1320)
	at java.base/java.text.MessageFormat.format(MessageFormat.java:912)
	at java.base/java.text.Format.format(Format.java:160)
	at java.base/java.text.MessageFormat.format(MessageFormat.java:884)
	at jdk.compiler/com.sun.tools.javac.util.JavacMessages.getLocalizedString(JavacMessages.java:232)
	at jdk.compiler/com.sun.tools.javac.util.JavacMessages.getLocalizedString(JavacMessages.java:168)
	at jdk.compiler/com.sun.tools.javac.util.JavacMessages.getLocalizedString(JavacMessages.java:157)
	at jdk.compiler/com.sun.tools.javac.util.Log.localize(Log.java:805)
	at jdk.compiler/com.sun.tools.javac.util.Log.printLines(Log.java:594)
	at jdk.compiler/com.sun.tools.javac.api.JavacTaskImpl.invocationHelper(JavacTaskImpl.java:180)
	at jdk.compiler/com.sun.tools.javac.api.JavacTaskImpl.doCall(JavacTaskImpl.java:100)
	at jdk.compiler/com.sun.tools.javac.api.JavacTaskImpl.call(JavacTaskImpl.java:94)
	at jdk.test.lib.compiler.InMemoryJavaCompiler.compile(InMemoryJavaCompiler.java:188)
	at RedefineClassHelper.redefineClass(RedefineClassHelper.java:50)
	at RedefineLeakThrowable.main(RedefineLeakThrowable.java:64)
	at java.base/java.lang.invoke.LambdaForm$DMH/0x00000006e00c4400.invokeStatic(LambdaForm$DMH)
	at java.base/java.lang.invoke.LambdaForm$MH/0x00000006e00c6000.invoke(LambdaForm$MH)
	at java.base/java.lang.invoke.LambdaForm$MH/0x00000006e00c6400.invokeExact_MT(LambdaForm$MH)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invokeImpl(DirectMethodHandleAccessor.java:154)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
	at java.base/java.lang.reflect.Method.invoke(Method.java:580)
	at com.sun.javatest.regtest.agent.MainWrapper$MainTask.run(MainWrapper.java:138)
	at java.base/java.lang.Thread.runWith(Thread.java:1583)
	at java.base/java.lang.Thread.run(Thread.java:1570)

example from Linux :
java.lang.Error: java.util.ServiceConfigurationError: javax.tools.JavaCompiler: Provider com.sun.tools.javac.api.JavacTool could not be instantiated
	at java.compiler@22-internal/javax.tools.ToolProvider.getSystemTool(ToolProvider.java:125)
	at java.compiler@22-internal/javax.tools.ToolProvider.getSystemJavaCompiler(ToolProvider.java:62)
	at jdk.test.lib.compiler.InMemoryJavaCompiler.getCompiler(InMemoryJavaCompiler.java:199)
	at jdk.test.lib.compiler.InMemoryJavaCompiler.compile(InMemoryJavaCompiler.java:187)
	at RedefineClassHelper.redefineClass(RedefineClassHelper.java:50)
	at RedefineLeakThrowable.main(RedefineLeakThrowable.java:64)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
	at java.base/java.lang.reflect.Method.invoke(Method.java:580)
	at com.sun.javatest.regtest.agent.MainWrapper$MainTask.run(MainWrapper.java:138)
	at java.base/java.lang.Thread.run(Thread.java:1570)
Caused by: java.util.ServiceConfigurationError: javax.tools.JavaCompiler: Provider com.sun.tools.javac.api.JavacTool could not be instantiated
	at java.base/java.util.ServiceLoader.fail(ServiceLoader.java:582)
	at java.base/java.util.ServiceLoader$ProviderImpl.newInstance(ServiceLoader.java:809)
	at java.base/java.util.ServiceLoader$ProviderImpl.get(ServiceLoader.java:725)
	at java.base/java.util.ServiceLoader$3.next(ServiceLoader.java:1397)
	at java.compiler@22-internal/javax.tools.ToolProvider.getSystemTool(ToolProvider.java:120)
	... 9 more
Caused by: java.lang.OutOfMemoryError: Metaspace
	at java.base/java.lang.ClassLoader.defineClass0(Native Method)
	at java.base/java.lang.System$2.defineClass(System.java:2394)
	at java.base/java.lang.invoke.MethodHandles$Lookup$ClassDefiner.defineClass(MethodHandles.java:2498)
	at java.base/java.lang.invoke.InvokerBytecodeGenerator.loadMethod(InvokerBytecodeGenerator.java:249)
	at java.base/java.lang.invoke.InvokerBytecodeGenerator.generateCustomizedCode(InvokerBytecodeGenerator.java:712)
	at java.base/java.lang.invoke.LambdaForm.compileToBytecode(LambdaForm.java:849)
	at java.base/java.lang.invoke.LambdaForm.customize(LambdaForm.java:468)
	at java.base/java.lang.invoke.MethodHandle$1.apply(MethodHandle.java:1857)
	at java.base/java.lang.invoke.MethodHandle$1.apply(MethodHandle.java:1855)
	at java.base/java.lang.invoke.MethodHandle.updateForm(MethodHandle.java:1877)
	at java.base/java.lang.invoke.MethodHandle.customize(MethodHandle.java:1855)
	at java.base/java.lang.invoke.MethodHandle.maybeCustomize(MethodHandle.java:1845)
	at java.base/java.lang.invoke.Invokers.maybeCustomize(Invokers.java:632)
	at java.base/java.lang.invoke.Invokers.checkCustomized(Invokers.java:626)
	at java.base/java.lang.invoke.Invokers$Holder.invokeExact_MT(Invokers$Holder)
	at java.base/jdk.internal.reflect.DirectConstructorHandleAccessor.invokeImpl(DirectConstructorHandleAccessor.java:86)
	at java.base/jdk.internal.reflect.DirectConstructorHandleAccessor.newInstance(DirectConstructorHandleAccessor.java:62)
	at java.base/java.lang.reflect.Constructor.newInstanceWithCaller(Constructor.java:502)
	at java.base/java.lang.reflect.Constructor.newInstance(Constructor.java:486)
	at java.base/java.util.ServiceLoader$ProviderImpl.newInstance(ServiceLoader.java:785)
	at java.base/java.util.ServiceLoader$ProviderImpl.get(ServiceLoader.java:725)
	at java.base/java.util.ServiceLoader$3.next(ServiceLoader.java:1397)
	at java.compiler@22-internal/javax.tools.ToolProvider.getSystemTool(ToolProvider.java:120)
	at java.compiler@22-internal/javax.tools.ToolProvider.getSystemJavaCompiler(ToolProvider.java:62)
	at jdk.test.lib.compiler.InMemoryJavaCompiler.getCompiler(InMemoryJavaCompiler.java:199)
	at jdk.test.lib.compiler.InMemoryJavaCompiler.compile(InMemoryJavaCompiler.java:187)
	at RedefineClassHelper.redefineClass(RedefineClassHelper.java:50)
	at RedefineLeakThrowable.main(RedefineLeakThrowable.java:64)
	at java.base/java.lang.invoke.LambdaForm$DMH/0x0000003801003400.invokeStatic(LambdaForm$DMH)
	at java.base/java.lang.invoke.LambdaForm$MH/0x0000003801004c00.invoke(LambdaForm$MH)
	at java.base/java.lang.invoke.Invokers$Holder.invokeExact_MT(Invokers$Holder)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invokeImpl(DirectMethodHandleAccessor.java:154)
;;;","2023-09-22 05:31;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/15882
Date: 2023-09-22 08:36:10 +0000;;;","2023-09-27 19:46;dukebot;Changeset: 84390dd0
Author:    Jean-Philippe Bempel <jpbempel@openjdk.org>
Committer: David Holmes <dholmes@openjdk.org>
Date:      2023-09-28 02:43:41 +0000
URL:       https://git.openjdk.org/jdk/commit/84390dd0639e29ddb792964cca9ebf79e29cfcad
;;;",,,,,,,,,,,
jrt-fs.jar classes not reproducible between standard and bootcycle builds,JDK-8316648,5110741,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,aleonard,aleonard,aleonard,2023-09-21 01:21,2023-09-27 18:20,2023-10-01 09:55,2023-09-25 01:37,17,21,22,,,,,22,infrastructure,,0,build-infra,,,,,,,,,,,,,,,,,,,"jrt-fs.jar classes are currently compiled with the BootJDK being used, this has a couple of issues:
- The classes are not reproducible between a standard and bootcycle build image, since the first is compiled by jdk-N-1 and the later jdk-N
- The jrt-fs classes in a standard product image are compiled by the BootJDK (typically jdk-N-1), which means from a ""secure dev"" perspective they are not compiled with the latest and greatest compiler with all the latest vulnerability fixes.

The only requirement on the jrt-fs classes is they are built jdk-8 compatible, so there is no reason they cannot be compiled with the jdk-N ""interim"" compiler as part of the standard build.
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i3373n:",9223372036854775807,b17,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@429c566,,,,,,,,,"2023-09-22 05:45;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/15888
Date: 2023-09-22 12:38:03 +0000;;;","2023-09-25 01:37;dukebot;Changeset: 0f0c5b2d
Author:    Andrew Leonard <aleonard@openjdk.org>
Date:      2023-09-25 08:35:53 +0000
URL:       https://git.openjdk.org/jdk/commit/0f0c5b2d71e6dec442a5105ba305043cb59b99fc
;;;",,,,,,,,,,,,,,,,,,,,,,,,,
j.text.DateFormatSymbols setZoneStrings() exception is unhelpful,JDK-8316629,5110717,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,jlu,jlu,jlu,2023-09-20 14:40,2023-09-27 18:19,2023-10-01 09:55,2023-09-21 14:33,17,21,22,,,,,22,core-libs,,0,amazon-interest,noreg-trivial,starter,,,,,,,,,,,,,,,,,"setZoneStrings() takes a multi dimensional array of String as input. If any of the rows have a length less than 5, an IllegalArgumentException is thrown.
Currently, the exception is thrown without any indication of what went wrong",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,generic,,,,,,,,,generic,,,,,"0|i336yb:",9223372036854775807,b17,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6fc9e792,,,,,,,,,"2023-09-20 15:18;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/15849
Date: 2023-09-20 22:10:16 +0000;;;","2023-09-21 14:33;dukebot;Changeset: ef49e6c0
Author:    Justin Lu <jlu@openjdk.org>
Date:      2023-09-21 21:31:37 +0000
URL:       https://git.openjdk.org/jdk/commit/ef49e6c0d7e4e3a2d7d3d8dcb1edf195b23ce12c
;;;",,,,,,,,,,,,,,,,,,,,,,,,,
JViewport Test headless failure,JDK-8316627,5110715,Bug,Resolved,JDK,JDK,software,duke,,,P2,Fixed,dnguyen,dnguyen,dnguyen,2023-09-20 14:01,2023-09-25 11:28,2023-10-01 09:55,2023-09-20 15:13,22,,,,,,,22,client-libs,,0,regression,regression_8316149,sn_152,test_sprint,,,,,,,,,,,,,,,,"The following test failed in the JDK22 CI:

javax/swing/JViewport/bug4546474.java

test result: Failed. Execution failed: `main' threw exception: java.awt.AWTException: headless environment",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8316149,,,,,,,,,,,,,,,,,,,,,,,,,"0|i336xv:",9223372036854775807,b16,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@568a5b31,,,,,,,,,"2023-09-20 14:06;dcubed;These failures were caused by the following fix:

JDK-8316149 Open source several Swing JTree JViewport KeyboardManager tests

so I've labeled this bug as a regression and bumped the priority to P2.;;;","2023-09-20 14:18;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/15847
Date: 2023-09-20 21:12:55 +0000;;;","2023-09-20 15:13;dukebot;Changeset: c04c9ea3
Author:    Damon Nguyen <dnguyen@openjdk.org>
Date:      2023-09-20 22:11:27 +0000
URL:       https://git.openjdk.org/jdk/commit/c04c9ea3615aad875ccb7e103e2d885b34cda7f6
;;;","2023-09-20 16:05;dcubed;The fix for this bug is integrated in jdk-22+16-1247.;;;",,,,,,,,,,,,,,,,,,,,,,,
Alpine build fails after JDK-8314021,JDK-8316595,5110680,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,mbaesken,mbaesken,mbaesken,2023-09-20 06:16,2023-09-27 18:19,2023-10-01 09:55,2023-09-21 05:26,22,,,,,,,22,hotspot,,0,,,,,,,,,,,,,,,,,,,,"JDK-8314021 causes build errors on Linux Alpine/musl (Linux ALPINE 3.17.4 gcc12.2.1):

/linuxmuslx86_64/jdk/src/hotspot/os/linux/os_linux.cpp: In static member function 'static jlong os::Linux::sendfile(int, int, jlong*, jlong)':
/linuxmuslx86_64/jdk/src/hotspot/os/linux/os_linux.cpp:4375:7: error: infinite recursion detected [-Werror=infinite-recursion]
 4375 | jlong os::Linux::sendfile(int out_fd, int in_fd, jlong* offset, jlong count) {
      | ^~
/linuxmuslx86_64/jdk/src/hotspot/os/linux/os_linux.cpp:4376:20: note: recursive call
 4376 | return sendfile64(out_fd, in_fd, (off64_t*)offset, (size_t)count);

On Alpine Linux 3.17.4 we have just this definition for sendfile64 :
sys/sendfile.h:11:ssize_t sendfile(int, int, off_t *, size_t);
sys/sendfile.h:14:#define sendfile64 sendfile

So it would be better to use ::sendfile directly.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8314021,,,,,,,,,,,,,,,generic,,,,,,,,,linux,,,,,"0|i336q3:",9223372036854775807,b17,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,,,"2023-09-20 07:57;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/15843
Date: 2023-09-20 14:46:21 +0000;;;","2023-09-21 05:26;dukebot;Changeset: 378bcd59
Author:    Matthias Baesken <mbaesken@openjdk.org>
Date:      2023-09-21 12:24:51 +0000
URL:       https://git.openjdk.org/jdk/commit/378bcd5985c6993c0239fcc49ae66ededd3b465c
;;;",,,,,,,,,,,,,,,,,,,,,,,,,
Minor startup regression in 22-b15 due JDK-8310929,JDK-8316582,5110662,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,redestad,redestad,redestad,2023-09-20 01:21,2023-09-29 12:41,2023-10-01 09:55,2023-09-21 02:38,,,,,,,,22,core-libs,,0,,,,,,,,,,,,,,,,,,,,"The changes for JDK-8310929 uses ByteArrayLittleEndian, which in turn initializes a slew of VarHandles. This adds up to a ~1.5ms regression on a classpath-based Hello World program. 

We could either back out the use of ByteArrayLittleEndian - this would only partially revert the performance improvement from JDK-8310929 - or we could resolve some of the start-up regression by refactoring ByteArrayLittleEndian to create VHs lazily.

While the VH initialization doesn't currently happen very early, having a dependency on the VarHandle machinery from Integer.toString is risky and may surprisingly prohibit its use from code executed during very early bootstrap. The safest option might thus be to revert the use of ByteArrayLittleEndian introduced by JDK-8310929",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8317329,,,,,,,,,,,,,,,,,,,,,,,,,"0|i336m3:",9223372036854775807,b17,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4c088d55,,,,,,,,,"2023-09-21 02:38;dukebot;Changeset: 913e43fe
Author:    Claes Redestad <redestad@openjdk.org>
Date:      2023-09-21 09:36:28 +0000
URL:       https://git.openjdk.org/jdk/commit/913e43fea995b746fb9e1b25587d254396c7c3c9
;;;","2023-09-21 02:42;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/15836
Date: 2023-09-20 09:12:48 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,,
HttpClient with StructuredTaskScope does not close when a task fails,JDK-8316580,5110645,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,dfuchs,webbuggrp,webbuggrp,2023-09-19 23:28,2023-09-29 01:53,2023-10-01 09:55,2023-09-28 06:34,21,22,,,,,,22,core-libs,,0,amazon-interest,httpclient,webbug,,,,,,,,,,,,,,,,,"ADDITIONAL SYSTEM INFORMATION :
MacBook Pro 2019 - 2,4 GHz 8-Core Intel Core i9
macOs Ventura 13.5.2 (22G91) - latest
JDK 21 x64 from https://www.oracle.com/java/technologies/downloads/#jdk21-mac - latest GA 20.9.2023
OpenJDK 21 build 35 from https://jdk.java.net/21/

A DESCRIPTION OF THE PROBLEM :
I created a simple Http GET performance testing tool using HttpClient with StructuredTaskScope.

When the tool sends over 65 concurrent requests without delay to a localhost port which does not have anything listening, HttpClient is not able to release locks and the program does not exit. With low amount of requests this happens randomly and increasing request count makes the issue happen always. If there is something responding from the port, the tool exists normally.

If I check the thread dump, the main thread is stuck on
jdk.internal.net.http.HttpClientFacade.close

""main"" #1 [10243] prio=5 os_prio=31 cpu=401.70ms elapsed=4.47s tid=0x00007fdde1809c00 nid=10243 in Object.wait()  [0x000070000eec7000]
   java.lang.Thread.State: TIMED_WAITING (on object monitor)
	at java.lang.Object.wait0(java.base@21/Native Method)
	- waiting on <0x000000043f656430> (a jdk.internal.net.http.HttpClientImpl$SelectorManager)
	at java.lang.Object.wait(java.base@21/Object.java:366)
	at java.lang.Thread.join(java.base@21/Thread.java:2072)
	- locked <0x000000043f656430> (a jdk.internal.net.http.HttpClientImpl$SelectorManager)
	at java.lang.Thread.join(java.base@21/Thread.java:2200)
	at jdk.internal.net.http.HttpClientImpl.awaitTermination(java.net.http@21/HttpClientImpl.java:628)
	at java.net.http.HttpClient.close(java.net.http@21/HttpClient.java:900)
	at jdk.internal.net.http.HttpClientFacade.close(java.net.http@21/HttpClientFacade.java:192)
	at test.examples.HttpGetBurstBugWithStructuredScope.runBurst(HttpGetBurstBugWithStructuredScope.java:24)
	at test.examples.HttpGetBurstBugWithStructuredScope.main(HttpGetBurstBugWithStructuredScope.java:15)

If I use CountdownLatch to manage exiting, the program does not get stuck.

STEPS TO FOLLOW TO REPRODUCE THE PROBLEM :
Run the HttpGetBurstBugWithStructuredScope. Adjust requestCount to test for the threshold where error happens or does not happen. Ensure that using an url with a working server exists the tool normally.

EXPECTED VERSUS ACTUAL BEHAVIOR :
EXPECTED -
HttpClient should be able to close normally.
ACTUAL -
HttpGetBurstBugWithStructuredScope does not exit. main thread shows HttpClientFacade.close() in thread dump

---------- BEGIN SOURCE ----------
package test.examples;

import java.net.URI;
import java.net.http.HttpClient;
import java.net.http.HttpRequest;
import java.net.http.HttpResponse;
import java.time.Duration;
import java.util.concurrent.ExecutionException;
import java.util.concurrent.Executors;
import java.util.concurrent.StructuredTaskScope;

public class HttpGetBurstBugWithStructuredScope {

    public static void main(String[] args) {
        new HttpGetBurstBugWithStructuredScope().runBurst(
                ""http://localhost:62057/greet"",
                200
        );
    }

    void runBurst(String url, int reqCount) {
        final var dest = URI.create(url);
        try (final var virtualThreadExecutor = Executors.newVirtualThreadPerTaskExecutor()) {
            try (final var httpClient = HttpClient.newBuilder().connectTimeout(Duration.ofSeconds(1)).executor(virtualThreadExecutor).build()) {
                try (final var scope = new StructuredTaskScope.ShutdownOnFailure()) {
                    launchAndProcessRequests(scope, httpClient, reqCount, dest);
                } finally {
                    System.out.println(""StructuredTaskScope closed"");
                }
            } finally {
                System.out.println(""HttpClient closed"");
            }
        } finally {
            System.out.println(""ThreadExecutor closed"");
        }
    }

    private static void launchAndProcessRequests(
            StructuredTaskScope.ShutdownOnFailure scope,
            HttpClient httpClient,
            int reqCount,
            URI dest) {
        for (int counter = 0; counter < reqCount; counter++) {
            scope.fork(() ->
                    getUrlAndAssert200(httpClient, dest)
            );
        }
        try {
            scope.join();
        } catch (InterruptedException e) {
            throw new RuntimeException(""scope.join() was interrupted"", e);
        }
        try {
            scope.throwIfFailed();
        } catch (ExecutionException e) {
            throw new RuntimeException(""something threw an exception in StructuredTaskScope"", e);
        }
    }

    private static String getUrlAndAssert200(HttpClient httpClient, URI url) {
        final var response = executeRequest(httpClient, url);
        String res = response.body();
        int statusCode = response.statusCode();
        if (statusCode != 200) {
            throw new RuntimeException(url.toString() + "" returned status "" + statusCode);
        }
        return res;
    }

    private static HttpResponse<String> executeRequest(HttpClient httpClient, URI url) {
        try {
            var request = HttpRequest.newBuilder(url).GET().build();
            return httpClient.send(request, HttpResponse.BodyHandlers.ofString());
        } catch (InterruptedException e) {
            throw new RuntimeException(e);
        } catch (Exception e) {
            throw new RuntimeException(e);
        }
    }
}

---------- END SOURCE ----------

CUSTOMER SUBMITTED WORKAROUND :
package test.examples;

import java.net.URI;
import java.net.http.HttpClient;
import java.net.http.HttpRequest;
import java.net.http.HttpResponse;
import java.time.Duration;
import java.util.concurrent.CountDownLatch;
import java.util.concurrent.ExecutionException;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;

public class HttpGetBurstBug {

    public static void main(String[] args) {
        new HttpGetBurstBug().runBurst(
                ""http://localhost:62057/greet"",
                2000
        );
    }

    void runBurst(String url, int reqCount) {
        final var dest = URI.create(url);
        try {
            try (final var virtualThreadExecutor = Executors.newVirtualThreadPerTaskExecutor()) {
                try (final var httpClient = HttpClient.newBuilder().connectTimeout(Duration.ofSeconds(1)).executor(virtualThreadExecutor).build()) {
                    launchAndProcessRequests(virtualThreadExecutor, httpClient, reqCount, dest);
                }
            } finally {
                System.out.println(""HttpClient closed"");
            }
        } finally {
            System.out.println(""Successfully closed"");
        }
    }

    private static void launchAndProcessRequests(
            ExecutorService virtualThreadExecutor,
            HttpClient httpClient,
            int reqCount,
            URI dest) {
        final var latch = new CountDownLatch(reqCount);
        for (int counter = 0; counter < reqCount; counter++) {
            virtualThreadExecutor.execute(() -> {
                        try {
                            getUrlAndAssert200(httpClient, dest);
                        } catch (Exception e) {
                            System.err.println(""http get failed: "" + e.getMessage());
                        } finally {
                            latch.countDown();
                        }
                    }
            );
        }
        try {
            latch.await();
            System.out.println(""latch.await() completed"");
        } catch (InterruptedException e) {
            throw new RuntimeException(""latch.await() was interrupted"", e);
        }
    }

    private static String getUrlAndAssert200(HttpClient httpClient, URI url) {
        final var response = executeRequest(httpClient, url);
        String res = response.body();
        int statusCode = response.statusCode();
        if (statusCode != 200) {
            throw new RuntimeException(url.toString() + "" returned status "" + statusCode);
        }
        return res;
    }

    private static HttpResponse<String> executeRequest(HttpClient httpClient, URI url) {
        try {
            var request = HttpRequest.newBuilder(url).GET().build();
            return httpClient.send(request, HttpResponse.BodyHandlers.ofString());
        } catch (InterruptedException e) {
            throw new RuntimeException(e);
        } catch (Exception e) {
            throw new RuntimeException(e);
        }
    }
}


FREQUENCY : always


",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,x86_64,,,,,,,,,os_x,,,,,"0|i336ib:",9223372036854775807,master,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@446e124a,,,,,,,,,"2023-09-20 01:09;alanb;From a quick look, 200 subtasks are forked to fetch a resource via HTTP. The subtasks block in HttpClient.send. One (or several) will fail with a ConnectException, causing the remaining subtasks to be interrupted because the test is using the ""shutdown on failure"" policy. The STS is closed once all virtual threads terminate, the test then hangs in HttpClient.close waiting for the selector manager.
;;;","2023-09-20 03:06;dfuchs;Interrupting a (Virtual)Thread blocked on HttpClient::send should cause the request to be cancelled. If all requests are cancelled then HttpClient::close should eventually exit. Maybe there's some race condition here, but we do have tests for asynchronous interrupts of client send. I'll have a look.;;;","2023-09-20 03:30;alanb;In one run, 7 of the subtasks failed around the same time with ConnectException. This causes the STS to be shutdown and 193 subtasks to be cancelled via interrupt. This leads to 193 calls to MinimalFuture.cancel.;;;","2023-09-22 02:08;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/15883
Date: 2023-09-22 09:01:28 +0000;;;","2023-09-28 06:34;dukebot;Changeset: fc989986
Author:    Daniel Fuchs <dfuchs@openjdk.org>
Date:      2023-09-28 13:32:38 +0000
URL:       https://git.openjdk.org/jdk/commit/fc98998627443d6e73ac70661f47f48b30525712
;;;",,,,,,,,,,,,,,,,,,,,,,
RISC-V: Zero extended narrow oop passed to Atomic::cmpxchg,JDK-8316566,5110644,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,rehn,rehn,rehn,2023-09-19 23:27,2023-09-28 07:25,2023-10-01 09:55,2023-09-27 22:50,22,,,,,,,22,hotspot,,0,jdk17u-fix-request,jdk21u-fix-request,jdk21u-fix-yes,,,,,,,,,,,,,,,,,"Rv64 ABI says all 32-bit types must be sign extended when in a integer registers.
When loading the to be exchanged narrow oop with load reserved word it automatically sign extends it.
The branch not equal instruction always compares the full register (64-bit), if the compare narrow oop is not sign extended it fails.
(even if the 4 byte narrow oops are identical)

We have only seen this issue with Shenandoah and gcc 10/11.
Modified tests:
FAILED: gc/shenandoah/compiler/TestReferenceCAS.java#C1
FAILED: gc/shenandoah/compiler/TestReferenceCAS.java#C1-2
FAILED: gc/shenandoah/compiler/TestReferenceCAS.java#C2
FAILED: gc/shenandoah/compiler/TestReferenceCAS.java#FULL
FAILED: gc/shenandoah/compiler/TestReferenceCAS.java#Xint
Passed: gc/shenandoah/compiler/TestReferenceCAS.java#Xint-G1

Since we fail with Xint only the issue seems to be with Unsafe_CompareAndExchangeReference.

A bigger about this is that there may be more places where we don't notice this, but can result in very unexpected behavior as any branch compare may fail.

The issue is not reproduce with gcc 12/13.
",,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8316186,,,,,,,,,,,,,,,,,,,,,,,,,,riscv,,,,,,,,,,,,,,"0|i336i3:",9223372036854775807,master,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,,,"2023-09-26 00:08;rehn;   0x00000040034f089a <+94>:    ld      a4,0(a1)
   0x00000040034f089c <+96>:    lw      a2,8(a1)
   0x00000040034f089e <+98>:    fence   0x00000040034f089e <+98>:    fence
   0x00000040034f08a2 <+102>:   sub     a5,s6,a4
   0x00000040034f08a6 <+106>:   srl     a5,a5,a2
   0x00000040034f08aa <+110>:   sext.w  a5,a5
   0x00000040034f08ac <+112>:   beqz    s1,0x40034f0a0c <_ZN14AccessInternal19PostRuntimeDispatchIN20ShenandoahBarrierSet13AccessBarrierILm402470ES1_EELNS_11BarrierTypeE5ELm402470EE18oop_access_barrierEP7oopDesclS7_S7_+464>
   0x00000040034f08b0 <+116>:   sub     a4,s1,a4
   0x00000040034f08b4 <+120>:   srl     a4,a4,a2
=> 0x00000040034f08b8 <+124>:   lr.w    a2,(s2)
   0x00000040034f08bc <+128>:   bne     a2,a4,0x40034f08c6 <_ZN14AccessInternal19PostRuntimeDispatchIN20ShenandoahBarrierSet13AccessBarrierILm402470ES1_EELNS_11BarrierTypeE5ELm402470EE18oop_access_barrierEP7oopDesclS7_S7_+138>
   0x00000040034f08c0 <+132>:   sc.w    a0,a5,(s2)
   0x00000040034f08c4 <+136>:   bnez    a0,0x40034f08b8 <_ZN14AccessInternal19PostRuntimeDispatchIN20ShenandoahBarrierSet13AccessBarrierILm402470ES1_EELNS_11BarrierTypeE5ELm402470EE18oop_access_barrierEP7oopDesclS7_S7_+124>
   0x00000040034f08c6 <+138>:   sext.w  a5,a2
   0x00000040034f08ca <+142>:   fence

a4 is 0xfff80425, zero extended. Very suspect with that branch moved into the critical section.;;;","2023-09-26 01:01;rehn;gcc 12 ref:

   0x00000040034f651c <+138>:   ld      a4,0(a6)
   0x00000040034f6520 <+142>:   lw      a3,8(a6)
   0x00000040034f6524 <+146>:   fence
   0x00000040034f6528 <+150>:   sub     a4,s2,a4
   0x00000040034f652c <+154>:   srl     a4,a4,a3
   0x00000040034f6530 <+158>:   sext.w  a4,a4
   0x00000040034f6532 <+160>:   lr.w    a7,(s3)
   0x00000040034f6536 <+164>:   bne     a7,a4,0x40034f6540 <_ZN14AccessInternal19PostRuntimeDispatchIN20ShenandoahBarrierSet13AccessBarrierILm402470ES1_EELNS_11BarrierTypeE5ELm402470EE18oop_access_barrierEP7oopDesclS7_S7_+174>
   0x00000040034f653a <+168>:   sc.w    a3,a5,(s3)
   0x00000040034f653e <+172>:   bnez    a3,0x40034f6532 <_ZN14AccessInternal19PostRuntimeDispatchIN20ShenandoahBarrierSet13AccessBarrierILm402470ES1_EELNS_11BarrierTypeE5ELm402470EE18oop_access_barrierEP7oopDesclS7_S7_+160>
   0x00000040034f6540 <+174>:   sext.w  a5,a7
   0x00000040034f6544 <+178>:   fence
;;;","2023-09-26 01:03;rehn;Most likely a compiler bug.;;;","2023-09-26 03:49;rehn;It's __synch_synchronize() that is misbehaving.;;;","2023-09-26 04:39;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/15917
Date: 2023-09-26 11:31:58 +0000;;;","2023-09-27 22:50;dukebot;Changeset: 2d154fcd
Author:    Robbin Ehn <rehn@openjdk.org>
Date:      2023-09-28 05:47:33 +0000
URL:       https://git.openjdk.org/jdk/commit/2d154fcd0de0612f58abbc5027f409b9b2eb0dc2
;;;","2023-09-27 23:03;rehn;Fix Request (21u/17u)

This fix changes how we generate the full memory barrier to avoid the compiler bug.
Any code change could materialize this bug anywhere we use the full memory barrier.
Pro-actively backporting this to avoid future issues (and fix potentially not reported bugs).
Should apply clean (not tested yet, but it is a one-liner).

;;;","2023-09-28 03:19;rehn;gcc issue reported here: https://gcc.gnu.org/bugzilla/show_bug.cgi?id=111623;;;","2023-09-28 07:25;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk21u/pull/210
Date: 2023-09-28 14:17:04 +0000;;;",,,,,,,,,,,,,,,,,,
serviceability/sa/jmap-hprof/JMapHProfLargeHeapTest.java times out after JDK-8314829,JDK-8316562,5110639,Bug,Resolved,JDK,JDK,software,duke,,,P2,Fixed,lmesnik,dcubed,dcubed,2023-09-19 17:19,2023-09-25 11:28,2023-10-01 09:55,2023-09-20 11:16,22,,,,,,,22,hotspot,,0,regression,tier4,,,,,,,,,,,,,,,,,,"The following test timed out in the JDK22 CI:

serviceability/sa/jmap-hprof/JMapHProfLargeHeapTest.java

Here's a log file snippet from the linux-x64-debug sighting:

#section:driver
----------messages:(11/480)----------
command: driver JMapHProfLargeHeapTest
reason: User specified action: run driver JMapHProfLargeHeapTest 
started: Tue Sep 19 23:31:01 UTC 2023
Mode: agentvm
Agent id: 22
Additional exports to unnamed modules from @modules: java.base/jdk.internal.misc java.management/sun.management jdk.internal.jvmstat/sun.jvmstat.monitor
Timeout signalled after 480 seconds
Timeout information:
--- Timeout information end.
finished: Tue Sep 19 23:41:27 UTC 2023
elapsed time (seconds): 626.309
----------configuration:(17/2170)----------

<snip>

----------System.out:(1/2173)----------
Command line: [/opt/mach5/mesos/work_dir/jib-master/install/jdk-22+16-1223/linux-x64-debug.jdk/jdk-22/fastdebug/bin/java -cp /opt/mach5/mesos/work_dir/slaves/cd627e65-f015-4fb1-a1d2-b6c9b8127f98-S182814/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/9f66adad-2e3c-4a04-bd07-34282dd3a002/runs/5d46e971-22e9-41e5-9ec7-6cb8d2a3c384/testoutput/test-support/jtreg_open_test_hotspot_jtreg_hotspot_cds_relocation/classes/0/serviceability/sa/jmap-hprof/JMapHProfLargeHeapTest.d:/opt/mach5/mesos/work_dir/jib-master/install/jdk-22+16-1223/src.full/open/test/hotspot/jtreg/serviceability/sa/jmap-hprof:/opt/mach5/mesos/work_dir/slaves/cd627e65-f015-4fb1-a1d2-b6c9b8127f98-S182814/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/9f66adad-2e3c-4a04-bd07-34282dd3a002/runs/5d46e971-22e9-41e5-9ec7-6cb8d2a3c384/testoutput/test-support/jtreg_open_test_hotspot_jtreg_hotspot_cds_relocation/classes/0/test/lib:/opt/mach5/mesos/work_dir/jib-master/install/jtreg/7.3.1/1/bundles/jtreg-7.3.1+1.zip/jtreg/lib/jtreg.jar:/opt/mach5/mesos/work_dir/jib-master/install/jtreg/7.3.1/1/bundles/jtreg-7.3.1+1.zip/jtreg/lib/junit-platform-console-standalone-1.9.2.jar:/opt/mach5/mesos/work_dir/jib-master/install/jtreg/7.3.1/1/bundles/jtreg-7.3.1+1.zip/jtreg/lib/testng-7.3.0.jar:/opt/mach5/mesos/work_dir/jib-master/install/jtreg/7.3.1/1/bundles/jtreg-7.3.1+1.zip/jtreg/lib/jcommander-1.82.jar:/opt/mach5/mesos/work_dir/jib-master/install/jtreg/7.3.1/1/bundles/jtreg-7.3.1+1.zip/jtreg/lib/guice-5.1.0.jar -XX:MaxRAMPercentage=4.16667 -Dtest.boot.jdk=/opt/mach5/mesos/work_dir/jib-master/install/jdk/20/36/bundles/linux-x64/jdk-20_linux-x64_bin.tar.gz/jdk-20 -Djava.io.tmpdir=/opt/mach5/mesos/work_dir/slaves/cd627e65-f015-4fb1-a1d2-b6c9b8127f98-S182814/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/9f66adad-2e3c-4a04-bd07-34282dd3a002/runs/5d46e971-22e9-41e5-9ec7-6cb8d2a3c384/testoutput/test-support/jtreg_open_test_hotspot_jtreg_hotspot_cds_relocation/tmp -XX:+UnlockDiagnosticVMOptions -XX:ArchiveRelocationMode=0 -Xlog:cds -XX:NativeMemoryTracking=detail --add-exports=java.management/sun.management=ALL-UNNAMED -Xmx1g JMapHProfLargeHeapProc 22528 ]
result: Error. Agent error: java.lang.Exception: Agent 22 timed out with a timeout of 480 seconds; check console log for any additional details

So far the test has timed out on four platforms starting in
jdk-22+16-1223-tier4. That build-ID includes this fix:

JDK-8314829
serviceability/sa/jmap-hprof/JMapHProfLargeHeapTest.java ignores vm flags",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8314829,,,,,,,,,,,,,,,generic,,,,,,,,,generic,,,,,"0|i336gz:",9223372036854775807,b16,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@714e388c,,,,,,,,,"2023-09-19 18:03;lmesnik;The test failed because of unexpected output from the forked VM.;;;","2023-09-19 21:01;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/15833
Date: 2023-09-20 03:56:28 +0000;;;","2023-09-20 11:16;dukebot;Changeset: 54028e77
Author:    Leonid Mesnik <lmesnik@openjdk.org>
Date:      2023-09-20 18:13:45 +0000
URL:       https://git.openjdk.org/jdk/commit/54028e779bb076a5ab1c03baa8ab89587252af4a
;;;","2023-09-20 11:27;dcubed;The fix for this bug is integrated in jdk-22+16-1243.;;;",,,,,,,,,,,,,,,,,,,,,,,
[lw5] class file attribute NullRestricted shouldn't be generated for arrays,JDK-8316561,5110637,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,vromero,vromero,vromero,2023-09-19 15:05,2023-09-19 16:22,2023-10-01 09:55,2023-09-19 16:22,repo-valhalla,,,,,,,repo-valhalla,tools,,0,lw5,lworld,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i336gj:",9223372036854775807,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4dca67bd,,,,,,,,,"2023-09-19 16:22;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/valhalla/pull/928
Date: 2023-09-19 23:16:22 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,,,
Fix typos in java.desktop,JDK-8316556,5110629,Bug,Resolved,JDK,JDK,software,duke,,,P5,Fixed,aturbanov,aturbanov,aturbanov,2023-09-19 13:10,2023-09-27 18:20,2023-10-01 09:55,2023-09-24 23:35,21,22,,,,,,22,client-libs,,0,,,,,,,,,,,,,,,,,,,,"Found many typos in java.desktop by IDEA's inspection Proofreading | Typo",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8312165,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i336er:",9223372036854775807,b17,,,,,,,,,,,"2023-09-19 13:18;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/15773
Date: 2023-09-16 16:22:40 +0000;;;","2023-09-24 23:35;dukebot;Changeset: 89e068bc
Author:    Andrey Turbanov <aturbanov@openjdk.org>
Date:      2023-09-25 06:32:40 +0000
URL:       https://git.openjdk.org/jdk/commit/89e068bc19b12bb8f4a175fdf979cbe795ac3709
;;;",,,,,,,,,,,,,,,,,,,,,,,,,
StoreReproducibilityTest fails on some locales,JDK-8316540,5110612,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,naoto,zzambers,zzambers,2023-09-19 09:36,2023-09-27 18:20,2023-10-01 09:55,2023-09-22 09:56,21,22,,,,,,22,core-libs,,0,amazon-interest,noreg-self,,,,,,,,,,,,,,,,,,"It was discovered that java/util/Properties/StoreReproducibilityTest fails on some locales (Europe/Dublin), see:
https://github.com/adoptium/aqa-tests/issues/4751

Stack Trace:
java.lang.RuntimeException: Expected date comment Tue Sep 05 00:03:43 IST 2023 to be after Tue Sep 05 00:03:42 IST 2023 but was Mon Sep 04 19:33:43 IST 2023
  	at StoreReproducibilityTest.assertCurrentDate(StoreReproducibilityTest.java:434)
  	at StoreReproducibilityTest.testEmptySysPropValue(StoreReproducibilityTest.java:256)
  	at StoreReproducibilityTest.main(StoreReproducibilityTest.java:71)
  	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
  	at java.base/java.lang.reflect.Method.invoke(Method.java:580)
  	at com.sun.javatest.regtest.agent.MainActionHelper$AgentVMRunnable.run(MainActionHelper.java:333)
  	at java.base/java.lang.Thread.run(Thread.java:1583)

Details:
Problem was tracked down to ambiguous time zone abbreviations. For Europe/Dublin timezone, Date.toString (used by Properties.store) specifies timezone as IST (""Irish Summer Time""), but IST is decoded by FORMATER (in test) as ""India Standard Time"" resulting in unexpected date and test failure.

I have found mention of this issue in DateTimeFormatterBuilder class:
... Many textual zone names are not unique, such as CST can be for both ""Central Standard Time"" and ""China Standard Time"". In this situation, the zone id will be determined by the region information from formatter's locale and the standard zone id for that area, ...

However FORMATER (used in this test to parse date string) has to use ROOT locale (see: JDK-8282023).

Possible workarounds would be ether to avoid ambiguous time zone abbreviations by explicitly setting timezone in test. Or skipping check which compares dates.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i336az:",9223372036854775807,b17,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@38ded199,,,,,,,,,"2023-09-19 15:17;naoto;Possibly supplying `-Duser.timezone=UTC` when starting a JVM would correct this issue.;;;","2023-09-19 15:57;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/15829
Date: 2023-09-19 22:49:36 +0000;;;","2023-09-22 09:56;dukebot;Changeset: f7578e80
Author:    Naoto Sato <naoto@openjdk.org>
Date:      2023-09-22 16:53:56 +0000
URL:       https://git.openjdk.org/jdk/commit/f7578e8048ee961f22b57ee2b7eed9e9ab783cf5
;;;",,,,,,,,,,,,,,,,,,,,,,,,
Native library copying in BuildMicrobenchmark.gmk cause dups on macOS,JDK-8316532,5110604,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,erikj,ihse,ihse,2023-09-19 08:40,2023-09-25 11:28,2023-10-01 09:55,2023-09-20 13:38,22,,,,,,,22,infrastructure,,0,build-infra,,,,,,,,,,,,,,,,,,,"`COPY_MICROBENCHMARK_NATIVE` in make/test/BuildMicrobenchmark.gmk copies a list of files with ""flattening"". This results in duplicate make rules, if the same file name is present in multiple source directories.

This is likely caused by JDK-8253620, which adds debug symbols on macOS. These have the same name as the lib, but in a .dSYM subdir.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i33697:",9223372036854775807,b16,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@429c566,,,,,,,,,"2023-09-19 08:47;ihse;We get warnings of duplications like this:

test/BuildMicrobenchmark.gmk:157: warning: overriding recipe for target '.../build/macosx-aarch64/images/test/micro/native/libCallOverhead.dylib'

which comes in pairs, and are likely caused by JDK-8253620.

But on top of this, we we also have a lot of lines like:
test/BuildMicrobenchmark.gmk:157: warning: overriding recipe for target '.../build/macosx-aarch64/images/test/micro/native/Info.plist'

I don't think the plist problem is caused by JDK-8253620. I suspect we create one Info.plist per library, and that this duplication problem was present even before JDK-8253620.;;;","2023-09-19 11:08;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/15824
Date: 2023-09-19 17:59:05 +0000;;;","2023-09-20 13:38;dukebot;Changeset: 3461c7b1
Author:    Erik Joelsson <erikj@openjdk.org>
Date:      2023-09-20 20:36:16 +0000
URL:       https://git.openjdk.org/jdk/commit/3461c7b16549b2aa456fffad9d6abe7e1bfc7260
;;;",,,,,,,,,,,,,,,,,,,,,,,,
Problemlist ParallelCamera picking tests,JDK-8316490,5110558,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,jdv,jdv,jdv,2023-09-18 23:15,2023-09-24 22:00,2023-10-01 09:55,2023-09-24 21:57,jfx22,,,,,,,jfx22,javafx,,0,noreg-self,sn_152,sn_153,test_sprint,,,,,,,,,,,,,,,,"Below 4 picking tests fail with ParallelCamera:
test/scenegraph/fx3d/picking/parallel/MeshCameraParallelPickingTest.java:
test/scenegraph/fx3d/picking/parallel/MeshGroupParallelPickingTest.java:
test/scenegraph/fx3d/picking/parallel/ShapesCameraParallelPickingTest.java:
test/scenegraph/fx3d/picking/parallel/ShapesGroupParallelPickingTest.java: 

These same tests pass when we use Perspective camera.",,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8310177,,,,,,,,,,,,,,,JDK-8165941,,,,,,,,,,,generic,,,,,,,,,generic,,,,,"0|i335yz:",9223372036854775807,inapplicable,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4143e3f7,,,,,,,,,"2023-09-18 23:17;jdv;Nothing gets drawn in these test when we use ParallelCamera. And all of them fails with similar exception:
test test.scenegraph.fx3d.picking.MeshPickingTests.distanceTest(): failure
junit.framework.AssertionFailedError: Expected 1303.3464619969627, but was 2170.618897719143
	at junit.framework.Assert.fail(Assert.java:57)
	at junit.framework.Assert.assertTrue(Assert.java:22)
	at test.scenegraph.fx3d.picking.MeshPickingTests.distanceTest(MeshPickingTests.java:108)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:577)
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:59)
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:56)
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
	at org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:299)
	at org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:293)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.lang.Thread.run(Thread.java:833);;;","2023-09-20 02:48;jdv;I changed z camera translation like to very low value of 10 and with same z translation of perspective camera i can be similar rendering.

Initially we draw small mesh and then scale it by 100x in all direction and then translate the camera position by very large value to see the scaled 3D mesh in our 500*500 view.
But in case of ParallelCamera we restrict far clip to view width/height divide by 2. So when we translate camera in negative z direction of more than -width/2 or -height/2 we basically clip the rendering and nothing is seen. This is what is happening in test/scenegraph/fx3d/picking/parallel/ tests.;;;","2023-09-22 02:23;jdv;Updated mesh scaling to lower value and removed -z camera translation with this i can see the mesh content getting drawn and some sub-tests of ParallelCamera also pass. But this causes issues in Perspective Camera tests, we should not modify test Parameters to circumvent JDK-8165941 product issue. So i will go ahead and problemlist ParallelCamera tests until JDK-8165941 issue is fixed.;;;","2023-09-22 02:47;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jfx-tests/pull/12
Date: 2023-09-22 09:40:31 +0000;;;","2023-09-24 21:57;roboduke;Changeset: 5fc5fb52
Author:    Jayathirth D V <jdv@openjdk.org>
Committer: Ajit Ghaisas <aghaisas@openjdk.org>
Date:      2023-09-25 04:56:48 +0000
URL:       https://git.openjdk.org/jfx-tests/commit/5fc5fb5205d4cb1aeaa008d220be4aef0f6c36ae
;;;",,,,,,,,,,,,,,,,,,,,,,
os::write incorrectly handles partial write,JDK-8316468,5110535,Bug,Resolved,JDK,JDK,software,duke,,,P2,Fixed,manc,manc,manc,2023-09-18 18:42,2023-09-25 13:09,2023-10-01 09:55,2023-09-19 13:08,21,,,,,,,22,hotspot,,0,google-interest,jdk21u-fix-request,jdk21u-fix-SQE-ok-next,jdk21u-fix-yes,os,regression,,,,,,,,,,,,,,"JDK-8303942 introduced a bug in os::write() in os.cpp for handling partial write:
```
buf = (void *)((char *)buf + nBytes);
```
should be

```
buf = (void *)((char *)buf + res);
```

We observed that in JDK 21, heap dump corruption observed in JDK-8303937 happens again when writing to a socket or pipe.",,,,,,,,,,,,JDK-8316919,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8303942,JDK-8303937,,,,,,,,,,,,,,,,,,,,,21,,,,,,,"0|i335tv:",9223372036854775807,b16,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,,,"2023-09-18 19:01;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/15808
Date: 2023-09-19 01:55:48 +0000;;;","2023-09-19 13:08;dukebot;Changeset: 7ce5bd15
Author:    Man Cao <manc@openjdk.org>
Date:      2023-09-19 20:06:40 +0000
URL:       https://git.openjdk.org/jdk/commit/7ce5bd159024e70f5a997c47ed2ce962d6e6091b
;;;","2023-09-19 13:25;manc;Fix Request (21u):
It fixes a bug that could cause file corruption such as in heap dumps. The fix is a one-line change and applies cleanly.
Risk is low. Passes pre-submit tier1 tests.;;;","2023-09-20 01:03;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk21u/pull/176
Date: 2023-09-20 07:57:33 +0000;;;","2023-09-20 01:50;shade;The tag for 21u should be jdk21u-fix-request, FTFY. :);;;","2023-09-20 07:58;coleenp;Thank you for fixing this and for the backport to JDK 21u.;;;",,,,,,,,,,,,,,,,,,,,,
Fix: make test outputs TEST SUCCESS after unsuccessful exit  ,JDK-8316461,5110526,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,lkorinth,lkorinth,lkorinth,2023-09-18 16:38,2023-09-28 05:56,2023-10-01 09:55,2023-09-20 06:07,11,17,21,22,,,,22,infrastructure,,0,amazon-interest,jdk21u-fix-request,jdk21u-fix-yes,,,,,,,,,,,,,,,,,"`make test` outputs `TEST SUCCESS` after unsuccessful exit of JVM. One example is bad VM flags.

I now have a reproducer for something that has puzzled me before (and most of my co-workers I think):

// first test uses -XX:+UseG1GC second and third uses -XX:+UseG1GCC (sic)
`make clean run-test TEST=open/test/hotspot/jtreg/gc/arguments/TestCompressedClassFlags.java JTREG='JAVA_OPTIONS=-XX:+UseG1GC'` -> OK
`make run-test TEST=open/test/hotspot/jtreg/gc/arguments/TestCompressedClassFlags.java JTREG='JAVA_OPTIONS=-XX:+UseG1GCC'`        -> OK
`rm -rf test-results/jtreg_open_test_hotspot_jtreg_gc_arguments_TestCompressedClassFlags_java`
`make run-test TEST=open/test/hotspot/jtreg/gc/arguments/TestCompressedClassFlags.java JTREG='JAVA_OPTIONS=-XX:+UseG1GCC'`         -> FAIL

The problem is that the success of the first test run seems to be cached and the second test-run seems to reuse the result of the first run.  

This seems to fix the problem:
```
diff --git a/make/RunTests.gmk b/make/RunTests.gmk
index 25dcdbb083d..489c3f839f8 100644
--- a/make/RunTests.gmk
+++ b/make/RunTests.gmk
@@ -864,6 +864,7 @@ define SetupRunJtregTestBody

   clean-workdir-$1:
        $$(RM) -r $$($1_TEST_SUPPORT_DIR)
+       $$(RM) -r $$($1_TEST_RESULTS_DIR)

   $1_COMMAND_LINE := \
       $$(JAVA) $$($1_JTREG_LAUNCHER_OPTIONS) \
```",,,,,,,,,,,,JDK-8317033,JDK-8317032,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8316650,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i335rv:",9223372036854775807,b16,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@429c566,,,,,,,,,"2023-09-19 06:05;erikj;I think removing the results dir before a new run is the correct fix. It should also fix the issue where we sometimes report the wrong (previous) breakdown of results (in the parse target). I'm not too fussed about the naming of the make targets for cleaning the directories. They are all internal to this makefile and not exposed to the user on the command line.;;;","2023-09-19 07:50;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/15820
Date: 2023-09-19 14:44:26 +0000;;;","2023-09-20 06:07;dukebot;Changeset: e30e3564
Author:    Leo Korinth <lkorinth@openjdk.org>
Date:      2023-09-20 13:04:45 +0000
URL:       https://git.openjdk.org/jdk/commit/e30e3564420c631f08ac3d613ab91c93227a00b3
;;;","2023-09-21 05:40;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk21u/pull/187
Date: 2023-09-21 12:27:08 +0000;;;","2023-09-26 01:37;roboduke;[jdk21u-fix-request] Approval Request from Leo Korinth
Testing improvement;;;",,,,,,,,,,,,,,,,,,,,,,
StackWalker may skip Continuation::yield0 frame mistakenly,JDK-8316456,5110521,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,mchung,mchung,mchung,2023-09-18 15:42,2023-09-27 18:19,2023-10-01 09:55,2023-09-21 16:12,21,,,,,,,22,core-libs,,0,,,,,,,,,,,,,,,,,,,,"VM ends the batch when it reaches the bottom of a continuation
i.e. Continuation::enter.  The stack walker will set the continuation to
its parent to continue.   Loom added FrameBuffer::isAtBottom to detect
if it reaches the bottom of a continuation.   

FrameBuffer::isAtBottom returns true if the stack frames in the buffer have
all been traversed *and* the last frame is not the last element of the buffer
i.e. the buffer still has room not filled.

If Continuation::enter is the last element of the buffer, FrameBuffer::isAtBottom
returns false.   It will need to fetch another batch, which will be returned with 
an empty batch and at that point, it will detect that it reaches the bottom of 
continuation and FrameBuffer::isAtBottom returns true.

JVM_MoreStackWalk has a bug that always assumes that the Java frame 
stream is currently at the frame decoded in the last patch and so always
advances to the next frame before filling in the new batch of stack frame. 
If JVM_MoreStackWalk returns 0 (as described above), then the library sets 
the continuation to its parent.  It then call JVM_MoreStackWalk to continue 
the stack walking but the last decoded frame has already been advanced.
The Java frame stream is already at the top frame of  the parent continuation. .
The current implementation may skip ""Continuation::yield0"" mistakenly.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8316698,JDK-8315413,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i335qr:",9223372036854775807,b17,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4c088d55,,,,,,,,,"2023-09-18 16:09;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/15804
Date: 2023-09-18 23:00:09 +0000;;;","2023-09-18 17:28;mchung;This issue can be reproduced with test/jdk/jdk/internal/vm/Continuation/Scoped.java that fails with https://github.com/openjdk/jdk/pull/15749;;;","2023-09-21 16:12;dukebot;Changeset: c72f0046
Author:    Mandy Chung <mchung@openjdk.org>
Date:      2023-09-21 23:10:49 +0000
URL:       https://git.openjdk.org/jdk/commit/c72f00463fcb1c4a94126932abbc82a2582c10c2
;;;",,,,,,,,,,,,,,,,,,,,,,,,
[JVMCI] Using Xcomp on jargraal must eagerly initialize JVMCI,JDK-8316453,5110518,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,dnsimon,dnsimon,dnsimon,2023-09-18 14:49,2023-09-27 18:19,2023-10-01 09:55,2023-09-21 07:31,22,,,,,,,22,hotspot,,0,jvmci,oracle-triage-22,regression,,,,,,,,,,,,,,,,,"As a result of JDK-8315818, -Xcomp on jargraal no longer blocks compilations of application code. It undid the forced initialization of JVMCI. While that is correct for libgraal, it's incorrect for jargraal.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8315818,,,,,,,,,,,,,,,,,,,,,,,,,"0|i335q3:",9223372036854775807,b17,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2023-09-18 23:45;thartmann;ILW = Eager initialization of JVMCI broken (regression), Xcomp with jargraal, no workaround = MMH = P3;;;","2023-09-19 05:33;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/15801
Date: 2023-09-18 21:58:55 +0000;;;","2023-09-21 07:31;dukebot;Changeset: 8350268c
Author:    Doug Simon <dnsimon@openjdk.org>
Date:      2023-09-21 14:29:06 +0000
URL:       https://git.openjdk.org/jdk/commit/8350268c058e693b8c5fcca3b808ea97c5ddc546
;;;",,,,,,,,,,,,,,,,,,,,,,,,
[Lilliput/JDK21] Problem-list compiler/ciReplay tests,JDK-8316442,5110507,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,rkennke,rkennke,rkennke,2023-09-18 11:31,2023-09-21 12:13,2023-10-01 09:55,2023-09-21 12:13,repo-lilliput-21,,,,,,,repo-lilliput-21,hotspot,,0,amazon-interest,lilliput,,,,,,,,,,,,,,,,,,Some tests in compiler/ciReplay seem to be sensitivs to setting of +/-UCOH when generating vs loading compiler replays. This only affects JIT diagnosis and can in practice likely be worked-around by using the correct combination of flags. Let's problem-list the tests for now.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8316441,,,,JDK-8316526,,,,,,,,,,,generic,,,,,,,,,generic,,,,,"0|i335nn:",9223372036854775807,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@78d03d9a,,,,,,,,,"2023-09-18 11:43;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/lilliput-jdk21u/pull/8
Date: 2023-09-18 18:34:10 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,,,
LambdasInTwoArchives.java failed to find WhiteBox.class,JDK-8316440,5110505,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,ccheung,ccheung,ccheung,2023-09-18 11:09,2023-09-25 11:26,2023-10-01 09:55,2023-09-18 17:13,22,,,,,,,22,hotspot,,0,cds,intermittent,noreg-self,,,,,,,,,,,,,,,,,"java.lang.RuntimeException: Failed to find jdk/test/whitebox/WhiteBox.class
	at jdk.test.lib.helpers.ClassFileInstaller.writeClassToDisk(ClassFileInstaller.java:240)
	at jdk.test.lib.helpers.ClassFileInstaller.writeClassToDisk(ClassFileInstaller.java:227)
	at jdk.test.lib.helpers.ClassFileInstaller.writeJar_impl(ClassFileInstaller.java:172)
	at jdk.test.lib.helpers.ClassFileInstaller.main(ClassFileInstaller.java:90)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
	at java.base/java.lang.reflect.Method.invoke(Method.java:580)
	at com.sun.javatest.regtest.agent.MainActionHelper$AgentVMRunnable.run(MainActionHelper.java:333)
	at java.base/java.lang.Thread.run(Thread.java:1570)",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8307468,,,,,,,,,,,,,,,,,,,,,,,,,"0|i335n7:",9223372036854775807,b16,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,,,"2023-09-18 14:03;ccheung;The test failure happened intermittently because other tests ran prior to the LambdasInTwoArchives.java test had built the WhiteBox.class.

To reproduce the failure manually:
- clean the jtreg output/report dir;
- run only the LambdasInTwoArchives.java test.;;;","2023-09-18 16:25;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/15805
Date: 2023-09-18 23:21:22 +0000;;;","2023-09-18 17:13;dukebot;Changeset: f226ceb4
Author:    Calvin Cheung <ccheung@openjdk.org>
Date:      2023-09-19 00:12:36 +0000
URL:       https://git.openjdk.org/jdk/commit/f226ceb4351c94486c754fdefe15049b9b197e44
;;;",,,,,,,,,,,,,,,,,,,,,,,,
sun.util.calendar.CalendarSystem subclassing should be restricted,JDK-8316435,5110500,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,jlu,jlu,jlu,2023-09-18 10:17,2023-09-27 18:19,2023-10-01 09:55,2023-09-21 14:33,,,,,,,,22,core-libs,,0,noreg-cleanup,,,,,,,,,,,,,,,,,,,"The internal sun.util.calendar 'CalendarSystem' implementation is long-standing (and untouched for many years) with no future changes planned. As the implementation is complete, the system should be made sealed to prevent any unwanted subclassing.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8313813,,,,,,,,,,,generic,,,,,,,,,generic,,,,,"0|i335m3:",9223372036854775807,b17,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@7644fb4c,,,,,,,,,"2023-09-18 15:16;jlu;This fix was proposed in the pull request of JDK-8313813;;;","2023-09-18 15:47;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/15803
Date: 2023-09-18 22:42:09 +0000;;;","2023-09-19 10:19;srl;What's the implication for adding future calendars? There are additional calendars being proposed at the CLDR level such as Tibetan https://unicode-org.atlassian.net/browse/CLDR-11440 and Badi and Burmese to name a few.;;;","2023-09-19 10:27;naoto;I don't foresee any issues for adding new calendar implementations. If that ever happens, they are simply enumerated in the `permits` clause of the `BaseCalendar`/`BaseCalendar.Date` classes.;;;","2023-09-21 14:33;dukebot;Changeset: 496264c1
Author:    Justin Lu <jlu@openjdk.org>
Date:      2023-09-21 21:31:07 +0000
URL:       https://git.openjdk.org/jdk/commit/496264c1f98d313f3df19f919b54c98fc03d88f7
;;;",,,,,,,,,,,,,,,,,,,,,,
G1: Nmethod count statistics only count last code root set iterated,JDK-8316428,5110493,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,tschatzl,tschatzl,tschatzl,2023-09-18 07:59,2023-09-25 11:26,2023-10-01 09:55,2023-09-19 01:31,22,,,,,,,22,hotspot,,0,gc-g1,gc-g1-remset,gc-pending-review,,,,,,,,,,,,,,,,,"G1 Nmethod count statistics is wrong, only counting the count of the last code root set iterated.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8315605,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i335kj:",9223372036854775807,b16,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6b00f96c,,,,,,,,,"2023-09-18 08:10;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/15790
Date: 2023-09-18 15:03:31 +0000;;;","2023-09-19 01:31;dukebot;Changeset: fab372d3
Author:    Thomas Schatzl <tschatzl@openjdk.org>
Date:      2023-09-19 08:30:17 +0000
URL:       https://git.openjdk.org/jdk/commit/fab372d3a23b17f64ae4306e28bdb0bc511f4912
;;;",,,,,,,,,,,,,,,,,,,,,,,,,
containers/docker/TestMemoryWithCgroupV1.java get OOM killed with Parallel GC,JDK-8316418,5110480,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,sgehwolf,shade,shade,2023-09-18 02:35,2023-09-27 18:19,2023-10-01 09:55,2023-09-22 01:14,11.0.17,17.0.5,21,22,,,,22,hotspot,,0,amazon-interest,testbug,,,,,,,,,,,,,,,,,,"Reproduced on AL like this:

```
$ CONF=linux-x86_64-server-fastdebug make test TEST=containers/docker TEST_VM_OPTS=""-XX:+UseParallelGC""
...
[0.002s][trace][os,container] CgroupSubsystem::active_processor_count (cached): 36^M
];
 stderr: []
 exitValue = 137

java.lang.RuntimeException: Expected to get exit value of [0], exit value is: [137]
        at jdk.test.lib.process.OutputAnalyzer.shouldHaveExitValue(OutputAnalyzer.java:490)
        at jdk.test.lib.containers.docker.Common.run(Common.java:108)
        at TestMemoryWithCgroupV1.testMemoryLimitWithSwappiness(TestMemoryWithCgroupV1.java:83)
        at TestMemoryWithCgroupV1.main(TestMemoryWithCgroupV1.java:61)
        at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
        at java.base/java.lang.reflect.Method.invoke(Method.java:580)
        at com.sun.javatest.regtest.agent.MainActionHelper$AgentVMRunnable.run(MainActionHelper.java:333)
        at java.base/java.lang.Thread.run(Thread.java:1570)
```

dmesg says:

```
[387702.462552] Tasks state (memory values in pages):
[387702.466721] [  pid  ]   uid  tgid total_vm      rss pgtables_bytes swapents oom_score_adj name
[387702.474297] [   4318]     0  4318   455731    30386   393216        0             0 java
[387702.481643] oom-kill:constraint=CONSTRAINT_MEMCG,nodemask=(null),cpuset=04fc22b6369352a1472928ae217c0e90282d164604894bfe4d29424bb6ece541,mems_allowed=0,oom_memcg=/docker/04fc22b6369352a1472928ae217c0e90282d164604894bfe4d29424bb6ece541,task_memcg=/docker/04fc22b6369352a1472928ae217c0e90282d164604894bfe4d29424bb6ece541,task=java,pid=4318,uid=0
[387702.504062] Memory cgroup out of memory: Killed process 4318 (java) total-vm:1822924kB, anon-rss:100120kB, file-rss:21424kB, shmem-rss:0kB, UID:0 pgtables:384kB oom_score_adj:0
```",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8284950,,,,,,,,,,,,,,,,,,,,,,,,,"0|i335hn:",9223372036854775807,b17,,,,,,,,,,,"2023-09-18 03:09;shade;Remarkably, reproduces with Parallel, but not with G1. [~sgehwolf], want to take a look?;;;","2023-09-20 02:03;sgehwolf;Sure, I can take a look.;;;","2023-09-20 02:43;sgehwolf;[~shade] I'm not able to reproduce this. Is this x86_64 or aarch64? You seem to be running this on a 36 core box. Mine is 12. The test runs with a low memory limit (200m) which could run OOM on larger systems due to the number of cores and default parallel GC threads. Does this still reproduce when using: TEST_VM_OPTS=""-XX:+UseParallelGC -XX:ActiveProcessorCount=4""?;;;","2023-09-20 04:04;shade;linux-x86_64-server-fastdebug, and it is specifically CgroupV1 test. A more precise reproducer for me is:

$ CONF=linux-x86_64-server-fastdebug make test TEST=containers/docker/TestMemoryWithCgroupV1.java TEST_VM_OPTS=""-XX:+UseParallelGC"" JTREG=REPEAT_COUNT=10
<fails on first attempt>

This passes well:

$ CONF=linux-x86_64-server-fastdebug make test TEST=containers/docker/TestMemoryWithCgroupV1.java TEST_VM_OPTS=""-XX:+UseParallelGC -XX:ActiveProcessorCount=4"" JTREG=REPEAT_COUNT=10
;;;","2023-09-20 05:03;sgehwolf;OK, thanks.;;;","2023-09-20 05:10;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/15840
Date: 2023-09-20 12:02:29 +0000;;;","2023-09-22 01:14;dukebot;Changeset: 7352bb91
Author:    Severin Gehwolf <sgehwolf@openjdk.org>
Date:      2023-09-22 08:12:51 +0000
URL:       https://git.openjdk.org/jdk/commit/7352bb910506b7d22b4d3860223fb933295eab14
;;;",,,,,,,,,,,,,,,,,,,,
ObjectMonitorIterator does not return the most recent monitor and is incorrect if no monitors exists,JDK-8316417,5110479,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,aboldtch,aboldtch,aboldtch,2023-09-18 02:23,2023-09-27 18:21,2023-10-01 09:55,2023-09-27 01:18,17,21,22,,,,,22,hotspot,,0,amazon-interest,lilliput,,,,,,,,,,,,,,,,,,"ObjectMonitorIterator fails to return the most recent monitor added. It starts with returning the `nextOM()` ObjectMonitor from the `_head` ObjectMonitor but fails to ever return the `_head` ObjectMonitor.
The current implementation can also not handle that the `_head` is nullptr (no monitors in the system) and returns a null ObjectMonitorIterator. Which is interpreted as `monitor list not supported, too old hotspot VM`.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8316401,,,,JDK-8259008,,,,,,,,,,,,,,,,,,,,,,,,,"0|i335hf:",9223372036854775807,b17,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@714e388c,,,,,,,,,"2023-09-18 03:00;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/15782
Date: 2023-09-18 09:54:18 +0000;;;","2023-09-24 18:08;dholmes;This seems such a fundamental flaw that its existence should have been obvious. Why has this not been noticed? Why are tests not failing?;;;","2023-09-24 18:24;cjplummer;Well, lack of a good test for one. Also, I wonder if the bug was a somewhat recent introduction. Not necessarily in the past few months, but maybe the past 2-4 years due to changes in hotspot that were not correctly handled in SA.;;;","2023-09-24 18:34;dholmes;But this would have to be lack of any testing, by anyone, as this just could not work if so fundamentally flawed.;;;","2023-09-24 18:38;dholmes;This code was introduced by JDK-8259008, so not that long ago in HS terms.;;;","2023-09-24 18:47;dholmes;Okay so this code has been broken since introduced in JDK 17, but it is never apparently used. If I understand the test correctly there are always at least 2 used monitors in a running VM and the test finds at least one and so passes - not realising it finds the second rather than the first.;;;","2023-09-27 01:18;dukebot;Changeset: 50a7a04e
Author:    Axel Boldt-Christmas <aboldtch@openjdk.org>
Date:      2023-09-27 08:16:34 +0000
URL:       https://git.openjdk.org/jdk/commit/50a7a04e9adef8d6e7adffb83b01d551e22cd910
;;;",,,,,,,,,,,,,,,,,,,,
compiler/compilercontrol/TestConflictInlineCommands.java fails intermittent with force inline by CompileCommand missing,JDK-8316411,5110472,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,mbaesken,mbaesken,mbaesken,2023-09-18 01:01,2023-09-25 11:27,2023-10-01 09:55,2023-09-20 02:12,21,22,,,,,,22,hotspot,,0,amazon-interest,compilercontrol,intermittent,noreg-self,oracle-triage-22,,,,,,,,,,,,,,,"we run sometimes into this error (especially on some virtualized windows machines) :

java.lang.RuntimeException: 'force inline by CompileCommand' missing from stdout/stderr
	at jdk.test.lib.process.OutputAnalyzer.shouldContain(OutputAnalyzer.java:221)
	at compiler.compilercontrol.TestConflictInlineCommands.main(TestConflictInlineCommands.java:63)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
	at java.base/java.lang.reflect.Method.invoke(Method.java:580)
	at com.sun.javatest.regtest.agent.MainActionHelper$AgentVMRunnable.run(MainActionHelper.java:333)
	at java.base/java.lang.Thread.run(Thread.java:1570)

Maybe we do not reach the ""force inline"" action so the output is missing.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8270459,,,,,,,,,,,x86,,,,,,,,,windows,,,,,"0|i335fv:",9223372036854775807,b16,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2023-09-18 02:06;thartmann;ILW = Test fails because expected output is missing (probably test bug), intermittent with single test, no workaround = MLH = P4;;;","2023-09-18 03:51;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/15783
Date: 2023-09-18 10:43:19 +0000;;;","2023-09-20 02:12;dukebot;Changeset: e1870d36
Author:    Matthias Baesken <mbaesken@openjdk.org>
Date:      2023-09-20 09:08:52 +0000
URL:       https://git.openjdk.org/jdk/commit/e1870d360e05c372e672b519d7de2a60c333675b
;;;",,,,,,,,,,,,,,,,,,,,,,,,
"sun/tools/jhsdb/JStackStressTest.java failed with ""InternalError: We should have found a thread that owns the anonymous lock""",JDK-8316401,5110463,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,rkennke,dcubed,dcubed,2023-09-17 19:00,2023-09-29 04:19,2023-10-01 09:55,2023-09-29 04:15,22,,,,,,,22,hotspot,,0,intermittent,tier5,tier6,,,,,,,,,,,,,,,,,"The following test failed in an adhoc Tier5 job that is testing:

    JDK-8315880 Change LockingMode default from LM_LEGACY to LM_LIGHTWEIGHT

Here's a snippet from the log file:

#section:main
----------messages:(7/346)----------
command: main JStackStressTest
reason: User specified action: run main/timeout=240 JStackStressTest 
started: Sun Sep 17 22:21:56 UTC 2023
Mode: othervm [test requires non-default system module]
Additional options from @modules: --add-modules jdk.hotspot.agent,java.management
finished: Sun Sep 17 22:22:08 UTC 2023
elapsed time (seconds): 11.96
----------configuration:(3/61)----------
Boot Layer
  add modules: jdk.hotspot.agent java.management

----------System.out:(135/8723)----------
Starting Jshell
[JShell]:/opt/mach5/mesos/work_dir/jib-master/install/2023-09-17-1736580.daniel.daugherty.8315880_for_jdk22.git/linux-x64-debug.jdk/jdk-22/fastdebug/bin/jshell -J-Xmx768m -J-XX:MaxRAMPercentage=4.16667 -J-Dtest.boot.jdk=/opt/mach5/mesos/work_dir/jib-master/install/jdk/20/36/bundles/linux-x64/jdk-20_linux-x64_bin.tar.gz/jdk-20 -J-Djava.io.tmpdir=/opt/mach5/mesos/work_dir/slaves/cd627e65-f015-4fb1-a1d2-b6c9b8127f98-S179455/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/647b6357-7ad2-47b6-a884-93007503a691/runs/fb791c2d-470c-40ea-99a6-ffd196fc0b7a/testoutput/test-support/jtreg_open_test_jdk_svc_tools/tmp -J-ea -J-esa
[2023-09-17T22:21:56.889643057Z] Gathering output for process 590799
###### Starting jstack iteration 1 against 590799
[2023-09-17T22:21:57.092332068Z] Gathering output for process 590855
[2023-09-17T22:21:59.775374274Z] Waiting for completion for process 590855
[2023-09-17T22:21:59.775620992Z] Waiting for completion finished for process 590855
Output and diagnostic info for process 590855 was saved into 'pid-590855-output.log'
jhsdb jstack stdout:
Attaching to process ID 590799, please wait...
Debugger attached successfully.
Server compiler detected.
JVM version is 22-internal-2023-09-17-1736580.daniel.daugherty.8315880forjdk22.git
Deadlock Detection:

No deadlocks found.

""main"" #1 prio=5 tid=0x00007f5b6802b560 nid=590802 runnable [0x00007f5b6de81000]
   java.lang.Thread.State: RUNNABLE
   JavaThread state: _thread_in_vm
 - java.util.stream.Nodes.builder() @bci=0, line=179 (Interpreted frame)
 - java.util.stream.Nodes.builder(long, java.util.function.IntFunction) @bci=26, line=169 (Interpreted frame)
 - java.util.stream.ReferencePipeline.makeNodeBuilder(long, java.util.function.IntFunction) @bci=2, line=135 (Interpreted frame)
 - java.util.stream.AbstractPipeline.evaluate(java.util.Spliterator, boolean, java.util.function.IntFunction) @bci=23, line=573 (Interpreted frame)
 - java.util.stream.AbstractPipeline.evaluateToArrayNode(java.util.function.IntFunction) @bci=74, line=260 (Interpreted frame)
 - java.util.stream.ReferencePipeline.toArray(java.util.function.IntFunction) @bci=4, line=616 (Interpreted frame)
 - jdk.internal.jshell.tool.JShellTool$Options.selectOptions(java.util.function.Predicate) @bci=35, line=326 (Interpreted frame)
 - jdk.internal.jshell.tool.JShellTool$Options.remoteVmOptions() @bci=6, line=330 (Interpreted frame)
 - jdk.internal.jshell.tool.JShellTool.resetState() @bci=148, line=1106 (Interpreted frame)
 - jdk.internal.jshell.tool.JShellTool.start(java.lang.String[]) @bci=44, line=955 (Interpreted frame)
 - jdk.internal.jshell.tool.JShellToolBuilder.start(java.lang.String[]) @bci=5, line=261 (Interpreted frame)
 - jdk.internal.jshell.tool.JShellToolProvider.main(java.lang.String[]) @bci=4, line=120 (Interpreted frame)

<snip>

jhsdb jstack stderr:

###### End of all output for iteration 1 which took 2711ms
[2023-09-17T22:21:59.781166361Z] Waiting for completion for process 590855
[2023-09-17T22:21:59.781288311Z] Waiting for completion finished for process 590855
###### Starting jstack iteration 2 against 590799
[2023-09-17T22:21:59.799234929Z] Gathering output for process 591292
[2023-09-17T22:22:01.895444885Z] Waiting for completion for process 591292
[2023-09-17T22:22:01.895737860Z] Waiting for completion finished for process 591292
Output and diagnostic info for process 591292 was saved into 'pid-591292-output.log'
jhsdb jstack stdout:
Attaching to process ID 590799, please wait...
Debugger attached successfully.
Server compiler detected.
JVM version is 22-internal-2023-09-17-1736580.daniel.daugherty.8315880forjdk22.git
Deadlock Detection:


jhsdb jstack stderr:
java.lang.InternalError: We should have found a thread that owns the anonymous lock
	at jdk.hotspot.agent/sun.jvm.hotspot.runtime.Threads.owningThreadFromMonitor(Threads.java:244)
	at jdk.hotspot.agent/sun.jvm.hotspot.runtime.DeadlockDetector.print(DeadlockDetector.java:88)
	at jdk.hotspot.agent/sun.jvm.hotspot.runtime.DeadlockDetector.print(DeadlockDetector.java:39)
	at jdk.hotspot.agent/sun.jvm.hotspot.tools.StackTrace.run(StackTrace.java:62)
	at jdk.hotspot.agent/sun.jvm.hotspot.tools.StackTrace.run(StackTrace.java:45)
	at jdk.hotspot.agent/sun.jvm.hotspot.tools.JStack.run(JStack.java:67)
	at jdk.hotspot.agent/sun.jvm.hotspot.tools.Tool.startInternal(Tool.java:278)
	at jdk.hotspot.agent/sun.jvm.hotspot.tools.Tool.start(Tool.java:241)
	at jdk.hotspot.agent/sun.jvm.hotspot.tools.Tool.execute(Tool.java:134)
	at jdk.hotspot.agent/sun.jvm.hotspot.tools.JStack.runWithArgs(JStack.java:90)
	at jdk.hotspot.agent/sun.jvm.hotspot.SALauncher.runJSTACK(SALauncher.java:302)
	at jdk.hotspot.agent/sun.jvm.hotspot.SALauncher.main(SALauncher.java:500)

###### End of all output for iteration 2 which took 2112ms
[2023-09-17T22:22:01.896570437Z] Waiting for completion for process 591292
[2023-09-17T22:22:01.896724810Z] Waiting for completion finished for process 591292
[2023-09-17T22:22:01.896844778Z] Waiting for completion for process 591292
[2023-09-17T22:22:01.896938326Z] Waiting for completion finished for process 591292
[2023-09-17T22:22:01.910460800Z] Waiting for completion for process 591292
[2023-09-17T22:22:01.910652533Z] Waiting for completion finished for process 591292
[JShell] |  Welcome to JShell -- Version 22-internal
[JShell] |  For an introduction type: /help intro
[JShell] |  Goodbye
jshell Output: |  Welcome to JShell -- Version 22-internal
|  For an introduction type: /help intro
|  Goodbye

jshell> 
----------System.err:(40/2464)----------
 stdout: [Attaching to process ID 590799, please wait...
Debugger attached successfully.
Server compiler detected.
JVM version is 22-internal-2023-09-17-1736580.daniel.daugherty.8315880forjdk22.git
Deadlock Detection:

];
 stderr: [java.lang.InternalError: We should have found a thread that owns the anonymous lock
	at jdk.hotspot.agent/sun.jvm.hotspot.runtime.Threads.owningThreadFromMonitor(Threads.java:244)
	at jdk.hotspot.agent/sun.jvm.hotspot.runtime.DeadlockDetector.print(DeadlockDetector.java:88)
	at jdk.hotspot.agent/sun.jvm.hotspot.runtime.DeadlockDetector.print(DeadlockDetector.java:39)
	at jdk.hotspot.agent/sun.jvm.hotspot.tools.StackTrace.run(StackTrace.java:62)
	at jdk.hotspot.agent/sun.jvm.hotspot.tools.StackTrace.run(StackTrace.java:45)
	at jdk.hotspot.agent/sun.jvm.hotspot.tools.JStack.run(JStack.java:67)
	at jdk.hotspot.agent/sun.jvm.hotspot.tools.Tool.startInternal(Tool.java:278)
	at jdk.hotspot.agent/sun.jvm.hotspot.tools.Tool.start(Tool.java:241)
	at jdk.hotspot.agent/sun.jvm.hotspot.tools.Tool.execute(Tool.java:134)
	at jdk.hotspot.agent/sun.jvm.hotspot.tools.JStack.runWithArgs(JStack.java:90)
	at jdk.hotspot.agent/sun.jvm.hotspot.SALauncher.runJSTACK(SALauncher.java:302)
	at jdk.hotspot.agent/sun.jvm.hotspot.SALauncher.main(SALauncher.java:500)
]
 exitValue = 1

[JShell] jshell> 
java.lang.RuntimeException: Test ERROR java.lang.RuntimeException: Expected to get exit value of [0], exit value is: [1]
	at JStackStressTest.testjstack(JStackStressTest.java:78)
	at JStackStressTest.main(JStackStressTest.java:107)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
	at java.base/java.lang.reflect.Method.invoke(Method.java:580)
	at com.sun.javatest.regtest.agent.MainWrapper$MainTask.run(MainWrapper.java:138)
	at java.base/java.lang.Thread.run(Thread.java:1570)
Caused by: java.lang.RuntimeException: Expected to get exit value of [0], exit value is: [1]
	at jdk.test.lib.process.OutputAnalyzer.shouldHaveExitValue(OutputAnalyzer.java:490)
	at JStackStressTest.testjstack(JStackStressTest.java:70)
	... 5 more

JavaTest Message: Test threw exception: java.lang.RuntimeException: Test ERROR java.lang.RuntimeException: Expected to get exit value of [0], exit value is: [1]
JavaTest Message: shutting down test

STATUS:Failed.`main' threw exception: java.lang.RuntimeException: Test ERROR java.lang.RuntimeException: Expected to get exit value of [0], exit value is: [1]
----------rerun:(38/7573)*----------

This error mesg from jhsdb:

> jhsdb jstack stderr:
> java.lang.InternalError: We should have found a thread that owns the
> anonymous lock

could indicate a bug in the LM_LIGHTWEIGHT locking code.
I have not seen any sightings of this test failing like this in
the Oracle CIs. I'm starting this bug off in hotspot/runtime for
initial triage.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8315880,,,,JDK-8316148,JDK-8316417,,,,,,,,,,x86_64,,,,,,,,,linux,,,,,"0|i335dv:",9223372036854775807,master,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@714e388c,,,,,,,,,"2023-09-18 14:41;dholmes;Note this test was only just removed from the ProblemList - see JDK-8316148;;;","2023-09-18 14:53;dcubed;Thanks for the heads up!;;;","2023-09-19 11:16;mseledtsov;Runtime Triage: change the sub-component to SA because it looks like SA might need to know about anonymous owners for light-weight locking mode.;;;","2023-09-19 14:59;cjplummer;I don't believe this relates to the reason the test was problem listed. More likely it has to do with using LM_LIGHTWEIGHT.

I wonder if this is related to the problem seen in JDK-8316417, which is currently out for review. Although JDK-8316417 was only noticed by observation, not any test failure, I wonder if using LM_LIGHTWEIGHT has made it start to cause a problem with this test, and fix for JDK-8316417 will fix this CR also.

UPDATE: Actually now I don't think this issue will be addressed by JDK-8316417. I think Mikhailo is closer to pointing out the underlying issue.;;;","2023-09-21 14:12;dcubed;The fix for:

JDK-8315880 Change LockingMode default from LM_LEGACY to LM_LIGHTWEIGHT

was integrated in jdk-22+17-1240 and this failure in the JDK22 CI happened after
that integration.;;;","2023-09-22 09:46;dcubed;[~mseledtsov]
> it looks like SA might need to know about anonymous owners for light-weight locking mode.

Based on this part of the error mesg:
> We should have found a thread that owns the anonymous lock

I think we have at least some support for LM_LIGHTWEIGHT locking
in SA. ""anonymous lock"" is a concept that came in with that code IIRC...;;;","2023-09-24 16:57;dholmes;FWIW we are starting to see a number of new bugs being filed with regard to broken locking with the new locking mode ref: JDK-8316746, JDK-8316751.;;;","2023-09-25 07:39;rkennke;I am trying to reproduce. In the meantime, can you confirm if the relevant SA code runs only at a safepoint? Because if not, then this would be a race.;;;","2023-09-25 08:01;rkennke;Is there anything special needed to reproduce the failure? I'm trying:
CONF=linux-x86_64-server-fastdebug make run-test TEST='sun/tools/jhsdb/JStackStressTest.java'

But several attempts did not fail.;;;","2023-09-25 08:06;cjplummer;[~rkennke]

> I am trying to reproduce. In the meantime, can you confirm if the relevant SA code runs only at a safepoint? Because if not, then this would be a race. 

I can confirm that that is NOT the case. SA can attach to the JVM at any point during the JVM's execution. Hotspot data structures can possibly be in an inconsistent state when the attach is done (or the core is dump). SA attempts to at least detect errors and catch exceptions that arise from this, but often falls on it's face when the timing of the attach is ""unfortunate"".;;;","2023-09-25 08:08;cjplummer;I should add that in order to avoid many test failures due to this, we try to make sure the test's debuggee process has reach some sort of stable point, and is hopefully idle at the time of the attach.;;;","2023-09-25 08:16;cjplummer;This particular test is one that does attach to an active process, and then does a stack dump. SA is expected to have issues on occasion with the stack dump, but SA to deal with them gracefully, and not produce ""Error"" messages or exit with an exception. So if anything the issue here might just be that the error message and exception is unexpected, but the error itself is not. SA might just need to learn to expect this issue during the deadlock detection.;;;","2023-09-25 08:55;rkennke;Ok, that is interesting to know. So I think that this particular code path should not iterate threads to begin with. If it encounters an anon-locked object, it should just say so (or ignore it). Iterating threads outside of a safepoint might not only lead to wrong results, IOW, threads would change their locked state at any time, but even worse, they may go out of existence or new threads may appear, possibly leading to crashes or other errors.

It looks to me like this code is only ever called from printing code. And since it's unprecise to begin with for the above mentioned reasons, even with the old stack-locking impl, we could simply remove the line that throws the exception and return null instead.

It looks to me like the old stack-locking code (in owningThreadFromMonitor(Address)) also iterates threads. Is that safe (enough)? In particular, when new threads are added to the threads list or threads cease to exist?;;;","2023-09-25 09:26;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/15907
Date: 2023-09-25 16:16:51 +0000;;;","2023-09-25 10:41;cjplummer;SA makes a best effort to do whatever the user requested, with the understanding that there may be inaccuracies or errors (exceptions) due to the inconsistent state of the JVM. So it has a ""try and and prepare to fail approach"". If it had a ""don't try because it might not be safe approach"", most of the SA functionality would be eliminated.;;;","2023-09-25 18:06;dholmes;[~cjplummer] surely jstack does its thread dump and deadlock detection at a safepoint? It could not reasonably work otherwise.;;;","2023-09-25 18:46;cjplummer;It is not (usually) at a safepoint, and it does (usually) still work well. However, the whole point of this test is to at least sometime have the JVM in a state where it can't work, and make sure there is some sort of reasonable or graceful failure. The SA jstack code is suppose to catch these failures and print a warning message, and not allow the failure exception to propagate, resulting in an exit(1).

Note SA is mostly meant for debugging a hung or crashed process (core dump) where there is little else that can be done but attempt to get data from a JVM whose current state my be inconsistent. This is very different from the jcmd jstack or attach API stackdump (dumpstack?) support, which is done on a running JVM that can be forced to safepoint (if it is not stuck) before dumping the stack. If the process is stuck, then you are back to using SA.;;;","2023-09-25 18:50;dholmes;If the thread snapshot and heap snapshot are not taken together atomically - which they are not for a live process - then the two can easily be inconsistent with each other. In that case any ""errors"" should not produce warnings because there is nothing (likely) wrong with the application code and so nothing for the end user to fix based on the warning. The flaw is in the SA methodology when applied to live processes.;;;","2023-09-25 19:02;cjplummer;There is no snapshot. The process is suspended and its thread and memory state are analyzed. There is no execution of the process while this is done. If SA resumes the process (which is what SA calls a ""detach""), then SA drops all knowledge it had of the process that it learned while it was suspended, and will start from scratch the next time the process is attached to and suspended again.;;;","2023-09-25 19:11;dholmes;Ah! Now I understand. So not at a safepoint but in a fixed state.

In that case this is not a SA issue as the anonymous owner should indeed be found.;;;","2023-09-26 21:30;dholmes;[~cjplummer] had a theory that we may be inspecting things during a GC and so the target oop may have been moved, but the move is not yet reflected in the oop stored in the lockStack - hence it is not found. This seems to be the case. I added some diagnostics to print information about the target object and the threads and their lockstacks at the time of the failure. Here is the object we are looking for:

Oop for com/sun/tools/jdi/EventSetImpl @ 0x00000000d07fd688 (object size = 40)
 - _mark:	 {0} :3494956595
 - _metadata._compressed_klass:	 {8} :InstanceKlass for com/sun/tools/jdi/EventSetImpl
 - modCount:	 {12} :0
 - elementData:	 {20} :ObjArray @ 0x00000000d004ac18
 - size:	 {16} :0
 - vm:	 {28} :Oop for com/sun/tools/jdi/VirtualMachineImpl @ 0x00000000d076a9f0
 - pkt:	 {32} :Oop for com/sun/tools/jdi/Packet @ 0x00000000d07fd5f8
 - suspendPolicy:	 {24} :0
 - internalEventSet:	 {36} :null

and here is the lockStack[0] entry for the ""JDI Internal Event Handler""

Oop for com/sun/tools/jdi/EventSetImpl @ 0x00000000d050ce30 (object size = 40)
 - _mark:	 {0} :2143279601282
 - _metadata._compressed_klass:	 {8} :InstanceKlass for com/sun/tools/jdi/EventSetImpl
 - modCount:	 {12} :0
 - elementData:	 {20} :ObjArray @ 0x00000000d004ac18
 - size:	 {16} :0
 - vm:	 {28} :Oop for com/sun/tools/jdi/VirtualMachineImpl @ 0x00000000d076a9f0
 - pkt:	 {32} :Oop for com/sun/tools/jdi/Packet @ 0x00000000d07fd5f8
 - suspendPolicy:	 {24} :0
 - internalEventSet:	 {36} :null

Whilst the ""addresses"" of these two oops are different, the fields appear to have the same values, indicating they are in fact the same object. Also note that the oop we are looking for has a markWord that indicates that the oop has been marked by the GC.;;;","2023-09-26 23:40;dlong;Nice catch.  The mark word of the first object has the same value 0xd050ce33 as the second object, so it appears the first is being forwarded to the second.  Does this mean there is a missing resolve() call?;;;","2023-09-27 08:21;cjplummer;[~dholmes]For EventSetImpl objects, elementData and pkt fields being the same is  sure sign that they are the same objects.

[~dlong] Well, not missing, but GC hasn't gotten to it yet. This is the type of situation that can arise what when SA inspects the JVM while it's in the middle of a GC.;;;","2023-09-27 15:12;dholmes;Thanks [~dlong] I had missed that! As Chris says this is just an intermediate state that we happen to observe. I'm wondering though whether we can detect that a GC is in progress and so report the owner can't be located rather than we have an error.

In theory we could teach the SA to look for forwarding pointers but I'm not sure it is worth the effort - we need to examine the internals of every object the lockStacks. And we would need to check in both directions. It may also be something that is GC specific.

So I think all we can do here in this JBS issue is change the error message to something less dramatic.;;;","2023-09-27 19:15;cjplummer;>  So I think all we can do here in this JBS issue is change the error message to something less dramatic. 

There error message isn't the problem. It's the exception being thrown. So the fix is don't throw the exception and instead provide just the error (or warning) message. ;;;","2023-09-27 21:40;dholmes;Yep sorry that is what I meant.;;;","2023-09-29 04:15;dukebot;Changeset: bd918f49
Author:    Roman Kennke <rkennke@openjdk.org>
Date:      2023-09-29 11:14:13 +0000
URL:       https://git.openjdk.org/jdk/commit/bd918f49d29bcbc699e07b4ef8d23cfe1abd32df
;;;"
(zipfs) ZipFileSystem.readFullyAt does not tolerate short reads,JDK-8316391,5110444,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,alanb,alanb,alanb,2023-09-16 01:51,2023-09-20 22:22,2023-10-01 09:55,2023-09-17 04:54,22,,,,,,,22,core-libs,,0,noreg-hard,,,,,,,,,,,,,,,,,,,"readFullyAt should attempt to read len bytes, it doesn't currently work if the underlying read returns less bytes.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8306308,,,,,,,,,,,,,,,,,,,,,,,,,"0|i3359n:",9223372036854775807,b16,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@674604a9,,,,,,,,,"2023-09-16 08:01;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/15772
Date: 2023-09-16 09:07:09 +0000;;;","2023-09-17 04:54;dukebot;Changeset: f4403296
Author:    Alan Bateman <alanb@openjdk.org>
Date:      2023-09-17 11:53:12 +0000
URL:       https://git.openjdk.org/jdk/commit/f44032969f37948a49e5bd0ed6738aa4d93687da
;;;",,,,,,,,,,,,,,,,,,,,,,,,,
Open source few AWT applet tests,JDK-8316389,5110440,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,azvegint,azvegint,azvegint,2023-09-15 14:47,2023-09-27 18:21,2023-10-01 09:55,2023-09-26 14:23,17,21,22,,,,,22,client-libs,,0,amazon-interest,sn_152,test_sprint,,,,,,,,,,,,,,,,,"java/awt/Frame/FrameRepackTest/FrameRepackTest.java
java/awt/Frame/FrameResizeTest_1/FrameResizeTest_1.java
java/awt/Frame/FrameResizeTest_2/FrameResizeTest_2.java
java/awt/Frame/WindowMoveTest/WindowMoveTest.java",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i3358r:",9223372036854775807,b17,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@5a9b3fd3,,,,,,,,,"2023-09-18 05:44;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/15787
Date: 2023-09-18 12:35:47 +0000;;;","2023-09-26 14:24;dukebot;Changeset: 65227a3c
Author:    Alexander Zvegintsev <azvegint@openjdk.org>
Date:      2023-09-26 21:23:34 +0000
URL:       https://git.openjdk.org/jdk/commit/65227a3c64a9eaead7a7b2b94a5c2786f1b1bb4f
;;;",,,,,,,,,,,,,,,,,,,,,,,,,
NullPointerException in AbstractSAXParser after JDK-8306632,JDK-8316383,5110434,Bug,Resolved,JDK,JDK,software,duke,,,P2,Fixed,joehw,cushon,cushon,2023-09-15 13:48,2023-09-27 18:19,2023-10-01 09:55,2023-09-21 12:18,22,,,,,,,22,xml,,0,regression,,,,,,,,,,,,,,,,,,,"The following example crashes with a NullPointerException in the latest builds of JDK 22. I think the culprit is JDK-8306632:

```
class T {
  public static void main(String[] args) throws Exception {
    var reader = XMLReaderFactory.createXMLReader();
    reader.setFeature(""http://apache.org/xml/features/nonvalidating/load-external-dtd"", false);
  }
}
```

```
$ java -fullversion
openjdk full version ""22-ea+15-1134""
$ java T
Exception in thread ""main"" java.lang.NullPointerException: Cannot invoke ""jdk.xml.internal.XMLSecurityManager.setLimit(String, jdk.xml.internal.JdkProperty$State, Object)"" because ""this.securityManager"" is null
        at java.xml/com.sun.org.apache.xerces.internal.parsers.AbstractSAXParser.setFeature(AbstractSAXParser.java:1674)
        at T.main(T.java:5)
```",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8306632,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i3357f:",9223372036854775807,b17,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@11b5a46e,,,,,,,,,"2023-09-19 14:19;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/15828
Date: 2023-09-19 21:10:41 +0000;;;","2023-09-21 12:18;dukebot;Changeset: 4e571775
Author:    Joe Wang <joehw@openjdk.org>
Date:      2023-09-21 19:17:24 +0000
URL:       https://git.openjdk.org/jdk/commit/4e5717754ab3009c75869bf9f228820adb86dd98
;;;",,,,,,,,,,,,,,,,,,,,,,,,,
[11u] Backport 8170089: nsk/jdi/EventSet/resume/resume008: ERROR: suspendCounts don't match for : Common-Cleaner,JDK-8316380,5110430,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,clanger,clanger,clanger,2023-09-15 12:36,2023-09-20 03:41,2023-10-01 09:55,2023-09-20 03:38,11,,,,,,,11.0.22,hotspot,,0,jdk11u-fix-request,jdk11u-fix-yes,,,,,,,,,,,,,,,,,,The issue JDK-8170089: nsk/jdi/EventSet/resume/resume008: ERROR: suspendCounts don't match for : Common-Cleaner is not open. So we need to create a separate bug for a backport.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i3356j:",9223372036854775807,master,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@2846162a,,,,,,,,,"2023-09-15 12:42;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk11u-dev/pull/2133
Date: 2023-09-15 19:16:25 +0000;;;","2023-09-19 00:03;clanger;Fix request (11u)
Requesting backport of this test-only change to improve stability of regression testing. We've seen occasional failures that seem related, so this backport could help. Tested in GHA and SAP nightlies, no problems spotted.;;;","2023-09-20 03:38;dukebot;Changeset: d52e9ed1
Author:    Christoph Langer <clanger@openjdk.org>
Date:      2023-09-20 10:37:04 +0000
URL:       https://git.openjdk.org/jdk11u-dev/commit/d52e9ed182b0d1801da72d194a9b4108bf12c322
;;;",,,,,,,,,,,,,,,,,,,,,,,,
Open some swing tests 6,JDK-8316371,5110420,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,achung,achung,achung,2023-09-15 09:21,2023-09-29 00:56,2023-10-01 09:55,2023-09-27 16:21,17,21,22,,,,,22,client-libs,,0,amazon-interest,sn_152,test_sprint,,,,,,,,,,,,,,,,,Opening some closed swing tests,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,generic,,,,,,,,,generic,,,,,"0|i3354b:",9223372036854775807,master,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@568a5b31,,,,,,,,,"2023-09-21 14:55;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/15873
Date: 2023-09-21 21:45:49 +0000;;;","2023-09-27 16:21;dukebot;Changeset: d3a79b58
Author:    Alisen Chung <achung@openjdk.org>
Date:      2023-09-27 23:20:29 +0000
URL:       https://git.openjdk.org/jdk/commit/d3a79b5861be27227b8c28cb3acdce089b74c50b
;;;",,,,,,,,,,,,,,,,,,,,,,,,,
sun/security/pkcs11/PKCS11Test.java needs adjustment on Linux ppc64le Ubuntu 22,JDK-8316341,5110385,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,mbaesken,mbaesken,mbaesken,2023-09-15 01:10,2023-09-28 07:29,2023-10-01 09:55,2023-09-18 00:05,21,22,,,,,,22,security-libs,,0,jdk21u-fix-request,jdk21u-fix-yes,noreg-self,,,,,,,,,,,,,,,,,"Currently sun/security/pkcs11/PKCS11Test.java needs adjustment on Linux ppc64le Ubuntu 22, it does not find the NSS libs because the new file system locations are not handled, unlike on Linux x86_64 .",,,,,,,,,,,,JDK-8317252,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,ppc,,,,,,,,,linux,,,,,"0|i334wj:",9223372036854775807,b16,,,,,,,,,,,"2023-09-15 01:28;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/15759
Date: 2023-09-15 08:21:00 +0000;;;","2023-09-18 00:05;dukebot;Changeset: aa0ebeed
Author:    Matthias Baesken <mbaesken@openjdk.org>
Date:      2023-09-18 07:01:48 +0000
URL:       https://git.openjdk.org/jdk/commit/aa0ebeedb18c5fafb4a86a53e1b1f59f330f0eed
;;;","2023-09-25 07:00;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk21u/pull/204
Date: 2023-09-25 13:53:56 +0000;;;","2023-09-25 07:09;mbaesken;jdk21u backport request
I would like to have the patch in jdk21u as well, because the added Linux ppc64le handling is missing there so the related tests do not really work on these machines. The patch is low risk and applies cleanly.;;;",,,,,,,,,,,,,,,,,,,,,,,
(bf) Concurrency issue in DirectByteBuffer.Deallocator,JDK-8316337,5110381,Bug,Resolved,JDK,JDK,software,duke,,,P2,Fixed,pminborg,pminborg,pminborg,2023-09-15 00:10,2023-09-25 11:26,2023-10-01 09:55,2023-09-19 06:13,17,21,22,,,,,22,core-libs,,0,amazon-interest,,,,,,,,,,,,,,,,,,,"The DirectByteBuffer.Deallocator is run via a Cleaner which, in turn, is run in a separate thread. This means the deallocator must be thread-safe. However, this is not the case as it does not adhere to fundamental safe-publication rules and modifies its internal state with normal memory semantics.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i334vn:",9223372036854775807,b16,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@674604a9,,,,,,,,,"2023-09-15 00:46;pminborg;A similar problem exists for implementations of UnmapperProxy.;;;","2023-09-18 04:07;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/15784
Date: 2023-09-18 11:00:51 +0000;;;","2023-09-19 06:13;dukebot;Changeset: cf74b8c2
Author:    Per Minborg <pminborg@openjdk.org>
Date:      2023-09-19 13:10:51 +0000
URL:       https://git.openjdk.org/jdk/commit/cf74b8c2a32f33019a13ce80b6667da502cc6722
;;;",,,,,,,,,,,,,,,,,,,,,,,,
"[lw5] sync javac with the current JVMS, particularly assertions on new class attributes",JDK-8316325,5110371,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,vromero,vromero,vromero,2023-09-14 17:03,2023-09-19 14:37,2023-10-01 09:55,2023-09-19 14:37,repo-valhalla,,,,,,,repo-valhalla,tools,,0,lw5,lworld,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i334tf:",9223372036854775807,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4dca67bd,,,,,,,,,"2023-09-18 13:24;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/valhalla/pull/927
Date: 2023-09-18 20:17:01 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,,,
Generational ZGC: The SoftMaxHeapSize might be wrong when CDS decreases the MaxHeapSize,JDK-8316319,5110365,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,stefank,serb,serb,2023-09-14 13:08,2023-09-27 18:19,2023-10-01 09:55,2023-09-21 23:41,21,22,,,,,,22,hotspot,,0,21-bp,amazon-interest,genzgc,,,,,,,,,,,,,,,,,"The bug is found by the next test if executed on the systems with some particular amount of memory:
 ""runtime/cds/appcds/TestZGCWithCDS.java$ZGenerational""

To reproduce run the test under the docker and set the memory limit, the test passed if limit=3000m and fail if limit=30000m

docker run -m 30000m -v /home/ec2-user/path/:/path amazonlinux /bin/sh -c 'cd /path/ws/openjdk/jdk && /path/soft/jtreg/bin/jtreg -jdk:/path/ws/openjdk/jdk/build/linux-x86_64-server-release/images/jdk/ /path/ws/openjdk/jdk/test/hotspot/jtreg/runtime/cds/appcds/TestZGCWithCDS.java'


 stdout: [[0.098s][info][cds] Core region alignment: 4096
];
 stderr: [SoftMaxHeapSize must be less than or equal to the maximum heap size
Error: Could not create the Java Virtual Machine.
Error: A fatal exception has occurred. Program will exit.
]
 exitValue = 1

java.lang.RuntimeException: 'Dumping shared data to file:' missing from stdout/stderr
        at jdk.test.lib.process.OutputAnalyzer.shouldContain(OutputAnalyzer.java:221)
        at TestZGCWithCDS.main(TestZGCWithCDS.java:67)
        at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
        at java.base/java.lang.reflect.Method.invoke(Method.java:580)
        at com.sun.javatest.regtest.agent.MainWrapper$MainTa",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i334s3:",9223372036854775807,b17,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6b00f96c,,,,,,,,,"2023-09-19 11:26;mseledtsov;Runtime Triage: the option SoftMaxHeapSize is managed by GC code, changing sub-component to GC.;;;","2023-09-20 04:54;stefank;This is the scenario that causes this bug:
1) Generational ZGC sets SoftMaxHeapSize early in the VM initialization
2) CDS runs after (1) and decreases the MaxHeapSize with:
  if (MaxHeapSize > max_heap_size) {
    log_debug(cds)(""Setting MaxHeapSize to 4G for CDS dumping, original size = "" SIZE_FORMAT ""M"", MaxHeapSize/M);
    FLAG_SET_ERGO(MaxHeapSize, max_heap_size);
  }

I think this can be fixed by moving (1) to a later stage.;;;","2023-09-20 05:07;stefank;This can be reproduced with:
java -XX:+UseZGC -XX:+ZGenerational -Xshare:dump -version

It doesn't reproduce if you set either of -Xmx, MaxHeapSize, MaxRAMFraction, or MaxRamPrecentage.;;;","2023-09-20 05:46;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/15841
Date: 2023-09-20 12:40:22 +0000;;;","2023-09-21 23:41;dukebot;Changeset: fe862639
Author:    Stefan Karlsson <stefank@openjdk.org>
Date:      2023-09-22 06:38:45 +0000
URL:       https://git.openjdk.org/jdk/commit/fe862639e7ce40f5adef0e482b1fb9c718e061a3
;;;",,,,,,,,,,,,,,,,,,,,,,
Open source and convert manual Swing test,JDK-8316306,5110349,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,dnguyen,dnguyen,dnguyen,2023-09-14 10:06,2023-09-27 18:19,2023-10-01 09:55,2023-09-21 12:39,17,21,22,,,,,22,client-libs,,0,amazon-interest,sn_152,test_sprint,,,,,,,,,,,,,,,,,Convert JToolbar applet based test into main,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i334oj:",9223372036854775807,b17,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@568a5b31,,,,,,,,,"2023-09-18 17:15;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/15806
Date: 2023-09-19 00:07:33 +0000;;;","2023-09-21 12:41;dukebot;Changeset: d3e82183
Author:    Damon Nguyen <dnguyen@openjdk.org>
Date:      2023-09-21 19:37:47 +0000
URL:       https://git.openjdk.org/jdk/commit/d3e821838668a0ccc0ccd098336230975e27fd7c
;;;",,,,,,,,,,,,,,,,,,,,,,,,,
Initial buffer size of StackWalker is too small caused by JDK-8285447,JDK-8316305,5110347,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,mchung,mchung,mchung,2023-09-14 09:27,2023-09-27 18:20,2023-10-01 09:55,2023-09-22 11:39,22,,,,,,,22,core-libs,,0,noreg-other,,,,,,,,,,,,,,,,,,,"JDK-8285447 intends to change the initial batch size only for a stack walker  with an estimated stack depth.  For stack walkers without user-supplied estimated stack depth, the initial batch size is changed to 3 but it intends to stay with the original SMALL_BATCH value.  It will need to fetch the second batch after walking 2 frames versus 7 frames before JDK-8285447.

",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8285447,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i334o3:",9223372036854775807,b17,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4c088d55,,,,,,,,,"2023-09-14 10:12;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/15749
Date: 2023-09-14 17:06:53 +0000;;;","2023-09-22 11:39;dukebot;Changeset: 9b65b7dd
Author:    Mandy Chung <mchung@openjdk.org>
Date:      2023-09-22 18:38:06 +0000
URL:       https://git.openjdk.org/jdk/commit/9b65b7ddbe0696813c722dbfd2d97db3b301a7c1
;;;",,,,,,,,,,,,,,,,,,,,,,,,,
GenShen: Reduce frequency of expedited GC,JDK-8316299,5110340,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,kdnilsen,kdnilsen,kdnilsen,2023-09-14 08:15,2023-09-14 23:51,2023-10-01 09:55,2023-09-14 20:08,,,,,,,,,hotspot,,0,amazon-interest,genshen,,,,,,,,,,,,,,,,,,"Currently, we expedite young collections whenever there is memory to be promoted by evacuation or in place.  We have found this results in far too frequent young collections, with many young collections yielding minimal value.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i334mj:",9223372036854775807,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6b00f96c,,,,,,,,,"2023-09-14 08:28;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/shenandoah/pull/325
Date: 2023-09-14 15:21:53 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,,,
GenShen: Degenerated GCs fail to make progress,JDK-8316297,5110337,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,kdnilsen,kdnilsen,kdnilsen,2023-09-14 07:31,2023-09-14 23:51,2023-10-01 09:55,2023-09-14 17:13,,,,,,,,,hotspot,,0,amazon-interest,genshen,,,,,,,,,,,,,,,,,,"If concurrent GC degenerates during marking, the degen GC fails to make progress because the evacuation budget fails to include memory that had been reserved for the Collector.

Reproducer:

echo Run OpenJDKTip GenShen GC with memory size 54g with 6s customer period
>&2 echo Run OpenJDKTip GenShen GC with memory size 54g with 6s customer period
~/github/shenandoah.experiments.9-11-2023/build/linux-x86_64-server-release/jdk/bin/java \
  -XX:+UnlockExperimentalVMOptions \
  -XX:-ShenandoahPacing \
  -XX:+AlwaysPreTouch -XX:+DisableExplicitGC -Xms54g -Xmx54g \
  -XX:+UseShenandoahGC \
  -XX:ShenandoahGCMode=generational \
  -Xlog:""gc*=info,ergo"" \
  -XX:+UnlockDiagnosticVMOptions \
  -jar ~/github/heapothesys/Extremem/target/extremem-1.0-SNAPSHOT.jar \
  -dInitializationDelay=45s -dDictionarySize=16000000 -dNumCustomers=28000000 \
  -dNumProducts=64000 -dCustomerThreads=2000 -dCustomerPeriod=6s -dCustomerThinkTime=1s \
  -dKeywordSearchCount=4 -dServerThreads=5 -dServerPeriod=5s -dProductNameLength=10 \
  -dBrowsingHistoryQueueCount=5 \
  -dSalesTransactionQueueCount=5 \
  -dProductDescriptionLength=64 -dProductReplacementPeriod=25s -dProductReplacementCount=5 \
  -dCustomerReplacementPeriod=30s -dCustomerReplacementCount=1000 -dBrowsingExpiration=1m \
  -dPhasedUpdates=true \
  -dPhasedUpdateInterval=60s \
  -dSimulationDuration=20m -dResponseTimeMeasurements=100000

Build:
commit 69aa97198c4e71051492f368e37aa50fc75834ee (HEAD -> experiments-9-11, origin/master, origin/HEAD, master)
Author: William Kemper <wkemper@openjdk.org>
Date: Fri Sep 8 17:40:46 2023 +0000 ",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"2023-09-14 07:31;kdnilsen;54g.log.out;https://bugs.openjdk.org/secure/attachment/106422/54g.log.out",,,,,,,,,,,,,,,,,,,,,,"0|i334lv:",9223372036854775807,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6b00f96c,,,,,,,,,"2023-09-14 07:39;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/shenandoah/pull/324
Date: 2023-09-14 14:32:42 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,,,
AIX: Build fopen system call fails on file _BUILD_LIBJDWP_objectfilenames.txt,JDK-8316294,5110333,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,afarley,afarley,afarley,2023-09-14 07:04,2023-09-25 11:26,2023-10-01 09:55,2023-09-19 07:14,22,,,,,,,22,infrastructure,,0,,,,,,,,,,,,,,,,,,,,"During a build of OpenJDK head stream (aka 22), I've noticed that it fails 100% of the time on AIX.

Here is the error:

-----------------------
00:48:42  Compiling up to 359 files for jdk.compiler
00:49:17  Compiling up to 40 files for jdk.jcmd
00:49:22  ar: No such file or directory
00:49:22  ar: 0707-117 The fopen system call failed on file -f/home/jenkins/workspace/build-scripts/jobs/jdk/jdk-aix-ppc64-temurin/workspace/build/src/build/aix-ppc64-server-release/support/native/jdk.jdwp.agent/libjdwp/static/_BUILD_LIBJDWP_objectfilenames.txt.
-----------------------

After searching the bug db for issues, I found JDK-8307858, which appears to be the same issue but on OSX.

So I identified the platform-specific fix, and adapted it to apply to aix as well. This appears to solve the problem, and the build now completes.

Will create the PR and request approval.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8307858,,,,,,,,,,,ppc,,,,,,,,,aix,,,,,"0|i334kz:",9223372036854775807,b16,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@429c566,,,,,,,,,"2023-09-14 07:05;afarley;This bug relates to 8307858, but I don't think the entire backout/redo process is required. Just this platform-specific change.;;;","2023-09-14 07:07;afarley;PR raised: https://github.com/openjdk/jdk/pull/15743;;;","2023-09-14 07:13;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/15743
Date: 2023-09-14 14:07:20 +0000;;;","2023-09-19 07:14;dukebot;Changeset: 607bd4ed
Author:    Adam Farley <afarley@openjdk.org>
Committer: Christoph Langer <clanger@openjdk.org>
Date:      2023-09-19 14:13:40 +0000
URL:       https://git.openjdk.org/jdk/commit/607bd4ed849d2ad22d5f36ecbdf1fcaf93af519f
;;;",,,,,,,,,,,,,,,,,,,,,,,
Opensource JButton manual tests,JDK-8316285,5110321,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,abhiscxk,abhiscxk,abhiscxk,2023-09-14 03:12,2023-09-27 18:19,2023-10-01 09:55,2023-09-20 23:37,17,21,22,,,,,22,client-libs,,0,amazon-interest,sn_152,test_sprint,,,,,,,,,,,,,,,,,"JButton closed manual tests to be converted to automated main-based and opensourced

javax/swing/JButton/4490179/bug4490179.java
javax/swing/JButton/4234034/bug4234034.java
javax/swing/JButton/4323121/bug4323121.java",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i334ib:",9223372036854775807,b17,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@568a5b31,,,,,,,,,"2023-09-19 20:30;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/15831
Date: 2023-09-20 03:25:25 +0000;;;","2023-09-19 22:37;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/15835
Date: 2023-09-20 05:29:30 +0000;;;","2023-09-20 23:37;dukebot;Changeset: 9f5d2b94
Author:    Abhishek Kumar <abhiscxk@openjdk.org>
Date:      2023-09-21 06:35:34 +0000
URL:       https://git.openjdk.org/jdk/commit/9f5d2b947f7d70babba663e16882e480b8a973f2
;;;",,,,,,,,,,,,,,,,,,,,,,,,
JDK-8315818 broke JVMCIPrintProperties on libgraal,JDK-8316273,5110303,Bug,Resolved,JDK,JDK,software,duke,,,P5,Fixed,dnsimon,dnsimon,dnsimon,2023-09-14 01:00,2023-09-20 22:22,2023-10-01 09:55,2023-09-16 14:32,22,,,,,,,22,hotspot,,0,graal-related,jvmci,oracle-triage-22,regression,,,,,,,,,,,,,,,,"After JDK-8315818, it's possible for JVMCI initialization to happen prior to the forced initialization in Threads::create_vm. The former will happen on a compiler thread where as the latter happens on the main thread. This has the unfortunate side effect of JVMCI property printing happening twice.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8315818,JDK-8310055,,,,,,,,,,,,,,,,,,,,,,,,"0|i334eb:",9223372036854775807,b16,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2023-09-14 04:55;chagedorn;ILW = Property printing happens twice, only observed with -XX:+JVMCIPrintProperties, no workaround = LLH = P5;;;","2023-09-14 05:00;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/15739
Date: 2023-09-14 11:52:40 +0000;;;","2023-09-16 14:32;dukebot;Changeset: 4b8f5d03
Author:    Doug Simon <dnsimon@openjdk.org>
Date:      2023-09-16 21:31:23 +0000
URL:       https://git.openjdk.org/jdk/commit/4b8f5d031a081347ca611fa649cd75c4c1ec9fb3
;;;",,,,,,,,,,,,,,,,,,,,,,,,
Opensource SwingGraphics manual test,JDK-8316242,5110273,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,psadhukhan,psadhukhan,psadhukhan,2023-09-13 20:45,2023-09-20 22:21,2023-10-01 09:55,2023-09-14 08:52,17,21,22,,,,,22,client-libs,,0,amazon-interest,sn_152,test_sprint,,,,,,,,,,,,,,,,,"closed SwingGraphics manual applet tests to be converted to automated and opensourced

./javax/swing/SwingGraphics/TranslateTest/TranslateTest.java",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i3347n:",9223372036854775807,b16,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@568a5b31,,,,,,,,,"2023-09-14 06:13;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/15741
Date: 2023-09-14 13:06:18 +0000;;;","2023-09-14 08:52;dukebot;Changeset: a57b9dab
Author:    Prasanta Sadhukhan <psadhukhan@openjdk.org>
Date:      2023-09-14 15:50:03 +0000
URL:       https://git.openjdk.org/jdk/commit/a57b9dab6c02c313f3975f47d502dae270c67508
;;;",,,,,,,,,,,,,,,,,,,,,,,,,
Open source several add/remove MenuBar manual tests,JDK-8316240,5110271,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,azvegint,azvegint,azvegint,2023-09-13 19:55,2023-09-27 18:19,2023-10-01 09:55,2023-09-21 06:59,17,21,22,,,,,22,client-libs,,0,amazon-interest,sn_152,test_sprint,,,,,,,,,,,,,,,,,"java/awt/Frame/AddRemoveMenuBarTest_1/AddRemoveMenuBarTest_1.java
java/awt/Frame/AddRemoveMenuBarTest_2/AddRemoveMenuBarTest_2.java
java/awt/Frame/AddRemoveMenuBarTest_3/AddRemoveMenuBarTest_3.java
java/awt/Frame/AddRemoveMenuBarTest_4/AddRemoveMenuBarTest_4.java",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i33477:",9223372036854775807,b17,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@5a9b3fd3,,,,,,,,,"2023-09-18 14:41;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/15800
Date: 2023-09-18 21:35:01 +0000;;;","2023-09-21 06:59;dukebot;Changeset: 3809d69a
Author:    Alexander Zvegintsev <azvegint@openjdk.org>
Date:      2023-09-21 13:57:28 +0000
URL:       https://git.openjdk.org/jdk/commit/3809d69ac4b3d186ccdc336949b658e4671347c8
;;;",,,,,,,,,,,,,,,,,,,,,,,,,
jcmd tests are broken by 8314828,JDK-8316228,5110256,Bug,Resolved,JDK,JDK,software,duke,,,P1,Fixed,lmesnik,lmesnik,lmesnik,2023-09-13 16:33,2023-09-20 22:21,2023-10-01 09:55,2023-09-13 18:21,22,,,,,,,22,hotspot,,0,tier7,,,,,,,,,,,,,,,,,,,Tests fixed by JDK-8314828 still need vmTestbase.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8314828,,,,,,,,,,,,,,,,,,,,,,,,,"0|i3343v:",9223372036854775807,b16,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@2846162a,,,,,,,,,"2023-09-13 17:04;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/15731
Date: 2023-09-13 23:57:43 +0000;;;","2023-09-13 18:21;dukebot;Changeset: 11d431b2
Author:    Leonid Mesnik <lmesnik@openjdk.org>
Date:      2023-09-14 01:20:24 +0000
URL:       https://git.openjdk.org/jdk/commit/11d431b2c436d6b2a0aa7a00d676a93c1b87da0e
;;;",,,,,,,,,,,,,,,,,,,,,,,,,
Open some swing tests 5,JDK-8316218,5110243,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,achung,achung,achung,2023-09-13 12:47,2023-09-27 18:21,2023-10-01 09:55,2023-09-26 13:54,17,21,22,,,,,22,client-libs,,0,amazon-interest,sn_152,test_sprint,,,,,,,,,,,,,,,,,Opening some closed swing tests,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,generic,,,,,,,,,generic,,,,,"0|i3340z:",9223372036854775807,b17,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@568a5b31,,,,,,,,,"2023-09-21 14:42;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/15872
Date: 2023-09-21 21:36:52 +0000;;;","2023-09-26 13:54;dukebot;Changeset: 788e6e15
Author:    Alisen Chung <achung@openjdk.org>
Date:      2023-09-26 20:52:04 +0000
URL:       https://git.openjdk.org/jdk/commit/788e6e154824317cf92884510c2ee116bc64f510
;;;",,,,,,,,,,,,,,,,,,,,,,,,,
Open source several manual applet tests,JDK-8316211,5110234,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,azvegint,azvegint,azvegint,2023-09-13 09:08,2023-09-27 18:21,2023-10-01 09:55,2023-09-26 14:24,17,21,22,,,,,22,client-libs,,0,amazon-interest,sn_152,test_sprint,,,,,,,,,,,,,,,,,"java/awt/swing/Windows/DefaultCloseOperation.java
java/awt/LightweightComponent/LightweightCliprect/LightweightCliprect.java
java/awt/Frame/DefaultSizeTest/DefaultSizeTest.java
java/awt/event/KeyEvent/FunctionKeyTest/FunctionKeyTest.java",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8317107,JDK-8317112,,,,,,,,,,,,,,,,,,,,,,,,"0|i333yz:",9223372036854775807,b17,,,,,,,,,,,"2023-09-19 14:02;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/15827
Date: 2023-09-19 20:52:41 +0000;;;","2023-09-26 14:27;dukebot;Changeset: 2f311d59
Author:    Alexander Zvegintsev <azvegint@openjdk.org>
Date:      2023-09-26 21:24:07 +0000
URL:       https://git.openjdk.org/jdk/commit/2f311d59dcbbf7605e52fac0b8ebd35d7d51a48b
;;;",,,,,,,,,,,,,,,,,,,,,,,,,
Fix typos in java.io.StreamTokenizer,JDK-8316207,5110230,Bug,Resolved,JDK,JDK,software,duke,,,P5,Fixed,prappo,prappo,prappo,2023-09-13 08:35,2023-09-20 22:22,2023-10-01 09:55,2023-09-15 10:34,22,,,,,,,22,core-libs,,0,noreg-doc,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i333y3:",9223372036854775807,b16,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@5f132e58,,,,,,,,,"2023-09-13 08:52;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/15723
Date: 2023-09-13 15:43:45 +0000;;;","2023-09-15 10:34;dukebot;Changeset: 149acd18
Author:    Pavel Rappo <prappo@openjdk.org>
Date:      2023-09-15 17:32:41 +0000
URL:       https://git.openjdk.org/jdk/commit/149acd186ed68d290e22dc2c86e17f46ef68b124
;;;",,,,,,,,,,,,,,,,,,,,,,,,,
Test StretchedFontTest.java fails for Baekmuk font,JDK-8316206,5110229,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,aivanov,goetz,goetz,2023-09-13 08:20,2023-09-27 18:19,2023-10-01 09:55,2023-09-22 05:50,11.0.21,11.0.21-oracle,17.0.9,17.0.9-oracle,21.0.1,22,,22,client-libs,,0,cssn23_09_02,jdk11u-fix-request,jdk11u-fix-yes,jdk17u-fix-request,jdk17u-fix-yes,jdk21u-fix-request,jdk21u-fix-yes,noreg-self,sustaining,,,,,,,,,,,"We see test java/awt/font/FontScaling/StretchedFontTest.java failing since it was introduced in JDK-8312555.
It is failing on several SLES machines that have this font installed by default. It is not failing on RHEL machines.

From the .jtr file:

Font: Baekmuk Headline, Hint: off, Color: 0xff000000
Font: Baekmuk Headline, Hint: off, Color: 0x7f000000
Font: Baekmuk Headline, Hint: on, Color: 0xff000000
Font: Baekmuk Headline, Hint: on, Color: 0x7f000000
Font: Baekmuk Headline, Hint: lcd, Color: 0xff000000
Font: Baekmuk Headline, Hint: lcd, Color: 0x7f000000
java.lang.Error: 6 failure(s) found; the first one: Font: Baekmuk Headline, Hint: off, Color: 0xff000000
	at StretchedFontTest.main(StretchedFontTest.java:81)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
	at java.base/java.lang.reflect.Method.invoke(Method.java:580)
	at com.sun.javatest.regtest.agent.MainWrapper$MainTask.run(MainWrapper.java:138)
	at java.base/java.lang.Thread.run(Thread.java:1570)",,,,,,,,,,,,JDK-8317030,JDK-8316916,JDK-8316917,JDK-8317031,JDK-8316904,,,,,,,,,,,,,,,,,,,,,,JDK-8312555,,,,,,,"2023-09-18 11:42;aivanov;Baekmuk Headline in ScaledFont.png;https://bugs.openjdk.org/secure/attachment/106455/Baekmuk+Headline+in+ScaledFont.png","2023-09-19 06:03;aivanov;Baekmuk Headline in updated ScaledFont.png;https://bugs.openjdk.org/secure/attachment/106463/Baekmuk+Headline+in+updated+ScaledFont.png","2023-09-18 09:27;azvegint;failure_images.zip;https://bugs.openjdk.org/secure/attachment/106452/failure_images.zip",,,,,,,,,,,,b12,22,,,,,,,"0|i333xv:",9223372036854775807,b17,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4b09ce31,,,,,,,,,"2023-09-18 09:28;azvegint;Images for failed font are blank(attached).;;;","2023-09-18 09:54;aivanov;So, it looks the font lies that it can display the character — it displays nothing.;;;","2023-09-18 11:36;prr;I found Baekmuk Headline (hline.ttf) for download, and had a look at it.
It maps \u6f22 to glyph id 16950 .. but that glyph has zero length .. so do a load of adjacent ones.
So I'm not sure why anyone would want to include that font in their OS.

The test can be updated to check if the outline is empty and it it is then skip the (buggy) font.
;;;","2023-09-18 11:50;aivanov;Indeed, the glyph isn't rendered in ""Baekmuk Headline"" even though the font reports the code point is supported.

I used 漢 in the test. I can't remember how I chose this particular hieroglyph.

There are two ways:
1) choose a different hieroglyph;
2) verify the left side contains black pixels before verifying the right side.;;;","2023-09-19 06:18;aivanov;This ""Baekmuk Headline"" font seems to have many glyphs mapped to ‘clear glyph’. Yesterday I run an outdated version of ScaledFont.java (it's attached to JDK-8312555; the screenshot ""Baekmuk Headline in ScaledFont.png""), and it rendered the Japanese characters ありがとう (‘thank you’) but the Chinese characters 謝謝 (‘thank you’) weren't rendered.

The updated version uses 東京 and 北京 (‘Tokyo’ and ‘Beijing’ correspondingly), none of the characters are rendered as you can see on the screenshot ""Baekmuk Headline in updated ScaledFont.png"".

> I used 漢 in the test. I can't remember how I chose this particular hieroglyph.

Initially I wanted to count the percentage of white vs black pixels, so I looked for a glyph with a darker appearance. But this approach proved to be unreliable, searching for black pixels in the right half of the image is much simpler.;;;","2023-09-19 06:51;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/15818
Date: 2023-09-19 13:41:27 +0000;;;","2023-09-20 00:03;goetz;Alexey, thanks for addressing this right away!

I verified that the proposed fix works in our scenario.;;;","2023-09-22 05:34;aivanov;[~goetz] No problem!

Does the latest update still work? Just in case.

Would you like to approve the fix for the test?;;;","2023-09-22 05:43;goetz;Yes, our testing grabbed the latest update and is still green.;;;","2023-09-22 05:49;dukebot;Changeset: 00f585bd
Author:    Alexey Ivanov <aivanov@openjdk.org>
Date:      2023-09-22 12:47:01 +0000
URL:       https://git.openjdk.org/jdk/commit/00f585bd22f527eca0107a9b4ed366f25754f0be
;;;","2023-09-22 08:04;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk21u/pull/196
Date: 2023-09-22 14:58:27 +0000;;;","2023-09-22 08:05;aivanov;Fix request (21u)

Clean backport.
Test stabilisation to ignore broken fonts, the ""Baekmuk Headline"" font in particular.
Low risk, test-only change.;;;","2023-09-25 23:59;goetz;
Fix request [11u,17u]

I backport this for parity with 11.0.22-oracle,17.0.10-oracle.
No risk, only a test change.
Clean backport.
Test passes. SAP nightly testing passed.;;;","2023-09-26 00:11;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk11u-dev/pull/2147
Date: 2023-09-26 07:05:15 +0000;;;","2023-09-26 00:13;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/1790
Date: 2023-09-26 07:05:25 +0000;;;",,,,,,,,,,,,
"Modernize examples in StringTokenizer and {Date,Number}Format",JDK-8316187,5110210,Bug,Resolved,JDK,JDK,software,duke,,,P5,Fixed,prappo,prappo,prappo,2023-09-13 05:08,2023-09-20 22:22,2023-10-01 09:55,2023-09-16 00:53,22,,,,,,,22,core-libs,,0,noreg-doc,,,,,,,,,,,,,,,,,,,"This could use the enhanced for-statement introduced in JDK 1.5:

 * The following example illustrates how the {@code String.split}
 * method can be used to break up a string into its basic tokens:
 * <blockquote><pre>
 *     String[] result = ""this is a test"".split(""\\s"");
 *     for (int x=0; x&lt;result.length; x++)
 *         System.out.println(result[x]);
 * </pre></blockquote>
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i333tn:",9223372036854775807,b16,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@38ded199,,,,,,,,,"2023-09-13 05:48;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/15716
Date: 2023-09-13 12:39:00 +0000;;;","2023-09-16 00:53;dukebot;Changeset: c92bdb0e
Author:    Pavel Rappo <prappo@openjdk.org>
Date:      2023-09-16 07:51:34 +0000
URL:       https://git.openjdk.org/jdk/commit/c92bdb0e917e1251c0c2ef6b873df702b816c1f4
;;;",,,,,,,,,,,,,,,,,,,,,,,,,
RISC-V: SA stack walking code having trouble finding sender frame when invoking LambdaForms is involved,JDK-8316182,5110205,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,fjiang,fjiang,fjiang,2023-09-13 04:37,2023-09-20 22:22,2023-10-01 09:55,2023-09-15 03:07,22,,,,,,,22,hotspot,,0,,,,,,,,,,,,,,,,,,,,"Inspired by JDK-8313800. 
RISC-V also treats x8/fp as a callee-saved scratch register for some time, and it is freely used by C2-generated code. Therefore, any code in SA that uses getFP() in a compiled frame is very likely to come to grief.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,riscv,,,,,,,,,linux,,,,,"0|i333sj:",9223372036854775807,b16,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@714e388c,,,,,,,,,"2023-09-13 05:03;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/15714
Date: 2023-09-13 11:53:39 +0000;;;","2023-09-15 03:07;dukebot;Changeset: 42dc6b5d
Author:    Feilong Jiang <fjiang@openjdk.org>
Date:      2023-09-15 10:04:43 +0000
URL:       https://git.openjdk.org/jdk/commit/42dc6b5d3a620c208717d875eb4caa5dc74013f2
;;;",,,,,,,,,,,,,,,,,,,,,,,,,
Opensource JMenuBar manual test,JDK-8316164,5110183,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,psadhukhan,psadhukhan,psadhukhan,2023-09-13 02:39,2023-09-25 09:03,2023-10-01 09:55,2023-09-14 03:22,17,21,22,,,,,22,client-libs,,0,amazon-interest,sn_152,test_sprint,,,,,,,,,,,,,,,,,"closed JMenuBar manual applet tests to be converted to automated and opensourced

./javax/swing/JMenuBar/4403749/bug4403749.java",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8316356,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i333nn:",9223372036854775807,b16,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@568a5b31,,,,,,,,,"2023-09-13 06:08;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/15717
Date: 2023-09-13 13:00:28 +0000;;;","2023-09-14 03:22;dukebot;Changeset: 8f4dfc44
Author:    Prasanta Sadhukhan <psadhukhan@openjdk.org>
Date:      2023-09-14 10:21:44 +0000
URL:       https://git.openjdk.org/jdk/commit/8f4dfc443ba5820f5799fff1418d6632d502d57b
;;;",,,,,,,,,,,,,,,,,,,,,,,,,
Update BoxLayout sample image for crisper edges,JDK-8316159,5110178,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,aivanov,aivanov,aivanov,2023-09-13 01:11,2023-09-28 04:36,2023-10-01 09:55,2023-09-28 04:33,22,,,,,,,22,client-libs,,0,cssn23_09_01,noreg-doc,regression,regression_8313408,sustaining,,,,,,,,,,,,,,,"On a standard display with the scale of 100%, the BoxLayout sample has blurred edges.

It is the result of how SVG is rendered: the strokes fall between the pixel grid, therefore a 1-pixel wide stroke is blurred between the previous and the following pixels with 50% of colour on each pixel. It doesn't look as good.

The above is not an issue for High DPI displays. On the display with scale of 200%, the lines remain crisp.

The images of BoxLayout-1.svg rendered in Firefox on displays with scale 100% and 200% are attached.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8313408,,,,,,,"2023-09-13 01:09;aivanov;BoxLayout.svg-100%.png;https://bugs.openjdk.org/secure/attachment/106399/BoxLayout.svg-100%25.png","2023-09-13 01:10;aivanov;BoxLayout.svg-200%.png;https://bugs.openjdk.org/secure/attachment/106398/BoxLayout.svg-200%25.png",,,,,,,,,,,,,b12,22,,,,,,,"0|i333mj:",9223372036854775807,master,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@568a5b31,,,,,,,,,"2023-09-13 02:23;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/15703
Date: 2023-09-13 09:17:16 +0000;;;","2023-09-28 04:33;dukebot;Changeset: 3481ecb2
Author:    Alexey Ivanov <aivanov@openjdk.org>
Date:      2023-09-28 11:31:46 +0000
URL:       https://git.openjdk.org/jdk/commit/3481ecb25585d427f2c272e475c7f4ebbf60b799
;;;",,,,,,,,,,,,,,,,,,,,,,,,,
ByteArrayInputStream.transferTo causes MaxDirectMemorySize overflow,JDK-8316156,5110175,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,bpb,alanb,alanb,2023-09-13 00:29,2023-09-28 09:05,2023-10-01 09:55,2023-09-20 13:44,11,17,21,22,,,,22,core-libs,,0,amazon-interest,jdk21u-fix-request,,,,,,,,,,,,,,,,,,"Consider the following:
```
        try (FileChannel fc = FileChannel.open(file, CREATE, WRITE)) {
            OutputStream out = Channels.newOutputStream(fc);
            byte[] b = new byte[10*1024*1024];
            out.write(b);
        }
```
This will invoke FileChannel.write with a BB that is backed by the byte array, this needs to be copied into a direct buffer to do the actual I/O. In this case, it will allocate a temporary direct buffer of 10Mb.

There is an argument that the channel implementations should limit their direct memory usage but these are low-level classes. It may be better to limit the writes to the channels instead, e.g. ChannelOutputStream.writeFully could be work like this:

```
    private void writeFully(ByteBuffer bb) throws IOException {
        int pos = bb.position();
        int rem = bb.limit() - pos;
        while (rem > 0) {
            bb.limit(pos + Integer.min(rem, DEFAULT_BUFFER_SIZE));
            int n = ch.write(bb);
            if (n <= 0)
                throw new RuntimeException(""no bytes written"");
            pos += n;
            rem -=n;
        }
    }
```

",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i333lv:",9223372036854775807,b16,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@5f132e58,,,,,,,,,"2023-09-13 09:14;bpb;Failing due to limited direct memory may be reproduced as:

echo 'java.nio.file.Files.copy(new java.io.ByteArrayInputStream(new byte[256*1024*1024]), java.nio.file.Path.of(""/tmp/aaa""), java.nio.file.StandardCopyOption.REPLACE_EXISTING);' | jshell -R-XX:MaxDirectMemorySize=25M;;;","2023-09-13 15:14;bpb;A similar situation obtains when reading using ChannelInputStream. For example, if one invokes Files.readAllBytes on a large enough file, an OOME will be thrown.;;;","2023-09-20 13:40;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/15733
Date: 2023-09-14 03:05:50 +0000;;;","2023-09-20 13:44;dukebot;Changeset: 5cacf212
Author:    Brian Burkhalter <bpb@openjdk.org>
Date:      2023-09-20 20:42:31 +0000
URL:       https://git.openjdk.org/jdk/commit/5cacf212f066f5694d01f0891adfbe8b38660175
;;;",,,,,,,,,,,,,,,,,,,,,,,
Opensource JTextArea manual tests,JDK-8316154,5110168,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,psadhukhan,psadhukhan,psadhukhan,2023-09-12 22:33,2023-09-20 22:21,2023-10-01 09:55,2023-09-14 03:10,17,21,22,,,,,22,client-libs,,0,amazon-interest,sn_152,test_sprint,,,,,,,,,,,,,,,,,"JTextArea closed manual tests to be converted to automated main-based and opensourced

javax/swing/JTextArea/4265784/bug4265784.java",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i333kb:",9223372036854775807,b16,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@568a5b31,,,,,,,,,"2023-09-13 00:39;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/15700
Date: 2023-09-13 07:32:04 +0000;;;","2023-09-14 03:10;dukebot;Changeset: 33c62e4f
Author:    Prasanta Sadhukhan <psadhukhan@openjdk.org>
Date:      2023-09-14 10:09:08 +0000
URL:       https://git.openjdk.org/jdk/commit/33c62e4fffe33a7593fd0c01de53507bfd01dc3b
;;;",,,,,,,,,,,,,,,,,,,,,,,,,
Open source several Swing JTree JViewport KeyboardManager tests,JDK-8316149,5110163,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,dnguyen,dnguyen,dnguyen,2023-09-12 16:43,2023-09-25 11:28,2023-10-01 09:55,2023-09-20 09:20,17,21,22,,,,,22,client-libs,,0,amazon-interest,sn_152,test_sprint,,,,,,,,,,,,,,,,,"Convert JTree, JViewport, and KeyboardManager applet based tests into main ",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8316627,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i333j7:",9223372036854775807,b16,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@568a5b31,,,,,,,,,"2023-09-18 15:17;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/15802
Date: 2023-09-18 22:10:54 +0000;;;","2023-09-20 09:20;dukebot;Changeset: a021dbcb
Author:    Damon Nguyen <dnguyen@openjdk.org>
Date:      2023-09-20 16:19:37 +0000
URL:       https://git.openjdk.org/jdk/commit/a021dbcb9e58ab60abfc8c46ff25f3aa8ce3cc9f
;;;",,,,,,,,,,,,,,,,,,,,,,,,,
Incorrect control in LibraryCallKit::inline_native_notify_jvmti_funcs,JDK-8316130,5110141,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,thartmann,alanb,alanb,2023-09-12 08:48,2023-09-27 18:19,2023-10-01 09:55,2023-09-22 01:33,21,22,,,,,,22,hotspot,,0,amazon-interest,c2,c2-intrinsic,loom,noreg-hard,oracle-triage-22,regression,,,,,,,,,,,,,"Running into the following assert while testing some changes

#  Internal Error (/home/albatem/ws/jdk/open/src/hotspot/share/opto/loopnode.cpp:5523), pid=2082704, tid=2082731
#  assert(!in->is_CFG()) failed: CFG Node with no controlling input?

Current CompileTask:
C2:   1878 2115       4       java.lang.VirtualThread$VThreadContinuation$1::run (12 bytes)

Stack: [0x00007fde6d5f1000,0x00007fde6d6f1000],  sp=0x00007fde6d6ebd30,  free space=1003k
Native frames: (J=compiled Java code, j=interpreted, Vv=VM code, C=native code)
V  [libjvm.so+0x12970c6]  PhaseIdealLoop::build_loop_early(VectorSet&, Node_List&, Node_Stack&)+0x766  (loopnode.cpp:5523)
V  [libjvm.so+0x12a2d10]  PhaseIdealLoop::build_and_optimize()+0x5b0  (loopnode.cpp:4446)
V  [libjvm.so+0x9f0209]  PhaseIdealLoop::optimize(PhaseIterGVN&, LoopOptsMode)+0x3b9  (loopnode.hpp:1110)
V  [libjvm.so+0x9eb1c0]  Compile::Optimize()+0x820  (compile.cpp:2307)
V  [libjvm.so+0x9eefd0]  Compile::Compile(ciEnv*, ciMethod*, int, Options, DirectiveSet*)+0x1bb0  (compile.cpp:854)
V  [libjvm.so+0x849feb]  C2Compiler::compile_method(ciEnv*, ciMethod*, int, bool, DirectiveSet*)+0x13b  (c2compiler.cpp:119)
V  [libjvm.so+0x9faf40]  CompileBroker::invoke_compiler_on_method(CompileTask*)+0x980  (compileBroker.cpp:2285)
V  [libjvm.so+0x9fbd78]  CompileBroker::compiler_thread_loop()+0x5f8  (compileBroker.cpp:1946)
V  [libjvm.so+0xeb784c]  JavaThread::thread_main_inner()+0xcc  (javaThread.cpp:720)
V  [libjvm.so+0x17a2fea]  Thread::call_run()+0xba  (thread.cpp:220)
V  [libjvm.so+0x14a1bda]  thread_native_entry(Thread*)+0x12a  (os_linux.cpp:785)

The issue is duplicated by editing src/java.base/share/classes/java/lang/VirtualThread.java and remove @ChangesCurrentThread from the run(Runnable) method. This annotation is not needed on this method as it doesn't change the current thread.

With that change, run Skynet like this:

cd test/jdk/java/lang/Thread/virtual/stress
java -XX:NativeMemoryTracking=summary -XX:FlightRecorderOptions=preserve-repository=false -XX:StartFlightRecording=dumponexit=true,settings=profile Skynet.java 100

The assert goes away if the method is changed to have DontInline so this is something to do with the inlining of run(Runnable) into its caller.

",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8304303,,,,,,,,,,,,,,,,,,,,,,,,,"0|i333eb:",9223372036854775807,b17,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2023-09-13 00:46;thartmann;I can reproduce this. Removing @ChangesCurrentThread from VirtualThread::run allows inlining into VirtualThread$VThreadContinuation$1::run and enabling JFR is required because the run method calls some JFR specific methods. Unfortunately, replay compilation does not work because JFR can't be enabled with it.

java -XX:FlightRecorderOptions=preserve-repository=false -XX:StartFlightRecording=dumponexit=false,settings=profile -XX:CompileCommand=compileonly,java.lang.VirtualThread\$VThreadContinuation\$1::run Skynet.java 100

0x00007ffff6f34dd4 in PhaseIdealLoop::build_loop_early (this=this@entry=0x7fffd4449390, visited=..., worklist=..., nstack=...) at /oracle/jdk/open/src/hotspot/share/opto/loopnode.cpp:5528
5528	          assert( !in->is_CFG(), ""CFG Node with no controlling input?"" );
(gdb) p in->dump(3)
  385  ConI  === 0  [[ 3025 3771 3022 3242 4329 3020 3766 3017 972 4328 4322 3015 3762 3012 1019 4326 3010 3758 3006 4325 3004 3752 4165 3002 3117 3118 3119 185 4324 4023 4552 2520 4551 410 187 182 2774 2879 2098 1961 681 2738 2738 4127 3135 543 3136 544 3137 545 680 679 2124 678 1944 3504 2729 1421 1274 676 677 3681 3492 2699 4611 1253 1718 188 3647 1478 667 3461 666 3460 665 3459 3443 3442 3441 420 183 436 179 2647 1857 642 2615 2615 4066 641 640 184 639 1840 3399 2606 1171 637 2914 638 3387 2576 4571 1150 3241 3356 3355 3354 3338 3337 3336 3335 3334 929 4442 3333 466 4809 609 1761 607 607 608 606 606 605 605 604 580 178 2322 178 178 602 602 602 601 601 601 600 600 600 3305 599 599 599 3304 598 598 598 3168 3302 177 177 177 597 597 597 555 554 951 4944 2352 596 596 3181 596 595 595 595 1361 1361 1361 2046 594 594 1643 594 593 556 2394 582 557 558 592 2477 3905 583 591 591 2034 2034 2034 2361 2361 590 590 559 190 190 1660 589 589 588 588 3230 587 587 1728 1728 1346 1346 586 1038 585 585 586 584 426 ]]  #int:1
 1664  Bool  === _ 2378  [[ 972 ]] [ne] !jvms: VirtualThread::run @ bci:243 (line 325) VirtualThread$VThreadContinuation$1::run @ bci:8 (line 190)
 1663  IfFalse  === 2377  [[ 971 ]] #0 !jvms: VirtualThread::run @ bci:216 (line 317) VirtualThread$VThreadContinuation$1::run @ bci:8 (line 190)
 1662  CatchProj  === 2257  [[ 971 ]] #0@bci -1  !jvms: VirtualThread::run @ bci:239 (line 320) VirtualThread$VThreadContinuation$1::run @ bci:8 (line 190)
  972  Opaque4  === _ 1664 385  [[ 562 ]]  !jvms: VirtualThread::run @ bci:243 (line 325) VirtualThread$VThreadContinuation$1::run @ bci:8 (line 190)
  971  Region  === 971 1662 1663  [[ 971 562 2227 3018 2232 3016 4792 ]]  !jvms: VirtualThread::run @ bci:242 (line 325) VirtualThread$VThreadContinuation$1::run @ bci:8 (line 190)
  562  If  === 971 972  [[ 239 2231 ]] P=0,999999, C=-1,000000 !jvms: VirtualThread::run @ bci:243 (line 325) VirtualThread$VThreadContinuation$1::run @ bci:8 (line 190)
 2231  IfTrue  === 562  [[ 1544 ]] #1 !jvms: VirtualThread::run @ bci:243 (line 325) VirtualThread$VThreadContinuation$1::run @ bci:8 (line 190)

(gdb) p has_node(in->_in[0])
$7 = true

;;;","2023-09-13 04:43;thartmann;The problem is an incorrect control in LibraryCallKit::inline_native_notify_jvmti_funcs introduced by JDK-8304303. Workaround: -XX:DisableIntrinsic=_notifyJvmtiVThreadEnd

ILW = Assert in C2 due to incorrect control, reproducible with single virtual threads test + JFR + change to libraries, -XX:DisableIntrinsic=_notifyJvmtiVThreadEnd = HLM = P3;;;","2023-09-13 04:56;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/15713
Date: 2023-09-13 11:50:03 +0000;;;","2023-09-22 01:33;dukebot;Changeset: 4b654839
Author:    Tobias Hartmann <thartmann@openjdk.org>
Date:      2023-09-22 08:30:49 +0000
URL:       https://git.openjdk.org/jdk/commit/4b65483921ddadc9dd6c6e6c59b541673e3d2d88
;;;",,,,,,,,,,,,,,,,,,,,,,,
Ignore a single failing test case from Effects2Test,JDK-8316116,5110125,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,aghaisas,aghaisas,aghaisas,2023-09-12 05:10,2023-09-12 08:17,2023-10-01 09:55,2023-09-12 08:17,jfx21,,,,,,,jfx22,javafx,,0,noreg-self,sn_152,test_sprint,testbug,,,,,,,,,,,,,,,,"test/scenegraph/functional/graphics/Effects2Test.java has a total of 123 test cases. Out of which 122 test cases pass and 1 test case (Lightningspotlight) fails consistently. Right now, the root cause of this test failure is unknown.

This results in overall Effects2Test being marked as failed.
We should mark the failing test case as Ignored and fix it in future (https://bugs.openjdk.org/browse/JDK-8316117)
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8316117,,,,,,,,,,,generic,,,,,,,,,generic,,,,,"0|i333ar:",9223372036854775807,inapplicable,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@1d1c7815,,,,,,,,,"2023-09-12 07:47;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jfx-tests/pull/10
Date: 2023-09-12 14:38:12 +0000;;;","2023-09-12 08:17;roboduke;Changeset: 082013f8
Author:    Ajit Ghaisas <aghaisas@openjdk.org>
Date:      2023-09-12 15:13:58 +0000
URL:       https://git.openjdk.org/jfx-tests/commit/082013f873be6a020d0d25497397faa8ee8fb2f9
;;;",,,,,,,,,,,,,,,,,,,,,,,,,
Infinite permission checking loop in java/net/spi/InetAddressResolverProvider/RuntimePermissionTest,JDK-8316113,5110122,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,shade,shade,shade,2023-09-12 04:21,2023-09-18 15:31,2023-10-01 09:55,2023-09-12 11:15,21,22,,,,,,22,core-libs,,0,amazon-interest,jdk21u-fix-request,jdk21u-fix-yes,testbug,,,,,,,,,,,,,,,,"I am seeing the following failure very intermittently:

```
===============================================
java/net/spi/InetAddressResolverProvider/RuntimePermissionTest.java
Total tests run: 2, Passes: 0, Failures: 2, Skips: 0
===============================================

STDERR:
Sep 12, 2023 11:08:33 AM RuntimePermissionTest$TestSecurityManager <init>
INFO: inetAddressResolverProvider permission is not granted
WARNING: A terminally deprecated method in java.lang.System has been called
WARNING: System::setSecurityManager has been called by RuntimePermissionTest (file:/local/home/shipilev/shipilev-jdk/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_java_net_spi_InetAddressResolverProvider_RuntimePermissionTest_java/classes/0/java/net/spi/InetAddressResolverProvider/RuntimePermissionTest.d/)
WARNING: Please consider reporting this to the maintainers of RuntimePermissionTest
WARNING: System::setSecurityManager will be removed in a future release
Sep 12, 2023 11:08:33 AM RuntimePermissionTest$TestSecurityManager checkPermission
INFO: Checking RuntimePermission: (""java.lang.RuntimePermission"" ""getClassLoader"")
Sep 12, 2023 11:08:33 AM RuntimePermissionTest$TestSecurityManager checkPermission
INFO: Checking RuntimePermission: (""java.lang.RuntimePermission"" ""getClassLoader"")
Sep 12, 2023 11:08:33 AM RuntimePermissionTest$TestSecurityManager checkPermission
INFO: Checking RuntimePermission: (""java.lang.RuntimePermission"" ""getClassLoader"")
java.lang.StackOverflowError
        at java.base/java.util.stream.AbstractPipeline.wrapSink(AbstractPipeline.java:547)
        at java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:499)
        at java.base/java.util.stream.FindOps$FindOp.evaluateSequential(FindOps.java:150)
        at java.base/java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
        at java.base/java.util.stream.ReferencePipeline.findFirst(ReferencePipeline.java:647)
        at java.logging/java.util.logging.LogRecord$CallerFinder.lambda$get$1(LogRecord.java:784)
        at java.base/java.lang.StackStreamFactory$StackFrameTraverser.consumeFrames(StackStreamFactory.java:525)
        at java.base/java.lang.StackStreamFactory$AbstractStackWalker.doStackWalk(StackStreamFactory.java:328)
        at java.base/java.lang.StackStreamFactory$AbstractStackWalker.callStackWalk(Native Method)
        at java.base/java.lang.StackStreamFactory$AbstractStackWalker.beginStackWalk(StackStreamFactory.java:414)
        at java.base/java.lang.StackStreamFactory$AbstractStackWalker.walkHelper(StackStreamFactory.java:265)
        at java.base/java.lang.StackStreamFactory$AbstractStackWalker.walk(StackStreamFactory.java:257)
        at java.base/java.lang.StackWalker.walk(StackWalker.java:543)
        at java.logging/java.util.logging.LogRecord$CallerFinder.get(LogRecord.java:784)
        at java.logging/java.util.logging.LogRecord.inferCaller(LogRecord.java:757)
        at java.logging/java.util.logging.LogRecord.getSourceClassName(LogRecord.java:351)
        at java.logging/java.util.logging.SimpleFormatter.format(SimpleFormatter.java:163)
        at java.logging/java.util.logging.StreamHandler.publish0(StreamHandler.java:241)
        at java.logging/java.util.logging.StreamHandler.publish(StreamHandler.java:224)
        at java.logging/java.util.logging.ConsoleHandler.publish(ConsoleHandler.java:95)
```

The following part of the stack repeats often:

```
        at RuntimePermissionTest$TestSecurityManager.checkPermission(RuntimePermissionTest.java:88)
        at java.base/java.lang.Module.getClassLoader(Module.java:218)
        at java.base/java.security.AccessController.doPrivileged(AccessController.java:319)
        at java.base/java.lang.Class.forName(Class.java:622)
        at java.base/java.lang.Class.forName(Class.java:603)
        at java.base/sun.util.resources.Bundles.findBundleOf(Bundles.java:205)
        at java.base/sun.util.resources.Bundles.findBundleOf(Bundles.java:160)
        at java.base/sun.util.resources.Bundles.findBundleOf(Bundles.java:160)
        at java.base/sun.util.resources.Bundles.loadBundleOf(Bundles.java:145)
        at java.base/sun.util.resources.Bundles.of(Bundles.java:106)
        at java.base/sun.util.resources.LocaleData$1.run(LocaleData.java:185)
        at java.base/sun.util.resources.LocaleData$1.run(LocaleData.java:182)
        at java.base/java.security.AccessController.doPrivileged(AccessController.java:319)
        at java.base/sun.util.resources.LocaleData.getBundle(LocaleData.java:182)
        at java.base/sun.util.resources.LocaleData.getDateFormatData(LocaleData.java:145)
        at java.base/java.text.DateFormatSymbols.initializeData(DateFormatSymbols.java:745)
        at java.base/java.text.DateFormatSymbols.<init>(DateFormatSymbols.java:151)
        at java.base/sun.util.locale.provider.DateFormatSymbolsProviderImpl.getInstance(DateFormatSymbolsProviderImpl.java:85)
        at java.base/java.text.DateFormatSymbols.getProviderInstance(DateFormatSymbols.java:371)
        at java.base/java.text.DateFormatSymbols.getInstance(DateFormatSymbols.java:347)
        at java.base/java.util.Formatter$FormatSpecifier.print(Formatter.java:4411)
        at java.base/java.util.Formatter$FormatSpecifier.print(Formatter.java:4282)
        at java.base/java.util.Formatter$FormatSpecifier.printDateTime(Formatter.java:3105)
        at java.base/java.util.Formatter$FormatSpecifier.print(Formatter.java:3014)
        at java.base/java.util.Formatter.format(Formatter.java:2797)
        at java.base/java.util.Formatter.format(Formatter.java:2728)
        at java.base/java.lang.String.format(String.java:4386)
        at java.logging/java.util.logging.SimpleFormatter.format(SimpleFormatter.java:181)
        at java.logging/java.util.logging.StreamHandler.publish0(StreamHandler.java:241)
        at java.logging/java.util.logging.StreamHandler.publish(StreamHandler.java:224)
        at java.logging/java.util.logging.ConsoleHandler.publish(ConsoleHandler.java:95)
        at java.logging/java.util.logging.Logger.log(Logger.java:983)
        at java.logging/java.util.logging.Logger.doLog(Logger.java:1010)
        at java.logging/java.util.logging.Logger.log(Logger.java:1033)
        at java.logging/java.util.logging.Logger.info(Logger.java:1806)
        at RuntimePermissionTest$TestSecurityManager.checkPermission(RuntimePermissionTest.java:88)
```

...coming from here:

```

    static class TestSecurityManager extends SecurityManager {
        final boolean permitInetAddressResolver;

        public TestSecurityManager(boolean permitInetAddressResolver) {
            this.permitInetAddressResolver = permitInetAddressResolver;
            LOGGER.info(""inetAddressResolverProvider permission is "" +
                        (permitInetAddressResolver ? ""granted"" : ""not granted""));
        }

        @Override
        public void checkPermission(Permission permission) {
            if (permission instanceof RuntimePermission) {
                LOGGER.info(""Checking RuntimePermission: "" + permission); // <---- !!!
                if (RUNTIME_PERMISSION_NAME.equals(permission.getName()) && !permitInetAddressResolver) {
                    LOGGER.info(""Denying '"" + RUNTIME_PERMISSION_NAME + ""' permission"");
                    throw new SecurityException(""Access Denied: "" + RUNTIME_PERMISSION_NAME);
                }
            }
        }
    }
```

So when we call for `LOGGER.info` from our custom security manager, it goes into formatter, which loads locale data, which causes class load, which goes back to this custom security manager, starting the loop again.

(It is confusing to see StackWalker at the top of the stack, but I suspect that is because we were able to recover from one SOE, and got hit by another.)",,,,,,,,,,,,JDK-8316282,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8244202,,,,JDK-8315640,,,,,,,,,,,,,,,,,,,,,,,,,"0|i333a3:",9223372036854775807,b15,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@446e124a,,,,,,,,,"2023-09-12 04:28;shade;I believe this is the actual cause of JDK-8315640 now.;;;","2023-09-12 04:39;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/15681
Date: 2023-09-12 11:32:46 +0000;;;","2023-09-12 11:15;dukebot;Changeset: 947dee7f
Author:    Aleksey Shipilev <shade@openjdk.org>
Date:      2023-09-12 18:13:55 +0000
URL:       https://git.openjdk.org/jdk/commit/947dee7f2d5f7295ab7fc47c7823d0662d3c07ff
;;;","2023-09-13 00:33;roboduke;[jdk21u-fix-request] Approval Request from Aleksey Shipilëv
;;;","2023-09-13 00:34;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk21u/pull/156
Date: 2023-09-13 07:26:57 +0000;;;",,,,,,,,,,,,,,,,,,,,,,
Open source few swing JInternalFrame and JMenuBar tests,JDK-8316106,5110116,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,abhiscxk,abhiscxk,abhiscxk,2023-09-12 03:17,2023-09-20 22:21,2023-10-01 09:55,2023-09-14 23:20,17,21,22,,,,,22,client-libs,,0,amazon-interest,noreg-self,sn_152,test_sprint,,,,,,,,,,,,,,,,"Few JInternalFrame and JMenuBar swing applet tests needs to be converted to main based and open sourced 

javax/swing/JInternalFrame/4268949/bug4268949.java
javax/swing/JInternalFrame/4309079/bug4309079.java
javax/swing/JInternalFrame/4732229/bug4732229.java
javax/swing/JInternalFrame/5009724/bug5009724.java
javax/swing/JMenuBar/4191374/bug4191374.java",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i3338r:",9223372036854775807,b16,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@568a5b31,,,,,,,,,"2023-09-14 01:15;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/15735
Date: 2023-09-14 08:05:58 +0000;;;","2023-09-14 23:20;dukebot;Changeset: 0775bf2f
Author:    Abhishek Kumar <abhiscxk@openjdk.org>
Date:      2023-09-15 06:18:36 +0000
URL:       https://git.openjdk.org/jdk/commit/0775bf2f0375b1bc63c187399cbc3fdc5a192bce
;;;",,,,,,,,,,,,,,,,,,,,,,,,,
C2: Back to back Parse Predicates from different loops but with same deopt reason are wrongly grouped together,JDK-8316105,5110115,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,chagedorn,roland,roland,2023-09-12 02:41,2023-09-27 18:19,2023-10-01 09:55,2023-09-21 01:57,22,,,,,,,22,hotspot,,0,c2,javafuzzer,oracle-triage-22,regression,,,,,,,,,,,,,,,,"Back to back Loop Limit Check Parse Predicates from different loops are wrongly grouped into a single Predicate Block when trying to find all Predicates of a loop. As a result, we do not eliminate the second Loop Limit Check Parse Predicate and the Parse Predicates above belonging to an already folded loop. In the test case, we then create a Hoisted Check Predicate with one of the Parse Predicate from the folded loop. This Hoisted Check Predicate fails at runtime and we jump to the wrong location in the interpreter. We re-execute a store and we observe a wrong execution.

The fix is to make sure each Predicate Block can only contain one Parse Predicate. This constraint was broken with JDK-8305636.


Original report
--------------------
Attached test run with:

$ javac Test.java FuzzerUtils.java -d .; java -XX:-BackgroundCompilation -XX:CompileOnly=Test::iMeth -XX:CompileCommand=quiet -XX:-UseOnStackReplacement   Test > out; java -XX:-BackgroundCompilation -Xint Test > out2; diff out out2
Note: FuzzerUtils.java uses or overrides a deprecated API.
Note: Recompile with -Xlint:deprecation for details.
34c34
< vMeth1_check_sum: -13486
—
> vMeth1_check_sum: -13108




It doesn't reproduce with jdk 21.

iMeth is compiled multiple times. The last one is the one that looks wrong to me. I see:

ParsePredicate #242

IfTrue #251

ParsePredicate #300

IfTrue #309

CountedLoop #567




#242 is for Test::vMeth1 @ bci:84

#300 is for Test::iMeth @ bci:48

So they are back to back but not for the same loop.

StoreL #288 is control depend on #251

After some rounds of loop opts, #567 is unswitched. Predicates #242 is cloned above both unswitched loops. Problem is #242 is not for this loop and captures state before the StoreL but is now after it. I think a deoptimization at state from #242 causes the load, increment, store sequence to be wrongly reexecuted.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8305636,,,"2023-09-12 01:47;roland;FuzzerUtils.java;https://bugs.openjdk.org/secure/attachment/106394/FuzzerUtils.java","2023-09-12 01:47;roland;Test.java;https://bugs.openjdk.org/secure/attachment/106393/Test.java",,,,,,,,,,,,,,,,,,,,,"0|i3338j:",9223372036854775807,b17,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2023-09-12 03:16;chagedorn;Starts to fail after JDK-8305636.;;;","2023-09-12 03:18;chagedorn;ILW = Wrong execution due to incorrect predicate cloning in loop unswitching, single fuzzer test,  use -XX:-LoopUnswitching, -XX:-UseLoopPredicate or disable compilation of affected method = HLM = P3;;;","2023-09-15 07:56;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/15764
Date: 2023-09-15 14:47:07 +0000;;;","2023-09-21 01:57;dukebot;Changeset: ca47f5f0
Author:    Christian Hagedorn <chagedorn@openjdk.org>
Date:      2023-09-21 08:56:31 +0000
URL:       https://git.openjdk.org/jdk/commit/ca47f5f06daebc3c50bf47b4cdf1fcf8edf1507d
;;;",,,,,,,,,,,,,,,,,,,,,,,
Open source several Swing SplitPane and RadioButton related tests,JDK-8316104,5110114,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,tr,tr,tr,2023-09-12 02:35,2023-09-25 11:26,2023-10-01 09:55,2023-09-18 22:16,17,21,22,,,,,22,client-libs,,0,amazon-interest,sn_152,test_sprint,,,,,,,,,,,,,,,,,"Open source these Swing SplitPane and RadioButton related tests:

javax/swing/JSplitPane/4147653/bug4147653.java
javax/swing/JSplitPane/4870674/bug4870674.java
javax/swing/JRadioButton/4823809/bug4823809.java",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,generic,,,,,,,,,generic,,,,,"0|i3338b:",9223372036854775807,b16,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@568a5b31,,,,,,,,,"2023-09-14 02:40;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/15738
Date: 2023-09-14 09:33:03 +0000;;;","2023-09-18 22:16;dukebot;Changeset: f52e500f
Author:    Tejesh R <tr@openjdk.org>
Date:      2023-09-19 05:15:01 +0000
URL:       https://git.openjdk.org/jdk/commit/f52e500f806085f9645cb7857cc7b4e648685351
;;;",,,,,,,,,,,,,,,,,,,,,,,,,
Some Scenegraph/richtext tests fail due to IllegalStateException,JDK-8316097,5110107,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,aghaisas,aghaisas,aghaisas,2023-09-12 01:31,2023-09-15 05:27,2023-10-01 09:55,2023-09-15 05:23,jfx21,,,,,,,jfx22,javafx,,0,noreg-self,sn_152,test_sprint,testbug,,,,,,,,,,,,,,,,"test test.scenegraph.richtext.RichTextLabeledsTest.stylesTest(): failure
java.lang.IllegalStateException: This operation is permitted on the event thread only; currentThread = Time-limited test
	at com.sun.glass.ui.Application.checkEventThread(Application.java:447)
	at com.sun.glass.ui.View.finishInputMethodComposition(View.java:656)
	at com.sun.javafx.tk.quantum.ViewScene.finishInputMethodComposition(ViewScene.java:152)
	at javafx.scene.Scene.setFocusOwner(Scene.java:2292)
	at javafx.scene.Scene.requestFocus(Scene.java:2201)
	at javafx.scene.Node.requestFocus(Node.java:8413)
	at test.scenegraph.richtext.RichTextPropertiesApp.requestDefaultFocus(RichTextPropertiesApp.java:246)
	at test.scenegraph.richtext.RichTextPropertiesFunctional.checkScreenshot(RichTextPropertiesFunctional.java:259)",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,generic,,,,,,,,,generic,,,,,"0|i3336r:",9223372036854775807,inapplicable,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@1d1c7815,,,,,,,,,"2023-09-12 03:40;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jfx-tests/pull/9
Date: 2023-09-12 10:33:07 +0000;;;","2023-09-15 05:23;roboduke;Changeset: 46f2827d
Author:    Ajit Ghaisas <aghaisas@openjdk.org>
Date:      2023-09-15 12:22:49 +0000
URL:       https://git.openjdk.org/jfx-tests/commit/46f2827d257e68e143006ab6e7ea9fd37b310f5a
;;;",,,,,,,,,,,,,,,,,,,,,,,,,
Test SignedLoggerFinderTest.java is still failing,JDK-8316087,5110095,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,coffeys,dholmes,dholmes,2023-09-11 23:05,2023-09-28 00:55,2023-10-01 09:55,2023-09-13 08:07,22,,,,,,,22,core-libs,,0,11bpr-critical-watch,jdk17u-fix-request,jdk17u-fix-yes,jdk21u-fix-request,jdk21u-fix-yes,tier4,tier8,,,,,,,,,,,,,"java.lang.RuntimeException: Unexpected fail.
	at SignedLoggerFinderTest.launchTest(SignedLoggerFinderTest.java:213)
	at SignedLoggerFinderTest.main(SignedLoggerFinderTest.java:103)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
	at java.base/java.lang.reflect.Method.invoke(Method.java:580)
	at com.sun.javatest.regtest.agent.MainActionHelper$AgentVMRunnable.run(MainActionHelper.java:333)
	at java.base/java.lang.Thread.run(Thread.java:1570)
Caused by: java.lang.RuntimeException: 'TEST LOGGER: [test_1, test]' missing from stdout/stderr
	at jdk.test.lib.process.OutputAnalyzer.shouldContain(OutputAnalyzer.java:221)
	at SignedLoggerFinderTest.launchTest(SignedLoggerFinderTest.java:199)
	... 5 more",,,,,,,,,,,,JDK-8316553,JDK-8316733,JDK-8316604,JDK-8316829,JDK-8316536,,,,,,,,,,,JDK-8317152,,,,,,,,,,,JDK-8315696,JDK-8316593,JDK-8316189,,,,,,,,,,,,,x86_64,,,,,,,,,linux,os_x,,,,"0|i33343:",9223372036854775807,b15,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@3cc899dc,,,,,,,,,"2023-09-13 05:45;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/15711
Date: 2023-09-13 11:26:30 +0000;;;","2023-09-13 08:04;coffeys;Fix request: 
final (hopefully) stabilization fix for the new SignedLoggerFinderTest testcase;;;","2023-09-13 08:07;dukebot;Changeset: ff240a91
Author:    Sean Coffey <coffeys@openjdk.org>
Date:      2023-09-13 15:05:46 +0000
URL:       https://git.openjdk.org/jdk/commit/ff240a9135e0f0c78ecffadbef38edb3b0479653
;;;","2023-09-14 02:00;coffeys;removing affects version of 21 - the test is not present there;;;","2023-09-16 12:08;dcubed;The fix for this bug is integrated in jdk-22+15-1131.;;;","2023-09-19 09:15;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk21u/pull/175
Date: 2023-09-19 16:05:39 +0000;;;","2023-09-20 05:14;goetz;Fix request [17u]

I backport this for parity with 17.0.10-oracle.
Included in backport of main change, JDK-8314263. ;;;","2023-09-20 05:23;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/1756
Date: 2023-09-20 11:01:26 +0000;;;",,,,,,,,,,,,,,,,,,,
Open source several Swing RootPane and Slider related tests,JDK-8316061,5110069,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,tr,tr,tr,2023-09-11 22:19,2023-09-25 11:26,2023-10-01 09:55,2023-09-18 22:16,17,21,22,,,,,22,client-libs,,0,amazon-interest,sn_152,test_sprint,,,,,,,,,,,,,,,,,"Open source these Swing PopupMenu related tests:

javax/swing/JRootPane/4207333/bug4207333.java
javax/swing/JRootPane/4224113/bug4224113.java
javax/swing/JRootPane/4627806/bug4627806.java
javax/swing/JSlider/4200901/bug4200901.java
javax/swing/JSlider/4203754/bug4203754.java",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,generic,,,,,,,,,generic,,,,,"0|i332yb:",9223372036854775807,b16,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@568a5b31,,,,,,,,,"2023-09-14 00:40;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/15734
Date: 2023-09-14 07:29:57 +0000;;;","2023-09-18 22:16;dukebot;Changeset: 138542de
Author:    Tejesh R <tr@openjdk.org>
Date:      2023-09-19 05:15:33 +0000
URL:       https://git.openjdk.org/jdk/commit/138542de7889e8002df0e15a79e31d824c6a0473
;;;",,,,,,,,,,,,,,,,,,,,,,,,,
test/hotspot/jtreg/runtime/reflect/ReflectOutOfMemoryError.java may fail if heap is huge,JDK-8316060,5110066,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,serb,serb,serb,2023-09-11 18:18,2023-09-18 15:31,2023-10-01 09:55,2023-09-12 19:35,21,22,,,,,,22,hotspot,,0,amazon-interest,noreg-self,,,,,,,,,,,,,,,,,,"The test tries to generate the OOM by filling the whole heap, unfortunately it may fail if the heap is large than 25G.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,generic,,,,,,,,,generic,,,,,"0|i332xn:",9223372036854775807,b15,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,,,"2023-09-12 13:34;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/15676
Date: 2023-09-12 01:22:06 +0000;;;","2023-09-12 19:35;dukebot;Changeset: bd52bbfa
Author:    Sergey Bylokhov <serb@openjdk.org>
Date:      2023-09-13 02:33:03 +0000
URL:       https://git.openjdk.org/jdk/commit/bd52bbfa272691caab227d736021362c06449535
;;;",,,,,,,,,,,,,,,,,,,,,,,,,
Open source several Swing JTree tests,JDK-8316056,5110062,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,dnguyen,dnguyen,dnguyen,2023-09-11 15:06,2023-09-25 11:27,2023-10-01 09:55,2023-09-19 09:57,17,21,22,,,,,22,client-libs,,0,amazon-interest,sn_152,test_sprint,,,,,,,,,,,,,,,,,Convert JTree applet based tests into main ,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i332wr:",9223372036854775807,b16,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@568a5b31,,,,,,,,,"2023-09-14 14:46;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/15756
Date: 2023-09-14 21:40:55 +0000;;;","2023-09-19 09:59;dukebot;Changeset: 5f6cee86
Author:    Damon Nguyen <dnguyen@openjdk.org>
Date:      2023-09-19 16:56:12 +0000
URL:       https://git.openjdk.org/jdk/commit/5f6cee86ef765677b0b9dc3662f4f20b636732bc
;;;",,,,,,,,,,,,,,,,,,,,,,,,,
Open some swing tests 3,JDK-8316053,5110060,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,achung,achung,achung,2023-09-11 14:14,2023-09-29 15:51,2023-10-01 09:55,2023-09-22 22:43,17,21,22,,,,,22,client-libs,,0,amazon-interest,sn_152,test_sprint,,,,,,,,,,,,,,,,,Opening some swing tests,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,generic,,,,,,,,,generic,,,,,"0|i332wb:",9223372036854775807,b17,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@568a5b31,,,,,,,,,"2023-09-20 15:36;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/15851
Date: 2023-09-20 22:30:04 +0000;;;","2023-09-22 22:43;dukebot;Changeset: a2391a92
Author:    Alisen Chung <achung@openjdk.org>
Date:      2023-09-23 05:42:07 +0000
URL:       https://git.openjdk.org/jdk/commit/a2391a92cd09630cc3c46024f7e02924a997cc86
;;;",,,,,,,,,,,,,,,,,,,,,,,,,
Fix doc typos in java.io.Console and java.util.Scanner,JDK-8316038,5110041,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,prappo,prappo,prappo,2023-09-11 10:30,2023-09-18 15:23,2023-10-01 09:55,2023-09-12 01:14,22,,,,,,,22,core-libs,,0,noreg-doc,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i332s3:",9223372036854775807,b15,,,,,,,,,,,"2023-09-11 11:06;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/15667
Date: 2023-09-11 17:58:20 +0000;;;","2023-09-12 01:14;dukebot;Changeset: f55e7994
Author:    Pavel Rappo <prappo@openjdk.org>
Date:      2023-09-12 08:11:24 +0000
URL:       https://git.openjdk.org/jdk/commit/f55e799491c39dcaf7b3935b6d560ee0a3239191
;;;",,,,,,,,,,,,,,,,,,,,,,,,,
SSLFlowDelegate should not log from synchronized block,JDK-8316031,5110033,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,dfuchs,dfuchs,dfuchs,2023-09-11 09:48,2023-09-21 07:30,2023-10-01 09:55,2023-09-15 10:23,21,22,,,,,,22,core-libs,,0,httpclient,intermittent,jdk21u-fix-request,jdk21u-fix-SQE-ok-next,jdk21u-fix-yes,tier2,,,,,,,,,,,,,,"VirtualThread[#205,HttpClient-5-Worker24]/runnable@ForkJoinPool-1-worker-3
    java.base/java.lang.VirtualThread$VThreadContinuation.onPinned(VirtualThread.java:183)
    java.base/jdk.internal.vm.Continuation.onPinned0(Continuation.java:393)
    java.base/java.lang.VirtualThread.park(VirtualThread.java:573)
    java.base/java.lang.System$2.parkVirtualThread(System.java:2640)
    java.base/jdk.internal.misc.VirtualThreads.park(VirtualThreads.java:54)
    java.base/java.util.concurrent.locks.LockSupport.park(LockSupport.java:219)
    java.base/java.util.concurrent.locks.AbstractQueuedSynchronizer.acquire(AbstractQueuedSynchronizer.java:754)
    java.base/java.util.concurrent.locks.AbstractQueuedSynchronizer.acquire(AbstractQueuedSynchronizer.java:990)
    java.base/java.util.concurrent.locks.ReentrantLock$Sync.lock(ReentrantLock.java:153)
    java.base/java.util.concurrent.locks.ReentrantLock.lock(ReentrantLock.java:322)
    java.base/jdk.internal.misc.InternalLock.lock(InternalLock.java:74)
    java.base/java.io.PrintStream.writeln(PrintStream.java:824)
    java.base/java.io.PrintStream.println(PrintStream.java:1168)
    java.net.http/jdk.internal.net.http.common.DebugLogger.print(DebugLogger.java:293)
    java.net.http/jdk.internal.net.http.common.DebugLogger.log(DebugLogger.java:241)
    java.base/java.lang.System$Logger.log(System.java:1387)
    java.net.http/jdk.internal.net.http.common.Logger.log(Logger.java:72)
    java.net.http/jdk.internal.net.http.common.SSLFlowDelegate$Reader.stop(SSLFlowDelegate.java:378)
    java.net.http/jdk.internal.net.http.common.SSLFlowDelegate.normalStop(SSLFlowDelegate.java:978) <== monitors:1
",,,,,,,,,,,,JDK-8316680,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i332qb:",9223372036854775807,b16,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@446e124a,,,,,,,,,"2023-09-15 03:28;dfuchs;The java/net/httpclient/HttpClientLocalAddrTest.java fails relatively frequently in timeout - and the log shows the pinned thread above.
Whether that's the root cause of the test failure is hard to say, but we should fix the code to avoid pinned threads. This one path that had escaped my notice before. ;;;","2023-09-15 05:23;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/15761
Date: 2023-09-15 12:16:10 +0000;;;","2023-09-15 10:23;dukebot;Changeset: dc5ca1d3
Author:    Daniel Fuchs <dfuchs@openjdk.org>
Date:      2023-09-15 17:21:27 +0000
URL:       https://git.openjdk.org/jdk/commit/dc5ca1d3798727fd29a6a40e9f7777cb7f85c004
;;;","2023-09-18 07:55;dfuchs;jdk21u-fix-request
------------------------

Fix Request:
-----------------

In JDK 21 the HttpClient has been updated to use concurrent locks and other mechanisms to avoid unnecessary pinning of Carrier threads if configured with a virtual thread executor. However one small corner case in SSLFlowDelegate slipped through, which this change is fixing. This is a very localized change in the method SLLFlowDelegate::normalStop, which reduces the scope of the synchronized block to what is strictly necessary. The issue was caught by the HttpClientLocalAddrTest.java in the jdk 22 mainline. ;;;","2023-09-18 09:56;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk21u/pull/171
Date: 2023-09-18 16:50:06 +0000;;;",,,,,,,,,,,,,,,,,,,,,,
File.setExecutable silently fails if file does not exist,JDK-8316000,5109966,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,bpb,webbuggrp,webbuggrp,2023-09-10 04:12,2023-09-29 08:47,2023-10-01 09:55,2023-09-29 08:06,11,17,20,21,8,,,22,core-libs,,0,dcsaw,noreg-doc,reproducer-yes,webbug,,,,,,,,,,,,,,,,"A DESCRIPTION OF THE PROBLEM :
If the file does not exist, then setExecutable fails silently. 
According to the documentation: 
Sets the owner's or everybody's execute permission for this abstract pathname. 
Abstract pathname. Means, no matter whether it exists or not. 
So if the file is written after setting executable, at the end the file shall be executable. 

Accordingly for other setter methods. 

I think, the documentation shall mention the case of non existing file explicitly. 
I would prefer a return value false in this case. 


STEPS TO FOLLOW TO REPRODUCE THE PROBLEM :
Choose a filename for a non existing file 
File file = new File (<nonexisting>);
boolean success = file.setExecutable(true, false); 
file.createNewFile();

EXPECTED VERSUS ACTUAL BEHAVIOR :
EXPECTED -
Prefer success == false but my issue is more documentation. 
ACTUAL -
success == true, case not documented. 

---------- BEGIN SOURCE ----------
see above 
---------- END SOURCE ----------

CUSTOMER SUBMITTED WORKAROUND :
various, e.g. creating the file before using setExecutable. 

FREQUENCY : always


",,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8317117,,,,,,,,,,,,,,,,"2023-09-11 03:52;tongwan;Main.java;https://bugs.openjdk.org/secure/attachment/106387/Main.java",,,,,,,,generic,,,,,,,,,windows,,,,,"0|i332bf:",9223372036854775807,master,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@5f132e58,,,,,,,,,"2023-09-11 05:03;tongwan;The observations on Windows 11:
JDK 8: Failed, success == true
JDK 11: Failed.
JDK 17: Failed.
JDK 20: Failed.
JDk 21ea+33: Failed.;;;","2023-09-11 05:27;alanb;The bug report doesn't say but I assume it's on Windows where setExecutable can't do anything and should return false, irrespective of whether the file exists or not.;;;","2023-09-11 09:35;bpb;This is indeed Windows-specific.

Windows:

jshell> File f = new File(""nonexistent"")
f ==> nonexistent

jshell> Files.exists(f.toPath())
$2 ==> false

jshell> f.setReadable(true, false)
$3 ==> true

jshell> f.setWritable(true, false)
$4 ==> false

jshell> f.setExecutable(true, false)
$5 ==> true

macOS:

jshell> File f = new File(""nonexistent"")
f ==> nonexistent

jshell> Files.exists(f.toPath())
$2 ==> false

jshell> f.setReadable(true, false)
$3 ==> false

jshell> f.setWritable(true, false)
$4 ==> false

jshell> f.setExecutable(true, false)
$5 ==> false

It also occurs for File.setReadable on Windows.;;;","2023-09-11 09:43;bpb;The relevant code is in WinNTFileSystem.c:

Java_java_io_WinNTFileSystem_setPermission0(JNIEnv *env, jobject this,
                                            jobject file,
                                            jint access,
                                            jboolean enable,
                                            jboolean owneronly)
{
    jboolean rv = JNI_FALSE;
    WCHAR *pathbuf;
    DWORD a;
    if (access == java_io_FileSystem_ACCESS_READ ||
        access == java_io_FileSystem_ACCESS_EXECUTE) {
        return enable;

It will return whatever is passed via the first parameter of File.setReadable or File.setExecutable which contravenes the specifications of these methods.;;;","2023-09-11 15:29;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/15673
Date: 2023-09-11 22:22:47 +0000;;;","2023-09-29 08:06;dukebot;Changeset: 49376e44
Author:    Brian Burkhalter <bpb@openjdk.org>
Date:      2023-09-29 15:03:10 +0000
URL:       https://git.openjdk.org/jdk/commit/49376e445210d5ebe3a99a4e647deecec51f0784
;;;",,,,,,,,,,,,,,,,,,,,,
Amend problemlisted tests to proper position,JDK-8315990,5109992,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,psadhukhan,psadhukhan,psadhukhan,2023-09-11 02:41,2023-09-18 15:31,2023-10-01 09:55,2023-09-12 04:49,,,,,,,,22,client-libs,,0,sn_152,test_sprint,,,,,,,,,,,,,,,,,,Few awt problem listed tests are placed in swing category which should be amended,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8298823,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i332h7:",9223372036854775807,b15,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@568a5b31,,,,,,,,,"2023-09-11 02:48;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/15655
Date: 2023-09-11 09:42:36 +0000;;;","2023-09-12 04:49;dukebot;Changeset: 8b4f9a88
Author:    Prasanta Sadhukhan <psadhukhan@openjdk.org>
Date:      2023-09-12 11:47:07 +0000
URL:       https://git.openjdk.org/jdk/commit/8b4f9a88e606c4c6722061ce9946ce17340ff1df
;;;",,,,,,,,,,,,,,,,,,,,,,,,,
Opensource five more random Swing tests,JDK-8315981,5109982,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,kizune,kizune,kizune,2023-09-11 00:56,2023-09-25 18:43,2023-10-01 09:55,2023-09-20 07:32,17,21,22,,,,,22,client-libs,,0,amazon-interest,sn_152,test_sprint,,,,,,,,,,,,,,,,,"Opensource following tests: 

javax/swing/DefaultListCellRenderer/4180943/bug4180943.java
javax/swing/DefaultListModel/4466250/bug4466250.java
javax/swing/DefaultListSelectionModel/4140619/bug4140619.java
javax/swing/DefaultListSelectionModel/4177723/bug4177723.java
javax/swing/ImageIcon/4827074/bug4827074.java
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i332ez:",9223372036854775807,b16,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@568a5b31,,,,,,,,,"2023-09-13 09:03;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/15724
Date: 2023-09-13 15:53:30 +0000;;;","2023-09-20 07:32;dukebot;Changeset: c43ebd34
Author:    Alexander Zuev <kizune@openjdk.org>
Date:      2023-09-20 14:31:42 +0000
URL:       https://git.openjdk.org/jdk/commit/c43ebd34afeab9ece9dee05f0da184a20e487a12
;;;",,,,,,,,,,,,,,,,,,,,,,,,,
Big-endian issues after JDK-8310929,JDK-8315970,5109973,Bug,Resolved,JDK,JDK,software,duke,,,P1,Fixed,mdoerr,redestad,redestad,2023-09-10 10:20,2023-09-18 15:22,2023-10-01 09:55,2023-09-11 06:40,,,,,,,,22,core-libs,,0,,,,,,,,,,,,,,,,,,,,"Some test failures on AIX after JDK-8310929:
compiler/intrinsics/Test8215792.java
compiler/intrinsics/string/TestStringIntrinsics.java
runtime/CompactStrings/TestMethodNames.java
runtime/StringIntrinsic/StringIndexOfChar.java",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8310929,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i332cz:",9223372036854775807,b15,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4c088d55,,,,,,,,,"2023-09-10 11:01;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/15652
Date: 2023-09-10 16:39:30 +0000;;;","2023-09-10 11:16;rriggs;The  commit should be backed out instead of patched. It was done with particular performance goals in mind.;;;","2023-09-11 06:40;dukebot;Changeset: 4cb4637b
Author:    shaojin.wensj <shaojin.wensj@alibaba-inc.com>
Committer: Martin Doerr <mdoerr@openjdk.org>
Date:      2023-09-11 13:39:26 +0000
URL:       https://git.openjdk.org/jdk/commit/4cb4637b797d0347f524662cbb853494573da7b9
;;;","2023-09-11 06:41;mdoerr;New version of the fix was clean and simple enough and the tests have passed. However, performance should get re-evaluated.;;;",,,,,,,,,,,,,,,,,,,,,,,
Open source various AWT applet tests,JDK-8315965,5109960,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,azvegint,azvegint,azvegint,2023-09-08 18:46,2023-09-27 18:19,2023-10-01 09:55,2023-09-21 11:27,17,21,22,,,,,22,client-libs,,0,amazon-interest,sn_152,test_sprint,,,,,,,,,,,,,,,,,"Several tests need to be converted to main based and open sourced

java/awt/ScrollPane/ScrollbarsNever/ScrollPaneTest.java 1998
java/awt/TextArea/getText/Length.java
java/awt/Window/WindowOwner.java
java/awt/font/Rotate/RotateTest3.java",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i332a3:",9223372036854775807,b17,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@5a9b3fd3,,,,,,,,,"2023-09-14 13:27;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/15754
Date: 2023-09-14 20:18:26 +0000;;;","2023-09-21 11:30;dukebot;Changeset: 3b397c85
Author:    Alexander Zvegintsev <azvegint@openjdk.org>
Date:      2023-09-21 18:28:19 +0000
URL:       https://git.openjdk.org/jdk/commit/3b397c8552d7fd1b1084fbbc06384f3f34481ba4
;;;",,,,,,,,,,,,,,,,,,,,,,,,,
test/jdk/java/io/File/TempDirDoesNotExist.java leaves test files behind,JDK-8315960,5109951,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,bpb,tbell,tbell,2023-09-08 14:11,2023-09-27 18:20,2023-10-01 09:55,2023-09-22 10:26,21,22,,,,,,22,core-libs,,0,amazon-interest,noreg-self,,,,,,,,,,,,,,,,,,"test/jdk/java/io/File/TempDirDoesNotExist.java creates temp files in 
  System.getProperty(""user.home"")
using:
  File.createTempFile(""prefix"", "".suffix"");

There is no finally block in the test to delete the TempFile later.

After a few weeks of running tests this leaves test systems with many prefix*.suffix files littering the user home directory.

This test also appears to be one which would benefit from conversion to JUnit 5.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8290313,,,,,,,,,,,,,,,generic,,,,,,b25,20,,generic,,,,,"0|i3328b:",9223372036854775807,b17,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@5f132e58,,,,,,,,,"2023-09-14 15:01;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/15757
Date: 2023-09-14 21:53:30 +0000;;;","2023-09-22 10:26;dukebot;Changeset: 373cdf25
Author:    Brian Burkhalter <bpb@openjdk.org>
Date:      2023-09-22 17:24:05 +0000
URL:       https://git.openjdk.org/jdk/commit/373cdf257de78940b2e55e9f5fc38b6233561baf
;;;",,,,,,,,,,,,,,,,,,,,,,,,,
Missing range checks in GlassPasteboard,JDK-8315958,5109949,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,kcr,kcr,kcr,2023-09-08 13:40,2023-09-15 07:06,2023-10-01 09:55,2023-09-13 05:14,8,jfx11,jfx17,jfx21,jfx22,,,jfx22,javafx,,0,jfx21u-fix-request,jfx21u-fix-yes,noreg-hard,sn_152,,,,,,,,,,,,,,,,"GlassPasteboard.m is missing range checks in _getItemAsRawImage and ByteArrayFromPixels.
",,,,,,,,,,,,JDK-8316219,JDK-8316320,JDK-8316323,JDK-8316318,,,,,,,,,,,,JDK-8314786,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i3327v:",9223372036854775807,b09,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4f591050,,,,,,,,,"2023-09-11 09:02;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jfx/pull/1238
Date: 2023-09-11 15:55:44 +0000;;;","2023-09-13 05:14;dukebot;Changeset: 7c8dd1ec
Author:    Kevin Rushforth <kcr@openjdk.org>
Date:      2023-09-13 12:11:07 +0000
URL:       https://git.openjdk.org/jfx/commit/7c8dd1eca1a1114acd85471cd764ebf1941dda7c
;;;","2023-09-13 09:34;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jfx21u/pull/16
Date: 2023-09-13 16:27:18 +0000;;;","2023-09-13 13:29;kcr;jfx21u fix request: This will improve stability of jfx21u and it is a safe fix.
;;;",,,,,,,,,,,,,,,,,,,,,,,
getArgumentValues002.java fails on Graal,JDK-8315954,5109945,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,dnsimon,dnsimon,dnsimon,2023-09-08 12:35,2023-09-27 18:19,2023-10-01 09:55,2023-09-21 09:31,22,,,,,,,22,hotspot,,0,graal,jvmci,oracle-triage-22,,,,,,,,,,,,,,,,,"The vmTestbase/nsk/jdi/StackFrame/getArgumentValues/getArgumentValues002/getArgumentValues002.java test fails on Graal due to a problem in the way Graal initializes the frame state for an OSR compilation.

Currently, Graal uses its internal analysis to clear non-live local variables at the OSR entry point. However, this can be too conservative, marking variables as live which are actually dead from the interpreter's point of view. For example, a local variable that is assigned an int down one path and an object down another can look live according to the compiler's analysis but is clearly dead from the interpreters point of view.

To fix this, Graal needs to do something like ciMethod::live_local_oops_at_bci which entails the need for new JVMCI API to access OopMapCache::compute_one_oop_map.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8310055,,,,JDK-8236650,,,,,,,,,,,,,,,,,,,,,,,,,"0|i3326z:",9223372036854775807,b17,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2023-09-11 23:55;chagedorn;ILW = Test failure due to a wrong frame state for OSR, single test, no workaround = MLH = P4;;;","2023-09-13 02:58;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/15705
Date: 2023-09-13 09:46:01 +0000;;;","2023-09-21 09:31;dukebot;Changeset: 542b3000
Author:    Doug Simon <dnsimon@openjdk.org>
Date:      2023-09-21 16:28:44 +0000
URL:       https://git.openjdk.org/jdk/commit/542b3000f0cd1136466066cb4046257220ac2827
;;;",,,,,,,,,,,,,,,,,,,,,,,,
Open source several Swing JToolbar JTooltip JTree tests,JDK-8315952,5109943,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,dnguyen,dnguyen,dnguyen,2023-09-08 12:22,2023-09-25 11:27,2023-10-01 09:55,2023-09-19 10:34,17,21,22,,,,,22,client-libs,,0,amazon-interest,sn_152,test_sprint,,,,,,,,,,,,,,,,,"Convert JToolbar, JTooltip, and JTree applet based tests into main ",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i3326j:",9223372036854775807,b16,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@568a5b31,,,,,,,,,"2023-09-14 14:41;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/15755
Date: 2023-09-14 21:34:56 +0000;;;","2023-09-19 10:36;dukebot;Changeset: d2b2f675
Author:    Damon Nguyen <dnguyen@openjdk.org>
Date:      2023-09-19 17:34:03 +0000
URL:       https://git.openjdk.org/jdk/commit/d2b2f6759f7b9eb6df8eaa84b88e064c636b24a8
;;;",,,,,,,,,,,,,,,,,,,,,,,,,
Open source several Swing HTMLEditorKit related tests,JDK-8315951,5109942,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,honkar,honkar,honkar,2023-09-08 11:47,2023-09-25 18:44,2023-10-01 09:55,2023-09-19 11:44,17,21,22,,,,,22,client-libs,,0,amazon-interest,sn_152,test_sprint,,,,,,,,,,,,,,,,,Open source several Swing Text related tests,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i3326b:",9223372036854775807,b16,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@568a5b31,,,,,,,,,"2023-09-14 11:53;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/15751
Date: 2023-09-14 18:45:34 +0000;;;","2023-09-19 11:44;dukebot;Changeset: d19e017d
Author:    Harshitha Onkar <honkar@openjdk.org>
Date:      2023-09-19 18:42:56 +0000
URL:       https://git.openjdk.org/jdk/commit/d19e017d3fd87a6b7613f44a3757d574a6560680
;;;",,,,,,,,,,,,,,,,,,,,,,,,,
JDK-8315818 broke Xcomp on libgraal,JDK-8315948,5109939,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,dnsimon,dnsimon,dnsimon,2023-09-08 11:06,2023-09-18 15:31,2023-10-01 09:55,2023-09-12 05:05,22,,,,,,,22,hotspot,,0,graal-related,jvmci,oracle-triage-17,oracle-triage-22,regression,Xcomp,,,,,,,,,,,,,,"After JDK-8315818, tests such as compiler/stable/TestStableByte.java started failing on libgraal. This is due to my oversight on the code that decides to unblock a blocking Graal compilation.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8310055,JDK-8315818,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i3325n:",9223372036854775807,b15,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2023-09-08 11:28;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/15643
Date: 2023-09-08 18:19:46 +0000;;;","2023-09-12 01:33;chagedorn;ILW = Test failures on libgraal, some tests with libgraal, no workaround = MLH = P4;;;","2023-09-12 05:05;dukebot;Changeset: 6f2684b7
Author:    Doug Simon <dnsimon@openjdk.org>
Date:      2023-09-12 12:02:34 +0000
URL:       https://git.openjdk.org/jdk/commit/6f2684b7ba1fd699a7393de434a9ccaf6af78fbe
;;;",,,,,,,,,,,,,,,,,,,,,,,,
DecimalFormat and CompactNumberFormat do allow U+FFFE and U+FFFF in the pattern,JDK-8315946,5109936,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,jlu,jlu,jlu,2023-09-08 10:43,2023-09-18 15:31,2023-10-01 09:55,2023-09-12 16:00,,,,,,,,22,core-libs,,0,noreg-doc,,,,,,,,,,,,,,,,,,,"Both of these classes state that for the prefix and suffix of a String pattern, any Unicode character is allowed, except U+FFFE, U+FFFF, and the special symbols.

This does not appear to be true, as the implementation makes no check for these characters, and you can create an instance of both classes with the mentioned characters serving as the prefix/suffix. 

Although not a big deal and it has been there for quite some time now, the claim should probably be removed if it is incorrect. See comments for code example.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8315964,,,,,,,,,,,,,,,,,,,,,,,,generic,,,,,,,,,generic,,,,,"0|i3324z:",9223372036854775807,b15,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6fc9e792,,,,,,,,,"2023-09-08 10:45;jlu;jshell> String uFFFE = ""\uFFFE""
uFFFE ==> ""￾""

jshell> new DecimalFormat(""prefixStart""+uFFFE+""0.00""+uFFFE+""SuffixEnd"")
$77 ==> java.text.DecimalFormat

jshell> $77.format(1)
$78 ==> ""prefixStart￾1.00￾SuffixEnd"";;;","2023-09-08 15:51;naoto;The Unicode notation should include a '+' character between the literal 'U' and the hex digits.;;;","2023-09-08 16:08;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/15648
Date: 2023-09-08 23:02:02 +0000;;;","2023-09-12 16:00;dukebot;Changeset: dde11551
Author:    Justin Lu <jlu@openjdk.org>
Date:      2023-09-12 22:59:34 +0000
URL:       https://git.openjdk.org/jdk/commit/dde11551e26dedd28168d2d4528e9dd66ed82999
;;;",,,,,,,,,,,,,,,,,,,,,,,
RISC-V: xxxMaxVectorTestsSmokeTest fails when using RVV,JDK-8315931,5109917,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,gcao,rehn,rehn,2023-09-08 04:59,2023-09-20 22:22,2023-10-01 09:55,2023-09-15 00:43,21,22,,,,,,22,hotspot,,0,c2,jdk21u-fix-request,jdk21u-fix-yes,oraclejdk-na,oracle-triage-22,,,,,,,,,,,,,,,"The tests <all-types>MaxVectorTests.maskCompress<all-types>MaxVectorTestsSmokeTest fails when using mask[i % 2].
It seem to fail regardless of OSR/C1/C2.

test IntMaxVectorTests.maskCompressIntMaxVectorTestsSmokeTest(mask[i % 2]): failure
java.lang.AssertionError: expected [false] but found [true]

  21242  438   size: 1056(416) time: 21 inlined: 5 bytes
  21242  439    b        jdk.incubator.vector.AbstractVector::sameSpecies (54 bytes)
  21262  439   size: 984(408) time: 19 inlined: 4 bytes
  21262  440    b        jdk.incubator.vector.IntVector::opCode (11 bytes)
  21273  440   size: 808(304) time: 11 inlined: 3 bytes
  21274  441    b        jdk.incubator.vector.VectorOperators::opCode (10 bytes)
  21286  441   size: 904(352) time: 11 inlined: 2 bytes
  21287  442    b        jdk.incubator.vector.VectorOperators$OperatorImpl::opCode (38 bytes)
  21295  442   size: 688(272) time: 8 inlined: 1 bytes
  21295  443    b        jdk.internal.vm.vector.VectorSupport::compare (39 bytes)
  21522  443   size: 7536(2736) time: 226 inlined: 492 bytes
  21522  444    b        jdk.incubator.vector.IntVector$$Lambda/0x000000002914cbc0::apply (21 bytes)
  21679  444   size: 4792(1688) time: 156 inlined: 218 bytes
  21680  445    b        jdk.incubator.vector.IntVector::lambda$compareTemplate$59 (21 bytes)
  21833  445   size: 4560(1616) time: 152 inlined: 195 bytes
  21833  446    b        jdk.incubator.vector.IntVector$$Lambda/0x000000002914cff0::<init> (10 bytes)
  21837  446   size: 248(128) time: 3 inlined: 1 bytes
  21871  386             org.testng.Assert::assertEquals (7 bytes)   made not entrant

I think this is what happens before we hit assert uncommon trap.
",,,,,,,,,,,,JDK-8316491,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8307609,,,"2023-09-08 06:17;gcao;ByteMaxVectorTests.jtr;https://bugs.openjdk.org/secure/attachment/106375/ByteMaxVectorTests.jtr","2023-09-08 06:17;gcao;DoubleMaxVectorTests.jtr;https://bugs.openjdk.org/secure/attachment/106380/DoubleMaxVectorTests.jtr","2023-09-08 06:17;gcao;FloatMaxVectorTests.jtr;https://bugs.openjdk.org/secure/attachment/106379/FloatMaxVectorTests.jtr","2023-09-08 06:17;gcao;IntMaxVectorTests.jtr;https://bugs.openjdk.org/secure/attachment/106377/IntMaxVectorTests.jtr","2023-09-08 06:17;gcao;LongMaxVectorTests.jtr;https://bugs.openjdk.org/secure/attachment/106378/LongMaxVectorTests.jtr","2023-09-08 06:17;gcao;ShortMaxVectorTests.jtr;https://bugs.openjdk.org/secure/attachment/106376/ShortMaxVectorTests.jtr","2023-09-11 06:09;rehn;rr_vanilla.sh;https://bugs.openjdk.org/secure/attachment/106388/rr_vanilla.sh",,riscv,,,,,,,,,,,,,,"0|i3320r:",9223372036854775807,b16,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2023-09-08 05:41;fyang;I think these tests are covered when we were adding support for vector-api. [~gcao] Could you please confirm? Thanks.;;;","2023-09-08 06:20;gcao;Hi, I am using openjdk git commit version:b3dfc399dae714958f22624daf76831c6ec2dfe0, qemu version is:qemu-7.1.0-rc4, using qemu user mode ,qemu cpu parameter is:-cpu rv64,v= true,vlen=256,vext_spec=v1.0 , jdk/incubator/vector The following test cases all pass. including tests <all-types>MaxVectorTests.maskCompress<all-types> MaxVectorTestsSmokeTest , can you provide us with your test environment so that we can find the problem.
By the way, in the attachments jtr is a log of the test <all-types>MaxVectorTests.maskCompress<all-types> MaxVectorTestsSmokeTest execution.;;;","2023-09-11 06:07;rehn;Hi, it is partly timing dependent. Meaning depending on how and on what hardware I run, I can reproduce differently.
Right now I'm reproducing with the rerun command, I have lots of logging on, but if I don't pipe output to file it passes.

Using qemu tip + https://patchew.org/QEMU/bc82203b72d7efb30f1b4a8f9eb3d94699799dc8.camel@rivosinc.com (otherwise V is turn off) and jdk/jdk tip.
With qemu cpu: QEMU_CPU=rv64,v=true,vext_spec=v1.0,vlen=256,elen=64,rvv_ma_all_1s=true,rvv_ta_all_1s=true
And I have disable all other extension in hotspot. I'll attach my rerun script.

I have also disabled all other tests in IntMaxVectorTests.java

[rehn@rehn-xps open]$ ./rr_vanilla.sh > out
WARNING: Using incubator modules: jdk.incubator.vector
java.lang.Exception: failures: 1
...
STATUS:Failed.`main' threw exception: java.lang.Exception: failures: 1
[rehn@rehn-xps open]$ grep "": failure"" out
test IntMaxVectorTests.maskCompressIntMaxVectorTestsSmokeTest(mask[i % 2]): failure




;;;","2023-09-11 20:43;gcao;Hi, Thanks for the log information, after testing and troubleshooting the issue, the problem is related to two QEMU options (rvv_ma_all_1s=true,rvv_ta_all_1s=true), after removing them the problem disappeared. We are preparing a PR to fix this issue.;;;","2023-09-12 01:36;chagedorn;Is the fix related to compiler?;;;","2023-09-12 02:03;gcao;My local debugging shows that this is a riscv-specific c2 compiler issue. I will propose PR soon.;;;","2023-09-12 02:55;chagedorn;Thanks Gui!

ILW = Single test failure due to C2 compiler issue with riscv when using specific QEMU options, edge case and only observed with single test, use different QEMU options = MLM = P4  ;;;","2023-09-12 04:12;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/15680
Date: 2023-09-12 11:06:45 +0000;;;","2023-09-15 00:43;dukebot;Changeset: 4070829a
Author:    Gui Cao <gcao@openjdk.org>
Committer: Fei Yang <fyang@openjdk.org>
Date:      2023-09-15 07:42:23 +0000
URL:       https://git.openjdk.org/jdk/commit/4070829ae589678578a93b2886e02e04cf0a1b01
;;;","2023-09-15 07:44;gcao;Fix Request (21u):
Hi, This issue also exists in the JDK21U, so i would like to backport this to jdk21u make vector api work correctly when qemu enabled the parameter rvv_ta_all_1s=true. 
test/jdk/jdk/incubator/vector passed with fastdebug and use build using qemu with rvv_ma_all_1s=true,rvv_ta_all_1s=true and UseRVV.
tier1-tier3 passed with release and use build using qemu with rvv_ma_all_1s=true,rvv_ta_all_1s=true and UseRVV.;;;","2023-09-15 07:52;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk21u/pull/165
Date: 2023-09-15 14:43:20 +0000;;;",,,,,,,,,,,,,,,,
"Revert ""8315220: Event NativeLibraryLoad breaks invariant by taking a stacktrace when thread is in state _thread_in_native""",JDK-8315930,5109916,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,jbachorik,mgronlun,mgronlun,2023-09-08 04:28,2023-09-28 09:12,2023-10-01 09:55,2023-09-08 05:29,22,,,,,,,22,hotspot,,0,tier5,tier6,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8315892,,,,,,,,,JDK-8315220,,,,,,,,,,,,,,,,,,,,,,,,,"0|i3320j:",9223372036854775807,b15,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@42995637,,,,,,,,,"2023-09-08 04:47;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/15635
Date: 2023-09-08 11:42:05 +0000;;;","2023-09-08 05:29;dukebot;Changeset: b3dfc399
Author:    Markus Grönlund <mgronlun@openjdk.org>
Date:      2023-09-08 12:27:01 +0000
URL:       https://git.openjdk.org/jdk/commit/b3dfc399dae714958f22624daf76831c6ec2dfe0
;;;","2023-09-08 08:58;dcubed;This [BACKOUT] is integrated in jdk-22+15-1073.;;;",,,,,,,,,,,,,,,,,,,,,,,,
Few Scenegraph and Charts tests fail due to resource not found error,JDK-8315928,5109914,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,aghaisas,aghaisas,aghaisas,2023-09-08 04:18,2023-09-13 02:30,2023-10-01 09:55,2023-09-13 02:28,jfx22,,,,,,,jfx22,javafx,,0,noreg-self,sn_152,test_sprint,testbug,,,,,,,,,,,,,,,,"Below tests fail due to ""resource not found"" error.
- test/scenegraph/binding/effects/IdentityTest.java
- test/scenegraph/lcd/controls/tests/AccordionTest.java
- Almost all ControlsTests/Chart tests

Fix :
Move required resources to appropriate directory.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,generic,,,,,,,internal,,generic,,,,,"0|i33203:",9223372036854775807,inapplicable,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@1d1c7815,,,,,,,,,"2023-09-08 04:28;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jfx-tests/pull/7
Date: 2023-09-08 11:21:14 +0000;;;","2023-09-13 02:28;roboduke;Changeset: f1bed108
Author:    Ajit Ghaisas <aghaisas@openjdk.org>
Date:      2023-09-13 09:27:25 +0000
URL:       https://git.openjdk.org/jfx-tests/commit/f1bed1084df2160278abe228ae77ba7d1c9397b3
;;;",,,,,,,,,,,,,,,,,,,,,,,,,
"C2: ""control input must dominate current control"" assert failure",JDK-8315920,5109907,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,roland,roland,roland,2023-09-08 02:50,2023-09-27 18:21,2023-10-01 09:55,2023-09-26 07:35,17.0.10,21,22,,,,,22,hotspot,,0,amazon-interest,c2,oracle-triage-22,regression,,,,,,,,,,,,,,,,"#  Internal Error (/home/roland/jdk-jdk/src/hotspot/share/opto/loopopts.cpp:1765), pid=1742391, tid=1742405
#  assert(is_dominator(c, n_ctrl)) failed: control input must dominate current control

with attached test case run with:

java -XX:-TieredCompilation -XX:-BackgroundCompilation -XX:-UseOnStackReplacement -XX:CompileOnly=TestBadControlAfterPreMainPost::test -XX:-UseLoopPredicate -XX:-DoEscapeAnalysis  TestBadControlAfterPreMainPost

Assert comes from code added by JDK-8314024",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8314024,,,,,,,"2023-09-08 02:48;roland;TestBadControlAfterPreMainPost.java;https://bugs.openjdk.org/secure/attachment/106369/TestBadControlAfterPreMainPost.java",,,,,,,,,,,,,,,,,,,,,,"0|i331yj:",9223372036854775807,b17,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2023-09-08 04:55;thartmann;ILW = Assert during C2 compilation, reproducible with targeted test, -XX:-SplitIfBlocks or disable compilation of affected method = HLM = P3;;;","2023-09-13 07:45;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/15720
Date: 2023-09-13 14:35:55 +0000;;;","2023-09-26 07:35;dukebot;Changeset: 4e1e579e
Author:    Roland Westrelin <roland@openjdk.org>
Date:      2023-09-26 14:32:54 +0000
URL:       https://git.openjdk.org/jdk/commit/4e1e579e8b916191397fc958df32ac3f6003c791
;;;",,,,,,,,,,,,,,,,,,,,,,,,
Open source swing JMenu tests,JDK-8315898,5109886,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,abhiscxk,abhiscxk,abhiscxk,2023-09-08 00:44,2023-09-18 15:31,2023-10-01 09:55,2023-09-13 00:44,21,22,,,,,,22,client-libs,,0,amazon-interest,sn_152,test_sprint,,,,,,,,,,,,,,,,,"JMenu swing applet tests needs to be converted to main based and open sourced 

javax/swing/JMenu/4143592/bug4143592.java
javax/swing/JMenu/4148154/bug4148154.java
javax/swing/JMenu/4156316/bug4156316.java
javax/swing/JMenu/4161866/bug4161866.java
javax/swing/JMenu/4244796/bug4244796.java
javax/swing/JMenu/4767393/bug4767393.java",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i331tv:",9223372036854775807,b15,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@568a5b31,,,,,,,,,"2023-09-08 08:25;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/15639
Date: 2023-09-08 15:17:49 +0000;;;","2023-09-13 00:46;dukebot;Changeset: fecd2fd8
Author:    Abhishek Kumar <abhiscxk@openjdk.org>
Date:      2023-09-13 07:42:53 +0000
URL:       https://git.openjdk.org/jdk/commit/fecd2fd8f26d0e8905a519e30e9aa171683c9df1
;;;",,,,,,,,,,,,,,,,,,,,,,,,,
Some 3D camera tests fail because of NPE,JDK-8315895,5109881,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,shurailine,jdv,jdv,2023-09-07 22:52,2023-09-11 07:23,2023-10-01 09:55,2023-09-11 07:20,jfx22,,,,,,,jfx22,javafx,,0,noreg-self,testbug,,,,,,,,,,,,,,,,,,"Below 3 tests fail when we run CameralOveralTests sub-tests with NPE:
test/scenegraph/fx3d/camera/fixedeye/PerspectiveCameraFixedEyeIsolateTest.java:
test/scenegraph/fx3d/camera/parallel/ParallelCameraIsolateTest.java:
test/scenegraph/fx3d/camera/perspective/PerspectiveCameraIsolateTest.java: 

Stacktrace :
/Users/jdv/dev/workspace/jfx/jfx-tests/functional/3DTests/build/golden/3DTests/prism/mac/PerspectiveCameraFixedEyeIsolateTest-rotationZTest.png
test test.scenegraph.fx3d.camera.CameraIsolateTests.rotationZTest(): success
test test.scenegraph.fx3d.camera.CameraTestsOverall.complexClipTest(): failure
org.jemmy.JemmyException: Failed to execute action 'test.scenegraph.fx3d.camera.CameraTestsOverall$4@43402f92' through Platform.runLater
	at org.jemmy.fx.QueueExecutor.executeQueue(QueueExecutor.java:97)
	at org.jemmy.action.AbstractExecutor.execute(AbstractExecutor.java:90)
	at org.jemmy.action.GetAction.dispatch(GetAction.java:68)
	at test.scenegraph.fx3d.camera.CameraTestsOverall.setNearClip(CameraTestsOverall.java:82)
	at test.scenegraph.fx3d.camera.CameraTestsOverall.complexClipTest(CameraTestsOverall.java:107)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:577)
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:59)
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:56)
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
	at org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:299)
	at org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:293)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.lang.Thread.run(Thread.java:833)
Caused by: java.lang.NullPointerException: Cannot invoke ""javafx.scene.Camera.setNearClip(double)"" because ""this.camera"" is null
	at test.scenegraph.fx3d.camera.CameraAbstractApp.setNearClip(CameraAbstractApp.java:80)
	at test.scenegraph.fx3d.camera.CameraTestsOverall$4.run(CameraTestsOverall.java:80)
	at org.jemmy.action.Action.execute(Action.java:70)
	at org.jemmy.fx.QueueExecutor$WrapperFunction.run(QueueExecutor.java:192)
	at com.sun.javafx.application.PlatformImpl.lambda$runLater$10(PlatformImpl.java:456)
	at java.base/java.security.AccessController.doPrivileged(AccessController.java:399)
	at com.sun.javafx.application.PlatformImpl.lambda$runLater$11(PlatformImpl.java:455)
	at com.sun.glass.ui.InvokeLaterDispatcher$Future.run(InvokeLaterDispatcher.java:95)

Same set of subtests fail in all 3 tests with same """"this.camera"" is null"" NPE.",,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8310177,,,,,,,,,,,,,,,,,,,,,,,,,,generic,,,,,,,,,generic,,,,,"0|i331sr:",9223372036854775807,inapplicable,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@1d1c7815,,,,,,,,,"2023-09-08 10:10;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jfx-tests/pull/8
Date: 2023-09-08 17:04:56 +0000;;;","2023-09-11 07:20;roboduke;Changeset: ba883a27
Author:    Alexandre Iline <shurailine@openjdk.org>
Date:      2023-09-11 14:18:38 +0000
URL:       https://git.openjdk.org/jfx-tests/commit/ba883a27904c23dc3d928eec664594ce416b3274
;;;",,,,,,,,,,,,,,,,,,,,,,,,,
"java/foreign/TestLinker.java failed with ""error occurred while instantiating class TestLinker: null""",JDK-8315891,5109876,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,mcimadamore,dcubed,dcubed,2023-09-07 17:25,2023-09-13 22:40,2023-10-01 09:55,2023-09-08 09:37,22,,,,,,,22,core-libs,,0,tier5,zero,,,,,,,,,,,,,,,,,,"The following test failed in the JDK22 CI:

java/foreign/TestLinker.java

Here's a snippet from the log file:

#section:testng
----------messages:(7/433)----------
command: testng -Djava.security.manager=default TestLinker
reason: User specified action: run testng/othervm/policy=security.policy -Djava.security.manager=default TestLinker 
started: Thu Sep 07 22:56:19 UTC 2023
Mode: othervm [/othervm specified]
Additional options from @modules: --add-modules java.base --add-exports java.base/jdk.internal.foreign=ALL-UNNAMED
finished: Thu Sep 07 22:56:20 UTC 2023
elapsed time (seconds): 0.841
----------configuration:(4/117)----------
Boot Layer
  add modules: java.base                      
  add exports: java.base/jdk.internal.foreign ALL-UNNAMED

----------System.out:(2/128)----------
NativeTestHelper::DEFAULT_RANDOM.seed = -716860814
Re-run with '-DNativeTestHelper.DEFAULT_RANDOM.seed=-716860814' to reproduce
----------System.err:(70/4914)----------
WARNING: A command line option has enabled the Security Manager
WARNING: The Security Manager is deprecated and will be removed in a future release
WARNING: A restricted method in java.lang.foreign.AddressLayout has been called
WARNING: java.lang.foreign.AddressLayout::withTargetLayout has been called by the unnamed module
WARNING: Use --enable-native-access=ALL-UNNAMED to avoid a warning for this module

org.testng.TestNGException: 
An error occurred while instantiating class TestLinker: null
	at org.testng.internal.InstanceCreator.createInstanceUsingObjectFactory(InstanceCreator.java:123)
	at org.testng.internal.InstanceCreator.createInstance(InstanceCreator.java:79)
	at org.testng.internal.ClassImpl.getDefaultInstance(ClassImpl.java:109)
	at org.testng.internal.ClassImpl.getInstances(ClassImpl.java:167)
	at org.testng.TestClass.getInstances(TestClass.java:102)
	at org.testng.TestClass.initTestClassesAndInstances(TestClass.java:82)
	at org.testng.TestClass.init(TestClass.java:74)
	at org.testng.TestClass.<init>(TestClass.java:39)
	at org.testng.TestRunner.initMethods(TestRunner.java:457)
	at org.testng.TestRunner.init(TestRunner.java:336)
	at org.testng.TestRunner.init(TestRunner.java:289)
	at org.testng.TestRunner.<init>(TestRunner.java:180)
	at org.testng.SuiteRunner$DefaultTestRunnerFactory.newTestRunner(SuiteRunner.java:613)
	at org.testng.SuiteRunner.init(SuiteRunner.java:178)
	at org.testng.SuiteRunner.<init>(SuiteRunner.java:112)
	at org.testng.TestNG.createSuiteRunner(TestNG.java:1306)
	at org.testng.TestNG.createSuiteRunners(TestNG.java:1282)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1131)
	at org.testng.TestNG.runSuites(TestNG.java:1069)
	at org.testng.TestNG.run(TestNG.java:1037)
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:102)
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:58)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
	at java.base/java.lang.reflect.Method.invoke(Method.java:580)
	at com.sun.javatest.regtest.agent.MainWrapper$MainTask.run(MainWrapper.java:138)
	at java.base/java.lang.Thread.run(Thread.java:1570)
Caused by: java.lang.ExceptionInInitializerError
	at java.base/jdk.internal.foreign.abi.fallback.FallbackLinker.isSupported(FallbackLinker.java:78)
	at java.base/jdk.internal.foreign.CABI.computeCurrent(CABI.java:95)
	at java.base/jdk.internal.foreign.CABI.<clinit>(CABI.java:49)
	at java.base/jdk.internal.foreign.abi.SharedUtils$4.<clinit>(SharedUtils.java:239)
	at java.base/jdk.internal.foreign.abi.SharedUtils.getSystemLinker(SharedUtils.java:239)
	at java.base/java.lang.foreign.Linker.nativeLinker(Linker.java:502)
	at NativeTestHelper.<clinit>(NativeTestHelper.java:126)
	at java.base/jdk.internal.misc.Unsafe.ensureClassInitialized0(Native Method)
	at java.base/jdk.internal.misc.Unsafe.ensureClassInitialized(Unsafe.java:1160)
	at java.base/jdk.internal.reflect.MethodHandleAccessorFactory.ensureClassInitialized(MethodHandleAccessorFactory.java:300)
	at java.base/jdk.internal.reflect.MethodHandleAccessorFactory.newConstructorAccessor(MethodHandleAccessorFactory.java:103)
	at java.base/jdk.internal.reflect.ReflectionFactory.newConstructorAccessor(ReflectionFactory.java:173)
	at java.base/java.lang.reflect.Constructor.acquireConstructorAccessor(Constructor.java:549)
	at java.base/java.lang.reflect.Constructor.newInstanceWithCaller(Constructor.java:499)
	at java.base/java.lang.reflect.Constructor.newInstance(Constructor.java:486)
	at org.testng.internal.ObjectFactoryImpl.newInstance(ObjectFactoryImpl.java:23)
	at org.testng.internal.InstanceCreator.instantiateUsingDefaultConstructor(InstanceCreator.java:193)
	at org.testng.internal.InstanceCreator.createInstanceUsingObjectFactory(InstanceCreator.java:113)
	... 25 more
Caused by: java.security.AccessControlException: access denied (""java.lang.RuntimePermission"" ""loadLibrary.fallbackLinker"")
	at java.base/java.security.AccessControlContext.checkPermission(AccessControlContext.java:488)
	at java.base/java.security.AccessController.checkPermission(AccessController.java:1085)
	at java.base/java.lang.SecurityManager.checkPermission(SecurityManager.java:411)
	at java.base/java.lang.SecurityManager.checkLink(SecurityManager.java:689)
	at java.base/java.lang.Runtime.loadLibrary0(Runtime.java:910)
	at java.base/java.lang.System.loadLibrary(System.java:2063)
	at java.base/jdk.internal.foreign.abi.fallback.LibFallback.tryLoadLibrary(LibFallback.java:41)
	at java.base/jdk.internal.foreign.abi.fallback.LibFallback.<clinit>(LibFallback.java:37)
	... 43 more

JavaTest Message: Test threw exception: org.testng.TestNGException: 
An error occurred while instantiating class TestLinker: null
JavaTest Message: shutting down test

STATUS:Failed.`main' threw exception: org.testng.TestNGException: An error occurred while instantiating class TestLinker: null
----------rerun:(44/6697)*----------",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,x86_64,,,,,,,,,linux,,,,,"0|i331rn:",9223372036854775807,b15,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@28ce6b78,,,,,,,,,"2023-09-08 01:20;mcimadamore;Seems related to the fact that:
* the test is ran with the security manager (default policy)
* the fallback linker needs to load its own library with System::loadLibrary, which is caught by the security manager;;;","2023-09-08 01:28;mcimadamore;We probably need something like:

```
grant codeBase ""jrt:/java.base"" {
    permission java.lang.RuntimePermission ""loadLibrary.fallbackLinker"";
}
```

Added to the policy file. Or we need to load the library in some other way which does not trigger the check. (e.g. use NativeLibraries directly).
;;;","2023-09-08 01:33;alanb;java.base has all permissions, isn't the issue here that LibFallback.tryLoadLibrary should be calling System.loadLibrary in a privileged block?;;;","2023-09-08 02:24;mcimadamore;Actually, as suggested by [~sundar] and [~alanb] - we just need AccessController.doPrivileged ;;;","2023-09-08 03:24;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/15633
Date: 2023-09-08 10:19:05 +0000;;;","2023-09-08 09:37;dukebot;Changeset: a62c48b8
Author:    Maurizio Cimadamore <mcimadamore@openjdk.org>
Date:      2023-09-08 16:36:21 +0000
URL:       https://git.openjdk.org/jdk/commit/a62c48b87e814b5b1f4c8089f9ff354156f92f69
;;;","2023-09-08 10:25;dcubed;The fix for this bug is integrated in jdk-22+15-1077.;;;",,,,,,,,,,,,,,,,,,,,
Open source several Swing HTMLDocument  related tests,JDK-8315889,5109874,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,honkar,honkar,honkar,2023-09-07 17:06,2023-09-20 22:22,2023-10-01 09:55,2023-09-15 13:33,17,21,22,,,,,22,client-libs,,0,amazon-interest,sn_152,test_sprint,,,,,,,,,,,,,,,,,Open source several Swing HTMLDocument related tests,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i331r7:",9223372036854775807,b16,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@568a5b31,,,,,,,,,"2023-09-12 10:12;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/15687
Date: 2023-09-12 17:05:47 +0000;;;","2023-09-15 13:33;dukebot;Changeset: 8f46abc9
Author:    Harshitha Onkar <honkar@openjdk.org>
Date:      2023-09-15 20:32:38 +0000
URL:       https://git.openjdk.org/jdk/commit/8f46abc938ffe338e25d5fdbdcfa0aaa12edfa58
;;;",,,,,,,,,,,,,,,,,,,,,,,,,
Open source several Swing JToolbar tests,JDK-8315883,5109866,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,dnguyen,dnguyen,dnguyen,2023-09-07 14:24,2023-09-25 11:27,2023-10-01 09:55,2023-09-19 11:29,17,21,22,,,,,22,client-libs,,0,amazon-interest,sn_152,test_sprint,,,,,,,,,,,,,,,,,Convert JToolbar applet based tests into main ,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i331pf:",9223372036854775807,b16,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@568a5b31,,,,,,,,,"2023-09-14 09:51;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/15748
Date: 2023-09-14 16:43:29 +0000;;;","2023-09-19 11:30;dukebot;Changeset: 62c0a1b9
Author:    Damon Nguyen <dnguyen@openjdk.org>
Date:      2023-09-19 18:28:37 +0000
URL:       https://git.openjdk.org/jdk/commit/62c0a1b9ac6462233f3ee06af470be9844e9e226
;;;",,,,,,,,,,,,,,,,,,,,,,,,,
Open some swing tests 2,JDK-8315882,5109865,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,achung,achung,achung,2023-09-07 13:29,2023-09-27 18:20,2023-10-01 09:55,2023-09-22 21:47,17,21,22,,,,,22,client-libs,,0,amazon-interest,sn_152,test_sprint,,,,,,,,,,,,,,,,,Opening some closed swing tests,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,generic,,,,,,,,,generic,,,,,"0|i331p7:",9223372036854775807,b17,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@568a5b31,,,,,,,,,"2023-09-07 13:39;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/15628
Date: 2023-09-07 20:33:27 +0000;;;","2023-09-20 15:27;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/15850
Date: 2023-09-20 22:19:42 +0000;;;","2023-09-22 21:47;dukebot;Changeset: d2d7d9a8
Author:    Alisen Chung <achung@openjdk.org>
Date:      2023-09-23 04:45:16 +0000
URL:       https://git.openjdk.org/jdk/commit/d2d7d9a8b7c68865553dcbb4d660bbb06fde3974
;;;",,,,,,,,,,,,,,,,,,,,,,,,
Open source several Swing CSS related tests,JDK-8315876,5109859,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,honkar,honkar,honkar,2023-09-07 11:42,2023-09-25 18:43,2023-10-01 09:55,2023-09-19 13:40,17,21,22,,,,,22,client-libs,,0,amazon-interest,sn_152,test_sprint,,,,,,,,,,,,,,,,,Open source several Swing CSS related tests,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i331nv:",9223372036854775807,b16,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@568a5b31,,,,,,,,,"2023-09-15 12:41;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/15769
Date: 2023-09-15 19:35:15 +0000;;;","2023-09-19 13:43;dukebot;Changeset: 833a8287
Author:    Harshitha Onkar <honkar@openjdk.org>
Date:      2023-09-19 20:41:57 +0000
URL:       https://git.openjdk.org/jdk/commit/833a82872c0b2517c7f4ae5d512cff3a428a071c
;;;",,,,,,,,,,,,,,,,,,,,,,,,,
Opensource five more Swing regression tests,JDK-8315871,5109852,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,kizune,kizune,kizune,2023-09-07 10:08,2023-09-27 18:20,2023-10-01 09:55,2023-09-25 11:33,17,21,22,,,,,22,client-libs,,0,amazon-interest,sn_152,test_sprint,,,,,,,,,,,,,,,,,"Opensource and cleanup five Swing regression tests:

javax/swing/AncestorNotifier/4817630/bug4817630.java
javax/swing/BoxLayout/4191948/bug4191948.java
javax/swing/ComponentInputMap/4248723/bug4248723.java
javax/swing/DefaultBoundedRangeModel/4297953/bug4297953.java
javax/swing/DefaultButtonModel/4097723/bug4097723.java
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i331mb:",9223372036854775807,b17,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@568a5b31,,,,,,,,,"2023-09-13 01:54;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/15702
Date: 2023-09-13 08:48:25 +0000;;;","2023-09-25 11:33;dukebot;Changeset: be9cc73f
Author:    Alexander Zuev <kizune@openjdk.org>
Date:      2023-09-25 18:30:49 +0000
URL:       https://git.openjdk.org/jdk/commit/be9cc73fcad0cac0a6f12b0f962fbe3bd8328ec9
;;;",,,,,,,,,,,,,,,,,,,,,,,,,
icu fails to compile with Visual Studio 2022 17.6.5,JDK-8315870,5109851,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,kcr,kcr,kcr,2023-09-07 09:47,2023-09-15 07:06,2023-10-01 09:55,2023-09-08 06:25,8,jfx21,,,,,,jfx22,javafx,,0,jfx21u-fix-request,jfx21u-fix-yes,noreg-build,sn_152,,,,,,,,,,,,,,,,"A test build of the latest jfx mainline sources with Visual Studio 2022 17.6.5:

[926/5619] Building CXX object Source/ThirdParty/icu/CMakeFiles/icui18n.dir/source/i18n/fmtable.cpp.obj
FAILED: Source/ThirdParty/icu/CMakeFiles/icui18n.dir/source/i18n/fmtable.cpp.obj 
VS2022-17.6.5/VC/bin/x64/cl.exe  /nologo /TP -DBUILDING_JAVA__=1 -DBUILDING_WEBKIT=1 -DBUILDING_WITH_CMAKE=1 -DDATA_DIR=/""share/"" -DHAVE_CONFIG_H=1 -DHAVE_DLOPEN=0 -DICU_UTIL_DATA_IMPL=ICU_UTIL_DATA_STATIC -DLIB_ICU_I18N_STATIC -DNOMINMAX -DPAS_BMALLOC=1 -DUCONFIG_ONLY_HTML_CONVERSION=1 -DUNICODE -DU_CHARSET_IS_UTF8=1 -DU_ENABLE_DYLOAD=0 -DU_I18N_IMPLEMENTATION -DU_STATIC_IMPLEMENTATION -DWINVER=0x601 -D_CRT_SECURE_CPP_OVERLOAD_STANDARD_NAMES=1 -D_CRT_SECURE_NO_WARNINGS -D_HAS_EXCEPTIONS=0 -D_UNICODE -D_WINDOWS -D_WINSOCKAPI_="""" -Ijfx/modules/javafx.web/src/main/native/Source/ThirdParty/icu/source/common -Ijfx/modules/javafx.web/src/main/native/Source/ThirdParty/icu/source/i18n /O2 /Ob2 /DNDEBUG -MD /wd4018 /wd4060 /wd4068 /wd4100 /wd4127 /wd4146 /wd4189 /wd4201 /wd4244 /wd4245 /wd4251 /wd4275 /wd4267 /wd4305 /wd4309 /wd4312 /wd4324 /wd4389 /wd4456 /wd4457 /wd4458 /wd4459 /wd4505 /wd4611 /wd4646 /wd4701 /wd4702 /wd4706 /wd4715 /wd4722 /wd4723 /wd4805 /wd4838 /wd4840 /wd4996 /wd5205 /wd5054 /wd5055 /EHa- /EHc- /EHs- /fp:except- /analyze- /bigobj -D_ENABLE_EXTENDED_ALIGNED_STORAGE /utf-8 /validate-charset /Oy- /Zc:lambda /GR /wd4005 -std:c++20 /showIncludes /FoSource/ThirdParty/icu/CMakeFiles/icui18n.dir/source/i18n/fmtable.cpp.obj /FdSource/ThirdParty/icu/CMakeFiles/icui18n.dir/icui18n.pdb /FS -c jfx/modules/javafx.web/src/main/native/Source/ThirdParty/icu/source/i18n/fmtable.cpp
jfx/modules/javafx.web/src/main/native/Source/ThirdParty/icu/source/i18n/fmtable.cpp(59): error C2666: 'icu_73::Measure::operator ==': overloaded functions have similar conversions
jfx/modules/javafx.web/src/main/native/Source/ThirdParty/icu/source/i18n/unicode/measure.h(90): note: could be 'bool icu_73::Measure::operator ==(const icu_73::UObject &) const'
jfx/modules/javafx.web/src/main/native/Source/ThirdParty/icu/source/common/unicode/stringpiece.h(326): note: or       'UBool icu_73::operator ==(const icu_73::StringPiece &,const icu_73::StringPiece &)'
jfx/modules/javafx.web/src/main/native/Source/ThirdParty/icu/source/i18n/unicode/measure.h(90): note: or 'bool icu_73::Measure::operator ==(const icu_73::UObject &) const' [synthesized expression 'y == x']
jfx/modules/javafx.web/src/main/native/Source/ThirdParty/icu/source/common/unicode/stringpiece.h(326): note: or 'UBool icu_73::operator ==(const icu_73::StringPiece &,const icu_73::StringPiece &)' [synthesized expression 'y == x']
jfx/modules/javafx.web/src/main/native/Source/ThirdParty/icu/source/i18n/fmtable.cpp(59): note: while trying to match the argument list '(const icu_73::Measure, const icu_73::Measure)'
",,,,,,,,,,,,JDK-8316322,JDK-8316317,JDK-8316321,JDK-8316045,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i331m3:",9223372036854775807,b09,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@5a8b92bd,,,,,,,,,"2023-09-07 10:09;kcr;This has already been fixed in the upstream ICU4C repo. It is a one line fix in the failing file. The diff is:

diff --git a/modules/javafx.web/src/main/native/Source/ThirdParty/icu/source/i18n/fmtable.cpp b/modules/javafx.web/src/main/native/Source/ThirdParty/icu/source/i18n/fmtable.cpp
index f02726299f..2515c0f9ff 100644
--- a/modules/javafx.web/src/main/native/Source/ThirdParty/icu/source/i18n/fmtable.cpp
+++ b/modules/javafx.web/src/main/native/Source/ThirdParty/icu/source/i18n/fmtable.cpp
@@ -56,7 +56,7 @@ using number::impl::DecimalQuantity;
 // Return true if *a == *b.
 static inline UBool objectEquals(const UObject* a, const UObject* b) {
     // LATER: return *a == *b;
-    return *((const Measure*) a) == *((const Measure*) b);
+    return *((const Measure*) a) == *b;
 }

 // Return a clone of *a.


See: https://github.com/unicode-org/icu/commit/c7e967c456ceff6436607ca2a3da034320ca34c3;;;","2023-09-07 15:02;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jfx/pull/1235
Date: 2023-09-07 21:55:31 +0000;;;","2023-09-08 06:25;dukebot;Changeset: ed921717
Author:    Kevin Rushforth <kcr@openjdk.org>
Date:      2023-09-08 13:22:54 +0000
URL:       https://git.openjdk.org/jfx/commit/ed921717b3edbf3e76a888c0ddab83dcc1d7dbe7
;;;","2023-09-11 10:59;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jfx21u/pull/14
Date: 2023-09-11 17:52:34 +0000;;;","2023-09-11 11:33;roboduke;[jfx21u-fix-request] Approval Request from Kevin Rushforth
Keep native WebKit in sync. Also, will eventually be needed for next compiler update.;;;",,,,,,,,,,,,,,,,,,,,,,
[11u] Backport 8227337: javax/management/remote/mandatory/connection/ReconnectTest.java NoSuchObjectException no such object in table,JDK-8315862,5109839,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,clanger,clanger,clanger,2023-09-07 07:28,2023-09-14 08:35,2023-10-01 09:55,2023-09-14 08:35,11,,,,,,,11.0.22,core-svc,,0,jdk11u-fix-request,jdk11u-fix-yes,,,,,,,,,,,,,,,,,,"The original issue JDK-8227337 is closed so we have to resort to opening a new JBS item for the backport.

The original commit https://github.com/openjdk/jdk/commit/50e18e29e334e0cc52729e70731e5204ac479306 was made in jdk16",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8205467,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i331jf:",9223372036854775807,master,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@1f101086,,,,,,,,,"2023-09-07 08:05;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk11u-dev/pull/2120
Date: 2023-09-05 08:01:21 +0000;;;","2023-09-13 14:07;clanger;Fix request (11u)
Testfix which is needed for another test fix (JDK-8205467). We've seen the error from JDK-8205467 in our testing, so the backport should stabilize things. Testing: GHA and SAP nightlies.;;;","2023-09-14 08:35;dukebot;Changeset: 5c7ec0de
Author:    Christoph Langer <clanger@openjdk.org>
Date:      2023-09-14 15:31:56 +0000
URL:       https://git.openjdk.org/jdk11u-dev/commit/5c7ec0dea6751a256db2a7373420863040a21804
;;;",,,,,,,,,,,,,,,,,,,,,,,,
Exclude Scenegraph and Charts test classes that serve as a base class,JDK-8315845,5109817,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,aghaisas,aghaisas,aghaisas,2023-09-07 02:16,2023-09-14 07:06,2023-10-01 09:55,2023-09-14 07:02,jfx21,,,,,,,jfx22,javafx,,0,noreg-self,sn_152,test_sprint,testbug,,,,,,,,,,,,,,,,"Exclude below test classes from execution as they are abstract classes and serve as the base class for other tests.
If not excluded, they report false failures.

test/scenegraph/events/EventTestCommon.java
test/scenegraph/events/EventTestHidingPopup.java
test/scenegraph/events/EventTestTextInput.java
test/scenegraph/richtext/RichTextPropertiesFunctional.java
test/scenegraph/richtext/RichTextTestBase.java

javafx/scene/control/test/chart/AxisBase.java
javafx/scene/control/test/chart/ChartBase.java
javafx/scene/control/test/chart/ValueAxisBase.java
javafx/scene/control/test/chart/XYChartBase.java",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,generic,,,,,,,,,generic,,,,,"0|i331ej:",9223372036854775807,inapplicable,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@1d1c7815,,,,,,,,,"2023-09-07 02:33;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jfx-tests/pull/4
Date: 2023-09-07 09:26:59 +0000;;;","2023-09-14 07:02;roboduke;Changeset: 35623633
Author:    Ajit Ghaisas <aghaisas@openjdk.org>
Date:      2023-09-14 14:01:15 +0000
URL:       https://git.openjdk.org/jfx-tests/commit/35623633b3bcda9f6a0573a0ad7510f97ba111b9
;;;",,,,,,,,,,,,,,,,,,,,,,,,,
3D tests fail because of edge pixel differences,JDK-8315842,5109813,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,jdv,jdv,jdv,2023-09-07 01:37,2023-09-18 23:19,2023-10-01 09:55,2023-09-10 23:40,jfx22,,,,,,,jfx22,javafx,,0,noreg-self,sn_152,test_sprint,testbug,,,,,,,,,,,,,,,,"When we run below test from https://github.com/openjdk/jfx-tests. We see minute differences in color on edge pixels and this make these tests fail.

Failing tests:
functional/3DTests/test/test/scenegraph/fx3d/camera/fixedeye/PerspectiveCameraFixedEyeAsChildTest.java
functional/3DTests/test/test/scenegraph/fx3d/camera/fixedeye/PerspectiveCameraFixedEyeIsolateTest.java
functional/3DTests/test/test/scenegraph/fx3d/camera/parallel/ParallelCameraAsChildTest.java
functional/3DTests/test/test/scenegraph/fx3d/camera/parallel/ParallelCameraIsolateTest.java
functional/3DTests/test/test/scenegraph/fx3d/camera/perspective/PerspectiveCameraAsChildTest.java
functional/3DTests/test/test/scenegraph/fx3d/camera/perspective/PerspectiveCameraIsolateTest.java
functional/3DTests/test/test/scenegraph/fx3d/depth/DepthTest.java
functional/3DTests/test/test/scenegraph/fx3d/depth/IntersectionTest.java
functional/3DTests/test/test/scenegraph/fx3d/lighting/MultipleLightingTest.java
functional/3DTests/test/test/scenegraph/fx3d/lighting/SingleLightingTest.java
functional/3DTests/test/test/scenegraph/fx3d/shapes/BoxTest.java
functional/3DTests/test/test/scenegraph/fx3d/shapes/CylinderTest.java
functional/3DTests/test/test/scenegraph/fx3d/shapes/MeshTest.java
functional/3DTests/test/test/scenegraph/fx3d/shapes/SphereTest.java	
functional/3DTests/test/test/scenegraph/fx3d/subscene/SubSceneBasicPropsTest.java
functional/3DTests/test/test/scenegraph/fx3d/subscene/camera/fixedeye/SubScenePerspectiveCameraFixedEyeAsChildTest.java
functional/3DTests/test/test/scenegraph/fx3d/subscene/camera/fixedeye/SubScenePerspectiveCameraFixedEyeIsolateTest.java
functional/3DTests/test/test/scenegraph/fx3d/subscene/camera/parallel/SubSceneParallelCameraAsChildTest.java
functional/3DTests/test/test/scenegraph/fx3d/subscene/camera/parallel/SubSceneParallelCameraIsolateTest.java
functional/3DTests/test/test/scenegraph/fx3d/subscene/camera/perspective/SubScenePerspectiveCameraAsChildTest.java
functional/3DTests/test/test/scenegraph/fx3d/subscene/camera/perspective/SubScenePerspectiveCameraIsolateTest.java
functional/3DTests/test/test/scenegraph/fx3d/subscene/lighting/scoping/SubSceneLightScopingTest.java
functional/3DTests/test/test/scenegraph/fx3d/subscene/shapes/SubSceneBoxTest.java
functional/3DTests/test/test/scenegraph/fx3d/subscene/shapes/SubSceneCylinderTest.java
functional/3DTests/test/test/scenegraph/fx3d/subscene/shapes/SubSceneMeshTest.java
functional/3DTests/test/test/scenegraph/fx3d/subscene/shapes/SubSceneSphereTest.java

We can add color tolerance to make these tests pass without changing its functionality.",,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8310177,,,,,,,,,,,,,,,,,,,,,,,,,,generic,,,,,,,,,generic,,,,,"0|i331dn:",9223372036854775807,inapplicable,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4143e3f7,,,,,,,,,"2023-09-07 02:54;jdv;Even after adding color tolerance, sub tests under below camera tests fails because ""camera"" object is not initialized:

Sub-tests failing because ""camera"" is null :
test/scenegraph/fx3d/camera/fixedeye/PerspectiveCameraFixedEyeIsolateTest.java
test/scenegraph/fx3d/camera/parallel/ParallelCameraIsolateTest.java
test/scenegraph/fx3d/camera/perspective/PerspectiveCameraIsolateTest.java

Also some other camera tests might pass because of addition of color tolerance, but we need to verify there results properly because they just generate white images.
Overall, leaving some camera tests all others tests are rendered properly and i have verified all images to see that they are rendering things and not just creating white images.;;;","2023-09-07 03:22;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jfx-tests/pull/5
Date: 2023-09-07 10:17:28 +0000;;;","2023-09-10 23:40;roboduke;Changeset: 0d35c195
Author:    Jayathirth D V <jdv@openjdk.org>
Committer: Ajit Ghaisas <aghaisas@openjdk.org>
Date:      2023-09-11 06:38:21 +0000
URL:       https://git.openjdk.org/jfx-tests/commit/0d35c195e060d6c3e77424853417d2a5fd47620c
;;;",,,,,,,,,,,,,,,,,,,,,,,,
3D shape tests fail because of invalid file path,JDK-8315839,5109810,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,jdv,jdv,jdv,2023-09-06 23:48,2023-09-18 23:19,2023-10-01 09:55,2023-09-08 05:05,jfx21,jfx22,,,,,,jfx22,javafx,,0,noreg-self,sn_152,test_sprint,testbug,,,,,,,,,,,,,,,,"When we run ""test/scenegraph/fx3d/shapes"" or ""test/scenegraph/fx3d/subscene/shapes"" of https://github.com/openjdk/jfx-tests all the tests under these folders fails because of IllegalArgumentException.

----------System.err:(27/2060)----------
Sep 07, 2023 11:44:31 AM com.sun.javafx.application.PlatformImpl startup
WARNING: Unsupported JavaFX configuration: classes were loaded from 'unnamed module @22de69b2'
Exception in Application start method
java.lang.RuntimeException: Exception in Application start method
at com.sun.javafx.application.LauncherImpl.launchApplication1(LauncherImpl.java:893)
at com.sun.javafx.application.LauncherImpl.lambda$launchApplication$2(LauncherImpl.java:196)
at java.base/java.lang.Thread.run(Thread.java:833)
Caused by: java.lang.IllegalArgumentException: Invalid URL: Invalid URL or resource not found
at javafx.scene.image.Image.validateUrl(Image.java:1133)
at javafx.scene.image.Image.<init>(Image.java:627)
at test.scenegraph.fx3d.utils.ShapesTestCase.<init>(ShapesTestCase.java:71)
at test.scenegraph.fx3d.shapes.MeshTestApp$MeshTestCase.<init>(MeshTestApp.java:124)
at test.scenegraph.fx3d.shapes.MeshTestApp.getTestCase(MeshTestApp.java:59)
at test.scenegraph.fx3d.shapes.Shape3DBasicApp.buildScene(Shape3DBasicApp.java:163)
at test.scenegraph.fx3d.shapes.Shape3DBasicApp.initScene(Shape3DBasicApp.java:159)
at test.scenegraph.fx3d.utils.FX3DAbstractApp.reinitScene(FX3DAbstractApp.java:45)
at test.scenegraph.fx3d.utils.FX3DAbstractApp.start(FX3DAbstractApp.java:88)
at com.sun.javafx.application.LauncherImpl.lambda$launchApplication1$9(LauncherImpl.java:839)
at com.sun.javafx.application.PlatformImpl.lambda$runAndWait$12(PlatformImpl.java:483)
at com.sun.javafx.application.PlatformImpl.lambda$runLater$10(PlatformImpl.java:456)
at java.base/java.security.AccessController.doPrivileged(AccessController.java:399)
at com.sun.javafx.application.PlatformImpl.lambda$runLater$11(PlatformImpl.java:455)
at com.sun.glass.ui.InvokeLaterDispatcher$Future.run(InvokeLaterDispatcher.java:95)
Caused by: java.lang.IllegalArgumentException: Invalid URL or resource not found
at javafx.scene.image.Image.validateUrl(Image.java:1122)
... 14 more
STATUS:Failed.`main' threw exception: java.lang.RuntimeException: Exception in Application start method

Test is not able to find required image resources. ",,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8310177,,,,,,,,,,,,,,,,,,,,,,,,,,generic,,,,,,,,,generic,,,,,"0|i331cz:",9223372036854775807,inapplicable,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4143e3f7,,,,,,,,,"2023-09-07 01:05;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jfx-tests/pull/3
Date: 2023-09-07 07:58:08 +0000;;;","2023-09-08 05:05;roboduke;Changeset: 30c25292
Author:    Jayathirth D V <jdv@openjdk.org>
Committer: Ajit Ghaisas <aghaisas@openjdk.org>
Date:      2023-09-08 12:03:11 +0000
URL:       https://git.openjdk.org/jfx-tests/commit/30c252929c3f8101c6e95972a0d14bdfdc8686d6
;;;",,,,,,,,,,,,,,,,,,,,,,,,,
Open source several Swing JSpinner related tests,JDK-8315834,5109805,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,tr,tr,tr,2023-09-06 23:24,2023-09-20 22:21,2023-10-01 09:55,2023-09-14 23:11,17,21,22,,,,,22,client-libs,,0,amazon-interest,sn_152,test_sprint,,,,,,,,,,,,,,,,,"Open source these Swing JSpinner related tests:

javax/swing/JSpinner/4522737/bug4522737.java
javax/swing/JSpinner/4656590/bug4656590.java
javax/swing/JSpinner/4680204/bug4680204.java
javax/swing/JSpinner/4862257/bug4862257.java
javax/swing/JSpinner/5104421/bug5104421.java",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,generic,,,,,,,,,generic,,,,,"0|i331bv:",9223372036854775807,b16,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@568a5b31,,,,,,,,,"2023-09-11 22:52;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/15678
Date: 2023-09-12 05:46:23 +0000;;;","2023-09-14 23:11;dukebot;Changeset: 4a63eb05
Author:    Tejesh R <tr@openjdk.org>
Date:      2023-09-15 06:08:27 +0000
URL:       https://git.openjdk.org/jdk/commit/4a63eb05221c1829b157a025a4d35cdd77a9fe04
;;;",,,,,,,,,,,,,,,,,,,,,,,,,
Open some swing tests,JDK-8315825,5109791,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,achung,achung,achung,2023-09-06 16:18,2023-09-27 18:20,2023-10-01 09:55,2023-09-22 13:53,17,21,22,,,,,22,client-libs,,0,amazon-interest,sn_152,test_sprint,,,,,,,,,,,,,,,,,Opening some closed swing tests,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,generic,,,,,,,,,generic,,,,,"0|i3318r:",9223372036854775807,b17,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@568a5b31,,,,,,,,,"2023-09-06 16:26;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/15606
Date: 2023-09-06 23:19:58 +0000;;;","2023-09-07 08:26;vdyakov;[~achung] please put full names of ""new"" tests in the description;;;","2023-09-19 18:06;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/15830
Date: 2023-09-20 00:57:57 +0000;;;","2023-09-22 13:54;dukebot;Changeset: e015e6ce
Author:    Alisen Chung <achung@openjdk.org>
Date:      2023-09-22 20:51:14 +0000
URL:       https://git.openjdk.org/jdk/commit/e015e6ce28e263e546cd1b6583a4a3ecc431d576
;;;",,,,,,,,,,,,,,,,,,,,,,,
Open source several Swing Text/HTML related tests,JDK-8315824,5109790,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,honkar,honkar,honkar,2023-09-06 16:16,2023-09-20 22:21,2023-10-01 09:55,2023-09-14 10:52,17,21,22,,,,,22,client-libs,,0,amazon-interest,sn_152,test_sprint,,,,,,,,,,,,,,,,,Open source several Swing Text related tests,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i3318j:",9223372036854775807,b16,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@568a5b31,,,,,,,,,"2023-09-11 17:40;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/15675
Date: 2023-09-12 00:34:16 +0000;;;","2023-09-14 10:54;dukebot;Changeset: c11f8352
Author:    Harshitha Onkar <honkar@openjdk.org>
Date:      2023-09-14 17:51:54 +0000
URL:       https://git.openjdk.org/jdk/commit/c11f8352e96a01b39e54080716030ec96f717cae
;;;",,,,,,,,,,,,,,,,,,,,,,,,,
vmTestbase/nsk/jvmti/Allocate/alloc001/alloc001.java fails on libgraal,JDK-8315818,5109783,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,dnsimon,dnsimon,dnsimon,2023-09-06 13:38,2023-09-18 23:32,2023-10-01 09:55,2023-09-08 04:58,,,,,,,,22,hotspot,,0,graal-related,jvmci,,,,,,,,,,,,,,,,,,"This test fails because it limits the virtual memory available the test JVM process[1] such that there is insufficient memory to mmap libgraal. When this happens, the VM should still continue, just without JIT compilation.

[1] https://github.com/openjdk/jdk/blob/86a18f5e2e0825dddb77656b2f43f64684f1464c/test/hotspot/jtreg/vmTestbase/nsk/jvmti/Allocate/alloc001/alloc001.java#L92",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8316453,JDK-8316273,JDK-8310055,,JDK-8315948,,,,,,,,,,,,,,,,,,,,,,,,,"0|i3316z:",9223372036854775807,b15,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,,,"2023-09-06 13:55;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/15602
Date: 2023-09-06 20:49:05 +0000;;;","2023-09-08 04:58;dukebot;Changeset: ebc718f5
Author:    Doug Simon <dnsimon@openjdk.org>
Date:      2023-09-08 11:55:54 +0000
URL:       https://git.openjdk.org/jdk/commit/ebc718f5c06618894a4e667fd497d9b87514dcfd
;;;",,,,,,,,,,,,,,,,,,,,,,,,,
Fix copyright lines in jfx-tests repo after JDK-8315409,JDK-8315809,5109772,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,kcr,kcr,kcr,2023-09-06 11:17,2023-09-08 10:47,2023-10-01 09:55,2023-09-08 10:45,jfx22,,,,,,,jfx22,javafx,,0,noreg-self,sn_152,test_sprint,testbug,,,,,,,,,,,,,,,,"A couple copyright header issues were identified during the review of JDK-8315409. This is a follow-up bug to fix them.

I did this by running the same copyright tool we use to update the jfx repo, with a slight modification to not filter out those files that already had ""Copyright.*2023"", since those are the ones that need to be fixed up for incorrect formatting.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8315409,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i3314j:",9223372036854775807,inapplicable,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@1d1c7815,,,,,,,,,"2023-09-06 11:28;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jfx-tests/pull/2
Date: 2023-09-06 18:22:38 +0000;;;","2023-09-08 10:45;roboduke;Changeset: 93ae9396
Author:    Kevin Rushforth <kcr@openjdk.org>
Date:      2023-09-08 17:43:20 +0000
URL:       https://git.openjdk.org/jfx-tests/commit/93ae9396986ff94e929515ad185361289daa6d58
;;;",,,,,,,,,,,,,,,,,,,,,,,,,
Open source several Swing JTabbedPane JTextArea JTextField tests,JDK-8315804,5109765,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,dnguyen,dnguyen,dnguyen,2023-09-06 09:30,2023-09-25 11:26,2023-10-01 09:55,2023-09-18 16:09,17,21,22,,,,,22,client-libs,,0,amazon-interest,sn_152,test_sprint,,,,,,,,,,,,,,,,,Convert applet based tests into main,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i3312z:",9223372036854775807,b16,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@568a5b31,,,,,,,,,"2023-09-14 09:43;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/15747
Date: 2023-09-14 16:35:44 +0000;;;","2023-09-18 16:09;dukebot;Changeset: 24c3d86f
Author:    Damon Nguyen <dnguyen@openjdk.org>
Date:      2023-09-18 23:08:26 +0000
URL:       https://git.openjdk.org/jdk/commit/24c3d86f32a2e2d9cb24cd8827ef1f20bb53fead
;;;",,,,,,,,,,,,,,,,,,,,,,,,,
runtime/Safepoint/TestAbortVMOnSafepointTimeout.java fails after JDK-8305507,JDK-8315795,5109756,Bug,Resolved,JDK,JDK,software,duke,,,P2,Fixed,pchilanomate,dcubed,dcubed,2023-09-06 07:25,2023-09-13 22:39,2023-10-01 09:55,2023-09-07 13:15,22,,,,,,,22,hotspot,,0,intermittent,sync,tier1,,,,,,,,,,,,,,,,,"The following test failed in the JDK22 CI:

runtime/Safepoint/TestAbortVMOnSafepointTimeout.java

Here's a snippet from the log file:

#section:driver
----------messages:(7/260)----------
command: driver TestAbortVMOnSafepointTimeout
reason: User specified action: run driver TestAbortVMOnSafepointTimeout 
started: Tue Sep 05 23:27:38 UTC 2023
Mode: agentvm
Agent id: 45
finished: Tue Sep 05 23:27:41 UTC 2023
elapsed time (seconds): 3.969
----------configuration:(16/1689)*----------

<snip>

----------System.out:(8/3627)*----------
Command line: [c:\\ade\\mesos\\work_dir\\jib-master\\install\\jdk-22+14-1021\\windows-x64-debug.jdk\\jdk-22\\fastdebug\\bin\\java.exe -cp C:\\sb\\prod\\1693955935\\testoutput\\test-support\\jtreg_open_test_hotspot_jtreg_tier1_runtime\\classes\\1\\runtime\\Safepoint\\TestAbortVMOnSafepointTimeout.d;C:\\ade\\mesos\\work_dir\\jib-master\\install\\jdk-22+14-1021\\src.full\\open\\test\\hotspot\\jtreg\\runtime\\Safepoint;C:\\sb\\prod\\1693955935\\testoutput\\test-support\\jtreg_open_test_hotspot_jtreg_tier1_runtime\\classes\\1\\testlibrary;C:\\sb\\prod\\1693955935\\testoutput\\test-support\\jtreg_open_test_hotspot_jtreg_tier1_runtime\\classes\\1\\test\\lib;C:\\ade\\mesos\\work_dir\\jib-master\\install\\jtreg\\7.3.1\\1\\bundles\\jtreg-7.3.1+1.zip\\jtreg\\lib\\jtreg.jar;C:\\ade\\mesos\\work_dir\\jib-master\\install\\jtreg\\7.3.1\\1\\bundles\\jtreg-7.3.1+1.zip\\jtreg\\lib\\junit-platform-console-standalone-1.9.2.jar;C:\\ade\\mesos\\work_dir\\jib-master\\install\\jtreg\\7.3.1\\1\\bundles\\jtreg-7.3.1+1.zip\\jtreg\\lib\\testng-7.3.0.jar;C:\\ade\\mesos\\work_dir\\jib-master\\install\\jtreg\\7.3.1\\1\\bundles\\jtreg-7.3.1+1.zip\\jtreg\\lib\\jcommander-1.82.jar;C:\\ade\\mesos\\work_dir\\jib-master\\install\\jtreg\\7.3.1\\1\\bundles\\jtreg-7.3.1+1.zip\\jtreg\\lib\\guice-5.1.0.jar -Xbootclasspath/a:. -XX:+UnlockDiagnosticVMOptions -XX:+WhiteBoxAPI -XX:+SafepointTimeout -XX:+SafepointALot -XX:+AbortVMOnSafepointTimeout -XX:SafepointTimeoutDelay=50 -XX:GuaranteedSafepointInterval=1 -XX:-CreateCoredumpOnCrash -Xms64m TestAbortVMOnSafepointTimeout$Test 999 ]
[2023-09-05T23:27:38.062973700Z] Gathering output for process 9824
[2023-09-05T23:27:38.916360Z] Waiting for completion for process 9824
[2023-09-05T23:27:38.932021200Z] Waiting for completion finished for process 9824
Command line: [c:\\ade\\mesos\\work_dir\\jib-master\\install\\jdk-22+14-1021\\windows-x64-debug.jdk\\jdk-22\\fastdebug\\bin\\java.exe -cp C:\\sb\\prod\\1693955935\\testoutput\\test-support\\jtreg_open_test_hotspot_jtreg_tier1_runtime\\classes\\1\\runtime\\Safepoint\\TestAbortVMOnSafepointTimeout.d;C:\\ade\\mesos\\work_dir\\jib-master\\install\\jdk-22+14-1021\\src.full\\open\\test\\hotspot\\jtreg\\runtime\\Safepoint;C:\\sb\\prod\\1693955935\\testoutput\\test-support\\jtreg_open_test_hotspot_jtreg_tier1_runtime\\classes\\1\\testlibrary;C:\\sb\\prod\\1693955935\\testoutput\\test-support\\jtreg_open_test_hotspot_jtreg_tier1_runtime\\classes\\1\\test\\lib;C:\\ade\\mesos\\work_dir\\jib-master\\install\\jtreg\\7.3.1\\1\\bundles\\jtreg-7.3.1+1.zip\\jtreg\\lib\\jtreg.jar;C:\\ade\\mesos\\work_dir\\jib-master\\install\\jtreg\\7.3.1\\1\\bundles\\jtreg-7.3.1+1.zip\\jtreg\\lib\\junit-platform-console-standalone-1.9.2.jar;C:\\ade\\mesos\\work_dir\\jib-master\\install\\jtreg\\7.3.1\\1\\bundles\\jtreg-7.3.1+1.zip\\jtreg\\lib\\testng-7.3.0.jar;C:\\ade\\mesos\\work_dir\\jib-master\\install\\jtreg\\7.3.1\\1\\bundles\\jtreg-7.3.1+1.zip\\jtreg\\lib\\jcommander-1.82.jar;C:\\ade\\mesos\\work_dir\\jib-master\\install\\jtreg\\7.3.1\\1\\bundles\\jtreg-7.3.1+1.zip\\jtreg\\lib\\guice-5.1.0.jar -Xbootclasspath/a:. -XX:+UnlockDiagnosticVMOptions -XX:+WhiteBoxAPI -XX:+SafepointTimeout -XX:+SafepointALot -XX:+AbortVMOnSafepointTimeout -XX:AbortVMOnSafepointTimeoutDelay=2500 -XX:SafepointTimeoutDelay=50 -XX:GuaranteedSafepointInterval=1 -XX:-CreateCoredumpOnCrash -Xms64m TestAbortVMOnSafepointTimeout$TestWithDelay ]
[2023-09-05T23:27:38.932021200Z] Gathering output for process 47860
[2023-09-05T23:27:41.724038600Z] Waiting for completion for process 47860
[2023-09-05T23:27:41.739681500Z] Waiting for completion finished for process 47860
----------System.err:(55/3512)*----------
 stdout: [[0.530s][warning][safepoint] 
[0.531s][warning][safepoint] # SafepointSynchronize::begin: Timeout detected:
[0.531s][warning][safepoint] # SafepointSynchronize::begin: Timed out while spinning to reach a safepoint.
[0.531s][warning][safepoint] # SafepointSynchronize::begin: Threads which did not reach the safepoint:
[0.531s][warning][safepoint] # ""main"" #1 [53624] prio=5 os_prio=0 cpu=187.50ms elapsed=0.49s tid=0x000001f5c77c2980 nid=53624 runnable  [0x00000001ab5fd000]
[0.531s][warning][safepoint]    java.lang.Thread.State: RUNNABLE
[0.531s][warning][safepoint] Thread: 0x000001f5c77c2980  [0xd178] State: _running _at_poll_safepoint 0
[0.531s][warning][safepoint]    JavaThread state: _thread_in_vm
[0.531s][warning][safepoint] 
[0.531s][warning][safepoint] # SafepointSynchronize::begin: (End of list)
[0.743s][warning][safepoint] # SafepointSynchronize: Finished after    281 ms
[1.013s][warning][safepoint] 
[1.013s][warning][safepoint] # SafepointSynchronize::begin: Timeout detected:
[1.013s][warning][safepoint] # SafepointSynchronize::begin: Timed out while spinning to reach a safepoint.
[1.013s][warning][safepoint] # SafepointSynchronize::begin: Threads which did not reach the safepoint:
[1.013s][warning][safepoint] # ""main"" #1 [53624] prio=5 os_prio=0 cpu=250.00ms elapsed=0.97s tid=0x000001f5c77c2980 nid=53624 runnable  [0x00000001ab5ff000]
[1.013s][warning][safepoint]    java.lang.Thread.State: RUNNABLE
[1.013s][warning][safepoint] Thread: 0x000001f5c77c2980  [0xd178] State: _running _at_poll_safepoint 0
[1.013s][warning][safepoint]    JavaThread state: _thread_in_vm
[1.013s][warning][safepoint] 
[1.013s][warning][safepoint] # SafepointSynchronize::begin: (End of list)
#
# A fatal error has been detected by the Java Runtime Environment:
#
#  Internal Error (c:\\sb\\prod\\1693954293\\workspace\\open\\src\\hotspot\\share\\runtime\\safepoint.cpp:823), pid=47860, tid=60696
#  fatal error: Safepoint sync time longer than 50.000000 ms detected when executing SafepointALot.
#
# JRE version: Java(TM) SE Runtime Environment (22.0+14) (fastdebug build 22-ea+14-1021)
# Java VM: Java HotSpot(TM) 64-Bit Server VM (fastdebug 22-ea+14-1021, mixed mode, sharing, tiered, compressed oops, compressed class ptrs, g1 gc, windows-amd64)
# CreateCoredumpOnCrash turned off, no core file dumped
#
Unsupported internal testing APIs have been used.

# An error report file with more information is saved as:
# C:\\sb\\prod\\1693955935\\testoutput\\test-support\\jtreg_open_test_hotspot_jtreg_tier1_runtime\\scratch\\4\\hs_err_pid47860.log
#
# If you would like to submit a bug report, please visit:
#   https://bugreport.java.com/bugreport/crash.jsp
#
];
 stderr: []
 exitValue = 1

java.lang.RuntimeException: 'THE FOLLOWING STALL SHOULD BE CAPTURED' missing from stdout/stderr
	at jdk.test.lib.process.OutputAnalyzer.shouldContain(OutputAnalyzer.java:221)
	at TestAbortVMOnSafepointTimeout.testGracePeriodAppliedBeforeVmAbort(TestAbortVMOnSafepointTimeout.java:80)
	at TestAbortVMOnSafepointTimeout.main(TestAbortVMOnSafepointTimeout.java:102)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
	at java.base/java.lang.reflect.Method.invoke(Method.java:580)
	at com.sun.javatest.regtest.agent.MainActionHelper$AgentVMRunnable.run(MainActionHelper.java:333)
	at java.base/java.lang.Thread.run(Thread.java:1570)

JavaTest Message: Test threw exception: java.lang.RuntimeException
JavaTest Message: shutting down test

result: Failed. Execution failed: `main' threw exception: java.lang.RuntimeException: 'THE FOLLOWING STALL SHOULD BE CAPTURED' missing from stdout/stderr

The failing error mesg was added by the following fix:

JDK-8305507 Add support for grace period before AbortVMOnSafepointTimeout triggers

so it looks like JDK-8305507 has caused a regression so I'm starting
this bug off as a P2. The fix for JDK-8305507 was integrated in
jdk-22+14-1015 and this first sighting happened in jdk-22+14-1021-tier1.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8305507,,,,,,,,,,,,,,,x86_64,,,,,,,,,windows,,,,,"0|i3310z:",9223372036854775807,b15,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,,,"2023-09-06 07:29;dcubed;[~pchilanomate] - Please take a look at this failure. It looks like a regression from the fix for:
JDK-8305507 Add support for grace period before AbortVMOnSafepointTimeout triggers;;;","2023-09-06 10:16;pchilanomate;I run the test on mach5 ~1000 times on windows-x64-debug but couldn't reproduce the issue so far. Given that since the new test was integrated we have seen 2 failures in ~20 tier1 runs I'm guessing that the issue is when the test is run concurrently with other tests, affecting scheduling and causing the test to run slower. This test is already time-dependent so a bad scheduling can cause it to fail. 
I've raised concerned in the PR that the AbortVMOnSafepointTimeoutDelay might be low and it was increased to add 1 extra second. But seems it's not enough for Windows and we might need to increase it even more.
I'll run tier1 jobs in mach5 to see if I can reproduce it. ;;;","2023-09-06 15:21;pchilanomate;Running open/test/hotspot/jtreg/:tier1_runtime on windows-x64-debug effectively reproduces the failure ~10% of the time. 

The test ""TestWithDelay"" is verifying the correct behavior of flag AbortVMOnSafepointTimeoutDelay by spawning a child VM that is designed to exit with fatal error at the first safepoint timeout after 2.5 seconds of elapsed time since the start of the program. The parent VM not only checks that the child VM exited with failure but checks that the output stream contains the string ""THE FOLLOWING STALL SHOULD BE CAPTURED"" (PRE_STALL_TEXT). That means that if the main thread hasn't printed that text before that safepoint timeout occurs after 2.5s then the test will fail. I've added logging and noticed 3 things that are contributing to the main thread taking longer than expected to print the PRE_STALL_TEXT text:

1- The main thread sometimes reaches the first ""wb.waitUnsafe(999)"" statement way later than expected. I've measured the thread reaching that line as late as 1.7s after the program started.
2 - The Sleep(999) call sometimes lasts longer than 999ms. I've measured calls that wakeup after 1700ms of sleeping.
3 - The time since wakeup from Sleep to printing the PRE_STALL_TEXT text can take a long time. I've measured a case where the main thread woke up from the sleep call before 2.5s, at 2.1s, but is not fast enough to print it in those 400ms we have left.

I was not able to reproduce the failure when the test was running alone. Only when running the whole tier1_runtime. So with that and looking at the numbers above it's a clear scheduling issue. I remember encountering this scheduling issue and sleeps calls being too slow on Windows before, but not sure for which bug.

Testing a patch where I just increased the value of AbortVMOnSafepointTimeoutDelay to account for all the possible delays mentioned above. Currently testing a value of 10s.;;;","2023-09-07 04:37;mbaesken;We noticed as well 3 crashes in TestAbortVMOnSafepointTimeout.java in the recent 2 days; 2 on Linux ppc64le, one on Windows. See the backtrace of the Windows crash as reported in hs-err file :

#
# A fatal error has been detected by the Java Runtime Environment:
#
#  Internal Error (d:\ntamd64\jdk\src\hotspot\share\runtime\safepoint.cpp:823), pid=3840, tid=91708
#  fatal error: Safepoint sync time longer than 50.000000 ms detected when executing Cleanup.
#

---------------  T H R E A D  ---------------

Current thread (0x0000027f88061ae0):  VMThread ""VM Thread""          [id=91708, stack(0x000000a1d8c00000,0x000000a1d8d00000) (1024K)], _nested_threads_hazard_ptr_cnt=0

Stack: [0x000000a1d8c00000,0x000000a1d8d00000]
Native frames: (J=compiled Java code, j=interpreted, Vv=VM code, C=native code)
V  [jvm.dll+0xc7d931]  os::win32::platform_print_native_stack+0x101  (os_windows_x86.cpp:236)
V  [jvm.dll+0xfcc203]  VMError::report+0x1473  (vmError.cpp:1000)
V  [jvm.dll+0xfce645]  VMError::report_and_die+0x645  (vmError.cpp:1814)
V  [jvm.dll+0x550b6e]  report_fatal+0x7e  (debug.cpp:212)
V  [jvm.dll+0xd40291]  SafepointSynchronize::print_safepoint_timeout+0x2a1  (safepoint.cpp:822)
V  [jvm.dll+0xd40688]  SafepointSynchronize::synchronize_threads+0x1c8  (safepoint.cpp:264)
V  [jvm.dll+0xd3da70]  SafepointSynchronize::begin+0x360  (safepoint.cpp:394)
V  [jvm.dll+0xfd76b2]  VMThread::inner_execute+0x202  (vmThread.cpp:429)
V  [jvm.dll+0xfd7d74]  VMThread::run+0x104  (vmThread.cpp:175)
V  [jvm.dll+0xf352f8]  Thread::call_run+0x1c8  (thread.cpp:225)
V  [jvm.dll+0xc7b752]  os::win32::thread_native_entry+0xa2  (os_windows.cpp:545)
C  [ucrtbase.dll+0x2268a]  (no source info available)
C  [KERNEL32.DLL+0x17ac4]  (no source info available)
C  [ntdll.dll+0x5a351]  (no source info available)

VM_Operation (0x00007ffe4ee80960): Cleanup, mode: safepoint, requested by thread 0x0000027f88061ae0;;;","2023-09-07 09:28;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/15622
Date: 2023-09-07 16:02:55 +0000;;;","2023-09-07 13:15;dukebot;Changeset: 4c6d7fc2
Author:    Patricio Chilano Mateo <pchilanomate@openjdk.org>
Date:      2023-09-07 20:12:04 +0000
URL:       https://git.openjdk.org/jdk/commit/4c6d7fc2584ce969649d06a366fb4b8688a3aaa9
;;;",,,,,,,,,,,,,,,,,,,,,
[AIX] Build Disk Local Detection Issue with GNU-utils df on AIX,JDK-8315786,5109747,Bug,Resolved,JDK,JDK,software,duke,,,P5,Fixed,dkumari,dkumari,dkumari,2023-09-06 05:43,2023-09-27 18:19,2023-10-01 09:55,2023-09-20 23:04,,,,,,,,22,infrastructure,,0,,,,,,,,,,,,,,,,,,,,"The AIX build process  encountered an issue related to disk detection. Initially, it erroneously determined that the build was not on a local disk, now it throws the following error, and always concludes that it's local:

checking if build directory is on local disk... /home/hotspot/openjdk/jdk/build/.configure-support/generated-configure.sh: line 156403: /opt/freeware/bin/df -T local > /dev/null 2>&1: No such file or directory
yes
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,aix,,,,,"0|i330yz:",9223372036854775807,b17,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@429c566,,,,,,,,,"2023-09-07 10:10;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/15592
Date: 2023-09-06 13:46:01 +0000;;;","2023-09-20 23:04;dukebot;Changeset: bee75242
Author:    Deepa Kumari <dpakri181@gmail.com>
Committer: Amit Kumar <amitkumar@openjdk.org>
Date:      2023-09-21 06:01:49 +0000
URL:       https://git.openjdk.org/jdk/commit/bee7524251c0da72f1b32f875815ff4e0eb88a32
;;;",,,,,,,,,,,,,,,,,,,,,,,,,
Open source few swing JList and JMenuBar tests,JDK-8315761,5109719,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,abhiscxk,abhiscxk,abhiscxk,2023-09-06 02:27,2023-09-18 15:31,2023-10-01 09:55,2023-09-13 00:34,21,22,,,,,,22,client-libs,,0,amazon-interest,sn_152,test_sprint,,,,,,,,,,,,,,,,,"Few JList and JMenuBar swing applet tests needs to be converted to main based and open sourced

javax/swing/JList/4300224/bug4300224.java
javax/swing/JList/4487689/bug4487689.java
javax/swing/JList/4832765/bug4832765.java
javax/swing/JMenuBar/4802656/bug4802656.java",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i330sr:",9223372036854775807,b15,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@568a5b31,,,,,,,,,"2023-09-07 08:25;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/15621
Date: 2023-09-07 15:19:37 +0000;;;","2023-09-13 00:36;dukebot;Changeset: bb6b3f24
Author:    Abhishek Kumar <abhiscxk@openjdk.org>
Date:      2023-09-13 07:35:01 +0000
URL:       https://git.openjdk.org/jdk/commit/bb6b3f2486b07a6ccdeea18519453e6d9c05c2c3
;;;",,,,,,,,,,,,,,,,,,,,,,,,,
RandomTestBsi1999 fails often with timeouts on Linux ppc64le,JDK-8315751,5109706,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,mbaesken,mbaesken,mbaesken,2023-09-06 00:44,2023-09-14 00:28,2023-10-01 09:55,2023-09-07 00:37,17,21,22,,,,,22,core-libs,,0,jdk17u-fix-request,jdk17u-fix-yes,jdk21u-fix-request,jdk21u-fix-SQE-ok-next,jdk21u-fix-yes,,,,,,,,,,,,,,,"The test RandomTestBsi1999 fails often with timeouts on Linux ppc64le; even when it succeeds the test takes a lot of time and is close to timing out. Probably we should increase the timeout value for this test.",,,,,,,,,,,,JDK-8316269,JDK-8316200,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,ppc,,,,,,,,,linux,,,,,"0|i330pv:",9223372036854775807,b15,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@38ded199,,,,,,,,,"2023-09-06 07:54;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/15594
Date: 2023-09-06 14:47:20 +0000;;;","2023-09-07 00:37;dukebot;Changeset: 9887cd8a
Author:    Matthias Baesken <mbaesken@openjdk.org>
Date:      2023-09-07 07:36:08 +0000
URL:       https://git.openjdk.org/jdk/commit/9887cd8adc408a71b045b1a4891cc0d5dede7e0e
;;;","2023-09-08 00:02;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk21u/pull/143
Date: 2023-09-08 06:54:48 +0000;;;","2023-09-12 00:53;mbaesken;jdk21u backport request
I would like to have the patch in jdk21u as well, because the issue is present there too. The patch is low risk and applies cleanly.;;;","2023-09-12 01:14;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/1727
Date: 2023-09-12 08:07:05 +0000;;;","2023-09-12 06:05;mbaesken;jdk17u-dev backport request
I would like to have the patch in jdk17u-dev as well, because the issue is present there too. The patch is low risk and applies cleanly.;;;",,,,,,,,,,,,,,,,,,,,,
PopupMenuLocation.java test fails to receive PopupMenu ActionEvent,JDK-8315747,5109701,Bug,Closed,JDK,JDK,software,duke,,,P4,Fixed,,tr,tr,2023-09-06 00:25,2023-09-06 00:28,2023-10-01 09:55,2023-09-06 00:28,,,,,,,,,client-libs,,0,,,,,,,,,,,,,,,,,,,,"ADDITIONAL SYSTEM INFORMATION :
macos aarch64

A DESCRIPTION OF THE PROBLEM :

java/awt/PopupMenu/PopupMenuLocation.java test fails on CI system with error :
java.lang.RuntimeException: Failed, didn't receive the PopupMenu ActionEvent on frame= java.awt.Frame[frame0,1536,25,350x350,layout=java.awt.FlowLayout,title=,resizable,normal], isFocused = true
	at PopupMenuLocation.openPopup(PopupMenuLocation.java:145)
	at PopupMenuLocation.test(PopupMenuLocation.java:121)
	at PopupMenuLocation.main(PopupMenuLocation.java:78)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
	at java.base/java.lang.reflect.Method.invoke(Method.java:580)
	at com.sun.javatest.regtest.agent.MainWrapper$MainTask.run(MainWrapper.java:138)
	at java.base/java.lang.Thread.run(Thread.java:1570)

",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,aarch64,,,,,,,,,iOS,,,,,"0|i330or:",9223372036854775807,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@568a5b31,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Open source several Swing Scroll related tests,JDK-8315742,5109695,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,tr,tr,tr,2023-09-05 22:37,2023-09-27 18:20,2023-10-01 09:55,2023-09-24 22:38,17,21,22,,,,,22,client-libs,,0,amazon-interest,sn_152,test_sprint,,,,,,,,,,,,,,,,,"Open source these Swing Scroll related tests:

javax/swing/JScrollBar/4495822/bug4495822.java
javax/swing/JScrollBar/4696826/bug4696826.java
javax/swing/JScrollBar/4842792/bug4842792.java
javax/swing/JScrollPane/4247092/bug4247092.java
javax/swing/JScrollPane/4264640/bug4264640.java
javax/swing/JScrollPane/4467063/bug4467063.java",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,generic,,,,,,,,,generic,,,,,"0|i330nf:",9223372036854775807,b17,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@568a5b31,,,,,,,,,"2023-09-20 02:43;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/15839
Date: 2023-09-20 09:38:19 +0000;;;","2023-09-24 22:38;dukebot;Changeset: f0ff001d
Author:    Tejesh R <tr@openjdk.org>
Date:      2023-09-25 05:35:35 +0000
URL:       https://git.openjdk.org/jdk/commit/f0ff001dd7db33eb492f01cfa08b11705956ebcd
;;;",,,,,,,,,,,,,,,,,,,,,,,,,
Open source few swing JFormattedTextField and JPopupMenu tests,JDK-8315741,5109694,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,abhiscxk,abhiscxk,abhiscxk,2023-09-05 22:25,2023-09-20 22:21,2023-10-01 09:55,2023-09-14 23:25,17,21,22,,,,,22,client-libs,,0,amazon-interest,sn_152,test_sprint,,,,,,,,,,,,,,,,,"Few JFormattedTextField and JPopupMenu swing applet tests needs to be converted to main based and open sourced

javax/swing/JFormattedTextField/4741926/bug4741926.java
javax/swing/JFormattedTextField/4863121/bug4863121.java
javax/swing/JFormattedTextField/4886538/bug4886538.java
javax/swing/JPopupMenu/4123919/bug4123919.java
javax/swing/JPopupMenu/4197019/bug4197019.java",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i330n7:",9223372036854775807,b16,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@568a5b31,,,,,,,,,"2023-09-14 02:14;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/15737
Date: 2023-09-14 09:02:51 +0000;;;","2023-09-14 23:25;dukebot;Changeset: bfbc41c1
Author:    Abhishek Kumar <abhiscxk@openjdk.org>
Date:      2023-09-15 06:23:20 +0000
URL:       https://git.openjdk.org/jdk/commit/bfbc41c1f177c7a2b8e91351ac41eaffaab2d8fc
;;;",,,,,,,,,,,,,,,,,,,,,,,,,
Missing null check in os::vm_min_address,JDK-8315739,5109693,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,djelinski,djelinski,djelinski,2023-09-05 21:37,2023-09-27 18:19,2023-10-01 09:55,2023-09-21 05:45,22,,,,,,,22,hotspot,,0,memory,metaspace,noreg-trivial,,,,,,,,,,,,,,,,,"Happens when building a Linux JDK on WSL1:

# A fatal error has been detected by the Java Runtime Environment:
#
#  SIGSEGV (0xb) at pc=0x00007f790aad3a94, pid=6304, tid=6328

Stack: [0x00007f7908540000,0x00007f7908641000],  sp=0x00007f790863ef50,  free space=1019k
Native frames: (J=compiled Java code, j=interpreted, Vv=VM code, C=native code)
C  [libc.so.6+0x63a94]
C  [libc.so.6+0x6323d]  __isoc99_fscanf+0x9d
V  [libjvm.so+0x1507085]  os::attempt_reserve_memory_between(char*, char*, unsigned long, unsigned long, bool)+0x115  (os.cpp:1887)
V  [libjvm.so+0x13f7c9b]  Metaspace::reserve_address_space_for_compressed_classes(unsigned long, bool)+0x6b  (metaspace.cpp:596)
V  [libjvm.so+0x13f87e4]  Metaspace::global_initialize()+0x834  (metaspace.cpp:796)
V  [libjvm.so+0x198b904]  universe_init()+0xf4  (universe.cpp:796)
V  [libjvm.so+0xe5d74b]  init_globals()+0x3b  (init.cpp:124)
V  [libjvm.so+0x19554e5]  Threads::create_vm(JavaVMInitArgs*, bool*)+0x2c5  (threads.cpp:550)
V  [libjvm.so+0xfd5918]  JNI_CreateJavaVM+0x58  (jni.cpp:3576)
C  [libjli.so+0x4701]  JavaMain+0xa1  (java.c:1522)
C  [libjli.so+0x82bd]  ThreadJavaMain+0xd  (java_md.c:650)

See https://github.com/openjdk/jdk/blob/5cbff2460812fee707f9d96ab00a628d1ce3fbef/src/hotspot/os/linux/os_linux.cpp#L4256

The file /proc/sys/vm/mmap_min_addr/proc/sys/vm/mmap_min_addr does not exist on WSL.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8312018,,,,,,,,,,,,,,,,,,,,,,,,linux,,,,,"0|i330mz:",9223372036854775807,b17,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,,,"2023-09-05 21:38;djelinski;[~stuefe] could you fix this?;;;","2023-09-05 23:19;stuefe;WSL Kernel seems to be in a sorry state. `/proc/sys/vm/mmap_min_addr` is part of the non-optional proc fs since Linux 2.6.29.

I'm on vacation right now, but this should be trivial to fix:

'''
diff --git a/src/hotspot/os/linux/os_linux.cpp b/src/hotspot/os/linux/os_linux.cpp
index 3a1785b27b5..f99cde5bc19 100644
--- a/src/hotspot/os/linux/os_linux.cpp
+++ b/src/hotspot/os/linux/os_linux.cpp
@@ -4254,7 +4254,7 @@ size_t os::vm_min_address() {
   if (value == 0) {
     assert(is_aligned(_vm_min_address_default, os::vm_allocation_granularity()), ""Sanity"");
     FILE* f = fopen(""/proc/sys/vm/mmap_min_addr"", ""r"");
-    if (fscanf(f, ""%zu"", &value) != 1) {
+    if (f != nullptr && fscanf(f, ""%zu"", &value) != 1) {
       value = _vm_min_address_default;
     }
     value = MAX2(_vm_min_address_default, value);
'''

Cheers, Thomas
;;;","2023-09-06 09:36;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/15596
Date: 2023-09-06 15:29:30 +0000;;;","2023-09-21 05:45;dukebot;Changeset: 349723cb
Author:    Daniel Jeliński <djelinski@openjdk.org>
Date:      2023-09-21 12:43:53 +0000
URL:       https://git.openjdk.org/jdk/commit/349723cb8dd7a5e496f348dc8689431480ef1083
;;;",,,,,,,,,,,,,,,,,,,,,,,
VerifyError when switch statement used with synchronized block,JDK-8315735,5109603,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,jlahoda,webbuggrp,webbuggrp,2023-09-04 11:39,2023-09-13 22:39,2023-10-01 09:55,2023-09-07 04:12,17,20,21,22,,,,22,tools,,0,dcsad,jdk21u-fix-request,jdk21u-fix-SQE-ok-next,jdk21u-fix-yes,reproducer-yes,webbug,,,,,,,,,,,,,,"A DESCRIPTION OF THE PROBLEM :
Using JDK 20.0.2, a switch expression containing a synchronized block will cause a VerifyError

REGRESSION : Last worked in version 20.0.2

STEPS TO FOLLOW TO REPRODUCE THE PROBLEM :
Here is the code that reproduces the problem:

// an instance field
private final String content;

// a constructor for a Name class that implements javax.lang.model.element.Name (not sure this matters)
public Name(final CharSequence cs) {
  super();
  this.content =  switch (cs) {
  case null -> """";
  case String s -> s;
  case Name n -> n.content;
  case javax.lang.model.element.Name n -> {
    synchronized (CompletionLock.monitor()) {
      yield n.toString();
    }
  }
  default -> cs.toString();
  };
}

EXPECTED VERSUS ACTUAL BEHAVIOR :
EXPECTED -
Successful compilation
ACTUAL -
java.lang.VerifyError: 
Stack map does not match the one at exception handler 104

---------- BEGIN SOURCE ----------
See reproduction steps
---------- END SOURCE ----------

CUSTOMER SUBMITTED WORKAROUND :
Don't use switch expressions

FREQUENCY : always


",,,,,,,,,,,,JDK-8316103,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"2023-09-05 20:31;adev;Name.java;https://bugs.openjdk.org/secure/attachment/105352/Name.java",,,,,,,,generic,,,,,,,,,generic,,,,,"0|i3302z:",9223372036854775807,b15,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4dca67bd,,,,,,,,,"2023-09-05 20:06;adev;I could not reproduce the issue as there is no definition or library provided for the class CompletionLock.

Name.java:14: error: cannot find symbol
    synchronized (CompletionLock.monitor()) {
                  ^
  symbol:   variable CompletionLock
  location: class Name
Note: Name.java uses preview features of Java SE 20.
Note: Recompile with -Xlint:preview for details.


Requested the submitter to provide the definition of CompletionLock.;;;","2023-09-05 20:30;adev;Reply received from the submitter. The reproducer is updated.
When executing the reproducer, following VerifyError is thrown:
PS C:\test> C:\jdk\jdk-20.0.2_windows-x64_bin\jdk-20.0.2\bin\java --enable-preview  Name
Error: Unable to initialize main class Name
Caused by: java.lang.VerifyError: Stack map does not match the one at exception handler 103
Exception Details:
  Location:
    Name.<init>(Ljava/lang/CharSequence;)V @90: aload
  Reason:
    Current frame's stack size doesn't match stackmap.
  Current Frame:
    bci: @90
    flags: { }
    locals: { 'Name', 'java/lang/CharSequence', 'java/lang/CharSequence', integer, top, top, 'javax/lang/model/element/Name', 'java/lang/Class' }
    stack: { 'java/lang/Throwable' }
  Stackmap Frame:
    bci: @103
    flags: { }
    locals: { 'Name', 'java/lang/CharSequence', 'java/lang/CharSequence', integer, top, top, 'javax/lang/model/element/Name', 'java/lang/Object' }
    stack: { 'Name', 'java/lang/Throwable' }
  Bytecode:
    0000000: 2ab7 0001 2a2b 4d03 3e2c 1dba 0007 0000
    0000010: aa00 0000 0000 005f ffff ffff 0000 0002
    0000020: 0000 0020 0000 0025 0000 0030 0000 003e
    0000030: 120b a700 432c c000 0d3a 0419 04a7 0038
    0000040: 2cc0 000f 3a05 1905 b400 11a7 002a 2cc0
    0000050: 0015 3a06 120f 593a 07c2 1906 b900 1701
    0000060: 0019 07c3 a700 113a 0819 07c3 1908 bf2b
    0000070: b900 1b01 00b5 0011 b1
  Exception Handler Table:
    bci [90, 100] => handler: 103
    bci [103, 108] => handler: 103
  Stackmap Table:
    full_frame(@9,{Object[#15],Object[#28],Object[#28],Integer},{Object[#15]})
    same_locals_1_stack_item_frame(@48,Object[#15])
    same_locals_1_stack_item_frame(@53,Object[#15])
    same_locals_1_stack_item_frame(@64,Object[#15])
    same_locals_1_stack_item_frame(@78,Object[#15])
    full_frame(@103,{Object[#15],Object[#28],Object[#28],Integer,Top,Top,Object[#21],Object[#2]},{Object[#15],Object[#34]})
    full_frame(@111,{Object[#15],Object[#28],Object[#28],Integer},{Object[#15]})
    full_frame(@117,{Object[#15],Object[#28]},{Object[#15],Object[#13]});;;","2023-09-06 01:37;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/15584
Date: 2023-09-06 08:29:40 +0000;;;","2023-09-07 04:12;dukebot;Changeset: 726c9c97
Author:    Jan Lahoda <jlahoda@openjdk.org>
Date:      2023-09-07 11:08:55 +0000
URL:       https://git.openjdk.org/jdk/commit/726c9c977dbaab75a2df4a931e3414ccabb7db44
;;;","2023-09-07 04:23;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk21u/pull/140
Date: 2023-09-07 11:14:53 +0000;;;","2023-09-07 06:56;jlahoda;Fix Request:

javac produces invalid classfiles for certain input. While these may be quite uncommon, javac should not produce invalid classfiles for them. The principle of the fix is to active already existing infrastructure for storing stack values to local variables, used for try-catch-finally, so should be fairly safe. javac tests are passing with this patch.;;;",,,,,,,,,,,,,,,,,,,,,
Open source several Swing Text related tests,JDK-8315731,5109686,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,honkar,honkar,honkar,2023-09-05 16:02,2023-09-20 22:21,2023-10-01 09:55,2023-09-14 15:05,17,21,22,,,,,22,client-libs,,0,amazon-interest,noreg-self,sn_152,test_sprint,,,,,,,,,,,,,,,,Open source several Swing Text related tests,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8316385,,,,,,,,,,,,,,,,,,,,,,,,,"0|i330lf:",9223372036854775807,b16,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@568a5b31,,,,,,,,,"2023-09-12 14:39;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/15693
Date: 2023-09-12 21:32:58 +0000;;;","2023-09-14 15:06;dukebot;Changeset: d475f61f
Author:    Harshitha Onkar <honkar@openjdk.org>
Date:      2023-09-14 22:03:03 +0000
URL:       https://git.openjdk.org/jdk/commit/d475f61fd52b7d379260811b32d3815786858411
;;;",,,,,,,,,,,,,,,,,,,,,,,,,
"[testbug] SystemMenuBarTest prints ""FAILED IS: false""",JDK-8315728,5109683,Bug,Resolved,JDK,JDK,software,duke,,,P5,Fixed,lkostyra,kcr,kcr,2023-09-05 15:23,2023-09-15 07:06,2023-10-01 09:55,2023-09-06 05:25,jfx22,,,,,,,jfx22,javafx,,0,sn_152,test_sprint,testbug,,,,,,,,,,,,,,,,,"To reproduce this:

$ gradle --info -PFULL_TEST=true :systemTests:test --tests SystemMenuBarTest

SystemMenuBarTest > testFailingMenuBar STANDARD_ERROR
    FAILED IS: false

In addition to this being redundant (there is no need for a test to print a message when it passes), I frequently scan test build logs for the string ""FAILED"", and now I always hit this message.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i330kr:",9223372036854775807,b08,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4f591050,,,,,,,,,"2023-09-06 02:00;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jfx/pull/1233
Date: 2023-09-06 08:54:51 +0000;;;","2023-09-06 05:25;dukebot;Changeset: 668e4b91
Author:    Lukasz Kostyra <lkostyra@openjdk.org>
Date:      2023-09-06 12:24:39 +0000
URL:       https://git.openjdk.org/jfx/commit/668e4b9195ecbf586d548bf2307fffaec8e79b61
;;;",,,,,,,,,,,,,,,,,,,,,,,,,
Open source several AWT applet tests,JDK-8315726,5109681,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,azvegint,azvegint,azvegint,2023-09-05 14:21,2023-09-20 22:21,2023-10-01 09:55,2023-09-13 15:25,21,22,,,,,,22,client-libs,,0,amazon-interest,noreg-self,sn_152,test_sprint,,,,,,,,,,,,,,,,"Several tests need to be converted to main based and open sourced

java/awt/Choice/ChoiceSelectTest/ChoiceSelectTest.java
java/awt/Component/Displayable.java
java/awt/Focus/WindowsLFFocus/TestWindowsLFFocus.java
java/awt/geom/HitTest/PathHitTest.java",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i330kb:",9223372036854775807,b16,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@5a9b3fd3,,,,,,,,,"2023-09-11 15:25;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/15671
Date: 2023-09-11 22:18:51 +0000;;;","2023-09-13 15:25;dukebot;Changeset: 1741d13b
Author:    Alexander Zvegintsev <azvegint@openjdk.org>
Date:      2023-09-13 22:23:27 +0000
URL:       https://git.openjdk.org/jdk/commit/1741d13b1260253d1e299e8da9c42b5519a7ae48
;;;",,,,,,,,,,,,,,,,,,,,,,,,,
CloseRace.java#id0 fails transiently on libgraal,JDK-8315721,5109674,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,rriggs,dnsimon,dnsimon,2023-09-05 10:55,2023-09-27 18:21,2023-10-01 09:55,2023-09-27 06:32,,,,,,,,22,core-libs,,0,graal-related,Xcomp,,,,,,,,,,,,,,,,,,"The java/lang/ProcessBuilder/CloseRace.java#id0 test fails transiently on libgraal when run with -Xcomp with:

java.lang.Error: At least one child thread (Thread-2) failed to finish gracefully
        at CloseRace.main(CloseRace.java:122)
        at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
        at java.base/java.lang.reflect.Method.invoke(Method.java:580)
        at com.sun.javatest.regtest.agent.MainWrapper$MainTask.run(MainWrapper.java:138)
        at java.base/java.lang.Thread.run(Thread.java:1570)

Possible fixes would include:
* Disable the test under -Xcomp
* Increase the time the main thread waits for other threads to join. For example, it could be adjusted by JTREG_TIMEOUT_FACTOR (which is typically increased when running test with -Xcomp).",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8310055,,,,,,,,,,,,,,,,,,,,,,,,,"0|i330ir:",9223372036854775807,b17,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4c088d55,,,,,,,,,"2023-09-26 07:11;rriggs;Disabling Xcomp is preferred since the test relies on timing.
;;;","2023-09-26 10:11;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/15930
Date: 2023-09-26 17:03:00 +0000;;;","2023-09-27 06:32;dukebot;Changeset: 1be35573
Author:    Roger Riggs <rriggs@openjdk.org>
Date:      2023-09-27 13:30:35 +0000
URL:       https://git.openjdk.org/jdk/commit/1be355734da94243e29f0899b53aa1ebdf3bcb79
;;;",,,,,,,,,,,,,,,,,,,,,,,,
com/sun/tools/attach/warnings/DynamicLoadWarningTest.java real fix for failure on AIX,JDK-8315706,5109659,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,jkern,jkern,jkern,2023-09-05 09:10,2023-09-20 22:22,2023-10-01 09:55,2023-09-18 05:00,22,,,,,,,22,hotspot,,0,,,,,,,,,,,,,,,,,,,,"After push of JDK-8307478 , the following test started to fail on AIX :
com/sun/tools/attach/warnings/DynamicLoadWarningTest.java;
The problem was described in JDK-8309549 with a first try of a fix.
A second fix via JDK-8310191 was necessary.
Both fixes just disable the specific subtest on AIX, without correction of the root cause.
The root cause is, that dlopen() on AIX returns different handles every time, even if you load a library twice. There is no official AIX API available to get this information on a different way.
My proposal is, to use the stat64x API with the fields st_device and st_inode. After a dlopen() the stat64x() API is called additionally to get this information which is then stored parallel to the library handle in the  jvmtiAgent. For AIX we then can compare these values instead of the library handle and get the same functionality as on linux.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,ppc,,,,,,,,,aix,,,,,"0|i330ff:",9223372036854775807,b16,,,,,,,,,,,"2023-09-06 01:24;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/15583
Date: 2023-09-06 08:18:45 +0000;;;","2023-09-18 05:00;dukebot;Changeset: 21c2dac1
Author:    Joachim Kern <jkern@openjdk.org>
Committer: Matthias Baesken <mbaesken@openjdk.org>
Date:      2023-09-18 11:57:48 +0000
URL:       https://git.openjdk.org/jdk/commit/21c2dac15957e6d71e8f32a55f3825671da097a9
;;;",,,,,,,,,,,,,,,,,,,,,,,,,
jcmd Thread.dump_to_file slow with millions of virtual threads,JDK-8315702,5109654,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,alanb,alanb,alanb,2023-09-05 08:23,2023-09-15 12:12,2023-10-01 09:55,2023-09-07 21:42,21,22,,,,,,22,core-svc,,0,amazon-interest,jdk21u-fix-request,jdk21u-fix-SQE-ok-next,jdk21u-fix-yes,loom,noreg-perf,,,,,,,,,,,,,,"HotSpotDiagnosticMXBean.dumpThreads and jcmd Thread.dump_to_file is slow when there are millions of threads.

The performance can be improved significantly if the dump of the thread info and stack trace is done with println instead of format, and the the file stream is wrapped with a buffered stream (the buffered writer used by PrintStream is not sufficient here).",,,,,,,,,,,,JDK-8316379,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i330eb:",9223372036854775807,b15,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@22f3cc74,,,,,,,,,"2023-09-05 08:24;alanb;This was reported here:
https://mail.openjdk.org/pipermail/loom-dev/2023-September/006146.html;;;","2023-09-07 04:39;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/15581
Date: 2023-09-06 07:02:53 +0000;;;","2023-09-07 21:42;dukebot;Changeset: 3c258ac9
Author:    Alan Bateman <alanb@openjdk.org>
Date:      2023-09-08 04:40:01 +0000
URL:       https://git.openjdk.org/jdk/commit/3c258ac907287850d690375bae07c0575d1f1463
;;;","2023-09-15 12:09;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk21u/pull/170
Date: 2023-09-15 19:02:18 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,
Crash when comparing BasicType as int after JDK-8310577,JDK-8315698,5109649,Bug,Resolved,JDK,JDK,software,duke,,,P2,Fixed,djelinski,djelinski,djelinski,2023-09-05 07:20,2023-09-21 05:57,2023-10-01 09:55,2023-09-06 21:54,22,,,,,,,22,hotspot,,0,noreg-hard,regression,,,,,,,,,,,,,,,,,,"Found in Java on Windows-x86 built with Clang in debug mode.

The build crashes during ""Optimizing the exploded image"" step with:

#  EXCEPTION_ACCESS_VIOLATION (0xc0000005) at pc=0x0000000170d395c0, pid=11812, tid=4188
#
# JRE version: OpenJDK Runtime Environment (22.0) (slowdebug build 22-internal-adhoc.djelinsk.open)
# Java VM: OpenJDK 64-Bit Server VM (slowdebug 22-internal-adhoc.djelinsk.open, mixed mode, tiered, compressed oops, compressed class ptrs, g1 gc, windows-amd64)
# Problematic frame:
# j  sun.nio.fs.WindowsNativeDispatcher.initIDs()V+0 java.base

The exact line varies from build to build; the common feature is that the problematic pointer has incorrect value in the top 32 bits.

Reason:
StubRoutines.call_stub is used to Java methods from native code, moving the arguments and result to where the code expects them. Due to a problem with handling the result type, all function return values are treated as 32-bit (T_INT); if the return value is 64 bit, the top 32 bits are replaced with whatever happens to be on the thread stack at the moment.

Details:
The top 32 bits are lost here:
https://github.com/openjdk/jdk/blob/9def4538ab5456d689fd289bdef66fd1655773bc/src/hotspot/cpu/x86/stubGenerator_x86_64.cpp#L331

This is because c_rarg2 contains the result type in the least-significant byte here: https://github.com/openjdk/jdk/blob/9def4538ab5456d689fd289bdef66fd1655773bc/src/hotspot/cpu/x86/stubGenerator_x86_64.cpp#L227

The remaining bytes of c_rarg2 are garbage. We are using the entire garbage value, so the result type is none of T_LONG, T_OBJECT, T_DOUBLE, or T_FLOAT, and the path for 32-bit T_INT is taken, which loses the top 32 bits.

The problem was introduced in JDK-8310577, which changed BasicType to u1. Before that change, c_rarg2 contained the result type in all bytes.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8310577,,,,,,,,,,,x86_64,,,,,,,,,windows,,,,,"0|i330d7:",9223372036854775807,b15,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,,,"2023-09-05 09:17;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/15568
Date: 2023-09-05 15:06:48 +0000;;;","2023-09-05 09:41;shade;Please change the synopsis to something more relevant to the fix :);;;","2023-09-05 11:10;mseledtsov;ILW = HMM = P2;;;","2023-09-05 21:11;djelinski;[~shade] is that any better?;;;","2023-09-06 00:54;shade;Yes, thanks. Mentioning ""... after JDK-8310577"" would be even better, but your call.;;;","2023-09-06 21:54;dukebot;Changeset: ab28300a
Author:    Daniel Jeliński <djelinski@openjdk.org>
Date:      2023-09-07 04:52:18 +0000
URL:       https://git.openjdk.org/jdk/commit/ab28300a42a0dadda76880a51a4b4ac6f39ad794
;;;",,,,,,,,,,,,,,,,,,,,,
SignedLoggerFinderTest.java test failed,JDK-8315696,5109647,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,coffeys,coffeys,coffeys,2023-09-05 07:13,2023-09-28 00:55,2023-10-01 09:55,2023-09-08 07:29,22,,,,,,,22,core-libs,,0,11bpr-critical-watch,intermittent,jdk17u-fix-request,jdk17u-fix-yes,jdk21u-fix-request,jdk21u-fix-SQE-ok-next,jdk21u-fix-yes,tier1,tier5,tier8,,,,,,,,,,"test/jdk/java/lang/System/LoggerFinder/SignedLoggerFinderTest/SignedLoggerFinderTest.java

----------System.err:(114/9284)----------
 stdout: [multi thread load sleep value: 6
Logger finder service load sleep value: 683
TEST LOGGER: [SHA384withRSA, 8a557a9c357bbe37, CN=sample, CN=sample, RSA, 3072, 4208812258, Tue Sep 05 13:29:54 UTC 2023, Mon Dec 04 13:29:54 UTC 2023]
TEST LOGGER: [test_2, test]
System.getLogger type: loggerfinder.SimpleLoggerFinder$SimpleLogger
System.getLoggerFinder type: loggerfinder.SimpleLoggerFinder
];
 stderr: [URLClassPath.getResource(""SignedLoggerFinderTest.class"")
URLClassPath.getResource(""loggerfinder/SimpleLoggerFinder.class"")
URLClassPath.getResource(""loggerfinder/SimpleLoggerFinder$SimpleLogger.class"")
]
 exitValue = 0

java.lang.RuntimeException: Unexpected fail.
	at SignedLoggerFinderTest.launchTest(SignedLoggerFinderTest.java:208)
	at SignedLoggerFinderTest.main(SignedLoggerFinderTest.java:102)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
	at java.base/java.lang.reflect.Method.invoke(Method.java:580)
	at com.sun.javatest.regtest.agent.MainActionHelper$AgentVMRunnable.run(MainActionHelper.java:333)
	at java.base/java.lang.Thread.run(Thread.java:1570)
Caused by: java.lang.RuntimeException: 'TEST LOGGER: [test_1, test]' missing from stdout/stderr
	at jdk.test.lib.process.OutputAnalyzer.shouldContain(OutputAnalyzer.java:221)
	at SignedLoggerFinderTest.launchTest(SignedLoggerFinderTest.java:194)
	... 5 more

JavaTest Message: Test threw exception: java.lang.RuntimeException
JavaTest Message: shutting down test

result: Failed. Execution failed: `main' threw exception: java.lang.RuntimeException: Unexpected fail.


test result: Failed. Execution failed: `main' threw exception: java.lang.RuntimeException: Unexpected fail.",,,,,,,,,,,,JDK-8316826,JDK-8316552,JDK-8316732,JDK-8316535,JDK-8316603,,,,,,,,,,,JDK-8317152,,,,,,,,,JDK-8316593,,JDK-8316593,,,,JDK-8316087,JDK-8314263,,,,,,,,,,,,,,,,,,,,,,,,"0|i330cr:",9223372036854775807,b15,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@3cc899dc,,,,,,,,,"2023-09-06 04:05;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/15571
Date: 2023-09-05 20:06:41 +0000;;;","2023-09-08 07:29;dukebot;Changeset: e409d07a
Author:    Sean Coffey <coffeys@openjdk.org>
Date:      2023-09-08 14:25:58 +0000
URL:       https://git.openjdk.org/jdk/commit/e409d07ae84c693b656c02befb636593f9293635
;;;","2023-09-11 04:28;coffeys;Fix request:
A follow on stabilization test fix for JDK-8314263;;;","2023-09-11 23:10;dholmes;Test is still failing - see JDK-8316087. This issue was integrated in CI run jdk-22+15-1075. New failure is in jdk-22+15-1097-tier4;;;","2023-09-19 09:04;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk21u/pull/174
Date: 2023-09-19 15:56:06 +0000;;;","2023-09-20 05:05;goetz;Fix request [17u]

I backport this for parity with 17.0.10-oracle.
Included in backport of main change, JDK-8314263.;;;","2023-09-20 05:12;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/1756
Date: 2023-09-20 11:01:26 +0000;;;",,,,,,,,,,,,,,,,,,,,
Update jdk21u fix version to 21.0.2,JDK-8315688,5109638,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,robm,robm,robm,2023-09-05 05:10,2023-09-05 06:05,2023-10-01 09:55,2023-09-05 06:04,,,,,,,,21.0.2,infrastructure,,0,,,,,,,,,,,,,,,,,,,, The OpenJDK repo needs to have its jcheck config updated ,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i330ar:",9223372036854775807,team,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@429c566,,,,,,,,,"2023-09-05 05:20;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk21u/pull/137
Date: 2023-09-05 12:14:59 +0000;;;","2023-09-05 06:05;dukebot;Changeset: f07c8f21
Author:    Rob McKenna <robm@openjdk.org>
Date:      2023-09-05 13:01:52 +0000
URL:       https://git.openjdk.org/jdk21u/commit/f07c8f2116ea0cd3e12df779e84b068cca740327
;;;",,,,,,,,,,,,,,,,,,,,,,,,,
Open source few swing JFileChooser and other tests,JDK-8315677,5109626,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,abhiscxk,abhiscxk,abhiscxk,2023-09-05 01:48,2023-09-18 15:31,2023-10-01 09:55,2023-09-13 00:27,21,22,,,,,,22,client-libs,,0,amazon-interest,sn_152,test_sprint,,,,,,,,,,,,,,,,,"Few JFileChooser, JLabel and JOptionpane swing applet tests needs to be converted to main based and open sourced

javax/swing/JFileChooser/4624353/bug4624353.java
javax/swing/JFileChooser/4673161/bug4673161.java
javax/swing/JFileChooser/4782168/bug4782168.java
javax/swing/JLabel/4822331/bug4822331.java
javax/swing/JOptionPane/4191835/bug4191835.java",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i33083:",9223372036854775807,b15,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@568a5b31,,,,,,,,,"2023-09-07 12:05;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/15626
Date: 2023-09-07 18:57:50 +0000;;;","2023-09-13 00:29;dukebot;Changeset: fe5ef5f2
Author:    Abhishek Kumar <abhiscxk@openjdk.org>
Date:      2023-09-13 07:27:18 +0000
URL:       https://git.openjdk.org/jdk/commit/fe5ef5f20dcf647b4ca30963b42fa01449f0d9c0
;;;",,,,,,,,,,,,,,,,,,,,,,,,,
Open source several Swing PopupMenu related tests,JDK-8315669,5109617,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,tr,tr,tr,2023-09-05 00:18,2023-09-25 11:26,2023-10-01 09:55,2023-09-19 06:39,17,21,22,,,,,22,client-libs,,0,amazon-interest,sn_152,test_sprint,,,,,,,,,,,,,,,,,"Open source these Swing PopupMenu related tests: 

javax/swing/JPopupMenu/4236750/bug4236750.java 
javax/swing/JPopupMenu/4321273/bug4321273.java
javax/swing/JPopupMenu/4711693/bug4711693.java
javax/swing/JPopupMenu/4962731/bug4962731.java
javax/swing/JPopupMenu/4966109/bug4966109.java
javax/swing/JPopupMenu/5091257/bug5091257.java",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,generic,,,,,,,,,generic,,,,,"0|i33063:",9223372036854775807,b16,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@568a5b31,,,,,,,,,"2023-09-13 02:25;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/15704
Date: 2023-09-13 09:19:27 +0000;;;","2023-09-19 06:39;dukebot;Changeset: 7c5f2a2d
Author:    Tejesh R <tr@openjdk.org>
Date:      2023-09-19 13:36:16 +0000
URL:       https://git.openjdk.org/jdk/commit/7c5f2a2db941d30a5425d358607a6b4e63879ab7
;;;",,,,,,,,,,,,,,,,,,,,,,,,,
Open source misc awt tests,JDK-8315663,5109609,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,psadhukhan,psadhukhan,psadhukhan,2023-09-04 21:05,2023-09-18 15:31,2023-10-01 09:55,2023-09-12 22:27,17,21,22,,,,,22,client-libs,,0,amazon-interest,sn_152,test_sprint,,,,,,,,,,,,,,,,,"Some awt tests needs to be converted to main and open sourced

sun/awt/windows/Palettes/PaletteTester.java
sun/awt/windows/Palettes/ScreenPalette.java
java/awt/Icon/SetIconImageExceptionTest/SetIconImageExceptionTest.java",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i3304b:",9223372036854775807,b15,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@5a9b3fd3,,,,,,,,,"2023-09-08 04:36;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/15634
Date: 2023-09-08 11:29:36 +0000;;;","2023-09-12 22:27;dukebot;Changeset: a36f5a54
Author:    Prasanta Sadhukhan <psadhukhan@openjdk.org>
Date:      2023-09-13 05:25:25 +0000
URL:       https://git.openjdk.org/jdk/commit/a36f5a54ab4871739f2ccbabb684942fc3cadf20
;;;",,,,,,,,,,,,,,,,,,,,,,,,,
Application window not activated in macOS 14 Sonoma,JDK-8315657,5109336,Bug,Resolved,JDK,JDK,software,duke,,,P2,Fixed,kcr,webbuggrp,webbuggrp,2023-08-30 14:05,2023-09-30 05:54,2023-10-01 09:55,2023-09-26 05:05,8,jfx11,jfx20,,,,,jfx22,javafx,,1,dcspn,jfx21u-fix-request,jfx21u-fix-yes,macos,macos14,reproducer-yes,sn_153,sup-nrt,webbug,,,,,,,,,,,"ADDITIONAL SYSTEM INFORMATION :
os_x: 14.0 Beta
java: openjdk 20.0.2 2023-07-18
javafx: javafx-sdk-20.0.2

A DESCRIPTION OF THE PROBLEM :
Using a minimal JavaFX application (used from bug JDK-8283590) and starting it from the command line or eclipse shows the JavaFX window in the background. It needs two clicks into the window to bring the application to front.
This behavior is also described JDK-8283590, but it's not related to the ""Secure Keyboard Entry"" (which is turned off in the terminal and not available from eclipse).
Because this is not related to the ""Secure Keyboard Entry"" flag, this may be an new problem with ox_x 14.


STEPS TO FOLLOW TO REPRODUCE THE PROBLEM :
Use minimal JavaFX from JDK-8283590 and run it.


EXPECTED VERSUS ACTUAL BEHAVIOR :
EXPECTED -
Application window is in front.
ACTUAL -
Application window is not in front and needs two clicks to get activated

---------- BEGIN SOURCE ----------
import javafx.application.Application;
import javafx.scene.Scene;
import javafx.scene.layout.Pane;
import javafx.stage.Stage;
public class App extends Application {
    public static void main(String[] args) {
        launch(args);
    }

    @Override
    public void start(Stage stage) throws Exception {
        Scene scene = new Scene(new Pane());
        stage.setTitle(""App"");
        stage.setScene(scene);
        stage.setWidth(100);
        stage.setHeight(100);
        stage.setX(0);
        stage.setY(0);
        stage.show();
    }
}


---------- END SOURCE ----------

CUSTOMER SUBMITTED WORKAROUND :
None known

FREQUENCY : always


",,,,,,,,,,,,JDK-8317044,JDK-8316988,JDK-8316986,JDK-8317014,JDK-8316987,JDK-8316989,,,,,,,,,,,,,,,,,,,JDK-8315807,,,,,,JDK-8233678,JDK-8283590,,,,,,,,,,generic,,,,,,,,,os_x,,,,,"0|i32yfn:",9223372036854775807,b11,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4f591050,,,,,,,,,"2023-09-04 12:02;pnarayanaswa;Relates to JDK-8283590;;;","2023-09-05 05:03;kcr;We need to evaluate this to see whether it always happens with macOS 14, or whether it happens only when some set of conditions are present.
;;;","2023-09-21 05:20;kcr;I can reproduce this on a macOS 14 beta system using the default settings. This is a fairly serious problem, since it means that every JavaFX application will experience a 5 second delay in startup followed by a warning message.
;;;","2023-09-21 12:08;kcr;The fix for JDK-8233678 added a step to the NSApplication initialization to deactivate and then reactivate the application. We trigger the deactivation the first time applicationDidBecomeActive is called. We then trigger the reactivation the when applicationDidResignActive is called after that. The initialization logic in MacApplication spins up a nested event loop that waits for the reactivation (a second call to applicationDidBecomeActive).

Something in macOS 14 has changed that prevents the initial call to applicationDidBecomeActive from being done until the application has finished launching (notifyDidFinishLaunching).

So the activation of the NSApplication is waiting for the launching to be finished, but the nested event loop we spin up is blocking the completion of launching until we get the activation. This is a classic deadlock.

The good news, though, is the deactivation / reactivation of the application no longer seems to be needed on macOS 14. The menus work fine without that fix.

So the likely solution will be to check the version of macOS and only enable the deactivation / reactivation logic on systems prior to macOS 14. This will have the additional benefit of avoiding the brief flash when the app is first launched (see JDK-8257835).;;;","2023-09-21 12:14;kcr;Draft PR: https://github.com/openjdk/jfx/pull/1247;;;","2023-09-22 07:22;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jfx/pull/1247
Date: 2023-09-21 19:10:38 +0000;;;","2023-09-26 05:05;dukebot;Changeset: f2dd4bdb
Author:    Kevin Rushforth <kcr@openjdk.org>
Date:      2023-09-26 12:04:32 +0000
URL:       https://git.openjdk.org/jfx/commit/f2dd4bdb7b7d2877fb8aa805737c5d9bd89f9cef
;;;","2023-09-26 05:09;kcr;jfx21u fix request:
This fixes an important bug on macOS 14 that affects application startup of all applications. The jfx21u backport will be targeted to JavaFX 21.0.2 (the January 2024 CPU release).
;;;","2023-09-26 05:10;kcr;jfx21u fix approved for 21.0.2;;;","2023-09-26 10:16;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jfx21u/pull/18
Date: 2023-09-26 17:08:31 +0000;;;","2023-09-26 12:16;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jfx17u/pull/164
Date: 2023-09-26 19:11:22 +0000;;;","2023-09-27 05:04;kcr;After discussing with [~jvos], I am planning to pull this fix into JavaFX 21.0.1, even though we are past the cutoff for 21.0.1.

This is a safe fix, and given the impact of this bug, and the fact that macOS 14 GA was just released on September 26 (yesterday), we both feel that this is the best tradeoff.;;;",,,,,,,,,,,,,,,
RISC-V: Features string uses wrong separator for jtreg,JDK-8315652,5109600,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,rehn,rehn,rehn,2023-09-04 08:56,2023-09-18 15:31,2023-10-01 09:55,2023-09-12 22:02,22,,,,,,,22,hotspot,,0,,,,,,,,,,,,,,,,,,,,"The other platforms use space or comma space.

The WB class CPUInfo.java gives you the features in a List<String> which is not working (as in one features per list item) on RV.

The jtreg requires annotation allows you regexp the string of that list to determine if required feature is on current CPU.
Without separator it is not easy to match e.g. vector.

If we use plain space.
""rv64 i g c v zicbop z...""
For the requires annotation that means the string we are regexping looks like:
[rv64, i, m, a, f, d, c, v, zicbom, zicboz, zicbop, zba, zbb, zbs, zicsr, zifencei, zic64b, zihintpause]

We can then use required tag, such as:
 * @requires vm.cpu.features ~= "".* v,.*""
which should only match vector.

But that would mean CPU info/desc looks 'funny' for RV folks:
""CPU: total 16 (initial active 16) rv64 i m a f d c v zicbom zicboz zicbop zba zbb zbs zicsr zifencei zic64b zihintpause""
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,riscv,,,,,,,,,,,,,,"0|i3302b:",9223372036854775807,b15,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,,,"2023-09-05 12:03;rehn;Thank you @dcubed! (for some reason the @user doesn't seem to work for me with changed email login);;;","2023-09-05 23:20;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/15579
Date: 2023-09-06 06:14:07 +0000;;;","2023-09-12 22:02;dukebot;Changeset: cbbfa0dd
Author:    Robbin Ehn <rehn@openjdk.org>
Date:      2023-09-13 04:59:19 +0000
URL:       https://git.openjdk.org/jdk/commit/cbbfa0ddfb1485edfc6275dd7085b3096f7eccf6
;;;",,,,,,,,,,,,,,,,,,,,,,,,
increase timeout of sun/security/tools/jarsigner/Warning.java,JDK-8315644,5109593,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,mbaesken,mbaesken,mbaesken,2023-09-04 06:02,2023-09-20 07:23,2023-10-01 09:55,2023-09-05 00:09,17,21,22,,,,,22,tools,,0,jdk21u-fix-request,jdk21u-fix-SQE-ok-next,jdk21u-fix-yes,,,,,,,,,,,,,,,,,"on some slow machines,  sun/security/tools/jarsigner/Warning.java runs  sometimes into timeouts (with fastdebug binaries).
So the current timeout of the test should be increased.",,,,,,,,,,,,JDK-8316601,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,generic,,,,,,,,,linux,,,,,"0|i3300r:",9223372036854775807,b14,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@189ffaae,,,,,,,,,"2023-09-04 06:14;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/15560
Date: 2023-09-04 13:09:08 +0000;;;","2023-09-05 00:08;dukebot;Changeset: 8bbebbba
Author:    Matthias Baesken <mbaesken@openjdk.org>
Date:      2023-09-05 07:06:37 +0000
URL:       https://git.openjdk.org/jdk/commit/8bbebbba8fb870987295cb5f96147a9f9c5bfa6c
;;;","2023-09-05 02:13;mbaesken;jdk21u backport request
I would like to have the change in jdk21u as well, because the issue is present there too. The backport is clean and low risk.;;;","2023-09-05 02:14;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk21u/pull/136
Date: 2023-09-05 09:07:30 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,
JDK-8314249 broke libgraal,JDK-8315637,5109585,Bug,Resolved,JDK,JDK,software,duke,,,P2,Fixed,iklam,dnsimon,dnsimon,2023-09-04 03:10,2023-09-15 05:50,2023-10-01 09:55,2023-09-07 11:33,22,,,,,,,22,hotspot,,0,jvmci,libgraal,oracle-triage-17,oracle-triage-22,regression,,,,,,,,,,,,,,,"After JDK-8314249, the following error occurs when building libgraal:

Caused by: java.lang.InternalError: java.lang.IllegalArgumentException: unexpected opcode 186
        at jdk.internal.vm.compiler/org.graalvm.compiler.serviceprovider.GraalServices.lookupMethodWithCaller(GraalServices.java:464)
        at jdk.internal.vm.compiler/org.graalvm.compiler.java.BytecodeParser.lookupMethodInPool(BytecodeParser.java:4274)
        at org.graalvm.nativeimage.builder/com.oracle.svm.hosted.phases.SharedGraphBuilderPhase$SharedBytecodeParser.lookupMethodInPool(SharedGraphBuilderPhase.java:209)
        at jdk.internal.vm.compiler/org.graalvm.compiler.java.BytecodeParser.lookupMethod(BytecodeParser.java:4266)
        at jdk.internal.vm.compiler/org.graalvm.compiler.java.BytecodeParser.genInvokeDynamic(BytecodeParser.java:1725)
        at jdk.internal.vm.compiler/org.graalvm.compiler.java.BytecodeParser.processBytecode(BytecodeParser.java:5363)
        at jdk.internal.vm.compiler/org.graalvm.compiler.java.BytecodeParser.iterateBytecodesForBlock(BytecodeParser.java:3431)
        ... 116 more
Caused by: java.lang.IllegalArgumentException: unexpected opcode 186
        at jdk.internal.vm.ci/jdk.vm.ci.hotspot.HotSpotConstantPool.rawIndexToConstantPoolCacheIndex(HotSpotConstantPool.java:275)
        at jdk.internal.vm.ci/jdk.vm.ci.hotspot.HotSpotConstantPool.lookupMethod(HotSpotConstantPool.java:722)
        at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
        at java.base/java.lang.reflect.Method.invoke(Method.java:580)
        at jdk.internal.vm.compiler/org.graalvm.compiler.serviceprovider.GraalServices.lookupMethodWithCaller(GraalServices.java:457)
        ... 122 more
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8314249,,,"2023-09-04 03:11;dnsimon;JDK-8315637.patch;https://bugs.openjdk.org/secure/attachment/105337/JDK-8315637.patch",,,,,,,,,,,,,,,,,,,,,,"0|i32zyz:",9223372036854775807,b15,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2023-09-04 03:11;dnsimon;The attached patch fixes the libgraal build.
;;;","2023-09-04 03:41;thartmann;ILW = Libraal build fails due to unexpected opcode (regression), when building libgraal, no workaround = HLH = P2;;;","2023-09-05 20:16;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/15575
Date: 2023-09-05 23:20:17 +0000;;;","2023-09-07 11:33;dukebot;Changeset: 0c865a75
Author:    Ioi Lam <iklam@openjdk.org>
Date:      2023-09-07 18:30:09 +0000
URL:       https://git.openjdk.org/jdk/commit/0c865a75e658617d40dfa9eb8cf44ccdcea928d9
;;;",,,,,,,,,,,,,,,,,,,,,,,
Open source swing text/html and tree test,JDK-8315611,5109558,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,psadhukhan,psadhukhan,psadhukhan,2023-09-04 02:16,2023-09-18 15:22,2023-10-01 09:55,2023-09-11 06:23,,,,,,,,22,client-libs,,0,sn_152,test_sprint,,,,,,,,,,,,,,,,,,"Few tree swing applet tests needs to be converted to main based and open sourced

 javax/swing/text/html/TableView/4813831/bug4813831.java
javax/swing/tree/DefaultTreeCellEditor/4480602/bug4480602.java
javax/swing/tree/DefaultTreeCellRenderer/4180224/bug4180224.java
javax/swing/tree/FixedHeightLayoutCache/4745001/bug4745001.java",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i32zsz:",9223372036854775807,b15,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@568a5b31,,,,,,,,,"2023-09-06 21:53;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/15608
Date: 2023-09-07 04:45:47 +0000;;;","2023-09-11 06:26;dukebot;Changeset: ae08143d
Author:    Prasanta Sadhukhan <psadhukhan@openjdk.org>
Date:      2023-09-11 13:23:47 +0000
URL:       https://git.openjdk.org/jdk/commit/ae08143d3dd3aa559447623389a5b23c5d32398a
;;;",,,,,,,,,,,,,,,,,,,,,,,,,
Open source few more swing text/html tests,JDK-8315609,5109557,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,psadhukhan,psadhukhan,psadhukhan,2023-09-04 01:54,2023-09-13 22:32,2023-10-01 09:55,2023-09-11 00:08,,,,,,,,22,client-libs,,0,sn_152,test_sprint,,,,,,,,,,,,,,,,,,"Few text/html swing applet tests needs to be converted to main based and open sourced

javax/swing/text/html/Map/4322891/bug4322891.java
javax/swing/text/html/StyleSheet/4476002/bug4476002.java
javax/swing/text/html/TableView/4412522/bug4412522.java
javax/swing/text/html/TableView/4690812/bug4690812.java",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i32zsr:",9223372036854775807,b15,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@568a5b31,,,,,,,,,"2023-09-06 21:28;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/15607
Date: 2023-09-07 04:22:59 +0000;;;","2023-09-11 00:08;dukebot;Changeset: a04c6c1a
Author:    Prasanta Sadhukhan <psadhukhan@openjdk.org>
Date:      2023-09-11 07:06:41 +0000
URL:       https://git.openjdk.org/jdk/commit/a04c6c1ac663a1eab7d45913940cb6ac0af2c11c
;;;",,,,,,,,,,,,,,,,,,,,,,,,,
Open source few swing text/html tests,JDK-8315606,5109554,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,psadhukhan,psadhukhan,psadhukhan,2023-09-04 01:29,2023-09-28 10:06,2023-10-01 09:55,2023-09-06 20:43,11,17,21,22,,,,22,client-libs,,0,amazon-interest,jdk21u-fix-request,jdk21u-fix-yes,noreg-self,sn_152,test_sprint,,,,,,,,,,,,,,"Few text/html swing applet tests needs to be converted to main based and open sourced

javax/swing/text/html/HTMLEditorKit/4357975/bug4357975.java
javax/swing/text/html/HTMLWriter/4841760/bug4841760.java
javax/swing/text/html/ImageView/4329185/bug4329185.java
javax/swing/text/html/InlineView/4623342/bug4623342.java",,,,,,,,,,,,JDK-8316965,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i32zs3:",9223372036854775807,b15,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@568a5b31,,,,,,,,,"2023-09-05 23:43;psadhukhan;https://mach5.us.oracle.com/mdash/jobs/prsadhuk-jdk-20230906-0553-51024690

https://mach5.us.oracle.com/mdash/jobs/prsadhuk-jdk-20230906-0636-51026200;;;","2023-09-05 23:52;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/15580
Date: 2023-09-06 06:46:49 +0000;;;","2023-09-06 20:43;dukebot;Changeset: 4127fbb9
Author:    Prasanta Sadhukhan <psadhukhan@openjdk.org>
Date:      2023-09-07 03:41:24 +0000
URL:       https://git.openjdk.org/jdk/commit/4127fbb9ed6ca3c3e82da599dbf9cee54de5da31
;;;","2023-09-27 08:20;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk21u/pull/208
Date: 2023-09-27 15:09:37 +0000;;;","2023-09-27 08:23;roboduke;[jdk21u-fix-request] Approval Request from Manukumar V S
Backporting the bug to jdk21u;;;",,,,,,,,,,,,,,,,,,,,,,
Open source swing security manager test,JDK-8315602,5109548,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,psadhukhan,psadhukhan,psadhukhan,2023-09-04 00:06,2023-09-13 22:32,2023-10-01 09:55,2023-09-07 03:17,,,,,,,,22,client-libs,,0,sn_152,test_sprint,,,,,,,,,,,,,,,,,,"Swing applet test using Security Manager needs to be converted to main based and open sourced

javax/swing/text/rtf/4178276/bug4178276.java
javax/swing/text/rtf/RTFEditorKit/4178276/bug4178276.java",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i32zqr:",9223372036854775807,b15,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@568a5b31,,,,,,,,,"2023-09-06 08:48;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/15597
Date: 2023-09-06 15:39:16 +0000;;;","2023-09-07 03:19;dukebot;Changeset: fd6442c0
Author:    Prasanta Sadhukhan <psadhukhan@openjdk.org>
Date:      2023-09-07 10:16:06 +0000
URL:       https://git.openjdk.org/jdk/commit/fd6442c079748dcaff3bb565dc35b108b68a61bd
;;;",,,,,,,,,,,,,,,,,,,,,,,,,
Open source few more headless Swing misc tests,JDK-8315600,5109546,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,psadhukhan,psadhukhan,psadhukhan,2023-09-03 23:54,2023-09-13 22:32,2023-10-01 09:55,2023-09-06 20:50,11,17,21,22,,,,22,client-libs,,0,amazon-interest,sn_152,test_sprint,,,,,,,,,,,,,,,,,"Few more headless swing applet tests need to be converted to main based and open sourced

javax/swing/undo/UndoManager/4706533/bug4706533.java
javax/swing/undo/4992178/bug4992178.java
javax/swing/tree/FixedHeightLayoutCache/4210354/bug4210354",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i32zqb:",9223372036854775807,b15,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@568a5b31,,,,,,,,,"2023-09-06 00:18;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/15582
Date: 2023-09-06 07:12:55 +0000;;;","2023-09-06 20:50;dukebot;Changeset: b05198a4
Author:    Prasanta Sadhukhan <psadhukhan@openjdk.org>
Date:      2023-09-07 03:49:42 +0000
URL:       https://git.openjdk.org/jdk/commit/b05198a4f354934bc344fe9cbc19d98fd8bc3977
;;;",,,,,,,,,,,,,,,,,,,,,,,,,
Open source few headless Swing misc tests,JDK-8315594,5109543,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,psadhukhan,psadhukhan,psadhukhan,2023-09-03 23:36,2023-09-13 22:32,2023-10-01 09:55,2023-09-07 20:45,11,17,21,22,,,,22,client-libs,,0,amazon-interest,sn_152,test_sprint,,,,,,,,,,,,,,,,,"Few headless swing applet tests need to be converted and opensourced

javax/swing/text/html/HTMLEditorKit/4267840/bug4267840.java
javax/swing/text/html/StyleSheet/4218254/bug4218254.java
javax/swing/text/html/StyleSheet/4243463/bug4243463.
javax/swing/tree/DefaultTreeSelectionModel/4485322/bug4485322.java",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i32zpn:",9223372036854775807,b15,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@568a5b31,,,,,,,,,"2023-09-05 23:14;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/15577
Date: 2023-09-06 06:05:59 +0000;;;","2023-09-07 20:45;dukebot;Changeset: 806ef089
Author:    Prasanta Sadhukhan <psadhukhan@openjdk.org>
Date:      2023-09-08 03:44:15 +0000
URL:       https://git.openjdk.org/jdk/commit/806ef0897b42c8f3cb3b4d7bd904af9ed18a543e
;;;",,,,,,,,,,,,,,,,,,,,,,,,,
SPARC64 builds are broken after JDK-8304913,JDK-8315579,5109529,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,shade,shade,shade,2023-09-03 09:54,2023-09-21 05:15,2023-10-01 09:55,2023-09-06 01:28,21,22,,,,,,22,tools,,0,jdk21u-fix-request,jdk21u-fix-SQE-ok-next,jdk21u-fix-yes,,,,,,,,,,,,,,,,,"This is Linux SPARC64 Zero build:

```
Error: unknown target platform linux-sparcv9
java.io.IOException: unknown target platform linux-sparcv9
	at jdk.jlink/jdk.tools.jlink.internal.JlinkTask.targetPlatform(JlinkTask.java:647)
	at jdk.jlink/jdk.tools.jlink.internal.JlinkTask.createImageProvider(JlinkTask.java:569)
	at jdk.jlink/jdk.tools.jlink.internal.JlinkTask.createImage(JlinkTask.java:410)
	at jdk.jlink/jdk.tools.jlink.internal.JlinkTask.run(JlinkTask.java:285)
	at jdk.jlink/jdk.tools.jlink.internal.Main.run(Main.java:56)
	at jdk.jlink/jdk.tools.jlink.internal.Main.main(Main.java:34)

```",,,,,,,,,,,,JDK-8316664,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8304913,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i32zmj:",9223372036854775807,b14,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@3da653bd,,,,,,,,,"2023-09-04 00:33;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/15557
Date: 2023-09-04 07:28:03 +0000;;;","2023-09-06 01:28;dukebot;Changeset: cfc14893
Author:    Aleksey Shipilev <shade@openjdk.org>
Date:      2023-09-06 08:27:11 +0000
URL:       https://git.openjdk.org/jdk/commit/cfc148930b6ace3e3ee298d7ac82aefbc652d447
;;;","2023-09-13 08:04;roboduke;[jdk21u-fix-request] Approval Request from Aleksey Shipilëv
;;;","2023-09-13 08:05;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk21u/pull/158
Date: 2023-09-13 14:53:26 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,
PPC builds are broken after JDK-8304913,JDK-8315578,5109528,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,shade,shade,shade,2023-09-03 09:45,2023-09-22 08:22,2023-10-01 09:55,2023-09-08 08:14,21,22,,,,,,22,tools,,0,jdk21u-fix-request,jdk21u-fix-SQE-ok-next,jdk21u-fix-yes,,,,,,,,,,,,,,,,,"This is 32-bit Zero PPC build, not PPC64 that is already handled.

```
=== Output from failing command(s) repeated here ===
* For target support_images_jdk__jlink_jdk_exec:
Error: unknown target platform linux-ppc
java.io.IOException: unknown target platform linux-ppc
	at jdk.jlink/jdk.tools.jlink.internal.JlinkTask.targetPlatform(JlinkTask.java:647)
	at jdk.jlink/jdk.tools.jlink.internal.JlinkTask.createImageProvider(JlinkTask.java:569)
	at jdk.jlink/jdk.tools.jlink.internal.JlinkTask.createImage(JlinkTask.java:410)
	at jdk.jlink/jdk.tools.jlink.internal.JlinkTask.run(JlinkTask.java:285)
	at jdk.jlink/jdk.tools.jlink.internal.Main.run(Main.java:56)
	at jdk.jlink/jdk.tools.jlink.internal.Main.main(Main.java:34)
```",,,,,,,,,,,,JDK-8316747,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8304913,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i32zmb:",9223372036854775807,b15,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@3da653bd,,,,,,,,,"2023-09-04 00:32;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/15556
Date: 2023-09-04 07:26:37 +0000;;;","2023-09-08 08:14;dukebot;Changeset: 9559e035
Author:    Aleksey Shipilev <shade@openjdk.org>
Date:      2023-09-08 15:11:17 +0000
URL:       https://git.openjdk.org/jdk/commit/9559e035d2692d9d61bec2a13b5239a98db077ac
;;;","2023-09-21 05:28;roboduke;[jdk21u-fix-request] Approval Request from Aleksey Shipilëv
""Another clean backport to unbreak JDK 21 build on another architecture"";;;","2023-09-21 05:32;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk21u/pull/186
Date: 2023-09-21 12:23:26 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,
compiler/codecache/CodeCacheFullCountTest.java fails after JDK-8314837,JDK-8315576,5109525,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,yftsai,dcubed,dcubed,2023-09-02 19:12,2023-09-27 18:19,2023-10-01 09:55,2023-09-22 00:58,21,22,,,,,,22,hotspot,,0,amazon-interest,noreg-self,oracle-triage-22,regression,tier6,tier7,tier8,,,,,,,,,,,,,"The following test failed in the JDK22 CI:

compiler/codecache/CodeCacheFullCountTest.java

Here's a snippet from the windows-x64 log file:

#section:main
----------messages:(7/255)----------
command: main CodeCacheFullCountTest
reason: Assumed action based on file name: run main CodeCacheFullCountTest 
started: Sat Sep 02 18:59:29 UTC 2023
Mode: agentvm
Agent id: 11
finished: Sat Sep 02 19:00:43 UTC 2023
elapsed time (seconds): 73.269
----------configuration:(14/1427)*----------

<snip>

----------System.out:(11/2484)*----------
Command line: [c:\\ade\\mesos\\work_dir\\jib-master\\install\\jdk-22+14-988\\windows-x64-debug.jdk\\jdk-22\\fastdebug\\bin\\java.exe -cp C:\\sb\\prod\\1693681073\\testoutput\\test-support\\jtreg_open_test_hotspot_jtreg_tier1_compiler_2\\classes\\1\\compiler\\codecache\\CodeCacheFullCountTest.d;C:\\ade\\mesos\\work_dir\\jib-master\\install\\jdk-22+14-988\\src.full\\open\\test\\hotspot\\jtreg\\compiler\\codecache;C:\\sb\\prod\\1693681073\\testoutput\\test-support\\jtreg_open_test_hotspot_jtreg_tier1_compiler_2\\classes\\1\\test\\lib;C:\\ade\\mesos\\work_dir\\jib-master\\install\\jtreg\\7.3.1\\1\\bundles\\jtreg-7.3.1+1.zip\\jtreg\\lib\\jtreg.jar;C:\\ade\\mesos\\work_dir\\jib-master\\install\\jtreg\\7.3.1\\1\\bundles\\jtreg-7.3.1+1.zip\\jtreg\\lib\\junit-platform-console-standalone-1.9.2.jar;C:\\ade\\mesos\\work_dir\\jib-master\\install\\jtreg\\7.3.1\\1\\bundles\\jtreg-7.3.1+1.zip\\jtreg\\lib\\testng-7.3.0.jar;C:\\ade\\mesos\\work_dir\\jib-master\\install\\jtreg\\7.3.1\\1\\bundles\\jtreg-7.3.1+1.zip\\jtreg\\lib\\jcommander-1.82.jar;C:\\ade\\mesos\\work_dir\\jib-master\\install\\jtreg\\7.3.1\\1\\bundles\\jtreg-7.3.1+1.zip\\jtreg\\lib\\guice-5.1.0.jar -XX:MaxRAMPercentage=4.16667 -Dtest.boot.jdk=c:\\ade\\mesos\\work_dir\\jib-master\\install\\jdk\\20\\36\\bundles\\windows-x64\\jdk-20_windows-x64_bin.zip\\jdk-20 -Djava.io.tmpdir=c:\\sb\\prod\\1693681073\\testoutput\\test-support\\jtreg_open_test_hotspot_jtreg_tier1_compiler_2\\tmp -XX:+CreateCoredumpOnCrash -Xcomp -ea -esa -XX:CompileThreshold=100 -XX:+UnlockExperimentalVMOptions -server -XX:-TieredCompilation -XX:ReservedCodeCacheSize=2496k -XX:-UseCodeCacheFlushing -XX:-MethodFlushing CodeCacheFullCountTest WasteCodeCache ]
[2023-09-02T19:00:38.965600Z] Gathering output for process 36248
[2023-09-02T19:00:41.809922700Z] Waiting for completion for process 36248
[2023-09-02T19:00:41.825559200Z] Waiting for completion finished for process 36248
Output and diagnostic info for process 36248 was saved into 'pid-36248-output.log'
[2023-09-02T19:00:42.294304500Z] Waiting for completion for process 36248
[2023-09-02T19:00:42.294304500Z] Waiting for completion finished for process 36248
[2023-09-02T19:00:42.294304500Z] Waiting for completion for process 36248
[2023-09-02T19:00:42.294304500Z] Waiting for completion finished for process 36248
[2023-09-02T19:00:42.559920400Z] Waiting for completion for process 36248
[2023-09-02T19:00:42.559920400Z] Waiting for completion finished for process 36248
----------System.err:(48/3371)----------
 stdout: [[3.310s][warning][codecache] CodeCache is full. Compiler has been disabled.
[3.310s][warning][codecache] Try increasing the code cache size using -XX:ReservedCodeCacheSize=
CodeCache: size=2496Kb used=2485Kb max_used=2492Kb free=10Kb
 bounds [0x0000029879550000, 0x00000298797c0000, 0x00000298797c0000]
 total_blobs=1085 nmethods=414 adapters=619
 compilation: disabled (not enough contiguous free space left)
              stopped_count=0, restarted_count=0
 full_count=1
Error occurred during initialization of VM
java.lang.InternalError: java.lang.VirtualMachineError: Out of space in CodeCache for adapters
	at jdk.internal.reflect.MethodHandleIntegerFieldAccessorImpl.getInt(java.base/MethodHandleIntegerFieldAccessorImpl.java:86)
	at java.lang.reflect.Field.getInt(java.base/Field.java:628)
	at java.lang.invoke.MethodHandleNatives.verifyConstants(java.base/MethodHandleNatives.java:226)
	at java.lang.invoke.MethodHandleNatives.<clinit>(java.base/MethodHandleNatives.java:245)
Caused by: java.lang.VirtualMachineError: Out of space in CodeCache for adapters
	at jdk.internal.org.objectweb.asm.ClassWriter.visitMethod(java.base/ClassWriter.java:500)
	at java.lang.invoke.InvokerBytecodeGenerator.methodPrologue(java.base/InvokerBytecodeGenerator.java:280)
	at java.lang.invoke.InvokerBytecodeGenerator.addMethod(java.base/InvokerBytecodeGenerator.java:766)
	at java.lang.invoke.InvokerBytecodeGenerator.generateCustomizedCodeBytes(java.base/InvokerBytecodeGenerator.java:754)
	at java.lang.invoke.InvokerBytecodeGenerator.generateCustomizedCode(java.base/InvokerBytecodeGenerator.java:712)
	at java.lang.invoke.LambdaForm.compileToBytecode(java.base/LambdaForm.java:849)
	at java.lang.invoke.Invokers.invokeHandleForm(java.base/Invokers.java:358)
	at java.lang.invoke.Invokers.methodHandleInvokeLinkerMethod(java.base/Invokers.java:263)
	at java.lang.invoke.MethodHandleNatives.linkMethodImpl(java.base/MethodHandleNatives.java:494)
	at java.lang.invoke.MethodHandleNatives.linkMethod(java.base/MethodHandleNatives.java:485)
	at jdk.internal.reflect.MethodHandleIntegerFieldAccessorImpl.getInt(java.base/MethodHandleIntegerFieldAccessorImpl.java:77)
	at java.lang.reflect.Field.getInt(java.base/Field.java:628)
	at java.lang.invoke.MethodHandleNatives.verifyConstants(java.base/MethodHandleNatives.java:226)
	at java.lang.invoke.MethodHandleNatives.<clinit>(java.base/MethodHandleNatives.java:245)

];
 stderr: [Java HotSpot(TM) 64-Bit Server VM warning: CodeCache is full. Compiler has been disabled.
Java HotSpot(TM) 64-Bit Server VM warning: Try increasing the code cache size using -XX:ReservedCodeCacheSize=
Java HotSpot(TM) 64-Bit Server VM warning: C2 initialization failed. Shutting down all compilers
]
 exitValue = 1

java.lang.RuntimeException: VM finished with exit code 1
	at CodeCacheFullCountTest.runTest(CodeCacheFullCountTest.java:64)
	at CodeCacheFullCountTest.main(CodeCacheFullCountTest.java:44)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
	at java.base/java.lang.reflect.Method.invoke(Method.java:580)
	at com.sun.javatest.regtest.agent.MainActionHelper$AgentVMRunnable.run(MainActionHelper.java:333)
	at java.base/java.lang.Thread.run(Thread.java:1570)

JavaTest Message: Test threw exception: java.lang.RuntimeException
JavaTest Message: shutting down test

result: Failed. Execution failed: `main' threw exception: java.lang.RuntimeException: VM finished with exit code 1

The test task's JVM args are:
-Xcomp -ea -esa -XX:CompileThreshold=100 -XX:+UnlockExperimentalVMOptions -server -XX:-TieredCompilation


Here's a snippet from the linux-x64 log file:

#section:main
----------messages:(7/248)----------
command: main CodeCacheFullCountTest
reason: Assumed action based on file name: run main CodeCacheFullCountTest 
started: Sat Sep 02 17:47:55 UTC 2023
Mode: agentvm
Agent id: 10
finished: Sat Sep 02 17:48:27 UTC 2023
elapsed time (seconds): 31.748
----------configuration:(14/1918)----------

<snip>

----------System.out:(11/2939)----------
Command line: [/opt/mach5/mesos/work_dir/jib-master/install/jdk-22+14-988/linux-x64-debug.jdk/jdk-22/fastdebug/bin/java -cp /opt/mach5/mesos/work_dir/slaves/cd627e65-f015-4fb1-a1d2-b6c9b8127f98-S141880/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/9c635776-e490-45d4-b151-e522aef8407f/runs/61362d7b-4e67-4df9-841f-a19f4427bb0a/testoutput/test-support/jtreg_open_test_hotspot_jtreg_tier1_compiler_2/classes/5/compiler/codecache/CodeCacheFullCountTest.d:/opt/mach5/mesos/work_dir/jib-master/install/jdk-22+14-988/src.full/open/test/hotspot/jtreg/compiler/codecache:/opt/mach5/mesos/work_dir/slaves/cd627e65-f015-4fb1-a1d2-b6c9b8127f98-S141880/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/9c635776-e490-45d4-b151-e522aef8407f/runs/61362d7b-4e67-4df9-841f-a19f4427bb0a/testoutput/test-support/jtreg_open_test_hotspot_jtreg_tier1_compiler_2/classes/5/test/lib:/opt/mach5/mesos/work_dir/jib-master/install/jtreg/7.3.1/1/bundles/jtreg-7.3.1+1.zip/jtreg/lib/jtreg.jar:/opt/mach5/mesos/work_dir/jib-master/install/jtreg/7.3.1/1/bundles/jtreg-7.3.1+1.zip/jtreg/lib/junit-platform-console-standalone-1.9.2.jar:/opt/mach5/mesos/work_dir/jib-master/install/jtreg/7.3.1/1/bundles/jtreg-7.3.1+1.zip/jtreg/lib/testng-7.3.0.jar:/opt/mach5/mesos/work_dir/jib-master/install/jtreg/7.3.1/1/bundles/jtreg-7.3.1+1.zip/jtreg/lib/jcommander-1.82.jar:/opt/mach5/mesos/work_dir/jib-master/install/jtreg/7.3.1/1/bundles/jtreg-7.3.1+1.zip/jtreg/lib/guice-5.1.0.jar -XX:MaxRAMPercentage=4.16667 -Dtest.boot.jdk=/opt/mach5/mesos/work_dir/jib-master/install/jdk/20/36/bundles/linux-x64/jdk-20_linux-x64_bin.tar.gz/jdk-20 -Djava.io.tmpdir=/opt/mach5/mesos/work_dir/slaves/cd627e65-f015-4fb1-a1d2-b6c9b8127f98-S141880/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/9c635776-e490-45d4-b151-e522aef8407f/runs/61362d7b-4e67-4df9-841f-a19f4427bb0a/testoutput/test-support/jtreg_open_test_hotspot_jtreg_tier1_compiler_2/tmp -Xcomp -ea -esa -XX:CompileThreshold=100 -XX:+UnlockExperimentalVMOptions -server -XX:-TieredCompilation -XX:ReservedCodeCacheSize=2496k -XX:-UseCodeCacheFlushing -XX:-MethodFlushing CodeCacheFullCountTest WasteCodeCache ]
[2023-09-02T17:48:24.556715168Z] Gathering output for process 21606
[2023-09-02T17:48:26.325267526Z] Waiting for completion for process 21606
[2023-09-02T17:48:26.358926488Z] Waiting for completion finished for process 21606
Output and diagnostic info for process 21606 was saved into 'pid-21606-output.log'
[2023-09-02T17:48:26.625647668Z] Waiting for completion for process 21606
[2023-09-02T17:48:26.625711545Z] Waiting for completion finished for process 21606
[2023-09-02T17:48:26.628803880Z] Waiting for completion for process 21606
[2023-09-02T17:48:26.628852353Z] Waiting for completion finished for process 21606
[2023-09-02T17:48:26.790326096Z] Waiting for completion for process 21606
[2023-09-02T17:48:26.790374059Z] Waiting for completion finished for process 21606
----------System.err:(48/3467)----------
 stdout: [[2.231s][warning][codecache] CodeCache is full. Compiler has been disabled.
[2.231s][warning][codecache] Try increasing the code cache size using -XX:ReservedCodeCacheSize=
CodeCache: size=2496Kb used=2477Kb max_used=2484Kb free=18Kb
 bounds [0x00007f5e16b62000, 0x00007f5e16dd2000, 0x00007f5e16dd2000]
 total_blobs=1068 nmethods=403 adapters=614
 compilation: disabled (not enough contiguous free space left)
              stopped_count=0, restarted_count=0
 full_count=1
Error occurred during initialization of VM
java.lang.InternalError: java.lang.VirtualMachineError: Out of space in CodeCache for adapters
	at jdk.internal.reflect.MethodHandleIntegerFieldAccessorImpl.getInt(java.base@22-ea/MethodHandleIntegerFieldAccessorImpl.java:86)
	at java.lang.reflect.Field.getInt(java.base@22-ea/Field.java:628)
	at java.lang.invoke.MethodHandleNatives.verifyConstants(java.base@22-ea/MethodHandleNatives.java:226)
	at java.lang.invoke.MethodHandleNatives.<clinit>(java.base@22-ea/MethodHandleNatives.java:245)
Caused by: java.lang.VirtualMachineError: Out of space in CodeCache for adapters
	at jdk.internal.org.objectweb.asm.ClassWriter.visitMethod(java.base@22-ea/ClassWriter.java:500)
	at java.lang.invoke.InvokerBytecodeGenerator.methodPrologue(java.base@22-ea/InvokerBytecodeGenerator.java:280)
	at java.lang.invoke.InvokerBytecodeGenerator.addMethod(java.base@22-ea/InvokerBytecodeGenerator.java:766)
	at java.lang.invoke.InvokerBytecodeGenerator.generateCustomizedCodeBytes(java.base@22-ea/InvokerBytecodeGenerator.java:754)
	at java.lang.invoke.InvokerBytecodeGenerator.generateCustomizedCode(java.base@22-ea/InvokerBytecodeGenerator.java:712)
	at java.lang.invoke.LambdaForm.compileToBytecode(java.base@22-ea/LambdaForm.java:849)
	at java.lang.invoke.Invokers.invokeHandleForm(java.base@22-ea/Invokers.java:358)
	at java.lang.invoke.Invokers.methodHandleInvokeLinkerMethod(java.base@22-ea/Invokers.java:263)
	at java.lang.invoke.MethodHandleNatives.linkMethodImpl(java.base@22-ea/MethodHandleNatives.java:494)
	at java.lang.invoke.MethodHandleNatives.linkMethod(java.base@22-ea/MethodHandleNatives.java:485)
	at jdk.internal.reflect.MethodHandleIntegerFieldAccessorImpl.getInt(java.base@22-ea/MethodHandleIntegerFieldAccessorImpl.java:77)
	at java.lang.reflect.Field.getInt(java.base@22-ea/Field.java:628)
	at java.lang.invoke.MethodHandleNatives.verifyConstants(java.base@22-ea/MethodHandleNatives.java:226)
	at java.lang.invoke.MethodHandleNatives.<clinit>(java.base@22-ea/MethodHandleNatives.java:245)

];
 stderr: [Java HotSpot(TM) 64-Bit Server VM warning: CodeCache is full. Compiler has been disabled.
Java HotSpot(TM) 64-Bit Server VM warning: Try increasing the code cache size using -XX:ReservedCodeCacheSize=
Java HotSpot(TM) 64-Bit Server VM warning: C2 initialization failed. Shutting down all compilers
]
 exitValue = 1

java.lang.RuntimeException: VM finished with exit code 1
	at CodeCacheFullCountTest.runTest(CodeCacheFullCountTest.java:64)
	at CodeCacheFullCountTest.main(CodeCacheFullCountTest.java:44)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
	at java.base/java.lang.reflect.Method.invoke(Method.java:580)
	at com.sun.javatest.regtest.agent.MainActionHelper$AgentVMRunnable.run(MainActionHelper.java:333)
	at java.base/java.lang.Thread.run(Thread.java:1570)

JavaTest Message: Test threw exception: java.lang.RuntimeException
JavaTest Message: shutting down test

result: Failed. Execution failed: `main' threw exception: java.lang.RuntimeException: VM finished with exit code 1

The test task's JVM args are:
-Xcomp -ea -esa -XX:CompileThreshold=100 -XX:+UnlockExperimentalVMOptions -server -XX:-TieredCompilation",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8314837,,,,,,,,,,,x86_64,,,,,,,,,linux,windows,,,,"0|i32zln:",9223372036854775807,b17,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2023-09-02 19:14;dcubed;These test failures first appeared in jdk-22+14-988-tier6
which included the fix for:

JDK-8314837 5 compiled/codecache tests ignore VM flags;;;","2023-09-03 22:09;thartmann;[~yftsai], could you please have a look? Thanks.;;;","2023-09-03 22:10;thartmann;ILW = Test fails (test bug), single test with -Xcomp (will be problem listed), no workaround = MLH = P4;;;","2023-09-06 15:01;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/15604
Date: 2023-09-06 21:54:24 +0000;;;","2023-09-22 00:58;dukebot;Changeset: 343cc0ce
Author:    Yi-Fan Tsai <yftsai@amazon.com>
Committer: Tobias Hartmann <thartmann@openjdk.org>
Date:      2023-09-22 07:57:05 +0000
URL:       https://git.openjdk.org/jdk/commit/343cc0ce2bba797e206f6b7312018a8c6d1bdb66
;;;",,,,,,,,,,,,,,,,,,,,,,
[JVMCI] deadlock in JVMCI startup when bad option specified,JDK-8315566,5109514,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,dnsimon,dnsimon,dnsimon,2023-09-02 03:32,2023-09-15 05:46,2023-10-01 09:55,2023-09-04 03:19,21,22,,,,,,22,hotspot,,0,jvmci,oracle-triage-17,oracle-triage-22,,,,,,,,,,,,,,,,,"When an unknown JVMCI or Graal option is specified to libgraal, the VM can hang due to a deadlock within libgraal.

""JVMCI-native CompilerThread1"" #15 [1243175] daemon prio=9 os_prio=0 cpu=7.02ms elapsed=151.86s tid=0x00007fb1bc02cb60 nid=1243175 runnable  [0x00007fb1debfd000]
   java.lang.Thread.State: RUNNABLE
   Compiling:  186       4       java.util.Objects::requireNonNull (14 bytes)
        at java.lang.Shutdown.halt0(java.base@22-internal/Native Method)
        at java.lang.Shutdown.halt(java.base@22-internal/Shutdown.java:149)
        - locked <0x0000000430801118> (a java.lang.Shutdown$Lock)
        at java.lang.Shutdown.exit(java.base@22-internal/Shutdown.java:168)
        - locked <0x00000007ff882098> (a java.lang.Class for java.lang.Shutdown)
        at java.lang.Runtime.exit(java.base@22-internal/Runtime.java:188)
        at java.lang.System.exit(java.base@22-internal/System.java:1916)

""JVMCI-native CompilerThread2"" #16 [1243176] daemon prio=9 os_prio=0 cpu=3.34ms elapsed=151.86s tid=0x00007fb1b4006eb0 nid=1243176 waiting for monitor entry  [0x00007fb1de9fd000]
   java.lang.Thread.State: BLOCKED (on object monitor)
   Compiling:  244       4       java.util.stream.AbstractPipeline::wrapSink (37 bytes)
        at java.lang.Shutdown.exit(java.base@22-internal/Shutdown.java:166)
        - waiting to lock <0x00000007ff882098> (a java.lang.Class for java.lang.Shutdown)
        at java.lang.Runtime.exit(java.base@22-internal/Runtime.java:188)
        at java.lang.System.exit(java.base@22-internal/System.java:1916)

The problem is that HotSpotJVMCIRuntime.vmEventListeners is lazily initialized and synchronizes on the HotSpotJVMCIRuntime instance. This can deadlock with other threads that synchronize on the same object.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8310055,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i32zj7:",9223372036854775807,b14,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2023-09-02 04:04;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/15549
Date: 2023-09-02 11:00:00 +0000;;;","2023-09-03 22:42;thartmann;ILW = Deadlock during startup, intermittent with JVMCI and unknown command line options, remove unknown command line options = HLM = P3;;;","2023-09-04 03:19;dukebot;Changeset: d1cabe4f
Author:    Doug Simon <dnsimon@openjdk.org>
Date:      2023-09-04 10:17:23 +0000
URL:       https://git.openjdk.org/jdk/commit/d1cabe4f22abe96486d85bd5efc468e0e640c3e4
;;;",,,,,,,,,,,,,,,,,,,,,,,,
CITime misreports code/total nmethod sizes,JDK-8315549,5109492,Bug,Resolved,JDK,JDK,software,duke,,,P5,Fixed,shade,shade,shade,2023-09-01 07:49,2023-09-18 23:09,2023-10-01 09:55,2023-09-03 23:04,11,17,21,22,,,,22,hotspot,,0,amazon-interest,diagnostics,jdk17u-fix-request,jdk17u-fix-yes,jdk21u-fix-request,jdk21u-fix-SQE-ok-next,jdk21u-fix-yes,oracle-triage-22,,,,,,,,,,,,"If you run with -XX:+CITime, then it would print the odd data:

```
% build/macosx-aarch64-server-fastdebug/images/jdk/bin/java -Xcomp -XX:+CITime Hello.java

...
  nmethod code size         : 42544128 bytes
  nmethod total size        : 23678448 bytes
```

Note how `total` is smaller than `code`! This is just a simple problem in printing code.",,,,,,,,,,,,JDK-8316408,JDK-8316014,JDK-8315987,JDK-8316488,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i32zeb:",9223372036854775807,b14,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2023-09-01 07:59;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/15538
Date: 2023-09-01 14:52:49 +0000;;;","2023-09-03 22:34;thartmann;ILW = CITime reports incorrect total nmethod size, with -XX:+CITime, swap code and total size = MLL = P5;;;","2023-09-03 23:04;dukebot;Changeset: ab12c5d3
Author:    Aleksey Shipilev <shade@openjdk.org>
Date:      2023-09-04 06:02:03 +0000
URL:       https://git.openjdk.org/jdk/commit/ab12c5d32fede04cbbf8c86b6461a0c71404cd69
;;;","2023-09-04 04:49;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk21u/pull/133
Date: 2023-09-04 11:41:16 +0000;;;","2023-09-04 05:00;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/1719
Date: 2023-09-04 11:53:50 +0000;;;","2023-09-05 02:46;shade;Fix Request (21u)

Fixes the reporting oddity, makes sure JDK releases report the values the same way. Does not apply cleanly, but conflict is trivial to resolve. 21u PR acked by kvn.;;;","2023-09-07 06:38;shade;Fix Request (17u)

Same reason as for 21u. Does not apply cleanly, but conflict is trivial to resolve. 17u PR acked by phohensee. ;;;",,,,,,,,,,,,,,,,,,,,
Classfile API TypeAnnotation.TargetInfo factory methods accept null labels,JDK-8315541,5109484,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,asotona,asotona,asotona,2023-09-01 06:25,2023-09-20 22:21,2023-10-01 09:55,2023-09-14 11:29,,,,,,,,22,core-libs,,0,classfile-api,,,,,,,,,,,,,,,,,,,"TypeAnnotation.TargetInfo factory methods should throw on invalid arguments, however they accept null labels.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i32zcj:",9223372036854775807,b16,,,,,,,,,,,"2023-09-05 04:04;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/15565
Date: 2023-09-05 10:59:09 +0000;;;","2023-09-14 11:29;dukebot;Changeset: c7d306c6
Author:    Adam Sotona <asotona@openjdk.org>
Date:      2023-09-14 18:27:12 +0000
URL:       https://git.openjdk.org/jdk/commit/c7d306c65c5ed26839b323f3dfc7e5b68e5adaa1
;;;",,,,,,,,,,,,,,,,,,,,,,,,,
Incorrect warnings about implicit annotation processing,JDK-8315534,5109477,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,jlahoda,jlahoda,jlahoda,2023-09-01 05:57,2023-09-12 11:22,2023-10-01 09:55,2023-09-04 03:08,21,,,,,,,22,tools,,0,jdk21u-fix-request,jdk21u-fix-SQE-ok,jdk21u-fix-yes,,,,,,,,,,,,,,,,,"Consider code like:
---
                com.sun.source.util.JavacTask task =
                        (com.sun.source.util.JavacTask) provider.getTask(compilerOut, null, null, options, null, inputFile);

                Processor processor =
                        (Processor) processorClass.getDeclaredConstructor().newInstance();

                task.setProcessors(List.of(processor));
                task.analyze();
---

This will produce warning like:
---
Note: Annotation processing is enabled because one or more processors were found
  on the class path. A future release of javac may disable annotation processing
  unless at least one processor is specified by name (-processor), or a search
  path is specified (--processor-path, --processor-module-path), or annotation
  processing is enabled explicitly (-proc:only, -proc:full).
  Use -Xlint:-options to suppress this message.
  Use -proc:none to disable annotation processing.
---

which is incorrect, as the processors where passed in using the API.
",,,,,,,,,,,,JDK-8315670,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8310061,,,,,,,,,,,,,,,,,,,,,,,,,"0|i32zaz:",9223372036854775807,b14,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4dca67bd,,,,,,,,,"2023-09-01 08:51;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/15540
Date: 2023-09-01 15:44:06 +0000;;;","2023-09-04 03:08;dukebot;Changeset: 94a74a0a
Author:    Jan Lahoda <jlahoda@openjdk.org>
Date:      2023-09-04 10:06:20 +0000
URL:       https://git.openjdk.org/jdk/commit/94a74a0a450cad6080302bc1db15a1a564940bdd
;;;","2023-09-04 03:48;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk21u/pull/132
Date: 2023-09-04 10:41:43 +0000;;;","2023-09-04 06:10;jlahoda;Fix Request

javac is producing a warning about implicit annotation processing. It should not produce the warnings, as the AP was requested explicitly. The fix simply moves the detection of explicit annotation processing to a more general location, and should generally be safe. Standard javac tests are passing.;;;",,,,,,,,,,,,,,,,,,,,,,,
[11u] Exclude some failing Z-GC tests,JDK-8315529,5109471,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,clanger,clanger,clanger,2023-09-01 04:59,2023-09-13 23:32,2023-10-01 09:55,2023-09-11 06:23,11,,,,,,,11.0.21,hotspot,,0,jdk11u-critical-request,jdk11u-critical-yes,,,,,,,,,,,,,,,,,,"The following tests are failing in SAP's CI for JDK 11 in a linuxx86 configuration:
compiler/gcbarriers/UnsafeIntrinsicsTest.java#z
gc/stress/gcold/TestGCOldWithZ.java

Since they test an experimental feature, we should exclude the tests for now until someone fixes them.
",,,,,,,,,,,,JDK-8316249,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8315528,JDK-8315531,,,,,,,,,,,,,,,,,,,,,,,,"0|i32z9n:",9223372036854775807,master,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6b00f96c,,,,,,,,,"2023-09-01 05:21;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk11u/pull/80
Date: 2023-09-01 12:16:26 +0000;;;","2023-09-04 05:11;clanger;Fix request (11u):
Request exclusion of two failing Z-GC tests to reduce CI noise.;;;","2023-09-11 03:15;goetz;[11u critical yes]
Only a test fix, so no risk for rampdown.;;;","2023-09-11 06:23;dukebot;Changeset: d4254d5e
Author:    Christoph Langer <clanger@openjdk.org>
Date:      2023-09-11 13:22:35 +0000
URL:       https://git.openjdk.org/jdk11u/commit/d4254d5edf1695e17c1a47d9d81e99b61c2161aa
;;;",,,,,,,,,,,,,,,,,,,,,,,
C99 compatibility issue in LinuxNativeDispatcher,JDK-8315506,5109446,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,fweimer,fweimer,fweimer,2023-09-01 03:09,2023-09-04 03:37,2023-10-01 09:55,2023-09-04 03:34,openjdk8u402,,,,,,,openjdk8u402,core-libs,,0,11-na,17-na,21-na,22-na,jdk8u-fix-request,jdk8u-fix-yes,,,,,,,,,,,,,,"The Java_sun_nio_fs_LinuxNativeDispatcher_getlinelen function calls the free function without including <stdlib.h>. This results in an implicit function declarations, and some compilers no longer support that by default, leading to a build failure.

Per the comment in the file, this function was introduced in the backport of JDK-8229872 from JDK 11, so this bug is specific to jdk8u.

Related to:

  <https://fedoraproject.org/wiki/Changes/PortingToModernC>
  <https://fedoraproject.org/wiki/Toolchain/PortingToModernC>
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8229872,,,,,,,,,,,,,,,,,,,,,,,,linux,,,,,"0|i32z43:",9223372036854775807,master,,,,,,,,,,,"2023-09-01 03:27;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk8u-dev/pull/362
Date: 2023-09-01 10:12:18 +0000;;;","2023-09-01 08:42;fweimer;This is desirable to fix because it avoids build failures with future toolchain versions and in future distribution build environments. See the Fedora links from the description for some background why we are doing this.;;;","2023-09-04 03:34;dukebot;Changeset: 89a08b38
Author:    Florian Weimer <fweimer@openjdk.org>
Committer: Severin Gehwolf <sgehwolf@openjdk.org>
Date:      2023-09-04 10:33:34 +0000
URL:       https://git.openjdk.org/jdk8u-dev/commit/89a08b389947078ae150a758c1ff9da7ba404857
;;;",,,,,,,,,,,,,,,,,,,,,,,,
build using devkit on Linux ppc64le RHEL puts path to devkit into libsplashscreen,JDK-8315499,5109436,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,mbaesken,mbaesken,mbaesken,2023-09-01 00:59,2023-09-25 01:31,2023-10-01 09:55,2023-09-05 05:49,22,,,,,,,22,infrastructure,,0,jdk21u-fix-request,,,,,,,,,,,,,,,,,,,"After looking at the build results of a jdk22 build on RHEL 8.4 Linux ppc64le that uses a ppc64le-linux-gnu-to-ppc64le-linux-gnu-fedora27-gcc11.3.0
devkit we observed those unwanted paths in libsplashscreen.so .
See those objdump and ldd output :

objdump -x ./lib/libsplashscreen.so  | grep PATH
  RUNPATH              /mydevkitsfolder/devkits/ppc64le-linux-gnu-to-ppc64le-linux-gnu-fedora27-gcc11.3.0/ppc64le-linux-gnu/sysroot/usr/lib64:$ORIGIN


ldd ./lib/libsplashscreen.so
ldd: warning: you do not have execution permission for `./lib/libsplashscreen.so'
      . . .
               libX11.so.6 => /mydevkitsfolder/devkits/ppc64le-linux-gnu-to-ppc64le-linux-gnu-fedora27-gcc11.3.0/ppc64le-linux-gnu/sysroot/usr/lib64/libX11.so.6 (0x00007fffa3920000)
               libXext.so.6 => /mydevkitsfolder/devkits/ppc64le-linux-gnu-to-ppc64le-linux-gnu-fedora27-gcc11.3.0/ppc64le-linux-gnu/sysroot/usr/lib64/libXext.so.6 (0x00007fffa38e0000)
      . . .
               libz.so.1 => /mydevkitsfolder/devkits/ppc64le-linux-gnu-to-ppc64le-linux-gnu-fedora27-gcc11.3.0/ppc64le-linux-gnu/sysroot/usr/lib64/libz.so.1 (0x00007fffa36f0000)
               libc.so.6 => /lib64/power9/libc.so.6 (0x00007fffa34e0000)
               libjvm.so => not found
               libxcb.so.1 => /lib64/libxcb.so.1 (0x00007fffa3490000)
               /lib64/ld64.so.2 (0x00007fffa3be0000)
               libXau.so.6 => /lib64/libXau.so.6 (0x00007fffa3460000)
 
 
Looks like the devkit reference is coming in via the X_LIBS setting , where the -R is added by AC_PATH_XTRA

make/autoconf/lib-x11.m4
 
    # Now let autoconf do it's magic
    AC_PATH_X
    AC_PATH_XTRA
 
    # AC_PATH_XTRA creates X_LIBS and sometimes adds -R flags. When cross compiling
    # this doesn't make sense so we remove it.
    if test ""x$COMPILE_TYPE"" = xcross; then
      X_LIBS=`$ECHO $X_LIBS | $SED 's/-R \{0,1\}[[^ ]]*//g'`
    fi
 And X_LIBS   is used later  on Linux   in the   build of LIBSPLASHSCREEN .


Strangely I could not reproduce this when building on RHEL 8.x  x86_64 , there might be a difference in the tools compared to ppc64le.
Probably at least in the devkit build case, the -R setting should be filtered like it is done in the cross build already.
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,ppc,,,,,,,,,linux,,,,,"0|i32z1v:",9223372036854775807,b14,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@429c566,,,,,,,,,"2023-09-01 04:09;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/15534
Date: 2023-09-01 11:02:36 +0000;;;","2023-09-05 05:49;dukebot;Changeset: ed2b4673
Author:    Matthias Baesken <mbaesken@openjdk.org>
Date:      2023-09-05 12:48:03 +0000
URL:       https://git.openjdk.org/jdk/commit/ed2b4673de6893047407c61f82b5e68741459876
;;;","2023-09-25 01:31;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk21u/pull/201
Date: 2023-09-25 08:25:37 +0000;;;","2023-09-25 01:31;mbaesken;jdk21u backport request
I would like to have the patch in jdk21u as well, because the issue is present there too.  The patch applies cleanly and is low risk.;;;",,,,,,,,,,,,,,,,,,,,,,,
vmTestbase/nsk/jdwp/ThreadReference/ForceEarlyReturn/forceEarlyReturn002/forceEarlyReturn002.java timed out,JDK-8315486,5109420,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,amenkov,dcubed,dcubed,2023-08-31 14:49,2023-09-27 18:19,2023-10-01 09:55,2023-09-21 15:25,22,,,,,,,22,core-svc,,0,genzgc,loom,tier5,,,,,,,,,,,,,,,,,"The following test failed in the JDK22 CI:

vmTestbase/nsk/jdwp/ThreadReference/ForceEarlyReturn/forceEarlyReturn002/forceEarlyReturn002.java

Here's a snippet from the log file:

#section:main
----------messages:(8/1260)----------
command: main nsk.jdwp.ThreadReference.ForceEarlyReturn.forceEarlyReturn002.forceEarlyReturn002 -arch=linux-aarch64 -verbose -waittime=5 -debugee.vmkind=java -transport.address=dynamic -debugee.vmkeys=""-XX:MaxRAMPercentage=6.25 -Dtest.boot.jdk=/opt/mach5/mesos/work_dir/jib-master/install/jdk/20/36/bundles/linux-aarch64/jdk-20_linux-aarch64_bin.tar.gz/jdk-20 -Djava.io.tmpdir=/opt/mach5/mesos/work_dir/slaves/cd627e65-f015-4fb1-a1d2-b6c9b8127f98-S152533/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/8611eaf9-de0a-4f95-baa6-82686a11fbb6/runs/61ff66a5-0237-488a-a072-83c1b0bd38d9/testoutput/test-support/jtreg_open_test_hotspot_jtreg_vmTestbase_nsk_jdwp/tmp -Duse.JTREG_TEST_THREAD_FACTORY=Virtual -XX:+UseZGC -XX:+ZGenerational -XX:-VerifyContinuations""
reason: User specified action: run main/othervm/native nsk.jdwp.ThreadReference.ForceEarlyReturn.forceEarlyReturn002.forceEarlyReturn002 -arch=${os.family}-${os.simpleArch} -verbose -waittime=5 -debugee.vmkind=java -transport.address=dynamic -debugee.vmkeys=""${test.vm.opts} ${test.java.opts}"" 
started: Thu Aug 31 21:24:05 UTC 2023
Mode: othervm [/othervm specified]
Timeout information:
--- Timeout information end.
finished: Thu Aug 31 21:38:01 UTC 2023
elapsed time (seconds): 835.49
----------configuration:(0/0)----------
----------System.out:(340/14325)----------

>>> Preparing debugee for testing 

Launching debugee
transport> port == 0, disabling SO_REUSEADDR
Debugee> Starting java process:
""/opt/mach5/mesos/work_dir/jib-master/install/jdk-22+14-966/linux-aarch64-debug.jdk/jdk-22/fastdebug/bin/java"" ""-XX:MaxRAMPercentage=6.25"" ""-Dtest.boot.jdk=/opt/mach5/mesos/work_dir/jib-master/install/jdk/20/36/bundles/linux-aarch64/jdk-20_linux-aarch64_bin.tar.gz/jdk-20"" ""-Djava.io.tmpdir=/opt/mach5/mesos/work_dir/slaves/cd627e65-f015-4fb1-a1d2-b6c9b8127f98-S152533/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/8611eaf9-de0a-4f95-baa6-82686a11fbb6/runs/61ff66a5-0237-488a-a072-83c1b0bd38d9/testoutput/test-support/jtreg_open_test_hotspot_jtreg_vmTestbase_nsk_jdwp/tmp"" ""-Duse.JTREG_TEST_THREAD_FACTORY=Virtual"" ""-XX:+UseZGC"" ""-XX:+ZGenerational"" ""-XX:-VerifyContinuations"" ""-Xrunjdwp:server=n,transport=dt_socket,address=localhost:37871,includevirtualthreads=y"" ""nsk.share.MainWrapper"" ""Virtual"" ""nsk.jdwp.ThreadReference.ForceEarlyReturn.forceEarlyReturn002.forceEarlyReturn002a"" ""-arch=linux-aarch64"" ""-verbose"" ""-waittime=5"" ""-debugee.vmkind=java"" ""-transport.address=dynamic"" ""-debugee.vmkeys=""-XX:MaxRAMPercentage=6.25 -Dtest.boot.jdk=/opt/mach5/mesos/work_dir/jib-master/install/jdk/20/36/bundles/linux-aarch64/jdk-20_linux-aarch64_bin.tar.gz/jdk-20 -Djava.io.tmpdir=/opt/mach5/mesos/work_dir/slaves/cd627e65-f015-4fb1-a1d2-b6c9b8127f98-S152533/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/8611eaf9-de0a-4f95-baa6-82686a11fbb6/runs/61ff66a5-0237-488a-a072-83c1b0bd38d9/testoutput/test-support/jtreg_open_test_hotspot_jtreg_vmTestbase_nsk_jdwp/tmp -Duse.JTREG_TEST_THREAD_FACTORY=Virtual -XX:+UseZGC -XX:+ZGenerational -XX:-VerifyContinuations"""" ""-pipe.port=43471""
Debugee> Establishing JDWP socket connection
Debugee> Listening from debugee
Waiting for VM_INIT event
Querying for IDSizes
Resuming debugee VM
Waiting for signal from debugee: ready
debugee.stderr> Debuggee nsk.jdwp.ThreadReference.ForceEarlyReturn.forceEarlyReturn002.forceEarlyReturn002a : sending the command: ready
Received signal from debugee: ready
Create command: ThreadReference.ForceEarlyReturn
threadID = -1
Value = (INT)0
Sending command packet:
Packet header (11 bytes):
    0000 (length) : 0x00000018 (24)
    0004 (id)     : 0x00000003 (3)
    0008 (flags)  : 0x00 (0)
    0009 (cmd set): 0x0b (11)
    000a (command): 0x0e (14)
Entire packet (24 bytes): 
    0000: 00 00 00 18 00 00 00 03 00 0b 0e ff ff ff ff ff   ................
    0010: ff ff ff 49 00 00 00 00                           ...I....
Packet end
Waiting for reply packet
Reply packet received:
Packet header (11 bytes):
    0000 (length) : 0x0000000b (11)
    0004 (id)     : 0x00000003 (3)
    0008 (flags)  : 0x80 (-128)
    000a (error)  : 0x0014 (20)
Entire packet (11 bytes): 
    0000: 00 00 00 0b 00 00 00 03 80 00 14                  ...........
Packet end
Expected error: 20
debugee.stderr> Debuggee: received the command: createStateTestThread
debugee.stderr> Debuggee nsk.jdwp.ThreadReference.ForceEarlyReturn.forceEarlyReturn002.forceEarlyReturn002a : sending the command: ready
Received signal from debugee: ready
debugee.stderr> Debuggee: received the command: stateTestThreadNextState
debugee.stderr> Debuggee nsk.jdwp.ThreadReference.ForceEarlyReturn.forceEarlyReturn002.forceEarlyReturn002a : sending the command: ready
Received signal from debugee: ready
Create command: ThreadReference.ForceEarlyReturn
threadID = 19
Value = (INT)0
Sending command packet:
Packet header (11 bytes):
    0000 (length) : 0x00000018 (24)
    0004 (id)     : 0x00000018 (24)
    0008 (flags)  : 0x00 (0)
    0009 (cmd set): 0x0b (11)
    000a (command): 0x0e (14)
Entire packet (24 bytes): 
    0000: 00 00 00 18 00 00 00 18 00 0b 0e 00 00 00 00 00   ................
    0010: 00 00 13 49 00 00 00 00                           ...I....
Packet end
Waiting for reply packet
Reply packet received:
Packet header (11 bytes):
    0000 (length) : 0x0000000b (11)
    0004 (id)     : 0x00000018 (24)
    0008 (flags)  : 0x80 (-128)
    000a (error)  : 0x000d (13)
Entire packet (11 bytes): 
    0000: 00 00 00 0b 00 00 00 18 80 00 0d                  ...........
Packet end
Expected error: 13
debugee.stderr> Debuggee: received the command: stateTestThreadNextState
Received signal from debugee: ready
debugee.stderr> Debuggee nsk.jdwp.ThreadReference.ForceEarlyReturn.forceEarlyReturn002.forceEarlyReturn002a : sending the command: ready
Create command: ThreadReference.ForceEarlyReturn
threadID = 19
Value = (INT)0
Sending command packet:
Packet header (11 bytes):
    0000 (length) : 0x00000018 (24)
    0004 (id)     : 0x00000019 (25)
    0008 (flags)  : 0x00 (0)
    0009 (cmd set): 0x0b (11)
    000a (command): 0x0e (14)
Entire packet (24 bytes): 
    0000: 00 00 00 18 00 00 00 19 00 0b 0e 00 00 00 00 00   ................
    0010: 00 00 13 49 00 00 00 00                           ...I....
Packet end
Waiting for reply packet
Reply packet received:
Packet header (11 bytes):
    0000 (length) : 0x0000000b (11)
    0004 (id)     : 0x00000019 (25)
    0008 (flags)  : 0x80 (-128)
    000a (error)  : 0x000d (13)
Entire packet (11 bytes): 
    0000: 00 00 00 0b 00 00 00 19 80 00 0d                  ...........
Packet end
Expected error: 13
debugee.stderr> Debuggee: received the command: stateTestThreadNextState
debugee.stderr> Debuggee nsk.jdwp.ThreadReference.ForceEarlyReturn.forceEarlyReturn002.forceEarlyReturn002a : sending the command: ready
Received signal from debugee: ready
Create command: ThreadReference.ForceEarlyReturn
threadID = 19
Value = (INT)0
Sending command packet:
Packet header (11 bytes):
    0000 (length) : 0x00000018 (24)
    0004 (id)     : 0x0000001a (26)
    0008 (flags)  : 0x00 (0)
    0009 (cmd set): 0x0b (11)
    000a (command): 0x0e (14)
Entire packet (24 bytes): 
    0000: 00 00 00 18 00 00 00 1a 00 0b 0e 00 00 00 00 00   ................
    0010: 00 00 13 49 00 00 00 00                           ...I....
Packet end
Waiting for reply packet
Reply packet received:
Packet header (11 bytes):
    0000 (length) : 0x0000000b (11)
    0004 (id)     : 0x0000001a (26)
    0008 (flags)  : 0x80 (-128)
    000a (error)  : 0x000d (13)
Entire packet (11 bytes): 
    0000: 00 00 00 0b 00 00 00 1a 80 00 0d                  ...........
Packet end
Expected error: 13
debugee.stderr> Debuggee: received the command: stateTestThreadNextState
debugee.stderr> Debuggee nsk.jdwp.ThreadReference.ForceEarlyReturn.forceEarlyReturn002.forceEarlyReturn002a : sending the command: ready
Received signal from debugee: ready
Create command: ThreadReference.ForceEarlyReturn
threadID = 19
Value = (INT)0
Sending command packet:
Packet header (11 bytes):
    0000 (length) : 0x00000018 (24)
    0004 (id)     : 0x0000001b (27)
    0008 (flags)  : 0x00 (0)
    0009 (cmd set): 0x0b (11)
    000a (command): 0x0e (14)
Entire packet (24 bytes): 
    0000: 00 00 00 18 00 00 00 1b 00 0b 0e 00 00 00 00 00   ................
    0010: 00 00 13 49 00 00 00 00                           ...I....
Packet end
Waiting for reply packet
Reply packet received:
Packet header (11 bytes):
    0000 (length) : 0x0000000b (11)
    0004 (id)     : 0x0000001b (27)
    0008 (flags)  : 0x80 (-128)
    000a (error)  : 0x000d (13)
Entire packet (11 bytes): 
    0000: 00 00 00 0b 00 00 00 1b 80 00 0d                  ...........
Packet end
Expected error: 13
debugee.stderr> Debuggee: received the command: stateTestThreadNextState
debugee.stderr> Debuggee nsk.jdwp.ThreadReference.ForceEarlyReturn.forceEarlyReturn002.forceEarlyReturn002a : sending the command: ready
Received signal from debugee: ready
Create command: ThreadReference.ForceEarlyReturn
threadID = 19
Value = (INT)0
Sending command packet:
Packet header (11 bytes):
    0000 (length) : 0x00000018 (24)
    0004 (id)     : 0x0000001c (28)
    0008 (flags)  : 0x00 (0)
    0009 (cmd set): 0x0b (11)
    000a (command): 0x0e (14)
Entire packet (24 bytes): 
    0000: 00 00 00 18 00 00 00 1c 00 0b 0e 00 00 00 00 00   ................
    0010: 00 00 13 49 00 00 00 00                           ...I....
Packet end
Waiting for reply packet
Reply packet received:
Packet header (11 bytes):
    0000 (length) : 0x0000000b (11)
    0004 (id)     : 0x0000001c (28)
    0008 (flags)  : 0x80 (-128)
    000a (error)  : 0x000a (10)
Entire packet (11 bytes): 
    0000: 00 00 00 0b 00 00 00 1c 80 00 0a                  ...........
Packet end
Expected error: 10
Create command: ThreadReference.ForceEarlyReturn
threadID = 19
Value = (INT)0
Sending command packet:
Packet header (11 bytes):
    0000 (length) : 0x00000018 (24)
    0004 (id)     : 0x0000001e (30)
    0008 (flags)  : 0x00 (0)
    0009 (cmd set): 0x0b (11)
    000a (command): 0x0e (14)
Entire packet (24 bytes): 
    0000: 00 00 00 18 00 00 00 1e 00 0b 0e 00 00 00 00 00   ................
    0010: 00 00 13 49 00 00 00 00                           ...I....
Packet end
Waiting for reply packet
Reply packet received:
Packet header (11 bytes):
    0000 (length) : 0x0000000b (11)
    0004 (id)     : 0x0000001e (30)
    0008 (flags)  : 0x80 (-128)
    000a (error)  : 0x000a (10)
Entire packet (11 bytes): 
    0000: 00 00 00 0b 00 00 00 1e 80 00 0a                  ...........
Packet end
Expected error: 10
debugee.stderr> Debuggee: received the command: stopInNative
debugee.stderr> Enter native method
debugee.stderr> Debuggee nsk.jdwp.ThreadReference.ForceEarlyReturn.forceEarlyReturn002.forceEarlyReturn002a : sending the command: ready
Received signal from debugee: ready
Create command: ThreadReference.ForceEarlyReturn
threadID = 20
Value = (INT)0
Sending command packet:
Packet header (11 bytes):
    0000 (length) : 0x00000018 (24)
    0004 (id)     : 0x00000033 (51)
    0008 (flags)  : 0x00 (0)
    0009 (cmd set): 0x0b (11)
    000a (command): 0x0e (14)
Entire packet (24 bytes): 
    0000: 00 00 00 18 00 00 00 33 00 0b 0e 00 00 00 00 00   .......3........
    0010: 00 00 14 49 00 00 00 00                           ...I....
Packet end
Waiting for reply packet
Reply packet received:
Packet header (11 bytes):
    0000 (length) : 0x0000000b (11)
    0004 (id)     : 0x00000033 (51)
    0008 (flags)  : 0x80 (-128)
    000a (error)  : 0x000d (13)
Entire packet (11 bytes): 
    0000: 00 00 00 0b 00 00 00 33 80 00 0d                  .......3...
Packet end
Expected error: 13
Create command: ThreadReference.ForceEarlyReturn
threadID = 20
Value = (INT)0
Sending command packet:
Packet header (11 bytes):
    0000 (length) : 0x00000018 (24)
    0004 (id)     : 0x00000035 (53)
    0008 (flags)  : 0x00 (0)
    0009 (cmd set): 0x0b (11)
    000a (command): 0x0e (14)
Entire packet (24 bytes): 
    0000: 00 00 00 18 00 00 00 35 00 0b 0e 00 00 00 00 00   .......5........
    0010: 00 00 14 49 00 00 00 00                           ...I....
Packet end
Waiting for reply packet
Reply packet received:
Packet header (11 bytes):
    0000 (length) : 0x0000000b (11)
    0004 (id)     : 0x00000035 (53)
    0008 (flags)  : 0x80 (-128)
    000a (error)  : 0x0020 (32)
Entire packet (11 bytes): 
    0000: 00 00 00 0b 00 00 00 35 80 00 20                  .......5.. 
Packet end
Expected error: 32
Waiting for reply packet
debugee.stderr> Debuggee: received the command: exitInNative
debugee.stderr> Debuggee nsk.jdwp.ThreadReference.ForceEarlyReturn.forceEarlyReturn002.forceEarlyReturn002a : sending the command: ready
Reply packet received:
Packet header (11 bytes):
    0000 (length) : 0x0000000f (15)
    0004 (id)     : 0x00000036 (54)
    0008 (flags)  : 0x80 (-128)
    000a (error)  : 0x0000 (0)
Entire packet (15 bytes): 
    0000: 00 00 00 0f 00 00 00 36 80 00 00 00 00 00 02      .......6.......
Packet end
Checking reply packet header
Parsing reply packet:
debugee.stderr> Debuggee: received the command: startNewThread
debugee.stderr> Debuggee nsk.jdwp.ThreadReference.ForceEarlyReturn.forceEarlyReturn002.forceEarlyReturn002a : sending the command: ready
Create command: ThreadReference.ForceEarlyReturn
threadID = 21
Value = (VOID)0
Sending command packet:
Packet header (11 bytes):
    0000 (length) : 0x00000014 (20)
    0004 (id)     : 0x00000037 (55)
    0008 (flags)  : 0x00 (0)
    0009 (cmd set): 0x0b (11)
    000a (command): 0x0e (14)
Entire packet (20 bytes): 
    0000: 00 00 00 14 00 00 00 37 00 0b 0e 00 00 00 00 00   .......7........
    0010: 00 00 15 56                                       ...V
Packet end
Waiting for reply packet
Reply packet received:
Packet header (11 bytes):
    0000 (length) : 0x0000000b (11)
    0004 (id)     : 0x00000037 (55)
    0008 (flags)  : 0x80 (-128)
    000a (error)  : 0x001f (31)
Entire packet (11 bytes): 
    0000: 00 00 00 0b 00 00 00 37 80 00 1f                  .......7...
Packet end
Expected error: 31
Waiting for reply packet
Reply packet received:
Packet header (11 bytes):
    0000 (length) : 0x0000000b (11)
    0004 (id)     : 0x00000038 (56)
    0008 (flags)  : 0x80 (-128)
    000a (error)  : 0x0000 (0)
Entire packet (11 bytes): 
    0000: 00 00 00 0b 00 00 00 38 80 00 00                  .......8...
Packet end
Checking reply packet header
Parsing reply packet:
Received signal from debugee: ready
Sending signal to debugee: quit
Waiting for debugee exits
Timeout signalled after 480 seconds
# ERROR: Debugee FAILED with exit code: 134
The following stacktrace is for failure analysis.
nsk.share.TestFailure: Debugee FAILED with exit code: 134
	at nsk.share.Log.logExceptionForFailureAnalysis(Log.java:431)
	at nsk.share.Log.complain(Log.java:402)
	at nsk.share.jdwp.TestDebuggerType1.quitDebugee(TestDebuggerType1.java:191)
	at nsk.share.jdwp.TestDebuggerType1.runIt(TestDebuggerType1.java:131)
	at nsk.jdwp.ThreadReference.ForceEarlyReturn.forceEarlyReturn002.forceEarlyReturn002.run(forceEarlyReturn002.java:103)
	at nsk.jdwp.ThreadReference.ForceEarlyReturn.forceEarlyReturn002.forceEarlyReturn002.main(forceEarlyReturn002.java:99)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
	at java.base/java.lang.reflect.Method.invoke(Method.java:580)
	at com.sun.javatest.regtest.agent.MainWrapper$MainTask.run(MainWrapper.java:138)
	at java.base/java.lang.VirtualThread.run(VirtualThread.java:309)
TEST FAILED


#>  
#>  SUMMARY: Following errors occured
#>      during test execution:
#>  
# ERROR: Debugee FAILED with exit code: 134
----------System.err:(0/0)----------
----------rerun:(42/11323)*----------

<snip>

result: Error. Program `/opt/mach5/mesos/work_dir/jib-master/install/jdk-22+14-966/linux-aarch64-debug.jdk/jdk-22/fastdebug/bin/java' timed out (timeout set to 480000ms, elapsed time including timeout handling was 835480ms).


The test timed out, but it appears to have happened because
the debuggee failed with ""exit code: 134"". I don't see any
hs_err_pid files in the artifacts for this test run.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8286789,,,,,,,,,,,,,,,aarch64,,,,,,,,,linux,,,,,"0|i32yyb:",9223372036854775807,b17,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@3397f701,,,,,,,,,"2023-08-31 16:42;cjplummer;There was a core file generated and the failure_handler ran gdb on it. The output says:

   Program terminated with signal SIGABRT, Aborted.

I believe this is the result of the test timing out and jtreg aborting it. We see the following in the test log:

Sending signal to debugee: quit
Waiting for debugee exits
Timeout signalled after 480 seconds
# ERROR: Debugee FAILED with exit code: 134 

It's unclear why quit has been sent to the debuggee yet the debuggee hasn't exited. I did note that there are 3 debuggee threads handling ThreadStart events. They all look like:

#0  0x0000ffff929d5ca8 in pthread_cond_wait@@GLIBC_2.17 () from /lib64/libpthread.so.0
...
#10 0x0000ffff918522c8 in JvmtiEnv::RawMonitorWait(JvmtiRawMonitor*, long) () from /opt/mach5/mesos/work_dir/jib-master/install/jdk-22+14-966/linux-aarch64-debug.jdk/jdk-22/fastdebug/lib/server/libjvm.so
#11 0x0000ffff9049855c in debugMonitorWait () from /opt/mach5/mesos/work_dir/jib-master/install/jdk-22+14-966/linux-aarch64-debug.jdk/jdk-22/fastdebug/lib/libjdwp.so
#12 0x0000ffff90487f74 in enqueueCommand () from /opt/mach5/mesos/work_dir/jib-master/install/jdk-22+14-966/linux-aarch64-debug.jdk/jdk-22/fastdebug/lib/libjdwp.so
#13 0x0000ffff904891dc in eventHelper_reportEvents () from /opt/mach5/mesos/work_dir/jib-master/install/jdk-22+14-966/linux-aarch64-debug.jdk/jdk-22/fastdebug/lib/libjdwp.so
#14 0x0000ffff90482dbc in reportEvents.part.0 () from /opt/mach5/mesos/work_dir/jib-master/install/jdk-22+14-966/linux-aarch64-debug.jdk/jdk-22/fastdebug/lib/libjdwp.so
#15 0x0000ffff90483310 in event_callback () from /opt/mach5/mesos/work_dir/jib-master/install/jdk-22+14-966/linux-aarch64-debug.jdk/jdk-22/fastdebug/lib/libjdwp.so
#16 0x0000ffff904848cc in cbThreadStart () from /opt/mach5/mesos/work_dir/jib-master/install/jdk-22+14-966/linux-aarch64-debug.jdk/jdk-22/fastdebug/lib/libjdwp.so
#17 0x0000ffff91873a90 in JvmtiExport::post_thread_start(JavaThread*) () from /opt/mach5/mesos/work_dir/jib-master/install/jdk-22+14-966/linux-aarch64-debug.jdk/jdk-22/fastdebug/lib/server/libjvm.so
#18 0x0000ffff915b4884 in JavaThread::run() () from /opt/mach5/mesos/work_dir/jib-master/install/jdk-22+14-966/linux-aarch64-debug.jdk/jdk-22/fastdebug/lib/server/libjvm.so
...

Each of these threads has enqueued a ThreadStartEvent to be sent to the debugger and are awaiting completion of the event being sent. The test sets up a ThreadStartRequest using the SUSPEND_ALL policy. There is likely a 4th thread for which the event has been sent, resulting in a SUSPEND_ALL that is causing these other 3 threads to have to wait for threads to be resumed before they in turn send their ThreadStartEvent and do a SUSPEND_ALL.

The following on the debugger side of the test is suspicious:

        // create request for ThreadStart event
        int requestID = createThreadStartEventRequest();

        // force debuggee start new thread
        pipe.println(forceEarlyReturn002a.COMMAND_START_NEW_THREAD);

        // receive ThreadStart event
        EventPacket eventPacket = receiveSingleEvent(JDWP.EventKind.THREAD_START, requestID);
        ... <process packet>

        clearRequest(JDWP.EventKind.THREAD_START, requestID);

        debuggee.resume();

After this the test starts doing exit code, which involves sending the ""quit"" command. One problem here is that although the test is requesting that the debuggee create a specific thread, that doesn't prevent the creation of other threads we normally seeing on startup such as for the Common-Cleaner thread. Since this test run is also being running with the virtual thread wrapper enabled, probably there are also many carrier threads being started.

The first THREAD_START event may not even be for the requested thread. That's not really an issue for the test, but what is an issues is that other THREAD_START events might be queued up on the debuggee side. The test does a vm.resume(). That unblocks all the threads trying to send a THREAD_START event. One of them will win out, do a SUSPEND_All and now all threads are suspended and the debuggee can't process the quit command. Meanwhile the debugger side it is just waiting the debuggee to respond to the ""quit"" command (see TestDebuggerType1.quitDebugee()).

In order to unstick the debuggee, the debugger will need to issue one debuggee.resume() per outstanding THREAD_START event, but without reading in all the outstanding events, it doesn't know how many to do. So that means repeated calls to the following:

            EventPacket eventPacket = debuggee.getEventPacket();

But I believe this will block if there are no outstanding packets. However, it looks like there is a version that takes a timeout, so that can be used instead. It will return an empty packet if there is a transport timeout. This will result in an PacketFormatException when trying to access the EventPacket, so I guess we just need to keep fetching packets until this exception is thrown.

;;;","2023-08-31 16:49;cjplummer;See JDK-8286789 for a recent attempt to fix this issue. The suspect was the potential infinite loop but that does not appear to be the case.;;;","2023-08-31 19:13;amenkov;[~cjplummer] Great analysis!
And the test does not check name of the started thread as it does for other testcases.
I was confused seeing ""Received signal from debugee: ready"", but now realized that debugee write it after it completes ""startNewThread"" command, i.e. before THREAD_START event is generated.
To solve the issue we can use ThreadOnly modifier and request THREAD_START event for the thread with required threadID (need to create Thread object in advance to get its ID from debugee).;;;","2023-08-31 20:23;cjplummer;I guess you could do that. It's a bit tricky. The debuggee will need to store the Thread instance in a field or local and the debugger will need to use JDWP to fetch it.

Another option is perhaps to use SUSPEND_THREAD instead of SUSPEND_ALL. That should avoid any issues with the main debuggee thread remaining suspended when the spurious ThreadStart events come in. If you want to make sure you are doing the ForceEarlyReturn on the correct thread, you can do a name check on it. There's already an example in the code of getting the threadID for a named thread:

        long threadID = debuggee.getThreadID(AbstractDebuggeeTest.stateTestThreadName);

You just need to name the thread that is created when the COMMAND_START_NEW_THREAD command is issued so you can then lookup the threadID up by name. I think with this approach it will be ok if there are unprocessed ThreadStartEvents when the test wraps up.;;;","2023-09-06 16:50;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/15601
Date: 2023-09-06 20:02:44 +0000;;;","2023-09-06 17:30;amenkov;[~cjplummer] with SUSPEND_THREAD we can get some suspended non-test threads and this can cause unexpected side effects.
So I developed a fix with ThreadOnly modifier;;;","2023-09-21 15:25;dukebot;Changeset: 041510dc
Author:    Alex Menkov <amenkov@openjdk.org>
Date:      2023-09-21 22:24:24 +0000
URL:       https://git.openjdk.org/jdk/commit/041510dc21df36d9860f4f0048241c2cabb55ee7
;;;",,,,,,,,,,,,,,,,,,,,
(fs) Move java/nio/file/Path/Misc.java tests into java/nio/file/Path/PathOps.java,JDK-8315485,5109419,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,bpb,bpb,bpb,2023-08-31 14:45,2023-09-20 22:22,2023-10-01 09:55,2023-09-15 08:18,22,,,,,,,22,core-libs,,0,noreg-self,,,,,,,,,,,,,,,,,,,"After the Path.toRealPath sub-tests were moved to the ToRealPath test, the Misc test contains only tests for equals, hashCode, and toFile. These tests would be better moved to PathOps and then delete Misc. Also, there is some residual file system access in Misc which should have been removed.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8315241,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i32yy3:",9223372036854775807,b16,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@674604a9,,,,,,,,,"2023-09-05 15:04;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/15572
Date: 2023-09-05 21:58:11 +0000;;;","2023-09-15 08:17;dukebot;Changeset: 8dfde28b
Author:    Brian Burkhalter <bpb@openjdk.org>
Date:      2023-09-15 15:15:46 +0000
URL:       https://git.openjdk.org/jdk/commit/8dfde28b289cbb53173f0ab759156088bbaf74f1
;;;",,,,,,,,,,,,,,,,,,,,,,,,,
GenShen: Old-gen needs special attention during GLOBAL GC,JDK-8315465,5109396,Bug,Closed,JDK,JDK,software,duke,,,P3,Fixed,kdnilsen,kdnilsen,kdnilsen,2023-08-31 07:10,2023-09-14 17:55,2023-10-01 09:55,2023-09-14 17:55,,,,,,,,,hotspot,,0,amazon-interest,genshen,,,,,,,,,,,,,,,,,,"A GLOBAL concurrent GC is typically executed in response to user invocation of System.gc().  During a GLOBAL GC, we concurrently mark all of OLD and YOUNG, and perform a single mixed evacuation cycle that collects some YOUNG and some OLD.  Priority is given to collecting regions that have the most amount of garbage, whether OLD or YOUNG.  It is important to replenish the free pool quickly, especially since a GLOBAL mark cycle typically takes much longer to run than a YOUNG mark cycle, so we run the risk of running out of memory before GC has completed.

This ticket is motivated by an assert failure which drew attention to the problem that we do not expand OLD as part of a GLOBAL GC. Normally, OLD gets expanded at the end of the prior GC iff there are pending mixed-evacuation OLD region candidates to be collected.  For GLOBAL GC, we need something like one of the following:

1. Expand OLD at end of final mark but before we choose collection set, or
2. Choose the collection set without worrying about OLD or YOUNG generation sizes, and then adjust the OLD and YOUNG generation sizes after collection set has been chosen (as done for FULL GC)

Here is an excerpt of the log and reported assertion failure:
```
[552.640s][info][gc,free          ] FreeSet map legend: M:mutator_free C:collector_free O:old_collector_free H:humongous ~:retired \
old _:retired young
[552.640s][info][gc,free          ]  mutator free range [1..3180],  collector free range [3181..3916], old collector free range [35\
27..3527] allocates from left to right
[552.640s][info][gc,free          ]       0: _mMM_MMMM___M______________________M____MMM____M_M_M_MMMMM_MMMM_
[552.640s][info][gc,free          ]      64: MMM_M__M__MM_MMMM_MMM__M______________________________HHHHH__~__
[552.640s][info][gc,free          ]     128: __~~~~~~~~~~~~~~__~_________M____~~~_M__________M_M_____________
[552.640s][info][gc,free          ]     192: M____M_M_M_______M________________M________M___M_______M________
[552.640s][info][gc,free          ]     256: _____MM______________M___M______~_____M_________________M_______
[552.640s][info][gc,free          ]     320: ______________M_________________________________________________
[552.640s][info][gc,free          ]     384: ________________________________________________________________
[552.640s][info][gc,free          ]     448: __M____________________M___M______________m___M_______M_______M_
[552.640s][info][gc,free          ]     512: MM_____________mMM_________________________M_____________M_____~
[552.640s][info][gc,free          ]     576: ______________M____________________M_________________M__________
[552.640s][info][gc,free          ]     640: ___________________________________M___________HHHHHHHHHHHm____M
[552.640s][info][gc,free          ]     704: ____________________________________HHHHHHHHHHH_________________
[552.640s][info][gc,free          ]     768: _M___M_______m_MM_____M_________________________________________
[552.640s][info][gc,free          ]     832: ________M_MM___M_____M_____M_____________________M______________
[552.640s][info][gc,free          ]     896: M_______________________________________________________________
[552.640s][info][gc,free          ]     960: ________M_MMM_MM_MM_MM___M__MM____M____M_M_MM___M_MMM__M_M__M_M_
[552.640s][info][gc,free          ]    1024: ____M_M____MM_MM_M___M__M_____M__MM_M_MMM_M__MM____MM___MMM_____
[552.640s][info][gc,free          ]    1088: _M__m__MM__MM_MM_M_M_M_______M_M_M____MMM_______MMM_______M_____
[552.640s][info][gc,free          ]    1152: ________________________________________________________________
[552.640s][info][gc,free          ]    1216: ______MMm___M___________MM______M____M_M___M___M_______M___M____
[552.640s][info][gc,free          ]    1280: _MM________M_M_M_________MM__MM___M_HHHHHHHHHHHHHHHHHHHHHHHHHHHH
[552.640s][info][gc,free          ]    1344: H_____MM___M____________M_____MMM__________M______M______M_M____
[552.640s][info][gc,free          ]    1408: ______________________________M__M___M__________M__M____________
[552.640s][info][gc,free          ]    1472: ______M_MM___M______M_____M___________M__________M___MM_M____M__
[552.640s][info][gc,free          ]    1536: _____M_MMM_____M_______________________________________MMM______
[552.640s][info][gc,free          ]    1600: __M_M_M______M____________M____MM____M_______M_M________M__MM___
[552.640s][info][gc,free          ]    1664: MM_MM_M__M___M________________M__M_M__M__________________M__MMMM
[552.640s][info][gc,free          ]    1728: _________MM__M_______M__M______MM___MM_____M____________________
[552.640s][info][gc,free          ]    1792: _____M__M_____M________M______M___MM_____M__MM_M___M_MM_________
[552.640s][info][gc,free          ]    1856: ____M_________M________M____M____________M___________M__M__M____
[552.640s][info][gc,free          ]    1920: ____M___M_______________M___M____________________________M_M___M
[552.640s][info][gc,free          ]    1984: ______M___M_M___MM__M_MM______________________M_________________
[552.640s][info][gc,free          ]    2048: ______________M__________________M___M__________________________
[552.640s][info][gc,free          ]    2112: M__M___M___M____________________________________________________
[552.640s][info][gc,free          ]    2176: M__________________________________M_M__________________________
[552.640s][info][gc,free          ]    2240: ________M_______________________________________________________
[552.640s][info][gc,free          ]    2304: ________M_M___MM____MM___M_______M_____M________________________
[552.640s][info][gc,free          ]    2368: _______M________M__M_M___M_________M_____________M______________
[552.640s][info][gc,free          ]    2432: _________________M__________________M___________________________
[552.640s][info][gc,free          ]    2496: ______________________________________M_________________________
[552.640s][info][gc,free          ]    2560: _________M_MMMMMM_M_MMMM_M____MMM__M__M_MM____M_M_M___M_MM____M_
[552.640s][info][gc,free          ]    2624: ____MMM___M_M____M_M___MMMMMM_M__MM__M____M_M_M__MM_M_M_M_M__MM_
[552.640s][info][gc,free          ]    2688: ___M_____MM_____________________________________________________
[552.640s][info][gc,free          ]    2752: _________________________________________M______________________
[552.640s][info][gc,free          ]    2816: _____________________________________________M__________________
[552.640s][info][gc,free          ]    2880: _______________________________M________________________________
[552.640s][info][gc,free          ]    2944: _____________________________M___M_____________M____________M___
[552.640s][info][gc,free          ]    3008: ________________________MM_________________________________M____
[552.640s][info][gc,free          ]    3072: _______________________M__________M____M__MMM___M_______________
[552.640s][info][gc,free          ]    3136: __________________________MMMMMMMMMMMMMMMMMMMCCCCCCCCC_C________
[552.640s][info][gc,free          ]    3200: _CC_C__CC______C__________C___C_C____CCCC__C___CCC__C___________
[552.640s][info][gc,free          ]    3264: _______________________________________C__C_CC_C_CCC__CCCC______
[552.640s][info][gc,free          ]    3328: ________________________________________________________________
[552.640s][info][gc,free          ]    3392: _______________________________c________________________________
[552.640s][info][gc,free          ]    3456: __CC____c__c____________________________c_______________________
[552.640s][info][gc,free          ]    3520: _______o____________c_____c_______________________________CCCCCC
[552.640s][info][gc,free          ]    3584: CC~CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
[552.640s][info][gc,free          ]    3648: CCCCCCC_________________________________________________________
[552.640s][info][gc,free          ]    3712: ______CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC~~C~~~~~~~~~
[552.640s][info][gc,free          ]    3776: ~~~~~~~~~~~~~~~~~~~__C___~~~~~_~~~~~~~CCCCCCCCCCC_CCC______~~~~~
[552.640s][info][gc,free          ]    3840: ~~~~_~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~_______C___C________________
[552.640s][info][gc,free          ]    3904: ___CCCCCC_C~C____________~_______________________~_~__~______~__
[552.640s][info][gc,free          ]    3968: __
[552.641s][info][gc,free          ] Free: 1675M, Max: 4096K regular, 77824K humongous, Frag: 96% external, 1% internal; Used: 20866\
K, Mutator Free: 424 Collector Reserve: 761M, Max: 4096K; Used: 23335K Old Collector Reserve: 102K, Max: 102K; Used: 3994K
[552.641s][info][gc,ergo          ] GC(99) Start GC cycle (GLOBAL)
[552.641s][info][gc,start         ] GC(99) Concurrent reset
[552.641s][info][gc,task          ] GC(99) Using 4 of 8 workers for concurrent reset
[552.669s][info][gc               ] GC(99) Concurrent reset 28.332ms
[552.669s][info][safepoint,cleanup] updating inline caches, 0.0000001 secs
[552.669s][info][safepoint,cleanup] safepoint cleanup tasks, 0.0000190 secs
[552.669s][info][gc,start         ] GC(99) Pause Init Mark (GLOBAL) (unload classes)
[552.669s][info][gc,task          ] GC(99) Using 8 of 8 workers for init marking
[552.719s][info][gc               ] GC(99) Terminating old gc cycle.
[552.719s][info][gc               ] GC(99) Abandon SATB buffers
[552.719s][info][gc               ] GC(99) Cancel marking: OLD
[552.719s][info][gc               ] GC(99) Old generation transition from Marking to Idle
[552.719s][info][gc               ] GC(99) Terminating old gc cycle.
[552.719s][info][gc               ] GC(99) Cancel marking: OLD
[552.719s][info][gc,ref           ] GC(99) Clearing All SoftReferences
[552.719s][info][gc               ] GC(99) Pause Init Mark (GLOBAL) (unload classes) 50.480ms
[552.719s][info][safepoint,stats  ] ShenandoahInitMark           [            128               0 ][            24576      23060   \
50510636   50558272 ]               0
[552.719s][info][safepoint        ] Safepoint ""ShenandoahInitMark"", Time since last: 125924117 ns, Reaching safepoint: 24576 ns, Cl\
eanup: 23060 ns, At safepoint: 50510636 ns, Total: 50558272 ns
[552.720s][info][gc,start         ] GC(99) Concurrent marking roots
[552.720s][info][gc,task          ] GC(99) Using 4 of 8 workers for concurrent marking roots
[552.726s][info][gc               ] GC(99) Concurrent marking roots 6.552ms
[552.726s][info][gc,start         ] GC(99) Concurrent marking (GLOBAL) (unload classes)
[552.726s][info][gc,task          ] GC(99) Using 4 of 8 workers for concurrent marking
[552.958s][info][handshake        ] Handshake ""Shenandoah Flush SATB Handshake"", Targeted threads: 128, Executed by requesting thre\
ad: 128, Total completion time: 185983 ns
[552.958s][info][handshake        ] Handshake ""Shenandoah Flush SATB Handshake"", Targeted threads: 128, Executed by requesting thre\
ad: 128, Total completion time: 40785 ns
[552.958s][info][gc               ] GC(99) Concurrent marking (GLOBAL) (unload classes) 231.642ms
[552.958s][info][safepoint,cleanup] updating inline caches, 0.0000001 secs
[552.958s][info][safepoint,cleanup] safepoint cleanup tasks, 0.0000100 secs
[552.958s][info][gc,start         ] GC(99) Pause Final Mark (GLOBAL) (unload classes)
[552.958s][info][gc,task          ] GC(99) Using 8 of 8 workers for final marking
[552.958s][info][gc,age           ] GC(99)  - age   1: prev 1027032320 bytes, curr          0 bytes, mortality 1.00
[552.958s][info][gc,age           ] GC(99)  - age   2: prev       4520 bytes, curr          0 bytes, mortality 1.00
[552.958s][info][gc,age           ] GC(99) ----------------------------------------------------------------------------
[552.958s][info][gc,age           ] GC(99)  - age   3: prev       5784 bytes, curr          0 bytes, mortality 1.00
[553.004s][info][gc,ergo          ] GC(99) Planning to promote in place 0 humongous regions and 0 regular regions, spanning a total\
 of 0 used bytes
[553.004s][info][gc,ergo          ] GC(99) Adaptive CSet Selection for GLOBAL. Max Young Evacuation: 633M, Max Old Evacuation: 2280\
B, Actual Free: 14754M.
[553.005s][info][gc,ergo          ] GC(99) Chosen CSet evacuates young: 253K (of which at least: 87056B are to be promoted), old: 2\
272B
[553.005s][info][gc,ergo          ] GC(99) Collectable Garbage: 12941M (98%), Immediate: 12326M (93%), 3082 regions, CSet: 615M (4%\
), 154 regions
[553.005s][info][gc,ergo          ] GC(99) Evacuation Targets: YOUNG: 253K, PROMOTE: 87056B, OLD: 2272B, TOTAL: 340K

# A fatal error has been detected by the Java Runtime Environment:
#
#  Internal Error (/home/kdnilsen/github/shenandoah.ref-processor-updates-remembered-set/src/hotspot/share/gc/shenandoah/shenandoah\
Generation.cpp:397), pid=11582, tid=12127
#  assert(old_available >= old_consumed) failed: Cannot consume more than is available
#
# JRE version: OpenJDK Runtime Environment (22.0) (fastdebug build 22-internal-adhoc.kdnilsen.shenandoah.ref-processor-updates-reme\
mbered-set)
# Java VM: OpenJDK 64-Bit Server VM (fastdebug 22-internal-adhoc.kdnilsen.shenandoah.ref-processor-updates-remembered-set, mixed mo\
de, compressed oops, compressed class ptrs, shenandoah gc, linux-amd64)
# Problematic frame:
# V  [libjvm.so+0x154e04a]  ShenandoahGeneration::adjust_evacuation_budgets(ShenandoahHeap*, ShenandoahCollectionSet*, unsigned lon\
g)+0x4da
#
# No core dump will be written. Core dumps have been disabled. To enable core dumping, try ""ulimit -c unlimited"" before starting Ja\
va again
#
# An error report file with more information is saved as:
# /local/home/kdnilsen/tmp/specjbb-reference-rem-set/hs_err_pid11582.log
#
# If you would like to submit a bug report, please visit:
#   https://bugreport.java.com/bugreport/crash.jsp
#
```",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"2023-08-31 09:57;kdnilsen;hs_err_pid11582.log;https://bugs.openjdk.org/secure/attachment/105320/hs_err_pid11582.log","2023-08-31 09:57;kdnilsen;specjbb2015.jvm.log;https://bugs.openjdk.org/secure/attachment/105319/specjbb2015.jvm.log",,,,,,,,,,,,,,,,,,,,,"0|i32ysz:",9223372036854775807,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6b00f96c,,,,,,,,,"2023-08-31 07:11;kdnilsen;This is the reproducer:

#!/bin/bash                                                                                                                         

mkdir rr-trace

export _RR_TRACE_DIR=""rr-trace/$(date +%s)""

mkdir results
mkdir results/genshen
mkdir results/genshen/specjbb

COUNT=1
while true
do

echo Run $COUNT generational specjbb with 12g
>&2 echo Run $COUNT generational specjbb with 12g

~/github/shenandoah.ref-processor-updates-remembered-set/build/linux-x86_64-server-fastdebug/jdk/bin/java \
  -XX:-TieredCompilation -XX:+UseShenandoahGC -XX:ShenandoahGCMode=generational \
  -XX:+UnlockExperimentalVMOptions -XX:-ShenandoahPacing -XX:+UnlockDiagnosticVMOptions \
  -XX:-ShenandoahUncommit -Xms12g -Xms12g  \
  -javaagent:$HOME/lib/jHiccup-2.0.10/jHiccup.jar=-l,results/genshen/specjbb/specjbb2015.jhiccup.log,-i,1000,-a \
  -Xlog:gc*=info,safepoint*=info,handshake*=info:results/genshen/specjbb/specjbb2015.jvm.log::filecount=0,filesize=0 \
  -jar $HOME/lib/specjbb2015/specjbb2015.jar \
  -m composite -p $HOME/lib/specjbb2015/config/specjbb2015.props -raw $HOME/lib/specjbb2015/config/template-C.raw \
  >trial.$COUNT.out 2>trial.$COUNT.err

  EXIT_CODE=$?
  if [[ ""${EXIT_CODE}"" != ""0"" && ""${EXIT_CODE}"" != ""95"" ]]
  then
    echo ""${COUNT} rr has recorded a crash (${EXIT_CODE}) in ${_RR_TRACE_DIR}/latest-trace""
    exit 1
  else
    echo ""${COUNT} rr has not recorded a crash""
    rm -fr $_RR_TRACE_DIR
    rm trial.$COUNT.out trial.$COUNT.err
    mv results/genshen/extremem-hunt/balance.jvm.log results/genshen/extremem-hunt/balance.jvm.log.$COUNT
  fi
  ((COUNT++))

done

;;;","2023-08-31 08:00;kdnilsen;Here's my analysis of what went wrong:

1. At end of GC(98), the Old Collector Reserve had 102K.  Region size is 4M.  There is a single old-collector region that has this much memory available (region ~3530)
2. In final_mark, we call prepare_regions_and_co0llection_set().  This calls compute_evacuation_budgets()
    a. we set maximum_old_evacuation_reserve to 102k (old_generation->available())
    b. Since old_heuristics->unprocessed_old_collection_candidates() == 0, we set old_evacuation_reserve to 0, old_promo_reserve to maximum_old_evacuation_reserve
    c. old_free_regions is 0
    d. old_free_unfragmented is 0
    e. Since old_evacuation_reserve > old_free_unfragmented, we set old_evacuation_reserve to 0 and old_promo_reserve to maximum_old_evacuation_reserve (102k)
    f. We call select_aged_regions() with promotion budget of 102k.  From the GC log, we see that 87,056 bytes are to be promoted.  Note that consumed_by_advance_promotion is 87,056 * 1.2 (ShenandoahPromoEvacWaste), which equals 104,467.2.  102k is 104,448.  It would appear that we preselected more than was budgeted, but appearances may be deceiving.  102k is a rounded representation of the budget.
    g. We set_old_evac_reserve to zero
    h. We set_promoted_reserve to 104,467
3. Upon return from compute_evacuation_budgets(), we call choose_collection_set()
4. Upon return from choose_collection_set(), we call adjust_evacuation_budgets.  In here, we should find that:
    a. old_evacuated is zero (because old_evac_reserve was zero)
    b. old_evacuated_committed is zero
    c. old_evacuation_reserve is still zero    
    d. Neither of the two tests should succeed, so we should make no adjustments to old_evacuated_committed or old_evac_reserve
    e. young_advance_promoted should equal 87,056
    f. young_advance_promoted_reserve_used should equal 104,467
   g. old_consumed should equal 104,467
   h. old_available >= old_consumed assertion fails  (so (102k) really is smaller than 104,467)

It appears that the computations were all valid. The problem is due to round-off errors when preselecting aged regions to be promoted.

We need to precede this assert with code that is similar to what is already present:

  if (young_advance_promoted_reserve > old->available - old_evacuated_reserve_used) {
    // this is presumably a round off error.  
    assert(round-off is no more than 3.125%)
    truncate downward
 };;;","2023-08-31 09:57;kdnilsen;I've attached gc log and hs_err files.;;;","2023-09-01 09:00;kdnilsen;I have not been able to reproduce this problem after 24 hours of running the reproducer workload with some additional instrumentation to confirm the root cause.  The reproducer continues to run.  Meanwhile, I will do a bit more theoretical analysis to confirm my understanding of the issue.

1. When maximum_old_evacuation_reserve is reported as 102K, this could mean anything from 104,448 bytes to 105,471 bytes
2. The question:
      is there a set of region live memory sizes s1, s2, ... sN such that sum of (si * 1.2) < Budget and (sum of (si)) * 1.2 > Budget, where 104,448 <= Budget < 105,472, and sum of si == 85,056, and all integer arithmetic truncates down.
    a. We know that sum of (si) == 87,056, so (sum of (si) * 1.2) == 104,467, which violates the budget (we know this because we got an assert failure)
    b. Suppose the budget is 104,466
    c. Suppose the individual region sizes are 40,039 (consumes 48,046) and 40,039 (consumes 48,046) and 6,978 (consumes 8,373).  The total consumption is 104,465, which is within the budget.
3. This example demonstrates how the assertion can be violated.  How hard I had to work to contrive the example demonstrates why this error is so difficult to reproduce.;;;","2023-09-14 17:55;kdnilsen;The two subtasks have each been resolved.;;;",,,,,,,,,,,,,,,,,,,,,,
Erroneous AST missing modifiers for partial input,JDK-8315452,5109383,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,jlahoda,jlahoda,jlahoda,2023-08-31 04:31,2023-09-12 11:22,2023-10-01 09:55,2023-09-04 02:17,21,,,,,,,22,tools,,0,jdk21u-fix-request,jdk21u-fix-SQE-ok,jdk21u-fix-yes,,,,,,,,,,,,,,,,,"Consider code like:
---
package test;
public
---

The CompilationUnitTree for this (obviously erroneous) code used to contain an ErroneousTree, holding the modifiers contains ""public"".

After JDK-8305671, the modifiers are simply thrown away, and are lost, which is causing issues to some Trees API clients.
",,,,,,,,,,,,JDK-8315746,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8305671,,,,,,,,,,,,,,,,,,,,,,,,,"0|i32yq3:",9223372036854775807,b14,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4dca67bd,,,,,,,,,"2023-08-31 07:32;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/15517
Date: 2023-08-31 14:25:43 +0000;;;","2023-09-04 02:17;dukebot;Changeset: 84425a62
Author:    Jan Lahoda <jlahoda@openjdk.org>
Date:      2023-09-04 09:14:16 +0000
URL:       https://git.openjdk.org/jdk/commit/84425a62904f84601affc9710eefece88665374a
;;;","2023-09-04 03:47;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk21u/pull/131
Date: 2023-09-04 10:40:44 +0000;;;","2023-09-04 06:05;jlahoda;Fix Request

The AST javac uses for certain broken source code has changed and is not ideal for clients that use the model. This fix should revert the AST to the original form. The fix is very limited, and should not have broad impact. Standard javac tests are passing.;;;",,,,,,,,,,,,,,,,,,,,,,,
8314748 causes crashes in x64 builds,JDK-8315445,5109375,Bug,Resolved,JDK,JDK,software,duke,,,P1,Fixed,aph,stefank,stefank,2023-08-31 02:44,2023-09-15 05:46,2023-10-01 09:55,2023-08-31 05:52,22,,,,,,,22,hotspot,,0,noreg-build,oracle-triage-17,oracle-triage-21,oracle-triage-22,regression,tier1,tier2,,,,,,,,,,,,,"The crash happens during this phase:
[2023-08-31T08:51:27,258Z] Optimizing the exploded image

This is the failure mode:
```
#  Internal Error (src/hotspot/cpu/x86/macroAssembler_x86.cpp:2755), pid=20045, tid=20157
#  assert(rscratch != noreg || always_reachable(src)) failed: missing
#
# JRE version: OpenJDK Runtime Environment (22.0+14) (fastdebug build 22-ea+14-963)
# Java VM: OpenJDK 64-Bit Server VM (fastdebug 22-ea+14-963, mixed mode, tiered, compressed oops, compressed class ptrs, g1 gc, linux-amd64)
# Problematic frame:
# V  [libjvm.so+0x12f17b9]  MacroAssembler::evmovdquq(XMMRegister, AddressLiteral, int, Register)+0x1a9
```
```
Command Line: -Xms64M -Xmx1600M --add-exports=java.base/jdk.internal.module=ALL-UNNAMED build.tools.jigsaw.AddPackagesAttribute <...>/build/linux-x64-open-debug/jdk
```
```
Stack: [0x000014d2c8211000,0x000014d2c8311000],  sp=0x000014d2c830c6e0,  free space=1005k
Native frames: (J=compiled Java code, j=interpreted, Vv=VM code, C=native code)
V  [libjvm.so+0x12f17b9]  MacroAssembler::evmovdquq(XMMRegister, AddressLiteral, int, Register)+0x1a9  (macroAssembler_x86.cpp:2755)
V  [libjvm.so+0x16b2220]  StubGenerator::aesctr_encrypt(Register, Register, Register, Register, Register, Register, Register, Register)+0x9d0  (stubGenerator_x86_64_aes.cpp:2134)
V  [libjvm.so+0x16b4e6f]  StubGenerator::generate_counterMode_VectorAESCrypt()+0x1ff  (stubGenerator_x86_64_aes.cpp:312)
V  [libjvm.so+0x16ba620]  StubGenerator::generate_aes_stubs()+0xe0  (stubGenerator_x86_64_aes.cpp:171)
V  [libjvm.so+0x16a2bf4]  StubGenerator::generate_compiler_stubs()+0x364  (stubGenerator_x86_64.cpp:4087)
V  [libjvm.so+0x16a38f8]  StubGenerator_generate(CodeBuffer*, StubCodeGenerator::StubsKind)+0x118  (stubGenerator_x86_64.cpp:4259)
V  [libjvm.so+0x16efd58]  initialize_stubs(StubCodeGenerator::StubsKind, int, int, char const*, char const*, char const*)+0x138  (stubRoutines.cpp:236)
V  [libjvm.so+0x16f19a9]  compiler_stubs_init(bool)+0xa9  (stubRoutines.cpp:273)
V  [libjvm.so+0x848f3e]  C2Compiler::init_c2_runtime()+0x9e  (c2compiler.cpp:80)
V  [libjvm.so+0x8490f5]  C2Compiler::initialize()+0x35  (c2compiler.cpp:100)
V  [libjvm.so+0x9f45b5]  CompileBroker::init_compiler_runtime()+0xd5  (compileBroker.cpp:1755)
V  [libjvm.so+0x9fad09]  CompileBroker::compiler_thread_loop()+0x119  (compileBroker.cpp:1892)
V  [libjvm.so+0xeb635c]  JavaThread::thread_main_inner()+0xcc  (javaThread.cpp:720)
V  [libjvm.so+0x17a1fea]  Thread::call_run()+0xba  (thread.cpp:220)
V  [libjvm.so+0x14a175a]  thread_native_entry(Thread*)+0x12a  (os_linux.cpp:785)
Registers:
RAX=0x000014d2e49ee000, RBX=0x000014d2c830dc60, RCX=0x000014d2e371110f, RDX=0x000014d2e37a55d8
RSP=0x000014d2c830c6e0, RBP=0x000014d2c830c7b0, RSI=0x0000000000000ac3, RDI=0x000014d2e388d0c0
R8 =0x0000000000000003, R9 =0x000014d2dc2dd270, R10=0x0000000000000049, R11=0x0000000000000001
R12=0x000014d2dc2dd270, R13=0x00000000ffffffff, R14=0x000014d2c830c730, R15=0x0000000000000002
RIP=0x000014d2e2fa67b9, EFLAGS=0x0000000000010246, CSGSFS=0x002b000000000033, ERR=0x0000000000000006
  TRAPNO=0x000000000000000e
```",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8314748,,,,,,,,,,,,,,,,,,,,,,,,,"0|i32yob:",9223372036854775807,b14,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2023-08-31 04:06;chagedorn;ILW = Build failure on x86_64, debug builds only and x64, no workaround = HMH = P1;;;","2023-08-31 04:18;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/15512
Date: 2023-08-31 11:11:59 +0000;;;","2023-08-31 05:52;dukebot;Changeset: 29ff1e45
Author:    Andrew Haley <aph@openjdk.org>
Date:      2023-08-31 12:51:29 +0000
URL:       https://git.openjdk.org/jdk/commit/29ff1e45b910c07711c4f4c3d821712dd9a1e3ba
;;;",,,,,,,,,,,,,,,,,,,,,,,,
HttpsServer does not send TLS alerts,JDK-8315436,5109363,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,djelinski,djelinski,djelinski,2023-08-30 23:51,2023-09-12 11:21,2023-10-01 09:55,2023-09-01 03:23,11,17,21,22,8,,,22,core-libs,,0,,,,,,,,,,,,,,,,,,,,"Whenever the HttpsServer encounters a TLS problem, it closes the TCP connection without sending an alert. As a result, diagnosing such problems on the client side is harder than it needs to be. The server should send an alert before closing the connection.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i32yln:",9223372036854775807,b14,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@446e124a,,,,,,,,,"2023-08-31 01:30;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/15505
Date: 2023-08-31 06:57:52 +0000;;;","2023-09-01 03:23;dukebot;Changeset: 42f5b9e7
Author:    Daniel Jeliński <djelinski@openjdk.org>
Date:      2023-09-01 10:19:53 +0000
URL:       https://git.openjdk.org/jdk/commit/42f5b9e7aacd69cad8b104ed49337cc64fc7ce7e
;;;",,,,,,,,,,,,,,,,,,,,,,,,,
Ensemble: Description text in few samples vanishes,JDK-8315424,5109351,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,arapte,arapte,arapte,2023-08-30 20:09,2023-08-30 20:19,2023-10-01 09:55,2023-08-30 20:19,internal,,,,,,,internal,javafx,,0,javafx-metal,,,,,,,,,,,,,,,,,,,"Launch Ensemble app and navigate to Area chart and move mouse on the doc links on lower right side. observe that Description text vanishes.
This is a regression of JDK-8314625.
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8314625,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i32yiz:",9223372036854775807,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4143e3f7,,,,,,,,,"2023-08-30 20:19;arapte;Reverting JDK-8314625 till we find a better solution.

Changeset: 92e48d15
Author:    Ambarish Rapte <arapte@openjdk.org>
Date:      2023-08-31 08:45:14 +0000
URL:       https://git.openjdk.org/jfx-sandbox/commit/92e48d1520d492ccf241683477449eb0250a6c61;;;",,,,,,,,,,,,,,,,,,,,,,,,,,
getSoTimeout() would be in try block in SSLSocketImpl,JDK-8315422,5109348,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,jjiang,jjiang,jjiang,2023-08-30 19:23,2023-09-12 11:20,2023-10-01 09:55,2023-08-31 15:28,11.0.15,17.0.3,20,21,openjdk8u332,,,22,security-libs,,0,amazon-interest,noreg-cleanup,tencent-interest,,,,,,,,,,,,,,,,,"The method SSLSocketImpl::closeSocket has the below code snippet,

if (appInput.readLock.tryLock()) {
    int soTimeout = getSoTimeout();
    try {
        // deplete could hang on the skip operation
        // in case of infinite socket read timeout.
        // Change read timeout to avoid deadlock.
        // This workaround could be replaced later
        // with the right synchronization
        if (soTimeout == 0)
            setSoTimeout(DEFAULT_SKIP_TIMEOUT);
        inputRecord.deplete(false);
    } catch (java.net.SocketTimeoutException stEx) {
        // skip timeout exception during deplete
    } finally {
        if (soTimeout == 0)
            setSoTimeout(soTimeout);
        appInput.readLock.unlock();
    }
}

If getSoTimeout() throws an exception, say SocketException, appInput.readLock.unlock() cannot be called.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8274524,,,,,,,,,,,,,,,,,,,,,,,,,"0|i32yib:",9223372036854775807,b14,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@39d9862,,,,,,,,,"2023-08-30 19:40;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/15503
Date: 2023-08-31 02:34:58 +0000;;;","2023-08-31 15:28;dukebot;Changeset: 2264667b
Author:    John Jiang <jjiang@openjdk.org>
Date:      2023-08-31 22:26:48 +0000
URL:       https://git.openjdk.org/jdk/commit/2264667bba2311b568257a933813fa76a9e75313
;;;","2023-09-01 01:33;shade;Seems to be introduced by JDK-8274524, which got backported to previous releases too.;;;",,,,,,,,,,,,,,,,,,,,,,,,
OutputAnalyzer.shouldMatchByLine() fails in some cases,JDK-8315415,5109338,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,lmesnik,ccheung,ccheung,2023-08-30 14:35,2023-09-25 11:26,2023-10-01 09:55,2023-09-19 09:35,,,,,,,,22,hotspot,,0,,,,,,,,,,,,,,,,,,,,"OutputAnalyzer.shouldMatchByLine() fails as follows:

java.util.regex.PatternSyntaxException: Dangling meta character '*' near index 114
[1.223s][debug][cds,class     ] klasses[  818] = 0x0000000800218758 app   LambdasWithSameKey$$Lambda/0x800000002 ** hidden

                                  ^
        at java.base/java.util.regex.Pattern.error(Pattern.java:2204)
        at java.base/java.util.regex.Pattern.sequence(Pattern.java:2379)
        at java.base/java.util.regex.Pattern.expr(Pattern.java:2245)
        at java.base/java.util.regex.Pattern.compile(Pattern.java:1945)
        at java.base/java.util.regex.Pattern.<init>(Pattern.java:1576)
        at java.base/java.util.regex.Pattern.compile(Pattern.java:1101)
        at jdk.test.lib.process.OutputAnalyzer.indexOf(OutputAnalyzer.java:759)
        at jdk.test.lib.process.OutputAnalyzer.shouldMatchByLine(OutputAnalyzer.java:726)
        at jdk.test.lib.process.OutputAnalyzer.shouldMatchByLine(OutputAnalyzer.java:700)
        at LambdasInTwoArchives.checkTest(LambdasInTwoArchives.java:61)
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i32yg3:",9223372036854775807,b16,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@78d03d9a,,,,,,,,,"2023-08-30 14:38;ccheung;static final String lambdaPattern =
        "".*cds.class.*klasses.*LambdasWithSameKey[$][$]Lambda.*/0x.*hidden""

    static void checkTest(OutputAnalyzer output) throws Exception {
        String first = output.firstMatch(lambdaPattern);
        output.shouldMatchByLine(first, null, lambdaPattern);
    }

Failure was observed with usage like the above.
The String ""first"" was set to: ""[1.223s][debug][cds,class ] klasses[ 818] = 0x0000000800218758 app LambdasWithSameKey$$Lambda/0x800000002 ** hidden""
When the ""first"" was passed to shouldMatchByLine(), the failure occurred.;;;","2023-09-14 12:50;lmesnik;I verified that all existing tests treat from and to as patterns to match. 
The only test which might treat them like lines is ./hotspot/jtreg/runtime/logging/DeoptStats.java
where the line is also a pattern.

    public static void verify(String[] logFiles) throws Exception {
	for (String logFile : logFiles) {
            OutputAnalyzer oa = new OutputAnalyzer(Paths.get(logFile));
            oa.shouldMatchByLine(""<statistics type='deoptimization'>"", // Start from this line                               
                                 ""</statistics>"",                      // Match until this line                              
                                 ""(Deoptimization traps recorded:)|( .+)"");
	}
    }

So I think the safest fix would be just to update testlibrary documentation to say explicitly that from/to are patterns.;;;","2023-09-14 13:03;lmesnik;JFYI usages 
lmesnik@home:~/ws/jdk-vmTestbase/open/test$ grep -r shouldMatchByLine .
./lib-test/jdk/test/lib/process/OutputAnalyzerTest.java:            output.shouldMatchByLine(byLinePattern);
./lib-test/jdk/test/lib/process/OutputAnalyzerTest.java:            throw new Exception(""shouldMatchByLine() failed"", e);
./lib-test/jdk/test/lib/process/OutputAnalyzerTest.java:            output.shouldMatchByLine(nonExistingPattern);
./lib-test/jdk/test/lib/process/OutputAnalyzerTest.java:            throw new Exception(""shouldMatchByLine() failed to throw exception"");
./jdk/sun/tools/jcmd/TestJcmdSanity.java:        output.shouldMatchByLine(JCMD_COMMAND_REGEX,
./lib/jdk/test/lib/process/OutputAnalyzer.java:     * @see #shouldMatchByLine(String, String, String)
./lib/jdk/test/lib/process/OutputAnalyzer.java:    public OutputAnalyzer shouldMatchByLine(String pattern) {
./lib/jdk/test/lib/process/OutputAnalyzer.java:        return shouldMatchByLine(null, null, pattern);
./lib/jdk/test/lib/process/OutputAnalyzer.java:     * @see #shouldMatchByLine(String, String, String)
./lib/jdk/test/lib/process/OutputAnalyzer.java:    public OutputAnalyzer shouldMatchByLineFrom(String fromPattern, String pattern) {
./lib/jdk/test/lib/process/OutputAnalyzer.java:        return shouldMatchByLine(fromPattern, null, pattern);
./lib/jdk/test/lib/process/OutputAnalyzer.java:     * @see #shouldMatchByLine(String, String, String)
./lib/jdk/test/lib/process/OutputAnalyzer.java:    public OutputAnalyzer shouldMatchByLineTo(String toPattern, String pattern) {
./lib/jdk/test/lib/process/OutputAnalyzer.java:        return shouldMatchByLine(null, toPattern, pattern);
./lib/jdk/test/lib/process/OutputAnalyzer.java:    public OutputAnalyzer shouldMatchByLine(String fromPattern, String toPattern, String pattern) {
./lib/jdk/test/lib/process/OutputAnalyzer.java:        return shouldMatchByLine(getOutput(), fromPattern, toPattern, pattern);
./lib/jdk/test/lib/process/OutputAnalyzer.java:        return shouldMatchByLine(getStdout(), fromPattern, toPattern, pattern);
./lib/jdk/test/lib/process/OutputAnalyzer.java:    private OutputAnalyzer shouldMatchByLine(String buffer, String fromPattern, String toPattern, String pattern) {
./hotspot/jtreg/runtime/logging/DeoptStats.java:            oa.shouldMatchByLine(""<statistics type='deoptimization'>"", // Start from this line
lmesnik@home:~/ws/jdk-vmTestbase/open/test$ grep -r stdoutShouldMatchByLine
lib-test/jdk/test/lib/process/OutputAnalyzerTest.java:            output.stdoutShouldMatchByLine(stdoutByLinePattern);
lib-test/jdk/test/lib/process/OutputAnalyzerTest.java:            throw new Exception(""stdoutShouldMatchByLine() failed"", e);
jdk/sun/security/tools/jarsigner/compatibility/Compatibility.java:            verifyOA.stdoutShouldMatchByLine(
jdk/sun/tools/jcmd/TestJcmdSanity.java:        output.stdoutShouldMatchByLine(PERF_COUNTER_REGEX, null, PERF_COUNTER_REGEX);
jdk/sun/tools/jcmd/TestJcmdDefaults.java:        output.stdoutShouldMatchByLine(JCMD_LIST_REGEX);
jdk/sun/tools/jps/JpsHelper.java:        output.stdoutShouldMatchByLine(regex);
lib/jdk/test/lib/process/OutputAnalyzer.java:     * @see #stdoutShouldMatchByLine(String, String, String)
lib/jdk/test/lib/process/OutputAnalyzer.java:    public OutputAnalyzer stdoutShouldMatchByLine(String pattern) {
lib/jdk/test/lib/process/OutputAnalyzer.java:        return stdoutShouldMatchByLine(null, null, pattern);
lib/jdk/test/lib/process/OutputAnalyzer.java:    public OutputAnalyzer stdoutShouldMatchByLine(String fromPattern, String toPattern, String pattern) {
lmesnik@home:~/ws/jdk-vmTestbase/open/test$ 
;;;","2023-09-14 13:05;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/15753
Date: 2023-09-14 19:59:53 +0000;;;","2023-09-19 09:35;dukebot;Changeset: 7b1e2bfe
Author:    Leonid Mesnik <lmesnik@openjdk.org>
Date:      2023-09-19 16:33:31 +0000
URL:       https://git.openjdk.org/jdk/commit/7b1e2bfe0f805a69b59839b6bf8250b62ea356b8
;;;",,,,,,,,,,,,,,,,,,,,,,
Remove special filtering of Continuation.yield0 in StackWalker,JDK-8315413,5109335,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,mchung,mchung,mchung,2023-08-30 13:52,2023-09-18 15:42,2023-10-01 09:55,2023-08-31 09:12,21,22,,,,,,22,core-libs,,0,amazon-interest,,,,,,,,,,,,,,,,,,,"Loom added a special filtering of Continuation.yield0 in stack walker.  After the initial implementation, JDK-8304919 marks the yielding and entering methods with `@Hidden` and hidden frames are filtered by stack walker by default.

With `@Hidden` the special filtering should not be needed.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8316456,,,,,,,,,,,,,,,,,,,,,,,,,"0|i32yff:",9223372036854775807,b14,,,,,,,,,,,"2023-08-30 14:30;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/15498
Date: 2023-08-30 20:57:43 +0000;;;","2023-08-31 09:12;dukebot;Changeset: c8acab1d
Author:    Mandy Chung <mchung@openjdk.org>
Date:      2023-08-31 16:11:03 +0000
URL:       https://git.openjdk.org/jdk/commit/c8acab1d913a6c676706fce7ad98a7f831a95682
;;;",,,,,,,,,,,,,,,,,,,,,,,,,
Undocumented exceptions in java.text.StringCharacterIterator,JDK-8315410,5109330,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,jlu,jlu,jlu,2023-08-30 12:57,2023-09-13 22:41,2023-10-01 09:55,2023-09-08 16:07,,,,,,,,22,core-libs,,0,noreg-doc,,,,,,,,,,,,,,,,,,,Conformance issue. Multiple undocumented exceptions within the public class.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8315558,,,,,,,,,,,,,,,,,,,,,,,,generic,,,,,,,,,generic,,,,,"0|i32yeb:",9223372036854775807,b15,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6fc9e792,,,,,,,,,"2023-09-05 09:11;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/15547
Date: 2023-09-01 23:12:28 +0000;;;","2023-09-08 16:07;dukebot;Changeset: 9b0da489
Author:    Justin Lu <jlu@openjdk.org>
Date:      2023-09-08 23:05:00 +0000
URL:       https://git.openjdk.org/jdk/commit/9b0da4891527cb426093266d53e1c4e80a48376d
;;;",,,,,,,,,,,,,,,,,,,,,,,,,
Fix jfx-tests so they work with latest jfx build,JDK-8315409,5109329,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,shurailine,kcr,kcr,2023-08-30 12:47,2023-09-08 09:36,2023-10-01 09:55,2023-09-06 10:10,jfx21,,,,,,,jfx22,javafx,,0,noreg-self,testbug,,,,,,,,,,,,,,,,,,"Various fixes are needed in the jfx-tests repo to make it work with the recent jfx builds. These include build changes, fixes in JemmyFX, and fixes in the tests themselves.

",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8315809,,,,,,,,,,,,,,,,,,,,,,,,,"0|i32ye3:",9223372036854775807,inapplicable,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@1d1c7815,,,,,,,,,"2023-08-31 13:28;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jfx-tests/pull/1
Date: 2023-08-31 20:22:09 +0000;;;","2023-09-06 10:10;roboduke;Changeset: 9a7df0b5
Author:    Alexandre Iline <shurailine@openjdk.org>
Date:      2023-09-06 17:10:16 +0000
URL:       https://git.openjdk.org/jfx-tests/commit/9a7df0b57cb8ce035b3221a24a20d62d049c7090
;;;",,,,,,,,,,,,,,,,,,,,,,,,,
[REDO] serviceability/jdwp/AllModulesCommandTest.java ignores VM flags,JDK-8315406,5109326,Bug,Resolved,JDK,JDK,software,duke,,,P2,Fixed,lmesnik,dcubed,dcubed,2023-08-30 12:27,2023-09-12 11:25,2023-10-01 09:55,2023-09-05 17:04,22,,,,,,,22,core-svc,,0,regression,tier3,,,,,,,,,,,,,,,,,,"The following test failed in the JDK22 CI:

serviceability/jdwp/AllModulesCommandTest.java

Here's a snippet from the log file:

#section:main
----------messages:(7/376)----------
command: main AllModulesCommandTest
reason: User specified action: run main/othervm AllModulesCommandTest 
started: Wed Aug 30 18:26:23 UTC 2023
Mode: othervm [/othervm specified]
Additional options from @modules: --add-modules jdk.jdwp.agent,java.base --add-exports java.base/jdk.internal.misc=ALL-UNNAMED
finished: Wed Aug 30 18:26:24 UTC 2023
elapsed time (seconds): 1.024
----------configuration:(4/111)----------
Boot Layer
  add modules: jdk.jdwp.agent java.base    
  add exports: java.base/jdk.internal.misc ALL-UNNAMED

----------System.out:(1/1676)----------
Command line: [/opt/mach5/mesos/work_dir/jib-master/install/jdk-22+13-953/linux-x64-debug.jdk/jdk-22/fastdebug/bin/java -cp /opt/mach5/mesos/work_dir/slaves/cd627e65-f015-4fb1-a1d2-b6c9b8127f98-S152494/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/437eabab-8674-4947-aa94-28da6cfd6a45/runs/06e03276-18aa-45e3-95b7-d1e574b316be/testoutput/test-support/jtreg_open_test_hotspot_jtreg_tier1_serviceability/classes/0/serviceability/jdwp/AllModulesCommandTest.d:/opt/mach5/mesos/work_dir/jib-master/install/jdk-22+13-953/src.full/open/test/hotspot/jtreg/serviceability/jdwp:/opt/mach5/mesos/work_dir/slaves/cd627e65-f015-4fb1-a1d2-b6c9b8127f98-S152494/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/437eabab-8674-4947-aa94-28da6cfd6a45/runs/06e03276-18aa-45e3-95b7-d1e574b316be/testoutput/test-support/jtreg_open_test_hotspot_jtreg_tier1_serviceability/classes/0/test/lib:/opt/mach5/mesos/work_dir/jib-master/install/jdk-22+13-953/src.full/open/test/lib:/opt/mach5/mesos/work_dir/jib-master/install/jtreg/7.3.1/1/bundles/jtreg-7.3.1+1.zip/jtreg/lib/jtreg.jar -XX:MaxRAMPercentage=4.16667 -Dtest.boot.jdk=/opt/mach5/mesos/work_dir/jib-master/install/jdk/20/36/bundles/linux-x64/jdk-20_linux-x64_bin.tar.gz/jdk-20 -Djava.io.tmpdir=/opt/mach5/mesos/work_dir/slaves/cd627e65-f015-4fb1-a1d2-b6c9b8127f98-S152494/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/437eabab-8674-4947-aa94-28da6cfd6a45/runs/06e03276-18aa-45e3-95b7-d1e574b316be/testoutput/test-support/jtreg_open_test_hotspot_jtreg_tier1_serviceability/tmp -Xshare:off -showversion -agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=0 AllModulesCommandTestDebuggee ]
----------System.err:(4/222)----------
java version ""22-ea"" 2024-03-19
Java(TM) SE Runtime Environment (fastdebug build 22-ea+13-953)
Java HotSpot(TM) 64-Bit Server VM (fastdebug build 22-ea+13-953, mixed mode)
Debuggee error: 'java version ""22-ea"" 2024-03-19'
----------rerun:(38/7357)*----------

<snip>

result: Failed. Unexpected exit from test [exit code: 1]


The failing test was modified by the following fix:

JDK-8314834 serviceability/jdwp/AllModulesCommandTest.java ignores VM flags

so I've labeled this bug as a regression.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8314834,,,,,,,,,,,,,,,generic,,,,,,,,,generic,,,,,"0|i32ydf:",9223372036854775807,b14,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@3397f701,,,,,,,,,"2023-08-30 12:30;dcubed;[~lmesnik] - This looks like a regression caused by JDK-831483. Please take a look as quickly as you can!;;;","2023-08-30 12:38;cjplummer;The test run is passing the flags ""-Xshare:off -showversion"". The presence of the version in the output seems to be messing up the test, which is probably looking for something like ""listening on port..."" in the output.

    Debuggee error: 'java version ""22-ea"" 2024-03-19';;;","2023-08-30 14:29;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/15499
Date: 2023-08-30 21:03:17 +0000;;;","2023-09-01 11:46;dcubed;[~lmesnik] - This bug should have been converted into the [BACKOUT] bug and a new
[REDO] bug filed. Then this bug could be converted into a sub-task of the [REDO].

However, since a separate [BACKOUT] bug was filed and integrated, I have made it:

    JDK-8315421 [BACKOUT] 8314834 serviceability/jdwp/AllModulesCommandTest.java ignores VM flags

a sub-task of this bug and I have converted this bug into the [REDO] bug.

See: https://openjdk.java.net/guide/#backing-out-a-change;;;","2023-09-01 13:44;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/15544
Date: 2023-09-01 20:38:28 +0000;;;","2023-09-05 17:04;dukebot;Changeset: 5cbff246
Author:    Leonid Mesnik <lmesnik@openjdk.org>
Date:      2023-09-06 00:02:54 +0000
URL:       https://git.openjdk.org/jdk/commit/5cbff2460812fee707f9d96ab00a628d1ce3fbef
;;;",,,,,,,,,,,,,,,,,,,,,
jlink SystemModulesPlugin incorrectly parses the options,JDK-8315383,5109301,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,mchung,mchung,mchung,2023-08-30 09:07,2023-09-12 11:19,2023-10-01 09:55,2023-08-31 09:12,21.0.1,22,,,,,,22,tools,,0,jdk21u-fix-request,jdk21u-fix-SQE-ok,jdk21u-fix-yes,,,,,,,,,,,,,,,,,"A bug in the jlink SystemModulesPlugin in parsing the ""batch-size"" option

diff --git a/src/jdk.jlink/share/classes/jdk/tools/jlink/internal/plugins/SystemModulesPlugin.java
b/src/jdk.jlink/share/classes/jdk/tools/jlink/internal/plugins/SystemModulesPlugin.java
index 77ba8c063e8..ff55f812d91 100644
--- a/src/jdk.jlink/share/classes/jdk/tools/jlink/internal/plugins/SystemModulesPlugin.java
+++ b/src/jdk.jlink/share/classes/jdk/tools/jlink/internal/plugins/SystemModulesPlugin.java
@@ -148,7 +148,7 @@ public void configure(Map<String, String> config) {
             if (split.length != 2) {
                 throw new IllegalArgumentException(getName() + "": "" + arg);
             }
-            if (split[0].equals(""batch-size"")) {
+            if (!split[0].equals(""batch-size"")) {
                 throw new IllegalArgumentException(getName() + "": "" + arg);
             }
             this.moduleDescriptorsPerMethod = Integer.parseInt(split[1]);
diff --git a/test/jdk/tools/jlink/JLinkDedupTestBatchSizeOne.java
b/test/jdk/tools/jlink/JLinkDedupTestBatchSizeOne.java
index a8c8010ab3e..11a9e40b5b3 100644
--- a/test/jdk/tools/jlink/JLinkDedupTestBatchSizeOne.java
+++ b/test/jdk/tools/jlink/JLinkDedupTestBatchSizeOne.java
@@ -94,7 +94,7 @@ public static void main(String[] args) throws Throwable {
                 .addMods(""m2"")
                 .addMods(""m3"")
                 .addMods(""m4"")
-                .option(""--system-modules=batchSize=1"")
+                .option(""--system-modules=batch-size=1"")
                 .call()
                 .assertSuccess();",,,,,,,,,,,,JDK-8315703,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8240567,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i32y7v:",9223372036854775807,b14,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@3da653bd,,,,,,,,,"2023-08-30 12:17;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/15495
Date: 2023-08-30 19:07:53 +0000;;;","2023-08-31 09:12;dukebot;Changeset: ea5aa61c
Author:    Oliver Kopp <kopp.dev@gmail.com>
Committer: Mandy Chung <mchung@openjdk.org>
Date:      2023-08-31 16:10:44 +0000
URL:       https://git.openjdk.org/jdk/commit/ea5aa61c8cc5caa04f7c7eac9634df28011581dc
;;;","2023-09-01 09:41;mchung;JDK 21u Fix Request

jlink --system-modules option takes `batch-size=<N>` option which is incorrectly checked if it's valid option.  While the `batch-size` option is seldom used, it's good to fix this trivial bug in 21u.   One line fix and low risk.;;;","2023-09-01 10:20;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk21u/pull/126
Date: 2023-09-01 17:12:39 +0000;;;","2023-09-01 10:38;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk21u/pull/127
Date: 2023-09-01 17:33:10 +0000;;;",,,,,,,,,,,,,,,,,,,,,,
C2: assert(u->find_out_with(Op_AddP) == nullptr) failed: more than 2 chained AddP nodes?,JDK-8315377,5109295,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,roland,chagedorn,chagedorn,2023-08-30 07:22,2023-09-18 23:10,2023-10-01 09:55,2023-09-06 00:26,17,21,22,,,,,22,hotspot,,0,c2,javafuzzer,oracle-triage-22,,,,,,,,,,,,,,,,,"The attached Java Fuzzer test starts to fail after JDK-8303466 (seems unrelated and must have just revealed an existing issue):

To reproduce:

$ java -Xcomp -XX:-TieredCompilation -XX:CompileCommand=compileonly,Test::* Test.java
$ java -Xcomp -XX:-TieredCompilation -XX:CompileOnly=Reduced::test Reduced.java

#
# A fatal error has been detected by the Java Runtime Environment:
#
#  Internal Error (/opt/mach5/mesos/work_dir/slaves/cd627e65-f015-4fb1-a1d2-b6c9b8127f98-S141865/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/8a11c2a6-dc3b-42a8-a1bf-5f4afa468e45/runs/9fc53209-cfb4-45ef-bad1-2b89080d866c/workspace/open/src/hotspot/share/opto/loopopts.cpp:1714), pid=3134144, tid=3134158
#  assert(u->find_out_with(Op_AddP) == nullptr) failed: more than 2 chained AddP nodes?
#
# JRE version: Java(TM) SE Runtime Environment (22.0) (fastdebug build 22-internal-2023-08-25-1459578.christian.hagedorn.jdk)
# Java VM: Java HotSpot(TM) 64-Bit Server VM (fastdebug 22-internal-2023-08-25-1459578.christian.hagedorn.jdk, compiled mode, sharing, compressed oops, compressed class ptrs, g1 gc, linux-amd64)
# Problematic frame:
# V  [libjvm.so+0x12aeb03]  PhaseIdealLoop::try_sink_out_of_loop(Node*)+0xc53
..........
Command Line: -XX:CompileCommand=quiet -XX:-TieredCompilation -Xcomp -XX:CompileOnly=Test::* Test
..........
Current CompileTask:
C2:    234    6   !b        Test::lMeth1 (341 bytes)

Stack: [0x00007f76cd233000,0x00007f76cd333000],  sp=0x00007f76cd32dc10,  free space=1003k
Native frames: (J=compiled Java code, j=interpreted, Vv=VM code, C=native code)
V  [libjvm.so+0x12aeb03]  PhaseIdealLoop::try_sink_out_of_loop(Node*)+0xc53  (loopopts.cpp:1714)
V  [libjvm.so+0x12aed57]  PhaseIdealLoop::split_if_with_blocks_post(Node*)+0xe7
V  [libjvm.so+0x12af677]  PhaseIdealLoop::split_if_with_blocks(VectorSet&, Node_Stack&)+0x97
V  [libjvm.so+0x12a34ef]  PhaseIdealLoop::build_and_optimize()+0xf9f
V  [libjvm.so+0x9ef5d9]  PhaseIdealLoop::optimize(PhaseIterGVN&, LoopOptsMode)+0x3b9
V  [libjvm.so+0x9eab1f]  Compile::Optimize()+0xdaf
V  [libjvm.so+0x9ee3a0]  Compile::Compile(ciEnv*, ciMethod*, int, Options, DirectiveSet*)+0x1bb0
V  [libjvm.so+0x84949b]  C2Compiler::compile_method(ciEnv*, ciMethod*, int, bool, DirectiveSet*)+0x13b
V  [libjvm.so+0x9fa2b7]  CompileBroker::invoke_compiler_on_method(CompileTask*)+0x977
V  [libjvm.so+0x9faff8]  CompileBroker::compiler_thread_loop()+0x5f8
V  [libjvm.so+0xeb65cc]  JavaThread::thread_main_inner()+0xcc
V  [libjvm.so+0x17a09fa]  Thread::call_run()+0xba
V  [libjvm.so+0x149fe9a]  thread_native_entry(Thread*)+0x12a",,,,,,,,,,,,JDK-8316489,JDK-8316409,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8252372,,,,JDK-8267988,,,"2023-08-30 07:19;chagedorn;FuzzerUtils.java;https://bugs.openjdk.org/secure/attachment/105300/FuzzerUtils.java","2023-08-30 07:21;chagedorn;Reduced.java;https://bugs.openjdk.org/secure/attachment/105298/Reduced.java","2023-08-30 07:19;chagedorn;Test.java;https://bugs.openjdk.org/secure/attachment/105301/Test.java","2023-08-30 07:21;chagedorn;hs_err_pid3134144.log;https://bugs.openjdk.org/secure/attachment/105299/hs_err_pid3134144.log",,,,,,,,,,,,,,,,,,,"0|i32y6j:",9223372036854775807,b14,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2023-08-30 07:24;chagedorn;ILW = Assertion failure when trying to sink a node in Split If, single Java Fuzzer test, use -XX:-SplitIfBlocks = HLM = P3;;;","2023-08-30 07:26;chagedorn;Hi [~roland], would you like to have a look?;;;","2023-09-04 09:11;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/15562
Date: 2023-09-04 15:51:34 +0000;;;","2023-09-06 00:26;dukebot;Changeset: ba1a4639
Author:    Roland Westrelin <roland@openjdk.org>
Date:      2023-09-06 07:25:22 +0000
URL:       https://git.openjdk.org/jdk/commit/ba1a46392f0b9c77c64278f82513aaf51f5c9b1b
;;;",,,,,,,,,,,,,,,,,,,,,,,
[JVMCI] failure to attach to a libgraal isolate during shutdown should not be fatal,JDK-8315369,5109286,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,dnsimon,dnsimon,dnsimon,2023-08-30 05:43,2023-09-15 05:46,2023-10-01 09:55,2023-09-04 03:21,21,22,,,,,,22,hotspot,,0,jdk21-graalvm,jvmci,oracle-triage-17,oracle-triage-22,,,,,,,,,,,,,,,,"<internal:core> core/errno.rb:48:in `handle': Too many open files - socket(2) (Errno::EMFILE)
	from /home/chaeubl/feature/graal/sdk/mxbuild/linux-amd64/GRAALVM_RUBY_JAVA21/graalvm-ruby-openjdk-21+35.1/languages/ruby/lib/truffle/socket/socket.rb:318:in `initialize'
	from -e:1:in `block in <main>'
	from <internal:core> core/kernel.rb:414:in `<unknown>'
	from <internal:core> core/kernel.rb:409:in `loop'
	from -e:1:in `<main>'
#
# A fatal error has been detected by the Java Runtime Environment:
#
#  Internal Error (jvmciEnv.cpp:257), pid=138577, tid=138577
#  fatal error: Error attaching current thread (main) to JVMCI shared library JNI interface
#
# JRE version: OpenJDK Runtime Environment GraalVM CE 21-dev+35.1 (21.0+35) (build 21+35-jvmci-23.1-b14)
# Java VM: OpenJDK 64-Bit Server VM GraalVM CE 21-dev+35.1 (21+35-jvmci-23.1-b14, mixed mode, sharing, tiered, jvmci, jvmci compiler, compressed oops, compressed class ptrs, g1 gc, linux-amd64)
# Problematic frame:
# V  [libjvm.so+0xa2bfe8]
#
# Core dump will be written. Default location: core.138577 (may not exist)
#
# Can not save log file, dump to screen..
#
# A fatal error has been detected by the Java Runtime Environment:
#
#  Internal Error (jvmciEnv.cpp:257), pid=138577, tid=138577
#  fatal error: Error attaching current thread (main) to JVMCI shared library JNI interface
#
# JRE version: OpenJDK Runtime Environment GraalVM CE 21-dev+35.1 (21.0+35) (build 21+35-jvmci-23.1-b14)
# Java VM: OpenJDK 64-Bit Server VM GraalVM CE 21-dev+35.1 (21+35-jvmci-23.1-b14, mixed mode, sharing, tiered, jvmci, jvmci compiler, compressed oops, compressed class ptrs, g1 gc, linux-amd64)
# Problematic frame:
# V  [libjvm.so+0xa2bfe8]
#

Native frames: (J=compiled Java code, j=interpreted, Vv=VM code, C=native code)
V  [libjvm.so+0xa2bfe8]  JVMCIEnv::init_env_mode_runtime(JavaThread*, JNIEnv_*, bool)
V  [libjvm.so+0xa662b2] JVMCIRuntime::shutdown()
V  [libjvm.so+0x9d7c5c] JVMCI::shutdown(JavaThread*)
V  [libjvm.so+0x8dbba0] before_exit(JavaThread*, bool)
V  [libjvm.so+0x9ad44c]  JVM_Halt+0x6c
j  java.lang.Shutdown.halt0(I)V+0 java.base@21
j  java.lang.Shutdown.halt(I)V+7 java.base@21
j  java.lang.Shutdown.exit(I)V+16 java.base@21
j  java.lang.Runtime.exit(I)V+14 java.base@21
j  java.lang.System.exit(I)V+4 java.base@21
j  org.truffleruby.launcher.RubyLauncher.launch(Lorg/graalvm/polyglot/Context$Builder;)V+25 org.graalvm.ruby.launcher
j  org.graalvm.launcher.AbstractLanguageLauncher.launch(Ljava/util/List;Ljava/util/Map;Z)V+212 org.graalvm.launcher
j  org.graalvm.launcher.AbstractLanguageLauncher.launch([Ljava/lang/String;)V+14 org.graalvm.launcher
j  org.graalvm.launcher.AbstractLanguageLauncher.runLauncher([[BIJZ)V+123 org.graalvm.launcher
v  ~StubRoutines::call_stub 0x00007f9d08e76cc6
V  [libjvm.so+0x8dd7e5]
V  [libjvm.so+0x983da0]
V  [libjvm.so+0x986817]
C  [ruby+0x4783a]
C  [ruby+0x45092]
C  [ruby+0x449f1]

HotSpot wants to do an orderly shutdown of all libgraal isolates during VM shutdown so that libgraal shutdown hooks are run, metric summaries are dumped etc. To do this, the shutdown thread needs to attach to each libgraal isolate and run some shutdown code in the isolate. In the case where the VM process has run out of file descriptors, attaching may fail on Linux. It needs to determine the stack boundaries which involves calling pthread_getattr_np which, in turn, may try to open files such as /proc/self/maps. 
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i32y4j:",9223372036854775807,b14,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2023-08-30 23:40;chagedorn;ILW = Too strong guarantee during VM shutdown, rare?, no workaround = MLH = P4;;;","2023-09-01 10:13;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/15542
Date: 2023-09-01 17:02:51 +0000;;;","2023-09-04 03:21;dukebot;Changeset: d7e4087f
Author:    Doug Simon <dnsimon@openjdk.org>
Date:      2023-09-04 10:19:18 +0000
URL:       https://git.openjdk.org/jdk/commit/d7e4087faf7b2e69de59e246880a10a3a1431ca9
;;;",,,,,,,,,,,,,,,,,,,,,,,,
End render encoder on shader change,JDK-8315352,5109268,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,jdv,jdv,jdv,2023-08-30 03:33,2023-08-30 08:37,2023-10-01 09:55,2023-08-30 08:37,internal,,,,,,,internal,javafx,,0,javafx-metal,sn_151,,,,,,,,,,,,,,,,,,"https://bugs.openjdk.org/browse/JDK-8315320 removed ending of render encoder when pipeline state is changed.

But this causes artifacts in some Ensemble chart demos where on hovering text is vanishing.

We need to end encoder at appropriate place.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,generic,,,,,,,,,os_x,,,,,"0|i32y0j:",9223372036854775807,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4143e3f7,,,,,,,,,"2023-08-30 08:37;jdv;Changeset: d57874fe
Author:    Jayathirth Rao D V <jayathirth.d.v@oracle.com>
Committer: aghaisas <ajitgh@gmail.com>
Date:      2023-08-30 16:22:45 +0000
URL:       https://git.openjdk.org/jfx-sandbox/commit/d57874fe76f887f8d2c1aca4c63d6e0952416f7b;;;",,,,,,,,,,,,,,,,,,,,,,,,,,
Maintain separate MSAA pipeline state for non-3D shaders,JDK-8315320,5109210,Bug,Resolved,JDK,JDK,software,duke,,,P2,Fixed,jdv,jdv,jdv,2023-08-30 00:24,2023-08-30 03:29,2023-10-01 09:55,2023-08-30 03:29,internal,,,,,,,internal,javafx,,0,javafx-metal,sn_151,,,,,,,,,,,,,,,,,,"Run fx83dfeatures.SubSceneAndAntiAliasingTest from apps/toys/FX8-3DFeatures with MTL validation and it crashes with below log:

-[MTLDebugRenderCommandEncoder setRenderPipelineState:]:1604: failed assertion `Set Render Pipeline State Validation
For color attachment 0, the texture sample count (4) does not match the renderPipelineState colorSampleCount (1).
The color sample count (4) does not match the renderPipelineState's color sample count (1)
The raster sample count (4) does not match the renderPipelineState's raster sample count (1)

Looks like this is happening after https://bugs.openjdk.org/browse/JDK-8314401, because after this change we have 2 different sample counts. One for MSAA and another for non-MSAA.",,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8271024,,,,,,,,,,,,,,,,,,,,,,,,,,generic,,,,,,,,,os_x,,,,,"0|i32xnn:",9223372036854775807,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4143e3f7,,,,,,,,,"2023-08-30 00:26;jdv;This is happening because we are re-using non-MSAA RenderPipelineState even when target is MSAA texture.
We store pipeline state for each shader when they are initialized.
When we start using MSAA target we should create MSAA RenderPipelineState with sample count 4 and re-use it.

We are getting validation error for below shader:
2023-08-30 11:16:52.876 java[33974:799600] >>>> MetalShader.getArgumentBuffer()----> fragFuncName: Texture_Color_AlphaTest
-[MTLDebugRenderCommandEncoder setRenderPipelineState:]:1604: failed assertion `Set Render Pipeline State Validation
For color attachment 0, the texture sample count (4) does not match the renderPipelineState colorSampleCount (1).
The color sample count (4) does not match the renderPipelineState's color sample count (1)
The raster sample count (4) does not match the renderPipelineState's raster sample count (1);;;","2023-08-30 03:29;jdv;Changeset: 146b0700
Author:    Jayathirth Rao D V <jayathirth.d.v@oracle.com>
Committer: Ambarish Rapte <arapte@openjdk.org>
Date:      2023-08-30 13:55:56 +0000
URL:       https://git.openjdk.org/jfx-sandbox/commit/146b0700a56a4cc9154ff7a78bbd9a9e790e48f5;;;",,,,,,,,,,,,,,,,,,,,,,,,,
Typo in comment on sun.nio.ch.Net.unblock4,JDK-8315318,5109207,Bug,Resolved,JDK,JDK,software,duke,,,P5,Fixed,,alanb,alanb,2023-08-30 00:05,2023-09-19 04:14,2023-10-01 09:55,2023-08-31 01:30,22,,,,,,,22,core-libs,,0,noreg-doc,,,,,,,,,,,,,,,,,,,"This method unblocks multicast datagrams from an IPv4 source address, the command says it unblocks an IPv6 source, the comment should be fixed.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i32xmz:",9223372036854775807,b14,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@674604a9,,,,,,,,,"2023-08-30 04:34;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/15186
Date: 2023-08-08 08:51:41 +0000;;;","2023-08-31 01:30;dukebot;Changeset: 39f18133
Author:    shiker <32234876+shiker1996@users.noreply.github.com>
Committer: Alan Bateman <alanb@openjdk.org>
Date:      2023-08-31 08:28:11 +0000
URL:       https://git.openjdk.org/jdk/commit/39f181337b652c1b36b131a8582e8cf78b77178b
;;;",,,,,,,,,,,,,,,,,,,,,,,,,
Add test for JDK-8262518,JDK-8315317,5109206,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,psadhukhan,psadhukhan,psadhukhan,2023-08-30 00:02,2023-09-15 07:06,2023-10-01 09:55,2023-09-08 08:38,jfx22,,,,,,,jfx22,javafx,,0,noreg-self,sn_152,test_sprint,testbug,,,,,,,,,,,,,,,,Add automated test for JDK-8262518,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,generic,,,,,,,,,generic,,,,,"0|i32xmr:",9223372036854775807,b09,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@368b4b86,,,,,,,,,"2023-08-31 20:27;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jfx/pull/1228
Date: 2023-09-01 03:16:11 +0000;;;","2023-09-08 08:38;dukebot;Changeset: eb7de72d
Author:    Prasanta Sadhukhan <psadhukhan@openjdk.org>
Date:      2023-09-08 15:36:16 +0000
URL:       https://git.openjdk.org/jfx/commit/eb7de72dafecbedc83c2215b6aed7432d4ec80f9
;;;",,,,,,,,,,,,,,,,,,,,,,,,,
AssertionError in Name.compareTo,JDK-8315248,5109130,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,jjg,jjg,jjg,2023-08-29 11:31,2023-09-12 11:18,2023-10-01 09:55,2023-08-30 14:54,,,,,,,,22,tools,,0,regression,,,,,,,,,,,,,,,,,,,"The recent changes to Name and NameTable may cause AssertionError

Name implements CharSequence, and should be usable in CharSequence.compare(CharSequence, CharSequence)

Instead, it may throw AssertionError if the names come from different name tables.

Exception in thread ""main"" java.lang.AssertionError
        at jdk.compiler/com.sun.tools.javac.util.Assert.error(Assert.java:155)
        at jdk.compiler/com.sun.tools.javac.util.Assert.check(Assert.java:46)
        at jdk.compiler/com.sun.tools.javac.util.Utf8NameTable$NameImpl.compareTo(Utf8NameTable.java:136)
        at jdk.compiler/com.sun.tools.javac.util.Utf8NameTable$NameImpl.compareTo(Utf8NameTable.java:73)
        at java.base/java.lang.CharSequence.compare(CharSequence.java:291)

While it maybe reasonable to check if the names are in the same table (perhaps to optimize any comparison), it should not be required.  

",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8269957,,,,,,,,,,,,,,,,,,,,,,,,,"0|i32x5v:",9223372036854775807,b14,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4dca67bd,,,,,,,,,"2023-08-29 11:36;jjg;Looking at the code, it is not clear that the assertion is necessary.

The comparison simply checks the contents, ""byte by byte"" of the two (separate) buffers.;;;","2023-08-29 11:40;jjg;The same assertion appears in 
    Utf8NameTable.append(Name)   // line 170
 and 
    Utf8NameTable.append(char, Name)   // line188

Again, it is not clear the assertion is necessary.;;;","2023-08-29 11:44;jjg;Also, in various places in Utf8NameTable, there is the following:

            } catch (InvalidUtfException e) {
                throw new AssertionError();
            }

It would be better to pass the InvalidUtfException ""e"" as the cause of the AssertionError, using the `AssertionError(String, Throwable)` constructor. The detail string doesn't matter so much as the cause, so that it shows up in stack traces;;;","2023-08-29 12:37;acobbs;Argh. I had no idea two different Name table implementations could be used at the same time.

When does that happen??

How about we fix this by just getting rid of the two implementations we no longer need :);;;","2023-08-29 16:40;jjg;[~acobbs] It's not two _implementations_ ... it's two _instances_ of the same kind of name table.

The crash arose in a utility that compares APIs by running multiple copies of javac at the same time.;;;","2023-08-29 16:49;acobbs;> It's not two _implementations_ ... it's two _instances_ of the same kind of name table. 

Thanks for the clarification - that does make a lot more sense.

Even so, it still seems like an abuse of the API to be intermixing what are supposed to be ""singletons"" extracted from two different compiler instantiations... I guess if an abuse of an API is possible, it's going to exist somewhere!

Regardless, it looks like you are right in that these assertions are being overly conservative. So this should work:

diff --git a/src/jdk.compiler/share/classes/com/sun/tools/javac/util/Utf8NameTable.java b/src/jdk.compiler/share/classes/com/sun/tools/javac/util/Utf8NameTable.java
index 3cf7a77aabb..687abe30f2f 100644
--- a/src/jdk.compiler/share/classes/com/sun/tools/javac/util/Utf8NameTable.java
+++ b/src/jdk.compiler/share/classes/com/sun/tools/javac/util/Utf8NameTable.java
@@ -112,7 +112,7 @@ public String toString() {
             try {
                 return Convert.utf2string(getByteData(), getByteOffset(), getByteLength(), Convert.Validation.NONE);
             } catch (InvalidUtfException e) {
-                throw new AssertionError();
+                throw new AssertionError(e);
             }
         }
 
@@ -133,7 +133,6 @@ public int hashCode() {
         @Override
         public int compareTo(Name name0) {
             NameImpl name = (NameImpl)name0;
-            Assert.check(name.table == table);
             byte[] buf1 = getByteData();
             byte[] buf2 = name.getByteData();
             int off1 = getByteOffset();
@@ -167,7 +166,6 @@ public int compareTo(Name name0) {
         @Override
         public Name append(Name name0) {
             NameImpl name = (NameImpl)name0;
-            Assert.check(name.table == table);
             byte[] buf1 = getByteData();
             byte[] buf2 = name.getByteData();
             int off1 = getByteOffset();
@@ -180,7 +178,7 @@ public Name append(Name name0) {
             try {
                 return table.fromUtf(result, 0, result.length, Convert.Validation.NONE);
             } catch (InvalidUtfException e) {
-                throw new AssertionError();
+                throw new AssertionError(e);
             }
         }
 
@@ -188,7 +186,6 @@ public Name append(Name name0) {
         public Name append(char ch, Name name0) {
             Assert.check((ch & ~0x7f) == 0);
             NameImpl name = (NameImpl)name0;
-            Assert.check(name.table == table);
             byte[] buf1 = getByteData();
             byte[] buf2 = name.getByteData();
             int off1 = getByteOffset();
@@ -202,7 +199,7 @@ public Name append(char ch, Name name0) {
             try {
                 return table.fromUtf(result, 0, result.length, Convert.Validation.NONE);
             } catch (InvalidUtfException e) {
-                throw new AssertionError();
+                throw new AssertionError(e);
             }
         }
 
@@ -230,7 +227,6 @@ public int lastIndexOfAscii(char ch) {
         @Override
         public boolean startsWith(Name prefix0) {
             NameImpl prefix = (NameImpl)prefix0;
-            Assert.check(prefix.table == table);
             int thisLen = getByteLength();
             int prefLen = prefix.getByteLength();
             if (thisLen < prefLen)
;;;","2023-08-29 17:06;jjg;Generally, this is a tale of two superclasses and a potentially slippery slope.

To add to the confusion, there are two levels of Name class ...` javac.util.Name`, which is internal to javac, and `javax.lang.model.element.Name`, which is public API.

So, the internal `javac.util.Name` class generally assumes there is only a single instance of a name table in play, which is a generally reasonable assumption, at least within javac, and is also specified at least in some places in `javac.util.Name`. 

But ... `javac.util.Name` implements the public `jx.l.m.element.Name`, which doesn't provide much API, but it does extend `CharSequence`.
And, the `CharSequence` class provides a static method `compare(CharSequence cs1, CharSequence cs2)`.   And, the _implementation_ of that `compare` method checks to see if the arguments are of the same type, and if they implement `Comparable`, in which case it delegates to the `compareTo` method on that interface.    So, the internal `javac.util.Name` class does implement `Comparable` and so through the magic of bridge methods, `CharSequence.compare` can end up down in `Utf8NameTable.compareTo`, and can do so with objects coming from different name tables -- triggering the assertion that they should come from the same name table.

In this method ... and in various other methods, it's not strictly required the `Name` objects should be in the same name table, and we _could_ generalize the `Name` classes to be more flexible.  But there's the slippery slope. There's no need in javac, or for current clients of the internal `javac.util.Name` class to manage `Name` objects from different name tables.  The only ""public"" exposure is calling `CharSequence.compare` on two objects from different name tables (e.g. from different instances of javac.)  There's no reasonable place to specify in the public API that clients should not call `CharSequence.compare` on different names, and it certainly seems wrong for such a method to throw an `AssertionError`. So, it seems best to avoid the slippery slope to generalize the `javac.util.Name` API, and to just fix it so that `CharSequence` can be called safely and get the correct result.

The fix is to weaken the assertion (in the `Utf8NameTable.compareTo` method) for the ""same table"" to be an assertion for the ""same class"". As an aside, `javac.util.Name.compareTo` does not specify ""same table"" although other methods on `javac.util.Name` do.

FWIW, I did go down the slippery slope, for both the code and test, and removed some ""same table"" checks, and changed some casts to be instanceof checks, so that you could mix n match name objects much more than now. Then I thought better, and climbed back up the slope. But, know that it can be done quite easily if circumstances ever warrant doing that again.;;;","2023-08-29 17:09;jjg;[~acobbs] Re:

- throw new AssertionError(); 
+ throw new AssertionError(e); 

Actually, you want the variant that uses the `AssertionError(String, Throwable)` constructor, so that the `Throwable` argument gets saved as the `cause`, and so ends up being displayed in stack traces.  If you just call `new AssertionError(e)`. the originating exception will just be saved as a string because it will end up in `AssertionError(Object)`.;;;","2023-08-29 17:10;jjg;CI testing has completed while writing these messages; PR coming soon.;;;","2023-08-29 17:22;jjg;> Even so, it still seems like an abuse of the API to be intermixing what are supposed to be ""singletons"" extracted from two different compiler instantiations... I guess if an abuse of an API is possible, it's going to exist somewhere! 

Mostly, I agree, and for bigger abstractions on the `javax.lang.model` API, like `Element`, `TypeMirror` and their subtypes, I definitely agree.
I would also agree in using `Name` objects from one instance of the `javax.lang.model` API in another.

Here, it was the fact that both could trivially be widened to `CharSequence` and then passed around and compared that tipped the balance. It seems wrong to have `CharSequence.compare` throw an `AssertionError` and there as/is no easy place to specify ""don't do that!""  It was easier to allow it.;;;","2023-08-29 17:32;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/15478
Date: 2023-08-30 00:25:52 +0000;;;","2023-08-30 14:54;dukebot;Changeset: df5e6e5d
Author:    Jonathan Gibbons <jjg@openjdk.org>
Date:      2023-08-30 21:52:31 +0000
URL:       https://git.openjdk.org/jdk/commit/df5e6e5d482e70b33612639b3c1c04eaa1ed361e
;;;",,,,,,,,,,,,,,,
Artifact in FX8-3DFeatures when we use specular map,JDK-8315224,5109102,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,jdv,jdv,jdv,2023-08-29 06:03,2023-08-30 00:14,2023-10-01 09:55,2023-08-30 00:14,internal,,,,,,,internal,javafx,,0,javafx-metal,sn_151,,,,,,,,,,,,,,,,,,"When we run SpecularColorTestApp from apps/toys/FX8-3DFeatures and use specular map the output doesn't match OpenGL. Also difference in rendering is seen with WritableMapTestApp.

It was suspected that this issue was because of https://bugs.openjdk.org/browse/JDK-8312564 where we see NPE when we run these 2 tests.

But looks like even after https://bugs.openjdk.org/browse/JDK-8312564 fix we see rendering differences. Images attached.",,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8302050,,,,,,,,,,,,,,,,,,"2023-08-29 08:26;jdv;D3D.png;https://bugs.openjdk.org/secure/attachment/105283/D3D.png","2023-08-29 08:32;jdv;D3D_Min_SpecPower.png;https://bugs.openjdk.org/secure/attachment/105284/D3D_Min_SpecPower.png","2023-08-29 06:03;jdv;Metal.png;https://bugs.openjdk.org/secure/attachment/105278/Metal.png","2023-08-29 21:39;jdv;Metal_Afterfix.png;https://bugs.openjdk.org/secure/attachment/105290/Metal_Afterfix.png","2023-08-29 21:39;jdv;Metal_Afterfix_minSpecPower.png;https://bugs.openjdk.org/secure/attachment/105291/Metal_Afterfix_minSpecPower.png","2023-08-29 06:03;jdv;OpenGL.png;https://bugs.openjdk.org/secure/attachment/105279/OpenGL.png","2023-08-29 08:32;jdv;OpenGL_Min_SpecPower.png;https://bugs.openjdk.org/secure/attachment/105285/OpenGL_Min_SpecPower.png",,generic,,,,,,,,,os_x,,,,,"0|i32wzn:",9223372036854775807,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4143e3f7,,,,,,,,,"2023-08-29 08:26;jdv;Looks like in OpenGL also we are not drawing specular maps properly and this might be same as https://bugs.openjdk.org/browse/JDK-8311045.
In D3D i see specular map getting applied properly. Attached D3D image also.
We should replicate D3D behaviour of SpecularColorTestApp for Metal.;;;","2023-08-29 08:30;jdv;Artifact in OpenGL can be seen easily when we decrease spec power to a minimum.
Attached images for D3D and OpenGL for the same.;;;","2023-08-29 21:36;jdv;Updated shader logic to replicate D3D, because we were sampling more than once when we had both specular color and map.
Also we need to maintain appropriate specular when it is not set.
After this Metal specular map works properly as in D3D.;;;","2023-08-30 00:14;jdv;Changeset: 5fcb52b7
Author:    Jayathirth Rao D V <jayathirth.d.v@oracle.com>
Committer: Ambarish Rapte <arapte@openjdk.org>
Date:      2023-08-30 10:10:38 +0000
URL:       https://git.openjdk.org/jfx-sandbox/commit/5fcb52b78497f8ae8333a49d1e1524e9dd217713;;;",,,,,,,,,,,,,,,,,,,,,,,
Event NativeLibraryLoad breaks invariant by taking a stacktrace when thread is in state _thread_in_native,JDK-8315220,5109095,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,mgronlun,mgronlun,mgronlun,2023-08-29 03:47,2023-09-13 22:39,2023-10-01 09:55,2023-09-07 09:15,22,,,,,,,22,hotspot,,0,,,,,,,,,,,,,,,,,,,,"prims/jvm.cpp:

JVM_ENTRY_NO_ENV(void*, JVM_LoadLibrary(const char* name, jboolean throwException))
  //%note jvm_ct
  char ebuf[1024];
  void *load_result;
  {
    ThreadToNativeFromVM ttnfvm(thread); // <-- This construct has the thread enter _thread_in_native.
    load_result = os::dll_load(name, ebuf, sizeof ebuf);
  }

A thread running in state _thread_in_native cannot capture a stack trace, because tagging of artefacts (klasses, methods etc.) is a function of an epoch, which evolves during safepoints.

In addition, for virtual threads, this can lead to assertions in the Access API, such as the following:

# A fatal error has been detected by the Java Runtime Environment:
#
#  Internal Error (/workspace/open/src/hotspot/share/oops/accessBackend.cpp:224), pid=77881, tid=86379
#  assert(state == _thread_in_vm || state == _thread_in_Java || state == _thread_new) failed: Wrong thread state for accesses: 4

Current thread (0x0000000124c59a10):  JavaThread ""ForkJoinPool-1-worker-22"" daemon [_thread_in_native, id=86379, stack(0x0000000174900000,0x0000000174b03000) (2060K)]

Stack: [0x0000000174900000,0x0000000174b03000],  sp=0x0000000174affbb0,  free space=2046k
Native frames: (J=compiled Java code, j=interpreted, Vv=VM code, C=native code)
V  [libjvm.dylib+0x13cccc0]  VMError::report_and_die(int, char const*, char const*, char*, Thread*, unsigned char*, void*, void*, char const*, int, unsigned long)+0x4bc  (accessBackend.cpp:224)
V  [libjvm.dylib+0x13cd668]  VMError::report_and_die(Thread*, void*, char const*, int, char const*, char const*, char*)+0x40
V  [libjvm.dylib+0x6bbbcc]  report_vm_error(char const*, int, char const*, char const*, ...)+0x6c
V  [libjvm.dylib+0x92f8]  AccessInternal::check_access_thread_state()+0x11c
V  [libjvm.dylib+0x34ccc4]  oopDesc::obj_field(int) const+0x164
V  [libjvm.dylib+0x6693c8]  ContinuationWrapper::read()+0x80
V  [libjvm.dylib+0x669204]  ContinuationWrapper::ContinuationWrapper(oop)+0x12c
V  [libjvm.dylib+0x666fdc]  Continuation::top_frame(frame const&, RegisterMap*)+0x170
V  [libjvm.dylib+0x38e3fc]  frame::sender_raw(RegisterMap*) const+0x15c
V  [libjvm.dylib+0xab2000]  JfrVframeStream::next_vframe()+0xf4
V  [libjvm.dylib+0xab286c]  JfrStackTrace::record(JavaThread*, frame const&, int)+0x340
V  [libjvm.dylib+0xab2a98]  JfrStackTrace::record(JavaThread*, int)+0xf4
V  [libjvm.dylib+0xab3a4c]  JfrStackTraceRepository::record(JavaThread*, int, JfrStackFrame*, unsigned int)+0x3c
V  [libjvm.dylib+0x105916c]  JfrEvent<EventNativeLibraryLoad>::write_event()+0x90
V  [libjvm.dylib+0x1056704]  os::dll_load(char const*, char*, int)+0x1ec
V  [libjvm.dylib+0xba7c84]  JVM_LoadLibrary+0x298
C  [libjava.dylib+0x47ac]  Java_jdk_internal_loader_NativeLibraries_load+0x164
j  jdk.internal.loader.NativeLibraries.load(Ljdk/internal/loader/NativeLibraries$NativeLibraryImpl;Ljava/lang/String;ZZ)Z+0 java.base@22-loom
j  jdk.internal.loader.NativeLibraries$NativeLibraryImpl.open()Z+57 java.base@22-loom
j  jdk.internal.loader.NativeLibraries.loadLibrary(Ljava/lang/Class;Ljava/lang/String;Z)Ljdk/internal/loader/NativeLibrary;+254 java.base@22-loom
j  jdk.internal.loader.NativeLibraries.loadLibrary(Ljava/lang/Class;Ljava/io/File;)Ljdk/internal/loader/NativeLibrary;+51 java.base@22-loom
j  jdk.internal.loader.NativeLibraries.findFromPaths([Ljava/lang/String;Ljava/lang/Class;Ljava/lang/String;)Ljdk/internal/loader/NativeLibrary;+44 java.base@22-loom


",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8315364,JDK-8315930,,,JDK-8315892,JDK-8313251,,,,,,,,,,,,,,,,,,,,,,,,"0|i32wy3:",9223372036854775807,b15,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@42995637,,,,,,,,,"2023-08-30 04:01;mbaesken;Where did you see it, is it easily reproducable and how ?
;;;","2023-08-30 04:37;mgronlun;Assertions on valid thread states as part of JFR stack trace capture would have prevented this. I will add them as part of JDK-8315364 but will need to be integrated after this issue is resolved.;;;","2023-08-30 05:35;mbaesken;Should we disable the taking of stacktraces for  NativeLibraryLoad  event for now  (e.g. in metadata.xml) ?
Are you aware of some other events where the stacktrace taking is done conditionally (like checking for thread states or some other preconditions for successful stack generation) ?;;;","2023-08-30 14:31;mgronlun;I am working on a solution.;;;","2023-09-01 05:10;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/15535
Date: 2023-09-01 12:03:39 +0000;;;","2023-09-07 09:15;dukebot;Changeset: 1cae0f53
Author:    Markus Grönlund <mgronlun@openjdk.org>
Date:      2023-09-07 16:12:55 +0000
URL:       https://git.openjdk.org/jdk/commit/1cae0f53a9d37fbae9471bd942f7157429a85cd1
;;;",,,,,,,,,,,,,,,,,,,,,
RISC-V: hwprobe query is_set return wrong value,JDK-8315206,5109080,Bug,Resolved,JDK,JDK,software,duke,,,P2,Fixed,rehn,rehn,rehn,2023-08-28 23:41,2023-09-12 11:17,2023-10-01 09:55,2023-08-30 01:58,21,22,,,,,,22,hotspot,,0,jdk21u-fix-request,jdk21u-fix-SQE-ok,jdk21u-fix-yes,,,,,,,,,,,,,,,,,We must evaluate the mask before the equals.,,,,,,,,,,,,JDK-8315788,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,riscv,,,,,,,,,,,,,,"0|i32wur:",9223372036854775807,b13,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,,,"2023-08-29 00:05;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/15464
Date: 2023-08-29 06:57:56 +0000;;;","2023-08-30 01:58;dukebot;Changeset: 876a725a
Author:    Robbin Ehn <rehn@openjdk.org>
Date:      2023-08-30 08:56:50 +0000
URL:       https://git.openjdk.org/jdk/commit/876a725af95d65d59390c86bfec64c33cccbf53b
;;;","2023-08-30 23:29;fyang;Hi [~rehn], I see jdk21 and jdk21u have the same problem. So is there a plan to backport this to these jdk versions? Thanks.;;;","2023-08-31 00:39;rehn;Fix Request (21u)

The evaluation of what extensions are available to the VM can fail.
This could lead to JIT using unsupported instructions.
User must then manually turn off the extension.;;;","2023-08-31 01:04;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk21/pull/175
Date: 2023-08-31 07:58:37 +0000;;;","2023-08-31 12:56;dcubed;[~rehn] - jdk21 is almost at GA so I think only P1 fixes are even possible
at this point. jdk21u is the appropriate place...;;;","2023-08-31 21:26;rehn;Hi Dan!

Yes, I notice that, but as I understand it, we are still in RDP2?
I'll change to jdk21u, thanks!;;;","2023-08-31 21:39;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk21u/pull/121
Date: 2023-09-01 04:34:19 +0000;;;","2023-08-31 22:14;dholmes;Hi [~rehn], we are not in RDP2 any more, we hit (or should have hit) Final Release Candidate on August 24.;;;","2023-08-31 22:29;rehn;Thanks David! (our pages still says we are in RDP2, hence my confusion, i.e. https://openjdk.org/projects/jdk/21/);;;","2023-09-01 14:05;dholmes;[~rehn] Thanks for pointing that out - now fixed.;;;",,,,,,,,,,,,,,,,
Memory leak in the native implementation of Pack200.Unpacker.unpack(),JDK-8315135,5109003,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,simonis,simonis,simonis,2023-08-28 12:11,2023-09-12 09:37,2023-10-01 09:55,2023-08-30 08:18,11,8,,,,,,11.0.22,core-libs,,0,amazon-interest,hgupdate-sync,jdk11u-critical-request,jdk11u-critical-yes,jdk11u-fix-request,jdk11u-fix-yes,jdk8u-critical-request,jdk8u-fix-request,jdk8u-fix-yes,,,,,,,,,,,"This issue was found by Yakov Shafranovich (yakovsh@amazon.com) who also provided the reproducer and proposed a fix.

The native implementation of the `Pack200.Unpacker` class included in OpenJDK 8 and 11 has a native and heap memory leak that gets triggered when corrupted files are processed. If the native `NativeUnpack::start()` method throws an exception (because of a corrupted input file) its caller `NativeUnpack::run()` fails to call the native `NativeUnpack::finish()` method which is responsible for freeing the allocated native memory and releasing the created ﻿global JNI handles﻿. A Java application processing large number of corrupted Pack200 files will eventually run either out of native memory or out of heap space and exit with an `OutOfMemoryError`.

The problem can be demonstrated with the following short test program which will exit with an `OutOfMemoryError` quite quickly if run with `java -Xmx32m NativePack200POC`:

```
import java.io.*;
import java.util.jar.*;

@SuppressWarnings(""removal"")
public class NativePack200POC {
  public static void main(String[] args) {
    try {
      ByteArrayInputStream in = new ByteArrayInputStream(""foobar"".getBytes());
      for(int i=0; i < 1_000_000; i++) {
        try {
          JarOutputStream out = new JarOutputStream(new ByteArrayOutputStream());
          Pack200.Unpacker unpacker = Pack200.newUnpacker();
          unpacker.unpack(in, out);
        } catch (IOException e) {
        }
      }
    } catch (OutOfMemoryError e) {
      System.out.println(e);
      throw e;
    }
  }
}
```

The problem can be worked around by disabling the native Pack200 implementation with `-Dcom.sun.java.util.jar.pack.disable.native=true` but the default setting is `-Dcom.sun.java.util.jar.pack.disable.native=false`.

Notice that this bug can not be fixed in HEAD because the Pack200 functionality has been removed in JDK 14 (https://openjdk.org/jeps/367). I therefore propose to fix this in jdk11u-dev first and then downport the fix to jdk8u-dev as well.
﻿",,,,,,,,,,,,JDK-8315547,JDK-8315408,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,generic,,,,,,,,,generic,,,,,"0|i32wdn:",9223372036854775807,master,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@62714d2c,,,,,,,,,"2023-08-28 12:22;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk11u-dev/pull/2100
Date: 2023-08-28 19:17:36 +0000;;;","2023-08-30 04:08;simonis;Fix Request

I request to integrate this fix which fixes a memory leak into 11u-dev and potentially into 11u if approved (sorry for missing rampdown date by a day). This is not a downport because the Pack200 functionality has been removed in JDK 14. The fix has been reviewed in the pull request https://git.openjdk.org/jdk11u-dev/pull/2100 and I consider it to be of low risk.;;;","2023-08-30 08:06;clanger;[~simonis], I've approved it for both, 11u and 11u-dev. Feel free to backport to jdk11u.;;;","2023-08-30 08:18;dukebot;Changeset: b77c161e
Author:    Volker Simonis <simonis@openjdk.org>
Date:      2023-08-30 15:16:47 +0000
URL:       https://git.openjdk.org/jdk11u-dev/commit/b77c161e7509aa3b09ebf3e6b2b1490c0667bbdc
;;;","2023-08-30 09:11;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk11u/pull/79
Date: 2023-08-30 16:04:59 +0000;;;","2023-08-30 09:21;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk8u-dev/pull/361
Date: 2023-08-30 16:14:51 +0000;;;","2023-08-30 12:31;simonis;Fix Request (jdk8u-dev/jdk8u)

I request to integrate this fix which fixes a memory leak into jdk8u-dev and potentially into jdk8u if approved (sorry for missing rampdown date by a day). This is a clean downport from jdk11u-dev where the fix has also been approved for jdk11u (i.e. 11.0.21). The fix has been reviewed in the pull request https://git.openjdk.org/jdk11u-dev/pull/2100 and I consider it to be of low risk.
If the jdk8u-critical-request will be approved I'll do a backport from 8u-dev to 8u.;;;","2023-08-31 15:31;andrew;Approved for 8u402/8u-dev. It's closer to a week after rampdown started (last day for 8u392 was Friday the 25th).;;;","2023-09-06 23:27;dukebot;Changeset: 14fa970e
Author:    Volker Simonis <simonis@openjdk.org>
Date:      2023-08-30 19:26:54 +0000
URL:       https://git.openjdk.org/jdk11u-dev/commit/14fa970e610a2202c14ad0c999cf6c215bdc5e52
;;;",,,,,,,,,,,,,,,,,,
CDSMapTest fails with incorrect number of oop references,JDK-8315127,5108990,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,iklam,dnsimon,dnsimon,2023-08-28 09:05,2023-09-12 11:25,2023-10-01 09:55,2023-09-05 13:57,22,,,,,,,22,hotspot,,0,cds,jvmci,noreg-self,,,,,,,,,,,,,,,,,"Like JDK-8310108, I think this test is failing due to AppCDS not being fully compatible yet with EnableJVMCI (JDK-8266329).

Parsed 428287 lines in SharedArchiveFile0.map
Found 19576 heap objects
Checked 8286 oop field references
----------System.err:(12/656)----------
java.lang.RuntimeException: CDS map file seems incorrect: 19576 objects but only 8286 oop field references
        at CDSMapTest.dump(CDSMapTest.java:82)
        at CDSMapTest.doTest(CDSMapTest.java:62)
        at CDSMapTest.main(CDSMapTest.java:42)
        at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
        at java.base/java.lang.reflect.Method.invoke(Method.java:580)
        at com.sun.javatest.regtest.agent.MainActionHelper$AgentVMRunnable.run(MainActionHelper.java:333)
        at java.base/java.lang.Thread.run(Thread.java:1570)
 ",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8314993,JDK-8310055,,,JDK-8266329,,,,,,,,,,,,,,,,,,,,,,,,,"0|i32war:",9223372036854775807,b14,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,,,"2023-08-28 11:00;iklam;The test may be buggy as it has a hard-coded value of 10000 here.;;;","2023-08-31 17:24;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/15527
Date: 2023-09-01 00:18:20 +0000;;;","2023-09-05 13:57;dukebot;Changeset: 1f4cdb32
Author:    Ioi Lam <iklam@openjdk.org>
Date:      2023-09-05 20:56:09 +0000
URL:       https://git.openjdk.org/jdk/commit/1f4cdb327f46085d3134d1d1164fccac35904566
;;;",,,,,,,,,,,,,,,,,,,,,,,,
fix minor issue in copyright header introduced by JDK-8269957 that is breaking the build,JDK-8315116,5108979,Bug,Resolved,JDK,JDK,software,duke,,,P1,Fixed,vromero,vromero,vromero,2023-08-28 08:16,2023-09-18 08:20,2023-10-01 09:55,2023-08-28 08:45,22,,,,,,,22,tools,,0,regression,tier1,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8315138,,,,,JDK-8269957,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i32w8b:",9223372036854775807,b13,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4dca67bd,,,,,,,,,"2023-08-28 08:34;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/15450
Date: 2023-08-28 15:28:54 +0000;;;","2023-08-28 08:45;dukebot;Changeset: acb24bf3
Author:    Vicente Romero <vromero@openjdk.org>
Date:      2023-08-28 15:43:41 +0000
URL:       https://git.openjdk.org/jdk/commit/acb24bf3540fafae7659d0b92f7696db7d70f55a
;;;",,,,,,,,,,,,,,,,,,,,,,,,,
Allowed access modes in memory segment should depend on layout alignment,JDK-8315096,5108958,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,mcimadamore,mcimadamore,mcimadamore,2023-08-28 04:37,2023-08-30 08:00,2023-10-01 09:55,2023-08-30 08:00,repo-panama,,,,,,,,core-libs,,0,foreign-memaccess+abi,,,,,,,,,,,,,,,,,,,"The specification of the permitted access modes on memory segment var handles states that a memory access operation can be either:

* Fully aligned, when access is aligned with both the size of the accessed element and the layout constraint. (e.g. JAVA_INT)
* Partially aligned, when access is aligned with layout constraint, but not with size of accessed element. (e.g. JAVA_INT_UNALIGNED)
* Unaligned, if access does not respect alignment constraints.

The alignment kind of an access operation determines which access modes will be available on the resulting var handle.

While this classification is morally correct, it mixes together some use-site and decl-site aspects. For instance, the set of supported access modes should be determined at var handle construction, and not left to whether a memory access ""happens to be aligned"" given the physical address at which memory dereference occurs.

This also results in an important mismatch with the way memory segment var handle are specified and implemented: if an access mode is not supported, then using such access mode should result in an UnsupportedOperationException. But in our implementation, all alignment issues result in IllegalArgumentException.

This means that clients can get the same exception if:

* they try to read a 4-byte aligned int at a physical address that is not multiple of 4 (use-site error, IAE is good)
* they try to do a compareAndSwap on a var handle obtained using an unaligned int layout (decl-site error, IAE is not good, and UOE should be used instead).",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8315131,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i32w3n:",9223372036854775807,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@28ce6b78,,,,,,,,,"2023-08-28 04:53;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/panama-foreign/pull/876
Date: 2023-08-28 11:47:27 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,,,
remove macosx-x64-10.13 and macosx-x64-10.14 from execution-platfrom  in jdk8,JDK-8315094,5108956,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,myusuf,myusuf,myusuf,2023-08-28 04:27,2023-08-29 22:23,2023-10-01 09:55,2023-08-28 22:24,,,,,,,,8u401,hotspot,,0,noreg-self,sqebug,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8315293,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i32w37:",9223372036854775807,master,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
C2: assert(wq.size() - before == EMPTY_LOOP_SIZE) failed: expect the EMPTY_LOOP_SIZE nodes of this body if empty,JDK-8315088,5108949,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,roland,chagedorn,chagedorn,2023-08-28 03:55,2023-09-15 05:47,2023-10-01 09:55,2023-09-05 00:35,21,22,,,,,,22,hotspot,,0,amazon-interest,c2,javafuzzer,oracle-triage-17,oracle-triage-22,regression,,,,,,,,,,,,,,"The following Java Fuzzer test starts to fail after JDK-8297724:

To reproduce:
$ java -XX:CompileCommand=compileonly,Test::* -XX:-TieredCompilation Test.java
$ java -Xbatch -XX:CompileCommand=compileonly,Reduced::* -XX:-TieredCompilation Reduced.java

#
# A fatal error has been detected by the Java Runtime Environment:
#
#  Internal Error (/opt/mach5/mesos/work_dir/slaves/cd627e65-f015-4fb1-a1d2-b6c9b8127f98-S141865/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/8a11c2a6-dc3b-42a8-a1bf-5f4afa468e45/runs/9fc53209-cfb4-45ef-bad1-2b89080d866c/workspace/open/src/hotspot/share/opto/loopTransform.cpp:3540), pid=1765465, tid=1765479
#  assert(wq.size() - before == EMPTY_LOOP_SIZE) failed: expect the EMPTY_LOOP_SIZE nodes of this body if empty
#
# JRE version: Java(TM) SE Runtime Environment (22.0) (fastdebug build 22-internal-2023-08-25-1459578.christian.hagedorn.jdk)
# Java VM: Java HotSpot(TM) 64-Bit Server VM (fastdebug 22-internal-2023-08-25-1459578.christian.hagedorn.jdk, mixed mode, sharing, compressed oops, compressed class ptrs, g1 gc, linux-amd64)
# Problematic frame:
# V  [libjvm.so+0x126fb18]  IdealLoopTree::collect_loop_core_nodes(PhaseIdealLoop*, Unique_Node_List&) const+0x348
.............
Command Line: -XX:CompileCommand=quiet -XX:-TieredCompilation Test
.............
Stack: [0x00007f123d399000,0x00007f123d499000],  sp=0x00007f123d493a40,  free space=1002k
Native frames: (J=compiled Java code, j=interpreted, Vv=VM code, C=native code)
V  [libjvm.so+0x126fb18]  IdealLoopTree::collect_loop_core_nodes(PhaseIdealLoop*, Unique_Node_List&) const+0x348  (loopTransform.cpp:3540)
V  [libjvm.so+0x126fbbf]  IdealLoopTree::enqueue_data_nodes(PhaseIdealLoop*, Unique_Node_List&, Unique_Node_List&) const+0x1f
V  [libjvm.so+0x126fe23]  IdealLoopTree::process_safepoint(PhaseIdealLoop*, Unique_Node_List&, Unique_Node_List&, Node*) const+0x113
V  [libjvm.so+0x1270310]  IdealLoopTree::empty_loop_with_data_nodes(PhaseIdealLoop*) const [clone .part.0]+0x490
V  [libjvm.so+0x12710f5]  IdealLoopTree::do_remove_empty_loop(PhaseIdealLoop*) [clone .part.0]+0x9b5
V  [libjvm.so+0x12a3411]  PhaseIdealLoop::build_and_optimize()+0xec1
V  [libjvm.so+0x9ef5d9]  PhaseIdealLoop::optimize(PhaseIterGVN&, LoopOptsMode)+0x3b9
V  [libjvm.so+0x9ea590]  Compile::Optimize()+0x820
V  [libjvm.so+0x9ee3a0]  Compile::Compile(ciEnv*, ciMethod*, int, Options, DirectiveSet*)+0x1bb0
V  [libjvm.so+0x84949b]  C2Compiler::compile_method(ciEnv*, ciMethod*, int, bool, DirectiveSet*)+0x13b
V  [libjvm.so+0x9fa2b7]  CompileBroker::invoke_compiler_on_method(CompileTask*)+0x977
V  [libjvm.so+0x9faff8]  CompileBroker::compiler_thread_loop()+0x5f8
V  [libjvm.so+0xeb65cc]  JavaThread::thread_main_inner()+0xcc
V  [libjvm.so+0x17a09fa]  Thread::call_run()+0xba
V  [libjvm.so+0x149fe9a]  thread_native_entry(Thread*)+0x12a",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8297724,,,,,,,"2023-08-28 03:54;chagedorn;FuzzerUtils.java;https://bugs.openjdk.org/secure/attachment/105266/FuzzerUtils.java","2023-08-28 03:54;chagedorn;Reduced.java;https://bugs.openjdk.org/secure/attachment/105267/Reduced.java","2023-08-28 03:54;chagedorn;Test.java;https://bugs.openjdk.org/secure/attachment/105268/Test.java","2023-08-28 03:55;chagedorn;hs_err_pid1765465.log;https://bugs.openjdk.org/secure/attachment/105265/hs_err_pid1765465.log",,,,,,,,,,,,,,,,,,,"0|i32w1n:",9223372036854775807,b14,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2023-08-28 03:56;chagedorn;ILW = Assertion failure when removing an empty loop, single Java Fuzzer test, possibly disable compilation of affected method = HLM = P3;;;","2023-08-28 03:56;chagedorn;[~roland] can you have a look?;;;","2023-08-31 09:01;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/15520
Date: 2023-08-31 15:54:50 +0000;;;","2023-09-05 00:35;dukebot;Changeset: fe4f9002
Author:    Roland Westrelin <roland@openjdk.org>
Date:      2023-09-05 07:32:51 +0000
URL:       https://git.openjdk.org/jdk/commit/fe4f90021ffd44cb0af34f39d4ca0a7e44605c92
;;;",,,,,,,,,,,,,,,,,,,,,,,
"[REDO] Generational ZGC: Tests crash with assert(index == 0 || is_power_of_2(index))",JDK-8315082,5108942,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,rcastanedalo,rcastanedalo,rcastanedalo,2023-08-28 00:44,2023-09-27 18:19,2023-10-01 09:55,2023-09-20 22:50,21,22,,,,,,22,hotspot,,0,amazon-interest,c2,genzgc,oracle-triage-22,sqebug,,,,,,,,,,,,,,,"Tests:
compiler/unsafe/GetUnsafeObjectG1PreBarrier.java
compiler/c2/TestNPEHeapBased.java
java/lang/instrument/GetObjectSizeIntrinsicsTest.java#id7
java/lang/instrument/GetObjectSizeIntrinsicsTest.java#id6

Product tested: JDK-21.0.1+2 (ATR run), regression happening from jdk-21+23
OS/architecture: Linux-x64-debug, not seen in product build
Reproducible: Always with below jvm-args
Is it a Regression: yes, started from  jdk-21+23 with the introduction of ZGenerational ZGC
Is it a platform-specific issue: Not sure, currently seen only with linux-x64-debug.


Error:
#
# A fatal error has been detected by the Java Runtime Environment:
#
#  Internal Error (/opt/mach5/mesos/work_dir/slaves/cd627e65-f015-4fb1-a1d2-b6c9b8127f98-S75332/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/9f54ee97-f028-4eeb-8d9f-e71282916f83/runs/7a6c13e7-18c4-47c0-803f-9564e908be6a/workspace/open/src/hotspot/cpu/x86/gc/z/zAddress_x86.inline.hpp:35), pid=2718529, tid=2718532
#  assert(index == 0 || is_power_of_2(index)) failed: Incorrect load shift: 11
#
# JRE version: Java(TM) SE Runtime Environment (21.0.1+2) (fastdebug build 21.0.1-ea+2-LTS-6)
# Java VM: Java HotSpot(TM) 64-Bit Server VM (fastdebug 21.0.1-ea+2-LTS-6, compiled mode, tiered, compressed class ptrs, z gc, linux-amd64)
# Problematic frame:
# V  [libjvm.so+0x5f0841]  ZPointer::load_shift_lookup(unsigned long)+0x61
#
# Core dump will be written. Default location: Core dumps may be processed with ""/opt/core.sh %p"" (or dumping to /opt/mach5/mesos/work_dir/slaves/cd627e65-f015-4fb1-a1d2-b6c9b8127f98-S75487/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/b5a7a9b7-646f-4048-af4e-631e65e44fe7/runs/511c385e-5ad4-464a-81d8-dea39b7f0e83/testoutput/test-support/jtreg_open_test_hotspot_jtreg_hotspot_compiler_all_gcs/scratch/4/core.2718529)
#
# If you would like to submit a bug report, please visit:
#   https://bugreport.java.com/bugreport/crash.jsp
#
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8312749,,,,,,JDK-8315029,,,,JDK-8314994,JDK-8307058,,"2023-08-28 00:44;rcastanedalo;GetUnsafeObjectG1PreBarrier_hs_err_pid2718529.log;https://bugs.openjdk.org/secure/attachment/105263/GetUnsafeObjectG1PreBarrier_hs_err_pid2718529.log",,,,,,,,,,,,,,,,,,,,,,"0|i32w03:",9223372036854775807,b17,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2023-08-28 01:39;chagedorn;ILW = REDO of JDK-8312749: same ILW = P3;;;","2023-09-11 00:05;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/15589
Date: 2023-09-06 11:54:04 +0000;;;","2023-09-20 22:50;dukebot;Changeset: ceff47b4
Author:    Roberto Castañeda Lozano <rcastanedalo@openjdk.org>
Date:      2023-09-21 05:49:09 +0000
URL:       https://git.openjdk.org/jdk/commit/ceff47b462ccbaff5cc16111dc65463a6d8d3d8d
;;;",,,,,,,,,,,,,,,,,,,,,,,,
Possible null pointer access in native glass,JDK-8315074,5108934,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,jdv,jdv,jdv,2023-08-27 21:44,2023-09-15 07:06,2023-10-01 09:55,2023-09-13 06:28,8,jfx11,jfx17,jfx21,jfx22,,,jfx22,javafx,,0,jfx21u-fix-request,jfx21u-fix-yes,noreg-hard,sn_151,sn_152,,,,,,,,,,,,,,,"At multiple places in native glass code we don't have appropriate NULL checks which might result in null pointer access.

Add appropriate checks.",,,,,,,,,,,,JDK-8316292,JDK-8316236,JDK-8316237,JDK-8316238,,,,,,,,,,,,JDK-8316020,JDK-8312997,,,,,,,,,,,,,,,,,,,,,,,,,generic,,,,,,,,,generic,,,,,"0|i32vyb:",9223372036854775807,b09,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4f591050,,,,,,,,,"2023-08-27 22:04;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jfx/pull/1223
Date: 2023-08-28 04:58:31 +0000;;;","2023-09-13 06:28;dukebot;Changeset: f7b21e54
Author:    Jayathirth D V <jdv@openjdk.org>
Committer: Kevin Rushforth <kcr@openjdk.org>
Date:      2023-09-13 13:26:34 +0000
URL:       https://git.openjdk.org/jfx/commit/f7b21e5468f1aad18df17443590c0887b2cf0239
;;;","2023-09-13 07:56;jdv;21u fix request: This will improve stability of jfx21u and it is a safe fix. ;;;","2023-09-13 09:09;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jfx21u/pull/15
Date: 2023-09-13 16:01:34 +0000;;;","2023-09-13 09:29;kcr;Approved for jfx21u.;;;","2023-09-14 05:15;jdv;Backporting to all relevant streams are done.;;;",,,,,,,,,,,,,,,,,,,,,
Zero build on macOS fails after JDK-8303852,JDK-8315073,5108929,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,haosun,haosun,haosun,2023-08-27 16:04,2023-09-12 11:15,2023-10-01 09:55,2023-08-28 19:15,22,,,,,,,22,hotspot,,0,noreg-build,,,,,,,,,,,,,,,,,,,"--------------------------------------
how to reproduce:

./configure --with-jvm-variants=zero --with-debug-level=release
make images JOBS=32

--------------------------------------
here shows the snippet of error log on my local environment, i.e. macOS on Apple silicon

=== Output from failing command(s) repeated here ===
* For target hotspot_variant-zero_libjvm_objs_os_bsd_zero.o:
~/jdk_src/src/hotspot/os_cpu/bsd_zero/os_bsd_zero.cpp:179:10: error: out-of-line declaration of a member must be a definition [-Wout-of-line-declaration]
void os::current_stack_base_and_size(address* base, size_t* size)
     ~~~~^
~/jdk_src/src/hotspot/os_cpu/bsd_zero/os_bsd_zero.cpp:179:66: error: expected ';' after top level declarator
void os::current_stack_base_and_size(address* base, size_t* size)
                                                                 ^
                                                                ;
~/jdk_src/src/hotspot/os_cpu/bsd_zero/os_bsd_zero.cpp:184:4: error: C++ requires a type specifier for all declarations
  *base = (address) pthread_get_stackaddr_np(self);
   ^
~/jdk_src/src/hotspot/os_cpu/bsd_zero/os_bsd_zero.cpp:185:4: error: C++ requires a type specifier for all declarations
  *size = pthread_get_stacksize_np(self);
   ^
~/jdk_src/src/hotspot/os_cpu/bsd_zero/os_bsd_zero.cpp:186:3: error: C++ requires a type specifier for all declarations
  bottom = *base - *size;
   ... (rest of output omitted)

* All command lines available in ~/build-release/make-support/failure-logs.
=== End of repeated output ===


--------------------------------------
Fix:

Adding the missing opening brace would fix this build failure.
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8303852,,,,,,,,,,,,,,,generic,,,,,,,22,,os_x,,,,,"0|i32vx7:",9223372036854775807,b13,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,,,"2023-08-28 01:27;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/15443
Date: 2023-08-28 08:20:42 +0000;;;","2023-08-28 19:15;dukebot;Changeset: 25f5df2a
Author:    Hao Sun <haosun@openjdk.org>
Date:      2023-08-29 02:12:37 +0000
URL:       https://git.openjdk.org/jdk/commit/25f5df2af2fd60daa19448682fa1a3a04d22eead
;;;",,,,,,,,,,,,,,,,,,,,,,,,,
"Modify TrayIconScalingTest.java, PrintLatinCJKTest.java to use new PassFailJFrame's builder pattern usage",JDK-8315071,5108924,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,landrews,landrews,landrews,2023-08-26 12:28,2023-09-12 11:14,2023-10-01 09:55,2023-08-28 13:32,,,,,,,,22,client-libs,,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8294535,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i32vw3:",9223372036854775807,b13,,,,,,,,,,,"2023-08-26 14:16;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/15438
Date: 2023-08-26 21:11:11 +0000;;;","2023-08-28 13:32;dukebot;Changeset: 31e26814
Author:    lawrence.andrews <lawrence.andrews@oracle.com>
Committer: Alexey Ivanov <aivanov@openjdk.org>
Date:      2023-08-28 20:31:02 +0000
URL:       https://git.openjdk.org/jdk/commit/31e26814db5d5ad5018fb6ed2e8160e8a01938ab
;;;","2023-09-11 11:59;aivanov;Updates to the tests depend on JDK-8294535.;;;",,,,,,,,,,,,,,,,,,,,,,,,
Out of tree incremental build fails with ccache,JDK-8315060,5108913,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,erikj,erikj,erikj,2023-08-25 15:00,2023-09-12 11:14,2023-10-01 09:55,2023-08-28 13:58,22,,,,,,,22,infrastructure,,0,,,,,,,,,,,,,,,,,,,,"After JDK-8313374, out of tree incremental builds with ccache started failing. The rewriting of the generated dependency (*.d) files creates object file paths with `/../` in them which make does not match to other rules. I don't think we should apply the rewriting when the build dir is outside CCACHE_BASEDIR. That seems to fix the issue.

During review of JDK-8313374 I also noted that the CCACHE_BASEDIR should point to WORKSPACE_ROOT rather than TOPDIR for ccache to work uniformly for OracleJDK and OpenJDK builds. 

I would like to address both of these issues with this bug.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8313374,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i32vtn:",9223372036854775807,b13,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@429c566,,,,,,,,,"2023-08-25 15:38;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/15434
Date: 2023-08-25 22:31:31 +0000;;;","2023-08-28 13:58;dukebot;Changeset: 69d1feb8
Author:    Erik Joelsson <erikj@openjdk.org>
Date:      2023-08-28 20:56:31 +0000
URL:       https://git.openjdk.org/jdk/commit/69d1feb83f0e1f411f3b62f74e1a488f0dd29b15
;;;",,,,,,,,,,,,,,,,,,,,,,,,,
jdk/jfr/jvm/TestGetEventWriter.java fails with non-JVMCI GCs,JDK-8315051,5108903,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,shade,shade,shade,2023-08-25 11:59,2023-09-12 11:19,2023-10-01 09:55,2023-08-31 04:16,21,22,,,,,,22,hotspot,,0,amazon-interest,gc-shenandoah,jdk21u-fix-request,jdk21u-fix-yes,noreg-self,oraclejdk-na,oracle-triage-22,,,,,,,,,,,,,"$ make test TEST=jdk/jfr/jvm/TestGetEventWriter.java TEST_VM_OPTS=-XX:+UseShenandoahGC
...
TEST RESULT: Failed. Execution failed: `main' threw exception: java.lang.InternalError: JVMCI is not enabled
",,,,,,,,,,,,JDK-8315596,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8290075,,,,,,,,,,,,,,,,,,,,,,,,,"0|i32vrf:",9223372036854775807,b14,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2023-08-25 12:37;shade;Bisected to JDK-8290075.;;;","2023-08-27 23:04;chagedorn;ILW = Test failure due to disabled JVMCI, single test with Shenandoah, use different GC = MLM = P4;;;","2023-08-28 06:23;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/15446
Date: 2023-08-28 13:15:37 +0000;;;","2023-08-31 04:16;dukebot;Changeset: 145d8bc1
Author:    Aleksey Shipilev <shade@openjdk.org>
Date:      2023-08-31 11:15:09 +0000
URL:       https://git.openjdk.org/jdk/commit/145d8bc1a3ef4f4fe0c10385be111838e7ed9250
;;;","2023-09-01 01:54;shade;Fix Request (21u)

Fixes the failing test. Applies cleanly.;;;","2023-09-01 02:00;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk21u/pull/125
Date: 2023-09-01 08:53:35 +0000;;;",,,,,,,,,,,,,,,,,,,,,
GenShen: Verifier detects clean card should be dirty,JDK-8315044,5108895,Bug,Resolved,JDK,JDK,software,duke,,,P2,Fixed,kdnilsen,kdnilsen,kdnilsen,2023-08-25 09:48,2023-09-06 08:49,2023-10-01 09:55,2023-09-06 08:49,,,,,,,,,hotspot,,0,amazon-interest,genshen,oraclejdk-na,,,,,,,,,,,,,,,,,"The following condition was detected by ShenandoahVerifier:

#
# A fatal error has been detected by the Java Runtime Environment:
#
#  Internal Error (/home/ANT.AMAZON.COM/kdnilsen/github/shenandoah.fix-bootstrap-logs/src/hotspot/share/gc/shenandoah/shenandoahVerifier.cpp:1275), pid=3504095, tid=3504111
#  Error: Verify init-update-refs remembered set violation; clean card should be dirty

Referenced from:
  interior location: 0x00000004e9654b88
  inside Java heap
    not in collection set
  region: | 3067|R  |O|BTE    4e9400000,    4e9695000,    4e9800000|TAMS    4e9695000|UWM    4e9695000|U  2644K|T     0B|G  2064K|P   409K|S   171K|L  2478K|CP   0

Object:
  0x00000004e9a28280 - klass 0x00000004eb0c1268 java.lang.invoke.LambdaFormEditor$Transform
    not allocated after mark start
    not after update watermark
        marked strong
    not marked weak
    not in collection set
  age: 0
  mark: mark(is_neutral no_hash age=0)
  region: | 3068|R  |Y|BTE    4e9800000,    4e9b386d0,    4e9c00000|TAMS    4e9b386d0|UWM    4e9b386d0|U  3297K|T     0B|G  1249K|P     0B|S  2048K|L  2653K|CP   0

Forwardee:
  (the object itself)

An rr recording of this issue is available here:
https://pernos.co/debug/4Vp9nzzxpUvXMOQW7UV1Hw/index.html",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"2023-08-25 09:48;kdnilsen;hs_err_pid3504095.log;https://bugs.openjdk.org/secure/attachment/105255/hs_err_pid3504095.log",,,,,,,,,,,,,,,,,,,,,,"0|i32vpn:",9223372036854775807,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6b00f96c,,,,,,,,,"2023-08-25 09:48;kdnilsen;The hs_err file has been attached;;;","2023-08-25 09:50;kdnilsen;The reproducer for this particular recording is:

#!/bin/bash

export _RR_TRACE_DIR=""./rr-trace/$(date +%s)""

mkdir tmp
mkdir tmp/dacapo-scratch
mkdir tmp/dacapo-scratch/dacapo

mkdir results
mkdir results/genshen
mkdir results/genshen/dacapo
mkdir results/genshen/dacapo/1

COUNT=1
while true
do

echo Run $COUNT Generational lusearch 12g
>&2 echo Run $COUNT Generational lusearch 12g
rr record -h -n --disable-cpuid-features-ext 0xfc230000,0x2c42,0xc --num-cores=8  \
  ~/github/shenandoah.fix-bootstrap-logs/build/linux-x86_64-server-fastdebug/jdk/bin/java \
  -XX:ActiveProcessorCount=8 -XX:-UseNUMA \
  -XX:-TieredCompilation -XX:+UseShenandoahGC -XX:ShenandoahGCMode=generational -XX:+UnlockExperimentalVMOptions \
  -XX:-ShenandoahPacing -XX:+UnlockDiagnosticVMOptions -XX:-ShenandoahUncommit -Xms12g -Xmx12g \
  -XX:+ShenandoahAllocFailureALot -XX:+ShenandoahVerify \
  -javaagent:$HOME/lib/jHiccup/target/jHiccup.jar=-l,results/genshen/dacapo/h2.jhiccup.log,-i,1000,-a \
  -Xlog:async -Xlog:gc*=info,safepoint*=info,handshake*=info:results/genshen/dacapo/1/lusearch.jvm.log::filecount=0,filesize=0 \
  -jar $HOME/lib/dacapo-evaluation-git-0d047f55.jar --scratch-directory ./tmp/dacapo-scratch/dacapo \
  --latency-csv --converge --variance 5 lusearch

  EXIT_CODE=$?
  if [[ ""${EXIT_CODE}"" != ""0"" && ""${EXIT_CODE}"" != ""95"" ]]
  then
    echo ""${COUNT} rr has recorded a crash (${EXIT_CODE}) in ${_RR_TRACE_DIR}/latest-trace""
    exit 1
  else
    echo ""${COUNT} rr has not recorded a crash""
    rm -fr $_RR_TRACE_DIR
    rm results/genshen/dacapo/1/lusearch.jvm.log
  fi
  ((COUNT++))

done

The crash manifest on the 68th iteration of the script.
;;;","2023-08-29 10:28;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/shenandoah/pull/314
Date: 2023-08-28 23:35:46 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,
Capstone disassembler stops when it sees a bad instruction,JDK-8315038,5108888,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,aph,aph,aph,2023-08-25 08:52,2023-09-25 11:26,2023-10-01 09:55,2023-09-19 02:19,22,,,,,,,22,hotspot,,0,hsdis,oracle-triage-22,,,,,,,,,,,,,,,,,,"At present, the Capstone disassembler stops whenever it encounters an undefined instruction. We really need it not to do that, because we use undefined instructions in JIT-generated code for many things.

The fix is described here:
 https://www.capstone-engine.org/skipdata.html",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,generic,,,,,,,,,,,,,,"0|i32vo3:",9223372036854775807,b16,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2023-08-27 22:38;djelinski;some of its instruction definitions are incomplete/outdated/broken, for example version 4.0.2 did not decode kmov (c4 c1 78 92 f8); didn't try capstone 5 yet.;;;","2023-09-05 22:17;thartmann;ILW = Capstone stops disassembly on bad instructions, undefined instructions are used in JIT code, use binutils hsdis = MLM = P4;;;","2023-09-15 07:29;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/15763
Date: 2023-09-15 14:22:48 +0000;;;","2023-09-19 02:19;dukebot;Changeset: 670b4567
Author:    Andrew Haley <aph@openjdk.org>
Date:      2023-09-19 09:16:57 +0000
URL:       https://git.openjdk.org/jdk/commit/670b4567cf8229c9fd40c639a04dd1f1b7cfd551
;;;",,,,,,,,,,,,,,,,,,,,,,,
YoungPLABSize and OldPLABSize not aligned by ObjectAlignmentInBytes,JDK-8315031,5108880,Bug,Resolved,JDK,JDK,software,duke,,,P2,Fixed,ayang,ayang,ayang,2023-08-25 06:54,2023-09-29 00:54,2023-10-01 09:55,2023-09-28 10:15,17,21,22,,,,,22,hotspot,,0,amazon-interest,gc-g1,gc-parallel,,,,,,,,,,,,,,,,,"There is no logic checking PLAB sizes are aligned by ObjectAlignmentInBytes at start-up. However, Parallel and G1 assume that's true.

One can trigger the assertion failure using:

`make CONF=debug test` ...
...
TEST=gc/InfiniteList.java JTREG=""VM_OPTIONS=-XX:+UseParallelGC -XX:YoungPLABSize=4097 -XX:ObjectAlignmentInBytes=16""
```
or
```
TEST=gc/InfiniteList.java JTREG=""VM_OPTIONS=-XX:+UseG1GC -XX:-ResizePLAB -XX:YoungPLABSize=4097 -XX:ObjectAlignmentInBytes=16""
```

It's the same problem with `OldPLABSize`.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i32vmb:",9223372036854775807,master,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6b00f96c,,,,,,,,,"2023-09-25 05:34;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/15901
Date: 2023-09-25 12:26:26 +0000;;;","2023-09-28 10:15;dukebot;Changeset: 060db1b2
Author:    Albert Mingkun Yang <ayang@openjdk.org>
Date:      2023-09-28 17:13:10 +0000
URL:       https://git.openjdk.org/jdk/commit/060db1b2a2d0946327e47a6c2a380c9fb5593b01
;;;",,,,,,,,,,,,,,,,,,,,,,,,,
The macro definition for LoongArch64 zero build is not accurate.,JDK-8315020,5108869,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,aoqi,aoqi,aoqi,2023-08-25 02:59,2023-09-15 00:48,2023-10-01 09:55,2023-08-28 04:13,11,17,18,19,20,21,22,22,infrastructure,,0,jdk11u-fix-request,jdk11u-fix-yes,jdk17u-fix-request,jdk17u-fix-yes,jdk21u-fix-request,jdk21u-fix-SQE-ok,jdk21u-fix-yes,,,,,,,,,,,,,"The ""LOONGARCH"" is not a macro that must be defined. It is not a C/C++ pre-defined macro and is also not pre-defined in libraries such as libffi. We'd better use a macro defined in jdk.",,,,,,,,,,,,JDK-8316338,JDK-8316339,JDK-8315492,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8270517,,,,,,,,,,,other,,,,,,,,,linux,,,,,"0|i32vjv:",9223372036854775807,b13,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@429c566,,,,,,,,,"2023-08-25 11:37;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/15428
Date: 2023-08-25 10:17:38 +0000;;;","2023-08-28 04:13;dukebot;Changeset: 725ec0ce
Author:    Ao Qi <aoqi@openjdk.org>
Committer: Fei Yang <fyang@openjdk.org>
Date:      2023-08-28 11:10:53 +0000
URL:       https://git.openjdk.org/jdk/commit/725ec0ce1b463b21cd4c5287cf4ccbee53ec7349
;;;","2023-08-28 21:56;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk21u/pull/109
Date: 2023-08-28 11:51:47 +0000;;;","2023-08-28 21:56;aoqi;Fix Request (21u)

Clean backport to fix the LoongArch64 zero build. LoongArch zero build and GHA tests all passed.;;;","2023-09-13 21:20;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/1738
Date: 2023-09-14 04:04:39 +0000;;;","2023-09-13 21:28;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk11u-dev/pull/2129
Date: 2023-09-14 04:05:23 +0000;;;","2023-09-14 20:40;aoqi;Fix Request (17u, 11u)

This backport fixes LoongArch64 Zero build. The patch doesn't apply clean due to the lack of RISCV32 code in jdk17u and jdk11u. This backport does not include modifications to the RISCV32 part. More details could be found in the PR. Both backports have been reviewed by fyang. LoongArch is added to Debian Ports, and the backport will help the builds in Debian.;;;",,,,,,,,,,,,,,,,,,,,
Generational ZGC: Strong OopStorage stats reported as weak roots,JDK-8314990,5108839,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,stefank,stefank,stefank,2023-08-24 23:39,2023-08-31 00:54,2023-10-01 09:55,2023-08-25 01:11,21,22,,,,,,22,hotspot,,0,genzgc,,,,,,,,,,,,,,,,,,,"Found by Jonas Norlinder:
ZOopStorageSetIteratorStrong::apply has incorrect ZRootStatTimerevent. Should record strong roots but are recording weak roots.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,21,,,,,,,"0|i32vd7:",9223372036854775807,b13,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6b00f96c,,,,,,,,,"2023-08-24 23:49;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/15420
Date: 2023-08-24 14:43:51 +0000;;;","2023-08-25 01:11;dukebot;Changeset: dcd6e756
Author:    Jonas Norlinder <7039722+JonasNorlinder@users.noreply.github.com>
Committer: Stefan Karlsson <stefank@openjdk.org>
Date:      2023-08-25 08:10:09 +0000
URL:       https://git.openjdk.org/jdk/commit/dcd6e756718b656d43f4575558f41ce0c28d0eca
;;;",,,,,,,,,,,,,,,,,,,,,,,,,
VM build without C2 still fails after JDK-8313530,JDK-8314951,5108789,Bug,Resolved,JDK,JDK,software,duke,,,P2,Fixed,jiefu,jiefu,jiefu,2023-08-24 07:05,2023-09-15 05:46,2023-10-01 09:55,2023-08-24 22:01,22,,,,,,,22,hotspot,,0,c2,jvmci,oraclejdk-na,oracle-triage-17,oracle-triage-21,oracle-triage-22,tencent-interest,,,,,,,,,,,,,"#
# A fatal error has been detected by the Java Runtime Environment:
#
#  Internal Error (/data/home/jiefu/jdk/src/hotspot/share/jvmci/jvmci_globals.cpp:146), pid=513141, tid=513146
#  assert(EnableVectorSupportchecked) failed: EnableVectorSupport flag not checked
#
# JRE version:  (22.0) (fastdebug build )
# Java VM: OpenJDK 64-Bit Client VM (fastdebug 22-internal-adhoc.jiefu.jdk, mixed mode, emulated-client, compressed class ptrs, unknown gc, linux-amd64)
# Core dump will be written. Default location: Core dumps may be processed with ""/usr/lib/systemd/systemd-coredump %P %u %g %s %t %c %h %e"" (or dumping to /data/home/jiefu/jdk/make/core.513141)
#


Stack: [0x00007fcadfd88000,0x00007fcadfe89000],  sp=0x00007fcadfe85590,  free space=1013k
Native frames: (J=compiled Java code, j=interpreted, Vv=VM code, C=native code)
V  [libjvm.so+0x10af402]  VMError::report_and_die(int, char const*, char const*, __va_list_tag*, Thread*, unsigned char*, void*, void*, char const*, int, unsigned long)+0x482  (jvmci_globals.cpp:146)
V  [libjvm.so+0x10afbf0]  VMError::report_and_die(Thread*, char const*, int, unsigned long, VMErrorType, char const*, __va_list_tag*)+0x0  (vmError.cpp:1579)
V  [libjvm.so+0x50eb11]  report_vm_error(char const*, int, char const*, char const*, ...)+0xf1  (debug.cpp:191)
V  [libjvm.so+0xa661ac]  (jvmci_globals.cpp:146)
V  [libjvm.so+0x1606ae]  Arguments::check_vm_args_consistency()+0x4e  (arguments.cpp:1878)
V  [libjvm.so+0x161ae7]  Arguments::finalize_vm_init_args(bool)+0x107  (arguments.cpp:3031)
V  [libjvm.so+0x1666e1]  Arguments::parse(JavaVMInitArgs const*)+0x6e1  (arguments.cpp:3871)
V  [libjvm.so+0x1035db9]  Threads::create_vm(JavaVMInitArgs*, bool*)+0xd9  (threads.cpp:451)
V  [libjvm.so+0x8fdc85]  JNI_CreateJavaVM+0x55  (jni.cpp:3576)
C  [libjli.so+0x507f]  JavaMain+0x8f  (java.c:1522)
C  [libjli.so+0x8b59]  ThreadJavaMain+0x9  (java_md.c:650)",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8313530,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i32v23:",9223372036854775807,b13,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2023-08-24 07:24;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/15419
Date: 2023-08-24 14:16:38 +0000;;;","2023-08-24 07:35;thartmann;ILW = Same as JDK-8313530 = P2;;;","2023-08-24 22:01;dukebot;Changeset: d0240591
Author:    Jie Fu <jiefu@openjdk.org>
Date:      2023-08-25 04:59:19 +0000
URL:       https://git.openjdk.org/jdk/commit/d02405917406a355a11741bb278ea58c3a4642fb
;;;",,,,,,,,,,,,,,,,,,,,,,,,
CMS may miss NMT tag after mark stack expansion,JDK-8314950,5108788,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,zgu,zgu,zgu,2023-08-24 06:53,2023-08-30 01:08,2023-10-01 09:55,2023-08-24 08:50,11-pool,,,,,,,11.0.21,hotspot,,0,jdk11u-fix-request,jdk11u-fix-yes,nmt,sustaining,,,,,,,,,,,,,,,,@mbaesken pointed this out in offline email,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8308006,,,,,,,,,,,,,,,,,,,,,,,,,"0|i32v1v:",9223372036854775807,b05,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,,,"2023-08-24 06:53;zgu;Hello,  we noticed the following change in  jdk11u-dev  :

 

8308006: Missing NMT memory tagging in CMS

 

https://github.com/openjdk/jdk11u-dev/commit/be0de41d42ab5278484053e9492270431edcc174

 

this  adds  MemTracker::record_virtual_memory_type(brs.base(), mtGC);

into 2 allocate functions.

 

But there is similar coding  in   void CMSMarkStack::expand() {  … } 

In the same file below the allocate functions  ;

Would we need there   a     MemTracker::record_virtual_memory_type   call as well  ?

 

 ;;;","2023-08-24 07:46;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk11u-dev/pull/2097
Date: 2023-08-24 14:41:42 +0000;;;","2023-08-24 08:50;dukebot;Changeset: cde3cd2a
Author:    Zhengyu Gu <zgu@openjdk.org>
Date:      2023-08-24 15:49:08 +0000
URL:       https://git.openjdk.org/jdk11u-dev/commit/cde3cd2a940a83ecf62ec800897420b16e3e1386
;;;","2023-08-24 23:24;shade;Hey [~zgu], I see this was pushed without 11u maintainer approval. Please seek one retroactively with jdk11u-fix-request.;;;","2023-08-26 05:39;zgu;Fix Request [11u]

This is a small fix with low risk.

Sorry, I integrated without an approval.

;;;","2023-08-27 12:42;goetz;[11u]
Please next time precede bugs only in 11 by [11u] in the title.
;;;","2023-08-30 01:06;dukebot;Changeset: cde3cd2a
Author:    Zhengyu Gu <zgu@openjdk.org>
Date:      2023-08-24 15:49:08 +0000
URL:       https://git.openjdk.org/jdk11u/commit/cde3cd2a940a83ecf62ec800897420b16e3e1386
;;;",,,,,,,,,,,,,,,,,,,,
Shenandoah: Unable to throw OOME on back-to-back Full GCs,JDK-8314935,5108773,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,wkemper,shade,shade,2023-08-24 02:55,2023-09-20 15:40,2023-10-01 09:55,2023-09-12 22:55,17,21,22,,,,,22,hotspot,,0,amazon-interest,gc-shenandoah,jdk17u-fix-request,jdk17u-fix-yes,jdk21u-fix-request,jdk21u-fix-yes,oraclejdk-na,oracle-triage-22,,,,,,,,,,,,"If you run existing tier1 tests with Shenandoah, then this would show up:

```
% CONF=macosx-aarch64-server-fastdebug make test TEST=runtime/ClassInitErrors/TestOutOfMemoryDuringInit.java TEST_VM_OPTS=""-Xlog:gc:file=/tmp/gc.log -XX:+UseShenandoahGC""

...


TEST RESULT: Error. Program `/Users/shipilev/Work/shipilev-jdk/build/macosx-aarch64-server-fastdebug/images/jdk/bin/java' timed out (timeout set to 480000ms, elapsed time including timeout handling was 491523ms).
```

The GC log would give the never-ending cycle of Full GCs, never actually throwing OOME:

```
[48.620s][info][gc] Trigger: Handle Allocation Failure
[49.001s][info][gc] GC(64) Cancelling GC: Allocation Failure During Evacuation
[49.002s][info][gc] GC(64) Cannot finish degeneration, upgrading to Full GC
[49.522s][info][gc] GC(64) Pause Degenerated GC (Outside of Cycle) 62M->62M(64M) 901.858ms
[49.522s][info][gc] Failed to allocate TLAB, 3096B
[49.522s][info][gc] Cancelling GC: Allocation Failure
[49.523s][info][gc] Trigger: Handle Allocation Failure
[49.921s][info][gc] GC(65) Cancelling GC: Allocation Failure During Evacuation
[49.923s][info][gc] GC(65) Cannot finish degeneration, upgrading to Full GC
[50.389s][info][gc] GC(65) Pause Degenerated GC (Outside of Cycle) 62M->62M(64M) 865.560ms
[50.389s][info][gc] Failed to allocate Shared, 24B
[50.389s][info][gc] Cancelling GC: Allocation Failure
[50.390s][info][gc] Trigger: Handle Allocation Failure
[50.908s][info][gc] GC(66) Pause Full 62M->62M(64M) 517.640ms
[50.908s][info][gc] Failed to allocate TLAB, 3184B
[50.908s][info][gc] Cancelling GC: Allocation Failure
[50.910s][info][gc] Trigger: Handle Allocation Failure
```

Similar thing seems to happen with `compiler/uncommontrap/TestDeoptOOM.java`",,,,,,,,,,,,JDK-8316134,JDK-8316140,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8309034,,,,JDK-8316632,,,,,,,,,,,,,,,,,,,,,,,,,"0|i32uyj:",9223372036854775807,b15,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2023-08-30 16:41;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/15500
Date: 2023-08-30 23:33:57 +0000;;;","2023-09-07 14:15;dukebot;Changeset: 716201c7
Author:    William Kemper <wkemper@openjdk.org>
Committer: Y. Srinivas Ramakrishna <ysr@openjdk.org>
Date:      2023-09-07 21:14:28 +0000
URL:       https://git.openjdk.org/jdk/commit/716201c77d160dc78db61957aa002eef71641688
;;;","2023-09-07 15:49;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/1724
Date: 2023-09-07 22:43:46 +0000;;;","2023-09-08 08:32;roboduke;[jdk17u-fix-request] Approval Request from William Kemper
Unclean backport, but trivial `nullptr`/`NULL` conflict. Passed GHA, also Dacapo, SpecJBB, Extremem and Heapothesys.;;;","2023-09-08 11:21;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk21u/pull/147
Date: 2023-09-08 18:15:09 +0000;;;","2023-09-08 11:26;roboduke;[jdk21u-fix-request] Approval Request from William Kemper
Backport is clean. Fixes an issue that may prevent Shenandoah from raising an OOME when expected.;;;","2023-09-12 03:04;shade;Unfortunately, the failure still reproduces even after the fix.

$ CONF=macosx-aarch64-server-fastdebug make test TEST=runtime/ClassInitErrors/TestOutOfMemoryDuringInit.java TEST_VM_OPTS=""-Xlog:gc:file=/tmp/gc.log -XX:+UseShenandoahGC""

... <timeout> 

GC log still says:

```
...
[116.035s][info][gc] GC(167) Cancelling GC: Allocation Failure During Evacuation
[116.037s][info][gc] GC(167) Cannot finish degeneration, upgrading to Full GC
[116.507s][info][gc] GC(167) Pause Degenerated GC (Outside of Cycle) 63M->63M(64M) 774.624ms
[116.507s][info][gc] Failed to allocate Shared, 16B
[116.507s][info][gc] Cancelling GC: Allocation Failure
[116.508s][info][gc] Trigger: Handle Allocation Failure
[116.867s][info][gc] GC(168) Cancelling GC: Allocation Failure During Evacuation
[116.869s][info][gc] GC(168) Cannot finish degeneration, upgrading to Full GC
[117.369s][info][gc] GC(168) Pause Degenerated GC (Outside of Cycle) 63M->63M(64M) 860.462ms
[117.369s][info][gc] Failed to allocate TLAB, 3096B
[117.369s][info][gc] Cancelling GC: Allocation Failure
[117.370s][info][gc] Trigger: Handle Allocation Failure
[117.710s][info][gc] GC(169) Cancelling GC: Allocation Failure During Evacuation
[117.712s][info][gc] GC(169) Cannot finish degeneration, upgrading to Full GC
[118.212s][info][gc] GC(169) Pause Degenerated GC (Outside of Cycle) 63M->63M(64M) 842.008ms
[118.212s][info][gc] Failed to allocate Shared, 24B
[118.212s][info][gc] Cancelling GC: Allocation Failure
[118.214s][info][gc] Trigger: Handle Allocation Failure
[118.513s][info][gc] GC(170) Cancelling GC: Allocation Failure During Evacuation
[118.515s][info][gc] GC(170) Cannot finish degeneration, upgrading to Full GC
[118.976s][info][gc] GC(170) Pause Degenerated GC (Outside of Cycle) 63M->63M(64M) 762.032ms
...
```

Please don't backport until this is fully fixed.;;;","2023-09-12 09:27;wkemper;Re-opening to investigate.;;;","2023-09-12 10:16;shade;You have to submit a new bug. This one is already resolved and even has backports.
I think bots would even barf when seeing the attempt to backport the unresolved issue.;;;","2023-09-14 07:47;kcr;[~wkemper] Alexsey is correct. It can (and did) cause some bot confusion. For future reference, it is never the right thing to do to reopen a bug that has been resolved as Fixed with a pushed commit.;;;","2023-09-14 15:47;wkemper;Apologies.;;;",,,,,,,,,,,,,,,,
ChoiceFormat does not specify IllegalArgumentExceptions,JDK-8314925,5108763,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,jlu,kganapureddy,kganapureddy,2023-08-24 00:29,2023-09-12 11:20,2023-10-01 09:55,2023-08-31 16:03,,,,,,,,22,core-libs,,0,conformance,noreg-doc,,,,,,,,,,,,,,,,,,"ChoiceFormat:setChoices(double[] limits, String[] formats) and ChoiceFormat::applyPattern(String newPattern) can throw IllegalArgumentException. As a result, the constructors that call them can also throw the same exception.

The spec is silent on this behavior, the API doc should be updated to specify this.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8315148,,,,,,,,,,,,,,,,,,,,,,,,generic,,,,,,,,,generic,,,,,"0|i32uwb:",9223372036854775807,b14,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6fc9e792,,,,,,,,,"2023-08-29 10:00;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/15473
Date: 2023-08-29 16:53:29 +0000;;;","2023-08-31 16:03;dukebot;Changeset: 7754ac05
Author:    Justin Lu <jlu@openjdk.org>
Date:      2023-08-31 23:02:26 +0000
URL:       https://git.openjdk.org/jdk/commit/7754ac05062c698b8601048ae447849d982c8dbe
;;;",,,,,,,,,,,,,,,,,,,,,,,,,
[lworld] AllocationMergesTests.java fails IR verification,JDK-8314923,5108761,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,thartmann,dsimms,dsimms,2023-08-23 23:31,2023-08-25 02:09,2023-10-01 09:55,2023-08-25 02:09,repo-valhalla,,,,,,,repo-valhalla,hotspot,,0,c2,lw4,lw5,lworld,noreg-self,,,,,,,,,,,,,,,"Failed IR Rules (1) of Methods (1)
----------------------------------
1) Method ""int compiler.c2.irTests.scalarReplacement.AllocationMergesTests.testEscapeInCallAfterMerge_C2(boolean,boolean,int,int)"" - [Failed IR rules: 1]:
   * @IR rule 1: ""@compiler.lib.ir_framework.IR(phase={DEFAULT}, applyIfCPUFeatureAnd={}, applyIf={}, applyIfCPUFeatureOr={}, applyIfCPUFeature={}, counts={""_#ALLOC#_"", ""2""}, failOn={}, applyIfAnd={}, applyIfOr={}, applyIfNot={})""
     > Phase ""PrintOptoAssembly"":
       - counts: Graph contains wrong number of nodes:
         * Constraint 1: ""(.*precise .*\R((.*(?i:mov|mv|xorl|nop|spill).*|\s*)\R)*.*(?i:call,static).*wrapper for: _new_instance_Java)""
           - Failed comparison: [found] 1 = 2 [given]
             - Matched node:
               * 19c     movq    RSI, precise compiler/c2/irTests/scalarReplacement/AllocationMergesTests$Point: 0x00007f3504514188:Constant:exact *	# ptr
                 1a6     movq    [rsp + #0], R11	# spill
                 1aa     xorl    RDX, RDX	# int
                         nop 	# 3 bytes pad for loops and calls
                 1af     call,static  wrapper for: _new_instance_Java

>>> Check stdout for compilation output of the failed methods
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8287061,JDK-8314999,,,,,,,,,,,,,,,,,,,,,,,,"0|i32uvv:",9223372036854775807,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2023-08-24 07:25;thartmann;The test fails because the IR framework fails to detect this allocation due to the 64-bit mem-mem spill. The spill happens only in Valhalla because the _new_instance_java call has an additional _is_larval argument that increases register pressure:

154     B11: #	out( B16 B12 ) <- in( B1 )  Freq: 0.000100017
154     movq    RSI, precise compiler/c2/irTests/scalarReplacement/AllocationMergesTests$Point: 0x00007f95a82bb2a8:Constant:exact *	# ptr
15e     xorl    RDX, RDX	# int
160     pushq   [rsp + #8]	# 64-bit mem-mem spill
	popq    [rsp + #0]
        nop 	# 2 bytes pad for loops and calls
16b     call,static  wrapper for: _new_instance_Java
        # compiler.c2.irTests.scalarReplacement.AllocationMergesTests::testEscapeInCallAfterMerge @ bci:0 (line 201) L[0]=rsp + #0 L[1]=RBP L[2]=rsp + #20 L[3]=rsp + #16 L[4]=rsp + #24 L[5]=_
        # compiler.c2.irTests.scalarReplacement.AllocationMergesTests::testEscapeInCallAfterMerge_C2 @ bci:6 (line 216) L[0]=rsp + #0 L[1]=RBP L[2]=rsp + #20 L[3]=rsp + #16 L[4]=rsp + #24
        # OopMap {[0]=Oop [8]=Oop off=368/0x170}

This is an IR framework issue that I'll fix with JDK-8314999 in mainline. I'll put a stop-the-gap-solution in Valhalla.;;;","2023-08-25 01:52;thartmann;Missing Valhalla support for JDK-8287061 (if any), will be implemented by JDK-8315003.;;;","2023-08-25 02:00;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/valhalla/pull/919
Date: 2023-08-25 08:55:23 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,
[lw5] null restrictions can only be applied to value classes,JDK-8314913,5108747,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,vromero,vromero,vromero,2023-08-23 17:25,2023-08-24 18:27,2023-10-01 09:55,2023-08-24 18:27,repo-valhalla,,,,,,,repo-valhalla,tools,,0,lw5,lworld,,,,,,,,,,,,,,,,,,"according to the latest version of JEP 401, null restrictions are only applicable to value classes with an implicit constructor",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i32usr:",9223372036854775807,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4dca67bd,,,,,,,,,"2023-08-24 18:27;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/valhalla/pull/916
Date: 2023-08-25 01:16:40 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,,,
tools/jpackage/windows/Win8282351Test.java fails with java.lang.AssertionError: Expected [0]. Actual [1618]:,JDK-8314909,5108743,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,asemenyuk,msheppar,msheppar,2023-08-23 17:05,2023-09-25 11:25,2023-10-01 09:55,2023-09-18 13:14,21,,,,,,,22,tools,,0,intermittent,sbr,sn_152,sn_153,,,,,,,,,,,,,,,,"[21:31:17.345] Succeeded in building MSI Installer Package package
[21:31:17.551] TRACE: exec: Done. Exit code: 0
[21:31:17.552] TRACE: assertEquals(0): Check command [c:\\ade\\mesos\\work_dir\\jib-master\\install\\jdk-21+27-2343\\windows-x64.jdk\\jdk-21\\bin\\jpackage.exe --dest .\\test\\output --name Win8282351Test$-$$-$$$ --type msi --app-image .\\test\\appimage\\Win8282351Test --win-menu --win-shortcut -J-Djlink.debug=true --verbose](13) exited with 0 code
[21:31:17.553] TRACE: assertTrue(): Check [.\\test\\output\\Win8282351Test$-$$-$$$-1.0.msi] path exists
[21:31:17.554] TRACE: assertTrue(): Check [.\\test\\output\\Win8282351Test$-$$-$$$-1.0.msi] is a file
[21:31:17.559] TRACE: Create [C:\\sb\\prod\\1688159313\\testoutput\\test-support\\jtreg_open_test_jdk_tier2\\scratch\\23\\test\\unpacked-msi\\unpack.bat] text file...
[21:31:17.560] TRACE: icacls "".\\test\\unpacked-msi"" /inheritance:e /grant Users:M
[21:31:17.560] TRACE: msiexec /a ""test\\output\\Win8282351Test$-$$-$$$-1.0.msi"" /qn TARGETDIR=""C:\\sb\\prod\\1688159313\\testoutput\\test-support\\jtreg_open_test_jdk_tier2\\scratch\\23\\test\\unpacked-msi\\Program Files""
[21:31:17.566] TRACE: Done
[21:31:17.569] TRACE: exec: Execute [cmd /c .\\test\\unpacked-msi\\unpack.bat](3); discard I/O...
[21:31:29.245] TRACE: exec: Done. Exit code: 1618
[21:31:32.247] TRACE: exec: Execute [cmd /c .\\test\\unpacked-msi\\unpack.bat](3); discard I/O...
[21:31:36.672] TRACE: exec: Done. Exit code: 1618
[21:31:40.677] TRACE: exec: Execute [cmd /c .\\test\\unpacked-msi\\unpack.bat](3); discard I/O...
[21:31:51.174] TRACE: exec: Done. Exit code: 1618
[21:31:56.176] TRACE: exec: Execute [cmd /c .\\test\\unpacked-msi\\unpack.bat](3); discard I/O...
[21:32:00.017] TRACE: exec: Done. Exit code: 1618
[21:32:06.023] TRACE: exec: Execute [cmd /c .\\test\\unpacked-msi\\unpack.bat](3); discard I/O...
[21:32:09.202] TRACE: exec: Done. Exit code: 1618
[21:32:16.205] TRACE: exec: Execute [cmd /c .\\test\\unpacked-msi\\unpack.bat](3); discard I/O...
[21:32:21.330] TRACE: exec: Done. Exit code: 1618
[21:32:29.342] TRACE: exec: Execute [cmd /c .\\test\\unpacked-msi\\unpack.bat](3); discard I/O...
[21:32:32.799] TRACE: exec: Done. Exit code: 1618
[21:32:41.801] TRACE: exec: Execute [cmd /c .\\test\\unpacked-msi\\unpack.bat](3); discard I/O...
[21:32:46.092] TRACE: exec: Done. Exit code: 1618
[21:32:56.103] ERROR: Expected [0]. Actual [1618]: Check command [cmd /c .\\test\\unpacked-msi\\unpack.bat](3) exited with 0 code
[21:32:56.104] [  FAILED  ] Win8282351Test.test; checks=7
[21:32:56.107] [==========] 1 tests ran
[21:32:56.107] [  PASSED  ] 0 tests
[21:32:56.110] [  FAILED  ] 1 test, listed below
[21:32:56.111] [  FAILED  ] Win8282351Test.test; workDir=[.\\test]
[21:32:56.111] 1 FAILED TEST
----------System.err:(57/3896)*----------
java.lang.AssertionError: Expected [0]. Actual [1618]: Check command [cmd /c .\\test\\unpacked-msi\\unpack.bat](3) exited with 0 code
	at jdk.jpackage.test.TKit.error(TKit.java:273)
	at jdk.jpackage.test.TKit.assertEquals(TKit.java:576)
	at jdk.jpackage.test.Executor$Result.assertExitCodeIs(Executor.java:186)
	at jdk.jpackage.test.Executor$Result.assertExitCodeIsZero(Executor.java:193)
	at jdk.jpackage.test.WindowsHelper.runMsiexecWithRetries(WindowsHelper.java:104)
	at jdk.jpackage.test.WindowsHelper.lambda$createMsiPackageHandlers$4(WindowsHelper.java:141)
	at jdk.jpackage.test.PackageTest$2.lambda$accept$1(PackageTest.java:469)
	at jdk.jpackage.test.PackageTest$2.handleAction(PackageTest.java:521)
	at jdk.jpackage.test.PackageTest$2.accept(PackageTest.java:463)
	at jdk.jpackage.test.PackageTest$2.accept(PackageTest.java:411)
	at jdk.jpackage.test.Functional$ThrowingConsumer.lambda$toConsumer$0(Functional.java:41)
	at java.base/java.lang.Iterable.forEach(Iterable.java:75)
	at jdk.jpackage.test.PackageTest.lambda$runActions$24(PackageTest.java:381)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1593)
	at jdk.jpackage.test.PackageTest.lambda$runActions$25(PackageTest.java:380)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1593)
	at jdk.jpackage.test.PackageTest.runActions(PackageTest.java:379)
	at jdk.jpackage.test.RunnablePackageTest.run(RunnablePackageTest.java:58)
	at Win8282351Test.test(Win8282351Test.java:104)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
	at java.base/java.lang.reflect.Method.invoke(Method.java:580)
	at jdk.jpackage.test.MethodCall.accept(MethodCall.java:145)
	at jdk.jpackage.test.TestInstance.run(TestInstance.java:230)
	at jdk.jpackage.test.TKit.lambda$ignoreExceptions$5(TKit.java:141)
	at jdk.jpackage.test.TKit.lambda$runTests$3(TKit.java:126)
	at java.base/java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1707)
	at java.base/java.util.stream.ReferencePipeline$Head.forEach(ReferencePipeline.java:762)
	at jdk.jpackage.test.TKit.lambda$runTests$4(TKit.java:123)
	at jdk.jpackage.test.Functional$ThrowingRunnable.lambda$toRunnable$0(Functional.java:105)
	at jdk.jpackage.test.TKit.withExtraLogStream(TKit.java:109)
	at jdk.jpackage.test.TKit.runTests(TKit.java:122)
	at jdk.jpackage.test.Main.runTests(Main.java:79)
	at jdk.jpackage.test.Main.lambda$main$2(Main.java:75)
	at jdk.jpackage.test.Functional$ThrowingRunnable.lambda$toRunnable$0(Functional.java:105)
	at jdk.jpackage.test.TKit.withExtraLogStream(TKit.java:109)
	at jdk.jpackage.test.Main.main(Main.java:75)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
	at java.base/java.lang.reflect.Method.invoke(Method.java:580)
	at com.sun.javatest.regtest.agent.MainWrapper$MainTask.run(MainWrapper.java:138)
	at java.base/java.lang.Thread.run(Thread.java:1583)
java.lang.RuntimeException: 1 FAILED TEST
	at jdk.jpackage.test.Main.reportSummary(Main.java:130)
	at jdk.jpackage.test.Main.runTests(Main.java:90)
	at jdk.jpackage.test.Main.lambda$main$2(Main.java:75)
	at jdk.jpackage.test.Functional$ThrowingRunnable.lambda$toRunnable$0(Functional.java:105)
	at jdk.jpackage.test.TKit.withExtraLogStream(TKit.java:109)
	at jdk.jpackage.test.Main.main(Main.java:75)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
	at java.base/java.lang.reflect.Method.invoke(Method.java:580)
	at com.sun.javatest.regtest.agent.MainWrapper$MainTask.run(MainWrapper.java:138)
	at java.base/java.lang.Thread.run(Thread.java:1583)

JavaTest Message: Test threw exception: java.lang.RuntimeException: 1 FAILED TEST
JavaTest Message: shutting down test

STATUS:Failed.`main' threw exception: java.lang.RuntimeException: 1 FAILED TEST",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8314910,JDK-8314911,JDK-8314912,,,,,,,JDK-8309738,,,,,,,,,,,x86_64,,,,,,,,,windows,,,,,"0|i32urv:",9223372036854775807,b16,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@3656b41f,,,,,,,,,"2023-08-29 13:23;asemenyuk;java.lang.AssertionError: Expected [0]. Actual [1618]: Check command [cmd /c .\\test\\unpacked-msi\\unpack.bat](3) exited with 0 code

MSI exit code 1618 indicates there is another msi session running. Probably a system update on the server where the test was being executed.;;;","2023-09-15 08:47;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/15766
Date: 2023-09-15 15:40:25 +0000;;;","2023-09-18 13:14;dukebot;Changeset: 1b104b63
Author:    Alexey Semenyuk <asemenyuk@openjdk.org>
Date:      2023-09-18 20:12:38 +0000
URL:       https://git.openjdk.org/jdk/commit/1b104b63a97ec947b34b85658153ab6c182cb56c
;;;",,,,,,,,,,,,,,,,,,,,,,,,
[lw5] rename j.l.NonAtomic to j.l.LooselyConsistentValue,JDK-8314899,5108733,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,vromero,vromero,vromero,2023-08-23 14:12,2023-08-23 17:29,2023-10-01 09:55,2023-08-23 17:29,repo-valhalla,,,,,,,repo-valhalla,tools,,0,lw5,lworld,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i32upn:",9223372036854775807,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4dca67bd,,,,,,,,,"2023-08-23 17:29;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/valhalla/pull/913
Date: 2023-08-24 00:23:40 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,,,
"[Lilliput/JDK17] Revert changes in zRelocate, prevent ZGC with Lilliput",JDK-8314894,5108720,Bug,Resolved,JDK,JDK,software,duke,,,P2,Fixed,rkennke,rkennke,rkennke,2023-08-23 07:22,2023-08-23 11:01,2023-10-01 09:55,2023-08-23 11:01,repo-lilliput-17,,,,,,,repo-lilliput-17,hotspot,,0,amazon-interest,lilliput,,,,,,,,,,,,,,,,,,The additions of SuspendibleThreadSet in zRelocate.cpp can cause deadlocks. This problem can not easily be solved without major work in Lilliput. Let's revert those changes and prevent usage of ZGC together with Lilliput.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,generic,,,,,,,,,generic,,,,,"0|i32umr:",9223372036854775807,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6b00f96c,,,,,,,,,"2023-08-23 07:35;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/lilliput-jdk17u/pull/56
Date: 2023-08-23 14:26:58 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,,,
Java_java_util_prefs_FileSystemPreferences_lockFile0 write result errno in missing case,JDK-8314883,5108706,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,mbaesken,mbaesken,mbaesken,2023-08-23 04:46,2023-09-29 01:18,2023-10-01 09:55,2023-08-24 03:45,21,22,,,,,,22,core-libs,,0,amazon-interest,jdk21u-fix-request,,,,,,,,,,,,,,,,,,there seems to be a codepath in Java_java_util_prefs_FileSystemPreferences_lockFile0  where the errno is not stored but potentially accessed in the calling Java code.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,generic,,,,,,,,,generic,,,,,"0|i32ujn:",9223372036854775807,b13,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@38ded199,,,,,,,,,"2023-08-23 06:52;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/15402
Date: 2023-08-23 13:45:14 +0000;;;","2023-08-24 03:45;dukebot;Changeset: 97b94cb1
Author:    Matthias Baesken <mbaesken@openjdk.org>
Date:      2023-08-24 10:44:09 +0000
URL:       https://git.openjdk.org/jdk/commit/97b94cb1cdeba00f4bba7326a300c0336950f3ec
;;;","2023-09-29 01:16;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk21u/pull/214
Date: 2023-09-29 08:10:35 +0000;;;","2023-09-29 01:18;mbaesken;jdk21u backport request
I would like to have the patch in jdk21u as well, because the issue is present there too.  The backport is clean and low risk.;;;",,,,,,,,,,,,,,,,,,,,,,,
"[Lilliput] Revert changes in zRelocate, prevent ZGC with Lilliput",JDK-8314863,5108684,Bug,Resolved,JDK,JDK,software,duke,,,P2,Fixed,rkennke,rkennke,rkennke,2023-08-23 01:40,2023-08-23 07:38,2023-10-01 09:55,2023-08-23 07:38,repo-lilliput,repo-lilliput-17,,,,,,repo-lilliput,hotspot,,0,amazon-interest,lilliput,,,,,,,,,,,,,,,,,,The additions of SuspendibleThreadSet in zRelocate.cpp can cause deadlocks. This problem can not easily be solved without major work in Lilliput. Let's revert those changes and prevent usage of ZGC together with Lilliput.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,generic,,,,,,,,,generic,,,,,"0|i32uer:",9223372036854775807,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6b00f96c,,,,,,,,,"2023-08-23 01:51;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/lilliput/pull/107
Date: 2023-08-23 08:42:01 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,,,
[lworld] Merge jdk-22+7 incomplete merge of 8287061,JDK-8314862,5108683,Bug,Closed,JDK,JDK,software,duke,,,P4,Fixed,thartmann,dsimms,dsimms,2023-08-23 01:36,2023-08-23 23:32,2023-10-01 09:55,2023-08-23 05:37,repo-valhalla,,,,,,,repo-valhalla,hotspot,,0,c2,lw4,lw5,,,,,,,,,,,,,,,,,"Quite a number of test failures show crashing deoptimization:

E.g. compiler/valhalla/inlinetypes/TestCastMismatch.java

#11 <signal handler called>
#12 ObjectValue::maybe_null (this=0x7fffa8733ad0) at /scratch/dsimms/hotspot/git/valhalla/open/src/hotspot/share/code/debugInfo.hpp:173
#13 0x00007ffff668a367 in StackValue::create_stack_value<RegisterMap> (fr=0x7fffa8732748, reg_map=0x7fffa8732788, sv=0x7fffa8733ad0) at /scratch/dsimms/hotspot/git/valhalla/open/src/hotspot/share/runtime/stackValue.cpp:251
#14 0x00007ffff683e89f in compiledVFrame::create_stack_value (this=0x7fffa8732740, sv=0x7fffa8733ad0) at /scratch/dsimms/hotspot/git/valhalla/open/src/hotspot/share/runtime/vframe_hp.cpp:230
#15 0x00007ffff683db8f in compiledVFrame::locals (this=0x7fffa8732740) at /scratch/dsimms/hotspot/git/valhalla/open/src/hotspot/share/runtime/vframe_hp.cpp:66
#16 0x00007ffff683ad99 in vframeArrayElement::fill_in (this=0x7fff6801df60, vf=0x7fffa8732740, realloc_failures=false) at /scratch/dsimms/hotspot/git/valhalla/open/src/hotspot/share/runtime/vframeArray.cpp:121
#17 0x00007ffff683ca13 in vframeArray::fill_in (this=0x7fff6801cc80, thread=0x7ffff0569d70, frame_size=10, chunk=0x7fffa802e400, reg_map=0x7fffc681e6c0, realloc_failures=false) at /scratch/dsimms/hotspot/git/valhalla/open/src/hotspot/share/runtime/vframeArray.cpp:523
#18 0x00007ffff683c995 in vframeArray::allocate (thread=0x7ffff0569d70, frame_size=10, chunk=0x7fffa802e400, reg_map=0x7fffc681e6c0, sender=..., caller=..., self=..., realloc_failures=false) at /scratch/dsimms/hotspot/git/valhalla/open/src/hotspot/share/runtime/vframeArray.cpp:510
#19 0x00007ffff5c30b03 in Deoptimization::create_vframeArray (thread=0x7ffff0569d70, fr=..., reg_map=0x7fffc681e6c0, chunk=0x7fffa802e400, realloc_failures=false) at /scratch/dsimms/hotspot/git/valhalla/open/src/hotspot/share/runtime/deoptimization.cpp:1775
#20 0x00007ffff5c2c28d in Deoptimization::fetch_unroll_info_helper (current=0x7ffff0569d70, exec_mode=2) at /scratch/dsimms/hotspot/git/valhalla/open/src/hotspot/share/runtime/deoptimization.cpp:588
#21 0x00007ffff5c33cd4 in Deoptimization::uncommon_trap (current=0x7ffff0569d70, trap_request=172, exec_mode=2) at /scratch/dsimms/hotspot/git/valhalla/open/src/hotspot/share/runtime/deoptimization.cpp:2669

The ObjectValue ""_is_init"" field, specific to Valhalla is null

The merge is not yet in project, but here:

https://github.com/MrSimms/valhalla/tree/lworld_merge_jdk_22_7
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"2023-08-23 01:43;dsimms;merge_conflict_orig.zip;https://bugs.openjdk.org/secure/attachment/105233/merge_conflict_orig.zip",,,,,,,,,,,,,,,,,,,,,,"0|i32uej:",9223372036854775807,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,Verified,,"2023-08-23 01:46;dsimms;The only realy merge conflict of any great note, which might need to be checked for correctness occurred in macro.cpp (attached original conflicts).

There is still incomplete support for JDK-8287061: https://github.com/openjdk/valhalla/commit/40a66d986f923ba029fba2e26ac7d0a71bdad7ed;;;","2023-08-23 01:53;dsimms;And upon reading my own comments, looks like JDK-8287061 introduced ""ObjectMergeValue"" where by ""_is_init"" is not known by DebugInfoReadStream::read_object_merge_value() ;;;","2023-08-23 05:37;thartmann;https://github.com/MrSimms/valhalla/commit/8601e6d06c8ebed675abc764d368659752d2ee7c;;;","2023-08-23 23:32;dsimms;Some work remains see: escape.cpp, but tier 1 - 3 pass except for:

compiler/c2/irTests/scalarReplacement/AllocationMergesTests.java

Opening post merge integration issue: 8314923 and problems list.

Thank you !;;;",,,,,,,,,,,,,,,,,,,,,,,
SharedRuntime::handle_wrong_method() gets called too often when resolving Continuation.enter,JDK-8314850,5108672,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,pchilanomate,pchilanomate,pchilanomate,2023-08-22 21:27,2023-08-31 00:54,2023-10-01 09:55,2023-08-24 11:11,21,22,,,,,,22,hotspot,,0,amazon-interest,jdk21u-fix-request,jdk21u-fix-SQE-ok,jdk21u-fix-yes,,,,,,,,,,,,,,,,"The check in SharedRuntime::reresolve_call_site() ""caller.is_compiled_frame() && !caller.is_deoptimized_frame()"" fails when caller is Continuation.enterSpecial because it is a native method. This means that if the static callsite to Continuation.enter was patched to point to an nmethod and then the nmethod was marked non-entrant we will always call SharedRuntime::handle_wrong_method() thereafter when resolving Continuation.enter because the callsite will never be reset back to the clean state. 

This issue was found after the following report in the loom-dev mailing list: 

https://mail.openjdk.org/pipermail/loom-dev/2023-August/006083.html

Test from mail:

```
import java.util.concurrent.*;

public class Virt {
    public static void main(String[] args) throws Exception {
        while (true) {
            ExecutorService e = Executors.newVirtualThreadPerTaskExecutor();
            for (int i = 0; i < 100_000; i++) e.submit(Virt::task);
            e.shutdown(); e.awaitTermination(100, TimeUnit.MINUTES);
        }
    }
    static void task() { }
}
```",,,,,,,,,,,,JDK-8315055,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i32uc3:",9223372036854775807,b13,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,,,"2023-08-23 07:42;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/15403
Date: 2023-08-23 14:25:12 +0000;;;","2023-08-24 11:11;dukebot;Changeset: 8e4240c3
Author:    Patricio Chilano Mateo <pchilanomate@openjdk.org>
Date:      2023-08-24 18:08:16 +0000
URL:       https://git.openjdk.org/jdk/commit/8e4240c3167ff6c803f3391f70ef9cfa7f408085
;;;","2023-08-24 11:29;pchilanomate;Fix Request (21u). 
This bug causes unnecessary overhead when resolving Continuation.enter which can lead to a performance impact. Simple fix and applies cleanly.;;;","2023-08-24 12:34;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk21u/pull/100
Date: 2023-08-24 19:24:51 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,
[JVMCI] HotSpotJVMCIRuntime.lookupType throws unexpected ClassNotFoundException,JDK-8314819,5108640,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,dnsimon,dnsimon,dnsimon,2023-08-22 13:42,2023-09-15 05:46,2023-10-01 09:55,2023-08-24 03:14,22,,,,,,,22,hotspot,,0,jvmci,oracle-triage-17,oracle-triage-21,oracle-triage-22,regression,,,,,,,,,,,,,,,JDK-8313421 accidentally introduced a change in behavior where by HotSpotJVMCIRuntime.lookupType can now throw a ClassNotFoundException instead of a NoClassDefFoundError.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8310055,,,,JDK-8313421,,,,,,,,,,,,,,,,,,,,,,,,,"0|i32u4z:",9223372036854775807,b13,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2023-08-22 14:23;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/15393
Date: 2023-08-22 21:01:26 +0000;;;","2023-08-22 22:34;thartmann;ILW = Wrong exception thrown from JVMCI runtime method, on lookup failure with Graal as JIT and JVMCI, no workaround = MMH = P3;;;","2023-08-24 03:14;dukebot;Changeset: 75e19e0d
Author:    Doug Simon <dnsimon@openjdk.org>
Date:      2023-08-24 10:12:16 +0000
URL:       https://git.openjdk.org/jdk/commit/75e19e0d5e6a705bcd10a9f9afbb6fdc3939adbb
;;;",,,,,,,,,,,,,,,,,,,,,,,,
(fs) java/nio/file/Files/CopyInterference.java should use TestUtil::supportsLinks,JDK-8314810,5108631,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,bpb,bpb,bpb,2023-08-22 11:08,2023-08-28 14:55,2023-10-01 09:55,2023-08-23 08:33,22,,,,,,,22,core-libs,,0,noreg-self,,,,,,,,,,,,,,,,,,,The value returned by TestUtil::supportsLinks should be used to determine whether links can be created. Otherwise running the test on Windows without elevated privileges will fail.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8114830,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i32u2z:",9223372036854775807,b12,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@674604a9,,,,,,,,,"2023-08-22 11:32;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/15391
Date: 2023-08-22 18:26:27 +0000;;;","2023-08-23 08:33;dukebot;Changeset: 096b7ff0
Author:    Brian Burkhalter <bpb@openjdk.org>
Date:      2023-08-23 15:31:33 +0000
URL:       https://git.openjdk.org/jdk/commit/096b7ff0977ba2455b329b0865a380a1fb4c99d4
;;;",,,,,,,,,,,,,,,,,,,,,,,,,
[testbug] Add test to all the XYCharts to check if chart components are removed when series is cleared,JDK-8314779,5108597,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,kpk,kpk,kpk,2023-08-22 10:14,2023-09-15 07:06,2023-10-01 09:55,2023-09-06 08:03,jfx21,,,,,,,jfx22,javafx,,0,sn_152,test_sprint,testbug,,,,,,,,,,,,,,,,,"As suggested in the code review  https://github.com/openjdk/jfx/pull/1214 (JDK-8283675) write test for all XYCharts similar to
testChartFillRemovedOnClearingSeries() and testChartLineRemovedOnClearingSeries() tests added for AreaChart and LineChart respectively.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8283675,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i32tvf:",9223372036854775807,b08,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@67282485,,,,,,,,,"2023-09-04 06:21;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jfx/pull/1231
Date: 2023-09-04 13:15:47 +0000;;;","2023-09-06 08:03;dukebot;Changeset: 3bfede8b
Author:    Karthik P K <kpk@openjdk.org>
Date:      2023-09-06 15:01:41 +0000
URL:       https://git.openjdk.org/jfx/commit/3bfede8b550455fab6259b37f3622ea3830a142c
;;;",,,,,,,,,,,,,,,,,,,,,,,,,
GenShen: Alias young and old marking bits to legacy Shenandoah marking bit in gc state,JDK-8314777,5108595,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,kdnilsen,kdnilsen,kdnilsen,2023-08-22 09:04,2023-08-28 16:34,2023-10-01 09:55,2023-08-28 16:34,,,,,,,,,hotspot,,0,amazon-interest,genshen,,,,,,,,,,,,,,,,,,"In some cases, it is necessary for GenShen to distinguish young and old marking. In other cases, we have modified code to check for young_marking || old_marking. If we instead restored the marking state from upstream and aliased these two other states to it, we could eliminate some of the differences from upstream.",,";2023-08-23 00:57;ysr;7200",,0,7200,,,0,7200,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i32tuz:",9223372036854775807,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6b00f96c,,,,,,,,,"2023-08-22 11:12;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/shenandoah/pull/309
Date: 2023-08-22 00:10:42 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,,,
Make {@Incubating} conventional,JDK-8314762,5108574,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,prappo,prappo,prappo,2023-08-22 05:05,2023-08-31 00:55,2023-10-01 09:55,2023-08-28 02:40,,,,,,,,22,infrastructure,,0,,,,,,,,,,,,,,,,,,,,"While it's not a requirement for a javadoc tag to start with a lowercase letter, it is good to follow conventions in the absence of contraindications. All other standard doclet and JDK-specific tags are camelCase and do not have non-letter (e.g. punctuation, such as . or -) symbols in their names.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i32tqb:",9223372036854775807,b13,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@429c566,,,,,,,,,"2023-08-22 05:13;prappo;https://openjdk.org/jeps/11 does not seem to indicate the particular form of the tag to use, other than cautioning against using @deprecated.;;;","2023-08-22 05:26;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/15387
Date: 2023-08-22 12:19:42 +0000;;;","2023-08-28 02:40;dukebot;Changeset: 0901d75e
Author:    Pavel Rappo <prappo@openjdk.org>
Date:      2023-08-28 09:38:02 +0000
URL:       https://git.openjdk.org/jdk/commit/0901d75e074322c5a8d55e3c72c4cba4291fb00c
;;;",,,,,,,,,,,,,,,,,,,,,,,,
VirtualThread.parkNanos timeout adjustment when pinned should be replaced,JDK-8314759,5108571,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,alanb,alanb,alanb,2023-08-22 05:05,2023-09-15 12:07,2023-10-01 09:55,2023-08-24 09:53,21,22,,,,,,22,core-libs,,0,amazon-interest,jdk21u-fix-yes,noreg-hard,,,,,,,,,,,,,,,,,"If yielding fails due to the pinning then VirtualThread.parkNanos parks on the carrier thread with the remaining time. The calculation of the remaining time should be changed to:

long remainingNanos = nanos - (System.nanoTime() - startTime);

The current code isn't correct for cases where System.nanoTimes return a negative value or when parking for durations close to Long.MAX_VALUE (292 years).",,,,,,,,,,,,JDK-8316378,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i32tpn:",9223372036854775807,b13,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4c088d55,,,,,,,,,"2023-08-23 23:43;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/15405
Date: 2023-08-23 16:41:23 +0000;;;","2023-08-24 09:53;dukebot;Changeset: d9fc6b69
Author:    Alan Bateman <alanb@openjdk.org>
Date:      2023-08-24 16:51:20 +0000
URL:       https://git.openjdk.org/jdk/commit/d9fc6b6933ad733d1b2a4d2bd91ecb3824970ea8
;;;","2023-09-15 12:04;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk21u/pull/169
Date: 2023-09-15 18:59:14 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,
"Remove support for @beaninfo, @ToDo, @since.unbundled, and @Note",JDK-8314753,5108563,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,prappo,prappo,prappo,2023-08-22 02:32,2023-09-12 11:15,2023-10-01 09:55,2023-08-29 05:01,22,,,,,,,22,core-libs,,0,noreg-doc,,,,,,,,,,,,,,,,,,,"Those tags seem to have been effectively decommissioned, but their remnants are still there and when seen, raise needless questions.

@beaninfo seems to relate to UI:

  * JDK-7179078
  * JDK-4763438
  * JDK-8051548

@ToDo and @since.unbundled are not present in and hasn't been used since the initial load (2007).

@Note seems to relate to UI:

  * JDK-8285686
  * JDK-8227324
  * JDK-8222362",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i32tnv:",9223372036854775807,b13,,,,,,,,,,,"2023-08-22 04:17;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/15385
Date: 2023-08-22 11:09:39 +0000;;;","2023-08-29 05:01;dukebot;Changeset: a4e97aa4
Author:    Pavel Rappo <prappo@openjdk.org>
Date:      2023-08-29 12:00:19 +0000
URL:       https://git.openjdk.org/jdk/commit/a4e97aa4ebe6fcfc3ed9e45ed81df1d55e52d621
;;;",,,,,,,,,,,,,,,,,,,,,,,,,
1-10% regressions on Crypto micros,JDK-8314748,5108558,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,aph,chagedorn,chagedorn,2023-08-22 01:47,2023-09-12 11:18,2023-10-01 09:55,2023-08-31 01:33,11.0.20,17.0.8,20.0.2,21,22,8u391-perf,,22,hotspot,,0,amazon-interest,CPU23_10-defer-approved,CPU23_10-defer-SQE-OK,oracle-triage-22,perf-regression,,,,,,,,,,,,,,,We've noticed a 1-10% regression after https://github.com/openjdk/jdk/commit/5c4623b36076fd150136fac748ff0a59ff2dc8de on x64 and AArch64 with the Crypto micros. The regressions are more severe on AArch64.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8310429,,JDK-8315445,,,,JDK-8308682,,,,,,,,,,,,,,,,,,,,,,,,,"0|i32tmr:",9223372036854775807,b14,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2023-08-22 01:48;thartmann;ILW = Performance regression, crypto microbenchmarks, no workaround = MMH = P3;;;","2023-08-23 06:06;aph;Please don't describe this as a performance regression: the previous version was wrong. It's neither reasonable nor fair to make a performance comparison with incorrect code.

I don't think that there's much to be done about the AArch64 code, although I'm happy if someone can prove me wrong. but there may be a small improvement possible for x86. I'll have a look.;;;","2023-08-23 06:31;thartmann;Understood and agreed. However, the noticeable performance difference remains and the sole purpose of this ticket is to document it, with no intention to criticize the implementation. If we ultimately determine that there's no viable solution, closing this as ""Won't Fix"" is perfectly fine. Nevertheless, considering the x86_64 specific follow-up patch you previously supplied - which reduced the performance difference by 50% - we believe that it's worth investigating.;;;","2023-08-25 02:55;aph;There's a draft PR at https://github.com/openjdk/jdk/pull/15427. Please kick the tyres and let me know.;;;","2023-08-28 03:22;chagedorn;[~aph] Benchmarking results look fine - this is good to go. Thanks for the contribution!;;;","2023-08-30 02:37;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/15427
Date: 2023-08-25 09:50:25 +0000;;;","2023-08-31 01:33;dukebot;Changeset: b594f01f
Author:    Andrew Haley <aph@openjdk.org>
Date:      2023-08-31 08:31:31 +0000
URL:       https://git.openjdk.org/jdk/commit/b594f01fe4872d255f0f2fd2b1a908660e39f426
;;;",,,,,,,,,,,,,,,,,,,,
Remove all occurrences of and support for @revised,JDK-8314738,5108548,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,prappo,prappo,prappo,2023-08-22 00:37,2023-08-28 14:53,2023-10-01 09:55,2023-08-22 06:04,22,,,,,,,22,client-libs,,0,noreg-doc,,,,,,,,,,,,,,,,,,,This tag was used in both 1.4 (for NIO) and 9 (for Jigsaw) to generate the official JCP specifications using an altered javadoc tool.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i32tkj:",9223372036854775807,b12,,,,,,,,,,,"2023-08-22 01:47;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/15382
Date: 2023-08-22 08:42:32 +0000;;;","2023-08-22 06:04;dukebot;Changeset: f39fc0aa
Author:    Pavel Rappo <prappo@openjdk.org>
Date:      2023-08-22 13:02:53 +0000
URL:       https://git.openjdk.org/jdk/commit/f39fc0aa2de19332fa51af605ece0660891d8c7a
;;;",,,,,,,,,,,,,,,,,,,,,,,,,
Call AnimationTimer methods in JavaFX application thread,JDK-8314721,5108534,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,kpk,kpk,kpk,2023-08-21 23:02,2023-08-21 23:07,2023-10-01 09:55,2023-08-21 23:07,internal,,,,,,,internal,javafx,,0,,,,,,,,,,,,,,,,,,,,The changes made in JDK-8159048 makes it compulsory to call AnimationTimer methods in JavaFX application thread. Hence make changes in RenderPerf test framework to call AnimationTimer.start() and AnimationTimer.stop() methods in application thread.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8159048,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i32thf:",9223372036854775807,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4143e3f7,,,,,Fix Understood,,,,"2023-08-21 23:07;kpk;Changeset: a1918473
Author:    Karthik P K <kpk@openjdk.org>
Date:      2023-08-22 11:34:03 +0000
URL:       https://git.openjdk.org/jfx-sandbox/commit/a1918473b427dcc1324d004a58b304144b452ce9
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,
VM build without C1 fails after JDK-8313372,JDK-8314688,5108501,Bug,Resolved,JDK,JDK,software,duke,,,P2,Fixed,pxie,haosun,haosun,2023-08-21 18:05,2023-09-04 05:48,2023-10-01 09:55,2023-08-22 02:23,22,,,,,,,22,hotspot,,0,jvmci,oraclejdk-na,oracle-triage-17,oracle-triage-21,oracle-triage-22,tencent-interest,,,,,,,,,,,,,,"--------------------------------------
how to reproduce:

./configure --with-jvm-features=-compiler1 --with-debug-level=release
make images JOBS=32

--------------------------------------
here shows the snippet of error log

=== Output from failing command(s) repeated here ===
* For target hotspot_variant-server_libjvm_objs_BUILD_LIBJVM_link:
/usr/bin/ld: ~/tmp/build-release/hotspot/variant-server/libjvm/objs/jvmciCompilerToVMInit.o: in function `CompilerToVM::initialize_intrinsics(JVMCIEnv*)':
make/hotspot/src/hotspot/share/jvmci/jvmciCompilerToVMInit.cpp:252: undefined reference to `Compiler::is_intrinsic_supported(vmIntrinsicID)'
/usr/bin/ld: make/hotspot/src/hotspot/share/jvmci/jvmciCompilerToVMInit.cpp:252: undefined reference to `Compiler::is_intrinsic_supported(vmIntrinsicID)'
/usr/bin/ld: make/hotspot/src/hotspot/share/jvmci/jvmciCompilerToVMInit.cpp:252: undefined reference to `Compiler::is_intrinsic_supported(vmIntrinsicID)'
/usr/bin/ld: make/hotspot/src/hotspot/share/jvmci/jvmciCompilerToVMInit.cpp:252: undefined reference to `Compiler::is_intrinsic_supported(vmIntrinsicID)'
/usr/bin/ld: make/hotspot/src/hotspot/share/jvmci/jvmciCompilerToVMInit.cpp:252: undefined reference to `Compiler::is_intrinsic_supported(vmIntrinsicID)'
/usr/bin/ld: ~/tmp/build-release/hotspot/variant-server/libjvm/objs/jvmciCompilerToVMInit.o:make/hotspot/src/hotspot/share/jvmci/jvmciCompilerToVMInit.cpp:252: more undefined references to `Compiler::is_intrinsic_supported(vmIntrinsicID)' follow
collect2: error: ld returned 1 exit status

* All command lines available in ~/tmp/build-release/make-support/failure-logs.
=== End of repeated output ===


--------------------------------------
Note that VM build without C2 would fail either after JDK-8313372.
But the VM build failed early due to JDK-8313530",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8313372,,,,,,,,,,,,,,,generic,,,,,,,22,,linux,,,,,"0|i32ta3:",9223372036854775807,b12,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2023-08-21 20:37;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/15376
Date: 2023-08-22 03:33:03 +0000;;;","2023-08-21 23:57;thartmann;ILW = Build fails, non-default build without C1, no workaround = HLH = P2;;;","2023-08-22 02:23;dukebot;Changeset: 3e1b1bf9
Author:    bobpengxie <bobpengxie@tencent.com>
Committer: Tobias Hartmann <thartmann@openjdk.org>
Date:      2023-08-22 09:21:25 +0000
URL:       https://git.openjdk.org/jdk/commit/3e1b1bf94e7acf9717b837085e61fc05a7765de4
;;;",,,,,,,,,,,,,,,,,,,,,,,,
SA fails to properly attach to JVM after having just detached from a different JVM,JDK-8314679,5108491,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,cjplummer,cjplummer,cjplummer,2023-08-21 11:38,2023-09-20 00:28,2023-10-01 09:55,2023-08-23 13:13,22,,,,,,,22,hotspot,,0,jdk17u-fix-request,jdk17u-fix-yes,jdk21u-fix-request,jdk21u-fix-SQE-ok,jdk21u-fix-yes,,,,,,,,,,,,,,,"I noticed issues with both the HSDB GUI and clhsdb when attaching to a JVM, detaching, and then attaching to a different JVM (does not happening when reattaching to the same JVM). After the 2nd attach SA seems to be in a bad state which results in exceptions when issueing some commands. Specifically, instantiating a SA Klass wrapper fails. Here's one example:

$ build/linux-x64-debug/images/jdk/bin/jhsdb clhsdb
hsdb> attach 24845
Attaching to process 24845, please wait...
hsdb> jstack
<jstack output>
hsdb> detach
hsdb> attach 26842
Attaching to process 26842, please wait...
hsdb> jstack
WARNING: could not get Thread object: (7fa89c28aae0) sun.jvm.hotspot.types.WrongTypeException: No suitable match for type of address 0x00007fa7ff0478c8
sun.jvm.hotspot.types.WrongTypeException: No suitable match for type of address 0x00007fa7ff3acea0
	at jdk.hotspot.agent/sun.jvm.hotspot.runtime.InstanceConstructor.newWrongTypeException(InstanceConstructor.java:62)
	at jdk.hotspot.agent/sun.jvm.hotspot.runtime.VirtualBaseConstructor.instantiateWrapperFor(VirtualBaseConstructor.java:111)
	at jdk.hotspot.agent/sun.jvm.hotspot.oops.Metadata.instantiateWrapperFor(Metadata.java:78)
	at jdk.hotspot.agent/sun.jvm.hotspot.oops.MetadataField.getValue(MetadataField.java:43)
	at jdk.hotspot.agent/sun.jvm.hotspot.oops.MetadataField.getValue(MetadataField.java:40)
	at jdk.hotspot.agent/sun.jvm.hotspot.oops.Klass.getNextLinkKlass(Klass.java:125)
	at jdk.hotspot.agent/sun.jvm.hotspot.classfile.ClassLoaderData.find(ClassLoaderData.java:86)
	at jdk.hotspot.agent/sun.jvm.hotspot.classfile.ClassLoaderDataGraph.find(ClassLoaderDataGraph.java:61)
	at jdk.hotspot.agent/sun.jvm.hotspot.memory.SystemDictionary.getAbstractOwnableSynchronizerKlass(SystemDictionary.java:115)
	at jdk.hotspot.agent/sun.jvm.hotspot.runtime.DeadlockDetector.print(DeadlockDetector.java:82)
	at jdk.hotspot.agent/sun.jvm.hotspot.runtime.DeadlockDetector.print(DeadlockDetector.java:39)
	at jdk.hotspot.agent/sun.jvm.hotspot.tools.StackTrace.run(StackTrace.java:62)
	at jdk.hotspot.agent/sun.jvm.hotspot.CommandProcessor$27.doit(CommandProcessor.java:1153)
	at jdk.hotspot.agent/sun.jvm.hotspot.CommandProcessor.executeCommand(CommandProcessor.java:2212)
	at jdk.hotspot.agent/sun.jvm.hotspot.CommandProcessor.executeCommand(CommandProcessor.java:2182)
	at jdk.hotspot.agent/sun.jvm.hotspot.CommandProcessor.run(CommandProcessor.java:2053)
	at jdk.hotspot.agent/sun.jvm.hotspot.CLHSDB.run(CLHSDB.java:112)
	at jdk.hotspot.agent/sun.jvm.hotspot.CLHSDB.main(CLHSDB.java:44)
	at jdk.hotspot.agent/sun.jvm.hotspot.SALauncher.runCLHSDB(SALauncher.java:281)
	at jdk.hotspot.agent/sun.jvm.hotspot.SALauncher.main(SALauncher.java:500)
Can't print deadlocks: sun.jvm.hotspot.types.WrongTypeException: No suitable match for type of address 0x00007fa7ff3acea0
Error: sun.jvm.hotspot.types.WrongTypeException: No suitable match for type of address 0x00007fa7ff3acea0

I don't think it has anything to do with the ClassLoaderDataGraph or Klass.getNextLinkKlass(), since there are other exception stacks that don't include them. For example, in HSDB if you do the same attach/detach/attach sequence, you run into the following when Swing sends an update request to the Threads List window:

Exception in thread ""AWT-EventQueue-0"" sun.jvm.hotspot.types.WrongTypeException: No suitable match for type of address 0x00007f9827010220
	at jdk.hotspot.agent/sun.jvm.hotspot.runtime.InstanceConstructor.newWrongTypeException(InstanceConstructor.java:62)
	at jdk.hotspot.agent/sun.jvm.hotspot.runtime.VirtualBaseConstructor.instantiateWrapperFor(VirtualBaseConstructor.java:111)
	at jdk.hotspot.agent/sun.jvm.hotspot.oops.Metadata.instantiateWrapperFor(Metadata.java:78)
	at jdk.hotspot.agent/sun.jvm.hotspot.oops.Oop.getKlassForOopHandle(Oop.java:210)
	at jdk.hotspot.agent/sun.jvm.hotspot.oops.ObjectHeap.newOop(ObjectHeap.java:181)
	at jdk.hotspot.agent/sun.jvm.hotspot.oops.NarrowOopField.getValue(NarrowOopField.java:44)
	at jdk.hotspot.agent/sun.jvm.hotspot.oops.OopUtilities.threadOopGetName(OopUtilities.java:199)
	at jdk.hotspot.agent/sun.jvm.hotspot.runtime.JavaThread.getThreadName(JavaThread.java:376)
	at jdk.hotspot.agent/sun.jvm.hotspot.ui.JavaThreadsPanel$CachedThread.compute(JavaThreadsPanel.java:381)
	at jdk.hotspot.agent/sun.jvm.hotspot.ui.JavaThreadsPanel$CachedThread.getThreadID(JavaThreadsPanel.java:363)
	at jdk.hotspot.agent/sun.jvm.hotspot.ui.JavaThreadsPanel$JavaThreadsTableModel.getValueAt(JavaThreadsPanel.java:292)
	at java.desktop/javax.swing.JTable.getValueAt(JTable.java:2769)
<snip>",,,,,,,,,,,,JDK-8315277,JDK-8315402,JDK-8316577,JDK-8315305,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8294323,,,,,,,,,,,,,,,,,,,,,,,,,"0|i32t7v:",9223372036854775807,b12,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@714e388c,,,,,,,,,"2023-08-21 15:48;cjplummer;Does not seem to happen with JDK17.

I think the issue is likely the the introduction of a static variable that is not reinitialized every time the Observer's update() method is called (or perhaps there isn't even an Observer registered).;;;","2023-08-21 19:52;cjplummer;Seems to have started in JDK 20. I looked at every changeset in src/jdk.hotspot.agent that was committed during JDK 20 and nothing stood out.;;;","2023-08-22 16:28;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/15395
Date: 2023-08-22 23:22:37 +0000;;;","2023-08-23 13:13;dukebot;Changeset: 38a9edfb
Author:    Chris Plummer <cjplummer@openjdk.org>
Date:      2023-08-23 20:11:10 +0000
URL:       https://git.openjdk.org/jdk/commit/38a9edfb7ee2d91ff52074137c5b69e27bcdbdc3
;;;","2023-08-28 11:07;cjplummer;Fix Request (21u).
Needed to address issue uncovered by JDK-8294323, which was already backported to 21. Simple fix and applies cleanly. ;;;","2023-08-28 11:11;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk21u/pull/115
Date: 2023-08-28 18:04:34 +0000;;;","2023-09-14 05:03;goetz;8294323: Improve Shared Class Data
https://github.com/openjdk/jdk/commit/be70bc1c58eaec876aa1ab36eacba90b901ac9b8
https://github.com/openjdk/jdk17u-dev/commit/6db7aa688a3f07dadb66f359fc6eb9db0ad5e187;;;","2023-09-14 05:46;goetz;Fix request [17u]

I backport this for parity with 17.0.10-oracle.
Low risk, trivial change in debug coding.
Clean except for dropping change to a test file not in 17.
Test passes and fails without the fix. SAP nightly testing passed.;;;","2023-09-14 05:53;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/1741
Date: 2023-09-14 12:44:43 +0000;;;","2023-09-14 10:28;cjplummer;[~goetz], did you intend to link to JDK-8294323, not JDK-8314063?;;;","2023-09-14 11:11;goetz;I wanted to link JDK-8313657 to JDK-8314063 because they depend on each other. Thanks for catching this.;;;","2023-09-14 11:17;cjplummer;Just to clarify, this is a long standing bug in the source, but wasn't exposed until JDK-8294323 was pushed. The bug was in FileMapInfo.java:

  public Type getTypeForVptrAddress(Address vptrAddress) {
    if (vTableTypeMap == null) {
      getHeader().createVtableTypeMapping();
    }
    return vTableTypeMap.get(vptrAddress);
  }

vTableTypeMap is cached and will be re-used on the next attach. It should be set back to null when initialize() is called.;;;",,,,,,,,,,,,,,,
Bump update version for OpenJDK: jdk-11.0.20.1,JDK-8314678,5108489,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,btaylor,btaylor,btaylor,2023-08-21 11:24,2023-08-29 04:45,2023-10-01 09:55,2023-08-22 08:05,11.0.20,,,,,,,11.0.20.1,infrastructure,,0,jdk11u-critical-request,jdk11u-critical-yes,,,,,,,,,,,,,,,,,,We want to fix a regression which was introduced by JDK-8302483 by downporting JDK-8313765 to 11.0.20 and need a new version for it.,,,,,,,,,,,,JDK-8315221,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8303432,JDK-8314677,,,,,,,,,,,,,,,,,,,,,,,,"0|i32t7f:",9223372036854775807,b01,,,,,,,,,,,"2023-08-21 11:37;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk11u/pull/76
Date: 2023-08-21 18:31:14 +0000;;;","2023-08-22 08:04;dukebot;Changeset: 1b3c516e
Author:    Ben Taylor <btaylor@openjdk.org>
Committer: Volker Simonis <simonis@openjdk.org>
Date:      2023-08-22 15:02:45 +0000
URL:       https://git.openjdk.org/jdk11u/commit/1b3c516eff4fcfb67cea4005be80d0812b2a74f0
;;;",,,,,,,,,,,,,,,,,,,,,,,,,
Bump update version for OpenJDK: jdk-17.0.8.1,JDK-8314677,5108488,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,btaylor,simonis,simonis,2023-08-21 10:43,2023-08-29 04:45,2023-10-01 09:55,2023-08-22 08:05,17.0.8,,,,,,,17.0.8.1,infrastructure,,0,jdk17u-critical-request,jdk17u-critical-yes,,,,,,,,,,,,,,,,,,We want to fix a regression which was introduced by JDK-8302483 by downporting JDK-8313765 to 17.0.8 and need a new version for it.,,,,,,,,,,,,JDK-8315222,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8314678,,,,JDK-8303433,,,,,,,,,,,,,,,,,,,,,,,,,"0|i32t77:",9223372036854775807,b01,,,,,,,,,,,"2023-08-21 11:00;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u/pull/375
Date: 2023-08-21 17:55:53 +0000;;;","2023-08-22 08:05;dukebot;Changeset: b31f232f
Author:    Ben Taylor <btaylor@openjdk.org>
Committer: Volker Simonis <simonis@openjdk.org>
Date:      2023-08-22 15:03:32 +0000
URL:       https://git.openjdk.org/jdk17u/commit/b31f232f9acff5a08a18759e6ba408da64938b43
;;;",,,,,,,,,,,,,,,,,,,,,,,,,
jshell shows duplicated signatures of javap,JDK-8314662,5108472,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,jlahoda,cstein,cstein,2023-08-21 09:00,2023-09-12 11:22,2023-10-01 09:55,2023-09-04 01:37,21,,,,,,,22,tools,,0,,,,,,,,,,,,,,,,,,,,"With TOOLING loaded, typing `javap(` followed by TAB yields:

Actual:
```
>jshell TOOLING
|  Welcome to JShell -- Version 21
|  For an introduction type: /help intro
jshell> javap(
Signatures:
void javap(Class<?> type) throws Exception
void javap(String...)
void javap(Class<?> type) throws Exception
void javap(String...)
```

Expected:
```
>jshell TOOLING
|  Welcome to JShell -- Version 21
|  For an introduction type: /help intro
jshell> javap(
Signatures:
void javap(Class<?> type) throws Exception
void javap(String...)
```

Signatures of other methods defined in the TOOLING script are, as expected, only shown once.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,21,,,,,,,"0|i32t3n:",9223372036854775807,b14,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@ef6d34f,,,,,,,,,"2023-08-30 04:00;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/15489
Date: 2023-08-30 10:53:15 +0000;;;","2023-09-04 01:37;dukebot;Changeset: 3094fd1a
Author:    Jan Lahoda <jlahoda@openjdk.org>
Date:      2023-09-04 08:36:41 +0000
URL:       https://git.openjdk.org/jdk/commit/3094fd1ac5153289434515d9b718bc5d6885b7dc
;;;",,,,,,,,,,,,,,,,,,,,,,,,,
Artifact in 3D primitives when we use large number of vertices,JDK-8314633,5108442,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,jdv,jdv,jdv,2023-08-21 01:30,2023-08-21 03:39,2023-10-01 09:55,2023-08-21 03:39,internal,,,,,,,internal,javafx,,0,javafx-metal,sn_151,,,,,,,,,,,,,,,,,,When we create a sphere with more vertices(>300) in rt/tests/performance/3DLighting we see artifacts.,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8302050,,,,,,,,,,,,,,,,,,"2023-08-21 01:32;jdv;Screenshot 2023-08-21 at 2.02.24 PM.png;https://bugs.openjdk.org/secure/attachment/105179/Screenshot+2023-08-21+at+2.02.24+PM.png",,,,,,,,generic,,,,,,,,,os_x,,,,,"0|i32swz:",9223372036854775807,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4143e3f7,,,,,,,,,"2023-08-21 01:55;jdv;When we have more than 64k vertices we use integer index buffer and we need to pass appropriate index type while drawing.;;;","2023-08-21 03:39;jdv;Changeset: 63f1cbc0
Author:    Jayathirth Rao D V <jayathirth.d.v@oracle.com>
Committer: Ambarish Rapte <arapte@openjdk.org>
Date:      2023-08-21 14:56:14 +0000
URL:       https://git.openjdk.org/jfx-sandbox/commit/63f1cbc00241e6c0045d6ac85d9e5939cbe05bed;;;",,,,,,,,,,,,,,,,,,,,,,,,,
Intra-case dominance check fails in the presence of a guard,JDK-8314632,5108441,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,abimpoudis,abimpoudis,abimpoudis,2023-08-21 01:08,2023-09-22 01:03,2023-10-01 09:55,2023-09-07 05:54,,,,,,,,22,tools,,0,jdk21u-fix-request,jdk21u-fix-SQE-ok-next,jdk21u-fix-yes,,,,,,,,,,,,,,,,,"Regardless of the presence of a guard, if intra-case dominance is violated, the switch needs to be rejected.

public class Test {
    void test(Object obj) {
       switch (obj) {
          case Integer _, CharSequence _, String _ when obj.hashCode() > 0 -> {
          }
          default -> throw new IllegalStateException(""Unexpected
value: "" + obj);
       }
    }
}

https://mail.openjdk.org/pipermail/amber-spec-experts/2023-August/003910.html
",,,,,,,,,,,,JDK-8316725,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i32swr:",9223372036854775807,b15,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4dca67bd,,,,,,,,,"2023-08-31 05:41;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/15515
Date: 2023-08-31 12:33:26 +0000;;;","2023-09-07 05:54;dukebot;Changeset: 81f8c57e
Author:    Aggelos Biboudis <abimpoudis@openjdk.org>
Committer: Jan Lahoda <jlahoda@openjdk.org>
Date:      2023-09-07 12:51:37 +0000
URL:       https://git.openjdk.org/jdk/commit/81f8c57e4a14e0186f608cbe5a899322df80fd30
;;;","2023-09-15 01:18;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk21u/pull/162
Date: 2023-09-15 08:10:31 +0000;;;","2023-09-15 08:55;roboduke;[jdk21u-fix-request] Approval Request from Aggelos Biboudis
The presence of a guard should not affect the intra-case dominance check. While this is a bug, it also has the potential to confuse users who want to understand the capability that a case with multiple patterns has to offer. It would be best to backport this bugfix to avoid this issue.;;;",,,,,,,,,,,,,,,,,,,,,,,
[lworld+vector] validation regression fixes and cleanups.,JDK-8314628,5108436,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,jbhateja,jbhateja,jbhateja,2023-08-20 23:35,2023-08-23 22:59,2023-10-01 09:55,2023-08-23 22:59,repo-valhalla,,,,,,,repo-valhalla,hotspot,,0,cleanup,lworld+vector,,,,,,,,,,,,,,,,,,"-  Fix various issues seen in VM/ClassFileParser/Compilers/CI Model during lworld+vector validation.
-  Code refactoring.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,generic,,,,,,,,,,,,,,"0|i32svn:",9223372036854775807,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2023-08-21 00:42;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/valhalla/pull/909
Date: 2023-08-21 07:36:19 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,,,
RISC-V: -XX:MaxVectorSize does not work as expected,JDK-8314618,5108427,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,gcao,gcao,gcao,2023-08-20 06:17,2023-08-28 14:53,2023-10-01 09:55,2023-08-21 19:50,21,22,,,,,,22,hotspot,,0,c2,jdk21u-fix-request,jdk21u-fix-SQE-ok,jdk21u-fix-yes,oraclejdk-na,oracle-triage-22,,,,,,,,,,,,,,"Hi all,  we found that when the specified -XX:MaxVectorSize=16 no bigger than the detected _initial_vector_length=32, it causes the MaxVectorSize to be set incorrectly. 

MaxVectorSize is updated in src/hotspot/cpu/riscv/vm_version_riscv.cpp#VM_Version::c2_initialize().

```
  if (UseRVV) {
    if (FLAG_IS_DEFAULT(MaxVectorSize)) {
      MaxVectorSize = _initial_vector_length;
    } else if (MaxVectorSize < 16) {
      warning(""RVV does not support vector length less than 16 bytes. Disabling RVV."");
      UseRVV = false;
    } else if (is_power_of_2(MaxVectorSize)) {
      if (MaxVectorSize > _initial_vector_length) {
        warning(""Current system only supports max RVV vector length %d. Set MaxVectorSize to %d"",
                _initial_vector_length, _initial_vector_length);
      }
      MaxVectorSize = _initial_vector_length;
    } else {
      vm_exit_during_initialization(err_msg(""Unsupported MaxVectorSize: %d"", (int)MaxVectorSize));
    }
  }
```

It's that RISC-V only supports max-width vectorization at first, so it's unconditionally set to hardware max-width here. However, after https://github.com/openjdk/jdk/commit/43c71ddf923d442499449948f4bf8a7c79249af0, vectors with small widths are supported, so here it needs to be adjusted accordingly. The correct should be If MaxVectorSize is less than _initial_vector_length, then MaxVectorSize should be used as the final value.

This issue affects C2 autovectorization and some specific Vector API interfaces such as VectorSupport.getMaxLaneCount on RISC-V.

We can verify the problem using the following test case:

```
import jdk.internal.vm.vector.VectorSupport;

public class GetMaxVectorSizeTest {
    public static void main(String[] args) {
        final int maxLaneCount = VectorSupport.getMaxLaneCount(byte.class);
        System.out.println(""maxLaneCount:"" + maxLaneCount);
    }
}
```

The compile command is as follows:

```
javac --add-exports java.base/jdk.internal.vm.vector=ALL-UNNAMED GetMaxVectorSizeTest.java
```

RISC-V without the -XX:MaxVectorSize=16 has the following execution results(risc-v rvv vector length is set 256 bit):
```
zifeihan@plct-c8:~/jdk-rvv/build/linux-riscv64-server-fastdebug/jdk/bin$ ./java -XX:+UnlockExperimentalVMOptions -XX:+UseRVV --add-exports java.base/jdk.internal.vm.vector=ALL-UNNAMED  GetMaxVectorSizeTest
maxLaneCount:32
```

RISC-V using the -XX:MaxVectorSize=16 results in the following(risc-v rvv vector length is set 256 bit):

```
zifeihan@plct-c8:~/jdk-rvv/build/linux-riscv64-server-fastdebug/jdk/bin$ ./java -XX:MaxVectorSize=16 -XX:+UnlockExperimentalVMOptions -XX:+UseRVV --add-exports java.base/jdk.internal.vm.vector=ALL-UNNAMED  GetMaxVectorSizeTest
maxLaneCount:32
```


AArch64 without the -XX:MaxVectorSize=16 has the following execution results(aarch64 sve vector length is set 256 bit):
```
zifeihan@d915263bc793:~/jdk/build/linux-aarch64-server-fastdebug/jdk/bin$ ./java --add-exports java.base/jdk.internal.vm.vector=ALL-UNNAMED  GetMaxVectorSizeTest
maxLaneCount:32
```

AArch64 using the -XX:MaxVectorSize=16 results in the following(aarch64 sve vector length is set 256 bit):
```
zifeihan@d915263bc793:~/jdk/build/linux-aarch64-server-fastdebug/jdk/bin$ ./java  -XX:MaxVectorSize=16  --add-exports java.base/jdk.internal.vm.vector=ALL-UNNAMED  GetMaxVectorSizeTest
maxLaneCount:16
```

X86 without the -XX:MaxVectorSize=16 has the following execution results(x86 avx512, vector length is set 512 bit):

```
zifeihan@plct-c8:~/jdk/build/linux-riscv64-server-fastdebug/jdk/bin$ java --add-exports java.base/jdk.internal.vm.vector=ALL-UNNAMED  GetMaxVectorSizeTest
maxLaneCount:64
```

X86 using the -XX:MaxVectorSize=16 results in the following(x86 avx512, vector length is set 512 bit):

```
zifeihan@plct-c8:~/jdk/build/linux-riscv64-server-fastdebug/jdk/bin$ java  -XX:MaxVectorSize=16  --add-exports java.base/jdk.internal.vm.vector=ALL-UNNAMED  GetMaxVectorSizeTest
maxLaneCount:16
```



The fix code is as follows:

```
diff --git a/src/hotspot/cpu/riscv/vm_version_riscv.cpp b/src/hotspot/cpu/riscv/vm_version_riscv.cpp
index 83f6f38d253..cf64e08ebc8 100644
--- a/src/hotspot/cpu/riscv/vm_version_riscv.cpp
+++ b/src/hotspot/cpu/riscv/vm_version_riscv.cpp
@@ -267,8 +267,8 @@ void VM_Version::c2_initialize() {
       if (MaxVectorSize > _initial_vector_length) {
         warning(""Current system only supports max RVV vector length %d. Set MaxVectorSize to %d"",
                 _initial_vector_length, _initial_vector_length);
+        MaxVectorSize = _initial_vector_length;
       }
-      MaxVectorSize = _initial_vector_length;
     } else {
       vm_exit_during_initialization(err_msg(""Unsupported MaxVectorSize: %d"", (int)MaxVectorSize));
     }
```

",,,,,,,,,,,,JDK-8314854,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8302453,,,,,,,,,,,riscv,,,,,,,,,linux,,,,,"0|i32stn:",9223372036854775807,b12,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2023-08-20 19:06;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/15356
Date: 2023-08-21 02:01:35 +0000;;;","2023-08-20 22:49;thartmann;ILW = MaxVectorSize flag does not work as expected, MaxVectorSize with value smaller than _initial_vector_length on RISC-V, no workaround = MLH = P4;;;","2023-08-21 19:50;dukebot;Changeset: a66b5df1
Author:    Gui Cao <gcao@openjdk.org>
Committer: Fei Yang <fyang@openjdk.org>
Date:      2023-08-22 02:47:52 +0000
URL:       https://git.openjdk.org/jdk/commit/a66b5df14a163d2990e6dd746906942367e4fdb2
;;;","2023-08-21 20:11;gcao;Fix Request (21u):
Hi, This issue also exists in the JDK21U, so i would like to backport this to jdk21u make -XX:MaxVectorSize work correctly on Linux RISC-V platform.
test/hotspot/jtreg/compiler/loopopts/superword/TestUnorderedReduction.java passed with fastdebug and use build using qemu.;;;","2023-08-21 20:15;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk21u/pull/80
Date: 2023-08-22 03:08:46 +0000;;;",,,,,,,,,,,,,,,,,,,,,,
TestUnorderedReduction.java fails with -XX:MaxVectorSize=32 and -XX:+AlignVector,JDK-8314612,5108416,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,epeter,gcao,gcao,2023-08-18 19:23,2023-09-18 15:32,2023-10-01 09:55,2023-09-13 03:48,21,22,,,,,,22,hotspot,,0,c2,c2-superword,oracle-triage-17,oracle-triage-22,regression,,,,,,,,,,,,,,,"1. How to produce the bug

When changing -XX:MaxVectorSize to 32 in `test/hotspot/jtreg/compiler/loopopopts/superword/TestUnorderedReduction.java`, and executing it with the following command, we will get an execution error. 

```
zifeihan@d915263bc793:~/jdk$ git diff test/hotspot/jtreg/compiler/loopopts/superword/TestUnorderedReduction.java
diff --git a/test/hotspot/jtreg/compiler/loopopts/superword/TestUnorderedReduction.java b/test/hotspot/jtreg/compiler/loopopts/superword/TestUnorderedReduction.java
index 18f3b6930ea..952a56dd842 100644
--- a/test/hotspot/jtreg/compiler/loopopts/superword/TestUnorderedReduction.java
+++ b/test/hotspot/jtreg/compiler/loopopts/superword/TestUnorderedReduction.java
@@ -40,7 +40,8 @@ public class TestUnorderedReduction {
     public static void main(String[] args) {
         TestFramework.runWithFlags(""-Xbatch"",
                                    ""-XX:CompileCommand=compileonly,compiler.loopopts.superword.TestUnorderedReduction::test*"",
-                                   ""-XX:MaxVectorSize=16"");
+                                   ""-XX:MaxVectorSize=32"",
+                                   ""-XX:+AvoidUnalignedAccesses"");
     }
 
     @Run(test = {""test1"", ""test2"", ""test3""})
```

Execute the command as follows(The jdk executed as above is a version of sve packaged with qemu-user):

```
/home/zifeihan/jtreg/bin/jtreg \
-J-Djavatest.maxOutputSize=500000 \
-Djdk.lang.Process.launchMechanism=vfork \
-v:default \
-concurrency:32 \
-timeout:50 \
-javaoption:-XX:UseSVE=2 \
-jdk:/home/zifeihan/jdk/build/linux-aarch64-server-fastdebug/jdk \
/home/zifeihan/jdk/test/hotspot/jtreg/compiler/loopopts/superword/TestUnorderedReduction.java
```

The exceptions are as follows:

```
----------System.out:(19/3921)----------
Run Flag VM:
Command line: [/home/zifeihan/jdk/build/linux-aarch64-server-fastdebug/jdk/bin/java -cp /home/zifeihan/jdk/build/linux-aarch64-server-fastdebug/jdk/bin/JTwork/classes/0/compiler/loopopts/superword/TestUnorderedReduction.d:/home/zifeihan/jdk/test/hotspot/jtreg/compiler/loopopts/superword:/home/zifeihan/jdk/build/linux-aarch64-server-fastdebug/jdk/bin/JTwork/classes/0/test/lib:/home/zifeihan/jdk/test/lib:/home/zifeihan/jdk/build/linux-aarch64-server-fastdebug/jdk/bin/JTwork/classes/0:/home/zifeihan/jdk/test/hotspot/jtreg:/home/zifeihan/jtreg/lib/javatest.jar:/home/zifeihan/jtreg/lib/jtreg.jar -Djdk.lang.Process.launchMechanism=vfork -XX:UseSVE=2 -Dtest.jdk=/home/zifeihan/jdk/build/linux-aarch64-server-fastdebug/jdk -Djava.library.path=. -cp /home/zifeihan/jdk/build/linux-aarch64-server-fastdebug/jdk/bin/JTwork/classes/0/compiler/loopopts/superword/TestUnorderedReduction.d:/home/zifeihan/jdk/build/linux-aarch64-server-fastdebug/jdk/bin/JTwork/classes/0/test/lib:/home/zifeihan/jdk/build/linux-aarch64-server-fastdebug/jdk/bin/JTwork/classes/0 -Xbootclasspath/a:. -XX:+UnlockDiagnosticVMOptions -XX:+WhiteBoxAPI -Xbatch -XX:CompileCommand=compileonly,compiler.loopopts.superword.TestUnorderedReduction::test* -XX:MaxVectorSize=32 -XX:+AvoidUnalignedAccesses compiler.lib.ir_framework.flag.FlagVM compiler.loopopts.superword.TestUnorderedReduction ]
[2023-08-19T02:00:01.969752090Z] Gathering output for process 91032
[2023-08-19T02:00:08.177648302Z] Waiting for completion for process 91032
[2023-08-19T02:00:08.180735552Z] Waiting for completion finished for process 91032
Output and diagnostic info for process 91032 was saved into 'pid-91032-output.log'
[2023-08-19T02:00:08.206587843Z] Waiting for completion for process 91032
[2023-08-19T02:00:08.208777677Z] Waiting for completion finished for process 91032
Run Test VM - [-Xbatch, -XX:CompileCommand=compileonly,compiler.loopopts.superword.TestUnorderedReduction::test*, -XX:MaxVectorSize=32, -XX:+AvoidUnalignedAccesses]:
Command line: [/home/zifeihan/jdk/build/linux-aarch64-server-fastdebug/jdk/bin/java -cp /home/zifeihan/jdk/build/linux-aarch64-server-fastdebug/jdk/bin/JTwork/classes/0/compiler/loopopts/superword/TestUnorderedReduction.d:/home/zifeihan/jdk/test/hotspot/jtreg/compiler/loopopts/superword:/home/zifeihan/jdk/build/linux-aarch64-server-fastdebug/jdk/bin/JTwork/classes/0/test/lib:/home/zifeihan/jdk/test/lib:/home/zifeihan/jdk/build/linux-aarch64-server-fastdebug/jdk/bin/JTwork/classes/0:/home/zifeihan/jdk/test/hotspot/jtreg:/home/zifeihan/jtreg/lib/javatest.jar:/home/zifeihan/jtreg/lib/jtreg.jar -Djava.library.path=. -Xbootclasspath/a:. -XX:+UnlockDiagnosticVMOptions -XX:+WhiteBoxAPI -Djdk.lang.Process.launchMechanism=vfork -XX:UseSVE=2 -Dir.framework.server.port=34611 -Xbatch -XX:CompileCommand=compileonly,compiler.loopopts.superword.TestUnorderedReduction::test* -XX:MaxVectorSize=32 -XX:+AvoidUnalignedAccesses -XX:+PrintCompilation -XX:+UnlockDiagnosticVMOptions -XX:+LogCompilation -XX:CompilerDirectivesFile=test-vm-compile-commands-pid-91034.log -XX:CompilerDirectivesLimit=31 -XX:-OmitStackTraceInFastThrow -DShouldDoIRVerification=true -XX:-BackgroundCompilation -XX:CompileCommand=quiet compiler.lib.ir_framework.test.TestVM compiler.loopopts.superword.TestUnorderedReduction ]
[2023-08-19T02:00:08.628667469Z] Gathering output for process 91057
[2023-08-19T02:00:16.553228083Z] Waiting for completion for process 91057
[2023-08-19T02:00:16.554576500Z] Waiting for completion finished for process 91057
Output and diagnostic info for process 91057 was saved into 'pid-91057-output.log'
[2023-08-19T02:00:16.712613250Z] Waiting for completion for process 91057
[2023-08-19T02:00:16.713073750Z] Waiting for completion finished for process 91057
[2023-08-19T02:00:16.719087791Z] Waiting for completion for process 91057
[2023-08-19T02:00:16.723273500Z] Waiting for completion finished for process 91057

----------System.err:(65/4837)----------

TestFramework test VM exited with code 1

Command Line:
/home/zifeihan/jdk/build/linux-aarch64-server-fastdebug/jdk/bin/java -DReproduce=true -cp /home/zifeihan/jdk/build/linux-aarch64-server-fastdebug/jdk/bin/JTwork/classes/0/compiler/loopopts/superword/TestUnorderedReduction.d:/home/zifeihan/jdk/test/hotspot/jtreg/compiler/loopopts/superword:/home/zifeihan/jdk/build/linux-aarch64-server-fastdebug/jdk/bin/JTwork/classes/0/test/lib:/home/zifeihan/jdk/test/lib:/home/zifeihan/jdk/build/linux-aarch64-server-fastdebug/jdk/bin/JTwork/classes/0:/home/zifeihan/jdk/test/hotspot/jtreg:/home/zifeihan/jtreg/lib/javatest.jar:/home/zifeihan/jtreg/lib/jtreg.jar -Djava.library.path=. -Xbootclasspath/a:. -XX:+UnlockDiagnosticVMOptions -XX:+WhiteBoxAPI -Djdk.lang.Process.launchMechanism=vfork -XX:UseSVE=2 -Dir.framework.server.port=34611 -Xbatch -XX:CompileCommand=compileonly,compiler.loopopts.superword.TestUnorderedReduction::test* -XX:MaxVectorSize=32 -XX:+AvoidUnalignedAccesses -XX:+PrintCompilation -XX:+UnlockDiagnosticVMOptions -XX:+LogCompilation -XX:CompilerDirectivesFile=test-vm-compile-commands-pid-91034.log -XX:CompilerDirectivesLimit=31 -XX:-OmitStackTraceInFastThrow -DShouldDoIRVerification=true -XX:-BackgroundCompilation -XX:CompileCommand=quiet compiler.lib.ir_framework.test.TestVM compiler.loopopts.superword.TestUnorderedReduction


Error Output
------------
Exception in thread ""main"" compiler.lib.ir_framework.shared.TestRunException: 

Test Failures (1)
-----------------
Custom Run Test: @Run: runTests - @Tests: {test1,test2,test3}:
compiler.lib.ir_framework.shared.TestRunException: There was an error while invoking @Run method public void compiler.loopopts.superword.TestUnorderedReduction.runTests() throws java.lang.Exception
	at compiler.lib.ir_framework.test.CustomRunTest.invokeTest(CustomRunTest.java:162)
	at compiler.lib.ir_framework.test.AbstractTest.run(AbstractTest.java:104)
	at compiler.lib.ir_framework.test.CustomRunTest.run(CustomRunTest.java:89)
	at compiler.lib.ir_framework.test.TestVM.runTests(TestVM.java:822)
	at compiler.lib.ir_framework.test.TestVM.start(TestVM.java:249)
	at compiler.lib.ir_framework.test.TestVM.main(TestVM.java:164)
Caused by: java.lang.reflect.InvocationTargetException
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:118)
	at java.base/java.lang.reflect.Method.invoke(Method.java:580)
	at compiler.lib.ir_framework.test.CustomRunTest.invokeTest(CustomRunTest.java:159)
	... 5 more
Caused by: java.lang.RuntimeException: Wrong result test2: 3469730 != 5772800
	at compiler.loopopts.superword.TestUnorderedReduction.runTests(TestUnorderedReduction.java:65)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
	... 7 more



	at compiler.lib.ir_framework.test.TestVM.runTests(TestVM.java:857)
	at compiler.lib.ir_framework.test.TestVM.start(TestVM.java:249)
	at compiler.lib.ir_framework.test.TestVM.main(TestVM.java:164)


  #############################################################
   - To only run the failed tests use -DTest, -DExclude,
     and/or -DScenarios.
   - To also get the standard output of the test VM run with
     -DReportStdout=true or for even more fine-grained logging
     use -DVerbose=true.
  #############################################################
```



2. Reduced test case

```
public class TestUnorderedReduction {
    static final int RANGE = 512;
    static final int ITER  = 10;

    public static void main(String[] args) throws Exception {
        final TestUnorderedReduction testUnorderedReduction = new TestUnorderedReduction();
        for (int i = 0; i < 500; i++) {
            testUnorderedReduction.runTests();
        }
    }

    public void runTests() throws Exception {
        int[] data = new int[RANGE];

        init(data);
        for (int i = 0; i < ITER; i++) {
            int r1 = test2(data, i);
            int r2 = ref2(data, i);
            if (r1 != r2) {
                throw new RuntimeException(""Wrong result test2: "" + r1 + "" != "" + r2);
            }
        }
    }

    static int test2(int[] data, int sum) {
        for (int i = 0; i < RANGE; i+=8) {
            sum += 3 * data[i+0];
            sum += 3 * data[i+1];
            sum += 3 * data[i+2];
            sum += 3 * data[i+3];
            sum += 3 * data[i+4];
            sum += 3 * data[i+5];
            sum += 3 * data[i+6];
            sum += 3 * data[i+7];
        }
        return sum;
    }

    static int ref2(int[] data, int sum) {
        for (int i = 0; i < RANGE; i+=8) {
            sum += 3 * data[i+0];
            sum += 3 * data[i+1];
            sum += 3 * data[i+2];
            sum += 3 * data[i+3];
            sum += 3 * data[i+4];
            sum += 3 * data[i+5];
            sum += 3 * data[i+6];
            sum += 3 * data[i+7];
        }
        return sum;
    }

    static void init(int[] data) {
        for (int i = 0; i < RANGE; i++) {
            data[i] = 1;
        }
    }
}
```

Execute this simple test case with:`./java -Xbatch -XX:CompileCommand=compileonly,TestUnorderedReduction::test* -XX:UseSVE=2 TestUnorderedReduction`, it passes normally. But it fails when using :`./java -XX:+AvoidUnalignedAccesses -Xbatch -XX:CompileCommand=compileonly,TestUnorderedReduction::test* -XX:UseSVE=2 TestUnorderedReduction`.
```
zifeihan@d915263bc793:~/jdk/build/linux-aarch64-server-fastdebug/jdk/bin$ /home/zifeihan/qemu-7.1.0-rc1-aarch64/bin/qemu-aarch64 -cpu max,sve256=on ./java-bak -XX:+AvoidUnalignedAccesses -Xbatch -XX:CompileCommand=compileonly,TestUnorderedReduction::test* -XX:UseSVE=2 TestUnorderedReduction


CompileCommand: compileonly TestUnorderedReduction.test* bool compileonly = true
Exception in thread ""main"" java.lang.RuntimeException: Wrong result test2: 1034 != 1538
        at TestUnorderedReduction.runTests(TestUnorderedReduction.java:20)
        at TestUnorderedReduction.main(TestUnorderedReduction.java:8)
```

The sve is emulated using qemu-user and the sve width is set to 256.

```
/home/zifeihan/qemu-7.1.0-rc1-aarch64/bin/qemu-aarch64 -cpu max,sve256=on ./java -XX:+AvoidUnalignedAccesses -Xbatch -XX:CompileCommand=compileonly,TestUnorderedReduction::test* -XX:UseSVE=2 TestUnorderedReduction
```

3. C2 JIT code

3.1 C2 JIT code for TestUnorderedReduction::test2 when test case passes.

```
160     B15: #	out( B16 ) &lt;- in( B16 ) top-of-loop Freq: 64.0845
160     spill R13 -&gt; R10	# spill size = 32

164     B16: #	out( B15 B17 ) &lt;- in( B13 B15 ) Loop( B16-B15 inner main of N53) Freq: 65.0845
164     add R12, R1, R10, I2L #2	# ptr
168     add R13, R12, #16	# ptr
16c     loadV V17, [R13]	# vector (sve)
170     add R13, R12, #48	# ptr
174     loadV V18, [R13]	# vector (sve)
178     vlsl_imm V19, V17, #1
17c     add R13, R12, #80	# ptr
180     vaddI V17, V19, V17
184     loadV V19, [R13]	# vector (sve)
188     vlsl_imm V20, V18, #1
18c     vaddI V16, V16, V17
190     vaddI V17, V20, V18
194     add R13, R12, #112	# ptr
198     loadV V18, [R13]	# vector (sve)
19c     vlsl_imm V20, V19, #1
1a0     vaddI V16, V16, V17
1a4     vaddI V17, V20, V19
1a8     add R13, R12, #144	# ptr
1ac     loadV V19, [R13]	# vector (sve)
1b0     vlsl_imm V20, V18, #1
1b4     add R13, R12, #176	# ptr
1b8     vaddI V18, V20, V18
1bc     loadV V20, [R13]	# vector (sve)
1c0     vaddI V16, V16, V17
1c4     vlsl_imm V17, V19, #1
1c8     vaddI V16, V16, V18
1cc     vaddI V17, V17, V19
1d0     add R13, R12, #208	# ptr
1d4     loadV V18, [R13]	# vector (sve)
1d8     vlsl_imm V19, V20, #1
1dc     add R12, R12, #240	# ptr
1e0     vaddI V19, V19, V20
1e4     loadV V20, [R12]	# vector (sve)
1e8     vaddI V16, V16, V17
1ec     vlsl_imm V17, V18, #1
1f0     vaddI V16, V16, V19
1f4     vaddI V17, V17, V18
1f8     vlsl_imm V18, V20, #1
1fc     vaddI V16, V16, V17
200     vaddI V17, V18, V20
204     vaddI V16, V16, V17
208     addw R13, R10, #64
20c     cmpw  R13, #456
210     blt B15 	// counted loop end  P=0.984636 C=48127.000000

214     B17: #	out( B22 B18 ) &lt;- in( B16 )  Freq: 0.999989
214     reduce_addI_sve R0, R2, V16	# KILL V17
220     cmpw  R13, #512
224     bge  B22  P=0.500000 C=-1.000000
```

3.2 C2 JIT code for TestUnorderedReduction::test2 when test case fails.

```
170     B15: #	out( B16 ) &lt;- in( B16 ) top-of-loop Freq: 64.0845
170     spill R13 -&gt; R11	# spill size = 32

174     B16: #	out( B15 B17 ) &lt;- in( B13 B15 ) Loop( B16-B15 inner main of N53) Freq: 65.0845
174     add R13, R10, R11, I2L #2	# ptr
178     loadV16 V17, [R13, #16]	# vector (128 bits)
17c     loadV V18, [R13, #32]	# vector (sve)
180     vlsl_imm V19, V17, #1
184     loadV V20, [R13, #64]	# vector (sve)
188     vaddI V17, V19, V17
18c     vlsl_imm V19, V18, #1
190     vaddI V16, V16, V17
194     vaddI V17, V19, V18
198     loadV V18, [R13, #96]	# vector (sve)
19c     vlsl_imm V19, V20, #1
1a0     vaddI V16, V16, V17
1a4     vaddI V17, V19, V20
1a8     loadV16 V19, [R13, #128]	# vector (128 bits)
1ac     vlsl_imm V20, V18, #1
1b0     vaddI V16, V16, V17
1b4     vaddI V17, V20, V18
1b8     loadV16 V18, [R13, #144]	# vector (128 bits)
1bc     vlsl_imm V20, V19, #1
1c0     loadV V21, [R13, #160]	# vector (sve)
1c4     vaddI V19, V20, V19
1c8     vaddI V16, V16, V17
1cc     vlsl_imm V17, V18, #1
1d0     vaddI V16, V16, V19
1d4     vaddI V17, V17, V18
1d8     loadV V18, [R13, #192]	# vector (sve)
1dc     vlsl_imm V19, V21, #1
1e0     loadV V20, [R13, #224]	# vector (sve)
1e4     vaddI V19, V19, V21
1e8     vaddI V16, V16, V17
1ec     vlsl_imm V17, V18, #1
1f0     loadV16 V21, [R13, #256]	# vector (128 bits)
1f4     vaddI V17, V17, V18
1f8     vaddI V16, V16, V19
1fc     vlsl_imm V18, V20, #1
200     vaddI V16, V16, V17
204     vaddI V17, V18, V20
208     vlsl_imm V18, V21, #1
20c     vaddI V16, V16, V17
210     vaddI V17, V18, V21
214     vaddI V16, V16, V17
218     addw R13, R11, #64
21c     cmpw  R13, #456
220     blt B15 	// counted loop end  P=0.984636 C=48127.000000

224     B17: #	out( B22 B18 ) &lt;- in( B16 )  Freq: 0.999989
224     reduce_addI_neon R0, R2, V16	# KILL V17
230     cmpw  R13, #512
234     bge  B22  P=0.500000 C=-1.000000
```

From the C2 JIT code, we can see that `reduce_addI_neon R0, R2, V16 # KILL V17 ` uses V16, which is generated from the above `vaddI V16, V16, V17` in the loop, but V16 and V17 have different vector length, which may result in omitted or over-processed data.
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8310190,JDK-8302652,,,,,,,,,,aarch64,,,,,,,,,generic,,,,,"0|i32sr7:",9223372036854775807,b15,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2023-08-21 00:04;thartmann;Looks like a duplicate of JDK-8310190 to me. [~epeter] is currently on vacation. [~fgao], maybe you can confirm?

EDIT: Okay, JDK-8310190 is only about misaligned accesses. In this case, we get a wrong result. It's probably something different then.;;;","2023-08-21 00:08;thartmann;Might be a regression from JDK-8302652. [~gcao] could you check if disabling PhaseIdealLoop::move_unordered_reduction_out_of_loop helps?;;;","2023-08-21 00:15;thartmann;ILW = Wrong result with C2 compiled code, reproducible on AArch64 with SVE2 and -XX:+AvoidUnalignedAccesses, -XX:-SuperWordReductions or disable compilation of affected method = HLM = P3;;;","2023-08-21 02:02;fgao;Hi [~thartmann], ""AvoidUnalignedAccesses"" is aarch64 or risc-v specific, but it also passes the value to ""AlignVector"" in superword. So I reproduced the same bug on 512-bit x86_64 platform as well, instead with ""-XX:MaxVectorSize=32 -XX:+AlignVector"". ;;;","2023-08-21 02:04;gcao;Hi [~thartmann],  I ran some tests to verify that the issue was introduced by JDK-8302652;;;","2023-08-21 02:10;thartmann;Thanks for the details [~fgao]. Makes sense.

Thanks for confirming [~gcao]. Emanuel can look into this once he's back from vacation but feel free to take it if you have time.;;;","2023-08-29 04:56;epeter;My suspicion was that we get vectors with different vector lengths. I asked [~chagedorn] to run it with ""-XX:+TraceNewVectors"":

with AlignVector:
TraceNewVectors [SuperWord]:  1606  MulVI  === _ 1604 1605  [[ 930 929 928 927 918 917 916 915 ]]  #vectory[8]:{int} !orig=[938],796,225 !jvms: TestUnorderedReduction::test2 @ bci:61 (line 77)
TraceNewVectors [SuperWord]:  1627  MulVI  === _ 1625 1626  [[ 226 251 276 301 ]]  #vectorx[4]:{int} !orig=[225] !jvms: TestUnorderedReduction::test2 @ bci:61 (line 77)

without:
Only size 8

I suspect that AlignVector creates different alignment boundaries. It cuts it into 4 and 8 elements. Without AlignVector, they happen to all have 8 elements.

We need to add a corresponding check, to ensure that all vectors in question have the same number of elements (otherwise we miss some elements, or start hallucinating elements):

https://github.com/openjdk/jdk/blob/06b0a5e03852dfed9f1dee4791fc71b4e4e1eeda/src/hotspot/share/opto/loopopts.cpp#L4211C40-L4211C40

I can do it in two weeks when I am back, or someone else can take it over if it is more urgent.;;;","2023-09-11 04:34;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/15654
Date: 2023-09-11 09:17:46 +0000;;;","2023-09-13 03:48;dukebot;Changeset: f804f865
Author:    Emanuel Peter <epeter@openjdk.org>
Date:      2023-09-13 10:47:20 +0000
URL:       https://git.openjdk.org/jdk/commit/f804f8652da71b18cc654c08c12d07d6fd43c2a7
;;;",,,,,,,,,,,,,,,,,,
j.text.DecimalFormat behavior regarding patterns is not clear,JDK-8314604,5108409,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,jlu,jlu,jlu,2023-08-18 12:01,2023-09-13 22:39,2023-10-01 09:55,2023-09-06 11:04,,,,,,,,22,core-libs,,0,noreg-doc,,,,,,,,,,,,,,,,,,,"j.text.DecimalFormat has the method applyPattern(String), which claims that ""There is no limit to integer digits set by this routine, since that is the typical end-user desire; use setMaximumInteger if you want to set a real value.""

This claim is not true; if a scientific notation pattern is used, the maximum integer value will be set. If the pattern is in scientific notation, the limit is derived from the pattern, otherwise, the limit is set to Integer.MAX_VALUE. This behavior also applies to the constructors that take String pattern as input. The spec should be clarified.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8314607,,,,,,,,,JDK-4366035,,,,JDK-6306658,,,,,,,,,,,generic,,,,,,,,,generic,,,,,"0|i32spn:",9223372036854775807,b15,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6fc9e792,,,,,,,,,"2023-08-18 14:33;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/15349
Date: 2023-08-18 21:28:34 +0000;;;","2023-09-06 11:04;dukebot;Changeset: 86a18f5e
Author:    Justin Lu <jlu@openjdk.org>
Date:      2023-09-06 18:02:39 +0000
URL:       https://git.openjdk.org/jdk/commit/86a18f5e2e0825dddb77656b2f43f64684f1464c
;;;",,,,,,,,,,,,,,,,,,,,,,,,,
javadoc build only shows the first 100 warnings and errors,JDK-8314589,5108392,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,kcr,kcr,kcr,2023-08-18 09:35,2023-08-31 17:02,2023-10-01 09:55,2023-08-28 05:46,jfx21,,,,,,,jfx22,javafx,,0,noreg-build,sn_150,,,,,,,,,,,,,,,,,,"The default values of the javadoc maxwarns and maxerrs is 100. This means that if you have more than 100 warnings (which we currently do) or more than 100 errors (which is unlikely, but still possible) only the first 100 will be shown. This means that we will miss any new warnings that arise. We already have done so, and some of the missed warnings point to a product bug (unintentional public API that we forgot to remove in a subclass when the superclass methods were terminally deprecated).

The ultimate solution is to fix our warnings, and eventually cause warnings to be treated as errors, but even then we want to see more than just the first 100.

I plan to increase the limit to 1000.",,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8314590,,,,,,,,,,,,,,,JDK-8271083,,,,,,,,,,,,,,,,,,,,,,,,,"0|i32slv:",9223372036854775807,b07,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@1556b386,,,,,,,,,"2023-08-18 10:22;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jfx/pull/1216
Date: 2023-08-18 17:17:06 +0000;;;","2023-08-28 05:46;dukebot;Changeset: 53682dd2
Author:    Kevin Rushforth <kcr@openjdk.org>
Date:      2023-08-28 12:45:20 +0000
URL:       https://git.openjdk.org/jfx/commit/53682dd26a900af81341d8cca024a572b451b2b2
;;;",,,,,,,,,,,,,,,,,,,,,,,,,
"PhaseIdealLoop::transform_long_range_checks fails with assert ""was tested before""",JDK-8314580,5108382,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,roland,mcimadamore,mcimadamore,2023-08-18 07:11,2023-09-15 05:47,2023-10-01 09:55,2023-09-04 08:20,21,22,,,,,,22,hotspot,,0,amazon-interest,c2,c2-loopopts,foreign-memaccess+abi,oracle-triage-17,oracle-triage-22,,,,,,,,,,,,,,"This code crashes the JVM:

public class CrashExample {
    private static final VarHandle byteHandle = MethodHandles.memorySegmentViewVarHandle(ValueLayout.JAVA_BYTE);
    private static final long len = 100;
    private static final byte CR = (byte) '\r';
    private static final byte LF = (byte) '\n';

    public static void main(String[] args) {
        for(int round = 0; round < 1000; round++) {
            try(Arena arena = Arena.ofConfined()) {
                MemorySegment memorySegment = arena.allocateArray(ValueLayout.JAVA_BYTE, len);
                for(int i = 0; i < 100000; i++) {
                    int index = i % 99;
                    byteHandle.set(memorySegment, index, CR);
                    byteHandle.set(memorySegment, index + 1, LF);
                    byte[] bytes = readUntil(memorySegment, CR, LF);
                }
            }
        }
    }

    private static byte[] readUntil(MemorySegment segment, byte... separators) {
        for(long cur = 0; cur <= segment.byteSize() - separators.length; cur++) {
            if(matches(segment, cur, separators)) {
                return segment.asSlice(0, cur).toArray(ValueLayout.JAVA_BYTE);
            }
        }
        return null;
    }

    public static boolean matches(MemorySegment m, long offset, byte[] bytes) {
        for(int index = 0; index < bytes.length; index++) {
            if ((byte) byteHandle.get(m, offset + index) != bytes[index]) {
                return false;
            }
        }
        return true;
    }
}

# A fatal error has been detected by the Java Runtime Environment:
#
#  Internal Error (/oracle/jdk/open/src/hotspot/share/opto/loopnode.cpp:1269), pid=1045773, tid=1045790
#  assert(ok) failed: inconsistent: was tested before
#
# JRE version: Java(TM) SE Runtime Environment (22.0) (fastdebug build 22-internal-2023-08-07-1346088.tobias...)
# Java VM: Java HotSpot(TM) 64-Bit Server VM (fastdebug 22-internal-2023-08-07-1346088.tobias..., mixed mode, tiered, compressed oops, compressed class ptrs, g1 gc, linux-amd64)
# Problematic frame:
# V  [libjvm.so+0x1292fe2]  PhaseIdealLoop::transform_long_range_checks(int, Node_List const&, Node*, Node*, Node*, Node*, LoopNode*)+0x1272

Current CompileTask:
C2:    752  589 % !   4       CrashExample::main @ 29 (136 bytes)

Stack: [0x00007f072267e000,0x00007f072277f000],  sp=0x00007f0722779b20,  free space=1006k
Native frames: (J=compiled Java code, j=interpreted, Vv=VM code, C=native code)
V  [libjvm.so+0x1292fe2]  PhaseIdealLoop::transform_long_range_checks(int, Node_List const&, Node*, Node*, Node*, Node*, LoopNode*)+0x1272  (loopnode.cpp:1269)
V  [libjvm.so+0x129862e]  PhaseIdealLoop::create_loop_nest(IdealLoopTree*, Node_List&)+0xf4e  (loopnode.cpp:1047)
V  [libjvm.so+0x126f388]  IdealLoopTree::iteration_split_impl(PhaseIdealLoop*, Node_List&)+0x318  (loopTransform.cpp:3602)
V  [libjvm.so+0x126f6b7]  IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&)+0x117  (loopTransform.cpp:3726)
V  [libjvm.so+0x126f5d3]  IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&)+0x33  (loopTransform.cpp:3710)
V  [libjvm.so+0x129d6d7]  PhaseIdealLoop::build_and_optimize()+0xca7  (loopnode.cpp:4604)
V  [libjvm.so+0x9eff5e]  PhaseIdealLoop::optimize(PhaseIterGVN&, LoopOptsMode)+0x3ce  (loopnode.hpp:1114)
V  [libjvm.so+0x9ec9ef]  Compile::Optimize()+0xdaf  (compile.cpp:2166)
V  [libjvm.so+0x9eed10]  Compile::Compile(ciEnv*, ciMethod*, int, Options, DirectiveSet*)+0x1b60  (compile.cpp:850)
V  [libjvm.so+0x84a5db]  C2Compiler::compile_method(ciEnv*, ciMethod*, int, bool, DirectiveSet*)+0x13b  (c2compiler.cpp:119)
V  [libjvm.so+0x9fac37]  CompileBroker::invoke_compiler_on_method(CompileTask*)+0x977  (compileBroker.cpp:2276)
V  [libjvm.so+0x9fb978]  CompileBroker::compiler_thread_loop()+0x5f8  (compileBroker.cpp:1944)
V  [libjvm.so+0xeb883c]  JavaThread::thread_main_inner()+0xcc  (javaThread.cpp:720)
V  [libjvm.so+0x179b04a]  Thread::call_run()+0xba  (thread.cpp:217)
V  [libjvm.so+0x1499d01]  thread_native_entry(Thread*)+0x121  (os_linux.cpp:783)

# A fatal error has been detected by the Java Runtime Environment:
#
#  SIGSEGV (0xb) at pc=0x00007f3f941154b7, pid=1045889, tid=1045906
#
# JRE version: Java(TM) SE Runtime Environment (22.0) (build 22-internal-2023-08-09-1155514.tobias...)
# Java VM: Java HotSpot(TM) 64-Bit Server VM (22-internal-2023-08-09-1155514.tobias..., mixed mode, tiered, compressed oops, compressed class ptrs, g1 gc, linux-amd64)
# Problematic frame:
# V  [libjvm.so+0x4084b7]  AddNode::IdealIL(PhaseGVN*, bool, BasicType)+0x37

Current CompileTask:
C2:    405  632 % !   4       CrashExample::main @ 29 (136 bytes)

Stack: [0x00007f3f65eff000,0x00007f3f66000000],  sp=0x00007f3f65ffb7e0,  free space=1009k
Native frames: (J=compiled Java code, j=interpreted, Vv=VM code, C=native code)
V  [libjvm.so+0x4084b7]  AddNode::IdealIL(PhaseGVN*, bool, BasicType)+0x37  (addnode.cpp:265)
V  [libjvm.so+0xd11bde]  PhaseIterGVN::transform_old(Node*)+0x9e  (phaseX.cpp:667)
V  [libjvm.so+0xd0db09]  PhaseIterGVN::optimize()+0xf9  (phaseX.cpp:1045)
V  [libjvm.so+0x6445af]  Compile::Optimize()+0x151f  (loopnode.hpp:1199)
V  [libjvm.so+0x6456c2]  Compile::Compile(ciEnv*, ciMethod*, int, Options, DirectiveSet*)+0xed2  (compile.cpp:850)
V  [libjvm.so+0x574079]  C2Compiler::compile_method(ciEnv*, ciMethod*, int, bool, DirectiveSet*)+0x159  (c2compiler.cpp:119)
V  [libjvm.so+0x64b2fe]  CompileBroker::invoke_compiler_on_method(CompileTask*)+0xa9e  (compileBroker.cpp:2276)
V  [libjvm.so+0x64e558]  CompileBroker::compiler_thread_loop()+0x698  (compileBroker.cpp:1944)
V  [libjvm.so+0x8f8038]  JavaThread::thread_main_inner() [clone .part.0]+0xb8  (javaThread.cpp:720)
V  [libjvm.so+0xe9aa18]  Thread::call_run()+0xa8  (thread.cpp:217)
V  [libjvm.so+0xcbfaaa]  thread_native_entry(Thread*)+0xda  (os_linux.cpp:783)",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8259609,,,"2023-08-20 22:56;thartmann;CrashExample.java;https://bugs.openjdk.org/secure/attachment/105175/CrashExample.java","2023-08-20 22:57;thartmann;hs_err_pid1045773.log;https://bugs.openjdk.org/secure/attachment/105176/hs_err_pid1045773.log",,,,,,,,,,,,,,,,,,,,,"0|i32sjn:",9223372036854775807,b14,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2023-08-18 07:12;mcimadamore;This fails with:

```
#
# A fatal error has been detected by the Java Runtime Environment:
#
#  SIGSEGV (0xb) at pc=0x00007fb978353e7b, pid=460689, tid=460729
#
# JRE version: OpenJDK Runtime Environment (22.0) (build 22-internal-adhoc.maurizio.dev)
# Java VM: OpenJDK 64-Bit Server VM (22-internal-adhoc.maurizio.dev, mixed mode, sharing, tiered, compressed oops, compressed class ptrs, g1 gc, linux-amd64)
# Problematic frame:
# V  [libjvm.so+0x42fe7b]  AddNode::IdealIL(PhaseGVN*, bool, BasicType)+0x3b
#
# Core dump will be written. Default location: Core dumps may be processed with ""/usr/share/apport/apport -p%p -s%s -c%c -d%d -P%P -u%u -g%g -- %E"" (or dumping to /w/misc/panama-test/MemAccess/core.460689)
```;;;","2023-08-18 07:13;mcimadamore;A dump can be found here:
https://mail.openjdk.org/pipermail/panama-dev/attachments/20230818/66bd174d/hs_err_pid5133-0001.log;;;","2023-08-20 23:31;thartmann;Looks like an issue with JDK-8259609, we hit an assert in debug. I attached the test and hs_err file.

ILW = Assert/crash during C2 compilation, reproducible with preview feature, no workaround but disabled compilation of affected method = HLM = P3;;;","2023-08-24 01:01;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/15411
Date: 2023-08-24 07:57:34 +0000;;;","2023-09-04 08:20;dukebot;Changeset: 9def4538
Author:    Roland Westrelin <roland@openjdk.org>
Date:      2023-09-04 15:18:39 +0000
URL:       https://git.openjdk.org/jdk/commit/9def4538ab5456d689fd289bdef66fd1655773bc
;;;",,,,,,,,,,,,,,,,,,,,,,
G1: Heap resizing at Remark does not take existing eden regions into account,JDK-8314573,5108375,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,tschatzl,tschatzl,tschatzl,2023-08-18 03:39,2023-09-12 11:16,2023-10-01 09:55,2023-08-29 07:23,12,17,21,22,,,,22,hotspot,,0,gc-g1,gc-pending-review,,,,,,,,,,,,,,,,,,"During the Remark pause we use the full gc heap resizing policy.

One important metric is the amount of free space/regions at that point; it is calculated as

  const size_t used_after_gc = capacity_after_gc - _g1h->unused_committed_regions_in_bytes();

The problem with that formula is that at the point when the Remark pause occurs, Eden is not empty compared to full gc.

So the result of this calculation is very dependent on the point in time the Remark pause occurs, and so is the result whether g1 expands the heap or not. The suggestion is to incorporate current eden size as well.

Introduced in JDK-6490394.

This can cause lots of unnecessary heap expansions and heap usage.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-6490394,,,,JDK-8315866,,,,,,,,,,,,,,,,,,12,,,,,,,"0|i32si3:",9223372036854775807,b13,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6b00f96c,,,,,,,,,"2023-08-23 03:02;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/15400
Date: 2023-08-23 09:54:41 +0000;;;","2023-08-29 07:23;dukebot;Changeset: 762b6529
Author:    Thomas Schatzl <tschatzl@openjdk.org>
Date:      2023-08-29 14:20:11 +0000
URL:       https://git.openjdk.org/jdk/commit/762b652912939b37fbd68955617705c62b9fc3a5
;;;",,,,,,,,,,,,,,,,,,,,,,,,,
Build with mawk fails on Windows,JDK-8314555,5108352,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,ksakata,ksakata,ksakata,2023-08-17 20:00,2023-08-31 00:54,2023-10-01 09:55,2023-08-23 17:33,,,,,,,,22,infrastructure,,0,,,,,,,,,,,,,,,,,,,,"Build with mawk fails on Windows. 
I tried to build JDK on WSL2 Debian. Debian uses mawk as an awk Implementation. It failed as below. 

$ make images
Building target 'images' in configuration 'windows-x86_64-server-fastdebug'
Compiling up to 1 files for BUILD_TOOLS_HOTSPOT
Compiling up to 8 files for BUILD_TOOLS_LANGTOOLS
Compiling 9 properties into resource bundles for jdk.jshell
Compiling 15 properties into resource bundles for jdk.jdeps
Compiling 17 properties into resource bundles for jdk.javadoc
Generating classes for compiler.properties launcher.properties
Creating hotspot/variant-server/tools/adlc/adlc.exe from 13 file(s)
Compiling up to 2 files for BUILD_JVMTI_TOOLS
Compiling 20 properties into resource bundles for jdk.compiler
nawk: line 1: regular expression compile failed (missing operand)
??_7.*@@6B@
gmake[3]: *** [lib/JvmMapfile.gmk:133: /mnt/c/users/sakat/code/jdk/build/windows-x86_64-server-fastdebug/hotspot/variant-server/libjvm/symbols-objects] Error 2
gmake[3]: *** Waiting for unfinished jobs....
gmake[2]: *** [make/Main.gmk:252: hotspot-server-libs] Error 2
gmake[2]: *** Waiting for unfinished jobs....
Updating support/src.zip

ERROR: Build failed for target 'images' in configuration 'windows-x86_64-server-fastdebug' (exit code 141) 

$ awk
Usage: mawk [Options] [Program] [file ...]

Build succeeded when I used gawk instead of mawk.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,windows,,,,,"0|i32scz:",9223372036854775807,b13,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@429c566,,,,,,,,,"2023-08-22 20:07;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/15357
Date: 2023-08-21 07:13:37 +0000;;;","2023-08-23 17:33;dukebot;Changeset: 3285a1ef
Author:    Koichi Sakata <ksakata@openjdk.org>
Date:      2023-08-24 00:32:31 +0000
URL:       https://git.openjdk.org/jdk/commit/3285a1efc8d3372338b87f70e28fa2158bac629d
;;;",,,,,,,,,,,,,,,,,,,,,,,,,
Debian/Ubuntu should not link OpenJDK with --as-needed link option,JDK-8314554,5108351,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,vpetko,vpetko,vpetko,2023-08-17 19:42,2023-08-31 00:54,2023-10-01 09:55,2023-08-24 05:30,,,,,,,,22,infrastructure,,0,,,,,,,,,,,,,,,,,,,,"GNU toolchain provided by Debian starting from bullseye defaults to the --as-needed link option[1]. This causes linkage inconsistency between builds made on Debian-based systems and other Linux distributions[2].

The toolchain used by Adoptium[3] and Oracle[4] does not set --as-needed.

To provide consistent linking for Debian-based systems, add ""--no-as-needed"" to the default OpenJDK GCC link options as a workaround that forces consistent linkage behavior.

[1] https://bugs.debian.org/cgi-bin/bugreport.cgi?bug=982443
[2] https://bugs.debian.org/cgi-bin/bugreport.cgi?bug=1031521
[3] https://ci.adoptium.net/job/build-scripts/job/jobs/job/jdk17u/job/jdk17u-linux-x64-temurin/lastBuild/consoleFull
[4] https://mail.openjdk.org/pipermail/build-dev/2023-August/040502.html ",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i32scr:",9223372036854775807,b13,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@429c566,,,,,,,,,"2023-08-17 23:05;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/15340
Date: 2023-08-18 05:57:34 +0000;;;","2023-08-24 05:30;dukebot;Changeset: e36620d8
Author:    Vladimir Petko <vpetko@openjdk.org>
Committer: Erik Joelsson <erikj@openjdk.org>
Date:      2023-08-24 12:27:52 +0000
URL:       https://git.openjdk.org/jdk/commit/e36620d80ed837b50cb37e1cf0b66a5eb36e4d46
;;;",,,,,,,,,,,,,,,,,,,,,,,,,
Fix javadoc tests to work with jtreg 7,JDK-8314552,5108349,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,dlutker,dlutker,dlutker,2023-08-17 16:37,2023-09-11 22:59,2023-10-01 09:55,2023-08-23 11:46,17,,,,,,,17.0.9,tools,,0,amazon-interest,jdk17u-fix-request,jdk17u-fix-yes,,,,,,,,,,,,,,,,," Some javadoc tests fail with jtreg 7 due to the testng.jar including some non-ascii chars.

In 18+ this is not an issue because of JEP 400 that switches to UTF-8 by default.  

Example Error:
/home/runner/work/jdk17u-dev/jdk17u-dev/jtreg/installed/lib/testng-7.3.0.jar(/Version.java):12: error: unmappable character (0xC3) for encoding US-ASCII
        System.out.println(""...\\\\n... TestNG "" + getVersionString() + "" by C??dric Beust (cedric@beust.com)\\\\n...\\\\n"");

Failing tests: 
jdk/javadoc/doclet/testSerialVersionUID/TestSerialVersionUID 
jdk/javadoc/doclet/testTagMisuse/TestTagMisuse 
jdk/javadoc/doclet/testThrows/TestThrows 
jdk/javadoc/doclet/testThrowsHead/TestThrowsHead 
jdk/javadoc/doclet/testUnnamedPackage/TestUnnamedPackage 
jdk/javadoc/tool/nonConstExprs/Test   

See https://github.com/openjdk/jdk17u-dev/pull/1595 for detailed failures.   ",,,,,,,,,,,,JDK-8315641,JDK-8316073,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8314975,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i32scb:",9223372036854775807,b05,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@7900061a,,,,,,,,,"2023-08-17 16:44;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/1672
Date: 2023-08-17 23:39:45 +0000;;;","2023-08-21 12:59;dlutker;Fix Request [17u]:
Low risk, test only changes. This will resolve the issues seen on some systems when updating to JTReg 7.x, I ran all of the jtreg:test/langtools/jdk/javadoc/doclet on my host which reproduced the problem and all GHA tests are passing.;;;","2023-08-23 11:46;dukebot;Changeset: e8304640
Author:    Dan Lutker <lutkerd@amazon.com>
Committer: Paul Hohensee <phh@openjdk.org>
Date:      2023-08-23 18:42:34 +0000
URL:       https://git.openjdk.org/jdk17u-dev/commit/e83046409d81d074cd68dc823e794a852ed93cee
;;;","2023-08-24 07:52;jjg;The fix seems ""wrong"" in that the tests that fail are not TestNG tests, so should not need to be edited as proposed. 

Where is that System.out.println coming from?;;;","2023-08-24 10:08;dlutker;The println is in TestNG code https://github.com/testng-team/testng/blob/3fe515c9199588fd7f5eeaa4580631a8ff9f4417/testng-core/src/main/java/org/testng/internal/Version.java#L16-L19

Rerunning with '-verbose' added to the command line we can see it searching everything in the classpath

```
Constructing Javadoc information...
[search path for source files: /local/home/lutkerd/code/jdk17u-dev/build/linux-x86_64-server-release/test-support/jtreg_test_langtools_jdk_javadoc_doclet_testSerialVersionUID/classes/0/jdk/javadoc/doclet/testSerialVersionUID/TestSerialVersionUID.d,/local/home/lutkerd/code/jdk17u-dev/test/langtools/jdk/javadoc/doclet/testSerialVersionUID,/local/home/lutkerd/code/jdk17u-dev/build/linux-x86_64-server-release/test-support/jtreg_test_langtools_jdk_javadoc_doclet_testSerialVersionUID/classes/0/jdk/javadoc/lib,/local/home/lutkerd/code/jtreg/build/images/jtreg/lib/javatest.jar,/local/home/lutkerd/code/jtreg/build/images/jtreg/lib/jtreg.jar,/local/home/lutkerd/code/jtreg/build/images/jtreg/lib/asmtools.jar,/local/home/lutkerd/code/jtreg/build/images/jtreg/lib/junit-platform-console-standalone-1.9.2.jar,/local/home/lutkerd/code/jtreg/build/images/jtreg/lib/testng-7.3.0.jar,/local/home/lutkerd/code/jtreg/build/images/jtreg/lib/guice-5.1.0.jar,/local/home/lutkerd/code/jtreg/build/images/jtreg/lib/jcommander-1.82.jar]
[search path for class files: /local/home/lutkerd/code/jdk17u-dev/build/linux-x86_64-server-release/images/jdk/lib/modules,/local/home/lutkerd/code/jdk17u-dev/build/linux-x86_64-server-release/test-support/jtreg_test_langtools_jdk_javadoc_doclet_testSerialVersionUID/classes/0/jdk/javadoc/doclet/testSerialVersionUID/TestSerialVersionUID.d,/local/home/lutkerd/code/jdk17u-dev/test/langtools/jdk/javadoc/doclet/testSerialVersionUID,/local/home/lutkerd/code/jdk17u-dev/build/linux-x86_64-server-release/test-support/jtreg_test_langtools_jdk_javadoc_doclet_testSerialVersionUID/classes/0/jdk/javadoc/lib,/local/home/lutkerd/code/jtreg/build/images/jtreg/lib/javatest.jar,/local/home/lutkerd/code/jtreg/build/images/jtreg/lib/jtreg.jar,/local/home/lutkerd/code/jtreg/build/images/jtreg/lib/asmtools.jar,/local/home/lutkerd/code/jtreg/build/images/jtreg/lib/junit-platform-console-standalone-1.9.2.jar,/local/home/lutkerd/code/jtreg/build/images/jtreg/lib/testng-7.3.0.jar,/local/home/lutkerd/code/jtreg/build/images/jtreg/lib/guice-5.1.0.jar,/local/home/lutkerd/code/jtreg/build/images/jtreg/lib/jcommander-1.82.jar]
```
I think that is because it doesn't fork a new process and just calls jdk.javadoc.internal.tool.Main[1]

Running javadoc directly only reproduces the issue with `LC_ALL=C`, which `make run-tests` does, and testng passed in the sourcepath, ex `LC_ALL=C /usr/lib/jvm/java-17-amazon-corretto.x86_64/bin/javadoc -d out -sourcepath /home/lutkerd/code/jtreg/build/images/jtreg/lib/testng-7.3.0.jar  /local/home/lutkerd/code/jdk17u-dev/test/langtools/jdk/javadoc/doclet/testSerialVersionUID/C.java -verbose`

[1] https://github.com/openjdk/jdk17u-dev/blob/master/test/langtools/jdk/javadoc/lib/javadoc/tester/JavadocTester.java#L374-L376


;;;","2023-08-24 14:23;jjg;OK, so the ""problem"" is probably because both TestNG Version.java and the test code are in the unnamed package, so when reading `C.java`, javadoc/javac will try and ""fill in"" other classes in the unnamed package, and will come across that TestNG file.

A better longer term fix would be to improve the infrastructure ""somewhere"" so that these library jar files are not on the source path in the first place.

We might be able to do something in JavadocTester but that would leave javac vulnerable to the same problem of accidentally encountering this TestNG file. It might be better to investigate a long term fix in jtreg.;;;","2023-08-24 14:45;jjg;These javadoc tests are ""unusual"" because they do _not_ set the source path when running javadoc.  Most javadoc tests do, and so most javadoc tests do not run into the TestNG problem encountered here.

A better fix (for JDK mainline?) would be to modify JavadocTester to set the source path to be empty if it is not set explicitly in the args to the javadoc method.;;;","2023-08-30 00:48;dukebot;Changeset: e8304640
Author:    Dan Lutker <lutkerd@amazon.com>
Committer: Paul Hohensee <phh@openjdk.org>
Date:      2023-08-23 18:42:34 +0000
URL:       https://git.openjdk.org/jdk17u/commit/e83046409d81d074cd68dc823e794a852ed93cee
;;;",,,,,,,,,,,,,,,,,,,
More generic way to handshake GC threads with monitor deflation,JDK-8314551,5108347,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,rkennke,rkennke,rkennke,2023-08-17 14:43,2023-09-20 22:22,2023-10-01 09:55,2023-09-15 02:50,21,22,,,,,,22,hotspot,,0,amazon-interest,genshen,lilliput,,,,,,,,,,,,,,,,,"We currently handshake GC threads with monitor deflation by calling SuspendibleThreadSet::synchronize() and SuspendibleThreadSet::desynchronize(). This is somewhat problematic though, because GCs may use other mechanisms to sync their GC threads. In particular, ZGC uses ZRelocateQueue to do that.

Luckily, CollectedHeap comes with interfaces for exactly this purpose: CollectedHeap::safepoint_synchronize_begin() and CollectedHeap::safepoint_synchronize_end(). Those methods are implemented by ZGC to do the correct synchronization with ZRelocateQueue. All GCs which need that sort of synchronization are overriding these methods and delegate to STS methods, so we can replace the STS calls with the CollectedHeap calls.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8307236,,,,,,,,,,,,,,,generic,,,,,,,,,generic,,,,,"0|i32sbv:",9223372036854775807,b16,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6b00f96c,,,,,,,,,"2023-08-17 15:05;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/15336
Date: 2023-08-17 21:58:42 +0000;;;","2023-09-15 02:50;dukebot;Changeset: 31c4e03d
Author:    Roman Kennke <rkennke@openjdk.org>
Date:      2023-09-15 09:48:58 +0000
URL:       https://git.openjdk.org/jdk/commit/31c4e03d5d4682a10825bd7cf2d37971e686b31e
;;;",,,,,,,,,,,,,,,,,,,,,,,,,
"[macosx-aarch64] serviceability/sa/TestJmapCore.java fails with ""sun.jvm.hotspot.debugger.UnmappedAddressException: 801000800"" ",JDK-8314550,5108346,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,cjplummer,cjplummer,cjplummer,2023-08-17 13:56,2023-08-31 00:54,2023-10-01 09:55,2023-08-25 14:15,,,,,,,,22,hotspot,,0,cds,,,,,,,,,,,,,,,,,,,"On OSX (and I believe only aarch64), the following failure has been entered multiple times into JDK-8270202, which was intended to just cover ZGC failures, so I'm creating this CR to cover this issue:

 sun.jvm.hotspot.debugger.UnmappedAddressException: 7001000800
at jdk.hotspot.agent/sun.jvm.hotspot.debugger.PageCache.checkPage(PageCache.java:208)
at jdk.hotspot.agent/sun.jvm.hotspot.debugger.PageCache.getLong(PageCache.java:100)
at jdk.hotspot.agent/sun.jvm.hotspot.debugger.DebuggerBase.readCInteger(DebuggerBase.java:356)
at jdk.hotspot.agent/sun.jvm.hotspot.debugger.DebuggerBase.readAddressValue(DebuggerBase.java:382)
at jdk.hotspot.agent/sun.jvm.hotspot.debugger.bsd.BsdDebuggerLocal.readAddress(BsdDebuggerLocal.java:421)
at jdk.hotspot.agent/sun.jvm.hotspot.debugger.bsd.BsdAddress.getAddressAt(BsdAddress.java:73)
at jdk.hotspot.agent/sun.jvm.hotspot.types.basic.BasicTypeDataBase.findDynamicTypeForAddress(BasicTypeDataBase.java:238)
at jdk.hotspot.agent/sun.jvm.hotspot.runtime.VirtualBaseConstructor.instantiateWrapperFor(VirtualBaseConstructor.java:104)
at jdk.hotspot.agent/sun.jvm.hotspot.oops.Metadata.instantiateWrapperFor(Metadata.java:78)
at jdk.hotspot.agent/sun.jvm.hotspot.oops.MetadataField.getValue(MetadataField.java:43)
at jdk.hotspot.agent/sun.jvm.hotspot.oops.MetadataField.getValue(MetadataField.java:40)
at jdk.hotspot.agent/sun.jvm.hotspot.classfile.ClassLoaderData.getKlasses(ClassLoaderData.java:82)
at jdk.hotspot.agent/sun.jvm.hotspot.classfile.ClassLoaderData.classesDo(ClassLoaderData.java:101)
at jdk.hotspot.agent/sun.jvm.hotspot.classfile.ClassLoaderDataGraph.classesDo(ClassLoaderDataGraph.java:84)
at jdk.hotspot.agent/sun.jvm.hotspot.utilities.HeapHprofBinWriter.writeSymbols(HeapHprofBinWriter.java:1206)
at jdk.hotspot.agent/sun.jvm.hotspot.utilities.HeapHprofBinWriter.write(HeapHprofBinWriter.java:454)
at jdk.hotspot.agent/sun.jvm.hotspot.tools.JMap.writeHeapHprofBin(JMap.java:216)
at jdk.hotspot.agent/sun.jvm.hotspot.tools.JMap.run(JMap.java:103)
at jdk.hotspot.agent/sun.jvm.hotspot.tools.Tool.startInternal(Tool.java:278)
at jdk.hotspot.agent/sun.jvm.hotspot.tools.Tool.start(Tool.java:241)
at jdk.hotspot.agent/sun.jvm.hotspot.tools.Tool.execute(Tool.java:134)
at jdk.hotspot.agent/sun.jvm.hotspot.tools.JMap.main(JMap.java:202)
at jdk.hotspot.agent/sun.jvm.hotspot.SALauncher.runJMAP(SALauncher.java:340)
at jdk.hotspot.agent/sun.jvm.hotspot.SALauncher.main(SALauncher.java:500) ",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8270202,JDK-8293563,,,,,,,,,,,,,,aarch64,,,,,,,,,os_x,,,,,"0|i32sbn:",9223372036854775807,b13,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@714e388c,,,,,,,,,"2023-08-17 13:59;cjplummer;My comment on from JDK-8270202:

Since this test purposely generates a core file, I looked at the hs_err file which was also produced and saw this:

 garbage-first heap total 524288K, used 1070K [0x00000007e0000000, 0x0000000800000000)

So 801000800 is not in the java heap. However, I also saw:

CDS archive(s) mapped at: [0x0000000800000000-0x0000000800cf0000-0x0000000800cf0000), size 13565952, SharedBaseAddress: 0x0000000800000000, ArchiveRelocationMode: 0.
Compressed class space mapped at: 0x0000000801000000-0x0000000804400000, reserved size: 54525952
Narrow klass base: 0x0000000800000000, Narrow klass shift: 0, Narrow klass range: 0x100000000

So 801000800 is in the CDS archive's ""Compressed class space"". When the SA page cache tries to read it in, it throws:

 sun.jvm.hotspot.debugger.UnmappedAddressException: 801000800

Our test tools also ran jstack on the core files and got SA exceptions like the following:

sun.jvm.hotspot.debugger.UnmappedAddressException: 80001a3d8
sun.jvm.hotspot.debugger.UnmappedAddressException: 800048590

These appear to be in the CDS archive.

My guess is that these addresses are valid but are not in the core file. See JDK-8293563, which documents issues with macosx-aarch64 not including all of (most of) the java heap in the core dump. Even lldb can't read these pages. This was fixed by using -XX:+AlwaysPreTouch. However, I doubt that helps with the mapped in CDS archive. We may need for CDS to access all pages in the archive when -XX:+AlwaysPreTouch is used, ;;;","2023-08-17 14:00;cjplummer;Ioi's response:

If specifying -XX:+AlwaysPreTouch is a viable work-around, this can be changed for CDS (metaspaceShared.cpp):

  static bool use_windows_memory_mapping() {
    const bool is_windows = (NOT_WINDOWS(false) WINDOWS_ONLY(true));
    //const bool is_windows = true; // enable this to allow testing the windows mmap semantics on Linux, etc.
- return is_windows;
+ return is_windows || AlwaysPreTouch

  }

This will basically avoid using mmap on the CDS regions. Instead, we use read() to copy the contents into memory. Maybe this way, macosx-aarch64 will make these regions available in the core file. ;;;","2023-08-17 14:07;cjplummer;I never implemented Ioi's suggestion because I could never reproduce the issue, and I wanted to be sure that the fix was actually working. However, the problem has reproduced in CI a few times since then, so I think it's worth putting in place and see if it ever turns up again.

One other thing to note is that it only seems to happen on 11.* hosts, but we still have some of those.

And lastly, this really only fixes the problem for our testing, which does the following in CoreUtils.java:

    public static String getAlwaysPretouchArg(boolean withCore) {
        // macosx-aarch64 has an issue where sometimes the java heap will not be dumped to the
        // core file. Using -XX:+AlwaysPreTouch fixes the problem.
        if (withCore && Platform.isOSX() && Platform.isAArch64()) {
            return ""-XX:+AlwaysPreTouch"";
        } else {
            return ""-XX:-AlwaysPreTouch"";
        }
    }

Users will still have this issue unless they run with AlwaysPreTouch, which normally they won't.;;;","2023-08-21 15:04;cjplummer;[~iklam] I've tried out your fix. Although I can't prove it is actually fixing anything (since I can't reproduce the issue without the fix), it doesn't seem to be causing any issues with our testing. However I was wondering if the fix should actually go where you've indicated, or if it should have more fine grained control. The fix is in use_windows_memory_mapping(), yet the reason for this change has nothing to do with Windows (it's actually fixing a macosx-aarch64 issue), so this doesn't seem like the right place to put it. Probably the callers of use_windows_memory_mapping() should be the ones checking the AlwaysPreTouch flag. There are 3 calls to use_windows_memory_mapping(). Do they all want this fix, or maybe it can be isolated to just one or two of them.
;;;","2023-08-21 16:07;iklam;Hmm, I think a better fix in CDS would be: if -XX:+AlwaysPreTouch is specify, we should pre-touch every page in the mmap'ed regions to make sure they are committed/

In filemap.cpp, this can be done by changing the read_only parameter to os::map_memory to false when AlwaysPreTouch is true. After os::map_memory returns, we call os::pretouch_memory() on the returned memory.
;;;","2023-08-24 16:37;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/15423
Date: 2023-08-24 23:31:56 +0000;;;","2023-08-25 14:15;dukebot;Changeset: d0cc0439
Author:    Chris Plummer <cjplummer@openjdk.org>
Date:      2023-08-25 21:14:33 +0000
URL:       https://git.openjdk.org/jdk/commit/d0cc0439c07ad0cca611e1999eda37f20c5a99d0
;;;",,,,,,,,,,,,,,,,,,,,
some tests fail in case ipv6 is disabled on the machine,JDK-8314517,5108308,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,mbaesken,mbaesken,mbaesken,2023-08-17 07:28,2023-08-29 00:34,2023-10-01 09:55,2023-08-23 03:46,17,21,22,,,,,22,core-libs,,0,amazon-interest,jdk17u-fix-request,jdk17u-fix-yes,jdk21u-fix-request,jdk21u-fix-SQE-ok,jdk21u-fix-yes,,,,,,,,,,,,,,"Some jtreg tests fail with ipv6 disabled on the machine,  this should be improved in the tests (e.g. by using IPSupport.hasIPv6() ).",,,,,,,,,,,,JDK-8314928,JDK-8315212,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,generic,,,,,,,,,generic,,,,,"0|i32s37:",9223372036854775807,b12,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@446e124a,,,,,,,,,"2023-08-17 23:59;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/15341
Date: 2023-08-18 06:53:19 +0000;;;","2023-08-23 03:46;dukebot;Changeset: 703817d2
Author:    Matthias Baesken <mbaesken@openjdk.org>
Date:      2023-08-23 10:44:40 +0000
URL:       https://git.openjdk.org/jdk/commit/703817d21f6fd8b24cc670695625dfdb09d3592c
;;;","2023-08-23 04:57;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk21u/pull/89
Date: 2023-08-23 11:50:50 +0000;;;","2023-08-23 05:03;mbaesken;jdk21u backport request
I would like to have the patch in jdk21u as well, because the issues are present there too.  The patch is low risk and applies cleanly.;;;","2023-08-28 04:50;mbaesken;jdk17u-dev backport request
I would like to have the patch in jdk17u-dev as well, because the issues are present there too. The patch is low risk and applies cleanly in the files present in jdk17.
(however the original patch also touches
•	test/jdk/com/sun/net/httpserver/simpleserver/CommandLinePositiveTest.java
•	test/jdk/com/sun/net/httpserver/simpleserver/jwebserver/CommandLinePositiveTest.java
•	test/jdk/jdk/net/ExtendedSocketOption/DontFragmentTest.java
and those are not present in jdk17u-dev) .;;;","2023-08-28 04:53;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/1702
Date: 2023-08-28 11:47:21 +0000;;;",,,,,,,,,,,,,,,,,,,,,
[IR Framework] Some internal IR Framework tests are failing after JDK-8310308 on PPC and Cascade Lake,JDK-8314513,5108304,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,chagedorn,chagedorn,chagedorn,2023-08-17 05:58,2023-08-31 00:55,2023-10-01 09:55,2023-08-28 03:33,22,,,,,,,22,hotspot,,0,ir-framework,noreg-self,oracle-triage-22,regression,,,,,,,,,,,,,,,,"After JDK-8310308, some internal IR framework tests are failing on PPC and Cascade Lake x86_64:
- testlibrary_tests/ir_framework/tests/TestBadFormat.java on Linux ppc64le 
- testlibrary_tests/ir_framework/examples/IRExample.java on Cascade Lake x86_64",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8310308,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i32s2b:",9223372036854775807,b13,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2023-08-17 06:01;chagedorn;ILW = 2 IR framework test failures, only on PPC and Cascade Lake, no workaround = MLH = P4;;;","2023-08-24 04:56;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/15415
Date: 2023-08-24 11:51:11 +0000;;;","2023-08-28 03:33;dukebot;Changeset: 5c4f1dc4
Author:    Christian Hagedorn <chagedorn@openjdk.org>
Date:      2023-08-28 10:30:48 +0000
URL:       https://git.openjdk.org/jdk/commit/5c4f1dc43ebd1ad699923e0082cfed72ba414982
;;;",,,,,,,,,,,,,,,,,,,,,,,,
Maintain separate SolidColorPipe state for MSAA,JDK-8314503,5108292,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,jdv,jdv,jdv,2023-08-17 03:16,2023-08-17 05:33,2023-10-01 09:55,2023-08-17 05:33,internal,,,,,,,internal,javafx,,0,javafx-metal,sn_150,,,,,,,,,,,,,,,,,,"We re-use SolidColorPipe in MetalPipelineManager which is getting called from clearRTT().

But when we jump from non-MSAA RTT to MSAA RTT sample count of RTT will be 4 but older SolidColorPipe will have sample count as 1.

Maintain separate SolidColorPipe for MSAA and re-use it",,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8302050,,,,,,,,,,,,,,,,,,,,,,,,,,generic,,,,,,,,,os_x,,,,,"0|i32rzn:",9223372036854775807,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4143e3f7,,,,,,,,,"2023-08-17 05:33;jdv;Changeset: 0cfedbed
Author:    Jayathirth Rao D V <jayathirth.d.v@oracle.com>
Committer: Ambarish Rapte <arapte@openjdk.org>
Date:      2023-08-17 15:55:05 +0000
URL:       https://git.openjdk.org/jfx-sandbox/commit/0cfedbeda0a3161b330ce8fccf979cdcb9984766;;;",,,,,,,,,,,,,,,,,,,,,,,,,,
Shenandoah: sun/tools/jhsdb/heapconfig/JMapHeapConfigTest.java fails,JDK-8314501,5108289,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,shade,shade,shade,2023-08-17 02:30,2023-08-24 00:23,2023-10-01 09:55,2023-08-21 02:04,11,17,21,22,,,,22,hotspot,,0,amazon-interest,gc-shenandoah,jdk17u-fix-request,jdk17u-fix-yes,jdk21u-fix-request,jdk21u-fix-SQE-ok,jdk21u-fix-yes,,,,,,,,,,,,,"$ CONF=linux-x86_64-server-fastdebug make test TEST=sun/tools/jhsdb/heapconfig/JMapHeapConfigTest.java TEST_VM_OPTS=""-XX:+UseShenandoahGC""

STDERR:
java.lang.RuntimeException: Key 'G1HeapRegionSize' doesn't exists in jmap output
        at JMapHeapConfigTest.compareValues(JMapHeapConfigTest.java:104)
        at JMapHeapConfigTest.main(JMapHeapConfigTest.java:161)
        at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
        at java.base/java.lang.reflect.Method.invoke(Method.java:580)
        at com.sun.javatest.regtest.agent.MainWrapper$MainTask.run(MainWrapper.java:138)
        at java.base/java.lang.Thread.run(Thread.java:1570)

This happens because Shenandoah path does not print G1HeapRegionSize at all:
 https://github.com/openjdk/jdk/blob/ed585d16b9069a678bb8633239ca87f64c956fdd/src/jdk.hotspot.agent/share/classes/sun/jvm/hotspot/tools/HeapSummary.java#L89-L93",,,,,,,,,,,,JDK-8314857,JDK-8314921,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i32ryz:",9223372036854775807,b12,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@2846162a,,,,,,,,,"2023-08-17 03:18;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/15328
Date: 2023-08-17 10:11:58 +0000;;;","2023-08-21 02:04;dukebot;Changeset: 812f475b
Author:    Aleksey Shipilev <shade@openjdk.org>
Date:      2023-08-21 09:02:01 +0000
URL:       https://git.openjdk.org/jdk/commit/812f475bc4ea84225e8bbb0b5a677eed0af864dd
;;;","2023-08-21 02:36;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk21u/pull/74
Date: 2023-08-21 09:30:48 +0000;;;","2023-08-21 02:44;shade;Fix Request (17u, 21u)

Fixes the tier4 test that fails with Shenandoah. Applies cleanly. Test now works well.;;;","2023-08-21 02:49;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/1676
Date: 2023-08-21 09:42:07 +0000;;;",,,,,,,,,,,,,,,,,,,,,,
Linux: jexec launched via PATH fails to find java,JDK-8314491,5108277,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,vpetko,vpetko,vpetko,2023-08-16 22:29,2023-09-13 22:41,2023-10-01 09:55,2023-09-10 16:22,17,21,22,,,,,22,tools,,0,,,,,,,,,,,,,,,,,,,,"jexec uses argv[0] parameter to find its own location[1].  argv[0] is populated with the command value causing a failure to locate java[2] when jexec is found in the PATH (in this case argv[0] contains just 'jexec').

We can use /proc/self/exe to locate the executable path on Linux.
The code already contains Linux-specific defines[3], and the use-case is specific to Linux.  I am proposing to limit the fix only to the Linux platform.

Note: I am happy to work on this issue.

[1] https://github.com/openjdk/jdk/blob/0c3bc71d24fa13a0b1e55541c01554cd5e124027/src/java.base/unix/native/launcher/jexec.c#L169
[2] https://bugs.debian.org/cgi-bin/bugreport.cgi?bug=1029342
[3] https://github.com/openjdk/jdk/blob/0c3bc71d24fa13a0b1e55541c01554cd5e124027/src/java.base/unix/native/launcher/jexec.c#L184C1-L185C1",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,linux,,,,,"0|i32rwb:",9223372036854775807,b15,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@5d8045fc,,,,,,,,,"2023-08-17 00:33;alanb;jexec is a legacy feature that was interesting on Solaris a long time ago. There has been a few discussions over the years about deprecating and removing it, it may be time to have that discussion again and to get some sense on what actual usage there is in 2023.;;;","2023-08-17 01:28;vpetko;It is still used to run jar files by a few packages[1]. Also it is used by binfmts-support to allow running jar files directly, e.g.
$./myapp.jar. 

[1] https://codesearch.debian.net/results/51bebc85b442a001/packages.txt
;;;","2023-08-18 00:01;vpetko;Note this only occurs when jexec is being searched in the PATH:
$ /usr/bin/jexec
Error: -jar requires jar file specification
...
$ which jexec
/usr/bin/jexec

$ jexec
can't locate java: No such file or directory

Nothing to do with the symlink, I apologise for the confusion;;;","2023-08-20 13:32;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/15343
Date: 2023-08-18 10:06:19 +0000;;;","2023-09-10 16:22;dukebot;Changeset: dab1c213
Author:    Vladimir Petko <vpetko@openjdk.org>
Committer: David Holmes <dholmes@openjdk.org>
Date:      2023-09-10 23:20:49 +0000
URL:       https://git.openjdk.org/jdk/commit/dab1c213fd2760686a7bf3fc8838f4a21056a954
;;;",,,,,,,,,,,,,,,,,,,,,,
Optionally override copyright header in generated source,JDK-8314483,5108264,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,erikj,erikj,erikj,2023-08-16 15:59,2023-08-31 00:54,2023-10-01 09:55,2023-08-25 13:44,22,,,,,,,22,infrastructure,,0,,,,,,,,,,,,,,,,,,,,"In the JDK build we have various build tools that generate source code from data files. For most of these tools, the source files are based on template files, which already have copyright headers, but for some, the complete source file is generated by the tool, which is providing the copyright header programatically. For the latter, we would like to implement an override mechanism in each tool so that we can change the copyright header from a custom makefile.

",,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8312550,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i32rtf:",9223372036854775807,b13,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@429c566,,,,,,,,,"2023-08-18 07:29;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/15346
Date: 2023-08-18 14:22:49 +0000;;;","2023-08-25 13:44;dukebot;Changeset: 837d2e1c
Author:    Erik Joelsson <erikj@openjdk.org>
Date:      2023-08-25 20:42:14 +0000
URL:       https://git.openjdk.org/jdk/commit/837d2e1cac7e006506cd4cff03862d7fbcd42140
;;;",,,,,,,,,,,,,,,,,,,,,,,,,
JDWPTRANSPORT_ERROR_INTERNAL code in socketTransport.c can never be executed,JDK-8314481,5108262,Bug,Resolved,JDK,JDK,software,duke,,,P5,Fixed,cjplummer,cjplummer,cjplummer,2023-08-16 15:41,2023-08-24 00:23,2023-10-01 09:55,2023-08-18 10:49,16,,,,,,,22,core-svc,,0,,,,,,,,,,,,,,,,,,,,"JDK-8250630 introduced the following change:

     if (listenAddr == NULL) {
  +        // No address of preferred addres family found, grab the fist one.
  +        listenAddr = &(addrInfo[0]);
  +    }
  +
  +    if (listenAddr == NULL) {
         dbgsysFreeAddrInfo(addrInfo);
         RETURN_ERROR(JDWPTRANSPORT_ERROR_INTERNAL, ""listen failed: wrong address"");
     }

After this change it is no longer possible for the RETURN_ERROR block to ever be executed because listenAddr can not ever still be NULL. The entire block should be removed.

Note this also means that JDK-8248911 can no longer possibly happen.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8250630,JDK-8248911,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i32rsz:",9223372036854775807,b12,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@3397f701,,,,,,,,,"2023-08-17 08:12;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/15330
Date: 2023-08-17 15:06:44 +0000;;;","2023-08-18 10:49;dukebot;Changeset: fbe28ee9
Author:    Chris Plummer <cjplummer@openjdk.org>
Date:      2023-08-18 17:46:36 +0000
URL:       https://git.openjdk.org/jdk/commit/fbe28ee90d018300259c1b515e340e60cbb30513
;;;",,,,,,,,,,,,,,,,,,,,,,,,,
"TestJstatdPortAndServer.java failed with ""java.rmi.NoSuchObjectException: no such object in table""",JDK-8314476,5108256,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,kevinw,dcubed,dcubed,2023-08-16 13:28,2023-09-25 01:01,2023-10-01 09:55,2023-08-29 01:56,22,,,,,,,22,core-svc,,0,intermittent,jdk21u-fix-request,jdk21u-fix-yes,tier6,,,,,,,,,,,,,,,,"The following test failed in the JDK22 CI:

sun/tools/jstatd/TestJstatdPortAndServer.java

Here's a log file snippet:

Start jstatd:
[/opt/mach5/mesos/work_dir/jib-master/install/jdk-22+11-769/linux-aarch64-debug.jdk/jdk-22/fastdebug/bin/jstatd -J-Xmx768m -J-XX:MaxRAMPercentage=6.25 -J-Dtest.boot.jdk=/opt/mach5/mesos/work_dir/jib-master/install/jdk/20/36/bundles/linux-aarch64/jdk-20_linux-aarch64_bin.tar.gz/jdk-20 -J-Djava.io.tmpdir=/opt/mach5/mesos/work_dir/slaves/cd627e65-f015-4fb1-a1d2-b6c9b8127f98-S134869/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/ceb3fbd8-908f-4ee1-a6df-319b60555d60/runs/d832f45a-e913-4697-ac67-e4b6842856e7/testoutput/test-support/jtreg_open_test_jdk_jdk_svc/tmp -J-ea -J-esa -J-XX:NativeMemoryTracking=detail -J-XX:+UsePerfData -p43023 -nTestJstatdServer]
[Jstatd-Thread]:/opt/mach5/mesos/work_dir/jib-master/install/jdk-22+11-769/linux-aarch64-debug.jdk/jdk-22/fastdebug/bin/jstatd -J-Xmx768m -J-XX:MaxRAMPercentage=6.25 -J-Dtest.boot.jdk=/opt/mach5/mesos/work_dir/jib-master/install/jdk/20/36/bundles/linux-aarch64/jdk-20_linux-aarch64_bin.tar.gz/jdk-20 -J-Djava.io.tmpdir=/opt/mach5/mesos/work_dir/slaves/cd627e65-f015-4fb1-a1d2-b6c9b8127f98-S134869/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/ceb3fbd8-908f-4ee1-a6df-319b60555d60/runs/d832f45a-e913-4697-ac67-e4b6842856e7/testoutput/test-support/jtreg_open_test_jdk_jdk_svc/tmp -J-ea -J-esa -J-XX:NativeMemoryTracking=detail -J-XX:+UsePerfData -p43023 -nTestJstatdServer
[Jstatd-Thread] Could not bind //:43023/TestJstatdServer to RMI Registry
[Jstatd-Thread] java.rmi.NoSuchObjectException: no such object in table
[Jstatd-Thread] 	at java.rmi/sun.rmi.transport.StreamRemoteCall.exceptionReceivedFromServer(StreamRemoteCall.java:304)
[Jstatd-Thread] 	at java.rmi/sun.rmi.transport.StreamRemoteCall.executeCall(StreamRemoteCall.java:280)
[Jstatd-Thread] 	at java.rmi/sun.rmi.server.UnicastRef.invoke(UnicastRef.java:382)
[Jstatd-Thread] 	at java.rmi/sun.rmi.registry.RegistryImpl_Stub.rebind(RegistryImpl_Stub.java:158)
[Jstatd-Thread] 	at java.rmi/java.rmi.Naming.rebind(Naming.java:177)
[Jstatd-Thread] 	at jdk.jstatd/sun.tools.jstatd.Jstatd.bind(Jstatd.java:62)
[Jstatd-Thread] 	at jdk.jstatd/sun.tools.jstatd.Jstatd.main(Jstatd.java:154)
	Thread[#10,Finalizer,8,system] stack: (length = 7)
	java.base@22-ea/java.lang.Object.wait0(Native Method)
	java.base@22-ea/java.lang.Object.wait(Object.java:375)
	java.base@22-ea/java.lang.Object.wait(Object.java:348)
	java.base@22-ea/java.lang.ref.NativeReferenceQueue.await(NativeReferenceQueue.java:48)
	java.base@22-ea/java.lang.ref.ReferenceQueue.remove0(ReferenceQueue.java:158)
	java.base@22-ea/java.lang.ref.NativeReferenceQueue.remove(NativeReferenceQueue.java:89)
	java.base@22-ea/java.lang.ref.Finalizer$FinalizerThread.run(Finalizer.java:173)

	Thread[#20,pool-1-thread-1,5,main] stack: (length = 10)
	java.base@22-ea/jdk.internal.misc.Unsafe.park(Native Method)
	java.base@22-ea/java.util.concurrent.locks.LockSupport.parkNanos(LockSupport.java:269)
	java.base@22-ea/java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject.awaitNanos(AbstractQueuedSynchronizer.java:1758)
	java.base@22-ea/java.util.concurrent.ScheduledThreadPoolExecutor$DelayedWorkQueue.take(ScheduledThreadPoolExecutor.java:1182)
	java.base@22-ea/java.util.concurrent.ScheduledThreadPoolExecutor$DelayedWorkQueue.take(ScheduledThreadPoolExecutor.java:899)
	java.base@22-ea/java.util.concurrent.ThreadPoolExecutor.getTask(ThreadPoolExecutor.java:1070)
	java.base@22-ea/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1130)
	java.base@22-ea/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:642)
	java.base@22-ea/java.lang.Thread.runWith(Thread.java:1583)
	java.base@22-ea/java.lang.Thread.run(Thread.java:1570)

	Thread[#1,main,5,main] stack: (length = 8)
	java.base@22-ea/java.lang.Object.wait0(Native Method)
	java.base@22-ea/java.lang.Object.wait(Object.java:375)
	java.base@22-ea/java.lang.Thread.join(Thread.java:2049)
	java.base@22-ea/java.lang.Thread.join(Thread.java:2125)
	app//com.sun.javatest.regtest.agent.MainActionHelper.runClass(MainActionHelper.java:219)
	app//com.sun.javatest.regtest.agent.AgentServer.doMain(AgentServer.java:317)
	app//com.sun.javatest.regtest.agent.AgentServer.run(AgentServer.java:242)
	app//com.sun.javatest.regtest.agent.AgentServer.main(AgentServer.java:71)

	Thread[#18,Common-Cleaner,8,InnocuousThreadGroup] stack: (length = 10)
	java.base@22-ea/jdk.internal.misc.Unsafe.park(Native Method)
	java.base@22-ea/java.util.concurrent.locks.LockSupport.parkNanos(LockSupport.java:269)
	java.base@22-ea/java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject.await(AbstractQueuedSynchronizer.java:1847)
	java.base@22-ea/java.lang.ref.ReferenceQueue.await(ReferenceQueue.java:71)
	java.base@22-ea/java.lang.ref.ReferenceQueue.remove0(ReferenceQueue.java:143)
	java.base@22-ea/java.lang.ref.ReferenceQueue.remove(ReferenceQueue.java:218)
	java.base@22-ea/jdk.internal.ref.CleanerImpl.run(CleanerImpl.java:140)
	java.base@22-ea/java.lang.Thread.runWith(Thread.java:1583)
	java.base@22-ea/java.lang.Thread.run(Thread.java:1570)
	java.base@22-ea/jdk.internal.misc.InnocuousThread.run(InnocuousThread.java:186)

	Thread[#19,Notification Thread,9,system] stack: (length = 0)

	Thread[#25,process reaper,10,InnocuousThreadGroup] stack: (length = 12)
	java.base@22-ea/jdk.internal.misc.Unsafe.park(Native Method)
	java.base@22-ea/java.util.concurrent.locks.LockSupport.parkNanos(LockSupport.java:410)
	java.base@22-ea/java.util.concurrent.LinkedTransferQueue$DualNode.await(LinkedTransferQueue.java:452)
	java.base@22-ea/java.util.concurrent.SynchronousQueue$Transferer.xferLifo(SynchronousQueue.java:194)
	java.base@22-ea/java.util.concurrent.SynchronousQueue.xfer(SynchronousQueue.java:233)
	java.base@22-ea/java.util.concurrent.SynchronousQueue.poll(SynchronousQueue.java:336)
	java.base@22-ea/java.util.concurrent.ThreadPoolExecutor.getTask(ThreadPoolExecutor.java:1069)
	java.base@22-ea/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1130)
	java.base@22-ea/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:642)
	java.base@22-ea/java.lang.Thread.runWith(Thread.java:1583)
	java.base@22-ea/java.lang.Thread.run(Thread.java:1570)
	java.base@22-ea/jdk.internal.misc.InnocuousThread.run(InnocuousThread.java:186)

	Thread[#9,Reference Handler,10,system] stack: (length = 3)
	java.base@22-ea/java.lang.ref.Reference.waitForReferencePendingList(Native Method)
	java.base@22-ea/java.lang.ref.Reference.processPendingReferences(Reference.java:246)
	java.base@22-ea/java.lang.ref.Reference$ReferenceHandler.run(Reference.java:208)

	Thread[#11,Signal Dispatcher,9,system] stack: (length = 0)

	Thread[#48,AgentVMThread,5,AgentVMThreadGroup] stack: (length = 22)
	java.base@22-ea/jdk.internal.misc.Unsafe.park(Native Method)
	java.base@22-ea/java.util.concurrent.locks.LockSupport.park(LockSupport.java:221)
	java.base@22-ea/java.util.concurrent.locks.AbstractQueuedSynchronizer.acquire(AbstractQueuedSynchronizer.java:754)
	java.base@22-ea/java.util.concurrent.locks.AbstractQueuedSynchronizer.acquireSharedInterruptibly(AbstractQueuedSynchronizer.java:1099)
	java.base@22-ea/java.util.concurrent.CountDownLatch.await(CountDownLatch.java:230)
	jdk.test.lib.thread.ProcessThread$ProcessRunnable.getProcess(ProcessThread.java:216)
	jdk.test.lib.thread.ProcessThread$ProcessRunnable.getPid(ProcessThread.java:205)
	jdk.test.lib.thread.ProcessThread.getPid(ProcessThread.java:103)
	JstatdTest.waitOnTool(JstatdTest.java:96)
	JstatdTest.tryToSetupJstatdProcess(JstatdTest.java:289)
	JstatdTest.runTest(JstatdTest.java:343)
	JstatdTest.doTest(JstatdTest.java:315)
	TestJstatdPortAndServer.main(TestJstatdPortAndServer.java:40)
	java.base@22-ea/java.lang.invoke.LambdaForm$DMH/0x00000001000c0000.invokeStatic(LambdaForm$DMH)
	java.base@22-ea/java.lang.invoke.LambdaForm$MH/0x0000000100103800.invoke(LambdaForm$MH)
	java.base@22-ea/java.lang.invoke.Invokers$Holder.invokeExact_MT(Invokers$Holder)
	java.base@22-ea/jdk.internal.reflect.DirectMethodHandleAccessor.invokeImpl(DirectMethodHandleAccessor.java:154)
	java.base@22-ea/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
	java.base@22-ea/java.lang.reflect.Method.invoke(Method.java:580)
	app//com.sun.javatest.regtest.agent.MainActionHelper$AgentVMRunnable.run(MainActionHelper.java:333)
	java.base@22-ea/java.lang.Thread.runWith(Thread.java:1583)
	java.base@22-ea/java.lang.Thread.run(Thread.java:1570)

	Thread[#22,process reaper,10,InnocuousThreadGroup] stack: (length = 12)
	java.base@22-ea/jdk.internal.misc.Unsafe.park(Native Method)
	java.base@22-ea/java.util.concurrent.locks.LockSupport.parkNanos(LockSupport.java:410)
	java.base@22-ea/java.util.concurrent.LinkedTransferQueue$DualNode.await(LinkedTransferQueue.java:452)
	java.base@22-ea/java.util.concurrent.SynchronousQueue$Transferer.xferLifo(SynchronousQueue.java:194)
	java.base@22-ea/java.util.concurrent.SynchronousQueue.xfer(SynchronousQueue.java:233)
	java.base@22-ea/java.util.concurrent.SynchronousQueue.poll(SynchronousQueue.java:336)
	java.base@22-ea/java.util.concurrent.ThreadPoolExecutor.getTask(ThreadPoolExecutor.java:1069)
	java.base@22-ea/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1130)
	java.base@22-ea/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:642)
	java.base@22-ea/java.lang.Thread.runWith(Thread.java:1583)
	java.base@22-ea/java.lang.Thread.run(Thread.java:1570)
	java.base@22-ea/jdk.internal.misc.InnocuousThread.run(InnocuousThread.java:186)

	Thread[#65,Jstatd-Thread,5,AgentVMThreadGroup] stack: (length = 10)
	java.base@22-ea/java.lang.Thread.dumpThreads(Native Method)
	java.base@22-ea/java.lang.Thread.getAllStackTraces(Thread.java:2492)
	jdk.test.lib.process.ProcessTools.startProcess(ProcessTools.java:327)
	jdk.test.lib.process.ProcessTools.startProcess(ProcessTools.java:154)
	jdk.test.lib.process.ProcessTools.startProcess(ProcessTools.java:368)
	jdk.test.lib.thread.ProcessThread$ProcessRunnable.xrun(ProcessThread.java:154)
	jdk.test.lib.thread.XRun.run(XRun.java:40)
	java.base@22-ea/java.lang.Thread.runWith(Thread.java:1583)
	java.base@22-ea/java.lang.Thread.run(Thread.java:1570)
	jdk.test.lib.thread.TestThread.run(TestThread.java:123)

ProcessThread[Jstatd-Thread] failed: java.lang.RuntimeException: Started process Jstatd-Thread terminated before producing the expected output.
----------System.err:(18/821)----------
 stdout: [jstatd started (bound to //:44513/TestJstatdServer)
];
 stderr: []
 exitValue = 143

Failed to start a process (thread dump follows)
java.lang.RuntimeException: Started process Jstatd-Thread terminated before producing the expected output.
	at jdk.test.lib.process.ProcessTools.startProcess(ProcessTools.java:318)
	at jdk.test.lib.process.ProcessTools.startProcess(ProcessTools.java:154)
	at jdk.test.lib.process.ProcessTools.startProcess(ProcessTools.java:368)
	at jdk.test.lib.thread.ProcessThread$ProcessRunnable.xrun(ProcessThread.java:154)
	at jdk.test.lib.thread.XRun.run(XRun.java:40)
	at java.base/java.lang.Thread.run(Thread.java:1570)
	at jdk.test.lib.thread.TestThread.run(TestThread.java:123)

JavaTest Message: Test threw exception: java.lang.RuntimeException
JavaTest Message: shutting down test

result: Failed. Execution failed: `main' threw exception: java.lang.RuntimeException: Started process Jstatd-Thread terminated before producing the expected output.",,,,,,,,,,,,JDK-8316858,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,aarch64,,,,,,,,,linux,,,,,"0|i32rrn:",9223372036854775807,b13,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@22f3cc74,,,,,,,,,"2023-08-22 11:28;dcubed;[~kevinw] - Searching for ""no such object in table"" gets 10 unresolved bugs including
this one. ""no such object in table"" or NoSuchObjectException is mentioned in the
synopsis line for 4 of those unresolved bugs including this one. The other 6 bugs get
hits on ""no such object in table"" somewhere in the body of the bugs.

You may want to file new bug with something like this as the synopsis line:

   investigating ""NoSuchObjectException: no such object in table"" failures

and then change the four direct matches to be sub-tasks of the new bug:

    JDK-8241159 JMXStartStopTest.java failed due to ""java.rmi.NoSuchObjectException: no such object in table""
    JDK-8307649 sun/tools/jstatd/TestJstatdPort.java fails with ""java.rmi.NoSuchObjectException: no such object in table""
    JDK-8309730 com/sun/jndi/rmi/factoriesfilter/RemoteObjectsFactoryTest.java fails with java.rmi.NoSuchObjectException
    JDK-8314476 TestJstatdPortAndServer.java failed with ""java.rmi.NoSuchObjectException: no such object in table""

For the other six unresolved bugs that get a hit on ""no such object in table"", you'll
need to examine the primary failure mode and decide whether that bug should also
become a sub-task of the new bug:

    JDK-6708473 Multiple successive registries with different socket factories fail with local clients
    JDK-8081569 sun/tools/jstatd/TestJstatd* tests timed out intermittently
    JDK-8218809 Few rmi tests fail when running with "" -Xcomp -XX:+UseStringDeduplication -XX:+AggressiveOpts "" vmoptions
    JDK-8251259 sun/tools/jstatd/TestJstatdRmiPort.java timed out
    JDK-8274337 sun/management/jmxremote/startstop/JMXStartStopTest.java failed with ""BindException: Address already in use""
    JDK-8308352 Test javax/management/remote/mandatory/connection/ConnectionTest.java timed out;;;","2023-08-23 07:27;kevinw;Thanks for the references.

The log shows one jstatd startup working, then a second test fails:

[Jstatd-Thread] Could not bind //:33859/TestJstatdServer to RMI Registry
[Jstatd-Thread] java.rmi.NoSuchObjectException: no such object in table

So does look like one of our port in use problems, and the same test machine is running several of the jstat tests at the same time, so the getFreePort race is happening.

checks for ""Port already in use""
which is what TCPTransport.java prints.

But, observed in JDK-8149084, TCPTransport hits: java.io.IOException: Invalid argument
...when using a clashing port, specifically on linux aarch64 we get that exception, and here we see jstatd prints ""Could not bind"" rather than the ""Port already in use"" message.

Should look into test/jdk/sun/tools/jstatd/JstatdTest.java updating its test to check for ""Could not bind"" and better detect these clashes.


;;;","2023-08-24 04:41;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/15414
Date: 2023-08-24 11:34:13 +0000;;;","2023-08-24 05:11;msheppar;[Jstatd-Thread] Could not bind //:43023/TestJstatdServer to RMI Registry
[Jstatd-Thread] java.rmi.NoSuchObjectException: no such object in table
[Jstatd-Thread] 	at java.rmi/sun.rmi.transport.StreamRemoteCall.exceptionReceivedFromServer(StreamRemoteCall.java:304)
[Jstatd-Thread] 	at java.rmi/sun.rmi.transport.StreamRemoteCall.executeCall(StreamRemoteCall.java:280)
[Jstatd-Thread] 	at java.rmi/sun.rmi.server.UnicastRef.invoke(UnicastRef.java:382)
[Jstatd-Thread] 	at java.rmi/sun.rmi.registry.RegistryImpl_Stub.rebind(RegistryImpl_Stub.java:158)
[Jstatd-Thread] 	at java.rmi/java.rmi.Naming.rebind(Naming.java:177)

suggests aggressive GC on the remote server object such that a rebind in the Registry fails  i.e. could not bind

There's no indication  from netstat, in the environment capture, that port 43023 in use;;;","2023-08-24 08:13;kevinw;Right, is it _really_ a port in use?
There are a lot of failures in this area over time.
Here in 8314476 maybe yes it's the other problem you mention.  It really got as far as the object table, StreamRemoteCall is not reached if there is no network connection.


There's also the similar bug:
8226420: sun/tools/jstatd tests failed with Port already in use
where TestJstatdDefaults.java failed with:

[Jstatd-Thread] Could not bind /TestJstatdServer to RMI Registry
[Jstatd-Thread] java.rmi.server.ExportException: Port already in use: 1099; nested exception is:
[Jstatd-Thread] java.net.BindException: Address already in use: bind
[Jstatd-Thread] at java.rmi/sun.rmi.transport.tcp.TCPTransport.listen(TCPTransport.java:335)

..so ""Could not bind"" there is being reported as well as the explicit ""Address already in use"".
""Could not bind"" alone seems to be a fairly bad error message.


I've noticed examples where the netstat sampled on failure doesn't capture the port in use, when it's explicitly reported as being by the net bind exception (e.g. recent JMXStartStopTest I was just looking at...).
But I may have had the TCPTransport.java actual network failure in my mind too much when labelling this 8314476 as port in use.

(Or, is there a network connection, but not to what we wanted?  Not sure how far-fetched that is.)


When I force the port to be in use, by some dummy thread listening on it, I also see ""Could not bind"", but the exception makes it clearer that it is different:

[Jstatd-Thread] Could not bind //:37943/TestJstatdServer to RMI Registry
[Jstatd-Thread] java.rmi.ConnectIOException: error during JRMP connection establishment; nested exception is:
[Jstatd-Thread]         java.net.SocketTimeoutException: Read timed out
[Jstatd-Thread]         at java.rmi/sun.rmi.transport.tcp.TCPChannel.createConnection(TCPChannel.java:308)
[Jstatd-Thread]         at java.rmi/sun.rmi.transport.tcp.TCPChannel.newConnection(TCPChannel.java:204)
[Jstatd-Thread]         at java.rmi/sun.rmi.server.UnicastRef.newCall(UnicastRef.java:345)
[Jstatd-Thread]         at java.rmi/sun.rmi.registry.RegistryImpl_Stub.rebind(RegistryImpl_Stub.java:150)
[Jstatd-Thread]         at java.rmi/java.rmi.Naming.rebind(Naming.java:177)
[Jstatd-Thread]         at jdk.jstatd/sun.tools.jstatd.Jstatd.bind(Jstatd.java:62)
[Jstatd-Thread]         at jdk.jstatd/sun.tools.jstatd.Jstatd.main(Jstatd.java:154)
[Jstatd-Thread] Caused by: java.net.SocketTimeoutException: Read timed out
[Jstatd-Thread]         at java.base/sun.nio.ch.NioSocketImpl.timedRead(NioSocketImpl.java:278)
..etc...


So for the test to recognise ""Could not bind"" is going to be generally useful,  to recognise that we could not start jstatd, including port in use but not only that.  

8314476 and 8226420 and maybe others are probably looked after if we recognise ""Could not bind"" and try again.
I'd like to get that done in the linked PR.

On the GC'ing of the reference in the RMI server...    Retrying jstatd again still seems to be reasonable.  I don't even see a pattern that ZGC is part of that problem, as it's not always the GC involved.

;;;","2023-08-29 01:56;dukebot;Changeset: 1d025070
Author:    Kevin Walls <kevinw@openjdk.org>
Date:      2023-08-29 08:54:00 +0000
URL:       https://git.openjdk.org/jdk/commit/1d0250709a6ee97f5647edff589761bd9d0b7f4c
;;;","2023-09-20 04:58;lujaniuk;Fix Request
Test stability fix. No product change, no risk. Patch applied cleanly.;;;","2023-09-20 04:59;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk21u/pull/179
Date: 2023-09-20 11:53:13 +0000;;;",,,,,,,,,,,,,,,,,,,
Clarify the name of the declaring class of StackTraceElement,JDK-8314449,5108229,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,mchung,mchung,mchung,2023-08-16 10:15,2023-08-24 00:23,2023-10-01 09:55,2023-08-18 10:12,21,,,,,,,22,core-libs,,0,noreg-doc,,,,,,,,,,,,,,,,,,,"The declaringClass parameter of the StackTraceElement constructor should be the ""binary name"" not ""fully qualified name"".   Same for `StackTraceElement::getClassName`.  The specification should be updated.

Note that the javadoc of `StackWalker.StackFrame::getClassName` is correct and it specifies that it returns the binary name.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8314454,,,,,,,,,,,,,JDK-4628117,,,,,,,,,,,,,,,,,,,,,,,,,"0|i32rln:",9223372036854775807,b12,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4c088d55,,,,,,,,,"2023-08-16 11:49;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/15317
Date: 2023-08-16 18:42:00 +0000;;;","2023-08-18 10:12;dukebot;Changeset: 50a2ce01
Author:    Mandy Chung <mchung@openjdk.org>
Date:      2023-08-18 17:10:39 +0000
URL:       https://git.openjdk.org/jdk/commit/50a2ce01f4d1d42d7a537b48a669b5a75a583df5
;;;",,,,,,,,,,,,,,,,,,,,,,,,,
Coordinate DocLint and JavaDoc to report on unknown tags,JDK-8314448,5108228,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,prappo,prappo,prappo,2023-08-16 10:04,2023-08-24 00:23,2023-10-01 09:55,2023-08-18 09:41,22,,,,,,,22,tools,,0,,,,,,,,,,,,,,,,,,,,Unknown tags should be reported on from a javadoc regardless of DocLint configuration. This means that unknown tags should be reported on unconditionally.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8314213,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i32rlf:",9223372036854775807,b12,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@7900061a,,,,,,,,,"2023-08-18 04:36;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/15345
Date: 2023-08-18 11:30:27 +0000;;;","2023-08-18 09:41;dukebot;Changeset: aecbb1b5
Author:    Pavel Rappo <prappo@openjdk.org>
Date:      2023-08-18 16:40:51 +0000
URL:       https://git.openjdk.org/jdk/commit/aecbb1b5c3ea4919f09ce98a6f5a58db6e630d29
;;;",,,,,,,,,,,,,,,,,,,,,,,,,
[BACKOUT] JDK-8314108: CtwRunner misses export for jdk.internal.access,JDK-8314435,5108213,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,vagarwal,vagarwal,vagarwal,2023-08-16 06:52,2023-09-20 06:55,2023-10-01 09:55,2023-08-16 20:50,11.0.22-oracle,,,,,,,11.0.22-oracle,hotspot,,0,ci,jdk11u-na,regression,sqebug,tier3,,,,,,,,,,,,,,,applications/ctw/modules/java_desktop_2.java is timing out for windows debug  build after backporting the fix for JDK-8314108 into 11u CPU. So need to backout the fix until the issue is being debugged.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8314409,,,,,,JDK-8314108,,,,,,,,,,,,,,,,,,,,,,,,,"0|i32ri3:",9223372036854775807,master,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2023-09-20 06:55;goetz;[11u na]
Change not backported.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,
runtime/os/TestTrimNative.java is failing on slow machines,JDK-8314426,5108203,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,stuefe,stuefe,stuefe,2023-08-16 05:34,2023-08-28 14:53,2023-10-01 09:55,2023-08-22 07:03,17,21,22,,,,,22,hotspot,,0,amazon-interest,intermittent,jdk17u-fix-request,jdk17u-fix-yes,jdk21u-fix-request,jdk21u-fix-SQE-ok,jdk21u-fix-yes,noreg-self,,,,,,,,,,,,"Reported by SAP. Both cases look like they could be the result of slow or overloaded test machines.

```
Linuxaarc64  11.8.  :

stdout: [[0.133s][info][trimnative] Periodic native trim enabled (interval: 500 ms)
[0.133s][info][trimnative] Native heap trimmer start
Will spike now...
Done spiking.
GC...
Sleeping...
[0.642s][info][trimnative] Periodic Trim (1): 315M->171M (-144M) 9.717ms
[1.143s][info][trimnative] Periodic Trim (2): 171M->171M (+0B) 0.216ms
[1.643s][info][trimnative] Periodic Trim (3): 171M->171M (+0B) 0.228ms
[2.144s][info][trimnative] Periodic Trim (4): 171M->171M (+0B) 0.226ms
[2.644s][info][trimnative] Periodic Trim (5): 171M->171M (+0B) 0.270ms
[3.144s][info][trimnative] Periodic Trim (6): 171M->171M (+0B) 0.255ms
[3.645s][info][trimnative] Periodic Trim (7): 171M->171M (+0B) 0.221ms
[4.145s][info][trimnative] Periodic Trim (8): 171M->171M (+0B) 0.561ms
[4.646s][info][trimnative] Periodic Trim (9): 171M->171M (+0B) 0.228ms
[5.144s][debug][trimnative] Trim suspended for chunk pool cleaner (1 suspend requests)
[5.144s][debug][trimnative] Trim resumed after chunk pool cleaner
[5.147s][info ][trimnative] Periodic Trim (10): 171M->171M (-716K) 0.558ms
Done.
];
stderr: []
exitValue = 0

java.lang.RuntimeException: 'Native heap trimmer stop' missing from stdout/stderr
       at jdk.test.lib.process.OutputAnalyzer.shouldContain(OutputAnalyzer.java:221)
       at TestTrimNative.checkExpectedLogMessages(TestTrimNative.java:173)
       at TestTrimNative.main(TestTrimNative.java:280)
       at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
       at java.base/java.lang.reflect.Method.invoke(Method.java:580)
       at com.sun.javatest.regtest.agent.MainActionHelper$AgentVMRunnable.run(MainActionHelper.java:333)
       at java.base/java.lang.Thread.run(Thread.java:1570)
```
 

``` 

runtime/os/TestTrimNative.java#trimNativeLowInterval   15.8  linuxppc64le :

java.lang.RuntimeException: Abnormal high number of periodic trim attempts found (more than 3000). Does the interval setting not work?
       at TestTrimNative.parseOutputAndLookForNegativeTrim(TestTrimNative.java:205)
       at TestTrimNative.main(TestTrimNative.java:304)
       at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
       at java.base/java.lang.reflect.Method.invoke(Method.java:580)
       at com.sun.javatest.regtest.agent.MainActionHelper$AgentVMRunnable.run(MainActionHelper.java:333)
       at java.base/java.lang.Thread.run(Thread.java:1583)
```
",,,,,,,,,,,,JDK-8314920,JDK-8315036,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8293114,,,,,,,"2023-08-21 10:41;dcubed;jdk-22+11_linux-x64.8314426.zip;https://bugs.openjdk.org/secure/attachment/105184/jdk-22%2B11_linux-x64.8314426.zip",,,,,,,,,,,,,,,,,linux,,,,,"0|i32rfv:",9223372036854775807,b12,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,,,"2023-08-21 10:41;dcubed;Here's the log from my jdk-22+11 stress run sighting on linux-x64:

$ unzip -l jdk-22+11_linux-x64.8314426.zip
Archive:  jdk-22+11_linux-x64.8314426.zip
  Length      Date    Time    Name
---------  ---------- -----   ----
   103499  2023-08-19 09:43   jdk-22+11_2/failures.linux-x86_64/TestTrimNative_trimNativeLowInterval.jtr.slowdebug
---------                     -------
   103499                     1 file;;;","2023-08-22 03:11;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/15309
Date: 2023-08-16 14:28:38 +0000;;;","2023-08-22 07:03;dukebot;Changeset: 20e94784
Author:    Thomas Stuefe <stuefe@openjdk.org>
Date:      2023-08-22 14:00:47 +0000
URL:       https://git.openjdk.org/jdk/commit/20e94784c9f7c30e95550c72aedb5e986a153114
;;;","2023-08-23 00:21;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk21u/pull/86
Date: 2023-08-23 07:16:00 +0000;;;","2023-08-23 00:34;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/1687
Date: 2023-08-23 07:28:08 +0000;;;","2023-08-23 00:48;shade;Fix Request (17u, 21u)

Further stabilizes the test. Applies cleanly. Testing passes.;;;",,,,,,,,,,,,,,,,,,,,,
Multiple patterns without unnamed variables,JDK-8314423,5108200,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,abimpoudis,abimpoudis,abimpoudis,2023-08-16 04:33,2023-08-24 00:22,2023-10-01 09:55,2023-08-17 00:35,21,,,,,,,22,tools,,0,jdk21u-fix-request,jdk21u-fix-SQE-ok,jdk21u-fix-yes,,,,,,,,,,,,,,,,,"[~tvaleev] reported the following case which should be protected under the --enable-preview flag for JEP 443

https://mail.openjdk.org/pipermail/amber-spec-experts/2023-August/003909.html

public class Test {
  record R1() {}
  record R2() {}

  static void test(Object obj) {
    switch (obj) {
      case R1(), R2() -> System.out.println(""R1 or R2"");
      default -> System.out.println(""other"");
    }
  }

  public static void main(String[] args) {
    test(new R1());
  }
}

",,,,,,,,,,,,JDK-8314680,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i32rf7:",9223372036854775807,b12,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4dca67bd,,,,,,,,,"2023-08-16 08:00;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/15310
Date: 2023-08-16 14:52:14 +0000;;;","2023-08-17 00:35;dukebot;Changeset: 43311930
Author:    Aggelos Biboudis <abimpoudis@openjdk.org>
Committer: Jan Lahoda <jlahoda@openjdk.org>
Date:      2023-08-17 07:33:16 +0000
URL:       https://git.openjdk.org/jdk/commit/43311930107d1783b742adbe567e9bdbcb55775d
;;;","2023-08-17 00:49;abimpoudis;Fix Request

The use of the new form (comma-separated case patterns in a single case) is only permitted under the preview feature of JEP 443. Thus, it is important to protect that use with the --enable-preview flag. The case is covered by two test cases, one compiled with and one compiled without the flag. The fix applies cleanly to jdk21u (https://github.com/openjdk/jdk21u/pull/69)
;;;","2023-08-17 01:01;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk21u/pull/69
Date: 2023-08-17 07:52:56 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,
Clear color attachment at appropriate stage,JDK-8314401,5108175,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,jdv,jdv,jdv,2023-08-16 01:43,2023-08-20 21:27,2023-10-01 09:55,2023-08-17 05:32,internal,,,,,,,internal,javafx,,0,javafx-metal,sn_150,,,,,,,,,,,,,,,,,,"If we animate 3D primitives and don't use MSAA textures we are seeing artifacts. Attached image for the same.

We clear MSAA textures in setDeviceParametersFor3D() but we dont do the same for non-MSAA textures. Also we should not handle clearing of color attachments in setDeviceParametersFor3D() it should be taken care in clearRect()",,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8302050,,,,,,,,,JDK-8313487,,,,,,,,,"2023-08-16 01:44;jdv;Screenshot 2023-08-16 at 1.53.37 PM.png;https://bugs.openjdk.org/secure/attachment/105116/Screenshot+2023-08-16+at+1.53.37+PM.png",,,,,,,,generic,,,,,,,,,os_x,,,,,"0|i32r9n:",9223372036854775807,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4143e3f7,,,,,,,,,"2023-08-17 05:32;jdv;Changeset: d019f304
Author:    Jayathirth Rao D V <jayathirth.d.v@oracle.com>
Committer: Ambarish Rapte <arapte@openjdk.org>
Date:      2023-08-17 13:20:41 +0000
URL:       https://git.openjdk.org/jfx-sandbox/commit/d019f3045adbac2db5dd5607c6088b0f0d6a8e3f;;;",,,,,,,,,,,,,,,,,,,,,,,,,,
AttachListener::pd_set_flag obsolete,JDK-8314389,5108162,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,mbaesken,mbaesken,mbaesken,2023-08-16 00:11,2023-08-24 00:22,2023-10-01 09:55,2023-08-17 23:47,21,22,,,,,,22,hotspot,,0,,,,,,,,,,,,,,,,,,,,AttachListener::pd_set_flag  is the same across platforms (always returning JNI_ERR ). So it can be centralized or removed.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,generic,,,,,,,,,generic,,,,,"0|i32r6r:",9223372036854775807,b12,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@714e388c,,,,,,,,,"2023-08-16 01:16;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/15304
Date: 2023-08-16 08:09:42 +0000;;;","2023-08-17 23:47;dukebot;Changeset: 5058854b
Author:    Matthias Baesken <mbaesken@openjdk.org>
Date:      2023-08-18 06:45:18 +0000
URL:       https://git.openjdk.org/jdk/commit/5058854b867323dd6537d7387bf20a9d5f258084
;;;",,,,,,,,,,,,,,,,,,,,,,,,,
java/foreign tests should respect vm flags when start new processes,JDK-8314330,5108102,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,lmesnik,lmesnik,lmesnik,2023-08-15 15:53,2023-08-24 00:21,2023-10-01 09:55,2023-08-16 10:50,17,21,22,,,,,22,core-libs,,0,amazon-interest,testbug,,,,,,,,,,,,,,,,,,UpcallTestHelper.runInNewProcess should start new processes using test vm flags to be executed with tested configuration.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8314823,,,,,,,,,,,,,,,,,,,,,,,,,"0|i32qtf:",9223372036854775807,b12,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@28ce6b78,,,,,,,,,"2023-08-15 17:20;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/15302
Date: 2023-08-16 00:14:47 +0000;;;","2023-08-16 10:50;dukebot;Changeset: 7b28d360
Author:    Leonid Mesnik <lmesnik@openjdk.org>
Date:      2023-08-16 17:49:38 +0000
URL:       https://git.openjdk.org/jdk/commit/7b28d3608a10b26af376c8f6d142d97c708c9f11
;;;",,,,,,,,,,,,,,,,,,,,,,,,,
"""8311557: [JVMCI] deadlock with JVMTI thread suspension"" causes various failures",JDK-8314324,5108093,Bug,Resolved,JDK,JDK,software,duke,,,P2,Fixed,never,lmesnik,lmesnik,2023-08-15 13:57,2023-09-04 04:33,2023-10-01 09:55,2023-08-15 23:09,22,,,,,,,22,hotspot,,0,noreg-self,oracle-triage-21,oracle-triage-22,regression,tier3,tier5,tier6,tier7,tier8,,,,,,,,,,,"Fix 
8311557: [JVMCI] deadlock with JVMTI thread suspension
cause several issues.

Test
java/lang/management/ManagementFactory/ValidateOpenTypes.java
 started failing, (Executed in tier3)

A lot of jdi/jdb tests failing with -Xcomp
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8311557,,,,,,,,,,,,,,,,,,,,,,,,,"0|i32qrf:",9223372036854775807,b11,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2023-08-15 14:36;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/15300
Date: 2023-08-15 21:25:37 +0000;;;","2023-08-15 23:09;dukebot;Changeset: e1fdef56
Author:    Tom Rodriguez <never@openjdk.org>
Date:      2023-08-16 06:06:59 +0000
URL:       https://git.openjdk.org/jdk/commit/e1fdef56135c2987b128884ef632b64c32dd674a
;;;","2023-08-16 00:44;chagedorn;ILW = Wrong default causing various test failures, various tests, no workaround = MHH = P2;;;",,,,,,,,,,,,,,,,,,,,,,,,
Mark runtime/CommandLine/ tests as flagless,JDK-8314320,5108088,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,lmesnik,lmesnik,lmesnik,2023-08-15 13:11,2023-08-24 00:23,2023-10-01 09:55,2023-08-18 10:54,17,21,22,,,,,22,hotspot,,0,amazon-interest,,,,,,,,,,,,,,,,,,,"The tests in runtime/CommandLine test command-line options and ignore external VM flags.
No need to run them with any additional GC/Compiler flags etc.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8314823,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i32qqb:",9223372036854775807,b12,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,,,"2023-08-15 13:46;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/15299
Date: 2023-08-15 20:40:36 +0000;;;","2023-08-18 10:54;dukebot;Changeset: f4814771
Author:    Leonid Mesnik <lmesnik@openjdk.org>
Date:      2023-08-18 17:53:07 +0000
URL:       https://git.openjdk.org/jdk/commit/f481477144d25bf2b5ee44f202705588bd99d4f4
;;;",,,,,,,,,,,,,,,,,,,,,,,,,
LogCompilation doesn't reset lateInlining when it encounters a failure.,JDK-8314319,5108087,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,xliu,xliu,xliu,2023-08-15 13:06,2023-09-12 11:21,2023-10-01 09:55,2023-09-01 09:56,17,21,22,,,,,22,hotspot,,0,amazon-interest,diagnostics,oracle-triage-22,,,,,,,,,,,,,,,,,"here is the stacktrace. 

➜  LogCompilation git:(master) ✗ java -jar ./target/LogCompilation-1.0-SNAPSHOT.jar jit.xml
java.lang.InternalError: Unexpected method mismatch during late inlining (method at call site: java.util.LinkedHashMap$LinkedHashIterator::hasNext (13 bytes), method being parsed: java.util.AbstractCollection::addAll (42 bytes)) at 29018:56
	at com.sun.hotspot.tools.compiler.LogParser.reportInternalError(LogParser.java:643)
	at com.sun.hotspot.tools.compiler.LogParser.reportInternalError(LogParser.java:623)
	at com.sun.hotspot.tools.compiler.LogParser.startElement(LogParser.java:1224)
	at java.xml/com.sun.org.apache.xerces.internal.parsers.AbstractSAXParser.startElement(AbstractSAXParser.java:518)
	at java.xml/com.sun.org.apache.xerces.internal.impl.XMLDocumentFragmentScannerImpl.scanStartElement(XMLDocumentFragmentScannerImpl.java:1407)
	at java.xml/com.sun.org.apache.xerces.internal.impl.XMLDocumentFragmentScannerImpl$FragmentContentDriver.next(XMLDocumentFragmentScannerImpl.java:2726)
	at java.xml/com.sun.org.apache.xerces.internal.impl.XMLDocumentScannerImpl.next(XMLDocumentScannerImpl.java:605)
	at java.xml/com.sun.org.apache.xerces.internal.impl.XMLDocumentFragmentScannerImpl.scanDocument(XMLDocumentFragmentScannerImpl.java:542)
	at java.xml/com.sun.org.apache.xerces.internal.parsers.XML11Configuration.parse(XML11Configuration.java:889)
	at java.xml/com.sun.org.apache.xerces.internal.parsers.XML11Configuration.parse(XML11Configuration.java:825)
	at java.xml/com.sun.org.apache.xerces.internal.parsers.XMLParser.parse(XMLParser.java:141)
	at java.xml/com.sun.org.apache.xerces.internal.parsers.AbstractSAXParser.parse(AbstractSAXParser.java:1224)
	at java.xml/com.sun.org.apache.xerces.internal.jaxp.SAXParserImpl$JAXPSAXParser.parse(SAXParserImpl.java:637)
	at java.xml/com.sun.org.apache.xerces.internal.jaxp.SAXParserImpl.parse(SAXParserImpl.java:326)
	at com.sun.hotspot.tools.compiler.LogParser.parse(LogParser.java:706)
	at com.sun.hotspot.tools.compiler.LogParser.parse(LogParser.java:684)
	at com.sun.hotspot.tools.compiler.LogCompilation.main(LogCompilation.java:145)
Exception in thread ""main"" java.lang.InternalError: only nmethods should have a null compilation, here's a class com.sun.hotspot.tools.compiler.UncommonTrapEvent
	at com.sun.hotspot.tools.compiler.LogParser.parse(LogParser.java:723)
	at com.sun.hotspot.tools.compiler.LogParser.parse(LogParser.java:684)
	at com.sun.hotspot.tools.compiler.LogCompilation.main(LogCompilation.java:145)",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"2023-08-15 13:07;xliu;jit.xml.zip;https://bugs.openjdk.org/secure/attachment/105112/jit.xml.zip",,,,,,,,generic,,,,,,,,,generic,,,,,"0|i32qq3:",9223372036854775807,b14,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2023-08-15 13:11;xliu;here is the problematic code snippet.  it late inlines method '1387'. 

<late_inline method='1396'  inline_id='0'>
<jvms bci='10' method='1387'/>
</late_inline>
<call method='1446' count='10906' prof_factor='1.000000'/>
<predicted_call bci='10' exact='0' klass='1412'/>
<direct_call bci='10'/>
<failure reason='retry without subsuming loads' phase='compile'/>
<parse method='1387' uses='6656.000000' stamp='11.779'>
<observe trap='bimorphic_or_optimized_type_check' count='4' total='4'/>;;;","2023-08-15 13:23;xliu;I generated jit.xml when I try to rerun jtreg test 'jdk/incubator/vector/ByteMaxVectorTests.java';;;","2023-08-18 16:57;xliu;the rootcause of this is that c2 has trouble for method='1387', or AbstractCollection::addAll. 
it decides to retry 1387 without 'subsuming loads'.  however, it doesn't reset lateInlining flag 
The new parse of 1387 gets confused then.

I think we should reset lateInlining every time we encounter <failure>;;;","2023-08-21 19:55;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/15375
Date: 2023-08-22 02:48:26 +0000;;;","2023-08-22 01:39;thartmann;ILW = Log compilation tool throws an InternalError, when parsing a compilation error, no workaround = MLH = P4;;;","2023-09-01 09:56;dukebot;Changeset: e9e0c569
Author:    Xin Liu <xliu@openjdk.org>
Date:      2023-09-01 16:54:55 +0000
URL:       https://git.openjdk.org/jdk/commit/e9e0c5699b8d0fbd1bd3a6caa3e0182a2e5bdda3
;;;",,,,,,,,,,,,,,,,,,,,,
Printer tests lack '@key headful' or '@key printer',JDK-8314315,5108082,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,stn,aivanov,aivanov,2023-08-15 12:16,2023-08-21 23:00,2023-10-01 09:55,2023-08-17 22:28,8u401,8u401-perf,,,,,,8u401,client-libs,,0,11-na,17-na,regression,regression_8310887,sustaining,,,,,,,,,,,,,,,"The backport JDK-8310887 to 8u of JDK-8038723 is incomplete: all of the backported automatic tests don't have ""@key headful"" or ""@key printer"" tag. Now the tests always fail with HeadlessException or with a timeout.

The list of the affected tests:
java/awt/print/PageFormat/ReverseLandscapeTest.java
java/awt/print/PageFormat/NullPaper.java
java/awt/print/PrinterJob/PaintText.java
java/awt/print/PrinterJob/CheckPrivilege.java
java/awt/print/PrinterJob/DeviceScale.java

The list above may be not comprehensive.",,,,,,,,,,,,JDK-8314715,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8310887,,,,,,,,,,,,,,,,,,,,,,8u401,,,,,,,"0|i32qoz:",9223372036854775807,master,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@5a9b3fd3,,,,,,,,,"2023-08-15 12:16;aivanov;The tests were marked headful by JDK-8159690 which had been backported to 8u before JDK-8038723, for this reason they were skipped.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,
Missing include in assembler_riscv.hpp,JDK-8314268,5108023,Bug,Resolved,JDK,JDK,software,duke,,,P5,Fixed,rehn,rehn,rehn,2023-08-15 04:49,2023-08-24 00:22,2023-10-01 09:55,2023-08-17 07:48,22,,,,,,,22,hotspot,,0,,,,,,,,,,,,,,,,,,,,"assembler.hpp is not included, used for things such as is_uimm12.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,riscv,,,,,,,,,,,,,,"0|i32qbv:",9223372036854775807,b12,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,,,"2023-08-15 04:56;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/15285
Date: 2023-08-15 11:50:17 +0000;;;","2023-08-17 07:48;dukebot;Changeset: e8f6b3e4
Author:    Robbin Ehn <rehn@openjdk.org>
Date:      2023-08-17 14:45:59 +0000
URL:       https://git.openjdk.org/jdk/commit/e8f6b3e4970000e721da9312585e77de49bb8ed8
;;;",,,,,,,,,,,,,,,,,,,,,,,,,
Several test failures after fix for JDK-8159048,JDK-8314266,5108021,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,jpereda,kcr,kcr,2023-08-15 04:39,2023-08-17 09:28,2023-10-01 09:55,2023-08-16 05:36,jfx22,,,,,,,jfx22,javafx,,0,noreg-self,regression,testbug,,,,,,,,,,,,,,,,,"We are seeing the following test failures after the fix for JDK-8159048:

> Task :systemTests:test

PlatformTest > testCanNotStartNestedEventLoopInTimeline() FAILED
    java.lang.IllegalStateException: Not on FX application thread; currentThread = Test worker
        at javafx.graphics@22-ea/com.sun.javafx.tk.Toolkit.checkFxUserThread(Toolkit.java:294)
        at javafx.graphics@22-ea/com.sun.javafx.tk.quantum.QuantumToolkit.checkFxUserThread(QuantumToolkit.java:475)
        at javafx.graphics@22-ea/javafx.animation.Animation.play(Animation.java:990)
        at test.javafx.application.PlatformTest.testCanNotStartNestedEventLoopInTimeline(PlatformTest.java:123)

ShowAndWaitTest > [0] > test.javafx.stage.ShowAndWaitTest.testTimeline[0] FAILED
    java.lang.IllegalStateException: Not on FX application thread; currentThread = Test worker
        at javafx.graphics@22-ea/com.sun.javafx.tk.Toolkit.checkFxUserThread(Toolkit.java:294)
        at javafx.graphics@22-ea/com.sun.javafx.tk.quantum.QuantumToolkit.checkFxUserThread(QuantumToolkit.java:475)
        at javafx.graphics@22-ea/javafx.animation.Animation.play(Animation.java:990)
        at test.javafx.stage.ShowAndWaitTest.testTimeline(ShowAndWaitTest.java:686)

ShowAndWaitTest > [0] > test.javafx.stage.ShowAndWaitTest.testTimelineDialog[0] FAILED
    java.lang.IllegalStateException: Not on FX application thread; currentThread = Test worker
        at javafx.graphics@22-ea/com.sun.javafx.tk.Toolkit.checkFxUserThread(Toolkit.java:294)
        at javafx.graphics@22-ea/com.sun.javafx.tk.quantum.QuantumToolkit.checkFxUserThread(QuantumToolkit.java:475)
        at javafx.graphics@22-ea/javafx.animation.Animation.play(Animation.java:990)
        at test.javafx.stage.ShowAndWaitTest.testTimelineDialog(ShowAndWaitTest.java:736)

ShowAndWaitTest > [1] > test.javafx.stage.ShowAndWaitTest.testTimeline[1] FAILED
    java.lang.IllegalStateException: Not on FX application thread; currentThread = Test worker
        at javafx.graphics@22-ea/com.sun.javafx.tk.Toolkit.checkFxUserThread(Toolkit.java:294)
        at javafx.graphics@22-ea/com.sun.javafx.tk.quantum.QuantumToolkit.checkFxUserThread(QuantumToolkit.java:475)
        at javafx.graphics@22-ea/javafx.animation.Animation.play(Animation.java:990)
        at test.javafx.stage.ShowAndWaitTest.testTimeline(ShowAndWaitTest.java:686)

ShowAndWaitTest > [1] > test.javafx.stage.ShowAndWaitTest.testTimelineDialog[1] FAILED
    java.lang.IllegalStateException: Not on FX application thread; currentThread = Test worker
        at javafx.graphics@22-ea/com.sun.javafx.tk.Toolkit.checkFxUserThread(Toolkit.java:294)
        at javafx.graphics@22-ea/com.sun.javafx.tk.quantum.QuantumToolkit.checkFxUserThread(QuantumToolkit.java:475)
        at javafx.graphics@22-ea/javafx.animation.Animation.play(Animation.java:990)
        at test.javafx.stage.ShowAndWaitTest.testTimelineDialog(ShowAndWaitTest.java:736)

ShowAndWaitTest > [2] > test.javafx.stage.ShowAndWaitTest.testTimeline[2] FAILED
    java.lang.IllegalStateException: Not on FX application thread; currentThread = Test worker
        at javafx.graphics@22-ea/com.sun.javafx.tk.Toolkit.checkFxUserThread(Toolkit.java:294)
        at javafx.graphics@22-ea/com.sun.javafx.tk.quantum.QuantumToolkit.checkFxUserThread(QuantumToolkit.java:475)
        at javafx.graphics@22-ea/javafx.animation.Animation.play(Animation.java:990)
        at test.javafx.stage.ShowAndWaitTest.testTimeline(ShowAndWaitTest.java:686)

ShowAndWaitTest > [2] > test.javafx.stage.ShowAndWaitTest.testTimelineDialog[2] FAILED
    java.lang.IllegalStateException: Not on FX application thread; currentThread = Test worker
        at javafx.graphics@22-ea/com.sun.javafx.tk.Toolkit.checkFxUserThread(Toolkit.java:294)
        at javafx.graphics@22-ea/com.sun.javafx.tk.quantum.QuantumToolkit.checkFxUserThread(QuantumToolkit.java:475)
        at javafx.graphics@22-ea/javafx.animation.Animation.play(Animation.java:990)
        at test.javafx.stage.ShowAndWaitTest.testTimelineDialog(ShowAndWaitTest.java:736)

> Task :systemTests:test FAILED

858 tests completed, 7 failed, 68 skipped


> Task :web:test

LeakTest > testOleg FAILED
    java.lang.IllegalStateException: Not on FX application thread; currentThread = Test worker
        at javafx.graphics@22-ea/com.sun.javafx.tk.Toolkit.checkFxUserThread(Toolkit.java:294)
        at javafx.graphics@22-ea/com.sun.javafx.tk.quantum.QuantumToolkit.checkFxUserThread(QuantumToolkit.java:475)
        at javafx.graphics@22-ea/javafx.animation.Animation.play(Animation.java:990)
        at test.javafx.scene.web.LeakTest.testOleg(LeakTest.java:77)

> Task :web:test FAILED

471 tests completed, 1 failed, 113 skipped

I suspect that all of these are test bugs exposed by enforcing the restriction that Animation and AnimationTimer methods must be called on the JavaFX Application thread.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8159048,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i32qbf:",9223372036854775807,b05,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@1d1c7815,,,,,,,,,"2023-08-15 04:42;kcr;These test failures suggest the need to create a release note for JDK-8159048.;;;","2023-08-15 04:53;kcr;[~jpereda] I took a quick look at this. All three of the failing test classes call Timeline::play on the test thread. The fix might be as simple as wrapping each of them in Platform::runLater.;;;","2023-08-15 15:12;jpereda;Yes, indeed, the tests can be easily fix with that. I have a PR ready.

Don't you get the same issue with test.robot.javafx.embed.swing.SwingNodeJDialogTest ?
It fails for me locally on Mac, running:
sh gradlew --info -PFULL_TEST=true -PUSE_ROBOT=true :systemTests:test --tests test.robot.javafx.embed.swing.SwingNodeJDialogTest

I get:

SwingNodeJDialogTest > testNodeRemovalAfterShow FAILED
    java.lang.AssertionError: JDialog is not above JavaFX stage expected:<java.awt.Color[r=0,g=0,b=255]> but was:<java.awt.Color[r=44,g=0,b=255]>
        at org.junit.Assert.fail(Assert.java:89)
        at org.junit.Assert.failNotEquals(Assert.java:835)
        at org.junit.Assert.assertEquals(Assert.java:120)
        at test.robot.javafx.embed.swing.SwingNodeBase.testAbove(SwingNodeBase.java:205)
        at test.robot.javafx.embed.swing.SwingNodeJDialogTest.testNodeRemovalAfterShow(SwingNodeJDialogTest.java:52)

SwingNodeJDialogTest STANDARD_ERROR
    Exception in thread ""JavaFX Application Thread"" java.lang.IllegalStateException: Not on FX application thread; currentThread = JavaFX Application Thread
        at javafx.graphics@22-internal/com.sun.javafx.tk.Toolkit.checkFxUserThread(Toolkit.java:294)
        at javafx.graphics@22-internal/com.sun.javafx.tk.quantum.QuantumToolkit.checkFxUserThread(QuantumToolkit.java:475)
        at javafx.graphics@22-internal/javafx.stage.Window.setShowing(Window.java:1238)
        at javafx.graphics@22-internal/javafx.stage.Window.hide(Window.java:1264)
        at javafx.graphics@22-internal/com.sun.javafx.stage.WindowPeerListener.closed(WindowPeerListener.java:112)
        at javafx.graphics@22-internal/com.sun.javafx.tk.quantum.GlassWindowEventHandler.run(GlassWindowEventHandler.java:144)
...;;;","2023-08-16 04:50;kcr;I haven't seen the SwingNodeJDialogTest failure, but based on your stack trace, it doesn't look related to this issue. The IllegalStateException is coming from Window::setShowing not from Animation or AnimationTimer.;;;","2023-08-16 05:07;jpereda;Right, so it is unrelated to the fix for JDK-8159048.
I'll create the PR then.
;;;","2023-08-16 05:17;kcr;Sounds good.

One thing that this bug points out is that we might have underestimated the risk of enforcing the restriction. At Phil's suggestion, I plan to send a note to the openjfx-dev mailing list when an EA  build of JavaFX 22 with the fix for JDK-8159048 is available asking developers to test their apps that use animation and report any problems.;;;","2023-08-16 05:17;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jfx/pull/1211
Date: 2023-08-16 12:11:54 +0000;;;","2023-08-16 05:36;dukebot;Changeset: 3b105621
Author:    Jose Pereda <jpereda@openjdk.org>
Date:      2023-08-16 12:34:39 +0000
URL:       https://git.openjdk.org/jfx/commit/3b105621ae9f0d0fd99a615db4c084e8ecb906a8
;;;",,,,,,,,,,,,,,,,,,,
Signed jars triggering Logger finder recursion and StackOverflowError,JDK-8314263,5108017,Bug,Resolved,JDK,JDK,software,duke,,,P2,Fixed,coffeys,shadowbug,shadowbug,2023-08-15 03:18,2023-09-28 00:55,2023-10-01 09:55,2023-08-30 05:58,11.0.20-oracle,22,,,,,,22,core-libs,,0,11bpr-critical-watch,azul-interest,bugdb_35709493,CPU23_10,CPU23_10-defer-approved,CPU23_10-defer-SQE-OK,jdk17u-fix-request,jdk17u-fix-yes,jdk21u-fix-request,jdk21u-fix-SQE-ok,jdk21u-fix-yes,regression,,,,,,,,"Dividends paying off from porting JDK-8048190 to 11u. We have root cause of NoClassDefFoundError.

Logger call logic changed in JDK-8292033

java.lang.NoClassDefFoundError: Could not initialize class jdk.internal.logger.SimpleConsoleLogger$CallerFinder
	at java.base/jdk.internal.logger.SimpleConsoleLogger.getCallerInfo(SimpleConsoleLogger.java:194)
	at java.base/jdk.internal.logger.SimpleConsoleLogger.log(SimpleConsoleLogger.java:122)
	at java.base/java.lang.System$Logger.log(System.java:1241)
	at java.base/jdk.internal.logger.LoggerFinderLoader.loadLoggerFinder(LoggerFinderLoader.java:155)
	at java.base/jdk.internal.logger.LoggerFinderLoader.service(LoggerFinderLoader.java:73)
	at java.base/jdk.internal.logger.LoggerFinderLoader.getLoggerFinder(LoggerFinderLoader.java:206)
	at java.base/java.lang.System$LoggerFinder.lambda$accessProvider$0(System.java:1622)
	at java.base/java.security.AccessController.doPrivileged(Native Method)
	at java.base/java.security.AccessController.doPrivileged(AccessController.java:430)
	at java.base/java.lang.System$LoggerFinder.accessProvider(System.java:1623)
	at java.base/java.lang.System$LoggerFinder.getLoggerFinder(System.java:1611)
	at java.base/jdk.internal.logger.LazyLoggers.accessLoggerFinder(LazyLoggers.java:339)
	at java.base/jdk.internal.logger.LazyLoggers.getLoggerFromFinder(LazyLoggers.java:389)
	at java.base/jdk.internal.logger.LazyLoggers.getLazyLogger(LazyLoggers.java:444)
	at java.base/jdk.internal.logger.LazyLoggers.getLogger(LazyLoggers.java:414)
	at java.base/java.lang.System.getLogger(System.java:1673)
	at java.base/jdk.internal.event.EventHelper.isLoggingSecurity(EventHelper.java:145)
	at java.base/sun.security.jca.JCAUtil.tryCommitCertEvent(JCAUtil.java:104)
	
Caused by: java.lang.ExceptionInInitializerError: Exception java.lang.StackOverflowError [in thread ""main""]
	at java.base/java.lang.StackWalker.<clinit>(StackWalker.java:291)
	at java.base/jdk.internal.logger.SimpleConsoleLogger$CallerFinder$1.run(SimpleConsoleLogger.java:211)
	at java.base/jdk.internal.logger.SimpleConsoleLogger$CallerFinder$1.run(SimpleConsoleLogger.java:208)
	at java.base/java.security.AccessController.doPrivileged(Native Method)
	at java.base/jdk.internal.logger.SimpleConsoleLogger$CallerFinder.<clinit>(SimpleConsoleLogger.java:214)
	at java.base/jdk.internal.logger.SimpleConsoleLogger.getCallerInfo(SimpleConsoleLogger.java:194)
	at java.base/jdk.internal.logger.SimpleConsoleLogger.log(SimpleConsoleLogger.java:122)
	at java.base/java.lang.System$Logger.log(System.java:1241)
	at java.base/jdk.internal.logger.LoggerFinderLoader.loadLoggerFinder(LoggerFinderLoader.java:155)
	at java.base/jdk.internal.logger.LoggerFinderLoader.service(LoggerFinderLoader.java:73)
	at java.base/jdk.internal.logger.LoggerFinderLoader.getLoggerFinder(LoggerFinderLoader.java:206)
	at java.base/java.lang.System$LoggerFinder.lambda$accessProvider$0(System.java:1622)
	at java.base/java.security.AccessController.doPrivileged(Native Method)
	at java.base/java.security.AccessController.doPrivileged(AccessController.java:430)
	at java.base/java.lang.System$LoggerFinder.accessProvider(System.java:1623)
	at java.base/java.lang.System$LoggerFinder.getLoggerFinder(System.java:1611)
	at java.base/jdk.internal.logger.LazyLoggers.accessLoggerFinder(LazyLoggers.java:339)
	at java.base/jdk.internal.logger.LazyLoggers.getLoggerFromFinder(LazyLoggers.java:389)
	at java.base/jdk.internal.logger.LazyLoggers.getLazyLogger(LazyLoggers.java:444)
	at java.base/jdk.internal.logger.LazyLoggers.getLogger(LazyLoggers.java:414)
	at java.base/java.lang.System.getLogger(System.java:1673)
	at java.base/jdk.internal.event.EventHelper.isLoggingSecurity(EventHelper.java:145)
	at java.base/sun.security.jca.JCAUtil.tryCommitCertEvent(JCAUtil.java:104)
	at java.base/java.security.cert.CertificateFactory.generateCertificate(CertificateFactory.java:356)",,,,,,,,,,,,JDK-8316823,JDK-8316731,JDK-8316534,JDK-8316602,JDK-8316551,,,,,,,,,,,JDK-8317152,,,,,,,,,JDK-8314277,,JDK-8315696,,,,JDK-8292033,,,"2023-08-15 08:40;coffeys;stacktrace_11.0.20.txt;https://bugs.openjdk.org/secure/attachment/105110/stacktrace_11.0.20.txt",,,,,,,,,,,,,,,,,,,,,,"0|i32qaj:",9223372036854775807,b14,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@3cc899dc,,,,,,,,,"2023-08-15 08:38;coffeys;I've obtained a fuller stack trace which tells the full story. Will attach to bug report. Signed jars appear to be on the classpath. Those jars need to be inspected during the ServiceLoader logic used by jdk.internal.logger.LoggerFinderLoader to find the Logger. The opening of a signed jar triggers a call to sun.security.jca.JCAUtil.tryCommitCertEvent which then triggers a call to java.lang.System.getLogger and recursion ensues. I haven't triggered the issue in a local reproducer yet.;;;","2023-08-15 15:13;coffeys;managed to trigger the StackOverflowError in a local reproducer. A signed jar file on the application classpath offering the ""java.lang.System$LoggerFinder"" service is necessary.;;;","2023-08-17 23:55;coffeys;Current fix involves modifying the jdk.internal.logger.LoggerFinderLoader.loadLoggerFinder() logic to detect recursive calls during bootstrap phase of Logger framework initialization . Working on automated testcase and hope to log a PR today.;;;","2023-08-23 08:47;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/15404
Date: 2023-08-23 15:41:16 +0000;;;","2023-08-30 05:58;dukebot;Changeset: 7daae1fb
Author:    Sean Coffey <coffeys@openjdk.org>
Date:      2023-08-30 12:54:57 +0000
URL:       https://git.openjdk.org/jdk/commit/7daae1fb4267f92b38f0152611d69b7b89691087
;;;","2023-09-04 02:20;coffeys;Fix Request for jdk21u

A Logger initialization issue exposed by JDK-8292033. Can lead to JDK initialization issues for some applications which have signed jars on the application classpath.;;;","2023-09-11 11:58;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk21u/pull/153
Date: 2023-09-11 18:50:35 +0000;;;","2023-09-20 04:00;goetz;Fix request [17u]

I backport this for parity with 17.0.10-oracle. I include follow-up test fixes JDK-8315696 and JDK-8316087.
Medium risk. 
Trivial resolves needed.
Tests pass.  SAP niglty testing passed.;;;","2023-09-20 05:13;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/1756
Date: 2023-09-20 11:01:26 +0000;;;",,,,,,,,,,,,,,,,,,
Unable to load system libraries on Windows when using a SecurityManager,JDK-8314260,5108014,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,pminborg,pminborg,pminborg,2023-08-15 01:44,2023-09-13 22:39,2023-10-01 09:55,2023-09-07 04:54,22,,,,,,,22,core-libs,,0,foreign-memaccess+abi,,,,,,,,,,,,,,,,,,,The method `SystemLookup::makeWindowsLookup` fails whenever a default `SecurityManager` is installed. The `System::getenv` method is managed by the `SecurityManager` (if any).,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i32q9v:",9223372036854775807,b15,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@28ce6b78,,,,,,,,,"2023-08-15 04:47;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/panama-foreign/pull/865
Date: 2023-08-15 11:42:19 +0000;;;","2023-09-05 02:00;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/15564
Date: 2023-09-05 08:52:50 +0000;;;","2023-09-07 04:54;dukebot;Changeset: b408a82f
Author:    Per Minborg <pminborg@openjdk.org>
Date:      2023-09-07 11:52:14 +0000
URL:       https://git.openjdk.org/jdk/commit/b408a82f9b4ce4441f49d745034ef923a880778f
;;;",,,,,,,,,,,,,,,,,,,,,,,,
javax/swing/JToolBar/4529206/bug4529206.java fails intermittently on Linux,JDK-8314246,5108000,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,honkar,honkar,honkar,2023-08-14 17:35,2023-08-24 00:22,2023-10-01 09:55,2023-08-17 13:38,22,,,,,,,22,client-libs,,0,intermittent,sn_150,,,,,,,,,,,,,,,,,,"javax/swing/JToolBar/4529206/bug4529206.java fails on linux-x64

Caused by: java.lang.RuntimeException: setFloating does not work correctly
	at bug4529206$3.run(bug4529206.java:103)
	at java.desktop/java.awt.event.InvocationEvent.dispatch(InvocationEvent.java:308)
	at java.desktop/java.awt.EventQueue.dispatchEventImpl(EventQueue.java:773)
	at java.desktop/java.awt.EventQueue$4.run(EventQueue.java:720)
	at java.desktop/java.awt.EventQueue$4.run(EventQueue.java:714)
	at java.base/java.security.AccessController.doPrivileged(AccessController.java:400)
	at java.base/java.security.ProtectionDomain$JavaSecurityAccessImpl.doIntersectionPrivilege(ProtectionDomain.java:87)
	at java.desktop/java.awt.EventQueue.dispatchEvent(EventQueue.java:742)
	at java.desktop/java.awt.EventDispatchThread.pumpOneEventForFilters(EventDispatchThread.java:203)
	at java.desktop/java.awt.EventDispatchThread.pumpEventsForFilter(EventDispatchThread.java:124)
	at java.desktop/java.awt.EventDispatchThread.pumpEventsForHierarchy(EventDispatchThread.java:113)
	at java.desktop/java.awt.EventDispatchThread.pumpEvents(EventDispatchThread.java:109)
	at java.desktop/java.awt.EventDispatchThread.pumpEvents(EventDispatchThread.java:101)
	at java.desktop/java.awt.EventDispatchThread.run(EventDispatchThread.java:90)",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,linux,,,,,"0|i32q6r:",9223372036854775807,b12,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@568a5b31,,,,,,,,,"2023-08-16 11:31;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/15316
Date: 2023-08-16 18:23:59 +0000;;;","2023-08-17 13:38;dukebot;Changeset: 808bb1f7
Author:    Harshitha Onkar <honkar@openjdk.org>
Date:      2023-08-17 20:37:06 +0000
URL:       https://git.openjdk.org/jdk/commit/808bb1f7bc5025b4ab01e4e9057feebd253b95a7
;;;","2023-08-18 07:35;dcubed;The fix for this bug is integrated in jdk-22+12-815.;;;",,,,,,,,,,,,,,,,,,,,,,,,
Incorrect file headers in new tests from JDK-8312597,JDK-8314244,5107998,Bug,Resolved,JDK,JDK,software,duke,,,P2,Fixed,dholmes,dholmes,dholmes,2023-08-14 16:30,2023-09-04 05:48,2023-10-01 09:55,2023-08-14 21:31,22,,,,,,,22,hotspot,,0,noreg-doc,oracle-triage-17,oracle-triage-21,oracle-triage-22,regression,tier1,,,,,,,,,,,,,,"The new files are failing our validation process in our CI builds.

test/hotspot/jtreg/compiler/arguments/TestLogJIT.java
test/hotspot/jtreg/compiler/arguments/TestTraceTypeProfile.java

IANAL but IIUC it is perfectly fine to have an Amazon only copyright notice, but the rest of the GPL header must be what Oracle has defined i.e. Oracle designates the CPE not Amazon, and the Oracle contact information must be present.

But also note that  test files do not get the CPE anyway",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8312597,,,,,,,,,,,,,,,,,,,,,,22,,,,,,,"0|i32q6b:",9223372036854775807,b11,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2023-08-14 17:49;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/15282
Date: 2023-08-15 00:44:36 +0000;;;","2023-08-14 21:31;dukebot;Changeset: b7dee213
Author:    David Holmes <dholmes@openjdk.org>
Date:      2023-08-15 04:29:25 +0000
URL:       https://git.openjdk.org/jdk/commit/b7dee213dfb2d0ec4e22837898bf4837c1fe523d
;;;",,,,,,,,,,,,,,,,,,,,,,,,,
test/jdk/sun/security/pkcs/pkcs7/SignerOrder.java fails to compile,JDK-8314240,5107987,Bug,Resolved,JDK,JDK,software,duke,,,P2,Fixed,bperez,mullan,mullan,2023-08-14 14:42,2023-08-24 00:21,2023-10-01 09:55,2023-08-16 12:57,22,,,,,,,22,security-libs,,0,noreg-self,ProblemList,regression,tier3,,,,,,,,,,,,,,,,"test/jdk/sun/security/pkcs/pkcs7/SignerOrder.java:105: error: no suitable method found for verify(no arguments)
        SignerInfo[] verifs1 = pkcs71.verify();
                                     ^
    method PKCS7.verify(SignerInfo,byte[]) is not applicable
      (actual and formal argument lists differ in length)
    method PKCS7.verify(byte[]) is not applicable
      (actual and formal argument lists differ in length)
/opt/mach5/mesos/work_dir/jib-master/install/jdk-22+11-758/src.full/open/test/jdk/sun/security/pkcs/pkcs7/SignerOrder.java:108: error: no suitable method found for verify(no arguments)
        SignerInfo[] verifs2 = pkcs72.verify();
                                     ^
    method PKCS7.verify(SignerInfo,byte[]) is not applicable
      (actual and formal argument lists differ in length)
    method PKCS7.verify(byte[]) is not applicable
      (actual and formal argument lists differ in length)
Note: /opt/mach5/mesos/work_dir/jib-master/install/jdk-22+11-758/src.full/open/test/jdk/sun/security/pkcs/pkcs7/SignerOrder.java uses or overrides a deprecated API.
Note: Recompile with -Xlint:deprecation for details.
2 errors
result: Failed. Compilation failed: Compilation failed
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8314059,,,,,,,,,,,,,,,generic,,,,,,,,,generic,,,,,"0|i32q3v:",9223372036854775807,b12,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@2ec284e3,,,,,,,,,"2023-08-14 14:50;dcubed;This is a regression caused by JDK-8314059 so I'm
bumping this from a P3 -> P2.;;;","2023-08-14 15:02;mullan;I think it is a fairly easy fix to the test, but better to get this on the ProblemList for now so we can look at this failure with more time and in more detail.;;;","2023-08-15 04:20;mullan;Passing null to `PKCS7.verify(byte[])` in the test will fix this failure.;;;","2023-08-15 12:48;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/15296
Date: 2023-08-15 19:42:44 +0000;;;","2023-08-16 12:57;dukebot;Changeset: f143380d
Author:    Ben Perez <ben.perez@oracle.com>
Committer: Sean Mullan <mullan@openjdk.org>
Date:      2023-08-16 19:56:13 +0000
URL:       https://git.openjdk.org/jdk/commit/f143380d013b8c0e5ab7ca0026c34e27e7946f69
;;;",,,,,,,,,,,,,,,,,,,,,,
Overflow in Collections.rotate,JDK-8314236,5107983,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,smarks,shade,shade,2023-08-14 13:22,2023-09-20 22:22,2023-10-01 09:55,2023-09-18 02:23,11,17,21,22,8,,,22,core-libs,,0,amazon-interest,,,,,,,,,,,,,,,,,,,"An integer overflow/wraparound in Collections.rotate() can lead to IndexOutOfBoundsException. Reproducer:

    // need something like -Xmx16g
    Collections.rotate(new ArrayList<>(Collections.nCopies((1<<30)+1, """")), 1<<30)

See the PR for more details:

    https://github.com/openjdk/jdk/pull/15270",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i32q2z:",9223372036854775807,b16,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@73bf8bbe,,,,,,,,,"2023-08-14 14:05;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/15270
Date: 2023-08-14 12:56:46 +0000;;;","2023-09-18 02:23;dukebot;Changeset: 3828dc91
Author:    Nikita Sakharin <17588081+nikita-sakharin@users.noreply.github.com>
Committer: Aleksey Shipilev <shade@openjdk.org>
Date:      2023-09-18 09:20:11 +0000
URL:       https://git.openjdk.org/jdk/commit/3828dc913a3ea28d622b69bd07f26949128eb5f7
;;;",,,,,,,,,,,,,,,,,,,,,,,,,
C2: assert(assertion_predicate_has_loop_opaque_node(iff)) failed: unexpected,JDK-8314233,5107977,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,chagedorn,dcubed,dcubed,2023-08-14 10:35,2023-09-13 20:14,2023-10-01 09:55,2023-08-16 00:00,22,,,,,,,22,hotspot,,0,c2,oracle-triage-17,oracle-triage-21,oracle-triage-22,regression,test-bigapps-Dacapo,tier5,tier8,,,,,,,,,,,,"The following test failed in the JDK22 CI:

applications/dacapo/Dacapo.java

Here's a log file snippet:

[2023-08-14T16:44:20.719572645Z] Gathering output for process 2923408
[2023-08-14T16:44:26.914356850Z] Waiting for completion for process 2923408
[2023-08-14T16:44:26.915487848Z] Waiting for completion finished for process 2923408
[stress.process.out] #
[stress.process.out] # A fatal error has been detected by the Java Runtime Environment:
[stress.process.out] #
[stress.process.out] #  Internal Error (/opt/mach5/mesos/work_dir/slaves/cd627e65-f015-4fb1-a1d2-b6c9b8127f98-S135058/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/3119c4a0-64a4-4064-a3b4-4497f656b3ab/runs/f39436ef-9705-4317-a63d-5bfeadc2260c/workspace/open/src/hotspot/share/opto/loopTransform.cpp:2086), pid=2919906, tid=2919924
[stress.process.out] #  assert(assertion_predicate_has_loop_opaque_node(iff)) failed: unexpected
[stress.process.out] #
[stress.process.out] # JRE version: Java(TM) SE Runtime Environment (22.0+11) (fastdebug build 22-ea+11-746)
[stress.process.out] # Java VM: Java HotSpot(TM) 64-Bit Server VM (fastdebug 22-ea+11-746, mixed mode, sharing, tiered, compressed oops, compressed class ptrs, g1 gc, linux-aarch64)
[stress.process.out] # Problematic frame:
[stress.process.out] # V  [libjvm.so+0x1146b34]  PhaseIdealLoop::initialize_assertion_predicates_for_peeled_loop(PredicateBlock const*, LoopNode*, int, Node*, Node*, IdealLoopTree*, unsigned int, Node_List const&)+0x544
[stress.process.out] #
[stress.process.out] # Core dump will be written. Default location: Core dumps may be processed with ""/opt/core.sh %p"" (or dumping to /opt/mach5/mesos/work_dir/slaves/cd627e65-f015-4fb1-a1d2-b6c9b8127f98-S9466/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/8cbeb22b-60b4-488d-b76b-e5b2686bfd68/runs/d4662e77-d3a1-4b3e-b987-88fac60d185b/testoutput/test-support/jtreg_closed_test_hotspot_jtreg_applications_dacapo_Dacapo_java/scratch/0/core.2919906)
[stress.process.out] #
[stress.process.out] Unsupported internal testing APIs have been used.
[stress.process.out] 
[stress.process.out] # An error report file with more information is saved as:
[stress.process.out] # /opt/mach5/mesos/work_dir/slaves/cd627e65-f015-4fb1-a1d2-b6c9b8127f98-S9466/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/8cbeb22b-60b4-488d-b76b-e5b2686bfd68/runs/d4662e77-d3a1-4b3e-b987-88fac60d185b/testoutput/test-support/jtreg_closed_test_hotspot_jtreg_applications_dacapo_Dacapo_java/scratch/0/hs_err_pid2919906.log
[stress.process.out] [thread 2922836 also had an error]

Here's the crashing thread's stack:

---------------  T H R E A D  ---------------

Current thread (0x0000ffff902a7510):  JavaThread ""C2 CompilerThread0"" daemon [_thread_in_native, id=2919924, stack(0x0000ffff64045000,0x0000ffff64243000) (2040K)]


Current CompileTask:
C2: 638586 54322       4       net.sourceforge.pmd.lang.java.metrics.impl.visitors.AtfdBaseVisitor::visit (46 bytes)

Stack: [0x0000ffff64045000,0x0000ffff64243000],  sp=0x0000ffff6423d6b0,  free space=2017k
Native frames: (J=compiled Java code, j=interpreted, Vv=VM code, C=native code)
V  [libjvm.so+0x1146b34]  PhaseIdealLoop::initialize_assertion_predicates_for_peeled_loop(PredicateBlock const*, LoopNode*, int, Node*, Node*, IdealLoopTree*, unsigned int, Node_List const&)+0x544  (loopTransform.cpp:2086)
V  [libjvm.so+0x1147308]  PhaseIdealLoop::do_peeling(IdealLoopTree*, Node_List&)+0x7c8  (loopTransform.cpp:783)
V  [libjvm.so+0x1148d20]  PhaseIdealLoop::do_maximally_unroll(IdealLoopTree*, Node_List&)+0xb0  (loopTransform.cpp:2383)
V  [libjvm.so+0x117faec]  PhaseIdealLoop::build_and_optimize()+0x112c  (loopnode.cpp:4509)
V  [libjvm.so+0x90a9b4]  PhaseIdealLoop::optimize(PhaseIterGVN&, LoopOptsMode)+0x2b4  (loopnode.hpp:1108)
V  [libjvm.so+0x9074a0]  Compile::Optimize()+0x650  (compile.cpp:2302)
V  [libjvm.so+0x909448]  Compile::Compile(ciEnv*, ciMethod*, int, Options, DirectiveSet*)+0x1508  (compile.cpp:850)
V  [libjvm.so+0x760810]  C2Compiler::compile_method(ciEnv*, ciMethod*, int, bool, DirectiveSet*)+0x110  (c2compiler.cpp:119)
V  [libjvm.so+0x915394]  CompileBroker::invoke_compiler_on_method(CompileTask*)+0x8e4  (compileBroker.cpp:2276)
V  [libjvm.so+0x915dc4]  CompileBroker::compiler_thread_loop()+0x594  (compileBroker.cpp:1944)
V  [libjvm.so+0xdaf26c]  JavaThread::thread_main_inner()+0xec  (javaThread.cpp:720)
V  [libjvm.so+0x160e904]  Thread::call_run()+0xb0  (thread.cpp:217)
V  [libjvm.so+0x1369498]  thread_native_entry(Thread*)+0x138  (os_linux.cpp:783)
C  [libpthread.so.0+0x7908]  start_thread+0x188

",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8305636,JDK-8314116,,,,,,,,,,generic,,,,,,,,,linux,,,,,"0|i32q1n:",9223372036854775807,b11,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2023-08-15 06:48;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/15290
Date: 2023-08-15 13:42:48 +0000;;;","2023-08-15 07:02;chagedorn;ILW = Wrongly finding a non-template assertion predicate in loop peeling leading to a crash, only observable with intrinsics/single test in tier5, disable compilation of affected method = HLM = P3;;;","2023-08-16 00:00;dukebot;Changeset: 0b12480d
Author:    Christian Hagedorn <chagedorn@openjdk.org>
Date:      2023-08-16 06:58:23 +0000
URL:       https://git.openjdk.org/jdk/commit/0b12480de88dc1d2a8d7ca3aa2597be3df1ebde1
;;;",,,,,,,,,,,,,,,,,,,,,,,,
Series of colon-style fallthrough switch cases with guards compiled incorrectly,JDK-8314226,5107967,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,abimpoudis,tvaleev,tvaleev,2023-08-14 08:27,2023-09-22 01:03,2023-10-01 09:55,2023-09-13 08:12,22,,,,,,,22,tools,,0,jdk21u-fix-request,jdk21u-fix-SQE-ok-next,jdk21u-fix-yes,,,,,,,,,,,,,,,,,"Code:

public class Test {
  void test(Object obj) {
    switch (obj) {
      case Integer _ when ((Integer) obj) > 0:
      case String _ when !((String) obj).isEmpty():
        System.out.println(obj + "": Positive number or non-empty string"");
        break;
      default:
        System.out.println(""other"");
    }
  }

  public static void main(String[] args) {
    new Test().test("""");
  }
}

This program can be compiled correctly (expected) and prints (unexpectedly)

"": Positive number or non-empty string""

It should print ""other"", as guard condition is not satisfied. Note that if I remove never taken ""case Integer _ when ((Integer) obj) > 0:"", then the string guard is taken into account.",,,,,,,,,,,,JDK-8316724,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8314578,,,,,,,,,,,,,,,,,,,,,,21,,,,,,,"0|i32pzf:",9223372036854775807,b15,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4dca67bd,,,,,,,,,"2023-09-01 03:30;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/15532
Date: 2023-09-01 10:02:20 +0000;;;","2023-09-13 08:11;dukebot;Changeset: 3b0a6d2a
Author:    Aggelos Biboudis <abimpoudis@openjdk.org>
Committer: Vicente Romero <vromero@openjdk.org>
Date:      2023-09-13 15:09:01 +0000
URL:       https://git.openjdk.org/jdk/commit/3b0a6d2a6842962218b8cebcd9c0672cb4ee6720
;;;","2023-09-15 01:16;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk21u/pull/161
Date: 2023-09-15 08:08:59 +0000;;;","2023-09-15 08:48;roboduke;[jdk21u-fix-request] Approval Request from Aggelos Biboudis
Involving guards and unnamed pattern variables in series of colon-style fallthrough switch cases, may not prove common in JDK21. However since this pattern explores a style of type structure analysis, it would be ideal to not have this style blocked.;;;",,,,,,,,,,,,,,,,,,,,,,,
"Case enumConstant, pattern compilation fails",JDK-8314216,5107952,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,abimpoudis,tvaleev,tvaleev,2023-08-14 04:58,2023-08-24 00:22,2023-10-01 09:55,2023-08-17 00:35,21,,,,,,,22,tools,,0,jdk21u-fix-request,jdk21u-fix-SQE-ok,jdk21u-fix-yes,,,,,,,,,,,,,,,,,"Code:

package com.example;

public class Test {
  enum X {A, B}

  void test(Object obj) {
    switch (obj) {
      case X.A, Integer _ -> System.out.println(""A or Integer"");
      case String _, X.B -> System.out.println(""B or String"");
      default -> System.out.println(""other"");
    }
  }

  public static void main(String[] args) {
    new Test().test(""ddd"");
  }
}

Compile with --enable-preview

Expected: either successful compilation or two compilation errors in both case lines. Actual: one compilation error:

com\example\Test.java:8:15
java: <identifier> expected

Java parses `case String _, X.B` (when pattern goes first) but does not parse `case X.A, Integer _` when enum constant goes first. It should either accept or reject both. According to current spec draft, it should reject both, but probably it's better to rectify the spec draft.",,,,,,,,,,,,JDK-8314681,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,21,,,,,,,"0|i32pw3:",9223372036854775807,b12,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4dca67bd,,,,,,,,,"2023-08-16 08:03;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/15310
Date: 2023-08-16 14:52:14 +0000;;;","2023-08-17 00:35;dukebot;Changeset: 43311930
Author:    Aggelos Biboudis <abimpoudis@openjdk.org>
Committer: Jan Lahoda <jlahoda@openjdk.org>
Date:      2023-08-17 07:33:16 +0000
URL:       https://git.openjdk.org/jdk/commit/43311930107d1783b742adbe567e9bdbcb55775d
;;;","2023-08-17 00:52;abimpoudis;Fix Request

This bug permitted interleaving of different kinds of patterns in the same case asymmetrically (one ordering worked and another one not). The correct behavior is for both to not compile and emit an invalid case combination error. The new check is covered by the relevant test. The fix applies cleanly to jdk21u (https://github.com/openjdk/jdk21u/pull/69);;;","2023-08-17 01:01;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk21u/pull/69
Date: 2023-08-17 07:52:56 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,
DocLint should warn about unknown standard tags,JDK-8314213,5107950,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,prappo,prappo,prappo,2023-08-14 04:13,2023-08-24 00:22,2023-10-01 09:55,2023-08-17 00:44,22,,,,,,,22,tools,,0,doclint,,,,,,,,,,,,,,,,,,,"DocLint does not report on unknown tags, if no custom tags are specified.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8288660,,,,JDK-8314448,,,,,,,,,,,,,,,,,,,,,,,,,"0|i32pvn:",9223372036854775807,b12,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@7900061a,,,,,,,,,"2023-08-16 09:59;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/15314
Date: 2023-08-16 16:51:50 +0000;;;","2023-08-17 00:44;dukebot;Changeset: 6f1071f5
Author:    Pavel Rappo <prappo@openjdk.org>
Date:      2023-08-17 07:43:07 +0000
URL:       https://git.openjdk.org/jdk/commit/6f1071f5ed6bd552378b2b70cd685b74e7f9e43d
;;;",,,,,,,,,,,,,,,,,,,,,,,,,
Crash when loading cnn.com in WebView,JDK-8314212,5107949,Bug,Resolved,JDK,JDK,software,duke,,,P2,Fixed,jbhaskar,sarvejai,sarvejai,2023-08-14 04:06,2023-09-01 12:14,2023-10-01 09:55,2023-08-18 06:54,8u391,jfx22,,,,,,jfx22,javafx,,0,CPU23_10-critical-approved,CPU23_10-critical-SQE-OK,imt,imt-3152,jfx21u-fix-request,jfx21u-fix-yes,regression,regression_8310681,sn_150,sqebug,webkit-2.40,,,,,,,,,"The 'cnn.com' site is loading properly in the chrome browser but when loaded via JavFX WebView it is getting closed unexpectedly in a few seconds.

Test is passing up till jdk8u391 b03. Test is failing jdk8u391 b04 onwards (and on b05, and b06 as well) after the web kit upgrade in this release.

The issue is reproducible in macos 13, macos 12, windows 10, windows 11, and OEL 8.",,,,,,,,,,,,JDK-8314586,JDK-8314696,JDK-8314584,JDK-8314582,JDK-8314723,JDK-8314583,JDK-8315557,JDK-8314722,,,,,,,,,,,,,,,,,,,JDK-8315085,JDK-8314230,,,JDK-8310681,,,"2023-08-14 04:13;sarvejai;HelloWebView.java;https://bugs.openjdk.org/secure/attachment/105100/HelloWebView.java","2023-08-14 05:23;smandalika;hs_err_pid24060.log;https://bugs.openjdk.org/secure/attachment/105104/hs_err_pid24060.log",,,,,,,,,,,,,b04,8u391,,,,,,,"0|i32pvf:",9223372036854775807,b06,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@5a8b92bd,,,,,,,,,"2023-08-17 04:46;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jfx/pull/1212
Date: 2023-08-17 07:51:56 +0000;;;","2023-08-18 06:54;dukebot;Changeset: ddd1f796
Author:    Jay Bhaskar <jbhaskar@openjdk.org>
Date:      2023-08-18 13:50:50 +0000
URL:       https://git.openjdk.org/jfx/commit/ddd1f79685383f592a4651811a9a9070569a7832
;;;","2023-08-18 08:10;jbhaskar;jfx21u-fix-request raised:
-This is backporting for https://github.com/openjdk/jfx/pull/1212
-Backport for jfx8u is done.
-The fix prevents https://cnn.com page crash;;;","2023-08-18 08:12;kcr;Approved to backport to jfx21u for 21.0.1.;;;","2023-08-18 08:23;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jfx21u/pull/10
Date: 2023-08-18 15:17:56 +0000;;;","2023-09-01 11:51;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jfx17u/pull/143
Date: 2023-09-01 18:47:28 +0000;;;",,,,,,,,,,,,,,,,,,,,,
Add NativeLibraryUnload event,JDK-8314211,5107948,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,mbaesken,mbaesken,mbaesken,2023-08-14 03:30,2023-08-21 14:01,2023-10-01 09:55,2023-08-16 00:43,22,,,,,,,22,hotspot,,0,,,,,,,,,,,,,,,,,,,,"JDK-8313251 introduced a a NativeLibraryLoad event that provides us more detail about shared lib/dll loads.
There should be a similar event for unload operations of shared libs.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,generic,,,,,,,,,generic,,,,,"0|i32pv7:",9223372036854775807,b11,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@42995637,,,,,,,,,"2023-08-14 07:57;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/15272
Date: 2023-08-14 14:51:50 +0000;;;","2023-08-16 00:42;dukebot;Changeset: ef6db5c2
Author:    Matthias Baesken <mbaesken@openjdk.org>
Date:      2023-08-16 07:39:42 +0000
URL:       https://git.openjdk.org/jdk/commit/ef6db5c2991b92e2a600fa01d1d3f5026055ad17
;;;",,,,,,,,,,,,,,,,,,,,,,,,,
Wrong @since tag for RandomGenerator::equiDoubles,JDK-8314209,5107945,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,rgiulietti,marchof,marchof,2023-08-14 02:01,2023-08-21 14:01,2023-10-01 09:55,2023-08-16 01:24,22,,,,,,,22,core-libs,,0,jacoco-found,noreg-doc,,,,,,,,,,,,,,,,,,In JDK-8302987 the new method RandomGenerator::equiDoubles was introduced for Java 22 but the @since Tag says 21.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8302987,,,,,,,,,,,,,,,,,,,,,,22,,,,,,,"0|i32puj:",9223372036854775807,b11,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@38ded199,,,,,,,,,"2023-08-14 02:18;alanb;I think the PR/change was originally prepared assuming it would be JDK 21 but it actually went into JDK 22.;;;","2023-08-16 01:11;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/15303
Date: 2023-08-16 08:07:05 +0000;;;","2023-08-16 01:24;dukebot;Changeset: b80001de
Author:    Raffaello Giulietti <rgiulietti@openjdk.org>
Date:      2023-08-16 08:21:34 +0000
URL:       https://git.openjdk.org/jdk/commit/b80001de0c0aeedeb412430660a4727fc26be98b
;;;",,,,,,,,,,,,,,,,,,,,,,,,
AttachListener::pd_find_operation always returning nullptr,JDK-8314197,5107932,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,mbaesken,mbaesken,mbaesken,2023-08-13 23:57,2023-08-21 13:59,2023-10-01 09:55,2023-08-15 00:50,21,22,,,,,,22,hotspot,,0,,,,,,,,,,,,,,,,,,,,"AttachListener::pd_find_operation always returns nullptr and seems to be obsolete, so we could probably remove it and clean up the coding a bit.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8244224,,,,,,,,,,,generic,,,,,,,,,generic,,,,,"0|i32prn:",9223372036854775807,b11,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@2846162a,,,,,,,,,"2023-08-14 03:18;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/15265
Date: 2023-08-14 10:13:21 +0000;;;","2023-08-15 00:50;dukebot;Changeset: 63389272
Author:    Matthias Baesken <mbaesken@openjdk.org>
Date:      2023-08-15 07:48:38 +0000
URL:       https://git.openjdk.org/jdk/commit/6338927221ee82a556b55ccf79239acb2ac9729a
;;;",,,,,,,,,,,,,,,,,,,,,,,,,
"C2 compilation fails with ""bad AD file""",JDK-8314191,5107929,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,qamai,thartmann,thartmann,2023-08-13 22:32,2023-09-22 08:38,2023-10-01 09:55,2023-09-05 09:18,18,19,20,21,22,,,22,hotspot,,0,amazon-interest,c2,jdk21u-fix-request,jdk21u-fix-SQE-ok-next,jdk21u-fix-yes,oracle-triage-17,oracle-triage-22,,,,,,,,,,,,,"java -Xcomp -XX:CompileCommand=compileonly,Test4::test*  -XX:-TieredCompilation Test4.java
CompileCommand: compileonly Test4.test* bool compileonly = true

o137  CountedLoopEnd  === o144 o155 o154  [[ o138 o140 7 ]] [gt] P=0,900000, C=-1,000000

--N: o137  CountedLoopEnd  === o144 o155 o154  [[ o138 o140 7 ]] [gt] P=0,900000, C=-1,000000

   --N: o155  Bool  === _ o154  [[ o137 ]] [gt]
   CMPOP  0  CMPOP
   CMPOPU  0  CMPOPU
   CMPOPUCF  0  CMPOPUCF
   CMPOP_VCMPPD  0  CMPOP_VCMPPD

   --N: o154  CmpU  === _ o85 o24  [[ o155 o137 ]] 
   RFLAGSREGU  100  compU_rReg

      --N: o85  Phi  === o144 o20 o97  [[ o97 o154 ]]  #int:min+1..0
      RREGI  0  RREGI
      RAX_REGI  0  RAX_REGI
      RBX_REGI  0  RBX_REGI
      RCX_REGI  0  RCX_REGI
      RDX_REGI  0  RDX_REGI
      RDI_REGI  0  RDI_REGI
      NO_RAX_RDX_REGI  0  NO_RAX_RDX_REGI
      NO_RBP_R13_REGI  0  NO_RBP_R13_REGI
      STACKSLOTI  100  storeSSI

      --N: o24  LoadI  === _ o7 o23  [[ o26 o154 ]]  @java/lang/Class (java/io/Serializable,java/lang/constant/Constable,java/lang/reflect/AnnotatedElement,java/lang/invoke/TypeDescriptor,java/lang/reflect/GenericDeclaration,java/lang/reflect/Type,java/lang/invoke/TypeDescriptor$OfField):exact+112 *, name=limit, idx=4; #int
      RREGI  0  RREGI
      RAX_REGI  0  RAX_REGI
      RBX_REGI  0  RBX_REGI
      RCX_REGI  0  RCX_REGI
      RDX_REGI  0  RDX_REGI
      RDI_REGI  0  RDI_REGI
      NO_RAX_RDX_REGI  0  NO_RAX_RDX_REGI
      NO_RBP_R13_REGI  0  NO_RBP_R13_REGI
      STACKSLOTI  100  storeSSI

#
# A fatal error has been detected by the Java Runtime Environment:
#
#  Internal Error (/opt/mach5/mesos/work_dir/slaves/741e9afd-8c02-45c3-b2e2-9db1450d0832-S24783/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/d520ea84-8540-4e3f-bebb-7467656d99a8/runs/a75cd7f7-52f4-4fb9-b459-e34df625d6c3/workspace/open/src/hotspot/share/opto/matcher.cpp:1723), pid=476875, tid=476888
#  assert(false) failed: bad AD file
#
# JRE version: Java(TM) SE Runtime Environment (21.0+22) (fastdebug build 21-ea+22-LTS-1875)
# Java VM: Java HotSpot(TM) 64-Bit Server VM (fastdebug 21-ea+22-LTS-1875, compiled mode, sharing, compressed oops, compressed class ptrs, g1 gc, linux-amd64)
# Problematic frame:
# V  [libjvm.so+0x12ede38]  Matcher::Label_Root(Node const*, State*, Node*, Node*&)+0x508

Current CompileTask:
C2:   1865   82    b        Test4::test (30 bytes)

Stack: [0x00007fd3b5218000,0x00007fd3b5319000],  sp=0x00007fd3b5313bc0,  free space=1006k
Native frames: (J=compiled Java code, j=interpreted, Vv=VM code, C=native code)
V  [libjvm.so+0x12ede38]  Matcher::Label_Root(Node const*, State*, Node*, Node*&)+0x508  (matcher.cpp:1723)
V  [libjvm.so+0x12ee447]  Matcher::match_tree(Node const*)+0x187
V  [libjvm.so+0x12f5a4d]  Matcher::xform(Node*, int)+0xc7d
V  [libjvm.so+0x12fb039]  Matcher::match()+0x1649
V  [libjvm.so+0x9b79ca]  Compile::Code_Gen()+0x9a
V  [libjvm.so+0x9bd7e9]  Compile::Compile(ciEnv*, ciMethod*, int, Options, DirectiveSet*)+0x1b89
V  [libjvm.so+0x814aa4]  C2Compiler::compile_method(ciEnv*, ciMethod*, int, bool, DirectiveSet*)+0x3c4
V  [libjvm.so+0x9c94f0]  CompileBroker::invoke_compiler_on_method(CompileTask*)+0x9e0
V  [libjvm.so+0x9ca398]  CompileBroker::compiler_thread_loop()+0x628
V  [libjvm.so+0xe6594e]  JavaThread::thread_main_inner()+0xee
V  [libjvm.so+0x17361e8]  Thread::call_run()+0xb8
V  [libjvm.so+0x14371da]  thread_native_entry(Thread*)+0x11a

Running with -XX:+TraceLoopOpts also triggers this:

Counted          Loop: N144/N138  counted [0,int),-2147483648 (-1 iters) 
Loop: N0/N0  has_sfpt
  Loop: N143/N142  limit_check profile_predicated predicated
    Loop: N144/N138  limit_check profile_predicated predicated counted [0,int),-2147483648 (-1 iters)  has_sfpt strip_mined
Loop: N0/N0  has_sfpt
  Loop: N143/N142  limit_check profile_predicated predicated sfpts={ 145 }
    Loop: N144/N138  limit_check profile_predicated predicated counted [int,int),#
# A fatal error has been detected by the Java Runtime Environment:
#
#  Internal Error (/opt/mach5/mesos/work_dir/slaves/741e9afd-8c02-45c3-b2e2-9db1450d0832-S24783/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/d520ea84-8540-4e3f-bebb-7467656d99a8/runs/a75cd7f7-52f4-4fb9-b459-e34df625d6c3/workspace/open/src/hotspot/share/opto/type.hpp:596), pid=479842, tid=479855
#  Error: assert(is_con()) failed
#
# JRE version: Java(TM) SE Runtime Environment (21.0+22) (fastdebug build 21-ea+22-LTS-1875)
# Java VM: Java HotSpot(TM) 64-Bit Server VM (fastdebug 21-ea+22-LTS-1875, compiled mode, sharing, compressed oops, compressed class ptrs, g1 gc, linux-amd64)
# Problematic frame:
# V  [libjvm.so+0x17585f3]  TypeInteger::get_con_as_long(BasicType) const+0xb3

Current CompileTask:
C2:   1725   82    b        Test4::test (30 bytes)

Stack: [0x00007f76b7638000,0x00007f76b7739000],  sp=0x00007f76b7732fb0,  free space=1003k
Native frames: (J=compiled Java code, j=interpreted, Vv=VM code, C=native code)
V  [libjvm.so+0x17585f3]  TypeInteger::get_con_as_long(BasicType) const+0xb3  (type.hpp:596)
V  [libjvm.so+0x12236cc]  IdealLoopTree::dump_head()+0x51c
V  [libjvm.so+0x122396b]  IdealLoopTree::dump()+0x5b
V  [libjvm.so+0x123c8cd]  PhaseIdealLoop::build_and_optimize()+0xfdd
V  [libjvm.so+0x9be9d0]  PhaseIdealLoop::optimize(PhaseIterGVN&, LoopOptsMode)+0x250
V  [libjvm.so+0x9bb02e]  Compile::Optimize()+0x10fe
V  [libjvm.so+0x9bd705]  Compile::Compile(ciEnv*, ciMethod*, int, Options, DirectiveSet*)+0x1aa5
V  [libjvm.so+0x814aa4]  C2Compiler::compile_method(ciEnv*, ciMethod*, int, bool, DirectiveSet*)+0x3c4
V  [libjvm.so+0x9c94f0]  CompileBroker::invoke_compiler_on_method(CompileTask*)+0x9e0
V  [libjvm.so+0x9ca398]  CompileBroker::compiler_thread_loop()+0x628
V  [libjvm.so+0xe6594e]  JavaThread::thread_main_inner()+0xee
V  [libjvm.so+0x17361e8]  Thread::call_run()+0xb8
V  [libjvm.so+0x14371da]  thread_native_entry(Thread*)+0x11a",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8316719,,,,JDK-8302814,JDK-8276162,,"2023-08-13 22:31;thartmann;Test4.java;https://bugs.openjdk.org/secure/attachment/105095/Test4.java",,,,,,,,,,,,,,b24,18,,,,,,,"0|i32pqz:",9223372036854775807,b14,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2023-08-14 02:17;thartmann;This is a regression from JDK-8276162 in JDK 18 b24. The new cmp optimization introduces an unexpected pattern, triggering an assert in IdealLoopTree::dump_head with -XX:+TraceLoopOpts. The corresponding ad file rules were later removed by JDK-8302814 in JDK 21 b16, now leading to a failure during matching.

ILW = Crash during C2 compilation, reproducible with single test, no workaround but disable compilation of affected method = HLM = P3;;;","2023-08-14 02:17;thartmann;[~qamai], could you please have a look?;;;","2023-08-14 02:19;thartmann;Thanks to [~chagedorn] for helping with analyzing this failure!;;;","2023-08-30 10:27;qamai;[~thartmann] I cannot reproduce this issue with and without `-XX:+TraceLoopOpts`, but my educated guess is that the loop exit test `x + MIN_INT >= limit + (MIN_INT + 1)` is transformed into `x u> limit`, which violates the assumption regarding counted loop shape. As a result, my proposed fix is to not do the transformation if either side is a loop increment variable. Can you verify if the issue is still present and if this patch can fix it? Thanks a lot.

diff --git a/src/hotspot/share/opto/subnode.cpp b/src/hotspot/share/opto/subnode.cpp
index 1dcc8b045c2..c317759585a 100644
--- a/src/hotspot/share/opto/subnode.cpp
+++ b/src/hotspot/share/opto/subnode.cpp
@@ -1556,12 +1556,14 @@ Node *BoolNode::Ideal(PhaseGVN *phase, bool can_reshape) {
   // and    ""cmp (add X min_jint) c"" into ""cmpu X (c + min_jint)""
   if (cop == Op_CmpI &&
       cmp1_op == Op_AddI &&
+      !is_cloop_increment(cmp1) &&
       phase->type(cmp1->in(2)) == TypeInt::MIN) {
     if (cmp2_op == Op_ConI) {
       Node* ncmp2 = phase->intcon(java_add(cmp2->get_int(), min_jint));
       Node* ncmp = phase->transform(new CmpUNode(cmp1->in(1), ncmp2));
       return new BoolNode(ncmp, _test._test);
     } else if (cmp2_op == Op_AddI &&
+               !is_cloop_increment(cmp2) &&
                phase->type(cmp2->in(2)) == TypeInt::MIN) {
       Node* ncmp = phase->transform(new CmpUNode(cmp1->in(1), cmp2->in(1)));
       return new BoolNode(ncmp, _test._test);
@@ -1572,12 +1574,14 @@ Node *BoolNode::Ideal(PhaseGVN *phase, bool can_reshape) {
   // and    ""cmp (add X min_jlong) c"" into ""cmpu X (c + min_jlong)""
   if (cop == Op_CmpL &&
       cmp1_op == Op_AddL &&
+      !is_cloop_increment(cmp1) &&
       phase->type(cmp1->in(2)) == TypeLong::MIN) {
     if (cmp2_op == Op_ConL) {
       Node* ncmp2 = phase->longcon(java_add(cmp2->get_long(), min_jlong));
       Node* ncmp = phase->transform(new CmpULNode(cmp1->in(1), ncmp2));
       return new BoolNode(ncmp, _test._test);
     } else if (cmp2_op == Op_AddL &&
+               !is_cloop_increment(cmp2) &&
                phase->type(cmp2->in(2)) == TypeLong::MIN) {
       Node* ncmp = phase->transform(new CmpULNode(cmp1->in(1), cmp2->in(1)));
       return new BoolNode(ncmp, _test._test);;;;","2023-09-01 01:24;thartmann;[~qamai] What JDK version and platform are you using? I just checked and I can reproduce it with latest JDK 22 (fastdebug build 22-ea+14-975) on Linux x64:

java -Xcomp -XX:CompileCommand=compileonly,Test4::test* -XX:-TieredCompilation Test4.java;;;","2023-09-02 04:38;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/15551
Date: 2023-09-02 11:34:17 +0000;;;","2023-09-05 09:18;dukebot;Changeset: 969fcdb0
Author:    Quan Anh Mai <qamai@openjdk.org>
Date:      2023-09-05 16:15:54 +0000
URL:       https://git.openjdk.org/jdk/commit/969fcdb0de962b6eda7b362af010cb138e45afcf
;;;","2023-09-21 08:32;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk21u/pull/190
Date: 2023-09-21 15:20:32 +0000;;;","2023-09-21 11:41;roboduke;[jdk21u-fix-request] Approval Request from Aleksey Shipilëv
Fixes a recent C2 regression.;;;","2023-09-22 08:38;shade;Waiting for JDK-8316719 to be resolved before continuing with backports.;;;",,,,,,,,,,,,,,,,,
[lworld] Missing InlineTypeNode re-materialization during type sharpening.,JDK-8314190,5107928,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,jbhateja,jbhateja,jbhateja,2023-08-13 22:16,2023-08-21 00:43,2023-10-01 09:55,2023-08-21 00:43,repo-valhalla,,,,,,,repo-valhalla,hotspot,,0,lworld,,,,,,,,,,,,,,,,,,," -  Currently we try to sharpen the object type to a narrower type while generating IR for class comparison.

 -  This is achieved by inserting a CheckCastPP node which casts the object type to a higher type, if cast type is an inlinetype we need to rematerialize InlineTypeNode from newly casted object which is missing currently.

https://github.com/openjdk/valhalla/blob/lworld/src/hotspot/share/opto/parse2.cpp#L2433
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,generic,,,,,,,,,generic,,,,,"0|i32pqr:",9223372036854775807,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2023-08-15 04:07;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/valhalla/pull/907
Date: 2023-08-15 11:02:32 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,,,
Dacapo.java timed out,JDK-8314184,5107913,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,lmesnik,dcubed,dcubed,2023-08-11 19:18,2023-08-31 00:54,2023-10-01 09:55,2023-08-25 15:38,22,,,,,,,22,hotspot,,0,tier5,,,,,,,,,,,,,,,,,,,"The following test timed out in the JDK22 CI:

applications/dacapo/Dacapo.java

Here's a snippet from the log file:

Process: 2097345 response was: 88
Stress process should complete by itself, just waiting for exitCode.
[stress.process.err] Iteration done: Jfr at Fri Aug 11 20:59:15 UTC 2023
[stress.process.err] Stress module finished at [Fri Aug 11 20:59:15 UTC 2023]: Jfr
[stress.process.err] Iteration done: Reference at Fri Aug 11 20:59:24 UTC 2023
[stress.process.err] Stress module finished at [Fri Aug 11 20:59:24 UTC 2023]: Reference
[stress.process.err] Iteration done: Allocator at Fri Aug 11 20:59:30 UTC 2023
[stress.process.err] Stress module finished at [Fri Aug 11 20:59:30 UTC 2023]: Allocator
[stress.process.err] Iteration done: Jvmti at Fri Aug 11 20:59:47 UTC 2023
[stress.process.err] Stress module finished at [Fri Aug 11 20:59:49 UTC 2023]: Jvmti
[stress.process.err] Iteration done: Dacapo at Fri Aug 11 21:02:29 UTC 2023
[stress.process.err] Stress module finished at [Fri Aug 11 21:02:29 UTC 2023]: Dacapo
[stress.process.err] Iteration done: Jni at Fri Aug 11 21:03:15 UTC 2023
[stress.process.err] Stress module finished at [Fri Aug 11 21:03:15 UTC 2023]: Jni
[stress.process.err] All modules have successfully finished
[Fri Aug 11 22:33:15 UTC 2023] (1691793195759) Stress process has been shutdown
[Fri Aug 11 22:33:15 UTC 2023] Execution finished.
----------rerun:(39/7953)*----------

<snip>

test result: Error. Program `/opt/mach5/mesos/work_dir/jib-master/install/jdk-22+11-735/linux-aarch64-debug.jdk/jdk-22/fastdebug/bin/java' timed out (timeout set to 7200000ms, elapsed time including timeout handling was 7540840ms).

I'm not sure if this test needs a longer timeout or not so I'm
starting this bug off in hotspot/test so [~lmesnik] can take a look.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,aarch64,,,,,,,,,linux,,,,,"0|i32pnf:",9223372036854775807,b13,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@78d03d9a,,,,,,,,,"2023-08-15 10:36;lmesnik;Looks like pure test bug stack trace says that some Dacapo benchmarks has been unfinished. Probably better just to kill the process and not waiting until it completes.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,
[lw5] the check for illegal circularity should only be done if value classes are available,JDK-8314181,5107909,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,vromero,vromero,vromero,2023-08-11 16:05,2023-08-11 18:31,2023-10-01 09:55,2023-08-11 18:31,repo-valhalla,,,,,,,repo-valhalla,tools,,0,lw5,lworld,,,,,,,,,,,,,,,,,,need to check if value classes are available before executing the new check for illegal circularity in class files see JDK-8314165,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i32pmj:",9223372036854775807,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4dca67bd,,,,,,,,,"2023-08-11 18:31;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/valhalla/pull/904
Date: 2023-08-12 01:27:07 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,,,
[lw5] check for illegal circularity at class loading time,JDK-8314165,5107887,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,vromero,vromero,vromero,2023-08-11 09:34,2023-08-11 15:50,2023-10-01 09:55,2023-08-11 15:50,repo-valhalla,,,,,,,repo-valhalla,tools,,0,lw5,lworld,,,,,,,,,,,,,,,,,,"This assertion of JEP 401 is not implemented:

```
At class load time, an error occurs if an ACC_DEFAULT class has an illegal circularity in its instance field types
```

it is in section: `class file representation & interpretation`",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i32phn:",9223372036854775807,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4dca67bd,,,,,,,,,"2023-08-11 15:14;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/valhalla/pull/903
Date: 2023-08-11 22:07:29 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,,,
os::print_hex_dump prints incorrectly for big endian platforms and unit sizes larger than 1,JDK-8314163,5107885,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,stuefe,stuefe,stuefe,2023-08-11 07:00,2023-08-21 14:00,2023-10-01 09:55,2023-08-15 22:18,22,,,,,,,22,hotspot,,0,,,,,,,,,,,,,,,,,,,,"Matthias wrote:

On AIX, we start today seeing failures , is this maybe related ?
Test gtest/NMTGtests.java#nmt-off
java.lang.AssertionError: gtest execution failed; exit code = 2. the failed tests: [os::test_print_hex_dump_vm, os::test_print_hex_dump_vm, os::test_print_hex_dump_vm, os::test_print_hex_dump_vm, os::test_print_hex_dump_vm, os::test_print_hex_dump_vm]
at GTestWrapper.main(GTestWrapper.java:98)
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
at java.base/java.lang.reflect.Method.invoke(Method.java:580)
at com.sun.javatest.regtest.agent.MainActionHelper$AgentVMRunnable.run(MainActionHelper.java:333)
at java.base/java.lang.Thread.run(Thread.java:1570)


stdout contains :
test/hotspot/gtest/runtime/test_os.cpp:174: Failure
Value of: buf
Expected: has substring ""0001 0203 0405 0607 0809 0a0b 0c0d 0e0f""
  Actual: ""0x0000000115739c70: 0000 0102 0304 0506 0008 090a 0b0c 0d0e\n0x0000000115739c80: 0010 1112 1314 1516 0018 191a 1b1c 1d1e\n0x0000000115739c90: 0020 2122 2324 2526 0028 292a 2b2c 2d2e\n0x0000000115739ca0: 0030 3132 3334 3536 0038 393a 3b3c 3d3e\n0x00000""
test/hotspot/gtest/runtime/test_os.cpp:174: Failure
Value of: buf
Expected: has substring ""00010203 04050607 08090a0b 0c0d0e0f""
  Actual: ""0x0000000115739c70: 00000000 01020304 00000008 090a0b0c\n0x0000000115739c80: 00000010 11121314 00000018 191a1b1c\n0x0000000115739c90: 00000020 21222324 00000028 292a2b2c\n0x0000000115739ca0: 00000030 31323334 00000038 393a3b3c\n0x0000000115739cb0: 0""
test/hotspot/gtest/runtime/test_os.cpp:174: Failure
Value of: buf
Expected: has substring ""0001020304050607 08090a0b0c0d0e0f""
  Actual: ""0x0000000115739c70: 0000000000000000 0000000000000008\n0x0000000115739c80: 0000000000000010 0000000000000018\n0x0000000115739c90: 0000000000000020 0000000000000028\n0x0000000115739ca0: 0000000000000030 0000000000000038\n0x0000000115739cb0: 000000000""
test/hotspot/gtest/runtime/test_os.cpp:174: Failure
Value of: buf
Expected: has substring ""0001 0203 0405 0607 0809 0a0b 0c0d 0e0f""
  Actual: ""0x0000000115739c70: 0000 0102 0304 0506 0008 090a 0b0c 0d0e\n0x0000000115739c80: 0010 1112 1314 1516 0018 191a 1b1c 1d1e\n0x0000000115739c90: 0020 2122 2324 2526 0028 292a 2b2c 2d2e\n0x0000000115739ca0: 0030 3132 3334 3536 0038 393a 3b3c 3d3e\n0x00000""
test/hotspot/gtest/runtime/test_os.cpp:174: Failure
Value of: buf
Expected: has substring ""00010203 04050607 08090a0b 0c0d0e0f""
  Actual: ""0x0000000115739c70: 00000000 01020304 00000008 090a0b0c\n0x0000000115739c80: 00000010 11121314 00000018 191a1b1c\n0x0000000115739c90: 00000020 21222324 00000028 292a2b2c\n0x0000000115739ca0: 00000030 31323334 00000038 393a3b3c\n0x0000000115739cb0: 0""
test/hotspot/gtest/runtime/test_os.cpp:174: Failure
Value of: buf
Expected: has substring ""0001020304050607 08090a0b0c0d0e0f""
  Actual: ""0x0000000115739c70: 0000000000000000 0000000000000008\n0x0000000115739c80: 0000000000000010 0000000000000018\n0x0000000115739c90: 0000000000000020 0000000000000028\n0x0000000115739ca0: 0000000000000030 0000000000000038\n0x0000000115739cb0: 000000000""
[ FAILED ] os.test_print_hex_dump_vm (4 ms) ",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8299790,,,,,,,,,,,,,,,,,,,,,,22,,,,,,,"0|i32ph7:",9223372036854775807,b11,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,,,"2023-08-15 01:30;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/15256
Date: 2023-08-12 07:55:25 +0000;;;","2023-08-15 22:18;dukebot;Changeset: 6a15860b
Author:    Thomas Stuefe <stuefe@openjdk.org>
Date:      2023-08-16 05:14:40 +0000
URL:       https://git.openjdk.org/jdk/commit/6a15860b126c9e9eb62579d9b710dcdc0ec489bb
;;;",,,,,,,,,,,,,,,,,,,,,,,,,
Replace wildcard address with loopback or local host in tests,JDK-8314160,5107880,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,rwallace,rwallace,rwallace,2023-08-11 02:56,2023-08-20 23:31,2023-10-01 09:55,2023-08-14 00:37,8-pool,,,,,,,8u401,core-libs,,0,sust-test-stabilization,teststabilization,,,,,,,,,,,,,,,,,,Fix Problem listed tests as part of Test Stabilization.,,,,,,,,,,,,JDK-8314377,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8225578,JDK-8226514,JDK-8223145,,,,,,,,,,,,,generic,,,,,,,,,,,,,,"0|i32pg3:",9223372036854775807,master,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@446e124a,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
"G1: ""yielded"" is not initialized on some paths after JDK-8140326",JDK-8314157,5107877,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,tschatzl,shade,shade,2023-08-11 02:32,2023-08-28 14:54,2023-10-01 09:55,2023-08-23 02:48,22,,,,,,,22,hotspot,,0,gc-g1,gc-pending-review,sonarcloud-found,,,,,,,,,,,,,,,,,"SonarCloud has a new warning after JDK-8140326:

```
        bool yielded;
        bool mark_aborted = yield_if_necessary(yielded);
        if (mark_aborted) {
...
        } else if (yielded && !should_rebuild_or_scrub(hr)) { // <--- Branch condition evaluates to a garbage value
...
        }
```

This warning is about `yielded` being not initialized on some paths, reading the garbage value from it on branch checks.

There are other uses of `yield_if_necessary`, and at some uses we initialize `yielded = true`. This seems a bit awkward in itself: we are assuming the yield happened even without checking it in yield_if_necessary. It is therefore unclear what should be the default value in other cases.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8140326,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i32pff:",9223372036854775807,b12,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6b00f96c,,,,,,,,,"2023-08-11 02:33;shade;Hey Thomas, a Friday bug for you :);;;","2023-08-11 03:42;tschatzl;The ""yielded"" flag is an optimization to not execute the remainder of the condition if we did not yield (there could not have been a change to the condition). I.e. only during gc (if we yielded) the result of the other part of the && condition will change.

So it should be ""false"" in any case.

Maybe it should be removed. However some additional analysis showed that there is another bug in the code, the code that actually clears the TARS, that has been erroneously deleted from older versions of JDK-8140326.

So basically the whole check would never be executed... :(;;;","2023-08-21 02:10;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/15359
Date: 2023-08-21 08:53:34 +0000;;;","2023-08-21 07:25;tschatzl;> However some additional analysis showed that there is another bug in the code, the code that actually clears the TARS, that has been erroneously deleted from older versions of JDK-8140326. 

Reinstated the original title/description of the CR because this is wrong; there is code clearing TARSes in G1ClearBitmapClosure that applies to all regions in the collection set.;;;","2023-08-23 02:48;dukebot;Changeset: 742e319a
Author:    Thomas Schatzl <tschatzl@openjdk.org>
Date:      2023-08-23 09:45:25 +0000
URL:       https://git.openjdk.org/jdk/commit/742e319a21c767d8a93e13048add961f5ca8c5d7
;;;",,,,,,,,,,,,,,,,,,,,,,
Clipboard does inexact string comparison on mime type,JDK-8314149,5107867,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,arapte,arapte,arapte,2023-08-11 00:13,2023-09-15 04:45,2023-10-01 09:55,2023-08-15 21:46,8,jfx11,jfx17,jfx22,,,,jfx22,javafx,,0,noreg-hard,sn_150,,,,,,,,,,,,,,,,,,"The mime type name should be exact same. 
Hence the comparison should look compare entire string and not look for partial match. ",,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8313006,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i32pd7:",9223372036854775807,b05,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4f591050,,,,,,,,,"2023-08-11 00:25;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jfx/pull/1207
Date: 2023-08-11 07:20:15 +0000;;;","2023-08-15 21:46;dukebot;Changeset: 9e9c3b32
Author:    Ambarish Rapte <arapte@openjdk.org>
Date:      2023-08-16 04:43:48 +0000
URL:       https://git.openjdk.org/jfx/commit/9e9c3b329a2a25dc0de946597e5c76862525ed0d
;;;",,,,,,,,,,,,,,,,,,,,,,,,,
Fix variable scope in SunMSCAPI,JDK-8314148,5107865,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,djelinski,djelinski,djelinski,2023-08-10 23:18,2023-08-31 00:55,2023-10-01 09:55,2023-08-27 22:29,22,,,,,,,22,security-libs,,0,,,,,,,,,,,,,,,,,,,,"Found when compiling with Clang for Windows; the following tests crash:
sun/security/mscapi/InteropWithSunRsaSign.java
sun/security/mscapi/ShortRSAKeyWithinTLS.java

The produced stack trace points inside NCryptSignHash, which is called from Java_sun_security_mscapi_CSignature_signCngHash.

The problem here is that the 2 local variables:
    BCRYPT_PKCS1_PADDING_INFO pkcs1Info;
    BCRYPT_PSS_PADDING_INFO pssInfo;
are scoped to the ""switch"" statement, but used later. Clang optimizes away writes to these variables, which in turn leads to crashes. It works just fine with the MSVC compiler, presumably its optimizer is less aggressive.

The fix involves extending the scope of these variables to the entire method.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i32pcr:",9223372036854775807,b13,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@2ec284e3,,,,,,,,,"2023-08-11 02:06;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/15242
Date: 2023-08-11 06:36:42 +0000;;;","2023-08-27 22:29;dukebot;Changeset: 12de9b02
Author:    Daniel Jeliński <djelinski@openjdk.org>
Date:      2023-08-28 05:27:25 +0000
URL:       https://git.openjdk.org/jdk/commit/12de9b0225363377e9a76729b11698221d4f29f2
;;;",,,,,,,,,,,,,,,,,,,,,,,,,
gc/g1/ihop/TestIHOPStatic.java fails due to extra concurrent mark with -Xcomp,JDK-8314144,5107862,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,tschatzl,anantsi,anantsi,2023-08-10 23:04,2023-09-04 05:16,2023-10-01 09:55,2023-08-16 05:11,11,17,21.0.1,22,,,,22,hotspot,,0,amazon-interest,gc-g1,gc-pending-review,jdk21u-fix-request,jdk21u-fix-yes,noreg-self,regression,sqebug,testbug,Xcomp,,,,,,,,,,"Testname: gc/g1/ihop/TestIHOPStatic.java
Product tested: jdk-21.0.1+5
OS/architecture: linux-aarch64-debug
Reproducible: Always
Is it a Regression: yes
'-Xcomp -XX:+CreateCoredumpOnCrash -XX:TieredStopAtLevel=3'


Logs:

----------System.err:(12/680)----------
java.lang.RuntimeException: Concurrent cycle was not initiated.
	at gc.g1.ihop.TestIHOPStatic.checkResult(TestIHOPStatic.java:156)
	at gc.g1.ihop.TestIHOPStatic.runTest(TestIHOPStatic.java:138)
	at gc.g1.ihop.TestIHOPStatic.main(TestIHOPStatic.java:74)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
	at java.base/java.lang.reflect.Method.invoke(Method.java:580)
	at com.sun.javatest.regtest.agent.MainActionHelper$AgentVMRunnable.run(MainActionHelper.java:333)
	at java.base/java.lang.Thread.run(Thread.java:1583)

JavaTest Message: Test threw exception: java.lang.RuntimeException
JavaTest Message: shutting down test

result: Failed. Execution failed: `main' threw exception: java.lang.RuntimeException: Concurrent cycle was not initiated.


test result: Failed. Execution failed: `main' threw exception: java.lang.RuntimeException: Concurrent cycle was not initiated.

Entire logs files can be checked in attachments.",,,,,,,,,,,,JDK-8314577,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8148397,,,"2023-08-10 23:04;anantsi;jdk-21.0.1+5;https://bugs.openjdk.org/secure/attachment/105079/jdk-21.0.1%2B5",,,,,,,,,,,,,,b04,,,,,,,,"0|i32pc3:",9223372036854775807,b11,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6b00f96c,,,,,,,,,"2023-08-11 03:08;tschatzl;The problem is -Xcomp.

It causes an additional concurrent mark cycle caused by code cache getting filled that does not have the requested message.
The concurrent mark cycle we expect is prevented/not started at the point we expect because a concurrent mark is already running.

Other compiler changes in that build probably cause more compilation, and so the failure.;;;","2023-08-16 04:54;tschatzl;Doesn't need to be confidential;;;","2023-08-16 04:59;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/15246
Date: 2023-08-11 10:54:20 +0000;;;","2023-08-16 05:11;dukebot;Changeset: 19255084
Author:    Thomas Schatzl <tschatzl@openjdk.org>
Date:      2023-08-16 12:08:56 +0000
URL:       https://git.openjdk.org/jdk/commit/1925508425cf1b2d46173754077a588290253430
;;;","2023-08-17 00:37;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk21u/pull/68
Date: 2023-08-17 07:29:31 +0000;;;",,,,,,,,,,,,,,,,,,,,,,
Missing default for switch in CreateBitmap,JDK-8314141,5107859,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,arapte,arapte,arapte,2023-08-10 22:46,2023-08-17 09:28,2023-10-01 09:55,2023-08-11 04:44,8,jfx11,jfx17,jfx22,,,,jfx22,javafx,,0,noreg-hard,sn_150,,,,,,,,,,,,,,,,,,"The switch statement in CreateBitmap() function in directwrite.cpp file is missing the default statement.
",,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8312989,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i32pbf:",9223372036854775807,b05,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4143e3f7,,,,,,,,,"2023-08-10 23:20;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jfx/pull/1206
Date: 2023-08-11 06:14:58 +0000;;;","2023-08-11 04:44;dukebot;Changeset: 8998b2d8
Author:    Ambarish Rapte <arapte@openjdk.org>
Date:      2023-08-11 11:42:53 +0000
URL:       https://git.openjdk.org/jfx/commit/8998b2d84ccdc48194abc0ae4184b2b0c5658fc3
;;;",,,,,,,,,,,,,,,,,,,,,,,,,
TEST_BUG: runtime/os/THPsInThreadStackPreventionTest.java could fail on machine with large number of cores,JDK-8314139,5107857,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,manc,manc,manc,2023-08-10 22:03,2023-08-31 08:09,2023-10-01 09:55,2023-08-11 13:45,,,,,,,,22,hotspot,,0,google-interest,jdk17u-fix-request,jdk17u-fix-yes,jdk21u-fix-request,jdk21u-fix-SQE-ok,jdk21u-fix-yes,noreg-self,,,,,,,,,,,,,"JDK-8312182 introduced the test runtime/os/THPsInThreadStackPreventionTest.java that only runs on with debug/fastdebug build of the JVM. We found this test could fail on machines with a large number of cores. E.g. on a machine with 128 cores, it fails with:
java.lang.RuntimeException: RSS+Swap larger than expected: 395m, expected at most 339m                                                                                                                                                                                                    
        at THPsInThreadStackPreventionTest.main(THPsInThreadStackPreventionTest.java:195)                                                                                                                                                                                                 
        at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)                             
        at java.base/java.lang.reflect.Method.invoke(Method.java:580)                                                                        
        at com.sun.javatest.regtest.agent.MainActionHelper$AgentVMRunnable.run(MainActionHelper.java:333)                                                                                                                                                                                 
        at java.base/java.lang.Thread.run(Thread.java:1570)",,,,,,,,,,,,JDK-8315218,JDK-8315471,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8312182,,,,,,,,,,,,,,,,,,,,,,22,,,,,,,"0|i32paz:",9223372036854775807,b11,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,,,"2023-08-10 22:46;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/15241
Date: 2023-08-11 05:41:52 +0000;;;","2023-08-11 13:44;dukebot;Changeset: 73325028
Author:    Man Cao <manc@openjdk.org>
Date:      2023-08-11 20:43:31 +0000
URL:       https://git.openjdk.org/jdk/commit/733250288325bc663afc0376342d4c5a7a471cbd
;;;","2023-08-23 01:25;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/1679
Date: 2023-08-21 12:47:15 +0000;;;","2023-08-23 01:27;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk11u-dev/pull/2086
Date: 2023-08-17 14:50:49 +0000;;;","2023-08-25 22:40;stuefe;Fix Request (21u):

It is necessary to stabilize tests post-JDK-8312182.

Patch is small, test only, low risk, and applies cleanly.;;;","2023-08-29 00:37;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk21u/pull/114
Date: 2023-08-28 15:53:19 +0000;;;","2023-08-30 11:28;stuefe;Fix Request (17u): 

It is necessary to stabilize tests post-JDK-8312182. 

Patch is small, test only, low risk, and applies cleanly.;;;","2023-08-30 11:32;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/1698
Date: 2023-08-25 12:09:44 +0000;;;",,,,,,,,,,,,,,,,,,,
Test java/net/httpclient/CancelRequestTest.java failed: WARNING: tracker for HttpClientImpl(42) has outstanding operations,JDK-8314136,5107849,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,dfuchs,dholmes,dholmes,2023-08-10 17:49,2023-09-20 22:22,2023-10-01 09:55,2023-09-15 01:33,22,,,,,,,22,core-libs,,0,httpclient,intermittent,tier2,,,,,,,,,,,,,,,,,"	 step [0] found in HttpClientImpl(41) in 245 ms
Sending: https://127.0.0.1:52305/https1/x/new/interruptThread/post/req=1
[22 s, 73 ms, 871125 ns]  Interrupting main from: Thread[#81,pool-1-thread-7,5,MainThreadGroup] (https://127.0.0.1:52305/https1/x/new/interruptThread/post/req=1)
https://127.0.0.1:52305/https1/x/new/interruptThread/post/req=1: got result or exception
https://127.0.0.1:52305/https1/x/new/interruptThread/post/req=1: Got expected exception: java.lang.InterruptedException
next iteration
Waiting for HTTP operations to terminate...
	gracedelay: 1000 ms, iterations: 100, wait/iteration: 10ms
WARNING: tracker for HttpClientImpl(42) has outstanding operations:
	Pending HTTP Requests: 1
	Pending HTTP/1.1 operations: 1
	Pending HTTP/2 streams: 0
	Pending WebSocket operations: 0
	Pending TCP connections: 0
	Pending Subscribers: 0
	Total pending operations: 1
	Facade referenced: true
	Selector alive: true
AssertionError: Found some subscribers for testPostInterrupt(https://127.0.0.1:52305/https1/x/new/interruptThread/post/req=1)
	 step [1] in HttpClientImpl(42) after 100 iterations and 7274 ms, waited 1000 ms
test CancelRequestTest.testPostInterrupt(""https://127.0.0.1:52305/https1/x/new/interruptThread"", false): failure
java.lang.AssertionError: WARNING: tracker for HttpClientImpl(42) has outstanding operations:
	Pending HTTP Requests: 1
	Pending HTTP/1.1 operations: 1
	Pending HTTP/2 streams: 0
	Pending WebSocket operations: 0
	Pending TCP connections: 0
	Pending Subscribers: 0
	Total pending operations: 1
	Facade referenced: true
	Selector alive: true
	at ReferenceTracker.check(ReferenceTracker.java:251)
	at CancelRequestTest.testPostInterrupt(CancelRequestTest.java:579)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
	at java.base/java.lang.reflect.Method.invoke(Method.java:580)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:132)
	at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:599)
	at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:174)
	at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
	at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:822)
	at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:147)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1597)
	at org.testng.TestRunner.privateRun(TestRunner.java:764)
	at org.testng.TestRunner.run(TestRunner.java:585)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:384)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:378)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:337)
	at org.testng.SuiteRunner.run(SuiteRunner.java:286)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1218)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1140)
	at org.testng.TestNG.runSuites(TestNG.java:1069)
	at org.testng.TestNG.run(TestNG.java:1037)
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:102)
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:58)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
	at java.base/java.lang.reflect.Method.invoke(Method.java:580)
	at com.sun.javatest.regtest.agent.MainWrapper$MainTask.run(MainWrapper.java:138)
	at java.base/java.lang.Thread.run(Thread.java:1570)",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8297075,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i32p97:",9223372036854775807,b16,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@446e124a,,,,,,,,,"2023-08-11 06:29;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/15249
Date: 2023-08-11 13:24:08 +0000;;;","2023-09-15 01:33;dukebot;Changeset: 4f864faf
Author:    Daniel Fuchs <dfuchs@openjdk.org>
Date:      2023-09-15 08:30:18 +0000
URL:       https://git.openjdk.org/jdk/commit/4f864faf428c8171be975a79db5bc2bc145f8805
;;;",,,,,,,,,,,,,,,,,,,,,,,,,
[Lilliput/JDK17] Make loadNKlassCompactHeaders not use a TEMP register,JDK-8314131,5107843,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,rkennke,rkennke,rkennke,2023-08-10 14:39,2023-08-11 09:02,2023-10-01 09:55,2023-08-11 09:02,repo-lilliput-17,,,,,,,repo-lilliput-17,hotspot,,0,amazon-interest,lilliput,,,,,,,,,,,,,,,,,,"The loadNKlassCompactHeaders template in the .ad files currently declares dst as TEMP_DEF. This has historic reasons: We needed to ensure that dst doesn't overlap with src, because we needed src for calling into the slow-path. In addition to that, there seems to be a related bug in C2's matcher which sometimes seems to create an oopmap entry for a temp reg, which would make GCs crash if they scan uninitialized slot (see JDK-8051805). That problem should also go away with this change. In addition to that, relaxing the type of dst might also lead to performance enhancements when register pressure is high, because we don't need two registers for loadNKlass - 1 register would be enough.",,,,,,,,,,,JDK-8314130,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,aarch64,x86_64,,,,,,,,generic,,,,,"0|i32p7v:",9223372036854775807,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2023-08-10 15:32;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/lilliput-jdk17u/pull/55
Date: 2023-08-10 22:26:33 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,,,
[Lilliput] Make loadNKlassCompactHeaders not use a TEMP register,JDK-8314130,5107842,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,rkennke,rkennke,rkennke,2023-08-10 14:37,2023-08-11 08:58,2023-10-01 09:55,2023-08-11 08:58,repo-lilliput,repo-lilliput-17,,,,,,repo-lilliput,hotspot,,0,amazon-interest,lilliput,,,,,,,,,,,,,,,,,,"The loadNKlassCompactHeaders template in the .ad files currently declares dst as TEMP_DEF. This has historic reasons: We needed to ensure that dst doesn't overlap with src, because we needed src for calling into the slow-path. In addition to that, there seems to be a related bug in C2's matcher which sometimes seems to create an oopmap entry for a temp reg, which would make GCs crash if they scan uninitialized slot (see JDK-8051805). That problem should also go away with this change. In addition to that, relaxing the type of dst might also lead to performance enhancements when register pressure is high, because we don't need two registers for loadNKlass - 1 register would be enough.",,,,,,,,,,,,JDK-8314131,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,aarch64,x86_64,,,,,,,,generic,,,,,"0|i32p7n:",9223372036854775807,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2023-08-10 15:03;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/lilliput/pull/102
Date: 2023-08-10 21:57:14 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,,,
test tools/jpackage/share/RuntimePackageTest.java#id0 fails on RHEL8,JDK-8314121,5107826,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,mbaesken,mbaesken,mbaesken,2023-08-10 08:22,2023-09-28 04:47,2023-10-01 09:55,2023-09-07 00:32,17,21,22,,,,,22,tools,,0,amazon-interest,jdk17u-fix-request,jdk17u-fix-yes,jdk21u-fix-request,jdk21u-fix-SQE-ok-next,jdk21u-fix-yes,,,,,,,,,,,,,,"on some RHEL Linux 8.X machines , we run into errors in  test    tools/jpackage/share/RuntimePackageTest.java#id0   , error can be seen below.
It looks like these errors occur when running the jtreg tests with higher concurrency, I did not see them when running just the single test.

When adding some test output ,  we see the 2 top install dirs below (1 is expected, not 2) :
./test/unpacked-rpm/opt
./test/unpacked-rpm/usr

error output :

java.lang.AssertionError: Expected [1]. Actual [2]: Check the package has 1 top installation directories
       at jdk.jpackage.test.TKit.error(TKit.java:273)
       at jdk.jpackage.test.TKit.assertEquals(TKit.java:576)
       at jdk.jpackage.test.PackageTest$Handler.verifyRootCountInUnpackedPackage(PackageTest.java:705)
       at jdk.jpackage.test.PackageTest$Handler.lambda$verifyPackageInstalled$3(PackageTest.java:635)
       at java.base/java.util.Optional.ifPresent(Optional.java:178)
       at jdk.jpackage.test.PackageTest$Handler.verifyPackageInstalled(PackageTest.java:633)
       at jdk.jpackage.test.PackageTest$Handler.accept(PackageTest.java:592)
       at jdk.jpackage.test.PackageTest$2.accept(PackageTest.java:504)
       at jdk.jpackage.test.PackageTest$2.accept(PackageTest.java:411)
       at jdk.jpackage.test.Functional$ThrowingConsumer.lambda$toConsumer$0(Functional.java:41)
       at java.base/java.lang.Iterable.forEach(Iterable.java:75)
       at jdk.jpackage.test.PackageTest.lambda$runActions$24(PackageTest.java:381)
       at java.base/java.util.ArrayList.forEach(ArrayList.java:1596)
       at jdk.jpackage.test.PackageTest.lambda$runActions$25(PackageTest.java:380)
       at java.base/java.util.ArrayList.forEach(ArrayList.java:1596)
       at jdk.jpackage.test.PackageTest.runActions(PackageTest.java:379)
       at jdk.jpackage.test.RunnablePackageTest.run(RunnablePackageTest.java:58)
       at RuntimePackageTest.test(RuntimePackageTest.java:83)
       at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
       at java.base/java.lang.reflect.Method.invoke(Method.java:580)
       at jdk.jpackage.test.MethodCall.accept(MethodCall.java:145)
       at jdk.jpackage.test.TestInstance.run(TestInstance.java:230)
       at jdk.jpackage.test.TKit.lambda$ignoreExceptions$5(TKit.java:141)
       at jdk.jpackage.test.TKit.lambda$runTests$3(TKit.java:126)
       at java.base/java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1708)
       at java.base/java.util.stream.ReferencePipeline$Head.forEach(ReferencePipeline.java:762)
       at jdk.jpackage.test.TKit.lambda$runTests$4(TKit.java:123)
       at jdk.jpackage.test.Functional$ThrowingRunnable.lambda$toRunnable$0(Functional.java:105)
       at jdk.jpackage.test.TKit.withExtraLogStream(TKit.java:109)
       at jdk.jpackage.test.TKit.runTests(TKit.java:122)
       at jdk.jpackage.test.Main.runTests(Main.java:79)
       at jdk.jpackage.test.Main.lambda$main$2(Main.java:75)
       at jdk.jpackage.test.Functional$ThrowingRunnable.lambda$toRunnable$0(Functional.java:105)
       at jdk.jpackage.test.TKit.withExtraLogStream(TKit.java:109)
       at jdk.jpackage.test.Main.main(Main.java:75)
       at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
       at java.base/java.lang.reflect.Method.invoke(Method.java:580)
       at com.sun.javatest.regtest.agent.MainWrapper$MainTask.run(MainWrapper.java:138)
       at java.base/java.lang.Thread.run(Thread.java:1570)
java.lang.AssertionError: Expected [1]. Actual [2]: Check the package has 1 top installation directories
       at jdk.jpackage.test.TKit.error(TKit.java:273)
       at jdk.jpackage.test.TKit.assertEquals(TKit.java:576)
       at jdk.jpackage.test.PackageTest$Handler.verifyRootCountInUnpackedPackage(PackageTest.java:705)
       at jdk.jpackage.test.PackageTest$Handler.lambda$verifyPackageInstalled$3(PackageTest.java:635)
       at java.base/java.util.Optional.ifPresent(Optional.java:178)
       at jdk.jpackage.test.PackageTest$Handler.verifyPackageInstalled(PackageTest.java:633)
       at jdk.jpackage.test.PackageTest$Handler.accept(PackageTest.java:592)
       at jdk.jpackage.test.PackageTest$2.accept(PackageTest.java:504)
       at jdk.jpackage.test.PackageTest$2.accept(PackageTest.java:411)
       at jdk.jpackage.test.Functional$ThrowingConsumer.lambda$toConsumer$0(Functional.java:41)
       at java.base/java.lang.Iterable.forEach(Iterable.java:75)
       at jdk.jpackage.test.PackageTest.lambda$runActions$24(PackageTest.java:381)
       at java.base/java.util.ArrayList.forEach(ArrayList.java:1596)
       at jdk.jpackage.test.PackageTest.lambda$runActions$25(PackageTest.java:380)
       at java.base/java.util.ArrayList.forEach(ArrayList.java:1596)
       at jdk.jpackage.test.PackageTest.runActions(PackageTest.java:379)
       at jdk.jpackage.test.RunnablePackageTest.run(RunnablePackageTest.java:58)
       at RuntimePackageTest.testUsrInstallDir(RuntimePackageTest.java:90)
       at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
       at java.base/java.lang.reflect.Method.invoke(Method.java:580)
       at jdk.jpackage.test.MethodCall.accept(MethodCall.java:145)
       at jdk.jpackage.test.TestInstance.run(TestInstance.java:230)
       at jdk.jpackage.test.TKit.lambda$ignoreExceptions$5(TKit.java:141)
       at jdk.jpackage.test.TKit.lambda$runTests$3(TKit.java:126)
       at java.base/java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1708)
       at java.base/java.util.stream.ReferencePipeline$Head.forEach(ReferencePipeline.java:762)
       at jdk.jpackage.test.TKit.lambda$runTests$4(TKit.java:123)
       at jdk.jpackage.test.Functional$ThrowingRunnable.lambda$toRunnable$0(Functional.java:105)
       at jdk.jpackage.test.TKit.withExtraLogStream(TKit.java:109)
       at jdk.jpackage.test.TKit.runTests(TKit.java:122)
       at jdk.jpackage.test.Main.runTests(Main.java:79)
       at jdk.jpackage.test.Main.lambda$main$2(Main.java:75)
       at jdk.jpackage.test.Functional$ThrowingRunnable.lambda$toRunnable$0(Functional.java:105)
       at jdk.jpackage.test.TKit.withExtraLogStream(TKit.java:109)
       at jdk.jpackage.test.Main.main(Main.java:75)
       at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
       at java.base/java.lang.reflect.Method.invoke(Method.java:580)
       at com.sun.javatest.regtest.agent.MainWrapper$MainTask.run(MainWrapper.java:138)
       at java.base/java.lang.Thread.run(Thread.java:1570)

",,,,,,,,,,,,JDK-8316205,JDK-8317239,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8316563,,,,JDK-8311631,,,,,,,,,,,generic,,,,,,,,,linux,,,,,"0|i32p43:",9223372036854775807,b15,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@3656b41f,,,,,,,,,"2023-08-10 08:46;asemenyuk;-----Original Message-----
From: Christian Stein 
Sent: Thursday, 10 August 2023 16:58
To: Baesken, Matthias ; Alexey Semenyuk 
Subject: Re: [External] : RE: Error in test tools/jpackage/share/RuntimePackageTest.java#id0 on RHEL8

Hi Matthias, hi Alexey,

No, I don't know of a way to ensure some tests are always synchronously - except for what you already discussed: jtreg ... -conc:N ... (with N being a low number, like 1)

Skimming https://github.com/openjdk/jdk/blob/master/test/jdk/tools/jpackage/share/RuntimePackageTest.java seems to be about installing an application onto an operating system, right? Should the test (or the operating system) manage some means to control what to do when multiple installations are performed at the same time?

Cheers,
Christian

________________________________________
From: Baesken, Matthias 
Sent: Thursday, August 10, 2023 16:27
To: Alexey Semenyuk; Christian Stein
Subject: RE: [External] : RE: Error in test tools/jpackage/share/RuntimePackageTest.java#id0 on RHEL8


       >> It might be caused  by “multiple tests”  (we have some concurrency  set  for the  jtreg  tier<x>  runs).

  *   I agree.
  *
  *   I don't know. Christian Stein can help better with jtreg questions. I guess the question is how to run all jpackage tests synchronously.

One could probably put them into a separate group here  :

https://github.com/openjdk/jdk/blob/master/test/jdk/TEST.groups

and  document to run this group  with conc 1  .  Not really nice but would work.

Christian, maybe there is a better way to run those  tools/jpackage/share   jtreg  tests   synchronously ?
It looks like when running them with some higher concurrency , they start to fail .
We  run those tests currently with higher concurrency  (I think it depends on core number of the machine,  but conc is often between 10 and 20 )  .

Best regards, Matthias


From: Alexey Semenyuk 
Sent: Thursday, 10 August 2023 16:04
To: Baesken, Matthias 
Subject: Re: [External] : RE: Error in test tools/jpackage/share/RuntimePackageTest.java#id0 on RHEL8


On 8/9/2023 3:39 AM, Baesken, Matthias wrote:

> It looks broken. It should be ./test/unpacked-rpm/opt for this test.
> The problem you experience can be related to JDK-8311631

Hi Alexey,   the issue you pointed to is
“When multiple users run tools/jpackage/share/LicenseTest.java, Permission denied for writing /var/tmp/*.files”

I do not think that “multiple users”  is our problem .  But looking at my observation :

> A strange thing  I noticed – when I execute the single test  (the failure is from a whole suite run), the test works .


It might be causes  by “multiple tests”  (we have some concurrency  set  for the  jtreg  tier<x>  runs).
I agree.


Can we configure the test to run “alone”   ?
I don't know. Christian Stein can help better with jtreg questions. I guess the question is how to run all jpackage tests synchronously.

- Alexey


Best regards, Matthias


From: Alexey Semenyuk 
Sent: Friday, 4 August 2023 16:30
To: Baesken, Matthias 
Subject: Re: [External] : RE: Error in test tools/jpackage/share/RuntimePackageTest.java#id0 on RHEL8


On 8/4/2023 3:59 AM, Baesken, Matthias wrote:

  1.  Actual [2]: Check the package has 1 top installation directories

Hi Alexey, one additional info,  when listing the directories  I get those 2  :

List file(s) of unpacked dir and check count:
./test/unpacked-rpm/opt
./test/unpacked-rpm/usr

(in our nightly test run )

Is this expected or does this structure look broken to you ?
It looks broken. It should be ./test/unpacked-rpm/opt for this test.

The problem you experience can be related to JDK-8311631

- Alexey;;;","2023-08-31 11:40;asemenyuk;Hi Matthias,

On 8/31/2023 4:25 AM, Baesken, Matthias wrote:
>> I suspect the problem is not with the test, but with rpm that jpackage
>> produces. It looks like that by some reason it picks up some files from
>> the previous rpmbuild session. This can be related to
>> https://bugs.openjdk.org/browse/JDK-8311631 as I suggested earlier.
>> JDK-8311631 was because rpmbuild command triggered by jpackage used
>> /var/tmp directory for intermediate files. Imagine you run jpackage
>> twice and the first instance aborts leaving some debris out there. The
>> second instance will pick garbage and put in the rpm. I suspect this is
>> what is going on. The fix for JDK-8311631 made all intermediate rpm
>> source files go into unique directory. I would advise trying JDK-8311631 patch.
> Hi Alexey, the JBS issue you mentioned
>
> https://bugs.openjdk.org/browse/JDK-8311631
>
> has been pushed some weeks ago,  but we see the error  we are talking about  also in jdk-head = jdk22 (with this change included) so it is not sufficient unfortunately.
> It can very well be that it is an issue with rpmbuild .
>
> Looking  into  opt  folder we find a lot of files belonging to JDK so this seems to be fine.
> In the additional  second  usr  folder  we find
>
> ./unpacked-rpm/usr
> ./unpacked-rpm/usr/lib
> ./unpacked-rpm/usr/lib/.build-id
> ./unpacked-rpm/usr/lib/.build-id/1f
> ./unpacked-rpm/usr/lib/.build-id/1f/50f5b0abe95b3975a76c7d0cb3b8f5950dca80
> ./unpacked-rpm/usr/lib/.build-id/5b
> ./unpacked-rpm/usr/lib/.build-id/5b/2003e93144004b2ad927f603a9cb5a15ae1475
>
> --> this looks very strange .   The  files  50f5b0abe95b3975a76c7d0cb3b8f5950dca80  and  2003e93144004b2ad927f603a9cb5a15ae1475  are binaries.
> Names look strange .   Using strings on the files  I see a lot of strings   with prefix  bfd_*    so maybe this is libbfd or something related to it .
These files are not from another jpackage generated rpm. Given that JDK-8311631 is unrelated to the issue you experience.
>
> Is this expected to be there ? Have you seen this before ?
No. No.
>
> Here is some info an the strange folder  (we are on RHEL) :
>
> https://urldefense.com/v3/__https://access.redhat.com/discussions/5045161__;!!ACWV5N9M2RV99hQ!IJ2Ke7saPsf0__5WtP1rY3DGPFi-Kqu5MAEdUEwruFJdazFnc_rfln1r9Ojc8pQUMjIdRyJz0-4e_M9MlJzp2T4pyoYZBQ$
>
> looks like it is for ""improved debugging""   ??
Automatically adding /usr/lib/.build-id to package seems to be a ""feature"" of the rpmbuild according to https://bugzilla.redhat.com/show_bug.cgi?id=1724153.

I guess adding ""%define _build_id_links none"" somewhere around https://github.com/openjdk/jdk/blob/master/src/jdk.jpackage/linux/classes/jdk/jpackage/internal/resources/template.spec#L31 should solve the issue.

>
> We could also send you an jtr  of a failed run if this  helps ...
Thank you! I don't think this is needed at this stage. Let's try the fix with adding ""_build_id_links"" to the spec first.

- Alexey
;;;","2023-09-01 00:02;mbaesken;Adding ""%define _build_id_links none""  to the template.spec fixed the issue.;;;","2023-09-01 00:26;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/15528
Date: 2023-09-01 07:22:12 +0000;;;","2023-09-07 00:32;dukebot;Changeset: 8107eab3
Author:    Matthias Baesken <mbaesken@openjdk.org>
Date:      2023-09-07 07:30:32 +0000
URL:       https://git.openjdk.org/jdk/commit/8107eab3c09b3f9fcf1348c3bf1deb7c4ac2fdf3
;;;","2023-09-12 00:39;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk21u/pull/154
Date: 2023-09-12 07:33:34 +0000;;;","2023-09-12 00:44;mbaesken;jdk21u backport request
I would like to have the patch in jdk21u as well, because the issue is present there too. The patch is low-to-mid risk and applies cleanly.;;;","2023-09-27 00:11;mbaesken;jdk17u-dev backport request
I would like to have the patch in jdk17u-dev as well, because the issue is present there too. The patch is low-to-mid risk and applies cleanly.;;;","2023-09-27 00:19;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/1799
Date: 2023-09-27 07:08:51 +0000;;;",,,,,,,,,,,,,,,,,,
RISC-V: Incorrect VMReg encoding in RISCV64Frame.java,JDK-8314117,5107822,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,fjiang,fjiang,fjiang,2023-08-10 06:53,2023-08-22 05:41,2023-10-01 09:55,2023-08-14 00:52,22,,,,,,,22,hotspot,,0,jdk17u-fix-request,jdk17u-fix-yes,jdk21u-fix-request,jdk21u-fix-yes,,,,,,,,,,,,,,,,"Inspired by JDK-8247351, we find that fp VMReg encoding for RISCV was incorrect. For 64-bit VM, VMReg has two slots. So the fp defined in RISCV64Frame.java should be 8 << 1 instead of 8.",,,,,,,,,,,,JDK-8314769,JDK-8314690,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,riscv,,,,,,,,,linux,,,,,"0|i32p37:",9223372036854775807,b11,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@714e388c,,,,,,,,,"2023-08-10 07:08;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/15226
Date: 2023-08-10 14:01:25 +0000;;;","2023-08-14 00:52;dukebot;Changeset: 5c916228
Author:    Feilong Jiang <fjiang@openjdk.org>
Date:      2023-08-14 07:50:43 +0000
URL:       https://git.openjdk.org/jdk/commit/5c9162288570a140138a0055cd9c4e88fe40e69d
;;;","2023-08-21 03:43;fjiang;Fix Request (21u): Fix the incorrect VMReg encoding in RISCV64Frame.java. RISC-V only change, no risk for other platforms. Applies clean.;;;","2023-08-21 03:49;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk21u/pull/75
Date: 2023-08-21 10:42:29 +0000;;;","2023-08-21 03:50;fjiang;Fix Request (17u): Fix the incorrect VMReg encoding in RISCV64Frame.java. RISC-V only change, no risk for other platforms. Applies clean.;;;","2023-08-21 03:57;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/1678
Date: 2023-08-21 10:50:38 +0000;;;",,,,,,,,,,,,,,,,,,,,,
C2: assert(false) failed: malformed control flow after JDK-8305636,JDK-8314116,5107821,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,chagedorn,shade,shade,2023-08-10 06:53,2023-09-04 04:33,2023-10-01 09:55,2023-08-14 01:18,22,,,,,,,22,hotspot,,0,c2,javafuzzer,oracle-triage-17,oracle-triage-21,oracle-triage-22,regression,,,,,,,,,,,,,,"The attached Fuzzer test fails:

```
$ cd 0007/
$ ../build/linux-x86_64-server-fastdebug/images/jdk/bin/java -cp . -XX:-TieredCompilation Test

...
dist dump
---------------------------------------------
   0  3675  If  === 3595 3551  [[ 3457 ]] P=0.999999, C=-1.000000
   1  3457  IfFalse  === 3675  [[ 921 ]] #0 !orig=[1439]
#
# A fatal error has been detected by the Java Runtime Environment:
#
#  Internal Error (/home/shipilev/shipilev-jdk/src/hotspot/share/opto/compile.cpp:4008), pid=14082, tid=14099
#  assert(false) failed: malformed control flow
#
# JRE version: OpenJDK Runtime Environment (22.0) (fastdebug build 22-internal-adhoc.shipilev.shipilev-jdk)
# Java VM: OpenJDK 64-Bit Server VM (fastdebug 22-internal-adhoc.shipilev.shipilev-jdk, mixed mode, sharing, compressed oops, compressed class ptrs, g1 gc, linux-amd64)
# Problematic frame:
# V  [libjvm.so+0x9804fc]  Compile::final_graph_reshaping()+0x11ac
```

Bisection points to JDK-8305636.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8305636,JDK-8314233,,,JDK-8305428,,,"2023-08-10 06:53;shade;0007.zip;https://bugs.openjdk.org/secure/attachment/105077/0007.zip",,,,,,,,,,,,,,,,,,,,,,"0|i32p2z:",9223372036854775807,b11,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2023-08-10 06:53;shade;I checked it is not the same as JDK-8314106, as the suggested fix from there does not resolve this issue.;;;","2023-08-10 07:17;chagedorn;Thanks for reporting this as well. I'm not sure if I can keep up with your pace - but let's hope there are no further regressions from JDK-8305636. I'll have a look.;;;","2023-08-10 07:18;chagedorn;ILW = Malformed graph assertion and recent regression, single fuzzer case, disable compilation of affected method = HLM = P3;;;","2023-08-10 07:21;shade;I have more failing Fuzzer tests, but they fall into these two groups: JDK-8314106 and JDK-8314116 (this one). I will re-test failing fuzzer tests once both fixes land, and submit more if those are not the instances of the same two bugs.;;;","2023-08-11 01:19;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/15244
Date: 2023-08-11 08:13:57 +0000;;;","2023-08-11 01:19;chagedorn;I've just sent a PR out for this one (unrelated to JDK-8314106). Hopefully, this will fix all the regressions. Maybe you can check if both patches fix all the failing cases that you've observed so far.;;;","2023-08-11 01:45;shade;Yes, I think all currently found Fuzzer test failures are fixed by two current PRs.;;;","2023-08-11 01:46;chagedorn;Thanks for checking and confirming that Aleksey!;;;","2023-08-14 01:18;dukebot;Changeset: a39ed108
Author:    Christian Hagedorn <chagedorn@openjdk.org>
Date:      2023-08-14 08:15:02 +0000
URL:       https://git.openjdk.org/jdk/commit/a39ed1087b3c188f06c9aa602313f3b9bf20f9c2
;;;",,,,,,,,,,,,,,,,,,
C2: assert(is_valid()) failed: must be valid after JDK-8305636,JDK-8314106,5107811,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,chagedorn,shade,shade,2023-08-10 04:49,2023-09-04 04:33,2023-10-01 09:55,2023-08-14 01:16,22,,,,,,,22,hotspot,,0,c2,intermittent,javafuzzer,oracle-triage-17,oracle-triage-21,oracle-triage-22,regression,tier2,tier6,,,,,,,,,,,"The attached Fuzzer test fails:

```
cd 0001/
../build/linux-x86_64-server-fastdebug/images/jdk/bin/java -Xmx512m -XX:-TieredCompilation Test

# A fatal error has been detected by the Java Runtime Environment:
#
#  Internal Error (/home/shipilev/shipilev-jdk/src/hotspot/share/opto/predicates.hpp:252), pid=18183, tid=18203
#  assert(is_valid()) failed: must be valid
#

Current thread (0x00007f8f6425e980):  JavaThread ""C2 CompilerThread4"" daemon [_thread_in_native, id=18203, stack(0x00007f8fe170c000,0x00007f8fe180d000) (1028K)]


Current CompileTask:
C2:    254   27             Test::vMeth (380 bytes)

Stack: [0x00007f8fe170c000,0x00007f8fe180d000],  sp=0x00007f8fe18076b0,  free space=1005k
Native frames: (J=compiled Java code, j=interpreted, Vv=VM code, C=native code)
V  [libjvm.so+0x1122f5f]  PhaseIdealLoop::clone_parse_predicate_to_unswitched_loops(PredicateBlock const*, Deoptimization::DeoptReason, IfProjNode*&, IfProjNode*&)+0xaf  (predicates.hpp:252)
V  [libjvm.so+0x112322a]  PhaseIdealLoop::clone_parse_and_assertion_predicates_to_unswitched_loop(IdealLoopTree*, Node_List&, IfProjNode*&, IfProjNode*&)+0x1ea  (loopPredicate.cpp:449)
V  [libjvm.so+0x11412ae]  PhaseIdealLoop::create_slow_version_of_loop(IdealLoopTree*, Node_List&, IfNode*, PhaseIdealLoop::CloneLoopMode)+0x8ae  (loopUnswitch.cpp:255)
V  [libjvm.so+0x11424aa]  PhaseIdealLoop::do_unswitching(IdealLoopTree*, Node_List&)+0xfa  (loopUnswitch.cpp:142)
V  [libjvm.so+0x113eb58]  IdealLoopTree::iteration_split_impl(PhaseIdealLoop*, Node_List&)+0x1c8  (loopTransform.cpp:3601)
V  [libjvm.so+0x113f142]  IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&)+0x2e2  (loopTransform.cpp:3730)
V  [libjvm.so+0x113f123]  IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&)+0x2c3  (loopTransform.cpp:3742)
V  [libjvm.so+0x113f123]  IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&)+0x2c3  (loopTransform.cpp:3742
```

Bisection points to JDK-8305636.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8305636,,,,,,,"2023-08-10 04:48;shade;0001.zip;https://bugs.openjdk.org/secure/attachment/105069/0001.zip",,,,,,,,,,,,,,,,,,,,,,"0|i32p0r:",9223372036854775807,b11,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2023-08-10 05:03;chagedorn;We've also just observed it once in tier2 with compiler/vectorapi/reshape/TestVectorCastAVX1.java on Windows.;;;","2023-08-10 05:17;shade;Cool. The failure on the Fuzzer test reproduces very reliably for me here.;;;","2023-08-10 05:22;chagedorn;That's great because I was not able to reproduce TestVectorAVX1.java on Linux, yet. I'll have a look.;;;","2023-08-10 05:24;chagedorn;ILW = Assertion in Loop Unswitching, seems intermittent/single fuzzer case, possibly disable compilation of affected method or use -XX:-LoopUnswitching = HLM = P3;;;","2023-08-10 06:42;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/15225
Date: 2023-08-10 13:35:46 +0000;;;","2023-08-10 06:55;shade;Please see if JDK-8314116 is a part of this one? I tested with the first revision of the PR for this issue, and the issue still replicates.;;;","2023-08-11 01:15;chagedorn;I've had a look and it looks unrelated. This one here is a bug in loop unswitching and the other one is actually an existing bug that is now triggering more often because of an accidental change in loop peeling done in JDK-8305636 which was only intended for the complete fix in JDK-8288981.;;;","2023-08-14 01:16;dukebot;Changeset: 1de5bf1c
Author:    Christian Hagedorn <chagedorn@openjdk.org>
Date:      2023-08-14 08:14:42 +0000
URL:       https://git.openjdk.org/jdk/commit/1de5bf1ce94c20bc2fd481cd4387f170b0d3c63d
;;;",,,,,,,,,,,,,,,,,,,
java/lang/ProcessHandle/InfoTest.java fails on Windows when run as user with Administrator privileges,JDK-8314094,5107799,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,clanger,clanger,clanger,2023-08-10 02:47,2023-09-14 08:41,2023-10-01 09:55,2023-09-05 01:32,11,17,21,22,,,,22,core-libs,,0,jdk11u-fix-request,jdk11u-fix-yes,jdk17u-fix-request,jdk17u-fix-yes,jdk21u-fix-request,jdk21u-fix-SQE-ok-next,jdk21u-fix-yes,,,,,,,,,,,,,"The test java/lang/ProcessHandle/InfoTest.java can fail when run on Windows as user which is in the Administrators group.

The test checks whether the child Process user as returned by the Process Handle matches the current user. It determines the current user by creating a file and reading its owner. However, in Windows, when a user belongs to the administrators group and runs elevated, the owner of a new file is ""BUILTIN\Administrators"", so it is not possible to determine the current user correctly in this way.

The test failure will look like:

test InfoTest.test2(): failure
java.lang.AssertionError: User name expected [BUILTIN\\Administrators] but found [<MYDOMAIN>\\<MYUSER>]
	at org.testng.Assert.fail(Assert.java:99)
	at org.testng.Assert.failNotEquals(Assert.java:1037)
	at org.testng.Assert.assertEqualsImpl(Assert.java:140)
	at org.testng.Assert.assertEquals(Assert.java:122)
	at org.testng.Assert.assertEquals(Assert.java:629)
	at InfoTest.test2(InfoTest.java:166)
",,,,,,,,,,,,JDK-8316302,JDK-8316169,JDK-8316301,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,windows,,,,,"0|i32oy3:",9223372036854775807,b14,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4c088d55,,,,,,,,,"2023-08-10 03:01;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/15222
Date: 2023-08-10 09:54:43 +0000;;;","2023-09-05 01:32;dukebot;Changeset: 69c9ec92
Author:    Christoph Langer <clanger@openjdk.org>
Date:      2023-09-05 08:30:03 +0000
URL:       https://git.openjdk.org/jdk/commit/69c9ec92d04a399946b2157690a1dc3fec517329
;;;","2023-09-05 01:41;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk21u/pull/135
Date: 2023-09-05 08:35:34 +0000;;;","2023-09-07 07:22;clanger;Fix request (21u, 17u, 11u):
Fixes a test issue in a specific scenario. No risk. Patch applies clean.;;;","2023-09-13 03:21;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/1729
Date: 2023-09-13 10:14:34 +0000;;;","2023-09-13 03:27;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk11u-dev/pull/2128
Date: 2023-09-13 10:20:01 +0000;;;","2023-09-13 06:34;roboduke;[jdk17u-fix-request] Approval Request from Christoph Langer
;;;",,,,,,,,,,,,,,,,,,,,
[11u] A typo in the fix for JDK-8312462 is causing test failure in ChildAlwaysOnTopTest.java,JDK-8314086,5107790,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,phh,myano,myano,2023-08-10 01:19,2023-09-06 23:00,2023-10-01 09:55,2023-08-30 01:01,11.0.21,,,,,,,11.0.21,client-libs,,0,jdk11u-fix-request,jdk11u-fix-yes,,,,,,,,,,,,,,,,,,"In the fix for JDK-8312462, in line 113, `{` is missing. 
This is causing compilation failure in ChildAlwaysOnTopTest.java.

----------System.err:(187/13177)*----------
ChildAlwaysOnTopTest.java:116: error: illegal start of type
        else {
        ^
ChildAlwaysOnTopTest.java:122: error: class, interface, or enum expected
    public static void test(Window parent) throws Exception {
                  ^
ChildAlwaysOnTopTest.java:126: error: class, interface, or enum expected
                public void run() {
                       ^
ChildAlwaysOnTopTest.java:128: error: class, interface, or enum expected
                    win1.setName(""Top"");
                    ^
ChildAlwaysOnTopTest.java:130: error: class, interface, or enum expected
                    win2 = parent == null ? new JDialog() : new JDialog(parent);
                    ^
ChildAlwaysOnTopTest.java:131: error: class, interface, or enum expected
                    win2.setName(""Behind"");
                    ^
ChildAlwaysOnTopTest.java:133: error: class, interface, or enum expected
                    JLabel label = new JLabel(""TOP WINDOW"");
                    ^
ChildAlwaysOnTopTest.java:135: error: class, interface, or enum expected
                    win1.setSize(200, 200);
                    ^
ChildAlwaysOnTopTest.java:136: error: class, interface, or enum expected
                    Panel panel = new Panel();
                    ^
ChildAlwaysOnTopTest.java:137: error: class, interface, or enum expected
                    panel.setBackground(Color.GREEN);
                    ^
ChildAlwaysOnTopTest.java:138: error: class, interface, or enum expected
                    panel.add(label);
                    ^
ChildAlwaysOnTopTest.java:139: error: class, interface, or enum expected
                    win1.add(panel);
                    ^
ChildAlwaysOnTopTest.java:140: error: class, interface, or enum expected
                    win1.setAlwaysOnTop(true);
                    ^
ChildAlwaysOnTopTest.java:143: error: class, interface, or enum expected
                    label = new JLabel(""BEHIND WINDOW"");
                    ^
ChildAlwaysOnTopTest.java:144: error: class, interface, or enum expected
                    win2.setSize(300, 300);
                    ^
ChildAlwaysOnTopTest.java:145: error: class, interface, or enum expected
                    panel = new Panel();
                    ^
ChildAlwaysOnTopTest.java:146: error: class, interface, or enum expected
                    panel.setBackground(Color.RED);
                    ^
ChildAlwaysOnTopTest.java:147: error: class, interface, or enum expected
                    panel.add(label);
                    ^
ChildAlwaysOnTopTest.java:148: error: class, interface, or enum expected
                    win2.add(panel);
                    ^
ChildAlwaysOnTopTest.java:150: error: class, interface, or enum expected
                    win1.setVisible(true);
                    ^
ChildAlwaysOnTopTest.java:151: error: class, interface, or enum expected
                    win2.setVisible(true);
                    ^
ChildAlwaysOnTopTest.java:152: error: class, interface, or enum expected
                }
                ^
ChildAlwaysOnTopTest.java:155: error: class, interface, or enum expected
            robot = new Robot();
            ^
ChildAlwaysOnTopTest.java:156: error: class, interface, or enum expected
            robot.setAutoDelay(300);
            ^
ChildAlwaysOnTopTest.java:157: error: class, interface, or enum expected
            robot.waitForIdle();
            ^
ChildAlwaysOnTopTest.java:161: error: class, interface, or enum expected
            System.out.println("" >> Testing Scenario 1 ..."");
            ^
ChildAlwaysOnTopTest.java:162: error: class, interface, or enum expected
            SwingUtilities.invokeAndWait(()-> {
            ^
ChildAlwaysOnTopTest.java:164: error: class, interface, or enum expected
                win2.setVisible(true);
                ^
ChildAlwaysOnTopTest.java:165: error: class, interface, or enum expected
            });
            ^
ChildAlwaysOnTopTest.java:167: error: class, interface, or enum expected
            checkTopWindow(caseNo, 1, Color.GREEN);
            ^
ChildAlwaysOnTopTest.java:173: error: class, interface, or enum expected
            System.out.println("" >> Testing Scenario 2 ..."");
            ^
ChildAlwaysOnTopTest.java:174: error: class, interface, or enum expected
            SwingUtilities.invokeAndWait(()-> {
            ^
ChildAlwaysOnTopTest.java:176: error: class, interface, or enum expected
                if (parent != null) {
                ^
ChildAlwaysOnTopTest.java:178: error: class, interface, or enum expected
                    parent.toFront();
                    ^
ChildAlwaysOnTopTest.java:179: error: class, interface, or enum expected
                }
                ^
ChildAlwaysOnTopTest.java:182: error: class, interface, or enum expected
            checkTopWindow(caseNo, 2, Color.GREEN);
            ^
ChildAlwaysOnTopTest.java:189: error: class, interface, or enum expected
            System.out.println("" >> Testing Scenario 3 ..."");
            ^
ChildAlwaysOnTopTest.java:190: error: class, interface, or enum expected
            SwingUtilities.invokeAndWait(new Runnable() {
            ^
ChildAlwaysOnTopTest.java:192: error: class, interface, or enum expected
                public void run() {
                       ^
ChildAlwaysOnTopTest.java:194: error: class, interface, or enum expected
                    if (parent != null) {
                    ^
ChildAlwaysOnTopTest.java:196: error: class, interface, or enum expected
                        parent.setVisible(true);
                        ^
ChildAlwaysOnTopTest.java:197: error: class, interface, or enum expected
                    }
                    ^
ChildAlwaysOnTopTest.java:201: error: class, interface, or enum expected
            robot.delay(300);
            ^
ChildAlwaysOnTopTest.java:202: error: class, interface, or enum expected
            robot.waitForIdle();
            ^
ChildAlwaysOnTopTest.java:204: error: class, interface, or enum expected
            SwingUtilities.invokeAndWait(new Runnable() {
            ^
ChildAlwaysOnTopTest.java:206: error: class, interface, or enum expected
                public void run() {
                       ^
ChildAlwaysOnTopTest.java:208: error: class, interface, or enum expected
                }
                ^
ChildAlwaysOnTopTest.java:211: error: class, interface, or enum expected
            checkTopWindow(caseNo, 3, Color.RED);
            ^
ChildAlwaysOnTopTest.java:213: error: class, interface, or enum expected
        } finally {
        ^
ChildAlwaysOnTopTest.java:216: error: class, interface, or enum expected
            }
            ^
ChildAlwaysOnTopTest.java:219: error: class, interface, or enum expected
            }
            ^
ChildAlwaysOnTopTest.java:228: error: class, interface, or enum expected
        robot.waitForIdle();
        ^
ChildAlwaysOnTopTest.java:229: error: class, interface, or enum expected
        Color actualColor = robot.getPixelColor(point.x + 100, point.y + 100);
        ^
ChildAlwaysOnTopTest.java:231: error: class, interface, or enum expected
        saveScreenCapture(caseNo , scenarioNo);
        ^
ChildAlwaysOnTopTest.java:233: error: class, interface, or enum expected
        if (!actualColor.equals(expectedColor)) {
        ^
ChildAlwaysOnTopTest.java:235: error: class, interface, or enum expected
            errorLog.append(""Case ""+ caseNo + errorMsg[scenarioNo - 1]
            ^
ChildAlwaysOnTopTest.java:238: error: class, interface, or enum expected
        }
        ^
ChildAlwaysOnTopTest.java:241: error: class, interface, or enum expected
        }
        ^
ChildAlwaysOnTopTest.java:248: error: class, interface, or enum expected
        BufferedImage image = robot.createScreenCapture(
        ^
ChildAlwaysOnTopTest.java:250: error: class, interface, or enum expected
        try {
        ^
ChildAlwaysOnTopTest.java:252: error: class, interface, or enum expected
        } catch (IOException e) {
        ^
ChildAlwaysOnTopTest.java:254: error: class, interface, or enum expected
        }
        ^
62 errors
result: Failed. Compilation failed: Compilation failed
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8312462,,,,,,,,,,,generic,,,,,,,11,,generic,,,,,"0|i32ow3:",9223372036854775807,b06,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@5a9b3fd3,,,,,,,,,"2023-08-15 16:30;phh;Fix Request (11u).

On behalf of Taizo Kurashige.

Test fix, zero risk.
;;;","2023-08-20 20:22;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk11u-dev/pull/2074
Date: 2023-08-10 08:49:01 +0000;;;","2023-08-30 01:00;dukebot;Changeset: 39986e07
Author:    Taizo Kurashige <taizousum11@gmail.com>
Committer: Christoph Langer <clanger@openjdk.org>
Date:      2023-08-30 07:56:51 +0000
URL:       https://git.openjdk.org/jdk11u-dev/commit/39986e07ed1d3da86eeedad8feb5adddfb672c24
;;;","2023-08-30 02:31;dukebot;Changeset: 39986e07
Author:    Taizo Kurashige <taizousum11@gmail.com>
Committer: Christoph Langer <clanger@openjdk.org>
Date:      2023-08-30 07:56:51 +0000
URL:       https://git.openjdk.org/jdk11u/commit/39986e07ed1d3da86eeedad8feb5adddfb672c24
;;;",,,,,,,,,,,,,,,,,,,,,,,
HotSpotConstantPool.lookupField() asserts due to field changes in ConstantPool.cpp,JDK-8314078,5107778,Bug,Resolved,JDK,JDK,software,duke,,,P2,Fixed,iklam,iklam,iklam,2023-08-09 17:39,2023-09-04 04:33,2023-10-01 09:55,2023-08-14 08:38,22,,,,,,,22,hotspot,,0,jvmci,oracle-triage-17,oracle-triage-21,oracle-triage-22,regression,,,,,,,,,,,,,,,"After JDK-8301996, the encoding of getfield/putfield/getstatic/putstatic has been changed in constantPool.cpp. However, jdk/vm/ci/hotspot/HotSpotConstantPool.java has not been updated accordingly:

#  assert(i >= 0 && i< _length) failed: oob: 0 <= 65536 < 13
V  [libjvm.so+0xa530c4]  ConstantPool::to_cp_index(int, Bytecodes::Code)+0x134  (array.hpp:128)
V  [libjvm.so+0xa532d2]  ConstantPool::name_and_type_ref_index_at(int, Bytecodes::Code)+0x12  (constantPool.cpp:926)
V  [libjvm.so+0x10744f8]  c2v_lookupNameAndTypeRefIndexInPool(JNIEnv_*, _jobject*, _jobject*, long, int, int)+0x148  (jvmciCompilerToVM.cpp:828)
j  jdk.vm.ci.hotspot.CompilerToVM.lookupNameAndTypeRefIndexInPool(Ljdk/vm/ci/hotspot/HotSpotConstantPool;JII)I+0 jdk.internal.vm.ci@22-internal
j  jdk.vm.ci.hotspot.CompilerToVM.lookupNameAndTypeRefIndexInPool(Ljdk/vm/ci/hotspot/HotSpotConstantPool;II)I+8 jdk.internal.vm.ci@22-internal
j  jdk.vm.ci.hotspot.HotSpotConstantPool.getNameAndTypeRefIndexAt(II)I+6 jdk.internal.vm.ci@22-internal
j  jdk.vm.ci.hotspot.HotSpotConstantPool.lookupField(ILjdk/vm/ci/meta/ResolvedJavaMethod;I)Ljdk/vm/ci/meta/JavaField;+11 jdk.internal.vm.ci@22-internal
j  org.graalvm.compiler.java.BytecodeParser.lookupField(II)Ljdk/vm/ci/meta/JavaField;+16 jdk.internal.vm.compiler@21-internal",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8314172,,,,JDK-8301996,,,,,,,,,,,,,,,,,,,,,,,,,"0|i32otf:",9223372036854775807,b11,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2023-08-09 22:23;thartmann;Why did our testing not catch this?

ILW = Assert due to unexpected encoding in field lookup (regression), with JVMCI but no tests caught this, no workaround = HLH = P2;;;","2023-08-09 22:48;iklam;[~thartmann]

I looked under test/hotspot/jtreg/compiler/jvmci but could not find any test that call jdk.vm.ci.hotspot.HotSpotConstantPool.lookupField (or jdk.vm.ci.meta.ConstantPool.lookupField). I'll try to add a test case as part of the fix.;;;","2023-08-09 22:55;thartmann;Sounds good, thanks!;;;","2023-08-10 18:32;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/15237
Date: 2023-08-11 01:15:01 +0000;;;","2023-08-14 08:38;dukebot;Changeset: 911d1dbb
Author:    Ioi Lam <iklam@openjdk.org>
Date:      2023-08-14 15:37:44 +0000
URL:       https://git.openjdk.org/jdk/commit/911d1dbbf7362693c736b905b42e5150fc4f8a96
;;;",,,,,,,,,,,,,,,,,,,,,,
ICC_ColorSpace#minVal/maxVal have the opposite description,JDK-8314076,5107776,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,serb,serb,serb,2023-08-09 16:29,2023-08-24 00:21,2023-10-01 09:55,2023-08-16 22:36,17,20,21,22,,,,22,client-libs,,0,noreg-doc,,,,,,,,,,,,,,,,,,,"Minimum is maximum, and maximum is minimum.
    /**
     * The maximum normalized component values.
     */
    private float[] minVal;

    /**
     * The minimum normalized component values.
     */
    private float[] maxVal;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8314077,,,,,,,,,,,,,,,,,,,,,,,,generic,,,,,,,,,generic,,,,,"0|i32osz:",9223372036854775807,b12,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4b09ce31,,,,,,,,,"2023-08-09 17:15;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/15216
Date: 2023-08-09 23:31:39 +0000;;;","2023-08-16 22:36;dukebot;Changeset: b78f5a10
Author:    Sergey Bylokhov <serb@openjdk.org>
Date:      2023-08-17 05:33:44 +0000
URL:       https://git.openjdk.org/jdk/commit/b78f5a1068224d8b3cfe9e8fb38307ca07de741d
;;;",,,,,,,,,,,,,,,,,,,,,,,,,
Test java/foreign/TestByteBuffer.java timed out,JDK-8314071,5107771,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,pminborg,dholmes,dholmes,2023-08-09 15:16,2023-08-24 00:22,2023-10-01 09:55,2023-08-17 04:31,22,,,,,,,22,core-libs,,0,noreg-perf,tier1,,,,,,,,,,,,,,,,,,"...
test TestByteBuffer.testLargeMappedSegment(): success
test TestByteBuffer.testMapCustomPath(): success
test TestByteBuffer.testMapOffset(): success
test TestByteBuffer.testMapZeroSize(): success
test TestByteBuffer.testMappedSegment(): success
test TestByteBuffer.testMappedSegmentAsByteBuffer(): success
Timeout signalled after 480 seconds

",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,x86_64,,,,,,,,,linux,,,,,"0|i32orv:",9223372036854775807,b12,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@28ce6b78,,,,,,,,,"2023-08-17 02:10;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/panama-foreign/pull/866
Date: 2023-08-17 09:04:26 +0000;;;","2023-08-17 02:40;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/15326
Date: 2023-08-17 09:36:32 +0000;;;","2023-08-17 04:31;dukebot;Changeset: 2b81885f
Author:    Per Minborg <pminborg@openjdk.org>
Date:      2023-08-17 11:31:09 +0000
URL:       https://git.openjdk.org/jdk/commit/2b81885f787d6cf97de556d1774420e2fb7d56f5
;;;",,,,,,,,,,,,,,,,,,,,,,,,
The socket is not closed in Connection::createSocket when the handshake failed for LDAP connection,JDK-8314063,5107761,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,wxiao,shadowbug,shadowbug,2023-08-09 12:58,2023-09-29 04:03,2023-10-01 09:55,2023-08-25 05:21,11,17,21,8,,,,22,core-libs,,0,8bpr-critical-approved,bugdb_35666992,Internal,jdk17u-fix-request,jdk17u-fix-yes,jdk21u-fix-request,jdk21u-fix-SQE-ok,jdk21u-fix-yes,,,,,,,,,,,,"For LDAP connection, if the value of com.sun.jndi.ldap.connect.timeout is set too small or not an optimal value for the system, after the socket is created and connected to the server, but the handshake between the client and server fails due to socket time out, the opened socket is not closed properly.",,,,,,,,,,,,JDK-8317313,JDK-8315025,JDK-8315101,JDK-8315298,JDK-8315100,JDK-8315240,JDK-8315126,JDK-8316723,,,,,,,,,,,,,,,,,,,,,,,JDK-8315249,JDK-8313657,,,,,,,,,,,,,,,,,,,,,,,,"0|i32opn:",9223372036854775807,b13,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@226ed983,,,,,,,,,"2023-08-15 10:35;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/15294
Date: 2023-08-15 17:30:54 +0000;;;","2023-08-25 05:21;dukebot;Changeset: f2383b3c
Author:    Weibing Xiao <weibing.xiao@oracle.com>
Committer: Aleksei Efimov <aefimov@openjdk.org>
Date:      2023-08-25 12:20:18 +0000
URL:       https://git.openjdk.org/jdk/commit/f2383b3cbd1096f0b38e89a3d876da2217511f11
;;;","2023-08-28 07:45;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk21u/pull/112
Date: 2023-08-28 14:39:24 +0000;;;","2023-09-14 05:59;goetz;Calls a method introduced in JDK-8313657.;;;","2023-09-20 03:08;goetz;Fix request [17u]

I backport this for parity with 17.0.10-oracle.
Medium risk, but a useful improvement.
Clean backport.
Test passes. SAP nighlty testing passed.;;;","2023-09-20 03:18;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/1755
Date: 2023-09-20 10:09:36 +0000;;;",,,,,,,,,,,,,,,,,,,,,
[JVMCI] DeoptimizeALot stress logic breaks deferred barriers,JDK-8314061,5107759,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,never,never,never,2023-08-09 12:33,2023-08-24 02:06,2023-10-01 09:55,2023-08-10 09:43,21,22,,,,,,22,hotspot,,0,intermittent,jvmci,oracle-triage-17,oracle-triage-22,,,,,,,,,,,,,,,,JVMCIRuntime::new_array_common includes a little bit of stress logic that changes how it returns when DeoptimizeALot is set.  This can cause it to bypass the call to SharedRuntime::on_slowpath_allocation_exit(current) which is where the deferred card mark logic lives.  This can lead to random crashes of various kinds.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8310055,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i32op7:",9223372036854775807,b11,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2023-08-09 18:13;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/15218
Date: 2023-08-10 01:06:35 +0000;;;","2023-08-09 22:31;thartmann;ILW = Missing deferred card mark logic for newly allocated array, with JVMCI and DeoptimizeALot, no workaround bit disabled DeoptimizeALot = HLM = P3 ;;;","2023-08-10 09:43;dukebot;Changeset: 1875b287
Author:    Tom Rodriguez <never@openjdk.org>
Date:      2023-08-10 16:40:28 +0000
URL:       https://git.openjdk.org/jdk/commit/1875b2872baa566fa11f92006c8eba7642267213
;;;",,,,,,,,,,,,,,,,,,,,,,,,
ArithmeticException in GaloisCounterMode,JDK-8314045,5107741,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,cushon,cushon,cushon,2023-08-09 07:01,2023-09-22 08:51,2023-10-01 09:55,2023-08-14 08:54,17,21,22,,,,,22,security-libs,,0,amazon-interest,jdk17u-fix-request,jdk17u-fix-yes,jdk21u-fix-request,jdk21u-fix-SQE-ok-next,jdk21u-fix-yes,,,,,,,,,,,,,,"My colleage Ioana Nedelcu discovered the following issue.

In JDK 17 and newer, GaloisCounterMode executes a check that fails with an ArithmeticException if the input data is too short [1], instead of throwing a AEADBadTagException.

[1] https://github.com/openjdk/jdk/blob/0eb0997ae4f81314b764241e69dae5c698dbb6c6/src/java.base/share/classes/com/sun/crypto/provider/GaloisCounterMode.java#L1575
[2] https://github.com/openjdk/jdk/blob/0eb0997ae4f81314b764241e69dae5c698dbb6c6/src/java.base/share/classes/com/sun/crypto/provider/GaloisCounterMode.java#L1603C27-L1605

The change was detected by running this test on a recent JDK version: https://github.com/google/tink/blob/43d5698a442b7ca6bcc5c0661af5939559a03dc8/java_src/src/test/java/com/google/crypto/tink/subtle/AesGcmHkdfStreamingTest.java#L276

The following repro shows the same crash:

```
import javax.crypto.Cipher;
import javax.crypto.spec.GCMParameterSpec;
import javax.crypto.spec.SecretKeySpec;
import java.nio.ByteBuffer;

public class Test {
    public static void main(String[] args) throws Exception {
        SecretKeySpec keySpec = new SecretKeySpec(new byte[]{88, 26, 43, -100, -24, -29, -70, 10, 34, -85, 52, 101, 45, -68, -105, -123}, ""AES"");
        GCMParameterSpec params = new GCMParameterSpec(8 * 16, new byte[]{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0});
        Cipher cipher = Cipher.getInstance(""AES/GCM/NoPadding"");
        cipher.init(Cipher.DECRYPT_MODE, keySpec, params);
        cipher.doFinal(ByteBuffer.allocate(0), ByteBuffer.allocate(0));
    }
}
```

$ java -fullversion
openjdk full version ""16-ea+34-2216""
$ java Test
Exception in thread ""main"" javax.crypto.AEADBadTagException: Input too short - need tag
        at java.base/com.sun.crypto.provider.GaloisCounterMode.decryptFinal(GaloisCounterMode.java:738)
        at java.base/com.sun.crypto.provider.CipherCore.finalNoPadding(CipherCore.java:1122)
        at java.base/com.sun.crypto.provider.CipherCore.fillOutputBuffer(CipherCore.java:1059)
        at java.base/com.sun.crypto.provider.CipherCore.doFinal(CipherCore.java:946)
        at java.base/com.sun.crypto.provider.AESCipher.engineDoFinal(AESCipher.java:501)
        at java.base/javax.crypto.CipherSpi.bufferCrypt(CipherSpi.java:799)
        at java.base/javax.crypto.CipherSpi.engineDoFinal(CipherSpi.java:735)
        at java.base/com.sun.crypto.provider.AESCipher.engineDoFinal(AESCipher.java:673)
        at java.base/javax.crypto.Cipher.doFinal(Cipher.java:2500)
        at Test.main(Test.java:18)

$ java -fullversion
openjdk full version ""17.0.2+8-86""
$ java Test
Exception in thread ""main"" java.lang.ArithmeticException: integer overflow
        at java.base/java.lang.Math.subtractExact(Math.java:924)
        at java.base/com.sun.crypto.provider.GaloisCounterMode.checkDataLength(GaloisCounterMode.java:576)
        at java.base/com.sun.crypto.provider.GaloisCounterMode$GCMDecrypt.doFinal(GaloisCounterMode.java:1433)
        at java.base/com.sun.crypto.provider.GaloisCounterMode.engineDoFinal(GaloisCounterMode.java:447)
        at java.base/javax.crypto.Cipher.doFinal(Cipher.java:2500)
        at Test.main(Test.java:18)",,,,,,,,,,,,JDK-8316752,JDK-8316750,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8255557,,,,,,,,,,,,,,,,,,,,,,,,,"0|i32ol7:",9223372036854775807,b11,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@35a9b277,,,,,,,,,"2023-08-09 11:04;rhalade;This seems to me introduced with the fix for JDK-8255557.;;;","2023-08-09 11:06;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/15212
Date: 2023-08-09 17:57:30 +0000;;;","2023-08-14 08:54;dukebot;Changeset: f41c267f
Author:    Liam Miller-Cushon <cushon@openjdk.org>
Date:      2023-08-14 15:51:18 +0000
URL:       https://git.openjdk.org/jdk/commit/f41c267f859c305a2d01c629dbc56692322f81e2
;;;","2023-09-15 02:31;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk21u/pull/164
Date: 2023-09-15 09:25:35 +0000;;;","2023-09-15 02:56;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/1746
Date: 2023-09-15 09:49:43 +0000;;;","2023-09-15 04:43;roboduke;[jdk17u-fix-request] Approval Request from Aleksey Shipilëv
;;;","2023-09-15 04:44;roboduke;[jdk21u-fix-request] Approval Request from Aleksey Shipilëv
;;;",,,,,,,,,,,,,,,,,,,,
SIGSEGV in PhaseIdealLoop::build_loop_late_post_work due to bad immediate dominator info,JDK-8314024,5107545,Bug,Resolved,JDK,JDK,software,duke,,,P2,Fixed,roland,webbuggrp,webbuggrp,2023-08-07 01:57,2023-09-18 23:08,2023-10-01 09:55,2023-08-30 00:54,17,20,21,22,,,,22,hotspot,,0,amazon-interest,azul-interest,c2,dcsswa,jdk17u-fix-request,jdk17u-fix-yes,jdk21u-fix-request,jdk21u-fix-SQE-ok,jdk21u-fix-yes,oracle-triage-22,reproducer-yes,webbug,,,,,,,,"ADDITIONAL SYSTEM INFORMATION :
OS X + Linux

A DESCRIPTION OF THE PROBLEM :
JitRex creates bytecode in a pre-stackmaps manner. In some cases, this bytecode can crash the JVM. 

Example provided later in this form.



STEPS TO FOLLOW TO REPRODUCE THE PROBLEM :
Adjust the path to Java in repro.sh to point to 17.0.8 (and possibly others as well).
Run ./repro.sh
JVM will crash - #  SIGSEGV (0xb) at pc=0x00000001064e5c10, pid=96307, tid=25347

EXPECTED VERSUS ACTUAL BEHAVIOR :
EXPECTED -
JVM should not crash, and executes the bytecode to perform regex matching.
ACTUAL -
JVM crashes: 

# A fatal error has been detected by the Java Runtime Environment:
#
#  SIGSEGV (0xb) at pc=0x00000001064e5c10, pid=96307, tid=25347

---------- BEGIN SOURCE ----------
Requires jitrex 0.1.20.jar 
I've also uploaded the .tgz file here: https://filetransfer.io/data-package/rM9xhQMu#link
It should contain 3 files
* jitrex
* repro.sh
* ReproSimple.java

--------- .sh file --------
#!/bin/bash

set -e

LIBS=jitrex-0.1.20.jar

# ADJUST THIS:
JAVA_BIN=/Library/Java/JavaVirtualMachines/jdk-17.jdk/Contents/Home/bin

JAVA_FLAGS=""-Xms2G -Xmx4G -Xss1M -Xlog:jit*=debug:file=./jit_humio.log:time,tags:filecount=5,filesize=1024000""

javac -classpath ${LIBS} ReproSimple.java
${JAVA_BIN}/java  -classpath .:${LIBS} ${JAVA_FLAGS} ReproSimple

------ Java File --------

import com.humio.jitrex.*;

import java.nio.ByteBuffer;
import java.nio.charset.StandardCharsets;

public class ReproSimple {

    final static String regexPattern = ""(\\d{4}-\\d{2}-\\d{2} \\d{2}:\\d{2}:\\d{2}),(\\S+),(\\S+),(\\S+),(\\S+),(\\S+),(\\S+),(\\S+),(\\S+),(\\S+),(\\S+),(.*)"";

    public static void main(String[] args) throws InterruptedException {
	System.out.println(""Starting"");
	work();
	System.out.println(""Ended"");
    }
    
    static void work() {
	String[] haystack = new String[] {
	    ""2023-10-01 01:23:46,warn,maccle,Something happened."",
	    """",
	    ""0"".repeat(50)
	};

	long sum = 0;
	for (int iter=1; iter<=100; iter++) {
	    System.out.print(""(""+iter+"")"");

	    Pattern p = Pattern.compile(regexPattern, 0);
	    Matcher m = p.matcher("""");
	    
	    for (int k=0; k<haystack.length; k++) {
		for (int i=0; i < 1 * 1000 ; i++) {
		    m.reset(CharSeq.fromString(haystack[k]));
		    if (m.find()) {
			sum += m.start() + m.end();
		    }
		}
	    }
	}
	if (sum<0) System.out.println(sum);
    }

    static class CharSeq implements CharSequence {
	ByteBuffer buf;
	int start, end;

	public static CharSeq fromString(String s) {
	    CharSeq r = new CharSeq();
	    r.buf = ByteBuffer.wrap(s.getBytes(StandardCharsets.ISO_8859_1));
	    r.start = 0;
	    r.end = r.buf.limit();
	    return r;
	}

	public int length() { return end - start; }

	public char charAt(int index) {
	    if (index < 0 || start + index >= end) throw new IndexOutOfBoundsException("""" + index);
	    return (char)(buf.get(start + index) & 0xFF);
	}

	public CharSequence subSequence(int start, int end) {
	    throw new UnsupportedOperationException();
	}
    }
    
}
---------- END SOURCE ----------

FREQUENCY : always


",,,,,,,,,,,,JDK-8315861,JDK-8315643,JDK-8316404,JDK-8316484,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8315920,JDK-8280799,,"2023-08-09 03:08;sswsharm;hs_err_pid69614.log;https://bugs.openjdk.org/secure/attachment/105057/hs_err_pid69614.log","2023-08-09 03:08;sswsharm;replay_pid69614.log;https://bugs.openjdk.org/secure/attachment/105058/replay_pid69614.log","2023-08-09 03:07;sswsharm;repro.tgz;https://bugs.openjdk.org/secure/attachment/105056/repro.tgz",,,,,,generic,,,,,,,,,generic,,,,,"0|i32ndn:",9223372036854775807,b13,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2023-08-09 03:31;sswsharm;Issue is reproduced.
Crash is observed.

OS: MacOS (x64)
JDK 17.0.8: Fail
JDK 20.0.2: Fail
JDK 21 ea:Fail
JDK 22 ea: Fail

ILW = issue in GA build, reproducible with single test , no workaround available =  MLM = P4

Moving it to dev team for further analysis;;;","2023-08-09 05:59;thartmann;I can reproduce this only with release builds and I think that's just due to different timing. I narrowed it down to JDK-8280799 in JDK 19. The fix was backported to 11u and 17u.

The problem is that 'n' is NULL in 'idom_no_update'. In fastdebug, we would hit the ""Bad immediate dominator info."" assert. I verified this by enabling it in product:

# A fatal error has been detected by the Java Runtime Environment:
#
#  Internal Error (loopnode.hpp:1140), pid=292462, tid=292476
#  guarantee(n != nullptr) failed: Bad immediate dominator info.
#
# JRE version: Java(TM) SE Runtime Environment (22.0) (build 22-internal-2023-08-09-1155514.tobias...)
# Java VM: Java HotSpot(TM) 64-Bit Server VM (22-internal-2023-08-09-1155514.tobias..., mixed mode, compressed oops, compressed class ptrs, g1 gc, linux-amd64)
# Problematic frame:
# V  [libjvm.so+0xb95489]  PhaseIdealLoop::build_loop_late_post_work(Node*, bool)+0x7c9

Current CompileTask:
C2:    395   57 %           com.humio.jitrex.jvm.R_tmp_102_424e046f_2__28_5cd_7b4_7d_2d_5cd_7b2_7d_2d_5cd_7b2_7d_20_5cd_7b2_7d_3a_5cd_7b2_2e_2e_2e::nextMatchInt @ 64 (3539 bytes)

Stack: [0x00007f52eb93b000,0x00007f52eba3c000],  sp=0x00007f52eba37550,  free space=1009k
Native frames: (J=compiled Java code, j=interpreted, Vv=VM code, C=native code)
V  [libjvm.so+0xb95489]  PhaseIdealLoop::build_loop_late_post_work(Node*, bool)+0x7c9  (loopnode.hpp:1140)
V  [libjvm.so+0xb95620]  PhaseIdealLoop::build_loop_late(VectorSet&, Node_List&, Node_Stack&)+0x170  (loopnode.cpp:6007)
V  [libjvm.so+0xb95f30]  PhaseIdealLoop::build_and_optimize()+0x750  (loopnode.cpp:4468)
V  [libjvm.so+0x643cc9]  Compile::Optimize()+0xc39  (loopnode.hpp:1114)
V  [libjvm.so+0x6456c2]  Compile::Compile(ciEnv*, ciMethod*, int, Options, DirectiveSet*)+0xed2  (compile.cpp:850)
V  [libjvm.so+0x574079]  C2Compiler::compile_method(ciEnv*, ciMethod*, int, bool, DirectiveSet*)+0x159  (c2compiler.cpp:119)
V  [libjvm.so+0x64b2fe]  CompileBroker::invoke_compiler_on_method(CompileTask*)+0xa9e  (compileBroker.cpp:2276)
V  [libjvm.so+0x64e558]  CompileBroker::compiler_thread_loop()+0x698  (compileBroker.cpp:1944)
V  [libjvm.so+0x8f8038]  JavaThread::thread_main_inner() [clone .part.0]+0xb8  (javaThread.cpp:720)
V  [libjvm.so+0xe9aa18]  Thread::call_run()+0xa8  (thread.cpp:217)
V  [libjvm.so+0xcbfaaa]  thread_native_entry(Thread*)+0xda  (os_linux.cpp:783)

Might be similar to JDK-8268261, JDK-8262017.

ILW = Crash during C2 compilation, reproducible with framework that generates bytecode, no workaround but disable compilation of affected method(s) = HMM = P2;;;","2023-08-09 06:22;thartmann;Roland, could you please have a look?;;;","2023-08-23 02:26;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/15399
Date: 2023-08-23 09:15:38 +0000;;;","2023-08-30 00:54;dukebot;Changeset: ed1ea5fe
Author:    Roland Westrelin <roland@openjdk.org>
Date:      2023-08-30 07:52:05 +0000
URL:       https://git.openjdk.org/jdk/commit/ed1ea5fe7c6fad03ca96e7dece2127eab21a608a
;;;","2023-08-31 07:20;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/1714
Date: 2023-08-31 14:13:35 +0000;;;","2023-08-31 23:54;rmarchenko;Fix request (17u, 21u):
The fix should be backported, because the issue is reproducible in both jdk17 and jdk21 by test/hotspot/jtreg/compiler/loopopts/TestNodeSunkFromPreLoop.java without the fix.
Clean backport, no tier1 regressions, all GHA test passed.;;;","2023-09-01 02:01;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk21u/pull/124
Date: 2023-09-01 08:53:11 +0000;;;",,,,,,,,,,,,,,,,,,,
Problem-list tests failing with jtreg 7.3,JDK-8314022,5107718,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,cstein,cstein,cstein,2023-08-09 03:02,2023-08-14 11:56,2023-10-01 09:55,2023-08-09 07:02,,,,,,,,22,client-libs,,0,noreg-self,,,,,,,,,,,,,,,,,,,"As can be seen here https://bugs.openjdk.org/browse/CODETOOLS-7903515 some standard enviroment variables are not set on Windows, for example: `windir`.

Therefore, the following tests are problem-listed until next version of jtreg is released and made default in main-line JDK.

- test/jdk/javax/swing/JFileChooser/FileSystemView/SystemIconTest.java
- test/jdk/sanity/client/SwingSet/src/FileChooserDemoTest.java

",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,windows,,,,,"0|i32og3:",9223372036854775807,b10,,,,,,,,,,,"2023-08-09 03:28;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/15205
Date: 2023-08-09 10:21:48 +0000;;;","2023-08-09 07:02;dukebot;Changeset: 360f65d7
Author:    Christian Stein <cstein@openjdk.org>
Date:      2023-08-09 14:00:21 +0000
URL:       https://git.openjdk.org/jdk/commit/360f65d7b15b327e2f160c42f318945cc6548bda
;;;",,,,,,,,,,,,,,,,,,,,,,,,,
jmod create --target-platform should replace existing ModuleTarget attribute,JDK-8313983,5107677,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,asotona,serb,serb,2023-08-08 19:33,2023-09-12 11:20,2023-10-01 09:55,2023-09-01 01:35,21,,,,,,,22,tools,,0,amazon-interest,regression,,,,,,,,,,,,,,,,,,"Attempts to unpack and pack the java.compiler.jmod produces the next exception:
===========================================
Error: More than one ModuleTarget attribute
java.lang.module.InvalidModuleDescriptorException: More than one ModuleTarget attribute
        at java.base/jdk.internal.module.ModuleInfo.invalidModuleDescriptor(ModuleInfo.java:1216)
        at java.base/jdk.internal.module.ModuleInfo.doRead(ModuleInfo.java:243)
        at java.base/jdk.internal.module.ModuleInfo.read(ModuleInfo.java:129)
        at jdk.jlink/jdk.tools.jmod.JmodTask.describe(JmodTask.java:318)
        at jdk.jlink/jdk.tools.jmod.JmodTask.run(JmodTask.java:207)
        at jdk.jlink/jdk.tools.jmod.Main.main(Main.java:35)
===========================================

The bug can be reproduced if jmod tool from JDK21 is used for jmods files from jdk20 or jdk21. The tool from JDK20 works fine with jmods files from jdk20.

Steps to reproduce:

JAVA_HOME=/jdk21/build/windows-x86_64-server-release/images/jdk/

JMOD_BINARY=${JAVA_HOME}/bin/jmod.exe
JMOD_DIR=${JAVA_HOME}/jmods
TEST_JMOD=java.compiler.jmod
mkdir extract
mkdir pack
${JMOD_BINARY} extract ${JMOD_DIR}/${TEST_JMOD} --dir extract/${TEST_JMOD}
cd extract/${TEST_JMOD}
${JMOD_BINARY} create --target-platform -amd64 --module-version 21 --class-path classes --legal-notices legal ../../pack/java.compiler.jmod
cd ../../
${JMOD_BINARY} describe pack/java.compiler.jmod

The last command produced this error.

Tested on windows and linux.

The same exception can occur if the java.base jmod file should be repacked using hash+module-path of repacked java.compiler.jmod.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8294962,,,,,,,,,,,,,,,,,,,,,,,,,"0|i32o6z:",9223372036854775807,b14,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@3da653bd,,,,,,,,,"2023-08-08 19:51;alanb;I've changed the title on this issue so that it's a bit clearer what this is about. When jmod create --target-platform is used then it should replace the ModuletTarget class file attribute if it exists, it shouldn't add a second attribute. It maybe that changing the module-info extender from using ASM to the new ClassFile API has introduced this issue. The scenario is unusual, surprised it was noticed.;;;","2023-08-09 16:15;mchung;It works on JDK 20 but fails on JDK 21.;;;","2023-08-31 05:01;asotona;ModuleTargetAttribute and ModuleResolutionAttribute are both flagged as 'allow multiple' in the Classfile API, probably because of lack of reference to a specification and assumption there might be more targets.
I'll fix it.;;;","2023-08-31 05:17;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/15514
Date: 2023-08-31 12:13:40 +0000;;;","2023-09-01 01:35;dukebot;Changeset: c2e01eba
Author:    Adam Sotona <asotona@openjdk.org>
Date:      2023-09-01 08:33:33 +0000
URL:       https://git.openjdk.org/jdk/commit/c2e01eba5a537acd573b7d2e6d41811c415c3f68
;;;",,,,,,,,,,,,,,,,,,,,,,
focusWithin on parents of a newly-added focused node is not updated,JDK-8313956,5107638,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,mstrauss,mhanl,mhanl,2023-08-08 06:15,2023-08-30 04:41,2023-10-01 09:55,2023-08-18 15:14,jfx19,jfx20,jfx21,jfx22,,,,jfx22,javafx,,0,,,,,,,,,,,,,,,,,,,,"When a TextFieldTableCell is edited and then committed via ENTER, the focusWithin adjustment will eventually become negative, meaning the TableView will never be focusWithin = true again.

This is probably because the graphic is set on startEdit() (via setGraphic(..)) and then cleared after the commit is done via commitEdit(). 
The TableView seems to calculate the focusWithin counter wrong here. The value will become smaller after every commit.

*****************************************
EXAMPLE

import javafx.application.Application;
import javafx.beans.property.SimpleBooleanProperty;
import javafx.beans.property.SimpleStringProperty;
import javafx.collections.FXCollections;
import javafx.geometry.Insets;
import javafx.scene.Scene;
import javafx.scene.control.Button;
import javafx.scene.control.TableColumn;
import javafx.scene.control.TableView;
import javafx.scene.control.cell.CheckBoxTableCell;
import javafx.scene.control.cell.TextFieldTableCell;
import javafx.scene.layout.Background;
import javafx.scene.layout.BorderPane;
import javafx.scene.paint.Color;
import javafx.stage.Stage;

public class TableViewFocusWithin extends Application {

    public static void main(String[] args) {
        launch(args);
    }

    @Override
    public void start(Stage primaryStage) {
        TableView<String> tableView = new TableView<>();
        tableView.setFixedCellSize(24);
        tableView.setPadding(new Insets(5));

        tableView.setEditable(true);
        tableView.setItems(FXCollections.observableArrayList(""a"", ""b"", ""c"", ""d"", ""e"", ""f"", ""g"", ""h"", ""i""));
        tableView.focusWithinProperty().addListener(inv -> {
            if (tableView.isFocusWithin()) {
                tableView.setBackground(Background.fill(Color.GREEN));
            } else {
                tableView.setBackground(Background.fill(Color.RED));
            }
        });

        TableColumn<String, String> col1 = new TableColumn<>(""checkbox"");
        col1.setCellValueFactory(cellData -> new SimpleStringProperty(cellData.getValue()));
        col1.setCellFactory(CheckBoxTableCell.forTableColumn(idx -> new SimpleBooleanProperty(false)));

        TableColumn<String, String> col2 = new TableColumn<>(""text"");
        col2.setCellValueFactory(cellData -> new SimpleStringProperty(cellData.getValue()));

        TableColumn<String, String> col3 = new TableColumn<>(""text2"");
        col3.setCellValueFactory(cellData -> new SimpleStringProperty(cellData.getValue()));

        TableColumn<String, String> col4 = new TableColumn<>(""text3"");
        col4.setCellValueFactory(cellData -> new SimpleStringProperty(cellData.getValue()));
        col4.setCellFactory(TextFieldTableCell.forTableColumn());

        tableView.getColumns().addAll(col1, col2, col3, col4);

        BorderPane pane = new BorderPane(tableView);

        Button focusLost = new Button(""focus lost"");
        BorderPane.setMargin(focusLost, new Insets(5, 0, 0, 0));

        pane.setBottom(focusLost);

        Scene scene = new Scene(pane);
        primaryStage.setScene(scene);
        primaryStage.show();
    }
}

*****
Note: The TableView background border will be green when focusWithin = true and red when not. After some commits (~2-3) the border will stay red forever.
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8268225,,,,,,,,,,,generic,,,,,,,,,generic,,,,,"0|i32nyb:",9223372036854775807,b06,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@18948797,,,,,,,,,"2023-08-15 14:36;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jfx/pull/1210
Date: 2023-08-15 21:32:42 +0000;;;","2023-08-18 15:14;dukebot;Changeset: 2e937bb3
Author:    Michael Strauß <mstrauss@openjdk.org>
Date:      2023-08-18 22:11:40 +0000
URL:       https://git.openjdk.org/jfx/commit/2e937bb3289682552815f83daffd47c0902307ae
;;;",,,,,,,,,,,,,,,,,,,,,,,,,
Missing word in GPLv2 license text in StackMapTableAttribute.java,JDK-8313949,5107631,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,dcherepanov,dcherepanov,dcherepanov,2023-08-08 04:56,2023-08-21 13:59,2023-10-01 09:55,2023-08-15 01:45,,,,,,,,22,other-libs,,0,,,,,,,,,,,,,,,,,,,,"looks like there is a missing ""Public"" word in the license text added in two files (created by JDK-8294982)

src/java.base/share/classes/jdk/internal/classfile/attribute/StackMapTableAttribute.java
src/java.base/share/classes/jdk/internal/classfile/constantpool/ConstantPool.java

for these files, the license text is

 * This code is free software; you can redistribute it and/or modify it
 * under the terms of the GNU General License version 2 only, as

while for other files the license text is

 * This code is free software; you can redistribute it and/or modify it
 * under the terms of the GNU General Public License version 2 only, as
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8314478,,JDK-8312550,,,,,,,,,,,,,,,other,,,,,,,,,,,,,,"0|i32nwr:",9223372036854775807,b11,,,,,,,,,,,"2023-08-14 05:52;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/15269
Date: 2023-08-14 12:47:46 +0000;;;","2023-08-15 01:45;dukebot;Changeset: f4e72c58
Author:    Dmitry Cherepanov <dcherepanov@openjdk.org>
Date:      2023-08-15 08:43:38 +0000
URL:       https://git.openjdk.org/jdk/commit/f4e72c58d7b188563a0413161419f91e024ec472
;;;",,,,,,,,,,,,,,,,,,,,,,,,,
Checked_cast assert in CDS compare_by_loader,JDK-8313905,5107586,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,coleenp,dholmes,dholmes,2023-08-07 17:32,2023-08-16 23:29,2023-10-01 09:55,2023-08-10 08:27,22,,,,,,,22,hotspot,,0,cds,tier3,,,,,,,,,,,,,,,,,,"Test: runtime/cds/appcds/loaderConstraints/DynamicLoaderConstraintsTest.java#custom-cl-zgc-generational

#
# A fatal error has been detected by the Java Runtime Environment:
#
#  Internal Error (c:\sb\prod\1691399875\workspace\open\src\hotspot\share\utilities/globalDefinitions.hpp:505), pid=8704, tid=9196
#  assert(static_cast<T1>(result) == thing) failed: must be
#
# JRE version: Java(TM) SE Runtime Environment (22.0+10) (fastdebug build 22-ea+10-667)
# Java VM: Java HotSpot(TM) 64-Bit Server VM (fastdebug 22-ea+10-667, mixed mode, sharing, tiered, compressed class ptrs, z gc, windows-amd64)
# Core dump will be written. Default location: C:\sb\prod\1691408103\testoutput\test-support\jtreg_open_test_hotspot_jtreg_hotspot_runtime\scratch\0\hs_err_pid8704.mdmp
#
# If you would like to submit a bug report, please visit:
#   https://bugreport.java.com/bugreport/crash.jsp
#

---------------  S U M M A R Y ------------

Command Line: -XX:MaxRAMPercentage=4.16667 -Dtest.boot.jdk=c:\ade\mesos\work_dir\jib-master\install\jdk\20\36\bundles\windows-x64\jdk-20_windows-x64_bin.zip\jdk-20 -Djava.io.tmpdir=c:\sb\prod\1691408103\testoutput\test-support\jtreg_open_test_hotspot_jtreg_hotspot_runtime\tmp -XX:+CreateCoredumpOnCrash -XX:+CreateCoredumpOnCrash -XX:+UseZGC -XX:ArchiveClassesAtExit=C:\sb\prod\1691408103\testoutput\test-support\jtreg_open_test_hotspot_jtreg_hotspot_runtime\scratch\0\appcds-11h39m27s403.jsa -Xshare:auto --add-modules=java.base,jdk.httpserver --add-exports=java.base/jdk.internal.misc=ALL-UNNAMED -Xlog:cds=debug,class+load,class+loader+constraints -XX:+UseZGC -XX:+ZGenerational -XX:ZCollectionInterval=0.01 CustomAppLoader C:\sb\prod\1691408103\testoutput\test-support\jtreg_open_test_hotspot_jtreg_hotspot_runtime\scratch\0\loader_constraints.jar LoaderConstraintsApp 3

Host:  AMD EPYC 7J13 64-Core Processor                , 12 cores, 23G,  Windows Server 2019 , 64 bit Build 17763 (10.0.17763.475)
Time: Mon Aug  7 12:39:28 2023 /GM elapsed time: 0.964540 seconds (0d 0h 0m 0s)

---------------  T H R E A D  ---------------

Current thread (0x000002617efab810):  VMThread ""VM Thread""          [id=9196, stack(0x000000d942d00000,0x000000d942e00000) (1024K)]

Stack: [0x000000d942d00000,0x000000d942e00000]
Native frames: (J=compiled Java code, j=interpreted, Vv=VM code, C=native code)
V  [jvm.dll+0xc6b5b1]  os::win32::platform_print_native_stack+0x101  (os_windows_x86.cpp:236)
V  [jvm.dll+0xf0bbfc]  VMError::report+0x146c  (vmError.cpp:997)
V  [jvm.dll+0xf0e055]  VMError::report_and_die+0x645  (vmError.cpp:1811)
V  [jvm.dll+0xf0e764]  VMError::report_and_die+0x64  (vmError.cpp:1576)
V  [jvm.dll+0x549b2b]  report_vm_error+0x5b  (debug.cpp:191)
V  [jvm.dll+0xe40356]  UnregisteredClassesDuplicationChecker::compare_by_loader+0x86  (systemDictionaryShared.cpp:602)
C  [ucrtbase.dll+0xedea]  (no source info available)
V  [jvm.dll+0xe3f01e]  SystemDictionaryShared::check_excluded_classes+0x25e  (systemDictionaryShared.cpp:634)
V  [jvm.dll+0x5fb011]  DynamicArchiveBuilder::doit+0xc1  (dynamicArchive.cpp:115)
V  [jvm.dll+0x5fba2f]  VM_PopulateDynamicDumpSharedSpace::doit+0x4f  (dynamicArchive.cpp:393)
V  [jvm.dll+0xf15903]  VM_Operation::evaluate+0xd3  (vmOperations.cpp:72)
V  [jvm.dll+0xf172c6]  VMThread::evaluate_operation+0x96  (vmThread.cpp:282)
V  [jvm.dll+0xf17a23]  VMThread::inner_execute+0x253  (vmThread.cpp:438)
V  [jvm.dll+0xf17dc4]  VMThread::run+0x104  (vmThread.cpp:175)
V  [jvm.dll+0xe760dd]  Thread::call_run+0x1cd  (thread.cpp:222)
V  [jvm.dll+0xc69892]  os::win32::thread_native_entry+0xa2  (os_windows.cpp:554)
C  [ucrtbase.dll+0x2268a]  (no source info available)
C  [KERNEL32.DLL+0x17974]  (no source info available)
C  [ntdll.dll+0x5a0b1]  (no source info available)

VM_Operation (0x000000d9417ff4c0): PopulateDumpSharedSpace, mode: safepoint, requested by thread 0x0000025d7378cb20
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i32nmr:",9223372036854775807,b11,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,,,"2023-08-08 05:24;coleenp;I don't know why the RBP is not in the windows hs_err_file but I can't get the values of the InstanceKlass* whose checked_cast<> failed.

;;;","2023-08-09 05:36;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/15208
Date: 2023-08-09 12:28:50 +0000;;;","2023-08-10 08:27;dukebot;Changeset: bd1b9427
Author:    Coleen Phillimore <coleenp@openjdk.org>
Date:      2023-08-10 15:25:00 +0000
URL:       https://git.openjdk.org/jdk/commit/bd1b9427410c458215e9e89eeff6e4d30592a4a4
;;;",,,,,,,,,,,,,,,,,,,,,,,,
[macos] All signing tests which verifies unsigned app images are failing,JDK-8313904,5107585,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,almatvee,almatvee,almatvee,2023-08-07 17:30,2023-08-28 21:53,2023-10-01 09:55,2023-08-11 14:02,17.0.8-oracle,20,21,22,,,,22,tools,,0,jdk21u-fix-request,jdk21u-fix-SQE-ok,jdk21u-fix-yes,macos,sn_150,,,,,,,,,,,,,,,"All signing tests which verifies unsigned app images are failing. This is regression from JDK-8298488.

tools/jpackage/macosx/SigningAppImageTest.java
tools/jpackage/macosx/SigningAppImageTwoStepsTest.java
tools/jpackage/macosx/SigningPackageFromTwoStepAppImageTest.java:
tools/jpackage/macosx/SigningPackageTwoStepTest.java

They all failed for same reason:
----------System.err:(45/3004)----------
java.lang.AssertionError: Expected [1]. Actual [0]: Check command [/usr/bin/codesign --verify --deep --strict --verbose=2 ./test.e003ef3f/output/SigningAppImageTest.app/Contents/MacOS/SigningAppImageTest](6) exited with 1 code
	at jdk.jpackage.test.TKit.error(TKit.java:273)
	at jdk.jpackage.test.TKit.assertEquals(TKit.java:576)
	at jdk.jpackage.test.Executor$Result.assertExitCodeIs(Executor.java:186)
	at jdk.jpackage.test.Executor.execute(Executor.java:224)
	at SigningBase.codesignResult(SigningBase.java:59)
	at SigningBase.verifyCodesign(SigningBase.java:135)
	at SigningAppImageTest.test(SigningAppImageTest.java:80)

To reproduce issue just run above tests.",,,,,,,,,,,,JDK-8314689,JDK-8314685,JDK-8315186,,,,,,,,,,,,,JDK-8308042,,,,,,,,,,,JDK-8298488,,,,JDK-8293462,,,,,,,,,,,,,,,,,,,,os_x,,,,,"0|i32nmj:",9223372036854775807,b11,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@3656b41f,,,,,,,,,"2023-08-09 16:49;almatvee;Another issue discovered while working on this one. Unsigned app image becomes invalid when we creating DMG/PKG image from it.
1) jpackage --type app-image -i input -n Test --main-class components.DynamicTreeDemo --main-jar DynamicTreeDemo.jar
2) jpackage --type dmg --app-image Test.app
or
2) jpackage --type pkg --app-image Test.app
3) Mount DMG or install PKG
4) /usr/bin/codesign --verify --deep --strict --verbose=2 /Volumes/Test/Test.app
/Volumes/Test/Test.app: a sealed resource is missing or invalid
file added: /Volumes/Test/Test.app/Contents/app/.package
or
4) /usr/bin/codesign --verify --deep --strict --verbose=2 /Applications/Test.app 
/Applications/Test.app: a sealed resource is missing or invalid
file added: /Applications/Test.app/Contents/app/.package

Original image:
/usr/bin/codesign --verify --deep --strict --verbose=2 Test.app              
Test.app: valid on disk
Test.app: satisfies its Designated Requirement

Adhoc code signing failed and thus app considered invalid. Reason for this is that we adding .package file to ""unsigned"" app image and ""unsigned"" app image is actually signed with adhoc signature and cannot be modified.

Since root cause is same as this issue and it is regression from same JDK-8298488, this additional issue will be fixed as part of this bug.;;;","2023-08-10 16:03;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/15235
Date: 2023-08-10 22:58:18 +0000;;;","2023-08-11 14:02;dukebot;Changeset: ec0cc630
Author:    Alexander Matveev <almatvee@openjdk.org>
Date:      2023-08-11 21:00:52 +0000
URL:       https://git.openjdk.org/jdk/commit/ec0cc6300a02dd92b25d9072b8b3859dab583bbd
;;;","2023-08-16 17:09;almatvee;Fix Request
Without this fix all signing tests which verifies unsigned app images will fail and it will be hard to test any fixes related to jpackage macOS signing since tests are broken. These tests are not run automatically, but executed by dev/SQE as needed due to special setup requirements. Also, this fix fixes issue when post-process unsigned app images when used with DMG or PKG will result in broken installed app image. Patch applies cleanly, low risk since it is fix to test and ad-hoc re-signing post process image should not cause any issues.;;;","2023-08-16 17:16;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk21u/pull/67
Date: 2023-08-17 00:10:11 +0000;;;",,,,,,,,,,,,,,,,,,,,,,
[TESTBUG] test/hotspot/jtreg/compiler/codecache/CodeCacheFullCountTest.java fails with java.lang.VirtualMachineError,JDK-8313901,5107582,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,myano,jiangli,jiangli,2023-08-07 16:02,2023-08-28 14:54,2023-10-01 09:55,2023-08-22 23:07,21,22,,,,,,22,hotspot,,0,intermittent,jdk21u-fix-request,jdk21u-fix-yes,noreg-self,oracle-triage-22,,,,,,,,,,,,,,,"We observed test/hotspot/jtreg/compiler/codecache/CodeCacheFullCountTest.java failures sometimes due to `java.lang.VirtualMachineError: Out of space in CodeCache for adapters`. The stdout contains ` full_count=1` (test expects non-zero full_count):

stdout: [[0.195s][warning][codecache] CodeCache is full. Compiler has been disabled.
[0.195s][warning][codecache] Try increasing the code cache size using -XX:ReservedCodeCacheSize=
CodeCache: size=2496Kb used=2495Kb max_used=2495Kb free=0Kb
 bounds [0x00007f122c413000, 0x00007f122c683000, 0x00007f122c683000]
 total_blobs=765 nmethods=25 adapters=654
 compilation: disabled (not enough contiguous free space left)
              stopped_count=0, restarted_count=0
 full_count=1
];
 stderr: [OpenJDK 64-Bit Server VM warning: CodeCache is full. Compiler has been disabled.
OpenJDK 64-Bit Server VM warning: Try increasing the code cache size using -XX:ReservedCodeCacheSize=
Exception in thread ""main"" java.lang.VirtualMachineError: Out of space in CodeCache for adapters

Exception: java.lang.VirtualMachineError thrown from the UncaughtExceptionHandler in thread ""main""
]
 exitValue = 1

java.lang.RuntimeException: Expected to get exit value of [0], exit value is: [1]
	at jdk.test.lib.process.OutputAnalyzer.shouldHaveExitValue(OutputAnalyzer.java:490)
	at CodeCacheFullCountTest.runTest(CodeCacheFullCountTest.java:60)
	at CodeCacheFullCountTest.main(CodeCacheFullCountTest.java:43)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
	at java.base/java.lang.reflect.Method.invoke(Method.java:580)
	at com.sun.javatest.regtest.agent.MainActionHelper$AgentVMRunnable.run(MainActionHelper.java:333)
	at java.base/java.lang.Thread.run(Thread.java:1570)",,,,,,,,,,,,JDK-8314945,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8277042,,,,,,,,,,,,,,,,,,,,,,,,,"0|i32nlv:",9223372036854775807,b12,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2023-08-07 23:43;thartmann;ILW = Test fails because it does not correctly handle OOMEs in the code cache, intermittent with single test, no workaround = MLH = P4;;;","2023-08-07 23:54;thartmann;This is intermittent because the creation of adapters depends on class loading which depends on other factors like java agents or Graal running. I think the test should simply handle the exit value != 0 case and assert that we failed to create adapters.

[~myano], you added the test with JDK-8277042, could you please have a look?;;;","2023-08-08 11:17;jiangli;+1 on changing the test to handle the exit value != 0 case. Thanks for looking into this.;;;","2023-08-17 00:39;kyukihiro;I would like to fix this issue.
As in the comments, I'm going to add a assert statement to warn creation failure of adapters.
I discussed this point with myano who added the test,
and we concluded that this fix was the best, as it is difficult to control the test avoiding running out of adapters all the time.
I would appreciate it if you could let me know if you have any questions or concerns.;;;","2023-08-17 01:42;thartmann;Thanks for the update, that sounds good to me.;;;","2023-08-17 03:54;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/15329
Date: 2023-08-17 10:48:49 +0000;;;","2023-08-22 23:07;dukebot;Changeset: d1de3d08
Author:    Kimura Yukihiro <kimura.yukihiro@jp.fujitsu.com>
Committer: Aleksey Shipilev <shade@openjdk.org>
Date:      2023-08-23 06:04:28 +0000
URL:       https://git.openjdk.org/jdk/commit/d1de3d082ef9b83aaa68664e653ab09feb8bad87
;;;","2023-08-22 23:29;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk21u/pull/84
Date: 2023-08-23 06:21:39 +0000;;;","2023-08-23 23:40;shade;Fix Request (21u)

Stabilizes the test. Applies cleanly. Multiple iterations of test pass.;;;",,,,,,,,,,,,,,,,,,
Possible NULL pointer access in NativeAudioSpectrum and NativeVideoBuffer,JDK-8313900,5107581,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,almatvee,almatvee,almatvee,2023-08-07 15:03,2023-09-15 04:46,2023-10-01 09:55,2023-08-08 13:06,8,jfx11,jfx17,jfx21,jfx22,,,jfx22,javafx,,0,jfx21u-fix-request,jfx21u-fix-yes,noreg-hard,sn_149,sn_150,,,,,,,,,,,,,,,"Possible NULL pointer access in NativeAudioSpectrum and NativeVideoBuffer. 

Java_com_sun_media_jfxmediaimpl_NativeAudioSpectrum_nativeSetBands()
- NULL pointer check needed for CJavaBandsHolder allocation.

Java_com_sun_media_jfxmediaimpl_NativeVideoBuffer_nativeGetPlaneStrides()
- NULL pointer check is needed for return value of NewIntArray().",,,,,,,,,,,,JDK-8313971,JDK-8313972,JDK-8313973,JDK-8313976,,,,,,,,,,,,JDK-8316020,JDK-8313113,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i32nln:",9223372036854775807,b04,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@712e7ab7,,,,,,,,,"2023-08-07 16:38;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jfx/pull/1204
Date: 2023-08-07 23:33:37 +0000;;;","2023-08-08 13:06;dukebot;Changeset: 9f180e20
Author:    Alexander Matveev <almatvee@openjdk.org>
Date:      2023-08-08 20:04:45 +0000
URL:       https://git.openjdk.org/jfx/commit/9f180e20adc5bc8e6892d9672a414e8b7f614a20
;;;","2023-08-08 13:13;almatvee;jfx21u-fix-request: Without this fix we can possible access NULL pointer in NativeAudioSpectrum and NativeVideoBuffer. Risk of fix is low, since it just adds NULL pointer checks. This is clean backport and will not require any additional changes.;;;","2023-08-08 14:43;kcr;Approved to go into jfx21u for 21.0.1.;;;","2023-08-08 15:10;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jfx21u/pull/7
Date: 2023-08-08 22:04:08 +0000;;;",,,,,,,,,,,,,,,,,,,,,,
JVMCI exception Translation can fail in TranslatedException.<clinit>,JDK-8313899,5107580,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,dnsimon,dnsimon,dnsimon,2023-08-07 13:16,2023-08-24 02:06,2023-10-01 09:55,2023-08-10 11:56,21,22,,,,,,22,hotspot,,0,jvmci,oracle-triage-17,oracle-triage-22,,,,,,,,,,,,,,,,,"### TRACE 1: Test started.
### TRACE 1: RNG seed = -1042559397898730227 (0xf18815c05700450d)
For random generator using seed: -1042559397898730227
To re-run test with same seed value please add ""-Djdk.test.lib.random.seed=-1042559397898730227"" to command line.
java.lang.OutOfMemoryError: Metaspace
        at jdk.internal.vm.TranslatedException.encodeThrowable(java.base@21-galahadeestaging/TranslatedException.java:176)
        at jdk.internal.vm.TranslatedException.<clinit>(java.base@21-galahadeestaging/TranslatedException.java:61)
        at jdk.internal.vm.VMSupport.encodeThrowable(java.base@21-galahadeestaging/VMSupport.java:171)
# A fatal error has been detected by the Java Runtime Environment:
#
#  Internal Error (/workspace/open/src/hotspot/share/compiler/compileBroker.cpp:1966), pid=3899965, tid=3899981
#  fatal error: exception should have been handled
#
# JRE version: Java(TM) SE Runtime Environment (21.0+1) (fastdebug build 21-galahadeestaging+1-LTS-68)
# Java VM: Java HotSpot(TM) 64-Bit Server VM (fastdebug 21-galahadeestaging+1-LTS-68, compiled mode, sharing, jvmci, jvmci compiler, compressed class ptrs, g1 gc, linux-amd64)
# Problematic frame:
# V  [libjvm.so+0x9fe471]  CompileBroker::compiler_thread_loop()+0x771

Current CompileTask:
JVMCI-native: 471139 6229    b        vm.mlvm.hiddenloader.share.HiddenkTestee01/0x000000080100b000::<clinit> (33 bytes)

Stack: [0x00007fa93f117000,0x00007fa93f318000],  sp=0x00007fa93f316c50,  free space=2047k
Native frames: (J=compiled Java code, j=interpreted, Vv=VM code, C=native code)
V  [libjvm.so+0x9fe471]  CompileBroker::compiler_thread_loop()+0x771  (compileBroker.cpp:1966)
V  [libjvm.so+0xeb66cc]  JavaThread::thread_main_inner()+0xcc  (javaThread.cpp:719)
V  [libjvm.so+0x179516a]  Thread::call_run()+0xba  (thread.cpp:217)
V  [libjvm.so+0x149562c]  thread_native_entry(Thread*)+0x11c  (os_linux.cpp:778)",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8310055,,,,JDK-8310829,,,"2023-08-07 23:18;thartmann;hs_err_pid3899965.log;https://bugs.openjdk.org/secure/attachment/105037/hs_err_pid3899965.log",,,,,,,,,,,,,,,,,,,,,,"0|i32nlf:",9223372036854775807,b11,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2023-08-07 23:33;thartmann;ILW = Similar to JDK-8310829 = Guarantee failure due to pending exception, with JVMCI/libgraal when OOME occurs during translation of an exception, no workaround but increase memory or disable compilation  = HLM = P3;;;","2023-08-09 02:35;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/15198
Date: 2023-08-08 20:52:29 +0000;;;","2023-08-10 11:56;dukebot;Changeset: 6f5c903d
Author:    Doug Simon <dnsimon@openjdk.org>
Date:      2023-08-10 18:53:02 +0000
URL:       https://git.openjdk.org/jdk/commit/6f5c903d10aa5f7ff979a79f121609c167f88eff
;;;",,,,,,,,,,,,,,,,,,,,,,,,
JFR: Incorrect exception message for RecordedObject::getInt,JDK-8313891,5107570,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,egahlin,egahlin,egahlin,2023-08-07 08:53,2023-08-14 11:56,2023-10-01 09:55,2023-08-09 04:48,,,,,,,,22,hotspot,,0,,,,,,,,,,,,,,,,,,,,"If the value can't be widened to int, the exception says  ""with illegal data type conversion short"", should be int.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i32nj7:",9223372036854775807,b10,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@42995637,,,,,,,,,"2023-08-07 10:01;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/15181
Date: 2023-08-07 16:12:55 +0000;;;","2023-08-09 04:48;dukebot;Changeset: 213d3c44
Author:    Erik Gahlin <egahlin@openjdk.org>
Date:      2023-08-09 11:46:25 +0000
URL:       https://git.openjdk.org/jdk/commit/213d3c449ae89b71c222b889443e77ad912791df
;;;",,,,,,,,,,,,,,,,,,,,,,,,,
Fix -Wconversion warnings in runtime code,JDK-8313882,5107561,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,coleenp,coleenp,coleenp,2023-08-07 05:51,2023-08-16 23:28,2023-10-01 09:55,2023-08-10 04:58,22,,,,,,,22,hotspot,,0,cleanup,,,,,,,,,,,,,,,,,,,"Warnings coming from code in the runtime directory counts.

21 src/hotspot/share/runtime/java.cpp
16 src/hotspot/share/runtime/objectMonitor.hpp
12 src/hotspot/share/runtime/relocator.cpp
11 src/hotspot/share/runtime/sharedRuntime.cpp
10 src/hotspot/share/runtime/arguments.cpp
6 src/hotspot/share/runtime/synchronizer.cpp
6 src/hotspot/share/runtime/deoptimization.cpp
6 src/hotspot/share/runtime/continuationFreezeThaw.cpp
3 /scratch/cphillim/hg/22os-conversion/test/hotspot/gtest/runtime/test_os.cpp
2 /scratch/cphillim/hg/22os-conversion/test/hotspot/gtest/runtime/test_stubRoutines.cpp
2 src/hotspot/share/runtime/thread.cpp
2 src/hotspot/share/runtime/signature.cpp
2 src/hotspot/share/runtime/javaThread.cpp
1 src/hotspot/share/runtime/vmStructs.cpp
1 src/hotspot/share/runtime/vframeArray.cpp
1 src/hotspot/share/runtime/trimNativeHeap.cpp
1 src/hotspot/share/runtime/timer.cpp
1 src/hotspot/share/runtime/threadHeapSampler.cpp
1 src/hotspot/share/runtime/stubRoutines.cpp
1 src/hotspot/share/runtime/statSampler.cpp
1 src/hotspot/share/runtime/safepoint.cpp
1 src/hotspot/share/runtime/os.cpp
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8177481,JDK-8314247,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i32nh7:",9223372036854775807,b11,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,,,"2023-08-07 06:01;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/15177
Date: 2023-08-07 12:57:35 +0000;;;","2023-08-10 04:58;dukebot;Changeset: f47767ff
Author:    Coleen Phillimore <coleenp@openjdk.org>
Date:      2023-08-10 11:57:25 +0000
URL:       https://git.openjdk.org/jdk/commit/f47767ffef29c777e2da0262fa3299564d59f461
;;;",,,,,,,,,,,,,,,,,,,,,,,,,
Incorrect copyright header in jdk/java/foreign/TestFree.java after JDK-8310643,JDK-8313880,5107559,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,pminborg,thartmann,thartmann,2023-08-07 05:19,2023-08-17 05:32,2023-10-01 09:55,2023-08-07 05:36,22,,,,,,,22,core-libs,,0,,,,,,,,,,,,,,,,,,,,"[2023-08-07T11:13:22,751Z] BAD COPYRIGHT: /workspace/open/test/jdk/java/foreign/TestFree.java
[2023-08-07T11:13:22,751Z] 1 header format error(s).",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8313881,,,,,JDK-8310643,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i32ngr:",9223372036854775807,b10,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@28ce6b78,,,,,,,,,"2023-08-07 05:34;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/15175
Date: 2023-08-07 12:27:39 +0000;;;","2023-08-07 05:36;dukebot;Changeset: bbbfa217
Author:    Per Minborg <pminborg@openjdk.org>
Date:      2023-08-07 12:34:52 +0000
URL:       https://git.openjdk.org/jdk/commit/bbbfa217a030e90e41c036203f85b764927f4848
;;;",,,,,,,,,,,,,,,,,,,,,,,,,
JNI NewWeakGlobalRef throws exception for null arg,JDK-8313874,5107551,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,ogillespie,ogillespie,ogillespie,2023-08-07 03:17,2023-08-29 08:12,2023-10-01 09:55,2023-08-10 01:55,17,21,22,,,,,22,hotspot,,0,amazon-interest,jdk17u-fix-request,jdk17u-fix-yes,jdk21u-fix-request,jdk21u-fix-SQE-ok,jdk21u-fix-yes,jni,regression,,,,,,,,,,,,"According to the JNI spec for NewWeakGlobalRef:

> Returns NULL if obj refers to null, or if obj was a weak global reference, or if the VM runs out of memory. If the VM runs out of memory, an OutOfMemoryError will be thrown.

The current behaviour is that `NewWeakGlobalRef(nullptr)` throws an OutOfMemoryError, which it should not.

```
 #include <stdio.h>
 #include <jni.h>
 #include ""TestNull.h""

 JNIEXPORT void JNICALL Java_TestNull_testNull(JNIEnv *env, jclass a) {
     env->NewWeakGlobalRef(nullptr);
     env->ExceptionDescribe();
 }
```

```
class TestNull {
    static { System.loadLibrary(""testNull""); }
    public static void main(String[] args) {
        testNull();
    }
    public static native void testNull();
}
```

```
java -Djava.library.path=. TestNull
Exception in thread ""main"" java.lang.OutOfMemoryError: C heap space
	at TestNull.testNull(Native Method)
	at TestNull.main(TestNull.java:4)
```

It seems that [this code](https://github.com/openjdk/jdk/blob/dc01604756c22889412f9f25b534488180327317/src/hotspot/share/prims/jni.cpp#L2879-L2881) forgets to handle the case where the original argument was null.

Thanks to Boris Rasin for reporting this issue in https://github.com/corretto/corretto-17/issues/145.

",,,,,,,,,,,,JDK-8315235,JDK-8315229,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8194309,,,,,,,,,,,,,,,,,,,,,,16,,,,,,,"0|i32nez:",9223372036854775807,b08,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,,,"2023-08-07 16:13;dholmes;Yes it was an oversight on my part when fixing JDK-8194309. Usually passing NULL is a programming error in JNI and we don't have to detect it, but not in this case.

Suggested fix:

if (ret == nullptr && !ref_handle().is_null()) {
  THROW_OOP_(Universe::out_of_memory_error_c_heap(), nullptr);
};;;","2023-08-08 03:46;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/15188
Date: 2023-08-08 10:40:30 +0000;;;","2023-08-10 01:55;dukebot;Changeset: 028b3ae1
Author:    Oli Gillespie <ogillespie@openjdk.org>
Committer: Aleksey Shipilev <shade@openjdk.org>
Date:      2023-08-10 08:51:50 +0000
URL:       https://git.openjdk.org/jdk/commit/028b3ae1b162bd8f7c340bfa6e9487ca83697955
;;;","2023-08-23 03:18;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk21u/pull/88
Date: 2023-08-23 10:11:13 +0000;;;","2023-08-23 03:25;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/1688
Date: 2023-08-23 10:17:50 +0000;;;","2023-08-24 01:16;ogillespie;17u, 21u fix request - clean (21) or nearly clean (17) backport for simple issue breaking JNI spec.;;;",,,,,,,,,,,,,,,,,,,,,
java/nio/channels/DatagramChannel/SendReceiveMaxSize.java  fails on AIX due to small default RCVBUF size and different IPv6 Header interpretation,JDK-8313873,5107550,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,tobermeier,jkern,jkern,2023-08-07 03:00,2023-09-13 07:07,2023-10-01 09:55,2023-08-31 02:53,21,22,,,,,,22,core-libs,,0,jdk21u-fix-request,jdk21u-fix-yes,noreg-self,,,,,,,,,,,,,,,,,"When trying to receive (recvfrom()) the greatest possible UDP Datagram package of size 65507 Bytes, the recvfrom() API got stuck due to a smaller default udp_recvspace of 42080 Bytes. This can be checked by the command 

no -a | grep space

            tcp_recvspace = 16384

            tcp_sendspace = 16384

            udp_recvspace = 42080

            udp_sendspace = 9216

There are at least two ways to fix this. Either in the test program itself, by dynamically enlarging the receiver buffer of the socket used in recvfrom() explicitly, or by raising the OS default to a higher limit (The linux default seems to be about 200KB). Setting the AIX default can be done with the command e.g. (value should be at least greater than 65535)

no -r -o udp_recvspace=132768

I would prefer raising the default, and document it for the customer, so he knows he cannot use larger datagram packets than 42080 without raising the default size of the udp_recvspace when he does not want his program ending in a hang state.



The second bug comes from a different interpretation of the IPv6 header field Payload Length. Here is the background:

An IP Packet consists of the IP Header and the IP Payload (e.g. a Datagram). in IPv4 the IP-Header contains the 16-Bit Field Total Length

Total Length:  This 16-bit field defines the entire packet size in bytes, including header and data.

[Internet Protocol version 4 - Wikipedia|https://en.wikipedia.org/wiki/Internet_Protocol_version_4#Total_Length]

This means the total IP-Packet could have only 65535 Bytes. From this value you have to subtract 20 Bytes for the IP-Header and additional 8 Bytes for the UDP-Header to receive maximum of 65507 UDP Datagram Payload Bytes. Here AIX and Linux both have the same opinion.

In IPv6 the IP-Header contains the field Payload Length

Payload Length (16 bits) The size of the payload in octets, including any extension headers. The length is set to zero when a Hop-by-Hop extension header carries a Jumbo Payload option.

[IPv6 packet - Wikipedia|https://en.wikipedia.org/wiki/IPv6_packet]

This means not the total length of IP Packet is restricted to 65535 Bytes, but the size of the Payload. The IP-Packet could have a size of 65535+40 (IPv6-Header has 40 Bytes). Linux is going this way and therefore allows a UDP Payload of  65535 -8 (UDP-Header has 8 Bytes) = 65527.

IBM seems to interpret this field like IPv4 and still uses 65535 as maximum IPv6 Packet size. Then the resulting size for the UDP-Payload is 40 Bytes less; e.g.  65535 - 40 - 8 = 65487


If we use the maximum value for linux (65527) then the sendto() API of AIX claims that this is too large and breaks in error.

So to fix this we can use 65527 for all other platforms and 65487 only for AIX. This has to be adopted in java/nio/channels/DatagramChannel/SendReceiveMaxSize.java itself.
",,,,,,,,,,,,JDK-8316198,,,,,,,,,,,,,,,,,,,,,JDK-8313551,,,,,,,,,,,,,,,,,,,,ppc,,,,,,,,,aix,,,,,"0|i32ner:",9223372036854775807,b14,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@674604a9,,,,,,,,,"2023-08-07 09:22;clanger;Thanks, [~jkern], for the analysis.

Regarding the RCVBUF, would it be an option to always check its size and enlarge it if necessary to a value beyond the maximum packet size when creating a socket on AIX? Then this could work transparently without a user's need to configure anything. Any hints, [~alanb]?

As for the IPv6 maximum packet size, I guess the different size for AIX should be implemented as you described.;;;","2023-08-09 08:06;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/15209
Date: 2023-08-09 14:35:26 +0000;;;","2023-08-31 02:53;dukebot;Changeset: 486fa08d
Author:    Thomas Obermeier <thomas.obermeier@sap.com>
Committer: Thomas Stuefe <stuefe@openjdk.org>
Date:      2023-08-31 09:51:13 +0000
URL:       https://git.openjdk.org/jdk/commit/486fa08d4b22243443d39efa34c78d7e9eb44775
;;;","2023-09-12 07:11;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk21u/pull/155
Date: 2023-09-12 14:03:06 +0000;;;","2023-09-13 01:46;roboduke;[jdk21u-fix-request] Approval Request from JoKern65
Backport of test fix for AIX. No risk, clean backport.;;;",,,,,,,,,,,,,,,,,,,,,,
Always true condition in sun.nio.cs.CharsetMapping#readINDEXC2B,JDK-8313865,5107540,Bug,Resolved,JDK,JDK,software,duke,,,P5,Fixed,naoto,aturbanov,aturbanov,2023-08-07 00:38,2023-09-18 15:31,2023-10-01 09:55,2023-09-12 11:22,17,21,,,,,,22,core-libs,,0,,,,,,,,,,,,,,,,,,,,"In the method 'sun.nio.cs.CharsetMapping#readINDEXC2B'

    void readINDEXC2B() {
        char[] map = readCharArray();
        for (int i = map.length - 1; i >= 0; i--) {
            if (c2b == null && map[i] != -1) {
                c2b = new char[map[i] + 256];
                Arrays.fill(c2b, (char)UNMAPPABLE_ENCODING);
                break;
            }
        }
        c2bIndex = map;
    }

Condition 'map[i] != -1' is always true. 'char' values range [0..65535]. It can't be equal to '-1'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-6529796,,,,,,,,,,,,,,,,,,,,,,7,,,,,,,"0|i32ncj:",9223372036854775807,b15,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@3962510e,,,,,,,,,"2023-09-11 15:27;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/15672
Date: 2023-09-11 22:21:03 +0000;;;","2023-09-12 11:22;dukebot;Changeset: ac2dfe45
Author:    Naoto Sato <naoto@openjdk.org>
Date:      2023-09-12 18:19:07 +0000
URL:       https://git.openjdk.org/jdk/commit/ac2dfe45d1b7fb9b99b0ba1402189de1791319b8
;;;",,,,,,,,,,,,,,,,,,,,,,,,,
Replace VLA with malloc in pango,JDK-8313856,5107531,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,jdv,jdv,jdv,2023-08-06 21:41,2023-08-10 13:34,2023-10-01 09:55,2023-08-08 05:16,8,jfx11,jfx17,jfx22,,,,jfx22,javafx,,0,jfx21u-fix-request,jfx21u-fix-yes,noreg-hard,sn_150,,,,,,,,,,,,,,,,We should not allocate memory for variable length arrays (VLA) on stack in pango.c JNI functions.,,,,,,,,,,,,JDK-8314035,JDK-8314051,JDK-8314081,JDK-8314046,,,,,,,,,,,,JDK-8313024,,,,,,,,,,,,,,,,,,,,,,,,,,generic,,,,,,,,,linux,,,,,"0|i32naj:",9223372036854775807,b04,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4143e3f7,,,,,,,,,"2023-08-06 21:59;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jfx/pull/1202
Date: 2023-08-07 04:55:23 +0000;;;","2023-08-08 05:16;dukebot;Changeset: 1752b623
Author:    Jayathirth D V <jdv@openjdk.org>
Committer: Kevin Rushforth <kcr@openjdk.org>
Date:      2023-08-08 12:13:47 +0000
URL:       https://git.openjdk.org/jfx/commit/1752b62320f9e42f6d0d2c1f8278cf2ab205a8f4
;;;","2023-08-08 22:19;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jfx21u/pull/8
Date: 2023-08-09 05:13:36 +0000;;;","2023-08-09 04:09;jdv;21u fix request: This will improve stability of jfx21u and it is a safe fix.;;;","2023-08-09 04:40;kcr;Approved to go into jfx21u for 21.0.1;;;",,,,,,,,,,,,,,,,,,,,,,
Some tests in serviceability area fail on localized Windows platform,JDK-8313854,5107529,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,kyukihiro,kyukihiro,kyukihiro,2023-08-06 19:27,2023-08-21 13:59,2023-10-01 09:55,2023-08-14 11:28,22,,,,,,,22,core-svc,,0,noreg-self,,,,,,,,,,,,,,,,,,,"I run all jdk_svc group tests on Japanese Windows platform and found the failing tests:
sun/tools/jhsdb/JShellHeapDumpTest.java
sun/management/jmxremote/startstop/JMXStartStopTest.java

JShellHeapDumpTest

Starting Jshell
[JShell]:c:\work\jdk_latest\jdk\build\windows-x86_64-server-release\images\jdk\bin\jshell.exe
[JShell] |  JShell??????? -- ?o?[?W????22-internal
[JShell] |  ?T?v???????A?????????????????: /help intro

JShellHeapDumpTest expects ""Welcome to JShell"" as jshell command message,　but the message is printed in Japanese on Javanese environment.

JMXStartStopTest

Caused by: java.lang.Exception: Starting agent on poprt 61306 should report an invalid agent state
        at JMXStartStopTest.test_07(JMXStartStopTest.java:601)
        at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
        ... 6 more

JMXStartStopTest expects ""java.lang.RuntimeException: Invalid agent state"" as the exception message, but the message is printed in Japanese on Japanese environment.","Intel(R) Xeon(R) Platinum 8260 CPU 2.4GHz, 2 core, 8GB Memory
Windows 10 Enterprise",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8290497,,,,,,,,,,,,,,,,,,,,,,,,,"0|i32na3:",9223372036854775807,b11,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@22f3cc74,,,,,,,,,"2023-08-06 19:42;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/15172
Date: 2023-08-07 02:37:15 +0000;;;","2023-08-07 14:46;cjplummer;We had a similar issue with jdb tests failing. See JDK-8290497.;;;","2023-08-14 11:28;dukebot;Changeset: 49b29845
Author:    Kimura Yukihiro <kimura.yukihiro@jp.fujitsu.com>
Committer: Chris Plummer <cjplummer@openjdk.org>
Date:      2023-08-14 18:26:55 +0000
URL:       https://git.openjdk.org/jdk/commit/49b29845f7c516c379dde7aae8b3073808f2118a
;;;",,,,,,,,,,,,,,,,,,,,,,,,
The exception messages printed by jcmd ManagementAgent.start are corrupted on Japanese Windows,JDK-8313815,5107490,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,kyukihiro,kyukihiro,kyukihiro,2023-08-06 17:37,2023-09-22 00:13,2023-10-01 09:55,2023-08-26 07:33,11,17,,,,,,17.0.9,core-svc,,0,jdk11u-fix-request,jdk11u-fix-yes,jdk17u-fix-request,jdk17u-fix-yes,,,,,,,,,,,,,,,,"On English Windows environment, jcmd prints ""Invalid agent state"" as RuntimeException message if ManagementAgent.start is executed twice.
But the message is corrupted on Japanese Windows environment.

English Windows environment:

jcmd Test ManagementAgent.start jmxremote.port=50082 jmxremote.authenticate=false jmxremote.ssl=false
16942:
java.lang.RuntimeException: Invalid agent state: Agent already started

Japanese Windows environment:

jcmd Test ManagementAgent.start jmxremote.port=50082 jmxremote.authenticate=false jmxremote.ssl=false
7368:
java.lang.RuntimeException: 繧ｨ繝ｼ繧ｸ繧ｧ繝ｳ繝医?ｮ迥ｶ諷九′辟｡蜉ｹ縺ｧ縺?: Agent already started

The java process throws RuntimeException at jdk.management.agent/jdk.internal.agent.Agent.startRemoteManagementAgent(Agent.java:340).

    throw new RuntimeException(getText(INVALID_STATE, ""Agent already started""));

The japanese exception message is defined in ./jdk.management.agent/share/classes/jdk/internal/agent/resources/agent_ja.properties
with utf8 charset, and it is built in jdk/internal/agent/resources/agent_ja.class.

    agent.err.invalid.state            = \u30A8\u30FC\u30B8\u30A7\u30F3\u30C8\u306E\u72B6\u614B\u304C\u7121\u52B9\u3067\u3059: {0}

On the other hand, 
the jcmd reads the message at jdk.attach/sun.tools.attach.HotSpotVirtualMachine.readErrorMessage(HotSpotVirtualMachine.java:360).

        BufferedReader br = new BufferedReader(new InputStreamReader(in));
        while ((s = br.readLine()) != null) {

The message is read without specifying a charset and the default charset is not utf8.

This is the reason why the exception message of jcmd ManagementAgent.start is corrupted in Japanese Windows.

This does not occur since jdk18 owing to JEP 400: UTF-8 by Default.","Intel(R) Xeon(R) Platinum 8260 CPU 2.4GHz, 2 core, 8GB Memory
Windows 10 Enterprise",,,,,,,,,,,JDK-8316717,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,generic,,,,,,,,,generic,,,,,"0|i32n1f:",9223372036854775807,b05,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@22f3cc74,,,,,,,,,"2023-08-06 17:52;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/1641
Date: 2023-08-07 00:48:11 +0000;;;","2023-08-16 16:51;kyukihiro;Fix Request 17u
I would like to fix this issue 
because users can not read the exception message of jcmd ManagementAgent on localized Windows platform and can not understand what happened.
There is no risk, because the fix is just specifying the charset name explicitly and it's not complicated.
Testing:
  all serviceability area tests jdk_svc, and a specific test to verify the fix.;;;","2023-08-26 07:33;dukebot;Changeset: 7286bb85
Author:    Kimura Yukihiro <kimura.yukihiro@jp.fujitsu.com>
Committer: Paul Hohensee <phh@openjdk.org>
Date:      2023-08-26 14:32:20 +0000
URL:       https://git.openjdk.org/jdk17u-dev/commit/7286bb8518543501045de4cf970094ac9c1af4fa
;;;","2023-08-30 00:49;dukebot;Changeset: 7286bb85
Author:    Kimura Yukihiro <kimura.yukihiro@jp.fujitsu.com>
Committer: Paul Hohensee <phh@openjdk.org>
Date:      2023-08-26 14:32:20 +0000
URL:       https://git.openjdk.org/jdk17u/commit/7286bb8518543501045de4cf970094ac9c1af4fa
;;;","2023-09-19 18:25;kyukihiro;Fix Request 11u
I would like to backport this fix to 11u.
The original patch applies cleanly to 11u.
There is no risk, because the logic around the changes is same as jdk17
and I have verified that the issue is gone.
Testing:
all serviceability area tests jdk_svc, and a specific test to verify the fix.;;;","2023-09-19 18:29;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk11u-dev/pull/2134
Date: 2023-09-20 01:21:52 +0000;;;",,,,,,,,,,,,,,,,,,,,,
Field sun.util.calendar.CalendarDate#forceStandardTime is never set,JDK-8313813,5107487,Bug,Resolved,JDK,JDK,software,duke,,,P5,Fixed,jlu,aturbanov,aturbanov,2023-08-06 04:26,2023-09-25 11:25,2023-10-01 09:55,2023-09-18 15:10,17,21,,,,,,22,core-libs,,0,noreg-cleanup,,,,,,,,,,,,,,,,,,,"There is a field 'boolean forceStandardTime' in the 'sun.util.calendar.CalendarDate' class.
It's never set and always has the default value 'false'.
We can cleanup code which depends on it: 'sun.util.calendar.CalendarDate#isStandardTime' always returns 'false' in all implementations.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8316435,,,,JDK-6453901,,,,,,,,,,,,,,,,,,,,,,,,,"0|i32n0r:",9223372036854775807,b16,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@7644fb4c,,,,,,,,,"2023-09-12 13:12;aturbanov;'sun.util.calendar.CalendarDate#locale' is also unused. It makes sense to cleanup them together.;;;","2023-09-13 11:00;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/15726
Date: 2023-09-13 17:52:13 +0000;;;","2023-09-18 15:10;dukebot;Changeset: 373e37bf
Author:    Justin Lu <jlu@openjdk.org>
Date:      2023-09-18 22:08:17 +0000
URL:       https://git.openjdk.org/jdk/commit/373e37bf13df654ba40c0bd9fcf345215be4eafb
;;;",,,,,,,,,,,,,,,,,,,,,,,,
Improve description of how BoxLayout lays out components,JDK-8313811,5107483,Bug,Resolved,JDK,JDK,software,duke,,,P5,Fixed,aivanov,aivanov,aivanov,2023-08-05 12:44,2023-09-28 12:49,2023-10-01 09:55,2023-09-28 12:49,11,17,21,8,,,,22,client-libs,,0,noreg-doc,sustaining,,,,,,,,,,,,,,,,,,"Separate the description on how horizontal layout is performed from an introductory sentence. This would allow for easier scanning.

A list could also be used for visually separating the description horizontal layout from the vertical one.

Add the missing 'a' articles in the introductory sentence.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i32mzv:",9223372036854775807,master,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@568a5b31,,,,,,,,,"2023-08-07 12:54;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/15182
Date: 2023-08-07 19:43:38 +0000;;;","2023-09-28 12:49;dukebot;Changeset: 09dad0e9
Author:    Alexey Ivanov <aivanov@openjdk.org>
Date:      2023-09-28 19:46:07 +0000
URL:       https://git.openjdk.org/jdk/commit/09dad0e96b37e3fcd1a13040e0de85ebc04b07c2
;;;",,,,,,,,,,,,,,,,,,,,,,,,,
BoxLayout uses <blockquote> instead of list for layout options,JDK-8313810,5107482,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,aivanov,aivanov,aivanov,2023-08-05 12:21,2023-09-28 12:49,2023-10-01 09:55,2023-09-28 12:48,11,17,21,8,,,,22,client-libs,,0,noreg-doc,sustaining,,,,,,,,,,,,,,,,,,"The BoxLayout documentation mentions, the type of the layout has four options.

The options are presented inside <blockquote> elements. These elements are for extended quotations; they're usually rendered ""visually by indentation"".

These four options are a list, for semantic HTML, a <ul> or <ol> element should be used instead of <blockquote>.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i32mzn:",9223372036854775807,master,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@568a5b31,,,,,,,,,"2023-08-07 12:49;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/15182
Date: 2023-08-07 19:43:38 +0000;;;","2023-09-28 12:48;dukebot;Changeset: 09dad0e9
Author:    Alexey Ivanov <aivanov@openjdk.org>
Date:      2023-09-28 19:46:07 +0000
URL:       https://git.openjdk.org/jdk/commit/09dad0e96b37e3fcd1a13040e0de85ebc04b07c2
;;;",,,,,,,,,,,,,,,,,,,,,,,,,
String template fails with java.lang.StringIndexOutOfBoundsException if last fragment is UTF16,JDK-8313809,5107481,Bug,Resolved,JDK,JDK,software,duke,,,P2,Fixed,jlaskey,jpai,jpai,2023-08-05 08:07,2023-08-16 06:14,2023-10-01 09:55,2023-08-08 12:36,21,,,,,,,22,core-libs,,0,hgupdate-sync,jdk21-fix-request,jdk21-fix-yes,,,,,,,,,,,,,,,,,"The following code compiles successfully but fails at runtime with a StringIndexOutOfBoundsException:


import java.math.*;
import static java.util.FormatProcessor.*;

public class Foo {
    public static void main(final String[] args) throws Exception {
        final BigDecimal sum = new BigDecimal(""12.34"");

        final String stringFomat = String.format(""Using String.format() - The sum is: %s €"", sum); // this works
        System.out.println(stringFomat);

        final String message = FMT.""The sum is: %f\{sum} €""; // this fails
        System.out.println(message);
    }
}

javac --enable-preview --source 21 Foo.java
java --enable-preview Foo

Using String.format() - The sum is: 12.34 €
Exception in thread ""main"" java.lang.StringIndexOutOfBoundsException: Range [21, 21 + 4) out of bounds for length 11
    at java.base/jdk.internal.util.Preconditions$1.apply(Preconditions.java:55)
    at java.base/jdk.internal.util.Preconditions$1.apply(Preconditions.java:52)
    at java.base/jdk.internal.util.Preconditions$4.apply(Preconditions.java:213)
    at java.base/jdk.internal.util.Preconditions$4.apply(Preconditions.java:210)
    at java.base/jdk.internal.util.Preconditions.outOfBounds(Preconditions.java:98)
    at java.base/jdk.internal.util.Preconditions.outOfBoundsCheckFromIndexSize(Preconditions.java:118)
    at java.base/jdk.internal.util.Preconditions.checkFromIndexSize(Preconditions.java:397)
    at java.base/java.lang.String.checkBoundsOffCount(String.java:4849)
    at java.base/java.lang.StringUTF16.checkBoundsOffCount(StringUTF16.java:1625)
    at java.base/java.lang.StringUTF16.inflate(StringUTF16.java:1459)
    at java.base/java.lang.StringLatin1.inflate(StringLatin1.java:771)
    at java.base/java.lang.String.getBytes(String.java:4724)
    at java.base/java.lang.StringConcatHelper.newArrayWithSuffix(StringConcatHelper.java:491)
    at Foo.main(Foo.java:11)


",,,,,,,,,,,,JDK-8314052,JDK-8314431,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"2023-08-05 08:06;jpai;Foo.java;https://bugs.openjdk.org/secure/attachment/105021/Foo.java",,,,,,,,,,,,,,,,,,,,,,"0|i32mzf:",9223372036854775807,b10,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@1cfeb1de,,,,,,,,,"2023-08-08 09:53;jlaskey;Coder of the last fragment not factored in.;;;","2023-08-08 11:37;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/15195
Date: 2023-08-08 18:31:04 +0000;;;","2023-08-08 11:38;jlaskey;jdk21-fix-request: This issue potentially affects any StringTemplate that mixes Latin1 and UTF16. 

Low-risk - part of a preview feature.;;;","2023-08-08 12:36;dukebot;Changeset: 68644411
Author:    Jim Laskey <jlaskey@openjdk.org>
Date:      2023-08-08 19:33:44 +0000
URL:       https://git.openjdk.org/jdk/commit/6864441163f946d0bec7380a2a120e31b812a6dc
;;;","2023-08-09 07:48;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk21/pull/170
Date: 2023-08-09 14:41:51 +0000;;;",,,,,,,,,,,,,,,,,,,,,,
JDWP support for -Djava.net.preferIPv6Addresses=system,JDK-8313804,5107475,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,cushon,cushon,cushon,2023-08-04 17:01,2023-09-27 18:20,2023-10-01 09:55,2023-09-25 09:45,,,,,,,,22,core-svc,,0,,,,,,,,,,,,,,,,,,,,"java.net.preferIPv6Addresses is documented as supporting three values: true, false, and system: https://github.com/openjdk/jdk/blob/6d185296161606edbc9f737a6b1b27496add9367/src/java.base/share/classes/java/net/doc-files/net-properties.html#L55-L63

The JDWP implementation reads preferIPv6Addresses, but it only handles the 'true' and 'false' values: https://github.com/openjdk/jdk/blob/6d185296161606edbc9f737a6b1b27496add9367/src/jdk.jdwp.agent/share/native/libdt_socket/socketTransport.c#L1370-L1371

JDWP should be updated to handle -Djava.net.preferIPv6Addresses=system, and avoid re-ordering the address returned by getaddrinfo in that case.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8250630,JDK-8016521,JDK-8184770,JDK-8221681,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i32my3:",9223372036854775807,b17,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@3397f701,,,,,,,,,"2023-09-18 13:41;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/15796
Date: 2023-09-18 20:32:28 +0000;;;","2023-09-19 17:33;amenkov;[~cushon] In the future please assign an issue to yourself before start to work on it.
If the issue is assigned to other engineer, elaborate with the assignee if it's ok to take the issue.;;;","2023-09-19 18:14;cushon;[~amenkov] Understood, thanks. Sorry for not coordinating better on this.;;;","2023-09-25 09:45;dukebot;Changeset: 9291b46b
Author:    Liam Miller-Cushon <cushon@openjdk.org>
Date:      2023-09-25 16:43:20 +0000
URL:       https://git.openjdk.org/jdk/commit/9291b46bcfa76a596578eb50c29b9850e7020dea
;;;",,,,,,,,,,,,,,,,,,,,,,,
AArch64: SA stack walking code having trouble finding sender frame when invoking LambdaForms is involved,JDK-8313800,5107470,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,aph,cjplummer,cjplummer,2023-08-04 14:55,2023-09-18 15:31,2023-10-01 09:55,2023-09-12 09:51,22,,,,,,,22,hotspot,,0,,,,,,,,,,,,,,,,,,,,"The issue that turned up with JDK-8313798 (stack walking infinite loop) sem to be related to stack walking when LambdaForms are involved. I've noticed that when this JDK-8313798 timeout happenes, the debuggee always seems to have the following stack:

THREAD: main
    Method java/lang/ClassLoader.defineClass0(Ljava/lang/ClassLoader;Ljava/lang/Class;Ljava/lang/String;[BIILjava/security/ProtectionDomain;ZILjava/lang/Object;)Ljava/lang/Class;@0x00000008004b4c00
    Method java/lang/System$2.defineClass(Ljava/lang/ClassLoader;Ljava/lang/Class;Ljava/lang/String;[BLjava/security/ProtectionDomain;ZILjava/lang/Object;)Ljava/lang/Class;@0x000000080001c3c0
    Method java/lang/invoke/MethodHandles$Lookup$ClassDefiner.defineClass(ZLjava/lang/Object;)Ljava/lang/Class;@0x0000000800220c48
    Method java/lang/invoke/InnerClassLambdaMetafactory.generateInnerClass()Ljava/lang/Class;@0x000000080027c118
    Method java/lang/invoke/InnerClassLambdaMetafactory.spinInnerClass()Ljava/lang/Class;@0x000000080027c0a8
    Method java/lang/invoke/InnerClassLambdaMetafactory.buildCallSite()Ljava/lang/invoke/CallSite;@0x000000080027a938
    Method java/lang/invoke/LambdaMetafactory.metafactory(Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;Ljava/lang/invoke/MethodType;Ljava/lang/invoke/MethodHandle;Ljava/lang/invoke/MethodType;)Ljava/lang/invoke/CallSite;@0x000000080044cdc8
    Method java/lang/invoke/LambdaForm$DMH+0x00000008010a5000.invokeStatic(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;@0x000000013360c340
    Method java/lang/invoke/Invokers$Holder.invokeExact_MT(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;@0x00000008000c3e80
    Method java/lang/invoke/BootstrapMethodInvoker.invoke(Ljava/lang/Class;Ljava/lang/invoke/MethodHandle;Ljava/lang/String;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Class;)Ljava/lang/Object;@0x0000000800187638
newSP(0x0000000122808220) is not above oldSP(0x000000016db520f0)
Error occurred during stack walking:
java.lang.RuntimeException: newSP(0x0000000122808220) is not above oldSP(0x000000016db520f0)

There are also other exceptions being thrown with similar stack traces (they didn't cause the JDK-8313798 timeout because an exception was thrown instead of getting in an infinite loop):

THREAD: main
    Method java/lang/ClassLoader.defineClass0(Ljava/lang/ClassLoader;Ljava/lang/Class;Ljava/lang/String;[BIILjava/security/ProtectionDomain;ZILjava/lang/Object;)Ljava/lang/Class;@0x00000070004b4c00
    Method java/lang/System$2.defineClass(Ljava/lang/ClassLoader;Ljava/lang/Class;Ljava/lang/String;[BLjava/security/ProtectionDomain;ZILjava/lang/Object;)Ljava/lang/Class;@0x000000700001c3c0
    Method java/lang/invoke/MethodHandles$Lookup$ClassDefiner.defineClass(ZLjava/lang/Object;)Ljava/lang/Class;@0x0000007000220c48
    Method java/lang/invoke/InnerClassLambdaMetafactory.generateInnerClass()Ljava/lang/Class;@0x000000700027c118
    Method java/lang/invoke/InnerClassLambdaMetafactory.spinInnerClass()Ljava/lang/Class;@0x000000700027c0a8
    Method java/lang/invoke/InnerClassLambdaMetafactory.buildCallSite()Ljava/lang/invoke/CallSite;@0x000000700027a938
    Method java/lang/invoke/LambdaMetafactory.metafactory(Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;Ljava/lang/invoke/MethodType;Ljava/lang/invoke/MethodHandle;Ljava/lang/invoke/MethodType;)Ljava/lang/invoke/CallSite;@0x000000700044cdc8
    Method java/lang/invoke/LambdaForm$DMH+0x00000070010a5000.invokeStatic(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;@0x000000012760c340
Error occurred during stack walking:
java.lang.NullPointerException: Cannot invoke ""sun.jvm.hotspot.debugger.Address.addOffsetTo(long)"" because the return value of ""sun.jvm.hotspot.runtime.Frame.getFP()"" is null

THREAD: main
    Method java/lang/ClassLoader.defineClass0(Ljava/lang/ClassLoader;Ljava/lang/Class;Ljava/lang/String;[BIILjava/security/ProtectionDomain;ZILjava/lang/Object;)Ljava/lang/Class;@0x00000004004b4c00
    Method java/lang/System$2.defineClass(Ljava/lang/ClassLoader;Ljava/lang/Class;Ljava/lang/String;[BLjava/security/ProtectionDomain;ZILjava/lang/Object;)Ljava/lang/Class;@0x000000040001c3c0
    Method java/lang/invoke/MethodHandles$Lookup$ClassDefiner.defineClass(ZLjava/lang/Object;)Ljava/lang/Class;@0x0000000400220c48
    Method java/lang/invoke/InnerClassLambdaMetafactory.generateInnerClass()Ljava/lang/Class;@0x000000040027c118
    Method java/lang/invoke/InnerClassLambdaMetafactory.spinInnerClass()Ljava/lang/Class;@0x000000040027c0a8
    Method java/lang/invoke/InnerClassLambdaMetafactory.buildCallSite()Ljava/lang/invoke/CallSite;@0x000000040027a938
    Method java/lang/invoke/LambdaMetafactory.metafactory(Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;Ljava/lang/invoke/MethodType;Ljava/lang/invoke/MethodHandle;Ljava/lang/invoke/MethodType;)Ljava/lang/invoke/CallSite;@0x000000040044cdc8
    Method java/lang/invoke/LambdaForm$DMH+0x00000004010a1000.invokeStatic(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;@0x000000012860c340
    Method java/lang/invoke/Invokers$Holder.invokeExact_MT(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;@0x00000004000c3e80
Error occurred during stack walking:
sun.jvm.hotspot.debugger.UnalignedAddressException: Trying to read at address: 0x00000068e109ce09 with alignment: 8

 Note the test passes whenever an exception is thrown, because the test knows that SA can't handle generating a stack trace in certain situations (while in the middle of a frame push for example). However, the fact that these failures all seem to be happening while invoking LamdaForms is suspicious. This could be related to JDK-8276210 which noted issues when the debuggee stack looked like the following:

  - jdk.internal.misc.Unsafe.allocateInstance(java.lang.Class) @bci=0 (Compiled frame; information may be imprecise)
 - java.lang.invoke.DirectMethodHandle.allocateInstance(java.lang.Object) @bci=12, line=492 (Compiled frame)
 - java.lang.invoke.DirectMethodHandle$Holder.newInvokeSpecial(java.lang.Object, java.lang.Object) @bci=1 (Compiled frame)
 - java.lang.invoke.Invokers$Holder.linkToTargetMethod(java.lang.Object, java.lang.Object) @bci=5 (Compiled frame) 

Note, usually stack walking issues with an active thread are with the topmost frame (the first frame that is visited), because it might be in an inconsistent state (not fully pushed or popped). If the state of the first frame is valid, then walking the rest of the stack should have no issues. But in all the above cases we eventually run into an issue with a frame higher up the stack, so this suggests that the stack walking code is broken in certain situations. Basically there is a frame somewhere in the middle of the stack that the stack walking code doesn't know how to get past. This seems to be unique to aarch64.
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8313798,,,,JDK-8248675,JDK-8276210,,,,,,,,,,aarch64,,,,,,,,,,,,,,"0|i32mwz:",9223372036854775807,b15,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@714e388c,,,,,,,,,"2023-08-04 15:02;cjplummer;Just to clarify, the above stack traces are for the debuggee, not SA. They show the debuggee stack at the point where SA had trouble walking it. The following diff was used to produce the above debuggee stack traces:

diff --git a/src/jdk.hotspot.agent/share/classes/sun/jvm/hotspot/runtime/ThreadStackTrace.java b/src/jdk.hotspot.agent/share/classes/sun/jvm/hotspot/runtime/ThreadStackTrace.java
index 6d3a8109f1b..c93cc55cf67 100644
--- a/src/jdk.hotspot.agent/share/classes/sun/jvm/hotspot/runtime/ThreadStackTrace.java
+++ b/src/jdk.hotspot.agent/share/classes/sun/jvm/hotspot/runtime/ThreadStackTrace.java
@@ -49,9 +49,13 @@ public class ThreadStackTrace {
         if (!thread.isJavaThread()) {
             return;
         }
+        System.out.println(""THREAD: "" + thread.getThreadName());
         try {
             for (JavaVFrame vf = thread.getLastJavaVFrameDbg(); vf != null; vf = vf.javaSender()) {
                 StackFrameInfo frame = new StackFrameInfo(vf);
+                System.out.print(""    "");
+                frame.getMethod().printValueOn(System.out);
+                System.out.println();
                 frames.add(frame);
                 depth++;
 
@@ -62,7 +66,10 @@ public class ThreadStackTrace {
             }
         } catch (Exception e) {
             System.out.println(""Error occurred during stack walking:"");
-            e.printStackTrace();
+            e.printStackTrace(System.out);
         }
     }
 }
;;;","2023-08-10 12:03;aph;Hmm, I guess I should have a look at this.;;;","2023-08-13 17:45;cjplummer;Feel free to. I have no plans to look at it.;;;","2023-08-17 09:01;aph;What's the quickest way to reproduce this?;;;","2023-08-17 09:23;cjplummer;Run sun/tools/jhsdb/HeapDumpTestWithActiveProcess.java, but you'll need to modify it to fail when exceptions are thrown while generating the hprof stack traces. Probably the best way to do this is it have jmap fail when if there is an exception while it is producing the thread stack traces. Right now it it does not. To do this modify sun.jvm.hotspot.runtime.ThreadStackTrace.dumpStack() so it rethrows the exception. You might also want to add the diff above so you can see the debuggee stack trace (up to the failure point) when the exception was thrown. You should see a variety of different exceptions on aarch64, and they should be pretty common. Note, ignore any issues that look like they originate with the first frame, since this is likely a case of trying to get the stack trace in the middle of a push or pop of the frame.;;;","2023-08-17 12:46;cjplummer;There are a couple of other related bugs you might also want to try to reproduce. I think you just need to remove them from the problem list:

JDK-8276210 - Test sun/tools/jhsdb/JStackStressTest.java timed out
sun/tools/jhsdb/JStackStressTest.java 
Currently problem listed:
sun/tools/jhsdb/JStackStressTest.java                           8276210 linux-aarch64

JDK-8248675 - [aarch64] serviceability/sa/TestJhsdbJstackMixed.java fails with ""Exception: sun.jvm.hotspot.debugger.UnmappedAddressException: e0a646adbd850""
serviceability/sa/TestJhsdbJstackMixed.java
Currently problem listed for -Xcomp:
serviceability/sa/TestJhsdbJstackMixed.java 8248675 linux-aarch64
;;;","2023-09-07 10:17;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/15624
Date: 2023-09-07 16:58:38 +0000;;;","2023-09-12 09:51;dukebot;Changeset: 1d702d28
Author:    Andrew Haley <aph@openjdk.org>
Date:      2023-09-12 16:49:55 +0000
URL:       https://git.openjdk.org/jdk/commit/1d702d28b687add53762435abceb55f4dc2d37e2
;;;",,,,,,,,,,,,,,,,,,,
Remove lockItemOnEdit flag from (Tree)TableCell,JDK-8313799,5107469,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,mhanl,mhanl,mhanl,2023-08-04 14:50,2023-08-10 08:48,2023-10-01 09:55,2023-08-08 08:18,jfx11,,,,,,,jfx22,javafx,,0,noreg-cleanup,,,,,,,,,,,,,,,,,,,"TreeTableCell and TableCell have a boolean flag that is called: lockItemOnEdit.
This flag is always false in production.
It is only changed by some JUnit tests to remove the need of setting up the whole table framework for the sake of just testing the cell.

// We check the boolean lockItemOnEdit field here, as whilst we want to
// updateItem normally, when it comes to unit tests we can't have the
// item change in all circumstances.
if (! lockItemOnEdit) {
    updateItem(-1);
}

This ticket proposes to remove this flag as it is irritating when checking out the sources.
It is also not best practise to mix code (e.g. variables) into 'production' classes that are only needed for testing.
Unlike package private methods we usually create and access via shims.

To remove this flag, it can simply be attached to the shim instead.
The shim then checks the flag instead. The flag is anyway accessed via a shim, so nothing will change on this side.
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,generic,,,,,,,,,generic,,,,,"0|i32mwr:",9223372036854775807,b04,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@67282485,,,,,,,,,"2023-08-04 15:01;mhanl;I tagged this ticket with the noreg-cleanup label. Not sure if this is correct, but this ticket does not change any existing behaviour, not even the tests -> Only cleanup.;;;","2023-08-04 15:18;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jfx/pull/1198
Date: 2023-08-04 22:12:55 +0000;;;","2023-08-05 06:41;kcr;noreg-cleanup is good here.;;;","2023-08-08 08:18;dukebot;Changeset: 771273f7
Author:    Marius Hanl <mhanl@openjdk.org>
Date:      2023-08-08 15:16:18 +0000
URL:       https://git.openjdk.org/jfx/commit/771273f708819d74dbf6de3d92f44ad1ffe7bcc1
;;;",,,,,,,,,,,,,,,,,,,,,,,
[aarch64] sun/tools/jhsdb/HeapDumpTestWithActiveProcess.java sometimes times out on aarch64,JDK-8313798,5107468,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,cjplummer,cjplummer,cjplummer,2023-08-04 14:46,2023-08-31 10:56,2023-10-01 09:55,2023-08-11 11:11,22,,,,,,,22,hotspot,,0,aarch64,,,,,,,,,,,,,,,,,,,"I started running into the following issue after implementing JDK-8307408, which changes the arguments used to launch the debuggee.

sun/tools/jhsdb/HeapDumpTestWithActiveProcess.java sometimes times out on aarch64. I'm mostly noting this issue on OSX, but suspect it may also sometimes happen in linux. Although the stack trace of the process varies, the following frames are always present when the process times out:

	at jdk.hotspot.agent/sun.jvm.hotspot.runtime.VFrame.sender(VFrame.java:126)
	at jdk.hotspot.agent/sun.jvm.hotspot.runtime.VFrame.javaSender(VFrame.java:156)
	at jdk.hotspot.agent/sun.jvm.hotspot.runtime.ThreadStackTrace.dumpStack(ThreadStackTrace.java:54)
	at jdk.hotspot.agent/sun.jvm.hotspot.utilities.HeapHprofBinWriter.dumpStackTraces(HeapHprofBinWriter.java:836)
	at jdk.hotspot.agent/sun.jvm.hotspot.utilities.HeapHprofBinWriter.write(HeapHprofBinWriter.java:460)
	at jdk.hotspot.agent/sun.jvm.hotspot.tools.JMap.writeHeapHprofBin(JMap.java:216)
	at jdk.hotspot.agent/sun.jvm.hotspot.tools.JMap.run(JMap.java:103)
	at jdk.hotspot.agent/sun.jvm.hotspot.tools.Tool.startInternal(Tool.java:278)
	at jdk.hotspot.agent/sun.jvm.hotspot.tools.Tool.start(Tool.java:241)
	at jdk.hotspot.agent/sun.jvm.hotspot.tools.Tool.execute(Tool.java:134)
	at jdk.hotspot.agent/sun.jvm.hotspot.tools.JMap.main(JMap.java:202)
	at jdk.hotspot.agent/sun.jvm.hotspot.SALauncher.runJMAP(SALauncher.java:340)
	at jdk.hotspot.agent/sun.jvm.hotspot.SALauncher.main(SALauncher.java:500)

It's actually stuck in VFrame.javaSender(). The issue is that no sanity check is done on the frame being looked at, so the following is at risk of getting stuck in an infinite loop if at some point what is suppose to be the sender frame is actually at a lower address instead of a higher address:

    VFrame f = sender(imprecise);
    while (f != null) {
      if (f.isJavaFrame()) {
        return (JavaVFrame) f;
      }
      f = f.sender(imprecise);
    }

The following code fixes the issue with an extra check:

    VFrame f = sender(imprecise);
    while (f != null) {
      if (f.isJavaFrame()) {
        return (JavaVFrame) f;
      }
      Address oldSP = f.getFrame().getSP();
      f = f.sender(imprecise);
      if (f != null) {
          Address newSP = f.getFrame().getSP();
          if (oldSP.greaterThanOrEqual(newSP)) {
              String errString = ""newSP("" + newSP + "") is not above oldSP("" + oldSP + "")"";
              System.out.println(errString);
              throw new RuntimeException(errString);
          }
      }
    }

Note this issue is very similar to JDK-8231635, but is different stack walking code. The difference is that the JDK-8231635 stack walking is using Frame.sender() and here we using VFrame.sender(). I'm not too clear on the distinction between these two different approaches to stack walking. In any case, the JDK-8231635 fix is similar to what I'm suggesting here, which is to santity check that sender frames are always at a higher address.
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8248675,JDK-8231635,JDK-8307408,JDK-8276210,JDK-8313800,,,,,,,,,,,aarch64,,,,,,,,,,,,,,"0|i32mwj:",9223372036854775807,b11,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@714e388c,,,,,,,,,"2023-08-04 14:49;cjplummer;I think JDK-8276210 is likely a duplicate of this CR.;;;","2023-08-07 13:23;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/15183
Date: 2023-08-07 20:17:21 +0000;;;","2023-08-11 11:11;dukebot;Changeset: 8f1c1348
Author:    Chris Plummer <cjplummer@openjdk.org>
Date:      2023-08-11 18:09:44 +0000
URL:       https://git.openjdk.org/jdk/commit/8f1c134848437d7e37fb3b4bd603b91798e19724
;;;","2023-08-31 09:07;aph;I have found the root cause of this problem. It is due to AArch64Frame::adjustUnextendedSP(), which is wrong.

It does this:

      // If the sender PC is a deoptimization point, get the original
      // PC.  For MethodHandle call site the unextended_sp is stored in
      // saved_fp.
      if (senderNm.isDeoptMhEntry(getPC())) {
        // DEBUG_ONLY(verifyDeoptMhOriginalPc(senderNm, getFP()));
        raw_unextendedSP = getFP();
      }
      else if (senderNm.isDeoptEntry(getPC())) {
        // DEBUG_ONLY(verifyDeoptOriginalPc(senderNm, raw_unextendedSp));
      }
      else if (senderNm.isMethodHandleReturn(getPC())) {
        raw_unextendedSP = getFP();
      }

Unfortunately we don't use frame pointers any more, so FP can point to anywhere at all.

x86 doesn't do any special handling here for method handle intrinsics, and I don't think we should do so on AArch64 either. I just looked at the AArch64 frame-handling code, and it's stuff I wrote in 2015 based on x86.

Looking back at the history of this, I see that the AArch64 port missed this patch:

8068945: Use RBP register as proper frame pointer in JIT
https://bugs.openjdk.org/browse/JDK-8068945

... which removed the use of FP in AArch64Frame::adjustUnextendedSP().



;;;","2023-08-31 09:33;aph;And Indeed, I just checked, and the method handle code where we go into the weeds uses FP as a temporary register, so its saved value is overwritten. 

I think we'd be fine with the same definition of Frame::adjustUnextendedSP() as x86.;;;","2023-08-31 10:56;cjplummer;If you feel this is also the cause of JDK-8313800, it would probably be best to fix using that CR.;;;",,,,,,,,,,,,,,,,,,,,,
AsyncGetCallTrace crash on unreadable interpreter method pointer,JDK-8313796,5107465,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,rstartin,rstartin,rstartin,2023-08-04 12:17,2023-08-25 12:55,2023-10-01 09:55,2023-08-09 04:24,11,17,21,22,,,,22,hotspot,,0,amazon-interest,jdk11u-fix-request,jdk11u-fix-yes,jdk17u-fix-request,jdk17u-fix-yes,jdk21u-fix-request,jdk21u-fix-SQE-ok,jdk21u-fix-yes,,,,,,,,,,,,"```
#
# A fatal error has been detected by the Java Runtime Environment:
#
#  SIGSEGV (0xb) at pc=0x00007f83be32e9c3, pid=100, tid=926134
#
# JRE version: OpenJDK Runtime Environment Corretto-11.0.19.7.1 (11.0.19+7) (build 11.0.19+7-LTS)
# Java VM: OpenJDK 64-Bit Server VM Corretto-11.0.19.7.1 (11.0.19+7-LTS, mixed mode, tiered, compressed oops, g1 gc, linux-amd64)
# Problematic frame:
# V  [libjvm.so+0x7a19c3]  frame::is_interpreted_frame_valid(JavaThread*) const+0x43
#
# Core dump will be written. Default location: //core.100
#
# If you would like to submit a bug report, please visit:
#   https://github.com/corretto/corretto-11/issues/
#
...
Current thread (0x00007f81700aa000):  JavaThread ""redacted"" daemon [_thread_in_vm, id=926134, stack(0x00007f7f9b9fe000,0x00007f7f9baff000)]

Stack: [0x00007f7f9b9fe000,0x00007f7f9baff000],  sp=0x00007f7f9baf8b00,  free space=1002k
Native frames: (J=compiled Java code, A=aot compiled Java code, j=interpreted, Vv=VM code, C=native code)
V  [libjvm.so+0x7a19c3]  frame::is_interpreted_frame_valid(JavaThread*) const+0x43
V  [libjvm.so+0x286f47]  forte_fill_call_trace_given_top(JavaThread*, ASGCT_CallTrace*, int, frame) [clone .isra.20]+0x1d3
V  [libjvm.so+0x79daf8]  AsyncGetCallTrace+0x188
C  [libjavaProfiler12753845288268514789.so+0x33c1b]  Profiler::getJavaTraceAsync(void*, ASGCT_CallFrame*, int, StackContext*, bool*)+0x12b
C  [libjavaProfiler12753845288268514789.so+0x34cf0]  Profiler::recordSample(void*, unsigned long long, int, int, Event*)+0x250
C  [libjavaProfiler12753845288268514789.so+0x3944c]  PerfEvents::signalHandler(int, siginfo_t*, void*)+0x13c
C  [libpthread.so.0+0x118e0]


siginfo: si_signo: 11 (SIGSEGV), si_code: 128 (SI_KERNEL), si_addr: 0x0000000000000000
```

```
00000000007a1980 <_ZNK5frame26is_interpreted_frame_validEP10JavaThread>:
  7a1980:	48 8b 47 20          	mov    0x20(%rdi),%rax
  7a1984:	48 85 c0             	test   %rax,%rax
  7a1987:	74 1f                	je     7a19a8 <_ZNK5frame26is_interpreted_frame_validEP10JavaThread+0x28>
  7a1989:	a8 07                	test   $0x7,%al
  7a198b:	75 1b                	jne    7a19a8 <_ZNK5frame26is_interpreted_frame_validEP10JavaThread+0x28>
  7a198d:	48 8b 17             	mov    (%rdi),%rdx
  7a1990:	48 85 d2             	test   %rdx,%rdx
  7a1993:	74 13                	je     7a19a8 <_ZNK5frame26is_interpreted_frame_validEP10JavaThread+0x28>
  7a1995:	f6 c2 07             	test   $0x7,%dl
  7a1998:	75 0e                	jne    7a19a8 <_ZNK5frame26is_interpreted_frame_validEP10JavaThread+0x28>
  7a199a:	48 8d 48 b8          	lea    -0x48(%rax),%rcx
  7a199e:	48 39 ca             	cmp    %rcx,%rdx
  7a19a1:	77 05                	ja     7a19a8 <_ZNK5frame26is_interpreted_frame_validEP10JavaThread+0x28>
  7a19a3:	48 39 c2             	cmp    %rax,%rdx
  7a19a6:	72 08                	jb     7a19b0 <_ZNK5frame26is_interpreted_frame_validEP10JavaThread+0x30>
  7a19a8:	31 c0                	xor    %eax,%eax
  7a19aa:	c3                   	retq   
  7a19ab:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
  7a19b0:	55                   	push   %rbp
  7a19b1:	48 89 e5             	mov    %rsp,%rbp
  7a19b4:	41 55                	push   %r13
  7a19b6:	41 54                	push   %r12
  7a19b8:	53                   	push   %rbx
  7a19b9:	48 89 fb             	mov    %rdi,%rbx
  7a19bc:	49 89 f4             	mov    %rsi,%r12
  7a19bf:	48 83 ec 08          	sub    $0x8,%rsp
  7a19c3:	4c 8b 68 e8          	mov    -0x18(%rax),%r13 <-- +0x43
  7a19c7:	4c 89 ef             	mov    %r13,%rdi
  7a19ca:	e8 91 00 45 00       	callq  bf1a60 <_ZN6Method15is_valid_methodEPKS_>
  7a19cf:	84 c0                	test   %al,%al
  7a19d1:	74 21                	je     7a19f4 <_ZNK5frame26is_interpreted_frame_validEP10JavaThread+0x74>
  7a19d3:	49 8b 55 08          	mov    0x8(%r13),%rdx
  7a19d7:	48 8b 43 20          	mov    0x20(%rbx),%rax
  7a19db:	48 2b 43 28          	sub    0x28(%rbx),%rax
  7a19df:	0f b7 52 30          	movzwl 0x30(%rdx),%edx
  7a19e3:	48 c1 f8 03          	sar    $0x3,%rax
  7a19e7:	48 8d 14 d5 08 04 00 	lea    0x408(,%rdx,8),%rdx
  7a19ee:	00 
  7a19ef:	48 39 d0             	cmp    %rdx,%rax
  7a19f2:	7e 0d                	jle    7a1a01 <_ZNK5frame26is_interpreted_frame_validEP10JavaThread+0x81>
  7a19f4:	31 c0                	xor    %eax,%eax
  7a19f6:	48 83 c4 08          	add    $0x8,%rsp
  7a19fa:	5b                   	pop    %rbx
  7a19fb:	41 5c                	pop    %r12
  7a19fd:	41 5d                	pop    %r13
  7a19ff:	5d                   	pop    %rbp
  7a1a00:	c3                   	retq   
  7a1a01:	48 89 df             	mov    %rbx,%rdi
  7a1a04:	e8 d7 ce ff ff       	callq  79e8e0 <_ZNK5frame21interpreter_frame_bcpEv>
  7a1a09:	4c 89 ef             	mov    %r13,%rdi
  7a1a0c:	48 89 c6             	mov    %rax,%rsi
  7a1a0f:	e8 cc 9c 44 00       	callq  beb6e0 <_ZNK6Method21validate_bci_from_bcpEPh>
  7a1a14:	85 c0                	test   %eax,%eax
  7a1a16:	78 dc                	js     7a19f4 <_ZNK5frame26is_interpreted_frame_validEP10JavaThread+0x74>
  7a1a18:	48 8b 43 20          	mov    0x20(%rbx),%rax
  7a1a1c:	48 8b 78 d0          	mov    -0x30(%rax),%rdi
  7a1a20:	e8 cb df c9 ff       	callq  43f9f0 <_ZN12MetaspaceObj8is_validEPKS_>
  7a1a25:	84 c0                	test   %al,%al
  7a1a27:	74 cb                	je     7a19f4 <_ZNK5frame26is_interpreted_frame_validEP10JavaThread+0x74>
  7a1a29:	48 8b 53 20          	mov    0x20(%rbx),%rdx
  7a1a2d:	48 8b 4a c8          	mov    -0x38(%rdx),%rcx
  7a1a31:	49 3b 8c 24 90 02 00 	cmp    0x290(%r12),%rcx
  7a1a38:	00 
  7a1a39:	0f 97 c0             	seta   %al
  7a1a3c:	48 39 d1             	cmp    %rdx,%rcx
  7a1a3f:	0f 92 c2             	setb   %dl
  7a1a42:	09 d0                	or     %edx,%eax
  7a1a44:	83 f0 01             	xor    $0x1,%eax
  7a1a47:	eb ad                	jmp    7a19f6 <_ZNK5frame26is_interpreted_frame_validEP10JavaThread+0x76>
  7a1a49:	90                   	nop
  7a1a4a:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
```

This appears to indicate that the `Method**` returned by `interpreter_frame_method_addr()` is null:

```cpp
  // do some validation of frame elements
  // first the method

  Method* m = *interpreter_frame_method_addr();
```",,,,,,,,,,,,JDK-8314600,JDK-8315054,JDK-8314459,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,x86,,,,,,,,,linux,,,,,"0|i32mvv:",9223372036854775807,b10,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@2846162a,,,,,,,,,"2023-08-07 10:05;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/15178
Date: 2023-08-07 13:37:33 +0000;;;","2023-08-07 13:45;dcubed;Moving from core-svc -> hotspot/svc since that is where
AsyncGetCallTrace bugs live.;;;","2023-08-08 10:56;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/15193
Date: 2023-08-08 15:02:59 +0000;;;","2023-08-09 04:24;dukebot;Changeset: 0e2c72d7
Author:    Richard Startin <richard.startin@datadoghq.com>
Committer: Thomas Stuefe <stuefe@openjdk.org>
Date:      2023-08-09 11:23:32 +0000
URL:       https://git.openjdk.org/jdk/commit/0e2c72d7a5206b7173af5bf69e21d21ea276bd94
;;;","2023-08-15 14:50;btaylor;Fix request (17u): Fixes a sigseg, backport is clean and passes jtreg tier 1-4 tests.;;;","2023-08-15 14:55;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/1665
Date: 2023-08-15 21:49:16 +0000;;;","2023-08-15 14:55;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk11u-dev/pull/2079
Date: 2023-08-15 21:49:14 +0000;;;","2023-08-16 12:15;btaylor;Fix request (11u): Fixes a sigseg. Backport is not clean but the changes are trivial and passes jtreg tier 1-4 tests.;;;","2023-08-23 12:28;btaylor;Fix request (21u): Fixes a sigseg, backport is clean and passes jtreg tier 1;;;","2023-08-23 12:34;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk21u/pull/94
Date: 2023-08-23 19:27:53 +0000;;;",,,,,,,,,,,,,,,,,
Fix for JDK-8313564 breaks ppc and s390x builds,JDK-8313795,5107464,Bug,Resolved,JDK,JDK,software,duke,,,P1,Fixed,clanger,clanger,clanger,2023-08-04 12:00,2023-08-10 09:14,2023-10-01 09:55,2023-08-04 15:35,,,,,,,,22,hotspot,,0,,,,,,,,,,,,,,,,,,,,"The fix for JDK-8313564 changed the type of ContendedPaddingWidth from intx to int. In platform specific code some format specifiers are incorrect now and break the build.

For instance:
* For target hotspot_variant-server_libjvm_objs_vm_version_ppc.o:
/linuxppc64le/jdk-dev/src/hotspot/cpu/ppc/vm_version_ppc.cpp: In static member function 'static void VM_Version::print_features()':
/linuxppc64le/jdk-dev/src/hotspot/cpu/ppc/vm_version_ppc.cpp:500:21: error: format '%ld' expects argument of type 'long int', but argument 3 has type 'int' [-Werror=format=]
  500 |       tty->print_cr(""ContendedPaddingWidth "" INTX_FORMAT, ContendedPaddingWidth);
      |                                                           ~~~~~~~~~~~~~~~~~~~~~
      |                                                           |
      |                                                           int
cc1plus: all warnings being treated as errors",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8313564,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i32mvn:",9223372036854775807,b10,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,,,"2023-08-04 12:11;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/15165
Date: 2023-08-04 19:05:43 +0000;;;","2023-08-04 15:35;dukebot;Changeset: 6d185296
Author:    Christoph Langer <clanger@openjdk.org>
Date:      2023-08-04 22:33:36 +0000
URL:       https://git.openjdk.org/jdk/commit/6d185296161606edbc9f737a6b1b27496add9367
;;;",,,,,,,,,,,,,,,,,,,,,,,,,
Verify 4th party information in src/jdk.internal.le/share/legal/jline.md,JDK-8313792,5107460,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,jlahoda,korozcosanch,korozcosanch,2023-08-04 11:27,2023-09-28 02:22,2023-10-01 09:55,2023-08-08 01:51,11,17,21,,,,,22,tools,,0,jdk11u-fix-request,jdk11u-fix-yes,jdk17u-fix-request,jdk17u-fix-yes,jdk21u-fix-request,jdk21u-fix-SQE-ok-next,jdk21u-fix-yes,,,,,,,,,,,,,There are several 4th party dependencies entries in src/jdk.internal.le/share/legal/jline.md. Please verify and remove those that don't apply.,,,,,,,,,,,,JDK-8317037,JDK-8316026,JDK-8317227,JDK-8316027,JDK-8316264,JDK-8316195,,,,,,,,,,,,,,,,,,,,,JDK-8287897,JDK-8315067,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i32mur:",9223372036854775807,b10,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@ef6d34f,,,,,,,,,"2023-08-07 03:58;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/15174
Date: 2023-08-07 10:51:46 +0000;;;","2023-08-08 01:51;dukebot;Changeset: 87a6acbe
Author:    Jan Lahoda <jlahoda@openjdk.org>
Date:      2023-08-08 08:49:39 +0000
URL:       https://git.openjdk.org/jdk/commit/87a6acbeee1673526bfc5f8692e0949cb113e841
;;;","2023-09-11 00:54;jlahoda;Fix Request:

The license text should be adjusted. No code changes. Usual langtools tests are passing.;;;","2023-09-11 01:01;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk21u/pull/149
Date: 2023-09-11 07:54:41 +0000;;;","2023-09-22 02:15;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/1765
Date: 2023-09-22 09:07:31 +0000;;;","2023-09-22 02:21;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk11u-dev/pull/2141
Date: 2023-09-22 09:12:55 +0000;;;","2023-09-25 19:04;andrewlu;Fix request [17u]

I backport this for parity with 17.0.10-oracle.
Low risk, only md file change.
Clean backport. SAP nightly testing passed.;;;","2023-09-27 05:34;andrewlu;Fix request [11u]

I backport this for parity with 11.0.22-oracle.
Low risk, only md file change.
Clean backport.
Test passes. SAP nightly testing passed.
;;;",,,,,,,,,,,,,,,,,,,
Invalid CEN header (invalid zip64 extra data field size),JDK-8313765,5107428,Bug,Resolved,JDK,JDK,software,duke,,,P2,Fixed,lancea,lancea,lancea,2023-08-04 04:19,2023-09-15 07:58,2023-10-01 09:55,2023-08-16 08:44,11.0.20,11.0.20-oracle,17.0.8,17.0.8-oracle,21,,,22,core-libs,,0,11bpr-critical-approved,17bpr-critical-approved,amazon-interest,bugdb_35653027,CPU23_10-critical-approved,CPU23_10-critical-SQE-OK,jdk11u-critical-request,jdk11u-critical-yes,jdk11u-fix-request,jdk11u-fix-yes,jdk17u-critical-request,jdk17u-critical-yes,jdk17u-fix-request,jdk17u-fix-yes,jdk21u-fix-request,jdk21u-fix-SQE-ok,jdk21u-fix-yes,regression,release-note=yes,"The following  ZipException may be thrown when the data contained in the CEN Extra fields are problematic:

      Invalid CEN header (invalid zip64 extra data field size)


The ZipException may occur due to:

 1. Some releases of Ant and commons-compress create CEN Zip64 extra headers with a size of 0 when Zip64 mode is required 
   - fixed in Commons-compress 1.11 (2016)  and  Ant 1.10.14 (2023).
 2. Extra field includes padding not included in the Extra data field headers
 3. The BND tool added problematic data to the extra field
    - fixed in BND 5.3 (2021) and  maven-bundle-plugin 5.1.5 which includes BND 5.3



The issue can demonstrated via the following ant script :

?xml version=""1.0""?>
<project name=""zip 64 jar test"" basedir=""."" default=""jar"">
    <property name=""jarFile""      value=""test.jar""/>
    <property name=""builddir""      value=""classes""/>

    <target name=""jar"">
        <jar destfile=""${jarFile}""
             zip64mode=""always""
             basedir=""${builddir}""/>
    </target>
</project>


",,,,,,,,,,,,JDK-8314705,JDK-8314761,JDK-8314557,JDK-8314664,JDK-8314558,JDK-8314674,JDK-8314760,JDK-8314851,JDK-8314853,JDK-8314768,JDK-8314587,JDK-8315972,JDK-8315089,,,,,,,,,,,,JDK-8315215,JDK-8313320,JDK-8314450,JDK-8313320,JDK-8315215,,JDK-8315005,JDK-8315899,JDK-8302483,,,,,,,,,,,,,,,,21,,,,,,,"0|i32mnn:",9223372036854775807,b11,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@62714d2c,,,,,,,,,"2023-08-14 08:57;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/15273
Date: 2023-08-14 14:52:00 +0000;;;","2023-08-16 08:44;dukebot;Changeset: 13f6450e
Author:    Lance Andersen <lancea@openjdk.org>
Date:      2023-08-16 15:42:36 +0000
URL:       https://git.openjdk.org/jdk/commit/13f6450e2e70df4df8bd882def837fbd5bef1524
;;;","2023-08-16 19:22;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk20u/pull/87
Date: 2023-08-17 02:16:29 +0000;;;","2023-08-16 19:22;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/1670
Date: 2023-08-17 02:16:28 +0000;;;","2023-08-16 19:22;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk11u-dev/pull/2084
Date: 2023-08-17 02:16:27 +0000;;;","2023-08-17 14:31;btaylor;Fix request (17u): Fixes a regression in zip behavior. Backport requires minimal changes as described on the PR. All tests in `test/jdk/java/util/zip` including those added in this commit are passing.;;;","2023-08-17 21:44;rreddy;Fix Request (21u)

Fixes a regression where we are getting a Invalid CEN header even on positive cases in zip behaviour. Backport requires minimal changes. All tests in `test/jdk/java/util/zip` including those added in this commit are passing.;;;","2023-08-18 09:04;btaylor;Fix request (11u): Fixes a regression in zip behavior. Backport requires minimal changes as described on the PR. All tests in `test/jdk/java/util/zip` including those added in this commit are passing.
;;;","2023-08-18 10:32;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk21/pull/173
Date: 2023-08-18 17:25:10 +0000;;;","2023-08-18 11:04;btaylor;@rreddy I don't see a PR for jdk21u, so I'll plan to create one unless you object. Contrary to your fix request, as far as I can tell, the backport is clean for jdk21u. ;;;","2023-08-18 11:12;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk21u/pull/72
Date: 2023-08-18 18:07:06 +0000;;;","2023-08-21 00:50;rreddy;[~btaylor] Yes Ben , I had not created a PR for jdk21u , I see your PR , you can go ahead and push the fix once the fix is approved. Thanks.;;;","2023-08-21 13:13;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk11u/pull/77
Date: 2023-08-21 20:05:53 +0000;;;","2023-08-22 09:22;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u/pull/376
Date: 2023-08-21 20:03:31 +0000;;;","2023-08-22 14:51;goetz;11u/17u critical request

We are releasing interim patchs for this fix: 17.0.8.1/11.0.20.1;;;","2023-08-23 14:44;lancea;The fix results in

- Allowing for 0 length Extra headers as written by some tools
- Handle padding in Extra fields not accounted for in the Extra header sizes

An Exception will continue to be thrown for the BND bad data issue,  the Exception now includes additional info in the Exception message;;;",,,,,,,,,,,
[REDO] Enhance AES performance,JDK-8313760,5107422,Bug,Resolved,JDK,JDK,software,duke,,,P2,Fixed,chagedorn,chagedorn,chagedorn,2023-08-04 03:28,2023-09-19 02:31,2023-10-01 09:55,2023-08-16 00:22,11.0.22-oracle,17.0.10-oracle,22,,,,,22,hotspot,,0,jdk11u-na,jdk17u-na,oracle-triage-22,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8315183,JDK-8314944,JDK-8314942,JDK-8314943,,,,,,,,,,,,,,,,,,,,,,,JDK-8313756,,,,JDK-8308682,,,,,,,,,,,,,,,,,,,,,,,,,"0|i32mmb:",9223372036854775807,b11,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2023-08-14 05:35;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/15267
Date: 2023-08-14 12:18:02 +0000;;;","2023-08-16 00:22;dukebot;Changeset: 49ddb199
Author:    Christian Hagedorn <chagedorn@openjdk.org>
Date:      2023-08-16 07:21:04 +0000
URL:       https://git.openjdk.org/jdk/commit/49ddb1997256d9fb7149d274d8afa18f7c2609a4
;;;","2023-09-18 01:20;goetz;[11u-na, 17u-na]
The REDO is identical to the BACKOUT, so no backport is needed.
;;;",,,,,,,,,,,,,,,,,,,,,,,,
[BACKOUT] 8308682: Enhance AES performance,JDK-8313756,5107417,Bug,Resolved,JDK,JDK,software,duke,,,P2,Fixed,chagedorn,chagedorn,chagedorn,2023-08-04 03:25,2023-09-18 01:21,2023-10-01 09:55,2023-08-14 05:08,11.0.22-oracle,17.0.10-oracle,22,,,,,22,hotspot,,0,jdk11u-na,jdk17u-na,oracle-triage-22,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8315181,JDK-8314867,JDK-8314876,JDK-8314875,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8308682,JDK-8313760,,,,,,,,,,,,,,,,,,,,,,,,"0|i32ml7:",9223372036854775807,b11,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2023-08-14 04:15;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/15266
Date: 2023-08-14 11:08:28 +0000;;;","2023-08-14 05:10;dukebot;Changeset: 207bd00c
Author:    Christian Hagedorn <chagedorn@openjdk.org>
Date:      2023-08-14 12:08:16 +0000
URL:       https://git.openjdk.org/jdk/commit/207bd00c5101fce06b5ac12e76893d989b0093e2
;;;","2023-09-18 01:21;goetz;[11u-na, 17u-na]
The REDO is identical to the BACKOUT, so no backport is needed. ;;;",,,,,,,,,,,,,,,,,,,,,,,,
InstanceKlassFlags::print_on doesn't print the flag names,JDK-8313752,5107412,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,stefank,stefank,stefank,2023-08-04 02:49,2023-08-23 23:11,2023-10-01 09:55,2023-08-08 23:18,21,22,,,,,,22,hotspot,,0,amazon-interest,jdk21u-fix-request,jdk21u-fix-SQE-ok,jdk21u-fix-yes,,,,,,,,,,,,,,,,"It prints "" ##name "" instead of the flag names because of this code

void InstanceKlassFlags::print_on(outputStream* st) const {
#define IK_FLAGS_PRINT(name, ignore)          \
  if (name()) st->print("" ##name "");
  IK_FLAGS_DO(IK_FLAGS_PRINT)
  IK_STATUS_DO(IK_FLAGS_PRINT)
#undef IK_FLAGS_PRINT
  st->cr();
}",,,,,,,,,,,,JDK-8314919,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,21,,,,,,,"0|i32mk3:",9223372036854775807,b10,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,,,"2023-08-04 04:12;stefank;I think this bug was introduced with JDK-JDK-8306851;;;","2023-08-04 04:15;stefank;This can be seen in our hs_err files:
```
RCX=0x00007f86bf0073c8 is a pointer to class: 
java.lang.Class {0x00007f86bf0073c8}
 - instance size:     22
 - klass size:        97
 - access:            public final synchronized 
 - flags:              ##name  ##name  ##name  ##name  ##name  ##name 
```;;;","2023-08-04 04:20;stefank;An easy way to reproduce this is to run the following command:
$ jcmd TestClassName VM.classes -verbose

and inspect the output.;;;","2023-08-04 04:32;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/15153
Date: 2023-08-04 11:28:50 +0000;;;","2023-08-08 23:18;dukebot;Changeset: 735b16a6
Author:    Stefan Karlsson <stefank@openjdk.org>
Date:      2023-08-09 06:16:18 +0000
URL:       https://git.openjdk.org/jdk/commit/735b16a6969ba5998b4f809927e5ac42a7e72d2d
;;;","2023-08-23 01:00;shade;Fix Request (21u)

Fixes a diagnostic output regression in JDK 21. Applies cleanly. New test passes.;;;","2023-08-23 01:07;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk21u/pull/87
Date: 2023-08-23 07:59:37 +0000;;;",,,,,,,,,,,,,,,,,,,,
C2 SuperWord: wrong result with -XX:+UseVectorCmov -XX:+UseCMoveUnconditionally,JDK-8313720,5107381,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,epeter,epeter,epeter,2023-08-03 15:52,2023-08-24 02:05,2023-10-01 09:55,2023-08-16 00:18,21,22,,,,,,22,hotspot,,0,amazon-interest,c2,c2-superword,oracle-triage-17,oracle-triage-22,regression,,,,,,,,,,,,,,"Found this while trying to find a reproducer for JDK-8313345.

Reproduce:
java -Xbatch -XX:CompileCommand=compileonly,Test2::test -XX:+TraceLoopOpts -XX:+UseVectorCmov -XX:+UseCMoveUnconditionally -XX:+TraceSuperWord -XX:+TraceNewVectors -XX:MaxVectorSize=64 Test2.java

fail: 100 1.0 != 0.0 : 1.0 1.0
Exception in thread ""main"" java.lang.RuntimeException: There were wrong results
	at Test2.verify(Test2.java:56)
	at Test2.main(Test2.java:44)

I suspect the reason is the mixed comparison values in the Bool pack (le / lt):
Pack: 11
 align: 0 	 1708  Bool  === _ 1709  [[ 1707 ]] [le] !orig=1462,1241,163 !jvms: Test2::test @ bci:24 (line 16)
 align: 4 	 1702  Bool  === _ 1703  [[ 1701 ]] [lt] !orig=1456,1235,255 !jvms: Test2::test @ bci:48 (line 17)
 align: 8 	 1696  Bool  === _ 1697  [[ 1695 ]] [le] !orig=1450,163 !jvms: Test2::test @ bci:24 (line 16)
 align: 12 	 1690  Bool  === _ 1691  [[ 1689 ]] [lt] !orig=1444,255 !jvms: Test2::test @ bci:48 (line 17)
 align: 16 	 1684  Bool  === _ 1685  [[ 1683 ]] [le] !orig=1241,163 !jvms: Test2::test @ bci:24 (line 16)
 align: 20 	 1678  Bool  === _ 1679  [[ 1677 ]] [lt] !orig=1235,255 !jvms: Test2::test @ bci:48 (line 17)
 align: 24 	 1666  Bool  === _ 1667  [[ 1665 ]] [le] !orig=163 !jvms: Test2::test @ bci:24 (line 16)
 align: 28 	 1660  Bool  === _ 1661  [[ 1659 ]] [lt] !orig=255 !jvms: Test2::test @ bci:48 (line 17)
 align: 32 	 1462  Bool  === _ 1463  [[ 1461 ]] [le] !orig=1241,163 !jvms: Test2::test @ bci:24 (line 16)
 align: 36 	 1456  Bool  === _ 1457  [[ 1455 ]] [lt] !orig=1235,255 !jvms: Test2::test @ bci:48 (line 17)
 align: 40 	 1450  Bool  === _ 1451  [[ 1449 ]] [le] !orig=163 !jvms: Test2::test @ bci:24 (line 16)
 align: 44 	 1444  Bool  === _ 1445  [[ 1443 ]] [lt] !orig=255 !jvms: Test2::test @ bci:48 (line 17)
 align: 48 	 1241  Bool  === _ 1242  [[ 1240 ]] [le] !orig=163 !jvms: Test2::test @ bci:24 (line 16)
 align: 52 	 1235  Bool  === _ 1236  [[ 1234 ]] [lt] !orig=255 !jvms: Test2::test @ bci:48 (line 17)
 align: 56 	  163  Bool  === _ 162  [[ 317 ]] [le] !jvms: Test2::test @ bci:24 (line 16)
 align: 60 	  255  Bool  === _ 254  [[ 318 ]] [lt] !jvms: Test2::test @ bci:48 (line 17)

The logic I implemented in JDK-8306302 did not take account of hand unrolled loops, where the comparisons can be different.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8306302,,,"2023-08-03 15:50;epeter;Test2.java;https://bugs.openjdk.org/secure/attachment/104998/Test2.java",,,,,,,,,,,,,,,,,,,,,,"0|i32md7:",9223372036854775807,b11,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2023-08-03 23:30;chagedorn;ILW = Wrong result with superword, edge case?, use -XX:-UseVectorCmov -XX:-UseCMoveUnconditionally = HLM = P3;;;","2023-08-15 06:28;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/15274
Date: 2023-08-14 14:57:39 +0000;;;","2023-08-16 00:18;dukebot;Changeset: d46f0fb3
Author:    Emanuel Peter <epeter@openjdk.org>
Date:      2023-08-16 07:15:43 +0000
URL:       https://git.openjdk.org/jdk/commit/d46f0fb31888db75f5b2b78a162fec16dfc5d0d9
;;;",,,,,,,,,,,,,,,,,,,,,,,,
[BACKOUT] 8313632: ciEnv::dump_replay_data use fclose,JDK-8313712,5107342,Bug,Resolved,JDK,JDK,software,duke,,,P2,Fixed,thartmann,thartmann,thartmann,2023-08-03 10:53,2023-09-04 05:48,2023-10-01 09:55,2023-08-03 11:09,22,,,,,,,22,hotspot,,0,ci-replay,oracle-triage-17,oracle-triage-21,oracle-triage-22,regression,tier2,,,,,,,,,,,,,,"After JDK-8313632, we see massive failures with the compiler/ciReplay/* tests. For example:

compiler/ciReplay/TestNoClassFile.java

java.lang.Error: Can't create replay: java.lang.RuntimeException: Crash JVM exits gracefully: expected 134 to equal 0
	at compiler.ciReplay.DumpReplayBase.generateReplay(DumpReplayBase.java:90)
	at compiler.ciReplay.DumpReplayBase.runTest(DumpReplayBase.java:53)
	at compiler.ciReplay.TestNoClassFile.main(TestNoClassFile.java:42)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
	at java.base/java.lang.reflect.Method.invoke(Method.java:580)
	at com.sun.javatest.regtest.agent.MainWrapper$MainTask.run(MainWrapper.java:138)
	at java.base/java.lang.Thread.run(Thread.java:1570)
Caused by: java.lang.RuntimeException: Crash JVM exits gracefully: expected 134 to equal 0
	at jdk.test.lib.Asserts.fail(Asserts.java:594)
	at jdk.test.lib.Asserts.assertEquals(Asserts.java:205)
	at compiler.ciReplay.DumpReplayBase.generateReplay(DumpReplayBase.java:83)
	... 6 more

JavaTest Message: Test threw exception: java.lang.Error: Can't create replay: java.lang.RuntimeException: Crash JVM exits gracefully: expected 134 to equal 0
JavaTest Message: shutting down test",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8313694,,JDK-8313632,,,,,,,,,,,,,,,,,,,,,,22,,,,,,,"0|i32m4j:",9223372036854775807,b10,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2023-08-03 11:04;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/15144
Date: 2023-08-03 17:56:43 +0000;;;","2023-08-03 11:09;dukebot;Changeset: 45771479
Author:    Tobias Hartmann <thartmann@openjdk.org>
Date:      2023-08-03 18:08:29 +0000
URL:       https://git.openjdk.org/jdk/commit/4577147993c2f87e6ba298a664acad5decc968f0
;;;",,,,,,,,,,,,,,,,,,,,,,,,,
Cherry-pick WebKit 616.1 stabilization fixes,JDK-8313711,5107341,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,hmeda,hmeda,hmeda,2023-08-03 10:53,2023-09-19 03:48,2023-10-01 09:55,2023-08-07 05:34,8u391,jfx22,,,,,,jfx22,javafx,,0,CPU23_10-critical-approved,CPU23_10-critical-SQE-OK,jfx21u-fix-request,jfx21u-fix-yes,noreg-other,sn_149,sn_150,webkit-2.40,,,,,,,,,,,,Cherry-pick stabilization fixes from webkit-2.40.5,,,,,,,,,,,,JDK-8313884,JDK-8315556,JDK-8313886,JDK-8313888,JDK-8313919,JDK-8313920,JDK-8313887,JDK-8313921,,,,,,,,JDK-8314520,,,,,,,,,,,,,,,JDK-8310681,,,,,,,,,,,,,,,,,,,,,,,,,"0|i32m4b:",9223372036854775807,b04,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@5a8b92bd,,,,,,,,,"2023-08-03 11:12;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jfx/pull/1196
Date: 2023-08-03 17:54:48 +0000;;;","2023-08-07 05:34;dukebot;Changeset: af8950e7
Author:    Hima Bindu Meda <hmeda@openjdk.org>
Date:      2023-08-07 12:33:11 +0000
URL:       https://git.openjdk.org/jfx/commit/af8950e7ebfa1f0705cc9ef5ab50ce25571c00d4
;;;","2023-08-07 07:10;hmeda;Fix Request JFX21u:
Request to approve backport of this commit to jfx21u.
Clean backport. Needed to keep native WebKit code in sync;;;","2023-08-07 07:12;kcr;Approved to go into jfx21u for 21.0.1 ;;;","2023-08-07 07:31;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jfx21u/pull/6
Date: 2023-08-07 14:23:50 +0000;;;","2023-09-01 11:26;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jfx17u/pull/142
Date: 2023-09-01 18:22:22 +0000;;;",,,,,,,,,,,,,,,,,,,,,
[XWayland][Screencast] consequent getPixelColor calls are slow,JDK-8313697,5107327,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,azvegint,azvegint,azvegint,2023-08-03 08:35,2023-08-24 00:22,2023-10-01 09:55,2023-08-18 03:45,21,22,,,,,,22,client-libs,,0,sn_149,sn_150,wayland,wayland_screencast,wayland_x11_compatibility,,,,,,,,,,,,,,,"Some tests are calling getPixelColor in a loop
e.g.
        for (int i = 0; i < 50; i++) {
            for (int j = 0; j < 50; j++) {
                robot.getPixelColor(i, j);
            }
        }
While this is not the most efficient way to get data from the screen (you can use createScreenCapture), it can be sped up.

Currently we create a screencast session from scratch for each call to getPixelColor or createScreenCapture.
To speed it up, we can close the session after some reasonable time (2s for example) if there is no new screen capture attempt.

We should also change the tests to use createScreenCapture in such cases.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i32m17:",9223372036854775807,b12,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@5a9b3fd3,,,,,,,,,"2023-08-11 10:27;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/15250
Date: 2023-08-11 17:19:40 +0000;;;","2023-08-18 03:45;dukebot;Changeset: 2f04bc5f
Author:    Alexander Zvegintsev <azvegint@openjdk.org>
Date:      2023-08-18 10:44:20 +0000
URL:       https://git.openjdk.org/jdk/commit/2f04bc5f934887029d8bcc13cf722d8498a35120
;;;",,,,,,,,,,,,,,,,,,,,,,,,,
Introduce an internal utility for the Damerau–Levenshtein distance calculation,JDK-8313693,5107323,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,prappo,prappo,prappo,2023-08-03 08:05,2023-08-14 11:56,2023-10-01 09:55,2023-08-09 09:10,22,,,,,,,22,tools,,1,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8288660,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i32m0b:",9223372036854775807,b10,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4dca67bd,,,,,,,,,"2023-08-04 06:36;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/15157
Date: 2023-08-04 13:29:45 +0000;;;","2023-08-09 09:10;dukebot;Changeset: 593ba2fe
Author:    Pavel Rappo <prappo@openjdk.org>
Date:      2023-08-09 16:08:23 +0000
URL:       https://git.openjdk.org/jdk/commit/593ba2fe47ce6bd341ee6e1329aa02d4b472fb60
;;;",,,,,,,,,,,,,,,,,,,,,,,,,
use close after failing os::fdopen in vmError and ciEnv,JDK-8313691,5107319,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,mbaesken,mbaesken,mbaesken,2023-08-03 06:09,2023-08-30 05:55,2023-10-01 09:55,2023-08-08 23:55,21,22,,,,,,22,hotspot,,0,ci-replay,jdk21u-fix-request,jdk21u-fix-SQE-ok,jdk21u-fix-yes,os,,,,,,,,,,,,,,,We currently use os::fdopen in vmError.cpp but seems we miss calling close afterwards in case of failing fdopen.,,,,,,,,,,,,JDK-8315370,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8313632,,,,,,,,,,,generic,,,,,,,,,generic,,,,,"0|i32lzf:",9223372036854775807,b10,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,,,"2023-08-03 07:09;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/15139
Date: 2023-08-03 14:02:22 +0000;;;","2023-08-08 23:55;dukebot;Changeset: 96304f37
Author:    Matthias Baesken <mbaesken@openjdk.org>
Date:      2023-08-09 06:54:15 +0000
URL:       https://git.openjdk.org/jdk/commit/96304f37f8344b0c0e271ff9cda84961519d5109
;;;","2023-08-28 08:18;mbaesken;jdk21 backport request
I would like to have the patch in jdk21u as well because the issue is present there too. The patch is low risk and applies cleanly.;;;","2023-08-28 08:20;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk21u/pull/113
Date: 2023-08-28 15:15:23 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,
C2: compiler/c2/irTests/scalarReplacement/AllocationMergesTests.java fails intermittently with -XX:-TieredCompilation,JDK-8313689,5107317,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,cslucas,chagedorn,chagedorn,2023-08-03 05:36,2023-09-04 04:32,2023-10-01 09:55,2023-08-22 01:01,22,,,,,,,22,hotspot,,0,c2,c2-ea,intermittent,noreg-self,oracle-triage-21,oracle-triage-22,regression,tier2,tier3,,,,,,,,,,,"On some machines (x64 and aarch), compiler/c2/irTests/scalarReplacement/AllocationMergesTests.java is failing due to allocations that could not have been removed with -XX:-TieredCompilation

Playing around with different warm-ups (i.e. -DWarmup=1000,2000,10000 etc.) I get a different amount of failures. This suggests that on some machines, the number of warm-ups is enough for the test to work while on others it's not. However, when choosing a very high number of warm-ups (i.e. 10000), I even got 5 failures. 

We should check the root cause of being unable to remove allocations with a different number of warm-up iterations and fix the test/code accordingly.

Output:

Compilation of Failed Method
----------------------------
1) Compilation of ""int compiler.c2.irTests.scalarReplacement.AllocationMergesTests.testNoEscapeWithLoadInLoop_C2(boolean,int,int)"":
> Phase ""PrintOptoAssembly"":
----------------------- MetaData before Compile_id = 374 ------------------------
{method}
 - this oop:          0x00007f1a134210d8
 - method holder:     'compiler/c2/irTests/scalarReplacement/AllocationMergesTests'
 - constants:         0x00007f1a1341c000 constant pool [641] {0x00007f1a1341c000} for 'compiler/c2/irTests/scalarReplacement/AllocationMergesTests' cache=0x00007f1a13424780
 - access:            0x0  
 - flags:             0x5080   queued_for_compilation  dont_inline  has_loops_flag_init 
 - name:              'testNoEscapeWithLoadInLoop_C2'
 - signature:         '(ZII)I'
 - max stack:         5
 - max locals:        4
 - size of params:    4
 - method size:       14
 - vtable index:      13
 - i2i entry:         0x00007f1a98b50a40
 - adapters:          AHE@0x00007f1aa42061b0: 0xbaaa i2c: 0x00007f1a98bb8600 c2i: 0x00007f1a98bb86f7 c2iUV: 0x00007f1a98bb86c5 c2iNCI: 0x00007f1a98bb8731
 - compiled entry     0x00007f1a98bb86f7
 - code size:         8
 - code start:        0x00007f1a134210c0
 - code end (excl):   0x00007f1a134210c8
 - method data:       0x00007f1a13499d20
 - checked ex length: 0
 - linenumber start:  0x00007f1a134210c8
 - localvar length:   0

------------------------ OptoAssembly for Compile_id = 374 -----------------------
#
#  int ( compiler/c2/irTests/scalarReplacement/AllocationMergesTests:NotNull *, int, int, int )
#
000     N273: #	out( B1 ) <- BLOCK HEAD IS JUNK  Freq: 1
000     movl    rscratch1, [j_rarg0 + oopDesc::klass_offset_in_bytes()]	# compressed klass
	decode_klass_not_null rscratch1, rscratch1
	cmpq    rax, rscratch1	 # Inline cache check
	jne     SharedRuntime::_ic_miss_stub
	nop	# nops to align entry point

        nop 	# 4 bytes pad for loops and calls

020     B1: #	out( B12 B2 ) <- BLOCK HEAD IS JUNK  Freq: 1
020     # stack bang (304 bytes)
	pushq   rbp	# Save rbp
	subq    rsp, #64	# Create frame

03a     movl    [rsp + #12], R8	# spill
03f     movl    [rsp + #8], RCX	# spill
043     movq    [rsp + #0], RSI	# spill
047     movl    [rsp + #16], RDX	# spill
04b     testl   RDX, RDX
04d     je     B12  P=0.100000 C=-1.000000

053     B2: #	out( B13 B3 ) <- in( B1 )  Freq: 0.9
053     # TLS is in R15
053     movq    RAX, [R15 + #456 (32-bit)]	# ptr
05a     movq    R10, RAX	# spill
05d     addq    R10, #24	# ptr
061     cmpq    R10, [R15 + #472 (32-bit)]	# raw ptr
068     jae,u   B13  P=0.000100 C=-1.000000

06e     B3: #	out( B4 ) <- in( B2 )  Freq: 0.89991
06e     movq    [R15 + #456 (32-bit)], R10	# ptr
075     PREFETCHW [R10 + #192 (32-bit)]	# Prefetch allocation into level 1 cache and mark modified
07d     movq    [RAX], #1	# long
084     movl    [RAX + #8 (8-bit)], narrowklass: precise compiler/c2/irTests/scalarReplacement/AllocationMergesTests$Point: 0x00007f19e81bddc0:Constant:exact *	# compressed klass ptr
08b     movl    [RAX + #12 (8-bit)], R12	# int (R12_heapbase==0)
08f     movq    [RAX + #16 (8-bit)], R12	# long (R12_heapbase==0)

093     B4: #	out( B16 B5 ) <- in( B14 B3 )  Freq: 0.9
093     
093     MEMBAR-storestore (empty encoding)
093     movq    RBP, RAX	# spill
096     # checkcastPP of RBP
096     movq    RSI, RBP	# spill
099     movl    RDX, [rsp + #12]	# spill
09d     movl    RCX, [rsp + #8]	# spill
        nop 	# 2 bytes pad for loops and calls
0a3     call,static  compiler.c2.irTests.scalarReplacement.AllocationMergesTests$Point::<init>
        # compiler.c2.irTests.scalarReplacement.AllocationMergesTests::testNoEscapeWithLoadInLoop @ bci:24 (line 949) L[0]=rsp + #0 L[1]=rsp + #16 L[2]=rsp + #8 L[3]=rsp + #12 L[4]=#ScObj0 L[5]=#0 L[6]=_ STK[0]=RBP
        # ScObj0 compiler/c2/irTests/scalarReplacement/AllocationMergesTests$Point={ [x :0]=rsp + #8, [y :1]=rsp + #12 }
        # compiler.c2.irTests.scalarReplacement.AllocationMergesTests::testNoEscapeWithLoadInLoop_C2 @ bci:4 (line 962) L[0]=rsp + #0 L[1]=rsp + #16 L[2]=rsp + #8 L[3]=rsp + #12
        # OopMap {rbp=Oop [0]=Oop off=168/0xa8}

0b0     B5: #	out( B6 ) <- in( B4 )  Freq: 0.899982
        # Block is sole successor of call
0b0     movl    R10, [RBP + #16 (8-bit)]	# int ! Field: compiler/c2/irTests/scalarReplacement/AllocationMergesTests$Point.y
0b4     movl    RAX, [RBP + #12 (8-bit)]	# int ! Field: compiler/c2/irTests/scalarReplacement/AllocationMergesTests$Point.x

0b7     B6: #	out( B8 ) <- in( B5 B12 )  Freq: 0.999982
0b7     leal    R11, [RAX + R10]
0bb     leal    R8, [R11 + #3342]
0c2     movl    R9, #3343	# int
0c8     jmp,s   B8
        nop 	# 6 bytes pad for loops and calls

0d0     B7: #	out( B8 ) <- in( B8 ) top-of-loop Freq: 903.513
0d0     movl    R9, RCX	# spill

0d3     B8: #	out( B7 B9 ) <- in( B6 B7 ) Loop( B8-B7 inner main of N10) Freq: 904.513
0d3     leal    RBX, [R9 + R11]
0d7     addl    R8, RBX	# int
0da     addl    R8, RBX	# int
0dd     addl    R8, RBX	# int
0e0     addl    R8, RBX	# int
0e3     addl    R8, RBX	# int
0e6     addl    R8, RBX	# int
0e9     addl    R8, RBX	# int
0ec     addl    R8, RBX	# int
0ef     addl    R8, RBX	# int
0f2     addl    R8, RBX	# int
0f5     addl    R8, RBX	# int
0f8     addl    R8, RBX	# int
0fb     addl    R8, RBX	# int
0fe     addl    R8, RBX	# int
101     addl    R8, RBX	# int
104     addl    R8, RBX	# int
107     addl    R8, RBX	# int
10a     addl    R8, RBX	# int
10d     addl    R8, RBX	# int
110     addl    R8, RBX	# int
113     addl    R8, RBX	# int
116     addl    R8, RBX	# int
119     addl    R8, RBX	# int
11c     addl    R8, RBX	# int
11f     addl    R8, RBX	# int
122     addl    R8, RBX	# int
125     addl    R8, RBX	# int
128     addl    R8, RBX	# int
12b     addl    R8, RBX	# int
12e     addl    R8, RBX	# int
131     addl    R8, RBX	# int
134     addl    R8, RBX	# int
137     addl    R8, #496	# int
13e     leal    RCX, [R9 + #32]
142     cmpl    RCX, #4207
148     jl,s   B7	# loop end  P=0.998894 C=20781.000000

14a     B9: #	out( B10 ) <- in( B8 )  Freq: 0.999982
14a     # castII of R9
14a     addl    R9, #32	# int

14e     B10: #	out( B10 B11 ) <- in( B9 B10 ) Loop( B10-B10 inner post of N309) Freq: 1.99996
14e     leal    RCX, [R11 + R9]
152     addl    R8, RCX	# int
155     incl    R9	# int
        nop 	# 8 bytes pad for loops and calls
160     cmpl    R9, #4234
167     jl,s   B10	# loop end  P=0.500000 C=20781.000000

169     B11: #	out( N273 ) <- in( B10 )  Freq: 0.999982
169     addl    RAX, R8	# int
16c     addl    RAX, R10	# int
16f     addq    rsp, 64	# Destroy frame
	popq    rbp
	cmpq    rsp, poll_offset[r15_thread] 
	ja      #safepoint_stub	# Safepoint: poll for GC

181     ret

182     B12: #	out( B6 ) <- in( B1 )  Freq: 0.1
182     movl    R10, R8	# spill
185     movl    RAX, RCX	# spill
187     jmp     B6

18c     B13: #	out( B15 B14 ) <- in( B2 )  Freq: 9.00149e-05
18c     movq    RSI, precise compiler/c2/irTests/scalarReplacement/AllocationMergesTests$Point: 0x00007f19e81bddc0:Constant:exact *	# ptr
196     movq    RBP, [rsp + #0]	# spill
        nop 	# 1 bytes pad for loops and calls
19b     call,static  wrapper for: _new_instance_Java
        # compiler.c2.irTests.scalarReplacement.AllocationMergesTests::testNoEscapeWithLoadInLoop @ bci:18 (line 949) L[0]=RBP L[1]=rsp + #16 L[2]=rsp + #8 L[3]=rsp + #12 L[4]=#ScObj0 L[5]=#0 L[6]=_
        # ScObj0 compiler/c2/irTests/scalarReplacement/AllocationMergesTests$Point={ [x :0]=rsp + #8, [y :1]=rsp + #12 }
        # compiler.c2.irTests.scalarReplacement.AllocationMergesTests::testNoEscapeWithLoadInLoop_C2 @ bci:4 (line 962) L[0]=RBP L[1]=rsp + #16 L[2]=rsp + #8 L[3]=rsp + #12
        # OopMap {rbp=Oop [0]=Oop off=416/0x1a0}

1a8     B14: #	out( B4 ) <- in( B13 )  Freq: 9.00131e-05
        # Block is sole successor of call
1a8     jmp     B4

1ad     B15: #	out( B17 ) <- in( B13 )  Freq: 9.00149e-10
1ad     # exception oop is in rax; no code emitted
1ad     movq    RSI, RAX	# spill
1b0     jmp,s   B17

1b2     B16: #	out( B17 ) <- in( B4 )  Freq: 9e-06
1b2     # exception oop is in rax; no code emitted
1b2     movq    RSI, RAX	# spill

1b5     B17: #	out( N273 ) <- in( B16 B15 )  Freq: 9.0009e-06
1b5     addq    rsp, 64	# Destroy frame
	popq    rbp

1ba     jmp     rethrow_stub

--------------------------------------------------------------------------------

STDERR:

Command Line:
/scratch/chagedor/jdk/open/jdk-22/fastdebug/bin/java -DReproduce=true -cp /scratch/chagedor/jdk/open/JTwork/classes/compiler/c2/irTests/scalarReplacement/AllocationMergesTests.d:/scratch/chagedor/jdk/open/test/hotspot/jtreg/compiler/c2/irTests/scalarReplacement:/scratch/chagedor/jdk/open/JTwork/classes/test/lib:/scratch/chagedor/jdk/open/JTwork/classes:/home/chagedor/jtreg/lib/javatest.jar:/home/chagedor/jtreg/lib/jtreg.jar:/home/chagedor/jtreg/lib/junit-platform-console-standalone-1.9.2.jar:/home/chagedor/jtreg/lib/testng-7.3.0.jar:/home/chagedor/jtreg/lib/jcommander-1.78.jar:/home/chagedor/jtreg/lib/guice-4.2.3.jar -Djava.library.path=. -Xbootclasspath/a:. -XX:+UnlockDiagnosticVMOptions -XX:+WhiteBoxAPI -DWarmup=2000 -XX:+CreateCoredumpOnCrash -ea -esa -XX:+UnlockExperimentalVMOptions -server -XX:-TieredCompilation -Dir.framework.server.port=37699 -XX:+UnlockDiagnosticVMOptions -XX:+ReduceAllocationMerges -XX:+TraceReduceAllocationMerges -XX:+DeoptimizeALot -XX:CompileCommand=exclude,*::dummy* -XX:+PrintCompilation -XX:+UnlockDiagnosticVMOptions -XX:+LogCompilation -XX:CompilerDirectivesFile=test-vm-compile-commands-pid-13910.log -XX:CompilerDirectivesLimit=421 -XX:-OmitStackTraceInFastThrow -DShouldDoIRVerification=true -XX:-BackgroundCompilation -XX:CompileCommand=quiet compiler.lib.ir_framework.test.TestVM compiler.c2.irTests.scalarReplacement.AllocationMergesTests

One or more @IR rules failed:

Failed IR Rules (1) of Methods (1)
----------------------------------
1) Method ""int compiler.c2.irTests.scalarReplacement.AllocationMergesTests.testNoEscapeWithLoadInLoop_C2(boolean,int,int)"" - [Failed IR rules: 1]:
   * @IR rule 1: ""@compiler.lib.ir_framework.IR(applyIfCPUFeatureAnd={}, phase={DEFAULT}, applyIf={}, applyIfCPUFeatureOr={}, applyIfCPUFeature={}, counts={}, applyIfAnd={}, failOn={""_#ALLOC#_""}, applyIfOr={}, applyIfNot={})""
     > Phase ""PrintOptoAssembly"":
       - failOn: Graph contains forbidden nodes:
         * Constraint 1: ""(.*precise .*\R((.*(?i:mov|mv|xorl|nop|spill).*|\s*)\R)*.*(?i:call,static).*wrapper for: _new_instance_Java)""
           - Matched forbidden node:
             * 18c     movq    RSI, precise compiler/c2/irTests/scalarReplacement/AllocationMergesTests$Point: 0x00007f19e81bddc0:Constant:exact *	# ptr
               196     movq    RBP, [rsp + #0]	# spill
                       nop 	# 1 bytes pad for loops and calls
               19b     call,static  wrapper for: _new_instance_Java
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8287061,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i32lyz:",9223372036854775807,b12,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2023-08-03 05:37;chagedorn;Hi [~cslucas], can you have a look at that? ;;;","2023-08-03 05:39;chagedorn;ILW = Single IR test failure, only intermittently on some machines in tier2, no workaround = MMH = P3;;;","2023-08-03 09:16;cslucas;Hi, [~chagedorn]. Thank you for pinging me. I'll take a look today.;;;","2023-08-03 23:26;chagedorn;Thanks, [~cslucas]!;;;","2023-08-21 11:18;cslucas;Hello, again Christian. I was able to reproduce all failures locally and most of them were due to RAM optimization bailing out because of the IR graph shape. The use of random values for control flow conditions was causing the IR graph to be in a random shape. I'm going to create a PR that fixes all the issues I found.;;;","2023-08-21 11:29;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/15367
Date: 2023-08-21 18:21:38 +0000;;;","2023-08-22 01:01;dukebot;Changeset: 02ef859f
Author:    Cesar Soares Lucas <cslucas@openjdk.org>
Committer: Tobias Hartmann <thartmann@openjdk.org>
Date:      2023-08-22 07:58:51 +0000
URL:       https://git.openjdk.org/jdk/commit/02ef859f79cbc2e6225998001af299ba36fe991b
;;;",,,,,,,,,,,,,,,,,,,,
Disallow combining caputreCallState with isTrivial,JDK-8313680,5107307,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,jvernee,jvernee,jvernee,2023-08-03 04:03,2023-08-07 00:18,2023-10-01 09:55,2023-08-07 00:18,repo-panama,,,,,,,,core-libs,,0,foreign-memaccess+abi,,,,,,,,,,,,,,,,,,,"Native functions that modify call state (errno) are by definition not trivial. Capturing call state would also prevent intrinsification of a trivial call.

We should disallow combining these 2 linker options.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i32lwr:",9223372036854775807,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@28ce6b78,,,,,,,,,"2023-08-04 04:05;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/panama-foreign/pull/856
Date: 2023-08-03 11:26:05 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,,,
SymbolTable can leak Symbols during cleanup,JDK-8313678,5107305,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,ogillespie,ogillespie,ogillespie,2023-08-03 03:54,2023-09-01 12:27,2023-10-01 09:55,2023-08-14 09:00,17,21,22,,,,,22,hotspot,,0,amazon-interest,classloading,jdk17u-fix-request,jdk17u-fix-yes,jdk21u-fix-request,jdk21u-fix-SQE-ok,jdk21u-fix-yes,regression,,,,,,,,,,,,"While investigating a memory leak in one of my applications, I created a simple reproducer in which the symbol table grows unbounded.

It is caused by an accidental increment of the Symbol refcount during bucket cleanup - the concurrentHashTable delete_in_bucket routine uses (abuses?) the lookup function given to it, which for symbol table increments the refcount, under the assumption that a successful lookup means a new reference.

This new test case for test/hotspot/gtest/classfile/test_symbolTable.cpp shows the issue succintly:

```
 TEST_VM(SymbolTable, test_cleanup_leak) {
   // Check that dead entry cleanup doesn't increment refcount of live entry in same bucket.

   // Create symbol and release ref, marking it available for cleanup.
   Symbol* entry1 = SymbolTable::new_symbol(""hash_collision_123"");
   entry1->decrement_refcount();

   // Create a new symbol in the same bucket, which will notice the dead entry and trigger cleanup.
   // Note: relies on SymbolTable's use of String::hashCode which collides for these two values.
   Symbol* entry2 = SymbolTable::new_symbol(""hash_collision_397476851"");

   ASSERT_EQ(entry2->refcount(), 1) << ""Symbol refcount just created is 1"";
 }
```

This test fails, entry2's refcount is actually 2 at this point because of the cleanup logic incrementing the refcount via equals. I have a patch to fix this.

Note that I observed this behaviour in a real application which churns through a lot of short-lived LambdaForms classes. I have attached a reproducer (ClassChurn.java) for the more realistic class churn scenario, where this leak (and possibly some others) can be observed. You can observe the RSS of the process growing over time, and the symbol table size can be observed growing via NativeMemoryTracking or jcmd VM.symboltable. I run it with `java -Xms200M -Xmx200m -XX:MaxMetaspaceSize=200M -XX:+AlwaysPreTouch ClassChurn.java`.",,,,,,,,,,,,JDK-8315237,JDK-8315228,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8195100,JDK-8315559,,"2023-08-03 04:31;ogillespie;ClassChurn.java;https://bugs.openjdk.org/secure/attachment/104978/ClassChurn.java",,,,,,,,,,,,,,,,,,,,,,"0|i32lwb:",9223372036854775807,b11,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,,,"2023-08-03 04:03;shade;Seems to be introduced by original JDK-8195100 in JDK 12, so it should not affect 11u and 8u.;;;","2023-08-03 04:28;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/15137
Date: 2023-08-03 11:21:27 +0000;;;","2023-08-14 09:00;dukebot;Changeset: 4b2703ad
Author:    Oli Gillespie <ogillespie@openjdk.org>
Committer: Aleksey Shipilev <shade@openjdk.org>
Date:      2023-08-14 15:58:03 +0000
URL:       https://git.openjdk.org/jdk/commit/4b2703ad39f8160264eb30c797824cc93a6b56e2
;;;","2023-08-18 09:36;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/1674
Date: 2023-08-18 16:31:51 +0000;;;","2023-08-21 01:40;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk21u/pull/73
Date: 2023-08-21 08:32:32 +0000;;;","2023-08-22 01:56;ogillespie;17u fix request. Fairly simple backport to fix small memory leak.;;;","2023-08-24 01:14;ogillespie;21u fix request. Clean backport to fix small memory leak. ;;;",,,,,,,,,,,,,,,,,,,,
Simplify shared lib name handling code in some tests,JDK-8313670,5107294,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,mbaesken,mbaesken,mbaesken,2023-08-03 00:58,2023-08-16 23:28,2023-10-01 09:55,2023-08-10 00:24,21,22,,,,,,22,hotspot,,0,,,,,,,,,,,,,,,,,,,,"There is coding e.g. in
https://github.com/openjdk/jdk/blob/master/test/jdk/jdk/jfr/event/runtime/TestNativeLibrariesEvent.java#L72
that deals with shared lib naming on different OS.
This code should be simplified.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,generic,,,,,,,,,generic,,,,,"0|i32ltv:",9223372036854775807,b11,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@42995637,,,,,,,,,"2023-08-04 03:05;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/15151
Date: 2023-08-04 09:59:41 +0000;;;","2023-08-10 00:24;dukebot;Changeset: 6dba2026
Author:    Matthias Baesken <mbaesken@openjdk.org>
Date:      2023-08-10 07:23:24 +0000
URL:       https://git.openjdk.org/jdk/commit/6dba2026d72de6a67aa0209749ded8174b088904
;;;",,,,,,,,,,,,,,,,,,,,,,,,,
Reduced chance for zero-based nKlass encoding since JDK-8296565,JDK-8313669,5107293,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,stuefe,stuefe,stuefe,2023-08-03 00:56,2023-09-12 11:17,2023-10-01 09:55,2023-08-30 10:54,22,,,,,,,22,hotspot,,0,cds,metaspace,,,,,,,,,,,,,,,,,,"In CDS dumptime or off mode, or in CDS runtime relocation (fallback) mode, we call `Metaspace::reserve_address_space_for_compressed_classes(size_t size)` to reserve space suitable for class space and CDS.

https://bugs.openjdk.org/browse/JDK-8296565 randomized the order in which that function attempts to reserve ranges. Before, preference was given to zero-based regions (below 32GB). 

Before, we almost always ran zero-based. Now, we rarely do, depending on RNG.

This only affects AARCH64 and PPC.

This will be fixed as a side effect of JDK-8312018. I opened this bug to track this specific symptom.
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8296565,,,,JDK-8312018,,,,,,,,,,,aarch64,ppc,,,,,,,,,,,,,"0|i32ltn:",9223372036854775807,b14,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,,,"2023-08-09 23:09;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/15041
Date: 2023-07-26 11:34:18 +0000;;;","2023-08-30 10:54;dukebot;Changeset: 89d18ea4
Author:    Thomas Stuefe <stuefe@openjdk.org>
Date:      2023-08-30 17:51:28 +0000
URL:       https://git.openjdk.org/jdk/commit/89d18ea40f3508f4053824fd47f0b0f85fe1d7c2
;;;",,,,,,,,,,,,,,,,,,,,,,,,,
[lworld] XBarrierSetC2::clone_at_expansion() uses wrong array copy stub for cloning flat primitive type arrays,JDK-8313667,5107291,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,chagedorn,dsimms,dsimms,2023-08-03 00:48,2023-09-05 23:44,2023-10-01 09:55,2023-09-05 23:44,repo-valhalla,,,,,,,repo-valhalla,hotspot,,0,lw4,lw5,lworld,noreg-self,zgc,,,,,,,,,,,,,,,"make exploded-test TEST_OPTS=VM_OPTIONS=""-XX:+UseZGC"" TEST=compiler/valhalla/inlinetypes/TestArrays.java

Caused by: java.lang.RuntimeException: assertEquals: expected 21990232555622 to equal 102
        at jdk.test.lib.Asserts.fail(Asserts.java:594)
        at jdk.test.lib.Asserts.assertEquals(Asserts.java:205)
        at jdk.test.lib.Asserts.assertEquals(Asserts.java:189)
        at jdk.test.lib.Asserts.assertEQ(Asserts.java:166)
        at compiler.valhalla.inlinetypes.TestArrays.verify(TestArrays.java:111)
        at compiler.valhalla.inlinetypes.TestArrays.test125_verifier(TestArrays.java:2975)
        at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)

Other failure modes:

#
# A fatal error has been detected by the Java Runtime Environment:
#
#  Internal Error (/opt/mach5/mesos/work_dir/slaves/cd627e65-f015-4fb1-a1d2-b6c9b8127f98-S141882/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/cc476274-ca1f-4500-8847-c23dda634e7f/runs/8fef2952-5b12-40e4-86c7-49432a553877/workspace/open/src/hotspot/share/gc/x/xBarrier.cpp:110), pid=220444, tid=220445
#  assert(!XAddress::is_weak_good(addr)) failed: Should not be weak good
#
# JRE version: Java(TM) SE Runtime Environment (22.0+1) (fastdebug build 22-valhalla+1-12)
# Java VM: Java HotSpot(TM) 64-Bit Server VM (fastdebug 22-valhalla+1-12, mixed mode, sharing, compressed class ptrs, z gc, linux-amd64)
# Problematic frame:
# V  [libjvm.so+0x193d188]  XBarrier::relocate(unsigned long)+0x108
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i32lt7:",9223372036854775807,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2023-09-05 01:13;chagedorn;This indeed seems to be a stub issue: We pick an oop copy stub instead of long type copy stub when expanding an ArrayCopyNode with (singlegen) ZGC. When ZGC tries to do some sanity assertion checking on oops, we sometimes get crashes because of treating long values as oops.;;;","2023-09-05 07:08;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/valhalla/pull/924
Date: 2023-09-05 14:01:09 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,,
[REDO] Relax prerequisites for java.base-jmod target,JDK-8313661,5107284,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,erikj,jpai,jpai,2023-08-02 23:22,2023-08-24 00:22,2023-10-01 09:55,2023-08-17 09:56,22,,,,,,,22,infrastructure,,0,,,,,,,,,,,,,,,,,,,,"The top level target ""java.base-jmod"" currently has all other jmod targets on the prerequisites list. This is because we store a checksum for every non upgradeable module in java.base and most of the modules aren't upgradeable.  But, since we do have upgradeable modules, those shouldn't be on the prerequisites list for java.base-jmod. 

Fixing this won't impact the build much, but certainly won't hurt either. ",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8310379,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i32lrn:",9223372036854775807,b12,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@429c566,,,,,,,,,"2023-08-02 23:24;jpai;This is a [REDO] of https://bugs.openjdk.org/browse/JDK-8310379 which had to be backed out because of a build regression with --with-jobs=1 which is noted in https://bugs.openjdk.org/browse/JDK-8313274.;;;","2023-08-14 15:13;erikj;The problem with the previous fix was that jdk.jdeps, which is a non upgradable module, depends on java.compiler, which is an upgradable module. The jmod tool wants to resolve the complete module graph given to the `--hash-modules` option and this failed with:

Error: Resolution failed: Module java.compiler not found, required by jdk.jdeps

The fix is to modify the prerequisite list for the java.base-jmod target to include the jmod targets of the transitive deps of all the non upgradable modules.;;;","2023-08-14 15:27;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/15279
Date: 2023-08-14 22:18:56 +0000;;;","2023-08-17 09:56;dukebot;Changeset: b33ff30d
Author:    Erik Joelsson <erikj@openjdk.org>
Date:      2023-08-17 16:54:36 +0000
URL:       https://git.openjdk.org/jdk/commit/b33ff30d7092893463d8c25ec277d10f3c4fda19
;;;",,,,,,,,,,,,,,,,,,,,,,,
com.sun.jndi.ldap.Connection.cleanup does not close connections on SocketTimeoutErrors,JDK-8313657,5107279,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,wxiao,rpallath,rpallath,2023-08-02 19:00,2023-09-29 04:03,2023-10-01 09:55,2023-08-14 10:39,11,17,21,22,8,,,22,core-libs,,0,8bpr-critical-approved,amazon-interest,bugdb_35557158,Internal,jdk11u-fix-request,jdk11u-fix-yes,jdk17u-fix-request,jdk17u-fix-yes,jdk21u-fix-request,jdk21u-fix-yes,,,,,,,,,,"com.sun.jndi.ldap.Connection#cleanup does not close underlying socket if the is an IOException generation in the below code.
 
This causes ldap connection build ups that get cleared only during GC.
 
This also causes issues with Ldap SSL Handshakes and causes additional delay . Even after the connection is abandoned by the Ldap client the connection is not closed. Ldap server assumes the server is active and keeps reattempting to complete the handshake for the timeout period (currently set to 300s ) .
 
com.sun.jndi.ldap.Connection#cleanup

void cleanup(Control[] reqCtls, boolean notifyParent) {
660 boolean nparent = false;
 
676 } finally {
677 try {
678 outStream.flush(); // try to perform a flush - that triggers a socket readtimeout .
679 sock.close(); // socket close is not called.
680 unpauseReader();
681 } catch (IOException ie) {
682 if (debug)
683 System.err.println(""Connection: problem closing socket: "" + ie);
684 }
 
 
Stack Triggering the timeout.
 
 at sun.security.ssl.SSLSocketImpl.access$200(java.base/SSLSocketImpl.java:76)
 at sun.security.ssl.SSLSocketImpl$AppOutputStream.write(java.base/SSLSocketImpl.java:1138)
 at java.io.BufferedOutputStream.flushBuffer(java.base/BufferedOutputStream.java:82)
 at java.io.BufferedOutputStream.flush(java.base/BufferedOutputStream.java:140)
        - locked <0x00000007dd63ea80> (a java.io.BufferedOutputStream)
 at com.sun.jndi.ldap.Connection.cleanup(java.base/Connection.java:678)
        - locked <0x00000007dd63ea98> (a com.sun.jndi.ldap.Connection)
 at com.sun.jndi.ldap.Connection.writeRequest(java.base/Connection.java:453)
 at com.sun.jndi.ldap.Connection.writeRequest(java.base/Connection.java:423)
 at com.sun.jndi.ldap.LdapClient.ldapBind(java.base/LdapClient.java:359)
        - locked <0x00000007dd63eb88> (a com.sun.jndi.ldap.LdapClient)
 at com.sun.jndi.ldap.LdapClient.authenticate(java.base/LdapClient.java:214)
        - locked <0x00000007dd63eb88> (a com.sun.jndi.ldap.LdapClient)
 at com.sun.jndi.ldap.LdapCtx.connect(java.base/LdapCtx.java:2895)
        - locked <0x00000007dd63ebc0> (a java.lang.Object)
 at com.sun.jndi.ldap.LdapCtx.<init>(java.base/LdapCtx.java:348)
 
 
 jdk.JavaExceptionThrow {
  startTime = 19:21:23.192
  message = ""Read timed out""
  thrownClass = java.net.SocketTimeoutException (classLoader = bootstrap)
  eventThread = ""[STUCK] ExecuteThread: '239' for queue:
'weblogic.kernel.Default (self-tuning)'"" (javaThreadId
  stackTrace = [
    java.lang.Throwable.<init>(String) line: 275
    java.lang.Exception.<init>(String) line: 66
    java.io.IOException.<init>(String) line: 58
    java.io.InterruptedIOException.<init>(String) line: 64
    java.net.SocketTimeoutException.<init>(String) line: 43
    java.net.SocketInputStream.socketRead0(FileDescriptor, byte[], int, int, int)
    java.net.SocketInputStream.socketRead(FileDescriptor, byte[], int, int, int) line: 116
    java.net.SocketInputStream.read(byte[], int, int, int) line: 171
    java.net.SocketInputStream.read(byte[], int, int) line: 141
    sun.security.ssl.SSLSocketInputRecord.read(InputStream, byte[], int, int) line: 475
    sun.security.ssl.SSLSocketInputRecord.readHeader() line: 469
    sun.security.ssl.SSLSocketInputRecord.decode(ByteBuffer[], int, int) line: 159
    sun.security.ssl.SSLTransport.decode(TransportContext, ByteBuffer[], int, int, ByteBuffer[], int, int) line
    sun.security.ssl.SSLSocketImpl.decode(ByteBuffer) line: 1320
    sun.security.ssl.SSLSocketImpl.readHandshakeRecord() line: 1233
    sun.security.ssl.SSLSocketImpl.startHandshake(boolean) line: 417
    sun.security.ssl.SSLSocketImpl.ensureNegotiated(boolean) line: 837
    sun.security.ssl.SSLSocketImpl.access$200(SSLSocketImpl, boolean) line: 76
    sun.security.ssl.SSLSocketImpl$AppOutputStream.write(byte[], int, int) line: 1138
    java.io.BufferedOutputStream.flushBuffer() line: 82
    java.io.BufferedOutputStream.flush() line: 140
    com.sun.jndi.ldap.Connection.cleanup(Control[], boolean) line: 678
    com.sun.jndi.ldap.Connection.writeRequest(BerEncoder, int, boolean, int) line: 453
    com.sun.jndi.ldap.Connection.writeRequest(BerEncoder, int, boolean) line: 423
    com.sun.jndi.ldap.LdapClient.ldapBind(String, byte[], Control[], String, boolean) line: 359
    com.sun.jndi.ldap.LdapClient.authenticate(boolean, String, Object, int, String, Control[], Hashtable) line:
    com.sun.jndi.ldap.LdapCtx.connect(boolean) line: 2895
    com.sun.jndi.ldap.LdapCtx.<init>(String, String, int, Hashtable, boolean) line: 348
    com.sun.jndi.ldap.LdapCtxFactory.getLdapCtxFromUrl(String, String, LdapURL, Hashtable) line: 225
    com.sun.jndi.ldap.LdapCtxFactory.getUsingURL(String, Hashtable) line: 189
    com.sun.jndi.ldap.LdapCtxFactory.getUsingURLs(String[], Hashtable) line: 243
    com.sun.jndi.ldap.LdapCtxFactory.getLdapCtxInstance(Object, Hashtable) line: 154
    com.sun.jndi.ldap.LdapCtxFactory.getInitialContext(Hashtable) line: 84
    javax.naming.spi.NamingManager.getInitialContext(Hashtable) line: 694
    javax.naming.InitialContext.getDefaultInitCtx() line: 313
    javax.naming.InitialContext.init(Hashtable) line: 244
    javax.naming.ldap.InitialLdapContext.<init>(Hashtable, Control[]) line: 154 ",,,,,,,,,,,,JDK-8317312,JDK-8313692,JDK-8315374,JDK-8314443,JDK-8317035,JDK-8314707,JDK-8314317,JDK-8314318,JDK-8316576,JDK-8314316,,,,,,,,,,,,,,,,,JDK-8314063,,,,JDK-8315249,,,,,,,,,,,,,,,,,,,,,,,,,"0|i32lqj:",9223372036854775807,b11,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@226ed983,,,,,,,,,"2023-08-04 06:05;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/15143
Date: 2023-08-03 17:32:43 +0000;;;","2023-08-14 10:39;dukebot;Changeset: e56d3bc2
Author:    Weibing Xiao <weibing.xiao@oracle.com>
Committer: Aleksei Efimov <aefimov@openjdk.org>
Date:      2023-08-14 17:38:53 +0000
URL:       https://git.openjdk.org/jdk/commit/e56d3bc2dab3d32453b6eda66e8434953c436084
;;;","2023-08-16 07:42;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk21u/pull/64
Date: 2023-08-16 14:37:46 +0000;;;","2023-09-14 04:45;goetz;Fix request [17u]

I backport this for parity with 17.0.10-oracle.
Low risk, straight forward adding of error support.
Clean backport.
Test passes and fails without the fix. SAP nightly testing passed.;;;","2023-09-14 04:53;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/1740
Date: 2023-09-14 11:46:09 +0000;;;","2023-09-22 01:44;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk11u-dev/pull/2140
Date: 2023-09-22 08:33:25 +0000;;;","2023-09-25 19:01;andrewlu;Fix request [11u]

I backport this for parity with 11.0.22-oracle.
Clean backport.
Same with 17 backport.
Test passes and fails without the fix. SAP nightly testing passed.;;;",,,,,,,,,,,,,,,,,,,,
assert(!JvmtiExport::can_support_virtual_threads()) with -XX:-DoJVMTIVirtualThreadTransitions,JDK-8313656,5107278,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,amenkov,apangin,apangin,2023-08-02 17:44,2023-09-12 11:19,2023-10-01 09:55,2023-08-31 12:19,21,22,,,,,,22,hotspot,,0,amazon-interest,,,,,,,,,,,,,,,,,,,"This is a follow up to the discussion at https://github.com/async-profiler/async-profiler/issues/779

When DoJVMTIVirtualThreadTransitions option is off as recommended for profiling, slowdebug build crashes with the following error:

#
#  Internal Error (/home/andrei/jdk/src/hotspot/share/prims/jvm.cpp:3953), pid=737, tid=765
#  assert(!JvmtiExport::can_support_virtual_threads()) failed: sanity check
#
# JRE version: OpenJDK Runtime Environment (22.0) (slowdebug build 22-internal-adhoc.andrei.jdk)
# Java VM: OpenJDK 64-Bit Server VM (slowdebug 22-internal-adhoc.andrei.jdk, mixed mode, tiered, compressed oops, compressed class ptrs, g1 gc, linux-amd64)
# Problematic frame:
# V  [libjvm.so+0xf36710]  JVM_VirtualThreadMount+0xa9

=== Command line ===
java -XX:+UnlockExperimentalVMOptions -XX:-DoJVMTIVirtualThreadTransitions -ag
entpath:/path/to/emptyagent.so HelloVirtualThread

=== HelloVirtualThread.java ===
public class HelloVirtualThread {
    public static void main(String[] args) throws Exception {
        Thread.startVirtualThread(() -> System.out.println(""hello"")).join();
    }
}

=== emptyagent.c ===
#include <jvmti.h>

int Agent_OnLoad(JavaVM* vm, char* options, void* reserved) {
    jvmtiEnv* jvmti;
    (*vm)->GetEnv(vm, (void**)&jvmti, JVMTI_VERSION_21);

    jvmtiCapabilities capabilities = {0};
    (*jvmti)->AddCapabilities(jvmti, &capabilities);

    return 0;
}
===

Note that the agent calls AddCapabilities() with no capabilities set, but according to the triggered assertion JvmtiExport::can_support_virtual_threads() is true.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i32lqb:",9223372036854775807,b14,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@661b156a,,,,,,,,,"2023-08-09 18:50;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/15219
Date: 2023-08-10 01:45:47 +0000;;;","2023-08-31 12:19;dukebot;Changeset: b38bcae1
Author:    Alex Menkov <amenkov@openjdk.org>
Date:      2023-08-31 19:18:18 +0000
URL:       https://git.openjdk.org/jdk/commit/b38bcae1bad399d0a3ffc091835bf89140550bc2
;;;",,,,,,,,,,,,,,,,,,,,,,,,,
Test WaitNotifySuspendedVThreadTest.java timed out,JDK-8313654,5107276,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,lmesnik,dholmes,dholmes,2023-08-02 17:03,2023-08-16 23:29,2023-10-01 09:55,2023-08-10 08:20,22,,,,,,,22,hotspot,,0,tier1,tier7,,,,,,,,,,,,,,,,,,"Possibly a different manifestation of JDK-8313570

----------System.out:(9/354)----------
setting event callbacks ...
setBreakpoint: started
setBreakpoint: finished
Main thread: suspending virtual and carrier threads
Main thread: calling monitor.notifyAll()
Main thread: resuming virtual thread
Main thread: before monitor_completed.wait()
Breakpoint: before monitor.wait(): methBreakpoint in virtual thread
Timeout refired 1200 times
----------System.err:(0/0)----------
----------rerun:(51/7397)*----------",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8313570,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i32lpv:",9223372036854775807,b11,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@661b156a,,,,,,,,,"2023-08-08 12:03;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/15196
Date: 2023-08-08 18:50:25 +0000;;;","2023-08-10 08:20;dukebot;Changeset: 9b532511
Author:    Leonid Mesnik <lmesnik@openjdk.org>
Date:      2023-08-10 15:18:57 +0000
URL:       https://git.openjdk.org/jdk/commit/9b53251131c67b1abb69b59eb66a1a133acc41d9
;;;",,,,,,,,,,,,,,,,,,,,,,,,,
Add 'final' keyword to public property methods in controls,JDK-8313651,5107272,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,angorya,angorya,angorya,2023-08-02 14:20,2023-09-15 10:16,2023-10-01 09:55,2023-09-11 11:05,jfx20,,,,,,,jfx22,javafx,,0,sn_150,sn_151,sn_152,,,,,,,,,,,,,,,,,"Noticed during triage of JDK-8313635 that in ComboBox and other controls the properties (those that are created during initialization), and their corresponding methods such as get*Property(), set*(), get*(), is*() should be declared as final.

Perhaps this should also apply to Node.hasProperties() and other controls that declare getProperties() and hasProperties(), see JDK-8313650 , although it might be done under a different JBS ticket (and discussion) since the Node properties are not javafx.beans properties.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8314581,,,,,,,,,,,,,JDK-8271083,JDK-8313635,JDK-8313650,,,,,,,,,,,,,,,,,,,,,,,"0|i32loz:",9223372036854775807,b09,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@67282485,,,,,,,,,"2023-08-02 15:10;kcr;I changed the title slightly to reflect that the important part of this change is to make all public property methods -- meaning xxxProperty(), setXxx(), and getXxx() -- final, regardless of whether or not the private property field is final.

If we can make some of the private property fields private, so much the better. That won't be reflected in the CSR (since it is just an implementation detail), but is good cleanup.;;;","2023-08-18 14:44;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jfx/pull/1213
Date: 2023-08-17 23:07:14 +0000;;;","2023-09-11 11:05;dukebot;Changeset: 624fe86f
Author:    Andy Goryachev <angorya@openjdk.org>
Date:      2023-09-11 18:02:34 +0000
URL:       https://git.openjdk.org/jfx/commit/624fe86f4c22e43caa95cca03eb11230141d11da
;;;",,,,,,,,,,,,,,,,,,,,,,,,
JMH: perfasm should capture Runtime blobs,CODETOOLS-7903556,5110199,Bug,Resolved,CODETOOLS,Code Tools,software,duke,,,P4,Fixed,shade,shade,shade,2023-09-13 03:46,2023-09-21 10:54,2023-10-01 09:55,2023-09-21 10:54,,,,,,,,,tools,,0,,,,,,,,,,,,,,,,,,,,Currently perfasm resolves these blobs as `<unknown>`. We cannot easily parse them until JDK-8316178 is fixed.,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8316178,JDK-8316514,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i333r7:",9223372036854775807,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@b978723,,,,,,,,,"2023-09-21 08:04;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jmh/pull/122
Date: 2023-09-21 14:55:45 +0000;;;","2023-09-21 10:54;roboduke;Changeset: 0ac9fabc
Author:    Aleksey Shipilëv <shade@openjdk.org>
Committer: GitHub <noreply@github.com>
Date:      2023-09-21 19:52:40 +0000
URL:       https://git.openjdk.org/jmh/commit/0ac9fabcedc2fb89a0761d4d8a4a08d608dcf5ea
;;;",,,,,,,,,,,,,,,,,,,,,,,,,
jdis: incorrectly prints the NameAndType pair in the ConstantPool for the -nc option,CODETOOLS-7903555,5110152,Bug,Resolved,CODETOOLS,Code Tools,software,duke,,,P3,Fixed,lkuskov,lkuskov,lkuskov,2023-09-12 10:37,2023-09-12 12:06,2023-10-01 09:55,2023-09-12 12:06,asm_tools_8.0,,,,,,,,tools,,0,regression,,,,,,,,,,,,,,,,,,,"jdis -g -nc R.class
public super class #7 version 66:0
{
  const #1  = Method      #2.#3;
  const #2  = class       #4;
  const #3  = NameAndType #5.#6;
  const #4  = Utf8        ""java/lang/Object"";
  const #5  = Utf8        ""<init>"";
  const #6  = Utf8        ""()V"";
  const #7  = class       #8;
  const #8  = Utf8        ""R"";
  const #9  = Utf8        ""Code"";
  const #10 = Utf8        ""LineNumberTable"";
  const #11 = Utf8        ""m"";
  const #12 = Utf8        ""erz_R.jasm"";
  const #13 = Utf8        ""SourceFile"";

  public Method #5:#6
    stack  1 locals  1
  {
     0:    aload_0;
     1:    invokespecial     #1;
     4:    return;
  }
  private static Method #11:#6
    stack  0 locals  0
  {
     0:    return;
  }

  SourceFile #12;
}

jasm R.class.jasm
R.class.jasm (5:28) Error: <:> token expected
  const #3  = NameAndType #5.#6;
                                                 ^
1 error(s)

expected:
const #3  = NameAndType #5:#6;
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,b06,asm_tools_8.0,,,,,,,"0|i333gr:",9223372036854775807,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@47358cbe,,,,,,,,,"2023-09-12 12:01;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/asmtools/pull/66
Date: 2023-09-12 18:55:56 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,,,
Broken backward compatibility in JCov build scripts,CODETOOLS-7903550,5109777,Bug,Closed,CODETOOLS,Code Tools,software,duke,,,P2,Fixed,jvanek,shurailine,shurailine,2023-09-06 11:56,2023-09-26 05:40,2023-10-01 09:55,2023-09-26 05:40,,,,,,,,,tools,,0,,,,,,,,,,,,,,,,,,,,"Previously it was possible to specify JCov dependencies through ant properties, such as:

ant -Dasm.jar=<path on my local system> ... build

After https://github.com/openjdk/jcov/commit/ce686b19c5ae0f3937f7622ee0e5ae50ea32da30  this is no longer possible.

This is a regression.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i3315n:",9223372036854775807,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@33767a5b,,,,,,,,,"2023-09-15 07:24;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jcov/pull/43
Date: 2023-09-15 14:16:57 +0000;;;","2023-09-26 05:40;jvanek;merged;;;",,,,,,,,,,,,,,,,,,,,,,,,,
libffmpeg sample crashes JVM,CODETOOLS-7903547,5109374,Bug,Resolved,CODETOOLS,Code Tools,software,duke,,,P4,Fixed,sundar,sundar,sundar,2023-08-31 02:27,2023-08-31 03:07,2023-10-01 09:55,2023-08-31 03:07,,,,,,,,,tools,,0,,,,,,,,,,,,,,,,,,,,"libffmpeg sample crashes @ “avcodec_close” in 'finally' block.

The JVM crash is intermittent. The crash log looks as follows:
------

#
# A fatal error has been detected by the Java Runtime Environment:
#
#  SIGSEGV (0xb) at pc=0x000000013048ab56, pid=64292, tid=10243
#
# JRE version: OpenJDK Runtime Environment (22.0) (build 22-internal-adhoc.sundarajanathijegannathan.panama-foreign)
# Java VM: OpenJDK 64-Bit Server VM (22-internal-adhoc.sundarajanathijegannathan.panama-foreign, mixed mode, tiered, compressed oops, compressed class ptrs, g1 gc, bsd-amd64)
# Problematic frame:
# C  [libavcodec.58.134.100.dylib+0x780b56]  avcodec_close+0x1d
#
# No core dump will be written. Core dumps have been disabled. To enable core dumping, try ""ulimit -c unlimited"" before starting Java again
#
# If you would like to submit a bug report, please visit:
#   https://bugreport.java.com/bugreport/crash.jsp
# The crash happened outside the Java Virtual Machine in native code.
# See problematic frame for where to report the bug.
#

---------------  S U M M A R Y ------------

Command Line: --enable-native-access=org.openjdk.jextract --enable-preview --enable-native-access=ALL-UNNAMED --enable-preview -Djdk.internal.javac.source=22 -Djava.library.path=/usr/local/Cellar/ffmpeg@4/4.4.4/lib --add-modules=ALL-DEFAULT jdk.compiler/com.sun.tools.javac.launcher.Main LibffmpegMain.java /Users/sundarajanathijegannathan/Downloads/file_example_MP4_480_1_5MG.mp4

Host: ""MacBookPro16,1"" x86_64 2600 MHz, 12 cores, 32G, Darwin 22.4.0, macOS 13.3.1 (22E261)
Time: Tue Aug 29 16:37:08 2023 IST elapsed time: 2.125552 seconds (0d 0h 0m 2s)

---------------  T H R E A D  ---------------

Current thread (0x00007f9b3c008200):  JavaThread ""main""             [_thread_in_native, id=10243, stack(0x00007000037c6000,0x00007000038c6000) (1024K)]

Stack: [0x00007000037c6000,0x00007000038c6000],  sp=0x00007000038c5090,  free space=1020k
Native frames: (J=compiled Java code, j=interpreted, Vv=VM code, C=native code)
C  [libavcodec.58.134.100.dylib+0x780b56]  avcodec_close+0x1d
j  java.lang.invoke.LambdaForm$MH+0x0000000800254800.invoke(Ljava/lang/Object;JJJ)I+12 java.base@22-internal
j  java.lang.invoke.LambdaForm$MH+0x0000000800391000.invokeExact_MT(Ljava/lang/Object;JJJLjava/lang/Object;)I+23 java.base@22-internal
j  jdk.internal.foreign.abi.DowncallStub+0x0000000800254c00.invoke(Ljava/lang/foreign/SegmentAllocator;Ljava/lang/foreign/MemorySegment;Ljava/lang/foreign/MemorySegment;J)I+73 java.base@22-internal
j  java.lang.invoke.LambdaForm$DMH+0x0000000800255000.invokeStatic(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;J)I+16 java.base@22-internal
j  java.lang.invoke.LambdaForm$MH+0x000000080028c800.invoke(Ljava/lang/Object;Ljava/lang/Object;)I+52 java.base@22-internal
j  java.lang.invoke.LambdaForm$MH+0x0000000800390800.invokeExact_MT(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)I+19 java.base@22-internal
j  libffmpeg.Libffmpeg_2.avcodec_close(Ljava/lang/foreign/MemorySegment;)I+6
j  LibffmpegMain.run([Ljava/lang/String;)LLibffmpegMain$Exit;+1785
j  LibffmpegMain.main([Ljava/lang/String;)V+1",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,os_x_10.15,,,,,"0|i32yo3:",9223372036854775807,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@2791a97a,,,,,,,,,"2023-08-31 02:32;sundar;Arena is ""auto"" closed before the library specific functions are called in ""finally"" block.

https://docs.oracle.com/javase/specs/jls/se20/html/jls-14.html#jls-14.20.3.2

""The effect of the translation is to put the resource specification ""inside"" the try statement. This allows a catch clause of an extended try-with-resources statement to catch an exception due to the automatic initialization or closing of any resource.

Furthermore, all resources will have been closed (or attempted to be closed) by the time the finally block is executed, in keeping with the intent of the finally keyword.""

The sample needs to make sure that the Arena 'close' happens after the library specific cleanup calls are made.
;;;","2023-08-31 02:38;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jextract/pull/128
Date: 2023-08-31 09:33:39 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,,
Unchecked cast in Agent,CODETOOLS-7903545,5109334,Bug,Resolved,CODETOOLS,Code Tools,software,duke,,,P3,Fixed,dbessono,dbessono,dbessono,2023-08-30 13:45,2023-08-30 13:52,2023-10-01 09:55,2023-08-30 13:52,jt6.0,,,,,,,jt6.0,tools,,0,,,,,,,,,,,,,,,,,,,,"There is 

classLoaderClass = (Class<? extends ClassLoader>) Class.forName(pkg + "".AgentClassLoader2"");

in Agent source code, which could be replaced with

classLoaderClass = Class.forName(pkg + "".AgentClassLoader2"").asSubclass(ClassLoader.class);",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,CODETOOLS-7903544,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i32yf7:",9223372036854775807,b27,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@3565cd1f,,,,,,,,,"2023-08-30 13:52;roboduke;Changeset: 5c6af267
Author:    Dmitry Bessonov <dmitry.bessonov@oracle.com>
Date:      2023-08-30 21:49:39 +0000
URL:       https://git.openjdk.org/jtharness/commit/5c6af267bcaaf98356aaf393dd05e8033e9c2120
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,
Minor tweaks to the Agent source code,CODETOOLS-7903544,5109304,Bug,Resolved,CODETOOLS,Code Tools,software,duke,,,P3,Fixed,dbessono,dbessono,dbessono,2023-08-30 10:13,2023-08-30 13:45,2023-10-01 09:55,2023-08-30 10:29,jt6.0,,,,,,,jt6.0,tools,,0,,,,,,,,,,,,,,,,,,,,"com.sun.javatest.agent.Agent might :
 - use the standard Math::min API instead of its own
 - have a private inner CommandExecutor class as static
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,CODETOOLS-7903545,,CODETOOLS-7903527,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i32y8j:",9223372036854775807,b26,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@3565cd1f,,,,,,,,,"2023-08-30 10:29;roboduke;Changeset: a4d2c2fa
Author:    Dmitry Bessonov <dmitry.bessonov@oracle.com>
Date:      2023-08-30 18:22:44 +0000
URL:       https://git.openjdk.org/jtharness/commit/a4d2c2fa015a21dc603bd4a3ca603a36e0913e01
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,
jextract sample compilation scripts can avoid specifying standard include directory in Mac OS,CODETOOLS-7903542,5109096,Bug,Resolved,CODETOOLS,Code Tools,software,duke,,,P4,Fixed,sundar,sundar,sundar,2023-08-29 03:51,2023-08-29 06:16,2023-10-01 09:55,2023-08-29 06:16,,,,,,,,,tools,,0,,,,,,,,,,,,,,,,,,,,"jextract sample compilation scripts can avoid specifying standard include directory in Mac OS. After the fix CODETOOLS-7903284, jextract automatically infers standard include directory and adds the same with -I option. No need to specify standard include directory with -I option in extraction scripts for samples.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i32wyb:",9223372036854775807,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@2791a97a,,,,,,,,,"2023-08-29 04:30;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jextract/pull/127
Date: 2023-08-29 11:18:33 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,,,
"jasm: the tool ignores options: -nowarn, -strict",CODETOOLS-7903536,5108728,Bug,Resolved,CODETOOLS,Code Tools,software,duke,,,P3,Fixed,lkuskov,lkuskov,lkuskov,2023-08-23 11:14,2023-08-23 11:50,2023-10-01 09:55,2023-08-23 11:50,asm_tools_8.0,,,,,,,asm_tools_8.0,tools,,0,regression,,,,,,,,,,,,,,,,,,,"Currently the jasm output is:

$ jasm -v -nowarn -strict -fixcv 50:0-52:0 goto00101m1.jasm -d .
goto00101m1.jasm (11:36) Warning: The class file version is set to 52:0 by the option ""-fixcv 50:0-52:0""
public class goto00101m1 version 45:3 {
                                    ^
1 warning(s)

expected result:
$ jasm -v -nowarn  -fixcv 50:0-52:0 goto00101m1.jasm -d .
and for the command:
$ jasm -v -nowarn -strict -fixcv 50:0-52:0 goto00101m1.jasm -d .
goto00101m1.jasm (11:36) Error: The class file version is set to 52:0 by the option ""-fixcv 50:0-52:0""
public class goto00101m1 version 45:3 {
                                    ^
1 error(s)
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,b09,asm_tools_7.0,,,,,,,"0|i32uoj:",9223372036854775807,b06,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@47358cbe,,,,,,,,,"2023-08-23 11:30;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/asmtools/pull/63
Date: 2023-08-23 18:25:02 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,,,
JOL: Hotspot layouter assumes array bases are aligned to 4 bytes,CODETOOLS-7903532,5108704,Bug,Resolved,CODETOOLS,Code Tools,software,duke,,,P4,Fixed,shade,shade,shade,2023-08-23 04:29,2023-08-24 08:39,2023-10-01 09:55,2023-08-24 08:39,,,,,,,,,tools,,0,,,,,,,,,,,,,,,,,,,,"This is actually not true in current VMs, due to JDK-8139457. This means HotspotLayouter underestimates the array sizes. This was not caught before, because we did not have good tests for arrays.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i32uj7:",9223372036854775807,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@2ea3ea3c,,,,,,,,,"2023-08-23 04:35;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jol/pull/49
Date: 2023-08-23 11:30:48 +0000;;;","2023-08-24 08:39;shade;https://github.com/openjdk/jol/commit/8c4d7be996489676b9ff9caef83610b15c726019;;;",,,,,,,,,,,,,,,,,,,,,,,,,
"Improve accessibility in JavaTest HTML Reports - add ""summary"" attribute to the generated tables",CODETOOLS-7903529,5108424,Bug,Resolved,CODETOOLS,Code Tools,software,duke,,,P3,Fixed,dbessono,dbessono,dbessono,2023-08-20 04:03,2023-08-21 01:24,2023-10-01 09:55,2023-08-20 06:13,jt6.0,,,,,,,jt6.0,tools,,0,508,accessibility,,,,,,,,,,,,,,,,,,"To improve accessibility of the generated HTML reports/configs etc. it would be better for tables to have ""summary"" attribute provided

https://www.w3.org/TR/WCAG20-TECHS/H73.html",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,CODETOOLS-7903472,,,CODETOOLS-7903473,,,,,,CODETOOLS-7903530,JCK-7315361,,,,,,,,,,,,,,,,b25,,,,,,,,"0|i32ssz:",9223372036854775807,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@3565cd1f,,,,,,,,,"2023-08-20 06:13;roboduke;Changeset: 88bf3ffd
Author:    Dmitry Bessonov <dmitry.bessonov@oracle.com>
Date:      2023-08-20 14:12:26 +0000
URL:       https://git.openjdk.org/jtharness/commit/88bf3ffd8a3c54dce0ea27a43556a7edf8ef9415
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,
Improve JT HTML reports - quote every attribute value unconditionally,CODETOOLS-7903528,5108327,Bug,Resolved,CODETOOLS,Code Tools,software,duke,,,P3,Fixed,dbessono,dbessono,dbessono,2023-08-17 10:23,2023-08-17 10:45,2023-10-01 09:55,2023-08-17 10:45,jt6.0,,,,,,,jt6.0,tools,,0,,,,,,,,,,,,,,,,,,,,"Currently in the generated HTML reports/configs etc. the values of HTML tag attributes are quoted only if for some of its symbols Character::isLetter returns false.

It would be more reliable and more correct for HTML generation to have quoted attributes unconditionally; generally W3C recommends quotes in HTML.
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,CODETOOLS-7903527,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i32s7f:",9223372036854775807,b25,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@3565cd1f,,,,,,,,,"2023-08-17 10:45;roboduke;Changeset: a39757fd
Author:    Dmitry Bessonov <dmitry.bessonov@oracle.com>
Date:      2023-08-17 18:42:44 +0000
URL:       https://git.openjdk.org/jtharness/commit/a39757fd09c403dcbf7ef24161b2a56eca8a7721
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,
Improve accessibility in JT HTML reports - every HTML document should have `lang` attribute defined,CODETOOLS-7903527,5108302,Bug,Resolved,CODETOOLS,Code Tools,software,duke,,,P3,Fixed,dbessono,dbessono,dbessono,2023-08-17 05:26,2023-08-30 10:13,2023-10-01 09:55,2023-08-17 09:38,jt6.0,,,,,,,jt6.0,tools,,0,,,,,,,,,,,,,,,,,,,,Currently the generated HTML reports/configs etc. have <html> tag without `lang` attr,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,CODETOOLS-7903544,CODETOOLS-7903528,,CODETOOLS-7902817,,,CODETOOLS-7903473,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i32s1v:",9223372036854775807,b25,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@3565cd1f,,,,,,,,,"2023-08-17 05:40;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jtharness/pull/50
Date: 2023-08-17 12:33:11 +0000;;;","2023-08-17 09:38;roboduke;Changeset: bffb3b42
Author:    Dmitry Bessonov <dbessono@openjdk.org>
Date:      2023-08-17 16:37:49 +0000
URL:       https://git.openjdk.org/jtharness/commit/bffb3b4203ca412de67ef3492f769e4bf5faed6a
;;;",,,,,,,,,,,,,,,,,,,,,,,,,
Permit more segments in jtreg tags,CODETOOLS-7903524,5108161,Bug,Resolved,CODETOOLS,Code Tools,software,duke,,,P3,Fixed,cstein,cstein,cstein,2023-08-15 23:52,2023-08-16 08:12,2023-10-01 09:55,2023-08-16 08:12,,,,,,,,,tools,,0,,,,,,,,,,,,,,,,,,,,"jtreg-7.3.1+1 is not allowed due to last `?` resolving to [0..1] occurances.

    jtreg(?:4\.1-b[0-9]{2}|5\.[01]-b[0-9]{2}|6|-[6789](?:\.[0-9]+)?\+[0-9]+)

The `?` should be changed to `*` to allow [0..n] occurances:

    jtreg(?:4\.1-b[0-9]{2}|5\.[01]-b[0-9]{2}|6|-[6789](?:\.[0-9]+)*\+[0-9]+)",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,CODETOOLS-7903453,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i32r6j:",9223372036854775807,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@41617238,,,,,,,,,"2023-08-16 00:03;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jtreg/pull/169
Date: 2023-08-16 06:57:48 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,,,
jcov is missing versions of testing dependencies and javatest,CODETOOLS-7903520,5108043,Bug,Closed,CODETOOLS,Code Tools,software,duke,,,P2,Fixed,jvanek,jvanek,jvanek,2023-08-15 09:40,2023-08-28 05:58,2023-10-01 09:55,2023-08-28 05:58,,,,,,,,,tools,,0,,,,,,,,,,,,,,,,,,,,"```
# path to javatest library (empty value allowed if you do not need jtobserver.jar)
javatestjar = javatest.jar
# path to TestNG library
testngjar = testng.jar
# path to JCommander library
jcommanderjar = jcommander.jar
```

https://github.com/openjdk/jcov/blob/e05dff3b84b9ebcd43e6f7682351861ab0aa4ef3/build/build.properties#L35

https://github.com/openjdk/jcov/blob/e05dff3b84b9ebcd43e6f7682351861ab0aa4ef3/build/build.properties#L38

https://github.com/openjdk/jcov/blob/e05dff3b84b9ebcd43e6f7682351861ab0aa4ef3/build/build.properties#L41

Asm tools have version in jar name. That is good. In addition  there are hash-sums.
For javatest.jar, the version is missing but at least is somehow deductible.

For testng.jar and jcommander jar, there is no trace but commit date which added that. In addition, both testng.jar and jcommander.jar practically do not exists, as all theirs published  artifacts have versions in name.

I had tried to deduct the versions combo, but never suceed in passing all tests, so I guess I wrong.

The project should use maven or apache ivy to download proper deps in build time, or at least keep and comment with proper versions to download and ideally with hashsums.

",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i32qgb:",9223372036854775807,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@33767a5b,,,,,,,,,"2023-08-22 10:55;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jcov/pull/40
Date: 2023-08-22 17:51:03 +0000;;;","2023-08-28 05:58;jvanek;The PR was merged, and afaict, it is good enough now.;;;",,,,,,,,,,,,,,,,,,,,,,,,,
work around `this-escape` warnings,CODETOOLS-7903516,5107654,Bug,Resolved,CODETOOLS,Code Tools,software,duke,,,P4,Fixed,jjg,jjg,jjg,2023-08-08 11:26,2023-09-05 13:30,2023-10-01 09:55,2023-09-05 13:30,jtreg7.0,,,,,,,,tools,,0,,,,,,,,,,,,,,,,,,,,"recent versions of javac report the following false positive warning:

../src/share/classes/com/sun/javatest/regtest/util/StreamCopier.java:44: warning: [this-escape] possible 'this' escape before subclass is fully initialized
        setDaemon(true);
                 ^
error: warnings found and -Werror specified
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i32o1v:",9223372036854775807,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@41617238,,,,,,,,,"2023-08-08 12:17;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jtreg/pull/165
Date: 2023-08-08 19:13:13 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,,,
Some default env vars on Windows not set,CODETOOLS-7903515,5107643,Bug,Resolved,CODETOOLS,Code Tools,software,duke,,,P2,Fixed,cstein,cstein,cstein,2023-08-08 07:29,2023-08-17 10:14,2023-10-01 09:55,2023-08-15 00:39,jtreg7.3,,,,,,,jtreg7.3.1,tools,,0,,,,,,,,,,,,,,,,,,,,"After https://bugs.openjdk.org/browse/CODETOOLS-7903400 some tests fail when calling `System.getenv(""windir"")` on Windows machines. This is due to case-sensitivity reasons.

Related JDK is issue is: https://bugs.openjdk.org/browse/JDK-8313902",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8313902,CODETOOLS-7903518,,,,,,,,,,,,,,,,,,,,,,,,"0|i32nzf:",9223372036854775807,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@41617238,,,,,,,,,"2023-08-09 08:34;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jtreg/pull/166
Date: 2023-08-09 15:26:14 +0000;;;","2023-08-14 00:30;mbaesken;We noticed ~ 50 issues in the  serviceability  tests on Windows; those are fixed with this pr / patch above.
Example :
serviceability/sa/ClhsdbAttach.java
sun.jvm.hotspot.debugger.DebuggerException: Windbg Error: not able to get imagePath field ID!
	at jdk.hotspot.agent/sun.jvm.hotspot.debugger.windbg.WindbgDebuggerLocal.attach0(Native Method)
	at jdk.hotspot.agent/sun.jvm.hotspot.debugger.windbg.WindbgDebuggerLocal.attach(WindbgDebuggerLocal.java:129)
	at jdk.hotspot.agent/sun.jvm.hotspot.HotSpotAgent.attachDebugger(HotSpotAgent.java:636)
	at jdk.hotspot.agent/sun.jvm.hotspot.HotSpotAgent.setupDebuggerWin32(HotSpotAgent.java:534)
	at jdk.hotspot.agent/sun.jvm.hotspot.HotSpotAgent.setupDebugger(HotSpotAgent.java:366)
	at jdk.hotspot.agent/sun.jvm.hotspot.HotSpotAgent.go(HotSpotAgent.java:337)
	at jdk.hotspot.agent/sun.jvm.hotspot.HotSpotAgent.attach(HotSpotAgent.java:142)
	at jdk.hotspot.agent/sun.jvm.hotspot.CLHSDB.attachDebugger(CLHSDB.java:188)
	at jdk.hotspot.agent/sun.jvm.hotspot.CLHSDB$2.attach(CLHSDB.java:83)
	at jdk.hotspot.agent/sun.jvm.hotspot.CommandProcessor$2.doit(CommandProcessor.java:436)
	at jdk.hotspot.agent/sun.jvm.hotspot.CommandProcessor.executeCommand(CommandProcessor.java:2212)
	at jdk.hotspot.agent/sun.jvm.hotspot.CommandProcessor.executeCommand(CommandProcessor.java:2182)
	at jdk.hotspot.agent/sun.jvm.hotspot.CommandProcessor.run(CommandProcessor.java:2053)
	at jdk.hotspot.agent/sun.jvm.hotspot.CLHSDB.run(CLHSDB.java:112)
	at jdk.hotspot.agent/sun.jvm.hotspot.CLHSDB.main(CLHSDB.java:44)
	at jdk.hotspot.agent/sun.jvm.hotspot.SALauncher.runCLHSDB(SALauncher.java:281)
	at jdk.hotspot.agent/sun.jvm.hotspot.SALauncher.main(SALauncher.java:500)

Could we get a new jtreg release after this fix is in ?;;;","2023-08-14 00:52;cstein;> Could we get a new jtreg release after this fix is in ?

Yes. Plan is to get 7.3.1 out this week.;;;",,,,,,,,,,,,,,,,,,,,,,,,
