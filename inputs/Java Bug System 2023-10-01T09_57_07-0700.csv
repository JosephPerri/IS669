Summary,Issue key,Issue id,Issue Type,Status,Project key,Project name,Project type,Project lead,Project description,Project url,Priority,Resolution,Assignee,Reporter,Creator,Created,Updated,Last Viewed,Resolved,Affects Version/s,Affects Version/s,Affects Version/s,Affects Version/s,Affects Version/s,Affects Version/s,Affects Version/s,Fix Version/s,Component/s,Due Date,Votes,Labels,Labels,Labels,Labels,Labels,Labels,Labels,Labels,Labels,Labels,Labels,Labels,Labels,Description,Environment,Original Estimate,Remaining Estimate,Time Spent,Work Ratio,Σ Original Estimate,Σ Remaining Estimate,Σ Time Spent,Security Level,Inward issue link (Backport),Outward issue link (Backport),Outward issue link (Backport),Outward issue link (Backport),Outward issue link (Backport),Outward issue link (Backport),Outward issue link (Backport),Outward issue link (Backport),Outward issue link (Backport),Outward issue link (Backport),Outward issue link (Backport),Outward issue link (Backport),Inward issue link (Blocks),Outward issue link (Blocks),Outward issue link (CSR),Inward issue link (Cloners),Outward issue link (Cloners),Inward issue link (Duplicate),Inward issue link (Duplicate),Inward issue link (Duplicate),Outward issue link (Duplicate),Outward issue link (Duplicate),Outward issue link (Duplicate),Inward issue link (Relates),Inward issue link (Relates),Inward issue link (Relates),Inward issue link (Relates),Outward issue link (Relates),Outward issue link (Relates),Outward issue link (Relates),Outward issue link (Relates),Attachment,Attachment,Attachment,Attachment,Attachment,Attachment,Attachment,Attachment,Attachment,Attachment,Custom field ( Type of Bug [Challenge] ),Custom field (CPU),Custom field (CPU),Custom field (Cost of Delay),Custom field (Epic Link),Custom field (Imported),Custom field (Indexed),Custom field (Introduced In Build),Custom field (Introduced In Version),Custom field (Number of Tests Affected [Challenge]),Custom field (OS),Custom field (OS),Custom field (Oracle Evaluation),Custom field (Original story points),Custom field (Parent Link),Custom field (Rank),Custom field (Rank (Obsolete)),Custom field (Resolved In Build),Sprint,Custom field (Story Points),Custom field (Subcomponent),Custom field (Target end),Custom field (Target start),Custom field (Team),Custom field (Time Spent),Custom field (Understanding),Custom field (Value),Custom field (Verification),Custom field (external_bug),Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment
Add GitHub user masyano,SKARA-1078,5051650,Bug,Resolved,SKARA,Skara,software,darcy,,,P4,Fixed,erikj,myano,myano,2021-06-11 05:47,2021-06-11 06:12,2023-10-01 09:57,2021-06-11 06:12,,,,,,,,,admin,,0,,,,,,,,,,,,,,"Please add my github account ""masyano"".",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2t6pn:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Not possible to use 'Backport <sha>' if original bug doesn't have public sha,SKARA-1076,5051573,Bug,Resolved,SKARA,Skara,software,darcy,,,P3,Fixed,erikj,sgehwolf,sgehwolf,2021-06-10 07:40,2021-06-14 13:54,2023-10-01 09:57,2021-06-14 13:00,,,,,,,,1.0,bots,,0,,,,,,,,,,,,,,"Since using SKARA for jdk11u-dev, we've noticed that we no longer can use Oracle JDK 11u fixed bugs a ref for OpenJDK equivalents. Example bug here:
https://bugs.openjdk.java.net/browse/JDK-8251945

Pre-skara we'd just use ""8251945: SIGSEGV in PackageEntry::purge_qualified_exports()"" in the commit message and HG-updater would have been smart enough to create a backport bug on push.

With Skara we end up having the problem of needing a <sha> to reference. But those are hidden for Oracle JDK 11/8 bugs. If somebody was to create a PR referencing the already closed issue, bots would complain with ""Issue is not open."" warning. What's more, the PR gets linked as ""Review"" in the closed bug. Example PR:
https://github.com/openjdk/jdk11u-dev/pull/22

We'd need some alternative way to use such bugs for creating a backport using Skara.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2t68j:",9223372036854775807,,,,,,,,,,,,,"2021-06-10 07:41;sgehwolf;Not sure which component to use for this, so used ""libraries"".;;;","2021-06-10 11:17;kcr;If you don't have a sha hash, then can't you just do it as an ordinary PR using the main JBS bug ID? Skara will still create the backport record as needed. I'm not sure what the advantage would be of using a backport PR in the case where there is no public hash for a later code line.;;;","2021-06-10 11:37;erikj;Did the failed check actually prevent you from proceeding with the review? From what I can tell the ""Issue is not open"" is just listed as a warning and will not prevent you from integrating. The backport issue will not be created until you actually integrate, so the PR link can't go anywhere until you do so. 

Could you try just going ahead as if the warning wasn't there?;;;","2021-06-11 00:50;sgehwolf;[~kcr] I'm not sure what you mean. For JDK-8251945 that's the ""main"" bug. It has Fixed in Version ""11.0.10-oracle"" and no public sha. AFAIK, there is no equivalent bug in later JDKs as it's a 11u only problem. So https://github.com/openjdk/jdk11u-dev/pull/22 is, I believe, what you suggested and gave the warning.;;;","2021-06-11 00:57;sgehwolf;[~erikj] It doesn't prevent us from proceeding with the review. The concern was whether or not it would let us integrate or break otherwise in some weird way. We just didn't want to proceed with the warning present. What's more, the intention would be for this to be a backport of JDK-8251945 and we'd like to have the same/similar checks present as if it was a backport. Admittedly it cannot do all of them as there is no sha to begin with, but it should at least make the backport label show up. Either way, we've moved on to using JDK-8268523 instead. That's less risky.

As to the review link it added it fine to JDK-8251945 (pointing to https://github.com/openjdk/jdk11u-dev/pull/22).;;;","2021-06-11 05:35;erikj;I understand your concern and hesitation, but if possible, could you try going back to the original bug and PR and see if it works? If not with this PR, can you please try it with the next one? I'm pretty sure it will work if you just ignore the warning from reading the Skara source, but would like confirmation. If something goes wrong, we can always fix it. Without a sha, there really is nothing else that the backport checks can do, so you aren't losing out on anything. 

I do think we need a way for you to declare the PR a backport to get rid of the warning, but that shouldn't stop you from doing your work today.;;;","2021-06-11 05:55;sgehwolf;Looping in [~zgu]. Zhengyu, do you want to try what Erik said? I guess it would mean to create a new-similar one to PR#22.;;;","2021-06-11 06:02;erikj;You should be able to reopen 22 and just continue where you left off.;;;","2021-06-11 06:24;kcr;Presuming the reopened PR is integrated with no problems (and like Erik, I don't see any reason why not), I have an idea to help prevent this confusion in the future. The warning is primarily useful for the mainline jdk repo where it usually is a mistake to use a JBS bug ID that has been resolved. Perhaps we could consider adding a jcheck config parameter that could be enabled for update release repos to either soften or eliminate the warning for PRs in those repos?;;;","2021-06-11 06:33;erikj;That is one way of solving it. I was thinking of allowing either the /label command to let you add the backport label, or let the (already existing for commits) /backport command be used for adding the label on a PR. The warning text would then be altered to suggest using that command if that was the intention. We could perhaps also allow a title of ""Backport <issue>"" to initiate a backport PR without a sha.;;;","2021-06-11 06:43;kcr;In this case, I don't think the generated commit should have the Backport metadata, so it might be a bit odd to use the backport PR type. Basically the backport PR type and commit annotation is a way to say ""I'm backporting a fix and you can see the original fix HERE"". Maybe you could overload the backport PR type in the case of no sha, but I'm not sure I see the benefit. I might be missing something.
;;;","2021-06-11 06:58;erikj;From an implementation point of view, there are 2 aspects to a PR of ""backport"" type. The label ""backport"" and a PR comment with a hidden HTML comment that contains the original hash which will be put in the commit message. The ""backport"" label is used for two things:

1. Wether to print the warning about the issue not being open.
2. Wether to allow the /clean command to be run to mark a backport ""clean"".

The backport comment where the sha is recorded is used when creating the final commit message. If such a PR comment is found, then the Backport-of part of the message is added.

I do believe that having a warning that the issue you are trying to use is closed is generally a good thing. Unless you know you are doing a backport, then it's likely an error. Having some way of declaring this intent helps preventing mistakes. Implementation wise, treating the kind of change referenced above as a PR labeled as ""backport"" works fine and would provide a way of declaring that intent. It would not add the Backport-of line in the commit message as we don't have that information. I also think it makes sense to classify such a PR a backport because that is how the users think about them, and the BUG will be a backport in JBS, so it ties things better together.;;;","2021-06-11 07:36;kcr;OK, that makes sense to me. So then the question is back to the one you raised earlier: How best for contributors to indicate that a PR is a backport of a bug that doesn't have a publicly visible hash. I think your idea of recognizing ""Backport BugID"" is a good one. My only slight worry is that some will mistakenly use that form in the case where there is a publicly visible hash.;;;","2021-06-11 09:30;erikj;That is indeed a concern. I can add something that points this out in the comment that the bot adds when rewriting the title. It currently reads (where commit is a link):

""This backport pull request has now been updated with issue from the original commit.""

When initiated from an issue ID instead, it could read something like:

""This backport pull request has now been updated with the original issue, but not the original commit. If you have the original commit hash, please update the PR title with `Backport <hash>`.""
;;;","2021-06-12 07:46;kcr;Regarding your earlier comment about the ""backport"" label being used to support the '/clean' command: For the case of no public SHA hash, Skara should not allow a Committer to declare it as clean. There isn't any way for anyone -- including the contributor -- to know whether or not it is clean. For the case being covered by this fix, there isn't a public patch to look at in the first place.
;;;","2021-06-14 13:00;roboduke;Changeset: ec8b6637
Author:    Erik Joelsson <erikj@openjdk.org>
Date:      2021-06-14 19:59:51 +0000
URL:       https://git.openjdk.java.net/skara/commit/ec8b6637f3703810a51f48eb0e91b3e153175115
;;;","2021-06-14 13:40;erikj;This fix is now live. Going to update wiki. Done.;;;",,,,,,,,,,,,,,,,,
Skara should validate the commit hash of a Backport PR,SKARA-1072,5051290,Bug,Resolved,SKARA,Skara,software,darcy,,,P3,Fixed,erikj,kcr,kcr,2021-06-07 11:17,2021-06-09 07:58,2023-10-01 09:57,2021-06-09 07:58,1.0,,,,,,,1.0,bots,,0,,,,,,,,,,,,,,"A Skara backport PR is identified by the title:

Backport LONG-COMMIT-HASH

Where `LONG-COMMIT-HASH` is the 40 character hash of the commit being backported. Skara will search for this, but does not check that the commit it finds is valid. In particular, it will accept the commit hash of a commit in the PR itself, meaning the commit in the personal fork of the repo to which the fix is being backported, rather than an existing commit in an actual release repo as is intended. This can lead Skara to incorrectly mark the backport as clean and possibly to use the wrong bug ID. It will cause a bogus commit hash (one that isn't in any mainline repo) to be recorded in the final commit meta-data.
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2t4hn:",9223372036854775807,,,,,,,,,,,,,"2021-06-07 15:04;erikj;This is tricky. Currently Skara does a search on the server to find the commit from the hash value, and if something is found, that commit message is used. We can certainly check explicitly that the hash is not part of the PR itself. Any other checks I'm not sure we can really do. Can you think of any other hash that is ever likely to be considered ""clean"" when compared to the change the user has provided?;;;","2021-06-07 15:12;kcr;Hard to say. Checking that it is part of the PR might be enough for the most common cases. The only other thing I can think of is to have a list of repos that you check to see whether it is present in one of them.
;;;","2021-06-07 16:05;erikj;I think that if you manage to put in a hash for a completely unrelated repo, like say jfx instead of jdk, the bugID you match and the subsequent title of the PR should throw any user off, even if only half awake. The specific problem triggered here was that the PR change itself is likely to have the same bugId and will be guaranteed to be classed as clean. I think adding my proposed check, combined with the existing checks, should make this good enough. At least until we are proven otherwise by the next user mistake. Posting review in a few.;;;","2021-06-07 16:10;kcr;That seems a reasonable step. As you say, we can file a new issue later if it becomes a problem.;;;","2021-06-08 16:17;erikj;We found another instance of this issue, which highlighted another, related, problem. If a proposed backport (or any change for that matter, but backports seem more likely) has already been done, basically making the changes in the PR redundant when merged with the target, this wasn't handled well today. I have added a check for this as well.;;;","2021-06-09 07:58;roboduke;Changeset: 5b081a79
Author:    Erik Joelsson <erikj@openjdk.org>
Date:      2021-06-09 14:58:10 +0000
URL:       https://git.openjdk.java.net/skara/commit/5b081a7954c53ecb9e74fea4a89b039885677fbe
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,
An invalid /backport command target causes bot to fail endlessly,SKARA-1070,5051155,Bug,Resolved,SKARA,Skara,software,darcy,,,P2,Fixed,erikj,erikj,erikj,2021-06-04 06:29,2021-06-07 06:11,2023-10-01 09:57,2021-06-07 06:11,1.0,,,,,,,1.0,bots,,0,,,,,,,,,,,,,,"A user added the comment ""/backport jdk11u"" to this commit: 
https://github.com/openjdk/jdk/commit/d47a77d2d54ee8c41ef969b42b3336a646dffd7b

This is causing the PR bot to endlessly fail because it can't look up a fork for ""jdk11u"". The correct target for the backport should be jdk11u-dev, which we migrated to github the other day.

The issue I want to fix here is that the bot should realize the the error and give an appropriate response rather than fail endlessly.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2t3nn:",9223372036854775807,,,,,,,,,,,,,"2021-06-07 06:11;roboduke;Changeset: 2b30c7e0
Author:    Erik Joelsson <erikj@openjdk.org>
Date:      2021-06-07 13:11:17 +0000
URL:       https://git.openjdk.java.net/skara/commit/2b30c7e0cd2063fa7a658772cada5c1ffd6ba797
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
PR ends up in bad state if interrupted just after push,SKARA-1069,5051053,Bug,Resolved,SKARA,Skara,software,darcy,,,P3,Fixed,erikj,erikj,erikj,2021-06-03 05:39,2021-06-09 13:50,2023-10-01 09:57,2021-06-09 13:50,1.0,,,,,,,1.0,bots,,0,,,,,,,,,,,,,,"Yesterday I restarted the PR bot while it was processing https://github.com/openjdk/jdk/pull/4315. Looking at the logs, it just finished pushing the change to the JDK repo and then the bot was restarted. When it came back up, it didn't manage to continue correctly where it left off and the PR was closed with the message: 

""@jonathan-gibbons Warning! Your commit did not result in any changes! No push attempt will be made.""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2t30z:",9223372036854775807,,,,,,,,,,,,,"2021-06-04 06:00;erikj;The core of the problem here is that after pushing the commit to the target branch, the only connection between the commit and the PR is the hash that we eventually store in a comment in the PR. In the above situation, the bot was killed after the push, but before the comment was added. If that happens, there really is nothing we can do to recover on the next run of the IntegrateCommand. We could implement some very elaborate code to try to look for an integrated commit in the target branch, but this would be error prone as all we would have to go on is the commit message, and we can't be sure that wouldn't change, if for example another reviewer were to be added.

Instead, I think we need to change the order of things. When the commit is ready to be pushed, we should add a comment saying something like ""Going to push as commit <hash>"", then do the push and after that, update the commit to say ""Pushed as commit <hash>"". If we do it this way, we can easily look for the ""Going to push"" comment, and if found, we can look for that hash in the target branch and know for sure if the push happened or not. If it happened, we just update the comment, labels and close the PR. If it didn't happen, we prepare to push again and update the comment with the newly prepared hash.;;;","2021-06-07 14:15;erikj;I now have a working solution. There is a new prepush comment declaring the intent of pushing the PR. This comment will however stay around as editing it would just complicate the the code too much. The reason for this is that the real push commit is also the official reply from the command, which the PullRequestCommandWorkItem uses to track which commands have been handled. The prepush comment cannot be considered an official reply. To make this new comment a bit more meaningful, I also moved the output of any rebasing here.

I've added two new tests to exercise the scenario of interrupted integrations.;;;","2021-06-09 13:50;roboduke;Changeset: 3091beec
Author:    Erik Joelsson <erikj@openjdk.org>
Date:      2021-06-09 20:50:23 +0000
URL:       https://git.openjdk.java.net/skara/commit/3091beece5098928a554ad4dc5226259869da233
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
[Backport] Bot finds original commit in wrong repository,SKARA-1068,5050997,Bug,Resolved,SKARA,Skara,software,darcy,,,P4,Fixed,erikj,sgehwolf,sgehwolf,2021-06-02 10:58,2021-07-16 00:04,2023-10-01 09:57,2021-07-16 00:04,,,,,,,,1.0,bots,,0,,,,,,,,,,,,,,"See these PRs:
https://github.com/openjdk/jdk11u-dev/pull/8
https://github.com/openjdk/jdk11u-dev/pull/9

The comments referring to the original commit ends up pointing to the AdoptOpenJDK/openjdk-jdk mirror over openjdk/jdk official repo. See:
https://github.com/openjdk/jdk11u-dev/pull/9#issuecomment-853233285 pointing to:
https://github.com/AdoptOpenJDK/openjdk-jdk/commit/3341d361316def749c155242e6bf7fcbcb968531

It should have pointed to:
https://github.com/openjdk/jdk/commit/3341d361316def749c155242e6bf7fcbcb968531",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2t2oz:",9223372036854775807,,,,,,,,,,,,,"2021-07-15 06:54;erikj;There is no way we can really control which repository we will find the commit in (short of maintaining a priority list of repos). Skara uses the search facility of Github. I see that we do have support for limiting the search results to a specific set of organizations, and we currently aren't doing that. If we did, we could at least guarantee that it would be a repo in openjdk. ;;;","2021-07-15 07:05;sgehwolf;I think it makes sense to restrict to the 'openjdk' org. Otherwise you might be ending up with weird pull requests.;;;","2021-07-15 08:26;erikj;I agree, and I'm trying that feature out in our staging deployment with the openjdk/playground repo. Unfortunately the org filtering was broken so I have to fix the functionality too. While at it, I'm also experimenting with a simple sort on repository name length. It's pretty likely that the shortest name is the most relevant repo for a given project, and if it's not, it's probably not worse than the random repo we currently get.;;;","2021-07-16 00:04;roboduke;Changeset: e98965d4
Author:    Erik Joelsson <erikj@openjdk.org>
Date:      2021-07-16 07:03:40 +0000
URL:       https://git.openjdk.java.net/skara/commit/e98965d49dc3836ec99967aabd9f2e7848723c0b
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Add GitHub user Maran23,SKARA-1066,5050934,Bug,Resolved,SKARA,Skara,software,darcy,,,P4,Fixed,erikj,mhanl,mhanl,2021-06-01 23:49,2021-06-02 06:57,2023-10-01 09:57,2021-06-02 06:57,,,,,,,,,admin,,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2t2az:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
New prometheus labels have illegal characters,SKARA-1065,5050902,Bug,Resolved,SKARA,Skara,software,darcy,,,P2,Fixed,erikj,erikj,erikj,2021-06-01 12:21,2021-06-02 11:10,2023-10-01 09:57,2021-06-02 11:10,1.0,,,,,,,1.0,bots,,0,,,,,,,,,,,,,,"In one of the latest metrics additions, the label names were constructed as having '-' in them, which is not a valid character for prometheus labels. This needs to be replaced with '_'.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2t23v:",9223372036854775807,,,,,,,,,,,,,"2021-06-02 11:10;roboduke;Changeset: 8998a077
Author:    Erik Joelsson <erikj@openjdk.org>
Date:      2021-06-02 18:10:09 +0000
URL:       https://git.openjdk.java.net/skara/commit/8998a0771cabff68290c2a3a481e8e1ba9178b4a
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Add GitHub user RyanZhou97,SKARA-1060,5050448,Bug,Resolved,SKARA,Skara,software,darcy,,,P4,Fixed,erikj,yongzhou,yongzhou,2021-05-26 00:08,2021-05-26 05:59,2023-10-01 09:57,2021-05-26 05:59,,,,,,,,,admin,,0,,,,,,,,,,,,,,Please add mapping from RyanZhou97 GitHub user to yongzhou OpenJDK user.  Thank!,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2szeb:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
The mlbridge bot occasionally posts the same comments twice on Github,SKARA-1058,5050371,Bug,Resolved,SKARA,Skara,software,darcy,,,P4,Fixed,erikj,erikj,erikj,2021-05-25 08:57,2021-08-10 10:14,2023-10-01 09:57,2021-07-16 00:03,0.9,,,,,,,1.0,bots,,0,,,,,,,,,,,,,,"Posted on skara-dev:

Hi all,

When we send an email to reply to a RFR email, the bot will post a comment
on Github for us.
But sometimes the bot may post the same comments twice.
Please see this email[1]. We expect that the bot will post one comment to
the corresponding PR[2].
But actually, the bot posted two same comments[3][4].

It is an intermittent issue. Sometimes, the bot behaves correctly.
Even today, the bot can operate normally at one PR[5] but fails at another
PR[6][7].

Is it a known issue?
Anyway, it is good to fix it so that the redundant information won't be
generated.

[1]
https://mail.openjdk.java.net/pipermail/compiler-dev/2021-May/016981.html
[2] https://github.com/openjdk/jdk/pull/4157
[3] https://github.com/openjdk/jdk/pull/4157#issuecomment-846605316
[4] https://github.com/openjdk/jdk/pull/4157#issuecomment-846605322
[5] https://github.com/openjdk/jdk/pull/3976#issuecomment-847663710
[6] https://github.com/openjdk/jdk/pull/4167#issuecomment-847595516
[7] https://github.com/openjdk/jdk/pull/4167#issuecomment-847595538

Best Regards,
-- Guoxiong",,,,,,,,,,,,,,,,,,,,,,,,,SKARA-1129,,,,,,,,SKARA-1128,SKARA-1129,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2syx7:",9223372036854775807,,,,,,,,,,,,,"2021-05-25 08:58;erikj;We have had a lot of outages in recent days, so it's possible this is happening due to the bot application crashing. Even so, we should strive for handling it better.;;;","2021-05-25 21:57;dholmes;[~erikj] This has been happening for a while. I posted the following on our internal git/skara discussion channel on May 18:

2:25 PM
David Holmes The mail bot seems to be creating duplicate comments for mails from the mailing lists. See e.g.:
https://github.com/openjdk/jdk/pull/3991
I've seen this twice so far today.

---

but I can't say I've noticed it since.;;;","2021-06-10 18:44;dholmes;Just happened again:

https://github.com/openjdk/jdk/pull/4470;;;","2021-06-24 14:48;dholmes;https://github.com/openjdk/jdk/pull/4584
https://github.com/openjdk/jdk17/pull/130;;;","2021-06-29 14:33;dholmes;https://github.com/openjdk/jdk17/pull/159
https://github.com/openjdk/jdk17/pull/166;;;","2021-07-13 18:05;dholmes;https://github.com/openjdk/jdk/pull/4704;;;","2021-07-13 22:06;dholmes;https://github.com/openjdk/jdk/pull/4717;;;","2021-07-15 05:21;erikj;I started investigating this. Looking specifically at https://github.com/openjdk/jdk/pull/4717. It seems there are duplicate CommentPosterWorkItem instances running at the same time for the same PR.;;;","2021-07-15 05:58;erikj;This is supposed to be protected by a method ""concurrentWith(WorkItem other)"". In this particular case, the check is faulty. It checks if the PullRequest object in this WorkItem is equal to the object in the other WorkItem. This is default Object equality, and there is definitely no guarantee that they both contain the same exact object.

Looking around in other implementations of this method, there is mix of how stringent the checks are, some only check if the PullRequest.id() field is the same, but most also check something about the HostedRepository to which the PR belongs (either name or url). I think calculating the url seems a bit expensive for an equals check. 

I think this needs to be cleaned up. I propose a new method on the PullRequest interface: ""isSame(PullRequest other)"". This isn't trying to be an equals, as that's a bit hard to define here, but will just return true if both PullRequest instances are logically referring to the same hosted pull request. I will replace all uses of PullRequest.equals() and PullRequest.id().equals() with this new method for consistency.;;;","2021-07-16 00:03;roboduke;Changeset: fd42d900
Author:    Erik Joelsson <erikj@openjdk.org>
Date:      2021-07-16 07:03:02 +0000
URL:       https://git.openjdk.java.net/skara/commit/fd42d900459c2e1c9301ab341ad6f081cc0bf4b2
;;;",,,,,,,,,,,,,,,,,,,,,,,,
Mirror service is no longer syncing tags,SKARA-1056,5050354,Bug,Resolved,SKARA,Skara,software,darcy,,,P2,Fixed,erikj,erikj,erikj,2021-05-25 06:06,2021-06-10 10:44,2023-10-01 09:57,2021-06-02 13:51,0.9,,,,,,,1.0,bots,,0,,,,,,,,,,,,,,The Skara mirror bot seems to have stopped syncing tags about 3 months ago.,,,,,,,,,,,,,,,,,,,,,,,SKARA-1074,,,,,,,,,,,,,,SKARA-1077,SKARA-364,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2sytf:",9223372036854775807,,,,,,,,,,,,,"2021-05-26 06:17;erikj;This was deliberately stopped in SKARA-364. The motivation was that if bad tags are created, the mirror bot can't handle it, so we have to do manual cleanup.

I think the fix is to make tag mirroring optional through configuration so we can enable it on just the repositories where we need it.;;;","2021-05-28 14:33;erikj;We currently have two modes of mirroring repositories using the MirrorBot, either a set of branches, or everything. When limiting branches, tags are excluded, and when mirroring everything, tags are included.

I'm adding a new configuration option ""tags"": true/false. The purpose is to be able to include tags when only mirroring a set of branches. Default is false (to mimic current behavior). I can't see a use case for being able to exclude tags in the all branches case, and implementing it would add quite a bit of complexity.;;;","2021-06-02 13:51;roboduke;Changeset: f8e97f7a
Author:    Erik Joelsson <erikj@openjdk.org>
Date:      2021-06-02 20:50:51 +0000
URL:       https://git.openjdk.java.net/skara/commit/f8e97f7a9b501f754f870ca753957307c6858ab4
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
"Github check in conclusion ""stale"" not handled",SKARA-1053,5050275,Bug,Resolved,SKARA,Skara,software,darcy,,,P3,Fixed,erikj,erikj,erikj,2021-05-24 11:00,2021-05-27 05:56,2023-10-01 09:57,2021-05-27 05:56,0.9,,,,,,,0.9,bots,,0,,,,,,,,,,,,,,"In https://github.com/openjdk/jdk/pull/3583/commits, there is a github check that ended up in conclusion ""stale"", with completed_at ""null"". This is causing a NPE to be thrown in the PR bot:

java.lang.NullPointerException: text
	at java.base/java.util.Objects.requireNonNull(Objects.java:233)
	at java.base/java.time.format.DateTimeFormatter.parse(DateTimeFormatter.java:1951)
	at java.base/java.time.ZonedDateTime.parse(ZonedDateTime.java:600)
	at java.base/java.time.ZonedDateTime.parse(ZonedDateTime.java:585)
	at org.openjdk.skara.forge/org.openjdk.skara.forge.github.GitHubPullRequest.lambda$checks$9(GitHubPullRequest.java:410)
	at java.base/java.util.stream.Collectors.lambda$toMap$68(Collectors.java:1667)
	at java.base/java.util.stream.ReduceOps$3ReducingSink.accept(ReduceOps.java:169)
	at java.base/java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1625)
	at java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:484)
	at java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:474)
	at java.base/java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:913)
	at java.base/java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.base/java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:682)
	at org.openjdk.skara.forge/org.openjdk.skara.forge.github.GitHubPullRequest.checks(GitHubPullRequest.java:402)
	at org.openjdk.skara.bots.pr/org.openjdk.skara.bots.pr.CheckWorkItem.currentCheckValid(CheckWorkItem.java:109)
	at org.openjdk.skara.bots.pr/org.openjdk.skara.bots.pr.CheckWorkItem.run(CheckWorkItem.java:223)
	at org.openjdk.skara.bot/org.openjdk.skara.bot.BotRunner$RunnableWorkItem.run(BotRunner.java:90)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:304)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1130)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:630)
	at java.base/java.lang.Thread.run(Thread.java:831)",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2sybv:",9223372036854775807,,,,,,,,,,,,,"2021-05-26 13:18;erikj;Deploying this for pr-external right now to verify that it stops the NPE spam.;;;","2021-05-26 13:43;erikj;Getting the pr bot past this error now exposed the same thing for the TestInfoBotWorkItem which we run in services. Deploying there too.

java.lang.NullPointerException: text
	at java.base/java.util.Objects.requireNonNull(Objects.java:233)
	at java.base/java.time.format.DateTimeFormatter.parse(DateTimeFormatter.java:1951)
	at java.base/java.time.ZonedDateTime.parse(ZonedDateTime.java:600)
	at java.base/java.time.ZonedDateTime.parse(ZonedDateTime.java:585)
	at org.openjdk.skara.forge/org.openjdk.skara.forge.github.GitHubPullRequest.lambda$checks$9(GitHubPullRequest.java:410)
	at java.base/java.util.stream.Collectors.lambda$toMap$68(Collectors.java:1667)
	at java.base/java.util.stream.ReduceOps$3ReducingSink.accept(ReduceOps.java:169)
	at java.base/java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1625)
	at java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:484)
	at java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:474)
	at java.base/java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:913)
	at java.base/java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.base/java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:682)
	at org.openjdk.skara.forge/org.openjdk.skara.forge.github.GitHubPullRequest.checks(GitHubPullRequest.java:402)
	at org.openjdk.skara.bots.testinfo/org.openjdk.skara.bots.testinfo.TestInfoBotWorkItem.run(TestInfoBotWorkItem.java:87)
	at org.openjdk.skara.bot/org.openjdk.skara.bot.BotRunner$RunnableWorkItem.run(BotRunner.java:91)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:304)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1130)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:630)
	at java.base/java.lang.Thread.run(Thread.java:831);;;","2021-05-27 05:56;roboduke;Changeset: 2eb3dabf
Author:    Erik Joelsson <erikj@openjdk.org>
Date:      2021-05-27 12:55:58 +0000
URL:       https://git.openjdk.java.net/skara/commit/2eb3dabfb1cde7ae3d48d8168038135236a47e13
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Memory leak in RestRequestCache,SKARA-1052,5050268,Bug,Resolved,SKARA,Skara,software,darcy,,,P2,Fixed,erikj,erikj,erikj,2021-05-24 10:08,2021-05-26 06:46,2023-10-01 09:57,2021-05-26 06:46,0.9,,,,,,,0.9,libraries,,0,,,,,,,,,,,,,,"With more monitoring and investigation using JFR, I've come to the conclusion that all the bots are leaking memory to some extent. In most cases, the leak is very slow, but in the worst cases, we are looking at OOME at least once a week. 

It looks like the culprit is the RestRequestCache. After a quick inspection of the source I can't find any code responsible for cleaning out old outdated cache entries. It seems like it's just adding (and updating) new entries, never removing anything. I think we need to either add a service thread that clears out some old data every once in a while, or amortize it every once in a while when called. It shouldn't be that expensive to check if some entries are older than a certain threshold and if so, remove them.",,,,,,,,,,,,,,,,,,,,,,,,,,,SKARA-1023,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2syab:",9223372036854775807,,,,,,,,,,,,,"2021-05-24 15:50;erikj;Adding some metrics for the RestRequestCache first to collect data on this.;;;","2021-05-25 10:22;erikj;I added some metrics for the RestResponseCache and let them run in staging over night. The measurements confirm my earlier assessment that the cache is never discarding any data.;;;","2021-05-25 16:01;erikj;Leaving this patch running for staging over night to test it out. 

Metrics from over night look good. The cache size is kept in check while the average hits per minute has stayed the same as before the patch was applied.;;;","2021-05-26 06:46;roboduke;Changeset: ca8d1c3b
Author:    Erik Joelsson <erikj@openjdk.org>
Date:      2021-05-26 13:46:02 +0000
URL:       https://git.openjdk.java.net/skara/commit/ca8d1c3b817029fd083c2ff5aef0f827b96a734f
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
JCheck complains about issue already used,SKARA-1051,5050171,Bug,Resolved,SKARA,Skara,software,darcy,,,P2,Fixed,erikj,erikj,erikj,2021-05-21 11:31,2021-06-02 13:56,2023-10-01 09:57,2021-06-02 13:56,0.9,,,,,,,1.0,bots,,0,,,,,,,,,,,,,,"In the following PR, jcheck is claiming that the issue has already been used:

https://github.com/openjdk/jtreg/pull/3/checks

I can't see how it came to that conclusion, nor can I find the commits where the issue was allegedly used.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2sxor:",9223372036854775807,,,,,,,,,,,,,"2021-05-21 14:34;erikj;This looks like a bug in Skara. The duplicate bugId checker reuses an existing scratch repository to search for previous uses of the bugid. While doing these checks, the bot will first create the potential new commit from the PR in this local repository, so it has something to run the check on. These commits will then linger in the scratch repo, and if the same scratch repo gets reused, will get found when looking for duplicate bugids.

I checked the scratch repo used for the last run of this particular PR and running the same command as the jcheck check uses (found in logs) this is what I found:

$ git rev-list --format=%H%n%P%n%an%n%ae%n%aI%n%cn%n%ce%n%cI%n%B=@=@=@=@=@ --topo-order --no-abbrev --no-color --all | grep -B10 -A1 7902822
commit b047d3c13dbfa04a23f7c12a14d0e0527e70b00c
b047d3c13dbfa04a23f7c12a14d0e0527e70b00c
064337b72fb454b004d8fb07510131e0215c06de
Stefan Karlsson
stefank AT openjdk.org
2021-05-21T07:45:35+00:00
Stefan Karlsson
stefank AT openjdk.org
2021-05-21T07:45:35+00:00
7902822: Elapsed time of MainAction is including serialization wait time
=@=@=@=@=@
commit 61f29e73cd50c658a327e19d49361bd27da3dbcd
61f29e73cd50c658a327e19d49361bd27da3dbcd
5effa8c49d55b6fedcee1923ce05709d612c8fc0 064337b72fb454b004d8fb07510131e0215c06de
Stefan Karlsson
stefank AT openjdk.org
2021-05-21T09:42:17+02:00
Stefan Karlsson
stefank AT openjdk.org
2021-05-21T09:42:17+02:00
Merge remote-tracking branch 'origin/master' into 7902822_main_elapsed_time_fix
=@=@=@=@=@
--
=@=@=@=@=@
commit 6ab1fa3dde380fd43730d56a9fd09607f68446b6
6ab1fa3dde380fd43730d56a9fd09607f68446b6
1bff1e0352ed1faf8860d06fdd740102fdb425ef
Stefan Karlsson
stefank AT openjdk.org
2021-01-28T13:29:56+01:00
Stefan Karlsson
stefank AT openjdk.org
2021-01-28T13:29:56+01:00
7902822: Elapsed time of MainAction is including serialization wait time
=@=@=@=@=@
;;;","2021-05-21 15:18;erikj;After some discussion, I understand that the idea with the check is to make sure a given BugID is only used once in any particular code line. To check for this we shouldn't go through every commit in the repo, but only those that are ancestors of the commit we are checking.;;;","2021-06-02 13:56;roboduke;Changeset: bce5f6f9
Author:    Erik Joelsson <erikj@openjdk.org>
Date:      2021-06-02 20:56:22 +0000
URL:       https://git.openjdk.java.net/skara/commit/bce5f6f961069f49b340c0969bc76a7602e05f56
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Gitlab MR stuck on missing issue when unbreakable space in PR title,SKARA-1050,5050169,Bug,Resolved,SKARA,Skara,software,darcy,,,P4,Fixed,erikj,erikj,erikj,2021-05-21 11:29,2021-07-16 00:02,2023-10-01 09:57,2021-07-16 00:02,0.9,,,,,,,1.0,bots,,0,,,,,,,,,,,,,,"A user mistakenly missed a digit in the issue number when creating an MR in Gitlab. Now the MR is stuck with failing jcheck ""Commit message must refer to an issue"".

The bot did add this helpful message:

""The commit message does not reference any issue. To add an issue reference to this PR, edit the title to be of the format issue number: message.""

And the user followed it, but nothing has happened for over 2h.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2sxob:",9223372036854775807,,,,,,,,,,,,,"2021-05-21 14:02;erikj;I found the issue. The user had put an unbreakable space between the : and the start of the bug synopsis in the title. The Skara parser did not know how to handle this and so could not figure out what the BugID was. I don't think there is anything to fix in Skara.

Maybe we could add a general check for unbreakable space in the title and add an error message for that specifically. I don't think we want any such characters in our commit messages.;;;","2021-07-16 00:02;roboduke;Changeset: 9b0ca380
Author:    Erik Joelsson <erikj@openjdk.org>
Date:      2021-07-16 07:01:41 +0000
URL:       https://git.openjdk.java.net/skara/commit/9b0ca3802811a7025b8847cb97ceaac334bd1256
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Watchdog should change health status to unhealthy,SKARA-1049,5050162,Bug,Resolved,SKARA,Skara,software,darcy,,,P3,Fixed,erikj,erikj,erikj,2021-05-21 10:35,2021-05-24 06:30,2023-10-01 09:57,2021-05-24 06:30,0.9,,,,,,,0.9,bots,,0,skara-outage,,,,,,,,,,,,,"Today we had an outage where the disk that some of the bots were using for data stopped working. This caused everything to grind to a halt blocked on IO, except for the health status endpoint, which happily continued serving 200 results. After a while, the watchdog hit its timeout and called System.exit(1), which made no difference as the JVM process couldn't go down.

I want to change the health status endpoint so that when the watchdog hits, it also flips the health status to unhealthy. This will make us react faster to this situation next time.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2sxmr:",9223372036854775807,,,,,,,,,,,,,"2021-05-24 06:30;roboduke;Changeset: bcf27471
Author:    Erik Joelsson <erikj@openjdk.org>
Date:      2021-05-24 13:30:20 +0000
URL:       https://git.openjdk.java.net/skara/commit/bcf27471dc8894475c1b298878b05e60b31ba131
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Missing integration comment causes mlbridge to throw exceptions,SKARA-1048,5050084,Bug,Resolved,SKARA,Skara,software,darcy,,,P4,Fixed,erikj,erikj,erikj,2021-05-20 11:18,2021-08-30 07:32,2023-10-01 09:57,2021-08-30 07:32,0.9,,,,,,,1.0,bots,,0,,,,,,,,,,,,,,"This PR in the jdk project is missing the integration comment:

https://github.com/openjdk/jdk/pull/3214

It was integrated back in March, so this isn't a big issue as everything else looks correct. The problem is that today, the author removed the source branch of the PR from his personal fork, which counted as touching the PR, which in turn made mlbridge include it in its query for PRs to process. Normally this isn't a problem, but since this PR has a bad state, mlbridge triggers an exception, which will cause an endless rerun and rethrowing of this exception, sounding the alarm to admins.

This alarm stopped sounding at 13:04 UTC May 20, just a couple of hours later. I'm not yet sure of why, but here is my best guess. Mlbridge has two modes of fetching PRs for processing:

1. A ""full"" fetch which gets all currently open PRs. This seems to happen once every 10 minutes.
2. The rest of the time, it fetches all PRs, both open and closed, that have been touched in the last 14 days, BUT limited to the first ""page"" of results.

I'm yet to better understand the page concept here, but I'm guessing that enough other PRs got touched so that jdk#3214 no longer fits in the first page of results.

The main issue here is that we can sometimes resurrect bad PRs that cause alarms to be triggered. This issue is about putting something in place to either track PRs that just should not be processed further, or to be more lenient against errors like this.

Another side issue, that should probably be handled separately, is looking into this way of querying for PRs as it seems closed PRs risk getting starved out from further processing arbitrarily.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2sx5f:",9223372036854775807,,,,,,,,,,,,,"2021-05-20 11:19;erikj;Stacktrace of error thrown:
java.lang.RuntimeException: PR https://git.openjdk.java.net/jdk/pull/3214 has integrated label but no integration comment
	at org.openjdk.skara.bots.mlbridge/org.openjdk.skara.bots.mlbridge.ReviewArchive.generateArchiveItems(ReviewArchive.java:191)
	at org.openjdk.skara.bots.mlbridge/org.openjdk.skara.bots.mlbridge.ReviewArchive.generateNewEmails(ReviewArchive.java:310)
	at org.openjdk.skara.bots.mlbridge/org.openjdk.skara.bots.mlbridge.ArchiveWorkItem.run(ArchiveWorkItem.java:372)
	at org.openjdk.skara.bot/org.openjdk.skara.bot.BotRunner$RunnableWorkItem.run(BotRunner.java:90)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:304)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1130)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:630)
	at java.base/java.lang.Thread.run(Thread.java:831);;;","2021-07-16 04:12;erikj;This can also happen as a race when the PR bot first adds the integrated label and then adds the comment. These actions need to happen in that order. I don't think the mlbridge needs to be responsible for verifying the state of a PR. If the comment isn't there, then just don't continue processing the PR. When/if the comment is eventually added, that's the time to send the integrated email.;;;","2021-08-30 07:32;roboduke;Changeset: e8336a41
Author:    Erik Joelsson <erikj@openjdk.org>
Date:      2021-08-30 14:32:30 +0000
URL:       https://git.openjdk.java.net/skara/commit/e8336a41db8d7ccc969bba1505c7b69a1bdc4cfc
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Add GitHub user forax,SKARA-1047,5049956,Bug,Resolved,SKARA,Skara,software,darcy,,,P4,Fixed,erikj,forax,forax,2021-05-19 07:37,2021-05-19 10:47,2023-10-01 09:57,2021-05-19 08:15,,,,,,,,,admin,,0,,,,,,,,,,,,,,"Hi,
can you associate my github name forax with my openjdk name forax (Remi Forax).",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2swcz:",9223372036854775807,,,,,,,,,,,,,"2021-05-19 10:47;forax;Thanks Erik !;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Watchdog causing multiple restarts for mlbridge,SKARA-1042,5049561,Bug,Resolved,SKARA,Skara,software,darcy,,,P3,Fixed,erikj,erikj,erikj,2021-05-13 14:22,2021-05-21 15:28,2023-10-01 09:57,2021-05-21 15:28,0.9,,,,,,,0.9,bots,,0,,,,,,,,,,,,,,"When mlbridge is restarted after having the scratch dirs cleared out, it hits a restart loop with the Watchdog. Today I have observed a 20 minute restart cycle, but the cycle is getting longer and longer after a while, so we will eventually reach a steady state.

The Watchdog is hard coded to restart the java process if it hasn't been pinged within 10 minutes since last time. After SKARA-1012, cloning repos takes longer than before, so my guess is that now it takes long enough so that all executors get stuck for more than 10 minutes at the same time.

I think we need to make this timeout configurable so it can be adapted for different bot runner configurations.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2stxf:",9223372036854775807,,,,,,,,,,,,,"2021-05-21 15:28;roboduke;Changeset: c1f86979
Author:    Erik Joelsson <erikj@openjdk.org>
Date:      2021-05-21 22:28:35 +0000
URL:       https://git.openjdk.java.net/skara/commit/c1f869791e71a25c9b7e9f057a11a961b76ef37f
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Add GitHub user eamonnmcmanus,SKARA-1041,5049557,Bug,Resolved,SKARA,Skara,software,darcy,,,P4,Fixed,erikj,emcmanus,emcmanus,2021-05-13 12:50,2021-05-13 13:54,2023-10-01 09:57,2021-05-13 13:54,,,,,,,,,admin,,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2stwj:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Crash in webrev command,SKARA-1040,5049550,Bug,Resolved,SKARA,Skara,software,darcy,,,P4,Fixed,erikj,erikj,erikj,2021-05-13 10:13,2021-07-16 00:00,2023-10-01 09:57,2021-07-16 00:00,0.9,,,,,,,1.0,cli,,0,,,,,,,,,,,,,,"$ git skara webrev HEAD~1..HEAD
Exception in thread ""main"" java.nio.file.NoSuchFileException: HEAD~1..HEAD
	at java.base/sun.nio.fs.UnixException.translateToIOException(UnixException.java:92)
	at java.base/sun.nio.fs.UnixException.rethrowAsIOException(UnixException.java:106)
	at java.base/sun.nio.fs.UnixException.rethrowAsIOException(UnixException.java:111)
	at java.base/sun.nio.fs.UnixFileSystemProvider.newByteChannel(UnixFileSystemProvider.java:219)
	at java.base/java.nio.file.Files.newByteChannel(Files.java:375)
	at java.base/java.nio.file.Files.newByteChannel(Files.java:426)
	at java.base/java.nio.file.spi.FileSystemProvider.newInputStream(FileSystemProvider.java:420)
	at java.base/java.nio.file.Files.newInputStream(Files.java:160)
	at java.base/java.nio.file.Files.newBufferedReader(Files.java:2916)
	at java.base/java.nio.file.Files.readAllLines(Files.java:3396)
	at java.base/java.nio.file.Files.readAllLines(Files.java:3436)
	at org.openjdk.skara.cli/org.openjdk.skara.cli.GitWebrev.generate(GitWebrev.java:401)
	at org.openjdk.skara.args/org.openjdk.skara.args.Command.main(Command.java:54)
	at org.openjdk.skara.args/org.openjdk.skara.args.MultiCommandParser.lambda$parse$3(MultiCommandParser.java:66)
	at org.openjdk.skara.cli/org.openjdk.skara.cli.GitWebrev.main(GitWebrev.java:502)
	at org.openjdk.skara.cli/org.openjdk.skara.cli.GitSkara.main(GitSkara.java:231)",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2stuz:",9223372036854775807,,,,,,,,,,,,,"2021-07-16 00:00;roboduke;Changeset: db61a394
Author:    Erik Joelsson <erikj@openjdk.org>
Date:      2021-07-16 06:59:56 +0000
URL:       https://git.openjdk.java.net/skara/commit/db61a394d4b579f1c32561e2c8e0dbd82a1d13cc
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Add GitHub user manukumarvs,SKARA-1038,5049514,Bug,Resolved,SKARA,Skara,software,darcy,,,P4,Fixed,erikj,mvs,mvs,2021-05-13 02:25,2021-05-13 05:52,2023-10-01 09:57,2021-05-13 05:52,,,,,,,,,admin,,0,,,,,,,,,,,,,,"I am already an OpenJDK Author: mvs, please add my GitHub user manukumarvs to this account.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2stmz:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Add GitHub user <kkuabhis>,SKARA-1037,5049506,Bug,Resolved,SKARA,Skara,software,darcy,,,P4,Fixed,erikj,kabhishek,kabhishek,2021-05-12 23:36,2021-05-13 05:51,2023-10-01 09:57,2021-05-13 05:51,,,,,,,,,admin,,0,,,,,,,,,,,,,,Need my account to be associated with Github.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2stl7:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Race when creating backports for bug spanning multiple repos,SKARA-1035,5049447,Bug,Resolved,SKARA,Skara,software,darcy,,,P4,Fixed,vkulkarni,erikj,erikj,2021-05-12 09:52,2023-02-21 10:14,2023-10-01 09:57,2023-02-21 10:14,0.9,,,,,,,1.0,bots,,0,skara-alarm,starter,,,,,,,,,,,,"When a fix is integrated in multiple repos at the same time (typically open and Oracle closed), the Skara notifier bots seem to often end up in a race for creating a suitable backport record, as separate threads are processing each repo concurrently. While this isn't causing any data loss or corruption, we currently get a SEVERE notification each time it happens. I think we need to more actively handle this situation more gracefully to avoid notifying admins when there really is no problem.

I think a reasonable strategy would be to have a fallback when backport creation fails, to check again if it already exists, and if so get and return the existing backport instead.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2st83:",9223372036854775807,,,,,,,,,,,,,"2023-02-15 13:16;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/skara/pull/1474
Date: 2023-02-15 21:14:57 +0000;;;","2023-02-15 17:45;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/skara/pull/1476
Date: 2023-02-16 01:44:21 +0000;;;","2023-02-21 10:14;roboduke;Changeset: a80b1d2f
Author:    Vijay Kulkarni <vijay.s.kulkarni@oracle.com>
Committer: Zhao Song <zsong@openjdk.org>
Date:      2023-02-21 18:13:20 +0000
URL:       https://git.openjdk.org/skara/commit/a80b1d2f7179d86a8719d053b5d20a171295d195
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Add GitHub user jpbempel,SKARA-1034,5049445,Bug,Resolved,SKARA,Skara,software,darcy,,,P4,Fixed,erikj,jpbempel,jpbempel,2021-05-12 09:31,2021-05-12 09:54,2023-10-01 09:57,2021-05-12 09:54,,,,,,,,,admin,,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2st7n:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Skara isn't aware jmc master is 8.1.0,SKARA-1033,5049426,Bug,Resolved,SKARA,Skara,software,darcy,,,P2,Fixed,erikj,hirt,hirt,2021-05-12 07:45,2021-05-13 06:02,2023-10-01 09:57,2021-05-12 08:28,,,,,,,,,admin,,0,,,,,,,,,,,,,,I think we may need to change something to make Skara aware that the jmc master is currently for the 8.1.0 development. It keeps creating backport issues in Jira and closing them whenever we commit something on an issue for 8.1.0.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,SKARA-1039,JMC-7256,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2st3f:",9223372036854775807,,,,,,,,,,,,,"2021-05-12 08:22;erikj;There are two ways to configure what version in JBS a certain branch in a repository should correspond to for Skara. Either do it like JDK mainline (and JMC currently does) through a server side config in Skara. This requires the project maintainer to file an admin request on Skara to get it updated every time they wish to change the associated version. The other way is to control this yourselves through a property in .jcheck/conf (like the 13u and 15u JDK update repos do).

For an example of how jdk15u does it, see https://github.com/openjdk/jdk15u-dev/blob/master/.jcheck/conf. All you need is a ""version=8.1.0"" under the [general] section. After adding this for all affected branches, you would then file an admin issue for Skara to remove the server side config.

For now, I will change the setting for the master branch to 8.1.0. Is there any other branch for which you would like a different fixVersion?
;;;","2021-05-12 19:05;hirt;Property in .jcheck/conf sounds very convenient. I'll open an issue for this.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
"Lots of ""uncleanable"" repos found in scratch dirs",SKARA-1030,5049333,Bug,Resolved,SKARA,Skara,software,darcy,,,P3,Fixed,erikj,erikj,erikj,2021-05-11 16:16,2021-05-13 05:55,2023-10-01 09:57,2021-05-13 05:55,0.9,,,,,,,0.9,bots,,0,skara-alarm,,,,,,,,,,,,,"After fixing SKARA-1012, a new similar problem has appeared. Now we frequently get ""uncleanable"" repos in the bot scratch dirs. The error messages look like this:

Invalid local repository detected (uncleanable) - preserved in: /home/bots/scratch/scratch-26/mlbridge-mergebase/openjdk/jfx-uncleanable-859b698e-e593-4621-ad94-5de33032ba9c

The failing git command is ""git reset --hard"" which fails with:

fatal: Unable to create '/home/bots/scratch/scratch-58/mlbridge-mergebase/openjdk/panama-foreign-uncleanable-6863adc2-f779-4910-9e5c-19e56ebc881d/.git/index.lock': File exists.

Tracing back logs when a repo like this was last used typically finds the initial clone of the repo, which is then interrupted by a bot runner restart. My theory here is that since we added --dissociate, cloning takes much longer, so the probability of getting interrupted by a restart goes up quite a bit.

One way of mitigating this would be to always clone to a different dir name (add .tmp or something), then move the new repo to the final name. By doing that we know that any existing dir with a .tmp suffix is known to be unfinished and can just be deleted, with no need to send any alarms or preserve the contents.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2ssir:",9223372036854775807,,,,,,,,,,,,,"2021-05-13 05:55;roboduke;Changeset: 183323f7
Author:    Erik Joelsson <erikj@openjdk.org>
Date:      2021-05-13 12:54:41 +0000
URL:       https://git.openjdk.java.net/skara/commit/183323f7be988d5df053a22180df5e6c2b96ef20
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Skara bot should prevent integration of PR with incorrect issue type,SKARA-1029,5049304,Bug,Resolved,SKARA,Skara,software,darcy,,,P3,Fixed,ehelin,kcr,kcr,2021-05-11 09:53,2022-11-21 12:50,2023-10-01 09:57,2021-05-20 01:57,0.9,,,,,,,0.9,bots,,0,,,,,,,,,,,,,,"SKARA-768 implemented a check for issuetype, which must be one of: Bug, Enhancement, New Feature (which is not generally used), Task, or Sub-task. Specifically, it flags a bug ID with an issue type of ""Backport"", ""JEP"", ""JEP Task"", or ""CSR"" as invalid.

However, instead of blocking the PR from being integrated until the correct bug ID is used (which it should do), it merely notes it as a warning.
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8232198,,,,SKARA-768,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2sscb:",9223372036854775807,,,,,,,,,,,,,"2021-05-20 01:57;roboduke;Changeset: 3111cc4a
Author:    Erik Helin <ehelin@openjdk.org>
Date:      2021-05-20 08:56:44 +0000
URL:       https://git.openjdk.java.net/skara/commit/3111cc4ac887cb0c469864ee93d2330b3c1caa69
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Skara notify bot fails to retry if JBS update fails at the wrong time,SKARA-1028,5049233,Bug,Resolved,SKARA,Skara,software,darcy,,,P3,Fixed,erikj,kcr,kcr,2021-05-10 18:19,2021-06-10 12:24,2023-10-01 09:57,2021-06-10 12:24,,,,,,,,1.0,bots,,0,,,,,,,,,,,,,,"The Skara JBS notifier bot had a problem earlier where it was unable to update JBS to create a backport record and mark it as fixed. During that time, several PRs were integrated. The integration succeeded, but JBS was unable to be updated.

The problem was fixed a short time later, but the bot doesn't realize it needs to retry the failed updates.

Here are the PRs I know of. There may be others:

https://github.com/openjdk/jfx11u/pull/9
https://github.com/openjdk/jfx11u/pull/10
https://github.com/openjdk/jfx11u/pull/11
https://github.com/openjdk/jfx11u/pull/12
https://github.com/openjdk/jfx11u/pull/13
https://github.com/openjdk/jfx11u/pull/14",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2srwj:",9223372036854775807,,,,,,,,,,,,,"2021-05-10 18:23;erikj;I managed to force the update of these particular issues by manually modifying the tracking file, github-jfx11u.branches.txt, in the notify repo. 

The alarming part here IMO is that the notify repo is updated before the bug is, so if bug updating fails, we never retry. There seems to be some attempt at restoring the value on some failures, but that does not seem safe to me as a bot can be killed at any time.;;;","2021-05-10 18:28;erikj;Looking some more at the source, I believe the idea is that some notifiers cannot handle repeated calls on certain failures. Typically the mailinglist notifier is not idempotent. Multiple calls will send multiple mails, so the bot only gets one chance. This same logic is reused for the JBS notifier.

The reason we ended up in the bad state this time seems to be that the reverting update never got through. It's not clear from the logs what happened, but I can see there is an attempt to update, and then the logs stop for that work item. The bot did not restart at that instant.;;;","2021-05-10 18:49;erikj;Forced reevaluation of https://github.com/openjdk/jdk/commit/9713152eae660f83b8a681c3168b7eb2285c05bc

I'm pretty sure only jfx11u and jdk were affected this time.;;;","2021-05-10 18:56;erikj;Looking at the source again, I think I have an idea of how to solve it. Right now, we are guaranteed to never retry when catching a NonRetriableException, but we can end up never retrying on a normal exception. I believe we can flip this, so that we sometimes may retry on NonRetriableException, but guarantee that we always will retry on a normal exception. I think the occasional double mail is an ok price to pay to not have to manually try to find the changes that were never notified in JBS (like I had to do today).

Thinking some more, it can be made even better. If we add a new property to the RepositoryListener, isIdempotent(), the notifier can check this and update the data store either before or after calling the listener as appropriate. Currently only the IssueNotifier would return true.;;;","2021-06-10 12:24;roboduke;Changeset: 67f40c7c
Author:    Erik Joelsson <erikj@openjdk.org>
Date:      2021-06-10 19:24:06 +0000
URL:       https://git.openjdk.java.net/skara/commit/67f40c7c05faa544b2bc3f3807bd9e771b1c6b0d
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Skara bot doesn't update Progress checklist for clean backports to show that it is properly reviewed,SKARA-1026,5049195,Bug,Resolved,SKARA,Skara,software,darcy,,,P4,Fixed,erikj,kcr,kcr,2021-05-10 11:25,2021-07-15 00:13,2023-10-01 09:57,2021-07-15 00:13,,,,,,,,1.0,bots,,0,,,,,,,,,,,,,,"The Skara bot checks whether a backport-style pull request is ""clean"", meaning that the patch for the PR matches the original patch being backported. If it is determined to be clean, the bot adds the ""clean"" label, and then marks the PR as ""ready"" for integration, by adding the ""ready"" label and a comment indicating that the PR can be integrated.

What it doesn't do is update the checklist in the Progress section of the PR body (Description) to check the box that says ""Change must be properly reviewed'. This is confusing and inconsistent, although it seems most people haven't noticed until now. Here are a couple examples:

https://github.com/openjdk/jfx11u/pull/16
https://github.com/openjdk/jdk16u/pull/113

This isn't a high priority issue, but would be nice to fix at some point.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2sro3:",9223372036854775807,,,,,,,,,,,,,"2021-07-14 06:24;erikj;I took a look at this. I don't think it's correct to mark the change as properly reviewed, as it hasn't been reviewed. Internally Skara treats the clean backport situation as an exception to the review requirement, not a fulfillment of it. I agree with this viewpoint.

I now have a patch that extends this exception to also apply to the printing of the summary, by filtering out the whole review required line when a clean backport has been identified.

A complicating factor when changing this is that the review requirement is part of Jcheck, so is handled by a completely separate subsystem. The cleanBackport exception is handled internally in the PullRequest bot. I think I found a reasonable way of implementing the desired functionality.;;;","2021-07-15 00:13;roboduke;Changeset: be4ddfd1
Author:    Erik Joelsson <erikj@openjdk.org>
Date:      2021-07-15 07:13:24 +0000
URL:       https://git.openjdk.java.net/skara/commit/be4ddfd1d44c2ebf3ce2f910e602a949097ba79c
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Add GitHub user mstr2,SKARA-1024,5049163,Bug,Resolved,SKARA,Skara,software,darcy,,,P4,Fixed,erikj,mstrauss,mstrauss,2021-05-10 06:34,2021-05-10 06:52,2023-10-01 09:57,2021-05-10 06:52,,,,,,,,,admin,,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2srgz:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
IssueNotifier fails if there are extra branches in a repo,SKARA-1019,5048963,Bug,Resolved,SKARA,Skara,software,darcy,,,P3,Fixed,erikj,erikj,erikj,2021-05-06 16:11,2021-05-07 05:54,2023-10-01 09:57,2021-05-07 05:54,0.9,,,,,,,0.9,bots,,0,,,,,,,,,,,,,,"IssueNotifier.onNewOpenJDKTagCommits() fails when a tag is created in a repo where there are extra branches without configured fixVersions. It tries to look through every branch that contain each commit and update the corresponding backport, but if it finds a branch for which there is no fixVersion defined, it can't find the backport and quits, leaving any still unprocessed commits in the dust.

I think we need to accept that there may be branches existing for which we don't want JBS notifications, and that is simply signaled by not configuring the fixVersion for those branches.

I tried to simply configure a fixVersion for the branch in question that triggered this just now, but then we hit another problem when there is no backport record for that branch. This again should in my opinion be ok. If we never created a backport record for this version, then we just shouldn't update it. There could be a risk for a race if we allow this though, if the creation of the backport was somehow delayed, but I think we will just have to accept that possibility.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2sq8j:",9223372036854775807,,,,,,,,,,,,,"2021-05-07 05:54;roboduke;Changeset: 3ec08934
Author:    Erik Joelsson <erikj@openjdk.org>
Date:      2021-05-07 12:53:55 +0000
URL:       https://git.openjdk.java.net/skara/commit/3ec08934850a8c0f5616a0f7d2ba2f6eb5d05db0
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Webrev can't handle changes with binary files,SKARA-1015,5048871,Bug,Resolved,SKARA,Skara,software,darcy,,,P3,Fixed,erikj,wetmore,wetmore,2021-05-05 15:04,2021-05-17 11:12,2023-10-01 09:57,2021-05-17 11:12,,,,,,,,,bots,,0,,,,,,,,,,,,,,"For example:

https://github.com/openjdk/jtreg/pull/9

Here's the copied links to some listed webrevs.

https://openjdk.github.io/cr/?repo=jtreg&pr=9&range=05 [full/blank]
https://openjdk.github.io/cr/?repo=jtreg&pr=9&range=04-05 [incremental/complete] (edited) ",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2spo3:",9223372036854775807,,,,,,,,,,,,,"2021-05-05 15:22;erikj;Looks like a bug. Here is the exception:

?repo=jtreg&pr=9&range=01:1486 Uncaught (in promise) TypeError: Cannot read property 'split' of undefined
    at removeContext (?repo=jtreg&pr=9&range=01:1486)
    at hunks (?repo=jtreg&pr=9&range=01:687)
    at fetchFileContent (?repo=jtreg&pr=9&range=01:1610)
    at init (?repo=jtreg&pr=9&range=01:1681)
    at async window.onload (?repo=jtreg&pr=9&range=01:1690);;;","2021-05-12 13:35;erikj;The cause is a binary file, which does not have a patch at all.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Add GitHub user mgkwill,SKARA-1014,5048839,Bug,Resolved,SKARA,Skara,software,darcy,,,P4,Fixed,erikj,mgkwill,mgkwill,2021-05-05 10:50,2021-05-05 11:26,2023-10-01 09:57,2021-05-05 11:02,,,,,,,,,admin,,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2spgz:",9223372036854775807,,,,,,,,,,,,,"2021-05-05 11:26;mgkwill;Thank you!;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
"Lots of ""unhealthy"" jdk repos found in scratch dirs",SKARA-1012,5048670,Bug,Resolved,SKARA,Skara,software,darcy,,,P3,Fixed,erikj,erikj,erikj,2021-05-03 14:59,2021-05-06 06:14,2023-10-01 09:57,2021-05-06 06:14,0.9,,,,,,,0.9,bots,,0,,,,,,,,,,,,,,"Since last week, we have started receiving a lot of error messages that look like this:

Invalid local repository detected (unhealthy) - preserved in: /home/bots/scratch/scratch-38/pr/check/openjdk/jdk.git-unhealthy-2e7c0396-a2a5-402d-8907-ff557592b1ae

After having investigated some of these ""unhealthy"" repos, my take is that this is caused by the pr branches we create, and then remove, in the jdk repo. Through some chain of events, ""git fsck"" end up reporting these branches like this in these repos:

error: refs/remotes/origin/pr/3449: invalid sha1 pointer 51dcbbf88f941bdb08740d3d301c2702a85defd8
error: refs/remotes/origin/pr/3492: invalid sha1 pointer 78e6e137d72ba5eaf052b70d8b84502b5f4102fa
error: refs/remotes/origin/pr/3493: invalid sha1 pointer c65cc685791a08dbfcbecd8a7377c28151351ece
error: refs/remotes/origin/pr/3491: invalid sha1 pointer fbe7df337fdda83ef91fdbb76c207169f9d16468

The hash refers to the last commit in the branch/PR in question. Most of the unhealthy repos share a subset of the same set of pr branches that are causing errors. The 4 listed above seem to be the most common. Those PRs were all closed 11+ days ago, so this doesn't seem like an immediate reaction.

Can we do a better job of keeping these local clones clean and functioning? If not, we need to start treating bad local scratch repos as more of an expected things and not throw errors when we encounter them. In that case we also need to delete them rather than trying to keep them around, to reduce unnecessary admin work.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2soff:",9223372036854775807,,,,,,,,,,,,,"2021-05-03 16:18;erikj;My best guess is that this is caused by things somehow happening with the seed repo. I'm not sure I understand the alternates functionality correctly, but I'm thinking that certain objects for a pr branch could exist only in the seed repo. Then at some point, a scratch repo works on this pr, getting the references to the objects. When the pr is eventually closed, the seed repo will at some point get pruned, so the unreachable objects disappear. Then when ""git fsck"" is run on the scratch repo, there are references to non existing objects, and we get the error. 

There are certainly details here I'm not sure of and don't quite understand, but I think this is pretty close to what's happening at least.;;;","2021-05-03 16:26;erikj;Running this command (found in bot logs) removes most of the unknown references in an affected repo:

git fetch --recurse-submodules=on-demand --prune https://github.com/openjdk/jdk.git +refs/heads/*:refs/heads/* +refs/tags/*:refs/tags/*

We are still stuck with this though:

error: HEAD: invalid reflog entry abf0815c4a39e70101246debc3364fffa4b40e20

My take is that since we are now removing branches from the main JDK repo, we need to put in some cleanup/prune commands to followup on this in the local scratch repos, otherwise we can't expect ""git fsck"" to be clean.;;;","2021-05-03 16:27;erikj;[~ehelin] What do you think about this?;;;","2021-05-04 06:10;erikj;The HEAD invalid reflog entry can be fixed by running this command:

git reflog expire --stale-fix --all

So by running a combination of that and the fetch with prune above, we can get the repo into a healthy state.;;;","2021-05-05 12:54;erikj;After discussion with ErikD, we concluded that the best cause of action here is to stop sharing objects between the seed repo and the scratch clone. It's simply not safe when we remove objects in the seed repo (which happens automatically behind the scenes when git GCs). This is documented in the git-clone man page. Changing this will increase disk usage some, but that's something we just have to live with.

This is done by adding --dissociate to the clone command line whenever we add a seed repo with --reference-if-able.;;;","2021-05-06 06:14;roboduke;Changeset: 58e1d724
Author:    Erik Joelsson <erikj@openjdk.org>
Date:      2021-05-06 13:13:55 +0000
URL:       https://git.openjdk.java.net/skara/commit/58e1d72477442081a9406d515af04f75fa6072a2
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,
GitCombinedDiffParser does not handle un-modified copied files,SKARA-1008,5048634,Bug,Resolved,SKARA,Skara,software,darcy,,,P2,Fixed,ehelin,ehelin,ehelin,2021-05-03 06:50,2021-05-03 09:32,2023-10-01 09:57,2021-05-03 09:32,,,,,,,,0.9,libraries,,0,,,,,,,,,,,,,,The GitCombinedDiffParser does not handle files that have been copied during the merge that do not have any modifications with regards to any parent.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2so7f:",9223372036854775807,,,,,,,,,,,,,"2021-05-03 09:32;roboduke;Changeset: fb532a07
Author:    Erik Helin <ehelin@openjdk.org>
Date:      2021-05-03 16:32:08 +0000
URL:       https://git.openjdk.java.net/skara/commit/fb532a0707ba9ac53cfcc9be0cf63399c0880740
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
The footer link of webrev.js is broken,SKARA-1006,5048472,Bug,Resolved,SKARA,Skara,software,darcy,,,P4,Fixed,ehelin,rwestberg,rwestberg,2021-04-29 21:26,2021-05-05 00:36,2023-10-01 09:57,2021-05-05 00:36,,,,,,,,,libraries,,0,,,,,,,,,,,,,,There's a link in the footer to webrev.js which doesn't work since it's now inlined into index.html.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2sn7f:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Skara bots fail to parse openjfx11.0.12 version,SKARA-1004,5048413,Bug,Closed,SKARA,Skara,software,darcy,,,P1,Fixed,erikj,erikj,erikj,2021-04-29 05:50,2021-04-29 12:53,2023-10-01 09:57,2021-04-29 09:22,0.9,,,,,,,0.9,bots,,0,,,,,,,,,,,,,,"When jfx11u received its first PR yesterday, the Skara bots started throwing errors caused by the new fixVersion. The current regexp for recognizing such version strings did not expect multiple digits, only the form openjfx8uXXX.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2smub:",9223372036854775807,,,,,,,,,,,,,"2021-04-29 06:21;erikj;As this is causing trouble for the bots, I'm going to disable jfx11 notification on bugs for now and try to get this fixed later today.;;;","2021-04-29 09:22;roboduke;Changeset: d27723d1
Author:    Erik Joelsson <erikj@openjdk.org>
Date:      2021-04-29 16:21:57 +0000
URL:       https://git.openjdk.java.net/skara/commit/d27723d1484cc6e1c658dd3b8d7c226e3de12033
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
GitHubRepository.restrictAccess sends incomplete query,SKARA-1003,5048297,Bug,Resolved,SKARA,Skara,software,darcy,,,P3,Fixed,ehelin,ehelin,ehelin,2021-04-28 06:13,2021-04-29 10:42,2023-10-01 09:57,2021-04-29 10:42,0.9,,,,,,,0.9,admin,,0,,,,,,,,,,,,,,"java.lang.RuntimeException: Request returned bad status: 422
at org.openjdk.skara.network/org.openjdk.skara.network.RestRequest.transformBadResponse(RestRequest.java:309)
at org.openjdk.skara.network/org.openjdk.skara.network.RestRequest.execute(RestRequest.java:385)
at org.openjdk.skara.network/org.openjdk.skara.network.RestRequest$QueryBuilder.execute(RestRequest.java:180)
at org.openjdk.skara.forge/org.openjdk.skara.forge.github.GitHubRepository.restrictPushAccess(GitHubRepository.java:563)
at org.openjdk.skara.bots.pr/org.openjdk.skara.bots.pr.BackportCommand.handle(BackportCommand.java:165)
at org.openjdk.skara.bots.pr/org.openjdk.skara.bots.pr.CommitCommandWorkItem.processCommand(CommitCommandWorkItem.java:131)
at org.openjdk.skara.bots.pr/org.openjdk.skara.bots.pr.CommitCommandWorkItem.run(CommitCommandWorkItem.java:171)
at org.openjdk.skara.bot/org.openjdk.skara.bot.BotRunner$RunnableWorkItem.run(BotRunner.java:84)
at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)
at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
at java.base/java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:304)
at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1130)
at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:630)
at java.base/java.lang.Thread.run(Thread.java:831) ",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2sm4j:",9223372036854775807,,,,,,,,,,,,,"2021-04-29 10:42;roboduke;Changeset: 62e23e04
Author:    Erik Helin <ehelin@openjdk.org>
Date:      2021-04-29 17:41:38 +0000
URL:       https://git.openjdk.java.net/skara/commit/62e23e04ccd40d102c5471b04ef2a315b1ba98d8
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
CommentPosterWorkItem@openjdk/jdk#3425,SKARA-1001,5048217,Bug,Resolved,SKARA,Skara,software,darcy,,,P2,Fixed,erikj,erikj,erikj,2021-04-27 14:01,2021-04-28 00:06,2023-10-01 09:57,2021-04-27 15:54,0.9,,,,,,,0.9,bots,,0,,,,,,,,,,,,,,"The mlbridge fails on https://github.com/openjdk/jdk/pull/3425 with the following stacktrace:

java.util.NoSuchElementException: No value present
	at java.base/java.util.Optional.orElseThrow(Optional.java:377)
	at org.openjdk.skara.bots.mlbridge/org.openjdk.skara.bots.mlbridge.BridgedComment.post(BridgedComment.java:92)
	at org.openjdk.skara.bots.mlbridge/org.openjdk.skara.bots.mlbridge.CommentPosterWorkItem.run(CommentPosterWorkItem.java:89)
	at org.openjdk.skara.bot/org.openjdk.skara.bot.BotRunner$RunnableWorkItem.run(BotRunner.java:84)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:304)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1130)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:630)
	at java.base/java.lang.Thread.run(Thread.java:831)

This is the message being bridged:

Bridging new message from Alan Snyder <> to GitHubPullRequest #3425 by HostUserDetails{id=3232337, username='avu', fullName='null'}

This message is being bridged over and over again.

https://mail.openjdk.java.net/pipermail/awt-dev/2021-April/017563.html",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,SKARA-1002,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2slmr:",9223372036854775807,,,,,,,,,,,,,"2021-04-27 14:49;erikj;I found the trigger for the error. In BridgedComment.from(), the comment body is matched against:

Pattern.compile(""^<!-- Bridged id \\(([=\\w]+)\\) -->"");

In this particular mail, the ID string contains a + sign, which is not include din that matcher. It would be nice if we could find a proper definition of what characters are valid in the ID strings so we can construct a proper regexp. This seems to be a Base64 encoded string we produced ourselves.

What worries me more is why BridgedComment.post() even calls .from() in the first place. The return value is never used and I can't see any side effect in .from() to worry about. If this is supposed to be used for validation (which it essentially seems to be now), then we shouldn't post the comment before the potential validation exception is thrown.

[~rwestberg] could you verify my findings?;;;","2021-04-27 15:02;erikj;So to fix the immediate problem, we just need to add + and / to the regexp.;;;","2021-04-27 15:46;erikj;The bigger problem is that we need to create the comment before we can use from() to validate it. I still think we need to do something about this, because we can't let the bot fail after the comment is posted. That will always lead to reposting. I will file a new issue for that.;;;","2021-04-27 15:54;roboduke;Changeset: cdc1b020
Author:    Erik Joelsson <erikj@openjdk.org>
Date:      2021-04-27 22:54:00 +0000
URL:       https://git.openjdk.java.net/skara/commit/cdc1b020f16c40834e6a930d0901abe32ec39e43
;;;","2021-04-27 16:22;erikj;Is there anything we can do about the 350+ extra comments in https://github.com/openjdk/jdk/pull/3425?;;;","2021-04-28 00:06;rwestberg;Your analysis looks correct, I think the intention was that it could be useful to have access to the posted comment, but it is not currently used by anything. It was not really made for validation, I did not consider that it might fail. :);;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,
mlbridge stuck failing on closed PR targeting a branch that no longer exists,SKARA-1000,5048024,Bug,Resolved,SKARA,Skara,software,darcy,,,P2,Fixed,erikj,erikj,erikj,2021-04-26 12:49,2021-05-19 08:59,2023-10-01 09:57,2021-05-19 08:59,0.9,,,,,,,0.9,bots,,0,skara-alarm,,,,,,,,,,,,,"This pull request is currently causing errors in the mlbridge bot:

https://github.com/openjdk/valhalla/pull/392

The target branch universal-tvars no longer exists in the target repo. This causes the initialization of the census config to fail, because .jcheck/conf cannot be retrieved.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2skfv:",9223372036854775807,,,,,,,,,,,,,"2021-04-26 15:36;erikj;I take back what used to be in this comment. This bot and work item has nothing to do with any of this. All it needs is the project and and jbs settings, which are very unlikely to change. We just need to figure out a way to not make it fail if the target ref is no longer present.;;;","2021-04-27 06:32;erikj;The particular missing branch has now been restored, so this issue is not currently causing errors. The underlying problem remains though, even if unusual.;;;","2021-05-10 11:44;erikj;There is another failure for the same PR and underlying issue.

When a PR is closed, mlbridge will sometimes revisit it and see if it should send an email to notify that it has been closed. To compose this email, it needs to find the commit that the PR integrated as. For 392, since the branch was recreated, this commit no longer exists in the repo. Because of this, we get an exception thrown (see below). This is being triggered over and over so we really need to find a fix soon. My proposed solution for this new problem is to simply accept that a commit may no longer exist and in that case just log a warning about it and be done.

java.util.NoSuchElementException: No value present
	at java.base/java.util.Optional.orElseThrow(Optional.java:377)
	at org.openjdk.skara.bots.mlbridge/org.openjdk.skara.bots.mlbridge.ReviewArchive.generateArchiveItems(ReviewArchive.java:182)
	at org.openjdk.skara.bots.mlbridge/org.openjdk.skara.bots.mlbridge.ReviewArchive.generateNewEmails(ReviewArchive.java:306)
	at org.openjdk.skara.bots.mlbridge/org.openjdk.skara.bots.mlbridge.ArchiveWorkItem.run(ArchiveWorkItem.java:364)
	at org.openjdk.skara.bot/org.openjdk.skara.bot.BotRunner$RunnableWorkItem.run(BotRunner.java:84)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:304)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1130)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:630)
	at java.base/java.lang.Thread.run(Thread.java:831) 

The good news from investigating this is that we actually already have a way of retrieving the commit hash for a closed PR, so that could be used to solve the initial issue. The bad news is that there is no guarantee that this hash will actually be around still, but I think in both cases, if it can't be found, log a warning and be done with it. That way, if a user reports a problem with such a PR in the future, we can still find what happened in the logs, but we don't need to be spammed with errors for something that really isn't a problem.;;;","2021-05-10 12:30;erikj;Upgrading to P2 as this is triggering alarm constantly.;;;","2021-05-19 08:59;roboduke;Changeset: a3c582b9
Author:    Erik Joelsson <erikj@openjdk.org>
Date:      2021-05-19 15:59:04 +0000
URL:       https://git.openjdk.java.net/skara/commit/a3c582b940593fd60cd56f7c9cc998bcd51141b8
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Backport fails for jdk15u-dev,SKARA-998,5048019,Bug,Resolved,SKARA,Skara,software,darcy,,,P3,Fixed,ehelin,erikj,erikj,2021-04-26 12:10,2021-04-28 07:08,2023-10-01 09:57,2021-04-28 06:52,0.9,,,,,,,0.9,bots,,0,,,,,,,,,,,,,,"About an hour ago, a user requested a backport for this mainline commit:

https://github.com/openjdk/jdk/commit/f5766287

Since then, the pr bot has been generating errors:

Exception during item execution (CommitCommandWorkItem@openjdk/jdk:f5766287): Request returned bad status: 404

java.lang.RuntimeException: Request returned bad status: 404
	at org.openjdk.skara.network/org.openjdk.skara.network.RestRequest.transformBadResponse(RestRequest.java:309)
	at org.openjdk.skara.network/org.openjdk.skara.network.RestRequest.execute(RestRequest.java:385)
	at org.openjdk.skara.network/org.openjdk.skara.network.RestRequest$QueryBuilder.execute(RestRequest.java:180)
	at org.openjdk.skara.forge/org.openjdk.skara.forge.github.GitHubRepository.canPush(GitHubRepository.java:544)
	at org.openjdk.skara.bots.pr/org.openjdk.skara.bots.pr.BackportCommand.handle(BackportCommand.java:162)
	at org.openjdk.skara.bots.pr/org.openjdk.skara.bots.pr.CommitCommandWorkItem.processCommand(CommitCommandWorkItem.java:131)
	at org.openjdk.skara.bots.pr/org.openjdk.skara.bots.pr.CommitCommandWorkItem.run(CommitCommandWorkItem.java:171)
	at org.openjdk.skara.bot/org.openjdk.skara.bot.BotRunner$RunnableWorkItem.run(BotRunner.java:84)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:304)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1130)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:630)
	at java.base/java.lang.Thread.run(Thread.java:831)
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2sker:",9223372036854775807,,,,,,,,,,,,,"2021-04-26 14:39;erikj;It looks like the user managed to create the backport, but it's not clear to me if this was manual or if the command actually worked.

https://github.com/openjdk/jdk15u-dev/pull/38

[~vkempik] I've noticed some problems with your use of the /backport command for the above mentioned commit. Could you share your experience of what actually happened?;;;","2021-04-26 14:42;vkempik;I have waited few hours for bot to do anything after I have added /backport jdk15u-dev comment to original commit
Bot did nothing ( zero), then I have created pr with git bp shortcut.;;;","2021-04-27 01:41;vkempik;bot ignores /backport jdk13u-dev command as well;;;","2021-04-27 07:10;ehelin;Fixed in https://github.com/openjdk/skara/commit/0d49a4d2a2bedff56cf8685a74614f0d5246bbb4, but not deployed yet.;;;","2021-04-27 12:25;erikj;Deployed now.;;;","2021-04-27 12:30;erikj;It still fails, now two lines down.

java.lang.RuntimeException: Request returned bad status: 422
	at org.openjdk.skara.network/org.openjdk.skara.network.RestRequest.transformBadResponse(RestRequest.java:309)
	at org.openjdk.skara.network/org.openjdk.skara.network.RestRequest.execute(RestRequest.java:385)
	at org.openjdk.skara.network/org.openjdk.skara.network.RestRequest$QueryBuilder.execute(RestRequest.java:180)
	at org.openjdk.skara.forge/org.openjdk.skara.forge.github.GitHubRepository.restrictPushAccess(GitHubRepository.java:563)
	at org.openjdk.skara.bots.pr/org.openjdk.skara.bots.pr.BackportCommand.handle(BackportCommand.java:165)
	at org.openjdk.skara.bots.pr/org.openjdk.skara.bots.pr.CommitCommandWorkItem.processCommand(CommitCommandWorkItem.java:131)
	at org.openjdk.skara.bots.pr/org.openjdk.skara.bots.pr.CommitCommandWorkItem.run(CommitCommandWorkItem.java:171)
	at org.openjdk.skara.bot/org.openjdk.skara.bot.BotRunner$RunnableWorkItem.run(BotRunner.java:84)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:304)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1130)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:630)
	at java.base/java.lang.Thread.run(Thread.java:831);;;","2021-04-27 13:56;erikj;The error changed again, not sure why:

java.lang.NullPointerException: Cannot invoke ""org.openjdk.skara.json.JSONObject.get(String)"" because the return value of ""org.openjdk.skara.json.JSONValue.asObject()"" is null
	at org.openjdk.skara.json/org.openjdk.skara.json.JSONValue.get(JSONValue.java:98)
	at org.openjdk.skara.forge/org.openjdk.skara.forge.github.GitHubRepository.canPush(GitHubRepository.java:548)
	at org.openjdk.skara.bots.pr/org.openjdk.skara.bots.pr.BackportCommand.handle(BackportCommand.java:162)
	at org.openjdk.skara.bots.pr/org.openjdk.skara.bots.pr.CommitCommandWorkItem.processCommand(CommitCommandWorkItem.java:131)
	at org.openjdk.skara.bots.pr/org.openjdk.skara.bots.pr.CommitCommandWorkItem.run(CommitCommandWorkItem.java:171)
	at org.openjdk.skara.bot/org.openjdk.skara.bot.BotRunner$RunnableWorkItem.run(BotRunner.java:84)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:304)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1130)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:630)
	at java.base/java.lang.Thread.run(Thread.java:831);;;","2021-04-28 06:52;roboduke;Changeset: 7b3d5575
Author:    Erik Helin <ehelin@openjdk.org>
Date:      2021-04-28 13:51:32 +0000
URL:       https://git.openjdk.java.net/skara/commit/7b3d5575e794c21fdf3c81cbc65de69303ffb913
;;;","2021-04-28 07:08;vkempik;Hello is this fix deployed or it will be deployed soon ?;;;",,,,,,,,,,,,,,,,,,,,,,,,,
Email notifications are not sent to alias if binary change is commented in Gitlab,SKARA-997,5048015,Bug,Resolved,SKARA,Skara,software,darcy,,,P3,Fixed,erikj,erikj,erikj,2021-04-26 11:10,2021-06-17 06:16,2023-10-01 09:57,2021-06-17 06:16,0.9,,,,,,,1.0,bots,,0,,,,,,,,,,,,,,"It looks like that commented binary change prevents posting email notification to an alias.

Workaround: Remove comment under the binary change and remove client label and apply it back.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,SKARA-996,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2skdv:",9223372036854775807,,,,,,,,,,,,,"2021-06-16 15:37;erikj;I managed to reproduce this in our playground repository. Here is the stack trace:

java.lang.NullPointerException: Cannot invoke ""org.openjdk.skara.json.JSONValue.isNull()"" because the return value of ""org.openjdk.skara.json.JSONValue.get(String)"" is null
	at org.openjdk.skara.forge/org.openjdk.skara.forge.gitlab.GitLabMergeRequest.parseReviewComment(GitLabMergeRequest.java:214)
	at org.openjdk.skara.forge/org.openjdk.skara.forge.gitlab.GitLabMergeRequest.parseDiscussion(GitLabMergeRequest.java:283)
	at org.openjdk.skara.forge/org.openjdk.skara.forge.gitlab.GitLabMergeRequest.lambda$reviewComments$14(GitLabMergeRequest.java:295)
	at java.base/java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:273)
	at java.base/java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:179)
	at java.base/java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1625)
	at java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:484)
	at java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:474)
	at java.base/java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:913)
	at java.base/java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.base/java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:682)
	at org.openjdk.skara.forge/org.openjdk.skara.forge.gitlab.GitLabMergeRequest.reviewComments(GitLabMergeRequest.java:296)
	at org.openjdk.skara.bots.mlbridge/org.openjdk.skara.bots.mlbridge.ArchiveWorkItem.run(ArchiveWorkItem.java:360)
	at org.openjdk.skara.bot/org.openjdk.skara.bot.BotRunner$RunnableWorkItem.runMeasured(BotRunner.java:185)
	at org.openjdk.skara.bot/org.openjdk.skara.bot.BotRunner$RunnableWorkItem.run(BotRunner.java:141)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:304)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1130)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:630)
	at java.base/java.lang.Thread.run(Thread.java:831);;;","2021-06-17 06:16;roboduke;Changeset: c11e604d
Author:    Erik Joelsson <erikj@openjdk.org>
Date:      2021-06-17 13:16:33 +0000
URL:       https://git.openjdk.java.net/skara/commit/c11e604decf783ef940a083aa22a5493c577aa79
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Notify bot gets stuck in infinite error when fixVersion isn't found,SKARA-994,5047826,Bug,Resolved,SKARA,Skara,software,darcy,,,P3,Fixed,erikj,erikj,erikj,2021-04-23 12:43,2021-05-07 11:55,2023-10-01 09:57,2021-05-07 11:55,0.9,,,,,,,,bots,,0,,,,,,,,,,,,,,"When the Notifier bot tries to react to a new tag, it walks through all commits for that tag and notifies JBS about the fix version. In jdk15u-dev, this was creating an infinite retry for 15.0.3+2 and specifically for updating the bug JDK-8202343.

Sometime before that tag was created, jdk15u-dev transitioned from having the fixVersion defined in Skara config to having it in .jcheck/conf. When Skara tries to evaluate the fixVersion for a commit, it seems to look for the .jcheck/conf in the local working repository, which at this point is not on the latest commit (and rightly so). In this case, it's on a commit without the .jcheck/conf, so no fixVersion is found, and since Skara doesn't have a global fixVersion defined for the repo, nothing is found there either. 

I'm not sure how to best resolve this long term. For this particular instance, I have manually modified the DB repo for the notifier bot, marking this tag as ""done"". For the future, I think we need to be able to provide some fallback version in the Skara config to handle the transition to .jcheck/conf defined fixVersion. In the current code, the Skara defined fixVersions overrides .jcheck/conf.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2sjcz:",9223372036854775807,,,,,,,,,,,,,"2021-05-07 11:55;erikj;I believe this is fixed with SKARA-1012.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Stuck merge PR (Panama),SKARA-993,5047786,Bug,Resolved,SKARA,Skara,software,darcy,,,P4,Fixed,ehelin,mcimadamore,mcimadamore,2021-04-23 04:50,2021-04-27 06:09,2023-10-01 09:57,2021-04-27 06:09,,,,,,,,0.9,bots,,0,,,,,,,,,,,,,,"This merge PR got stuck:

https://github.com/openjdk/panama-foreign/pull/507

It was probably not acted upon immediately and left there for sometime. After the merge issue was resolved and the `sponsor` tag was added, we were unable to sponsor the change through.

A Skara admin had to manually remove a bot comment so that things could be unblocked.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2sj43:",9223372036854775807,,,,,,,,,,,,,"2021-04-27 06:09;roboduke;Changeset: 4d271a08
Author:    Erik Helin <ehelin@openjdk.org>
Date:      2021-04-27 13:09:24 +0000
URL:       https://git.openjdk.java.net/skara/commit/4d271a08a3896d6fa6e6791227c5165c58c2e0c2
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Add 8u270 to the hgupdater exclusion list,SKARA-991,5047691,Bug,Resolved,SKARA,Skara,software,darcy,,,P3,Fixed,erikj,pmohan,pmohan,2021-04-22 09:37,2021-04-23 06:23,2023-10-01 09:57,2021-04-23 06:23,,,,,,,,0.9,admin,,0,,,,,,,,,,,,,,"8u270 is a special contingency release which never went out. It was created to address any contingencies with TLS 1.3. Currently, presence of this backport misguides hgupdater to think this is the first public release and hence 8u271 backport is added with hgupdate-sync label. This is incorrect. (Example: JDK-8250787). So please exclude 8u270 from hgupdater evaluation. ",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2siiz:",9223372036854775807,,,,,,,,,,,,,"2021-04-23 06:23;roboduke;Changeset: 1b3f3f0d
Author:    Erik Joelsson <erikj@openjdk.org>
Date:      2021-04-23 13:22:45 +0000
URL:       https://git.openjdk.java.net/skara/commit/1b3f3f0d
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Add GitHub user earthling-amzn,SKARA-990,5047613,Bug,Resolved,SKARA,Skara,software,darcy,,,P4,Fixed,erikj,wkemper,wkemper,2021-04-21 14:01,2021-04-30 11:59,2023-10-01 09:57,2021-04-30 11:59,,,,,,,,,admin,,0,,,,,,,,,,,,,,I was recently granted committer status by vote on the Shenandoah project: https://openjdk.java.net/census#shenandoah,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2si1n:",9223372036854775807,,,,,,,,,,,,,"2021-04-30 08:59;wkemper;Hmm, is this working? I'm not able to commit this approved pull request: https://github.com/openjdk/shenandoah/pull/33 - are there additional steps for us to complete?;;;","2021-04-30 09:36;erikj;Investigating.;;;","2021-04-30 11:58;erikj;I believe I have it figured out now. For Skara to figure out what project a repository belongs to, and so which census roles to apply, it looks in the .jcheck/conf file in the repository. In the shenandoah repository, the project key has the value ""jdk"", which means the roles of the jdk project will be used. This file needs to be updated to say project=shenandoah in order for your role in the shenandoah project to apply here.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Skara webrev is empty if patch has deleted files,SKARA-988,5047602,Bug,Resolved,SKARA,Skara,software,darcy,,,P4,Fixed,erikj,minqi,minqi,2021-04-21 11:01,2021-04-27 06:42,2023-10-01 09:57,2021-04-27 06:42,,,,,,,,,bots,,0,,,,,,,,,,,,,,"The link is empty but the PR page is OK:
https://openjdk.github.io/cr/?repo=jdk&pr=3599&range=00
This one shows good:
https://github.com/openjdk/jdk/pull/3599",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2shz7:",9223372036854775807,,,,,,,,,,,,,"2021-04-21 11:21;erikj;I took a quick look and it triggered an error in the chrome console.;;;","2021-04-21 16:03;iklam;One more: https://openjdk.github.io/cr/?repo=jdk&pr=3610&range=00;;;","2021-04-22 13:54;erikj;The initial issue, 3599, seems to be that deleted files is causing a dereference of an undefined value. While verifying this, I also noted that the deleted file gets a Raw link which results in a 404. I think it should just not print the Raw link.;;;","2021-04-22 13:54;erikj;3610 is caused by a rename with an empty patch. The code parsing all the hunks in the patch errors out when the patch is empty.;;;","2021-04-23 14:40;minqi;One more updated webrev (full) is empty:
https://openjdk.github.io/cr/?repo=jdk&pr=3599&range=02;;;","2021-04-23 15:36;erikj;We know what the problems are and a fix is out on review. Will get deployed next week after second review.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,
Add GitHub user matthiasblaesing,SKARA-987,5047599,Bug,Resolved,SKARA,Skara,software,darcy,,,P4,Fixed,erikj,mblaesing,mblaesing,2021-04-21 10:21,2021-04-21 13:42,2023-10-01 09:57,2021-04-21 13:42,,,,,,,,,admin,,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2shyj:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Github commit links 404,SKARA-983,5047480,Bug,Resolved,SKARA,Skara,software,darcy,,,P4,Fixed,erikj,erikj,erikj,2021-04-20 13:21,2021-04-27 10:43,2023-10-01 09:57,2021-04-27 10:43,,,,,,,,0.9,bots,,0,,,,,,,,,,,,,,"We have at least one instance (in two issues for the same change) of where the commit link added to an issue comment by the Skara bot is resulting in a 404 on Github.

https://bugs.openjdk.java.net/browse/JDK-8265463
https://bugs.openjdk.java.net/browse/JDK-8265464

The commit link is:

https://git.openjdk.java.net/jdk/commit/39907136

Adding one more digit from the hash makes it work:

https://git.openjdk.java.net/jdk/commit/399071369

My initial thought was that maybe there is a collision that is causing Github to behave like this, so I tried to manually cycle through 0-f as the final digit, but didn't get any hits. Should we add more digits to all generated commit links to try to mitigate this potential problem?",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2sh83:",9223372036854775807,,,,,,,,,,,,,"2021-04-22 15:07;erikj;I think the correct fix here is to stop abbreviating commit hashes in links. Github internal links seem to always be full hashes, while pretty printing the link text with an abbreviation. We should adopt the same basic principle.;;;","2021-04-27 10:43;roboduke;Changeset: 75a8a621
Author:    Erik Joelsson <erikj@openjdk.org>
Date:      2021-04-27 17:43:02 +0000
URL:       https://git.openjdk.java.net/skara/commit/75a8a62156a425ceb689c4914578d3f7a54099f1
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Jira issue parser bails on space after URL,SKARA-981,5047475,Bug,Resolved,SKARA,Skara,software,darcy,,,P2,Fixed,rwestberg,erikj,erikj,2021-04-20 12:46,2021-04-22 06:13,2023-10-01 09:57,2021-04-22 06:12,,,,,,,,0.9,bots,,0,,,,,,,,,,,,,,"When a JiraIssue tries to parse comments for URLs, the parser can fail if there is a space on the line following the URL. This throws a RuntimeException and causes the whole work item to fail.

See: org.openjdk.skara.issuetracker/org.openjdk.skara.issuetracker.jira.JiraIssue.parseWebLinkComment(JiraIssue.java:391)

We need to fix the regexp and/or trim the resulting string before giving it to URI constructor. We should also catch any parse exception and log it on the spot as a failure to parse a URL in a comment shouldn't cause processing of an issue to fail completely.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2sh6z:",9223372036854775807,,,,,,,,,,,,,"2021-04-22 06:12;roboduke;Changeset: cbc8f3c1
Author:    Robin Westberg <rwestberg@openjdk.org>
Date:      2021-04-22 13:12:33 +0000
URL:       https://git.openjdk.java.net/skara/commit/cbc8f3c1
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Add GitHub user lgxbslgx,SKARA-977,5047308,Bug,Resolved,SKARA,Skara,software,darcy,,,P4,Fixed,erikj,gli,gli,2021-04-19 10:03,2021-04-19 11:11,2023-10-01 09:57,2021-04-19 11:11,,,,,,,,,admin,,0,,,,,,,,,,,,,,"Please add github user lgxbslgx and map it to OpenJDK user gli.
Full name: Guoxiong Li
Thanks.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2sg5v:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Do not send empty emails,SKARA-976,5047049,Bug,Resolved,SKARA,Skara,software,darcy,,,P4,Fixed,rwestberg,ehelin,ehelin,2021-04-16 03:07,2021-04-20 05:26,2023-10-01 09:57,2021-04-20 05:26,,,,,,,,0.9,bots,,0,,,,,,,,,,,,,,When filtering out multi-line comments there is a possibility that result is an empty e-mail. Add logic for not sending empty e-mails.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2sex7:",9223372036854775807,,,,,,,,,,,,,"2021-04-20 05:26;roboduke;Changeset: 82f08432
Author:    Robin Westberg <rwestberg@openjdk.org>
Date:      2021-04-20 12:26:21 +0000
URL:       https://git.openjdk.java.net/skara/commit/82f08432
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Add retry logic to mlbridge when pushing,SKARA-974,5047047,Bug,Resolved,SKARA,Skara,software,darcy,,,P4,Fixed,rwestberg,ehelin,ehelin,2021-04-16 03:02,2021-04-20 23:48,2023-10-01 09:57,2021-04-20 23:48,,,,,,,,0.9,bots,,0,,,,,,,,,,,,,,Add retry logic to mlbridge when pushing,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2sewr:",9223372036854775807,,,,,,,,,,,,,"2021-04-20 23:48;roboduke;Changeset: aa132b89
Author:    Robin Westberg <rwestberg@openjdk.org>
Date:      2021-04-21 06:48:06 +0000
URL:       https://git.openjdk.java.net/skara/commit/aa132b89
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Include namespaces in census unification,SKARA-973,5047046,Bug,Resolved,SKARA,Skara,software,darcy,,,P4,Fixed,ehelin,ehelin,ehelin,2021-04-16 02:58,2021-04-16 07:40,2023-10-01 09:57,2021-04-16 07:40,,,,,,,,0.9,bots,,0,,,,,,,,,,,,,,Include eventual namespaces when unifying census directories to a single-file census format,,,,,,,,,,,,,,,,,,,,,,,SKARA-711,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2sewj:",9223372036854775807,,,,,,,,,,,,,"2021-04-16 07:40;roboduke;Changeset: 24e7dd36
Author:    Erik Helin <ehelin@openjdk.org>
Date:      2021-04-16 14:40:16 +0000
URL:       https://git.openjdk.java.net/skara/commit/24e7dd36
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Method profiling page should show the frame type,JMC-7272,5051683,Bug,Resolved,JMC,Java Mission Control,software,hirt,The production time profiling and diagnostics tools-suite for the HotSpot JDK.,,P3,Fixed,hirt,hirt,hirt,2021-06-11 15:08,2022-04-06 22:20,2023-10-01 09:57,2021-06-18 07:15,,,,,,,,8.1.0,Mission Control Client,,0,,,,,,,,,,,,,,It would be nice to be able to see if the methods were running interpreted in the top histogram (at least).,,,,,,,,,,,JMC-7664,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2t6wz:",9223372036854775807,,JMC 8.1 RDS 1,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@1c80c3d6,,,,,,,,,"2021-06-11 15:09;hirt;I have a fix for this.;;;","2021-06-18 07:15;roboduke;Changeset: 8bc12472
Author:    Marcus Hirt <hirt@openjdk.org>
Date:      2021-06-18 14:14:30 +0000
URL:       https://git.openjdk.java.net/jmc/commit/8bc1247251a1ececc9d24a2b42f427ce5377b281
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Show icons for modifiers in the method profiling page,JMC-7268,5051479,Bug,Resolved,JMC,Java Mission Control,software,hirt,The production time profiling and diagnostics tools-suite for the HotSpot JDK.,,P3,Fixed,hirt,hirt,hirt,2021-06-09 11:25,2022-04-06 22:20,2023-10-01 09:57,2021-06-16 04:03,,,,,,,,8.1.0,Mission Control Client,,0,,,,,,,,,,,,,,"Also, the icons should be updated...",,,,,,,,,,,JMC-7662,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|hzzyuv:d0i",9223372036854775807,,JMC 8.1 RDS 1,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@1c80c3d6,,,,,,,,,"2021-06-16 04:03;roboduke;Changeset: 8e2988ed
Author:    Marcus Hirt <hirt@openjdk.org>
Date:      2021-06-16 11:03:05 +0000
URL:       https://git.openjdk.java.net/jmc/commit/8e2988edfd081dc34770ef54c5657a6d072399a9
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
"Change artifact id from ""org.openjdk.jmc.agent"" to ""agent""",JMC-7267,5051477,Bug,Resolved,JMC,Java Mission Control,software,hirt,The production time profiling and diagnostics tools-suite for the HotSpot JDK.,,P4,Fixed,reinhapa,reinhapa,reinhapa,2021-06-09 10:57,2022-04-06 22:20,2023-10-01 09:57,2021-06-10 19:45,,,,,,,,8.1.0,Infrastructure,,0,,,,,,,,,,,,,,,,,,,,,,,,,JMC-7661,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2t5n7:",9223372036854775807,,JMC 8.1 RDS 1,,,,,,,,,,,"2021-06-10 19:45;roboduke;Changeset: d622dd3f
Author:    Patrick Reinhart <reinhapa@openjdk.org>
Committer: Guru Hb <ghb@openjdk.org>
Date:      2021-06-11 02:44:59 +0000
URL:       https://git.openjdk.java.net/jmc/commit/d622dd3fa3553885c6369c5c2937780cab21f0c5
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
README.md should mention that the build script works for Mac OS,JMC-7259,5050517,Bug,Resolved,JMC,Java Mission Control,software,hirt,The production time profiling and diagnostics tools-suite for the HotSpot JDK.,,P5,Fixed,ssatish,hirt,hirt,2021-05-26 12:45,2022-04-06 22:19,2023-10-01 09:57,2021-05-27 13:10,,,,,,,,8.1.0,docs,,0,,,,,,,,,,,,,,,,,,,,,,,,,JMC-7651,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2sztn:",9223372036854775807,,,,,,,,,,,,,"2021-05-27 13:10;roboduke;Changeset: b273c968
Author:    Gunnar Morling <gunnar.morling@googlemail.com>
Committer: Marcus Hirt <hirt@openjdk.org>
Date:      2021-05-27 20:09:44 +0000
URL:       https://git.openjdk.java.net/jmc/commit/b273c9688467d27af80f92ab5546f1fe7f5f17fd
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Use the public XLST classes for the release notes,JMC-7258,5050513,Bug,Resolved,JMC,Java Mission Control,software,hirt,The production time profiling and diagnostics tools-suite for the HotSpot JDK.,,P2,Fixed,reinhapa,hirt,hirt,2021-05-26 12:07,2022-04-06 22:19,2023-10-01 09:57,2021-05-27 17:21,,,,,,,,8.1.0,Release Engineering,,0,,,,,,,,,,,,,,,,,,,,,,,,,JMC-7652,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2szsr:",9223372036854775807,,JMC 8.1 Sprint 1,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@5dc4c445,,,,,,,,,"2021-05-27 17:21;roboduke;Changeset: 6478ba9f
Author:    Patrick Reinhart <reinhapa@openjdk.org>
Committer: Marcus Hirt <hirt@openjdk.org>
Date:      2021-05-28 00:21:19 +0000
URL:       https://git.openjdk.java.net/jmc/commit/6478ba9f83a0986e50981d9e77c69dfe8f318d34
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Use .jcheck/conf property to control version,JMC-7256,5049497,Bug,Resolved,JMC,Java Mission Control,software,hirt,The production time profiling and diagnostics tools-suite for the HotSpot JDK.,,P3,Fixed,ghb,hirt,hirt,2021-05-12 19:06,2022-04-06 22:18,2023-10-01 09:57,2021-05-13 06:01,,,,,,,,8.1.0,Infrastructure,,0,,,,,,,,,,,,,,As described in SKARA-1033.,,,,,,,,,,,JMC-7646,,,,,,,,,,,,,,,,,,,,,,SKARA-1039,,,,SKARA-1033,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2stj7:",9223372036854775807,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@312b13a5,,,,,,,,,"2021-05-13 06:00;roboduke;Changeset: 9852c99d
Author:    Marcus Hirt <hirt@openjdk.org>
Date:      2021-05-13 13:00:09 +0000
URL:       https://git.openjdk.java.net/jmc/commit/9852c99ddf67a12fbd48be8cc3537236ea601c03
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
ClassCastException when opening heap dump,JMC-7246,5047448,Bug,Resolved,JMC,Java Mission Control,software,hirt,The production time profiling and diagnostics tools-suite for the HotSpot JDK.,,P2,Fixed,hirt,hirt,hirt,2021-04-20 11:48,2022-04-06 22:18,2023-10-01 09:57,2021-04-25 02:25,,,,,,,,8.0.0,Mission Control Client,,0,,,,,,,,,,,,,,"As reported on the jmc-dev mailing list (https://mail.openjdk.java.net/pipermail/jmc-dev/2021-April/003530.html) by Tobias Stadler, a ClassCastException can be thrown when opening a heap dump with JOverflow:

java.lang.ClassCastException: class java.lang.Integer cannot be cast to class org.openjdk.jmc.joverflow.heap.model.JavaHeapObject (java.lang.Integer is in module java.base of loader 'bootstrap'; org.openjdk.jmc.joverflow.heap.model.JavaHeapObject is in unnamed module of loader org.eclipse.osgi.internal.loader.EquinoxClassLoader @718ad3a6)
	at org.openjdk.jmc.joverflow.heap.model.Snapshot.getObjectForId(Snapshot.java:208)
	at org.openjdk.jmc.joverflow.heap.model.Snapshot.dereferenceField(Snapshot.java:311)
	at org.openjdk.jmc.joverflow.heap.model.JavaObject.parseFields(JavaObject.java:253)
	at org.openjdk.jmc.joverflow.heap.model.JavaObject.getFields(JavaObject.java:83)
	at org.openjdk.jmc.joverflow.stats.BreadthFirstHeapScanner.scanObjectsFromRootObj(BreadthFirstHeapScanner.java:110)
	at org.openjdk.jmc.joverflow.stats.HeapScaner.analyzeViaAllObjectsEnum(HeapScaner.java:132)
	at org.openjdk.jmc.joverflow.stats.DetailedStatsCalculator.calculate(DetailedStatsCalculator.java:142)
	at org.openjdk.jmc.joverflow.stats.StandardStatsCalculator.calculate(StandardStatsCalculator.java:74)
	at org.openjdk.jmc.joverflow.ui.model.ModelLoader.run(ModelLoader.java:103)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
	at java.base/java.lang.Thread.run(Thread.java:829)


He proposes the following fix:
diff --git a/application/org.openjdk.jmc.joverflow/src/main/java/org/openjdk/jmc/joverflow/heap/model/Snapshot.java b/application/org.openjdk.jmc.joverflow/src/main/java/org/openjdk/jmc/joverflow/heap/model/Snapshot.java
index 16f56b57..64330571 100644
--- a/application/org.openjdk.jmc.joverflow/src/main/java/org/openjdk/jmc/joverflow/heap/model/Snapshot.java
+++ b/application/org.openjdk.jmc.joverflow/src/main/java/org/openjdk/jmc/joverflow/heap/model/Snapshot.java
@@ -771,7 +771,7 @@ public class Snapshot {
                        }
 
                        // Create fake instance class
-                       return new JavaClass(name, 0, 0, 0, 0, fields, JavaClass.NO_FIELDS, JavaClass.NO_VALUES, instSize,
+                       return new JavaClass(classID, name, 0, 0, 0, 0, fields, JavaClass.NO_FIELDS, JavaClass.NO_VALUES, instSize,
                                        getInMemoryInstanceSize(instSize));
                }",,,,,,,,,,,JMC-7641,JMC-7297,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2sh0z:",9223372036854775807,,,,,,,,,,,,,"2021-04-25 02:25;roboduke;Changeset: 917a95c4
Author:    Tobias Stadler <ts.stadler@gmx.de>
Committer: Marcus Hirt <hirt@openjdk.org>
Date:      2021-04-25 09:24:35 +0000
URL:       https://git.openjdk.java.net/jmc/commit/917a95c4
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Resolve discrepancy between JDK attributes coming from different JDK versions ,JMC-7243,5047043,Bug,Resolved,JMC,Java Mission Control,software,hirt,The production time profiling and diagnostics tools-suite for the HotSpot JDK.,,P3,Fixed,schaturvedi,schaturvedi,schaturvedi,2021-04-16 02:34,2023-01-11 02:35,2023-10-01 09:57,2022-07-21 22:48,8.0.0,,,,,,,8.3.0,Mission Control Core,,0,bugdb_32652459,,,,,,,,,,,,,"There is a discrepancy between JDK attributes values coming from different JDK versions and JMC is unable to handle it while exposing core API.

For ex:
 # _switchRate_ attribute in JDK 11 onwards have the content type as _frequency_ but pre JDK 11 the content type was _number_.
 # Pre JDK 9 the attribute name was _javalangthread_ whereas post JDK 9 its _thread._

Everything works fine on JMC UI but the issue exists while using core APIs. ",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JMC-7854,,,,,,,,,,,,,,,generic,,,,,,,,,generic,,,,,"0|i2sevv:",9223372036854775807,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@41b535f7,,,,,,,,,"2022-07-13 08:34;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jmc/pull/411
Date: 2022-07-13 15:22:54 +0000;;;","2022-07-21 22:48;roboduke;Changeset: e65b5fe6
Author:    Suchita Chaturvedi <schaturvedi@openjdk.org>
Date:      2022-07-22 05:46:13 +0000
URL:       https://git.openjdk.org/jmc/commit/e65b5fe601fab4b8417ed23b28971d7061dc5aab
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
javadoc -notimestamp option does not work on index.html,JDK-8268771,5051660,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,clanger,webbuggrp,webbuggrp,2021-06-11 07:39,2021-08-05 04:57,2023-10-01 09:57,2021-06-28 22:29,11,,,,,,,11.0.13,tools,,0,additional-information-received,dcsad,jdk11u-fix-request,jdk11u-fix-yes,reproducer-yes,webbug,,,,,,,,"A DESCRIPTION OF THE PROBLEM :
When running javadoc for a project, it still adds a timestamp to index.html of the generated JavaDocs

STEPS TO FOLLOW TO REPRODUCE THE PROBLEM :
I've created a project for reproducible build from this guide
https://maven.apache.org/guides/mini/guide-reproducible-builds.html

Plugins:

maven-jar-plugin 3.2.0
maven-javadoc-plugin 3.3.0
maven-source-plugin 3.2.1
 

This project has only one class

/**
 * Hello
 */
public class Hello {
}
 

Then I check buildinfo via

./mvnw clean verify -e -DskipTests artifact:buildinfo -Dbuildinfo.ignoreJavadoc=false


sha512 is always the same for reproducible-build-1.0-SNAPSHOT.jar and reproducible-build-1.0-SNAPSHOT-sources.jar

But for reproducible-build-1.0-SNAPSHOT-javadoc.jar it changes after each build

Cause of this behaviour is index.html file. Also can be found in target/apidocs folder after build.
It contains the line like
`<!-- Generated by javadoc (11.0.11) on Fri Jun 11 17:35:15 MSK 2021 -->`
and timestamp is different after each build



EXPECTED VERSUS ACTUAL BEHAVIOR :
EXPECTED -
Timestamp should not be generated because of the setting in the maven plugin
ACTUAL -
Timestamp generated

---------- BEGIN SOURCE ----------
Here is the example

https://github.com/varpa89/reproducible-build
---------- END SOURCE ----------

FREQUENCY : always


",,,,,,,,,,,JDK-8269631,,,,,,,,,,,,,,,,,,,JDK-8261784,,,,,,,JDK-8215599,,,,,,,,,,,,,,,generic,,,,,,,,,generic,,,,,"0|i2t6rv:",9223372036854775807,b01,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@7900061a,,,,,,,,,"2021-06-14 01:35;adev;I am not able to reproduce the issue. Maven terminates with error:

org.apache.maven.lifecycle.LifecyclePhaseNotFoundException: Unknown lifecycle phase "".ignoreJavadoc=false"". You must specify a valid lifecycle phase or a goal in the format <plugin-prefix>:<goal> or <plugin-group-id>:<plugin-artifact-id>[:<plugin-version>]:<goal>. Available lifecycle phases are: validate, initialize, generate-sources, process-sources, generate-resources, process-resources, compile, process-classes, generate-test-sources, process-test-sources, generate-test-resources, process-test-resources, test-compile, process-test-classes, test, prepare-package, package, pre-integration-test, integration-test, post-integration-test, verify, install, deploy, pre-clean, clean, post-clean, pre-site, site, post-site, site-deploy.
===================================
Requested submitter to update the reproducer;;;","2021-06-15 03:42;adev;The error got resolved using double quotes with -Dbuildinfo.ignoreJavadoc=false on Windows.
 ./mvnw clean verify -e -DskipTests artifact:buildinfo ""-Dbuildinfo.ignoreJavadoc=false"";;;","2021-06-15 03:43;adev;The issue is reproducible as javadoc puts timestamp inspite of using -notimestamp option in javadoc in index.html.
The bug was fixed in JDK14+.
JDK-8261784 is a duplicate bug.;;;","2021-06-15 08:04;adev;The issue is being discussed at : https://issues.apache.org/jira/browse/MJAVADOC-681;;;","2021-06-25 02:33;clanger;Fix request (11u) on behalf of Pavel Varchenko:
This timestamp issue has been fixed in JDK13 as part of JDK-8215599. It makes sense to repair it in JDK11 as well.;;;","2021-06-28 09:48;sgehwolf;OK. The idea is to only backport the change from JDK-8215599 to file src/jdk.javadoc/share/classes/jdk/javadoc/internal/doclets/formats/html/IndexRedirectWriter.java. Thus, a JDK 11u-only change. That makes sense as full JDK-8215599 seems too invasive.;;;","2021-06-28 22:29;roboduke;Changeset: d522372d
Author:    Pavel Varchenko <varpa89@gmail.com>
Committer: Christoph Langer <clanger@openjdk.org>
Date:      2021-06-29 05:28:32 +0000
URL:       https://git.openjdk.java.net/jdk11u-dev/commit/d522372d05e9dbea79e719a864385fee8cc67d51
;;;","2021-08-05 04:57;roboduke;Changeset: d522372d
Author:    Pavel Varchenko <varpa89@gmail.com>
Committer: Christoph Langer <clanger@openjdk.org>
Date:      2021-06-29 05:28:32 +0000
URL:       https://git.openjdk.java.net/jdk11u/commit/d522372d05e9dbea79e719a864385fee8cc67d51
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,
JavaFX MediaPlayer onEndOfMedia behaviour different from Javadoc,JDK-8268683,5051192,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,almatvee,webbuggrp,webbuggrp,2021-06-05 05:01,2021-07-08 08:57,2023-10-01 09:57,2021-06-30 16:40,jfx15,,,,,,,jfx17,javafx,,0,dcspn,noreg-doc,sn_96,webbug,,,,,,,,,,"A DESCRIPTION OF THE PROBLEM :
In the Javadoc of MediaPlayer, description part, it says 

""If the stop time of the cycle is reached and the cycle is to be played again, the event handler registered with the onRepeat property is invoked. If the stop time is reached and the cycle is not to be repeated, then the event handler registered with the onEndOfMedia property is invoked.""

However, the onEndOfMedia property is invoked after each cycle, no matter the cycle is to be repeated or not.

Please edit the doc or the code to make sure they match with each other.


",,,,,,,,,,,,,,,,,,,,,,,,JDK-8269640,,,,,,,,,,,,,,,,,,,,,,,,,,,,generic,,,,,,,,,generic,,,,,"0|i2t3vv:",9223372036854775807,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@712e7ab7,,,,,,,,,"2021-06-14 10:45;almatvee;This is doc issue, onEndOfMedia property is invoked each time we reach stopTime by design.;;;","2021-06-30 16:40;roboduke;Changeset: cfa60ff7
Author:    Alexander Matveev <almatvee@openjdk.org>
Date:      2021-06-30 23:39:30 +0000
URL:       https://git.openjdk.java.net/jfx/commit/cfa60ff7a54edcfd099f08585df71e1f7fc09ddb
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
yield statements doesn't allow ~ or ! unary operators in expression,JDK-8268670,5051699,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,gli,webbuggrp,webbuggrp,2021-06-12 06:19,2021-06-20 21:37,2023-10-01 09:57,2021-06-14 12:03,14,15,16,17,,,,17,tools,,0,dcsad,reproducer-yes,webbug,,,,,,,,,,,"A DESCRIPTION OF THE PROBLEM :
JLS 14.21 for Java 16 states that

YieldStatement:
   yield Expression ;

but the relevant code parsing this expression does not allow expressions starting with ~ or !:
https://github.com/openjdk/jdk/blob/5cee23a9ed0b7fe2657be7492d9c1f78fcd02ebf/src/jdk.compiler/share/classes/com/sun/tools/javac/parser/JavacParser.java#L2662-L2665

STEPS TO FOLLOW TO REPRODUCE THE PROBLEM :
Compile the attached source code.


EXPECTED VERSUS ACTUAL BEHAVIOR :
EXPECTED -
The program compiles successfully
ACTUAL -
> javac Yield.java
Yield.java:5: error: not a statement
        yield !1;
        ^
Yield.java:5: error: ';' expected
        yield !1;
             ^
2 errors


---------- BEGIN SOURCE ----------
class Yield {
  public static void main(String... args) {
    int value = switch (1) {
      default -> {
        yield !1;
      }
    };                                                                                                                                                                                 
  }
}

---------- END SOURCE ----------

CUSTOMER SUBMITTED WORKAROUND :
Wrap the expression in ()

FREQUENCY : always


",,,,,,,,,,,JDK-8268834,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"2021-06-14 03:02;adev;Yield.java;https://bugs.openjdk.org/secure/attachment/95121/Yield.java",,,,,,,,,,,generic,,,,,,,,,generic,,,,,"0|i2t70j:",9223372036854775807,b27,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4dca67bd,,,,,,,,,"2021-06-14 03:06;adev;The issue is reproducible with JDK 14 till JDK 17. 
On compilation javac throws:
Yield.java:5: error: not a statement
        yield !true;
        ^
Yield.java:5: error: ';' expected
        yield !true;


As shown by the submitter, JavacParser does not allow parsing the unary operators with yield statements https://github.com/openjdk/jdk/blob/5cee23a9ed0b7fe2657be7492d9c1f78fcd02ebf/src/jdk.compiler/share/classes/com/sun/tools/javac/parser/JavacParser.java#L2662-L2665;;;","2021-06-14 06:55;gli;The demo should be the following code:

class Yield {
  public static void main(String... args) {
    int value = switch (1) {
      default -> {
        yield ~1;
      }
    };
  }
}

or 

class Yield {
  public static void main(String... args) {
    boolean value = switch (1) {
      default -> {
        yield !true;
      }
    };
  }
}

Because the `!` cannot be applied to integer. And `~` cannot be applied to boolean.;;;","2021-06-14 07:05;gli;I would like to raise it to P3 and fix it at JDK 17. Because it is a common situation that we usually meet.;;;","2021-06-14 12:03;roboduke;Changeset: bca914b2
Author:    Guoxiong Li <gli@openjdk.org>
Committer: Vicente Romero <vromero@openjdk.org>
Date:      2021-06-14 19:02:23 +0000
URL:       https://git.openjdk.java.net/jdk17/commit/bca914b29e4cec918d4648fd048139b2c429c27d
;;;","2021-06-20 21:37;adev;Requested submitter to check if the issue is resolved in JDK 17 b26. The latest JDK can be downloaded from jdk.java.net/17/ ;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
The documentation of the Scanner.hasNextLine is incorrect,JDK-8268664,5051661,Bug,Closed,JDK,JDK,software,duke,,,P4,Fixed,igraves,webbuggrp,webbuggrp,2021-06-11 08:23,2021-08-31 01:14,2023-10-01 09:57,2021-07-02 12:48,16,,,,,,,18,core-libs,,0,dcsaw,noreg-doc,reproducer-yes,webbug,,,,,,,,,,"ADDITIONAL SYSTEM INFORMATION :
Windows 10

A DESCRIPTION OF THE PROBLEM :
The current description: ""Returns true if and only if this scanner has another line of input"" is incorrect. To return true it is enough that the input of a scanner contains any additional characters, it doesn't have to be a new line character.

See: https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Scanner.html#hasNextLine()

STEPS TO FOLLOW TO REPRODUCE THE PROBLEM :
import java.util.Scanner;

public class Temp {
	public static void main(String[] args) {
	    Scanner sc = new Scanner(""a b"");
	    sc.next();
	    System.out.println(sc.hasNextLine());
	}
}

EXPECTED VERSUS ACTUAL BEHAVIOR :
EXPECTED -
After executing sc.next() the scanner has no lines in the input other than the current line. hasNextLine() returns ""true if and only if this scanner has another line of input"". So according to the documentation the hasNextLine()  should return false.
ACTUAL -
the code prints ""true""

",,,,,,,,,,,,,,,,,,,,,,,,JDK-8269099,,,,,,,,,,,,,,,,,"2021-06-14 01:35;tongwan;Main.java;https://bugs.openjdk.org/secure/attachment/95118/Main.java",,,,,,,,,,,,,,,,,,,,,,,,,"0|i2t6s3:",9223372036854775807,b05,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@38ded199,,,,,,,Not verified,,"2021-06-14 01:35;tongwan;Instead of using sc.next(), use sc.nextLine() and sc.hasNextLine() will return false.
Moved to JDK for more evaluations.;;;","2021-06-15 13:58;igraves;I think the confusion here is that a line need not start or end with a delimiter. I suspect that this is generally accepted, but perhaps the docs could use a bit of clarification on this point?;;;","2021-07-02 12:47;roboduke;Changeset: 0d0f6a4b
Author:    Ian Graves <igraves@openjdk.org>
Date:      2021-07-02 19:46:54 +0000
URL:       https://git.openjdk.java.net/jdk/commit/0d0f6a4becfb14304f6cea9d3a1d113f049214c0
;;;","2021-07-08 22:56;tongwan;Requested the submitter review the fix at https://git.openjdk.java.net/jdk/commit/0d0f6a4becfb14304f6cea9d3a1d113f049214c0;;;","2021-08-31 01:14;tongwan;No response from the submitter.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
SVML lib shouldn't be generated when C2 is absent,JDK-8268643,5051696,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,jiefu,jiefu,jiefu,2021-06-12 01:51,2021-07-17 23:55,2023-10-01 09:57,2021-06-14 16:40,17,18,,,,,,17,infrastructure,,0,tencent-interest,vectorapi,,,,,,,,,,,,,,,,,,,,,,,JDK-8268841,,,,,,,,,,,,,,,,,,,,,,JDK-8265783,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2t6zv:",9223372036854775807,b27,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@429c566,,,,,,,,,"2021-06-14 16:40;roboduke;Changeset: 4a6da99f
Author:    Jie Fu <jiefu@openjdk.org>
Date:      2021-06-14 23:39:41 +0000
URL:       https://git.openjdk.java.net/jdk17/commit/4a6da99f28af6bdb8fbb66093ce4386623c77ae2
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
[foreign] assert(allocates2(pc)) failed: not in CodeBuffer memory with ShenandoahGC,JDK-8268641,5051694,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,jiefu,jiefu,jiefu,2021-06-11 19:26,2021-07-15 10:03,2023-10-01 09:57,2021-06-16 19:11,17,18,,,,,,17,hotspot,,0,gc-shenandoah,hs-comp-triaged,oracle-triage-17,tencent-interest,,,,,,,,,,"The following tests failed with -XX:+UseShenandoahGC.
```
java/foreign/stackwalk/TestStackWalk.java
java/foreign/valist/VaListTest.java
java/foreign/TestUpcall.java
java/foreign/StdLibTest.java
```

#
# A fatal error has been detected by the Java Runtime Environment:
#
#  Internal Error (/home/jvm/jdk/src/hotspot/share/asm/codeBuffer.hpp:186), pid=61728, tid=61746
#  assert(allocates2(pc)) failed: not in CodeBuffer memory: 0x00007f7ff5696fa0 <= 0x00007f7ff56974a1 <= 0x00007f7ff56974a0
#
# JRE version: OpenJDK Runtime Environment (18.0) (fastdebug build 18-internal+0-adhoc.jvm.jdk)
# Java VM: OpenJDK 64-Bit Server VM (fastdebug 18-internal+0-adhoc.jvm.jdk, mixed mode, sharing, tiered, compressed oops, compressed class ptrs, shenandoah gc, linux-amd64)
# Problematic frame:
# V  [libjvm.so+0x425f63]  CodeSection::set_end(unsigned char*)+0x53
#

Stack: [0x00007f7fecfe5000,0x00007f7fed0e6000],  sp=0x00007f7fed0e2918,  free space=1014k
Native frames: (J=compiled Java code, j=interpreted, Vv=VM code, C=native code)
V  [libjvm.so+0x425f63]  CodeSection::set_end(unsigned char*)+0x53
V  [libjvm.so+0x5b974f]  Assembler::emit_operand_helper(int, int, int, Address::ScaleFactor, int, RelocationHolder const&, int)+0x41f
V  [libjvm.so+0x5ba4ee]  Assembler::emit_operand(RegisterImpl*, RegisterImpl*, RegisterImpl*, Address::ScaleFactor, int, RelocationHolder const&, int) [clone .constprop.101]+0x6e
V  [libjvm.so+0x60d2dd]  Assembler::movq(RegisterImpl*, Address)+0xed
V  [libjvm.so+0x1576a84]  ShenandoahBarrierSetAssembler::load_reference_barrier(MacroAssembler*, RegisterImpl*, Address, unsigned long) [clone .constprop.36]+0xe84
V  [libjvm.so+0x157bd33]  ShenandoahBarrierSetAssembler::load_at(MacroAssembler*, unsigned long, BasicType, RegisterImpl*, Address, RegisterImpl*, RegisterImpl*)+0x313
V  [libjvm.so+0x11f6a95]  MacroAssembler::resolve_jobject(RegisterImpl*, RegisterImpl*, RegisterImpl*)+0x375
V  [libjvm.so+0x182d95f]  ProgrammableUpcallHandler::generate_optimized_upcall_stub(_jobject*, Method*, _jobject*, _jobject*)+0x1c8f
V  [libjvm.so+0x1828acd]  PUH_AllocateOptimizedUpcallStub+0x75d
j  jdk.internal.foreign.abi.ProgrammableUpcallHandler.allocateOptimizedUpcallStub(Ljava/lang/invoke/MethodHandle;Ljdk/internal/foreign/abi/ABIDescriptor;Ljdk/internal/foreign/abi/ProgrammableUpcallHandler$CallRegs;)J+0 jdk.incubator.foreign@18-internal
j  jdk.internal.foreign.abi.ProgrammableUpcallHandler.make(Ljdk/internal/foreign/abi/ABIDescriptor;Ljava/lang/invoke/MethodHandle;Ljdk/internal/foreign/abi/CallingSequence;)Ljdk/internal/foreign/abi/UpcallHandler;+380 jdk.incubator.foreign@18-internal
j  jdk.internal.foreign.abi.x64.sysv.CallArranger.arrangeUpcall(Ljava/lang/invoke/MethodHandle;Ljava/lang/invoke/MethodType;Ljdk/incubator/foreign/FunctionDescriptor;)Ljdk/internal/foreign/abi/UpcallHandler;+28 jdk.incubator.foreign@18-internal
j  jdk.internal.foreign.abi.x64.sysv.SysVx64Linker.upcallStub(Ljava/lang/invoke/MethodHandle;Ljdk/incubator/foreign/FunctionDescriptor;Ljdk/incubator/foreign/ResourceScope;)Ljdk/incubator/foreign/MemoryAddress;+29 jdk.incubator.foreign@18-internal
j  TestStackWalk.main([Ljava/lang/String;)V+18
v  ~StubRoutines::call_stub
V  [libjvm.so+0xd8f0de]  JavaCalls::call_helper(JavaValue*, methodHandle const&, JavaCallArguments*, JavaThread*)+0x4de
V  [libjvm.so+0x14c50db]  invoke(InstanceKlass*, methodHandle const&, Handle, bool, objArrayHandle, BasicType, objArrayHandle, bool, JavaThread*) [clone .constprop.488]+0xb4b
V  [libjvm.so+0x14c61dc]  Reflection::invoke_method(oop, Handle, objArrayHandle, JavaThread*)+0x1ac
V  [libjvm.so+0xf01273]  JVM_InvokeMethod+0x193
j  jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Ljava/lang/reflect/Method;Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/Object;+0 java.base@18-internal
j  jdk.internal.reflect.NativeMethodAccessorImpl.invoke(Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/Object;+133 java.base@18-internal
j  jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/Object;+6 java.base@18-internal
j  java.lang.reflect.Method.invoke(Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/Object;+59 java.base@18-internal
j  com.sun.javatest.regtest.agent.MainWrapper$MainThread.run()V+172
j  java.lang.Thread.run()V+11 java.base@18-internal
v  ~StubRoutines::call_stub
V  [libjvm.so+0xd8f0de]  JavaCalls::call_helper(JavaValue*, methodHandle const&, JavaCallArguments*, JavaThread*)+0x4de
V  [libjvm.so+0xd8f7f8]  JavaCalls::call_virtual(JavaValue*, Klass*, Symbol*, Symbol*, JavaCallArguments*, JavaThread*)+0x338
V  [libjvm.so+0xd8f9ac]  JavaCalls::call_virtual(JavaValue*, Handle, Klass*, Symbol*, Symbol*, JavaThread*)+0x8c
V  [libjvm.so+0xef2b69]  thread_entry(JavaThread*, JavaThread*)+0x89
V  [libjvm.so+0x17e6c7a]  JavaThread::thread_main_inner()+0x2fa
V  [libjvm.so+0x17e6f1d]  JavaThread::run()+0x23d
V  [libjvm.so+0x17eba28]  Thread::call_run()+0xf8
V  [libjvm.so+0x13bea44]  thread_native_entry(Thread*)+0x104",,,,,,,,,,,JDK-8268984,JDK-8270567,,,,,,,,,,,,,,,,,,,,,JDK-8264774,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2t6zf:",9223372036854775807,b28,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2021-06-14 04:36;chagedorn;ILW = Assertion failure in VM using Foreign Function and Memory API, with Shenandoah GC, use different GC = HLM = P3;;;","2021-06-16 19:11;roboduke;Changeset: 112ddb76
Author:    Jie Fu <jiefu@openjdk.org>
Date:      2021-06-17 02:10:52 +0000
URL:       https://git.openjdk.java.net/jdk17/commit/112ddb7633d8794d5c85e1b2cf0369ee2e0e349a
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
semaphores of AsyncLogWriter may be broken when JVM is exiting. ,JDK-8268638,5051690,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,xliu,xliu,xliu,2021-06-11 16:58,2021-07-15 10:09,2023-10-01 09:57,2021-06-17 15:29,17,,,,,,,18,hotspot,,0,hgupdate-sync,,,,,,,,,,,,,"currently, async log thread (the log flusher) doesn't quit at all. 
It assumes that OS reclaims all resources like thread, semaphore. 

when JVM is exiting,  it's possible to observe 
OSXSemaphore::wait() and OSXSemaphore::signal() fail with return value 15.
#define KERN_INVALID_NAME               15
/* The name doesn't denote a right in the task.

the crash sight looks like this: 
Target 0: (java) stopped.
(lldb) bt
* thread #9, name = 'Java: AsyncLog Thread', stop reason = breakpoint 2.2
  * frame #0: 0x0000000102dcdf4f libjvm.dylib`report_vm_error(file=""/Users/xxinliu/Devel/jdk/src/hotspot/os/bsd/semaphore_bsd.cpp"", line=66, error_msg=""assert(ret == 0) failed"", detail_fmt=""Failed to wait on semaphore"") at debug.cpp:270:17
    frame #1: 0x000000010372e5b1 libjvm.dylib`OSXSemaphore::wait(this=0x0000000103e22800) at semaphore_bsd.cpp:66:3
    frame #2: 0x0000000102da1f3e libjvm.dylib`Semaphore::wait(this=0x0000000103e227f8) at semaphore.hpp:55:39
    frame #3: 0x000000010342346f libjvm.dylib`AsyncLogLocker::AsyncLogLocker(this=0x000070000d627eb0) at logAsyncWriter.cpp:39:11
    frame #4: 0x0000000103422395 libjvm.dylib`AsyncLogLocker::AsyncLogLocker(this=0x000070000d627eb0) at logAsyncWriter.cpp:38:20
    frame #5: 0x0000000103422aed libjvm.dylib`AsyncLogWriter::write(this=0x0000000100214dc0) at logAsyncWriter.cpp:128:20
    frame #6: 0x0000000103422eb9 libjvm.dylib`AsyncLogWriter::run(this=0x0000000100214dc0) at logAsyncWriter.cpp:159:5
    frame #7: 0x0000000103927bae libjvm.dylib`Thread::call_run(this=0x0000000100214dc0) at thread.cpp:394:9
    frame #8: 0x0000000103634af7 libjvm.dylib`thread_native_entry(thread=0x0000000100214dc0) at os_bsd.cpp:591:11
    frame #9: 0x00007fff6c27a109 libsystem_pthread.dylib`_pthread_start + 148
    frame #10: 0x00007fff6c275b8b libsystem_pthread.dylib`thread_start + 15


It's Main thread is exiting. all static variables are destroying. therefore, OSXSemaphore may have been destroyed. 

* thread #2
  * frame #0: 0x00007fff31e03889 CoreDisplay`std::__1::unique_ptr<CoreDisplay::IOBacklightWrapper, std::__1::default_delete<CoreDisplay::IOBacklightWrapper> >::reset(CoreDisplay::IOBacklightWrapper*) + 9
    frame #1: 0x00007fff6c11f13c libsystem_c.dylib`__cxa_finalize_ranges + 319
    frame #2: 0x00007fff6c11f412 libsystem_c.dylib`exit + 55
    frame #3: 0x000000010011c871 libjli.dylib`apple_main(arg=0x00007ffeefbfe880) at java_md_macosx.m:309:5
    frame #4: 0x00007fff6c27a109 libsystem_pthread.dylib`_pthread_start + 148
    frame #5: 0x00007fff6c275b8b libsystem_pthread.dylib`thread_start + 15",,,,,,,,,,,JDK-8270601,JDK-8268977,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8229517,,,,,,,,,,,,,,,generic,,,,,,,,,os_x,,,,,"0|i2t6yj:",9223372036854775807,b03,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,,,"2021-06-12 17:10;xliu;The reason is that c++ runtime (libstdc++) declaims static variables. 
There are 3 static semaphore here. 
-Semaphore AsyncLogLocker::_lock(1)
-Semaphore AsyncLogWriter::_sem(0)
-Semaphore AsyncLogWriter::_io_sem(1)

Because they are static member data, semaphore_wait is waken and return with 15 if c++ runtime delete them.



;;;","2021-06-12 17:11;xliu;This bug only appears on MacOS/debug build.
;;;","2021-06-13 21:43;xliu;reproducible: 
 % ./build/macosx-x86_64-server-fastdebug/jdk/bin/java -Xlog:async -Xlog:'all=trace:file=all.log::filecount=0'  -version
openjdk version ""17-internal"" 2021-09-14
OpenJDK Runtime Environment (fastdebug build 17-internal+0-adhoc.xxinliu.jdk)
OpenJDK 64-Bit Server VM (fastdebug build 17-internal+0-adhoc.xxinliu.jdk, mixed mode)
# To suppress the following error report, specify this argument
# after -XX: or in .hotspotrc:  SuppressErrorAt=/semaphore_bsd.cpp:57
#;;;","2021-06-15 11:30;mseledtsov;ILW = HLM = P3;;;","2021-06-17 15:28;dcubed;Robo Duke added a comment - 2 hours ago
Changeset: fa3b44d4
Author: Xin Liu <xliu@openjdk.org>
Committer: Paul Hohensee <phh@openjdk.org>
Date: 2021-06-17 20:27:14 +0000
URL: https://git.openjdk.java.net/jdk/commit/fa3b44d43811dca8c609d6c61a58680835abf8e3;;;","2021-06-17 15:29;dcubed;Fix was pushed while main bug was targeted to '17'. Reset the main bug to fixed in '18' and copied the Robo Duke entry here.;;;","2021-06-17 15:51;xliu;hi, [~dcubed], 
I see the rule. JDK-8268977 is actually a ""forward""-port . 
If I want to have it in jdk17, I still need to backport it, right? 
;;;","2021-06-17 16:16;dholmes;This needs to be in 17. If it had been fixed in 17 it would have have been automatically forward ported to 18. Now it will need a manual backport to 17.

Other fixes in this area should have a new PR against 17 created.;;;","2021-06-18 07:46;dcubed;Traditionally the first integration uses the main bug which is why I updated this
bug to cover the JDK18 integration and switched JDK-8268977 to cover the
JDK17 case.

Normally, if you are planning to fix the bug in JDK17 and main (JDK18), you
would integrate in JDK17 first and the fix would automatically propagate to
main (JDK18). ;;;","2021-06-18 08:16;phh;What's the process for fixing a bug during rampdown?;;;","2021-06-18 08:20;dcubed;We're in JDP1 for JDK17. See https://openjdk.java.net/jeps/3;;;","2021-06-18 08:27;phh;Thanks for the pointer. From the doc, this issue is a P3 and therefore for JDP1 should have been allowed to push to 17 without an approval request.;;;","2021-06-18 16:09;roboduke;Changeset: b9d73376
Author:    Xin Liu <xliu@openjdk.org>
Committer: Paul Hohensee <phh@openjdk.org>
Date:      2021-06-18 21:29:55 +0000
URL:       https://git.openjdk.java.net/jdk/commit/b9d7337697bd1aa5581b1a28efb3a78c221f6592
;;;","2021-06-18 16:47;dholmes;Okay I am confused. Why does this issue appear to have had two changesets associated with it?

Update: because the backport to 17 has now also been forward-ported to 18. ;;;",,,,,,,,,,,,,,,,,,,,
Corrupt oop in ClassLoaderData,JDK-8268635,5051685,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,coleenp,wkemper,wkemper,2021-06-11 15:09,2021-07-22 08:23,2023-10-01 09:57,2021-07-07 05:41,11.0.11,,,,,,,18,hotspot,,0,amazon-interest,azul-interest,cds,garbage-collection,hgupdate-sync,jdk11u-fix-request,jdk11u-fix-yes,jdk13u-fix-request,jdk13u-fix-yes,jdk15u-fix-request,jdk15u-fix-yes,tencent-interest,,"Very occasionally (but frequently enough to cause problems), we see a crash in the Serial collector when it's visiting oops in the `ClassLoaderData`. In these cases, the application is invoked with `-Xshare:on`. The stack trace looks like:

```
V  [libjvm.so+0x6cba4c]  DefNewGeneration::copy_to_survivor_space(oopDesc*)+0xac
V  [libjvm.so+0x58869c]  FastScanClosure::do_oop(oopDesc**)+0x8c
V  [libjvm.so+0x60bb6a]  ClassLoaderData::oops_do(OopClosure*, bool, bool)+0x7a
V  [libjvm.so+0x6c9c8a]  CLDScanClosure::do_cld(ClassLoaderData*)+0x3a
V  [libjvm.so+0x60e3c9]  ClassLoaderDataGraph::roots_cld_do(CLDClosure*, CLDClosure*)+0x39
V  [libjvm.so+0x822beb]  GenCollectedHeap::young_process_roots(StrongRootsScope*, OopsInGenClosure*, OopsInGenClosure*, CLDClosure*, OopStorage::ParState<false, false>*)+0x26b
V  [libjvm.so+0x6cc8ed]  DefNewGeneration::collect(bool, bool, unsigned long, bool)+0x4bd
V  [libjvm.so+0x823c8d]  GenCollectedHeap::collect_generation(Generation*, bool, unsigned long, bool, bool, bool, bool)+0x26d
V  [libjvm.so+0x824548]  GenCollectedHeap::do_collection(bool, bool, unsigned long, bool, GenCollectedHeap::GenerationType)+0x2e8
V  [libjvm.so+0x8252b8]  GenCollectedHeap::satisfy_failed_allocation(unsigned long, bool)+0x1e8
V  [libjvm.so+0xf37f0f]  VM_GenCollectForAllocation::doit()+0x8f
V  [libjvm.so+0xf39547]  VM_Operation::evaluate()+0xe7
V  [libjvm.so+0xf3fa06]  VMThread::evaluate_operation(VM_Operation*) [clone .constprop.67]+0xb6
V  [libjvm.so+0xf3ff38]  VMThread::loop()+0x428
V  [libjvm.so+0xf403d3]  VMThread::run()+0x73
```

It's crashing on `oop->size()`. The oop here is passed in RDI, RAX holds the `klass` pointer (which is null here):
```
RAX=0x0 is NULL
...
RDI=0x0000000800099120 is pointing into metadata
```
The metadata here is mapped to the shared archive:
```
800000000-800003000 rwxp 00001000 fe:00 543305                           /var/lang/lib/server/runtime.jsa
800003000-80064b000 rw-p 00004000 fe:00 543305                           /var/lang/lib/server/runtime.jsa
80064b000-80107f000 r--p 0064c000 fe:00 543305                           /var/lang/lib/server/runtime.jsa
80107f000-801080000 rw-p 01080000 fe:00 543305                           /var/lang/lib/server/runtime.jsa
801080000-801a90000 r--p 01081000 fe:00 543305                           /var/lang/lib/server/runtime.jsa
```

Crash log file is attached. The environment here makes it difficult to collect core files or make changes to the command line parameters. I suspect it's an issue with CDS.",,,,,,,,,,,JDK-8270242,JDK-8270285,JDK-8270528,JDK-8270919,JDK-8270557,JDK-8270383,,,,,,,,,,,,,,JDK-8270024,,,,,,,,,,,"2021-06-11 15:08;wkemper;cds-trace.log;https://bugs.openjdk.org/secure/attachment/95103/cds-trace.log","2021-06-14 11:34;iklam;disasm-by-gcc-7.3.0-1.s;https://bugs.openjdk.org/secure/attachment/95131/disasm-by-gcc-7.3.0-1.s","2021-06-14 11:17;iklam;disasm.s;https://bugs.openjdk.org/secure/attachment/95129/disasm.s","2021-06-14 14:09;wkemper;hs_err_11.0.8+10.log;https://bugs.openjdk.org/secure/attachment/95135/hs_err_11.0.8%2B10.log","2021-06-14 14:09;wkemper;hs_err_11.0.9.1+12.log;https://bugs.openjdk.org/secure/attachment/95134/hs_err_11.0.9.1%2B12.log","2021-06-14 14:09;wkemper;hs_err_2.log;https://bugs.openjdk.org/secure/attachment/95138/hs_err_2.log","2021-06-14 14:09;wkemper;hs_err_3.log;https://bugs.openjdk.org/secure/attachment/95136/hs_err_3.log","2021-06-14 14:09;wkemper;hs_err_4.log;https://bugs.openjdk.org/secure/attachment/95137/hs_err_4.log","2021-06-14 14:09;wkemper;hs_err_mark_and_push.log;https://bugs.openjdk.org/secure/attachment/95132/hs_err_mark_and_push.log","2021-06-14 14:09;wkemper;hs_err_possibly_not_related.log;https://bugs.openjdk.org/secure/attachment/95133/hs_err_possibly_not_related.log",,x86,,,,,,,,,linux,,,,,"0|i2t6xf:",9223372036854775807,b07,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,,,"2021-06-14 00:13;stefank;Moving over to Runtime for initial assessment since there's a hint that this could be related to CDS.;;;","2021-06-14 11:05;iklam;[~wkemper] 

[1] could you upload a version of this exact JDK build so that I can find out what 0x0000000800099120 points to?

# JRE version: OpenJDK Runtime Environment Corretto-11.0.11.9.1 (11.0.11+9) (build 11.0.11+9-LTS)
# Java VM: OpenJDK 64-Bit Server VM Corretto-11.0.11.9.1 (11.0.11+9-LTS, mixed mode, sharing, compressed oops, serial gc, linux-amd64)

[2] Do you always see 0x0000000800099120 in the crash logs?

[3] Could you upload a few more crash logs so we can see what's in common?;;;","2021-06-14 12:19;iklam;The crash is at this point of DefNewGeneration::copy_to_survivor_space, where <s> is evaluated just before calling into _old_gen->promote(old, s):

oop DefNewGeneration::copy_to_survivor_space(oop old) {
  assert(is_in_reserved(old) && !old->is_forwarded(),
         ""shouldn't be scavenging this oop"");
  size_t s = old->size();
  oop obj = NULL;

  // Try allocating obj in to-space (unless too old)
  if (old->age() < tenuring_threshold()) {
    obj = (oop) to()->allocate_aligned(s);
  }

  // Otherwise try allocating obj tenured
  if (obj == NULL) {
    obj = _old_gen->promote(old, s);   // <<<<<<<<<< HERE:   s = old->klass()->oop_size(old)

See disasm.s, the crashing sequence is:

   0x40227a <dump+250>:   mov    (%rdi),%rax    // rdi = klass, rax = c++ vtptr
   0x40227d <dump+253>:   mov    %rbx,%rsi       // rsi = oop parameter to Klass::oop_size()
   0x402280 <dump+256>:   callq  *0x110(%rax)   // vtptr[0x110] = Klass::oop_size(oop)

Here's a normal operation sequence. This shows how 

(gdb) x/i $pc
=> 0x7ffff6361acc <DefNewGeneration::copy_to_survivor_space(oopDesc*)+172>:	callq  *0x110(%rax)

(gdb) x/10gx $rax
0x800a92380:	0x00007ffff60dc5f0	0x00007ffff60dc650
0x800a92390:	0x00007ffff60dc600	0x00007ffff60dc610
0x800a923a0:	0x00007ffff60dc620	0x00007ffff60dc630
0x800a923b0:	0x00007ffff629c8f0	0x00007ffff60dc670
0x800a923c0:	0x00007ffff65180d0	0x00007ffff6523060
(gdb) x/i 0x00007ffff60dc5f0
   0x7ffff60dc5f0 <Metadata::is_metadata() const volatile>:	push   %rbp
(gdb) x/i 0x00007ffff60dc650
   0x7ffff60dc650 <Klass::is_klass() const volatile>:	push   %rbp
(gdb) x/gx $rax + 0x110
0x800a92490:	0x00007ffff6527350
(gdb) x/i 0x00007ffff6527350
=> 0x7ffff6527350 <InstanceMirrorKlass::oop_size(oopDesc*) const>:	push   %rbp

(gdb) p/x $rdi
$15 = 0x80035c720
(gdb) p ((InstanceKlass*)$rdi)->_name
$16 = (Symbol *) 0x8003bb0b8
(gdb) p {char[17]}(((InstanceKlass*)$rdi)->_name->_body)
$21 = ""java/lang/Class\000""
;;;","2021-06-14 12:37;iklam;At the point of crash:

RSI=0x00000000e4eafb78   (oop, the <old> parameter to DefNewGeneration::copy_to_survivor_space).
RDI=0x0000000800099120  (old->klass(). This is a class in CDS)
RAX=0                                   vptr of old->klass()

The object is in eden space: (e4c00000 < e4eafb78 < e4eb0000)

def new generation   total 3072K, used 3072K [0x00000000e4c00000, 0x00000000e4f50000, 0x00000000edd50000)
eden space 2752K, 100% used [0x00000000e4c00000, 0x00000000e4eb0000, 0x00000000e4eb0000) <<<<< HERE
from space 320K, 100% used [0x00000000e4f00000, 0x00000000e4f50000, 0x00000000e4f50000)
to   space 320K,   2% used [0x00000000e4eb0000, 0x00000000e4eb2120, 0x00000000e4f00000)
tenured generation   total 6848K, used 2552K [0x00000000edd50000, 0x00000000ee400000, 0x0000000100000000)
the space 6848K,  37% used [0x00000000edd50000, 0x00000000edfce178, 0x00000000edfce200, 0x00000000ee400000)

I cannot explain how this could happen. If the class 0x0000000800099120 has been loaded from the CDS archive, and an object 0x00000000e4eafb78 has been created in this class, we must have invoked ((Klass*)0x0000000800099120)->oop_size() at least once for the allocation of 0x00000000e4eafb78, which means we must have successfully loaded a non-zero vtpr from this class.

Also, the vptrs of all CDS classes are written when the archive is created. They should never be modified at runtime. Unfortunately, the class 0x0000000800099120 is mapped at a RW space, so it's possible for the vptr to be overwritten by a write like

    *(int**)0x0000000800099120 = 0x0

======================
Possible explanations:

[a] vptr is overwritten. (if this is the case, do we always deterministically crash with fetching a NULL vtpr from the same klass, and if so, how would that happen?)

[b] some hardware issue with loading the vptr that causes it to be NULL intermittently.
;;;","2021-06-14 13:09;wkemper;Thank you for taking a look at this. Would just the libjvm.so file be sufficient for further debugging? I'll also gather up more of the crash reports. I'm also working to get the core files and shared archives from these crashes.;;;","2021-06-14 14:13;wkemper;I've attached a few more logs. One shows a crash in `mark_and_push` (also invoked by `ClassLoaderData::do_oops`). Another shows a collector crash, but it is not obviously related to the class loaders. There's also a crash log from 11.0.8. Some of the attachments look identical to the initial case, except that the RAX register holds 0x1. I've not yet compared the instruction pointer in these attachments to the disassembly yet.;;;","2021-06-14 17:45;iklam;hs_err_3.log and hs_err_4.log have the exact same cause, si_addr = 0x0000000b73932ba8

V  [libjvm.so+0x6c8677]  DefNewGeneration::copy_to_survivor_space(oopDesc*)+0x27 << <<<<crash
V  [libjvm.so+0x58554c]  FastScanClosure::do_oop(oopDesc**)+0x8c
V  [libjvm.so+0x608aaa]  ClassLoaderData::oops_do(OopClosure*, bool, bool)+0x7a
V  [libjvm.so+0x6c693a]  CLDScanClosure::do_cld(ClassLoaderData*)+0x3a
V  [libjvm.so+0x60b309]  ClassLoaderDataGraph::roots_cld_do(CLDClosure*, CLDClosure*)+0x39
siginfo: si_signo: 11 (SIGSEGV), si_code: 1 (SEGV_MAPERR), si_addr: 0x0000000b73932ba8

RDI=0x0000000b73932ba0 is an unknown value

+0x27 is this instruction:

   test   %al,%al                    # UseCompressedClassPointers
   jne    0x4022f4 <dump+372>
   mov    0x8(%rsi),%rdi             # rsi  = old, rdi = old->klass()
>>mov    0x8(%rdi),%r13d            # r13d = old->klass()->layout_helper() <<< crash
   cmp    $0x0,%r13d

This is even more weird than the failure in cds-trace.log.

Now it seems like the problem is not that the vptr of Klass is corrupted. Instead, It's probably because obj->klass() returns a bad value:

in hs_err_3.log and hs_err_4.log: obj->klass() returns an unmapped address: 0xb73932ba8
in cds-trace.log: obj->klass() returns a value that happens to be pointing into the metaspace, but is invalid (maybe not really a Klass pointer??)

==================
Note that hs_err_11.0.8+10.log and hs_err_11.0.9.1+12.log are also failing at copy_to_survivor_space(oopDesc*)+0x27, except that the si_addr(s) are different

hs_err_11.0.8+10.log  -> si_addr: 0x0000000b937b1978
hs_err_11.0.9.1+12.log -> si_addr: 0x0000000818608168

;;;","2021-06-14 17:55;iklam;[~stefank] summary of my evaluation so far:

+ different crashes point in DefNewGeneration::copy_to_survivor_space
+ all seem to be related to old->klass() returning an invalid value
++ only one such value is within metaspace range (need to verify if this is indeed a klass pointer), 4 other values are not
+ the <old> variable seems to point inside the eden space.

Also, there doesn't seem to be a strong relationship with CDS: since we are using SerialGC, the archived heap is disabled. ClassLoaderData::oops_do are used for java_mirrors and ConstantPool::resolved_references(). With SerialGC, these are created the same way, whether CDS is enabled or not.

I am assigning back to GC team to check why old->klass() could return a bad value (or whether the handles used by ClassLoaderData::oops_do are indeed still pointing to valid objects).
;;;","2021-06-14 18:06;iklam;[~wkemper] thanks for the new log files!

To help further analysis, it would be best if you can provide the full JDK binaries as well as the /var/lang/lib/server/runtime.jsa file. Our build may be different than yours (in terms of composition of lib/modules, etc).

Alternatively, to verify whether 0x0000000800099120 is indeed a Klass pointer, you can run this:

$ ./images/jdk/bin/java  -Xshare:on -XX:SharedArchiveFile=/var/lang/lib/server/runtime.jsa -XX:+PrintSharedArchiveAndExit -XX:+PrintSharedDictionary -version

You need to use the exact same runtime.jsa as used by cds-trace.log

This will give you output like this:

 973: ^sun.nio.cs.HistoricallyNamedCharset, loader data <shared, not restored>
 973: ^java.util.stream.ReduceOps$ReduceTask, loader data <shared, not restored>
 973: ^sun.launcher.LauncherHelper, loader data <shared, not restored>
 975: ^java.util.stream.Streams, loader data <shared, not restored>

Please modify Dictionary::print_on(...) like this:

-      st->print(""%4d: %s%s"", index, is_defining_class ? "" "" : ""^"", e->external_name());
+      st->print(""%4d: %p %s%s"", index, e, is_defining_class ? "" "" : ""^"", e->external_name());

so that the Klass pointer is printed. Then you can check whether 0x0000000800099120 is inside the output. If you cannot see this inside the output, it means 0x0000000800099120 is just a random value and is not an actual Klass pointer.

=========
You also need to disable this block in filemap.cpp

+#if 0
  if (strncmp(_header->_jvm_ident, header_version, JVM_IDENT_MAX-1) != 0) {
    log_info(cds)(""_jvm_ident expected: %s"", header_version);
    log_info(cds)(""             actual: %s"", _header->_jvm_ident);
    FileMapInfo::fail_continue(""The shared archive file was created by a different""
                  "" version or build of HotSpot"");
    return false;
  }
+#endif;;;","2021-06-15 01:12;stefank;[~iklam] It is still very unlikely to be a bug in the SerialGC, which we don't change a lot. The crash happens while scanning a CLD, so it is more likely to be a Compiler/RT bug. Did you figure out what root we read ""old"" from? Was it the _class_loader or anywhere inside the ""resolved references""?;;;","2021-06-15 07:19;iklam;[~stefank] I am not sure if what ""old"" is pointing to.

[~wkemper] For further investigation, I think we need the core files.;;;","2021-06-15 07:47;stefank;ClassLoaderDataGraph::roots_cld_do delegates the scanning to the passed in closure (CLDScanClosure), which calls ClassLoaderData::oops_do, which visits the _handles that contains the class_loader():

```
ClassLoaderData::ClassLoaderData(...) :
...
    _class_loader = _handles.add(h_class_loader());
```

```
void ClassLoaderData::oops_do(OopClosure* f, int claim_value, bool clear_mod_oops) {
...
  _handles.oops_do(f);
```
;;;","2021-06-15 11:27;mseledtsov;ILW = HLM = P3;;;","2021-06-15 12:17;stefank;I took a look at one of the hs_err files, and see that only young gen collections were run. This means that no class unloading has been done. This also means that all CLDs are visited by the GCs (they are treated as strong roots by the young gen collection). However, the Serial GC code that scans the CLDs, has an optimization that it only visits the oops of CLDs if it could potentially contain a pointer to the young gen. This can be seen here:

```
void CLDScanClosure::do_cld(ClassLoaderData* cld) {
...
  // If the cld has not been dirtied we know that there's
  // no references into  the young gen and we can skip it.
  if (cld->has_modified_oops()) {

    // Tell the closure which CLD is being scanned so that it can be dirtied
    // if oops are left pointing into the young gen.
    _scavenge_closure->set_scanned_cld(cld);

    // Clean the cld since we're going to scavenge all the metadata.
    cld->oops_do(_scavenge_closure, ClassLoaderData::_claim_none, /*clear_modified_oops*/true);

    _scavenge_closure->set_scanned_cld(NULL);
  }
```

Now, this requires that code that adds an oop to the CLD also calls record_modified_oops(). For example, take a look at:
```
OopHandle ClassLoaderData::add_handle(Handle h) {
  MutexLocker ml(metaspace_lock(),  Mutex::_no_safepoint_check_flag);
  record_modified_oops();
  return _handles.add(h());
}
```

It calls record_modified_oops() and adds the oop (extracted from the Handle). However, there is another path that does not call record_modified_oops():
```
void ClassLoaderData::init_handle_locked(OopHandle& dest, Handle h) {
  MutexLocker ml(metaspace_lock(),  Mutex::_no_safepoint_check_flag);
  if (dest.resolve() != NULL) {
    return;
  } else {
    dest = _handles.add(h());
  }
}
```

I wonder if this is the bug that is causing this crash?;;;","2021-06-15 12:19;wkemper;[~iklam] This is the distribution of the JDK being used here: https://corretto.aws/downloads/resources/11.0.11.9.1/amazon-corretto-11.0.11.9.1-linux-x64.tar.gz (corresponds to this tag: https://github.com/corretto/corretto-11/tree/11.0.11.9.1 . 

Unfortunately, it doesn't look like I'm able to share the archive with you. However, I was able to analyze it per your suggestion and I do _not_ see the address of the bad pointer in the dump of the dictionary.  Some things nearby:
```
% grep 800099 dictionary.dump
  84: 0x800099898 ^fasterxml.jackson.databind.ser.ContainerSerializer, loader data <shared, not restored>
  94: 0x800099200 ^fasterxml.jackson.databind.ser.std.StdArraySerializers$ShortArraySerializer, loader data <shared, not restored>
 709: 0x8000995d8 ^fasterxml.jackson.databind.ser.ContextualSerializer, loader data <shared, not restored>
```

I have a question about something you wrote earlier:

> Also, there doesn't seem to be a strong relationship with CDS: since we are using SerialGC, the archived heap is disabled. ClassLoaderData::oops_do are used for ?java_mirrors and ConstantPool::resolved_references(). With SerialGC, these are created the same way, whether CDS is enabled or not.


Are you saying that because SerialGC is being used, it negates some of the performance gain of using -Xshare:on?

;;;","2021-06-15 13:56;wkemper;[~stefank] It sounds like you're saying there could be a case where a young generation collect would not mark these class loader data oops as part of the root set - which could lead to some oops being erroneously collected?;;;","2021-06-16 08:45;coleenp;[~stefank]'s diagnosis looks correct.The function init_handle_locked doesn't record that it's added a modified oop to the handle area, which could point into young gen.  This function is called for CDS when the archive has a protection_domain in it.  I'll see if I can write a test and I'll fix the bug.;;;","2021-06-16 13:45;iklam;[~wkemper] yes, when Serial GC is used, it negates some of the performance gain of using -Xshare:on. We are trying to address that in JDK-8234679.;;;","2021-06-28 09:58;coleenp;[~wkemper] I spent some time trying to write a test for this and haven't succeeded yet.  Based on [~stefank]'s diagnosis, the fix is likely this simple:
$ git diff
diff --git a/src/hotspot/share/classfile/classLoaderData.cpp b/src/hotspot/share/classfile/classLoaderData.cpp
index 5d69014..3a2ae16 100644
--- a/src/hotspot/share/classfile/classLoaderData.cpp
+++ b/src/hotspot/share/classfile/classLoaderData.cpp
@@ -799,6 +799,7 @@ void ClassLoaderData::init_handle_locked(OopHandle& dest, Handle h) {
   if (dest.resolve() != NULL) {
     return;
   } else {
+    record_modified_oops();
     dest = _handles.add(h());
   }
 }

Would you be able to test it out?;;;","2021-07-06 08:15;wkemper;I've also spent some time trying to reproduce the crash, and also haven't succeeded yet. As I understand the code, the `init_handle_locked` method is only called when classes defined in a module (not a jar) are loaded from the shared archive by the platform or application class loader. In many cases, the class loader is made 'dirty' by follow on actions to complete class loading. ;;;","2021-07-06 08:47;coleenp;[~wkemper] Were you not able to reproduce the crash with the fix then? Since I couldn't write a test case, I'm going to send it out for review.  Your reading of the code matches mine.;;;","2021-07-06 08:58;wkemper;I wasn't able to reproduce the crash _without_ the fix, but I'm going to keep trying. Looking at the logs during my test runs, I have observed a state that _could_ lead to a crash (platform class loaded, but class loader not marked dirty), I just haven't seen an actual crash yet. For what it's worth, I do think the change to `init_handle_locked` looks good and should go in. Thanks for looking at this issue.;;;","2021-07-07 05:41;roboduke;Changeset: 3586a233
Author:    Coleen Phillimore <coleenp@openjdk.org>
Date:      2021-07-07 12:40:34 +0000
URL:       https://git.openjdk.java.net/jdk/commit/3586a233a49c979e87fed9df148d0bf3df2df38b
;;;","2021-07-07 18:01;hshi;In duplicate https://bugs.openjdk.java.net/browse/JDK-8270024,  we can repoduce this constantly with make run-test CONF=fastdebug TEST=""test/hotspot/jtreg/runtime/SharedArchiveFile/BootAppendTests.java"" JTREG=""VM_OPTIONS=-XX:+UseG1GC -XX:+ScavengeALot -XX:ScavengeALotInterval=200 -XX:-GCALotAtAllSafepoints"" on JDK11.

Our reproduce happens mainly at startup time, did this issue also mainly happen at startup time?;;;","2021-07-07 18:19;hshi;Checking hs_err, crash happens at startup time, same with our testcase.

Time: Thu Apr 22 00:43:38 2021 UTC elapsed time: 2.150015 seconds (0d 0h 0m 2s)
Time: Tue Mar 30 17:11:20 2021 UTC elapsed time: 3.976270 seconds (0d 0h 0m 3s)
;;;","2021-07-08 10:40;wkemper;Confirmed that [~coleenp]'s change fixes the crash in [~hshi]'s test case.;;;","2021-07-09 09:28;wkemper;Fix Request

Backport applies cleanly to both jdk11u-dev and jdk15u-dev. The fix was verified using the test case described in JDK-8270024.

Pull requests have been prepared for jdk11u-dev (https://github.com/openjdk/jdk11u-dev/pull/114) and jdk15u-dev (https://github.com/openjdk/jdk15u-dev/pull/76).;;;","2021-07-09 15:25;clanger;Any reason that this fix is not in jdk17 ([~coleenp])? Since JDK17 is going to be LTS I guess it should go in there before going into 11u... 
;;;","2021-07-09 15:37;wkemper;Apologies, didn't realize tip is now 18. Shall I open a PR in the JDK17 repo?;;;","2021-07-09 15:40;clanger;Yes, you can simply go and comment the jdk18 commit (https://git.openjdk.java.net/jdk/commit/3586a233a49c979e87fed9df148d0bf3df2df38b) with ""/backport jdk17"" - should be clean.;;;","2021-07-09 16:14;wkemper;Well that's handy. Thanks!;;;","2021-07-10 05:09;clanger;You don't need jdk17u-fix-request for the jdk17 repository. You just need to comply to the RDP rules. P3 bugfix in RDP1 is ok, so you can simply /integrate in the PR.;;;","2021-07-14 07:49;akozlov;Fix Request 13u

I would like to backport this to 13u for parity with 15u and 11u.;;;","2021-07-15 17:52;roboduke;Changeset: e104dede
Author:    William Kemper <wkemper@openjdk.org>
Committer: Christoph Langer <clanger@openjdk.org>
Date:      2021-07-15 16:27:30 +0000
URL:       https://git.openjdk.java.net/jdk/commit/e104dede6e5e518071e6ff59d206c8009420e2ab
;;;"
CLinker::toJavaString doesn't check for NULL address,JDK-8268633,5051682,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,mcimadamore,mcimadamore,mcimadamore,2021-06-11 14:28,2021-06-14 11:02,2023-10-01 09:57,2021-06-14 11:02,17,repo-panama,,,,,,,tools,,0,foreign-memaccess+abi,,,,,,,,,,,,,"Unsafe string conversions, like toJavaString(MemoryAddress) do not check that their input is not NULL

jshell> CLinker.toJavaString(MemoryAddress.NULL);
|  State engine terminated.
|  Restore definitions with: /reload -restore
$2 ==> 

Other unsafe methods like CLinker::freeMemory might also suffer from same issue.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2t6wr:",9223372036854775807,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@2251e2f8,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
SunJCE provider may throw unexpected NPE for un-initialized AES KW/KWP Ciphers,JDK-8268621,5051670,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,valeriep,valeriep,valeriep,2021-06-11 10:44,2021-06-17 07:35,2023-10-01 09:57,2021-06-14 13:36,,,,,,,,17,security-libs,,0,,,,,,,,,,,,,,"When using the AES KW and KWP ciphers from SunJCE provider, it is observed that unexpected NPE occur calling getIV() and getParameters() if init() is not yet called. When the cipher object has not yet been initialized with init(), the internal iv field has value 'null'. The getIV() should check for null value (meaning iv has not been set as no init() call takes place) before cloning the iv. As for getParameters(), it should also check for null iv and return a default parameters as the javadoc suggested.
",,,,,,,,,,,JDK-8268837,,,,,,,,,,,,,,,,,,,,,,JDK-8248268,,,,,,,,,,,,,,,,,,,,,,,,,,17,,,,,,,"0|i2t6u3:",9223372036854775807,b27,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@35a9b277,,,,,,,,,"2021-06-14 13:36;roboduke;Changeset: ee301596
Author:    Valerie Peng <valeriep@openjdk.org>
Date:      2021-06-14 20:34:44 +0000
URL:       https://git.openjdk.java.net/jdk17/commit/ee3015968d56ed6179b6bfbde3f004500dce2ce3
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
InfiniteLoopException test may fail on x86 platforms,JDK-8268620,5051669,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,serb,serb,serb,2021-06-11 10:26,2021-11-25 00:22,2023-10-01 09:57,2021-06-15 08:30,11,18,8,,,,,18,client-libs,,0,11-bp,8-bp,hgupdate-sync,jdk11u-fix-request,jdk11u-fix-yes,jdk13u-fix-request,jdk13u-fix-yes,jdk15u-fix-request,jdk15u-fix-yes,,,,,"This test posts lots of events to EDT from the different threads, and it checks that the robot.waitForIdle() on the main thread will not hang or throw an exception. And this test fails on x86. The post of events are implemented via wait/notifyAll, and the waitForIdle is also implemented via wait/notifyAll on the same monitor, and on x86 platform, the wait() in the robot.waitForIdle() is never interrupted, and it hangs forever.

I do not think this bug is specific to the x86, it is just accidently working fine on the mainline.",,,,,,,,,,,JDK-8270761,JDK-8277820,JDK-8268969,JDK-8270458,JDK-8270439,JDK-8268911,JDK-8277819,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,generic,,,,,,,,,generic,,,,,"0|i2t6tv:",9223372036854775807,b07,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@5a9b3fd3,,,,,,,,,"2021-06-15 08:30;roboduke;Changeset: 0b09129f
Author:    Sergey Bylokhov <serb@openjdk.org>
Date:      2021-06-15 15:29:33 +0000
URL:       https://git.openjdk.java.net/jdk/commit/0b09129faefb945c2f2c35dab2731961216d054e
;;;","2021-07-13 11:23;zgu;Fix Request (11u)

I would like to backport this patch to openjdk11u for parity with Oracle 11.0.13. 

Original patch applies cleanly and affected test passed.
;;;","2021-07-14 15:36;roboduke;Changeset: e5db9a94
Author:    Christoph Langer <clanger@openjdk.org>
Date:      2021-07-14 05:38:17 +0000
URL:       https://git.openjdk.java.net/jdk/commit/e5db9a9405d13cf4b72a8efa903cf8cdcf528e58
;;;","2021-11-25 00:17;yan;Fix request (13u, 15u):
I'd like to backport this test fix to the earlier releases, too. Applies cleanly in both cases, no problems detected running the test.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
[11u REDO] - WebSocket over authenticating proxy fails with NPE,JDK-8268617,5051664,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,inakonechnyy,inakonechnyy,inakonechnyy,2021-06-11 09:35,2021-08-05 04:57,2023-10-01 09:57,2021-06-28 04:30,11,,,,,,,11.0.13,core-libs,,0,fossbug,jdk11u-fix-request,jdk11u-fix-yes,reproducer-yes,webbug,,,,,,,,,"ADDITIONAL SYSTEM INFORMATION :
Platform independent, tested on Windows 10, Debian, Centos 8, Fedora 30
openjdk version ""11.0.5"" 2019-10-15
Tested with version 11, 12, 13, 14 EA and and 15 EA

A DESCRIPTION OF THE PROBLEM :
When using java.net.httpclient to connect to WebSocket via proxy that requires authentication it fails with NPE when handling 407 (Proxy Authentication Required)

It looks like problem is in handshake handling code that tries to do debug logging with object that is null.

Even after patching RawChanelTube.java to prevent NPE, it still fails with different error
""CheckFailedException: Unexpected HTTP response status code 407""

STEPS TO FOLLOW TO REPRODUCE THE PROBLEM :
When you try to connect to websocket via proxy that requires authentication, http client fails to properly handle 407 (proxy auth required) response as result fails to retry with properly set auth headers.

EXPECTED VERSUS ACTUAL BEHAVIOR :
EXPECTED -
Socket is opened and works.
ACTUAL -
with debug enabled this is the log

DEBUG: [HttpClient-1-SelectorManager] [2s 254ms] PlainHttpConnection(SocketTube(4)) ConnectEvent: finishing connect
DEBUG: [HttpClient-1-SelectorManager] [2s 254ms] PlainHttpConnection(SocketTube(4)) ConnectEvent: connect finished: true Local addr: /192.168.42.39:56565
DEBUG: [pool-2-thread-3] [2s 255ms] PlainHttpConnection(SocketTube(4)) finishConnect, setting connected=true
DEBUG: [pool-2-thread-3] [2s 255ms] PlainTunnelingConnection(SocketTube(4)) sending HTTP/1.1 CONNECT
DEBUG: [pool-2-thread-3] [2s 255ms] Exchange establishing exchange for socket://ws-feed.pro.coinbase.com:443/ CONNECT,
	 proxy=null
DEBUG: [pool-2-thread-3] [2s 255ms] ExchangeImpl get: HTTP/1.1: new Http1Exchange
DEBUG: [pool-2-thread-3] [2s 255ms] Exchange checkFor407: all clear
DEBUG: [pool-2-thread-3] [2s 255ms] Http1Exchange Sending headers only
DEBUG: [pool-2-thread-3] [2s 255ms] Http1AsyncReceiver(SocketTube(4)) Subscribed pending jdk.internal.net.http.Http1Response$HeadersReader@6bc9a6dd queue.isEmpty: true
DEBUG: [pool-2-thread-3] [2s 255ms] Http1AsyncReceiver(SocketTube(4)) delegate is now jdk.internal.net.http.Http1Response$HeadersReader@6bc9a6dd, demand=1, canRequestMore=true, queue.isEmpty=true
DEBUG: [pool-2-thread-3] [2s 255ms] Http1AsyncReceiver(SocketTube(4)) downstream subscription demand is 1
DEBUG: [pool-2-thread-3] [2s 255ms] Http1AsyncReceiver(SocketTube(4)) checkRequestMore: canRequestMore=true, hasDemand=true
DEBUG: [pool-2-thread-3] [2s 255ms] Http1AsyncReceiver(SocketTube(4)) downstream subscription demand is 1
DEBUG: [pool-2-thread-3] [2s 255ms] Http1AsyncReceiver(SocketTube(4)) checkRequestMore: canRequestMore=true, hasDemand=true
DEBUG: [pool-2-thread-3] [2s 255ms] Http1Exchange response created in advance
DEBUG: [pool-2-thread-3] [2s 255ms] Http1Exchange SocketTube(4) connecting flows
DEBUG: [pool-2-thread-3] [2s 255ms] SocketTube(4) connecting flows
DEBUG: [pool-2-thread-3] [2s 255ms] SocketTube(4) read publisher got subscriber
DEBUG: [pool-2-thread-3] [2s 255ms] SocketTube(4) registering subscribe event
DEBUG: [pool-2-thread-3] [2s 255ms] SocketTube(4) leaving read.subscribe:  Reading: [ops=0, demand=0, stopped=false], Writing: [ops=0, demand=0]
DEBUG: [pool-2-thread-3] [2s 255ms] Http1Publisher(SocketTube(4)) got subscriber: SocketTube(4)
DEBUG: [HttpClient-1-SelectorManager] [2s 255ms] SocketTube(4) subscribe event raised
DEBUG: [pool-2-thread-3] [2s 256ms] SocketTube(4) subscribed for writing
DEBUG: [pool-2-thread-3] [2s 256ms] SocketTube(4) write: registering startSubscription event
DEBUG: [HttpClient-1-SelectorManager] [2s 256ms] SocketTube(4) handling pending subscription for jdk.internal.net.http.Http1AsyncReceiver$Http1TubeSubscriber@58d43ff8
DEBUG: [HttpClient-1-SelectorManager] [2s 256ms] SocketTube(4) read demand reset to 0
DEBUG: [pool-2-thread-3] [2s 256ms] Http1Exchange requestAction.headers
DEBUG: [HttpClient-1-SelectorManager] [2s 256ms] SocketTube(4) calling onSubscribe
DEBUG: [HttpClient-1-SelectorManager] [2s 256ms] Http1AsyncReceiver(SocketTube(4)) Received onSubscribed from upstream
DEBUG: [HttpClient-1-SelectorManager] [2s 256ms] SocketTube(4) onSubscribe called
DEBUG: [HttpClient-1-SelectorManager] [2s 256ms] SocketTube(4) pending subscriber subscribed
DEBUG: [pool-2-thread-1] [2s 256ms] Http1AsyncReceiver(SocketTube(4)) downstream subscription demand is 1
DEBUG: [HttpClient-1-SelectorManager] [2s 256ms] SocketTube(4) write: starting subscription
DEBUG: [pool-2-thread-1] [2s 256ms] Http1AsyncReceiver(SocketTube(4)) checkRequestMore: canRequestMore=true, hasDemand=true
DEBUG: [pool-2-thread-3] [2s 256ms] Http1Exchange setting outgoing with headers
DEBUG: [HttpClient-1-SelectorManager] [2s 256ms] SocketTube(4) write: offloading requestMore
DEBUG: [pool-2-thread-3] [2s 256ms] Http1Exchange appending to outgoing DataPair [data=[java.nio.HeapByteBuffer[pos=0 lim=85 cap=85]], throwable=null]
DEBUG: [pool-2-thread-1] [2s 256ms] Http1AsyncReceiver(SocketTube(4)) Http1TubeSubscriber: requesting one more from upstream
DEBUG: [pool-2-thread-3] [2s 256ms] Http1Publisher(SocketTube(4)) WriteTask
DEBUG: [pool-2-thread-2] [2s 256ms] SocketTube(4) write: requesting more...
DEBUG: [pool-2-thread-1] [2s 256ms] SocketTube(4) got some demand for reading
DEBUG: [pool-2-thread-3] [2s 256ms] Http1Publisher(SocketTube(4)) hasOutgoing = true
DEBUG: [pool-2-thread-1] [2s 256ms] SocketTube(4) resuming read event
DEBUG: [pool-2-thread-2] [2s 256ms] Http1Publisher(SocketTube(4)) subscription request(1), demand=1
DEBUG: [pool-2-thread-3] [2s 256ms] Http1Exchange initiating completion of headersSentCF
DEBUG: [pool-2-thread-1] [2s 256ms] SocketTube(4) leaving request(1):  Reading: [ops=1, demand=1, stopped=false], Writing: [ops=0, demand=1]
DEBUG: [pool-2-thread-3] [2s 256ms] Http1Publisher(SocketTube(4)) onNext with 85 bytes
DEBUG: [pool-2-thread-2] [2s 256ms] SocketTube(4) leaving requestMore:  Reading: [ops=1, demand=1, stopped=false], Writing: [ops=0, demand=1]
DEBUG: [HttpClient-1-SelectorManager] [2s 256ms] SelectorAttachment Registering jdk.internal.net.http.SocketTube$InternalReadPublisher$ReadEvent@1b4a4034 for 1 (true)
DEBUG: [pool-2-thread-3] [2s 257ms] SocketTube(4) trying to write: 85
DEBUG: [pool-2-thread-3] [2s 257ms] SocketTube(4) wrote: 85
DEBUG: [pool-2-thread-3] [2s 257ms] SocketTube(4) write: requesting more...
DEBUG: [pool-2-thread-3] [2s 257ms] Http1Publisher(SocketTube(4)) subscription request(1), demand=1
DEBUG: [pool-2-thread-3] [2s 257ms] SocketTube(4) leaving requestMore:  Reading: [ops=1, demand=1, stopped=false], Writing: [ops=0, demand=1]
DEBUG: [pool-2-thread-3] [2s 257ms] SocketTube(4) leaving w.onNext Reading: [ops=1, demand=1, stopped=false], Writing: [ops=0, demand=1]
DEBUG: [pool-2-thread-3] [2s 257ms] Http1Publisher(SocketTube(4)) WriteTask
DEBUG: [pool-2-thread-3] [2s 257ms] Http1Publisher(SocketTube(4)) hasOutgoing = false
DEBUG: [pool-2-thread-3] [2s 257ms] Exchange checkFor407: all clear
DEBUG: [pool-2-thread-3] [2s 257ms] Exchange sendRequestBody
DEBUG: [pool-2-thread-3] [2s 257ms] Http1Exchange sendBodyAsync
DEBUG: [pool-2-thread-3] [2s 257ms] Http1Exchange bodySubscriber is null
DEBUG: [pool-2-thread-3] [2s 257ms] Http1Exchange appending to outgoing DataPair [data=[java.nio.HeapByteBuffer[pos=0 lim=0 cap=0]], throwable=null]
DEBUG: [pool-2-thread-3] [2s 257ms] Http1Publisher(SocketTube(4)) WriteTask
DEBUG: [pool-2-thread-3] [2s 257ms] Http1Publisher(SocketTube(4)) hasOutgoing = true
DEBUG: [pool-2-thread-3] [2s 257ms] Http1Exchange initiating completion of bodySentCF
DEBUG: [pool-2-thread-3] [2s 257ms] Http1Publisher(SocketTube(4)) completed, stopping jdk.internal.net.http.common.SequentialScheduler@5dbf8a63
DEBUG: [pool-2-thread-3] [2s 257ms] Http1Exchange sendBodyAsync completed successfully
DEBUG: [pool-2-thread-3] [2s 257ms] Http1Exchange reading headers
DEBUG: [pool-2-thread-3] [2s 257ms] Http1Response(id=8, PlainHttpConnection(SocketTube(4))) Reading Headers: (remaining: 0) READING_HEADERS
DEBUG: [pool-2-thread-3] [2s 257ms] Http1Response(id=8, PlainHttpConnection(SocketTube(4))) First time around
DEBUG: [pool-2-thread-3] [2s 257ms] Http1Response(id=8, PlainHttpConnection(SocketTube(4))) headersReader is not yet completed
DEBUG: [HttpClient-1-SelectorManager] [2s 300ms] SelectorAttachment Registering jdk.internal.net.http.SocketTube$InternalReadPublisher$ReadEvent@1b4a4034 for 0 (false)
DEBUG: [HttpClient-1-SelectorManager] [2s 300ms] SocketTube(4) read bytes: 3628
DEBUG: [HttpClient-1-SelectorManager] [2s 300ms] Http1AsyncReceiver(SocketTube(4)) Putting 3628 bytes into the queue
DEBUG: [HttpClient-1-SelectorManager] [2s 300ms] SocketTube(4) resuming read event
DEBUG: [HttpClient-1-SelectorManager] [2s 300ms] SelectorAttachment Registering jdk.internal.net.http.SocketTube$InternalReadPublisher$ReadEvent@1b4a4034 for 1 (false)
DEBUG: [pool-2-thread-1] [2s 300ms] Http1AsyncReceiver(SocketTube(4)) Got 3628 bytes for delegate jdk.internal.net.http.Http1Response$HeadersReader@6bc9a6dd
DEBUG: [HttpClient-1-SelectorManager] [2s 300ms] SocketTube(4) leaving read() loop after onNext:  Reading: [ops=1, demand=0, stopped=false], Writing: [ops=0, demand=1]
DEBUG: [pool-2-thread-1] [2s 301ms] Http1AsyncReceiver(SocketTube(4)) downstream subscription demand is 1
DEBUG: [pool-2-thread-1] [2s 301ms] Http1AsyncReceiver(SocketTube(4)) Forwarding 3628 bytes to delegate jdk.internal.net.http.Http1Response$HeadersReader@6bc9a6dd
DEBUG: [pool-2-thread-1] [2s 301ms] Http1Response(id=8, PlainHttpConnection(SocketTube(4))) Sending 3628/3628 bytes to header parser
DEBUG: [pool-2-thread-1] [2s 301ms] Http1Response(id=8, PlainHttpConnection(SocketTube(4))) Parsing headers completed. bytes=406
DEBUG: [pool-2-thread-1] [2s 301ms] Http1AsyncReceiver(SocketTube(4)) Unsubscribed jdk.internal.net.http.Http1Response$HeadersReader@6bc9a6dd
DEBUG: [pool-2-thread-1] [2s 301ms] Http1Response(id=8, PlainHttpConnection(SocketTube(4))) Reading Headers: creating Response object; state is now READING_BODY
DEBUG: [pool-2-thread-1] [2s 302ms] Http1Exchange getResponseAsync completed successfully
DEBUG: [pool-2-thread-1] [2s 302ms] PlainTunnelingConnection(SocketTube(4)) got response: 407
DEBUG: [pool-2-thread-1] [2s 302ms] PlainHttpConnection(SocketTube(4)) Closing channel: channel registered with selector, key.interestOps=1, sa.interestOps=1
DEBUG: [pool-2-thread-1] [2s 302ms] SocketTube(4) got read error: java.io.IOException: connection closed locally
DEBUG: [pool-2-thread-1] [2s 302ms] SocketTube(4) pausing read event
DEBUG: [pool-2-thread-1] [2s 303ms] SocketTube(4) Sending error java.io.IOException: connection closed locally to subscriber jdk.internal.net.http.Http1AsyncReceiver$Http1TubeSubscriber@58d43ff8
DEBUG: [pool-2-thread-1] [2s 303ms] SocketTube(4) forwarding error to subscriber: java.io.IOException: connection closed locally
DEBUG: [pool-2-thread-1] [2s 303ms] Http1AsyncReceiver(SocketTube(4)) onError: java.io.IOException: connection closed locally
DEBUG: [HttpClient-1-SelectorManager] [2s 303ms] SelectorAttachment Registering jdk.internal.net.http.SocketTube$InternalReadPublisher$ReadEvent@1b4a4034 for 0 (false)
DEBUG: [HttpClient-1-SelectorManager] [2s 303ms] SocketTube(4) abort: java.nio.channels.ClosedChannelException
DEBUG: [HttpClient-1-SelectorManager] [2s 303ms] HttpClientImpl(1) Got java.io.IOException while handling registration events
DEBUG: [pool-2-thread-1] [2s 303ms] Http1AsyncReceiver(SocketTube(4)) recorded java.io.IOException: connection closed locally
	 delegate: null		 queue.isEmpty: false java.io.IOException: connection closed locally
DEBUG: [HttpClient-1-SelectorManager] [2s 303ms] SocketTube(4) abort: java.io.IOException: Channel closed
java.io.IOException: connection closed locally
	at java.net.http/jdk.internal.net.http.SocketTube.signalClosed(SocketTube.java:157)
	at java.net.http/jdk.internal.net.http.PlainHttpConnection.close(PlainHttpConnection.java:277)
	at java.net.http/jdk.internal.net.http.Http1Response.ignoreBody(Http1Response.java:264)
	at java.net.http/jdk.internal.net.http.Http1Exchange.ignoreBody(Http1Exchange.java:383)
	at java.net.http/jdk.internal.net.http.Exchange.ignoreBody(Exchange.java:187)
	at java.net.http/jdk.internal.net.http.PlainTunnelingConnection.lambda$connectAsync$2(PlainTunnelingConnection.java:84)
	at java.base/java.util.concurrent.CompletableFuture$UniCompose.tryFire(CompletableFuture.java:1146)
	at java.base/java.util.concurrent.CompletableFuture.postComplete(CompletableFuture.java:506)
	at java.base/java.util.concurrent.CompletableFuture.postFire(CompletableFuture.java:610)
	at java.base/java.util.concurrent.CompletableFuture$UniApply.tryFire(CompletableFuture.java:649)
	at java.base/java.util.concurrent.CompletableFuture$Completion.run(CompletableFuture.java:478)
	at java.net.http/jdk.internal.net.http.HttpClientImpl$DelegatingExecutor.execute(HttpClientImpl.java:155)
	at java.base/java.util.concurrent.CompletableFuture$UniCompletion.claim(CompletableFuture.java:568)
	at java.base/java.util.concurrent.CompletableFuture$UniApply.tryFire(CompletableFuture.java:638)
	at java.base/java.util.concurrent.CompletableFuture.postComplete(CompletableFuture.java:506)
	at java.base/java.util.concurrent.CompletableFuture.complete(CompletableFuture.java:2144)
	at java.net.http/jdk.internal.net.http.Http1Response$HeadersReader.handle(Http1Response.java:686)
	at java.net.http/jdk.internal.net.http.Http1Response$HeadersReader.handle(Http1Response.java:612)
	at java.net.http/jdk.internal.net.http.Http1Response$Receiver.accept(Http1Response.java:603)
	at java.net.http/jdk.internal.net.http.Http1Response$HeadersReader.tryAsyncReceive(Http1Response.java:659)
	at java.net.http/jdk.internal.net.http.Http1AsyncReceiver.flush(Http1AsyncReceiver.java:233)
	at java.net.http/jdk.internal.net.http.common.SequentialScheduler$SynchronizedRestartableTask.run(SequentialScheduler.java:175)
	at java.net.http/jdk.internal.net.http.common.SequentialScheduler$CompleteRestartableTask.run(SequentialScheduler.java:147)
	at java.net.http/jdk.internal.net.http.common.SequentialScheduler$SchedulableTask.run(SequentialScheduler.java:198)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
	at java.base/java.lang.Thread.run(Thread.java:830)


---------- BEGIN SOURCE ----------
var  httpClient = HttpClient.newBuilder()
	   .proxy(...) // use proxy that requires auth
	   .authenticator(new java.net.Authenticator() {
            public PasswordAuthentication getPasswordAuthentication() {
                return this.getRequestorType() == RequestorType.PROXY ? new PasswordAuthentication(""proxyUser"", ""proxyPass"".toCharArray()) : null;
            }) 
	   .build();
	   
var webSocket = httpClient.newWebSocketBuilder()
	  .buildAsync(URI.create(""wss://url-to-webSocket""), new WebSocket.Listener() {
		  @Override
		  public void onOpen(WebSocket webSocket) {
			  webSocket.request(1);
			  System.out.println(""Socket opened"");
		  }
	  })
	  .join();
---------- END SOURCE ----------

FREQUENCY : always


",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8265099,JDK-8236859,JDK-8264988,,,,,,,,,,,,,x86_64,,,,,,,,,generic,,,,,"0|i2t6sr:",9223372036854775807,b01,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@446e124a,,,,,,,,,"2021-06-11 09:39;inakonechnyy;Request to redo backport of JDK-8264988 to OpenJDK 11;;;","2021-06-28 04:30;roboduke;Changeset: 8a40d251
Author:    Ilarion Nakonechnyy <Ilarion@azul.com>
Committer: Christoph Langer <clanger@openjdk.org>
Date:      2021-06-28 11:29:31 +0000
URL:       https://git.openjdk.java.net/jdk11u-dev/commit/8a40d251e18d002dd8221e6a1d2ec3c15754e70a
;;;","2021-08-05 04:57;roboduke;Changeset: 8a40d251
Author:    Ilarion Nakonechnyy <Ilarion@azul.com>
Committer: Christoph Langer <clanger@openjdk.org>
Date:      2021-06-28 11:29:31 +0000
URL:       https://git.openjdk.java.net/jdk11u/commit/8a40d251e18d002dd8221e6a1d2ec3c15754e70a
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
a few runtime/memory tests don't check exit code,JDK-8268612,5051653,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,iignatyev,iignatyev,iignatyev,2021-06-11 06:13,2021-08-03 15:02,2023-10-01 09:57,2021-07-21 12:47,17,,,,,,,17,hotspot,,0,noreg-self,testbug,,,,,,,,,,,,"`ReserveMemory.java`, `ReadFromNoaccessArea.java` and `TestLargePagesFlags.java` tests spawn new JVMs but don't check their exit code which might lead to both type-I and type-II errors",,,,,,,,,,,JDK-8271768,JDK-8271099,JDK-8271636,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2t6qb:",9223372036854775807,b33,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,,,"2021-06-15 11:08;mseledtsov;ILW = MLM = P4;;;","2021-07-21 12:47;roboduke;Changeset: 9b177a74
Author:    Igor Ignatyev <iignatyev@openjdk.org>
Date:      2021-07-21 19:47:03 +0000
URL:       https://git.openjdk.java.net/jdk17/commit/9b177a7486396a79729d3471fec562a088e91997
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
a couple runtime/os tests don't check exit code,JDK-8268602,5051640,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,iignatyev,iignatyev,iignatyev,2021-06-11 02:47,2021-06-17 07:35,2023-10-01 09:57,2021-06-11 05:41,17,,,,,,,17,hotspot,,0,noreg-self,,,,,,,,,,,,,`runtime/os/TestUseCpuAllocPath.java` and `AvailableProcessors.java` spawn new JVMs but don't check their exit code which might lead to both type-I and type-II errors ,,,,,,,,,,,JDK-8268709,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2t6nf:",9223372036854775807,b27,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,,,"2021-06-11 05:41;roboduke;Changeset: cce8da2c
Author:    Igor Ignatyev <iignatyev@openjdk.org>
Date:      2021-06-11 12:40:44 +0000
URL:       https://git.openjdk.java.net/jdk17/commit/cce8da2c60812873b63de4e65bc992bc6d825fe1
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
java/io/Serializable/serialFilter/GlobalFilterTest.java#id1 failed in timeout,JDK-8268595,5051630,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,jpai,dfuchs,dfuchs,2021-06-11 01:49,2022-03-11 05:50,2023-10-01 09:57,2021-10-25 07:25,17,,,,,,,18,core-libs,,0,intermittent,jdk17u-fix-request,jdk17u-fix-yes,noreg-self,,,,,,,,,,"The test seems to have passed but failed in timeout:

----------messages:(6/567)----------
command: testng -XX:StartFlightRecording:name=DeserializationEvent,dumponexit=true -Djava.security.properties=${test.src}/java.security-extra1 -Djava.security.debug=properties GlobalFilterTest
reason: User specified action: run testng/othervm/policy=security.policy -XX:StartFlightRecording:name=DeserializationEvent,dumponexit=true -Djava.security.properties=${test.src}/java.security-extra1 -Djava.security.debug=properties GlobalFilterTest 
Mode: othervm [/othervm specified]
Timeout information:
--- Timeout information end.
elapsed time (seconds): 487.402
----------configuration:(0/0)----------
----------System.out:(17/1061)----------
[1.275s][info][jfr,startup] Started recording 1. No limit specified, using maxsize=250MB as default.
[1.275s][info][jfr,startup] 
[1.275s][info][jfr,startup] Use jcmd 5728 JFR.dump name=DeserializationEvent filename=FILEPATH to copy recording data to file.
global pattern: java.**;javax.**;maxarray=34;maxdepth=7, filter: java.**;javax.**;maxarray=34;maxdepth=7
test GlobalFilterTest.globalFilter(): success
test GlobalFilterTest.globalFilterElements(""java.**"", true, 4): success
test GlobalFilterTest.globalFilterElements(""javax.**"", true, BUFFER_UNDERFLOW): success
test GlobalFilterTest.globalFilterElements(""maxarray=34"", false, [I@7b0f8339): success
test GlobalFilterTest.globalFilterElements(""maxdepth=7"", false, [Ljava.lang.Object;@2ec07a1a): success
test GlobalFilterTest.setGlobalFilter(): success

===============================================
java/io/Serializable/serialFilter/GlobalFilterTest.java#id1
Total tests run: 6, Passes: 6, Failures: 0, Skips: 0
===============================================

Timeout refired 480 times
----------System.err:(4/453)*----------
",,,,,,,,,,,JDK-8281420,JDK-8283032,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,windows,,,,,"0|i2t6l7:",9223372036854775807,b21,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@7e74daa7,,,,,,,,,"2021-10-16 04:44;jpai;> The test seems to have passed but failed in timeout

There are 2 @test on this GlobalFilterTest. The one that is failing has a test action that is using:


-XX:StartFlightRecording:name=DeserializationEvent,dumponexit=true

and looking at the implementation of ""dumponexit"" for JFR, it's implemented as a shutdown hook. So perhaps that's what is taking time or is hung, contributing to this timeout? Do we need to dump this recorded state to a file on exit? From what I can see in that GlobalFilterTest, it doesn't read or check for this recorded state nor does it do anything with JFR events itself apart from launching the JVM with that flight recording option. 

Furthermore, reading this release note https://bugs.openjdk.java.net/browse/JDK-8273215 (where the Deserialization event was added), it states that the event should be explicitly enabled for it to be recorded. I don't see that being done in this test action command (nor in the test). So effectively, this ""-XX:StartFlightRecording:name=DeserializationEvent,dumponexit=true"" is not really testing any Deserialization event, isn't it?

Looking at the PR where this test action got added https://github.com/openjdk/jdk/pull/2479, I see that there is a separate test ""TestDeserializationEvent"" to test the Deserialization event (a programatic one) and that one has comprehensive test around this event. Perhaps we should remove this (effectively no-op) additional @test tag/action from the GlobalFilterTest?;;;","2021-10-25 07:25;roboduke;Changeset: f143d2a8
Author:    Jaikiran Pai <jpai@openjdk.org>
Date:      2021-10-25 14:24:05 +0000
URL:       https://git.openjdk.java.net/jdk/commit/f143d2a88e1972cdce9eb6f61c2eb9754cb89251
;;;","2022-03-10 08:26;goetz;Fix request [17u]

I backport this for parity with 17.0.4-oracle.
No risk, only a test change.
Clean backport.
Test passes.
;;;","2022-03-10 08:37;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk17u-dev/pull/234
Date: 2022-03-10 16:30:48 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
JDK-8262891 causes an NPE in Lint.augment,JDK-8268592,5051627,Bug,Resolved,JDK,JDK,software,duke,,,P2,Fixed,cushon,cushon,cushon,2021-06-11 01:22,2021-07-15 10:25,2023-10-01 09:57,2021-06-30 17:17,17,,,,,,,17,tools,,0,,,,,,,,,,,,,,"This crash bisects to JDK-8262891: earlier versions accept this code as valid, after that commit it causes an NPE.

The Lint.augment stack trace is similar to JDK-8181464, where mcimadamore noted:

> this problem of javac crashing because of a 'null' Lint happens very frequently - and in cases where, if attribution could run its course, a regular error message would be displayed. So perhaps it's time we address this by having a 'dummy' Lint object which doesn't do anything instead of 'null' - that would let execution flow even in exceptional cases like this one.

Repro:

===
import java.util.Collection;
import java.util.function.Function;
import java.util.function.Supplier;

abstract class T {

  abstract <T> T r(Function<String, Supplier<T>> x);

  enum E {
    ONE
  }

  abstract <T> Supplier<T> f(Function<T, Supplier<T>> x);

  public void updateAcl(E e, Supplier<Void> v) {
    r(
        (String t) -> {
          switch (e) {
            case ONE:
              return f(
                  a -> {
                    Collection<String> m = null;
                    return v;
                  });
            default:
              return v;
          }
        });
  }
}
===

$ javac T.java
java.lang.NullPointerException: Cannot invoke ""com.sun.tools.javac.code.Symbol.getDeclarationAttributes()"" because ""sym"" is null
        at jdk.compiler/com.sun.tools.javac.code.Lint.augment(Lint.java:75)
        at jdk.compiler/com.sun.tools.javac.comp.Flow$AliveAnalyzer.visitVarDef(Flow.java:595)
        at jdk.compiler/com.sun.tools.javac.tree.JCTree$JCVariableDecl.accept(JCTree.java:1028)
        at jdk.compiler/com.sun.tools.javac.tree.TreeScanner.scan(TreeScanner.java:49)
        at jdk.compiler/com.sun.tools.javac.comp.Flow$BaseAnalyzer.scan(Flow.java:445)
        at jdk.compiler/com.sun.tools.javac.comp.Flow$AliveAnalyzer.scanStat(Flow.java:505)
        at jdk.compiler/com.sun.tools.javac.comp.Flow$AliveAnalyzer.scanStats(Flow.java:513)
        at jdk.compiler/com.sun.tools.javac.comp.Flow$AliveAnalyzer.visitBlock(Flow.java:605)
        at jdk.compiler/com.sun.tools.javac.tree.JCTree$JCBlock.accept(JCTree.java:1092)
        at jdk.compiler/com.sun.tools.javac.tree.TreeScanner.scan(TreeScanner.java:49)
        at jdk.compiler/com.sun.tools.javac.comp.Flow$BaseAnalyzer.scan(Flow.java:445)
        at jdk.compiler/com.sun.tools.javac.comp.Flow$AliveAnalyzer.scanStat(Flow.java:505)
        at jdk.compiler/com.sun.tools.javac.comp.Flow$AliveAnalyzer.visitLambda(Flow.java:879)
        at jdk.compiler/com.sun.tools.javac.tree.JCTree$JCLambda.accept(JCTree.java:1975)
        at jdk.compiler/com.sun.tools.javac.tree.TreeScanner.scan(TreeScanner.java:49)
        at jdk.compiler/com.sun.tools.javac.comp.Flow$BaseAnalyzer.scan(Flow.java:445)
        at jdk.compiler/com.sun.tools.javac.tree.TreeScanner.scan(TreeScanner.java:57)
        at jdk.compiler/com.sun.tools.javac.comp.Flow$AliveAnalyzer.visitApply(Flow.java:856)
        at jdk.compiler/com.sun.tools.javac.tree.JCTree$JCMethodInvocation.accept(JCTree.java:1798)
        at jdk.compiler/com.sun.tools.javac.tree.TreeScanner.scan(TreeScanner.java:49)
        at jdk.compiler/com.sun.tools.javac.comp.Flow$BaseAnalyzer.scan(Flow.java:445)
        at jdk.compiler/com.sun.tools.javac.comp.Flow$AliveAnalyzer.visitReturn(Flow.java:845)
        at jdk.compiler/com.sun.tools.javac.tree.JCTree$JCReturn.accept(JCTree.java:1710)
        at jdk.compiler/com.sun.tools.javac.tree.TreeScanner.scan(TreeScanner.java:49)
        at jdk.compiler/com.sun.tools.javac.comp.Flow$BaseAnalyzer.scan(Flow.java:445)
        at jdk.compiler/com.sun.tools.javac.tree.TreeScanner.scan(TreeScanner.java:57)
        at jdk.compiler/com.sun.tools.javac.tree.TreeScanner.visitCase(TreeScanner.java:181)
        at jdk.compiler/com.sun.tools.javac.tree.JCTree$JCCase.accept(JCTree.java:1336)
        at jdk.compiler/com.sun.tools.javac.tree.TreeScanner.scan(TreeScanner.java:49)
        at jdk.compiler/com.sun.tools.javac.comp.Flow$BaseAnalyzer.scan(Flow.java:445)
        at jdk.compiler/com.sun.tools.javac.comp.Flow$AliveAnalyzer.analyzeTree(Flow.java:907)
        at jdk.compiler/com.sun.tools.javac.comp.Flow.aliveAfter(Flow.java:274)
        at jdk.compiler/com.sun.tools.javac.comp.Attr.handleSwitch(Attr.java:1794)
        at jdk.compiler/com.sun.tools.javac.comp.Attr.visitSwitch(Attr.java:1580)
        at jdk.compiler/com.sun.tools.javac.tree.JCTree$JCSwitch.accept(JCTree.java:1295)
        at jdk.compiler/com.sun.tools.javac.comp.Attr.attribTree(Attr.java:668)
        at jdk.compiler/com.sun.tools.javac.comp.Attr.attribStat(Attr.java:742)
        at jdk.compiler/com.sun.tools.javac.comp.Attr.attribStats(Attr.java:761)
        at jdk.compiler/com.sun.tools.javac.comp.Attr.visitBlock(Attr.java:1439)
        at jdk.compiler/com.sun.tools.javac.tree.JCTree$JCBlock.accept(JCTree.java:1092)
        at jdk.compiler/com.sun.tools.javac.comp.Attr.attribTree(Attr.java:668)
        at jdk.compiler/com.sun.tools.javac.comp.Attr.attribStat(Attr.java:742)
        at jdk.compiler/com.sun.tools.javac.comp.Attr.attribStats(Attr.java:761)
        at jdk.compiler/com.sun.tools.javac.comp.Attr.visitBlock(Attr.java:1439)
        at jdk.compiler/com.sun.tools.javac.tree.JCTree$JCBlock.accept(JCTree.java:1092)
        at jdk.compiler/com.sun.tools.javac.comp.ArgumentAttr.visitTree(ArgumentAttr.java:207)
        at jdk.compiler/com.sun.tools.javac.tree.JCTree$Visitor.visitBlock(JCTree.java:3413)
        at jdk.compiler/com.sun.tools.javac.tree.JCTree$JCBlock.accept(JCTree.java:1092)
        at jdk.compiler/com.sun.tools.javac.comp.ArgumentAttr.attribArg(ArgumentAttr.java:197)
        at jdk.compiler/com.sun.tools.javac.comp.Attr.attribTree(Attr.java:666)
        at jdk.compiler/com.sun.tools.javac.comp.DeferredAttr.attribSpeculative(DeferredAttr.java:500)
        at jdk.compiler/com.sun.tools.javac.comp.DeferredAttr.attribSpeculative(DeferredAttr.java:480)
        at jdk.compiler/com.sun.tools.javac.comp.DeferredAttr.attribSpeculative(DeferredAttr.java:467)
        at jdk.compiler/com.sun.tools.javac.comp.DeferredAttr.attribSpeculativeLambda(DeferredAttr.java:442)
        at jdk.compiler/com.sun.tools.javac.comp.ArgumentAttr.lambda$visitLambda$4(ArgumentAttr.java:301)
        at jdk.compiler/com.sun.tools.javac.comp.ArgumentAttr.processArg(ArgumentAttr.java:242)
        at jdk.compiler/com.sun.tools.javac.comp.ArgumentAttr.visitLambda(ArgumentAttr.java:299)
        at jdk.compiler/com.sun.tools.javac.tree.JCTree$JCLambda.accept(JCTree.java:1975)
        at jdk.compiler/com.sun.tools.javac.comp.ArgumentAttr.attribArg(ArgumentAttr.java:197)
        at jdk.compiler/com.sun.tools.javac.comp.Attr.attribTree(Attr.java:666)
        at jdk.compiler/com.sun.tools.javac.comp.Attr.attribArgs(Attr.java:769)
        at jdk.compiler/com.sun.tools.javac.comp.Attr.visitApply(Attr.java:2554)
        at jdk.compiler/com.sun.tools.javac.tree.JCTree$JCMethodInvocation.accept(JCTree.java:1798)
        at jdk.compiler/com.sun.tools.javac.comp.Attr.attribTree(Attr.java:668)
        at jdk.compiler/com.sun.tools.javac.comp.Attr.attribExpr(Attr.java:721)
        at jdk.compiler/com.sun.tools.javac.comp.Attr.visitExec(Attr.java:2272)
        at jdk.compiler/com.sun.tools.javac.tree.JCTree$JCExpressionStatement.accept(JCTree.java:1585)
        at jdk.compiler/com.sun.tools.javac.comp.Attr.attribTree(Attr.java:668)
        at jdk.compiler/com.sun.tools.javac.comp.Attr.attribStat(Attr.java:742)
        at jdk.compiler/com.sun.tools.javac.comp.Attr.attribStats(Attr.java:761)
        at jdk.compiler/com.sun.tools.javac.comp.Attr.visitBlock(Attr.java:1439)
        at jdk.compiler/com.sun.tools.javac.tree.JCTree$JCBlock.accept(JCTree.java:1092)
        at jdk.compiler/com.sun.tools.javac.comp.Attr.attribTree(Attr.java:668)
        at jdk.compiler/com.sun.tools.javac.comp.Attr.attribStat(Attr.java:742)
        at jdk.compiler/com.sun.tools.javac.comp.Attr.visitMethodDef(Attr.java:1229)
        at jdk.compiler/com.sun.tools.javac.tree.JCTree$JCMethodDecl.accept(JCTree.java:922)
        at jdk.compiler/com.sun.tools.javac.comp.Attr.attribTree(Attr.java:668)
        at jdk.compiler/com.sun.tools.javac.comp.Attr.attribStat(Attr.java:742)
        at jdk.compiler/com.sun.tools.javac.comp.Attr.attribClassBody(Attr.java:5478)
        at jdk.compiler/com.sun.tools.javac.comp.Attr.attribClass(Attr.java:5369)
        at jdk.compiler/com.sun.tools.javac.comp.Attr.attribClass(Attr.java:5200)
        at jdk.compiler/com.sun.tools.javac.comp.Attr.attrib(Attr.java:5145)
        at jdk.compiler/com.sun.tools.javac.main.JavaCompiler.attribute(JavaCompiler.java:1317)
        at jdk.compiler/com.sun.tools.javac.main.JavaCompiler.compile(JavaCompiler.java:946)
        at jdk.compiler/com.sun.tools.javac.main.Main.compile(Main.java:317)
        at jdk.compiler/com.sun.tools.javac.main.Main.compile(Main.java:176)
        at jdk.compiler/com.sun.tools.javac.Main.compile(Main.java:64)
        at jdk.compiler/com.sun.tools.javac.Main.main(Main.java:50)",,,,,,,,,,,JDK-8270689,JDK-8269777,,,,,,,,,,,,,,,,,,,,,JDK-8181464,JDK-8262891,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2t6kj:",9223372036854775807,b30,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4dca67bd,,,,,,,,,"2021-06-14 09:35;cushon;I realized this has different symptoms than JDK-8181464--here the sym being passed in is null, the state of the Lint itself seems fine.

The change here seems to be the use of flow.aliveAfter, and that the variable declaration in the nested lambda hasn't been attributed at that point.;;;","2021-06-30 17:17;roboduke;Changeset: 4930ae96
Author:    Liam Miller-Cushon <cushon@openjdk.org>
Date:      2021-07-01 00:16:23 +0000
URL:       https://git.openjdk.java.net/jdk17/commit/4930ae96d8083070482f6ac78faed9ae9dda2df7
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
appcds/SharedArchiveConsistency.java fails intermittently with java.lang.NegativeArraySizeException,JDK-8268589,5051625,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,vaibhav,vaibhav,vaibhav,2021-06-11 00:54,2023-03-17 04:33,2023-10-01 09:57,2021-06-15 23:51,11,,,,,,,11.0.13-oracle,hotspot,,0,11u-tier2,intermittent,jdk11u-todo,sustaining,,,,,,,,,,"Test case : open/test/hotspot/jtreg/runtime/appcds/SharedArchiveConsistency.java

OS : Failure only seen on Windows-debug (Windows-2016)
Regression : Intermittent failure (can't say)


Exception :

2. Corrupt header, should fail

offset_paths_misc_info_size = 744
path_misc_info_size   = -1296882632
file_header_size      = -1296881848
file_header_size (aligned to page) = -1296879616
----------System.err:(14/922)----------
java.lang.NegativeArraySizeException: -1296879616
	at SharedArchiveConsistency.modifyJsaHeader(SharedArchiveConsistency.java:248)
	at SharedArchiveConsistency.main(SharedArchiveConsistency.java:395)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at com.sun.javatest.regtest.agent.MainWrapper$MainThread.run(MainWrapper.java:127)
	at java.base/java.lang.Thread.run(Thread.java:834)",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8227370,,,,,,,,,,,,,,,,,,,,,,,,windows,,,,,"0|i2t6k3:",9223372036854775807,b01,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,,,"2021-06-11 10:30;iklam;Please try this patch. The calculation of offset_paths_misc_info_size is wrong. It usually gives a large positive number so the test would somehow work (but doesn't test what it intends to), but sometimes you get a negative number and see this failure.

================ wrong output and fails (as reported in bug description)
2. Corrupt header, should fail

offset_paths_misc_info_size = 744
path_misc_info_size = -1296882632
file_header_size = -1296881848
file_header_size (aligned to page) = -1296879616

================ wrong output but does not fail
2. Corrupt header, should fail

offset_paths_misc_info_size = 744
path_misc_info_size   = 10936432
file_header_size      = 10937216
file_header_size (aligned to page) = 10940416

================ patch
diff --git a/test/hotspot/jtreg/runtime/appcds/SharedArchiveConsistency.java b/test/hotspot/jtreg/runtime/appcds/SharedArchiveConsistency.java
index 74822604e3..e687186f46 100644
--- a/test/hotspot/jtreg/runtime/appcds/SharedArchiveConsistency.java
+++ b/test/hotspot/jtreg/runtime/appcds/SharedArchiveConsistency.java
@@ -91,6 +91,7 @@ public class SharedArchiveConsistency {
         offset_magic = wb.getOffsetForName(""FileMapHeader::_magic"") - first_field_offset;
         offset_version = wb.getOffsetForName(""FileMapHeader::_version"") - first_field_offset;
         offset_jvm_ident = wb.getOffsetForName(""FileMapHeader::_jvm_ident"") - first_field_offset;
+        offset_paths_misc_info_size = wb.getOffsetForName(""FileMapHeader::_paths_misc_info_size"") - first_field_offset;
         sp_offset_crc = wb.getOffsetForName(""space_info::_crc"");
         try {
             int nonExistOffset = wb.getOffsetForName(""FileMapHeader::_non_exist_offset"");
@@ -113,8 +114,6 @@ public class SharedArchiveConsistency {
         // this is not real header size, it is struct size
         int_size = wb.getOffsetForName(""int_size"");
         file_header_size = wb.getOffsetForName(""file_header_size"");
-        offset_paths_misc_info_size = wb.getOffsetForName(""FileMapHeader::_paths_misc_info_size"") -
-            offset_magic;
         int path_misc_info_size   = (int)readInt(fc, offset_paths_misc_info_size, int_size);
         file_header_size += path_misc_info_size;
         System.out.println(""offset_paths_misc_info_size = "" + offset_paths_misc_info_size);

=============== correct output after fix
2. Corrupt header, should fail

offset_paths_misc_info_size = 728
path_misc_info_size   = 70
file_header_size      = 854
file_header_size (aligned to page) = 4096
;;;","2021-06-15 11:22;iklam;This issue is no longer applicable since JDK 14. The offending code has been removed in JDK-8227370.;;;","2021-11-25 08:15;goetz;11u notice

I looked at the backport to 11u. The proposed patch above works with some adaptions.
I tried to prove it fixes the error, but I could not reproduce the error.

I also tried below patch, but it did not reproduce the issue, either.
So I refrained from pushing that patch.

--- a/test/hotspot/jtreg/runtime/appcds/SharedArchiveConsistency.java
+++ b/test/hotspot/jtreg/runtime/appcds/SharedArchiveConsistency.java
@@ -109,6 +110,11 @@ public class SharedArchiveConsistency {
         System.out.println(""file_header_size      = "" + file_header_size);
         file_header_size = (int)align_up_page(file_header_size);
         System.out.println(""file_header_size (aligned to page) = "" + file_header_size);
+
+        // GL Check for 8268589 
+        if (file_header_size > 1024*1024) {
+            throw new Exception(""8268589: file header size too big"");
+        }
         return file_header_size;
     }
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
[lqagain] Javac tests should not needlessly hardcode toString() output ,JDK-8268584,5051614,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,sadayapalam,sadayapalam,sadayapalam,2021-06-10 21:33,2021-06-11 00:03,2023-10-01 09:57,2021-06-11 00:03,repo-valhalla,,,,,,,repo-valhalla,tools,,0,lworld,,,,,,,,,,,,,"JDK-8268358 modifies the present behavior of toString() methods for primitive class types. Javac tests in Valhalla should be tweaked to not needlessly rely on the output. 

A quick glance through the tests that do use toString() show that Javac is using the string output to compare the state of the value instances with what it is expected to be - to verify that right code got generated and execution preserved the semantics of the generated code. 

But this should be done directly by comparing state as opposed to getting a textual representation of the value instance and performing string comparison - which is flaky as well convoluted. ",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8268358,,,,,,,,,,,,,,,,,,,generic,,,,,,,,,generic,,,,,"0|i2t6hn:",9223372036854775807,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4dca67bd,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
javadoc throws NPE with --ignore-source-errors option,JDK-8268582,5051358,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,hannesw,webbuggrp,webbuggrp,2021-06-08 07:19,2023-07-24 22:16,2023-10-01 09:57,2021-12-01 10:21,11,14,15,16,17,,,18,tools,,0,dcsad,jdk17u-fix-request,jdk17u-fix-yes,reproducer-yes,webbug,,,,,,,,,"ADDITIONAL SYSTEM INFORMATION :
$ java -version
openjdk version ""11.0.11"" 2021-04-20
OpenJDK Runtime Environment (build 11.0.11+9-Ubuntu-0ubuntu2.20.04)
OpenJDK 64-Bit Server VM (build 11.0.11+9-Ubuntu-0ubuntu2.20.04, mixed mode, sharing)

A DESCRIPTION OF THE PROBLEM :
Generating javadoc for a class using generics and extending another class, the process fails when the other class is not available. This worked previously with JDK 8, but fails with JDK 11 and 16.

REGRESSION : Last worked in version 8u291

STEPS TO FOLLOW TO REPRODUCE THE PROBLEM :
1. Create a source file with the contents specified in ""Source code for an executable test case""
2. ${JAVA_HOME}/bin/javadoc Test.java
3. ${JAVA_HOME}/bin/javadoc --ignore-source-errors Test.java

EXPECTED VERSUS ACTUAL BEHAVIOR :
EXPECTED -
The HTML files are generated.
ACTUAL -
Without ""--ignore-source-errors"", the process exits with an error.

When adding ""--ignore-source-errors"", there is an exception:

Generating ./package-summary.html...
Generating ./package-tree.html...
javadoc: error - An internal exception has occurred. 
	(java.lang.NullPointerException)
Please file a bug against the javadoc tool via the Java bug reporting page
(http://bugreport.java.com) after checking the Bug Database (http://bugs.java.com)
for duplicates. Include error messages and the following diagnostic in your report. Thank you.
java.lang.NullPointerException
	at jdk.compiler/com.sun.tools.javac.code.Types.erasure(Types.java:2340)
	at jdk.compiler/com.sun.tools.javac.code.Types$14.visitTypeVar(Types.java:2398)
	at jdk.compiler/com.sun.tools.javac.code.Types$14.visitTypeVar(Types.java:2348)
	at jdk.compiler/com.sun.tools.javac.code.Type$TypeVar.accept(Type.java:1659)
	at jdk.compiler/com.sun.tools.javac.code.Types$DefaultTypeVisitor.visit(Types.java:4857)
	at jdk.compiler/com.sun.tools.javac.code.Types.erasure(Types.java:2343)
	at jdk.compiler/com.sun.tools.javac.code.Types.erasure(Types.java:2329)
	at jdk.compiler/com.sun.tools.javac.model.JavacTypes.erasure(JavacTypes.java:134)
	at jdk.javadoc/jdk.javadoc.internal.doclets.toolkit.util.Utils$5.visitTypeVariable(Utils.java:1069)
	at jdk.javadoc/jdk.javadoc.internal.doclets.toolkit.util.Utils$5.visitTypeVariable(Utils.java:1048)
	at jdk.compiler/com.sun.tools.javac.code.Type$TypeVar.accept(Type.java:1695)
	at java.compiler@11.0.11/javax.lang.model.util.AbstractTypeVisitor6.visit(AbstractTypeVisitor6.java:104)
	at jdk.javadoc/jdk.javadoc.internal.doclets.toolkit.util.Utils.asTypeElement(Utils.java:1086)
	at jdk.javadoc/jdk.javadoc.internal.doclets.formats.html.LinkInfoImpl.setContext(LinkInfoImpl.java:410)
	at jdk.javadoc/jdk.javadoc.internal.doclets.formats.html.LinkInfoImpl.<init>(LinkInfoImpl.java:285)
	at jdk.javadoc/jdk.javadoc.internal.doclets.formats.html.LinkFactoryImpl.getTypeParameterLink(LinkFactoryImpl.java:184)
	at jdk.javadoc/jdk.javadoc.internal.doclets.formats.html.LinkFactoryImpl.getTypeParameterLinks(LinkFactoryImpl.java:167)
	at jdk.javadoc/jdk.javadoc.internal.doclets.toolkit.util.links.LinkFactory.getLink(LinkFactory.java:196)
	at jdk.javadoc/jdk.javadoc.internal.doclets.formats.html.HtmlDocletWriter.getLink(HtmlDocletWriter.java:679)
	at jdk.javadoc/jdk.javadoc.internal.doclets.formats.html.HtmlDocletWriter.addPreQualifiedClassLink(HtmlDocletWriter.java:814)
	at jdk.javadoc/jdk.javadoc.internal.doclets.formats.html.HtmlDocletWriter.addPreQualifiedStrongClassLink(HtmlDocletWriter.java:839)
	at jdk.javadoc/jdk.javadoc.internal.doclets.formats.html.AbstractTreeWriter.addPartialInfo(AbstractTreeWriter.java:185)
	at jdk.javadoc/jdk.javadoc.internal.doclets.formats.html.AbstractTreeWriter.addLevelInfo(AbstractTreeWriter.java:92)
	at jdk.javadoc/jdk.javadoc.internal.doclets.formats.html.AbstractTreeWriter.addLevelInfo(AbstractTreeWriter.java:94)
	at jdk.javadoc/jdk.javadoc.internal.doclets.formats.html.AbstractTreeWriter.addTree(AbstractTreeWriter.java:129)
	at jdk.javadoc/jdk.javadoc.internal.doclets.formats.html.AbstractTreeWriter.addTree(AbstractTreeWriter.java:112)
	at jdk.javadoc/jdk.javadoc.internal.doclets.formats.html.PackageTreeWriter.generatePackageTreeFile(PackageTreeWriter.java:115)
	at jdk.javadoc/jdk.javadoc.internal.doclets.formats.html.PackageTreeWriter.generate(PackageTreeWriter.java:92)
	at jdk.javadoc/jdk.javadoc.internal.doclets.formats.html.HtmlDoclet.generatePackageFiles(HtmlDoclet.java:312)
	at jdk.javadoc/jdk.javadoc.internal.doclets.toolkit.AbstractDoclet.startGeneration(AbstractDoclet.java:210)
	at jdk.javadoc/jdk.javadoc.internal.doclets.toolkit.AbstractDoclet.run(AbstractDoclet.java:114)
	at jdk.javadoc/jdk.javadoc.doclet.StandardDoclet.run(StandardDoclet.java:72)
	at jdk.javadoc/jdk.javadoc.internal.tool.Start.parseAndExecute(Start.java:588)
	at jdk.javadoc/jdk.javadoc.internal.tool.Start.begin(Start.java:432)
	at jdk.javadoc/jdk.javadoc.internal.tool.Start.begin(Start.java:345)
	at jdk.javadoc/jdk.javadoc.internal.tool.Main.execute(Main.java:63)
	at jdk.javadoc/jdk.javadoc.internal.tool.Main.main(Main.java:52)

---------- BEGIN SOURCE ----------
import invalid.example.OtherClass;

public class Test<T> extends OtherClass<T> {

}
---------- END SOURCE ----------

CUSTOMER SUBMITTED WORKAROUND :
Use JDK 8 to build the javadoc.

FREQUENCY : always


",,,,,,,,,,,JDK-8310249,JDK-8312723,JDK-8308653,,,,,,,,,,,,,,,,,,,,JDK-8279824,,,,,,,,"2021-06-10 21:21;adev;Test.java;https://bugs.openjdk.org/secure/attachment/95098/Test.java",,,,,,,,,,,generic,,,,,,,9,,generic,,,,,"0|i2t4wr:",9223372036854775807,b27,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@7900061a,,,,,,,,,"2021-06-10 21:18;adev;The issue is reproducible. Following are the observations:

When using javadoc --ignore-source-errors Test.java with JDK8:
javadoc: error - invalid flag: --ignore-source-errors
Usage: javadoc [options] [packagenames] [sourcefiles] [@files]

When using javadoc --ignore-source-errors Test.java with JDK9
NPE at at jdk.compiler/com.sun.tools.javac.code.Types.erasure(Types.java:2091)

NPE is thrown in all subsequent builds till JDK 17;;;","2021-06-21 08:53;jjg;`--ignore-source-errors` is not a documented supported option.

The behavior when the option is not used should be seen as the ""correct"" behavior. 

The only issue here is the crash. It is never reasonable for the tool to crash.    But equally, it is not reasonable to expect the tool to continue in the face of errors in signatures of the declarations being documented. For example, in the context of the specific example, `OtherClass` might not be a generic class, and it would be inappropriate to assume that it might be.

Removing the `regression` label since the behavior in 8 was not a defined supported behavior.
Were it not for the crash, I would reduce this to P4, since it is using an undocumented feature. Crashes normally warrant P2, so I'll split the difference and leave it as P3.
;;;","2021-06-21 08:59;jjg;The only somewhat interesting technical issue here is how to deal with issues like this in the face of an option like `--ignore-source-errors`. 

Re: at jdk.javadoc/jdk.javadoc.internal.doclets.toolkit.util.Utils.asTypeElement(Utils.java:1086) 
Maybe catch Throwable coming out of the javac layer, and if `--ignore-source-errors` is set,  turn the exception into a message:
    ""cannot evaluate ....""
and exit.;;;","2021-11-22 09:27;hannesw;Note that the proposed fix for this issue does not address the original NPE happening with JDK 11 documented in the main description. That NPE does not occur anymore with current JDK.  If there is intention to backport the fix to 11 it will have to be updated to address the original issue, but the fix should be likewise simple.;;;","2021-12-01 10:21;roboduke;Changeset: 0dfb3a70
Author:    Hannes Wallnöfer <hannesw@openjdk.org>
Date:      2021-12-01 18:19:26 +0000
URL:       https://git.openjdk.java.net/jdk/commit/0dfb3a705d2ad0ce4ac0f7dd18fb65d7ae735f16
;;;","2022-02-09 05:41;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk17u-dev/pull/152
Date: 2022-02-09 13:37:14 +0000;;;","2022-02-09 06:05;apavlyutkin;Fix Request (17u)

The original patch applied cleanly.
Verification: the routine from the defect description (LTS 20.04/amd64) 
Regression: langtools_javadoc;;;","2023-05-19 03:12;shade;Alexey, do you still want this in 17u? The tag is incorrect, should be `jdk17u-fix-request`, with the `u`.;;;","2023-05-19 03:14;apavlyutkin;Fixed;;;",,,,,,,,,,,,,,,,,,,,,,,,,
jdk/jfr/event/gc/collection/TestSystemGc.java fails,JDK-8268576,5051605,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,jiefu,jiefu,jiefu,2021-06-10 16:58,2021-11-11 04:21,2023-10-01 09:57,2021-06-10 19:48,17,18,,,,,,17,hotspot,,0,tencent-interest,tier5,tier6,,,,,,,,,,,"ACTION: build -- Not run. Test running...
REASON: Named class compiled on demand
TIME:   event.gc.collection.TestSystemGC seconds
messages:
command: build jdk.jfr.event.gc.collection.TestSystemGC
reason: Named class compiled on demand

TEST RESULT: Error. can't find jdk.jfr.event.gc.collection.TestSystemGC in test directory or libraries",,,,,,,,,,,JDK-8268706,,,,,,,,,,,,,,,,,,,JDK-8268578,,,JDK-8003216,JDK-8276995,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2t6fn:",9223372036854775807,b27,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6b00f96c,,,,,,,,,"2021-06-10 19:48;roboduke;Changeset: e3eef3b4
Author:    Jie Fu <jiefu@openjdk.org>
Date:      2021-06-11 02:47:42 +0000
URL:       https://git.openjdk.java.net/jdk17/commit/e3eef3b41ab22b3fb1e4ee33ce4a3d3457d35ff1
;;;","2021-06-11 07:29;dcubed;The fix for this bug is in jdk-17+27-2444.;;;","2021-06-11 07:36;dcubed;The fix for this bug has not yet been sync'ed to JDK18.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Annotations not visible on model elements before they are generated,JDK-8268575,5051604,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,sadayapalam,cushon,cushon,2021-06-10 16:06,2021-12-08 17:45,2023-10-01 09:57,2021-12-05 22:26,,,,,,,,18,tools,,0,annotation-processing,,,,,,,,,,,,,"After JDK-8206325, annotations whose symbols can't be resolved during the current processing round are not returned by getAnnotationMirrors(). I noticed this investigating an annotation processor that stopped working with the new behaviour, because it assumes a generated annotation will be returned by getAnnotationMirrors on the first processing round, before the annotation is actually generated.

I think it's somewhat subjective whether this is a bug, there are cases where the processing model can't return information when errors are present, but in this case I wonder if it would be better to include the erroneous annotation in the result of getAnnotationMirrors, and let clients check if the annotation is erroneous?

A possible fix is to modify the check in Annotation.annotateNow to do something like:

-if (a.type.tsym.isAnnotationType()) {
+if (a.type.isErroneous() || a.type.tsym.isAnnotationType()) {

Repro:

===
import java.io.IOException;
import java.io.UncheckedIOException;
import java.io.Writer;
import java.util.Set;
import javax.annotation.processing.AbstractProcessor;
import javax.annotation.processing.RoundEnvironment;
import javax.annotation.processing.SupportedAnnotationTypes;
import javax.lang.model.SourceVersion;
import javax.lang.model.element.Element;
import javax.lang.model.element.ExecutableElement;
import javax.lang.model.element.TypeElement;
import javax.lang.model.element.VariableElement;
import javax.tools.Diagnostic.Kind;
import javax.tools.JavaFileObject;

@SupportedAnnotationTypes(""*"")
public class P extends AbstractProcessor {

  @Override
  public SourceVersion getSupportedSourceVersion() {
    return SourceVersion.latestSupported();
  }

  int round = 1;

  @Override
  public boolean process(Set<? extends TypeElement> annotations, RoundEnvironment roundEnv) {
    processingEnv.getMessager().printMessage(Kind.NOTE, ""round "" + round);
    Element t = processingEnv.getElementUtils().getTypeElement(""T"");
    for (Element e : t.getEnclosedElements()) {
      if (e instanceof ExecutableElement) {
        for (VariableElement p : ((ExecutableElement) e).getParameters()) {
          processingEnv
              .getMessager()
              .printMessage(
                  Kind.NOTE, ""annotations on "" + p + "": "" + p.getAnnotationMirrors().toString());
        }
      }
    }
    if (round == 1) {
      String name = ""A"";
      try {
        JavaFileObject jfo = processingEnv.getFiler().createSourceFile(name);
        try (Writer w = jfo.openWriter()) {
          w.write(""@interface "" + name + "" {}"");
        }
      } catch (IOException e) {
        throw new UncheckedIOException(e);
      }
    }
    round++;
    return false;
  }
}
===

===
class T {
  void f(@A int x) {}
}
===

With javac before JDK-8206325, the annotation @A on the parameter x is visible during the first processing round, before it has been generated:

$ javac -fullversion -processor P T.java -implicit:none -s gen
javac full version ""12-ea+22""
Note: round 1
Note: annotations on x: @A
Note: round 2
Note: annotations on x: @A
Note: round 3
Note: annotations on x: @A

After the fix, the annotation is dropped on the first round. A processor that visits x on the first round has no way of telling that x has a (currently erroneous) annotation, and might assume x is well formed but has no annotations:

$ javac -fullversion -processor P T.java -implicit:none -s gen
javac full version ""12-ea+23""
Note: round 1
Note: annotations on x:
Note: round 2
Note: annotations on x: @A
Note: round 3
Note: annotations on x: @A",,,,,,,,,,,,,,,,,,,,,,,,JDK-8278121,,,,,,,,,JDK-8206325,JI-9071991,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2t6ff:",9223372036854775807,b27,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4dca67bd,,,,,,,,,"2021-11-22 07:39;adev;Information received from a submitter
=============================
Gradle demo: https://github.com/jbock-java/print-annotation-mirrors

This bug affects existing annotation processors like dagger which use BasicAnnotationProcessor and TypeCheckingProcessingStep. See TYPE_VALIDATING_VISITOR in SuperficialValidation, which overrides visitError to return false when a type can't be found. Finding ""missing"" types is essential for BasicAnnotationProcessor's ""deferring"" functionality.

Here's a ""real world"" example: junit test ""moduleHasGeneratedQualifier"" in https://github.com/google/dagger/blob/master/javatests/dagger/internal/codegen/ComponentProcessorTest.java fails with Java 12. ;;;","2021-11-29 13:43;darcy;The most relevant portion of the javax.lang.model spec is the guidance given in the element package:

""During annotation processing, operating on incomplete or erroneous programs is necessary; however, there are fewer guarantees about the nature of the resulting model. If the source code is not syntactically well-formed or has some other irrecoverable error that could not be removed by the generation of new classes or interfaces, a model may or may not be provided as a quality of implementation issue. If a program is syntactically valid but erroneous in some other fashion, any returned model must have no less information than if all the method bodies in the program were replaced by ""throw new RuntimeException();"". If a program refers to a missing class or interface Xyz, the returned model must contain no less information than if the declaration of class or interface Xyz were assumed to be ""class Xyz {}"", ""interface Xyz {}"", ""enum Xyz {}"", ""@interface Xyz {}"", or ""record Xyz {}"". If a program refers to a missing class or interface Xyz<K1, ... ,Kn>, the returned model must contain no less information than if the declaration of Xyz were assumed to be ""class Xyz<T1, ... ,Tn> {}"" or ""interface Xyz<T1, ... ,Tn> {}"" ""

Based on this, it would seem to somewhat preferable to return a model of the annotation whose type is missing.;;;","2021-12-05 22:26;roboduke;Changeset: 104aa1f7
Author:    Srikanth Adayapalam <sadayapalam@openjdk.org>
Date:      2021-12-06 06:24:56 +0000
URL:       https://git.openjdk.java.net/jdk/commit/104aa1f7f9f212318113e304e16e185a6acbec6c
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
java/foreign/TestResourceScope.java timed out,JDK-8268566,5051593,Bug,Closed,JDK,JDK,software,duke,,,P2,Fixed,mcimadamore,dcubed,dcubed,2021-06-10 11:28,2021-07-30 05:01,2023-10-01 09:57,2021-07-01 09:30,17,18,,,,,,17,core-libs,,0,intermittent,tier1,tier6,,,,,,,,,,,"The following test timed out in the JDK18 CI:

java/foreign/TestResourceScope.java

Here's a snippet from the log file:

#section:testng
----------messages:(7/423)----------
command: testng TestResourceScope
reason: User specified action: run testng/othervm TestResourceScope 
Mode: othervm [/othervm specified]
Additional options from @modules: --add-modules java.base,jdk.incubator.foreign --add-exports java.base/jdk.internal.ref=ALL-UNNAMED --add-exports jdk.incubator.foreign/jdk.incubator.foreign=ALL-UNNAMED
Timeout information:
--- Timeout information end.
elapsed time (seconds): 494.965
----------configuration:(5/214)----------
Boot Layer
  add modules: java.base jdk.incubator.foreign             
  add exports: java.base/jdk.internal.ref                  ALL-UNNAMED
               jdk.incubator.foreign/jdk.incubator.foreign ALL-UNNAMED

----------System.out:(9/743)----------
test TestResourceScope.testCloseConfinedLock(): success
test TestResourceScope.testCloseEmptyConfinedScope(): success
test TestResourceScope.testCloseEmptySharedScope(): success
test TestResourceScope.testConfined(TestResourceScope$$Lambda$92/0x0000000800c35168@277f549): success
test TestResourceScope.testConfined(TestResourceScope$$Lambda$93/0x0000000800c35388@524bbb19): success
test TestResourceScope.testConfined(TestResourceScope$$Lambda$94/0x0000000800c355a8@3e475a21): success
test TestResourceScope.testLockSharedMultiThread(TestResourceScope$$Lambda$92/0x0000000800c35168@277f549): success
test TestResourceScope.testLockSharedMultiThread(TestResourceScope$$Lambda$93/0x0000000800c35388@524bbb19): success
Timeout refired 480 times
----------System.err:(1/56)----------
WARNING: Using incubator modules: jdk.incubator.foreign
----------rerun:(39/6017)*----------

<snip>

result: Error. Program `/opt/mach5/mesos/work_dir/jib-master/install/jdk-18+1-3/linux-aarch64.jdk/jdk-18/bin/java' timed out (timeout set to 480000ms, elapsed time including timeout handling was 494950ms).
",,,,,,,,,,,JDK-8269787,JDK-8270699,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,aarch64,,,,,,,,,linux,,,,,"0|i2t6cz:",9223372036854775807,b30,,,,,,,,,,Verified,,"2021-07-01 09:30;roboduke;Changeset: e3773977
Author:    Maurizio Cimadamore <mcimadamore@openjdk.org>
Date:      2021-07-01 16:28:48 +0000
URL:       https://git.openjdk.java.net/jdk17/commit/e3773977cfdcd691a5664a4715328f8552e319e7
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
[TESTBUG] Case 2 in TestP11KeyFactoryGetRSAKeySpec is skipped,JDK-8268558,5051579,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,fguallini,fguallini,fguallini,2021-06-10 09:30,2023-07-13 02:28,2023-10-01 09:57,2021-09-07 07:38,,,,,,,,18,security-libs,,0,11-bp,8-bp,jdk11u-fix-request,jdk11u-fix-yes,jdk17u-fix-request,jdk17u-fix-yes,jdk8u-fix-request,jdk8u-fix-yes,noreg-self,testbug,,,,"There is a small issue in test/jdk/sun/security/pkcs11/rsa/TestP11KeyFactoryGetRSAKeySpec.java: 
the method testKeySpec is expecting a keySpec class as second argument in order to be reusable for multiple test scenarios, but instead of using that argument is hardcoding RSAPrivateKeySpec.class:

private static void testKeySpec(KeyFactory factory, PrivateKey key, Class<? extends KeySpec> specClass) throws Exception {
        try {
            KeySpec spec = factory.getKeySpec(key, RSAPrivateKeySpec.class);

it should be: 
KeySpec spec = factory.getKeySpec(key, specClass);",,,,,,,,,,,JDK-8281115,JDK-8282973,JDK-8312017,JDK-8307072,JDK-8308809,,,,,,,,,,,,,,,,,,,,,,JDK-8263404,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2t69v:",9223372036854775807,b14,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@2ec284e3,,,,,,,,,"2021-09-07 07:37;roboduke;Changeset: 041ae20b
Author:    Fernando Guallini <fguallini@openjdk.org>
Committer: Rajan Halade <rhalade@openjdk.org>
Date:      2021-09-07 14:36:15 +0000
URL:       https://git.openjdk.java.net/jdk/commit/041ae20b10e11381415e8f61fd39e9e19aa8d4f2
;;;","2022-03-09 07:30;goetz;Fix request [17u]

I backport this for parity with 17.0.4-oracle.
No risk, only a test change.
Clean backport.
Test passes.;;;","2022-03-09 07:38;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk17u-dev/pull/223
Date: 2022-03-09 15:32:47 +0000;;;","2023-04-21 16:36;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk11u-dev/pull/1847
Date: 2023-04-21 22:55:32 +0000;;;","2023-04-24 13:32;serb;Fix request (8u 11u)

clean backport.
This is the fix for the test which was integrated as part of https://bugs.openjdk.org/browse/JDK-8263404
It will be good to have the up-to-date and correct test for that tck-red bug.

Review 8u-dev: https://github.com/openjdk/jdk8u-dev/pull/308
Review 11u-dev: https://github.com/openjdk/jdk11u-dev/pull/1847
;;;","2023-04-24 13:35;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk8u-dev/pull/308
Date: 2023-04-21 23:34:29 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,
Module page uses unstyled table class,JDK-8268557,5051578,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,hannesw,hannesw,hannesw,2021-06-10 08:29,2021-07-15 10:24,2023-10-01 09:57,2021-06-30 11:41,17,,,,,,,17,tools,,0,,,,,,,,,,,,,,"Module pages use the ""details-table"" CSS class for several of its tables (Requires, Indirect Requires, Indirect Exports, Indirect Opens, Provides, Uses). There are no rules defined for this class in the default stylesheet. This causes the problems with the padding for the table contents (zero left side padding, see attached screenshot).

The simplest solution would be to use ""summary-table"" as primary table class like in all other tables of this kind.",,,,,,,,,,,JDK-8270684,JDK-8269717,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"2021-06-10 08:29;hannesw;module-grid.png;https://bugs.openjdk.org/secure/attachment/95094/module-grid.png",,,,,,,,,,,,,,,,,,,,,,,,,"0|i2t69n:",9223372036854775807,b30,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@7900061a,,,,,,,,,"2021-06-10 13:59;jjg;Summary tables are in the ""summary"" section of a page, and link to ""details"" entries in the ""details"" part of the page. In general, summary tables contain members that are ""enclosed"" by the type element for the page.

Directives in a module declaration are not members, and so they don't get the ""summary + details"" treatment.  

The intent of the ""details table"" class was for use with tables in the detailed description of an element ... in these cases for the directives of a module element.;;;","2021-06-30 11:41;roboduke;Changeset: 38260122
Author:    Hannes Wallnöfer <hannesw@openjdk.org>
Date:      2021-06-30 18:40:17 +0000
URL:       https://git.openjdk.java.net/jdk17/commit/38260122815aed32627472e5d58b516e89ef7bd7
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Update HttpClient tests that use ITestContext to jtreg 6+1,JDK-8268555,5051574,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,dfuchs,dfuchs,dfuchs,2021-06-10 07:43,2021-10-04 12:33,2023-10-01 09:57,2021-06-11 01:43,17,,,,,,,17,core-libs,,0,httpclient,jdk11u-fix-request,jdk11u-fix-yes,noreg-self,testbug,,,,,,,,,"Throwing an exception in @BeforeMethod now causes all annotated methods to be skipped, not just @Test methods. Tests should be adapted to throw SkipException in @Test methods instead.",,,,,,,,,,,JDK-8274747,JDK-8268708,JDK-8269905,,,,,,,,,,,,,,,,,,,,,,,,JDK-8254786,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2t68r:",9223372036854775807,b27,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@446e124a,,,,,,,,,"2021-06-11 01:43;roboduke;Changeset: da043e99
Author:    Daniel Fuchs <dfuchs@openjdk.org>
Date:      2021-06-11 08:42:14 +0000
URL:       https://git.openjdk.java.net/jdk17/commit/da043e99b830fa4fcbfdbdbed182abc394ba6fb1
;;;","2021-09-30 01:24;goetz;Fix request [11u]

I downport this for parity with 11.0.13-oracle.
No risk, only a test change.
Test passes. Nightly tests pass.
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
[lworld] CI must return secondary mirror when accessing CONSTANT_Class with Q-signature,JDK-8268553,5051569,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,fparain,fparain,fparain,2021-06-10 05:56,2021-07-06 04:16,2023-10-01 09:57,2021-06-23 10:30,repo-valhalla,,,,,,,repo-valhalla,hotspot,,0,lw3,lworld,,,,,,,,,,,,"When CI accesses a constant pool entry of type CONSTANT_Class_info containing a Q-signature, it must return the secondary mirror instead of the primary mirror (or the unloaded_klass_mirror if the class has not been loaded yet).
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2t67n:",9223372036854775807,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2021-07-06 04:16;thartmann;Thanks for fixing, [~fparain]!;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Typo in file name in example for -Xlint:processing,JDK-8268549,5051446,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,jjg,webbuggrp,webbuggrp,2021-06-09 05:03,2021-07-15 11:17,2023-10-01 09:57,2021-06-30 08:36,16,,,,,,,17,tools,,0,dcsad,noreg-doc,webbug,,,,,,,,,,,"A DESCRIPTION OF THE PROBLEM :
https://docs.oracle.com/en/java/javase/16/docs/specs/man/javac.html

Proposed fix: https://github.com/openjdk/jdk/pull/3937

STEPS TO FOLLOW TO REPRODUCE THE PROBLEM :
Check the section ""Examples of Using -Xlint keys"" https://docs.oracle.com/en/java/javase/16/docs/specs/man/javac.html#examples-of-using--xlint-keys for ""processing"" key.

EXPECTED VERSUS ACTUAL BEHAVIOR :
EXPECTED -
Many possibilities. 
- Referenced file name matches contained class.
- Contained class name matches the file name.
- The class to not be not public.
ACTUAL -
Referenced file name does not match the name of public class.

",,,,,,,,,,,JDK-8270779,JDK-8269747,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,generic,,,,,,,,,generic,,,,,"0|i2t5gb:",9223372036854775807,b30,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4dca67bd,,,,,,,,,"2021-06-10 04:52;adev;In the section ""Examples of Using -Xlint keys"" https://docs.oracle.com/en/java/javase/16/docs/specs/man/javac.html#examples-of-using--xlint-keys for ""processing"" key, following changes are required :

1. import javaz.lang.model.element.*; should be changed to import javax.lang.model.element.*;
2. Source file AnnocProc.java: should be changed to Source file AnnoProc.java - because the class name is AnnoProc :;;;","2021-06-29 15:49;jjg;There is one additional typo listed in the proposed review:

I think there is also chance to fix source for line 2114

jdk/src/jdk.compiler/share/man/javac.1
Lines 2112 to 2114 in e9b2c05
 The compiler generates this warning when you have a class that has an 
 annotation, and you use an annotation processor that cannot handle that 
 type of exception. 
as I suppose it shall be type of annotation.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Patterns: Remove stale text about any patterns,JDK-8268545,5051561,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,gbierman,gbierman,gbierman,2021-06-10 04:05,2021-06-21 09:51,2023-10-01 09:57,2021-06-15 14:03,,,,,,,,17,specification,,0,noreg-doc,,,,,,,,,,,,,A sentence regarding the form of any patterns is now redundant and should be removed. ,,,,,,,,,,,JDK-8268840,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2t65v:",9223372036854775807,b27,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@7441ef8d,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
serviceability/logging/TestFullNames.java tests only 1st test case,JDK-8268542,5051556,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,iignatyev,iignatyev,iignatyev,2021-06-10 03:21,2022-01-21 04:20,2023-10-01 09:57,2021-06-10 07:44,11,13,17,,,,,17,hotspot,,0,jdk11u-fix-request,jdk11u-fix-yes,noreg-self,,,,,,,,,,,"serviceability/logging/TestFullNames.java test contains two test cases: specifying filename w/ and w/o ""file="" prefix. yet, the test doesn't remove the file, hence its 2nd test case doesn't really test much. ",,,,,,,,,,,JDK-8280140,JDK-8280452,,,,,,,,,,,,,,,,,,,,,JDK-8215398,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2t64r:",9223372036854775807,b00,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@2846162a,,,,,,,,,"2021-06-10 07:44;roboduke;Changeset: 74007890
Author:    Igor Ignatyev <iignatyev@openjdk.org>
Date:      2021-06-10 14:43:08 +0000
URL:       https://git.openjdk.java.net/jdk/commit/74007890bb9a3fa3a65683a3f480e399f2b1a0b6
;;;","2022-01-19 12:38;goetz;Fix request [11u]

I backport this for parity with 11.0.15-oracle.
No risk, only a test change.
Clean backport.
Test passes.;;;","2022-01-19 12:42;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk11u-dev/pull/782
Date: 2022-01-19 20:37:44 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
(Temporary) Disable ParallelRefProcEnabled for Parallel GC,JDK-8268537,5051548,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,lkorinth,lkorinth,lkorinth,2021-06-10 01:34,2021-06-10 18:02,2023-10-01 09:57,2021-06-10 06:21,17,,,,,,,17,hotspot,,0,gc-parallel,,,,,,,,,,,,,This is a temporary fix until the underlying problem in  https://bugs.openjdk.java.net/browse/JDK-8268350 is resolved,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8268350,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2t62z:",9223372036854775807,b26,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6b00f96c,,,,,,,,,"2021-06-10 06:21;roboduke;Changeset: 7cd5a6e7
Author:    Leo Korinth <lkorinth@openjdk.org>
Date:      2021-06-10 13:19:43 +0000
URL:       https://git.openjdk.java.net/jdk/commit/7cd5a6e7b52687e80b1aad9f550c2637f501c414
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
[lqagain] langtool tests need tweaks to run properly in an universe where -XDunifiedValRefClass is the default,JDK-8268527,5051536,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,sadayapalam,sadayapalam,sadayapalam,2021-06-09 21:22,2021-06-10 05:03,2023-10-01 09:57,2021-06-10 05:03,repo-valhalla,,,,,,,repo-valhalla,tools,,0,lworld,,,,,,,,,,,,,"The following tests fail in the lqagain branch where -XDunifiedValRefClass is the default. 

This is most likely due to the class file disassembly/inspection tests expecting split class files for primitive classes.

tools/javac/valhalla/lworld-values/ArrayCreationWithQuestion.java: Check array creation with V and V.ref
tools/javac/valhalla/lworld-values/AttributesTest.java: V.ref class should not inadvertently carry over attributes from V.class
tools/javac/valhalla/lworld-values/BoxValCastTest.java: Q<->L mixing should be OK for upcasts and should use checkcasts for downcasts.
tools/javac/valhalla/lworld-values/CheckFieldDescriptors.java: Check field descriptors in class file
tools/javac/valhalla/lworld-values/CheckNeededCastInMemberAccess.java: Verify that necessary checkcasts are generated while acessing an instance field/method through a reference projection.
tools/javac/valhalla/lworld-values/InlineNestingAttributesTest.java: Test nest host - member attributes
tools/javac/valhalla/lworld-values/ProjectedArrayDotClass.java: Javac fails to compile V?[].class (syntax dead)
tools/javac/valhalla/lworld-values/ProjectionSealed.java: Check to see if the reference projection is a sealed class
tools/javac/valhalla/lworld-values/RefDotClass.java: Check that we are able to get a class literal for a reference projection type
tools/javac/valhalla/lworld-values/SignatureTest.java: Incorrect Signature attribute in class file
tools/javac/valhalla/lworld-values/SplitPrimitiveClassBytecodeTest.java: Experimental support for generating a single class file per primitive class
tools/javac/valhalla/lworld-values/SplitPrimitiveClassInnerClassesTest.java: Experimental support for generating a single class file per primitive class
tools/javac/valhalla/lworld-values/SplitPrimitiveClassNestHostTest.java: Experimental support for generating a single class file per primitive class
tools/javac/valhalla/lworld-values/TopInterfaceTest.java: Introduce and wire-in the new top interfaces
tools/javac/valhalla/lworld-values/UnannotatedProjection.java: V.ref class should not inadvertently carry over attributes from V.class
tools/javac/valhalla/lworld-values/UnifiedPrimitiveClassNestHostTest.java: Experimental support for generating a single class file per primitive class",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,generic,,,,,,,,,generic,,,,,"0|i2t60b:",9223372036854775807,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4dca67bd,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Some new memory leak after JDK-8248268 and JDK-8255557,JDK-8268525,5051535,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,weijun,weijun,weijun,2021-06-09 20:33,2021-06-17 07:34,2023-10-01 09:57,2021-06-10 15:19,17,,,,,,,17,security-libs,,0,noreg-cleanup,,,,,,,,,,,,,JDK-8248268 and JDK-8255557 introduced some new memory leaks. Should be removed.,,,,,,,,,,,JDK-8268705,,,,,,,,,,,,,,,,,,,,,,JDK-8248268,,,,JDK-8255557,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2t603:",9223372036854775807,b27,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@2ec284e3,,,,,,,,,"2021-06-10 15:19;roboduke;Changeset: 7b2e7d8b
Author:    Weijun Wang <weijun@openjdk.org>
Date:      2021-06-10 22:18:38 +0000
URL:       https://git.openjdk.java.net/jdk17/commit/7b2e7d8bab890bd655093976cc9c3b0b6d00c034
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
nmethod::post_compiled_method_load_event racingly called on zombie,JDK-8268524,5051533,Bug,Closed,JDK,JDK,software,duke,,,P2,Fixed,eosterlund,dholmes,dholmes,2021-06-09 18:44,2021-07-15 10:19,2023-10-01 09:57,2021-06-22 08:20,17,,,,,,,17,hotspot,,0,tier3,zgc,,,,,,,,,,,,"This appears to be a similar crash as observed with JDK-8267972.

#
# A fatal error has been detected by the Java Runtime Environment:
#
#  SIGSEGV (0xb) at pc=0x0000fffc0edee020, pid=45124, tid=47438
#
# JRE version: Java(TM) SE Runtime Environment (17.0+26) (fastdebug build 17-ea+26-LTS-2407)
# Java VM: Java HotSpot(TM) 64-Bit Server VM (fastdebug 17-ea+26-LTS-2407, compiled mode, sharing, tiered, compressed class ptrs, z gc, linux-aarch64)
# Problematic frame:
# V  [libjvm.so+0x131e020]  Method::is_method_handle_intrinsic() const+0x0


Current thread (0x0000fffc082f7d80):  JavaThread ""Thread-0"" daemon [_thread_in_vm, id=47438, stack(0x0000fff9ca800000,0x0000fff9caa00000)]

Stack: [0x0000fff9ca800000,0x0000fff9caa00000],  sp=0x0000fff9ca9fe660,  free space=2041k
Native frames: (J=compiled Java code, j=interpreted, Vv=VM code, C=native code)
V  [libjvm.so+0x131e020]  Method::is_method_handle_intrinsic() const+0x0
V  [libjvm.so+0x61bcf8]  BarrierSetNMethod::is_armed(nmethod*)+0x18
V  [libjvm.so+0x186e154]  ZBarrierSetNMethod::nmethod_entry_barrier(nmethod*)+0x94
V  [libjvm.so+0x9a66f0]  CompiledMethod::run_nmethod_entry_barrier()+0x60
V  [libjvm.so+0x1115f50]  JvmtiDeferredEventQueue::run_nmethod_entry_barriers()+0x40
V  [libjvm.so+0x1076f20]  JvmtiCodeBlobEvents::generate_compiled_method_load_events(JvmtiEnv*)+0x190
V  [libjvm.so+0x107d340]  jvmti_GenerateEvents+0xec
C  [libCompiledZombie.so+0x930]  GenerateEventsThread+0x5c
V  [libjvm.so+0x1112164]  JvmtiAgentThread::call_start_function()+0x1e4
V  [libjvm.so+0x170421c]  JavaThread::thread_main_inner()+0x28c
V  [libjvm.so+0x170e458]  Thread::call_run()+0xf8
V  [libjvm.so+0x142ab34]  thread_native_entry(Thread*)+0x104
C  [libpthread.so.0+0x7738]  start_thread+0x198",,,,,,,,,,,JDK-8270618,JDK-8269197,,,,,,,,,,,,,,,,,,JDK-8245877,,,JDK-8181110,JDK-8267972,,,,,,,,,,,,,,,,,,aarch64,,,,,,,,,linux,,,,,"0|i2t5zn:",9223372036854775807,b28,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6b00f96c,,,,,,,Verified,,"2021-06-15 03:46;eosterlund;== Problem Domain ==

In the code exercised by this test, we grab a code cache iterator with the NMethodIterator::only_alive_and_not_unloading mode, under the CodeCache_lock. The idea is to then call post_compiled_method_load_event() on each of these is_alive() nmethods. Surely none of them will be a zombie. Inside of post_compiled_method_load_event() we filter out nmethods that racingly can die, like this:

if (is_not_entrant() && can_convert_to_zombie()) {                                                                                                           
  return;                                                                                                                                                    
}

So if the nmethod was dead or is_unloading(), we wouldn't get it into the iterator, and here we explicitly filter out nmethods that can become zombies. Now we should have all bases covered, no way we can end up calling the subsequent code on a zombie!

Except... the code called by the sweeper that flips an nmethod to zombie, doesn't hold the CodeCache_lock. Instead it holds the CompiledMethod_lock, which this JVMTI code does not hold. So between it being alive in the iterator, and calling is_not_entrant(), the nmethod could have racingly already become zombie. So when we check is_not_entrant(), it will return false. Because it's a zombie. Therefore we are tricked into believing the nmethod is safe to post around these events, while in fact it is already dead.

After we have mistakenly grabbed a zombie nmethod, when we use ZGC, we call the nmethod entry barriers on it. It gets indigestion due to being called on a zombie. Ouch.

== Solution Domain ==

It feels like our code cache iterators are too weak. You tell the iterator to give you is_alive() nmethods, but you are only guaranteed that they were is_alive ""at some point"", as opposed to throughout the iteration. So bugs like these using the CodeCache iterator can slip in very easily, due to the unintuitiveness. Having the sweeper hold the CodeCache_lock throughout the entire make_zombie() call would achieve that, but moving that around is quite tricky due to the spaghetti nature of that code, and would probably lead to lock rank hell.

A targeted fix for this specific failure mode, would hold the CompiledMethod_lock across the safety check in nmethod::post_compiled_method_load_event(), and make sure to check that it is_alive() under that lock.;;;","2021-06-22 08:20;roboduke;Changeset: 9ec7180f
Author:    Erik Österlund <eosterlund@openjdk.org>
Date:      2021-06-22 15:20:10 +0000
URL:       https://git.openjdk.java.net/jdk17/commit/9ec7180f1ebf2ff19b0735f7b1c4fc9b97d632be
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
InstanceKlass::can_be_verified_at_dumptime() returns opposite value,JDK-8268522,5051528,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,ccheung,iklam,iklam,2021-06-09 16:51,2021-06-17 07:35,2023-10-01 09:57,2021-06-14 08:04,,,,,,,,17,hotspot,,0,cds,,,,,,,,,,,,,"(InstanceKlass::can_be_verified_at_dumptime(k) == true) IFF (k and all of its supertypes have major_version >= 50)

However, currently this function returns the opposite value.

The fix is:

--- a/src/hotspot/share/oops/instanceKlass.cpp
+++ b/src/hotspot/share/oops/instanceKlass.cpp
 // Verification of archived old classes will be performed during run time.
 bool InstanceKlass::can_be_verified_at_dumptime() const {
   if (major_version() < 50 /*JAVA_6_VERSION*/) {
-    return true;
+    return false;
   }
-  if (java_super() != NULL && java_super()->can_be_verified_at_dumptime()) {
-    return true;
+  if (java_super() != NULL && !java_super()->can_be_verified_at_dumptime()) {
+    return false;
   }
   Array<InstanceKlass*>* interfaces = local_interfaces();
   int len = interfaces->length();
   for (int i = 0; i < len; i++) {
-    if (interfaces->at(i)->can_be_verified_at_dumptime()) {
-      return true;
+    if (!interfaces->at(i)->can_be_verified_at_dumptime()) {
+      return false;
     }
   }
-  return false;
+  return true;
 }",,,,,,,,,,,JDK-8268833,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8267431,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2t5yj:",9223372036854775807,b27,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,,,"2021-06-09 16:55;iklam;This function used to be named InstanceKlass::has_old_class_version. It was renamed to can_be_verified_at_dumptime in JDK-8267431.

The renaming has flipped the meaning of the function, so all the boolean operations associated with this function need to be flipped, too.;;;","2021-06-09 16:57;iklam;Changed to P3 since the existing usage in the source code is confusing to the reader.;;;","2021-06-09 19:41;dholmes;I may just be getting confused but don't those double negations cancel each other out? If you are inverting the meaning of  can_be_verified_at_dumptime then you either negate the call to retain the existing logic, or you negate the result of the expression - but not both.

Alternatively and much simpler, rename the method again to  cannot_be_verified_at_dumptime;;;","2021-06-11 00:22;iklam;Names like cannot_be_verified_at_dumptime should be avoided, since they will lead to double negation in the code that's hard to read

   if (!cannot_be_verified_at_dumptime()) { ....}
;;;","2021-06-14 08:04;roboduke;Changeset: c088d093
Author:    Calvin Cheung <ccheung@openjdk.org>
Date:      2021-06-14 15:02:55 +0000
URL:       https://git.openjdk.java.net/jdk17/commit/c088d093e2e73fd0739d9e96f9f5ea67a01ae06c
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Add headful keyword to LayoutFocusTraversalPolicy.java,JDK-8268518,5051523,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,aivanov,aivanov,aivanov,2021-06-09 15:03,2021-11-01 21:11,2023-10-01 09:57,2021-06-10 06:33,8u311,,,,,,,8u311,client-libs,,0,11-na,cssn21_06_01,noreg-self,sustaining,,,,,,,,,,"JDK-8154043 is backported to 8u, the new test test/java/awt/Focus/FocusTraversalPolicy/ButtonGroupLayoutTraversal/ButtonGroupLayoutTraversalTest.java must be marked with
@key headful",,,,,,,,,,,JDK-8271424,,,,,,,,,,,,,,,,,,,,,,JDK-8154043,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2t5xf:",9223372036854775807,b01,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@568a5b31,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
compiler/intrinsics/VectorizedMismatchTest.java failed with failed: length in range,JDK-8268482,5051487,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,jbhateja,dlong,dlong,2021-06-09 12:52,2021-07-15 10:16,2023-10-01 09:57,2021-06-23 20:02,17,18,,,,,,17,hotspot,,0,c2-intrinsic,c2-vector,hs-comp-triaged,intermittent,oracle-triage-11,oracle-triage-17,tier1,tier3,tier6,tier7,,,,"assert(Matcher::vector_size_supported(elem_bt, length)) failed: length in range

V  [jvm.dll+0x4c65b7]  report_vm_error+0xb7  (debug.cpp:282)
V  [jvm.dll+0xca7ffc]  TypeVect::make+0x8c  (type.cpp:2351)
V  [jvm.dll+0x914e7a]  LibraryCallKit::inline_vectorizedMismatch+0x33a  (library_call.cpp:5315)
V  [jvm.dll+0x919227]  LibraryCallKit::try_to_inline+0x1977  (library_call.cpp:580)
V  [jvm.dll+0x8fa056]  LibraryIntrinsic::generate+0x196  (library_call.cpp:118)
V  [jvm.dll+0x545618]  Parse::do_call+0x9c8  (doCall.cpp:629)
V  [jvm.dll+0xb072c3]  Parse::do_one_bytecode+0x32f3  (parse2.cpp:2715)
V  [jvm.dll+0xaf93d7]  Parse::do_one_block+0x437  (parse1.cpp:1566)
V  [jvm.dll+0xaf7dcd]  Parse::do_all_blocks+0x5cd  (parse1.cpp:710)
V  [jvm.dll+0xaf434d]  Parse::Parse+0xc2d  (parse1.cpp:616)
V  [jvm.dll+0x3b6495]  ParseGenerator::generate+0xa5  (callGenerator.cpp:103)
V  [jvm.dll+0x545618]  Parse::do_call+0x9c8  (doCall.cpp:629)
V  [jvm.dll+0xb072c3]  Parse::do_one_bytecode+0x32f3  (parse2.cpp:2715)
V  [jvm.dll+0xaf93d7]  Parse::do_one_block+0x437  (parse1.cpp:1566)
V  [jvm.dll+0xaf7dcd]  Parse::do_all_blocks+0x5cd  (parse1.cpp:710)
V  [jvm.dll+0xaf434d]  Parse::Parse+0xc2d  (parse1.cpp:616)
V  [jvm.dll+0x3b6495]  ParseGenerator::generate+0xa5  (callGenerator.cpp:103)
V  [jvm.dll+0x47bf6e]  Compile::Compile+0xfde  (compile.cpp:705)
V  [jvm.dll+0x3b1b7c]  C2Compiler::compile_method+0x10c  (c2compiler.cpp:106)
V  [jvm.dll+0x494f7e]  CompileBroker::invoke_compiler_on_method+0x94e  (compileBroker.cpp:2312)
V  [jvm.dll+0x4925b7]  CompileBroker::compiler_thread_loop+0x2b7  (compileBroker.cpp:1986)",,,,,,,,,,,JDK-8270633,JDK-8269446,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2t5pf:",9223372036854775807,b29,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2021-06-09 19:53;dlong;ILW = intermittent assert in debug build, one test, no workaround = MLH = P4;;;","2021-06-14 15:31;dlong;[~jbhateja] Could you take a look at this failure please?;;;","2021-06-14 15:36;dlong;The failure seems to be happening only on Windows so far.;;;","2021-06-14 16:05;dlong;From the hs_err file:

KVM virtualization detected

CPU: total 8 (initial active 8) (4 cores per cpu, 2 threads per core) family 6 model 85 stepping 4 microcode 0x1, cx8, cmov, fxsr, ht, mmx, 3dnowpref, sse, sse2, sse3, ssse3, sse4.1, sse4.2, popcnt, lzcnt, tsc, avx, avx2, aes, erms, clmul, bmi1, bmi2, rtm, adx, avx512f, avx512cd, fma, vzeroupper, clflush, hv;;;","2021-06-14 21:13;dholmes;To me this is a P3 that needs to assessed for JDK 17 and only deferred out of 17 with suitable justification. It seems to happening more and more frequently. There are 12 occurrences (not all CI) since June 8 and they seem to have started after JDK-8268292 was fixed. But yes only Windows and apparently only two specific machines.;;;","2021-06-14 22:53;dlong;I dont't think it's related to 8268292, which only fixed a problem with release builds.  I think the asserts since June 8 is just because this is a new test added on June 5.;;;","2021-06-15 09:58;dlong;ILW update = incorrect feature checking, virtual hardware, workaround: disable cpu features = HLM = P3;;;","2021-06-15 10:07;dlong;I can reproduce this on a Linux machine by forcing the cpu features to match the virtualized test machine.  In particular, limiting the avx512 feature flags to the following restricted set: avx512f, avx512cd;;;","2021-06-22 04:18;jbhateja;From stack trace it appears that vector type creation TypeVect::make(elem_bt, inline_limit) causes an assertion failure. inline_limit must always be >= 16, that ensure that minimal vector size requested is 16 bytes [T_BYTE, 16].  From the cpu features it appears that platform does support 16 byte vectors. 

I cannot reproduce this issue over linux when only avx512 and avx512cd features enabled, following patch defers vector type creation un-till HW features needed for partial in-lining are checked. 

--- a/src/hotspot/share/opto/library_call.cpp
+++ b/src/hotspot/share/opto/library_call.cpp
@@ -5343,12 +5343,11 @@ bool LibraryCallKit::inline_vectorizedMismatch() {
   if (do_partial_inline) {
     assert(elem_bt != T_ILLEGAL, ""sanity"");

-    const TypeVect* vt = TypeVect::make(elem_bt, inline_limit);
-
     if (Matcher::match_rule_supported_vector(Op_VectorMaskGen,    inline_limit, elem_bt) &&
         Matcher::match_rule_supported_vector(Op_LoadVectorMasked, inline_limit, elem_bt) &&
         Matcher::match_rule_supported_vector(Op_VectorCmpMasked,  inline_limit, elem_bt)) {

+      const TypeVect* vt = TypeVect::make(elem_bt, inline_limit);
       Node* cmp_length = _gvn.transform(new CmpINode(length, intcon(inline_limit)));
       Node* bol_gt     = _gvn.transform(new BoolNode(cmp_length, BoolTest::gt));


@Dean can you kindly validate if this fixes the issue. ;;;","2021-06-22 20:49;dlong;[~jbhateja], this is the patch I used to reproduce:
diff --git a/src/hotspot/cpu/x86/vm_version_x86.hpp b/src/hotspot/cpu/x86/vm_version_x86.hpp
index 88334ec8c6f..48d8e03aadc 100644
--- a/src/hotspot/cpu/x86/vm_version_x86.hpp
+++ b/src/hotspot/cpu/x86/vm_version_x86.hpp
@@ -574,26 +574,37 @@ enum Extended_Family {
         if (_cpuid_info.sef_cpuid7_ebx.bits.avx512cd != 0)
           result |= CPU_AVX512CD;
         if (_cpuid_info.sef_cpuid7_ebx.bits.avx512dq != 0)
+if (UseNewCode)
           result |= CPU_AVX512DQ;
         if (_cpuid_info.sef_cpuid7_ebx.bits.avx512pf != 0)
+if (UseNewCode)
           result |= CPU_AVX512PF;
         if (_cpuid_info.sef_cpuid7_ebx.bits.avx512er != 0)
+if (UseNewCode)
           result |= CPU_AVX512ER;
         if (_cpuid_info.sef_cpuid7_ebx.bits.avx512bw != 0)
+if (UseNewCode)
           result |= CPU_AVX512BW;
         if (_cpuid_info.sef_cpuid7_ebx.bits.avx512vl != 0)
+if (UseNewCode)
           result |= CPU_AVX512VL;
         if (_cpuid_info.sef_cpuid7_ecx.bits.avx512_vpopcntdq != 0)
+if (UseNewCode)
           result |= CPU_AVX512_VPOPCNTDQ;
         if (_cpuid_info.sef_cpuid7_ecx.bits.avx512_vpclmulqdq != 0)
+if (UseNewCode)
           result |= CPU_AVX512_VPCLMULQDQ;
         if (_cpuid_info.sef_cpuid7_ecx.bits.vaes != 0)
+if (UseNewCode)
           result |= CPU_AVX512_VAES;
         if (_cpuid_info.sef_cpuid7_ecx.bits.avx512_vnni != 0)
+if (UseNewCode)
           result |= CPU_AVX512_VNNI;
         if (_cpuid_info.sef_cpuid7_ecx.bits.avx512_vbmi != 0)
+if (UseNewCode)
           result |= CPU_AVX512_VBMI;
         if (_cpuid_info.sef_cpuid7_ecx.bits.avx512_vbmi2 != 0)
+if (UseNewCode)
           result |= CPU_AVX512_VBMI2;
       }
     }
;;;","2021-06-22 20:50;dlong;[~jbhateja] Your patch works for me.;;;","2021-06-23 04:26;jbhateja;Thanks for your help. Patch has been posted.;;;","2021-06-23 20:02;roboduke;Changeset: 0c3fc27a
Author:    Jatin Bhateja <jbhateja@openjdk.org>
Date:      2021-06-24 03:01:01 +0000
URL:       https://git.openjdk.java.net/jdk17/commit/0c3fc27a4577fbd054c409403e058d2859129c41
;;;",,,,,,,,,,,,,,,,,,,,,
Delete JAWT test files for mac,JDK-8268481,5051486,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,serb,serb,serb,2021-06-09 12:37,2021-07-30 11:13,2023-10-01 09:57,2021-06-10 02:09,17,,,,,,,17,client-libs,,0,noreg-self,,,,,,,,,,,,,"Due to some issues, we need to delete these files. Later this test case will be updated and reintegrated.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8268480,,,,,,,JDK-8263928,,,,,,,,,,,,,,,generic,,,,,,,,,generic,,,,,"0|i2t5p7:",9223372036854775807,b26,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@5a9b3fd3,,,,,,,,,"2021-06-10 02:09;roboduke;Changeset: ea19b044
Author:    Sergey Bylokhov <serb@openjdk.org>
Date:      2021-06-10 09:08:43 +0000
URL:       https://git.openjdk.java.net/jdk/commit/ea19b0447cf1ec97c0b0a817542ce7ead4f53176
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
JVMCI tests failing after JDK-8268052,JDK-8268478,5051483,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,never,dlong,dlong,2021-06-09 12:26,2021-07-05 23:42,2023-10-01 09:57,2021-06-09 16:05,17,,,,,,,17,hotspot,,0,hs-comp-triaged,jvmci,oracle-triage-11,oracle-triage-17,regression,,,,,,,,,"JVMCI tests are failing with ""must own lock CompiledMethod_lock""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8268052,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2t5oj:",9223372036854775807,b26,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2021-06-09 16:05;roboduke;Changeset: b41f3f8e
Author:    Tom Rodriguez <never@openjdk.org>
Date:      2021-06-09 23:04:45 +0000
URL:       https://git.openjdk.java.net/jdk/commit/b41f3f8ed512117fc3677f2c5e9ee5d28116bfeb
;;;","2021-06-09 19:56;dlong;ILW = jvmci tests faiing with assert = MMH = P3;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
CDS dynamic dump asserts with JFR RecordingStream,JDK-8268470,5051462,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,ccheung,iklam,iklam,2021-06-09 08:50,2021-06-17 07:35,2023-10-01 09:57,2021-06-11 09:09,17,,,,,,,17,hotspot,,0,cds,dynamic-cds,jfr,test-bigapps-Kitchensink,,,,,,,,,,"Use the attached JFRDynamicCDS.java test case:

$ rm -rf JFRDynamicCDS.tmp
$ mkdir -p JFRDynamicCDS.tmp
$ javac -d JFRDynamicCDS.tmp JFRDynamicCDS.java
$ jar cvf JFRDynamicCDS.jar -C JFRDynamicCDS.tmp .

$ java -cp JFRDynamicCDS.jar -Xlog:cds -XX:ArchiveClassesAtExit=JFRDynamicCDS.jsa JFRDynamicCDS
==> CRASH

$ java -cp JFRDynamicCDS.jar -Xlog:cds -XX:ArchiveClassesAtExit=JFRDynamicCDS.jsa JFRDynamicCDS 0
==> no crash

$ java -cp JFRDynamicCDS.jar -Xlog:cds -XX:ArchiveClassesAtExit=JFRDynamicCDS.jsa JFRDynamicCDS 1
==> CRASH

So  -XX:ArchiveClassesAtExit would crash if the app simply does:
     RecordingStream rs = new RecordingStream();
     rs.close();

This crash is observable only with JDK 17. JDK 16 is OK.

===============================================================

#  Internal Error (/jdk2/gil/open/src/hotspot/share/cds/archiveBuilder.cpp:841), pid=27195, tid=27204
#  assert(_builder->is_in_mapped_static_archive(*p)) failed: old pointer must point inside buffer space or mapped static archive

Current thread (0x00007f70e8279780):  VMThread ""VM Thread"" [stack: 0x00007f70b75f7000,0x00007f70b76f7000] [id=27204]

Stack: [0x00007f70b75f7000,0x00007f70b76f7000],  sp=0x00007f70b76f58f0,  free space=1018k
Native frames: (J=compiled Java code, j=interpreted, Vv=VM code, C=native code)
V  [libjvm.so+0x5c11f0]  ArchiveBuilder::relocate_to_requested()+0x260
V  [libjvm.so+0xb7aece]  VM_PopulateDynamicDumpSharedSpace::doit()+0x2fe
V  [libjvm.so+0x199613a]  VM_Operation::evaluate()+0x18a
V  [libjvm.so+0x19b9473]  VMThread::evaluate_operation(VM_Operation*)+0x183
V  [libjvm.so+0x19ba0e8]  VMThread::inner_execute(VM_Operation*)+0x1f8
V  [libjvm.so+0x19ba325]  VMThread::loop()+0xb5
V  [libjvm.so+0x19ba457]  VMThread::run()+0xc7
V  [libjvm.so+0x18ac120]  Thread::call_run()+0x100
V  [libjvm.so+0x1577e0e]  thread_native_entry(Thread*)+0x10e
",,,,,,,,,,,JDK-8268711,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"2021-06-09 11:28;iklam;JFRDynamicCDS.java;https://bugs.openjdk.org/secure/attachment/95092/JFRDynamicCDS.java",,,,,,,,,,,,,,,,,,,,,,,,,"0|i2t5jv:",9223372036854775807,b27,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,,,"2021-06-09 11:52;iklam;The problem is that JFR redefines built-in classes, such as java/lang/Throwable.

When running with -XX:ArchiveClassesAtExit, Throwable is loaded from the base archive. So all of its methods should be in the 0x800xxxxxx range. However, JFR replaces Throwable.toString() has been replaced with a new version (0x7fffa1eecfe0). Later, when a subclass of Throwable K is dynamically loaded, K will inherit this new version of Throwable.toString() in K's vtable.

#6 in RelocateBufferToRequested<false>::do_bit
841 assert(_builder->is_in_mapped_static_archive(*p), ""old pointer must point inside buffer space or mapped static archive"");

(gdb) frame 6
(gdb) p *p
$1 = (address) 0x7fffa1eecfe0

(gdb) p *(Method*)(*p)
$2 = {<Metadata> = {<MetaspaceObj> = {}, _vptr.Metadata = 0x7ffff720a908 <vtable for Method+16> ...

(gdb) p ((Method*)(*p))->_constMethod->_constants->_pool_holder->_name->base()
$6 = (const u1 *) 0x80049317e ""java/lang/Throwable""

(gdb) p ((Method*)(*p))->_constMethod->_constants->_pool_holder->has_been_redefined()
$7 = true

(gdb) p ((Method*)(*p))->name()->base()
$9 = (const u1 *) 0x8004970fe ""toString""
;;;","2021-06-09 11:56;iklam;Suggested fix: we should not archive any classes with dynamically defined methods. SystemDictionaryShared::check_for_exclusion_impl(InstanceKlass* k) should be modified to walk the supertypes of k. If any of the supertypes have been redefined, k should be excluded


bool SystemDictionaryShared::check_for_exclusion_impl(InstanceKlass* k) {
...
  if (k->has_been_redefined()) {   ///  <<<<<< also check if any supertypes have been redefined
    return warn_excluded(k, ""Has been redefined"");
  };;;","2021-06-11 09:09;roboduke;Changeset: 01054e6f
Author:    Calvin Cheung <ccheung@openjdk.org>
Date:      2021-06-11 16:08:18 +0000
URL:       https://git.openjdk.java.net/jdk17/commit/01054e6f5ab75dd1b7d3e82be0eb83f14a7add15
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
"Remove dependancy of TestHttpsServer, HttpTransaction, HttpCallback from open/test/jdk/sun/net/www/protocol/https/ tests",JDK-8268464,5051454,Bug,Closed,JDK,JDK,software,duke,,,P4,Fixed,mchhipa,mchhipa,mchhipa,2021-06-09 07:23,2023-08-01 01:43,2023-10-01 09:57,2021-06-23 08:19,,,,,,,,18,core-libs,,0,jdk11u-fix-request,jdk11u-fix-yes,jdk17u-fix-request,jdk17u-fix-yes,,,,,,,,,,"There are some regression tests depending on TestHttpsServer. internal API dependency should be removed from tests:

open/test/jdk/sun/net/www/protocol/https/ChunkedOutputStream.java
open/test/jdk/sun/net/www/protocol/https/HttpsURLConnection/B6216082.java",,,,,,,,,,,JDK-8276714,JDK-8276869,JDK-8313526,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2t5i3:",9223372036854775807,b04,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@446e124a,,,,,,,Verified,,"2021-06-23 08:19;roboduke;Changeset: 7621fa37
Author:    Mahendra Chhipa <mahendra.chhipa@oracle.com>
Committer: Michael McMahon <michaelm@openjdk.org>
Date:      2021-06-23 15:19:10 +0000
URL:       https://git.openjdk.java.net/jdk/commit/7621fa37efb2739b953da1cda87dca4762b5bd0c
;;;","2021-11-03 14:32;akasko;Fix request (17u)

Clean backport of a tests cleanup, change is test-only.;;;","2022-04-25 10:58;sqetools;verified;;;","2023-07-27 00:07;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk11u-dev/pull/2059
Date: 2023-07-27 06:58:23 +0000;;;","2023-07-27 22:32;andrewlu;Fix request [11u]

I backport this for parity with 11.0.21-oracle.
No risk, only a test change.
Clean backport.
Test passes. SAP nightly testing passed.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Windows 32bit build fails in DynamicCodeGenerated\libDynamicCodeGenerated.cpp,JDK-8268463,5051453,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,mbaesken,mbaesken,mbaesken,2021-06-09 07:18,2021-06-10 18:01,2023-10-01 09:57,2021-06-10 01:09,17,,,,,,,17,hotspot,,0,,,,,,,,,,,,,,"Our 32 bit Windows build fails with :

d:\test\hotspot\jtreg\serviceability\jvmti\DynamicCodeGenerated\libDynamicCodeGenerated.cpp(49): error C2373: 'Agent_OnLoad': redefinition; different type modifiers
d:\jdk-dev-build\support\modules_include\java.base\jvmti.h(51): note: see declaration of 'Agent_OnLoad'

I think the Agent_onLoad function in test/hotspot/jtreg/serviceability/jvmti/DynamicCodeGenerated/libDynamicCodeGenerated.cpp must be
JNIEXPORT jint JNICALL Agent_onLoad
to work on 32bit Windows .",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,x86,,,,,,,,,windows,,,,,"0|i2t5hv:",9223372036854775807,b26,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@661b156a,,,,,,,,,"2021-06-10 01:09;roboduke;Changeset: 78b09ab0
Author:    Matthias Baesken <mbaesken@openjdk.org>
Date:      2021-06-10 08:08:43 +0000
URL:       https://git.openjdk.java.net/jdk/commit/78b09ab04929871605abba3026ce9833c6e75789
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
ARM32: vector intrinsics reaches ShouldNotReachHere,JDK-8268461,5051451,Bug,Resolved,JDK,JDK,software,duke,,,P1,Fixed,cgo,cgo,cgo,2021-06-09 07:03,2021-07-15 09:58,2023-10-01 09:57,2021-06-10 01:29,17,,,,,,,17,hotspot,,0,c2,c2-intrinsic,hs-comp-triaged,oraclejdk-na,oracle-triage-17,,,,,,,,,"ARM32: vector intrinsics reaches ShouldNotReachHere

On 32-bit ARM, the vector intrinsics in C2 reach ShouldNotReachHere:

#
# A fatal error has been detected by the Java Runtime Environment:
#
#  Internal Error (arm.ad:1023), pid=623, tid=631
#  Error: ShouldNotReachHere()
#
# JRE version: OpenJDK Runtime Environment (17.0+22) (build 17-internal+22-ahead-408--dd34a4c28da73c798e021c7473ac57ead56c9903)
# Java VM: OpenJDK Server VM (17-internal+22-ahead-408--dd34a4c28da73c798e021c7473ac57ead56c9903, mixed mode, serial gc, linux-arm)
# Problematic frame:
# V  [libjvm.so+0xc3fb0]  Matcher::vector_ideal_reg(int)+0x44
#
# Core dump will be written. Default location: Core dumps may be processed with ""/usr/lib/systemd/systemd-coredump %P %u %g %s %t %c %h"" (or dumping to /home/microdoc/cgo/core.623)
#
# An error report file with more information is saved as:
# /home/microdoc/cgo/hs_err_pid623.log
#
# Compiler replay data is saved as:
# /home/microdoc/cgo/replay_pid623.log
#
# If you would like to submit a bug report, please visit:
#   https://bugreport.java.com/bugreport/crash.jsp
#

This is due to the fact, that on ARM32, ""Matcher::match_rule_supported_vector"" does not check for the supported length of vector operations, hence vector operations are created, even if the size is not supported. All other architectures are performing this check.

In a debug VM, this is situation is caught a bit earlier, by an assert in TypeVect::make

#
# A fatal error has been detected by the Java Runtime Environment:
#
#  Internal Error (/home/cgo/dev/openjdk/jdk/src/hotspot/share/opto/type.cpp:2351), pid=506, tid=517
#  assert(Matcher::vector_size_supported(elem_bt, length)) failed: length in range
#
# JRE version: OpenJDK Runtime Environment (17.0+22) (slowdebug build 17-internal+22-ahead-408--dd34a4c28da73c798e021c7473ac57ead56c9903)
# Java VM: OpenJDK Server VM (slowdebug 17-internal+22-ahead-408--dd34a4c28da73c798e021c7473ac57ead56c9903, mixed mode, serial gc, linux-arm)
# Problematic frame:
# V  [libjvm.so+0xf2c274]  TypeVect::make(Type const*, unsigned int)+0xb0
#
# Core dump will be written. Default location: Core dumps may be processed with ""/usr/lib/systemd/systemd-coredump %P %u %g %s %t %c %h"" (or dumping to /home/microdoc/cgo/core.506)
#
# If you would like to submit a bug report, please visit:
#   https://bugreport.java.com/bugreport/crash.jsp
#

This happens for many jdk_vector jtreg test cases.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,aarch32,,,,,,,,,linux,,,,,"0|i2t5hf:",9223372036854775807,b26,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2021-06-09 20:17;dlong;ILW = crash, one platform, no workaround = HMH = P1;;;","2021-06-10 01:29;roboduke;Changeset: 1fd81464
Author:    Christoph Göttschkes <cgo@openjdk.org>
Committer: Jie Fu <jiefu@openjdk.org>
Date:      2021-06-10 08:27:54 +0000
URL:       https://git.openjdk.java.net/jdk/commit/1fd81464ec0054f7843fba3490b7f33955717077
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
XML Transformer outputs Unicode supplementary character incorrectly to HTML,JDK-8268457,5051443,Bug,Closed,JDK,JDK,software,duke,,,P4,Fixed,joehw,myano,myano,2021-06-09 04:31,2023-06-14 07:50,2023-10-01 09:57,2021-06-30 09:26,17,,,,,,,18,xml,,0,jdk11u-fix-request,jdk11u-fix-yes,jdk17u-fix-request,jdk17u-fix-yes,,,,,,,,,,"I found following XML Transformer bug.

1. Using OpenJDK bundled XML Transformer.
2. Input XML contains Unicode supplementary character. 
3. Output file format is HTML.

In this case, generated HTML contains incorrect character.
If output file format is TEXT, generated TEXT is fine.

Transformer has serializer class ToHTMLStream and ToTextStream. 
In ToTextStream, surrogate pair character is converted #&xxxx; format, 
but ToHTMLStream does not convert to #&xxxx; format.

I think ToHTMLStream should implement like as ToTextStream.

To reproduce,

1. Compile and run attached SurrogateTest.java. Result file is stored in testdata directory.
2. Comfirm the value of the input tag on the case01out.html.
   Expected: <input id=""tag1"" value=""𠮟"">
   Actual: <input id=""tag1"" value=""𠮟&#55362;"">
3. ToTextStream result is fine (case02out.txt)",,,,,,,,,,,JDK-8276874,JDK-8276719,JDK-8310038,,,,,,,,,,,,,,,,,,,,,,,,JDK-8274606,,,,"2021-06-09 04:31;myano;SurrogateTest.zip;https://bugs.openjdk.org/secure/attachment/95089/SurrogateTest.zip",,,,,,,,,,,generic,,,,,,,,,generic,,,,,"0|i2t5fn:",9223372036854775807,b04,,,,,,,,,,Verified,,"2021-06-30 09:26;roboduke;Changeset: 83bce94c
Author:    Masanori Yano <myano@openjdk.org>
Committer: Joe Wang <joehw@openjdk.org>
Date:      2021-06-30 16:25:40 +0000
URL:       https://git.openjdk.java.net/jdk/commit/83bce94cc8a7fb45b0604598411fbecc62000dfd
;;;","2021-11-03 14:42;akasko;Fix request (17u)

Clean backport of an XSL fix.

Note, included test is broken, it was fixed with JDK-8274606, I intend to follow up with its backport.;;;","2022-04-25 10:58;sqetools;verified;;;","2023-05-29 02:51;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk11u-dev/pull/1907
Date: 2023-05-29 09:38:20 +0000;;;","2023-05-31 22:43;myano;Fix Request (11u)

This is a backport JDK-8268457 to JDK11u.
This is almost clean except lastmodified month comment.
Risk is low.
Additional test is passed.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
keytool -v -list print is incorrect after backport JDK-8141457,JDK-8268444,5051429,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,dongbohe,dongbohe,dongbohe,2021-06-09 02:44,2021-07-06 19:07,2023-10-01 09:57,2021-06-11 01:08,openjdk8u292,,,,,,,openjdk8u302,security-libs,,0,11-na,jdk8u-critical-request,jdk8u-critical-yes,,,,,,,,,,,"$ ./bin/keytool -v -list -storepass changeit  -keystore ./jre/lib/security/cacerts
8u282:
...
Owner: CN=Actalis Authentication Root CA, O=Actalis S.p.A./03358520967, L=Milan, C=IT
Issuer: CN=Actalis Authentication Root CA, O=Actalis S.p.A./03358520967, L=Milan, C=IT
Serial number: 570a119742c4e3cc
Valid from: Thu Sep 22 19:22:02 CST 2011 until: Sun Sep 22 19:22:02 CST 2030
Certificate fingerprints:
         MD5:  69:C1:0D:4F:07:A3:1B:C3:FE:56:3D:04:BC:11:F6:A6
         SHA1: F3:73:B3:87:06:5A:28:84:8A:F2:F3:4A:CE:19:2B:DD:C7:8E:9C:AC
         SHA256: 55:92:60:84:EC:96:3A:64:B9:6E:2A:BE:01:CE:0B:A8:6A:64:FB:FE:BC:C7:AA:B5:AF:C1:55:B3:7F:D7:60:66
Signature algorithm name: SHA256withRSA
Subject Public Key Algorithm: 4096-bit RSA key
Version: 3
...
8u292:
...
Owner: CN=Actalis Authentication Root CA, O=Actalis S.p.A./03358520967, L=Milan, C=IT
Issuer: CN=Actalis Authentication Root CA, O=Actalis S.p.A./03358520967, L=Milan, C=IT
Serial number: 570a119742c4e3cc
Valid from: Thu Sep 22 19:22:02 CST 2011 until: Sun Sep 22 19:22:02 CST 2030
Certificate fingerprints:
         SHA1: F3:73:B3:87:06:5A:28:84:8A:F2:F3:4A:CE:19:2B:DD:C7:8E:9C:AC
         SHA256: 55:92:60:84:EC:96:3A:64:B9:6E:2A:BE:01:CE:0B:A8:6A:64:FB:FE:BC:C7:AA:B5:AF:C1:55:B3:7F:D7:60:66
Signature algorithm name: SHA256withRSA
Subject Public Key Algorithm: 4096-bit RSA key (3)  // 3 should be the version
Version: {10}  // 10 is wrong
...",,,,,,,,,,,JDK-8269987,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8141457,JDK-8171319,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2t5cj:",9223372036854775807,b06,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@2ec284e3,,,,,,,,,"2021-06-10 01:27;sgehwolf;Adding a link to JDK-8141457.;;;","2021-06-10 02:13;sgehwolf;The backport of JDK-8141457 was wrong. It did include ({9,number,#}), but the 8u backport which included this via JDK-8171319 didn't have it:
http://hg.openjdk.java.net/jdk8u/jdk8u-dev/jdk/rev/08ea7faa939f#l4.54

This is an 8u-only bug. I don't see this issue in 11u and up.;;;","2021-06-10 02:37;dongbohe;Fix Request [8u]

Critical fix for jdk8u. 8u RFR: https://mail.openjdk.java.net/pipermail/jdk8u-dev/2021-June/013990.html;;;","2021-06-10 04:51;sgehwolf;[~andrew] FYI. I believe this should go as a 8u302 fix. Do you agree?;;;","2021-06-10 10:21;sgehwolf;[~dongbohe] Please push to jdk8u/jdk8u directly (not the jdk8u-dev forest). Thanks!;;;","2021-06-11 01:08;hgupdate;URL:   https://hg.openjdk.java.net/jdk8u/jdk8u/jdk/rev/80412c544023
User:  fyang
Date:  2021-06-11 08:03:34 +0000
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,
serviceability/dcmd/framework/VMVersionTest.java fails with Unable to send object throw not established PipeIO Listener Thread connection,JDK-8268433,5051413,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,amenkov,dholmes,dholmes,2021-06-08 22:39,2023-09-13 08:24,2023-10-01 09:57,2021-06-23 17:29,11,17,18,,,,,18,core-svc,,0,noreg-self,problemlist,testbug,tier1,tier3,tier6,tier7,,,,,,,"Seen after the fix for JDK-8237388.

test VMVersionTest.jmx(): success
test VMVersionTest.mainClass(): failure
nsk.share.Failure: Unable to send object throw not established PipeIO Listener Thread connection:
	quit
	at nsk.share.jpda.SocketConnection.writeObject(SocketConnection.java:532)
	at nsk.share.jpda.SocketIOPipe.println(SocketIOPipe.java:177)
	at TestProcessLauncher.quit(TestProcessLauncher.java:80)
	at VMVersionTest.mainClass(VMVersionTest.java:68)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:132)
	at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:599)
	at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:174)
	at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
	at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:822)
	at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:147)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
	at org.testng.TestRunner.privateRun(TestRunner.java:764)
	at org.testng.TestRunner.run(TestRunner.java:585)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:384)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:378)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:337)
	at org.testng.SuiteRunner.run(SuiteRunner.java:286)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1218)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1140)
	at org.testng.TestNG.runSuites(TestNG.java:1069)
	at org.testng.TestNG.run(TestNG.java:1037)
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:94)
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:54)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at com.sun.javatest.regtest.agent.MainWrapper$MainThread.run(MainWrapper.java:127)
	at java.base/java.lang.Thread.run(Thread.java:833)",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8268568,,,JDK-8237388,JDK-8269302,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2t58z:",9223372036854775807,b04,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@22f3cc74,,,,,,,,,"2021-06-09 18:32;dholmes;Same failure mode in:

serviceability/dcmd/framework/HelpTest.java;;;","2021-06-10 14:31;amenkov;I noted this problem in JDK-8237388 comments, but forgot to fix it:


Also there is an issue with TestProcessLauncher.quit() method.
General schema of the testcases is
  TestProcessLauncher t = ...;
  try {
      t.launch();
      .. perform testing ...
  } finally {
       t.quit();
  }
But if target VM failed to connect to IOPipe t.quit() throws new exception as it tests only that IOPipe object is not null, but does not verify it's connected ;;;","2021-06-10 14:35;amenkov;We have some problem with the tests, but exception from TestProcessLauncher.quit() masks it.
Need to fix it first to get more information about real error.;;;","2021-06-10 15:32;dholmes;Same failure mode in:

serviceability/dcmd/framework/InvalidCommandTest.java ;;;","2021-06-23 11:20;amenkov;macos failure is a bit different - it's ""address in use"" error:
nsk.share.Failure: Unable to bind for PipeIO Listener Thread connection to port 49169 for 120000ms timeout:
	java.net.BindException: Address already in use
	at nsk.share.jpda.BasicSocketConnection.bind(SocketConnection.java:126)
	at nsk.share.jpda.SocketIOPipe$ListenerThread.<init>(SocketIOPipe.java:215)
	at nsk.share.jpda.SocketIOPipe.startListening(SocketIOPipe.java:257)
	at nsk.share.jpda.IOPipe.startDebuggerPipe(IOPipe.java:94)
	at TestProcessLauncher.launch(TestProcessLauncher.java:64);;;","2021-06-23 17:29;roboduke;Changeset: 280f2d57
Author:    Alex Menkov <amenkov@openjdk.org>
Date:      2021-06-24 00:28:45 +0000
URL:       https://git.openjdk.java.net/jdk/commit/280f2d57d1f78b3d15dd98e726267a100eb0b5db
;;;","2021-06-24 07:28;dcubed;The fix for this bug is in jdk-18+3-73 and this latest sighting
is in the same build-ID.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,
Test java/foreign/TestResourceScope.java fails: expected [M] but found [N],JDK-8268428,5051407,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,mcimadamore,dholmes,dholmes,2021-06-08 21:00,2021-07-15 14:13,2023-10-01 09:57,2021-06-10 05:52,17,,,,,,,17,core-libs,,0,intermittent,tier1,,,,,,,,,,,,"test TestResourceScope.testLockSharedMultiThread(TestResourceScope$$Lambda$90/0x0000000800c35d08@19763a74): failure
java.lang.AssertionError: expected [0] but found [2350]
	at org.testng.Assert.fail(Assert.java:99)
	at org.testng.Assert.failNotEquals(Assert.java:1037)
	at org.testng.Assert.assertEqualsImpl(Assert.java:140)
	at org.testng.Assert.assertEquals(Assert.java:122)
	at org.testng.Assert.assertEquals(Assert.java:907)
	at org.testng.Assert.assertEquals(Assert.java:917)
	at TestResourceScope.testLockSharedMultiThread(TestResourceScope.java:213)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:132)
	at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:599)
	at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:174)
	at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
	at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:822)
	at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:147)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
	at org.testng.TestRunner.privateRun(TestRunner.java:764)
	at org.testng.TestRunner.run(TestRunner.java:585)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:384)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:378)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:337)
	at org.testng.SuiteRunner.run(SuiteRunner.java:286)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1218)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1140)
	at org.testng.TestNG.runSuites(TestNG.java:1069)
	at org.testng.TestNG.run(TestNG.java:1037)
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:94)
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:54)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at com.sun.javatest.regtest.agent.MainWrapper$MainThread.run(MainWrapper.java:127)",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8270798,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2t57n:",9223372036854775807,b26,,,,,,,,,,,,"2021-06-08 21:01;dholmes;Not sure where this should reside so assigning to [~mcimadamore] to ensure it is seen.;;;","2021-06-10 05:52;roboduke;Changeset: f4b31701
Author:    Maurizio Cimadamore <mcimadamore@openjdk.org>
Date:      2021-06-10 12:52:04 +0000
URL:       https://git.openjdk.java.net/jdk/commit/f4b3170197ca517b4816f863af053f019ce0f181
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
JFR tests fail due to GC cause 'G1 Preventive Collection' not in the valid causes after JDK-8257774,JDK-8268424,5051401,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,jiefu,jiefu,jiefu,2021-06-08 17:41,2022-07-22 04:36,2023-10-01 09:57,2021-06-08 19:23,17,,,,,,,17,hotspot,,0,gc-g1,gc-g1-preventive-gc,tencent-interest,tier5,,,,,,,,,,"STDERR:
java.lang.RuntimeException: GC cause 'G1 Preventive Collection' not in the valid causes[Allocation Failure, G1 Evacuation Pause, System.gc()]: expected true, was false
        at jdk.test.lib.Asserts.fail(Asserts.java:594)
        at jdk.test.lib.Asserts.assertTrue(Asserts.java:486)
        at jdk.jfr.event.gc.collection.GCGarbageCollectionUtil.test(GCGarbageCollectionUtil.java:98)
        at jdk.jfr.event.gc.collection.TestGCCauseWithG1ConcurrentMark.main(TestGCCauseWithG1ConcurrentMark.java:44)
        at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
        at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
        at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
        at java.base/java.lang.reflect.Method.invoke(Method.java:568)
        at com.sun.javatest.regtest.agent.MainActionHelper$AgentVMRunnable.run(MainActionHelper.java:312)
        at java.base/java.lang.Thread.run(Thread.java:833)


STDERR:
java.lang.RuntimeException: GC cause 'G1 Preventive Collection' not in the valid causes[Allocation Failure, G1 Evacuation Pause, System.gc()]: expected true, was false
        at jdk.test.lib.Asserts.fail(Asserts.java:594)
        at jdk.test.lib.Asserts.assertTrue(Asserts.java:486)
        at jdk.jfr.event.gc.collection.GCGarbageCollectionUtil.test(GCGarbageCollectionUtil.java:98)
        at jdk.jfr.event.gc.collection.TestGCCauseWithG1FullCollection.main(TestGCCauseWithG1FullCollection.java:44)
        at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
        at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
        at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
        at java.base/java.lang.reflect.Method.invoke(Method.java:568)
        at com.sun.javatest.regtest.agent.MainActionHelper$AgentVMRunnable.run(MainActionHelper.java:312)
        at java.base/java.lang.Thread.run(Thread.java:833)",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8257774,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2t56b:",9223372036854775807,b26,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@42995637,,,,,,,,,"2021-06-08 19:23;roboduke;Changeset: 2cc1977a
Author:    Jie Fu <jiefu@openjdk.org>
Date:      2021-06-09 02:22:35 +0000
URL:       https://git.openjdk.java.net/jdk/commit/2cc1977a9698af9538101a5842c311659521a0aa
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
[lworld] VM assert illegal mirror klass when calling Class::getInterfaces on a flat array,JDK-8268418,5051391,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,mchung,mchung,mchung,2021-06-08 14:40,2021-06-09 10:44,2023-10-01 09:57,2021-06-09 10:44,repo-valhalla,,,,,,,repo-valhalla,hotspot,,0,lworld,,,,,,,,,,,,,"diff --git a/src/hotspot/share/prims/jvm.cpp b/src/hotspot/share/prims/jvm.cpp
index 00bee2cb9b8..fc627894b01 100644
--- a/src/hotspot/share/prims/jvm.cpp
+++ b/src/hotspot/share/prims/jvm.cpp
@@ -1170,7 +1170,7 @@ JVM_ENTRY(jobjectArray, JVM_GetClassInterfaces(JNIEnv *env, jclass cls))
     InstanceKlass* ik = InstanceKlass::cast(klass);
     size = ik->local_interfaces()->length();
   } else {
-    assert(klass->is_objArray_klass() || klass->is_typeArray_klass(), ""Illegal mirror klass"");
+    assert(klass->is_objArray_klass() || klass->is_typeArray_klass() || klass->is_flatArray_klass(), ""Illegal mirror klass"");
     size = 3;
   }

Add a new test for `Class::getInterfaces`",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8267948,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2t543:",9223372036854775807,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Clarify invalid method and field ID in JNI specification,JDK-8268416,5051388,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,dholmes,jiangli,jiangli,2021-06-08 14:03,2021-10-25 17:14,2023-10-01 09:57,2021-10-18 14:38,18,,,,,,,18,hotspot,,0,google-interest,noreg-doc,,,,,,,,,,,,"In Java Native Interface Specification (https://docs.oracle.com/en/java/javase/16/docs/specs/jni/design.html), it has:

""Accessing Fields and Methods""

A field or method ID does not prevent the VM from unloading the class from which the ID has been derived. After the class is unloaded, the method or field ID becomes invalid. The native code, therefore, must make sure to:

keep a live reference to the underlying class, or
recompute the method or field ID
if it intends to use a method or field ID for an extended period of time.

The JNI does not impose any restrictions on how field and method IDs are implemented internally.

""Reporting Programming Errors""

The programmer must not pass illegal pointers or arguments of the wrong type to JNI functions. Doing so could result in arbitrary consequences, including a corrupted system state or VM crash.

Clarifying the text in ""Accessing Fields and Methods"" section with stronger language to disallow the usages of invalid method and field ID after class unloading would reflect ""Reporting Programming Errors"" section more clearly.

JDK-8268088 describes an issue associated with the use of stale method ID in JVMTI agent. Tightening up the specification helps discourage the use of stale method ID. It will enable the fix for the memory leak issue described in JDK-8268088 in the future.

Please see more discussion in https://github.com/openjdk/jdk/pull/4383 comments.",,,,,,,,,,,,,,,,,,,,,,,,JDK-8275087,,,,,,,,,,,,,JDK-8268088,JDK-8268406,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2t53f:",9223372036854775807,b20,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,,,"2021-08-11 16:25;dholmes;Moved to hotspot->runtime as we maintain the JNI specification;;;","2021-09-16 22:42;dholmes;[~jiangli] is this the kind of clarification you were looking for:

""A field or method ID does not prevent the VM from unloading the class from which the ID has been derived. After the class is unloaded, the method or field ID becomes invalid +and may not be passed to any function taking such an ID.+""

?;;;","2021-10-11 18:02;dholmes;[~jiangli] Please respond. :);;;","2021-10-11 18:12;jiangli;Hi David, thanks for the ping! Your earlier comment from 9/16/2021 missed my radar. The clarification looks good to me. Thanks!;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Several regressions 4-17% after CHA changes,JDK-8268405,5051376,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,vlivanov,ecaspole,ecaspole,2021-06-08 13:33,2022-08-03 22:44,2023-10-01 09:57,2021-06-18 00:51,17,,,,,,,17,hotspot,,0,hs-comp-triaged,oracle-triage-11,oracle-triage-17,perf-regression,,,,,,,,,,"Observed with some Dacapo and Renaissance benchmarks.
Probably related  to JDK-8065760 etc.",,,,,,,,,,,JDK-8269044,JDK-8270583,,,,,,,,,,,,,,,,,,,,,JDK-8275830,JDK-8291832,,,JDK-8267807,JDK-8269063,,,,,,,,,,,,,,,,,,,,b25,,,,,,,,"0|i2t50r:",9223372036854775807,b28,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2021-06-09 19:24;dlong;ILW = performance regression, two benchmarks, no workaround = MMH = P3;;;","2021-06-18 00:51;roboduke;Changeset: 7ed3634d
Author:    Vladimir Ivanov <vlivanov@openjdk.org>
Date:      2021-06-18 07:50:22 +0000
URL:       https://git.openjdk.java.net/jdk17/commit/7ed3634da81b53135c89aa82a1a5d2f4de2c6c5e
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
"[TESTBUG] tools/jpackage/windows/WinInstallerIconTest.java failed ""AssertionError: Failed: Check icon""",JDK-8268404,5051375,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,herrick,dcubed,dcubed,2021-06-08 13:25,2022-02-02 12:51,2023-10-01 09:57,2021-06-22 12:09,17,,,,,,,17,tools,,0,intermittent,noreg-self,sn_95,sn_96,testbug,tier2,,,,,,,,"The following test failed in the JDK17 CI:

tools/jpackage/windows/WinInstallerIconTest.java

Here's a snippet from the log file:

[19:49:18.611] TRACE: assertEquals(0): Check command [c:\\ade\\mesos\\work_dir\\jib-master\\install\\jdk-17+26-2370\\windows-x64.jdk\\jdk-17\\bin\\jpackage.exe --input .\\test\\input --dest .\\test\\output --name WinInstallerIconTest2 --type exe --main-jar hello.jar --main-class Hello --win-console --icon C:\\ade\\mesos\\work_dir\\jib-master\\install\\jdk-17+26-2370\\src.full\\open\\test\\jdk\\tools\\jpackage\\resources\\icon.ico --runtime-image .\\test\\fake_runtime --verbose](19) exited with 0 code
[19:49:18.611] TRACE: assertTrue(): Check [.\\test\\output\\WinInstallerIconTest2-1.0.exe] path exists
[19:49:18.611] TRACE: assertTrue(): Check [.\\test\\output\\WinInstallerIconTest2-1.0.exe] is a file
[19:49:18.642] TRACE: assertNotEquals(0, 16): Check icon has not empty width
[19:49:18.642] TRACE: assertNotEquals(0, 16): Check icon has not empty height
[19:49:18.658] ERROR: Failed: Check icon of .\\test\\output\\WinInstallerIconTest2-1.0.exe installer is NOT matching unexpected value
[19:49:18.658] [  FAILED  ] WinInstallerIconTest.test; checks=17
[19:49:18.658] [==========] 1 tests ran
[19:49:18.658] [  PASSED  ] 0 tests
[19:49:18.658] [  FAILED  ] 1 test, listed below
[19:49:18.658] [  FAILED  ] WinInstallerIconTest.test; workDir=[.\\test]
[19:49:18.658] 1 FAILED TEST
----------System.err:(67/4795)*----------
java.lang.AssertionError: Failed: Check icon of .\\test\\output\\WinInstallerIconTest2-1.0.exe installer is NOT matching unexpected value
	at jdk.jpackage.test.TKit.error(TKit.java:279)
	at jdk.jpackage.test.TKit.assertFalse(TKit.java:671)
	at jdk.jpackage.test.TKit.assertFalse(TKit.java:650)
	at WinInstallerIconTest.lambda$createInstaller$4(WinInstallerIconTest.java:133)
	at jdk.jpackage.test.Functional$ThrowingConsumer.lambda$toConsumer$0(Functional.java:41)
	at jdk.jpackage.test.PackageTest.lambda$addBundleVerifier$6(PackageTest.java:160)
	at jdk.jpackage.test.Functional$ThrowingBiConsumer.lambda$toBiConsumer$0(Functional.java:56)
	at jdk.jpackage.test.PackageTest$Handler.lambda$verifyPackageBundle$1(PackageTest.java:548)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
	at jdk.jpackage.test.PackageTest$Handler.verifyPackageBundle(PackageTest.java:548)
	at jdk.jpackage.test.PackageTest$Handler.accept(PackageTest.java:524)
	at jdk.jpackage.test.PackageTest$2.accept(PackageTest.java:447)
	at jdk.jpackage.test.PackageTest$2.accept(PackageTest.java:396)
	at jdk.jpackage.test.Functional$ThrowingConsumer.lambda$toConsumer$0(Functional.java:41)
	at java.base/java.lang.Iterable.forEach(Iterable.java:75)
	at jdk.jpackage.test.PackageTest.lambda$runActions$20(PackageTest.java:360)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
	at jdk.jpackage.test.PackageTest.lambda$runActions$21(PackageTest.java:359)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
	at jdk.jpackage.test.PackageTest.runActions(PackageTest.java:358)
	at jdk.jpackage.test.RunnablePackageTest.run(RunnablePackageTest.java:51)
	at WinInstallerIconTest.createInstaller(WinInstallerIconTest.java:140)
	at WinInstallerIconTest.test(WinInstallerIconTest.java:79)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at jdk.jpackage.test.MethodCall.accept(MethodCall.java:145)
	at jdk.jpackage.test.TestInstance.run(TestInstance.java:230)
	at jdk.jpackage.test.TKit.lambda$ignoreExceptions$5(TKit.java:141)
	at jdk.jpackage.test.TKit.lambda$runTests$3(TKit.java:126)
	at java.base/java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1625)
	at java.base/java.util.stream.ReferencePipeline$Head.forEach(ReferencePipeline.java:762)
	at jdk.jpackage.test.TKit.lambda$runTests$4(TKit.java:123)
	at jdk.jpackage.test.Functional$ThrowingRunnable.lambda$toRunnable$0(Functional.java:105)
	at jdk.jpackage.test.TKit.withExtraLogStream(TKit.java:109)
	at jdk.jpackage.test.TKit.runTests(TKit.java:122)
	at jdk.jpackage.test.Main.runTests(Main.java:79)
	at jdk.jpackage.test.Main.lambda$main$2(Main.java:75)
	at jdk.jpackage.test.Functional$ThrowingRunnable.lambda$toRunnable$0(Functional.java:105)
	at jdk.jpackage.test.TKit.withExtraLogStream(TKit.java:109)
	at jdk.jpackage.test.Main.main(Main.java:75)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at com.sun.javatest.regtest.agent.MainWrapper$MainThread.run(MainWrapper.java:127)
	at java.base/java.lang.Thread.run(Thread.java:833)
java.lang.RuntimeException: 1 FAILED TEST
	at jdk.jpackage.test.Main.reportSummary(Main.java:130)
	at jdk.jpackage.test.Main.runTests(Main.java:90)
	at jdk.jpackage.test.Main.lambda$main$2(Main.java:75)
	at jdk.jpackage.test.Functional$ThrowingRunnable.lambda$toRunnable$0(Functional.java:105)
	at jdk.jpackage.test.TKit.withExtraLogStream(TKit.java:109)
	at jdk.jpackage.test.Main.main(Main.java:75)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at com.sun.javatest.regtest.agent.MainWrapper$MainThread.run(MainWrapper.java:127)
	at java.base/java.lang.Thread.run(Thread.java:833)

JavaTest Message: Test threw exception: java.lang.RuntimeException: 1 FAILED TEST
JavaTest Message: shutting down test

STATUS:Failed.`main' threw exception: java.lang.RuntimeException: 1 FAILED TEST
----------rerun:(44/5531)*----------",,,,,,,,,,,JDK-8270622,JDK-8269201,,,,,,,,,,,,,,,,,,,,,JDK-8281170,,,,JDK-8266129,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2t50j:",9223372036854775807,b28,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@3656b41f,,,,,,,,,"2021-06-09 08:29;herrick;This test always passes for me locally, 
trace shows that we create an installer with the default icon, then another with a custom icon, and try to verify that the installer's icons are different.
we use ""Icon icon = FileSystemView.getFileSystemView().getSystemIcon(<installer-exe-file>);
Is it possible this call is dependent on being headfull ?, or it's behavior is not consistent across windows versions ?
;;;","2021-06-17 11:11;asemenyuk;The test fails comparing icon of an installer with custom icon with the default installer icon. They turn out to be the same, however the test expects them to be different. My guess why they are the same is that FileSystemView.getFileSystemView().getSystemIcon() call that returns icon associated with the given executable doesn't read icon from the executable, but reads it from the system. I.e. it reads generic icon associated with all executables. I can't think of better explanation of a problem. Maybe replacing FileSystemView.getFileSystemView().getSystemIcon() call with more accurate way to read icon from an executable would work better.;;;","2021-06-17 11:35;asemenyuk;Checked icon of an installer in jdk-17+27-2475-tier2 test run failure, it is as expected. So this is not a product bug.;;;","2021-06-18 13:14;herrick;Extracting the icon using FileSystemView().getSystemIcon() appears to be unreliable when calling it for several exe files in a row.
The test just needs to confirm that setting Icon (--icon option) results in a different executable, in particular, when the default icon is used the executable is considerably smaller than when the custom icon is used, and when the same custom icon is used a second time, the executables are the same size.
;;;","2021-06-21 07:12;herrick;The custom icon in the test is only about 2K, where the default icon (either from open or closed jpackage source) is over 25K, and despite slight variance in the size of the installers built (when using the same arguments) , the installers built with this custom icon are consistently smaller than those built with the default icon.;;;","2021-06-21 07:52;asemenyuk;I agree size-based verification would be a good alternative.;;;","2021-06-22 12:09;roboduke;Changeset: 35e4c272
Author:    Andy Herrick <herrick@openjdk.org>
Date:      2021-06-22 19:08:58 +0000
URL:       https://git.openjdk.java.net/jdk17/commit/35e4c2720df64ea6cb68ba8fb62aeeb0562c2907
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,
15% increase in JFR footprint in Noop-Base,JDK-8268398,5051365,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,egahlin,ecaspole,ecaspole,2021-06-08 10:04,2023-05-19 01:06,2023-10-01 09:57,2022-06-17 12:41,17,,,,,,,19,hotspot,,0,amazon-interest,perf-regression,,,,,,,,,,,,Seems related to JDK-8203359.,,,,,,,,,,,JDK-8288772,JDK-8291094,JDK-8291263,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,b24,17,,,,,,,"0|i2t4yb:",9223372036854775807,b28,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@42995637,,,,,,,,,"2021-06-11 01:44;jbachorik;Where can I find the Noop-Base so I can examine this regression?;;;","2021-06-23 09:29;ecaspole;I ran these with NMT, here are the details. About 95 more classes got loaded, and 2 more threads got created? Since this is a new feature, it is reasonable that there are more classes. We are not running in a container environment though, do they all need to be loaded? What do you think?

2099:

[0.256s][info][jfr,startup ] Use jcmd 854942 JFR.dump name=1 to copy recording data to file.
[4.217s][info][gc,heap,exit] Heap
[4.217s][info][gc,heap,exit]  garbage-first heap   total 2097152K, used 34736K [0x0000000082000000, 0x0000000800000000)
[4.217s][info][gc,heap,exit]   region size 16384K, 3 young (49152K), 0 survivors (0K)
[4.217s][info][gc,heap,exit]  Metaspace       used 9989K, committed 10176K, reserved 1064960K
[4.217s][info][gc,heap,exit]   class space    used 889K, committed 960K, reserved 1048576K

Native Memory Tracking:

Total: reserved=35044504753, committed=2556220593
-                 Java Heap (reserved=32178700288, committed=2147483648)
                            (mmap: reserved=32178700288, committed=2147483648)

-                     Class (reserved=159507, committed=159507)
                            (classes #1503)
                            (  instance classes #1330, array classes #173)
                            (malloc=159507 #2355)
                            (  Metadata:   )
                            (    reserved=16777216, committed=9437184)
                            (    used=9318368)
                            (    waste=118816 =1.26%)
                            (  Class space:)
                            (    reserved=1073741824, committed=983040)
                            (    used=910456)
                            (    waste=72584 =7.38%)

-                    Thread (reserved=18990568, committed=1107432)
                            (thread #18)
                            (stack: reserved=18931712, committed=1048576)
                            (malloc=35408 #135)
                            (arena=23448 #41)

-                      Code (reserved=253913680, committed=9267792)
                            (malloc=281168 #2280)
                            (mmap: reserved=253632512, committed=8986624)

-                        GC (reserved=1442815882, committed=328376202)
                            (malloc=209710986 #1396)
                            (mmap: reserved=1233104896, committed=118665216)

-                  Compiler (reserved=1315148, committed=1315148)
                            (malloc=27892 #137)
                            (arena=1287256 #11)

-                     JVMCI (reserved=104, committed=104)
                            (malloc=104 #7)

-                  Internal (reserved=429153, committed=429153)
                            (malloc=392289 #2851)
                            (mmap: reserved=36864, committed=36864)

-                     Other (reserved=34816, committed=34816)
                            (malloc=34816 #2)

-                    Symbol (reserved=2722248, committed=2722248)
                            (malloc=1469952 #38054)
                            (arena=1252296 #1)



2100:

[0.288s][info][jfr,startup ] Use jcmd 856771 JFR.dump name=1 to copy recording data to file.
[4.218s][info][gc,heap,exit] Heap
[4.218s][info][gc,heap,exit]  garbage-first heap   total 2097152K, used 34736K [0x0000000082000000, 0x0000000800000000)
[4.218s][info][gc,heap,exit]   region size 16384K, 3 young (49152K), 0 survivors (0K)
[4.218s][info][gc,heap,exit]  Metaspace       used 10454K, committed 10624K, reserved 1064960K
[4.218s][info][gc,heap,exit]   class space    used 946K, committed 1024K, reserved 1048576K

Native Memory Tracking:

Total: reserved=35064468283, committed=2574349115
-                 Java Heap (reserved=32178700288, committed=2147483648)
                            (mmap: reserved=32178700288, committed=2147483648)

-                     Class (reserved=166571, committed=166571)
                            (classes #1598)
                            (  instance classes #1420, array classes #178)
                            (malloc=166571 #2537)
                            (  Metadata:   )
                            (    reserved=16777216, committed=9830400)
                            (    used=9735936)
                            (    waste=94464 =0.96%)
                            (  Class space:)
                            (    reserved=1073741824, committed=1048576)
                            (    used=969192)
                            (    waste=79384 =7.57%)

-                    Thread (reserved=21100088, committed=1189432)
                            (thread #20)
                            (stack: reserved=21037056, committed=1126400)
                            (malloc=39152 #147)
                            (arena=23880 #43)

-                      Code (reserved=253945480, committed=9033352)
                            (malloc=312968 #2405)
                            (mmap: reserved=253632512, committed=8720384)

-                        GC (reserved=1442821786, committed=328382106)
                            (malloc=209716890 #1468)
                            (mmap: reserved=1233104896, committed=118665216)

-                  Compiler (reserved=198484, committed=198484)
                            (malloc=26972 #138)
                            (arena=171512 #8)

-                     JVMCI (reserved=104, committed=104)
                            (malloc=104 #7)

-                  Internal (reserved=439546, committed=439546)
                            (malloc=402682 #2927)
                            (mmap: reserved=36864, committed=36864)

-                     Other (reserved=34816, committed=34816)
                            (malloc=34816 #2)

-                    Symbol (reserved=2817520, committed=2817520)
                            (malloc=1499768 #39577)
                            (arena=1317752 #1)
;;;","2021-07-14 04:19;egahlin;This is most likely due to increased number of Java events, but I would not expect that many more loaded classes, at most 15.

I would prefer if container events were written in native, similar to other OS related events that parses proc, it would reduce both footprint and startup, but it's probably too late for JDK 17. 

That said, it should not create additional threads. 

Eric could you share your last comment, so Jaroslav can see. ;;;","2021-07-14 09:11;egahlin;This is the code I can find in the Metrics class:

 public static Metrics getInstance() {
      if (!isUseContainerSupport()) {
          // Return null on -XX:-UseContainerSupport
          return null;
       }
      return CgroupSubsystemFactory.create();
}

Could you try -XX:-UseContainerSupport and see if it improves the situation?

If that is the case, the overhead is probably due to classes being loaded when initialising container support, even though it's not being used. Perhaps some low overhead check could be added, i.e. JVM.inContainer() and if false, skip the Metrics thing all together.;;;","2021-07-20 12:22;egahlin;Great finding. We should be able to reduce most of the overhead, when running in a non-container, with a simple check.;;;","2022-06-16 15:20;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk19/pull/31
Date: 2022-06-16 21:41:44 +0000;;;","2022-06-17 12:41;dukebot;Changeset: 97544be5
Author:    Erik Gahlin <egahlin@openjdk.org>
Date:      2022-06-17 19:40:08 +0000
URL:       https://git.openjdk.org/jdk19/commit/97544be5b68860bad0431ec88737ad7cdc284862
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,
G1 concurrent gc upgrade to full gc not working,JDK-8268390,5051354,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,sjohanss,tschatzl,tschatzl,2021-06-08 06:43,2021-06-10 18:02,2023-10-01 09:57,2021-06-10 03:22,14,15,16,17,,,,17,hotspot,,0,gc-g1,,,,,,,,,,,,,"During the review of JDK-8268163 we noticed that the upgrade to full gc in VM_G1TryInitiateConcMark::doit() is never true, and so the upgrade will never happen:

The code is something like this:

  } else if (g1h->should_upgrade_to_full_gc(_gc_cause)) {
    _gc_succeeded = g1h->upgrade_to_full_collection();
  } else {
    _gc_succeeded = true;
  }

with G1CollectedHeap::upgrade_to_full_gc() doing this:

  if (should_do_concurrent_full_gc(_gc_cause)) {
    return false;
  } else if (has_regions_left_for_allocation()) {

but VM_G1TryInitiateConcMark is only ever executed with should_do_concurrent_full_gc() == true, so the result of upgrade_to_full_gc is always false.

This bug has been introduced with some refactoring of G1 VM operations in JDK-8232588.

However, there is something odd about the whole feature added in JDK-8195158 which is written as if the intention had been to *not* do this (https://bugs.openjdk.java.net/browse/JDK-8195158?focusedCommentId=14147598&page=com.atlassian.jira.plugin.system.issuetabpanels:comment-tabpanel#comment-14147598) states:

"" The fix (which is being worked on) is to not upgrade user initiated GCs that are supposed to be concurrent. ""

and the code *adds* this functionality too.

So either this is a bug because JDK-8232588 disabled this functionality, or this is a bug because since the upgrade is impossible, there is superfluous code.

I think we should upgrade for user-initiated system.gc() on the expectation that at least some memory should be freed; in that case removing the first check in should_upgrade_to_full_gc() should be good (in both usages).",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8268163,,,,JDK-8232588,JDK-8195158,,,,,,,,,,,,,,,,,,,,,14,,,,,,,"0|i2t4vv:",9223372036854775807,b26,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6b00f96c,,,,,,,,,"2021-06-10 03:22;roboduke;Changeset: f770f771
Author:    Stefan Johansson <sjohanss@openjdk.org>
Date:      2021-06-10 10:21:13 +0000
URL:       https://git.openjdk.java.net/jdk/commit/f770f771f86db7d4878b71137cd5a72c7c40cb2e
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
[lworld] Tests must be update after core reflection changes for the L/Q model,JDK-8268389,5051351,Bug,Closed,JDK,JDK,software,duke,,,P4,Fixed,fparain,fparain,fparain,2021-06-08 06:11,2021-07-06 06:23,2023-10-01 09:57,2021-06-08 08:28,repo-valhalla,,,,,,,repo-valhalla,hotspot,,0,lw3,lworld,,,,,,,,,,,,Some Valhalla tests are failing because they have not been updated to after the transition to the L/Q model and the related changes in the core reflection (JDK-8267948).,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2t4v7:",9223372036854775807,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,Fix failed,,"2021-06-08 11:47;fparain;Fix contains invalid changes x.ref.class -> x.class;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Windows 32bit build fails after JDK-8268174,JDK-8268377,5051333,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,mbaesken,mbaesken,mbaesken,2021-06-08 04:01,2021-06-10 18:00,2023-10-01 09:57,2021-06-09 07:10,17,,,,,,,17,hotspot,,0,oraclejdk-na,,,,,,,,,,,,,"the Windows 32bit build fails after  JDK-8268174, error is:
src\hotspot\os\windows\os_windows.cpp(2381): error C2039: 'addr_fpu_cntrl_wrd_std': is not a member of 'StubRoutines'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8268174,,,,,,,,,,,,,,,x86,,,,,,,,,windows,,,,,"0|i2t4r7:",9223372036854775807,b26,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,,,"2021-06-09 07:10;roboduke;Changeset: 43e38a18
Author:    Matthias Baesken <mbaesken@openjdk.org>
Date:      2021-06-09 14:09:41 +0000
URL:       https://git.openjdk.java.net/jdk/commit/43e38a18b83a69242d1991f435d23d8799f06fe6
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
C2: assert(_gvn.type(obj)->higher_equal(tjp)) failed: cast_up is no longer needed,JDK-8268371,5051326,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,vlivanov,roland,roland,2021-06-08 00:46,2021-07-15 10:06,2023-10-01 09:57,2021-06-17 14:26,17,18,,,,,,17,hotspot,,0,c2,hs-comp-triaged,oracle-triage-11,oracle-triage-17,,,,,,,,,,"I'm seeing this:

#  Internal Error (/home/roland/jdk-jdk/src/hotspot/share/opto/parse3.cpp:86), pid=1161731, tid=1161744
#  assert(_gvn.type(obj)->higher_equal(tjp)) failed: cast_up is no longer needed

when running ctw on https://repo1.maven.org/maven2/org/apache/click/click-nodeps/2.3.0/click-nodeps-2.3.0.jar

JAVA_OPTIONS=""-XX:-TieredCompilation -XX:CICompilerCount=4 -Djava.security.manager=disallow"" JAVA_HOME=~/jdk-jdk/build/linux-x86_64-server-fastdebug/images/jdk/ ./ctw.sh /home/roland/tmp/click-nodeps-2.3.0.jar

Error disappears if 8267807 is reverted",,,,,,,,,,,JDK-8268999,JDK-8270580,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8267807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2t4pn:",9223372036854775807,b28,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2021-06-08 03:49;chagedorn;ILW = C2 assertion failure during parsing, with CTW test only, try disable compilation of affected method or try without -XX:-TieredCompilation = HLM = P3;;;","2021-06-17 14:26;roboduke;Changeset: 9130b8a9
Author:    Vladimir Ivanov <vlivanov@openjdk.org>
Date:      2021-06-17 21:25:46 +0000
URL:       https://git.openjdk.java.net/jdk17/commit/9130b8a9d7ebd943108f01d41ed777e080f34c4d
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
"Fix ""Oracle VM"" references in JPDA documentation, and other misc improvements",JDK-8268370,5051325,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,cjplummer,cjplummer,cjplummer,2021-06-08 00:34,2022-09-14 15:20,2023-10-01 09:42,2021-12-21 15:00,17,,,,,,,19,core-svc,,0,noreg-doc,,,,,,,,,,,,,"There are a number of references to ""Oracle VM"" in the conninv.html document:

https://docs.oracle.com/en/java/javase/16/docs/specs/jpda/conninv.html

These should be replaced with just ""VM"". In places where ""Oracle VM"" is being used to distinguish from possibly different VM implementations, the docs can be simplified by not calling out possible differences. For example:

""This connector can be used by a debugger application to launch an Oracle VM or any other VM which supports the same invocation options with respect to debugging.""

can be simplified to:

""This connector can be used by a debugger application to launch a VM.""
 
And the following:

""For an Oracle VM, the necessary options are described in Oracle VM Invocation Options.""

can be simplified to:

""The necessary options are described in VM Invocation Options.""
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8263323,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2t4pf:",9223372036854775807,b04,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@3397f701,,,,,,,,,"2021-06-08 00:34;cjplummer;Suggested improvements include:
-Change ""Oracle VM"" to just ""VM""
-minor style and grammar improvements
-remove Applet references
-add macOS reference wherever Linux is referenced;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
SIGSEGV in PhaseCFG::implicit_null_check due to missing null check,JDK-8268369,5051324,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,thartmann,vaibhav,vaibhav,2021-06-07 23:14,2021-07-15 10:30,2023-10-01 09:57,2021-07-05 22:45,11.0.13-oracle,17,,,,,,17,hotspot,,0,11u-tier1,c2,hs-comp-triaged,intermittent,jdk11u-fix-request,jdk11u-fix-yes,noreg-hard,oracle-triage-11,oracle-triage-17,regression,,,,"Test case : tools/jdeprscan/tests/jdk/jdeprscan/TestRelease.java
OS : Crash seen on Windows-x64
Regression : YES. 

Crash Log :

----------stdout:(21/1180)*----------
#
# A fatal error has been detected by the Java Runtime Environment:
#
#  EXCEPTION_ACCESS_VIOLATION (0xc0000005) at pc=0x00007ffec6ef82e3, pid=55892, tid=71512
#
# JRE version: Java(TM) SE Runtime Environment 18.9 (11.0.13+1) (build 11.0.13-ea+1-LTS-74)
# Java VM: Java HotSpot(TM) 64-Bit Server VM 18.9 (11.0.13-ea+1-LTS-74, mixed mode, tiered, compressed oops, g1 gc, windows-amd64)
# Problematic frame:
# V  [jvm.dll+0x4f82e3]  PhaseCFG::implicit_null_check+0x7f3
#
# Core dump will be written. Default location: T:\\testoutput\\test-support\\jtreg_open_test_langtools_tools_jdeprscan_tests_jdk_jdeprscan_TestRelease_java\\scratch\\0\\hs_err_pid55892.mdmp
#
# An error report file with more information is saved as:
# T:\\testoutput\\test-support\\jtreg_open_test_langtools_tools_jdeprscan_tests_jdk_jdeprscan_TestRelease_java\\scratch\\0\\hs_err_pid55892.log
#
# Compiler replay data is saved as:
# T:\\testoutput\\test-support\\jtreg_open_test_langtools_tools_jdeprscan_tests_jdk_jdeprscan_TestRelease_java\\scratch\\0\\replay_pid55892.log
#
# If you would like to submit a bug report, please visit:
#   https://bugreport.java.com/bugreport/crash.jsp",,,,,,,,,,,JDK-8270710,JDK-8269969,JDK-8270095,JDK-8270002,,,,,,,,,,,,,,,,,,,,,,,JDK-8266480,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2t4p7:",9223372036854775807,b30,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2021-06-07 23:17;vaibhav;Suspecting (JDK-8266480) https://orahub.oci.oraclecorp.com/jpg-sec/jdk11u-cpu-open/commit/8fdd1ce5dd9447572bf05b6fe806a757505348d7  - this changeset is the reason for the crash.

;;;","2021-06-09 20:03;dlong;ILW = intermittent crash, regression, one test, no workaround = MMH = P3;;;","2021-07-05 22:45;roboduke;Changeset: 4ad8b044
Author:    Tobias Hartmann <thartmann@openjdk.org>
Date:      2021-07-06 05:44:59 +0000
URL:       https://git.openjdk.java.net/jdk17/commit/4ad8b04421f3142c396ade26f36334da7a915b5b
;;;","2021-07-07 09:55;mdoerr;Fix Request (11u):
Should get backported for parity with 11.0.13-oracle. Fix is trivial and applies cleanly.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Incorrect calculation of has_fpu_registers in C1 linear scan,JDK-8268366,5051318,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,dlong,dlong,dlong,2021-06-07 21:50,2023-09-26 07:14,2023-10-01 09:57,2021-06-14 12:27,11-pool,16,17,7-pool,8-pool,,,17,hotspot,,0,c1,hs-comp-triaged,jdk11u-fix-request,jdk11u-fix-yes,oracle-triage-17,tencent-interest,,,,,,,,"If there is a mismatch between bytecode use of floating point and generated IR, has_fpu_registers can get an incorrect value and result in a crash or assert.",,,,,,,,,,,JDK-8268835,JDK-8269582,JDK-8269742,JDK-8269600,,,,,,,,,,,,,,,,JDK-8316949,,,,,,,JDK-8040921,,,,,,,,,,,,,,,generic,,,,,,,,,generic,,,,,"0|i2t4nv:",9223372036854775807,b27,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2021-06-08 00:38;chagedorn;ILW = Possible crash/assertion failure in C1 or undefined behavior of C1 compiled code (potential crash, incorrect result, ...), never observed, disabled TieredCompilation/C1 = HLM = P3 ;;;","2021-06-08 00:39;chagedorn;Targetting to JDK 18 for now. Please retarget if you plan to fix it in 17.;;;","2021-06-08 00:41;chagedorn;[~dlong] Have you observed such a crash, yet?;;;","2021-06-08 01:53;dlong;It has not been observed in JDK code, but we do have a reproducer.;;;","2021-06-14 12:27;roboduke;Changeset: 702e3ff0
Author:    Dean Long <dlong@openjdk.org>
Date:      2021-06-14 19:25:49 +0000
URL:       https://git.openjdk.java.net/jdk17/commit/702e3ff05472e35140b38fd5a4d1266f4efdd7bb
;;;","2021-06-30 08:46;mdoerr;Fix Request (11u):
Should get backported for parity with 11.0.13-oracle. Applies cleanly.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,
jmethod clearing should be done during unloading,JDK-8268364,5051315,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,coleenp,iklam,iklam,2021-06-07 21:21,2021-07-07 17:21,2023-10-01 09:57,2021-07-02 11:06,,,,,,,,18,hotspot,,0,google-interest,noreg-hard,zgc,,,,,,,,,,,"jmethodIDs are basically handles of Method*.

In generated JVMTI functions such as jvmti_GetMethodDeclaringClass, we will first check if a jmethodID is valid (i.e., if it contains a non-NULL Method*). If so, we will dereference the Method*:

===================================
jvmti_GetMethodDeclaringClass(jvmtiEnv* env,
            jmethodID method,
            jclass* declaring_class_ptr) {
  if(JvmtiEnv::get_phase(env)!=JVMTI_PHASE_START && JvmtiEnv::get_phase()!=JVMTI_PHASE_LIVE) {
    return JVMTI_ERROR_WRONG_PHASE;
  }
  Thread* this_thread = Thread::current_or_null(); 
  if (this_thread == NULL || !this_thread->is_Java_thread()) {
    return JVMTI_ERROR_UNATTACHED_THREAD;
  }
  JavaThread* current_thread = this_thread->as_Java_thread();
  MACOS_AARCH64_ONLY(ThreadWXEnable __wx(WXWrite, current_thread));
  ThreadInVMfromNative __tiv(current_thread);
  VM_ENTRY_BASE(jvmtiError, jvmti_GetMethodDeclaringClass , current_thread)
  debug_only(VMNativeEntryWrapper __vew;)
  PreserveExceptionMark __em(this_thread);
  JvmtiEnv* jvmti_env = JvmtiEnv::JvmtiEnv_from_jvmti_env(env);
  if (!jvmti_env->is_valid()) {
    return JVMTI_ERROR_INVALID_ENVIRONMENT;
  }
  jvmtiError err;
  Method* checked_method = Method::checked_resolve_jmethod_id(method);
  if (checked_method == NULL) {
      return JVMTI_ERROR_INVALID_METHODID;
  }
  if (declaring_class_ptr == NULL) {
      return JVMTI_ERROR_NULL_POINTER;
  }

  <<<<<<< ZGC can concurrently deallocate the checked_method

  err = jvmti_env->GetMethodDeclaringClass(checked_method, declaring_class_ptr);  <<<<< crash
  return err;
}


===================================
 
This in not compatible with GCs that perform concurrent class deallcation (such as ZGC). If <method> belongs to a class that has been collected (see JDK-8268088), but not yet deallocated, <checked_method> could be non-NULL, but will be concurrently deallocated by ZGC. So by the time we call into jvmti_env->GetMethodDeclaringClass, <checked_method> already points to bad memory.

Note: ZGC performs metadata deallocation outside of a safepoint. See JDK-8267879 for a case where ClassLoaderData::~ClassLoaderData() is called by ZGC while a safepoint is still in session.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8213466,,,JDK-8227410,,,,JDK-8267879,JDK-8268406,JDK-8268088,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2t4n7:",9223372036854775807,b05,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,,,"2021-06-07 21:30;iklam;A JVMTI agent should not rely on JVMTI_ERROR_INVALID_METHODID when saving aside a jmethodID (e.g., from the results of GetStackTrace). Instead, it should  ensure that the classloader associated with this jmethodID is not GCed. This can be done by creating a GlobalRef on the classloader:

- GetMethodDeclaringClass -> GetClassLoader -> NewGlobalRef

The agent can release the GlobalRef when it no longer references the jmethodID.
;;;","2021-06-07 21:45;dholmes;I don't think this is specific to ZGC but rather a consequence of a concurrent GC. If a class is not referenced whilst jmethodIDs from it are still in use then the class and associated methods can be GC'd rendering the jmethodID a dangling pointer. But it is not up to the JVM TI implementation to try and ensure this, it is the user of JVM TI. So I'm not sure what might be considered a ""fix"" for this issue?;;;","2021-06-08 06:09;coleenp;If declaring_class_ptr is a pointer to the class owning the Method, it's a strong reference and won't be unloaded.;;;","2021-06-08 08:11;iklam;I updated the bug description to include the entire body of jvmti_GetMethodDeclaringClass. declaring_class_ptr is used for returning the class that declares the jmethodID. It's not set until we get into  jvmti_env->GetMethodDeclaringClass(...).;;;","2021-06-08 09:43;iklam;I think we should require the JVMTI agents to keep the jmethodIDs alive.

[1] Add a new JVMTI capability can_handle_concurrent_class_unloading. Let's call the JVMTI agents that don't implement this capability as ""old agents"".

[2] If the VM has not loaded any old agents, it's safe to free the JNIMethodBlocks

[3] Old agents should be deprecated and eventually not supported. We can do something like this to encourage migration

     JDK 18 - print warning message when loading old agents with GCs that perform concurrent class deallcation (such as ZGC).
     JDK 19 - refuse to load old agents with ZGC, etc, print warning messages with all other GCs
     JDK 20 - refuse to load old agents with all GCs.

Eventually, JNIMethodBlocks will be unconditionally freed when a class loader is deallocated. If a JVMTI agent attempts to use a jmethodIDs from a deallocated class, the behavior is unspecified (same as in JNI).;;;","2021-06-08 10:39;coleenp;This bug report shows a race in ZGC.  The jmethodIDs are cleared in ~ClassLoaderData after the metaspace is returned, so that this line can get a bad pointer before the jmethodIDs are cleared:

  Method* checked_method = Method::checked_resolve_jmethod_id(method);

The jmethodIDs should be cleared during unload not purge.

I think you should post your previous comment as a separate RFE as an idea to be able to deallocate jmethodIDs.;;;","2021-06-08 11:16;jiangli;>A JVMTI agent should not rely on JVMTI_ERROR_INVALID_METHODID when saving aside a jmethodID (e.g., from the results of GetStackTrace). Instead, it should ensure that the classloader associated with this jmethodID is not GCed. This can be done by creating a GlobalRef on the classloader:
>
>- GetMethodDeclaringClass -> GetClassLoader -> NewGlobalRef
>
>The agent can release the GlobalRef when it no longer references the jmethodID.

This shouldn't be a recommended solution for users, because it would keep more memory for longer time. The agent behavior would dictate the memory usages of the VM and prevent classes from being unloaded unnecessarily.  If an agent only processes all jmethod_ids at the end, it would keep all loaders alive without being able to be unloaded. Also, a bug (fail to release any of the GoabalRef) in the agent might cause memory leaks. ;;;","2021-06-09 02:54;sspitsyn;I agree with Coleen, this looks like a race in ZGC.
[~jiangli] Thank you for the comment.
[~iklam] Thank you for catching and filing this issue! However, I doubt, the approach to require JVM TI agents to keep jmethodID's alive you suggest would really work as it breaks compatibility. A jmethodID can become invalid if class is unloaded as stated here:
  http://cr.openjdk.java.net/~sspitsyn/webrevs/2021/jvmti-deprecate-heap-funcs.1/jvmti.html#jmethodID
Do you have a test case reproducing this issue?;;;","2021-06-09 12:48;sspitsyn;I think, this issue has to be moved to ZGC team after some additional investigation and prove. 
Targeting this to TBD for now.;;;","2021-06-09 15:07;coleenp;It's not really a ZGC issue.  This is more of a runtime issue.  Feel free to reassign it to us. I think the title should be changed to jmethodID clearing too late.  The late clearing creates a race when using collectors like ZGC that can purge metaspace while JVMTI is looking at jmethodIDs.;;;","2021-07-02 11:06;roboduke;Changeset: 3d84398d
Author:    Coleen Phillimore <coleenp@openjdk.org>
Date:      2021-07-02 18:04:45 +0000
URL:       https://git.openjdk.java.net/jdk/commit/3d84398d128bb2eed6280ebbc3f57afb3b89908f
;;;",,,,,,,,,,,,,,,,,,,,,,,
[REDO] C2 crash when compile negative Arrays.copyOf length after loop,JDK-8268362,5051312,Bug,Closed,JDK,JDK,software,duke,,,P2,Fixed,hshi,hshi,hshi,2021-06-07 19:47,2023-09-26 06:18,2023-10-01 09:57,2021-06-21 04:59,11,15,16,17,18,8u333,,17,hotspot,,0,c2,c2-loopopts,hs-comp-triaged,jdk11u-fix-request,jdk11u-fix-yes,oracle-triage-17,tencent-interest,,,,,,,"Release build crash when compile following class init method. 

class test {
    public static int exp_count = 0;
    public int in1 = -4096;
    test (){
        try {
            short sha4[] = new short[1012];
            for (int i = 0; i < sha4.length; i++) {
              sha4[i] = 9;
            }
            Arrays.copyOf(sha4, in1);
        } catch (Exception ex) {
            exp_count++;
        }
    }
}


#
# A fatal error has been detected by the Java Runtime Environment:
#
#  SIGSEGV (0xb) at pc=0x00007fe80a01da27, pid=24823, tid=24836
#
# JRE version: OpenJDK Runtime Environment (17.0) (build 17-internal+0-adhoc.shihui.jdk)
# Java VM: OpenJDK 64-Bit Server VM (17-internal+0-adhoc.shihui.jdk, mixed mode, compressed oops, compressed class ptrs, g1 gc, linux-amd64)
# Problematic frame:
# V  [libjvm.so+0xc80a27]  NodeHash::hash_delete(Node const*)+0x7
#
# No core dump will be written. Core dumps have been disabled. To enable core dumping, try ""ulimit -c unlimited"" before starting Java again
#
# If you would like to submit a bug report, please visit:
#   https://bugreport.java.com/bugreport/crash.jsp
#

---------------  S U M M A R Y ------------

Command Line: -Xbatch -XX:-TieredCompilation -XX:-UseOnStackReplacement -XX:CompileCommand=compileonly,test::<init> neg_arrays_copyof_after_loop

Host: AMD EPYC 7K62 48-Core Processor, 8 cores, 15G, CentOS Linux release 7.2 (Final)
Time: Wed May 26 16:20:31 2021 CST elapsed time: 0.248680 seconds (0d 0h 0m 0s)

---------------  T H R E A D  ---------------

Current thread (0x00007fe8041ed7e0):  JavaThread ""C2 CompilerThread0"" daemon [_thread_in_native, id=24836, stack(0x00007fe7f41fa000,0x00007fe7f42fb000)]


Current CompileTask:
C2:    248   24   !b        test::<init> (58 bytes)

Stack: [0x00007fe7f41fa000,0x00007fe7f42fb000],  sp=0x00007fe7f42f5d30,  free space=1007k
Native frames: (J=compiled Java code, j=interpreted, Vv=VM code, C=native code)
V  [libjvm.so+0xc80a27]  NodeHash::hash_delete(Node const*)+0x7
V  [libjvm.so+0xacd5a0]  PhaseIdealLoop::is_counted_loop(Node*, IdealLoopTree*&, BasicType)+0xcc0
V  [libjvm.so+0xaceb44]  IdealLoopTree::counted_loop(PhaseIdealLoop*)+0xc4
V  [libjvm.so+0xacebe8]  IdealLoopTree::counted_loop(PhaseIdealLoop*)+0x168
V  [libjvm.so+0xad157f]  PhaseIdealLoop::build_and_optimize(LoopOptsMode)+0xb8f
V  [libjvm.so+0x5d6d39]  PhaseIdealLoop::optimize(PhaseIterGVN&, LoopOptsMode)+0x199
V  [libjvm.so+0x5d4e61]  Compile::Optimize()+0xab1
V  [libjvm.so+0x5d6506]  Compile::Compile(ciEnv*, ciMethod*, int, bool, bool, bool, bool, DirectiveSet*)+0xd26
V  [libjvm.so+0x509226]  C2Compiler::compile_method(ciEnv*, ciMethod*, int, bool, DirectiveSet*)+0xa6
V  [libjvm.so+0x5e0314]  CompileBroker::invoke_compiler_on_method(CompileTask*)+0xee4
V  [libjvm.so+0x5e1038]  CompileBroker::compiler_thread_loop()+0x4c8
V  [libjvm.so+0xefcbc0]  JavaThread::thread_main_inner()+0x180
V  [libjvm.so+0xf00032]  Thread::call_run()+0xe2
V  [libjvm.so+0xc38bff]  thread_native_entry(Thread*)+0xdf
",,,,,,,,,,,JDK-8270538,JDK-8270001,JDK-8270606,JDK-8269104,,,,,,,,,,,,JDK-8267904,JDK-8271926,,,JDK-8288198,JDK-8316950,,JDK-8268345,,,,JDK-8271926,JDK-8268301,JDK-8268325,,"2021-06-07 19:47;hshi;hs_err_pid24823.log;https://bugs.openjdk.org/secure/attachment/95052/hs_err_pid24823.log",,,,,,,,,,,generic,,,,,,,,,generic,,,,,"0|i2t4mj:",9223372036854775807,b28,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,Verified,,"2021-06-08 00:20;chagedorn;ILW = Same as JDK-8267904 = P2;;;","2021-06-08 00:28;chagedorn;Hitting the following assert with a debug build:
assert((Opcode() != Op_If && Opcode() != Op_RangeCheck) || outcnt() == 2) failed: bad if #1;;;","2021-06-21 04:59;roboduke;Changeset: 22ebd192
Author:    Hui Shi <hshi@openjdk.org>
Date:      2021-06-21 11:59:00 +0000
URL:       https://git.openjdk.java.net/jdk17/commit/22ebd1926d4510cbe40cb186edf16cbd44a29347
;;;","2021-07-13 15:05;mdoerr;Fix Request (11u):
Should get backported for parity with 11.0.13-oracle. Applies cleanly.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Fix the infinite loop in next_line,JDK-8268361,5051310,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,sgehwolf,yyang,yyang,2021-06-07 18:53,2023-05-04 12:58,2023-10-01 09:57,2021-06-10 09:42,,,,,,,,18,core-svc,,0,jdk11u-fix-request,jdk11u-fix-yes,jdk13u-fix-request,jdk13u-fix-yes,jdk15u-fix-request,jdk15u-fix-yes,jdk17u-fix-request,jdk17u-fix-yes,noreg-hard,,,,,"If the /proc/stat mount point is changed in container environment, the while loop may lead to 100% cpu usage.",,,,,,,,,,,JDK-8276870,JDK-8276715,JDK-8293215,JDK-8293157,JDK-8296644,JDK-8307487,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2t4m3:",9223372036854775807,b01,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@411d4af6,,,,,,,,,"2021-06-10 09:42;roboduke;Changeset: 72672277
Author:    UncleNine <ganjianxuan@hotmail.com>
Committer: Severin Gehwolf <sgehwolf@openjdk.org>
Date:      2021-06-10 16:40:29 +0000
URL:       https://git.openjdk.java.net/jdk/commit/72672277e4dddf8e72f1c705cd5f57de40745635
;;;","2021-11-03 14:34;akasko;Fix request (17u)

Clean backport of a minor fix.;;;","2022-08-26 03:30;yan;Fix request (15u, 13u):
on behalf of Roman Marchenko:
 
I'd like to port JDK-8268361 to 15u due to it has similar problems as 17u does.
Fix applies cleanly.
Tests tier1 passed after the fix without regressions.;;;","2022-08-30 15:02;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk15u-dev/pull/260
Date: 2022-08-26 10:43:35 +0000;;;","2022-09-01 05:09;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk13u-dev/pull/397
Date: 2022-09-01 12:01:39 +0000;;;","2022-11-08 08:06;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk11u-dev/pull/1508
Date: 2022-11-08 15:56:14 +0000;;;","2022-11-08 09:20;yan;Fix request (11u)
on behalf of Jan Kratochvil
I'd like to port JDK-8268361 to 11u because there are similar problems.
Clean backport.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,
Missing check for infinite loop during node placement,JDK-8268360,5051308,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,kvn,kvn,kvn,2021-06-07 18:18,2021-07-12 05:54,2023-10-01 09:57,2021-06-08 14:38,11-pool,16,,,,,,11.0.13-oracle,hotspot,,0,c2-loopopts,jdk11u-fix-request,jdk11u-fix-yes,oracle-triage-17,tencent-interest,,,,,,,,,"C2 compiler is missing check for infinite loop in PhaseIdealLoop::place_near_use() and as result it crashes when trying to process it as a normal loop.

The expected behavior of the C2 compiler is to simply bail out with ""COMPILE 
SKIPPED: infinite loop (retry at different tier)"". JDK8 passed the test in such way.",,,,,,,,,,,JDK-8270166,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8268417,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2t4ln:",9223372036854775807,b01,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2021-06-08 00:42;chagedorn;[~kvn] Have you observed such a crash, yet?;;;","2021-06-08 07:41;kvn;I have reproducer.;;;","2021-06-08 12:10;kvn;JDK-8252372 changes rewrote affected code and the test does not fail anymore with JDK 17:
    277    3   !   4       TestInfLoopNearUsePlacement::test (61 bytes)
    280    3   !   4       TestInfLoopNearUsePlacement::test (61 bytes)   COMPILE SKIPPED: infinite loop (retry at different tier)

Which leaves only JDK 11 and 16 affected.;;;","2021-06-08 12:14;kvn;I will add TestInfLoopNearUsePlacement test to JDK 17 as separate linked RFE.;;;","2021-06-08 13:13;dlong;ILW = crash, not observed in JDK ""in the wild"", disable c2 compilation for affected method to workaround = HLM = P3;;;","2021-07-12 05:31;mdoerr;Fix Request (11u): 
Should get fixed for parity with 11.0.13-oracle. Oracle's fix is not public, so this is no formal backport. The test is taken from JDK-8268417. Review: https://github.com/openjdk/jdk11u-dev/pull/113;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,
[lworld] toString for primitive class should return `ClassName@hash`,JDK-8268358,5051305,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,mchung,mchung,mchung,2021-06-07 15:35,2021-06-11 15:43,2023-10-01 09:57,2021-06-11 15:43,repo-valhalla,,,,,,,repo-valhalla,core-libs,,0,lworld,,,,,,,,,,,,,"Object::toString for primitive class should return the traditional `ClassName@hash` not to leak any private and security-sensitive information.

A primitive class can override `toString` for their custom string representation.
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8268584,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2t4kz:",9223372036854775807,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4c088d55,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
 Remove assert that ensures thread identifier remains the same,JDK-8268350,5051291,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,lkorinth,dcubed,dcubed,2021-06-07 11:25,2021-07-15 10:22,2023-10-01 09:57,2021-06-30 00:46,17,,,,,,,17,hotspot,,0,gc-parallel,test-bigapps-Kitchensink,tier3,tier8,,,,,,,,,,"The following test failed in the JDK17 CI:

applications/kitchensink/Kitchensink.java

Here's a snippet from the log file:

Output and diagnostic info for process 3800988 was saved into 'pid-3800988-output.log'
[stress.process.out] [thread 3794627 also had an error][thread 3794626 also had an error][thread 3794625 also had an error][thread 3794629 also had an error]
[stress.process.out] 
[stress.process.out] 
[stress.process.out] #
[stress.process.out] # A fatal error has been detected by the Java Runtime Environment:
[stress.process.out] #
[stress.process.out] #  Internal Error (/opt/mach5/mesos/work_dir/slaves/35546316-ed70-4084-8244-d672e7734fd1-S13236/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/ac8debd0-d4ab-4b0a-8040-6cd20dcfa74d/runs/9b797805-7c31-45ef-9693-b4955bf10761/workspace/open/src/hotspot/share/gc/shared/copyFailedInfo.hpp:77), pid=3794563, tid=3794624
[stress.process.out] #  assert(((Thread::current())->jfr_thread_local()->thread_id()) == _thread_trace_id) failed: The PromotionFailedInfo should be thread local.
[stress.process.out] #
[stress.process.out] # JRE version: Java(TM) SE Runtime Environment (17.0+26) (fastdebug build 17-ea+26-LTS-2343)
[stress.process.out] # Java VM: Java HotSpot(TM) 64-Bit Server VM (fastdebug 17-ea+26-LTS-2343, mixed mode, sharing, tiered, compressed oops, compressed class ptrs, parallel gc, linux-aarch64)
[stress.process.out] # Core dump will be written. Default location: Core dumps may be processed with ""/opt/core.sh %p"" (or dumping to /opt/mach5/mesos/work_dir/slaves/35546316-ed70-4084-8244-d672e7734fd1-S13243/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/2da2d2ea-f814-4ce1-a81a-a8aef205bd30/runs/de21deb9-72d7-4da5-bc90-0a8d3f50faa1/testoutput/test-support/jtreg_closed_test_hotspot_jtreg_applications_kitchensink_Kitchensink_java/scratch/0/core.3794563)
[stress.process.out] #
[stress.process.out] Unsupported internal testing APIs have been used.
[stress.process.out] 
[stress.process.out] # An error report file with more information is saved as:
[stress.process.out] # /opt/mach5/mesos/work_dir/slaves/35546316-ed70-4084-8244-d672e7734fd1-S13243/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/2da2d2ea-f814-4ce1-a81a-a8aef205bd30/runs/de21deb9-72d7-4da5-bc90-0a8d3f50faa1/testoutput/test-support/jtreg_closed_test_hotspot_jtreg_applications_kitchensink_Kitchensink_java/scratch/0/hs_err_pid3794563.log
[stress.process.out] 
[stress.process.out] [thread 3794630 also had an error]
[stress.process.out] #
[stress.process.out] # If you would like to submit a bug report, please visit:
[stress.process.out] #   https://bugreport.java.com/bugreport/crash.jsp
[stress.process.out] #


Here's the crashing thread's stack:

---------------  T H R E A D  ---------------

Current thread (0x0000fffd40002460):  GCTaskThread ""GC Thread#1"" [stack: 0x0000fffd1c9e0000,0x0000fffd1cbe0000] [id=3794624]

Stack: [0x0000fffd1c9e0000,0x0000fffd1cbe0000],  sp=0x0000fffd1cbddf20,  free space=2039k
Native frames: (J=compiled Java code, j=interpreted, Vv=VM code, C=native code)
V  [libjvm.so+0x1819c30]  VMError::report_and_die(int, char const*, char const*, std::__va_list, Thread*, unsigned char*, void*, void*, char const*, int, unsigned long)+0x170
V  [libjvm.so+0x181a920]  VMError::report_and_die(Thread*, void*, char const*, int, char const*, char const*, std::__va_list)+0x50
V  [libjvm.so+0xa14488]  report_vm_error(char const*, int, char const*, char const*, ...)+0x118
V  [libjvm.so+0xa2c394]  PromotionFailedInfo::register_copy_failure(unsigned long)+0xb4
V  [libjvm.so+0x152e630]  PSPromotionManager::oop_promotion_failed(oop, markWord)+0x19c
V  [libjvm.so+0x15312ec]  oop PSPromotionManager::copy_to_survivor_space<false>(oop)+0x40c
V  [libjvm.so+0x153208c]  void PSPromotionManager::copy_and_push_safe_barrier<false, narrowOop>(narrowOop*)+0xcc
V  [libjvm.so+0x152f8fc]  PSPromotionManager::drain_stacks_depth(bool)+0x298
V  [libjvm.so+0x153abe0]  PSEvacuateFollowersClosure::do_void()+0x20
V  [libjvm.so+0x1549c80]  ReferenceProcessor::process_final_keep_alive_work(DiscoveredList&, OopClosure*, VoidClosure*)+0x1c0
V  [libjvm.so+0x15533c0]  RefProcPhase3Task::rp_work(unsigned int, BoolObjectClosure*, OopClosure*, VoidClosure*)+0x60
V  [libjvm.so+0x1537358]  ParallelScavengeRefProcProxyTask::work(unsigned int)+0xc8
V  [libjvm.so+0x187a818]  GangWorker::run_task(WorkData)+0x98
V  [libjvm.so+0x187a978]  GangWorker::loop()+0x58
V  [libjvm.so+0x187a9cc]
V  [libjvm.so+0x173e5f8]  Thread::call_run()+0xf8
V  [libjvm.so+0x145a7f8]  thread_native_entry(Thread*)+0x108
C  [libpthread.so.0+0x7738]  start_thread+0x198",,,,,,,,,,,JDK-8270676,JDK-8269709,,,,,,,,,,,,,,,,,,,,,JDK-8268537,,,,,,,,,,,,,,,,,,,aarch64,,,,,,,,,linux,,,,,"0|i2t4hv:",9223372036854775807,b29,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6b00f96c,,,,,,,,,"2021-06-09 15:28;dholmes;This is failing every time. Can we get this ProblemListed for this platform to clean up the noise in the CI please.;;;","2021-06-09 15:39;dholmes;The same failure is being seen in vmTestbase/gc/gctests/FinalizeLock/FinalizeLock.java on Windows.

---------------  T H R E A D  ---------------

Current thread (0x000001ccd81b6840):  GCTaskThread ""GC Thread#5"" [stack: 0x00000044dc000000,0x00000044dc100000] [id=23044]

Stack: [0x00000044dc000000,0x00000044dc100000]
Native frames: (J=compiled Java code, j=interpreted, Vv=VM code, C=native code)
V  [jvm.dll+0xadd0c1]  os::platform_print_native_stack+0xf1  (os_windows_x86.cpp:235)
V  [jvm.dll+0xd054e5]  VMError::report+0x1005  (vmError.cpp:739)
V  [jvm.dll+0xd06e6e]  VMError::report_and_die+0x7fe  (vmError.cpp:1549)
V  [jvm.dll+0xd075a4]  VMError::report_and_die+0x64  (vmError.cpp:1330)
V  [jvm.dll+0x4c65b7]  report_vm_error+0xb7  (debug.cpp:282)
V  [jvm.dll+0x4d21af]  PromotionFailedInfo::register_copy_failure+0xdf  (copyFailedInfo.hpp:80)
V  [jvm.dll+0xb4878a]  PSPromotionManager::oop_promotion_failed+0xda  (psPromotionManager.cpp:361)
V  [jvm.dll+0xb466cd]  PSPromotionManager::copy_to_survivor_space<0>+0x46d  (psPromotionManager.inline.hpp:298)
V  [jvm.dll+0xb4618b]  PSPromotionManager::copy_and_push_safe_barrier<0,enum narrowOop>+0xbb  (psPromotionManager.inline.hpp:308)
V  [jvm.dll+0xb4aead]  PSKeepAliveClosure::do_oop+0x8d  (psScavenge.cpp:176)
V  [jvm.dll+0xb546a2]  ReferenceProcessor::process_final_keep_alive_work+0x182  (referenceProcessor.cpp:417)
V  [jvm.dll+0xb55f44]  RefProcPhase3Task::rp_work+0x74  (referenceProcessor.cpp:599)
V  [jvm.dll+0xb4d498]  ParallelScavengeRefProcProxyTask::work+0x108  (psScavenge.cpp:216)
V  [jvm.dll+0xd4b03a]  GangWorker::loop+0x8a  (workgroup.cpp:260)
V  [jvm.dll+0xd4b0dd]  GangWorker::run+0x1d  (workgroup.cpp:227)
V  [jvm.dll+0xc87cf4]  Thread::call_run+0x1b4  (thread.cpp:399)
V  [jvm.dll+0xadb9be]  thread_native_entry+0xae  (os_windows.cpp:549)
C  [ucrtbase.dll+0x1fb80]
C  [KERNEL32.DLL+0x84d4]
C  [ntdll.dll+0x51781];;;","2021-06-10 01:41;lkorinth;https://bugs.openjdk.java.net/browse/JDK-8268537 created as a temporarily fix, out for review soon.;;;","2021-06-10 08:22;dcubed;The fix for JDK-8268537 is in jdk-17+26-2433.;;;","2021-06-30 00:46;roboduke;Changeset: 6b64a795
Author:    Leo Korinth <lkorinth@openjdk.org>
Date:      2021-06-30 07:45:39 +0000
URL:       https://git.openjdk.java.net/jdk17/commit/6b64a7956ceb0c10d3868c67a923a8de12433aee
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Provide clear run-time warnings about Security Manager deprecation,JDK-8268349,5051289,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,mullan,mullan,mullan,2021-06-07 11:05,2022-06-23 11:59,2023-10-01 09:57,2021-06-21 18:57,17,,,,,,,17,security-libs,,0,,,,,,,,,,,,,,"In connection with JEP 411, provide clear warnings when a Security Manager is enabled at startup or installed at run time. If a command line option prevents a Security Manager from being installed at run time, provide a clear message in the UnsupportedOperationException thrown by System::setSecurityManager.

See the CSR for further details.",,,,,,,,,,,JDK-8269191,JDK-8270612,,,,,,,,,,,,JDK-8268392,,,,,,,,,JDK-8268637,,,,JDK-8264713,JDK-8281005,JDK-8269543,JDK-8289080,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2t4hf:",9223372036854775807,b28,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@2ec284e3,,,,,,,,,"2021-06-21 19:08;roboduke;Changeset: ef4ba224
Author:    Weijun Wang <weijun@openjdk.org>
Date:      2021-06-22 02:06:59 +0000
URL:       https://git.openjdk.java.net/jdk17/commit/ef4ba224c4887b2e307937754064d3623a2d3de5
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
C2: nested locks optimization may create unbalanced monitor enter/exit code,JDK-8268347,5051286,Bug,Closed,JDK,JDK,software,duke,,,P2,Fixed,kvn,kvn,kvn,2021-06-07 10:28,2023-09-25 16:46,2023-10-01 09:57,2021-06-14 16:42,11,16,17,8,9,,,17,hotspot,,0,11bpr-critical-approved,c2,hs-comp-triaged,jdk11u-fix-request,jdk11u-fix-yes,oracle-triage-17,redhat-interest,,,,,,,"There are several restrictions on when nested locks should be optimized. One of them is that NLO requires one BoxLock node per one lock/unlock region.
Unfortunately loop unswitching optimization can create such a case because loop cloning does not clone BoxLock nodes which are outside loops (they are pinned to the Root node). Note, Lock/Unlock nodes are a subclass of Call node - all loop optimizations are skipped, except unswitching.

NLO happens during Macro nodes elimination. But before that Lock/Unlock coarsening optimization happens during IGVN as early as right after parsing - even before Escape analysis.

Now back to the failing case:

while (a) {
    synchronized(obj) { // ORn (outer lock region)
          if (loop_invar_check) {
              synchronized(obj) { // NR1 } // (nested lock region 1)
          } else {
             // no synchronization
          }
          synchronized(obj) { // NR2 } // (nested lock region 2)
    }
}

After loop unswitching:

 if (loop_invar_check) {
    while (a) {
        synchronized(obj) { // ORn (outer lock region)
             synchronized(obj) { // NR1 } // (nested lock region 1)
             synchronized(obj) { // NR2 } // (nested lock region 2)
        }
    }
} else {
    while (a) {
        synchronized(obj) { // CORn (Clone of outer lock region)
             synchronized(obj) { // CNR2 } // (Clone of nested lock region 2)
        }
    }
}

After loop unswitching for the code in the first branch Lock/Unlock coarsening optimization marked Unlock node from NR1 and Lock from NR2 as ""Coarsened"".

When NLO (Nested Lock Optimization) started, it overwrote the state for Unlock node from NR1 as ""Nested"" because it passed all conditions: it belonged to a simple region with one BoxLock node and was inside ORn region.
But NLO did not overwrite the state of Lock node from NR2 because this region shares BoxLock node with its clone CNR2 in second branch of unswitched loop. As a result this Lock node stayed ""Coarsened"". Later, when locks are eliminated, Lock/Unlock nodes in NR1 are eliminated as ""Nested"". And Lock node in NR2 is eliminated as  ""Coarsened"" leaving behind an un-matching Unlock node from NR2.

",,,,,,,,,,,JDK-8268724,JDK-8268914,JDK-8269675,JDK-8268842,JDK-8270534,,,,,,,,,,,,,,,JDK-8222313,JDK-8241028,,JDK-8071813,JDK-8316863,,,JDK-8269304,JDK-8269013,JDK-8268571,,"2021-06-15 15:57;kvn;8268347_11u_final.patch;https://bugs.openjdk.org/secure/attachment/95147/8268347_11u_final.patch","2021-06-17 10:05;kvn;8268347_8u.patch;https://bugs.openjdk.org/secure/attachment/95189/8268347_8u.patch",,,,,,,,,,,,,,,,,,,,,,,,"0|i2t4gr:",9223372036854775807,b27,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,Not verified,,"2021-06-07 10:29;kvn;LW=HMM=P2 
Impact = High, due to crash 
Likelihood = Medium, Not seen very often, but there are few reports that observed the same issue 
Workaround = Medium, use -XX:-EliminateLocks/EliminateNestedLocks flags;;;","2021-06-11 16:56;kvn;It could be the reason (I hope) for other failures related to unbalanced locks because call stacks show C2 compiled methods:
JDK-8066576 : Lock still held
JDK-8071813 : assert(false) failed: Non-balanced monitor enter/exit! Likely JNI locking
JDK-8222313 : Jvm crashes while on wait
;;;","2021-06-11 16:58;kvn;JDK-7125896 ""Eliminate nested locks"" was pushed into JDK 8. It could be affect and we may need to backport the fix there too.
;;;","2021-06-11 17:05;kvn;Running the test with JDK8 shows also unbalanced (7) eliminations:

***Eliminated 1 unlocks and 1 locks   <<<.  in this line ""Eliminated"" means ""Coarsened"" - locks are eliminated late with following lines.
++++ Eliminated: 794 Lock
++++ Eliminated: 789 Unlock
++++ Eliminated: 783 Lock
++++ Eliminated: 285 Unlock
++++ Eliminated: 203 Lock
++++ Eliminated: 179 Unlock
++++ Eliminated: 162 Lock
;;;","2021-06-14 16:42;roboduke;Changeset: 4d8b5c70
Author:    Vladimir Kozlov <kvn@openjdk.org>
Date:      2021-06-14 23:41:50 +0000
URL:       https://git.openjdk.java.net/jdk17/commit/4d8b5c70dff51470210a0ca93b932af1b27c9f27
;;;","2021-06-14 22:21;dholmes;> It could be the reason (I hope) for other failures related to unbalanced locks because call stacks show C2 compiled methods:
> JDK-8066576 : Lock still held

Seems unlikely given that was an issue in 8 and we did not see this issue in 8. Also it would require a different manifestation of the elimination bug where we elide the unlock but not the lock (which is the opposite of the known problem) - is that possible?

> JDK-8071813 : assert(false) failed: Non-balanced monitor enter/exit! Likely JNI locking

Possibly but hard to tell.

> JDK-8222313 : Jvm crashes while on wait 

Yes - now closed as a duplicate of this bug. It was the same library being used.;;;","2021-06-15 15:57;kvn;I attached final patch 8268347_11u_final.patch pushed into Oracle JDK 11u. And patch for JDK 8u.;;;","2021-07-15 00:48;roland;11u Fix Request
 
Backporting this patch eliminates a crash. Patch does not apply cleanly to 11u.
11u RFR: https://github.com/openjdk/jdk11u-dev/pull/115;;;","2021-08-12 06:48;enikitin;Tried to verify using  provided 'compiler/locks/TestNestedLocksElimination.java' against jdk-17+26 (pre-fix), but the test doesn't fail. Closing as 'Not verified';;;","2021-08-12 08:15;kvn;The test does not trigger crash. You need to run test with -XX:+PrintEliminateLocks to see unbalanced Locks/Unlocks eliminations.;;;","2021-08-12 08:17;kvn;The fix added the check and assert. Without fix the test will simply run incorrect code.;;;",,,,,,,,,,,,,,,,,,,,,,,
"java/foreign/channels/TestAsyncSocketChannels.java fails with ""IllegalStateException: This segment is already closed""",JDK-8268342,5051279,Bug,Closed,JDK,JDK,software,duke,,,P2,Fixed,chegar,dcubed,dcubed,2021-06-07 09:28,2023-05-31 02:04,2023-10-01 09:57,2021-06-14 01:30,17,,,,,,,17,core-libs,,0,intermittent,testbug,tier1,,,,,,,,,,,"The following test failed in the JDK17 CI:

java/foreign/channels/TestAsyncSocketChannels.java

Here's a snippet from the log file:

#section:testng
----------messages:(5/381)----------
command: testng TestAsyncSocketChannels
reason: User specified action: run testng/othervm TestAsyncSocketChannels 
Mode: othervm [/othervm specified]
Additional options from @modules: --add-modules java.base,jdk.incubator.foreign --add-exports java.base/sun.nio.ch=ALL-UNNAMED --add-exports jdk.incubator.foreign/jdk.internal.foreign=ALL-UNNAMED
elapsed time (seconds): 24.53
----------configuration:(5/216)----------
Boot Layer
  add modules: java.base jdk.incubator.foreign            
  add exports: java.base/sun.nio.ch                       ALL-UNNAMED
               jdk.incubator.foreign/jdk.internal.foreign ALL-UNNAMED

----------System.out:(31/1681)----------
Seed from RandomFactory = -849393116251581480L
test TestAsyncSocketChannels.testBasicIOWithSupportedScope(newSharedScope()): success
test TestAsyncSocketChannels.testBasicIOWithSupportedScope(newSharedScope(Cleaner)): success
test TestAsyncSocketChannels.testBasicIOWithSupportedScope(newImplicitScope()): success
test TestAsyncSocketChannels.testBasicIOWithSupportedScope(globalScope()): success
testCloseWithOutstandingRead - op
testCloseWithOutstandingRead - op
testCloseWithOutstandingRead - op
testCloseWithOutstandingRead - op
test TestAsyncSocketChannels.testCloseWithOutstandingRead(newSharedScope(), 0): success
testCloseWithOutstandingRead - op
testCloseWithOutstandingRead - op
testCloseWithOutstandingRead - op
testCloseWithOutstandingRead - op
test TestAsyncSocketChannels.testCloseWithOutstandingRead(newSharedScope(Cleaner), 0): success
testCloseWithOutstandingRead - op
testCloseWithOutstandingRead - op
testCloseWithOutstandingRead - op
testCloseWithOutstandingRead - op
test TestAsyncSocketChannels.testCloseWithOutstandingRead(newSharedScope(), 30): success
testCloseWithOutstandingRead - op
testCloseWithOutstandingRead - op
testCloseWithOutstandingRead - op
testCloseWithOutstandingRead - op
test TestAsyncSocketChannels.testCloseWithOutstandingRead(newSharedScope(Cleaner), 30): success
outstanding writes: 0
test TestAsyncSocketChannels.testCloseWithOutstandingWrite(newSharedScope(), 0): success
outstanding writes: 0
test TestAsyncSocketChannels.testCloseWithOutstandingWrite(newSharedScope(Cleaner), 0): success
outstanding writes: 0
test TestAsyncSocketChannels.testCloseWithOutstandingWrite(newSharedScope(), 30): success
----------System.err:(18/1504)----------
WARNING: Using incubator modules: jdk.incubator.foreign
java.lang.IllegalStateException: This segment is already closed
	at java.base/jdk.internal.misc.ScopedMemoryAccess.putByte(ScopedMemoryAccess.java:368)
	at java.base/java.lang.invoke.MemoryAccessVarHandleByteHelper.set(MemoryAccessVarHandleByteHelper.java:123)
	at jdk.incubator.foreign/jdk.incubator.foreign.MemoryAccess.setByteAtOffset(MemoryAccess.java:118)
	at AbstractChannelsTest.segmentBufferOfSize(AbstractChannelsTest.java:78)
	at AbstractChannelsTest.segmentBuffersOfSize(AbstractChannelsTest.java:86)
	at TestAsyncSocketChannels$1.completed(TestAsyncSocketChannels.java:262)
	at TestAsyncSocketChannels$1.completed(TestAsyncSocketChannels.java:257)
	at java.base/sun.nio.ch.Invoker.invokeUnchecked(Invoker.java:129)
	at java.base/sun.nio.ch.Invoker.invokeUnchecked(Invoker.java:284)
	at java.base/sun.nio.ch.WindowsAsynchronousSocketChannelImpl$WriteTask.completed(WindowsAsynchronousSocketChannelImpl.java:843)
	at java.base/sun.nio.ch.Iocp$EventHandlerTask.run(Iocp.java:387)
	at java.base/sun.nio.ch.AsynchronousChannelGroupImpl$1.run(AsynchronousChannelGroupImpl.java:113)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)
STATUS:Failed.`main' threw exception: java.lang.IllegalStateException: This segment is already closed
----------rerun:(44/5916)*----------",,,,,,,,,,,JDK-8268713,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2t4f7:",9223372036854775807,b27,,,,,,,,,,Verified,,"2021-06-07 11:33;dcubed;Bumping from P3 -> P2 since this failure has shown up in
a couple of recent Tier1 job sets.;;;","2021-06-08 06:29;chegar;There is the possibility for a race in the test, where the outbound socket buffer is still being filled, after 5 seconds, when the main test thread tries to close the resource scope. This is a test issue, and the test should be updated to avoid such a race.;;;","2021-06-14 01:30;roboduke;Changeset: fe48ea9d
Author:    Chris Hegarty <chegar@openjdk.org>
Date:      2021-06-14 08:29:49 +0000
URL:       https://git.openjdk.java.net/jdk17/commit/fe48ea9d7975188853bc165ce29789753f4758f2
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Upstream: 8267989: Exceptions thrown during upcalls should be handled,JDK-8268339,5051275,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,jvernee,jvernee,jvernee,2021-06-07 09:02,2021-06-10 18:01,2023-10-01 09:57,2021-06-10 01:45,17,,,,,,,17,tools,,0,foreign-memaccess+abi,,,,,,,,,,,,,"Upstream the 8267989 fix to the mainline JDK repo.

This is only a part of the original patch, which adds (consistent) exception handling for exceptions thrown by upcalls.",,,,,,,,,,,,,,,,,,,,,,,,JDK-8268343,,,,,,,,,JDK-8268328,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2t4eb:",9223372036854775807,b26,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@2251e2f8,,,,,,,,,"2021-06-10 01:45;roboduke;Changeset: ab01cb54
Author:    Jorn Vernee <jvernee@openjdk.org>
Date:      2021-06-10 08:44:28 +0000
URL:       https://git.openjdk.java.net/jdk/commit/ab01cb547dd87f76017e9b079ab68495c38ffc90
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
javac crashes when pattern matching switch contains default case which is not last,JDK-8268333,5051266,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,jlahoda,jlahoda,jlahoda,2021-06-07 07:11,2021-06-17 07:35,2023-10-01 09:57,2021-06-14 07:26,17,,,,,,,17,tools,,0,,,,,,,,,,,,,,"Reported here:
https://mail.openjdk.java.net/pipermail/core-libs-dev/2021-June/078695.html

Code like this:
    Object o = null;
    var value = switch(o) {
          default -> 0;
          case String s -> 0;
    };
    System.out.println(value);

Will crash javac with:
java.lang.AssertionError
	at jdk.compiler/com.sun.tools.javac.util.Assert.error(Assert.java:155)
	at jdk.compiler/com.sun.tools.javac.util.Assert.check(Assert.java:46)
	at jdk.compiler/com.sun.tools.javac.jvm.Gen.handleSwitch(Gen.java:1310)
	at jdk.compiler/com.sun.tools.javac.jvm.Gen.doHandleSwitchExpression(Gen.java:1238)
	at jdk.compiler/com.sun.tools.javac.jvm.Gen.visitSwitchExpression(Gen.java:1202)
	at jdk.compiler/com.sun.tools.javac.tree.JCTree$JCSwitchExpression.accept(JCTree.java:1381)
	at jdk.compiler/com.sun.tools.javac.jvm.Gen.genExpr(Gen.java:877)
	at jdk.compiler/com.sun.tools.javac.jvm.Gen.visitLetExpr(Gen.java:2376)
	at jdk.compiler/com.sun.tools.javac.tree.JCTree$LetExpr.accept(JCTree.java:3288)
	at jdk.compiler/com.sun.tools.javac.jvm.Gen.genExpr(Gen.java:877)
	at jdk.compiler/com.sun.tools.javac.jvm.Gen.visitVarDef(Gen.java:1081)
	at jdk.compiler/com.sun.tools.javac.tree.JCTree$JCVariableDecl.accept(JCTree.java:1028)
	at jdk.compiler/com.sun.tools.javac.jvm.Gen.genDef(Gen.java:610)
	at jdk.compiler/com.sun.tools.javac.jvm.Gen.genStat(Gen.java:645)
	at jdk.compiler/com.sun.tools.javac.jvm.Gen.genStat(Gen.java:631)
	at jdk.compiler/com.sun.tools.javac.jvm.Gen.genStats(Gen.java:682)
	at jdk.compiler/com.sun.tools.javac.jvm.Gen.visitBlock(Gen.java:1097)
	at jdk.compiler/com.sun.tools.javac.tree.JCTree$JCBlock.accept(JCTree.java:1092)
	at jdk.compiler/com.sun.tools.javac.jvm.Gen.genDef(Gen.java:610)
	at jdk.compiler/com.sun.tools.javac.jvm.Gen.genStat(Gen.java:645)
	at jdk.compiler/com.sun.tools.javac.jvm.Gen.genMethod(Gen.java:967)
	at jdk.compiler/com.sun.tools.javac.jvm.Gen.visitMethodDef(Gen.java:930)
	at jdk.compiler/com.sun.tools.javac.tree.JCTree$JCMethodDecl.accept(JCTree.java:922)
	at jdk.compiler/com.sun.tools.javac.jvm.Gen.genDef(Gen.java:610)
	at jdk.compiler/com.sun.tools.javac.jvm.Gen.genClass(Gen.java:2415)
	at jdk.compiler/com.sun.tools.javac.main.JavaCompiler.genCode(JavaCompiler.java:737)
	at jdk.compiler/com.sun.tools.javac.main.JavaCompiler.generate(JavaCompiler.java:1617)
	at jdk.compiler/com.sun.tools.javac.main.JavaCompiler.generate(JavaCompiler.java:1585)
	at jdk.compiler/com.sun.tools.javac.main.JavaCompiler.compile(JavaCompiler.java:946)
	at jdk.compiler/com.sun.tools.javac.main.Main.compile(Main.java:317)
	at jdk.compiler/com.sun.tools.javac.main.Main.compile(Main.java:176)
	at jdk.compiler/com.sun.tools.javac.Main.compile(Main.java:64)
	at jdk.compiler/com.sun.tools.javac.Main.main(Main.java:50)

Per the current specification, the default case can be at any position, and javac should compile the code OK.",,,,,,,,,,,JDK-8268832,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2t4cb:",9223372036854775807,b27,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4dca67bd,,,,,,,,,"2021-06-14 07:26;roboduke;Changeset: abe20c18
Author:    Jan Lahoda <jlahoda@openjdk.org>
Date:      2021-06-14 14:25:32 +0000
URL:       https://git.openjdk.java.net/jdk17/commit/abe20c188c67a85176f1f1ea530184ce0ec4fe29
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Fix crash in humongous object eager reclaim logging,JDK-8268331,5051264,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,tschatzl,tschatzl,tschatzl,2021-06-07 06:30,2021-06-10 17:57,2023-10-01 09:57,2021-06-07 07:10,17,,,,,,,17,hotspot,,0,gc-g1,,,,,,,,,,,,,Some move of some logging in JDK-8267924 the logging output causes an access to a null pointer with that logging enabled.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8267924,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2t4bv:",9223372036854775807,b26,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6b00f96c,,,,,,,,,"2021-06-07 07:10;roboduke;Changeset: 270ec975
Author:    Thomas Schatzl <tschatzl@openjdk.org>
Date:      2021-06-07 14:09:22 +0000
URL:       https://git.openjdk.java.net/jdk/commit/270ec975b69d4e9a73571c4ba21b705e48d3e1b4
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Upstream: 8268169: The system lookup can not find stdio functions such as printf on Windows 10,JDK-8268327,5051259,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,jvernee,jvernee,jvernee,2021-06-07 05:58,2023-08-09 00:11,2023-10-01 09:57,2021-06-08 07:21,17,,,,,,,17,tools,,0,foreign-memaccess+abi,,,,,,,,,,,,,Upstream the 8268169 fix to the mainline JDK repo.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8313993,,,,JDK-8268169,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2t4ar:",9223372036854775807,b26,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@2251e2f8,,,,,,,,,"2021-06-08 07:21;roboduke;Changeset: 8158b822
Author:    Jorn Vernee <jvernee@openjdk.org>
Date:      2021-06-08 14:20:31 +0000
URL:       https://git.openjdk.java.net/jdk/commit/8158b82269513a60c13bb10a6edfa82f806e8efc
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Better error recovery for broken patterns in switch,JDK-8268320,5051251,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,jlahoda,jlahoda,jlahoda,2021-06-07 04:25,2021-07-15 10:23,2023-10-01 09:57,2021-06-30 02:48,17,,,,,,,17,tools,,0,,,,,,,,,,,,,,"As reported here:
https://mail.openjdk.java.net/pipermail/core-libs-dev/2021-June/078693.html

The error recovery could be improved in cases like:
Object obj = ...;
switch (obj) {
     case String -> {}
}

$ javac --enable-preview -source 17 /tmp/Test.java 
/tmp/Test.java:4: error: cannot find symbol
             case String -> {}
                  ^
  symbol:   variable String
  location: class Test

Could produce an error suggesting there should be a pattern instead of a simple identifier.",,,,,,,,,,,JDK-8270679,JDK-8269712,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2t48z:",9223372036854775807,b29,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4dca67bd,,,,,,,,,"2021-06-30 02:48;roboduke;Changeset: 4ee400ae
Author:    Jan Lahoda <jlahoda@openjdk.org>
Date:      2021-06-30 09:47:22 +0000
URL:       https://git.openjdk.java.net/jdk17/commit/4ee400ae433efbccd71cbebce6847033e76bc949
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
VersionCheck test fails for jextract on Windows,JDK-8268319,5051250,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,jvernee,jvernee,jvernee,2021-06-07 03:39,2021-06-07 05:20,2023-10-01 09:57,2021-06-07 05:20,repo-panama,,,,,,,,tools,,0,foreign-jextract,,,,,,,,,,,,,"The test tools/launcher/VersionCheck fails for jextract on Windows, because the filtering logic to filter out warnings in the output checks that the executable file name is ""jextract"", while on Windows it's ""jextract.exe"". So, the warnings are never filtered",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2t48r:",9223372036854775807,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@2251e2f8,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Missing comma in copyright header,JDK-8268318,5051249,Bug,Closed,JDK,JDK,software,duke,,,P2,Fixed,dholmes,dholmes,dholmes,2021-06-07 03:08,2021-08-05 15:24,2023-10-01 09:57,2021-06-07 03:24,17,,,,,,,17,tools,,0,noreg-trivial,tier1,,,,,,,,,,,,"in test 

test/langtools/jdk/javadoc/doclet/testSerializedForm/SerializedForm.java

- * Copyright (c) 2016, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2016, 2021 Oracle and/or its affiliates. All rights reserved.

in change made by JDK-8149138
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8149138,,,,,,,,,,,,,,,,,,,,,,,,,,17,,,,,,,"0|i2t48j:",9223372036854775807,b26,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@7900061a,,,,,,,Verified,,"2021-06-07 03:24;roboduke;Changeset: 8130be56
Author:    David Holmes <dholmes@openjdk.org>
Date:      2021-06-07 10:23:12 +0000
URL:       https://git.openjdk.java.net/jdk/commit/8130be561b76906be660e6d779839eb197bd7486
;;;","2021-08-05 15:24;dholmes;Build passed after fix.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Typo in JFR jdk.Deserialization event,JDK-8268316,5051243,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,egahlin,ddelabassee,ddelabassee,2021-06-07 02:05,2021-07-15 10:10,2023-10-01 09:57,2021-06-18 15:06,17,,,,,,,17,hotspot,,0,,,,,,,,,,,,,,"There's a small typo in the new (17) JFR jdk.Deserialization event description: *deserialiation*

https://github.com/openjdk/jdk/blob/6d1f3ac74914db662d2a39a5b69d8b8143d2f3ef/src/jdk.jfr/share/classes/jdk/jfr/events/DeserializationEvent.java#L37",NA,,,,,,,,,,JDK-8269062,JDK-8270602,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2t477:",9223372036854775807,b28,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@42995637,,,,,,,,,"2021-06-18 15:06;roboduke;Changeset: b8f073be
Author:    Erik Gahlin <egahlin@openjdk.org>
Date:      2021-06-18 22:05:52 +0000
URL:       https://git.openjdk.java.net/jdk17/commit/b8f073be84b6bf2f83e2a65d20b7eb8c03120dce
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Compilation error with nested generic functional interface,JDK-8268312,5051065,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,vromero,webbuggrp,webbuggrp,2021-06-03 09:22,2022-11-16 10:37,2023-10-01 09:57,2022-07-15 06:09,10,11,14,15,17,9,,20,tools,,0,17ea,dcsad,regression,reproducer-yes,webbug,,,,,,,,,"ADDITIONAL SYSTEM INFORMATION :
OS
WIndows10 2004, Debian 10.9
Java
9, 10, 11, 16, 17-ea

A DESCRIPTION OF THE PROBLEM :
If you nest methods that take a `Function<? Super T, ? Extends T>` as an argument, such as `Optional.map()` or `Stream.map()`, the compiler cannot recognize the type information of the inner method. Refer to the attached source code.

The conditions are a little more complicated.
1. Both outer and inner methods must take `java.util.function.Function` as an argument, such as `map()` or `flatMap()`. If you change the outer method to a method that takes a `java.util.function.Consumer`, such as `ifPresent()`, the issue will not occur.
2. The argument used in a `Function` in the inner `map()` must be the Generic argument of the outer `Function`. If the type of this argument is explicit, this issue will not occur. The important thing is that it must be explicit at the caller, and even if it is explicit at the callee as shown below, compilation will fail.

// Second argument is String
private static <T> T returnGeneric(T generic, String s) { return generic; }

// The error occurs even if you pass the Generic variable to the Second argument
Optional.of("""").map(inner -> returnGeneric("""", outer)).ifPresent(String::toString);

This issue does not occur in Java 8, nor does it occur in Java 9 or later when `-Xdiags:verbose` is added as a javac option. And the issue does not occur while coding in VSCode or IntelliJ.

REGRESSION : Last worked in version 8u291

STEPS TO FOLLOW TO REPRODUCE THE PROBLEM :
Compile the attached source code.

EXPECTED VERSUS ACTUAL BEHAVIOR :
EXPECTED -
Compilation succeeds.
ACTUAL -
Compilation fails. The error message is as follows.

App.java:8: error: incompatible types: invalid method reference
        .ifPresent(String::toString);
                   ^
    method toString in class String cannot be applied to given types
      required: no arguments
      found:    Object
      reason: actual and formal argument lists differ in length
Note: Some messages have been simplified; recompile with -Xdiags:verbose to get full output
1 error

---------- BEGIN SOURCE ----------
import java.util.Optional;

public class App {
  public static void main(String[] args) {
    Optional.of("""").map(outer -> {
      Optional.of("""")
        .map(inner -> returnGeneric(outer))
        .ifPresent(String::toString);
      return """";
    });
  }

  private static <T> T returnGeneric(T generic) {
    return generic;
  }
}

---------- END SOURCE ----------

CUSTOMER SUBMITTED WORKAROUND :
Casting explicitly.

map(inner -> (String) returnGeneric(outer))
or
map(inner -> returnGeneric((String) outer))

FREQUENCY : always


",,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8295988,JDK-8282705,,,,,,,,,,,,,"2021-06-06 22:42;adev;App.java;https://bugs.openjdk.org/secure/attachment/95040/App.java",,,,,,,,,,,generic,,,,,,,9,,generic,,,,,"0|i2t33n:",9223372036854775807,b07,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4dca67bd,,,,,,,,,"2021-06-06 23:43;adev;The reproducer compilation fails with :
App.java:8: error: incompatible types: invalid method reference
        .ifPresent(String::toString);
                   ^
    method toString in class String cannot be applied to given types
      required: no arguments
      found: Object
      reason: actual and formal argument lists differ in length
Note: Some messages have been simplified; recompile with -Xdiags:verbose to get full output
1 error 

However, compilation is successful with -Xdiags:verbose 
Explicitly type casting the argument also compiles successfully:
 map(inner -> (String) returnGeneric(outer)) 
or
 map(inner -> returnGeneric((String) outer)) ;;;","2021-06-07 00:39;adev;If trying to find the class of the outer parameter,
.map(inner -> {System.out.println(outer.getClass().getName());return returnGeneric(outer);})

This prints String.;;;","2021-06-07 00:59;adev;This is a regression. It worked in JDK8-pool.
JDK 8-pool - Pass:
JDK 9 : App.java:8: error: incompatible types: invalid method reference
        .ifPresent(String::toString);
                   ^
    no suitable method found for toString(Object)
        method CharSequence.toString() is not applicable
          (actual and formal argument lists differ in length)
        method Object.toString() is not applicable
          (actual and formal argument lists differ in length)
        method String.toString() is not applicable
          (actual and formal argument lists differ in length)
Note: Some messages have been simplified; recompile with -Xdiags:verbose to get full output

JDK 11 to JDK 17ea :
App.java:8: error: incompatible types: invalid method reference
        .ifPresent(String::toString);
                   ^
    method toString in class String cannot be applied to given types
      required: no arguments
      found: Object
      reason: actual and formal argument lists differ in length
Note: Some messages have been simplified; recompile with -Xdiags:verbose to get full output ;;;","2022-05-17 07:57;vromero;deferring to next release, we think that some more research is needed;;;","2022-07-15 06:09;dukebot;Changeset: f3abb829
Author:    Vicente Romero <vromero@openjdk.org>
Date:      2022-07-15 13:06:03 +0000
URL:       https://git.openjdk.org/jdk/commit/f3abb82989e79da97bcc0a837883be41d14703a3
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Incorrect casts in JfrWriterHost::write for Ticks and Tickspan,JDK-8268303,5051229,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,mgronlun,kbarrett,kbarrett,2021-06-06 19:59,2021-06-10 18:02,2023-10-01 09:57,2021-06-10 01:59,17,,,,,,,17,hotspot,,0,,,,,,,,,,,,,,"These casts in JfrWriterHost<>::write for Ticks and Tickspans are wrong.

./share/jfr/writers/jfrWriterHost.inline.hpp:  
  write((uintptr_t)JfrTime::is_ft_enabled() ? time.ft_value() : time.value());
  write((uintptr_t)JfrTime::is_ft_enabled() ? time.ft_value() : time.value());

First, the cast is on the wrong expression.  The precedence for a cast operator is higher than the precedence for a terniary conditional operator.  Hence, the cast is applied to is_ft_enabled() rather than the terniary operator's value.

Second, the intended type is a representationally common type for the two possible values (either time.ft_value() or time.value()), which can in theory differ, hence the presumed need for a cast.  However, both values are 64bit types, even on a 32bit platform, whereas uintptr_t is a 32bit type on a 32bit platform.  So on a 32bit platform this is narrowing off the high half of the value.

Third, there is a lot of code that assumes the types for ft_value() and value() are sufficiently compatible for the terniary operator to find an appropriate common type. That makes semantic sense, and would fail to compile otherwise.  So the casts aren't needed for that purpose.

Similar issues for the casts when writing JfrTicks and JfrTickspan.

./share/jfr/writers/jfrWriterHost.inline.hpp: 
  write((uintptr_t)time.value());
  write((uintptr_t)time.value());

These casts should be removed.
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2t443:",9223372036854775807,b26,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@42995637,,,,,,,,,"2021-06-08 05:24;mgronlun;[~kbarrett] Thanks Kim for noticing this.;;;","2021-06-10 01:59;roboduke;Changeset: f271eb8b
Author:    Markus Grönlund <mgronlun@openjdk.org>
Date:      2021-06-10 08:58:03 +0000
URL:       https://git.openjdk.java.net/jdk/commit/f271eb8b846692bb45f069cd39ff107231c2812d
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Closed test: compiler/c2/6371167/Test.java fails after JDK-8267904,JDK-8268301,5051227,Bug,Closed,JDK,JDK,software,duke,,,P2,Fixed,hshi,dholmes,dholmes,2021-06-06 19:39,2021-07-15 10:20,2023-10-01 09:57,2021-06-07 19:02,17,,,,,,,17,hotspot,,0,c2,hs-comp-triaged,oracle-triage-11,oracle-triage-17,tencent-interest,tier2,tier6,tier7,,,,,,"Test crashes e.g linux-x64

#
# A fatal error has been detected by the Java Runtime Environment:
#
#  Internal Error (/opt/mach5/mesos/work_dir/slaves/3c846bae-ce30-4a97-93ee-9fef4497ccb6-S79134/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/60083dd7-dace-40c7-88ff-7d671f4e08ee/runs/0bd8516f-8a0d-4af6-a099-69f506e554db/workspace/open/src/hotspot/share/opto/type.hpp:1643), pid=7679, tid=7694
#  assert(_base == Int) failed: Not an Int
#
# JRE version: Java(TM) SE Runtime Environment (17.0+26) (fastdebug build 17-ea+26-LTS-2327)
# Java VM: Java HotSpot(TM) 64-Bit Server VM (fastdebug 17-ea+26-LTS-2327, compiled mode, sharing, tiered, compressed oops, compressed class ptrs, g1 gc, linux-amd64)
# Problematic frame:
# V  [libjvm.so+0x15d59c4]  Parse::array_addressing(BasicType, int, Type const*&)+0x7b4
#
# Core dump will be written. Default location: Core dumps may be processed with ""/opt/core.sh %p"" (or dumping to /opt/mach5/mesos/work_dir/slaves/3c846bae-ce30-4a97-93ee-9fef4497ccb6-S79166/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/eb5de806-c5ed-4679-b804-589ffdaa15c1/runs/943674e3-1e20-4d25-a076-87cd0a0e500a/testoutput/test-support/jtreg_closed_test_hotspot_jtreg_tier2_compiler/scratch/4/core.7679)
#
# If you would like to submit a bug report, please visit:
#   https://bugreport.java.com/bugreport/crash.jsp
#

---------------  S U M M A R Y ------------

Command Line: -Dtest.vm.opts=-XX:MaxRAMPercentage=4.16667 -Djava.io.tmpdir=/opt/mach5/mesos/work_dir/slaves/3c846bae-ce30-4a97-93ee-9fef4497ccb6-S79166/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/eb5de806-c5ed-4679-b804-589ffdaa15c1/runs/943674e3-1e20-4d25-a076-87cd0a0e500a/testoutput/test-support/jtreg_closed_test_hotspot_jtreg_tier2_compiler/tmp -Djavatest.security.noSecurityManager=true -Dtest.tool.vm.opts=-J-XX:MaxRAMPercentage=4.16667 -J-Djava.io.tmpdir=/opt/mach5/mesos/work_dir/slaves/3c846bae-ce30-4a97-93ee-9fef4497ccb6-S79166/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/eb5de806-c5ed-4679-b804-589ffdaa15c1/runs/943674e3-1e20-4d25-a076-87cd0a0e500a/testoutput/test-support/jtreg_closed_test_hotspot_jtreg_tier2_compiler/tmp -J-Djavatest.security.noSecurityManager=true -Dtest.compiler.opts= -Dtest.java.opts=-XX:+CreateCoredumpOnCrash -ea -esa -XX:CompileThreshold=100 -XX:+UnlockExperimentalVMOptions -server -XX:+TieredCompilation -Dtest.jdk=/opt/mach5/mesos/work_dir/jib-master/install/jdk-17+26-2327/linux-x64-debug.jdk/jdk-17/fastdebug -Dcompile.jdk=/opt/mach5/mesos/work_dir/jib-master/install/jdk-17+26-2327/linux-x64-debug.jdk/jdk-17/fastdebug -Dtest.timeout.factor=4.0 -Dtest.nativepath=/opt/mach5/mesos/work_dir/jib-master/install/jdk-17+26-2327/linux-x64-debug.test/hotspot/jtreg/native -Dtest.root=/opt/mach5/mesos/work_dir/jib-master/install/jdk-17+26-2327/src.full/closed/test/hotspot/jtreg -Dtest.name=compiler/c2/6371167/Test.java -Dtest.file=/opt/mach5/mesos/work_dir/jib-master/install/jdk-17+26-2327/src.full/closed/test/hotspot/jtreg/compiler/c2/6371167/Test.java -Dtest.src=/opt/mach5/mesos/work_dir/jib-master/install/jdk-17+26-2327/src.full/closed/test/hotspot/jtreg/compiler/c2/6371167 -Dtest.src.path=/opt/mach5/mesos/work_dir/jib-master/install/jdk-17+26-2327/src.full/closed/test/hotspot/jtreg/compiler/c2/6371167 -Dtest.classes=/opt/mach5/mesos/work_dir/slaves/3c846bae-ce30-4a97-93ee-9fef4497ccb6-S79166/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/eb5de806-c5ed-4679-b804-589ffdaa15c1/runs/943674e3-1e20-4d25-a076-87cd0a0e500a/testoutput/test-support/jtreg_closed_test_hotspot_jtreg_tier2_compiler/classes/5/compiler/c2/6371167/Test.d -Dtest.class.path=/opt/mach5/mesos/work_dir/slaves/3c846bae-ce30-4a97-93ee-9fef4497ccb6-S79166/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/eb5de806-c5ed-4679-b804-589ffdaa15c1/runs/943674e3-1e20-4d25-a076-87cd0a0e500a/testoutput/test-support/jtreg_closed_test_hotspot_jtreg_tier2_compiler/classes/5/compiler/c2/6371167/Test.d -Dtest.class.path.prefix=/opt/mach5/mesos/work_dir/slaves/3c846bae-ce30-4a97-93ee-9fef4497ccb6-S79166/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/eb5de806-c5ed-4679-b804-589ffdaa15c1/runs/943674e3-1e20-4d25-a076-87cd0a0e500a/testoutput/test-support/jtreg_closed_test_hotspot_jtreg_tier2_compiler/classes/5/compiler/c2/6371167/Test.d:/opt/mach5/mesos/work_dir/jib-master/install/jdk-17+26-2327/src.full/closed/test/hotspot/jtreg/compiler/c2/6371167 -XX:MaxRAMPercentage=4.16667 -Djava.io.tmpdir=/opt/mach5/mesos/work_dir/slaves/3c846bae-ce30-4a97-93ee-9fef4497ccb6-S79166/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/eb5de806-c5ed-4679-b804-589ffdaa15c1/runs/943674e3-1e20-4d25-a076-87cd0a0e500a/testoutput/test-support/jtreg_closed_test_hotspot_jtreg_tier2_compiler/tmp -Djavatest.security.noSecurityManager=true -XX:+CreateCoredumpOnCrash -ea -esa -XX:CompileThreshold=100 -XX:+UnlockExperimentalVMOptions -XX:+TieredCompilation -Djava.library.path=/opt/mach5/mesos/work_dir/jib-master/install/jdk-17+26-2327/linux-x64-debug.test/hotspot/jtreg/native -Xcomp -XX:-Inline -XX:CompileOnly=Test_Class_0 com.sun.javatest.regtest.agent.MainWrapper /opt/mach5/mesos/work_dir/slaves/3c846bae-ce30-4a97-93ee-9fef4497ccb6-S79166/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/eb5de806-c5ed-4679-b804-589ffdaa15c1/runs/943674e3-1e20-4d25-a076-87cd0a0e500a/testoutput/test-support/jtreg_closed_test_hotspot_jtreg_tier2_compiler/compiler/c2/6371167/Test.d/main.0.jta

Host: AMD EPYC 7J13 64-Core Processor, 12 cores, 46G, Oracle Linux Server release 7.9
Time: Mon Jun  7 02:23:41 2021 UTC elapsed time: 0.263111 seconds (0d 0h 0m 0s)

---------------  T H R E A D  ---------------

Current thread (0x00007ff1b03cdb50):  JavaThread ""C2 CompilerThread0"" daemon [_thread_in_native, id=7694, stack(0x00007ff185eff000,0x00007ff186000000)]


Current CompileTask:
C2:    263    4    b  4       Test_Class_0::<init> (226 bytes)

Stack: [0x00007ff185eff000,0x00007ff186000000],  sp=0x00007ff185ffc9e0,  free space=1014k
Native frames: (J=compiled Java code, j=interpreted, Vv=VM code, C=native code)
V  [libjvm.so+0x15d59c4]  Parse::array_addressing(BasicType, int, Type const*&)+0x7b4
V  [libjvm.so+0x15d5d0f]  Parse::array_load(BasicType)+0x2f
V  [libjvm.so+0x15e0d31]  Parse::do_one_bytecode()+0xbf1
V  [libjvm.so+0x15ce189]  Parse::do_one_block()+0x619
V  [libjvm.so+0x15cf0a1]  Parse::do_all_blocks()+0x121
V  [libjvm.so+0x15d3b25]  Parse::Parse(JVMState*, ciMethod*, float)+0xb85
V  [libjvm.so+0x84bf80]  ParseGenerator::generate(JVMState*)+0x110
V  [libjvm.so+0xa24872]  Compile::Compile(ciEnv*, ciMethod*, int, bool, bool, bool, bool, DirectiveSet*)+0x1352
V  [libjvm.so+0x84931a]  C2Compiler::compile_method(ciEnv*, ciMethod*, int, bool, DirectiveSet*)+0x1ea
V  [libjvm.so+0xa35469]  CompileBroker::invoke_compiler_on_method(CompileTask*)+0xfb9
V  [libjvm.so+0xa361d8]  CompileBroker::compiler_thread_loop()+0x5a8
V  [libjvm.so+0x18b3b71]  JavaThread::thread_main_inner()+0x271
V  [libjvm.so+0x18bb770]  Thread::call_run()+0x100
V  [libjvm.so+0x158878e]  thread_native_entry(Thread*)+0x10e
",,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8268325,,,JDK-8268302,JDK-8268345,,JDK-8268345,JDK-8267904,JDK-8268362,,JDK-8268325,,,,,,,,,,,,,,,,,,,,,,17,,,,,,,"0|i2t43n:",9223372036854775807,b26,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,Verified,,"2021-06-06 19:59;hshi;Can not see closed test. From carsh stack,  array_addressing's index might not int type. 

110 Node* Parse::array_addressing(BasicType type, int vals, const Type*& elemtype) {
 111   Node *idx   = peek(0+vals);   // Get from stack without popping

 135   // Check for big class initializers with all constant offsets
 136   // feeding into a known-size array.
 137   const TypeInt* idxtype = _gvn.type(idx)->is_int();
;;;","2021-06-06 20:04;hshi;would someone help adding back setting type.
""
_gvn.set_type_bottom(ccast);
"";;;","2021-06-06 20:08;dlong;Sure, I'll try that.  Thanks for the quick response.;;;","2021-06-06 20:55;dlong;[~hshi] This is what I tried, but unfortunately it does not fix the assert:

diff --git a/src/hotspot/share/opto/graphKit.cpp b/src/hotspot/share/opto/graphKit.cpp
index 45454bd74ff..2acfdc3eb19 100644
--- a/src/hotspot/share/opto/graphKit.cpp
+++ b/src/hotspot/share/opto/graphKit.cpp
@@ -3971,6 +3971,9 @@ Node* GraphKit::new_array(Node* klass_node,     // array klass (maybe variable)
   if (map()->find_edge(length) >= 0) {
     Node* ccast = alloc->make_ideal_length(ary_type, &_gvn);
     if (ccast != length) {
+      if (UseNewCode) {
+        _gvn.set_type_bottom(ccast);
+      }
       ccast = _gvn.transform(ccast);
       replace_in_map(length, ccast);
     }
diff --git a/src/hotspot/share/opto/library_call.cpp b/src/hotspot/share/opto/library_call.cpp
index cbbcabbc26c..ba495c68935 100644
--- a/src/hotspot/share/opto/library_call.cpp
+++ b/src/hotspot/share/opto/library_call.cpp
@@ -4506,6 +4506,9 @@ void LibraryCallKit::arraycopy_move_allocation_here(AllocateArrayNode* alloc, No
     if (map()->find_edge(length) >= 0) {
       Node* ccast = alloc->make_ideal_length(ary_type, &_gvn);
       if (ccast != length) {
+        if (UseNewCode2) {
+          _gvn.set_type_bottom(ccast);
+        }
         ccast = _gvn.transform(ccast);
         replace_in_map(length, ccast);
       }

I also tried moving the call to set_type_bottom to after the _gvn.transform(), but then it complains about the type already being set.
I think you should prepare a PR that backs out 8267904 for now.;;;","2021-06-06 21:00;hshi;Sure.  Thanks for helping triaging and testing.;;;","2021-06-06 21:02;hshi;https://github.com/openjdk/jdk/pull/4384 revert is submited;;;","2021-06-06 23:28;roboduke;Changeset: 3e482440
Author:    Hui Shi <hshi@openjdk.org>
Committer: Jie Fu <jiefu@openjdk.org>
Date:      2021-06-07 06:26:47 +0000
URL:       https://git.openjdk.java.net/jdk/commit/3e48244084ef90fb7f46cdfd691ae9f0ecb2de41
;;;","2021-06-07 06:27;dholmes;For future reference if backing out a changeset:

https://openjdk.java.net/guide/index.html#backing-out-a-change;;;","2021-06-07 12:22;dcubed;This [BACKOUT] is integrated in jdk-17+26-2330.;;;","2021-06-08 07:04;hshi;[~dholmes]
Thanks for your direction for backout and I create a REDO issue https://bugs.openjdk.java.net/browse/JDK-8268362.
This is a closed Test is it possible to provides a class and replay data for this issue? Thanks!;;;","2021-06-08 13:53;dlong;[~hshi] I don't think we can share the class file.  Just make sure we test your REDO against our closed tests :-);;;","2021-06-13 05:10;hshi;[~dlong] new PR is submited https://github.com/openjdk/jdk/pull/4480, could you please help trying compiler/c2/6371167/Test.java?

New tests are created. These tests fail in same stack.
test/hotspot/jtreg/compiler/c2/TestNegArrayLengthAsIndex1.java  fail in debug build even without JDK-8267904 fix.
test/hotspot/jtreg/compiler/c2/TestNegArrayLengthAsIndex2.java
;;;",,,,,,,,,,,,,,,,,,,,,,
jvms tag produces incorrect URL,JDK-8268299,5051223,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,darcy,darcy,darcy,2021-06-06 14:55,2021-06-10 17:57,2023-10-01 09:57,2021-06-07 10:05,17,,,,,,,17,infrastructure,,0,noreg-doc,,,,,,,,,,,,,"The URLs produced by the jvms tag used in the JDK build contain a ""jls"" component that should be ""jvms"".",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8268250,,,,JDK-8224166,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2t42r:",9223372036854775807,b26,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@429c566,,,,,,,,,"2021-06-07 10:05;roboduke;Changeset: e663ba96
Author:    Joe Darcy <darcy@openjdk.org>
Date:      2021-06-07 17:03:50 +0000
URL:       https://git.openjdk.java.net/jdk/commit/e663ba961f25c83758815bbfce97a58d9560c7a2
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
jdk/jfr/api/consumer/log/TestVerbosity.java fails: unexpected log message,JDK-8268298,5051222,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,ddong,dholmes,dholmes,2021-06-06 14:55,2023-04-20 00:49,2023-10-01 09:57,2021-07-07 08:47,17,18,,,,,,18,hotspot,,0,intermittent,jdk17u-fix-request,jdk17u-fix-yes,noreg-self,tier5,tier6,,,,,,,,"----------System.out:(11/397)----------
[2.501s][info][jfr,startup] Started recording 1. No limit specified, using maxsize=250MB as default.
[2.501s][info][jfr,startup] 
[2.501s][info][jfr,startup] Use jcmd 692 JFR.dump name=1 filename=FILEPATH to copy recording data to file.
Testing log level: debug
Awaiting... 'CPULoad' 
Found!
Awaiting... 'UserDefined' 
Found!
Awaiting... 'method6' 
Found!
Should not contain: 'method1'
----------System.err:(14/1210)----------
java.lang.Exception: Found unexpected log message: [4.132s][debug][jfr,system,event]     jdk.jfr.api.consumer.log.TestVerbosity.method1() line: 89
	at jdk.jfr.api.consumer.log.LogAnalyzer.shouldNotContain(LogAnalyzer.java:43)
	at jdk.jfr.api.consumer.log.TestVerbosity.main(TestVerbosity.java:79)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at com.sun.javatest.regtest.agent.MainWrapper$MainThread.run(MainWrapper.java:127)
	at java.base/java.lang.Thread.run(Thread.java:833)
",,,,,,,,,,,JDK-8269723,JDK-8305345,JDK-8306491,JDK-8306208,,,,,,,,,,,,,,,,,,,,,,,JDK-8269754,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2t42j:",9223372036854775807,b05,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@42995637,,,,,,,,,"2021-06-14 08:52;egahlin;This looks like a testbug. If method6 is not on top of the stack when CPU sampling occurs, then method1 could be there.;;;","2021-06-29 06:11;dcubed;Here's a log file snippet from the jdk-18+4-97-tier6 sighting:

jdk/jfr/api/consumer/log/TestVerbosity.java 

#section:main
----------messages:(5/421)----------
command: main -Xlog:jfr+event*=debug:file=debug.log -XX:StartFlightRecording jdk.jfr.api.consumer.log.TestVerbosity debug
reason: User specified action: run main/othervm -Xlog:jfr+event*=debug:file=debug.log -XX:StartFlightRecording jdk.jfr.api.consumer.log.TestVerbosity debug 
Mode: othervm [/othervm specified]
Additional options from @modules: --add-modules jdk.jfr,java.management
elapsed time (seconds): 5.637
----------configuration:(3/54)----------
Boot Layer
  add modules: jdk.jfr java.management

----------System.out:(11/398)----------
[2.605s][info][jfr,startup] Started recording 1. No limit specified, using maxsize=250MB as default.
[2.605s][info][jfr,startup] 
[2.605s][info][jfr,startup] Use jcmd 5760 JFR.dump name=1 filename=FILEPATH to copy recording data to file.
Testing log level: debug
Awaiting... 'CPULoad' 
Found!
Awaiting... 'UserDefined' 
Found!
Awaiting... 'method6' 
Found!
Should not contain: 'method1'
----------System.err:(14/1210)----------
java.lang.Exception: Found unexpected log message: [4.435s][debug][jfr,system,event]     jdk.jfr.api.consumer.log.TestVerbosity.method1() line: 89
	at jdk.jfr.api.consumer.log.LogAnalyzer.shouldNotContain(LogAnalyzer.java:43)
	at jdk.jfr.api.consumer.log.TestVerbosity.main(TestVerbosity.java:79)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at com.sun.javatest.regtest.agent.MainWrapper$MainThread.run(MainWrapper.java:127)
	at java.base/java.lang.Thread.run(Thread.java:833)

JavaTest Message: Test threw exception: java.lang.Exception: Found unexpected log message: [4.435s][debug][jfr,system,event]     jdk.jfr.api.consumer.log.TestVerbosity.method1() line: 89
JavaTest Message: shutting down test

STATUS:Failed.`main' threw exception: java.lang.Exception: Found unexpected log message: [4.435s][debug][jfr,system,event] jdk.jfr.api.consumer.log.TestVerbosity.method1() line: 89
----------rerun:(46/5476)*----------;;;","2021-07-07 08:46;dcubed; roboduke Robo Duke added a comment - 6 days ago
Changeset: 06d26208
Author: Denghui Dong <ddong@openjdk.org>
Committer: Yi Yang <yyang@openjdk.org>
Date: 2021-07-01 02:15:19 +0000
URL: https://git.openjdk.java.net/jdk/commit/06d26208c5604c0c640eff4da94ef814c2ebebf0;;;","2021-07-07 08:47;dcubed;Fix was pushed while main bug was targeted to '17'. Reset the main bug to fixed in '18' and copied the Robo Duke entry here.;;;","2023-04-19 06:42;goetz;Fix request [17u]

I backport this for parity with 17.0.8-oracle.
No risk, only a test change.
Clean backport.
Test passes. SAP nightly testing passed.
;;;","2023-04-19 06:55;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/1275
Date: 2023-04-19 13:46:41 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,
jdk/jfr/api/consumer/streaming/TestLatestEvent.java times out,JDK-8268297,5051221,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,egahlin,dholmes,dholmes,2021-06-06 14:52,2022-09-19 07:35,2023-10-01 09:57,2021-12-23 07:04,17,,,,,,,18,hotspot,,0,intermittent,jdk17u-fix-request,jdk17u-fix-yes,tier5,tier6,,,,,,,,,"Dumping repository as a file for inspection at T:\\testoutput\\test-support\\jtreg_open_test_jdk_jdk_jfr\\scratch\\2\\error-not-latest.jfr
----------System.err:(13/893)----------
java.lang.Exception: Timeout 80 s. Expected 6 event, but got 1
	at jdk.jfr.api.consumer.streaming.TestLatestEvent.main(TestLatestEvent.java:109)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at com.sun.javatest.regtest.agent.MainWrapper$MainThread.run(MainWrapper.java:127)
	at java.base/java.lang.Thread.run(Thread.java:833)

JavaTest Message: Test threw exception: java.lang.Exception: Timeout 80 s. Expected 6 event, but got 1
JavaTest Message: shutting down test
",,,,,,,,,,,JDK-8279248,JDK-8279759,JDK-8293698,JDK-8294023,,,,,,,,,,,,,,,,,,,,,,,,,,,"2021-06-13 05:08;egahlin;error-not-latest.jfr;https://bugs.openjdk.org/secure/attachment/95114/error-not-latest.jfr",,,,,,,,,,,,,,,,,,,,,,,,,"0|i2t42b:",9223372036854775807,b30,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@42995637,,,,,,,,,"2021-12-22 21:38;roboduke;A pull request was submitted for review.

URL: https://git.openjdk.java.net/jdk18/pull/68
Date: 2021-12-23 04:51:46 +0000
;;;","2021-12-23 07:04;roboduke;Changeset: 730f6708
Author:    Erik Gahlin <egahlin@openjdk.org>
Date:      2021-12-23 15:03:06 +0000
URL:       https://git.openjdk.java.net/jdk18/commit/730f67081dcda37df7fc40eda99ebd39028be15f
;;;","2022-09-16 04:11;goetz;Fix request [17u]

I backport this for parity with 17.0.6-oracle.
Low risk, jfr coding and a simple change.
Clean backport except for ProblemList.
SAP nightly testing passed.;;;","2022-09-16 04:19;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/687
Date: 2022-09-16 11:10:01 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Tree- and TableCell sub implementations should respect the row editability,JDK-8268295,5051213,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,mhanl,mhanl,mhanl,2021-06-06 05:21,2021-10-01 16:51,2023-10-01 09:57,2021-10-01 05:29,jfx15,jfx16,,,,,,jfx18,javafx,,0,,,,,,,,,,,,,,"The sub implementations of Tree- and TableCell shipped by JavaFX do not respect the row editability (inside startEdit()).
This issue persists also in the standard Tree- and TableCell. (see JDK-8252238)

Affected classes:
- ComboBoxTableCell
- ComboBoxTreeTableCell
- ChoiceBoxTableCell
- ChoiceBoxTreeTableCell
- TextFieldTableCell
- TextFieldTreeTableCell

There are also 2 special cases: CheckBoxTableCell and CheckBoxTreeTableCell.
In this cells the corresponding CheckBox should consider the row editability when the disablement is calculated.
It is also recommended to do a null check before using the row editability.
There is a follow-up for this here: JDK-8270042

--- EXAMPLE ---

---------- BEGIN SOURCE ----------
import javafx.application.Application;
import javafx.scene.Scene;
import javafx.scene.control.TableColumn;
import javafx.scene.control.TableRow;
import javafx.scene.control.TableView;
import javafx.scene.control.cell.TextFieldTableCell;
import javafx.scene.layout.Pane;
import javafx.stage.Stage;

public class TableViewBug extends Application {
    public static void main(String[] args) {
        launch(args);
    }

    @Override
    public void start(Stage primaryStage) {
        TableView<Object> table = new TableView<>();
        table.setEditable(true);
        table.getItems().add(new Object());
        TableColumn<Object, Boolean> column = new TableColumn<>(""Select Me"");
        column.setCellFactory(p -> new TextFieldTableCell<>());
        table.getColumns().add(column);
        table.setRowFactory(p -> {
            TableRow<Object> row = new TableRow<>();
            row.setEditable(false);
            return row;
        });
        Pane root = new Pane();
        root.getChildren().add(table);
        Scene scene = new Scene(root);
        primaryStage.setScene(scene);
        primaryStage.show();
    }
}
---------- END SOURCE ----------

EXPECTED VERSUS ACTUAL BEHAVIOR :
EXPECTED -
TextFieldTableCell should not be editable
ACTUAL -
TextFieldTableCell is editable

---

CUSTOMER SUBMITTED WORKAROUND :
As a temporary workaround, one can use the utility method suggested in https://stackoverflow.com/a/58905149

FREQUENCY : always
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8252238,,,,,,,,,,,,,,,generic,,,,,,,,,generic,,,,,"0|i2t40j:",9223372036854775807,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@67282485,,,,,,,,,"2021-06-18 02:31;fastegal;assuming JDK-8252238 will be fixed for the base classes, this will be (most probably) be fixed for all specialized (except CheckBox, will need extra handling because not using the editing mechanism at all) along with JDK-8188026: its issue is a contract violation of all xxEdit methods (by strengthening preconditions) - with that cleared, they won't do anything except delegate to super first, then update their own editing appearance into editing only if super allowed editing.;;;","2021-10-01 05:29;roboduke;Changeset: 64aa9263
Author:    Marius Hanl <mhanl@openjdk.org>
Committer: Jeanette Winzenburg <fastegal@openjdk.org>
Date:      2021-10-01 12:26:48 +0000
URL:       https://git.openjdk.java.net/jfx/commit/64aa92631fa5aad9293553e8dd174eab647de2f3
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Reusing HttpClient in a WebSocket.Listener hangs.,JDK-8268294,5051202,Bug,Closed,JDK,JDK,software,duke,,,P4,Fixed,michaelm,webbuggrp,webbuggrp,2021-06-05 13:45,2021-11-16 12:19,2023-10-01 09:57,2021-06-17 00:14,11,17,,,,,,18,core-libs,,0,17ea,additional-information-received,dcsaw,jdk17u-fix-request,jdk17u-fix-SQE-ok,jdk17u-fix-yes,reproducer-yes,webbug,,,,,,"ADDITIONAL SYSTEM INFORMATION :
Macos/java 11,17 ( current state on github)
Linux 11

A DESCRIPTION OF THE PROBLEM :
Performing an http request in a WebSocket.Listener onText method with the same httpclient used to build the websocket client itself results hangs.

STEPS TO FOLLOW TO REPRODUCE THE PROBLEM :
Please run the test attached. It performs the follwing steps:
1. create an httpclient
2. use the httpclient to create a websocket client
3. has the httpclient send an http request when the websocket client receive data
4. has the websocket server send data to the client

EXPECTED VERSUS ACTUAL BEHAVIOR :
EXPECTED -
The httpclient successfully perform the http request. 
If an unbounded executor is provided to the httpclient, the websocket client should use it to process incoming data.
ACTUAL -
the httpclient cannot peform the http request as it is waiting for the thread processing the incoming websocket data to be free 

---------- BEGIN SOURCE ----------
/**
 * This test use two publicly available services;
 * 1. echo.websocket.org - which returns the data sent by the websocket client connected to it
 * 2. httpbin.org/get - return the data retated to the request itself ( parameter, etc )
 */

import java.net.URI;
import java.net.http.HttpClient;
import java.net.http.HttpRequest;
import java.net.http.HttpResponse;
import java.net.http.WebSocket;
import java.util.Optional;
import java.util.concurrent.CompletionStage;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.atomic.AtomicReference;
import java.util.function.Consumer;
import java.util.logging.Logger;

public class TestClient {

    private static final Logger LOG = Logger.getLogger(""test"");

    public static void main(String[] args) throws InterruptedException {

        ExecutorService executorService = Executors.newCachedThreadPool();
        HttpClient httpClient = HttpClient.newBuilder().executor(executorService).build();

        WsApiClient wsApiClient = new WsApiClient(httpClient, ""ws://echo.websocket.org"");
        HttpApiClient httpApiClient = new HttpApiClient(httpClient, ""http://httpbin.org/get"");

        AtomicReference<String> result = new AtomicReference<>(""failed"");

        wsApiClient.listen(message -> httpApiClient.getData(message).map(s -> ""succeeded"").ifPresent(result::set));

        wsApiClient.sendData(""TEST_DATA"");

        LOG.info(""Wait some time"");
        Thread.sleep(3_000);

        executorService.shutdownNow();

        LOG.info(""Result: test "" + result.get());
    }

    static class WsApiClient {
        final HttpClient httpClient;
        final String server;
        WebSocket webSocket;

        WsApiClient(HttpClient httpClient, String server) {
            this.httpClient = httpClient;
            this.server = server;
        }

        public void listen(Consumer<String> consumer) {
            LOG.info(""WS API client - Start listening for incoming messages"");
            URI uri = URI.create(server);
            webSocket = httpClient.newWebSocketBuilder()
                .buildAsync(uri, new WebSocket.Listener() {
                    @Override
                    public CompletionStage<?> onText(WebSocket webSocket, CharSequence data, boolean last) {
                        LOG.info(""WS API client - received data: "" + data);
                        consumer.accept(data.toString());
                        return null;
                    }
                }).join();
        }

        void sendData(String data) {
            LOG.info(""WS API client - sending data via WebSocket: {}"" + data);
            webSocket.sendText(data, true).join();
        }
    }

    static class HttpApiClient {
        final HttpClient httpClient;
        final String baseUrl;

        HttpApiClient(HttpClient httpClient, String baseUrl) {
            this.httpClient = httpClient;
            this.baseUrl = baseUrl;
        }

        private Optional<String> getData(String data) {
            try {
                URI uri = URI.create(baseUrl + ""?param="" + data);
                HttpRequest request = HttpRequest.newBuilder().GET().uri(uri).build();
                LOG.info(""Http API Client - send HTTP GET request with parameter {}"" + data);
                HttpResponse<String> send = httpClient.send(request, HttpResponse.BodyHandlers.ofString());
                Optional<String> responseData = Optional.ofNullable(send.body());
                responseData.ifPresent(s -> LOG.info(""Http API Client - response for HTTP GET request received""));
                return responseData;
            } catch (Exception e) {
                LOG.warning(""Http API Client - Error getting data: ""  + e.getMessage());
            }
            return Optional.empty();
        }
    }
}

---------- END SOURCE ----------

CUSTOMER SUBMITTED WORKAROUND :
We have no control in our code over these low level components, so we introduce separate threads (executor) to handle these cases.

Note that modifying the jdk to have the httpclient's executor passed to the WebSocketImpl and have it passed to the underlying task scheduler runOrSchedule method also works.

https://github.com/openjdk/jdk/blob/b05c40ca3b5fd34cbbc7a9479b108a4ff2c099f1/src/java.net.http/share/classes/jdk/internal/net/http/websocket/WebSocketImpl.java#L705

Not sure why the capability of the scheduler using an executor is left unused in the websocket implementation. 

FREQUENCY : always


",,,,,,,,,,,JDK-8277275,JDK-8277154,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"2021-06-06 04:18;tongwan;TestClient.java;https://bugs.openjdk.org/secure/attachment/95038/TestClient.java",,,,,,,,,,,,,,,,,,,,,,,,,"0|i2t3y3:",9223372036854775807,b03,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@446e124a,,,,,,,Verified,,"2021-06-06 04:20;tongwan;The observations on Windows 10:
JDK 11: Failed, test failed.
JDK 17ea+6: Failed.;;;","2021-06-14 14:52;michaelm;The websocket callbacks seem to occur on the selector manager thread which from the stack trace extract below a blocking HTTP send call then occurs.

""HttpClient-1-SelectorManager"" #15 daemon prio=5 os_prio=31 cpu=13.94ms elapsed=9.43s tid=0x00007f8c2c824200 nid=0x9603 waiting on condition  [0x000070000a3b8000]
   java.lang.Thread.State: WAITING (parking)
        at jdk.internal.misc.Unsafe.park(java.base@17-internal/Native Method)
        - parking to wait for  <0x000000061f713fe8> (a java.util.concurrent.CompletableFuture$Signaller)
        at java.util.concurrent.locks.LockSupport.park(java.base@17-internal/LockSupport.java:211)
        at java.util.concurrent.CompletableFuture$Signaller.block(java.base@17-internal/CompletableFuture.java:1864)
        at java.util.concurrent.ForkJoinPool.unmanagedBlock(java.base@17-internal/ForkJoinPool.java:3463)
        at java.util.concurrent.ForkJoinPool.managedBlock(java.base@17-internal/ForkJoinPool.java:3434)
        at java.util.concurrent.CompletableFuture.waitingGet(java.base@17-internal/CompletableFuture.java:1898)
        at java.util.concurrent.CompletableFuture.get(java.base@17-internal/CompletableFuture.java:2072)
        at jdk.internal.net.http.HttpClientImpl.send(java.net.http@17-internal/HttpClientImpl.java:553)
        at jdk.internal.net.http.HttpClientFacade.send(java.net.http@17-internal/HttpClientFacade.java:119)
        at TestClient$HttpApiClient.getData(TestClient.java:93)
        at TestClient.lambda$main$1(TestClient.java:35)
        at TestClient$$Lambda$90/0x0000000800cc4800.accept(Unknown Source)
        at TestClient$WsApiClient$1.onText(TestClient.java:64)
        at jdk.internal.net.http.websocket.WebSocketImpl$ReceiveTask.processText(java.net.http@17-internal/WebSocketImpl.java:627)
        at jdk.internal.net.http.websocket.WebSocketImpl$ReceiveTask.run(java.net.http@17-internal/WebSocketImpl.java:435)
        at jdk.internal.net.http.common.SequentialScheduler$CompleteRestartableTask.run(java.net.http@17-internal/SequentialScheduler.java:149)
        at jdk.internal.net.http.common.SequentialScheduler$SchedulableTask.run(java.net.http@17-internal/SequentialScheduler.java:230)
        at jdk.internal.net.http.common.SequentialScheduler.runOrSchedule(java.net.http@17-internal/SequentialScheduler.java:303)
        at jdk.internal.net.http.common.SequentialScheduler.runOrSchedule(java.net.http@17-internal/SequentialScheduler.java:256)
        at jdk.internal.net.http.websocket.WebSocketImpl.tryChangeState(java.net.http@17-internal/WebSocketImpl.java:853)
        at jdk.internal.net.http.websocket.WebSocketImpl$SignallingMessageConsumer.onText(java.net.http@17-internal/WebSocketImpl.java:786)
        at jdk.internal.net.http.websocket.MessageDecoder.payloadData(java.net.http@17-internal/MessageDecoder.java:242)
        at jdk.internal.net.http.websocket.Frame$Reader.readFrame(java.net.http@17-internal/Frame.java:465)
        at jdk.internal.net.http.websocket.TransportImpl$ReceiveTask.run(java.net.http@17-internal/TransportImpl.java:669)
        at jdk.internal.net.http.common.SequentialScheduler$CompleteRestartableTask.run(java.net.http@17-internal/SequentialScheduler.java:149)
        at jdk.internal.net.http.common.SequentialScheduler$SchedulableTask.run(java.net.http@17-internal/SequentialScheduler.java:230)
        at jdk.internal.net.http.common.SequentialScheduler.runOrSchedule(java.net.http@17-internal/SequentialScheduler.java:303)
        at jdk.internal.net.http.common.SequentialScheduler.runOrSchedule(java.net.http@17-internal/SequentialScheduler.java:256)
        at jdk.internal.net.http.websocket.TransportImpl$ReadEvent.handle(java.net.http@17-internal/TransportImpl.java:766)
        at jdk.internal.net.http.RawChannelTube$ReadSubscriber.checkEvents(java.net.http@17-internal/RawChannelTube.java:174)
        at jdk.internal.net.http.RawChannelTube$ReadSubscriber.onNext(java.net.http@17-internal/RawChannelTube.java:204)
        at jdk.internal.net.http.RawChannelTube$ReadSubscriber.onNext(java.net.http@17-internal/RawChannelTube.java:157)
        at jdk.internal.net.http.SocketTube$InternalReadPublisher$InternalReadSubscription.read(java.net.http@17-internal/SocketTube.java:857)
        at jdk.internal.net.http.SocketTube$InternalReadPublisher$InternalReadSubscription$$Lambda$129/0x0000000800cd86b0.run(java.net.http@17-internal/Unknown Source)
        at jdk.internal.net.http.SocketTube$SocketFlowTask.run(java.net.http@17-internal/SocketTube.java:181)
        at jdk.internal.net.http.common.SequentialScheduler$SchedulableTask.run(java.net.http@17-internal/SequentialScheduler.java:230)
        at jdk.internal.net.http.common.SequentialScheduler.runOrSchedule(java.net.http@17-internal/SequentialScheduler.java:303)
        at jdk.internal.net.http.common.SequentialScheduler.runOrSchedule(java.net.http@17-internal/SequentialScheduler.java:256)
        at jdk.internal.net.http.SocketTube$InternalReadPublisher$InternalReadSubscription.signalReadable(java.net.http@17-internal/SocketTube.java:774)
        at jdk.internal.net.http.SocketTube$InternalReadPublisher$ReadEvent.signalEvent(java.net.http@17-internal/SocketTube.java:957)
        at jdk.internal.net.http.SocketTube$SocketFlowEvent.handle(java.net.http@17-internal/SocketTube.java:253)
        at jdk.internal.net.http.HttpClientImpl$SelectorManager.handleEvent(java.net.http@17-internal/HttpClientImpl.java:979)
        at jdk.internal.net.http.HttpClientImpl$SelectorManager.lambda$run$3(java.net.http@17-internal/HttpClientImpl.java:934)
        at jdk.internal.net.http.HttpClientImpl$SelectorManager$$Lambda$162/0x0000000800ce0b30.accept(java.net.http@17-internal/Unknown Source)
        at java.util.ArrayList.forEach(java.base@17-internal/ArrayList.java:1511)
        at jdk.internal.net.http.HttpClientImpl$SelectorManager.run(java.net.http@17-internal/HttpClientImpl.java:934)
;;;","2021-06-17 00:14;roboduke;Changeset: 2d088fa9
Author:    Michael McMahon <michaelm@openjdk.org>
Date:      2021-06-17 07:13:59 +0000
URL:       https://git.openjdk.java.net/jdk/commit/2d088fa91d18252a801db3b84ff87e261d63ebd4
;;;","2021-06-17 03:02;michaelm;A workaround for this issue is to avoid blocking calls in the WebSocket listener (eg onText) implementation. So, in the supplied test case the listener should call HttpClient.sendAsync and then later handle completion of the returned CompletableFuture outside the listener.;;;","2021-06-30 04:44;tongwan;Requested the submitter verify the fix with latest version of JDK 18 from https://jdk.java.net/18/;;;","2021-06-30 17:25;tongwan;From the submitter:
I tried to run it against our test suite, it worked properly.
It will take some time to have this working in a more realistic setup, but I'll come back to you if we find any issue!

Thank you for the prompt fix!
;;;","2021-11-11 08:23;akasko;Fix request (17u)

Clean backport of the WebSocket fix.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,
VectorAPI cast operation on mask and shuffle is broken,JDK-8268293,5051212,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,jbhateja,jbhateja,jbhateja,2021-06-06 03:15,2021-07-15 10:11,2023-10-01 09:57,2021-06-21 18:32,,,,,,,,17,hotspot,,0,,,,,,,,,,,,,,"1) Fix the java side implementation of VectorMask.cast and VectorShuffle.cast.
2) Add jtreg tests for both these operations.",,,,,,,,,,,JDK-8269190,JDK-8270611,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2t40b:",9223372036854775807,b28,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@11336cca,,,,,,,,,"2021-06-21 18:32;roboduke;Changeset: 4099810b
Author:    Jatin Bhateja <jbhateja@openjdk.org>
Date:      2021-06-22 01:31:48 +0000
URL:       https://git.openjdk.java.net/jdk17/commit/4099810b290d90c4c928e66c601744911b770f24
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
compiler/intrinsics/VectorizedMismatchTest.java fails with release VMs,JDK-8268292,5051210,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,jiefu,jiefu,jiefu,2021-06-06 02:01,2021-06-10 17:55,2023-10-01 09:57,2021-06-06 06:54,17,,,,,,,17,hotspot,,0,hs-comp-triaged,noreg-self,oracle-triage-17,tencent-interest,tier6,,,,,,,,,"STDERR:
Error: VM option 'AVX3Threshold' is diagnostic and must be enabled via -XX:+UnlockDiagnosticVMOptions.
Error: The unlock option must precede 'AVX3Threshold'.
Error: Could not create the Java Virtual Machine.
Error: A fatal exception has occurred. Program will exit.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8266951,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2t3zv:",9223372036854775807,b26,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2021-06-06 06:54;roboduke;Changeset: 52d88ee1
Author:    Jie Fu <jiefu@openjdk.org>
Date:      2021-06-06 13:53:29 +0000
URL:       https://git.openjdk.java.net/jdk/commit/52d88ee1d1e0f6b9927db03a2b0bff75e4be03a2
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
build failure due to missing signed flag in x86 evcmpb instruction,JDK-8268289,5051200,Bug,Resolved,JDK,JDK,software,duke,,,P1,Fixed,jbhateja,jbhateja,jbhateja,2021-06-05 12:25,2021-07-05 23:44,2023-10-01 09:57,2021-06-05 19:37,17,,,,,,,17,hotspot,,0,c2,hs-comp-triaged,noreg-build,oracle-triage-11,oracle-triage-17,,,,,,,,,"Code introduced with PR/3999

",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8266951,,,,,,,,,,,,,,,x86,,,,,,,,,,,,,,"0|i2t3xn:",9223372036854775807,b26,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2021-06-05 19:37;roboduke;Changeset: 8abf36c6
Author:    Jatin Bhateja <jbhateja@openjdk.org>
Date:      2021-06-06 02:31:18 +0000
URL:       https://git.openjdk.java.net/jdk/commit/8abf36c6484bca20d1c31476f4d6f553aeeadb27
;;;","2021-06-07 00:20;chagedorn;ILW = Build failure = P1;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
"jdk/jfr/api/consumer/streaming/TestOutOfProcessMigration.java fails with ""Error: ShouldNotReachHere()""",JDK-8268288,5051198,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,ccheung,dcubed,dcubed,2021-06-05 09:48,2023-03-28 05:09,2023-10-01 09:57,2021-12-03 08:37,17,18,,,,,,18,hotspot,,0,cds,intermittent,jdk17u-fix-request,jdk17u-fix-yes,tier5,tier8,,,,,,,,"The following test failed in the JDK17 CI:

jdk/jfr/api/consumer/streaming/TestOutOfProcessMigration.java

Here's a snippet from the log file:

#section:main
----------messages:(5/373)----------
command: main jdk.jfr.api.consumer.streaming.TestOutOfProcessMigration
reason: User specified action: run main/othervm jdk.jfr.api.consumer.streaming.TestOutOfProcessMigration 
Mode: othervm [/othervm specified]
Additional options from @modules: --add-modules jdk.jfr,jdk.attach,java.base --add-exports java.base/jdk.internal.misc=ALL-UNNAMED
elapsed time (seconds): 9.203
----------configuration:(4/112)----------
Boot Layer
  add modules: jdk.jfr jdk.attach java.base 
  add exports: java.base/jdk.internal.misc ALL-UNNAMED

----------System.out:(27/6041)----------
Command line: [/opt/mach5/mesos/work_dir/jib-master/install/jdk-17+26-2316/linux-x64-debug.jdk/jdk-17/fastdebug/bin/java -cp /opt/mach5/mesos/work_dir/slaves/3c846bae-ce30-4a97-93ee-9fef4497ccb6-S107341/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/e15ef604-34b9-40ec-8043-5372b1f7280e/runs/5fb1cfae-76c6-42cf-b7fd-725996530732/testoutput/test-support/jtreg_open_test_jdk_jdk_svc/classes/2/jdk/jfr/api/consumer/streaming/TestOutOfProcessMigration.d:/opt/mach5/mesos/work_dir/jib-master/install/jdk-17+26-2316/src.full/open/test/jdk/jdk/jfr/api/consumer/streaming:/opt/mach5/mesos/work_dir/slaves/3c846bae-ce30-4a97-93ee-9fef4497ccb6-S107341/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/e15ef604-34b9-40ec-8043-5372b1f7280e/runs/5fb1cfae-76c6-42cf-b7fd-725996530732/testoutput/test-support/jtreg_open_test_jdk_jdk_svc/classes/2/test/lib:/opt/mach5/mesos/work_dir/jib-master/install/jdk-17+26-2316/src.full/open/test/lib:/opt/mach5/mesos/work_dir/slaves/3c846bae-ce30-4a97-93ee-9fef4497ccb6-S107341/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/e15ef604-34b9-40ec-8043-5372b1f7280e/runs/5fb1cfae-76c6-42cf-b7fd-725996530732/testoutput/test-support/jtreg_open_test_jdk_jdk_svc/classes/2/test/jdk:/opt/mach5/mesos/work_dir/jib-master/install/jdk-17+26-2316/src.full/open/test/jdk:/opt/mach5/mesos/work_dir/jib-master/install/jtreg/6/1/bundles/jtreg-6+1.zip/jtreg/lib/javatest.jar:/opt/mach5/mesos/work_dir/jib-master/install/jtreg/6/1/bundles/jtreg-6+1.zip/jtreg/lib/jtreg.jar --add-exports java.base/jdk.internal.misc=ALL-UNNAMED -XX:StartFlightRecording:settings=none jdk.jfr.api.consumer.streaming.TestProcess /opt/mach5/mesos/work_dir/slaves/3c846bae-ce30-4a97-93ee-9fef4497ccb6-S107341/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/e15ef604-34b9-40ec-8043-5372b1f7280e/runs/5fb1cfae-76c6-42cf-b7fd-725996530732/testoutput/test-support/jtreg_open_test_jdk_jdk_svc/scratch/1/action-1622906949009 ]
[application]:/opt/mach5/mesos/work_dir/jib-master/install/jdk-17+26-2316/linux-x64-debug.jdk/jdk-17/fastdebug/bin/java -cp /opt/mach5/mesos/work_dir/slaves/3c846bae-ce30-4a97-93ee-9fef4497ccb6-S107341/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/e15ef604-34b9-40ec-8043-5372b1f7280e/runs/5fb1cfae-76c6-42cf-b7fd-725996530732/testoutput/test-support/jtreg_open_test_jdk_jdk_svc/classes/2/jdk/jfr/api/consumer/streaming/TestOutOfProcessMigration.d:/opt/mach5/mesos/work_dir/jib-master/install/jdk-17+26-2316/src.full/open/test/jdk/jdk/jfr/api/consumer/streaming:/opt/mach5/mesos/work_dir/slaves/3c846bae-ce30-4a97-93ee-9fef4497ccb6-S107341/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/e15ef604-34b9-40ec-8043-5372b1f7280e/runs/5fb1cfae-76c6-42cf-b7fd-725996530732/testoutput/test-support/jtreg_open_test_jdk_jdk_svc/classes/2/test/lib:/opt/mach5/mesos/work_dir/jib-master/install/jdk-17+26-2316/src.full/open/test/lib:/opt/mach5/mesos/work_dir/slaves/3c846bae-ce30-4a97-93ee-9fef4497ccb6-S107341/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/e15ef604-34b9-40ec-8043-5372b1f7280e/runs/5fb1cfae-76c6-42cf-b7fd-725996530732/testoutput/test-support/jtreg_open_test_jdk_jdk_svc/classes/2/test/jdk:/opt/mach5/mesos/work_dir/jib-master/install/jdk-17+26-2316/src.full/open/test/jdk:/opt/mach5/mesos/work_dir/jib-master/install/jtreg/6/1/bundles/jtreg-6+1.zip/jtreg/lib/javatest.jar:/opt/mach5/mesos/work_dir/jib-master/install/jtreg/6/1/bundles/jtreg-6+1.zip/jtreg/lib/jtreg.jar --add-exports java.base/jdk.internal.misc=ALL-UNNAMED -XX:StartFlightRecording:settings=none jdk.jfr.api.consumer.streaming.TestProcess /opt/mach5/mesos/work_dir/slaves/3c846bae-ce30-4a97-93ee-9fef4497ccb6-S107341/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/e15ef604-34b9-40ec-8043-5372b1f7280e/runs/5fb1cfae-76c6-42cf-b7fd-725996530732/testoutput/test-support/jtreg_open_test_jdk_jdk_svc/scratch/1/action-1622906949009
[application] # To suppress the following error report, specify this argument
[application] # after -XX: or in .hotspotrc:  SuppressErrorAt=/classLoader.hpp:129
[application] #
[application] # A fatal error has been detected by the Java Runtime Environment:
[application] #
[application] #  Internal Error (/opt/mach5/mesos/work_dir/slaves/3c846bae-ce30-4a97-93ee-9fef4497ccb6-S79034/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/f77f03ff-67bd-4697-aabc-5cb3b2081897/runs/39430ab1-20b6-4ab0-ba1f-0f9cd8ca1eae/workspace/open/src/hotspot/share/classfile/classLoader.hpp:129), pid=1727991, tid=1727992
[application] #  Error: ShouldNotReachHere()
[application] #
[application] # JRE version: Java(TM) SE Runtime Environment (17.0+26) (fastdebug build 17-ea+26-LTS-2316)
[application] # Java VM: Java HotSpot(TM) 64-Bit Server VM (fastdebug 17-ea+26-LTS-2316, mixed mode, sharing, tiered, compressed oops, compressed class ptrs, g1 gc, linux-amd64)
[application] # Problematic frame:
[application] # V  [libjvm.so+0x9923dd]  ClassPathImageEntry::~ClassPathImageEntry()+0x2d
[application] #
[application] # Core dump will be written. Default location: /opt/mach5/mesos/work_dir/slaves/3c846bae-ce30-4a97-93ee-9fef4497ccb6-S107341/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/e15ef604-34b9-40ec-8043-5372b1f7280e/runs/5fb1cfae-76c6-42cf-b7fd-725996530732/testoutput/test-support/jtreg_open_test_jdk_jdk_svc/scratch/1/core
[application] #
[application] # An error report file with more information is saved as:
[application] # /opt/mach5/mesos/work_dir/slaves/3c846bae-ce30-4a97-93ee-9fef4497ccb6-S107341/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/e15ef604-34b9-40ec-8043-5372b1f7280e/runs/5fb1cfae-76c6-42cf-b7fd-725996530732/testoutput/test-support/jtreg_open_test_jdk_jdk_svc/scratch/1/hs_err_pid1727991.log
[application] #
[application] # If you would like to submit a bug report, please visit:
[application] #   https://bugreport.java.com/bugreport/crash.jsp
[application] #
Attach failed: Premature EOF
Retrying...
Attach failed: No such process
Retrying...
----------System.err:(15/1136)----------
java.lang.RuntimeException: Process (pid = 1727991) is no longer alive, exit value = 134
	at jdk.test.lib.jfr.StreamingUtils.getJfrRepository(StreamingUtils.java:48)
	at jdk.jfr.api.consumer.streaming.TestProcess.getRepository(TestProcess.java:94)
	at jdk.jfr.api.consumer.streaming.TestOutOfProcessMigration.main(TestOutOfProcessMigration.java:50)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at com.sun.javatest.regtest.agent.MainWrapper$MainThread.run(MainWrapper.java:127)
	at java.base/java.lang.Thread.run(Thread.java:833)

JavaTest Message: Test threw exception: java.lang.RuntimeException: Process (pid = 1727991) is no longer alive, exit value = 134
JavaTest Message: shutting down test

STATUS:Failed.`main' threw exception: java.lang.RuntimeException: Process (pid = 1727991) is no longer alive, exit value = 134
----------rerun:(42/8187)*----------


Here's the crashing thread's stack:

---------------  T H R E A D  ---------------

Current thread (0x00007f6124029680):  JavaThread ""main"" [_thread_in_vm, id=1727992, stack(0x00007f612a7cc000,0x00007f612a8cd000)]

Stack: [0x00007f612a7cc000,0x00007f612a8cd000],  sp=0x00007f612a8c9d10,  free space=1015k
Native frames: (J=compiled Java code, j=interpreted, Vv=VM code, C=native code)
V  [libjvm.so+0x9923dd]  ClassPathImageEntry::~ClassPathImageEntry()+0x2d
V  [libjvm.so+0xbcd0b3]  FileMapInfo::get_classpath_entry_for_jvmti(int, JavaThread*)+0x103
V  [libjvm.so+0xbd2233]  FileMapInfo::open_stream_for_jvmti(InstanceKlass*, Handle, JavaThread*)+0x43
V  [libjvm.so+0x1225be5]  KlassFactory::check_shared_class_file_load_hook(InstanceKlass*, Symbol*, Handle, Handle, ClassFileStream const*, JavaThread*)+0x2a5
V  [libjvm.so+0x184e6ad]  SystemDictionary::load_shared_class(InstanceKlass*, Handle, Handle, ClassFileStream const*, PackageEntry*, JavaThread*)+0xed
V  [libjvm.so+0x184ef34]  SystemDictionary::load_instance_class_impl(Symbol*, Handle, JavaThread*)+0x4e4
V  [libjvm.so+0x184cf88]  SystemDictionary::load_instance_class(unsigned int, Symbol*, Handle, JavaThread*)+0x28
V  [libjvm.so+0x184d83d]  SystemDictionary::resolve_instance_class_or_null(Symbol*, Handle, Handle, JavaThread*)+0x77d
V  [libjvm.so+0x184f5ca]  SystemDictionary::resolve_or_fail(Symbol*, Handle, Handle, bool, JavaThread*)+0x2a
V  [libjvm.so+0xa6c813]  ConstantPool::klass_at_impl(constantPoolHandle const&, int, JavaThread*)+0x1d3
V  [libjvm.so+0xe6705c]  InterpreterRuntime::_new(JavaThread*, ConstantPool*, int)+0x8c
j  jdk.jfr.internal.SecuritySupport.createRecorderThread(Ljava/lang/ThreadGroup;Ljava/lang/ClassLoader;)Ljava/lang/Thread;+12 jdk.jfr@17-ea
j  jdk.jfr.internal.JVMUpcalls.createRecorderThread(Ljava/lang/ThreadGroup;Ljava/lang/ClassLoader;)Ljava/lang/Thread;+2 jdk.jfr@17-ea
v  ~StubRoutines::call_stub
V  [libjvm.so+0xe7a564]  JavaCalls::call_helper(JavaValue*, methodHandle const&, JavaCallArguments*, JavaThread*)+0x504
V  [libjvm.so+0xe7b6fb]  JavaCalls::call_static(JavaValue*, Klass*, Symbol*, Symbol*, JavaCallArguments*, JavaThread*)+0x31b
V  [libjvm.so+0xee3adf]  JfrJavaCall::call_static(JfrJavaArguments*, JavaThread*)+0x3ff
V  [libjvm.so+0xf39221]  JfrRecorderThread::start(JfrCheckpointManager*, JfrPostBox*, JavaThread*)+0xe1
V  [libjvm.so+0xf2f43d]  JfrRecorder::create(bool)+0x4d
V  [libjvm.so+0xef358f]  jfr_create_jfr+0x43f
j  jdk.jfr.internal.JVM.createJFR(Z)Z+0 jdk.jfr@17-ea
j  jdk.jfr.internal.JVM.createNativeJFR()V+3 jdk.jfr@17-ea
j  jdk.jfr.internal.PlatformRecorder.<init>()V+48 jdk.jfr@17-ea
j  jdk.jfr.FlightRecorder.getFlightRecorder()Ljdk/jfr/FlightRecorder;+25 jdk.jfr@17-ea
j  jdk.jfr.Recording.<init>(Ljava/util/Map;)V+14 jdk.jfr@17-ea
j  jdk.jfr.Recording.<init>()V+4 jdk.jfr@17-ea
j  jdk.jfr.internal.dcmd.DCmdStart.execute(Ljava/lang/String;[Ljava/lang/String;Ljava/lang/Long;Ljava/lang/Long;Ljava/lang/Boolean;Ljava/lang/String;Ljava/lang/Long;Ljava/lang/Long;Ljava/lang/Long;Ljava/lang/Boolean;Ljava/lang/Boolean;)[Ljava/lang/String;+494 jdk.jfr@17-ea
v  ~StubRoutines::call_stub
V  [libjvm.so+0xe7a564]  JavaCalls::call_helper(JavaValue*, methodHandle const&, JavaCallArguments*, JavaThread*)+0x504
V  [libjvm.so+0xe7ae14]  JavaCalls::call_virtual(JavaValue*, Klass*, Symbol*, Symbol*, JavaCallArguments*, JavaThread*)+0x4b4
V  [libjvm.so+0xee4b61]  JfrJavaCall::call_virtual(JfrJavaArguments*, JavaThread*)+0x411
V  [libjvm.so+0xecef80]  JfrStartFlightRecordingDCmd::execute(DCmdSource, JavaThread*)+0xe10
V  [libjvm.so+0xf2f755]  JfrRecorder::on_create_vm_3()+0x145
V  [libjvm.so+0xeaca59]  Jfr::on_create_vm_3()+0x9
V  [libjvm.so+0x18ba3e7]  Threads::create_vm(JavaVMInitArgs*, bool*)+0x907
V  [libjvm.so+0xfb5c18]  JNI_CreateJavaVM+0x98
C  [libjli.so+0x3b3f]  JavaMain+0x8f
C  [libjli.so+0x7d19]  ThreadJavaMain+0x9

Java frames: (J=compiled Java code, j=interpreted, Vv=VM code)
j  jdk.jfr.internal.SecuritySupport.createRecorderThread(Ljava/lang/ThreadGroup;Ljava/lang/ClassLoader;)Ljava/lang/Thread;+12 jdk.jfr@17-ea
j  jdk.jfr.internal.JVMUpcalls.createRecorderThread(Ljava/lang/ThreadGroup;Ljava/lang/ClassLoader;)Ljava/lang/Thread;+2 jdk.jfr@17-ea
v  ~StubRoutines::call_stub
j  jdk.jfr.internal.JVM.createJFR(Z)Z+0 jdk.jfr@17-ea
j  jdk.jfr.internal.JVM.createNativeJFR()V+3 jdk.jfr@17-ea
j  jdk.jfr.internal.PlatformRecorder.<init>()V+48 jdk.jfr@17-ea
j  jdk.jfr.FlightRecorder.getFlightRecorder()Ljdk/jfr/FlightRecorder;+25 jdk.jfr@17-ea
j  jdk.jfr.Recording.<init>(Ljava/util/Map;)V+14 jdk.jfr@17-ea
j  jdk.jfr.Recording.<init>()V+4 jdk.jfr@17-ea
j  jdk.jfr.internal.dcmd.DCmdStart.execute(Ljava/lang/String;[Ljava/lang/String;Ljava/lang/Long;Ljava/lang/Long;Ljava/lang/Boolean;Ljava/lang/String;Ljava/lang/Long;Ljava/lang/Long;Ljava/lang/Long;Ljava/lang/Boolean;Ljava/lang/Boolean;)[Ljava/lang/String;+494 jdk.jfr@17-ea
v  ~StubRoutines::call_stub


Here's an unresolved bug for the same test:

JDK-8266408 jdk/jfr/api/consumer/streaming/TestOutOfProcessMigration.java failed with ""RuntimeException: Process (pid = NNNN) is no longer alive, exit value = 131""

The ""RuntimeException: Process (pid = NNNN) is no longer alive""
part is the same, but the exit codes are different and this failure
has an hs_err_pid file with a crash.",,,,,,,,,,,JDK-8304032,JDK-8304199,JDK-8305068,,,,,,,,,,,,,,,,,JDK-8303094,,,JDK-8266408,,,,,,,,,,,,,,,,,,,x86_64,,,,,,,,,linux,,,,,"0|i2t3x7:",9223372036854775807,b27,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,,,"2021-07-06 10:46;iklam;The bug is herein the CDS code:

https://github.com/openjdk/jdk/blob/4dfcf53a8bf2ca8717e418b1cbd66ba263b77980/src/hotspot/share/cds/filemap.cpp#L2389

    MutexLocker mu(THREAD, CDSClassFileStream_lock);
    if (_classpath_entries_for_jvmti[i] == NULL) {
      _classpath_entries_for_jvmti[i] = ent;
    } else {
      // Another thread has beat me to creating this entry
      delete ent;   <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<< HERE
      ent = _classpath_entries_for_jvmti[i];
    }
  }

The problem is if ""ent"" is the ClassPathImageEntry, it points to a globally shared object which should never be freed.

Suggested fix:

ClassPathEntry* FileMapInfo::get_classpath_entry_for_jvmti(int i, TRAPS) {
+ if (i == 0) {
+  return ClassLoader::get_jrt_entry();
+ }
  ClassPathEntry* ent = _classpath_entries_for_jvmti[i];
  if (ent == NULL) {
    ...;;;","2021-09-04 07:27;dcubed;Here's a log file snippet for the jdk-18+14-700-tier8 sighting:

#section:main
----------messages:(5/458)----------
command: main applications.kitchensink.process.glue.Main runthese.properties test.duration=1440m
reason: User specified action: run main/othervm/timeout=108000 applications.kitchensink.process.glue.Main runthese.properties test.duration=1440m 
Mode: othervm [/othervm specified]
Additional options from @modules: --add-modules java.base,jdk.incubator.foreign --add-exports java.base/jdk.internal.org.objectweb.asm=ALL-UNNAMED
elapsed time (seconds): 135.604
----------configuration:(4/137)----------
Boot Layer
  add modules: java.base jdk.incubator.foreign          
  add exports: java.base/jdk.internal.org.objectweb.asm ALL-UNNAMED

----------System.out:(32/3313)----------
/opt/mach5/mesos/work_dir/jib-master/install/jdk-18+14-700/src.full/closed/test/hotspot/jtreg/applications/runthese/applications/kitchensink/resources/kitchensink.default.properties
/opt/mach5/mesos/work_dir/jib-master/install/jdk-18+14-700/src.full/closed/test/hotspot/jtreg/applications/kitchensink/resources/kitchensink.default.properties
/opt/mach5/mesos/work_dir/jib-master/install/jdk-18+14-700/src.full/closed/test/hotspot/jtreg/applications/runthese/applications/kitchensink/resources/kitchensink.default.properties
/opt/mach5/mesos/work_dir/jib-master/install/jdk-18+14-700/src.full/closed/test/hotspot/jtreg/applications/kitchensink/resources/kitchensink.default.properties
Implicit dependency needed
[jib LOG] Downloading jdk/16/36/bundles/linux-x64/jdk-16_linux-x64_bin.tar.gz ... Checksum
[jib LOG] Installing jdk/16/36/linux-x64.jdk ... found in jdk/16/36/bundles/linux-x64/jdk-16_linux-x64_bin.tar.gz Checksum
[jib LOG] Resuming jck/15/b01/bundles/JCK-runtime-15.jar ... NoOfTestToPrase =56356  TotalNoOfParsedTest=56355 TotalNoOfManual = 1 class=56356  args=3562 title=56356
[stress.process.out] For random generator using seed: 8444475947790329837
[stress.process.out] To re-run test with same seed value please add ""-Djdk.test.lib.random.seed=8444475947790329837"" to command line.
[stress.process.out] Stress process main method is started.
[stress.process.out] #
[stress.process.out] # A fatal error has been detected by the Java Runtime Environment:
[stress.process.out] #
[stress.process.out] #  Internal Error (classLoader.hpp:129), pid=4744, tid=4782
[stress.process.out] #  Error: ShouldNotReachHere()
[stress.process.out] #
[stress.process.out] # JRE version: Java(TM) SE Runtime Environment (18.0+14) (build 18-ea+14-700)
[stress.process.out] # Java VM: Java HotSpot(TM) 64-Bit Server VM (18-ea+14-700, mixed mode, sharing, tiered, compressed oops, compressed class ptrs, parallel gc, linux-amd64)
[stress.process.out] # Problematic frame:
[stress.process.out] # V  [libjvm.so+0x529d9d]  ClassPathImageEntry::~ClassPathImageEntry()+0x2d
[stress.process.out] #
[stress.process.out] # Core dump will be written. Default location: Core dumps may be processed with ""/opt/core.sh %p"" (or dumping to /opt/mach5/mesos/work_dir/slaves/ff806ead-2cac-495d-9cbc-62116f99bf14-S13975/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/fc4f45aa-c683-4bef-9df4-2d5c6847f846/runs/31165b4c-9944-4374-aa9a-27e170d7707a/testoutput/test-support/jtreg_closed_test_hotspot_jtreg_applications_runthese_RunThese24H_java/scratch/0/core.4744)
[stress.process.out] #
[stress.process.out] Unsupported internal testing APIs have been used.
[stress.process.out] 
[stress.process.out] # An error report file with more information is saved as:
[stress.process.out] # /opt/mach5/mesos/work_dir/slaves/ff806ead-2cac-495d-9cbc-62116f99bf14-S13975/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/fc4f45aa-c683-4bef-9df4-2d5c6847f846/runs/31165b4c-9944-4374-aa9a-27e170d7707a/testoutput/test-support/jtreg_closed_test_hotspot_jtreg_applications_runthese_RunThese24H_java/scratch/0/hs_err_pid4744.log
[stress.process.out] #
[stress.process.out] # If you would like to submit a bug report, please visit:
[stress.process.out] #   https://bugreport.java.com/bugreport/crash.jsp
[stress.process.out] #
----------System.err:(82/9959)----------
WARNING: Using incubator modules: jdk.incubator.foreign
[Sat Sep 04 11:49:23 UTC 2021] System.out/err are copied into glue.process.* logs. Starting.

--- Run and results directory --------------------------------------------------

Here's the crashing thread's stack:

---------------  T H R E A D  ---------------

Current thread (0x00007f8f401edcf0):  JavaThread ""MBeanStressModule"" [_thread_in_vm, id=4782, stack(0x00007f8eedad8000,0x00007f8eedbd9000)]

Stack: [0x00007f8eedad8000,0x00007f8eedbd9000],  sp=0x00007f8eedbd6e90,  free space=1019k
Native frames: (J=compiled Java code, j=interpreted, Vv=VM code, C=native code)
V  [libjvm.so+0x529d9d]  ClassPathImageEntry::~ClassPathImageEntry()+0x2d
V  [libjvm.so+0x65aff8]  FileMapInfo::open_stream_for_jvmti(InstanceKlass*, Handle, JavaThread*)+0x288
V  [libjvm.so+0x9ef892]  KlassFactory::check_shared_class_file_load_hook(InstanceKlass*, Symbol*, Handle, Handle, ClassFileStream const*, JavaThread*)+0x212
V  [libjvm.so+0xcfba5f]  SystemDictionary::load_shared_class(InstanceKlass*, Handle, Handle, ClassFileStream const*, PackageEntry*, JavaThread*)+0x2af
V  [libjvm.so+0xcfbf1b]  SystemDictionary::load_instance_class_impl(Symbol*, Handle, JavaThread*)+0x3eb
V  [libjvm.so+0xcfa3b8]  SystemDictionary::load_instance_class(unsigned int, Symbol*, Handle, JavaThread*)+0x28
V  [libjvm.so+0xcfad1f]  SystemDictionary::resolve_instance_class_or_null(Symbol*, Handle, Handle, JavaThread*)+0x83f
V  [libjvm.so+0xcfc5c6]  SystemDictionary::resolve_or_fail(Symbol*, Handle, Handle, bool, JavaThread*)+0x66
V  [libjvm.so+0x599088]  ConstantPool::klass_at_impl(constantPoolHandle const&, int, JavaThread*)+0x128
V  [libjvm.so+0x599c86]  ConstantPool::klass_ref_at(int, JavaThread*)+0x86
V  [libjvm.so+0xa23a24]  LinkResolver::resolve_field_access(fieldDescriptor&, constantPoolHandle const&, int, methodHandle const&, Bytecodes::Code, JavaThread*)+0x44
V  [libjvm.so+0x7bd15b]  InterpreterRuntime::resolve_get_put(JavaThread*, Bytecodes::Code)+0x16b
V  [libjvm.so+0x7bdc0d]  InterpreterRuntime::resolve_from_cache(JavaThread*, Bytecodes::Code)+0x18d
j  java.util.stream.FindOps.makeRef(Z)Ljava/util/stream/TerminalOp;+4 java.base@18-ea
j  java.util.stream.ReferencePipeline.findFirst()Ljava/util/Optional;+2 java.base@18-ea
j  java.lang.management.ManagementFactory$PlatformMBeanFinder.findFirst(Ljava/lang/Class;)Lsun/management/spi/PlatformMBeanProvider$PlatformComponent;+29 java.management@18-ea
j  java.lang.management.ManagementFactory.getPlatformMXBeans(Ljava/lang/Class;)Ljava/util/List;+1 java.management@18-ea
j  java.lang.management.ManagementFactory.getMemoryPoolMXBeans()Ljava/util/List;+2 java.management@18-ea
j  applications.kitchensink.process.stress.modules.MBeanStressModule.init()V+2
j  applications.kitchensink.process.stress.modules.StressModule.run()V+19
v  ~StubRoutines::call_stub
V  [libjvm.so+0x7c2735]  JavaCalls::call_helper(JavaValue*, methodHandle const&, JavaCallArguments*, JavaThread*)+0x315
V  [libjvm.so+0x7c3f2b]  JavaCalls::call_virtual(JavaValue*, Handle, Klass*, Symbol*, Symbol*, JavaThread*)+0x1cb
V  [libjvm.so+0x88b48a]  thread_entry(JavaThread*, JavaThread*)+0x8a
V  [libjvm.so+0xd3dbb2]  JavaThread::thread_main_inner()+0xc2
V  [libjvm.so+0xd41aa0]  Thread::call_run()+0xc0
V  [libjvm.so+0xba7a31]  thread_native_entry(Thread*)+0xe1

Java frames: (J=compiled Java code, j=interpreted, Vv=VM code)
j  java.util.stream.FindOps.makeRef(Z)Ljava/util/stream/TerminalOp;+4 java.base@18-ea
j  java.util.stream.ReferencePipeline.findFirst()Ljava/util/Optional;+2 java.base@18-ea
j  java.lang.management.ManagementFactory$PlatformMBeanFinder.findFirst(Ljava/lang/Class;)Lsun/management/spi/PlatformMBeanProvider$PlatformComponent;+29 java.management@18-ea
j  java.lang.management.ManagementFactory.getPlatformMXBeans(Ljava/lang/Class;)Ljava/util/List;+1 java.management@18-ea
j  java.lang.management.ManagementFactory.getMemoryPoolMXBeans()Ljava/util/List;+2 java.management@18-ea
j  applications.kitchensink.process.stress.modules.MBeanStressModule.init()V+2
j  applications.kitchensink.process.stress.modules.StressModule.run()V+19
v  ~StubRoutines::call_stub;;;","2021-12-03 08:37;roboduke;Changeset: 0a090926
Author:    Calvin Cheung <ccheung@openjdk.org>
Date:      2021-12-03 16:36:19 +0000
URL:       https://git.openjdk.java.net/jdk/commit/0a0909263194032ae7d8348484e3638f84090233
;;;","2023-03-21 12:27;goetz;Fix request [17u]

I backport this for parity with 17.0.8-oracle.
Acceptable risk. Small change in cds. Unfotunately no test available.  Fix live since 18, thus well tested.
Clean backport.
SAP nightly testing passed.;;;","2023-03-21 12:30;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/1212
Date: 2023-03-21 19:22:53 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
"vmTestbase/nsk/jvmti/GetThreadState/thrstat002 failed with ""Wrong thread ""thr1"" (...) state after SuspendThread""",JDK-8268285,5051195,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,sspitsyn,dcubed,dcubed,2021-06-05 07:40,2021-06-10 18:01,2023-10-01 09:57,2021-06-09 23:04,17,,,,,,,17,hotspot,,0,intermittent,testbug,tier5,,,,,,,,,,,"The following test failed in the JDK17 CI:

vmTestbase/nsk/jvmti/GetThreadState/thrstat002/TestDescription.java

Here's a snippet from the log file:

#section:main
----------messages:(4/253)----------
command: main -agentlib:thrstat002 nsk.jvmti.GetThreadState.thrstat002 5
reason: User specified action: run main/othervm/native -agentlib:thrstat002 nsk.jvmti.GetThreadState.thrstat002 5 
Mode: othervm [/othervm specified]
elapsed time (seconds): 6.941
----------configuration:(0/0)----------
----------System.out:(33/1927)----------
[4.126s][info][jfr,startup] Started recording 1. No limit specified, using maxsize=250MB as default.
[4.126s][info][jfr,startup] 
[4.126s][info][jfr,startup] Use jcmd 79159 JFR.dump name=1 filename=FILEPATH to copy recording data to file.
# Waiting time = 5 mins
thrstat002a.run before startingBarrier.unlock
thrstat002.meth after thr.start()
thrstat002a.run after  startingBarrier.unlock
thrstat002a.run before blockingMonitor lock
thrstat002.meth after thr.startingBarrier.waitFor()
thrstat002.meth after checkStatus(STATUS_MONITOR,false)
thrstat002.meth after thr.suspend()
thrstat002.meth after checkStatus(STATUS_MONITOR,true)
thrstat002.meth after thr.resume()
thrstat002.meth after checkStatus(STATUS_MONITOR,false)
thrstat002a.run blockingMonitor locked
thrstat002a.run after blockingMonitor lock
thrstat002a.run after runningBarrier unlock
thrstat002a.run before endingMonitor unlock
START checkStatus for ""thr1"" (0x0x7ffd73d13498), check state:  BLOCKED_ON_MONITOR_ENTER
START checkStatus for ""thr1"" (0x0x7ffd73d13498, suspended), check state:  BLOCKED_ON_MONITOR_ENTER
START checkStatus for ""thr1"" (0x0x7ffd73d13498), check state:  BLOCKED_ON_MONITOR_ENTER
START checkStatus for ""thr1"" (0x0x7ffd73d13498), check state:  RUNNABLE
Wrong thread ""thr1"" (0x0x7ffd73d13498) state:
    expected:  RUNNABLE (4)
      actual:  ALIVE BLOCKED_ON_MONITOR_ENTER (1025)
Wrong thread ""thr1"" (0x0x7ffd73d13498) state after SuspendThread:
    expected:  RUNNABLE (4)
      actual:  ALIVE BLOCKED_ON_MONITOR_ENTER SUSPENDED (1049601)
START checkStatus for ""thr1"" (0x0x7ffd73d13498, suspended), check state:  RUNNABLE
START checkStatus for ""thr1"" (0x0x7ffd73d13498), check state:  RUNNABLE
START checkStatus for ""thr1"" (0x0x7ffd73d13498), check state:  IN_OBJECT_WAIT
START checkStatus for ""thr1"" (0x0x7ffd73d13498, suspended), check state:  IN_OBJECT_WAIT
START checkStatus for ""thr1"" (0x0x7ffd73d13498), check state:  IN_OBJECT_WAIT
----------System.err:(0/0)----------
----------rerun:(36/8372)*----------

The test task's JVM args are: -XX:StartFlightRecording=dumponexit=true",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,x86_64,,,,,,,,,os_x,,,,,"0|i2t3wj:",9223372036854775807,b26,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@661b156a,,,,,,,,,"2021-06-08 22:54;sspitsyn;This looks like a test issue.
At least, I do not see how this can be a product bug.
The only chance for thrstat002a.run() be blocked on a monitor (when it is expected to be in RUNNING state) is a synchronized statement in implementation of the PrintStream.println(String) or in the writeln() call:
    public void println(Object x) {
        String s = String.valueOf(x);
        if (getClass() == PrintStream.class) {
            // need to apply String.valueOf again since first invocation
            // might return null
            writeln(String.valueOf(s));
        } else {
            synchronized (this) {
                print(s);
                newLine();
            }
        }
So, that all print statements in the thrstat002a.run() need to be commented out to avoid this potential problem.
I'll try to reproduce this issue with println's and then check if it is not reproducible with the removed statements.;;;","2021-06-09 00:03;dholmes;Yes I'm sure we have seen this problem before:

  thrstat002.runningBarrier.unlock();  <= now suspend can be issued
  System.out.println(""thrstat002a.run after runningBarrier unlock"");  <= we block on the monitor in here and get suspended
  int i = 0;
  int n = 1000;
  while (flag) {

If should suffice in this case to move the println to before the unlock() and say ""about to unlock"" rather than ""after unlock"". And then add a comment:

// Don't do println's from this point untuil we have exited the loop, else we can suspend in the println in an unexpected state;;;","2021-06-09 02:45;sspitsyn;Okay, we can fix this in 17.;;;","2021-06-09 23:04;roboduke;Changeset: dd1cbadc
Author:    Serguei Spitsyn <sspitsyn@openjdk.org>
Date:      2021-06-10 06:03:19 +0000
URL:       https://git.openjdk.java.net/jdk/commit/dd1cbadc82bcecf718b96c833a5845fde79db061
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
"javax/swing/JComponent/7154030/bug7154030.java fails with ""Exception: Failed to hide opaque button""",JDK-8268284,5051194,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,kizune,dcubed,dcubed,2021-06-05 07:33,2021-11-16 12:15,2023-10-01 09:57,2021-07-19 20:32,17,18,,,,,,18,client-libs,,0,intermittent,jdk17u-fix-request,jdk17u-fix-yes,sn_97,sn_98,tier4,,,,,,,,"The following test failed in the JDK17 CI:

javax/swing/JComponent/7154030/bug7154030.java

Previously this test failure has happened on Linux and this
sighting is on Mac_OS_X_11.2.3.

Here's a snippet from the log file:

#section:main
----------messages:(5/182)----------
command: main bug7154030
reason: User specified action: run main bug7154030 
Mode: othervm
Additional options from @modules: --add-modules java.desktop
elapsed time (seconds): 5.185
----------configuration:(3/40)----------
Boot Layer
  add modules: java.desktop

----------System.out:(0/0)----------
----------System.err:(13/800)----------
java.lang.Exception: Failed to hide opaque button
	at bug7154030.main(bug7154030.java:151)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at com.sun.javatest.regtest.agent.MainWrapper$MainThread.run(MainWrapper.java:127)
	at java.base/java.lang.Thread.run(Thread.java:833)

JavaTest Message: Test threw exception: java.lang.Exception: Failed to hide opaque button
JavaTest Message: shutting down test

STATUS:Failed.`main' threw exception: java.lang.Exception: Failed to hide opaque button
----------rerun:(41/7449)*----------",,,,,,,,,,,JDK-8276861,JDK-8277259,,,,,,,,,,,,,,,,,,,,,JDK-8258643,JDK-8261689,JDK-8259650,,,,,,,,,,,,,,,,,x86_64,,,,,,,,,os_x,,,,,"0|i2t3wb:",9223372036854775807,b07,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@568a5b31,,,,,,,,,"2021-06-05 07:34;dcubed;Spotted in the jdk-17+26-2316-tier4 CI job set:

javax/swing/JComponent/7154030/bug7154030.java

https://mach5.us.oracle.com/mdash/jobs/mach5-one-jdk-17+26-2316-tier4-20210605-1033-21525322/tasks/mach5-one-jdk-17+26-2316-tier4-20210605-1033-21525322-tier4-client-headful-jtreg-open_test_jdk_jdk_desktop-macosx-x64-104/results?search=status%3Afailed%20AND%20-state%3Ainvalid

https://mach5.us.oracle.com:10060/api/v1/results/mach5-one-jdk-17+26-2316-tier4-20210605-1033-21525322-tier4-client-headful-jtreg-open_test_jdk_jdk_desktop-macosx-x64-104-1622899173-693/log

macosx-x64: jpg-mac-x64-013.us.oracle.com

This test machine is running Mac_OS_X_11.2.3.;;;","2021-06-06 23:12;psadhukhan;Previous few instances of issues in this test were fixed by Alex, recently in JDK-8261689 so assigning to him.;;;","2021-06-10 20:05;kizune;Comparing the mages in the test run i see that the only difference is a couple of pixels on the top right corner and they are outside of the window bounds. The window corner is rounded and the differences are in the place where OS paints the shadow beneath the focused window. I think we need to cut the analysis area to exclude this area by reducing the captured area height by 10%.;;;","2021-07-19 20:32;roboduke;Changeset: 534f0051
Author:    Alexander Zuev <kizune@openjdk.org>
Date:      2021-07-20 03:31:22 +0000
URL:       https://git.openjdk.java.net/jdk/commit/534f00510e26da8deb891b4184c860ec64991b8f
;;;","2021-11-03 14:45;akasko;Fix request (17u)

Clean backport of a Mac-specfic test fix. The change is test only.

Note, this test was added to problem list with JDK-8271894 (in 17) and removed from problem list with JDK-8271895 that is intended to be added as a follow up.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
gc/shenandoah/compiler/TestLinkToNativeRBP.java fails after LibraryLookup is gone,JDK-8268279,5051182,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,xliu,xliu,xliu,2021-06-04 16:18,2021-06-10 17:55,2023-10-01 09:57,2021-06-06 23:12,,,,,,,,17,hotspot,,0,,,,,,,,,,,,,,"2021-06-04T22:27:06.4417961Z TEST: gc/shenandoah/compiler/TestLinkToNativeRBP.java
2021-06-04T22:27:06.4420282Z TEST JDK: /home/runner/jdk-linux-x64-debug/jdk-17-internal+0_linux-x64_bin-debug/jdk-17/fastdebug
2021-06-04T22:27:06.4421119Z 
2021-06-04T22:27:06.4422016Z ACTION: build -- Failed. Compilation failed: Compilation failed
2021-06-04T22:27:06.4422877Z REASON: Named class compiled on demand
2021-06-04T22:27:06.4423502Z TIME:   0.05 seconds
2021-06-04T22:27:06.4424026Z messages:
2021-06-04T22:27:06.4424687Z command: build TestLinkToNativeRBP
2021-06-04T22:27:06.4425437Z reason: Named class compiled on demand
2021-06-04T22:27:06.4426049Z Test directory:
2021-06-04T22:27:06.4426721Z   compile: TestLinkToNativeRBP
2021-06-04T22:27:06.4427418Z elapsed time (seconds): 0.05
2021-06-04T22:27:06.4427857Z 
2021-06-04T22:27:06.4428739Z ACTION: compile -- Failed. Compilation failed: Compilation failed
2021-06-04T22:27:06.4429598Z REASON: .class file out of date or does not exist
2021-06-04T22:27:06.4430228Z TIME:   0.05 seconds
2021-06-04T22:27:06.4430750Z messages:
2021-06-04T22:27:06.4484558Z command: compile /home/runner/work/jdk/jdk/test/hotspot/jtreg/gc/shenandoah/compiler/TestLinkToNativeRBP.java
2021-06-04T22:27:06.4485835Z reason: .class file out of date or does not exist
2021-06-04T22:27:06.4487139Z Additional options from @modules: --add-modules jdk.incubator.foreign
2021-06-04T22:27:06.4487989Z Mode: agentvm
2021-06-04T22:27:06.4488513Z Agent id: 1
2021-06-04T22:27:06.4489066Z elapsed time (seconds): 0.05
2021-06-04T22:27:06.4489667Z configuration:
2021-06-04T22:27:06.4490322Z Boot Layer (javac runtime environment)
2021-06-04T22:27:06.4491252Z   class path: /home/runner/jtreg/lib/javatest.jar 
2021-06-04T22:27:06.4492019Z               /home/runner/jtreg/lib/jtreg.jar 
2021-06-04T22:27:06.4493373Z   patch:      java.base /home/runner/work/jdk/jdk/build/run-test-prebuilt/test-support/jtreg_test_hotspot_jtreg_tier1_gc/patches/java.base
2021-06-04T22:27:06.4496850Z 
2021-06-04T22:27:06.4497321Z javac compilation environment
2021-06-04T22:27:06.4497886Z   add modules: jdk.incubator.foreign
2021-06-04T22:27:06.4498613Z   source path: /home/runner/work/jdk/jdk/test/hotspot/jtreg/gc/shenandoah/compiler
2021-06-04T22:27:06.4499421Z   class path:  /home/runner/work/jdk/jdk/test/hotspot/jtreg/gc/shenandoah/compiler
2021-06-04T22:27:06.4500909Z                /home/runner/work/jdk/jdk/build/run-test-prebuilt/test-support/jtreg_test_hotspot_jtreg_tier1_gc/classes/gc/shenandoah/compiler/TestLinkToNativeRBP.d
2021-06-04T22:27:06.4501735Z 
2021-06-04T22:27:06.4502038Z rerun:
2021-06-04T22:27:06.4502936Z cd /home/runner/work/jdk/jdk/build/run-test-prebuilt/test-support/jtreg_test_hotspot_jtreg_tier1_gc/scratch && \
2021-06-04T22:27:06.4503668Z HOME=/home/runner \
2021-06-04T22:27:06.4504108Z JDK8_HOME=/home/runner/bootjdk/16 \
2021-06-04T22:27:06.4504562Z JTREG_KEYWORDS=!headful \
2021-06-04T22:27:06.4505053Z JTREG_VERBOSE=fail,error,time \
2021-06-04T22:27:06.4505609Z LANG=C.UTF-8 \
2021-06-04T22:27:06.4505937Z LC_ALL=C \
2021-06-04T22:27:06.4506311Z PATH=/bin:/usr/bin:/usr/sbin \
2021-06-04T22:27:06.4507244Z TEST_IMAGE_DIR=/home/runner/jdk-linux-x64-debug/jdk-17-internal+0_linux-x64_bin-tests-debug \
2021-06-04T22:27:06.4508500Z     /home/runner/jdk-linux-x64-debug/jdk-17-internal+0_linux-x64_bin-debug/jdk-17/fastdebug/bin/javac \
2021-06-04T22:27:06.4509603Z         -J-XX:MaxRAMPercentage=25 \
2021-06-04T22:27:06.4510708Z         -J-Djava.io.tmpdir=/home/runner/work/jdk/jdk/build/run-test-prebuilt/test-support/jtreg_test_hotspot_jtreg_tier1_gc/tmp \
2021-06-04T22:27:06.4512004Z         -J-Djavatest.security.noSecurityManager=true \
2021-06-04T22:27:06.4513002Z         -J-XX:-CreateCoredumpOnCrash \
2021-06-04T22:27:06.4514238Z         -J-Djava.library.path=/home/runner/jdk-linux-x64-debug/jdk-17-internal+0_linux-x64_bin-tests-debug/hotspot/jtreg/native \
2021-06-04T22:27:06.4516367Z         -J-Dtest.vm.opts='-XX:MaxRAMPercentage=25 -Djava.io.tmpdir=/home/runner/work/jdk/jdk/build/run-test-prebuilt/test-support/jtreg_test_hotspot_jtreg_tier1_gc/tmp -Djavatest.security.noSecurityManager=true' \
2021-06-04T22:27:06.4519054Z         -J-Dtest.tool.vm.opts='-J-XX:MaxRAMPercentage=25 -J-Djava.io.tmpdir=/home/runner/work/jdk/jdk/build/run-test-prebuilt/test-support/jtreg_test_hotspot_jtreg_tier1_gc/tmp -J-Djavatest.security.noSecurityManager=true' \
2021-06-04T22:27:06.4520708Z         -J-Dtest.compiler.opts= \
2021-06-04T22:27:06.4521559Z         -J-Dtest.java.opts=-XX:-CreateCoredumpOnCrash \
2021-06-04T22:27:06.4522730Z         -J-Dtest.jdk=/home/runner/jdk-linux-x64-debug/jdk-17-internal+0_linux-x64_bin-debug/jdk-17/fastdebug \
2021-06-04T22:27:06.4524269Z         -J-Dcompile.jdk=/home/runner/jdk-linux-x64-debug/jdk-17-internal+0_linux-x64_bin-debug/jdk-17/fastdebug \
2021-06-04T22:27:06.4525290Z         -J-Dtest.timeout.factor=4.0 \
2021-06-04T22:27:06.4526470Z         -J-Dtest.nativepath=/home/runner/jdk-linux-x64-debug/jdk-17-internal+0_linux-x64_bin-tests-debug/hotspot/jtreg/native \
2021-06-04T22:27:06.4527656Z         -J-Dtest.root=/home/runner/work/jdk/jdk/test/hotspot/jtreg \
2021-06-04T22:27:06.4528653Z         -J-Dtest.name=gc/shenandoah/compiler/TestLinkToNativeRBP.java \
2021-06-04T22:27:06.4529943Z         -J-Dtest.file=/home/runner/work/jdk/jdk/test/hotspot/jtreg/gc/shenandoah/compiler/TestLinkToNativeRBP.java \
2021-06-04T22:27:06.4531157Z         -J-Dtest.src=/home/runner/work/jdk/jdk/test/hotspot/jtreg/gc/shenandoah/compiler \
2021-06-04T22:27:06.4532222Z         -J-Dtest.src.path=/home/runner/work/jdk/jdk/test/hotspot/jtreg/gc/shenandoah/compiler \
2021-06-04T22:27:06.4533865Z         -J-Dtest.classes=/home/runner/work/jdk/jdk/build/run-test-prebuilt/test-support/jtreg_test_hotspot_jtreg_tier1_gc/classes/gc/shenandoah/compiler/TestLinkToNativeRBP.d \
2021-06-04T22:27:06.4535849Z         -J-Dtest.class.path=/home/runner/work/jdk/jdk/build/run-test-prebuilt/test-support/jtreg_test_hotspot_jtreg_tier1_gc/classes/gc/shenandoah/compiler/TestLinkToNativeRBP.d \
2021-06-04T22:27:06.4538211Z         -J-Dtest.class.path.prefix=/home/runner/work/jdk/jdk/build/run-test-prebuilt/test-support/jtreg_test_hotspot_jtreg_tier1_gc/classes/gc/shenandoah/compiler/TestLinkToNativeRBP.d:/home/runner/work/jdk/jdk/test/hotspot/jtreg/gc/shenandoah/compiler \
2021-06-04T22:27:06.4539889Z         -J-Dtest.modules=jdk.incubator.foreign \
2021-06-04T22:27:06.4540725Z         --add-modules jdk.incubator.foreign \
2021-06-04T22:27:06.4603740Z         -d /home/runner/work/jdk/jdk/build/run-test-prebuilt/test-support/jtreg_test_hotspot_jtreg_tier1_gc/classes/gc/shenandoah/compiler/TestLinkToNativeRBP.d \
2021-06-04T22:27:06.4605524Z         -sourcepath /home/runner/work/jdk/jdk/test/hotspot/jtreg/gc/shenandoah/compiler \
2021-06-04T22:27:06.4607775Z         -classpath /home/runner/work/jdk/jdk/test/hotspot/jtreg/gc/shenandoah/compiler:/home/runner/work/jdk/jdk/build/run-test-prebuilt/test-support/jtreg_test_hotspot_jtreg_tier1_gc/classes/gc/shenandoah/compiler/TestLinkToNativeRBP.d /home/runner/work/jdk/jdk/test/hotspot/jtreg/gc/shenandoah/compiler/TestLinkToNativeRBP.java
2021-06-04T22:27:06.4609336Z direct:
2021-06-04T22:27:06.4609896Z warning: using incubating module(s): jdk.incubator.foreign
2021-06-04T22:27:06.4610926Z /home/runner/work/jdk/jdk/test/hotspot/jtreg/gc/shenandoah/compiler/TestLinkToNativeRBP.java:42: error: cannot find symbol
2021-06-04T22:27:06.4612245Z import jdk.incubator.foreign.LibraryLookup;
2021-06-04T22:27:06.4612900Z                             ^
2021-06-04T22:27:06.4613320Z   symbol:   class LibraryLookup
2021-06-04T22:27:06.4613893Z   location: package jdk.incubator.foreign
2021-06-04T22:27:06.4614878Z /home/runner/work/jdk/jdk/test/hotspot/jtreg/gc/shenandoah/compiler/TestLinkToNativeRBP.java:51: error: cannot find symbol
2021-06-04T22:27:06.4616064Z     static final LibraryLookup lookup = LibraryLookup.ofLibrary(""LinkToNativeRBP"");
2021-06-04T22:27:06.4616751Z                  ^
2021-06-04T22:27:06.4617152Z   symbol:   class LibraryLookup
2021-06-04T22:27:06.4617720Z   location: class TestLinkToNativeRBP
2021-06-04T22:27:06.4618670Z /home/runner/work/jdk/jdk/test/hotspot/jtreg/gc/shenandoah/compiler/TestLinkToNativeRBP.java:51: error: cannot find symbol
2021-06-04T22:27:06.4619844Z     static final LibraryLookup lookup = LibraryLookup.ofLibrary(""LinkToNativeRBP"");
2021-06-04T22:27:06.4620563Z                                         ^
2021-06-04T22:27:06.4620990Z   symbol:   variable LibraryLookup
2021-06-04T22:27:06.4621571Z   location: class TestLinkToNativeRBP
2021-06-04T22:27:06.4622053Z 3 errors
2021-06-04T22:27:06.4622366Z 1 warning
2021-06-04T22:27:06.4622589Z 
2021-06-04T22:27:06.4623096Z TEST RESULT: Failed. Compilation failed: Compilation failed


the test can't find symbol LibraryLookup.ofLibrary() anymore after JDK-8268129. 
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8268373,,,,,,,,,,,,,,,,,,,,,,generic,,,,,,,17,,generic,,,,,"0|i2t3tn:",9223372036854775807,b26,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@78d03d9a,,,,,,,,,"2021-06-04 16:39;xliu;It's easy to reproduce. 
$make test TEST=""jtreg:gc/shenandoah/compiler/TestLinkToNativeRBP.java"" CONF=linux-x86_64-server-fastdebug  LOG=info

I think the fix is straightforward. I just need to replace old api with new one. ;;;","2021-06-06 23:12;roboduke;Changeset: 2aeeeb40
Author:    Xin Liu <xliu@openjdk.org>
Committer: Jie Fu <jiefu@openjdk.org>
Date:      2021-06-07 06:12:04 +0000
URL:       https://git.openjdk.java.net/jdk/commit/2aeeeb40a06c0c71537ce7de2e00bab9faf817a9
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Remove -Djavatest.security.noSecurityManager=true from jtreg runs,JDK-8268267,5051162,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,weijun,weijun,weijun,2021-06-04 08:46,2021-06-10 17:57,2023-10-01 09:57,2021-06-07 06:59,,,,,,,,17,security-libs,,0,,,,,,,,,,,,,,"In the early days of JEP 411 we made -Djava.security.manager=disallow by default the following change for jtreg runs in RunTests.gmk was made:

-  $1_JTREG_BASIC_OPTIONS += -automatic -ignore:quiet
+  $1_JTREG_BASIC_OPTIONS += -automatic -ignore:quiet -Djavatest.security.noSecurityManager=true

Now that we are back to allow but the change above is still integrated.

We can revert the change above, and thus liberate 3 langtools tests from problem list.
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8266459,JDK-8264713,JDK-8265611,,JDK-8265611,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2t3p7:",9223372036854775807,b26,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@2ec284e3,,,,,,,,,"2021-06-07 06:59;roboduke;Changeset: a91f9712
Author:    Weijun Wang <weijun@openjdk.org>
Date:      2021-06-07 13:58:49 +0000
URL:       https://git.openjdk.java.net/jdk/commit/a91f97126646f89d8c5b81cfd40820338c769acd
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
 MutableSpaceUsedHelper::take_sample() hits assert(left >= right) failed: avoid overflow,JDK-8268265,5051156,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,kbarrett,mgronlun,mgronlun,2021-06-04 06:38,2023-05-26 06:23,2023-10-01 09:57,2021-06-17 12:06,17,,,,,,,17,hotspot,,0,gc-parallel,gc-pending-review,gc-serial,intermittent,tier2,tier6,tier8,,,,,,,"Test: gc/stress/jfr/TestStressBigAllocationGCEventsWithParallel.java

#
# A fatal error has been detected by the Java Runtime Environment:
#
# Internal Error (/opt/mach5/mesos/work_dir/slaves/3c846bae-ce30-4a97-93ee-9fef4497ccb6-S79132/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/7f48f342-d7da-4234-a78a-548d0a1371c4/runs/7a4f980a-d96c-49aa-b54f-f5ca83ae7018/workspace/open/src/hotspot/share/utilities/globalDefinitions.hpp:424), pid=2983, tid=2998
# assert(left >= right) failed: avoid underflow - left: 0x00000000fe200000 right: 0x00000000fe280000
#
# JRE version: Java(TM) SE Runtime Environment (17.0) (fastdebug build 17-internal+0-LTS-2021-06-01-0606360.david.holmes.jdk-dev4.git)
# Java VM: Java HotSpot(TM) 64-Bit Server VM (fastdebug 17-internal+0-LTS-2021-06-01-0606360.david.holmes.jdk-dev4.git, mixed mode, sharing, tiered, compressed oops, compressed class ptrs, parallel gc, linux-amd64)
# Problematic frame:
# V [libjvm.so+0x1748442] MutableSpaceUsedHelper::take_sample()+0x72
#
# Core dump will be written. Default location: Core dumps may be processed with ""/opt/core.sh %p"" (or dumping to /opt/mach5/mesos/work_dir/slaves/3c846bae-ce30-4a97-93ee-9fef4497ccb6-S78974/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/a1672af1-ff52-493c-b742-6917ddbb5fc7/runs/8a51b92b-fabb-4bc4-8b80-a450e841d099/testoutput/test-support/jtreg_open_test_hotspot_jtreg_hotspot_gc/scratch/3/core.2983)
#
# JFR recording file will be written. Location: /opt/mach5/mesos/work_dir/slaves/3c846bae-ce30-4a97-93ee-9fef4497ccb6-S78974/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/a1672af1-ff52-493c-b742-6917ddbb5fc7/runs/8a51b92b-fabb-4bc4-8b80-a450e841d099/testoutput/test-support/jtreg_open_test_hotspot_jtreg_hotspot_gc/scratch/3/hs_err_pid2983.jfr
#
# If you would like to submit a bug report, please visit:
# https://bugreport.java.com/bugreport/crash.jsp
#

--------------- T H R E A D ---------------

Current thread (0x00007fbb881b4160): WatcherThread [stack: 0x00007fbb4bcfe000,0x00007fbb4bdfe000] [id=2998]

Stack: [0x00007fbb4bcfe000,0x00007fbb4bdfe000], sp=0x00007fbb4bdfcd60, free space=1019k
Native frames: (J=compiled Java code, j=interpreted, Vv=VM code, C=native code)
V [libjvm.so+0x1748442] MutableSpaceUsedHelper::take_sample()+0x72
V [libjvm.so+0x15e842f] PerfLongVariant::sample()+0x1f
V [libjvm.so+0x1764c82] StatSampler::sample_data(PerfDataList*)+0x32
V [libjvm.so+0x185329d] PeriodicTask::real_time_tick(int)+0x8d
V [libjvm.so+0x1512fef] WatcherThread::run()+0x10f
V [libjvm.so+0x18ab600] Thread::call_run()+0x100
V [libjvm.so+0x157720e] thread_native_entry(Thread*)+0x10e ",,,,,,,,,,,JDK-8270578,JDK-8268997,,,,,,,,,,,,,,,,,,JDK-8269001,,,JDK-8308643,,,,JDK-8260046,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2t3nv:",9223372036854775807,b28,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6b00f96c,,,,,,,,,"2021-06-08 11:18;mseledtsov;ILW = HLM = P3;;;","2021-06-17 12:06;roboduke;Changeset: c98d5084
Author:    Kim Barrett <kbarrett@openjdk.org>
Date:      2021-06-17 19:05:10 +0000
URL:       https://git.openjdk.java.net/jdk17/commit/c98d50848ba2811d2f08b3fbc57ac9674c63a943
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
C2: assert(n != __null) failed: Bad immediate dominator info.,JDK-8268261,5051151,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,kvn,chagedorn,chagedorn,2021-06-04 06:05,2023-07-26 04:25,2023-10-01 09:57,2021-07-23 11:52,11-pool,14,15,16,17,18,,18,hotspot,,0,c2,hs-comp-triaged,javafuzzer,jdk11u-fix-request,jdk11u-fix-yes,jdk17u-fix-request,jdk17u-fix-SQE-ok,jdk17u-fix-yes,oracle-triage-17,,,,,"The attached test fails with the following assertion and seems to be unrelated to JDK-8262017:

To reproduce:
$ java -Xcomp -XX:-TieredCompilation -XX:CompileOnly=Test Test.java

#
# A fatal error has been detected by the Java Runtime Environment:
#
#  Internal Error (/opt/mach5/mesos/work_dir/slaves/3c846bae-ce30-4a97-93ee-9fef4497ccb6-S79226/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/0cb697b6-5006-4d18-afca-8f82d7082f5e/runs/5d51f3ad-e036-4803-805d-9e13517ddb05/workspace/open/src/hotspot/share/opto/loopnode.hpp:1092), pid=167157, tid=167170
#  assert(n != __null) failed: Bad immediate dominator info.
#
# JRE version: Java(TM) SE Runtime Environment (17.0+25) (fastdebug build 17-ea+25-LTS-2214)
# Java VM: Java HotSpot(TM) 64-Bit Server VM (fastdebug 17-ea+25-LTS-2214, compiled mode, sharing, compressed oops, compressed class ptrs, g1 gc, linux-amd64)
# Problematic frame:
# V  [libjvm.so+0x12fad4b]  PhaseIdealLoop::idom_no_update(unsigned int) const+0x16b
...........
Command Line: -Xcomp -XX:-TieredCompilation -XX:CompileOnly=Test --add-modules=ALL-DEFAULT jdk.compiler/com.sun.tools.javac.launcher.Main Test.java
...........
Current thread (0x00007f85e4235ba0):  JavaThread ""C2 CompilerThread0"" daemon [_thread_in_native, id=167170, stack(0x00007f85c0d37000,0x00007f85c0e38000)]


Current CompileTask:
C2:   1929   82    b        Test::test (93 bytes)

Stack: [0x00007f85c0d37000,0x00007f85c0e38000],  sp=0x00007f85c0e31e90,  free space=1003k
Native frames: (J=compiled Java code, j=interpreted, Vv=VM code, C=native code)
V  [libjvm.so+0x12fad4b]  PhaseIdealLoop::idom_no_update(unsigned int) const+0x16b
V  [libjvm.so+0x13088f1]  PhaseIdealLoop::clone_loop_handle_data_uses(Node*, Node_List&, IdealLoopTree*, IdealLoopTree*, Node_List*&, Node_List*&, Node_List*&, Node_List&, unsigned int, PhaseIdealLoop::CloneLoopMode)+0x581
V  [libjvm.so+0x130a16f]  PhaseIdealLoop::clone_loop(IdealLoopTree*, Node_List&, int, PhaseIdealLoop::CloneLoopMode, Node*)+0x110f
V  [libjvm.so+0x12c5470]  PhaseIdealLoop::do_unroll(IdealLoopTree*, Node_List&, bool)+0x220
V  [libjvm.so+0x12cbed0]  IdealLoopTree::iteration_split_impl(PhaseIdealLoop*, Node_List&) [clone .part.0]+0x460
V  [libjvm.so+0x12cc4eb]  IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&)+0x13b
V  [libjvm.so+0x12cc3e5]  IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&)+0x35
V  [libjvm.so+0x12f8cb5]  PhaseIdealLoop::build_and_optimize(LoopOptsMode)+0xd55
V  [libjvm.so+0xa1da2a]  PhaseIdealLoop::optimize(PhaseIterGVN&, LoopOptsMode)+0x2da
V  [libjvm.so+0xa19470]  Compile::Optimize()+0x580
V  [libjvm.so+0xa1bec5]  Compile::Compile(ciEnv*, ciMethod*, int, bool, bool, bool, bool, DirectiveSet*)+0x1585
V  [libjvm.so+0x841aba]  C2Compiler::compile_method(ciEnv*, ciMethod*, int, bool, DirectiveSet*)+0x1ea
V  [libjvm.so+0xa2c889]  CompileBroker::invoke_compiler_on_method(CompileTask*)+0xfb9
V  [libjvm.so+0xa2d5f8]  CompileBroker::compiler_thread_loop()+0x5a8
V  [libjvm.so+0x18a3a11]  JavaThread::thread_main_inner()+0x271
V  [libjvm.so+0x18ab610]  Thread::call_run()+0x100
V  [libjvm.so+0x157721e]  thread_native_entry(Thread*)+0x10e",,,,,,,,,,,JDK-8271817,JDK-8271697,JDK-8271374,JDK-8271735,,,,,,,,,,,,,,,,,,,JDK-8224957,JDK-8312741,,,,,,,"2021-06-04 06:09;chagedorn;Test.java;https://bugs.openjdk.org/secure/attachment/95023/Test.java","2021-06-04 06:09;chagedorn;hs_err_pid167157.log;https://bugs.openjdk.org/secure/attachment/95022/hs_err_pid167157.log",,,,,,,,,,,,,,,,,,,,,,,,"0|i2t3mr:",9223372036854775807,b08,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2021-06-04 06:09;chagedorn;ILW = C2 assert failure during unrolling, only fails with single Java Fuzzer test, disable compilation of affected method = HLM = P3;;;","2021-07-21 20:38;kvn;The issue is that we continue optimize loops which follow a loop which is un-switched without updating idom data.

Loop: N0/N0  has_call has_sfpt
  Loop: N410/N382  limit_check profile_predicated predicated counted [0,3),+1 (-1 iters)  has_call sfpts={ 374 }
    Loop: N418/N417  sfpts={ 420 }
      Loop: N483/N212  counted [1,5),+2 (-1 iters)  has_sfpt strip_mined
    Loop: N426/N369  limit_check profile_predicated predicated counted [0,9),+1 (-1 iters)  has_sfpt sfpts={ 361 }
Unswitch   1       Loop: N483/N212  counted [1,5),+2 (2147483648 iters)  has_sfpt strip_mined
MaxUnroll  9     Loop: N426/N369  limit_check profile_predicated predicated counted [0,9),+1 (2147483648 iters)  has_sfpt sfpts={ 361 }
Peel             Loop: N426/N369  limit_check profile_predicated predicated counted [0,9),+1 (2147483648 iters)  has_sfpt sfpts={ 361 }
Unroll 2( 8)     Loop: N426/N369  counted [int,9),+1 (2147483648 iters)  has_sfpt sfpts={ 361 }
# To suppress the following error report, specify this argument
# after -XX: or in .hotspotrc:  SuppressErrorAt=/loopnode.hpp:1092
#
# A fatal error has been detected by the Java Runtime Environment:
#
#  Internal Error (/jdk_git/open/src/hotspot/share/opto/loopnode.hpp:1092), pid=2327685, tid=2327712
#  assert(n != __null) failed: Bad immediate dominator info.
;;;","2021-07-21 20:57;kvn;I suggest to exit current round of loopopts when loop is unswitched and do an other round with recalculated idom data.
It should not affect compilation speed because unswitching is rare case. I will do performance testing to make sure.;;;","2021-07-21 21:09;kvn;More details about this issue.

The control for AddP node is set on N483 loop exit projection. AddP is address for Load node from following loop N426.
After unswithching N483 loop its exit become nested () and does not dominate loop N426. Which cause failure during following loop N426 unroll which tries to update control for Load node by looking on controls of its inputs.;;;","2021-07-23 11:52;roboduke;Changeset: 4ed548b3
Author:    Vladimir Kozlov <kvn@openjdk.org>
Date:      2021-07-23 18:51:25 +0000
URL:       https://git.openjdk.java.net/jdk/commit/4ed548b3eeffe8dfa601d4d0eeed2bfe359af965
;;;","2021-07-23 12:05;kvn;Fix Request for 17u
Backport changes applied cleanly.
Low risk fix - small changes. May add additional round of loops optimizations which may increase compilation time for some methods.
;;;","2021-08-02 12:59;zgu;Fix Request (11u)

I would like to backport this patch for parity with Oracle 11.0.14. 

Backport is not clean and it has been reviewed.

;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,
Class.arrayType() for a 255-d array throws undocumented IllegalArgumentException,JDK-8268250,5051037,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,darcy,webbuggrp,webbuggrp,2021-06-03 01:22,2023-01-26 10:00,2023-10-01 09:57,2022-02-17 09:13,16,,,,,,,19,core-libs,,0,dcsaw,noreg-doc,reproducer-yes,webbug,,,,,,,,,,"A DESCRIPTION OF THE PROBLEM :
When we invoke java.lang.Class.arrayType() for a 255-dimension array, it unexpectedly throws an IllegalArgumentException, which is not documented.

STEPS TO FOLLOW TO REPRODUCE THE PROBLEM :
Compile and run the given Java code.

ACTUAL -
It prints the following message to stderr:
Unexpected java.lang.IllegalArgumentException
	at java.base/java.lang.reflect.Array.newArray(Native Method)
	at java.base/java.lang.reflect.Array.newInstance(Array.java:78)
	at java.base/java.lang.Class.arrayType(Class.java:4360)
	at com.yuantj.test.Main.main(Main.java:10)

---------- BEGIN SOURCE ----------
package com.yuantj.test;

public final class Main {
    public static void main(String[] args) {
        Class<?> cls = Object.class;
        for (int i = 0; i < 255; ++i) {
            cls = cls.arrayType();
        }
        try {
            System.out.println(cls.arrayType());
        } catch (IllegalArgumentException e) {
            System.err.print(""Unexpected "");
            e.printStackTrace();
        }
    }
}
---------- END SOURCE ----------

CUSTOMER SUBMITTED WORKAROUND :
Make it return null,  throw an IllegalStateException, or document it.

FREQUENCY : always


",,,,,,,,,,,,,,,,,,,,,,,,JDK-8268300,,,JDK-8262003,,,,,,,,,,JDK-8268299,,,,"2021-06-04 03:14;tongwan;Main.java;https://bugs.openjdk.org/secure/attachment/95018/Main.java",,,,,,,,,,,,,,,,,,,,,,,,,"0|i2t2xf:",9223372036854775807,b11,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@313ae9a0,,,,,,,,,"2021-06-04 03:11;tongwan;The observations on Windows 10:
JDK 16: Failed, IllegalArgumentException thrown
JDK 17ea+6: Failed.

Javadoc of JDK 16:
https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Class.html#arrayType();;;","2021-06-06 19:50;pnarayanaswa;Additional Information from submitter:
===========================
void.class.arrayType() also throws an IllegalArgumentException.;;;","2022-02-17 09:13;roboduke;Changeset: 4c7f8b49
Author:    Joe Darcy <darcy@openjdk.org>
Date:      2022-02-17 17:12:40 +0000
URL:       https://git.openjdk.java.net/jdk/commit/4c7f8b49a4845acf58272c42327328d6d2837cea
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
The documentation of the String.regionMatches method contains error,JDK-8268236,5050901,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,jlaskey,webbuggrp,webbuggrp,2021-06-01 11:50,2021-07-15 10:20,2023-10-01 09:57,2021-06-28 06:51,16,,,,,,,17,core-libs,,0,dcsad,noreg-doc,webbug,,,,,,,,,,,"A DESCRIPTION OF THE PROBLEM :
The documentation of the String.regionMatches method contains this fragment: this.substring(toffset, len).codePoints(), but String.substring method takes index, not the length, as the second argument.

See: https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/String.html#regionMatches(boolean,int,java.lang.String,int,int)


",,,,,,,,,,,JDK-8270660,JDK-8269547,,,,,,,,,,,,JDK-8268674,,,,,,,,,,,,,,,,,,,,,,,,,,,,generic,,,,,,,,,generic,,,,,"0|i2t23n:",9223372036854775807,b29,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4c088d55,,,,,,,,,"2021-06-03 21:48;adev;The summary of the method regionMatches() at https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/String.html#regionMatches(boolean,int,java.lang.String,int,int) mentions -
""
The sequences tsequence and osequence are compared, where tsequence is the sequence produced as if by calling this.substring(toffset, len).codePoints() and osequence is the sequence produced as if by calling other.substring(ooffset, len).codePoints(). 
""
The String.substring method's second argument takes index as argument and not length. Although the method's implementation does not use substring method, len should be changed to toffset+len and ooffset+len respectively, in the documentation.;;;","2021-06-28 06:51;roboduke;Changeset: e4c54463
Author:    Jim Laskey <jlaskey@openjdk.org>
Date:      2021-06-28 13:51:07 +0000
URL:       https://git.openjdk.java.net/jdk17/commit/e4c5446340605b112e0918fa9dcb48aaeaa730c8
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Foreign Linker API & Windows user32/kernel32: String conversion seems broken,JDK-8268230,5050825,Bug,Resolved,JDK,JDK,software,duke,,,P2,Fixed,jvernee,webbuggrp,webbuggrp,2021-06-01 02:13,2022-06-26 15:13,2023-10-01 09:57,2021-06-15 11:41,16,17,repo-panama,,,,,repo-panama,other-libs,,0,dcsaw,reproducer-yes,webbug,,,,,,,,,,,"ADDITIONAL SYSTEM INFORMATION :
java 16.0.1 2021-04-20
Java(TM) SE Runtime Environment (build 16.0.1+9-24)
Java HotSpot(TM) 64-Bit Server VM (build 16.0.1+9-24, mixed mode, sharing)

Microsoft Windows [Version 10.0.19042.985]

Error appears during Maven build, when running a standalone Java app and also when running tests or app within the Eclipse IDE.

A DESCRIPTION OF THE PROBLEM :
Hi there,

I recently experimented with the new FLA subsystem. I encountered random situations where strings converted from Java to C seem to end up ""longer"" than their original Java counterparts.

I experimented with string length computation but did also encounter the issue when providing the string e. g. as a message box caption (which ends up displaying random non printable characters).

When converting a Java string with CLinker.toCString and then passing the result (or a pointer to it) to lstrlenW, the function's result is often wrong, i. e. longer than expected, never shorter. I am pretty sure that it is not due to wrong usage, because the result of lstrlenW seems to be non deterministic, e. g. I got the following results on the string ""testString"":

10, 10, 10, 10, 19, 10, 40, 10, 10, 10, 32, 10, 10, 32, 10, 16, 10

It is almost like if the string gets right padded with some portion of uninitialized memory. Maybe array handling is of or something. Some false results appear more often than others. Also it does seem to depend on the timing, e. g. when stopping the code with a debugger, the result is almost always correct.

However, I only encountered the problem when using Windows library functions from kernel32 or user32. When using the standard library's (LibraryLookup.ofDefault) strlen function, things are working as expected.

I provided a demo over at GitHub: https://github.com/JanMosigItemis/flabugs

Best regards!

STEPS TO FOLLOW TO REPRODUCE THE PROBLEM :
Call lstrlenW from ""Kernel32"" via usual FLA means.

See the demo at: https://github.com/JanMosigItemis/flabugs

EXPECTED VERSUS ACTUAL BEHAVIOR :
EXPECTED -
A deterministic C-string both in content and length / lstrlenW must always yield the same (correct) length of a string.
ACTUAL -
C-strings seem to be right padded with random characters / lstrlenW yields random results >= correct string length

---------- BEGIN SOURCE ----------
See the demo at: https://github.com/JanMosigItemis/flabugs
---------- END SOURCE ----------

CUSTOMER SUBMITTED WORKAROUND :
Currently unknown

FREQUENCY : often


",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8268888,,,,,,,,"2021-06-03 19:58;tongwan;flabugs-main.zip;https://bugs.openjdk.org/secure/attachment/95013/flabugs-main.zip",,,,,,,,,,,,,,,,,,,,,,,,,"0|i2t1mr:",9223372036854775807,,,,,,,,,,,,,"2021-06-03 19:58;tongwan;The observation on Windows 10:
JDK 16: Failed, random results returned.;;;","2021-06-04 05:24;dfuchs;Assigning to Maurizio for initial evaluation. [~mcimadamore] what would be the proper component/subcomponent for foreign linker API - is that core-libs/java.lang?;;;","2021-06-04 07:12;jvernee;I think we need a new tag for java.foreign maybe.;;;","2021-06-10 05:00;jvernee;The problem is that we only add a single 0 byte as a null terminator, regardless of the charset used. For wider char sets, more 0 bytes need to be added. For instance, for UTF_16LE two 0 bytes need to be added.

A possible workaround is to manually convert the String to a MemorySegment:

    String input = ""testString"";
    byte[] bytes = (input + '\0').getBytes(UTF_16LE);
    MemorySegment txt = MemorySegment.allocateNative(bytes.length);
    text.copyFrom(MemorySegment.ofArray(bytes));;;;","2021-06-10 05:56;jvernee;ILW = HMM = P2

The issue can lead to out of bounds memory reads which can lead to crashes (H). Workaround is to manually re-implement the API, so that seems like M to me.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
java/foreign/TestUpcall.java still times out,JDK-8268227,5051114,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,mcimadamore,dcubed,dcubed,2021-06-03 18:31,2021-06-10 17:58,2023-10-01 09:57,2021-06-08 07:04,17,,,,,,,17,core-libs,,0,tier4,,,,,,,,,,,,,"The following test still times out after JDK-8268131:

java/foreign/TestUpcall.java

so it looks like (4 minutes * 4 timeoutFactor) => 16 minutes
isn't enough.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8266074,JDK-8268131,,,,,,,,,,,,,,x86_64,,,,,,,,,linux,,,,,"0|i2t3ej:",9223372036854775807,b26,,,,,,,,,,,,"2021-06-03 18:34;dcubed;[~mcimadamore] - Looks like java/foreign/TestUpcall.java
needs more time.;;;","2021-06-04 03:33;mcimadamore;Ultimately, it seems like this is likely caused by this:
https://bugs.openjdk.java.net/browse/JDK-8268095

Adding -XX:-VerifyDependencies to these tests make everything complete in a minute or so. I'm discussing this with HS team to see if there's a workaround we can use - bumping timeout doesn't seem optimal as it will leave the test running for a very long time.;;;","2021-06-08 07:04;roboduke;Changeset: 6843576c
Author:    Maurizio Cimadamore <mcimadamore@openjdk.org>
Date:      2021-06-08 14:02:28 +0000
URL:       https://git.openjdk.java.net/jdk/commit/6843576c95a70bffad95df278d5f5be29371bca4
;;;","2021-06-08 09:30;dcubed;The fix for this bug is in jdk-17+26-2364 and jdk-17+26-2365.
So even though there's a sighting in jdk-17+26-2356-tier4, that build-ID
DOES NOT have the fix.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
[TEST_BUG] WinShortcutPromptTestWithShortcutPrompt test appOutput.txt is not created ,JDK-8268226,5051113,Bug,Closed,JDK,JDK,software,duke,,,P3,Fixed,efrenkel,efrenkel,efrenkel,2021-06-03 18:09,2022-06-27 16:32,2023-10-01 09:57,2021-06-04 13:11,17,,,,,,,17,tools,,0,imt,imt-2109,sqebug,testbug,,,,,,,,,,"Tested with JDK 17+b23

Steps to reproduce:
1. Check preconditions 
    (a) VERIFY There are no JREs/JDKs installed.
2. Launch WinShortcutPromptTestWithShortcutPrompt-1.0.exe / WinShortcutPromptTestWithShortcutPrompt-1.0.msi 
3. Wait for install to complete
4. Open file explorer and navigate to %ProgramFiles%\WinShortcutPromptTestWithShortcutPrompt 
5. Double click WinShortcutPromptTestWithShortcutPrompt.exe
    (a) VERIFY appOutput.txt is created in user home directory


Expected result:
 appOutput.txt is created in user home directory 

Actual behavior:
appOutput.txt was not created

Affected test:
JPKG001_033-EXE
JPKG001_033-MSI

IMT bug: 2109",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,windows,,,,,"0|i2t3eb:",9223372036854775807,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@3656b41f,,,,,,,Verified,,"2021-06-04 08:56;herrick;WinShortcutPromptTestWithShortcutPrompt cannot run and will so error if run from console:
Failed to find JVM in ""C:\Program Files\WinShortcutPromptTestWithShortcutPrompt\runtime""
This is because the test calls JPackageCommand::setFakeRuntime() when building installer.  The test app installed by such and installer is not intended top be run.
;;;","2021-06-04 09:02;herrick;should we just remove the call to setFakeRuntime() ?;;;","2021-06-04 09:23;asemenyuk;[~herrick] I don't think it makes much sense to run apps form this test as its sole purpose is to create installers with various options. Other SQE test scenarios based on WinShortcutPromptTest.java don't have steps to run apps. JPKG001-033 test is the only trouble maker.
;;;","2021-06-04 11:19;herrick;sure - many tests like this one are meant to test the installer, not run the app the installer installs;;;","2021-06-04 13:11;efrenkel;Steps 5-7 have been removed from test spec.
[~asemenyuk] can you please verify the test looks correct. Is there any other verification you want added to this test?;;;","2021-06-04 14:15;asemenyuk;[~efrenkel] JPKG001-033 looks good. I'd suggest minor improve: add step ""3.b. VERIFY no shortcuts dialog is offered to the user"".;;;","2021-06-04 14:18;efrenkel;[~asemenyuk] Done!;;;","2021-06-04 14:19;asemenyuk;[~efrenkel] Thanks!;;;",,,,,,,,,,,,,,,,,,,,,,,,,,
"javax/xml/jaxp/unittest/transform/Bug6216226Test.java failed, cannot delete file",JDK-8268222,5051109,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,joehw,dcubed,dcubed,2021-06-03 16:40,2021-06-10 17:54,2023-10-01 09:57,2021-06-04 09:33,17,,,,,,,17,xml,,0,tier2,,,,,,,,,,,,,"The following test failed in the JDK17 CI:

javax/xml/jaxp/unittest/transform/Bug6216226Test.java

Here's a snippet from the log file:

#section:testng
----------messages:(5/874)----------
command: testng -DrunSecMngr=true -Djava.security.manager=allow transform.Bug6216226Test
reason: User specified action: run testng/othervm -DrunSecMngr=true -Djava.security.manager=allow transform.Bug6216226Test 
Mode: othervm [/othervm specified]
Additional options from @modules: --add-modules java.xml --add-exports java.xml/com.sun.org.apache.xerces.internal.impl=ALL-UNNAMED --add-exports java.xml/com.sun.org.apache.xerces.internal.jaxp=ALL-UNNAMED --add-exports java.xml/com.sun.org.apache.xml.internal.serialize=ALL-UNNAMED --add-exports java.xml/com.sun.org.apache.bcel.internal.classfile=ALL-UNNAMED --add-exports java.xml/com.sun.org.apache.bcel.internal.generic=ALL-UNNAMED --add-exports java.xml/com.sun.org.apache.xalan.internal.xsltc.trax=ALL-UNNAMED --add-exports java.xml/com.sun.org.apache.xml.internal.utils=ALL-UNNAMED
elapsed time (seconds): 1.398
----------configuration:(10/659)----------
Boot Layer
  add modules: java.xml                                              
  add exports: java.xml/com.sun.org.apache.bcel.internal.classfile   ALL-UNNAMED
               java.xml/com.sun.org.apache.bcel.internal.generic     ALL-UNNAMED
               java.xml/com.sun.org.apache.xalan.internal.xsltc.trax ALL-UNNAMED
               java.xml/com.sun.org.apache.xerces.internal.impl      ALL-UNNAMED
               java.xml/com.sun.org.apache.xerces.internal.jaxp      ALL-UNNAMED
               java.xml/com.sun.org.apache.xml.internal.serialize    ALL-UNNAMED
               java.xml/com.sun.org.apache.xml.internal.utils        ALL-UNNAMED

----------System.out:(43/2953)*----------
test transform.Bug6216226Test.test(): failure
java.lang.AssertionError: cannot delete file: T:\\testoutput\\test-support\\jtreg_open_test_jaxp_tier2\\javax\\xml\\jaxp\\unittest\\transform\\Bug6216226Test\\bug6216226.txt
	at org.testng.Assert.fail(Assert.java:99)
	at transform.Bug6216226Test.test(Bug6216226Test.java:64)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:132)
	at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:599)
	at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:174)
	at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
	at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:822)
	at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:147)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
	at org.testng.TestRunner.privateRun(TestRunner.java:764)
	at org.testng.TestRunner.run(TestRunner.java:585)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:384)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:378)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:337)
	at org.testng.SuiteRunner.run(SuiteRunner.java:286)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1218)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1140)
	at org.testng.TestNG.runSuites(TestNG.java:1069)
	at org.testng.TestNG.run(TestNG.java:1037)
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:94)
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:54)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at com.sun.javatest.regtest.agent.MainWrapper$MainThread.run(MainWrapper.java:127)
	at java.base/java.lang.Thread.run(Thread.java:833)

===============================================
javax/xml/jaxp/unittest/transform/Bug6216226Test.java
Total tests run: 1, Passes: 0, Failures: 1, Skips: 0
===============================================

----------System.err:(16/1076)----------
WARNING: java.lang.System::setSecurityManager is deprecated and will be removed in a future release.
WARNING: java.lang.System::setSecurityManager is deprecated and will be removed in a future release.
java.lang.Exception: failures: 1
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:96)
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:54)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at com.sun.javatest.regtest.agent.MainWrapper$MainThread.run(MainWrapper.java:127)
	at java.base/java.lang.Thread.run(Thread.java:833)

JavaTest Message: Test threw exception: java.lang.Exception: failures: 1
JavaTest Message: shutting down test

STATUS:Failed.`main' threw exception: java.lang.Exception: failures: 1
----------rerun:(49/6791)*----------

Since this is a Tier2 test failure, I'm starting this bug at P3.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8266019,,,,,,,,,,,,,,,x86_64,,,,,,,,,windows,,,,,"0|i2t3df:",9223372036854775807,b26,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@11b5a46e,,,,,,,,,"2021-06-03 17:06;dcubed;[~joehw] - Please check out this Tier2 test failure. It looks
like it might be related to your integration of JDK-8266019.;;;","2021-06-04 09:33;roboduke;Changeset: b27599b3
Author:    Joe Wang <joehw@openjdk.org>
Date:      2021-06-04 16:31:59 +0000
URL:       https://git.openjdk.java.net/jdk/commit/b27599b3ec3fd344fa9fa97b7ecde85d5662ca6c
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
hlsprogressbuffer should provide PTS after GStreamer update,JDK-8268219,5051105,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,almatvee,almatvee,almatvee,2021-06-03 15:41,2021-08-19 09:15,2023-10-01 09:57,2021-06-16 14:50,8u311,jfx11.0.12,jfx17,,,,,jfx17,javafx,,0,sn_95,,,,,,,,,,,,,This is follow up issue for JDK-8268152. gstmpegaudioparse no longer outputs PTS for HLS MP3 streams. This issue was workaround in JDK-8268152 by reverting recent change in gstmpegaudioparse. This issue needs to be investigated and fixed appropriately.,,,,,,,,,,,JDK-8268921,JDK-8272727,,,,,,,,,,,,,,,,,,,,,JDK-8268152,,,,JDK-8262365,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2t3cj:",9223372036854775807,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@712e7ab7,,,,,,,,,"2021-06-16 14:49;roboduke;Changeset: 98138c84
Author:    Alexander Matveev <almatvee@openjdk.org>
Date:      2021-06-16 21:48:55 +0000
URL:       https://git.openjdk.java.net/jfx/commit/98138c84a7f286731ad12dd5c533cd3fa265bf56
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Racecondition at ContextClassloaderLocal.java:45,JDK-8268213,5051099,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,ewhelan,shadowbug,shadowbug,2021-06-03 13:58,2021-10-18 20:30,2023-10-01 09:57,2021-07-06 21:17,8u291,,,,,,,8u311,xml,,0,8bpr-critical-approved,bugdb_32962126,noreg-hard,,,,,,,,,,,"Customer observed infrequent Race Conditions on their production environment.

This was previously fixed in the WLS code base and has now been fixed in jdk8u
",,,,,,,,,,,JDK-8269607,JDK-8275452,,,,,,,,,,,,,,,,,,,,,JDK-8269007,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2t3b7:",9223372036854775807,b01,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@603ff938,,,,,,,,,"2021-10-14 07:33;alitvinov;Returning the correct value ""b01"" to the ""Resolved In Build"" field, which was originally set by ""HG Updates"".
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
LambdaMetafactory with invokespecial causes VerificationError,JDK-8268192,5051077,Bug,Resolved,JDK,JDK,software,duke,,,P5,Fixed,dlsmith,dlsmith,dlsmith,2021-06-03 12:46,2021-06-10 18:01,2023-10-01 09:57,2021-06-09 16:58,17,,,,,,,17,core-libs,,0,,,,,,,,,,,,,,"Passing an 'invokespecial' MethodHandle to LambdaMetafactory—for example, 'invokespecial Object.toString:()Ljava/lang/String'—causes an internal VerificationError, because the lambda class, a nestmate of the original class, does not have access to use invokespecial on the original class's super methods.

java.lang.InternalError: java.lang.VerifyError: Bad type on operand stack
Exception Details:
  Location:
    MetafactoryArgValidationTest$C$$Lambda$63+0x00000007c0102208.m(LMetafactoryArgValidationTest$C;)Ljava/lang/String; @1: invokespecial
  Reason:
    Type 'MetafactoryArgValidationTest$C' (current frame, stack[0]) is not assignable to 'MetafactoryArgValidationTest$C$$Lambda$63+0x00000007c0102208'
  Current Frame:
    bci: @1
    flags: { }
    locals: { 'MetafactoryArgValidationTest$C$$Lambda$63+0x00000007c0102208', 'MetafactoryArgValidationTest$C' }
    stack: { 'MetafactoryArgValidationTest$C' }
  Bytecode:
    0000000: 2bb7 0010 b0                           

	at java.base/java.lang.invoke.InnerClassLambdaMetafactory.generateInnerClass(InnerClassLambdaMetafactory.java:417)
	at java.base/java.lang.invoke.InnerClassLambdaMetafactory.spinInnerClass(InnerClassLambdaMetafactory.java:305)
	at java.base/java.lang.invoke.InnerClassLambdaMetafactory.buildCallSite(InnerClassLambdaMetafactory.java:218)
	at java.base/java.lang.invoke.LambdaMetafactory.metafactory(LambdaMetafactory.java:328)
	at MetafactoryArgValidationTest.mfSucceed(MetafactoryArgValidationTest.java:240)
	... 8 more

In practice, this does not arise from Java method references because javac always generates a bridge for a 'super::foo' method reference.
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8246790,,,,,,,JDK-8174222,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2t36b:",9223372036854775807,b26,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@1cfeb1de,,,,,,,,,"2021-06-08 08:10;dlsmith;Was observed a year ago, here: JDK-8246790;;;","2021-06-09 16:58;roboduke;Changeset: 58ba48b7
Author:    Dan Smith <dlsmith@openjdk.org>
Date:      2021-06-09 23:57:41 +0000
URL:       https://git.openjdk.java.net/jdk/commit/58ba48b7b88eff359683aa3271c48b18f1973282
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Update GitHub Actions for jtreg 6,JDK-8268185,5051064,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,jjg,jjg,jjg,2021-06-03 09:21,2022-08-22 08:11,2023-10-01 09:57,2021-06-03 12:40,,,,,,,,17,infrastructure,,0,jdk11u-fix-request,jdk11u-fix-yes,,,,,,,,,,,,"The GitHub Actions for jdk need to be updated for jtreg 6.

* Update version number
* Update build script
* Update tag format",,,,,,,,,,,JDK-8291495,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2t33f:",9223372036854775807,b26,,,,,,,,,,,,"2021-06-03 12:40;roboduke;Changeset: e27c4d46
Author:    Jonathan Gibbons <jjg@openjdk.org>
Date:      2021-06-03 19:39:28 +0000
URL:       https://git.openjdk.java.net/jdk/commit/e27c4d463d920994b79b8163f063ad74f6ee5d59
;;;","2022-07-18 07:00;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk11u-dev/pull/1239
Date: 2022-07-18 13:52:46 +0000;;;","2022-07-28 02:37;gdams;Fix Request (jdk11u)

Required as part of the jtreg 6 backport effort. Backport doesn't quite apply cleanly (there is a diff between sh and bash)

All GH actions builds/tests pass.

Risk is very low as it only affects the GitHub actions scripts;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
tools/launcher/VersionCheck.java fails for jextract,JDK-8268183,5051062,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,sundar,sundar,sundar,2021-06-03 08:11,2021-06-03 09:19,2023-10-01 09:57,2021-06-03 09:19,repo-panama,,,,,,,,tools,,0,,,,,,,,,,,,,,"tools/launcher/VersionCheck.java fails for jextract

1) jextract should be excluded for -version option.
2) jextract output contains WARNING (about incubator module) for -J-version option. That warning has to be filtered.

For uniformity, jextract should support --version option like other JDK bin tools.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,generic,,,,,,,,,generic,,,,,"0|i2t32z:",9223372036854775807,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@2251e2f8,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
The system lookup can not find stdio functions such as printf on Windows 10,JDK-8268169,5051046,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,jvernee,jvernee,jvernee,2021-06-03 04:18,2021-06-07 05:59,2023-10-01 09:57,2021-06-04 11:37,repo-panama,,,,,,,,tools,,0,foreign-memaccess+abi,,,,,,,,,,,,,"The current implementation of CLinker::systemLookup can not find stdio functions like printf on Windows 10.

On Windows 10, we load ucrtbase.dll as a library for the system lookup. But, this dll doesn't contain many stdio functions, because they are implemented as inline functions in the standard library header files.

We can use a fallback library that exposes pointer to these functions. The fallback library would be compiled by a native compiler, which would generate the needed code for the inline functions in the fallback library. The pointer can then be looked up by the system lookup.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8268327,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2t2zf:",9223372036854775807,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@2251e2f8,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
MultipleLogins.java failure on macosx-aarch64,JDK-8268167,5051043,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,coffeys,coffeys,coffeys,2021-06-03 02:21,2021-07-06 07:24,2023-10-01 09:57,2021-06-03 06:48,,,,,,,,17,security-libs,,0,noreg-self,ursqe-triaged,,,,,,,,,,,,"Exception in thread ""main"" java.lang.RuntimeException: issue setting up config
	at MultipleLogins.main(MultipleLogins.java:53)


===
String nssConfig = PKCS11Test.getNssConfig(); 
===
above call fails in this environment. Perhaps we should just return silently like other tests.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8268190,,,,JDK-8240256,,,,,,,,,,,,,,,aarch64,,,,,,,,,os_x,,,,,"0|i2t2yr:",9223372036854775807,b26,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@7cafbd52,,,,,,,,,"2021-06-03 02:47;dholmes;Warning: unsupported OS: MacOSX-aarch64-64, please initialize NSS librarys location firstly, skipping test;;;","2021-06-03 06:48;roboduke;Changeset: eb385c0d
Author:    Sean Coffey <coffeys@openjdk.org>
Date:      2021-06-03 13:47:47 +0000
URL:       https://git.openjdk.java.net/jdk/commit/eb385c0de2026d6b184ce0c98ff421a4da95e1b1
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
AsyncLogging will crash if rotate() fails ,JDK-8268165,5051041,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,xliu,xliu,xliu,2021-06-03 02:20,2021-06-16 09:04,2023-10-01 09:57,2021-06-08 00:20,17,,,,,,,17,hotspot,,0,logging,,,,,,,,,,,,,"AsyncLogWriter::write() invokes LogFileOutput::write_blocking() directly.

int LogFileOutput::write_blocking(const LogDecorations& decorations, const char* msg) {
  _rotation_semaphore.wait();
  int written = LogFileStreamOutput::write(decorations, msg);
  if (written > 0) {
    _current_size += written;

    if (should_rotate()) {
      rotate();
    }
  }
  _rotation_semaphore.signal();

  return written;
}

However, it doesn't put an exception case into consideraton.
rotate() may fail before and leave _stream NULL. 

LogFileStreamOutput::write() will crash at flockfile(NULL)
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8229517,,,,,,,,,,,,,,,,,,,generic,,,,,,,17,,generic,,,,,"0|i2t2yb:",9223372036854775807,b26,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,,,"2021-06-08 00:20;roboduke;Changeset: 81054789
Author:    Xin Liu <xliu@openjdk.org>
Committer: Yasumasa Suenaga <ysuenaga@openjdk.org>
Date:      2021-06-08 07:20:13 +0000
URL:       https://git.openjdk.java.net/jdk/commit/81054789a32f29b06f0804e09aabd7cf17464778
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
jextract tool provider should avoid security manager usage,JDK-8268160,5051033,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,sundar,sundar,sundar,2021-06-02 23:24,2021-06-03 02:53,2023-10-01 09:57,2021-06-03 02:53,repo-panama,,,,,,,,tools,,0,,,,,,,,,,,,,,"jextract tool provider should avoid security manager usage. This leads to build break due to ""removal"" deprecation warning.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,generic,,,,,,,,,generic,,,,,"0|i2t2wj:",9223372036854775807,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@2251e2f8,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Partial backport of JDK-8214074,JDK-8268158,5051032,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,pkumaraswamy,pkumaraswamy,pkumaraswamy,2021-06-02 22:40,2021-06-29 00:56,2023-10-01 09:57,2021-06-14 22:27,,,,,,,,8u311,security-libs,,0,,,,,,,,,,,,,,"Partial backport of JDK-8214074
Only GHASH.java changes are brought in from JDK-8214074",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8264753,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2t2wb:",9223372036854775807,b01,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
gstmpegaudioparse does not provides timestamps for HLS MP3 streams,JDK-8268152,5051020,Bug,Resolved,JDK,JDK,software,duke,,,P2,Fixed,almatvee,almatvee,almatvee,2021-06-02 18:00,2021-06-23 06:19,2023-10-01 09:57,2021-06-04 17:37,8u301,jfx11.0.12,jfx17,,,,,jfx17,javafx,,0,CPU21_07-critical-approved,CPU21_07-critical-SQE-OK,regression,regression_8262365,sn_94,sqebug,,,,,,,,"With recent GStreamer update gstmpegaudioparse no longer provides audio buffers with valid timestamps. This issue is only reproducible with MP3 HTTP Live Stream. With regular MP3 streams it works fine. This issue was noticed on Linux, but should affect all platforms. Most likely other platforms audio decoders handle such cases better. Easy check to verify if we producing audio buffers with valid PTS is to adjust playback rate and if audio plays with same rate, then PTS are invalid (no PTS).",,,,,,,,,,,JDK-8268281,JDK-8268344,JDK-8268287,,,,,,,,,,,,,,,,,JDK-8267992,,,,,,,JDK-8262365,JDK-8268219,,,,,,,,,,,,,,,,,,,,,,,linux,,,,,"0|i2t2tn:",9223372036854775807,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@712e7ab7,,,,,,,,,"2021-06-03 01:54;almatvee;Current proposed fix is to revert recent change done in gstmpegaudioparse. Unfortunately I did not figure out why it behaves this way. Most likely issue is on our side inside javasource or hlsprogressbuffer, however it easy for now to revert change in GStreamer and revisit our plug-ins later for why they not compatible with recent gstmpegaudioparse changes.

In particular following changeset in GStreamer will be reverted:
https://gitlab.freedesktop.org/gstreamer/gstreamer/-/commit/baa5aae24b94ae24b4c96b3a7e39b399b99ae40e
;;;","2021-06-03 15:53;almatvee;Filed follow up issue to find appropriate fix for this issue (JDK-8268219).;;;","2021-06-04 17:37;roboduke;Changeset: ee032387
Author:    Alexander Matveev <almatvee@openjdk.org>
Date:      2021-06-05 00:36:54 +0000
URL:       https://git.openjdk.java.net/jfx/commit/ee032387badadb41ed36de745aea3c0a074b79bd
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
tier2: test/jdk/tools/jpackage/junit/junit.java needs updating for jtreg 6,JDK-8268150,5051016,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,jjg,jjg,jjg,2021-06-02 16:31,2021-06-10 17:52,2023-10-01 09:57,2021-06-02 18:10,17,,,,,,,17,tools,,0,noreg-self,tier2,,,,,,,,,,,,"Sample error:
test/jdk/tools/jpackage/junit/jdk/jpackage/internal/PathGroupTest.java:37: error: package org.hamcrest does not exist
import static org.hamcrest.CoreMatchers.equalTo;
                          ^


This test is a wrapper around a shell script that invokes JUnit directly.
The `@library` needs to be updated to include the new hamcrest.jar file.
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2t2sr:",9223372036854775807,b26,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@3656b41f,,,,,,,,,"2021-06-02 18:10;roboduke;Changeset: ef01e478
Author:    Jonathan Gibbons <jjg@openjdk.org>
Date:      2021-06-03 01:09:49 +0000
URL:       https://git.openjdk.java.net/jdk/commit/ef01e478586c5676747195ea67c1864639305c0f
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
unchecked warnings handle ? and ? extends Object differently,JDK-8268148,5051014,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,vromero,cushon,cushon,2021-06-02 15:49,2021-09-08 22:56,2023-10-01 09:57,2021-09-03 08:22,11,17,8,,,,,18,tools,,0,,,,,,,,,,,,,,"Per 4.5.1, the wildcard ? extends Object is equivalent to the unbounded wildcard ?.

In the following example javac emits a different unchecked in one example but not the other, and the only difference is the use of ? vs. ? extends Object.

```
import java.util.List;

class T {
  void f(List<? extends Object> x) {}

  void g(List<?> x) {}

  void h(List<String> x) {
    f((List) x);
    g((List) x);
  }
}
```

$ javac -fullversion -Xlint:all T.java
javac full version ""17-ea+24-2164""
T.java:9: warning: [unchecked] unchecked method invocation: method f in class T is applied to given types
    f((List) x);
     ^
  required: List<? extends Object>
  found:    List
T.java:9: warning: [unchecked] unchecked conversion
    f((List) x);
      ^
  required: List<? extends Object>
  found:    List
2 warnings",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-6480391,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2t2sb:",9223372036854775807,b14,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4dca67bd,,,,,,,,,"2021-07-12 12:29;dlsmith;Yes, per 4.5.1 and JDK-6480391, '? extends Object' is an ""unbounded wildcard"", so 5.1.9 says no unchecked warning should occur.;;;","2021-09-03 08:22;roboduke;Changeset: ff4018bc
Author:    Vicente Romero <vromero@openjdk.org>
Date:      2021-09-03 15:20:23 +0000
URL:       https://git.openjdk.java.net/jdk/commit/ff4018bc867841b566d619029fb637a128bc39a7
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
need to update reference to testng module for jtreg6,JDK-8268147,5051012,Bug,Resolved,JDK,JDK,software,duke,,,P2,Fixed,jjg,jjg,jjg,2021-06-02 14:58,2023-05-16 05:31,2023-10-01 09:57,2021-06-02 15:34,17,,,,,,,17,core-libs,,0,noreg-self,tier1,ursqe-triaged,,,,,,,,,,,"test/jdk/java/foreign/handles/lookup_module/module-info.java:25: error: module not found: testng
    requires testng;
             ^
warning: using incubating module(s): jdk.incubator.foreign
1 error
1 warning",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8266254,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2t2rv:",9223372036854775807,b26,,,,,,,,,,,,"2021-06-02 15:33;roboduke;Changeset: d46a2c8e
Author:    Jonathan Gibbons <jjg@openjdk.org>
Date:      2021-06-02 22:33:16 +0000
URL:       https://git.openjdk.java.net/jdk/commit/d46a2c8ecfac785ae2c935a507c3bcae2e76aba9
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
fix for JDK-8266254 fails validate-source,JDK-8268146,5051011,Bug,Resolved,JDK,JDK,software,duke,,,P1,Fixed,jjg,dcubed,dcubed,2021-06-02 14:31,2021-06-10 17:52,2023-10-01 09:57,2021-06-02 14:51,17,,,,,,,17,infrastructure,,0,tier1,,,,,,,,,,,,,"[2021-06-02T21:27:25,389Z] BAD COPYRIGHT LINE: /opt/mach5/mesos/work_dir/slaves/3c846bae-ce30-4a97-93ee-9fef4497ccb6-S79047/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/f307885d-feb6-4518-93f7-872547c2c7bb/runs/a00073c1-ee19-4fa0-bb2f-cdbcb6e1b841/workspace/open/test/lib-test/TEST.ROOT
[2021-06-02T21:27:25,389Z] 1 header format error(s).",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8266254,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2t2rn:",9223372036854775807,b26,,,,,,,,,,,,"2021-06-02 14:37;dcubed;Context diff for the proposed fix:

$ git diff
diff --git a/test/lib-test/TEST.ROOT b/test/lib-test/TEST.ROOT
index ca43444cf8c..b95677fb90d 100644
--- a/test/lib-test/TEST.ROOT
+++ b/test/lib-test/TEST.ROOT
@@ -1,5 +1,5 @@
 #
-# Copyright (c) 2020, 2021 Oracle and/or its affiliates. All rights reserved.
+# Copyright (c) 2020, 2021, Oracle and/or its affiliates. All rights reserved.
 # DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 #
 # This code is free software; you can redistribute it and/or modify it;;;","2021-06-02 14:51;roboduke;Changeset: 76fdf2c8
Author:    Daniel D. Daugherty <dcubed@openjdk.org>
Date:      2021-06-02 21:50:43 +0000
URL:       https://git.openjdk.java.net/jdk/commit/76fdf2c89bb7df9140438fcbaf16ea5fda024551
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
CDS ArchiveBuilder may reference unloaded classes,JDK-8268139,5050999,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,iklam,iklam,iklam,2021-06-02 11:21,2021-06-15 09:33,2023-10-01 09:57,2021-06-05 08:23,,,,,,,,17,hotspot,,0,cds,zgc,,,,,,,,,,,,"During CDS dump, we enter a safepoint (e.g., VM_PopulateDynamicDumpSharedSpace) and run ArchiveBuilder::gather_source_objs() to collect all classes to be dumped. However, some of these classes may belong to custom class loaders that are no longer referenced. While we are still inside the safepoint, concurrent GC operations may free these class loaders (see JDK-8267879). Thus ArchiveBuilder may end up referencing unloaded classes.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8268778,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2t2pf:",9223372036854775807,b26,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,,,"2021-06-02 11:32;iklam;SystemDictionaryShared::dumptime_classes_do should iterate over only classes that are still alive. This can be done by checking Klass::class_loader_data()->is_alive(). This way, ArchiveBuilder::gather_source_objs() should gather only classes loaded by the live CLDs.

This assumes that the liveness of CLDs will not change while the safepoint is active.;;;","2021-06-05 08:23;roboduke;Changeset: 91f9adc5
Author:    Ioi Lam <iklam@openjdk.org>
Date:      2021-06-05 15:22:38 +0000
URL:       https://git.openjdk.java.net/jdk/commit/91f9adc5f55b42d30e46d99e22a8d0567fa5c146
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
docs build error after JDK-8263332 integration,JDK-8268138,5050998,Bug,Resolved,JDK,JDK,software,duke,,,P1,Fixed,egahlin,dcubed,dcubed,2021-06-02 11:01,2021-06-16 13:32,2023-10-01 09:57,2021-06-02 12:44,17,,,,,,,17,hotspot,,0,noreg-build,tier1,,,,,,,,,,,,"[2021-06-02T17:48:01,613Z] Generating JDK_API javadoc for 60 modules
[2021-06-02T17:48:39,148Z] /opt/mach5/mesos/work_dir/slaves/3c846bae-ce30-4a97-93ee-9fef4497ccb6-S79032/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/477a0a91-f6bf-424c-b1b8-4c56e20e6545/runs/7412e478-39b3-4c85-983f-c1c6544c9709/workspace/open/src/jdk.jfr/share/classes/jdk/jfr/consumer/RecordingStream.java:426: error: reference not found
[2021-06-02T17:48:39,148Z]      * @see RecordingStream#setMaxSize(Duration)
[2021-06-02T17:48:39,148Z]             ^
[2021-06-02T17:48:39,336Z] /opt/mach5/mesos/work_dir/slaves/3c846bae-ce30-4a97-93ee-9fef4497ccb6-S79032/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/477a0a91-f6bf-424c-b1b8-4c56e20e6545/runs/7412e478-39b3-4c85-983f-c1c6544c9709/workspace/open/src/jdk.management.jfr/share/classes/jdk/management/jfr/RemoteRecordingStream.java:585: error: reference not found
[2021-06-02T17:48:39,336Z]      * @see RemoteRecordingStream#setMaxSize(Duration)
[2021-06-02T17:48:39,336Z]             ^
[2021-06-02T17:48:55,259Z] Creating javase-17-ea+25_linux-x64_doc-api-spec.tar.gz
[2021-06-02T17:48:55,885Z] Creating jdk-reference-17-ea+25_linux-x64_doc-api-spec.tar.gz
[2021-06-02T17:49:00,305Z] 2 errors
[2021-06-02T17:49:00,417Z] gmake[3]: *** [/opt/mach5/mesos/work_dir/slaves/3c846bae-ce30-4a97-93ee-9fef4497ccb6-S79032/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/477a0a91-f6bf-424c-b1b8-4c56e20e6545/runs/7412e478-39b3-4c85-983f-c1c6544c9709/workspace/build/docs/support/docs/_javadoc_JDK_API_exec.marker] Error 1
[2021-06-02T17:49:00,484Z] gmake[2]: *** [docs-jdk-api-javadoc] Error 1
[2021-06-02T17:49:00,484Z] gmake[2]: *** Waiting for unfinished jobs....
[2021-06-02T17:49:01,644Z] 
[2021-06-02T17:49:01,644Z] ERROR: Build failed for target 'default (all-docs-bundles)' in configuration 'docs' (exit code 2) 
[2021-06-02T17:49:01,652Z] Stopping sjavac server",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8263332,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2t2p7:",9223372036854775807,b26,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@42995637,,,,,,,,,"2021-06-02 11:02;dcubed;[~egahlin] - Can you take a look?;;;","2021-06-02 12:44;roboduke;Changeset: 375f8f3b
Author:    Erik Gahlin <egahlin@openjdk.org>
Date:      2021-06-02 19:43:36 +0000
URL:       https://git.openjdk.java.net/jdk/commit/375f8f3bffa7bc68a4c355195caa9d633d1cf120
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Update java/net/Authenticator tests to eliminate dependency on sun.net.www.MessageHeader and some other internal APIs,JDK-8268133,5050990,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,mchhipa,mchhipa,mchhipa,2021-06-02 10:12,2021-08-27 02:23,2023-10-01 09:57,2021-06-03 05:52,,,,,,,,17,core-libs,,0,7-wnf,,,,,,,,,,,,,"
There are some regression tests depending on sun.net.www.MessageHeader, the internal API dependency should be removed:

tests/jdk/java/net/Authenticator/B4678055.java
tests/jdk/java/net/Authenticator/B4722333.java
tests/jdk/java/net/Authenticator/B4759514.java
tests/jdk/java/net/Authenticator/B4962064.java
ests/jdk/java/net/Authenticator/B4933582.java



",,,,,,,,,,,JDK-8268751,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2t2nf:",9223372036854775807,b26,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@446e124a,,,,,,,,,"2021-06-03 05:52;roboduke;Changeset: 338dae4d
Author:    Mahendra Chhipa <mahendra.chhipa@oracle.com>
Committer: Mark Sheppard <msheppar@openjdk.org>
Date:      2021-06-03 12:51:48 +0000
URL:       https://git.openjdk.java.net/jdk/commit/338dae4d36e848b1e1169c5b1bb2bfe70283e637
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
2 java/foreign tests timed out,JDK-8268131,5050987,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,mcimadamore,dcubed,dcubed,2021-06-02 09:48,2021-06-10 17:53,2023-10-01 09:57,2021-06-03 09:20,17,,,,,,,17,core-libs,,0,tier4,,,,,,,,,,,,,"The following two tests timed out in the JDK17 CI:

java/foreign/TestUpcall.java
java/foreign/TestDowncall.java

Here's a snippet from the TestUpcall.java log file:

test TestUpcall.testUpcalls(8922, ""f14_D_DSF_IPF"", NON_VOID, [DOUBLE, STRUCT, FLOAT], [INT, POINTER, FLOAT]): success
test TestUpcall.testUpcalls(8923, ""f14_D_DSF_IPD"", NON_VOID, [DOUBLE, STRUCT, FLOAT], [INT, POINTER, DOUBLE]): success
test TestUpcall.testUpcalls(8924, ""f14_D_DSF_IPP"", NON_VOID, [DOUBLE, STRUCT, FLOAT], [INT, POINTER, POINTER]): success
test TestUpcall.testUpcalls(8925, ""f14_D_DSF_FII"", NON_VOID, [DOUBLE, STRUCT, FLOAT], [FLOAT, INT, INT]): success
test TestUpcall.testUpcalls(8926, ""f14_D_DSF_FIF"", NON_VOID, [DOUBLE, STRUCT, FLOAT], [FLOAT, INT, FLOAT]): success
test TestUpcall.testUpcalls(8927, ""f14_D_DSF_FID"", NON_VOID, [DOUBLE, STRUCT, FLOAT], [FLOAT, INT, DOUBLE]): success
----------System.err:(1/56)----------
WARNING: Using incubator modules: jdk.incubator.foreign
----------rerun:(40/5792)*----------

<snip>

result: Error. Program `/opt/mach5/mesos/work_dir/jib-master/install/jdk-17+25-2251/linux-x64-debug.jdk/jdk-17/fastdebug/bin/java' timed out (timeout set to 480000ms, elapsed time including timeout handling was 543255ms).


Here's a snippet from the TestDowncall.java log file:

test TestDowncall.testDowncallNoScope(12091, ""f20_S_SSS_PDD"", NON_VOID, [STRUCT, STRUCT, STRUCT], [POINTER, DOUBLE, DOUBLE]): success
test TestDowncall.testDowncallNoScope(12092, ""f20_S_SSS_PDP"", NON_VOID, [STRUCT, STRUCT, STRUCT], [POINTER, DOUBLE, POINTER]): success
test TestDowncall.testDowncallNoScope(12093, ""f20_S_SSS_PPI"", NON_VOID, [STRUCT, STRUCT, STRUCT], [POINTER, POINTER, INT]): success
test TestDowncall.testDowncallNoScope(12094, ""f20_S_SSS_PPF"", NON_VOID, [STRUCT, STRUCT, STRUCT], [POINTER, POINTER, FLOAT]): success
test TestDowncall.testDowncallNoScope(12095, ""f20_S_SSS_PPD"", NON_VOID, [STRUCT, STRUCT, STRUCT], [POINTER, POINTER, DOUBLE]): success
test TestDowncall.testDowncallNoScope(12096, ""f20_S_SSS_PPP"", NON_VOID, [STRUCT, STRUCT, STRUCT], [POINTER, POINTER, POINTER]): success

===============================================
java/foreign/TestDowncall.java
Total tests run: 24194, Failures: 0, Skips: 0
===============================================

----------System.err:(1/56)----------
WARNING: Using incubator modules: jdk.incubator.foreign
----------rerun:(40/5810)*----------

<snip>

result: Error. Program `/opt/mach5/mesos/work_dir/jib-master/install/jdk-17+25-2251/linux-x64-debug.jdk/jdk-17/fastdebug/bin/java' timed out (timeout set to 480000ms, elapsed time including timeout handling was 517205ms).


It looks like TestDowncall.java managed to pass while
the timeout handler was running.

The test task's JVM args are: -Xcheck:jni",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8268227,,,,JDK-8266074,JDK-8264774,,,,,,,,,,,,,,x86_64,,,,,,,,,linux,,,,,"0|i2t2mr:",9223372036854775807,b26,,,,,,,,,,,,"2021-06-02 09:50;dcubed;[~mcimadamore] - Can you take a look?;;;","2021-06-02 14:08;mcimadamore;Thanks for the report, we will need to increase the timeout on these.
See: https://github.com/openjdk/jdk/pull/4321;;;","2021-06-02 16:17;dcubed;[~jwilhelm] - Why did you mark this as intermittent? ;;;","2021-06-02 18:26;jwilhelm;[~dcubed] My bad. I read the date wrong.;;;","2021-06-03 09:19;roboduke;Changeset: 52d8215a
Author:    Maurizio Cimadamore <mcimadamore@openjdk.org>
Date:      2021-06-03 16:19:35 +0000
URL:       https://git.openjdk.java.net/jdk/commit/52d8215a1ec42d67217505fe3167c70460f5a639
;;;","2021-06-03 11:59;dcubed;The fix for this bug is in jdk-17+26-2286.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,
LibraryLookup::ofDefault leaks symbols from loaded libraries,JDK-8268129,5050985,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,mcimadamore,mcimadamore,mcimadamore,2021-06-02 09:40,2021-06-10 17:54,2023-10-01 09:57,2021-06-04 05:54,,,,,,,,17,core-libs,,0,,,,,,,,,,,,,,"On Windows and Mac, default lookup allows looking up symbols from any loaded library in the process. On Linux, it does not work that way. We need a stable, portable solution for default lookup.

One of the main reasons for default lookup is to allow uses to use standard C runtime library functions (from stdlib.h, stdio.h, math.h etc.) without having to load platform specific C runtime library / libraries. ",,,,,,,,,,,,,,,,,,,,,,,,JDK-8268130,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2t2mb:",9223372036854775807,b26,,,,,,,,,,,,"2021-06-04 05:54;roboduke;Changeset: 59a539fe
Author:    Maurizio Cimadamore <mcimadamore@openjdk.org>
Date:      2021-06-04 12:53:17 +0000
URL:       https://git.openjdk.java.net/jdk/commit/59a539fef12dec6ba8af8a41000829402e7e9b72
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
ProviderConfig deadlock in JDK 8u291,JDK-8268128,5050984,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,coffeys,shadowbug,shadowbug,2021-06-02 09:38,2021-07-27 12:21,2023-10-01 09:57,2021-06-09 00:08,8u291,,,,,,,8u311,security-libs,,0,11-na,8bpr-critical-approved,bugdb_32956506,regression,,,,,,,,,,"""Thread-8"":
 waiting to lock monitor 0x00005631e0b45f88 (object 0x00000000ee0b2330, a sun.security.jca.ProviderConfig),
 which is held by ""Thread-5""
""Thread-5"":
 waiting to lock monitor 0x00005631e0b505f8 (object 0x00000000ee0a4b38, a java.lang.Class),
 which is held by ""Thread-8""
Java stack information for the threads listed above:
===================================================
""Thread-8"":
    at sun.security.jca.ProviderConfig.getProvider(ProviderConfig.java:168)
    - waiting to lock <0x00000000ee0b2330> (a sun.security.jca.ProviderConfig)
    at sun.security.jca.ProviderList.loadAll(ProviderList.java:282)
    at sun.security.jca.ProviderList.removeInvalid(ProviderList.java:299)
    at sun.security.jca.Providers.getFullProviderList(Providers.java:164)
    - locked <0x00000000ee0a4b38> (a java.lang.Class for sun.security.jca.Providers)
    at java.security.Security.getProviders(Security.java:454)
    at sun.security.x509.AlgorithmId.algOID(AlgorithmId.java:619)
    at sun.security.x509.AlgorithmId.get(AlgorithmId.java:444)
    at sun.security.pkcs.SignerInfo.verify(SignerInfo.java:379)
    at sun.security.pkcs.PKCS7.verify(PKCS7.java:579)
    at sun.security.pkcs.PKCS7.verify(PKCS7.java:596)
    at sun.security.util.SignatureFileVerifier.processImpl(SignatureFileVerifier.java:283)
    at sun.security.util.SignatureFileVerifier.process(SignatureFileVerifier.java:259)
    at java.util.jar.JarVerifier.processEntry(JarVerifier.java:275)
    at java.util.jar.JarVerifier.update(JarVerifier.java:230)
    at java.util.jar.JarFile.initializeVerifier(JarFile.java:384)
    at java.util.jar.JarFile.getInputStream(JarFile.java:451)
    - locked <0x00000000e0be4af8> (a com.oracle.classloader.JarCodeSource$1)
    at com.oracle.classloader.JarCodeSource$3.apply(JarCodeSource.java:384)
    at com.oracle.classloader.JarCodeSource$3.apply(JarCodeSource.java:381)
    at com.oracle.classloader.JarCodeSource.withJarFile(JarCodeSource.java:337)
    at com.oracle.classloader.JarCodeSource.getJarInputStream(JarCodeSource.java:381)
    at com.oracle.classloader.JarURLHandler$Connection.getInputStream(JarURLHandler.java:208)
    at java.net.URL.openStream(URL.java:1092)
    at weblogic.management.provider.internal.BeanInfoAccessImpl.discoverBeanInfoFactories(BeanInfoAccessImpl.java:154)
    at weblogic.management.provider.internal.BeanInfoAccessSingleton$SINGLETON.<clinit>(BeanInfoAccessSingleton.java:36)
    at weblogic.management.provider.internal.BeanInfoAccessSingleton.getInstance(BeanInfoAccessSingleton.java:42)
    at weblogic.management.provider.internal.BeanInfoAccessService.start(BeanInfoAccessService.java:47)
    at weblogic.server.AbstractServerService.postConstruct(AbstractServerService.java:76)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
    at java.lang.reflect.Method.invoke(Method.java:498)
    at org.glassfish.hk2.utilities.reflection.ReflectionHelper.invoke(ReflectionHelper.java:1287)
    at org.jvnet.hk2.internal.ClazzCreator.postConstructMe(ClazzCreator.java:333)
    at org.jvnet.hk2.internal.ClazzCreator.create(ClazzCreator.java:375)
    at org.jvnet.hk2.internal.SystemDescriptor.create(SystemDescriptor.java:487)
    at org.glassfish.hk2.runlevel.internal.AsyncRunLevelContext.findOrCreate(AsyncRunLevelContext.java:305)
    at org.glassfish.hk2.runlevel.RunLevelContext.findOrCreate(RunLevelContext.java:85)
    at org.jvnet.hk2.internal.Utilities.createService(Utilities.java:2126)
    at org.jvnet.hk2.internal.ServiceHandleImpl.getService(ServiceHandleImpl.java:116)
    - locked <0x00000000f2419b48> (a java.lang.Object)
    at org.jvnet.hk2.internal.ServiceHandleImpl.getService(ServiceHandleImpl.java:90)
    at org.glassfish.hk2.runlevel.internal.CurrentTaskFuture$QueueRunner.oneJob(CurrentTaskFuture.java:1237)
    at org.glassfish.hk2.runlevel.internal.CurrentTaskFuture$QueueRunner.run(CurrentTaskFuture.java:1168)
    at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
    at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
    at java.lang.Thread.run(Thread.java:748)
""Thread-5"":
    at sun.security.jca.Providers.endThreadProviderList(Providers.java:232)
    - waiting to lock <0x00000000ee0a4b38> (a java.lang.Class for sun.security.jca.Providers)
    at sun.security.jca.Providers.stopJarVerification(Providers.java:127)
    at sun.security.util.SignatureFileVerifier.process(SignatureFileVerifier.java:261)
    at java.util.jar.JarVerifier.processEntry(JarVerifier.java:318)
    at java.util.jar.JarVerifier.update(JarVerifier.java:230)
    at java.util.jar.JarFile.initializeVerifier(JarFile.java:384)
    at java.util.jar.JarFile.ensureInitialization(JarFile.java:615)
    - locked <0x00000000f2746e68> (a java.util.jar.JarFile)
    at java.util.jar.JavaUtilJarAccessImpl.ensureInitialization(JavaUtilJarAccessImpl.java:69)
    at sun.misc.URLClassPath$JarLoader$2.getManifest(URLClassPath.java:993)
    at java.net.URLClassLoader.defineClass(URLClassLoader.java:451)
    at java.net.URLClassLoader.access$100(URLClassLoader.java:74)
    at java.net.URLClassLoader$1.run(URLClassLoader.java:369)
    at java.net.URLClassLoader$1.run(URLClassLoader.java:363)
    at java.security.AccessController.doPrivileged(Native Method)
    at java.net.URLClassLoader.findClass(URLClassLoader.java:362)
    at java.lang.ClassLoader.loadClass(ClassLoader.java:418)
    - locked <0x00000000f2746b38> (a java.lang.Object)
    at java.lang.ClassLoader.loadClass(ClassLoader.java:351)
    at com.oracle.classloader.search.SearchSystemLoader.loadClass(SearchSystemLoader.java:101)
    at com.oracle.classloader.search.SearchSequence.loadClass(SearchSequence.java:130)
    at com.oracle.classloader.PolicyClassLoader$1.run(PolicyClassLoader.java:389)
    at com.oracle.classloader.PolicyClassLoader$1.run(PolicyClassLoader.java:387)
    at java.security.AccessController.doPrivileged(Native Method)
    at com.oracle.classloader.PolicyClassLoader.findClass(PolicyClassLoader.java:387)
    at com.oracle.classloader.PolicyClassLoader.loadClass(PolicyClassLoader.java:371)
    - locked <0x00000000f2746a50> (a java.lang.Object)
    at com.oracle.classloader.weblogic.LaunchClassLoader.loadClass(LaunchClassLoader.java:55)
    at java.lang.ClassLoader.loadClass(ClassLoader.java:351)
    at sun.security.jca.ProviderConfig$2.run(ProviderConfig.java:215)
    at sun.security.jca.ProviderConfig$2.run(ProviderConfig.java:206)
    at java.security.AccessController.doPrivileged(Native Method)
    at sun.security.jca.ProviderConfig.doLoadProvider(ProviderConfig.java:206)
    at sun.security.jca.ProviderConfig.getProvider(ProviderConfig.java:187)
    - locked <0x00000000ee0b2330> (a sun.security.jca.ProviderConfig)
    at sun.security.jca.ProviderList.getProvider(ProviderList.java:233)
    at sun.security.jca.ProviderList$ServiceList.tryGet(ProviderList.java:434)
    at sun.security.jca.ProviderList$ServiceList.access$200(ProviderList.java:376)
    at sun.security.jca.ProviderList$ServiceList$1.hasNext(ProviderList.java:486)
    at javax.crypto.Mac.getInstance(Mac.java:174)
    at com.bea.common.security.utils.HMAC.init(HMAC.java:31)
    at weblogic.security.HMAC.init(HMAC.java:26)
    at weblogic.security.EarlySecurityInitializationService.start(EarlySecurityInitializationService.java:22)
    at weblogic.server.AbstractServerService.postConstruct(AbstractServerService.java:76)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
    at java.lang.reflect.Method.invoke(Method.java:498)
    at org.glassfish.hk2.utilities.reflection.ReflectionHelper.invoke(ReflectionHelper.java:1287)
    at org.jvnet.hk2.internal.ClazzCreator.postConstructMe(ClazzCreator.java:333)
    at org.jvnet.hk2.internal.ClazzCreator.create(ClazzCreator.java:375)
    at org.jvnet.hk2.internal.SystemDescriptor.create(SystemDescriptor.java:487)
    at org.glassfish.hk2.runlevel.internal.AsyncRunLevelContext.findOrCreate(AsyncRunLevelContext.java:305)
    at org.glassfish.hk2.runlevel.RunLevelContext.findOrCreate(RunLevelContext.java:85)
    at org.jvnet.hk2.internal.Utilities.createService(Utilities.java:2126)
    at org.jvnet.hk2.internal.ServiceHandleImpl.getService(ServiceHandleImpl.java:116)
    - locked <0x00000000f2419f38> (a java.lang.Object)
    at org.jvnet.hk2.internal.ServiceHandleImpl.getService(ServiceHandleImpl.java:90)
    at org.glassfish.hk2.runlevel.internal.CurrentTaskFuture$QueueRunner.oneJob(CurrentTaskFuture.java:1237)
    at org.glassfish.hk2.runlevel.internal.CurrentTaskFuture$QueueRunner.run(CurrentTaskFuture.java:1168)
    at org.glassfish.hk2.runlevel.internal.CurrentTaskFuture$UpOneLevel.run(CurrentTaskFuture.java:786)
    at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
    at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
    at java.lang.Thread.run(Thread.java:748)",,,,,,,,,,,JDK-8268442,JDK-8269609,JDK-8268767,,,,,,,,,,,,,,,,,,,,JDK-8268441,,,,JDK-8266929,JDK-8268682,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2t2m3:",9223372036854775807,b01,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@2ec284e3,,,,,,,,,"2021-06-08 07:08;coffeys;The algorithm triggering the early AlgorithmId table initialization in this case is SHA512withRSA;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Shenandoah: Heap size may be too small for region to align to large page size,JDK-8268127,5050983,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,zgu,zgu,zgu,2021-06-02 09:29,2021-06-16 05:20,2023-10-01 09:57,2021-06-08 13:32,11-pool,16-pool,17,8-shenandoah,,,,17,hotspot,,0,azul-interest,gc-shenandoah,jdk11u-fix-request,jdk11u-fix-yes,jdk16u-fix-request,redhat-interest,,,,,,,,"TestLargePages.java failed on Linux AArch64, where the large page size is 500M and heap size is only 131M.


# To suppress the following error report, specify this argument
# after -XX: or in .hotspotrc:  SuppressErrorAt=/shenandoahHeapRegion.cpp:574
#
# A fatal error has been detected by the Java Runtime Environment:
#
#  Internal Error
(/home/tester/ojdkbuild-tmp-ramdisk/openjdk/src/hotspot/share/gc/shenandoah/shenandoahHeapRegion.cpp:574),
pid=3239, tid=3242
#  guarantee(RegionCount >= MIN_NUM_REGIONS) failed: Should have at
least minimum regions
#
# JRE version:  (11.0.12) (fastdebug build )
# Java VM: OpenJDK 64-Bit Server VM (fastdebug
11.0.12-internal+0-adhoc.tester.openjdk, mixed mode, sharing, tiered,
compressed oops, shenandoah gc, linux-aarch64)
# No core dump will be written. Core dumps have been disabled. To
enable core dumping, try ""ulimit -c unlimited"" before starting Java
again
#
# An error report file with more information is saved as:
# /mnt/ramdisk/java-11-openjdk-11.0.12.4_ea-0.vanilla.tagly.ojdk11~u~upstream.hotspot.fastdebug.sdk.el7.aarch64.tarxz/hotspot-work/gc/shenandoah/options/TestLargePages_id1/hs_err_pid3239.log
#

OpenJDK 64-Bit Server VM warning: Large pages size (524288K) is too large to afford page-sized regions, disabling uncommit",,,,,,,,,,,JDK-8268889,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8266802,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2t2lv:",9223372036854775807,b26,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6b00f96c,,,,,,,,,"2021-06-08 13:32;roboduke;Changeset: 5ad4a91c
Author:    Zhengyu Gu <zgu@openjdk.org>
Date:      2021-06-08 20:31:22 +0000
URL:       https://git.openjdk.java.net/jdk/commit/5ad4a91c3d89f7118a99e5bd56fc86a9a6d57abf
;;;","2021-06-14 05:17;zgu;Fix Request (16u)

I would like to backport this Shenandoah specific patch to 16u, which allows to fallback to regular pages for regions, if heap size is too small to allow regions to use large pages.

16u patch has been reviewed.


;;;","2021-06-14 05:18;zgu;Fix Request (11u)

I would like to backport this Shenandoah specific patch to 11u, which allows to fallback to regular pages for regions, if heap size is too small to allow regions to use large pages.

11u patch has been reviewed.


;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
ZGC: Clone oop array gets wrong acopy stub,JDK-8268125,5050980,Bug,Closed,JDK,JDK,software,duke,,,P1,Fixed,neliasso,dcubed,dcubed,2021-06-02 08:25,2021-08-12 06:57,2023-10-01 09:57,2021-06-15 04:34,17,18,,,,,,17,hotspot,,0,hs-comp-triaged,intermittent,oracle-triage-11,oracle-triage-17,test-bigapps-Kitchensink,tier3,tier7,tier8,zgc,,,,,"The following test failed in the JDK17 CI:

applications/kitchensink/Kitchensink.java

Here are snippets from the hs_err_pid file:

#  EXCEPTION_ACCESS_VIOLATION (0xc0000005) at pc=0x00007fff21358904, pid=15384, tid=14436
#
# JRE version: Java(TM) SE Runtime Environment (17.0+25) (fastdebug build 17-ea+25-LTS-2251)
# Java VM: Java HotSpot(TM) 64-Bit Server VM (fastdebug 17-ea+25-LTS-2251, mixed mode, sharing, tiered, compressed class ptrs, z gc, windows-amd64)
# Problematic frame:
# V  [jvm.dll+0xd48904]  ZBarrier::mark<1,1,0,0>+0xf4

< snip>

---------------  T H R E A D  ---------------

Current thread (0x000002449743b4c0):  GCTaskThread ""ZWorker#4"" [stack: 0x00000057bd200000,0x00000057bd300000] [id=14436]

Stack: [0x00000057bd200000,0x00000057bd300000],  sp=0x00000057bd2f9700,  free space=997k
Native frames: (J=compiled Java code, j=interpreted, Vv=VM code, C=native code)
V  [jvm.dll+0xd48904]  ZBarrier::mark<1,1,0,0>+0xf4  (zBarrier.cpp:85)
V  [jvm.dll+0xd60b8a]  ZMark::follow_small_array+0x1ba  (zMark.cpp:178)
V  [jvm.dll+0xd612ef]  ZMark::mark_and_follow+0x45f  (zMark.cpp:319)
V  [jvm.dll+0xd62542]  ZMark::work_without_timeout+0x152  (zMark.cpp:503)
V  [jvm.dll+0xd62056]  ZMark::work+0x96  (zMark.cpp:590)
V  [jvm.dll+0xd7b265]  ZTask::GangTask::work+0x25  (zTask.cpp:36)
V  [jvm.dll+0xd44f5a]  GangWorker::loop+0x8a  (workgroup.cpp:260)
V  [jvm.dll+0xd44ffd]  GangWorker::run+0x1d  (workgroup.cpp:227)
V  [jvm.dll+0xc82744]  Thread::call_run+0x1b4  (thread.cpp:399)
V  [jvm.dll+0xad4a1e]  thread_native_entry+0xae  (os_windows.cpp:549)
C  [ucrtbase.dll+0x2268a]
C  [KERNEL32.DLL+0x17974]
C  [ntdll.dll+0x5a2f1]


siginfo: EXCEPTION_ACCESS_VIOLATION (0xc0000005), reading address 0x000000000000000c

",,,,,,,,,,,JDK-8268742,,,,,,,,,,,,,,,,,,,JDK-8268648,JDK-8268732,JDK-8268632,JDK-8268732,JDK-8268632,JDK-8268648,,JDK-8270098,JDK-8267726,JDK-8270461,,,,,,,,,,,,,x86_64,,,,,,,,,windows,,,,,"0|i2t2l7:",9223372036854775807,b27,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,Not verified,,"2021-06-02 16:33;dcubed;The jdk-17+25-2261-tier3 sighting has a different crash function:

#  SIGSEGV (0xb) at pc=0x0000fffde9c6f098, pid=1522030, tid=1522038
#
# JRE version: Java(TM) SE Runtime Environment (17.0+25) (fastdebug build 17-ea+25-LTS-2261)
# Java VM: Java HotSpot(TM) 64-Bit Server VM (fastdebug 17-ea+25-LTS-2261, mixed mode, tiered, compressed class ptrs, z gc, linux-aarch64)
# Problematic frame:
# V  [libjvm.so+0x187f098]  ZBarrier::mark_barrier_on_oop_slow_path(unsigned long)+0xf8

and a similar crashing stack:

---------------  T H R E A D  ---------------

Current thread (0x0000fffde40b80a0):  GCTaskThread ""ZWorker#3"" [stack: 0x0000fffdcc1b0000,0x0000fffdcc3b0000] [id=1522038]

Stack: [0x0000fffdcc1b0000,0x0000fffdcc3b0000],  sp=0x0000fffdcc3a8580,  free space=2017k
Native frames: (J=compiled Java code, j=interpreted, Vv=VM code, C=native code)
V  [libjvm.so+0x187f098]  ZBarrier::mark_barrier_on_oop_slow_path(unsigned long)+0xf8
V  [libjvm.so+0x18bd744]  ZMark::follow_small_array(unsigned long, unsigned long, bool)+0x310
V  [libjvm.so+0x18be3cc]  ZMark::mark_and_follow(ZMarkCache*, ZMarkStackEntry)+0x4dc
V  [libjvm.so+0x18bec60]  ZMark::work_without_timeout(ZMarkCache*, ZMarkStripe*, ZMarkThreadLocalStacks*)+0x12c
V  [libjvm.so+0x18beed4]  ZMark::work(unsigned long)+0xa4
V  [libjvm.so+0x1905b78]  ZTask::GangTask::work(unsigned int)+0x28
V  [libjvm.so+0x1877ae8]  GangWorker::run_task(WorkData)+0x98
V  [libjvm.so+0x1877c48]  GangWorker::loop()+0x58
V  [libjvm.so+0x1877c9c]
V  [libjvm.so+0x173c0e8]  Thread::call_run()+0xf8
V  [libjvm.so+0x1457e08]  thread_native_entry(Thread*)+0x108
C  [libpthread.so.0+0x7738]  start_thread+0x198


siginfo: si_signo: 11 (SIGSEGV), si_code: 1 (SEGV_MAPERR), si_addr: 0x000000000000000c;;;","2021-06-03 16:59;dcubed;The jdk-17+26-2293-tier3 sighting has a different assertion failure and a similar stack:

#  Internal Error (/opt/mach5/mesos/work_dir/slaves/3c846bae-ce30-4a97-93ee-9fef4497ccb6-S79397/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/edf90201-8419-4e32-b65f-84ba8c98f401/runs/6579a190-d407-4c74-83ff-872111cdb2d5/workspace/open/src/hotspot/share/oops/compressedOops.inline.hpp:133), pid=3206113, tid=3206117
#  assert(!is_null(v)) failed: narrow klass value can never be zero
#
# JRE version: Java(TM) SE Runtime Environment (17.0+26) (fastdebug build 17-ea+26-LTS-2293)
# Java VM: Java HotSpot(TM) 64-Bit Server VM (fastdebug 17-ea+26-LTS-2293, mixed mode, tiered, compressed class ptrs, z gc, linux-aarch64)
# Problematic frame:
# V  [libjvm.so+0x666bf0]  CompressedKlassPointers::decode_not_null(unsigned int, unsigned char*)+0x70

Here's the crashing stack:

---------------  T H R E A D  ---------------

Current thread (0x0000ffff380b43b0):  GCTaskThread ""ZWorker#0"" [stack: 0x0000ffff3c0a0000,0x0000ffff3c2a0000] [id=3206117]

Stack: [0x0000ffff3c0a0000,0x0000ffff3c2a0000],  sp=0x0000ffff3c298660,  free space=2017k
Native frames: (J=compiled Java code, j=interpreted, Vv=VM code, C=native code)
V  [libjvm.so+0x666bf0]  CompressedKlassPointers::decode_not_null(unsigned int, unsigned char*)+0x70
V  [libjvm.so+0x18bfbb8]  ZMark::mark_and_follow(ZMarkCache*, ZMarkStackEntry)+0x538
V  [libjvm.so+0x18c03f0]  ZMark::work_without_timeout(ZMarkCache*, ZMarkStripe*, ZMarkThreadLocalStacks*)+0x12c
V  [libjvm.so+0x18c0664]  ZMark::work(unsigned long)+0xa4
V  [libjvm.so+0x19072f8]  ZTask::GangTask::work(unsigned int)+0x28
V  [libjvm.so+0x1879278]  GangWorker::run_task(WorkData)+0x98
V  [libjvm.so+0x18793d8]  GangWorker::loop()+0x58
V  [libjvm.so+0x187942c]
V  [libjvm.so+0x173d938]  Thread::call_run()+0xf8
V  [libjvm.so+0x1459728]  thread_native_entry(Thread*)+0x108
C  [libpthread.so.0+0x7738]  start_thread+0x198;;;","2021-06-04 04:40;neliasso;Caused by: JDK-8267726;;;","2021-06-05 20:36;dcubed;Here's hs_err_pid snippets for the jdk-17+26-2306-tier7 sighting with

compiler/gcbarriers/UnsafeIntrinsicsTest.java#z 

#  Internal Error (/opt/mach5/mesos/work_dir/slaves/3c846bae-ce30-4a97-93ee-9fef4497ccb6-S124143/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/379dc69d-dcb5-498c-955e-36256c8d52d0/runs/b5595674-ef70-49fb-957c-a4ecd2e58805/workspace/open/src/hotspot/share/gc/z/zBarrier.cpp:41), pid=539, tid=2373
#  assert(ZAddress::is_marked(addr)) failed: Should be marked
#
# JRE version: Java(TM) SE Runtime Environment (17.0+26) (fastdebug build 17-ea+26-LTS-2306)
# Java VM: Java HotSpot(TM) 64-Bit Server VM (fastdebug 17-ea+26-LTS-2306, compiled mode, sharing, compressed class ptrs, z gc, linux-amd64)
# Problematic frame:
# V  [libjvm.so+0x1a1cb78]  unsigned long ZBarrier::mark<false, true, false, true>(unsigned long)+0x238

---------------  T H R E A D  ---------------

Current thread (0x00007f044832af00):  JavaThread ""MainThread"" [_thread_in_Java, id=2373, stack(0x00007f01e6bf2000,0x00007f01e6cf3000)]

Stack: [0x00007f01e6bf2000,0x00007f01e6cf3000],  sp=0x00007f01e6ceff00,  free space=1015k
Native frames: (J=compiled Java code, j=interpreted, Vv=VM code, C=native code)
V  [libjvm.so+0x1a1cb78]  unsigned long ZBarrier::mark<false, true, false, true>(unsigned long)+0x238
V  [libjvm.so+0x1a43cdb]  ZBarrierSetRuntime::load_barrier_on_oop_field_preloaded(oopDesc*, oop*)+0xdb

Register to memory mapping:;;;","2021-06-07 11:43;dcubed;Here's log file snippets for the jdk-17+26-2323-tier8 sighting:

 applications/renaissance/RenaissanceStressTest24H.java 

====== dotty (scala-dotty) [default], iteration 98 completed (3247.547 ms) ======
====== dotty (scala-dotty) [default], iteration 99 started ======
#
# A fatal error has been detected by the Java Runtime Environment:
#
#  SIGSEGV (0xb) at pc=0x00007f706b728eae, pid=32670, tid=32714
#
# JRE version: Java(TM) SE Runtime Environment (17.0+26) (build 17-ea+26-LTS-2323)
# Java VM: Java HotSpot(TM) 64-Bit Server VM (17-ea+26-LTS-2323, mixed mode, sharing, tiered, compressed class ptrs, z gc, linux-amd64)
# Problematic frame:
# V  [libjvm.so+0x559eae]  ClassLoaderData::oops_do(OopClosure*, int, bool)+0x1e
#
# Core dump will be written. Default location: Core dumps may be processed with ""/opt/core.sh %p"" (or dumping to /opt/mach5/mesos/work_dir/slaves/3c846bae-ce30-4a97-93ee-9fef4497ccb6-S79055/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/918e4a02-f348-499b-b464-1a21468074b5/runs/f5f635c7-43aa-4205-9919-73eb516d7295/testoutput/test-support/jtreg_closed_test_hotspot_jtreg_applications_renaissance_RenaissanceStressTest24H_java/scratch/0/core.32670)
#
Unsupported internal testing APIs have been used.

# An error report file with more information is saved as:
# /opt/mach5/mesos/work_dir/slaves/3c846bae-ce30-4a97-93ee-9fef4497ccb6-S79055/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/918e4a02-f348-499b-b464-1a21468074b5/runs/f5f635c7-43aa-4205-9919-73eb516d7295/testoutput/test-support/jtreg_closed_test_hotspot_jtreg_applications_renaissance_RenaissanceStressTest24H_java/scratch/0/hs_err_pid32670.log
#
# If you would like to submit a bug report, please visit:
#   https://bugreport.java.com/bugreport/crash.jsp
#
----------System.err:(855/73200)----------


Here's the crashing thread's stack:

---------------  T H R E A D  ---------------

Current thread (0x00007f70640c1e50):  VMThread ""VM Thread"" [stack: 0x00007f704c20e000,0x00007f704c30e000] [id=32714] _threads_hazard_ptr=0x00007f6dd5428ed0

Stack: [0x00007f704c20e000,0x00007f704c30e000],  sp=0x00007f704c30c118,  free space=1016k
Native frames: (J=compiled Java code, j=interpreted, Vv=VM code, C=native code)
V  [libjvm.so+0x559eae]  ClassLoaderData::oops_do(OopClosure*, int, bool)+0x1e
V  [libjvm.so+0xe4ea86]  void ZHeapIterator::visit_and_follow<true>(ZHeapIteratorContext const&, ObjectClosure*, oopDesc*)+0xa6
V  [libjvm.so+0xe4eb06]  void ZHeapIterator::drain<true>(ZHeapIteratorContext const&, ObjectClosure*)+0x66
V  [libjvm.so+0xe4edf4]  void ZHeapIterator::drain_and_steal<true>(ZHeapIteratorContext const&, ObjectClosure*)+0x44
V  [libjvm.so+0xe4a68f]  ZHeapIterator::object_iterate(ObjectClosure*, unsigned int)+0x15f
V  [libjvm.so+0xe49595]  ZHeap::object_iterate(ObjectClosure*, bool)+0x45
V  [libjvm.so+0xa148a9]  VM_HeapIterateOperation::doit()+0x49
V  [libjvm.so+0xe06c7a]  VM_Operation::evaluate()+0xea
V  [libjvm.so+0xe08588]  VMThread::evaluate_operation(VM_Operation*)+0xb8
V  [libjvm.so+0xe08a64]  VMThread::inner_execute(VM_Operation*)+0x1d4
V  [libjvm.so+0xe08d4f]  VMThread::run()+0xbf
V  [libjvm.so+0xd885de]  Thread::call_run()+0xde
V  [libjvm.so+0xbdf70f]  thread_native_entry(Thread*)+0xdf


siginfo: si_signo: 11 (SIGSEGV), si_code: 2 (SEGV_ACCERR), si_addr: 0x00007f706b799dc8
;;;","2021-06-07 11:47;dcubed;Here's log file snippets for the jdk-17+26-2323-tier8 sighting:

applications/kitchensink/Kitchensink24HStress.java

For random generator using seed: 3111224833588041266
To re-run test with same seed value please add ""-Djdk.test.lib.random.seed=3111224833588041266"" to command line.
Stress process main method is started.
[624.565s][warning][gc] GC locker is held; pre-dump GC was skipped
[6297.760s][warning][gc] GC locker is held; pre-dump GC was skipped
[9345.842s][warning][gc] GC locker is held; pre-dump GC was skipped
[10652.905s][warning][gc] GC locker is held; pre-dump GC was skipped
[16752.003s][warning][gc] GC locker is held; pre-dump GC was skipped
#
# A fatal error has been detected by the Java Runtime Environment:
#
#  Internal Error (/opt/mach5/mesos/work_dir/slaves/3c846bae-ce30-4a97-93ee-9fef4497ccb6-S79034/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/8620bbb5-80ad-40a2-bc26-d5eb23df0390/runs/f22c547c-5f21-435c-98ad-16c593b52a8f/workspace/open/src/hotspot/share/gc/z/zBarrier.cpp:41), pid=11076, tid=24026
#  assert(ZAddress::is_marked(addr)) failed: Should be marked
#
# JRE version: Java(TM) SE Runtime Environment (17.0+26) (fastdebug build 17-ea+26-LTS-2323)
# Java VM: Java HotSpot(TM) 64-Bit Server VM (fastdebug 17-ea+26-LTS-2323, mixed mode, sharing, tiered, compressed class ptrs, z gc, linux-amd64)
# Problematic frame:
# V  [libjvm.so+0x1a21378]  unsigned long ZBarrier::mark<false, true, false, true>(unsigned long)+0x238
#
# Core dump will be written. Default location: Core dumps may be processed with ""/opt/core.sh %p"" (or dumping to /opt/mach5/mesos/work_dir/slaves/3c846bae-ce30-4a97-93ee-9fef4497ccb6-S124135/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/7680764f-c0ee-4f24-b0b9-e86d94326ea8/runs/a89e7923-abc4-4591-9dfd-d8d5c5079e95/testoutput/test-support/jtreg_closed_test_hotspot_jtreg_applications_kitchensink_Kitchensink24HStress_java/scratch/0/core.11076)
#
# JFR recording file will be written. Location: /opt/mach5/mesos/work_dir/slaves/3c846bae-ce30-4a97-93ee-9fef4497ccb6-S124135/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/7680764f-c0ee-4f24-b0b9-e86d94326ea8/runs/a89e7923-abc4-4591-9dfd-d8d5c5079e95/testoutput/test-support/jtreg_closed_test_hotspot_jtreg_applications_kitchensink_Kitchensink24HStress_java/scratch/0/hs_err_pid11076.jfr
#
Unsupported internal testing APIs have been used.

# An error report file with more information is saved as:
# /opt/mach5/mesos/work_dir/slaves/3c846bae-ce30-4a97-93ee-9fef4497ccb6-S124135/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/7680764f-c0ee-4f24-b0b9-e86d94326ea8/runs/a89e7923-abc4-4591-9dfd-d8d5c5079e95/testoutput/test-support/jtreg_closed_test_hotspot_jtreg_applications_kitchensink_Kitchensink24HStress_java/scratch/0/hs_err_pid11076.log
[thread 21743 also had an error][thread 11154 also had an error][thread 21744 also had an error]



------ Timeout during error reporting after 120 s. ------
----------System.err:(1079/87872)----------


Here's the crashing thread's stack:

---------------  T H R E A D  ---------------

Current thread (0x00007f991420f530):  JavaThread ""BenchmarkThread xml.transform 1"" [_thread_in_Java, id=24026, stack(0x00007f98a5df2000,0x00007f98a5ef3000)]

Stack: [0x00007f98a5df2000,0x00007f98a5ef3000],  sp=0x00007f98a5ef11a0,  free space=1020k
Native frames: (J=compiled Java code, j=interpreted, Vv=VM code, C=native code)
V  [libjvm.so+0x1a21378]  unsigned long ZBarrier::mark<false, true, false, true>(unsigned long)+0x238
V  [libjvm.so+0x1a484db]  ZBarrierSetRuntime::load_barrier_on_oop_field_preloaded(oopDesc*, oop*)+0xdb;;;","2021-06-07 11:49;dcubed;Here's log file snippets for the jdk-17+26-2323-tier8 sighting: 

applications/kitchensink/Kitchensink24HStress.java

Output and diagnostic info for process 3820 was saved into 'pid-3820-output.log'
[2021-06-06T22:17:54.858901500Z] Waiting for completion for process 3820
[2021-06-06T22:17:54.858901500Z] Waiting for completion finished for process 3820
#
# A fatal error has been detected by the Java Runtime Environment:
#
#  EXCEPTION_ACCESS_VIOLATION (0xc0000005) at pc=0x00007ffd34558cbe, pid=22928, tid=56672
#
# JRE version: Java(TM) SE Runtime Environment (17.0+26) (fastdebug build 17-ea+26-LTS-2323)
# Java VM: Java HotSpot(TM) 64-Bit Server VM (fastdebug 17-ea+26-LTS-2323, mixed mode, sharing, tiered, compressed class ptrs, z gc, windows-amd64)
# Problematic frame:
# V  [jvm.dll+0x3c8cbe][thread 376 also had an error]
  oopDesc::size_given_klass+0x1e
#
# Core dump will be written. Default location: T:\\testoutput\\test-support\\jtreg_closed_test_hotspot_jtreg_applications_kitchensink_Kitchensink24HStress_java\\scratch\\0\\hs_err_pid22928.mdmp
#
# An error report file with more information is saved as:
# T:\\testoutput\\test-support\\jtreg_closed_test_hotspot_jtreg_applications_kitchensink_Kitchensink24HStress_java\\scratch\\0\\hs_err_pid22928.log
#
# If you would like to submit a bug report, please visit:
#   https://bugreport.java.com/bugreport/crash.jsp
#
----------System.err:(188/16295)*----------


Here's the crashing thread's stack:

---------------  T H R E A D  ---------------

Current thread (0x0000029bda76da40):  GCTaskThread ""ZWorker#0"" [stack: 0x000000b986b00000,0x000000b986c00000] [id=56672]

Stack: [0x000000b986b00000,0x000000b986c00000],  sp=0x000000b986bf94c0,  free space=997k
Native frames: (J=compiled Java code, j=interpreted, Vv=VM code, C=native code)
V  [jvm.dll+0x3c8cbe]  oopDesc::size_given_klass+0x1e  (oop.inline.hpp:149)
V  [jvm.dll+0xd66efd]  ZMark::mark_and_follow+0x27d  (zMark.cpp:312)
V  [jvm.dll+0xd68332]  ZMark::work_without_timeout+0x152  (zMark.cpp:503)
V  [jvm.dll+0xd67e46]  ZMark::work+0x96  (zMark.cpp:590)
V  [jvm.dll+0xd81055]  ZTask::GangTask::work+0x25  (zTask.cpp:36)
V  [jvm.dll+0xd4ad4a]  GangWorker::loop+0x8a  (workgroup.cpp:260)
V  [jvm.dll+0xd4aded]  GangWorker::run+0x1d  (workgroup.cpp:227)
V  [jvm.dll+0xc87a04]  Thread::call_run+0x1b4  (thread.cpp:399)
V  [jvm.dll+0xadb5ae]  thread_native_entry+0xae  (os_windows.cpp:549)
C  [ucrtbase.dll+0x2268a]
C  [KERNEL32.DLL+0x17974]
C  [ntdll.dll+0x5a2f1]


siginfo: EXCEPTION_ACCESS_VIOLATION (0xc0000005), reading address 0x0000000802ec00b0;;;","2021-06-09 07:11;neliasso;The wrong arraycopy stub is a separate problem that only happens with -XX:+StressReflectiveCode
;;;","2021-06-09 18:24;dholmes;[~neliasso] which is the ""wrong arraycopy stub"" problem?

I just saw the:

 #  assert(!is_null(v)) failed: narrow klass value can never be zero

in the jdk-17+26-2403-tier3 CI. I've linked it to this bug for now.;;;","2021-06-14 15:51;dlong;ILW = crash in multiple tests, intermittent, no workaround = HMH = P1;;;","2021-06-15 04:34;roboduke;Changeset: e36136fa
Author:    Nils Eliasson <neliasso@openjdk.org>
Date:      2021-06-15 11:33:12 +0000
URL:       https://git.openjdk.java.net/jdk17/commit/e36136fa934505fdf7d80ed415ebf009050dac28
;;;","2021-06-15 10:00;dcubed;The fix for this bug is in jdk-17+27-2464 and jdk-18+2-22.;;;","2021-08-12 06:57;enikitin;Tried to verify in jdk-17+26 using both compiler.arraycopy.TestObjectArrayClone and compiler.arraycopy.TestEliminateArrayCopy, haven't succeeded. Closing as 'Not verified';;;",,,,,,,,,,,,,,,,,,,,,
JNI functions incorrectly return a double after JDK-8265836,JDK-8268103,5050942,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,sgehwolf,sgehwolf,sgehwolf,2021-06-02 01:21,2022-04-08 09:05,2023-10-01 09:57,2021-06-02 05:19,,,,,,,,17,core-svc,,0,8bpr-critical-approved,jdk11u-fix-request,jdk11u-fix-yes,noreg-cleanup,,,,,,,,,,"JDK-8265836 introduced some JNI code for the host total ticks. The stubbed implementations for mac/aix return -1.0 (double) while the declared return type is jlong:
https://github.com/openjdk/jdk/blob/d47a77d2d54ee8c41ef969b42b3336a646dffd7b/src/jdk.management/aix/native/libmanagement_ext/UnixOperatingSystem.c#L58
https://github.com/openjdk/jdk/blob/d47a77d2d54ee8c41ef969b42b3336a646dffd7b/src/jdk.management/macosx/native/libmanagement_ext/UnixOperatingSystem.c#L174

We should fix this.",,,,,,,,,,,JDK-8271612,JDK-8272222,JDK-8282709,JDK-8268741,JDK-8282614,JDK-8284596,,,,,,,,,,,,,,,,,,,,,JDK-8265836,JDK-8282737,,,,,,,,,,,,,,,,,,,,,,,generic,,,,,"0|i2t2cr:",9223372036854775807,b26,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@411d4af6,,,,,,,,,"2021-06-02 05:19;roboduke;Changeset: 2963c9e6
Author:    Severin Gehwolf <sgehwolf@openjdk.org>
Date:      2021-06-02 12:18:30 +0000
URL:       https://git.openjdk.java.net/jdk/commit/2963c9e6778b95f5c0fc4298064a21d1e8f31b91
;;;","2021-06-08 05:08;sgehwolf;Fix Request (OpenJDK 11u):

Please approve backporting this follow-up fix for JDK-8265836 to 11u. The patch applies clean once JDK-8265836 is in jdk11u-dev.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
CDS MethodHandle tests should add -XX:-VerifyDependencies,JDK-8268095,5050931,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,ccheung,iklam,iklam,2021-06-01 23:31,2021-06-10 17:53,2023-10-01 09:57,2021-06-03 15:57,,,,,,,,17,hotspot,,0,cds,methodhandles,testbug,,,,,,,,,,,"Since JDK-8266074, the cost of -XX:+VerifyDependencies, which is enabled by default in debug build, has significantly increased. This has caused significant slow down in the CDS MethodHandle tests. E.g.,

runtime/cds/appcds/methodHandles/MethodHandlesSpreadArgumentsTest.java

JDK 16: 117s
JDK 17: 223s

These tests were based on java/lang/invoke/*.java, which explicitly disable  VerifyDependencies. We should do the same in the CDS tests.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2t2ab:",9223372036854775807,b26,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,,,"2021-06-03 15:57;roboduke;Changeset: 516e60a7
Author:    Calvin Cheung <ccheung@openjdk.org>
Date:      2021-06-03 22:56:57 +0000
URL:       https://git.openjdk.java.net/jdk/commit/516e60a7ee3072cb3a311432257fab86dd622a48
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Some vmTestbase/nsk tests fail after ACC_STRICT/strictfp changes,JDK-8268094,5050930,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,dholmes,dholmes,dholmes,2021-06-01 23:08,2021-06-10 17:51,2023-10-01 09:57,2021-06-02 05:24,17,,,,,,,17,hotspot,,0,tier4,tier5,tier6,tier7,,,,,,,,,,"Test: vmTestbase/nsk/jvmti/GetMethodModifiers/methmod001/TestDescription.java

/opt/mach5/mesos/work_dir/jib-master/install/jdk-17+25-2238/src.full/open/test/hotspot/jtreg/vmTestbase/nsk/jvmti/GetMethodModifiers/methmod001.java:64: warning: [strictfp] as of release 17, all floating-point expressions are evaluated strictly and 'strictfp' is not required
    strictfp float meth_2(float f1, float f2) {
                   ^
1 warning
result: Passed. Compilation successful

#section:main
----------messages:(4/258)----------
command: main -agentlib:methmod001 nsk.jvmti.GetMethodModifiers.methmod001
reason: User specified action: run main/othervm/native -agentlib:methmod001 nsk.jvmti.GetMethodModifiers.methmod001 
Mode: othervm [/othervm specified]
elapsed time (seconds): 11.749
----------configuration:(0/0)----------
----------System.out:(2/74)----------
""meth_2(FF)F"" access flags expected: STRICT (0x800)
	       actual: (0x0)
----------System.err:(0/0)----------",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8266398,,,,,,,,,,,,,,,,,,,,,,,,,,17,,,,,,,"0|i2t2a3:",9223372036854775807,b26,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@661b156a,,,,,,,,,"2021-06-02 02:52;dholmes;Also:

vmTestbase/nsk/jdi/VirtualMachine/redefineClasses/redefineclasses008/TestDescription.java
vmTestbase/nsk/jdi/VirtualMachine/redefineClasses/redefineclasses007/TestDescription.java

# ERROR: debugger FAILURE> ***UnsupportedOperationException is not thrown
# ERROR: debugger FAILURE> ***	while adding <strictfp> modifiers to 3 methods

These modifiers no longer have any affect on classfiles and these testcases should must be deleted.
;;;","2021-06-02 05:24;roboduke;Changeset: dc19baca
Author:    David Holmes <dholmes@openjdk.org>
Date:      2021-06-02 12:23:56 +0000
URL:       https://git.openjdk.java.net/jdk/commit/dc19baca3363a105a5cc1dbc02cbe3ea65e1209e
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
"Manual Testcase: ""sun/security/krb5/config/native/TestDynamicStore.java"" Fails with NPE",JDK-8268093,5050929,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,weijun,gpatil,gpatil,2021-06-01 23:03,2021-09-30 00:08,2023-10-01 09:57,2021-06-11 08:13,11.0.12-oracle,17,,,,,,17,security-libs,,0,jdk11u-fix-request,jdk11u-fix-yes,noreg-self,sqebug,testbug,,,,,,,,,"OS:
OS_X

Environment:
Mac OS X 10.15.7 (x86_64)

Reproducible: Always

Is it a Regression: No,  New test introduced in JDk17b08 and is failing since then.
Same is the case for JDK11.0.12, test was introduced in b04 and is failing since then.

Is it a platform specific issue:  Yes, test applicable only for OS_X


Exception/Error from Log:

Fill in dynamic store
Run aa 1
Remove everything
Run ra 1
----------System.err:(23/1150)----------
>>> action: a a
0
0
0
0
>>> action: r a
0
0
0
0
java.lang.NullPointerException: Cannot invoke ""String.equals(Object)"" because the return value of ""sun.security.krb5.Config.get(String[])"" is null
	at TestDynamicStore.main(TestDynamicStore.java:63)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at com.sun.javatest.regtest.agent.MainWrapper$MainThread.run(MainWrapper.java:127)
	at java.base/java.lang.Thread.run(Thread.java:831)

JavaTest Message: Test threw exception: java.lang.NullPointerException: Cannot invoke ""String.equals(Object)"" because the return value of ""sun.security.krb5.Config.get(String[])"" is null
JavaTest Message: shutting down test

STATUS:Failed.`main' threw exception: java.lang.NullPointerException: Cannot invoke ""String.equals(Object)"" because the return value of ""sun.security.krb5.Config.get(String[])"" is null
",,,,,,,,,,,JDK-8274540,JDK-8268710,JDK-8268738,,,,,,,,,,,,,,,,,,,,JDK-8257860,,,,,,,,"2021-06-01 22:56;gpatil;TestDynamicStore.jtr;https://bugs.openjdk.org/secure/attachment/94973/TestDynamicStore.jtr",,,,,,,,,,,generic,,,,,,b08,,,os_x,,,,,"0|i2t29v:",9223372036854775807,b27,,,,,,,,,,,,"2021-06-01 23:21;gpatil;This issue is reproduced in CPU21_07-ATR4: JDK_11.0.12_b05 (macOS 11 Big Sur x64) ;;;","2021-06-03 11:07;weijun;The test needs to run with sudo because system kerberos settings cannot be adjusted by a normal user. Is that how you ran it?;;;","2021-06-04 14:05;weijun;[~gpatil] I'd like to add some more comment and a clearer error message to this test. Can you make this issue public?  ;;;","2021-06-11 08:13;roboduke;Changeset: e39346e7
Author:    Weijun Wang <weijun@openjdk.org>
Date:      2021-06-11 15:12:11 +0000
URL:       https://git.openjdk.java.net/jdk17/commit/e39346e708a06cdee2b9a096f08c1cfe2e21dfc2
;;;","2021-09-28 03:30;goetz;Fix request [11u]

I downport this for parity with 11.0.13-oracle.
No risk, only a test change.
Clean backport.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Update documentation of the JPasswordField,JDK-8268087,5050920,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,serb,serb,serb,2021-06-01 17:47,2021-06-10 17:54,2023-10-01 09:57,2021-06-05 08:41,16,17,,,,,,17,client-libs,,0,noreg-doc,sn_94,,,,,,,,,,,,"It would be useful to have the link to the ""Secure Coding Guidelines"" from the JPasswordField JavaDoc.",,,,,,,,,,,,,,,,,,,,,,,,JDK-8268149,,,,,,JDK-8267827,,,JDK-8266673,,,,,,,,,,,,,,,,,,,generic,,,,,,,,,generic,,,,,"0|i2t27v:",9223372036854775807,b26,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@568a5b31,,,,,,,,,"2021-06-05 08:41;roboduke;Changeset: b2e9eb9e
Author:    Sergey Bylokhov <serb@openjdk.org>
Date:      2021-06-05 15:41:04 +0000
URL:       https://git.openjdk.java.net/jdk/commit/b2e9eb9e47beb5148e3b9f86f25fad352ed4a236
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
[macos] Disabled JMenuItem arrow is not disabled,JDK-8268084,5050917,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,psadhukhan,landrews,landrews,2021-06-01 17:08,2021-10-06 18:04,2023-10-01 09:57,2021-10-03 23:50,11,16,17,8,9,,,18,client-libs,,0,macos,sn_103,,,,,,,,,,,,"Disabled JMenuItem arrow is not disabled 
Step to reproduce
1) Run the attached testcase.
2) Click on ""SubMenuTest"" menu
Observe that first ""SubMenu"" is disabled but not that arrow . If see the same then the bug is reproduced.

Attached on screen shot of the same
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"2021-06-01 17:05;landrews;DisabledJMenuItemArrowButtonNotDisabled.java;https://bugs.openjdk.org/secure/attachment/94969/DisabledJMenuItemArrowButtonNotDisabled.java","2021-06-01 17:07;landrews;Screen Shot 2021-06-01 at 7.06.36 PM.png;https://bugs.openjdk.org/secure/attachment/94968/Screen+Shot+2021-06-01+at+7.06.36+PM.png",,,,,,,,,,x86,,,,,,,,,os_x_10.15,,,,,"0|i2t277:",9223372036854775807,b18,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@568a5b31,,,,,,,,,"2021-10-03 23:50;roboduke;Changeset: 32811026
Author:    Prasanta Sadhukhan <psadhukhan@openjdk.org>
Date:      2021-10-04 06:49:10 +0000
URL:       https://git.openjdk.java.net/jdk/commit/32811026ce5ecb1d27d835eac33de9ccbd51fcbf
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
JDK-8267706 breaks bin/idea.sh on a Mac,JDK-8268083,5050915,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,avu,jjg,jjg,2021-06-01 15:14,2021-06-10 17:59,2023-10-01 09:57,2021-06-08 07:37,17,,,,,,,17,infrastructure,,0,regression,,,,,,,,,,,,,`realpath` is not available by default.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8267706,,,,JDK-8268423,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2t26r:",9223372036854775807,b26,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@429c566,,,,,,,,,"2021-06-08 07:37;roboduke;Changeset: 159cb6fa
Author:    Nikita Gubarkov <Nikita.Gubarkov@jetbrains.com>
Committer: Alexey Ushakov <avu@openjdk.org>
Date:      2021-06-08 14:35:58 +0000
URL:       https://git.openjdk.java.net/jdk/commit/159cb6facc668acc30552665e46b18edf58c3a91
;;;","2021-06-08 15:58;jjg;It seems that a side effect of this change has been to move the location of the IDEA project files from $TOPLEVEL_DIR to the root dir of the open repo.

Also, folk are reporting that the source directories are not being set up correctly.  This causes major dysfunction in the IDE for system-wide operations like ""Find Uses"" or ""Refactor > Rename"".;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
[macos] Editable JCombobox arrow buttons is not resized along with Textfield when font is changed,JDK-8268082,5050914,Bug,Closed,JDK,JDK,software,duke,,,P4,Fixed,psadhukhan,landrews,landrews,2021-06-01 14:53,2022-07-18 14:20,2023-10-01 09:57,2022-07-15 00:37,11,16,17,9,,,,tbd,client-libs,,0,sn_122,,,,,,,,,,,,,"This issue is seen from JDK 9.0.4, 11.0.12, 16.0.2 & jdk 17.

Step to reproduce
1) Run the attached testcase
2) Observe that Editable JComboBox & Button is seen .
JComboBox text field and arrow button is not aligned correctly. This issue is already capured in https://bugs.openjdk.java.net/browse/JDK-8179076 
3) Now click on the button and observed that JComboxBox's textfield is resized but not the arrow button. If you see the same then the bug is reproduced.

Attached the screen shot of the same.

",,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8054572,,,JDK-8031104,JDK-8179076,,,,,,,,,,"2021-06-01 14:51;landrews;Bug4167394.java;https://bugs.openjdk.org/secure/attachment/94966/Bug4167394.java","2021-06-01 17:01;landrews;Screen Shot 2021-05-30 at 9.14.13 AM.png;https://bugs.openjdk.org/secure/attachment/94967/Screen+Shot+2021-05-30+at+9.14.13+AM.png","2021-06-01 14:52;landrews;Screen Shot 2021-06-01 at 4.51.52 PM.png;https://bugs.openjdk.org/secure/attachment/94965/Screen+Shot+2021-06-01+at+4.51.52+PM.png","2021-06-01 14:52;landrews;Screen Shot 2021-06-01 at 4.52.03 PM.png;https://bugs.openjdk.org/secure/attachment/94964/Screen+Shot+2021-06-01+at+4.52.03+PM.png",,,,,,,,x86,,,,,,,,,os_x_10.15,,,,,"0|i2t26j:",9223372036854775807,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@568a5b31,,,,,,,,,"2021-06-01 17:01;landrews;Tested on Mac 1015.7 ( macOS Catalina) ;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
java/util/concurrent/forkjoin/AsyncShutdownNow.java fails with java.util.concurrent.RejectedExecutionException,JDK-8268080,5050912,Bug,Resolved,JDK,JDK,software,duke,,,P2,Fixed,jboes,dcubed,dcubed,2021-06-01 13:40,2022-04-21 09:49,2023-10-01 09:57,2021-06-17 02:10,17,,,,,,,17,core-libs,,0,intermittent,noreg-self,testbug,tier1,ursqe-triaged,,,,,,,,,"The following test failed in the JDK17 CI:

java/util/concurrent/forkjoin/AsyncShutdownNow.java

Here's a snippet from the log file:

----------System.out:(60/4792)----------
[TestNG] Running:
  java/util/concurrent/forkjoin/AsyncShutdownNow.java

config AsyncShutdownNow.setup(): success
testFutureGet: java.util.concurrent.ForkJoinPool@799cab32[Running, parallelism = 12, size = 0, active = 0, running = 0, steals = 0, tasks = 0, submissions = 0]
test AsyncShutdownNow.testFutureGet(java.util.concurrent.ForkJoinPool@799cab32): success
testFutureGet: java.util.concurrent.ForkJoinPool@5f5ea55b[Running, parallelism = 1, size = 0, active = 0, running = 0, steals = 0, tasks = 0, submissions = 0]
test AsyncShutdownNow.testFutureGet(java.util.concurrent.ForkJoinPool@5f5ea55b): success
testInvokeAll: java.util.concurrent.ForkJoinPool@13b08449[Running, parallelism = 12, size = 0, active = 0, running = 0, steals = 0, tasks = 0, submissions = 0]
test AsyncShutdownNow.testInvokeAll(java.util.concurrent.ForkJoinPool@13b08449): success
testInvokeAll: java.util.concurrent.ForkJoinPool@51b626a0[Running, parallelism = 1, size = 0, active = 0, running = 0, steals = 0, tasks = 0, submissions = 0]
test AsyncShutdownNow.testInvokeAll(java.util.concurrent.ForkJoinPool@51b626a0): success
testInvokeAny: java.util.concurrent.ForkJoinPool@7c8b3c8e[Running, parallelism = 12, size = 0, active = 0, running = 0, steals = 0, tasks = 0, submissions = 0]
test AsyncShutdownNow.testInvokeAny(java.util.concurrent.ForkJoinPool@7c8b3c8e): failure
java.util.concurrent.RejectedExecutionException
	at java.base/java.util.concurrent.ForkJoinPool.externalPush(ForkJoinPool.java:2171)
	at java.base/java.util.concurrent.ForkJoinPool.externalSubmit(ForkJoinPool.java:2188)
	at java.base/java.util.concurrent.ForkJoinPool.invokeAny(ForkJoinPool.java:2852)
	at AsyncShutdownNow.testInvokeAny(AsyncShutdownNow.java:168)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:85)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:639)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:821)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1131)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:124)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:108)
	at org.testng.TestRunner.privateRun(TestRunner.java:773)
	at org.testng.TestRunner.run(TestRunner.java:623)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:357)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:352)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:310)
	at org.testng.SuiteRunner.run(SuiteRunner.java:259)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1185)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1110)
	at org.testng.TestNG.run(TestNG.java:1018)
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:94)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at com.sun.javatest.regtest.agent.MainActionHelper$AgentVMRunnable.run(MainActionHelper.java:298)
	at java.base/java.lang.Thread.run(Thread.java:831)
testInvokeAny: java.util.concurrent.ForkJoinPool@1ce556a4[Running, parallelism = 1, size = 0, active = 0, running = 0, steals = 0, tasks = 0, submissions = 0]
test AsyncShutdownNow.testInvokeAny(java.util.concurrent.ForkJoinPool@1ce556a4): success
testTimedFutureGet: java.util.concurrent.ForkJoinPool@68b144ab[Running, parallelism = 12, size = 0, active = 0, running = 0, steals = 0, tasks = 0, submissions = 0]
test AsyncShutdownNow.testTimedFutureGet(java.util.concurrent.ForkJoinPool@68b144ab): success
testTimedFutureGet: java.util.concurrent.ForkJoinPool@58a982c9[Running, parallelism = 1, size = 0, active = 0, running = 0, steals = 0, tasks = 0, submissions = 0]
test AsyncShutdownNow.testTimedFutureGet(java.util.concurrent.ForkJoinPool@58a982c9): success
config AsyncShutdownNow.teardown(): success

===============================================
java/util/concurrent/forkjoin/AsyncShutdownNow.java
Total tests run: 8, Failures: 1, Skips: 0
===============================================

----------System.err:(12/726)----------
java.lang.Exception: failures: 1
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:96)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at com.sun.javatest.regtest.agent.MainActionHelper$AgentVMRunnable.run(MainActionHelper.java:298)
	at java.base/java.lang.Thread.run(Thread.java:831)

JavaTest Message: Test threw exception: java.lang.Exception
JavaTest Message: shutting down test

result: Failed. Execution failed: `main' threw exception: java.lang.Exception: failures: 1",,,,,,,,,,,JDK-8270569,JDK-8268986,,,,,,,,,,,,,,,,,,,,,JDK-8278554,,,,,,,,,,,,,,,,,,,x86_64,,,,,,,,,windows,,,,,"0|i2t263:",9223372036854775807,b28,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@239b1eeb,,,,,,,,,"2021-06-02 02:30;dfuchs;This looks like a test bug caused by an improbable race condition (execution of the main thread resumed only after the executor was stopped?): I suspect the catch clause at line 170 should be extended to also accept `RejectedExecutionException` as a valid exception.;;;","2021-06-02 04:06;dl;Good diagnosis; thanks. We forgot that RejectedExecutionException is not an ExecutionException (probably a mistake long ago) so needs a separate catch, as in the following that I will commit unless anyone sees any further issues:

--- AsyncShutdownNow.java.~1.1.~	2020-12-09 13:05:51.000000000 -0500
+++ AsyncShutdownNow.java	2021-06-02 07:04:49.985377797 -0400
@@ -169,6 +169,8 @@
                 assertTrue(false);
             } catch (ExecutionException e) {
                 // expected
+            } catch (RejectedExecutionException e) {
+                // (RejectedExecutionException is not an ExecutionException)
             }
         } finally {
             executor.shutdown();
;;;","2021-06-02 05:13;dfuchs;[~dl] That sounds fine to me. I wonder if the other methods that catch `ExecutionException` in that same test class should be updated in the same way.;;;","2021-06-04 05:07;dl;Yes, two of the three other catches should allow RejectedExecutionException. Also a similar case in AsyncShutdownNowInvokeAny.java. I committed to jsr166 CVS and will put together PR for this.
;;;","2021-06-15 03:59;dl;Actually, if anyone else would like to create a PR with these updates, please go ahead. I'm still fighting with incorporating jdk17 jtreg.  jsr166 versions are at: http://gee.cs.oswego.edu/cgi-bin/viewcvs.cgi/jsr166/src/test/jtreg/util/concurrent/forkjoin/AsyncShutdownNow.java?view=log and http://gee.cs.oswego.edu/cgi-bin/viewcvs.cgi/jsr166/src/test/jtreg/util/concurrent/forkjoin/AsyncShutdownNowInvokeAny.java?view=log;;;","2021-06-17 02:10;roboduke;Changeset: 344e3edf
Author:    Julia Boes <jboes@openjdk.org>
Date:      2021-06-17 09:10:27 +0000
URL:       https://git.openjdk.java.net/jdk17/commit/344e3edf7602d8b788334bd103e9a63a8d74a6f8
;;;","2021-06-17 03:27;dl;Thanks Julia!;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,
java.util.List missing from Collections Framework Overview,JDK-8268077,5050900,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,smarks,prappo,prappo,2021-06-01 11:35,2021-06-10 17:53,2023-10-01 09:57,2021-06-03 09:09,16,17,,,,,,17,core-libs,,0,noreg-doc,,,,,,,,,,,,,"java/util/doc-files/coll-overview.html:

...
<h2>Collection Interfaces</h2>
<p>The <i>collection interfaces</i> are divided into two groups.
...",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2t23f:",9223372036854775807,b26,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@73bf8bbe,,,,,,,,,"2021-06-03 09:09;roboduke;Changeset: 5405f983
Author:    Raffaello Giulietti <raffaello.giulietti@gmail.com>
Committer: Stuart Marks <smarks@openjdk.org>
Date:      2021-06-03 16:08:33 +0000
URL:       https://git.openjdk.java.net/jdk/commit/5405f983db7d359bb65c42366541104c5e9ef7c3
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
[JVMCI] non-default installed code must be marked as in_use,JDK-8268052,5050869,Bug,Closed,JDK,JDK,software,duke,,,P2,Fixed,never,never,never,2021-06-01 08:47,2021-07-05 23:42,2023-10-01 09:57,2021-06-09 10:35,14,15,16,17,,,,17,hotspot,,0,hs-comp-triaged,intermittent,jvmci,oracle-triage-11,oracle-triage-17,,,,,,,,,JDK-8226705 propagated calls to nmethod::mark_in_use to the cases where an nmethod is associated with a Method but left out a call in the case where an nmethod is created but is not directly associated with a method.  The exposes a race where an nmethod can start to be reclaimed before it's even been associated with the InstalledCode object leading to a crash.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8268478,,,,JDK-8226705,,,,"2021-06-01 08:49;never;hs_err_pid23251.log;https://bugs.openjdk.org/secure/attachment/94961/hs_err_pid23251.log",,,,,,,,,,,,,,,,,,14,,,,,,,"0|i2t1wj:",9223372036854775807,b26,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,Fix failed,,"2021-06-09 10:35;roboduke;Changeset: db45ff09
Author:    Tom Rodriguez <never@openjdk.org>
Date:      2021-06-09 17:34:17 +0000
URL:       https://git.openjdk.java.net/jdk/commit/db45ff09acbf4f2d824c5c23093d46c048427368
;;;","2021-06-09 12:23;dlong;[~never] It looks like this change broke jvmci tests.  A lot are failing now with:
fatal error: must own lock CompiledMethod_lock;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
"compiler/intrinsics/bmi/verifycode/BzhiTestI2L.java fails with ""fatal error: Not compilable at tier 3: CodeBuffer overflow""",JDK-8268033,5050844,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,epeter,dcubed,dcubed,2021-06-01 07:17,2022-09-22 04:38,2023-10-01 09:57,2022-01-26 02:13,17,18,19,,,,,19,hotspot,,0,hs-comp-triaged,jdk17u-fix-request,jdk17u-fix-yes,noreg-self,oracle-triage-17,redhat-interest,tier7,tier8,,,,,,"The following test failed in the JDK17 CI:

compiler/intrinsics/bmi/verifycode/BzhiTestI2L.java

Here's a snippet from the log file:

#section:main
----------messages:(5/689)----------
command: main -Xbatch -XX:+UnlockDiagnosticVMOptions -XX:+WhiteBoxAPI -XX:+AbortVMOnCompilationFailure -XX:+IgnoreUnrecognizedVMOptions -XX:+UseBMI2Instructions compiler.intrinsics.bmi.verifycode.BzhiTestI2L
reason: User specified action: run main/bootclasspath/othervm -Xbatch -XX:+UnlockDiagnosticVMOptions -XX:+WhiteBoxAPI -XX:+AbortVMOnCompilationFailure -XX:+IgnoreUnrecognizedVMOptions -XX:+UseBMI2Instructions compiler.intrinsics.bmi.verifycode.BzhiTestI2L 
Mode: othervm [/bootclasspath specified, /othervm specified]
Additional options from @modules: --add-modules java.base,java.management --add-exports java.base/jdk.internal.misc=ALL-UNNAMED
elapsed time (seconds): 38.06
----------configuration:(4/115)----------
Boot Layer
  add modules: java.base java.management   
  add exports: java.base/jdk.internal.misc ALL-UNNAMED

----------System.out:(25/1511)*----------
TEST CASE:public long compiler.intrinsics.bmi.TestBzhiI2L$BzhiI2LExpr.intToLongExpr(int)
public long compiler.intrinsics.bmi.TestBzhiI2L$BzhiI2LExpr.intToLongExpr(int)
# To suppress the following error report, specify this argument
# after -XX: or in .hotspotrc:  SuppressErrorAt=\\compileBroker.cpp:2143
#
# A fatal error has been detected by the Java Runtime Environment:
#
#  Internal Error (t:\\workspace\\open\\src\\hotspot\\share\\compiler\\compileBroker.cpp:2143), pid=8424, tid=48860
#  fatal error: Not compilable at tier 3: CodeBuffer overflow
#
# JRE version: Java(TM) SE Runtime Environment (17.0+25) (fastdebug build 17-ea+25-LTS-2215)
# Java VM: Java HotSpot(TM) 64-Bit Server VM (fastdebug 17-ea+25-LTS-2215, compiled mode, sharing, tiered, compressed oops, compressed class ptrs, g1 gc, windows-amd64)
# Core dump will be written. Default location: T:\\testoutput\\test-support\\jtreg_open_test_hotspot_jtreg_hotspot_not_fast_compiler\\scratch\\2\\hs_err_pid8424.mdmp
#
Unsupported internal testing APIs have been used.

# An error report file with more information is saved as:
# T:\\testoutput\\test-support\\jtreg_open_test_hotspot_jtreg_hotspot_not_fast_compiler\\scratch\\2\\hs_err_pid8424.log
#
# Compiler replay data is saved as:
# T:\\testoutput\\test-support\\jtreg_open_test_hotspot_jtreg_hotspot_not_fast_compiler\\scratch\\2\\replay_pid8424.log
#
# If you would like to submit a bug report, please visit:
#   https://bugreport.java.com/bugreport/crash.jsp
#
----------System.err:(0/0)----------
----------rerun:(57/6865)*----------


Here's the crashing thread's stack:

---------------  T H R E A D  ---------------

Current thread (0x00000209619b3e30):  JavaThread ""C1 CompilerThread0"" daemon [_thread_in_native, id=48860, stack(0x00000047cb400000,0x00000047cb500000)]


Current CompileTask:
C1:  33199 5222    b  3       sun.security.util.KnownOIDs::<clinit> (5905 bytes)

Stack: [0x00000047cb400000,0x00000047cb500000]
Native frames: (J=compiled Java code, j=interpreted, Vv=VM code, C=native code)
V  [jvm.dll+0xad5191]  os::platform_print_native_stack+0xf1  (os_windows_x86.cpp:235)
V  [jvm.dll+0xcfa8e5]  VMError::report+0x1005  (vmError.cpp:739)
V  [jvm.dll+0xcfc26e]  VMError::report_and_die+0x7fe  (vmError.cpp:1549)
V  [jvm.dll+0x4c242e]  report_fatal+0xde  (debug.cpp:304)
V  [jvm.dll+0x492d14]  CompileBroker::post_compile+0x124  (compileBroker.cpp:2145)
V  [jvm.dll+0x4911df]  CompileBroker::invoke_compiler_on_method+0xa4f  (compileBroker.cpp:2340)
V  [jvm.dll+0x48e717]  CompileBroker::compiler_thread_loop+0x2b7  (compileBroker.cpp:1986)
V  [jvm.dll+0xc8a4d7]  JavaThread::thread_main_inner+0x1f7  (thread.cpp:1311)
V  [jvm.dll+0xc81914]  Thread::call_run+0x1b4  (thread.cpp:399)
V  [jvm.dll+0xad3a8e]  thread_native_entry+0xae  (os_windows.cpp:549)
C  [ucrtbase.dll+0x1fb80]
C  [KERNEL32.DLL+0x84d4]
C  [ntdll.dll+0x51781]

The test task's JVM args are:

-Xcomp -XX:+CreateCoredumpOnCrash -ea -esa -XX:CompileThreshold=100 -XX:+UnlockExperimentalVMOptions -server -XX:+TieredCompilation -XX:+VerifyOop",,,,,,,,,,,JDK-8294209,JDK-8291362,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8261671,,,,,,,,,,,,,,,x86_64,,,,,,,,,generic,,,,,"0|i2t1qz:",9223372036854775807,b07,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2022-01-25 08:41;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/7214
Date: 2022-01-25 16:14:29 +0000;;;","2022-01-26 02:13;roboduke;Changeset: ed0df2fa
Author:    Emanuel Peter <emanuel.peter@oracle.com>
Committer: Christian Hagedorn <chagedorn@openjdk.org>
Date:      2022-01-26 10:12:22 +0000
URL:       https://git.openjdk.java.net/jdk/commit/ed0df2fa1f1cb019eadd0083a5006b3142ac0eb5
;;;","2022-09-19 12:55;goetz;Fix request [17u]

I backport this for parity with 17.0.6-oracle.
No risk, only a test change.
Clean backport.
Test passes. SAP nightly testing passed.;;;","2022-09-19 13:08;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/690
Date: 2022-09-19 20:00:03 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
VarHandle combinator check for exceptions is too strict,JDK-8268031,5050839,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,jvernee,jvernee,jvernee,2021-06-01 06:28,2021-06-02 06:08,2023-10-01 09:57,2021-06-02 06:08,repo-panama,,,,,,,,tools,,0,foreign-memaccess+abi,,,,,,,,,,,,,"The current VarHandle combinators, such as filterCoordinate, which are currently exposed through jdk.incubator.foreign.MemoryHandles check whether the filter MethodHandle used for the combinator throws any checked exceptions.

In the case where the filter handle is a BoundMethodHandle, the check walks all the fields of the BoundMehtodHandle, and if they are MethodHandles themselves, recursively checks if they throw any exception.

However, this check is too strict, as even though a MethodHandle bound to a BoundMethodHandle might throw an exception, it could be caught higher up in the method handle chain, making it so the top level method handle will never throw an exception.

The attached example illustrates the problem. Even though the exception thrown by the method 'm' is handled by the catchException combinator, the call to filterCoordinates still throws an IllegalArgumentException.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"2021-06-01 06:55;jvernee;VarHandleCombException-1.java;https://bugs.openjdk.org/secure/attachment/94959/VarHandleCombException-1.java","2021-06-01 06:28;jvernee;VarHandleCombException.java;https://bugs.openjdk.org/secure/attachment/94958/VarHandleCombException.java",,,,,,,,,,,,,,,,,,,,,,,,"0|i2t1pv:",9223372036854775807,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@2251e2f8,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
[lworld] [AArch64] fix support for InlineTypeReturnedAsFields,JDK-8268021,5050827,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,ngasson,ngasson,ngasson,2021-06-01 03:00,2021-06-25 02:18,2023-10-01 09:57,2021-06-25 02:18,repo-valhalla,,,,,,,repo-valhalla,hotspot,,0,lw3,lworld,valhalla,,,,,,,,,,,There is some code to implement this from the original AArch64 port but it doesn't work.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,aarch64,,,,,,,,,,,,,,"0|i2t1n7:",9223372036854775807,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
C2: assert(no_dead_loop) failed: dead loop detected,JDK-8268019,5050822,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,chagedorn,chagedorn,chagedorn,2021-06-01 01:42,2022-02-06 08:04,2023-10-01 09:57,2021-07-29 02:32,11,16,17,18,,,,18,hotspot,,0,c2,hs-comp-triaged,intermittent,javafuzzer,jdk11u-fix-request,jdk11u-fix-yes,jdk17u-fix-request,jdk17u-fix-SQE-ok,jdk17u-fix-yes,oracle-triage-17,redhat-interest,,,"The attached fuzzer test fails intermittently with the following assertion:

To reproduce (fails 1 out of 5-6 times):
$ java -Xcomp -XX:CompileOnly=Test -XX:-TieredCompilation -XX:+IgnoreUnrecognizedVMOptions -XX:+UnlockDiagnosticVMOptions -XX:+StressLCM -XX:+StressGCM -XX:+StressIGVN -XX:RepeatCompilation=100 Test.java

#
# A fatal error has been detected by the Java Runtime Environment:
#
#  Internal Error (/opt/mach5/mesos/work_dir/slaves/3c846bae-ce30-4a97-93ee-9fef4497ccb6-S79226/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/0cb697b6-5006-4d18-afca-8f82d7082f5e/runs/5d51f3ad-e036-4803-805d-9e13517ddb05/workspace/open/src/hotspot/share/opto/phaseX.cpp:945), pid=19896, tid=19909
#  assert(no_dead_loop) failed: dead loop detected
#
# JRE version: Java(TM) SE Runtime Environment (17.0+25) (fastdebug build 17-ea+25-LTS-2214)
# Java VM: Java HotSpot(TM) 64-Bit Server VM (fastdebug 17-ea+25-LTS-2214, compiled mode, sharing, compressed oops, compressed class ptrs, g1 gc, linux-amd64)
# Problematic frame:
# V  [libjvm.so+0x15ef6e6]  PhaseGVN::dead_loop_check(Node*) [clone .part.0]+0x156
.............
Command Line: -Xcomp -XX:CompileOnly=Test -XX:-TieredCompilation -XX:+IgnoreUnrecognizedVMOptions -XX:+UnlockDiagnosticVMOptions -XX:+StressLCM -XX:+StressGCM -XX:+StressIGVN -XX:RepeatCompilation=100 --add-modules=ALL-DEFAULT jdk.compiler/com.sun.tools.javac.launcher.Main Test.java
.............
Current thread (0x00007ff92c235ce0):  JavaThread ""C2 CompilerThread0"" daemon [_thread_in_native, id=19909, stack(0x00007ff903cfd000,0x00007ff903dfe000)]


Current CompileTask:
C2:   3925   83    b        Test::mainTest (577 bytes)

Stack: [0x00007ff903cfd000,0x00007ff903dfe000],  sp=0x00007ff903df9420,  free space=1009k
Native frames: (J=compiled Java code, j=interpreted, Vv=VM code, C=native code)
V  [libjvm.so+0x15ef6e6]  PhaseGVN::dead_loop_check(Node*) [clone .part.0]+0x156
V  [libjvm.so+0x15fdb29]  PhaseIterGVN::transform_old(Node*)+0x609
V  [libjvm.so+0x15f63ae]  PhaseIterGVN::optimize()+0x7e
V  [libjvm.so+0xa19106]  Compile::Optimize()+0x216
V  [libjvm.so+0xa1bec5]  Compile::Compile(ciEnv*, ciMethod*, int, bool, bool, bool, bool, DirectiveSet*)+0x1585
V  [libjvm.so+0x841aba]  C2Compiler::compile_method(ciEnv*, ciMethod*, int, bool, DirectiveSet*)+0x1ea
V  [libjvm.so+0xa2c8e3]  CompileBroker::invoke_compiler_on_method(CompileTask*)+0x1013
V  [libjvm.so+0xa2d5f8]  CompileBroker::compiler_thread_loop()+0x5a8
V  [libjvm.so+0x18a3a11]  JavaThread::thread_main_inner()+0x271
V  [libjvm.so+0x18ab610]  Thread::call_run()+0x100
V  [libjvm.so+0x157721e]  thread_native_entry(Thread*)+0x10e",,,,,,,,,,,JDK-8272679,JDK-8272717,JDK-8272645,JDK-8273793,,,,,,,,,,,,,,,,,,,,,,,,,,,"2021-06-01 01:42;chagedorn;FuzzerUtils.java;https://bugs.openjdk.org/secure/attachment/94955/FuzzerUtils.java","2021-06-01 01:42;chagedorn;Test.java;https://bugs.openjdk.org/secure/attachment/94957/Test.java","2021-06-01 01:42;chagedorn;hs_err_pid19896.log;https://bugs.openjdk.org/secure/attachment/94956/hs_err_pid19896.log",,,,,,,,,,,,,,,,,,,,,,,"0|i2t1m3:",9223372036854775807,b09,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2021-06-01 01:44;chagedorn;ILW = C2 assertion during IGVN, only fails intermittently with single Java Fuzzer test, disable compilation of affected method = HLM = P3;;;","2021-06-01 01:47;chagedorn;Could not reproduce this before JDK 16+18 (introduced StressIGVN) or in 11u (no StressIGVN and RepeatCompilation available). But it's likely that this problem also affects 11u and earlier versions before 16.;;;","2021-07-29 02:32;roboduke;Changeset: 489e5fd1
Author:    Christian Hagedorn <chagedorn@openjdk.org>
Date:      2021-07-29 09:31:22 +0000
URL:       https://git.openjdk.java.net/jdk/commit/489e5fd12a37a45f4f5ea64b05f85c6f99f70811
;;;","2021-08-22 22:51;thartmann;I've already pushed the backport to JDK 17u and forgot to request approval. Doing this now:

Fix request (17u):
The bug leads to a crash in C2. The fix is low risk (slow call) and has been tested in the JDK 18 and Oracle JDK 11u CI for a while and with tier1-3 in JDK 17u. The patch applies cleanly.;;;","2021-09-14 02:58;mdoerr;Fix Request (11u):
Should get backported for parity with 11.0.14-oracle. Applies cleanly, but test needs modification. Review: https://github.com/openjdk/jdk11u-dev/pull/342;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
"C2: assert(phi_type->isa_int() || phi_type->isa_ptr() || phi_type->isa_long()) failed: bad phi type",JDK-8268017,5050819,Bug,Closed,JDK,JDK,software,duke,,,P2,Fixed,roland,chagedorn,chagedorn,2021-06-01 00:59,2021-08-11 12:05,2023-10-01 09:57,2021-06-09 00:59,17,,,,,,,17,hotspot,,0,c2,hs-comp-triaged,javafuzzer,oracle-triage-11,oracle-triage-17,,,,,,,,,"The attached fuzzer test fails intermittently with the following assertion:

To reproduce (fails 1 out of 3-4 runs):
$ java -XX:RepeatCompilation=100 Test.java

#
# A fatal error has been detected by the Java Runtime Environment:
#
#  Internal Error (/opt/mach5/mesos/work_dir/slaves/3c846bae-ce30-4a97-93ee-9fef4497ccb6-S79226/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/0cb697b6-5006-4d18-afca-8f82d7082f5e/runs/5d51f3ad-e036-4803-805d-9e13517ddb05/workspace/open/src/hotspot/share/opto/cfgnode.cpp:1972), pid=14706, tid=14725
#  assert(phi_type->isa_int() || phi_type->isa_ptr() || phi_type->isa_long()) failed: bad phi type
#
# JRE version: Java(TM) SE Runtime Environment (17.0+25) (fastdebug build 17-ea+25-LTS-2214)
# Java VM: Java HotSpot(TM) 64-Bit Server VM (fastdebug 17-ea+25-LTS-2214, mixed mode, sharing, tiered, compressed oops, compressed class ptrs, g1 gc, linux-amd64)
# Problematic frame:
# V  [libjvm.so+0x893a5a]  PhiNode::Ideal(PhaseGVN*, bool)+0xfaa
.............
Command Line: -XX:RepeatCompilation=100 --add-modules=ALL-DEFAULT jdk.compiler/com.sun.tools.javac.launcher.Main Test.java
.............
Current thread (0x00007f2e1c1acb40):  JavaThread ""C2 CompilerThread1"" daemon [_thread_in_native, id=14725, stack(0x00007f2e499f9000,0x00007f2e49afa000)]


Current CompileTask:
C2:  12185  699 % !   4       Test::mainTest @ 261 (642 bytes)

Stack: [0x00007f2e499f9000,0x00007f2e49afa000],  sp=0x00007f2e49af4830,  free space=1006k
Native frames: (J=compiled Java code, j=interpreted, Vv=VM code, C=native code)
V  [libjvm.so+0x893a5a]  PhiNode::Ideal(PhaseGVN*, bool)+0xfaa
V  [libjvm.so+0x15fd5d8]  PhaseIterGVN::transform_old(Node*)+0xb8
V  [libjvm.so+0x15f63ae]  PhaseIterGVN::optimize()+0x7e
V  [libjvm.so+0xa1ddea]  PhaseIdealLoop::optimize(PhaseIterGVN&, LoopOptsMode)+0x69a
V  [libjvm.so+0xa1a1dc]  Compile::Optimize()+0x12ec
V  [libjvm.so+0xa1bec5]  Compile::Compile(ciEnv*, ciMethod*, int, bool, bool, bool, bool, DirectiveSet*)+0x1585
V  [libjvm.so+0x841aba]  C2Compiler::compile_method(ciEnv*, ciMethod*, int, bool, DirectiveSet*)+0x1ea
V  [libjvm.so+0xa2c889]  CompileBroker::invoke_compiler_on_method(CompileTask*)+0xfb9
V  [libjvm.so+0xa2d5f8]  CompileBroker::compiler_thread_loop()+0x5a8
V  [libjvm.so+0x18a3a11]  JavaThread::thread_main_inner()+0x271
V  [libjvm.so+0x18ab610]  Thread::call_run()+0x100
V  [libjvm.so+0x157721e]  thread_native_entry(Thread*)+0x10e",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8252372,,,,"2021-06-01 00:59;chagedorn;FuzzerUtils.java;https://bugs.openjdk.org/secure/attachment/94952/FuzzerUtils.java","2021-06-01 00:59;chagedorn;Test.java;https://bugs.openjdk.org/secure/attachment/94953/Test.java","2021-06-07 05:56;chagedorn;Test2.java;https://bugs.openjdk.org/secure/attachment/95050/Test2.java","2021-06-01 00:59;chagedorn;hs_err_pid14706.log;https://bugs.openjdk.org/secure/attachment/94954/hs_err_pid14706.log",,,,,,,,,,,,,,b24,17,,,,,,,"0|i2t1lf:",9223372036854775807,b26,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,Verified,,"2021-06-01 01:01;chagedorn;Could not reproduce this with JDK 16 or JDK 11u.;;;","2021-06-01 01:03;chagedorn;ILW = C2 assertion in Ideal transformation, only fails intermittently with single Java Fuzzer test, disable compilation of affected method = HLM = P3;;;","2021-06-07 05:59;chagedorn;Found another Java Fuzzer failure (Test2.java) which reproduces reliably:
$ java -Xcomp -XX:-TieredCompilation -XX:CompileOnly=Test2 Test2.java

Could trace it back to JDK-8252372. Bumping priority up to P2 as it was introduced recently and should be fixed in JDK 17.

[~roland] can you take a look at it?;;;","2021-06-09 00:59;roboduke;Changeset: 4413142e
Author:    Roland Westrelin <roland@openjdk.org>
Date:      2021-06-09 07:58:17 +0000
URL:       https://git.openjdk.java.net/jdk/commit/4413142eca1712f9a78c5683083eb01908397bb0
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Build failure on SUSE Linux Enterprise Server 11.4 (s390x) due to 'SYS_get_mempolicy' was not declared,JDK-8268014,5050815,Bug,Resolved,JDK,JDK,software,duke,,,P2,Fixed,jiefu,jiefu,jiefu,2021-06-01 00:18,2022-09-06 01:41,2023-10-01 09:57,2021-06-03 05:56,17,,,,,,,17,hotspot,,0,jdk11u-fix-request,jdk11u-fix-yes,noreg-build,tencent-interest,,,,,,,,,,"See the JBS comment by [~mdoerr] :
https://bugs.openjdk.java.net/browse/JDK-8241423?focusedCommentId=14424303&page=com.atlassian.jira.plugin.system.issuetabpanels:comment-tabpanel#comment-14424303",,,,,,,,,,,JDK-8279353,JDK-8293406,,,,,,,,,,,,,,,,,,,,,JDK-8241423,,,,,,,,,,,,,,,,,,,other,,,,,,,,,other,,,,,"0|i2t1kj:",9223372036854775807,b26,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,,,"2021-06-01 00:22;dholmes;So they obviously don't build ZGC for those systems. I should have realised the use of the symbol in the ZGC code was not sufficient to ensure it was generally available.;;;","2021-06-01 00:34;jiefu;Yes, ZGC only builds on x86_64 and aarch64 currently.
Sorry, I missed that point before.;;;","2021-06-01 00:40;dholmes;I don't think it is the arch that is the issue, just a very old Linux version.;;;","2021-06-01 03:32;mbaesken;Hello, on older linux s390x machines the define SYS_get_mempolicy is not present.
I found the define on SUSE Linux SLES 15 and 12.5. But I did not find it on SLES11 and on SLES 12.1 .
However, __NR_get_mempolicy is present on the older machines as well.
So a workaround could be to define SYS_get_mempolicy on s390 where the define is missing :

#if !defined(SYS_get_mempolicy) && defined(S390)
#define SYS_get_mempolicy __NR_get_mempolicy
#endif;;;","2021-06-01 11:08;hseigel;ILW=HMM=P2;;;","2021-06-03 05:56;roboduke;Changeset: fbaebd42
Author:    Jie Fu <jiefu@openjdk.org>
Date:      2021-06-03 12:55:21 +0000
URL:       https://git.openjdk.java.net/jdk/commit/fbaebd424310d2704aa8b347fe0f56ff0a038220
;;;","2021-12-30 06:57;jiefu;Fix request for jdk11u.

This is a follow-up of JDK-8241423 backport to jdk11u, which fixes the build failure on some old SUSE Linux systems.
Patch can be applied cleanly after JDK-8241423 and no risk at all.
Thanks.;;;","2021-12-31 05:51;roboduke;A pull request was submitted for review.

URL: https://git.openjdk.java.net/jdk11u-dev/pull/734
Date: 2021-12-31 13:47:48 +0000
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,
Add a jextract sample for libffmpeg library,JDK-8268001,5050802,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,sundar,sundar,sundar,2021-06-01 00:03,2021-06-01 00:18,2023-10-01 09:57,2021-06-01 00:11,repo-panama,,,,,,,,tools,,0,,,,,,,,,,,,,,Add a jextract sample for libffmpeg library,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,generic,,,,,,,,,generic,,,,,"0|i2t1hn:",9223372036854775807,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@2251e2f8,,,,,,,,,"2021-06-01 00:11;sundar;Committed into jextract samples repo.

https://github.com/sundararajana/panama-jextract-samples/commit/bc2fdc3eec7e1a2abc33811a4fb77cb986fbc763;;;","2021-06-01 00:18;sundar;Had discussions based on C ""struct"" usage in this project with [~mcimadamore] and [~jvernee]. 

Learning outcomes of this project:

* We need easier access for struct_ptr->field_name

This gets complicated when translating a->b->c from a C program
If we had special $deref getters and setters for fields, we could translate a->b->c as

MemoryAddress aPtr = ...
var bPtr = A.b$get$deref(aPtr, scope);
var c = B.c$get$deref(bPtr, scope);

which is better than the current 

MemoryAddress aPtr = ...
var aSeg = aPtr.asSegment(A.sizeof(), scope);
var bPtr = A.b$get(aSeg);
var bSeg = bPtr.asSegment(B.sizeof(), scope);
var c = Bar.c$get(bSeg, scope);

* Perhaps we can just add deref?

MemorySegment deref(MemoryAddress addr, ResourceScope scope) …

That way user can store segment for multiple -> uses (seems to be common in C code)

fooptr->item_a, fooptr->item_b

* Other issue that came up in the discussion: Handling array members / pointer array members in a struct is not easy.

We *may* add more indexed accessor methods like

get$foo(MemorySegment)  // x.y
get$foo(MemorySegment, long i)  // x[i].y
get$foo(MemorySegment, long i, long j)  // x[i].y[j]
get$foo$deref(MemorySegment)  // x->y
get$foo$deref(MemorySegment, long i) // x[i] -> y
get$foo$deref(MemorySegment, long i, long j) // x[i] -> y[j]
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Add reference to JVMS class file format in Lookup::defineHiddenClass,JDK-8267995,5050796,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,mchung,mchung,mchung,2021-05-31 12:58,2021-06-10 17:53,2023-10-01 09:57,2021-06-03 13:44,15,,,,,,,17,core-libs,,0,noreg-doc,,,,,,,,,,,,,`this_class` is referenced in the spec of Lookup::defineHiddenClass.   It'd be helpful to reference JVMS class file format for the readers who are not familiar with JVMS.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2t1gb:",9223372036854775807,b26,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@1cfeb1de,,,,,,,,,"2021-06-03 13:44;roboduke;Changeset: b9558655
Author:    Mandy Chung <mchung@openjdk.org>
Date:      2021-06-03 20:43:12 +0000
URL:       https://git.openjdk.java.net/jdk/commit/b95586559ca44b040261168cbe5ba90689cab17e
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Revisit some uses of `synchronized` in the HttpClient API,JDK-8267990,5050790,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,dfuchs,dfuchs,dfuchs,2021-05-31 09:11,2021-06-07 15:18,2023-10-01 09:57,2021-06-01 10:11,,,,,,,,17,core-libs,,0,httpclient,noreg-other,,,,,,,,,,,,"The HttpClient uses synchronized at places where it is not needed - or potentially harmful.

The Utils.remaining(List<ByteBuffer> list) method assumes that it can and should synchronize on the given list to prevent concurrent modification. In 99% of the cases this assumption is wrong. There's only one such list (the SSLFlowDelegate writeList) that requires this synchronization. 
In some circumstances, the list operated on can be one returned by List.of() which could become value-based - and that could stop working once value-based lists are implemented.

The `SequentialScheduler.synchronizedScheduler` uses `synchronized` for visibility. It could use a Lock for the same purpose and this would make it possible to assert that there is no contention (since the logic of the  SequentialScheduler should prevent contention from occurring at this place).
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2t1ez:",9223372036854775807,b25,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@446e124a,,,,,,,,,"2021-06-01 10:11;roboduke;Changeset: 9d8ad2ed
Author:    Daniel Fuchs <dfuchs@openjdk.org>
Date:      2021-06-01 17:10:38 +0000
URL:       https://git.openjdk.java.net/jdk/commit/9d8ad2ed62325bd8d813974d5aa1e031ed8bf8da
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Exceptions thrown during upcalls should be handled,JDK-8267989,5050785,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,jvernee,jvernee,jvernee,2021-05-31 07:50,2021-06-07 06:02,2023-10-01 09:57,2021-06-02 06:08,repo-panama,,,,,,,,tools,,0,foreign-memaccess+abi,,,,,,,,,,,,,"Currently, if an exception is thrown one of several things can happen:

- If the upcall is specialized, the VM crashes with a fatal error (though the exception is handled explicitly in native code)
- If the upcall is interpreted, the exception will be handled when returning from a downcall earlier on the same thread (but any native code in between will be unaware of the exception)

Neither of these are desirable. JNI can handle the latter case because native code can detect the exception and handle it appropriately, but in our case, the native code has no idea about exception.

We think that the best way to handle exceptions thrown during upcalls is to do some error reporting, and then call System.exit, to avoid any trouble with unsuspecting native code we're about to return to.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8268328,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2t1dv:",9223372036854775807,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@2251e2f8,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
"C2: assert(!addp->is_AddP() || addp->in(AddPNode::Base)->is_top() || addp->in(AddPNode::Base) == n->in(AddPNode::Base)) failed: Base pointers must match (addp 1301)",JDK-8267988,5050784,Bug,Closed,JDK,JDK,software,duke,,,P2,Fixed,roland,chagedorn,chagedorn,2021-05-31 07:25,2023-09-15 05:49,2023-10-01 09:57,2021-06-16 00:37,17,,,,,,,17,hotspot,,0,c2,hs-comp-triaged,javafuzzer,oracle-triage-11,oracle-triage-17,,,,,,,,,"The attached fuzzer test starts to fail after JDK-8252372 with the following assertion:

To reproduce:
$ java -Xcomp -XX:CompileOnly=Test Test.java
$ java -Xcomp -XX:CompileOnly=Reduced Reduced.java

#
# A fatal error has been detected by the Java Runtime Environment:
#
#  Internal Error (/opt/mach5/mesos/work_dir/slaves/3c846bae-ce30-4a97-93ee-9fef4497ccb6-S79138/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/1e84e880-665b-4ce6-a86d-5a8778302ad6/runs/5aaa51c3-47d3-43d6-b2dc-734ff90b359e/workspace/open/src/hotspot/share/opto/compile.cpp:3065), pid=30028, tid=30041
#  assert(!addp->is_AddP() || addp->in(AddPNode::Base)->is_top() || addp->in(AddPNode::Base) == n->in(AddPNode::Base)) failed: Base pointers must match (addp 1301)
#
# JRE version: Java(TM) SE Runtime Environment (17.0+24) (fastdebug build 17-ea+24-LTS-2164)
# Java VM: Java HotSpot(TM) 64-Bit Server VM (fastdebug 17-ea+24-LTS-2164, compiled mode, sharing, tiered, compressed oops, compressed class ptrs, g1 gc, linux-amd64)
# Problematic frame:
# V  [libjvm.so+0xa0ce2a]  Compile::final_graph_reshaping_main_switch(Node*, Final_Reshape_Counts&, unsigned int)+0x176a
.............
Command Line: -Xmx1G -Xcomp -Xbatch -XX:CompileOnly=Test -XX:CompileCommand=quiet Test
.............
Current thread (0x00007ff38047f390):  JavaThread ""C2 CompilerThread0"" daemon [_thread_in_native, id=30041, stack(0x00007ff34f6ff000,0x00007ff34f800000)]


Current CompileTask:
C2:    388   14   !b  4       Test::fMeth (332 bytes)

Stack: [0x00007ff34f6ff000,0x00007ff34f800000],  sp=0x00007ff34f7fb100,  free space=1008k
Native frames: (J=compiled Java code, j=interpreted, Vv=VM code, C=native code)
V  [libjvm.so+0xa0ce2a]  Compile::final_graph_reshaping_main_switch(Node*, Final_Reshape_Counts&, unsigned int)+0x176a
V  [libjvm.so+0xa0d365]  Compile::final_graph_reshaping_impl(Node*, Final_Reshape_Counts&) [clone .part.0]+0x85
V  [libjvm.so+0xa0dad8]  Compile::final_graph_reshaping_walk(Node_Stack&, Node*, Final_Reshape_Counts&)+0x198
V  [libjvm.so+0xa0f8be]  Compile::final_graph_reshaping()+0x3ce
V  [libjvm.so+0xa1b62f]  Compile::Optimize()+0x196f
V  [libjvm.so+0xa1cc95]  Compile::Compile(ciEnv*, ciMethod*, int, bool, bool, bool, bool, DirectiveSet*)+0x1585
V  [libjvm.so+0x840f1a]  C2Compiler::compile_method(ciEnv*, ciMethod*, int, bool, DirectiveSet*)+0x1ea
V  [libjvm.so+0xa2d699]  CompileBroker::invoke_compiler_on_method(CompileTask*)+0xfb9
V  [libjvm.so+0xa2e408]  CompileBroker::compiler_thread_loop()+0x5a8
V  [libjvm.so+0x18a3e21]  JavaThread::thread_main_inner()+0x271
V  [libjvm.so+0x18ab9e0]  Thread::call_run()+0x100
V  [libjvm.so+0x157751e]  thread_native_entry(Thread*)+0x10e
",,,,,,,,,,,JDK-8268930,,,,,,,,,,,,,,,,,,,,,,JDK-8252372,JDK-8315377,JDK-8308103,,,,,,"2021-05-31 07:25;chagedorn;Reduced.java;https://bugs.openjdk.org/secure/attachment/94933/Reduced.java","2021-05-31 07:24;chagedorn;Test.java;https://bugs.openjdk.org/secure/attachment/94935/Test.java","2021-05-31 07:25;chagedorn;hs_err_pid30028.log;https://bugs.openjdk.org/secure/attachment/94934/hs_err_pid30028.log",,,,,,,,,,,,,,,b24,17,,,,,,,"0|i2t1dn:",9223372036854775807,b27,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,Verified,,"2021-05-31 07:33;chagedorn;ILW = Assert during C2 compilation (recent regression in JDK 17), observing this often with JavaFuzzer generated tests, no known workaround but disable C2 compilation of affected method = HMM = P2

[~roland] Can you take a look at it?;;;","2021-06-16 00:37;roboduke;Changeset: 4d545a1f
Author:    Roland Westrelin <roland@openjdk.org>
Date:      2021-06-16 07:36:07 +0000
URL:       https://git.openjdk.java.net/jdk17/commit/4d545a1f86325140ed268c5437d776ceb8e21077
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
[lworld] The fix for JDK-8267918 incorrectly precludes synchronization on variables of TypeVariable type,JDK-8267984,5050780,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,sadayapalam,sadayapalam,sadayapalam,2021-05-31 06:25,2021-07-27 18:07,2023-10-01 09:57,2021-05-31 07:02,repo-valhalla,,,,,,,repo-valhalla,tools,,0,lw3,lworld,,,,,,,,,,,,"java.base/share/classes/java/util/stream/Collectors.java fails to
build after the commit f1b32691431219c4d4861da296a1f33fb1bb8b01

This is most likely due to the fix for JDK-8267918.

What is puzzling is build didn't fail in my workspace - Perhaps I failed to clean and build before running tier 1 tests!",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,generic,,,,,,,,,generic,,,,,"0|i2t1cr:",9223372036854775807,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4dca67bd,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Set the node after peephole optimization to be removed,JDK-8267982,5050776,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,wanghaomin,wanghaomin,wanghaomin,2021-05-31 05:02,2021-08-18 02:24,2023-10-01 09:57,2021-07-08 02:13,17,18,,,,,,18,hotspot,,0,c2,hs-comp-triaged,oracle-triage-11,oracle-triage-17,,,,,,,,,,"when I do a peephole optimization like this:

  peephole %{                                                                    
    peepmatch (storeI loadI storeI loadI);                                       
    peepconstraint (0.src == 1.dst, 2.src == 3.dst, 1.mem == 3.mem);             
    peepreplace ( storeII(0.mem 0.mem 2.mem 1.mem 0.src));                       
  %} 



It crashed on mips64 arch and error infomation are:

#
# A fatal error has been detected by the Java Runtime Environment:
#
#  SIGSEGV (0xb) at pc=0x000000fff5143800, pid=24601, tid=24614
#
# JRE version: OpenJDK Runtime Environment (17.0) (build 17-internal+0-adhoc.sunguoyun.jdk-ls-release)
# Java VM: OpenJDK 64-Bit Server VM (17-internal+0-adhoc.sunguoyun.jdk-ls-release, compiled mode, compressed oops, compressed class ptrs, g1 gc, linux-mips64)
# Problematic frame:
# V  [libjvm.so+0x2d7800]  OopFlow::build_oop_map(Node*, int, PhaseRegAlloc*, int*)+0x238
#
# No core dump will be written. Core dumps have been disabled. To enable core dumping, try ""ulimit -c unlimited"" before starting Java again



x86_64 maybe have the same issue:
The nodes (storeI loadI storeI loadI) will be removed after peephole optimization, but the regs of these node be set lived in do_liveness() of buildOopMap.cpp.


//src/hotspot/share/opto/phaseX.cpp
2026 void PhasePeephole::do_transform() { 
...
2073           for( ; (instruction_index > safe_instruction_index); --instruction_index ) {
2074             block->remove_node( instruction_index );                            
2075           } 
...

//src/hotspot/share/opto/buildOopMap.cpp
404 static void do_liveness(PhaseRegAlloc* regalloc, PhaseCFG* cfg, Block_List* worklist, int max_reg_ints, Arena* A, Dict* safehash) {

...
464         for( uint l=1; l<n->req(); l++ ) {                                      
465           Node *def = n->in(l);                                 //include removed peephole loadI
466           assert(def != 0, ""input edge required"");                              
467           int first = regalloc->get_reg_first(def);                             
468           int second = regalloc->get_reg_second(def);                           
469           if( OptoReg::is_valid(first) ) set_live_bit(tmp_live,first);          
470           if( OptoReg::is_valid(second) ) set_live_bit(tmp_live,second);  



but block`s _defs[] index not include peephole loadI

//src/hotspot/share/opto/buildOopMap.cpp
111 void OopFlow::compute_reach( PhaseRegAlloc *regalloc, int max_reg, Dict *safehash ) {
112                                                                                 
113   for( uint i=0; i<_b->number_of_nodes(); i++ ) {                               
114     Node *n = _b->get_node(i);     
...

131     _defs[first] = n;                                                           
132     _defs[second] = n;   


if the blocks before contained-MachSafePoint have no used the same reg for loadI , _defs[reg] will be null in build_oop_map() ,so cause crash


//src/hotspot/share/opto/buildOopMap.cpp
210 OopMap *OopFlow::build_oop_map( Node *n, int max_reg, PhaseRegAlloc *regalloc, int* live ) {
...
239     Node *def = _defs[reg];     ---------------->maybe NULL                         
240     assert( def, ""since live better have reaching def"" );  
243     const Type *t = def->bottom_type();  --->crash here
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,other,,,,,,,,,linux,,,,,"0|i2t1bv:",9223372036854775807,b06,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2021-05-31 23:40;thartmann;ILW = Crash during C2 compilation, not a problem with current code, disable peephole optimization = HLL = P4;;;","2021-07-08 02:13;roboduke;Changeset: 2c883eee
Author:    sunguoyun <sunguoyun@loongson.cn>
Committer: Tobias Hartmann <thartmann@openjdk.org>
Date:      2021-07-08 09:12:35 +0000
URL:       https://git.openjdk.java.net/jdk/commit/2c883eeed4a5276bb4b0dc3d2ffc4d9151662f6b
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
C2: Fix verification code in SubTypeCheckNode::Ideal() ,JDK-8267979,5050772,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,vlivanov,vlivanov,vlivanov,2021-05-31 03:00,2021-09-15 14:06,2023-10-01 09:57,2021-06-01 02:16,17,,,,,,,17,hotspot,,0,c2,hs-comp-triaged,intermittent-low-frequency,oracle-triage-11,oracle-triage-17,,,,,,,,,Make verification code in SubTypeCheckNode::Ideal() robust in presence of concurrent class loading.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8261192,,,,JDK-8267947,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2t1az:",9223372036854775807,b25,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2021-06-01 02:16;roboduke;Changeset: f5634fe3
Author:    Vladimir Ivanov <vlivanov@openjdk.org>
Date:      2021-06-01 09:15:46 +0000
URL:       https://git.openjdk.java.net/jdk/commit/f5634fe39db44d5d504e1b2f8aba1bca3e479a89
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Inline cache cleaning is not monotonic,JDK-8267972,5050680,Bug,Closed,JDK,JDK,software,duke,,,P2,Fixed,eosterlund,webbuggrp,webbuggrp,2021-05-28 08:40,2021-08-27 09:15,2023-10-01 09:57,2021-06-07 02:46,12,13,14,15,16,,,17,hotspot,,0,dcsswa,regression,reproducer-no,webbug,zgc,,,,,,,,,"ADDITIONAL SYSTEM INFORMATION :
See crash log

A DESCRIPTION OF THE PROBLEM :
This looks like the same issue as

https://bugs.openjdk.java.net/browse/JDK-8215754

But this crash occurred with jdk 16 so it should be fixed. 

ERROR MESSAGES/STACK TRACES THAT OCCUR :
#
# A fatal error has been detected by the Java Runtime Environment:
#
#  SIGSEGV (0xb) at pc=0x00007f412574b5b0, pid=40608, tid=109873
#
# JRE version: OpenJDK Runtime Environment (16.0+36) (build 16+36-2231)
# Java VM: OpenJDK 64-Bit Server VM (16+36-2231, mixed mode, sharing, tiered, z gc, linux-amd64)
# Problematic frame:
# V  [libjvm.so+0xb655b0]  Method::is_method_handle_intrinsic() const+0x0
#
# Core dump will be written. Default location: /sitelogs/core-%e-%s-%u-%g-40608-%t (max size 5242880 kB). To ensure a full core dump, try ""ulimit -c unlimited"" before starting Java again
#
# If you would like to submit a bug report, please visit:
#   https://bugreport.java.com/bugreport/crash.jsp
#

---------------  S U M M A R Y ------------

Command Line: -XX:+UseZGC -XX:InitialCodeCacheSize=128m -XX:ReservedCodeCacheSize=512m -XX:+PrintCommandLineFlags -XX:+RelaxAccessControlCheck -XX:-DontCompileHugeMethods -Demail.list=projalerts@company.com -XX:+PerfDisableSharedMem -XX:+AlwaysPreTouch -Doracle.jdbc.DateZeroTime=true -Djava.security.egd=file:///dev/urandom -Dorg.tanukisoftware.wrapper.WrapperSimpleApp.waitForStartMain=TRUE -Dorg.tanukisoftware.wrapper.WrapperSimpleApp.maxStartMainWait=300 -Dagrona.disable.bounds.checks=true -XX:-UseCounterDecay -XX:-UseBiasedLocking -XX:+UseNUMA -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=60000 -Xlog:gc=info,safepoint:file=/sitelogs/proj-service//gc.x.log:time:filecount=20,filesize=45m -Xlog:class+unload=off --add-opens=java.base/java.lang=ALL-UNNAMED --add-opens=java.base/java.lang.invoke=ALL-UNNAMED --add-opens=java.base/java.math=ALL-UNNAMED --add-opens=java.base/java.util=ALL-UNNAMED --add-opens=java.base/java.text=ALL-UNNAMED --add-opens=java.desktop/java.awt.font=ALL-UNNAMED --add-opens=java.base/sun.nio.cs=ALL-UNNAMED --add-opens=java.base/sun.nio.ch=ALL-UNNAMED --add-opens=java.base/java.util.concurrent=ALL-UNNAMED --add-opens=java.base/java.nio=ALL-UNNAMED -Xms10240m -Xmx10240m -Djava.library.path=../lib:../app -Dwrapper.key=sqMgl7Pii9_7mdMh -Dwrapper.port=32000 -Dwrapper.jvm.port.min=31000 -Dwrapper.jvm.port.max=31999 -Dwrapper.disable_console_input=TRUE -Dwrapper.pid=40606 -Dwrapper.version=3.5.14 -Dwrapper.native_library=wrapper -Dwrapper.service=TRUE -Dwrapper.cpu.timeout=10 -Dwrapper.jvmid=1 org.tanukisoftware.wrapper.WrapperSimpleApp com.company.proj.service.server.ServiceMain

Host: Intel(R) Xeon(R) CPU E5-2697 v3 @ 2.60GHz, 28 cores, 62G, CentOS Linux release 7.6.1810 (Core) 
Time: Thu May 27 19:22:19 2021 CDT elapsed time: 3734896.206537 seconds (43d 5h 28m 16s)

---------------  T H R E A D  ---------------

Current thread (0x00007f3aa0672e50):  JavaThread ""PlanFinder-0"" daemon [_thread_in_Java, id=109873, stack(0x00007f3d75fe8000,0x00007f3d760e9000)]

Stack: [0x00007f3d75fe8000,0x00007f3d760e9000],  sp=0x00007f3d760e7138,  free space=1020k
Native frames: (J=compiled Java code, A=aot compiled Java code, j=interpreted, Vv=VM code, C=native code)
V  [libjvm.so+0xb655b0]  Method::is_method_handle_intrinsic() const+0x0
V  [libjvm.so+0x40cf52]  BarrierSetNMethod::is_armed(nmethod*)+0x12
V  [libjvm.so+0x40cc35]  BarrierSetNMethod::nmethod_stub_entry_barrier(unsigned char**)+0x35
v  ~StubRoutines::nmethod_entry_barrier
C  0xffffffffffffffff


siginfo: si_signo: 11 (SIGSEGV), si_code: 1 (SEGV_MAPERR), si_addr: 0x0000000000000028

Register to memory mapping:

RAX=0x00007f4120039720 points into unknown readable memory: 0x00007f4125d0b8d8 | d8 b8 d0 25 41 7f 00 00
RBX=0x00007f4109803890 is at entry_point+-752 in (nmethod*)0x00007f4109803890
RCX=0x0000000000000007 is an unknown value
RDX=0x00007f4109803880 points into unknown readable memory: 0x0000000000000033 | 33 00 00 00 00 00 00 00
RSP=0x00007f3d760e7138 is pointing into the stack for thread: 0x00007f3aa0672e50
RBP=0x00007f3d760e7150 is pointing into the stack for thread: 0x00007f3aa0672e50
RSI=0x00007f4109803890 is at entry_point+-752 in (nmethod*)0x00007f4109803890
RDI=0x0 is NULL
R8 =0x00007f4109803890 is at entry_point+-752 in (nmethod*)0x00007f4109803890
R9 =0x00007f4108b88000 points into unknown readable memory: 0x0000000000000016 | 16 00 00 00 00 00 00 00
R10=0x00007f40f85ef000 points into unknown readable memory: 0x0706050403020100 | 00 01 02 03 04 05 06 07
R11=2252085 is a compressed pointer to class: 0x000000080112e9a8
com.company.nums.biz.numsrithm.lp.FractionalQuantizingNumsResultCalculator {0x000000080112e9a8}
R12=0x00007f412003faf0 points into unknown readable memory: 0x00007f4125d0ba78 | 78 ba d0 25 41 7f 00 00
R13=0x00007f3d760e72c8 is pointing into the stack for thread: 0x00007f3aa0672e50
R14=0x00007f412003faf0 points into unknown readable memory: 0x00007f4125d0ba78 | 78 ba d0 25 41 7f 00 00
R15=0x00007f3aa0672e50 is a thread


Registers:
RAX=0x00007f4120039720, RBX=0x00007f4109803890, RCX=0x0000000000000007, RDX=0x00007f4109803880
RSP=0x00007f3d760e7138, RBP=0x00007f3d760e7150, RSI=0x00007f4109803890, RDI=0x0000000000000000
R8 =0x00007f4109803890, R9 =0x00007f4108b88000, R10=0x00007f40f85ef000, R11=0x0000000000225d35
R12=0x00007f412003faf0, R13=0x00007f3d760e72c8, R14=0x00007f412003faf0, R15=0x00007f3aa0672e50
RIP=0x00007f412574b5b0, EFLAGS=0x0000000000010202, CSGSFS=0x0000000000000033, ERR=0x0000000000000004
  TRAPNO=0x000000000000000e

Top of Stack: (sp=0x00007f3d760e7138)
0x00007f3d760e7138:   00007f4124ff2b65 0000000000000000
0x00007f3d760e7148:   00007f4109803890 00007f3d760e7170
0x00007f3d760e7158:   00007f4124ff2f52 00007f3e3cc5a2d8
0x00007f3d760e7168:   00007f4109803890 00007f3d760e71a0 

Instructions: (pc=0x00007f412574b5b0)
0x00007f412574b4b0:   b7 41 2c 45 31 c0 4c 8b 4c c2 48 0f b7 41 2a 31
0x00007f412574b4c0:   c9 48 8b 74 c2 48 48 8b 07 4c 89 ca ff 90 c0 00
0x00007f412574b4d0:   00 00 48 85 c0 0f 95 c0 48 8b 5d f8 c9 c3 66 90
0x00007f412574b4e0:   8b 73 24 85 f6 78 f1 e8 24 94 eb ff 48 39 c3 48
0x00007f412574b4f0:   8b 5d f8 c9 0f 95 c0 c3 0f 1f 84 00 00 00 00 00
0x00007f412574b500:   c3 90 66 66 2e 0f 1f 84 00 00 00 00 00 0f 1f 00
0x00007f412574b510:   0f b7 47 22 83 e0 01 c3 0f 1f 84 00 00 00 00 00
0x00007f412574b520:   66 81 7f 28 4f 01 74 58 55 48 89 e5 53 48 89 fb
0x00007f412574b530:   48 83 ec 08 48 8d 05 e5 9e 6c 00 48 8b b0 68 01
0x00007f412574b540:   00 00 48 8b 47 08 48 8b 40 08 48 8b 78 18 e8 3d
0x00007f412574b550:   89 eb ff 84 c0 75 18 0f b7 53 28 89 d1 81 ea 50
0x00007f412574b560:   01 00 00 83 fa 06 77 28 66 81 f9 50 01 74 05 b8
0x00007f412574b570:   01 00 00 00 48 8b 5d f8 c9 c3 66 0f 1f 44 00 00
0x00007f412574b580:   b8 01 00 00 00 c3 66 2e 0f 1f 84 00 00 00 00 00
0x00007f412574b590:   66 81 f9 57 01 74 d8 48 8b 5d f8 c9 c3 90 66 90
0x00007f412574b5a0:   66 81 7f 28 57 01 0f 94 c0 c3 66 0f 1f 44 00 00
0x00007f412574b5b0:   0f b7 47 28 66 2d 51 01 66 83 f8 05 0f 96 c0 c3
0x00007f412574b5c0:   0f b7 47 28 66 2d 52 01 66 83 f8 04 0f 96 c0 c3
0x00007f412574b5d0:   48 85 ff 74 4b 55 48 89 e5 53 48 89 fb 48 83 ec
0x00007f412574b5e0:   08 48 8b 87 98 00 00 00 48 8b 78 08 48 85 ff 74
0x00007f412574b5f0:   27 ff 15 19 aa 65 00 48 85 c0 74 1c 81 7b 08 00
0x00007f412574b600:   00 00 c0 48 89 d8 7d 07 48 8b 83 e8 00 00 00 48
0x00007f412574b610:   8b 5d f8 c9 c3 0f 1f 00 48 8b 5d f8 31 c0 c9 c3
0x00007f412574b620:   31 c0 c3 90 66 66 2e 0f 1f 84 00 00 00 00 00 90
0x00007f412574b630:   55 48 89 e5 53 48 89 fb 48 83 ec 08 48 8b 87 98
0x00007f412574b640:   00 00 00 48 8b 78 08 48 85 ff 74 2d ff 15 be a9
0x00007f412574b650:   65 00 48 85 c0 74 22 48 8b 83 98 00 00 00 48 8b
0x00007f412574b660:   78 08 48 85 ff 74 09 ff 15 a3 a9 65 00 48 89 c7
0x00007f412574b670:   e8 7b 63 1c 00 84 c0 74 17 48 8b 7b 18 48 8b 5d
0x00007f412574b680:   f8 c9 e9 39 ec 29 00 66 0f 1f 84 00 00 00 00 00
0x00007f412574b690:   48 8b 5d f8 31 c0 c9 c3 0f 1f 84 00 00 00 00 00
0x00007f412574b6a0:   55 48 89 e5 41 57 41 56 41 55 41 54 53 48 89 fb 


Stack slot to memory mapping:
stack at sp + 0 slots: 0x00007f4124ff2b65: <offset 0x000000000040cb65> in /site/apps/jdk-16/lib/server/libjvm.so at 0x00007f4124be6000
stack at sp + 1 slots: 0x0 is NULL
stack at sp + 2 slots: 0x00007f4109803890 is at entry_point+-752 in (nmethod*)0x00007f4109803890
stack at sp + 3 slots: 0x00007f3d760e7170 is pointing into the stack for thread: 0x00007f3aa0672e50
stack at sp + 4 slots: 0x00007f4124ff2f52: <offset 0x000000000040cf52> in /site/apps/jdk-16/lib/server/libjvm.so at 0x00007f4124be6000
stack at sp + 5 slots: {method} {0x00007f3e3cc5a2d8} 'dispatchCalculate' '(Lcom/company/nums/biz/numsrithm/lp/NumsResultCalculator;Z)Z' in 'com/company/nums/biz/numsrithm/lp/SmithNumsState'
stack at sp + 6 slots: 0x00007f4109803890 is at entry_point+-752 in (nmethod*)0x00007f4109803890
stack at sp + 7 slots: 0x00007f3d760e71a0 is pointing into the stack for thread: 0x00007f3aa0672e50


---------------  P R O C E S S  ---------------

Threads class SMR info:
_java_thread_list=0x00007f3d8bc525c0, length=105, elements={
0x00007f41200da370, 0x00007f41200dbbd0, 0x00007f41200e2990, 0x00007f41200e4120,
0x00007f41200e58a0, 0x00007f41200e7680, 0x00007f41200e8f40, 0x00007f41200ea740,
0x00007f412013d2c0, 0x00007f412013f520, 0x00007f4120650fa0, 0x00007f4120674e70,
0x00007f4120027cf0, 0x00007f3df00dca10, 0x00007f3df18d9ac0, 0x00007f3dfc0ed3e0,
0x00007f3d05136f30, 0x00007f3d05137470, 0x00007f3d1c014c00, 0x00007f3d1c015b20,
0x00007f3d04d5a210, 0x00007f3d053ca0e0, 0x00007f3d05b95820, 0x00007f3aa062d790,
0x00007f3aa062df10, 0x00007f3aa062e950, 0x00007f3aa062f5a0, 0x00007f3d3001d2e0,
0x00007f3d30021d00, 0x00007f3aa06301b0, 0x00007f3aa06311f0, 0x00007f3aa06322e0,
0x00007f3aa0636070, 0x00007f3aa0639b30, 0x00007f3aa06572f0, 0x00007f3aa065fd40,
0x00007f3aa06609b0, 0x00007f3aa0663660, 0x00007f3aa0664310, 0x00007f3d1821a720,
0x00007f3d18219560, 0x00007f3aa0664e60, 0x00007f3aa0666080, 0x00007f3aa06672b0,
0x00007f3aa06684e0, 0x00007f3aa066a330, 0x00007f3aa066c9c0, 0x00007f3aa0670c20,
0x00007f3d7c026780, 0x00007f3d7c001e20, 0x00007f3aa0671be0, 0x00007f3aa0672e50,
0x00007f3aa0673f60, 0x00007f3aa06754a0, 0x00007f3aa06769e0, 0x00007f3aa0677f30,
0x00007f3aa0679380, 0x00007f3aa067a8e0, 0x00007f3aa067be40, 0x00007f3aa067d1a0,
0x00007f3aa067e400, 0x00007f3aa067f730, 0x00007f3aa057d9f0, 0x00007f3aa057e380,
0x00007f3aa057f8e0, 0x00007f3aa0580e50, 0x00007f3aa05823f0, 0x00007f3aa05839a0,
0x00007f3aa0584f50, 0x00007f3aa05861b0, 0x00007f3aa0587770, 0x00007f3aa0588aa0,
0x00007f3aa0589ca0, 0x00007f3aa058afd0, 0x00007f3aa058c300, 0x00007f3aa058d630,
0x00007f3aa058ebf0, 0x00007f3aa05900d0, 0x00007f3aa0591410, 0x00007f3aa0592a20,
0x00007f3aa0594030, 0x00007f3aa05954f0, 0x00007f3aa0596b10, 0x00007f3aa0597e70,
0x00007f3aa05991d0, 0x00007f3aa059a500, 0x00007f3aa059b830, 0x00007f3aa059ca70,
0x00007f3aa059dda0, 0x00007f3aa059f3d0, 0x00007f3aa05a0a00, 0x00007f3aa05a2070,
0x00007f3aa05a36e0, 0x00007f3aa05a4c70, 0x00007f3cd8385c30, 0x00007f3aa05a5fa0,
0x00007f3aa05a7300, 0x00007f3aa05a8660, 0x00007f3aa05a9990, 0x00007f3aa05aacc0,
0x00007f3aa05ac240, 0x00007f3aa05ad8d0, 0x00007f3aa05aef90, 0x00007f3aa05b0660,
0x00007f3bdf6b4dd0
}

Java Threads: ( => current thread )
  0x00007f41200da370 JavaThread ""Reference Handler"" daemon [_thread_blocked, id=40679, stack(0x00007f3e631fd000,0x00007f3e632fe000)]
  0x00007f41200dbbd0 JavaThread ""Finalizer"" daemon [_thread_blocked, id=40680, stack(0x00007f3e630fc000,0x00007f3e631fd000)]
  0x00007f41200e2990 JavaThread ""Signal Dispatcher"" daemon [_thread_blocked, id=40681, stack(0x00007f3e62de8000,0x00007f3e62ee9000)]
  0x00007f41200e4120 JavaThread ""Service Thread"" daemon [_thread_blocked, id=40682, stack(0x00007f3e62ce7000,0x00007f3e62de8000)]
  0x00007f41200e58a0 JavaThread ""Monitor Deflation Thread"" daemon [_thread_blocked, id=40683, stack(0x00007f3e62be6000,0x00007f3e62ce7000)]
  0x00007f41200e7680 JavaThread ""C2 CompilerThread0"" daemon [_thread_blocked, id=40684, stack(0x00007f3e62ae5000,0x00007f3e62be6000)]
  0x00007f41200e8f40 JavaThread ""C1 CompilerThread0"" daemon [_thread_blocked, id=40685, stack(0x00007f3e629e4000,0x00007f3e62ae5000)]
  0x00007f41200ea740 JavaThread ""Sweeper thread"" daemon [_thread_blocked, id=40686, stack(0x00007f3e628e3000,0x00007f3e629e4000)]
  0x00007f412013d2c0 JavaThread ""Common-Cleaner"" daemon [_thread_blocked, id=40688, stack(0x00007f3e626e1000,0x00007f3e627e2000)]
  0x00007f412013f520 JavaThread ""Notification Thread"" daemon [_thread_blocked, id=40689, stack(0x00007f3e625e0000,0x00007f3e626e1000)]
  0x00007f4120650fa0 JavaThread ""Wrapper-Control-Event-Monitor"" daemon [_thread_blocked, id=40696, stack(0x00007f3e61fd0000,0x00007f3e620d1000)]
  0x00007f4120674e70 JavaThread ""Wrapper-Connection"" daemon [_thread_in_native, id=40698, stack(0x00007f3e61dce000,0x00007f3e61ecf000)]
  0x00007f4120027cf0 JavaThread ""DestroyJavaVM"" [_thread_blocked, id=40609, stack(0x00007f4126934000,0x00007f4126a35000)]
  0x00007f3df00dca10 JavaThread ""SingletonFileWriterThread"" daemon [_thread_blocked, id=40710, stack(0x00007f3e616c7000,0x00007f3e617c8000)]
  0x00007f3df18d9ac0 JavaThread ""projRefCleaner-9-1"" daemon [_thread_blocked, id=40729, stack(0x00007f3e3c04b000,0x00007f3e3c14c000)]
  0x00007f3dfc0ed3e0 JavaThread ""com.company.alwayson.AlwaysOnSocketThread"" [_thread_in_native, id=41286, stack(0x00007f3e61acb000,0x00007f3e61bcc000)]
  0x00007f3d05136f30 JavaThread ""Thread-260"" daemon [_thread_blocked, id=109807, stack(0x00007f3d741fa000,0x00007f3d742fb000)]
  0x00007f3d05137470 JavaThread ""Thread-261"" daemon [_thread_blocked, id=109808, stack(0x00007f3d768f1000,0x00007f3d769f2000)]
  0x00007f3d1c014c00 JavaThread ""JetlangTcpClient"" daemon [_thread_in_native, id=109809, stack(0x00007f3e6001c000,0x00007f3e6011d000)]
  0x00007f3d1c015b20 JavaThread ""pool-257-thread-1"" daemon [_thread_blocked, id=109810, stack(0x00007f3d76cf5000,0x00007f3d76df6000)]
  0x00007f3d04d5a210 JavaThread ""dbFiberScheduler-1155-1"" daemon [_thread_blocked, id=109811, stack(0x00007f3d75be4000,0x00007f3d75ce5000)]
  0x00007f3d053ca0e0 JavaThread ""PROD.proj.sup-aurprojzs06"" [_thread_in_native, id=109814, stack(0x00007f3e617c8000,0x00007f3e618c9000)]
  0x00007f3d05b95820 JavaThread ""PROD.proj.FACADE"" [_thread_in_native, id=109816, stack(0x00007f3e61bcc000,0x00007f3e61ccd000)]
  0x00007f3aa062d790 JavaThread ""numsBuilderScheduler-1162-1"" daemon [_thread_blocked, id=109843, stack(0x00007f3e619ca000,0x00007f3e61acb000)]
  0x00007f3aa062df10 JavaThread ""agg-bookScheduler-1184-1"" daemon [_thread_blocked, id=109844, stack(0x00007f3d75ce5000,0x00007f3d75de6000)]
  0x00007f3aa062e950 JavaThread ""serverWorkflowFiberScheduler-1185-1"" daemon [_thread_blocked, id=109845, stack(0x00007f3dcd287000,0x00007f3dcd388000)]
  0x00007f3aa062f5a0 JavaThread ""SnoopGatewaySend"" daemon [_thread_blocked, id=109846, stack(0x00007f3d745fe000,0x00007f3d746ff000)]
  0x00007f3d3001d2e0 JavaThread ""JetlangTcpClient"" daemon [_thread_in_native, id=109847, stack(0x00007f3e621db000,0x00007f3e622dc000)]
  0x00007f3d30021d00 JavaThread ""SnoopGatewaySendScheduler-1186-1"" daemon [_thread_blocked, id=109848, stack(0x00007f3d753dc000,0x00007f3d754dd000)]
  0x00007f3aa06301b0 JavaThread ""blockid.save"" daemon [_thread_blocked, id=109849, stack(0x00007f3d744fd000,0x00007f3d745fe000)]
  0x00007f3aa06311f0 JavaThread ""serviceAsyncLogger"" [_thread_blocked, id=109852, stack(0x00007f3d767f0000,0x00007f3d768f1000)]
  0x00007f3aa06322e0 JavaThread ""dbManager"" daemon [_thread_blocked, id=109853, stack(0x00007f3d774fd000,0x00007f3d775fe000)]
  0x00007f3aa0636070 JavaThread ""pool-260-thread-1"" [_thread_blocked, id=109854, stack(0x00007f3d769f2000,0x00007f3d76af3000)]
  0x00007f3aa0639b30 JavaThread ""pool-261-thread-1"" [_thread_blocked, id=109855, stack(0x00007f3d76ef7000,0x00007f3d76ff8000)]
  0x00007f3aa06572f0 JavaThread ""pool-263-thread-1"" [_thread_blocked, id=109856, stack(0x00007f3d771fa000,0x00007f3d772fb000)]
  0x00007f3aa065fd40 JavaThread ""epoll"" daemon [_thread_in_native, id=109857, stack(0x00007f3d75de6000,0x00007f3d75ee7000)]
  0x00007f3aa06609b0 JavaThread ""pool-264-thread-1"" [_thread_blocked, id=109858, stack(0x00007f3dcc476000,0x00007f3dcc577000)]
  0x00007f3aa0663660 JavaThread ""FileSystemWatchService"" daemon [_thread_in_native, id=109859, stack(0x00007f3e611a6000,0x00007f3e612a7000)]
  0x00007f3aa0664310 JavaThread ""SnoopGatewaySend"" daemon [_thread_blocked, id=109860, stack(0x00007f3dccc81000,0x00007f3dccd82000)]
  0x00007f3d1821a720 JavaThread ""JetlangTcpClient"" daemon [_thread_in_native, id=109861, stack(0x00007f3d73df6000,0x00007f3d73ef7000)]
  0x00007f3d18219560 JavaThread ""SnoopGatewaySendScheduler-1154-1"" daemon [_thread_blocked, id=109862, stack(0x00007f3d73ff8000,0x00007f3d740f9000)]
  0x00007f3aa0664e60 JavaThread ""dbFiber"" daemon [_thread_blocked, id=109863, stack(0x00007f3e618c9000,0x00007f3e619ca000)]
  0x00007f3aa0666080 JavaThread ""LbmQtThread"" [_thread_in_native, id=109864, stack(0x00007f3d742fb000,0x00007f3d743fc000)]
  0x00007f3aa06672b0 JavaThread ""LbmQtThread.send"" daemon [_thread_blocked, id=109865, stack(0x00007f3d75ee7000,0x00007f3d75fe8000)]
  0x00007f3aa06684e0 JavaThread ""PROD.proj.sup-aurprojzs06.send"" daemon [_thread_blocked, id=109866, stack(0x00007f3d751da000,0x00007f3d752db000)]
  0x00007f3aa066a330 JavaThread ""LbmQtThread.sendScheduler-1157-1"" daemon [_thread_blocked, id=109867, stack(0x00007f3d762eb000,0x00007f3d763ec000)]
  0x00007f3aa066c9c0 JavaThread ""PROD.proj.FACADE.send"" daemon [_thread_blocked, id=109868, stack(0x00007f3d76af3000,0x00007f3d76bf4000)]
  0x00007f3aa0670c20 JavaThread ""SdsServerGatewaySend"" daemon [_thread_blocked, id=109869, stack(0x00007f3d746ff000,0x00007f3d74800000)]
  0x00007f3d7c026780 JavaThread ""JetlangTcpClient"" daemon [_thread_in_native, id=109870, stack(0x00007f3dccb80000,0x00007f3dccc81000)]
  0x00007f3d7c001e20 JavaThread ""SdsServerGatewaySendScheduler-1159-1"" daemon [_thread_blocked, id=109871, stack(0x00007f3d76df6000,0x00007f3d76ef7000)]
  0x00007f3aa0671be0 JavaThread ""subscriptionManagerFiber"" daemon [_thread_blocked, id=109872, stack(0x00007f3dcc375000,0x00007f3dcc476000)]
=>0x00007f3aa0672e50 JavaThread ""PlanFinder-0"" daemon [_thread_in_Java, id=109873, stack(0x00007f3d75fe8000,0x00007f3d760e9000)]
  0x00007f3aa0673f60 JavaThread ""PlanFinder-0Scheduler-1163-1"" daemon [_thread_blocked, id=109874, stack(0x00007f3e627e2000,0x00007f3e628e3000)]
  0x00007f3aa06754a0 JavaThread ""PlanFinder-1"" daemon [_thread_blocked, id=109875, stack(0x00007f3e623dd000,0x00007f3e624de000)]
  0x00007f3aa06769e0 JavaThread ""PlanFinder-1Scheduler-1164-1"" daemon [_thread_blocked, id=109876, stack(0x00007f3e622dc000,0x00007f3e623dd000)]
  0x00007f3aa0677f30 JavaThread ""PlanFinder-2"" daemon [_thread_blocked, id=109877, stack(0x00007f3e61ecf000,0x00007f3e61fd0000)]
  0x00007f3aa0679380 JavaThread ""PlanFinder-2Scheduler-1165-1"" daemon [_thread_blocked, id=109878, stack(0x00007f3e61ccd000,0x00007f3e61dce000)]
  0x00007f3aa067a8e0 JavaThread ""PlanFinder-3"" daemon [_thread_blocked, id=109879, stack(0x00007f3e610a5000,0x00007f3e611a6000)]
  0x00007f3aa067be40 JavaThread ""PlanFinder-3Scheduler-1166-1"" daemon [_thread_blocked, id=109880, stack(0x00007f3e606ff000,0x00007f3e60800000)]
  0x00007f3aa067d1a0 JavaThread ""PlanFinder-4"" daemon [_thread_blocked, id=109881, stack(0x00007f3e3c6ff000,0x00007f3e3c800000)]
  0x00007f3aa067e400 JavaThread ""PlanFinder-4Scheduler-1167-1"" daemon [_thread_blocked, id=109882, stack(0x00007f3dcd58a000,0x00007f3dcd68b000)]
  0x00007f3aa067f730 JavaThread ""PlanFinder-5"" daemon [_thread_blocked, id=109883, stack(0x00007f3dcd489000,0x00007f3dcd58a000)]
  0x00007f3aa057d9f0 JavaThread ""PlanFinder-5Scheduler-1168-1"" daemon [_thread_blocked, id=109884, stack(0x00007f3dcd388000,0x00007f3dcd489000)]
  0x00007f3aa057e380 JavaThread ""PlanFinder-6"" daemon [_thread_blocked, id=109885, stack(0x00007f3dcd186000,0x00007f3dcd287000)]
  0x00007f3aa057f8e0 JavaThread ""PlanFinder-6Scheduler-1169-1"" daemon [_thread_blocked, id=109886, stack(0x00007f3dcd085000,0x00007f3dcd186000)]
  0x00007f3aa0580e50 JavaThread ""PlanFinder-7"" daemon [_thread_blocked, id=109887, stack(0x00007f3dccf84000,0x00007f3dcd085000)]
  0x00007f3aa05823f0 JavaThread ""PlanFinder-7Scheduler-1170-1"" daemon [_thread_blocked, id=109888, stack(0x00007f3dcce83000,0x00007f3dccf84000)]
  0x00007f3aa05839a0 JavaThread ""PlanFinder-8"" daemon [_thread_blocked, id=109889, stack(0x00007f3dccd82000,0x00007f3dcce83000)]
  0x00007f3aa0584f50 JavaThread ""PlanFinder-8Scheduler-1171-1"" daemon [_thread_blocked, id=109890, stack(0x00007f3dcca7f000,0x00007f3dccb80000)]
  0x00007f3aa05861b0 JavaThread ""PlanFinder-9"" daemon [_thread_blocked, id=109891, stack(0x00007f3dcc97e000,0x00007f3dcca7f000)]
  0x00007f3aa0587770 JavaThread ""PlanFinder-9Scheduler-1172-1"" daemon [_thread_blocked, id=109892, stack(0x00007f3dcc87d000,0x00007f3dcc97e000)]
  0x00007f3aa0588aa0 JavaThread ""PlanFinder-10"" daemon [_thread_blocked, id=109893, stack(0x00007f3dcc577000,0x00007f3dcc678000)]
  0x00007f3aa0589ca0 JavaThread ""PlanFinder-10Scheduler-1173-1"" daemon [_thread_blocked, id=109894, stack(0x00007f3dcc072000,0x00007f3dcc173000)]
  0x00007f3aa058afd0 JavaThread ""PlanFinder-11"" daemon [_thread_blocked, id=109895, stack(0x00007f3d776ff000,0x00007f3d77800000)]
  0x00007f3aa058c300 JavaThread ""PlanFinder-11Scheduler-1174-1"" daemon [_thread_blocked, id=109896, stack(0x00007f3d775fe000,0x00007f3d776ff000)]
  0x00007f3aa058d630 JavaThread ""PlanFinder-12"" daemon [_thread_blocked, id=109897, stack(0x00007f3d773fc000,0x00007f3d774fd000)]
  0x00007f3aa058ebf0 JavaThread ""PlanFinder-12Scheduler-1175-1"" daemon [_thread_blocked, id=109898, stack(0x00007f3d772fb000,0x00007f3d773fc000)]
  0x00007f3aa05900d0 JavaThread ""PlanFinder-13"" daemon [_thread_blocked, id=109899, stack(0x00007f3d770f9000,0x00007f3d771fa000)]
  0x00007f3aa0591410 JavaThread ""PlanFinder-13Scheduler-1176-1"" daemon [_thread_blocked, id=109900, stack(0x00007f3d76ff8000,0x00007f3d770f9000)]
  0x00007f3aa0592a20 JavaThread ""PlanFinder-14"" daemon [_thread_blocked, id=109901, stack(0x00007f3d76bf4000,0x00007f3d76cf5000)]
  0x00007f3aa0594030 JavaThread ""PlanFinder-14Scheduler-1177-1"" daemon [_thread_blocked, id=109902, stack(0x00007f3d766ef000,0x00007f3d767f0000)]
  0x00007f3aa05954f0 JavaThread ""PlanFinder-15"" daemon [_thread_blocked, id=109903, stack(0x00007f3d765ee000,0x00007f3d766ef000)]
  0x00007f3aa0596b10 JavaThread ""PlanFinder-15Scheduler-1178-1"" daemon [_thread_blocked, id=109904, stack(0x00007f3d763ec000,0x00007f3d764ed000)]
  0x00007f3aa0597e70 JavaThread ""PlanFinder-16"" daemon [_thread_blocked, id=109905, stack(0x00007f3d761ea000,0x00007f3d762eb000)]
  0x00007f3aa05991d0 JavaThread ""PlanFinder-16Scheduler-1179-1"" daemon [_thread_blocked, id=109906, stack(0x00007f3d760e9000,0x00007f3d761ea000)]
  0x00007f3aa059a500 JavaThread ""PlanFinder-17"" daemon [_thread_blocked, id=109907, stack(0x00007f3d75ae3000,0x00007f3d75be4000)]
  0x00007f3aa059b830 JavaThread ""PlanFinder-17Scheduler-1180-1"" daemon [_thread_blocked, id=109908, stack(0x00007f3d759e2000,0x00007f3d75ae3000)]
  0x00007f3aa059ca70 JavaThread ""PlanFinder-18"" daemon [_thread_blocked, id=109909, stack(0x00007f3d758e1000,0x00007f3d759e2000)]
  0x00007f3aa059dda0 JavaThread ""PlanFinder-18Scheduler-1181-1"" daemon [_thread_blocked, id=109910, stack(0x00007f3d757e0000,0x00007f3d758e1000)]
  0x00007f3aa059f3d0 JavaThread ""PlanFinder-19"" daemon [_thread_blocked, id=109911, stack(0x00007f3d756df000,0x00007f3d757e0000)]
  0x00007f3aa05a0a00 JavaThread ""PlanFinder-19Scheduler-1182-1"" daemon [_thread_blocked, id=109912, stack(0x00007f3d755de000,0x00007f3d756df000)]
  0x00007f3aa05a2070 JavaThread ""PlanFinder-20"" daemon [_thread_blocked, id=109913, stack(0x00007f3d754dd000,0x00007f3d755de000)]
  0x00007f3aa05a36e0 JavaThread ""PlanFinder-20Scheduler-1183-1"" daemon [_thread_blocked, id=109914, stack(0x00007f3d752db000,0x00007f3d753dc000)]
  0x00007f3aa05a4c70 JavaThread ""numsBuilder"" daemon [_thread_blocked, id=109915, stack(0x00007f3d750d9000,0x00007f3d751da000)]
  0x00007f3cd8385c30 JavaThread ""subscriptionManagerFiberScheduler-1160-1"" daemon [_thread_blocked, id=109916, stack(0x00007f3d740f9000,0x00007f3d741fa000)]
  0x00007f3aa05a5fa0 JavaThread ""agg"" daemon [_thread_blocked, id=109917, stack(0x00007f3d73ef7000,0x00007f3d73ff8000)]
  0x00007f3aa05a7300 JavaThread ""serverWorkflowFiber"" daemon [_thread_blocked, id=109918, stack(0x00007f3d73cf5000,0x00007f3d73df6000)]
  0x00007f3aa05a8660 JavaThread ""serviceFiber"" daemon [_thread_blocked, id=109919, stack(0x00007f3d73bf4000,0x00007f3d73cf5000)]
  0x00007f3aa05a9990 JavaThread ""tex.nio"" daemon [_thread_in_native, id=109920, stack(0x00007f3d73af3000,0x00007f3d73bf4000)]
  0x00007f3aa05aacc0 JavaThread ""ismd.service.tex.nio"" daemon [_thread_in_native, id=109921, stack(0x00007f3d739f2000,0x00007f3d73af3000)]
  0x00007f3aa05ac240 JavaThread ""tex.nio"" daemon [_thread_in_native, id=109922, stack(0x00007f3d738f1000,0x00007f3d739f2000)]
  0x00007f3aa05ad8d0 JavaThread ""pool-262-thread-1"" [_thread_blocked, id=109923, stack(0x00007f3d737f0000,0x00007f3d738f1000)]
  0x00007f3aa05aef90 JavaThread ""cupid.tex.nio"" daemon [_thread_in_native, id=109924, stack(0x00007f3d735ee000,0x00007f3d736ef000)]
  0x00007f3aa05b0660 JavaThread ""Tail-/sitelogs/proj-service/gc.x.log"" daemon [_thread_blocked, id=109925, stack(0x00007f3d734ed000,0x00007f3d735ee000)]
  0x00007f3bdf6b4dd0 JavaThread ""serviceFiberScheduler-1187-1"" daemon [_thread_blocked, id=110864, stack(0x00007f3d764ed000,0x00007f3d765ee000)]

Other Threads:
  0x00007f41200d6530 VMThread ""VM Thread"" [stack: 0x00007f3e63300000,0x00007f3e63400000] [id=40678]
  0x00007f41201412a0 WatcherThread [stack: 0x00007f3e624e0000,0x00007f3e625e0000] [id=40690]
  0x00007f412008d460 ConcurrentGCThread ""ZDirector"" [stack: 0x00007f40e10e4000,0x00007f40e11e4000] [id=40658]
  0x00007f412008e020 ConcurrentGCThread ""ZDriver"" [stack: 0x00007f40e0fe2000,0x00007f40e10e2000] [id=40659]
  0x00007f412008f210 ConcurrentGCThread ""ZStat"" [stack: 0x00007f40e0ee0000,0x00007f40e0fe0000] [id=40660]
  0x00007f412006b990 ConcurrentGCThread ""ZUnmapper"" [stack: 0x00007f40e32e8000,0x00007f40e33e8000] [id=40627]
  0x00007f412008ac70 ConcurrentGCThread ""ZUncommitter"" [stack: 0x00007f40e31e6000,0x00007f40e32e6000] [id=40628]
  0x00007f412005a1b0 GCTaskThread ""ZWorker#0"" [stack: 0x00007f40f84ef000,0x00007f40f85ef000] [id=40610]
  0x00007f412005ae50 GCTaskThread ""ZWorker#1"" [stack: 0x00007f40f83ed000,0x00007f40f84ed000] [id=40611]
  0x00007f412005bee0 GCTaskThread ""ZWorker#2"" [stack: 0x00007f40f82eb000,0x00007f40f83eb000] [id=40612]
  0x00007f412005cf70 GCTaskThread ""ZWorker#3"" [stack: 0x00007f40f81e9000,0x00007f40f82e9000] [id=40613]
  0x00007f412005e000 GCTaskThread ""ZWorker#4"" [stack: 0x00007f40f80e7000,0x00007f40f81e7000] [id=40614]
  0x00007f412005f090 GCTaskThread ""ZWorker#5"" [stack: 0x00007f40e3f00000,0x00007f40e4000000] [id=40615]
  0x00007f4120060120 GCTaskThread ""ZWorker#6"" [stack: 0x00007f40e3dfe000,0x00007f40e3efe000] [id=40616]
  0x00007f41200611b0 GCTaskThread ""ZWorker#7"" [stack: 0x00007f40e3cfc000,0x00007f40e3dfc000] [id=40617]
  0x00007f4120062240 GCTaskThread ""ZWorker#8"" [stack: 0x00007f40e3bfa000,0x00007f40e3cfa000] [id=40618]
  0x00007f41200632d0 GCTaskThread ""ZWorker#9"" [stack: 0x00007f40e3af8000,0x00007f40e3bf8000] [id=40619]
  0x00007f4120064360 GCTaskThread ""ZWorker#10"" [stack: 0x00007f40e39f6000,0x00007f40e3af6000] [id=40620]
  0x00007f41200653f0 GCTaskThread ""ZWorker#11"" [stack: 0x00007f40e38f4000,0x00007f40e39f4000] [id=40621]
  0x00007f4120066480 GCTaskThread ""ZWorker#12"" [stack: 0x00007f40e37f2000,0x00007f40e38f2000] [id=40622]
  0x00007f4120067510 GCTaskThread ""ZWorker#13"" [stack: 0x00007f40e36f0000,0x00007f40e37f0000] [id=40623]
  0x00007f41200685a0 GCTaskThread ""ZWorker#14"" [stack: 0x00007f40e35ee000,0x00007f40e36ee000] [id=40624]
  0x00007f4120069630 GCTaskThread ""ZWorker#15"" [stack: 0x00007f40e34ec000,0x00007f40e35ec000] [id=40625]
  0x00007f412006a6c0 GCTaskThread ""ZWorker#16"" [stack: 0x00007f40e33ea000,0x00007f40e34ea000] [id=40626]
  0x00007f4120090450 Thread ""RuntimeWorker#0"" [stack: 0x00007f40e0dde000,0x00007f40e0ede000] [id=40661]
  0x00007f41200914e0 Thread ""RuntimeWorker#1"" [stack: 0x00007f40e0cdc000,0x00007f40e0ddc000] [id=40662]
  0x00007f4120092570 Thread ""RuntimeWorker#2"" [stack: 0x00007f40e0bda000,0x00007f40e0cda000] [id=40663]
  0x00007f4120093600 Thread ""RuntimeWorker#3"" [stack: 0x00007f40e0ad8000,0x00007f40e0bd8000] [id=40664]
  0x00007f4120094690 Thread ""RuntimeWorker#4"" [stack: 0x00007f40e09d6000,0x00007f40e0ad6000] [id=40665]
  0x00007f4120095720 Thread ""RuntimeWorker#5"" [stack: 0x00007f40e08d4000,0x00007f40e09d4000] [id=40666]
  0x00007f41200967b0 Thread ""RuntimeWorker#6"" [stack: 0x00007f40e07d2000,0x00007f40e08d2000] [id=40667]
  0x00007f4120097840 Thread ""RuntimeWorker#7"" [stack: 0x00007f40e06d0000,0x00007f40e07d0000] [id=40668]
  0x00007f41200988d0 Thread ""RuntimeWorker#8"" [stack: 0x00007f40e05ce000,0x00007f40e06ce000] [id=40669]
  0x00007f4120099960 Thread ""RuntimeWorker#9"" [stack: 0x00007f40e04cc000,0x00007f40e05cc000] [id=40670]
  0x00007f412009a9f0 Thread ""RuntimeWorker#10"" [stack: 0x00007f40e03ca000,0x00007f40e04ca000] [id=40671]
  0x00007f412009ba80 Thread ""RuntimeWorker#11"" [stack: 0x00007f40e02c8000,0x00007f40e03c8000] [id=40672]
  0x00007f412009cb10 Thread ""RuntimeWorker#12"" [stack: 0x00007f40e01c6000,0x00007f40e02c6000] [id=40673]
  0x00007f412009dba0 Thread ""RuntimeWorker#13"" [stack: 0x00007f40e00c4000,0x00007f40e01c4000] [id=40674]
  0x00007f412009ec30 Thread ""RuntimeWorker#14"" [stack: 0x00007f3e63f00000,0x00007f3e64000000] [id=40675]
  0x00007f412009fcc0 Thread ""RuntimeWorker#15"" [stack: 0x00007f3e63dfe000,0x00007f3e63efe000] [id=40676]
  0x00007f41200a0d50 Thread ""RuntimeWorker#16"" [stack: 0x00007f3e63cfc000,0x00007f3e63dfc000] [id=40677]

Threads with active compile tasks:

VM state: not at safepoint (normal execution)

VM Mutex/Monitor currently owned by a thread: None

GC Precious Log:
 NUMA Support: Enabled
 NUMA Nodes: 2
 CPUs: 28 total, 28 available
 Memory: 64305M
 Large Page Support: Disabled
 Workers: 17 parallel, 4 concurrent
 Address Space Type: Contiguous/Unrestricted/Complete
 Address Space Size: 163840M x 3 = 491520M
 Heap Backing File: /memfd:java_heap
 Heap Backing Filesystem: tmpfs (0x1021994)
 Min Capacity: 10240M
 Initial Capacity: 10240M
 Max Capacity: 10240M
 Medium Page Size: 32M
 Pre-touch: Enabled
 Available space on backing filesystem: N/A
 Uncommit: Implicitly Disabled (-Xms equals -Xmx)
 Runtime Workers: 17 parallel

ZGC Globals:
 GlobalPhase:       2 (Relocate)
 GlobalSeqNum:      175738
 Offset Max:        4096G (0x0000040000000000)
 Page Size Small:   2M
 Page Size Medium:  32M

ZGC Metadata Bits:
 Good:              0x0000100000000000
 Bad:               0x00002c0000000000
 WeakBad:           0x00000c0000000000
 Marked:            0x0000080000000000
 Remapped:          0x0000100000000000

Heap:
 ZHeap           used 600M, capacity 10240M, max capacity 10240M
 Metaspace       used 61684K, committed 62912K, reserved 1105920K
  class space    used 9699K, committed 10048K, reserved 1048576K

ZGC Page Table:
 Small   0x0000000000c00000 0x0000000000e00000 0x0000000000e00000  Relocatable
 Small   0x000000000a000000 0x000000000a1f5750 0x000000000a200000  Relocatable
 Small   0x000000000ca00000 0x000000000cbffff8 0x000000000cc00000  Relocatable
 Small   0x0000000027200000 0x0000000027400000 0x0000000027400000  Relocatable
 Small   0x000000002aa00000 0x000000002abfffc8 0x000000002ac00000  Relocatable
 Small   0x000000003ec00000 0x000000003edfffd8 0x000000003ee00000  Relocatable
 Small   0x0000000041400000 0x00000000415ffed8 0x0000000041600000  Relocatable
 Small   0x0000000043200000 0x00000000433fffe8 0x0000000043400000  Relocatable
 Small   0x0000000055a00000 0x0000000055bfffd0 0x0000000055c00000  Relocatable
 Small   0x000000005d000000 0x000000005d200000 0x000000005d200000  Relocatable
 Small   0x000000005e800000 0x000000005e9fffa8 0x000000005ea00000  Relocatable
 Small   0x0000000075800000 0x00000000759999f0 0x0000000075a00000  Relocatable
 Small   0x0000000078c00000 0x0000000078df2328 0x0000000078e00000  Relocatable
 Small   0x0000000080000000 0x0000000080080000 0x0000000080200000  Allocating
 Small   0x000000008b400000 0x000000008b5e59c0 0x000000008b600000  Relocatable
 Small   0x0000000093a00000 0x0000000093c00000 0x0000000093c00000  Relocatable
 Small   0x00000000a4c00000 0x00000000a4dfe490 0x00000000a4e00000  Relocatable
 Small   0x00000000af200000 0x00000000af3e9030 0x00000000af400000  Relocatable
 Small   0x00000000d6000000 0x00000000d61ffff0 0x00000000d6200000  Relocatable
 Small   0x00000000dbc00000 0x00000000dbe00000 0x00000000dbe00000  Relocatable
 Small   0x00000000f4c00000 0x00000000f4dfffe8 0x00000000f4e00000  Relocatable
 Small   0x00000000f8600000 0x00000000f87f5358 0x00000000f8800000  Relocatable
 Small   0x00000000fb200000 0x00000000fb3ffcc8 0x00000000fb400000  Relocatable
 Small   0x00000000fca00000 0x00000000fcbfffd8 0x00000000fcc00000  Relocatable
 Small   0x00000000ff400000 0x00000000ff5fffd0 0x00000000ff600000  Relocatable
 Small   0x000000010be00000 0x000000010bffec40 0x000000010c000000  Relocatable
 Small   0x0000000115400000 0x00000001155f94b8 0x0000000115600000  Relocatable
 Small   0x0000000119a00000 0x0000000119bffcb0 0x0000000119c00000  Relocatable
 Small   0x000000011b600000 0x000000011b7ffff0 0x000000011b800000  Relocatable
 Small   0x0000000120800000 0x00000001209fead8 0x0000000120a00000  Relocatable
 Small   0x0000000123e00000 0x0000000123fc0318 0x0000000124000000  Relocatable
 Small   0x0000000125000000 0x00000001251fffc0 0x0000000125200000  Relocatable
 Small   0x0000000128800000 0x0000000128a00000 0x0000000128a00000  Relocatable
 Small   0x0000000128e00000 0x0000000128fe70d0 0x0000000129000000  Relocatable
 Small   0x000000012ec00000 0x000000012edff6e8 0x000000012ee00000  Relocatable
 Small   0x000000012fe00000 0x000000012fffff08 0x0000000130000000  Relocatable
 Small   0x0000000134a00000 0x0000000134bff090 0x0000000134c00000  Relocatable
 Small   0x0000000137600000 0x0000000137800000 0x0000000137800000  Relocatable
 Small   0x0000000138a00000 0x0000000138bfe6b0 0x0000000138c00000  Relocatable
 Small   0x000000013ba00000 0x000000013bc00000 0x000000013bc00000  Relocatable
 Small   0x000000013c200000 0x000000013c400000 0x000000013c400000  Relocatable
 Small   0x000000013d600000 0x000000013d800000 0x000000013d800000  Relocatable
 Small   0x000000013de00000 0x000000013e000000 0x000000013e000000  Relocatable
 Small   0x000000013f200000 0x000000013f400000 0x000000013f400000  Relocatable
 Small   0x000000013fa00000 0x000000013fc00000 0x000000013fc00000  Relocatable
 Small   0x0000000140200000 0x0000000140400000 0x0000000140400000  Relocatable
 Small   0x0000000143600000 0x00000001437fffe0 0x0000000143800000  Relocatable
 Small   0x0000000144000000 0x00000001441fe048 0x0000000144200000  Relocatable
 Small   0x0000000144600000 0x0000000144800000 0x0000000144800000  Relocatable
 Small   0x0000000146800000 0x00000001469fffe0 0x0000000146a00000  Relocatable
 Small   0x0000000146c00000 0x0000000146dfacc0 0x0000000146e00000  Relocatable
 Small   0x000000014c800000 0x000000014c9fffe0 0x000000014ca00000  Relocatable
 Small   0x0000000150c00000 0x0000000150dfffa8 0x0000000150e00000  Relocatable
 Small   0x0000000158000000 0x00000001581ffff0 0x0000000158200000  Relocatable
 Small   0x0000000159400000 0x00000001595ffff8 0x0000000159600000  Relocatable
 Small   0x000000015a400000 0x000000015a600000 0x000000015a600000  Relocatable
 Small   0x000000015bc00000 0x000000015bdfffe0 0x000000015be00000  Relocatable
 Small   0x000000015c400000 0x000000015c600000 0x000000015c600000  Relocatable
 Small   0x000000015ce00000 0x000000015d000000 0x000000015d000000  Relocatable
 Small   0x000000015d000000 0x000000015d200000 0x000000015d200000  Relocatable
 Small   0x0000000164200000 0x00000001643990a8 0x0000000164400000  Relocatable
 Small   0x0000000168400000 0x00000001685c14e8 0x0000000168600000  Relocatable
 Small   0x000000016a800000 0x000000016a9ffff8 0x000000016aa00000  Relocatable
 Small   0x000000016aa00000 0x000000016ac00000 0x000000016ac00000  Relocatable
 Small   0x000000016c800000 0x000000016c9fffc0 0x000000016ca00000  Relocatable
 Small   0x000000016ca00000 0x000000016cbfffd8 0x000000016cc00000  Relocatable
 Small   0x0000000172400000 0x00000001725ffff8 0x0000000172600000  Relocatable
 Small   0x0000000175600000 0x00000001757ffff8 0x0000000175800000  Relocatable
 Small   0x000000017da00000 0x000000017dbff840 0x000000017dc00000  Relocatable
 Small   0x000000017e000000 0x000000017e1fffd0 0x000000017e200000  Relocatable
 Small   0x0000000182c00000 0x0000000182dff5b0 0x0000000182e00000  Relocatable
 Small   0x0000000184200000 0x00000001843fff98 0x0000000184400000  Relocatable
 Small   0x000000018e000000 0x000000018e200000 0x000000018e200000  Relocatable
 Small   0x0000000192800000 0x00000001929fede8 0x0000000192a00000  Relocatable
 Small   0x0000000199400000 0x0000000199600000 0x0000000199600000  Relocatable
 Small   0x0000000199600000 0x00000001997db530 0x0000000199800000  Relocatable
 Small   0x000000019a800000 0x000000019aa00000 0x000000019aa00000  Relocatable
 Small   0x000000019b600000 0x000000019b7ffff8 0x000000019b800000  Relocatable
 Small   0x000000019be00000 0x000000019bfffb20 0x000000019c000000  Relocatable
 Small   0x000000019f800000 0x000000019f9ce850 0x000000019fa00000  Relocatable
 Small   0x000000019fc00000 0x000000019fdfffc8 0x000000019fe00000  Relocatable
 Small   0x00000001a0000000 0x00000001a0200000 0x00000001a0200000  Relocatable
 Small   0x00000001a0800000 0x00000001a0a00000 0x00000001a0a00000  Relocatable
 Small   0x00000001a1000000 0x00000001a1200000 0x00000001a1200000  Relocatable
 Small   0x00000001a1c00000 0x00000001a1e00000 0x00000001a1e00000  Relocatable
 Small   0x00000001b0e00000 0x00000001b0fffff0 0x00000001b1000000  Relocatable
 Small   0x00000001be800000 0x00000001be9fffb8 0x00000001bea00000  Relocatable
 Small   0x00000001c3600000 0x00000001c37f96e8 0x00000001c3800000  Relocatable
 Small   0x00000001c4200000 0x00000001c43fffd8 0x00000001c4400000  Relocatable
 Small   0x00000001c6200000 0x00000001c63fffc0 0x00000001c6400000  Relocatable
 Small   0x00000001c6a00000 0x00000001c6bffff0 0x00000001c6c00000  Relocatable
 Small   0x00000001c7200000 0x00000001c73fffe8 0x00000001c7400000  Relocatable
 Small   0x00000001c8800000 0x00000001c8a00000 0x00000001c8a00000  Relocatable
 Small   0x00000001cc400000 0x00000001cc5fffe8 0x00000001cc600000  Relocatable
 Small   0x00000001cfc00000 0x00000001cfe00000 0x00000001cfe00000  Relocatable
 Small   0x00000001d0c00000 0x00000001d0dc0000 0x00000001d0e00000  Allocating
 Small   0x00000001d1000000 0x00000001d11c0000 0x00000001d1200000  Allocating
 Small   0x00000001d1800000 0x00000001d19c0000 0x00000001d1a00000  Allocating
 Small   0x00000001d1c00000 0x00000001d1e00000 0x00000001d1e00000  Allocating
 Small   0x00000001d2000000 0x00000001d21c0000 0x00000001d2200000  Allocating
 Small   0x00000001d2400000 0x00000001d2600000 0x00000001d2600000  Relocatable
 Small   0x00000001d2800000 0x00000001d2980000 0x00000001d2a00000  Allocating
 Small   0x00000001d2c00000 0x00000001d2e00000 0x00000001d2e00000  Allocating
 Small   0x00000001d3000000 0x00000001d3200000 0x00000001d3200000  Allocating
 Small   0x00000001d3800000 0x00000001d39c0000 0x00000001d3a00000  Allocating
 Small   0x00000001d3c00000 0x00000001d3e00000 0x00000001d3e00000  Allocating
 Small   0x00000001d4000000 0x00000001d41c0000 0x00000001d4200000  Allocating
 Small   0x00000001d4400000 0x00000001d4600000 0x00000001d4600000  Allocating
 Small   0x00000001dc400000 0x00000001dc600000 0x00000001dc600000  Relocatable
 Small   0x00000001dd800000 0x00000001dd9b9da0 0x00000001dda00000  Relocatable
 Small   0x00000001dfc00000 0x00000001dfdfffe8 0x00000001dfe00000  Relocatable
 Small   0x00000001ea200000 0x00000001ea240000 0x00000001ea400000  Allocating
 Small   0x00000001ea600000 0x00000001ea800000 0x00000001ea800000  Allocating
 Small   0x00000001eaa00000 0x00000001eabc0000 0x00000001eac00000  Allocating
 Small   0x00000001eae00000 0x00000001eafc0000 0x00000001eb000000  Allocating
 Small   0x00000001eb200000 0x00000001eb380000 0x00000001eb400000  Allocating
 Small   0x00000001eba00000 0x00000001ebbc0000 0x00000001ebc00000  Allocating
 Small   0x00000001eea00000 0x00000001eec00000 0x00000001eec00000  Allocating
 Small   0x00000001eee00000 0x00000001eefc0000 0x00000001ef000000  Allocating
 Small   0x00000001ef200000 0x00000001ef400000 0x00000001ef400000  Allocating
 Small   0x00000001efa00000 0x00000001efac0000 0x00000001efc00000  Allocating
 Small   0x00000001efe00000 0x00000001effc0000 0x00000001f0000000  Allocating
 Small   0x00000001f0600000 0x00000001f07dc518 0x00000001f0800000  Relocatable
 Small   0x00000001f2400000 0x00000001f25ffff8 0x00000001f2600000  Relocatable
 Small   0x00000001f5200000 0x00000001f53dc380 0x00000001f5400000  Relocatable
 Small   0x0000000203600000 0x00000002037ffff8 0x0000000203800000  Relocatable
 Small   0x0000000205000000 0x00000002051fffb8 0x0000000205200000  Relocatable
 Small   0x000000020b600000 0x000000020b7feb28 0x000000020b800000  Relocatable
 Small   0x000000020ca00000 0x000000020cbffff8 0x000000020cc00000  Relocatable
 Small   0x000000020f200000 0x000000020f3ffe40 0x000000020f400000  Relocatable
 Small   0x0000000210200000 0x00000002103ccc70 0x0000000210400000  Relocatable
 Small   0x0000000212400000 0x00000002125fdff8 0x0000000212600000  Relocatable
 Small   0x0000000217800000 0x00000002179ffff0 0x0000000217a00000  Relocatable
 Small   0x0000000218400000 0x0000000218600000 0x0000000218600000  Relocatable
 Small   0x0000000218a00000 0x0000000218bffff0 0x0000000218c00000  Relocatable
 Small   0x0000000219600000 0x00000002197ff708 0x0000000219800000  Relocatable
 Small   0x000000021a200000 0x000000021a3fffe0 0x000000021a400000  Relocatable
 Small   0x000000021aa00000 0x000000021abfe2b0 0x000000021ac00000  Relocatable
 Small   0x000000021b800000 0x000000021b800240 0x000000021ba00000  Allocating
 Small   0x000000021ea00000 0x000000021ec00000 0x000000021ec00000  Relocatable
 Small   0x000000021ee00000 0x000000021efaa370 0x000000021f000000  Relocatable
 Small   0x0000000222800000 0x0000000222a00000 0x0000000222a00000  Relocatable
 Small   0x0000000224c00000 0x0000000224dffff0 0x0000000224e00000  Relocatable
 Small   0x0000000225800000 0x0000000225a00000 0x0000000225a00000  Relocatable
 Small   0x0000000227200000 0x00000002273ffc20 0x0000000227400000  Relocatable
 Small   0x000000022a400000 0x000000022a600000 0x000000022a600000  Relocatable
 Small   0x000000022d600000 0x000000022d7ffcf0 0x000000022d800000  Relocatable
 Small   0x0000000232000000 0x00000002321fffc0 0x0000000232200000  Relocatable
 Small   0x0000000233400000 0x0000000233600000 0x0000000233600000  Relocatable
 Small   0x000000023fe00000 0x000000023ff9f370 0x0000000240000000  Relocatable
 Small   0x0000000241a00000 0x0000000241bfb480 0x0000000241c00000  Relocatable
 Small   0x0000000250200000 0x00000002503ff548 0x0000000250400000  Relocatable
 Small   0x0000000255400000 0x00000002555fffe8 0x0000000255600000  Relocatable
 Small   0x0000000257000000 0x00000002571fffe0 0x0000000257200000  Relocatable
 Small   0x0000000257800000 0x0000000257a00000 0x0000000257a00000  Relocatable
 Small   0x0000000257a00000 0x0000000257bfe360 0x0000000257c00000  Relocatable
 Small   0x0000000257c00000 0x0000000257df8090 0x0000000257e00000  Relocatable
 Small   0x0000000258000000 0x00000002581fffe0 0x0000000258200000  Relocatable
 Small   0x0000000258400000 0x0000000258600000 0x0000000258600000  Relocatable
 Small   0x0000000259800000 0x0000000259a00000 0x0000000259a00000  Relocatable
 Small   0x000000025a800000 0x000000025aa00000 0x000000025aa00000  Relocatable
 Small   0x000000025d800000 0x000000025da00000 0x000000025da00000  Relocatable
 Small   0x000000025e000000 0x000000025e200000 0x000000025e200000  Relocatable
 Small   0x000000025f000000 0x000000025f200000 0x000000025f200000  Relocatable
 Small   0x000000025fc00000 0x000000025fe00000 0x000000025fe00000  Relocatable
 Small   0x0000000260400000 0x0000000260600000 0x0000000260600000  Relocatable
 Small   0x0000000260600000 0x0000000260800000 0x0000000260800000  Relocatable
 Small   0x0000000260c00000 0x0000000260e00000 0x0000000260e00000  Relocatable
 Small   0x0000000262400000 0x00000002625f96e8 0x0000000262600000  Relocatable
 Small   0x0000000262800000 0x0000000262a00000 0x0000000262a00000  Relocatable
 Small   0x0000000262a00000 0x0000000262bcd830 0x0000000262c00000  Relocatable
 Small   0x0000000263000000 0x0000000263200000 0x0000000263200000  Relocatable
 Small   0x0000000263400000 0x00000002635ffff0 0x0000000263600000  Relocatable
 Small   0x0000000263800000 0x00000002639fffe8 0x0000000263a00000  Relocatable
 Small   0x0000000264800000 0x00000002649fffd0 0x0000000264a00000  Relocatable
 Small   0x0000000265000000 0x00000002651f5a78 0x0000000265200000  Relocatable
 Small   0x0000000266400000 0x00000002665fffd8 0x0000000266600000  Relocatable
 Small   0x0000000266a00000 0x0000000266bfe8f0 0x0000000266c00000  Relocatable
 Small   0x0000000266e00000 0x0000000266fd2960 0x0000000267000000  Relocatable
 Small   0x0000000267000000 0x00000002671fffd8 0x0000000267200000  Relocatable
 Small   0x0000000267400000 0x0000000267600000 0x0000000267600000  Relocatable
 Small   0x0000000268000000 0x00000002681fe478 0x0000000268200000  Relocatable
 Small   0x0000000268600000 0x0000000268800000 0x0000000268800000  Relocatable
 Small   0x0000000268800000 0x0000000268a00000 0x0000000268a00000  Relocatable
 Small   0x0000000268c00000 0x0000000268dfffa0 0x0000000268e00000  Relocatable
 Small   0x0000000269000000 0x00000002691ffff0 0x0000000269200000  Relocatable
 Small   0x0000000269200000 0x00000002693f2d80 0x0000000269400000  Relocatable
 Small   0x0000000269800000 0x0000000269a00000 0x0000000269a00000  Relocatable
 Small   0x0000000269a00000 0x0000000269bcc040 0x0000000269c00000  Relocatable
 Small   0x0000000269e00000 0x0000000269fb8b28 0x000000026a000000  Relocatable
 Small   0x000000026a200000 0x000000026a3f91f8 0x000000026a400000  Relocatable
 Small   0x000000026a600000 0x000000026a7f2c60 0x000000026a800000  Relocatable
 Small   0x000000026a800000 0x000000026aa00000 0x000000026aa00000  Relocatable
 Small   0x000000026aa00000 0x000000026abfdf58 0x000000026ac00000  Relocatable
 Small   0x000000026ac00000 0x000000026adffff8 0x000000026ae00000  Relocatable
 Small   0x000000026ae00000 0x000000026ae40000 0x000000026b000000  Allocating
 Small   0x000000026b200000 0x000000026b3ff228 0x000000026b400000  Relocatable
 Small   0x000000026b400000 0x000000026b5ffff0 0x000000026b600000  Relocatable
 Small   0x000000026ba00000 0x000000026bbfe608 0x000000026bc00000  Relocatable
 Small   0x000000026bc00000 0x000000026be00000 0x000000026be00000  Relocatable
 Small   0x000000026be00000 0x000000026be40000 0x000000026c000000  Allocating
 Small   0x000000026c200000 0x000000026c400000 0x000000026c400000  Relocatable
 Small   0x000000026c400000 0x000000026c600000 0x000000026c600000  Relocatable
 Small   0x000000026c600000 0x000000026c800000 0x000000026c800000  Relocatable
 Small   0x000000026c800000 0x000000026ca00000 0x000000026ca00000  Relocatable
 Small   0x000000026ca00000 0x000000026cbfffe0 0x000000026cc00000  Relocatable
 Small   0x000000026cc00000 0x000000026ce00000 0x000000026ce00000  Relocatable
 Small   0x000000026ce00000 0x000000026cfee428 0x000000026d000000  Relocatable
 Small   0x000000026d200000 0x000000026d3e5110 0x000000026d400000  Relocatable
 Small   0x000000026d400000 0x000000026d5fffa0 0x000000026d600000  Relocatable
 Small   0x000000026d600000 0x000000026d7fe8e0 0x000000026d800000  Relocatable
 Small   0x000000026d800000 0x000000026d9ffff0 0x000000026da00000  Relocatable
 Small   0x000000026da00000 0x000000026dbde0a0 0x000000026dc00000  Relocatable
 Small   0x000000026de00000 0x000000026dfc9f00 0x000000026e000000  Relocatable
 Small   0x000000026e000000 0x000000026e200000 0x000000026e200000  Relocatable
 Small   0x000000026e200000 0x000000026e3c76f0 0x000000026e400000  Relocatable
 Small   0x000000026e400000 0x000000026e5fffe0 0x000000026e600000  Relocatable
 Small   0x000000026e600000 0x000000026e6bae98 0x000000026e800000  Allocating
 Small   0x000000026e800000 0x000000026e975bf0 0x000000026ea00000  Allocating
 Small   0x000000026ea00000 0x000000026ec00000 0x000000026ec00000  Relocatable
 Small   0x000000026ec00000 0x000000026ed79650 0x000000026ee00000  Allocating
 Small   0x000000026ee00000 0x000000026effbf70 0x000000026f000000  Relocatable
 Small   0x000000026f000000 0x000000026f1f7300 0x000000026f200000  Relocatable
 Small   0x000000026f200000 0x000000026f3c2e70 0x000000026f400000  Relocatable
 Small   0x000000026f400000 0x000000026f5f9ba8 0x000000026f600000  Relocatable
 Small   0x0000000271600000 0x00000002717dfec0 0x0000000271800000  Relocatable
 Small   0x0000000271800000 0x0000000271a00000 0x0000000271a00000  Relocatable
 Small   0x0000000271a00000 0x0000000271bffa30 0x0000000271c00000  Relocatable
 Small   0x0000000271e00000 0x0000000271ffe088 0x0000000272000000  Relocatable
 Small   0x0000000272000000 0x00000002721fb758 0x0000000272200000  Relocatable
 Small   0x0000000272200000 0x00000002723fffe8 0x0000000272400000  Relocatable
 Small   0x0000000272400000 0x00000002725c9b20 0x0000000272600000  Relocatable
 Small   0x0000000272600000 0x00000002727ffff8 0x0000000272800000  Relocatable
 Small   0x0000000272800000 0x0000000272800670 0x0000000272a00000  Allocating
 Small   0x0000000272a00000 0x0000000272bebab8 0x0000000272c00000  Relocatable
 Small   0x0000000272c00000 0x0000000272dfffd8 0x0000000272e00000  Relocatable
 Small   0x0000000273600000 0x00000002737ffff8 0x0000000273800000  Relocatable
 Small   0x0000000273800000 0x00000002739ffff0 0x0000000273a00000  Relocatable
 Small   0x0000000273a00000 0x0000000273be2a08 0x0000000273c00000  Relocatable
 Small   0x0000000273c00000 0x0000000273dfffd0 0x0000000273e00000  Relocatable
 Small   0x0000000273e00000 0x0000000273ffed50 0x0000000274000000  Relocatable
 Small   0x0000000274000000 0x00000002741ffff8 0x0000000274200000  Relocatable
 Small   0x0000000274200000 0x00000002743ffff0 0x0000000274400000  Relocatable
 Small   0x0000000274400000 0x00000002745fffe0 0x0000000274600000  Relocatable
 Small   0x0000000274600000 0x00000002747ffff0 0x0000000274800000  Relocatable
 Small   0x0000000274800000 0x00000002749fffe8 0x0000000274a00000  Relocatable
 Small   0x0000000274a00000 0x0000000274bd87b8 0x0000000274c00000  Relocatable
 Small   0x0000000274c00000 0x0000000274dfef20 0x0000000274e00000  Relocatable
 Small   0x0000000274e00000 0x0000000274fffff0 0x0000000275000000  Relocatable
 Small   0x0000000275000000 0x00000002751fec88 0x0000000275200000  Relocatable
 Small   0x0000000275200000 0x00000002753fba30 0x0000000275400000  Relocatable
 Small   0x0000000275400000 0x0000000275600000 0x0000000275600000  Relocatable
 Small   0x0000000275600000 0x00000002757fffd8 0x0000000275800000  Relocatable
 Small   0x0000000275800000 0x00000002759ffff0 0x0000000275a00000  Relocatable
 Small   0x0000000275a00000 0x0000000275bfd988 0x0000000275c00000  Relocatable
 Small   0x0000000275c00000 0x0000000275dd0a90 0x0000000275e00000  Relocatable
 Small   0x0000000275e00000 0x0000000275fff4d8 0x0000000276000000  Relocatable
 Small   0x0000000276000000 0x0000000276200000 0x0000000276200000  Relocatable
 Small   0x0000000276200000 0x0000000276392c28 0x0000000276400000  Relocatable
 Small   0x0000000276400000 0x00000002765ffff0 0x0000000276600000  Relocatable
 Small   0x0000000276600000 0x00000002767ffff0 0x0000000276800000  Relocatable
 Small   0x0000000276800000 0x00000002769ffff0 0x0000000276a00000  Relocatable
 Small   0x0000000276a00000 0x0000000276bffdc0 0x0000000276c00000  Relocatable
 Small   0x0000000276c00000 0x0000000276dfffe8 0x0000000276e00000  Relocatable
 Small   0x0000000276e00000 0x0000000276f8be78 0x0000000277000000  Relocatable
 Small   0x0000000277000000 0x00000002771f4640 0x0000000277200000  Relocatable
 Small   0x0000000277200000 0x0000000277400000 0x0000000277400000  Relocatable
 Small   0x0000000277400000 0x00000002775fffe8 0x0000000277600000  Relocatable
 Small   0x0000000277600000 0x00000002777b37d8 0x0000000277800000  Relocatable
 Small   0x0000000277800000 0x00000002779e9e48 0x0000000277a00000  Relocatable
 Small   0x0000000277a00000 0x0000000277bfffe8 0x0000000277c00000  Relocatable
 Small   0x0000000277c00000 0x0000000277dffbf8 0x0000000277e00000  Relocatable
 Small   0x0000000277e00000 0x0000000277fffea0 0x0000000278000000  Relocatable
 Small   0x0000000278000000 0x00000002781fda80 0x0000000278200000  Relocatable
 Small   0x0000000278200000 0x00000002783ded00 0x0000000278400000  Relocatable
 Small   0x0000000278400000 0x00000002785fe228 0x0000000278600000  Relocatable
 Small   0x0000000278600000 0x0000000278783298 0x0000000278800000  Allocating
 Small   0x0000000278800000 0x00000002789db888 0x0000000278a00000  Relocatable
 Small   0x0000000278a00000 0x0000000278bfffc8 0x0000000278c00000  Relocatable
 Small   0x0000000278c00000 0x0000000278dfff20 0x0000000278e00000  Relocatable
 Small   0x0000000278e00000 0x0000000278ffe040 0x0000000279000000  Relocatable
 Small   0x0000000279000000 0x00000002791fffd0 0x0000000279200000  Relocatable
 Small   0x0000000279200000 0x00000002793ea5f8 0x0000000279400000  Relocatable
 Small   0x0000000279400000 0x00000002795fffd8 0x0000000279600000  Relocatable
 Medium  0x00000027f6000000 0x00000027f6dce000 0x00000027f8000000  Relocatable

ZBarrierSet

Polling page: 0x00007f4126a54000

Metaspace:

Usage:
  Non-class:     50.77 MB used.
      Class:      9.47 MB used.
       Both:     60.24 MB used.

Virtual space:
  Non-class space:       56.00 MB reserved,      51.62 MB ( 92%) committed,  7 nodes.
      Class space:        1.00 GB reserved,       9.81 MB ( <1%) committed,  1 nodes.
              Both:        1.05 GB reserved,      61.44 MB (  6%) committed. 

Chunk freelists:
   Non-Class:  4.06 MB
       Class:  2.12 MB
        Both:  6.18 MB

MaxMetaspaceSize: 17179869184.00 GB
CompressedClassSpaceSize: 1.00 GB
 - commit_granule_bytes: 65536.
 - commit_granule_words: 8192.
 - virtual_space_node_default_size: 1048576.
 - enlarge_chunks_in_place: 1.
 - new_chunks_are_fully_committed: 0.
 - uncommit_free_chunks: 1.
 - use_allocation_guard: 0.
 - handle_deallocations: 1.


Internal statistics:

num_allocs_failed_limit: 7.
num_arena_births: 73664.
num_arena_deaths: 72906.
num_vsnodes_births: 9.
num_vsnodes_deaths: 1.
num_space_committed: 3562.
num_space_uncommitted: 2579.
num_chunks_returned_to_freelist: 156194.
num_chunks_taken_from_freelist: 159835.
num_chunk_merges: 36405.
num_chunk_splits: 49579.
num_chunks_enlarged: 15321.
num_purges: 7974.

CodeHeap 'non-profiled nmethods': size=258432Kb used=21277Kb max_used=22369Kb free=237155Kb
 bounds [0x00007f4108b88000, 0x00007f4110b88000, 0x00007f41187e8000]
CodeHeap 'profiled nmethods': size=258428Kb used=10940Kb max_used=20303Kb free=247487Kb
 bounds [0x00007f40f8f29000, 0x00007f4100f29000, 0x00007f4108b88000]
CodeHeap 'non-nmethods': size=7428Kb used=1750Kb max_used=3658Kb free=5677Kb
 bounds [0x00007f40f87e8000, 0x00007f40f8f29000, 0x00007f40f8f29000]
 total_blobs=10506 nmethods=9538 adapters=880
 compilation: enabled
              stopped_count=0, restarted_count=0
 full_count=0

Compilation events (20 events):
Event: 3734871.582 Thread 0x00007f3e3469d900 nmethod 158689 0x00007f41099ea810 code [0x00007f41099eaa60, 0x00007f41099eda38]
Event: 3734871.590 Thread 0x00007f3e35527dc0 nmethod 158686 0x00007f410982f990 code [0x00007f410982fbe0, 0x00007f4109832bb8]
Event: 3734871.749 Thread 0x00007f41200e7680 158696       4       VMethGenerated_34588::method_0$ (6839 bytes)
Event: 3734871.756 Thread 0x00007f3e3469bf70 158697       4       VMethGenerated_34590::method_0$ (6839 bytes)
Event: 3734871.789 Thread 0x00007f3e3469d380 158698       4       VMethGenerated_34591::method_0$ (6839 bytes)
Event: 3734871.941 Thread 0x00007f3e3469bf70 nmethod 158697 0x00007f41098ca190 code [0x00007f41098ca3e0, 0x00007f41098cd3b8]
Event: 3734871.943 Thread 0x00007f41200e7680 nmethod 158696 0x00007f410a0bd490 code [0x00007f410a0bd6e0, 0x00007f410a0c06b8]
Event: 3734871.983 Thread 0x00007f3e3469d380 nmethod 158698 0x00007f41092e7790 code [0x00007f41092e79e0, 0x00007f41092ea9b8]
Event: 3734872.318 Thread 0x00007f3e3469d900 158699       4       VMethGenerated_34581::method_0$ (6839 bytes)
Event: 3734872.338 Thread 0x00007f41200e7680 158700       4       VMethGenerated_34593::method_0$ (6839 bytes)
Event: 3734872.498 Thread 0x00007f3e3469d900 nmethod 158699 0x00007f4108f06990 code [0x00007f4108f06be0, 0x00007f4108f09bb8]
Event: 3734872.526 Thread 0x00007f41200e7680 nmethod 158700 0x00007f4109cea510 code [0x00007f4109cea760, 0x00007f4109ced738]
Event: 3734889.114 Thread 0x00007f41200e7680 158701       4       VMethGenerated_34584::method_0$ (6839 bytes)
Event: 3734889.307 Thread 0x00007f41200e7680 nmethod 158701 0x00007f4109e84410 code [0x00007f4109e84660, 0x00007f4109e87638]
Event: 3734890.508 Thread 0x00007f41200e7680 158702       4       VMethGenerated_34585::method_0$ (6839 bytes)
Event: 3734890.694 Thread 0x00007f41200e7680 nmethod 158702 0x00007f410a081290 code [0x00007f410a0814e0, 0x00007f410a0844b8]
Event: 3734894.536 Thread 0x00007f41200e7680 158703       4       VMethGenerated_34592::method_0$ (6839 bytes)
Event: 3734894.723 Thread 0x00007f41200e7680 nmethod 158703 0x00007f4109f6d910 code [0x00007f4109f6db60, 0x00007f4109f70b38]
Event: 3734894.723 Thread 0x00007f41200e7680 158704       4       VMethGenerated_34583::method_0$ (6839 bytes)
Event: 3734894.905 Thread 0x00007f41200e7680 nmethod 158704 0x00007f4109f6a590 code [0x00007f4109f6a7e0, 0x00007f4109f6d7b8]

GC Heap History (20 events):
Event: 3734800.712 GC heap before
{Heap before GC invocations=175727 (full 175727):
 ZHeap           used 3756M, capacity 10240M, max capacity 10240M
 Metaspace       used 61508K, committed 62848K, reserved 1105920K
  class space    used 9695K, committed 10048K, reserved 1048576K
}
Event: 3734800.903 GC heap after
{Heap after GC invocations=175728 (full 175728):
 ZHeap           used 728M, capacity 10240M, max capacity 10240M
 Metaspace       used 61508K, committed 62848K, reserved 1105920K
  class space    used 9695K, committed 10048K, reserved 1048576K
}
Event: 3734810.713 GC heap before
{Heap before GC invocations=175728 (full 175728):
 ZHeap           used 2964M, capacity 10240M, max capacity 10240M
 Metaspace       used 61508K, committed 62848K, reserved 1105920K
  class space    used 9695K, committed 10048K, reserved 1048576K
}
Event: 3734810.902 GC heap after
{Heap after GC invocations=175729 (full 175729):
 ZHeap           used 682M, capacity 10240M, max capacity 10240M
 Metaspace       used 61508K, committed 62848K, reserved 1105920K
  class space    used 9695K, committed 10048K, reserved 1048576K
}
Event: 3734820.513 GC heap before
{Heap before GC invocations=175729 (full 175729):
 ZHeap           used 5504M, capacity 10240M, max capacity 10240M
 Metaspace       used 61508K, committed 62848K, reserved 1105920K
  class space    used 9695K, committed 10048K, reserved 1048576K
}
Event: 3734820.709 GC heap after
{Heap after GC invocations=175730 (full 175730):
 ZHeap           used 760M, capacity 10240M, max capacity 10240M
 Metaspace       used 61508K, committed 62848K, reserved 1105920K
  class space    used 9695K, committed 10048K, reserved 1048576K
}
Event: 3734830.813 GC heap before
{Heap before GC invocations=175730 (full 175730):
 ZHeap           used 4706M, capacity 10240M, max capacity 10240M
 Metaspace       used 61520K, committed 62848K, reserved 1105920K
  class space    used 9695K, committed 10048K, reserved 1048576K
}
Event: 3734831.016 GC heap after
{Heap after GC invocations=175731 (full 175731):
 ZHeap           used 594M, capacity 10240M, max capacity 10240M
 Metaspace       used 61508K, committed 62848K, reserved 1105920K
  class space    used 9695K, committed 10048K, reserved 1048576K
}
Event: 3734841.613 GC heap before
{Heap before GC invocations=175731 (full 175731):
 ZHeap           used 3820M, capacity 10240M, max capacity 10240M
 Metaspace       used 62162K, committed 63104K, reserved 1105920K
  class space    used 9718K, committed 10112K, reserved 1048576K
}
Event: 3734841.820 GC heap after
{Heap after GC invocations=175732 (full 175732):
 ZHeap           used 704M, capacity 10240M, max capacity 10240M
 Metaspace       used 61579K, committed 63104K, reserved 1105920K
  class space    used 9700K, committed 10112K, reserved 1048576K
}
Event: 3734852.613 GC heap before
{Heap before GC invocations=175732 (full 175732):
 ZHeap           used 3846M, capacity 10240M, max capacity 10240M
 Metaspace       used 62003K, committed 63104K, reserved 1105920K
  class space    used 9712K, committed 10112K, reserved 1048576K
}
Event: 3734852.821 GC heap after
{Heap after GC invocations=175733 (full 175733):
 ZHeap           used 678M, capacity 10240M, max capacity 10240M
 Metaspace       used 61648K, committed 62912K, reserved 1105920K
  class space    used 9700K, committed 10048K, reserved 1048576K
}
Event: 3734863.412 GC heap before
{Heap before GC invocations=175733 (full 175733):
 ZHeap           used 4118M, capacity 10240M, max capacity 10240M
 Metaspace       used 61705K, committed 62912K, reserved 1105920K
  class space    used 9700K, committed 10048K, reserved 1048576K
}
Event: 3734863.597 GC heap after
{Heap after GC invocations=175734 (full 175734):
 ZHeap           used 596M, capacity 10240M, max capacity 10240M
 Metaspace       used 61705K, committed 62912K, reserved 1105920K
  class space    used 9700K, committed 10048K, reserved 1048576K
}
Event: 3734874.713 GC heap before
{Heap before GC invocations=175734 (full 175734):
 ZHeap           used 4312M, capacity 10240M, max capacity 10240M
 Metaspace       used 61705K, committed 62912K, reserved 1105920K
  class space    used 9700K, committed 10048K, reserved 1048576K
}
Event: 3734874.907 GC heap after
{Heap after GC invocations=175735 (full 175735):
 ZHeap           used 708M, capacity 10240M, max capacity 10240M
 Metaspace       used 61705K, committed 62912K, reserved 1105920K
  class space    used 9700K, committed 10048K, reserved 1048576K
}
Event: 3734885.413 GC heap before
{Heap before GC invocations=175735 (full 175735):
 ZHeap           used 4128M, capacity 10240M, max capacity 10240M
 Metaspace       used 61705K, committed 62912K, reserved 1105920K
  class space    used 9700K, committed 10048K, reserved 1048576K
}
Event: 3734885.605 GC heap after
{Heap after GC invocations=175736 (full 175736):
 ZHeap           used 620M, capacity 10240M, max capacity 10240M
 Metaspace       used 61705K, committed 62912K, reserved 1105920K
  class space    used 9700K, committed 10048K, reserved 1048576K
}
Event: 3734895.613 GC heap before
{Heap before GC invocations=175736 (full 175736):
 ZHeap           used 3280M, capacity 10240M, max capacity 10240M
 Metaspace       used 61705K, committed 62912K, reserved 1105920K
  class space    used 9700K, committed 10048K, reserved 1048576K
}
Event: 3734895.814 GC heap after
{Heap after GC invocations=175737 (full 175737):
 ZHeap           used 594M, capacity 10240M, max capacity 10240M
 Metaspace       used 61684K, committed 62912K, reserved 1105920K
  class space    used 9699K, committed 10048K, reserved 1048576K
}

Deoptimization events (20 events):
Event: 3731912.832 Thread 0x00007f3df3d7ed20 DEOPT PACKING pc=0x00007f40fa1abca6 sp=0x00007f3d737edd80
Event: 3731912.832 Thread 0x00007f3df3d7ed20 DEOPT UNPACKING pc=0x00007f40f88358ba sp=0x00007f3d737ed268 mode 0
Event: 3731975.786 Thread 0x00007f3df3d7ed20 Uncommon trap: trap_request=0xffffff0c fr.pc=0x00007f41093d3394 relative=0x00000000000002d4
Event: 3731975.786 Thread 0x00007f3df3d7ed20 Uncommon trap: reason=tenured action=make_not_entrant pc=0x00007f41093d3394 method=org.springframework.jdbc.core.namedparam.MapSqlParameterSource.addValue(Ljava/lang/String;Ljava/lang/Object;)Lorg/springframework/jdbc/core/namedparam/MapSqlParameterSource
Event: 3731975.786 Thread 0x00007f3df3d7ed20 DEOPT PACKING pc=0x00007f41093d3394 sp=0x00007f3d737edce0
Event: 3731975.786 Thread 0x00007f3df3d7ed20 DEOPT UNPACKING pc=0x00007f40f8835124 sp=0x00007f3d737edcc0 mode 2
Event: 3731975.787 Thread 0x00007f3df3d7ed20 DEOPT PACKING pc=0x00007f40fa1e45e9 sp=0x00007f3d737edd40
Event: 3731975.787 Thread 0x00007f3df3d7ed20 DEOPT UNPACKING pc=0x00007f40f88358ba sp=0x00007f3d737ed338 mode 0
Event: 3731979.139 Thread 0x00007f3df3d7ed20 Uncommon trap: trap_request=0xffffff0c fr.pc=0x00007f4108c1ad14 relative=0x00000000000003b4
Event: 3731979.139 Thread 0x00007f3df3d7ed20 Uncommon trap: reason=tenured action=make_not_entrant pc=0x00007f4108c1ad14 method=com.sun.org.apache.xerces.internal.dom.DeferredDocumentImpl.appendChild(II)V @ 0 c2
Event: 3731979.139 Thread 0x00007f3df3d7ed20 DEOPT PACKING pc=0x00007f4108c1ad14 sp=0x00007f3d737edbe0
Event: 3731979.139 Thread 0x00007f3df3d7ed20 DEOPT UNPACKING pc=0x00007f40f8835124 sp=0x00007f3d737edb98 mode 2
Event: 3731979.142 Thread 0x00007f3df3d7ed20 Uncommon trap: trap_request=0xffffff0c fr.pc=0x00007f4108f5adb8 relative=0x0000000000000d98
Event: 3731979.142 Thread 0x00007f3df3d7ed20 Uncommon trap: reason=tenured action=make_not_entrant pc=0x00007f4108f5adb8 method=com.sun.org.apache.xpath.internal.patterns.NodeTest.execute(Lcom/sun/org/apache/xpath/internal/XPathContext;I)Lcom/sun/org/apache/xpath/internal/objects/XObject; @ 0 c2
Event: 3731979.142 Thread 0x00007f3df3d7ed20 DEOPT PACKING pc=0x00007f4108f5adb8 sp=0x00007f3d737edb60
Event: 3731979.142 Thread 0x00007f3df3d7ed20 DEOPT UNPACKING pc=0x00007f40f8835124 sp=0x00007f3d737edb20 mode 2
Event: 3733637.548 Thread 0x00007f3d1c014c00 Uncommon trap: trap_request=0xffffff0c fr.pc=0x00007f4109428a18 relative=0x0000000000000938
Event: 3733637.548 Thread 0x00007f3d1c014c00 Uncommon trap: reason=tenured action=make_not_entrant pc=0x00007f4109428a18 method=java.io.ObjectInputStream$BlockDataInputStream.refill()V @ 0 c2
Event: 3733637.548 Thread 0x00007f3d1c014c00 DEOPT PACKING pc=0x00007f4109428a18 sp=0x00007f3e6011b580
Event: 3733637.548 Thread 0x00007f3d1c014c00 DEOPT UNPACKING pc=0x00007f40f8835124 sp=0x00007f3e6011b588 mode 2

Classes unloaded (20 events):
Event: 3734852.798 Thread 0x00007f412008e020 Unloading class 0x00000008015ef800 'VMethGenerated_34573'
Event: 3734852.798 Thread 0x00007f412008e020 Unloading class 0x00000008015ef000 'VMethGenerated_34572'
Event: 3734852.798 Thread 0x00007f412008e020 Unloading class 0x00000008015ee800 'VMethGenerated_34571'
Event: 3734852.798 Thread 0x00007f412008e020 Unloading class 0x00000008015d9800 'VMethGenerated_34570'
Event: 3734852.798 Thread 0x00007f412008e020 Unloading class 0x00000008015d9000 'VMethGenerated_34569'
Event: 3734852.798 Thread 0x00007f412008e020 Unloading class 0x00000008015d8800 'VMethGenerated_34568'
Event: 3734852.798 Thread 0x00007f412008e020 Unloading class 0x00000008015d8000 'VMethGenerated_34567'
Event: 3734852.798 Thread 0x00007f412008e020 Unloading class 0x00000008015e3800 'VMethGenerated_34566'
Event: 3734852.798 Thread 0x00007f412008e020 Unloading class 0x00000008015e3000 'VMethGenerated_34565'
Event: 3734852.798 Thread 0x00007f412008e020 Unloading class 0x00000008015e2800 'VMethGenerated_34564'
Event: 3734852.798 Thread 0x00007f412008e020 Unloading class 0x00000008015e2000 'VMethGenerated_34563'
Event: 3734852.798 Thread 0x00007f412008e020 Unloading class 0x00000008015d5800 'VMethGenerated_34562'
Event: 3734852.798 Thread 0x00007f412008e020 Unloading class 0x00000008015d5000 'VMethGenerated_34561'
Event: 3734852.798 Thread 0x00007f412008e020 Unloading class 0x00000008015d4800 'VMethGenerated_34560'
Event: 3734852.798 Thread 0x00007f412008e020 Unloading class 0x00000008015d4000 'VMethGenerated_34559'
Event: 3734852.798 Thread 0x00007f412008e020 Unloading class 0x00000008015d0800 'VMethGenerated_34558'
Event: 3734852.798 Thread 0x00007f412008e020 Unloading class 0x00000008015d0000 'VMethGenerated_34557'
Event: 3734852.798 Thread 0x00007f412008e020 Unloading class 0x00000008015ce800 'VMethGenerated_34556'
Event: 3734852.798 Thread 0x00007f412008e020 Unloading class 0x00000008015ec000 'MethVGenerated_34357'
Event: 3734895.790 Thread 0x00007f412008e020 Unloading class 0x00000008015ec800 'MethVGenerated_34335'

Classes redefined (0 events):
No events

Internal exceptions (20 events):
Event: 3675746.346 Thread 0x00007f3acf83ff70 Exception <a 'java/lang/NoSuchMethodError'{0x00001001ea908568}: static Lcom/company/nums/biz/compiler/FuncRequest;.<clinit>()V> (0x00001001ea908568) 
thrown [open/src/hotspot/share/prims/jni.cpp, line 1210]
Event: 3675746.347 Thread 0x00007f3acf83ff70 Exception <a 'java/lang/NoSuchMethodError'{0x00001001ea91bb80}: static Lcom/company/nums/biz/compiler/NumsReev;.<clinit>()V> (0x00001001ea91bb80) 
thrown [open/src/hotspot/share/prims/jni.cpp, line 1210]
Event: 3675746.347 Thread 0x00007f3acf83ff70 Exception <a 'java/lang/NoSuchMethodError'{0x00001001ea91cef8}: static [D.<clinit>()V> (0x00001001ea91cef8) 
thrown [open/src/hotspot/share/prims/jni.cpp, line 1210]
Event: 3675748.302 Thread 0x00007f3ce4036230 Exception <a 'java/lang/NoSuchMethodError'{0x0000100277aeccc8}: static Lcom/company/nums/biz/compiler/FuncResponse;.<clinit>()V> (0x0000100277aeccc8) 
thrown [open/src/hotspot/share/prims/jni.cpp, line 1210]
Event: 3675748.306 Thread 0x00007f3acf83ff70 Exception <a 'java/lang/NoSuchMethodError'{0x00001001ea92b660}: static Lcom/company/nums/biz/compiler/AdotVRequest;.<clinit>()V> (0x00001001ea92b660) 
thrown [open/src/hotspot/share/prims/jni.cpp, line 1210]
Event: 3675748.306 Thread 0x00007f3acf83ff70 Exception <a 'java/lang/NoSuchMethodError'{0x00001001ea92cca8}: static Lcom/company/nums/biz/compiler/ReevCompileRequest;.<clinit>()V> (0x00001001ea92cca8) 
thrown [open/src/hotspot/share/prims/jni.cpp, line 1210]
Event: 3675748.316 Thread 0x00007f3acf83ff70 Exception <a 'java/lang/NoSuchMethodError'{0x00001001ea935d88}: static Lcom/company/nums/biz/compiler/SmithRequest;.<clinit>()V> (0x00001001ea935d88) 
thrown [open/src/hotspot/share/prims/jni.cpp, line 1210]
Event: 3675750.323 Thread 0x00007f3ce4036230 Exception <a 'java/lang/NoSuchMethodError'{0x000010023beaecd0}: static Lcom/company/nums/biz/compiler/SmithResponse;.<clinit>()V> (0x000010023beaecd0) 
thrown [open/src/hotspot/share/prims/jni.cpp, line 1210]
Event: 3675750.520 Thread 0x00007f3acf83ff70 Exception <a 'java/lang/NoSuchMethodError'{0x00001002360a3ec0}: static Lcom/company/nums/biz/compiler/VMethRequest;.<clinit>()V> (0x00001002360a3ec0) 
thrown [open/src/hotspot/share/prims/jni.cpp, line 1210]
Event: 3714662.932 Thread 0x00007f3d4cd15ce0 Exception <a 'sun/nio/fs/UnixException'{0x0000100274400580}> (0x0000100274400580) 
thrown [open/src/hotspot/share/prims/jni.cpp, line 579]
Event: 3731979.362 Thread 0x00007f3aa0663660 Exception <a 'sun/nio/fs/UnixException'{0x0000100241d40000}> (0x0000100241d40000) 
thrown [open/src/hotspot/share/prims/jni.cpp, line 579]
Event: 3731980.769 Thread 0x00007f3d05136f30 Exception <a 'java/lang/NoSuchMethodError'{0x00001002739cd308}: static Lcom/company/nums/biz/compiler/FuncRequest;.<clinit>()V> (0x00001002739cd308) 
thrown [open/src/hotspot/share/prims/jni.cpp, line 1210]
Event: 3731980.770 Thread 0x00007f3d05136f30 Exception <a 'java/lang/NoSuchMethodError'{0x00001002739e0850}: static Lcom/company/nums/biz/compiler/NumsReev;.<clinit>()V> (0x00001002739e0850) 
thrown [open/src/hotspot/share/prims/jni.cpp, line 1210]
Event: 3731980.770 Thread 0x00007f3d05136f30 Exception <a 'java/lang/NoSuchMethodError'{0x00001002739e1d30}: static [D.<clinit>()V> (0x00001002739e1d30) 
thrown [open/src/hotspot/share/prims/jni.cpp, line 1210]
Event: 3731980.913 Thread 0x00007f3d1c014c00 Exception <a 'java/lang/NoSuchMethodError'{0x0000100271b4d328}: static Lcom/company/nums/biz/compiler/FuncResponse;.<clinit>()V> (0x0000100271b4d328) 
thrown [open/src/hotspot/share/prims/jni.cpp, line 1210]
Event: 3731980.915 Thread 0x00007f3d05136f30 Exception <a 'java/lang/NoSuchMethodError'{0x00001002739f5270}: static Lcom/company/nums/biz/compiler/AdotVRequest;.<clinit>()V> (0x00001002739f5270) 
thrown [open/src/hotspot/share/prims/jni.cpp, line 1210]
Event: 3731980.915 Thread 0x00007f3d05136f30 Exception <a 'java/lang/NoSuchMethodError'{0x00001002739f68b8}: static Lcom/company/nums/biz/compiler/ReevCompileRequest;.<clinit>()V> (0x00001002739f68b8) 
thrown [open/src/hotspot/share/prims/jni.cpp, line 1210]
Event: 3731980.918 Thread 0x00007f3d05136f30 Exception <a 'java/lang/NoSuchMethodError'{0x00001002739ffa48}: static Lcom/company/nums/biz/compiler/SmithRequest;.<clinit>()V> (0x00001002739ffa48) 
thrown [open/src/hotspot/share/prims/jni.cpp, line 1210]
Event: 3731981.073 Thread 0x00007f3d1c014c00 Exception <a 'java/lang/NoSuchMethodError'{0x0000100271b74a70}: static Lcom/company/nums/biz/compiler/SmithResponse;.<clinit>()V> (0x0000100271b74a70) 
thrown [open/src/hotspot/share/prims/jni.cpp, line 1210]
Event: 3731981.107 Thread 0x00007f3d05136f30 Exception <a 'java/lang/NoSuchMethodError'{0x0000100253de4a20}: static Lcom/company/nums/biz/compiler/VMethRequest;.<clinit>()V> (0x0000100253de4a20) 
thrown [open/src/hotspot/share/prims/jni.cpp, line 1210]

Events (20 events):
Event: 3734885.595 Executing  VM operation: ZMarkEnd done
Event: 3734885.601 Executing  VM operation: HandshakeAllThreads
Event: 3734885.601 Executing  VM operation: HandshakeAllThreads done
Event: 3734885.603 Executing  VM operation: ZRelocateStart
Event: 3734885.603 Executing  VM operation: ZRelocateStart done
Event: 3734887.339 Thread 0x00007f3e35527dc0 Thread exited: 0x00007f3e35527dc0
Event: 3734895.613 Executing  VM operation: ZMarkStart
Event: 3734895.613 Executing  VM operation: ZMarkStart done
Event: 3734895.787 Executing  VM operation: HandshakeAllThreads
Event: 3734895.787 Executing  VM operation: HandshakeAllThreads done
Event: 3734895.788 Executing  VM operation: HandshakeAllThreads
Event: 3734895.788 Executing  VM operation: HandshakeAllThreads done
Event: 3734895.788 Executing  VM operation: HandshakeAllThreads
Event: 3734895.788 Executing  VM operation: HandshakeAllThreads done
Event: 3734895.789 Executing  VM operation: ZMarkEnd
Event: 3734895.789 Executing  VM operation: ZMarkEnd done
Event: 3734895.807 Executing  VM operation: HandshakeAllThreads
Event: 3734895.809 Executing  VM operation: HandshakeAllThreads done
Event: 3734895.811 Executing  VM operation: ZRelocateStart
Event: 3734895.812 Executing  VM operation: ZRelocateStart done


Dynamic libraries:
800000000-800003000 rwxp 00001000 fd:02 279281267                        /site/apps/jdk-16/lib/server/classes_nocoops.jsa
800003000-800403000 rw-p 00004000 fd:02 279281267                        /site/apps/jdk-16/lib/server/classes_nocoops.jsa
800403000-800b9a000 r--p 00404000 fd:02 279281267                        /site/apps/jdk-16/lib/server/classes_nocoops.jsa
800b9a000-800c00000 ---p 00000000 00:00 0 
800c00000-800c20000 rw-p 00000000 00:00 0 
800c20000-800c40000 rw-p 00000000 00:00 0 
800c40000-800cc0000 rw-p 00000000 00:00 0 
800cc0000-800d40000 rw-p 00000000 00:00 0 
800d40000-800d80000 rw-p 00000000 00:00 0 
800d80000-801070000 rw-p 00000000 00:00 0 
801070000-801080000 ---p 00000000 00:00 0 
801080000-8010c0000 rw-p 00000000 00:00 0 
8010c0000-8010f0000 rw-p 00000000 00:00 0 
8010f0000-801100000 ---p 00000000 00:00 0 
801100000-8015f0000 rw-p 00000000 00:00 0 
8015f0000-840c00000 ---p 00000000 00:00 0 
40000000000-40000200000 ---p 00000000 00:00 0 
40000200000-40000400000 rw-s 00200000 00:04 401512068                    /memfd:java_heap (deleted)
40000400000-40000600000 ---p 00000000 00:00 0 
40000600000-40000800000 rw-s 00600000 00:04 401512068                    /memfd:java_heap (deleted)
40000800000-40000a00000 ---p 00000000 00:00 0 
40000a00000-40000e00000 rw-s 00a00000 00:04 401512068                    /memfd:java_heap (deleted)
40000e00000-40001000000 ---p 00000000 00:00 0 
40001000000-40001200000 rw-s 01000000 00:04 401512068                    /memfd:java_heap (deleted)
40001200000-40002e00000 ---p 00000000 00:00 0 
40002e00000-40003000000 rw-s 02e00000 00:04 401512068                    /memfd:java_heap (deleted)
40003000000-40003200000 ---p 00000000 00:00 0 
40003200000-40003400000 rw-s 03200000 00:04 401512068                    /memfd:java_heap (deleted)
40003400000-40003600000 ---p 00000000 00:00 0 
40003600000-40003800000 rw-s 03600000 00:04 401512068                    /memfd:java_heap (deleted)
40003800000-40003e00000 ---p 00000000 00:00 0 
40003e00000-40004000000 rw-s 03e00000 00:04 401512068                    /memfd:java_heap (deleted)
40004000000-40004200000 ---p 00000000 00:00 0 
40004200000-40004400000 rw-s 04200000 00:04 401512068                    /memfd:java_heap (deleted)
40004400000-40004a00000 ---p 00000000 00:00 0 
40004a00000-40004c00000 rw-s 04a00000 00:04 401512068                    /memfd:java_heap (deleted)
40004c00000-40006200000 ---p 00000000 00:00 0 
40006200000-40006400000 rw-s 06200000 00:04 401512068                    /memfd:java_heap (deleted)
40006400000-40006600000 ---p 00000000 00:00 0 
40006600000-40007000000 rw-s 06600000 00:04 401512068                    /memfd:java_heap (deleted)
40007000000-40007e00000 ---p 00000000 00:00 0 
40007e00000-40008000000 rw-s 07e00000 00:04 401512068                    /memfd:java_heap (deleted)
40008000000-40008400000 ---p 00000000 00:00 0 
40008400000-4000aa00000 rw-s 08400000 00:04 401512068                    /memfd:java_heap (deleted)
4000aa00000-4000ac00000 ---p 00000000 00:00 0 
4000ac00000-4000c200000 rw-s 0ac00000 00:04 401512068                    /memfd:java_heap (deleted)
4000c200000-4000c400000 ---p 00000000 00:00 0 
4000c400000-4000c600000 rw-s 0c400000 00:04 401512068                    /memfd:java_heap (deleted)
4000c600000-4000c800000 ---p 00000000 00:00 0 
4000c800000-4000d600000 rw-s 0c800000 00:04 401512068                    /memfd:java_heap (deleted)
4000d600000-4000dc00000 ---p 00000000 00:00 0 
4000dc00000-4000e200000 rw-s 0dc00000 00:04 401512068                    /memfd:java_heap (deleted)
4000e200000-4000e400000 ---p 00000000 00:00 0 
4000e400000-4000e600000 rw-s 0e400000 00:04 401512068                    /memfd:java_heap (deleted)
4000e600000-4000e800000 ---p 00000000 00:00 0 
4000e800000-4000ea00000 rw-s 0e800000 00:04 401512068                    /memfd:java_heap (deleted)
4000ea00000-4000ee00000 ---p 00000000 00:00 0 
4000ee00000-4000f200000 rw-s 0ee00000 00:04 401512068                    /memfd:java_heap (deleted)
4000f200000-4000f400000 ---p 00000000 00:00 0 
4000f400000-40011600000 rw-s 0f400000 00:04 401512068                    /memfd:java_heap (deleted)
40011600000-40011800000 ---p 00000000 00:00 0 
40011800000-40011a00000 rw-s 11800000 00:04 401512068                    /memfd:java_heap (deleted)
40011a00000-40011c00000 ---p 00000000 00:00 0 
40011c00000-40015400000 rw-s 11c00000 00:04 401512068                    /memfd:java_heap (deleted)
40015400000-40015600000 ---p 00000000 00:00 0 
40015600000-40016800000 rw-s 15600000 00:04 401512068                    /memfd:java_heap (deleted)
40016800000-40016a00000 ---p 00000000 00:00 0 
40016a00000-40017000000 rw-s 16a00000 00:04 401512068                    /memfd:java_heap (deleted)
40017000000-40017200000 ---p 00000000 00:00 0 
40017200000-40017400000 rw-s 17200000 00:04 401512068                    /memfd:java_heap (deleted)
40017400000-40017800000 ---p 00000000 00:00 0 
40017800000-40017a00000 rw-s 17800000 00:04 401512068                    /memfd:java_heap (deleted)
40017a00000-40018000000 ---p 00000000 00:00 0 
40018000000-40018200000 rw-s 18000000 00:04 401512068                    /memfd:java_heap (deleted)
40018200000-40018400000 ---p 00000000 00:00 0 
40018400000-40018e00000 rw-s 18400000 00:04 401512068                    /memfd:java_heap (deleted)
40018e00000-40019000000 ---p 00000000 00:00 0 
40019000000-40019600000 rw-s 19000000 00:04 401512068                    /memfd:java_heap (deleted)
40019600000-40019800000 ---p 00000000 00:00 0 
40019800000-4001a200000 rw-s 19800000 00:04 401512068                    /memfd:java_heap (deleted)
4001a200000-4001a400000 ---p 00000000 00:00 0 
4001a400000-4001bc00000 rw-s 1a400000 00:04 401512068                    /memfd:java_heap (deleted)
4001bc00000-4001be00000 ---p 00000000 00:00 0 
4001be00000-4001cc00000 rw-s 1be00000 00:04 401512068                    /memfd:java_heap (deleted)
4001cc00000-4001ce00000 ---p 00000000 00:00 0 
4001ce00000-4027f600000 rw-s 1ce00000 00:04 401512068                    /memfd:java_heap (deleted)
4027f600000-427f6000000 ---p 00000000 00:00 0 
427f6000000-427f6200000 rw-s 07600000 00:04 401512068                    /memfd:java_heap (deleted)
427f6200000-427f6400000 rw-s 08200000 00:04 401512068                    /memfd:java_heap (deleted)
427f6400000-427f6600000 rw-s 0d600000 00:04 401512068                    /memfd:java_heap (deleted)
427f6600000-427f6800000 rw-s 0da00000 00:04 401512068                    /memfd:java_heap (deleted)
427f6800000-427f6a00000 rw-s 0e600000 00:04 401512068                    /memfd:java_heap (deleted)
427f6a00000-427f6e00000 rw-s 0ea00000 00:04 401512068                    /memfd:java_heap (deleted)
427f6e00000-427f7000000 rw-s 11600000 00:04 401512068                    /memfd:java_heap (deleted)
427f7000000-427f7200000 rw-s 11a00000 00:04 401512068                    /memfd:java_heap (deleted)
427f7200000-427f7400000 rw-s 15400000 00:04 401512068                    /memfd:java_heap (deleted)
427f7400000-427f7600000 rw-s 16800000 00:04 401512068                    /memfd:java_heap (deleted)
427f7600000-427f7800000 rw-s 17000000 00:04 401512068                    /memfd:java_heap (deleted)
427f7800000-427f7a00000 rw-s 17400000 00:04 401512068                    /memfd:java_heap (deleted)
427f7a00000-427f7c00000 rw-s 17c00000 00:04 401512068                    /memfd:java_heap (deleted)
427f7c00000-427f7e00000 rw-s 1bc00000 00:04 401512068                    /memfd:java_heap (deleted)
427f7e00000-427f8000000 rw-s 1cc00000 00:04 401512068                    /memfd:java_heap (deleted)
427f8000000-427f8200000 rw-s 00e00000 00:04 401512068                    /memfd:java_heap (deleted)
427f8200000-427f9e00000 rw-s 01200000 00:04 401512068                    /memfd:java_heap (deleted)
427f9e00000-427fa000000 rw-s 05000000 00:04 401512068                    /memfd:java_heap (deleted)
427fa000000-427fa200000 rw-s 05c00000 00:04 401512068                    /memfd:java_heap (deleted)
427fa200000-427fa400000 rw-s 06000000 00:04 401512068                    /memfd:java_heap (deleted)
427fa400000-427fa600000 rw-s 06400000 00:04 401512068                    /memfd:java_heap (deleted)
427fa600000-427fa800000 rw-s 07000000 00:04 401512068                    /memfd:java_heap (deleted)
427fa800000-427faa00000 rw-s 07400000 00:04 401512068                    /memfd:java_heap (deleted)
427faa00000-427fac00000 rw-s 07800000 00:04 401512068                    /memfd:java_heap (deleted)
427fac00000-427fae00000 rw-s 07c00000 00:04 401512068                    /memfd:java_heap (deleted)
427fae00000-427fb000000 rw-s 08000000 00:04 401512068                    /memfd:java_heap (deleted)
427fb000000-427fb200000 rw-s 0f200000 00:04 401512068                    /memfd:java_heap (deleted)
427fb200000-427fb400000 rw-s 17600000 00:04 401512068                    /memfd:java_heap (deleted)
427fb400000-427fb600000 rw-s 17a00000 00:04 401512068                    /memfd:java_heap (deleted)
427fb600000-427fb800000 rw-s 17e00000 00:04 401512068                    /memfd:java_heap (deleted)
427fb800000-427fba00000 rw-s 18200000 00:04 401512068                    /memfd:java_heap (deleted)
427fba00000-427fbc00000 rw-s 18e00000 00:04 401512068                    /memfd:java_heap (deleted)
427fbc00000-427fbe00000 rw-s 19600000 00:04 401512068                    /memfd:java_heap (deleted)
427fbe00000-427fc000000 rw-s 1a200000 00:04 401512068                    /memfd:java_heap (deleted)
427fc000000-427fc200000 rw-s 03000000 00:04 401512068                    /memfd:java_heap (deleted)
427fc200000-427fc400000 rw-s 03c00000 00:04 401512068                    /memfd:java_heap (deleted)
427fc400000-427fc600000 rw-s 04000000 00:04 401512068                    /memfd:java_heap (deleted)
427fc600000-427fc800000 rw-s 04400000 00:04 401512068                    /memfd:java_heap (deleted)
427fc800000-427fca00000 rw-s 04800000 00:04 401512068                    /memfd:java_heap (deleted)
427fca00000-427fcc00000 rw-s 04c00000 00:04 401512068                    /memfd:java_heap (deleted)
427fcc00000-427fce00000 rw-s 05400000 00:04 401512068                    /memfd:java_heap (deleted)
427fce00000-427fd200000 rw-s 05800000 00:04 401512068                    /memfd:java_heap (deleted)
427fd200000-427fd400000 rw-s 05e00000 00:04 401512068                    /memfd:java_heap (deleted)
427fd400000-427fd600000 rw-s 07200000 00:04 401512068                    /memfd:java_heap (deleted)
427fd600000-427fd800000 rw-s 07a00000 00:04 401512068                    /memfd:java_heap (deleted)
427fd800000-427fda00000 rw-s 0aa00000 00:04 401512068                    /memfd:java_heap (deleted)
427fda00000-427fdc00000 rw-s 0c200000 00:04 401512068                    /memfd:java_heap (deleted)
427fdc00000-427fde00000 rw-s 0c600000 00:04 401512068                    /memfd:java_heap (deleted)
427fde00000-427fe000000 rw-s 0e200000 00:04 401512068                    /memfd:java_heap (deleted)
427fe000000-427fe200000 rw-s 00000000 00:04 401512068                    /memfd:java_heap (deleted)
427fe200000-427fe400000 rw-s 00400000 00:04 401512068                    /memfd:java_heap (deleted)
427fe400000-427fe600000 rw-s 00800000 00:04 401512068                    /memfd:java_heap (deleted)
427fe600000-427fe800000 rw-s 03400000 00:04 401512068                    /memfd:java_heap (deleted)
427fe800000-427fec00000 rw-s 03800000 00:04 401512068                    /memfd:java_heap (deleted)
427fec00000-427fee00000 rw-s 04600000 00:04 401512068                    /memfd:java_heap (deleted)
427fee00000-427ff000000 rw-s 04e00000 00:04 401512068                    /memfd:java_heap (deleted)
427ff000000-427ff200000 rw-s 05200000 00:04 401512068                    /memfd:java_heap (deleted)
427ff200000-427ff400000 rw-s 05600000 00:04 401512068                    /memfd:java_heap (deleted)
427ff400000-427ff600000 rw-s 0d800000 00:04 401512068                    /memfd:java_heap (deleted)
427ff600000-42800000000 rw-s 27f600000 00:04 401512068                   /memfd:java_heap (deleted)
80000000000-80000200000 ---p 00000000 00:00 0 
80000200000-80000400000 rw-s 00200000 00:04 401512068                    /memfd:java_heap (deleted)
80000400000-80000600000 ---p 00000000 00:00 0 
80000600000-80000800000 rw-s 00600000 00:04 401512068                    /memfd:java_heap (deleted)
80000800000-80000a00000 ---p 00000000 00:00 0 
80000a00000-80000e00000 rw-s 00a00000 00:04 401512068                    /memfd:java_heap (deleted)
80000e00000-80001000000 ---p 00000000 00:00 0 
80001000000-80001200000 rw-s 01000000 00:04 401512068                    /memfd:java_heap (deleted)
80001200000-80002e00000 ---p 00000000 00:00 0 
80002e00000-80003000000 rw-s 02e00000 00:04 401512068                    /memfd:java_heap (deleted)
80003000000-80003200000 ---p 00000000 00:00 0 
80003200000-80003400000 rw-s 03200000 00:04 401512068                    /memfd:java_heap (deleted)
80003400000-80003600000 ---p 00000000 00:00 0 
80003600000-80003800000 rw-s 03600000 00:04 401512068                    /memfd:java_heap (deleted)
80003800000-80003e00000 ---p 00000000 00:00 0 
80003e00000-80004000000 rw-s 03e00000 00:04 401512068                    /memfd:java_heap (deleted)
80004000000-80004200000 ---p 00000000 00:00 0 
80004200000-80004400000 rw-s 04200000 00:04 401512068                    /memfd:java_heap (deleted)
80004400000-80004a00000 ---p 00000000 00:00 0 
80004a00000-80004c00000 rw-s 04a00000 00:04 401512068                    /memfd:java_heap (deleted)
80004c00000-80006200000 ---p 00000000 00:00 0 
80006200000-80006400000 rw-s 06200000 00:04 401512068                    /memfd:java_heap (deleted)
80006400000-80006600000 ---p 00000000 00:00 0 
80006600000-80007000000 rw-s 06600000 00:04 401512068                    /memfd:java_heap (deleted)
80007000000-80007e00000 ---p 00000000 00:00 0 
80007e00000-80008000000 rw-s 07e00000 00:04 401512068                    /memfd:java_heap (deleted)
80008000000-80008400000 ---p 00000000 00:00 0 
80008400000-8000aa00000 rw-s 08400000 00:04 401512068                    /memfd:java_heap (deleted)
8000aa00000-8000ac00000 ---p 00000000 00:00 0 
8000ac00000-8000c200000 rw-s 0ac00000 00:04 401512068                    /memfd:java_heap (deleted)
8000c200000-8000c400000 ---p 00000000 00:00 0 
8000c400000-8000c600000 rw-s 0c400000 00:04 401512068                    /memfd:java_heap (deleted)
8000c600000-8000c800000 ---p 00000000 00:00 0 
8000c800000-8000d600000 rw-s 0c800000 00:04 401512068                    /memfd:java_heap (deleted)
8000d600000-8000dc00000 ---p 00000000 00:00 0 
8000dc00000-8000e200000 rw-s 0dc00000 00:04 401512068                    /memfd:java_heap (deleted)
8000e200000-8000e400000 ---p 00000000 00:00 0 
8000e400000-8000e600000 rw-s 0e400000 00:04 401512068                    /memfd:java_heap (deleted)
8000e600000-8000e800000 ---p 00000000 00:00 0 
8000e800000-8000ea00000 rw-s 0e800000 00:04 401512068                    /memfd:java_heap (deleted)
8000ea00000-8000ee00000 ---p 00000000 00:00 0 
8000ee00000-8000f200000 rw-s 0ee00000 00:04 401512068                    /memfd:java_heap (deleted)
8000f200000-8000f400000 ---p 00000000 00:00 0 
8000f400000-80011600000 rw-s 0f400000 00:04 401512068                    /memfd:java_heap (deleted)
80011600000-80011800000 ---p 00000000 00:00 0 
80011800000-80011a00000 rw-s 11800000 00:04 401512068                    /memfd:java_heap (deleted)
80011a00000-80011c00000 ---p 00000000 00:00 0 
80011c00000-80015400000 rw-s 11c00000 00:04 401512068                    /memfd:java_heap (deleted)
80015400000-80015600000 ---p 00000000 00:00 0 
80015600000-80016800000 rw-s 15600000 00:04 401512068                    /memfd:java_heap (deleted)
80016800000-80016a00000 ---p 00000000 00:00 0 
80016a00000-80017000000 rw-s 16a00000 00:04 401512068                    /memfd:java_heap (deleted)
80017000000-80017200000 ---p 00000000 00:00 0 
80017200000-80017400000 rw-s 17200000 00:04 401512068                    /memfd:java_heap (deleted)
80017400000-80017800000 ---p 00000000 00:00 0 
80017800000-80017a00000 rw-s 17800000 00:04 401512068                    /memfd:java_heap (deleted)
80017a00000-80018000000 ---p 00000000 00:00 0 
80018000000-80018200000 rw-s 18000000 00:04 401512068                    /memfd:java_heap (deleted)
80018200000-80018400000 ---p 00000000 00:00 0 
80018400000-80018e00000 rw-s 18400000 00:04 401512068                    /memfd:java_heap (deleted)
80018e00000-80019000000 ---p 00000000 00:00 0 
80019000000-80019600000 rw-s 19000000 00:04 401512068                    /memfd:java_heap (deleted)
80019600000-80019800000 ---p 00000000 00:00 0 
80019800000-8001a200000 rw-s 19800000 00:04 401512068                    /memfd:java_heap (deleted)
8001a200000-8001a400000 ---p 00000000 00:00 0 
8001a400000-8001bc00000 rw-s 1a400000 00:04 401512068                    /memfd:java_heap (deleted)
8001bc00000-8001be00000 ---p 00000000 00:00 0 
8001be00000-8001cc00000 rw-s 1be00000 00:04 401512068                    /memfd:java_heap (deleted)
8001cc00000-8001ce00000 ---p 00000000 00:00 0 
8001ce00000-8027f600000 rw-s 1ce00000 00:04 401512068                    /memfd:java_heap (deleted)
8027f600000-827f6000000 ---p 00000000 00:00 0 
827f6000000-827f6200000 rw-s 07600000 00:04 401512068                    /memfd:java_heap (deleted)
827f6200000-827f6400000 rw-s 08200000 00:04 401512068                    /memfd:java_heap (deleted)
827f6400000-827f6600000 rw-s 0d600000 00:04 401512068                    /memfd:java_heap (deleted)
827f6600000-827f6800000 rw-s 0da00000 00:04 401512068                    /memfd:java_heap (deleted)
827f6800000-827f6a00000 rw-s 0e600000 00:04 401512068                    /memfd:java_heap (deleted)
827f6a00000-827f6e00000 rw-s 0ea00000 00:04 401512068                    /memfd:java_heap (deleted)
827f6e00000-827f7000000 rw-s 11600000 00:04 401512068                    /memfd:java_heap (deleted)
827f7000000-827f7200000 rw-s 11a00000 00:04 401512068                    /memfd:java_heap (deleted)
827f7200000-827f7400000 rw-s 15400000 00:04 401512068                    /memfd:java_heap (deleted)
827f7400000-827f7600000 rw-s 16800000 00:04 401512068                    /memfd:java_heap (deleted)
827f7600000-827f7800000 rw-s 17000000 00:04 401512068                    /memfd:java_heap (deleted)
827f7800000-827f7a00000 rw-s 17400000 00:04 401512068                    /memfd:java_heap (deleted)
827f7a00000-827f7c00000 rw-s 17c00000 00:04 401512068                    /memfd:java_heap (deleted)
827f7c00000-827f7e00000 rw-s 1bc00000 00:04 401512068                    /memfd:java_heap (deleted)
827f7e00000-827f8000000 rw-s 1cc00000 00:04 401512068                    /memfd:java_heap (deleted)
827f8000000-827f8200000 rw-s 00e00000 00:04 401512068                    /memfd:java_heap (deleted)
827f8200000-827f9e00000 rw-s 01200000 00:04 401512068                    /memfd:java_heap (deleted)
827f9e00000-827fa000000 rw-s 05000000 00:04 401512068                    /memfd:java_heap (deleted)
827fa000000-827fa200000 rw-s 05c00000 00:04 401512068                    /memfd:java_heap (deleted)
827fa200000-827fa400000 rw-s 06000000 00:04 401512068                    /memfd:java_heap (deleted)
827fa400000-827fa600000 rw-s 06400000 00:04 401512068                    /memfd:java_heap (deleted)
827fa600000-827fa800000 rw-s 07000000 00:04 401512068                    /memfd:java_heap (deleted)
827fa800000-827faa00000 rw-s 07400000 00:04 401512068                    /memfd:java_heap (deleted)
827faa00000-827fac00000 rw-s 07800000 00:04 401512068                    /memfd:java_heap (deleted)
827fac00000-827fae00000 rw-s 07c00000 00:04 401512068                    /memfd:java_heap (deleted)
827fae00000-827fb000000 rw-s 08000000 00:04 401512068                    /memfd:java_heap (deleted)
827fb000000-827fb200000 rw-s 0f200000 00:04 401512068                    /memfd:java_heap (deleted)
827fb200000-827fb400000 rw-s 17600000 00:04 401512068                    /memfd:java_heap (deleted)
827fb400000-827fb600000 rw-s 17a00000 00:04 401512068                    /memfd:java_heap (deleted)
827fb600000-827fb800000 rw-s 17e00000 00:04 401512068                    /memfd:java_heap (deleted)
827fb800000-827fba00000 rw-s 18200000 00:04 401512068                    /memfd:java_heap (deleted)
827fba00000-827fbc00000 rw-s 18e00000 00:04 401512068                    /memfd:java_heap (deleted)
827fbc00000-827fbe00000 rw-s 19600000 00:04 401512068                    /memfd:java_heap (deleted)
827fbe00000-827fc000000 rw-s 1a200000 00:04 401512068                    /memfd:java_heap (deleted)
827fc000000-827fc200000 rw-s 03000000 00:04 401512068                    /memfd:java_heap (deleted)
827fc200000-827fc400000 rw-s 03c00000 00:04 401512068                    /memfd:java_heap (deleted)
827fc400000-827fc600000 rw-s 04000000 00:04 401512068                    /memfd:java_heap (deleted)
827fc600000-827fc800000 rw-s 04400000 00:04 401512068                    /memfd:java_heap (deleted)
827fc800000-827fca00000 rw-s 04800000 00:04 401512068                    /memfd:java_heap (deleted)
827fca00000-827fcc00000 rw-s 04c00000 00:04 401512068                    /memfd:java_heap (deleted)
827fcc00000-827fce00000 rw-s 05400000 00:04 401512068                    /memfd:java_heap (deleted)
827fce00000-827fd200000 rw-s 05800000 00:04 401512068                    /memfd:java_heap (deleted)
827fd200000-827fd400000 rw-s 05e00000 00:04 401512068                    /memfd:java_heap (deleted)
827fd400000-827fd600000 rw-s 07200000 00:04 401512068                    /memfd:java_heap (deleted)
827fd600000-827fd800000 rw-s 07a00000 00:04 401512068                    /memfd:java_heap (deleted)
827fd800000-827fda00000 rw-s 0aa00000 00:04 401512068                    /memfd:java_heap (deleted)
827fda00000-827fdc00000 rw-s 0c200000 00:04 401512068                    /memfd:java_heap (deleted)
827fdc00000-827fde00000 rw-s 0c600000 00:04 401512068                    /memfd:java_heap (deleted)
827fde00000-827fe000000 rw-s 0e200000 00:04 401512068                    /memfd:java_heap (deleted)
827fe000000-827fe200000 rw-s 00000000 00:04 401512068                    /memfd:java_heap (deleted)
827fe200000-827fe400000 rw-s 00400000 00:04 401512068                    /memfd:java_heap (deleted)
827fe400000-827fe600000 rw-s 00800000 00:04 401512068                    /memfd:java_heap (deleted)
827fe600000-827fe800000 rw-s 03400000 00:04 401512068                    /memfd:java_heap (deleted)
827fe800000-827fec00000 rw-s 03800000 00:04 401512068                    /memfd:java_heap (deleted)
827fec00000-827fee00000 rw-s 04600000 00:04 401512068                    /memfd:java_heap (deleted)
827fee00000-827ff000000 rw-s 04e00000 00:04 401512068                    /memfd:java_heap (deleted)
827ff000000-827ff200000 rw-s 05200000 00:04 401512068                    /memfd:java_heap (deleted)
827ff200000-827ff400000 rw-s 05600000 00:04 401512068                    /memfd:java_heap (deleted)
827ff400000-827ff600000 rw-s 0d800000 00:04 401512068                    /memfd:java_heap (deleted)
827ff600000-82800000000 rw-s 27f600000 00:04 401512068                   /memfd:java_heap (deleted)
100000000000-100000200000 ---p 00000000 00:00 0 
100000200000-100000400000 rw-s 00200000 00:04 401512068                  /memfd:java_heap (deleted)
100000400000-100000600000 ---p 00000000 00:00 0 
100000600000-100000800000 rw-s 00600000 00:04 401512068                  /memfd:java_heap (deleted)
100000800000-100000a00000 ---p 00000000 00:00 0 
100000a00000-100000e00000 rw-s 00a00000 00:04 401512068                  /memfd:java_heap (deleted)
100000e00000-100001000000 ---p 00000000 00:00 0 
100001000000-100001200000 rw-s 01000000 00:04 401512068                  /memfd:java_heap (deleted)
100001200000-100002e00000 ---p 00000000 00:00 0 
100002e00000-100003000000 rw-s 02e00000 00:04 401512068                  /memfd:java_heap (deleted)
100003000000-100003200000 ---p 00000000 00:00 0 
100003200000-100003400000 rw-s 03200000 00:04 401512068                  /memfd:java_heap (deleted)
100003400000-100003600000 ---p 00000000 00:00 0 
100003600000-100003800000 rw-s 03600000 00:04 401512068                  /memfd:java_heap (deleted)
100003800000-100003e00000 ---p 00000000 00:00 0 
100003e00000-100004000000 rw-s 03e00000 00:04 401512068                  /memfd:java_heap (deleted)
100004000000-100004200000 ---p 00000000 00:00 0 
100004200000-100004400000 rw-s 04200000 00:04 401512068                  /memfd:java_heap (deleted)
100004400000-100004a00000 ---p 00000000 00:00 0 
100004a00000-100004c00000 rw-s 04a00000 00:04 401512068                  /memfd:java_heap (deleted)
100004c00000-100006200000 ---p 00000000 00:00 0 
100006200000-100006400000 rw-s 06200000 00:04 401512068                  /memfd:java_heap (deleted)
100006400000-100006600000 ---p 00000000 00:00 0 
100006600000-100007000000 rw-s 06600000 00:04 401512068                  /memfd:java_heap (deleted)
100007000000-100007e00000 ---p 00000000 00:00 0 
100007e00000-100008000000 rw-s 07e00000 00:04 401512068                  /memfd:java_heap (deleted)
100008000000-100008400000 ---p 00000000 00:00 0 
100008400000-10000aa00000 rw-s 08400000 00:04 401512068                  /memfd:java_heap (deleted)
10000aa00000-10000ac00000 ---p 00000000 00:00 0 
10000ac00000-10000c200000 rw-s 0ac00000 00:04 401512068                  /memfd:java_heap (deleted)
10000c200000-10000c400000 ---p 00000000 00:00 0 
10000c400000-10000c600000 rw-s 0c400000 00:04 401512068                  /memfd:java_heap (deleted)
10000c600000-10000c800000 ---p 00000000 00:00 0 
10000c800000-10000d600000 rw-s 0c800000 00:04 401512068                  /memfd:java_heap (deleted)
10000d600000-10000dc00000 ---p 00000000 00:00 0 
10000dc00000-10000e200000 rw-s 0dc00000 00:04 401512068                  /memfd:java_heap (deleted)
10000e200000-10000e400000 ---p 00000000 00:00 0 
10000e400000-10000e600000 rw-s 0e400000 00:04 401512068                  /memfd:java_heap (deleted)
10000e600000-10000e800000 ---p 00000000 00:00 0 
10000e800000-10000ea00000 rw-s 0e800000 00:04 401512068                  /memfd:java_heap (deleted)
10000ea00000-10000ee00000 ---p 00000000 00:00 0 
10000ee00000-10000f200000 rw-s 0ee00000 00:04 401512068                  /memfd:java_heap (deleted)
10000f200000-10000f400000 ---p 00000000 00:00 0 
10000f400000-100011600000 rw-s 0f400000 00:04 401512068                  /memfd:java_heap (deleted)
100011600000-100011800000 ---p 00000000 00:00 0 
100011800000-100011a00000 rw-s 11800000 00:04 401512068                  /memfd:java_heap (deleted)
100011a00000-100011c00000 ---p 00000000 00:00 0 
100011c00000-100015400000 rw-s 11c00000 00:04 401512068                  /memfd:java_heap (deleted)
100015400000-100015600000 ---p 00000000 00:00 0 
100015600000-100016800000 rw-s 15600000 00:04 401512068                  /memfd:java_heap (deleted)
100016800000-100016a00000 ---p 00000000 00:00 0 
100016a00000-100017000000 rw-s 16a00000 00:04 401512068                  /memfd:java_heap (deleted)
100017000000-100017200000 ---p 00000000 00:00 0 
100017200000-100017400000 rw-s 17200000 00:04 401512068                  /memfd:java_heap (deleted)
100017400000-100017800000 ---p 00000000 00:00 0 
100017800000-100017a00000 rw-s 17800000 00:04 401512068                  /memfd:java_heap (deleted)
100017a00000-100018000000 ---p 00000000 00:00 0 
100018000000-100018200000 rw-s 18000000 00:04 401512068                  /memfd:java_heap (deleted)
100018200000-100018400000 ---p 00000000 00:00 0 
100018400000-100018e00000 rw-s 18400000 00:04 401512068                  /memfd:java_heap (deleted)
100018e00000-100019000000 ---p 00000000 00:00 0 
100019000000-100019600000 rw-s 19000000 00:04 401512068                  /memfd:java_heap (deleted)
100019600000-100019800000 ---p 00000000 00:00 0 
100019800000-10001a200000 rw-s 19800000 00:04 401512068                  /memfd:java_heap (deleted)
10001a200000-10001a400000 ---p 00000000 00:00 0 
10001a400000-10001bc00000 rw-s 1a400000 00:04 401512068                  /memfd:java_heap (deleted)
10001bc00000-10001be00000 ---p 00000000 00:00 0 
10001be00000-10001cc00000 rw-s 1be00000 00:04 401512068                  /memfd:java_heap (deleted)
10001cc00000-10001ce00000 ---p 00000000 00:00 0 
10001ce00000-10027f600000 rw-s 1ce00000 00:04 401512068                  /memfd:java_heap (deleted)
10027f600000-1027f6000000 ---p 00000000 00:00 0 
1027f6000000-1027f6200000 rw-s 07600000 00:04 401512068                  /memfd:java_heap (deleted)
1027f6200000-1027f6400000 rw-s 08200000 00:04 401512068                  /memfd:java_heap (deleted)
1027f6400000-1027f6600000 rw-s 0d600000 00:04 401512068                  /memfd:java_heap (deleted)
1027f6600000-1027f6800000 rw-s 0da00000 00:04 401512068                  /memfd:java_heap (deleted)
1027f6800000-1027f6a00000 rw-s 0e600000 00:04 401512068                  /memfd:java_heap (deleted)
1027f6a00000-1027f6e00000 rw-s 0ea00000 00:04 401512068                  /memfd:java_heap (deleted)
1027f6e00000-1027f7000000 rw-s 11600000 00:04 401512068                  /memfd:java_heap (deleted)
1027f7000000-1027f7200000 rw-s 11a00000 00:04 401512068                  /memfd:java_heap (deleted)
1027f7200000-1027f7400000 rw-s 15400000 00:04 401512068                  /memfd:java_heap (deleted)
1027f7400000-1027f7600000 rw-s 16800000 00:04 401512068                  /memfd:java_heap (deleted)
1027f7600000-1027f7800000 rw-s 17000000 00:04 401512068                  /memfd:java_heap (deleted)
1027f7800000-1027f7a00000 rw-s 17400000 00:04 401512068                  /memfd:java_heap (deleted)
1027f7a00000-1027f7c00000 rw-s 17c00000 00:04 401512068                  /memfd:java_heap (deleted)
1027f7c00000-1027f7e00000 rw-s 1bc00000 00:04 401512068                  /memfd:java_heap (deleted)
1027f7e00000-1027f8000000 rw-s 1cc00000 00:04 401512068                  /memfd:java_heap (deleted)
1027f8000000-1027f8200000 rw-s 00e00000 00:04 401512068                  /memfd:java_heap (deleted)
1027f8200000-1027f9e00000 rw-s 01200000 00:04 401512068                  /memfd:java_heap (deleted)
1027f9e00000-1027fa000000 rw-s 05000000 00:04 401512068                  /memfd:java_heap (deleted)
1027fa000000-1027fa200000 rw-s 05c00000 00:04 401512068                  /memfd:java_heap (deleted)
1027fa200000-1027fa400000 rw-s 06000000 00:04 401512068                  /memfd:java_heap (deleted)
1027fa400000-1027fa600000 rw-s 06400000 00:04 401512068                  /memfd:java_heap (deleted)
1027fa600000-1027fa800000 rw-s 07000000 00:04 401512068                  /memfd:java_heap (deleted)
1027fa800000-1027faa00000 rw-s 07400000 00:04 401512068                  /memfd:java_heap (deleted)
1027faa00000-1027fac00000 rw-s 07800000 00:04 401512068                  /memfd:java_heap (deleted)
1027fac00000-1027fae00000 rw-s 07c00000 00:04 401512068                  /memfd:java_heap (deleted)
1027fae00000-1027fb000000 rw-s 08000000 00:04 401512068                  /memfd:java_heap (deleted)
1027fb000000-1027fb200000 rw-s 0f200000 00:04 401512068                  /memfd:java_heap (deleted)
1027fb200000-1027fb400000 rw-s 17600000 00:04 401512068                  /memfd:java_heap (deleted)
1027fb400000-1027fb600000 rw-s 17a00000 00:04 401512068                  /memfd:java_heap (deleted)
1027fb600000-1027fb800000 rw-s 17e00000 00:04 401512068                  /memfd:java_heap (deleted)
1027fb800000-1027fba00000 rw-s 18200000 00:04 401512068                  /memfd:java_heap (deleted)
1027fba00000-1027fbc00000 rw-s 18e00000 00:04 401512068                  /memfd:java_heap (deleted)
1027fbc00000-1027fbe00000 rw-s 19600000 00:04 401512068                  /memfd:java_heap (deleted)
1027fbe00000-1027fc000000 rw-s 1a200000 00:04 401512068                  /memfd:java_heap (deleted)
1027fc000000-1027fc200000 rw-s 03000000 00:04 401512068                  /memfd:java_heap (deleted)
1027fc200000-1027fc400000 rw-s 03c00000 00:04 401512068                  /memfd:java_heap (deleted)
1027fc400000-1027fc600000 rw-s 04000000 00:04 401512068                  /memfd:java_heap (deleted)
1027fc600000-1027fc800000 rw-s 04400000 00:04 401512068                  /memfd:java_heap (deleted)
1027fc800000-1027fca00000 rw-s 04800000 00:04 401512068                  /memfd:java_heap (deleted)
1027fca00000-1027fcc00000 rw-s 04c00000 00:04 401512068                  /memfd:java_heap (deleted)
1027fcc00000-1027fce00000 rw-s 05400000 00:04 401512068                  /memfd:java_heap (deleted)
1027fce00000-1027fd200000 rw-s 05800000 00:04 401512068                  /memfd:java_heap (deleted)
1027fd200000-1027fd400000 rw-s 05e00000 00:04 401512068                  /memfd:java_heap (deleted)
1027fd400000-1027fd600000 rw-s 07200000 00:04 401512068                  /memfd:java_heap (deleted)
1027fd600000-1027fd800000 rw-s 07a00000 00:04 401512068                  /memfd:java_heap (deleted)
1027fd800000-1027fda00000 rw-s 0aa00000 00:04 401512068                  /memfd:java_heap (deleted)
1027fda00000-1027fdc00000 rw-s 0c200000 00:04 401512068                  /memfd:java_heap (deleted)
1027fdc00000-1027fde00000 rw-s 0c600000 00:04 401512068                  /memfd:java_heap (deleted)
1027fde00000-1027fe000000 rw-s 0e200000 00:04 401512068                  /memfd:java_heap (deleted)
1027fe000000-1027fe200000 rw-s 00000000 00:04 401512068                  /memfd:java_heap (deleted)
1027fe200000-1027fe400000 rw-s 00400000 00:04 401512068                  /memfd:java_heap (deleted)
1027fe400000-1027fe600000 rw-s 00800000 00:04 401512068                  /memfd:java_heap (deleted)
1027fe600000-1027fe800000 rw-s 03400000 00:04 401512068                  /memfd:java_heap (deleted)
1027fe800000-1027fec00000 rw-s 03800000 00:04 401512068                  /memfd:java_heap (deleted)
1027fec00000-1027fee00000 rw-s 04600000 00:04 401512068                  /memfd:java_heap (deleted)
1027fee00000-1027ff000000 rw-s 04e00000 00:04 401512068                  /memfd:java_heap (deleted)
1027ff000000-1027ff200000 rw-s 05200000 00:04 401512068                  /memfd:java_heap (deleted)
1027ff200000-1027ff400000 rw-s 05600000 00:04 401512068                  /memfd:java_heap (deleted)
1027ff400000-1027ff600000 rw-s 0d800000 00:04 401512068                  /memfd:java_heap (deleted)
1027ff600000-102800000000 rw-s 27f600000 00:04 401512068                 /memfd:java_heap (deleted)
556f3b9f6000-556f3b9f7000 r-xp 00000000 fd:02 11076538                   /site/apps/jdk-16/bin/java
556f3b9f8000-556f3b9f9000 r--p 00001000 fd:02 11076538                   /site/apps/jdk-16/bin/java
556f3b9f9000-556f3b9fa000 rw-p 00002000 fd:02 11076538                   /site/apps/jdk-16/bin/java
556f3c562000-556f3cdec000 rw-p 00000000 00:00 0                          [heap]
7f3a98000000-7f3a98d67000 rw-p 00000000 00:00 0 
7f3a98d67000-7f3a9c000000 ---p 00000000 00:00 0 
7f3aa0000000-7f3aa15a3000 rw-p 00000000 00:00 0 
7f3aa15a3000-7f3aa4000000 ---p 00000000 00:00 0 
7f3aa8000000-7f3aa94bd000 rw-p 00000000 00:00 0 
7f3aa94bd000-7f3aac000000 ---p 00000000 00:00 0 
7f3aac000000-7f3ab0000000 rw-p 00000000 00:00 0 
7f3ab4000000-7f3ab7ffa000 rw-p 00000000 00:00 0 
7f3ab7ffa000-7f3ab8000000 ---p 00000000 00:00 0 
7f3ab8000000-7f3abac88000 rw-p 00000000 00:00 0 
7f3abac88000-7f3abc000000 ---p 00000000 00:00 0 
7f3ac0000000-7f3ac15ad000 rw-p 00000000 00:00 0 
7f3ac15ad000-7f3ac4000000 ---p 00000000 00:00 0 
7f3ac4000000-7f3ac7ff0000 rw-p 00000000 00:00 0 
7f3ac7ff0000-7f3ac8000000 ---p 00000000 00:00 0 
7f3acc000000-7f3acfffd000 rw-p 00000000 00:00 0 
7f3acfffd000-7f3ad0000000 ---p 00000000 00:00 0 
7f3ad4000000-7f3ad7ffe000 rw-p 00000000 00:00 0 
7f3ad7ffe000-7f3ad8000000 ---p 00000000 00:00 0 
7f3ad8000000-7f3ada06b000 rw-p 00000000 00:00 0 
7f3ada06b000-7f3adc000000 ---p 00000000 00:00 0 
7f3adc000000-7f3adffff000 rw-p 00000000 00:00 0 
7f3adffff000-7f3ae0000000 ---p 00000000 00:00 0 
7f3ae4000000-7f3ae65d3000 rw-p 00000000 00:00 0 
7f3ae65d3000-7f3ae8000000 ---p 00000000 00:00 0 
7f3ae8000000-7f3aec000000 rw-p 00000000 00:00 0 
7f3aec000000-7f3aec6ea000 rw-p 00000000 00:00 0 
7f3aec6ea000-7f3af0000000 ---p 00000000 00:00 0 
7f3af4000000-7f3af8000000 rw-p 00000000 00:00 0 
7f3afc000000-7f3aff89e000 rw-p 00000000 00:00 0 
7f3aff89e000-7f3b00000000 ---p 00000000 00:00 0 
7f3b04000000-7f3b044ac000 rw-p 00000000 00:00 0 
7f3b044ac000-7f3b08000000 ---p 00000000 00:00 0 
7f3b08000000-7f3b0bfea000 rw-p 00000000 00:00 0 
7f3b0bfea000-7f3b0c000000 ---p 00000000 00:00 0 
7f3b0c000000-7f3b0ecf8000 rw-p 00000000 00:00 0 
7f3b0ecf8000-7f3b10000000 ---p 00000000 00:00 0 
7f3b10000000-7f3b14000000 rw-p 00000000 00:00 0 
7f3b14000000-7f3b157b3000 rw-p 00000000 00:00 0 
7f3b157b3000-7f3b18000000 ---p 00000000 00:00 0 
7f3b18000000-7f3b1ba03000 rw-p 00000000 00:00 0 
7f3b1ba03000-7f3b1c000000 ---p 00000000 00:00 0 
7f3b1c000000-7f3b1ffff000 rw-p 00000000 00:00 0 
7f3b1ffff000-7f3b20000000 ---p 00000000 00:00 0 
7f3b20000000-7f3b2206e000 rw-p 00000000 00:00 0 
7f3b2206e000-7f3b24000000 ---p 00000000 00:00 0 
7f3b24000000-7f3b27fee000 rw-p 00000000 00:00 0 
7f3b27fee000-7f3b28000000 ---p 00000000 00:00 0 
7f3b28000000-7f3b2da02000 rw-p 00000000 00:00 0 
7f3b2da02000-7f3b30000000 ---p 00000000 00:00 0 
7f3b30000000-7f3b35b9c000 rw-p 00000000 00:00 0 
7f3b35b9c000-7f3b38000000 ---p 00000000 00:00 0 
7f3b38000000-7f3b3bfff000 rw-p 00000000 00:00 0 
7f3b3bfff000-7f3b3c000000 ---p 00000000 00:00 0 
7f3b3c000000-7f3b3d0aa000 rw-p 00000000 00:00 0 
7f3b3d0aa000-7f3b40000000 ---p 00000000 00:00 0 
7f3b40000000-7f3b43ffe000 rw-p 00000000 00:00 0 
7f3b43ffe000-7f3b44000000 ---p 00000000 00:00 0 
7f3b44000000-7f3b45913000 rw-p 00000000 00:00 0 
7f3b45913000-7f3b48000000 ---p 00000000 00:00 0 
7f3b48000000-7f3b4bff3000 rw-p 00000000 00:00 0 
7f3b4bff3000-7f3b4c000000 ---p 00000000 00:00 0 
7f3b4c000000-7f3b4cfaf000 rw-p 00000000 00:00 0 
7f3b4cfaf000-7f3b50000000 ---p 00000000 00:00 0 
7f3b50000000-7f3b53fe8000 rw-p 00000000 00:00 0 
7f3b53fe8000-7f3b54000000 ---p 00000000 00:00 0 
7f3b54000000-7f3b55335000 rw-p 00000000 00:00 0 
7f3b55335000-7f3b58000000 ---p 00000000 00:00 0 
7f3b58000000-7f3b5bffe000 rw-p 00000000 00:00 0 
7f3b5bffe000-7f3b5c000000 ---p 00000000 00:00 0 
7f3b5c000000-7f3b5d9c7000 rw-p 00000000 00:00 0 
7f3b5d9c7000-7f3b60000000 ---p 00000000 00:00 0 
7f3b60000000-7f3b6449b000 rw-p 00000000 00:00 0 
7f3b6449b000-7f3b68000000 ---p 00000000 00:00 0 
7f3b68000000-7f3b6bffe000 rw-p 00000000 00:00 0 
7f3b6bffe000-7f3b6c000000 ---p 00000000 00:00 0 
7f3b6c000000-7f3b6fffb000 rw-p 00000000 00:00 0 
7f3b6fffb000-7f3b70000000 ---p 00000000 00:00 0 
7f3b70000000-7f3b73ffd000 rw-p 00000000 00:00 0 
7f3b73ffd000-7f3b74000000 ---p 00000000 00:00 0 
7f3b74000000-7f3b74f84000 rw-p 00000000 00:00 0 
7f3b74f84000-7f3b78000000 ---p 00000000 00:00 0 
7f3b78000000-7f3b7971b000 rw-p 00000000 00:00 0 
7f3b7971b000-7f3b7c000000 ---p 00000000 00:00 0 
7f3b7c000000-7f3b80000000 rw-p 00000000 00:00 0 
7f3b80000000-7f3b80ef3000 rw-p 00000000 00:00 0 
7f3b80ef3000-7f3b84000000 ---p 00000000 00:00 0 
7f3b84000000-7f3b87ffb000 rw-p 00000000 00:00 0 
7f3b87ffb000-7f3b88000000 ---p 00000000 00:00 0 
7f3b88000000-7f3b89ae5000 rw-p 00000000 00:00 0 
7f3b89ae5000-7f3b8c000000 ---p 00000000 00:00 0 
7f3b8c000000-7f3b90000000 rw-p 00000000 00:00 0 
7f3b90000000-7f3b90bbc000 rw-p 00000000 00:00 0 
7f3b90bbc000-7f3b94000000 ---p 00000000 00:00 0 
7f3b94000000-7f3b97fec000 rw-p 00000000 00:00 0 
7f3b97fec000-7f3b98000000 ---p 00000000 00:00 0 
7f3b98000000-7f3b99eb6000 rw-p 00000000 00:00 0 
7f3b99eb6000-7f3b9c000000 ---p 00000000 00:00 0 
7f3b9c000000-7f3ba0000000 rw-p 00000000 00:00 0 
7f3ba0000000-7f3ba3c55000 rw-p 00000000 00:00 0 
7f3ba3c55000-7f3ba4000000 ---p 00000000 00:00 0 
7f3ba4000000-7f3ba7ff8000 rw-p 00000000 00:00 0 
7f3ba7ff8000-7f3ba8000000 ---p 00000000 00:00 0 
7f3ba8000000-7f3ba97a2000 rw-p 00000000 00:00 0 
7f3ba97a2000-7f3bac000000 ---p 00000000 00:00 0 
7f3bac000000-7f3bb0000000 rw-p 00000000 00:00 0 
7f3bb0000000-7f3bb3ff1000 rw-p 00000000 00:00 0 
7f3bb3ff1000-7f3bb4000000 ---p 00000000 00:00 0 
7f3bb4000000-7f3bb7ffa000 rw-p 00000000 00:00 0 
7f3bb7ffa000-7f3bb8000000 ---p 00000000 00:00 0 
7f3bb8000000-7f3bbdaa5000 rw-p 00000000 00:00 0 
7f3bbdaa5000-7f3bc0000000 ---p 00000000 00:00 0 
7f3bc0000000-7f3bc3fec000 rw-p 00000000 00:00 0 
7f3bc3fec000-7f3bc4000000 ---p 00000000 00:00 0 
7f3bc4000000-7f3bc8000000 rw-p 00000000 00:00 0 
7f3bc8000000-7f3bca424000 rw-p 00000000 00:00 0 
7f3bca424000-7f3bcc000000 ---p 00000000 00:00 0 
7f3bcc000000-7f3bcffe7000 rw-p 00000000 00:00 0 
7f3bcffe7000-7f3bd0000000 ---p 00000000 00:00 0 
7f3bd0000000-7f3bd4000000 rw-p 00000000 00:00 0 
7f3bd75f2000-7f3bd76f9000 rw-p 00000000 00:00 0 
7f3bdc000000-7f3bdfff0000 rw-p 00000000 00:00 0 
7f3bdfff0000-7f3be0000000 ---p 00000000 00:00 0 
7f3be0000000-7f3be3fff000 rw-p 00000000 00:00 0 
7f3be3fff000-7f3be4000000 ---p 00000000 00:00 0 
7f3be4000000-7f3be7fea000 rw-p 00000000 00:00 0 
7f3be7fea000-7f3be8000000 ---p 00000000 00:00 0 
7f3be8000000-7f3bebfe5000 rw-p 00000000 00:00 0 
7f3bebfe5000-7f3bec000000 ---p 00000000 00:00 0 
7f3bec000000-7f3bec5f1000 rw-p 00000000 00:00 0 
7f3bec5f1000-7f3bf0000000 ---p 00000000 00:00 0 
7f3bf0000000-7f3bf6baa000 rw-p 00000000 00:00 0 
7f3bf6baa000-7f3bf8000000 ---p 00000000 00:00 0 
7f3bf8000000-7f3bfdb93000 rw-p 00000000 00:00 0 
7f3bfdb93000-7f3c00000000 ---p 00000000 00:00 0 
7f3c00000000-7f3c00dc2000 rw-p 00000000 00:00 0 
7f3c00dc2000-7f3c04000000 ---p 00000000 00:00 0 
7f3c04000000-7f3c07fe7000 rw-p 00000000 00:00 0 
7f3c07fe7000-7f3c08000000 ---p 00000000 00:00 0 
7f3c08000000-7f3c0bfe9000 rw-p 00000000 00:00 0 
7f3c0bfe9000-7f3c0c000000 ---p 00000000 00:00 0 
7f3c0c000000-7f3c114df000 rw-p 00000000 00:00 0 
7f3c114df000-7f3c14000000 ---p 00000000 00:00 0 
7f3c14000000-7f3c17fe5000 rw-p 00000000 00:00 0 
7f3c17fe5000-7f3c18000000 ---p 00000000 00:00 0 
7f3c18000000-7f3c1bffd000 rw-p 00000000 00:00 0 
7f3c1bffd000-7f3c1c000000 ---p 00000000 00:00 0 
7f3c1c000000-7f3c1d72c000 rw-p 00000000 00:00 0 
7f3c1d72c000-7f3c20000000 ---p 00000000 00:00 0 
7f3c20000000-7f3c27fef000 rw-p 00000000 00:00 0 
7f3c27fef000-7f3c28000000 ---p 00000000 00:00 0 
7f3c28000000-7f3c2a351000 rw-p 00000000 00:00 0 
7f3c2a351000-7f3c2c000000 ---p 00000000 00:00 0 
7f3c2c000000-7f3c2fff9000 rw-p 00000000 00:00 0 
7f3c2fff9000-7f3c30000000 ---p 00000000 00:00 0 
7f3c30000000-7f3c33feb000 rw-p 00000000 00:00 0 
7f3c33feb000-7f3c34000000 ---p 00000000 00:00 0 
7f3c34000000-7f3c37ffc000 rw-p 00000000 00:00 0 
7f3c37ffc000-7f3c38000000 ---p 00000000 00:00 0 
7f3c38000000-7f3c3bff5000 rw-p 00000000 00:00 0 
7f3c3bff5000-7f3c3c000000 ---p 00000000 00:00 0 
7f3c3c000000-7f3c3e2d9000 rw-p 00000000 00:00 0 
7f3c3e2d9000-7f3c40000000 ---p 00000000 00:00 0 
7f3c40000000-7f3c44000000 rw-p 00000000 00:00 0 
7f3c44000000-7f3c454cf000 rw-p 00000000 00:00 0 
7f3c454cf000-7f3c48000000 ---p 00000000 00:00 0 
7f3c48000000-7f3c4bfed000 rw-p 00000000 00:00 0 
7f3c4bfed000-7f3c4c000000 ---p 00000000 00:00 0 
7f3c4c000000-7f3c4ffff000 rw-p 00000000 00:00 0 
7f3c4ffff000-7f3c50000000 ---p 00000000 00:00 0 
7f3c52a84000-7f3c52aa9000 r-xp 00000000 fd:00 204541779                  /tmp/gen8136891335557719587.so
7f3c52aa9000-7f3c52ca9000 ---p 00025000 fd:00 204541779                  /tmp/gen8136891335557719587.so
7f3c52ca9000-7f3c52caa000 r--p 00025000 fd:00 204541779                  /tmp/gen8136891335557719587.so
7f3c52caa000-7f3c52cab000 rw-p 00026000 fd:00 204541779                  /tmp/gen8136891335557719587.so
7f3c52cab000-7f3c52ccf000 r-xp 00000000 fd:00 204541778                  /tmp/gen2722704989315570404.so
7f3c52ccf000-7f3c52ece000 ---p 00024000 fd:00 204541778                  /tmp/gen2722704989315570404.so
7f3c52ece000-7f3c52ecf000 r--p 00023000 fd:00 204541778                  /tmp/gen2722704989315570404.so
7f3c52ecf000-7f3c52ed0000 rw-p 00024000 fd:00 204541778                  /tmp/gen2722704989315570404.so
7f3c52ed0000-7f3c52ef5000 r-xp 00000000 fd:00 204541777                  /tmp/gen7687789510337332872.so
7f3c52ef5000-7f3c530f5000 ---p 00025000 fd:00 204541777                  /tmp/gen7687789510337332872.so
7f3c530f5000-7f3c530f6000 r--p 00025000 fd:00 204541777                  /tmp/gen7687789510337332872.so
7f3c530f6000-7f3c530f7000 rw-p 00026000 fd:00 204541777                  /tmp/gen7687789510337332872.so
7f3c530f7000-7f3c5311b000 r-xp 00000000 fd:00 204541776                  /tmp/gen6720197771379105406.so
7f3c5311b000-7f3c5331a000 ---p 00024000 fd:00 204541776                  /tmp/gen6720197771379105406.so
7f3c5331a000-7f3c5331b000 r--p 00023000 fd:00 204541776                  /tmp/gen6720197771379105406.so
7f3c5331b000-7f3c5331c000 rw-p 00024000 fd:00 204541776                  /tmp/gen6720197771379105406.so
7f3c5331c000-7f3c53341000 r-xp 00000000 fd:00 204541775                  /tmp/gen18356338239558017676.so
7f3c53341000-7f3c53541000 ---p 00025000 fd:00 204541775                  /tmp/gen18356338239558017676.so
7f3c53541000-7f3c53542000 r--p 00025000 fd:00 204541775                  /tmp/gen18356338239558017676.so
7f3c53542000-7f3c53543000 rw-p 00026000 fd:00 204541775                  /tmp/gen18356338239558017676.so
7f3c53543000-7f3c53567000 r-xp 00000000 fd:00 204541774                  /tmp/gen15123410144648658336.so
7f3c53567000-7f3c53766000 ---p 00024000 fd:00 204541774                  /tmp/gen15123410144648658336.so
7f3c53766000-7f3c53767000 r--p 00023000 fd:00 204541774                  /tmp/gen15123410144648658336.so
7f3c53767000-7f3c53768000 rw-p 00024000 fd:00 204541774                  /tmp/gen15123410144648658336.so
7f3c53768000-7f3c5378d000 r-xp 00000000 fd:00 204541773                  /tmp/gen2378990391033827870.so
7f3c5378d000-7f3c5398d000 ---p 00025000 fd:00 204541773                  /tmp/gen2378990391033827870.so
7f3c5398d000-7f3c5398e000 r--p 00025000 fd:00 204541773                  /tmp/gen2378990391033827870.so
7f3c5398e000-7f3c5398f000 rw-p 00026000 fd:00 204541773                  /tmp/gen2378990391033827870.so
7f3c5398f000-7f3c539b3000 r-xp 00000000 fd:00 204541772                  /tmp/gen5512651404585235070.so
7f3c539b3000-7f3c53bb2000 ---p 00024000 fd:00 204541772                  /tmp/gen5512651404585235070.so
7f3c53bb2000-7f3c53bb3000 r--p 00023000 fd:00 204541772                  /tmp/gen5512651404585235070.so
7f3c53bb3000-7f3c53bb4000 rw-p 00024000 fd:00 204541772                  /tmp/gen5512651404585235070.so
7f3c53bb4000-7f3c53bd9000 r-xp 00000000 fd:00 204541771                  /tmp/gen3559836419032744863.so
7f3c53bd9000-7f3c53dd9000 ---p 00025000 fd:00 204541771                  /tmp/gen3559836419032744863.so
7f3c53dd9000-7f3c53dda000 r--p 00025000 fd:00 204541771                  /tmp/gen3559836419032744863.so
7f3c53dda000-7f3c53ddb000 rw-p 00026000 fd:00 204541771                  /tmp/gen3559836419032744863.so
7f3c53ddb000-7f3c53dff000 r-xp 00000000 fd:00 204541770                  /tmp/gen12077052726330400819.so
7f3c53dff000-7f3c53ffe000 ---p 00024000 fd:00 204541770                  /tmp/gen12077052726330400819.so
7f3c53ffe000-7f3c53fff000 r--p 00023000 fd:00 204541770                  /tmp/gen12077052726330400819.so
7f3c53fff000-7f3c54000000 rw-p 00024000 fd:00 204541770                  /tmp/gen12077052726330400819.so
7f3c54000000-7f3c5568f000 rw-p 00000000 00:00 0 
7f3c5568f000-7f3c58000000 ---p 00000000 00:00 0 
7f3c5c000000-7f3c61677000 rw-p 00000000 00:00 0 
7f3c61677000-7f3c64000000 ---p 00000000 00:00 0 
7f3c64000000-7f3c6410d000 rw-p 00000000 00:00 0 
7f3c6410d000-7f3c68000000 ---p 00000000 00:00 0 
7f3c68000000-7f3c6bffe000 rw-p 00000000 00:00 0 
7f3c6bffe000-7f3c6c000000 ---p 00000000 00:00 0 
7f3c6c000000-7f3c70000000 rw-p 00000000 00:00 0 
7f3c70000000-7f3c71ab6000 rw-p 00000000 00:00 0 
7f3c71ab6000-7f3c74000000 ---p 00000000 00:00 0 
7f3c74000000-7f3c78000000 rw-p 00000000 00:00 0 
7f3c78000000-7f3c79256000 rw-p 00000000 00:00 0 
7f3c79256000-7f3c7c000000 ---p 00000000 00:00 0 
7f3c7c000000-7f3c7ffe6000 rw-p 00000000 00:00 0 
7f3c7ffe6000-7f3c80000000 ---p 00000000 00:00 0 
7f3c80000000-7f3c84000000 rw-p 00000000 00:00 0 
7f3c84000000-7f3c84f1c000 rw-p 00000000 00:00 0 
7f3c84f1c000-7f3c88000000 ---p 00000000 00:00 0 
7f3c88000000-7f3c8c000000 rw-p 00000000 00:00 0 
7f3c8c000000-7f3c8da6c000 rw-p 00000000 00:00 0 
7f3c8da6c000-7f3c90000000 ---p 00000000 00:00 0 
7f3c90000000-7f3c94000000 rw-p 00000000 00:00 0 
7f3c94000000-7f3c98000000 rw-p 00000000 00:00 0 
7f3c98000000-7f3c9c000000 rw-p 00000000 00:00 0 
7f3c9c000000-7f3c9cea9000 rw-p 00000000 00:00 0 
7f3c9cea9000-7f3ca0000000 ---p 00000000 00:00 0 
7f3ca0000000-7f3ca4000000 rw-p 00000000 00:00 0 
7f3ca4000000-7f3ca4105000 rw-p 00000000 00:00 0 
7f3ca4105000-7f3ca8000000 ---p 00000000 00:00 0 
7f3ca9fc5000-7f3ca9fea000 r-xp 00000000 fd:00 204541769                  /tmp/gen17400118796886508305.so
7f3ca9fea000-7f3caa1ea000 ---p 00025000 fd:00 204541769                  /tmp/gen17400118796886508305.so
7f3caa1ea000-7f3caa1eb000 r--p 00025000 fd:00 204541769                  /tmp/gen17400118796886508305.so
7f3caa1eb000-7f3caa1ec000 rw-p 00026000 fd:00 204541769                  /tmp/gen17400118796886508305.so
7f3caa1ec000-7f3caa210000 r-xp 00000000 fd:00 204541768                  /tmp/gen4799688910543139750.so
7f3caa210000-7f3caa40f000 ---p 00024000 fd:00 204541768                  /tmp/gen4799688910543139750.so
7f3caa40f000-7f3caa410000 r--p 00023000 fd:00 204541768                  /tmp/gen4799688910543139750.so
7f3caa410000-7f3caa411000 rw-p 00024000 fd:00 204541768                  /tmp/gen4799688910543139750.so
7f3caa411000-7f3caa436000 r-xp 00000000 fd:00 204541767                  /tmp/gen14943201918046745733.so
7f3caa436000-7f3caa636000 ---p 00025000 fd:00 204541767                  /tmp/gen14943201918046745733.so
7f3caa636000-7f3caa637000 r--p 00025000 fd:00 204541767                  /tmp/gen14943201918046745733.so
7f3caa637000-7f3caa638000 rw-p 00026000 fd:00 204541767                  /tmp/gen14943201918046745733.so
7f3caa638000-7f3caa65c000 r-xp 00000000 fd:00 204541766                  /tmp/gen5754339714870578107.so
7f3caa65c000-7f3caa85b000 ---p 00024000 fd:00 204541766                  /tmp/gen5754339714870578107.so
7f3caa85b000-7f3caa85c000 r--p 00023000 fd:00 204541766                  /tmp/gen5754339714870578107.so
7f3caa85c000-7f3caa85d000 rw-p 00024000 fd:00 204541766                  /tmp/gen5754339714870578107.so
7f3caa85d000-7f3caa882000 r-xp 00000000 fd:00 204541765                  /tmp/gen12762430247040992573.so
7f3caa882000-7f3caaa82000 ---p 00025000 fd:00 204541765                  /tmp/gen12762430247040992573.so
7f3caaa82000-7f3caaa83000 r--p 00025000 fd:00 204541765                  /tmp/gen12762430247040992573.so
7f3caaa83000-7f3caaa84000 rw-p 00026000 fd:00 204541765                  /tmp/gen12762430247040992573.so
7f3caaa84000-7f3caaaa8000 r-xp 00000000 fd:00 204541764                  /tmp/gen5581545796449649536.so
7f3caaaa8000-7f3caaca7000 ---p 00024000 fd:00 204541764                  /tmp/gen5581545796449649536.so
7f3caaca7000-7f3caaca8000 r--p 00023000 fd:00 204541764                  /tmp/gen5581545796449649536.so
7f3caaca8000-7f3caaca9000 rw-p 00024000 fd:00 204541764                  /tmp/gen5581545796449649536.so
7f3caaca9000-7f3caacce000 r-xp 00000000 fd:00 204541763                  /tmp/gen17974890867687150816.so
7f3caacce000-7f3caaece000 ---p 00025000 fd:00 204541763                  /tmp/gen17974890867687150816.so
7f3caaece000-7f3caaecf000 r--p 00025000 fd:00 204541763                  /tmp/gen17974890867687150816.so
7f3caaecf000-7f3caaed0000 rw-p 00026000 fd:00 204541763                  /tmp/gen17974890867687150816.so
7f3caaed0000-7f3caaef4000 r-xp 00000000 fd:00 204541762                  /tmp/gen10498180505056228773.so
7f3caaef4000-7f3cab0f3000 ---p 00024000 fd:00 204541762                  /tmp/gen10498180505056228773.so
7f3cab0f3000-7f3cab0f4000 r--p 00023000 fd:00 204541762                  /tmp/gen10498180505056228773.so
7f3cab0f4000-7f3cab0f5000 rw-p 00024000 fd:00 204541762                  /tmp/gen10498180505056228773.so
7f3cab0f5000-7f3cab11a000 r-xp 00000000 fd:00 204541761                  /tmp/gen571111816248040119.so
7f3cab11a000-7f3cab31a000 ---p 00025000 fd:00 204541761                  /tmp/gen571111816248040119.so
7f3cab31a000-7f3cab31b000 r--p 00025000 fd:00 204541761                  /tmp/gen571111816248040119.so
7f3cab31b000-7f3cab31c000 rw-p 00026000 fd:00 204541761                  /tmp/gen571111816248040119.so
7f3cab31c000-7f3cab340000 r-xp 00000000 fd:00 204541760                  /tmp/gen5617639221387250787.so
7f3cab340000-7f3cab53f000 ---p 00024000 fd:00 204541760                  /tmp/gen5617639221387250787.so
7f3cab53f000-7f3cab540000 r--p 00023000 fd:00 204541760                  /tmp/gen5617639221387250787.so
7f3cab540000-7f3cab541000 rw-p 00024000 fd:00 204541760                  /tmp/gen5617639221387250787.so
7f3cab541000-7f3cab566000 r-xp 00000000 fd:00 204541759                  /tmp/gen12310533469075612634.so
7f3cab566000-7f3cab766000 ---p 00025000 fd:00 204541759                  /tmp/gen12310533469075612634.so
7f3cab766000-7f3cab767000 r--p 00025000 fd:00 204541759                  /tmp/gen12310533469075612634.so
7f3cab767000-7f3cab768000 rw-p 00026000 fd:00 204541759                  /tmp/gen12310533469075612634.so
7f3cab768000-7f3cab78c000 r-xp 00000000 fd:00 204541758                  /tmp/gen16458146169749657797.so
7f3cab78c000-7f3cab98b000 ---p 00024000 fd:00 204541758                  /tmp/gen16458146169749657797.so
7f3cab98b000-7f3cab98c000 r--p 00023000 fd:00 204541758                  /tmp/gen16458146169749657797.so
7f3cab98c000-7f3cab98d000 rw-p 00024000 fd:00 204541758                  /tmp/gen16458146169749657797.so
7f3cab98d000-7f3cab9b2000 r-xp 00000000 fd:00 204541757                  /tmp/gen13852025130354446384.so
7f3cab9b2000-7f3cabbb2000 ---p 00025000 fd:00 204541757                  /tmp/gen13852025130354446384.so
7f3cabbb2000-7f3cabbb3000 r--p 00025000 fd:00 204541757                  /tmp/gen13852025130354446384.so
7f3cabbb3000-7f3cabbb4000 rw-p 00026000 fd:00 204541757                  /tmp/gen13852025130354446384.so
7f3cabbb4000-7f3cabbd8000 r-xp 00000000 fd:00 204541756                  /tmp/gen11486867734617941510.so
7f3cabbd8000-7f3cabdd7000 ---p 00024000 fd:00 204541756                  /tmp/gen11486867734617941510.so
7f3cabdd7000-7f3cabdd8000 r--p 00023000 fd:00 204541756                  /tmp/gen11486867734617941510.so
7f3cabdd8000-7f3cabdd9000 rw-p 00024000 fd:00 204541756                  /tmp/gen11486867734617941510.so
7f3cabdd9000-7f3cabdfe000 r-xp 00000000 fd:00 204541755                  /tmp/gen14681558039455612221.so
7f3cabdfe000-7f3cabffe000 ---p 00025000 fd:00 204541755                  /tmp/gen14681558039455612221.so
7f3cabffe000-7f3cabfff000 r--p 00025000 fd:00 204541755                  /tmp/gen14681558039455612221.so
7f3cabfff000-7f3cac000000 rw-p 00026000 fd:00 204541755                  /tmp/gen14681558039455612221.so
7f3cac000000-7f3cace86000 rw-p 00000000 00:00 0 
7f3cace86000-7f3cb0000000 ---p 00000000 00:00 0 
7f3cb0000000-7f3cb124b000 rw-p 00000000 00:00 0 
7f3cb124b000-7f3cb4000000 ---p 00000000 00:00 0 
7f3cb4000000-7f3cb7fff000 rw-p 00000000 00:00 0 
7f3cb7fff000-7f3cb8000000 ---p 00000000 00:00 0 
7f3cb8000000-7f3cba80d000 rw-p 00000000 00:00 0 
7f3cba80d000-7f3cbc000000 ---p 00000000 00:00 0 
7f3cbc000000-7f3cbffea000 rw-p 00000000 00:00 0 
7f3cbffea000-7f3cc0000000 ---p 00000000 00:00 0 
7f3cc0000000-7f3cc4000000 rw-p 00000000 00:00 0 
7f3cc4000000-7f3cc41b5000 rw-p 00000000 00:00 0 
7f3cc41b5000-7f3cc8000000 ---p 00000000 00:00 0 
7f3cc8000000-7f3cc90db000 rw-p 00000000 00:00 0 
7f3cc90db000-7f3ccc000000 ---p 00000000 00:00 0 
7f3ccc000000-7f3ccc0cd000 rw-p 00000000 00:00 0 
7f3ccc0cd000-7f3cd0000000 ---p 00000000 00:00 0 
7f3cd0000000-7f3cd0127000 rw-p 00000000 00:00 0 
7f3cd0127000-7f3cd4000000 ---p 00000000 00:00 0 
7f3cd4000000-7f3cd8000000 rw-p 00000000 00:00 0 
7f3cd8000000-7f3cd92d8000 rw-p 00000000 00:00 0 
7f3cd92d8000-7f3cdc000000 ---p 00000000 00:00 0 
7f3cdc000000-7f3cdc0d1000 rw-p 00000000 00:00 0 
7f3cdc0d1000-7f3ce0000000 ---p 00000000 00:00 0 
7f3ce0000000-7f3ce11dc000 rw-p 00000000 00:00 0 
7f3ce11dc000-7f3ce4000000 ---p 00000000 00:00 0 
7f3ce4000000-7f3ce755f000 rw-p 00000000 00:00 0 
7f3ce755f000-7f3ce8000000 ---p 00000000 00:00 0 
7f3ce8000000-7f3cebff4000 rw-p 00000000 00:00 0 
7f3cebff4000-7f3cec000000 ---p 00000000 00:00 0 
7f3cec000000-7f3cec18b000 rw-p 00000000 00:00 0 
7f3cec18b000-7f3cf0000000 ---p 00000000 00:00 0 
7f3cf0000000-7f3cf1a34000 rw-p 00000000 00:00 0 
7f3cf1a34000-7f3cf4000000 ---p 00000000 00:00 0 
7f3cf4000000-7f3cf7ffc000 rw-p 00000000 00:00 0 
7f3cf7ffc000-7f3cf8000000 ---p 00000000 00:00 0 
7f3cf8000000-7f3cf8e21000 rw-p 00000000 00:00 0 
7f3cf8e21000-7f3cfc000000 ---p 00000000 00:00 0 
7f3cfc000000-7f3cfce02000 rw-p 00000000 00:00 0 
7f3cfce02000-7f3d00000000 ---p 00000000 00:00 0 
7f3d00000000-7f3d01329000 rw-p 00000000 00:00 0 
7f3d01329000-7f3d04000000 ---p 00000000 00:00 0 
7f3d04000000-7f3d08000000 rw-p 00000000 00:00 0 
7f3d08000000-7f3d08e70000 rw-p 00000000 00:00 0 
7f3d08e70000-7f3d0c000000 ---p 00000000 00:00 0 
7f3d0c000000-7f3d0fff9000 rw-p 00000000 00:00 0 
7f3d0fff9000-7f3d10000000 ---p 00000000 00:00 0 
7f3d10000000-7f3d11093000 rw-p 00000000 00:00 0 
7f3d11093000-7f3d14000000 ---p 00000000 00:00 0 
7f3d14000000-7f3d17ff9000 rw-p 00000000 00:00 0 
7f3d17ff9000-7f3d18000000 ---p 00000000 00:00 0 
7f3d18000000-7f3d18c6b000 rw-p 00000000 00:00 0 
7f3d18c6b000-7f3d1c000000 ---p 00000000 00:00 0 
7f3d1c000000-7f3d1ce16000 rw-p 00000000 00:00 0 
7f3d1ce16000-7f3d20000000 ---p 00000000 00:00 0 
7f3d20000000-7f3d23fff000 rw-p 00000000 00:00 0 
7f3d23fff000-7f3d24000000 ---p 00000000 00:00 0 
7f3d24000000-7f3d24ed8000 rw-p 00000000 00:00 0 
7f3d24ed8000-7f3d28000000 ---p 00000000 00:00 0 
7f3d28000000-7f3d28ecd000 rw-p 00000000 00:00 0 
7f3d28ecd000-7f3d2c000000 ---p 00000000 00:00 0 
7f3d2c000000-7f3d2c118000 rw-p 00000000 00:00 0 
7f3d2c118000-7f3d30000000 ---p 00000000 00:00 0 
7f3d30000000-7f3d30e14000 rw-p 00000000 00:00 0 
7f3d30e14000-7f3d34000000 ---p 00000000 00:00 0 
7f3d34000000-7f3d37fff000 rw-p 00000000 00:00 0 
7f3d37fff000-7f3d38000000 ---p 00000000 00:00 0 
7f3d38000000-7f3d38d98000 rw-p 00000000 00:00 0 
7f3d38d98000-7f3d3c000000 ---p 00000000 00:00 0 
7f3d3c000000-7f3d3c0d3000 rw-p 00000000 00:00 0 
7f3d3c0d3000-7f3d40000000 ---p 00000000 00:00 0 
7f3d40000000-7f3d41005000 rw-p 00000000 00:00 0 
7f3d41005000-7f3d44000000 ---p 00000000 00:00 0 
7f3d44000000-7f3d440f3000 rw-p 00000000 00:00 0 
7f3d440f3000-7f3d48000000 ---p 00000000 00:00 0 
7f3d48000000-7f3d4c000000 rw-p 00000000 00:00 0 
7f3d4c000000-7f3d50000000 rw-p 00000000 00:00 0 
7f3d50000000-7f3d54000000 rw-p 00000000 00:00 0 
7f3d54000000-7f3d57fff000 rw-p 00000000 00:00 0 
7f3d57fff000-7f3d58000000 ---p 00000000 00:00 0 
7f3d58000000-7f3d5c000000 rw-p 00000000 00:00 0 
7f3d5c000000-7f3d5c19f000 rw-p 00000000 00:00 0 
7f3d5c19f000-7f3d60000000 ---p 00000000 00:00 0 
7f3d60000000-7f3d63fea000 rw-p 00000000 00:00 0 
7f3d63fea000-7f3d64000000 ---p 00000000 00:00 0 
7f3d64000000-7f3d657f7000 rw-p 00000000 00:00 0 
7f3d657f7000-7f3d68000000 ---p 00000000 00:00 0 
7f3d68000000-7f3d6bfef000 rw-p 00000000 00:00 0 
7f3d6bfef000-7f3d6c000000 ---p 00000000 00:00 0 
7f3d6c000000-7f3d6d405000 rw-p 00000000 00:00 0 
7f3d6d405000-7f3d70000000 ---p 00000000 00:00 0 
7f3d70067000-7f3d7008b000 r-xp 00000000 fd:00 204541754                  /tmp/gen13702615208904204054.so
7f3d7008b000-7f3d7028a000 ---p 00024000 fd:00 204541754                  /tmp/gen13702615208904204054.so
7f3d7028a000-7f3d7028b000 r--p 00023000 fd:00 204541754                  /tmp/gen13702615208904204054.so
7f3d7028b000-7f3d7028c000 rw-p 00024000 fd:00 204541754                  /tmp/gen13702615208904204054.so
7f3d7028c000-7f3d702b1000 r-xp 00000000 fd:00 204541753                  /tmp/gen2582620540092514714.so
7f3d702b1000-7f3d704b1000 ---p 00025000 fd:00 204541753                  /tmp/gen2582620540092514714.so
7f3d704b1000-7f3d704b2000 r--p 00025000 fd:00 204541753                  /tmp/gen2582620540092514714.so
7f3d704b2000-7f3d704b3000 rw-p 00026000 fd:00 204541753                  /tmp/gen2582620540092514714.so
7f3d704b3000-7f3d704d7000 r-xp 00000000 fd:00 204541752                  /tmp/gen5166425670394559236.so
7f3d704d7000-7f3d706d6000 ---p 00024000 fd:00 204541752                  /tmp/gen5166425670394559236.so
7f3d706d6000-7f3d706d7000 r--p 00023000 fd:00 204541752                  /tmp/gen5166425670394559236.so
7f3d706d7000-7f3d706d8000 rw-p 00024000 fd:00 204541752                  /tmp/gen5166425670394559236.so
7f3d706d8000-7f3d706fd000 r-xp 00000000 fd:00 204541751                  /tmp/gen8369143369237217134.so
7f3d706fd000-7f3d708fd000 ---p 00025000 fd:00 204541751                  /tmp/gen8369143369237217134.so
7f3d708fd000-7f3d708fe000 r--p 00025000 fd:00 204541751                  /tmp/gen8369143369237217134.so
7f3d708fe000-7f3d708ff000 rw-p 00026000 fd:00 204541751                  /tmp/gen8369143369237217134.so
7f3d708ff000-7f3d70923000 r-xp 00000000 fd:00 204541750                  /tmp/gen6216290968214281048.so
7f3d70923000-7f3d70b22000 ---p 00024000 fd:00 204541750                  /tmp/gen6216290968214281048.so
7f3d70b22000-7f3d70b23000 r--p 00023000 fd:00 204541750                  /tmp/gen6216290968214281048.so
7f3d70b23000-7f3d70b24000 rw-p 00024000 fd:00 204541750                  /tmp/gen6216290968214281048.so
7f3d70b24000-7f3d70b49000 r-xp 00000000 fd:00 204541748                  /tmp/gen8782269204811516234.so
7f3d70b49000-7f3d70d49000 ---p 00025000 fd:00 204541748                  /tmp/gen8782269204811516234.so
7f3d70d49000-7f3d70d4a000 r--p 00025000 fd:00 204541748                  /tmp/gen8782269204811516234.so
7f3d70d4a000-7f3d70d4b000 rw-p 00026000 fd:00 204541748                  /tmp/gen8782269204811516234.so
7f3d70d4b000-7f3d70d6f000 r-xp 00000000 fd:00 204541747                  /tmp/gen18326766949291809808.so
7f3d70d6f000-7f3d70f6e000 ---p 00024000 fd:00 204541747                  /tmp/gen18326766949291809808.so
7f3d70f6e000-7f3d70f6f000 r--p 00023000 fd:00 204541747                  /tmp/gen18326766949291809808.so
7f3d70f6f000-7f3d70f70000 rw-p 00024000 fd:00 204541747                  /tmp/gen18326766949291809808.so
7f3d70f70000-7f3d70f95000 r-xp 00000000 fd:00 204541746                  /tmp/gen14838577997781434671.so
7f3d70f95000-7f3d71195000 ---p 00025000 fd:00 204541746                  /tmp/gen14838577997781434671.so
7f3d71195000-7f3d71196000 r--p 00025000 fd:00 204541746                  /tmp/gen14838577997781434671.so
7f3d71196000-7f3d71197000 rw-p 00026000 fd:00 204541746                  /tmp/gen14838577997781434671.so
7f3d71197000-7f3d711bb000 r-xp 00000000 fd:00 204541745                  /tmp/gen11662712428510466057.so
7f3d711bb000-7f3d713ba000 ---p 00024000 fd:00 204541745                  /tmp/gen11662712428510466057.so
7f3d713ba000-7f3d713bb000 r--p 00023000 fd:00 204541745                  /tmp/gen11662712428510466057.so
7f3d713bb000-7f3d713bc000 rw-p 00024000 fd:00 204541745                  /tmp/gen11662712428510466057.so
7f3d713bc000-7f3d713e1000 r-xp 00000000 fd:00 201482873                  /tmp/gen6374349621296601782.so
7f3d713e1000-7f3d715e1000 ---p 00025000 fd:00 201482873                  /tmp/gen6374349621296601782.so
7f3d715e1000-7f3d715e2000 r--p 00025000 fd:00 201482873                  /tmp/gen6374349621296601782.so
7f3d715e2000-7f3d715e3000 rw-p 00026000 fd:00 201482873                  /tmp/gen6374349621296601782.so
7f3d715e3000-7f3d715e7000 ---p 00000000 00:00 0 
7f3d715e7000-7f3d716e4000 rw-p 00000000 00:00 0 
7f3d716f5000-7f3d71719000 r-xp 00000000 fd:00 201482872                  /tmp/gen5704052107807489204.so
7f3d71719000-7f3d71918000 ---p 00024000 fd:00 201482872                  /tmp/gen5704052107807489204.so
7f3d71918000-7f3d71919000 r--p 00023000 fd:00 201482872                  /tmp/gen5704052107807489204.so
7f3d71919000-7f3d7191a000 rw-p 00024000 fd:00 201482872                  /tmp/gen5704052107807489204.so
7f3d7191a000-7f3d7193f000 r-xp 00000000 fd:00 201482871                  /tmp/gen32369967600440189.so
7f3d7193f000-7f3d71b3f000 ---p 00025000 fd:00 201482871                  /tmp/gen32369967600440189.so
7f3d71b3f000-7f3d71b40000 r--p 00025000 fd:00 201482871                  /tmp/gen32369967600440189.so
7f3d71b40000-7f3d71b41000 rw-p 00026000 fd:00 201482871                  /tmp/gen32369967600440189.so
7f3d71b41000-7f3d71b65000 r-xp 00000000 fd:00 201482870                  /tmp/gen11013810026605003345.so
7f3d71b65000-7f3d71d64000 ---p 00024000 fd:00 201482870                  /tmp/gen11013810026605003345.so
7f3d71d64000-7f3d71d65000 r--p 00023000 fd:00 201482870                  /tmp/gen11013810026605003345.so
7f3d71d65000-7f3d71d66000 rw-p 00024000 fd:00 201482870                  /tmp/gen11013810026605003345.so
7f3d71d66000-7f3d71d8b000 r-xp 00000000 fd:00 201482869                  /tmp/gen4291744509046785710.so
7f3d71d8b000-7f3d71f8b000 ---p 00025000 fd:00 201482869                  /tmp/gen4291744509046785710.so
7f3d71f8b000-7f3d71f8c000 r--p 00025000 fd:00 201482869                  /tmp/gen4291744509046785710.so
7f3d71f8c000-7f3d71f8d000 rw-p 00026000 fd:00 201482869                  /tmp/gen4291744509046785710.so
7f3d71f8d000-7f3d71fb1000 r-xp 00000000 fd:00 201482868                  /tmp/gen18381484044704021169.so
7f3d71fb1000-7f3d721b0000 ---p 00024000 fd:00 201482868                  /tmp/gen18381484044704021169.so
7f3d721b0000-7f3d721b1000 r--p 00023000 fd:00 201482868                  /tmp/gen18381484044704021169.so
7f3d721b1000-7f3d721b2000 rw-p 00024000 fd:00 201482868                  /tmp/gen18381484044704021169.so
7f3d721b2000-7f3d721d7000 r-xp 00000000 fd:00 201482859                  /tmp/gen14679504798322221541.so
7f3d721d7000-7f3d723d7000 ---p 00025000 fd:00 201482859                  /tmp/gen14679504798322221541.so
7f3d723d7000-7f3d723d8000 r--p 00025000 fd:00 201482859                  /tmp/gen14679504798322221541.so
7f3d723d8000-7f3d723d9000 rw-p 00026000 fd:00 201482859                  /tmp/gen14679504798322221541.so
7f3d723d9000-7f3d723fd000 r-xp 00000000 fd:00 201482854                  /tmp/gen15453211210480891344.so
7f3d723fd000-7f3d725fc000 ---p 00024000 fd:00 201482854                  /tmp/gen15453211210480891344.so
7f3d725fc000-7f3d725fd000 r--p 00023000 fd:00 201482854                  /tmp/gen15453211210480891344.so
7f3d725fd000-7f3d725fe000 rw-p 00024000 fd:00 201482854                  /tmp/gen15453211210480891344.so
7f3d725fe000-7f3d72602000 ---p 00000000 00:00 0 
7f3d72602000-7f3d726ff000 rw-p 00000000 00:00 0 
7f3d726ff000-7f3d72703000 ---p 00000000 00:00 0 
7f3d72703000-7f3d72800000 rw-p 00000000 00:00 0 
7f3d72800000-7f3d72900000 rw-p 00000000 00:00 0 
7f3d72900000-7f3d72980000 rw-p 00000000 00:00 0 
7f3d72980000-7f3d729a0000 rw-p 00000000 00:00 0 
7f3d729a0000-7f3d72b00000 rw-p 00000000 00:00 0 
7f3d72b00000-7f3d72b40000 rw-p 00000000 00:00 0 
7f3d72b40000-7f3d72c60000 rw-p 00000000 00:00 0 
7f3d72c60000-7f3d73000000 ---p 00000000 00:00 0 
7f3d730c8000-7f3d730cc000 ---p 00000000 00:00 0 
7f3d730cc000-7f3d731c9000 rw-p 00000000 00:00 0 
7f3d731c9000-7f3d731cd000 ---p 00000000 00:00 0 
7f3d731cd000-7f3d732ca000 rw-p 00000000 00:00 0 
7f3d734ed000-7f3d734f1000 ---p 00000000 00:00 0 
7f3d734f1000-7f3d735ee000 rw-p 00000000 00:00 0 
7f3d735ee000-7f3d735f2000 ---p 00000000 00:00 0 
7f3d735f2000-7f3d736ef000 rw-p 00000000 00:00 0 
7f3d736ef000-7f3d736f3000 ---p 00000000 00:00 0 
7f3d736f3000-7f3d737f0000 rw-p 00000000 00:00 0 
7f3d737f0000-7f3d737f4000 ---p 00000000 00:00 0 
7f3d737f4000-7f3d738f1000 rw-p 00000000 00:00 0 
7f3d738f1000-7f3d738f5000 ---p 00000000 00:00 0 
7f3d738f5000-7f3d739f2000 rw-p 00000000 00:00 0 
7f3d739f2000-7f3d739f6000 ---p 00000000 00:00 0 
7f3d739f6000-7f3d73af3000 rw-p 00000000 00:00 0 
7f3d73af3000-7f3d73af7000 ---p 00000000 00:00 0 
7f3d73af7000-7f3d73bf4000 rw-p 00000000 00:00 0 
7f3d73bf4000-7f3d73bf8000 ---p 00000000 00:00 0 
7f3d73bf8000-7f3d73cf5000 rw-p 00000000 00:00 0 
7f3d73cf5000-7f3d73cf9000 ---p 00000000 00:00 0 
7f3d73cf9000-7f3d73df6000 rw-p 00000000 00:00 0 
7f3d73df6000-7f3d73dfa000 ---p 00000000 00:00 0 
7f3d73dfa000-7f3d73ef7000 rw-p 00000000 00:00 0 
7f3d73ef7000-7f3d73efb000 ---p 00000000 00:00 0 
7f3d73efb000-7f3d73ff8000 rw-p 00000000 00:00 0 
7f3d73ff8000-7f3d73ffc000 ---p 00000000 00:00 0 
7f3d73ffc000-7f3d740f9000 rw-p 00000000 00:00 0 
7f3d740f9000-7f3d740fd000 ---p 00000000 00:00 0 
7f3d740fd000-7f3d741fa000 rw-p 00000000 00:00 0 
7f3d741fa000-7f3d741fe000 ---p 00000000 00:00 0 
7f3d741fe000-7f3d742fb000 rw-p 00000000 00:00 0 
7f3d742fb000-7f3d742ff000 ---p 00000000 00:00 0 
7f3d742ff000-7f3d743fc000 rw-p 00000000 00:00 0 
7f3d743fc000-7f3d74400000 ---p 00000000 00:00 0 
7f3d74400000-7f3d744fd000 rw-p 00000000 00:00 0 
7f3d744fd000-7f3d74501000 ---p 00000000 00:00 0 
7f3d74501000-7f3d745fe000 rw-p 00000000 00:00 0 
7f3d745fe000-7f3d74602000 ---p 00000000 00:00 0 
7f3d74602000-7f3d746ff000 rw-p 00000000 00:00 0 
7f3d746ff000-7f3d74703000 ---p 00000000 00:00 0 
7f3d74703000-7f3d74800000 rw-p 00000000 00:00 0 
7f3d74800000-7f3d74810000 rw-p 00000000 00:00 0 
7f3d74810000-7f3d749c0000 rw-p 00000000 00:00 0 
7f3d749c0000-7f3d74a00000 rw-p 00000000 00:00 0 
7f3d74a00000-7f3d74d40000 rw-p 00000000 00:00 0 
7f3d74d40000-7f3d74d70000 rw-p 00000000 00:00 0 
7f3d74d70000-7f3d74f00000 rw-p 00000000 00:00 0 
7f3d74f00000-7f3d74fb0000 rw-p 00000000 00:00 0 
7f3d74fb0000-7f3d75000000 ---p 00000000 00:00 0 
7f3d750d9000-7f3d750dd000 ---p 00000000 00:00 0 
7f3d750dd000-7f3d751da000 rw-p 00000000 00:00 0 
7f3d751da000-7f3d751de000 ---p 00000000 00:00 0 
7f3d751de000-7f3d752db000 rw-p 00000000 00:00 0 
7f3d752db000-7f3d752df000 ---p 00000000 00:00 0 
7f3d752df000-7f3d753dc000 rw-p 00000000 00:00 0 
7f3d753dc000-7f3d753e0000 ---p 00000000 00:00 0 
7f3d753e0000-7f3d754dd000 rw-p 00000000 00:00 0 
7f3d754dd000-7f3d754e1000 ---p 00000000 00:00 0 
7f3d754e1000-7f3d755de000 rw-p 00000000 00:00 0 
7f3d755de000-7f3d755e2000 ---p 00000000 00:00 0 
7f3d755e2000-7f3d756df000 rw-p 00000000 00:00 0 
7f3d756df000-7f3d756e3000 ---p 00000000 00:00 0 
7f3d756e3000-7f3d757e0000 rw-p 00000000 00:00 0 
7f3d757e0000-7f3d757e4000 ---p 00000000 00:00 0 
7f3d757e4000-7f3d758e1000 rw-p 00000000 00:00 0 
7f3d758e1000-7f3d758e5000 ---p 00000000 00:00 0 
7f3d758e5000-7f3d759e2000 rw-p 00000000 00:00 0 
7f3d759e2000-7f3d759e6000 ---p 00000000 00:00 0 
7f3d759e6000-7f3d75ae3000 rw-p 00000000 00:00 0 
7f3d75ae3000-7f3d75ae7000 ---p 00000000 00:00 0 
7f3d75ae7000-7f3d75be4000 rw-p 00000000 00:00 0 
7f3d75be4000-7f3d75be8000 ---p 00000000 00:00 0 
7f3d75be8000-7f3d75ce5000 rw-p 00000000 00:00 0 
7f3d75ce5000-7f3d75ce9000 ---p 00000000 00:00 0 
7f3d75ce9000-7f3d75de6000 rw-p 00000000 00:00 0 
7f3d75de6000-7f3d75dea000 ---p 00000000 00:00 0 
7f3d75dea000-7f3d75ee7000 rw-p 00000000 00:00 0 
7f3d75ee7000-7f3d75eeb000 ---p 00000000 00:00 0 
7f3d75eeb000-7f3d75fe8000 rw-p 00000000 00:00 0 
7f3d75fe8000-7f3d75fec000 ---p 00000000 00:00 0 
7f3d75fec000-7f3d760e9000 rw-p 00000000 00:00 0 
7f3d760e9000-7f3d760ed000 ---p 00000000 00:00 0 
7f3d760ed000-7f3d761ea000 rw-p 00000000 00:00 0 
7f3d761ea000-7f3d761ee000 ---p 00000000 00:00 0 
7f3d761ee000-7f3d762eb000 rw-p 00000000 00:00 0 
7f3d762eb000-7f3d762ef000 ---p 00000000 00:00 0 
7f3d762ef000-7f3d763ec000 rw-p 00000000 00:00 0 
7f3d763ec000-7f3d763f0000 ---p 00000000 00:00 0 
7f3d763f0000-7f3d764ed000 rw-p 00000000 00:00 0 
7f3d764ed000-7f3d764f1000 ---p 00000000 00:00 0 
7f3d764f1000-7f3d765ee000 rw-p 00000000 00:00 0 
7f3d765ee000-7f3d765f2000 ---p 00000000 00:00 0 
7f3d765f2000-7f3d766ef000 rw-p 00000000 00:00 0 
7f3d766ef000-7f3d766f3000 ---p 00000000 00:00 0 
7f3d766f3000-7f3d767f0000 rw-p 00000000 00:00 0 
7f3d767f0000-7f3d767f4000 ---p 00000000 00:00 0 
7f3d767f4000-7f3d768f1000 rw-p 00000000 00:00 0 
7f3d768f1000-7f3d768f5000 ---p 00000000 00:00 0 
7f3d768f5000-7f3d769f2000 rw-p 00000000 00:00 0 
7f3d769f2000-7f3d769f6000 ---p 00000000 00:00 0 
7f3d769f6000-7f3d76af3000 rw-p 00000000 00:00 0 
7f3d76af3000-7f3d76af7000 ---p 00000000 00:00 0 
7f3d76af7000-7f3d76bf4000 rw-p 00000000 00:00 0 
7f3d76bf4000-7f3d76bf8000 ---p 00000000 00:00 0 
7f3d76bf8000-7f3d76cf5000 rw-p 00000000 00:00 0 
7f3d76cf5000-7f3d76cf9000 ---p 00000000 00:00 0 
7f3d76cf9000-7f3d76df6000 rw-p 00000000 00:00 0 
7f3d76df6000-7f3d76dfa000 ---p 00000000 00:00 0 
7f3d76dfa000-7f3d76ef7000 rw-p 00000000 00:00 0 
7f3d76ef7000-7f3d76efb000 ---p 00000000 00:00 0 
7f3d76efb000-7f3d76ff8000 rw-p 00000000 00:00 0 
7f3d76ff8000-7f3d76ffc000 ---p 00000000 00:00 0 
7f3d76ffc000-7f3d770f9000 rw-p 00000000 00:00 0 
7f3d770f9000-7f3d770fd000 ---p 00000000 00:00 0 
7f3d770fd000-7f3d771fa000 rw-p 00000000 00:00 0 
7f3d771fa000-7f3d771fe000 ---p 00000000 00:00 0 
7f3d771fe000-7f3d772fb000 rw-p 00000000 00:00 0 
7f3d772fb000-7f3d772ff000 ---p 00000000 00:00 0 
7f3d772ff000-7f3d773fc000 rw-p 00000000 00:00 0 
7f3d773fc000-7f3d77400000 ---p 00000000 00:00 0 
7f3d77400000-7f3d774fd000 rw-p 00000000 00:00 0 
7f3d774fd000-7f3d77501000 ---p 00000000 00:00 0 
7f3d77501000-7f3d775fe000 rw-p 00000000 00:00 0 
7f3d775fe000-7f3d77602000 ---p 00000000 00:00 0 
7f3d77602000-7f3d776ff000 rw-p 00000000 00:00 0 
7f3d776ff000-7f3d77703000 ---p 00000000 00:00 0 
7f3d77703000-7f3d77800000 rw-p 00000000 00:00 0 
7f3d77800000-7f3d77b00000 rw-p 00000000 00:00 0 
7f3d77b00000-7f3d77c00000 rw-p 00000000 00:00 0 
7f3d77c00000-7f3d77e00000 rw-p 00000000 00:00 0 
7f3d77e00000-7f3d78000000 rw-p 00000000 00:00 0 
7f3d78000000-7f3d7b2e5000 rw-p 00000000 00:00 0 
7f3d7b2e5000-7f3d7c000000 ---p 00000000 00:00 0 
7f3d7c000000-7f3d7d0e4000 rw-p 00000000 00:00 0 
7f3d7d0e4000-7f3d80000000 ---p 00000000 00:00 0 
7f3d80000000-7f3d83ff6000 rw-p 00000000 00:00 0 
7f3d83ff6000-7f3d84000000 ---p 00000000 00:00 0 
7f3d84000000-7f3d87ff0000 rw-p 00000000 00:00 0 
7f3d87ff0000-7f3d88000000 ---p 00000000 00:00 0 
7f3d88000000-7f3d8c000000 rw-p 00000000 00:00 0 
7f3d8c000000-7f3d90000000 rw-p 00000000 00:00 0 
7f3d90000000-7f3d94000000 rw-p 00000000 00:00 0 
7f3d94000000-7f3d98000000 rw-p 00000000 00:00 0 
7f3d98000000-7f3d9bff6000 rw-p 00000000 00:00 0 
7f3d9bff6000-7f3d9c000000 ---p 00000000 00:00 0 
7f3d9c000000-7f3d9ffff000 rw-p 00000000 00:00 0 
7f3d9ffff000-7f3da0000000 ---p 00000000 00:00 0 
7f3da0000000-7f3da4000000 rw-p 00000000 00:00 0 
7f3da4000000-7f3da618f000 rw-p 00000000 00:00 0 
7f3da618f000-7f3da8000000 ---p 00000000 00:00 0 
7f3da8000000-7f3da81a9000 rw-p 00000000 00:00 0 
7f3da81a9000-7f3dac000000 ---p 00000000 00:00 0 
7f3dac000000-7f3dacda9000 rw-p 00000000 00:00 0 
7f3dacda9000-7f3db0000000 ---p 00000000 00:00 0 
7f3db0000000-7f3db258b000 rw-p 00000000 00:00 0 
7f3db258b000-7f3db4000000 ---p 00000000 00:00 0 
7f3db4000000-7f3db52c0000 rw-p 00000000 00:00 0 
7f3db52c0000-7f3db8000000 ---p 00000000 00:00 0 
7f3db8000000-7f3dba76b000 rw-p 00000000 00:00 0 
7f3dba76b000-7f3dbc000000 ---p 00000000 00:00 0 
7f3dbc000000-7f3dc0000000 rw-p 00000000 00:00 0 
7f3dc0000000-7f3dc0021000 rw-p 00000000 00:00 0 
7f3dc0021000-7f3dc4000000 ---p 00000000 00:00 0 
7f3dc4000000-7f3dc7ff7000 rw-p 00000000 00:00 0 
7f3dc7ff7000-7f3dc8000000 ---p 00000000 00:00 0 
7f3dc8000000-7f3dcc000000 rw-p 00000000 00:00 0 
7f3dcc072000-7f3dcc076000 ---p 00000000 00:00 0 
7f3dcc076000-7f3dcc173000 rw-p 00000000 00:00 0 
7f3dcc173000-7f3dcc175000 r-xp 00000000 fd:02 11970852                   /site/proj-service/3.0.0.19889/app/libprocaffinity.so
7f3dcc175000-7f3dcc374000 ---p 00002000 fd:02 11970852                   /site/proj-service/3.0.0.19889/app/libprocaffinity.so
7f3dcc374000-7f3dcc375000 rw-p 00001000 fd:02 11970852                   /site/proj-service/3.0.0.19889/app/libprocaffinity.so
7f3dcc375000-7f3dcc379000 ---p 00000000 00:00 0 
7f3dcc379000-7f3dcc476000 rw-p 00000000 00:00 0 
7f3dcc476000-7f3dcc47a000 ---p 00000000 00:00 0 
7f3dcc47a000-7f3dcc577000 rw-p 00000000 00:00 0 
7f3dcc577000-7f3dcc57b000 ---p 00000000 00:00 0 
7f3dcc57b000-7f3dcc678000 rw-p 00000000 00:00 0 
7f3dcc678000-7f3dcc67c000 r-xp 00000000 fd:02 11970853                   /site/proj-service/3.0.0.19889/app/libjetlang-epoll.so
7f3dcc67c000-7f3dcc87b000 ---p 00004000 fd:02 11970853                   /site/proj-service/3.0.0.19889/app/libjetlang-epoll.so
7f3dcc87b000-7f3dcc87c000 r--p 00003000 fd:02 11970853                   /site/proj-service/3.0.0.19889/app/libjetlang-epoll.so
7f3dcc87c000-7f3dcc87d000 rw-p 00004000 fd:02 11970853                   /site/proj-service/3.0.0.19889/app/libjetlang-epoll.so
7f3dcc87d000-7f3dcc881000 ---p 00000000 00:00 0 
7f3dcc881000-7f3dcc97e000 rw-p 00000000 00:00 0 
7f3dcc97e000-7f3dcc982000 ---p 00000000 00:00 0 
7f3dcc982000-7f3dcca7f000 rw-p 00000000 00:00 0 
7f3dcca7f000-7f3dcca83000 ---p 00000000 00:00 0 
7f3dcca83000-7f3dccb80000 rw-p 00000000 00:00 0 
7f3dccb80000-7f3dccb84000 ---p 00000000 00:00 0 
7f3dccb84000-7f3dccc81000 rw-p 00000000 00:00 0 
7f3dccc81000-7f3dccc85000 ---p 00000000 00:00 0 
7f3dccc85000-7f3dccd82000 rw-p 00000000 00:00 0 
7f3dccd82000-7f3dccd86000 ---p 00000000 00:00 0 
7f3dccd86000-7f3dcce83000 rw-p 00000000 00:00 0 
7f3dcce83000-7f3dcce87000 ---p 00000000 00:00 0 
7f3dcce87000-7f3dccf84000 rw-p 00000000 00:00 0 
7f3dccf84000-7f3dccf88000 ---p 00000000 00:00 0 
7f3dccf88000-7f3dcd085000 rw-p 00000000 00:00 0 
7f3dcd085000-7f3dcd089000 ---p 00000000 00:00 0 
7f3dcd089000-7f3dcd186000 rw-p 00000000 00:00 0 
7f3dcd186000-7f3dcd18a000 ---p 00000000 00:00 0 
7f3dcd18a000-7f3dcd287000 rw-p 00000000 00:00 0 
7f3dcd287000-7f3dcd28b000 ---p 00000000 00:00 0 
7f3dcd28b000-7f3dcd388000 rw-p 00000000 00:00 0 
7f3dcd388000-7f3dcd38c000 ---p 00000000 00:00 0 
7f3dcd38c000-7f3dcd489000 rw-p 00000000 00:00 0 
7f3dcd489000-7f3dcd48d000 ---p 00000000 00:00 0 
7f3dcd48d000-7f3dcd58a000 rw-p 00000000 00:00 0 
7f3dcd58a000-7f3dcd58e000 ---p 00000000 00:00 0 
7f3dcd58e000-7f3dcd68b000 rw-p 00000000 00:00 0 
7f3dcd68b000-7f3dcd702000 r-xp 00000000 fd:02 11970827                   /site/proj-service/3.0.0.19889/app/liblog4cplus-1.2.so.5.0.1
7f3dcd702000-7f3dcd902000 ---p 00077000 fd:02 11970827                   /site/proj-service/3.0.0.19889/app/liblog4cplus-1.2.so.5.0.1
7f3dcd902000-7f3dcd906000 r--p 00077000 fd:02 11970827                   /site/proj-service/3.0.0.19889/app/liblog4cplus-1.2.so.5.0.1
7f3dcd906000-7f3dcd908000 rw-p 0007b000 fd:02 11970827                   /site/proj-service/3.0.0.19889/app/liblog4cplus-1.2.so.5.0.1
7f3dcd908000-7f3dcd915000 r-xp 00000000 fd:02 11970832                   /site/proj-service/3.0.0.19889/app/libboguesjni.so
7f3dcd915000-7f3dcdb14000 ---p 0000d000 fd:02 11970832                   /site/proj-service/3.0.0.19889/app/libboguesjni.so
7f3dcdb14000-7f3dcdb15000 r--p 0000c000 fd:02 11970832                   /site/proj-service/3.0.0.19889/app/libboguesjni.so
7f3dcdb15000-7f3dcdb16000 rw-p 0000d000 fd:02 11970832                   /site/proj-service/3.0.0.19889/app/libboguesjni.so
7f3dcdb16000-7f3dcfc54000 r-xp 00000000 fd:02 11970835                   /site/proj-service/3.0.0.19889/app/libnumsjnirelease.so
7f3dcfc54000-7f3dcfe53000 ---p 0213e000 fd:02 11970835                   /site/proj-service/3.0.0.19889/app/libnumsjnirelease.so
7f3dcfe53000-7f3dcffc1000 r--p 0213d000 fd:02 11970835                   /site/proj-service/3.0.0.19889/app/libnumsjnirelease.so
7f3dcffc1000-7f3dcffde000 rw-p 022ab000 fd:02 11970835                   /site/proj-service/3.0.0.19889/app/libnumsjnirelease.so
7f3dcffde000-7f3dd0000000 rw-p 00000000 00:00 0 
7f3dd0000000-7f3dd3fed000 rw-p 00000000 00:00 0 
7f3dd3fed000-7f3dd4000000 ---p 00000000 00:00 0 
7f3dd4000000-7f3dd4e25000 rw-p 00000000 00:00 0 
7f3dd4e25000-7f3dd8000000 ---p 00000000 00:00 0 
7f3dd8000000-7f3dd91b6000 rw-p 00000000 00:00 0 
7f3dd91b6000-7f3ddc000000 ---p 00000000 00:00 0 
7f3ddc000000-7f3ddfff8000 rw-p 00000000 00:00 0 
7f3ddfff8000-7f3de0000000 ---p 00000000 00:00 0 
7f3de0000000-7f3de01ed000 rw-p 00000000 00:00 0 
7f3de01ed000-7f3de4000000 ---p 00000000 00:00 0 
7f3de4000000-7f3de7ff9000 rw-p 00000000 00:00 0 
7f3de7ff9000-7f3de8000000 ---p 00000000 00:00 0 
7f3de8000000-7f3debfff000 rw-p 00000000 00:00 0 
7f3debfff000-7f3dec000000 ---p 00000000 00:00 0 
7f3dec000000-7f3ded098000 rw-p 00000000 00:00 0 
7f3ded098000-7f3df0000000 ---p 00000000 00:00 0 
7f3df0000000-7f3df4000000 rw-p 00000000 00:00 0 
7f3df4000000-7f3df7fe9000 rw-p 00000000 00:00 0 
7f3df7fe9000-7f3df8000000 ---p 00000000 00:00 0 
7f3df8000000-7f3df868a000 rw-p 00000000 00:00 0 
7f3df868a000-7f3dfc000000 ---p 00000000 00:00 0 
7f3dfc000000-7f3dfca15000 rw-p 00000000 00:00 0 
7f3dfca15000-7f3e00000000 ---p 00000000 00:00 0 
7f3e00000000-7f3e01420000 rw-p 00000000 00:00 0 
7f3e01420000-7f3e04000000 ---p 00000000 00:00 0 
7f3e04000000-7f3e04021000 rw-p 00000000 00:00 0 
7f3e04021000-7f3e08000000 ---p 00000000 00:00 0 
7f3e08000000-7f3e0c000000 rw-p 00000000 00:00 0 
7f3e0c000000-7f3e0c021000 rw-p 00000000 00:00 0 
7f3e0c021000-7f3e10000000 ---p 00000000 00:00 0 
7f3e10000000-7f3e14000000 rw-p 00000000 00:00 0 
7f3e14000000-7f3e15c57000 rw-p 00000000 00:00 0 
7f3e15c57000-7f3e18000000 ---p 00000000 00:00 0 
7f3e18000000-7f3e18021000 rw-p 00000000 00:00 0 
7f3e18021000-7f3e1c000000 ---p 00000000 00:00 0 
7f3e1c000000-7f3e1c021000 rw-p 00000000 00:00 0 
7f3e1c021000-7f3e20000000 ---p 00000000 00:00 0 
7f3e20000000-7f3e23ffc000 rw-p 00000000 00:00 0 
7f3e23ffc000-7f3e24000000 ---p 00000000 00:00 0 
7f3e24000000-7f3e24021000 rw-p 00000000 00:00 0 
7f3e24021000-7f3e28000000 ---p 00000000 00:00 0 
7f3e28000000-7f3e28a19000 rw-p 00000000 00:00 0 
7f3e28a19000-7f3e2c000000 ---p 00000000 00:00 0 
7f3e2c000000-7f3e2c239000 rw-p 00000000 00:00 0 
7f3e2c239000-7f3e30000000 ---p 00000000 00:00 0 
7f3e30000000-7f3e30021000 rw-p 00000000 00:00 0 
7f3e30021000-7f3e34000000 ---p 00000000 00:00 0 
7f3e34000000-7f3e3773e000 rw-p 00000000 00:00 0 
7f3e3773e000-7f3e38000000 ---p 00000000 00:00 0 
7f3e38000000-7f3e38021000 rw-p 00000000 00:00 0 
7f3e38021000-7f3e3c000000 ---p 00000000 00:00 0 
7f3e3c04b000-7f3e3c04f000 ---p 00000000 00:00 0 
7f3e3c04f000-7f3e3c14c000 rw-p 00000000 00:00 0 
7f3e3c14c000-7f3e3c2c5000 r-xp 00000000 fd:02 11970855                   /site/proj-service/3.0.0.19889/app/libstdc++.so.6
7f3e3c2c5000-7f3e3c4c5000 ---p 00179000 fd:02 11970855                   /site/proj-service/3.0.0.19889/app/libstdc++.so.6
7f3e3c4c5000-7f3e3c4cf000 r--p 00179000 fd:02 11970855                   /site/proj-service/3.0.0.19889/app/libstdc++.so.6
7f3e3c4cf000-7f3e3c4d1000 rw-p 00183000 fd:02 11970855                   /site/proj-service/3.0.0.19889/app/libstdc++.so.6
7f3e3c4d1000-7f3e3c4d5000 rw-p 00000000 00:00 0 
7f3e3c4d5000-7f3e3c4fa000 r-xp 00000000 fd:00 201356955                  /usr/lib64/libtinfo.so.5.9
7f3e3c4fa000-7f3e3c6fa000 ---p 00025000 fd:00 201356955                  /usr/lib64/libtinfo.so.5.9
7f3e3c6fa000-7f3e3c6fe000 r--p 00025000 fd:00 201356955                  /usr/lib64/libtinfo.so.5.9
7f3e3c6fe000-7f3e3c6ff000 rw-p 00029000 fd:00 201356955                  /usr/lib64/libtinfo.so.5.9
7f3e3c6ff000-7f3e3c703000 ---p 00000000 00:00 0 
7f3e3c703000-7f3e3c800000 rw-p 00000000 00:00 0 
7f3e3c800000-7f3e3ca00000 rw-p 00000000 00:00 0 
7f3e3ca00000-7f3e3cb00000 rw-p 00000000 00:00 0 
7f3e3cb00000-7f3e3cb90000 rw-p 00000000 00:00 0 
7f3e3cb90000-7f3e3cc00000 ---p 00000000 00:00 0 
7f3e3cc00000-7f3e3d000000 rw-p 00000000 00:00 0 
7f3e3d000000-7f3e3d800000 rw-p 00000000 00:00 0 
7f3e3d8bc000-7f3e3d8d2000 r-xp 00000000 fd:00 203795922                  /usr/lib64/libnsl-2.17.so
7f3e3d8d2000-7f3e3dad2000 ---p 00016000 fd:00 203795922                  /usr/lib64/libnsl-2.17.so
7f3e3dad2000-7f3e3dad3000 r--p 00016000 fd:00 203795922                  /usr/lib64/libnsl-2.17.so
7f3e3dad3000-7f3e3dad4000 rw-p 00017000 fd:00 203795922                  /usr/lib64/libnsl-2.17.so
7f3e3dad4000-7f3e3dad6000 rw-p 00000000 00:00 0 
7f3e3dad6000-7f3e44000000 r--p 00000000 fd:00 68643212                   /usr/lib/locale/locale-archive
7f3e44000000-7f3e44035000 rw-p 00000000 00:00 0 
7f3e44035000-7f3e48000000 ---p 00000000 00:00 0 
7f3e48000000-7f3e48021000 rw-p 00000000 00:00 0 
7f3e48021000-7f3e4c000000 ---p 00000000 00:00 0 
7f3e4c000000-7f3e4c06f000 rw-p 00000000 00:00 0 
7f3e4c06f000-7f3e50000000 ---p 00000000 00:00 0 
7f3e50000000-7f3e50021000 rw-p 00000000 00:00 0 
7f3e50021000-7f3e54000000 ---p 00000000 00:00 0 
7f3e54000000-7f3e54043000 rw-p 00000000 00:00 0 
7f3e54043000-7f3e58000000 ---p 00000000 00:00 0 
7f3e58000000-7f3e58027000 rw-p 00000000 00:00 0 
7f3e58027000-7f3e5c000000 ---p 00000000 00:00 0 
7f3e5c000000-7f3e5c029000 rw-p 00000000 00:00 0 
7f3e5c029000-7f3e60000000 ---p 00000000 00:00 0 
7f3e6001c000-7f3e60020000 ---p 00000000 00:00 0 
7f3e60020000-7f3e6011d000 rw-p 00000000 00:00 0 
7f3e6011d000-7f3e602ba000 r-xp 00000000 fd:02 11970844                   /site/proj-service/3.0.0.19889/app/liblbm.so.7.0.1
7f3e602ba000-7f3e604b9000 ---p 0019d000 fd:02 11970844                   /site/proj-service/3.0.0.19889/app/liblbm.so.7.0.1
7f3e604b9000-7f3e604c3000 rw-p 0019c000 fd:02 11970844                   /site/proj-service/3.0.0.19889/app/liblbm.so.7.0.1
7f3e604c3000-7f3e604c7000 rw-p 00000000 00:00 0 
7f3e604c7000-7f3e604fd000 r-xp 00000000 fd:02 11970839                   /site/proj-service/3.0.0.19889/app/liblbmj.so.5.0.0
7f3e604fd000-7f3e606fd000 ---p 00036000 fd:02 11970839                   /site/proj-service/3.0.0.19889/app/liblbmj.so.5.0.0
7f3e606fd000-7f3e606fe000 rw-p 00036000 fd:02 11970839                   /site/proj-service/3.0.0.19889/app/liblbmj.so.5.0.0
7f3e606fe000-7f3e606ff000 rw-p 00000000 00:00 0 
7f3e606ff000-7f3e60703000 ---p 00000000 00:00 0 
7f3e60703000-7f3e60800000 rw-p 00000000 00:00 0 
7f3e60800000-7f3e60900000 rw-p 00000000 00:00 0 
7f3e60900000-7f3e60d00000 rw-p 00000000 00:00 0 
7f3e60d00000-7f3e60e00000 rw-p 00000000 00:00 0 
7f3e60e00000-7f3e61000000 rw-p 00000000 00:00 0 
7f3e610a5000-7f3e610a9000 ---p 00000000 00:00 0 
7f3e610a9000-7f3e611a6000 rw-p 00000000 00:00 0 
7f3e611a6000-7f3e611aa000 ---p 00000000 00:00 0 
7f3e611aa000-7f3e612a7000 rw-p 00000000 00:00 0 
7f3e612a7000-7f3e612bd000 r-xp 00000000 fd:00 201336333                  /usr/lib64/libresolv-2.17.so
7f3e612bd000-7f3e614bc000 ---p 00016000 fd:00 201336333                  /usr/lib64/libresolv-2.17.so
7f3e614bc000-7f3e614bd000 r--p 00015000 fd:00 201336333                  /usr/lib64/libresolv-2.17.so
7f3e614bd000-7f3e614be000 rw-p 00016000 fd:00 201336333                  /usr/lib64/libresolv-2.17.so
7f3e614be000-7f3e614c0000 rw-p 00000000 00:00 0 
7f3e614c0000-7f3e614c5000 r-xp 00000000 fd:00 203795928                  /usr/lib64/libnss_dns-2.17.so
7f3e614c5000-7f3e616c5000 ---p 00005000 fd:00 203795928                  /usr/lib64/libnss_dns-2.17.so
7f3e616c5000-7f3e616c6000 r--p 00005000 fd:00 203795928                  /usr/lib64/libnss_dns-2.17.so
7f3e616c6000-7f3e616c7000 rw-p 00006000 fd:00 203795928                  /usr/lib64/libnss_dns-2.17.so
7f3e616c7000-7f3e616cb000 ---p 00000000 00:00 0 
7f3e616cb000-7f3e617c8000 rw-p 00000000 00:00 0 
7f3e617c8000-7f3e617cc000 ---p 00000000 00:00 0 
7f3e617cc000-7f3e618c9000 rw-p 00000000 00:00 0 
7f3e618c9000-7f3e618cd000 ---p 00000000 00:00 0 
7f3e618cd000-7f3e619ca000 rw-p 00000000 00:00 0 
7f3e619ca000-7f3e619ce000 ---p 00000000 00:00 0 
7f3e619ce000-7f3e61acb000 rw-p 00000000 00:00 0 
7f3e61acb000-7f3e61acf000 ---p 00000000 00:00 0 
7f3e61acf000-7f3e61bcc000 rw-p 00000000 00:00 0 
7f3e61bcc000-7f3e61bd0000 ---p 00000000 00:00 0 
7f3e61bd0000-7f3e61ccd000 rw-p 00000000 00:00 0 
7f3e61ccd000-7f3e61cd1000 ---p 00000000 00:00 0 
7f3e61cd1000-7f3e61dce000 rw-p 00000000 00:00 0 
7f3e61dce000-7f3e61dd2000 ---p 00000000 00:00 0 
7f3e61dd2000-7f3e61ecf000 rw-p 00000000 00:00 0 
7f3e61ecf000-7f3e61ed3000 ---p 00000000 00:00 0 
7f3e61ed3000-7f3e61fd0000 rw-p 00000000 00:00 0 
7f3e61fd0000-7f3e61fd4000 ---p 00000000 00:00 0 
7f3e61fd4000-7f3e620d1000 rw-p 00000000 00:00 0 
7f3e620d1000-7f3e620da000 r-xp 00000000 fd:02 279768080                  /site/proj-service/3.0.0.19889/lib/libwrapper.so
7f3e620da000-7f3e621da000 ---p 00009000 fd:02 279768080                  /site/proj-service/3.0.0.19889/lib/libwrapper.so
7f3e621da000-7f3e621db000 rw-p 00009000 fd:02 279768080                  /site/proj-service/3.0.0.19889/lib/libwrapper.so
7f3e621db000-7f3e621df000 ---p 00000000 00:00 0 
7f3e621df000-7f3e622dc000 rw-p 00000000 00:00 0 
7f3e622dc000-7f3e622e0000 ---p 00000000 00:00 0 
7f3e622e0000-7f3e623dd000 rw-p 00000000 00:00 0 
7f3e623dd000-7f3e623e1000 ---p 00000000 00:00 0 
7f3e623e1000-7f3e624de000 rw-p 00000000 00:00 0 
7f3e624de000-7f3e624df000 ---p 00000000 00:00 0 
7f3e624df000-7f3e625e0000 rw-p 00000000 00:00 0 
7f3e625e0000-7f3e625e4000 ---p 00000000 00:00 0 
7f3e625e4000-7f3e626e1000 rw-p 00000000 00:00 0 
7f3e626e1000-7f3e626e5000 ---p 00000000 00:00 0 
7f3e626e5000-7f3e627e2000 rw-p 00000000 00:00 0 
7f3e627e2000-7f3e627e6000 ---p 00000000 00:00 0 
7f3e627e6000-7f3e628e3000 rw-p 00000000 00:00 0 
7f3e628e3000-7f3e628e7000 ---p 00000000 00:00 0 
7f3e628e7000-7f3e629e4000 rw-p 00000000 00:00 0 
7f3e629e4000-7f3e629e8000 ---p 00000000 00:00 0 
7f3e629e8000-7f3e62ae5000 rw-p 00000000 00:00 0 
7f3e62ae5000-7f3e62ae9000 ---p 00000000 00:00 0 
7f3e62ae9000-7f3e62be6000 rw-p 00000000 00:00 0 
7f3e62be6000-7f3e62bea000 ---p 00000000 00:00 0 
7f3e62bea000-7f3e62ce7000 rw-p 00000000 00:00 0 
7f3e62ce7000-7f3e62ceb000 ---p 00000000 00:00 0 
7f3e62ceb000-7f3e62de8000 rw-p 00000000 00:00 0 
7f3e62de8000-7f3e62dec000 ---p 00000000 00:00 0 
7f3e62dec000-7f3e62ee9000 rw-p 00000000 00:00 0 
7f3e62ee9000-7f3e62ef5000 r-xp 00000000 fd:00 203795930                  /usr/lib64/libnss_files-2.17.so
7f3e62ef5000-7f3e630f4000 ---p 0000c000 fd:00 203795930                  /usr/lib64/libnss_files-2.17.so
7f3e630f4000-7f3e630f5000 r--p 0000b000 fd:00 203795930                  /usr/lib64/libnss_files-2.17.so
7f3e630f5000-7f3e630f6000 rw-p 0000c000 fd:00 203795930                  /usr/lib64/libnss_files-2.17.so
7f3e630f6000-7f3e630fc000 rw-p 00000000 00:00 0 
7f3e630fc000-7f3e63100000 ---p 00000000 00:00 0 
7f3e63100000-7f3e631fd000 rw-p 00000000 00:00 0 
7f3e631fd000-7f3e63201000 ---p 00000000 00:00 0 
7f3e63201000-7f3e632fe000 rw-p 00000000 00:00 0 
7f3e632fe000-7f3e632ff000 ---p 00000000 00:00 0 
7f3e632ff000-7f3e63400000 rw-p 00000000 00:00 0 
7f3e63400000-7f3e63800000 rw-p 00000000 00:00 0 
7f3e63800000-7f3e63a80000 rw-p 00000000 00:00 0 
7f3e63a80000-7f3e63b00000 rw-p 00000000 00:00 0 
7f3e63b00000-7f3e63c00000 rw-p 00000000 00:00 0 
7f3e63cfa000-7f3e63cfb000 ---p 00000000 00:00 0 
7f3e63cfb000-7f3e63dfc000 rw-p 00000000 00:00 0 
7f3e63dfc000-7f3e63dfd000 ---p 00000000 00:00 0 
7f3e63dfd000-7f3e63efe000 rw-p 00000000 00:00 0 
7f3e63efe000-7f3e63eff000 ---p 00000000 00:00 0 
7f3e63eff000-7f3e64000000 rw-p 00000000 00:00 0 
7f3e64000000-7f3e64042000 rw-p 00000000 00:00 0 
7f3e64042000-7f3e68000000 ---p 00000000 00:00 0 
7f3e68000000-7f3e6802a000 rw-p 00000000 00:00 0 
7f3e6802a000-7f3e6c000000 ---p 00000000 00:00 0 
7f3e6c000000-7f3e6c040000 rw-p 00000000 00:00 0 
7f3e6c040000-7f3e70000000 ---p 00000000 00:00 0 
7f3e70000000-7f3e70040000 rw-p 00000000 00:00 0 
7f3e70040000-7f3e74000000 ---p 00000000 00:00 0 
7f3e74000000-7f3e74029000 rw-p 00000000 00:00 0 
7f3e74029000-7f3e78000000 ---p 00000000 00:00 0 
7f3e78000000-7f3e7803f000 rw-p 00000000 00:00 0 
7f3e7803f000-7f3e7c000000 ---p 00000000 00:00 0 
7f3e7c000000-7f3e7c027000 rw-p 00000000 00:00 0 
7f3e7c027000-7f3e80000000 ---p 00000000 00:00 0 
7f3e80000000-7f3e80027000 rw-p 00000000 00:00 0 
7f3e80027000-7f3e84000000 ---p 00000000 00:00 0 
7f3e84000000-7f3e84026000 rw-p 00000000 00:00 0 
7f3e84026000-7f3e88000000 ---p 00000000 00:00 0 
7f3e88000000-7f3e88040000 rw-p 00000000 00:00 0 
7f3e88040000-7f3e8c000000 ---p 00000000 00:00 0 
7f3e8c000000-7f3e8c025000 rw-p 00000000 00:00 0 
7f3e8c025000-7f3e90000000 ---p 00000000 00:00 0 
7f3e90000000-7f3e90026000 rw-p 00000000 00:00 0 
7f3e90026000-7f3e94000000 ---p 00000000 00:00 0 
7f3e94000000-7f3e94027000 rw-p 00000000 00:00 0 
7f3e94027000-7f3e98000000 ---p 00000000 00:00 0 
7f3e98000000-7f3e98027000 rw-p 00000000 00:00 0 
7f3e98027000-7f3e9c000000 ---p 00000000 00:00 0 
7f3e9c000000-7f3e9c8cf000 rw-p 00000000 00:00 0 
7f3e9c8cf000-7f3ea0000000 ---p 00000000 00:00 0 
7f3ea0000000-7f3ea0021000 rw-p 00000000 00:00 0 
7f3ea0021000-7f3ea4000000 ---p 00000000 00:00 0 
7f3ea4000000-7f3ea6000000 rw-p 00000000 00:00 0 
7f3ea6000000-7f40a4000000 ---p 00000000 00:00 0 
7f40a4000000-7f40a4021000 rw-p 00000000 00:00 0 
7f40a4021000-7f40a8000000 ---p 00000000 00:00 0 
7f40a8000000-7f40a8021000 rw-p 00000000 00:00 0 
7f40a8021000-7f40ac000000 ---p 00000000 00:00 0 
7f40ac000000-7f40ac088000 rw-p 00000000 00:00 0 
7f40ac088000-7f40b0000000 ---p 00000000 00:00 0 
7f40b0000000-7f40b0021000 rw-p 00000000 00:00 0 
7f40b0021000-7f40b4000000 ---p 00000000 00:00 0 
7f40b4000000-7f40b40a1000 rw-p 00000000 00:00 0 
7f40b40a1000-7f40b8000000 ---p 00000000 00:00 0 
7f40b8000000-7f40b8069000 rw-p 00000000 00:00 0 
7f40b8069000-7f40bc000000 ---p 00000000 00:00 0 
7f40bc000000-7f40bc089000 rw-p 00000000 00:00 0 
7f40bc089000-7f40c0000000 ---p 00000000 00:00 0 
7f40c0000000-7f40c0071000 rw-p 00000000 00:00 0 
7f40c0071000-7f40c4000000 ---p 00000000 00:00 0 
7f40c4000000-7f40c4088000 rw-p 00000000 00:00 0 
7f40c4088000-7f40c8000000 ---p 00000000 00:00 0 
7f40c8000000-7f40c8081000 rw-p 00000000 00:00 0 
7f40c8081000-7f40cc000000 ---p 00000000 00:00 0 
7f40cc000000-7f40cc1d9000 rw-p 00000000 00:00 0 
7f40cc1d9000-7f40d0000000 ---p 00000000 00:00 0 
7f40d0000000-7f40d0081000 rw-p 00000000 00:00 0 
7f40d0081000-7f40d4000000 ---p 00000000 00:00 0 
7f40d4000000-7f40d4080000 rw-p 00000000 00:00 0 
7f40d4080000-7f40d8000000 ---p 00000000 00:00 0 
7f40d8000000-7f40d8089000 rw-p 00000000 00:00 0 
7f40d8089000-7f40dc000000 ---p 00000000 00:00 0 
7f40dc000000-7f40dc07d000 rw-p 00000000 00:00 0 
7f40dc07d000-7f40e0000000 ---p 00000000 00:00 0 
7f40e00c2000-7f40e00c3000 ---p 00000000 00:00 0 
7f40e00c3000-7f40e01c4000 rw-p 00000000 00:00 0 
7f40e01c4000-7f40e01c5000 ---p 00000000 00:00 0 
7f40e01c5000-7f40e02c6000 rw-p 00000000 00:00 0 
7f40e02c6000-7f40e02c7000 ---p 00000000 00:00 0 
7f40e02c7000-7f40e03c8000 rw-p 00000000 00:00 0 
7f40e03c8000-7f40e03c9000 ---p 00000000 00:00 0 
7f40e03c9000-7f40e04ca000 rw-p 00000000 00:00 0 
7f40e04ca000-7f40e04cb000 ---p 00000000 00:00 0 
7f40e04cb000-7f40e05cc000 rw-p 00000000 00:00 0 
7f40e05cc000-7f40e05cd000 ---p 00000000 00:00 0 
7f40e05cd000-7f40e06ce000 rw-p 00000000 00:00 0 
7f40e06ce000-7f40e06cf000 ---p 00000000 00:00 0 
7f40e06cf000-7f40e07d0000 rw-p 00000000 00:00 0 
7f40e07d0000-7f40e07d1000 ---p 00000000 00:00 0 
7f40e07d1000-7f40e08d2000 rw-p 00000000 00:00 0 
7f40e08d2000-7f40e08d3000 ---p 00000000 00:00 0 
7f40e08d3000-7f40e09d4000 rw-p 00000000 00:00 0 
7f40e09d4000-7f40e09d5000 ---p 00000000 00:00 0 
7f40e09d5000-7f40e0ad6000 rw-p 00000000 00:00 0 
7f40e0ad6000-7f40e0ad7000 ---p 00000000 00:00 0 
7f40e0ad7000-7f40e0bd8000 rw-p 00000000 00:00 0 
7f40e0bd8000-7f40e0bd9000 ---p 00000000 00:00 0 
7f40e0bd9000-7f40e0cda000 rw-p 00000000 00:00 0 
7f40e0cda000-7f40e0cdb000 ---p 00000000 00:00 0 
7f40e0cdb000-7f40e0ddc000 rw-p 00000000 00:00 0 
7f40e0ddc000-7f40e0ddd000 ---p 00000000 00:00 0 
7f40e0ddd000-7f40e0ede000 rw-p 00000000 00:00 0 
7f40e0ede000-7f40e0edf000 ---p 00000000 00:00 0 
7f40e0edf000-7f40e0fe0000 rw-p 00000000 00:00 0 
7f40e0fe0000-7f40e0fe1000 ---p 00000000 00:00 0 
7f40e0fe1000-7f40e10e2000 rw-p 00000000 00:00 0 
7f40e10e2000-7f40e10e3000 ---p 00000000 00:00 0 
7f40e10e3000-7f40e11e4000 rw-p 00000000 00:00 0 
7f40e11e4000-7f40e31e4000 rw-p 00000000 00:00 0 
7f40e31e4000-7f40e31e5000 ---p 00000000 00:00 0 
7f40e31e5000-7f40e32e6000 rw-p 00000000 00:00 0 
7f40e32e6000-7f40e32e7000 ---p 00000000 00:00 0 
7f40e32e7000-7f40e33e8000 rw-p 00000000 00:00 0 
7f40e33e8000-7f40e33e9000 ---p 00000000 00:00 0 
7f40e33e9000-7f40e34ea000 rw-p 00000000 00:00 0 
7f40e34ea000-7f40e34eb000 ---p 00000000 00:00 0 
7f40e34eb000-7f40e35ec000 rw-p 00000000 00:00 0 
7f40e35ec000-7f40e35ed000 ---p 00000000 00:00 0 
7f40e35ed000-7f40e36ee000 rw-p 00000000 00:00 0 
7f40e36ee000-7f40e36ef000 ---p 00000000 00:00 0 
7f40e36ef000-7f40e37f0000 rw-p 00000000 00:00 0 
7f40e37f0000-7f40e37f1000 ---p 00000000 00:00 0 
7f40e37f1000-7f40e38f2000 rw-p 00000000 00:00 0 
7f40e38f2000-7f40e38f3000 ---p 00000000 00:00 0 
7f40e38f3000-7f40e39f4000 rw-p 00000000 00:00 0 
7f40e39f4000-7f40e39f5000 ---p 00000000 00:00 0 
7f40e39f5000-7f40e3af6000 rw-p 00000000 00:00 0 
7f40e3af6000-7f40e3af7000 ---p 00000000 00:00 0 
7f40e3af7000-7f40e3bf8000 rw-p 00000000 00:00 0 
7f40e3bf8000-7f40e3bf9000 ---p 00000000 00:00 0 
7f40e3bf9000-7f40e3cfa000 rw-p 00000000 00:00 0 
7f40e3cfa000-7f40e3cfb000 ---p 00000000 00:00 0 
7f40e3cfb000-7f40e3dfc000 rw-p 00000000 00:00 0 
7f40e3dfc000-7f40e3dfd000 ---p 00000000 00:00 0 
7f40e3dfd000-7f40e3efe000 rw-p 00000000 00:00 0 
7f40e3efe000-7f40e3eff000 ---p 00000000 00:00 0 
7f40e3eff000-7f40e4000000 rw-p 00000000 00:00 0 
7f40e4000000-7f40e4043000 rw-p 00000000 00:00 0 
7f40e4043000-7f40e8000000 ---p 00000000 00:00 0 
7f40e8000000-7f40e80a4000 rw-p 00000000 00:00 0 
7f40e80a4000-7f40ec000000 ---p 00000000 00:00 0 
7f40ec000000-7f40ec0bc000 rw-p 00000000 00:00 0 
7f40ec0bc000-7f40f0000000 ---p 00000000 00:00 0 
7f40f0000000-7f40f0097000 rw-p 00000000 00:00 0 
7f40f0097000-7f40f4000000 ---p 00000000 00:00 0 
7f40f4000000-7f40f4080000 rw-p 00000000 00:00 0 
7f40f4080000-7f40f8000000 ---p 00000000 00:00 0 
7f40f802b000-7f40f8062000 r-xp 00000000 fd:02 11970831                   /site/proj-service/3.0.0.19889/app/libcombogues.so
7f40f8062000-7f40f8063000 r--p 00036000 fd:02 11970831                   /site/proj-service/3.0.0.19889/app/libcombogues.so
7f40f8063000-7f40f8064000 rw-p 00037000 fd:02 11970831                   /site/proj-service/3.0.0.19889/app/libcombogues.so
7f40f8064000-7f40f80e5000 rw-p 00000000 00:00 0 
7f40f80e5000-7f40f80e6000 ---p 00000000 00:00 0 
7f40f80e6000-7f40f81e7000 rw-p 00000000 00:00 0 
7f40f81e7000-7f40f81e8000 ---p 00000000 00:00 0 
7f40f81e8000-7f40f82e9000 rw-p 00000000 00:00 0 
7f40f82e9000-7f40f82ea000 ---p 00000000 00:00 0 
7f40f82ea000-7f40f83eb000 rw-p 00000000 00:00 0 
7f40f83eb000-7f40f83ec000 ---p 00000000 00:00 0 
7f40f83ec000-7f40f84ed000 rw-p 00000000 00:00 0 
7f40f84ed000-7f40f84ee000 ---p 00000000 00:00 0 
7f40f84ee000-7f40f85ef000 rw-p 00000000 00:00 0 
7f40f85ef000-7f40f86ef000 rw-p 00000000 00:00 0 
7f40f86ef000-7f40f87e8000 ---p 00000000 00:00 0 
7f40f87e8000-7f4100f29000 rwxp 00000000 00:00 0 
7f4100f29000-7f4108b88000 ---p 00000000 00:00 0 
7f4108b88000-7f4110b88000 rwxp 00000000 00:00 0 
7f4110b88000-7f41187e8000 ---p 00000000 00:00 0 
7f41187e8000-7f4120000000 r--s 00000000 fd:02 411088677                  /site/apps/jdk-16/lib/modules
7f4120000000-7f4120688000 rw-p 00000000 00:00 0 
7f4120688000-7f4124000000 ---p 00000000 00:00 0 
7f4124003000-7f4124004000 rw-p 00000000 00:00 0 
7f4124004000-7f4124008000 ---p 00000000 00:00 0 
7f4124008000-7f4124026000 rw-p 00000000 00:00 0 
7f4124026000-7f4124028000 r-xp 00000000 fd:02 411088647                  /site/apps/jdk-16/lib/libextnet.so
7f4124028000-7f4124029000 r--p 00001000 fd:02 411088647                  /site/apps/jdk-16/lib/libextnet.so
7f4124029000-7f412402a000 rw-p 00002000 fd:02 411088647                  /site/apps/jdk-16/lib/libextnet.so
7f412402a000-7f4124031000 r--s 00000000 fd:00 67669823                   /usr/lib64/gconv/gconv-modules.cache
7f4124031000-7f4124036000 r-xp 00000000 fd:02 411088666                  /site/apps/jdk-16/lib/libmanagement_ext.so
7f4124036000-7f4124037000 ---p 00005000 fd:02 411088666                  /site/apps/jdk-16/lib/libmanagement_ext.so
7f4124037000-7f4124038000 r--p 00005000 fd:02 411088666                  /site/apps/jdk-16/lib/libmanagement_ext.so
7f4124038000-7f4124039000 rw-p 00006000 fd:02 411088666                  /site/apps/jdk-16/lib/libmanagement_ext.so
7f4124039000-7f412403d000 r-xp 00000000 fd:02 411088664                  /site/apps/jdk-16/lib/libmanagement.so
7f412403d000-7f412403e000 r--p 00003000 fd:02 411088664                  /site/apps/jdk-16/lib/libmanagement.so
7f412403e000-7f412403f000 rw-p 00004000 fd:02 411088664                  /site/apps/jdk-16/lib/libmanagement.so
7f412403f000-7f412404c000 r-xp 00000000 fd:02 411088675                  /site/apps/jdk-16/lib/libverify.so
7f412404c000-7f412404e000 r--p 0000c000 fd:02 411088675                  /site/apps/jdk-16/lib/libverify.so
7f412404e000-7f412404f000 rw-p 0000e000 fd:02 411088675                  /site/apps/jdk-16/lib/libverify.so
7f412404f000-7f4124064000 r-xp 00000000 fd:02 411088668                  /site/apps/jdk-16/lib/libnet.so
7f4124064000-7f4124065000 r--p 00014000 fd:02 411088668                  /site/apps/jdk-16/lib/libnet.so
7f4124065000-7f4124066000 rw-p 00015000 fd:02 411088668                  /site/apps/jdk-16/lib/libnet.so
7f4124066000-7f41240c1000 rw-p 00000000 00:00 0 
7f41240c1000-7f41241c1000 rw-p 00000000 00:00 0 
7f41241c1000-7f41242ba000 ---p 00000000 00:00 0 
7f41242ba000-7f41242cf000 r-xp 00000000 fd:00 201326746                  /usr/lib64/libgcc_s-4.8.5-20150702.so.1
7f41242cf000-7f41244ce000 ---p 00015000 fd:00 201326746                  /usr/lib64/libgcc_s-4.8.5-20150702.so.1
7f41244ce000-7f41244cf000 r--p 00014000 fd:00 201326746                  /usr/lib64/libgcc_s-4.8.5-20150702.so.1
7f41244cf000-7f41244d0000 rw-p 00015000 fd:00 201326746                  /usr/lib64/libgcc_s-4.8.5-20150702.so.1
7f41244d0000-7f41244da000 r-xp 00000000 fd:00 201961317                  /usr/lib64/libnuma.so.1
7f41244da000-7f41246da000 ---p 0000a000 fd:00 201961317                  /usr/lib64/libnuma.so.1
7f41246da000-7f41246db000 r--p 0000a000 fd:00 201961317                  /usr/lib64/libnuma.so.1
7f41246db000-7f41246dc000 rw-p 0000b000 fd:00 201961317                  /usr/lib64/libnuma.so.1
7f41246dc000-7f41246e3000 r-xp 00000000 fd:00 201336335                  /usr/lib64/librt-2.17.so
7f41246e3000-7f41248e2000 ---p 00007000 fd:00 201336335                  /usr/lib64/librt-2.17.so
7f41248e2000-7f41248e3000 r--p 00006000 fd:00 201336335                  /usr/lib64/librt-2.17.so
7f41248e3000-7f41248e4000 rw-p 00007000 fd:00 201336335                  /usr/lib64/librt-2.17.so
7f41248e4000-7f41249e5000 r-xp 00000000 fd:00 203795920                  /usr/lib64/libm-2.17.so
7f41249e5000-7f4124be4000 ---p 00101000 fd:00 203795920                  /usr/lib64/libm-2.17.so
7f4124be4000-7f4124be5000 r--p 00100000 fd:00 203795920                  /usr/lib64/libm-2.17.so
7f4124be5000-7f4124be6000 rw-p 00101000 fd:00 203795920                  /usr/lib64/libm-2.17.so
7f4124be6000-7f4125cf4000 r-xp 00000000 fd:02 279281269                  /site/apps/jdk-16/lib/server/libjvm.so
7f4125cf4000-7f4125cf5000 ---p 0110e000 fd:02 279281269                  /site/apps/jdk-16/lib/server/libjvm.so
7f4125cf5000-7f4125da6000 r--p 0110e000 fd:02 279281269                  /site/apps/jdk-16/lib/server/libjvm.so
7f4125da6000-7f4125dd9000 rw-p 011bf000 fd:02 279281269                  /site/apps/jdk-16/lib/server/libjvm.so
7f4125dd9000-7f4125e34000 rw-p 00000000 00:00 0 
7f4125e34000-7f4125ff6000 r-xp 00000000 fd:00 201336320                  /usr/lib64/libc-2.17.so
7f4125ff6000-7f41261f6000 ---p 001c2000 fd:00 201336320                  /usr/lib64/libc-2.17.so
7f41261f6000-7f41261fa000 r--p 001c2000 fd:00 201336320                  /usr/lib64/libc-2.17.so
7f41261fa000-7f41261fc000 rw-p 001c6000 fd:00 201336320                  /usr/lib64/libc-2.17.so
7f41261fc000-7f4126201000 rw-p 00000000 00:00 0 
7f4126201000-7f4126203000 r-xp 00000000 fd:00 203795918                  /usr/lib64/libdl-2.17.so
7f4126203000-7f4126403000 ---p 00002000 fd:00 203795918                  /usr/lib64/libdl-2.17.so
7f4126403000-7f4126404000 r--p 00002000 fd:00 203795918                  /usr/lib64/libdl-2.17.so
7f4126404000-7f4126405000 rw-p 00003000 fd:00 203795918                  /usr/lib64/libdl-2.17.so
7f4126405000-7f412641c000 r-xp 00000000 fd:00 201336329                  /usr/lib64/libpthread-2.17.so
7f412641c000-7f412661b000 ---p 00017000 fd:00 201336329                  /usr/lib64/libpthread-2.17.so
7f412661b000-7f412661c000 r--p 00016000 fd:00 201336329                  /usr/lib64/libpthread-2.17.so
7f412661c000-7f412661d000 rw-p 00017000 fd:00 201336329                  /usr/lib64/libpthread-2.17.so
7f412661d000-7f4126621000 rw-p 00000000 00:00 0 
7f4126621000-7f4126636000 r-xp 00000000 fd:00 201356973                  /usr/lib64/libz.so.1.2.7
7f4126636000-7f4126835000 ---p 00015000 fd:00 201356973                  /usr/lib64/libz.so.1.2.7
7f4126835000-7f4126836000 r--p 00014000 fd:00 201356973                  /usr/lib64/libz.so.1.2.7
7f4126836000-7f4126837000 rw-p 00015000 fd:00 201356973                  /usr/lib64/libz.so.1.2.7
7f4126837000-7f4126859000 r-xp 00000000 fd:00 201327511                  /usr/lib64/ld-2.17.so
7f4126859000-7f412685a000 r--p 00000000 00:00 0 
7f412685a000-7f4126861000 r-xp 00000000 fd:02 411088676                  /site/apps/jdk-16/lib/libzip.so
7f4126861000-7f4126862000 ---p 00007000 fd:02 411088676                  /site/apps/jdk-16/lib/libzip.so
7f4126862000-7f4126863000 r--p 00007000 fd:02 411088676                  /site/apps/jdk-16/lib/libzip.so
7f4126863000-7f4126864000 rw-p 00008000 fd:02 411088676                  /site/apps/jdk-16/lib/libzip.so
7f4126864000-7f4126877000 r-xp 00000000 fd:02 411088669                  /site/apps/jdk-16/lib/libnio.so
7f4126877000-7f4126878000 r--p 00012000 fd:02 411088669                  /site/apps/jdk-16/lib/libnio.so
7f4126878000-7f4126879000 rw-p 00013000 fd:02 411088669                  /site/apps/jdk-16/lib/libnio.so
7f4126879000-7f41268de000 rw-p 00000000 00:00 0 
7f41268de000-7f41268ed000 rw-p 00000000 00:00 0 
7f41268ed000-7f4126911000 r-xp 00000000 fd:02 411088655                  /site/apps/jdk-16/lib/libjava.so
7f4126911000-7f4126912000 ---p 00024000 fd:02 411088655                  /site/apps/jdk-16/lib/libjava.so
7f4126912000-7f4126913000 r--p 00024000 fd:02 411088655                  /site/apps/jdk-16/lib/libjava.so
7f4126913000-7f4126914000 rw-p 00025000 fd:02 411088655                  /site/apps/jdk-16/lib/libjava.so
7f4126914000-7f4126915000 rw-p 00000000 00:00 0 
7f4126915000-7f4126930000 r-xp 00000000 fd:02 411088659                  /site/apps/jdk-16/lib/libjimage.so
7f4126930000-7f4126931000 ---p 0001b000 fd:02 411088659                  /site/apps/jdk-16/lib/libjimage.so
7f4126931000-7f4126933000 r--p 0001b000 fd:02 411088659                  /site/apps/jdk-16/lib/libjimage.so
7f4126933000-7f4126934000 rw-p 0001d000 fd:02 411088659                  /site/apps/jdk-16/lib/libjimage.so
7f4126934000-7f4126938000 ---p 00000000 00:00 0 
7f4126938000-7f4126a39000 rw-p 00000000 00:00 0 
7f4126a39000-7f4126a48000 r-xp 00000000 fd:02 411088660                  /site/apps/jdk-16/lib/libjli.so
7f4126a48000-7f4126a49000 r--p 0000e000 fd:02 411088660                  /site/apps/jdk-16/lib/libjli.so
7f4126a49000-7f4126a4a000 rw-p 0000f000 fd:02 411088660                  /site/apps/jdk-16/lib/libjli.so
7f4126a4a000-7f4126a4c000 rw-p 00000000 00:00 0 
7f4126a4c000-7f4126a54000 rw-p 00000000 00:00 0 
7f4126a54000-7f4126a55000 ---p 00000000 00:00 0 
7f4126a55000-7f4126a56000 r--p 00000000 00:00 0 
7f4126a56000-7f4126a57000 ---p 00000000 00:00 0 
7f4126a57000-7f4126a58000 rw-p 00000000 00:00 0 
7f4126a58000-7f4126a59000 r--p 00021000 fd:00 201327511                  /usr/lib64/ld-2.17.so
7f4126a59000-7f4126a5a000 rw-p 00022000 fd:00 201327511                  /usr/lib64/ld-2.17.so
7f4126a5a000-7f4126a5b000 rw-p 00000000 00:00 0 
7ffe4f4e0000-7ffe4f503000 rw-p 00000000 00:00 0                          [stack]
7ffe4f5ec000-7ffe4f5ee000 r-xp 00000000 00:00 0                          [vdso]
ffffffffff600000-ffffffffff601000 r-xp 00000000 00:00 0                  [vsyscall]


VM Arguments:
jvm_args: -XX:+UseZGC -XX:InitialCodeCacheSize=128m -XX:ReservedCodeCacheSize=512m -XX:+PrintCommandLineFlags -XX:+RelaxAccessControlCheck -XX:-DontCompileHugeMethods -Demail.list=projalerts@company.com -XX:+PerfDisableSharedMem -XX:+AlwaysPreTouch -Doracle.jdbc.DateZeroTime=true -Djava.security.egd=file:///dev/urandom -Dorg.tanukisoftware.wrapper.WrapperSimpleApp.waitForStartMain=TRUE -Dorg.tanukisoftware.wrapper.WrapperSimpleApp.maxStartMainWait=300 -Dagrona.disable.bounds.checks=true -XX:-UseCounterDecay -XX:-UseBiasedLocking -XX:+UseNUMA -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=60000 -Xlog:gc=info,safepoint:file=/sitelogs/proj-service//gc.x.log:time:filecount=20,filesize=45m -Xlog:class+unload=off --add-opens=java.base/java.lang=ALL-UNNAMED --add-opens=java.base/java.lang.invoke=ALL-UNNAMED --add-opens=java.base/java.math=ALL-UNNAMED --add-opens=java.base/java.util=ALL-UNNAMED --add-opens=java.base/java.text=ALL-UNNAMED --add-opens=java.desktop/java.awt.font=ALL-UNNAMED --add-opens=java.base/sun.nio.cs=ALL-UNNAMED --add-opens=java.base/sun.nio.ch=ALL-UNNAMED --add-opens=java.base/java.util.concurrent=ALL-UNNAMED --add-opens=java.base/java.nio=ALL-UNNAMED -Xms10240m -Xmx10240m -Djava.library.path=../lib:../app -Dwrapper.key=sqMgl7Pii9_7mdMh -Dwrapper.port=32000 -Dwrapper.jvm.port.min=31000 -Dwrapper.jvm.port.max=31999 -Dwrapper.disable_console_input=TRUE -Dwrapper.pid=40606 -Dwrapper.version=3.5.14 -Dwrapper.native_library=wrapper -Dwrapper.service=TRUE -Dwrapper.cpu.timeout=10 -Dwrapper.jvmid=1 
java_command: org.tanukisoftware.wrapper.WrapperSimpleApp com.company.proj.service.server.serviceMain
java_class_path (initial): ../lib/wrapper.jar:../app/.
Launcher Type: SUN_STANDARD

[Global flags]
     bool AlwaysPreTouch                           = true                                      {product} {command line}
     intx CICompilerCount                          = 12                                        {product} {ergonomic}
     bool DontCompileHugeMethods                   = false                                     {product} {command line}
     intx GuaranteedSafepointInterval              = 60000                                  {diagnostic} {command line}
    uintx InitialCodeCacheSize                     = 134217728                              {pd product} {command line}
   size_t InitialHeapSize                          = 10737418240                               {product} {command line}
   size_t MaxHeapSize                              = 10737418240                               {product} {command line}
   size_t MinHeapDeltaBytes                        = 2097152                                   {product} {ergonomic}
   size_t MinHeapSize                              = 10737418240                               {product} {command line}
    uintx NonNMethodCodeHeapSize                   = 7602480                                {pd product} {ergonomic}
    uintx NonProfiledCodeHeapSize                  = 264634216                              {pd product} {ergonomic}
     bool PerfDisableSharedMem                     = true                                      {product} {command line}
     bool PrintCommandLineFlags                    = true                                      {product} {command line}
    uintx ProfiledCodeHeapSize                     = 264634216                              {pd product} {ergonomic}
     bool RelaxAccessControlCheck                  = true                                      {product} {command line}
    uintx ReservedCodeCacheSize                    = 536870912                              {pd product} {command line}
     bool SegmentedCodeCache                       = true                                      {product} {ergonomic}
   size_t SoftMaxHeapSize                          = 10737418240                            {manageable} {ergonomic}
   double SweeperThreshold                         = 0.234375                                  {product} {ergonomic}
     bool UnlockDiagnosticVMOptions                = true                                   {diagnostic} {command line}
     bool UseBiasedLocking                         = false                                     {product} {command line}
     bool UseCompressedClassPointers               = true                           {product lp64_product} {ergonomic}
     bool UseCompressedOops                        = false                          {product lp64_product} {ergonomic}
     bool UseCounterDecay                          = false                                     {product} {command line}
     bool UseNUMA                                  = true                                      {product} {command line}
     bool UseNUMAInterleaving                      = true                                      {product} {ergonomic}
     bool UseZGC                                   = true                                      {product} {command line}
     bool ZUncommit                                = false                                     {product} {ergonomic}

Logging:
Log output configuration:
 #0: stdout all=warning,class+unload=off uptime,level,tags
 #1: stderr all=off uptime,level,tags
 #2: file=/sitelogs/proj-service//gc.x.log all=off,safepoint=info,gc=info time filecount=20,filesize=46080K

Environment Variables:
PATH=/site/apps/jdk16/bin:/usr/lib64/qt-3.3/bin:/usr/local/bin:/usr/bin:/site/proj-scripts/bin
LD_LIBRARY_PATH=../app:../dist:
SHELL=/bin/bash
LANG=en_US.UTF-8

Signal Handlers:
SIGSEGV: [libjvm.so+0xdfec40], sa_mask[0]=11100100010111111101111111111110, sa_flags=SA_RESTART|SA_SIGINFO
SIGBUS: [libjvm.so+0xdfec40], sa_mask[0]=11100100010111111101111111111110, sa_flags=SA_RESTART|SA_SIGINFO
SIGFPE: [libjvm.so+0xdfec40], sa_mask[0]=11100100010111111101111111111110, sa_flags=SA_RESTART|SA_SIGINFO
SIGPIPE: [libjvm.so+0xca8830], sa_mask[0]=11100100010111111101111111111110, sa_flags=SA_RESTART|SA_SIGINFO
SIGXFSZ: [libjvm.so+0xca8830], sa_mask[0]=11100100010111111101111111111110, sa_flags=SA_RESTART|SA_SIGINFO
SIGILL: [libjvm.so+0xdfec40], sa_mask[0]=11100100010111111101111111111110, sa_flags=SA_RESTART|SA_SIGINFO
SIGUSR2: [libjvm.so+0xca7f20], sa_mask[0]=00000000000000000000000000000000, sa_flags=SA_RESTART|SA_SIGINFO
SIGHUP: [libwrapper.so+0x5390], sa_mask[0]=10000000000000000000000000000000, sa_flags=SA_RESTART
SIGINT: [libwrapper.so+0x53f0], sa_mask[0]=01000000000000000000000000000000, sa_flags=SA_RESTART
SIGTERM: [libwrapper.so+0x53c0], sa_mask[0]=00000000000000100000000000000000, sa_flags=SA_RESTART
SIGQUIT: [libjvm.so+0xca7e50], sa_mask[0]=11100100010111111101111111111110, sa_flags=SA_RESTART|SA_SIGINFO
SIGTRAP: [libjvm.so+0xdfec40], sa_mask[0]=11100100010111111101111111111110, sa_flags=SA_RESTART|SA_SIGINFO


---------------  S Y S T E M  ---------------

OS:
CentOS Linux release 7.6.1810 (Core) 
uname: Linux 3.10.0-957.el7.x86_64 #1 SMP Thu Nov 8 23:39:32 UTC 2018 x86_64
OS uptime: 497 days 6:12 hours
libc: glibc 2.17 NPTL 2.17 
rlimit (soft/hard): STACK 8192k/infinity , CORE 5242880k/5242880k , NPROC 65536/65536 , NOFILE 65536/65536 , AS infinity/infinity , CPU infinity/infinity , DATA infinity/infinity , FSIZE infinity/infinity , MEMLOCK 8388608k/8388608k
load average: 4.32 4.36 3.58

/proc/meminfo:
MemTotal:       65848876 kB
MemFree:        13733008 kB
MemAvailable:   27983412 kB
Buffers:             208 kB
Cached:         30138872 kB
SwapCached:          120 kB
Active:         19420444 kB
Inactive:       20093224 kB
Active(anon):    9537832 kB
Inactive(anon): 10323804 kB
Active(file):    9882612 kB
Inactive(file):  9769420 kB
Unevictable:           0 kB
Mlocked:               0 kB
SwapTotal:       8388604 kB
SwapFree:        8382708 kB
Dirty:               176 kB
Writeback:             0 kB
AnonPages:       9374948 kB
Mapped:         10469356 kB
Shmem:          10486812 kB
Slab:            1145928 kB
SReclaimable:    1002704 kB
SUnreclaim:       143224 kB
KernelStack:       10432 kB
PageTables:        83092 kB
NFS_Unstable:          0 kB
Bounce:                0 kB
WritebackTmp:          0 kB
CommitLimit:    36070160 kB
Committed_AS:   11183120 kB
VmallocTotal:   34359738367 kB
VmallocUsed:      442852 kB
VmallocChunk:   34325379068 kB
HardwareCorrupted:     0 kB
AnonHugePages:         0 kB
CmaTotal:              0 kB
CmaFree:               0 kB
HugePages_Total:    5120
HugePages_Free:     5120
HugePages_Rsvd:        0
HugePages_Surp:        0
Hugepagesize:       2048 kB
DirectMap4k:      205552 kB
DirectMap2M:     9134080 kB
DirectMap1G:    59768832 kB

/sys/kernel/mm/transparent_hugepage/enabled: always madvise [never]
/sys/kernel/mm/transparent_hugepage/defrag (defrag/compaction efforts parameter): [always] madvise never

Process Memory:
Virtual Size: 530953648K (peak: 531107524K)
Resident Set Size: 40461632K (peak: 40461968K) (anon: 9324672K, file: 35272K, shmem: 31101688K)
Swapped out: 0K
C-Heap outstanding allocations: 3824832K (may have wrapped)

/proc/sys/kernel/threads-max (system-wide limit on the number of threads): 512872
/proc/sys/vm/max_map_count (maximum number of memory map areas a process may have): 65530
/proc/sys/kernel/pid_max (system-wide limit on number of process identifiers): 196608

container (cgroup) information:
container_type: cgroupv1
cpu_cpuset_cpus: 0-27
cpu_memory_nodes: 0-1
active_processor_count: 28
cpu_quota: no quota
cpu_period: 100000
cpu_shares: no shares
memory_limit_in_bytes: unlimited
memory_and_swap_limit_in_bytes: unlimited
memory_soft_limit_in_bytes: unlimited
memory_usage_in_bytes: 40462565376
memory_max_usage_in_bytes: unlimited

Steal ticks since vm start: 0
Steal ticks percentage since vm start:  0.000

CPU: total 28 (initial active 28) (14 cores per cpu, 2 threads per core) family 6 model 63 stepping 2 microcode 0x3c, cx8, cmov, fxsr, ht, mmx, sse, sse2, sse3, ssse3, sse4.1, sse4.2, popcnt, lzcnt, tsc, tscinvbit, avx, avx2, aes, erms, clmul, bmi1, bmi2, fma, vzeroupper, clflush
CPU Model and flags from /proc/cpuinfo:
model name	: Intel(R) Xeon(R) CPU E5-2697 v3 @ 2.60GHz
flags		: fpu vme de pse tsc msr pae mce cx8 apic sep mtrr pge mca cmov pat pse36 clflush dts acpi mmx fxsr sse sse2 ss ht tm pbe syscall nx pdpe1gb rdtscp lm constant_tsc arch_perfmon pebs bts rep_good nopl xtopology nonstop_tsc aperfmperf eagerfpu pni pclmulqdq dtes64 monitor ds_cpl vmx smx est tm2 ssse3 sdbg fma cx16 xtpr pdcm pcid dca sse4_1 sse4_2 x2apic movbe popcnt tsc_deadline_timer aes xsave avx f16c rdrand lahf_lm abm epb ibrs ibpb stibp tpr_shadow vnmi flexpriority ept vpid fsgsbase tsc_adjust bmi1 avx2 smep bmi2 erms invpcid cqm xsaveopt cqm_llc cqm_occup_llc dtherm ida arat pln pts spec_ctrl intel_stibp

Online cpus: 0-27
Offline cpus: 28-191
BIOS frequency limitation: 2601000
Frequency switch latency (ns): 10000
Available cpu frequencies: 2601000 2600000 2500000 2400000 2300000 2200000 2100000 2000000 1900000 1800000 1700000 1600000 1500000 1400000 1300000 1200000 
Current governor: performance
Core performance/turbo boost: 1

Memory: 4k page, physical 65848876k(13732404k free), swap 8388604k(8382708k free)

vm_info: OpenJDK 64-Bit Server VM (16+36-2231) for linux-amd64 JRE (16+36-2231), built on Feb  8 2021 11:30:17 by ""mach5one"" with gcc 10.2.0

REGRESSION : Last worked in version 15

STEPS TO FOLLOW TO REPRODUCE THE PROBLEM :
Happens very rarely.


CUSTOMER SUBMITTED WORKAROUND :
Restarted app. 

FREQUENCY : rarely


",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8215754,JDK-8268524,,,,,,,,,,,,,,x86_64,,,,,,,,,linux,,,,,"0|i2t0u3:",9223372036854775807,b26,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6b00f96c,,,,,,,Verified,,"2021-05-31 01:20;stefank;It crashes with something that looks like a NULL pointer:
siginfo: si_signo: 11 (SIGSEGV), si_code: 1 (SEGV_MAPERR), si_addr: 0x0000000000000028

The offset is 0x28 (40), which matches the Method::_intrinsic_id:
---
(gdb) ptype /o Method
/* offset    |  size */  type = class Method : public Metadata {
                         private:
/*    8      |     8 */    class ConstMethod *_constMethod;
/*   16      |     8 */    class MethodData *_method_data;
/*   24      |     8 */    class MethodCounters *_method_counters;
/*   32      |     4 */    class AccessFlags {
                             private:
/*   32      |     4 */        jint _flags;

                               /* total size (bytes):    4 */
                           } _access_flags;
/*   36      |     4 */    int _vtable_index;
/*   40      |     2 */    u2 _intrinsic_id;
---

This probably happens because nm->method() returns NULL, for some reason.

The function we crash in is not inlined (it's in a separate cpp file):
---
bool Method::is_method_handle_intrinsic() const {                                                                                                                                                                                                                                         
  vmIntrinsics::ID iid = intrinsic_id();                                                                                                                                                                                                                                                  
  return (MethodHandles::is_signature_polymorphic(iid) &&                                                                                                                                                                                                                                 
          MethodHandles::is_signature_polymorphic_intrinsic(iid));                                                                                                                                                                                                                        
}                                                                                                                                                                                                                                                                                         
---
(gdb) disass Method::is_method_handle_intrinsic
Dump of assembler code for function _ZNK6Method26is_method_handle_intrinsicEv:
   0x0000000000b5d3f0 <+0>:	movzwl 0x28(%rdi),%eax
   0x0000000000b5d3f4 <+4>:	sub    $0x151,%ax
   0x0000000000b5d3f8 <+8>:	cmp    $0x5,%ax
   0x0000000000b5d3fc <+12>:	setbe  %al
   0x0000000000b5d3ff <+15>:	ret   
---
;;;","2021-05-31 05:27;eosterlund;The method() is cleared when the nmethod dies. Either because it became a zombie, or because it was unloaded by the GC. In the last GC cycle, a single class died. That implies that an nmethod might have become unloaded, and we would have enabled inline cache cleaning when walking the code cache. The crash itself happens in the relocation phase. That happens after the handshake that separates unlinking and purging of nmethods. It even happens a safepoint after said purging. At this point, we are not close to be racing with concurrent class unloading any more. But perhaps the unloading somehow missed a stale code pointer into the unloaded nmethod.;;;","2021-05-31 05:31;eosterlund;The only class that was unloaded the last GC cycle was called MethVGenerated_34335. If the callee is an unloaded nmethod, then it is rather likely to belong to a method of MethVGenerated_34335, that was called from another class loader somehow.;;;","2021-05-31 07:52;eosterlund;A very interesting observation is that the last internal exception thrown is the following:
/NoSuchMethodError'{0x0000100253de4a20}: static Lcom/company/nums/biz/compiler/VMethRequest;.<clinit>()V> (0x0000100253de4a20)
thrown [open/src/hotspot/share/prims/jni.cpp, line 1210]

There is a whole bunch of similar looking issues reported in the log.

So some JNI code is asking for the jmethodID of the class initializer (VMethRequest::<clinit>), but apparently there is no such method. This happens right after forcing linking of the class, which seemingly went well. So the fact that <clinit> doesn't exist, seems very suspicious to me. If the JNI code is calling jni_GetMethodID instead of jni_GetStaticMethodID, then that would be an explanation as to why <clinit> was reported to not exist. Because it's the wrong use of the API. So it seems highly possible that there is a bug here in how the JNI code is calling methods.

I can only imagine that the reason why the JNI code is asking for the <clinit> jmethodID, is because it wanted to call the class initializer, ensuring that the class is fully initialized before some other code is called. Otherwise, why would you look up the jmethodID unless you intend to use it. However, now that class initializer won't have been run.

This could potentially put us in a nasty situation. All static calls *except* JNI calls, ensure that the class has been initialized first, as per specification. One might argue the spec is weird for not enforcing this for JNI calls, but it is what it is. It's currently up to the user to ensure proper class initialization has happened when calling through JNI static methods. Since that might have been missed, we might be in a situation where a static method is incorrectly being executed concurrently to (in code that isn't handling concurrency), or before, the class initializer has been run. This could have potentially undefined consequences where all bets are off.

The reason I bring this up is that it looks like we crashed calling through an inline cache or similar stale pointer to an unloaded nmethod. But since 1 class died, we cleaned all inline caches of the live nmethods. So the call must have originated from something we did *not* clean. Either there is a bug in the cleaning and it missed something, or (perhaps more likely) the call went through something that was not cleaned. And that second alternative leaves us only with dead things. We do not clean inline caches of nmethods that are already dead, because you should never have been able to break the barrier into the world of the dead in the first place. Once in, there is no saving you. Coincidentally, we also clean out the jmethodID entries of dying methods suspciously late in the GC cycle, as we do not anticipate dead methods being called from JNI.

So that brings the question, how the barrier into the world of the dead could have been broken. And I think buggy jmethodID JNI calls could be a possible explanation. If such a call could call a dying method, then that method could call a not cleaned inline cache, and crash in the way that was reported. It's not completely unthinkable that such a thing could happen, provided that jmethodIDs are cleaned after the unloading handshake, unlike all other unlinking jobs. Such an issue would however be conditioned on buggy JNI code, for something weird to happen. And it looks like there is at least one relevant bug with using jmethodIDs in the crashing process.

It would be very interesting to run the program with -Xcheck:jni in an attempt to figure out if there are more JNI related bugs in the application, that could potentially cause calls into the world of the dead.

On a related note, the use of the -XX:-RelaxAccessControlCheck flag puzzles me. It applies to pre Java 8 bytecodes. Is that just an old thing that isn't used any more, or are we running pre Java 8 bytecodes? I think that's a red herring.;;;","2021-06-02 12:22;eosterlund;The internal exceptions was a red herring caused by the use of serialization. It looks fine really.;;;","2021-06-03 02:55;eosterlund;I have discovered an issue with non-monotonic inline cache cleaning, that has the potential to result in this crash.
This can manifest in slightly different shapes. But what they have in common is that a mutator sets the value of an inline cache concurrently to it being cleaned by the GC. The mutator reads the callee nmethod, and checks if it is in_use. If it is, it reads an entry to be used and installed into the inline cache. The question ""is_in_use()"", is not enough, as the nmethod can be is_unloading() also. Then, it is possible that a mutator racingly installs code pointers to unloading nmethods, right after the inline cache was cleaned. This causes the cleaning of the inline caches to be non-monotonic, and effectively undone.
On the transition out of the VM to re-try the call, a mutator may reply to the unloading handshake, and potentially even the subsequent relocation start safepoint. That can result in the inline cache not being cleaned up at all since the non-monotonic transition back to the unloading nmethod, and a call may happen in a phase later, when the nmethod is unloaded. The way that would manifest looks very similar to this crash report.;;;","2021-06-07 02:45;roboduke;Changeset: 5ebd4199
Author:    Erik Österlund <eosterlund@openjdk.org>
Date:      2021-06-07 09:44:22 +0000
URL:       https://git.openjdk.java.net/jdk/commit/5ebd4199cc57b60ab7345a019d000c0017a90fc3
;;;","2021-06-09 18:45;dholmes;A similar crash can still be seen on linux-aarch64: JDK-8268524;;;",,,,,,,,,,,,,,,,,,,,,,,,,,
"[lworld] Javac disallows calls to super.{hashCode(), equals(), toString()} on a primitive instance receiver",JDK-8267965,5050750,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,sadayapalam,sadayapalam,sadayapalam,2021-05-30 20:55,2021-05-31 05:52,2023-10-01 09:57,2021-05-31 05:52,repo-valhalla,,,,,,,repo-valhalla,tools,,0,lw3,lworld,,,,,,,,,,,,"Javac implements this restriction that the methods hashCode, equals and toString from jlO cannot be invoked on a primitive object receiver via super.{hashCode, equals, toString} - This was ancient historic behavior and has no meaning anymore - Now a primitive class author is not forbidden from expressly defining these methods and if so desired call super.xxx as part of their implementation (or anywhere else)

Confirmed with John Rose that this restriction is irregular, unnecessary, & obsolete.



",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,generic,,,,,,,,,generic,,,,,"0|i2t163:",9223372036854775807,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4dca67bd,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
[TESTBUG] cds DynamicLoaderConstraintsTest.java timed out,JDK-8267958,5050731,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,iklam,dcubed,dcubed,2021-05-29 14:20,2021-06-10 17:52,2023-10-01 09:57,2021-06-02 12:07,17,,,,,,,17,hotspot,,0,cds,tier7,,,,,,,,,,,,"The following test timed out in the JDK17 CI:

runtime/cds/appcds/loaderConstraints/DynamicLoaderConstraintsTest.java

Here's a snippet from the log file:

Command line: [/opt/mach5/mesos/work_dir/jib-master/install/jdk-17+25-2200/linux-x64-debug.jdk/jdk-17/fastdebug/bin/java -cp /opt/mach5/mesos/work_dir/slaves/a4f8fba9-f017-4328-b286-c66b6a97143d-S7258/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/608db9df-80e0-4acb-83d2-c1892b29a853/runs/3c195445-7980-442f-8aad-dc2bb1ae3e21/testoutput/test-support/jtreg_open_test_hotspot_jtreg_hotspot_runtime/classes/2/runtime/cds/appcds/loaderConstraints/DynamicLoaderConstraintsTest.d:/opt/mach5/mesos/work_dir/jib-master/install/jdk-17+25-2200/src.full/open/test/hotspot/jtreg/runtime/cds/appcds/loaderConstraints:/opt/mach5/mesos/work_dir/slaves/a4f8fba9-f017-4328-b286-c66b6a97143d-S7258/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/608db9df-80e0-4acb-83d2-c1892b29a853/runs/3c195445-7980-442f-8aad-dc2bb1ae3e21/testoutput/test-support/jtreg_open_test_hotspot_jtreg_hotspot_runtime/classes/2/test/lib:/opt/mach5/mesos/work_dir/jib-master/install/jdk-17+25-2200/src.full/open/test/lib:/opt/mach5/mesos/work_dir/slaves/a4f8fba9-f017-4328-b286-c66b6a97143d-S7258/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/608db9df-80e0-4acb-83d2-c1892b29a853/runs/3c195445-7980-442f-8aad-dc2bb1ae3e21/testoutput/test-support/jtreg_open_test_hotspot_jtreg_hotspot_runtime/classes/2/test/hotspot/jtreg/runtime/cds/appcds:/opt/mach5/mesos/work_dir/jib-master/install/jdk-17+25-2200/src.full/open/test/hotspot/jtreg/runtime/cds/appcds:/opt/mach5/mesos/work_dir/slaves/a4f8fba9-f017-4328-b286-c66b6a97143d-S7258/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/608db9df-80e0-4acb-83d2-c1892b29a853/runs/3c195445-7980-442f-8aad-dc2bb1ae3e21/testoutput/test-support/jtreg_open_test_hotspot_jtreg_hotspot_runtime/classes/2/test/hotspot/jtreg/runtime/cds/appcds/test-classes:/opt/mach5/mesos/work_dir/jib-master/install/jdk-17+25-2200/src.full/open/test/hotspot/jtreg/runtime/cds/appcds/test-classes:/opt/mach5/mesos/work_dir/slaves/a4f8fba9-f017-4328-b286-c66b6a97143d-S7258/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/608db9df-80e0-4acb-83d2-c1892b29a853/runs/3c195445-7980-442f-8aad-dc2bb1ae3e21/testoutput/test-support/jtreg_open_test_hotspot_jtreg_hotspot_runtime/classes/2/test/hotspot/jtreg/runtime/cds/appcds/dynamicArchive:/opt/mach5/mesos/work_dir/jib-master/install/jdk-17+25-2200/src.full/open/test/hotspot/jtreg/runtime/cds/appcds/dynamicArchive:/opt/mach5/mesos/work_dir/jib-master/install/jtreg/5.1/b01/bundles/jtreg_bin-5.1.zip/jtreg/lib/javatest.jar:/opt/mach5/mesos/work_dir/jib-master/install/jtreg/5.1/b01/bundles/jtreg_bin-5.1.zip/jtreg/lib/jtreg.jar -XX:MaxRAMPercentage=6.25 -Djava.io.tmpdir=/opt/mach5/mesos/work_dir/slaves/a4f8fba9-f017-4328-b286-c66b6a97143d-S7258/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/608db9df-80e0-4acb-83d2-c1892b29a853/runs/3c195445-7980-442f-8aad-dc2bb1ae3e21/testoutput/test-support/jtreg_open_test_hotspot_jtreg_hotspot_runtime/tmp -Xcomp -XX:+CreateCoredumpOnCrash -ea -esa -XX:CompileThreshold=100 -XX:+UnlockExperimentalVMOptions -server -XX:+TieredCompilation -XX:+VerifyOops -Xshare:on -XX:SharedArchiveFile=/opt/mach5/mesos/work_dir/slaves/a4f8fba9-f017-4328-b286-c66b6a97143d-S7258/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/608db9df-80e0-4acb-83d2-c1892b29a853/runs/3c195445-7980-442f-8aad-dc2bb1ae3e21/testoutput/test-support/jtreg_open_test_hotspot_jtreg_hotspot_runtime/scratch/2/appcds-15h45m41s387.jsa --add-modules java.base,jdk.httpserver --add-exports java.base/jdk.internal.misc=ALL-UNNAMED -Xlog:class+load,class+loader+constraints -cp /opt/mach5/mesos/work_dir/slaves/a4f8fba9-f017-4328-b286-c66b6a97143d-S7258/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/608db9df-80e0-4acb-83d2-c1892b29a853/runs/3c195445-7980-442f-8aad-dc2bb1ae3e21/testoutput/test-support/jtreg_open_test_hotspot_jtreg_hotspot_runtime/scratch/2/custom_app_loader.jar CustomAppLoader /opt/mach5/mesos/work_dir/slaves/a4f8fba9-f017-4328-b286-c66b6a97143d-S7258/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/608db9df-80e0-4acb-83d2-c1892b29a853/runs/3c195445-7980-442f-8aad-dc2bb1ae3e21/testoutput/test-support/jtreg_open_test_hotspot_jtreg_hotspot_runtime/scratch/2/loader_constraints.jar LoaderConstraintsApp 3 ]
[2021-05-29T15:46:38.188109900Z] Gathering output for process 1088999
Timeout refired 1200 times
[ELAPSED: 57150 ms]
[logging stdout to /opt/mach5/mesos/work_dir/slaves/a4f8fba9-f017-4328-b286-c66b6a97143d-S7258/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/608db9df-80e0-4acb-83d2-c1892b29a853/runs/3c195445-7980-442f-8aad-dc2bb1ae3e21/testoutput/test-support/jtreg_open_test_hotspot_jtreg_hotspot_runtime/scratch/2/runtime.cds.appcds.loaderConstraints.DynamicLoaderConstraintsTest.java-0023-exec.stdout]
[logging stderr to /opt/mach5/mesos/work_dir/slaves/a4f8fba9-f017-4328-b286-c66b6a97143d-S7258/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/608db9df-80e0-4acb-83d2-c1892b29a853/runs/3c195445-7980-442f-8aad-dc2bb1ae3e21/testoutput/test-support/jtreg_open_test_hotspot_jtreg_hotspot_runtime/scratch/2/runtime.cds.appcds.loaderConstraints.DynamicLoaderConstraintsTest.java-0023-exec.stderr]
[STDERR]

[2021-05-29T15:47:35.337395947Z] Waiting for completion for process 1088999
[2021-05-29T15:47:35.337418840Z] Waiting for completion finished for process 1088999
[2021-05-29T15:47:35.337425813Z] Waiting for completion for process 1088999
[2021-05-29T15:47:35.337431795Z] Waiting for completion finished for process 1088999
[2021-05-29T15:47:35.337438377Z] Waiting for completion for process 1088999
[2021-05-29T15:47:35.337443998Z] Waiting for completion finished for process 1088999
----------System.err:(1/15)----------
STATUS:Passed.
----------rerun:(49/11574)*----------

<snip>

result: Error. Program `/opt/mach5/mesos/work_dir/jib-master/install/jdk-17+25-2200/linux-x64-debug.jdk/jdk-17/fastdebug/bin/java' timed out (timeout set to 1200000ms, elapsed time including timeout handling was 1245966ms).
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8267347,,,,,,,,,,,,,,,x86_64,,,,,,,,,linux,,,,,"0|i2t11v:",9223372036854775807,b26,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,,,"2021-05-30 18:30;iklam;JDK-8267347 doubles the amount of time spent inside this test. It's better to split the test into two parts as suggested by https://github.com/openjdk/jdk/pull/4198#discussion_r641343393;;;","2021-06-02 12:07;roboduke;Changeset: ecf6112a
Author:    Ioi Lam <iklam@openjdk.org>
Date:      2021-06-02 19:05:42 +0000
URL:       https://git.openjdk.java.net/jdk/commit/ecf6112a217e7d5d504a7272111d1ac72745d8f8
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Shared classes that failed to load should not be loaded again,JDK-8267954,5050715,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,minqi,dcubed,dcubed,2021-05-28 20:24,2021-06-10 18:01,2023-10-01 09:57,2021-06-09 14:34,17,,,,,,,17,hotspot,,0,cds,tier7,,,,,,,,,,,,"The following test failed in the JDK17 CI:

runtime/cds/appcds/dynamicArchive/TestDynamicDumpAtOom.java

Here's a snippet from the log file:

----------System.err:(60/4659)----------
 stdout: [[0.028s][info][cds] trying to map /opt/mach5/mesos/work_dir/jib-master/install/jdk-17+25-2190/linux-x64-debug.jdk/jdk-17/fastdebug/lib/server/classes_nocoops.jsa
[0.028s][info][cds] Opened archive /opt/mach5/mesos/work_dir/jib-master/install/jdk-17+25-2190/linux-x64-debug.jdk/jdk-17/fastdebug/lib/server/classes_nocoops.jsa.
[0.028s][info][cds] Archive was created with UseCompressedOops = 0, UseCompressedClassPointers = 1
[0.028s][info][cds] full module graph: disabled because archive was created without full module graph
[0.028s][info][cds] Core region alignment: 4096
[0.028s][info][cds] Reserved archive_space_rs [0x0000000800000000 - 0x0000000801000000] (16777216) bytes
[0.028s][info][cds] Reserved class_space_rs   [0x0000000801000000 - 0x0000000841000000] (1073741824) bytes
[0.028s][info][cds] Mapped static  region #0 at base 0x0000000800000000 top 0x0000000800482000 (ReadWrite)
[0.028s][info][cds] Mapped static  region #1 at base 0x0000000800482000 top 0x0000000800c01000 (ReadOnly)
[0.028s][info][cds] optimized module handling: enabled
[0.028s][info][cds] full module graph: disabled
[4.560s][info][cds] Regenerate MethodHandle Holder classes...
# To suppress the following error report, specify this argument
# after -XX: or in .hotspotrc:  SuppressErrorAt=/systemDictionary.cpp:1155
#
# A fatal error has been detected by the Java Runtime Environment:
#
#  Internal Error (/opt/mach5/mesos/work_dir/slaves/3c846bae-ce30-4a97-93ee-9fef4497ccb6-S79212/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/7cf2911c-3920-446c-838e-2cc03feaaebf/runs/e9e89a5c-26dd-476a-9edf-c39c30ba55db/workspace/open/src/hotspot/share/classfile/systemDictionary.cpp:1155), pid=9363, tid=9364
#  assert(!ik->is_unshareable_info_restored()) failed: shared class can be loaded only once
#
# JRE version: Java(TM) SE Runtime Environment (17.0+25) (fastdebug build 17-ea+25-LTS-2190)
# Java VM: Java HotSpot(TM) 64-Bit Server VM (fastdebug 17-ea+25-LTS-2190, compiled mode, sharing, compressed class ptrs, serial gc, linux-amd64)
# Problematic frame:
# V  [libjvm.so+0x1845659]  SystemDictionary::load_shared_class(InstanceKlass*, Handle, Handle, ClassFileStream const*, PackageEntry*, JavaThread*)+0x79
#
# Core dump will be written. Default location: Core dumps may be processed with ""/opt/core.sh %p"" (or dumping to /opt/mach5/mesos/work_dir/slaves/3c846bae-ce30-4a97-93ee-9fef4497ccb6-S79029/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/587bbf04-d0b4-418e-9110-127721ce4043/runs/4821e22d-bce4-4532-8dcd-db4b247e46f5/testoutput/test-support/jtreg_open_test_hotspot_jtreg_hotspot_runtime/scratch/1/core.9363)
#
# An error report file with more information is saved as:
# /opt/mach5/mesos/work_dir/slaves/3c846bae-ce30-4a97-93ee-9fef4497ccb6-S79029/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/587bbf04-d0b4-418e-9110-127721ce4043/runs/4821e22d-bce4-4532-8dcd-db4b247e46f5/testoutput/test-support/jtreg_open_test_hotspot_jtreg_hotspot_runtime/scratch/1/hs_err_pid9363.log
#
# If you would like to submit a bug report, please visit:
#   https://bugreport.java.com/bugreport/crash.jsp
#
];
 stderr: [Exception in thread ""main"" java.lang.OutOfMemoryError: Java heap space
	at MiniStoreOom.main(MiniStoreOom.java:31)
]
 exitValue = 134


Here's the crashing thread's stack:

---------------  T H R E A D  ---------------

Current thread (0x00007f021c027360):  JavaThread ""DestroyJavaVM"" [_thread_in_vm, id=9364, stack(0x00007f0226e10000,0x00007f0226f11000)]

Stack: [0x00007f0226e10000,0x00007f0226f11000],  sp=0x00007f0226f0ef40,  free space=1019k
Native frames: (J=compiled Java code, j=interpreted, Vv=VM code, C=native code)
V  [libjvm.so+0x1845659]  SystemDictionary::load_shared_class(InstanceKlass*, Handle, Handle, ClassFileStream const*, PackageEntry*, JavaThread*)+0x79
V  [libjvm.so+0x1845f54]  SystemDictionary::load_instance_class_impl(Symbol*, Handle, JavaThread*)+0x4e4
V  [libjvm.so+0x1843fa8]  SystemDictionary::load_instance_class(unsigned int, Symbol*, Handle, JavaThread*)+0x28
V  [libjvm.so+0x184485d]  SystemDictionary::resolve_instance_class_or_null(Symbol*, Handle, Handle, JavaThread*)+0x77d
V  [libjvm.so+0x18465ea]  SystemDictionary::resolve_or_fail(Symbol*, Handle, Handle, bool, JavaThread*)+0x2a
V  [libjvm.so+0xa67c83]  ConstantPool::klass_at_impl(constantPoolHandle const&, int, JavaThread*)+0x1d3
V  [libjvm.so+0xe5fefc]  InterpreterRuntime::_new(JavaThread*, ConstantPool*, int)+0x8c
j  java.util.ArrayList.subList(II)Ljava/util/List;+9 java.base@17-ea
j  java.lang.String.split(Ljava/lang/String;I)[Ljava/lang/String;+303 java.base@17-ea
J 1476 c2 jdk.internal.misc.CDS.validateInputLines([Ljava/lang/String;)V java.base@17-ea (247 bytes) @ 0x00007f0220e1afe4 [0x00007f0220e1af20+0x00000000000000c4]
J 1475 c2 jdk.internal.misc.CDS.generateLambdaFormHolderClasses([Ljava/lang/String;)[Ljava/lang/Object; java.base@17-ea (113 bytes) @ 0x00007f0220e17c1c [0x00007f0220e17c00+0x000000000000001c]
v  ~StubRoutines::call_stub
V  [libjvm.so+0xe73404]  JavaCalls::call_helper(JavaValue*, methodHandle const&, JavaCallArguments*, JavaThread*)+0x504
V  [libjvm.so+0xe7459b]  JavaCalls::call_static(JavaValue*, Klass*, Symbol*, Symbol*, JavaCallArguments*, JavaThread*)+0x31b
V  [libjvm.so+0xe7498b]  JavaCalls::call_static(JavaValue*, Klass*, Symbol*, Symbol*, Handle, JavaThread*)+0x6b
V  [libjvm.so+0x12333fa]  LambdaFormInvokers::regenerate_holder_classes(JavaThread*)+0x5aa
V  [libjvm.so+0x145a56d]  MetaspaceShared::link_and_cleanup_shared_classes(JavaThread*)+0xdd
V  [libjvm.so+0xb7aa56]  DynamicArchive::prepare_for_dynamic_dumping_at_exit()+0xd6
V  [libjvm.so+0x18ab1dd]  JavaThread::invoke_shutdown_hooks()+0xbd
V  [libjvm.so+0x18b2a86]  Threads::destroy_vm()+0x116
V  [libjvm.so+0xf7f6a4]  jni_DestroyJavaVM+0x1d4
C  [libjli.so+0x3d62]  JavaMain+0x2c2
C  [libjli.so+0x7ce9]  ThreadJavaMain+0x9

Java frames: (J=compiled Java code, j=interpreted, Vv=VM code)
j  java.util.ArrayList.subList(II)Ljava/util/List;+9 java.base@17-ea
j  java.lang.String.split(Ljava/lang/String;I)[Ljava/lang/String;+303 java.base@17-ea
J 1476 c2 jdk.internal.misc.CDS.validateInputLines([Ljava/lang/String;)V java.base@17-ea (247 bytes) @ 0x00007f0220e1afe4 [0x00007f0220e1af20+0x00000000000000c4]
J 1475 c2 jdk.internal.misc.CDS.generateLambdaFormHolderClasses([Ljava/lang/String;)[Ljava/lang/Object; java.base@17-ea (113 bytes) @ 0x00007f0220e17c1c [0x00007f0220e17c00+0x000000000000001c]
v  ~StubRoutines::call_stub


The following bug tracked the same assertion failure in Loom:

    JDK-8242065 [loom] assert(!ik->is_unshareable_info_restored()) failed: shared class can be loaded only once",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8242065,,,,,,,,,,,,,,,,,,,x86_64,,,,,,,,,linux,,,,,"0|i2t0yb:",9223372036854775807,b26,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,,,"2021-05-29 06:04;dcubed;Removed the intermittent label since this failure happened
in two Tier7 job sets in a row. Bumped the priority from
P4 -> P3.;;;","2021-05-30 18:27;iklam;All 4 recent failures have been in tier7-comp+open/test/hotspot/jtreg/:hotspot_runtime, with the following VM parameters:

-Xcomp -XX:+CreateCoredumpOnCrash -ea -esa -XX:CompileThreshold=100 -XX:+UnlockExperimentalVMOptions -server -XX:-TieredCompilation -XX:-UseCompressedOops	;;;","2021-06-02 12:17;minqi;I could reproduce the failure locally.:
#0  0x00007ffff7407428 in __GI_raise (sig=sig@entry=6) at ../sysdeps/unix/sysv/linux/raise.c:54
#1  0x00007ffff740902a in __GI_abort () at abort.c:89
#2  0x00007ffff64c9c16 in os::abort (dump_core=true, siginfo=0x0, context=0x7ffff737c600 <g_stored_assertion_context>) at jdk/open/src/hotspot/os/posix/os_posix.cpp:1971
#3  0x00007ffff6748380 in VMError::report_and_die (id=-536870912, message=0x7ffff6d004b8 ""assert(!ik->is_unshareable_info_restored()) failed"", detail_fmt=0x7ffff6d00490 ""shared class can be loaded only once"",
    detail_args=0x7ffff7fafda8, thread=0x7ffff00284f0, pc=0x0, siginfo=0x0, context=0x7ffff737c600 <g_stored_assertion_context>,
    filename=0x7ffff6cff7e0 ""jdk/open/src/hotspot/share/classfile/systemDictionary.cpp"", lineno=1155, size=0)
    at jdk/open/src/hotspot/share/utilities/vmError.cpp:1636
#4  0x00007ffff6747603 in VMError::report_and_die (thread=0x7ffff00284f0, context=0x7ffff737c600 <g_stored_assertion_context>,
    filename=0x7ffff6cff7e0 ""jdk/open/src/hotspot/share/classfile/systemDictionary.cpp"", lineno=1155, message=0x7ffff6d004b8 ""assert(!ik->is_unshareable_info_restored()) failed"",
    detail_fmt=0x7ffff6d00490 ""shared class can be loaded only once"", detail_args=0x7ffff7fafda8) at jdk/open/src/hotspot/share/utilities/vmError.cpp:1329
#5  0x00007ffff5d3ce56 in report_vm_error (file=0x7ffff6cff7e0 ""jdk/open/src/hotspot/share/classfile/systemDictionary.cpp"", line=1155,
    error_msg=0x7ffff6d004b8 ""assert(!ik->is_unshareable_info_restored()) failed"", detail_fmt=0x7ffff6d00490 ""shared class can be loaded only once"")
    at jdk/open/src/hotspot/share/utilities/debug.cpp:282
#6  0x00007ffff666e4ea in SystemDictionary::load_shared_class (ik=0x8001fa488, class_loader=..., protection_domain=..., cfs=0x0, pkg_entry=0x7ffff006be40, __the_thread__=0x7ffff00284f0)
    at jdk/open/src/hotspot/share/classfile/systemDictionary.cpp:1155
#7  0x00007ffff666db2b in SystemDictionary::load_shared_boot_class (class_name=0x8004e8de0, pkg_entry=0x7ffff006be40, __the_thread__=0x7ffff00284f0)
    at jdk/open/src/hotspot/share/classfile/systemDictionary.cpp:967
#8  0x00007ffff666ea2c in SystemDictionary::load_instance_class_impl (class_name=0x8004e8de0, class_loader=..., __the_thread__=0x7ffff00284f0)
    at jdk/open/src/hotspot/share/classfile/systemDictionary.cpp:1292
#9  0x00007ffff666ee09 in SystemDictionary::load_instance_class (name_hash=1129763497, name=0x8004e8de0, class_loader=..., __the_thread__=0x7ffff00284f0)
    at jdk/open/src/hotspot/share/classfile/systemDictionary.cpp:1364
#10 0x00007ffff666d054 in SystemDictionary::resolve_instance_class_or_null (name=0x8004e8de0, class_loader=..., protection_domain=..., __the_thread__=0x7ffff00284f0)
    at jdk/open/src/hotspot/share/classfile/systemDictionary.cpp:724
#11 0x00007ffff666bc89 in SystemDictionary::resolve_instance_class_or_null_helper (class_name=0x8004e8de0, class_loader=..., protection_domain=..., __the_thread__=0x7ffff00284f0)
    at jdk/open/src/hotspot/share/classfile/systemDictionary.cpp:295
#12 0x00007ffff666c3dc in SystemDictionary::resolve_super_or_fail (class_name=0x8005a1a00, super_name=0x8004e8de0, class_loader=..., protection_domain=..., is_superclass=false, __the_thread__=0x7ffff00284f0)
    at jdk/open/src/hotspot/share/classfile/systemDictionary.cpp:428
#13 0x00007ffff666e05f in SystemDictionary::check_shared_class_super_type (klass=0x8002bdd98, super_type=0x8001fa488, class_loader=..., protection_domain=..., is_superclass=false, __the_thread__=0x7ffff00284f0)
    at jdk/open/src/hotspot/share/classfile/systemDictionary.cpp:1078
#14 0x00007ffff666e17c in SystemDictionary::check_shared_class_super_types (ik=0x8002bdd98, class_loader=..., protection_domain=..., __the_thread__=0x7ffff00284f0)
    at jdk/open/src/hotspot/share/classfile/systemDictionary.cpp:1107
#15 0x00007ffff666e558 in SystemDictionary::load_shared_class (ik=0x8002bdd98, class_loader=..., protection_domain=..., cfs=0x0, pkg_entry=0x7ffff006be40, __the_thread__=0x7ffff00284f0)
    at jdk/open/src/hotspot/share/classfile/systemDictionary.cpp:1162
#16 0x00007ffff666db2b in SystemDictionary::load_shared_boot_class (class_name=0x8005a1a00, pkg_entry=0x7ffff006be40, __the_thread__=0x7ffff00284f0)
    at jdk/open/src/hotspot/share/classfile/systemDictionary.cpp:967
#17 0x00007ffff666ea2c in SystemDictionary::load_instance_class_impl (class_name=0x8005a1a00, class_loader=..., __the_thread__=0x7ffff00284f0)
    at jdk/open/src/hotspot/share/classfile/systemDictionary.cpp:1292
#18 0x00007ffff666ee09 in SystemDictionary::load_instance_class (name_hash=336193017, name=0x8005a1a00, class_loader=..., __the_thread__=0x7ffff00284f0)
    at jdk/open/src/hotspot/share/classfile/systemDictionary.cpp:1364
#19 0x00007ffff666d054 in SystemDictionary::resolve_instance_class_or_null (name=0x8005a1a00, class_loader=..., protection_domain=..., __the_thread__=0x7ffff00284f0)
    at jdk/open/src/hotspot/share/classfile/systemDictionary.cpp:724
#20 0x00007ffff666bc89 in SystemDictionary::resolve_instance_class_or_null_helper (class_name=0x8005a1a00, class_loader=..., protection_domain=..., __the_thread__=0x7ffff00284f0)
    at jdk/open/src/hotspot/share/classfile/systemDictionary.cpp:295
#21 0x00007ffff666c3dc in SystemDictionary::resolve_super_or_fail (class_name=0x80050f988, super_name=0x8005a1a00, class_loader=..., protection_domain=..., is_superclass=false, __the_thread__=0x7ffff00284f0)
    at jdk/open/src/hotspot/share/classfile/systemDictionary.cpp:428
#22 0x00007ffff666e05f in SystemDictionary::check_shared_class_super_type (klass=0x800213208, super_type=0x8002bdd98, class_loader=..., protection_domain=..., is_superclass=false, __the_thread__=0x7ffff00284f0)
    at jdk/open/src/hotspot/share/classfile/systemDictionary.cpp:1078
#23 0x00007ffff666e17c in SystemDictionary::check_shared_class_super_types (ik=0x800213208, class_loader=..., protection_domain=..., __the_thread__=0x7ffff00284f0)
    at jdk/open/src/hotspot/share/classfile/systemDictionary.cpp:1107
#24 0x00007ffff666e558 in SystemDictionary::load_shared_class (ik=0x800213208, class_loader=..., protection_domain=..., cfs=0x0, pkg_entry=0x7ffff006be40, __the_thread__=0x7ffff00284f0)
    at jdk/open/src/hotspot/share/classfile/systemDictionary.cpp:1162
#25 0x00007ffff666db2b in SystemDictionary::load_shared_boot_class (class_name=0x80050f988, pkg_entry=0x7ffff006be40, __the_thread__=0x7ffff00284f0)
    at jdk/open/src/hotspot/share/classfile/systemDictionary.cpp:967
#26 0x00007ffff666ea2c in SystemDictionary::load_instance_class_impl (class_name=0x80050f988, class_loader=..., __the_thread__=0x7ffff00284f0)
    at jdk/open/src/hotspot/share/classfile/systemDictionary.cpp:1292
#27 0x00007ffff666ee09 in SystemDictionary::load_instance_class (name_hash=948374592, name=0x80050f988, class_loader=..., __the_thread__=0x7ffff00284f0)
    at jdk/open/src/hotspot/share/classfile/systemDictionary.cpp:1364
#28 0x00007ffff666d054 in SystemDictionary::resolve_instance_class_or_null (name=0x80050f988, class_loader=..., protection_domain=..., __the_thread__=0x7ffff00284f0)
    at jdk/open/src/hotspot/share/classfile/systemDictionary.cpp:724
#29 0x00007ffff666bc89 in SystemDictionary::resolve_instance_class_or_null_helper (class_name=0x80050f988, class_loader=..., protection_domain=..., __the_thread__=0x7ffff00284f0)
    at jdk/open/src/hotspot/share/classfile/systemDictionary.cpp:295
#30 0x00007ffff666bb3c in SystemDictionary::resolve_or_null (class_name=0x80050f988, class_loader=..., protection_domain=..., __the_thread__=0x7ffff00284f0)
    at jdk/open/src/hotspot/share/classfile/systemDictionary.cpp:278
#31 0x00007ffff666ba83 in SystemDictionary::resolve_or_fail (class_name=0x80050f988, class_loader=..., protection_domain=..., throw_error=true, __the_thread__=0x7ffff00284f0)
    at jdk/open/src/hotspot/share/classfile/systemDictionary.cpp:264
#32 0x00007ffff5d24cd5 in ConstantPool::klass_at_impl (this_cp=..., which=13, __the_thread__=0x7ffff00284f0) at jdk/open/src/hotspot/share/oops/constantPool.cpp:512
#33 0x00007ffff5bb42ae in ConstantPool::klass_at (this=0x8008b3948, which=13, __the_thread__=0x7ffff00284f0) at jdk/open/src/hotspot/share/oops/constantPool.hpp:420
#34 0x00007ffff5ff24fc in InterpreterRuntime::_new (current=0x7ffff00284f0, pool=0x8008b3948, index=13) at jdk/open/src/hotspot/share/interpreter/interpreterRuntime.cpp:219
#35 0x00007fffe579ed88 in ?? ()
It looks the supter_type is already loaded but when we call find_class, which does not check the shared dictionary. We could check first for the shared dictionary if CDS enabled.;;;","2021-06-04 11:15;minqi;InstanceKlass::restore_unshareable_info(ClassLoaderData* loader_data, Handle protection_domain, PackageEntry* pkg_entry, TRAPS)
This function is problematic --- when anything wrong (like oom in this case) we did not clean up to its original form. This is why it failed --- when it failed, it already set mirror so the _java_mirror.ptr_raw() is valid.
Need to clean up those fields at exception or error.;;;","2021-06-09 14:34;roboduke;Changeset: 7ff6e7b2
Author:    Yumin Qi <minqi@openjdk.org>
Date:      2021-06-09 21:33:28 +0000
URL:       https://git.openjdk.java.net/jdk/commit/7ff6e7b2b1be088c37f50756b6822be01b4c657d
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
restore 'volatile' to ObjectMonitor::_owner field,JDK-8267953,5050712,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,dcubed,dcubed,dcubed,2021-05-28 16:54,2021-06-07 15:16,2023-10-01 09:57,2021-05-29 10:47,17,,,,,,,17,hotspot,,0,,,,,,,,,,,,,,"The following RFE:

    JDK-8238174 migrate ObjectMonitor::_owner field away from C++ volatile semantics

removed 'volatile' from the ObjectMonitor::_owner field.
However, subsequent discussions concluded that we are
going to leave 'volatile' on fields that are racy so that the
reader has a clear indicator about the racy state of the field.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8238174,JDK-8234192,,,,,,,,,,,,,,,,,,generic,,,,,,,,,generic,,,,,"0|i2t0xn:",9223372036854775807,b25,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,,,"2021-05-29 10:47;roboduke;Changeset: 66274320
Author:    Daniel D. Daugherty <dcubed@openjdk.org>
Date:      2021-05-29 17:46:35 +0000
URL:       https://git.openjdk.java.net/jdk/commit/66274320251f492b0bba79cdfef88ad5b0d104fa
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
async logging supports to dynamically change tags and decorators,JDK-8267952,5050711,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,xliu,xliu,xliu,2021-05-28 16:49,2021-07-15 10:20,2023-10-01 09:57,2021-06-28 11:18,17,18,,,,,,17,hotspot,,0,logging,tier4,tier6,,,,,,,,,,,"I read JEP-158 again, here is the statement: 
""Logging can be configured dynamically at runtime via jcmd or MBeans""

Currently, dcmd can change tags and decorators on the fly. 

eg. The following command affects log output #2, which is file=gc.log

jcmd 120863  VM.log  output=file=gc.log  what='all=off,logging+thread=debug,gc=debug'  decorators=t,tid,l,tags

dmcd can use 'what' and 'decorators' to change log selections and decorators. those things are changeable for an established log output. 

This feature is supported well by synchronous logging. Currently,  it's not MT-safe in async mode. 
",,,,,,,,,,,JDK-8270664,JDK-8269553,,,,,,,,,,,,,,,,,,JDK-8269237,,,,,,,JDK-8229517,,,,,,,,,,,,,,,generic,,,,,,,,,generic,,,,,"0|i2t0xf:",9223372036854775807,b29,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,,,"2021-06-23 07:05;dholmes;This is not an Enhancement it is a bug. The new async logging code can crash when there is a concurrent log configuration update (via dcmd). This needs ot be fixed for async logging mode to be robust.

Changing to P3 and targetting to 17.;;;","2021-06-23 07:46;dcubed;The following test failed in the JDK17 CI: 

gtest/AsyncLogGtest.java 

Here's a snippet from the log file: 

----------System.out:(53/3924)---------- 
Command line: [/opt/mach5/mesos/work_dir/jib-master/install/jdk-17+28-2528/linux-x64-debug.test/hotspot/gtest/server/gtestLauncher -jdk /opt/mach5/mesos/work_dir/jib-master/install/jdk-17+28-2528/linux-x64-debug.jdk/jdk-17/fastdebug --gtest_output=xml:test_result.xml --gtest_catch_exceptions=0test_result.xml --gtest_filter=Log*Test* -Xlog:async] 
[2021-06-23T09:22:31.982273745Z] Gathering output for process 1668 
[2021-06-23T09:22:41.044959272Z] Waiting for completion for process 1668 
[2021-06-23T09:22:41.045155683Z] Waiting for completion finished for process 1668 
Output and diagnostic info for process 1668 was saved into 'pid-1668-output.log' 
Note: Google Test filter = Log*Test* 
[==========] Running 38 tests from 4 test cases. 
[----------] Global test environment set-up. 
[----------] 8 tests from LogTest 
[ RUN ] LogTest.prefix_vm 
[ OK ] LogTest.prefix_vm (1 ms) 
[ RUN ] LogTest.large_message_vm 
[ OK ] LogTest.large_message_vm (0 ms) 
[ RUN ] LogTest.enabled_logtarget_vm 
[ OK ] LogTest.enabled_logtarget_vm (0 ms) 
[ RUN ] LogTest.disabled_logtarget_vm 
[ OK ] LogTest.disabled_logtarget_vm (0 ms) 
[ RUN ] LogTest.enabled_loghandle_vm 
[ OK ] LogTest.enabled_loghandle_vm (1 ms) 
[ RUN ] LogTest.disabled_loghandle_vm 
[ OK ] LogTest.disabled_loghandle_vm (0 ms) 
[ RUN ] LogTest.enabled_logtargethandle_vm 
[ OK ] LogTest.enabled_logtargethandle_vm (0 ms) 
[ RUN ] LogTest.disabled_logtargethandle_vm 
[ OK ] LogTest.disabled_logtargethandle_vm (1 ms) 
[----------] 8 tests from LogTest (172 ms total) 

[----------] 15 tests from LogConfigurationTest 
[ RUN ] LogConfigurationTest.describe_vm 
# To suppress the following error report, specify this argument 
# after -XX: or in .hotspotrc: SuppressErrorAt=/logDecorations.cpp:78 
# 
# A fatal error has been detected by the Java Runtime Environment: 
# 
# Internal Error (/opt/mach5/mesos/work_dir/slaves/3c846bae-ce30-4a97-93ee-9fef4497ccb6-S79382/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/c37d2edc-4255-4124-8502-b80735762f72/runs/07669906-43eb-4126-a0ff-c606a1911bbc/workspace/open/src/hotspot/share/logging/logDecorations.cpp:78), pid=1668, tid=1674 
# assert(_decorators.is_decorator(decorator)) failed: decorator was not part of the decorator set specified at creation. 
# 
# JRE version: Java(TM) SE Runtime Environment (17.0+28) (fastdebug build 17-ea+28-LTS-2528) 
# Java VM: Java HotSpot(TM) 64-Bit Server VM (fastdebug 17-ea+28-LTS-2528, mixed mode, tiered, compressed oops, compressed class ptrs, g1 gc, linux-amd64) 
# Problematic frame: 
# V [libjvm.so+0x15feb54] LogDecorations::decoration(LogDecorators::Decorator, char*, unsigned long) const+0x94 
# 
# Core dump will be written. Default location: Core dumps may be processed with ""/opt/core.sh %p"" (or dumping to /opt/mach5/mesos/work_dir/slaves/35546316-ed70-4084-8244-d672e7734fd1-S57023/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/2ff7ffb6-1707-4d45-9528-113536e6517a/runs/0f0617da-bedb-4636-9b0f-00c0e42fd89c/testoutput/test-support/jtreg_open_test_hotspot_jtreg_hotspot_misc/scratch/1/core.1668) 
# 
# An error report file with more information is saved as: 
# /opt/mach5/mesos/work_dir/slaves/35546316-ed70-4084-8244-d672e7734fd1-S57023/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/2ff7ffb6-1707-4d45-9528-113536e6517a/runs/0f0617da-bedb-4636-9b0f-00c0e42fd89c/testoutput/test-support/jtreg_open_test_hotspot_jtreg_hotspot_misc/scratch/1/hs_err_pid1668.log 
# 
# If you would like to submit a bug report, please visit: 
# https://bugreport.java.com/bugreport/crash.jsp 
# 
assert failed: assert(_decorators.is_decorator(decorator)) failed: decorator was not part of the decorator set specified at creation. 
[2021-06-23T09:22:41.096726803Z] Waiting for completion for process 1668 
[2021-06-23T09:22:41.096848934Z] Waiting for completion finished for process 1668 
----------System.err:(12/722)---------- 
java.lang.AssertionError: gtest execution failed; exit code = 134. 
at GTestWrapper.main(GTestWrapper.java:98) 
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method) 
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77) 
at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) 
at java.base/java.lang.reflect.Method.invoke(Method.java:568) 
at com.sun.javatest.regtest.agent.MainActionHelper$AgentVMRunnable.run(MainActionHelper.java:312) 
at java.base/java.lang.Thread.run(Thread.java:833) 

JavaTest Message: Test threw exception: java.lang.AssertionError 
JavaTest Message: shutting down test 

result: Failed. Execution failed: `main' threw exception: java.lang.AssertionError: gtest execution failed; exit code = 134. 


Here's the crashing thread's stack: 

--------------- T H R E A D --------------- 

Current thread (0x0000560c2bfd8a80): Thread ""AsyncLog Thread"" [stack: 0x00007f79dbe24000,0x00007f79dbf24000] [id=1674] 

Stack: [0x00007f79dbe24000,0x00007f79dbf24000], sp=0x00007f79dbf225f0, free space=1017k 
Native frames: (J=compiled Java code, j=interpreted, Vv=VM code, C=native code) 
V [libjvm.so+0x15feb54] LogDecorations::decoration(LogDecorators::Decorator, char*, unsigned long) const+0x94 
V [libjvm.so+0x1601977] LogFileStreamOutput::write(LogDecorations const&, char const*)+0x77 
V [libjvm.so+0x1600c62] LogFileOutput::write_blocking(LogDecorations const&, char const*)+0x42 
V [libjvm.so+0x15fb1c5] AsyncLogWriter::run()+0x395 
V [libjvm.so+0x1c122c0] Thread::call_run()+0x100 
V [libjvm.so+0x18df194] thread_native_entry(Thread*)+0x104 


[error occurred during error reporting (printing target Java thread stack), id 0xb, SIGSEGV (0xb) at pc=0x00000000801f0fc3] 

This failure mode was previously fixed via: 

JDK-8267926 AsyncLogGtest.java fails on assert with: decorator was not part of the decorator set specified at creation.;;;","2021-06-23 07:51;dcubed;Here's a log file snippet for the jdk-18+3-54-tier6 sighting:

gtest/AsyncLogGtest.java

[----------] 15 tests from LogConfigurationTest
[ RUN      ] LogConfigurationTest.describe_vm
[       OK ] LogConfigurationTest.describe_vm (0 ms)
[ RUN      ] LogConfigurationTest.update_output_vm
[0.269s][info][nmethod,install] Installing method (3) java.util.concurrent.ConcurrentHashMap.addCount(JI)V 
[       OK ] LogConfigurationTest.update_output_vm (1 ms)
[ RUN      ] LogConfigurationTest.add_new_output_vm
[thread 12463 also had an error]
#
# A fatal error has been detected by the Java Runtime Environment:
#
#  SIGSEGV (0xb) at pc=0x00007f557cb246c3, pid=12452, tid=12452
#
# JRE version: Java(TM) SE Runtime Environment (18.0+3) (fastdebug build 18-ea+3-54)
# Java VM: Java HotSpot(TM) 64-Bit Server VM (fastdebug 18-ea+3-54, mixed mode, tiered, compressed oops, compressed class ptrs, g1 gc, linux-amd64)
# Problematic frame:
# V  [libjvm.so+0x16146c3]  LogOutputList::clear()+0x43
#
# Core dump will be written. Default location: Core dumps may be processed with ""/opt/core.sh %p"" (or dumping to /opt/mach5/mesos/work_dir/slaves/3c846bae-ce30-4a97-93ee-9fef4497ccb6-S124123/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/0dfaafe8-d9d9-47ac-b524-967be0d1604f/runs/dcc46593-1148-4b4f-8b42-77b2b0b9bd7a/testoutput/test-support/jtreg_open_test_hotspot_jtreg_hotspot_misc/scratch/1/core.12452)
#
# An error report file with more information is saved as:
# /opt/mach5/mesos/work_dir/slaves/3c846bae-ce30-4a97-93ee-9fef4497ccb6-S124123/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/0dfaafe8-d9d9-47ac-b524-967be0d1604f/runs/dcc46593-1148-4b4f-8b42-77b2b0b9bd7a/testoutput/test-support/jtreg_open_test_hotspot_jtreg_hotspot_misc/scratch/1/hs_err_pid12452.log
#
# If you would like to submit a bug report, please visit:
#   https://bugreport.java.com/bugreport/crash.jsp
# The crash happened outside the Java Virtual Machine in native code.
# See problematic frame for where to report the bug.
#

[2021-06-23T05:39:56.799279021Z] Waiting for completion for process 12452
[2021-06-23T05:39:56.799599299Z] Waiting for completion finished for process 12452
----------System.err:(12/722)----------
java.lang.AssertionError: gtest execution failed; exit code = 134.
	at GTestWrapper.main(GTestWrapper.java:98)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at com.sun.javatest.regtest.agent.MainActionHelper$AgentVMRunnable.run(MainActionHelper.java:312)
	at java.base/java.lang.Thread.run(Thread.java:833)

JavaTest Message: Test threw exception: java.lang.AssertionError


Here's the crashing thread's stack:

---------------  T H R E A D  ---------------

Current thread (0x0000555afbfdc150):  JavaThread ""main"" [_thread_in_native, id=12452, stack(0x00007ffce3374000,0x00007ffce3474000)]

Stack: [0x00007ffce3374000,0x00007ffce3474000],  sp=0x00007ffce3472d40,  free space=1019k
Native frames: (J=compiled Java code, j=interpreted, Vv=VM code, C=native code)
V  [libjvm.so+0x16146c3]  LogOutputList::clear()+0x43
V  [libjvm.so+0x160cf5a]  LogConfiguration::disable_logging()+0x4a
V  [libjvm.so+0x36bcd9]  LogTestFixture::restore_config()+0x19
V  [libjvm.so+0x36bdbb]  LogTestFixture::~LogTestFixture()+0x3b
V  [libjvm.so+0x4bfb7c]  LogConfigurationTest_add_new_output_vm_Test::~LogConfigurationTest_add_new_output_vm_Test()+0x1c
V  [libjvm.so+0x1e5b329]  testing::TestInfo::Run()+0xc9
V  [libjvm.so+0x1e5b43f]  testing::TestCase::Run()+0xaf
V  [libjvm.so+0x1e5d37f]  testing::internal::UnitTestImpl::RunAllTests()+0x50f
V  [libjvm.so+0x1e594c2]  testing::UnitTest::Run()+0x92
V  [libjvm.so+0x36ad37]  runUnitTestsInner(int, char**)+0x3a7
C  [gtestLauncher+0x6e5]  main+0x20


siginfo: si_signo: 11 (SIGSEGV), si_code: 1 (SEGV_MAPERR), si_addr: 0x0000000100000010;;;","2021-06-23 11:33;xliu;I think the first sighting is understood. David helped me pinpoint the root cause. here is the bug.

AsyncLogWriter::flush() may not flush out all messages when it returns. This happens in contention with async log thread and the flushing thread invokes flush() at least twice in a row. 
In simple words: the original ""handshake"" protocol is designed for two persons. As long as two hands shake, the progress is synchronized. It doesn't matter who offer hand first. 
David discover that the protocol is  broken because one person may offer two hands and handshake himself quickly...

Here is the original discussion:
https://mail.openjdk.java.net/pipermail/hotspot-runtime-dev/2021-June/049546.html

The second sighting is new to me.  I am not sure it is caused by this known issue. need further investigation.;;;","2021-06-28 11:18;roboduke;Changeset: 09bb8468
Author:    Xin Liu <xliu@openjdk.org>
Date:      2021-06-28 18:17:45 +0000
URL:       https://git.openjdk.java.net/jdk17/commit/09bb84685fd959157857cf7739aedddd4a5e0cee
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
CI: Preserve consistency between has_subklass() and is_subclass_of(),JDK-8267947,5050682,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,vlivanov,vlivanov,vlivanov,2021-05-28 09:35,2021-07-05 23:40,2023-10-01 09:57,2021-06-01 05:00,17,,,,,,,17,hotspot,,0,ci,hs-comp-triaged,intermittent,oracle-triage-11,oracle-triage-17,,,,,,,,,Preserve consistency between ciKlass::is_subclass_of()/is_subtype_of() and ciInstanceKlass::has_subklass().,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8267979,JDK-8268676,,,JDK-8261192,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2t0uj:",9223372036854775807,b25,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2021-06-01 05:00;roboduke;Changeset: ffd28c4a
Author:    Vladimir Ivanov <vlivanov@openjdk.org>
Date:      2021-06-01 11:59:28 +0000
URL:       https://git.openjdk.java.net/jdk/commit/ffd28c4a86aa8e8e59afb13abd4aeeea66557f66
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
[macos] java/awt/print/Dialog/DialogOwnerTest.java fails,JDK-8267940,5050669,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,psadhukhan,amrsahu,amrsahu,2021-05-28 06:13,2021-07-28 21:13,2023-10-01 09:57,2021-07-21 21:30,11,15,16,17,,,,18,client-libs,,0,macos,sn_98,sqebug,,,,,,,,,,,"Tested on Mac OS JDK 15.0.2,JDK 16.0.2, JDK 17b20

Steps to reproduce:
1. Open dialog by click On top button. 2. Move dialog to overlap the Owner window 3. Click on Owner window to make a focus

Actual behavior:
On Top' tests all windows are not stay behind the owner window",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"2021-05-28 06:13;amrsahu;DialogOwnerWindow.png;https://bugs.openjdk.org/secure/attachment/94856/DialogOwnerWindow.png",,,,,,,,,,,generic,,,,,,,,,os_x,,,,,"0|i2t0rn:",9223372036854775807,b08,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4b09ce31,,,,,,,,,"2021-06-09 00:47;psadhukhan;This seems to be the behaviour right from jdk11b18 where DialogOwner class and this test was inducted via JDK-8203796 not only in mac but in windows too ie,
""On Top"" print dialogs should stay behind the ""Owner Window"" as per instruction but is not.

I guess there is some ambiguity in test instruction or clarity in understanding test instructions is not there
because Test instructions says ""For On Top tests all windows should stay *behind* the owner window.""
but ""Owner Window"" instruction says ""For tests that are 'Owned' or 'On Top' the dialog
must always stay *above* this window. "";;;","2021-07-21 21:30;roboduke;Changeset: 9131a8f5
Author:    Prasanta Sadhukhan <psadhukhan@openjdk.org>
Date:      2021-07-22 04:29:20 +0000
URL:       https://git.openjdk.java.net/jdk/commit/9131a8f5f241b04c28a875fddb7a060cc9a3c252
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Clarify the specification of iterator and spliterator forEachRemaining,JDK-8267939,5050668,Bug,Closed,JDK,JDK,software,duke,,,P2,Fixed,psandoz,dbessono,dbessono,2021-05-28 06:07,2021-08-05 09:44,2023-10-01 09:57,2021-06-03 15:04,17,,,,,,,17,core-libs,,0,conformance,regression,tck-red-17,,,,,,,,,,,"java.util.PrimitiveIterator::void forEachRemaining specification says:

 >  Performs the given action for each remaining element, in the order elements occur when iterating, until all elements have been processed or the action throws an exception

https://download.java.net/java/early_access/jdk17/docs/api/java.base/java/util/PrimitiveIterator.OfInt.html#forEachRemaining(java.util.function.IntConsumer)

Code sample

===========================
import java.util.PrimitiveIterator;
import java.util.stream.IntStream;

public class Test {
    public static void main(String... args) {
        PrimitiveIterator.OfInt iterator = IntStream.range(1, 5).iterator();
        try { iterator.forEachRemaining(
                (int i) -> { if (i < 3) System.err.println(i); else throw new RuntimeException(""Stop!""); });
        } catch (Exception e) {
            System.err.println(e);
        }
        System.out.println(""iterator.nextInt() = "" + iterator.nextInt());
    }
}
===========================

Checking JDK17b23:

> /17/23/jdk-17/bin/javac Test.java
> /17/23/jdk-17/bin/java Test
1
2
java.lang.RuntimeException: Stop!
iterator.nextInt() = 4

Checking JDK17b24:

> /17/24/jdk-17/bin/javac Test.java
> /17/24/jdk-17/bin/java Test

1
2
java.lang.RuntimeException: Stop!
Exception in thread ""main"" java.util.NoSuchElementException
	at java.base/java.util.Spliterators$2Adapter.nextInt(Spliterators.java:747)
	at Test.main(Test.java:12)

",,,,,,,,,,,,,,,,,,,,,,,,JDK-8268079,,,JDK-8267949,,,JCK-7316203,,,,,,,,,,,,,,,,,,,,,,,,,,,,b24,,,,,,,,"0|i2t0rf:",9223372036854775807,b26,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@38ded199,,,,,,,,,"2021-05-28 08:14;psandoz;This may be due to JDK-8267452 (Delegate forEachRemaining in Spliterators.iterator()).

However, i think the JCK test may be incorrect as the specification of Iterator.forEachRemaining states:

     * <p>
     * Subsequent behavior of an iterator is unspecified if the action throws an
     * exception.
;;;","2021-05-28 09:00;dbessono;Thanks,

This note seems to be missing for 

default void forEachRemaining​(IntConsumer action);;;","2021-05-28 11:43;psandoz;Thanks, yes it's omitted from the specializations but in effect all behaviour is derived from Iterator.forEachRemaining. We can make that clearer. I filed JDK-8267949.;;;","2021-05-28 13:06;dbessono;Thank you.

After giving it another thought...

Another question is - whether this behavioral change is OK since ""forEachRemaining(IntConsumer action)"" never had the note 
https://docs.oracle.com/javase/8/docs/api/java/util/PrimitiveIterator.OfInt.html#forEachRemaining-java.util.function.IntConsumer-

  “Subsequent behavior of an iterator is unspecified if the action throws an exception”

while forEachRemaining (Consumer<? super Integer>) got it in SE9.
https://docs.oracle.com/javase/9/docs/api/java/util/PrimitiveIterator.OfInt.html#forEachRemaining-java.util.function.Consumer-

And this difference makes confidently think that method accepting IntConsumer must behave differently - resuming the iteration after emergent exception was thrown, as it says nothing unlike the other method. 

Hypothetically some apps could have strangely relied on this difference in the specs. 

;;;","2021-05-28 13:25;psandoz;To be clear the current behavior was not intended. It was mistakenly omitted when the specification to Iterator.forEachRemaining was updated.

I think the spec as currently written is ambiguous on what the state of the primitive iterator is in when forEachRemaining throws an exception. It's easy to infer what the behavior might be from implementation specification. However, there is no indication in the specification that it be the case. In this respect the test, arguably, is incorrectly extrapolating from the implementation specification.

I think clarity in specified behavior proposed by JDK-8267949 is justifiable, ensuring the intended uniformity of behavior. It will likely have minimal impact, given the intent of the primitive specializations, and the behavior of PrimitiveIterator.OfInt.forEachRemaining(Consumer<? super Integer> action).

;;;","2021-05-28 18:58;tvaleev;I agree that the JCK test is incorrect because it's not explicitly stated that the iterator will continue iteration from the next element if forEachRemaining function throws an exception. Also, note that it's not specified in Spliterator specifications either what will happen if the exception is thrown. It only says:

> Performs the given action for each remaining element, sequentially in the current thread, until all elements have been processed or the action throws an exception. If this Spliterator is ORDERED, actions are performed in encounter order. Exceptions thrown by the action are relayed to the caller.

Essentially it's very similar to what we have on PrimitiveIterator specification:

> Performs the given action for each remaining element, in the order elements occur when iterating, until all elements have been processed or the action throws an exception. Errors or runtime exceptions thrown by the action are relayed to the caller.

Now, iterator.forEachRemaining delegates to spliterator.forEachRemaining. To me, it looks like it was not explicitly specified, so it's wrong to rely on this behavior. I think, existing spliterators may react differently on exceptions during forEachRemaining. If the spec will be updated to explicitly state that the subsequent behavior is unspecified then it's better to update the spec in the same way for spliterators as well.;;;","2021-06-03 15:04;roboduke;Changeset: c1f3094f
Author:    Paul Sandoz <psandoz@openjdk.org>
Date:      2021-06-03 22:03:35 +0000
URL:       https://git.openjdk.java.net/jdk/commit/c1f3094f814a4f3586222aad50ed314906b5bc9c
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,
(sctp) SCTP channel factory methods should check platform support,JDK-8267938,5050667,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,chegar,chegar,chegar,2021-05-28 06:05,2021-06-07 15:17,2023-10-01 09:57,2021-05-31 02:45,11.0.11,16,,,,,,17,core-libs,,0,noreg-other,,,,,,,,,,,,,"The SCTP channel factory methods, namely SctpChannel::open, SctpServerChannel::open, and SctpMultiChannel::open, are specified to throw UnsupportedOperationException, if the SCTP protocol is not supported. Currently, underlying platform support is assumed once the appropriate libsctp.so.1 library is present (along with its supported interface functions). This may not always be the case, e.g. if the Linux sctp kernel module is not present or loaded. In which case a SocketException is thrown. For example,

$ jshell
|  Welcome to JShell -- Version 11.0.11
|  For an introduction type: /help intro

jshell> com.sun.nio.sctp.SctpChannel.open()
|  Exception java.net.SocketException: Protocol not supported
|        at SctpNet.socket0 (Native Method)
|        at SctpNet.socket (SctpNet.java:85)
|        at SctpChannelImpl.<init> (SctpChannelImpl.java:137)
|        at SctpChannel.open (SctpChannel.java:170)
|        at (#1:1)

It would be more appropriate to check for EPROTONOSUPPORT and ESOCKTNOSUPPORT, and throw UOE rather than SE.
",,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8267353,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,linux,,,,,"0|i2t0r7:",9223372036854775807,b25,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@446e124a,,,,,,,,,"2021-05-28 06:12;chegar;Adding noreg-other: The existing java/net/SctpSanity.java tests already covers this case, when run on platforms without support.;;;","2021-05-28 06:21;chegar;Some Linux commands to help determine if the lksctp library is installed, and if the kernel module is not loaded or not?

$ rpm -qa | grep sctp
lksctp-tools-1.0.17-2.el7.x86_64

$ which checksctp
/usr/bin/checksctp

$ /usr/bin/checksctp
SCTP supported

$ lsmod | grep sctp
sctp                  299008  2 
libcrc32c              16384  4 nf_conntrack,nf_nat,xfs,sctp

$ modinfo sctp
filename:       /lib/modules/4.14.35-1902.0.18.el7uek.x86_64/kernel/net/sctp/sctp.ko.xz
license:        GPL
description:    Support for the SCTP protocol (RFC2960)
author:         Linux Kernel SCTP developers <linux-sctp@vger.kernel.org>
alias:          net-pf-10-proto-132
alias:          net-pf-2-proto-132
srcversion:     CA88E7C1DCACA58B08A8E35
depends:        libcrc32c
retpoline:      Y
intree:         Y
name:           sctp
vermagic:       4.14.35-1902.0.18.el7uek.x86_64 SMP mod_unload modversions 
sig_id:         ...

$ /sbin/modprobe -n -v sctp

### Prevents the sctp kernel module from being loaded on RHEL 7
$ cat /etc/modprobe.d/local-dontload.conf
blacklist sctp
install sctp /bin/false
;;;","2021-05-31 02:45;roboduke;Changeset: bd31653e
Author:    Chris Hegarty <chegar@openjdk.org>
Date:      2021-05-31 09:44:38 +0000
URL:       https://git.openjdk.java.net/jdk/commit/bd31653e6f99d4337e4af1f7f138d688ec99c19d
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Loop predicate gets inexact loop limit before PhaseIdealLoop::rc_predicate,JDK-8267928,5050656,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,yyang,yyang,yyang,2021-05-28 04:11,2021-12-13 03:13,2023-10-01 09:57,2021-11-30 03:53,17,18,,,,,,18,hotspot,,0,alibaba-interest,c2,c2-loopopts,hs-comp-triaged,oracle-triage-11,oracle-triage-17,performance,,,,,,,Loop predicate gets inexact loop limit(LoopLimitNode) from exact_limit(even if the limit is statically known) and does unnecessary overflow checking when generating lower bound test(rc_predicate). The reason is rather straightforward: exact_limit fails to see a HasExactTripCount flag since it would be set after performing loop predicate(iteration_split).,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2t0or:",9223372036854775807,b26,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2021-11-16 07:00;chagedorn;Hi [~yyang], I see that the PR was approved but there was the question left to add an IR test for it. Are you planning to add such a test and integrate this into 18? As it is a P4, it needs to be fixed before RDP 1 is starting in early December. Otherwise, it needs to be deferred to 19.;;;","2021-11-16 18:19;yyang;Hi [~chagedorn], this could be fixed in 18. I will prepare an IR test for it. Thanks for kind reminder.;;;","2021-11-16 23:35;chagedorn;Great to hear, thanks Yi!;;;","2021-11-30 03:53;roboduke;Changeset: fecf906f
Author:    Yi Yang <yyang@openjdk.org>
Date:      2021-11-30 11:50:51 +0000
URL:       https://git.openjdk.java.net/jdk/commit/fecf906f0af9ddc0e83cb681845009f34555d5dc
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
AsyncLogGtest.java fails on assert with: decorator was not part of the decorator set specified at creation.,JDK-8267926,5050655,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,xliu,rehn,rehn,2021-05-28 04:02,2021-06-23 06:55,2023-10-01 09:57,2021-06-07 03:20,17,,,,,,,17,hotspot,,0,intermittent,logging,tier3,tier4,tier5,tier6,tier7,,,,,,,"[----------] 15 tests from LogConfigurationTest
[ RUN      ] LogConfigurationTest.describe_vm
[       OK ] LogConfigurationTest.describe_vm (0 ms)
[ RUN      ] LogConfigurationTest.update_output_vm
[       OK ] LogConfigurationTest.update_output_vm (1 ms)
[ RUN      ] LogConfigurationTest.add_new_output_vm
[       OK ] LogConfigurationTest.add_new_output_vm (0 ms)
[ RUN      ] LogConfigurationTest.disable_logging_vm
[       OK ] LogConfigurationTest.disable_logging_vm (1 ms)
[ RUN      ] LogConfigurationTest.disable_output_vm
# To suppress the following error report, specify this argument
# after -XX: or in .hotspotrc:  SuppressErrorAt=/logDecorations.cpp:78
#
# A fatal error has been detected by the Java Runtime Environment:
#
#  Internal Error (/opt/mach5/mesos/work_dir/slaves/3c846bae-ce30-4a97-93ee-9fef4497ccb6-S79375/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/4ed261ae-9048-480f-8cf0-77c31310e0a4/runs/de72afda-bbac-4196-a190-e9e18bb72392/workspace/open/src/hotspot/share/logging/logDecorations.cpp:78), pid=14245, tid=14251
#  assert(_decorators.is_decorator(decorator)) failed: decorator was not part of the decorator set specified at creation.
#
# JRE version: Java(TM) SE Runtime Environment (17.0+25) (fastdebug build 17-ea+25-LTS-2194)
# Java VM: Java HotSpot(TM) 64-Bit Server VM (fastdebug 17-ea+25-LTS-2194, mixed mode, tiered, compressed oops, compressed class ptrs, g1 gc, linux-amd64)
# Problematic frame:
# V  [libjvm.so+0x15eff14]  LogDecorations::decoration(LogDecorators::Decorator, char*, unsigned long) const+0x94
#
# Core dump will be written. Default location: Core dumps may be processed with ""/opt/core.sh %p"" (or dumping to /opt/mach5/mesos/work_dir/slaves/3c846bae-ce30-4a97-93ee-9fef4497ccb6-S79215/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/2238b884-8f87-4421-87ac-5458fc1cab8a/runs/754e3025-3a0f-4980-8cb7-242edfee7401/testoutput/test-support/jtreg_open_test_hotspot_jtreg_hotspot_misc/scratch/0/core.14245)
#
# An error report file with more information is saved as:
# /opt/mach5/mesos/work_dir/slaves/3c846bae-ce30-4a97-93ee-9fef4497ccb6-S79215/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/2238b884-8f87-4421-87ac-5458fc1cab8a/runs/754e3025-3a0f-4980-8cb7-242edfee7401/testoutput/test-support/jtreg_open_test_hotspot_jtreg_hotspot_misc/scratch/0/hs_err_pid14245.log
#
# If you would like to submit a bug report, please visit:
#   https://bugreport.java.com/bugreport/crash.jsp
#
assert failed: assert(_decorators.is_decorator(decorator)) failed: decorator was not part of the decorator set specified at creation.
[2021-05-28T06:31:22.369207678Z] Waiting for completion for process 14245
[2021-05-28T06:31:22.369387970Z] Waiting for completion finished for process 14245",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8229517,JDK-8269237,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2t0oj:",9223372036854775807,b26,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,,,"2021-05-28 06:13;dholmes;This was already supposed to be fixed and did not happen when I pre-tested the async logging changes ???

But I only tested tiers 1-3;;;","2021-05-28 06:18;dholmes;Also this passed tier 4 testing in jdk-17+25-2190 ;;;","2021-05-28 08:23;dcubed;Here's the crashing thread's stack trace for the jdk-17+25-2198-tier4 sighting:

---------------  T H R E A D  ---------------

Current thread (0x0000557e041af880):  JavaThread ""main"" [_thread_in_native, id=23522, stack(0x00007ffc0ed60000,0x00007ffc0ee60000)]

Stack: [0x00007ffc0ed60000,0x00007ffc0ee60000],  sp=0x00007ffc0ee5a370,  free space=1000k
Native frames: (J=compiled Java code, j=interpreted, Vv=VM code, C=native code)
V  [libjvm.so+0x15ecb04]  LogDecorations::decoration(LogDecorators::Decorator, char*, unsigned long) const+0x94
V  [libjvm.so+0x15ef907]  LogFileStreamOutput::write(LogDecorations const&, char const*)+0x77
V  [libjvm.so+0x15eec02]  LogFileOutput::write_blocking(LogDecorations const&, char const*)+0x32
V  [libjvm.so+0x15e8d65]  AsyncLogWriter::write()+0x345
V  [libjvm.so+0x15ea80d]  LogConfiguration::configure_output(unsigned long, LogSelectionList const&, LogDecorators const&)+0x1ad
V  [libjvm.so+0x15eb0e7]  LogConfiguration::parse_log_arguments(char const*, char const*, char const*, char const*, outputStream*)+0x327
V  [libjvm.so+0x367387]  LogTestFixture::set_log_config(char const*, char const*, char const*, char const*, bool)+0x157
V  [libjvm.so+0x4ab8a7]  LogConfigurationTest_disable_output_vm_Test::TestBody()+0x227
V  [libjvm.so+0x1e2b4e6]  testing::Test::Run()+0xc6
V  [libjvm.so+0x1e2b620]  testing::TestInfo::Run()+0x110
V  [libjvm.so+0x1e2b6ef]  testing::TestCase::Run()+0xaf
V  [libjvm.so+0x1e2d62f]  testing::internal::UnitTestImpl::RunAllTests()+0x50f
V  [libjvm.so+0x1e29772]  testing::UnitTest::Run()+0x92
V  [libjvm.so+0x366b47]  runUnitTestsInner(int, char**)+0x3a7
C  [gtestLauncher+0x6e5]  main+0x20;;;","2021-05-28 10:27;xliu;investigating;;;","2021-05-28 12:30;xliu;Analysis (so far): 

The stacktraces indicates that LogConfiguration::configure_output() invokes AsyncLogWriter::flush() and indeed find some log messages to write. 
It's really weird because LogConfigurationTest.disable_output_vm itself doesn't write any log.  One possibility is that logs are enqueued from other threads of JVM. 

from 
  // Add a new file output
  const char* what = ""all=debug"";
  set_log_config(TestLogFileName, what);
  EXPECT_TRUE(is_described(TestLogFileName));

to 
  // Now disable it, verifying it is removed completely
  set_log_config(TestLogFileName, ""all=off"");
  EXPECT_FALSE(is_described(TestLogFileName));

All debug logs are redirected to the TestLogFileName in the interim. 
In LogDecorations, we store a ""reference"":  DEBUG_ONLY(const LogDecorators& _decorators;)
If this value changed in the reconfiguration, AsyncLogWriter::write() would use the new value. I need to double check if it's possible. 
;;;","2021-05-28 13:39;xliu;Analysis (update)

I believe I know that reason.  This line is NOT MT-safe in async log mode. 
set_log_config(TestLogFileName, ""all=off""); 

This loop sets all LogTogSet's decorators to None when ""all=off"". it will be inconsistent with output's decorators, which is 'default'.

  // It is now safe to set the new decorators for the actual output
  output->set_decorators(decorators);

  // Update the decorators on all tagsets to get rid of unused decorators
  for (LogTagSet* ts = LogTagSet::first(); ts != NULL; ts = ts->next()) {
    ts->update_decorators();
  }
 
Pending log message in async log will see 'ts' latest value, which is none. 

I will verify that and send a PR to fix it. 
Can I trigger tier4-test on my own? ;;;","2021-05-28 14:23;xliu;this can be reproducible using the following arrangement. 
1. force AsyncLog Thread sleep. 
2. after    set_log_config(TestLogFileName, what), enqueue log message to _buffer. 
3. shut it down by    set_log_config(TestLogFileName, ""all=off"");

diff --git a/src/hotspot/share/logging/logAsyncWriter.cpp b/src/hotspot/share/logging/logAsyncWriter.cpp
index b3b61f8a7c0..89b939f3ad9 100644
--- a/src/hotspot/share/logging/logAsyncWriter.cpp
+++ b/src/hotspot/share/logging/logAsyncWriter.cpp
@@ -152,6 +152,7 @@ void AsyncLogWriter::write() {
 }

 void AsyncLogWriter::run() {
+  os::naked_sleep(60000000);
   while (true) {
     // The value of a semphore cannot be negative. Therefore, the current thread falls asleep
     // when its value is zero. It will be waken up when new messages are enqueued.
diff --git a/test/hotspot/gtest/logging/test_logConfiguration.cpp b/test/hotspot/gtest/logging/test_logConfiguration.cpp
index cce867f43ec..d2e7beb4175 100644
--- a/test/hotspot/gtest/logging/test_logConfiguration.cpp
+++ b/test/hotspot/gtest/logging/test_logConfiguration.cpp
@@ -206,6 +206,8 @@ TEST_VM_F(LogConfigurationTest, disable_output) {
   set_log_config(TestLogFileName, what);
   EXPECT_TRUE(is_described(TestLogFileName));

+  log_debug(gc)(""Dummy line"");
+  log_debug(logging)(""line 2"");
   // Now disable it, verifying it is removed completely
   set_log_config(TestLogFileName, ""all=off"");
   EXPECT_FALSE(is_described(TestLogFileName));;;;","2021-05-28 15:23;dholmes;There doesn't seem to be anything special about tier4 testing so I'm a bit perplexed as to why we only see the failure in that tier ... unless these tests _only_ run in that tier?

This is the failing command from the failure log:

Command line: [/jdk-17+25-2194/linux-x64-debug.test/hotspot/gtest/server/gtestLauncher -jdk /jdk-17+25-2194/linux-x64-debug.jdk/jdk-17/fastdebug --gtest_output=xml:test_result.xml --gtest_catch_exceptions=0test_result.xml --gtest_filter=Log*Test* -Xlog:async]

;;;","2021-05-28 15:32;xliu;hi, David, 
That command line runs all unified test in async mode.  

Please note that LogConfigurationTest itself doesn't write any log at all.  My theory is that some threads of JVM (GC threads, watcher thread or VMThread) happens to write some logs between 1~2. 
1. set_log_config(TestLogFileName, ""all=debug""); 
2. set_log_config(TestLogFileName, ""all=off""); 
;;;","2021-05-28 17:00;xliu;I sent out a PR which is trivial.  It should fix the existing gtests.
To completely solve the race condition, I need to fix JDK-8267952, which need more efforts and time to verify. 
;;;","2021-05-31 09:58;xliu;I made a regression test to verify that LogConfiguration::configure_output is MT-safe in async mode. 
It accidentally unveiled a hazard even in synchronous log. 

Here is failure on Linux/x86_64 without async logging. It can only been seen in 2-cpu testing environment. 

[ RUN      ] LogConfigurationTest.reconfigure_decorators_MT_vm
# To suppress the following error report, specify this argument
# after -XX: or in .hotspotrc:  SuppressErrorAt=/logDecorations.cpp:78
#
# A fatal error has been detected by the Java Runtime Environment:
#
#  Internal Error (/home/runner/work/jdk/jdk/jdk/src/hotspot/share/logging/logDecorations.cpp:78), pid=2102, tid=2484
#  assert(_decorators.is_decorator(decorator)) failed: decorator was not part of the decorator set specified at creation.
#
# JRE version: OpenJDK Runtime Environment (17.0) (fastdebug build 17-internal+0-navyxliu-5ad232b2218c3a92cb694aa68c1fbc74c2ef705c)
# Java VM: OpenJDK 64-Bit Server VM (fastdebug 17-internal+0-navyxliu-5ad232b2218c3a92cb694aa68c1fbc74c2ef705c, mixed mode, tiered, compressed oops, compressed class ptrs, g1 gc, linux-amd64)
# Problematic frame:
# V  [libjvm.so+0x162f374]  LogDecorations::decoration(LogDecorators::Decorator, char*, unsigned long) const+0x94
#
# Core dump will be written. Default location: Core dumps may be processed with ""/usr/share/apport/apport %p %s %c %d %P %E"" (or dumping to /home/runner/work/jdk/jdk/build/run-test-prebuilt/test-support/jtreg_test_hotspot_jtreg_tier1_common/scratch/core.2102)
#
# An error report file with more information is saved as:
# /home/runner/work/jdk/jdk/build/run-test-prebuilt/test-support/jtreg_test_hotspot_jtreg_tier1_common/scratch/hs_err_pid2102.log
#
# If you would like to submit a bug report, please visit:
#   https://bugreport.java.com/bugreport/crash.jsp

Analysis: 
There's race condition here https://github.com/openjdk/jdk/blob/master/src/hotspot/share/logging/logTagSet.cpp#L76
void LogTagSet::log(LogLevelType level, const char* msg) {
  LogDecorations decorations(level, *this, _decorators);
  for (LogOutputList::Iterator it = _output_list.iterator(level); it != _output_list.end(); it++) {
    (*it)->write(decorations, msg);
  }
}

The stmt 'LogDecorations decorations(level, *this, _decorators)' doesn't increase the reader counter.  It's possible that context switch just happens after that stmt. 
LogConfiguration::configure_output() updates output's decorators (enable more decorators) and then switch back.


;;;","2021-06-07 03:20;roboduke;Changeset: b09d8b98
Author:    Xin Liu <xliu@openjdk.org>
Committer: David Holmes <dholmes@openjdk.org>
Date:      2021-06-07 10:19:27 +0000
URL:       https://git.openjdk.java.net/jdk/commit/b09d8b9800329f946df80026d61cd4abf41cff37
;;;",,,,,,,,,,,,,,,,,,,,,,
Misleading G1 eager reclaim detail logging,JDK-8267924,5050653,Bug,Resolved,JDK,JDK,software,duke,,,P5,Fixed,tschatzl,tschatzl,tschatzl,2021-05-28 03:43,2021-06-10 17:56,2023-10-01 09:57,2021-06-07 06:19,11,17,,,,,,17,hotspot,,0,g1-humongous,gc-g1,,,,,,,,,,,,"With gc+humongous (and eager reclaim on) the log output for found live regions looks as follows:

Live humongous region <region-idx> object size <size> start <address>  with remset <cardset-size> code roots <code-roots-size> is marked <is-marked> reclaim candidate <is-candidate> type array <is-type-array>

There are some misleading values in the fields:

<cardset-size> is always ""0"" at this point because for a long time now we always defer remset updates to the concurrent phase. (It also only contains actual number of references in the remset, not considering outstanding card set entries still to be refined).

<is-candidate> is just wrong and always ""false"" here as it uses an internal table which entry is intentionally cleared if any reference has been found during gc

Fix this; I think by moving the ""Live"" messages somewhere else and just making them ""humongous object"" messages both issues could be fixed.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8267836,,,,JDK-8268331,JDK-8268330,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2t0o3:",9223372036854775807,b26,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6b00f96c,,,,,,,,,"2021-05-28 03:44;tschatzl;This is a logging only issue.;;;","2021-06-02 04:43;tschatzl;New suggested logging output:

First, all humongous regions
[0.085s][debug][gc,humongous] GC(4) Humongous region 0 (object size 41943056 @ 0x00000000f8000000) remset 0 code roots 0 marked 0 reclaim candidate 1 type array 1
[0.086s][debug][gc,humongous] GC(4) Humongous region 71 (object size 25165840 @ 0x00000000fc700000) remset 0 code roots 0 marked 0 reclaim candidate 1 type array 1
[0.085s][debug][gc,humongous] GC(4) Humongous region 41 (object size 4194320 @ 0x00000000fa900000) remset 0 code roots 0 marked 0 reclaim candidate 1 type array 1
[0.085s][debug][gc,humongous] GC(4) Humongous region 46 (object size 25165840 @ 0x00000000fae00000) remset 0 code roots 0 marked 0 reclaim candidate 1 type array 1

Later only reclaimed ones.
[0.086s][debug][gc,humongous] GC(4) Reclaimed humongous region 46 (object size 25165840 @ 0x00000000fae00000)

There is no point in printing out the reasons for the reclamation again: remsets are always zero for reclaim candidates (and only they will be considered for reclamation anyway), code roots will not change as we do not do code unloading or similar, the mark will not change either, reclaim candidate will be zero as indicated in the description, and the type won't change. So there is no information gain in printing these properties.
;;;","2021-06-07 06:19;roboduke;Changeset: 15715a89
Author:    Thomas Schatzl <tschatzl@openjdk.org>
Date:      2021-06-07 13:18:27 +0000
URL:       https://git.openjdk.java.net/jdk/commit/15715a8984e3e346c2a65e5a0c7b48c4dee21d3e
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
[lworld] Javac's implementation differs from JEP401 in a few matters.,JDK-8267923,5050652,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,sadayapalam,sadayapalam,sadayapalam,2021-05-28 03:31,2021-05-31 05:52,2023-10-01 09:57,2021-05-31 05:52,repo-valhalla,,,,,,,repo-valhalla,tools,,0,lw3,lworld,,,,,,,,,,,,"A review of JEP 401 showed that javac's prototype implementation
differs from the draft JEP in a few ways.

These are captured in the bugs:

JDK-8267918 -  Javac tolerates synchronizing on a primitive reference type
JDK-8267910 - Javac fails to implicitly type abstract classes as implementing IdentityObject
JDK-8267907 - Withdraw support for the experimental option -XDallowValueMemberCycles
JDK-8267843 - Duplicate error when primitive class instance is passed around before being fully initialized
JDK-8267841 - A primitive class that implements Cloneable is tolerated by javac
JDK-8267835 - Javac tolerates vacuous chaining to super constructor from primitive class constructor
JDK-8267965 - Javac disallows calls to super.{hashCode(), equals(), toString()} on a primitive instance receiver",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,generic,,,,,,,,,generic,,,,,"0|i2t0nv:",9223372036854775807,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4dca67bd,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
[lworld] Javac tolerates synchronizing on a primitive reference type,JDK-8267918,5050647,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,sadayapalam,sadayapalam,sadayapalam,2021-05-28 01:24,2021-05-31 05:52,2023-10-01 09:57,2021-05-31 05:52,repo-valhalla,,,,,,,repo-valhalla,tools,,0,lw3,lworld,,,,,,,,,,,,"JEP 401 states:

It is an error if the operand type of a synchronized statement is any subtype of PrimitiveObject, including any primitive reference type.

// --
This program compiles fine, but fails at runtime:

public primitive class X {
    public static void main(String [] args) {
        X.ref x = X.default;
        synchronized (x) {}
    }
}

// when run:
Exception in thread ""main"" java.lang.IllegalMonitorStateException
	at X.main(X.java:4)


",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,generic,,,,,,,,,generic,,,,,"0|i2t0mr:",9223372036854775807,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4dca67bd,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
[lworld] Javac fails to implicitly type abstract classes as implementing IdentityObject,JDK-8267910,5050637,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,sadayapalam,sadayapalam,sadayapalam,2021-05-27 22:58,2021-06-01 01:08,2023-10-01 09:57,2021-06-01 01:08,repo-valhalla,,,,,,,repo-valhalla,tools,,0,lw3,lworld,,,,,,,,,,,,"JEP 401 (https://openjdk.java.net/jeps/401) states:

// --
An abstract class can similarly be declared to implement either IdentityObject or PrimitiveObject; or, if it declares a field, an instance initializer, a non-empty constructor, or a synchronized method, it implicitly implements IdentityObject (perhaps with a warning). Otherwise, the abstract class extends neither interface and can be extended by both kinds of concrete classes.

// --

So this code should compile:

public abstract class X {
    int f;
    void foo(X x) {
        IdentityObject i = x;
    }
}

but as of now we get:

X.java:4: error: incompatible types: X cannot be converted to IdentityObject
        IdentityObject i = x;
                           ^
1 error

",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,generic,,,,,,,,,generic,,,,,"0|i2t0kj:",9223372036854775807,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4dca67bd,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
linux: thread_native_entry can scribble on stack frame,JDK-8267908,5050635,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,dholmes,pbk,pbk,2021-05-27 21:09,2021-06-10 17:58,2023-10-01 09:57,2021-06-07 21:53,17,,,,,,,17,hotspot,,0,os,,,,,,,,,,,,,"Looking at https://github.com/openjdk/jdk/blob/master/src/hotspot/os/linux/os_linux.cpp#L675

there is

  void *stackmem = alloca(((pid ^ counter++) & 7) * 128);
  // Ensure the alloca result is used in a way that prevents the compiler from eliding it.
  *(char *)stackmem = 1;

If the expression supplied to alloca is 0, then no additional space is allocated in the frame and returned pointer points at whatever is at SP.  If space was allocated by the alloca, then that is space that can be written on by the assignment through stackmem.  If space was not allocated by alloca, then writing through stackmem writes on whatever is pointed to by SP, which is  ""Probably Not Good""(TM).

This issue won't happen often, given the math around pid and the counter, but it is possible.  A fix might be to make sure that the math never returns 0.

Discovered by inspection.  Creating a reproducible test case would be difficult.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8263718,,,,,,,,,,,,,,,generic,,,,,,,,,linux,,,,,"0|i2t0k3:",9223372036854775807,b26,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,,,"2021-05-27 21:47;dholmes;This code was introduced by JDK-8263718 which was a very painful exercise in working around the compiler's inate ability to get in the way of writing simple code that does as it appears.

I suppose the minimal fix here would be:

void* stackmem = alloca(MIN2(((pid ^ counter++) & 7) *128, 1));;;;","2021-05-27 22:32;dholmes;Or more simply:

 void *stackmem = alloca((((pid ^ counter++) & 7) * 128) | 1);;;;","2021-06-01 11:15;hseigel;ILW=HLM=p3;;;","2021-06-07 21:53;roboduke;Changeset: 341f6760
Author:    David Holmes <dholmes@openjdk.org>
Date:      2021-06-08 04:53:02 +0000
URL:       https://git.openjdk.java.net/jdk/commit/341f676066ab807d433f0f0b6c8356d2ad0e1cc9
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
[lworld] Withdraw support for the experimental option -XDallowValueMemberCycles,JDK-8267907,5050634,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,sadayapalam,sadayapalam,sadayapalam,2021-05-27 20:57,2021-05-31 05:52,2023-10-01 09:57,2021-05-31 05:52,repo-valhalla,,,,,,,repo-valhalla,tools,,0,lw3,lworld,,,,,,,,,,,,"Per the VM team's request, in JDK-8222110, we added an experimental option to javac wherein it would tolerate cycles in primitive class membership declarations.

This was when things were still in flux - JEP 401 has categorical wording that 

""No instance field may have a primitive value type (see below) that depends—directly or indirectly—on the declaring class. In other words, with the exception of reference-typed fields, the class must allow for flat, fixed-size layouts without cycles.""

and so it would seem reasonable that this must be diagnosed at compile time. 

Frederic confirmed that the option -XDallowValueMemberCycles is not depended on anymore by hotspot and so can be purged.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,generic,,,,,,,,,generic,,,,,"0|i2t0jv:",9223372036854775807,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4dca67bd,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
C2 crash when compile negative Arrays.copyOf length after loop,JDK-8267904,5050632,Bug,Closed,JDK,JDK,software,duke,,,P2,Fixed,hshi,hshi,hshi,2021-05-27 20:29,2021-07-06 01:49,2023-10-01 09:57,2021-06-07 05:26,11,15,16,17,,,,17,hotspot,,0,c2,c2-loopopts,hs-comp-triaged,oracle-triage-11,oracle-triage-17,tencent-interest,,,,,,,,"Release build crash when compile following class init method. 

class test {
    public static int exp_count = 0;
    public int in1 = -4096;
    test (){
        try {
            short sha4[] = new short[1012];
            for (int i = 0; i < sha4.length; i++) {
              sha4[i] = 9;
            }
            Arrays.copyOf(sha4, in1);
        } catch (Exception ex) {
            exp_count++;
        }
    }
}


#
# A fatal error has been detected by the Java Runtime Environment:
#
#  SIGSEGV (0xb) at pc=0x00007fe80a01da27, pid=24823, tid=24836
#
# JRE version: OpenJDK Runtime Environment (17.0) (build 17-internal+0-adhoc.shihui.jdk)
# Java VM: OpenJDK 64-Bit Server VM (17-internal+0-adhoc.shihui.jdk, mixed mode, compressed oops, compressed class ptrs, g1 gc, linux-amd64)
# Problematic frame:
# V  [libjvm.so+0xc80a27]  NodeHash::hash_delete(Node const*)+0x7
#
# No core dump will be written. Core dumps have been disabled. To enable core dumping, try ""ulimit -c unlimited"" before starting Java again
#
# If you would like to submit a bug report, please visit:
#   https://bugreport.java.com/bugreport/crash.jsp
#

---------------  S U M M A R Y ------------

Command Line: -Xbatch -XX:-TieredCompilation -XX:-UseOnStackReplacement -XX:CompileCommand=compileonly,test::<init> neg_arrays_copyof_after_loop

Host: AMD EPYC 7K62 48-Core Processor, 8 cores, 15G, CentOS Linux release 7.2 (Final)
Time: Wed May 26 16:20:31 2021 CST elapsed time: 0.248680 seconds (0d 0h 0m 0s)

---------------  T H R E A D  ---------------

Current thread (0x00007fe8041ed7e0):  JavaThread ""C2 CompilerThread0"" daemon [_thread_in_native, id=24836, stack(0x00007fe7f41fa000,0x00007fe7f42fb000)]


Current CompileTask:
C2:    248   24   !b        test::<init> (58 bytes)

Stack: [0x00007fe7f41fa000,0x00007fe7f42fb000],  sp=0x00007fe7f42f5d30,  free space=1007k
Native frames: (J=compiled Java code, j=interpreted, Vv=VM code, C=native code)
V  [libjvm.so+0xc80a27]  NodeHash::hash_delete(Node const*)+0x7
V  [libjvm.so+0xacd5a0]  PhaseIdealLoop::is_counted_loop(Node*, IdealLoopTree*&, BasicType)+0xcc0
V  [libjvm.so+0xaceb44]  IdealLoopTree::counted_loop(PhaseIdealLoop*)+0xc4
V  [libjvm.so+0xacebe8]  IdealLoopTree::counted_loop(PhaseIdealLoop*)+0x168
V  [libjvm.so+0xad157f]  PhaseIdealLoop::build_and_optimize(LoopOptsMode)+0xb8f
V  [libjvm.so+0x5d6d39]  PhaseIdealLoop::optimize(PhaseIterGVN&, LoopOptsMode)+0x199
V  [libjvm.so+0x5d4e61]  Compile::Optimize()+0xab1
V  [libjvm.so+0x5d6506]  Compile::Compile(ciEnv*, ciMethod*, int, bool, bool, bool, bool, DirectiveSet*)+0xd26
V  [libjvm.so+0x509226]  C2Compiler::compile_method(ciEnv*, ciMethod*, int, bool, DirectiveSet*)+0xa6
V  [libjvm.so+0x5e0314]  CompileBroker::invoke_compiler_on_method(CompileTask*)+0xee4
V  [libjvm.so+0x5e1038]  CompileBroker::compiler_thread_loop()+0x4c8
V  [libjvm.so+0xefcbc0]  JavaThread::thread_main_inner()+0x180
V  [libjvm.so+0xf00032]  Thread::call_run()+0xe2
V  [libjvm.so+0xc38bff]  thread_native_entry(Thread*)+0xdf
",,,,,,,,,,,,,,,,,,,,,,,,,JDK-8268362,,,,,,,,JDK-8268345,,,,JDK-8268301,JDK-8268325,,,"2021-05-27 20:22;hshi;hs_err_pid24823.log;https://bugs.openjdk.org/secure/attachment/94853/hs_err_pid24823.log",,,,,,,,,,,generic,,,,,,,,,generic,,,,,"0|i2t0jf:",9223372036854775807,b26,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,Fix failed,,"2021-05-27 20:29;hshi;In ArraysCopyof, it creates new array and call System.arraycopy.

In C2 LibraryCallKit::inline_arraycopy, they are tightly coupled array allcation and array copy.
1. CastIINode is created in GraphKit::new_array (in AllocateArrayNode::make_ideal_length), Cast lenght range to [0, maxint-2]

2. In LibraryCallKit::inline_arraycopy, AllocateArrayNode's InitializeNode's output_control's uses' control is replaced with AllocateArrayNode's input control in LibraryCallKit::arraycopy_move_allocation_here.

   C->gvn_replace_by(init->proj_out(TypeFunc::Control), alloc->in(0));

3. This makes CastIINode's control is AllocateArrayNode's input control, which is illegal state in laster IGVN phase, casting a negative to [0, maxint-2].

4. This cause control and nodes after loop is removed and loop has no fall-through edge and crash.;;;","2021-05-28 04:46;thartmann;ILW = Crash during C2 compilation, simple reproducer, disable arraycopy intrinsic = HML = P2;;;","2021-06-06 18:35;roboduke;Changeset: b05fa02e
Author:    Hui Shi <hshi@openjdk.org>
Committer: Jie Fu <jiefu@openjdk.org>
Date:      2021-06-07 01:34:22 +0000
URL:       https://git.openjdk.java.net/jdk/commit/b05fa02e7413fdcc40969645309e3e9d4442c78d
;;;","2021-06-06 23:28;hshi;original fix fails Closed test: compiler/c2/6371167/Test.java 
https://bugs.openjdk.java.net/browse/JDK-8268301

Need more testing;;;","2021-06-07 05:28;chagedorn;Please file a new REDO bug to retry the fix again. There was another issue found after the integration of the fix of this bug which should also be addressed when redoing this fix (JDK-8268325).;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Add .gitattributes to repo,JDK-8267892,5050619,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,kcr,kcr,kcr,2021-05-27 14:53,2022-04-12 20:28,2023-10-01 09:57,2021-05-28 08:05,8,jfx11,jfx16,,,,,jfx17,javafx,,0,8bpr-critical-approved,noreg-cleanup,sn_94,,,,,,,,,,,"This is the JavaFX-equivalent of JDK-8241768 to add a .gitattributes file to our repo with a single entry:

* -text

This will prevent various problems that can happen when running on a Windows machine using a native Windows Git (as opposed to Cygwin git, which doesn't have this problem).

For two recent examples, see JDK-8267694 and this PR comment: https://github.com/openjdk/jfx/pull/518#issuecomment-849966053",,,,,,,,,,,JDK-8280733,JDK-8284784,JDK-8278082,JDK-8272737,,,,,,,,,,,,,,,,,,,JDK-8267694,JDK-8239138,JDK-8241768,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2t0gj:",9223372036854775807,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@1d1c7815,,,,,,,,,"2021-05-28 08:05;roboduke;Changeset: 5e6d4429
Author:    Kevin Rushforth <kcr@openjdk.org>
Date:      2021-05-28 15:05:06 +0000
URL:       https://git.openjdk.java.net/jfx/commit/5e6d4429159e3fab9ec0aab9720393850d179710
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
ClassLoaderMetaspace destructor asserts on !_frozen,JDK-8267879,5050604,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,iklam,dcubed,dcubed,2021-05-27 11:39,2021-06-10 17:52,2023-10-01 09:57,2021-06-02 12:20,17,,,,,,,17,hotspot,,0,cds,metaspace,tier6,zgc,,,,,,,,,,"The following test failed in the JDK17 CI:

runtime/cds/appcds/methodHandles/MethodHandlesAsCollectorTest.java

Here's a snippet from the log file:

[2.573s][info   ][cds       ] Regenerate MethodHandle Holder classes...done
[2.594s][info   ][cds       ] Rewriting and linking classes: done
# To suppress the following error report, specify this argument
# after -XX: or in .hotspotrc:  SuppressErrorAt=/metaspace.hpp:79
#
# A fatal error has been detected by the Java Runtime Environment:
#
#  Internal Error (/System/Volumes/Data/mesos/work_dir/slaves/40f4774a-f408-4e28-8432-1004a7782450-S115964/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/7812c36d-6a7c-447b-8af2-3cb87f7004ed/runs/5974c193-703d-4fde-9521-6fbb5c740890/workspace/open/src/hotspot/share/memory/metaspace.hpp:79), pid=59568, tid=14083
#  assert(!_frozen) failed: sanity
#
# JRE version: Java(TM) SE Runtime Environment (17.0+25) (fastdebug build 17-ea+25-LTS-2176)
# Java VM: Java HotSpot(TM) 64-Bit Server VM (fastdebug 17-ea+25-LTS-2176, interpreted mode, tiered, compressed class ptrs, z gc, bsd-aarch64)
# Core dump will be written. Default location: core.59568
#
# An error report file with more information is saved as:
# /System/Volumes/Data/mesos/work_dir/slaves/40f4774a-f408-4e28-8432-1004a7782450-S117909/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/7dc7c88a-6979-482d-b82f-3b567dd3165e/runs/8e011916-0489-4d53-afc4-a2e8751f2f97/testoutput/test-support/jtreg_open_test_hotspot_jtreg_hotspot_runtime/scratch/0/hs_err_pid59568.log
[2.598s][info   ][cds       ] Gathering all archivable objects ... 
[2.598s][info   ][cds       ] Gathering classes and symbols ... 
#
# If you would like to submit a bug report, please visit:
#   https://bugreport.java.com/bugreport/crash.jsp
#
];
 stderr: []
 exitValue = 134

Here's the crashing thread's stack:

---------------  T H R E A D  ---------------

Current thread (0x000000010e808820):  ConcurrentGCThread ""ZDriver"" [stack: 0x0000000170398000,0x000000017059b000] [id=14083]

Stack: [0x0000000170398000,0x000000017059b000],  sp=0x000000017059ab80,  free space=2058k
Native frames: (J=compiled Java code, j=interpreted, Vv=VM code, C=native code)
V  [libjvm.dylib+0xfcd4d0]  VMError::report_and_die(int, char const*, char const*, char*, Thread*, unsigned char*, void*, void*, char const*, int, unsigned long)+0x5d8
V  [libjvm.dylib+0xfcdb90]  VMError::report_and_die(Thread*, void*, char const*, int, char const*, char const*, char*)+0x40
V  [libjvm.dylib+0x52dcb0]  report_vm_error(char const*, int, char const*, char const*, ...)+0x80
V  [libjvm.dylib+0x4a3420]  ClassLoaderMetaspace::~ClassLoaderMetaspace()+0x50
V  [libjvm.dylib+0x49973c]  ClassLoaderData::~ClassLoaderData()+0x1b8
V  [libjvm.dylib+0x49ea58]  ClassLoaderDataGraph::purge(bool)+0x2c
V  [libjvm.dylib+0x1073f10]  ZUnload::purge()+0xa4
V  [libjvm.dylib+0x1038134]  ZHeap::process_non_strong_references()+0x64
V  [libjvm.dylib+0x1033b7c]  ZDriver::concurrent_process_non_strong_references()+0x8c
V  [libjvm.dylib+0x1034200]  ZDriver::gc(GCCause::Cause)+0x7c
V  [libjvm.dylib+0x1034358]  ZDriver::run_service()+0xa0
V  [libjvm.dylib+0x50ef80]  ConcurrentGCThread::run()+0x34
V  [libjvm.dylib+0xf30c34]  Thread::call_run()+0x21c
V  [libjvm.dylib+0xd08af0]  thread_native_entry(Thread*)+0x160
C  [libsystem_pthread.dylib+0x706c]  _pthread_start+0x140

=================================
Java Threads: ( => current thread )
  0x0000000118808e20 JavaThread ""main"" [_thread_blocked, id=5891, stack(0x000000016f12c000,0x000000016f32f000)]
  0x000000011e812420 JavaThread ""Reference Handler"" daemon [_thread_blocked, id=41731, stack(0x00000001713f8000,0x00000001715fb000)]
  0x000000011e815220 JavaThread ""Finalizer"" daemon [_thread_blocked, id=41219, stack(0x0000000171604000,0x0000000171807000)]
  0x000000011e813620 JavaThread ""Signal Dispatcher"" daemon [_thread_blocked, id=24335, stack(0x0000000171928000,0x0000000171b2b000)]
  0x000000011e814220 JavaThread ""Service Thread"" daemon [_thread_blocked, id=39939, stack(0x0000000171b34000,0x0000000171d37000)]
  0x000000011e817a20 JavaThread ""Monitor Deflation Thread"" daemon [_thread_blocked, id=39427, stack(0x0000000171d40000,0x0000000171f43000)]
  0x000000011e818620 JavaThread ""Notification Thread"" daemon [_thread_blocked, id=24835, stack(0x0000000171f4c000,0x000000017214f000)]
  0x000000011e81fc20 JavaThread ""Common-Cleaner"" daemon [_thread_blocked, id=25347, stack(0x0000000172364000,0x0000000172567000)]

Other Threads:
  0x0000000100f73af0 VMThread ""VM Thread"" [stack: 0x00000001711ec000,0x00000001713ef000] [id=42243]
  0x00000001013b3ce0 WatcherThread [stack: 0x0000000172158000,0x000000017235b000] [id=25091]
  0x000000011ff1dd10 ConcurrentGCThread ""ZDirector"" [stack: 0x000000017018c000,0x000000017038f000] [id=17927]
=>0x000000010e808820 ConcurrentGCThread ""ZDriver"" [stack: 0x0000000170398000,0x000000017059b000] [id=14083]
  0x000000010ff05ea0 ConcurrentGCThread ""ZStat"" [stack: 0x00000001705a4000,0x00000001707a7000] [id=17667]
  0x000000011ff1c8b0 ConcurrentGCThread ""ZUnmapper"" [stack: 0x000000016fd74000,0x000000016ff77000] [id=13315]
  0x000000010ff047e0 ConcurrentGCThread ""ZUncommitter"" [stack: 0x000000016ff80000,0x0000000170183000] [id=13571]
  0x000000011ff18650 GCTaskThread ""ZWorker#0"" [stack: 0x000000016f338000,0x000000016f53b000] [id=19971]
  0x000000011ff19380 GCTaskThread ""ZWorker#1"" [stack: 0x000000016f544000,0x000000016f747000] [id=12291]
  0x000000011ff19ff0 GCTaskThread ""ZWorker#2"" [stack: 0x000000016f750000,0x000000016f953000] [id=12803]
  0x000000011ff1ac60 GCTaskThread ""ZWorker#3"" [stack: 0x000000016f95c000,0x000000016fb5f000] [id=19459]
  0x000000011ff1b8d0 GCTaskThread ""ZWorker#4"" [stack: 0x000000016fb68000,0x000000016fd6b000] [id=18947]
  0x000000010fe11410 Thread ""RuntimeWorker#0"" [stack: 0x00000001707b0000,0x00000001709b3000] [id=16643]
  0x000000010fe12080 Thread ""RuntimeWorker#1"" [stack: 0x00000001709bc000,0x0000000170bbf000] [id=16387]
  0x000000010fe12cf0 Thread ""RuntimeWorker#2"" [stack: 0x0000000170bc8000,0x0000000170dcb000] [id=15875]
  0x000000011ff1ee30 Thread ""RuntimeWorker#3"" [stack: 0x0000000170dd4000,0x0000000170fd7000] [id=14851]
  0x000000010fe13960 Thread ""RuntimeWorker#4"" [stack: 0x0000000170fe0000,0x00000001711e3000] [id=15107]

Threads with active compile tasks:

VM state: at safepoint (normal execution)

VM Mutex/Monitor currently owned by a thread:  ([mutex/lock_event])
[0x000000010fe0a170] Threads_lock - owner thread: 0x0000000100f73af0
[0x000000010fe0b520] Heap_lock - owner thread: 0x0000000118808e20

",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8268364,,,,,,,,"2021-06-08 08:56;iklam;hs_err_pid59568.log;https://bugs.openjdk.org/secure/attachment/95060/hs_err_pid59568.log",,,,,,,,,,,generic,,,,,,,,,generic,,,,,"0|i2t0d7:",9223372036854775807,b26,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,,,"2021-05-30 23:51;iklam;Metaspace::_frozen is set here:

void VM_PopulateDumpSharedSpace::doit() {
  ...
  // We should no longer allocate anything from the metaspace, so that:
  //
  // (1) Metaspace::allocate might trigger GC if we have run out of
  //     committed metaspace, but we can't GC because we're running
  //     in the VM thread.
  // (2) ArchiveBuilder needs to work with a stable set of MetaspaceObjs.
  Metaspace::freeze();

Suggested fix:

ClassLoaderMetaspace::~ClassLoaderMetaspace() {
-  Metaspace::assert_not_frozen();
+ if (Metaspace::is_frozen()) { return; }

void ClassLoaderMetaspace::deallocate(MetaWord* ptr, size_t word_size, bool is_class) {
-  Metaspace::assert_not_frozen();
+ if (Metaspace::is_frozen()) { return; }
;;;","2021-06-02 12:20;roboduke;Changeset: a8835b9c
Author:    Ioi Lam <iklam@openjdk.org>
Date:      2021-06-02 19:20:10 +0000
URL:       https://git.openjdk.java.net/jdk/commit/a8835b9c08af1438c80144bad7506fb5700511a3
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Off-by-one bug when searching arrays in AlpnGreaseTest,JDK-8267860,5050582,Bug,Resolved,JDK,JDK,software,duke,,,P5,Fixed,kdriver,mbalao,mbalao,2021-05-27 09:26,2023-09-29 09:28,2023-10-01 09:57,2022-06-13 07:40,11,16,18,,,,,20,security-libs,,0,jdk11u-fix-request,jdk11u-fix-yes,jdk17u-fix-request,jdk17u-fix-yes,noreg-self,starter-bug,,,,,,,,"It was noted during the backport of JDK-8254631 to 8u [1] that the original fix has an off-by-one error while comparing the 2 arrays in the test [2]. This means that there could be, in theory, a grease array in the client hello not detected. This case is not realistic given the client hello structure, but we should fix it anyways.

--
[1] - https://mail.openjdk.java.net/pipermail/jdk8u-dev/2021-May/013911.html
[2] - https://github.com/openjdk/jdk/blob/fe5cccc1ec76a5c29b1f55af311823f84483395b/test/jdk/sun/security/ssl/ALPN/AlpnGreaseTest.java#L86",,,,,,,,,,,JDK-8312656,JDK-8317322,JDK-8314042,JDK-8311613,JDK-8311611,,,,,,,,,,,,,,,,,,JDK-8254631,,,,,,,,,,,,,,,,,,,generic,,,,,,,,,generic,,,,,"0|i2t08b:",9223372036854775807,b02,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@39d9862,,,,,,,,,"2022-06-01 17:29;wetmore;Original author:  Discussion is correct.  Test is off by one. 

Submitter can fix in JDK, or I can try to get to it.

Labeling as a starter-bug in case someone new wants to learn the process.

diff --git a/test/jdk/sun/security/ssl/ALPN/AlpnGreaseTest.java b/test/jdk/sun/security/ssl/ALPN/AlpnGreaseTest.java
index d3c656043a2..75927eab47d 100644
--- a/test/jdk/sun/security/ssl/ALPN/AlpnGreaseTest.java
+++ b/test/jdk/sun/security/ssl/ALPN/AlpnGreaseTest.java
@@ -83,7 +83,7 @@ public class AlpnGreaseTest implements SSLContextTemplate {
             new String(greaseBytes, StandardCharsets.ISO_8859_1);

     private static void findGreaseInClientHello(byte[] bytes) throws Exception {
-        for (int i = 0; i < bytes.length - greaseBytes.length; i++) {
+        for (int i = 0; i < bytes.length - greaseBytes.length + 1; i++) {
             if (Arrays.equals(bytes, i, i + greaseBytes.length,
                     greaseBytes, 0, greaseBytes.length)) {
                 System.out.println(""Found greaseBytes in ClientHello at: "" + i);
;;;","2022-06-07 12:38;wetmore;I've recommended this as a starter bug for a new employee.  ;;;","2022-06-08 02:23;sgehwolf;[~wetmore] Is anybody working on this? If not, somebody from our team would like to take it.;;;","2022-06-10 10:40;wetmore;[~sgehwolf] Yes, code is just about ready for review.;;;","2022-06-10 11:09;kdriver;I agree with the proposed change above and have created a PR: https://github.com/openjdk/jdk/pull/9131;;;","2022-06-10 20:05;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/9131
Date: 2022-06-10 17:12:30 +0000;;;","2022-06-13 01:11;sgehwolf;[~wetmore] Thanks for the info.;;;","2022-06-13 07:40;dukebot;Changeset: 2adef6a1
Author:    Kevin Driver <largeprimes@proton.me>
Committer: Bradford Wetmore <wetmore@openjdk.org>
Date:      2022-06-13 14:38:36 +0000
URL:       https://git.openjdk.org/jdk/commit/2adef6a1f84d478bb38b179795f08ffa43680e36
;;;","2022-06-13 16:35;wetmore;[~sgehwolf] Apologies for not thinking to have Kevin include you as the ""Contributed-by"".  I forgot that you gave details in that linked email.  Thank you.

;;;","2023-08-07 13:18;mdoerr;Fix Request (17u):
Should get backported for parity with 17.0.9-oracle. Applies cleanly. Test has passed.;;;","2023-08-07 13:25;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/1644
Date: 2023-08-07 20:18:17 +0000;;;","2023-09-28 08:39;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk11u-dev/pull/2144
Date: 2023-09-23 08:44:59 +0000;;;","2023-09-28 13:44;roboduke;[jdk11u-fix-request] Approval Request from Amos
Backport;;;",,,,,,,,,,,,,,,,,,,,,
Document that title property in WebEngine gets updated asynchronously,JDK-8267858,5050580,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,ajoseph,ajoseph,ajoseph,2021-05-27 09:17,2021-08-19 11:59,2023-10-01 09:57,2021-06-07 23:52,8,jfx17,,,,,,jfx17,javafx,,0,noreg-doc,,,,,,,,,,,,,"The title property is not guaranteed to be updated right after the page is loaded, but gets updated asynchronously.
titleProperty() should be used to retrieve the title.",,,,,,,,,,,JDK-8272734,JDK-8269577,,,,,,,,,,,,JDK-8267866,,,,,,,,,JDK-8267859,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2t07n:",9223372036854775807,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@5a8b92bd,,,,,,,,,"2021-06-07 23:52;roboduke;Changeset: ca250364
Author:    Arun Joseph <ajoseph@openjdk.org>
Date:      2021-06-08 06:51:45 +0000
URL:       https://git.openjdk.java.net/jfx/commit/ca250364aae7a4e071d307ac1091c22776cf9a38
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Remove unused styles from stylesheet,JDK-8267853,5050574,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,hannesw,jjg,jjg,2021-05-27 07:59,2021-10-11 15:46,2023-10-01 09:57,2021-10-05 09:58,17,,,,,,,18,tools,,0,noreg-cleanup,,,,,,,,,,,,,"JDK-8267709 indicated the likelihood of some unused styles in the stylesheet. These should be verified as unused and removed.

        removeAll(styleSheetNames, ""all-classes-container"", ""all-packages-container"",
                ""bottom-nav"", ""clear"", ""constant-values-container"", ""deprecated-content"",
                ""footer"", ""hidden"", ""override-specify-label"", ""serialized-class-details"",
                ""tab"", ""table-sub-heading-color"");",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8267709,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2t06b:",9223372036854775807,b18,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@7900061a,,,,,,,,,"2021-10-05 09:58;roboduke;Changeset: e1f0df0d
Author:    Hannes Wallnöfer <hannesw@openjdk.org>
Date:      2021-10-05 16:57:12 +0000
URL:       https://git.openjdk.java.net/jdk/commit/e1f0df0de3b205cecdb1aa1d74562536c06097dd
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Add @requires to avoid running G1 large pages test with wrong page size,JDK-8267845,5050560,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,sjohanss,sjohanss,sjohanss,2021-05-27 04:53,2021-06-07 15:17,2023-10-01 09:57,2021-05-31 05:09,17,,,,,,,17,hotspot,,0,gc-g1,testbug,,,,,,,,,,,,"There are two tests trying to verify that large pages are used correctly for the heap and the G1 internal data structures. These tests are done in a separate process that is run with specific arguments to know the expected outcome and those test-process don't take in any outside parameters. This is good, but if the parameter LargePageSizeInBytes is passed to the test, the driver process will run with this flag and picking up the set page size as the expected one. The simple fix is to simply not run this test with this flag. For the test to work with this flag, more work has to be done to analyze how different page sizes will affect the test.

The affected test:
gc/g1/TestLargePageUseForHeap.java
gc/g1/TestLargePageUseForAuxMemory.java

",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2t037:",9223372036854775807,b25,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6b00f96c,,,,,,,,,"2021-05-31 05:09;roboduke;Changeset: ce44cd68
Author:    Stefan Johansson <sjohanss@openjdk.org>
Date:      2021-05-31 12:08:24 +0000
URL:       https://git.openjdk.java.net/jdk/commit/ce44cd6881bcbef81a840d7961a951ba586c0eae
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
[lworld] Double diagnostics when primitive class instance is passed around before being fully initialized,JDK-8267843,5050557,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,sadayapalam,sadayapalam,sadayapalam,2021-05-27 03:02,2021-05-31 05:52,2023-10-01 09:57,2021-05-31 05:52,repo-valhalla,,,,,,,repo-valhalla,tools,,0,lw3,lworld,,,,,,,,,,,,"JEP 401 says: 

(Possibly) The constructor cannot make use of this except to set the fields in the constructor body, or perhaps after all fields are definitely assigned.

// -- 

The code that implements this seems to have a bug wherein duplicate errors are emitted. Consider:

public primitive class X implements Cloneable {
    int x;
    int y;
    X() {
        foo(this);
    }
    void foo(X x) {
    }
}

Compiling this results in:

X.java:5: error: primitive class instance should not be passed around before being fully initialized
        foo(this);
            ^
X.java:5: error: primitive class instance should not be passed around before being fully initialized
        foo(this);
           ^
X.java:6: error: variable x might not have been initialized
    }

The first two errors are duplicates of each other. They seem to differ in DiagnosticPosition by 1 so both show up. But the concerned AST node is the same - it is to be examined why two messages appear.
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,generic,,,,,,,,,generic,,,,,"0|i2t02j:",9223372036854775807,,,,,,,,,,,,,"2021-05-31 01:33;sadayapalam;Actually, there is no duplication in error reporting and two messages arise o account of (a) `this` being passed around and (b) an instance method being invoked before `this` is fully initialized.

I'll add a test using the example snippet and close with no code change.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
SIGSEGV in get_current_contended_monitor,JDK-8267842,5050555,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,mdoerr,mdoerr,mdoerr,2021-05-27 02:48,2021-06-08 13:58,2023-10-01 09:57,2021-05-31 01:28,15,16,17,,,,,17,hotspot,,0,jdk16u-fix-request,jdk16u-fix-SQE-ok,jdk16u-fix-yes,,,,,,,,,,,"In ThreadService::get_current_contended_monitor, ""wait_obj"" or ""enter_obj"" can be observed to be NULL after NULL check due to concurrent modification. These two variables and the memory locations from which they were read from are not declared volatile, so C++ compilers are allowed to generate code which reloads them from memory after the NULL checks.

Crashes with SIGSEGV were observed on s390 when running the test serviceability/monitoring/ThreadInfo/GetLockOwnerName/GetLockOwnerName.java since May 15. The problem is reproducible with fastdebug build, but not with slowdebug.

#  SIGSEGV (0xb) at pc=0x000003ff98f1ce46, pid=48257, tid=48285
#
# JRE version: OpenJDK Runtime Environment (17.0.0.1) (fastdebug build 17.0.0.1-internal+0-adhoc.openjdk.jdk-dev)
# Java VM: OpenJDK 64-Bit Server VM (fastdebug 17.0.0.1-internal+0-adhoc.openjdk.jdk-dev, mixed mode, sharing, tiered, compressed oops, co
mpressed class ptrs, g1 gc, linux-s390x)
# Problematic frame:
# V  [libjvm.so+0xf1ce46]  ObjectMonitor::object() const+0x156

Stack from gdb with line numbers:
#7  <signal handler called>
#8  ObjectMonitor::object (this=0x0) at /openjdk/nb/linuxs390x/jdk-dev/src/hotspot/share/oops/weakHandle.hpp:56
#9  0x000003ff9921fd68 in ThreadService::get_current_contended_monitor (thread=thread@entry=0x3ff300aa720)
    at /openjdk/nb/linuxs390x/jdk-dev/src/hotspot/share/services/threadService.cpp:242
#10 0x000003ff992224f6 in ThreadSnapshot::initialize (this=this@entry=0x3ff300ae380, t_list=<optimized out>, 
    thread=thread@entry=0x3ff300aa720)
    at /openjdk/nb/linuxs390x/jdk-dev/src/hotspot/share/services/threadService.cpp:885
#11 0x000003ff99222e60 in ThreadDumpResult::add_thread_snapshot (this=this@entry=0x3ff69d7d5b0, thread=0x3ff300aa720)
    at /openjdk/nb/linuxs390x/jdk-dev/src/hotspot/share/runtime/threadSMR.hpp:279
#12 0x000003ff98dfc360 in jmm_GetThreadInfo (env=<optimized out>, ids=<optimized out>, maxDepth=<optimized out>, 
    infoArray=<optimized out>) at /openjdk/nb/linuxs390x/jdk-dev/src/hotspot/share/services/management.cpp:1106",,,,,,,,,,,JDK-8268246,JDK-8268411,,,,,,,,,,,,,,,,,,,,,JDK-8263901,,,,JDK-8265153,JDK-8153224,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2t023:",9223372036854775807,b25,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@2846162a,,,,,,,,,"2021-05-27 08:26;dcubed;Moving from hotspot/runtime -> hotspot/svc since
the ThreadService is owned by the Serviceability team.;;;","2021-05-27 18:15;dholmes;> These two variables and the memory locations from which they were read from are not declared volatile, so C++ compilers are allowed to generate code which reloads them from memory after the NULL checks. 

While strictly speaking under the memory model all reads from non-volatile locations can be treated as idempotent by the compiler, it seems an extremely nonsensical thing for a compiler to do in the current context.;;;","2021-05-31 01:28;roboduke;Changeset: 1e29005a
Author:    Martin Doerr <mdoerr@openjdk.org>
Date:      2021-05-31 08:27:52 +0000
URL:       https://git.openjdk.java.net/jdk/commit/1e29005a22c7951242cf3b0d8cf2e6adc0b7b315
;;;","2021-06-02 08:08;mdoerr;Fix Request (16u)
Bug was discovered by new test GetLockOwnerName in 17, but the get_current_contended_monitor function is also sensitive to the same race condition in 16u. Making the two member fields volatile is a very low risk. Performance regression is not expected and was not observed so far. Without the fix, the VM may crash very sporadically if the C++ compiler exploits certain optimizations depending on platform and compiler.
Fix doesn't apply cleanly, but is trivial to resolve: https://github.com/openjdk/jdk16u/pull/125;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
[lworld] A primitive class that implements Cloneable is tolerated by javac,JDK-8267841,5050553,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,sadayapalam,sadayapalam,sadayapalam,2021-05-27 02:28,2021-05-31 05:52,2023-10-01 09:57,2021-05-31 05:52,repo-valhalla,,,,,,,repo-valhalla,tools,,0,lw3,lworld,,,,,,,,,,,,"The following code compiles fine: 

public primitive class X implements Cloneable {
    public static void main(String [] args) {
    }
}

but when run fails with:
Error: LinkageError occurred while loading main class X
	java.lang.ClassFormatError: class: X - Inline Types do not support Cloneable


JEP 401 states: 

(Possibly) The class does not implement Cloneable or declare a clone() method.

Javac implements the latter clause but not the former.


",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,generic,,,,,,,,,generic,,,,,"0|i2t01n:",9223372036854775807,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4dca67bd,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
[lworld] Javac tolerates vacuous chaining to super constructor from primitive class constructor,JDK-8267835,5050547,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,sadayapalam,sadayapalam,sadayapalam,2021-05-27 01:09,2021-05-31 05:52,2023-10-01 09:57,2021-05-31 05:52,repo-valhalla,,,,,,,repo-valhalla,tools,,0,lw3,lworld,,,,,,,,,,,,"JEP 401 (https://openjdk.java.net/jeps/401) calls for:

A primitive class declaration is subject to the following restrictions:

...

No constructor makes a super constructor call. Instance creation will occur without executing any superclass initialization code.

...

// -----

Javac implements this ""in principle"", by rewriting any super() chaining attempt in 

com.sun.tools.javac.jvm.TransValues#visitMethodDef

so no chaining happens. Instead the factory ""product"" gets created
by the synthesized code (that replaces the super call) via:

 V $this = V.default;

But tolerating express *programmer coded"" super() call in the constructor is a deviation from the draft specification.

A possible fix is to tolerate the compiler inserted super calls and issue errors only for programmer coded super calls.

See the treatment of super() calls in enum constructors and the
issue of the diagnostic Errors.CallToSuperNotAllowedInEnumCtor
for precendent.                      ",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,generic,,,,,,,,,generic,,,,,"0|i2t00b:",9223372036854775807,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4dca67bd,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
SimpleVisitors and Scanners in jdk.compiler should use @implSpec,JDK-8267832,5050544,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,jlahoda,jlahoda,jlahoda,2021-05-27 00:42,2022-01-26 16:42,2023-10-01 09:57,2021-06-07 04:14,17,,,,,,,17,tools,,0,,,,,,,,,,,,,,"As noted here:
https://bugs.openjdk.java.net/browse/JDK-8265981?focusedCommentId=14423316&page=com.atlassian.jira.plugin.system.issuetabpanels:comment-tabpanel#comment-14423316

Various methods in SimpleVisitors and Scanners specify what their default implementations do, but don't use @implSpec. Those should be changed to use @implSpec.",,,,,,,,,,,,,,,,,,,,,,,,JDK-8267838,,,,,,,,,JDK-8271226,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2szzn:",9223372036854775807,b26,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4dca67bd,,,,,,,,,"2021-06-07 04:14;roboduke;Changeset: e4d04540
Author:    Jan Lahoda <jlahoda@openjdk.org>
Date:      2021-06-07 11:13:13 +0000
URL:       https://git.openjdk.java.net/jdk/commit/e4d045402fa1992a1d91586bd4f67362d07f543c
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
[lworld] Lots of lingering references to inline/value types in Javac code base,JDK-8267824,5050536,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,sadayapalam,sadayapalam,sadayapalam,2021-05-26 23:00,2021-06-21 02:24,2023-10-01 09:57,2021-06-21 02:24,repo-valhalla,,,,,,,repo-valhalla,tools,,0,lw3,lworld,,,,,,,,,,,,"We need to systematically look at the entire code base and purge all references to stale vocabulary in identifiers, comments, diagnostics, (test) file names etc. 

Starting with a full comparison of lworld branch with valhalla default branch would be a good starting point for this exercise.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,generic,,,,,,,,,generic,,,,,"0|i2szxv:",9223372036854775807,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4dca67bd,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
[lworld] Javac's handling of `primitive' modifier is unlike the handling of other restricted identifiers,JDK-8267821,5050533,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,sadayapalam,sadayapalam,sadayapalam,2021-05-26 22:10,2021-06-17 04:59,2023-10-01 09:57,2021-06-17 04:59,repo-valhalla,,,,,,,repo-valhalla,tools,,0,lw3,lworld,,,,,,,,,,,,"ATM, javac's treatment of 'primitive' modifier employs a completely parallel scheme - unlike the other restricted identifiers (JLS 3.8) and needs to be harmonized.

See the methods

com.sun.tools.javac.parser.JavacParser#recastToken
com.sun.tools.javac.parser.JavacParser#restrictedTypeName
com.sun.tools.javac.parser.JavacParser#restrictedTypeNameStartingAtSource

ATM, none of yield, sealed, var, record etc have an Token kind
in com.sun.tools.javac.parser.Tokens.TokenKind while primitive
does

We may also not be emitting the pertinent diagnostics from this set:

IllegalRefToRestrictedType
RestrictedTypeNotAllowed
RestrictedTypeNotAllowedArray
RestrictedTypeNotAllowedCompound
RestrictedTypeNotAllowedHere
RestrictedTypeNotAllowedPreview

etc. 

Both the spec and the implementation wrt to other restricted identifiers must be studied and the implementation must be aligned.

",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,generic,,,,,,,,,generic,,,,,"0|i2szx7:",9223372036854775807,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4dca67bd,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
CoInitialize/CoUninitialize should be called on same thread,JDK-8267819,5050532,Bug,Resolved,JDK,JDK,software,duke,,,P2,Fixed,almatvee,almatvee,almatvee,2021-05-26 20:20,2021-08-19 09:13,2023-10-01 09:57,2021-06-03 14:48,8u311,jfx17,,,,,,jfx17,javafx,,0,regression,regression_8264737,sn_94,,,,,,,,,,,JDK-8264737 introduced new code for audio device removal/arrival notifications which calls CoInitialize/CoUninitialize on separate threads. CoInitialize/CoUninitialize should be called on same thread. Calling CoUninitialize on separate threads will result in unitializing COM objects on this thread and if other code runs on such thread it will not work correctly if it is using COM objects.,,,,,,,,,,,JDK-8272726,JDK-8268218,,,,,,,,,,,,,,,,,,JDK-8267699,,,JDK-8264737,,,,,,,,,,,,,,,,,,,,,,,,,,,,windows,,,,,"0|i2szwz:",9223372036854775807,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@712e7ab7,,,,,,,,,"2021-05-27 05:20;kcr;Raising to P2, since this can sometimes cause a crash.;;;","2021-06-03 14:48;roboduke;Changeset: 47700d8e
Author:    Alexander Matveev <almatvee@openjdk.org>
Date:      2021-06-03 21:47:26 +0000
URL:       https://git.openjdk.java.net/jfx/commit/47700d8ef0175d4b457bb658371d2da4ec0a8181
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
[lworld] [AArch64] Shenandoah barrier set build warnings and register conflict,JDK-8267818,5050531,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,ngasson,ngasson,ngasson,2021-05-26 19:56,2021-05-31 02:30,2023-10-01 09:57,2021-05-31 02:30,repo-valhalla,,,,,,,repo-valhalla,hotspot,,0,lw3,valhalla,,,,,,,,,,,,"[...]/barrierSetAssembler_aarch64.hpp:47:16: warning: 'virtual void BarrierSetAssembler::store_at(MacroAssembler*, DecoratorSet, BasicType, Address, Register, Register, Register, Register)' was hidden [-Woverloaded-virtual]

store_at gained an extra tmp3 argument. Also template table _fast_qgetfield passes rscratch1 as a temporary to load_at which uses rscratch1/rscratch2 internally.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,aarch64,,,,,,,,,linux,,,,,"0|i2szwr:",9223372036854775807,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6b00f96c,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Add UseVtableBasedCHA to the list of JVM flags known to jtreg,JDK-8267805,5050507,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,vlivanov,vlivanov,vlivanov,2021-05-26 10:23,2021-06-07 15:14,2023-10-01 09:57,2021-05-26 15:53,17,,,,,,,17,hotspot,,0,,,,,,,,,,,,,,"Otherwise, ""@requires vm.opt.final.UseVtableBasedCHA"" doesn't work.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2szrf:",9223372036854775807,b25,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@78d03d9a,,,,,,,,,"2021-05-26 15:53;roboduke;Changeset: 1899f022
Author:    Vladimir Ivanov <vlivanov@openjdk.org>
Date:      2021-05-26 22:53:28 +0000
URL:       https://git.openjdk.java.net/jdk/commit/1899f022b1cb66ecc0615ff5939b5492e2805a1c
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
vmTestbase/nsk/jvmti/scenarios/hotswap/HS201/hs201t002/TestDescription.java fails with NoClassDefFoundError,JDK-8267796,5050489,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,amenkov,dholmes,dholmes,2021-05-26 05:57,2022-03-07 14:58,2023-10-01 09:57,2022-03-02 02:56,17,18,19,,,,,19,hotspot,,0,intermittent,tier6,,,,,,,,,,,,"----------configuration:(0/0)----------
----------System.out:(3/241)----------
[2.688s][info][jfr,startup] Started recording 1. No limit specified, using maxsize=250MB as default.
[2.688s][info][jfr,startup] 
[2.688s][info][jfr,startup] Use jcmd 2000956 JFR.dump name=1 filename=FILEPATH to copy recording data to file.
----------System.err:(13/1175)----------
java.lang.NoClassDefFoundError: nsk/jvmti/scenarios/hotswap/HS201/hs201t002
	at nsk.jvmti.scenarios.hotswap.HS201.hs201t002a.doInit(Unknown Source)
	at nsk.jvmti.scenarios.hotswap.HS201.hs201t002a.<init>(Unknown Source)
	at java.base/jdk.internal.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)
	at java.base/jdk.internal.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)
	at java.base/java.lang.reflect.Constructor.newInstanceWithCaller(Constructor.java:499)
	at java.base/java.lang.reflect.ReflectAccess.newInstance(ReflectAccess.java:128)
	at java.base/jdk.internal.reflect.ReflectionFactory.newInstance(ReflectionFactory.java:348)
	at java.base/java.lang.Class.newInstance(Class.java:642)
	at nsk.jvmti.scenarios.hotswap.HS201.hs201t002$hs201t002Thread.throwException(hs201t002.java:169)
	at nsk.jvmti.scenarios.hotswap.HS201.hs201t002$hs201t002Thread.run(hs201t002.java:146)",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2sznf:",9223372036854775807,b12,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@2846162a,,,,,,,,,"2021-05-26 05:58;dholmes;Starting this in JFR as I have a vague recollection of a similar error being reported.;;;","2021-06-01 06:07;egahlin;JVM TI should not be tested together with JFR, since classes are loaded in the background by JFR.;;;","2021-06-01 22:34;dholmes;[~egahlin] we have been testing JFR with vmTestbase_nsk_jvmti_quick for over 3 years (ref JDK-8201514). If there are specific JVMTI tests that can be seen to be incompatible with JFR then we should identify them and exclude them from this testing. But I don't think we can legitimately just say that JVM TI and JFR should not be tested together, else we will have no test coverage of them being used together.
;;;","2022-01-15 06:21;dcubed;Here's a log file snippet for the jdk-19+6-237-tier5 sighting: 

vmTestbase/nsk/jvmti/scenarios/hotswap/HS201/hs201t002/TestDescription.java

#section:main
----------messages:(4/335)----------
command: main -agentlib:hs201t002=pathToNewByteCode=./bin,-waittime=5 nsk.jvmti.scenarios.hotswap.HS201.hs201t002
reason: User specified action: run main/othervm/native -agentlib:hs201t002=pathToNewByteCode=./bin,-waittime=5 nsk.jvmti.scenarios.hotswap.HS201.hs201t002 
Mode: othervm [/othervm specified]
elapsed time (seconds): 2.956
----------configuration:(0/0)----------
----------System.out:(3/240)----------
[1.887s][info][jfr,startup] Started recording 1. No limit specified, using maxsize=250MB as default.
[1.887s][info][jfr,startup] 
[1.887s][info][jfr,startup] Use jcmd 690999 JFR.dump name=1 filename=FILEPATH to copy recording data to file.
----------System.err:(11/962)----------
java.lang.NoClassDefFoundError: nsk/jvmti/scenarios/hotswap/HS201/hs201t002
	at nsk.jvmti.scenarios.hotswap.HS201.hs201t002a.doInit(Unknown Source)
	at nsk.jvmti.scenarios.hotswap.HS201.hs201t002a.<init>(Unknown Source)
	at java.base/jdk.internal.reflect.DirectConstructorHandleAccessor.newInstance(DirectConstructorHandleAccessor.java:67)
	at java.base/java.lang.reflect.Constructor.newInstanceWithCaller(Constructor.java:499)
	at java.base/java.lang.reflect.ReflectAccess.newInstance(ReflectAccess.java:128)
	at java.base/jdk.internal.reflect.ReflectionFactory.newInstance(ReflectionFactory.java:341)
	at java.base/java.lang.Class.newInstance(Class.java:677)
	at nsk.jvmti.scenarios.hotswap.HS201.hs201t002$hs201t002Thread.throwException(hs201t002.java:169)
	at nsk.jvmti.scenarios.hotswap.HS201.hs201t002$hs201t002Thread.run(hs201t002.java:146)
STATUS:Failed.`main' threw exception: java.lang.NoClassDefFoundError: nsk/jvmti/scenarios/hotswap/HS201/hs201t002
----------rerun:(35/7919)*----------;;;","2022-02-21 06:48;amenkov;We got the issue when redefined hs201t002a ties to access hs201t001 static field
Similar hs201t001 test has a workaround to avoid the classloader being involved in the doInit() method:
    26 public class hs201t001a extends Exception {
    27
    28     public hs201t001a () {
    29         System.out.println(""Current step: "" + hs201t001.currentStep); // Avoid calling classloader to find hs201t001 in doInit()
    30         doInit();
    31     }

But it's still unclear to me how we get NoClassDefFoundError.
The issue is very intermittent (3 failures on linux-aarch64-debug);;;","2022-02-21 06:58;amenkov;The test has some issues:
- need to make the test more verbose;
- it has a code to enable events only on test thread, but the value (thread reference) is set after the events are enabled, so actually the events are enabled for all threads;
- functions getThreadName, getClassName, readNewBytecode are not thread-safe, so we can get conflicts when we get events from several threads
- getThreadName and getClassName share the same buffer, as a result the log (in the verbose mode) contains
>>>> Exception hs201t002Thread in thread - hs201t002Thread
Exception class is expected to be hs201t002a
;;;","2022-02-24 04:40;amenkov;Was not able to reproduce the issue, but looks like the failures are caused by PopFrame during class loading.
Need to add a workaround like we have in hs201t001 test;;;","2022-02-24 05:26;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/7607
Date: 2022-02-24 12:44:18 +0000;;;","2022-03-02 02:56;dukebot;Changeset: f12200cd
Author:    Alex Menkov <amenkov@openjdk.org>
Date:      2022-03-02 10:54:25 +0000
URL:       https://git.openjdk.java.net/jdk/commit/f12200cd11c2b689618cde1902db941ee23fbf80
;;;",,,,,,,,,,,,,,,,,,,,,,,,,
PhaseStringOpts::int_stringSize doesn't handle min_jint correctly,JDK-8267773,5050462,Bug,Closed,JDK,JDK,software,duke,,,P2,Fixed,neliasso,afarley,afarley,2021-05-26 03:25,2023-04-14 07:20,2023-10-01 09:57,2021-06-02 00:57,11.0.9,16,17,,,,,17,hotspot,,0,c2,hs-comp-triaged,jdk11u-fix-request,jdk11u-fix-yes,jdk16u-fix-request,jdk16u-fix-SQE-ok,jdk16u-fix-yes,oracle-triage-17,redhat-interest,,,,,"Problem: Calling StringIndexOutOfBoundsException(Integer.MIN_VALUE) and checking the ""toString()"" return value eventually (after 10k+ tries) returns an error message indicating the value passed in was ""-2"".

Correct toString() return value: ""java.lang.StringIndexOutOfBoundsException: String index out of range: -2147483648""

Incorrect toString() return value:
""java.lang.StringIndexOutOfBoundsException: String index out of range: -2""

This error does not occur on JDK8, but does occur in 4 out of 5 complete runs on JDK11, and all runs on JDK16.

On JDK11 we see the failure once between 10k and 20k, and on JDK16 and 17 we see the failure once between 10k and 20k, with continuous occurrences starting around the 30k-40k mark.

(A minimal testcase will be attached. I limited the failures to 20 to avoid swamping. Feel free to edit as needed.)

Since this bug doesn't occur when the jit is disabled, and the occurrences only start around the 10k mark, I'm assuming this is a JIT defect. Will ask the community if anyone with JIT skills could take a look.",,,,,,,,,,,JDK-8268317,JDK-8269894,JDK-8268338,JDK-8268415,,,,,,,,,,,,,,,,,,,JDK-8306007,,,,JDK-8141132,,,,"2021-05-26 04:17;afarley;StringIndexOutOfBoundsExceptionTest.java;https://bugs.openjdk.org/secure/attachment/94806/StringIndexOutOfBoundsExceptionTest.java",,,,,,,,,,,x86_64,,,,,,,,,linux_ubuntu,windows_10,,,,"0|i2szhf:",9223372036854775807,b25,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,Verified,,"2021-05-26 12:54;neliasso;A quick look  - Only happens with C2. Stops happening with -XX:-OptimizeStringConcat

ILW=Wrong behaviour, reproduced, -XX:-OptimizeStringConcat = HHL = P2;;;","2021-05-26 14:38;neliasso;Quick commandline repro:

java -Xcomp -XX:+PrintCompilation -XX:-TieredCompilation -XX:CICompilerCount=1 StringIndexOutOfBoundsExceptionTest

Failed on invocation 1: obj.toString() = ""java.lang.StringIndexOutOfBoundsException: String index out of range: -2"", not ""java.lang.StringIndexOutOfBoundsException: String index out of range: -2147483648""
;;;","2021-06-02 00:57;roboduke;Changeset: d47a77d2
Author:    Nils Eliasson <neliasso@openjdk.org>
Date:      2021-06-02 07:57:08 +0000
URL:       https://git.openjdk.java.net/jdk/commit/d47a77d2d54ee8c41ef969b42b3336a646dffd7b
;;;","2021-06-04 02:38;afarley;Fix Request
Backport requested for JDK11 and 16, as this defect was seen there as well. The code appears to backport cleanly, no changes.
JDK8 does *not* see this defect, so thankfully a backport is not required there as well.;;;","2021-06-04 03:42;clanger;Hi [~afarley], maybe you want to open backport PRs for both, 11u and 16u to see if it applies cleanly and the bots are fine with it? You should go by this process: https://wiki.openjdk.java.net/display/SKARA/Backports#Backports-Creatingbackports, it's fairly straightforward. Especially the WebUI way via /backport for clean backports...;;;","2021-06-04 05:38;afarley;Thanks Christoph :)

Will do.;;;","2021-08-09 14:15;epavlova;Verified by running jdk/java/lang/String/concat/IntegerMinValue.java in mach5 in JDK17 ATR configurations.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,
jpackage cannot handle window screensaver files when EXE renamed as SCR,JDK-8267764,5050221,Bug,Closed,JDK,JDK,software,duke,,,P3,Fixed,herrick,webbuggrp,webbuggrp,2021-05-23 08:27,2021-06-21 08:23,2023-10-01 09:57,2021-06-08 12:47,17,,,,,,,17,tools,,0,17ea,dcsad,regression,reproducer-yes,sn_94,sn_95,webbug,,,,,,,"ADDITIONAL SYSTEM INFORMATION :
Windows 10

A DESCRIPTION OF THE PROBLEM :
A Windows screensaver can be created from EXE simply by renaming or copying from extension .EXE to .SCR. 

REGRESSION : Last worked in version 16.0.1

STEPS TO FOLLOW TO REPRODUCE THE PROBLEM :
1) Use jpackage with --type app-image and --dest ""build/jpackage.dir"" to create exploded release directory.
2) Copy any generated EXE to .SCR - say test.exe => test.scr
3) Use jpackage with --type exe --app-image to create an installer
4) Install the application
5) Run test.exe 
6) Run test.scr


EXPECTED VERSUS ACTUAL BEHAVIOR :
EXPECTED -
In JDK16 steps 5+6 the same application will run as expected

ACTUAL -
In JDK17 EA jpackage the application runs as expected for step 5, but the test.scr launches with error message:
Error opening ""C:\Program Files\APPNAME\app\test.scr.cfg"" file: No such file or directory

---------- BEGIN SOURCE ----------
package duncan.panama.screensaver;

import java.util.Arrays;

/**
 * Test issues with command line launch after using jpackage.
 * <p>Build a launcher for this class as test.exe and copy to test.scr
 */
public class Test
{
    public static void main(String[] args)
    {
        System.out.println(""Application args: ""+Arrays.toString(args));

        try {
            String[] props = new String[]{""jpackage.app-path"", ""java.library.path""};
            for (String prop : props) {
                System.out.println(""System.getProperty(\""""+prop+""\"") => ""+System.getProperty(prop));
            }

            String[] libs = new String[]{""ole32"", ""user32"", ""advapi32"",""shell32"",""kernel32""};
            for (String lib : libs) {
                System.out.println(""System.loadLibrary(\""""+lib+""\"")"");
                System.loadLibrary(lib);
            }
        } catch(Throwable t) {
            System.err.println(""*** System load library FAILED *** ""+ t.toString());
            t.printStackTrace();
        }
    }
}
---------- END SOURCE ----------

FREQUENCY : always


",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"2021-05-26 00:40;adev;Test.java;https://bugs.openjdk.org/secure/attachment/94800/Test.java","2021-05-26 00:40;adev;jpackage1.txt;https://bugs.openjdk.org/secure/attachment/94801/jpackage1.txt","2021-05-26 00:40;adev;jpackage2.txt;https://bugs.openjdk.org/secure/attachment/94802/jpackage2.txt",,,,,,,,,x86_64,,,,,,,17,,windows_10,,,,,"0|i2sxzv:",9223372036854775807,b26,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@3656b41f,,,,,,,Verified,,"2021-05-26 00:30;adev;After building the jar from the source file, the issue is reproducible as follows:
jpackage ""@jpackage1.txt""

Renaming exe to scr and then for building the exe with:

jpackage ""@jpackage2.txt""

Following is my observation:
=====================
JDK 16: Pass
JDK 17 ea : Fail

Fails with a popup msg:
 Error opening ""C:\Program Files\Test\app\test.scr.cfg"" file: No such file or directory ;;;","2021-05-27 01:09;pnarayanaswa;Additional Information from submitter:
===========================
On reflection, I perhaps the behaviour of JDK16 is a bug and JDK17 handling is not a bug - rather than the other way around. Whenever EXE is copied/renamed to SCR extension then it is sensible to copy/rename the config app/appname.cfg to  app/somename.scr.cfg at same time.;;;","2021-06-01 12:19;herrick;what changed in 17 (and we can easily fix) is how we determined the root of the name.  The previous method caused a problem when app was run with ""../"" in the path (since we just looked for the first ""."").
now we explicitly look for "".exe"" on windows to strip from name, we can be more forgiving on what the extension might be.;;;","2021-06-08 12:47;roboduke;Changeset: 51e8201e
Author:    Andy Herrick <herrick@openjdk.org>
Date:      2021-06-08 19:46:40 +0000
URL:       https://git.openjdk.java.net/jdk/commit/51e8201eb5a66a8fbbff21194fd35389343baee1
;;;","2021-06-20 21:34;adev;Requested submitter to check if the issue is resolved in JDK 17 b26. The latest JDK can be downloaded from jdk.java.net/17/ ;;;","2021-06-21 08:23;adev;The submitter confirmed that the issue is fixed. ;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,
cds/appcds/loaderConstraints/LoaderConstraintsTest.java fails on x86_32 due to customized class loader is not supported,JDK-8267754,5050437,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,jiefu,jiefu,jiefu,2021-05-25 19:42,2021-06-07 15:14,2023-10-01 09:57,2021-05-26 15:59,17,,,,,,,17,hotspot,,0,cds,loader-constraint,tencent-interest,,,,,,,,,,,"[STDERR]
An error has occurred while processing class list file /home/jdk/build/linux-x86-server-fastdebug/test-support/jtreg_test_hotspot_jtreg_runtime_cds_appcds_loaderConstraints_LoaderConstraintsTest_java/scratch/0/runtime.cds.appcds.loaderConstraints.LoaderConstraintsTest.java-test.classlist 3:45.
AppCDS custom class loaders not supported on this platform:
LoaderConstraintsApp id: 2 super: 1 source: /home/jdk/build/linux-x86-server-fastdebug/test-support/jtreg_test_hotspot_jtreg_runtime_cds_appcds_loaderConstraints_LoaderConstraintsTest_java/scratch/0/loader_constraints.jar
                                            ^




Command line: [/home/jdk/build/linux-x86-server-fastdebug/images/jdk/bin/java -cp /home/jdk/build/linux-x86-server-fastdebug/test-support/jtreg_test_hotspot_jtreg_runtime_cds_appcds_loaderConstraints_LoaderConstraintsTest_java/classes/0/runtime/cds/appcds/loaderConstraints/LoaderConstraintsTest.d:/home/jdk/test/hotspot/jtreg/runtime/cds/appcds/loaderConstraints:/home/jdk/build/linux-x86-server-fastdebug/test-support/jtreg_test_hotspot_jtreg_runtime_cds_appcds_loaderConstraints_LoaderConstraintsTest_java/classes/0/test/lib:/home/jdk/build/linux-x86-server-fastdebug/test-support/jtreg_test_hotspot_jtreg_runtime_cds_appcds_loaderConstraints_LoaderConstraintsTest_java/classes/0/test/hotspot/jtreg/runtime/cds/appcds:/home/jdk/build/linux-x86-server-fastdebug/test-support/jtreg_test_hotspot_jtreg_runtime_cds_appcds_loaderConstraints_LoaderConstraintsTest_java/classes/0/test/hotspot/jtreg/runtime/cds/appcds/test-classes:/opt/jtreg/lib/javatest.jar:/opt/jtreg/lib/jtreg.jar:/opt/jtreg/lib/junit.jar:/opt/jtreg/lib/testng.jar:/opt/jtreg/lib/jcommander.jar -XX:MaxRAMPercentage=0.284091 -Djava.io.tmpdir=/home/jdk/build/linux-x86-server-fastdebug/test-support/jtreg_test_hotspot_jtreg_runtime_cds_appcds_loaderConstraints_LoaderConstraintsTest_java/tmp -Xshare:on -showversion -XX:SharedArchiveFile=/home/jdk/build/linux-x86-server-fastdebug/test-support/jtreg_test_hotspot_jtreg_runtime_cds_appcds_loaderConstraints_LoaderConstraintsTest_java/scratch/0/appcds-00h27m33s151.jsa -Dtest.timeout.factor=4.0 -cp /home/jdk/build/linux-x86-server-fastdebug/test-support/jtreg_test_hotspot_jtreg_runtime_cds_appcds_loaderConstraints_LoaderConstraintsTest_java/scratch/0/custom_app_loader.jar -Xlog:cds -Xlog:class+loader+constraints=debug --add-exports java.base/jdk.internal.misc=ALL-UNNAMED CustomAppLoader /home/jdk/build/linux-x86-server-fastdebug/test-support/jtreg_test_hotspot_jtreg_runtime_cds_appcds_loaderConstraints_LoaderConstraintsTest_java/scratch/0/loader_constraints.jar LoaderConstraintsApp 1 ]
[2021-05-26T00:27:33.529983038Z] Gathering output for process 55050
[ELAPSED: 22 ms]
[logging stdout to /home/jdk/build/linux-x86-server-fastdebug/test-support/jtreg_test_hotspot_jtreg_runtime_cds_appcds_loaderConstraints_LoaderConstraintsTest_java/scratch/0/runtime.cds.appcds.loaderConstraints.LoaderConstraintsTest.java-0005-exec.stdout]
[logging stderr to /home/jdk/build/linux-x86-server-fastdebug/test-support/jtreg_test_hotspot_jtreg_runtime_cds_appcds_loaderConstraints_LoaderConstraintsTest_java/scratch/0/runtime.cds.appcds.loaderConstraints.LoaderConstraintsTest.java-0005-exec.stderr]
[STDERR]
An error has occurred while processing the shared archive file.
Specified shared archive not found (/home/jdk/build/linux-x86-server-fastdebug/test-support/jtreg_test_hotspot_jtreg_runtime_cds_appcds_loaderConstraints_LoaderConstraintsTest_java/scratch/0/appcds-00h27m33s151.jsa).

[2021-05-26T00:27:33.551104190Z] Waiting for completion for process 55050
[2021-05-26T00:27:33.551461054Z] Waiting for completion finished for process 55050
[2021-05-26T00:27:33.551574001Z] Waiting for completion for process 55050
[2021-05-26T00:27:33.551618485Z] Waiting for completion finished for process 55050
[2021-05-26T00:27:33.551669902Z] Waiting for completion for process 55050
[2021-05-26T00:27:33.551714822Z] Waiting for completion finished for process 55050
[2021-05-26T00:27:33.551770849Z] Waiting for completion for process 55050
[2021-05-26T00:27:33.551815059Z] Waiting for completion finished for process 55050
STDERR:
 stdout: [[0.000s][info][cds] optimized module handling: disabled due to incompatible property: jdk.module.addexports.0=java.base/jdk.internal.misc=ALL-UNNAMED
[0.012s][info][cds] trying to map /home/jdk/build/linux-x86-server-fastdebug/test-support/jtreg_test_hotspot_jtreg_runtime_cds_appcds_loaderConstraints_LoaderConstraintsTest_java/scratch/0/appcds-00h27m33s151.jsa
Error occurred during initialization of VM
Unable to use shared archive.
];
 stderr: [An error has occurred while processing the shared archive file.
Specified shared archive not found (/home/jdk/build/linux-x86-server-fastdebug/test-support/jtreg_test_hotspot_jtreg_runtime_cds_appcds_loaderConstraints_LoaderConstraintsTest_java/scratch/0/appcds-00h27m33s151.jsa).
]
 exitValue = 1

java.lang.RuntimeException: Expected to get exit value of [0]

        at jdk.test.lib.process.OutputAnalyzer.shouldHaveExitValue(OutputAnalyzer.java:474)
        at jdk.test.lib.cds.CDSTestUtils$Result.assertNormalExit(CDSTestUtils.java:195)
        at LoaderConstraintsTest.runWithArchive(LoaderConstraintsTest.java:107)
        at LoaderConstraintsTest.doTestCustomLoader(LoaderConstraintsTest.java:100)
        at LoaderConstraintsTest.main(LoaderConstraintsTest.java:116)
        at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
        at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
        at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
        at java.base/java.lang.reflect.Method.invoke(Method.java:568)
        at com.sun.javatest.regtest.agent.MainActionHelper$AgentVMRunnable.run(MainActionHelper.java:298)
        at java.base/java.lang.Thread.run(Thread.java:831)",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8267347,,,,,,,,,,,,,,,,,,,x86,,,,,,,,,linux,,,,,"0|i2szbv:",9223372036854775807,b25,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,,,"2021-05-26 15:59;roboduke;Changeset: 6ffa3e66
Author:    Jie Fu <jiefu@openjdk.org>
Date:      2021-05-26 22:58:45 +0000
URL:       https://git.openjdk.java.net/jdk/commit/6ffa3e66db55774673ce17be4f8f2d510abf8a84
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
KVHashtable doesn't deallocate entries,JDK-8267752,5050435,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,coleenp,coleenp,coleenp,2021-05-25 19:01,2023-01-24 11:34,2023-10-01 09:57,2021-06-16 05:45,17,,,,,,,18,hotspot,,0,cleanup,,,,,,,,,,,,,"The destructor for KVHashtable should deallocate entries but it doesn't, so if you don't write the deallocation code yourself, entries will leak.
There are two KVHashtables in the code for CDS Dumping, which make it hard to notice the leak.

Something like:

  ~KVHashtable() {
    KVHashtableEntry* probe = NULL;
    for (int index = 0; index < table_size(); index++) {
      for (KVHashtableEntry** p = bucket_addr(index); *p != NULL; ) {
        probe = *p;
        *p = probe->next();
        free_entry(probe);
      }
    }
    assert(BasicHashtable<F>::number_of_entries() == 0, ""should have removed all entries"");
  }
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8267935,JDK-8268078,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2szbf:",9223372036854775807,b02,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,,,"2021-06-01 11:21;hseigel;ILW=MLM=p4;;;","2021-06-16 05:44;roboduke;Changeset: 72b3b0af
Author:    Coleen Phillimore <coleenp@openjdk.org>
Date:      2021-06-16 12:43:11 +0000
URL:       https://git.openjdk.java.net/jdk/commit/72b3b0af08136342e54e1cdea0c48d64172e8870
;;;","2021-06-21 17:09;xliu;hi, [~coleenp],
 
In my understanding, this bug causes memleak and should go to jdk17.  
Can I change it to P3 and backport to jdk17 in RDP phase? 

Thanks,
--lx

;;;","2021-06-22 16:24;coleenp;If the AsyncLogWriter isn't deallocated then there's no leak with async logging.  The CDS leaks are minor and are only for -Xshare:dump.  So this fix does NOT need to be backported to JDK 17.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
(test) jtreg.SkippedException has no serial VersionUID,JDK-8267751,5050434,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,rriggs,rriggs,rriggs,2021-05-25 18:15,2021-06-23 01:41,2023-10-01 09:57,2021-05-26 15:03,,,,,,,,17,core-libs,,0,jdk11u-fix-request,jdk11u-fix-yes,noreg-self,,,,,,,,,,,"The lack a serialVersionUID in jtreg/SkippedException.java
adds an extra warning to compilation output in tests.",,,,,,,,,,,JDK-8268659,JDK-8268658,JDK-8268188,JDK-8269221,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2szb7:",9223372036854775807,b25,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@7e74daa7,,,,,,,,,"2021-05-26 15:03;roboduke;Changeset: 0fc7c8d1
Author:    Roger Riggs <rriggs@openjdk.org>
Date:      2021-05-26 22:03:13 +0000
URL:       https://git.openjdk.java.net/jdk/commit/0fc7c8d101d526f1bc86831996b6883209d77451
;;;","2021-06-22 03:14;sgehwolf;Fix Request (OpenJDK 11u):

Simple test-only fix. I see fixed in 11.0.13-oracle.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Incomplete fix for JDK-8267683,JDK-8267750,5050433,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,wetmore,wetmore,wetmore,2021-05-25 18:04,2021-06-07 15:13,2023-10-01 09:57,2021-05-25 20:18,,,,,,,,17,security-libs,,0,,,,,,,,,,,,,,"Missed updating with the new variable name.

     *     p.setApplicationProtocols(new String[] {
     *             ""h2"", ""http/1.1"", rfc7301Grease8F, HUK_UN_I});
->
     *     p.setApplicationProtocols(new String[] {
     *             ""h2"", ""http/1.1"", rfc7301Grease8A, HUK_UN_I});
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8267683,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2szaz:",9223372036854775807,b24,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@39d9862,,,,,,,,,"2021-05-25 20:18;roboduke;Changeset: b33b8bc8
Author:    Bradford Wetmore <wetmore@openjdk.org>
Date:      2021-05-26 03:17:32 +0000
URL:       https://git.openjdk.java.net/jdk/commit/b33b8bc88da3afe4f9f6321673df061ea4196962
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Investigate differences between HtmlStyle and stylesheet.css,JDK-8267709,5050380,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,jjg,jjg,jjg,2021-05-25 10:13,2021-07-05 20:14,2023-10-01 09:57,2021-05-27 08:01,17,,,,,,,17,tools,,0,,,,,,,,,,,,,,"There are a number of differences between HtmlStyle and the stylesheet that should be investigated.

Some are expected and are OK; others may indicate unused items, particularly in the stylesheet.

Here is the output from a relatively simple program to compare the two. It does not (yet) take ""known"" or ""expected"" differences into account. (The program is attached.)

found 139 names in HtmlStyle
found 110 names in stylesheet
In HtmlStyle but not stylesheet: all-classes-index-page
In HtmlStyle but not stylesheet: all-packages-index-page
In HtmlStyle but not stylesheet: annotations
In HtmlStyle but not stylesheet: col-plain
In HtmlStyle but not stylesheet: constant-details
In HtmlStyle but not stylesheet: constants-summary
In HtmlStyle but not stylesheet: constants-summary-page
In HtmlStyle but not stylesheet: constructor-details
In HtmlStyle but not stylesheet: constructor-summary
In HtmlStyle but not stylesheet: deprecated-list-page
In HtmlStyle but not stylesheet: details-table
In HtmlStyle but not stylesheet: doc-file-page
In HtmlStyle but not stylesheet: element-name
In HtmlStyle but not stylesheet: extends-implements
In HtmlStyle but not stylesheet: external-link
In HtmlStyle but not stylesheet: field-details
In HtmlStyle but not stylesheet: field-summary
In HtmlStyle but not stylesheet: help-page
In HtmlStyle but not stylesheet: help-section
In HtmlStyle but not stylesheet: help-toc
In HtmlStyle but not stylesheet: hierarchy
In HtmlStyle but not stylesheet: index
In HtmlStyle but not stylesheet: index-page
In HtmlStyle but not stylesheet: index-redirect-page
In HtmlStyle but not stylesheet: member-details
In HtmlStyle but not stylesheet: member-summary
In HtmlStyle but not stylesheet: method-details
In HtmlStyle but not stylesheet: method-summary
In HtmlStyle but not stylesheet: modifiers
In HtmlStyle but not stylesheet: module-description
In HtmlStyle but not stylesheet: module-index-page
In HtmlStyle but not stylesheet: modules-summary
In HtmlStyle but not stylesheet: nested-class-summary
In HtmlStyle but not stylesheet: package-declaration-page
In HtmlStyle but not stylesheet: package-description
In HtmlStyle but not stylesheet: package-index-page
In HtmlStyle but not stylesheet: package-tree-page
In HtmlStyle but not stylesheet: package-use-page
In HtmlStyle but not stylesheet: package-uses
In HtmlStyle but not stylesheet: packages
In HtmlStyle but not stylesheet: packages-summary
In HtmlStyle but not stylesheet: permits
In HtmlStyle but not stylesheet: permits-note
In HtmlStyle but not stylesheet: preview-list-page
In HtmlStyle but not stylesheet: property-details
In HtmlStyle but not stylesheet: property-summary
In HtmlStyle but not stylesheet: return-type
In HtmlStyle but not stylesheet: serialized-form-page
In HtmlStyle but not stylesheet: serialized-package-container
In HtmlStyle but not stylesheet: services-summary
In HtmlStyle but not stylesheet: source-container
In HtmlStyle but not stylesheet: source-page
In HtmlStyle but not stylesheet: system-properties-page
In HtmlStyle but not stylesheet: tree-page
In stylesheet but not HtmlStyle: all-classes-container
In stylesheet but not HtmlStyle: all-packages-container
In stylesheet but not HtmlStyle: borderless
In stylesheet but not HtmlStyle: bottom-nav
In stylesheet but not HtmlStyle: clear
In stylesheet but not HtmlStyle: constant-values-container
In stylesheet but not HtmlStyle: css
In stylesheet but not HtmlStyle: deprecated-content
In stylesheet but not HtmlStyle: footer
In stylesheet but not HtmlStyle: hidden
In stylesheet but not HtmlStyle: module-graph
In stylesheet but not HtmlStyle: override-specify-label
In stylesheet but not HtmlStyle: plain
In stylesheet but not HtmlStyle: png
In stylesheet but not HtmlStyle: result-highlight
In stylesheet but not HtmlStyle: result-item
In stylesheet but not HtmlStyle: search-tag-desc-result
In stylesheet but not HtmlStyle: search-tag-holder-result
In stylesheet but not HtmlStyle: striped
In stylesheet but not HtmlStyle: tab
In stylesheet but not HtmlStyle: table-sub-heading-color
In stylesheet but not HtmlStyle: ui-autocomplete
In stylesheet but not HtmlStyle: ui-autocomplete-category
In stylesheet but not HtmlStyle: w3
In stylesheet but not HtmlStyle: watermark
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8267853,,,,,,,,"2021-05-25 10:14;jjg;CheckStylesheetClasses.java;https://bugs.openjdk.org/secure/attachment/94791/CheckStylesheetClasses.java",,,,,,,,,,,,,,,,,,,,,,,,,"0|i2syz7:",9223372036854775807,b25,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@7900061a,,,,,,,,,"2021-05-25 12:13;jjg;The test program has been updated and is now in
https://github.com/jonathan-gibbons/jdk/tree/cssname-diffs
https://github.com/openjdk/jdk/pull/4195;;;","2021-05-27 08:01;roboduke;Changeset: 07542660
Author:    Jonathan Gibbons <jjg@openjdk.org>
Date:      2021-05-27 15:01:03 +0000
URL:       https://git.openjdk.java.net/jdk/commit/07542660446e47164e5a402380bdf7cbfd7b37ad
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Remove references to com.sun.tools.javadoc.**,JDK-8267708,5050379,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,prappo,prappo,prappo,2021-05-25 10:08,2021-06-07 15:13,2023-10-01 09:57,2021-05-26 04:28,17,,,,,,,17,tools,,0,,,,,,,,,,,,,,"Although the com.sun.tools.javadoc.** packages were removed in JDK-8215584, some references to them remain, mainly in the form of links in doc comments. Some of those links refer to classes that never existed.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8215584,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2syyz:",9223372036854775807,b24,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4dca67bd,,,,,,,,,"2021-05-26 04:27;roboduke;Changeset: 4343997a
Author:    Pavel Rappo <prappo@openjdk.org>
Date:      2021-05-26 11:27:15 +0000
URL:       https://git.openjdk.java.net/jdk/commit/4343997a1a2b38581488932f6a4971ce330bd467
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
bin/idea.sh tries to use cygpath on WSL,JDK-8267706,5050376,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,avu,avu,avu,2021-05-25 09:20,2021-06-08 16:59,2023-10-01 09:57,2021-05-28 12:55,,,,,,,,17,infrastructure,,0,,,,,,,,,,,,,,"bin/idea.sh fails on WSL with multiple cygpath: command not found errors, this is a regression from d29c78da19ba78214efe9e7856cde30fdd9ba8ab commit",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8268083,JDK-8268423,,,,,,,,,,,,,,,,,,,,,16,,,,,,,"0|i2syyb:",9223372036854775807,b25,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@429c566,,,,,,,,,"2021-05-28 12:55;roboduke;Changeset: 964bac9e
Author:    Nikita Gubarkov <Nikita.Gubarkov@jetbrains.com>
Committer: Alexey Ushakov <avu@openjdk.org>
Date:      2021-05-28 19:53:57 +0000
URL:       https://git.openjdk.java.net/jdk/commit/964bac9e38460df4bd1ad9d25136d5e9743028dd
;;;","2021-06-01 15:10;jjg;The fix is broken on a Mac, where `realpath` is not available.
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
runtime/cds/appcds/cacheObject/HeapFragmentationTest.java crashed with OutOfMemory,JDK-8267703,5050373,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,sjohanss,dcubed,dcubed,2021-05-25 09:11,2022-01-11 07:09,2023-10-01 09:57,2021-06-06 23:23,17,,,,,,,17,hotspot,,0,cds,gc-g1,tier2,tier6,,,,,,,,,,"The following test failed in the JDK17 CI:

runtime/cds/appcds/cacheObject/HeapFragmentationTest.java

Here's a snippet from the log file:

0.820s][info][gc,heap] GC(4) Eden regions: 0->0(1)
[0.820s][info][gc,heap] GC(4) Survivor regions: 0->0(5)
[0.820s][info][gc,heap] GC(4) Old regions: 1->1
[0.820s][info][gc,heap] GC(4) Archive regions: 0->0
[0.820s][info][gc,heap] GC(4) Humongous regions: 0->0
[0.820s][info][gc     ] GC(4) Pause Full (G1 Humongous Allocation) 0M->0M(8M) 90.869ms
[0.833s][info][gc     ] GC(1) Concurrent Undo Cycle 415.336ms
Aborting due to java.lang.OutOfMemoryError: Java heap space
# To suppress the following error report, specify this argument
# after -XX: or in .hotspotrc:  SuppressErrorAt=/debug.cpp:364
#
# A fatal error has been detected by the Java Runtime Environment:
#
#  Internal Error (/opt/mach5/mesos/work_dir/slaves/3c846bae-ce30-4a97-93ee-9fef4497ccb6-S79213/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/3d136cf9-b484-41b0-a4b4-5ded75b927ce/runs/990bcb78-f7c1-4ada-8b7a-5a7801a37528/workspace/open/src/hotspot/share/utilities/debug.cpp:364), pid=32046, tid=32049
#  fatal error: OutOfMemory encountered: Java heap space
#
# JRE version: Java(TM) SE Runtime Environment (17.0+24) (fastdebug build 17-ea+24-LTS-2133)
# Java VM: Java HotSpot(TM) 64-Bit Server VM (fastdebug 17-ea+24-LTS-2133, mixed mode, tiered, compressed oops, compressed class ptrs, g1 gc, linux-amd64)
# Core dump will be written. Default location: Core dumps may be processed with ""/opt/core.sh %p"" (or dumping to /opt/mach5/mesos/work_dir/slaves/3c846bae-ce30-4a97-93ee-9fef4497ccb6-S79213/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/2c4217ec-0c42-4111-a920-a26f6eeef273/runs/52d08d41-3773-43fb-bd87-ef71779f483b/testoutput/test-support/jtreg_open_test_hotspot_jtreg_hotspot_runtime/scratch/2/core.32046)
#
# An error report file with more information is saved as:
# /opt/mach5/mesos/work_dir/slaves/3c846bae-ce30-4a97-93ee-9fef4497ccb6-S79213/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/2c4217ec-0c42-4111-a920-a26f6eeef273/runs/52d08d41-3773-43fb-bd87-ef71779f483b/testoutput/test-support/jtreg_open_test_hotspot_jtreg_hotspot_runtime/scratch/2/hs_err_pid32046.log
];
 stderr: [java version ""17-ea"" 2021-09-14 LTS
Java(TM) SE Runtime Environment (fastdebug build 17-ea+24-LTS-2133)
Java HotSpot(TM) 64-Bit Server VM (fastdebug build 17-ea+24-LTS-2133, mixed mode)
]
 exitValue = 134

java.lang.RuntimeException: 'array.length = 1048576000' missing from stdout/stderr 

	at jdk.test.lib.process.OutputAnalyzer.shouldContain(OutputAnalyzer.java:206)
	at jdk.test.lib.cds.CDSTestUtils.checkMatches(CDSTestUtils.java:483)
	at jdk.test.lib.cds.CDSTestUtils$Result.assertNormalExit(CDSTestUtils.java:194)
	at HeapFragmentationTest.main(HeapFragmentationTest.java:80)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at com.sun.javatest.regtest.agent.MainActionHelper$AgentVMRunnable.run(MainActionHelper.java:298)
	at java.base/java.lang.Thread.run(Thread.java:831)

JavaTest Message: Test threw exception: java.lang.RuntimeException
JavaTest Message: shutting down test

result: Failed. Execution failed: `main' threw exception: java.lang.RuntimeException: 'array.length = 1048576000' missing from stdout/stderr


Here's the crashing thread's stack:

---------------  T H R E A D  ---------------

Current thread (0x00007f9ab4039900):  JavaThread ""main"" [_thread_in_vm, id=32049, stack(0x00007f9abb7d7000,0x00007f9abb8d8000)]

Stack: [0x00007f9abb7d7000,0x00007f9abb8d8000],  sp=0x00007f9abb8d62e0,  free space=1020k
Native frames: (J=compiled Java code, j=interpreted, Vv=VM code, C=native code)
V  [libjvm.so+0x198a0f0]  VMError::report_and_die(int, char const*, char const*, __va_list_tag*, Thread*, unsigned char*, void*, void*, char const*, int, unsigned long)+0x1a0
V  [libjvm.so+0xa81ceb]  report_fatal(VMErrorType, char const*, int, char const*, ...)+0x12b
V  [libjvm.so+0xa81f9d]  report_java_out_of_memory(char const*)+0xed
V  [libjvm.so+0x141114a]  MemAllocator::Allocation::check_out_of_memory()+0xda
V  [libjvm.so+0x14139f1]  MemAllocator::allocate() const+0x191
V  [libjvm.so+0x18e05a6]  TypeArrayKlass::allocate_common(int, bool, JavaThread*)+0x2e6
V  [libjvm.so+0x154ce3f]  oopFactory::new_typeArray(BasicType, int, JavaThread*)+0xff
V  [libjvm.so+0xe565bf]  InterpreterRuntime::newarray(JavaThread*, BasicType, int)+0x10f
j  HeapFragmentationApp.main([Ljava/lang/String;)V+20
v  ~StubRoutines::call_stub
V  [libjvm.so+0xe704b4]  JavaCalls::call_helper(JavaValue*, methodHandle const&, JavaCallArguments*, JavaThread*)+0x504
V  [libjvm.so+0xfa9275]  jni_invoke_static(JNIEnv_*, JavaValue*, _jobject*, JNICallType, _jmethodID*, JNI_ArgumentPusher*, JavaThread*) [clone .constprop.1]+0x375
V  [libjvm.so+0xfac8b5]  jni_CallStaticVoidMethod+0x1c5
C  [libjli.so+0x47d7]  JavaMain+0xd37
C  [libjli.so+0x7ce9]  ThreadJavaMain+0x9

Java frames: (J=compiled Java code, j=interpreted, Vv=VM code)
j  HeapFragmentationApp.main([Ljava/lang/String;)V+20
v  ~StubRoutines::call_stub",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8279241,,,,JDK-8214455,,,,,,,,,,,,,,,x86_64,,,,,,,,,linux,,,,,"0|i2syxn:",9223372036854775807,b26,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6b00f96c,,,,,,,,,"2021-05-25 09:46;iklam;NOTE: CDS is not enabled in the VM that crashed.

# JRE version: Java(TM) SE Runtime Environment (17.0+24) (fastdebug build 17-ea+24-LTS-2133)
# Java VM: Java HotSpot(TM) 64-Bit Server VM (fastdebug 17-ea+24-LTS-2133, mixed mode, tiered, compressed oops, compressed class ptrs, g1 gc, linux-amd64)

The test configures a 1400m heap and asserts that it must be able to allocate a byte array that has 1000m elements:

        // We run with a 1400m heap, so we should be able to allocate a 1000m buffer, regardless
        // of the heap size chosen at dump time.
        String dumpTimeHeapSize = ""-Xmx800m"";
        String runTimeHeapSize = ""-Xmx1400m"";
        String BUFF_SIZE = Integer.toString(1000 * 1024 * 1024);

To GC team, is this assumption correct?

From the hs_err file, heap starts at 0x600000000, but the old region is placed in the middle at 0x626100000. That prevents the allocation of a humongous region that can fit the 1000m array.

| 608|0x0000000626000000, 0x0000000626000000, 0x0000000626100000|  0%| F|  |TAMS 0x0000000626000000, 0x0000000626000000| Untracked 
| 609|0x0000000626100000, 0x000000062619bd88, 0x0000000626200000| 60%| O|  |TAMS 0x0000000626100000, 0x0000000626100000| Untracked 
| 610|0x0000000626200000, 0x0000000626200000, 0x0000000626300000|  0%| F|  |TAMS 0x0000000626200000, 0x0000000626200000| Untracked 

Question: shouldn't G1 relocate the old region to make space for the humongous allocation?

;;;","2021-05-25 13:38;iklam;This test was checked in as part of JDK-8214455 on 2021-04-07, and this has been the only such failure.;;;","2021-05-26 01:03;sjohanss;There are probably a few reasons this has not showed up more, you have to be a bit ""unlucky"". First of all, if the machine has a lot of memory so the initial heap sizes is larger than 1004M or so, there won't be any fragmentation to ""solve"". But in this case the initial heap size is 746M, so the array won't fit either below or above the initially allocated region that will be at region #746 (since the max is 1400M). G1 never actively try to place regions to fit a specific humongous allocation, but the Full GC tries to compact the regions to lower region numbers so that we get free regions at higher region numbers. 

After the Full GC was made Parallel, there is no longer a guarantee that after a Full GC all regions except humongous regions will be at the bottom. The reason is that the GC workers compete for regions to compact and if a worker is stalled or started slower than the others it might not get any ""low"" regions to compact into. 

In this scenario, when the Full GC is kicked off there is a single region around index #746 that needs to be compacted and in most cases it will be compacted to a region index that is way below #400 which is what is required to fit the array. 

;;;","2021-06-02 13:41;dcubed;Just had a sighting in Tier2 so I've bumped the
priority from P4 -> P3.;;;","2021-06-06 23:23;roboduke;Changeset: 204b4929
Author:    Stefan Johansson <sjohanss@openjdk.org>
Date:      2021-06-07 06:22:11 +0000
URL:       https://git.openjdk.java.net/jdk/commit/204b4929f7251feec6736aed9489ff82cd5dd744
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
[lworld] [lw3] runtime\exceptionMsgs\NullPointerException\NullPointerExceptionTest.java test fails because of new error message,JDK-8267698,5050366,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,fparain,fparain,fparain,2021-05-25 07:42,2021-05-25 09:59,2023-10-01 09:57,2021-05-25 09:59,repo-valhalla,,,,,,,,hotspot,,0,lw3,lworld,,,,,,,,,,,,"runtime\exceptionMsgs\NullPointerException\NullPointerExceptionTest.java tests fail to recognize the new error message of NullPointerException:

Source code:
  oa1[0] = new Object();

Output:
java.lang.NullPointerException: Cannot store to object array because ""<local3>"" is null or is a null-free array and there's an attempt to store null in it
	at NullPointerExceptionTest.testFailedAction(NullPointerExceptionTest.java:301)
expected msg: Cannot store to object array because ""<local3>"" is null

",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2syw3:",9223372036854775807,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
[lworld] [lw3] VM crashes during heap dump if Java heap contains flat arrays,JDK-8267697,5050365,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,amenkov,fparain,fparain,2021-05-25 07:28,2022-01-26 06:01,2023-10-01 09:57,2021-09-13 12:42,repo-valhalla,,,,,,,repo-valhalla,hotspot,,0,lw3,lworld,,,,,,,,,,,,"The VM crashes during heap dump because of lack of support for flat arrays.

#
# A fatal error has been detected by the Java Runtime Environment:
#
#  Internal Error (/home.local/fred/WORK/Valhalla/GitRepos/valhalla/open/src/hotspot/share/services/heapDumper
.cpp:735), pid=1833891, tid=1833898
#  Error: ShouldNotReachHere()
#
# JRE version: Java(TM) SE Runtime Environment (17.0) (fastdebug build 17-lworld3ea+0-2021-05-07-1433318.fred.
..)
# Java VM: Java HotSpot(TM) 64-Bit Server VM (fastdebug 17-lworld3ea+0-2021-05-07-1433318.fred..., mixed mode,
 sharing, tiered, compressed oops, compressed class ptrs, g1 gc, linux-amd64)
# Problematic frame:
# V  [libjvm.so+0xe060ee]  DumperSupport::sig2size(Symbol*)+0x7e
#
# No core dump will be written. Core dumps have been disabled. To enable core dumping, try ""ulimit -c unlimite
d"" before starting Java again
#
# If you would like to submit a bug report, please visit:
#   https://bugreport.java.com/bugreport/crash.jsp
#

---------------  S U M M A R Y ------------

Command Line: PressEnter

Host: dalk, Intel(R) Xeon(R) CPU E5-2630 v3 @ 2.40GHz, 16 cores, 31G, Ubuntu 20.04.2 LTS
Time: Tue May 25 10:22:10 2021 EDT elapsed time: 26.314957 seconds (0d 0h 0m 26s)

---------------  T H R E A D  ---------------

Current thread (0x00007f9280248010):  VMThread ""VM Thread"" [stack: 0x00007f9246700000,0x00007f9246800000] [id=
1833898]

Stack: [0x00007f9246700000,0x00007f9246800000],  sp=0x00007f92467fe5f0,  free space=1017k
Native frames: (J=compiled Java code, j=interpreted, Vv=VM code, C=native code)
V  [libjvm.so+0xe060ee]  DumperSupport::sig2size(Symbol*)+0x7e
V  [libjvm.so+0xe0631a]  DumperSupport::instance_size(Klass*) [clone .constprop.0]+0x1da
V  [libjvm.so+0xe0d335]  DumperSupport::dump_class_and_array_classes(DumpWriter*, Klass*)+0x205
V  [libjvm.so+0x9f1e0d]  ClassLoaderData::classes_do(KlassClosure*)+0x3d
V  [libjvm.so+0x9fd35d]  ClassLoaderDataGraph::classes_do(KlassClosure*)+0x1bd
V  [libjvm.so+0xe0ac5f]  VM_HeapDumper::work(unsigned int) [clone .part.0]+0xdf
V  [libjvm.so+0x1afbcaf]  WorkGang::run_task(AbstractGangTask*, unsigned int, bool)+0x13f
V  [libjvm.so+0xe04b9c]  VM_HeapDumper::doit()+0x16c
V  [libjvm.so+0x1a8cfaa]  VM_Operation::evaluate()+0x18a
V  [libjvm.so+0x1ab02a3]  VMThread::evaluate_operation(VM_Operation*)+0x183
V  [libjvm.so+0x1ab0f18]  VMThread::inner_execute(VM_Operation*)+0x1f8
V  [libjvm.so+0x1ab1155]  VMThread::loop()+0xb5
V  [libjvm.so+0x1ab1287]  VMThread::run()+0xc7
V  [libjvm.so+0x1997520]  Thread::call_run()+0x100
V  [libjvm.so+0x164349e]  thread_native_entry(Thread*)+0x10e
",,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8272401,,,,,,JDK-8278106,JDK-8272401,,,JDK-8280709,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2syvv:",9223372036854775807,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@2846162a,,,,,,,,,"2021-08-19 14:42;amenkov;After updating the repo VM dumps the heap successfully.
Heap dumps look similar for flattened arrays and for arrays of InstanceObjects;;;","2021-08-19 16:12;amenkov;Actually values of the flattened arrays are not included in the dump.
And 'jcmd <pid> GC.heap_dump <filepath>' crashes if java heap contains objects with flattened field.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Revisit (Doc)Tree search implemented by throwing an exception,JDK-8267690,5050356,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,jjg,prappo,prappo,2021-05-25 06:14,2022-04-27 23:28,2023-10-01 09:57,2022-04-25 13:56,17,,,,,,,19,tools,,0,,,,,,,,,,,,,,"In the below case a tree is searched for a specific node: https://github.com/openjdk/jdk/blob/739769c8fc4b496f08a92225a12d07414537b6c0/src/jdk.compiler/share/classes/com/sun/source/util/DocTreePath.java#L61

If the node is found, the search is terminated by throwing an exception containing that node: https://github.com/openjdk/jdk/blob/739769c8fc4b496f08a92225a12d07414537b6c0/src/jdk.compiler/share/classes/com/sun/source/util/DocTreePath.java#L77

The exception is then caught and the contained node is returned as the result of the search: https://github.com/openjdk/jdk/blob/739769c8fc4b496f08a92225a12d07414537b6c0/src/jdk.compiler/share/classes/com/sun/source/util/DocTreePath.java#L90

Such use of exceptions is counterintuitive and should be avoided. (See, for example, Item 69: Use exceptions only for exceptional conditions; Effective Java, Third Edition)

For the record: ""make docs-jdk-api"" results in approximately 220,000 of such exceptions being created and thrown.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8285619,,,,JDK-8285396,JDK-8285610,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2sytv:",9223372036854775807,b20,,,,,,,,,,,,"2021-05-25 06:58;prappo;I stumbled upon that case and created this issue while investigating why a LinkTree node I fabricated to pass to HtmlDocletWriter.seeTagToContent to process the snippet @link tag did not work. (My fabricated node was not part of the ""enclosing"" doc comment and thus could not be found in there.)

This issue suggests that the scanner might need to be able to control traversal. Or, alternatively, that an external traversal should be supported. In which case a method, getChildren(), that returns immediately enclosed Doc(Tree) instances could be provided.;;;","2021-09-22 10:28;jjg;Using exceptions was somewhat a solution of last resort.  

I think you can avoid exceptions by overriding `scan`, to make it a no-op if some internal scanner-specific variable is set.  I wish I'd thought of that when writing the original exception-based code.;;;","2021-09-22 11:13;prappo;I found this code (JDK-8266082) while searching JDK for classes that override the TreeScanner.reduce method:

        ListBuffer<JCTree> paramTypes = ...
        ...
        if (new TypeAnnotationFinder().scan(paramTypes, null) != null)
            throw new ParseException(""dc.ref.annotations.not.allowed"");
    ...

    static class TypeAnnotationFinder extends TreeScanner<Tree, Void> {
        @Override
        public Tree visitAnnotatedType(AnnotatedTypeTree t, Void ignore) {
            return t;
        }

        @Override
        public Tree reduce(Tree t1, Tree t2) {
            return t1 != null ? t1 : t2;
        }
    }

This code seems to assume that: (i) the list of JCTree instances is relatively small and (ii) certainly shallow. If the former (i) weren't true, then an early find would have to go on until the tree has been completely traversed. If the latter (ii) weren't true, then the nested AnnotatedTypeTree wouldn't be found. This is because the visitAnnotatedType method does not call super.visitAnnotatedType, which recurses. This is my initial reading, I haven't confirmed it yet.

I think that this example once again shows that TreeScanner is not adequate for search. My hope is that it could be improved.;;;","2021-09-22 11:40;jlahoda;FWIW, one way to do that without an exception is:
diff --git a/src/jdk.compiler/share/classes/com/sun/source/util/DocTreePath.java b/src/jdk.compiler/share/classes/com/sun/source/util/DocTreePath.java
index 3a66838729f..be20d3cf3fd 100644
--- a/src/jdk.compiler/share/classes/com/sun/source/util/DocTreePath.java
+++ b/src/jdk.compiler/share/classes/com/sun/source/util/DocTreePath.java
@@ -62,19 +62,15 @@ public class DocTreePath implements Iterable<DocTree> {
         Objects.requireNonNull(path); //null check
         Objects.requireNonNull(target); //null check
 
-        class Result extends Error {
-            static final long serialVersionUID = -5942088234594905625L;
-            DocTreePath path;
-            Result(DocTreePath path) {
-                this.path = path;
-            }
-        }
-
-        class PathFinder extends DocTreePathScanner<DocTreePath,DocTree> {
+        class PathFinder extends DocTreePathScanner<Void, DocTree> {
+            private DocTreePath result;
             @Override
-            public DocTreePath scan(DocTree tree, DocTree target) {
+            public Void scan(DocTree tree, DocTree target) {
                 if (tree == target) {
-                    throw new Result(new DocTreePath(getCurrentPath(), target));
+                    result = new DocTreePath(getCurrentPath(), target);
+                }
+                if (result != null) {
+                    return null;
                 }
                 return super.scan(tree, target);
             }
@@ -84,12 +80,10 @@ public class DocTreePath implements Iterable<DocTree> {
             return path;
         }
 
-        try {
-            new PathFinder().scan(path, target);
-        } catch (Result result) {
-            return result.path;
-        }
-        return null;
+        PathFinder finder = new PathFinder();
+        finder.scan(path, target);
+
+        return finder.result;
     }
 
     /**

It is also possible to do that using the reduce method, but I think some kind of a flag is needed anyway (to skip traversing the remainder of the tree), so it is a matter of preference which is better. (Note e.g. TreeInfo.TypeAnnotationFinder which does basically the same.)

As for the TypeAnnotationFinder in ReferenceParser, I agree it relies on the tree to be small (and it does not seem like a really bad assumption in this case - it is only type parameters(if I understand correctly?), which tend to be not so big). I think it does not need to recurse into the annotated types, as it basically only returns ""found/not found"".
;;;","2021-09-22 12:09;prappo;[~jlahoda], indeed, one approach would be to just fix PathFinder, for example, using a patch that you proposed. (BTW, there are at least 4 similar ""path finders"" in the JDK.) This would be good. However, a better approach might be to retrofit (Doc)TreeScanner API with traversal control (e.g. see java.nio.file.FileVisitResult). If pursued, one problem might be the runtime cost of creating a tuple to encode the control and the result values.;;;","2021-09-22 12:16;prappo;On the second thought, maybe we should wait for ""Pattern Matching for switch"". It will help to code ""external traversal"", which might be able to solve this kind of problems more elegantly.;;;","2021-09-22 12:44;prappo;FWIW, I think that stateful scanners are okay. It's not like they visit nodes from multiple threads anyway.;;;","2021-10-04 09:36;prappo;One more case of missing traversal control https://github.com/openjdk/jdk/pull/5510#discussion_r721332011;;;","2021-10-04 10:51;prappo;One way to reduce the runtime cost of the exception is not to capture the stack trace. This can be achieved through the protected  https://docs.oracle.com/en/java/javase/17/docs/api/java.base/java/lang/Throwable.html#%3Cinit%3E(java.lang.String,java.lang.Throwable,boolean,boolean) constructor. However, a better approach is to get rid of the exception altogether. ;;;","2022-04-22 12:16;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/8369
Date: 2022-04-22 19:10:38 +0000;;;","2022-04-25 13:56;dukebot;Changeset: 80a7f7be
Author:    Jonathan Gibbons <jjg@openjdk.org>
Date:      2022-04-25 20:54:11 +0000
URL:       https://git.openjdk.java.net/jdk/commit/80a7f7becfc362fc3918a2442aea912533373c26
;;;",,,,,,,,,,,,,,,,,,,,,,,
[8u] [aarch64] Crash due to bad shift in indirect addressing mode,JDK-8267689,5050355,Bug,Resolved,JDK,JDK,software,duke,,,P2,Fixed,simonis,simonis,simonis,2021-05-25 06:07,2021-07-15 03:44,2023-10-01 09:57,2021-05-28 01:47,openjdk8u,,,,,,,openjdk8u302,hotspot,,0,jdk8u-fix-request,jdk8u-fix-yes,oracle-triage-11,,,,,,,,,,,"This issue was initially reported against Corretto 8 (https://github.com/corretto/corretto-8/issues/302), but it affects all version of OpenJDK8u on aarch64.

@charliegracie has provided the following reproducer for a problem which led to intermittent crashes on linux/aarch64:

```
$ wget https://mirror.dsrg.utoronto.ca/apache/tomcat/tomcat-8/v8.5.65/bin/apache-tomcat-8.5.65.zip
$ unzip -q apache-tomcat-8.5.65.zip
$ cd apache-tomcat-8.5.65
$ wget https://repo1.maven.org/maven2/com/datadoghq/dd-java-agent/0.75.0/dd-java-agent-0.75.0.jar
$ cp ./webapps/docs/appdev/sample/sample.war webapps/
$ java -Djava.util.logging.config.file=./conf/logging.properties \
  -Djava.util.logging.manager=org.apache.juli.ClassLoaderLogManager \
  -Xms1g -Xmx1g -XX:ReservedCodeCacheSize=128m -XX:CICompilerCount=2 \
  -javaagent:dd-java-agent-0.75.0.jar -Ddd.service.name=platform -Ddd.tags=env:prod \
  -Djdk.tls.ephemeralDHKeySize=2048 -Djava.protocol.handler.pkgs=org.apache.catalina.webresources \
  -Dorg.apache.catalina.security.SecurityListener.UMASK=0027 -Dignore.endorsed.dirs= \
  -classpath ./bin/bootstrap.jar:./bin/tomcat-juli.jar \
  -Dcatalina.base=./ -Dcatalina.home=./ -Djava.io.tmpdir=./temp \
  org.apache.catalina.startup.Bootstrap start
```

From another shell do (with the [`armcrash.txt`](https://github.com/corretto/corretto-8/files/6443894/armcrash.txt) jmeter file attached to this issue):

```
$ wget https://ftp-stud.hs-esslingen.de/pub/Mirrors/ftp.apache.org/dist//jmeter/binaries/apache-jmeter-5.4.1.tgz
$ tar -xzf apache-jmeter-5.4.1.tgz
$ cd apache-jmeter-5.4.1
$ 

rm -rf /tmp/jmeter.report/* /tmp/jmeter.log && \
  ./bin/jmeter -n -t /priv/ec2-user/tomcat-crash/armcrash.txt -l /tmp/jmeter.log -e -o /tmp/jmeter.report/
```

If Tomcat doesn't crash restart it and re-run jmeter. Repeat until you see a crash (might require 10-20 runs).

If you run this in a debug build, the following asserton will trigger:

```
#
# A fatal error has been detected by the Java Runtime Environment:
#
#  Internal Error (/priv/ec2-user/OpenJDK/jdk8u-dev/hotspot/src/cpu/aarch64/vm/assembler_aarch64.hpp:480), pid=301100, tid=0x0000fffeb1d4f1e0
#  assert(_ext.shift() == (int)size) failed: bad shift
#
# JRE version: OpenJDK Runtime Environment (8.0) (build 1.8.0-internal-fastdebug-ec2user_2021_04_28_18_11-b00)
# Java VM: OpenJDK 64-Bit Server VM (25.71-b00-fastdebug mixed mode linux-aarch64 compressed oops)
# Core dump written. Default location: /priv/ec2-user/tomcat-crash/reproducer/apache-tomcat-8.5.65/core or core.301100
#
# If you would like to submit a bug report, please visit:
#   http://bugreport.java.com/bugreport/crash.jsp
#

---------------  T H R E A D  ---------------

Current thread (0x0000ffff79016800):  JavaThread ""C2 CompilerThread0"" daemon [_thread_in_native, id=301153, stack(0x0000fffeb1b50000,0x0000fffeb1d50000)]

Stack: [0x0000fffeb1b50000,0x0000fffeb1d50000],  sp=0x0000fffeb1d4a690,  free space=2025k
Native frames: (J=compiled Java code, j=interpreted, Vv=VM code, C=native code)
V  [libjvm.so+0xff0344]  VMError::report_and_die()+0x24c
V  [libjvm.so+0x68feb4]  report_vm_error(char const*, int, char const*, char const*)+0x6c
V  [libjvm.so+0x280684]  Address::encode(Instruction_aarch64*) const+0x3ec
V  [libjvm.so+0x26ae20]  Assembler::ld_st2(RegisterImpl*, Address const&, int, int, int) [clone .constprop.168]+0xa8
V  [libjvm.so+0x21bcd4]  loadStore(MacroAssembler, void (MacroAssembler::*)(RegisterImpl*, Address const&), RegisterImpl*, int, RegisterImpl*, int, int, int) [clone .constprop.154]+0x19c
V  [libjvm.so+0x22431c]  storeNNode::emit(CodeBuffer&, PhaseRegAlloc*) const+0x19c
V  [libjvm.so+0x5f85fc]  Compile::scratch_emit_size(Node const*)+0x2a4
V  [libjvm.so+0xd5f30c]  Compile::shorten_branches(unsigned int*, int&, int&, int&)+0x24c
V  [libjvm.so+0xd60278]  Compile::init_buffer(unsigned int*)+0x298
V  [libjvm.so+0xd69f1c]  Compile::Output()+0x2bc
V  [libjvm.so+0x60515c]  Compile::Code_Gen()+0x3fc
V  [libjvm.so+0x6081e8]  Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool)+0xda0
V  [libjvm.so+0x4c00d8]  C2Compiler::compile_method(ciEnv*, ciMethod*, int)+0xd8
V  [libjvm.so+0x612b64]  CompileBroker::invoke_compiler_on_method(CompileTask*)+0x384
V  [libjvm.so+0x614134]  CompileBroker::compiler_thread_loop()+0x5c4
V  [libjvm.so+0xf6cec0]  JavaThread::thread_main_inner()+0x1f0
V  [libjvm.so+0xf6d0d0]  JavaThread::run()+0x1d0
V  [libjvm.so+0xd4295c]  java_start(Thread*)+0x16c
C  [libpthread.so.0+0x7718]  start_thread+0x1a0
C  [libc.so.6+0xd207c]  thread_start+0xc


Current CompileTask:
C2:  36621 6751       4       org.jctools.queues.MpscBlockingConsumerArrayQueue::offer (121 bytes)
```

Notice that this issue only affects OpenJDK8u. In later releases it was fixed by JDK-8154826 which completely reworked complex addressing modes. Because that change doesn't apply cleanly (i.e. depends on JDK-8136820, JDK-8034812, etc) and also affects other platforms I suggest a point fix here which only fixes the current issue in jdk8u by checking the shift amount against the size of the memory operation in the Matcher and rejecting address modes where they don't conform (see https://github.com/corretto/corretto-8/pull/303).
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8154826,JDK-8270533,,,,,,,"2021-05-25 06:07;simonis;armcrash.txt;https://bugs.openjdk.org/secure/attachment/94789/armcrash.txt",,,,,,,,,,,aarch64,,,,,,,,,,,,,,"0|i2sytn:",9223372036854775807,b05,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2021-05-27 06:20;phh;Fix Request (8u).

Review approval thread: https://mail.openjdk.java.net/pipermail/jdk8u-dev/2021-May/013899.html
;;;","2021-05-28 01:47;hgupdate;URL:   https://hg.openjdk.java.net/jdk8u/jdk8u-dev/hotspot/rev/54326de2a1d7
User:  simonis
Date:  2021-05-28 08:43:27 +0000
;;;","2021-06-03 10:22;hgupdate;URL:   https://hg.openjdk.java.net/jdk8u/jdk8u/hotspot/rev/54326de2a1d7
User:  andrew
Date:  2021-06-03 17:20:06 +0000
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
rfc7301Grease8F value not displayed correctly in SSLParameters javadoc,JDK-8267683,5050349,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,wetmore,coffeys,coffeys,2021-05-25 05:03,2021-06-07 15:12,2023-10-01 09:57,2021-05-25 12:38,,,,,,,,17,security-libs,,0,,,,,,,,,,,,,,"Currently, the SSLParameters javadoc has an example String for coding purposes:
https://docs.oracle.com/en/java/javase/16/docs/api/java.base/javax/net/ssl/SSLParameters.html

// 0x00-0xFF:  1 byte
     String rfc7301Grease8F = ""\008F\008F"";

The Unicode encoding is being lost. I think either of these values in the src code should work:

String rfc7301Grease8F = ""\\u008F\\u008F"";
String rfc7301Grease8F = ""\u005cu008F\u005cu008F"";
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8267750,,,,,,,,,,,,,,,,,,,,,,,,,,,,generic,,,,,"0|i2sysb:",9223372036854775807,b24,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@39d9862,,,,,,,,,"2021-05-25 12:38;wetmore;Missing the u to properly output the value string in javadoc, and the GREASE values should be 0x8A, not 0x8F.

;;;","2021-05-25 12:38;roboduke;Changeset: e751b7b1
Author:    Bradford Wetmore <wetmore@openjdk.org>
Date:      2021-05-25 19:38:00 +0000
URL:       https://git.openjdk.java.net/jdk/commit/e751b7b1b6f7269a1fe20c07748c726536388f6d
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
[TESTBUG] many vmTestbase/gc/g1/* test failed on the aarch64 platform ,JDK-8267681,5050347,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,vaibhav,psinghal,psinghal,2021-05-25 04:51,2021-06-29 00:52,2023-10-01 09:57,2021-05-28 00:42,8u301,,,,,,,8u311,hotspot,,0,testbug,,,,,,,,,,,,,"TestSuite Name :- 	hotspot/vmTestbase/gc
Product Tested:- 8u301 b05
OS/architecture: Linux aarch64
Is it a Regression: (NO)these tests are newly colocated under /vmTestbase

Log:- 
----------System.err:(3/209)----------
Error: VM option 'UseG1GC' is experimental and must be enabled via -XX:+UnlockExperimentalVMOptions.
Error: Could not create the Java Virtual Machine.
Error: A fatal exception has occurred. Program will exit.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,aarch64,,,,,,,,,linux,,,,,"0|i2syrv:",9223372036854775807,b01,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@78d03d9a,,,,,,,,,"2021-05-25 09:29;vaibhav;for aarch64, G1 GC need experimental VM option to be unlock. We have modified enormous test and we will do so for /vmtestbase too. ;;;","2021-05-28 00:40;vaibhav;Since the failure is high, i bumped the priority to P3.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
[lworld] A couple of cleanups to Unified class file generation scheme,JDK-8267672,5050334,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,sadayapalam,sadayapalam,sadayapalam,2021-05-25 02:34,2021-05-25 04:49,2023-10-01 09:57,2021-05-25 04:49,repo-valhalla,,,,,,,repo-valhalla,tools,,0,lw3,lworld,,,,,,,,,,,,"(1) com.sun.tools.javac.code.Printer#visitClassType should protect against missing class files in the manner of how com.sun.tools.javac.code.Type.ClassType#toString wraps the calls to isReferenceProjection()

(2) In com.sun.tools.javac.comp.Lower#access(com.sun.tools.javac.code.Symbol, com.sun.tools.javac.tree.JCTree.JCExpression, com.sun.tools.javac.tree.JCTree.JCExpression, boolean)

the code block:

if (requireReferenceProjection) {
       flatname = flatname.append('$', names.ref);
}

should be invoked only for the case where we generate bifurcated classes 

",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,generic,,,,,,,,,generic,,,,,"0|i2syoz:",9223372036854775807,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4dca67bd,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
"8.10.3: ""floating point"" rather than ""floating-point""",JDK-8267658,5050320,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,abuckley,darcy,darcy,2021-05-24 20:07,2021-05-25 08:27,2023-10-01 09:57,2021-05-25 08:26,16,,,,,,,17,specification,,0,noreg-doc,,,,,,,,,,,,,"In a comment, 8.10.3 Record Members uses ""floating point"" rather than ""floating-point"":

""The use of compare in wrapper classes ensures that the implicitly declared equals method is reflexive and behaves consistently with the implicitly declared hashCode method for record classes that have floating point components.""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2sylv:",9223372036854775807,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@7441ef8d,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
c2 loop unrolling by 8 results in reading memory past array,JDK-8267652,5050313,Bug,Resolved,JDK,JDK,software,duke,,,P2,Fixed,neliasso,vkempik,vkempik,2021-05-24 16:19,2021-10-18 06:02,2023-10-01 09:57,2021-06-22 09:22,11,13,15.0.2,16,17,,,17,hotspot,,0,azul-interest,c2,hs-comp-triaged,intermittent,jdk11u-fix-request,jdk11u-fix-yes,jdk15u-fix-request,jdk15u-fix-yes,jdk16u-fix-request,noreg-hard,oracle-triage-11,oracle-triage-17,,"I have found a bug in c2 (x86_64/AVX2), which can be reproduced on latest ojdk17.

running java with these options:
-XX:UseAVX=2 -XX:LoopMaxUnroll=8
emits following code

   vmovq  0x10(%r8,%rdi,1),%xmm0  <-  read 8 bytes from byteArray1(r8)
   vpxor  0x10(%r11,%rdi,1),%xmm0,%xmm0 <- read 16 bytes from byteArray2 (r11) and xor them with xmm0
   vmovq  %xmm0,0x10(%r12,%rdi,1)      ;*bastore {reexecute=0 rethrow=0 return_oop=0}  <- write 8 bytes to byteArray3 (r12)
                                                            ; - repro::xor_array@18 (line 10)
   add    $0x8,%ebx                    ;*iinc {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - repro::xor_array@19 (line 10)
   cmp    %esi,%ebx

the problem is vpxor reading 16 bytes, not 8 bytes like vmovq before it.
it may sound like not a big deal, except one case, when there are no mapped memory after byteArray pointed by %r11, then vpxor will try to access unmapped memory and crash with seg fault.

Attaching reproducer which generates such assemly code, making it crash is very hard, as the object has to be located at very end of the region. But I have seen such crash in the wild, a snippet from such hs_err

siginfo: si_signo: 11 (SIGSEGV), si_code: 1 (SEGV_MAPERR), si_addr: 0x00007f5d7a000000

RBP=0x00007f5d79ffffc8 is an oop: [B 
{0x00007f5d79ffffc8} - klass: {type array byte}
 - length: 32

CompressedOops disabled, so header is 0x18 bytes

0001 movslq %r11d, %r10
0003 vmovq 0x18(%rcx, %r10, 1), %xmm0
000a vpxor   0x18(%rbp, %r10, 1), %xmm0, %xmm0  <- reading 16 bytes result in reading past mapped memory region
0011 vmovq %xmm0, 0x18(%r8, %r19, 1)
0018 add $0x8, %r11d
001c cmp $0x19, %r11d
0020 jl 0x00
",x86_64 cpu with AVX2,,,,,,,,,,JDK-8270933,JDK-8269200,JDK-8270526,JDK-8275409,JDK-8270621,,,,,,,,,,,,,,,,,,JDK-8269179,,,,,,,,"2021-05-24 16:27;vkempik;repro.java;https://bugs.openjdk.org/secure/attachment/94775/repro.java",,,,,,,,,,,x86,,,,,,,,,generic,,,,,"0|i2sykb:",9223372036854775807,b28,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2021-05-26 00:14;thartmann;ILW = Crash due to reading memory past array bounds, intermittent with C2 compiled code, disable loop unrolling / vectorization = HMM = P2;;;","2021-05-31 10:18;vkempik;as vpxor works only with 128-bit values ( or 16 bytes), the only way seems to be loading elements from byteArray2 into another xmm register (e.g. xmm1) and then use vpxor on register, e.g. vpxor xmm1, xmm0, xmm0. ( xmm0 = xmm0 ^ xmm1);;;","2021-05-31 23:13;thartmann;Or make sure that the vectorized main loop does not access the last element(s) of the array and leave them to the (unvectorized) post loop.;;;","2021-06-02 06:48;neliasso;Since this only applies to 8 byte vectors, and that isn't a default, a workaround that uses an extra register is ok.;;;","2021-06-02 06:52;vkempik;Well, it will fix the case when we use XOR operation, but other ops, like OR/AND/NOT and many other possible cases may not be fixed. Tobias's fix sounds more universal.;;;","2021-06-18 07:14;kvn;[~sviswanathan] an [~jbhateja] please, look on this issue and give us advice. Main question: can we have a variant for vxor_mem() when AVX > 0 but vector length <= 8 bytes.
It is really unfortunate if we have to replace one instruction with 2 by separating load from memory.
;;;","2021-06-18 14:15;sviswanathan;It is not just AVX, even for SSE minimum is 16 bytes. 
The x86.ad needs to be fixed with check for vector length in bytes to be >= 16 for the mem rules.;;;","2021-06-18 14:21;sviswanathan;For SSE we don't generate op instructions with mem as source due to alignment requirement, so only AVX rules need to be fixed. ;;;","2021-06-22 09:22;roboduke;Changeset: dc12cb78
Author:    Nils Eliasson <neliasso@openjdk.org>
Date:      2021-06-22 16:21:35 +0000
URL:       https://git.openjdk.java.net/jdk17/commit/dc12cb78b81f56e9d4b282cf7cad5faa9a9886bf
;;;","2021-06-24 03:56;vkempik;Fix Request (16u):
This fixes a p2 issue in jdk16.
the issue is intermitent. Happens when array object located at the very end of a mapped heap region
Backport applies cleanly;;;","2021-07-20 00:24;vkempik;Fix Request (15u):
This fixes a p2 issue in jdk15.
the issue is intermitent. Happens when array object located at the very end of a mapped heap region
Backport doesn't apply cleanly. tested with tier1 tests on release and fastdebug builds;;;","2021-10-14 06:22;vkempik;Fix Request (11u):
This fixes a p2 issue in jdk11u.
the issue is intermittent. Happens when array object located at the very end of a mapped heap region
Backport doesn't apply cleanly. tested with full tier regression set.
;;;",,,,,,,,,,,,,,,,,,,,,,
runtime/handshake/HandshakeTimeoutTest.java times out when dumping core,JDK-8267651,5050312,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,dholmes,dholmes,dholmes,2021-05-24 15:39,2021-06-07 15:13,2023-10-01 09:57,2021-05-25 16:36,17,,,,,,,17,hotspot,,0,tier3,,,,,,,,,,,,,"The handshake timeout test will crash the VM with a SIGILL sent to a thread. But the test doesn't disable core dumps so on macos this can hit the ""slow core dumping"" problem and thus the test times out at the jtreg level. The test should disable core dumps.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2syk3:",9223372036854775807,b24,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,,,"2021-05-25 16:36;roboduke;Changeset: d0d2ddcc
Author:    David Holmes <dholmes@openjdk.org>
Date:      2021-05-25 23:35:17 +0000
URL:       https://git.openjdk.java.net/jdk/commit/d0d2ddccaf93a1f97843e7d01c5bf6eb8ba3aece
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
[11u] 8227609 backport typo,JDK-8267641,5050301,Bug,Resolved,JDK,JDK,software,duke,,,P2,Fixed,phh,phh,phh,2021-05-24 13:39,2021-05-26 05:24,2023-10-01 09:57,2021-05-25 06:45,11.0.12,,,,,,,11.0.12,core-libs,,0,17-na,jdk11u-fix-request,jdk11u-fix-yes,,,,,,,,,,,"JDK-8267615, the 11u backport of JDK-8227609, contains a typo. See

https://hg.openjdk.java.net/jdk-updates/jdk11u-dev/file/dce73d35ee28/src/java.base/share/classes/sun/nio/ch/ChannelInputStream.java#l130

""8227609"" was appended to the end of the line. Fix is to remove it.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8227609,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2syhn:",9223372036854775807,b04,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@674604a9,,,,,,,,,"2021-05-24 14:13;phh;Review thread: https://mail.openjdk.java.net/pipermail/jdk-updates-dev/2021-May/006351.html
Webrev: https://cr.openjdk.java.net/~phh/8267641/webrev.11u.00/
;;;","2021-05-25 05:27;sgehwolf;Fix Request (OpenJDK 11u) - on behalf of Paul for faster cycle:

Fixes a build failure introduced by JDK-8267615. Builds after the patch.

Review thread: https://mail.openjdk.java.net/pipermail/jdk-updates-dev/2021-May/006351.html
Webrev: https://cr.openjdk.java.net/~phh/8267641/webrev.11u.00/

Reviewed by Martin Doerr and Yuri Nesterenko.;;;","2021-05-25 06:45;hgupdate;URL:   https://hg.openjdk.java.net/jdk-updates/jdk11u-dev/rev/6e1b1aabec8b
User:  phh
Date:  2021-05-25 13:43:21 +0000
;;;","2021-05-26 05:24;hgupdate;URL:   https://hg.openjdk.java.net/jdk-updates/jdk11u/rev/6e1b1aabec8b
User:  goetz
Date:  2021-05-26 12:21:50 +0000
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Clarify documentation of (Doc)TreeScanner,JDK-8267633,5050293,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,prappo,prappo,prappo,2021-05-24 13:17,2021-06-07 15:12,2023-10-01 09:57,2021-05-25 07:23,17,,,,,,,17,tools,,0,noreg-doc,,,,,,,,,,,,,"When a method is said to be called ""on an object"", this means that the object is a receiver. When a method is said to be called ""with an object"", this means that the object is a parameter.

To scan an instance of (Doc)Tree, the ""scan"" method is called on the instance of (Doc)TreeScanner with that instance of (Doc)Tree.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2syfv:",9223372036854775807,b24,,,,,,,,,,,,"2021-05-25 07:23;roboduke;Changeset: 5a5b807e
Author:    Pavel Rappo <prappo@openjdk.org>
Date:      2021-05-25 14:22:36 +0000
URL:       https://git.openjdk.java.net/jdk/commit/5a5b807e8e3b3148eea911ed1b2c9624b6846370
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Start of release updates for JDK 18,JDK-8267630,5050290,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,darcy,darcy,darcy,2021-05-24 13:14,2021-08-30 08:44,2023-10-01 09:57,2021-06-10 09:23,18,,,,,,,18,core-libs,,0,,,,,,,,,,,,,,Umbrella issue,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8267861,JDK-8257450,,,JDK-8273146,JDK-8267637,JDK-8268422,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2syf7:",9223372036854775807,b01,,,,,,,,,,,,"2021-06-10 09:23;roboduke;Changeset: b018c450
Author:    Joe Darcy <darcy@openjdk.org>
Date:      2021-06-10 16:22:14 +0000
URL:       https://git.openjdk.java.net/jdk/commit/b018c450e5e4737ccd08ed505fd06cee16c42648
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
AARCH64: typo in LIR_Assembler::emit_profile_type,JDK-8267625,5050284,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,ngasson,dlong,dlong,2021-05-24 12:01,2021-11-08 17:16,2023-10-01 09:57,2021-07-06 18:47,11,16,17,,,,,18,hotspot,,0,c1,hs-comp-triaged,jdk11u-fix-request,jdk11u-fix-yes,jdk13u-fix-request,jdk13u-fix-yes,jdk15u-fix-request,jdk15u-fix-yes,jdk17u-fix-request,jdk17u-fix-SQE-ok,jdk17u-fix-yes,oracle-triage-17,,"I noticed this in emit_profile_type:
Line 2812:
        // first time here. Set profile type.
        __ str(tmp, mdo_addr);
[...]
Line 2843:
        // first time here. Set profile type.
        __ ldr(tmp, mdo_addr);

Shouldn't that ""ldr"" be a ""str""?
",,,,,,,,,,,JDK-8271736,JDK-8271729,JDK-8272203,JDK-8271900,JDK-8271728,JDK-8270542,,,,,,,,,,,,,,,,,JDK-8276832,,,,,,,,"2021-07-05 03:46;ngasson;Test.java;https://bugs.openjdk.org/secure/attachment/95368/Test.java",,,,,,,,,,,aarch64,,,,,,,,,,,,,,"0|i2sydv:",9223372036854775807,b06,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2021-05-24 12:02;dlong;[~aph], could you take a look at this please?;;;","2021-05-26 00:12;thartmann;ILW = MDO not updated due to wrong instruction (ldr instead of str), edge case with C1 on aarch64, no workaround = MLH = P4;;;","2021-07-05 03:49;ngasson;I've attached a small test case that shows the problem with the following slightly contrived command line (not sure if there's an easier way):

  java -Xbatch -XX:CompileOnly=Test.test -XX:TypeProfileLevel=211 -XX:+PrintMethodData Test

And the dumped method data for Test::test shows:

static Test::test(LTest$A;I)I
  interpreter_invocation_count:       46336
  invocation_counter:                 46336
  backedge_counter:                       0
  decompile_count:                        0
  mdo size: 536 bytes

  parameter types                   0: stack(0) none

With the obvious ldr -> str change:

static Test::test(LTest$A;I)I
  interpreter_invocation_count:        5376
  invocation_counter:                  5376
  backedge_counter:                       0
  decompile_count:                        0
  mdo size: 536 bytes

  parameter types                   0: stack(0) 'Test$A'

The type of parameter 0 is recorded correctly.;;;","2021-07-06 18:47;roboduke;Changeset: 3d090e7e
Author:    Nick Gasson <ngasson@openjdk.org>
Date:      2021-07-07 01:47:11 +0000
URL:       https://git.openjdk.java.net/jdk/commit/3d090e7ee561252027c06021b337c69a39f724e1
;;;","2021-08-02 10:55;zgu;Fix Request (11u)

A clean backport for parity with Oracle 11.0.13.
;;;","2021-08-02 23:09;clanger;Fix Request (17u)
As this was backported to JDK11, it should be part of JDK17 LTS as well.;;;","2021-08-03 01:46;snazarki;Fix Request (13u, 15u)
A clean backport for parity with JDK11/17 ;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,
Mark HonorDeveloperSettingsTest as unstable on Linux,JDK-8267621,5050267,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,arapte,arapte,arapte,2021-05-24 09:40,2021-09-07 05:09,2023-10-01 09:57,2021-05-24 10:49,jfx17,,,,,,,jfx17,javafx,,0,css,noreg-self,testbug,,,,,,,,,,,"The test HonorDeveloperSettingsTest.testOpacityWithManuallyChangedValueAndInlineStyleIsSetToInlineStyle is failing intermittently only on GHA build on linux platform. see: JDK-8267425

A fix proposed at https://github.com/openjdk/jfx/pull/509 is a potential fix which adds cleanup of test. But we do not know the root cause of this failure.
Identifying the root cause may take longer and we might push that to test sprint and the test failure results in failing the github checks on PR. 
So we need to mark this test as unstable.
As of now the test fails only on linux so we will mark it unstable only for linux.",GHA linux build,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8267425,,,,,,,,,,,,,,,,,,,,,,,,,,,,linux,,,,,"0|i2sya3:",9223372036854775807,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4143e3f7,,,,,,,,,"2021-05-24 09:46;kcr;Are you sure that testOpacityWithManuallyChangedValueAndInlineStyleIsSetToInlineStyle is the only failing test? I think I've seen other tests fail as well, which would mean that the entire test class should be marked as unstable.

Update: Since the NPE is happening in the setup method, which is run before the test itself runs, it seems unlikely that marking just a single test method as unstable is sufficient.;;;","2021-05-24 10:49;roboduke;Changeset: 329013b3
Author:    Ambarish Rapte <arapte@openjdk.org>
Date:      2021-05-24 17:47:52 +0000
URL:       https://git.openjdk.java.net/jfx/commit/329013b321d0f95a26aa70c36b0702dc90e2f56f
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Certificate's IP x509 NameConstraints raises ArrayIndexOutOfBoundsException,JDK-8267617,5050130,Bug,Closed,JDK,JDK,software,duke,,,P4,Fixed,djelinski,webbuggrp,webbuggrp,2021-05-21 03:24,2023-01-31 03:46,2023-10-01 09:57,2022-12-06 00:26,11,17,8,,,,,20,security-libs,,0,additional-information-received,dcsaw,reproducer-yes,webbug,,,,,,,,,,"ADDITIONAL SYSTEM INFORMATION :
Ubuntu 18.04.5 LTS
jdk1.8.0_191 / jdk1.8.0_291 / jdk-11.0.11

A DESCRIPTION OF THE PROBLEM :
Server chain certificate with MORE THAN ONE intermediate CA whose certificates have x509v3 Name Constraints extension of IP type (one for ipv4 and ohter one for ipv6):

X509v3 Name Constraints: 
  Excluded:
    IP:0.0.0.0/0.0.0.0
    IP:0:0:0:0:0:0:0:0/0:0:0:0:0:0:0:0

raises ""java.lang.ArrayIndexOutOfBoundsException: 8"" when Java HTTP Client is trying to verify server certificate by using truststore.jks which contains only root CA, because of java.security libraries are trying to minimize/merge the constraints to apply, matching ipv4 name constraint of one intermediate CA with ipv6 name constraint of another intermediate CA, in a bad way.

In essence, it finishes executing code similar to ""Source code for an executable test case"" attached.

STEPS TO FOLLOW TO REPRODUCE THE PROBLEM :
1. Create server chain certificate with at least two intermediate CA's having x509v3 Name Constraints extensions of both IPv4 and IPv6 type.
2. Boot web server using certificate created in previous step
3. Create truststore.jks including only root CA of server certificate.
4. Send secure https request from java client using truststore created in previous step

EXPECTED VERSUS ACTUAL BEHAVIOR :
EXPECTED -
Server Response --> 200 OK
ACTUAL -
Caused by: java.lang.ArrayIndexOutOfBoundsException: 8
	at sun.security.x509.IPAddressName.constrains(IPAddressName.java:452) ~[?:1.8.0_275]
	at sun.security.x509.GeneralSubtrees.minimize(GeneralSubtrees.java:201) ~[?:1.8.0_275]
	at sun.security.x509.GeneralSubtrees.union(GeneralSubtrees.java:484) ~[?:1.8.0_275]
	at sun.security.x509.NameConstraintsExtension.merge(NameConstraintsExtension.java:357) ~[?:1.8.0_275]
	at sun.security.provider.certpath.ConstraintsChecker.mergeNameConstraints(ConstraintsChecker.java:208) ~[?:1.8.0_275]

---------- BEGIN SOURCE ----------
byte[] ipv4 = new byte[8];
for (int i=0;i<8;i++) ipv4[i]=0;
IPAddressName ip1 = new IPAddressName(ipv4);

byte[] ipv6 = new byte[32];
for (int i=0;i<32;i++) ipv6[i]=0;
IPAddressName ip2 = new IPAddressName(ipv6);

ip1.constrains(ip2);
---------- END SOURCE ----------

CUSTOMER SUBMITTED WORKAROUND :
Insert intermediate CA's into truststore.jks

FREQUENCY : always


",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"2021-05-24 06:06;tongwan;NameConstraints.java;https://bugs.openjdk.org/secure/attachment/94763/NameConstraints.java","2021-05-24 06:07;tongwan;ca-bundle.pem;https://bugs.openjdk.org/secure/attachment/94765/ca-bundle.pem","2021-05-24 06:06;tongwan;nginx.conf;https://bugs.openjdk.org/secure/attachment/94764/nginx.conf","2021-05-24 06:07;tongwan;rootca.crt;https://bugs.openjdk.org/secure/attachment/94766/rootca.crt","2021-05-24 06:07;tongwan;server.crt;https://bugs.openjdk.org/secure/attachment/94767/server.crt","2021-05-24 06:07;tongwan;server.key;https://bugs.openjdk.org/secure/attachment/94768/server.key","2021-05-24 06:07;tongwan;server.pem;https://bugs.openjdk.org/secure/attachment/94769/server.pem","2021-05-24 06:07;tongwan;truststoreRootCA.jks;https://bugs.openjdk.org/secure/attachment/94770/truststoreRootCA.jks",,,,,,,,,,,,,,,,,,"0|i2sxfn:",9223372036854775807,b27,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@2ec284e3,,,,,,,Verified,,"2021-05-21 04:47;tongwan;Requested a complete reproducer from the submitter.;;;","2021-05-24 00:30;tongwan;Additional information from the submitter:
1. Create JKS truststore containing only CA certificate (rootca.crt) which I attach, to use by java client
 
keytool -import -trustcacerts -alias root_ca -file rootca.crt -keystore ~/truststoreRootCA.jks
 
2. Boot any web server using key (server.key) and certificate chain (server.pem) for TLS communication, which I attach; in my case, i started openresty container but you can use anyone, executing from directory you download files I attach
 
docker run -dt -v $(pwd)/nginx.conf:/usr/local/openresty/nginx/conf/nginx.conf -v $(pwd)/server.pem:/tmp/server.crt -v $(pwd)/server.key:/tmp/server.key -v $(pwd)/rootca.crt:/tmp/ca-bundle.pem openresty/openresty:1.13.6.1-alpine  
 
You could see both intermediate CA's of server certificate have ipv4 and ipv6 Name Constraints:
 
X509v3 Name Constraints: 
                Excluded:
                  IP:0.0.0.0/0.0.0.0
                  IP:0:0:0:0:0:0:0:0/0:0:0:0:0:0:0:0
 
3. Run Java HTTP Client that sends HTTPS request using truststore jks created in previous step to verify server identity on SSL Handshake (replace IP from URL if you need):
 
import org.apache.http.HttpResponse;
import org.apache.http.client.HttpClient;
import org.apache.http.client.methods.HttpGet;
import org.apache.http.conn.ssl.DefaultHostnameVerifier;
import org.apache.http.impl.client.HttpClients;

import javax.net.ssl.SSLContext;
import javax.net.ssl.TrustManagerFactory;
import java.io.File;
import java.io.FileInputStream;
import java.security.KeyStore;

public class NameConstraints {

    public static void main(String[] args) throws Exception {

        File trustStoreFile = new File(System.getenv(""HOME"") + ""/truststoreRootCA.jks"");
        char[] trustStorePassword = ""foobar"".toCharArray();

        KeyStore trustStore = KeyStore.getInstance(KeyStore.getDefaultType());
        trustStore.load(new FileInputStream(trustStoreFile), trustStorePassword);
        TrustManagerFactory trustManagerFactory = TrustManagerFactory.getInstance(TrustManagerFactory.getDefaultAlgorithm());
        trustManagerFactory.init(trustStore);

        SSLContext sslContext = SSLContext.getInstance(""TLSv1.2"");
        sslContext.init( null, trustManagerFactory.getTrustManagers(), null);

        HttpClient httpClient = HttpClients.custom()
                .setSSLContext(sslContext)
                .setSSLHostnameVerifier(new DefaultHostnameVerifier())
                .build();

        HttpGet request = new HttpGet(""https://172.17.0.2:443"");

        HttpResponse response = httpClient.execute(request);
    }
}
 
I used the following pom.xml to resolve dependencies:
 
<?xml version=""1.0"" encoding=""UTF-8""?>
<project xmlns=""http://maven.apache.org/POM/4.0.0""
         xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""
         xsi:schemaLocation=""http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"">
    <modelVersion>4.0.0</modelVersion>

    <artifactId>name-constraints-bug</artifactId>
    <groupId>com.oracle.bug</groupId>
    <version>0.1.0-SNAPSHOT</version>
    <packaging>jar</packaging>

    <dependencies>

        <dependency>
            <groupId>org.apache.httpcomponents</groupId>
            <artifactId>httpclient</artifactId>
            <version>4.5.10</version>
        </dependency>
    </dependencies>
</project>
 
and I run code over JDK 1.8.0_291, getting result:
 
Exception in thread ""main"" javax.net.ssl.SSLException: java.lang.ArrayIndexOutOfBoundsException: 8
at sun.security.ssl.Alert.createSSLException(Alert.java:133)
at sun.security.ssl.TransportContext.fatal(TransportContext.java:370)
at sun.security.ssl.TransportContext.fatal(TransportContext.java:313)
at sun.security.ssl.TransportContext.fatal(TransportContext.java:308)
at sun.security.ssl.SSLSocketImpl.handleException(SSLSocketImpl.java:1463)
at sun.security.ssl.SSLSocketImpl.startHandshake(SSLSocketImpl.java:414)
at sun.security.ssl.SSLSocketImpl.startHandshake(SSLSocketImpl.java:373)
at org.apache.http.conn.ssl.SSLConnectionSocketFactory.createLayeredSocket(SSLConnectionSocketFactory.java:436)
at org.apache.http.conn.ssl.SSLConnectionSocketFactory.connectSocket(SSLConnectionSocketFactory.java:384)
at org.apache.http.impl.conn.DefaultHttpClientConnectionOperator.connect(DefaultHttpClientConnectionOperator.java:142)
at org.apache.http.impl.conn.PoolingHttpClientConnectionManager.connect(PoolingHttpClientConnectionManager.java:374)
at org.apache.http.impl.execchain.MainClientExec.establishRoute(MainClientExec.java:393)
at org.apache.http.impl.execchain.MainClientExec.execute(MainClientExec.java:236)
at org.apache.http.impl.execchain.ProtocolExec.execute(ProtocolExec.java:186)
at org.apache.http.impl.execchain.RetryExec.execute(RetryExec.java:89)
at org.apache.http.impl.execchain.RedirectExec.execute(RedirectExec.java:110)
at org.apache.http.impl.client.InternalHttpClient.doExecute(InternalHttpClient.java:185)
at org.apache.http.impl.client.CloseableHttpClient.execute(CloseableHttpClient.java:83)
at org.apache.http.impl.client.CloseableHttpClient.execute(CloseableHttpClient.java:108)
at org.apache.http.impl.client.CloseableHttpClient.execute(CloseableHttpClient.java:56)
at com.oracle.bug.NameConstraints.main(NameConstraints.java:37)
Caused by: java.lang.ArrayIndexOutOfBoundsException: 8
at sun.security.x509.IPAddressName.constrains(IPAddressName.java:452)
at sun.security.x509.GeneralSubtrees.minimize(GeneralSubtrees.java:201)
at sun.security.x509.GeneralSubtrees.union(GeneralSubtrees.java:484)
at sun.security.x509.NameConstraintsExtension.merge(NameConstraintsExtension.java:357)
at sun.security.provider.certpath.ConstraintsChecker.mergeNameConstraints(ConstraintsChecker.java:208)
at sun.security.provider.certpath.ConstraintsChecker.verifyNameConstraints(ConstraintsChecker.java:163)
at sun.security.provider.certpath.ConstraintsChecker.check(ConstraintsChecker.java:123)
at sun.security.provider.certpath.PKIXMasterCertPathValidator.validate(PKIXMasterCertPathValidator.java:125)
at sun.security.provider.certpath.PKIXCertPathValidator.validate(PKIXCertPathValidator.java:225)
at sun.security.provider.certpath.PKIXCertPathValidator.validate(PKIXCertPathValidator.java:145)
at sun.security.provider.certpath.PKIXCertPathValidator.engineValidate(PKIXCertPathValidator.java:84)
at java.security.cert.CertPathValidator.validate(CertPathValidator.java:292)
at sun.security.validator.PKIXValidator.doValidate(PKIXValidator.java:364)
at sun.security.validator.PKIXValidator.engineValidate(PKIXValidator.java:263)
at sun.security.validator.Validator.validate(Validator.java:271)
at sun.security.ssl.X509TrustManagerImpl.validate(X509TrustManagerImpl.java:312)
at sun.security.ssl.X509TrustManagerImpl.checkTrusted(X509TrustManagerImpl.java:221)
at sun.security.ssl.X509TrustManagerImpl.checkServerTrusted(X509TrustManagerImpl.java:128)
at sun.security.ssl.CertificateMessage$T12CertificateConsumer.checkServerCerts(CertificateMessage.java:636)
at sun.security.ssl.CertificateMessage$T12CertificateConsumer.onCertificate(CertificateMessage.java:471)
at sun.security.ssl.CertificateMessage$T12CertificateConsumer.consume(CertificateMessage.java:367)
at sun.security.ssl.SSLHandshake.consume(SSLHandshake.java:376)
at sun.security.ssl.HandshakeContext.dispatch(HandshakeContext.java:479)
at sun.security.ssl.HandshakeContext.dispatch(HandshakeContext.java:457)
at sun.security.ssl.TransportContext.dispatch(TransportContext.java:200)
at sun.security.ssl.SSLTransport.decode(SSLTransport.java:154)
at sun.security.ssl.SSLSocketImpl.decode(SSLSocketImpl.java:1290)
at sun.security.ssl.SSLSocketImpl.readHandshakeRecord(SSLSocketImpl.java:1199)
at sun.security.ssl.SSLSocketImpl.startHandshake(SSLSocketImpl.java:401)
... 15 more
;;;","2021-05-24 06:05;tongwan;The observations on Windows 10:
JDK 8: Failed, ArrayIndexOutOfBoundsException thrown
JDK 11: Failed.
JDK 17ea+6: Failed.;;;","2022-12-01 08:59;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/11459
Date: 2022-12-01 16:37:48 +0000;;;","2022-12-06 00:26;dukebot;Changeset: 2a243a33
Author:    Daniel Jeliński <djelinski@openjdk.org>
Date:      2022-12-06 08:24:17 +0000
URL:       https://git.openjdk.org/jdk/commit/2a243a33cc09f4674b232d89f36fb731055009d9
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
NPE at at jdk.compiler/com.sun.tools.javac.jvm.Code.emitop,JDK-8267610,5050034,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,gli,webbuggrp,webbuggrp,2021-05-20 04:27,2021-07-15 10:17,2023-10-01 09:57,2021-06-24 16:08,17,,,,,,,17,tools,,0,17ea,dcsad,regression,reproducer-yes,webbug,,,,,,,,,"A DESCRIPTION OF THE PROBLEM :
javac crashes at ""jdk.compiler/com.sun.tools.javac.jvm.Code.emitop0"" with NPE when trying to compile a correct program. The program compiles successfully with 16.0.1 compiler, but crashes with 17.ea.22.

Pasting the error messages below. Also attached the source code with the bug report. 

java.lang.NullPointerException: Cannot read field ""sym"" because ""this.lvar[2]"" is null
        at jdk.compiler/com.sun.tools.javac.jvm.Code.emitop0(Code.java:574)
        at jdk.compiler/com.sun.tools.javac.jvm.Items$LocalItem.load(Items.java:399)
        at jdk.compiler/com.sun.tools.javac.jvm.Gen.visitTypeTest(Gen.java:2233)
        at jdk.compiler/com.sun.tools.javac.tree.JCTree$JCInstanceOf.accept(JCTree.java:2172)
        at jdk.compiler/com.sun.tools.javac.jvm.Gen.genExpr(Gen.java:877)
        at jdk.compiler/com.sun.tools.javac.jvm.Gen.genCond(Gen.java:783)
        at jdk.compiler/com.sun.tools.javac.jvm.Gen.genCond(Gen.java:696)
        at jdk.compiler/com.sun.tools.javac.jvm.Gen.visitBinary(Gen.java:2136)
        at jdk.compiler/com.sun.tools.javac.tree.JCTree$JCBinary.accept(JCTree.java:2114)
        at jdk.compiler/com.sun.tools.javac.jvm.Gen.genExpr(Gen.java:877)
        at jdk.compiler/com.sun.tools.javac.jvm.Gen.visitParens(Gen.java:2005)
        at jdk.compiler/com.sun.tools.javac.tree.JCTree$JCParens.accept(JCTree.java:1972)
        at jdk.compiler/com.sun.tools.javac.jvm.Gen.genExpr(Gen.java:877)
        at jdk.compiler/com.sun.tools.javac.jvm.Gen.genCond(Gen.java:783)
        at jdk.compiler/com.sun.tools.javac.jvm.Gen.genCond(Gen.java:696)
        at jdk.compiler/com.sun.tools.javac.jvm.Gen.visitConditional(Gen.java:1878)
        at jdk.compiler/com.sun.tools.javac.tree.JCTree$JCConditional.accept(JCTree.java:1475)
        at jdk.compiler/com.sun.tools.javac.jvm.Gen.genExpr(Gen.java:877)
        at jdk.compiler/com.sun.tools.javac.jvm.Gen.visitLetExpr(Gen.java:2368)
        at jdk.compiler/com.sun.tools.javac.tree.JCTree$LetExpr.accept(JCTree.java:3120)
        at jdk.compiler/com.sun.tools.javac.jvm.Gen.genExpr(Gen.java:877)
        at jdk.compiler/com.sun.tools.javac.jvm.Gen.visitParens(Gen.java:2005)
        at jdk.compiler/com.sun.tools.javac.tree.JCTree$JCParens.accept(JCTree.java:1972)
        at jdk.compiler/com.sun.tools.javac.jvm.Gen.genExpr(Gen.java:877)
        at jdk.compiler/com.sun.tools.javac.jvm.Gen.visitReturn(Gen.java:1830)
        at jdk.compiler/com.sun.tools.javac.tree.JCTree$JCReturn.accept(JCTree.java:1667)
        at jdk.compiler/com.sun.tools.javac.jvm.Gen.genDef(Gen.java:610)
        at jdk.compiler/com.sun.tools.javac.jvm.Gen.genStat(Gen.java:645)
        at jdk.compiler/com.sun.tools.javac.jvm.Gen.genStat(Gen.java:631)
        at jdk.compiler/com.sun.tools.javac.jvm.Gen.genStats(Gen.java:682)
        at jdk.compiler/com.sun.tools.javac.jvm.Gen.visitBlock(Gen.java:1097)
        at jdk.compiler/com.sun.tools.javac.tree.JCTree$JCBlock.accept(JCTree.java:1055)
        at jdk.compiler/com.sun.tools.javac.jvm.Gen.genDef(Gen.java:610)
        at jdk.compiler/com.sun.tools.javac.jvm.Gen.genStat(Gen.java:645)
        at jdk.compiler/com.sun.tools.javac.jvm.Gen.genMethod(Gen.java:967)
        at jdk.compiler/com.sun.tools.javac.jvm.Gen.visitMethodDef(Gen.java:930)
        at jdk.compiler/com.sun.tools.javac.tree.JCTree$JCMethodDecl.accept(JCTree.java:901)
        at jdk.compiler/com.sun.tools.javac.jvm.Gen.genDef(Gen.java:610)
        at jdk.compiler/com.sun.tools.javac.jvm.Gen.genClass(Gen.java:2407)
        at jdk.compiler/com.sun.tools.javac.main.JavaCompiler.genCode(JavaCompiler.java:756)
        at jdk.compiler/com.sun.tools.javac.main.JavaCompiler.generate(JavaCompiler.java:1644)
        at jdk.compiler/com.sun.tools.javac.main.JavaCompiler.generate(JavaCompiler.java:1612)
        at jdk.compiler/com.sun.tools.javac.main.JavaCompiler.compile(JavaCompiler.java:973)
        at jdk.compiler/com.sun.tools.javac.main.Main.compile(Main.java:317)
        at jdk.compiler/com.sun.tools.javac.main.Main.compile(Main.java:176)
        at jdk.compiler/com.sun.tools.javac.Main.compile(Main.java:64)
        at jdk.compiler/com.sun.tools.javac.Main.main(Main.java:50)

REGRESSION : Last worked in version 16.0.1

STEPS TO FOLLOW TO REPRODUCE THE PROBLEM :
javac Main.java

EXPECTED VERSUS ACTUAL BEHAVIOR :
EXPECTED -
compile successfully
ACTUAL -
javac crashes

---------- BEGIN SOURCE ----------
import java.util.function.Supplier;

class Main {
  public Integer foo(Object x) {
    Integer bar = 1;
    return ((x instanceof Number y) ?
        ((Supplier<Integer>) (() -> {
          return ((y instanceof Integer z) ? z : bar);
        })).get() : bar);
  }
}

---------- END SOURCE ----------

CUSTOMER SUBMITTED WORKAROUND :
Remove the bar variable and use an integer value directly.

FREQUENCY : always


",,,,,,,,,,,JDK-8269454,JDK-8270641,,,,,,,,,,,,,,,,,,,,,JDK-8268748,,,,JDK-8229862,JDK-8220041,,,"2021-05-24 03:54;adev;Main.java;https://bugs.openjdk.org/secure/attachment/94756/Main.java",,,,,,,,,,,x86_64,,,,,,b09,17,,generic,,,,,"0|i2swub:",9223372036854775807,b29,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4dca67bd,,,,,,,,,"2021-05-24 03:54;adev;The issue is reproducible with JDK 17:
java.lang.NullPointerException: Cannot read field ""sym"" because ""this.lvar[2]"" is null
        at jdk.compiler/com.sun.tools.javac.jvm.Code.emitop0(Code.java:574) 

After testing through different builds, following is my observation:
JDK 16 all builds : Pass
JDK 17 ea b8: Pass
JDK 17 ea b9: Fail
Subsequent builds : Fail;;;","2021-06-14 22:17;gli;@Vicente Have you started the work? I have a patch locally to solve this issue and want to assign this issue to me.
;;;","2021-06-15 03:47;gli;This issue blocks JDK-8268748. To solve JDK-8268748, I would like to solve this issue as soon as possible and will submit a PR later.
@Vicente If you have any progress locally, please tell me, and I will combine your code or tests with mine.;;;","2021-06-24 16:08;roboduke;Changeset: 7ab12856
Author:    Guoxiong Li <gli@openjdk.org>
Date:      2021-06-24 23:07:43 +0000
URL:       https://git.openjdk.java.net/jdk17/commit/7ab12856c4b914a2f7b7de3cd4963598aab0f330
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
[macos] [lanai] java/awt/PrintJob/Text/stringwidth.sh doesn't exit on cancelling print dialog,JDK-8267602,5050244,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,jdv,amrsahu,amrsahu,2021-05-24 02:30,2021-10-18 03:09,2023-10-01 09:57,2021-06-30 20:02,17,,,,,,,17,client-libs,,0,lanai,macos,sn_96,sqebug,,,,,,,,,,"Additional Info:
Mac OS BugSur ver:11.2.1 
Chip:Apple M1, aarch64

Tested on JDK 17 build 20

Observation: After starting the test. UI does not show any instruction and another print dialog opens. After clicking print button, One Hello world string is printed and test case execution does not complete.Test case runs for a long time without showing the pass or fail result.",,,,,,,,,,,JDK-8270690,JDK-8269778,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"2021-05-24 04:52;amrsahu;stringwidth.jtr;https://bugs.openjdk.org/secure/attachment/94760/stringwidth.jtr","2021-05-24 04:52;amrsahu;stringwidth.png;https://bugs.openjdk.org/secure/attachment/94759/stringwidth.png",,,,,,,,,,generic,,,,,,,,,os_x,,,,,"0|i2sy4z:",9223372036854775807,b30,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4b09ce31,,,,,,,,,"2021-05-24 11:41;vdyakov;[~amrsahu] is it a regression in b20 ?;;;","2021-05-26 08:02;amrsahu;This test case works fine with jdk17b13, jdk17b17, jdk17b18. It is failing with jdk17b19 and jdk17b20.
On other mac machine(not aarch64), It is passing with JDK-17b20. 
;;;","2021-05-31 22:10;psadhukhan;[~amrsahu] In jdk17b19 we have enabled metal pipeline by default.
Can you please run the test with -Dsun.java2d.opengl=True in jdk17b19,20 and tell us the result

Also, Metal pipleline is reverted to opengl in b23 so please also run this test either with that build or latest in that M1 machine with default command line and with -Dsun.java2d.metal=True?;;;","2021-05-31 23:34;amrsahu;I have executed test case with -Dsun.java2d.opengl=true in jdk17b19 and jdk17b20. The test case is passing.

Same test case in jdk17b23 with -Dsun.java2d.metal=true is failing.;;;","2021-05-31 23:58;psadhukhan;Can you also please confirm that it's not a regression from jdk20 onwards rather a metal issue?

You can run the test with  -Dsun.java2d.metal=True in jdk17b14 since Metal pipleine is integrated via JDK-8260931 in b14 and also with opengl=True in b14?;;;","2021-06-01 00:44;amrsahu;[~psadhukhan]: Test case failed with -Dsun.java2d.metal=True in jdk17b14 and passed in same build with opengl=True.;;;","2021-06-01 08:04;prr;> Can you also please confirm that it's not a regression from jdk20 onwards rather a metal issue

Amresh said it fails from b19

There are no obvious fixes there which would cause a regression except for switching on metal :
 
project = JDK AND fixVersion = ""17"" AND component = client-libs AND ""Resolved In Build"" = b19

>>This test case works fine with jdk17b13, jdk17b17, jdk17b18. It is failing with jdk17b19 and jdk17b20. 
>> On other mac machine(not aarch64), It is passing with JDK-17b20. 

The way this is written could confuse someone. It seems to imply it was working on aarch64 in builds 13 -> 18
Yet there was NO aarch64 build for those build numbers. So I think you need to clarify but it seems like it
might be something that occurs ONLY on M1 AND when running Metal

We need that cleared up, so try all these combinations :
1) Does it reproduce on M1 with b23 when using each of opengl=true and metal=true ?
2) Does it reproduce on x64 with b23 when using each of opengl=true and metal=true  ?
;;;","2021-06-01 23:40;amrsahu;This is the outcome:
1) Tested on M1 with b23 using opengl=true : Passed
2) Tested on M1 with b23 using  metal=true  : Failed

3) Tetsed on x64 with b23 using  opengl=true: Passed
4) Tested on x64 with b23 using  metal=true  : Failed;;;","2021-06-02 12:57;prr;Based on that I have removed all labels related to aarch64/arm/m1 and the regression label.
It seems to be a cross-architecture issue in the new metal pipeline.;;;","2021-06-08 11:26;prr;Running the Java test directly fromthe command line (not using the script or jtreg) I see the same behaviour
With OpenGL it exits, with Metal it doesn't. The test executes om the ""main"" thread which is a bit odd, but
that main thread exits and yet the VM doesn''t exit, so I guess that something is preventing it.
The frame isn't disposed, but adding a call to that didn't help. 

I think we should at least understand this before punting it to JDK 18.
;;;","2021-06-10 21:45;jdv;I was under wrong impression that we need to work on only P1/P2's from June 10th(RDP1) and it was driving me to re-target P3's to 18. We still have time until RDP2 to work on P3's, so i will be taking a look at this bug from JDK 17 perspective.;;;","2021-06-11 09:49;vdyakov;[~jdv] please subscribe at jdk-dev Mailing List: http://mail.openjdk.java.net/pipermail/jdk-dev/2021-June/005690.html where is Mark just announced we are at RDP1 (no more P4s and no more enhancements) till July 15th.;;;","2021-06-29 09:22;jdv;If we just let it run after cancelling print dialog, test will exit with Passed message. Enabled J2D_TRACE logs in this scenario and noticed that we are hitting use case of Invalid texture dimensions(uninitialized texture with 0 dimensions) in MTLLayer.blitTexture and we just return without doing final blit.

But we have displayLink running in this scenario and we dont stop it. This is leading to continuous loop of final blit operation.

J2D_TRACE_LOG with additional logging added :
[V] MTLLayer_displayLinkCallback() called
[V] MTLLayer_display() called
[V] MTLLayer_blitTexture
[V] MTLLayer.blitTexture: Invalid src width or height.(src_x=0.000000, src_y=0.000000, src_w=0.000000, src_h=0.000000 )
[V] MTLLayer_displayLinkCallback() called
[V] MTLLayer_displayLinkCallback() called
[V] MTLLayer_displayLinkCallback() called
[V] MTLLayer_displayLinkCallback() called
[V] MTLLayer_displayLinkCallback() called
[V] MTLLayer_displayLinkCallback() called
[V] MTLLayer_displayLinkCallback() called
[V] MTLLayer_displayLinkCallback() called
[V] MTLLayer_displayLinkCallback() called
[V] MTLLayer_displayLinkCallback() called
[V] MTLLayer_displayLinkCallback() called
[V] MTLLayer_displayLinkCallback() called
[V] MTLLayer_displayLinkCallback() called
[V] MTLLayer_displayLinkCallback() called
[V] MTLLayer_displayLinkCallback() called
[V] MTLLayer_displayLinkCallback() called
[V] MTLLayer_displayLinkCallback() called
[V] MTLLayer_displayLinkCallback() called
[V] MTLLayer_displayLinkCallback() called
[V] MTLLayer_displayLinkCallback() called
[V] MTLLayer_displayLinkCallback() called
[V] MTLLayer_display() called
[V] MTLLayer_blitTexture
[V] MTLLayer.blitTexture: Invalid src width or height.(src_x=0.000000, src_y=0.000000, src_w=0.000000, src_h=0.000000 )
[V] MTLLayer_displayLinkCallback() called;;;","2021-06-29 10:17;jdv;Made change to stop DisplayLink whenever we return from MTLLayer.blitTexture without finishing final blit. This resolves the issue of getting locked into continuous loop of displayLinkCallback(). java/awt/PrintJob/Text/stringwidth.sh jtreg test exits properly now once we cancel print dialog. This change should not cause side effects in rendering because we are just stopping a thread when we exit final blit operation because of some conditions.

Sanity check with J2DDemo, SwingSet2 and Font2DTest is fine.
Did rigorous synchronization testing like running SwingSet/J2DDemo on Multiple screens, moving between screens, Multiple Checkbox/RadioButton click test(Like https://bugs.openjdk.java.net/browse/JDK-8247332). Not seeing any issues.
Sanity and performance of RenderPerfTest is also fine.;;;","2021-06-30 20:02;roboduke;Changeset: f7ffd587
Author:    Jayathirth D V <jdv@openjdk.org>
Date:      2021-07-01 03:01:30 +0000
URL:       https://git.openjdk.java.net/jdk17/commit/f7ffd5872d69633c89505ce3e4fef9df8293e76b
;;;",,,,,,,,,,,,,,,,,,,
Revert the change to the default PKCS12 macAlgorithm and macIterationCount props for 11u/8u/7u,JDK-8267599,5050241,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,coffeys,shadowbug,shadowbug,2021-05-24 02:08,2022-09-14 16:17,2023-10-01 09:57,2021-05-25 13:56,11.0.12,7u311,8u301,,,,,11.0.13-oracle,security-libs,,0,17-na,bugdb_32913309,CPU21_07-critical-approved,CPU21_07-critical-SQE-OK,hgupdate-sync,Internal,jdk11u-fix-request,jdk11u-fix-yes,,,,,,"pkcs12 keystores created using JDK 11.0.12 or later can't be read by earlier JDK 11 versions.

Calling keyStore.load() on file: file:trust.jks, type: PKCS12, password:password
Exception in thread ""main"" java.io.IOException: Integrity check failed: java.security.NoSuchAlgorithmException: Algorithm HmacPBESHA256 not available
        at java.base/sun.security.pkcs12.PKCS12KeyStore.engineLoad(PKCS12KeyStore.java:2167)
        at java.base/sun.security.util.KeyStoreDelegator.engineLoad(KeyStoreDelegator.java:222)
        at java.base/java.security.KeyStore.load(KeyStore.java:1479)
        at LoadKeyStore.main(LoadKeyStore.java:33)
Caused by: java.security.NoSuchAlgorithmException: Algorithm HmacPBESHA256 not available
        at java.base/javax.crypto.Mac.getInstance(Mac.java:191)
        at java.base/sun.security.pkcs12.PKCS12KeyStore.engineLoad(PKCS12KeyStore.java:2145)
        ... 3 more
",,,,,,,,,,,JDK-8267975,JDK-8267788,JDK-8267777,JDK-8267741,JDK-8267784,JDK-8267742,JDK-8269330,,,,,,,JDK-8267701,,,,,,,,,,,,,JDK-8267837,JDK-8153005,JDK-8267981,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2sy4b:",9223372036854775807,b01,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@2ec284e3,,,,,,,,,"2021-05-24 02:18;coffeys;HmacPBESHA256 is a new algorithm introduced in JDK 11.0.12 via JDK-8153005 work. We should consider winding back the default algorithm for medium term in a bid to help interoperability. ;;;","2021-05-26 06:01;coffeys;extract from CSR: 

==
End users will have full control over what default PKCS12 values get used via the new keystore.pkcs12.macAlgorithm and keystore.pkcs12.macIterationCount security properties which have already been integrated into 11.0.12, JDK 8u301 and JDK 7u311 codelines.
== 

If end user chooses to use HmacPBESHA256 algorithm (by editing properties in java.security), then they should be aware that JDK 11.0.12, JDK 8u301 or JDK 7u311 (or newer) is required to open/read such a keystore;;;","2021-05-28 05:56;mdoerr;Fix Request (11u)
JDK-8153005 was already backported to OpenJDK 11.0.12, too. Reverting macAlgorithm and macIterationCount requires a test adaptation. Review thread:
http://mail.openjdk.java.net/pipermail/jdk-updates-dev/2021-May/006387.html
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
jpackage removes system libraries from java.library.path,JDK-8267598,5050222,Bug,Closed,JDK,JDK,software,duke,,,P3,Fixed,herrick,webbuggrp,webbuggrp,2021-05-23 08:47,2021-08-11 08:13,2023-10-01 09:57,2021-06-03 12:03,17,,,,,,,17,tools,,0,17ea,dcsad,regression,regression_8263157,reproducer-yes,sn_94,webbug,,,,,,,"ADDITIONAL SYSTEM INFORMATION :
Windows 10

A DESCRIPTION OF THE PROBLEM :
EXE launchers created by jpackage don't have Windows system DLLs in java.library.path and sets the path to match the current installation directory and its ""app"" subdirectory - so System.loadLibrary(""ole32"") will fail. If setting -Djava.library.path explicitly when launching  jpackage, then jpackage does not append those two directories to java.library.path.

REGRESSION : Last worked in version 16.0.1

STEPS TO FOLLOW TO REPRODUCE THE PROBLEM :
Use jpackage to generate launcher test.exe for the example program below.

EXPECTED VERSUS ACTUAL BEHAVIOR :
EXPECTED -
The application should have java.library.path such that is compatible for loading Windows system DLLs.
ACTUAL -
In JDK16 jpackage, the test program performs System.loadLibrary() for ""ole32"", ""user32"", ""advapi32"",""shell32"",""kernel32"": 
   System.getProperty(""java.library.path"") => ... long list including ""C:\Program Files\APPNAME;C:\WINDOWS\system32;""
In JDK17 EA - the result is:
java.lang.UnsatisfiedLinkError: no ole32 in java.library.path: C:\Program Files\Duncan Panama\app;C:\Program Files\Duncan Panama


---------- BEGIN SOURCE ----------
package duncan.panama.screensaver;

import java.util.Arrays;

/**
 * Test issues with command line launch after using jpackage.
 * <p>Build a launcher for this class as test.exe and copy to test.scr
 */
public class Test
{
    public static void main(String[] args)
    {
        System.out.println(""Application args: ""+Arrays.toString(args));

        try {
            String[] props = new String[]{""jpackage.app-path"", ""java.library.path""};
            for (String prop : props) {
                System.out.println(""System.getProperty(\""""+prop+""\"") => ""+System.getProperty(prop));
            }

            String[] libs = new String[]{""ole32"", ""user32"", ""advapi32"",""shell32"",""kernel32""};
            for (String lib : libs) {
                System.out.println(""System.loadLibrary(\""""+lib+""\"")"");
                System.loadLibrary(lib);
            }
        } catch(Throwable t) {
            System.err.println(""*** System load library FAILED *** ""+ t.toString());
            t.printStackTrace();
        }
    }
}

---------- END SOURCE ----------

CUSTOMER SUBMITTED WORKAROUND :
jpackage can be run with additional --java-options settings: ""-Djava.library.path=c:\\Windows\\System32;C:\Program Files\APPNAME\appC:\Program Files\APPNAME"" but this hardcodes the developers Windows PC %SYSTEMROOT% and anticipated installation directory into the installer EXE - these values may match the  target Windows PC.


FREQUENCY : always


",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8263157,JDK-8272328,JDK-8271155,,,,,,"2021-05-24 01:34;adev;Main.java;https://bugs.openjdk.org/secure/attachment/94752/Main.java",,,,,,,,,,,generic,,,,,,b18,17,,generic,,,,,"0|i2sy03:",9223372036854775807,b26,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@3656b41f,,,,,,,Verified,,"2021-05-24 01:16;adev;I used the following command to reproduce the issue:
jpackage --verbose --win-console --input i --dest o --name Main --main-jar Main.jar --main-class Main

The issue is reproducible with JDK 17:
Application args: []
System.getProperty(""jpackage.app-path"") => C:\Program Files\Main\Main.exe
System.getProperty(""java.library.path"") => C:\Program Files\Main\app;C:\Program Files\Main
System.loadLibrary(""ole32"")
*** System load library FAILED *** java.lang.UnsatisfiedLinkError: no ole32 in java.library.path: C:\Program Files\Main\app;C:\Program Files\Main
java.lang.UnsatisfiedLinkError: no ole32 in java.library.path: C:\Program Files\Main\app;C:\Program Files\Main
        at java.base/java.lang.ClassLoader.loadLibrary(Unknown Source)
        at java.base/java.lang.Runtime.loadLibrary0(Unknown Source)
        at java.base/java.lang.System.loadLibrary(Unknown Source)
        at Main.main(Main.java:17);;;","2021-05-24 01:31;adev;After going through different builds, following is my observation:
JDK 17 b10: Pass
JDK 17 b15: Pass
JDK 17 b17: Pass
JDK 17 b18: Fail
JDK 17 b19: Fail
JDK 17 b20: Fail
JDK 17 b21: Fail
JDK 17 b22: Fail
JDK 17 b23: Fail

This is a regression issue.;;;","2021-05-24 05:34;adev;Additional information from the submitter
=================================
jpackage provides macros / variables $APPDIR and $BINDIR so the workaround does not need to hardcode the target installation directory. Therefore where I said workaround is to add:
    --java-options ""-Djava.library.path=c:\\Windows\\System32;C:\Program Files\APPNAME\appC:\Program Files\APPNAME
it can be become (assuming developer needs APPDIR  / BINDIR is the packaged application library path):
   -java-options ""-Djava.library.path=c:\\Windows\\System32;$APPDIR;$BINDIR"" 
However there isn't an easy way to substitute the value of %SYSTEMROOT%\\System32 for the target Windows PC.
;;;","2021-05-25 07:00;herrick;Appears to be a regression caused by fix to JDK-8263157
after that fix ""-Djava.library.path=..."" is added to application launcher, with the intention of adding the bundles ""bin"" dir and ""app"" dir to the path, but change also results in removing the default java.library.path setting(s);;;","2021-05-25 07:30;herrick;The default value of java.library.path (Which is what was used before the  fix to JDK-8263157) is platform dependent and based on existing environment variables at runtime:
    On Windows, it is based on PATH env variable
    On Linux, it is based on  LD_LIBRARY_PATH env variable
    On OS X, it based on DYLD_LIBRARY_PATH env variable.
so unless there is another way to set additional paths without clearing the default ones we may need to read the platform dependent env variables and add that value to the -Djava.library.path setting the native launcher uses when launching jni.

;;;","2021-06-03 10:19;herrick;We add APPDIR to the env variable (PATH, LD_LIBRARY_PATH, or DYLD_LIBRARY_PATH depending on platform) instead of setting -Djava.library.path.
review: https://github.com/openjdk/jdk/pull/4203;;;","2021-06-03 12:03;roboduke;Changeset: af3df630
Author:    Andy Herrick <herrick@openjdk.org>
Date:      2021-06-03 19:02:11 +0000
URL:       https://git.openjdk.java.net/jdk/commit/af3df6300efddc8ba12f095b87205cc2fea1f1e8
;;;","2021-06-07 02:57;adev;Requested the submitter to check if the fix solves the problem. The latest JDK 17 can be dowloaded from https://jdk.java.net/17/;;;","2021-06-21 08:22;adev;The submitter confirmed that the issue is fixed.;;;",,,,,,,,,,,,,,,,,,,,,,,,,
[lworld] Withdraw all support for bifurcated class generation for primitive classes,JDK-8267597,5050240,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,sadayapalam,sadayapalam,sadayapalam,2021-05-24 01:13,2021-06-10 05:03,2023-10-01 09:57,2021-06-10 05:03,repo-valhalla,,,,,,,repo-valhalla,tools,,0,lworld,,,,,,,,,,,,,"https://bugs.openjdk.java.net/browse/JDK-8265423 added support for generating a unified class for a primitive class declaration.

https://bugs.openjdk.java.net/browse/JDK-8266466 adds support for consuming such classes in javac

Once the backend pieces complete upgrade to the new model, we should rip out all support for the dual class generation scheme. 

This ticket is to cover that requirement",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8265423,JDK-8266466,,,,,,,,,,,,,,,,,,generic,,,,,,,,,generic,,,,,"0|i2sy43:",9223372036854775807,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4dca67bd,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
The java.security.krb5.realm system property only needs to be defined once,JDK-8267584,5050226,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,weijun,weijun,weijun,2021-05-23 13:38,2021-06-07 15:09,2023-10-01 09:57,2021-05-24 09:02,,,,,,,,17,security-libs,,0,noreg-doc,,,,,,,,,,,,,There are 3 {@systemProperty java.security.krb5.realm} in src/java.security.jgss/share/classes/javax/security/auth/kerberos/KerberosPrincipal.java and src/java.security.jgss/share/classes/javax/security/auth/kerberos/package-info.java. There should only be one. See https://mail.openjdk.java.net/pipermail/core-libs-dev/2018-November/056653.html.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2sy0z:",9223372036854775807,b24,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@7a7b7e03,,,,,,,,,"2021-05-24 09:02;roboduke;Changeset: 838a0071
Author:    Weijun Wang <weijun@openjdk.org>
Date:      2021-05-24 15:45:01 +0000
URL:       https://git.openjdk.java.net/jdk/commit/838a0071030e9c8b9ab57df39a4e0384d433a2bc
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
jmod fails on symlink to class file,JDK-8267583,5050225,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,sundar,dnsimon,dnsimon,2021-05-23 13:37,2021-06-07 15:13,2023-10-01 09:57,2021-05-26 04:06,11,17,,,,,,17,tools,,0,,,,,,,,,,,,,,"When the class files on the --class-path supplied to jmod are all symlinks, the package validation step fails. This is similar to JDK-8166286 except it applies to files, not directories. Applying the attached patch fixes the problem.

",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8166286,JDK-8268216,,,,,,,"2021-05-23 13:39;dnsimon;JDK-8267583.patch;https://bugs.openjdk.org/secure/attachment/94742/JDK-8267583.patch",,,,,,,,,,,,,,,,,,,,,,,,,"0|i2sy0r:",9223372036854775807,b24,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@3da653bd,,,,,,,,,"2021-05-25 08:12;sundar;I tried to reproduce the issue mentioned.  I compiled a simple module code (example from https://openjdk.java.net/projects/jigsaw/quick-start). And the moved .class files out of ""mods"" directory and created symlinks. With that setup I tried to run mod with

$ jmod  create --class-path mods/com.greetings/ com.greetings.jmod

jmod command finished fine. I viewed file in com.greetings.jmod using jar -xvf command. And I can see .class files in the right place.

Can you add a test case or add steps to reproduce?;;;","2021-05-25 08:48;dnsimon;Package validation is only applied to packages exported or opened by the module descriptor. If you modify module-info.java to be:

module com.greetings {
    exports com.greetings;
}

and repeat your experiment, you should see an error such as:

Error: Packages that are exported or open in com.greetings are not present: [com.greetings];;;","2021-05-25 20:10;sundar;Thanks [~dnsimon] With that change, I can reproduce the issue.;;;","2021-05-26 04:06;roboduke;Changeset: bf8d4a8e
Author:    Athijegannathan Sundararajan <sundar@openjdk.org>
Date:      2021-05-26 11:04:59 +0000
URL:       https://git.openjdk.java.net/jdk/commit/bf8d4a8ecab216e7d117ce045d4498d1fa1a6029
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Thread::cooked_allocated_bytes() hits assert(left >= right) failed: avoid underflow,JDK-8267579,5050215,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,mgronlun,jiefu,jiefu,2021-05-23 04:50,2021-06-21 12:29,2023-10-01 09:57,2021-06-14 03:41,17,18,,,,,,18,hotspot,,0,hgupdate-sync,intermittent,test-bigapps-Renaissance,tier2,tier3,tier6,tier8,,,,,,,"The following is copied from JDK-8267213, which is commented by [~dcubed].
https://bugs.openjdk.java.net/browse/JDK-8267213?focusedCommentId=14422585&page=com.atlassian.jira.plugin.system.issuetabpanels:comment-tabpanel#comment-14422585

Here's the crashing stack trace for the jdk-17+24-2082-tier8 sighting in RenaissanceStressTest24H.java:

--------------- T H R E A D ---------------

Current thread (0x00007fb3243acef0): JavaThread ""JFR Periodic Tasks"" daemon [_thread_in_vm, id=25087, stack(0x00007fb209adb000,0x00007fb209bdc000)] _threads_hazard_ptr=0x00007fb29c039ac0, _nested_threads_hazard_ptr_cnt=0

Stack: [0x00007fb209adb000,0x00007fb209bdc000], sp=0x00007fb209bda270, free space=1020k
Native frames: (J=compiled Java code, j=interpreted, Vv=VM code, C=native code)
V [libjvm.so+0xf132a2] JfrPeriodicEventSet::requestThreadAllocationStatistics()+0xaa2
V [libjvm.so+0xeec29d] jfr_emit_event+0x8ad
J 3392 jdk.jfr.internal.JVM.emitEvent(JJJ)Z jdk.jfr@17-ea (0 bytes) @ 0x00007fb3d1057e3d [0x00007fb3d1057d60+0x00000000000000dd]
J 3352 c1 jdk.jfr.internal.RequestEngine$RequestHook.execute()V jdk.jfr@17-ea (139 bytes) @ 0x00007fb3c9e32f34 [0x00007fb3c9e32c00+0x0000000000000334]
j jdk.jfr.internal.RequestEngine.doChunk(Ljava/util/function/Predicate;)V+51 jdk.jfr@17-ea
j jdk.jfr.internal.RequestEngine.doChunkEnd()V+5 jdk.jfr@17-ea
j jdk.jfr.internal.PlatformRecorder.rotateDisk()V+13 jdk.jfr@17-ea
j jdk.jfr.internal.PlatformRecorder.periodicTask()V+24 jdk.jfr@17-ea
j jdk.jfr.internal.PlatformRecorder.lambda$startDiskMonitor$1()V+1 jdk.jfr@17-ea
j jdk.jfr.internal.PlatformRecorder$$Lambda$180+0x0000000801141698.run()V+4 jdk.jfr@17-ea
j java.lang.Thread.run()V+11 java.base@17-ea
v ~StubRoutines::call_stub
V [libjvm.so+0xe702f4] JavaCalls::call_helper(JavaValue*, methodHandle const&, JavaCallArguments*, JavaThread*)+0x504
V [libjvm.so+0xe70ba4] JavaCalls::call_virtual(JavaValue*, Klass*, Symbol*, Symbol*, JavaCallArguments*, JavaThread*)+0x4b4
V [libjvm.so+0xe70ff7] JavaCalls::call_virtual(JavaValue*, Handle, Klass*, Symbol*, Symbol*, JavaThread*)+0x77
V [libjvm.so+0xfe6d2b] thread_entry(JavaThread*, JavaThread*)+0x12b
V [libjvm.so+0x189eaf1] JavaThread::thread_main_inner()+0x271
V [libjvm.so+0x18a66b0] Thread::call_run()+0x100
V [libjvm.so+0x15732de] thread_native_entry(Thread*)+0x10e

Java frames: (J=compiled Java code, j=interpreted, Vv=VM code)
J 3392 jdk.jfr.internal.JVM.emitEvent(JJJ)Z jdk.jfr@17-ea (0 bytes) @ 0x00007fb3d1057dc4 [0x00007fb3d1057d60+0x0000000000000064]
J 3352 c1 jdk.jfr.internal.RequestEngine$RequestHook.execute()V jdk.jfr@17-ea (139 bytes) @ 0x00007fb3c9e32f34 [0x00007fb3c9e32c00+0x0000000000000334]
j jdk.jfr.internal.RequestEngine.doChunk(Ljava/util/function/Predicate;)V+51 jdk.jfr@17-ea
j jdk.jfr.internal.RequestEngine.doChunkEnd()V+5 jdk.jfr@17-ea
j jdk.jfr.internal.PlatformRecorder.rotateDisk()V+13 jdk.jfr@17-ea
j jdk.jfr.internal.PlatformRecorder.periodicTask()V+24 jdk.jfr@17-ea
j jdk.jfr.internal.PlatformRecorder.lambda$startDiskMonitor$1()V+1 jdk.jfr@17-ea
j jdk.jfr.internal.PlatformRecorder$$Lambda$180+0x0000000801141698.run()V+4 jdk.jfr@17-ea
j java.lang.Thread.run()V+11 java.base@17-ea
v ~StubRoutines::call_stub",,,,,,,,,,,JDK-8268677,,,,,,,,,,,,,,,,,,,,,,JDK-8268334,JDK-8260046,,,JDK-8269001,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2sxyj:",9223372036854775807,b02,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@42995637,,,,,,,,,"2021-05-24 02:58;mgronlun;The invocation of pointer_delta is through ThreadLocalAllocBuffer::used_bytes():

jvm!pointer_delta [d:\dev\github\jdk\open\src\hotspot\share\utilities\globalDefinitions.hpp @ 418] 
jvm!ThreadLocalAllocBuffer::used_bytes+0x38 [d:\dev\github\jdk\open\src\hotspot\share\gc\shared\threadLocalAllocBuffer.hpp @ 129] 
jvm!Thread::cooked_allocated_bytes+0x3e [d:\dev\github\jdk\open\src\hotspot\share\runtime\thread.inline.hpp @ 42] 
jvm!JfrPeriodicEventSet::requestThreadAllocationStatistics+0xd3 [d:\dev\github\jdk\open\src\hotspot\share\jfr\periodic\jfrPeriodic.cpp @ 431] 
jvm!JfrPeriodicEventSet::requestEvent+0x10b [d:\dev\github\jdk\build\windows-x86_64-server-slowdebug\hotspot\variant-server\gensrc\jfrfiles\jfrPeriodic.hpp @ 98] 
jvm!jfr_emit_event+0x65 [d:\dev\github\jdk\open\src\hotspot\share\jfr\jni\jfrJniMethod.cpp @ 242] 
[Java Code]
...

;;;","2021-05-24 03:38;stefank;The cooked_allocated_bytes were added by the Runtime team with JDK-7003271. It is not clear how the JFR code and cooked_allocated_bytes synchronizes the accesses to the TLABs, with the code that updates the TLAB?;;;","2021-05-26 05:17;stefank;FWIW, the problematic cooked_allocated_bytes functions are used by more than JFR, so it is not obvious that this should belong to the jfr sub-component.;;;","2021-06-01 22:05;dholmes;FWIW I see the same assertion failing in a completely different context in a tier 6 personal job:

Test: gc/stress/jfr/TestStressBigAllocationGCEventsWithParallel.java

#
# A fatal error has been detected by the Java Runtime Environment:
#
#  Internal Error (/opt/mach5/mesos/work_dir/slaves/3c846bae-ce30-4a97-93ee-9fef4497ccb6-S79132/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/7f48f342-d7da-4234-a78a-548d0a1371c4/runs/7a4f980a-d96c-49aa-b54f-f5ca83ae7018/workspace/open/src/hotspot/share/utilities/globalDefinitions.hpp:424), pid=2983, tid=2998
#  assert(left >= right) failed: avoid underflow - left: 0x00000000fe200000 right: 0x00000000fe280000
#
# JRE version: Java(TM) SE Runtime Environment (17.0) (fastdebug build 17-internal+0-LTS-2021-06-01-0606360.david.holmes.jdk-dev4.git)
# Java VM: Java HotSpot(TM) 64-Bit Server VM (fastdebug 17-internal+0-LTS-2021-06-01-0606360.david.holmes.jdk-dev4.git, mixed mode, sharing, tiered, compressed oops, compressed class ptrs, parallel gc, linux-amd64)
# Problematic frame:
# V  [libjvm.so+0x1748442]  MutableSpaceUsedHelper::take_sample()+0x72
#
# Core dump will be written. Default location: Core dumps may be processed with ""/opt/core.sh %p"" (or dumping to /opt/mach5/mesos/work_dir/slaves/3c846bae-ce30-4a97-93ee-9fef4497ccb6-S78974/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/a1672af1-ff52-493c-b742-6917ddbb5fc7/runs/8a51b92b-fabb-4bc4-8b80-a450e841d099/testoutput/test-support/jtreg_open_test_hotspot_jtreg_hotspot_gc/scratch/3/core.2983)
#
# JFR recording file will be written. Location: /opt/mach5/mesos/work_dir/slaves/3c846bae-ce30-4a97-93ee-9fef4497ccb6-S78974/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/a1672af1-ff52-493c-b742-6917ddbb5fc7/runs/8a51b92b-fabb-4bc4-8b80-a450e841d099/testoutput/test-support/jtreg_open_test_hotspot_jtreg_hotspot_gc/scratch/3/hs_err_pid2983.jfr
#
# If you would like to submit a bug report, please visit:
#   https://bugreport.java.com/bugreport/crash.jsp
#

---------------  T H R E A D  ---------------

Current thread (0x00007fbb881b4160):  WatcherThread [stack: 0x00007fbb4bcfe000,0x00007fbb4bdfe000] [id=2998]

Stack: [0x00007fbb4bcfe000,0x00007fbb4bdfe000],  sp=0x00007fbb4bdfcd60,  free space=1019k
Native frames: (J=compiled Java code, j=interpreted, Vv=VM code, C=native code)
V  [libjvm.so+0x1748442]  MutableSpaceUsedHelper::take_sample()+0x72
V  [libjvm.so+0x15e842f]  PerfLongVariant::sample()+0x1f
V  [libjvm.so+0x1764c82]  StatSampler::sample_data(PerfDataList*)+0x32
V  [libjvm.so+0x185329d]  PeriodicTask::real_time_tick(int)+0x8d
V  [libjvm.so+0x1512fef]  WatcherThread::run()+0x10f
V  [libjvm.so+0x18ab600]  Thread::call_run()+0x100
V  [libjvm.so+0x157720e]  thread_native_entry(Thread*)+0x10e
;;;","2021-06-03 12:12;dcubed;Here's the crashing thread's stack from the jdk-17+26-2287-tier2 sighting:

 gc/stress/jfr/TestStressBigAllocationGCEventsWithParallel.java 

---------------  T H R E A D  ---------------

Current thread (0x00000285b480c5d0):  WatcherThread [stack: 0x000000ee46300000,0x000000ee46400000] [id=2300]

Stack: [0x000000ee46300000,0x000000ee46400000]
Native frames: (J=compiled Java code, j=interpreted, Vv=VM code, C=native code)
V  [jvm.dll+0xad9f21]  os::platform_print_native_stack+0xf1  (os_windows_x86.cpp:235)
V  [jvm.dll+0xd01bb5]  VMError::report+0x1005  (vmError.cpp:739)
V  [jvm.dll+0xd0353e]  VMError::report_and_die+0x7fe  (vmError.cpp:1549)
V  [jvm.dll+0xd03c74]  VMError::report_and_die+0x64  (vmError.cpp:1330)
V  [jvm.dll+0x4c4797]  report_vm_error+0xb7  (debug.cpp:282)
V  [jvm.dll+0xa8998a]  MutableSpace::used_in_words+0x4a  (mutableSpace.hpp:135)
V  [jvm.dll+0xbb6d0b]  MutableSpaceUsedHelper::take_sample+0x1b  (spaceCounters.hpp:81)
V  [jvm.dll+0xb113de]  PerfLongVariant::sample+0x1e  (perfData.cpp:215)
V  [jvm.dll+0xbc5e90]  StatSampler::sample_data+0x90  (statSampler.cpp:140)
V  [jvm.dll+0xc4f19e]  PeriodicTask::real_time_tick+0xfe  (task.cpp:45)
V  [jvm.dll+0xaa94cc]  WatcherThread::run+0x27c  (nonJavaThread.cpp:284)
V  [jvm.dll+0xc84a84]  Thread::call_run+0x1b4  (thread.cpp:399)
V  [jvm.dll+0xad881e]  thread_native_entry+0xae  (os_windows.cpp:549)
C  [ucrtbase.dll+0x1fb80]
C  [KERNEL32.DLL+0x84d4]
C  [ntdll.dll+0x51781];;;","2021-06-03 12:13;dcubed;Since this failure mode has shown up in Tier2,
I'm bumping the priority from P4 -> P3.;;;","2021-06-03 13:32;dcubed;Here's the crashing thread stack for the jdk-17+25-2208-tier8 sighting:

applications/kitchensink/Kitchensink24HStress.java

---------------  T H R E A D  ---------------

Current thread (0x00007fbff81e73c0):  JavaThread ""JFR Periodic Tasks"" daemon [_thread_in_vm, id=3826, stack(0x00007fbed59d5000,0x00007fbed5ad6000)] _threads_hazard_ptr=0x00007fc026370840, _nested_threads_hazard_ptr_cnt=0

Stack: [0x00007fbed59d5000,0x00007fbed5ad6000],  sp=0x00007fbed5ad43e0,  free space=1020k
Native frames: (J=compiled Java code, j=interpreted, Vv=VM code, C=native code)
V  [libjvm.so+0xf139d5]  JfrPeriodicEventSet::requestThreadAllocationStatistics()+0xaa5
V  [libjvm.so+0xeed8ad]  jfr_emit_event+0x83d
J 10566  jdk.jfr.internal.JVM.emitEvent(JJJ)Z jdk.jfr@17-ea (0 bytes) @ 0x00007fc09dadf83d [0x00007fc09dadf760+0x00000000000000dd]
J 723629 c2 jdk.jfr.internal.RequestEngine.doChunk(Ljava/util/function/Predicate;)V jdk.jfr@17-ea (58 bytes) @ 0x00007fc09fd630f4 [0x00007fc09fd63020+0x00000000000000d4]
j  jdk.jfr.internal.RequestEngine.doChunkBegin()V+5 jdk.jfr@17-ea
j  jdk.jfr.internal.PlatformRecorder.rotateDisk()V+58 jdk.jfr@17-ea
J 70137% c2 jdk.jfr.internal.PlatformRecorder.periodicTask()V jdk.jfr@17-ea (67 bytes) @ 0x00007fc09fe9c360 [0x00007fc09fe9bc60+0x0000000000000700]
j  jdk.jfr.internal.PlatformRecorder.lambda$startDiskMonitor$1()V+1 jdk.jfr@17-ea
j  jdk.jfr.internal.PlatformRecorder$$Lambda$203+0x0000000801151570.run()V+4 jdk.jfr@17-ea
j  java.lang.Thread.run()V+11 java.base@17-ea
v  ~StubRoutines::call_stub
V  [libjvm.so+0xe71df4]  JavaCalls::call_helper(JavaValue*, methodHandle const&, JavaCallArguments*, JavaThread*)+0x504
V  [libjvm.so+0xe726a4]  JavaCalls::call_virtual(JavaValue*, Klass*, Symbol*, Symbol*, JavaCallArguments*, JavaThread*)+0x4b4
V  [libjvm.so+0xe72af7]  JavaCalls::call_virtual(JavaValue*, Handle, Klass*, Symbol*, Symbol*, JavaThread*)+0x77
V  [libjvm.so+0xfe724b]  thread_entry(JavaThread*, JavaThread*)+0x12b
V  [libjvm.so+0x18a3a11]  JavaThread::thread_main_inner()+0x271
V  [libjvm.so+0x18ab610]  Thread::call_run()+0x100
V  [libjvm.so+0x157721e]  thread_native_entry(Thread*)+0x10e

Java frames: (J=compiled Java code, j=interpreted, Vv=VM code)
J 10566  jdk.jfr.internal.JVM.emitEvent(JJJ)Z jdk.jfr@17-ea (0 bytes) @ 0x00007fc09dadf7c4 [0x00007fc09dadf760+0x0000000000000064]
J 723629 c2 jdk.jfr.internal.RequestEngine.doChunk(Ljava/util/function/Predicate;)V jdk.jfr@17-ea (58 bytes) @ 0x00007fc09fd630f4 [0x00007fc09fd63020+0x00000000000000d4]
j  jdk.jfr.internal.RequestEngine.doChunkBegin()V+5 jdk.jfr@17-ea
j  jdk.jfr.internal.PlatformRecorder.rotateDisk()V+58 jdk.jfr@17-ea
J 70137% c2 jdk.jfr.internal.PlatformRecorder.periodicTask()V jdk.jfr@17-ea (67 bytes) @ 0x00007fc09fe9c360 [0x00007fc09fe9bc60+0x0000000000000700]
j  jdk.jfr.internal.PlatformRecorder.lambda$startDiskMonitor$1()V+1 jdk.jfr@17-ea
j  jdk.jfr.internal.PlatformRecorder$$Lambda$203+0x0000000801151570.run()V+4 jdk.jfr@17-ea
j  java.lang.Thread.run()V+11 java.base@17-ea
v  ~StubRoutines::call_stub;;;","2021-06-04 00:01;stefank;[~dcubed] [~dholmes] Could we split out the  MutableSpaceUsedHelper failure into a separate bug?;;;","2021-06-04 06:43;mgronlun;JDK-8268265 created for transferral of MutableSpaceUsedHelper::take_sample() failures.;;;","2021-06-06 21:17;dholmes;Not at all clear to me that we don't just have one problem - that being an invalid assertion in pointer-delta.;;;","2021-06-06 23:44;stefank;[~dholmes] It is not an invalid assert. The assert has uncovered that some runtime/serviceability features are reading the TLAB / Space data structures racingly.  cooked_allocated_bytes reads the TLAB pointers of another thread, while the thread is executing (and updating the TLAB). MutableSpaceUsedHelper reads the top pointer of the MutableSpace, while the some other thread is allocating.

 Also see this comment in MutableSpace:
    // Read top before end, else the range check may pass when it shouldn't.
    // If end is read first, other threads may advance end and top such that
    // current top > old end and current top + size > current end.  Then
    // pointer_delta underflows, allowing installation of top > current end.
    HeapWord* obj = Atomic::load_acquire(top_addr());
    if (pointer_delta(end(), obj) >= size) {;;;","2021-06-07 00:39;dholmes;[~stefank] thanks for clarifying.;;;","2021-06-14 03:41;roboduke;Changeset: c4207355
Author:    Markus Grönlund <mgronlun@openjdk.org>
Date:      2021-06-14 10:41:00 +0000
URL:       https://git.openjdk.java.net/jdk/commit/c4207355d3fc19687c72f47edf21611ffed7efaf
;;;","2021-06-14 08:58;roboduke;Changeset: b3185354
Author:    Markus Grönlund <mgronlun@openjdk.org>
Date:      2021-06-14 13:11:33 +0000
URL:       https://git.openjdk.java.net/jdk/commit/b318535452bc0dbc7f8a111a71bb0881833495e1
;;;",,,,,,,,,,,,,,,,,,,,
Add new documentation group in HtmlStyle,JDK-8267575,5050203,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,jjg,jjg,jjg,2021-05-22 09:27,2021-06-07 15:12,2023-10-01 09:57,2021-05-25 07:55,17,,,,,,,17,tools,,0,noreg-doc,,,,,,,,,,,,,"There are still a lot of ""uncategorized""/uncommented items in HtmlStyle.

The following are candidates for a new documentation group, for documentation that is added by the doclet to the description given in the doc comment.

deprecatedLabel deprecatedBlock deprecationComment
permitsNote
previewBlock previewComment previewLabel
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2sxvv:",9223372036854775807,b24,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@7900061a,,,,,,,,,"2021-05-25 07:55;roboduke;Changeset: cc687fd4
Author:    Jonathan Gibbons <jjg@openjdk.org>
Date:      2021-05-25 14:54:27 +0000
URL:       https://git.openjdk.java.net/jdk/commit/cc687fd43ade6be8760c559f3ffa909c5937727c
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Dead code in HtmlStyle/HtmlDocletWriter,JDK-8267574,5050201,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,jjg,jjg,jjg,2021-05-22 08:33,2021-06-07 15:12,2023-10-01 09:57,2021-05-25 10:37,17,,,,,,,17,tools,,0,noreg-cleanup,,,,,,,,,,,,,"HtmlStyle.interfaceName is only used in HtmlDocletWriter.interfaceName(...) which is unused.

They can be deleted, along with entries in the stylesheet.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2sxvf:",9223372036854775807,b24,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@7900061a,,,,,,,,,"2021-05-25 10:37;roboduke;Changeset: 594d4544
Author:    Jonathan Gibbons <jjg@openjdk.org>
Date:      2021-05-25 17:36:50 +0000
URL:       https://git.openjdk.java.net/jdk/commit/594d4544759a240690ed4c0432c8140b852aea5a
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
java.io.File.equals contains misleading Javadoc,JDK-8267569,5050121,Bug,Closed,JDK,JDK,software,duke,,,P4,Fixed,bpb,webbuggrp,webbuggrp,2021-05-21 01:06,2021-06-21 01:09,2023-10-01 09:57,2021-06-02 09:34,8,,,,,,,17,core-libs,,0,additional-information-received,dcsaw,noreg-doc,reproducer-other,webbug,,,,,,,,,"ADDITIONAL SYSTEM INFORMATION :
Any, OS independent code is responsible for the choice of lexical comparison.

A DESCRIPTION OF THE PROBLEM :
The javaDoc says:

(...)Returns true if and only if the argument is not null and is an abstract pathname that denotes the same file or directory as this abstract pathname. (...)

The correct sentence is:

(...)Returns true if and only if the argument is not null and is an abstract pathname is the same as this abstract pathname. (...) 

Notice, I removed the ""the same file"" as a current implementation (I did inspect source since 1.7 up to 
https://github.com/openjdk/jdk/blob/master/src/java.base/share/classes/java/io/File.java ) is using lexical comparison and is not taking in an account ..\ and .\ up/current folder path elements. 

See also 4143695 and 4787260.

I'm well aware that changing this behavior is very problematic (touching ""cast in stone implementation"" can break things), but clarifying a JavaDoc can be done without any harm to existing projects.

I have no problem with the fact that paths are compared lexically instead of logically, since:

  a.getCanonicalFile().equals(b.getCanonicalFile()) is a doable work-around, IF one knows that is SHOULD be done. Current javadoc comment is missleading.

STEPS TO FOLLOW TO REPRODUCE THE PROBLEM :
Read document, check the source or use examples provided in 4787260

Reader expects that regardless of how below file is specified:

current working dir:  d:\w\x\y
 d:\w\x\y\z.txt
 d:\w\x\y\x\a\c\..\..\..\z.tx
.\z.txt
z.txt

is actually seen as the same file even tough paths are lexically very, very different, and File.equals() will return true across all those cases.

EXPECTED VERSUS ACTUAL BEHAVIOR :
EXPECTED -
Javadoc should describe what the File.equals() really do.

Reader should expect that all paths in above example are different and File.equals() returns false.
ACTUAL -
Javadoc reader is confused. User thinks that it is a bug, but 4143695 was given ""Won't fix"" ages ago! Why this is STILL in javadoc?

---------- BEGIN SOURCE ----------
see 4787260
---------- END SOURCE ----------

CUSTOMER SUBMITTED WORKAROUND :
Inspect java.io.File.equals source code to figure out what is really done. Be afraid of it, becase if code does something else that specs are saying You never know if in future code will not be fixed to be compilant with the specs. Include unit tests in Your test suites to fire up the ""yellow flag"" if change in implementation is detected. Avoid using File.equals() whenever possible because an eventual fix may break Your code.

FREQUENCY : always


",,,,,,,,,,,,,,,,,,,,,,,,JDK-8267889,,,,,,,,,,,,,JDK-4787260,JDK-4143695,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2sxdn:",9223372036854775807,b26,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@5f132e58,,,,,,,Verified,,"2021-05-22 04:06;tongwan;The source code can be found at:
https://github.com/openjdk/jdk/blob/master/src/java.base/share/classes/java/io/File.java#L2219;;;","2021-06-02 09:34;roboduke;Changeset: 56b65e4a
Author:    Brian Burkhalter <bpb@openjdk.org>
Date:      2021-06-02 16:33:21 +0000
URL:       https://git.openjdk.java.net/jdk/commit/56b65e4a8d519801d170e16063ccb7dd3069c4be
;;;","2021-06-18 04:11;tongwan;Requested the submitter review the fix, https://github.com/openjdk/jdk/commit/56b65e4a8d519801d170e16063ccb7dd3069c4be;;;","2021-06-21 01:09;tongwan;From the submitter:
Now it is clear.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
JDK-8252971 causes SPECjbb2015 socket exceptions on Windows when MKS is installed,JDK-8267564,5050183,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,michaelm,resii,resii,2021-05-21 15:19,2021-06-10 17:58,2023-10-01 09:57,2021-06-08 01:00,16.0.1,17,,,,,,17,core-libs,,0,aurora-perf-measure,noreg-hard,,,,,,,,,,,,"Starting with 16.0.1-b7, 16.0.2-b1, and 17-b10....
SPECjbb2015 is failing with a long repetitive list of doselect exceptions. Eg:

<Fri May 21 16:55:51 GMT 2021> org.glassfish.grizzly.nio.SelectorRunner: doSelect exception
java.io.IOException: An exception occurred during the execution of select(): 
java.io.IOException: An operation was attempted on something that is not a socket

	at java.base/sun.nio.ch.WindowsSelectorImpl$FinishLock.checkForException(WindowsSelectorImpl.java:328)
	at java.base/sun.nio.ch.WindowsSelectorImpl.doSelect(WindowsSelectorImpl.java:189)
	at java.base/sun.nio.ch.SelectorImpl.lockAndDoSelect(SelectorImpl.java:129)
	at java.base/sun.nio.ch.SelectorImpl.select(SelectorImpl.java:141)
	at org.glassfish.grizzly.nio.DefaultSelectorHandler.select(DefaultSelectorHandler.java:112)
	at org.glassfish.grizzly.nio.SelectorRunner.doSelect(SelectorRunner.java:338)
	at org.glassfish.grizzly.nio.SelectorRunner.run(SelectorRunner.java:278)
	at org.glassfish.grizzly.threadpool.AbstractThreadPool$Worker.doWork(AbstractThreadPool.java:565)
	at org.glassfish.grizzly.threadpool.AbstractThreadPool$Worker.run(AbstractThreadPool.java:545)
	at java.base/java.lang.Thread.run(Thread.java:831)
<Fri May 21 16:55:51 GMT 2021> org.glassfish.grizzly.nio.SelectorRunner: doSelect exception
java.io.IOException: An exception occurred during the execution of select(): 
java.io.IOException: An operation was attempted on something that is not a socket

	at java.base/sun.nio.ch.WindowsSelectorImpl$FinishLock.checkForException(WindowsSelectorImpl.java:328)
	at java.base/sun.nio.ch.WindowsSelectorImpl.doSelect(WindowsSelectorImpl.java:189)
	at java.base/sun.nio.ch.SelectorImpl.lockAndDoSelect(SelectorImpl.java:129)
	at java.base/sun.nio.ch.SelectorImpl.select(SelectorImpl.java:141)
	at org.glassfish.grizzly.nio.DefaultSelectorHandler.select(DefaultSelectorHandler.java:112)
	at org.glassfish.grizzly.nio.SelectorRunner.doSelect(SelectorRunner.java:338)
	at org.glassfish.grizzly.nio.SelectorRunner.run(SelectorRunner.java:278)
	at org.glassfish.grizzly.threadpool.AbstractThreadPool$Worker.doWork(AbstractThreadPool.java:565)
	at org.glassfish.grizzly.threadpool.AbstractThreadPool$Worker.run(AbstractThreadPool.java:545)
	at java.base/java.lang.Thread.run(Thread.java:831)
<Fri May 21 16:55:51 GMT 2021> org.glassfish.grizzly.nio.SelectorRunner: doSelect exception

This had been tracked back to show that the doselect exceptions begin in: 16.0.1-b7, 16.0.2-b1, and 17-b10.   The bug fix for JDK-8252971 seems to be the cause... it was integrated into each of those builds. We've also ran a build which was pre-integration of JDK-8252971, and a build the integrated JDK-8252971. The prior succeeds, and the latter fails, as expected.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,x86_64,,,,,,b07,17,,windows,,,,,"0|i2sxrf:",9223372036854775807,b26,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@674604a9,,,,,,,,,"2021-05-24 02:39;michaelm;More likely to be a JEP-380 issue directly, since JDK-8252971 simply enabled that functionality more widely on Windows.;;;","2021-05-25 14:57;resii;Just realized I only specified ""Windows"", and perhaps there's a difference between the versions. So, just in case, this problem was encountered using:

Windows Server 2016 DataCenter;;;","2021-06-08 01:00;roboduke;Changeset: 61ab4b9d
Author:    Michael McMahon <michaelm@openjdk.org>
Date:      2021-06-08 07:58:54 +0000
URL:       https://git.openjdk.java.net/jdk/commit/61ab4b9d18e7c2eee6691f3ee00e5fecb866fdcd
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
G1: Missing BOT in Open Archive regions causes long pauses,JDK-8267562,5050180,Bug,Resolved,JDK,JDK,software,duke,,,P2,Fixed,jiangli,jiangli,jiangli,2021-05-21 14:55,2021-06-07 15:19,2023-10-01 09:57,2021-06-01 11:18,11,16,17,,,,,17,hotspot,,0,gc-g1,google-interest,shared-heap,,,,,,,,,,,"Performance regression was observed with a warmup process that does class loading and initialization with CDS enabled (archiving ~10,000 classes). Investigation found the effect was correlated to the runtime Java heap region size and was caused by increased GC overhead (particularly young-gen GC). The overhead was worse and more pronounced with enlarged region sizes. When associated with enlarged region size, the overhead was significant enough to reduce all measurable savings from archiving.

G1BlockOffsetTable divides the covered space (Java heap) into “N”-word subregions (“N” is from 2^”LogN”). It uses an _offset_array to tell how far back it must go to find the start of a block that contains the first word of a subregion. Every G1 region (is a G1ContiguousSpace) owns a G1BlockOffsetTablePart (associates to part of the _offset_array), which covers space of the current region.

For a pre-populated (with archive Java objects) open archive heap region, its G1BlockOffsetTablePart is never set up at runtime because there is no allocation done within the region. As a result, G1BlockOffsetTablePart::block_start(const void* addr) always does lookup from the start (bottom) of the region when called (for an open archive region) at runtime, regardless if the given 'addr' is near the bottom, top or in the middle of the region. The lookup becomes linear, instead of O(2^LogN). Large heap region size makes the situation worse and young-gen pauses longer.

The proposed fix is to populate G1BlockOffsetTableParts and associated G1BlockOffsetTable::_offset_array entries for 'open' archive regions at runtime. The fix makes the observed GC overhead go away completely. When running a standalone test that loads & initializes ~10,000 classes using 5G Java heap and 8M region size with CDS archive enabled, CPU cycles reported by 'perf stat' is down from 407,696,156,653 (before) to 116,174,811,999 (after), ~3.5x improvement (measured on a local linux machine on JDK 11).

Please see more details: https://github.com/jianglizhou/OpenJDK-docs/blob/main/Performance%20Impact%20caused%20by%20Large%20G1%20Region%20with%20Open%20Archive%20Heap%20objects.pdf.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2sxqr:",9223372036854775807,b25,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6b00f96c,,,,,,,,,"2021-05-21 15:22;jiangli;Proposed fix: https://github.com/openjdk/jdk/commit/ec3f5d1496ec6b9e434f00555204c2043129935f.;;;","2021-05-22 13:09;tschatzl;I'm sure there is some synergy between this code and the code in the g1 full collector, i.e. for code reuse, particularly for young regions that are not compacted. See JDK-8264987.

Thanks for noticing and fixing this.;;;","2021-05-24 21:38;jiangli;Indeed. Thanks for the pointer to JDK-8264987. The proposed change was a simple forward porting of my fix from JDK 11. Looking at JDK-8264987 fix, the proposed change can be refactored for better code reuse.

Some positive data points that I've observed (including the fix for the overhead described in this bug) in production environment showed G1 heap archiving provided measurable and consistent GC pause improvements during stable state as well as startup time. The old gen pause improvement was particularly noticeable. Young gen pause also showed some improvement (but less noticeable than old gen pause improvement).  The data was obtained from a use case with archived interned strings, cp resolved arrays, mirrors, and static reference type field values from ~150 pre-initialized JDK classes. The potential improvement can be much larger when heap archiving is fully utilized  (such as general pre-initialization, etc.).;;;","2021-06-01 11:18;roboduke;Changeset: b17b11eb
Author:    Jiangli Zhou <jiangli@openjdk.org>
Date:      2021-06-01 18:17:45 +0000
URL:       https://git.openjdk.java.net/jdk/commit/b17b11eb178d7aab84517771e5afc03b40095cd0
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Shenandoah: Reference processing not properly setup for outside of cycle degenerated GC,JDK-8267561,5050179,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,zgu,zgu,zgu,2021-05-21 14:30,2021-06-01 09:08,2023-10-01 09:57,2021-05-25 10:08,11,8-shenandoah,,,,,,11.0.12,hotspot,,0,gc-shenandoah,jdk11u-fix-request,jdk11u-fix-yes,redhat-interest,,,,,,,,,,"Alibaba reported:


I was running jdk11u Shenandoah on specjvm2008, and found the passive mode has a leak-like behaviour:

$java -Xmx24g -Xms24g -XX:ParallelGCThreads=1 -XX:+UseShenandoahGC -XX:+UnlockDiagnosticVMOptions -XX:ShenandoahGCMode=passive -Xlog:gc*=debug:file=512sp.log -jar SPECjvm2008.jar -ict -coe -i 1 derby

$grep 'Pause .*ms' 512sp.log
[63.407s][info ][gc             ] GC(0) Pause Degenerated GC (Outside of Cycle) 23344M->15824M(24576M) 6994.533ms
[71.029s][info ][gc             ] GC(1) Pause Degenerated GC (Outside of Cycle) 23343M->15520M(24576M) 7325.687ms
[80.319s][info ][gc             ] GC(2) Pause Degenerated GC (Outside of Cycle) 23343M->11720M(24576M) 8721.156ms
[88.396s][info ][gc             ] GC(3) Pause Degenerated GC (Outside of Cycle) 23343M->4176M(24576M) 7549.126ms
[94.300s][info ][gc             ] GC(4) Pause Degenerated GC (Outside of Cycle) 23343M->4192M(24576M) 5216.467ms
[99.941s][info ][gc             ] GC(5) Pause Degenerated GC (Outside of Cycle) 23343M->4200M(24576M) 4984.741ms
[105.506s][info ][gc             ] GC(6) Pause Degenerated GC (Outside of Cycle) 23343M->4208M(24576M) 4901.316ms
[111.339s][info ][gc             ] GC(7) Pause Degenerated GC (Outside of Cycle) 23343M->4216M(24576M) 5175.875ms
[117.154s][info ][gc             ] GC(8) Pause Degenerated GC (Outside of Cycle) 23343M->4224M(24576M) 5134.298ms
[123.078s][info ][gc             ] GC(9) Pause Degenerated GC (Outside of Cycle) 23343M->4232M(24576M) 5255.877ms
[129.249s][info ][gc             ] GC(10) Pause Degenerated GC (Outside of Cycle) 23343M->4232M(24576M) 5505.492ms
[135.258s][info ][gc             ] GC(11) Pause Degenerated GC (Outside of Cycle) 23343M->4240M(24576M) 5355.191ms
[141.378s][info ][gc             ] GC(12) Pause Degenerated GC (Outside of Cycle) 23343M->4248M(24576M) 5487.325ms
[147.217s][info ][gc             ] GC(13) Pause Degenerated GC (Outside of Cycle) 23343M->4256M(24576M) 5214.325ms
[152.963s][info ][gc             ] GC(14) Pause Degenerated GC (Outside of Cycle) 23343M->4264M(24576M) 5083.129ms
[158.798s][info ][gc             ] GC(15) Pause Degenerated GC (Outside of Cycle) 23343M->4272M(24576M) 5162.959ms
[164.950s][info ][gc             ] GC(16) Pause Degenerated GC (Outside of Cycle) 23343M->4280M(24576M) 5475.542ms
[170.856s][info ][gc             ] GC(17) Pause Degenerated GC (Outside of Cycle) 23343M->4288M(24576M) 5222.228ms
[177.007s][info ][gc             ] GC(18) Pause Degenerated GC (Outside of Cycle) 23343M->4304M(24576M) 5300.388ms
[182.809s][info ][gc             ] GC(19) Pause Degenerated GC (Outside of Cycle) 23343M->4312M(24576M) 4833.105ms
[189.589s][info ][gc             ] GC(20) Pause Degenerated GC (Outside of Cycle) 23344M->4312M(24576M) 5441.911ms
[195.528s][info ][gc             ] GC(21) Pause Degenerated GC (Outside of Cycle) 23343M->4320M(24576M) 5262.478ms
[201.654s][info ][gc             ] GC(22) Pause Degenerated GC (Outside of Cycle) 23343M->4328M(24576M) 5491.649ms
[208.601s][info ][gc             ] GC(23) Pause Degenerated GC (Outside of Cycle) 23343M->4336M(24576M) 6293.675ms
[214.483s][info ][gc             ] GC(24) Pause Degenerated GC (Outside of Cycle) 23343M->4344M(24576M) 5259.813ms
[220.657s][info ][gc             ] GC(25) Pause Degenerated GC (Outside of Cycle) 23343M->4352M(24576M) 5533.361ms
[227.005s][info ][gc             ] GC(26) Pause Degenerated GC (Outside of Cycle) 23343M->4352M(24576M) 5712.247ms
[233.210s][info ][gc             ] GC(27) Pause Degenerated GC (Outside of Cycle) 23343M->4368M(24576M) 5580.975ms
[239.202s][info ][gc             ] GC(28) Pause Degenerated GC (Outside of Cycle) 23343M->4368M(24576M) 5379.766ms
[245.565s][info ][gc             ] GC(29) Pause Degenerated GC (Outside of Cycle) 23343M->4376M(24576M) 5714.096ms
[251.450s][info ][gc             ] GC(30) Pause Degenerated GC (Outside of Cycle) 23343M->4384M(24576M) 5250.005ms
[257.447s][info ][gc             ] GC(31) Pause Degenerated GC (Outside of Cycle) 23343M->4392M(24576M) 5354.806ms
[263.840s][info ][gc             ] GC(32) Pause Degenerated GC (Outside of Cycle) 23343M->4400M(24576M) 5716.993ms
[270.792s][info ][gc             ] GC(33) Pause Degenerated GC (Outside of Cycle) 23343M->4408M(24576M) 6264.228ms
[277.201s][info ][gc             ] GC(34) Pause Degenerated GC (Outside of Cycle) 23343M->4408M(24576M) 5743.778ms
[283.828s][info ][gc             ] GC(35) Pause Degenerated GC (Outside of Cycle) 23343M->4416M(24576M) 5973.385ms
[291.227s][info ][gc             ] GC(36) Pause Degenerated GC (Outside of Cycle) 23343M->4424M(24576M) 6587.729ms
[298.153s][info ][gc             ] GC(37) Pause Degenerated GC (Outside of Cycle) 23343M->4432M(24576M) 6122.285ms
[304.722s][info ][gc             ] GC(38) Pause Degenerated GC (Outside of Cycle) 23343M->4440M(24576M) 5938.363ms
[311.097s][info ][gc             ] GC(39) Pause Degenerated GC (Outside of Cycle) 23343M->4448M(24576M) 5737.377ms
[317.710s][info ][gc             ] GC(40) Pause Degenerated GC (Outside of Cycle) 23343M->4448M(24576M) 5994.975ms
[323.969s][info ][gc             ] GC(41) Pause Degenerated GC (Outside of Cycle) 23343M->4456M(24576M) 5624.046ms
[330.910s][info ][gc             ] GC(42) Pause Degenerated GC (Outside of Cycle) 23343M->4464M(24576M) 6298.006ms
[337.761s][info ][gc             ] GC(43) Pause Degenerated GC (Outside of Cycle) 23343M->4472M(24576M) 6248.352ms
[344.369s][info ][gc             ] GC(44) Pause Degenerated GC (Outside of Cycle) 23343M->4480M(24576M) 5947.428ms
[351.096s][info ][gc             ] GC(45) Pause Degenerated GC (Outside of Cycle) 23343M->4488M(24576M) 6094.857ms
[357.776s][info ][gc             ] GC(46) Pause Degenerated GC (Outside of Cycle) 23343M->4496M(24576M) 6048.758ms
[364.830s][info ][gc             ] GC(47) Pause Degenerated GC (Outside of Cycle) 23343M->4504M(24576M) 6418.273ms
[370.804s][info ][gc             ] GC(48) Pause Degenerated GC (Outside of Cycle) 23343M->4512M(24576M) 5348.577ms
[376.787s][info ][gc             ] GC(49) Pause Degenerated GC (Outside of Cycle) 23344M->4520M(24576M) 5339.928ms
[383.407s][info ][gc             ] GC(50) Pause Degenerated GC (Outside of Cycle) 23343M->4528M(24576M) 5942.465ms
[389.858s][info ][gc             ] GC(51) Pause Degenerated GC (Outside of Cycle) 23343M->4536M(24576M) 5801.355ms
[396.714s][info ][gc             ] GC(52) Pause Degenerated GC (Outside of Cycle) 23343M->4544M(24576M) 6190.560ms
[403.752s][info ][gc             ] GC(53) Pause Degenerated GC (Outside of Cycle) 23343M->4560M(24576M) 6226.817ms
[410.816s][info ][gc             ] GC(54) Pause Degenerated GC (Outside of Cycle) 23343M->4560M(24576M) 6400.091ms
[417.651s][info ][gc             ] GC(55) Pause Degenerated GC (Outside of Cycle) 23343M->4568M(24576M) 6206.848ms
[424.040s][info ][gc             ] GC(56) Pause Degenerated GC (Outside of Cycle) 23343M->4576M(24576M) 5774.497ms
[431.115s][info ][gc             ] GC(57) Pause Degenerated GC (Outside of Cycle) 23343M->4584M(24576M) 6433.645ms
[437.740s][info ][gc             ] GC(58) Pause Degenerated GC (Outside of Cycle) 23343M->4592M(24576M) 5980.660ms



The heap seems to grow slowly, and the pause time tends to grow too.
The jdk16 or 17 version appears okay (with constant after-gc heap size).

I wonder if there is a known reason?
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2sxqj:",9223372036854775807,b05,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6b00f96c,,,,,,,,,"2021-05-25 05:00;zgu;Fix Request (11u)

I would like to fix this Shenandoah specific bug, that causes slow leak of heap memory due to not running weak reference processing, even it is requested. It only happens with outside-of-cycle degenerated GC.

Fix has been reviewed: https://mail.openjdk.java.net/pipermail/jdk-updates-dev/2021-May/006342.html

and passed Shenandoah tests and confirmed by Alibaba (reporter).
;;;","2021-05-25 10:08;hgupdate;URL:   https://hg.openjdk.java.net/jdk-updates/jdk11u-dev/rev/4bbfb418457a
User:  zgu
Date:  2021-05-25 17:07:27 +0000
;;;","2021-06-01 09:07;hgupdate;URL:   https://hg.openjdk.java.net/jdk-updates/jdk11u/rev/4bbfb418457a
User:  goetz
Date:  2021-06-01 16:03:53 +0000
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
[lworld] [lw3] NPE thrown when attempting to write null to a null-free array has incorrect error message,JDK-8267559,5050177,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,fparain,fparain,fparain,2021-05-21 14:09,2021-05-25 05:07,2023-10-01 09:57,2021-05-25 05:07,repo-valhalla,,,,,,,,hotspot,,0,lw3,lworld,,,,,,,,,,,,"The following code:


public class NullFreeArray {
    static primitive class Point {
	int x = 0, y = 0;
    }

    static void setNull(Object[] a) {
	try {
	    a[0] = null;
	} catch(Throwable t) {
	    System.out.println(t);
	}
    }
    
    public static void main(String[] args) {
	Point[] a = new Point[10];
	setNull(a);
    }
}


produces this output:

java.lang.NullPointerException: Cannot store to object array because ""<parameter1>"" is null

However, <parameter1> in method setNull() is not null, the NPE is caused by the null reference that the code tries to write to the null-free Point array. 
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2sxq3:",9223372036854775807,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Fix class file version during redefinition after 8238048,JDK-8267555,5050170,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,simonis,simonis,simonis,2021-05-21 11:31,2022-03-23 17:33,2023-10-01 09:57,2021-05-28 01:33,15,16,,,,,,17,hotspot,,0,,,,,,,,,,,,,,"In jdk15, JDK-8238048 moved the class file versions from the `InstanceKlass` into the `ConstantPool` and introduced a new method `ConstantPool::copy_fields(const ConstantPool* orig)` which copies not only the `source_file_name_index`, `generic_signature_index` and `has_dynamic_constant` from `orig` to the current `ConstantPool` object, but also the minor and major class file version.

This new `copy_fields()` method is now called during class redefinition (in `VM_RedefineClasses::merge_cp_and_rewrite()`) at places where previously only the `has_dynamic_constant` attribute was copied from the old to the new version of the class. If the new version of the class has a different class file version than the previous one, this new class file version will be overwritten with that of the class file version of the previous class. 

After `VM_RedefineClasses::merge_cp_and_rewrite()` has completed, we do another verification step to check the results of constant pool merging (in jdk15 this was controlled by `VerifyMergedCPBytecodes` which was on by default, in jdk16 and later this extra verification step only happens in debug builds). If the new class instance uses features which are not available for the class version of the previous class, this verification step will fail.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8282241,JDK-8283597,JDK-8238048,,,,,,,,,,,,,,,,,generic,,,,,,,15,,generic,,,,,"0|i2sxoj:",9223372036854775807,b25,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,,,"2021-05-28 01:33;roboduke;Changeset: 1d2c7ac3
Author:    Volker Simonis <simonis@openjdk.org>
Date:      2021-05-28 08:32:43 +0000
URL:       https://git.openjdk.java.net/jdk/commit/1d2c7ac3f7492b335757bf0fd3f6ca3941c5fc72
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
(test) rmi test NonLocalSkeleton fails if network has multiple adapters with the same address,JDK-8267544,5050151,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,rriggs,rriggs,rriggs,2021-05-21 09:03,2021-06-07 15:09,2023-10-01 09:57,2021-05-24 07:11,,,,,,,,17,core-libs,,0,,,,,,,,,,,,,,"The coding of java.rmi.registry.nonLocalRegistry.NonLocalSkeletonTest assumes InetAddress.getAllByName(host) returns a unique set of IP addresses. It does not.

Line 88 creates an immutable Set from the array of IP addresses
and throws an exception when they are not unique.

Set<InetAddress> myAddrs = Set.of(InetAddress.getAllByName(myHostName));",,,,,,,,,,,JDK-8267702,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2sxkb:",9223372036854775807,b24,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@50807e59,,,,,,,,,"2021-05-21 09:32;smarks;To make an unmodifiable set from an array, but deduplicating instead of throwing on duplicates, do this:

    Set.copyOf(Arrays.asList(...))
;;;","2021-05-21 09:49;rriggs;Right, so just make 3 copies, when one would do.;;;","2021-05-22 04:13;msheppar;if the IP addresses above are treated as scoped addresses, then they are unique.
In any case, for network tests these interfaces are filtered out,  via theNetworkConfiguration utility class (open/test/lib/jdk/test/lib/NetworkConfiguration.java), as they are specialised interface and deemed non testable
afaik awdl is filtered out, probably should do the same for llw;;;","2021-05-22 06:55;rriggs;The test needs to determine if the host to test against is a name for the current system.
It should not be sensitive to which interface is used.;;;","2021-05-24 07:11;roboduke;Changeset: d8e6e287
Author:    Roger Riggs <rriggs@openjdk.org>
Date:      2021-05-24 14:10:09 +0000
URL:       https://git.openjdk.java.net/jdk/commit/d8e6e2877aa8a89ad403f06b0adea19c7896d834
;;;","2021-05-24 16:13;msheppar;OK that’s fine ….But the point on IPv6 scoped addresses uniqueness is still pertinent. The awdl0 and llw0 addresses are not considered equal.
Looking the the test, it is using InetAddress.getAllByName which performs a DNS lookup via the os library call getaddrinfo. If the addresses from awdl and llw are being returned then the test is, most likely, being executed in a local environment without a “proper DNS server”,  i.e. with a broadband router is providing the name service lookup. The IPv6 addresses bound to awdl0 and llw0 are scoped IPv6 address. Therefore they are unique. The getAllByName eventually invokes the native Java_java_net_Inet6AddressImpl_lookupAllHostAddr  and this function removes duplicate addresses from the returned address list - the address length of these two addresses is different, therefore they are not seen are equal. Thus, at the native level the scoped IPv6 addresses are not seen as equal, and the instantiated Inet6Address will have a scope id set. Looking at the Inet6Address equals method, which performs an Arrays.equals(this.ipaddress, that.ipaddress) and doesn’t take into account the scope id (or zone index)  of the interface address. This is arguably insufficient and could be considered a bug.
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,
[lworld] [lqagain] javac emits useless checkcast when accessing fields through the reference projection,JDK-8267542,5050149,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,sadayapalam,fparain,fparain,2021-05-21 08:48,2021-05-24 23:18,2023-10-01 09:57,2021-05-24 23:18,repo-valhalla,,,,,,,repo-valhalla,tools,,0,lw3,lworld,,,,,,,,,,,,"javac is inserting an useless checkcast when accessing fields of a primitive object through its reference projection.
Heres' an example:

public class CheckcastGetfieldTest {
    static primitive class Point {
	int x = 0, y = 0;
    }

    public static void main(String[] args) {
	Point p0 = new Point();
	int x0 = p0.x;
	Point.ref p1 = null;
	int x1 = p1.x;
    }
}


  public static void main(java.lang.String[]);
    descriptor: ([Ljava/lang/String;)V
    flags: (0x0009) ACC_PUBLIC, ACC_STATIC
    Code:
      stack=1, locals=5, args_size=1
         0: invokestatic  #7                  // Method CheckcastGetfieldTest$Point.""<init>"":()QCheckcastGetfieldTest$Point;
         3: astore_1
         4: aload_1
         5: getfield      #12                 // Field CheckcastGetfieldTest$Point.x:I
         8: istore_2
         9: aconst_null
        10: astore_3
        11: aload_3
        12: checkcast     #16                 // class ""QCheckcastGetfieldTest$Point;""
        15: getfield      #12                 // Field CheckcastGetfieldTest$Point.x:I
        18: istore        4
        20: return
      LineNumberTable:
        line 7: 0
        line 8: 4
        line 9: 9
        line 10: 11
        line 11: 20



This checkcast was required when the value projection and the reference projection of a primitive object were two different classes. The class of the reference projection had no fields, so the reference had to be down casted to the value projection where the fields were declared.

But with a L/Q model, where there's single class for both projections, such checkcast is not required anymore. This is visible on the field reference of the getfield: ""CheckcastGetfieldTest$Point.x:I"" where only the class is specified, not the projection (nor LCheckcastGetfieldTest$Point.x:I; or QCheckcastGetfieldTest$Point.x:I;).

In case the reference projection is the null reference, gtefield will throw a NullPointerException as it always do for null receivers (same behavior as for identity classes).

This doesn't change the requirement to insert a checkcast when casting from one projection to the other (especially when casting the reference projection to the value projection as a null check is required).

An open question is: should withfield be allowed to operate on the reference projection too, and include a null check on the receiver?
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2sxjv:",9223372036854775807,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4dca67bd,,,,,,,,,"2021-05-21 09:11;briangoetz;With the LQ model, we should update our view of the two types to reflect that they have the same members.  Hopefully this comes along for the ride with the ""one symbol, two types"" refactor?  

In general, we should avoid converting / casting except in situations where a specific projection is needed.;;;","2021-05-24 23:05;sadayapalam;The two types anyway have the same members at the language level - whether we are generating bifurcated classes or unified classes and whether the reference projection type and the value projection type are backed by a single symbol (current mode) or two different symbols (purged)

It is only at the level of the class files that members differ in the bifurcation case. Furthermore, ATM, our prototype differs from the SoV members sorting scheme - the .ref classes are simply empty and all members are emitted in the primitive class file. Efforts to align with the members sorting scheme is abandoned (JDK-8244313);;;","2021-05-24 23:10;sadayapalam;Regarding Brian's observation that ""In general, we should avoid converting / casting except in situations where a specific projection is needed."": 

Yes, we can take the steps to move towards that goal whenever VM team requires/wants it. 

ATM, per the requirement in https://bugs.openjdk.java.net/browse/JDK-8265423 viz "" - For places where we need conversion between the two types (QFoo and LFoo) we will issue casts."", javac issues casts even in the Q->L case which was a new behavior with JDK-8265423 ;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Many tests fail on Windows because of recent jextract changes to CursorKind,JDK-8267536,5050139,Bug,Resolved,JDK,JDK,software,duke,,,P2,Fixed,sundar,sundar,sundar,2021-05-21 05:37,2021-05-21 07:09,2023-10-01 09:57,2021-05-21 07:09,repo-panama,,,,,,,,tools,,0,,,,,,,,,,,,,,"Many tests fail on Window because of recent jextract changes to CursorKind. As part of JDK-8267504, CursorKind enum constants are reduced to minimal / used ones. But it missed Windows specific attributes like CXCursor_DLLExport and CXCursor_DLLImport. This causes many test failures on Windows.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8267504,,,,,,,,,,,,,,,generic,,,,,,,,,generic,,,,,"0|i2sxhn:",9223372036854775807,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@2251e2f8,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
"[x86] Assembler::andb(Address,Register) encoding is incorrect",JDK-8267531,5050131,Bug,Resolved,JDK,JDK,software,duke,,,P2,Fixed,shade,shade,shade,2021-05-21 04:03,2021-08-16 12:44,2023-10-01 09:57,2021-08-16 09:13,17,,,,,,,17,hotspot,,0,c2,hs-comp-triaged,javafuzzer,oraclejdk-na,oracle-triage-11,oracle-triage-17,regression,,,,,,,"Synopsis is provisional. See the attached test.

$ java -Xint -XX:CompileCommand=quiet -XX:CompileOnly=Test Test > int.out
$ java -Xcomp -XX:CompileCommand=quiet -XX:CompileOnly=Test Test > comp.out

$ diff int.out comp.out 
36c36
< vMeth_check_sum: -3490822255
---
> vMeth_check_sum: -3490822268
48c48
< vMeth_check_sum: -4561152040
---
> vMeth_check_sum: -4561152066
60c60
< vMeth_check_sum: -5631481825
---
> vMeth_check_sum: -5631481864
72c72
< vMeth_check_sum: -6701811610
---
> vMeth_check_sum: -6701811662
84c84
< vMeth_check_sum: -7772141395
---
> vMeth_check_sum: -7772141460
96c96
< vMeth_check_sum: -8842471180
---
> vMeth_check_sum: -8842471258
108c108
< vMeth_check_sum: -9912800965
---
> vMeth_check_sum: -9912801056
120c120
< vMeth_check_sum: -10983130750
---
> vMeth_check_sum: -10983130854


This only happens with C2, and only on recent builds I bisected this failure to JDK-8241502.
I further bisected to this hunk. Assembler::andb is newly introduced by JDK-8241502.

// And Memory with Register
instruct andB_mem_rReg(memory dst, rRegI src, rFlagsReg cr)
%{
  match(Set dst (StoreB dst (AndI (LoadB dst) src)));
  effect(KILL cr);

  ins_cost(150);
  format %{ ""andb    $dst, $src\t# byte"" %}
-  opcode(0x20);
-  ins_encode(REX_breg_mem(src, dst), OpcP, reg_mem(src, dst));
+  ins_encode %{
+    __ andb($dst$$Address, $src$$Register);
+  %}
  ins_pipe(ialu_mem_reg);
%}

Staring closely to its implementation, I think prefix(..., /* is_byte_instr = */ true) is missing:

diff --git a/src/hotspot/cpu/x86/assembler_x86.cpp b/src/hotspot/cpu/x86/assembler_x86.cpp
index c5236b35bf4..72629508414 100644
--- a/src/hotspot/cpu/x86/assembler_x86.cpp
+++ b/src/hotspot/cpu/x86/assembler_x86.cpp
@@ -1471,7 +1471,7 @@ void Assembler::vaesenclast(XMMRegister dst, XMMRegister nds, XMMRegister src, i
 
 void Assembler::andb(Address dst, Register src) {
   InstructionMark im(this);
-  prefix(dst, src);
+  prefix(dst, src, true);
   emit_int8(0x20);
   emit_operand(src, dst);
 }
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8241502,,,,,,,,"2021-05-21 04:03;shade;FuzzerUtils.java;https://bugs.openjdk.org/secure/attachment/94735/FuzzerUtils.java","2021-05-21 04:03;shade;Test.java;https://bugs.openjdk.org/secure/attachment/94734/Test.java",,,,,,,,,,,,,,,,,,,,,,,,"0|i2sxfv:",9223372036854775807,b24,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2021-05-22 08:14;roboduke;Changeset: 71e2fa25
Author:    Aleksey Shipilev <shade@openjdk.org>
Date:      2021-05-22 15:13:06 +0000
URL:       https://git.openjdk.java.net/jdk/commit/71e2fa25f73b0006a024edb59d79d837227ecd40
;;;","2021-05-24 23:38;thartmann;ILW = HMM = P2;;;","2021-08-14 04:12;enikitin;Given that the change looks trivial, but attempts to verify it reliably proven difficult, I close it as is. No real verification have been done except common tier1-3 testing.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
StringJoiner can create a String that breaks String::equals,JDK-8267529,5050123,Bug,Closed,JDK,JDK,software,duke,,,P3,Fixed,redestad,webbuggrp,webbuggrp,2021-05-21 01:15,2021-06-07 15:15,2023-10-01 09:57,2021-05-27 16:10,17,,,,,,,17,core-libs,,0,additional-information-received,dcsaw,regression,reproducer-yes,webbug,,,,,,,,,"A DESCRIPTION OF THE PROBLEM :
Explained in the attached test.

STEPS TO FOLLOW TO REPRODUCE THE PROBLEM :
Run the attached test with --illegal-access=warn JVM option. The option is required for debugging purpose only.

EXPECTED VERSUS ACTUAL BEHAVIOR :
EXPECTED -
fooA.equals(fooB) == true
ACTUAL -
fooA.equals(fooB) == false

---------- BEGIN SOURCE ----------
import java.util.Arrays;
import java.util.Objects;
import java.util.StringJoiner;

/*
	Run with ""--illegal-access"" option.
	Example: java --illegal-access=warn Test.java
*/

public class Test {

	public static void main(String[] args) throws Exception {
		final String fooA = ""foo"";

		// UTF-16 delimeter and Latin-1 element
		// produces Latin-1 String with coder=UTF16
		final String fooB = new StringJoiner(""\u2013"")
			.add(""foo"")
			.toString();

		// fooA and fooB are should be equal (both are ""foo""),
		// but due to different ""coder"" field, the ""equals"" method returns false.

		System.err.println(fooA.equals(fooB)); // prints false!

		debugString(""fooA"", fooA);
		debugString(""fooB"", fooB);
	}

	private static void debugString(String which, String s) throws Exception {
		var coder = String.class.getDeclaredField(""coder"");
		coder.setAccessible(true);

		var value = String.class.getDeclaredField(""value"");
		value.setAccessible(true);

		System.err.println(which + "": string=\"""" + s + ""\"" "" +
			""value="" + Arrays.toString((byte[])value.get(s)) +
			"" coder="" + coder.get(s)
		);
	}

}
---------- END SOURCE ----------

FREQUENCY : always


",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2sxe3:",9223372036854775807,b25,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4c088d55,,,,,,,Verified,,"2021-05-21 02:26;tongwan;The observations on Windows 10:
JDK 16: Passed, fooA.equals(fooB) == true 
JDK 17ea+6: Passed.

Can not reproduce the problem.;;;","2021-05-23 00:43;pnarayanaswa;Additional Information from submitter:
===========================
I noticed that the bug was tested on older 17ea+6 and closed.

Please test with at least version 17-ea+22 or 17-ea+23.
I don't know exactly in which build the regression started.

Also I tested only on Linux but I don't think it matter.;;;","2021-05-27 09:12;smarks;Reopening. This indeed fails for me on a recent mainline, near jdk-17+23. Simple reproducer:

==========

jshell> String s1 = ""foo""
s1 ==> ""foo""

jshell> String s2 = new StringJoiner(""\u2013"").add(s1).toString()
s2 ==> ""foo""

jshell> s1.equals(s2)
$7 ==> false

jshell> s2.equals(s1)
$8 ==> false

jshell> new String(s1.toCharArray()).equals(new String(s2.toCharArray()))
$9 ==> true

==========

I haven't verified the submitter's suggestion that the coder is what makes the strings differ, but it seems plausible. Recent changes to StringJoiner include the following:

commit 98cb81b38120e1d06534289de25f73b3b181e161
Author: Peter Levart <plevart@openjdk.org>
Date:   Wed Apr 21 10:32:03 2021 +0000

    8265237: String.join and StringJoiner can be improved further
    
    Reviewed-by: rriggs, redestad

commit 000012a3b08d5f21d4cb2369d2122adfae1a3e9b
Author: Sergey Tsypanov <sergei.tsypanov@yandex.ru>
Date:   Wed Mar 17 13:34:58 2021 +0000

    8148937: (str) Adapt StringJoiner for Compact Strings
    
    Reviewed-by: redestad, chegar
;;;","2021-05-27 10:13;redestad;This seem to be caused by a bug in JDK-8265237, which erroneously always takes the coder of the delimiter into account, even when no delimiter will be emitted.;;;","2021-05-27 16:10;roboduke;Changeset: 95b1fa7a
Author:    Claes Redestad <redestad@openjdk.org>
Date:      2021-05-27 23:09:22 +0000
URL:       https://git.openjdk.java.net/jdk/commit/95b1fa7a88ec3c017734c9d0a6b6b6117f74a610
;;;","2021-06-04 06:01;tongwan; Requested the submitter to verify the fix by downloading the latest version of JDK 17 at https://jdk.java.net/17/ ;;;","2021-06-05 01:14;tongwan;From the submitter:
All my unit tests passed OK in the latest 17-ea+25;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,
"{List,Set,Map}PropertyBase::bind should check against identity",JDK-8267505,5050080,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,jpereda,jpereda,jpereda,2021-05-20 10:00,2021-06-23 06:20,2023-10-01 09:57,2021-06-05 03:48,8,jfx11,jfx16,,,,,jfx17,javafx,,0,,,,,,,,,,,,,,"ListPropertyBase::bind, SetPropertyBase::bind, MapPropertyBase::bind have a check on whether a different instance of the observable is the same, but it should check againts identity.

The attached test shows how these three properties fail when binding is called twice without unbinding first:

This fails to produce the expected result:

c.bind(a);
c.bind(b);
 
while this is the required workaround to make it work:

c.bind(a);
c.unbind(); // need to explicitly unbind
c.bind(b);

According to https://bugs.openjdk.java.net/browse/JDK-8094799, the ListExpressionHelper::fireValueChangedEvent was modified precisely to test against identity.

If such change is done in bind() for these three methods, the workaround (unbinding) wouldn't be necessary.
","All platforms, all versions",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"2021-05-20 10:01;jpereda;ListPropertyTest.java;https://bugs.openjdk.org/secure/attachment/94714/ListPropertyTest.java",,,,,,,,,,,,,,,,,,,,,,,,,"0|i2sx4j:",9223372036854775807,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@233f6319,,,,,,,,,"2021-05-20 14:16;kcr;[~jpereda] if you plan to fix this, please go ahead and assign it to yourself.;;;","2021-06-05 03:48;roboduke;Changeset: 59cf4de3
Author:    Jose Pereda <jpereda@openjdk.org>
Date:      2021-06-05 10:47:22 +0000
URL:       https://git.openjdk.java.net/jfx/commit/59cf4de33f4e5dd60be64a6ff381f17703e3175e
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
jextract should report unsupported language and exit rather than generating partial nonworking code,JDK-8267504,5050079,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,sundar,sundar,sundar,2021-05-20 09:43,2021-05-21 05:38,2023-10-01 09:57,2021-05-21 02:52,repo-panama,,,,,,,,tools,,0,,,,,,,,,,,,,,"jextract should report unsupported language and exit rather than generating partial code

jextract's -C option can be used to pass any clang compiler option. User may pass -C-xc++ or -C-xobjc and pass C++ or Objective C header. We don't support anything other than C as of now. It is better to report clear error message and exit.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8267536,,,,,,,,,,,,,,,,,,,generic,,,,,,,,,generic,,,,,"0|i2sx4b:",9223372036854775807,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@2251e2f8,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
[lworld] [lw3] NPE message thrown by checkcast is incorrect,JDK-8267503,5050078,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,fparain,fparain,fparain,2021-05-20 09:16,2021-05-21 05:02,2023-10-01 09:57,2021-05-21 05:02,repo-valhalla,,,,,,,,hotspot,,0,lw3,lworld,,,,,,,,,,,,"One new behavior of the checkcast bytecode in Valhalla is to throw a NullPointerException whenever there's an attempt to cast the null reference to a null-free type. However, the error message generated for this exception is incorrect, suggesting that no such NPE should be thrown:

java.lang.NullPointerException: There cannot be a NullPointerException at bci 23 of method void NPECheckcastTest.main(java.lang.String[])



By comparison, here's the error message of an NPE when getfield encounter a null receiver:

java.lang.NullPointerException: Cannot read field ""x"" because ""<local1>"" is null



"," 

 ",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2sx43:",9223372036854775807,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
JDK-8246677 caused 16x performance regression in SynchronousQueue,JDK-8267502,5050077,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,dl,eastigeevich,eastigeevich,2021-05-20 09:13,2023-09-15 11:48,2023-10-01 09:57,2023-07-22 03:42,17,21,22,,,,,22,core-libs,,0,amazon-interest,jdk21u-fix-request,jdk21u-fix-SQE-ok-next,jdk21u-fix-yes,,,,,,,,,,"I was benchmarking SynchronousQueue from the OpenJDK Tip. I found its performance is 16 times lower than the performance of SynchronousQueue from OpenJDK 11. Comparing SynchronousQueue implementations I found the OpenJDK Tip SynchronousQueue is changed by JDK-8246677. Reverting SynchronousQueue to the version before JDK-8246677 fixed the regression.

I have the regression on Amazon Linux 2 AArch64 and on Amazon Linux 2 x86_64.
To reproduce:

$ build/linux-x86_64-server-release/images/jdk/bin/javac SQBench.java
$ build/linux-x86_64-server-release/images/jdk/bin/java SQBench
500000
500000
500000
500000
500000
# Warmup done. Restarting threads.
# duration = 1013243934
# duration (ns) per round trip op = 506.621967
# round trip ops/sec = 1973858

$ cd src/java.base/share/classes/java/util/concurrent
$ wget https://raw.githubusercontent.com/openjdk/jdk/5cfa8c94d6765b93f910fc01cd1ac2a56b16d78a/src/java.base/share/classes/java/util/concurrent/SynchronousQueue.java
$ cd -
$ make images
$ build/linux-x86_64-server-release/images/jdk/bin/java  SQBench
500000
500000
500000
500000
500000
# Warmup done. Restarting threads.
# duration = 15841810490
# duration (ns) per round trip op = 7920.905245
# round trip ops/sec = 126248
$ uname -o -r
5.4.109-57.183.amzn2int.x86_64 GNU/Linux

----------- SQBench.java
import java.util.Random;
import java.util.concurrent.*;

public class SQBench {
  public static final long WARMUP_PASS_COUNT = 5;
  public static final long WARMUP_ITERATIONS = 500L * 1000L;
  public static final long ITERATIONS = 2 * 1000L * 1000L;

  static class Producer extends java.lang.Thread {
    final long iterations;
    Random rand;
    BlockingQueue<Integer> queue;

    Producer(final long terminatingIterationCount, BlockingQueue<Integer> queue) {
      this.iterations = terminatingIterationCount;
      this.queue = queue;
      rand = new Random(100);
    }

    public void run() {
      try {
        for (long i = 0; i < iterations; i++) {
          queue.put(rand.nextInt(10000));
        }
        queue.put(-1);
      } catch (InterruptedException ie) {
      }
    }
  }

  static class Consumer extends java.lang.Thread {
    public int bits = 0;
    public int count = 0;
    BlockingQueue<Integer> queue;

    Consumer(BlockingQueue<Integer> queue) {
      this.queue = queue;
    }

    public void run() {
      while (true) {
        try {
          Integer number = queue.take();
          if (number == -1) return;
          ++count;
          bits += Integer.bitCount(number.intValue());
        } catch (InterruptedException ie) {
        }
      }
    }
  }

  public static void main(final String[] args) {
    BlockingQueue<Integer> queue = new SynchronousQueue<>();
    try {
      Producer producer;
      Consumer consumer;

      for (int i = 0; i < WARMUP_PASS_COUNT; i++) {
        consumer = new Consumer(queue);
        producer = new Producer(WARMUP_ITERATIONS, queue);
        producer.start();
        consumer.start();
        producer.join();
        consumer.join();
        System.out.println(consumer.count);
      }

      java.lang.Thread.sleep(1000); // Let things (like JIT compilations) settle down.
      System.out.println(""# Warmup done. Restarting threads."");

      consumer = new Consumer(queue);
      producer = new Producer(ITERATIONS, queue);

      long start = System.nanoTime();
      producer.start();
      consumer.start();
      producer.join();
      consumer.join();
      long duration = System.nanoTime() - start;

      System.out.println(""# duration = "" + duration);
      System.out.println(""# duration (ns) per round trip op = "" + duration / (ITERATIONS * 1.0));
      System.out.println(
          ""# round trip ops/sec = "" + (ITERATIONS * 1000L * 1000L * 1000L) / duration);
    } catch (InterruptedException ex) {
      System.err.println(""SpinWaitTest interrupted."");
    }
  }
}

",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8246677,,,,,,,,,,,,,,,,,,,,,,,,linux,,,,,"0|i2sx3v:",9223372036854775807,b08,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@239b1eeb,,,,,,,,,"2021-05-20 09:16;eastigeevich;Assigned to the author of PR;;;","2021-05-24 04:33;dl;This update changed spin versus context-switch behavior, which improves performance in some use cases (including most within Loom), but worsens in others (like this benchmark). It is overall a net improvement. As loom and related JVM updates progress, there will be opportunities to find a better balance. But for now this is a known performance side effect without a simple solution.;;;","2023-07-20 03:47;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/14317
Date: 2023-06-05 18:52:00 +0000;;;","2023-07-22 03:42;dukebot;Changeset: 8d1ab570
Author:    Doug Lea <dl@openjdk.org>
Date:      2023-07-22 10:41:42 +0000
URL:       https://git.openjdk.org/jdk/commit/8d1ab57065c7ebcc650b5fb4ae098f8b0a35f112
;;;","2023-09-15 11:48;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk21u/pull/168
Date: 2023-09-15 18:39:02 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Remove the dependency on SecurityManager in JceSecurityManager.java ,JDK-8267485,5050057,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,wetmore,wetmore,wetmore,2021-05-20 07:59,2021-08-02 11:45,2023-10-01 09:57,2021-07-27 10:11,,,,,,,,18,security-libs,,0,noreg-other,,,,,,,,,,,,,"JceSecurityManager is a subclass of SecurityManager in order to get the class context and eventually the classes to determine if any required signing of providers or crypto permissions overriding of applications is necessary.  

JEP 411 proposes to deprecate the SecurityManager for removal. If JEP 411 is approved, we will need to eventually remove the dependency ""extends SecurityManager"".

The class stack hierarchy can be obtained using the newer JDK 9 API StackWalker.  Once the class is obtained, the CodeBase/ProtectionDomain jar verifications can proceed as before.
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8264713,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2swzf:",9223372036854775807,b08,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@35a9b277,,,,,,,,,"2021-05-21 17:26;wetmore;Draft PR:  https://github.com/openjdk/jdk/pull/4150;;;","2021-07-27 08:27;wetmore;Added noreg-other as many of the other tests exercise this code-path, including tier2 which is most of the security tests.

I ran ""tier1,tier2"" and ""jck:api/java_security,jck:api/javax_crypto,jck:api/javax_net,jck:api/javax_security,jck:api/org_ietf,jck:api/javax_xml/crypto""
;;;","2021-07-27 10:11;roboduke;Changeset: c8af8238
Author:    Bradford Wetmore <wetmore@openjdk.org>
Date:      2021-07-27 17:11:13 +0000
URL:       https://git.openjdk.java.net/jdk/commit/c8af8238b4b55d515573374800015e115042d883
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
remove superfluous preview related annotations and test options,JDK-8267465,5050033,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,vromero,vromero,vromero,2021-05-20 04:12,2021-06-10 17:56,2023-10-01 09:57,2021-06-07 06:58,,,,,,,,17,tools,,0,,,,,,,,,,,,,,"some code using not-anymore preview features APIs is still annotated with @SuppressWarnings(""preview""), those annotations should be safely removed. In addition several preview related options can be removed from related (records, sealed classes, etc) tests",,,,,,,,,,,,,,,,,,,,,,,,JDK-8268143,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2swu3:",9223372036854775807,b26,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4dca67bd,,,,,,,,,"2021-06-07 06:58;roboduke;Changeset: 4f9d6b7d
Author:    Vicente Romero <vromero@openjdk.org>
Date:      2021-06-07 13:57:15 +0000
URL:       https://git.openjdk.java.net/jdk/commit/4f9d6b7d68312860d3e184a1f33687e1693d7d87
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Pasting Unicode characters into JShell does not work.,JDK-8267459,5050027,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,jlahoda,jlahoda,jlahoda,2021-05-20 03:43,2021-09-12 22:15,2023-10-01 09:57,2021-06-02 02:56,17,,,,,,,17,tools,,0,jdk11u-fix-request,jdk11u-fix-yes,,,,,,,,,,,,"When one types 'č' into JShell, it works:
jshell> int č;
č ==> 0

But pasting it does not:
jshell> int �;
|  Error:
|  illegal character: '\ufffd'
|  int �;
|      ^

Originally reported here:
https://mail.openjdk.java.net/pipermail/kulla-dev/2021-May/002828.html
",,,,,,,,,,,JDK-8270900,JDK-8271347,,,,,,,,,,,,,,,,,,JDK-8273643,,,JDK-8272139,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2swsr:",9223372036854775807,b25,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@ef6d34f,,,,,,,,,"2021-06-02 02:56;roboduke;Changeset: de6472c4
Author:    Jan Lahoda <jlahoda@openjdk.org>
Date:      2021-06-02 09:55:06 +0000
URL:       https://git.openjdk.java.net/jdk/commit/de6472c44166e57cd440b7bffcfc876585aca7dd
;;;","2021-07-18 21:42;itakiguchi;Fix Request (11u)
 
Backporting this patch eliminates ""Cut & Paste"" featuer with Multiple Byte Character Set (like UTF8).
Patch does not apply cleanly to 11u.
Small change is required.

https://github.com/openjdk/jdk11u-dev/pull/139;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Taskqueue code fails with assert(bottom_relaxed() == age_top_relaxed()) failed: not empty,JDK-8267446,5050013,Bug,Closed,JDK,JDK,software,duke,,,P2,Fixed,kbarrett,tschatzl,tschatzl,2021-05-20 02:23,2021-08-25 07:50,2023-10-01 09:57,2021-05-24 15:45,17,,,,,,,17,hotspot,,0,gc-pending-review,zgc,,,,,,,,,,,,"# To suppress the following error report, specify this argument
# after -XX: or in .hotspotrc:  SuppressErrorAt=/taskqueue.hpp:246
#
# A fatal error has been detected by the Java Runtime Environment:
#
#  Internal Error ([...]/workspace/open/src/hotspot/share/gc/shared/taskqueue.hpp:246), pid=90520, tid=43011
#  assert(bottom_relaxed() == age_top_relaxed()) failed: not empty
#
# JRE version: Java(TM) SE Runtime Environment (17.0+23) (fastdebug build 17-ea+23-LTS-2060)
# Java VM: Java HotSpot(TM) 64-Bit Server VM (fastdebug 17-ea+23-LTS-2060, mixed mode, sharing, tiered, compressed class ptrs, z gc, bsd-amd64)
# CreateCoredumpOnCrash turned off, no core file dumped
#
# An error report file with more information is saved as:
# [...]/testoutput/test-support/jck_runtime_vm_jvmti/hs_err_pid90520.log
#
# If you would like to submit a bug report, please visit:
#   https://bugreport.java.com/bugreport/crash.jsp
#

stack trace from hs_err (no core file available afaict):

Stack: [0x0000700001488000,0x0000700001588000],  sp=0x00007000015870d0,  free space=1020k
Native frames: (J=compiled Java code, j=interpreted, Vv=VM code, C=native code)
V  [libjvm.dylib+0x10fce3c]  VMError::report_and_die(int, char const*, char const*, __va_list_tag*, Thread*, unsigned char*, void*, void*, char const*, int, unsigned long)+0x6dc
V  [libjvm.dylib+0x10fd45b]  VMError::report_and_die(Thread*, void*, char const*, int, char const*, char const*, __va_list_tag*)+0x3b
V  [libjvm.dylib+0x5f33bd]  report_vm_error(char const*, int, char const*, char const*, ...)+0xdd
V  [libjvm.dylib+0x745f05]  non-virtual thunk to GenericTaskQueueSet<OverflowTaskQueue<oop, (MEMFLAGS)5, 131072u>, (MEMFLAGS)5>::assert_empty() const+0x75
V  [libjvm.dylib+0x101ac36]  TaskTerminator::~TaskTerminator()+0x56
V  [libjvm.dylib+0x1171cd4]  ZHeapIterator::~ZHeapIterator()+0x334
V  [libjvm.dylib+0x11709b1]  ZHeap::object_iterate(ObjectClosure*, bool)+0x81
V  [libjvm.dylib+0xba6c1b]  VM_HeapIterateOperation::doit()+0x5b
V  [libjvm.dylib+0x11025a2]  VM_Operation::evaluate()+0xf2
V  [libjvm.dylib+0x111fd87]  VMThread::evaluate_operation(VM_Operation*)+0xe7
V  [libjvm.dylib+0x1120803]  VMThread::inner_execute(VM_Operation*)+0x203
V  [libjvm.dylib+0x111fa85]  VMThread::loop()+0xa5
V  [libjvm.dylib+0x111f868]  VMThread::run()+0xd8
V  [libjvm.dylib+0x105a407]  Thread::call_run()+0x177
V  [libjvm.dylib+0xe1e84f]  thread_native_entry(Thread*)+0x14f
C  [libsystem_pthread.dylib+0x6109]  _pthread_start+0x94
C  [libsystem_pthread.dylib+0x1b8b]  thread_start+0xf",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2swpn:",9223372036854775807,b24,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6b00f96c,,,,,,,Verified,,"2021-05-20 10:42;kbarrett;~ZHeapIterator() (implicitly) calls ~TaskTerminator() after deleting the queues.  But ~TaskTerminator() calls assert_queue_set_empty(), which iterates over the (previously deleted) queues, calling assert_empty on them.  There's a bit of ownership mess around queues and queue sets.  I'm surprised this hasn't failed before.
;;;","2021-05-24 15:45;roboduke;Changeset: f6909596
Author:    Kim Barrett <kbarrett@openjdk.org>
Date:      2021-05-24 22:43:42 +0000
URL:       https://git.openjdk.java.net/jdk/commit/f6909596cae7c47514c10b614cc006169bcee04b
;;;","2021-08-25 07:50;kbarrett;no further failures in CI.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Remove LinkOutput[Impl],JDK-8267434,5050001,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,jjg,jjg,jjg,2021-05-19 15:23,2021-05-26 17:29,2023-10-01 09:57,2021-05-20 07:23,,,,,,,,17,tools,,0,noreg-cleanup,,,,,,,,,,,,,"jdk.javadoc.internal.doclets.toolkit.util.links.LinkOutput and
jdk.javadoc.internal.doclets.formats.html.LinkOutputImpl

appear to be unused.

This seems strange/weird/unlikely, so please verify and delete these classes if so.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8011642,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2swmz:",9223372036854775807,b24,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@7900061a,,,,,,,,,"2021-05-19 15:26;jjg;Seems true as far back as 11u, which is the oldest source I currently have to hand.;;;","2021-05-19 15:35;jjg;OK, seems true even in JDK 8 langtools.
Wow.;;;","2021-05-19 16:50;jjg;The code was added by Jamie Ho for JDK 1.5, and was most recently modified in 2013 by Bhavesh as part of JDK-8009686. Somewhat surprising, this is after the introduction of `HtmlTree` in 2010.;;;","2021-05-19 16:52;jjg;Here's an example of LinkOutput in use.
http://hg.openjdk.java.net/jdk8/jdk8/langtools/rev/f10cffab99b4#l5.18;;;","2021-05-19 16:58;jjg;I see this in the Mercurial history, for JDK-8011642:

changeset:   1735:74cd21f2c2fe
user:        jjg
date:        Tue May 14 10:14:52 2013 -0700
summary:     8011642: Remove LinkOutput in favor of direct use of Content

I guess we removed use of LinkOutput, without removing the interface and implementation!;;;","2021-05-20 07:23;roboduke;Changeset: 878d1b3f
Author:    Jonathan Gibbons <jjg@openjdk.org>
Date:      2021-05-20 14:22:24 +0000
URL:       https://git.openjdk.java.net/jdk/commit/878d1b3f600d4a51b082f0c3276df6de49a9bc4f
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,
GraphicsDevice.setDisplayMode(REFRESH_RATE_UNKNOWN) throws IAE: Unable to set display mode! ,JDK-8267430,5049993,Bug,Resolved,JDK,JDK,software,duke,,,P2,Fixed,prr,dbessono,dbessono,2021-05-19 13:17,2023-04-05 19:05,2023-10-01 09:57,2021-06-09 13:53,17,,,,,,,17,client-libs,,0,conformance,sn_94,sn_95,tck-red-17,,,,,,,,,,"When running on a remote macos-aarch64 system, using JDK17 the attached test program generates:

=================
GraphicsDevice: sun.awt.CGraphicsDevice@6e8cf4c6
DisplayMode: 1920x1080x32bpp@60Hz
Exception in thread ""main"" java.lang.IllegalArgumentException: Unable to set display mode!
at java.desktop/sun.awt.CGraphicsDevice.nativeSetDisplayMode(Native Method)
at java.desktop/sun.awt.CGraphicsDevice.setDisplayMode(CGraphicsDevice.java:315)
at Test.main(Test.java:43) 
=================

This doesn't seem to be reproducible on an macos-aarch64 / JDK17 using a physical display
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JCK-7316081,,,,"2023-04-05 19:00;prr;GetDisplayModes.c;https://bugs.openjdk.org/secure/attachment/103339/GetDisplayModes.c","2021-05-19 13:17;dbessono;Test.java;https://bugs.openjdk.org/secure/attachment/94694/Test.java",,,,,,,,,,,,,,,,,,,,,,,,"0|i2swl7:",9223372036854775807,b26,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4b09ce31,,,,,,,,,"2021-05-31 09:18;prr;This seems like an artifact of how it is being tested. Use a physical display;;;","2021-05-31 11:03;prr;I think that  in a ""shared"" display mode this is disallowed.
The enumeration of possible display modes is ONLY the one
DisplayMode: 1920x1080x32bpp@60Hz

And so the only thng the test tries to do is set the display mode to the same mode it is already in.

The calls to CGBeginDisplayConfiguration and CGConfigureDisplayWithDisplayMode both suceed but
CGCompleteDisplayConfiguration fails with 1001 (kCGErrorIllegalArgument) which seems a bit bogus

CGraphicsDevice.java hardwires
    @Override
    public boolean isDisplayChangeSupported() {
        return true;
    }

So there is an assumption it is always possible on macOS.

So let's assume we can detect this by there being only one display mode is supported
So there are two options
1) have isDisplayChangeSupported return false in this case
2) Check that the requested display mode is the same as the current one and don't even try to ask native to change it.
;;;","2021-05-31 13:38;prr;oh, this is fun. There is actually already a check for equality in CGraphicsDevice.java
but the test is passing in a mode constructed as thus :-
                    DisplayMode newMode = new DisplayMode(mode.getWidth(), mode.getHeight(),
                            mode.getBitDepth(), DisplayMode.REFRESH_RATE_UNKNOWN);

This is allowed and REFRESH_RATE_UNKNOWN which maps to 0 instead of 60 means that equality fails
so the JDK tries to set this.

So there needs to be code somewhere that handles this  .. and it seems like native is
trying to handle it since it refrate is 0 it returns any mode that matches the rest
(see getBestModeForParameters) .. so it seems that should work .. but obviously doesn't.

And if I explicitly use 60 Hz (the supported value) instead, then we still get the IAE.

So basically we are back to cocoa really not liking this call being made if there's only one available setting.
;;;","2021-05-31 14:04;prr;<pre>
--- a/src/java.desktop/macosx/native/libawt_lwawt/awt/CGraphicsDevice.m
+++ b/src/java.desktop/macosx/native/libawt_lwawt/awt/CGraphicsDevice.m
@@ -276,16 +276,23 @@ static jobject createJavaDisplayMode(CGDisplayModeRef mode, JNIEnv *env) {
 
     __block CGError retCode = kCGErrorSuccess;
     if (closestMatch != NULL) {
-        CGDisplayModeRetain(closestMatch);
-        [ThreadUtilities performOnMainThreadWaiting:YES block:^(){
-            CGDisplayConfigRef config;
-            retCode = CGBeginDisplayConfiguration(&config);
-            if (retCode == kCGErrorSuccess) {
-                CGConfigureDisplayWithDisplayMode(config, displayID, closestMatch, NULL);
-                retCode = CGCompleteDisplayConfiguration(config, kCGConfigureForAppOnly);
-            }
-            CGDisplayModeRelease(closestMatch);
-        }];
+        /* We have a legit match but in remote screen sharing where only one
+         * mode is suported because it can't really be changed so don't try
+         * because it may fail. But the check for the closest match is still
+         *  needed to make sure the app gets an exception for bogus values.
+         */
+        if (CFArrayGetCount(allModes) > 1) {
+            CGDisplayModeRetain(closestMatch);
+            [ThreadUtilities performOnMainThreadWaiting:YES block:^(){
+                CGDisplayConfigRef config;
+                retCode = CGBeginDisplayConfiguration(&config);
+                if (retCode == kCGErrorSuccess) {
+                    CGConfigureDisplayWithDisplayMode(config, displayID, closestMatch, NULL);
+                    retCode = CGCompleteDisplayConfiguration(config, kCGConfigureForAppOnly);
+                }
+                CGDisplayModeRelease(closestMatch);
+            }];
+        }
</pre>;;;","2021-06-01 00:48;serb;We may report this to Apple, If it will be possible to extract just a small test example based on 
nativeSetDisplayMode/getAllValidDisplayModes/getBestModeForParameters;;;","2021-06-01 01:24;serb;Probably it is possible that we read incorrect values and cocoa fails when we try to set them?;;;","2021-06-01 14:52;serb;The workaround for this particular bug can be done in the java level where we have an ""equal"" check, it may take into account the ""0"" rate. It even cannot be considered as a workaround just an improvement, and we can do this on all platforms.;;;","2021-06-01 15:28;prr;I had looked at that but when you say ""java level"" that's already the platform-specific code
in CGraphicsDevice that does this check
If you change the behaviour  of the DisplayMode Object.equals method (which calls into the class specific methiod) and likely has some surprising consequences for apps where previously two objects that were different are now equal.  Hashmaps would behave differently (eg).
The spec. isn't saying these are equal it just allows 0 to be specified to be used as a wild card when choosing a display mode.

So we'd have to write a special equals method just in CGraphicsDevice.java which used knowledge of DisplayMode's notion of equals etc. So at that point I decided it was easier to let it go down to nativce code which had most of what we needed.
;;;","2021-06-01 17:36;serb;I meant do not call the DisplayMode.equals() at all, but instead add a check to the CGraphicsDevice(and others) to support the ""0"" rate.
We have this check on all platforms:
if (getDisplayMode().equals(dm)) {
    return....
}
but If the incoming rate is ""0"" and others data are the same as the current mode, then we can return immediately as well.

This even will not require a ""special"" comment block as to why it was done.;;;","2021-06-01 17:48;serb;But in any case, we should report it to Apple.;;;","2021-06-02 13:56;prr;> but If the incoming rate is ""0"" and others data are the same as the current mode

Doing this is what I meant by ""we'd have to write a special equals method just in CGraphicsDevice.java which used knowledge of DisplayMode's notion of equals""
;;;","2021-06-02 14:22;prr;So there's another issue I've found which may explain what Sergey saw.
I wrote a test which iterates through setting all the display modes.
I found that on the built in retina of my mac book it failed.
After some investigation I found that it failed on setting to what was the original default mode !
Although there may be some further wrinkle at the very least this is because of a bug in our code
combined with an oddity of what macos 
The API to get all modes we call does not list the ""default"" mode - for whatever reason 
It include it  for my secondary monitor but not for the built in retina

This is presumably a long standing issue since we have code that goes to the trouble of reallocating
the returned array one longer and adding the ""current"" (presumably meant to be initial) mode to
the new array if it is not already present.

This is then the set of modes returned to Java

But when we start switching modes we con't re-use that list. Instead  in native we again just
ask for the list of available modes.

And at that point the current mode is not the deafult and so that current mode IS in the list returned by the (native) call. So there's no need (per the buggy code) to add the current mode since it is confusing default with initial

Then we call a JDK function getBestModeForParameters(..) which looks through this list to find a match.
Since it is trying to find a match for the initial default mode and it is not there, hence we return null and hence
we throw IAE that surely the app passed down an invalid mode.

It seems we need to start to cache the INITIAL mode but it needs to be done per-device too.

This bug can even be seen at an API level with this program
import java.awt.DisplayMode;
import java.awt.GraphicsDevice;
import java.awt.GraphicsEnvironment;

public class GDM {

    public static void main(String[] args) throws Throwable {

        GraphicsEnvironment ge = GraphicsEnvironment.getLocalGraphicsEnvironment();
        GraphicsDevice[] devices = ge.getScreenDevices();

        for (GraphicsDevice d : devices) {

           if (!d.isDisplayChangeSupported()) {
               continue;
           }
           DisplayMode[] modes0 = d.getDisplayModes(); 
           d.setDisplayMode(modes0[0]);
           DisplayMode[] modes1 = d.getDisplayModes(); 
           System.out.println(""modes0 len=""+modes0.length);
           System.out.println(""modes1 len=""+modes1.length);
        }
    }
}

which when run prints
modes0 len=66
modes1 len=65
;;;","2021-06-02 14:34;serb;Truly looks like a bug in macOS.;;;","2021-06-02 14:42;serb;Or maybe the issue related to the ""point"" API?
Can you try to replace the
h = CGDisplayModeGetHeight(mode);
w = CGDisplayModeGetWidth(mode);
to the 
h = CGDisplayModeGetPixelHeight(mode);
w = CGDisplayModeGetPixelWidth(mode);
;;;","2021-06-02 15:05;serb;BTW your example does not necessarily show a bug, the call to setDisplayMode() may change the state of the system and the next getDisplayModes() may contain different modes. Is it possible that different VC has different modes?;;;","2021-06-02 15:06;prr;The code that adds the (intended to be default) display mode was added here
https://bugs.openjdk.java.net/browse/JDK-8007146;;;","2021-06-02 15:16;serb;That was done for the case if we filtered out the current mode. At that time the cocoa reports this mode as 1x1 rectangle.;;;","2021-06-02 15:16;serb;Does it mean that cocoa skips the current mode for such devices?;;;","2021-06-02 16:37;prr;> BTW your example does not necessarily show a bug, the call to setDisplayMode() may
> change the state of the system and the next getDisplayModes() may contain different modes
>  Is it possible that different VC has different modes?

It definitely does show a bug. This has nothing to do with VNC. It local and nothing is changing
We return the initial display mode to the app and after changing it the first time, any attempt to explicitly set it
back to the original will get an exception.

> Does it mean that cocoa skips the current mode for such devices?

I don't know what you mean by ""such devices"" and it is NOT the current mode that is skipped
it is the DEFAULT mode, which just happens to be the ""current"" one when you start up and no other app has changed it.

In fact that points to the problem that it some other app has changed and is still running you may never see the original true default .. 
;;;","2021-06-02 17:01;serb;> It definitely does show a bug. This has nothing to do with VNC. It local and nothing is changing
> We return the initial display mode to the app and after changing it the first time, any attempt to explicitly set it
> back to the original will get an exception. 

It is only an our bug if after changing the mode, the old mode is reported as ""supported"". If the old mode is not present in the actual/current list of modes, we should throw an exception. This is the reason why we ask for the list of modes each time and do not save it during device initialization.

The only question is why the mode is missing after the first setDisplayMode, is the bug in our code or in cocoa. It is hard to believe that it is an expected feature that it is not possible to switch back to ""default"" mode.;;;","2021-06-02 17:19;serb;It works fine on the single GPU system, right? I guess we did not catch such an issue in the CI since it probably related to the activating/deactivating VC?;;;","2021-06-02 17:40;prr;> It works fine on the single GPU system, right? 

I don't know. I don't have one. 

The macminis we use for most of our testing are necessarily using an external display and
it does not reproduce on my 16"" MacBook either when using the external display.

So it seems on the evidence so far more related to the built in display of macbooks.;;;","2021-06-03 09:55;serb;When an external display is used then the discrete card is activated by default. So most probably the first call to SetDisplayMode change the VC, the list of modes is changed as well, and we cannot set the old mode. This looks like a bug, but at least it works according to the specification.

So as a fix for this particular jck issue I suggest to return back to the initial fix and update the ""if (getDisplayMode().equals(dm)) {return}"".
It is simple and does not look like a trick in the code.;;;","2021-06-03 13:35;prr;
There are two completely different issues here
* First the initial remote shared desktop problem - which might even be a permission issue.

I don't see how the video card and external monitor can have anything to do with the shared remote desktop

* Second, the problem that affects LOCAL enumeration that was uncovered by a different test.

This 2nd issue is about enumeration of the available modes.
There is no problem setting that initial mode even if it is not enumerated.

Furthermore 
1) I can reproduce this enumeration problem with no external display attached
2) I can reproduce it in a small standalone native app that doesn't even display anything.;;;","2021-06-03 14:10;serb;And the bug reported by the JCK is the first one, and we can easily fix it. The second one can be filed separately and reported to Apple.
I guess everybody will happy with that solution.;;;","2021-06-03 14:18;serb;I tried to reproduce it on my old macbook and cannot. The problem exists on 16 mbp w/o external display only.
You can check Is VC related to this bug or not by running the SwingSet2 first - before your test (it will activate the discrete VC).;;;","2021-06-03 15:15;prr;We are referring to the 2nd problem, right ? It is not related to VC or enabling of the discrete CPU.
It happens even after shutdown and reboot and with no external monitor connected and I checked that 
automatic graphics switching is enabled.;;;","2021-06-03 18:43;serb;Yes, we are talking about the second problem.
After shutdown or w/o external monitor, the integrated card is used by default. So when you run the test the discrete card will be activated during the test execution.

To confirm that it is related or not to the VC you need to do the opposite: disable auto-switching, connect external monitor, or run another java app before your test case. In this case, the test will use only one GPU.;;;","2021-06-03 20:01;prr;Oh I already know that.
The problem occurs with the external monitor plugged in, that's how I first saw it.
When running with both internal and external displays active.
Basically it occurs in every scenario any one has suggested.
So it has nothing to do with activating discrete graphics (or not).
It is just a behaviour that occurs all the time in every case.

So when you wrote :
> The problem exists on 16 mbp w/o external display only. 

No, that is wrong, it occurs on a system with external monitor too So long
as the built-in display is active because it is an issue ONLY for the built-in display,
Not sure how you inferred otherwise.;;;","2021-06-03 20:04;prr;For the failure to report all modes I've submitted a bug with apple using a standalone native test case.;;;","2021-06-03 23:15;serb;Will hope we get feedback from Apple.;;;","2021-06-09 13:53;roboduke;Changeset: 991ca142
Author:    Phil Race <prr@openjdk.org>
Date:      2021-06-09 20:52:43 +0000
URL:       https://git.openjdk.java.net/jdk/commit/991ca14279faa7db5d0afe023e666844f5b3b75b
;;;","2023-04-05 19:05;prr;I just got somewhat non-specific email from Apple that they have fixed this bug (perhaps)
Non-specific as in whether in Ventura 13.3 (just released) Ventura 13.4 beta (just released) or something else .. I can't say.
Not even clear they actually fixed it.

""Thanks once again for filing this feedback report. 
Following up on our previous message, we believe this issue is resolved and will now consider this report closed internally. ""

The previous message was 2 years ago saying they couldn't see the test case - I think upload failed due to proxies so I had to submit it.

Need to test it to the extent I can use these new releases and see if its really fixed.

I neglected to attach that test case I supplied to apple to this bug - just did so (I still had it!) GetDisplayModes.c;;;",
Several features lack the EnableValhalla guard,JDK-8267428,5049989,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,fparain,fparain,fparain,2021-05-19 11:53,2021-05-19 12:03,2023-10-01 09:57,2021-05-19 12:03,repo-valhalla,,,,,,,,hotspot,,0,lw3,lworld,,,,,,,,,,,,"The following Valhalla features are lacking the if(EnableValhalla) guard:
  - injection of the IdentityObject interface
  - iteration over fields to pre-load primitive class fields
  - iteration of method arguments to eagerly load primitive class arguments
  - support for flattened and null-free fields in the interpreter",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2swkb:",9223372036854775807,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
MonitorVmStartTerminate test timed out on Embedded VM,JDK-8267426,5049987,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,snazarki,snazarki,snazarki,2021-05-19 11:19,2021-06-03 10:22,2023-10-01 09:57,2021-05-26 02:09,8,,,,,,,openjdk8u302,hotspot,,0,azul-interest,jdk8u-fix-request,jdk8u-fix-yes,,,,,,,,,,,Embedded systems (identified by JAVASE_EMBEDDED build flag) disables UsePerfData option (jvmstat instrumentation) so that default way to detect launched jvm is not functional. Only JDK8 is affected since latest releases sets this flag to true.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,generic,,,,,,,,,linux,,,,,"0|i2swjv:",9223372036854775807,b05,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@78d03d9a,,,,,,,,,"2021-05-19 11:22;snazarki;The fix is quite simple and doesn't affect other versions. I'll prepare RR with the patch
@@ -309,6 +309,7 @@
             String className = JavaProcess.class.getName();
             String classPath = System.getProperty(""test.classes"");
             ProcessBuilder pb = ProcessTools.createJavaProcessBuilder(
+                ""-XX:+UsePerfData"",
                 ""-Dtest.timeout.factor="" + System.getProperty(""test.timeout.factor"", ""1.0""),
                 ""-cp"", classPath, className, mainArgsIdentifier);
             OutputBuffer ob = ProcessTools.getOutput(pb.start());;;;","2021-05-20 03:26;snazarki;Reviewed by David Holmes
 http://mail.openjdk.java.net/pipermail/jdk8u-dev/2021-May/013879.html;;;","2021-05-26 02:09;hgupdate;URL:   https://hg.openjdk.java.net/jdk8u/jdk8u-dev/jdk/rev/68d30424a687
User:  vkempik
Date:  2021-05-26 09:06:17 +0000
;;;","2021-06-03 10:21;hgupdate;URL:   https://hg.openjdk.java.net/jdk8u/jdk8u/jdk/rev/68d30424a687
User:  andrew
Date:  2021-06-03 17:19:58 +0000
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
"CTW: C1 fails with ""State must not be null""",JDK-8267424,5049981,Bug,Closed,JDK,JDK,software,duke,,,P2,Fixed,iveresov,shade,shade,2021-05-19 10:59,2021-08-06 08:58,2023-10-01 09:57,2021-06-10 07:19,11,17,,,,,,17,hotspot,,0,c1,ctw,hs-comp-triaged,jdk11u-fix-request,jdk11u-fix-yes,oracle-triage-17,redhat-interest,regression,,,,,,"$ export JAVA_HOME=<point to fastdebug build>
$ export PATH=$JAVA_HOME/bin:$PATH
$ cd test/hotspot/jtreg/testlibrary/ctw
$ make
$ cd dist
$ wget https://repo1.maven.org/maven2/com/cloudbees/diff4j/1.2/diff4j-1.2.jar
$ JAVA_OPTIONS=""-XX:TieredStopAtLevel=1"" ./ctw.sh diff4j-1.2.jar 

#
# A fatal error has been detected by the Java Runtime Environment:
#
#  Internal Error (/home/shade/trunks/jdk/src/hotspot/share/c1/c1_RangeCheckElimination.cpp:903), pid=3761927, tid=3761940
#  assert(state) failed: State must not be null

Current CompileTask:
C1:    612  325   !b  1       com.cloudbees.diff.Patch$SinglePatchReader::hasNextPatch (697 bytes)

Stack: [0x00007f05ccc36000,0x00007f05ccd37000],  sp=0x00007f05ccd34050,  free space=1016k
Native frames: (J=compiled Java code, j=interpreted, Vv=VM code, C=native code)
V  [libjvm.so+0x8269ec]  RangeCheckEliminator::process_access_indexed(BlockBegin*, BlockBegin*, AccessIndexed*) [clone .part.0]+0x54c
V  [libjvm.so+0x827e30]  RangeCheckEliminator::calc_bounds(BlockBegin*, BlockBegin*)+0x640
V  [libjvm.so+0x827bc7]  RangeCheckEliminator::calc_bounds(BlockBegin*, BlockBegin*)+0x3d7
V  [libjvm.so+0x827bc7]  RangeCheckEliminator::calc_bounds(BlockBegin*, BlockBegin*)+0x3d7
V  [libjvm.so+0x827bc7]  RangeCheckEliminator::calc_bounds(BlockBegin*, BlockBegin*)+0x3d7
V  [libjvm.so+0x827bc7]  RangeCheckEliminator::calc_bounds(BlockBegin*, BlockBegin*)+0x3d7
V  [libjvm.so+0x827bc7]  RangeCheckEliminator::calc_bounds(BlockBegin*, BlockBegin*)+0x3d7
V  [libjvm.so+0x827bc7]  RangeCheckEliminator::calc_bounds(BlockBegin*, BlockBegin*)+0x3d7
V  [libjvm.so+0x827bc7]  RangeCheckEliminator::calc_bounds(BlockBegin*, BlockBegin*)+0x3d7
V  [libjvm.so+0x827bc7]  RangeCheckEliminator::calc_bounds(BlockBegin*, BlockBegin*)+0x3d7
V  [libjvm.so+0x827bc7]  RangeCheckEliminator::calc_bounds(BlockBegin*, BlockBegin*)+0x3d7
V  [libjvm.so+0x827d63]  RangeCheckEliminator::calc_bounds(BlockBegin*, BlockBegin*)+0x573
V  [libjvm.so+0x827bc7]  RangeCheckEliminator::calc_bounds(BlockBegin*, BlockBegin*)+0x3d7
V  [libjvm.so+0x82834a]  RangeCheckEliminator::RangeCheckEliminator(IR*)+0x3ca
V  [libjvm.so+0x8289d0]  RangeCheckElimination::eliminate(IR*)+0x40
V  [libjvm.so+0x72bfe6]  Compilation::build_hir() [clone .part.0]+0x1256
V  [libjvm.so+0x72f9e0]  Compilation::compile_java_method()+0x1c0
V  [libjvm.so+0x7307e4]  Compilation::compile_method()+0x1d4
V  [libjvm.so+0x7311ff]  Compilation::Compilation(AbstractCompiler*, ciEnv*, ciMethod*, int, BufferBlob*, bool, DirectiveSet*)+0x36f
V  [libjvm.so+0x732637]  Compiler::compile_method(ciEnv*, ciMethod*, int, bool, DirectiveSet*)+0x1a7
V  [libjvm.so+0xa44369]  CompileBroker::invoke_compiler_on_method(CompileTask*)+0xf19
V  [libjvm.so+0xa45048]  CompileBroker::compiler_thread_loop()+0x5a8
V  [libjvm.so+0x19d07b1]  JavaThread::thread_main_inner()+0x281
V  [libjvm.so+0x19d7ee4]  Thread::call_run()+0x104",,,,,,,,,,,JDK-8269999,JDK-8270079,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"2021-05-19 11:00;shade;hs_err_pid3761927.log;https://bugs.openjdk.org/secure/attachment/94692/hs_err_pid3761927.log","2021-05-19 11:00;shade;replay_pid3761927.log;https://bugs.openjdk.org/secure/attachment/94693/replay_pid3761927.log",,,,,,,,,,,,,,,,,,,,,,,,"0|i2swij:",9223372036854775807,b26,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,Verified,,"2021-05-20 22:25;yyang;FYI: I recently made a RCE-related change in JDK-8267239 which has a very similar callstack, but it seems that this crash is caused by something else since it will crash even without JDK-8267239.;;;","2021-05-21 01:05;yyang;It looks more interesting, I did some investigation.

The dominator of a loop is std_entry, and RCE wants to insert deoptimization within it, so a crash occurred. I'm not sure does it reasonable to recognize the std_entry block as the dominator of a loop? If it's not reasonable, I think we can change some code in ComputeLinearScanOrder. Just IMO, hope to have C1 experts' comments.;;;","2021-05-21 02:17;thartmann;Did some quick binary search on the builds and it looks like this was introduced in JDK 17 b08. I couldn't find any C1 changes in that build though.

ILW = Assert during C1 compilation (regression in JDK 17), easy to reproduce with replay compilation, disable C1 RCE = HMM = P2;;;","2021-05-21 02:19;thartmann;Could be a side-effect of JDK-8251462. The fact that replay compilation reproduces this with 'TieredStopAtLevel=1' but not with default arguments suggests that too.;;;","2021-05-21 02:23;thartmann;Igor, could you please have a look? Thanks.;;;","2021-05-21 02:31;shade;Yeah, and tangential question is about CTW runner itself. With default arguments, the CTW runner is supposed to compile at level=1 among other things, but test does not fail then! I checked that it indeed compiles at level 1, I tried to massage the tiered ergonomics to run with the same options (e.g. InlineSmallCode, etc), but still the test only fails with explicit -XX:TieredStopAtLevel=1. So far I have given up on trying to explain why.;;;","2021-06-10 07:19;roboduke;Changeset: 0a6c7d8a
Author:    Igor Veresov <iveresov@openjdk.org>
Date:      2021-06-10 14:18:04 +0000
URL:       https://git.openjdk.java.net/jdk/commit/0a6c7d8a4b6560d3917b9faf66ccf5fc15a891db
;;;","2021-07-07 10:31;shade;Fix Request (11u)

Backporting for 11.0.13-oracle parity. I was unable to reproduce the CTW failure on current 11u, but tier1 passes.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,
Fix copyrights in jpackage tests,JDK-8267423,5049979,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,herrick,herrick,herrick,2021-05-19 10:48,2021-06-07 15:10,2023-10-01 09:57,2021-05-24 13:50,17,,,,,,,17,tools,,0,sn_94,,,,,,,,,,,,,"This is about tools/jpackage/junit/junit.java, which fails on jtreg 6, which provides updated versions of TestNG (7.3.0) and JUnit (4.13.2).

The problem is that this test is an ""off-brand"" use of JUnit in jtreg.  The underlying root case is that JUnit has a new dependency on `hamcrest.jar`, which is provided in jtreg6, and available to ""normal"" JUnit tests.  The immediate fix for this test appears to be to add it to this line:
 * @library ${jtreg.home}/lib/hamcrest.jar
to open/test/jdk/tools/jpackage/junit/junit.java

https://github.com/jonathan-gibbons/jdk/blob/jtreg6/test/jdk/tools/jpackage/junit/junit.java#L29

However, in looking at this test we noticed a number of oddities.

The file `junit.java` just contains `@run shell run_junit.sh` so it is not clear why the test description is not in that `run_junit.sh` file (and remove junit.java).

The file `junit.java` has the wrong license (GPL2 + Classpath Exception). It should be plain GPL for any/all test files. This applies to most of the files in this directory.

The file `run_junit.sh` file does not have any legal header.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2swi3:",9223372036854775807,b24,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@3656b41f,,,,,,,,,"2021-05-19 14:44;herrick;Before the switchover to jtreg 6, I can only update the copyrights.  
1 - Adding copyright notice to several script files that are missing one.
2. - Fixing copyright notices in the test that have the classpath exception.;;;","2021-05-24 13:50;roboduke;Changeset: a5467ae7
Author:    Andy Herrick <herrick@openjdk.org>
Date:      2021-05-24 19:28:50 +0000
URL:       https://git.openjdk.java.net/jdk/commit/a5467ae7bb5780f34728ad073c5c4158894c7c4b
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
j.l.constant.DirectMethodHandleDesc.Kind.valueOf(int) implementation doesn't conform to the spec regarding REF_invokeInterface handling,JDK-8267421,5049977,Bug,Closed,JDK,JDK,software,duke,,,P2,Fixed,vromero,dbessono,dbessono,2021-05-19 10:22,2021-08-05 08:25,2023-10-01 09:57,2021-06-21 19:09,17,,,,,,,17,core-libs,,0,conformance,tck-red-17,,,,,,,,,,,,"Specification j.l.constant.DirectMethodHandleDesc.Kind.valueOf(int) 
( https://download.java.net/java/early_access/jdk17/docs/api/java.base/java/lang/constant/DirectMethodHandleDesc.Kind.html#valueOf(int) )
says:

> Returns the enumeration member with the given refKind field. Behaves as if valueOf(refKind, false). As a special case, if refKind is REF_invokeInterface (9) then the isInterface field will be true.

However if we call

    Kind.valueOf(MethodHandleInfo.REF_invokeInterface);

then IAE is thrown

   java.lang.IllegalArgumentException: refKind=9
	at java.base/java.lang.constant.DirectMethodHandleDesc$Kind.valueOf(DirectMethodHandleDesc.java:149)
	at java.base/java.lang.constant.DirectMethodHandleDesc$Kind.valueOf(DirectMethodHandleDesc.java:111)

As if we call 

    Kind.valueOf(MethodHandleInfo.REF_invokeInterface, false)

and not as if the last arg is 'true'.

",,,,,,,,,,,JDK-8269192,JDK-8270613,,,,,,,,,,,,,,,,,,,,,,,,,JCK-7316340,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2swhn:",9223372036854775807,b28,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4c088d55,,,,,,,Verified,,"2021-06-21 19:09;roboduke;Changeset: 6b14c8a1
Author:    Vicente Romero <vromero@openjdk.org>
Date:      2021-06-22 02:08:15 +0000
URL:       https://git.openjdk.java.net/jdk17/commit/6b14c8a1e5316b6c8584e93ee7a94d9eaec676cf
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
IntelliJ build and test of JavaFX does not work,JDK-8267418,5049974,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,mhanl,kcr,kcr,2021-05-19 09:33,2021-09-03 10:20,2023-10-01 09:57,2021-06-29 21:16,jfx16,,,,,,,jfx17,javafx,,0,ide,noreg-cleanup,,,,,,,,,,,,"There are various errors cloning and working with OpenJFX in IntelliJ IDE:

* The .idea/misc.xml needs to to use JDK_11 as language level instead of JDK_8.
For IntelliJ users: This is the language level shown inside the Project Structure. (File -> Project Structure...)

* The .idea/base.iml, .idea/controls.iml, .idea/fxml.iml, .idea/web.iml, .idea/graphics.iml are modified to include/recognize the shims (as test resource, this is very similar to the configuration inside the .classpath file from Eclipse)
* EDIT: The projects are now recognized by IntelliJ-gradle (.idea/gradle.xml, .idea/compiler.xml)

NOTE: This bug was filed on behalf of an OpenJFX contributor who has filed a PR to fix it at: https://github.com/openjdk/jfx/pull/506",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8269244,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2swgz:",9223372036854775807,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@1d1c7815,,,,,,,,,"2021-06-29 21:16;roboduke;Changeset: a1be1d59
Author:    Marius Hanl <mhanl@openjdk.org>
Committer: Ambarish Rapte <arapte@openjdk.org>
Date:      2021-06-30 04:16:03 +0000
URL:       https://git.openjdk.java.net/jfx/commit/a1be1d591c0bf0bc118ffb8a4d1c4c8cc236b689
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
vmTestbase/vm/mlvm/anonloader/stress/oome/metaspace/Test.java failed with OutOfMemoryError,JDK-8267404,5049957,Bug,Closed,JDK,JDK,software,duke,,,P2,Fixed,jiefu,dcubed,dcubed,2021-05-19 07:37,2021-07-08 15:47,2023-10-01 09:57,2021-05-22 16:31,17,,,,,,,17,hotspot,,0,tier2,,,,,,,,,,,,,"The following test failed in the JDK17 CI:

vmTestbase/vm/mlvm/anonloader/stress/oome/metaspace/Test.java

Here's a snippet from the log file:

#section:main
----------messages:(5/446)----------
command: main -Xmx256m -XX:-UseGCOverheadLimit -XX:MaxMetaspaceSize=8m vm.mlvm.anonloader.stress.oome.metaspace.Test
reason: User specified action: run main/othervm -Xmx256m -XX:-UseGCOverheadLimit -XX:MaxMetaspaceSize=8m vm.mlvm.anonloader.stress.oome.metaspace.Test 
Mode: othervm [/othervm specified]
Additional options from @modules: --add-modules java.base --add-exports java.base/jdk.internal.misc=ALL-UNNAMED
elapsed time (seconds): 3.871
----------configuration:(4/111)----------
Boot Layer
  add modules: java.base                   
  add exports: java.base/jdk.internal.misc ALL-UNNAMED

----------System.out:(0/0)----------
----------System.err:(4/227)----------

Exception: java.lang.OutOfMemoryError thrown from the UncaughtExceptionHandler in thread ""MainThread""
Exception in thread ""main"" 
Exception: java.lang.OutOfMemoryError thrown from the UncaughtExceptionHandler in thread ""main""
----------rerun:(45/8778)*----------

The JVM args for this first sighting are:

-XX:+CreateCoredumpOnCrash -ea -esa -XX:CompileThreshold=100 -XX:+UnlockExperimentalVMOptions -server -XX:-TieredCompilation

The JVM args for the second sighting are:

-XX:+CreateCoredumpOnCrash -ea -esa -XX:CompileThreshold=100 -XX:+UnlockExperimentalVMOptions -server -XX:+TieredCompilation",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8269065,JDK-8267293,,,,,,,,,,,,,,aarch64,,,,,,,,,linux,,,,,"0|i2swd7:",9223372036854775807,b24,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,Verified,,"2021-05-19 07:49;dcubed;This test was recently modified by:

    JDK-8267293 vmTestbase/vm/mlvm/anonloader/stress/oome/metaspace/Test.java fails when JTREG_JOBS > 25

which was integrated  in jdk-17+23-2056. That fix did not get tested in Tier2 until
jdk-17+23-2059-tier2 which is when these failures started showing up.;;;","2021-05-19 07:49;dcubed;[~jiefu] - Please take a look at this Tier2 failure on linux-aarch64.;;;","2021-05-19 08:01;jiefu;I don't have an aarch64 machine right now.

Could you help me test this fix, [~dcubed]
----------------
diff --git a/test/hotspot/jtreg/vmTestbase/vm/mlvm/anonloader/stress/oome/metaspace/Test.java b/test/hotspot/jtreg/vmTestbase/vm/mlvm/anonloader/stress/oome/metaspace/Test.java
index 980c9303f04..805bfc4341e 100644
--- a/test/hotspot/jtreg/vmTestbase/vm/mlvm/anonloader/stress/oome/metaspace/Test.java
+++ b/test/hotspot/jtreg/vmTestbase/vm/mlvm/anonloader/stress/oome/metaspace/Test.java
@@ -36,7 +36,7 @@
  * @build vm.mlvm.anonloader.stress.oome.metaspace.Test
  * @run driver vm.mlvm.share.IndifiedClassesBuilder
  *
- * @run main/othervm -Xmx256m -XX:-UseGCOverheadLimit -XX:MaxMetaspaceSize=8m vm.mlvm.anonloader.stress.oome.metaspace.Test
+ * @run main/othervm -Xmx512m -XX:-UseGCOverheadLimit -XX:MaxMetaspaceSize=8m vm.mlvm.anonloader.stress.oome.metaspace.Test
  */
 
 package vm.mlvm.anonloader.stress.oome.metaspace;
----------------
Thanks.;;;","2021-05-19 09:11;dcubed;[~jiefu] - I'll try to get to testing that fix after I clear the decks in the CI.
Today (Wed) is the jdk-17+23 snapshot so I gotta get Tier[1-3] cleared up.;;;","2021-05-19 15:31;dcubed;I'm running the test change through a Mach5 Tier2 job set right now.
Wish I had realized that this test doesn't execute in Tier1, I would have
started with a Tier2 instead of doing a Tier1 job set first.;;;","2021-05-19 18:03;dcubed;Still fails with '-Xmx512m':

#section:main
----------messages:(5/446)----------
command: main -Xmx512m -XX:-UseGCOverheadLimit -XX:MaxMetaspaceSize=8m vm.mlvm.anonloader.stress.oome.metaspace.Test
reason: User specified action: run main/othervm -Xmx512m -XX:-UseGCOverheadLimit -XX:MaxMetaspaceSize=8m vm.mlvm.anonloader.stress.oome.metaspace.Test 
Mode: othervm [/othervm specified]
Additional options from @modules: --add-modules java.base --add-exports java.base/jdk.internal.misc=ALL-UNNAMED
elapsed time (seconds): 2.061
----------configuration:(4/111)----------
Boot Layer
  add modules: java.base                   
  add exports: java.base/jdk.internal.misc ALL-UNNAMED

----------System.out:(2/64)----------
### TRACE 1: Test started.
### TRACE 1: Caught OOME : Metaspace
----------System.err:(6/245)----------
java.lang.OutOfMemoryError: Metaspace

java.lang.OutOfMemoryError: Metaspace

Exception: java.lang.OutOfMemoryError thrown from the UncaughtExceptionHandler in thread ""MainThread""
Exception in thread ""main"" java.lang.OutOfMemoryError: Metaspace
----------rerun:(45/9451)*----------;;;","2021-05-19 18:17;jiefu;Thanks [~dcubed] .
I'll find an aarch64 machine and do some experiments today.;;;","2021-05-19 21:15;jiefu;Hi [~dcubed] ,

We can't reproduce it on all our aarch64 platforms.

Could you help me test with `-Xmx1g` and `-Xmx2g`?
If it still fails, I will revert the change.

Thanks.;;;","2021-05-20 21:09;jiefu;We can reproduce the same error log by reducing the metaspace size.
So we guess XX:MaxMetaspaceSize=8m is not enough for aarch64.

Will revert the change about the metaspace size.;;;","2021-05-21 09:31;dcubed;[~jiefu] - I tried reproducing the failure mode on my own linux-aarch64
dev machine without success. I tried without any cmd line options and
I tried with:

-XX:+CreateCoredumpOnCrash -ea -esa -XX:CompileThreshold=100 -XX:+UnlockExperimentalVMOptions -server -XX:-TieredCompilation

and:

-XX:+CreateCoredumpOnCrash -ea -esa -XX:CompileThreshold=100 -XX:+UnlockExperimentalVMOptions -server -XX:+TieredCompilation 

And no luck there either.

I've downloaded your latest PR as of this point:

commit b8df6e06ee1378d2f57eb218fab01a66608c614a
Author: Jie Fu <jiefu@openjdk.org>
Date:   Fri May 21 23:20:02 2021 +0800

    Increase MaxMetaspaceSize to 512k

and I'm running that through Mach5 Tier2. I'll update with results later.;;;","2021-05-21 11:11;dcubed;Mach5 Tier2 ran the new test 6 times on the following configs:

linux-aarch64-debug - 2 passes
macosx-aarch64-debug - 2 passes
linux-x64-debug - 2 passes

Looks like it does not run on macosx-x64-debug and windows-x64-debug
until Tier3 so I also kicked off a Mach5 Tier3 run.

Mach5 Tier3 ran the new test 4 times on the following configs:

macosx-x64-debug - 2 passes
windows-x64-debug - 2 passes;;;","2021-05-21 16:00;jiefu;Good news.
Thanks [~dcubed] .;;;","2021-05-22 16:31;roboduke;Changeset: 6288a993
Author:    Jie Fu <jiefu@openjdk.org>
Date:      2021-05-22 22:59:55 +0000
URL:       https://git.openjdk.java.net/jdk/commit/6288a9936cc7e69cab0cc5f3e49c803f184bf2ca
;;;",,,,,,,,,,,,,,,,,,,,,
"tools/jpackage/share/FileAssociationsTest.java#id0 failed with ""Error: Bundler ""Mac PKG Package"" (pkg) failed to produce a package""",JDK-8267403,5049955,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,almatvee,dcubed,dcubed,2021-05-19 07:19,2021-06-07 15:13,2023-10-01 09:57,2021-05-25 15:09,17,,,,,,,17,tools,,0,intermittent,sn_93,sn_94,tier2,,,,,,,,,,"The following test failed in the JDK17 CI:

tools/jpackage/share/FileAssociationsTest.java#id0

Here's a snippet from the log file:

[07:56:17.317] Preparing package scripts.
[07:56:17.318] Using default package resource preinstall.template [PKG preinstall script] (add preinstall to the resource-dir to customize).
[07:56:17.319] Using default package resource postinstall.template [PKG postinstall script] (add postinstall to the resource-dir to customize).
[07:56:17.320] Running /usr/bin/pkgbuild
[08:06:57.922] Command:
    /usr/bin/pkgbuild --root /var/folders/jt/4yj1vth13s57jj4vffpdsgg80000gp/T/jdk.jpackage13753422776386471062/images/image-16281315152009508389 --install-location /Applications --component-plist /var/folders/jt/4yj1vth13s57jj4vffpdsgg80000gp/T/jdk.jpackage13753422776386471062/config/cpl.plist --scripts /var/folders/jt/4yj1vth13s57jj4vffpdsgg80000gp/T/jdk.jpackage13753422776386471062/config/scripts --identifier Hello /var/folders/jt/4yj1vth13s57jj4vffpdsgg80000gp/T/jdk.jpackage13753422776386471062/packages/FileAssociationsTest-app.pkg
[08:06:57.922] Returned: 134

[08:06:57.923] java.io.IOException: Command [/usr/bin/pkgbuild, --root, /var/folders/jt/4yj1vth13s57jj4vffpdsgg80000gp/T/jdk.jpackage13753422776386471062/images/image-16281315152009508389, --install-location, /Applications, --component-plist, /var/folders/jt/4yj1vth13s57jj4vffpdsgg80000gp/T/jdk.jpackage13753422776386471062/config/cpl.plist, --scripts, /var/folders/jt/4yj1vth13s57jj4vffpdsgg80000gp/T/jdk.jpackage13753422776386471062/config/scripts, --identifier, Hello, /var/folders/jt/4yj1vth13s57jj4vffpdsgg80000gp/T/jdk.jpackage13753422776386471062/packages/FileAssociationsTest-app.pkg] exited with 134 code
	at jdk.jpackage/jdk.jpackage.internal.Executor.executeExpectSuccess(Executor.java:91)
	at jdk.jpackage/jdk.jpackage.internal.IOUtils.exec(IOUtils.java:205)
	at jdk.jpackage/jdk.jpackage.internal.IOUtils.exec(IOUtils.java:166)
	at jdk.jpackage/jdk.jpackage.internal.MacPkgBundler.createPKG(MacPkgBundler.java:482)
	at jdk.jpackage/jdk.jpackage.internal.MacPkgBundler.bundle(MacPkgBundler.java:159)
	at jdk.jpackage/jdk.jpackage.internal.MacPkgBundler.execute(MacPkgBundler.java:630)
	at jdk.jpackage/jdk.jpackage.internal.Arguments.generateBundle(Arguments.java:676)
	at jdk.jpackage/jdk.jpackage.internal.Arguments.processArguments(Arguments.java:550)
	at jdk.jpackage/jdk.jpackage.main.Main.execute(Main.java:91)
	at jdk.jpackage/jdk.jpackage.main.Main.main(Main.java:52)
[08:06:58.008] jdk.jpackage.internal.PackagerException: Error: Bundler ""Mac PKG Package"" (pkg) failed to produce a package
	at jdk.jpackage/jdk.jpackage.internal.Arguments.generateBundle(Arguments.java:679)
	at jdk.jpackage/jdk.jpackage.internal.Arguments.processArguments(Arguments.java:550)
	at jdk.jpackage/jdk.jpackage.main.Main.execute(Main.java:91)
	at jdk.jpackage/jdk.jpackage.main.Main.main(Main.java:52)
[08:06:58.061] TRACE: exec: Done. Exit code: 1
[08:06:58.069] ERROR: Expected [0]. Actual [1]: Check command [/mesos/work_dir/jib-master/install/jdk-17+23-2030/macosx-x64.jdk/jdk-17.jdk/Contents/Home/bin/jpackage --input ./test.bcc14973/input --dest ./test.bcc14973/output --name FileAssociationsTest --type pkg --file-associations ./test.bcc14973/fa.properties --main-jar hello.jar --main-class Hello --file-associations ./test.bcc14973/fa2.properties --verbose](18) exited with 0 code
[08:06:58.070] [  FAILED  ] FileAssociationsTest.test(true); checks=3
[08:06:58.072] [ RUN      ] FileAssociationsTest.testNoMime
[08:06:58.075] TRACE: Actions: [[initialize], [create], [unpack], [verify-install], [finalize]]
[08:06:58.075] TRACE: Deleting [./testNoMime] directory recursively
[08:06:58.076] [       OK ] FileAssociationsTest.testNoMime; checks=0
[08:06:58.076] [ RUN      ] FileAssociationsTest.testTooManyMimes
[08:06:58.077] TRACE: Actions: [[initialize], [create], [unpack], [verify-install], [finalize]]
[08:06:58.077] TRACE: Deleting [./testTooManyMimes] directory recursively
[08:06:58.078] [       OK ] FileAssociationsTest.testTooManyMimes; checks=0
[08:06:58.079] [==========] 4 tests ran
[08:06:58.079] [  PASSED  ] 3 tests
[08:06:58.081] [  FAILED  ] 1 test, listed below
[08:06:58.082] [  FAILED  ] FileAssociationsTest.test(true); workDir=[./test.bcc14973]
[08:06:58.082] 1 FAILED TEST
----------System.err:(61/4526)----------",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,x86_64,,,,,,,,,os_x,,,,,"0|i2swcr:",9223372036854775807,b24,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@3656b41f,,,,,,,,,"2021-05-25 15:09;roboduke;Changeset: 5aa45f2e
Author:    Alexander Matveev <almatvee@openjdk.org>
Date:      2021-05-25 22:08:33 +0000
URL:       https://git.openjdk.java.net/jdk/commit/5aa45f2edf278bab4403704ab4b6644096f8c077
;;;","2021-05-25 16:58;almatvee;Looks like another issue similar to hdiutil (JDK-8249395) when process is gone, but we still waiting for it. I was not able to reproduce this issue by running test or pkgbuild separately and conclusion was made based on logs. Fixed in same way as hdiutil issue. Also, I added logging PID for external commands to simplify log analysis. Log will have multiple hdiutil and/or pkgbuild processes, since we running multiple tests in parallel and matching external process to test failure requires looking at command line for particular process, so PID should simplify this.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
C2: java/text/Normalizer/ConformanceTest.java test failed with assertion,JDK-8267399,5049949,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,roland,zgu,zgu,2021-05-19 06:03,2023-01-19 03:29,2023-10-01 09:57,2021-06-22 08:47,11,16,17,,,,,17,hotspot,,0,c2,hs-comp-triaged,jdk11u-fix-request,jdk11u-fix-yes,oracle-triage-11,oracle-triage-17,redhat-interest,,,,,,,"The test failed during Shenandoah nightly test.

#  Internal Error (/home/jenkins/workspace/nightly/jdk-jdk/src/hotspot/share/opto/loopnode.cpp:1763), pid=19728, tid=23030
#  assert(inner->is_valid_counted_loop(T_INT) && inner->is_strip_mined()) failed: OuterStripMinedLoop should have been removed
#
# JRE version: OpenJDK Runtime Environment (17.0) (fastdebug build 17-internal+0-adhoc.jenkins.jdk-jdk)
# Java VM: OpenJDK 64-Bit Server VM (fastdebug 17-internal+0-adhoc.jenkins.jdk-jdk, mixed mode, tiered, compressed oops, compressed class ptrs, shenandoah gc, linux-amd64)
# Problematic frame:
# V  [libjvm.so+0x1143aa6]  LoopNode::verify_strip_mined(int) const+0xd6



",,,,,,,,,,,JDK-8269199,JDK-8269998,JDK-8270353,JDK-8270620,,,,,,,,,,,,,,,,,,,JDK-8299975,,,,,,,,"2021-05-19 06:02;zgu;hs_err_pid19728.log;https://bugs.openjdk.org/secure/attachment/94689/hs_err_pid19728.log","2021-05-19 06:02;zgu;replay_pid19728.log;https://bugs.openjdk.org/secure/attachment/94690/replay_pid19728.log",,,,,,,,,,,,,,,,,,,,,,,,"0|i2swbf:",9223372036854775807,b28,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2021-05-21 01:08;thartmann;ILW = Assert during C2 compilation, only triggers with Shenandoah, use different GC or disable loop strip mining = HLM = P3;;;","2021-06-22 08:47;roboduke;Changeset: 578c55bb
Author:    Roland Westrelin <roland@openjdk.org>
Date:      2021-06-22 15:46:44 +0000
URL:       https://git.openjdk.java.net/jdk17/commit/578c55bbe65baec733bb633afbc1423010fa6aed
;;;","2021-07-12 09:25;mdoerr;Fix Request (11u):
Should get backported for parity with 11.0.13-oracle. Applies cleanly.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
AlgorithmId's OID cache is never refreshed,JDK-8267397,5049947,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,valeriep,sgehwolf,sgehwolf,2021-05-19 05:46,2021-06-17 07:35,2023-10-01 09:57,2021-06-14 13:41,11.0.11,17,8u291,,,,,17,security-libs,,0,,,,,,,,,,,,,,"Currently the OID cache table in AlgorithmId is never being refreshed once it's initialized. For example if a jar is signed with an uncommon signature algorithm, it might trigger initialization of the OID cache table. When later any Java code uses the initialized cache it might report incorrect availability of algorithms. Note that Security.addProvider() and Security.removeProvider() might add/remove available algorithms.

Example code (using the bouncy castle provider):

$ cat UseBCAlgoWithPreCheck.java
import org.bouncycastle.jce.provider.BouncyCastleProvider;

import java.security.Security;
import java.security.NoSuchAlgorithmException;

public class UseBCAlgoWithPreCheck {
    public static void main (String[] args) throws Exception {
        boolean usePreCheck = false;
        if (args.length == 1) {
            usePreCheck = Boolean.parseBoolean(args[0]);
        }
        System.out.println(""usePreCheck = "" + usePreCheck);
        if (usePreCheck) {
           try {
               new javax.crypto.EncryptedPrivateKeyInfo(""GOST3411WITHECGOST3410"", new byte[]{0});
               throw new RuntimeException(""pre-check FAILED! GOST3411WITHECGOST3410 available?"");
           } catch (NoSuchAlgorithmException e) {
               System.out.println(""pre-check passed! GOST3411WITHECGOST3410 NOT available!"");
           }
        }
        Security.addProvider(new BouncyCastleProvider());
        new javax.crypto.EncryptedPrivateKeyInfo(""GOST3411WITHECGOST3410"", new byte[]{0});
        System.out.println(""Successfully created third-party provider algo. GOOD."");
    }
}

$ javac -cp bcprov-jdk15on-168.jar:. UseBCAlgoWithPreCheck.java
$ java -cp bcprov-jdk15on-168.jar:. UseBCAlgoWithPreCheck false
usePreCheck = false
Successfully created third-party provider algo. GOOD.
$ java -cp bcprov-jdk15on-168.jar:. UseBCAlgoWithPreCheck true
usePreCheck = true
pre-check passed! GOST3411WITHECGOST3410 NOT available!
Exception in thread ""main"" java.security.NoSuchAlgorithmException: unrecognized algorithm name: GOST3411WITHECGOST3410
	at java.base/sun.security.x509.AlgorithmId.get(AlgorithmId.java:470)
	at java.base/javax.crypto.EncryptedPrivateKeyInfo.<init>(EncryptedPrivateKeyInfo.java:139)
	at UseBCAlgoWithPreCheck.main(UseBCAlgoWithPreCheck.java:22)",,,,,,,,,,,JDK-8268839,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8266929,,,,,,,,,,,,,,,generic,,,,,,,,,generic,,,,,"0|i2swaz:",9223372036854775807,b27,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@2ec284e3,,,,,,,,,"2021-05-19 05:53;sgehwolf;jtreg test showing the issue:
https://github.com/jerboaa/jdk/blob/jdk-8267397-test/test/jdk/java/security/Provider/AddRemove.java

Fails with:

----------System.out:(3/156)----------
doPreCheck == false
Testing EncryptedPrivateKeyInfo foo provider after dyn-add... PASSED.
Testing EncryptedPrivateKeyInfo foo provider after dyn-remove...
----------System.err:(13/938)----------
java.lang.RuntimeException: Test failed! Foo provider recognized even though it has been removed
        at AddRemove.main(AddRemove.java:74)
        at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
        at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:78)
        at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
        at java.base/java.lang.reflect.Method.invoke(Method.java:568)
        at com.sun.javatest.regtest.agent.MainWrapper$MainThread.run(MainWrapper.java:127)
        at java.base/java.lang.Thread.run(Thread.java:831)

If I flip the run arguments around to do an availability check before the provider is added, I see this failure:
doPreCheck == true
Testing EncryptedPrivateKeyInfo foo provider before it's loaded... PASSED.
Testing EncryptedPrivateKeyInfo foo provider after dyn-add...
----------System.err:(18/1069)----------
java.lang.RuntimeException: Test failed!
        at AddRemove.main(AddRemove.java:68)
        at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
        at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:78)
        at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
        at java.base/java.lang.reflect.Method.invoke(Method.java:568)
        at com.sun.javatest.regtest.agent.MainWrapper$MainThread.run(MainWrapper.java:127)
        at java.base/java.lang.Thread.run(Thread.java:831)
Caused by: java.security.NoSuchAlgorithmException: unrecognized algorithm name: FOOBAR
        at java.base/sun.security.x509.AlgorithmId.get(AlgorithmId.java:470)
        at java.base/javax.crypto.EncryptedPrivateKeyInfo.<init>(EncryptedPrivateKeyInfo.java:139)
        at AddRemove.main(AddRemove.java:65)
        ... 6 more
;;;","2021-06-09 10:22;valeriep;Need to reset the cache when new provider list is set.;;;","2021-06-14 13:41;roboduke;Changeset: f69e2d56
Author:    Valerie Peng <valeriep@openjdk.org>
Date:      2021-06-14 20:40:26 +0000
URL:       https://git.openjdk.java.net/jdk17/commit/f69e2d5651f239209543bc1daf707a1c1114f6e5
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
ENTER key press on editable TableView throws NPE,JDK-8267392,5049885,Bug,Closed,JDK,JDK,software,duke,,,P4,Fixed,aghaisas,webbuggrp,webbuggrp,2021-05-18 14:32,2023-07-17 13:28,2023-10-01 09:57,2021-05-21 04:59,jfx17,,,,,,,jfx17,javafx,,0,dcspn,reproducer-yes,webbug,,,,,,,,,,,"ADDITIONAL SYSTEM INFORMATION :
Windows 10
Java16 with: 
- JavaFX11
- JavaFX11.0.2
- JavaFX16
- JavaFX17-ea+9

A DESCRIPTION OF THE PROBLEM :
When ENTER is pressed on an editable TableView right after it is shown, a NP is thrown.
This is because the code does not check, if the current focused cell belongs to a table column. 

When an editable TableView is initially shown, the first row is focused (not selected), but no particular column is focused, which makes the focused table column effectively false.

STEPS TO FOLLOW TO REPRODUCE THE PROBLEM :
Run the attached code. Press Enter, when the UI (with the table) is visible.
A NP is thrown.

EXPECTED VERSUS ACTUAL BEHAVIOR :
EXPECTED -
The row is selected.
ACTUAL -
Nullpointer:

Exception in thread ""JavaFX Application Thread"" java.lang.NullPointerException: Cannot invoke ""javafx.scene.control.TableColumnBase.isEditable()"" because the return value of ""javafx.scene.control.TablePositionBase.getTableColumn()"" is null
	at com.sun.javafx.scene.control.behavior.TableViewBehaviorBase.activate(TableViewBehaviorBase.java:898)
	at com.sun.javafx.scene.control.inputmap.InputMap.handle(InputMap.java:274)
	at com.sun.javafx.event.CompositeEventHandler$NormalEventHandlerRecord.handleBubblingEvent(CompositeEventHandler.java:247)
	at com.sun.javafx.event.CompositeEventHandler.dispatchBubblingEvent(CompositeEventHandler.java:80)
	at com.sun.javafx.event.EventHandlerManager.dispatchBubblingEvent(EventHandlerManager.java:234)
	at com.sun.javafx.event.EventHandlerManager.dispatchBubblingEvent(EventHandlerManager.java:191)
	at com.sun.javafx.event.CompositeEventDispatcher.dispatchBubblingEvent(CompositeEventDispatcher.java:59)
	at com.sun.javafx.event.BasicEventDispatcher.dispatchEvent(BasicEventDispatcher.java:58)
	at com.sun.javafx.event.EventDispatchChainImpl.dispatchEvent(EventDispatchChainImpl.java:114)
	at com.sun.javafx.event.BasicEventDispatcher.dispatchEvent(BasicEventDispatcher.java:56)
	at com.sun.javafx.event.EventDispatchChainImpl.dispatchEvent(EventDispatchChainImpl.java:114)
	at com.sun.javafx.event.BasicEventDispatcher.dispatchEvent(BasicEventDispatcher.java:56)
	at com.sun.javafx.event.EventDispatchChainImpl.dispatchEvent(EventDispatchChainImpl.java:114)
	at com.sun.javafx.event.EventUtil.fireEventImpl(EventUtil.java:74)
	at com.sun.javafx.event.EventUtil.fireEvent(EventUtil.java:54)
	at javafx.event.Event.fireEvent(Event.java:198)
	at javafx.scene.Scene$KeyHandler.process(Scene.java:4069)
	at javafx.scene.Scene.processKeyEvent(Scene.java:2126)
	at javafx.scene.Scene$ScenePeerListener.keyEvent(Scene.java:2594)
	at com.sun.javafx.tk.quantum.GlassViewEventHandler$KeyEventNotification.run(GlassViewEventHandler.java:217)
	at com.sun.javafx.tk.quantum.GlassViewEventHandler$KeyEventNotification.run(GlassViewEventHandler.java:149)
	at java.base/java.security.AccessController.doPrivileged(AccessController.java:391)
	at com.sun.javafx.tk.quantum.GlassViewEventHandler.lambda$handleKeyEvent$1(GlassViewEventHandler.java:248)
	at com.sun.javafx.tk.quantum.QuantumToolkit.runWithoutRenderLock(QuantumToolkit.java:413)
	at com.sun.javafx.tk.quantum.GlassViewEventHandler.handleKeyEvent(GlassViewEventHandler.java:247)
	at com.sun.glass.ui.View.handleKeyEvent(View.java:547)
	at com.sun.glass.ui.View.notifyKey(View.java:971)
	at com.sun.glass.ui.win.WinApplication._runLoop(Native Method)
	at com.sun.glass.ui.win.WinApplication.lambda$runLoop$3(WinApplication.java:174)
	at java.base/java.lang.Thread.run(Thread.java:831)

---------- BEGIN SOURCE ----------
import javafx.application.Application;
import javafx.beans.property.SimpleStringProperty;
import javafx.collections.FXCollections;
import javafx.scene.Scene;
import javafx.scene.control.TableColumn;
import javafx.scene.control.TableView;
import javafx.scene.layout.StackPane;
import javafx.stage.Stage;

public class Main extends Application {
    @Override
    public void start(Stage primaryStage) {
        TableView<String> tableView = new TableView<>();
        tableView.setEditable(true);

        TableColumn<String, String> tableColumn = new TableColumn<>(""column"");
        tableColumn.setCellValueFactory(data -> new SimpleStringProperty(data.getValue()));
        tableView.setItems(FXCollections.observableArrayList(""1"", ""2"", ""3""));
        tableView.getColumns().add(tableColumn);

        primaryStage.setScene(new Scene(new StackPane(tableView), 800, 600));
        primaryStage.show();
    }

    public static void main(String[] args) {
        launch(args);
    }
}
---------- END SOURCE ----------

CUSTOMER SUBMITTED WORKAROUND :
Setting the focus programmatically via: 
tableView.getFocusModel().focus(row, column)

FREQUENCY : always


",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8186553,,,,,,,JDK-8089652,JDK-8186553,,,,,,,,,,,,,,generic,,,,,,,,,generic,,,,,"0|i2svx7:",9223372036854775807,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@67282485,,,,,,,,,"2021-05-19 06:56;fastegal;this will fix the ""worsened"" (since fx9) behaviour described in the related JDK-8089652;;;","2021-05-21 04:59;roboduke;Changeset: 58439103
Author:    Marius Hanl <mariushanl@web.de>
Committer: Ajit Ghaisas <aghaisas@openjdk.org>
Date:      2021-05-21 11:59:02 +0000
URL:       https://git.openjdk.java.net/jfx/commit/5843910333ebdbc4ea14033461e980b0d0692ca8
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
macOS: Option+Up/Down Arrow don't traverse to beginning/end of line in JTextArea,JDK-8267374,5049369,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,psadhukhan,webbuggrp,webbuggrp,2021-05-12 04:51,2022-09-08 07:27,2023-10-01 09:57,2022-09-05 03:50,10,16.0.1,17,18,8u231,9,,20,client-libs,,0,additional-information-not-received,bigsur,dcspks,macos,macos11,reproducer-yes,sn_121,sn_122,webbug,,,,,"ADDITIONAL SYSTEM INFORMATION :
MacOS Big Sur v11.2.3

A DESCRIPTION OF THE PROBLEM :
Text components used to have a platform-specific key combination that moved the cursor one word at a time. This no longer works on the Macintosh. (I am unable to test its operation on other operating systems.) On the Mac it is option-arrow, while on windows and Unix it's control-arrow (left or right). Typing these in a JTextField, JTextArea or similar components no longer move the cursor from word to word. Instead, they do nothing. This make their behavior non-standard. On Windows, Mac, and Unix, in all standard applications, the specified modifier with the left and right arrows move the cursor one word at a time, allowing you to move faster through the text. This broke somewhere between Java 8 and Java 10.

REGRESSION : Last worked in version 8

STEPS TO FOLLOW TO REPRODUCE THE PROBLEM :
Run the test case. Click on the text in either field. Try the arrow keys with no modifiers. Try them with the shift and control (Windows/Unix) or option (Mac) modifiers. Be sure to release all modifier keys between tests. (More on this in the workaround section.) With no modifiers, the cursor will move from character to character, as it should, and with the shift key down, the arrow keys extend the selection, as they should. But typing the arrow keys with the control or option modifier down (Option, on the Mac) does nothing. Note that control-shift or option-shift should extend the selection one word at a time.

EXPECTED VERSUS ACTUAL BEHAVIOR :
EXPECTED -
Typing ctrl-left or ctrl-right (Windows, Unix) or option-left or option-right (Mac) should move the cursor by a word at a time. The platform modifier with the up and down arrow keys should also move the cursor to the top or bottom of the text field.
ACTUAL -
The option-left and option-right keys (Mac) don't move the arrow key at all. Neither do option-up or option-down keys. I don't have a machine to test on Windows or Unix, but it should be tested there, too.

---------- BEGIN SOURCE ----------
import java.awt.GridLayout;
import javax.swing.JFrame;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.WindowConstants;

import static javax.swing.JScrollPane.*;

/**
 * <p>Created by IntelliJ IDEA.
 * <p>Date: 4/28/21
 * <p>Time: 9:10 PM
 *
 * @author Miguel Mu\u00f1oz
 */
@SuppressWarnings({""HardCodedStringLiteral"", ""StringConcatenation"", ""MagicNumber"", ""TextBlockMigration"", ""HardcodedLineSeparator""})
public class AltArrowBug extends JPanel {
	public static void main(String[] args) {
		JFrame frame = new JFrame(""Alt-Arrow Bug"");
		frame.add(new AltArrowBug());
		frame.pack();
		frame.setDefaultCloseOperation(WindowConstants.DISPOSE_ON_CLOSE);
		frame.setVisible(true);
	}
	
	private AltArrowBug() {
		super(new GridLayout(0, 1));
		
		JTextArea textArea = new JTextArea(20, 40);
		textArea.setText(""The Alt-Arrow keys (Left and right) should jump from word to word. "" +
				""This is what they used to do in Java 8 and before. But starting somewhere from "" +
				""Java 9 to Java 10, this stopped working. Now Alt-Arrow doesn't do anything. There "" +
				""are two exceptions to this rule. First, if you type shift-Arrow (left or right), "" +
				""then add the option key without lifting the shift key, then release the shift key "" +
				""without releasing the alt key, then the alt-arrow key will start to work. At this "" +
				""point, you can switch back and forth between shift-arrow, shift-alt-arrow, and "" +
				""alt-arrow, and the alt-arrow keys will work properly, as long as you keep at least "" +
				""one modifier key down. It will last until you release all modifier keys. Of course, "" +
				""when you are typing shift-alt-arrow keys, it will both extend the selection and jump "" +
				""through the text one word at a time, as it should.\n"" +
				""I should point out that the alt-arrow behavior that no longer works is completely "" +
				""standard behavior for text editors and text fields in all applications, on Windows, "" +
				""Mac, and Linux.\n"" +
				""(This text field is edible.)"");
		add(wrap(textArea));
		
		JTextArea textAreaReadOnly = new JTextArea(10, 40);
		textAreaReadOnly.setEditable(false);
		textAreaReadOnly.setText(""The behavior is the same for non-editable text fields like this one. "" +
				""Try shift-arrow, alt-arrow, and shift-alt-arrow in this field. "" +
				""In both fields meta-arrow works fine, moving the text to the beginning or end of the line. "" +
				""But the control-arrow keys don't do anything, which is not standard. Elsewhere, control-arrow "" +
				""does the same thing as meta-arrow. I don't know if this ever worked.\n"");
		add(wrap(textAreaReadOnly));
	}
	
	private JScrollPane wrap(JTextArea textArea) {
		textArea.setWrapStyleWord(true);
		textArea.setLineWrap(true);
		return new JScrollPane(textArea, VERTICAL_SCROLLBAR_ALWAYS, HORIZONTAL_SCROLLBAR_NEVER);
	}
}
---------- END SOURCE ----------

CUSTOMER SUBMITTED WORKAROUND :
There are keystroke combinations that will temporarily activate the proper option-arrow behavior that are described in the text displayed by the test case. The simplest workaround is this: When holding down the option key, briefly press and release the shift key. Then, without releasing the option key, start typing the arrow keys. They will move the cursor one word at a time. This will last until you release all the modifier keys. 
If you want to use shift-arrow to extend the selection by one word at a time, it will work if you press the option key first, then add the shift key. But it won't work in the reverse order. (Most users probably won't stumble across this workaround.)
The workaround doesn't work in Java 12 but works in Java 15. I don't know about 13 and 14.

FREQUENCY : always


",,,,,,,,,,,,,,,,,,,,,,,,JDK-8291468,,,JDK-8285989,,,,,,,,,,,,,,"2021-05-19 01:26;pardesha;AltArrowBug.java;https://bugs.openjdk.org/secure/attachment/94680/AltArrowBug.java",,,,,,,,,,,x86_64,,,,,,,,,os_x,,,,,"0|i2ssqr:",9223372036854775807,b14,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@568a5b31,,,,,,,,,"2021-05-19 01:26;pardesha;Per description, platform-specific key combination that moved cursor one word a time, fails to work on macOS between Java 8 and Java 10. 
Issue is reported with JDK 16.0.1 and macOS Big Sur v11.2.3.
Mac key combination: Option + Arrow (Left or Right)
Windows and Unix: Ctrl + Arrow (Left or Right)

Checked this for the reported versions with macOS 10.15.x, 10.11.x, Windows 10 and the issue does not reproduce as stated. Typing Ctrl + Left or Right Arrow Key (Windows, Unix) or Option + Left or Right Key (macOS) always move the cursor by a word at a time as required. Even the platform modifier with the up and down arrow keys move the cursor to the top or bottom of the text field.

Written back to the submitter requesting status with OS version/platform other then reported. Meanwhile, This still need to be checked for macOS 11.x though.;;;","2021-07-29 21:10;pardesha;We haven't received additional input from submitter. However checked this for macOS 11.4 with JDK 16.0.2 and 11.0.12 as well as 8u301 and could confirm the issue in particular case (using Option + Up/Down) key combination. The expected outcome to move between lines using platform modifier keys and up/down does not work at all.;;;","2022-06-21 20:36;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/9230
Date: 2022-06-22 03:28:17 +0000;;;","2022-09-05 03:50;dukebot;Changeset: 955baa3c
Author:    Prasanta Sadhukhan <psadhukhan@openjdk.org>
Date:      2022-09-05 10:47:48 +0000
URL:       https://git.openjdk.org/jdk/commit/955baa3c44805538df5f95ccc91d2d5a08c85b81
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Concurrent gtests take too long,JDK-8267371,5049919,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,stuefe,stuefe,stuefe,2021-05-19 01:23,2021-05-26 17:28,2023-10-01 09:57,2021-05-19 10:55,17,,,,,,,17,hotspot,,0,,,,,,,,,,,,,,"On my machine, over more than half of the total runtime of gtests is currently used by just three tests:

- VirtualSpace.os_reserve_space_concurrent_vm
- VirtualSpace.os_virtual_space_concurrent_vm
- os_linux.reserve_memory_special_concurrent_vm

These tests do concurrent tests with 30 threads, with a timeout of 15 seconds each.

Since we run the gtests with several configurations (see hotspot/jtreg/gtests) these numbers multiply, which especially hurts when run as part of tier1. I think we can safely reduce the timeouts, still have good test coverage and recover some of the gtest runtime.
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2sw4r:",9223372036854775807,b24,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,,,"2021-05-19 10:55;roboduke;Changeset: 9820f3d4
Author:    Thomas Stuefe <stuefe@openjdk.org>
Date:      2021-05-19 17:55:05 +0000
URL:       https://git.openjdk.java.net/jdk/commit/9820f3d480aa2e6813596710348b2057a8c2a572
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
[Vector API] Fix several crashes after JDK-8256973,JDK-8267370,5049917,Bug,Closed,JDK,JDK,software,duke,,,P2,Fixed,jiefu,jiefu,jiefu,2021-05-19 01:21,2021-08-06 00:38,2023-10-01 09:57,2021-05-20 16:59,17,,,,,,,17,hotspot,,0,hs-comp-triaged,oracle-triage-11,oracle-triage-17,tencent-interest,vectorapi,,,,,,,,,"The following tests crashes with -XX:UseAVX=1
```
jdk/incubator/vector/Byte64VectorLoadStoreTests.java
jdk/incubator/vector/Byte128VectorLoadStoreTests.java
jdk/incubator/vector/Short128VectorLoadStoreTests.java
jdk/incubator/vector/Int128VectorLoadStoreTests.java
jdk/incubator/vector/FloatMaxVectorLoadStoreTests.java
jdk/incubator/vector/ShortMaxVectorLoadStoreTests.java
jdk/incubator/vector/IntMaxVectorLoadStoreTests.java
jdk/incubator/vector/ByteMaxVectorLoadStoreTests.java
jdk/incubator/vector/Float128VectorLoadStoreTests.java
jdk/incubator/vector/Short64VectorLoadStoreTests.java
```

```
#
# A fatal error has been detected by the Java Runtime Environment:
#
#  Internal Error (/home/jvm/jdk/src/hotspot/cpu/x86/assembler_x86.cpp:4127), pid=90500, tid=90542
#  Error: assert(VM_Version::supports_avx2()) failed
#
# JRE version: OpenJDK Runtime Environment (17.0) (fastdebug build 17-internal+0-adhoc.jvm.jdk)
# Java VM: OpenJDK 64-Bit Server VM (fastdebug 17-internal+0-adhoc.jvm.jdk, mixed mode, sharing, compressed oops, compressed class ptrs, g1 gc, linux-amd64)
# Problematic frame:
# V  [libjvm.so+0x5cb1a4]  Assembler::vpmovmskb(RegisterImpl*, XMMRegisterImpl*)+0xe4
#

Current CompileTask:
C2:   2698  732             jdk.incubator.vector.FloatVector::checkMaskFromIndexSize (16 bytes)

Stack: [0x00007f55811b2000,0x00007f55812b3000],  sp=0x00007f55812adbf0,  free space=1006k
Native frames: (J=compiled Java code, j=interpreted, Vv=VM code, C=native code)
V  [libjvm.so+0x5cb1a4]  Assembler::vpmovmskb(RegisterImpl*, XMMRegisterImpl*)+0xe4
V  [libjvm.so+0x7cc492]  C2_MacroAssembler::vector_mask_operation(int, RegisterImpl*, XMMRegisterImpl*, XMMRegisterImpl*, XMMRegisterImpl*, RegisterImpl*, int, int)+0x92
V  [libjvm.so+0x412653]  vmask_first_or_last_true_avxNode::emit(CodeBuffer&, PhaseRegAlloc*) const+0x233
V  [libjvm.so+0x13cd3cf]  PhaseOutput::scratch_emit_size(Node const*)+0x41f
V  [libjvm.so+0x13c4634]  PhaseOutput::shorten_branches(unsigned int*)+0x2a4
V  [libjvm.so+0x13d514a]  PhaseOutput::Output()+0xc3a
V  [libjvm.so+0x95efe3]  Compile::Code_Gen()+0x443
V  [libjvm.so+0x966554]  Compile::Compile(ciEnv*, ciMethod*, int, bool, bool, bool, bool, DirectiveSet*)+0x18e4
V  [libjvm.so+0x7cda0a]  C2Compiler::compile_method(ciEnv*, ciMethod*, int, bool, DirectiveSet*)+0x10a
V  [libjvm.so+0x9749f6]  CompileBroker::invoke_compiler_on_method(CompileTask*)+0xc96
V  [libjvm.so+0x975598]  CompileBroker::compiler_thread_loop()+0x4b8
V  [libjvm.so+0x17c038a]  JavaThread::thread_main_inner()+0x2fa
V  [libjvm.so+0x17c062d]  JavaThread::run()+0x23d
V  [libjvm.so+0x17c5158]  Thread::call_run()+0xf8
V  [libjvm.so+0x13af08e]  thread_native_entry(Thread*)+0x10e
```",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8267519,,,JDK-8256973,,,,,,,,,,,,,,,,,,,x86,,,,,,,,,generic,,,,,"0|i2sw4b:",9223372036854775807,b24,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,Verified,,"2021-05-19 08:09;epavlova;Please see also https://bugs.openjdk.java.net/browse/JDK-8267294
;;;","2021-05-19 16:12;jiefu;OK.
Will do it after jdk-mainline bugs are all fixed.;;;","2021-05-20 16:53;jiefu;Improve the priority just as JDK-8267519;;;","2021-05-20 16:59;roboduke;Changeset: 7a63ff70
Author:    Jie Fu <jiefu@openjdk.org>
Date:      2021-05-20 23:59:12 +0000
URL:       https://git.openjdk.java.net/jdk/commit/7a63ff70c8eed6c5bfad5655f0f4fa2281b4e104
;;;","2021-05-21 01:07;thartmann;ILW = Assert during C2 compilation (regression), vector tests with UseAVX=1 or if AVX 2 is not supported, no workaround = HLH = P2;;;","2021-05-21 07:56;dcubed;Copied from JDK-8267519:

The following 20 tests fail in the JDK17 CI:

jdk/incubator/vector/ShortMaxVectorTests.java
jdk/incubator/vector/ShortMaxVectorLoadStoreTests.java
jdk/incubator/vector/Short64VectorTests.java
jdk/incubator/vector/Short64VectorLoadStoreTests.java
jdk/incubator/vector/Short128VectorLoadStoreTests.java
jdk/incubator/vector/Short128VectorTests.java
jdk/incubator/vector/IntMaxVectorTests.java
jdk/incubator/vector/IntMaxVectorLoadStoreTests.java
jdk/incubator/vector/Int128VectorTests.java
jdk/incubator/vector/Int128VectorLoadStoreTests.java
jdk/incubator/vector/FloatMaxVectorTests.java
jdk/incubator/vector/FloatMaxVectorLoadStoreTests.java
jdk/incubator/vector/Float128VectorTests.java
jdk/incubator/vector/Float128VectorLoadStoreTests.java
jdk/incubator/vector/ByteMaxVectorTests.java
jdk/incubator/vector/ByteMaxVectorLoadStoreTests.java
jdk/incubator/vector/Byte64VectorTests.java
jdk/incubator/vector/Byte64VectorLoadStoreTests.java
jdk/incubator/vector/Byte128VectorTests.java
jdk/incubator/vector/Byte128VectorLoadStoreTests.java

Here's a snippet from the ShortMaxVectorTests.java log file:

test ShortMaxVectorTests.maskFirstTrueShortMaxVectorTestsSmokeTest(mask[i % 2]): success
# To suppress the following error report, specify this argument
# after -XX: or in .hotspotrc: SuppressErrorAt=/assembler_x86.cpp:4127
#
# A fatal error has been detected by the Java Runtime Environment:
#
# Internal Error (/System/Volumes/Data/mesos/work_dir/slaves/40f4774a-f408-4e28-8432-1004a7782450-S58621/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/3caa83b3-9a4e-4091-8c2c-6887e4568f4a/runs/6f95b5b7-a21f-40bf-8ce4-3b5e147e7011/workspace/open/src/hotspot/cpu/x86/assembler_x86.cpp:4127), pid=60280, tid=23043
# Error: assert(VM_Version::supports_avx2()) failed
#
# JRE version: Java(TM) SE Runtime Environment (17.0+24) (fastdebug build 17-ea+24-LTS-2082)
# Java VM: Java HotSpot(TM) 64-Bit Server VM (fastdebug 17-ea+24-LTS-2082, compiled mode, sharing, compressed oops, compressed class ptrs, g1 gc, bsd-amd64)
# Core dump will be written. Default location: core.60280
#
# An error report file with more information is saved as:
# /opt/mesos/slaves/3c846bae-ce30-4a97-93ee-9fef4497ccb6-S24398/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/c9e70c14-672d-4cee-b63a-d89666a31823/runs/74719376-4d1f-4ca4-9ee8-ed98469fcee3/testoutput/test-support/jtreg_open_test_jdk_jdk_incubator_vector/scratch/2/hs_err_pid60280.log
#
# Compiler replay data is saved as:
# /opt/mesos/slaves/3c846bae-ce30-4a97-93ee-9fef4497ccb6-S24398/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/c9e70c14-672d-4cee-b63a-d89666a31823/runs/74719376-4d1f-4ca4-9ee8-ed98469fcee3/testoutput/test-support/jtreg_open_test_jdk_jdk_incubator_vector/scratch/2/replay_pid60280.log
#
# If you would like to submit a bug report, please visit:
# https://bugreport.java.com/bugreport/crash.jsp
#
----------System.err:(1/55)----------

Here's the crashing thread's stack:

--------------- T H R E A D ---------------

Current thread (0x00007fc2bf80de20): JavaThread ""C2 CompilerThread0"" daemon [_thread_in_native, id=23043, stack(0x00007000070ef000,0x00007000071ef000)]


Current CompileTask:
C2: 54335 7215 b jdk.incubator.vector.ShortMaxVector$ShortMaxMask::firstTrue (20 bytes)

Stack: [0x00007000070ef000,0x00007000071ef000], sp=0x00007000071ea910, free space=1006k
Native frames: (J=compiled Java code, j=interpreted, Vv=VM code, C=native code)
V [libjvm.dylib+0x11006dc] VMError::report_and_die(int, char const*, char const*, __va_list_tag*, Thread*, unsigned char*, void*, void*, char const*, int, unsigned long)+0x6dc
V [libjvm.dylib+0x1100cfb] VMError::report_and_die(Thread*, void*, char const*, int, char const*, char const*, __va_list_tag*)+0x3b
V [libjvm.dylib+0x5f4e7d] report_vm_error(char const*, int, char const*, char const*, ...)+0xdd
V [libjvm.dylib+0x2f40e4] Assembler::vpmovmskb(RegisterImpl*, XMMRegisterImpl*)+0x44
V [libjvm.dylib+0x48d6d2] C2_MacroAssembler::vector_mask_operation(int, RegisterImpl*, XMMRegisterImpl*, XMMRegisterImpl*, XMMRegisterImpl*, RegisterImpl*, int, int)+0xc2
V [libjvm.dylib+0xf10a0] vmask_first_or_last_true_avxNode::emit(CodeBuffer&, PhaseRegAlloc*) const+0x500
V [libjvm.dylib+0xe3d192] PhaseOutput::scratch_emit_size(Node const*)+0x302
V [libjvm.dylib+0xe31f6b] PhaseOutput::shorten_branches(unsigned int*)+0x4eb
V [libjvm.dylib+0xe316dd] PhaseOutput::Output()+0xb5d
V [libjvm.dylib+0x59d2c5] Compile::Code_Gen()+0x5d5
V [libjvm.dylib+0x59a272] Compile::Compile(ciEnv*, ciMethod*, int, bool, bool, bool, bool, DirectiveSet*)+0x1952
V [libjvm.dylib+0x48e59b] C2Compiler::compile_method(ciEnv*, ciMethod*, int, bool, DirectiveSet*)+0x10b
V [libjvm.dylib+0x5b5fc1] CompileBroker::invoke_compiler_on_method(CompileTask*)+0x801
V [libjvm.dylib+0x5b55a2] CompileBroker::compiler_thread_loop()+0x322
V [libjvm.dylib+0x1060f7d] JavaThread::thread_main_inner()+0x26d
V [libjvm.dylib+0x105dff7] Thread::call_run()+0x177
V [libjvm.dylib+0xe21cff] thread_native_entry(Thread*)+0x14f
C [libsystem_pthread.dylib+0x6109] _pthread_start+0x94
C [libsystem_pthread.dylib+0x1b8b] thread_start+0xf ;;;","2021-05-21 08:58;epavlova;The bug for macos issue is https://bugs.openjdk.java.net/browse/JDK-8267294;;;","2021-06-10 00:49;jiefu;[~epavlova] see https://github.com/openjdk/panama-vector/pull/91;;;",,,,,,,,,,,,,,,,,,,,,,,,,,
Remove mask.incr which is introduced by JDK-8256973,JDK-8267364,5049910,Bug,Resolved,JDK,JDK,software,duke,,,P5,Fixed,jiefu,jiefu,jiefu,2021-05-19 00:28,2021-06-02 01:56,2023-10-01 09:57,2021-05-19 00:43,17,,,,,,,17,hotspot,,0,cleanup,hs-comp-triaged,oracle-triage-11,oracle-triage-17,tencent-interest,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8256973,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2sw2r:",9223372036854775807,b23,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2021-05-19 00:41;thartmann;ILW = LLL = P5;;;","2021-05-19 00:43;roboduke;Changeset: 49543831
Author:    Jie Fu <jiefu@openjdk.org>
Date:      2021-05-19 07:43:12 +0000
URL:       https://git.openjdk.java.net/jdk/commit/4954383168422a6ba2be8cda5535f90829d97ef8
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
build breaks with -Werror option on micro benchmark added for JDK-8256973,JDK-8267357,5049902,Bug,Resolved,JDK,JDK,software,duke,,,P1,Fixed,jbhateja,dholmes,dholmes,2021-05-18 23:05,2021-07-15 10:11,2023-10-01 09:57,2021-05-19 02:59,17,,,,,,,17,hotspot,,0,hs-comp-triaged,noreg-build,oracle-triage-11,oracle-triage-17,tier1,,,,,,,,,"The new test:

test/micro/org/openjdk/bench/jdk/incubator/vector/MaskQueryOperationsBenchmark.java

is failing to compile on all platforms:

[2021-05-19T05:45:29,302Z] /opt/mach5/mesos/work_dir/slaves/3c846bae-ce30-4a97-93ee-9fef4497ccb6-S79388/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/09b663e8-27ed-43a0-8088-d43b44df79f8/runs/bff63285-4385-4893-b711-25562609e505/workspace/open/test/micro/org/openjdk/bench/jdk/incubator/vector/MaskQueryOperationsBenchmark.java:100: warning: [unchecked] unchecked method invocation: method fromArray in class VectorMask is applied to given types
[2021-05-19T05:45:29,306Z]         bmask   = VectorMask.fromArray(bspecies, mask_arr, 0);
[2021-05-19T05:45:29,306Z]                                       ^
[2021-05-19T05:45:29,306Z]   required: VectorSpecies<E>,boolean[],int
[2021-05-19T05:45:29,306Z]   found:    VectorSpecies,boolean[],int
[2021-05-19T05:45:29,306Z]   where E is a type-variable:
[2021-05-19T05:45:29,306Z]     E extends Object declared in method <E>fromArray(VectorSpecies<E>,boolean[],int)
[2021-05-19T05:45:29,306Z] /opt/mach5/mesos/work_dir/slaves/3c846bae-ce30-4a97-93ee-9fef4497ccb6-S79388/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/09b663e8-27ed-43a0-8088-d43b44df79f8/runs/bff63285-4385-4893-b711-25562609e505/workspace/open/test/micro/org/openjdk/bench/jdk/incubator/vector/MaskQueryOperationsBenchmark.java:100: warning: [unchecked] unchecked conversion
[2021-05-19T05:45:29,306Z]         bmask   = VectorMask.fromArray(bspecies, mask_arr, 0);
[2021-05-19T05:45:29,306Z]                                        ^
[2021-05-19T05:45:29,306Z]   required: VectorSpecies<E>
[2021-05-19T05:45:29,306Z]   found:    VectorSpecies
[2021-05-19T05:45:29,306Z]   where E is a type-variable:
[2021-05-19T05:45:29,306Z]     E extends Object declared in method <E>fromArray(VectorSpecies<E>,boolean[],int)
[2021-05-19T05:45:29,307Z] /opt/mach5/mesos/work_dir/slaves/3c846bae-ce30-4a97-93ee-9fef4497ccb6-S79388/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/09b663e8-27ed-43a0-8088-d43b44df79f8/runs/bff63285-4385-4893-b711-25562609e505/workspace/open/test/micro/org/openjdk/bench/jdk/incubator/vector/MaskQueryOperationsBenchmark.java:101: warning: [unchecked] unchecked method invocation: method fromArray in class VectorMask is applied to given types
[2021-05-19T05:45:29,307Z]         smask   = VectorMask.fromArray(sspecies, mask_arr, 0);
[2021-05-19T05:45:29,307Z]                                       ^
[2021-05-19T05:45:29,307Z]   required: VectorSpecies<E>,boolean[],int
[2021-05-19T05:45:29,307Z]   found:    VectorSpecies,boolean[],int
[2021-05-19T05:45:29,307Z]   where E is a type-variable:
[2021-05-19T05:45:29,307Z]     E extends Object declared in method <E>fromArray(VectorSpecies<E>,boolean[],int)
[2021-05-19T05:45:29,307Z] /opt/mach5/mesos/work_dir/slaves/3c846bae-ce30-4a97-93ee-9fef4497ccb6-S79388/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/09b663e8-27ed-43a0-8088-d43b44df79f8/runs/bff63285-4385-4893-b711-25562609e505/workspace/open/test/micro/org/openjdk/bench/jdk/incubator/vector/MaskQueryOperationsBenchmark.java:101: warning: [unchecked] unchecked conversion
[2021-05-19T05:45:29,307Z]         smask   = VectorMask.fromArray(sspecies, mask_arr, 0);
[2021-05-19T05:45:29,307Z]                                        ^
[2021-05-19T05:45:29,307Z]   required: VectorSpecies<E>
[2021-05-19T05:45:29,307Z]   found:    VectorSpecies
[2021-05-19T05:45:29,307Z]   where E is a type-variable:
[2021-05-19T05:45:29,307Z]     E extends Object declared in method <E>fromArray(VectorSpecies<E>,boolean[],int)
[2021-05-19T05:45:29,307Z] /opt/mach5/mesos/work_dir/slaves/3c846bae-ce30-4a97-93ee-9fef4497ccb6-S79388/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/09b663e8-27ed-43a0-8088-d43b44df79f8/runs/bff63285-4385-4893-b711-25562609e505/workspace/open/test/micro/org/openjdk/bench/jdk/incubator/vector/MaskQueryOperationsBenchmark.java:102: warning: [unchecked] unchecked method invocation: method fromArray in class VectorMask is applied to given types
[2021-05-19T05:45:29,307Z]         imask   = VectorMask.fromArray(ispecies, mask_arr, 0);
[2021-05-19T05:45:29,307Z]                                       ^
[2021-05-19T05:45:29,307Z]   required: VectorSpecies<E>,boolean[],int
[2021-05-19T05:45:29,307Z]   found:    VectorSpecies,boolean[],int
[2021-05-19T05:45:29,307Z]   where E is a type-variable:
[2021-05-19T05:45:29,307Z]     E extends Object declared in method <E>fromArray(VectorSpecies<E>,boolean[],int)
[2021-05-19T05:45:29,307Z] /opt/mach5/mesos/work_dir/slaves/3c846bae-ce30-4a97-93ee-9fef4497ccb6-S79388/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/09b663e8-27ed-43a0-8088-d43b44df79f8/runs/bff63285-4385-4893-b711-25562609e505/workspace/open/test/micro/org/openjdk/bench/jdk/incubator/vector/MaskQueryOperationsBenchmark.java:102: warning: [unchecked] unchecked conversion
[2021-05-19T05:45:29,307Z]         imask   = VectorMask.fromArray(ispecies, mask_arr, 0);
[2021-05-19T05:45:29,307Z]                                        ^
[2021-05-19T05:45:29,307Z]   required: VectorSpecies<E>
[2021-05-19T05:45:29,316Z]   found:    VectorSpecies
[2021-05-19T05:45:29,316Z]   where E is a type-variable:
[2021-05-19T05:45:29,316Z]     E extends Object declared in method <E>fromArray(VectorSpecies<E>,boolean[],int)
[2021-05-19T05:45:29,316Z] /opt/mach5/mesos/work_dir/slaves/3c846bae-ce30-4a97-93ee-9fef4497ccb6-S79388/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/09b663e8-27ed-43a0-8088-d43b44df79f8/runs/bff63285-4385-4893-b711-25562609e505/workspace/open/test/micro/org/openjdk/bench/jdk/incubator/vector/MaskQueryOperationsBenchmark.java:103: warning: [unchecked] unchecked method invocation: method fromArray in class VectorMask is applied to given types
[2021-05-19T05:45:29,316Z]         lmask   = VectorMask.fromArray(lspecies, mask_arr, 0);
[2021-05-19T05:45:29,316Z]                                       ^
[2021-05-19T05:45:29,316Z]   required: VectorSpecies<E>,boolean[],int
[2021-05-19T05:45:29,316Z]   found:    VectorSpecies,boolean[],int
[2021-05-19T05:45:29,316Z]   where E is a type-variable:
[2021-05-19T05:45:29,316Z]     E extends Object declared in method <E>fromArray(VectorSpecies<E>,boolean[],int)
[2021-05-19T05:45:29,316Z] /opt/mach5/mesos/work_dir/slaves/3c846bae-ce30-4a97-93ee-9fef4497ccb6-S79388/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/09b663e8-27ed-43a0-8088-d43b44df79f8/runs/bff63285-4385-4893-b711-25562609e505/workspace/open/test/micro/org/openjdk/bench/jdk/incubator/vector/MaskQueryOperationsBenchmark.java:103: warning: [unchecked] unchecked conversion
[2021-05-19T05:45:29,317Z]         lmask   = VectorMask.fromArray(lspecies, mask_arr, 0);
[2021-05-19T05:45:29,317Z]                                        ^
[2021-05-19T05:45:29,317Z]   required: VectorSpecies<E>
[2021-05-19T05:45:29,317Z]   found:    VectorSpecies
[2021-05-19T05:45:29,317Z]   where E is a type-variable:
[2021-05-19T05:45:29,317Z]     E extends Object declared in method <E>fromArray(VectorSpecies<E>,boolean[],int)
[2021-05-19T05:45:29,317Z] error: warnings found and -Werror specified
[2021-05-19T05:45:40,107Z] 1 error
[2021-05-19T05:45:40,109Z] 8 warnings
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8256973,,,,,,,,,,,,,,,,,,,,,,,,,,17,,,,,,,"0|i2sw0z:",9223372036854775807,b23,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2021-05-19 00:33;thartmann;ILW = Build broken, tier1, no workaround = HHH = P1;;;","2021-05-19 00:41;jbhateja;Hi Tobias,
Pre-commit tests shows tier1 passing on all platforms.
https://github.com/jatin-bhateja/jdk/actions/runs/855676344
;;;","2021-05-19 00:53;thartmann;Looks like that test is not build via github actions. As David described above, it fails in all our builds though.
;;;","2021-05-19 00:56;thartmann;And in general, pre-commit testing is just a minimal set of tests. For such complex changes, more testing is required (Oracle engineers can help with that).;;;","2021-05-19 01:23;jbhateja;Pull request created, kindly approve.

https://github.com/openjdk/jdk/pull/4108
;;;","2021-05-19 02:59;roboduke;Changeset: 88b11423
Author:    Jatin Bhateja <jbhateja@openjdk.org>
Date:      2021-05-19 09:58:48 +0000
URL:       https://git.openjdk.java.net/jdk/commit/88b114235c5716ea43c55a9c4bc886bf5bcf4b42
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,
runtime/cds/SharedBaseAddress.java fails on x86_32 due to Unrecognized VM option 'UseCompressedOops',JDK-8267351,5049892,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,jiefu,jiefu,jiefu,2021-05-18 16:35,2021-05-24 16:42,2023-10-01 09:57,2021-05-19 00:18,,,,,,,,17,hotspot,,0,tencent-interest,,,,,,,,,,,,,"```
[STDERR]
Unrecognized VM option 'UseCompressedOops'
Did you mean '(+/-)CheckCompressedOops'? Error: Could not create the Java Virtual Machine.
Error: A fatal exception has occurred. Program will exit.

[2021-05-18T23:12:23.728258191Z] Waiting for completion for process 26997
[2021-05-18T23:12:23.728362797Z] Waiting for completion finished for process 26997
STDERR:
 stdout: [];
 stderr: [Unrecognized VM option 'UseCompressedOops'
Did you mean '(+/-)CheckCompressedOops'? Error: Could not create the Java Virtual Machine.
Error: A fatal exception has occurred. Program will exit.
]
 exitValue = 1

java.lang.RuntimeException: 'Loading classes to share' missing from stdout/stderr

        at jdk.test.lib.process.OutputAnalyzer.shouldContain(OutputAnalyzer.java:206)
        at jdk.test.lib.cds.CDSTestUtils.checkDump(CDSTestUtils.java:273)
        at jdk.test.lib.cds.CDSTestUtils.createArchiveAndCheck(CDSTestUtils.java:297)
        at SharedBaseAddress.main(SharedBaseAddress.java:86)
        at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
        at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
        at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
        at java.base/java.lang.reflect.Method.invoke(Method.java:568)
        at com.sun.javatest.regtest.agent.MainActionHelper$AgentVMRunnable.run(MainActionHelper.java:298)
        at java.base/java.lang.Thread.run(Thread.java:831)
```",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8265705,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2svyr:",9223372036854775807,b23,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,,,"2021-05-19 00:18;roboduke;Changeset: 3f883e8f
Author:    Jie Fu <jiefu@openjdk.org>
Date:      2021-05-19 07:17:13 +0000
URL:       https://git.openjdk.java.net/jdk/commit/3f883e8f0d8811e47999d7fbe3d9784f59d0ac09
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Archived old interface extends interface with default method causes crash,JDK-8267350,5049891,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,ccheung,iklam,iklam,2021-05-18 16:10,2021-05-26 17:29,2023-10-01 09:57,2021-05-20 14:04,17,,,,,,,17,hotspot,,0,cds,,,,,,,,,,,,,"V  [libjvm.so+0x1218078]  klassVtable::update_inherited_vtable(Thread*, methodHandle const&, int, int, GrowableArray<InstanceKlass*>*)+0x11b8
V  [libjvm.so+0x122327e]  klassVtable::initialize_vtable(GrowableArray<InstanceKlass*>*)+0xf8e
V  [libjvm.so+0x1225023]  klassVtable::initialize_vtable_and_check_constraints(Thread*)+0x1a3
V  [libjvm.so+0xe28182]  InstanceKlass::link_class_impl(Thread*)+0x5d2
V  [libjvm.so+0xe27c28]  InstanceKlass::link_class_impl(Thread*)+0x78
V  [libjvm.so+0xe27c28]  InstanceKlass::link_class_impl(Thread*)+0x78
V  [libjvm.so+0xe28b1e]  InstanceKlass::initialize_impl(Thread*)+0x5be
V  [libjvm.so+0xe55626]  InterpreterRuntime::_new(JavaThread*, ConstantPool*, int)+0x136
j  org.eclipse.emf.common.util.URI.<clinit>()V+0
v  ~StubRoutines::call_stub",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2svyj:",9223372036854775807,b24,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,,,"2021-05-19 17:42;ccheung;Call stack with slowdebug build:

Stack: [0x00007f875eff0000,0x00007f875f0f1000],  sp=0x00007f875f0ef1b0,  free space=1020k
Native frames: (J=compiled Java code, j=interpreted, Vv=VM code, C=native code)
V  [libjvm.so+0x8117a5]  Array<int>::at_put(int, int const&)+0x79
V  [libjvm.so+0xd521df]  klassVtable::update_inherited_vtable(Thread*, methodHandle const&, int, int, GrowableArray<InstanceKlass*>*)+0x749
V  [libjvm.so+0xd5120e]  klassVtable::initialize_vtable(GrowableArray<InstanceKlass*>*)+0x5ea
V  [libjvm.so+0xd52a76]  klassVtable::initialize_vtable_and_check_constraints(JavaThread*)+0x7c
V  [libjvm.so+0xa895d3]  InstanceKlass::link_class_impl(JavaThread*)+0x57d
V  [libjvm.so+0xa88f9f]  InstanceKlass::link_class(JavaThread*)+0x7f
V  [libjvm.so+0xa89af7]  InstanceKlass::initialize_impl(JavaThread*)+0x61
V  [libjvm.so+0xa88e90]  InstanceKlass::initialize(JavaThread*)+0x40
V  [libjvm.so+0xaabdef]  InterpreterRuntime::_new(JavaThread*, ConstantPool*, int)+0xfd
j  Main.main([Ljava/lang/String;)V+0;;;","2021-05-19 17:49;ccheung;This could be reproduced also with app class loader.

The scenario is that an ""old"" interface extends an interface which contains a default method.

The crash is during runtime when the _default_vtable_indices is being updated.

The _default_vtable_indices needs to be r/w for an ""old"" interface/class.;;;","2021-05-20 14:04;roboduke;Changeset: 1c7a1310
Author:    Calvin Cheung <ccheung@openjdk.org>
Date:      2021-05-20 21:03:13 +0000
URL:       https://git.openjdk.java.net/jdk/commit/1c7a1310d9985fd0ad05d901186eb0b6c0045d74
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
CDS record_linking_constraint asserts with unregistered class,JDK-8267347,5049887,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,iklam,iklam,iklam,2021-05-18 15:31,2021-06-07 15:10,2023-10-01 09:57,2021-05-24 14:55,17,,,,,,,17,hotspot,,0,cds,loader-constraint,,,,,,,,,,,,"In CDS terms, ""Unregistered classes"" are the archived classes that should be loaded by custom class loaders during runtime. Archiving of class loader constraints (JDK-8178349) should be disabled for such classes.

During CDS dump time (-Xshare:dump), unregistered classes are loaded by the boot loader (see also JDK-8261941). SystemDictionaryShared::record_linking_constraint doesn't properly recognize such classes, leading to the following assert.

#
#  Internal Error (/jdk2/quo/open/src/hotspot/share/classfile/systemDictionaryShared.cpp:1898), pid=14653, tid=14654
#  assert(klass_loader != __null) failed: should not be called for boot loader
#
# JRE version: Java(TM) SE Runtime Environment (17.0) (fastdebug build 17-internal+0-adhoc.iklam.open)
# Java VM: Java HotSpot(TM) 64-Bit Server VM (fastdebug 17-internal+0-adhoc.iklam.open, interpreted mode, tiered, compressed oops, compressed class ptrs, g1 gc, linux-amd64)
# Problematic frame:
# V  [libjvm.so+0x1841be4]  SystemDictionaryShared::record_linking_constraint(Symbol*, InstanceKlass*, Handle, Handle)+0x384
#
# Core dump will be written. Default location: Core dumps may be processed with ""/usr/share/apport/apport %p %s %c %d %P"" (or dumping to /jdk2/tmp/jtreg/work/scratch/core.14653)
#
# If you would like to submit a bug report, please visit:
#   https://bugreport.java.com/bugreport/crash.jsp
#

---------------  S U M M A R Y ------------

Command Line: -Xshare:dump -XX:SharedClassListFile=eclipse.list -XX:SharedArchiveFile=eclipse.jsa -Xlog:cds /home/iklam/eclipse/java-photon-R/eclipse/plugins/org.eclipse.equinox.launcher_1.5.0.v20180512-1130.jar

Host: ioilinux, Intel(R) Xeon(R) CPU E5-2665 0 @ 2.40GHz, 32 cores, 62G, Ubuntu 16.04.6 LTS
Time: Tue May 18 14:28:06 2021 PDT elapsed time: 2.643222 seconds (0d 0h 0m 2s)

---------------  T H R E A D  ---------------

Current thread (0x00007f0dc0028a90):  JavaThread ""main"" [_thread_in_vm, id=14654, stack(0x00007f0dca591000,0x00007f0dca692000)]

Stack: [0x00007f0dca591000,0x00007f0dca692000],  sp=0x00007f0dca68e1d0,  free space=1012k
Native frames: (J=compiled Java code, j=interpreted, Vv=VM code, C=native code)
V  [libjvm.so+0x1841be4]  SystemDictionaryShared::record_linking_constraint(Symbol*, InstanceKlass*, Handle, Handle)+0x384
V  [libjvm.so+0x182e942]  SystemDictionary::add_loader_constraint(Symbol*, Klass*, Handle, Handle)+0x2e2
V  [libjvm.so+0x182eb16]  SystemDictionary::check_signature_loaders(Symbol*, Klass*, Handle, Handle, bool)+0xb6
V  [libjvm.so+0x122599f]  klassItable::check_constraints(GrowableArray<Method*>*, Thread*)+0x56f
V  [libjvm.so+0x1226711]  klassItable::initialize_itable_and_check_constraints(Thread*)+0x1b1
V  [libjvm.so+0xe281d3]  InstanceKlass::link_class_impl(Thread*)+0x5f3
V  [libjvm.so+0x1448732]  MetaspaceShared::try_link_class(Thread*, InstanceKlass*)+0xf2
V  [libjvm.so+0x976b44]  ClassListParser::parse(Thread*)+0x6e4
V  [libjvm.so+0x14496d1]  MetaspaceShared::preload_classes(Thread*)+0x71
V  [libjvm.so+0x144bcd3]  MetaspaceShared::preload_and_dump_impl(Thread*)+0x13
V  [libjvm.so+0x144bf7b]  MetaspaceShared::preload_and_dump()+0x10b
V  [libjvm.so+0x18a009d]  Threads::create_vm(JavaVMInitArgs*, bool*)+0xa0d
V  [libjvm.so+0xfa5a78]  JNI_CreateJavaVM+0x98
C  [libjli.so+0x3a7f]  JavaMain+0x8f
C  [libjli.so+0x7ea9]  ThreadJavaMain+0x9
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8267958,,,,JDK-8267754,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2svxn:",9223372036854775807,b24,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,,,"2021-05-24 14:55;roboduke;Changeset: 209769b5
Author:    Ioi Lam <iklam@openjdk.org>
Date:      2021-05-24 21:52:13 +0000
URL:       https://git.openjdk.java.net/jdk/commit/209769b5ad462ce3dd47f18d93e12147730f8123
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
VM crashes during dumping classlist with -Xshare:dump option,JDK-8267345,5049884,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,minqi,ccheung,ccheung,2021-05-18 14:17,2021-05-27 04:26,2023-10-01 09:57,2021-05-20 08:28,16,,,,,,,16.0.2,hotspot,,0,,,,,,,,,,,,,,"VM crashes under special situation when both -Xshare:dump and -XX:DumpLoadedClassList options are specified.

Stack: [0x00007fc45d8ff000,0x00007fc45da00000],  sp=0x00007fc45d9fd168,  free space=1016k
Native frames: (J=compiled Java code, A=aot compiled Java code, j=interpreted, Vv=VM code, C=native code)
C  [libc.so.6+0x13fb6c]  __strncmp_sse42+0x2c
V  [libjvm.so+0xa95cc9]  InstanceKlass::print_class_load_logging(ClassLoaderData*, ModuleEntry const*, ClassFileStream const*) const+0x41
V  [libjvm.so+0x742612]  ClassFileParser::fill_instance_klass(InstanceKlass*, bool, ClassInstanceInfo const&, Thread*)+0xf74
V  [libjvm.so+0x7414e5]  ClassFileParser::create_instance_klass(bool, ClassInstanceInfo const&, Thread*)+0xdd
V  [libjvm.so+0xd968ce]  KlassFactory::create_from_stream(ClassFileStream*, Symbol*, ClassLoaderData*, ClassLoadInfo const&, Thread*)+0x32e
V  [libjvm.so+0xd9de55]  LambdaFormInvokers::reload_class(char*, ClassFileStream&, Thread*)+0x11f
V  [libjvm.so+0xd9dc30]  LambdaFormInvokers::regenerate_holder_classes(Thread*)+0x5a2
V  [libjvm.so+0xf0089c]  MetaspaceShared::preload_and_dump(Thread*)+0x37a
V  [libjvm.so+0x11baee3]  Threads::create_vm(JavaVMInitArgs*, bool*)+0x9af
V  [libjvm.so+0xb9a420]  JNI_CreateJavaVM_inner(JavaVM_**, void**, void*)+0xda
V  [libjvm.so+0xb9a725]  JNI_CreateJavaVM+0x32
C  [libjli.so+0x7664]  InitializeJVM+0x13d
C  [libjli.so+0x4252]  JavaMain+0xdc
C  [libjli.so+0xaf77]  ThreadJavaMain+0x27
",,,,,,,,,,,JDK-8267778,,,,,,,,,,,,,,,,,,,JDK-8267346,,,,,,,JDK-8247536,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2svwz:",9223372036854775807,b06,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,,,"2021-05-18 14:20;ccheung;The problem is in the InstanceKlass::log_to_classlist() 
https://github.com/openjdk/jdk16u/blob/e84e18580d764f612b9afaee7a470cde856a6bcc/src/hotspot/share/oops/instanceKlass.cpp#L4243

Sometimes the stream->source() could be NULL.

klass like java/lang/invoke/BoundMethodHandle$Species_D would have a NULL source.

This bug is not applicable to JDK 17.;;;","2021-05-18 15:34;iklam;This bug was introduced by JDK-8247536 in JDK 16.;;;","2021-05-18 22:17;iklam;Simple reproducer:

$ java -version
java version ""16"" 2021-03-16
Java(TM) SE Runtime Environment (build 16+36-2231)
Java HotSpot(TM) 64-Bit Server VM (build 16+36-2231, mixed mode, sharing)

$ java -Xshare:dump -XX:DumpLoadedClassList=foo.txt
#
# A fatal error has been detected by the Java Runtime Environment:
#
# SIGSEGV (0xb) at pc=0x00007f4a2417bd80, pid=9476, tid=9477
#
# JRE version: Java(TM) SE Runtime Environment (16.0+36) (build 16+36-2231)
# Java VM: Java HotSpot(TM) 64-Bit Server VM (16+36-2231, interpreted mode, tiered, compressed oops, g1 gc, linux-amd64)
# Problematic frame:
# V [libjvm.so+0x7d7d80] InstanceKlass::print_class_load_logging(ClassLoaderData*, ModuleEntry const*, ClassFileStream const*) const+0x850
#
...

Stack: [0x00007f4a256db000,0x00007f4a257dc000], sp=0x00007f4a257d9370, free space=1016k
Native frames: (J=compiled Java code, A=aot compiled Java code, j=interpreted, Vv=VM code, C=native code)
V [libjvm.so+0x7d7d80] InstanceKlass::print_class_load_logging(ClassLoaderData*, ModuleEntry const*, ClassFileStream const*) const+0x850
V [libjvm.so+0x554c1e] ClassFileParser::fill_instance_klass(InstanceKlass*, bool, ClassInstanceInfo const&, Thread*)+0xb9e
V [libjvm.so+0x554fd2] ClassFileParser::create_instance_klass(bool, ClassInstanceInfo const&, Thread*)+0x72
V [libjvm.so+0xa2080c] KlassFactory::create_from_stream(ClassFileStream*, Symbol*, ClassLoaderData*, ClassLoadInfo const&, Thread*)+0x1cc
V [libjvm.so+0xa2441e] LambdaFormInvokers::reload_class(char*, ClassFileStream&, Thread*)+0x7e
V [libjvm.so+0xa248d2] LambdaFormInvokers::regenerate_holder_classes(Thread*)+0x3d2
V [libjvm.so+0xb5adaf] MetaspaceShared::preload_and_dump(Thread*)+0x18f
V [libjvm.so+0xd846fb] Threads::create_vm(JavaVMInitArgs*, bool*)+0xaeb
V [libjvm.so+0x890191] JNI_CreateJavaVM+0x51
C [libjli.so+0x39bf] JavaMain+0x8f
C [libjli.so+0x7ec9] ThreadJavaMain+0x9;;;","2021-05-19 08:58;minqi;The failure is caused from lambda function generating, the use case is not common case. When -Xshare:dump, we often appoint a class list using -XX:SharedClassListFile not -XX:DumpLoadedClassList (The pre-step to collecting loaded classes). -Xshare:dump without -XX:SharedClassListFile in fact will regenerate the default archive. At regenerating the lambda invoker holder class, the source associates with stream is NULL --- it is generated on fly. To fix this, we can either backport 17 implementation or check the source, if it is NULL --- skip it. Since the loader is boot loader or platform loader, if source is NULL, it has to be some reason for it, like this case, it does not have a source with it. ;;;","2021-05-20 08:28;roboduke;Changeset: 5311c4d4
Author:    Yumin Qi <minqi@openjdk.org>
Date:      2021-05-20 15:28:08 +0000
URL:       https://git.openjdk.java.net/jdk16u/commit/5311c4d454bc30a357d0a066f8cb919d89792836
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
"macos attempt_reserve_memory_at(arg1, arg2, true) failure",JDK-8267341,5049875,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,gziemski,gziemski,gziemski,2021-05-18 12:03,2023-06-18 23:59,2023-10-01 09:57,2022-01-20 08:47,17,18,,,,,,19,hotspot,,0,intermittent,jdk17u-fix-request,jdk17u-fix-yes,jdk18u-fix-request,jdk18u-fix-SQE-OK,jdk18u-fix-yes,noreg-self,tier1,tier5,,,,,"A fix for JDK-8262952 (macos aarch64) involved using the following pattern:

     q = (address)os::attempt_reserve_memory_at((char*)q, stripe_len, executable);
     EXPECT_NE(q, (address)NULL);
     EXPECT_TRUE(os::commit_memory((char*)q, stripe_len, executable));

where previously it used to be

     q = (address)os::attempt_reserve_memory_at((char*)q, stripe_len);
     EXPECT_NE(q, (address)NULL);
     EXPECT_TRUE(os::commit_memory((char*)q, stripe_len, executable));

where the fix included the 3rd argument of attempt_reserve_memory_at(), which when omitted defaults to ""false"". This 3 arguments form of the API seems not to always work as expected on macos x64 according to the same test. It works fine locally for me though.

I'm pretty sure that I also ran it previously using Mach and it worked fine, so it looks like it fails sporadically.

We seemed to have uncovered a new bug on a different platform from that where the fix went in.

We should temporarily disable the test on macOS x64 (previously it was disabled on macOS aarch64) and fix the underlaying issue.",,,,,,,,,,,JDK-8280822,JDK-8281978,JDK-8280319,JDK-8310279,JDK-8304128,JDK-8304606,,,,,,,,,,,,,,,,,JDK-8267339,,,,JDK-8256844,JDK-8262952,JDK-8263464,,,,,,,,,,,,,x86_64,,,,,,,,,os_x,,,,,"0|i2svuz:",9223372036854775807,b07,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,,,"2021-05-18 14:55;gziemski;[ RUN ] os.release_multi_mappings_vm 
/System/Volumes/Data/mesos/work_dir/slaves/40f4774a-f408-4e28-8432-1004a7782450-S72018/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/d121418d-c63f-4d5c-a319-f6ddf0e9a648/runs/7a05ed6b-bbb9-4410-9b58-2d56c12a4884/workspace/open/test/hotspot/gtest/runtime/test_os.cpp:375: Failure 
Expected: (q) != ((address)__null), actual: NULL vs NULL 
/System/Volumes/Data/mesos/work_dir/slaves/40f4774a-f408-4e28-8432-1004a7782450-S72018/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/d121418d-c63f-4d5c-a319-f6ddf0e9a648/runs/7a05ed6b-bbb9-4410-9b58-2d56c12a4884/workspace/open/test/hotspot/gtest/runtime/test_os.cpp:376: Failure 
Value of: os::commit_memory((char*)q, stripe_len, executable) 
  Actual: false 
Expected: true 
/System/Volumes/Data/mesos/work_dir/slaves/40f4774a-f408-4e28-8432-1004a7782450-S72018/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/d121418d-c63f-4d5c-a319-f6ddf0e9a648/runs/7a05ed6b-bbb9-4410-9b58-2d56c12a4884/workspace/open/test/hotspot/gtest/runtime/test_os.cpp:375: Failure 
Expected: (q) != ((address)__null), actual: NULL vs NULL 
/System/Volumes/Data/mesos/work_dir/slaves/40f4774a-f408-4e28-8432-1004a7782450-S72018/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/d121418d-c63f-4d5c-a319-f6ddf0e9a648/runs/7a05ed6b-bbb9-4410-9b58-2d56c12a4884/workspace/open/test/hotspot/gtest/runtime/test_os.cpp:376: Failure 
Value of: os::commit_memory((char*)q, stripe_len, executable) 
  Actual: false 
Expected: true 
A 
B 
C 
[ FAILED ] os.release_multi_mappings_vm (0 ms) ;;;","2021-05-18 14:55;gziemski;The test passes locally on my laptop ran either in a suite (like in Mach5) or individually: 

------------------------------- 
The test run on its own: 

# make run-test TEST=gtest:os.release_multi_mappings_vm 
Building target 'run-test' in configuration 'macosx-x86_64-server-slowdebug' 
Test selection 'gtest:os.release_multi_mappings_vm', will run: 
* gtest:os.release_multi_mappings_vm/server 

Running test 'gtest:os.release_multi_mappings_vm/server' 
Note: Google Test filter = os.release_multi_mappings_vm* 
[==========] Running 1 test from 1 test suite. 
[----------] Global test environment set-up. 
[----------] 1 test from os 
[ RUN ] os.release_multi_mappings_vm 
A 
B 
C 
[ OK ] os.release_multi_mappings_vm (0 ms) 
[----------] 1 test from os (661 ms total) 

[----------] Global test environment tear-down 
[==========] 1 test from 1 test suite ran. (661 ms total) 
[ PASSED ] 1 test. 

------------------------------------------ 
The test run as a part of a suite: 

# make test TEST=test/hotspot/jtreg/:tier1_common 
Building target 'test' in configuration 'macosx-x86_64-server-slowdebug' 
Updating hotspot/variant-server/libjvm/gtest/libjvm.dylib due to 1 file(s) 
Test selection 'test/hotspot/jtreg/:tier1_common', will run: 
* jtreg:test/hotspot/jtreg:tier1_common 

Running test 'jtreg:test/hotspot/jtreg:tier1_common' 
Passed: gtest/MetaspaceGtests.java#balanced-no-ccs 
Passed: gtest/MetaspaceGtests.java#reclaim-none-debug 
Passed: gtest/MetaspaceGtests.java#reclaim-aggressive-ndebug 
Passed: gtest/MetaspaceGtests.java#balanced-with-guards 
Passed: sanity/BasicVMTest.java 
Passed: gtest/MetaspaceGtests.java#reclaim-aggressive-debug 
Passed: gtest/MetaspaceGtests.java#reclaim-none-ndebug 
Passed: gtest/GTestWrapper.java 
Test results: passed: 8;;;","2021-05-18 14:56;gziemski;The build where the change went in and which triggered this issue is jdk-17+23-2040 

The next build after that also shows the issue is jdk-17+23-2041 

However, the builds after that, i.e. jdk-17+23-2042, jdk-17+23-2043, jdk-17+23-2044, are fine, so the issue seems intermittent (?);;;","2021-05-19 09:17;dcubed;I had bumped this to P2 since it showed up in Tier1,
but then I realized that the failure is intermittent so
I've lowered it to a P3.;;;","2021-05-25 11:24;mseledtsov;ILW = HLM = P3;;;","2021-05-26 10:18;gziemski;Failing output:

[----------] 24 tests from os
[ RUN      ] os.page_size_for_region_vm
[       OK ] os.page_size_for_region_vm (0 ms)
[ RUN      ] os.page_size_for_region_aligned_vm
[       OK ] os.page_size_for_region_aligned_vm (0 ms)
[ RUN      ] os.page_size_for_region_alignment_vm
[       OK ] os.page_size_for_region_alignment_vm (0 ms)
[ RUN      ] os.page_size_for_region_unaligned_vm
[       OK ] os.page_size_for_region_unaligned_vm (0 ms)
[ RUN      ] os.test_random
[       OK ] os.test_random (0 ms)
[ RUN      ] os.page_size_for_region_with_zero_min_pages_vm_assert
[       OK ] os.page_size_for_region_with_zero_min_pages_vm_assert (288 ms)
[ RUN      ] os.test_print_hex_dump_vm
[       OK ] os.test_print_hex_dump_vm (8 ms)
[ RUN      ] os.vsnprintf_vm
[       OK ] os.vsnprintf_vm (0 ms)
[ RUN      ] os.snprintf_vm
[       OK ] os.snprintf_vm (0 ms)
[ RUN      ] os.jio_vsnprintf_vm
[       OK ] os.jio_vsnprintf_vm (0 ms)
[ RUN      ] os.jio_snprintf_vm
[       OK ] os.jio_snprintf_vm (0 ms)
[ RUN      ] os.release_multi_mappings_vm
/opt/mesos/slaves/40f4774a-f408-4e28-8432-1004a7782450-S3307/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/86d3796c-25f3-4e59-9897-a92cdb350ffe/runs/78ff8324-9446-4b98-9413-1611a93f71dd/workspace/open/test/hotspot/gtest/runtime/test_os.cpp:375: Failure
Expected: (q) != ((address)__null), actual: NULL vs NULL
/opt/mesos/slaves/40f4774a-f408-4e28-8432-1004a7782450-S3307/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/86d3796c-25f3-4e59-9897-a92cdb350ffe/runs/78ff8324-9446-4b98-9413-1611a93f71dd/workspace/open/test/hotspot/gtest/runtime/test_os.cpp:376: Failure
Value of: os::commit_memory((char*)q, stripe_len, executable)
  Actual: false
Expected: true
/opt/mesos/slaves/40f4774a-f408-4e28-8432-1004a7782450-S3307/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/86d3796c-25f3-4e59-9897-a92cdb350ffe/runs/78ff8324-9446-4b98-9413-1611a93f71dd/workspace/open/test/hotspot/gtest/runtime/test_os.cpp:375: Failure
Expected: (q) != ((address)__null), actual: NULL vs NULL
/opt/mesos/slaves/40f4774a-f408-4e28-8432-1004a7782450-S3307/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/86d3796c-25f3-4e59-9897-a92cdb350ffe/runs/78ff8324-9446-4b98-9413-1611a93f71dd/workspace/open/test/hotspot/gtest/runtime/test_os.cpp:376: Failure
Value of: os::commit_memory((char*)q, stripe_len, executable)
  Actual: false
Expected: true
A
B
C
[  FAILED  ] os.release_multi_mappings_vm (0 ms)
[ RUN      ] os.release_one_mapping_multi_commits_vm
A
B
C
D
[       OK ] os.release_one_mapping_multi_commits_vm (0 ms)
;;;","2021-05-27 11:10;gziemski;This is very hard to replicate, and the test seems somewhat optional on macOS, so let's not risk jdk17 build by the fix, as JDK-8262952 broke jdk17 build, and work on it later without the pressure.;;;","2021-08-04 06:21;dcubed;Here's a snippet from the jdk-18+9-408-tier1 sighting:

gtest/GTestWrapper.java

[ RUN      ] os.release_multi_mappings_vm
open/test/hotspot/gtest/runtime/test_os.cpp:376: Failure
Expected: (q) != ((address)__null), actual: NULL vs NULL
open/test/hotspot/gtest/runtime/test_os.cpp:377: Failure
Value of: os::commit_memory((char*)q, stripe_len, executable)
  Actual: false
Expected: true
open/test/hotspot/gtest/runtime/test_os.cpp:376: Failure
Expected: (q) != ((address)__null), actual: NULL vs NULL
open/test/hotspot/gtest/runtime/test_os.cpp:377: Failure
Value of: os::commit_memory((char*)q, stripe_len, executable)
  Actual: false
Expected: true
A
B
C
[  FAILED  ] os.release_multi_mappings_vm (0 ms);;;","2021-08-04 07:20;dcubed;There have been two Tier1 sightings of the gtest/GTestWrapper.java failure with the
os.release_multi_mappings_vm subtest in a row. Both of these Tier1 failures have
happened on test machines running Mac_OS_X_10.13.6.

This increase in failure frequency might be due to:

JDK-8256844 Make NMT late-initializable

which is the only changeset integrated in jdk-18+9-408-tier1. There is also this
related bug:

JDK-8263464 NMT: assert in gtest os.release_multi_mappings_vm

If this Tier1 failure reproduces again, we'll have to disable the os.release_multi_mappings_vm
subtest in order to reduce the noise in the CI.

[~gziemski] and [~stuefe], please investigate this change in behavior for this test.

Update: jdk-18+9-410-tier1 is GREEN so it's possible that the failures
in jdk-18+9-408-tier1 and jdk-18+9-409-tier1 were just bad luck...;;;","2021-08-04 10:00;stuefe;Hi Dan, 

JDK-8256844 ""Make NMT late-initializable""  - very unlikely to have anything to do with it. That one was about tracking malloced memory in NMT.
JDK-8263464 ""NMT: assert in gtest os.release_multi_mappings_vm"" - ditto. That one just uncovered a zero-day bug in NMT where it turned out it cannot deal with striped mappings. JDK-8256844 just deactivates the test if NMT is activated until the day JDK-8263464 is fixed.

The test does not particularly care for executable permissions; it just alternates the exec flag on the stripes in the mapping to prevent the kernel from folding the mappings. The same could also be done with protection bits (e.g. using os::protect_memory()).

It is also not terribly important for MacOS. We use striped allocations with large pages on Linux, and with NUMA on Windows. On MacOS I do not know any striped allocation. Arguably one could deactivate the test for mac os. I would only be just curious what causes the allocation failures. Could the amount of executable memory be limited on MacOS? The stripes are quite large (4M per stripe).

..Thomas

;;;","2021-08-04 12:30;dcubed;[~stuefe] - We've just had our third and fourth Tier1 failures. All four
failures today are on test machines that are running Mac_OS_X_10.13.6..;;;","2021-08-04 13:30;dcubed;The fix for:

JDK-8256844 Make NMT late-initializable

re-enabled the os.release_multi_mappings_vm subtest in
gtest/GTestWrapper.java on macOS-X64 as part of that patch.

The os.release_multi_mappings_vm subtest was previously
disabled for macOS-X64 by:

JDK-8267339 Temporarily disable os.release_multi_mappings_vm on macOS x64

and I've filed the following to disable it again for macOS-X64:

8271898 disable os.release_multi_mappings_vm on macOS-X64;;;","2022-01-04 11:50;roboduke;A pull request was submitted for review.

URL: https://git.openjdk.java.net/jdk/pull/6960
Date: 2022-01-04 19:18:45 +0000
;;;","2022-01-19 15:01;dcubed;[~gziemski] - Your PR was baselined on jdk/jdk so when you integrated this fix
it was pushed to jdk/jdk (JDK19) instead of JDK18. Do you plan to backport
this fix to JDK18?;;;","2022-01-20 08:33;gziemski;It's not high priority, only P3, and since it went to JDK19, instead of JDK18, then I guess I am good with that. Just have to fix the main/backport issue now...;;;","2022-01-20 08:43;gziemski;Changeset: d1efb0cc
Author: Gerard Ziemski <gziemski@openjdk.org>
Date: 2022-01-19 22:34:54 +0000
URL: https://git.openjdk.java.net/jdk/commit/d1efb0cc56127a40f2b23ccc608b27be2b39a389;;;","2022-01-20 08:44;gziemski;Fix was pushed while main bug was targeted to JDK18. Reset the main bug to fixed in JDK19 and copied the Robo Duke entry here.;;;","2022-01-25 06:51;hseigel;Fix Request  (18u)
Please approve this JDK-18u backport to prevent this test from failing in JDK-18u testing.  The fix adds Mac OS specific code to test if the os::reserve_memory() API is available on the system under test.  The fix is low risk because only code in the test is changed and the patch applied cleanly.

The backport was tested on Mac OS and other platforms using Mach5.;;;","2022-01-27 10:17;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk18u/pull/10
Date: 2022-01-27 18:11:38 +0000;;;","2023-06-16 00:25;goetz;Fix request [17u]

I backport this for parity with 17.0.8-oracle.
No risk, only a test change.
Trivial resolve.
SAP nightly testing passed.;;;","2023-06-16 01:22;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/1451
Date: 2023-06-16 07:17:10 +0000;;;","2023-06-16 01:36;goetz;The test fixed here was first disabled by JDK-8267339, which annotated the wrong Bug-ID in the comment. (17)
The disablement was wrongly removed by JDK-8256844, a larger change. (18, 17.0.5)
It was added again by JDK-8271898, this time using the correct Bug-ID. (18);;;",,,,,,,,,,,,
Use switch expression for VarHandle$AccessMode lookup,JDK-8267321,5049848,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,redestad,redestad,redestad,2021-05-18 06:58,2021-05-26 17:27,2023-10-01 09:57,2021-05-19 08:24,,,,,,,,17,core-libs,,0,cleanup,startup,,,,,,,,,,,,"JDK-8265079 changed jli.Invokers to pull in VarHandle$AccessMode on initialization, which then shows up as a small regression on a few startup tests due how AccessMode builds up a small HashMap on class initialization.

This map is read-only and could be converted to a switch expression. Doing so we marginally reduce the startup cost of initializing MHs/VHs and eliminate most of the regression from JDK-8265079",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8267277,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2svoz:",9223372036854775807,b24,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@1cfeb1de,,,,,,,,,"2021-05-19 08:24;roboduke;Changeset: 9760dba7
Author:    Claes Redestad <redestad@openjdk.org>
Date:      2021-05-19 15:23:44 +0000
URL:       https://git.openjdk.java.net/jdk/commit/9760dba71c07cf7b0df16590b3e84e23ad587621
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Loading some animated GIFs fails with ArrayIndexOutOfBoundsException: Index 4096 out of bounds for length 4096,JDK-8267314,5049840,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,jpereda,jpereda,jpereda,2021-05-18 04:14,2023-01-12 04:26,2023-10-01 09:57,2021-05-26 05:07,8,jfx11,jfx16,,,,,jfx17,javafx,,0,,,,,,,,,,,,,,"Some animated GIF files fail to load, and either throw:

java.lang.ArrayIndexOutOfBoundsException: Index 4096 out of bounds for length 4096
        at javafx.graphics/com.sun.javafx.iio.gif.GIFImageLoader2$LZWDecoder.readString(GIFImageLoader2.java:385)
        at javafx.graphics/com.sun.javafx.iio.gif.GIFImageLoader2.decodeImage(GIFImageLoader2.java:167)
        at javafx.graphics/com.sun.javafx.iio.gif.GIFImageLoader2.load(GIFImageLoader2.java:232)
        at javafx.graphics/com.sun.javafx.iio.ImageStorage.loadAll(ImageStorage.java:374)
        at javafx.graphics/com.sun.javafx.iio.ImageStorage.loadAll(ImageStorage.java:271)
        at javafx.graphics/com.sun.javafx.tk.quantum.PrismImageLoader2.loadAll(PrismImageLoader2.java:142)
        at javafx.graphics/com.sun.javafx.tk.quantum.PrismImageLoader2.<init>(PrismImageLoader2.java:77)
        at javafx.graphics/com.sun.javafx.tk.quantum.PrismImageLoader2$AsyncImageLoader.processStream(PrismImageLoader2.java:252)
        at javafx.graphics/com.sun.javafx.tk.quantum.PrismImageLoader2$AsyncImageLoader.processStream(PrismImageLoader2.java:225)
        at javafx.graphics/com.sun.javafx.runtime.async.AbstractRemoteResource.call(AbstractRemoteResource.java:109)
        at javafx.graphics/com.sun.javafx.tk.quantum.PrismImageLoader2$AsyncImageLoader.access$001(PrismImageLoader2.java:225)
        at javafx.graphics/com.sun.javafx.tk.quantum.PrismImageLoader2$AsyncImageLoader.lambda$call$0(PrismImageLoader2.java:259)
 
or simply show one/two frames but fail to load the rest.

The attached test shows the latter. 

In fact, with some debugging, it can be found that the same exception as above is happening but it is not thrown, because partially (as in just two frames) loaded gifs are allowed:

https://github.com/openjdk/jfx/blob/master/modules/javafx.graphics/src/main/java/com/sun/javafx/iio/ImageStorage.java#L376
","Any JavaFX version from 11 to 17-ea, any platform",,,,,,,,,,JDK-8268440,,,,,,,,,,,,,,,,JDK-8254681,,,JDK-8209560,,,,,,,,,,,"2021-05-18 04:07;jpereda;GifTest.java;https://bugs.openjdk.org/secure/attachment/94677/GifTest.java","2021-05-18 04:07;jpereda;fuller.gif;https://bugs.openjdk.org/secure/attachment/94676/fuller.gif",,,,,,,,,,,,,,,,,,,,,,,,"0|i2svn7:",9223372036854775807,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4143e3f7,,,,,,,,,"2021-05-18 06:28;jpereda;Adding some debug info to com.sun.javafx.iio.gif.GifImageLoader2, and for each frame LZWDecoder is used to read the stream, and find codes that have a maximum value of 4096. 
However, the length of the bytes to be decoded is not necessary limited to 4096.
Since the arrays used for this algorithm have a size of 4096, this causes the AIOOB exception, when a given frame requires larger arrays.

For reference, the given animated GIF has 62 frames, and for each frame, these are the number of ""tokens"" read after there is a clear code and counters are reset, and up until the read is complete:

Frame #0:
tableIndex = 0, accumTableIndex = 0
tableIndex = 258, accumTableIndex = 258
tableIndex = 4093, accumTableIndex = 4351
..
tableIndex = 4093, accumTableIndex = 49374
tableIndex = 4094, accumTableIndex = 53468
tableIndex = 3023

Frame #1:
tableIndex = 0, accumTableIndex = 0
tableIndex = 258, accumTableIndex = 258
tableIndex = 4093, accumTableIndex = 4351
...
tableIndex = 4093, accumTableIndex = 53467
tableIndex = 3599

Frame #2: (fails)
tableIndex = 0, accumTableIndex = 0
tableIndex = 258, accumTableIndex = 258
tableIndex = 4093, accumTableIndex = 4351
...
tableIndex = 4093, accumTableIndex = 53467
tableIndex = 4125

As shown, the maximum value of tableIndex for frame #2 (4125) is greater than the size of the arrays (4096) used.

There are other frames with even larger values (like frame #61: 5345).

It looks like a possible fix is just to provide that bigger size for the arrays in LZWDecoder, while it is not clear how much might be needed, or why there are frames that required it. 

 

;;;","2021-05-18 09:11;jpereda;Another animated GIFs that fail with the same issue (after some initial frames are loaded):

https://upload.wikimedia.org/wikipedia/commons/d/d3/Newtons_cradle_animation_book_2.gif
https://upload.wikimedia.org/wikipedia/commons/2/2c/Rotating_earth_%28large%29.gif
 ;;;","2021-05-18 10:18;jpereda;For reference, GIFImageLoader in Java Desktop uses the same size for LZW decoding:
https://github.com/openjdk/jdk/blob/master/src/java.desktop/share/classes/com/sun/imageio/plugins/gif/GIFImageReader.java#L967

and therefore the AIOOBE exception is the same, as reported here:
https://bugs.openjdk.java.net/browse/JDK-7132728

The included test https://bugs.openjdk.java.net/secure/attachment/21798/GIF_OverflowStringListTest.java
as well as the linked animated gifs fail currently with OpenJFX head, and work if the tables have a larger size.

There is another similar issue: https://bugs.openjdk.java.net/browse/JDK-7131823, in which the submitter proposes limiting tableIndex to 4096 (therefore all the tables will work with the current size of 4096).

I've tested this alternative and also works with the same tests. 

;;;","2021-05-20 14:30;kcr;[~jpereda] if you plan to fix this, please go ahead and assign it to yourself. ;;;","2021-05-26 05:07;roboduke;Changeset: 7b7050c4
Author:    Jose Pereda <jpereda@openjdk.org>
Date:      2021-05-26 12:06:54 +0000
URL:       https://git.openjdk.java.net/jfx/commit/7b7050c46299c0e6771ae02fbb5ceaf22104d3e4
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
vmTestbase/gc/gctests/StringInternGC/StringInternGC.java eventually OOMEs,JDK-8267311,5049834,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,jiefu,jiefu,jiefu,2021-05-18 02:38,2021-06-07 15:13,2023-10-01 09:57,2021-05-25 15:46,17,,,,,,,17,hotspot,,0,tencent-interest,,,,,,,,,,,,,"Reproduce:
 - make test TEST=""vmTestbase/gc/gctests/StringInternGC/StringInternGC.java"" JTREG=""JOBS=26"" CONF=server-release

```
Exception in
gc.gctests.StringInternGC.StringInternGC$StringGenerator@59139e1d
java.lang.OutOfMemoryError: Java heap space
        at java.base/java.util.Arrays.copyOf(Arrays.java:3536)
        at java.base/java.lang.AbstractStringBuilder.ensureCapacityInternal(AbstractStringBuilder.java:228)
        at java.base/java.lang.AbstractStringBuilder.append(AbstractStringBuilder.java:802)
        at java.base/java.lang.StringBuffer.append(StringBuffer.java:420)
        at gc.gctests.StringInternGC.StringInternGC$StringGenerator.generateString(StringInternGC.java:57)
        at gc.gctests.StringInternGC.StringInternGC$StringGenerator.run(StringInternGC.java:63)
        at nsk.share.runner.ThreadsRunner$ManagedThread.run(ThreadsRunner.java:106)
        at java.base/java.lang.Thread.run(Thread.java:831)
```",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2svlv:",9223372036854775807,b24,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6b00f96c,,,,,,,,,"2021-05-25 15:46;roboduke;Changeset: a98e476c
Author:    Jie Fu <jiefu@openjdk.org>
Date:      2021-05-25 22:46:19 +0000
URL:       https://git.openjdk.java.net/jdk/commit/a98e476c0a5860dd2bd9e57aeceb1f724868c970
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
regenerate clang jextract binding,JDK-8267305,5049823,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,sundar,sundar,sundar,2021-05-18 02:22,2021-05-18 04:56,2023-10-01 09:57,2021-05-18 04:56,repo-panama,,,,,,,,tools,,0,,,,,,,,,,,,,,There have been many changes in foreign-abi and jextract tool. We've been manually updating clang binding in jextract repo. We have regenerate clang jextract binding using the latest jextract tool.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8267306,,,,,,,,,,,,,,,,,,,,,,generic,,,,,,,,,generic,,,,,"0|i2svjf:",9223372036854775807,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@2251e2f8,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
vmTestbase/vm/mlvm/anonloader/stress/oome/metaspace/Test.java fails when JTREG_JOBS > 25,JDK-8267293,5049800,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,jiefu,jiefu,jiefu,2021-05-17 16:06,2021-05-24 16:42,2023-10-01 09:57,2021-05-19 02:05,17,,,,,,,17,hotspot,,0,tencent-interest,,,,,,,,,,,,,"Reproduce:
 - make test TEST=""vmTestbase/vm/mlvm/anonloader/stress/oome/metaspace/Test.java"" JTREG=""JOBS=26""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8267404,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2sveb:",9223372036854775807,b23,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,,,"2021-05-18 11:07;mseledtsov;IWL = MLM = P4;;;","2021-05-19 02:05;roboduke;Changeset: 2d407e12
Author:    Jie Fu <jiefu@openjdk.org>
Date:      2021-05-19 09:03:53 +0000
URL:       https://git.openjdk.java.net/jdk/commit/2d407e12fac1bdf29d339754f234227894416426
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Fix gc/arguments/TestNewRatioFlag.java expectedNewSize calculation,JDK-8267271,5049774,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,sjohanss,enikitin,enikitin,2021-05-17 12:23,2022-06-10 02:52,2023-10-01 09:57,2021-06-16 01:59,17,,,,,,,17,hotspot,,0,11-bp,gc-parallel,jdk11u-fix-request,jdk11u-fix-yes,noreg-self,testbug,,,,,,,,"The test was started with ""-XX:+CreateCoredumpOnCrash -XX:+UseParallelGC -XX:+UseNUMA -XX:-UseCompressedOops""

The test and its child process' stack traces:

----------System.err:(22/1244)----------
 stdout: [];
 stderr: [Exception in thread ""main"" java.lang.RuntimeException: Expected young gen size is: 9961472, but observed new size is: 9437184
	at gc.arguments.TestNewRatioFlag$NewRatioVerifier.verifyPSNewRatio(TestNewRatioFlag.java:156)
	at gc.arguments.TestNewRatioFlag$NewRatioVerifier.main(TestNewRatioFlag.java:106)
]
 exitValue = 1

java.lang.RuntimeException: Expected to get exit value of [0]

	at jdk.test.lib.process.OutputAnalyzer.shouldHaveExitValue(OutputAnalyzer.java:474)
	at gc.arguments.TestNewRatioFlag.testNewRatio(TestNewRatioFlag.java:88)
	at gc.arguments.TestNewRatioFlag.main(TestNewRatioFlag.java:60)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:78)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at com.sun.javatest.regtest.agent.MainActionHelper$AgentVMRunnable.run(MainActionHelper.java:298)
	at java.base/java.lang.Thread.run(Thread.java:831)",,,,,,,,,,,JDK-8268931,JDK-8287665,JDK-8288193,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,aarch64,,,,,,,,,linux,,,,,"0|i2sv8j:",9223372036854775807,b27,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6b00f96c,,,,,,,,,"2021-05-19 07:14;tschatzl;Difference expected vs. actual is 512kb/MB. Some page size mismatch?;;;","2021-06-11 06:09;sjohanss;The problem is that the test doesn't work for all heap sizes. I can reproduce the problem on x86-64 by setting the heap size to 104m instead of 100m as the test originally uses. The problem seems to be that the way the expected value is calculated is not the same as what we have in the JVM. For some reason the current calculation works for some heap sizes and not for other it looks like.

The reason this fails on macos-aarch64 is that the default page size is 16k and this will generate a HeapAlignment of 8m (instead of 2m for 4k pages, or 32m with 64k pages). This alignment will force the heap to be 104m instead of the requested 100m, and the test fails.   ;;;","2021-06-16 01:59;roboduke;Changeset: 59de99d1
Author:    Stefan Johansson <sjohanss@openjdk.org>
Date:      2021-06-16 08:59:07 +0000
URL:       https://git.openjdk.java.net/jdk17/commit/59de99d11988b7f1ab20e323f3dc4d0d49e3b7a3
;;;","2022-06-09 04:38;goetz;Fix request [11u]

I backport this for parity with 11.0.17-oracle.
No risk, only a test change.
Clean backport.
Test passes.
SAP nightly testing passed.;;;","2022-06-09 04:48;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk11u-dev/pull/1138
Date: 2022-06-09 11:40:03 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
-XX:MaxRAMPercentage=0 is unreasonable for jtreg tests on many-core machines,JDK-8267246,5049743,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,jiefu,jiefu,jiefu,2021-05-17 06:18,2021-12-14 06:53,2023-10-01 09:57,2021-05-18 18:47,11,17,,,,,,17,infrastructure,,0,jdk11u-fix-request,jdk11u-fix-yes,tencent-interest,,,,,,,,,,,"vmTestbase/vm/mlvm/anonloader/stress/oome/metaspace/Test.java fails on our many-core machines due to `-XX:MaxRAMPercentage=0`.
This is because `MaxRAMPercentage` will be always 0 if JTREG_JOBS > 25 [1].

[1] https://github.com/openjdk/jdk/blob/master/make/RunTests.gmk#L741",,,,,,,,,,,JDK-8276911,,,,,,,,,,,,,,,,,,,,,,JDK-8278762,,,,JDK-8267983,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2sv1n:",9223372036854775807,b23,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@429c566,,,,,,,,,"2021-05-18 18:47;roboduke;Changeset: 0daec497
Author:    Jie Fu <jiefu@openjdk.org>
Date:      2021-05-19 01:46:23 +0000
URL:       https://git.openjdk.java.net/jdk/commit/0daec497fea8c048a9455e4ff331a9d8c4293a4b
;;;","2021-11-06 17:17;jiefu;Fix request

I'd like to backport this fix to jdk11u.
This is a noreg jtreg test config fix, no risk, and can be applied cleanly.

Thanks.;;;","2021-12-14 05:15;vkempik;Hello, I believe this have caused some regression.
I spotted it on one machine ( and not another one) when testing jep-391 backport
This patch results in vmoption -XX:MaxRamPercentage=6,25, before the patch the value was 6

in fact the issue is in type of floating point, it should be 6.25, not 6,25
THis is the error i'm getting:
Running test 'jtreg:test/hotspot/jtreg:tier1'
Improperly specified VM option 'MaxRAMPercentage=6,25'
Error: Could not create the Java Virtual Machine.
Error: A fatal exception has occurred. Program will exit.
failed to get JDK properties for /Users/tester/vkempik/jdk11u-dev/build/macosx-aarch64-normal-server-release/images/jdk/bin/java -XX:MaxRAMPercentage=6,25 -Djava.io.tmpdir=/Users/tester/vkempik/jdk11u-dev/build/macosx-aarch64-normal-server-release/test-support/jtreg_test_hotspot_jtreg_tier1/tmp -Djava.library.path=/Users/tester/vkempik/jdk11u-dev/build/macosx-aarch64-normal-server-release/images/test/hotspot/jtreg/native; exit code 1

Reverting the patch makes this go ok again, unset LANG helps too ( default LANG is)

LANG value is ru_RU.UTF-8
;;;","2021-12-14 05:50;jiefu;[~vkempik] Did you get the same bug with jdk18/19 ?

There are more than 1500+ failures due to non-US locale on our platforms.
Please see https://github.com/openjdk/jdk/blob/master/doc/testing.md#non-us-locale ;;;","2021-12-14 05:53;vkempik;I  haven't tried jdk18/19
I was working on JEP-391 backport to jdk11 and accidentially found it.
Were it some test running into issues with locale - i wouldn't mind. But it's the whole suite not being able to start due to the very recent change.;;;","2021-12-14 06:02;erikj;In mainline, since JDK 14, we export LC_ALL=C in spec.gmk, which is expected to cover everything in the build. This fix isn't in 11u. JDK-8065704 ;;;","2021-12-14 06:05;vkempik;i was running it locally with make run-test-tier1;;;","2021-12-14 06:19;jiefu;How about this patch?
[~vkempik] Does it work on your machine?

diff --git a/make/RunTests.gmk b/make/RunTests.gmk
index 7fa66eacff..bdbfa9e876 100644
--- a/make/RunTests.gmk
+++ b/make/RunTests.gmk
@@ -29,6 +29,9 @@ include $(SPEC)
 include MakeBase.gmk
 include FindTests.gmk
 
+# Make sure all shell commands are executed with the C locale
+export LC_ALL := C
+
 # We will always run multiple tests serially
 .NOTPARALLEL:;;;","2021-12-14 06:48;vkempik;Backporting JDK-8065704 to my jdk11u fork helps, I will go with PR for this.
https://github.com/openjdk/jdk11u-dev/pull/717;;;",,,,,,,,,,,,,,,,,,,,,,,,,
Bounded arena allocator doesn't work if bounded size > BLOCK_SIZE,JDK-8267240,5049734,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,mcimadamore,mcimadamore,mcimadamore,2021-05-17 04:36,2021-05-17 08:33,2023-10-01 09:57,2021-05-17 08:33,repo-panama,,,,,,,,tools,,0,foreign-memaccess+abi,,,,,,,,,,,,,"Since bounded and unbounded arena allocators share code, there is an issue when a bounded arena allocator has a bounded size > block size. In these cases, the shared implementation (which is for unbounded allocators) will attempt to fork the allocation onto a different segment, thus triggering an exception.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2suzn:",9223372036854775807,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@2251e2f8,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
ARM32: bad AD file in matcher.cpp after 8266810,JDK-8267237,5049728,Bug,Resolved,JDK,JDK,software,duke,,,P1,Fixed,cgo,cgo,cgo,2021-05-17 03:32,2021-07-15 10:06,2023-10-01 09:57,2021-05-18 00:31,17,,,,,,,17,hotspot,,0,hs-comp-triaged,oraclejdk-na,oracle-triage-17,,,,,,,,,,,"After JDK-8266810, many tier1 hotspot tests are failing:

#
# A fatal error has been detected by the Java Runtime Environment:
#
#  Internal Error (/home/cgo/dev/openjdk/jdk/src/hotspot/share/opto/matcher.cpp:1670), pid=2102, tid=2112
#  assert(false) failed: bad AD file
#
# JRE version: OpenJDK Runtime Environment (17.0+22) (fastdebug build 17-internal+22-ahead-24--644f28c0ead18a37d7996ec30b49718a2f6aa189)
# Java VM: OpenJDK Server VM (fastdebug 17-internal+22-ahead-24--644f28c0ead18a37d7996ec30b49718a2f6aa189, compiled mode, serial gc, linux-arm)
# Problematic frame:
# V  [libjvm.so+0xe873cc]  Matcher::Label_Root(Node const*, State*, Node*, Node*&)+0x784
#
# Core dump will be written. Default location: Core dumps may be processed with ""/usr/lib/systemd/systemd-coredump %P %u %g %s %t %c %h"" (or dumping to /home/microdoc/cgo/jdk/build/run-test-prebuilt/test-support/jtreg_test_hotspot_jtreg_compiler_c1_CCEMessageTest_java/scratch/core.2102)
#
# If you would like to submit a bug report, please visit:
#   https://bugreport.java.com/bugreport/crash.jsp
#

It seems that a small mistake has been made during the move:

Before the move, `Matcher::convL2FSupported` returned `false`:
https://git.openjdk.java.net/jdk/blob/88907bb81a5a67a51f32c36f6cd821c2488117eb/src/hotspot/cpu/arm/arm.ad#L1051

After the move, `convL2FSupported` returns `true`:
https://git.openjdk.java.net/jdk/blob/644f28c0ead18a37d7996ec30b49718a2f6aa189/src/hotspot/cpu/arm/matcher_arm.hpp#L142

See also in the commit:
https://git.openjdk.java.net/jdk/commit/644f28c0ead18a37d7996ec30b49718a2f6aa189#diff-4841b83b7eb100a1479eda1fd8af1517c5b7bf94c8ee1671748d8e117c83449cL1051
https://git.openjdk.java.net/jdk/commit/644f28c0ead18a37d7996ec30b49718a2f6aa189#diff-17e39555729422252835b46be4361e4a6c67dba4a6ba800d2fe3ef6f0f357fb3R142
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8266810,,,,,,,,,,,,,,,,,,,aarch32,,,,,,,,,linux,,,,,"0|i2suyb:",9223372036854775807,b23,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2021-05-17 06:02;thartmann;ILW = Assert during C2 compilation, many failures on aarch32, no workaround but disable C2 compilation = HHM = P1;;;","2021-05-18 00:31;roboduke;Changeset: b60975dd
Author:    Christoph Göttschkes <cgo@openjdk.org>
Committer: Tobias Hartmann <thartmann@openjdk.org>
Date:      2021-05-18 07:30:30 +0000
URL:       https://git.openjdk.java.net/jdk/commit/b60975dd85d62d38e3c13c87db611c6fd08dc698
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Versioned platform link in TestMemberSummary.java,JDK-8267236,5049727,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,hannesw,hannesw,hannesw,2021-05-17 03:05,2021-07-05 20:12,2023-10-01 09:57,2021-05-17 07:45,,,,,,,,17,tools,,0,noreg-self,ursqe-triaged,,,,,,,,,,,,"In JDK-8258602 a version-specific platform link has crept into `TestMemberSummary.java` (line 153, link to java.lang.String).

This will fail when the current version is bumped. The test should be run with the `--no-platform-links` option. ",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8258602,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2suy3:",9223372036854775807,b23,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@7900061a,,,,,,,,,"2021-05-17 07:45;roboduke;Changeset: ea368365
Author:    Hannes Wallnöfer <hannesw@openjdk.org>
Date:      2021-05-17 14:43:49 +0000
URL:       https://git.openjdk.java.net/jdk/commit/ea36836573d2ee1b734075596f1afb9b1302d6c6
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
[macos_aarch64] InterpreterRuntime::throw_pending_exception messing up LR results in crash,JDK-8267235,5049726,Bug,Closed,JDK,JDK,software,duke,,,P2,Fixed,vkempik,vkempik,vkempik,2021-05-17 03:05,2023-01-16 01:43,2023-10-01 09:57,2021-05-20 08:47,17,,,,,,,17,hotspot,,0,azul-interest,jdk11u-fix-request,jdk11u-fix-yes,jdk13u-fix-request,jdk13u-fix-yes,jdk15u-fix-request,jdk15u-fix-yes,jdk16u-fix-request,jdk16u-fix-SQE-ok,jdk16u-fix-yes,jdk8u-fix-request,jdk8u-fix-yes,noreg-hard,"I have found an issue in hotspot for macos_aarch64
it was sitting there since jep-391 integration, but only got discovered in macos 11.4beta

so, InterpreterRuntime::throw_pending_exception ends this way
libjvm.dylib`InterpreterRuntime::throw_pending_exception:
-> 0x105c67ecc <+268>: b   0x105fc099c        ; os::current_thread_enable_wx(WXMode)

it's destructor of ThreadWXEnable __wx(WXWrite, current) from JRT_ENTRY block

os::current_thread_enable_wx ends up calling pthread_jit_write_protect_np in same manner, but since 11.4b, pthread_jit_write_protect_np does pacibsp as it's very first instruction, making LR register poisoned with PAC signature:

libsystem_pthread.dylib`pthread_jit_write_protect_np:
-> 0x1888c84ec <+0>: pacibsp 
  0x1888c84f0 <+4>: stp  x29, x30, [sp, #-0x10]!
Lr before pacibsp:
   lr = 0x00000001279c1a5c
Lr after pacibsp
   lr = 0x74588001279c1a5c

after some time, this lr is passed to 
address SharedRuntime::raw_exception_handler_for_return_address
as return_address value 
(via forward exception stub)
 as a result, raw_exception_handler_for_return_address processes PAC-poisoined pointer and crashes at should_not_reach_here 

Dumping bad pointer with additional logging at the end of raw_exception_handler_for_return_address
reveals it's the same pointer:

No exception handler found for exception at 0x74588001279c1a5c - potential problems:

Happens only on release build, fastdebug build has some  additional code which prevents that.

While I believe the pacibsp  in arm64 ( not arm64e) is a bug of macos beta, it revealed another issue in jvm.
Update: not a macos bug, intended behaviour",,,,,,,,,,,JDK-8268614,JDK-8267537,JDK-8267526,JDK-8267622,JDK-8267790,JDK-8267780,JDK-8267607,,,,,,,,,,JDK-8267145,JDK-8268305,JDK-8271538,JDK-8266719,JDK-8267685,JDK-8268311,JDK-8267685,JDK-8268735,,,JDK-8268305,JDK-8271538,JDK-8268311,,,,,,,,,,,,,aarch64,,,,,,,,,os_x,,,,,"0|i2suxv:",9223372036854775807,b24,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,Not verified,,"2021-05-17 03:56;vkempik;Suggested fix/workaround:

diff --git a/src/hotspot/share/runtime/threadWXSetters.inline.hpp b/src/hotspot/share/runtime/threadWXSetters.inline.hpp
index 4465100c92a..32245fc5a47 100644
--- a/src/hotspot/share/runtime/threadWXSetters.inline.hpp
+++ b/src/hotspot/share/runtime/threadWXSetters.inline.hpp
@@ -38,7 +38,7 @@ public:
     _thread(thread),
     _old_mode(_thread ? _thread->enable_wx(new_mode) : WXWrite)
   { }
-  ~ThreadWXEnable() {
+  ~ThreadWXEnable() __attribute__ ((optnone)) {
     if (_thread) {
       _thread->enable_wx(_old_mode);
     }

it makes the end of  throw_pending_exception  look this way, and everything starting to work correctly.
000000000046799c        mov     x0, sp
00000000004679a0        bl      __ZN14ThreadWXEnableD1Ev
00000000004679a4        ldp     x29, x30, [sp, #0x20]   ; Latency: 4 #This line fixes this bug
00000000004679a8        ldp     x20, x19, [sp, #0x10]   ; Latency: 4
00000000004679ac        add     sp, sp, #0x30
00000000004679b0        ret;;;","2021-05-17 06:38;vkempik;It's probably one of aarch64 stubs which doesn't preserve LR register and expects it to be callee-saved. ( and it's not);;;","2021-05-17 10:38;vkempik;the issue is somewhere in 
address TemplateInterpreterGenerator::generate_native_entry(bool synchronized);
 
after line 1303:
  // Call the native method.
   __ blr(r10);

later in that function:

    __ MacroAssembler::call_VM(noreg,
                               CAST_FROM_FN_PTR(address,
                               InterpreterRuntime::throw_pending_exception));
    __ should_not_reach_here();

InterpreterRuntime::throw_pending_exception is optimized with tail-call recursion so much so that last function before return ( from throw_pending_exception) is pthread_jit_write_protect_np which
PAC-ing LR and making it bad for forward_exception_stub

;;;","2021-05-18 11:18;mseledtsov;ILW = HMM = P2;;;","2021-05-20 08:47;roboduke;Changeset: ca93399a
Author:    Vladimir Kempik <vkempik@openjdk.org>
Date:      2021-05-20 15:46:53 +0000
URL:       https://git.openjdk.java.net/jdk/commit/ca93399af103384e750dabf3abcc6e8392bcf3f4
;;;","2021-05-20 09:03;vkempik;Fix Request (15u): it would be good to have this fix in jdk15u-dev as well, it's effectively NO-OP on non-PAC platforms, on PAC platforms it restores LR to pre-PACed state. Applies clean;;;","2021-05-21 01:10;vkempik;Fix Request (13u): it would be good to have this fix in jdk13u-dev as well, it's effectively NO-OP on non-PAC platforms, on PAC platforms it restores LR to pre-PACed state. Applies clean
;;;","2021-05-21 02:22;vkempik;Fix Request (11u): This backport fixes issue with wrong assumption of LR being callee-saved register on aarch64. It would be good to have this fix in jdk11u-dev as well, it's effectively NO-OP on non-PAC platforms, on PAC platforms it restores LR to pre-PACed state. Applies clean;;;","2021-05-23 02:32;clanger;Can this be backported to 16u as well?;;;","2021-05-23 02:35;vkempik;Probably not, things can go to 16.0.2 only thru critical request as of now and this isn't critical enough for it. (and nobody has plans to backport mac_aarch64 to 16 anyway);;;","2021-05-23 02:43;clanger;Is that so? I haven't seen an announcement yet. And JDK-8266802 was just approved/pushed two days ago. So I think it's still open for 16.0.2...;;;","2021-05-23 02:50;vkempik;an example: https://bugs.openjdk.java.net/browse/JDK-8264786
bugs from 3 weeks ago was pushed after critical approval (CPU21_07-critical-approved label)

but anyway, this fix is important only for jdk versions where mac_aarch64 exists or planned, doing this for 16u is waste of time (considering its STS status) in my opinion.;;;","2021-05-23 03:08;clanger;JDK-8264786 hasn't been backported to jdk16u yet although it has been approved. I think those CPU21_07-critical... labels only apply to the Oracle release train. But sure, one might consider it being waste of time. However, since the Skara process is so neat now, I'll request it for 16. Shouldn't be much of an overhead.;;;","2021-05-23 03:09;clanger;Fix request (16u):
Backport requested for same reasons as 11.;;;","2021-05-24 11:27;vkempik;Fix Request (Openjdk 8u): This backport fixes issue with wrong assumption of LR being callee-saved register on aarch64. It would be good to have this fix in jdk8u-dev as well, it's effectively NO-OP on non-PAC platforms, on PAC platforms it restores LR to pre-PACed state. Applies clean;;;","2021-07-08 15:52;mseledtsov;I could not find a regression test with this issue. Reviewed the issue and assumed that it is too hard to create a regression test for this type of issue. Hence, assigning noreg-hard label.;;;",,,,,,,,,,,,,,,,,,
jshell feedback is incorrect when creating method with array varargs parameter,JDK-8267221,5049650,Bug,Closed,JDK,JDK,software,duke,,,P4,Fixed,jlahoda,webbuggrp,webbuggrp,2021-05-14 16:19,2021-06-15 02:42,2023-10-01 09:57,2021-05-26 04:12,11,14,16,17,,,,17,tools,,0,dcsad,reproducer-yes,webbug,,,,,,,,,,,"A DESCRIPTION OF THE PROBLEM :
The jshell feedback, such as ""created method test"", is incorrect when creating a method which has an array varargs parameter, e.g. `int[]... ints`.
Instead of showing `[]...` as parameter type only `[]` is shown.

Note that when using either only multi-dimensional arrays, e.g. `String[][]`, or varargs with non array component type, e.g. `String...`, the feedback is correct.

STEPS TO FOLLOW TO REPRODUCE THE PROBLEM :
Use the following code in jshell:
void test(int[]... ints) {}

EXPECTED VERSUS ACTUAL BEHAVIOR :
EXPECTED -
It should say:
> created method test(int[]...)
ACTUAL -
It says:
> created method test(int[])

",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,generic,,,,,,,,,generic,,,,,"0|i2sugz:",9223372036854775807,b24,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@ef6d34f,,,,,,,Verified,,"2021-05-16 23:16;adev;The issue is reproducible.

jshell>  void test(int[]... ints) {}
|  created method test(int[])

Instead of showing `[]...` as parameter type only `[]` is shown in jshell. ;;;","2021-05-26 04:12;roboduke;Changeset: f6322549
Author:    Jan Lahoda <jlahoda@openjdk.org>
Date:      2021-05-26 11:12:22 +0000
URL:       https://git.openjdk.java.net/jdk/commit/f632254943e335d0b4a76d03530309cd194b0813
;;;","2021-06-07 03:07;adev;Requested the submitter to check if the fix solves the problem. The latest JDK 17 can be downloaded from https://jdk.java.net/17/;;;","2021-06-15 02:42;adev;The submitter confirmed that the issue got resolved;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Javadoc method summary breaks when {@inheritDoc} from an empty parent,JDK-8267219,5049581,Bug,Closed,JDK,JDK,software,duke,,,P3,Fixed,hannesw,webbuggrp,webbuggrp,2021-05-13 19:39,2021-06-07 06:21,2023-10-01 09:57,2021-05-20 05:46,16,17,,,,,,17,tools,,0,17ea,dcsad,regression,reproducer-yes,webbug,,,,,,,,,"ADDITIONAL SYSTEM INFORMATION :
Tested on Windows 10, but the javadoc tool should be system-agnositic.

A DESCRIPTION OF THE PROBLEM :
Javadoc tool omits the last column to generate for method summary when a method {@inheritDoc} from a parent method without extra documentation.

When there is extra text, the problem seems to be gone; however, if there is no extra text but extra custom tags (I discovered this in an enviroment with custom taglets), the issue still exists.

This does not happen with Java 15.0.1, but happens with 16 and 17 ea (build) 21.

REGRESSION : Last worked in version 11.0.11

STEPS TO FOLLOW TO REPRODUCE THE PROBLEM :
Create Test.java and Daug.java with code supplied, and run ""javadoc *"" in the directory containing both files. Inspect the Daug.html file.

EXPECTED VERSUS ACTUAL BEHAVIOR :
EXPECTED -
The description column of Daug.act() should exist and be empty.
ACTUAL -
https://i.imgur.com/eepnG9x.png

The last-col of the summary for Daug.act() method is removed and the formatting of the table messed up

---------- BEGIN SOURCE ----------
public class Test {
	public void act() {}
	public void bark() {}
}

public class Daug extends Test {
	/**
	 * {@inheritDoc}
	 */
	@Override public void act() {}
	public void bite() {}
}
---------- END SOURCE ----------

FREQUENCY : always


",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"2021-05-16 22:46;adev;Daug.java;https://bugs.openjdk.org/secure/attachment/94652/Daug.java","2021-05-16 22:46;adev;Test.java;https://bugs.openjdk.org/secure/attachment/94653/Test.java","2021-05-17 20:44;adev;screenshot.png;https://bugs.openjdk.org/secure/attachment/94670/screenshot.png",,,,,,,,,generic,,,,,,,16.0.1,,generic,,,,,"0|i2su1n:",9223372036854775807,b24,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@7900061a,,,,,,,Verified,,"2021-05-16 22:22;adev;The issue is reproducible with JDK 16.0.1 onwards.
Reproducer is attached and can be reproduced using ""javadoc *"";;;","2021-05-20 05:46;roboduke;Changeset: 459abd56
Author:    liach <liach@users.noreply.github.com>
Committer: Hannes Wallnöfer <hannesw@openjdk.org>
Date:      2021-05-20 12:44:55 +0000
URL:       https://git.openjdk.java.net/jdk/commit/459abd561accc9f10456a9d63f7fa19c7f8e020e
;;;","2021-06-07 03:10;adev;Requested the submitter to check if the fix solves the problem. The latest JDK 17 can be downloaded from https://jdk.java.net/17/;;;","2021-06-07 06:21;adev;The submitter confirmed that the bug is not present anymore.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
"jdk/jfr/event/gc/collection/TestG1ParallelPhases.java fails with Not found phases\: StringDedupQueueFixup, StringDedupTableFixup",JDK-8267218,5049704,Bug,Resolved,JDK,JDK,software,duke,,,P2,Fixed,ayang,dholmes,dholmes,2021-05-16 22:14,2022-03-29 03:22,2023-10-01 09:57,2021-05-19 04:30,17,,,,,,,17,hotspot,,0,gc-g1,testbug,tier5,ursqe-triaged,,,,,,,,,,"----------System.err:(15/1349)----------
java.lang.RuntimeException: Compare events expected and received, Not found phases: StringDedupQueueFixup, StringDedupTableFixup, Not expected phases: : expected true, was false
	at jdk.test.lib.Asserts.fail(Asserts.java:594)
	at jdk.test.lib.Asserts.assertTrue(Asserts.java:486)
	at jdk.jfr.event.gc.collection.TestG1ParallelPhases.main(TestG1ParallelPhases.java:133)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at com.sun.javatest.regtest.agent.MainWrapper$MainThread.run(MainWrapper.java:127)
	at java.base/java.lang.Thread.run(Thread.java:831)
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8267133,,,,JDK-8254598,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2susz:",9223372036854775807,b23,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6b00f96c,,,,,,,,,"2021-05-17 04:05;tschatzl; JDK-8254598 forgot to remove these phases from the test.;;;","2021-05-19 04:30;roboduke;Changeset: 1b93b812
Author:    Albert Mingkun Yang <ayang@openjdk.org>
Date:      2021-05-19 11:29:27 +0000
URL:       https://git.openjdk.java.net/jdk/commit/1b93b81270770c208efc8c9bb10bb460636008b7
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
cpuinfo_segv is incorrectly triaged as execution protection violation on x86_32,JDK-8267213,5049699,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,jiefu,jiefu,jiefu,2021-05-16 20:46,2021-06-07 15:12,2023-10-01 09:57,2021-05-25 04:52,17,,,,,,,17,hotspot,,0,tencent-interest,,,,,,,,,,,,,"runtime/CommandLine/OptionsValidation/TestOptionsWithRanges.java fails on x86_32.
```
#
# A fatal error has been detected by the Java Runtime Environment:
#
#  Internal Error (/home/jdk/src/hotspot/share/utilities/globalDefinitions.hpp:419), pid=43339, tid=43342
#  assert(left >= right) failed: avoid underflow
#
# JRE version:  (17.0) (fastdebug build )
# Java VM: OpenJDK Server VM (fastdebug 17-internal+0-adhoc..jdk, mixed mode, sharing, tiered, g1 gc, linux-x86)
# Problematic frame:
# V  [libjvm.so+0x1103c18]  PosixSignals::pd_hotspot_signal_handler(int, siginfo_t*, ucontext_t*, JavaThread*)+0x568
#
# Core dump will be written. Default location: /home/jdk/JTwork/scratch/core.43339
#
#

---------------  S U M M A R Y ------------

Command Line: -XX:-ZapUnusedHeapArea -XX:+UseG1GC -XX:+UnlockDiagnosticVMOptions -XX:+UnlockExperimentalVMOptions -XX:UnguardOnExecutionViolation=1 optionsvalidation.JVMStartup

Host: 07b04771ecd3, Intel(R) Xeon(R) Platinum 8255C CPU @ 2.50GHz, 96 cores, 250G, Ubuntu 18.04.5 LTS
Time: Mon May 17 01:39:25 2021 UTC elapsed time: 0.008225 seconds (0d 0h 0m 0s)

---------------  T H R E A D  ---------------

Current thread (0xf5717618):  JavaThread ""Unknown thread"" [_thread_in_vm, id=43342, stack(0xf58bb000,0xf590c000)]

Stack: [0xf58bb000,0xf590c000],  sp=0xf59099f0,  free space=314k
Native frames: (J=compiled Java code, j=interpreted, Vv=VM code, C=native code)
V  [libjvm.so+0x1103c18]  PosixSignals::pd_hotspot_signal_handler(int, siginfo_t*, ucontext_t*, JavaThread*)+0x568
V  [libjvm.so+0x13722fe]  JVM_handle_linux_signal+0x14e
V  [libjvm.so+0x1372573]  javaSignalHandler(int, siginfo_t*, void*)+0x23

Registers:
EAX=0xf774f000, EBX=0xf7479ae8, ECX=0xf5717618, EDX=0xf74eb91c
ESP=0xf59099f0, EBP=0xf5909a58, ESI=0xe659a5e6, EDI=0xe659a5e6
EIP=0xf6b1bc18, EFLAGS=0x00210213, CR2=0x00000000f774f000
```

It can be reproduced by: java -XX:UnguardOnExecutionViolation=1 on x86_32",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8260046,,,,,,,,,,,,,,,,,,,x86,,,,,,,,,,,,,,"0|i2surv:",9223372036854775807,b24,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,,,"2021-05-17 03:55;tschatzl;While the assert has recently been added by the gc team, the failure seems to be in runtime code (signal handler). Moving to runtime.;;;","2021-05-22 17:02;jiefu;Hi [~dcubed] , I've no idea how to reproduce the jfr crash.
Is it possible to provide a reproducer or tell us how to reproduce the bug?
Thanks.;;;","2021-05-23 04:51;jiefu;I've filed JDK-8267579 for the crash in jfr since it's obviously a different issue.
Thanks.;;;","2021-05-23 05:47;dcubed;Thanks for filing the new bug. I've removed my comments from this bug.
Unfortunately, the test that is failing with JFR is a closed test so I can't
provide a reproducer (yet).;;;","2021-05-25 04:52;roboduke;Changeset: b403d399
Author:    Jie Fu <jiefu@openjdk.org>
Date:      2021-05-25 11:49:58 +0000
URL:       https://git.openjdk.java.net/jdk/commit/b403d3990894853d6e291c8ff8abb44bddb3c99f
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
"test/jdk/java/util/Collections/FindSubList.java intermittent crash with ""no reachable node should have no use""",JDK-8267212,5049697,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,hshi,hshi,hshi,2021-05-16 17:47,2021-06-02 01:53,2023-10-01 09:57,2021-05-18 18:26,17,,,,,,,17,hotspot,,0,c2,hs-comp-triaged,intermittent,oracle-triage-11,oracle-triage-17,tencent-interest,,,,,,,," 4247  MergeMem  === _  1  334  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  7  7  7  7  7  7  7  37  37  7  7  7  7  7  [[]]  { - - - - - - - - - - - - - - - - - - - - - - - - - - - - N7:java/util/ArrayList$ListItr:NotNull:exact *,iid=612 N7:java/util/ArrayList$ListItr:NotNull:exact+8 *,iid=612 [narrowklass] N7:java/util/ArrayList$Itr:NotNull:exact+20 *,iid=612 N7:java/util/ArrayList$Itr:NotNull:exact+12 *,iid=612 N7:java/util/ArrayList$Itr:NotNull:exact+24 *,iid=612 [narrow] N7:java/util/ArrayList$Itr:NotNull:exact+16 *,iid=612 N7:java/util/ArrayList$ListItr:NotNull:exact+28 *,iid=612 [narrow] N37:java/util/LinkedList$ListItr:NotNull:exact *,iid=228 N37:java/util/LinkedList$ListItr:NotNull:exact+8 *,iid=228 [narrowklass] N7:java/util/LinkedList$ListItr:NotNull:exact+20 *,iid=228 [narrow] N7:java/util/LinkedList$ListItr:NotNull:exact+12 *,iid=228 N7:java/util/LinkedList$ListItr:NotNull:exact+28 *,iid=228 [narrow] N7:java/util/LinkedList$ListItr:NotNull:exact+24 *,iid=228 [narrow] N7:java/util/LinkedList$ListItr:NotNull:exact+16 *,iid=228 }  Memory: @BotPTR *+bot, idx=Bot; !orig=[595],[651] !jvms: Collections::lastIndexOfSubList @ bci:126 (line 975)
# To suppress the following error report, specify this argument
# after -XX: or in .hotspotrc:  SuppressErrorAt=/compile.cpp:2308
#
# A fatal error has been detected by the Java Runtime Environment:
#
#  Internal Error (/data/shihui/jdk_0514/shihui_jdk/src/hotspot/share/opto/compile.cpp:2308), pid=19247, tid=19273
#  fatal error: no reachable node should have no use
#
# JRE version: OpenJDK Runtime Environment (17.0) (fastdebug build 17-internal+0-adhoc.root.shihuijdk)
# Java VM: OpenJDK 64-Bit Server VM (fastdebug 17-internal+0-adhoc.root.shihuijdk, mixed mode, sharing, tiered, compressed oops, compressed class ptrs, g1 gc, linux-amd64)
# Problematic frame:
# V  [libjvm.so+0x922600]  Compile::check_no_dead_use() const+0x370
#
# No core dump will be written. Core dumps have been disabled. To enable core dumping, try ""ulimit -c unlimited"" before starting Java again
#
# An error report file with more information is saved as:
# /data/shihui/jdk_0514/shihui_jdk/temp/hs_err_pid19247.log
#
# Compiler replay data is saved as:
# /data/shihui/jdk_0514/shihui_jdk/temp/replay_pid19247.log
#
# If you would like to submit a bug report, please visit:
#   https://bugreport.java.com/bugreport/crash.jsp",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8263577,,,,,,,,,,,,,,,generic,,,,,,,,,generic,,,,,"0|i2surf:",9223372036854775807,b23,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2021-05-17 00:57;hshi;MemMergeNode last output is deleted in StrIntrinsicNode::Ideal.

Stack: [0x00007f47c51fa000,0x00007f47c52fb000],  sp=0x00007f47c52f6330,  free space=1008k
Native frames: (J=compiled Java code, j=interpreted, Vv=VM code, C=native code)
V  [libjvm.so+0xd47a63]  StrIntrinsicNode::Ideal(PhaseGVN*, bool)+0x923
V  [libjvm.so+0x1418aba]  PhaseIterGVN::transform_old(Node*)+0xba
V  [libjvm.so+0x141320b]  PhaseIterGVN::optimize()+0x9b
V  [libjvm.so+0x11874ed]  PhaseMacroExpand::expand_macro_nodes()+0x27d
V  [libjvm.so+0x930cda]  Compile::Optimize()+0xe9a
V  [libjvm.so+0x9322aa]  Compile::Compile(ciEnv*, ciMethod*, int, bool, bool, bool, bool, DirectiveSet*)+0x11ea
V  [libjvm.so+0x794fd6]  C2Compiler::compile_method(ciEnv*, ciMethod*, int, bool, DirectiveSet*)+0x116
V  [libjvm.so+0x940446]  CompileBroker::invoke_compiler_on_method(CompileTask*)+0xcd6
V  [libjvm.so+0x940f48]  CompileBroker::compiler_thread_loop()+0x438
V  [libjvm.so+0x17b3833]  JavaThread::thread_main_inner()+0x2e3
V  [libjvm.so+0x17b3b9c]  JavaThread::run()+0x2ac
V  [libjvm.so+0x17b8a38]  Thread::call_run()+0xf8
V  [libjvm.so+0x1397a4e]  thread_native_entry(Thread*)+0x10e

Replace memmerge node with set_req(MemNode::Memory, mem);  It should be set_req_X(MemNode::Memory, mem, phase);

 39 Node* StrIntrinsicNode::Ideal(PhaseGVN* phase, bool can_reshape) {
 40   if (remove_dead_region(phase, can_reshape)) return this;
 41   // Don't bother trying to transform a dead node
 42   if (in(0) && in(0)->is_top())  return NULL;
 43 
 44   if (can_reshape) {
 45     Node* mem = phase->transform(in(MemNode::Memory));
 46     // If transformed to a MergeMem, get the desired slice
 47     uint alias_idx = phase->C->get_alias_index(adr_type());
 48     mem = mem->is_MergeMem() ? mem->as_MergeMem()->memory_at(alias_idx) : mem;
 49     if (mem != in(MemNode::Memory)) {
 50       set_req(MemNode::Memory, mem);
 51       return this;
 52     }
 53   }
 54   return NULL;
 55 };;;","2021-05-17 03:41;hshi;Fixing StrIntrinsicNode::Ideal, replace set_req with set_req_X

make run-test CONF=fastdebug TEST=""test/jdk/java/util/Collections/FindSubList.java""
before fixing  2/3 in 10 runs fail
after fixing all pass in 100 runs.

fixing two more places with same issues in LoadNode::Ideal
https://github.com/huishi-hs/jdk/commit/ef8a859cd8fe510ef8f7d61b3b51a1a09e60c2af;;;","2021-05-17 06:15;thartmann;ILW = Assert during C2 compilation (harmless in product), intermittent with JDK test, no workaround = MMH = P3;;;","2021-05-18 18:26;roboduke;Changeset: 324defe2
Author:    Hui Shi <hshi@openjdk.org>
Committer: Jie Fu <jiefu@openjdk.org>
Date:      2021-05-19 01:25:58 +0000
URL:       https://git.openjdk.java.net/jdk/commit/324defe2b6c83de76a37d1b4b360869a77bed036
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
gc/stringdedup/TestStringDeduplicationInterned.java fails with Shenandoah,JDK-8267188,5049648,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,zgu,kbarrett,kbarrett,2021-05-14 13:42,2023-06-21 08:55,2023-10-01 09:57,2021-08-25 13:18,17,18,,,,,,18,hotspot,,0,amazon-interest,gc-shenandoah,jdk17u-fix-request,jdk17u-fix-yes,redhat-interest,,,,,,,,,"The test gc/stringdedup/TestStringDeduplicationInterned.java fails when run with Shenandoah as the GC.  (Shenandoah is currently not in the `@requires` list of supported collectors for this test, to disable running this test until this issue has been dealt with.)

Snippet from the log is

End: Full GC 3/3
Waiting for deduplication...
[10.468s][info ][gc                      ] Cancelling GC: Stopping VM
];
 stderr: [Exception in thread ""main"" java.lang.RuntimeException: Deduplication has not occurred
	at gc.stringdedup.TestStringDeduplicationTools$InternedTest.main(TestStringDeduplicationTools.java:297)

This may be a testbug rather than an issue with Shenandoah.
",,,,,,,,,,,JDK-8310564,,,,,,,,,,,,,,,,,,,,,,JDK-8254598,,,,JDK-8271834,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2sugj:",9223372036854775807,b13,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6b00f96c,,,,,,,,,"2021-08-17 07:28;zgu;Shenandoah currently enqueues deduplication candidates when marks object gray. 

However, it can not do so when it scans roots, as it can potentially result lock rank inversion between stack watermark lock and dedup request buffer lock.

As the result, it can not enqueue as many as candidates as it should be able to. I purpose we switch to enqueue candidates when we mark object black.

We are still not able to enqueue all candidates, only when they have displaced headers or have monitor inflating in progress. Upstream is working on removing displaced headers, we should revisit the logic afterward, or we can choose to deduplicate all string regardless their ages.



;;;","2021-08-25 13:18;roboduke;Changeset: 7212561d
Author:    Zhengyu Gu <zgu@openjdk.org>
Date:      2021-08-25 20:16:25 +0000
URL:       https://git.openjdk.java.net/jdk/commit/7212561dd1ec65d7f31792959f0eaaab6229eaf4
;;;","2023-06-15 12:23;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/1447
Date: 2023-06-15 18:09:13 +0000;;;","2023-06-15 15:25;wkemper;jdk17u fix request

Backport was not clean, but conflict was in test configuration and easily resolved.

jdk17u fix request.

Clean backport.

Testing:
* hotspot_gc_shenandoah
* dacapo
* specjbb2015
* extremem
* hyperalloc;;;","2023-06-16 09:50;phh;17u backport now reviewed, re-tagging.
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Typo in copyright header  for HashesTest,JDK-8267180,5049637,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,lancea,lancea,lancea,2021-05-14 10:32,2022-07-27 13:03,2023-10-01 09:57,2021-05-14 10:56,,,,,,,,17,core-libs,,0,jdk11u-fix-request,jdk11u-fix-yes,noreg-trivial,,,,,,,,,,,Fix typo in copyright header,,,,,,,,,,,JDK-8290915,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2sue3:",9223372036854775807,b23,,,,,,,,,,,,"2021-05-14 10:56;roboduke;Changeset: 5eda812f
Author:    Lance Andersen <lancea@openjdk.org>
Date:      2021-05-14 17:55:43 +0000
URL:       https://git.openjdk.java.net/jdk/commit/5eda812f53bfe65d11f6241b0831c588c1400b08
;;;","2022-07-22 07:48;gdams;Fix request (11u)

Applies cleanly and makes sense to backport this at the same time as the commit that broke the copyright header in 11u;;;","2022-07-22 07:49;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk11u-dev/pull/1252
Date: 2022-07-21 08:03:18 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Many test files have the wrong Copyright header,JDK-8267174,5049631,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,erikj,mtrudeau,mtrudeau,2021-05-14 09:36,2023-09-18 15:31,2023-10-01 09:57,2023-09-12 13:18,16,17,,,,,,22,infrastructure,,0,,,,,,,,,,,,,,"There are approximately 580 test files in the jdk repo with some erroneous license text.

The extra text that must be removed from those test files is:

'''  Oracle designates this particular file as subject to the ""Classpath"" exception as provided by Oracle in the LICENSE file that accompanied this code. '''

To find those files, one may use the following query in the root of the open repo:

```
grep -rl '""Classpath"" exception' * | grep ""^test/""
```
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2sucr:",9223372036854775807,b15,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@57e78fcb,,,,,,,,,"2021-08-05 08:10;jehung;Tests should be pure GPL, not GPL+CP;;;","2023-09-05 15:57;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/15573
Date: 2023-09-05 22:49:41 +0000;;;","2023-09-12 13:18;dukebot;Changeset: 020255a7
Author:    Erik Joelsson <erikj@openjdk.org>
Date:      2023-09-12 20:16:05 +0000
URL:       https://git.openjdk.org/jdk/commit/020255a72dc374ba0bdd44772047f14a8bfe69a9
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Add jtreg test group definitions for langtools,JDK-8267162,5049618,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,mcimadamore,mcimadamore,mcimadamore,2021-05-14 07:30,2021-05-24 16:39,2023-10-01 09:57,2021-05-17 06:56,17,,,,,,,17,tools,,0,,,,,,,,,,,,,,"The build system has some nice support for running tests and test groups:

make run-test-<group name>

Sadly, since there's no group defined for langtools it is not possible e.g. to run all jshell tests in this way.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2su9v:",9223372036854775807,b23,,,,,,,,,,,,"2021-05-17 06:56;roboduke;Changeset: dd5a84c6
Author:    Maurizio Cimadamore <mcimadamore@openjdk.org>
Date:      2021-05-17 12:55:34 +0000
URL:       https://git.openjdk.java.net/jdk/commit/dd5a84c68c4f6128c3568c6f4fc1302c6aaadf01
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Monocle mouse never get ENTERED state,JDK-8267160,5049616,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,jvos,jvos,jvos,2021-05-14 07:03,2021-05-14 14:51,2023-10-01 09:57,2021-05-14 09:53,jfx17,,,,,,,jfx17,javafx,,0,,,,,,,,,,,,,,"In Monocle, a MouseEvent with type MOUSE_ENTERED is never delivered. 
The reason for this is that 
`com.sun.glass.ui.monocle.MouseInput .setState()` will compare the old and the new window, and in case those are different a MOUSE_ENTERED event might be generated. 
The calculations for getting the window based on the state will always return the same instance though.

Some functionality (e.g. Scene.setCursor()) depends on a MOUSE_ENTERED to be received at least once. ",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2su9f:",9223372036854775807,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4143e3f7,,,,,,,,,"2021-05-14 09:53;roboduke;Changeset: 8ca7815a
Author:    Johan Vos <jvos@openjdk.org>
Date:      2021-05-14 16:52:43 +0000
URL:       https://git.openjdk.java.net/jfx/commit/8ca7815afc2d592fe057ec50328fdc41ca86112e
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
runtime/os/TestTracePageSizes times out,JDK-8267155,5049606,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,stuefe,stuefe,stuefe,2021-05-14 03:27,2021-05-26 17:28,2023-10-01 09:57,2021-05-20 01:17,17,,,,,,,17,hotspot,,0,noreg-self,testbug,,,,,,,,,,,,"on a number of our Linux test machines, this jtreg test times out after 720 secs. We see this on various architectures, including x64.

Stack:
```
""MainThread"" #26 prio=5 os_prio=0 cpu=719540.42ms elapsed=720.16s tid=0x00007f5a032d7b70 nid=0x5994 runnable  [0x00007f59dc149000]
   java.lang.Thread.State: RUNNABLE
Thread: 0x00007f5a032d7b70  [0x5994] State: _at_safepoint _at_poll_safepoint 0
   JavaThread state: _thread_blocked
	at java.util.regex.Pattern$Curly.match1(java.base@17.0.0.1-internal/Pattern.java:4433)
	at java.util.regex.Pattern$Curly.match(java.base@17.0.0.1-internal/Pattern.java:4382)
	at java.util.regex.Pattern$GroupTail.match(java.base@17.0.0.1-internal/Pattern.java:4836)
	at java.util.regex.Pattern$BmpCharPropertyGreedy.match(java.base@17.0.0.1-internal/Pattern.java:4345)
	at java.util.regex.Pattern$GroupHead.match(java.base@17.0.0.1-internal/Pattern.java:4805)
	at java.util.regex.Pattern$BmpCharProperty.match(java.base@17.0.0.1-internal/Pattern.java:3971)
	at java.util.regex.Pattern$GroupTail.match(java.base@17.0.0.1-internal/Pattern.java:4836)
	at java.util.regex.Pattern$BmpCharPropertyGreedy.match(java.base@17.0.0.1-internal/Pattern.java:4345)
	at java.util.regex.Pattern$GroupHead.match(java.base@17.0.0.1-internal/Pattern.java:4805)
	at java.util.regex.Pattern$Start.match(java.base@17.0.0.1-internal/Pattern.java:3624)
	at java.util.regex.Matcher.search(java.base@17.0.0.1-internal/Matcher.java:1728)
	at java.util.regex.Matcher.find(java.base@17.0.0.1-internal/Matcher.java:745)
	at java.util.Scanner$FindSpliterator.nextInBuffer(java.base@17.0.0.1-internal/Scanner.java:2996)
	at java.util.Scanner$FindSpliterator.tryAdvance(java.base@17.0.0.1-internal/Scanner.java:2970)
	at java.util.Spliterator.forEachRemaining(java.base@17.0.0.1-internal/Spliterator.java:326)
	at java.util.stream.ReferencePipeline$Head.forEach(java.base@17.0.0.1-internal/ReferencePipeline.java:762)
	at TestTracePageSizes.parseSmaps(TestTracePageSizes.java:110)
	at TestTracePageSizes.main(TestTracePageSizes.java:165)
	at jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(java.base@17.0.0.1-internal/Native Method)
	at jdk.internal.reflect.NativeMethodAccessorImpl.invoke(java.base@17.0.0.1-internal/NativeMethodAccessorImpl.java:78)
	at jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(java.base@17.0.0.1-internal/DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(java.base@17.0.0.1-internal/Method.java:568)
	at com.sun.javatest.regtest.agent.MainWrapper$MainThread.run(MainWrapper.java:127)
	at java.lang.Thread.run(java.base@17.0.0.1-internal/Thread.java:831)
```",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8262188,,,,JDK-8267460,JDK-8263236,,,"2021-05-14 03:28;stuefe;TestTracePageSizes_compiler-options.jtr;https://bugs.openjdk.org/secure/attachment/94627/TestTracePageSizes_compiler-options.jtr","2021-05-17 05:00;stuefe;hangs.smaps.txt;https://bugs.openjdk.org/secure/attachment/94661/hangs.smaps.txt",,,,,,,,,,,,,,,,,,,,,,,,"0|i2su77:",9223372036854775807,b24,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,,,"2021-05-17 02:12;shade;Are you saying this started to happen after JDK-8263236 added another character in the match? Or that the pattern matching is expensive either way?;;;","2021-05-17 02:22;shade;What is weird is that on my 3970X each test case passes within tens of seconds, even in slowdebug builds:

 $ time CONF=linux-x86_64-server-slowdebug make run-test TEST=runtime/os/TestTracePageSizes.java
...

real	1m8.662s
user	5m50.678s
sys	0m7.873s;;;","2021-05-17 04:06;stuefe;One thing I wonder about is the atomicity of /proc. AFAIK the only guarantee of consistency is reading with a single read call. It may make sense to copy the smaps file first, then scanning the copy. Would also make analysis simpler (just by using -retain).

Otherwise, I'll look into the delay on our machines.;;;","2021-05-17 04:50;stuefe;The matching is just plain slow (beside the consistency issue), takes ~12min on our x64 test machines. And no JDK-8263236 does not seem to have anything to do with it. ;;;","2021-05-17 04:52;shade;That's odd, because on all our machines it seems to pass rather quickly. Can you dump the smaps file somewhere, so we can see if it is somehow special?;;;","2021-05-17 04:57;stuefe;Okay, ""VmFlags"" is missing from smaps on older kernels (<3.8). That makes the matching explode.

kernel is 3.0.
;;;","2021-05-17 05:13;shade;Right. It seems ""VmFlags"" were introduced in 3.8: https://github.com/torvalds/linux/commit/834f82e2aa9a8ede94b17b656329f850c1471514;;;","2021-05-18 11:26;mseledtsov;ILW = MLM = P4;;;","2021-05-20 01:17;roboduke;Changeset: 726785b8
Author:    Thomas Stuefe <stuefe@openjdk.org>
Date:      2021-05-20 08:16:36 +0000
URL:       https://git.openjdk.java.net/jdk/commit/726785b8d7c18569bddae6a08fa7f61d8d7bd2c4
;;;",,,,,,,,,,,,,,,,,,,,,,,,,
Stray suffix when starting gtests via GTestWrapper.java,JDK-8267138,5049589,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,stuefe,stuefe,stuefe,2021-05-13 23:03,2022-10-28 08:10,2023-10-01 09:57,2021-06-25 09:35,,,,,,,,18,hotspot,,0,jdk17u-fix-request,jdk17u-fix-yes,,,,,,,,,,,,"For JDK-8185734: ""[Windows] Structured Exception Catcher missing around gtest execution"", I specified that  --gtest_catch_exceptions=0 should be specified to leave signal handling to the VM. This was needed to prevent the gtest runner from catching the stack-based SEH exceptions bubbling up from the tested VM, and leave them to our upstairs gtest runner wrapper  to catch.

However, there is a typo:
```
--gtest_catch_exceptions=0test_result.xml
```

Unless I am mistaken, it did not seem to have impeded Windows gtests. So maybe the gtest runner does a prefix match only. But this should be fixed.
",,,,,,,,,,,JDK-8295983,JDK-8296047,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8264408,JDK-8185734,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2su3f:",9223372036854775807,b04,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@78d03d9a,,,,,,,,,"2021-06-25 09:35;roboduke;Changeset: b565459f
Author:    Thomas Stuefe <stuefe@openjdk.org>
Date:      2021-06-25 16:33:19 +0000
URL:       https://git.openjdk.java.net/jdk/commit/b565459f83b749a01d7d873a01bb7dbdf55745de
;;;","2022-10-24 08:22;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/822
Date: 2022-10-24 10:11:33 +0000;;;","2022-10-25 07:46;stuefe;Fix Request:

Would like to have this in JDK17 to make gtest execution more stable on windows. Applies cleanly; risk is minimal.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
"jdk/jfr/event/gc/collection/TestG1ParallelPhases.java fails with Not expected phases: RestorePreservedMarks, RemoveSelfForwardingPtr: expected true, was false",JDK-8267133,5049584,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,ayang,mikael,mikael,2021-05-13 21:34,2022-03-29 03:25,2023-10-01 09:57,2021-05-19 04:30,17,,,,,,,17,hotspot,,0,gc-g1,testbug,tier5,tier6,ursqe-triaged,,,,,,,,,"jdk/jfr/event/gc/collection/TestG1ParallelPhases.java fails on linux-x64:

0.661s][debug][gc,heap       ] GC(15) Heap after GC invocations=15 (full 3):
[0.661s][debug][gc,heap       ] GC(15)  garbage-first heap   total 20480K, used 4321K [0x00000000fec00000, 0x0000000100000000)
[0.661s][debug][gc,heap       ] GC(15)   region size 1024K, 0 young (0K), 0 survivors (0K)
[0.661s][debug][gc,heap       ] GC(15)  Metaspace       used 3614K, committed 3776K, reserved 1056768K
[0.661s][debug][gc,heap       ] GC(15)   class space    used 364K, committed 448K, reserved 1048576K
[0.661s][info ][gc            ] GC(15) Pause Young (Mixed) (G1 Evacuation Pause) 4M->4M(20M) 2.312ms
[0.732s][info ][gc,heap,exit  ] Heap
[0.732s][info ][gc,heap,exit  ]  garbage-first heap   total 20480K, used 7883K [0x00000000fec00000, 0x0000000100000000)
[0.732s][info ][gc,heap,exit  ]   region size 1024K, 4 young (4096K), 0 survivors (0K)
[0.732s][info ][gc,heap,exit  ]  Metaspace       used 4054K, committed 4288K, reserved 1056768K
[0.732s][info ][gc,heap,exit  ]   class space    used 416K, committed 512K, reserved 1048576K
----------System.err:(15/1340)----------
java.lang.RuntimeException: Compare events expected and received, Not found phases: , Not expected phases: RestorePreservedMarks, RemoveSelfForwardingPtr: expected true, was false
	at jdk.test.lib.Asserts.fail(Asserts.java:594)
	at jdk.test.lib.Asserts.assertTrue(Asserts.java:486)
	at jdk.jfr.event.gc.collection.TestG1ParallelPhases.main(TestG1ParallelPhases.java:133)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:78)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at com.sun.javatest.regtest.agent.MainWrapper$MainThread.run(MainWrapper.java:127)
	at java.base/java.lang.Thread.run(Thread.java:831)",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8254598,JDK-8267218,JDK-8267135,JDK-8214237,,,,,,,,,,,,x86_64,,,,,,,,,,,,,,"0|i2su2b:",9223372036854775807,b23,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6b00f96c,,,,,,,,,"2021-05-14 02:52;tschatzl;Probably caused by JDK-8214237 causing evacuation failures sometimes, a possibility that the test does not handle. Could also be that JDK-8214237 sends that even errorneously.;;;","2021-05-17 03:28;tschatzl;Recent stringdedup changes JDK-8254598 also cause this test to fail, failed to remove the string dedup events from the list of expected events.
;;;","2021-05-17 03:35;tschatzl;The failing events were added in JDK-8214237 for these phases according to [~ayang], but the test can't handle them properly. Adding  testbug label.;;;","2021-05-19 04:30;roboduke;Changeset: 1b93b812
Author:    Albert Mingkun Yang <ayang@openjdk.org>
Date:      2021-05-19 11:29:27 +0000
URL:       https://git.openjdk.java.net/jdk/commit/1b93b81270770c208efc8c9bb10bb460636008b7
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Memory Overflow in Disassembler::load_library ,JDK-8267130,5049580,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,whuang,whuang,whuang,2021-05-13 18:59,2021-06-17 00:38,2023-10-01 09:57,2021-05-26 03:22,17,,,,,,,17,hotspot,,0,huawei-interest,,,,,,,,,,,,,"In these codes:

if (jvm_offset >= 0) {
    // 1. <home>/lib/<vm>/libhsdis-<arch>.so
    strcpy(&buf[jvm_offset], hsdis_library_name);
    strcat(&buf[jvm_offset], os::dll_file_extension());
    if (Verbose) st->print_cr(""Trying to load: %s"", buf);
    _library = os::dll_load(buf, ebuf, sizeof ebuf);
    if (_library == NULL && lib_offset >= 0) {
      // 2. <home>/lib/<vm>/hsdis-<arch>.so
      strcpy(&buf[lib_offset], hsdis_library_name);
      strcat(&buf[lib_offset], os::dll_file_extension());
      if (Verbose) st->print_cr(""Trying to load: %s"", buf);
      _library = os::dll_load(buf, ebuf, sizeof ebuf);
    }
    if (_library == NULL && lib_offset > 0) {
      // 3. <home>/lib/hsdis-<arch>.so
      buf[lib_offset - 1] = '\0';
      const char* p = strrchr(buf, *os::file_separator());
      if (p != NULL) {
        lib_offset = p - buf + 1;
        strcpy(&buf[lib_offset], hsdis_library_name);
        strcat(&buf[lib_offset], os::dll_file_extension());
        if (Verbose) st->print_cr(""Trying to load: %s"", buf);
        _library = os::dll_load(buf, ebuf, sizeof ebuf);
      }
    }
  }

In these codes, we strcpy hsdis_library_name into buf without checking  the length. If the whole path is ge 4095, we will get a crash. For instance, put your libjvm.so in 

/home/aaaaaaaaa/aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa/aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa/aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa/aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa/aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa/aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa/aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa/aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa/aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa/aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa/aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa/aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa/aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa/aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa/aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa/aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa/aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa/aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa/aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa/aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa/aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa/jdk/lib/server/libjvm.so
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8267930,,,,,,,,,,,,,,,,,,,generic,,,,,,,,,generic,,,,,"0|i2su1f:",9223372036854775807,b24,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@11336cca,,,,,,,,,"2021-05-26 03:22;roboduke;Changeset: 083416d3
Author:    Wang Huang <whuang@openjdk.org>
Committer: Hamlin Li <mli@openjdk.org>
Date:      2021-05-26 10:21:46 +0000
URL:       https://git.openjdk.java.net/jdk/commit/083416d36c0d7fd17dd0db546129411450dfcccf
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
"javadoc should show ""line and caret"" for diagnostics.",JDK-8267126,5049576,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,jjg,jjg,jjg,2021-05-13 17:54,2021-06-25 14:40,2023-10-01 09:57,2021-05-24 18:34,9,,,,,,,17,tools,,0,release-note=yes,,,,,,,,,,,,,"The Standard Doclet should be upgraded to show the contents of the source line and a caret to mark the position of an error, as is standard in other related tools, like javac.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8267127,JDK-8267129,,,JDK-8267176,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2su0j:",9223372036854775807,b24,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@7900061a,,,,,,,,,"2021-05-14 05:11;prappo;For future archaeologists wondering ""Why now?"" This and the related tasks were created for diagnosability of snippets (JDK-8266666).;;;","2021-05-14 07:51;jjg;While JDK-8267127 and JDK-8267129 were specifically motivated by work on snippets (JDK-8266666), this issue is a standalone ""oops"" that is a hangover from the conversion to the new doclet in JDK 9.  It has mostly escaped notice up to now because most diagnostics about issues in comments are generated by doclint, which does show source line and caret.   To demo the behavior described here, you generally need `-Xdoclint:none`.;;;","2021-05-24 18:34;roboduke;Changeset: b4d4884c
Author:    Jonathan Gibbons <jjg@openjdk.org>
Date:      2021-05-25 01:33:13 +0000
URL:       https://git.openjdk.java.net/jdk/commit/b4d4884c03b03d3073ef137a899f3612993f5e65
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
"Illegal access to private ""size"" field of ArrayList from build.gradle",JDK-8267121,5049568,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,kcr,kcr,kcr,2021-05-13 15:31,2021-08-23 06:57,2023-10-01 09:57,2021-05-17 06:56,8,jfx11,jfx17,,,,,jfx17,javafx,,0,noreg-build,sn_93,,,,,,,,,,,,"The fetchExternalTools() method in build.gradle accesses ArrayList.size instead of ArrayList.size() in two places. This is clearly a bug, but Groovy is happy to provide access to that field via reflection.

Starting in JDK 16, with default strong encapsulation, this no longer works, so we need to fix this before switching, and we really should fix it anyway, since accessing the internal field is both unnecessary and wrong.
",,,,,,,,,,,JDK-8267711,JDK-8272733,,,,,,,,,,,JDK-8263761,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2styr:",9223372036854775807,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@1556b386,,,,,,,,,"2021-05-17 06:56;roboduke;Changeset: 9c97d9b2
Author:    Kevin Rushforth <kcr@openjdk.org>
Date:      2021-05-17 13:01:15 +0000
URL:       https://git.openjdk.java.net/jfx/commit/9c97d9b21232a67a10debdc8dc3b10c419780f7a
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
switch expressions lack support for deferred type-checking,JDK-8267119,5049560,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,jlahoda,mcimadamore,mcimadamore,2021-05-13 14:17,2021-06-07 15:07,2023-10-01 09:57,2021-05-21 07:48,16,17,,,,,,17,tools,,0,,,,,,,,,,,,,,"This test:

import java.util.function.*;

class Test {
    <Z> void m(Consumer<Z> c, Class<Z> cl) {

    }

    void test(boolean b, int i) {
        m(s -> s.length(), String.class);
        m(b ? s -> s.length() : s -> s.length(), String.class);
        m(switch (i) {
            case 0 -> s -> s.length();
            default -> s -> s.length();
        }, String.class);
    }
} 


Fails to compile:

Test.java:12: error: cannot find symbol
            case 0 -> s -> s.length();
                            ^
  symbol:   method length()
  location: variable s of type Z
  where Z is a type-variable:
    Z extends Object declared in method <Z>m(Consumer<Z>,Class<Z>)
Test.java:13: error: cannot find symbol
            default -> s -> s.length();
                             ^
  symbol:   method length()
  location: variable s of type Z
  where Z is a type-variable:
    Z extends Object declared in method <Z>m(Consumer<Z>,Class<Z>)
Test.java:11: error: incompatible types: inference variable Z has incompatible equality constraints String,Z
        m(switch (i) {
         ^
  where Z is a type-variable:
    Z extends Object declared in method <Z>m(Consumer<Z>,Class<Z>)
3 errors


Note that the first call and the second compile without issues.

The problem is caused by the fact that DeferredAttr.PolyScanner does not look inside switch expression nodes. As a result, DeferredAttr.OverloadStuckPolicy and DefrredAttr.CheckStuckPolicy do not collect ""stuck"" type variables from functional interface targets required inside the arms of a switch expression (unlike what happens e.g. for conditionals). Because of that, Consumer<Z> is not detected as a non-concrete type; as such the compiler just tries to use it as a target, which generates the spurious errors seen above.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2stx7:",9223372036854775807,b24,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4dca67bd,,,,,,,,,"2021-05-13 14:25;mcimadamore;The JLS seems to use same rules for conditionals and switch expressions (see chapter 18.5.2.2. - Additional Argument Constraints).
;;;","2021-05-21 07:48;roboduke;Changeset: ec8a8097
Author:    Jan Lahoda <jlahoda@openjdk.org>
Date:      2021-05-21 14:09:42 +0000
URL:       https://git.openjdk.java.net/jdk/commit/ec8a8097c309920982b0b8253a76c7c938f1f48d
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
sun/hotspot/whitebox/CPUInfoTest.java fails on Ice Lake,JDK-8267117,5049554,Bug,Resolved,JDK,JDK,software,duke,,,P2,Fixed,vlivanov,ctornqvi,ctornqvi,2021-05-13 10:47,2021-06-02 01:51,2023-10-01 09:57,2021-05-13 16:27,16,17,,,,,,17,hotspot,,0,hs-comp-triaged,noreg-self,oracle-triage-11,oracle-triage-17,,,,,,,,,,"sun/hotspot/whitebox/CPUInfoTest.java fails when running on Intel Ice Lake (Xeon 6354) with the following output:

WB.getCPUFeatures(): ""(6 cores per cpu, 2 threads per core) family 6 model 106 stepping 6 microcode 0x1, cx8, cmov, fxsr, ht, mmx, 3dnowpref, sse, sse2, sse3, ssse3, sse4.1, sse4.2, popcnt, lzcnt, tsc, avx, avx2, aes, erms, clmul, bmi1, bmi2, adx, avx512f, avx512dq, avx512cd, avx512bw, avx512vl, sha, fma, vzeroupper, avx512_vpopcntdq, avx512_vpclmulqdq, avx512_vaes, avx512_vnni, clflush, clflushopt, clwb, avx512_vbmi2, avx512_vbmi, hv""
CPUInfo.getAdditionalCPUInfo(): ""(6 cores per cpu, 2 threads per core) family 6 model 106 stepping 6 microcode 0x1""
CPUInfo.getFeatures(): [cx8, cmov, fxsr, ht, mmx, 3dnowpref, sse, sse2, sse3, ssse3, sse4.1, sse4.2, popcnt, lzcnt, tsc, avx, avx2, aes, erms, clmul, bmi1, bmi2, adx, avx512f, avx512dq, avx512cd, avx512bw, avx512vl, sha, fma, vzeroupper, avx512_vpopcntdq, avx512_vpclmulqdq, avx512_vaes, avx512_vnni, clflush, clflushopt, clwb, avx512_vbmi2, avx512_vbmi, hv]
Well-known CPU features: [clflushopt, sse, sse4a, tscinvbit, avx512_vnni, avx512_vmbi2, fma, cmov, 3dnowpref, avx, rtm, tsc, adx, avx512er, avx512_vaes, sse2, sse3, clflush, avx512bw, sse4.1, sse4.2, sha, clwb, erms, avx512cd, aes, bmi1, lzcnt, bmi2, avx2, avx512f, cx8, tscinv, vzeroupper, fxsr, avx512_vpclmulqdq, avx512pf, popcnt, avx512vl, ssse3, clmul, ht, avx512_vmbi, hv, mmx, avx512_vpopcntdq, avx512dq]",,,,,,,,,,,JDK-8267152,JDK-8267324,,,,,,,,,,,,,,,,,,,,,JDK-8267149,,,,JDK-8253869,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2stvv:",9223372036854775807,b23,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2021-05-13 16:27;roboduke;Changeset: 2a2f105a
Author:    Vladimir Ivanov <vlivanov@openjdk.org>
Date:      2021-05-13 23:26:35 +0000
URL:       https://git.openjdk.java.net/jdk/commit/2a2f105a56bba3a180658f0b0151240676478ba4
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Lanai: Incorrect AlphaComposite for VolatileImage graphics,JDK-8267116,5049553,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,avu,avu,avu,2021-05-13 10:34,2021-06-13 15:57,2023-10-01 09:57,2021-05-17 23:07,,,,,,,,17,client-libs,,0,lanai,Lanai,,,,,,,,,,,,AlphaComposite.SRC mode incorrectly works in the Metal pipeline.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"2021-05-13 10:29;avu;CompositeTest.java;https://bugs.openjdk.org/secure/attachment/94619/CompositeTest.java","2021-05-13 10:33;avu;res_metal.png;https://bugs.openjdk.org/secure/attachment/94618/res_metal.png","2021-05-13 10:33;avu;res_ogl.png;https://bugs.openjdk.org/secure/attachment/94617/res_ogl.png",,,,,,,,,,,,,,,,17,,os_x,,,,,"0|i2stvn:",9223372036854775807,b23,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4b09ce31,,,,,,,,,"2021-05-13 10:36;avu;The problem was caused by an overflow in the bit mask used for caching encoder states;;;","2021-05-17 23:07;roboduke;Changeset: 3e97b07a
Author:    Alexey Ushakov <avu@openjdk.org>
Committer: Ajit Ghaisas <aghaisas@openjdk.org>
Date:      2021-05-18 06:06:42 +0000
URL:       https://git.openjdk.java.net/jdk/commit/3e97b07a68cd3f9da78cbf98b574977185bc34e2
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
JVMCI compiler modules should be kept upgradable,JDK-8267112,5049545,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,kvn,kvn,kvn,2021-05-13 08:23,2021-06-02 01:49,2023-10-01 09:57,2021-05-17 13:11,17,,,,,,,17,hotspot,,0,graal,hs-comp-triaged,jvmci,oracle-triage-11,oracle-triage-17,,,,,,,,,"JVMCI compiler modules should be upgradable to use them with GraalVM.
JDK-8264806 changes removed JVMCI compiler from list of upgradable modules. We need to restore it.
Note, we don't restore sources. JVMCI compiler modules are empty after JDK-8264806 - only module-info.java files are present.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8264806,,,,JDK-8265091,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2sttv:",9223372036854775807,b23,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2021-05-17 13:11;roboduke;Changeset: 2effdd1b
Author:    Vladimir Kozlov <kvn@openjdk.org>
Date:      2021-05-17 20:11:01 +0000
URL:       https://git.openjdk.java.net/jdk/commit/2effdd1b6799a15a766b2b2a6cba4806d92122f3
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
[BACKOUT] JDK-8196415 Disable SHA-1 Signed JARs,JDK-8267100,5049530,Bug,Closed,JDK,JDK,software,duke,,,P2,Fixed,coffeys,pkumaraswamy,pkumaraswamy,2021-05-13 05:31,2021-08-03 14:58,2023-10-01 09:57,2021-05-17 08:34,11.0.13-oracle,16.0.2,7u311,8u301,,,,16.0.2,security-libs,,0,CPU21_07-critical-approved,CPU21_07-critical-SQE-OK,jdk16u-fix-request,jdk16u-fix-SQE-ok,jdk16u-fix-yes,openjdk-na,,,,,,,,"Regression issue JDK-8266971 was found, affecting performance because of changes in JDK-8196415.

Initially we did not back it out of JDK 17, so that we could try to address/reduce the performance degradation issues. However, due to time constraints, we are going to also back it out of 17, and defer addressing the performance issues to JDK 18.",,,,,,,,,,,JDK-8267326,JDK-8267327,JDK-8267249,JDK-8269189,JDK-8269322,JDK-8267320,JDK-8269028,JDK-8267254,JDK-8267247,JDK-8267318,JDK-8270610,,,JDK-8267268,,,,,,,,,JDK-8266023,JDK-8266024,,,JDK-8196415,JDK-8266971,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2stqj:",9223372036854775807,b05,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@2ec284e3,,,,,,,Verified,,"2021-05-13 05:41;alanb;Why is this issue targeted to 16-pool? I would expect the main issue to be targeted to 17, then create back port issues for the older releases?;;;","2021-05-13 05:56;alanb;Thanks, I see Sean has updated the bug to make it clear. We can add 17-na label to make this clear.;;;","2021-05-17 06:35;coffeys;Fix Request:
Performance issues reported with JDK-8196415 - opting to back out this fix for now and integrate a better solution in a later update release;;;","2021-05-17 08:34;roboduke;Changeset: e84e1858
Author:    Sean Coffey <coffeys@openjdk.org>
Date:      2021-05-17 15:34:14 +0000
URL:       https://git.openjdk.java.net/jdk16u/commit/e84e18580d764f612b9afaee7a470cde856a6bcc
;;;","2021-08-03 07:08;sgehwolf;Added jdk11u-fix-no since JDK-8196415 never got into OpenJDK 11u. Nothing to back out. The new attempt for this is JDK-8269039. ;;;","2021-08-03 14:58;clanger;Changed label to openjdk-na which is what we usually use to mark bugs as not applicable for OpenJDK backports;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,
AArch64: C1 StubFrames end confusingly,JDK-8267098,5049527,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,ahayward,ahayward,ahayward,2021-05-13 04:44,2021-06-02 01:48,2023-10-01 09:57,2021-05-18 18:49,17,,,,,,,17,hotspot,,0,c1,hs-comp-triaged,oracle-triage-11,oracle-triage-17,,,,,,,,,,"For many of the C1 StubFrames, the code generated often includes an additional leave/ret after the stub has completed:

handle_exception_from_callee_id:
*leave
*ret
*leave
*ret

Anything using generate_exception_throw:
*br x8
*should_not_reach_here
*leave
*ret

In addition in generate_handle_exception(), after obtaining the return value, the value is stored on the stack then the stack then almost immediately is popped to LR. Instead the return value could be directly put into LR, saving a load/store.  If/when PAC is implemented this causes an additional issue as the the value needs to be signed then unsigned when going on/off the stack.

These issues are not causing any bugs, but they do make the code unclear, especially when debugging the outputted assembly/

",,86400,86400,,0%,86400,86400,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,aarch64,,,,,,,,,,,,,,"0|i2stpv:",9223372036854775807,b23,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2021-05-18 18:49;roboduke;Changeset: ff84577d
Author:    Alan Hayward <alan.hayward@arm.com>
Committer: Nick Gasson <ngasson@openjdk.org>
Date:      2021-05-19 01:48:34 +0000
URL:       https://git.openjdk.java.net/jdk/commit/ff84577d72226da0bf1ce2c6d6852f3934feecf2
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
TreeCell: cancelEvent must return correct editing location,JDK-8267094,5049516,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,fastegal,fastegal,fastegal,2021-05-13 02:46,2021-06-23 06:20,2023-10-01 09:57,2021-06-10 04:37,jfx16,,,,,,,jfx17,javafx,,0,editCancel,TreeCell,,,,,,,,,,,,"this is JDK-8266969 for TreeCell - to keep scope of the fix bounded by cell type :)

To summarize (treeCell specifics - copied from the blocked issued):

The invariant:

    control.edit(editingIndex);
    control.setOnEditCancel(e -> assertEquals(editingIndex, e.getIndex()));

must be kept independent of what triggered the cancel. For TreeCell, it is broken on cell re-use (detected while fixing JDK-8265210). It's caused by using the current cell location in the event:

     // TreeCell
      editingLocation = this.getTreeItem();
      fire(new XXEvent(...editingLocation...)

which on re-use is different from the one at the time of starting the edit. Tentative fix is to keep the index (treeItem) at the time of startEdit and use it in the cancelEvent.
",,,,,,,,,,,,,,,,,,,,,,,JDK-8266969,,,,,,,,,,,,,,JDK-8265210,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2stnf:",9223372036854775807,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@67282485,,,,,,,,,"2021-06-10 04:37;roboduke;Changeset: e6cf1df4
Author:    Jeanette Winzenburg <fastegal@openjdk.org>
Date:      2021-06-10 11:36:32 +0000
URL:       https://git.openjdk.java.net/jfx/commit/e6cf1df477a78d65e959e4d8f7b5a5de43f845f8
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Race between Card Redirtying and Freeing Collection Set regions results in missing remembered set entries with G1,JDK-8267073,5049489,Bug,Closed,JDK,JDK,software,duke,,,P2,Fixed,tschatzl,mikael,mikael,2021-05-12 15:52,2021-08-24 09:49,2023-10-01 09:57,2021-06-10 06:29,17,,,,,,,17,hotspot,,0,gc-g1,intermittent,tier1,tier2,tier7,,,,,,,,,"gc/logging/TestPrintReferences.java failed with a SIGBUS:

# A fatal error has been detected by the Java Runtime Environment:
#
#  SIGBUS (0xa) at pc=0x0000000107598b24, pid=46324, tid=24067
#
# JRE version: Java(TM) SE Runtime Environment (17.0+22) (fastdebug build 17-ea+22-LTS-1968)
# Java VM: Java HotSpot(TM) 64-Bit Server VM (fastdebug 17-ea+22-LTS-1968, mixed mode, sharing, tiered, compressed oops, compressed class ptrs, g1 gc, bsd-aarch64)
# Problematic frame:
# V  [libjvm.dylib+0xd98b24]  oopDesc::size_given_klass(Klass*)+0x24
#
# Core dump will be written. Default location: core.46324
#
# If you would like to submit a bug report, please visit:
#   https://bugreport.java.com/bugreport/crash.jsp
#

---------------  S U M M A R Y ------------

Command Line: -Xlog:gc+ref+phases=debug -XX:+UseG1GC -Xmx32M gc.logging.TestPrintReferences$GCTest

Host: ""Macmini9,1"" arm64 1 MHz, 8 cores, 16G, Darwin 20.3.0, macOS 11.2.3 (20D91)
Time: Wed May 12 21:26:48 2021 GMT elapsed time: 0.400196 seconds (0d 0h 0m 0s)

---------------  T H R E A D  ---------------

Current thread (0x000000012083ede0):  GCTaskThread ""GC Thread#1"" [stack: 0x00000001701e4000,0x00000001703e7000] [id=24067]

Stack: [0x00000001701e4000,0x00000001703e7000],  sp=0x00000001703e68e0,  free space=2058k
Native frames: (J=compiled Java code, j=interpreted, Vv=VM code, C=native code)
V  [libjvm.dylib+0xd98b24]  oopDesc::size_given_klass(Klass*)+0x24
V  [libjvm.dylib+0x6cb8dc]  G1RegionMarkStatsCache::add_live_words(oop)+0x184
V  [libjvm.dylib+0x68093c]  G1FullGCMarker::mark_object(oop)+0x4b4
V  [libjvm.dylib+0x680b54]  void G1FullGCMarker::mark_and_push<narrowOop>(narrowOop*)+0x58
V  [libjvm.dylib+0x6810a4]  void InstanceRefKlass::oop_oop_iterate<narrowOop, G1MarkAndPushClosure>(oop, G1MarkAndPushClosure*)+0x15c
V  [libjvm.dylib+0x680eb4]  void OopOopIterateDispatch<G1MarkAndPushClosure>::Table::oop_oop_iterate<InstanceRefKlass, narrowOop>(G1MarkAndPushClosure*, oop, Klass*)+0x4c
V  [libjvm.dylib+0x695c28]  void oopDesc::oop_iterate<G1MarkAndPushClosure>(G1MarkAndPushClosure*)+0x100
V  [libjvm.dylib+0x694648]  G1FullGCMarker::follow_object(oop)+0x1c0
V  [libjvm.dylib+0x694018]  G1FullGCMarker::drain_stack()+0x234
V  [libjvm.dylib+0x693b6c]  G1FullGCMarker::complete_marking(GenericTaskQueueSet<OverflowTaskQueue<oop, (MEMFLAGS)5, 131072u>, (MEMFLAGS)5>*, GenericTaskQueueSet<OverflowTaskQueue<ObjArrayTask, (MEMFLAGS)5, 131072u>, (MEMFLAGS)5>*, TaskTerminator*)+0x40
V  [libjvm.dylib+0x693048]  G1FullGCMarkTask::work(unsigned int)+0xd4
V  [libjvm.dylib+0x1010b48]  GangWorker::run_task(WorkData)+0x74
V  [libjvm.dylib+0x1010a20]  GangWorker::loop()+0x48
V  [libjvm.dylib+0x10108d4]  GangWorker::initialize()+0x0
V  [libjvm.dylib+0xf2139c]  Thread::call_run()+0x21c
V  [libjvm.dylib+0xd00730]  thread_native_entry(Thread*)+0x160
C  [libsystem_pthread.dylib+0x706c]  _pthread_start+0x140
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8268354,JDK-8267260,JDK-8267270,JDK-8268354,,,,JDK-8268556,JDK-8214237,,,,,,,,,,,,,,generic,,,,,,,,,generic,,,,,"0|i2sthf:",9223372036854775807,b26,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6b00f96c,,,,,,,Verified,,"2021-05-17 03:23;tschatzl;According to the hs_err file this is an alignment error (BUS_ADRALN). JDK-8214237 is an initial first guess for the cause for this issue but the CI is quite unstable recently.;;;","2021-05-18 03:04;tschatzl;Another similar crash on x64-linux:

Current thread (0x00007fd28400ede0):  GCTaskThread ""GC Thread#8"" [stack: 0x00007fd28d9f6000,0x00007fd28daf6000] [id=16433]

Stack: [0x00007fd28d9f6000,0x00007fd28daf6000],  sp=0x00007fd28daf48c0,  free space=1018k
Native frames: (J=compiled Java code, j=interpreted, Vv=VM code, C=native code)
V  [libjvm.so+0x8602ba]  oopDesc::size_given_klass(Klass*)+0x1a
V  [libjvm.so+0xcbb4a2]  G1RegionMarkStatsCache::add_live_words(oop)+0x102
V  [libjvm.so+0xc60497]  G1FullGCMarker::mark_object(oop)+0x5c7
V  [libjvm.so+0xc62539]  void OopOopIterateDispatch<G1MarkAndPushClosure>::Table::oop_oop_iterate<InstanceKlass, narrowOop>(G1MarkAndPushClosure*, oop, Klass*)+0x1d9
V  [libjvm.so+0xc790b6]  G1FullGCMarker::follow_object(oop)+0x2b6
V  [libjvm.so+0xc7973f]  G1FullGCMarker::drain_stack()+0x18f
V  [libjvm.so+0xc76ffc]  G1FullGCMarker::complete_marking(GenericTaskQueueSet<OverflowTaskQueue<oop, (MEMFLAGS)5, 131072u>, (MEMFLAGS)5>*, GenericTaskQueueSet<OverflowTaskQueue<ObjArrayTask, (MEMFLAGS)5, 13
1072u>, (MEMFLAGS)5>*, TaskTerminator*)+0x3c
V  [libjvm.so+0xc74a4e]  G1FullGCMarkTask::work(unsigned int)+0x17e
V  [libjvm.so+0x19e9825]  GangWorker::run_task(WorkData)+0x85
V  [libjvm.so+0x19e9964]  GangWorker::loop()+0x44
V  [libjvm.so+0x19e99ba]
V  [libjvm.so+0x1896ac0]  Thread::call_run()+0x100
V  [libjvm.so+0x156c0be]  thread_native_entry(Thread*)+0x10e


siginfo: si_signo: 11 (SIGSEGV), si_code: 1 (SEGV_MAPERR), si_addr: 0x0000000ef57dd5fc

That 0x0000000ef57dd5fc crashing address is generated from a 0xdeafbabe klass value. I.e. part of a filler array.;;;","2021-05-24 08:20;dcubed;Here's the crashing stack for the jdk-17+24-2112-tier7 sighting:

---------------  T H R E A D  ---------------

Current thread (0x00007fc3b4009df0):  GCTaskThread ""GC Thread#2"" [stack: 0x00007fc3bcdf5000,0x00007fc3bcef5000] [id=13774]

Stack: [0x00007fc3bcdf5000,0x00007fc3bcef5000],  sp=0x00007fc3bcef3970,  free space=1018k
Native frames: (J=compiled Java code, j=interpreted, Vv=VM code, C=native code)
V  [libjvm.so+0xcc4fa2]  G1RegionMarkStatsCache::add_live_words(oop)+0x242
V  [libjvm.so+0xc6a2e0]  G1FullGCMarker::mark_object(oop)+0x2d0
V  [libjvm.so+0xc6c585]  void OopOopIterateDispatch<G1MarkAndPushClosure>::Table::oop_oop_iterate<InstanceKlass, narrowOop>(G1MarkAndPushClosure*, oop, Klass*)+0x1d5
V  [libjvm.so+0xc832b6]  G1FullGCMarker::follow_object(oop)+0x2b6
V  [libjvm.so+0xc83999]  G1FullGCMarker::drain_stack()+0x1e9
V  [libjvm.so+0xc8125c]  G1FullGCMarker::complete_marking(GenericTaskQueueSet<OverflowTaskQueue<oop, (MEMFLAGS)5, 131072u>, (MEMFLAGS)5>*, GenericTaskQueueSet<OverflowTaskQueue<ObjArrayTask, (MEMFLAGS)5, 131072u>, (MEMFLAGS)5>*, TaskTerminator*)+0x3c
V  [libjvm.so+0xc7ec8e]  G1FullGCMarkTask::work(unsigned int)+0x17e
V  [libjvm.so+0x19f9395]  GangWorker::run_task(WorkData)+0x85
V  [libjvm.so+0x19f94d4]  GangWorker::loop()+0x44
V  [libjvm.so+0x19f952a]
V  [libjvm.so+0x18a6cf0]  Thread::call_run()+0x100
V  [libjvm.so+0x15728fe]  thread_native_entry(Thread*)+0x10e;;;","2021-05-26 13:57;dcubed;Here's hs_err_pid snippets for the jdk-17+24-2168-tier2 sighting:

#  SIGSEGV (0xb) at pc=0x00007fca8b3171f7, pid=4354, tid=4377
#
# JRE version: Java(TM) SE Runtime Environment (17.0+24) (build 17-ea+24-LTS-2168)
# Java VM: Java HotSpot(TM) 64-Bit Server VM (17-ea+24-LTS-2168, mixed mode, sharing, tiered, compressed oops, compressed class ptrs, g1 gc, linux-amd64)
# Problematic frame:
# V  [libjvm.so+0x6e01f7]  G1FullGCMarker::complete_marking(GenericTaskQueueSet<OverflowTaskQueue<oopDesc*, (MEMFLAGS)5, 131072u>, (MEMFLAGS)5>*, GenericTaskQueueSet<OverflowTaskQueue<ObjArrayTask, (MEMFLAGS)5, 131072u>, (MEMFLAGS)5>*, TaskTerminator*)+0xa7

<snip>

---------------  T H R E A D  ---------------

Current thread (0x00007fca54005e70):  GCTaskThread ""GC Thread#1"" [stack: 0x00007fca6c9ff000,0x00007fca6caff000] [id=4377]

Stack: [0x00007fca6c9ff000,0x00007fca6caff000],  sp=0x00007fca6cafdc60,  free space=1019k
Native frames: (J=compiled Java code, j=interpreted, Vv=VM code, C=native code)
V  [libjvm.so+0x6e01f7]  G1FullGCMarker::complete_marking(GenericTaskQueueSet<OverflowTaskQueue<oopDesc*, (MEMFLAGS)5, 131072u>, (MEMFLAGS)5>*, GenericTaskQueueSet<OverflowTaskQueue<ObjArrayTask, (MEMFLAGS)5, 131072u>, (MEMFLAGS)5>*, TaskTerminator*)+0xa7
V  [libjvm.so+0x6dfb0e]  G1FullGCMarkTask::work(unsigned int)+0xde
V  [libjvm.so+0xe29b6f]  GangWorker::loop()+0x5f
V  [libjvm.so+0xe29bcf]
V  [libjvm.so+0xd8091e]  Thread::call_run()+0xde
V  [libjvm.so+0xbd7aaf]  thread_native_entry(Thread*)+0xdf


siginfo: si_signo: 11 (SIGSEGV), si_code: 1 (SEGV_MAPERR), si_addr: 0x00007fc8cbe3f120;;;","2021-05-28 08:35;tschatzl;Looking at the TestStressIHOPMultiThread issue above some more (from the 021-05-18 12:04 comment):

There are two references to this oop (0xf9d2c258) into the 0xdeafbabe filler area, 0xfd030e78 and 0xfd030eac. Both are to be java.util.LinkedList instances; one in the pointer to the first node, one in the pointer to the last node.;;;","2021-06-02 01:46;tschatzl;All of the failures apparently occur with the following log entry (if enabled):

[37.359s][info ][gc,ergo     ] Attempting maximally compacting collection

I.e. a maximally compacting collection after (likely, the logs do not show) an evacuation failure, a regular full gc and that maximally compacting full gc.;;;","2021-06-02 07:59;tschatzl;Running the test with verification shows that there are some missing remembered set entries after a young gc with an evacuation failure.

[~sjohanss] found that the FreeCSet and the RedirtyCardsTask in G1PostEvacuateCollectionSetCleanupTask2 (introduced in JDK-8214237) race for the contents of the attribute table and HeapRegion::_evacuation_failed. This may cause cards not redirtied.

Further, from experience, missing remembered set entries can cause all kinds of crashes, so JDK-8214237 and JDK-8214237 may have the same cause.;;;","2021-06-06 06:43;dcubed;Here's hs_err_pid snippets from the jdk-17+26-2317-tier7 sighting:

gc/logging/TestPrintReferences.java

#  SIGSEGV (0xb) at pc=0x00007f91a5a99e07, pid=26649, tid=26747
#
# JRE version: Java(TM) SE Runtime Environment (17.0+26) (build 17-ea+26-LTS-2317)
# Java VM: Java HotSpot(TM) 64-Bit Server VM (17-ea+26-LTS-2317, mixed mode, sharing, tiered, compressed oops, compressed class ptrs, g1 gc, linux-amd64)
# Problematic frame:
# V  [libjvm.so+0x6e3e07]  G1FullGCMarker::complete_marking(GenericTaskQueueSet<OverflowTaskQueue<oopDesc*, (MEMFLAGS)5, 131072u>, (MEMFLAGS)5>*, GenericTaskQueueSet<OverflowTaskQueue<ObjArrayTask, (MEMFLAGS)5, 131072u>, (MEMFLAGS)5>*, TaskTerminator*)+0xa7

<snip>

---------------  T H R E A D  ---------------

Current thread (0x00007f9170005e70):  GCTaskThread ""GC Thread#1"" [stack: 0x00007f91791fa000,0x00007f91792fa000] [id=26747]

Stack: [0x00007f91791fa000,0x00007f91792fa000],  sp=0x00007f91792f8c60,  free space=1019k
Native frames: (J=compiled Java code, j=interpreted, Vv=VM code, C=native code)
V  [libjvm.so+0x6e3e07]  G1FullGCMarker::complete_marking(GenericTaskQueueSet<OverflowTaskQueue<oopDesc*, (MEMFLAGS)5, 131072u>, (MEMFLAGS)5>*, GenericTaskQueueSet<OverflowTaskQueue<ObjArrayTask, (MEMFLAGS)5, 131072u>, (MEMFLAGS)5>*, TaskTerminator*)+0xa7
V  [libjvm.so+0x6e371e]  G1FullGCMarkTask::work(unsigned int)+0xde
V  [libjvm.so+0xe328cf]  GangWorker::loop()+0x5f
V  [libjvm.so+0xe3292f]
V  [libjvm.so+0xd85dfe]  Thread::call_run()+0xde
V  [libjvm.so+0xbdd0ef]  thread_native_entry(Thread*)+0xdf


siginfo: si_signo: 11 (SIGSEGV), si_code: 1 (SEGV_MAPERR), si_addr: 0x00007f8fe65ca500;;;","2021-06-07 07:31;tschatzl;Initial tests with a fix for the mentioned race in G1PostEvacuateCollectionSetCleanupTask2::RedirtyCardsTask indicate that this has indeed been the problem. After changing this, there are no more crashes in the first 1000 test runs (previous reproduction rate ~1/100 with the same test configuration).;;;","2021-06-10 06:29;roboduke;Changeset: 2b41459e
Author:    Thomas Schatzl <tschatzl@openjdk.org>
Date:      2021-06-10 13:28:55 +0000
URL:       https://git.openjdk.java.net/jdk/commit/2b41459e95e8d6c4ea4c25e8f1d851907d65ef73
;;;","2021-08-24 09:49;tschatzl;This is a failure on an existing test. It does not fail anymore, and the code has been visually verified to be in the JDK-17 release.;;;",,,,,,,,,,,,,,,,,,,,,,,
New NSAccessibility peers should return they roles and subroles directly,JDK-8267066,5049479,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,kizune,kizune,kizune,2021-05-12 13:14,2023-06-14 08:52,2023-10-01 09:57,2021-05-24 23:47,11,17,,,,,,17,client-libs,,0,a11y,accessibility,amazon-interest,jdk11u-a11y-defer,sn_93,sn_94,,,,,,,,Newly implemented NSAccessibility peers needs to have their roles and subroles to be told directly instead of relying on the property map stored in JavaComponentAccessibility.,,,,,,,,,,,JDK-8287145,JDK-8288076,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,generic,,,,,,,,,os_x,,,,,"0|i2stf7:",9223372036854775807,b24,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4785f47c,,,,,,,,,"2021-05-24 23:47;roboduke;Changeset: d86f9164
Author:    Alexander Zuev <kizune@openjdk.org>
Date:      2021-05-25 06:46:22 +0000
URL:       https://git.openjdk.java.net/jdk/commit/d86f91642d7dcf829b8093ebed336d4386bff67a
;;;","2023-02-07 10:04;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk11u-dev/pull/1711
Date: 2023-02-07 17:54:13 +0000;;;","2023-03-15 21:26;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk11u-dev/pull/1807
Date: 2023-03-16 03:54:49 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Gradle :clean and :apps tasks fail on Windows if ANT_HOME contains spaces,JDK-8267059,5049472,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,mstrauss,mstrauss,mstrauss,2021-05-12 12:24,2022-01-17 07:26,2023-10-01 09:57,2022-01-07 03:48,jfx17,,,,,,,jfx18,javafx,,0,noreg-build,,,,,,,,,,,,,"On Windows, the *:clean* Gradle task fails when the ANT_HOME environment variable contains spaces. The error message is similar to:

*'C:\Program' is not recognized as an internal or external command, operable program or batch file.*",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,windows,,,,,"0|i2stdn:",9223372036854775807,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@1556b386,,,,,,,,,"2021-05-12 12:39;kcr;The :apps task will also fail in the same way.;;;","2022-01-07 03:48;roboduke;Changeset: 487e4b17
Author:    Michael Strauß <mstrauss@openjdk.org>
Committer: Kevin Rushforth <kcr@openjdk.org>
Date:      2022-01-07 11:46:50 +0000
URL:       https://git.openjdk.java.net/jfx/commit/487e4b17e6bfca754f8fccf2f720a1bf686d1102
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
tools/jpackage/share/RuntimePackageTest.java fails with NoSuchFileException,JDK-8267056,5049468,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,almatvee,enikitin,enikitin,2021-05-12 11:59,2021-05-26 17:29,2023-10-01 09:57,2021-05-20 17:45,17,,,,,,,17,tools,,0,sn_93,,,,,,,,,,,,,"Have only been seen in debug configurations so far. Seems to be failing always. Tail of the jtreg output:

[23:29:08.974] TRACE: assertEquals(0): Check command [pkgutil --expand ./test/output/RuntimePackageTest-1.0.pkg ./test/unpacked-pkg/data](4) exited with 0 code
[23:29:09.194] TRACE: exec: Execute [tar -C ./test/unpacked-pkg/unpacked/Applications -xvf ./test/unpacked-pkg/data/RuntimePackageTest-app.pkg/Payload](5); discard I/O...
[23:29:10.232] TRACE: exec: Done. Exit code: 0
[23:29:10.434] TRACE: assertEquals(0): Check command [tar -C ./test/unpacked-pkg/unpacked/Applications -xvf ./test/unpacked-pkg/data/RuntimePackageTest-app.pkg/Payload](5) exited with 0 code
[23:29:10.474] TRACE: Verify unpacked: [/System/Volumes/Data/mesos/work_dir/jib-master/install/2021-05-07-1633498.evgeny.nikitin.jdk/macosx-aarch64-debug.jdk/jdk-17/fastdebug/bin/jpackage --dest ./test/output --name RuntimePackageTest --type pkg --runtime-image /System/Volumes/Data/mesos/work_dir/jib-master/install/2021-05-07-1633498.evgeny.nikitin.jdk/macosx-aarch64-debug.jdk/jdk-17/fastdebug jpt-unpacked-folder ./test/unpacked-pkg/unpacked](11)
[23:29:10.671] [  FAILED  ] RuntimePackageTest.test; checks=5
[23:29:10.686] [ RUN      ] RuntimePackageTest.testUsrInstallDir
[23:29:10.735] TRACE: Actions: [[initialize], [create], [unpack], [verify-install], [finalize]]
[23:29:10.787] TRACE: Deleting [./testUsrInstallDir] directory recursively
[23:29:10.891] [       OK ] RuntimePackageTest.testUsrInstallDir; checks=0
[23:29:10.893] [ RUN      ] RuntimePackageTest.testUsrInstallDir2
[23:29:10.948] TRACE: Actions: [[initialize], [create], [unpack], [verify-install], [finalize]]
[23:29:10.958] TRACE: Deleting [./testUsrInstallDir2] directory recursively
[23:29:11.030] [       OK ] RuntimePackageTest.testUsrInstallDir2; checks=0
[23:29:11.036] [==========] 3 tests ran
[23:29:11.036] [  PASSED  ] 2 tests
[23:29:11.053] [  FAILED  ] 1 test, listed below
[23:29:11.060] [  FAILED  ] RuntimePackageTest.test; workDir=[./test]
[23:29:11.069] 1 FAILED TEST
----------System.err:(76/5504)----------
java.nio.file.NoSuchFileException: ./test/unpacked-pkg/unpacked/Applications/RuntimePackageTest
	at java.base/sun.nio.fs.UnixException.translateToIOException(UnixException.java:92)
	at java.base/sun.nio.fs.UnixException.rethrowAsIOException(UnixException.java:106)
	at java.base/sun.nio.fs.UnixException.rethrowAsIOException(UnixException.java:111)
	at java.base/sun.nio.fs.UnixFileAttributeViews$Basic.readAttributes(UnixFileAttributeViews.java:55)
	at java.base/sun.nio.fs.UnixFileSystemProvider.readAttributes(UnixFileSystemProvider.java:149)
	at java.base/java.nio.file.Files.readAttributes(Files.java:1849)
	at java.base/java.nio.file.FileTreeWalker.getAttributes(FileTreeWalker.java:219)
	at java.base/java.nio.file.FileTreeWalker.visit(FileTreeWalker.java:276)
	at java.base/java.nio.file.FileTreeWalker.walk(FileTreeWalker.java:322)
	at java.base/java.nio.file.FileTreeIterator.<init>(FileTreeIterator.java:71)
	at java.base/java.nio.file.Files.walk(Files.java:3919)
	at java.base/java.nio.file.Files.walk(Files.java:3974)
	at jdk.jpackage.test.JPackageCommand.lambda$assertAppLayout$29(JPackageCommand.java:724)
	at jdk.jpackage.test.Functional$ThrowingSupplier.lambda$toSupplier$0(Functional.java:71)
	at jdk.jpackage.test.JPackageCommand.assertAppLayout(JPackageCommand.java:724)
	at jdk.jpackage.test.PackageTest$Handler.verifyPackageInstalled(PackageTest.java:572)
	at jdk.jpackage.test.PackageTest$Handler.accept(PackageTest.java:529)
	at jdk.jpackage.test.PackageTest$2.accept(PackageTest.java:452)
	at jdk.jpackage.test.PackageTest$2.accept(PackageTest.java:396)
	at jdk.jpackage.test.Functional$ThrowingConsumer.lambda$toConsumer$0(Functional.java:41)
	at java.base/java.lang.Iterable.forEach(Iterable.java:75)
	at jdk.jpackage.test.PackageTest.lambda$runActions$20(PackageTest.java:360)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
	at jdk.jpackage.test.PackageTest.lambda$runActions$21(PackageTest.java:359)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
	at jdk.jpackage.test.PackageTest.runActions(PackageTest.java:358)
	at jdk.jpackage.test.RunnablePackageTest.run(RunnablePackageTest.java:51)
	at RuntimePackageTest.test(RuntimePackageTest.java:79)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:78)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at jdk.jpackage.test.MethodCall.accept(MethodCall.java:145)
	at jdk.jpackage.test.TestInstance.run(TestInstance.java:230)
	at jdk.jpackage.test.TKit.lambda$ignoreExceptions$6(TKit.java:155)
	at jdk.jpackage.test.TKit.lambda$runTests$4(TKit.java:140)
	at java.base/java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1625)
	at java.base/java.util.stream.ReferencePipeline$Head.forEach(ReferencePipeline.java:762)
	at jdk.jpackage.test.TKit.lambda$runTests$5(TKit.java:137)
	at jdk.jpackage.test.Functional$ThrowingRunnable.lambda$toRunnable$0(Functional.java:105)
	at jdk.jpackage.test.TKit.withExtraLogStream(TKit.java:123)
	at jdk.jpackage.test.TKit.runTests(TKit.java:136)
	at jdk.jpackage.test.Main.runTests(Main.java:79)
	at jdk.jpackage.test.Main.lambda$main$2(Main.java:75)
	at jdk.jpackage.test.Functional$ThrowingRunnable.lambda$toRunnable$0(Functional.java:105)
	at jdk.jpackage.test.TKit.withExtraLogStream(TKit.java:123)
	at jdk.jpackage.test.Main.main(Main.java:75)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:78)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at com.sun.javatest.regtest.agent.MainWrapper$MainThread.run(MainWrapper.java:127)
	at java.base/java.lang.Thread.run(Thread.java:831)
jdk.jpackage.test.Functional$ExceptionBox: java.lang.RuntimeException: 1 FAILED TEST
	at jdk.jpackage.test.Functional.rethrowUnchecked(Functional.java:161)
	at jdk.jpackage.test.Functional$ThrowingRunnable.lambda$toRunnable$0(Functional.java:107)
	at jdk.jpackage.test.TKit.withExtraLogStream(TKit.java:123)
	at jdk.jpackage.test.Main.main(Main.java:75)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:78)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at com.sun.javatest.regtest.agent.MainWrapper$MainThread.run(MainWrapper.java:127)
	at java.base/java.lang.Thread.run(Thread.java:831)
Caused by: java.lang.RuntimeException: 1 FAILED TEST
	at jdk.jpackage.test.Main.reportSummary(Main.java:130)
	at jdk.jpackage.test.Main.runTests(Main.java:90)
	at jdk.jpackage.test.Main.lambda$main$2(Main.java:75)
	at jdk.jpackage.test.Functional$ThrowingRunnable.lambda$toRunnable$0(Functional.java:105)
	... 8 more

JavaTest Message: Test threw exception: jdk.jpackage.test.Functional$ExceptionBox: java.lang.RuntimeException: 1 FAILED TEST
JavaTest Message: shutting down test

STATUS:Failed.`main' threw exception: jdk.jpackage.test.Functional$ExceptionBox: java.lang.RuntimeException: 1 FAILED TEST",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2stcr:",9223372036854775807,b24,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@3656b41f,,,,,,,,,"2021-05-20 17:45;roboduke;Changeset: 9eaa4afc
Author:    Alexander Matveev <almatvee@openjdk.org>
Date:      2021-05-21 00:44:39 +0000
URL:       https://git.openjdk.java.net/jdk/commit/9eaa4afc99b09f4704e4d641f95104be40b9ea66
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
bug in monitor locking/unlocking on ARM32 C1 due to uninitialized BasicObjectLock::_displaced_header,JDK-8267042,5049454,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,bulasevich,dcubed,dcubed,2021-05-12 10:19,2021-07-20 14:25,2023-10-01 09:57,2021-06-21 10:00,17,,,,,,,18,hotspot,,0,hgupdate-sync,jdk11u-fix-request,jdk11u-fix-yes,oraclejdk-na,sync,,,,,,,,,"On 5/12/21 1:02 PM, Chris Cole wrote:
> Hi,
>
> Not sure if this is the appropriate place or method to report an OpenJDK
> bug, if not please advise.
>
> I have discovered a bug with ARM32 C1 monitor locking/unlocking that can
> result in deadlock. The bug was introduced with JCK-8241234 ""Unify monitor
> enter/exit runtime entries"" [1]. This change introduced a call to
> ObjectSynchronizer::quick_entry() within the logic for
> Runtime1::monitorenter().
> If the monitor is inflated and already owned by the current thread, then
> ObjectSynchronizer::quick_entry() simply increments
> ObjectMonitor::_recursions and returns. In this case
> Runtime1::monitorenter() returns to the JIT compiled code without calling
> ""lock->set_displaced_header(markWord::unused_mark())"" (see [2]). For ARM32
> the _displaced_header field is not always initialized in JIT code before
> calling Runtime1::monitorenter() helper. If the uninitialized value of
> _displaced_header field on stack happens to be NULL, this causes an issue
> because the JIT code to exit the monitor first checks for a NULL
> _displaced_header as an indication for non-inflated recursive locking which
> is a noop for exiting the monitor (see [3]). This means that the
> Runtime1::monitorexit() helper is not called as required to exit this
> inflated monitor, and the ObjectMonitor::_recursions is not decremented as
> required. This leads to thread not unlocking the monitor when required and
> deadlock when another thread tries to lock the monitor.
>
> This bug is not present on AArch64 and x86, because the displaced header is
> initialized in JIT code with the ""unlocked object header"" value (which is
> non-zero) before calling Runtime1::monitorenter() helper (see [4] and [5]).
> Note sure about other CPU architectures.
>
> I see two ways to fix this.
> 1) In ObjectSynchronizer::quick_entry() move the
> ""lock->set_displaced_header(markWord::unused_mark())"" statement to before
> the ""if (owner == current)"" at line 340 in share/runtime/synchronizer.cpp
> (see [6]), so that Runtime1::monitorenter() helper logic always initializes
> the displaced header field as was the case before JCK-8241234.
> 2) For ARM32 add JIT code to initialize the displaced header field before
> calling Runtime1::monitorenter() helper as done for AArch64 and x86.
>
> Not sure which is better (or maybe both are required for some reason I am
> not aware of). I believe this ""displacted header"" on the stack can be
> looked at by stack walkers but I am not familiar with the exact details and
> if there are implications on this fix.
>
> The bug is also present in OpenJDK 11.0.10 and later (introduced by the
> backport of JDK-8241234 [1]).
>
> I/my company (Sage Embedded Software) has signed the Oracle Contributor
> Agreement (OCA) and have been granted access to JCK.
>
> The bug can be reproduced in my environment with the OpenJDK Community TCK
> testing of java.io.PipedReader that deadlocks, but because reproduction of
> the issue requires uninitialized stack field to be zero, it might not
> happen in some environments. I have a Java test case that can reproduce
> this issue on ARM in 32 bit mode. It is pasted inline below at the end of
> the email. There is a ""getZeroOnStack()"" method that I think helps get a
> zero into the uninitialized _displaced_header field. The test case source
> code is copied from OpenJDK java.io.PipedReader source code and then
> modified. It needs to be run with only C1 enabled (I am using minimal
> variant to enforce this) and the following command line options
> (-XX:-BackgroundCompilation -XX:CompileThreshold=500
> -XX:CompileOnly=""com.sageembedded.test.MonitorBugTest::receive""). The test
> case should run and then end with ""Source thread done"" and ""Reading
> complete"" output if the bug is not reproduced. If the monitor bug is
> reproduced the test case will not exit and the main thread will be
> deadlocked, with the main thread last printing ""read() before wait"" and
> missing ""read() after wait"" and ""Reading complete"". If useful I can provide
> the output of this test cause including -XX:PrintAssebly and logging that I
> added to ObjectSynchronizer::quick_entry() that shows uninitialized
> lock->_displaced_header and ObjectMonitor->_recursions continue to get
> incremented (into the 1000s) as the MonitorBugTest.receive() method is
> called in a loop.
>
> Please let me know if there is anything else that would be helpful. I hope
> to become active in the OpenJDK Community. My time is a little limited at
> the moment, so sometimes it might take a day to respond (I have 3 and 6
> year old kids). In the coming years I expect to have additional time to be
> more involved in the OpenJDK Community.
>
> Best regards,
> Chris Cole
> Sage Embedded Software LLC
>
> [1] https://bugs.openjdk.java.net/browse/JDK-8241234
> [2]
> https://github.com/openjdk/jdk/blob/dfe8833f5d9a9ac59857143a86d07f85769b8eae/src/hotspot/share/runtime/synchronizer.cpp#L343
> [3]
> https://github.com/openjdk/jdk/blob/dfe8833f5d9a9ac59857143a86d07f85769b8eae/src/hotspot/cpu/x86/c1_MacroAssembler_x86.cpp#L130
> [4]
> https://github.com/openjdk/jdk/blob/71b8ad45b4de6836e3bb2716ebf136f3f8ea2198/src/hotspot/cpu/aarch64/c1_MacroAssembler_aarch64.cpp#L95
> [5]
> https://github.com/openjdk/jdk/blob/dfe8833f5d9a9ac59857143a86d07f85769b8eae/src/hotspot/cpu/x86/c1_MacroAssembler_x86.cpp#L74
> [6]
> https://github.com/openjdk/jdk/blob/dfe8833f5d9a9ac59857143a86d07f85769b8eae/src/hotspot/share/runtime/synchronizer.cpp#L340",,,,,,,,,,,JDK-8269035,JDK-8270994,JDK-8270604,,,,,,,,,,,,,,,,,,,,JDK-8241234,,,,,,,,"2021-05-12 10:22;dcubed;MonitorBugTest.java;https://bugs.openjdk.org/secure/attachment/94608/MonitorBugTest.java",,,,,,,,,,,aarch32,,,,,,,,,generic,,,,,"0|i2st9n:",9223372036854775807,b03,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,,,"2021-05-12 10:23;dcubed;Attached Chris Cole's test as MonitorBugTest.java.;;;","2021-05-13 08:59;bulasevich;I reproduced the issue on the ARM32 client VM. It really goes to the deadlock.
The displaced header should be updated the same way with aarch64 and x86.;;;","2021-05-17 14:08;dcubed;Another email from Chris Cole:

On 5/16/21 7:50 PM, Chris Cole wrote:
> Hi Dan,
>
> I had some additional information to share regarding JDK-8267042
> (after looking into possible fix I discovered that if
> -XX:-UseFastLocking develop flag is used, this deadlock issue can be
> reproduced on other architectures like aarch63, x86_64, etc).
>
> I see that Boris Ulasevich is the Assignee in JDK Bug System and
> provided a comment there. He suggested ""The displaced header should be
> updated the same way with aarch64 and x86"" which was one of two
> possible solutions I suggested. But this leaves all platforms broken
> when -XX:-UseFastLocking is enabled, so the other suggested fix I
> suggested may also be required.
>
> Anyway, is the best way for me to communicate on this issue via the
> hotspot-dev@openjdk.java.net mailing list? It seems that my initial
> email was not actually sent out on the list, at least according to the
> archive (https://mail.openjdk.java.net/pipermail/hotspot-dev/2021-May/date.html)?
> Does the list filter the messages based on subject or sender?
>
> I did review information at https://openjdk.java.net/contribute/ but
> wasn't sure if the mailing list is still the place to communicate and
> if my messages would get through.
>
> Thanks for your support and time!
>
> Chris Cole
> Sage Embedded Software;;;","2021-05-18 11:45;mseledtsov;ILW = HLM = P3;;;","2021-05-19 11:40;dcubed;Another email from Chris Cole:

On 5/19/21 1:31 AM, Chris Cole wrote:
> Hi All,
>
> I have continued to further investigate this bug that I reported and
> have some additional information.
>
> I believe that this issue is similar to JDK-8153107  ""enabling
> ObjectSynchronizer::quick_enter() on ARM64 causes hangs"" (see [1]),
> this impacted C2 on both ARM32 and ARM64. The fix for that issue (see
> [2]) fixed MacroAssembler::fast_lock() that is used by C2. When this
> fix was made, I believe only C2 was using
> ObjectSynchronizer::quick_enter(). Now (version 11.0.10+ and 15+) that
> C1 is using ObjectSynchronizer::quick_enter() due to JDK-8241234, a
> similar change to C1_MacroAssembler::lock_object() used by C1 is
> required. The following change to unconditionally store to the
> displaced header field should fix things for C1.
>
> diff --git a/src/hotspot/cpu/arm/c1_MacroAssembler_arm.cpp
> b/src/hotspot/cpu/arm/c1_MacroAssembler_arm.cpp
> index 9d5c82dceb9..9a628eb7de5 100644
> --- a/src/hotspot/cpu/arm/c1_MacroAssembler_arm.cpp
> +++ b/src/hotspot/cpu/arm/c1_MacroAssembler_arm.cpp
> @@ -235,7 +235,8 @@ int C1_MacroAssembler::lock_object(Register hdr,
> Register obj,
>    sub(tmp2, hdr, SP, eq);
>    movs(tmp2, AsmOperand(tmp2, lsr, exact_log2(os::vm_page_size())), eq);
>    // If 'eq' then OK for recursive fast locking: store 0 into a lock record.
> -  str(tmp2, Address(disp_hdr, mark_offset), eq);
> +  // set to non zero otherwise (see discussion in JDK-8267042)
> +  str(tmp2, Address(disp_hdr, mark_offset));
>    b(fast_lock_done, eq);
>    // else need slow case
>    b(slow_case);
>
> This should fix the specific issue that I was seeing and that is
> reproduce with test case I provided.
>
> I also reviewed the code to see if there were any other possible issue
> related to Runtime1::monitorenter() not always initializing displaced
> header field due to ObjectSynchronizer::quick_enter(). I found that if
> the -XX:-UseFastLocking develop flag is used (C1 doesn't use any
> inline monitor lock/unlock code and just calls the
> Runtime1::monitorenter() and Runtime1::monitorexit()), then the test
> case will reproduce deadlock on any of the platforms (arm32, aarch64,
> x86_64, etc) due to uninitialized displaced header field. Here is a
> fix for that. (Note that this change below, makes the change above to
> c1_MacroAssembler_arm.cpp unnecessary).
>
> diff --git a/src/hotspot/share/runtime/synchronizer.cpp
> b/src/hotspot/share/runtime/synchronizer.cpp
> index 98afe838c49..db3eb255778 100644
> --- a/src/hotspot/share/runtime/synchronizer.cpp
> +++ b/src/hotspot/share/runtime/synchronizer.cpp
> @@ -355,11 +355,6 @@ bool ObjectSynchronizer::quick_enter(oop obj, Thread* self,
>      // Case: light contention possibly amenable to TLE
>      // Case: TLE inimical operations such as nested/recursive synchronization
>
> -    if (owner == self) {
> -      m->_recursions++;
> -      return true;
> -    }
> -
>      // This Java Monitor is inflated so obj's header will never be
>      // displaced to this thread's BasicLock. Make the displaced header
>      // non-NULL so this BasicLock is not seen as recursive nor as
> @@ -372,6 +367,11 @@ bool ObjectSynchronizer::quick_enter(oop obj, Thread* self,
>      // and last are the inflated Java Monitor (ObjectMonitor) checks.
>      lock->set_displaced_header(markWord::unused_mark());
>
> +    if (owner == self) {
> +      m->_recursions++;
> +      return true;
> +    }
> +
>      if (owner == NULL && m->try_set_owner_from(NULL, self) == NULL) {
>        assert(m->_recursions == 0, ""invariant"");
>        return true;
>
> I am also reviewing the biased_locking_enter() call from
> C1_MacroAssembler::lock_object(), this code path can call
> Runtime1::monitorenter() without initializing the displaced header
> field. But in this code path it might not be possible for
> ObjectSynchronizer::quick_enter() to return ""true"" without calling
> lock->set_displaced_header(markWord::unused_mark()), this would
> require current thread to own inflated monitor which seems to not be
> possible in this case when biased_locking_enter() is calling
> Runtime1::monitorenter().
>
> Anyway, I will continue to review the code to make sure this aren't
> any other issues related to this issue.
>
> Thanks,
> Chris
>
> [1] https://bugs.openjdk.java.net/browse/JDK-8153107
> [2] http://hg.openjdk.java.net/jdk/jdk/rev/3e66d204af9b;;;","2021-05-19 11:40;dcubed;Response from Boris:

On 5/19/21 5:20 AM, Boris Ulasevich wrote:
> Hi Chris,
>
> I agree that the problem is in C1_MacroAssembler::lock_object.
>
> What I do not like in your fix is
> - an arbitrary non-zero value is put into disp_hdr address for 'ne' case.
> - there is a similar code pattern in SharedRuntime::generate_native_wrapper - should not it be fixed too?
> - the second comment in hdr bits manipulation code is wrong: ""// -2- test (hdr - SP) if the low two bits are 0""
>
> regards,
> Boris ;;;","2021-05-20 12:33;dcubed;Response from Chris:

On 5/20/21 1:13 PM, Chris Cole wrote:
> Hi Boris,
>
> Thanks for looking into this and your support. See comments below.
>
> On Wed, May 19, 2021 at 2:20 AM Boris Ulasevich
> <boris.ulasevich@bell-sw.com> wrote:
>>
>> Hi Chris,
>>
>> I agree that the problem is in C1_MacroAssembler::lock_object.
>
> I believe that this issue can be fixed by initializing the displaced
> header in either
> C1_MacroAssembler::lock_object/SharedRuntime::generate_native_wrapper
> or in ObjectSynchronizer::quick_enter with changes provided in
> previous email.
>
> I would suggest that where the problem/fix is located depends on what
> the ""interface contract"" is for initializing the displaced header
> between JIT inlined code and the monitor enter runtime helper. This
> ""interface contract"" is not documented anywhere so it is defined by
> how things are coded. Before the introduction of
> ObjectSynchronizer::quick_enter(), the runtime helper would always
> initialize the displaced header as appropriate. When
> ObjectSynchronizer::quick_enter() was introduced it changed the
> ""interface contract"" of the monitor enter runtime helper because there
> is one special case where it no longer always initializes the
> displaced header as appropriate.
>
> I believe that the better design and ""interface contract"" is to have
> the runtime helper always set the displaced header as appropriate
> (apply change to ObjectSynchronizer::quick_enter and no other changes)
> for the following reasons.
> - Less coupling between JIT code and runtime helper, this coupling
> helped lead to a number of time consuming bugs including 8153107,
> 8077392, and this one.
> - Every place that slow case runtime helper is called, special care is
> required to initialize displaced header, rather then in just one place
> in ObjectSynchronizer::quick_enter.
> - This coupling is also exposed through the
> JVMCIRuntime::monitorenter(JavaThread, oopDesc, BasicLock) interface
> and without updates to ObjectSynchronizer::quick_enter(), anyone (like
> Graal, etc) calling this interface needs to make sure
> BasicLock->_displaced_header is initialized to a non-zero value. My
> guess is that without removing this requirement there may be future
> deadlock issues. Also current users use JVMCIRuntime::monitorenter()
> should be reviewed to ensure that they are initializing
> BasicLock->_displaced_header.
> - JIT inline code and JVMCIRuntime::monitorenter users can possibly be
> smaller and faster, if the JIT inline code determines that the runtime
> helper is needed it can simply call this without first having to
> initialize the displaced header. Also note that JIT code may not have
> the information to know exactly what to set displaced herder to, so I
> will set it to non-zero and the runtime helper may overwrite this
> value with something different based on the additional logic in the
> slow path.
> - Supports fixing -XX:-UseFastLocking develop flag without additional changes
>
> But given that all code except ARM32 C1, assumes an ""interface
> contract"" that has special case for when displaced header needs to be
> initialized I am not sure that there will be much support for making
> changes that impact all other architectures in the context of the
> ARM32 bug fix (for other architectures there could be a redundant
> setting displaced header to non-zero in
> ObjectSynchronizer::quick_enter()).
>
> Anyway, just my thoughts... I am fine with either location
> (C1_MacroAssembler::lock_object/SharedRuntime::generate_native_wrapper
> or ObjectSynchronizer::quick_enter) to fix this ARM32 bug.
>
>> What I do not like in your fix is
>> - an arbitrary non-zero value is put into disp_hdr address for 'ne' case.
>
> I somewhat agree that in general the aesthetics of using an arbitrary
> non-zero value isn't ideal. But in this case I believe setting to a
> specific non-zero value would require an additional instruction and I
> don't think this is worth it. Note that this JIT code is inlined to
> every compiled synchronized method and block, so that one extra
> instruction gets multiplied by a large number and increases memory
> usage, especially important for ARM32 with devices generally having
> limited memory.
>
> The code change for C1_MacroAssembler::lock_object is taken from what
> is done for ARM32 C2 code in C2_MacroAssembler::fast_lock(),
> that is using an arbitrary non-zero value (see
> https://github.com/openjdk/jdk/blob/b7b6acd9b1cafb791827e151712836c4e7140db5/src/hotspot/cpu/arm/c2_MacroAssembler_arm.cpp#L122).
> I would suggest that all places should be consistent. Also when other
> architectures call the runtime helper, the displaced header is
> initialize with ""unlocked object header"" value due to failed attempt
> to do a stack lock and this is somewhat arbitrary (and somewhat
> misleading) (see
> https://github.com/openjdk/jdk/blob/dfe8833f5d9a9ac59857143a86d07f85769b8eae/src/hotspot/cpu/x86/c1_MacroAssembler_x86.cpp#L74).
>
> Note that in this context the displaced header is acting like a
> boolean, false = 0 and any other value is true.
>
> So to keep the code small and to be consistent with ARM32 C2, I would
> suggest just using non-zero value. Maybe a better comment in the code
> would be helpful, as follows.
>
> diff --git a/src/hotspot/cpu/arm/c1_MacroAssembler_arm.cpp
> b/src/hotspot/cpu/arm/c1_MacroAssembler_arm.cpp
> index 9d5c82dceb9..44ddc3a9da9 100644
> --- a/src/hotspot/cpu/arm/c1_MacroAssembler_arm.cpp
> +++ b/src/hotspot/cpu/arm/c1_MacroAssembler_arm.cpp
> @@ -235,7 +235,11 @@ int C1_MacroAssembler::lock_object(Register hdr,
> Register obj,
>    sub(tmp2, hdr, SP, eq);
>    movs(tmp2, AsmOperand(tmp2, lsr, exact_log2(os::vm_page_size())), eq);
>    // If 'eq' then OK for recursive fast locking: store 0 into a lock record.
> -  str(tmp2, Address(disp_hdr, mark_offset), eq);
> +  // If 'ne' then initialize displaced header with this non-zero value
> +  // to make sure monitor exit is not treated as non-inflated recursive unlock,
> +  // the runtime helper used in slow case doesn't always do this for us
> +  // (see discussion in JDK-8267042)
> +  str(tmp2, Address(disp_hdr, mark_offset));
>    b(fast_lock_done, eq);
>    // else need slow case
>    b(slow_case);
>
>
>> - there is a similar code pattern in
>> SharedRuntime::generate_native_wrapper - should not it be fixed too?
>
> Good catch, yes this needs to be fixed as well. I would suggest same
> change as for C1_MacroAssembler::lock_object, as follows.
>
> diff --git a/src/hotspot/cpu/arm/sharedRuntime_arm.cpp
> b/src/hotspot/cpu/arm/sharedRuntime_arm.cpp
> index 341cf63c4c9..7de4306aedb 100644
> --- a/src/hotspot/cpu/arm/sharedRuntime_arm.cpp
> +++ b/src/hotspot/cpu/arm/sharedRuntime_arm.cpp
> @@ -1184,7 +1184,11 @@ nmethod*
> SharedRuntime::generate_native_wrapper(MacroAssembler* masm,
>      __ sub(Rtemp, mark, SP, eq);
>      __ movs(Rtemp, AsmOperand(Rtemp, lsr, exact_log2(os::vm_page_size())), eq);
>      // If still 'eq' then recursive locking OK: set displaced header to 0
> -    __ str(Rtemp, Address(disp_hdr,
> BasicLock::displaced_header_offset_in_bytes()), eq);
> +    // If 'ne' then initialize displaced header with this non-zero value
> +    // to make sure monitor exit is not treated as non-inflated
> recursive unlock,
> +    // the runtime helper used in slow case doesn't always do this for us
> +    // (see discussion in JDK-8267042)
> +    __ str(Rtemp, Address(disp_hdr,
> BasicLock::displaced_header_offset_in_bytes()));
>      __ b(lock_done, eq);
>      __ b(slow_lock);
>
>> - the second comment in hdr bits manipulation code is wrong: ""// -2-
>> test (hdr - SP) if the low two bits are 0""
>
> What are you suggesting is wrong? If I read this as a comment about
> the two instructions that follow (sub and movs) then seems to make
> sense to me, but I might be missing something. Also I would think this
> is not really related to this issue and addressed in a separate place
> issue?
>
> Thanks again,
> Chris
>
;;;","2021-06-18 09:44;dcubed;Robo Duke added a comment - 17 minutes ago
Changeset: 8f2456e5
Author: Boris Ulasevich <bulasevich@openjdk.org>
Date: 2021-06-18 16:25:25 +0000
URL: https://git.openjdk.java.net/jdk/commit/8f2456e5b058a88730ec383d88634737849afdfb;;;","2021-06-18 09:45;dcubed;Fix was pushed while main bug was targeted to '17'. Reset the main bug to fixed in '18' and copied the Robo Duke entry here.;;;","2021-06-18 10:45;bulasevich;Daniel, what is the process to get this fix in jdk-17?;;;","2021-06-18 11:46;dcubed;We're in JDP1 for JDK17. See https://openjdk.java.net/jeps/3.

This is a P3 bug so you can do a PR for this bug and integrate once
you have reviewer approval. No Release Team permission is required.;;;","2021-06-20 11:57;bulasevich;Daniel, thank you.
One more question. Can I change JDK-8269035 Type Backport->Bug to resolve integration issue?:
> https://github.com/openjdk/jdk17/pull/102
> Issue of type Backport is not allowed for integrations;;;","2021-06-20 18:12;dholmes;[~bulasevich] No you have to use the main bug id, JDK-8267042, for the integration, not the backport ID.;;;","2021-06-21 10:03;dcubed;[~bulasevich] - You did not have to reopen this main bug in order to integrate
the JDK17 backport. When you integrated your backport (using the main bug ID),
the system would then use the existing backport bug ID for adding the JDK17
integration notification.;;;","2021-06-21 10:07;bulasevich;Ok. Thank you!;;;","2021-06-21 16:10;roboduke;Changeset: c294ae4f
Author:    Boris Ulasevich <bulasevich@openjdk.org>
Date:      2021-06-21 06:04:57 +0000
URL:       https://git.openjdk.java.net/jdk/commit/c294ae4fed59c7e303416346cc4b189a48bc1ab1
;;;","2021-07-13 12:43;mdoerr;Fix Request (11u):
11u is also affected. Fix is simple and applies cleanly: https://github.com/openjdk/jdk11u-dev/pull/129;;;",,,,,,,,,,,,,,,,,
compiler/jvmci/compilerToVM/IsMatureTest.java fails with Unexpected isMature state for multiple times invoked method: expected false to equal true,JDK-8266988,5049391,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,iveresov,enikitin,enikitin,2021-05-12 07:02,2022-08-01 22:39,2023-10-01 09:57,2021-07-23 15:20,17,18,,,,,,18,hotspot,,0,hs-comp-triaged,intermittent,jdk11u-jvmci-defer,jvmci,noreg-self,oracle-triage-17,testbug,,,,,,,"Has only been seen with '-XX:TieredStopAtLevel=2' so far. Some failures have also '-Xcomp'. A repetition of the JDK-8219555?

----------System.err:(17/1263)----------
java.lang.RuntimeException: Unexpected isMature state for multiple times invoked method: expected false to equal true
	at jdk.test.lib.Asserts.fail(Asserts.java:594)
	at jdk.test.lib.Asserts.assertEquals(Asserts.java:205)
	at jdk.test.lib.Asserts.assertEQ(Asserts.java:178)
	at compiler.jvmci.compilerToVM.IsMatureTest.test(IsMatureTest.java:83)
	at compiler.jvmci.compilerToVM.IsMatureTest.main(IsMatureTest.java:59)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:78)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at com.sun.javatest.regtest.agent.MainWrapper$MainThread.run(MainWrapper.java:127)
	at java.base/java.lang.Thread.run(Thread.java:831)",,,,,,,,,,,JDK-8273064,JDK-8271467,,,,,,,,,,,,,,,,,,,,,JDK-8219555,JDK-8291656,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2ssvn:",9223372036854775807,b08,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2021-05-12 18:23;dlong;[~iveresov], please take a look at this.;;;","2021-07-23 12:39;iveresov;The test is not designed to function properly with -XX:TieredStopAtLevel=2. While this will create an MDO, methods are not going to be profiled and hence not doing to be ""mature"".;;;","2021-07-23 15:20;roboduke;Changeset: 7468bbcd
Author:    Igor Veresov <iveresov@openjdk.org>
Date:      2021-07-23 22:18:51 +0000
URL:       https://git.openjdk.java.net/jdk/commit/7468bbcd647dc525ca75c7fb29d52c26c9c5e528
;;;","2022-01-19 17:39;roboduke;Changeset: f79ea823
Author:    Ramkumar Sunderbabu <rsunderbabu@openjdk.org>
Committer: Abdul Kolarkunnu <akolarkunnu@openjdk.org>
Date:      2021-08-27 08:55:53 +0000
URL:       https://git.openjdk.java.net/jdk17u/commit/f79ea82331718509b34c01297df869851c8641e1
;;;","2022-01-20 05:45;roboduke;Changeset: f79ea823
Author:    Ramkumar Sunderbabu <rsunderbabu@openjdk.org>
Committer: Abdul Kolarkunnu <akolarkunnu@openjdk.org>
Date:      2021-08-27 08:55:53 +0000
URL:       https://git.openjdk.java.net/jdk17u-dev/commit/f79ea82331718509b34c01297df869851c8641e1
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
duplicate property key in java.sql.rowset resource bundle,JDK-8266974,5049349,Bug,Resolved,JDK,JDK,software,duke,,,P5,Fixed,lancea,webbuggrp,webbuggrp,2021-05-11 23:50,2023-02-24 13:37,2023-10-01 09:57,2022-02-02 13:04,11,17,,,,,,19,core-libs,,0,dcsaw,jdk11u-fix-request,jdk11u-fix-yes,jdk17u-fix-request,jdk17u-fix-yes,reproducer-yes,webbug,,,,,,,"ADDITIONAL SYSTEM INFORMATION :
$>java -version
java version ""11.0.4"" 2019-07-16 LTS
Java(TM) SE Runtime Environment 18.9 (build 11.0.4+10-LTS)
Java HotSpot(TM) 64-Bit Server VM 18.9 (build 11.0.4+10-LTS, mixed mode)

A DESCRIPTION OF THE PROBLEM :
there are two property keys named ""cachedrowsetimpl.invalidcol"" in module java.sql.rowset.
location: com.sum.rowset#RowSetResourceBundle.properties(line 20, 21)


",,,,,,,,,,,JDK-8303200,JDK-8303199,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2ssmb:",9223372036854775807,b09,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@57fef174,,,,,,,,,"2021-05-12 06:48;tongwan;In JDK 11:
https://hg.openjdk.java.net/jdk/jdk11/file/8c5d7b36da02/jdk/src/share/classes/com/sun/rowset/RowSetResourceBundle.properties#l35
In JDK 17:
https://github.com/openjdk/jdk/blob/master/src/java.sql.rowset/share/classes/com/sun/rowset/RowSetResourceBundle.properties#L35;;;","2022-01-25 02:53;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/7212
Date: 2022-01-25 10:47:41 +0000;;;","2022-02-02 13:04;roboduke;Changeset: e3d5c9e7
Author:    Masanori Yano <myano@openjdk.org>
Committer: Lance Andersen <lancea@openjdk.org>
Date:      2022-02-02 21:02:19 +0000
URL:       https://git.openjdk.java.net/jdk/commit/e3d5c9e7c4ab210ae7a4417a47632603910744a1
;;;","2023-01-19 22:01;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/1091
Date: 2023-01-20 05:53:29 +0000;;;","2023-01-19 22:08;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk11u-dev/pull/1666
Date: 2023-01-17 11:18:08 +0000;;;","2023-02-20 13:52;clanger;Fix request (17u, 11u) on behalf of GitHub user shruacha1234:
These changes remove duplicate property key in java.sql.rowset resource bundle. Tier1 testing shows no issues. The risk is low.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,
Ignore test.com.sun.webkit.LocalStorageAccessTest,JDK-8266968,5049366,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,ajoseph,ajoseph,ajoseph,2021-05-12 04:06,2021-05-14 14:51,2023-10-01 09:57,2021-05-12 18:54,jfx17,,,,,,,jfx17,javafx,,0,testbug,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8265661,,,,,,,,,,,,,,,,,,,,,,,,,,,,windows,,,,,"0|i2ssq3:",9223372036854775807,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@5a8b92bd,,,,,,,,,"2021-05-12 18:54;roboduke;Changeset: 389e8c04
Author:    Arun Joseph <ajoseph@openjdk.org>
Date:      2021-05-13 01:53:47 +0000
URL:       https://git.openjdk.java.net/jfx/commit/389e8c04c42bbc19eebbade69ed175c7e56cf65d
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
debug.cpp utility find() should print Java Object fields.,JDK-8266967,5049363,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,kevinw,kevinw,kevinw,2021-05-12 02:58,2022-10-18 02:57,2023-10-01 09:57,2021-06-07 15:27,,,,,,,,17,hotspot,,0,jdk11u-fix-request,jdk11u-fix-yes,,,,,,,,,,,,"The src/hotspot/share/utilities/debug.cpp utilities which print Java object details, only print full details (including object fields) in debug builds.  Product builds are limited to only printing the basic oop/klass pointer details.

As we can perform debugging on product builds, as well as debug builds,
this limitation should be removed.  The FieldPrinter in instancelass.hpp should not be excluded from product builds.",,,,,,,,,,,JDK-8295463,JDK-8293946,JDK-8292193,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,generic,,,,,,,,,generic,,,,,"0|i2sspf:",9223372036854775807,b26,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,,,"2021-06-07 15:27;roboduke;Changeset: 5e557d86
Author:    Kevin Walls <kevinw@openjdk.org>
Date:      2021-06-07 22:26:13 +0000
URL:       https://git.openjdk.java.net/jdk/commit/5e557d8650d81f9f81938892de28a6dd8fea98b0
;;;","2022-10-12 05:21;goetz;Fix request [11u]

I backport this for parity with 11.0.18-oracle.
Small risk, only debug codeing although in release build.
I had to resolve several simple mismatches.
SAP nighlty testing passed;;;","2022-10-12 05:26;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk11u-dev/pull/1451
Date: 2022-10-12 12:18:49 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Wrong CSS properties are applied to other nodes after fix for JDK-8204568,JDK-8266966,5049362,Bug,Resolved,JDK,JDK,software,duke,,,P2,Fixed,arapte,jpereda,jpereda,2021-05-12 02:42,2021-06-01 15:14,2023-10-01 09:57,2021-05-17 20:30,8u301,jfx11.0.12,jfx17,,,,,jfx17,javafx,,0,CPU21_07-critical-approved,CPU21_07-critical-SQE-OK,regression,regression_8204568,sn_93,,,,,,,,,"After JDK-8204568 was integrated, running with 17-ea+3 or later, under certain conditions it happens that some nodes get wrong CSS properties from other nodes.

The attached test case shows that after hiding the stage, when showing it again the Labels after the Button take the button's padding and background properties.

The test sets by CSS a font size different than 13 px (default for labeled controls). Using 13 px or removing it works fine. 

Also, a Button and some other controls like a CheckBox, a ComboBox or a Spinner are required in the scene.

After pressing the button, that simply hides and shows the stage again (see AfterHideAndShow attached pic), the logs from CssStyleHelper::recalculateRelativeSizeProperties show that these properties are wrongly set for Label ""Text 2"" (also for ""Text 4""):

-fx-padding, call applyStyle: ObjectProperty [bean: Label@5cc81f36[styleClass=label]'Text 2', name: padding, value: Insets [top=0.0, right=0.0, bottom=0.0, left=0.0]], value =Insets [top=4.3, right=8.7, bottom=4.3, left=8.7], originOfCalculatedValue=USER_AGENT
-fx-region-background, call applyStyle: ObjectProperty [bean: Label@5cc81f36[styleClass=label]'Text 2', name: background, value: null], value =javafx.scene.layout.Background@4d573d15, originOfCalculatedValue=USER_AGENT

Running with 17-ea+2 or lower, or reverting the fix for JDK-8204568, solves the issue.",,,,,,,,,,,JDK-8267310,JDK-8267335,JDK-8267328,,,,,,,,,,,,,,,,,,,,,,,,JDK-8204568,,,,"2021-05-12 02:35;jpereda;AfterHideAndShow.png;https://bugs.openjdk.org/secure/attachment/94604/AfterHideAndShow.png","2021-05-12 02:35;jpereda;InitialStage.png;https://bugs.openjdk.org/secure/attachment/94603/InitialStage.png","2021-05-12 02:33;jpereda;TestCSS.java;https://bugs.openjdk.org/secure/attachment/94606/TestCSS.java","2021-05-12 02:33;jpereda;styles.css;https://bugs.openjdk.org/secure/attachment/94605/styles.css",,,,,,,,,,,,,,,,,,,,,,"0|i2ssp7:",9223372036854775807,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@67282485,,,,,,,,,"2021-05-13 00:46;arapte;Issue does not occur when style is set using setStyle(""-fx-font-size: 15px;"") method.;;;","2021-05-17 20:30;roboduke;Changeset: 93de5840
Author:    Ambarish Rapte <arapte@openjdk.org>
Date:      2021-05-18 03:29:29 +0000
URL:       https://git.openjdk.java.net/jfx/commit/93de5840b19868fbe8850b846418c3f6f72df256
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Remove safepoint poll introduced in 8262443 due to reentrance issue,JDK-8266963,5049359,Bug,Closed,JDK,JDK,software,duke,,,P2,Fixed,rehn,yyang,yyang,2021-05-12 02:34,2021-07-08 15:55,2023-10-01 09:57,2021-05-26 05:27,17,,,,,,,17,hotspot,,0,noreg-hard,sync,,,,,,,,,,,,"Created on behalf of yude.lyd@alibaba-inc.com
-------------

Shenandoah hangs when running specjvm2008 derby using
java -Xmx24g -Xms24g -XX:ParallelGCThreads=16 -XX:+UseShenandoahGC -XX:-TieredCompilation -Xlog:gc*=debug,handshake=trace:file=510s.log:tid:filesize=200m -jar SPECjvm2008.jar -ict -coe -i 5 derby

The reason is that there is a reentrant handshake with the following stacktrace
""BenchmarkThread derby 45"" #100 prio=5 os_prio=0 cpu=17601.80ms elapsed=29.87s tid=0x00007f0fa41adc10 nid=0x8c82 runnable  [0x00007f0eb72f1000]
   java.lang.Thread.State: RUNNABLE
Native frames: (J=compiled Java code, j=interpreted, Vv=VM code, C=native code)
V  [libjvm.so+0x7b07b4]  HandshakeState::process_by_self()+0x54
V  [libjvm.so+0xcbbd10]  SafepointMechanism::process(JavaThread*)+0x60
V  [libjvm.so+0xcbc04f]  SafepointMechanism::process_if_requested_slow(JavaThread*)+0xf
V  [libjvm.so+0x793af8]  GenerateOopMap::do_interpretation(Thread*)+0x1a8
V  [libjvm.so+0x793d56]  GenerateOopMap::compute_map(Thread*)+0x256
V  [libjvm.so+0xbf9794]  OopMapForCacheEntry::compute_map(Thread*) [clone .part.0]+0x54
V  [libjvm.so+0xbfaabb]  OopMapCache::compute_one_oop_map(methodHandle const&, int, InterpreterOopMap*)+0x1bb
V  [libjvm.so+0xb9a8de]  Method::mask_for(int, InterpreterOopMap*)+0xae
V  [libjvm.so+0x6bf73b]  frame::oops_interpreted_do(OopClosure*, RegisterMap const*, bool) const+0x17b
V  [libjvm.so+0xe84d5e]  JavaThread::oops_do_frames(OopClosure*, CodeBlobClosure*) [clone .part.0]+0x6e
V  [libjvm.so+0xd051c3]  ShenandoahUpdateThreadClosure::do_thread(Thread*)+0x83
V  [libjvm.so+0x7b03c3]  HandshakeOperation::do_handshake(JavaThread*)+0x43
V  [libjvm.so+0x7b05c6]  HandshakeState::process_self_inner()+0x136
V  [libjvm.so+0x7b07b4]  HandshakeState::process_by_self()+0x54
V  [libjvm.so+0xcbbd10]  SafepointMechanism::process(JavaThread*)+0x60
V  [libjvm.so+0xcbc04f]  SafepointMechanism::process_if_requested_slow(JavaThread*)+0xf
V  [libjvm.so+0xe8d655]  JavaThread::check_special_condition_for_native_trans(JavaThread*)+0x95
j  java.io.RandomAccessFile.writeBytes([BII)V+0 java.base@17-internal
J 1411 c2 java.io.RandomAccessFile.write([BII)V java.base@17-internal (8 bytes) @ 0x00007f1048739468 [0x00007f1048739420+0x0000000000000048]
j  org.apache.derby.impl.store.raw.log.LogAccessFile.writeToLog([BII)V+25
j  org.apache.derby.impl.store.raw.log.LogAccessFile.flushDirtyBuffers()V+92
j  org.apache.derby.impl.store.raw.log.LogToFile.flush(JJ)V+220
J 1314 c2 org.apache.derby.impl.store.raw.log.LogToFile.flush(Lorg/apache/derby/iapi/store/raw/log/LogInstant;)V (39 bytes) @ 0x00007f104899c218 [0x00007f104899c1a0+0x0000000000000078]
J 1394 c2 org.apache.derby.impl.store.raw.xact.Xact.commit(I)Lorg/apache/derby/iapi/store/raw/log/LogInstant; (13 bytes) @ 0x00007f10489df7e8 [0x00007f10489df5a0+0x0000000000000248]
J 2822 c2 org.apache.derby.impl.store.access.RAMTransaction.commit()V (21 bytes) @ 0x00007f1048c668d4 [0x00007f1048c66840+0x0000000000000094]
j  org.apache.derby.impl.sql.conn.GenericLanguageConnectionContext.doCommit(ZZIZ)V+307
J 2453 c2 spec.benchmarks.derby.DerbyHarness$Client.handleAccounts()V (471 bytes) @ 0x00007f1048b7da78 [0x00007f1048b7cc40+0x0000000000000e38]
j  spec.benchmarks.derby.DerbyHarness$Client.run()V+1
j  spec.benchmarks.derby.DerbyHarness.<init>(IIII)V+99
j  spec.benchmarks.derby.DerbyHarness.main(IIII)V+10
j  spec.benchmarks.derby.Main.runBenchmark(I)J+34
j  spec.benchmarks.derby.Main.harnessMain()V+4
j  spec.harness.BenchmarkThread.runLoop(Lspec/harness/results/IterationResult;)Lspec/harness/results/LoopResult;+74
j  spec.harness.BenchmarkThread.executeIteration()Z+74
j  spec.harness.BenchmarkThread.run()V+1
v  ~StubRoutines::call_stub
V  [libjvm.so+0x821375]  JavaCalls::call_helper(JavaValue*, methodHandle const&, JavaCallArguments*, Thread*)+0x2a5
V  [libjvm.so+0x822cf3]  JavaCalls::call_virtual(JavaValue*, Handle, Klass*, Symbol*, Symbol*, Thread*)+0x1d3
V  [libjvm.so+0x8e3c00]  thread_entry(JavaThread*, Thread*)+0x70
V  [libjvm.so+0xe877e0]  JavaThread::thread_main_inner()+0xd0
V  [libjvm.so+0xe8abae]  Thread::call_run()+0xde
V  [libjvm.so+0xc0cadf]  thread_native_entry(Thread*)+0xdf

Aborted

This handshake blocks the Java Thread that tries to process it. And the VM Thread spins in VM_HandshakeAllThreads::doit(). From the outside, we can observe that the java process freezes and not responsive to Ctrl+C.

A simple fix is to check for reentrant handshake
https://github.com/linade/jdk/commit/45b533e72c5a1c108667ef3bb9675c72896cf5ec
I'm looking forward to some expert's opinion on this.

-----------
Edit:
Changed title as this is not Shenandoah-specific;
The above suggested fix is incorrect. A proper fix is to remove the safepoint poll introduced in 8262443.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8262443,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2ssoj:",9223372036854775807,b24,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,Not verified,,"2021-05-13 05:47;zgu;I don't think it is Shenandoah specific. 

Robbin, could you take a look? You can re-assign to me if you think otherwise.

Thanks.;;;","2021-05-14 08:31;kbarrett;Changed the subcomponent from ""gc"" to ""runtime"", on the assumption that [~zgu] is correct.  (Also removed not-meaningful ""runtime"" label.)  Change it back if that turns out to be wrong.
;;;","2021-05-17 07:23;rehn;We can just remove that piece of code that I added:
    if (i != 0 && thread->is_Java_thread()) {
      JavaThread* jt = thread->as_Java_thread();
      if (jt->thread_state() == _thread_in_vm) {
        // Since this JavaThread has looped at least once and is _thread_in_vm,
        // we honor any pending blocking request.
        ThreadBlockInVM tbivm(jt);
      }
    }
;;;","2021-05-18 11:36;mseledtsov;ILW = HLH = P2;;;","2021-05-26 05:27;roboduke;Changeset: 9c346a1e
Author:    Yude Lin <yude.lyd@alibaba-inc.com>
Committer: David Holmes <dholmes@openjdk.org>
Date:      2021-05-26 12:26:52 +0000
URL:       https://git.openjdk.java.net/jdk/commit/9c346a1ec78b45c61fbfc76961dc5674cfd98520
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
"Add arch supporting check for ""Op_VectorLoadConst"" before creating the node",JDK-8266962,5049358,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,xgong,xgong,xgong,2021-05-12 02:00,2021-06-02 01:47,2023-10-01 09:57,2021-05-19 00:50,17,,,,,,,17,hotspot,,0,c2,hs-comp-triaged,oracle-triage-11,oracle-triage-17,,,,,,,,,,"In LibraryCallKit::inline_vector_shuffle_iota(), the ""VectorLoadConstNode"" will be created to get an initial index vector for shuffle. Before creating it, the compiler doesn't check whether the current platform supports this opcode. If the compiler created the node while the backend doesn't have the codegen support for it, the jvm will crash with ""bad ad file'.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2ssob:",9223372036854775807,b23,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2021-05-19 00:50;roboduke;Changeset: 2563a6a9
Author:    Xiaohong Gong <xgong@openjdk.org>
Committer: Ningsheng Jian <njian@openjdk.org>
Date:      2021-05-19 07:49:41 +0000
URL:       https://git.openjdk.java.net/jdk/commit/2563a6a9b5e81b4624704da4e8a2f24a6c5e8a5b
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Check possibility to disable OperationTimedOut on Unix,JDK-8266949,5049343,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,serb,serb,serb,2021-05-11 19:13,2021-11-02 07:31,2023-10-01 09:57,2021-05-18 12:31,11,17,8,,,,,17,client-libs,,0,11-bp,8-bp,jdk11u-fix-request,jdk11u-fix-yes,jdk13u-fix-request,jdk13u-fix-yes,jdk15u-fix-request,jdk15u-fix-yes,,,,,,"This exception causes random test failures on Unix, need to check do we need it or we may safely ignore it.",,,,,,,,,,,JDK-8276339,JDK-8276340,JDK-8267442,JDK-8274445,JDK-8267422,,,,,,,,,,,,,,,JDK-8266452,,,,,,,,,,,,,,,,,,,,,,generic,,,,,,,,,generic,,,,,"0|i2sskz:",9223372036854775807,b23,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@5a9b3fd3,,,,,,,,,"2021-05-18 12:30;roboduke;Changeset: e6705c0e
Author:    Sergey Bylokhov <serb@openjdk.org>
Date:      2021-05-18 19:30:33 +0000
URL:       https://git.openjdk.java.net/jdk/commit/e6705c0e4b548a83197c3ea70bdef25ec65d4c00
;;;","2021-09-27 06:09;goetz;Fix request [11u]

I downport this for parity with 11.0.13-oracle.
Also, jdk11u should throw the same exceptions as jdk11u-oracle.
Nighttest pass.;;;","2021-11-02 06:49;yan;Fix request (13u, 15u)
I'd like to backport this fix for consistency. The patch applies cleanly after 8196100 in both repositories, some obvious related tests do pass.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
gtest/GTestWrapper.java os.iso8601_time_vm failed,JDK-8266942,5049336,Bug,Closed,JDK,JDK,software,duke,,,P2,Fixed,stuefe,dcubed,dcubed,2021-05-11 16:55,2021-07-08 15:59,2023-10-01 09:57,2021-05-14 22:20,17,,,,,,,17,hotspot,,0,intermittent,tier1,,,,,,,,,,,,"The following test failed in the JDK17 CI:

gtest/GTestWrapper.java

Here's a snippet from the log file:

[ RUN      ] os.iso8601_time_vm
2021-05-08T07:51:01.663+0000
2021-05-08T00:51:01.663-0700
open/test/hotspot/gtest/runtime/test_os.cpp:795: Failure
Value of: very_simple_string_matcher(pattern, result)
  Actual: false
Expected: true
1970-01-01T00:00:00.000+0000
1970-01-01T00:00:00.017+0000
[  FAILED  ] os.iso8601_time_vm (0 ms)",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8266536,,,,"2021-05-14 12:53;dcubed;jdk-17+22_linux.8266942.zip;https://bugs.openjdk.org/secure/attachment/94630/jdk-17%2B22_linux.8266942.zip",,,,,,,,,,,x86_64,,,,,,,,,os_x,,,,,"0|i2ssjf:",9223372036854775807,b23,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,Verified,,"2021-05-11 16:58;dcubed;This test failure appeared after:

    JDK-8266536 Provide a variant of os::iso8601_time which works with arbitrary timestamps

so it's possible that this fix has an issue with Mac_OS_X_10.13.6. ;;;","2021-05-11 16:59;dcubed;Normally a Tier1 failure would start as a P2, but
this one is intermittent so I'm starting it as a P3.;;;","2021-05-13 06:16;dholmes;Assigning to Thomas as it is his test that is failing.;;;","2021-05-13 08:22;stuefe;Seems my test fails on half the globe:

thomas@starfish:/shared/projects/openjdk/jdk-jdk/output-fastdebug$ TZ=America/Los_Angeles ./hotspot/variant-server/libjvm/gtest/gtestLauncher -jdk:./images/jdk/ --gtest_filter=os.iso8601_time_vm
[ RUN      ] os.iso8601_time_vm
2021-05-13T15:20:15.375+0000
2021-05-13T08:20:15.375-0700
/shared/projects/openjdk/jdk-jdk/source/test/hotspot/gtest/runtime/test_os.cpp:795: Failure
Value of: very_simple_string_matcher(pattern, result)
  Actual: false
Expected: true

thomas@starfish:/shared/projects/openjdk/jdk-jdk/output-fastdebug$ TZ=Europe/Berlin ./hotspot/variant-server/libjvm/gtest/gtestLauncher -jdk:./images/jdk/ --gtest_filter=os.iso8601_time_vm
[ RUN      ] os.iso8601_time_vm
2021-05-13T15:22:25.327+0000
2021-05-13T17:22:25.327+0200
1970-01-01T00:00:00.000+0000
1970-01-01T00:00:00.017+0000

;;;","2021-05-13 20:33;stuefe;https://github.com/openjdk/jdk/pull/4013;;;","2021-05-14 12:53;dcubed;For some reason, this test failure mode shows up on my Linux-X64 machine
in 4 different tests and in all 3 build configs. These sightings are from my
stress kit run on the jdk-17+22 snapshot:

gtest/LargePageGtests.java#use-large-pages

[ RUN      ] os.iso8601_time_vm
2021-05-14T09:38:10.403+0000
2021-05-14T05:38:10.403-0400
/work/shared/bug_hunt/thread_SMR_stress/jdk17_exp.git/open/test/hotspot/gtest/runtime/test_os.cpp:795: Failure
Value of: very_simple_string_matcher(pattern, result)
  Actual: false
Expected: true
1970-01-01T00:00:00.000+0000
1970-01-01T00:00:00.017+0000
[  FAILED  ] os.iso8601_time_vm (1 ms)


gtest/LargePageGtests.java#use-large-pages-1G

[ RUN      ] os.iso8601_time_vm
2021-05-14T09:38:38.058+0000
2021-05-14T05:38:38.058-0400
/work/shared/bug_hunt/thread_SMR_stress/jdk17_exp.git/open/test/hotspot/gtest/runtime/test_os.cpp:795: Failure
Value of: very_simple_string_matcher(pattern, result)
  Actual: false
Expected: true
1970-01-01T00:00:00.000+0000
1970-01-01T00:00:00.017+0000
[  FAILED  ] os.iso8601_time_vm (0 ms)


gtest/LargePageGtests.java#use-large-pages-sysV

[ RUN      ] os.iso8601_time_vm
2021-05-14T09:38:44.238+0000
2021-05-14T05:38:44.238-0400
/work/shared/bug_hunt/thread_SMR_stress/jdk17_exp.git/open/test/hotspot/gtest/runtime/test_os.cpp:795: Failure
Value of: very_simple_string_matcher(pattern, result)
  Actual: false
Expected: true
1970-01-01T00:00:00.000+0000
1970-01-01T00:00:00.017+0000
[  FAILED  ] os.iso8601_time_vm (0 ms)


gtest/GTestWrapper.java

[ RUN      ] os.iso8601_time_vm
2021-05-14T09:43:36.364+0000
2021-05-14T05:43:36.364-0400
/work/shared/bug_hunt/thread_SMR_stress/jdk17_exp.git/open/test/hotspot/gtest/runtime/test_os.cpp:795: Failure
Value of: very_simple_string_matcher(pattern, result)
  Actual: false
Expected: true
1970-01-01T00:00:00.000+0000
1970-01-01T00:00:00.017+0000
[  FAILED  ] os.iso8601_time_vm (0 ms)


I'm attaching a ZIP file with all 12 log files:

$ unzip -l jdk-17+22_linux.8266942.zip
Archive:  jdk-17+22_linux.8266942.zip
  Length      Date    Time    Name
---------  ---------- -----   ----
    21392  2021-05-14 11:05   build/linux-x86_64-normal-server-fastdebug/test-support/jtreg_open_test_hotspot_jtreg_tier1/gtest/LargePageGtests_use-large-pages.jtr
    21015  2021-05-14 13:08   build/linux-x86_64-normal-server-release/test-support/jtreg_open_test_hotspot_jtreg_tier1/gtest/LargePageGtests_use-large-pages.jtr
    21446  2021-05-14 05:38   build/linux-x86_64-normal-server-slowdebug/test-support/jtreg_open_test_hotspot_jtreg_tier1/gtest/LargePageGtests_use-large-pages.jtr
    21616  2021-05-14 11:05   build/linux-x86_64-normal-server-fastdebug/test-support/jtreg_open_test_hotspot_jtreg_tier1/gtest/LargePageGtests_use-large-pages-1G.jtr
    21204  2021-05-14 13:08   build/linux-x86_64-normal-server-release/test-support/jtreg_open_test_hotspot_jtreg_tier1/gtest/LargePageGtests_use-large-pages-1G.jtr
    21631  2021-05-14 05:38   build/linux-x86_64-normal-server-slowdebug/test-support/jtreg_open_test_hotspot_jtreg_tier1/gtest/LargePageGtests_use-large-pages-1G.jtr
    21495  2021-05-14 11:05   build/linux-x86_64-normal-server-fastdebug/test-support/jtreg_open_test_hotspot_jtreg_tier1/gtest/LargePageGtests_use-large-pages-sysV.jtr
    21140  2021-05-14 13:08   build/linux-x86_64-normal-server-release/test-support/jtreg_open_test_hotspot_jtreg_tier1/gtest/LargePageGtests_use-large-pages-sysV.jtr
    21546  2021-05-14 05:39   build/linux-x86_64-normal-server-slowdebug/test-support/jtreg_open_test_hotspot_jtreg_tier1/gtest/LargePageGtests_use-large-pages-sysV.jtr
    94900  2021-05-14 11:07   build/linux-x86_64-normal-server-fastdebug/test-support/jtreg_open_test_hotspot_jtreg_tier1/gtest/GTestWrapper.jtr
    85325  2021-05-14 13:09   build/linux-x86_64-normal-server-release/test-support/jtreg_open_test_hotspot_jtreg_tier1/gtest/GTestWrapper.jtr
    95225  2021-05-14 05:45   build/linux-x86_64-normal-server-slowdebug/test-support/jtreg_open_test_hotspot_jtreg_tier1/gtest/GTestWrapper.jtr
---------                     -------
   467935                     12 files;;;","2021-05-14 22:20;roboduke;Changeset: f3fb5a45
Author:    Thomas Stuefe <stuefe@openjdk.org>
Date:      2021-05-15 05:20:01 +0000
URL:       https://git.openjdk.java.net/jdk/commit/f3fb5a4524255487f95a93e50da6b230de0b31ce
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,
[lworld] [lw3] Test InlineTypeArrays.java fails because of incorrect instanceof behavior,JDK-8266931,5049314,Bug,Resolved,JDK,JDK,software,duke,,,P2,Fixed,fparain,fparain,fparain,2021-05-11 11:51,2021-05-17 07:29,2023-10-01 09:57,2021-05-17 07:29,repo-valhalla,,,,,,,repo-valhalla,hotspot,,0,lw3,lworld,,,,,,,,,,,,"Test fails with the following stack trace:
java.lang.RuntimeException: assertTrue: expected true, was false
        at jdk.test.lib.Asserts.fail(Asserts.java:594)
        at jdk.test.lib.Asserts.assertTrue(Asserts.java:486)
        at jdk.test.lib.Asserts.assertTrue(Asserts.java:472)
        at runtime.valhalla.inlinetypes.InlineTypeArray.testSanityCheckcasts(InlineTypeArray.java:289)
        at runtime.valhalla.inlinetypes.InlineTypeArray.run(InlineTypeArray.java:58)
        at runtime.valhalla.inlinetypes.InlineTypeArray.main(InlineTypeArray.java:47)
        at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
        at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:78)
        at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
        at java.base/java.lang.reflect.Method.invoke(Method.java:568)
        at com.sun.javatest.regtest.agent.MainWrapper$MainThread.run(MainWrapper.java:127)
        at java.base/java.lang.Thread.run(Thread.java:831)


The class file generated by javac seems correct: 

void testSanityCheckcasts();
    descriptor: ()V
    flags: (0x0000)
    Code:
      stack=2, locals=18, args_size=1
         0: iconst_1
         1: anewarray     #276                // class ""Qruntime/valhalla/inlinetypes/InlineTypeArray$MyInt;""
         4: astore_1
         5: aload_1
         6: instanceof    #278                // class ""[Ljava/lang/Object;""
         9: invokestatic  #72                 // Method jdk/test/lib/Asserts.assertTrue:(Z)V
        12: aload_1
        13: instanceof    #280                // class ""[Ljava/lang/Comparable;""
        16: invokestatic  #72                 // Method jdk/test/lib/Asserts.assertTrue:(Z)V
        19: aload_1
        20: instanceof    #282                // class ""[Lruntime/valhalla/inlinetypes/InlineTypeArray$MyInt;""

But the implementation of the instanceof bytecode fails to recognize that InlineTypeArray$MyInt[] is a subtype of InlineTypeArray$MyInt.ref[].

",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2ssej:",9223372036854775807,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Unable to use algorithms from 3p providers,JDK-8266929,5049312,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,sgehwolf,alvdavi,alvdavi,2021-05-11 11:27,2022-01-31 10:53,2023-10-01 09:57,2021-05-25 07:51,11.0.11,openjdk8u292,,,,,,11.0.12,security-libs,,0,16-na,17-na,amazon-interest,CPU21_07-critical-approved,CPU21_07-critical-SQE-OK,jdk11u-fix-request,jdk11u-fix-yes,jdk8u-fix-request,jdk8u-fix-yes,redhat-interest,regression,,,"Opening on behalf of Dan Lutker <lutkerd@amazon.com>

The change for “JDK-8249906, CVE-2021-2163: Enhance opening JARs” exposes a problem with the caching of algorithms beyond what is being reported in JDK-8266290 or what is fixed by in JDK-8242565. Not only are the SunJCE algorithms no longer available when using signed JARs in 8u292, but no algorithms can be added via new providers in either JDK 8 or JDK 11 The caching of the oidTable happens only once which is now done when JARs are loaded, when you add a new provider this table is never refreshed. Executing the simple reproducer UseBCAlgo.java (requires BouncyCastle) on 8u282 or 11.0.10 works successfully, but both 8u292 and 11.0.11 fail with “java.security.NoSuchAlgorithmException: unrecognized algorithm name: SHA384WITHDSA”.
 
Exception in thread ""main"" java.security.NoSuchAlgorithmException: unrecognized algorithm name: SHA384WITHDSA
                at java.base/sun.security.x509.AlgorithmId.get(AlgorithmId.java:448)
                at java.base/javax.crypto.EncryptedPrivateKeyInfo.<init>(EncryptedPrivateKeyInfo.java:139)
                at UseBCAlgo.main(UseBCAlgo.java:8)
 
The caching is also incorrect when you remove a provider after it was successfully loaded, if a provider is removed the algorithms it provides are still available.
 
Proposed fix is to clear out the AlgorithmId oidTable whenever signed jar verification completes or the Security providers change, which would cover the regression introduced by JDK-8249906 as well as these issues so that the available Algorithms will reflect the currently loaded providers. This fix is an addition to JDK-8156584 and JDK-8242565, it does not supersede them and it will not work without JDK-8156584.",,,,,,,,,,,JDK-8267774,JDK-8267766,JDK-8269323,JDK-8267507,,,,,,,,,,,,,JDK-8267172,,,JDK-8270170,JDK-8266261,JDK-8266290,JDK-8268128,JDK-8270170,JDK-8267397,JDK-8266279,,,,,"2021-05-11 11:26;alvdavi;8u.patch;https://bugs.openjdk.org/secure/attachment/94587/8u.patch","2021-05-11 11:27;alvdavi;UseBCAlgo-1.java;https://bugs.openjdk.org/secure/attachment/94586/UseBCAlgo-1.java",,,,,,,,,,,,,,,,,openjdk8u292,,,,,,,"0|i2sse3:",9223372036854775807,b04,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@2ec284e3,,,,,,,,,"2021-05-17 03:18;sgehwolf;Isn't this an issue with JDK head too?;;;","2021-05-17 14:07;mullan;The JDK mainline doesn't throw the NoSuchAlgorithmException, this is due to the AlgorithmId code being significantly restructured in JDK 15, see https://bugs.openjdk.java.net/browse/JDK-8242151.

However, the call to EPKI doesn't fail after you remove the provider. This is because AlgorithmId remembers the cached OIDs even if the provider is removed. It's not clear at what point that regressed or if it ever behaved correctly - more code digging is needed. But it doesn't appear to be behavior that was changed by JDK-8249906. I would file a separate issue for that, if necessary. But for now, I am marking this with jdk17-na so we know that finding the 3rd-party provider OIDs isn't an issue.

Also, if you call Signature.getInstance(""SHA384WITHDSA"") it does throw an exception after the provider has been removed.;;;","2021-05-17 14:36;weijun;Why must EPKI forget the cached OIDs? AlgorithmId is independent from any provider. Update: I was wrong.;;;","2021-05-18 05:55;mullan;EncryptedPrivateKeyInfo(String, byte[]) throws NoSuchAlgorithmException ""if the specified algName is not supported."" The spec could be a bit clearer, but I interpret this that if all of the installed providers do not support the algorithm, it should throw this exception.;;;","2021-05-18 09:44;sgehwolf;This looks to be indeed caused by JDK-8249906. Reproducer passes with 11.0.11+8 (EA) and 8u292-b09 (EA) which both don't have that patch.;;;","2021-05-18 14:20;mullan;A potentially simpler fix is the following:
```
--- a/src/java.base/share/classes/sun/security/x509/AlgorithmId.java
+++ b/src/java.base/share/classes/sun/security/x509/AlgorithmId.java
@@ -584,6 +584,9 @@ public class AlgorithmId implements Serializable, DerEncoder {
             || name.equalsIgnoreCase(""SHA1/RSA"")) {
             return AlgorithmId.sha1WithRSAEncryption_oid;
         }
+        if (name.equalsIgnoreCase(""SHA256WithRSA"")) {
+            return AlgorithmId.sha256WithRSAEncryption_oid;
+        }
         if (name.equalsIgnoreCase(""SHA1withECDSA"")
                 || name.equalsIgnoreCase(""ECDSA"")) {
             return AlgorithmId.sha1WithECDSA_oid;
```
This registers the SHA256withRSA OID, which the JDK providers are typically signed with. This won't fallback to searching through the registered providers' OID mappings until later, when it is necessary after the 3rd party provider has been added.

This doesn't completely address the issue as the OID cache can become stale in other ways (as you note the cache is not repopulated after removing a provider), but I believe that is a pre-existing issue, and not a regression. I think it would be better to fix that issue in the mainline for further review and bake time.;;;","2021-05-19 02:34;sgehwolf;So I had a closer look as to why this isn't an issue in JDK 17 and 16. As Sean said, it's JDK-8242151 basically. For one, JDK-8242151 has ""SHA256WithRSA"" in KnownOIDs.java thus aliasOidsTable() is never called when jar signatures are being verified. For two it also adds ""SHA384withDSA"" to KnownOIDs.java:
https://github.com/openjdk/jdk/blob/master/src/java.base/share/classes/sun/security/util/KnownOIDs.java#L157

Thus, the code goes through KnownOIDs.findMatch() and succeeds, never reaching the aliasOidsTable() method call in method AlgorithmId.algOID(String). So for JDK 16 and 17 aliasOidsTable() is never even called, let alone early on at jar file verification time.

This is different in JDK 11 and 8. When I add some debug trace code like so:

diff --git a/src/java.base/share/classes/sun/security/x509/AlgorithmId.java b/src/java.base/share/classes/sun/security/x509/AlgorithmId.java
--- a/src/java.base/share/classes/sun/security/x509/AlgorithmId.java
+++ b/src/java.base/share/classes/sun/security/x509/AlgorithmId.java
@@ -606,6 +606,7 @@
             return AlgorithmId.sha512WithECDSA_oid;
         }
 
+       System.out.println(""name = "" + name);
         return oidTable().get(name.toUpperCase(Locale.ENGLISH));
     }
 
@@ -633,8 +634,11 @@
     /** Collects the algorithm names from the installed providers. */
     private static HashMap<String,ObjectIdentifier> computeOidTable()
         throws IOException {
+       System.out.println(""computeOidTable()"");
+       Thread.dumpStack();
         HashMap<String,ObjectIdentifier> tab = new HashMap<>();
         for (Provider provider : Security.getProviders()) {
+           System.out.println(""provider name = "" + provider.getName());
             for (Object key : provider.keySet()) {
                 String alias = (String)key;
                 String upperCaseAlias = alias.toUpperCase(Locale.ENGLISH);


... and run the UseBCAlgo.java then I see this:

name = SHA256withRSA
computeOidTable()
java.lang.Exception: Stack trace
	at java.base/java.lang.Thread.dumpStack(Thread.java:1383)
	at java.base/sun.security.x509.AlgorithmId.computeOidTable(AlgorithmId.java:638)
	at java.base/sun.security.x509.AlgorithmId.oidTable(AlgorithmId.java:628)
	at java.base/sun.security.x509.AlgorithmId.algOID(AlgorithmId.java:610)
	at java.base/sun.security.x509.AlgorithmId.get(AlgorithmId.java:441)
	at java.base/sun.security.pkcs.SignerInfo.verify(SignerInfo.java:380)
	at java.base/sun.security.pkcs.PKCS7.verify(PKCS7.java:578)
	at java.base/sun.security.pkcs.PKCS7.verify(PKCS7.java:595)
	at java.base/sun.security.pkcs.SignerInfo.getTimestamp(SignerInfo.java:545)
	at java.base/sun.security.pkcs.SignerInfo.verify(SignerInfo.java:318)
	at java.base/sun.security.pkcs.PKCS7.verify(PKCS7.java:578)
	at java.base/sun.security.pkcs.PKCS7.verify(PKCS7.java:595)
	at java.base/sun.security.util.SignatureFileVerifier.processImpl(SignatureFileVerifier.java:283)
	at java.base/sun.security.util.SignatureFileVerifier.process(SignatureFileVerifier.java:259)
	at java.base/java.util.jar.JarVerifier.processEntry(JarVerifier.java:316)
	at java.base/java.util.jar.JarVerifier.update(JarVerifier.java:230)
	at java.base/java.util.jar.JarFile.initializeVerifier(JarFile.java:759)
	at java.base/java.util.jar.JarFile.ensureInitialization(JarFile.java:1038)
	at java.base/java.util.jar.JavaUtilJarAccessImpl.ensureInitialization(JavaUtilJarAccessImpl.java:69)
	at java.base/jdk.internal.loader.URLClassPath$JarLoader$2.getManifest(URLClassPath.java:870)
	at java.base/jdk.internal.loader.BuiltinClassLoader.defineClass(BuiltinClassLoader.java:786)
	at java.base/jdk.internal.loader.BuiltinClassLoader.findClassOnClassPathOrNull(BuiltinClassLoader.java:698)
	at java.base/jdk.internal.loader.BuiltinClassLoader.loadClassOrNull(BuiltinClassLoader.java:621)
	at java.base/jdk.internal.loader.BuiltinClassLoader.loadClass(BuiltinClassLoader.java:579)
	at java.base/jdk.internal.loader.ClassLoaders$AppClassLoader.loadClass(ClassLoaders.java:178)
	at java.base/java.lang.ClassLoader.loadClass(ClassLoader.java:522)
	at java.base/java.lang.Class.getDeclaredMethods0(Native Method)
	at java.base/java.lang.Class.privateGetDeclaredMethods(Class.java:3166)
	at java.base/java.lang.Class.getMethodsRecursive(Class.java:3307)
	at java.base/java.lang.Class.getMethod0(Class.java:3293)
	at java.base/java.lang.Class.getMethod(Class.java:2106)
	at java.base/sun.launcher.LauncherHelper.validateMainClass(LauncherHelper.java:816)
	at java.base/sun.launcher.LauncherHelper.checkAndLoadMain(LauncherHelper.java:675)
provider name = SUN
provider name = SunRsaSign
provider name = SunEC
provider name = SunJCE
usePreCheck = false
name = SHA384WITHDSA
Exception in thread ""main"" java.security.NoSuchAlgorithmException: unrecognized algorithm name: SHA384WITHDSA
	at java.base/sun.security.x509.AlgorithmId.get(AlgorithmId.java:448)
	at java.base/javax.crypto.EncryptedPrivateKeyInfo.<init>(EncryptedPrivateKeyInfo.java:139)
	at UseBCAlgo.main(UseBCAlgo.java:23)

So Sean's proposed fix makes sense to me. By making ""SHA256WithRSA"" known to AlgorithmId we avoid early initialization of the cache table. After patch I see this:

$ java -cp bcprov-jdk15on-168.jar:. UseBCAlgo
usePreCheck = false
name = SHA384WITHDSA
computeOidTable()
java.lang.Exception: Stack trace
	at java.base/java.lang.Thread.dumpStack(Thread.java:1383)
	at java.base/sun.security.x509.AlgorithmId.computeOidTable(AlgorithmId.java:641)
	at java.base/sun.security.x509.AlgorithmId.oidTable(AlgorithmId.java:631)
	at java.base/sun.security.x509.AlgorithmId.algOID(AlgorithmId.java:613)
	at java.base/sun.security.x509.AlgorithmId.get(AlgorithmId.java:441)
	at java.base/javax.crypto.EncryptedPrivateKeyInfo.<init>(EncryptedPrivateKeyInfo.java:139)
	at UseBCAlgo.main(UseBCAlgo.java:23)
provider name = SUN
provider name = SunRsaSign
provider name = SunEC
provider name = SunJSSE
provider name = SunJCE
provider name = SunJGSS
provider name = SunSASL
provider name = XMLDSig
provider name = SunPCSC
provider name = JdkLDAP
provider name = JdkSASL
provider name = SunPKCS11
provider name = BC
Successfully created third-party provider algo. GOOD.;;;","2021-05-19 05:35;sgehwolf;FWIW, the reproducer should really use a signature algo which is in neither JDK version and only in a third party provider. SHA384WITHDSA is available in JDK 15+ it seems. ""GOST3411WITHECGOST3410"" from BC provider would work.;;;","2021-05-19 05:56;sgehwolf;[~mullan] I've filed JDK-8267397 for the AID refresh issue. As far as I can see it's been a latent bug (no regression).;;;","2021-05-19 09:22;sgehwolf;[~mullan] Do you want to propose this fix to jdk-updates-dev for review or shall I?;;;","2021-05-19 09:51;mullan;[~sgehwolf] You should propose the fix, and you can use that patch, thank you.;;;","2021-05-19 11:28;sgehwolf;Will do. Thanks, Sean!;;;","2021-05-25 01:26;sgehwolf;Fix Request (OpenJDK 11u):

Please approve this 11u specific fix. JDK-8249906, an April CPU CVE fix, introduced a regression where verifying certain signed jar files triggered initialization of AlgorithmId's OID cache which then is never refreshed. That results in exceptions being thrown in certain situations when third party security providers are in play. The fix delays AlgorightmID's OID cache initialization until after jar file verification (for most cases), which gets us back to pre 11.0.11 behaviour. Patch has been reviewed by Dan Lutker and Paul Hohensee. Testing: jdk_security. No new regressions.

webrev: https://cr.openjdk.java.net/~sgehwolf/webrevs/JDK-8266929/jdk11/02/webrev/;;;","2021-05-25 07:51;hgupdate;URL:   https://hg.openjdk.java.net/jdk-updates/jdk11u-dev/rev/40d1e784e193
User:  sgehwolf
Date:  2021-05-25 14:46:42 +0000
;;;","2021-05-25 08:56;sgehwolf;Fix Request (OpenJDK 8u):

Please approve this regression fix which affects OpenJDK 8u292 too. Patch is the same as JDK 11u (after unshuffeling). While it adds more than necessary static mapping of OIDs to AlgorightmIDs it doesn't seem to be a good enough reason to diverge from JDK 11. Algorithms supported by jarsigner are different in JDK 8, but all the needed algorithms supported by the sigalg option[1] are supported Passes the reproducer after the patch.

[1] SHA1withDSA, SHA256withRSA, or SHA256withECDSA are used if no sigalg option is being specified.
     https://docs.oracle.com/javase/8/docs/technotes/tools/unix/jarsigner.html;;;","2021-05-26 05:24;hgupdate;URL:   https://hg.openjdk.java.net/jdk-updates/jdk11u/rev/40d1e784e193
User:  goetz
Date:  2021-05-26 12:21:50 +0000
;;;",,,,,,,,,,,,,,,,,,
Gradle verification fails on windows x86,JDK-8266919,5049293,Bug,Resolved,JDK,JDK,software,duke,,,P2,Fixed,sykora,sykora,sykora,2021-05-11 07:19,2021-09-03 10:19,2023-10-01 09:57,2021-05-11 08:20,jfx17,,,,,,,jfx17,javafx,,0,noreg-build,regression,,,,,,,,,,,,"After the introduction of Gradle verification, the build fails on Windows x86 (32-bit) with the following verificiation failure:

> Task :swt:compileJava FAILED
Resource missing. [HTTP HEAD: https://github.com/unicode-org/icu/releases/download/release-68-2/org.eclipse.swt.win32.win32.x86_3.105.3.v20170228-0512.jar]
Cached resource https://download.eclipse.org/eclipse/updates/4.6/R-4.6.3-201703010400/plugins/org.eclipse.swt.win32.win32.x86_3.105.3.v20170228-0512.jar is up-to-date (lastModified: Thu Mar 16 05:55:28 GMT 2017).",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8264010,,,,,,,,,,,,,,,,,,,x86,,,,,,,,,windows,,,,,"0|i2ss9v:",9223372036854775807,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@1556b386,,,,,,,,,"2021-05-11 07:28;kcr;The same is likely true for Linux x86 builds, but maybe they aren't built any more. Linux x86 could be handled in a follow-up bug if needed.;;;","2021-05-11 08:20;roboduke;Changeset: 3ac6bf0c
Author:    Joeri Sykora <sykora@openjdk.org>
Committer: Kevin Rushforth <kcr@openjdk.org>
Date:      2021-05-11 15:19:29 +0000
URL:       https://git.openjdk.java.net/jfx/commit/3ac6bf0cb48549f1383e55820104b88880a126be
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
merge_stack in check_code.c add NULL check,JDK-8266918,5049290,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,mbaesken,mbaesken,mbaesken,2021-05-11 06:29,2021-06-10 17:58,2023-10-01 09:57,2021-06-08 00:22,17,,,,,,,17,core-libs,,0,,,,,,,,,,,,,,"Sonar reports a potential NULL pointer dereference here :
https://sonarcloud.io/project/issues?id=shipilev_jdk&languages=c&open=AXck8CPLBBG2CXpcnh_z&resolved=false&severities=MAJOR&types=BUG
""Access to field 'item' results in a dereference of a null pointer (loaded from variable 'new')""
It would be better to add a check .",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,generic,,,,,,,,,generic,,,,,"0|i2ss97:",9223372036854775807,b26,,,,,,,,,,,,"2021-06-08 00:22;roboduke;Changeset: 00c88f79
Author:    Matthias Baesken <mbaesken@openjdk.org>
Date:      2021-06-08 07:22:03 +0000
URL:       https://git.openjdk.java.net/jdk/commit/00c88f79b30d7867be4a66317b90b9ba7e947f4f
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
On Windows the system lookup should load ucrtbase if possible,JDK-8266911,5049282,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,jvernee,jvernee,jvernee,2021-05-11 05:15,2021-05-11 10:21,2023-10-01 09:57,2021-05-11 10:21,repo-panama,,,,,,,,tools,,0,foreign-memaccess+abi,windows,,,,,,,,,,,,"Currently the system lookup loads msvcrt.dll, but since Windows 10 the standard library has been refactored and ships as ucrtbase.dll instead.

We should pickup the latest version by default, i.e. ucrtbase.dll, if it is available.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2ss7f:",9223372036854775807,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@2251e2f8,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Clarify the method description of Duration.toDaysPart(),JDK-8266901,5049129,Bug,Closed,JDK,JDK,software,duke,,,P4,Fixed,naoto,webbuggrp,webbuggrp,2021-05-09 16:17,2021-07-06 21:04,2023-10-01 09:57,2021-06-25 11:28,16,,,,,,,18,core-libs,,0,additional-information-received,dcsaw,noreg-doc,reproducer-no,webbug,,,,,,,,,"A DESCRIPTION OF THE PROBLEM :
The method java.time.Duration.toDaysPart() is extremely misleading:
- All other ""...Part()"" methods return the remainder of dividing by the next larger unit; so naturally a user might assume the result is the part of the days in a month (30 days?) or a year (365 days?)
- It behaves exactly the same as `toDays()` but the documentation does not make this obvious

This makes `toDaysPart()` misleading and redundant. Personally I would prefer deprecating the method (for removal) to prevent further confusion caused by this method.

However, if you (for some strong reason) want to keep the method, then please change its documentation (i.e. remove the complete existing documentation text) to:
> This method behaves exactly the same way as {@link #toDays()}.

Then at least most of the confusion is removed, and users don't waste their time trying to understand the difference.


",,,,,,,,,,,,,,,,,,,,,,,,JDK-8269042,,,,,,,,,,,,,JDK-8142936,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2sr9f:",9223372036854775807,b04,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@a9a7756,,,,,,,Verified,,"2021-05-11 03:09;tongwan;Moved to JDK for further evaluations.;;;","2021-05-17 09:18;scolebourne;I have no problems with the spec being clarified. I do not believe the method should be removed however.;;;","2021-06-18 13:53;naoto;To keep the consistency with other methods, adding 

```
     * @apiNote
     * This method behaves exactly the same way as {@link #toDays()}.
```
to the method description would be appropriate.;;;","2021-06-25 11:28;roboduke;Changeset: 223759fb
Author:    Naoto Sato <naoto@openjdk.org>
Date:      2021-06-25 18:25:57 +0000
URL:       https://git.openjdk.java.net/jdk/commit/223759fb8af4a28f8ff8563e438ca285a87a9f2d
;;;","2021-07-05 01:52;tongwan;Requested the submitter review the fix at https://git.openjdk.java.net/jdk/commit/223759fb8af4a28f8ff8563e438ca285a87a9f2d;;;","2021-07-06 21:04;tongwan;the changes look good thanks!;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,
java/net/httpclient/ShortResponseBody.java fails on windows with java.io.IOException: Unable to establish loopback connection,JDK-8266900,5049273,Bug,Closed,JDK,JDK,software,duke,,,P4,Fixed,djelinski,dfuchs,dfuchs,2021-05-11 03:02,2023-02-01 07:41,2023-10-01 09:57,2022-10-23 23:09,,,,,,,,20,core-libs,,0,httpclient,,,,,,,,,,,,,"Caught expected exception:java.io.IOException: HTTP/1.1 header parser received no bytes
test ShortResponseBody.testSynchronousGET(""https://localhost:62310/https1/closeImmediately/foo"", ""no bytes"", false): failure
java.io.UncheckedIOException: java.io.IOException: Unable to establish loopback connection
	at java.net.http/jdk.internal.net.http.HttpClientImpl.<init>(HttpClientImpl.java:326)
	at java.net.http/jdk.internal.net.http.HttpClientImpl.create(HttpClientImpl.java:268)
	at java.net.http/jdk.internal.net.http.HttpClientBuilderImpl.build(HttpClientBuilderImpl.java:135)
	at ShortResponseBody.newHttpClient(ShortResponseBody.java:224)
	at ShortResponseBody.testSynchronousGET(ShortResponseBody.java:235)
	at jdk.internal.reflect.GeneratedMethodAccessor4.invoke(Unknown Source)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:85)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:639)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:821)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1131)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:124)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:108)
	at org.testng.TestRunner.privateRun(TestRunner.java:773)
	at org.testng.TestRunner.run(TestRunner.java:623)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:357)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:352)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:310)
	at org.testng.SuiteRunner.run(SuiteRunner.java:259)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1185)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1110)
	at org.testng.TestNG.run(TestNG.java:1018)
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:94)
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:54)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:78)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at com.sun.javatest.regtest.agent.MainWrapper$MainThread.run(MainWrapper.java:127)
	at java.base/java.lang.Thread.run(Thread.java:831)
Caused by: java.io.IOException: Unable to establish loopback connection
	at java.base/sun.nio.ch.PipeImpl$Initializer.run(PipeImpl.java:101)
	at java.base/sun.nio.ch.PipeImpl$Initializer.run(PipeImpl.java:67)
	at java.base/java.security.AccessController.doPrivileged(AccessController.java:554)
	at java.base/sun.nio.ch.PipeImpl.<init>(PipeImpl.java:194)
	at java.base/sun.nio.ch.WindowsSelectorImpl.<init>(WindowsSelectorImpl.java:142)
	at java.base/sun.nio.ch.WindowsSelectorProvider.openSelector(WindowsSelectorProvider.java:44)
	at java.base/java.nio.channels.Selector.open(Selector.java:295)
	at java.net.http/jdk.internal.net.http.HttpClientImpl$SelectorManager.<init>(HttpClientImpl.java:717)
	at java.net.http/jdk.internal.net.http.HttpClientImpl.<init>(HttpClientImpl.java:323)
	... 32 more
Caused by: java.net.BindException: Address already in use: connect
	at java.base/sun.nio.ch.Net.connect0(Native Method)
	at java.base/sun.nio.ch.Net.connect(Net.java:576)
	at java.base/sun.nio.ch.Net.connect(Net.java:583)
	at java.base/sun.nio.ch.SocketChannelImpl.connect(SocketChannelImpl.java:851)
	at java.base/java.nio.channels.SocketChannel.open(SocketChannel.java:285)
	at java.base/sun.nio.ch.PipeImpl$Initializer$LoopbackConnector.run(PipeImpl.java:131)
	at java.base/sun.nio.ch.PipeImpl$Initializer.run(PipeImpl.java:83)
	... 40 more
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8294723,JDK-8280944,JDK-8295275,,,,,,,,,,,,,x86_64,,,,,,,,,windows,,,,,"0|i2ss5f:",9223372036854775807,b21,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@446e124a,,,,,,,Verified,,"2021-05-11 03:04;dfuchs;Maybe the test should be instrumented to pause and gives some time for the GC to garbage collect released HttpClient instances when that exception happens.;;;","2022-10-13 07:35;dfuchs;The observed exception occurs on platform where Unix Domain Sockets are not available. See JDK-8280944.
;;;","2022-10-20 05:34;djelinski;The test failed because the OS run out of ephemeral ports.

The OS has a limited number of ephemeral ports at its disposal. After use, the ports are blocked in TIME_WAIT state for a system-dependent period of time (between 30 seconds and 4 minutes).
There are 3 ShortResponseBody tests, and each one sends 570 requests; each request uses at least one ephemeral port - may use two ports if the request is retried internally.
Additionally on Windows 2016 and older, each http client uses a TCP socket (2 ports) for selector; on newer Windows versions a Unix domain socket is used, which does not consume ephemeral ports.

Looking at the tests, they repeat the same requests over and over again; I believe we could reduce the number of requests performed without impacting code coverage.;;;","2022-10-20 06:13;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/10794
Date: 2022-10-20 12:58:13 +0000;;;","2022-10-23 23:09;dukebot;Changeset: 329b49a9
Author:    Daniel Jeliński <djelinski@openjdk.org>
Date:      2022-10-24 06:07:10 +0000
URL:       https://git.openjdk.org/jdk/commit/329b49a938a125908f0eff403dfc38a04aec96a1
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
com/sun/net/httpserver/FilterTest.java fails intermittently with AssertionError,JDK-8266897,5049270,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,jboes,dfuchs,dfuchs,2021-05-11 02:26,2023-03-31 02:14,2023-10-01 09:57,2021-05-18 02:13,17,,,,,,,17,core-libs,,0,intermittent,,,,,,,,,,,,,"test FilterTest.testAfterHandlerRepeated(): failure
java.lang.AssertionError: expected [some value] but found [null]
	at org.testng.Assert.fail(Assert.java:94)
	at org.testng.Assert.failNotEquals(Assert.java:496)
	at org.testng.Assert.assertEquals(Assert.java:116)
	at org.testng.Assert.assertEquals(Assert.java:178)
	at org.testng.Assert.assertEquals(Assert.java:188)
	at FilterTest.testAfterHandlerRepeated(FilterTest.java:204)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:78)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:85)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:639)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:821)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1131)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:124)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:108)
	at org.testng.TestRunner.privateRun(TestRunner.java:773)
	at org.testng.TestRunner.run(TestRunner.java:623)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:357)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:352)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:310)
	at org.testng.SuiteRunner.run(SuiteRunner.java:259)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1185)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1110)
	at org.testng.TestNG.run(TestNG.java:1018)
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:94)
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:54)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:78)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at com.sun.javatest.regtest.agent.MainWrapper$MainThread.run(MainWrapper.java:127)
	at java.base/java.lang.Thread.run(Thread.java:831)

",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8265123,JDK-8288109,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2ss4r:",9223372036854775807,b23,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@446e124a,,,,,,,,,"2021-05-11 02:26;dfuchs;----------System.out:(55/3178)----------
[TestNG] Running:
  com/sun/net/httpserver/FilterTest.java

config FilterTest.setup(): success
test FilterTest.testAfterHandler(): success
test FilterTest.testAfterHandlerRepeated(): failure
java.lang.AssertionError: expected [some value] but found [null]
	at org.testng.Assert.fail(Assert.java:94)
	at org.testng.Assert.failNotEquals(Assert.java:496)
	at org.testng.Assert.assertEquals(Assert.java:116)
	at org.testng.Assert.assertEquals(Assert.java:178)
	at org.testng.Assert.assertEquals(Assert.java:188)
	at FilterTest.testAfterHandlerRepeated(FilterTest.java:204)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:78)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:85)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:639)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:821)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1131)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:124)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:108)
	at org.testng.TestRunner.privateRun(TestRunner.java:773)
	at org.testng.TestRunner.run(TestRunner.java:623)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:357)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:352)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:310)
	at org.testng.SuiteRunner.run(SuiteRunner.java:259)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1185)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1110)
	at org.testng.TestNG.run(TestNG.java:1018)
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:94)
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:54)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:78)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at com.sun.javatest.regtest.agent.MainWrapper$MainThread.run(MainWrapper.java:127)
	at java.base/java.lang.Thread.run(Thread.java:831)
test FilterTest.testAfterHandlerSendResponse(): success
test FilterTest.testBeforeAndAfterHandler(): success
test FilterTest.testBeforeHandler(): success
test FilterTest.testBeforeHandlerRepeated(): success
test FilterTest.testBeforeHandlerSendResponse(): success
test FilterTest.testDescription(): success
test FilterTest.testNull(): success

===============================================
com/sun/net/httpserver/FilterTest.java
Total tests run: 9, Failures: 1, Skips: 0
===============================================

----------System.err:(126/7186)----------
May 10, 2021 9:11:45 PM sun.net.httpserver.ServerImpl <init>
FINE: HttpServer created http localhost/127.0.0.1:0
May 10, 2021 9:11:45 PM sun.net.httpserver.ServerImpl createContext
FINE: context created: /
May 10, 2021 9:11:46 PM sun.net.httpserver.ServerImpl$Exchange run
FINER: exchange started
May 10, 2021 9:11:46 PM sun.net.httpserver.ServerImpl$Exchange run
FINE: Exchange request line: GET / HTTP/1.1
May 10, 2021 9:11:46 PM sun.net.httpserver.ExchangeImpl sendResponseHeaders
FINER: Sent headers: noContentToSend=false
May 10, 2021 9:11:46 PM sun.net.httpserver.ServerImpl logReply
FINE: GET / HTTP/1.1 [200  OK] ()
May 10, 2021 9:11:46 PM sun.net.httpserver.ServerImpl$Dispatcher handleEvent
FINER: Write Finished
May 10, 2021 9:11:46 PM sun.net.httpserver.HttpConnection close
FINER: Closing connection: java.nio.channels.SocketChannel[connected local=/127.0.0.1:45959 remote=/127.0.0.1:38932]
May 10, 2021 9:11:46 PM sun.net.httpserver.ServerImpl <init>
FINE: HttpServer created http localhost/127.0.0.1:0
May 10, 2021 9:11:46 PM sun.net.httpserver.ServerImpl createContext
FINE: context created: /
May 10, 2021 9:11:46 PM sun.net.httpserver.ServerImpl$Exchange run
FINER: exchange started
May 10, 2021 9:11:46 PM sun.net.httpserver.ServerImpl$Exchange run
FINE: Exchange request line: GET / HTTP/1.1
May 10, 2021 9:11:46 PM sun.net.httpserver.ExchangeImpl sendResponseHeaders
FINER: Sent headers: noContentToSend=false
May 10, 2021 9:11:46 PM sun.net.httpserver.ServerImpl logReply
FINE: GET / HTTP/1.1 [200  OK] ()
May 10, 2021 9:11:46 PM sun.net.httpserver.ServerImpl$Dispatcher handleEvent
FINER: Write Finished
May 10, 2021 9:11:46 PM sun.net.httpserver.HttpConnection close
FINER: Closing connection: java.nio.channels.SocketChannel[connected local=/127.0.0.1:38199 remote=/127.0.0.1:59034]
May 10, 2021 9:11:46 PM sun.net.httpserver.ServerImpl <init>
FINE: HttpServer created http localhost/127.0.0.1:0
May 10, 2021 9:11:46 PM sun.net.httpserver.ServerImpl createContext
FINE: context created: /
May 10, 2021 9:11:46 PM sun.net.httpserver.ServerImpl$Exchange run
FINER: exchange started
May 10, 2021 9:11:46 PM sun.net.httpserver.ServerImpl$Exchange run
FINE: Exchange request line: GET / HTTP/1.1
May 10, 2021 9:11:46 PM sun.net.httpserver.ExchangeImpl sendResponseHeaders
FINER: Sent headers: noContentToSend=false
May 10, 2021 9:11:46 PM sun.net.httpserver.ServerImpl logReply
FINE: GET / HTTP/1.1 [200  OK] ()
May 10, 2021 9:11:46 PM sun.net.httpserver.ServerImpl$Dispatcher handleEvent
FINER: Write Finished
May 10, 2021 9:11:46 PM sun.net.httpserver.HttpConnection close
FINER: Closing connection: java.nio.channels.SocketChannel[connected local=/127.0.0.1:39553 remote=/127.0.0.1:38036]
May 10, 2021 9:11:46 PM sun.net.httpserver.ServerImpl <init>
FINE: HttpServer created http localhost/127.0.0.1:0
May 10, 2021 9:11:46 PM sun.net.httpserver.ServerImpl createContext
FINE: context created: /
May 10, 2021 9:11:46 PM sun.net.httpserver.ServerImpl$Exchange run
FINER: exchange started
May 10, 2021 9:11:46 PM sun.net.httpserver.ServerImpl$Exchange run
FINE: Exchange request line: GET / HTTP/1.1
May 10, 2021 9:11:46 PM sun.net.httpserver.ExchangeImpl sendResponseHeaders
FINER: Sent headers: noContentToSend=false
May 10, 2021 9:11:46 PM sun.net.httpserver.ServerImpl logReply
FINE: GET / HTTP/1.1 [200  OK] ()
May 10, 2021 9:11:46 PM sun.net.httpserver.ServerImpl$Dispatcher handleEvent
FINER: Write Finished
May 10, 2021 9:11:46 PM sun.net.httpserver.HttpConnection close
FINER: Closing connection: java.nio.channels.SocketChannel[connected local=/127.0.0.1:40233 remote=/127.0.0.1:51306]
May 10, 2021 9:11:46 PM sun.net.httpserver.ServerImpl <init>
FINE: HttpServer created http localhost/127.0.0.1:0
May 10, 2021 9:11:46 PM sun.net.httpserver.ServerImpl createContext
FINE: context created: /
May 10, 2021 9:11:46 PM sun.net.httpserver.ServerImpl$Exchange run
FINER: exchange started
May 10, 2021 9:11:46 PM sun.net.httpserver.ServerImpl$Exchange run
FINE: Exchange request line: GET / HTTP/1.1
May 10, 2021 9:11:46 PM sun.net.httpserver.ExchangeImpl sendResponseHeaders
FINER: Sent headers: noContentToSend=false
May 10, 2021 9:11:46 PM sun.net.httpserver.ServerImpl logReply
FINE: GET / HTTP/1.1 [200  OK] ()
May 10, 2021 9:11:46 PM sun.net.httpserver.ServerImpl$Dispatcher handleEvent
FINER: Write Finished
May 10, 2021 9:11:46 PM sun.net.httpserver.HttpConnection close
FINER: Closing connection: java.nio.channels.SocketChannel[connected local=/127.0.0.1:38701 remote=/127.0.0.1:44760]
May 10, 2021 9:11:46 PM sun.net.httpserver.ServerImpl <init>
FINE: HttpServer created http localhost/127.0.0.1:0
May 10, 2021 9:11:46 PM sun.net.httpserver.ServerImpl createContext
FINE: context created: /
May 10, 2021 9:11:46 PM sun.net.httpserver.ServerImpl$Exchange run
FINER: exchange started
May 10, 2021 9:11:46 PM sun.net.httpserver.ServerImpl$Exchange run
FINE: Exchange request line: GET / HTTP/1.1
May 10, 2021 9:11:46 PM sun.net.httpserver.ExchangeImpl sendResponseHeaders
FINER: Sent headers: noContentToSend=false
May 10, 2021 9:11:46 PM sun.net.httpserver.ServerImpl logReply
FINE: GET / HTTP/1.1 [200  OK] ()
May 10, 2021 9:11:46 PM sun.net.httpserver.ServerImpl$Dispatcher handleEvent
FINER: Write Finished
May 10, 2021 9:11:46 PM sun.net.httpserver.HttpConnection close
FINER: Closing connection: java.nio.channels.SocketChannel[connected local=/127.0.0.1:37407 remote=/127.0.0.1:50456]
May 10, 2021 9:11:46 PM sun.net.httpserver.ServerImpl <init>
FINE: HttpServer created http localhost/127.0.0.1:0
May 10, 2021 9:11:46 PM sun.net.httpserver.ServerImpl createContext
FINE: context created: /
May 10, 2021 9:11:46 PM sun.net.httpserver.ServerImpl$Exchange run
FINER: exchange started
May 10, 2021 9:11:46 PM sun.net.httpserver.ServerImpl$Exchange run
FINE: Exchange request line: GET / HTTP/1.1
May 10, 2021 9:11:46 PM sun.net.httpserver.ExchangeImpl sendResponseHeaders
FINER: Sent headers: noContentToSend=false
May 10, 2021 9:11:46 PM sun.net.httpserver.ServerImpl logReply
FINE: GET / HTTP/1.1 [200  OK] ()
May 10, 2021 9:11:46 PM sun.net.httpserver.ServerImpl$Dispatcher handleEvent
FINER: Write Finished
May 10, 2021 9:11:46 PM sun.net.httpserver.HttpConnection close
FINER: Closing connection: java.nio.channels.SocketChannel[connected local=/127.0.0.1:35811 remote=/127.0.0.1:49212]
java.lang.Exception: failures: 1
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:96)
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:54)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:78)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at com.sun.javatest.regtest.agent.MainWrapper$MainThread.run(MainWrapper.java:127)
	at java.base/java.lang.Thread.run(Thread.java:831)

JavaTest Message: Test threw exception: java.lang.Exception: failures: 1
JavaTest Message: shutting down test

STATUS:Failed.`main' threw exception: java.lang.Exception: failures: 1
;;;","2021-05-11 18:57;dholmes;There is a CI failure that seems related (if not please file a new bug for it):

test FilterTest.testBeforeAndAfterHandler(): failure
java.lang.AssertionError: expected [0] but found [200]
	at org.testng.Assert.fail(Assert.java:94)
	at org.testng.Assert.failNotEquals(Assert.java:496)
	at org.testng.Assert.assertEquals(Assert.java:125)
	at org.testng.Assert.assertEquals(Assert.java:372)
	at org.testng.Assert.assertEquals(Assert.java:382)
	at FilterTest.testBeforeAndAfterHandler(FilterTest.java:260)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:78)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:85)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:639)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:821)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1131)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:124)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:108)
	at org.testng.TestRunner.privateRun(TestRunner.java:773)
	at org.testng.TestRunner.run(TestRunner.java:623)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:357)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:352)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:310)
	at org.testng.SuiteRunner.run(SuiteRunner.java:259)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1185)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1110)
	at org.testng.TestNG.run(TestNG.java:1018)
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:94)
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:54)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:78)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at com.sun.javatest.regtest.agent.MainWrapper$MainThread.run(MainWrapper.java:127)
	at java.base/java.lang.Thread.run(Thread.java:831)

;;;","2021-05-18 02:13;roboduke;Changeset: 894547d2
Author:    Julia Boes <jboes@openjdk.org>
Date:      2021-05-18 09:12:33 +0000
URL:       https://git.openjdk.java.net/jdk/commit/894547d2c102dcbe1f9ec8a1edb11c6b31e4270e
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
avoid maybe-uninitialized gcc warnings on linux s390x,JDK-8266892,5049264,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,mbaesken,mbaesken,mbaesken,2021-05-11 01:39,2022-12-01 23:56,2023-10-01 09:57,2021-05-11 03:50,11,17,,,,,,17,hotspot,,0,jdk11u-fix-request,jdk11u-fix-yes,sap-interest,,,,,,,,,,,In the linux s390x hs code there are a few maybe-uninitialized gcc warnings with gcc 8.,,,,,,,,,,,JDK-8267154,,,,,,,,,,,,,,,,,,,,,,JDK-8298006,,,,,,,,,,,,,,,,,,,s390x,,,,,,,,,linux,,,,,"0|i2ss3f:",9223372036854775807,b22,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,,,"2021-05-11 03:50;roboduke;Changeset: 9e6e2228
Author:    Matthias Baesken <mbaesken@openjdk.org>
Date:      2021-05-11 10:49:15 +0000
URL:       https://git.openjdk.java.net/jdk/commit/9e6e2228cba05ff2ee3a4014a0a92bdd08d016d9
;;;","2021-05-12 00:04;mbaesken;jdk11 backport request
I would like to have the patch in jdk11 as well, because the issue is present there too. The patch applies cleanly.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
[macosx-aarch64] Crash with SIGBUS in MarkActivationClosure::do_code_blob during vmTestbase/nsk/jvmti/.../bi04t002 test run,JDK-8266889,5049260,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,akozlov,enikitin,enikitin,2021-05-11 01:04,2022-03-29 01:32,2023-10-01 09:57,2021-07-14 03:36,17,,,,,,,17,hotspot,,0,jdk11u-fix-request,jdk11u-fix-yes,,,,,,,,,,,,"Intermittent, looks like it requires at least -XX:+TieredCompilation. Have only been seen in macosx-aarch64 so far.

Sample output:

# Problematic frame:
# V  [libjvm.dylib+0xecb800]  MarkActivationClosure::do_code_blob(CodeBlob*)+0x74
...
Current thread (0x000000013082ec20):  JavaThread ""MainThread"" [_thread_in_vm, id=23555, stack(0x000000016e0cc000,0x000000016e2cf000)]

Stack: [0x000000016e0cc000,0x000000016e2cf000],  sp=0x000000016e2cce30,  free space=2051k
Native frames: (J=compiled Java code, j=interpreted, Vv=VM code, C=native code)
V  [libjvm.dylib+0xecb800]  MarkActivationClosure::do_code_blob(CodeBlob*)+0x74
V  [libjvm.dylib+0xf271e8]  JavaThread::nmethods_do(CodeBlobClosure*)+0xe0
V  [libjvm.dylib+0x7523fc]  HandshakeOperation::do_handshake(JavaThread*)+0x70
V  [libjvm.dylib+0x753dc4]  HandshakeState::process_self_inner()+0x244
V  [libjvm.dylib+0x753a94]  HandshakeState::process_by_self()+0x134
V  [libjvm.dylib+0xdec9e4]  SafepointMechanism::process_if_requested_slow(JavaThread*)+0x30
V  [libjvm.dylib+0x2af970]  ThreadBlockInVM::~ThreadBlockInVM()+0xf4
V  [libjvm.dylib+0xacf0a8]  JvmtiRawMonitor::simple_wait(Thread*, long)+0x1e4
V  [libjvm.dylib+0xacf478]  JvmtiRawMonitor::raw_wait(long, Thread*)+0x64
V  [libjvm.dylib+0xaa76e4]  JvmtiEnv::RawMonitorWait(JvmtiRawMonitor*, long)+0x64
C  [libbi04t002.dylib+0x977c]  syncDebuggeeStatus(JNIEnv_*, _jvmtiEnv*, int)+0x574
C  [libbi04t002.dylib+0x91d0]  Java_nsk_share_jvmti_DebugeeClass_checkStatus+0x64
J 4797  nsk.share.jvmti.DebugeeClass.checkStatus(I)I (0 bytes) @ 0x0000000119714a44 [0x0000000119714940+0x0000000000000104]
C  0x0000000125222928

Java frames: (J=compiled Java code, j=interpreted, Vv=VM code)
J 4797  nsk.share.jvmti.DebugeeClass.checkStatus(I)I (0 bytes) @ 0x0000000119714a44 [0x0000000119714940+0x0000000000000104]
j  nsk.jvmti.scenarios.bcinstr.BI04.bi04t002.runIt([Ljava/lang/String;Ljava/io/PrintStream;)I+40
j  nsk.jvmti.scenarios.bcinstr.BI04.bi04t002.run([Ljava/lang/String;Ljava/io/PrintStream;)I+9
j  nsk.jvmti.scenarios.bcinstr.BI04.bi04t002.main([Ljava/lang/String;)V+9
v  ~StubRoutines::call_stub
J 4597  jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Ljava/lang/reflect/Method;Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/Object; java.base@17-internal (0 bytes) @ 0x00000001196cfaf0 [0x00000001196cfa00+0x00000000000000f0]
J 4595 c1 jdk.internal.reflect.NativeMethodAccessorImpl.invoke(Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/Object; java.base@17-internal (150 bytes) @ 0x0000000111eb1bb4 [0x0000000111eaf280+0x0000000000002934]
J 4593 c1 jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/Object; java.base@17-internal (10 bytes) @ 0x0000000111eb4be0 [0x0000000111eb4980+0x0000000000000260]
J 4559 c1 java.lang.reflect.Method.invoke(Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/Object; java.base@17-internal (65 bytes) @ 0x0000000111f077d4 [0x0000000111f06d40+0x0000000000000a94]
J 4543 c1 com.sun.javatest.regtest.agent.MainWrapper$MainThread.run()V (476 bytes) @ 0x0000000111f0d274 [0x0000000111f0a200+0x0000000000003074]
J 4539 c1 java.lang.Thread.run()V java.base@17-internal (17 bytes) @ 0x0000000111f98250 [0x0000000111f97fc0+0x0000000000000290]
v  ~StubRoutines::call_stub",,,,,,,,,,,JDK-8281959,JDK-8270763,JDK-8270511,JDK-8281513,,,,,,,,,,,,,,,,,,,JDK-8283841,,,,JDK-8266742,JDK-8265292,,,,,,,,,,,,,,aarch64,,,,,,,,,os_x,,,,,"0|i2ss2j:",9223372036854775807,b31,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,,,"2021-05-11 17:02;dlong;Crash is similar to JDK-8265182, JDK-8265292.  It seems likely to be another W^X issue.  Runtime, please take a look.;;;","2021-05-18 11:39;mseledtsov;ILW = HLM = P3;;;","2021-06-16 09:04;gziemski;Tried to reproduce locally with:

jtreg -nr -va -nativepath:/Volumes/Work/tmp/jdk/build/macosx-aarch64-server-release/support/test/hotspot/jtreg/native/lib/ -jdk:./build/macosx-aarch64-server-release/images/jdk/ -vmoption:-XX:+TieredCompilation test/hotspot/jtreg/vmTestbase/nsk/jvmti/scenarios/bcinstr/BI04/bi04t002/TestDescription.java

without success. It could because, like Mikhailo noticed, it looks like JDK-8265182 or JDK-8265292, which are fixed.

Can probably be closed with ""Can not reproduce"".;;;","2021-06-17 08:07;gziemski;It's still failing in our testing according to reports:

---------------  T H R E A D  ---------------

Current thread (0x0000000137019820):  JavaThread ""MainThread"" [_thread_in_vm, id=42767, stack(0x000000016f494000,0x000000016f697000)]

Stack: [0x000000016f494000,0x000000016f697000],  sp=0x000000016f694fe0,  free space=2051k
Native frames: (J=compiled Java code, j=interpreted, Vv=VM code, C=native code)
V  [libjvm.dylib+0xeb1a24]  MarkActivationClosure::do_code_blob(CodeBlob*)+0x74
V  [libjvm.dylib+0xf0d0a4]  JavaThread::nmethods_do(CodeBlobClosure*)+0xe0
V  [libjvm.dylib+0x736868]  HandshakeOperation::do_handshake(JavaThread*)+0x70
V  [libjvm.dylib+0x7383a0]  HandshakeState::process_self_inner()+0x2a4
V  [libjvm.dylib+0x738010]  HandshakeState::process_by_self()+0x134
V  [libjvm.dylib+0xdcd604]  SafepointMechanism::process_if_requested_slow(JavaThread*)+0x54
V  [libjvm.dylib+0x2a179c]  ThreadBlockInVMPreprocess<InFlightMutexRelease>::~ThreadBlockInVMPreprocess()+0x138
V  [libjvm.dylib+0xaa3104]  JvmtiRawMonitor::simple_wait(Thread*, long)+0x220
V  [libjvm.dylib+0xaa3468]  JvmtiRawMonitor::raw_wait(long, Thread*)+0x50
V  [libjvm.dylib+0xa7b948]  JvmtiEnv::RawMonitorWait(JvmtiRawMonitor*, long)+0x64
C  [libbi04t002.dylib+0x977c]  syncDebuggeeStatus(JNIEnv_*, _jvmtiEnv*, int)+0x574
C  [libbi04t002.dylib+0x91d0]  Java_nsk_share_jvmti_DebugeeClass_checkStatus+0x64
J 2675  nsk.share.jvmti.DebugeeClass.checkStatus(I)I (0 bytes) @ 0x0000000110d6bf84 [0x0000000110d6bec0+0x00000000000000c4]
C  0x0000000117db7b98

Java frames: (J=compiled Java code, j=interpreted, Vv=VM code)
J 2675  nsk.share.jvmti.DebugeeClass.checkStatus(I)I (0 bytes) @ 0x0000000110d6bf84 [0x0000000110d6bec0+0x00000000000000c4]
j  nsk.jvmti.scenarios.bcinstr.BI04.bi04t002.runIt([Ljava/lang/String;Ljava/io/PrintStream;)I+40
J 2577 c2 nsk.jvmti.scenarios.bcinstr.BI04.bi04t002.run([Ljava/lang/String;Ljava/io/PrintStream;)I (13 bytes) @ 0x0000000110cf0524 [0x0000000110cf0480+0x00000000000000a4]
j  nsk.jvmti.scenarios.bcinstr.BI04.bi04t002.main([Ljava/lang/String;)V+9
v  ~StubRoutines::call_stub
J 2573  jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Ljava/lang/reflect/Method;Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/Object; java.base@17-ea (0 bytes) @ 0x0000000110cf1b70 [0x0000000110cf1ac0+0x00000000000000b0]
J 2572 c2 jdk.internal.reflect.NativeMethodAccessorImpl.invoke(Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/Object; java.base@17-ea (137 bytes) @ 0x0000000110d0fce4 [0x0000000110d0fc00+0x00000000000000e4]
J 2571 c2 jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/Object; java.base@17-ea (10 bytes) @ 0x0000000110d0f8a4 [0x0000000110d0f840+0x0000000000000064]
J 2547 c2 java.lang.reflect.Method.invoke(Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/Object; java.base@17-ea (65 bytes) @ 0x0000000110cffd00 [0x0000000110cffc80+0x0000000000000080]
j  com.sun.javatest.regtest.agent.MainWrapper$MainThread.run()V+172
J 2536 c2 java.lang.Thread.run()V java.base@17-ea (17 bytes) @ 0x0000000110cf5ca8 [0x0000000110cf5c40+0x0000000000000068]
v  ~StubRoutines::call_stub

siginfo: si_signo: 10 (SIGBUS), si_code: 1 (BUS_ADRALN), si_addr: 0x0000000110d6be78
;;;","2021-06-17 08:21;gziemski;Hmm, this really looks like JDK-8265182 https://github.com/openjdk/jdk/pull/3921

I'd love to be able to reproduce it locally.;;;","2021-06-17 12:50;dlong;JvmtiRawMonitor code like simple_wait, raw_enter, and raw_wait use ThreadInVMfromNative without ThreadWXEnable.  Shouldn't ThreadWXEnable be part of ThreadInVMfromNative?;;;","2021-06-17 13:01;dlong;There seems to be some XML magic in src/hotspot/share/prims/jvmtiEnter.xsl and jvmti.xml that controls which JVMTI function use ThreadInVMfromNative/ThreadWXEnable based on the ""innative"" flag, which means the wrapper sets up the real function to run in InVM mode.  Other functions, like raw monitor enter/exit/wait run in Native mode and switch to InVM mode themselves, so they need a corresponding ThreadWXEnable.;;;","2021-06-18 13:24;gziemski;I can't help to think that if we did what I suggested here https://github.com/openjdk/jdk/pull/3920#pullrequestreview-660085698 then we would have caught this case and asserted nicely.;;;","2021-06-18 13:49;gziemski;The fix for JDK-8265182 was basically:

void ProgrammableInvoker::invoke_native(Stub stub, address buff, JavaThread* thread) {
-   MACOS_AARCH64_ONLY(ThreadWXEnable wx(WXExec, thread));
   ThreadToNativeFromVM ttnfvm(thread);
+   MACOS_AARCH64_ONLY(ThreadWXEnable wx(WXExec, thread));

Here it looks like we need:

int JvmtiRawMonitor::simple_wait(Thread* self, jlong millis) {
  guarantee(_owner == self  , ""invariant"");
  guarantee(_recursions == 0, ""invariant"");

  QNode node(self);
  enqueue_waiter(node);

  simple_exit(self);
  guarantee(_owner != self, ""invariant"");

  int ret = M_OK;
  if (self->is_Java_thread()) {
    JavaThread* jt = self->as_Java_thread();
    guarantee(jt->thread_state() == _thread_in_native, ""invariant"");
    {
      // This transition must be after we exited the monitor.
      ThreadInVMfromNative tivmfn(jt);
      if (jt->is_interrupted(true)) {
        ret = M_INTERRUPTED;
      } else {
+      MACOS_AARCH64_ONLY(ThreadWXEnable wx(WXExec, thread));
        ThreadBlockInVM tbivm(jt);
        if (millis <= 0) {
          self->_ParkEvent->park();
        } else {
          self->_ParkEvent->park(millis);
        }
        // Return to VM before post-check of interrupt state
      }
;;;","2021-06-18 13:54;gziemski;I would have loved to be able to reproduce it to test the proposed fix, but I ran the test continuously in a loop on my mac mini over night and nothing.

Still, I will do the fix and run it via Mach5...;;;","2021-06-18 16:02;dlong;Did you try adding the assert that you mentioned in the previous comment?;;;","2021-06-21 06:00;akozlov;I was able to reproduce an issue with assert and the stack trace with 

jtreg/bin/jtreg -a -nr -testjdk:/Users/tester/anton/jdk-fastdebug -nativepath:/Users/tester/anton/jdk-fastdebug-test/hotspot/jtreg/native -exclude:/Users/tester/anton/openjdk/test/hotspot/jtreg/ProblemList.txt -verbose:summary -retain:fail -vmoption:-XX:+AssertWXAtThreadSync /Users/tester/anton/openjdk/test/hotspot/jtreg/vmTestbase/nsk/jvmti/scenarios/bcinstr/BI04/bi04t002

V  [libjvm.dylib+0x10f6bdc]  VMError::report_and_die(int, char const*, char const*, char*, Thread*, unsigned char*, void*, void*, char const*, int, unsigned long)+0x5d8
V  [libjvm.dylib+0x10f729c]  VMError::report_and_die(Thread*, void*, char const*, int, char const*, char const*, char*)+0x40
V  [libjvm.dylib+0x52fe80]  report_vm_error(char const*, int, char const*, char const*, ...)+0x80
V  [libjvm.dylib+0x423cfc]  ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState)+0x15c
V  [libjvm.dylib+0x436510]  ThreadInVMfromNative::ThreadInVMfromNative(JavaThread*)+0xb0
V  [libjvm.dylib+0xaeec68]  JvmtiRawMonitor::simple_wait(Thread*, long)+0x174
V  [libjvm.dylib+0xaef0a8]  JvmtiRawMonitor::raw_wait(long, Thread*)+0x64
V  [libjvm.dylib+0xac51d8]  JvmtiEnv::RawMonitorWait(JvmtiRawMonitor*, long)+0x64
C  [libbi04t002.dylib+0x9cb4]  syncDebuggeeStatus(JNIEnv_*, _jvmtiEnv*, int)+0x47c
C  [libbi04t002.dylib+0x9800]  Java_nsk_share_jvmti_DebugeeClass_checkStatus+0x64
j  nsk.share.jvmti.DebugeeClass.checkStatus(I)I+0
j  nsk.jvmti.scenarios.bcinstr.BI04.bi04t002.runIt([Ljava/lang/String;Ljava/io/PrintStream;)I+40
j  nsk.jvmti.scenarios.bcinstr.BI04.bi04t002.run([Ljava/lang/String;Ljava/io/PrintStream;)I+9
j  nsk.jvmti.scenarios.bcinstr.BI04.bi04t002.main([Ljava/lang/String;)V+9
v  ~StubRoutines::call_stub
V  [libjvm.dylib+0x800fec]  JavaCalls::call_helper(JavaValue*, methodHandle const&, JavaCallArguments*, JavaThread*)+0x4cc
V  [libjvm.dylib+0xdf2fe8]  invoke(InstanceKlass*, methodHandle const&, Handle, bool, objArrayHandle, BasicType, objArrayHandle, bool, JavaThread*)+0x10bc
V  [libjvm.dylib+0xdf1dd8]  Reflection::invoke_method(oop, Handle, objArrayHandle, JavaThread*)+0x2cc
V  [libjvm.dylib+0x94d620]  JVM_InvokeMethod+0x44c
j  jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Ljava/lang/reflect/Method;Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/Object;+0 java.base@17-internal
j  jdk.internal.reflect.NativeMethodAccessorImpl.invoke(Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/Object;+133 java.base@17-internal
j  jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/Object;+6 java.base@17-internal
j  java.lang.reflect.Method.invoke(Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/Object;+59 java.base@17-internal
j  com.sun.javatest.regtest.agent.MainWrapper$MainThread.run()V+172
j  java.lang.Thread.run()V+11 java.base@17-internal
v  ~StubRoutines::call_stub;;;","2021-06-22 13:56;gziemski;I get a slightly different stack trace:

/Volumes/Work/tests/jtreg/jtreg/bin/jtreg -a -nr -jdk:./build/macosx-aarch64-server-fastdebug/images/jdk/ -nativepath:/Volumes/Work/bugs/8266889/jdk/build/macosx-aarch64-server-fastdebug/support/test/hotspot/jtreg/native/lib/ -exclude:/Volumes/Work/bugs/8266889/jdk/test/hotspot/jtreg/ProblemList.txt -verbose:summary -retain:fail -vmoption:-XX:+AssertWXAtThreadSync test/hotspot/jtreg/vmTestbase/nsk/jvmti/scenarios/bcinstr/BI04/bi04t002

Stack: [0x000000016fbd4000,0x000000016fdd7000],  sp=0x000000016fdd5be0,  free space=2054k
Native frames: (J=compiled Java code, j=interpreted, Vv=VM code, C=native code)
V  [libjvm.dylib+0x10b247c]  VMError::report_and_die(int, char const*, char const*, char*, Thread*, unsigned char*, void*, void*, char const*, int, unsigned long)+0x5d0
V  [libjvm.dylib+0x10b2b44]  VMError::report_and_die(Thread*, void*, char const*, int, char const*, char const*, char*)+0x40
V  [libjvm.dylib+0x519f0c]  report_vm_error(char const*, int, char const*, char const*, ...)+0x80
V  [libjvm.dylib+0x41fa7c]  ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState)+0x15c
V  [libjvm.dylib+0x8ee9f0]  ThreadInVMfromNative::ThreadInVMfromNative(JavaThread*)+0xb0
V  [libjvm.dylib+0xab0580]  JvmtiRawMonitor::raw_enter(Thread*)+0xb4
V  [libjvm.dylib+0xa8aa84]  JvmtiEnv::RawMonitorEnter(JvmtiRawMonitor*)+0x68
C  [libbi04t002.dylib+0x9824]  syncDebuggeeStatus(JNIEnv_*, _jvmtiEnv*, int)+0x44
C  [libbi04t002.dylib+0x97a8]  Java_nsk_share_jvmti_DebugeeClass_checkStatus+0x64
j  nsk.share.jvmti.DebugeeClass.checkStatus(I)I+0
j  nsk.jvmti.scenarios.bcinstr.BI04.bi04t002.runIt([Ljava/lang/String;Ljava/io/PrintStream;)I+40
j  nsk.jvmti.scenarios.bcinstr.BI04.bi04t002.run([Ljava/lang/String;Ljava/io/PrintStream;)I+9
j  nsk.jvmti.scenarios.bcinstr.BI04.bi04t002.main([Ljava/lang/String;)V+9
v  ~StubRoutines::call_stub
V  [libjvm.dylib+0x7e37f0]  JavaCalls::call_helper(JavaValue*, methodHandle const&, JavaCallArguments*, JavaThread*)+0x4d0
V  [libjvm.dylib+0xdb8608]  invoke(InstanceKlass*, methodHandle const&, Handle, bool, objArrayHandle, BasicType, objArrayHandle, bool, JavaThread*)+0xf58
V  [libjvm.dylib+0xdb755c]  Reflection::invoke_method(oop, Handle, objArrayHandle, JavaThread*)+0x2cc
V  [libjvm.dylib+0x91bce0]  JVM_InvokeMethod+0x44c
j  jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Ljava/lang/reflect/Method;Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/Object;+0 java.base@18-internal
j  jdk.internal.reflect.NativeMethodAccessorImpl.invoke(Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/Object;+133 java.base@18-internal
j  jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/Object;+6 java.base@18-internal
j  java.lang.reflect.Method.invoke(Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/Object;+59 java.base@18-internal
j  com.sun.javatest.regtest.agent.MainWrapper$MainThread.run()V+172
j  java.lang.Thread.run()V+11 java.base@18-internal
v  ~StubRoutines::call_stub
;;;","2021-06-23 01:28;akozlov;Do you mean RawMonitorEnter vs RawMonitorWait? It could be a matter of what thread get to the transition first. More runs may show different results.;;;","2021-07-14 03:36;roboduke;Changeset: 381bd621
Author:    Anton Kozlov <akozlov@openjdk.org>
Date:      2021-07-14 10:36:04 +0000
URL:       https://git.openjdk.java.net/jdk17/commit/381bd621074a13cc2f260c18371c956bc48abd4d
;;;","2022-02-09 23:13;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk11u-dev/pull/817
Date: 2022-02-10 07:08:28 +0000;;;","2022-02-15 06:53;vkempik;Fix Request (11u): This fixes small issue in jep-391 backport, not applying cleanly. Macos-aarch64 only fix, so pretty safe
Also to be on par with Oracle;;;",,,,,,,,,,,,,,,,,
[aarch64] Crash with 'Field too big for insn' for some tests under compiler/jvmci/jdk.vm.ci.code.test/src/jdk/vm/ci/code/test/,JDK-8266885,5049254,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,dlong,enikitin,enikitin,2021-05-11 00:09,2021-07-15 10:14,2023-10-01 09:57,2021-06-22 18:49,17,,,,,,,17,hotspot,,0,hs-comp-triaged,jvmci,oracle-triage-17,testbug,,,,,,,,,,"Have only been seen on macosx-aarch64 (and debug). List of failed tests:

compiler/jvmci/jdk.vm.ci.code.test/src/jdk/vm/ci/code/test/DataPatchTest.java
compiler/jvmci/jdk.vm.ci.code.test/src/jdk/vm/ci/code/test/MaxOopMapStackOffsetTest.java
compiler/jvmci/jdk.vm.ci.code.test/src/jdk/vm/ci/code/test/SimpleCodeInstallationTest.java
compiler/jvmci/jdk.vm.ci.code.test/src/jdk/vm/ci/code/test/SimpleDebugInfoTest.java
compiler/jvmci/jdk.vm.ci.code.test/src/jdk/vm/ci/code/test/VirtualObjectDebugInfoTest.java

Sample output:

open/src/hotspot/cpu/aarch64/assembler_aarch64.hpp:234
...
#  guarantee(chk == -1 || chk == 0) failed: Field too big for insn
...
---------------  T H R E A D  ---------------

Current thread (0x0000000124010620):  JavaThread ""MainThread"" [_thread_in_vm, id=40963, stack(0x0000000172128000,0x000000017232b000)]

Stack: [0x0000000172128000,0x000000017232b000],  sp=0x00000001723278f0,  free space=2046k
Native frames: (J=compiled Java code, j=interpreted, Vv=VM code, C=native code)
V  [libjvm.dylib+0xfbe1e8]  VMError::report_and_die(int, char const*, char const*, char*, Thread*, unsigned char*, void*, void*, char const*, int, unsigned long)+0x5d8
V  [libjvm.dylib+0xfbe894]  VMError::report_and_die(Thread*, void*, char const*, int, char const*, char const*, char*)+0x40
V  [libjvm.dylib+0x52b1ac]  report_vm_error(char const*, int, char const*, char const*, ...)+0x80
V  [libjvm.dylib+0xbbf224]  MacroAssembler::pd_patch_instruction_size(unsigned char*, unsigned char*)+0xa8
V  [libjvm.dylib+0xdce378]  Relocation::pd_set_call_destination(unsigned char*)+0x164
V  [libjvm.dylib+0x4b3434]  CodeBuffer::relocate_code_to(CodeBuffer*) const+0x3c4
V  [libjvm.dylib+0x4b2ec4]  CodeBuffer::copy_code_to(CodeBlob*)+0xd0
V  [libjvm.dylib+0xcaafd0]  nmethod::nmethod(Method*, CompilerType, int, int, int, CodeOffsets*, int, DebugInformationRecorder*, Dependencies*, CodeBuffer*, int, OopMapSet*, ExceptionHandlerTable*, ImplicitExceptionTable*, AbstractCompiler*, int, GrowableArrayView<RuntimeStub*> const&, char*, int, int)+0x4f0
V  [libjvm.dylib+0xcaa2cc]  nmethod::new_nmethod(methodHandle const&, int, int, CodeOffsets*, int, DebugInformationRecorder*, Dependencies*, CodeBuffer*, int, OopMapSet*, ExceptionHandlerTable*, ImplicitExceptionTable*, AbstractCompiler*, int, GrowableArrayView<RuntimeStub*> const&, char*, int, int, char const*, FailedSpeculation**)+0x2d0
V  [libjvm.dylib+0xa442d4]  JVMCIRuntime::register_method(JVMCIEnv*, methodHandle const&, nmethod*&, int, CodeOffsets*, int, CodeBuffer*, int, OopMapSet*, ExceptionHandlerTable*, ImplicitExceptionTable*, AbstractCompiler*, DebugInformationRecorder*, Dependencies*, int, bool, bool, JVMCIObject, JVMCIObject, FailedSpeculation**, char*, int)+0x4cc
V  [libjvm.dylib+0x94bae8]  CodeInstaller::install(JVMCICompiler*, JVMCIObject, JVMCIObject, CodeBlob*&, JVMCIObject, FailedSpeculation**, char*, int, JVMCIEnv*)+0x4dc
V  [libjvm.dylib+0x95bf4c]  c2v_installCode(JNIEnv_*, _jobject*, _jobject*, _jobject*, _jobject*, long, _jbyteArray*)+0x424
J 8415  jdk.vm.ci.hotspot.CompilerToVM.installCode(Ljdk/vm/ci/code/TargetDescription;Ljdk/vm/ci/hotspot/HotSpotCompiledCode;Ljdk/vm/ci/code/InstalledCode;J[B)I jdk.internal.vm.ci@17-internal (0 bytes) @ 0x0000000115a72fbc [0x0000000115a72ec0+0x00000000000000fc]
C  0x00000007d23f1e08

Java frames: (J=compiled Java code, j=interpreted, Vv=VM code)
J 8415  jdk.vm.ci.hotspot.CompilerToVM.installCode(Ljdk/vm/ci/code/TargetDescription;Ljdk/vm/ci/hotspot/HotSpotCompiledCode;Ljdk/vm/ci/code/InstalledCode;J[B)I jdk.internal.vm.ci@17-internal (0 bytes) @ 0x0000000115a72fbc [0x0000000115a72ec0+0x00000000000000fc]
j  jdk.vm.ci.hotspot.HotSpotCodeCacheProvider.installCode(Ljdk/vm/ci/meta/ResolvedJavaMethod;Ljdk/vm/ci/code/CompiledCode;Ljdk/vm/ci/code/InstalledCode;Ljdk/vm/ci/meta/SpeculationLog;Z)Ljdk/vm/ci/code/InstalledCode;+159 jdk.internal.vm.ci@17-internal
J 8410 c1 jdk.vm.ci.code.CodeCacheProvider.addCode(Ljdk/vm/ci/meta/ResolvedJavaMethod;Ljdk/vm/ci/code/CompiledCode;Ljdk/vm/ci/meta/SpeculationLog;Ljdk/vm/ci/code/InstalledCode;)Ljdk/vm/ci/code/InstalledCode; jdk.internal.vm.ci@17-internal (13 bytes) @ 0x000000010dd1e1c4 [0x000000010dd1df80+0x0000000000000244]
j  jdk.vm.ci.code.test.CodeInstallationTest.test(Ljdk/vm/ci/code/test/CodeInstallationTest$TestCompiler;Ljava/lang/reflect/Method;[Ljava/lang/Object;)V+58
j  jdk.vm.ci.code.test.DebugInfoTest.test(Ljdk/vm/ci/code/test/DebugInfoTest$DebugInfoCompiler;Ljava/lang/reflect/Method;I[Ljdk/vm/ci/code/Location;[Ljdk/vm/ci/code/Location;[I[Ljdk/vm/ci/meta/JavaKind;)V+66
J 8130 c1 jdk.vm.ci.code.test.DebugInfoTest.test(Ljdk/vm/ci/code/test/DebugInfoTest$DebugInfoCompiler;Ljava/lang/reflect/Method;I[Ljdk/vm/ci/meta/JavaKind;)V (21 bytes) @ 0x000000010de0e410 [0x000000010de0dd00+0x0000000000000710]
J 8128 c1 jdk.vm.ci.code.test.SimpleDebugInfoTest.testIntOnStack(Ljdk/vm/ci/code/test/DebugInfoTest$DebugInfoCompiler;)V (27 bytes) @ 0x000000010de0fa88 [0x000000010de0f080+0x0000000000000a08]
j  jdk.vm.ci.code.test.SimpleDebugInfoTest.testConstInt()V+8
v  ~StubRoutines::call_stub
J 1299  jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Ljava/lang/reflect/Method;Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/Object; java.base@17-internal (0 bytes) @ 0x000000011534d0f0 [0x000000011534d000+0x00000000000000f0]
J 1298 c2 jdk.internal.reflect.NativeMethodAccessorImpl.invoke(Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/Object; java.base@17-internal (150 bytes) @ 0x000000011534c8a4 [0x000000011534c740+0x0000000000000164]
J 1296 c2 jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/Object; java.base@17-internal (10 bytes) @ 0x000000011534c35c [0x000000011534c2c0+0x000000000000009c]
J 8106 c1 org.junit.runners.model.FrameworkMethod$1.runReflectiveCall()Ljava/lang/Object; (19 bytes) @ 0x000000010dda3f7c [0x000000010dda3200+0x0000000000000d7c]
J 8104 c1 org.junit.internal.runners.model.ReflectiveCallable.run()Ljava/lang/Object; (11 bytes) @ 0x000000010ddcb0f8 [0x000000010ddcaf40+0x00000000000001b8]
j  org.junit.runners.model.FrameworkMethod.invokeExplosively(Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/Object;+10
j  org.junit.internal.runners.statements.InvokeMethod.evaluate()V+12
j  org.junit.runners.ParentRunner.runLeaf(Lorg/junit/runners/model/Statement;Lorg/junit/runner/Description;Lorg/junit/runner/notification/RunNotifier;)V+17
J 7210 c1 org.junit.runners.BlockJUnit4ClassRunner.runChild(Lorg/junit/runners/model/FrameworkMethod;Lorg/junit/runner/notification/RunNotifier;)V (36 bytes) @ 0x000000010dd13a54 [0x000000010dd118c0+0x0000000000002194]
J 7208 c1 org.junit.runners.BlockJUnit4ClassRunner.runChild(Ljava/lang/Object;Lorg/junit/runner/notification/RunNotifier;)V (10 bytes) @ 0x000000010dd174a4 [0x000000010dd17240+0x0000000000000264]
J 7197 c2 org.junit.runners.ParentRunner$3.run()V (16 bytes) @ 0x0000000115955890 [0x0000000115955780+0x0000000000000110]
J 7195 c2 org.junit.runners.ParentRunner$1.schedule(Ljava/lang/Runnable;)V (7 bytes) @ 0x0000000115955424 [0x00000001159553c0+0x0000000000000064]
j  org.junit.runners.ParentRunner.runChildren(Lorg/junit/runner/notification/RunNotifier;)V+40
J 7206 c1 org.junit.runners.ParentRunner.access$000(Lorg/junit/runners/ParentRunner;Lorg/junit/runner/notification/RunNotifier;)V (6 bytes) @ 0x000000010dd92c64 [0x000000010dd92bc0+0x00000000000000a4]
J 7188 c2 org.junit.runners.ParentRunner$2.evaluate()V (12 bytes) @ 0x0000000115953f48 [0x0000000115953e80+0x00000000000000c8]
j  org.junit.runners.ParentRunner.run(Lorg/junit/runner/notification/RunNotifier;)V+20
J 7198 c1 org.junit.runners.Suite.runChild(Ljava/lang/Object;Lorg/junit/runner/notification/RunNotifier;)V (10 bytes) @ 0x000000010dd19fac [0x000000010dd19c00+0x00000000000003ac]
J 7196 c1 org.junit.runners.ParentRunner$3.run()V (16 bytes) @ 0x000000010dd1aad0 [0x000000010dd1a700+0x00000000000003d0]
J 7194 c1 org.junit.runners.ParentRunner$1.schedule(Ljava/lang/Runnable;)V (7 bytes) @ 0x000000010e0001b4 [0x000000010dffffc0+0x00000000000001f4]
j  org.junit.runners.ParentRunner.runChildren(Lorg/junit/runner/notification/RunNotifier;)V+40
J 7187 c1 org.junit.runners.ParentRunner$2.evaluate()V (12 bytes) @ 0x000000010df4f850 [0x000000010df4f580+0x00000000000002d0]
j  org.junit.runners.ParentRunner.run(Lorg/junit/runner/notification/RunNotifier;)V+20
j  org.junit.runner.JUnitCore.run(Lorg/junit/runner/Runner;)Lorg/junit/runner/Result;+37
J 5817 c1 org.junit.runner.JUnitCore.run(Lorg/junit/runner/Computer;[Ljava/lang/Class;)Lorg/junit/runner/Result; (10 bytes) @ 0x000000010dfe83c8 [0x000000010dfe8040+0x0000000000000388]
j  org.junit.runner.JUnitCore.runClasses([Ljava/lang/Class;)Lorg/junit/runner/Result;+11
J 5714 c1 com.sun.javatest.regtest.agent.JUnitRunner.main(Ljava/lang/ClassLoader;[Ljava/lang/String;)V (351 bytes) @ 0x000000010dd886a8 [0x000000010dd84340+0x0000000000004368]
J 5712 c1 com.sun.javatest.regtest.agent.JUnitRunner.main([Ljava/lang/String;)V (6 bytes) @ 0x000000010de43824 [0x000000010de43780+0x00000000000000a4]
v  ~StubRoutines::call_stub
J 1299  jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Ljava/lang/reflect/Method;Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/Object; java.base@17-internal (0 bytes) @ 0x000000011534d0f0 [0x000000011534d000+0x00000000000000f0]
J 1298 c2 jdk.internal.reflect.NativeMethodAccessorImpl.invoke(Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/Object; java.base@17-internal (150 bytes) @ 0x000000011534c8a4 [0x000000011534c740+0x0000000000000164]
J 1296 c2 jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/Object; java.base@17-internal (10 bytes) @ 0x000000011534c35c [0x000000011534c2c0+0x000000000000009c]
J 1260 c2 java.lang.reflect.Method.invoke(Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/Object; java.base@17-internal (65 bytes) @ 0x00000001153455f8 [0x0000000115345540+0x00000000000000b8]
J 5691 c1 com.sun.javatest.regtest.agent.MainWrapper$MainThread.run()V (476 bytes) @ 0x000000010dfd1574 [0x000000010dfce500+0x0000000000003074]
J 5687 c1 java.lang.Thread.run()V java.base@17-internal (17 bytes) @ 0x000000010dedf5d0 [0x000000010dedf340+0x0000000000000290]
v  ~StubRoutines::call_stub
",,,,,,,,,,,JDK-8269436,JDK-8270623,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,aarch64,,,,,,,,,generic,,,,,"0|i2ss17:",9223372036854775807,b28,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2021-06-16 17:38;dlong;I see recent crashes on linux-aarch64:

V  [libjvm.so+0x125a544]  MacroAssembler::pd_patch_instruction_size(unsigned char*, unsigned char*)+0x240
V  [libjvm.so+0x154ec18]  Relocation::pd_set_call_destination(unsigned char*)+0x54
V  [libjvm.so+0x937284]  CodeBuffer::relocate_code_to(CodeBuffer*) const+0x470
V  [libjvm.so+0x939920]  CodeBuffer::copy_code_to(CodeBlob*)+0x8c
V  [libjvm.so+0x1399594]  nmethod::nmethod(Method*, CompilerType, int, int, int, CodeOffsets*, int, DebugInformationRecorder*, Dependencies*, CodeBuffer*, int, OopMapSet*, ExceptionHandlerTable*, ImplicitExceptionTable*, AbstractCompiler*, int, GrowableArrayView<RuntimeStub*> const&, char*, int, int)+0x430
V  [libjvm.so+0x1399c9c]  nmethod::new_nmethod(methodHandle const&, int, int, CodeOffsets*, int, DebugInformationRecorder*, Dependencies*, CodeBuffer*, int, OopMapSet*, ExceptionHandlerTable*, ImplicitExceptionTable*, AbstractCompiler*, int, GrowableArrayView<RuntimeStub*> const&, char*, int, int, char const*, FailedSpeculation**)+0x2dc
V  [libjvm.so+0x1065a14]  JVMCIRuntime::register_method(JVMCIEnv*, methodHandle const&, nmethodLocker&, int, CodeOffsets*, int, CodeBuffer*, int, OopMapSet*, ExceptionHandlerTable*, ImplicitExceptionTable*, AbstractCompiler*, DebugInformationRecorder*, Dependencies*, int, bool, bool, JVMCIObject, JVMCIObject, FailedSpeculation**, char*, int)+0x3c4
V  [libjvm.so+0xf73b40]  CodeInstaller::install(JVMCICompiler*, JVMCIObject, JVMCIObject, CodeBlob*&, nmethodLocker&, JVMCIObject, FailedSpeculation**, char*, int, JVMCIEnv*)+0x5fc
V  [libjvm.so+0xf96aa4]  c2v_installCode(JNIEnv_*, _jobject*, _jobject*, _jobject*, _jobject*, long, _jbyteArray*)+0x3e4
J 9244  jdk.vm.ci.hotspot.CompilerToVM.installCode(Ljdk/vm/ci/code/TargetDescription;Ljdk/vm/ci/hotspot/HotSpotCompiledCode;Ljdk/vm/ci/code/InstalledCode;J[B)I jdk.internal.vm.ci@17-ea (0 bytes) @ 0x0000fffe0599b77c [0x0000fffe0599b6c0+0x00000000000000bc];;;","2021-06-16 18:26;dlong;It crashes because it is trying to patch an unconditional bl instruction with a new target which is 129MB away.  The reserved code cache size is 240MB.  The branch target is the deoptimization stub outside the code cache.  The JVMCI assembler seems to be doing a near call instead of a far call like c1 and c2 generate.;;;","2021-06-16 18:47;dlong;This code seems a bit optimisitc:

    public void emitEpilogue() {
        recordMark(config.MARKID_DEOPT_HANDLER_ENTRY);
        recordCall(new HotSpotForeignCallTarget(config.handleDeoptStub), 5, true, null);
        code.emitInt(0x94000000);  // bl <imm26>
    };;;","2021-06-16 20:39;dlong;Running with -Xcomp places the JVMCI code farther away from the deopt stub, helping to reproduce the problem.;;;","2021-06-22 18:49;roboduke;Changeset: ab7ff1e1
Author:    Dean Long <dlong@openjdk.org>
Date:      2021-06-23 01:48:19 +0000
URL:       https://git.openjdk.java.net/jdk17/commit/ab7ff1e1374d3a5c4c1fb8df9951c593775ea50c
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Enable debug log for SSLEngineExplorerMatchedSNI.java,JDK-8266881,5049246,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,xuelei,xuelei,xuelei,2021-05-10 21:12,2023-03-21 02:37,2023-10-01 09:57,2021-05-13 11:54,,,,,,,,17,security-libs,,0,jdk11u-fix-request,jdk11u-fix-yes,noreg-self,test-only,,,,,,,,,,The test SSLEngineExplorerMatchedSNI.java fails intermittently.  The cause is unknown fo now.  It would could be helpful to enable the JSSE debugging in the test.,,,,,,,,,,,JDK-8304385,JDK-8304633,JDK-8288964,JDK-8288321,,,,,,,,,,,,,,,,,,,JDK-8208606,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2srzf:",9223372036854775807,b23,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@39d9862,,,,,,,,,"2021-05-13 11:54;roboduke;Changeset: 26670245
Author:    Xue-Lei Andrew Fan <xuelei@openjdk.org>
Date:      2021-05-13 18:53:52 +0000
URL:       https://git.openjdk.java.net/jdk/commit/266702451db57c4f006f22601288174cc0613339
;;;","2022-06-21 07:03;goetz;Fix request [11u]

I backport this for parity with 11.0.17-oracle.
No risk, only a test change.
Clean backport.
Test passes. SAP nitghtly testing passed.;;;","2022-06-21 07:17;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk11u-dev/pull/1166
Date: 2022-06-21 14:08:14 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
[macos] Incorrect duration reported for HLS live streams,JDK-8266860,5049224,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,almatvee,almatvee,almatvee,2021-05-10 17:08,2021-08-19 06:40,2023-10-01 09:57,2021-05-17 18:04,8,jfx17,,,,,,jfx17,javafx,,0,macos,sn_93,sqebug,,,,,,,,,,,"Media.getDuration() is reporting incorrect value for HLS live streams. Based on docs it should be reporting Duration.INDEFINITE, but it actually reports  Duration.UNKNOWN. On Windows and Linux it reports correct value. I tried only several streams, but most likely it is reproducible for all HLS streams.",,,,,,,,,,,JDK-8272722,JDK-8267298,,,,,,,,,,,,,,,JDK-8248463,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,os_x,,,,,"0|i2sruj:",9223372036854775807,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@712e7ab7,,,,,,,,,"2021-05-17 18:04;roboduke;Changeset: c511789b
Author:    Alexander Matveev <almatvee@openjdk.org>
Date:      2021-05-18 01:03:56 +0000
URL:       https://git.openjdk.java.net/jfx/commit/c511789b106a3f3172aef606419d372bcbca606f
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
PipedOutputStream.sink should be volatile,JDK-8266857,5049219,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,cushon,cushon,cushon,2021-05-10 16:24,2021-05-17 17:41,2023-10-01 09:57,2021-05-11 08:48,,,,,,,,17,core-libs,,0,noreg-hard,,,,,,,,,,,,,"When creating a PipedInputStream and PipedOutputStream like the following:

PipedOutputStream out = new PipedOutputStream();
PipedInputStream in = new PipedInputStream(out) ...

PipedOutputStream#connect will be called by the thread with the PipedInputStream and write to the field PipedOutputStream.sink, and that field will be read in the other thread by methods like PipedOutputStream#write.

PipedOutputStream#connect is synchronized so the write is guarded by a lock, but PipedOutputStream#write is not synchronized, so the read is racy.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-4291372,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2srtf:",9223372036854775807,b22,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@5f132e58,,,,,,,,,"2021-05-11 08:48;roboduke;Changeset: d0daa725
Author:    Liam Miller-Cushon <cushon@openjdk.org>
Date:      2021-05-11 15:47:14 +0000
URL:       https://git.openjdk.java.net/jdk/commit/d0daa72592815fcdd9d550b9cc7dd70a06ae0968
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Make <wbr> element void,JDK-8266856,5049218,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,jjg,prappo,prappo,2021-05-10 16:15,2021-05-26 17:29,2023-10-01 09:57,2021-05-20 17:32,17,,,,,,,17,tools,,0,,,,,,,,,,,,,,"According to https://html.spec.whatwg.org/multipage/syntax.html#elements-2 <wbr> is a void element. A void element does not have an end tag. However, jdk.javadoc.internal.doclint.HtmlTag.WBR is modelled as an element with a required end tag.

Although it doesn't seem to cause any problems if inserted by the standard doclet (e.g. JDK-8266779), a <wbr> inserted in a doc comment causes an unwarranted doclint error ""element not closed: wbr"".",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2srt7:",9223372036854775807,b24,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@7900061a,,,,,,,,,"2021-05-10 16:16;prappo;Accidentally spotted after JDK-8266779.;;;","2021-05-20 17:32;roboduke;Changeset: e094f3f8
Author:    Jonathan Gibbons <jjg@openjdk.org>
Date:      2021-05-21 00:31:04 +0000
URL:       https://git.openjdk.java.net/jdk/commit/e094f3f856f5f17d4be65b9f83ff493aa0280deb
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
LibraryCallKit::inline_preconditions_checkIndex modifies control flow even if the intrinsic bailed out,JDK-8266854,5049216,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,sviswanathan,sviswanathan,sviswanathan,2021-05-10 15:28,2021-07-15 10:15,2023-10-01 09:57,2021-06-23 10:27,17,,,,,,,17,hotspot,,0,c2,hs-comp-triaged,oracle-triage-11,oracle-triage-17,,,,,,,,,,"LibraryCallKit::inline_preconditions_checkIndex can result in ""#  assert(ctrl == kit.control()) failed: Control flow was added although the intrinsic bailed out"" sometimes.

Consider the following code snippet:
 ...
 set_control(_gvn.transform(new IfTrueNode(rc)));
 {
   PreserveJVMState pjvms(this);
   set_control(_gvn.transform(new IfFalseNode(rc)));
   uncommon_trap(Deoptimization::Reason_range_check,
                 Deoptimization::Action_make_not_entrant);
 }
 ..
 Here the control is being modified by set_control even though a bailout is possible afterwards. 

  Moving the set_control later in the intrinsic fixes this.",,,,,,,,,,,JDK-8269444,JDK-8270631,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8269107,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2srsr:",9223372036854775807,b28,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2021-06-23 10:26;roboduke;Changeset: b4743143
Author:    Sandhya Viswanathan <sviswanathan@openjdk.org>
Date:      2021-06-23 17:25:34 +0000
URL:       https://git.openjdk.java.net/jdk17/commit/b4743143428a3e0c9a6d1d7dcaf73f7a06882e84
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Enable pandoc on macosx-aarch64 at Oracle,JDK-8266839,5049201,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,mikael,mikael,mikael,2021-05-10 12:24,2021-12-08 17:44,2023-10-01 09:57,2021-12-01 12:23,17,18,,,,,,18,infrastructure,,0,build-infra,,,,,,,,,,,,,There's no pandoc dependency configured for the macosx-aarch64 builds. Pandoc is needed for generating man pages.,,,,,,,,,,,,,,,,,,,,,,JDK-8269266,,,,,,,,,,,JDK-8261554,,,,,,,,,,,,,,,,,,,aarch64,,,,,,,,,os_x,,,,,"0|i2srpf:",9223372036854775807,b27,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@429c566,,,,,,,,,"2021-12-01 12:23;roboduke;Changeset: 51d6d7a3
Author:    Mikael Vidstedt <mikael@openjdk.org>
Date:      2021-12-01 20:21:38 +0000
URL:       https://git.openjdk.java.net/jdk/commit/51d6d7a36b760b2b2b77269cc06438108a9931a2
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
micro java/nio/SelectorWakeup.java has wrong copyright header,JDK-8266820,5049175,Bug,Resolved,JDK,JDK,software,duke,,,P5,Fixed,bpb,bpb,bpb,2021-05-10 08:13,2021-05-17 17:41,2023-10-01 09:57,2021-05-11 09:13,17,,,,,,,17,core-libs,,0,,,,,,,,,,,,,,Change it to the correct one.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8253478,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2srjn:",9223372036854775807,b22,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@674604a9,,,,,,,,,"2021-05-11 09:13;roboduke;Changeset: 7a0a57cd
Author:    Brian Burkhalter <bpb@openjdk.org>
Date:      2021-05-11 16:12:36 +0000
URL:       https://git.openjdk.java.net/jdk/commit/7a0a57cd56a11e4b9e42ac3426f2e0c505da0987
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Openjfx controls test build broken (Eclipse),JDK-8266811,5049154,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,fastegal,fastegal,fastegal,2021-05-10 04:20,2021-05-14 14:51,2023-10-01 09:57,2021-05-12 15:50,jfx17,,,,,,,jfx17,javafx,,0,build,Eclipse,noreg-build,test,,,,,,,,,,was introduced with fix [JDK-8189354] which uses MockListObserver in tests. Fix is analogous to previous eclipse build problems (f.i. JDK-8265513): add-exports to allow access to base' test package.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8265513,JDK-8189354,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2srez:",9223372036854775807,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@1d1c7815,,,,,,,,,"2021-05-12 15:50;roboduke;Changeset: e40b0b88
Author:    Jeanette Winzenburg <fastegal@openjdk.org>
Date:      2021-05-12 22:50:22 +0000
URL:       https://git.openjdk.java.net/jfx/commit/e40b0b88a5b95931f19b7a767e34c156d49f1c6b
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Search label still uses old search field id,JDK-8266808,5049152,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,hannesw,hannesw,hannesw,2021-05-10 03:26,2021-05-17 17:42,2023-10-01 09:57,2021-05-12 01:33,,,,,,,,17,tools,,0,,,,,,,,,,,,,,"In JDK-8263528 the ids for the search input and reset button were changed, but I forgot to rename the `for` attribute of the search label. This attribute should have the same value as the id of the search input.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8263528,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2srej:",9223372036854775807,b22,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@7900061a,,,,,,,,,"2021-05-12 01:33;roboduke;Changeset: 97367c01
Author:    Hannes Wallnöfer <hannesw@openjdk.org>
Date:      2021-05-12 08:32:29 +0000
URL:       https://git.openjdk.java.net/jdk/commit/97367c01c13261ccf9b6f3032213bbf3e342fbae
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Windows os_windows-gtest broken for UseLargePages,JDK-8266807,5049151,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,sjohanss,sjohanss,sjohanss,2021-05-10 03:18,2022-04-03 23:20,2023-10-01 09:57,2021-05-31 05:52,17,,,,,,,17,hotspot,,0,testbug,ursqe-triaged,,,,,,,,,,,,"The comparisons in the test check for reservations != NULL and consider that a failed reservation, which is incorrect. This leads to the test never really doing anything. When UseLargePages is false, the test is skipped and when true and the user is configured with lock permissions, the test is skipped after the first allocation (since it is seen as a failure).

When a user doesn't have permissions to lock memory, the JVM will turn off large pages so this will be the same as running with -UseLargePages.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2sreb:",9223372036854775807,b25,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6b00f96c,,,,,,,,,"2021-05-31 05:52;roboduke;Changeset: 5df25dc0
Author:    Stefan Johansson <sjohanss@openjdk.org>
Date:      2021-05-31 12:51:21 +0000
URL:       https://git.openjdk.java.net/jdk/commit/5df25dc088cfc3069e451b48c4f013d1d0491aa2
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Shenandoah: Round up region size to page size unconditionally,JDK-8266802,5049143,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,shade,shade,shade,2021-05-10 01:30,2021-06-07 05:30,2023-10-01 09:57,2021-05-10 13:29,11.0.9,16,17,8-shenandoah,,,,17,hotspot,,0,gc-shenandoah,jdk11u-fix-request,jdk11u-fix-yes,jdk16u-fix-request,jdk16u-fix-SQE-ok,jdk16u-fix-yes,redhat-interest,,,,,,,"Since JDK-8265239, runtime/os/TestTracePageSizes.java fails with Shenandoah like this:

#  Internal Error (/home/buildbot/worker/test-jdkX-linux/build/src/hotspot/share/gc/shenandoah/shenandoahHeap.cpp:156), pid=55712, tid=55720
#  assert(_num_regions == (max_byte_size / reg_size_bytes)) failed: Must match

This is because Shenandoah region sizes are rounded up to page size only when ShenandoahUncommit is true. In that test configuration, ShenandoahUncommit is false, because Xmx == Xms.",,,,,,,,,,,JDK-8267779,JDK-8267560,JDK-8267499,,,,,,,,,,,,,,,,,JDK-8266740,,,JDK-8265239,JDK-8268127,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2srcj:",9223372036854775807,b22,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6b00f96c,,,,,,,,,"2021-05-10 13:29;roboduke;Changeset: e5d3ee39
Author:    Aleksey Shipilev <shade@openjdk.org>
Date:      2021-05-10 20:28:16 +0000
URL:       https://git.openjdk.java.net/jdk/commit/e5d3ee394ae940ee0111489e6e072f327ec29c3b
;;;","2021-05-20 06:59;zgu;Fix Request (11u)

I would like to backport this patch to 11u.

Without this patch, Shenandoah may not create enough regions to cover whole heap, that results some of heap memory never used.

The original patch applies cleanly to 11u and passed new test in patch.;;;","2021-05-20 07:35;zgu;Fix Request (16u)

I would like to backport this patch to 16u.

Without this patch, Shenandoah may not create enough regions to cover whole heap, that results some of heap memory never used.

The original patch applies cleanly to 16u and passed new test in patch.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Annotation property which is compiled as an array property but changed to a single element throws NullPointerException,JDK-8266791,5049125,Bug,Closed,JDK,JDK,software,duke,,,P4,Fixed,winterhalter,winterhalter,winterhalter,2021-05-09 14:33,2022-04-08 03:37,2023-10-01 09:57,2021-06-14 01:25,,,,,,,,18,core-libs,,0,byte-buddy-found,,,,,,,,,,,,,"If an annotation property is defined as an array and later changed to a non-array property, annotations that are compiled with the former annotation will cause a NullPointerException during annotation parsing.",,,,,,,,,,,,,,,,,,,,,,,,JDK-8268452,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2sr8j:",9223372036854775807,b02,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@313ae9a0,,,,,,,Verified,,"2021-06-14 01:25;roboduke;Changeset: 51f3427e
Author:    Rafael Winterhalter <winterhalter@openjdk.org>
Committer: Joel Borggrén-Franck <jfranck@openjdk.org>
Date:      2021-06-14 08:24:24 +0000
URL:       https://git.openjdk.java.net/jdk/commit/51f3427e9bb4a3924a8178338316b9ea30304182
;;;","2022-04-08 03:37;sqetools;verified;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Potential overflow of pointer arithmetic in G1ArchiveAllocator,JDK-8266787,5049110,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,ayang,ayang,ayang,2021-05-08 12:36,2021-05-17 17:40,2023-10-01 09:57,2021-05-11 03:35,17,,,,,,,17,hotspot,,0,gc-g1,,,,,,,,,,,,,"In `G1ArchiveAllocator::archive_mem_allocate`, the addition, `HeapWord* new_top = old_top + word_size;`, could overflow. Should use `pointer_delta` to check if there's enough space left firstly.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2sr57:",9223372036854775807,b22,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6b00f96c,,,,,,,,,"2021-05-11 03:35;roboduke;Changeset: 6575566d
Author:    Albert Mingkun Yang <ayang@openjdk.org>
Date:      2021-05-11 10:34:56 +0000
URL:       https://git.openjdk.java.net/jdk/commit/6575566d830c59bce3e77102e06eca574218f37e
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
java/text/Collator/RuleBasedCollatorTest.java fails with jtreg 6,JDK-8266784,5049106,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,naoto,jjg,jjg,2021-05-08 11:46,2021-07-26 03:51,2023-10-01 09:57,2021-05-11 15:42,17,,,,,,,17,core-libs,,0,blocks-jtreg-6,noreg-self,ursqe-triaged,,,,,,,,,,,"java/text/Collator/RuleBasedCollatorTest.java fails when run with jtreg 6, which provides TestNG 4.7.

Here is the System.out from the test 

test RuleBasedCollatorTest.testBasicParsingOrder(): success
test RuleBasedCollatorTest.testEquality(): success
test RuleBasedCollatorTest.testFrenchSecondarySort(""a?a"", ""?aa"", 1): failure
java.text.ParseException: missing char (=,;<&) : null@
	at java.base/java.text.PatternEntry$Parser.next(PatternEntry.java:254)
	at java.base/java.text.MergeCollation.addPattern(MergeCollation.java:180)
	at java.base/java.text.MergeCollation.setPattern(MergeCollation.java:166)
	at java.base/java.text.MergeCollation.<init>(MergeCollation.java:73)
	at java.base/java.text.RBTableBuilder.build(RBTableBuilder.java:113)
	at java.base/java.text.RBCollationTables.<init>(RBCollationTables.java:83)
	at java.base/java.text.RuleBasedCollator.<init>(RuleBasedCollator.java:301)
	at java.base/java.text.RuleBasedCollator.<init>(RuleBasedCollator.java:282)
	at RuleBasedCollatorTest.testFrenchSecondarySort(RuleBasedCollatorTest.java:119)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:78)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:133)
	at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:598)
	at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:173)
	at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
	at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:824)
	at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:146)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
	at org.testng.TestRunner.privateRun(TestRunner.java:794)
	at org.testng.TestRunner.run(TestRunner.java:596)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:377)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:371)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:332)
	at org.testng.SuiteRunner.run(SuiteRunner.java:276)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1212)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1134)
	at org.testng.TestNG.runSuites(TestNG.java:1063)
	at org.testng.TestNG.run(TestNG.java:1031)
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:94)
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:54)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:78)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at com.sun.javatest.regtest.agent.MainWrapper$MainThread.run(MainWrapper.java:127)
	at java.base/java.lang.Thread.run(Thread.java:831)
test RuleBasedCollatorTest.testFrenchSecondarySort(""?a"", ""?A"", -1): failure
java.text.ParseException: missing char (=,;<&) : null@
	at java.base/java.text.PatternEntry$Parser.next(PatternEntry.java:254)
	at java.base/java.text.MergeCollation.addPattern(MergeCollation.java:180)
	at java.base/java.text.MergeCollation.setPattern(MergeCollation.java:166)
	at java.base/java.text.MergeCollation.<init>(MergeCollation.java:73)
	at java.base/java.text.RBTableBuilder.build(RBTableBuilder.java:113)
	at java.base/java.text.RBCollationTables.<init>(RBCollationTables.java:83)
	at java.base/java.text.RuleBasedCollator.<init>(RuleBasedCollator.java:301)
	at java.base/java.text.RuleBasedCollator.<init>(RuleBasedCollator.java:282)
	at RuleBasedCollatorTest.testFrenchSecondarySort(RuleBasedCollatorTest.java:119)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:78)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:133)
	at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:598)
	at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:173)
	at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
	at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:824)
	at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:146)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
	at org.testng.TestRunner.privateRun(TestRunner.java:794)
	at org.testng.TestRunner.run(TestRunner.java:596)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:377)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:371)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:332)
	at org.testng.SuiteRunner.run(SuiteRunner.java:276)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1212)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1134)
	at org.testng.TestNG.runSuites(TestNG.java:1063)
	at org.testng.TestNG.run(TestNG.java:1031)
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:94)
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:54)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:78)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at com.sun.javatest.regtest.agent.MainWrapper$MainThread.run(MainWrapper.java:127)
	at java.base/java.lang.Thread.run(Thread.java:831)
test RuleBasedCollatorTest.testFrenchSecondarySort(""?b"", ""?A"", 1): failure
java.text.ParseException: missing char (=,;<&) : null@
	at java.base/java.text.PatternEntry$Parser.next(PatternEntry.java:254)
	at java.base/java.text.MergeCollation.addPattern(MergeCollation.java:180)
	at java.base/java.text.MergeCollation.setPattern(MergeCollation.java:166)
	at java.base/java.text.MergeCollation.<init>(MergeCollation.java:73)
	at java.base/java.text.RBTableBuilder.build(RBTableBuilder.java:113)
	at java.base/java.text.RBCollationTables.<init>(RBCollationTables.java:83)
	at java.base/java.text.RuleBasedCollator.<init>(RuleBasedCollator.java:301)
	at java.base/java.text.RuleBasedCollator.<init>(RuleBasedCollator.java:282)
	at RuleBasedCollatorTest.testFrenchSecondarySort(RuleBasedCollatorTest.java:119)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:78)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:133)
	at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:598)
	at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:173)
	at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
	at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:824)
	at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:146)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
	at org.testng.TestRunner.privateRun(TestRunner.java:794)
	at org.testng.TestRunner.run(TestRunner.java:596)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:377)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:371)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:332)
	at org.testng.SuiteRunner.run(SuiteRunner.java:276)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1212)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1134)
	at org.testng.TestNG.runSuites(TestNG.java:1063)
	at org.testng.TestNG.run(TestNG.java:1031)
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:94)
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:54)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:78)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at com.sun.javatest.regtest.agent.MainWrapper$MainThread.run(MainWrapper.java:127)
	at java.base/java.lang.Thread.run(Thread.java:831)
test RuleBasedCollatorTest.testFrenchSecondarySort(""?"", ""?"", -1): failure
java.text.ParseException: missing char (=,;<&) : null@
	at java.base/java.text.PatternEntry$Parser.next(PatternEntry.java:254)
	at java.base/java.text.MergeCollation.addPattern(MergeCollation.java:180)
	at java.base/java.text.MergeCollation.setPattern(MergeCollation.java:166)
	at java.base/java.text.MergeCollation.<init>(MergeCollation.java:73)
	at java.base/java.text.RBTableBuilder.build(RBTableBuilder.java:113)
	at java.base/java.text.RBCollationTables.<init>(RBCollationTables.java:83)
	at java.base/java.text.RuleBasedCollator.<init>(RuleBasedCollator.java:301)
	at java.base/java.text.RuleBasedCollator.<init>(RuleBasedCollator.java:282)
	at RuleBasedCollatorTest.testFrenchSecondarySort(RuleBasedCollatorTest.java:119)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:78)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:133)
	at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:598)
	at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:173)
	at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
	at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:824)
	at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:146)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
	at org.testng.TestRunner.privateRun(TestRunner.java:794)
	at org.testng.TestRunner.run(TestRunner.java:596)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:377)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:371)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:332)
	at org.testng.SuiteRunner.run(SuiteRunner.java:276)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1212)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1134)
	at org.testng.TestNG.runSuites(TestNG.java:1063)
	at org.testng.TestNG.run(TestNG.java:1031)
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:94)
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:54)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:78)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at com.sun.javatest.regtest.agent.MainWrapper$MainThread.run(MainWrapper.java:127)
	at java.base/java.lang.Thread.run(Thread.java:831)
test RuleBasedCollatorTest.testFrenchSecondarySort(""a"", ""?"", -1): failure
java.text.ParseException: missing char (=,;<&) : null@
	at java.base/java.text.PatternEntry$Parser.next(PatternEntry.java:254)
	at java.base/java.text.MergeCollation.addPattern(MergeCollation.java:180)
	at java.base/java.text.MergeCollation.setPattern(MergeCollation.java:166)
	at java.base/java.text.MergeCollation.<init>(MergeCollation.java:73)
	at java.base/java.text.RBTableBuilder.build(RBTableBuilder.java:113)
	at java.base/java.text.RBCollationTables.<init>(RBCollationTables.java:83)
	at java.base/java.text.RuleBasedCollator.<init>(RuleBasedCollator.java:301)
	at java.base/java.text.RuleBasedCollator.<init>(RuleBasedCollator.java:282)
	at RuleBasedCollatorTest.testFrenchSecondarySort(RuleBasedCollatorTest.java:119)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:78)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:133)
	at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:598)
	at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:173)
	at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
	at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:824)
	at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:146)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
	at org.testng.TestRunner.privateRun(TestRunner.java:794)
	at org.testng.TestRunner.run(TestRunner.java:596)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:377)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:371)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:332)
	at org.testng.SuiteRunner.run(SuiteRunner.java:276)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1212)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1134)
	at org.testng.TestNG.runSuites(TestNG.java:1063)
	at org.testng.TestNG.run(TestNG.java:1031)
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:94)
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:54)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:78)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at com.sun.javatest.regtest.agent.MainWrapper$MainThread.run(MainWrapper.java:127)
	at java.base/java.lang.Thread.run(Thread.java:831)
test RuleBasedCollatorTest.testIgnorableCharacter(): success
test RuleBasedCollatorTest.testNormalization(""?"", ""?"", 0, -1): failure
java.lang.NullPointerException: Cannot invoke ""java.text.RuleBasedCollator.clone()"" because ""RuleBasedCollatorTest.USC"" is null
	at RuleBasedCollatorTest.testNormalization(RuleBasedCollatorTest.java:168)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:78)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:133)
	at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:598)
	at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:173)
	at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
	at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:824)
	at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:146)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
	at org.testng.TestRunner.privateRun(TestRunner.java:794)
	at org.testng.TestRunner.run(TestRunner.java:596)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:377)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:371)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:332)
	at org.testng.SuiteRunner.run(SuiteRunner.java:276)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1212)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1134)
	at org.testng.TestNG.runSuites(TestNG.java:1063)
	at org.testng.TestNG.run(TestNG.java:1031)
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:94)
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:54)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:78)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at com.sun.javatest.regtest.agent.MainWrapper$MainThread.run(MainWrapper.java:127)
	at java.base/java.lang.Thread.run(Thread.java:831)
test RuleBasedCollatorTest.testNormalization(""?"", ""?"", 1, -1): failure
java.lang.NullPointerException: Cannot invoke ""java.text.RuleBasedCollator.clone()"" because ""RuleBasedCollatorTest.USC"" is null
	at RuleBasedCollatorTest.testNormalization(RuleBasedCollatorTest.java:168)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:78)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:133)
	at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:598)
	at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:173)
	at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
	at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:824)
	at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:146)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
	at org.testng.TestRunner.privateRun(TestRunner.java:794)
	at org.testng.TestRunner.run(TestRunner.java:596)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:377)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:371)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:332)
	at org.testng.SuiteRunner.run(SuiteRunner.java:276)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1212)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1134)
	at org.testng.TestNG.runSuites(TestNG.java:1063)
	at org.testng.TestNG.run(TestNG.java:1031)
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:94)
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:54)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:78)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at com.sun.javatest.regtest.agent.MainWrapper$MainThread.run(MainWrapper.java:127)
	at java.base/java.lang.Thread.run(Thread.java:831)
test RuleBasedCollatorTest.testNormalization(""?"", ""?"", 2, 0): failure
java.lang.NullPointerException: Cannot invoke ""java.text.RuleBasedCollator.clone()"" because ""RuleBasedCollatorTest.USC"" is null
	at RuleBasedCollatorTest.testNormalization(RuleBasedCollatorTest.java:168)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:78)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:133)
	at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:598)
	at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:173)
	at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
	at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:824)
	at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:146)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
	at org.testng.TestRunner.privateRun(TestRunner.java:794)
	at org.testng.TestRunner.run(TestRunner.java:596)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:377)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:371)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:332)
	at org.testng.SuiteRunner.run(SuiteRunner.java:276)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1212)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1134)
	at org.testng.TestNG.runSuites(TestNG.java:1063)
	at org.testng.TestNG.run(TestNG.java:1031)
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:94)
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:54)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:78)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at com.sun.javatest.regtest.agent.MainWrapper$MainThread.run(MainWrapper.java:127)
	at java.base/java.lang.Thread.run(Thread.java:831)
test RuleBasedCollatorTest.testNullParseException(): success
test RuleBasedCollatorTest.testParseException(""""): success
test RuleBasedCollatorTest.testParseException(""a < b""): success
test RuleBasedCollatorTest.testParseException(""< a-b < c""): success
test RuleBasedCollatorTest.testParseException(""< ,a""): success
test RuleBasedCollatorTest.testParseException(""< a < b & c < d""): success
test RuleBasedCollatorTest.testRules(""< b=c<?;A,a"", [Ljava.lang.String;@16fee85c, [Ljava.lang.String;@297e7183): success
test RuleBasedCollatorTest.testRules(""null& b < ch ,cH, Ch, CH < c "", [Ljava.lang.String;@76b7453c, [Ljava.lang.String;@2c9fd000): failure
java.text.ParseException: missing char (=,;<&) : null& b < 
	at java.base/java.text.PatternEntry$Parser.next(PatternEntry.java:254)
	at java.base/java.text.MergeCollation.addPattern(MergeCollation.java:180)
	at java.base/java.text.MergeCollation.setPattern(MergeCollation.java:166)
	at java.base/java.text.MergeCollation.<init>(MergeCollation.java:73)
	at java.base/java.text.RBTableBuilder.build(RBTableBuilder.java:113)
	at java.base/java.text.RBCollationTables.<init>(RBCollationTables.java:83)
	at java.base/java.text.RuleBasedCollator.<init>(RuleBasedCollator.java:301)
	at java.base/java.text.RuleBasedCollator.<init>(RuleBasedCollator.java:282)
	at RuleBasedCollatorTest.testRules(RuleBasedCollatorTest.java:97)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:78)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:133)
	at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:598)
	at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:173)
	at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
	at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:824)
	at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:146)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
	at org.testng.TestRunner.privateRun(TestRunner.java:794)
	at org.testng.TestRunner.run(TestRunner.java:596)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:377)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:371)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:332)
	at org.testng.SuiteRunner.run(SuiteRunner.java:276)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1212)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1134)
	at org.testng.TestNG.runSuites(TestNG.java:1063)
	at org.testng.TestNG.run(TestNG.java:1031)
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:94)
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:54)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:78)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at com.sun.javatest.regtest.agent.MainWrapper$MainThread.run(MainWrapper.java:127)
	at java.base/java.lang.Thread.run(Thread.java:831)
test RuleBasedCollatorTest.testRules(""null& ae = ? < b"", [Ljava.lang.String;@7aaa3e54, [Ljava.lang.String;@414042fa): failure
java.text.ParseException: missing char (=,;<&) : null& ae =
	at java.base/java.text.PatternEntry$Parser.next(PatternEntry.java:254)
	at java.base/java.text.MergeCollation.addPattern(MergeCollation.java:180)
	at java.base/java.text.MergeCollation.setPattern(MergeCollation.java:166)
	at java.base/java.text.MergeCollation.<init>(MergeCollation.java:73)
	at java.base/java.text.RBTableBuilder.build(RBTableBuilder.java:113)
	at java.base/java.text.RBCollationTables.<init>(RBCollationTables.java:83)
	at java.base/java.text.RuleBasedCollator.<init>(RuleBasedCollator.java:301)
	at java.base/java.text.RuleBasedCollator.<init>(RuleBasedCollator.java:282)
	at RuleBasedCollatorTest.testRules(RuleBasedCollatorTest.java:97)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:78)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:133)
	at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:598)
	at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:173)
	at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
	at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:824)
	at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:146)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
	at org.testng.TestRunner.privateRun(TestRunner.java:794)
	at org.testng.TestRunner.run(TestRunner.java:596)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:377)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:371)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:332)
	at org.testng.SuiteRunner.run(SuiteRunner.java:276)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1212)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1134)
	at org.testng.TestNG.runSuites(TestNG.java:1063)
	at org.testng.TestNG.run(TestNG.java:1031)
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:94)
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:54)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:78)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at com.sun.javatest.regtest.agent.MainWrapper$MainThread.run(MainWrapper.java:127)
	at java.base/java.lang.Thread.run(Thread.java:831)
test RuleBasedCollatorTest.testRules(""null< ' ' < '-'"", [Ljava.lang.String;@37042bb2, [Ljava.lang.String;@7490e83a): failure
java.text.ParseException: missing char (=,;<&) : null< ' ' 
	at java.base/java.text.PatternEntry$Parser.next(PatternEntry.java:254)
	at java.base/java.text.MergeCollation.addPattern(MergeCollation.java:180)
	at java.base/java.text.MergeCollation.setPattern(MergeCollation.java:166)
	at java.base/java.text.MergeCollation.<init>(MergeCollation.java:73)
	at java.base/java.text.RBTableBuilder.build(RBTableBuilder.java:113)
	at java.base/java.text.RBCollationTables.<init>(RBCollationTables.java:83)
	at java.base/java.text.RuleBasedCollator.<init>(RuleBasedCollator.java:301)
	at java.base/java.text.RuleBasedCollator.<init>(RuleBasedCollator.java:282)
	at RuleBasedCollatorTest.testRules(RuleBasedCollatorTest.java:97)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:78)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:133)
	at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:598)
	at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:173)
	at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
	at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:824)
	at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:146)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
	at org.testng.TestRunner.privateRun(TestRunner.java:794)
	at org.testng.TestRunner.run(TestRunner.java:596)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:377)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:371)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:332)
	at org.testng.SuiteRunner.run(SuiteRunner.java:276)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1212)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1134)
	at org.testng.TestNG.runSuites(TestNG.java:1063)
	at org.testng.TestNG.run(TestNG.java:1031)
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:94)
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:54)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:78)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at com.sun.javatest.regtest.agent.MainWrapper$MainThread.run(MainWrapper.java:127)
	at java.base/java.lang.Thread.run(Thread.java:831)
test RuleBasedCollatorTest.testThaiLaoVowelConsonantSwapping(""??"", ""??"", -1): failure
java.text.ParseException: missing char (=,;<&) : null& Z < 
	at java.base/java.text.PatternEntry$Parser.next(PatternEntry.java:254)
	at java.base/java.text.MergeCollation.addPattern(MergeCollation.java:180)
	at java.base/java.text.MergeCollation.setPattern(MergeCollation.java:166)
	at java.base/java.text.MergeCollation.<init>(MergeCollation.java:73)
	at java.base/java.text.RBTableBuilder.build(RBTableBuilder.java:113)
	at java.base/java.text.RBCollationTables.<init>(RBCollationTables.java:83)
	at java.base/java.text.RuleBasedCollator.<init>(RuleBasedCollator.java:301)
	at java.base/java.text.RuleBasedCollator.<init>(RuleBasedCollator.java:282)
	at RuleBasedCollatorTest.testThaiLaoVowelConsonantSwapping(RuleBasedCollatorTest.java:137)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:78)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:133)
	at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:598)
	at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:173)
	at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
	at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:824)
	at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:146)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
	at org.testng.TestRunner.privateRun(TestRunner.java:794)
	at org.testng.TestRunner.run(TestRunner.java:596)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:377)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:371)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:332)
	at org.testng.SuiteRunner.run(SuiteRunner.java:276)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1212)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1134)
	at org.testng.TestNG.runSuites(TestNG.java:1063)
	at org.testng.TestNG.run(TestNG.java:1031)
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:94)
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:54)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:78)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at com.sun.javatest.regtest.agent.MainWrapper$MainThread.run(MainWrapper.java:127)
	at java.base/java.lang.Thread.run(Thread.java:831)
test RuleBasedCollatorTest.testThaiLaoVowelConsonantSwapping(""??"", ""??"", 1): failure
java.text.ParseException: missing char (=,;<&) : null& Z < 
	at java.base/java.text.PatternEntry$Parser.next(PatternEntry.java:254)
	at java.base/java.text.MergeCollation.addPattern(MergeCollation.java:180)
	at java.base/java.text.MergeCollation.setPattern(MergeCollation.java:166)
	at java.base/java.text.MergeCollation.<init>(MergeCollation.java:73)
	at java.base/java.text.RBTableBuilder.build(RBTableBuilder.java:113)
	at java.base/java.text.RBCollationTables.<init>(RBCollationTables.java:83)
	at java.base/java.text.RuleBasedCollator.<init>(RuleBasedCollator.java:301)
	at java.base/java.text.RuleBasedCollator.<init>(RuleBasedCollator.java:282)
	at RuleBasedCollatorTest.testThaiLaoVowelConsonantSwapping(RuleBasedCollatorTest.java:137)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:78)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:133)
	at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:598)
	at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:173)
	at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
	at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:824)
	at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:146)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
	at org.testng.TestRunner.privateRun(TestRunner.java:794)
	at org.testng.TestRunner.run(TestRunner.java:596)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:377)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:371)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:332)
	at org.testng.SuiteRunner.run(SuiteRunner.java:276)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1212)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1134)
	at org.testng.TestNG.runSuites(TestNG.java:1063)
	at org.testng.TestNG.run(TestNG.java:1031)
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:94)
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:54)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:78)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at com.sun.javatest.regtest.agent.MainWrapper$MainThread.run(MainWrapper.java:127)
	at java.base/java.lang.Thread.run(Thread.java:831)
test RuleBasedCollatorTest.testThaiLaoVowelConsonantSwapping(""?a"", ""??"", 1): failure
java.text.ParseException: missing char (=,;<&) : null& Z < 
	at java.base/java.text.PatternEntry$Parser.next(PatternEntry.java:254)
	at java.base/java.text.MergeCollation.addPattern(MergeCollation.java:180)
	at java.base/java.text.MergeCollation.setPattern(MergeCollation.java:166)
	at java.base/java.text.MergeCollation.<init>(MergeCollation.java:73)
	at java.base/java.text.RBTableBuilder.build(RBTableBuilder.java:113)
	at java.base/java.text.RBCollationTables.<init>(RBCollationTables.java:83)
	at java.base/java.text.RuleBasedCollator.<init>(RuleBasedCollator.java:301)
	at java.base/java.text.RuleBasedCollator.<init>(RuleBasedCollator.java:282)
	at RuleBasedCollatorTest.testThaiLaoVowelConsonantSwapping(RuleBasedCollatorTest.java:137)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:78)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:133)
	at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:598)
	at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:173)
	at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
	at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:824)
	at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:146)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
	at org.testng.TestRunner.privateRun(TestRunner.java:794)
	at org.testng.TestRunner.run(TestRunner.java:596)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:377)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:371)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:332)
	at org.testng.SuiteRunner.run(SuiteRunner.java:276)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1212)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1134)
	at org.testng.TestNG.runSuites(TestNG.java:1063)
	at org.testng.TestNG.run(TestNG.java:1031)
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:94)
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:54)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:78)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at com.sun.javatest.regtest.agent.MainWrapper$MainThread.run(MainWrapper.java:127)
	at java.base/java.lang.Thread.run(Thread.java:831)

===============================================
java/text/Collator/RuleBasedCollatorTest.java
Total tests run: 24, Passes: 10, Failures: 14, Skips: 0
===============================================


",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2sr4b:",9223372036854775807,b22,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6fc9e792,,,,,,,,,"2021-05-10 15:29;naoto;Possibly the same issue with https://github.com/cbeust/testng/issues/2319. The behavior of `@BeforeGroups` has changed in TestNG 7.1 so that it is only called with the test filtering mechanism.;;;","2021-05-11 15:42;roboduke;Changeset: f6c5a6bb
Author:    Naoto Sato <naoto@openjdk.org>
Date:      2021-05-11 22:42:17 +0000
URL:       https://git.openjdk.java.net/jdk/commit/f6c5a6bbf14603c0f4832e5793c48ae1308a7414
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
java/lang/reflect/Proxy/DefaultMethods.java fails with jtreg 6,JDK-8266783,5049104,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,mchung,jjg,jjg,2021-05-08 10:47,2021-07-26 03:47,2023-10-01 09:57,2021-05-11 13:23,17,,,,,,,17,core-libs,,0,blocks-jtreg-6,noreg-self,ursqe-triaged,,,,,,,,,,,"java\lang\reflect\Proxy\DefaultMethods.java fails with jtreg 6, which provides TestNG 7.4.0


test DefaultMethods.testIllegalArgument(): failure
org.testng.internal.reflect.MethodMatcherException: 
[public void DefaultMethods.testIllegalArgument(java.lang.Object[]) throws java.lang.Throwable] has no parameters defined but was found to be using a data provider (either explicitly specified or inherited from class level annotation).
Data provider mismatch
Method: testIllegalArgument([Parameter{index=0, type=[Ljava.lang.Object;, declaredAnnotations=[]}])
Arguments: []
	at org.testng.internal.reflect.DataProviderMethodMatcher.getConformingArguments(DataProviderMethodMatcher.java:43)
	at org.testng.internal.Parameters.injectParameters(Parameters.java:914)
	at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:34)
	at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:824)
	at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:146)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
	at org.testng.TestRunner.privateRun(TestRunner.java:794)
	at org.testng.TestRunner.run(TestRunner.java:596)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:377)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:371)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:332)
	at org.testng.SuiteRunner.run(SuiteRunner.java:276)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1212)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1134)
	at org.testng.TestNG.runSuites(TestNG.java:1063)
	at org.testng.TestNG.run(TestNG.java:1031)
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:94)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:78)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at com.sun.javatest.regtest.agent.MainActionHelper$AgentVMRunnable.run(MainActionHelper.java:312)
	at java.base/java.lang.Thread.run(Thread.java:831)",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2sr3v:",9223372036854775807,b22,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@313ae9a0,,,,,,,,,"2021-05-10 10:18;mchung;Looks like TestNG 4.7 no longer supports data provider using varargs.   Jon, do you know if this is an intentional change in TestNG or a bug?

Here is the test fix:

diff --git a/test/jdk/java/lang/reflect/Proxy/DefaultMethods.java b/test/jdk/java/lang/reflect/Proxy/DefaultMethods.java
index 5bf2c8cf6f6..48bb67f405e 100644
--- a/test/jdk/java/lang/reflect/Proxy/DefaultMethods.java
+++ b/test/jdk/java/lang/reflect/Proxy/DefaultMethods.java
@@ -333,17 +333,17 @@ public class DefaultMethods {
     @DataProvider(name = ""illegalArguments"")
     private Object[][] illegalArguments() {
         return new Object[][] {
-            new Object[] {},
-            new Object[] { 100 },
-            new Object[] { 100, ""foo"", 100 },
-            new Object[] { 100L, ""foo"" },
-            new Object[] { ""foo"", 100},
-            new Object[] { null, ""foo"" }
+            new Object[] { new Object[0]},
+            new Object[] { new Object[] { 100 }},
+            new Object[] { new Object[] { 100, ""foo"", 100 }},
+            new Object[] { new Object[] { 100L, ""foo"" }},
+            new Object[] { new Object[] { ""foo"", 100 }},
+            new Object[] { new Object[] { null, ""foo"" }}
         };
     }
 
     @Test(dataProvider = ""illegalArguments"", expectedExceptions = {IllegalArgumentException.class})
-    public void testIllegalArgument(Object... args) throws Throwable {
+    public void testIllegalArgument(Object[] args) throws Throwable {
         ClassLoader loader = DefaultMethods.class.getClassLoader();
         I4 proxy = (I4)Proxy.newProxyInstance(loader, new Class<?>[]{I4.class}, HANDLER);
         Method m = I4.class.getMethod(""mix"", int.class, String.class);;;;","2021-05-11 13:23;roboduke;Changeset: dfe8833f
Author:    Mandy Chung <mchung@openjdk.org>
Date:      2021-05-11 20:22:39 +0000
URL:       https://git.openjdk.java.net/jdk/commit/dfe8833f5d9a9ac59857143a86d07f85769b8eae
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
System property values for stdout/err on Windows UTF-8,JDK-8266774,5049087,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,naoto,naoto,naoto,2021-05-07 15:41,2022-09-12 03:48,2023-10-01 09:57,2021-05-10 09:26,17,,,,,,,17,core-libs,,0,jdk11u-fix-request,jdk11u-fix-yes,noreg-hard,,,,,,,,,,,"While looking into JDK-8266674, I noticed `sun.stdout/err.encoding` values set to `cp65001` on Windows (with `UTF-8` default setting). Although this won't affect Console.charset(), as it takes different code path, this should be fixed to be set to `UTF-8`.",,,,,,,,,,,JDK-8293074,JDK-8290801,,,,,,,,,,,,,,,,,,,,,JDK-8264208,JDK-8272352,,,,,,,,,,,,,,,,,,generic,,,,,,,,,generic,,,,,"0|i2sr03:",9223372036854775807,b22,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4c088d55,,,,,,,,,"2021-05-10 09:26;roboduke;Changeset: c494efc5
Author:    Naoto Sato <naoto@openjdk.org>
Date:      2021-05-10 16:25:30 +0000
URL:       https://git.openjdk.java.net/jdk/commit/c494efc5b5d9a142fceff600285fd4c8c883e795
;;;","2022-07-14 12:19;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk11u-dev/pull/1227
Date: 2022-07-14 19:11:25 +0000;;;","2022-07-15 17:24;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk11u-dev/pull/1233
Date: 2022-07-16 00:17:15 +0000;;;","2022-07-18 10:33;macarte;Backport of JDK-8266774.

Along with JDK-8238203, prerequisite for a backport of JDK-8272352 to allow java to correctly parse Chinese characters in file paths and string arguments passed to java.exe.

tier1 tests pass (github actions);;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Release VM is broken with GCC 9 after 8214237 ,JDK-8266773,5049085,Bug,Resolved,JDK,JDK,software,duke,,,P2,Fixed,jiefu,mgkwill,mgkwill,2021-05-07 15:15,2021-07-15 10:05,2023-10-01 09:57,2021-05-11 15:44,17,,,,,,,17,hotspot,,0,gc-g1,noreg-build,tencent-interest,,,,,,,,,,,"Possible bug...

In some circumstances (local build) tip of master fails after 
""8214237: Join parallel phases post evacuation"" was merged. Reverting the change results in build working again. In one other case they were unable to reproduce and githubactions build completes.

Error output:
make: *** [/home/mgkwill/src/git/jdk/make/Init.gmk:186: test] Error 2
[mgkwill@mgkwill-desk jdk]$ make CONF=linux-x86_64-server-release                                                                                                           Building target 'default (exploded-image)' in configuration 'linux-x86_64-server-release'
In member function 'void G1GCPhaseTimes::log_phase(WorkerDataArray<double>*, uint, outputStream*, bool) const',
    inlined from 'void G1GCPhaseTimes::trace_phase(WorkerDataArray<double>*, bool, uint) const' at /home/mgkwill/src/git/jdk/src/hotspot/share/gc/g1/g1GCPhaseTimes.cpp:355:14:
/home/mgkwill/src/git/jdk/src/hotspot/share/gc/g1/g1GCPhaseTimes.cpp:335:17: error: '%s' directive argument is null [-Werror=format-overflow=]
  335 |       out->print(""%s"", indent(indent_level + 1));
      |       ~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
In member function 'void G1GCPhaseTimes::details(T*, const char*) const [with T = WorkerDataArray<long unsigned int>]',
    inlined from 'void G1GCPhaseTimes::log_phase(WorkerDataArray<double>*, uint, outputStream*, bool) const' at /home/mgkwill/src/git/jdk/src/hotspot/share/gc/g1/g1GCPhaseTimes.cpp:337:14,
    inlined from 'void G1GCPhaseTimes::trace_phase(WorkerDataArray<double>*, bool, uint) const' at /home/mgkwill/src/git/jdk/src/hotspot/share/gc/g1/g1GCPhaseTimes.cpp:355:14:
/home/mgkwill/src/git/jdk/src/hotspot/share/gc/g1/g1GCPhaseTimes.cpp:322:13: error: '%s' directive argument is null [-Werror=format-overflow=]
  322 |     ls.print(""%s"", indent_str);
      |     ~~~~~~~~^~~~~~~~~~~~~~~~~~
cc1plus: all warnings being treated as errors
gmake[3]: *** [lib/CompileJvm.gmk:143: /home/mgkwill/src/git/jdk/build/linux-x86_64-server-release/hotspot/variant-server/libjvm/objs/g1GCPhaseTimes.o] Error 1
gmake[3]: *** Waiting for unfinished jobs....
gmake[2]: *** [make/Main.gmk:255: hotspot-server-libs] Error 2


'make clean' & 'make' did not fix build.
git cloning a clean copy, configure & 'make' did not fix build.

However reverting the patch from 8214237 allows build to complete.
'git revert 14f0afe8118092be530aac0c4cc5d1d5d4fe982a'


Configure:
A new configuration has been successfully created in
/home/mgkwill/src/git/jdk-test/build/linux-x86_64-server-release
using configure arguments '--with-boot-jdk=/home/mgkwill/src/jdk/jdk-16.0.1 --with-jtreg=/home/mgkwill/tmp/jtreg --with-gtest=/home/mgkwill/tmp/googletest --with-jmh=build/jmh/jars'.

Configuration summary:
* Name:           linux-x86_64-server-release
* Debug level:    release
* HS debug level: product
* JVM variants:   server
* JVM features:   server: 'cds compiler1 compiler2 dtrace epsilongc g1gc jfr jni-check jvmci jvmti management nmt parallelgc serialgc services shenandoahgc vm-structs zgc'
* OpenJDK target: OS: linux, CPU architecture: x86, address length: 64
* Version string: 17-internal+0-adhoc.mgkwill.jdk-test (17-internal)

Tools summary:
* Boot JDK:       openjdk version ""16.0.1"" 2021-04-20 OpenJDK Runtime Environment (build 16.0.1+9-24) OpenJDK 64-Bit Server VM (build 16.0.1+9-24, mixed mode, sharing) (at /home/mgkwill/src/jdk/jdk-16.0.1)
* Toolchain:      gcc (GNU Compiler Collection)
* C Compiler:     Version 9.3.1 (at /usr/bin/gcc)
* C++ Compiler:   Version 9.3.1 (at /usr/bin/g++)

Build performance summary:
* Cores to use:   4
* Memory limit:   128754 MB","Fedora 31

* Name: linux-x86_64-server-release
* Debug level: release
* HS debug level: product
* JVM variants: server
* JVM features: server: 'cds compiler1 compiler2 dtrace epsilongc g1gc jfr jni-check jvmci jvmti management nmt parallelgc serialgc services shenandoahgc vm-structs zgc'
* OpenJDK target: OS: linux, CPU architecture: x86, address length: 64
* Version string: 17-internal+0-adhoc.mgkwill.jdk-test (17-internal)

Tools summary:
* Boot JDK: openjdk version ""16.0.1"" 2021-04-20 OpenJDK Runtime Environment (build 16.0.1+9-24) OpenJDK 64-Bit Server VM (build 16.0.1+9-24, mixed mode, sharing) (at /home/mgkwill/src/jdk/jdk-16.0.1)
* Toolchain: gcc (GNU Compiler Collection)
* C Compiler: Version 9.3.1 (at /usr/bin/gcc)
* C++ Compiler: Version 9.3.1 (at /usr/bin/g++)

Build performance summary:
* Cores to use: 4
* Memory limit: 128754 MB",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8214237,,,,JDK-8235819,,,,,,,,,,,,,,,x86_64,,,,,,,,,linux,,,,,"0|i2sqzn:",9223372036854775807,b22,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6b00f96c,,,,,,,,,"2021-05-09 19:44;jiefu;Suggested fix: https://github.com/openjdk/jdk/pull/3941;;;","2021-05-10 01:22;tschatzl;Looks like GCC 9 is kind-of broken wrt to that, there is a similar issue JDK-8235819.;;;","2021-05-10 15:35;mgkwill;Two PRs for this issue:
https://github.com/openjdk/jdk/pull/3934 and one above
https://github.com/openjdk/jdk/pull/3941

This solved the issue for me, not sure if it is correct solution:

""
diff --git a/src/hotspot/share/gc/g1/g1GCPhaseTimes.cpp b/src/hotspot/share/gc/g1/g1GCPhaseTimes.cpp
index 2e52bd9dcc6..846511ae521 100644
--- a/src/hotspot/share/gc/g1/g1GCPhaseTimes.cpp
+++ b/src/hotspot/share/gc/g1/g1GCPhaseTimes.cpp
@@ -319,7 +319,9 @@ void G1GCPhaseTimes::details(T* phase, const char* indent_str) const {
   LogTarget(Trace, gc, phases, task) lt;
   if (lt.is_enabled()) {
     LogStream ls(lt);
-    ls.print(""%s"", indent_str);
+    if (indent_str) {
+      ls.print(""%s"", indent_str);
+    }
     phase->print_details_on(&ls);
   }
 }
@@ -332,7 +334,7 @@ void G1GCPhaseTimes::log_phase(WorkerDataArray<double>* phase, uint indent_level
   for (uint i = 0; i < phase->MaxThreadWorkItems; i++) {
     WorkerDataArray<size_t>* work_items = phase->thread_work_items(i);
     if (work_items != NULL) {
-      out->print(""%s"", indent(indent_level + 1));
+      out->sp(indent_level * 2);
       work_items->print_summary_on(out, true);
       details(work_items, indent(indent_level + 1));
     }
"";;;","2021-05-11 15:44;roboduke;Changeset: 974b9f70
Author:    Jie Fu <jiefu@openjdk.org>
Date:      2021-05-11 22:44:28 +0000
URL:       https://git.openjdk.java.net/jdk/commit/974b9f700423590ccb59a566bd0b383c405d4af2
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Clean pending exception before running dynamic CDS dump,JDK-8266770,5049078,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,minqi,iklam,iklam,2021-05-07 13:27,2021-05-17 17:41,2023-10-01 09:57,2021-05-11 09:58,16,17,,,,,,17,hotspot,,0,cds,dynamic-cds,,,,,,,,,,,,"The following two ""if"" blocks should be swapped. Otherwise a pre-existing exception may cause MetaspaceShared::link_and_cleanup_shared_classes() to fail.

void JavaThread::invoke_shutdown_hooks() {
  HandleMark hm(this);

  // Link all classes for dynamic CDS dumping before vm exit.
  // Same operation is being done in JVM_BeforeHalt for handling the
  // case where the application calls System.exit().
  if (DynamicDumpSharedSpaces) {
    MetaspaceShared::link_and_cleanup_shared_classes(this);
  }

  // We could get here with a pending exception, if so clear it now.
  if (this->has_pending_exception()) {
    this->clear_pending_exception();
  }

",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2sqy3:",9223372036854775807,b22,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,,,"2021-05-07 22:22;dholmes;Surely a bug not an enhancement!;;;","2021-05-11 09:58;roboduke;Changeset: ac0287fd
Author:    Yumin Qi <minqi@openjdk.org>
Date:      2021-05-11 16:57:40 +0000
URL:       https://git.openjdk.java.net/jdk/commit/ac0287fd73997c510ee41c9a42dc48261e7d5ee7
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Arrays of types that cannot be an annotation member do not yield exceptions,JDK-8266766,5049071,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,winterhalter,winterhalter,winterhalter,2021-05-07 11:53,2021-08-11 13:48,2023-10-01 09:57,2021-06-10 05:03,,,,,,,,17,core-libs,,0,byte-buddy-found,,,,,,,,,,,,,"If a type is changed from a type that can be a member of an annotation which is used in an array, changing it to a type that cannot be an array member will be treated as if the type is an annotation type. As a result, no exception proxy is created and the type is returned as if it was correctly defined.",,,,,,,,,,,,,,,,,,,,,,,,JDK-8268447,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2sqwj:",9223372036854775807,b26,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@313ae9a0,,,,,,,,,"2021-06-10 05:03;roboduke;Changeset: 09243822
Author:    Rafael Winterhalter <winterhalter@openjdk.org>
Committer: Joel Borggrén-Franck <jfranck@openjdk.org>
Date:      2021-06-10 12:02:53 +0000
URL:       https://git.openjdk.java.net/jdk/commit/09243822ebcca611b04f94ece5afba183723cf74
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
AssertionError in sun.net.httpserver.ServerImpl.responseCompleted,JDK-8266761,5049063,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,dfuchs,dfuchs,dfuchs,2021-05-07 11:17,2022-02-15 06:57,2023-10-01 09:57,2021-05-11 07:49,11,17,8,,,,,17,core-libs,,0,jdk11u-fix-request,jdk11u-fix-yes,jdk13u-fix-request,jdk13u-fix-yes,jdk15u-fix-request,jdk15u-fix-yes,,,,,,,,"java.lang.AssertionError: State is not RESPONSE (REQUEST)
	at jdk.httpserver/sun.net.httpserver.ServerImpl.responseCompleted(ServerImpl.java:814)
	at jdk.httpserver/sun.net.httpserver.ServerImpl$Dispatcher.handleEvent(ServerImpl.java:297)
	at jdk.httpserver/sun.net.httpserver.ServerImpl$Dispatcher.run(ServerImpl.java:356)
	at java.base/java.lang.Thread.run(Thread.java:831)
",,,,,,,,,,,JDK-8271848,JDK-8277828,JDK-8277829,JDK-8269764,JDK-8269765,,,,,,,,,,,,,,,JDK-8254989,,,JDK-7026262,,,,JDK-8190793,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2squr:",9223372036854775807,b22,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@446e124a,,,,,,,,,"2021-05-11 07:49;roboduke;Changeset: 2d2cd78b
Author:    Daniel Fuchs <dfuchs@openjdk.org>
Date:      2021-05-11 14:48:12 +0000
URL:       https://git.openjdk.java.net/jdk/commit/2d2cd78bde7bb9101614a1ba2285d1e37d5d3249
;;;","2021-07-28 06:15;mdoerr;Fix Request (11u):
Should get backported for parity with 11.0.13-oracle. Apples almost cleanly. Review: https://github.com/openjdk/jdk11u-dev/pull/169;;;","2021-11-25 01:38;yan;Fix request (13u, 15u):
I'd like to backport it for parity with major releases. The patch applies cleanly in both cases, all tests in httpserver subtree do pass.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Add entry for jdk-12_doc-all.zip to gradle/verification-metadata.xml,JDK-8266757,5049053,Bug,Resolved,JDK,JDK,software,duke,,,P2,Fixed,kcr,kcr,kcr,2021-05-07 09:49,2021-11-19 06:11,2023-10-01 09:57,2021-05-11 13:04,jfx17,,,,,,,jfx17,javafx,,0,noreg-build,sn_92,sn_93,,,,,,,,,,,"I found one more internal build dependency that we need -- the JDK 12 API docs zip bundle (for javadoc offline processing).
",,,,,,,,,,,,,,,,,,,,,,,JDK-8228682,,,,,,,,,,JDK-8277475,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2sqsj:",9223372036854775807,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@1556b386,,,,,,,,,"2021-05-07 09:51;kcr;$ sha256sum jdk-12_doc-all.zip
a14eaa08517bf369e7c72a829ff8dbfd42c29167d41fdcd2057cdaccf661c370 *jdk-12_doc-all.zip
;;;","2021-05-07 10:11;kcr;This missing entry is causing a build failure on my system (which will soon propagate to our CI builds).;;;","2021-05-11 13:04;roboduke;Changeset: c7833f12
Author:    Kevin Rushforth <kcr@openjdk.org>
Date:      2021-05-11 20:03:52 +0000
URL:       https://git.openjdk.java.net/jfx/commit/c7833f1205e3a97b49abb945d0a2eeff9b9c34bc
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
"jdk/test/lib/process/ProcTest.java failed with ""Exception: Proc abnormal end""",JDK-8266753,5049049,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,weijun,dcubed,dcubed,2021-05-07 08:56,2021-07-26 03:44,2023-10-01 09:57,2021-05-11 08:23,17,,,,,,,17,core-libs,,0,intermittent,noreg-self,tier1,ursqe-triaged,,,,,,,,,,"The following test failed in the JDK17 CI:

jdk/test/lib/process/ProcTest.java

Here's a snippet from the log file:

----------System.err:(13/735)----------
java.lang.Exception: Proc abnormal end
	at jdk.test.lib.process.Proc.readData(Proc.java:373)
	at ProcTest.main(ProcTest.java:50)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:78)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at com.sun.javatest.regtest.agent.MainActionHelper$AgentVMRunnable.run(MainActionHelper.java:298)
	at java.base/java.lang.Thread.run(Thread.java:831)",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,aarch64,,,,,,,,,os_x,,,,,"0|i2sqrn:",9223372036854775807,b22,,,,,,,,,,,,"2021-05-11 08:23;roboduke;Changeset: 381de0c1
Author:    Weijun Wang <weijun@openjdk.org>
Date:      2021-05-11 15:22:52 +0000
URL:       https://git.openjdk.java.net/jdk/commit/381de0c1d024f7e0711fadf384d8625cf7ab8178
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Crash on macOS 10.11 due to ignored @available 10.12 check,JDK-8266743,5049036,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,kcr,jvos,jvos,2021-05-07 06:50,2021-07-08 08:57,2023-10-01 09:57,2021-07-07 05:31,jfx17,,,,,,,jfx17,javafx,,0,sn_97,,,,,,,,,,,,,"Since https://bugs.openjdk.java.net/browse/JDK-8265031 the minimum mac-os version for JavaFX is increased to 10.12. We pass that minimum version to the compiler.

With  https://bugs.openjdk.java.net/browse/JDK-8263169 a test is added to check if we are at MacOS 10.12 or above, and if so some code is executed that was not available before 10.12:

 if (@available(macOS 10.12, *)) {...}

The combination of these 2 patches lead to a crash on 10.11 for any JavaFX application. The compiler seems to ignore the `@available` check if we already pass 10.12 as the minimum version, hence the code that wasn't available on 10.11 is tried to be executed.

There are a number of other ways to check if we're at 10.12 at runtime, which would prevent this crash.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8269968,,,,JDK-8269967,JDK-8265031,JDK-8263169,,,,,,,,,,,,,,,,,,,,,,os_x,,,,,"0|i2sqor:",9223372036854775807,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4f591050,,,,,,,,,"2021-05-07 07:42;kcr;The point of specifying the minimum macOS version for deployment is to be able to use APIs that are provided by that version of the SDK without checking whether they are available. I find it surprising is that earlier versions of macOS will even attempt to load such a binary. So I don't think the solution is to adopt a different runtime check for 10.12 at the point of failure (and even if we did in this case, now that the minimum version is 10.12 it would be easy for another such problem to creep in). Instead I recommend one of three things:

1. Check the macOS version during toolkit initialization and ""fail fast"" with a reasonable error message if it is lower than the specified minimum (basically this is doing Apple's job for them).

2. Do nothing and let failures happen where they may (this is already what would likely happen in a different spot if someone were to try run any recent version of JavaFX with macOS 10.9).

3. Revert the fix that bumped the minimum version on x64 platforms to 10.12 and go back to a minimum of 10.10

Option 1 would be my first choice. macOS 10.11 is so far out of support that I am a bit surprised anyone is still using it. Worth noting is that JDK 17 set their minimum to 10.12, which means that older versions are unlikely to work with JDK 17 as well. Option 3 would be my second choice. I would expect many users to run JavaFX 17 with JDK 16, so doing option 3 would mean they could still run (unsupported, of course) on macOS 10.10 or 10.11.;;;","2021-07-01 07:46;kcr;Option 2 (do nothing) is rejected.

So we will either do option 1 (fail fast if macOS version is below minimum) or option 3 (revert the minimum macOS version to 10.10 for x64 systems).;;;","2021-07-06 14:42;kcr;Because we expect some users of JavaFX 17 to run with JDK 16 (or possibly earlier), and a subset of them might have very old Mac hardware, we will choose option #3 for JavaFX 17, and revert the change to the minimum version of macOS for x64 platforms, which was done as part of JDK-8265031, and go back to a minimum of 10.10.

I will file a pair of follow-on bugs for JavaFX 18. One to implement option #1 and fail fast if the platform is below the minimum, and a second to bump the minimum macOS version for x64 platforms to 10.12 again. These two bugs could be done separately or at the same time.
;;;","2021-07-06 16:03;kcr;I filed two follow-on bugs that are targeted for JavaFX 18:

1. JDK-8269967: JavaFX should fail fast on macOS below minimum version
2. JDK-8269968: [REDO] Bump minimum version of macOS for x64 to 10.12

They should be done in that order or at the same time.;;;","2021-07-07 05:31;roboduke;Changeset: 6fe427f9
Author:    Kevin Rushforth <kcr@openjdk.org>
Date:      2021-07-07 12:31:07 +0000
URL:       https://git.openjdk.java.net/jfx/commit/6fe427f9a20aace1466530bd0029af9f7ff7329a
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
JFR periodic events are causing extra allocations,JDK-8266723,5049019,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,jbachorik,jbachorik,jbachorik,2021-05-07 03:51,2021-06-03 10:22,2023-10-01 09:57,2021-05-25 07:11,openjdk8u262,openjdk8u272,openjdk8u282,openjdk8u292,,,,openjdk8u302,hotspot,,0,datadog-interest,jdk8u-fix-request,jdk8u-fix-yes,,,,,,,,,,,"The root cause is logging.
See http://hg.openjdk.java.net/jdk8u/jdk8u-dev/jdk/file/2d946ec6c4f8/src/share/classes/jdk/jfr/internal/RequestEngine.java#l70 - for each periodic hook there is a log line generated which includes string concatenation. 
Although a message provider is used and, theoretically, the log message should not be constructed unless it is to be outputted, due to the way how the logger integration was backported to 8u the log message will always be constructed (see http://hg.openjdk.java.net/jdk8u/jdk8u-dev/jdk/file/2d946ec6c4f8/src/share/classes/jdk/jfr/internal/Logger.java#l67).

The proposed fix is to integrate the JDK JFR Logger with the LogJFR flag which is used to control logging in hotspot side of JFR.

",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JMC-7262,,,,,,,,,,,,,,,,,,,,,,,,,,openjdk8u262,,,,,,,"0|i2sqkz:",9223372036854775807,b05,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@42995637,,,,,,,,,"2021-05-18 06:56;jbachorik;Fix Request

The fix rationale is in the main description. This is a followup fix for the JFR backport.

Review: https://mail.openjdk.java.net/pipermail/jdk8u-dev/2021-May/013802.html;;;","2021-05-25 07:11;hgupdate;URL:   https://hg.openjdk.java.net/jdk8u/jdk8u-dev/hotspot/rev/88e29f735f12
User:  jbachorik
Date:  2021-05-25 14:09:17 +0000
;;;","2021-05-25 07:16;hgupdate;URL:   https://hg.openjdk.java.net/jdk8u/jdk8u-dev/jdk/rev/cb560b38d15a
User:  jbachorik
Date:  2021-05-25 14:12:09 +0000
;;;","2021-06-03 10:21;hgupdate;URL:   https://hg.openjdk.java.net/jdk8u/jdk8u/jdk/rev/cb560b38d15a
User:  andrew
Date:  2021-06-03 17:19:58 +0000
;;;","2021-06-03 10:22;hgupdate;URL:   https://hg.openjdk.java.net/jdk8u/jdk8u/hotspot/rev/88e29f735f12
User:  andrew
Date:  2021-06-03 17:20:06 +0000
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
[AIX] Build failure after 11u backport of JDK-8247753,JDK-8266713,5049009,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,sgehwolf,sgehwolf,sgehwolf,2021-05-07 01:40,2021-05-13 01:16,2023-10-01 09:57,2021-05-12 04:22,11.0.12,,,,,,,11.0.12,client-libs,,0,13-na,15-na,16-na,jdk11u-fix-request,jdk11u-fix-yes,,,,,,,,,"This is a JDK 11 specific bug as for later JDKs the code performing those checks is Java code. The JDK 11u backport in 11.0.12 introduced strcasestr function for case insensitive comparison. This breaks the AIX build with:

ld: 0711-317 ERROR: Undefined symbol: .strcasestr 

Note that strcasestr is a GNU specific extension not available on AIX.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8247753,,,,,,,,,,,,,,,,,,,,,,,,aix,,,,,"0|i2sqir:",9223372036854775807,b02,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@568a5b31,,,,,,,,,"2021-05-07 05:50;mbaesken;strcasecmp in a loop would probably work.  Another option might be converting the string with  tolower() and using strstr.;;;","2021-05-10 05:41;sgehwolf;Fix Request (OpenJDK 11u):

Please approve this build fix for AIX on 11.0.12 (current jdk11u-dev). It's an 11-only patch since newer code streams have this dealt with in Java code rather than in native code. AIX doesn't have strcasestr and this patch adds a simple implementation (AIX-locally). Other platforms won't be affected by this change, so risk seems low. Fixes the build on AIX. Patch has been reviewed by Martin Dörr, Thomas Stüfe, Matthias Baesken.

webrev: https://cr.openjdk.java.net/~sgehwolf/webrevs/JDK-8266713/03/webrev/
RFR: https://mail.openjdk.java.net/pipermail/jdk-updates-dev/2021-May/006103.html;;;","2021-05-12 04:22;hgupdate;URL:   https://hg.openjdk.java.net/jdk-updates/jdk11u-dev/rev/0f3f7aa2ef34
User:  sgehwolf
Date:  2021-05-12 11:18:04 +0000
;;;","2021-05-13 01:15;hgupdate;URL:   https://hg.openjdk.java.net/jdk-updates/jdk11u/rev/0f3f7aa2ef34
User:  goetz
Date:  2021-05-13 08:12:08 +0000
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
[lworld] compiler/loopstripmining/DeadNodesInOuterLoopAtLoopCloning.java fails after merge,JDK-8266712,5049007,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,thartmann,dsimms,dsimms,2021-05-07 00:13,2021-05-07 06:27,2023-10-01 09:57,2021-05-07 06:27,repo-valhalla,,,,,,,repo-valhalla,hotspot,,0,lw3,lworld,,,,,,,,,,,,"src/hotspot/share/opto/node.hpp:946), pid=9052, tid=9071
#  assert(is_LoadVector()) failed: invalid node class: StoreVector

Current CompileTask:
C2:    392   70   !         DeadNodesInOuterLoopAtLoopCloning::iMeth (171 bytes)

Stack: [0x00007f02583f8000,0x00007f02584f9000],  sp=0x00007f02584f3770,  free space=1005k
Native frames: (J=compiled Java code, j=interpreted, Vv=VM code, C=native code)
V  [libjvm.so+0x14f9d8f]  MemNode::can_see_stored_value(Node*, PhaseTransform*) const+0x71f
V  [libjvm.so+0x14fd1a6]  StoreNode::Identity(PhaseGVN*)+0xa6
V  [libjvm.so+0x16d690e]  PhaseIterGVN::transform_old(Node*)+0x48e
V  [libjvm.so+0x16ceefe]  PhaseIterGVN::optimize()+0x7e
V  [libjvm.so+0xa8244a]  PhaseIdealLoop::optimize(PhaseIterGVN&, LoopOptsMode)+0x6da
V  [libjvm.so+0xa7e8eb]  Compile::Optimize()+0x150b
V  [libjvm.so+0xa80470]  Compile::Compile(ciEnv*, ciMethod*, int, bool, bool, bool, bool, DirectiveSet*)+0x16a0
V  [libjvm.so+0x88a6e8]  C2Compiler::compile_method(ciEnv*, ciMethod*, int, bool, DirectiveSet*)+0x1f8
V  [libjvm.so+0xa91179]  CompileBroker::invoke_compiler_on_method(CompileTask*)+0xfb9
V  [libjvm.so+0xa91ef8]  CompileBroker::compiler_thread_loop()+0x5a8
V  [libjvm.so+0x198fbc1]  JavaThread::thread_main_inner()+0x271
V  [libjvm.so+0x1997600]  Thread::call_run()+0x100
V  [libjvm.so+0x164354e]  thread_native_entry(Thread*)+0x10e",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8263972,JDK-8189802,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2sqib:",9223372036854775807,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2021-05-07 02:10;thartmann;JDK-8189802 weakened the conditions for calling can_see_stored_value from StoreNode::Identity:
http://hg.openjdk.java.net/valhalla/valhalla/rev/b826402f953a#l16.35

New code added by JDK-8263972 needs to be adjusted accordingly.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
[lworld] tools/javac/valhalla/lworld-values/EnhancedForLoopTest.java fails after merge,JDK-8266710,5049005,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,sadayapalam,dsimms,dsimms,2021-05-07 00:05,2021-05-07 06:24,2023-10-01 09:57,2021-05-07 06:24,repo-valhalla,,,,,,,repo-valhalla,tools,,0,lw3,lworld,,,,,,,,,,,,"test/langtools/tools/javac/valhalla/lworld-values/EnhancedForLoopTest.java:91: error: for-each not applicable to expression type
        for (var s : foo) {
        ^
  required: array or java.lang.Iterable
  found:    Foo<String>
1 error
result: Failed. Compilation failed: Compilation failed",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2sqhv:",9223372036854775807,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4dca67bd,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
[lworld] compiler/valhalla/inlinetypes/TestLWorldProfiling.java fails after merge,JDK-8266709,5049004,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,thartmann,dsimms,dsimms,2021-05-07 00:01,2021-05-07 06:27,2023-10-01 09:57,2021-05-07 06:27,repo-valhalla,,,,,,,repo-valhalla,hotspot,,0,lw3,lworld,noreg-self,,,,,,,,,,," stderr: [Exception in thread ""main"" java.lang.RuntimeException: Graph for 'TestLWorldProfiling::test8' contains different number of match nodes (expected 6 but got 5):
174  CallStaticJava  ===  209  6  7  8  9 ( 173  1  1  81  10  1  81 ) [[ 175 ]] # Static uncommon_trap(reason='speculate_class_check' action='maybe_recompile' debug_id='0')  void ( int ) C=0.000100 TestLWorldProfiling::test8_helper @ bci:1 (line 256) TestLWorldProfiling::test8 @ bci:6 (line 266) !jvms: TestLWorldProfiling::test8_helper @ bci:1 (line 256) TestLWorldProfiling::test8 @ bci:6 (line 266)
106  CallStaticJava  ===  100  6  7  8  9 ( 105  1  1  81  10  1  24 ) [[ 107 ]] # Static uncommon_trap(reason='speculate_null_check' action='make_not_entrant' debug_id='0')  void ( int ) C=0.000100 TestLWorldProfiling::test8_helper @ bci:1 (line 256) TestLWorldProfiling::test8 @ bci:6 (line 266) !jvms: TestLWorldProfiling::test8_helper @ bci:1 (line 256) TestLWorldProfiling::test8 @ bci:6 (line 266)
73  CallStaticJava  ===  204  6  7  8  9 ( 72  10  1  1  11  23 ) [[ 74 ]] # Static uncommon_trap(reason='class_check' action='maybe_recompile' debug_id='0')  void ( int ) C=0.000100 TestLWorldProfiling::test8 @ bci:2 (line 265) !jvms: TestLWorldProfiling::test8 @ bci:2 (line 265)
52  CallStaticJava  ===  200  6  7  8  9 ( 51  10  1  1  11  23 ) [[ 53 ]] # Static uncommon_trap(reason='range_check' action='make_not_entrant' debug_id='0')  void ( int ) C=0.000100 TestLWorldProfiling::test8 @ bci:2 (line 265) !jvms: TestLWorldProfiling::test8 @ bci:2 (line 265)
33  CallStaticJava  ===  31  6  7  8  9 ( 32  1  1  1  24  23 ) [[ 34 ]] # Static uncommon_trap(reason='null_check' action='maybe_recompile' debug_id='0')  void ( int ) C=0.000100 TestLWorldProfiling::test8 @ bci:2 (line 265) !jvms: TestLWorldProfiling::test8 @ bci:2 (line 265)
: expected 6 to equal 5
	at jdk.test.lib.Asserts.fail(Asserts.java:594)
	at jdk.test.lib.Asserts.assertEquals(Asserts.java:205)
	at jdk.test.lib.Asserts.assertEQ(Asserts.java:178)
	at compiler.valhalla.inlinetypes.InlineTypeTest.parseOutput(InlineTypeTest.java:600)
	at compiler.valhalla.inlinetypes.InlineTypeTest.execute_vm(InlineTypeTest.java:482)
	at compiler.valhalla.inlinetypes.InlineTypeTest.run(InlineTypeTest.java:436)
	at compiler.valhalla.inlinetypes.TestLWorldProfiling.main(TestLWorldProfiling.java:85)",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2sqhn:",9223372036854775807,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
sync jextract for LibraryLookup removal,JDK-8266682,5048972,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,sundar,sundar,sundar,2021-05-06 22:07,2021-05-07 06:25,2023-10-01 09:57,2021-05-07 06:25,repo-panama,,,,,,,,tools,,0,,,,,,,,,,,,,,sync jextract for LibraryLookup removal. See also JDK-8265222,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8265222,,,,,,,,,,,,,,,generic,,,,,,,,,generic,,,,,"0|i2sqaj:",9223372036854775807,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@2251e2f8,,,,,,,,,"2021-05-06 22:12;sundar;Two problems found so far:

* ""putenv""/""_putenv"" call in LibClang failed. On Mac & Linux, this is because libclang is loaded later (and libclang exposes C runtime symbols like putenv on Mac/Linux). It can be solved by loading libclang before putenv call. For Windows, we've to disable that crash recovery initialization part.

* Array of LibraryLookup objects LIBRARIES is initialized in top level header class and referred from other classes. This makes sure that shared objects are loaded before symbol lookups happen in constant holder classes. We need to adjust initialization in the new setup as we no longer have LibraryLookup objects.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
javac should not check for sealed supertypes in intersection types,JDK-8266645,5048922,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,vromero,vromero,vromero,2021-05-06 07:56,2021-05-12 17:32,2023-10-01 09:57,2021-05-07 07:39,,,,,,,,17,tools,,0,javac-sealed,,,,,,,,,,,,,Intersection types must be allowed to have sealed supertypes,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2spzf:",9223372036854775807,b22,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4dca67bd,,,,,,,,,"2021-05-07 07:39;roboduke;Changeset: 946b0fe1
Author:    Vicente Romero <vromero@openjdk.org>
Date:      2021-05-07 14:38:18 +0000
URL:       https://git.openjdk.java.net/jdk/commit/946b0fe19a8af88a0f0451c86ce4d4790360bb83
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Intermittent failure of HonorDeveloperSettingsTest unit test,JDK-8266643,5048920,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,arapte,aghaisas,aghaisas,2021-05-06 07:25,2021-06-01 15:14,2023-10-01 09:57,2021-05-17 12:37,jfx17,,,,,,,jfx17,javafx,,0,test_sprint,testbug,,,,,,,,,,,,"Below test fails intermittently on Linux  in the GitHub Actions test run.

2021-05-06T10:27:19.6546656Z test.javafx.css.HonorDeveloperSettingsTest > testOpacityWithManuallyChangedValueAndInlineStyleIsSetToInlineStyle FAILED
2021-05-06T10:27:19.6549284Z     java.lang.NullPointerException
2021-05-06T10:27:19.6550829Z         at javafx.graphics/javafx.scene.Node.notifyParentsOfInvalidatedCSS(Node.java:9295)
2021-05-06T10:27:19.6552527Z         at javafx.graphics/javafx.scene.Node.reapplyCSS(Node.java:9342)
2021-05-06T10:27:19.6553757Z         at javafx.graphics/javafx.scene.Node$1.reapplyCSS(Node.java:588)
2021-05-06T10:27:19.6555253Z         at javafx.graphics/com.sun.javafx.scene.NodeHelper.reapplyCSS(NodeHelper.java:283)
2021-05-06T10:27:19.6557553Z         at javafx.graphics/com.sun.javafx.css.StyleManager.userAgentStylesheetsChanged(StyleManager.java:1514)
2021-05-06T10:27:19.6560309Z         at javafx.graphics/com.sun.javafx.css.StyleManager.setDefaultUserAgentStylesheet(StyleManager.java:1365)
2021-05-06T10:27:19.6563106Z         at javafx.graphics/com.sun.javafx.css.StyleManager.setDefaultUserAgentStylesheet(StyleManager.java:1347)
2021-05-06T10:27:19.6571692Z         at test.javafx.css.HonorDeveloperSettingsTest.setUp(HonorDeveloperSettingsTest.java:89)",,,,,,,,,,,,,,,,,,,,,,,,,JDK-8267425,,,,,,,,,,,,JDK-8239880,,,,,,,,,,,,,,,x86_64,,,,,,,,,linux,,,,,"0|i2spyz:",9223372036854775807,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4143e3f7,,,,,,,,,"2021-05-07 10:54;kcr;I just ran into this failure on Linux in a GItHub actions build:

https://github.com/kevinrushforth/jfx/runs/2529491024?check_suite_focus=true

We should check to see whether any reset fixes have introduced or exposed this problem. It isn't clear whether this is a product bug or a test bug.;;;","2021-05-10 15:55;kcr;Here is another recent failure, also on Linux:

https://github.com/aghaisas/jfx/runs/2545359113?check_suite_focus=true

;;;","2021-05-10 16:02;kcr;The test was recently modified by:

JDK-8239880: CSS tests should cleanup any global state they modify

The NPE is triggered by the call to StyleManager.setDefaultUserAgentStylesheet from the test setup method, which is annotated with `@Before` so it might be a latent issue exposed by that fix.
;;;","2021-05-11 10:22;kcr;Increasing the priority to P3, since this is happening with a fair bit of frequency.;;;","2021-05-12 01:32;jvos;I assume this is not related to https://bugs.openjdk.java.net/browse/JDK-8266811 ?;;;","2021-05-17 12:37;roboduke;Changeset: d2d145d3
Author:    Ambarish Rapte <arapte@openjdk.org>
Date:      2021-05-17 19:37:19 +0000
URL:       https://git.openjdk.java.net/jfx/commit/d2d145d37d4e902054164c26236cdcbb653ae7b1
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,
StandardJavaFileManager: getJavaFileObjects() impl violates the spec,JDK-8266631,5048906,Bug,Closed,JDK,JDK,software,duke,,,P2,Fixed,jlahoda,dbessono,dbessono,2021-05-06 04:29,2021-08-06 01:26,2023-10-01 09:57,2021-06-22 00:35,17,,,,,,,17,tools,,0,conformance,jsr199,tck-red-17,,,,,,,,,,,"The following specification
https://docs.oracle.com/en/java/javase/16/docs/api/java.compiler/javax/tools/StandardJavaFileManager.html#getJavaFileObjects(java.nio.file.Path...)
asserts:

=================================
NullPointerException - if the given array contains null elements
=================================

However for OpenJDK implementation the following code produces no NPEs

========================
        var stJFM = new StandardJavaFileManager() {
            @Override public int isSupportedOption(String option) { return 0; }
            @Override public ClassLoader getClassLoader(Location location) { return null; }
            @Override public Iterable<JavaFileObject> list(Location location, String packageName, Set<JavaFileObject.Kind> kinds, boolean recurse) throws IOException { return null; }
            @Override public String inferBinaryName(Location location, JavaFileObject file) { return null; }
            @Override public boolean isSameFile(FileObject a, FileObject b) { return false; }
            @Override public boolean handleOption(String current, Iterator<String> remaining) { return false; }
            @Override public boolean hasLocation(Location location) { return false; }
            @Override public JavaFileObject getJavaFileForInput(Location location, String className, JavaFileObject.Kind kind) throws IOException { return null; }
            @Override public JavaFileObject getJavaFileForOutput(Location location, String className, JavaFileObject.Kind kind, FileObject sibling) throws IOException { return null; }
            @Override public FileObject getFileForInput(Location location, String packageName, String relativeName) throws IOException { return null; }
            @Override public FileObject getFileForOutput(Location location, String packageName, String relativeName, FileObject sibling) throws IOException { return null; }
            @Override public void flush() throws IOException { }
            @Override public void close() throws IOException { }
            @Override public Iterable<? extends JavaFileObject> getJavaFileObjectsFromFiles(Iterable<? extends File> files) { return null; }
            @Override public Iterable<? extends JavaFileObject> getJavaFileObjects(File... files) { return null; }
            @Override public Iterable<? extends JavaFileObject> getJavaFileObjectsFromStrings(Iterable<String> names) { return null; }
            @Override public Iterable<? extends JavaFileObject> getJavaFileObjects(String... names) { return null; }
            @Override public void setLocation(Location location, Iterable<? extends File> files) throws IOException { }
            @Override public Iterable<? extends File> getLocation(Location location) { return null; }
        };
        stJFM.getJavaFileObjects((Path)null);
        stJFM.getJavaFileObjects((Path)null, (Path)null);
        stJFM.getJavaFileObjects(Path.of(""a""), (Path)null);
========================

While the following call would generate an NPE:

        stJFM.getJavaFileObjects((Path[])null);
",,,,,,,,,,,JDK-8269193,JDK-8270614,,,,,,,,,,,,JDK-8268260,,JDK-8266596,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2spvv:",9223372036854775807,b28,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4dca67bd,,,,,,,Verified,,"2021-05-24 10:23;jjg;This seems like a non-issue. You've created a bad subtype of StandardJavaFileManager and you're then complaining it doesn't meet the spec.;;;","2021-06-22 00:35;roboduke;Changeset: 01f12fba
Author:    Jan Lahoda <jlahoda@openjdk.org>
Date:      2021-06-22 07:34:30 +0000
URL:       https://git.openjdk.java.net/jdk17/commit/01f12fba648b8c0cb64870b00e6f0f3a7f0ba4c9
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
"CLinker allocateMemory, freeMemory implementation should not use default lookup",JDK-8266627,5048902,Bug,Resolved,JDK,JDK,software,duke,,,P2,Fixed,jvernee,sundar,sundar,2021-05-06 03:41,2021-05-06 13:52,2023-10-01 09:57,2021-05-06 13:52,repo-panama,,,,,,,,tools,,0,,,,,,,,,,,,,,"CLinker allocateMemory, freeMemory implementation should not use default lookup",,,,,,,,,,,,,,,,,,,,,,,JDK-8265222,,,,,,,,,,,,,,,,,,,,,,,,,,,,,generic,,,,,,,,,generic,,,,,"0|i2spuz:",9223372036854775807,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@2251e2f8,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Remove broken -XX:-OptoRemoveUseless,JDK-8266618,5048893,Bug,Resolved,JDK,JDK,software,duke,,,P5,Fixed,thartmann,thartmann,thartmann,2021-05-06 00:38,2023-09-29 01:23,2023-10-01 09:57,2021-05-07 06:22,11,17,,,,,,17,hotspot,,0,c2,hs-comp-triaged,oracle-triage-11,oracle-triage-17,,,,,,,,,,"Similar to JDK-8266542, simply running java -XX:-OptoRemoveUseless already crashes the VM:

# To suppress the following error report, specify this argument
# after -XX: or in .hotspotrc:  SuppressErrorAt=/cfgnode.cpp:1893
#
# A fatal error has been detected by the Java Runtime Environment:
#
#  Internal Error (/oracle/jdk/open/src/hotspot/share/opto/cfgnode.cpp:1893), pid=1597067, tid=1597080
#  assert(r->in(0) == __null || !r->in(0)->is_Root()) failed: not a specially hidden merge
#
# JRE version: Java(TM) SE Runtime Environment (17.0) (fastdebug build 17-internal+0-LTS-2021-05-04-1333554.tobias...)
# Java VM: Java HotSpot(TM) 64-Bit Server VM (fastdebug 17-internal+0-LTS-2021-05-04-1333554.tobias..., mixed mode, tiered, compressed oops, compressed class ptrs, g1 gc, linux-amd64)
# Problematic frame:
# V  [libjvm.so+0x8b1dc4]  PhiNode::Ideal(PhaseGVN*, bool)+0x6e4",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8316652,,,JDK-8266542,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2spsz:",9223372036854775807,b22,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2021-05-06 00:38;thartmann;ILW = LLL = P5;;;","2021-05-07 06:22;roboduke;Changeset: a65021e3
Author:    Tobias Hartmann <thartmann@openjdk.org>
Date:      2021-05-07 09:55:08 +0000
URL:       https://git.openjdk.java.net/jdk/commit/a65021e38c8f2be67be08475da67956a5a47e408
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
C2 incorrectly folds subtype checks involving an interface array,JDK-8266615,5048785,Bug,Closed,JDK,JDK,software,duke,,,P2,Fixed,thartmann,webbuggrp,webbuggrp,2021-05-05 00:46,2021-08-09 14:11,2023-10-01 09:57,2021-05-18 05:22,11,16,17,8u281,,,,17,hotspot,,0,c2,hs-comp-triaged,jdk11u-fix-request,jdk11u-fix-yes,oracle-triage-11,oracle-triage-17,reproducer-yes,webbug,,,,,,"ADDITIONAL SYSTEM INFORMATION :
JDK: 11.0.11

A DESCRIPTION OF THE PROBLEM :
JDK: 11.0.11
Minimum Reproducible Code: https://github.com/chhsiao90/jdk-8257594-bug

When running the main function of PropertyInfoSetResolver, java.lang.ClassCastException was thrown while several iterations.

Bug is only reproducible on 11.0.11 and 16.0.1.
It looks like it's JIT optimization issue, might be introduced by https://bugs.openjdk.java.net/browse/JDK-8257594

STEPS TO FOLLOW TO REPRODUCE THE PROBLEM :
Clones the git repository from github: https://github.com/chhsiao90/jdk-8257594-bug
Run the main function of PropertyInfoSetResolver

EXPECTED VERSUS ACTUAL BEHAVIOR :
EXPECTED -
Run without error
ACTUAL -
java.lang.ClassCastException after several iteration

---------- BEGIN SOURCE ----------
https://github.com/chhsiao90/jdk-8257594-bug
---------- END SOURCE ----------

CUSTOMER SUBMITTED WORKAROUND :
Downgrade JDK to 11.0.10

FREQUENCY : always


",,,,,,,,,,,JDK-8268244,JDK-8267408,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"2021-05-09 23:02;fmatte;JDK11011Defect.java;https://bugs.openjdk.org/secure/attachment/94554/JDK11011Defect.java","2021-05-12 05:14;thartmann;Test.java;https://bugs.openjdk.org/secure/attachment/94607/Test.java","2021-05-09 23:02;fmatte;modelmapper-2.3.0.jar;https://bugs.openjdk.org/secure/attachment/94555/modelmapper-2.3.0.jar","2021-05-09 23:02;fmatte;protobuf-java-3.11.4.jar;https://bugs.openjdk.org/secure/attachment/94556/protobuf-java-3.11.4.jar",,,,,,,,,,,,,,,,,,,,,,"0|i2sp4z:",9223372036854775807,b23,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,Verified,,"2021-05-05 23:54;fmatte;Verified this is regression in jdk11.0.11 and jdk16 b28. Most likely due to JDK-8257594
/tank/fmatte/JAVA/jdk16/jdk-16-ea+28/fastdebug/bin/java PropertyInfoSetResolver.java
.
.
27
27
Exception in thread ""main"" java.lang.NullPointerException: Cannot invoke ""PropertyInfoResolver.propertyInfoFor(java.lang.Class, java.lang.reflect.Member, String)"" because ""<parameter2>"" is null
        at PropertyInfoSetResolver.resolveProperties(PropertyInfoSetResolver.java:13)
        at PropertyInfoSetResolver.main(PropertyInfoSetResolver.java:21);;;","2021-05-09 23:01;fmatte;Additional details from submitter
==
We hit ClassCastException without stack trace and with NULL message (ie preallocated exception) after upgrading OpenJDK from v 11.0.10 to 11.0.11.
The defect is not reproducible while using -XX:-OmitStackTraceInFastThrow option so seems it is related to the compiler optimization.
The defect is not reproducible using direct single source java file execution (without javac compilation).
The defect is not reproducible while using step-by-step debugging.
Reducing production logic to a minimized reproducible code results that the defect sometimes is not reproduced: frequency of reproducing is about 4 from 5 attempts for an attached code.  

Please find attached minimized reproducible code (that differs from specified in JDK-8266615).
Steps to reproduce:
1. Install OpenJDK 11.0.11
2. Create any directory and go to it.
3. Download attached JDK11011Defect.java class to the directory created above.
4. Download to the same directory the following jar libs:
https://repo1.maven.org/maven2/org/modelmapper/modelmapper/2.3.0/modelmapper-2.3.0.jar
https://repo1.maven.org/maven2/com/google/protobuf/protobuf-java/3.11.4/protobuf-java-3.11.4.jar
5. Compile code:
javac -classpath .\* JDK11011Defect.java
6. Execute code:
java -classpath .\*;.\ JDK11011Defect
;;;","2021-05-10 23:57;fmatte;WIth the newly provided testcase, I could see ClassCastException.
 > Exception in thread ""main"" java.lang.ClassCastException;;;","2021-05-11 00:20;fmatte;For me it looks like this is not a regression, the problem exist for a while, and it only discovered with the below recent change
https://github.com/openjdk/jdk/blob/master/src/hotspot/share/opto/graphKit.cpp#L3321
if (!objtp->maybe_null()) {
          builtin_throw(Deoptimization::Reason_class_check, makecon(TypeKlassPtr::make(objtp->klass())));
          return top();
        }

And inside builtin_throw we have
https://github.com/openjdk/jdk/blob/master/src/hotspot/share/opto/graphKit.cpp#L593
case Deoptimization::Reason_class_check:
      if (java_bc() == Bytecodes::_aastore) {
        ex_obj = env()->ArrayStoreException_instance();
      } else {
        ex_obj = env()->ClassCastException_instance();   <=== here
      };;;","2021-05-12 05:11;thartmann;This is not related to JDK-8257594 (although the problem triggers more often afterwards) and also not a regression in JDK 11.0.11. Attached Test.java triggers the problem even in JDK 8u.;;;","2021-05-17 05:15;thartmann;Updated ILW = Incorrect result of subtype check (cast/instanceof), edge case but easy to reproduce, no workaround but disable C2 compilation of affected method = HMM = P2;;;","2021-05-18 05:22;roboduke;Changeset: ce88b334
Author:    Tobias Hartmann <thartmann@openjdk.org>
Date:      2021-05-18 12:21:24 +0000
URL:       https://git.openjdk.java.net/jdk/commit/ce88b334884b6cc76bd938a8a8e6a9b28a777cb8
;;;","2021-06-01 08:15;roland;11u Fix Request
 
Backporting this patch fixes a C2 bug that causes incorrect execution. Patch applies cleanly to 11u. New test fails without the patch, and passes with it. tier1 tests pass with the patch.;;;","2021-08-09 14:11;epavlova;Regression test compiler/types/TestInterfaceArraySubtypeCheck.java passed in JDK17 ATR;;;",,,,,,,,,,,,,,,,,,,,,,,,,
Method RandomAccessFile#length() returns 0 for block devices on linux.,JDK-8266610,5048856,Bug,Closed,JDK,JDK,software,duke,,,P4,Fixed,vtewari,webbuggrp,webbuggrp,2021-05-05 13:14,2021-12-02 14:07,2023-10-01 09:57,2021-05-09 20:51,11,,,,,,,17,core-libs,,0,additional-information-received,dcsaw,reproducer-yes,webbug,,,,,,,,,,"ADDITIONAL SYSTEM INFORMATION :
Ubuntu 20.04.1 LTS
openjdk version ""11.0.11"" 2021-04-20
OpenJDK Runtime Environment 18.9 (build 11.0.11+9)

A DESCRIPTION OF THE PROBLEM :
The problem with RandomAccessFile#length() have been found after using RandomAccessFile#skipBytes() for block device in linux. Method skipBytes always returns 0 skipped bytes for any block device in linux. I made research which showed that method length() was responsible for wrong results of skipBytes() method. I also found that implementation of method length() has changed since Java 9.

STEPS TO FOLLOW TO REPRODUCE THE PROBLEM :
1. Create a random access file stream to read from any device block in linux eg. /dev/sda
2. Run length() method from RandomAccessFile object

EXPECTED VERSUS ACTUAL BEHAVIOR :
EXPECTED -
Correct size of device block returned by length() method from RandomAccessFile object.
ACTUAL -
RandomAccessFile.length() method for block device return always 0

---------- BEGIN SOURCE ----------
import java.io.IOException;
import java.io.RandomAccessFile;

public class Test {
  public static void main(String[] args) throws IOException {
      String blockDevicePath = ""/dev/sda"";
      RandomAccessFile file = new RandomAccessFile(blockDevicePath,""r"");
      System.out.println(blockDevicePath);
      System.out.println(""Channel size: ""+file.getChannel().size());
      System.out.println(""Length: ""+file.length());
  }
}
---------- END SOURCE ----------

FREQUENCY : always


",,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8150539,,,,,,,,,,JDK-8266797,,,,"2021-05-05 22:47;tongwan;Test.java;https://bugs.openjdk.org/secure/attachment/94525/Test.java",,,,,,,,,,,x86_64,,,,,,,,,linux_ubuntu,,,,,"0|i2spkr:",9223372036854775807,b22,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@5f132e58,,,,,,,Verified,,"2021-05-05 22:34;tongwan;The observations on Windows and Oralce Linux:
On Windows 10:
JDK 11: Passed. Correct size of device block returned
On Oralce Linux:
JDK 11: Passed.
;;;","2021-05-06 01:09;vtewari;I think in case of channel it handled block devices seperatly, but in case of RandomAccessFile.length does not.

JNIEXPORT jlong JNICALL
Java_sun_nio_ch_FileDispatcherImpl_size0(JNIEnv *env, jobject this, jobject fdo)
{
    jint fd = fdval(env, fdo);
    struct stat64 fbuf;

    if (fstat64(fd, &fbuf) < 0)
        return handle(env, -1, ""Size failed"");

#ifdef BLKGETSIZE64
    if (S_ISBLK(fbuf.st_mode)) {
        uint64_t size;
        if (ioctl(fd, BLKGETSIZE64, &size) < 0)
            return handle(env, -1, ""Size failed"");
        return (jlong)size;
    }
#endif

    return fbuf.st_size;
}

We have to see if we can do the similar changes in case of RandomAccessFile.length as well.

;;;","2021-05-06 01:11;vtewari;I tested at my ubuntu 20.04 and i am able to reproduce this issue with latest jdk.;;;","2021-05-06 03:05;vtewari;below patch will resolves this issue at my local environment.
--- a/src/java.base/unix/native/libjava/io_util_md.c
+++ b/src/java.base/unix/native/libjava/io_util_md.c
@@ -32,6 +32,8 @@
 
 #if defined(__linux__) || defined(_ALLBSD_SOURCE) || defined(_AIX)
 #include <sys/ioctl.h>
+#include <linux/fs.h>
+#include <sys/stat.h>
 #endif
 
 #ifdef MACOSX
@@ -245,9 +247,17 @@ handleGetLength(FD fd)
     struct stat64 sb;
     int result;
     RESTARTABLE(fstat64(fd, &sb), result);
-    if (result == 0) {
-        return sb.st_size;
-    } else {
+    if (result < 0) {
         return -1;
     }
+    #ifdef BLKGETSIZE64
+        if (S_ISBLK(sb.st_mode)) {
+            uint64_t size;
+            if (ioctl(fd, BLKGETSIZE64, &size) < 0)
+                return -1;
+            return (jlong)size;
+        }
+    #endif
+
+    return sb.st_size;
 }
;;;","2021-05-06 03:39;hshi;Above fix works in my environment.
Thanks! 
;;;","2021-05-09 20:51;roboduke;Changeset: 69b96f9a
Author:    Vyom Tewari <vtewari@openjdk.org>
Date:      2021-05-10 03:51:04 +0000
URL:       https://git.openjdk.java.net/jdk/commit/69b96f9a1b4a959c6b86f41c2259d9e4d47c8ede
;;;","2021-05-14 01:15;tongwan;Request the submitter to verify the fix with the latest version of JDK at https://jdk.java.net/17/;;;","2021-05-17 19:15;tongwan;From the submitter:
I tested this fix in Java 17.ea.22 version and it looks the length() method from RandomAccessFile return correct size of the block device so this fix works well.  ;;;",,,,,,,,,,,,,,,,,,,,,,,,,,
jpackage: Add missing copyright file in Java runtime .deb installers,JDK-8266603,5048878,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,asemenyuk,asemenyuk,asemenyuk,2021-05-05 18:13,2021-05-17 17:39,2023-10-01 09:57,2021-05-10 09:40,17,,,,,,,17,tools,,0,sn_92,sn_93,,,,,,,,,,,,"jpackage should create copyright file in /usr/share/doc directory tree when building .deb package for Java runtime with installation directory in /usr directory tree.

jpackage creates share/doc/copyright file in installation directory for apps installed outside of /usr tree.

jpackage creates /usr/share/doc/${package_name}/copyright file for apps installed in /usr tree .

jpackage doesn't create copyright file at all for Java runtime. The reason for this behavior was that jpackage should not place additional files in installation directory of Java runtime. However when installing Java runtime or app in /usr tree, copyright file will be placed outside of installation directory. Thus copyright file should be always created if package installation directory is inside of /usr tree.",,,,,,,,,,,,,,,,,,,,,,,JDK-8255624,,,,,,,,,,,,,,,,,,,,,,,,,,,,,generic,,,,,,,,,linux,,,,,"0|i2sppn:",9223372036854775807,b22,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@3656b41f,,,,,,,,,"2021-05-10 09:40;roboduke;Changeset: c8b74474
Author:    Alexey Semenyuk <asemenyuk@openjdk.org>
Date:      2021-05-10 16:39:39 +0000
URL:       https://git.openjdk.java.net/jdk/commit/c8b744743bd54a00a4f7bf1e852d454fcd942abd
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Fix bugs in AddLNode::Ideal transformations,JDK-8266601,5048875,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,cslucas,cslucas,cslucas,2021-05-05 16:37,2021-06-02 01:44,2023-10-01 09:57,2021-05-11 02:29,11,16,17,8,,,,17,hotspot,,0,c2,hs-comp-triaged,oracle-triage-11,oracle-triage-17,,,,,,,,,,"While writing some tests using the new IR-based test framework (https://github.com/openjdk/jdk/pull/3508) I found the following issues on ADDLNode::Ideal transformations:

// Convert ""(a-b)+(c-a)"" into ""(c-b)""
if( op2 == Op_SubL && in1->in(1) == in1->in(2) ) ...
*** Notice the second part of the comparison.

// Convert ""(0-y)+x"" into ""(x-y)""
if( op1 == Op_SubL && phase->type(in1->in(1)) == TypeInt::ZERO )
*** Should be ""TypeLong::ZERO"" instead of ""TypeInt::ZERO""
*** Actually found by Christian Hagedorn

// Convert ""X+X+X...+X+Y"" into ""k*X+Y"" or really convert ""X+(X+Y)""
// into ""(X<<1)+Y"" and let shift-folding happen.
if( op2 == Op_AddL &&
    in2->in(1) == in1 &&
    op1 != Op_ConL &&
    0 ) {

*** The optimization is disabled due the ""&& 0"" at the end. Later I found that this is being tracked by this issue: https://bugs.openjdk.java.net/browse/JDK-8259624",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8259624,,,JDK-8267980,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2spoz:",9223372036854775807,b22,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2021-05-11 02:29;roboduke;Changeset: 67cb22af
Author:    Cesar <disoares@microsoft.com>
Committer: Tobias Hartmann <thartmann@openjdk.org>
Date:      2021-05-11 09:28:37 +0000
URL:       https://git.openjdk.java.net/jdk/commit/67cb22af58c649e67f0b9f707a65389bcb39a205
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
"StandardJavaFileManager: default impls of setLocationFromPaths(), getJavaFileObjectsFromPaths() methods don't throw IllegalArgumentException as specified",JDK-8266596,5048866,Bug,Closed,JDK,JDK,software,duke,,,P2,Fixed,jlahoda,dbessono,dbessono,2021-05-05 14:24,2021-08-06 01:26,2023-10-01 09:57,2021-06-22 00:35,,,,,,,,17,tools,,0,conformance,jsr199,tck-red-17,,,,,,,,,,,"The following specifications
https://docs.oracle.com/en/java/javase/16/docs/api/java.compiler/javax/tools/StandardJavaFileManager.html#getJavaFileObjectsFromPaths(java.lang.Iterable)
https://docs.oracle.com/en/java/javase/16/docs/api/java.compiler/javax/tools/StandardJavaFileManager.html#getJavaFileObjectsFromPaths(java.util.Collection)
https://docs.oracle.com/en/java/javase/16/docs/api/java.compiler/javax/tools/StandardJavaFileManager.html#setLocationFromPaths(javax.tools.JavaFileManager.Location,java.util.Collection)
say:

=================================
Implementation Requirements:
    IllegalArgumentException will be thrown if any of the paths cannot be converted to a file.
=================================

Actually OpenJDK implementation performs a lazy conversion of the given paths to files 
and IllegalArgumentException won't be thrown if some of the passed paths in not convertable to file 
until and if the 'receiver' methods (setLocation() or getJavaFileObjectsFromFiles()) perform the actual iteration over Iterable<? extends File>.

Moreover if some implementation of getJavaFileObjectsFromFiles() creates another lazy Iterable<? extends JavaFileObject> then IAE would be thrown only when the user tries to iterate over the result.

Either the spec needs to be corrected to match the impl or implemenation(s) should be made non-lazy


",,,,,,,,,,,JDK-8269194,JDK-8270615,,,,,,,,,,,,,JDK-8266631,JDK-8266591,,,,,,,,,,,JCK-7316465,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2spmz:",9223372036854775807,b28,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4dca67bd,,,,,,,Verified,,"2021-05-24 10:26;jjg;I recommend updating the spec to include ""laziness"".;;;","2021-06-22 00:35;roboduke;Changeset: 01f12fba
Author:    Jan Lahoda <jlahoda@openjdk.org>
Date:      2021-06-22 07:34:30 +0000
URL:       https://git.openjdk.java.net/jdk17/commit/01f12fba648b8c0cb64870b00e6f0f3a7f0ba4c9
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
jdk/jfr/jcmd/TestJcmdDump.java with slowdebug bits fails with AttachNotSupportedException,JDK-8266595,5048865,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,egahlin,dcubed,dcubed,2021-05-05 14:19,2021-07-15 10:30,2023-10-01 09:57,2021-07-05 08:19,17,,,,,,,17,hotspot,,0,,,,,,,,,,,,,,"The following test failed with slowdebug bits:

jdk/jfr/jcmd/TestJcmdDump.java

Here's a snippet from the log file:

---------------- stderr ----------------
com.sun.tools.attach.AttachNotSupportedException: Unable to open socket file /proc/25212/root/tmp/.java_pid25212: target process 25212 doesn't respond within 10500ms or HotSpot VM not loaded
        at jdk.attach/sun.tools.attach.VirtualMachineImpl.<init>(VirtualMachineImpl.java:103)
        at jdk.attach/sun.tools.attach.AttachProviderImpl.attachVirtualMachine(AttachProviderImpl.java:58)
        at jdk.attach/com.sun.tools.attach.VirtualMachine.attach(VirtualMachine.java:207)
        at jdk.jcmd/sun.tools.jcmd.JCmd.executeCommandForPid(JCmd.java:113)
        at jdk.jcmd/sun.tools.jcmd.JCmd.main(JCmd.java:97)

----------------------------------------

I have been seeing this test failed ONLY with slowdebug
bits since jdk-16+25 testing on 2020.11.20. However, I'm
only going to attach sightings for jdk-17.",,,,,,,,,,,JDK-8269885,JDK-8270709,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"2021-05-05 14:23;dcubed;jdk-17+20_linux.8266595.zip;https://bugs.openjdk.org/secure/attachment/94521/jdk-17%2B20_linux.8266595.zip",,,,,,,,,,,x86_64,,,,,,,,,linux_ubuntu,,,,,"0|i2spmr:",9223372036854775807,b30,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@42995637,,,,,,,,,"2021-05-06 08:40;dcubed;Here's the logs for all my sightings in jdk-17:

$ unzip -l jdk-17+20_linux.8266595.zip
Archive:  jdk-17+20_linux.8266595.zip
  Length      Date    Time    Name
---------  ---------- -----   ----
   107090  2021-02-12 01:01   jdk-17+9_1/failures.linux-x86_64/TestJcmdDump.jtr.slowdebug
   109305  2021-02-13 14:05   jdk-17+9_2/failures.linux-x86_64/TestJcmdDump.jtr.slowdebug
   111629  2021-02-18 16:48   jdk-17+10_1/failures.linux-x86_64/TestJcmdDump.jtr.slowdebug
   111773  2021-02-19 21:01   jdk-17+10_2/failures.linux-x86_64/TestJcmdDump.jtr.slowdebug
   107333  2021-02-25 16:50   jdk-17+11_1/failures.linux-x86_64/TestJcmdDump.jtr.slowdebug
   111463  2021-02-26 21:34   jdk-17+11_2/failures.linux-x86_64/TestJcmdDump.jtr.slowdebug
   103969  2021-03-04 17:30   jdk-17+12_1/failures.linux-x86_64/TestJcmdDump.jtr.slowdebug
   102656  2021-03-05 22:01   jdk-17+12_2/failures.linux-x86_64/TestJcmdDump.jtr.slowdebug
   114659  2021-03-11 17:09   jdk-17+13_1/failures.linux-x86_64/TestJcmdDump.jtr.slowdebug
   104250  2021-03-12 21:37   jdk-17+13_2/failures.linux-x86_64/TestJcmdDump.jtr.slowdebug
   109867  2021-03-18 17:35   jdk-17+14_1/failures.linux-x86_64/TestJcmdDump.jtr.slowdebug
   111173  2021-03-19 22:10   jdk-17+14_2/failures.linux-x86_64/TestJcmdDump.jtr.slowdebug
   111398  2021-03-25 17:03   jdk-17+15_1/failures.linux-x86_64/TestJcmdDump.jtr.slowdebug
   110132  2021-03-26 22:34   jdk-17+15_2/failures.linux-x86_64/TestJcmdDump.jtr.slowdebug
   104243  2021-04-08 17:05   jdk-17+17_1/failures.linux-x86_64/TestJcmdDump.jtr.slowdebug
    90001  2021-04-09 22:44   jdk-17+17_2/failures.linux-x86_64/TestJcmdDump.jtr.slowdebug
   106575  2021-04-15 18:29   jdk-17+18_1/failures.linux-x86_64/TestJcmdDump.jtr.slowdebug
   107080  2021-04-16 21:44   jdk-17+18_2/failures.linux-x86_64/TestJcmdDump.jtr.slowdebug
   105912  2021-04-22 19:45   jdk-17+19_1/failures.linux-x86_64/TestJcmdDump.jtr.slowdebug
    86169  2021-04-24 01:40   jdk-17+19_2/failures.linux-x86_64/TestJcmdDump.jtr.slowdebug
    85851  2021-04-30 22:21   jdk-17+20_1/failures.linux-x86_64/TestJcmdDump.jtr.slowdebug
   110925  2021-05-01 21:44   jdk-17+20_2/failures.linux-x86_64/TestJcmdDump.jtr.slowdebug
---------                     -------
  2323453                     22 files;;;","2021-05-11 03:36;egahlin;This could be a regression. 

I have seen problem elsewhere with VirtualMachine.attach(pid) without listing VirtualMachineDescriptors first using VirtualMachine.list(). ;;;","2021-06-29 04:32;egahlin;I will bump the attach timeout, by setting sun.tools.attach.attachTimeout to a higher value. 

This is likely due to slow GC in the test when running slow debug.;;;","2021-07-05 08:19;roboduke;Changeset: 5b8e1a26
Author:    Erik Gahlin <egahlin@openjdk.org>
Date:      2021-07-05 15:18:47 +0000
URL:       https://git.openjdk.java.net/jdk17/commit/5b8e1a266e572724a715604ac1c97939bd4db3d1
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
"vmTestbase/nsk/jvmti/PopFrame/popframe011 fails with ""assert(java_thread == _state->get_thread()) failed: Must be""",JDK-8266593,5048863,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,sspitsyn,dcubed,dcubed,2021-05-05 14:02,2021-11-25 00:27,2023-10-01 09:57,2021-11-22 02:48,17,,,,,,,18,hotspot,,0,,,,,,,,,,,,,,"The following test:

vmTestbase/nsk/jvmti/PopFrame/popframe011/TestDescription.java

can fail with:

#  Internal Error (/work/shared/bug_hunt/thread_SMR_stress/jdk17_exp.git/open/src/hotspot/share/prims/jvmtiEnvBase.cpp:1533), pid=15364, tid=4442
#  assert(java_thread == _state->get_thread()) failed: Must be
#
# JRE version: Java(TM) SE Runtime Environment (17.0) (fastdebug build 17-internal+0-LTS-2021-04-30-1905344.dcubed...)
# Java VM: Java HotSpot(TM) 64-Bit Server VM (fastdebug 17-internal+0-LTS-2021-04-30-1905344.dcubed..., mixed mode, sharing, tiered, compressed oops, compressed class ptrs, g1 gc, linux-amd64)
# Problematic frame:
# V  [libjvm.so+0x11dcac8]  UpdateForPopTopFrameClosure::doit(Thread*, bool)+0xa8


Here's a snippet from the log file:

#section:main
----------messages:(4/267)----------
command: main -agentlib:popframe011 nsk.jvmti.PopFrame.popframe011 6600
reason: User specified action: run main/othervm/native/timeout=6900 -agentlib:popframe011 nsk.jvmti.PopFrame.popframe011 6600
Mode: othervm [/othervm specified]
elapsed time (seconds): 3363.522
----------configuration:(0/0)----------
----------System.out:(22/1610)----------
About to execute for 6600 seconds.
# To suppress the following error report, specify this argument
# after -XX: or in .hotspotrc:  SuppressErrorAt=/jvmtiEnvBase.cpp:1533
#
# A fatal error has been detected by the Java Runtime Environment:
#
#  Internal Error (/work/shared/bug_hunt/thread_SMR_stress/jdk17_exp.git/open/src/hotspot/share/prims/jvmtiEnvBase.cpp:1533), pid=15364, tid=4442
#  assert(java_thread == _state->get_thread()) failed: Must be
#
# JRE version: Java(TM) SE Runtime Environment (17.0) (fastdebug build 17-internal+0-LTS-2021-04-30-1905344.dcubed...)
# Java VM: Java HotSpot(TM) 64-Bit Server VM (fastdebug 17-internal+0-LTS-2021-04-30-1905344.dcubed..., mixed mode, sharing, tiered, compressed oops, compressed class ptrs, g1 gc, linux-amd64)
# Problematic frame:
# V  [libjvm.so+0x11dcac8]  UpdateForPopTopFrameClosure::doit(Thread*, bool)+0xa8
#
# Core dump will be written. Default location: Core dumps may be processed with ""/usr/share/apport/apport %p %s %c %d %P %E"" (or dumping to /work/shared/bug_hunt/thread_SMR_stress/jdk17_exp.git/build/linux-x86_64-normal-server-fastdebug/test-support/jtreg_open_test_hotspot_jtreg_StressWrapper_popframe011_java/StressWrapper_popframe011/core.15364)
#
# An error report file with more information is saved as:
# /work/shared/bug_hunt/thread_SMR_stress/jdk17_exp.git/build/linux-x86_64-normal-server-fastdebug/test-support/jtreg_open_test_hotspot_jtreg_StressWrapper_popframe011_java/StressWrapper_popframe011/hs_err_pid15364.log
#
# If you would like to submit a bug report, please visit:
#   https://bugreport.java.com/bugreport/crash.jsp
#
----------System.err:(0/0)----------
----------rerun:(33/5020)*----------

Here's the crashing thread's stack:

---------------  T H R E A D  ---------------

Current thread (0x00002aca5c0308f0):  JavaThread ""Thread-9532887"" [_thread_in_vm, id=4442, stack(0x00002acaa4606000,0x00002acaa4707000)]

Stack: [0x00002acaa4606000,0x00002acaa4707000],  sp=0x00002acaa4704630,  free space=1017k
Native frames: (J=compiled Java code, j=interpreted, Vv=VM code, C=native code)
V  [libjvm.so+0x11dcac8]  UpdateForPopTopFrameClosure::doit(Thread*, bool)+0xa8
V  [libjvm.so+0xd8ddf0]  HandshakeOperation::do_handshake(JavaThread*)+0xf0
V  [libjvm.so+0xd8df81]  HandshakeState::process_self_inner()+0x141
V  [libjvm.so+0xd8e2cd]  HandshakeState::process_by_self()+0x19d
V  [libjvm.so+0x16ff118]  SafepointMechanism::process_if_requested_slow(JavaThread*)+0x28
V  [libjvm.so+0x14f6c18]  Mutex::lock_contended(Thread*)+0x548
V  [libjvm.so+0x14f6de4]  Mutex::lock(Thread*)+0xf4
V  [libjvm.so+0x18ba1c8]  Threads::remove(JavaThread*, bool)+0x38
V  [libjvm.so+0x18bd08e]  JavaThread::exit(bool, JavaThread::ExitType)+0x89e
V  [libjvm.so+0x18bd5b9]  JavaThread::post_run()+0x19
V  [libjvm.so+0x18bc65d]  Thread::call_run()+0x16d
V  [libjvm.so+0x159387e]  thread_native_entry(Thread*)+0x10e

Please note this this failure is happening with the latest version
of the popframe011 test that I'm developing via:

    JDK-8266130 Convert Thread-SMR stress tests from counter based to time based

My updates in JDK-8266130 only change the duration of the
test execution and don't change the popframe logic at all, i.e.,
run the same test more times and it will eventually crash.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8266130,,,,,,,,"2021-05-05 14:24;dcubed;jdk-17+20_linux.8266593.zip;https://bugs.openjdk.org/secure/attachment/94522/jdk-17%2B20_linux.8266593.zip",,,,,,,,,,,x86_64,,,,,,,,,linux_ubuntu,,,,,"0|i2spmb:",9223372036854775807,b25,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@661b156a,,,,,,,,,"2021-05-05 14:05;dcubed;I've attached the log files for my jdk-17+20 sightings:

$ unzip -l jdk-17+20_linux.8266593.zip
Archive:  jdk-17+20_linux.8266593.zip
  Length      Date    Time    Name
---------  ---------- -----   ----
    90561  2021-05-01 04:25   jdk-17+20_1/failures.linux-x86_64/hs_err_pid15364.log
    15959  2021-05-01 04:25   jdk-17+20_1/failures.linux-x86_64/StressWrapper_popframe011.jtr.fastdebug
    90171  2021-05-01 04:40   jdk-17+20_1/failures.linux-x86_64/hs_err_pid20671.log
    15960  2021-05-01 04:40   jdk-17+20_1/failures.linux-x86_64/StressWrapper_popframe011.jtr.slowdebug
   148321  2021-05-01 15:52   jdk-17+20_2/failures.linux-x86_64/hs_err_pid12083.log
    16303  2021-05-01 15:52   jdk-17+20_2/failures.linux-x86_64/TestDescription.jtr.fastdebug
    95813  2021-05-02 03:34   jdk-17+20_2/failures.linux-x86_64/hs_err_pid14057.log
    15960  2021-05-02 03:34   jdk-17+20_2/failures.linux-x86_64/StressWrapper_popframe011.jtr.fastdebug
    91440  2021-05-02 03:51   jdk-17+20_2/failures.linux-x86_64/hs_err_pid32239.log
    15961  2021-05-02 03:51   jdk-17+20_2/failures.linux-x86_64/StressWrapper_popframe011.jtr.slowdebug
---------                     -------
   596449                     10 files
;;;","2021-06-10 12:12;dcubed;JDK-8266130 convert Thread-SMR stress tests from counter based to time based
is integrated in the jdk/jdk repo so the latest version of the test is now available
directly from the repo (instead of the PR).;;;","2021-06-10 23:58;rehn;In JavaThread::exit()
###
  if (JvmtiEnv::environments_might_exist()) {
    JvmtiExport::cleanup_thread(this); // <== frees JVM Ti state
  }

...

  // Remove from list of active threads list, and notify VM thread if we are the last non-daemon thread
  Threads::remove(this, daemon); // <== Executes handshake which reads JVM TI state
###

Simplified:
- When a JavaThread is ""is_exiting()"" we are about to tear down the Java side of the JavaThread*.
- When a JavaThread is ""is_exiting()"" and java_lang_Thread::thread(thread->threadObj()) returns NULL the object is disconnected from native side. And vice versa: the native JavaThread* no longer have a representation in Java. (technically we can still reach our object)
- When a JavaThread is ""is_terminated()"" the native JavaThread* is no longer usable.

Handshakes are performed until terminated, since some is only working on the native side.
But it also means that other Handshakes may need to add their owns checks.

I think all derivatives of JvmtiHandshakeClosure should have the proper checks added:
""if (jt->is_exiting() && java_lang_Thread::thread(thread->threadObj()) == NULL)""
Which means the thread is after ensure_join() (Java-side is dead, e.g. isAlive() == false).

Looks like I missed this, or alternative probably me that broke it, if I'm not mistaken.

What you think?;;;","2021-06-21 21:46;dholmes;I think all targetted handshakes on JavaThread should be predicated on not-exiting (and by implication certainly not terminated). Only global handshake operations may need to catch a JavaThread whilst still in the process of being torn down and terminating.

I'm not clear on the intent behind the threadObj() check though. There is a very small window during JNI attach that a thread can handshake but not yet have a threadObj() but we have the ""is_attaching_via_jni"" flag to filter those out of thread operations. We no longer null out the threadObj() in ensure_join() but leave that for the JavaThread destructor.;;;","2021-11-16 14:26;sspitsyn;Agreed with the analysis from Robbin.
Reproduced this issue with my tracing and got this printed:
  DBG: JvmtiExport::cleanup_thread: 0x7f3e380303a0
  DBG: UpdateForPopTopFrameClosure::doit: java_thread: 0x7f3e380303a0 _state->get_thread(): 0xbabababababababa

So, we get this assert in UpdateForPopTopFrameClosure::doit after JvmtiExport::cleanup_thread for this java_thread.
;;;","2021-11-17 03:03;sspitsyn;The suggested fix is:

diff --git a/src/hotspot/share/prims/jvmtiEnvBase.cpp b/src/hotspot/share/prims/jvmtiEnvBase.cpp
index e6a9409b7ef..d4f5c5d1a9e 100644
--- a/src/hotspot/share/prims/jvmtiEnvBase.cpp
+++ b/src/hotspot/share/prims/jvmtiEnvBase.cpp
@@ -1393,6 +1393,9 @@ SetForceEarlyReturn::doit(Thread *target, bool self) {
   Thread* current_thread = Thread::current();
   HandleMark   hm(current_thread);
 
+  if (java_thread->is_exiting() || java_thread->threadObj() == NULL) {
+    return; /* JVMTI_ERROR_THREAD_NOT_ALIVE (default) */
+  }
   if (!self) {
     if (!java_thread->is_suspended()) {
       _result = JVMTI_ERROR_THREAD_NOT_SUSPENDED;
@@ -1523,6 +1526,10 @@ UpdateForPopTopFrameClosure::doit(Thread *target, bool self) {
   Thread* current_thread  = Thread::current();
   HandleMark hm(current_thread);
   JavaThread* java_thread = JavaThread::cast(target);
+
+  if (java_thread->is_exiting() || java_thread->threadObj() == NULL) {
+    return; /* JVMTI_ERROR_THREAD_NOT_ALIVE (default) */
+  }
   assert(java_thread == _state->get_thread(), ""Must be"");
 
   if (!self && !java_thread->is_suspended()) {
@@ -1599,14 +1606,12 @@ UpdateForPopTopFrameClosure::doit(Thread *target, bool self) {
   // It's fine to update the thread state here because no JVMTI events
   // shall be posted for this PopFrame.
 
-  if (!java_thread->is_exiting() && java_thread->threadObj() != NULL) {
-    _state->update_for_pop_top_frame();
-    java_thread->set_popframe_condition(JavaThread::popframe_pending_bit);
-    // Set pending step flag for this popframe and it is cleared when next
-    // step event is posted.
-    _state->set_pending_step_for_popframe();
-    _result = JVMTI_ERROR_NONE;
-  }
+  _state->update_for_pop_top_frame();
+  java_thread->set_popframe_condition(JavaThread::popframe_pending_bit);
+  // Set pending step flag for this popframe and it is cleared when next
+  // step event is posted.
+  _state->set_pending_step_for_popframe();
+  _result = JVMTI_ERROR_NONE;
 }
 
 void
@@ -1614,6 +1619,9 @@ SetFramePopClosure::doit(Thread *target, bool self) {
   ResourceMark rm;
   JavaThread* java_thread = JavaThread::cast(target);
 
+  if (java_thread->is_exiting() || java_thread->threadObj() == NULL) {
+    return; /* JVMTI_ERROR_THREAD_NOT_ALIVE (default) */
+  }
   assert(_state->get_thread() == java_thread, ""Must be"");
 
   if (!self && !java_thread->is_suspended()) {
@@ -1633,9 +1641,6 @@ SetFramePopClosure::doit(Thread *target, bool self) {
   }
 
   assert(vf->frame_pointer() != NULL, ""frame pointer mustn't be NULL"");
-  if (java_thread->is_exiting() || java_thread->threadObj() == NULL) {
-    return; /* JVMTI_ERROR_THREAD_NOT_ALIVE (default) */
-  }
   int frame_number = _state->count_frames() - _depth;
   _state->env_thread_state((JvmtiEnvBase*)_env)->set_frame_pop(frame_number);
   _result = JVMTI_ERROR_NONE;
;;;","2021-11-22 02:48;roboduke;Changeset: 32839ba0
Author:    Serguei Spitsyn <sspitsyn@openjdk.org>
Date:      2021-11-22 10:47:47 +0000
URL:       https://git.openjdk.java.net/jdk/commit/32839ba012f0a0a66e249cd8d12b94499d82ec0a
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,
StandardJavaFileManager::getJavaFileObjectsFromPaths() methods contain a typo in their spec,JDK-8266591,5048861,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,jlahoda,dbessono,dbessono,2021-05-05 13:53,2021-07-15 10:12,2023-10-01 09:57,2021-06-22 00:35,,,,,,,,17,tools,,0,conformance,,,,,,,,,,,,,"The following specifications
https://docs.oracle.com/en/java/javase/16/docs/api/java.compiler/javax/tools/StandardJavaFileManager.html#getJavaFileObjectsFromPaths(java.lang.Iterable)
https://docs.oracle.com/en/java/javase/16/docs/api/java.compiler/javax/tools/StandardJavaFileManager.html#getJavaFileObjectsFromPaths(java.util.Collection)
both say:

=================================
Implementation Requirements:
    The default implementation converts each path to a file and calls getJavaObjectsFromFiles
=================================

Actually the link leads to and OpenJDK implementation calls method `getJavaFileObjectsFromFiles()`

the problem is here in the javadoc text:

 {@link #getJavaFileObjectsFromFiles getJavaObjectsFromFiles}

",,,,,,,,,,,JDK-8269195,JDK-8270616,,,,,,,,,,,,,JDK-8266596,JDK-8266590,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2splv:",9223372036854775807,b28,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4dca67bd,,,,,,,,,"2021-05-05 16:32;jjg;I don't understand the issue being described: please check and maybe be even more explicit.

If nothing else, these two lines in the description seem mutually contradictory:

1.  Actually the link leads to and OpenJDK implementation calls method `getJavaFileObjectsFromPaths()` 

2.  the problem is here in the javadoc text:   {@link #getJavaFileObjectsFromFiles getJavaObjectsFromFiles} 

---

Separately, I accept there is a phrasing problem about the lazy nature of the conversion.;;;","2021-05-05 16:37;dbessono;This is the spec:

""The default implementation converts each path to a file and calls getJavaObjectsFromFiles""

However implementation calls `getJavaFileObjectsFromFiles()`;;;","2021-05-05 16:38;jjg;One method is correct; one is wrong.

The method that takes a `Collection<Path>` is correct.

The method that takes an `Iterable<Path>` could be clearer, since it indirects through the method that takes a `Collection<Path>`
;;;","2021-05-05 16:40;dbessono;It's
getJavaFileObjectsFromFiles - impl
v.s.
getJavaObjectsFromFiles - spec
in the SE13's method

And the deprecated method even calls getJavaFileObjectsFromPaths - which also contradicts the spec;;;","2021-05-05 16:44;jjg;You list two methods in the Description.  Please be clear about which one you are describing.;;;","2021-05-05 16:46;dbessono;Both are incorrect.
The both refer to ""getJavaObjectsFromFiles"" while they call ""getJavaFileObjectsFromFiles"" - directly or indirectly.;;;","2021-05-05 16:47;jjg;OK.... got it


""The default implementation converts each path to a file and calls getJavaObjectsFromFiles"" 

getJavaObjectsFromFiles .... typo in display name;;;","2021-05-05 16:49;dbessono;yes, and the original title of this issue was

""StandardJavaFileManager::getJavaFileObjectsFromPaths() methods contain a typo in their spec"";;;","2021-05-05 16:52;jjg;will fix:

2x typo
the incorrect spec for the deprecated method
the phrasing around iterating lists;;;","2021-06-22 00:35;roboduke;Changeset: 01f12fba
Author:    Jan Lahoda <jlahoda@openjdk.org>
Date:      2021-06-22 07:34:30 +0000
URL:       https://git.openjdk.java.net/jdk17/commit/01f12fba648b8c0cb64870b00e6f0f3a7f0ba4c9
;;;",,,,,,,,,,,,,,,,,,,,,,,,
StandardJavaFileManager::setLocationFromPaths() spec contains an error,JDK-8266590,5048860,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,jlahoda,dbessono,dbessono,2021-05-05 13:47,2021-07-15 10:12,2023-10-01 09:57,2021-06-22 00:35,17,,,,,,,17,tools,,0,conformance,,,,,,,,,,,,,"The following specification
https://docs.oracle.com/en/java/javase/16/docs/api/java.compiler/javax/tools/StandardJavaFileManager.html#setLocationFromPaths(javax.tools.JavaFileManager.Location,java.util.Collection)
says:

Implementation Requirements:
    The default implementation converts each path to a file and calls getJavaObjectsFromFiles

Actually OpenJDK implementation calls `setLocation()` with an iterable over given paths lazily converted to files.
",,,,,,,,,,,JDK-8270617,JDK-8269196,,,,,,,,,,,,,JDK-8266591,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2spln:",9223372036854775807,b28,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4dca67bd,,,,,,,,,"2021-06-22 00:35;roboduke;Changeset: 01f12fba
Author:    Jan Lahoda <jlahoda@openjdk.org>
Date:      2021-06-22 07:34:30 +0000
URL:       https://git.openjdk.java.net/jdk17/commit/01f12fba648b8c0cb64870b00e6f0f3a7f0ba4c9
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
[lworld] [lw3] Remove experimental support for primitive classes in JPDA,JDK-8266586,5048853,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,fparain,fparain,fparain,2021-05-05 12:56,2021-05-06 07:18,2023-10-01 09:57,2021-05-06 07:18,repo-valhalla,,,,,,,,client-libs,,0,lw3,lworld,,,,,,,,,,,,"The Valhalla repository contains an experimental support for primitive classes in the JPDA (Java Platform Debugger Architecture) that has been implemented in the following CRs: JDK-8232058, JDK-8211027, JDK-8211026, JDK-8211028, JDK-8232785.
As an anticipation of the merge of Valhalla code into mainline, this code has to be removed because it contains modification to JDI, JDWP and JVMTI that are not part of the current specification of these APIs.
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2spk3:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
[lworld] [lw3] C1 should have a flag to control use of delayed reads of flattened fields,JDK-8266582,5048849,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,fparain,fparain,fparain,2021-05-05 12:47,2021-05-06 05:03,2023-10-01 09:57,2021-05-06 05:03,repo-valhalla,,,,,,,,hotspot,,0,lw3,lworld,,,,,,,,,,,,"JDK-8253113 added an optimization in C1 to reduce the number of heap allocations and copies when reading nested values in flattened fields. This optimization had several unforeseen interactions with existing C1 optimizations (JDK-8262128, JDK-8266086). At this point, it makes sense to have a VM flag to control the optimization added in JDK-8253113 in order to more easily future potential issues that could be related to this change.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2spj7:",9223372036854775807,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Update test/jdk/java/lang/ProcessHandle/PermissionTest.java & test/jdk/java/sql/testng/util/TestPolicy.java,JDK-8266579,5048846,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,lancea,lancea,lancea,2021-05-05 12:01,2021-10-20 01:08,2023-10-01 09:57,2021-05-06 07:14,,,,,,,,17,core-libs,,0,jdk11u-fix-request,jdk11u-fix-yes,noreg-self,testbug,,,,,,,,,,"TestNG 7.4 requires the following additional permission.

new PropertyPermission(""testng.memory.friendly"", ""read"");

The following test files need updated to include this permission:

 test/jdk/java/lang/ProcessHandle/PermissionTest.java 
test/jdk/java/sql/testng/util/TestPolicy.java
",,,,,,,,,,,JDK-8275599,JDK-8273066,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2spij:",9223372036854775807,b22,,,,,,,,,,,,"2021-05-06 07:14;roboduke;Changeset: fcedfc8a
Author:    Lance Andersen <lancea@openjdk.org>
Date:      2021-05-06 14:13:45 +0000
URL:       https://git.openjdk.java.net/jdk/commit/fcedfc8a3b4299372f195cae036129dcd7b740ea
;;;","2021-10-19 06:28;mdoerr;Fix Request (11u):
Should get backported for parity with 11.0.14-oracle. Applies cleanly.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Disambiguate BigDecimal description of scale,JDK-8266578,5048845,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,bpb,bpb,bpb,2021-05-05 11:57,2021-07-19 14:16,2023-10-01 09:57,2021-07-12 09:57,17,,,,,,,18,core-libs,,0,noreg-doc,,,,,,,,,,,,,"The API Docs for BigDecimal introduce the meaning of scale. The current verbiage can be misleading when presenting the meaning of a scale value that's negative.

The ambiguity is in this sentence:

    If negative, the unscaled value of the number is ...

which could be replaced with the slightly more verbose:

    If the scale is negative, the unscaled value of the number is ...

To keep symmetry, also revise the positive case from:

    If zero or positive, the scale is the number of digits ...

to:

    If the scale is zero or positive, the scale is the number of digits ...
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2spib:",9223372036854775807,b06,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@28853e3d,,,,,,,,,"2021-07-12 09:57;roboduke;Changeset: 1aef372e
Author:    Ignasi Marimon-Clos <ignasi35@gmail.com>
Committer: Brian Burkhalter <bpb@openjdk.org>
Date:      2021-07-12 16:54:39 +0000
URL:       https://git.openjdk.java.net/jdk/commit/1aef372ed89a48f4eac0ac03b2b3520348713efb
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Fix javadoc tag references in sun.management.jmxremote.ConnectorBootstrap,JDK-8266567,5048827,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,prappo,prappo,prappo,2021-05-05 08:32,2021-05-17 17:43,2023-10-01 09:57,2021-05-12 03:58,17,,,,,,,17,core-svc,,0,noreg-doc,,,,,,,,,,,,,"References in @link and @see tags cannot use whitespace before the opening ""("", if any. If they do so, the ""("" and the rest of the tag content will be considered as label.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8266636,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2speb:",9223372036854775807,b22,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@1f101086,,,,,,,,,"2021-05-12 03:58;roboduke;Changeset: 4727187f
Author:    Pavel Rappo <prappo@openjdk.org>
Date:      2021-05-12 10:57:37 +0000
URL:       https://git.openjdk.java.net/jdk/commit/4727187f86d18d34bd79cf93a74ff4a6515c662e
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Spec of ForwardingJavaFileManager/ForwardingFileObject/ForwardingJavaFileObject methods should mention delegation instead of being copied,JDK-8266565,5048825,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,jjg,dbessono,dbessono,2021-05-05 08:04,2021-07-14 17:18,2023-10-01 09:57,2021-07-09 07:54,17,,,,,,,18,tools,,0,jsr199,,,,,,,,,,,,,"The following classes 

  https://docs.oracle.com/en/java/javase/16/docs/api/java.compiler/javax/tools/ForwardingFileObject.html
  https://docs.oracle.com/en/java/javase/16/docs/api/java.compiler/javax/tools/ForwardingJavaFileObject.html
  https://docs.oracle.com/en/java/javase/16/docs/api/java.compiler/javax/tools/ForwardingJavaFileManager.html

are expected to forward all calls to the given file manager or file object or java file object and this is mentioned at class level specs:

> Forwards calls to a given file object
> Forwards calls to a given file manager

However specification for their methods is simply copied from FileObject, JavaFileObject, JavaFileManager interfaces.

This leads to misleading specs for forwarding implementations of interface methods, since the original specs of the interfaces often refer to ""this file object"" or ""this file manager"" and these assertions are just copied.

Specification for methods of ForwardingX should be overridden to provide correct assertions and expectations.
Or it should be just hidden somehow since there's nothing actually for this methods to specify in addition to what's said at class level:

> Forwards calls to a given file object
> Forwards calls to a given file manager




",,,,,,,,,,,,,,,,,,,,,,,,JDK-8270037,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2spdv:",9223372036854775807,b06,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4dca67bd,,,,,,,,,"2021-05-05 08:09;dbessono;Spec is in this shape since the beginning:
https://docs.oracle.com/javase/6/docs/api/javax/tools/ForwardingFileObject.html
https://docs.oracle.com/javase/6/docs/api/javax/tools/ForwardingJavaFileObject.html
https://docs.oracle.com/javase/6/docs/api/javax/tools/ForwardingJavaFileManager.html
;;;","2021-07-02 07:00;jlahoda;I am sorry, but I don't see the javadoc to be generally misleading. Looking at e.g. ForwardingFileObject.getLastModified()
https://docs.oracle.com/en/java/javase/16/docs/api/java.compiler/javax/tools/ForwardingFileObject.html#getLastModified()

I see the text in the javadoc is prefixed with:
Description copied from interface: FileObject

and the text is:
Returns the time this file object was last modified. The time is measured in milliseconds since the epoch (00:00:00 GMT, January 1, 1970).

I think it is pretty obvious the text was copied, and the text is correct: when the method is invoked on an instance of (Forwarding)FileObject, it will return the timestamp of the instance of the (physical or virtual) file represented by this (Forwarding)FileObject. That is what I think developers need to see. Unless overridden, it will do so by delegating to some other FileObject, as said in the class' javadoc. I don't think that is different from vast majority of other implementations of javac's FileObjects - they mostly delegate to some other entity (java.io.File, java.nio.Path, etc.).;;;","2021-07-02 07:39;jjg;I agree with Jan. The specs are valid in themselves, even if they are not as detailed or informative as they might be.  The key assertion to take into account is the initial sentence in the class description, such as `Forwards calls to a given file object. `.

I see that sentence as the moral equivalent of the use of descriptive sentences in a class or package description of the form ""all methods in this class or package throw NPE when given null arguments unless otherwise stated.""  which is used to avoid replicating the same text in every single method.;;;","2021-07-02 11:08;jjg;At most, we should clarify the class level documentation, and emphasize the point given in the primary first sentence of the class description ... that the object forwards methods to a delegate. That behavior is also explicit in the name of the class: `Forwarding...`.

I do not think we should override the doc comment for each method for the purpose of replacing ""this <item>"" with ""the <delegate item>"". That would be gratuitous copy-paste and would be at risk of introducing incompatibility.   The use of ""this <item>"" in the inherited text is valid and correct, even if ""this <item>"" is defined to be one that forwards operations to a delegate item.;;;","2021-07-02 11:35;dbessono;Few more examples:

ForwardingJavaFileManager::handleOption(String current, Iterator remaining)
  ""Handles one option. If current is an option to this file manager 
  it will consume any arguments to that option from remaining and return true, 
  otherwise return false.""

ForwardingJavaFileManager::hasLocation​(JavaFileManager.Location location)
  ""Determines if a location is known to this file manager.”

Should we expect that these methods always return ‘false’ since _this_ (forwarding) file manager definitely doesn’t know the given option and the given location?

Generally speaking - is there a way to just hide the overridden methods from the generated ForwardingJavaFileManager's JavaSE spec, 
leaving present only class-level spec + specification for constructor that accepts the delegate?

Simply not having the original specs of JavaFileManager methods copied to ForwardingJavaFileManager would improve clarity of FJFM specification.

;;;","2021-07-07 09:58;jjg;Proposed resolution:  

insertion of an additional sentence (in the class description) of the form `Unless otherwise stated, references to ""this <object>"" in the specification should be interpreted as referring indirectly to the delegate <object>`.
;;;","2021-07-09 07:54;roboduke;Changeset: 5a742910
Author:    Jonathan Gibbons <jjg@openjdk.org>
Date:      2021-07-09 14:52:37 +0000
URL:       https://git.openjdk.java.net/jdk/commit/5a742910135a66ba96d7d7e7a7af28d82a620289
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,
XPathEvaluationResult.XPathResultType.NODESET maps to incorrect type,JDK-8266559,5048819,Bug,Resolved,JDK,JDK,software,duke,,,P2,Fixed,joehw,dbessono,dbessono,2021-05-05 06:31,2021-06-07 15:20,2023-10-01 09:57,2021-06-01 21:58,17,,,,,,,17,xml,,0,conformance,doc-only,noreg-doc,tck-red-17,,,,,,,,,,"The spec for XPathEvaluationResult.XPathResultType.NODESET 
https://docs.oracle.com/en/java/javase/16/docs/api/java.xml/javax/xml/xpath/XPathEvaluationResult.XPathResultType.html#NODESET
says:

> ""The XPath 1.0 NodeSet data type. Maps to org.w3c.dom.NodeList.""

However for OpenJDK implementation the following returns null:

   XPathResultType.getQNameType(org.w3c.dom.NodeList.class)

While BTW for NODE OpenJDK implementation matches the spec and works as expected:

  XPathResultType.getQNameType(Node.class) returns XPathConstants.NODE
",,,,,,,,,,,,,,,,,,,,,,,,JDK-8267809,,,,,,,,,JCK-7316075,,,,JDK-8054196,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2spcj:",9223372036854775807,b25,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@42d7a890,,,,,,,,,"2021-05-05 12:33;dbessono;It's been also noticed that the following is not correct:

================================
NODE
public static final XPathEvaluationResult.XPathResultType NODE
The XPath 1.0 NodeSet data type.
================================

It is Node data type, not NodeSet;;;","2021-06-01 21:58;roboduke;Changeset: 7530c00b
Author:    Joe Wang <joehw@openjdk.org>
Date:      2021-06-02 04:57:30 +0000
URL:       https://git.openjdk.java.net/jdk/commit/7530c00b33aac8918841dbae4d928956b60c261f
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
assert(SafepointMechanism::local_poll_armed(_handshakee)) failed: Must be,JDK-8266557,5048817,Bug,Closed,JDK,JDK,software,duke,,,P2,Fixed,rehn,dholmes,dholmes,2021-05-05 06:15,2021-11-22 12:59,2023-10-01 09:57,2021-06-09 00:22,17,,,,,,,17,hotspot,,0,intermittent,sync,tier1,,,,,,,,,,,"Test:  runtime/handshake/HandshakeDirectTest.java

#
# A fatal error has been detected by the Java Runtime Environment:
#
#  Internal Error (/opt/mach5/mesos/work_dir/slaves/3c846bae-ce30-4a97-93ee-9fef4497ccb6-S79134/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/7f32f470-d75c-46d8-95d7-95126e27764b/runs/44c27728-182a-4b52-89d2-08c763d3bd28/workspace/open/src/hotspot/share/runtime/handshake.cpp:574), pid=434172, tid=434194
#  assert(SafepointMechanism::local_poll_armed(_handshakee)) failed: Must be
#
# JRE version: Java(TM) SE Runtime Environment (17.0+21) (fastdebug build 17-ea+21-LTS-1854)
# Java VM: Java HotSpot(TM) 64-Bit Server VM (fastdebug 17-ea+21-LTS-1854, mixed mode, tiered, compressed oops, compressed class ptrs, g1 gc, linux-aarch64)
# Problematic frame:
# V  [libjvm.so+0xd042fc]  HandshakeState::try_process(HandshakeOperation*)+0x24c
#
# Core dump will be written. Default location: Core dumps may be processed with ""/opt/core.sh %p"" (or dumping to /opt/mach5/mesos/work_dir/slaves/3c846bae-ce30-4a97-93ee-9fef4497ccb6-S79686/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/60a09f6f-6524-46f9-9f4e-833b4510b0e2/runs/617be5de-e68f-40c0-9594-f080c648faad/testoutput/test-support/jtreg_open_test_hotspot_jtreg_tier1_runtime/scratch/3/core.434172)
#
# If you would like to submit a bug report, please visit:
#   https://bugreport.java.com/bugreport/crash.jsp
#

---------------  S U M M A R Y ------------

Command Line: -Dtest.vm.opts=-XX:MaxRAMPercentage=6 -Djava.io.tmpdir=/opt/mach5/mesos/work_dir/slaves/3c846bae-ce30-4a97-93ee-9fef4497ccb6-S79686/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/60a09f6f-6524-46f9-9f4e-833b4510b0e2/runs/617be5de-e68f-40c0-9594-f080c648faad/testoutput/test-support/jtreg_open_test_hotspot_jtreg_tier1_runtime/tmp -Dtest.tool.vm.opts=-J-XX:MaxRAMPercentage=6 -J-Djava.io.tmpdir=/opt/mach5/mesos/work_dir/slaves/3c846bae-ce30-4a97-93ee-9fef4497ccb6-S79686/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/60a09f6f-6524-46f9-9f4e-833b4510b0e2/runs/617be5de-e68f-40c0-9594-f080c648faad/testoutput/test-support/jtreg_open_test_hotspot_jtreg_tier1_runtime/tmp -Dtest.compiler.opts= -Dtest.java.opts= -Dtest.jdk=/opt/mach5/mesos/work_dir/jib-master/install/jdk-17+21-1854/linux-aarch64-debug.jdk/jdk-17/fastdebug -Dcompile.jdk=/opt/mach5/mesos/work_dir/jib-master/install/jdk-17+21-1854/linux-aarch64-debug.jdk/jdk-17/fastdebug -Dtest.timeout.factor=4.0 -Dtest.nativepath=/opt/mach5/mesos/work_dir/jib-master/install/jdk-17+21-1854/linux-aarch64-debug.test/hotspot/jtreg/native -Dtest.root=/opt/mach5/mesos/work_dir/jib-master/install/jdk-17+21-1854/src.full/open/test/hotspot/jtreg -Dtest.name=runtime/handshake/HandshakeDirectTest.java -Dtest.file=/opt/mach5/mesos/work_dir/jib-master/install/jdk-17+21-1854/src.full/open/test/hotspot/jtreg/runtime/handshake/HandshakeDirectTest.java -Dtest.src=/opt/mach5/mesos/work_dir/jib-master/install/jdk-17+21-1854/src.full/open/test/hotspot/jtreg/runtime/handshake -Dtest.src.path=/opt/mach5/mesos/work_dir/jib-master/install/jdk-17+21-1854/src.full/open/test/hotspot/jtreg/runtime/handshake:/opt/mach5/mesos/work_dir/jib-master/install/jdk-17+21-1854/src.full/open/test/hotspot/jtreg/testlibrary:/opt/mach5/mesos/work_dir/jib-master/install/jdk-17+21-1854/src.full/open/test/lib -Dtest.classes=/opt/mach5/mesos/work_dir/slaves/3c846bae-ce30-4a97-93ee-9fef4497ccb6-S79686/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/60a09f6f-6524-46f9-9f4e-833b4510b0e2/runs/617be5de-e68f-40c0-9594-f080c648faad/testoutput/test-support/jtreg_open_test_hotspot_jtreg_tier1_runtime/classes/2/runtime/handshake/HandshakeDirectTest.d -Dtest.class.path=/opt/mach5/mesos/work_dir/slaves/3c846bae-ce30-4a97-93ee-9fef4497ccb6-S79686/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/60a09f6f-6524-46f9-9f4e-833b4510b0e2/runs/617be5de-e68f-40c0-9594-f080c648faad/testoutput/test-support/jtreg_open_test_hotspot_jtreg_tier1_runtime/classes/2/runtime/handshake/HandshakeDirectTest.d:/opt/mach5/mesos/work_dir/slaves/3c846bae-ce30-4a97-93ee-9fef4497ccb6-S79686/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/60a09f6f-6524-46f9-9f4e-833b4510b0e2/runs/617be5de-e68f-40c0-9594-f080c648faad/testoutput/test-support/jtreg_open_test_hotspot_jtreg_tier1_runtime/classes/2/testlibrary:/opt/mach5/mesos/work_dir/slaves/3c846bae-ce30-4a97-93ee-9fef4497ccb6-S79686/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/60a09f6f-6524-46f9-9f4e-833b4510b0e2/runs/617be5de-e68f-40c0-9594-f080c648faad/testoutput/test-support/jtreg_open_test_hotspot_jtreg_tier1_runtime/classes/2/test/lib -Dtest.class.path.prefix=/opt/mach5/mesos/work_dir/slaves/3c846bae-ce30-4a97-93ee-9fef4497ccb6-S79686/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/60a09f6f-6524-46f9-9f4e-833b4510b0e2/runs/617be5de-e68f-40c0-9594-f080c648faad/testoutput/test-support/jtreg_open_test_hotspot_jtreg_tier1_runtime/classes/2/runtime/handshake/HandshakeDirectTest.d:/opt/mach5/mesos/work_dir/jib-master/install/jdk-17+21-1854/src.full/open/test/hotspot/jtreg/runtime/handshake:/opt/mach5/mesos/work_dir/slaves/3c846bae-ce30-4a97-93ee-9fef4497ccb6-S79686/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/60a09f6f-6524-46f9-9f4e-833b4510b0e2/runs/617be5de-e68f-40c0-9594-f080c648faad/testoutput/test-support/jtreg_open_test_hotspot_jtreg_tier1_runtime/classes/2/testlibrary:/opt/mach5/mesos/work_dir/slaves/3c846bae-ce30-4a97-93ee-9fef4497ccb6-S79686/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/60a09f6f-6524-46f9-9f4e-833b4510b0e2/runs/617be5de-e68f-40c0-9594-f080c648faad/testoutput/test-support/jtreg_open_test_hotspot_jtreg_tier1_runtime/classes/2/test/lib -XX:MaxRAMPercentage=6 -Djava.io.tmpdir=/opt/mach5/mesos/work_dir/slaves/3c846bae-ce30-4a97-93ee-9fef4497ccb6-S79686/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/60a09f6f-6524-46f9-9f4e-833b4510b0e2/runs/617be5de-e68f-40c0-9594-f080c648faad/testoutput/test-support/jtreg_open_test_hotspot_jtreg_tier1_runtime/tmp -Djava.library.path=/opt/mach5/mesos/work_dir/jib-master/install/jdk-17+21-1854/linux-aarch64-debug.test/hotspot/jtreg/native -XX:+UnlockDiagnosticVMOptions -XX:+UseBiasedLocking -XX:GuaranteedSafepointInterval=10 -XX:+HandshakeALot -XX:+SafepointALot -XX:BiasedLockingDecayTime=100000000 -XX:BiasedLockingBulkRebiasThreshold=1000000 -XX:BiasedLockingBulkRevokeThreshold=1000000 com.sun.javatest.regtest.agent.MainWrapper /opt/mach5/mesos/work_dir/slaves/3c846bae-ce30-4a97-93ee-9fef4497ccb6-S79686/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/60a09f6f-6524-46f9-9f4e-833b4510b0e2/runs/617be5de-e68f-40c0-9594-f080c648faad/testoutput/test-support/jtreg_open_test_hotspot_jtreg_tier1_runtime/runtime/handshake/HandshakeDirectTest.d/main.1.jta

Host: AArch64, 8 cores, 62G, Oracle Linux Server release 8.3
Time: Wed May  5 11:11:50 2021 UTC elapsed time: 4.380574 seconds (0d 0h 0m 4s)

---------------  T H R E A D  ---------------

Current thread (0x0000ffff00006800):  JavaThread ""0"" [_thread_in_vm, id=434194, stack(0x0000ffff17500000,0x0000ffff17700000)] _threads_hazard_ptr=0x0000fffe78008100, _nested_threads_hazard_ptr_cnt=0

Stack: [0x0000ffff17500000,0x0000ffff17700000],  sp=0x0000ffff176fdc50,  free space=2039k
Native frames: (J=compiled Java code, j=interpreted, Vv=VM code, C=native code)
V  [libjvm.so+0xd042fc]  HandshakeState::try_process(HandshakeOperation*)+0x24c
V  [libjvm.so+0xd04830]  Handshake::execute(HandshakeClosure*, JavaThread*)+0x1b0
V  [libjvm.so+0x65d610]  BiasedLocking::single_revoke_with_handshake(Handle, JavaThread*, JavaThread*)+0x120
V  [libjvm.so+0x65f018]  BiasedLocking::revoke(JavaThread*, Handle)+0x2c8
V  [libjvm.so+0x16cc8d8]  ObjectSynchronizer::enter(Handle, BasicLock*, JavaThread*)+0x288
V  [libjvm.so+0x15b9ef8]  SharedRuntime::monitor_enter_helper(oopDesc*, BasicLock*, JavaThread*)+0x208
V  [libjvm.so+0x15ba1ac]  SharedRuntime::complete_monitor_locking_C(oopDesc*, BasicLock*, JavaThread*)+0x28

Java frames: (J=compiled Java code, j=interpreted, Vv=VM code)
v  ~RuntimeStub::_complete_monitor_locking_Java
J 174% c2 HandshakeDirectTest.run()V (185 bytes) @ 0x0000ffff65246464 [0x0000ffff652458c0+0x0000000000000ba4]
j  java.lang.Thread.run()V+11 java.base@17-ea
v  ~StubRoutines::call_stub
Register to memory mapping:
",,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8268465,,,JDK-8268275,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2spc3:",9223372036854775807,b26,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,Verified,,"2021-05-11 11:26;mseledtsov;ILW = HLH = P2;;;","2021-06-03 17:18;dcubed;[~rehn] - I wonder if this bug you're fixing is related to this one:

    JDK-8266593 vmTestbase/nsk/jvmti/PopFrame/popframe011 fails with ""assert(java_thread == _state->get_thread()) failed: Must be""

that I see with my updated popframe011 stress test. See:

    JDK-8266130 convert Thread-SMR stress tests from counter based to time based;;;","2021-06-09 00:22;roboduke;Changeset: 2bfd708e
Author:    Robbin Ehn <rehn@openjdk.org>
Date:      2021-06-09 07:21:37 +0000
URL:       https://git.openjdk.java.net/jdk/commit/2bfd708e9276bd9a6d4cf493e1af3a8e5b8026d2
;;;","2021-06-11 00:39;rehn;[~dcubed] I don't think so.;;;","2021-06-11 09:48;dcubed;[~rehn] - Did you mean me? Or did you really mean [~dholmes]?;;;","2021-06-14 00:00;rehn;You:);;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,
Change default macOS min version for aarch64 to 11.0,JDK-8266554,5048811,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,jvos,kcr,kcr,2021-05-05 05:05,2023-01-12 10:43,2023-10-01 09:57,2021-05-18 23:14,8,jfx11,,,,,,jfx11.0.12,javafx,,0,noreg-build,,,,,,,,,,,,,"The minimum macOS version on which JavaFX will run is currently set to 10.10:

https://github.com/openjdk/jfx11u/blob/debbd07dfe122f550e6770cfe34b4bf1e7eaff05/buildSrc/mac.gradle#L54

defineProperty(""MACOSX_MIN_VERSION"", ""10.10"");

macOS / aarch64 (aka arm64) requires macOS 11.0 as a minimum in order to run.

NOTE: This issue was cloned from JDK-8265031. Rather than backport that issue to FX 11 and FX 8 in its entirety, we will only update the minimum macOS version for aarch64 builds (to 11.0). For compatibility reasons, we will leave the default macOS version at 10.10 for the older releases of JavaFX.",,,,,,,,,,,JDK-8270034,,,,,,,,,,,,,,,JDK-8265031,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,os_x,,,,,"0|i2spar:",9223372036854775807,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@1556b386,,,,,,,,,"2021-05-18 23:14;roboduke;Changeset: 8805e436
Author:    Johan Vos <jvos@openjdk.org>
Date:      2021-05-19 06:13:35 +0000
URL:       https://git.openjdk.java.net/jfx11u/commit/8805e436c9eb8a622a4ec7b6f2a168ec5b713d81
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Technical corrections to java/util/random/package-info.java,JDK-8266552,5048808,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,jlaskey,jlaskey,jlaskey,2021-05-05 04:44,2021-05-19 18:05,2023-10-01 09:57,2021-05-13 06:44,17,,,,,,,17,core-libs,,0,,,,,,,,,,,,,,The author (Guy Steele) of https://bugs.openjdk.java.net/browse/JDK-8193209 and others have post-integration reviewed commentary (javadoc) and have submitted technical corrections.,,,,,,,,,,,,,,,,,,,,,,,,JDK-8266553,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2spa3:",9223372036854775807,b23,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@38ded199,,,,,,,,,"2021-05-13 06:44;roboduke;Changeset: b4371e9b
Author:    Jim Laskey <jlaskey@openjdk.org>
Date:      2021-05-13 13:42:53 +0000
URL:       https://git.openjdk.java.net/jdk/commit/b4371e9bcaa1c8aa394b5eca409c5afc669cc146
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
8261169 broke Harfbuzz build with gcc 7 and 8,JDK-8266545,5048784,Bug,Resolved,JDK,JDK,software,duke,,,P2,Fixed,stuefe,stuefe,stuefe,2021-05-05 00:37,2022-05-16 10:24,2023-10-01 09:57,2021-05-06 02:23,11,17,,,,,,17,client-libs,,0,azul-interest,harfbuzz,jdk11u-fix-request,jdk11u-fix-yes,jdk13u-fix-request,jdk13u-fix-yes,jdk15u-fix-request,jdk15u-fix-yes,oraclejdk-na,,,,,"Harfbuzz upgrade broke Linux x64 build on older gccs.

In file included from /shared/projects/openjdk/jdk-jdk/source/src/java.desktop/share/native/libharfbuzz/hb-ot-shape-complex-use.cc:33:0:
hb-ot-shape-complex-use-machine.rl: In instantiation of 'machine_index_t<Iter>::machine_index_t(const machine_index_t<Iter>&) [with Iter = hb_zip_iter_t<hb_iota_iter_t<unsigned int, unsigned int>, hb_filter_iter_t<hb_filter_iter_t<hb_zip_iter_t<hb_iota_iter_t<unsigned int, un
signed int>, hb_array_t<hb_glyph_info_t> >, find_syllables_use(hb_buffer_t*)::<lambda(const hb_glyph_info_t&)>, const<unnamed struct>&, 0>, find_syllables_use(hb_buffer_t*)::<lambda(hb_pair_t<unsigned int, const hb_glyph_info_t&>)>, const<unnamed struct>&, 0> >]':
hb-ot-shape-complex-use-machine.rl:249:11:   required from here    
hb-ot-shape-complex-use-machine.rl:194:9: error: base class 'struct hb_iter_with_fallback_t<machine_index_t<hb_zip_iter_t<hb_iota_iter_t<unsigned int, unsigned int>, hb_filter_iter_t<hb_filter_iter_t<hb_zip_iter_t<hb_iota_iter_t<unsigned int, unsigned int>, hb_array_t<hb_glyp
h_info_t> >, find_syllables_use(hb_buffer_t*)::<lambda(const hb_glyph_info_t&)>, const<unnamed struct>&, 0>, find_syllables_use(hb_buffer_t*)::<lambda(hb_pair_t<unsigned int, const hb_glyph_info_t&>)>, const<unnamed struct>&, 0> > >, hb_pair_t<unsigned int, hb_pair_t<unsigned
 int, hb_glyph_info_t&> > >' should be explicitly initialized in the copy constructor [-Werror=extra]
cc1plus: error: unrecognized command line option '-Wno-class-memaccess' [-Werror]
cc1plus: all warnings being treated as errors                   
make[3]: *** [lib/Awt2dLibraries.gmk:516: /shared/projects/openjdk/jdk-jdk/output-fastdebug/support/native/java.desktop/libfontmanager/hb-ot-shape-complex-use.o] Error 1
make[3]: *** Waiting for unfinished jobs....                     
make[2]: *** [make/Main.gmk:202: java.desktop-libs] Error 2      
",,,,,,,,,,,JDK-8278996,JDK-8284417,JDK-8283557,JDK-8278058,,,,,,,,,,,,,,,,,,,,,,,JDK-8261169,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2sp4r:",9223372036854775807,b22,,,,,,,,,,,,"2021-05-05 00:40;stuefe;Made this P1, since Linux x64 is important and there is no easy workaround since AFAIK we do not touch the harfbuzz sources, or?;;;","2021-05-05 05:06;stuefe;Reducing the priority since I see that Oracle does not support gcc < 9 it seems :( 
;;;","2021-05-05 05:07;stuefe;https://github.com/openjdk/jdk/pull/3873;;;","2021-05-06 02:23;roboduke;Changeset: a86ee9b3
Author:    Thomas Stuefe <stuefe@openjdk.org>
Date:      2021-05-06 09:22:32 +0000
URL:       https://git.openjdk.java.net/jdk/commit/a86ee9b3f370b59caea2ae78169d13498560cd8e
;;;","2021-12-01 02:02;dcherepanov;Fix request (15u)
request to backport to 15u. RFR: https://github.com/openjdk/jdk15u-dev/pull/149;;;","2021-12-19 10:29;omikhaltcova;Fix request (13u) 

I'd like to backport this fix to jdk13u as a follow-up to JDK-8261169. 
The original patch applied manually because the patched file is in another directory. 

RFR: https://github.com/openjdk/jdk13u-dev/pull/307;;;","2021-12-19 10:29;roboduke;A pull request was submitted for review.

URL: https://git.openjdk.java.net/jdk13u-dev/pull/307
Date: 2021-12-19 18:24:57 +0000
;;;","2022-03-23 02:13;mbaesken;Fix request (11u)

I'd like to backport this fix to jdk11u as a follow-up to JDK-8261169. This is needed to build with recent gcc versions (e.g. 7 or 8).
The 13u patch applies cleanly.
https://github.com/openjdk/jdk11u-dev/pull/940;;;","2022-03-23 02:18;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk11u-dev/pull/939
Date: 2022-03-23 09:05:12 +0000;;;","2022-03-23 02:28;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk11u-dev/pull/940
Date: 2022-03-23 09:21:52 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,
Remove broken -XX:-UseLoopSafepoints flag,JDK-8266542,5048780,Bug,Resolved,JDK,JDK,software,duke,,,P5,Fixed,thartmann,thartmann,thartmann,2021-05-05 00:00,2021-06-02 01:42,2023-10-01 09:57,2021-05-06 00:36,11,17,,,,,,17,hotspot,,0,c2,hs-comp-triaged,oracle-triage-11,oracle-triage-17,,,,,,,,,,"Simply running java -XX:-UseLoopSafepoints already crashes the VM:

# A fatal error has been detected by the Java Runtime Environment:
#
#  Internal Error (/oracle/jdk/open/src/hotspot/share/opto/cfgnode.cpp:1893), pid=1368883, tid=1368900
#  assert(r->in(0) == __null || !r->in(0)->is_Root()) failed: not a specially hidden merge
#
# JRE version: Java(TM) SE Runtime Environment (17.0) (fastdebug build 17-internal+0-LTS-2021-05-04-1333554.tobias...)
# Java VM: Java HotSpot(TM) 64-Bit Server VM (fastdebug 17-internal+0-LTS-2021-05-04-1333554.tobias..., mixed mode, tiered, compressed oops, compressed class ptrs, g1 gc, linux-amd64)
# Problematic frame:
# V  [libjvm.so+0x8b1d54]  PhiNode::Ideal(PhaseGVN*, bool)+0x6e4

Running more sophisticated testing fails with all kinds of different asserts and crashes.

JDK-6232281 made an attempt of fixing some simple cases.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-6232281,,,,JDK-8266618,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2sp3v:",9223372036854775807,b22,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2021-05-05 00:04;thartmann;ILW = Same as JDK-6232281 = P5;;;","2021-05-06 00:36;roboduke;Changeset: 22ca62c2
Author:    Tobias Hartmann <thartmann@openjdk.org>
Date:      2021-05-06 07:36:28 +0000
URL:       https://git.openjdk.java.net/jdk/commit/22ca62c2cb61940dd7b1028925cd651ffdf80690
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
[TreeView]: Change.getRemoved() contains null item when deselecting a TreeItem,JDK-8266539,5048776,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,mstrauss,arapte,arapte,2021-05-04 23:30,2021-06-01 15:14,2023-10-01 09:57,2021-05-17 06:56,8,jfx16,,,,,,jfx17,javafx,,0,SelectionModel,TreeView,,,,,,,,,,,,"When deselecting a TreeItem, the Change.getRemoved() contains a null entry. Instead it should contain only the item that was deselected.

Steps:
1. Run the attached test program
2. Select child item of root
3.Ctrl/Command click the same item to deselect it
-> Observe the NPE that occurs because Change.getRemoved() contains a null entry

The issue was also discussed in the review of JDK-8189354 at PR#480.
The PR#480 had a change in MultipleModelSelectionModelBase.java that could fix this issue but it was reverted to limit the scope PR#480
The reverted commit: https://github.com/openjdk/jfx/pull/480/commits/923f8d74039780065b02ac23d605cc010fde43b3",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8189228,,,,,,,,"2021-05-04 23:25;arapte;TreeViewNullItemInGetRemoved.java;https://bugs.openjdk.org/secure/attachment/94511/TreeViewNullItemInGetRemoved.java",,,,,,,,,,,,,,,,,,,,,,,,,"0|i2sp2z:",9223372036854775807,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@67282485,,,,,,,,,"2021-05-17 06:56;roboduke;Changeset: f236a7dc
Author:    Michael Strauß <mstrauss@openjdk.org>
Committer: Ambarish Rapte <arapte@openjdk.org>
Date:      2021-05-17 12:55:19 +0000
URL:       https://git.openjdk.java.net/jfx/commit/f236a7dcb231c0b87d4499158adc500ed06e5178
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Provide a variant of os::iso8601_time which works with arbitrary timestamps,JDK-8266536,5048772,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,stuefe,stuefe,stuefe,2021-05-04 21:29,2021-05-12 17:31,2023-10-01 09:57,2021-05-07 06:22,17,,,,,,,17,hotspot,,0,,,,,,,,,,,,,,"We have os::iso8601_time(), which gives an ISO8601 timestamp of the current time. It would be very useful to have a second variant which can be fed an arbitrary numerical timestamp.

This is useful in the context of making asynchronous UL logging cheaper (see JDK-8229517)",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8266942,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2sp23:",9223372036854775807,b22,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,,,"2021-05-07 06:21;roboduke;Changeset: 94c6177f
Author:    Thomas Stuefe <stuefe@openjdk.org>
Date:      2021-05-07 09:47:46 +0000
URL:       https://git.openjdk.java.net/jdk/commit/94c6177f246fc569b416f85f1411f7fe031f7aaf
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
RandomTestCoverage.java failing due to API removal,JDK-8266527,5048761,Bug,Resolved,JDK,JDK,software,duke,,,P2,Fixed,jlaskey,jlaskey,jlaskey,2021-05-04 14:01,2021-05-10 10:35,2023-10-01 09:57,2021-05-04 14:19,17,,,,,,,17,core-libs,,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8265279,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2sozn:",9223372036854775807,b21,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@38ded199,,,,,,,,,"2021-05-04 14:19;roboduke;Changeset: f00b70e2
Author:    Jim Laskey <jlaskey@openjdk.org>
Date:      2021-05-04 21:18:48 +0000
URL:       https://git.openjdk.java.net/jdk/commit/f00b70e2caaa9c2bb49bb9eae49a29ffbbf87af8
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Shenandoah: Shenandoah LRB calls wrong runtime barrier on aarch64,JDK-8266522,5048748,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,zgu,zgu,zgu,2021-05-04 10:42,2021-05-10 10:36,2023-10-01 09:57,2021-05-05 05:15,16,17,,,,,,17,hotspot,,0,gc-shenandoah,redhat-interest,,,,,,,,,,,,"Shsenandoah LRB calls ShenandoahRuntime::load_reference_barrier_weak() on phantom access, which is wrong.

Should call ShenandoahRuntime::load_reference_barrier_phantom() instead.
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2sowr:",9223372036854775807,b21,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6b00f96c,,,,,,,,,"2021-05-05 05:15;roboduke;Changeset: 71d0858b
Author:    Zhengyu Gu <zgu@openjdk.org>
Date:      2021-05-05 12:14:12 +0000
URL:       https://git.openjdk.java.net/jdk/commit/71d0858b3216e6996e217707678680c602b4404d
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Refactor and expand scatter/gather tests,JDK-8266518,5048743,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,psandoz,psandoz,psandoz,2021-05-04 09:33,2021-07-15 10:09,2023-10-01 09:57,2021-06-18 07:23,17,,,,,,,17,hotspot,,0,hs-comp-triaged,noreg-self,oracle-triage-17,,,,,,,,,,,"Refactor scatter/gather tests to be included in the load/store test classes and expand to support access between `ShortVector` and and `char[]`, and access between `ByteVector` and `boolean[]`.   ",,,,,,,,,,,JDK-8269058,JDK-8270597,,,,,,,,,,JDK-8266317,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2sovn:",9223372036854775807,b28,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2021-06-18 07:23;roboduke;Changeset: dab00ee5
Author:    Paul Sandoz <psandoz@openjdk.org>
Date:      2021-06-18 14:22:16 +0000
URL:       https://git.openjdk.java.net/jdk17/commit/dab00ee59b73bcd5b8632d127b3d0a324e48e4e5
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Nimbus JTree default tree cell renderer does not use selected text color,JDK-8266510,5048736,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,trebari,alans,alans,2021-05-04 08:44,2021-11-10 07:30,2023-10-01 09:57,2021-07-27 21:30,16,17,,,,,,18,client-libs,,0,jdk17u-fix-request,jdk17u-fix-yes,regression,regression_8249674,sn_93,sn_94,sn_95,sn_96,sn_97,sn_98,,,,"When a JTree node is selected, the text should be painted using the selected text color (white), matching the color of the expansion control. Instead, it is painted using the standard color (black).

This bug is easily seen in SwingSet2.
The behavior is correct in JDK 9 through 15, incorrect in 16 and 17.

Observation: although the cell renderer correctly configures the foreground color, SynthLabelUI overrides it because the color is a UIResource.",,,,,,,,,,,JDK-8276717,JDK-8276872,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8249674,JDK-8271315,,,"2021-07-19 00:08;trebari;NimbusPropertiesPersists.java;https://bugs.openjdk.org/secure/attachment/95543/NimbusPropertiesPersists.java","2021-07-19 00:08;trebari;NimbusPropertiesTest.java;https://bugs.openjdk.org/secure/attachment/95544/NimbusPropertiesTest.java",,,,,,,,,,,,,,,,,16,,,,,,,"0|i2sou3:",9223372036854775807,b08,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@568a5b31,,,,,,,,,"2021-05-04 21:18;psadhukhan;Seems to be regression of JDK-8249674;;;","2021-06-16 15:10;vdyakov;[~trebari] is it a fix still in progress for 17? 18?;;;","2021-06-16 22:16;trebari;[~vdyakov] if it is not a must fix for 17 we can retarget it to 18.;;;","2021-07-27 21:30;roboduke;Changeset: ecd44556
Author:    Tejpal Rebari <trebari@openjdk.org>
Date:      2021-07-28 04:29:27 +0000
URL:       https://git.openjdk.java.net/jdk/commit/ecd445562f8355704a041f9eca0e87dc85a7f44c
;;;","2021-11-03 14:38;akasko;Fix request (17u)

This is a clean backport of the JTree nodes text color fix, I intend to follow up with backporting JDK-8271315.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
[aix] Treat mapping attempt too close to BRK as a mapping error,JDK-8266506,5048732,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,stuefe,stuefe,stuefe,2021-05-04 08:25,2021-05-10 10:36,2023-10-01 09:57,2021-05-05 04:58,11,16,17,,,,,17,hotspot,,0,oraclejdk-na,,,,,,,,,,,,,"On AIX, in os::attempt_reserve_memory_at(), if the user specified a wish address too close to the BRK segment, we silently ignore the wish address and just map anywhere.

This is not the right behavior since the normal behavior when failing to map to a wish address is to return NULL (see JDK-8266419). Therefore we should return NULL in these cases instead.

This is a day zero bug.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8266419,JDK-8266222,,,,,,,,,,,,,,,,,,,,,,,aix,,,,,"0|i2sot7:",9223372036854775807,b21,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,,,"2021-05-05 04:57;roboduke;Changeset: 0ac84d18
Author:    Thomas Stuefe <stuefe@openjdk.org>
Date:      2021-05-05 11:57:20 +0000
URL:       https://git.openjdk.java.net/jdk/commit/0ac84d18133857a75769e2bb3ac2c2d2f9508191
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Delete dead code in aarch64.ad,JDK-8266499,5048725,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,aph,aph,aph,2021-05-04 07:10,2021-06-02 01:40,2023-10-01 09:57,2021-05-05 05:17,17,,,,,,,17,hotspot,,0,cleanup,hs-comp-triaged,oracle-triage-11,oracle-triage-17,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,aarch64,,,,,,,,,generic,,,,,"0|i2sorn:",9223372036854775807,b21,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2021-05-05 05:17;roboduke;Changeset: ef0f6930
Author:    Andrew Haley <aph@openjdk.org>
Date:      2021-05-05 12:17:01 +0000
URL:       https://git.openjdk.java.net/jdk/commit/ef0f693065eddd5c86b9e0fc52d57eafb0b1dc50
;;;","2021-05-05 12:44;dcubed;Moving from hotspot/runtime -> hotspot/compiler.
AD files are a C2 compiler thing.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
 WBIsKlassAliveClosure.do_klass() fails for hidden classes,JDK-8266496,5048719,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,hseigel,hseigel,hseigel,2021-05-04 05:26,2021-05-12 17:29,2023-10-01 09:57,2021-05-06 05:26,17,,,,,,,17,hotspot,,0,,,,,,,,,,,,,,"The WBIsKlassAliveClosure.do_klass() function in whitebox.cpp doesn't work for hidden classes because it compares the specified class's name with loaded classes names.  But, the JVM has mangled the hidden class's name.  So, the comparison always fails.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2soqb:",9223372036854775807,b22,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,,,"2021-05-04 05:32;hseigel;The JVM appends a '+' following by a hex address to the names of hidden classes when loading them.  One possible fix would be for do_klass() to truncate the hidden class's name at the first (or last?) '+' before doing the string comparison.  This would work except when the pre-mangled hidden class name contained a '+'.;;;","2021-05-04 11:10;mseledtsov;ILW = MML = P4;;;","2021-05-06 05:26;roboduke;Changeset: eb3b96d8
Author:    Harold Seigel <hseigel@openjdk.org>
Date:      2021-05-06 12:25:53 +0000
URL:       https://git.openjdk.java.net/jdk/commit/eb3b96d86b7fd21d444bb09c032b424e61bc5d6f
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Enable G1 to use large pages on Windows when region size is larger than 2m,JDK-8266489,5048709,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,sjohanss,sjohanss,sjohanss,2021-05-04 03:30,2021-05-24 16:38,2023-10-01 09:57,2021-05-17 01:33,17,,,,,,,17,hotspot,,0,gc-g1,,,,,,,,,,,,,"The code handling large pages reservation on Windows currently fall back to using normal pages if the alignment is larger than the large page size. For G1 this is a problem if the region size is larger than 2m (on x64 where the large page size is 2m). In those cases the Java heap will not be backed with large pages. 

We should change reserve_memory_special on Windows to work similar to Linux where we always ensure the alignment, so that large pages can be used even it the alignment is larger than the page size.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2soo3:",9223372036854775807,b23,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6b00f96c,,,,,,,,,"2021-05-17 01:32;roboduke;Changeset: 7b736ec9
Author:    Stefan Johansson <sjohanss@openjdk.org>
Date:      2021-05-17 08:32:30 +0000
URL:       https://git.openjdk.java.net/jdk/commit/7b736ec9323a508cce164266b8e9a702527f3361
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Implicit null check optimization does not update control of hoisted memory operation,JDK-8266480,5048697,Bug,Closed,JDK,JDK,software,duke,,,P2,Fixed,thartmann,chagedorn,chagedorn,2021-05-04 00:35,2021-08-09 14:13,2023-10-01 09:57,2021-05-19 00:28,11,17,,,,,,17,hotspot,,0,c2,hs-comp-triaged,javafuzzer,jdk11u-fix-request,jdk11u-fix-yes,oracle-triage-11,oracle-triage-17,,,,,,,"The attached fuzzer test fails with the following assert added by JDK-8263227.

To reproduce:
java Reduced.java
java Test.java
java -Xcomp -XX:CompileOnly=Test Test.java
java -Xcomp -XX:-TieredCompilation -XX:CompileOnly=Test Test.java

#
# A fatal error has been detected by the Java Runtime Environment:
#
#  Internal Error (/opt/mach5/mesos/work_dir/slaves/3c846bae-ce30-4a97-93ee-9fef4497ccb6-S78979/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/0f80cbd2-a728-42dc-9216-fe14980e7b24/runs/2a62fb6d-bc5a-4195-b939-5f5cb5c45844/workspace/open/src/hotspot/share/opto/block.cpp:1252), pid=13693, tid=13712
#  assert(n->is_Root() || n->is_Region() || n->is_Phi() || n->is_MachMerge() || def_block->dominates(block)) failed: uses must be dominated by definitions
#
# JRE version: Java(TM) SE Runtime Environment (17.0+20) (fastdebug build 17-ea+20-LTS-1743)
# Java VM: Java HotSpot(TM) 64-Bit Server VM (fastdebug 17-ea+20-LTS-1743, mixed mode, sharing, tiered, compressed oops, compressed class ptrs, g1 gc, linux-amd64)
# Problematic frame:
# V  [libjvm.so+0x6c9939]  PhaseCFG::verify() const+0x1e9
............
Command Line: -Xmx1G Test
............
Current thread (0x00007fb620089d20):  JavaThread ""C2 CompilerThread1"" daemon [_thread_in_native, id=13712, stack(0x00007fb651cf4000,0x00007fb651df5000)]


Current CompileTask:
C2:    435   40 % !   4       Test::mainTest @ 229 (504 bytes)

Stack: [0x00007fb651cf4000,0x00007fb651df5000],  sp=0x00007fb651df0250,  free space=1008k
Native frames: (J=compiled Java code, j=interpreted, Vv=VM code, C=native code)
V  [libjvm.so+0x6c9939]  PhaseCFG::verify() const+0x1e9
V  [libjvm.so+0xa315bf]  Compile::Code_Gen()+0x2af
V  [libjvm.so+0xa3d727]  Compile::Compile(ciEnv*, ciMethod*, int, bool, bool, bool, bool, DirectiveSet*)+0x2337
V  [libjvm.so+0x85f6ea]  C2Compiler::compile_method(ciEnv*, ciMethod*, int, bool, DirectiveSet*)+0x1ea
V  [libjvm.so+0xa4d7f9]  CompileBroker::invoke_compiler_on_method(CompileTask*)+0xfb9
V  [libjvm.so+0xa4e568]  CompileBroker::compiler_thread_loop()+0x5a8
V  [libjvm.so+0x18b5021]  JavaThread::thread_main_inner()+0x271
V  [libjvm.so+0x18bc950]  Thread::call_run()+0x100
V  [libjvm.so+0x159388e]  thread_native_entry(Thread*)+0x10e",,,,,,,,,,,JDK-8269382,JDK-8268024,,,,,,,,,,,,,,,,,,,,,JDK-8268369,,,,JDK-8263227,,,,"2021-05-04 00:27;chagedorn;FuzzerUtils.java;https://bugs.openjdk.org/secure/attachment/94497/FuzzerUtils.java","2021-05-06 23:52;thartmann;MainClass.java;https://bugs.openjdk.org/secure/attachment/94540/MainClass.java","2021-05-04 00:34;chagedorn;Reduced.java;https://bugs.openjdk.org/secure/attachment/94496/Reduced.java","2021-05-04 00:27;chagedorn;Test.java;https://bugs.openjdk.org/secure/attachment/94498/Test.java","2021-05-04 00:27;chagedorn;hs_err_pid13693.log;https://bugs.openjdk.org/secure/attachment/94499/hs_err_pid13693.log",,,,,,,,,,,,,,,,,,,,,"0|i2solf:",9223372036854775807,b23,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,Verified,,"2021-05-06 23:52;thartmann;Attached another test (MainClass.java) that reproduces this issue.;;;","2021-05-19 00:28;roboduke;Changeset: c2b50f93
Author:    Tobias Hartmann <thartmann@openjdk.org>
Date:      2021-05-19 07:27:30 +0000
URL:       https://git.openjdk.java.net/jdk/commit/c2b50f93ac36cdfd96d3ed09ec80ee5255a10200
;;;","2021-06-24 12:55;mdoerr;Fix Request (11u)
Should get backported for parity with 11.0.13-oracle. Applies cleanly.;;;","2021-08-09 14:13;epavlova;Regression test compiler/c2/TestImplicitNullCheckDominance.java passed in JDK17 ATR;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
javapath/java.exe strips double quotes from command line args,JDK-8266473,5048591,Bug,Closed,JDK,JDK,software,duke,,,P3,Fixed,billyh,webbuggrp,webbuggrp,2021-05-02 15:44,2022-11-04 01:07,2023-10-01 09:57,2021-06-21 10:23,11,15,16,17,,,,17,install,,0,dcsad,jdk11u-na,reproducer-yes,sn_95,webbug,,,,,,,,,"A DESCRIPTION OF THE PROBLEM :
When installing Java 16.0.1 at least two java.exe files are installed. On my machine:

1. C:\Program Files\Java\jdk-16.0.1\bin\java.exe
2. C:\Program Files\Common Files\Oracle\Java\javapath\java.exe

And #2 is the one linked to the `java` command on the system.

These two java.exe behave differently with respect to double quoted command line arguments.

#1 Keeps the double quotes
#2 Strips the double quotes


STEPS TO FOLLOW TO REPRODUCE THE PROBLEM :
Here's a reproduction:

    public class PrintArgs {
        public static void main(String [] args) {
            for (String arg: args) {
                System.out.println(arg);
            }
        }
    }

Running this using the installed java (which uses #2 above):

    PS C:\Program Files\Java\jdk-16.0.1\bin> java PrintArgs '\""bar\""'
    bar


Running it using #1:

    PS C:\Program Files\Java\jdk-16.0.1\bin> .\java.exe PrintArgs '\""bar\""'
    ""bar""



EXPECTED VERSUS ACTUAL BEHAVIOR :
EXPECTED -
Should print ""bar"" (with the double quotes intact).
ACTUAL -
Prints bar (double quotes stripped).

---------- BEGIN SOURCE ----------
    public class PrintArgs {
        public static void main(String [] args) {
            for (String arg: args) {
                System.out.println(arg);
            }
        }
    }

---------- END SOURCE ----------

CUSTOMER SUBMITTED WORKAROUND :
I have found no workaround what so ever. I'd be super happy to know of one.

FREQUENCY : always


",,,,,,,,,,,JDK-8269101,JDK-8270774,JDK-8268979,,,,,,,,,,,,,,,,,,,,JDK-8296383,,,,,,,,"2021-05-03 22:28;adev;PrintArgs.java;https://bugs.openjdk.org/secure/attachment/94493/PrintArgs.java",,,,,,,,,,,x86_64,,,,,,,,,windows_10,,,,,"0|i2snxv:",9223372036854775807,b28,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6d4c575e,,,,,,,Verified,,"2021-05-03 22:27;adev;The issue is reproducible with JDK 11 too. After installing JDK binaries, JDK is installed at two different locations 
1. C:\Program Files\Java\jdk-16.0.1\bin\java.exe
2. C:\Program Files\Common Files\Oracle\Java\javapath\java.exe 

2nd one being the link to the `java` command on the system. 
However both behave differently when passed with a command line argument.

Run the reproducer with-
 .\java.exe PrintArgs '\""bar\""' 

#1 gives ""bar""
#2 gives bar;;;","2021-05-04 21:45;pnarayanaswa;Additional Information from submitter:
===========================
A workaround is to provide the arguments via a file.

PS C:\Users\Public\javaargs> type args.txt
-Dfoo.bar=xs PrintArgs 1 2 3 ""\""dude\""""
PS C:\Users\Public\javaargs> java '@args.txt'
1
2
3
""dude""
PS C:\Users\Public\javaargs> java -version
java version ""16.0.1"" 2021-04-20
Java(TM) SE Runtime Environment (build 16.0.1+9-24)
Java HotSpot(TM) 64-Bit Server VM (build 16.0.1+9-24, mixed mode, sharing)
PS C:\Users\Public\javaargs> get-command java

CommandType     Name                                               Version    Source
-----------     ----                                               -------    ------
Application     java.exe                                           16.0.1.0   C:\Program Files\Common Files\Oracle\Java\javapath\java.exe


PS C:\Users\Public\javaargs>

Only works with JDK9+ so it is not the most convenient workaround.
;;;","2021-05-09 20:49;pnarayanaswa;Additional Information from submitter:
===========================
I was requested to provide some more context about my remark that the workaround was a bit clunky. Does the following make sense?

I run into this issue because a super important feature in a VS Code Extension I maintain relies on that it can start a java program with double quotes in the arguments. For me the workaround will probably suffice. I haven't implemented it yet, but can see no reason it wouldn't.

However, since the workaround relies on a mechanism that is not present pre JDK9, I will have to first check java version and then start the java process in two different ways. I am hoping someone will figure out a workaround where I can keep my code a bit less concerned with which java version is being used.

          ;;;","2022-09-22 05:14;mgaidideev;tested with JDK17 b32;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
[lworld] Enhance javac to consume unified primitive class files generated under the option -XDunifiedValRefClass,JDK-8266466,5048680,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,sadayapalam,sadayapalam,sadayapalam,2021-05-03 20:44,2021-05-24 01:24,2023-10-01 09:57,2021-05-24 01:24,repo-valhalla,,,,,,,repo-valhalla,tools,,0,lw3,lworld,,,,,,,,,,,,"JDK-8265423 added support for generating a unified class file for primitive classes under the option -XDunifiedValRefClass.

While javac can generate such files, it cannot yet consume them. So separate compilation will not work properly. This ticket is to cover these use cases.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8265423,,,,JDK-8267597,,,,,,,,,,,,,,,generic,,,,,,,,,,,,,,"0|i2sohn:",9223372036854775807,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4dca67bd,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
tools/jmod/hashes/HashesTest.java fails: static @Test methods,JDK-8266461,5048669,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,lancea,jjg,jjg,2021-05-03 14:44,2023-02-15 07:44,2023-10-01 09:57,2021-05-14 10:20,17,,,,,,,17,tools,,0,blocks-jtreg-6,jdk11u-fix-request,jdk11u-fix-yes,noreg-self,,,,,,,,,,"Using jtreg 6, TestNG 7.4, tools/jmod/hashes/HashesTest.java fails.

It has static @Test methods. This is no longer accepted by the latest TestNG.",,,,,,,,,,,JDK-8291861,JDK-8290914,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2sof7:",9223372036854775807,b23,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@3da653bd,,,,,,,,,"2021-05-14 10:20;roboduke;Changeset: e90388bc
Author:    Lance Andersen <lancea@openjdk.org>
Date:      2021-05-14 17:19:32 +0000
URL:       https://git.openjdk.java.net/jdk/commit/e90388bc1e7bba92675fa799d9da77aa4d6e1a05
;;;","2022-07-21 01:10;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk11u-dev/pull/1252
Date: 2022-07-21 08:03:18 +0000;;;","2022-07-21 02:56;gdams;Fix request (11u)

I'd like to backport this change as part of the wider effort to bump JDK11u to jtreg 6;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
java.io tests fail on null stream with upgraded jtreg/TestNG,JDK-8266460,5048668,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,lancea,jjg,jjg,2021-05-03 14:37,2023-07-12 12:16,2023-10-01 09:57,2021-05-06 07:19,11,17,,,,,,17,core-libs,,0,blocks-jtreg-6,jdk11u-fix-request,jdk11u-fix-yes,noreg-self,,,,,,,,,,"Various IO tests are failing with jtreg 6 (TestNG 7.4) because of NPEs from null streams.

Here is an example:

test NullWriter.testAppendChar(): failure
java.lang.NullPointerException: Cannot invoke ""java.io.Writer.append(char)"" because ""NullWriter.openWriter"" is null
	at NullWriter.testAppendChar(NullWriter.java:66)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:78)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:133)
	at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:598)
	at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:173)
	at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
	at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:824)
	at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:146)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
	at org.testng.TestRunner.privateRun(TestRunner.java:794)
	at org.testng.TestRunner.run(TestRunner.java:596)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:377)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:371)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:332)
	at org.testng.SuiteRunner.run(SuiteRunner.java:276)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1212)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1134)
	at org.testng.TestNG.runSuites(TestNG.java:1063)
	at org.testng.TestNG.run(TestNG.java:1031)
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:94)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:78)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at com.sun.javatest.regtest.agent.MainActionHelper$AgentVMRunnable.run(MainActionHelper.java:312)
	at java.base/java.lang.Thread.run(Thread.java:831)
test NullWriter.testAppendCharClosed(): failure
org.testng.TestException: 
Expected exception of type class java.io.IOException but got java.lang.NullPointerException: Cannot invoke ""java.io.Writer.append(char)"" because ""NullWriter.closedWriter"" is null
	at org.testng.internal.ExpectedExceptionsHolder.wrongException(ExpectedExceptionsHolder.java:68)
	at org.testng.internal.TestInvoker.considerExceptions(TestInvoker.java:739)
	at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:634)
	at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:173)
	at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
	at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:824)
	at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:146)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
	at org.testng.TestRunner.privateRun(TestRunner.java:794)
	at org.testng.TestRunner.run(TestRunner.java:596)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:377)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:371)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:332)
	at org.testng.SuiteRunner.run(SuiteRunner.java:276)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1212)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1134)
	at org.testng.TestNG.runSuites(TestNG.java:1063)
	at org.testng.TestNG.run(TestNG.java:1031)
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:94)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:78)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at com.sun.javatest.regtest.agent.MainActionHelper$AgentVMRunnable.run(MainActionHelper.java:312)
	at java.base/java.lang.Thread.run(Thread.java:831)
Caused by: java.lang.NullPointerException: Cannot invoke ""java.io.Writer.append(char)"" because ""NullWriter.closedWriter"" is null
	at NullWriter.testAppendCharClosed(NullWriter.java:118)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:78)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:133)
	at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:598)
	... 26 more
test NullWriter.testAppendCharSequence(): failure
java.lang.NullPointerException: Cannot invoke ""java.io.Writer.append(java.lang.CharSequence)"" because ""NullWriter.openWriter"" is null
	at NullWriter.testAppendCharSequence(NullWriter.java:72)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:78)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:133)
	at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:598)
	at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:173)
	at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
	at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:824)
	at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:146)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
	at org.testng.TestRunner.privateRun(TestRunner.java:794)
	at org.testng.TestRunner.run(TestRunner.java:596)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:377)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:371)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:332)
	at org.testng.SuiteRunner.run(SuiteRunner.java:276)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1212)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1134)
	at org.testng.TestNG.runSuites(TestNG.java:1063)
	at org.testng.TestNG.run(TestNG.java:1031)
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:94)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:78)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at com.sun.javatest.regtest.agent.MainActionHelper$AgentVMRunnable.run(MainActionHelper.java:312)
	at java.base/java.lang.Thread.run(Thread.java:831)
test NullWriter.testAppendCharSequenceClosed(): failure
org.testng.TestException: 
Expected exception of type class java.io.IOException but got java.lang.NullPointerException: Cannot invoke ""java.io.Writer.append(java.lang.CharSequence)"" because ""NullWriter.closedWriter"" is null
	at org.testng.internal.ExpectedExceptionsHolder.wrongException(ExpectedExceptionsHolder.java:68)
	at org.testng.internal.TestInvoker.considerExceptions(TestInvoker.java:739)
	at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:634)
	at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:173)
	at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
	at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:824)
	at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:146)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
	at org.testng.TestRunner.privateRun(TestRunner.java:794)
	at org.testng.TestRunner.run(TestRunner.java:596)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:377)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:371)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:332)
	at org.testng.SuiteRunner.run(SuiteRunner.java:276)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1212)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1134)
	at org.testng.TestNG.runSuites(TestNG.java:1063)
	at org.testng.TestNG.run(TestNG.java:1031)
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:94)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:78)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at com.sun.javatest.regtest.agent.MainActionHelper$AgentVMRunnable.run(MainActionHelper.java:312)
	at java.base/java.lang.Thread.run(Thread.java:831)
Caused by: java.lang.NullPointerException: Cannot invoke ""java.io.Writer.append(java.lang.CharSequence)"" because ""NullWriter.closedWriter"" is null
	at NullWriter.testAppendCharSequenceClosed(NullWriter.java:124)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:78)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:133)
	at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:598)
	... 26 more
test NullWriter.testAppendCharSequenceII(): failure
java.lang.NullPointerException: Cannot invoke ""java.io.Writer.append(java.lang.CharSequence, int, int)"" because ""NullWriter.openWriter"" is null
	at NullWriter.testAppendCharSequenceII(NullWriter.java:83)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:78)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:133)
	at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:598)
	at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:173)
	at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
	at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:824)
	at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:146)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
	at org.testng.TestRunner.privateRun(TestRunner.java:794)
	at org.testng.TestRunner.run(TestRunner.java:596)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:377)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:371)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:332)
	at org.testng.SuiteRunner.run(SuiteRunner.java:276)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1212)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1134)
	at org.testng.TestNG.runSuites(TestNG.java:1063)
	at org.testng.TestNG.run(TestNG.java:1031)
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:94)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:78)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at com.sun.javatest.regtest.agent.MainActionHelper$AgentVMRunnable.run(MainActionHelper.java:312)
	at java.base/java.lang.Thread.run(Thread.java:831)
test NullWriter.testAppendCharSequenceIIClosed(): failure
org.testng.TestException: 
Expected exception of type class java.io.IOException but got java.lang.NullPointerException: Cannot invoke ""java.io.Writer.append(java.lang.CharSequence, int, int)"" because ""NullWriter.closedWriter"" is null
	at org.testng.internal.ExpectedExceptionsHolder.wrongException(ExpectedExceptionsHolder.java:68)
	at org.testng.internal.TestInvoker.considerExceptions(TestInvoker.java:739)
	at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:634)
	at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:173)
	at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
	at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:824)
	at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:146)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
	at org.testng.TestRunner.privateRun(TestRunner.java:794)
	at org.testng.TestRunner.run(TestRunner.java:596)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:377)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:371)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:332)
	at org.testng.SuiteRunner.run(SuiteRunner.java:276)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1212)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1134)
	at org.testng.TestNG.runSuites(TestNG.java:1063)
	at org.testng.TestNG.run(TestNG.java:1031)
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:94)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:78)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at com.sun.javatest.regtest.agent.MainActionHelper$AgentVMRunnable.run(MainActionHelper.java:312)
	at java.base/java.lang.Thread.run(Thread.java:831)
Caused by: java.lang.NullPointerException: Cannot invoke ""java.io.Writer.append(java.lang.CharSequence, int, int)"" because ""NullWriter.closedWriter"" is null
	at NullWriter.testAppendCharSequenceIIClosed(NullWriter.java:135)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:78)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:133)
	at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:598)
	... 26 more
test NullWriter.testAppendCharSequenceIINull(): failure
java.lang.NullPointerException: Cannot invoke ""java.io.Writer.append(java.lang.CharSequence, int, int)"" because ""NullWriter.openWriter"" is null
	at NullWriter.testAppendCharSequenceIINull(NullWriter.java:88)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:78)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:133)
	at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:598)
	at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:173)
	at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
	at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:824)
	at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:146)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
	at org.testng.TestRunner.privateRun(TestRunner.java:794)
	at org.testng.TestRunner.run(TestRunner.java:596)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:377)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:371)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:332)
	at org.testng.SuiteRunner.run(SuiteRunner.java:276)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1212)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1134)
	at org.testng.TestNG.runSuites(TestNG.java:1063)
	at org.testng.TestNG.run(TestNG.java:1031)
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:94)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:78)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at com.sun.javatest.regtest.agent.MainActionHelper$AgentVMRunnable.run(MainActionHelper.java:312)
	at java.base/java.lang.Thread.run(Thread.java:831)
test NullWriter.testAppendCharSequenceIINullClosed(): failure
org.testng.TestException: 
Expected exception of type class java.io.IOException but got java.lang.NullPointerException: Cannot invoke ""java.io.Writer.append(java.lang.CharSequence, int, int)"" because ""NullWriter.closedWriter"" is null
	at org.testng.internal.ExpectedExceptionsHolder.wrongException(ExpectedExceptionsHolder.java:68)
	at org.testng.internal.TestInvoker.considerExceptions(TestInvoker.java:739)
	at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:634)
	at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:173)
	at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
	at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:824)
	at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:146)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
	at org.testng.TestRunner.privateRun(TestRunner.java:794)
	at org.testng.TestRunner.run(TestRunner.java:596)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:377)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:371)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:332)
	at org.testng.SuiteRunner.run(SuiteRunner.java:276)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1212)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1134)
	at org.testng.TestNG.runSuites(TestNG.java:1063)
	at org.testng.TestNG.run(TestNG.java:1031)
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:94)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:78)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at com.sun.javatest.regtest.agent.MainActionHelper$AgentVMRunnable.run(MainActionHelper.java:312)
	at java.base/java.lang.Thread.run(Thread.java:831)
Caused by: java.lang.NullPointerException: Cannot invoke ""java.io.Writer.append(java.lang.CharSequence, int, int)"" because ""NullWriter.closedWriter"" is null
	at NullWriter.testAppendCharSequenceIINullClosed(NullWriter.java:140)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:78)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:133)
	at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:598)
	... 26 more
test NullWriter.testAppendCharSequenceNull(): failure
java.lang.NullPointerException: Cannot invoke ""java.io.Writer.append(java.lang.CharSequence)"" because ""NullWriter.openWriter"" is null
	at NullWriter.testAppendCharSequenceNull(NullWriter.java:77)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:78)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:133)
	at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:598)
	at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:173)
	at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
	at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:824)
	at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:146)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
	at org.testng.TestRunner.privateRun(TestRunner.java:794)
	at org.testng.TestRunner.run(TestRunner.java:596)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:377)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:371)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:332)
	at org.testng.SuiteRunner.run(SuiteRunner.java:276)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1212)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1134)
	at org.testng.TestNG.runSuites(TestNG.java:1063)
	at org.testng.TestNG.run(TestNG.java:1031)
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:94)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:78)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at com.sun.javatest.regtest.agent.MainActionHelper$AgentVMRunnable.run(MainActionHelper.java:312)
	at java.base/java.lang.Thread.run(Thread.java:831)
test NullWriter.testAppendCharSequenceNullClosed(): failure
org.testng.TestException: 
Expected exception of type class java.io.IOException but got java.lang.NullPointerException: Cannot invoke ""java.io.Writer.append(java.lang.CharSequence)"" because ""NullWriter.closedWriter"" is null
	at org.testng.internal.ExpectedExceptionsHolder.wrongException(ExpectedExceptionsHolder.java:68)
	at org.testng.internal.TestInvoker.considerExceptions(TestInvoker.java:739)
	at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:634)
	at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:173)
	at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
	at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:824)
	at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:146)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
	at org.testng.TestRunner.privateRun(TestRunner.java:794)
	at org.testng.TestRunner.run(TestRunner.java:596)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:377)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:371)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:332)
	at org.testng.SuiteRunner.run(SuiteRunner.java:276)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1212)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1134)
	at org.testng.TestNG.runSuites(TestNG.java:1063)
	at org.testng.TestNG.run(TestNG.java:1031)
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:94)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:78)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at com.sun.javatest.regtest.agent.MainActionHelper$AgentVMRunnable.run(MainActionHelper.java:312)
	at java.base/java.lang.Thread.run(Thread.java:831)
Caused by: java.lang.NullPointerException: Cannot invoke ""java.io.Writer.append(java.lang.CharSequence)"" because ""NullWriter.closedWriter"" is null
	at NullWriter.testAppendCharSequenceNullClosed(NullWriter.java:129)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:78)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:133)
	at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:598)
	... 26 more
test NullWriter.testFlush(): failure
java.lang.NullPointerException: Cannot invoke ""java.io.Writer.flush()"" because ""NullWriter.openWriter"" is null
	at NullWriter.testFlush(NullWriter.java:93)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:78)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:133)
	at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:598)
	at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:173)
	at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
	at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:824)
	at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:146)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
	at org.testng.TestRunner.privateRun(TestRunner.java:794)
	at org.testng.TestRunner.run(TestRunner.java:596)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:377)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:371)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:332)
	at org.testng.SuiteRunner.run(SuiteRunner.java:276)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1212)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1134)
	at org.testng.TestNG.runSuites(TestNG.java:1063)
	at org.testng.TestNG.run(TestNG.java:1031)
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:94)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:78)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at com.sun.javatest.regtest.agent.MainActionHelper$AgentVMRunnable.run(MainActionHelper.java:312)
	at java.base/java.lang.Thread.run(Thread.java:831)
test NullWriter.testFlushClosed(): failure
org.testng.TestException: 
Expected exception of type class java.io.IOException but got java.lang.NullPointerException: Cannot invoke ""java.io.Writer.flush()"" because ""NullWriter.closedWriter"" is null
	at org.testng.internal.ExpectedExceptionsHolder.wrongException(ExpectedExceptionsHolder.java:68)
	at org.testng.internal.TestInvoker.considerExceptions(TestInvoker.java:739)
	at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:634)
	at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:173)
	at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
	at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:824)
	at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:146)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
	at org.testng.TestRunner.privateRun(TestRunner.java:794)
	at org.testng.TestRunner.run(TestRunner.java:596)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:377)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:371)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:332)
	at org.testng.SuiteRunner.run(SuiteRunner.java:276)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1212)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1134)
	at org.testng.TestNG.runSuites(TestNG.java:1063)
	at org.testng.TestNG.run(TestNG.java:1031)
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:94)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:78)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at com.sun.javatest.regtest.agent.MainActionHelper$AgentVMRunnable.run(MainActionHelper.java:312)
	at java.base/java.lang.Thread.run(Thread.java:831)
Caused by: java.lang.NullPointerException: Cannot invoke ""java.io.Writer.flush()"" because ""NullWriter.closedWriter"" is null
	at NullWriter.testFlushClosed(NullWriter.java:145)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:78)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:133)
	at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:598)
	... 26 more
test NullWriter.testOpen(): failure
java.lang.AssertionError: Writer.nullWriter() returned null expected object to not be null
	at org.testng.Assert.fail(Assert.java:99)
	at org.testng.Assert.assertNotNull(Assert.java:942)
	at NullWriter.testOpen(NullWriter.java:61)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:78)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:133)
	at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:598)
	at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:173)
	at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
	at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:824)
	at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:146)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
	at org.testng.TestRunner.privateRun(TestRunner.java:794)
	at org.testng.TestRunner.run(TestRunner.java:596)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:377)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:371)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:332)
	at org.testng.SuiteRunner.run(SuiteRunner.java:276)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1212)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1134)
	at org.testng.TestNG.runSuites(TestNG.java:1063)
	at org.testng.TestNG.run(TestNG.java:1031)
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:94)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:78)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at com.sun.javatest.regtest.agent.MainActionHelper$AgentVMRunnable.run(MainActionHelper.java:312)
	at java.base/java.lang.Thread.run(Thread.java:831)
test NullWriter.testWrite(): failure
java.lang.NullPointerException: Cannot invoke ""java.io.Writer.write(int)"" because ""NullWriter.openWriter"" is null
	at NullWriter.testWrite(NullWriter.java:98)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:78)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:133)
	at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:598)
	at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:173)
	at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
	at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:824)
	at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:146)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
	at org.testng.TestRunner.privateRun(TestRunner.java:794)
	at org.testng.TestRunner.run(TestRunner.java:596)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:377)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:371)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:332)
	at org.testng.SuiteRunner.run(SuiteRunner.java:276)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1212)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1134)
	at org.testng.TestNG.runSuites(TestNG.java:1063)
	at org.testng.TestNG.run(TestNG.java:1031)
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:94)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:78)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at com.sun.javatest.regtest.agent.MainActionHelper$AgentVMRunnable.run(MainActionHelper.java:312)
	at java.base/java.lang.Thread.run(Thread.java:831)
test NullWriter.testWriteBII(): failure
java.lang.NullPointerException: Cannot invoke ""java.io.Writer.write(char[], int, int)"" because ""NullWriter.openWriter"" is null
	at NullWriter.testWriteBII(NullWriter.java:113)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:78)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:133)
	at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:598)
	at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:173)
	at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
	at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:824)
	at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:146)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
	at org.testng.TestRunner.privateRun(TestRunner.java:794)
	at org.testng.TestRunner.run(TestRunner.java:596)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:377)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:371)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:332)
	at org.testng.SuiteRunner.run(SuiteRunner.java:276)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1212)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1134)
	at org.testng.TestNG.runSuites(TestNG.java:1063)
	at org.testng.TestNG.run(TestNG.java:1031)
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:94)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:78)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at com.sun.javatest.regtest.agent.MainActionHelper$AgentVMRunnable.run(MainActionHelper.java:312)
	at java.base/java.lang.Thread.run(Thread.java:831)
test NullWriter.testWriteBIIClosed(): failure
org.testng.TestException: 
Expected exception of type class java.io.IOException but got java.lang.NullPointerException: Cannot invoke ""java.io.Writer.write(char[], int, int)"" because ""NullWriter.closedWriter"" is null
	at org.testng.internal.ExpectedExceptionsHolder.wrongException(ExpectedExceptionsHolder.java:68)
	at org.testng.internal.TestInvoker.considerExceptions(TestInvoker.java:739)
	at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:634)
	at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:173)
	at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
	at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:824)
	at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:146)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
	at org.testng.TestRunner.privateRun(TestRunner.java:794)
	at org.testng.TestRunner.run(TestRunner.java:596)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:377)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:371)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:332)
	at org.testng.SuiteRunner.run(SuiteRunner.java:276)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1212)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1134)
	at org.testng.TestNG.runSuites(TestNG.java:1063)
	at org.testng.TestNG.run(TestNG.java:1031)
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:94)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:78)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at com.sun.javatest.regtest.agent.MainActionHelper$AgentVMRunnable.run(MainActionHelper.java:312)
	at java.base/java.lang.Thread.run(Thread.java:831)
Caused by: java.lang.NullPointerException: Cannot invoke ""java.io.Writer.write(char[], int, int)"" because ""NullWriter.closedWriter"" is null
	at NullWriter.testWriteBIIClosed(NullWriter.java:165)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:78)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:133)
	at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:598)
	... 26 more
test NullWriter.testWriteClosed(): failure
org.testng.TestException: 
Expected exception of type class java.io.IOException but got java.lang.NullPointerException: Cannot invoke ""java.io.Writer.write(int)"" because ""NullWriter.closedWriter"" is null
	at org.testng.internal.ExpectedExceptionsHolder.wrongException(ExpectedExceptionsHolder.java:68)
	at org.testng.internal.TestInvoker.considerExceptions(TestInvoker.java:739)
	at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:634)
	at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:173)
	at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
	at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:824)
	at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:146)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
	at org.testng.TestRunner.privateRun(TestRunner.java:794)
	at org.testng.TestRunner.run(TestRunner.java:596)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:377)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:371)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:332)
	at org.testng.SuiteRunner.run(SuiteRunner.java:276)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1212)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1134)
	at org.testng.TestNG.runSuites(TestNG.java:1063)
	at org.testng.TestNG.run(TestNG.java:1031)
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:94)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:78)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at com.sun.javatest.regtest.agent.MainActionHelper$AgentVMRunnable.run(MainActionHelper.java:312)
	at java.base/java.lang.Thread.run(Thread.java:831)
Caused by: java.lang.NullPointerException: Cannot invoke ""java.io.Writer.write(int)"" because ""NullWriter.closedWriter"" is null
	at NullWriter.testWriteClosed(NullWriter.java:150)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:78)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:133)
	at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:598)
	... 26 more
test NullWriter.testWriteString(): failure
java.lang.NullPointerException: Cannot invoke ""java.io.Writer.write(String)"" because ""NullWriter.openWriter"" is null
	at NullWriter.testWriteString(NullWriter.java:103)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:78)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:133)
	at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:598)
	at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:173)
	at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
	at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:824)
	at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:146)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
	at org.testng.TestRunner.privateRun(TestRunner.java:794)
	at org.testng.TestRunner.run(TestRunner.java:596)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:377)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:371)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:332)
	at org.testng.SuiteRunner.run(SuiteRunner.java:276)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1212)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1134)
	at org.testng.TestNG.runSuites(TestNG.java:1063)
	at org.testng.TestNG.run(TestNG.java:1031)
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:94)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:78)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at com.sun.javatest.regtest.agent.MainActionHelper$AgentVMRunnable.run(MainActionHelper.java:312)
	at java.base/java.lang.Thread.run(Thread.java:831)
test NullWriter.testWriteStringClosed(): failure
org.testng.TestException: 
Expected exception of type class java.io.IOException but got java.lang.NullPointerException: Cannot invoke ""java.io.Writer.write(String)"" because ""NullWriter.closedWriter"" is null
	at org.testng.internal.ExpectedExceptionsHolder.wrongException(ExpectedExceptionsHolder.java:68)
	at org.testng.internal.TestInvoker.considerExceptions(TestInvoker.java:739)
	at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:634)
	at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:173)
	at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
	at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:824)
	at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:146)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
	at org.testng.TestRunner.privateRun(TestRunner.java:794)
	at org.testng.TestRunner.run(TestRunner.java:596)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:377)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:371)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:332)
	at org.testng.SuiteRunner.run(SuiteRunner.java:276)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1212)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1134)
	at org.testng.TestNG.runSuites(TestNG.java:1063)
	at org.testng.TestNG.run(TestNG.java:1031)
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:94)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:78)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at com.sun.javatest.regtest.agent.MainActionHelper$AgentVMRunnable.run(MainActionHelper.java:312)
	at java.base/java.lang.Thread.run(Thread.java:831)
Caused by: java.lang.NullPointerException: Cannot invoke ""java.io.Writer.write(String)"" because ""NullWriter.closedWriter"" is null
	at NullWriter.testWriteStringClosed(NullWriter.java:155)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:78)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:133)
	at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:598)
	... 26 more
test NullWriter.testWriteStringII(): failure
java.lang.NullPointerException: Cannot invoke ""java.io.Writer.write(String, int, int)"" because ""NullWriter.openWriter"" is null
	at NullWriter.testWriteStringII(NullWriter.java:108)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:78)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:133)
	at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:598)
	at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:173)
	at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
	at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:824)
	at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:146)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
	at org.testng.TestRunner.privateRun(TestRunner.java:794)
	at org.testng.TestRunner.run(TestRunner.java:596)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:377)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:371)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:332)
	at org.testng.SuiteRunner.run(SuiteRunner.java:276)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1212)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1134)
	at org.testng.TestNG.runSuites(TestNG.java:1063)
	at org.testng.TestNG.run(TestNG.java:1031)
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:94)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:78)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at com.sun.javatest.regtest.agent.MainActionHelper$AgentVMRunnable.run(MainActionHelper.java:312)
	at java.base/java.lang.Thread.run(Thread.java:831)
test NullWriter.testWriteStringIIClosed(): failure
org.testng.TestException: 
Expected exception of type class java.io.IOException but got java.lang.NullPointerException: Cannot invoke ""java.io.Writer.write(String, int, int)"" because ""NullWriter.closedWriter"" is null
	at org.testng.internal.ExpectedExceptionsHolder.wrongException(ExpectedExceptionsHolder.java:68)
	at org.testng.internal.TestInvoker.considerExceptions(TestInvoker.java:739)
	at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:634)
	at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:173)
	at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
	at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:824)
	at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:146)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
	at org.testng.TestRunner.privateRun(TestRunner.java:794)
	at org.testng.TestRunner.run(TestRunner.java:596)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:377)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:371)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:332)
	at org.testng.SuiteRunner.run(SuiteRunner.java:276)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1212)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1134)
	at org.testng.TestNG.runSuites(TestNG.java:1063)
	at org.testng.TestNG.run(TestNG.java:1031)
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:94)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:78)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at com.sun.javatest.regtest.agent.MainActionHelper$AgentVMRunnable.run(MainActionHelper.java:312)
	at java.base/java.lang.Thread.run(Thread.java:831)
Caused by: java.lang.NullPointerException: Cannot invoke ""java.io.Writer.write(String, int, int)"" because ""NullWriter.closedWriter"" is null
	at NullWriter.testWriteStringIIClosed(NullWriter.java:160)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:78)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:133)
	at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:598)
	... 26 more

===============================================
java/io/Writer/NullWriter.java
Total tests run: 21, Passes: 0, Failures: 21, Skips: 0
===============================================
System.err
java.lang.Exception: failures: 21
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:96)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:78)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at com.sun.javatest.regtest.agent.MainActionHelper$AgentVMRunnable.run(MainActionHelper.java:312)
	at java.base/java.lang.Thread.run(Thread.java:831)

JavaTest Message: Test threw exception: java.lang.Exception
JavaTest Message: shutting down test",,,,,,,,,,,JDK-8266959,JDK-8310018,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2soez:",9223372036854775807,b22,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@5f132e58,,,,,,,,,"2021-05-04 04:18;lancea;This appears to be due to https://github.com/cbeust/testng/pull/2167 so the tests will need to be updated to not use BeforeGroups/AfterGroups;;;","2021-05-06 07:19;roboduke;Changeset: e8405970
Author:    Lance Andersen <lancea@openjdk.org>
Date:      2021-05-06 14:18:41 +0000
URL:       https://git.openjdk.java.net/jdk/commit/e8405970b9998ff8f77bcf196f1456713a98c47f
;;;","2022-07-21 01:17;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk11u-dev/pull/1254
Date: 2022-07-21 08:09:52 +0000;;;","2022-07-21 02:57;gdams;Fix request (11u)

I'd like to backport this change as part of the wider effort to bump JDK11u to jtreg 6;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Replace direct TKit.run() calls with jdk.jpackage.test.Annotations.Test annotation,JDK-8266456,5048662,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,almatvee,almatvee,almatvee,2021-05-03 12:31,2021-05-17 17:41,2023-10-01 09:57,2021-05-11 15:01,17,,,,,,,17,tools,,0,sn_92,sn_93,,,,,,,,,,,,"Following tests use direct TKit.run() calls and newer added tests are using jdk.jpackage.test.Annotations.Test annotation. We need to make all tests to use annotation for consistency and to avoid copy-paste to newly added tests direct TKit.run() calls.

EmptyFolderPackageTest
EmptyFolderTest
WinDirChooserTest
MacFileAssociationsTest
SigningAppImageTest
SigningPackageTest
AppCategoryTest
LicenseTypeTest
LinuxBundleNameTest
MaintainerTest
ReleaseTest

Note: List might not be full and all tests needs to be double check.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2sodn:",9223372036854775807,b22,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@3656b41f,,,,,,,,,"2021-05-11 15:01;roboduke;Changeset: 1356116d
Author:    Alexander Matveev <almatvee@openjdk.org>
Date:      2021-05-11 21:59:56 +0000
URL:       https://git.openjdk.java.net/jdk/commit/1356116d3fb0cf9bee6796862e8015adc36590fb
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Shenandoah: Disable write protections before patching nmethod in nmethod_barrier on MacOSX/AArch64,JDK-8266453,5048657,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,zgu,zgu,zgu,2021-05-03 10:16,2021-08-18 06:55,2023-10-01 09:57,2021-05-05 06:01,17,,,,,,,17,hotspot,,0,gc-shenandoah,redhat-interest,,,,,,,,,,,,"#
# A fatal error has been detected by the Java Runtime Environment:
#
#  SIGBUS (0xa) at pc=0x00000001084d95e4, pid=49007, tid=8451
#
# JRE version: OpenJDK Runtime Environment (17.0) (fastdebug build 17-internal+0-adhoc.zgu.jdk)
# Java VM: OpenJDK 64-Bit Server VM (fastdebug 17-internal+0-adhoc.zgu.jdk, mixed mode, tiered, compressed oops, compressed class ptrs, shenandoah gc, bsd-aarch64)
# Problematic frame:
# V  [libjvm.dylib+0xcd95e4]  nmethod::is_unloading()+0xc0
#
# No core dump will be written. Core dumps have been disabled. To enable core dumping, try ""ulimit -c unlimited"" before starting Java again
#
# An error report file with more information is saved as:
# /Users/zgu/Documents/workspace/jdk/build/macosx-aarch64-server-fastdebug/test-support/jtreg_test_jdk_tier1/scratch/2/hs_err_pid49007.log
#
# If you would like to submit a bug report, please visit:
#   https://bugreport.java.com/bugreport/crash.jsp
#
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8265984,JDK-8253795,,,,,,,,,,,,,,aarch64,,,,,,,,,os_x,,,,,"0|i2socj:",9223372036854775807,b21,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6b00f96c,,,,,,,,,"2021-05-03 12:39;zgu;Shenandoah needs to disable write protections before patching instructions in generated code. See [1] for details.

[1]  https://developer.apple.com/documentation/apple-silicon/porting-just-in-time-compilers-to-apple-silicon


;;;","2021-05-05 06:00;roboduke;Changeset: 61bb6eca
Author:    Zhengyu Gu <zgu@openjdk.org>
Date:      2021-05-05 13:00:17 +0000
URL:       https://git.openjdk.java.net/jdk/commit/61bb6eca3e34b3f8382614edccd167f7ecefba65
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Shenandoah: TestReferenceShortcutCycle.java test failed on AArch64,JDK-8266440,5048637,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,zgu,zgu,zgu,2021-05-03 07:34,2021-05-17 17:39,2023-10-01 09:57,2021-05-10 11:01,16,17,,,,,,17,hotspot,,0,gc-shenandoah,redhat-interest,,,,,,,,,,,,"ACTION: main -- Failed. Execution failed: `main' threw exception: java.lang.RuntimeException: resurrected referent
REASON: User specified action: run main/othervm -Xbootclasspath/a:. -XX:+UnlockDiagnosticVMOptions -XX:+WhiteBoxAPI -XX:+UnlockExperimentalVMOptions -XX:+UseShenandoahGC -XX:ShenandoahGCMode=iu -XX:ShenandoahGarbageThreshold=100 -Xmx100m gc.shenandoah.TestReferenceShortcutCycle 
TIME:   0.153 seconds
messages:
command: main -Xbootclasspath/a:. -XX:+UnlockDiagnosticVMOptions -XX:+WhiteBoxAPI -XX:+UnlockExperimentalVMOptions -XX:+UseShenandoahGC -XX:ShenandoahGCMode=iu -XX:ShenandoahGarbageThreshold=100 -Xmx100m gc.shenandoah.TestReferenceShortcutCycle
reason: User specified action: run main/othervm -Xbootclasspath/a:. -XX:+UnlockDiagnosticVMOptions -XX:+WhiteBoxAPI -XX:+UnlockExperimentalVMOptions -XX:+UseShenandoahGC -XX:ShenandoahGCMode=iu -XX:ShenandoahGarbageThreshold=100 -Xmx100m gc.shenandoah.TestReferenceShortcutCycle 
Mode: othervm [/othervm specified]
Additional options from @modules: --add-modules java.base
elapsed time (seconds): 0.153
configuration:
Boot Layer
  add modules: java.base

STDOUT:
STDERR:
java.lang.RuntimeException: resurrected referent
	at gc.shenandoah.TestReferenceShortcutCycle.fail(TestReferenceShortcutCycle.java:81)
	at gc.shenandoah.TestReferenceShortcutCycle.testConcurrentCollection(TestReferenceShortcutCycle.java:92)
	at gc.shenandoah.TestReferenceShortcutCycle.main(TestReferenceShortcutCycle.java:100)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:78)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at com.sun.javatest.regtest.agent.MainWrapper$MainThread.run(MainWrapper.java:127)
	at java.base/java.lang.Thread.run(Thread.java:831)

JavaTest Message: Test threw exception: java.lang.RuntimeException: resurrected referent
JavaTest Message: shutting down test

STATUS:Failed.`main' threw exception: java.lang.RuntimeException: resurrected referent
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8263427,,,,,,,,,,,,,,,aarch64,,,,,,,,,generic,,,,,"0|i2so83:",9223372036854775807,b22,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6b00f96c,,,,,,,,,"2021-05-03 07:52;zgu;Actually, failed satb and iu modes.;;;","2021-05-04 14:07;zgu;Also reproducible on Linux aarch64.;;;","2021-05-06 06:08;zgu;JDK-8263427 did not make corresponding changes for aarch64;;;","2021-05-10 11:01;roboduke;Changeset: f78440ad
Author:    Zhengyu Gu <zgu@openjdk.org>
Date:      2021-05-10 17:59:54 +0000
URL:       https://git.openjdk.java.net/jdk/commit/f78440ad438bca2a8929475fbecfbd3c920d48df
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Compile::remove_useless_nodes does not remove opaque nodes,JDK-8266438,5048635,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,thartmann,thartmann,thartmann,2021-05-03 06:52,2021-06-02 01:38,2023-10-01 09:57,2021-05-11 00:47,16,17,,,,,,17,hotspot,,0,c2,hs-comp-triaged,oracle-triage-11,oracle-triage-17,,,,,,,,,,"JDK-8255026 refactored the code in Compile::remove_useless_nodes and as a result useless _predicate_opaqs are no longer removed:
https://github.com/openjdk/jdk/commit/27230fae#diff-f076857d7da81f56709da3de1511b1105727032186cde4d02c678667761f46eaL382",,,,,,,,,,,JDK-8266832,JDK-8266483,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8255026,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2so7n:",9223372036854775807,b21,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2021-05-03 07:19;thartmann;ILW = Potential crash/assert due to re-processing of removed nodes, only showed up with modified code in Valhalla, no workaround = MLH = P4;;;","2021-05-11 00:45;thartmann;Changeset: b6519048
Author: Tobias Hartmann <thartmann@openjdk.org>
Date: 2021-05-04 09:42:16 +0000
URL: https://git.openjdk.java.net/jdk/commit/b65190483c824234b86e2e43cf85009d926713bf;;;","2021-05-11 00:46;thartmann;Fix was pushed while main bug was targeted to 'repo-valhalla'. Reset the main bug to fixed in '17' and copied the Robo Duke entry here.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Synthetic constructor trees have non-null return type,JDK-8266436,5048632,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,jlahoda,jlahoda,jlahoda,2021-05-03 05:55,2021-05-10 10:36,2023-10-01 09:57,2021-05-05 03:32,17,,,,,,,17,tools,,0,,,,,,,,,,,,,,"When a constructor tree is constructed using `MethodDef(MethodSymbol m, ...)`, it has a non-null return type, while constructor trees for other constructors have a null return type. This ",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2so6z:",9223372036854775807,b21,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4dca67bd,,,,,,,,,"2021-05-05 03:32;roboduke;Changeset: a8046c91
Author:    Jan Lahoda <jlahoda@openjdk.org>
Date:      2021-05-05 10:31:11 +0000
URL:       https://git.openjdk.java.net/jdk/commit/a8046c9157c4dca601843c953ce67f7372a87a52
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
WBMPImageReader.read() should not truncate the input stream,JDK-8266435,5048519,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,jdv,webbuggrp,webbuggrp,2021-04-30 07:29,2023-05-17 10:24,2023-10-01 09:57,2021-12-01 21:02,11,16,17,18,8,,,18,client-libs,,0,amazon-interest,dcspn,fossbug,PDFBox-found,reproducer-yes,sn_106,sn_107,webbug,,,,,,"ADDITIONAL SYSTEM INFORMATION :
openjdk version ""16.0.1"" 2021-04-20
OpenJDK Runtime Environment Corretto-16.0.1.9.1 (build 16.0.1+9)
OpenJDK 64-Bit Server VM Corretto-16.0.1.9.1 (build 16.0.1+9, mixed mode, sharing)

A DESCRIPTION OF THE PROBLEM :
com.sun.imageio.plugins.wbmp.WBMPImageReader doesn't check the return value of read() .

iis.read(((DataBufferByte)tile.getDataBuffer()).getData(),
                     0, height*sm.getScanlineStride());

it should check the return value and read more, or call readFully.

Using a third party ImageInputStream is a problem if read() reads less than expected, although this is legal.
https://github.com/haraldk/TwelveMonkeys/issues/606

STEPS TO FOLLOW TO REPRODUCE THE PROBLEM :
run code

EXPECTED VERSUS ACTUAL BEHAVIOR :
EXPECTED -
success

---------- BEGIN SOURCE ----------
package jdk9test;


import java.awt.Color;
import java.awt.Graphics2D;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.RandomAccessFile;
import javax.imageio.ImageIO;
import javax.imageio.stream.ImageInputStreamImpl;


public class WBmpBug
{
    static final int LIMIT = 1000; // limit 32000 works
    public static void main(String[] args) throws IOException
    {
        BufferedImage bw = new BufferedImage(500, 500, BufferedImage.TYPE_BYTE_BINARY);
        Graphics2D g = (Graphics2D) bw.getGraphics();
        g.setBackground(Color.white);
        g.fillRect(0, 0, bw.getWidth(), bw.getHeight());
        g.dispose();
        boolean b = ImageIO.write(bw, ""wbmp"", new File(""test2.wbmp""));
        assert b = true;
        BufferedImage bim2 = ImageIO.read(new LimitedImageInputStream(new File(""test2.wbmp""), LIMIT));
        //BufferedImage bim2 = ImageIO.read(new File(""test2.wbmp"")); // this works
        b = ImageIO.write(bim2, ""wbmp"", new File(""test3.wbmp""));
        assert b = true;
        for (int x = 0; x < bim2.getWidth(); ++x)
        {
            for (int y = 0; y < bim2.getHeight(); ++y)
            {
                int i1 = bim2.getRGB(x, y);
                int i2 = bw.getRGB(x, y);
                if (i1 != i2)
                {
                    System.err.println(""fail"");
                    System.exit(-1);
                }
            }
        }
        System.out.println(""success"");
    }
    
    static class LimitedImageInputStream extends ImageInputStreamImpl 
    {
        private final RandomAccessFile raf;
        private final int limit;
        
        public LimitedImageInputStream(File file, int limit) throws FileNotFoundException
        {
            raf = new RandomAccessFile(file, ""r"");
            this.limit = limit;
        }

        @Override
        public int read() throws IOException
        {
            return raf.read();
        }

        @Override
        public int read(byte[] b, int off, int len) throws IOException
        {
            int readlen = raf.read(b, off, Math.min(limit, len));
            System.out.println(""readLen: "" + readlen + "" of "" + len);
            return readlen;
        }      

        @Override
        public void close() throws IOException
        {
            super.close();
            raf.close();
        }

        @Override
        public void seek(long pos) throws IOException
        {
            super.seek(pos);
            raf.seek(pos);
        }
        
        
    }
}

---------- END SOURCE ----------

CUSTOMER SUBMITTED WORKAROUND :
use higher buffer size (32000) or use standard classes

FREQUENCY : always


",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"2021-05-03 04:19;pnarayanaswa;WBmpBug.java;https://bugs.openjdk.org/secure/attachment/94488/WBmpBug.java",,,,,,,,,,,x86_64,,,,,,,,,generic,,,,,"0|i2snhv:",9223372036854775807,b27,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@377c353d,,,,,,,,,"2021-05-03 05:22;pnarayanaswa;Checked with attached testcase, 
Observed,  fail for this statement -  BufferedImage bim2 = ImageIO.read(new LimitedImageInputStream(new File(""test2.wbmp""), LIMIT));
console output:
===========
readLen: 4 of 4
readLen: 8 of 8
readLen: 2 of 2
readLen: 6 of 6
readLen: 1000 of 31500
fail

Success for this statement, BufferedImage bim2 = ImageIO.read(new File(""test2.wbmp"")); 

Test Result:
=========
8: Fail
8u291: Fail,
11: Fail
11.0.11: Fail
15:Fail
16: Fail
17ea: Fail
;;;","2021-12-01 21:02;roboduke;Changeset: 8198807b
Author:    Jayathirth D V <jdv@openjdk.org>
Date:      2021-12-02 05:00:48 +0000
URL:       https://git.openjdk.java.net/jdk/commit/8198807b4a811040c7d9f65fb98494fc7d840814
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
ZGC: GC allocation stalls can trigger deadlocks,JDK-8266432,5048621,Bug,Closed,JDK,JDK,software,duke,,,P2,Fixed,stefank,stefank,stefank,2021-05-03 02:59,2021-08-24 07:13,2023-10-01 09:57,2021-05-04 00:28,,,,,,,,17,hotspot,,0,zgc,,,,,,,,,,,,,"A deadlock can happen when a relocating thread holds the lock and tries to log information about the current thread, which can trigger a load barrier and a secondary relocation. The first relocation is holding the _ref_lock and the second relocation hangs when trying to reacquiring it. This is the stack trace:

#1 0x00007ff375c1fc90 in os::PlatformMonitor::wait
#2 0x00007ff3760cbf92 in ZForwarding::wait_page_released
#3 0x00007ff376118065 in ZRelocate::relocate_object
#4 0x00007ff374f7097b in AccessInternal::PostRuntimeDispatch&lt;ZBarrierSet::AccessBarrier&lt;286790ul, ZBarrierSet&gt;,
#5 0x00007ff375176134 in oopDesc::obj_field
#6 0x00007ff37551c5cb in java_lang_Thread::name
#7 0x00007ff375f2e7ee in JavaThread::get_thread_name_string
#8 0x00007ff376126323 in ZStatPhase::log_end
#9 0x00007ff3761272e8 in ZStatCriticalPhase::register_end
#10 0x00007ff3760cc0b0 in ZForwarding::wait_page_released
#11 0x00007ff376118065 in ZRelocate::relocate_object
#12 0x00007ff3760989c5 in ZLoadBarrierOopClosure::do_oop
#13 0x00007ff375408ca8 in HandleArea::oops_do
#14 0x00007ff375f2e0e9 in JavaThread::oops_do_no_frames 

This started to happen after:
8261759: ZGC: ZWorker Threads Continue Marking After System.exit() called

",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8267484,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2so4j:",9223372036854775807,b21,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6b00f96c,,,,,,,Verified,,"2021-05-03 03:04;stefank;We have a few older ZGC hang bugs that were probably caused by a handshake time unit bug. Sightings of this bug has been reported in those bugs.;;;","2021-05-04 00:28;roboduke;Changeset: ce1bc9d8
Author:    Stefan Karlsson <stefank@openjdk.org>
Date:      2021-05-04 07:27:59 +0000
URL:       https://git.openjdk.java.net/jdk/commit/ce1bc9d8bc7e6acb189a13fdadb573fa08b5c2f2
;;;","2021-08-24 07:13;stefank;This has not failed since we pushed this fix.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
ZHeapIteratorOopClosure does not handle native access properly,JDK-8266426,5048614,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,ayang,ayang,ayang,2021-05-03 00:36,2021-05-12 17:29,2023-10-01 09:57,2021-05-06 05:53,17,,,,,,,17,hotspot,,0,zgc,,,,,,,,,,,,,"`ZHeapIteratorOopClosure` is applied to all oops (to live objects) in the heap. In order to find all those objects, ZGC does a complete objects graph traversal, similar to marking. For each location that contains an oop, `load_oop(oop* p)` is called, which loads the oop, effetively deref `p` plus proper GC barrier. Currently, `load_oop` treats all passed-in arguments as in-heap; IOW, `p` live in the heap. However, during iterating over CLD, some oops could live in the metaspace (outside the heap).
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2so2z:",9223372036854775807,b22,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6b00f96c,,,,,,,,,"2021-05-06 05:53;roboduke;Changeset: 47d4438e
Author:    Albert Mingkun Yang <ayang@openjdk.org>
Date:      2021-05-06 12:52:34 +0000
URL:       https://git.openjdk.java.net/jdk/commit/47d4438e75eca6f6f2aef9c0f88cab78996f7f80
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Deadlock in Sound System,JDK-8266421,5048580,Bug,Closed,JDK,JDK,software,duke,,,P3,Fixed,serb,webbuggrp,webbuggrp,2021-05-01 21:45,2023-07-20 03:22,2023-10-01 09:57,2021-06-08 17:15,11.0.2,16,17,8u202,,,,17,client-libs,,0,11-bp,8-bp,additional-information-not-received,dcspn,jdk11u-fix-request,jdk11u-fix-yes,regression,reproducer-yes,webbug,,,,,"ADDITIONAL SYSTEM INFORMATION :
JDK 16.0.01+9
Ubuntu 18.04.6

A DESCRIPTION OF THE PROBLEM :
Thread 1

Calls
clip.setMicrosecondPosition(0); 
to move clip to start
If this has the following stack trace holding the lock on the DirectAudioDevice object and waiting for the lock for attribute lock
As seen in the following stack trace
    
synchronized DirectAudioDevice.setMicrosecondPosition(long microseconds) {
    ...
    setFramePosition(frames);
    ...
}
    
DirectAudioDevice.setFramePosition(int frames) {
    ...
    flush();
    ...
}

DirectAudioDevice.flush() {
    ...
    synchronized(lock) {
       lock.notifyAll();   
    }
    ...
}

Daemon Thread [Direct Clip]

At the same time is running the clip writing data out the stream and holds the lock on the lock attribute and is waiting for the lock on the DirectAudioDevice object 
As seen in the following stack trace

DirectAudioDevice.run() {
    ...
    int written = write(audioData, clipBytePosition, toWriteBytes)
    ...
}

DirectAudioDevice.write(byte[] b, int off, int len) {
    ...
    synchronized(lock) {
        if (!isActive() && doIO) {
            // this is not exactly correct... would be nicer
            // if the native sub system sent a callback when IO really
            // starts
            setActive(true);
            setStarted(true);
        }
    }
    ...
}

DirectAudioDevice.setActive(boolean active) {
    synchronized (this) {
         if (this.active != active) {
                this.active = active;
                //sendEvents = true;
         }
    }
}

Is it wise / right to lock on the object and an attribute? Why do we not use a single semaphore?
If we do need two, the the order must be the same in all stack traces to avoid deadlock.


STEPS TO FOLLOW TO REPRODUCE THE PROBLEM :
See stack trace demonstrating how deadlock can occur in description

EXPECTED VERSUS ACTUAL BEHAVIOR :
EXPECTED -
System stops with deadlock
ACTUAL -
System stops with deadlock (It is my AWT Event Thread calling setMicrosecondPosition())

FREQUENCY : occasionally


",,,,,,,,,,,JDK-8280487,JDK-8284422,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8207150,,,,"2021-05-17 02:10;pnarayanaswa;SoundTest.java;https://bugs.openjdk.org/secure/attachment/94659/SoundTest.java",,,,,,,,,,,x86_64,,,,,,b02,,,linux_ubuntu,,,,,"0|i2snvf:",9223372036854775807,b26,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@7d98911c,,,,,,,,,"2021-05-02 23:49;pnarayanaswa;Mail to submitter:
=============
Could you please share minimal reproducible standalone test case and reproducible steps to analyze the issue better.;;;","2021-05-17 02:12;pnarayanaswa;Additional information received from submitter:
====================================
A screen short of Eclipse IDE showing stacks of the program attached deadlocked. On the left you can see Daemon Thread [Direct Clip] has lock on object 32 and wants a lock on object 31. It also shows Thread 2 owns lock on object 21 and wants lock on object 32.
The file attached in the program used to produce the error. I HAD TO RUN IT SEVERAL TIMES BEFORE I GOT THE DEADLOCK. The nature of deadlocks are hard to reproduce. It takes exact timing by chance to occur.
I am using Linux Mint 19
Linux Kernel - 4.15.0-136-generic
Produced deadlock using
Java 11.0.10
However in the past I tried the latest version of Java  and saw the same result
Java 16.0.1+9
You need to pass in a sound file. I attach the sound file I used.
========================================================================
I have modified the Test Program and this code deadlocks immediately on my system.
<attached_testapp_SoundTest.java>;;;","2021-05-20 12:28;pnarayanaswa;Checked with attached testapp in ubuntu 20.04 and Windows 10, i could reproduce the issue, deadlock is observed.
Test Result:
=========
8u201: Pass
8u202: b01 Fail<- Regression
8u291: Fail
11: Pass
11.0.1 pass
11.0.2: b02 Fail <- Regression
11.0.11: Fail
16: Fail
17ea: Fail

upon commenting the statement>>>clip.setMicrosecondPosition(0); , issue could not be reproduced, testcase terminates!.
Test Result:
=========
8u291: Pass
11.0.11: Pass
16: Pass
17ea: Pass;;;","2021-05-20 19:07;serb;I can take look if you wish.;;;","2021-05-20 19:20;serb;The ""setMicrosecondPosition"" method should not be synchronized since it calls just one non synchronised public method setFramePosition. Both getters are not synchronised as well getMicrosecondPosition and getFramePosition.

The usage of ""synchronized (this)"" around ""if (this.active != active) {this.active = active;"" also can be replaced by the volatile keyword.;;;","2021-06-08 17:15;roboduke;Changeset: f6f82c31
Author:    Sergey Bylokhov <serb@openjdk.org>
Date:      2021-06-09 00:14:40 +0000
URL:       https://git.openjdk.java.net/jdk/commit/f6f82c31689e68f4263bbbe2314033d69f9049f5
;;;","2021-06-28 22:14;pnarayanaswa;Mail to submitter:
=============
The issue has been resolved in build:26  of JDK version:17[1]
Please share your feedback checking in the latest Early access build.
[1] https://jdk.java.net/17/ 
;;;","2021-12-16 11:08;serb;Fix request (11u)

This is the fix for a deadlock introduced in 11.0.2. The patch does not apply cleanly due to changes in the copyright and some changes in the context. The code of the patch is the same. The new test passed. The javax/sound tests are green.

PR: https://github.com/openjdk/jdk11u-dev/pull/719;;;",,,,,,,,,,,,,,,,,,,,,,,,,,
"[aix] in mmap mode, os::attempt_reserve_memory_at() fails to handle wrong mapping address",JDK-8266419,5048607,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,stuefe,stuefe,stuefe,2021-05-02 23:31,2021-05-10 10:36,2023-10-01 09:57,2021-05-05 04:55,11,16,17,,,,,17,hotspot,,0,oraclejdk-na,,,,,,,,,,,,,"On AIX, in mmap() mode, if the mmap call succeeds but not at the requested address, the mapping should be unmapped and the operation should count as error - like it is done on all other platforms.

(AFAICS this is a day zero bug in our port - mmap mode is seldomly used).",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8266222,JDK-8266506,,,,,,,,,,,,,,,,,,,,,,,,,,,aix,,,,,"0|i2so1f:",9223372036854775807,b21,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,,,"2021-05-05 04:55;roboduke;Changeset: 02cdd6eb
Author:    Thomas Stuefe <stuefe@openjdk.org>
Date:      2021-05-05 11:54:57 +0000
URL:       https://git.openjdk.java.net/jdk/commit/02cdd6eb6d1e4bc99f8f34786e92c33123e50482
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Avoid using jextract generated NativeScope in jextract samples,JDK-8266415,5048600,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,sundar,sundar,sundar,2021-05-02 22:47,2021-05-02 22:49,2023-10-01 09:57,2021-05-02 22:49,repo-panama,,,,,,,repo-panama,tools,,0,,,,,,,,,,,,,,Avoid using jextract generated NativeScope in jextract samples. See also JDK-8266414,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8266414,,,,,,,,,,,,,,,generic,,,,,,,,,generic,,,,,"0|i2snzv:",9223372036854775807,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@2251e2f8,,,,,,,,,"2021-05-02 22:49;sundar;Fixed in jextract samples repo;;;","2021-05-02 22:49;sundar;https://github.com/sundararajana/panama-jextract-samples/commit/7fb8fc752755db8837587b74cb8f3118db084780;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
jextract should not generate NativeScope,JDK-8266414,5048596,Bug,Resolved,JDK,JDK,software,duke,,,P2,Fixed,sundar,sundar,sundar,2021-05-02 22:03,2021-05-03 04:33,2023-10-01 09:57,2021-05-03 04:33,repo-panama,,,,,,,,tools,,0,foreign-extract,,,,,,,,,,,,,Jextract should not generate NativeScope. RuntimeHelper utilities should not use NativeScope. Foreign API's ResourceScope and SegmentAllocator should be used instead,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8266415,,,,,,,,,,,,,,,,,,,generic,,,,,,,,,generic,,,,,"0|i2snyz:",9223372036854775807,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@2251e2f8,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
"jdk/jfr/javaagent/TestLoadedAgent.java failed with ""Mismatch in TestEvent count""",JDK-8266410,5048579,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,egahlin,dcubed,dcubed,2021-05-01 20:32,2022-01-26 17:16,2023-10-01 09:57,2022-01-19 14:25,17,,,,,,,19,hotspot,,0,intermittent,tier5,,,,,,,,,,,,"The following test failed in the JDK17 CI:

jdk/jfr/javaagent/TestLoadedAgent.java

Here's a snippet from the log file:

#section:main
----------messages:(5/329)----------
command: main -Djdk.attach.allowAttachSelf=true jdk.jfr.javaagent.TestLoadedAgent
reason: User specified action: run main/othervm -Djdk.attach.allowAttachSelf=true jdk.jfr.javaagent.TestLoadedAgent 
Mode: othervm [/othervm specified]
Additional options from @modules: --add-modules java.instrument
elapsed time (seconds): 54.067
----------configuration:(3/43)----------
Boot Layer
  add modules: java.instrument

----------System.out:(0/0)----------
----------System.err:(16/1133)----------
java.lang.RuntimeException: Mismatch in TestEvent count: expected 144512 to equal 150000
	at jdk.test.lib.Asserts.fail(Asserts.java:594)
	at jdk.test.lib.Asserts.assertEquals(Asserts.java:205)
	at jdk.jfr.javaagent.EventEmitterAgent.validateRecording(EventEmitterAgent.java:95)
	at jdk.jfr.javaagent.TestLoadedAgent.main(TestLoadedAgent.java:52)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:78)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at com.sun.javatest.regtest.agent.MainWrapper$MainThread.run(MainWrapper.java:127)
	at java.base/java.lang.Thread.run(Thread.java:831)

JavaTest Message: Test threw exception: java.lang.RuntimeException: Mismatch in TestEvent count: expected 144512 to equal 150000",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,x86_64,,,,,,,,,os_x_10.15,,,,,"0|i2snv7:",9223372036854775807,b07,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@42995637,,,,,,,,,"2022-01-19 03:13;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/7141
Date: 2022-01-19 07:36:31 +0000;;;","2022-01-19 14:25;roboduke;Changeset: 6179e13b
Author:    Erik Gahlin <egahlin@openjdk.org>
Date:      2022-01-19 22:23:51 +0000
URL:       https://git.openjdk.java.net/jdk/commit/6179e13b084a64a3ad247ced8d314e425a6e0596
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
remove jdk.internal.javac.PreviewFeature.Feature.SEALED_CLASSES,JDK-8266407,5048576,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,vromero,vromero,vromero,2021-05-01 19:03,2021-07-14 17:15,2023-10-01 09:57,2021-07-06 16:06,,,,,,,,18,core-libs,,0,noreg-cleanup,,,,,,,,,,,,,jdk.internal.javac.PreviewFeature.Feature.SEALED_CLASSES can't be removed when sealed classes are made final because it is needed during the build of the interim compiler. It could be removed on the version next to the one that will make sealed classes final,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8260517,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2snuj:",9223372036854775807,b06,,,,,,,,,,,,"2021-07-06 16:06;roboduke;Changeset: 01c29d8f
Author:    Vicente Romero <vromero@openjdk.org>
Date:      2021-07-06 23:06:00 +0000
URL:       https://git.openjdk.java.net/jdk/commit/01c29d8f2c865009c0d5379ba2e2cd4d3015f018
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
importkeystore fails to a password less pkcs12 keystore,JDK-8266400,5048556,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,hchao,akolarkunnu,akolarkunnu,2021-05-01 03:04,2021-06-07 15:09,2023-10-01 09:57,2021-05-24 09:02,8,,,,,,,17,security-libs,,0,CPU21_07-defer-approved,CPU21_07-defer-SQE-OK,pkcs12-crypto,sqebug,,,,,,,,,,"Imports from any keystores like jks, jceks, bks or pkcs12 are failing.

Steps : 
1) Create any type of keystore(jks, jceks, bks or pkcs12)
Eg: JKS - keytool -keystore testkeystore.jks -genkeypair -keyalg EC -alias testcert -dname CN=b -storetype jks  -storepass password -keypass pass123

2) Try to import same in to a password less pkcs12 file
keytool -importkeystore -srckeystore testkeystore.jks -destkeystore testkeystore.p12 -J-Dkeystore.pkcs12.macAlgorithm=NONE -J-Dkeystore.pkcs12.certProtectionAlgorithm=NONE

Error message: 
Problem importing entry for alias testcert: java.security.KeyStoreException: non-null password required to create PrivateKeyEntry.
Entry for alias testcert not imported.
Do you want to quit the import process? [no]:",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8076190,,,,,,,,"2021-05-11 07:51;pkumaraswamy;workaround_results.zip;https://bugs.openjdk.org/secure/attachment/94579/workaround_results.zip",,,,,,,,,,,generic,,,,,,,,,generic,,,,,"0|i2snq3:",9223372036854775807,b24,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@2ec284e3,,,,,,,,,"2021-05-24 09:02;roboduke;Changeset: f2d880c1
Author:    Hai-May Chao <hchao@openjdk.org>
Date:      2021-05-24 15:38:32 +0000
URL:       https://git.openjdk.java.net/jdk/commit/f2d880c11a99ef587e7e7c0398f0834c32a22d63
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Replace use of reflection in jdk.internal.platform.Metrics,JDK-8266391,5048538,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,mchung,mchung,mchung,2021-04-30 13:40,2023-03-09 10:07,2023-10-01 09:57,2021-05-03 14:59,17,,,,,,,17,core-svc,,0,jdk11u-fix-request,jdk11u-fix-yes,jdk8u-fix-request,jdk8u-fix-yes,noreg-cleanup,,,,,,,,,Metrics::systemMetrics uses reflection because it's only supported on Linux.  That can be replaced with platform-specific code.,,,,,,,,,,,JDK-8283783,JDK-8301921,JDK-8301554,JDK-8298969,JDK-8288273,,,,,,,,,,,,,,,,,,,,,,JDK-8303828,JDK-8303408,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2snm3:",9223372036854775807,b21,,,,,,,,,,,,"2021-05-03 14:59;roboduke;Changeset: 3544a9d0
Author:    Mandy Chung <mchung@openjdk.org>
Date:      2021-05-03 21:58:37 +0000
URL:       https://git.openjdk.java.net/jdk/commit/3544a9d0e4a071ad9c82aa17ab113e0101b4020b
;;;","2022-03-25 10:31;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk11u-dev/pull/950
Date: 2022-03-25 17:27:10 +0000;;;","2022-03-25 10:34;sgehwolf;Fix Request (OpenJDK 11u):

The cgroups metrics is a Linux-only feature. Instead of using reflection and returning null on CNFE, platform specific classes can be used instead. This is a no-op from a functionality perspective and avoids reflection, which is a good thing. Clean backport. Low risk. Testing: container tests jdk/jdk/internal/platform (no regressions). GHA.;;;","2022-11-16 02:54;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk8u-dev/pull/177
Date: 2022-11-16 10:47:37 +0000;;;","2022-12-16 06:33;jdowland;Fix request (8u)

Please consider this for 8u cgroups v2 support. It's not clean: the original patch *is* clean but we needed to add a macosx platform specific class on top of it. Thanks!;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Memory segment bound check fails because of small segment optimizations,JDK-8266371,5048515,Bug,Resolved,JDK,JDK,software,duke,,,P2,Fixed,mcimadamore,mcimadamore,mcimadamore,2021-04-30 06:59,2021-08-12 07:30,2023-10-01 09:57,2021-04-30 08:12,16,repo-panama,,,,,,,tools,,0,foreign-memaccess,,,,,,,,,,,,,"This test fails with a JVM crash:

import jdk.incubator.foreign.MemoryAccess;
import jdk.incubator.foreign.MemorySegment;
import jdk.incubator.foreign.ResourceScope;

class SIGSEGV {
    public static void main(String[] args) {
        MemorySegment memorySegment = MemorySegment.allocateNative(2147479552, ResourceScope.globalScope());
        MemoryAccess.getLongAtOffset(memorySegment, 8223372036854705800L);
    }
}

However, when executed with ""-Djdk.incubator.foreign.SmallSegments=false"", same tests fails with IndexOutOfBoundsException, as expected.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8272372,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2sngz:",9223372036854775807,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@2251e2f8,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Inaccurate after_unwind hook in C2 exception handler,JDK-8266368,5048512,Bug,Resolved,JDK,JDK,software,duke,,,P5,Fixed,eosterlund,pliden,pliden,2021-04-30 06:28,2021-11-25 00:25,2023-10-01 09:57,2021-11-18 03:18,17,,,,,,,18,hotspot,,0,zgc,,,,,,,,,,,,,"JDK-8265702 changed the `process_frames` argument in the construction of the `RegisterMap` in `OptoRuntime::handle_exception_C()` from `true` to `false`. That should be ok, since we don't touch any oops in that context. However, that changed caused intermittent failures in testing. JDK-8265984 later reverted that change and worked around it by instead adding a ThreadWXEnable scope in `ZBarrierSetNMethod::nmethod_entry_barrier()`. However, it seems like the original fix in JDK-8265702 might have uncovered some other issue that we should investigate further as it suggests that we might not be processing a frame somewhere else where we should.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2sngb:",9223372036854775807,b25,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6b00f96c,,,,,,,,,"2021-05-24 01:15;eosterlund;After looking into this in more detail, it seems like OptoRuntime::handle_exception_C is really where the after_unwind hook should be, instead of OptoRuntime::rethrow_C. It is OptoRuntime::handle_exception_C that is (eventually) called when you unwind into a C2 nmethod. The frame processing in OptoRuntime::handle_exception_C accidentally fixes this, and has a similar effect as having the hooks in the right place. A classic case of working by accident. Having said that, what we have works, and I don't believe you can provoke any issues. Long term, we should fix this so it is more robust, but there is no urgency here.;;;","2021-11-18 03:18;roboduke;Changeset: 2c06bca9
Author:    Erik Österlund <eosterlund@openjdk.org>
Date:      2021-11-18 11:17:00 +0000
URL:       https://git.openjdk.java.net/jdk/commit/2c06bca98fcf9d129d6085e26c225fb26368a558
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
[lworld] [lw3] Experimental JNI APIs to access flattened arrays should be removed,JDK-8266361,5048504,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,fparain,fparain,fparain,2021-04-30 05:20,2021-05-03 13:06,2023-10-01 09:57,2021-05-03 13:06,repo-valhalla,,,,,,,,hotspot,,0,lw3,lworld,,,,,,,,,,,,"JNI was extended with new APIs allowing faster access to flattened arrays (JDK-8234761 and JDK-8236854) from native code. However, those APIs are not part of the official JNI specification and should be removed in preparation of the integration of the Valhalla branch into the mainline branch.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2snej:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
"Add ""headful"" to javax/swing/JRadioButton/FocusTraversal/FocusTraversal.java",JDK-8266348,5048483,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,serb,serb,serb,2021-04-30 00:26,2021-07-12 14:33,2023-10-01 09:57,2021-04-30 13:31,8,,,,,,,8u311,client-libs,,0,11-na,noreg-self,,,,,,,,,,,,The test recently added by the JDK-8129940 should be made headful,,,,,,,,,,,JDK-8270325,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,generic,,,,,,,,,generic,,,,,"0|i2sn9v:",9223372036854775807,b01,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@568a5b31,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
(fs) Custom DefaultFileSystemProvider security related loops,JDK-8266345,5048445,Bug,Closed,JDK,JDK,software,duke,,,P3,Fixed,mullan,webbuggrp,webbuggrp,2021-04-29 11:53,2021-11-09 01:50,2023-10-01 09:57,2021-07-12 07:56,13,14,16,17,,,,17,security-libs,,0,additional-information-received,dcsaw,regression,reproducer-yes,webbug,,,,,,,,,"ADDITIONAL SYSTEM INFORMATION :
macOS Catalina 10.15.7
JDK 16

A DESCRIPTION OF THE PROBLEM :
A custom DefaultFileSystemProvider with -Djava.security.manager and -Djava.security.policy=<policy> loops in FileSystemProvider newByteChannel.

REGRESSION : Last worked in version 12

STEPS TO FOLLOW TO REPRODUCE THE PROBLEM :
It can be reproduced with the JDK TestProvider class
/usr/libexec/java_home -v 12 --exec javac -d . ~/Documents/GitHub/jdk16-master/test/jdk/java/nio/file/spi/TestProvider.java

JDK 12 is the last version where it works for me. (I don't have a working 13. It doesn't work at 14).
So I compile against that.
See test class source below.

It uses the all.poicy file with...
// 

grant {
    permission java.security.AllPermission;
};

Reproduce as shown in Results

EXPECTED VERSUS ACTUAL BEHAVIOR :
EXPECTED -
/usr/libexec/java_home -v 12 --exec java -cp . -Djava.security.manager -Djava.security.policy=all.policy -Djava.nio.file.spi.DefaultFileSystemProvider=TestProvider org.test.Test
TestProvider$TestFileSystem@23fc625e
TestProvider

ACTUAL -
/usr/libexec/java_home -v 14 --exec java -cp . -Djava.security.manager -Djava.security.policy=Classes/all.policy -Djava.nio.file.spi.DefaultFileSystemProvider=TestProvider org.test.Test
TestProvider$TestFileSystem@23fc625e
Exception in thread ""main"" java.lang.StackOverflowError
	at java.base/java.lang.AbstractStringBuilder.append(AbstractStringBuilder.java:593)
	at java.base/java.lang.StringBuilder.append(StringBuilder.java:173)
	at java.base/sun.nio.fs.UnixFileSystem.getPath(UnixFileSystem.java:269)
	at TestProvider$TestFileSystem.getPath(TestProvider.java:261)
	at java.base/java.nio.file.Path.of(Path.java:147)
	at java.base/sun.security.provider.PolicyFile.initDefaultPolicy(PolicyFile.java:478)
	at java.base/sun.security.provider.PolicyFile$2.run(PolicyFile.java:340)
	at java.base/sun.security.provider.PolicyFile$2.run(PolicyFile.java:337)
	at java.base/java.security.AccessController.doPrivileged(AccessController.java:312)
	at java.base/sun.security.provider.PolicyFile.initPolicyFile(PolicyFile.java:337)
	at java.base/sun.security.provider.PolicyFile.init(PolicyFile.java:330)
	at java.base/sun.security.provider.PolicyFile.<init>(PolicyFile.java:283)
	at java.base/java.security.Policy.loadPolicyProvider(Policy.java:207)
	at java.base/java.security.Policy.getPolicyNoCheck(Policy.java:178)
	at java.base/java.security.ProtectionDomain.implies(ProtectionDomain.java:321)
	at java.base/java.security.ProtectionDomain.impliesWithAltFilePerm(ProtectionDomain.java:353)
	at java.base/java.security.AccessControlContext.checkPermission(AccessControlContext.java:450)
	at java.base/java.security.AccessController.checkPermission(AccessController.java:1036)
	at java.base/java.lang.SecurityManager.checkPermission(SecurityManager.java:408)
	at java.base/java.lang.SecurityManager.checkRead(SecurityManager.java:747)
	at java.base/sun.nio.fs.UnixChannelFactory.open(UnixChannelFactory.java:255)
	at java.base/sun.nio.fs.UnixChannelFactory.newFileChannel(UnixChannelFactory.java:143)
	at java.base/sun.nio.fs.UnixChannelFactory.newFileChannel(UnixChannelFactory.java:156)
	at java.base/sun.nio.fs.UnixFileSystemProvider.newByteChannel(UnixFileSystemProvider.java:217)
	at TestProvider.newByteChannel(TestProvider.java:173)
...

---------- BEGIN SOURCE ----------

package org.test;

import java.nio.file.FileSystems;
import java.nio.file.spi.FileSystemProvider;
import java.lang.reflect.Constructor;

public class Test {
	
	public static void main(String [] args) {
		System.out.println(FileSystems.getDefault());
		System.out.println(System.getProperty(""java.nio.file.spi.DefaultFileSystemProvider""));
	}
	
}

/usr/libexec/java_home -v 12 --exec javac -d . ~/testfsp/Test.java
---------- END SOURCE ----------

CUSTOMER SUBMITTED WORKAROUND :
Run JDK12 for custom DefaultFileSystemProvider with -Djava.security.manager and -Djava.security.policy

FREQUENCY : always


",,,,,,,,,,,JDK-8270365,JDK-8270750,,,,,,,,,,,,,,,,,,,,,JDK-8271740,JDK-8276845,JDK-8271194,,JDK-8218618,,,,"2021-04-29 23:45;tongwan;Test.java;https://bugs.openjdk.org/secure/attachment/94457/Test.java","2021-04-29 23:45;tongwan;all.policy;https://bugs.openjdk.org/secure/attachment/94456/all.policy",,,,,,,,,,,,,,,,,13,,,,,,,"0|i2sn1f:",9223372036854775807,b31,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@2ec284e3,,,,,,,Not verified,,"2021-04-29 23:33;tongwan;The observations on Windows 10:
JDK 11: Passed. StackOverflowError did not happen.
JDK 12: Passed.
JDK 13: Passed.
JDK 14: Failed, Exception in thread ""main"" java.lang.StackOverflowError 
JDK 16: Failed.
JDK 17ea+6: Failed.;;;","2021-04-30 01:17;alanb;[~tongwan] Did you duplicate this? I'm curious if this is really a regression. In any case, it's yet another stack overflow issue with security manager. In this case, I suspect PolicyFile will need to be re-worked to use the built-in file system provider (like FilePermission).;;;","2021-04-30 01:27;tongwan;Yes. I tested with JDK 11 and the StackOverflowError did not happen.  For JDK 16 and 17ea, both of them threw StackOverflowError.;;;","2021-04-30 07:13;alanb;[~tongwan] Thanks, I suspect we'll need to move this to security-libs once we've looked at it a bit more.;;;","2021-05-11 14:49;bpb;Indeed modifying sun.security.provider.PolicyFile as suggested appears to fix the problem.

--- a/src/java.base/share/classes/sun/security/provider/PolicyFile.java
+++ b/src/java.base/share/classes/sun/security/provider/PolicyFile.java
@@ -44,6 +44,8 @@ import java.util.concurrent.ConcurrentHashMap;
 import jdk.internal.access.JavaSecurityAccess;
 import jdk.internal.access.SharedSecrets;
 import jdk.internal.util.StaticProperty;
+import sun.nio.fs.DefaultFileSystemProvider;
+
 import sun.security.util.*;
 import sun.net.www.ParseUtil;
 
@@ -275,6 +277,13 @@ public class PolicyFile extends java.security.Policy {
     private static Set<URL> badPolicyURLs =
         Collections.newSetFromMap(new ConcurrentHashMap<URL,Boolean>());
 
+    /**
+     * Use the platform's default file system to avoid recursive initialization
+     * issues when the VM is configured to use a custom file system provider.
+     */
+    private static final java.nio.file.FileSystem builtInFS =
+        DefaultFileSystemProvider.theFileSystem();
+
     /**
      * Initializes the Policy object and reads the default policy
      * configuration file(s) into the Policy object.
@@ -474,10 +483,10 @@ public class PolicyFile extends java.security.Policy {
     }
 
     private void initDefaultPolicy(PolicyInfo newInfo) {
-        Path defaultPolicy = Path.of(StaticProperty.javaHome(),
-                                     ""lib"",
-                                     ""security"",
-                                     ""default.policy"");
+        Path defaultPolicy = builtInFS.getPath(StaticProperty.javaHome(),
+                                               ""lib"",
+                                               ""security"",
+                                               ""default.policy"");
         if (debug != null) {
             debug.println(""reading "" + defaultPolicy);
         }
;;;","2021-07-12 07:20;mullan;This regression was most likely introduced in JDK 13 by https://bugs.openjdk.java.net/browse/JDK-8218618 (which was fixed in JDK 13, not 14). That was when the `sun.security.provider.PolicyFile` code first called `Path.of` which would use the custom `FileSystem` provider, if specified.;;;","2021-07-12 07:55;roboduke;Changeset: 4fc3180f
Author:    Sean Mullan <mullan@openjdk.org>
Date:      2021-07-12 14:54:38 +0000
URL:       https://git.openjdk.java.net/jdk17/commit/4fc3180f75e1cea4ebd613f8253be205d95f830c
;;;","2021-07-20 20:13;tongwan; Requested the submitter verify the fix by downloading the latest versions of JDK 18 from https://jdk.java.net/18/ and JDK 17 from https://jdk.java.net/17/ ;;;","2021-07-22 23:33;tongwan;I haven’t tried the incident test case because I assume that has been verified as fixed.;;;",,,,,,,,,,,,,,,,,,,,,,,,,
Typo in bug reporting instructions,JDK-8266342,5048309,Bug,Closed,JDK,JDK,software,duke,,,P4,Fixed,bhoran,webbuggrp,webbuggrp,2021-04-28 07:14,2021-05-24 22:11,2023-10-01 09:57,2021-05-18 07:22,16,,,,,,,17,docs,,0,dcsad,noreg-doc,webbug,,,,,,,,,,,"A DESCRIPTION OF THE PROBLEM :
https://docs.oracle.com/en/java/javase/16/troubleshoot/submit-bug-report.html says
  If you conclude that the bug was already reported, then submit a new bug.
In this text, ""was already"" should be ""was not already"".


FREQUENCY : always


",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,generic,,,,,,,,,generic,,,,,"0|i2sm77:",9223372036854775807,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4eba8c33,,,,,,,Not verified,,"2021-04-29 23:28;adev;The statement under the section - Prepare to Submit a Bug Report at https://docs.oracle.com/en/java/javase/16/troubleshoot/submit-bug-report.html#GUID-A2BFDCEC-9ABF-42C7-A337-B691E1E34C09 should be replaced with:

If you conclude that the bug was not already reported, then submit a new bug.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
ThreadTimesClosure doesn't handle exceptions properly,JDK-8266337,5048473,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,lmesnik,dholmes,dholmes,2021-04-29 21:43,2021-06-10 17:52,2023-10-01 09:57,2021-06-03 10:43,17,,,,,,,17,hotspot,,0,,,,,,,,,,,,,,"Case 1:

void ThreadTimesClosure::do_unlocked() {
  EXCEPTION_MARK;
  for (int i = 0; i < _count; i++) {
    Handle s = java_lang_String::create_from_str(_names_chars[i],  CHECK);
    _names_strings->obj_at_put(i, s());
  }
}

create_from_str can throw OOME as per the use of CHECK macro, but the EXCEPTION_MARK would cause us to crash if this happened. The EXCEPTION_MARK is not wanted here.

case 2:

void ThreadTimesClosure::do_thread(Thread* thread) {
 ...
  EXCEPTION_MARK;
  ResourceMark rm(THREAD); // thread->name() uses ResourceArea

  assert(thread->name() != NULL, ""All threads should have a name"");
  _names_chars[_count] = os::strdup(thread->name());
  _times->long_at_put(_count, os::is_thread_cpu_time_supported() ?
                        os::thread_cpu_time(thread) : -1);
  _count++;
}

This EXCEPTION_MARK is superfluous as no code raises exceptions.

If the code wants to assert it is not called with an exception pending then it should assert that directly rather than using the EXCEPTION_MARK.",,,,,,,,,,,JDK-8268155,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-7196045,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2sn7n:",9223372036854775807,b26,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@2846162a,,,,,,,,,"2021-06-03 10:43;lmesnik;It is fixed but, the backport to 17 was created.;;;","2021-06-03 18:33;dholmes;Robo Duke added a comment - Yesterday
Changeset: 06f87cf4
Author: Leonid Mesnik <lmesnik@openjdk.org>
Date: 2021-06-03 04:12:40 +0000
URL: https://git.openjdk.java.net/jdk/commit/06f87cf4419be9c1bffe996d5d476d30b0f86bf6

Fix was pushed while main bug was targeted to '18'. Reset the main bug to fixed in '17' and copied the Robo Duke entry here.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
itableMethodEntry::initialize() asserts with archived old classes,JDK-8266330,5048461,Bug,Closed,JDK,JDK,software,duke,,,P2,Fixed,ccheung,ccheung,ccheung,2021-04-29 15:52,2021-07-08 16:30,2023-10-01 09:57,2021-05-10 09:24,17,,,,,,,17,hotspot,,0,cds,,,,,,,,,,,,,"The scenario is that a class implements an old interface but the implementation is in another class.
e.g.
public class A extends B implements I {
}

public interface I
	version 49:0
{
  public abstract Method doit:""()Ljava/lang/String;"";

} // end Class I

public class B {
    public String doit() {
        return ""doit from B"";
    }
}

With the above classes in static CDS archive, during initialization of A, the following assert failed in itableMethodEntry::initialize():

    assert(_method == m, ""sanity"");

Call stack:
Stack: [0x00007fb10876a000,0x00007fb10886b000],  sp=0x00007fb108869010,  free space=1020k
Native frames: (J=compiled Java code, j=interpreted, Vv=VM code, C=native code)
V  [libjvm.so+0xd66732]  itableMethodEntry::initialize(InstanceKlass*, Method*)+0x15c
V  [libjvm.so+0xd67a46]  klassItable::initialize_itable_for_interface(int, InstanceKlass*, GrowableArray<Method*>*, int)+0x396
V  [libjvm.so+0xd66b93]  klassItable::initialize_itable(GrowableArray<Method*>*)+0x283
V  [libjvm.so+0xd6711a]  klassItable::initialize_itable_and_check_constraints(Thread*)+0x7c
V  [libjvm.so+0xa9a6ea]  InstanceKlass::link_class_impl(Thread*)+0x692
V  [libjvm.so+0xa99fa1]  InstanceKlass::link_class(Thread*)+0x7f
V  [libjvm.so+0xa9ab71]  InstanceKlass::initialize_impl(Thread*)+0x61
V  [libjvm.so+0xa99e92]  InstanceKlass::initialize(Thread*)+0x40
V  [libjvm.so+0xabd391]  InterpreterRuntime::_new(JavaThread*, ConstantPool*, int)+0xfd
j  MyTest.main([Ljava/lang/String;)V+0
v  ~StubRoutines::call_stub
V  [libjvm.so+0xacb949]  JavaCalls::call_helper(JavaValue*, methodHandle const&, JavaCallArguments*, Thread*)+0x59d
V  [libjvm.so+0xf84986]  os::os_exception_wrapper(void (*)(JavaValue*, methodHandle const&, JavaCallArguments*, Thread*), JavaValue*, methodHandle const&, JavaCallArguments*, Thread*)+0x36
V  [libjvm.so+0xacb3a8]  JavaCalls::call(JavaValue*, methodHandle const&, JavaCallArguments*, Thread*)+0x8e
V  [libjvm.so+0xb77b00]  jni_invoke_static(JNIEnv_*, JavaValue*, _jobject*, JNICallType, _jmethodID*, JNI_ArgumentPusher*, Thread*)+0x188
V  [libjvm.so+0xb85958]  jni_CallStaticVoidMethod+0x1e1
C  [libjli.so+0x4de3]  JavaMain+0xbf7
C  [libjli.so+0xb025]  ThreadJavaMain+0x27",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8261090,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2sn4z:",9223372036854775807,b22,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,Verified,,"2021-05-04 11:20;mseledtsov;ILW = HMM = P2;;;","2021-05-05 08:38;ccheung;This bug is not applicable to JDK16 and is related to JDK-8261090 (Store old classfiles in static CDS archive).

void itableMethodEntry::initialize(Method* m) {
  if (m == NULL) return;

#ifdef ASSERT
  if (MetaspaceShared::is_in_shared_metaspace((void*)&_method) &&
     !MetaspaceShared::remapped_readwrite() &&
     !MetaspaceShared::is_old_class(m->method_holder())) {
    // At runtime initialize_itable is rerun as part of link_class_impl()
    // for a shared class loaded by the non-boot loader.
    // The dumptime itable method entry should be the same as the runtime entry.
    assert(_method == m, ""sanity"");
  }
#endif

The above function has the check for !MetaspaceShared::is_old_class(m->method_holder()).
While the method_holder() is not an old class, the _klass in the klassITable is an old class.
A potential fix is to have the caller of the above function pass in the _klass and add another check
making sure the _klass is not an old class before the assert.;;;","2021-05-05 11:49;ccheung;This could also be reproduced with the spring app as follows:
1. Create a classlist with the Spring jar:
java --illegal-access=warn -XX:DumpLoadedClassList=spring.list -jar ./spring-greeting-1.20.jar

2. Create a static archive using the classlist:
java --illegal-access=warn -XX:ExtraSharedClassListFile=spring.list -Xshare:dump -XX:SharedArchiveFile=mystatic.jsa -jar ./spring-greeting-1.20.jar

3. Run the Spring app with static archive:
java --illegal-access=warn  -Xshare:on -XX:SharedArchiveFile=mystatic.jsa -jar ./spring-greeting-1.20.jar

With the Spring app, m is the following:
    java.lang.String ch.qos.logback.core.ContextBase.getProperty(java.lang.String)

So the method_holder() is ch.qos.logback.core.ContextBase

The _klass is:
    ch/qos/logback/classic/LoggerContext

I don't have the source code but I've converted the class to jasm.

super public class LoggerContext
        extends ch/qos/logback/core/ContextBase
        implements org/slf4j/ILoggerFactory,
                 ch/qos/logback/core/spi/LifeCycle
        version 50:0

Below is the ILoggerFactory which is an old interface:

package  org/slf4j;

public interface  ILoggerFactory
        version 49:0
{
  public abstract Method getLogger:""(Ljava/lang/String;)Lorg/slf4j/Logger;"";

} // end Class ILoggerFactory
;;;","2021-05-10 09:24;roboduke;Changeset: 25d99e52
Author:    Calvin Cheung <ccheung@openjdk.org>
Date:      2021-05-10 16:24:11 +0000
URL:       https://git.openjdk.java.net/jdk/commit/25d99e52679bdf4601058e10e5679ca3780f8ec3
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
[lworld] [lw3] Component type of arrays of primitive objects incorrectly loaded at link time,JDK-8266324,5048454,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,fparain,fparain,fparain,2021-04-29 13:26,2021-05-03 13:01,2023-10-01 09:57,2021-05-03 13:01,repo-valhalla,,,,,,,,hotspot,,0,lw3,lworld,,,,,,,,,,,,"At class link time, classes of method arguments and return values decorated with a Q-descriptor are eagerly loaded in order to computed optimized calling conventions. Arrays are identity types, even if their component type is a null-free primitive class. There's no point in loading component types of array arguments at link time, because they cannot be optimized in the calling convention as primitive objects are.
The comment in InstanceKlass::link_class_impl() correctly describes this behavior, but the implementation loads the component type anyway.
 ",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2sn3f:",9223372036854775807,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
"(bf) ReadOnlyBufferException in heap buffer put(String,int,int) should not be conditional",JDK-8266320,5048450,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,bpb,bpb,bpb,2021-04-29 12:51,2021-05-10 10:32,2023-10-01 09:57,2021-05-03 10:29,17,,,,,,,17,core-libs,,0,,,,,,,,,,,,,,"The current code is

    public $Type$Buffer put(String src, int start, int end) {
        checkScope();
        int length = end - start;
        Objects.checkFromIndexSize(start, length, src.length());
        if (isReadOnly())
            throw new ReadOnlyBufferException();

but should be using the #if[rw]-#else[rw]-#end[rw] construct as elsewhere in the template.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,generic,,,,,,,,,generic,,,,,"0|i2sn2j:",9223372036854775807,b21,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@674604a9,,,,,,,,,"2021-05-03 10:29;roboduke;Changeset: 45760d4b
Author:    Philippe Marschall <philippe.marschall@gmail.com>
Committer: Brian Burkhalter <bpb@openjdk.org>
Date:      2021-05-03 17:28:46 +0000
URL:       https://git.openjdk.java.net/jdk/commit/45760d4baf5da7537e1bae70796e869309d4aeff
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
(JEP-356) - RandomGenerator spec implementation requirements tightly coupled to JDK internal classes,JDK-8266313,5048439,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,jlaskey,kganapureddy,kganapureddy,2021-04-29 10:25,2021-07-18 12:16,2023-10-01 09:57,2021-07-14 05:01,17,,,,,,,17,core-libs,,0,conformance,jep-356,noreg-doc,,,,,,,,,,,"Implementation Requirements: in spec considered to be conformant spec, and it should not have tight coupled to some internal JDK implementation  
references.
There are instances which are mentioned as Implementation Requirements but their behavior is coupled with the non exposed JDK libraries.

In RandomGenerator :
default float nextFloat​(float bound) 
Implementation Requirements:
The default implementation simply calls checkBound(bound) and then boundedNextFloat(this, bound).

nextFloat​(float origin, float bound)
Implementation Requirements:
The default implementation simply calls checkBound(bound) and then boundedNextFloat(this, bound).


default int nextInt​(int bound)
Implementation Requirements:
The default implementation simply calls checkBound(bound) and then boundedNextInt(this, bound).

nextInt​(int origin, int bound)
Implementation Requirements:
The default implementation simply calls checkBound(bound) and then boundedNextInt(this, bound).

nextLong​(long bound)
Implementation Requirements:
The default implementation simply calls checkBound(bound) and then boundedNextLong(this, bound).

nextLong​(long origin, long bound)
Implementation Requirements:
The default implementation simply calls checkBound(bound) and then boundedNextLong(this, bound).

RandomGeneratorFactory::all()
Returns a non-empty stream of available RandomGeneratorFactory(s). RandomGenerators that are marked as deprecated or are not properly configured are not included in the result.
Implementation Requirements:
Availability is determined by RandomGeneratorFactory using the service provider API to locate implementations of the RandomGenerator interface.

Here - not property configured is confusing , and configuration coupled to internal JDK classes.

As I understand these looks to be Implementation Notes.

",,,,,,,,,,,JDK-8270765,JDK-8270513,,,,,,,,,,,,JDK-8268770,,,,,,,,,JDK-8269689,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2sn03:",9223372036854775807,b31,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@38ded199,,,,,,,,,"2021-06-14 06:36;jlaskey;Please explain to me what needs to be changed and what those changes should look like.;;;","2021-06-14 09:14;kganapureddy;Generally, Implementation Requirements section in spec considered as conformance spec, the highlighted places in spec 
=======
In RandomGenerator :
default float nextFloat​(float bound)
Implementation Requirements:
The default implementation simply calls checkBound(bound) and then boundedNextFloat(this, bound).

[krushna] - here checkBound() and boundedNextFloat() are internal to JDK not exposed to outside world.
IMO, these needs to be replaced with Implementation Notes. 

Implementation Notes:
The default implementation simply calls checkBound(bound) and then boundedNextFloat(this, bound).

Applicable for all cases mentioned in description.

Thanks.



 ;;;","2021-06-14 10:01;jlaskey;So you are recommending that

     *
     * @implSpec The default implementation simply calls
     * {@link RandomSupport#checkBound checkBound}(bound) and then
     * {@link RandomSupport#boundedNextFloat boundedNextFloat}(this, bound).

is removed in each of these methods?

;;;","2021-06-15 02:58;kganapureddy;Yes, The @implSpec can be replaced with @implNote
 OR
remove the @implspec for mentioned cases.;;;","2021-07-14 05:01;roboduke;Changeset: 72db09b1
Author:    Jim Laskey <jlaskey@openjdk.org>
Date:      2021-07-14 12:00:01 +0000
URL:       https://git.openjdk.java.net/jdk17/commit/72db09b1f393722074cae2fbff0fc369f0f2718c
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
deadlock between System.loadLibrary and JNI FindClass loading another class ,JDK-8266310,5048432,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,avoitylov,avoitylov,avoitylov,2021-04-29 09:54,2021-07-12 11:26,2023-10-01 09:57,2021-07-06 04:15,11.0.11,16,,,,,,18,core-libs,,0,,,,,,,,,,,,,,"Issue reported by Norman Maurer here: https://mail.openjdk.java.net/pipermail/jdk-updates-dev/2021-April/006011.html

I hope this is the right mailinglist if not please let me know which one it is….

In netty we have a bunch of JNI code that is loaded during initialisation. Yesterday a user reported that after upgrading from openjdk 11.0.10 to 11.0.11 he often see a deadlock while loading the JNI code. 
After looking at the stack trace it seems like all of this is really happening in “java land” and so looks more like a openjdk bug / regression than a netty bug. 
Any idea what could have caused this ?


All the details can be found in our issue tracker:

https://github.com/netty/netty/issues/11209

I think the most important is the thread-dump which I include here to make things simple:

[INFO] ""main"":
[INFO]  at java.util.zip.ZipFile.getEntry(java.base at 11.0.11/ZipFile.java:346)
[INFO]  - waiting to lock <0x00000000e119d0a8> (a java.util.jar.JarFile)
[INFO]  at java.util.zip.ZipFile$1.getEntry(java.base at 11.0.11/ZipFile.java:1126)
[INFO]  at java.util.jar.JarFile.getEntry0(java.base at 11.0.11/JarFile.java:578)
[INFO]  at java.util.jar.JarFile.getEntry(java.base at 11.0.11/JarFile.java:508)
[INFO]  at java.util.jar.JarFile.getJarEntry(java.base at 11.0.11/JarFile.java:470)
[INFO]  at jdk.internal.loader.URLClassPath$JarLoader.getResource(java.base at 11.0.11/URLClassPath.java:929)
[INFO]  at jdk.internal.loader.URLClassPath.getResource(java.base at 11.0.11/URLClassPath.java:314)
[INFO]  at jdk.internal.loader.BuiltinClassLoader.findClassOnClassPathOrNull(java.base at 11.0.11/BuiltinClassLoader.java:695)
[INFO]  at jdk.internal.loader.BuiltinClassLoader.loadClassOrNull(java.base at 11.0.11/BuiltinClassLoader.java:621)
[INFO]  - locked <0x00000000e2006a18> (a java.lang.Object)
[INFO]  at jdk.internal.loader.BuiltinClassLoader.loadClass(java.base at 11.0.11/BuiltinClassLoader.java:579)
[INFO]  at jdk.internal.loader.ClassLoaders$AppClassLoader.loadClass(java.base at 11.0.11/ClassLoaders.java:178)
[INFO]  at java.lang.ClassLoader.loadClass(java.base at 11.0.11/ClassLoader.java:522)
[INFO]  at java.lang.ClassLoader$NativeLibrary.load0(java.base at 11.0.11/Native Method)
[INFO]  at java.lang.ClassLoader$NativeLibrary.load(java.base at 11.0.11/ClassLoader.java:2442)
[INFO]  at java.lang.ClassLoader$NativeLibrary.loadLibrary(java.base at 11.0.11/ClassLoader.java:2498)
[INFO]  - locked <0x00000000e11d6ad0> (a java.util.HashSet)
[INFO]  at java.lang.ClassLoader.loadLibrary0(java.base at 11.0.11/ClassLoader.java:2694)
[INFO]  at java.lang.ClassLoader.loadLibrary(java.base at 11.0.11/ClassLoader.java:2627)
[INFO]  at java.lang.Runtime.load0(java.base at 11.0.11/Runtime.java:768)
[INFO]  at java.lang.System.load(java.base at 11.0.11/System.java:1837)
[INFO]  at io.netty.util.internal.NativeLibraryUtil.loadLibrary(NativeLibraryUtil.java:36)
[INFO]  at jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(java.base at 11.0.11/Native Method)
[INFO]  at jdk.internal.reflect.NativeMethodAccessorImpl.invoke(java.base at 11.0.11/NativeMethodAccessorImpl.java:62)
[INFO]  at jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(java.base at 11.0.11/DelegatingMethodAccessorImpl.java:43)
[INFO]  at java.lang.reflect.Method.invoke(java.base at 11.0.11/Method.java:566)
[INFO]  at io.netty.util.internal.NativeLibraryLoader$1.run(NativeLibraryLoader.java:378)
[INFO]  at java.security.AccessController.doPrivileged(java.base at 11.0.11/Native Method)
[INFO]  at io.netty.util.internal.NativeLibraryLoader.loadLibraryByHelper(NativeLibraryLoader.java:370)
[INFO]  at io.netty.util.internal.NativeLibraryLoader.loadLibrary(NativeLibraryLoader.java:336)
[INFO]  at io.netty.util.internal.NativeLibraryLoader.load(NativeLibraryLoader.java:200)
[INFO]  at io.netty.channel.epoll.Native.loadNativeLibrary(Native.java:290)
[INFO]  at io.netty.channel.epoll.Native.<clinit>(Native.java:70)
[INFO]  at io.netty.channel.epoll.Epoll.<clinit>(Epoll.java:39)
[INFO]  at java.lang.Class.forName0(java.base at 11.0.11/Native Method)
[INFO]  at java.lang.Class.forName(java.base at 11.0.11/Class.java:315)
[INFO]  at io.grpc.netty.Utils.isEpollAvailable(Utils.java:291)
[INFO]  at io.grpc.netty.Utils.<clinit>(Utils.java:109)
[INFO]  at io.grpc.netty.NettyServerBuilder.<clinit>(NettyServerBuilder.java:83)
[INFO]  at c.i.w.m.e.ApplicationCode.applicationMethod(ApplicationCode.java:112)
[INFO]  at c.i.w.m.e.ApplicationCode.<init>(ApplicationCode.java:108)
[INFO]  at c.i.w.m.e.ApplicationCode.<init>(ApplicationCode.java:101)
[INFO]  at c.i.w.m.AppUnitTest.initialize(AppUnitTest.java:90)
[INFO]  at jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(java.base at 11.0.11/Native Method)
[INFO]  at jdk.internal.reflect.NativeMethodAccessorImpl.invoke(java.base at 11.0.11/NativeMethodAccessorImpl.java:62)
[INFO]  at jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(java.base at 11.0.11/DelegatingMethodAccessorImpl.java:43)
[INFO]  at java.lang.reflect.Method.invoke(java.base at 11.0.11/Method.java:566)
[INFO]  at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:59)
[INFO]  at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
[INFO]  at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:56)
[INFO]  at org.junit.internal.runners.statements.RunBefores.invokeMethod(RunBefores.java:33)
[INFO]  at org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:24)
[INFO]  at org.junit.internal.runners.statements.RunAfters.evaluate(RunAfters.java:27)
[INFO]  at org.junit.runners.ParentRunner$3.evaluate(ParentRunner.java:306)
[INFO]  at org.junit.runners.ParentRunner.run(ParentRunner.java:413)
[INFO]  at org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:364)
[INFO]  at org.apache.maven.surefire.junit4.JUnit4Provider.executeWithRerun(JUnit4Provider.java:272)
[INFO]  at org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:237)
[INFO]  at org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:158)
[INFO]  at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:428)
[INFO]  at org.apache.maven.surefire.booter.ForkedBooter.execute(ForkedBooter.java:162)
[INFO]  at org.apache.maven.surefire.booter.ForkedBooter.run(ForkedBooter.java:562)
[INFO]  at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:548)

[INFO] ""other-thread"":
[INFO]  at java.lang.ClassLoader$NativeLibrary.loadLibrary(java.base at 11.0.11/ClassLoader.java:2462)
[INFO]  - waiting to lock <0x00000000e11d6ad0> (a java.util.HashSet)
[INFO]  at java.lang.ClassLoader.loadLibrary0(java.base at 11.0.11/ClassLoader.java:2694)
[INFO]  at java.lang.ClassLoader.loadLibrary(java.base at 11.0.11/ClassLoader.java:2648)
[INFO]  at java.lang.Runtime.loadLibrary0(java.base at 11.0.11/Runtime.java:830)
[INFO]  at java.lang.System.loadLibrary(java.base at 11.0.11/System.java:1873)
[INFO]  at sun.security.ec.SunEC$1.run(jdk.crypto.ec at 11.0.11/SunEC.java:63)
[INFO]  at sun.security.ec.SunEC$1.run(jdk.crypto.ec at 11.0.11/SunEC.java:61)
[INFO]  at java.security.AccessController.doPrivileged(java.base at 11.0.11/Native Method)
[INFO]  at sun.security.ec.SunEC.<clinit>(jdk.crypto.ec at 11.0.11/SunEC.java:61)
[INFO]  at jdk.internal.reflect.NativeConstructorAccessorImpl.newInstance0(java.base at 11.0.11/Native Method)
[INFO]  at jdk.internal.reflect.NativeConstructorAccessorImpl.newInstance(java.base at 11.0.11/NativeConstructorAccessorImpl.java:62)
[INFO]  at jdk.internal.reflect.DelegatingConstructorAccessorImpl.newInstance(java.base at 11.0.11/DelegatingConstructorAccessorImpl.java:45)
[INFO]  at java.lang.reflect.Constructor.newInstance(java.base at 11.0.11/Constructor.java:490)
[INFO]  at java.util.ServiceLoader$ProviderImpl.newInstance(java.base at 11.0.11/ServiceLoader.java:780)
[INFO]  at java.util.ServiceLoader$ProviderImpl.get(java.base at 11.0.11/ServiceLoader.java:722)
[INFO]  at java.util.ServiceLoader$3.next(java.base at 11.0.11/ServiceLoader.java:1395)
[INFO]  at sun.security.jca.ProviderConfig$ProviderLoader.load(java.base at 11.0.11/ProviderConfig.java:340)
[INFO]  at sun.security.jca.ProviderConfig$3.run(java.base at 11.0.11/ProviderConfig.java:248)
[INFO]  at sun.security.jca.ProviderConfig$3.run(java.base at 11.0.11/ProviderConfig.java:242)
[INFO]  at java.security.AccessController.doPrivileged(java.base at 11.0.11/Native Method)
[INFO]  at sun.security.jca.ProviderConfig.doLoadProvider(java.base at 11.0.11/ProviderConfig.java:242)
[INFO]  at sun.security.jca.ProviderConfig.getProvider(java.base at 11.0.11/ProviderConfig.java:222)
[INFO]  - locked <0x00000000e20c9f58> (a sun.security.jca.ProviderConfig)
[INFO]  at sun.security.jca.ProviderList.loadAll(java.base at 11.0.11/ProviderList.java:315)
[INFO]  at sun.security.jca.ProviderList.removeInvalid(java.base at 11.0.11/ProviderList.java:332)
[INFO]  at sun.security.jca.Providers.getFullProviderList(java.base at 11.0.11/Providers.java:165)
[INFO]  - locked <0x00000000e20bc668> (a java.lang.Class for sun.security.jca.Providers)
[INFO]  at java.security.Security.getProviders(java.base at 11.0.11/Security.java:483)
[INFO]  at sun.security.x509.AlgorithmId.computeOidTable(java.base at 11.0.11/AlgorithmId.java:637)
[INFO]  at sun.security.x509.AlgorithmId.oidTable(java.base at 11.0.11/AlgorithmId.java:627)
[INFO]  - locked <0x00000000e2bdd3d0> (a java.lang.Class for sun.security.x509.AlgorithmId)
[INFO]  at sun.security.x509.AlgorithmId.algOID(java.base at 11.0.11/AlgorithmId.java:609)
[INFO]  at sun.security.x509.AlgorithmId.get(java.base at 11.0.11/AlgorithmId.java:441)
[INFO]  at sun.security.pkcs.SignerInfo.verify(java.base at 11.0.11/SignerInfo.java:380)
[INFO]  at sun.security.pkcs.PKCS7.verify(java.base at 11.0.11/PKCS7.java:578)
[INFO]  at sun.security.pkcs.PKCS7.verify(java.base at 11.0.11/PKCS7.java:595)
[INFO]  at sun.security.pkcs.SignerInfo.getTimestamp(java.base at 11.0.11/SignerInfo.java:545)
[INFO]  at sun.security.pkcs.SignerInfo.verify(java.base at 11.0.11/SignerInfo.java:318)
[INFO]  at sun.security.pkcs.PKCS7.verify(java.base at 11.0.11/PKCS7.java:578)
[INFO]  at sun.security.pkcs.PKCS7.verify(java.base at 11.0.11/PKCS7.java:595)
[INFO]  at sun.security.util.SignatureFileVerifier.processImpl(java.base at 11.0.11/SignatureFileVerifier.java:283)
[INFO]  at sun.security.util.SignatureFileVerifier.process(java.base at 11.0.11/SignatureFileVerifier.java:259)
[INFO]  at java.util.jar.JarVerifier.processEntry(java.base at 11.0.11/JarVerifier.java:316)
[INFO]  at java.util.jar.JarVerifier.update(java.base at 11.0.11/JarVerifier.java:230)
[INFO]  at java.util.jar.JarFile.initializeVerifier(java.base at 11.0.11/JarFile.java:759)
[INFO]  at java.util.jar.JarFile.ensureInitialization(java.base at 11.0.11/JarFile.java:1038)
[INFO]  - locked <0x00000000e119d0a8> (a java.util.jar.JarFile)
[INFO]  at java.util.jar.JavaUtilJarAccessImpl.ensureInitialization(java.base at 11.0.11/JavaUtilJarAccessImpl.java:69)
[INFO]  at jdk.internal.loader.URLClassPath$JarLoader$2.getManifest(java.base at 11.0.11/URLClassPath.java:870)
[INFO]  at jdk.internal.loader.BuiltinClassLoader.defineClass(java.base at 11.0.11/BuiltinClassLoader.java:786)
[INFO]  at jdk.internal.loader.BuiltinClassLoader.findClassOnClassPathOrNull(java.base at 11.0.11/BuiltinClassLoader.java:698)
[INFO]  at jdk.internal.loader.BuiltinClassLoader.loadClassOrNull(java.base at 11.0.11/BuiltinClassLoader.java:621)
[INFO]  - locked <0x00000000e204d228> (a java.lang.Object)
[INFO]  at jdk.internal.loader.BuiltinClassLoader.loadClass(java.base at 11.0.11/BuiltinClassLoader.java:579)
[INFO]  at jdk.internal.loader.ClassLoaders$AppClassLoader.loadClass(java.base at 11.0.11/ClassLoaders.java:178)
[INFO]  at java.lang.ClassLoader.loadClass(java.base at 11.0.11/ClassLoader.java:522)
[INFO]  at c.i.w.m.OtherAppCode.<init>(OtherAppCode.java:371)
[INFO]  at jdk.internal.reflect.NativeConstructorAccessorImpl.newInstance0(java.base at 11.0.11/Native Method)
[INFO]  at jdk.internal.reflect.NativeConstructorAccessorImpl.newInstance(java.base at 11.0.11/NativeConstructorAccessorImpl.java:62)
[INFO]  at jdk.internal.reflect.DelegatingConstructorAccessorImpl.newInstance(java.base at 11.0.11/DelegatingConstructorAccessorImpl.java:45)
[INFO]  at java.lang.reflect.Constructor.newInstance(java.base at 11.0.11/Constructor.java:490)
[INFO]  at java.lang.Class.newInstance(java.base at 11.0.11/Class.java:584)
[INFO]  at c.i.w.l.server.DefaultServer.lambda$doStart$0(DefaultServer.java:347)
[INFO]  at c.i.w.l.server.DefaultServer/0x00000008401c4840.run(Unknown Source)
[INFO]  at java.util.concurrent.ThreadPoolExecutor.runWorker(java.base at 11.0.11/ThreadPoolExecutor.java:1128)
[INFO]  at java.util.concurrent.ThreadPoolExecutor$Worker.run(java.base at 11.0.11/ThreadPoolExecutor.java:628)
[INFO]  at java.lang.Thread.run(java.base at 11.0.11/Thread.java:829)
[INFO]  at c.i.w.l.ThreadPoolHelper$3$1.run(ThreadPoolHelper.java:94)
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8270321,,,,"2021-04-30 00:17;avoitylov;repro.tar.gz;https://bugs.openjdk.org/secure/attachment/94458/repro.tar.gz",,,,,,,,,,,,,,,,,,,,,,,,,"0|i2smyj:",9223372036854775807,b05,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@5ae6d091,,,,,,,,,"2021-04-29 15:09;dholmes;See the discussion in the netty thread:

https://github.com/netty/netty/issues/11209;;;","2021-04-30 00:18;avoitylov;attached the reproducer I have. The issue was reproduced with all versions of 11 and 16 I have, it's not specific to 11.0.11.

Java stack information for the threads listed above:
===================================================
""Thread-1"":
	at jdk.internal.loader.NativeLibraries.loadLibrary(java.base@16.0.1/NativeLibraries.java:189)
	- waiting to lock <0x00000000fe016ef0> (a java.util.HashSet)
	at jdk.internal.loader.NativeLibraries.loadLibrary(java.base@16.0.1/NativeLibraries.java:169)
	at jdk.internal.loader.NativeLibraries.findFromPaths(java.base@16.0.1/NativeLibraries.java:310)
	at jdk.internal.loader.NativeLibraries.loadLibrary(java.base@16.0.1/NativeLibraries.java:280)
	at java.lang.ClassLoader.loadLibrary(java.base@16.0.1/ClassLoader.java:2392)
	at java.lang.Runtime.loadLibrary0(java.base@16.0.1/Runtime.java:808)
	at java.lang.System.loadLibrary(java.base@16.0.1/System.java:1893)
	at jdk.internal.jimage.NativeImageBuffer$1.run(java.base@16.0.1/NativeImageBuffer.java:41)
	at jdk.internal.jimage.NativeImageBuffer$1.run(java.base@16.0.1/NativeImageBuffer.java:39)
	at java.security.AccessController.executePrivileged(java.base@16.0.1/AccessController.java:753)
	at java.security.AccessController.doPrivileged(java.base@16.0.1/AccessController.java:312)
	at jdk.internal.jimage.NativeImageBuffer.<clinit>(java.base@16.0.1/NativeImageBuffer.java:38)
	at jdk.internal.jimage.BasicImageReader.<init>(java.base@16.0.1/BasicImageReader.java:95)
	at jdk.internal.jimage.ImageReader$SharedImageReader.<init>(java.base@16.0.1/ImageReader.java:224)
	at jdk.internal.jimage.ImageReader$SharedImageReader.open(java.base@16.0.1/ImageReader.java:238)
	- locked <0x00000000fe469c98> (a java.util.HashMap)
	at jdk.internal.jimage.ImageReader.open(java.base@16.0.1/ImageReader.java:67)
	at jdk.internal.jimage.ImageReader.open(java.base@16.0.1/ImageReader.java:71)
	at jdk.internal.jimage.ImageReaderFactory$1.apply(java.base@16.0.1/ImageReaderFactory.java:70)
	at jdk.internal.jimage.ImageReaderFactory$1.apply(java.base@16.0.1/ImageReaderFactory.java:67)
	at java.util.concurrent.ConcurrentHashMap.computeIfAbsent(java.base@16.0.1/ConcurrentHashMap.java:1708)
	- locked <0x00000000fe469bf0> (a java.util.concurrent.ConcurrentHashMap$ReservationNode)
	at jdk.internal.jimage.ImageReaderFactory.get(java.base@16.0.1/ImageReaderFactory.java:61)
	at jdk.internal.jimage.ImageReaderFactory.getImageReader(java.base@16.0.1/ImageReaderFactory.java:85)
	at jdk.internal.module.SystemModuleFinders$SystemImage.<clinit>(java.base@16.0.1/SystemModuleFinders.java:383)
	at jdk.internal.module.SystemModuleFinders$SystemModuleReader.findImageLocation(java.base@16.0.1/SystemModuleFinders.java:426)
	at jdk.internal.module.SystemModuleFinders$SystemModuleReader.find(java.base@16.0.1/SystemModuleFinders.java:437)
	at jdk.internal.loader.BuiltinClassLoader$2.run(java.base@16.0.1/BuiltinClassLoader.java:462)
	at jdk.internal.loader.BuiltinClassLoader$2.run(java.base@16.0.1/BuiltinClassLoader.java:457)
	at java.security.AccessController.executePrivileged(java.base@16.0.1/AccessController.java:784)
	at java.security.AccessController.doPrivileged(java.base@16.0.1/AccessController.java:554)
	at jdk.internal.loader.BuiltinClassLoader.findMiscResource(java.base@16.0.1/BuiltinClassLoader.java:456)
	at jdk.internal.loader.BuiltinClassLoader.findResources(java.base@16.0.1/BuiltinClassLoader.java:384)
	at jdk.internal.loader.BootLoader.findResources(java.base@16.0.1/BootLoader.java:196)
	at java.lang.ClassLoader.getResources(java.base@16.0.1/ClassLoader.java:1464)
	at java.lang.ClassLoader.getResources(java.base@16.0.1/ClassLoader.java:1462)
	at java.util.ServiceLoader$LazyClassPathLookupIterator.nextProviderClass(java.base@16.0.1/ServiceLoader.java:1195)
	at java.util.ServiceLoader$LazyClassPathLookupIterator.hasNextService(java.base@16.0.1/ServiceLoader.java:1220)
	at java.util.ServiceLoader$LazyClassPathLookupIterator.hasNext(java.base@16.0.1/ServiceLoader.java:1264)
	at java.util.ServiceLoader$2.hasNext(java.base@16.0.1/ServiceLoader.java:1299)
	at java.util.ServiceLoader$3.hasNext(java.base@16.0.1/ServiceLoader.java:1383)
	at jdk.internal.logger.BootstrapLogger$DetectBackend$1.run(java.base@16.0.1/BootstrapLogger.java:888)
	at jdk.internal.logger.BootstrapLogger$DetectBackend$1.run(java.base@16.0.1/BootstrapLogger.java:882)
	at java.security.AccessController.executePrivileged(java.base@16.0.1/AccessController.java:753)
	at java.security.AccessController.doPrivileged(java.base@16.0.1/AccessController.java:312)
	at jdk.internal.logger.BootstrapLogger$DetectBackend.<clinit>(java.base@16.0.1/BootstrapLogger.java:882)
	at jdk.internal.logger.BootstrapLogger.useLazyLoggers(java.base@16.0.1/BootstrapLogger.java:930)
	- locked <0x00000007fef2f0c8> (a java.lang.Class for jdk.internal.logger.BootstrapLogger)
	at jdk.internal.logger.LazyLoggers.getLazyLogger(java.base@16.0.1/LazyLoggers.java:439)
	at jdk.internal.logger.LazyLoggers.getLogger(java.base@16.0.1/LazyLoggers.java:414)
	at java.lang.System.getLogger(java.base@16.0.1/System.java:1679)
	at jdk.internal.event.EventHelper.isLoggingSecurity(java.base@16.0.1/EventHelper.java:148)
	at sun.security.provider.X509Factory.commitEvent(java.base@16.0.1/X509Factory.java:773)
	at sun.security.provider.X509Factory.engineGenerateCertificate(java.base@16.0.1/X509Factory.java:108)
	at java.security.cert.CertificateFactory.generateCertificate(java.base@16.0.1/CertificateFactory.java:355)
	at sun.security.pkcs.PKCS7.parseSignedData(java.base@16.0.1/PKCS7.java:317)
	at sun.security.pkcs.PKCS7.parse(java.base@16.0.1/PKCS7.java:174)
	at sun.security.pkcs.PKCS7.parse(java.base@16.0.1/PKCS7.java:142)
	at sun.security.pkcs.PKCS7.<init>(java.base@16.0.1/PKCS7.java:124)
	at sun.security.util.SignatureFileVerifier.<init>(java.base@16.0.1/SignatureFileVerifier.java:117)
	at java.util.jar.JarVerifier.processEntry(java.base@16.0.1/JarVerifier.java:297)
	at java.util.jar.JarVerifier.update(java.base@16.0.1/JarVerifier.java:230)
	at java.util.jar.JarFile.initializeVerifier(java.base@16.0.1/JarFile.java:757)
	at java.util.jar.JarFile.getInputStream(java.base@16.0.1/JarFile.java:840)
	- locked <0x00000000fe3d8858> (a java.util.jar.JarFile)
	at jdk.internal.loader.URLClassPath$JarLoader$2.getInputStream(java.base@16.0.1/URLClassPath.java:869)
	at jdk.internal.loader.Resource.cachedInputStream(java.base@16.0.1/Resource.java:77)
	- locked <0x00000000fe3d9ad0> (a jdk.internal.loader.URLClassPath$JarLoader$2)
	at jdk.internal.loader.Resource.getByteBuffer(java.base@16.0.1/Resource.java:163)
	at jdk.internal.loader.BuiltinClassLoader.defineClass(java.base@16.0.1/BuiltinClassLoader.java:846)
	at jdk.internal.loader.BuiltinClassLoader.findClassOnClassPathOrNull(java.base@16.0.1/BuiltinClassLoader.java:753)
	at jdk.internal.loader.BuiltinClassLoader.loadClassOrNull(java.base@16.0.1/BuiltinClassLoader.java:676)
	- locked <0x00000000fe3d71f8> (a java.lang.Object)
	at jdk.internal.loader.BuiltinClassLoader.loadClass(java.base@16.0.1/BuiltinClassLoader.java:634)
	at jdk.internal.loader.ClassLoaders$AppClassLoader.loadClass(java.base@16.0.1/ClassLoaders.java:182)
	at java.lang.ClassLoader.loadClass(java.base@16.0.1/ClassLoader.java:519)
	at java.lang.Class.forName0(java.base@16.0.1/Native Method)
	at java.lang.Class.forName(java.base@16.0.1/Class.java:375)
	at Main$2.run(Main.java:24)
""Thread-0"":
	at java.util.zip.ZipFile.getEntry(java.base@16.0.1/ZipFile.java:327)
	- waiting to lock <0x00000000fe3d8858> (a java.util.jar.JarFile)
	at java.util.jar.JarFile.getEntry(java.base@16.0.1/JarFile.java:513)
	at java.util.jar.JarFile.getJarEntry(java.base@16.0.1/JarFile.java:468)
	at jdk.internal.loader.URLClassPath$JarLoader.getResource(java.base@16.0.1/URLClassPath.java:932)
	at jdk.internal.loader.URLClassPath.getResource(java.base@16.0.1/URLClassPath.java:317)
	at jdk.internal.loader.BuiltinClassLoader.findClassOnClassPathOrNull(java.base@16.0.1/BuiltinClassLoader.java:750)
	at jdk.internal.loader.BuiltinClassLoader.loadClassOrNull(java.base@16.0.1/BuiltinClassLoader.java:676)
	- locked <0x00000000fe5c3d98> (a java.lang.Object)
	at jdk.internal.loader.BuiltinClassLoader.loadClass(java.base@16.0.1/BuiltinClassLoader.java:634)
	at jdk.internal.loader.ClassLoaders$AppClassLoader.loadClass(java.base@16.0.1/ClassLoaders.java:182)
	at java.lang.ClassLoader.loadClass(java.base@16.0.1/ClassLoader.java:519)
	at jdk.internal.loader.NativeLibraries.load(java.base@16.0.1/Native Method)
	at jdk.internal.loader.NativeLibraries$NativeLibraryImpl.open(java.base@16.0.1/NativeLibraries.java:383)
	at jdk.internal.loader.NativeLibraries.loadLibrary(java.base@16.0.1/NativeLibraries.java:227)
	- locked <0x00000000fe016ef0> (a java.util.HashSet)
	at jdk.internal.loader.NativeLibraries.loadLibrary(java.base@16.0.1/NativeLibraries.java:169)
	at java.lang.ClassLoader.loadLibrary(java.base@16.0.1/ClassLoader.java:2383)
	at java.lang.Runtime.load0(java.base@16.0.1/Runtime.java:746)
	at java.lang.System.load(java.base@16.0.1/System.java:1857)
	at A1.<clinit>(A1.java:5)
	at java.lang.Class.forName0(java.base@16.0.1/Native Method)
	at java.lang.Class.forName(java.base@16.0.1/Class.java:375)
	at Main$1.run(Main.java:11)

Found 1 deadlock.
;;;","2021-04-30 00:32;avoitylov;[~chegar]  it seems like you came up with a very similar reproducer and I don't want to duplicate efforts. Let me know if you prefer to handle this issue.;;;","2021-05-04 02:24;avoitylov;A prototype for the fix which avoids synchronized(this) in java/util/zip/ZipFile.java for most cases is being tested now.;;;","2021-05-11 06:08;avoitylov;the fix actually belongs to Class Loader code, moving the bug to appropriate category.;;;","2021-07-06 04:15;roboduke;Changeset: e47803a8
Author:    Aleksei Voitylov <avoitylov@openjdk.org>
Committer: Alexander Scherbatiy <alexsch@openjdk.org>
Date:      2021-07-06 11:15:10 +0000
URL:       https://git.openjdk.java.net/jdk/commit/e47803a84feb6d831c6c6158708d29b4fffc99c9
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,
"Key protection using PBEWithMD5AndDES fails with ""java.security.InvalidAlgorithmParameterException: Salt must be 8 bytes long""",JDK-8266293,5048407,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,weijun,tvoniadka,tvoniadka,2021-04-29 04:43,2021-06-24 13:22,2023-10-01 09:57,2021-05-06 11:01,11.0.12-oracle,17,7u311,8u301,,,,17,security-libs,,0,CPU21_07-critical-approved,CPU21_07-critical-SQE-OK,jdk11u-fix-request,jdk11u-fix-yes,pkcs12-crypto,regression,sqebug,,,,,,,"Attached is a test that reads the in-memory key and certificate bytes, constructs a key and certificate chain, and attempts to import those onto a PKCS12 keystore. The default execution works well. However, if we run:

java -Dkeystore.pkcs12.keyProtectionAlgorithm=PBEWithMD5AndDES PKCS12Tester

---------------------------------------------

Exception in thread ""main"" java.security.KeyStoreException: Key protection algorithm not found: java.security.UnrecoverableKeyException: Encrypt Private Key failed: Salt must be 8 bytes long
	at java.base/sun.security.pkcs12.PKCS12KeyStore.setKeyEntry(PKCS12KeyStore.java:709)
	at java.base/sun.security.pkcs12.PKCS12KeyStore.engineSetKeyEntry(PKCS12KeyStore.java:589)
	at java.base/sun.security.util.KeyStoreDelegator.engineSetKeyEntry(KeyStoreDelegator.java:111)
	at java.base/java.security.KeyStore.setKeyEntry(KeyStore.java:1167)
	at PKCS12Tester.main(PKCS12Tester.java:81)
Caused by: java.security.UnrecoverableKeyException: Encrypt Private Key failed: Salt must be 8 bytes long
	at java.base/sun.security.pkcs12.PKCS12KeyStore.encryptPrivateKey(PKCS12KeyStore.java:951)
	at java.base/sun.security.pkcs12.PKCS12KeyStore.setKeyEntry(PKCS12KeyStore.java:631)
	... 4 more
Caused by: java.security.InvalidAlgorithmParameterException: Salt must be 8 bytes long
	at java.base/com.sun.crypto.provider.PBES1Core.init(PBES1Core.java:241)
	at java.base/com.sun.crypto.provider.PBES1Core.init(PBES1Core.java:347)
	at java.base/com.sun.crypto.provider.PBEWithMD5AndDESCipher.engineInit(PBEWithMD5AndDESCipher.java:227)
	at java.base/javax.crypto.Cipher.implInit(Cipher.java:875)
	at java.base/javax.crypto.Cipher.chooseProvider(Cipher.java:929)
	at java.base/javax.crypto.Cipher.init(Cipher.java:1585)
	at java.base/javax.crypto.Cipher.init(Cipher.java:1516)
	at java.base/sun.security.pkcs12.PKCS12KeyStore.encryptPrivateKey(PKCS12KeyStore.java:931)
	... 5 more

-----------------------------------------------

In comparison, openssl seems to have no issues with the same algorithm:

$ openssl version
OpenSSL 1.0.2k-fips  26 Jan 2017

$ openssl pkcs12 -export -in rsa.cert.pem -inkey rsa.pkey.pem -name a -passout pass:hello -keypbe PBE-MD5-DES >/dev/null && echo $?
0

I went through the PKCS12KeyStore implementation, and have included at the end of the same attached program, what I think is taking place in the implementation, reaching at the exception.",,,,,,,,,,,JDK-8266986,JDK-8266980,JDK-8269328,JDK-8266928,JDK-8267034,JDK-8266926,JDK-8267453,JDK-8266921,,,,,,,,,,,,,,,,,,,JDK-8076190,,,,"2021-04-29 04:40;tvoniadka;PKCS12Tester.java;https://bugs.openjdk.org/secure/attachment/94442/PKCS12Tester.java","2021-04-29 04:43;tvoniadka;rsa.cert.pem;https://bugs.openjdk.org/secure/attachment/94440/rsa.cert.pem","2021-04-29 04:43;tvoniadka;rsa.pkey.pem;https://bugs.openjdk.org/secure/attachment/94441/rsa.pkey.pem",,,,,,,,,,,,,,,,,,,,,,,"0|i2smsz:",9223372036854775807,b22,,,,,,,,,,,,"2021-04-30 10:37;weijun;PKCS12KeyStore always uses a 20-byte salt in encryption but PBEWithMD5AndDES only accepts 8-byte salt. With this code change, the salt used for this algorithm will be 8 bytes.

RFC 2898 only requires the salt to be at least 8 bytes, but I don't intend to modify the PBES1Core.java to accept a long salt. Otherwise, a newly generated PKCS #12 file using a long salt will not be recognized by an old JDK.

Also, although PBES1Core.java also take cares of another algorithm named PBEWithMD5AndDESede but it's not usable in a PKCS #12 keystore as we have not defined its Object Identifier anywhere.;;;","2021-04-30 10:40;weijun;The fix in JDK 17 uses `KnownOIDs.findMatch(algorithm) == KnownOIDs.PBEWithMD5AndDES` to detect whether PBEWithMD5AndDES is used. Backporters might need to check case-insensitive equality to both ""PBEWithMD5AndDES"" and ""1.2.840.113549.1.5.3"" because both the algorithm name and OID can be specified through the system property.;;;","2021-05-05 18:19;valeriep;RFC 2898 has salt length to be ""exact"" 8 bytes for PBKDF1 and PBES1 which is what PBEwithMD5AndDES is based upon. So, it's correct for PBES1Core to enforce 8-byte salt length. However, for the newer PBE algorithms, e.g. PBKDF2, PBES2, PBMAC1, the salt does not have a fixed length.;;;","2021-05-05 19:38;weijun;Ah, I must be reading RFC 8018, where it is ""at least eight octets (64 bits) long"".

Wait, RFC 2898 Page 7 also says ""It should be at least eight octets"" but then in the algorithms description uses 8-byte salt again.;;;","2021-05-06 11:01;roboduke;Changeset: 04f71126
Author:    Weijun Wang <weijun@openjdk.org>
Date:      2021-05-06 18:00:11 +0000
URL:       https://git.openjdk.java.net/jdk/commit/04f71126479f9c39aa71e8aebe7196d72fc16796
;;;","2021-05-18 08:10;mdoerr;Fix Request (11u)
Should get backported for parity with 11.0.12-oracle. Included test shows that it's needed. It applies almost cleanly, but requires an adaptation. Review thread:
http://mail.openjdk.java.net/pipermail/jdk-updates-dev/2021-May/006240.html;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,
(jrtfs) Calling Files.exists may break the JRT filesystem,JDK-8266291,5048405,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,sundar,jlahoda,jlahoda,2021-04-29 04:02,2021-05-19 18:06,2023-10-01 09:57,2021-05-14 06:00,17,,,,,,,17,tools,,0,,,,,,,,,,,,,,"Consider this code (also attached):
---
package jrtfstest;

import java.net.URI;
import java.nio.file.FileSystems;
import java.nio.file.Files;
import java.nio.file.Path;

public class JRTFSTest {

    public static void main(String[] args) throws Exception {
        Path p = FileSystems.getFileSystem(new URI(""jrt:///"")).getPath(""modules"");
        boolean wasDirectory = Files.isDirectory(p);
        Path m = p.resolve(""modules"");
        Files.exists(m);
        if (wasDirectory != Files.isDirectory(p)) {
            throw new AssertionError(""The status of 'p' changed from: "" + wasDirectory +
                                      "" to: "" + Files.isDirectory(p));
        }
    }
    
}
---

Running like this:
---
$ java /tmp/JavaApplication71/src/jrtfstest/JRTFSTest.java
Exception in thread ""main"" java.lang.AssertionError: The status of 'p' changed from: true to: false
        at jrtfstest.JRTFSTest.main(JRTFSTest.java:17)
---

By calling Files.exists on ""m"", the result from Files.isDirectory for ""p"" changed - that does not seem right.

This was found while evaluating why this test fails:
https://github.com/apache/netbeans/blob/903b73c7ed9284df976f3ba466e8696b51d64167/java/classfile/test/unit/src/org/netbeans/modules/classfile/ModuleTest.java#L209

I think the test was originally trying to work on various old development versions of JRT FS, so was trying to determine whether ""modules"" directory exists or not, but it breaks the filesystem.
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"2021-04-29 03:55;jlahoda;JRTFSTest.java;https://bugs.openjdk.org/secure/attachment/94439/JRTFSTest.java",,,,,,,,,,,,,,,,,,,,,,,,,"0|i2smsj:",9223372036854775807,b23,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@3da653bd,,,,,,,,,"2021-05-14 06:00;roboduke;Changeset: af4cd04c
Author:    Athijegannathan Sundararajan <sundar@openjdk.org>
Date:      2021-05-14 12:59:41 +0000
URL:       https://git.openjdk.java.net/jdk/commit/af4cd04c2e393f8d1ffef60f49e3269adee649b8
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
assert root method not found in witnessed_reabstraction_in_supers is too strong,JDK-8266288,5048400,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,jcm,jcm,jcm,2021-04-29 01:19,2021-06-16 05:24,2023-10-01 09:57,2021-04-29 09:17,11,16,17,7,8,,,17,hotspot,,0,graal,hs-comp-triaged,jdk11u-fix-request,jdk11u-fix-yes,jdk16u-fix-request,jdk16u-fix-SQE-ok,jdk16u-fix-yes,oracle-triage-11,oracle-triage-17,redhat-interest,,,,"https://github.com/openjdk/jdk/blob/master/src/hotspot/share/code/dependencies.cpp#L1325

assert root method not found in witnessed_reabstraction_in_supers is too strong, so removing it.",,,,,,,,,,,JDK-8266656,JDK-8268891,JDK-8267025,JDK-8267360,,,,,,,,,,,,,,,,,,,JDK-8264079,JDK-8244543,,,,,,,,,,,,,,,,,,generic,,,,,,,,,generic,,,,,"0|i2smrf:",9223372036854775807,b21,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2021-04-29 09:17;roboduke;Changeset: 49d04586
Author:    Jamsheed Mohammed C M <jcm@openjdk.org>
Date:      2021-04-29 16:16:42 +0000
URL:       https://git.openjdk.java.net/jdk/commit/49d04586ed27fc905083d60aa68793d84824c7f3
;;;","2021-04-29 23:28;thartmann;ILW = MMH = P3;;;","2021-05-03 06:20;mdoerr;It's not limited to graal. Can be observed on PPC64 which has no graal implementation.;;;","2021-05-04 14:26;mdoerr;Fix Request (16u)
The too strong assertion was also observed in 16u. Removal is trivial and applies cleanly.;;;","2021-06-01 00:18;shade;Fix Request (11u)

This removes the overly strong assert and keeps codebases in sync (I see 11.0.13-oracle). Patch applies cleanly to 11u, passes tier1.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Lookup::accessClass fails with IAE when accessing an arrayClass with a protected inner class as component class,JDK-8266269,5048375,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,mchung,rpatil,rpatil,2021-04-28 21:54,2021-07-18 12:29,2023-10-01 09:57,2021-06-26 11:29,16,,,,,,,17,core-libs,,0,,,,,,,,,,,,,,"MethodHandles$Lookup.accessClass does not follow its documentation:
https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/invoke/MethodHandles.Lookup.html#accessClass(java.lang.Class)

Specifically, it throws an exception when accessing an Array Class with a protected inner class as component class when using lookup object with full capabilities
(ie. java.lang.IllegalAccessException: access violation: class [Lp.A$TEST;, from q.B (unnamed module @60215eee)  in the testcase provided)

The expected behavior is accessClass should allow the access and return the passed in class.

Testcase:

package p;

public class A {
    protected enum TEST { ONE }
}



package q;

import p.A;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.MethodHandles;
import java.lang.invoke.MethodType;

public class B extends A {
    public static void main(String[] args) throws Throwable {
        TEST[] arr = new TEST[1];
        Class<?> arrClass = arr.getClass();

        //1) is TEST[] visible
        try {
            MethodHandles.Lookup l = MethodHandles.lookup();
            Class<?> accessClass = l.accessClass(arrClass);
            System.out.println(""Passed! accessClass is: ""
                               + accessClass.getName());
        } catch (Exception e) {
            System.out.println(e);
        }

        //2) Byte code behaviour with TEST[]
        meth(null);

        //3) MH lookup with TEST[]
        MethodHandle mh = MethodHandles.lookup().findStatic(B.class, ""meth"", MethodType.methodType(void.class, TEST[].class));
        mh.invoke(null);
    }

    public static void meth(TEST[] arr) {
        System.out.println(""called method"");
    }
}
",,,,,,,,,,,JDK-8270658,JDK-8269464,,,,,,,,,,,,JDK-8269312,,,,,,,,,JDK-8269689,,,,JDK-8207027,JDK-8022718,JDK-8150782,,,,,,,,,,,,,generic,,,,,,,,,generic,,,,,"0|i2smlv:",9223372036854775807,b29,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@1cfeb1de,,,,,,,,,"2021-06-24 11:36;mchung;Lookup::accessClass can test if an array class is accessible.  An array class is accessible if and only if the element type of the specified array class is accessible.

It's a bug in the implementation that accessibility should be determined using the element type rather than the array type.;;;","2021-06-26 11:28;roboduke;Changeset: 6eb734a6
Author:    Mandy Chung <mchung@openjdk.org>
Date:      2021-06-26 18:27:28 +0000
URL:       https://git.openjdk.java.net/jdk17/commit/6eb734a60fdd982c94dd152a803809f148bff582
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Fix foreign linker build issues for ppc and s390,JDK-8266257,5048361,Bug,Resolved,JDK,JDK,software,duke,,,P2,Fixed,mcimadamore,mcimadamore,mcimadamore,2021-04-28 14:38,2021-09-22 02:01,2023-10-01 09:57,2021-06-03 02:42,17,,,,,,,17,hotspot,,0,hs-comp-triaged,noreg-build,oracle-triage-11,oracle-triage-17,,,,,,,,,,"The implementation for JEP-412 introduces 4 functions in sharedRuntime:

static void   move32_64(MacroAssembler* masm, VMRegPair src, VMRegPair dst);
  static void   long_move(MacroAssembler* masm, VMRegPair src, VMRegPair dst);
  static void  float_move(MacroAssembler* masm, VMRegPair src, VMRegPair dst);
  static void double_move(MacroAssembler* masm, VMRegPair src, VMRegPair dst);

Having these functions declaration in sharedRuntime makes sense as a way to reuse code; note that these are then implemented in platform specific ways (see sharedRuntime_aarch64.cpp).

Unfortunately, in certain architectures (s390, ppc) the implementation for these routines has an incompatible signature, which means the build for these architecture fails.

Since these routine are only used by universalUpcallHandler (which is also platform specific), a better approach would be to move these routines under the (platform-specific) MacroAssembler class. This way these functions will not be forced on all architectures.

A preview of these changes are in the following branch:
https://github.com/openjdk/jdk/compare/master...mcimadamore:JEP-412-build-platforms?expand=1",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8264774,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2smir:",9223372036854775807,b26,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2021-06-03 02:42;roboduke;Changeset: 29ab1628
Author:    Maurizio Cimadamore <mcimadamore@openjdk.org>
Date:      2021-06-03 09:41:21 +0000
URL:       https://git.openjdk.java.net/jdk/commit/29ab16284a4f1ac7ed691fd12cb622b0440c04be
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
compiler.vectorization.TestBufferVectorization does testing twice,JDK-8266256,5048360,Bug,Resolved,JDK,JDK,software,duke,,,P5,Fixed,iignatyev,iignatyev,iignatyev,2021-04-28 14:29,2021-06-03 05:33,2023-10-01 09:57,2021-04-28 20:51,16,17,,,,,,17,hotspot,,0,hs-comp-triaged,noreg-self,oracle-triage-17,,,,,,,,,,,"`compiler.vectorization.TestBufferVectorization` runs the testing twice, one time in the JVM created by jtreg, and once again by the JVM created by TestBufferVectorization.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2smij:",9223372036854775807,b21,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2021-04-28 20:51;roboduke;Changeset: 6b263e68
Author:    Igor Ignatyev <iignatyev@openjdk.org>
Date:      2021-04-29 03:50:44 +0000
URL:       https://git.openjdk.java.net/jdk/commit/6b263e6832ca13e43b0389434ef196ee7be458c7
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
compiler/eliminateAutobox/TestEliminateBoxInDebugInfo.java uses wrong package name,JDK-8266255,5048359,Bug,Resolved,JDK,JDK,software,duke,,,P5,Fixed,iignatyev,iignatyev,iignatyev,2021-04-28 14:18,2021-11-10 01:53,2023-10-01 09:57,2021-04-28 17:12,17,,,,,,,17,hotspot,,0,hs-comp-triaged,noreg-self,oracle-triage-17,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8261137,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2smib:",9223372036854775807,b21,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2021-04-28 17:12;roboduke;Changeset: 03d4149d
Author:    Igor Ignatyev <iignatyev@openjdk.org>
Date:      2021-04-29 00:12:08 +0000
URL:       https://git.openjdk.java.net/jdk/commit/03d4149d0cd6a33bf42f978a2501664884ebb773
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
compiler.inlining.InlineAccessors shouldn't do testing in driver VM,JDK-8266251,5048355,Bug,Resolved,JDK,JDK,software,duke,,,P5,Fixed,iignatyev,iignatyev,iignatyev,2021-04-28 13:57,2022-03-15 04:05,2023-10-01 09:57,2021-04-28 17:13,11,17,,,,,,17,hotspot,,0,hs-comp-triaged,jdk11u-fix-request,jdk11u-fix-yes,noreg-self,oracle-triage-17,testbug,,,,,,,,"`compiler.inlining.InlineAccessors` test executes `doTest` method in its `InlineAccessors::main`, but InlineAccessors is run in driver mode (so it's not expected to do actual testing and strictly speaking can be executed in JVM other than JVM under test).",,,,,,,,,,,JDK-8280920,JDK-8283170,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2smhf:",9223372036854775807,b21,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2021-04-28 17:13;roboduke;Changeset: 9605aedd
Author:    Igor Ignatyev <iignatyev@openjdk.org>
Date:      2021-04-29 00:12:56 +0000
URL:       https://git.openjdk.java.net/jdk/commit/9605aeddee70ba4f3dba2ae2a3d100319164b03d
;;;","2022-03-14 07:53;mdoerr;Fix Request (11u):
Should get backported for parity with 11.0.16-oracle. Applies cleanly. Test has passed.;;;","2022-03-14 07:56;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk11u-dev/pull/892
Date: 2022-03-14 14:51:48 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
"WebSocketTest and WebSocketProxyTest call assertEquals(List<byte[]>, List<byte[]>)",JDK-8266250,5048354,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,dfuchs,dfuchs,dfuchs,2021-04-28 13:38,2023-07-17 02:16,2023-10-01 09:57,2021-04-29 09:15,,,,,,,,17,core-libs,,0,jdk11u-fix-request,jdk11u-fix-yes,noreg-self,,,,,,,,,,,"Although this appears to be working at the moment this is a bit fragile, and give poor diagnostics in case of failure.",,,,,,,,,,,JDK-8266359,JDK-8312161,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2smh7:",9223372036854775807,b21,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@446e124a,,,,,,,,,"2021-04-29 09:15;roboduke;Changeset: 01415f33
Author:    Daniel Fuchs <dfuchs@openjdk.org>
Date:      2021-04-29 16:15:06 +0000
URL:       https://git.openjdk.java.net/jdk/commit/01415f33e34621294832c165f21b112ed1c54103
;;;","2022-07-21 01:14;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk11u-dev/pull/1253
Date: 2022-07-21 08:05:16 +0000;;;","2022-07-21 01:18;gdams;Fix request (11u)

I'd like to backport this change as part of the wider effort to bump JDK11u to jtreg 6;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
javax/swing/JPopupMenu/7156657/bug7156657.java fails on macOS,JDK-8266249,5048353,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,kizune,prr,prr,2021-04-28 13:26,2023-08-15 22:06,2023-10-01 09:57,2021-05-09 20:22,17,,,,,,,17,client-libs,,0,noreg-self,sn_92,testbug,,,,,,,,,,,"This test was just stabilized under bug ID https://bugs.openjdk.java.net/browse/JDK-8171381

However a recent test run executing the jtregtests 40 times on JDK 17 for macOS 11 ARM reproduced it once - and that was using the fixed test.

So there's still a problem with this test although a rare-ish one.

Test log :
----------System.out:(0/0)----------
----------System.err:(13/782)----------
java.lang.RuntimeException: The test failed
	at bug7156657.main(bug7156657.java:124)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:78)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at com.sun.javatest.regtest.agent.MainWrapper$MainThread.run(MainWrapper.java:127)
	at java.base/java.lang.Thread.run(Thread.java:831)

JavaTest Message: Test threw exception: java.lang.RuntimeException: The test failed
JavaTest Message: shutting down test

STATUS:Failed.`main' threw exception: java.lang.RuntimeException: The test failed
----------rerun:(42/7045)*----------",,,,,,,,,,,JDK-8314339,JDK-8304229,JDK-8313879,,,,,,,,,,,,,,,,,,,,,,,,JDK-8171381,,,,,,,,,,,,,,,aarch64,,,,,,,,,os_x,,,,,"0|i2smgz:",9223372036854775807,b22,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@568a5b31,,,,,,,,,"2021-05-03 12:28;kizune;During investigation i have found that when screenshot was taken the popup's offset due to the screen insets were not taking into account which can lead to wrong results and false positives. I also added a bunch of screenshots to be able to triage this test better in case if it fails down the line.;;;","2021-05-04 19:22;kizune;Link to a clean test run: https://mach5.us.oracle.com/mdash/jobs?search=id:azuev-integration-20210504-1427-20531704;;;","2021-05-09 20:22;roboduke;Changeset: 9b769550
Author:    Alexander Zuev <kizune@openjdk.org>
Date:      2021-05-10 03:21:52 +0000
URL:       https://git.openjdk.java.net/jdk/commit/9b769550242e8bf6f9e783bf0d6f4a87d0c6376d
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Compilation failure in PLATFORM_API_MacOSX_MidiUtils.c with Xcode 12.5,JDK-8266248,5048352,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,serb,dholmes,dholmes,2021-04-28 13:21,2021-09-14 05:54,2023-10-01 09:57,2021-05-01 22:30,17,,,,,,,17,client-libs,,0,11-bp,azul-interest,jdk11u-fix-request,jdk11u-fix-yes,jdk13u-fix-request,jdk13u-fix-yes,jdk15u-fix-request,jdk15u-fix-yes,noreg-cleanup,,,,,"Dmitry reports:

After upgrade to macOS 11.3 on aarch64  and with XCode 12.5 consistently getting the following for 'make images'

src/java.desktop/macosx/native/libjsound/PLATFORM_API_MacOSX_MidiUtils.c:258:31: error: cast to smaller integer type 'MIDIClientRef' (aka 'unsigned int') from 'void *' [-Werror,-Wvoid-pointer-to-int-cast]
static MIDIClientRef client = (MIDIClientRef) NULL;
                              ^~~~~~~~~~~~~~~~~~~~
/jdk/src/java.desktop/macosx/native/libjsound/PLATFORM_API_MacOSX_MidiUtils.c:259:29: error: cast to smaller integer type 'MIDIPortRef' (aka 'unsigned int') from 'void *' [-Werror,-Wvoid-pointer-to-int-cast]
static MIDIPortRef inPort = (MIDIPortRef) NULL;
                            ^~~~~~~~~~~~~~~~~~
/jdk/src/java.desktop/macosx/native/libjsound/PLATFORM_API_MacOSX_MidiUtils.c:260:30: error: cast to smaller integer type 'MIDIPortRef' (aka 'unsigned int') from 'void *' [-Werror,-Wvoid-pointer-to-int-cast]
static MIDIPortRef outPort = (MIDIPortRef) NULL;
                             ^~~~~~~~~~~~~~~~~~
/jdk/src/java.desktop/macosx/native/libjsound/PLATFORM_API_MacOSX_MidiUtils.c:466:32: error: cast to smaller integer type 'MIDIEndpointRef' (aka 'unsigned int') from 'void *' [-Werror,-Wvoid-pointer-to-int-cast]
    MIDIEndpointRef endpoint = (MIDIEndpointRef) NULL;
                               ^~~~~~~~~~~~~~~~~~~~~~
4 errors generated.
make[3]: *** [/jdk/build/macosx-aarch64-server-release/support/native/java.desktop/libjsound/PLATFORM_API_MacOSX_MidiUtils.o] Error 1
make[3]: *** Waiting for unfinished jobs....
make[2]: *** [java.desktop-libs] Error 2
make[2]: *** Waiting for unfinished jobs....
ERROR: Build failed for targets 'clean all' in configuration 'macosx-aarch64-server-release' (exit code 2)",,,,,,,,,,,JDK-8266464,JDK-8273702,JDK-8273703,JDK-8269079,JDK-8270198,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,aarch64,,,,,,,,,os_x,,,,,"0|i2smgr:",9223372036854775807,b21,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@7d98911c,,,,,,,,,"2021-04-28 16:17;prr;I doubt it is aarch64 specific.;;;","2021-04-30 03:34;jespersm;This is not aarch64 specific -- happens for me too on x86_64 intel macOS Big Sur. 
The patch in https://github.com/openjdk/jdk/pull/3808 looks good.;;;","2021-05-01 22:30;roboduke;Changeset: dedddd5a
Author:    Sergey Bylokhov <serb@openjdk.org>
Date:      2021-05-02 05:29:12 +0000
URL:       https://git.openjdk.java.net/jdk/commit/dedddd5ab2e39a30a039d24f629a7974048b0923
;;;","2021-05-02 04:30;dbessono;The problem is not seen any more with the fix integrated to the repository. Thanks [~serb] for quick fix!;;;","2021-06-18 14:49;phh;Fix Request (11u).

Clean and trivial backport.
;;;","2021-09-13 10:21;vkempik;Fix Request (13u, 15u).

Clean and trivial backport. To fix builds with xcode12.5;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,
Swing test bug7154030.java sometimes fails on macOS 11 ARM,JDK-8266247,5048351,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,kizune,prr,prr,2021-04-28 13:16,2022-12-03 11:47,2023-10-01 09:57,2022-04-20 09:50,17,18,19,,,,,19,client-libs,,0,aarch64,intermittent,macos,macos11,sn_116,test_sprint,tier4,,,,,,,"javax/swing/JComponent/7154030/bug7154030.java failed 3 times in 40 runs on JDK 17 EA macOS 11 ARM port.



----------System.out:(0/0)----------
----------System.err:(13/812)----------
java.lang.Exception: Failed to hide non-opaque button
	at bug7154030.main(bug7154030.java:200)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:78)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at com.sun.javatest.regtest.agent.MainWrapper$MainThread.run(MainWrapper.java:127)
	at java.base/java.lang.Thread.run(Thread.java:831)

JavaTest Message: Test threw exception: java.lang.Exception: Failed to hide non-opaque button
JavaTest Message: shutting down test

STATUS:Failed.`main' threw exception: java.lang.Exception: Failed to hide non-opaque button
----------rerun:(42/7912)*----------",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"2022-04-12 15:26;kizune;diff.png;https://bugs.openjdk.org/secure/attachment/98561/diff.png","2022-04-11 23:54;psadhukhan;imageHide.png;https://bugs.openjdk.org/secure/attachment/98537/imageHide.png","2022-04-11 23:54;psadhukhan;imageInit.png;https://bugs.openjdk.org/secure/attachment/98538/imageInit.png",,,,,,,,,aarch64,,,,,,,,,os_x,,,,,"0|i2smgj:",9223372036854775807,b20,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@568a5b31,,,,,,,,,"2022-04-11 08:24;dcubed;Here's a log file snippet from the jdk-19+18-1178-tier4 sighting: 

javax/swing/JComponent/7154030/bug7154030.java

#section:main
----------messages:(5/182)----------
command: main bug7154030
reason: User specified action: run main bug7154030 
Mode: othervm
Additional options from @modules: --add-modules java.desktop
elapsed time (seconds): 5.184
----------configuration:(3/40)----------
Boot Layer
  add modules: java.desktop

----------System.out:(0/0)----------
----------System.err:(11/613)----------
java.lang.Exception: Failed to hide opaque button
	at bug7154030.main(bug7154030.java:154)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:578)
	at com.sun.javatest.regtest.agent.MainWrapper$MainThread.run(MainWrapper.java:127)
	at java.base/java.lang.Thread.run(Thread.java:828)

JavaTest Message: Test threw exception: java.lang.Exception: Failed to hide opaque button
JavaTest Message: shutting down test

STATUS:Failed.`main' threw exception: java.lang.Exception: Failed to hide opaque button
----------rerun:(42/7478)*----------

The screen1.png file shows an empty desktop.;;;","2022-04-11 23:52;psadhukhan;From the generated imageInit, ImageHide images (attached), it looks alike 
This test was modified recently in the past by [~kizune] via JDK-8268284, JDK-8261689
with same failing cause so assigning to him ;;;","2022-04-12 15:25;kizune;I downloaded the test directory and compared the initial screenshot and the screenshot after the button is hidden. While visually it appears identical i did comparison and the values are slightly different. Here's the diff heatmap that i made and it looks somewhat like a dithering artifacts. Trying to figure out how that could have happened.

Plus in couple of test failures there is a cursor on the screen and it also has the dithering artifacts around its shadow.;;;","2022-04-19 21:51;kizune;Analyzing the results and doing more testing i found out that the pixels that are different are the same run to run - even when there are days passed between test runs. Could it be a hardware problem like faulty video memory? Anyways - the easy way to escape the color shift is to use primary colors - red, white and black - and so i'm changing the test case to use these colors. Did a number of runs on that machine with the change, seems to be stable.;;;","2022-04-19 21:57;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/8313
Date: 2022-04-20 04:52:08 +0000;;;","2022-04-20 09:50;dukebot;Changeset: 018017a9
Author:    Alexander Zuev <kizune@openjdk.org>
Date:      2022-04-20 16:47:59 +0000
URL:       https://git.openjdk.java.net/jdk/commit/018017a9175cbfe02e9db0db402ca2aa689ac587
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,
Swing test PressedIconTest.java sometimes fails on macOS 11 ARM,JDK-8266246,5048350,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,psadhukhan,prr,prr,2021-04-28 13:13,2022-10-28 00:37,2023-10-01 09:57,2022-04-19 00:02,11,17,,,,,,19,client-libs,,0,intermittent,macos,macos11,sn_116,test_sprint,,,,,,,,,"javax/swing/JButton/8151303/PressedIconTest.java failed 2 times in 40 runs on JDK 17 EA macOS 11 ARM port.



----------System.out:(0/0)----------
----------System.err:(13/809)----------
java.lang.RuntimeException: Colors are different!
	at PressedIconTest.main(PressedIconTest.java:88)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:78)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at com.sun.javatest.regtest.agent.MainWrapper$MainThread.run(MainWrapper.java:127)
	at java.base/java.lang.Thread.run(Thread.java:831)

JavaTest Message: Test threw exception: java.lang.RuntimeException: Colors are different!
JavaTest Message: shutting down test

STATUS:Failed.`main' threw exception: java.lang.RuntimeException: Colors are different!",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,aarch64,,,,,,,,,os_x,,,,,"0|i2smgb:",9223372036854775807,b19,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@568a5b31,,,,,,,,,"2022-04-15 02:55;psadhukhan;https://mach5.us.oracle.com/mdash/jobs/prsadhuk-jdk-20220415-0844-31254759?search=result.status%3APASSED

https://mach5.us.oracle.com/mdash/jobs/prsadhuk-jdk-20220415-1008-31256612;;;","2022-04-15 03:02;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/8261
Date: 2022-04-15 09:57:53 +0000;;;","2022-04-17 21:13;psadhukhan;https://mach5.us.oracle.com/mdash/jobs/prsadhuk-jdk-20220418-0322-31331361;;;","2022-04-19 00:02;dukebot;Changeset: c5e9719c
Author:    Prasanta Sadhukhan <psadhukhan@openjdk.org>
Date:      2022-04-19 06:59:24 +0000
URL:       https://git.openjdk.java.net/jdk/commit/c5e9719c40ed4d83b3978f45bacbf8e066cae02d
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Some duplicated javac command-line options have repeated effect,JDK-8266239,5048341,Bug,Resolved,JDK,JDK,software,duke,,,P5,Fixed,gli,prappo,prappo,2021-04-28 12:32,2021-09-30 10:10,2023-10-01 09:57,2021-09-03 02:35,17,,,,,,,18,tools,,0,jdk17u-fix-request,jdk17u-fix-SQE-ok-next,jdk17u-fix-yes,,,,,,,,,,,"$ javac --version --version
javac 16
javac 16

ditto for --help and --help-extra

This contrasts with other tools such as jar, javadoc, jlink, jshell, and java (launcher).",,,,,,,,,,,JDK-8274478,,,,,,,,,,,,,JDK-8267955,,,,,,,,,JDK-8273361,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2smeb:",9223372036854775807,b14,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4dca67bd,,,,,,,,,"2021-04-30 02:29;gli;The new option --help-lint has the same issue. It is best to fix this issue after completing JDK-8230623.;;;","2021-05-27 07:32;gli;The option --full-version also needs to be adjusted.;;;","2021-05-27 21:01;jjg;In general, set flags in the option handling and then process the flags to generate the desired output after the main option processing loop has completed.;;;","2021-05-27 21:02;jjg;As a P5, there is limited time to fix this for JDK 17 before RDP1. If you don't make that date, then JDK 18 will be OK.;;;","2021-05-28 07:44;gli;I submitted the PR. Does it need a CSR? If not, maybe this issue can be solved in JDK 17.
;;;","2021-05-28 09:13;darcy;As a behavioral change, I would recommend a CSR for this issue.;;;","2021-05-28 21:40;gli;Got it. I filed the CSR just now.;;;","2021-09-03 02:35;roboduke;Changeset: d05494f9
Author:    Guoxiong Li <gli@openjdk.org>
Date:      2021-09-03 09:33:17 +0000
URL:       https://git.openjdk.java.net/jdk/commit/d05494f98bad351532cdb769c9da6b6e2359b16e
;;;","2021-09-28 05:40;gli;Fix Request(17u)

Request to backport this change about javac command option to jdk17u. The code applies cleanly.

Thanks!;;;","2021-09-28 20:04;dbuck;I believe a separate backport CSR is required to bring this fix back to JDK 17u.

https://wiki.openjdk.java.net/display/csr/CSR+FAQs ;;;","2021-09-28 22:44;gli;Thanks for reminding. The backport CSR is created just now.;;;","2021-09-29 19:54;gli;FYI: The backport CSR was approved.;;;",,,,,,,,,,,,,,,,,,,,,,
Fix help text for --mac-signing-keychain,JDK-8266227,5048328,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,herrick,herrick,herrick,2021-04-28 09:45,2021-05-10 10:35,2023-10-01 09:57,2021-05-04 13:11,14,15,16,17,,,,17,tools,,0,sn_92,,,,,,,,,,,,,"This change includes help text formatting and minor wording changes as well as described in the comments.

The help text for mac-signing-keychain is:

 --mac-signing-keychain <file path>
          Path of the keychain to search for the signing identity
          (absolute path or relative to the current directory).
          If not specified, the standard keychains are used.

but this is not a path.
It has been fixed in the man pages to say:

 --mac-signing-keychain <keychain name>
          Name of the keychain to search for the signing identity
          If not specified, the standard keychains are used.

this same change should be made to the help text.
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2smbf:",9223372036854775807,b21,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@3656b41f,,,,,,,,,"2021-04-29 06:34;herrick;There are also several other help text cleanups that have been addressed in man pages and need to be addressed in help text:
1.) <directory path> vs <file path>
In some cases a path used as an option value is described as a file path when it is really a directory path.  We should be consistent.
2.) period vs not period:
The help text for many options is not a complete sentence, and therefore does not end in a period.  We are making this universal, and also ensuring that all complete sentences  begin with capital leter and end in period.;;;","2021-05-04 13:11;roboduke;Changeset: c53dee74
Author:    Andy Herrick <herrick@openjdk.org>
Date:      2021-05-04 20:10:37 +0000
URL:       https://git.openjdk.java.net/jdk/commit/c53dee7480858811c32ac718f5a27a00e3483a38
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
jarsigner is using incorrect security property to show weakness of certs,JDK-8266225,5048324,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,hchao,weijun,weijun,2021-04-28 09:15,2021-05-17 17:41,2023-10-01 09:57,2021-05-11 12:37,,,,,,,,17,security-libs,,0,,,,,,,,,,,,,,"jarsigner uses ""jdk.jar.disabledAlgorithms"" to suggest if a certificate is using weak algorithms but in fact it should be using ""jdk.certpath.disabledAlgorithms"" in this case.

For example:

1. Suppose you create a signer certificate that's using MD5withRSA as its signature algorithm. Note: this must not be a self-signed cert because jarsigner does not check the signature algorithm of such a cert.

2. Sign a JAR file with this certificate using default algorithms.

Now, remove the MD5 algorithm from ""jdk.jar.disabledAlgorithms"" and keep it in ""jdk.certpath.disabledAlgorithms"", run `jarsigner -verify -verbose -certs` on the newly signed JAR file, and it shows:

```
      >>> Signer
      X.509, CN=ee (ee)
      Signature algorithm: MD5withRSA, 2048-bit key
      [certificate is valid from 4/28/21, 11:58 AM to 1/23/24, 10:58 AM]
      X.509, CN=ca (ca)
      Signature algorithm: SHA256withRSA, 2048-bit key
      [trusted certificate]
      [Invalid certificate chain: Algorithm constraints check failed on signature algorithm: MD5withRSA]
```

The last line comes from CertPath validation check on the cert chain and it correctly detected the weak algorithm (in ""jdk.certpath.disabledAlgorithms""), but you can see there is no ""disabled"" label on the ""Signature algorithm"" line. This is incorrect and we should make the output consistent.

In fact, reverse the setting to remove MD5 from ""jdk.certpath.disabledAlgorithms"" but keep it in ""jdk.jar.disabledAlgorithms"" shows the opposite output which is still inconsistent: There is no CertPath validation error but there's a ""disabled"" label there.
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2smaj:",9223372036854775807,b22,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@7817f935,,,,,,,,,"2021-05-11 12:37;roboduke;Changeset: 995e9560
Author:    Hai-May Chao <hchao@openjdk.org>
Date:      2021-05-11 19:37:26 +0000
URL:       https://git.openjdk.java.net/jdk/commit/995e95603089f2571bb6778a2ff1691b147fd0ce
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
GitHub actions: use gcc 10.3 on Linux,JDK-8266224,5048323,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,jvos,kcr,kcr,2021-04-28 09:06,2021-07-08 08:57,2023-10-01 09:57,2021-06-29 10:25,jfx17,,,,,,,jfx17,javafx,,0,noreg-build,,,,,,,,,,,,,The Linux compiler will be updated to 10.3 in JDK-8265400. This is a follow-up bug to use that same version for GitHub actions builds.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8269601,,,JDK-8256983,JDK-8265400,,,JDK-8269148,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2smab:",9223372036854775807,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@1556b386,,,,,,,,,"2021-04-28 09:16;kcr;A quick search shows that gcc 10.2 is the latest available version in the Ubuntu 20.04 repositories, so we will not be able to do this unless / until 10.3 is added to the Ubuntu 20.04 repositories.
;;;","2021-06-29 09:19;kcr;Since GHA build are starting to fail because they can't find gcc 10.2 any more, this is now more urgent.;;;","2021-06-29 09:19;kcr;They just did this in the jdk repo with JDK-8269148 for the same reason we now need to.;;;","2021-06-29 09:23;kcr;This is under review at https://git.openjdk.java.net/jfx/pull/555 using bug ID JDK-8269601. It might be best to use this bug ID (JDK-8266224) instead and close JDK-8269601 as a duplicate.;;;","2021-06-29 10:25;roboduke;Changeset: b0d15862
Author:    Johan Vos <jvos@openjdk.org>
Date:      2021-06-29 17:24:30 +0000
URL:       https://git.openjdk.java.net/jfx/commit/b0d158629ed5f9c92cbcc39a7099f2d37e34ecf7
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
"[aix] In mmap-mode, partial releases with os::release_memory may trash internal bookkeeping",JDK-8266222,5048319,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,stuefe,stuefe,stuefe,2021-04-28 08:28,2021-05-10 10:36,2023-10-01 09:57,2021-05-05 04:50,11,16,17,,,,,17,hotspot,,0,oraclejdk-na,,,,,,,,,,,,,"In os_aix.cpp we keep book about for reserved address ranges since we need to keep information about which API (mmap or shmat) had been used for this range. (code hint: see vmembk_(add|remove|find)).

When releasing memory via os::release_memory, we remove those ranges from the internal bookkeeping.

However, for mmap() the release may be partial. In that case the internal bookkeeping is not updated correctly: we just remove the record for the whole original address range. After that operation, the remainder address range is still mapped from the point of the VM, but the bookkeeping is lost and subsequent calls to os::release_memory or os::commit/uncommit_memory for this range will run into a guarantee.

Partial releases can happen e.g. when, in the process of running os::reserve_memory_aligned(), the extra-aligned pages are unmapped. This is of more concern now with the new Metaspace, since we now reserve with larger alignments (4G+).

This problem was hidden by the fact that we typically run in 64K paged mode where we use SysV shared memory; but if AME is enabled on AIX, 64K pages are disabled, and the VM falls back to 4K pages and using mmap, and runs into this bug.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8266506,,,,JDK-8266419,,,,,,,,,,,,,,,,,,,,,,,,aix,,,,,"0|i2sm9f:",9223372036854775807,b21,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,,,"2021-05-05 04:50;roboduke;Changeset: 250b45a5
Author:    Thomas Stuefe <stuefe@openjdk.org>
Date:      2021-05-05 11:49:44 +0000
URL:       https://git.openjdk.java.net/jdk/commit/250b45a510114d00059199701e626e3a63fc1fe7
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
keytool still prompt for store password on a password-less pkcs12 file if -storetype pkcs12 is specified,JDK-8266220,5048317,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,weijun,weijun,weijun,2021-04-28 07:59,2021-06-24 13:21,2023-10-01 09:57,2021-04-30 07:05,11.0.12-oracle,17,,,,,,17,security-libs,,0,CPU21_07-critical-approved,CPU21_07-critical-SQE-OK,jdk11u-fix-request,jdk11u-fix-yes,pkcs12-crypto,,,,,,,,,"When listing a password-less pkcs12 keystore, keytool does not need to prompt for the keystore password. However, this is only true when no ""-storetype"" is specified. With `-storetype pksc12`, it still prompts.",,,,,,,,,,,JDK-8267033,JDK-8267454,JDK-8269326,JDK-8266623,,,,,,,,,,,,,,,,,,,JDK-8266638,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2sm8z:",9223372036854775807,b21,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@2ec284e3,,,,,,,,,"2021-04-30 07:05;roboduke;Changeset: 48bb996a
Author:    Weijun Wang <weijun@openjdk.org>
Date:      2021-04-30 14:04:13 +0000
URL:       https://git.openjdk.java.net/jdk/commit/48bb996ac9098fc33f6d52e2af15448b12a19572
;;;","2021-05-18 02:47;mdoerr;Fix Request (11u)
Should get backported for parity with 11.0.12-oracle. Applies cleanly except Copyright year update in test.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Build failure after JDK-8264752 with older GCCs,JDK-8266206,5048286,Bug,Resolved,JDK,JDK,software,duke,,,P2,Fixed,shade,shade,shade,2021-04-28 04:06,2021-10-04 02:35,2023-10-01 09:57,2021-04-28 09:42,17,,,,,,,17,hotspot,,0,azul-interest,jdk11u-fix-request,jdk11u-fix-yes,jdk15u-fix-request,jdk15u-fix-yes,jdk8u-fix-request,jdk8u-fix-yes,noreg-build,,,,,,"
This happens with GCC 6.3.0:

/home/buildbot/worker/build-jdkX-linux/build/src/hotspot/share/jfr/recorder/service/jfrOptionSet.cpp: In function 'bool ensure_gteq(Argument&, jlong)':
/home/buildbot/worker/build-jdkX-linux/build/src/hotspot/share/jfr/recorder/service/jfrOptionSet.cpp:622:38: error: the value of 'lower_than_msg' is not usable in a constant expression
     log_out_of_range_value<Argument, lower_than_msg>(memory_argument, value);
                                      ^~~~~~~~~~~~~~
/home/buildbot/worker/build-jdkX-linux/build/src/hotspot/share/jfr/recorder/service/jfrOptionSet.cpp:397:19: note: 'lower_than_msg' was not declared 'constexpr'
 static const char lower_than_msg[] = ""This value is lower than the minimum size required "";
                   ^~~~~~~~~~~~~~
/home/buildbot/worker/build-jdkX-linux/build/src/hotspot/share/jfr/recorder/service/jfrOptionSet.cpp: In function 'bool ensure_lteq(Argument&, jlong)':
/home/buildbot/worker/build-jdkX-linux/build/src/hotspot/share/jfr/recorder/service/jfrOptionSet.cpp:657:38: error: the value of 'higher_than_msg' is not usable in a constant expression
     log_out_of_range_value<Argument, higher_than_msg>(memory_argument, value);
                                      ^~~~~~~~~~~~~~~
/home/buildbot/worker/build-jdkX-linux/build/src/hotspot/share/jfr/recorder/service/jfrOptionSet.cpp:396:19: note: 'higher_than_msg' was not declared 'constexpr'
 static const char higher_than_msg[] = ""This value is higher than the maximum size limited "";
                   ^~~~~~~~~~~~~~~",,,,,,,,,,,JDK-8269236,JDK-8274689,JDK-8270055,,,,,,,,,,,,,,,,,,,,JDK-8264752,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2sm23:",9223372036854775807,b21,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@42995637,,,,,,,,,"2021-04-28 09:42;roboduke;Changeset: 21f65f8e
Author:    Aleksey Shipilev <shade@openjdk.org>
Date:      2021-04-28 16:41:51 +0000
URL:       https://git.openjdk.java.net/jdk/commit/21f65f8e79b25b8367fc8d177b5f156b3575c89e
;;;","2021-06-23 07:33;hshi;backport can applied cleanly on jdk11u-dev after https://github.com/openjdk/jdk11u-dev/pull/52. Backport must be applied immediately after https://github.com/openjdk/jdk11u-dev/pull/52 is integrated.;;;","2021-07-07 18:12;hshi;Fix Request (OpenJDK 8u)

8u backport  is combined with JDK-8264752 and reviewd in https://mail.openjdk.java.net/pipermail/jdk8u-dev/2021-June/014038.html
;;;","2021-10-01 09:46;evergizova;Fix Request (15u)
I'd like to backport JDK-8266206 to 15u as follow-up fix for JDK-8264752 that is already included to 15u.
The patch applies cleanly.
Build with GCC 7.5.0 fails without the patch, passes with it.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
BasicJMapTest does not include testHistoParallel methods,JDK-8266193,5048272,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,lzang,lzang,lzang,2021-04-28 01:24,2021-05-12 17:31,2023-10-01 09:57,2021-05-06 19:58,,,,,,,,17,core-svc,,0,tencent-interest,testbug,,,,,,,,,,,,The testHistoParallel* method are not included in the BasicJMapTest's main() method. They should be included.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2slyz:",9223372036854775807,b22,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@22f3cc74,,,,,,,,,"2021-05-06 19:57;roboduke;Changeset: 66191ff4
Author:    buddyliao <buddyliao@tencent.com>
Committer: Serguei Spitsyn <sspitsyn@openjdk.org>
Date:      2021-05-07 02:57:32 +0000
URL:       https://git.openjdk.java.net/jdk/commit/66191ff4b04f03172e8b7b28184a7f39ce3804bd
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Missing aarch64 parts of JDK-8181872(C1: possible overflow when strength reducing integer multiply by constant),JDK-8266191,5048269,Bug,Resolved,JDK,JDK,software,duke,,,P2,Fixed,dongbohe,dongbohe,dongbohe,2021-04-28 00:15,2021-05-04 13:21,2023-10-01 09:57,2021-04-28 15:32,openjdk8u,,,,,,,openjdk8u302,hotspot,,0,11-na,jdk8u-fix-request,jdk8u-fix-yes,oracle-triage-17,,,,,,,,,,"$ make test  TEST=tier1

-------------- Test Summary ------------

Summary: hotspot_tier1
FAILED: compiler/c1/MultiplyByMaxInt.java
FAILED: compiler/tiered/LevelTransitionTest.java
FAILED: runtime/StackGap/testme.sh
FAILED: serviceability/sa/jmap-hashcode/Test8028623.java
TEST STATS: name=hotspot_tier1  run=806  pass=802  fail=4

Summary: langtools_tier1
FAILED: tools/javac/diags/CheckExamples.java
FAILED: tools/javac/VersionOpt.java
TEST STATS: name=langtools_tier1  run=3121  pass=3119  fail=2

Summary: jdk_tier1
FAILED: java/util/concurrent/BlockingQueue/CancelledProducerConsumerLoops.java
FAILED: java/util/concurrent/BlockingQueue/MultipleProducersSingleConsumerLoops.java
FAILED: java/util/concurrent/BlockingQueue/ProducerConsumerLoops.java
FAILED: java/util/concurrent/ConcurrentQueues/ConcurrentQueueLoops.java
FAILED: java/util/concurrent/Exchanger/ExchangeLoops.java
FAILED: java/util/concurrent/ExecutorCompletionService/ExecutorCompletionServiceLoops.java
FAILED: java/util/concurrent/FutureTask/CancelledFutureLoops.java
FAILED: java/util/concurrent/locks/ReentrantLock/CancelledLockLoops.java
FAILED: java/util/concurrent/locks/ReentrantLock/LockOncePerThreadLoops.java
FAILED: java/util/concurrent/locks/ReentrantLock/SimpleReentrantLockLoops.java
FAILED: java/util/concurrent/locks/ReentrantLock/TimeoutLockLoops.java
FAILED: java/util/concurrent/locks/ReentrantReadWriteLock/MapLoops.java
TEST STATS: name=jdk_tier1  run=1330  pass=1318  fail=12

After patch(JDK-8181872 aarch64 part: http://hg.openjdk.java.net/jdk9/jdk9/hotspot/rev/16c9c159df90#l1.1):
$ make test TEST=tier1
-------------- Test Summary ------------

Summary: hotspot_tier1
FAILED: runtime/StackGap/testme.sh
FAILED: serviceability/sa/jmap-hashcode/Test8028623.java
TEST STATS: name=hotspot_tier1  run=806  pass=804  fail=2

Summary: langtools_tier1
FAILED: tools/javac/diags/CheckExamples.java
TEST STATS: name=langtools_tier1  run=3121  pass=3120  fail=1

Summary: jdk_tier1
TEST STATS: name=jdk_tier1  run=1330  pass=1330  fail=0


Note that JDK is build with gcc 9.3",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8181872,,,,,,,,,,,,,,,aarch64,,,,,,,,,,,,,,"0|i2slyb:",9223372036854775807,b01,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2021-04-28 01:13;sgehwolf;This is an JDK 8u specific bug. In particular only affecting 8u292 when the aarch64 port got included.  JDK-8181872 is fixed in JDK 9+ but the 8u backport was done before the aarch64 port integration, hence the aarch64 parts are missing.;;;","2021-04-28 01:37;dongbohe;Fix Request [8u]

8u RFR(acked by Andrew Haley): https://mail.openjdk.java.net/pipermail/jdk8u-dev/2021-April/013765.html;;;","2021-04-28 15:32;hgupdate;URL:   https://hg.openjdk.java.net/jdk8u/jdk8u-dev/hotspot/rev/c42cb799628c
User:  fyang
Date:  2021-04-28 22:27:55 +0000
;;;","2021-05-04 13:19;hgupdate;URL:   https://hg.openjdk.java.net/jdk8u/jdk8u/hotspot/rev/c42cb799628c
User:  andrew
Date:  2021-05-04 20:08:45 +0000
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Memory leak in appendBootClassPath(),JDK-8266187,5048265,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,whuang,whuang,whuang,2021-04-27 23:27,2022-05-24 07:23,2023-10-01 09:57,2021-05-04 03:03,17,,,,,,,17,core-svc,,0,huawei-interest,jdk11u-fix-request,jdk11u-fix-yes,jdk8u-fix-request,jdk8u-fix-yes,redhat-interest,,,,,,,,"In this code:

936         } else {
937             char* resolved;
938
939             if (!haveBasePath) {
940                 if (JDK_Canonicalize((char*)jarfile, canonicalPath, sizeof(canonicalPath)) != 0) {
941                     fprintf(stderr, ""WARNING: unable to canonicalize %s\n"", jarfile);
942                     free(path);
943                     continue;
944                 }
945                 parent = basePath(canonicalPath);
946                 jplis_assert(parent != (char*)NULL);
947                 haveBasePath = 1;
948             }
949
950             resolved = resolve(parent, path); // malloc resolved here
951             jvmtierr = (*jvmtienv)->AddToBootstrapClassLoaderSearch(jvmtienv, resolved); // use resolved here
952         }

Here, we malloc() resolved in line 950 without free(). It is a memory leak, so let's fix it.
",,,,,,,,,,,JDK-8278572,JDK-8278839,JDK-8278464,JDK-8287240,,,,,,,,,,,,,,,,,,,,,,,JDK-8273575,,,,,,,,,,,,,,,generic,,,,,,,,,generic,,,,,"0|i2slxf:",9223372036854775807,b21,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@dc685aa,,,,,,,,,"2021-04-28 07:22;dcubed;Moving from hotspot/<no_subcat> to core-svc/java.lang.instrument.;;;","2021-05-04 03:03;roboduke;Changeset: aa90df6f
Author:    Wang Huang <whuang@openjdk.org>
Committer: Kevin Walls <kevinw@openjdk.org>
Date:      2021-05-04 10:02:22 +0000
URL:       https://git.openjdk.java.net/jdk/commit/aa90df6f51940a73f9aa078a32768855c8568034
;;;","2021-12-10 01:24;goetz;Fix request [11u]

I backport this for parity with 11.0.15-oracle.
Low risk, trivial change.
Clean backport.;;;","2021-12-22 08:41;zgu;8u code review: https://mail.openjdk.java.net/pipermail/jdk8u-dev/2021-December/014484.html
;;;","2022-04-19 07:42;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk8u-dev/pull/42
Date: 2022-04-19 14:38:23 +0000;;;","2022-05-24 07:09;zgu;Fix Request (8u)

I would like to backport this clean patch to fix a memory.
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,
Shenandoah: Fix incorrect comment/assertion messages,JDK-8266185,5048262,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,shade,yyang,yyang,2021-04-27 23:17,2021-05-10 10:32,2023-10-01 09:57,2021-05-03 08:24,11.0.9,16,17,8-shenandoah,,,,17,hotspot,,0,gc-shenandoah,,,,,,,,,,,,,"Created on behalf of yude.lyd@alibaba-inc.com
-------

I did a grep under src/hotspot/share/gc/shenandoah and found a few places with ""G1"" keyword:
$grep -R 'G1'       
c2/shenandoahBarrierSetC2.cpp:    assert(sizeof(size_t) == type2aelembytes(index_bt), ""Loading G1 SATBMarkQueue::_index with wrong size."");
c2/shenandoahBarrierSetC2.cpp:  // We could be accessing the referent field of a reference object. If so, when G1
c2/shenandoahBarrierSetC2.cpp:    // Verify G1 pre-barriers
c2/shenandoahBarrierSetC2.cpp:      // Pointer stores in G1 barriers looks like unsafe access.
c2/shenandoahSupport.cpp:    assert(sizeof(size_t) == type2aelembytes(index_bt), ""Loading G1 SATBMarkQueue::_index with wrong size."");
shenandoahHeap.cpp:  // just as there are G1-specific options.
shenandoahHeap.cpp:    satbqs.set_process_completed_buffers_threshold(20); // G1SATBProcessCompletedThreshold
shenandoahHeap.cpp:    satbqs.set_buffer_enqueue_threshold_percentage(60); // G1SATBBufferEnqueueingThresholdPercent

I replaced ""G1"" with ""Shenandoah"" where I think appropriate.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2slwr:",9223372036854775807,b21,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6b00f96c,,,,,,,,,"2021-05-03 08:24;roboduke;Changeset: 55cc0af4
Author:    Yude Lin <yude.lyd@alibaba-inc.com>
Committer: Aleksey Shipilev <shade@openjdk.org>
Date:      2021-05-03 15:23:49 +0000
URL:       https://git.openjdk.java.net/jdk/commit/55cc0af40444262d0ba0f7dc01da44f1a431dc48
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
a few compiler/debug tests don't check exit code,JDK-8266184,5048261,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,iignatyev,iignatyev,iignatyev,2021-04-27 22:03,2021-06-03 03:07,2023-10-01 09:57,2021-04-28 08:46,17,,,,,,,17,hotspot,,0,hs-comp-triaged,noreg-self,oracle-triage-17,,,,,,,,,,,"compiler/debug/TestGenerateStressSeed.java, TestStressCM.java, and TestStressIGVNAndCCP.java don't check the exit code of spawned JVMs, as a result, they might miss misconfiguration and/or defects. in fact, TestStressIGVNAndCCP.java uses a wrong flag name (TraceIterativeIGVN instead of TraceIterativeGVN) and this was unnoticed b/c we didn't check the exit code. ",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2slwj:",9223372036854775807,b21,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2021-04-28 08:46;roboduke;Changeset: 19d3c451
Author:    Igor Ignatyev <iignatyev@openjdk.org>
Date:      2021-04-28 15:45:23 +0000
URL:       https://git.openjdk.java.net/jdk/commit/19d3c451b89680cefa41fd18f9e9ba0624f56858
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Automate manual steps listed in the test jdk/sun/security/pkcs12/ParamsTest.java,JDK-8266182,5048259,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,akolarkunnu,akolarkunnu,akolarkunnu,2021-04-27 21:18,2021-10-04 00:18,2023-10-01 09:57,2021-08-17 05:13,17,,,,,,,18,security-libs,,0,jdk11u-fix-request,jdk11u-fix-yes,jdk17u-fix-request,jdk17u-fix-SQE-ok,jdk17u-fix-yes,noreg-self,redhat-interest,testbug,,,,,,ParamsTest is an interop test between keytool <-> openssl. There are some manual steps listed in jdk/sun/security/pkcs12/params/README to perform after the execution of jtreg command. That steps required to complete the full interop between keytool and openssl. This task is to automate that part also.,,,,,,,,,,,JDK-8273006,JDK-8274678,JDK-8273013,JDK-8273211,JDK-8273004,,,,,,,,,,,,,,,,,,JDK-8076190,,,,JDK-8272581,INTJDK-7629729,JDK-8273646,JDK-8274532,,,,,,,,,,,,generic,,,,,,,,,generic,,,,,"0|i2slw3:",9223372036854775807,b11,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@2ec284e3,,,,,,,,,"2021-04-28 10:07;rhalade;I think you can keep ParamsTest.java as automated test and add another manual test for openssl interoperability.;;;","2021-06-08 08:20;akolarkunnu;yes, so that half portion of the test executes in auto run also.;;;","2021-08-17 05:13;roboduke;Changeset: ed57cf1c
Author:    Abdul Kolarkunnu <akolarkunnu@openjdk.org>
Date:      2021-08-17 12:12:22 +0000
URL:       https://git.openjdk.java.net/jdk/commit/ed57cf1cf3f2d107e085ecdae38a63e66ab2fa30
;;;","2021-08-25 02:37;akolarkunnu;JDK 17u fix request:

Please approve this fix for 17u. The patch applies cleanly, test only fix and the test passes post applying the patch. JDK-8272581 is also need to backport along with this.;;;","2021-09-16 08:25;jdowland;I've begun working on an 11u backport of this.;;;","2021-09-17 05:14;mdoerr;Thanks for letting us know. Please note that JDK-8272581 should be ready, too, when integrating this one.;;;","2021-09-20 07:54;jdowland;Fix Request (11u)

https://github.com/openjdk/jdk11u-dev/pull/376

Please consider this PR for 11u.

The backport is not clean: 11u differs from newer JDKs in keytool defaults (see JDK-8267599), and the test needed adjusting to account for this in two places.

RFR: https://mail.openjdk.java.net/pipermail/jdk-updates-dev/2021-September/008290.html;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,
[macos] jpackage should specify architecture for produced pkg files,JDK-8266179,5048252,Bug,Closed,JDK,JDK,software,duke,,,P2,Fixed,almatvee,almatvee,almatvee,2021-04-27 18:36,2023-08-04 00:14,2023-10-01 09:57,2021-05-04 16:36,17,,,,,,,17,tools,,0,sn_92,,,,,,,,,,,,,"jpackage should specify architecture for produced PKG files via hostArchitectures=""x86_x64 or arm64"". aarch64 installer will be installable on x64 without specifying hostArchitectures which is not correct and if install on arm Mac it will request Rosetta 2. With proposed fix by setting hostArchitectures=""x86_x64"" if installer contains x64 binaries, it will be installable on x64 Mac and will require Rosetta 2 on arm Mac. hostArchitectures will be set to arm64 if installer contain aarch64 binaries and will gave error when run on x64 Mac and will be installable on arm Mac without triggering installation of Rosetta 2.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8313740,,,,JDK-8266241,JDK-8266259,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2sluj:",9223372036854775807,b21,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@3656b41f,,,,,,,Verified,,"2021-05-04 16:36;roboduke;Changeset: 2c53654b
Author:    Alexander Matveev <almatvee@openjdk.org>
Date:      2021-05-04 23:35:24 +0000
URL:       https://git.openjdk.java.net/jdk/commit/2c53654bf1140c7cd243598ebdbff9ca4b9c54ba
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Clean up GCC 11 warnings,JDK-8266167,5048240,Bug,Closed,JDK,JDK,software,duke,,,P4,Fixed,ysuenaga,ysuenaga,ysuenaga,2021-04-27 17:49,2021-05-06 22:06,2023-10-01 09:57,2021-05-06 22:06,17,,,,,,,17,infrastructure,,0,,,,,,,,,,,,,,We can see some compiler warnings on GCC 11. Please see sub tasks for details.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2slrv:",9223372036854775807,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@429c566,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
"TestNoWarningLoopStripMiningIterSet is runnable only on VM w/ G1, Shenandoah, Z and Epsilon",JDK-8266165,5048238,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,iignatyev,iignatyev,iignatyev,2021-04-27 17:28,2021-06-03 03:04,2023-10-01 09:57,2021-04-28 09:31,17,,,,,,,17,hotspot,,0,hs-comp-triaged,noreg-self,oracle-triage-17,,,,,,,,,,,TestNoWarningLoopStripMiningIterSet test uses `@requires vm.gc.G1 & vm.gc.Shenandoah & vm.gc.Z & vm.gc.Epsilon` to make sure all GCs in its loop are available. this exlcudes this test from execution on VMs which don't have at least one of the listed GCs.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2slrf:",9223372036854775807,b21,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2021-04-28 09:30;roboduke;Changeset: c71c2685
Author:    Igor Ignatyev <iignatyev@openjdk.org>
Date:      2021-04-28 16:30:27 +0000
URL:       https://git.openjdk.java.net/jdk/commit/c71c26859f40b8790757102ca097788a5348295d
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Remove JPackage duplicate tests,JDK-8266162,5048235,Bug,Closed,JDK,JDK,software,duke,,,P3,Fixed,asemenyuk,efrenkel,efrenkel,2021-04-27 17:16,2021-05-28 19:02,2023-10-01 09:57,2021-05-13 09:31,17,,,,,,,17,tools,,0,sn_93,sqebug,testbug,,,,,,,,,,,"Some JPackage tests are redundant since they are duplicates of other tests.
These tests should be removed.

JPackage tests that need to be removed:
* WinInstallerUiTestWith - Duplicate of basic package test
* WinInstallerUiTestWithDirChooser - Duplicate of WinDirChooserTest
* WinInstallerUiTestWithLicense - Duplicate of License test
* WinShortcutPromptTestWith - Duplicate of basic package test
* WinShortcutPromptTestWithShortcutPromptStartMenuDesktop - Duplicate of WinUiTestWithShortcutPromptTest
* WinShortcutPromptTestWithStartMenu - duplicate of WinMenuTest
* WinShortcutPromptTestWithDesktop - duplicate of WinShortcutTest
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2slqr:",9223372036854775807,b23,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@3656b41f,,,,,,,Verified,,"2021-04-27 17:27;asemenyuk;Need to update WinInstallerUiTes and WinShortcutPromptTest tests to avoid generating installers duplicating installers from another tests.;;;","2021-05-12 14:49;efrenkel;[~asemenyuk] I noticed I am missing artifacts LicenseTest-1.0.exe and LicenseTest-1.0.msi.
Did this test get removed? or maybe renamed to WinInstallerUiTestWithLicense?
If that is the case, then I would need WinInstallerUiTestWithLicense so dont remove it.;;;","2021-05-12 14:51;asemenyuk;LicenseTest artifacts should be there. If they are missing, it is a bug. I'll double check.;;;","2021-05-12 14:54;asemenyuk;Older LicenseTest-1.0.exe and LicenseTest-1.0.msi artifacts are named CommonLicenseTest-1.0.exe and CommonLicenseTest-1.0.msi now.;;;","2021-05-13 09:31;roboduke;Changeset: f3c6cda4
Author:    Alexey Semenyuk <asemenyuk@openjdk.org>
Date:      2021-05-13 16:30:17 +0000
URL:       https://git.openjdk.java.net/jdk/commit/f3c6cda47631cc123dbcddbfb627dc05cf7bc13b
;;;","2021-05-28 19:02;efrenkel;Tested with JDK 17+24
All duplicate jpackage artifacts have been removed;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,
macOS ARM + Metal pipeline shows artifacts on Swing Menu with Java L&F,JDK-8266159,5048230,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,aghaisas,prr,prr,2021-04-27 16:22,2021-06-10 17:58,2023-10-01 09:57,2021-06-08 02:46,17,,,,,,,17,client-libs,,0,lanai,macos,sn_93,sn_94,sn_95,,,,,,,,,"When running SwingSet2 on an Apple M1 ARM MacMini using the new Metal pipeline for Java2D, if you switch from Aqua to Java L&F instantly you will see it is not repainting properly.


This does not happen with the OpenGL pipeline on the same system
Nor does it happen on my macOS 11 x64 16"" MacBook Pro

So it seems specific to the combination of Metal + Apple Silicon
This is using a native ARM build but it may manifest with Rosettta too I have not tried that

I will attach an image",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8267771,JDK-8267919,JDK-8267770,,,,,,,,,"2021-05-03 00:33;jdv;MenuItem_issue.png;https://bugs.openjdk.org/secure/attachment/94479/MenuItem_issue.png","2021-04-27 16:23;prr;swingset.png;https://bugs.openjdk.org/secure/attachment/94419/swingset.png",,,,,,,,,,aarch64,,,,,,,,,os_x,,,,,"0|i2slpn:",9223372036854775807,b26,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4b09ce31,,,,,,,,,"2021-05-03 00:35;jdv;I am seeing the issue in latest build(with JDK-8266040 fix), in other places of MenuItem also we are seeing this issue. Attached MenuItem_issue.png;;;","2021-05-12 20:38;jdv;This is not reproducible in standalone JMenutItem test and Java LAF.
Issue is happening with Motif LAF also.

Enabled J2D_TRACE and noticed that we use DrawLine and DrawPixel opcodes in Java & Motif LAF but use FillRect in other LAF's this difference in behavior is seen between HiDPI and non-HiDPI rendering.
If we use uiScale=2.0 then issue is not reproducible in Java/Motif LAF. Looks like M1 is treating DrawLine/DrawPixel in different way. WIP.;;;","2021-06-04 02:36;jdv;Update:
We pass through different opcodes in uiScale=1 use case like DrawPixel and DrawLine.
We translate each vertex by a fraction to hit pixel centers in Vertex data. These magic numbers are taken from OpenGL implementation. Suspecting this might have difference in behaviour in M1, reverted these magic numbers in MTLRenderer. But it has no effect on the reproduction of this issue.;;;","2021-06-04 03:22;aghaisas;Another manifestation of these artifacts on M1 macs can be seen in J2DDemo.

Launch J2DDemo with uiScale = 1.0 -> Go to Transforms Tab (Last Tab) 
Switch off anti-aliasing in ‘Global Controls’
It can be seen that - the demos.Transforms.Rotate (top left demo) content is completely garbled.;;;","2021-06-08 02:46;roboduke;Changeset: 89da2021
Author:    Ajit Ghaisas <aghaisas@openjdk.org>
Date:      2021-06-08 09:45:35 +0000
URL:       https://git.openjdk.java.net/jdk/commit/89da2021ee194efd70f367f8fec16994335c38aa
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
tools/jpackage/windows/WinInstallerIconTest.java hangs with fastdebug,JDK-8266129,5048196,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,herrick,lmesnik,lmesnik,2021-04-27 13:49,2021-11-11 02:04,2023-10-01 09:57,2021-05-01 05:03,17,,,,,,,17,tools,,0,sn_92,,,,,,,,,,,,,"Test tools/jpackage/windows/WinInstallerIconTest.java times  out with fastdebug.

It fails with 
*********************
AWT Assertion Failure
*********************
::GetDIBits(hBMDC, hBM, 0, 1, 0, gpBitmapInfo, 0)
File 't:\\workspace\\open\\src\\java.desktop\\windows\\native\\libawt\\windows\\awt_Win32GraphicsDevice.cpp', at line 184
GetLastError() is 57 : The parameter is incorrect.

Do you want to break into the debugger?",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8264773,JDK-8268404,,,JDK-8269529,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2sli3:",9223372036854775807,b21,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@3656b41f,,,,,,,,,"2021-04-27 13:51;lmesnik;The test is not executed in our CI with fastdebug yet. But we run all JDK tests in a loom with fastdebug.

Is it possible to either fix or tag with 'requires' the test to reduce noise?;;;","2021-04-28 06:27;herrick;Building with fastdebug (configuring with --with-debug-level=fastdebug) I have run all jpackage tests repeatedly without seeing this problem.
The description points to wt_Win32GraphicsDevice.cpp', at line 184, where there is:
""        VERIFY(::GetDIBits(hBMDC, hBM, 0, 1, NULL, gpBitmapInfo, DIB_RGB_COLORS));    ""
perhaps awt experts can shed some light on this.;;;","2021-04-28 08:22;prr;You can't run the windows debug build in headless mode if the test uses any AWT code.There are known issues.

This is because you are running this as a headless test and in debug mode
there is error checking which causes windows to popup a user dialog since
the call to get device info failed  - because it is headless.

It makes no sense to problem list the test. You'd eventually be problem listing lots of tests.

;;;","2021-04-28 10:35;lmesnik;Why not add corresponding 'requires' tag to such tests to avoid their execution in incompatible mode?

The goal is to be able to easily run jdk tier2/3 in fastdebug without any noise.;;;","2021-04-28 10:37;lmesnik;BTW, Should execution with ""-Djava.awt.headless=true"" help here?
;;;","2021-04-28 11:14;prr;I think you are missing the point. There's a bunch of AWT implementation missing to properly work headless.
Random tests run into it. The tests should not have to deal with it. Instead it requires an unfunded effort to
rework headless mode support in AWT and 2D.
Basically the debug mode is unusable for windows testing today unless you carefully keep to hotspot only tests.

So I think you need to skip your goal .. ;;;","2021-04-28 11:34;herrick;is there a corresponding ""requires"" tag to indicate test can't be run in fastdebug mode ?;;;","2021-04-28 12:02;lmesnik;There are a lot of tests that don't support fastdebug or fastdebug only. It is needed to add '* @requires !vm.debug'.

;;;","2021-04-28 12:10;herrick;so I could fix this instance of this bug (though there may be many more) by adding @requires !vm.debug ?
;;;","2021-04-28 12:31;lmesnik;Yes, this test will be just skipped when fastdebug mode is tested.
;;;","2021-04-30 10:02;herrick;Although the problem only occurs when build is fastdebug and machine is headless, I am testing by building fastdebug and verifying that test is not run.;;;","2021-05-01 05:03;roboduke;Changeset: 5c083e85
Author:    Andy Herrick <herrick@openjdk.org>
Date:      2021-05-01 12:03:12 +0000
URL:       https://git.openjdk.java.net/jdk/commit/5c083e8560ce9cc78615e3149a558206724cff53
;;;","2021-05-01 20:49;lmesnik;Thank you!;;;",,,,,,,,,,,,,,,,,,,,,
[lworld][lw3] C1 produces incorrect code when GlobalValueNumbering is used,JDK-8266086,5048151,Bug,Resolved,JDK,JDK,software,duke,,,P2,Fixed,fparain,fparain,fparain,2021-04-27 12:03,2021-04-29 07:24,2023-10-01 09:57,2021-04-29 07:24,repo-valhalla,,,,,,,repo-valhalla,hotspot,,0,c1,lw3,lworld,,,,,,,,,,,"C1 sometimes produces incorrect code when GlobalValueNumbering is used.

To reproduce the issue:

public class PutFieldTest {
    static primitive class Point {
	int x,y;
	public Point() {
	    x = 0; y = 0;
	}
	public Point(int x, int y) {
	    this.x = x; this.y = y;
	}
    }

    Point p;
    
    static void test() {
	Point p = new Point(4,5);
	PutFieldTest test = new PutFieldTest();
	assert test.p.x == 0;
	assert test.p.y == 0;
	test.p = p;
	System.out.println(test.p);
	assert test.p.x == 4;
	assert test.p.y == 5;
    }

    public static void main(String[] args) {
	for (int i = 0; i < 10; i++) {
	    test();
	}
    }
}

Run with GlobalValueNumbering on:
$ ./build/lworld/images/jdk/bin/java -ea -Xcomp -XX:TieredStopAtLevel=1 -XX:-UseLocalValueNumbering -XX:+UseGlobalValueNumbering -XX:CompileCommand=compileonly,PutFieldTest::\* PutFieldTest
CompileCommand: compileonly PutFieldTest.* bool compileonly = true
[PutFieldTest$Point x=4 y=5]
[PutFieldTest$Point x=0 y=0]
[PutFieldTest$Point x=0 y=0]
[PutFieldTest$Point x=0 y=0]
[PutFieldTest$Point x=0 y=0]
[PutFieldTest$Point x=0 y=0]
[PutFieldTest$Point x=0 y=0]
[PutFieldTest$Point x=0 y=0]
[PutFieldTest$Point x=0 y=0]
[PutFieldTest$Point x=0 y=0]

Run with GlobalValueNumbering off:

$ ./build/lworld/images/jdk/bin/java -ea -Xcomp -XX:TieredStopAtLevel=1 -XX:-UseLocalValueNumbering -XX:-UseGlobalValueNumbering -XX:CompileCommand=compileonly,PutFieldTest::\* PutFieldTest
CompileCommand: compileonly PutFieldTest.* bool compileonly = true
[PutFieldTest$Point x=4 y=5]
[PutFieldTest$Point x=4 y=5]
[PutFieldTest$Point x=4 y=5]
[PutFieldTest$Point x=4 y=5]
[PutFieldTest$Point x=4 y=5]
[PutFieldTest$Point x=4 y=5]
[PutFieldTest$Point x=4 y=5]
[PutFieldTest$Point x=4 y=5]
[PutFieldTest$Point x=4 y=5]
[PutFieldTest$Point x=4 y=5]
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2sl83:",9223372036854775807,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2021-04-27 12:40;fparain;Disabling inlining (-XX:-Inline) prevents C1 from generating bad code even if GlobalValueNumbering is enabled (at least with the reproducer above).

;;;","2021-04-29 07:24;fparain;The problem is that C1 doesn't track that a flattened field has been updated when it writes the individual values of this flattened field. The proposed fix is to record the enclosing flattened field with the StoreField node of each individual field, and use this information when the GlobalValueNumbering processes those nodes to kill the flattened field in the ValueMap.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
AssertionError in Annotate.fromAnnotations with -Xdoclint,JDK-8266082,5048146,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,jfranck,cushon,cushon,2021-04-27 11:16,2022-10-07 06:20,2023-10-01 09:57,2021-06-21 01:40,11,13,14,15,16,17,,18,tools,,0,doclint,jdk11u-fix-request,jdk11u-fix-yes,jdk13u-fix-request,jdk13u-fix-yes,jdk15u-fix-request,jdk15u-fix-yes,jdk17u-fix-request,jdk17u-fix-yes,,,,,"My colleague Chris Povirk discovered that the following program causes javac to crash when -Xdoclint is enabled:

$ cat LinkAnno.java
/** {@link #equals(@Deprecated Object)} */
class LinkAnno {
}

$ javac -fullversion -Xdoclint LinkAnno.java
javac full version ""16-ea+34-2216""
An exception has occurred in the compiler (16-ea). Please file a bug against the Java compiler via the Java bug reporting page (http://bugreport.java.com) after checking the Bug Database (http://bugs.java.com) for duplicates. Include your program, the following diagnostic, and the parameters passed to the Java compiler in your report. Thank you.
java.lang.AssertionError
        at jdk.compiler/com.sun.tools.javac.util.Assert.error(Assert.java:155)
        at jdk.compiler/com.sun.tools.javac.util.Assert.checkNonNull(Assert.java:62)
        at jdk.compiler/com.sun.tools.javac.comp.Annotate.fromAnnotations(Annotate.java:167)
        at jdk.compiler/com.sun.tools.javac.comp.Annotate.lambda$annotateTypeSecondStage$5(Annotate.java:1046)
        at jdk.compiler/com.sun.tools.javac.comp.Annotate.flush(Annotate.java:194)
        at jdk.compiler/com.sun.tools.javac.comp.Attr.attribClass(Attr.java:5056)
        at jdk.compiler/com.sun.tools.javac.comp.Attr.attrib(Attr.java:5002)
        at jdk.compiler/com.sun.tools.javac.main.JavaCompiler.attribute(JavaCompiler.java:1344)
        at jdk.compiler/com.sun.tools.javac.main.JavaCompiler.compile(JavaCompiler.java:973)
        at jdk.compiler/com.sun.tools.javac.main.Main.compile(Main.java:317)
        at jdk.compiler/com.sun.tools.javac.main.Main.compile(Main.java:176)
        at jdk.compiler/com.sun.tools.javac.Main.compile(Main.java:64)
        at jdk.compiler/com.sun.tools.javac.Main.main(Main.java:50)",,,,,,,,,,,JDK-8294392,JDK-8294009,JDK-8294108,JDK-8294050,JDK-8294391,JDK-8294005,,,,,,,,,,,,,,,,,,,,,JDK-8268695,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2sl6z:",9223372036854775807,b03,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4dca67bd,,,,,,,,,"2021-06-21 01:40;roboduke;Changeset: 0b8a0e2b
Author:    Joel Borggrén-Franck <jfranck@openjdk.org>
Date:      2021-06-21 08:39:35 +0000
URL:       https://git.openjdk.java.net/jdk/commit/0b8a0e2b58dbdd5c9553e502212d32c033a5efb5
;;;","2022-09-15 06:23;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/675
Date: 2022-09-15 13:16:52 +0000;;;","2022-09-15 08:13;apavlyutkin;Fix request (17u)

The patch fixes javac crash on unallowed annotation usage when running with -Xdoclint option and makes it to generate proper error message. Original patch applied cleamly

Verification (amd64/20.04LTS): test/langtools/tools/doclint/CrashInAnnotateTest.java (new test)
Regression (amd64/20.04LTS): test/langtools;;;","2022-09-19 05:49;apavlyutkin;Fix request (15u)

The patch fixes javac crash on unallowed annotation usage when running with -Xdoclint option and makes it to generate proper error message. Original patch applied cleamly

Verification (amd64/20.04LTS): test/langtools/tools/doclint/CrashInAnnotateTest.java (new test)
Regression (amd64/20.04LTS): test/langtools;;;","2022-09-19 05:51;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk15u-dev/pull/282
Date: 2022-09-19 12:43:54 +0000;;;","2022-09-19 07:56;apavlyutkin;Fix request (13u)

The patch fixes javac crash on unallowed annotation usage when running with -Xdoclint option and makes it to generate proper error message. Original patch applied with the following changes:

- the patch applied to DocCommentParser.parseParams() method instead of ReferenceParser.parseParams() cuz in 13u DocCommentParser uses own implementation of the method

Verification (amd64/20.04LTS): test/langtools/tools/doclint/CrashInAnnotateTest.java (new test)
Regression (amd64/20.04LTS): test/langtools;;;","2022-09-19 07:58;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk13u-dev/pull/410
Date: 2022-09-19 14:51:54 +0000;;;","2022-09-20 02:32;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk11u-dev/pull/1363
Date: 2022-09-20 09:21:13 +0000;;;","2022-09-20 05:13;apavlyutkin;Fix request (11u)

The patch fixes javac crash on unallowed annotation usage when running with -Xdoclint option and makes it to generate proper error message. The patch from 13u applied cleanly

Verification (amd64/20.04LTS): test/langtools/tools/doclint/CrashInAnnotateTest.java (new test)
Regression (amd64/20.04LTS): test/langtools;;;",,,,,,,,,,,,,,,,,,,,,,,,,
Lanai: AlphaComposite shows differences on Metal compared to OpenGL,JDK-8266079,5048143,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,avu,pmohan,pmohan,2021-04-27 11:11,2021-08-18 17:41,2023-10-01 09:57,2021-08-14 03:42,17,,,,,,,18,client-libs,,0,lanai,macos,,,,,,,,,,,,"Running the attached AlphaComposite test shows multiple differences between METAL and OPENGL pipelines on Mac OS X 10.15.7 with JDK17.  

Refer to the attached screenshot which highlights Metal and OpenGL rendering. 

",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8272481,,,,,,,,"2021-04-27 11:12;pmohan;AlphaComposite-Metal-OGL.png;https://bugs.openjdk.org/secure/attachment/94415/AlphaComposite-Metal-OGL.png","2021-04-27 11:09;pmohan;AlphaCompositeTest.java;https://bugs.openjdk.org/secure/attachment/94414/AlphaCompositeTest.java","2021-06-13 03:30;avu;RenderPerfBlit.txt;https://bugs.openjdk.org/secure/attachment/95112/RenderPerfBlit.txt","2021-06-13 03:30;avu;RenderPerfKernel.txt;https://bugs.openjdk.org/secure/attachment/95113/RenderPerfKernel.txt","2021-04-27 11:29;pmohan;mbp.png;https://bugs.openjdk.org/secure/attachment/94416/mbp.png","2021-06-10 09:45;avu;txt.patch;https://bugs.openjdk.org/secure/attachment/95095/txt.patch",,,,,,x86,,,,,,b19,,,os_x_10.15,,,,,"0|i2sl6b:",9223372036854775807,b11,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4b09ce31,,,,,,,,,"2021-04-27 11:14;prr;Can you provide details on the exact hardware configuration of the system ?;;;","2021-04-27 11:27;pmohan;Macbook pro 13-inch, 2017

Intel Iris Plus Graphics 640:

  Chipset Model:	Intel Iris Plus Graphics 640
  Type:	GPU
  Bus:	Built-In
  VRAM (Dynamic, Max):	1536 MB
  Vendor:	Intel
  Device ID:	0x5926
  Revision ID:	0x0006
  Metal:	Supported, feature set macOS GPUFamily2 v1
  Displays:
Colour LCD:
  Display Type:	Built-In Retina LCD
  Resolution:	2560x1600 Retina
  Framebuffer Depth:	24-Bit Colour (ARGB8888)
  Main Display:	Yes
  Mirror:	Off
  Online:	Yes
  Automatically Adjust Brightness:	No
  Connection Type:	Internal;;;","2021-04-28 01:46;jdv;I am able to see this difference in rendering in my Macbook pro 13inch early 2015 integrated intel SoC. This difference i am seeing even with very old builds like EA7 release. So it is not a recent regression.;;;","2021-05-26 07:02;avu;I've resolved all the issues from the test (AlphaCompositeTest.java) except Xor mode. Xor has a completely different implementation, so I believe it should be fixed within a separate CR (JDK-8267798).  ;;;","2021-05-29 00:28;avu;According to the GitHub review and some more testing, the current approach caused issues fixed by JDK-8033786.  Also, I tried several more approaches (Use only rgb blending, make the layer opaque). They helped to resolve the test issues but caused regressions in other areas (SwingSet2 tree for example). So, now I think that the only working solution is that I presented here (to set the background color of the window). So if we don't want to have JDK-8033786 back we should accept this behavior for metal.
;;;","2021-05-29 00:48;avu;Actually, we can implement a cumbersome solution with some performance penalty:  switch CAMetalLAyer to non-opaque mode and fill the layer with a color from the underlying window. Also, we should track the opacity of the window and disable this approach if necessary (for transparent windows for example).;;;","2021-05-29 00:50;avu;[~pmohan] Do we have any compatibility test failures because of this problem?;;;","2021-06-02 06:49;skonchad;[~avu] In addition to the JCK that gets run in Mach 5 CI, we ran manual / interactive JCK using JDK 17-ea+21 on macOS M1 machine and have not seen any failures.;;;","2021-06-02 07:04;pmohan;[~avu] Our ATR would be starting in 2 weeks and we would run all tests as part of that. If there is any equivalent failure in JCK, we would report the same here.;;;","2021-06-02 07:13;avu;[~pmohan] [~skonchad] thanks, I'll wait for the extending testing.;;;","2021-06-10 09:44;avu;I've prototyped (see txt.patch) a solution that replaces blit encoder copyFromTexture operation with texture rendering in MTLLayer.blitTexture operation. It seems to work in most of the static cases but sometimes flickered in the dynamic content. It's not a problem for the whole approach. For prototyping, I've just reuse our common encoder manager. So, implementing a separate encoder with a draw texture operation should work. However, such a change should be made in the next release.;;;","2021-06-13 03:31;avu;The prototype mentioned above (with texture rendering) has some performance penalty, so I've implemented another solution using compute kernel. It provides the same performance numbers on my limited testing (sometimes even better performance by about 5-10 percent). See RenderPerfKernel.txt vs RenderPerfBlit.txt. The compute kernel performs texture blit operation replacing alpha by 1.0.;;;","2021-06-28 04:46;jdv;J2DDemo, SwingSet2, Font2DTest is fine with latest commit https://github.com/openjdk/jdk17/pull/62/commits/3eef431e3b9c32713056feee9c083524471c8757 
RenderPerfTest also not showing any performance regression.
But saw some jtreg failures related to ShapedTranslucentWindows in local system. So jtreg and JCK CI test run is in progress.;;;","2021-06-29 10:41;jdv;Seeing 3 jck-awt test failures with latest commit : https://github.com/openjdk/jdk17/pull/62/commits/3eef431e3b9c32713056feee9c083524471c8757;;;","2021-07-01 03:10;jdv;All test run is green with commit : https://github.com/openjdk/jdk17/pull/62/commits/3eef431e3b9c32713056feee9c083524471c8757. Failure we were seeing previously is some CI machine issue.;;;","2021-07-09 07:56;vdyakov;On 7/9/21 12:57 AM, Alexey Ushakov wrote:
> Unfortunately, I didn’t have a chance to update the request. (Last questions from Sergei require some more investigation) so, let’s retarget this one as well.
>
> Best Regards,
> Alexey;;;","2021-08-14 03:42;roboduke;Changeset: 17b93500
Author:    Alexey Ushakov <avu@openjdk.org>
Date:      2021-08-14 10:40:37 +0000
URL:       https://git.openjdk.java.net/jdk/commit/17b93500237e74dca964e1805e65c857e7980bbe
;;;",,,,,,,,,,,,,,,,,
Reader.read(CharBuffer) advances Reader position for read-only Charbuffers,JDK-8266078,5048142,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,bpb,bpb,bpb,2021-04-27 10:54,2023-06-22 10:52,2023-10-01 09:57,2021-04-29 08:55,15,16,17,,,,,17,core-libs,,0,,,,,,,,,,,,,,"If the parameter CharBuffer is read-only, then that should be detected prior to attempting to read from the Reader. A reproducer is attached.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8222329,,,,,,,,"2021-04-27 10:54;bpb;ReadChars.java;https://bugs.openjdk.org/secure/attachment/94412/ReadChars.java",,,,,,,,,,,generic,,,,,,,,,generic,,,,,"0|i2sl63:",9223372036854775807,b21,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@5f132e58,,,,,,,,,"2021-04-29 08:55;roboduke;Changeset: 5f156660
Author:    Brian Burkhalter <bpb@openjdk.org>
Date:      2021-04-29 15:54:11 +0000
URL:       https://git.openjdk.java.net/jdk/commit/5f15666092d9928c07cbe66cdd96538459ffe393
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Regression ~2% in Derby after 8261804,JDK-8266073,5048135,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,lkorinth,ecaspole,ecaspole,2021-04-27 10:03,2021-05-24 16:38,2023-10-01 09:57,2021-05-17 00:08,17,,,,,,,17,hotspot,,0,,,,,,,,,,,,,,On our OCI perf test systems the GC pause time increased from 17 to 24ms.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8261804,,,,,,,,"2021-04-27 10:04;ecaspole;876-1.vgc;https://bugs.openjdk.org/secure/attachment/94410/876-1.vgc","2021-04-27 10:04;ecaspole;877-1.vgc;https://bugs.openjdk.org/secure/attachment/94411/877-1.vgc",,,,,,,,,,x86_64,,,,,,b12,17,,linux,,,,,"0|i2sl4j:",9223372036854775807,b23,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6b00f96c,,,,,,,,,"2021-05-11 02:10;lkorinth;My change made processing_is_mt() to always be false when _active_mt_degree is one. This is better because we then need not to execute on another thread. However, at a few places we do not change the _active_mt_degree if processing_is_mt() is false. I will change the code to always change the mt degree.;;;","2021-05-17 00:08;roboduke;Changeset: f4227879
Author:    Leo Korinth <lkorinth@openjdk.org>
Date:      2021-05-17 07:08:04 +0000
URL:       https://git.openjdk.java.net/jdk/commit/f4227879b0504bc4656bd84153b13b04c007aa66
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
update ProblemList-UT.txt for investigate-UT bug state as of 2021.04.27,JDK-8266060,5048120,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,dcubed,dcubed,dcubed,2021-04-27 08:35,2021-05-03 20:17,2023-10-01 09:57,2021-04-27 09:46,17,,,,,,,17,hotspot,,0,,,,,,,,,,,,,,The summary says it all. ,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2sl17:",9223372036854775807,b20,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,,,"2021-04-27 08:46;dcubed;Here's the context diff for the proposed updates:

$ git diff
diff --git a/closed/test/ProblemList-UT.txt b/closed/test/ProblemList-UT.txt
index 5306a90ed3..a4f8a2aceb 100644
--- a/closed/test/ProblemList-UT.txt
+++ b/closed/test/ProblemList-UT.txt
@@ -51,7 +51,8 @@ java/lang/instrument/VerifyLocalVariableTableOnRetransformTest.sh 8262002 linux-
 # 
 # 8262052 is closed as a duplicate of 8210373 which is now fixed.
 #
-compiler/whitebox/BlockingCompilation.java 8262060 linux-x64
+# 8262060 is fixed.
+#
 serviceability/jvmti/HeapMonitor/MyPackage/HeapMonitorArrayAllSampledTest.java 8262061 linux-x64
 serviceability/jvmti/HeapMonitor/MyPackage/HeapMonitorInterpreterObjectTest.java 8262061 linux-x64
 serviceability/jvmti/HeapMonitor/MyPackage/HeapMonitorMultiArrayTest.java 8262061 linux-x64
@@ -75,7 +76,7 @@ compiler/uncommontrap/TestDeoptOOM.java 8262134 linux-x64
 #
 # 8262399 does not reproduce with JDK16 or JDK17.
 #
-# 8262489 exists for backporting 8262005 to earlier releases.
+# 8262489 exists for backporting 8262005 to earlier releases and is fixed.
 #
 # 8262862 is fixed.
 #
@@ -88,4 +89,12 @@ tools/jpackage/share/jdk/jpackage/tests/JLinkOptionsTest.java 8263466 linux-x64
 tools/jpackage/share/jdk/jpackage/tests/MainClassTest.java 8263466 linux-x64
 tools/jpackage/share/AddLauncherTest.java#id1 8263466 linux-x64
 tools/jpackage/share/jdk/jpackage/tests/AppVersionTest.java 8263466 linux-x64
+tools/jpackage/share/jdk/jpackage/tests/BasicTest.java 8263466 linux-x64
 gc/stress/TestStressG1Humongous.java 8264522 linux-x64
+#
+# JCK-7315991 is handled by closed/test/jck/jck-ut.jtx
+#
+# 8265454 added support for closed/test/jck/jck-ut.jtx and is fixed.
+#
+# 8266002 has not failed in testing yet
+#
diff --git a/closed/test/jck/jck-ut.jtx b/closed/test/jck/jck-ut.jtx
index 62c44d6d1d..4504140c02 100644
--- a/closed/test/jck/jck-ut.jtx
+++ b/closed/test/jck/jck-ut.jtx
@@ -17,4 +17,4 @@
 # Example:
 # api/java_security/KeyStore/index.html[GetInstance2Tests] JCK-7310808
 
-vm/jvmti/ClassPrepare/cprp001/cprp00101/cprp00101.html JDK-8265382
+vm/jvmti/ClassPrepare/cprp001/cprp00101/cprp00101.html JCK-7315991;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
"runtime/stringtable/StringTableCleaningTest.java failed with ""RuntimeException: Missing Callback in [10, 11]""",JDK-8266056,5048114,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,pliden,dcubed,dcubed,2021-04-27 07:30,2022-03-09 12:16,2023-10-01 09:57,2021-05-03 00:28,17,,,,,,,17,hotspot,,0,intermittent,tier3,zgc,,,,,,,,,,,"The following test failed in the JDK17 CI:

runtime/stringtable/StringTableCleaningTest.java

Here's a snippet from the log file:

#section:main
----------messages:(5/471)----------
command: main -Xbootclasspath/a:. -XX:+UnlockDiagnosticVMOptions -XX:+WhiteBoxAPI runtime.stringtable.StringTableCleaningTest 30
reason: User specified action: run main/othervm -Xbootclasspath/a:. -XX:+UnlockDiagnosticVMOptions -XX:+WhiteBoxAPI runtime.stringtable.StringTableCleaningTest 30 
Mode: othervm [/othervm specified]
Additional options from @modules: --add-modules java.base --add-exports java.base/jdk.internal.misc=ALL-UNNAMED
elapsed time (seconds): 31.627
----------configuration:(4/111)----------
Boot Layer
  add modules: java.base                   
  add exports: java.base/jdk.internal.misc ALL-UNNAMED

----------System.out:(21/2956)----------
Command line: [/opt/mach5/mesos/work_dir/jib-master/install/jdk-17+20-1713/linux-aarch64-debug.jdk/jdk-17/fastdebug/bin/java -cp /opt/mach5/mesos/work_dir/slaves/a4f8fba9-f017-4328-b286-c66b6a97143d-S809/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/c478ef43-74dd-4934-a882-4d42cd0d2df4/runs/173cf0f4-cc30-441c-ba75-86386efa5566/testoutput/test-support/jtreg_open_test_hotspot_jtreg_hotspot_runtime/classes/1/runtime/stringtable/StringTableCleaningTest.d:/opt/mach5/mesos/work_dir/jib-master/install/jdk-17+20-1713/src.full/open/test/hotspot/jtreg/runtime/stringtable:/opt/mach5/mesos/work_dir/slaves/a4f8fba9-f017-4328-b286-c66b6a97143d-S809/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/c478ef43-74dd-4934-a882-4d42cd0d2df4/runs/173cf0f4-cc30-441c-ba75-86386efa5566/testoutput/test-support/jtreg_open_test_hotspot_jtreg_hotspot_runtime/classes/1/test/lib:/opt/mach5/mesos/work_dir/jib-master/install/jdk-17+20-1713/src.full/open/test/lib:/opt/mach5/mesos/work_dir/jib-master/install/jtreg/5.1/b01/bundles/jtreg_bin-5.1.zip/jtreg/lib/javatest.jar:/opt/mach5/mesos/work_dir/jib-master/install/jtreg/5.1/b01/bundles/jtreg_bin-5.1.zip/jtreg/lib/jtreg.jar -XX:MaxRAMPercentage=8 -Djava.io.tmpdir=/opt/mach5/mesos/work_dir/slaves/a4f8fba9-f017-4328-b286-c66b6a97143d-S809/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/c478ef43-74dd-4934-a882-4d42cd0d2df4/runs/173cf0f4-cc30-441c-ba75-86386efa5566/testoutput/test-support/jtreg_open_test_hotspot_jtreg_hotspot_runtime/tmp -XX:+CreateCoredumpOnCrash -XX:+UseZGC -Xlog:gc,gc+start,stringtable*=trace -Xmx1g runtime.stringtable.StringTableCleaningTest$Tester 30 ]
[2021-04-27T09:48:25.950527373Z] Gathering output for process 3160773
[2021-04-27T09:48:56.403991952Z] Waiting for completion for process 3160773
[2021-04-27T09:48:56.404312374Z] Waiting for completion finished for process 3160773
Output and diagnostic info for process 3160773 was saved into 'pid-3160773-output.log'
[2021-04-27T09:48:56.425956399Z] Waiting for completion for process 3160773
[2021-04-27T09:48:56.426207171Z] Waiting for completion finished for process 3160773
--- Output check failed: 1 -----
[0.045s][info][gc] Using The Z Garbage Collector
[0.045s][trace][stringtable] Start size: 65536 (16)
[11.235s][info ][gc,start   ] GC(0) Garbage Collection (Warmup)
[11.833s][trace][stringtable] Uncleaned items:476282
[11.834s][debug][stringtable] Concurrent work triggered, live factor: 16.2292 dead factor: 7.26749
[11.834s][debug][stringtable,perf] Concurrent work, live factor: 16.229
[11.834s][trace][stringtable     ] Started to grow
[12.255s][info ][gc              ] GC(0) Garbage Collection (Warmup) 104M(10%)->66M(6%)
[14.245s][debug][stringtable,perf] Grow, 2.4105156 secs
[14.245s][debug][stringtable     ] Grown to size:131072
[29.835s][info ][gc,start        ] GC(1) Garbage Collection (Warmup)
[30.511s][info ][gc              ] GC(1) Garbage Collection (Warmup) Aborted

----------System.err:(17/1229)----------
java.lang.RuntimeException: Missing Callback in [10, 11]
	at runtime.stringtable.StringTableCleaningTest.fail(StringTableCleaningTest.java:67)
	at runtime.stringtable.StringTableCleaningTest.findCallback(StringTableCleaningTest.java:181)
	at runtime.stringtable.StringTableCleaningTest.check(StringTableCleaningTest.java:212)
	at runtime.stringtable.StringTableCleaningTest.checkOutput(StringTableCleaningTest.java:224)
	at runtime.stringtable.StringTableCleaningTest.main(StringTableCleaningTest.java:63)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:78)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at com.sun.javatest.regtest.agent.MainWrapper$MainThread.run(MainWrapper.java:127)
	at java.base/java.lang.Thread.run(Thread.java:831)

JavaTest Message: Test threw exception: java.lang.RuntimeException: Missing Callback in [10, 11]",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8282900,,,,,,,,,,,,,,,,,,,aarch64,,,,,,,,,linux,,,,,"0|i2skzv:",9223372036854775807,b21,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,,,"2021-04-27 11:08;mseledtsov;ILW = MLM = P4;;;","2021-04-29 12:08;mseledtsov;This issue shows up quite frequently now. Bumping up the priority.
ILW = MMM = P3;;;","2021-04-30 02:28;pliden;I looked at this and managed to reproduce it (with some additional code injected to make it more likely to happen). In short, this is a test bug in that:
1) The test doesn't fully take into account that a concurrent GC might not complete (it can abort if the VM wants to terminate).
2) The regexp patterns used for ZGC needs to be more exact. The end pattern now also matches aborted GCs, which it shouldn't.

[~coleenp] Unless you have a fix on the way, feel free to assign the bug to me and I'll send out a PR with my fix.;;;","2021-05-03 00:28;roboduke;Changeset: c5dc657f
Author:    Per Liden <pliden@openjdk.org>
Date:      2021-05-03 07:28:19 +0000
URL:       https://git.openjdk.java.net/jdk/commit/c5dc657f0be90bd594663dcc612f40a930c2bbe7
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
ZGC: ZHeap::print_extended_on() doesn't disable deferred delete,JDK-8266055,5048113,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,pliden,pliden,pliden,2021-04-27 06:39,2021-05-06 19:10,2023-10-01 09:57,2021-04-27 22:51,17,,,,,,,17,hotspot,,0,zgc,,,,,,,,,,,,,"In ZHeap::print_extended_on(), the last call to _page_allocator.enable_deferred_delete() should be _page_allocator.disable_deferred_delete().
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2skzn:",9223372036854775807,b21,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6b00f96c,,,,,,,,,"2021-04-27 22:51;roboduke;Changeset: 2201e11c
Author:    Per Liden <pliden@openjdk.org>
Date:      2021-04-28 05:50:25 +0000
URL:       https://git.openjdk.java.net/jdk/commit/2201e11cbfc506d986cd4adedc78b83ee497cbb8
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Nested class summary should show kind of class or interface,JDK-8266044,5048069,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,hannesw,hannesw,hannesw,2021-04-27 03:33,2021-06-22 14:04,2023-10-01 09:57,2021-05-06 07:55,,,,,,,,17,tools,,0,release-note=yes,,,,,,,,,,,,,"Currently, the nested class summary lists all nested classes as either `class` or `interface`. It would be useful to display the actual kind of nested class or interface such as `enum` or `record`.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2skpv:",9223372036854775807,b22,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@7900061a,,,,,,,,,"2021-05-06 07:55;roboduke;Changeset: 2dcbedf9
Author:    Hannes Wallnöfer <hannesw@openjdk.org>
Date:      2021-05-06 14:55:00 +0000
URL:       https://git.openjdk.java.net/jdk/commit/2dcbedf92a31da55299607c006821f22cc72ac0a
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Lanai: Incorrect calculations of  clipping boundaries,JDK-8266040,5048065,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,avu,avu,avu,2021-04-27 02:37,2021-05-06 19:14,2023-10-01 09:57,2021-04-30 06:54,,,,,,,,17,client-libs,,0,lanai,,,,,,,,,,,,,"Metal rendering pipeline incorrectly calculates boundaries for shape clip (they are bigger than actual ones), so the pipeline wastes CPU/GPU resources on copying needless data.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8264141,,,,,,,,,,,,,,,,,,,,,,,,,,,,,17,,os_x,,,,,"0|i2skoz:",9223372036854775807,b21,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4b09ce31,,,,,,,,,"2021-04-30 06:54;roboduke;Changeset: 87de5b75
Author:    Alexey Ushakov <avu@openjdk.org>
Committer: Jayathirth D V <jdv@openjdk.org>
Date:      2021-04-30 13:53:58 +0000
URL:       https://git.openjdk.java.net/jdk/commit/87de5b750d2289512f002ecd307117734781f862
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
class file for sun.misc.Contended not found,JDK-8266036,5048061,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,jlahoda,dnsimon,dnsimon,2021-04-27 02:05,2021-07-15 10:33,2023-10-01 09:57,2021-07-07 02:51,11,16,17,,,,,17,tools,,0,,,,,,,,,,,,,,"Trying to compile a class that subclasses java.util.concurrent.ForkJoinPool with --release 8 causes the following error:

> javac --release 8 -processorpath demo demo/MyPool.java
error: cannot access Contended
  class file for sun.misc.Contended not found
1 error

I can confirm this happens with javac from JDK 11.0.10 and JDK 16.

This can be reproduce with the attached demo.jar:

jar xf demo.jar
javac --release 8 -processorpath demo demo/MyPool.java

As a side note, discovering which Java sources triggered this error was not straight forward as the error message does not mention it (note lack of ""MyPool"" in the error message).",,,,,,,,,,,JDK-8270726,JDK-8270050,,,,,,,,,,,,,,,,,,,,,JDK-8258421,,,,,,,,"2021-04-27 02:05;dnsimon;demo.jar;https://bugs.openjdk.org/secure/attachment/94406/demo.jar",,,,,,,,,,,,,,,,,,,,,,,,,"0|i2sko3:",9223372036854775807,b31,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4dca67bd,,,,,,,,,"2021-06-11 06:08;jlahoda;Solving this issue also solves JDK-8258421, which is a P3, making this bug P3 as well.;;;","2021-07-07 02:51;roboduke;Changeset: 7fcd5ca0
Author:    Jan Lahoda <jlahoda@openjdk.org>
Date:      2021-07-07 09:49:53 +0000
URL:       https://git.openjdk.java.net/jdk17/commit/7fcd5ca0258b1dc6c34c98ced177ee4dc7945f26
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
"C2 computes -0.0 for Math.pow(-0.0, 0.5)",JDK-8266028,5048053,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,jiefu,jiefu,jiefu,2021-04-27 01:19,2021-06-03 02:59,2023-10-01 09:57,2021-04-27 23:17,17,,,,,,,17,hotspot,,0,c2,hs-comp-triaged,oracle-triage-11,oracle-triage-17,tencent-interest,,,,,,,,,"According to the API specs, Math.pow(-0.0, 0.5) should return 0.0 instead of -0.0.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8264945,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2skmb:",9223372036854775807,b21,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2021-04-27 23:17;roboduke;Changeset: 75a2354d
Author:    Jie Fu <jiefu@openjdk.org>
Date:      2021-04-28 06:16:47 +0000
URL:       https://git.openjdk.java.net/jdk/commit/75a2354dc276e107d64516d20fc72bc7ef3d5f86
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
The diamond finder does not find diamond candidates in field initializers,JDK-8266027,5048051,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,jlahoda,jlahoda,jlahoda,2021-04-27 00:00,2021-05-06 19:13,2023-10-01 09:57,2021-04-29 07:56,17,,,,,,,17,tools,,0,,,,,,,,,,,,,,"Consider code like:
---
public class Test {
     private List<String> l = new ArrayList<String>();
}
---

Running javac with -XDfind=diamond will not produce a warning about the diamond candidate, while doing the some on:
---
public class Test {
     List<String> l = new ArrayList<String>();
}
---

will produce:
Test.java:4: warning: Redundant type arguments in new expression (use diamond operator instead).
     List<String> l = new ArrayList<String>();
                                   ^
1 warning
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2sklv:",9223372036854775807,b21,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4dca67bd,,,,,,,,,"2021-04-29 07:56;roboduke;Changeset: f0f6b0d9
Author:    Jan Lahoda <jlahoda@openjdk.org>
Date:      2021-04-29 14:55:28 +0000
URL:       https://git.openjdk.java.net/jdk/commit/f0f6b0d919266b90bd91971f3cdb915f4e8c5300
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
StreamResult(File) writes to incorrect file path if # is part of the file path,JDK-8266019,5048017,Bug,Closed,JDK,JDK,software,duke,,,P4,Fixed,joehw,webbuggrp,webbuggrp,2021-04-26 11:23,2021-08-31 01:08,2023-10-01 09:57,2021-06-03 14:27,11,17,8,,,,,17,xml,,0,dcsaw,reproducer-yes,webbug,,,,,,,,,,,"A DESCRIPTION OF THE PROBLEM :
StreamResult(File) writes to incorrect file path if # is part of the file path

STEPS TO FOLLOW TO REPRODUCE THE PROBLEM :
See test case below.

EXPECTED VERSUS ACTUAL BEHAVIOR :
EXPECTED -
Write file ./output/#/dom.xml
ACTUAL -
Write file ./output

Exception in thread ""main"" javax.xml.transform.TransformerException: java.io.FileNotFoundException: ./output (Is a directory)
	at java.xml/com.sun.org.apache.xalan.internal.xsltc.trax.TransformerImpl.getOutputHandler(TransformerImpl.java:540)
	at java.xml/com.sun.org.apache.xalan.internal.xsltc.trax.TransformerImpl.transform(TransformerImpl.java:354)
	at test.Main.main(Main.java:26)
Caused by: java.io.FileNotFoundException: ./output (Is a directory)
	at java.base/java.io.FileOutputStream.open0(Native Method)
	at java.base/java.io.FileOutputStream.open(FileOutputStream.java:298)
	at java.base/java.io.FileOutputStream.<init>(FileOutputStream.java:237)
	at java.base/java.io.FileOutputStream.<init>(FileOutputStream.java:126)
	at java.xml/com.sun.org.apache.xalan.internal.xsltc.trax.TransformerImpl.getOutputHandler(TransformerImpl.java:513)
	... 2 more

---------- BEGIN SOURCE ----------

package test;

import java.io.File;

import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.transform.OutputKeys;
import javax.xml.transform.Transformer;
import javax.xml.transform.TransformerFactory;
import javax.xml.transform.dom.DOMSource;
import javax.xml.transform.stream.StreamResult;

import org.w3c.dom.Document;

public class Main {

	public static void main(String[] args) throws Exception {
		File f = new File(""./output/#/dom.xml"");
		f.getParentFile().mkdirs();

		Document dom = DocumentBuilderFactory.newInstance().newDocumentBuilder().newDocument();
		dom.appendChild(dom.createElement(""root""));

		Transformer tr = TransformerFactory.newInstance().newTransformer();
		tr.setOutputProperty(OutputKeys.INDENT, ""yes"");
		tr.transform(new DOMSource(dom), new StreamResult(f));
	}

}

---------- END SOURCE ----------

CUSTOMER SUBMITTED WORKAROUND :
Use StreamResult(OutputStream) with standard FileOutputStream instead.

FREQUENCY : always


",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8268222,,,,,,,,"2021-04-26 19:25;tongwan;Main.java;https://bugs.openjdk.org/secure/attachment/94405/Main.java",,,,,,,,,,,,,,,,,,,,,,,,,"0|i2skeb:",9223372036854775807,b26,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@33088177,,,,,,,Not verified,,"2021-04-26 20:31;tongwan;The observations on Windows 10:
JDK 8: Failed, write file ./output 
JDK 11: Failed.
JDK 17ea+6: Failed.;;;","2021-06-03 14:27;roboduke;Changeset: 460ce555
Author:    Joe Wang <joehw@openjdk.org>
Date:      2021-06-03 21:26:32 +0000
URL:       https://git.openjdk.java.net/jdk/commit/460ce5553c587715ef8244bee7e363b3587d2d0f
;;;","2021-06-18 04:15;tongwan;Requested the submitter verify the fix by downloading the latest version JDK 17 from https://jdk.java.net/17/;;;","2021-08-31 01:08;tongwan;No verification received from the submitter.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Shenandoah: fix an incorrect assert,JDK-8266018,5048043,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,jiefu,jiefu,jiefu,2021-04-26 19:44,2021-06-25 05:10,2023-10-01 09:57,2021-05-06 02:17,11.0.9,16,17,8-shenandoah,,,,17,hotspot,,0,gc-shenandoah,jdk11u-fix-request,jdk11u-fix-yes,tencent-interest,,,,,,,,,,"This is on behalf of wattsun@tencent.com

assert(alias = Compile::AliasIdxRaw, ""following raw memory can't lead to a barrier"");
```
bool ShenandoahBarrierC2Support::is_dominator(Node* d_c, Node* n_c, Node* d, Node* n, PhaseIdealLoop* phase) {
  if (d_c != n_c) {
    return phase->is_dominator(d_c, n_c);
  }
  return is_dominator_same_ctrl(d_c, d, n, phase);
}

Node* next_mem(Node* mem, int alias) {
  Node* res = NULL;
  if (mem->is_Proj()) {
    res = mem->in(0);
  } else if (mem->is_SafePoint() || mem->is_MemBar()) {
    res = mem->in(TypeFunc::Memory);
  } else if (mem->is_Phi()) {
    res = mem->in(1);
  } else if (mem->is_MergeMem()) {
    res = mem->as_MergeMem()->memory_at(alias);
  } else if (mem->is_Store() || mem->is_LoadStore() || mem->is_ClearArray()) {
    assert(alias = Compile::AliasIdxRaw, ""following raw memory can't lead to a barrier"");
    res = mem->in(MemNode::Memory);
  } else {
#ifdef ASSERT
    mem->dump();
#endif
    ShouldNotReachHere();
  }
  return res;
}
```",,,,,,,,,,,JDK-8269377,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2skk3:",9223372036854775807,b22,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6b00f96c,,,,,,,,,"2021-04-26 20:20;jiefu;PR: https://github.com/openjdk/jdk/pull/3710;;;","2021-05-06 02:17;roboduke;Changeset: 2dd56676
Author:    wattsun <wattsun@tencent.com>
Committer: Roman Kennke <rkennke@openjdk.org>
Date:      2021-05-06 09:16:35 +0000
URL:       https://git.openjdk.java.net/jdk/commit/2dd56676fb564072f73f5fd9e591bda7922523ac
;;;","2021-06-25 03:10;shade;Fix Request (11u)

Clean backport, passes hotspot_gc_shenandoah.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Regression brought by optimization done with JDK-4926314,JDK-8266014,5048035,Bug,Closed,JDK,JDK,software,duke,,,P2,Fixed,bpb,dbessono,dbessono,2021-04-26 16:48,2021-08-05 08:28,2023-10-01 09:57,2021-04-29 08:36,17,,,,,,,17,core-libs,,0,conformance,regression,tck-red-17,,,,,,,,,,,"Supposedly after the fix for JDK-4926314 the following code

    new BufferedReader(new CharArrayReader(new char[]{1, 2, 3}))
                            .read(CharBuffer.allocate(0))

started to produce '-1' instead of the expected '0'

Specification for method Reader::read says:

""Returns: The number of characters added to the buffer, or -1 if this source of characters is at its end""
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-4926314,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2skib:",9223372036854775807,b21,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@5f132e58,,,,,,,Verified,,"2021-04-29 08:36;roboduke;Changeset: 2a037395
Author:    Brian Burkhalter <bpb@openjdk.org>
Date:      2021-04-29 15:35:14 +0000
URL:       https://git.openjdk.java.net/jdk/commit/2a037395306edc96338073dead70045fcf3167c6
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
vmTestbase/nsk/jvmti/ClassPrepare/classprep001 should skip events for unexpected classes,JDK-8266002,5048020,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,amenkov,amenkov,amenkov,2021-04-26 12:20,2021-05-12 17:30,2023-10-01 09:57,2021-05-06 11:38,,,,,,,,17,hotspot,,0,investigate-UT,,,,,,,,,,,,,"vmTestbase/nsk/jvmti/ClassPrepare/classprep001 test requests ClassPrepare event and expects exactly 2 events (for the test interface and then for the test class). But concurrent class loading may cause loading of other classes (for example from java.util.concurrent class).
The test should be ready for the case and skip events from other classes",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JCK-7315991,,,,,,,,,,,,,,,generic,,,,,,,,,generic,,,,,"0|i2skez:",9223372036854775807,b22,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@661b156a,,,,,,,,,"2021-05-06 11:38;roboduke;Changeset: 0ca86da0
Author:    Alex Menkov <amenkov@openjdk.org>
Date:      2021-05-06 18:38:11 +0000
URL:       https://git.openjdk.java.net/jdk/commit/0ca86da0e3563a8328f6ff2a3bc4d4c5b8a82e69
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Fix sun/text/IntHashtable/Bug4170614 for JDK 8u,JDK-8265988,5048001,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,shade,shade,shade,2021-04-26 10:21,2021-05-04 13:17,2023-10-01 09:57,2021-04-27 09:30,openjdk8u212,,,,,,,openjdk8u302,core-libs,,0,jdk8u-fix-request,jdk8u-fix-yes,testbug,,,,,,,,,,,"These tests were introduced to 8u with JDK-8031145. But it cannot really run on 8u, because it uses JDK 9+ module patching. So it fails like this:

+ /home/shade/trunks/jdk8u-dev/build/linux-x86_64-normal-server-fastdebug/images/j2sdk-image/bin/java -XX:MaxRAMPercentage=1.0 -ea -esa -Xmx512m -Xpatch:java.base=/home/shade/trunks/jdk8u-dev/build/linux-x86_64-normal-server-fastdebug/testoutput/jdk_adhoc/JTwork/classes/0/sun/text/IntHashtable/java.base java.text.Bug4170614Test
Unrecognized option: -Xpatch:java.base=/home/shade/trunks/jdk8u-dev/build/linux-x86_64-normal-server-fastdebug/testoutput/jdk_adhoc/JTwork/classes/0/sun/text/IntHashtable/java.base
Error: Could not create the Java Virtual Machine.
Error: A fatal exception has occurred. Program will exit.
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8031145,JDK-8229922,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2skar:",9223372036854775807,b01,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6fc9e792,,,,,,,,,"2021-04-26 10:47;shade;Fix Request (8u)

This fixes the test in 8u. This is new, 8u-specific patch. 8u RFR (acked by sgehwolf): https://mail.openjdk.java.net/pipermail/jdk8u-dev/2021-April/013728.html;;;","2021-04-27 09:30;hgupdate;URL:   https://hg.openjdk.java.net/jdk8u/jdk8u-dev/jdk/rev/898937a8f83f
User:  shade
Date:  2021-04-27 16:26:17 +0000
;;;","2021-05-04 13:14;hgupdate;URL:   https://hg.openjdk.java.net/jdk8u/jdk8u/jdk/rev/898937a8f83f
User:  andrew
Date:  2021-05-04 20:08:37 +0000
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
"Concurrent GC: Some tests fail ""assert(is_frame_safe(f)) failed: Frame must be safe""",JDK-8265984,5047973,Bug,Closed,JDK,JDK,software,duke,,,P2,Fixed,pliden,dcubed,dcubed,2021-04-26 08:41,2021-08-24 14:11,2023-10-01 09:57,2021-05-03 06:35,17,,,,,,,17,hotspot,,0,gc-shenandoah,intermittent,test-bigapps-runThese,tier3,tier8,zgc,,,,,,,,"The following test failed in the JDK17 CI:

applications/runthese/RunThese30M.java

Here's a snippet from the log file:

[stress.process.out] Verifying the constraints on the serial fields
[stress.process.out] ConstructorTest0003 passed
[2021-04-26T12:11:07.400644200Z] Gathering output for process 50396
# To suppress the following error report, specify this argument
# after -XX: or in .hotspotrc:  SuppressErrorAt=\\stackWatermark.cpp:179
#
# A fatal error has been detected by the Java Runtime Environment:
#
#  Internal Error (t:\\workspace\\open\\src\\hotspot\\share\\runtime\\stackWatermark.cpp:179), pid=28660, tid=47916
#  assert(is_frame_safe(f)) failed: Frame must be safe
#
# JRE version: Java(TM) SE Runtime Environment (17.0+20) (fastdebug build 17-ea+20-LTS-1686)
# Java VM: Java HotSpot(TM) 64-Bit Server VM (fastdebug 17-ea+20-LTS-1686, mixed mode, sharing, tiered, compressed class ptrs, z gc, windows-amd64)
# Core dump will be written. Default location: T:\\testoutput\\test-support\\jtreg_closed_test_hotspot_jtreg_applications_runthese_RunThese30M_java\\scratch\\0\\hs_err_pid28660.mdmp
#
# An error report file with more information is saved as:
# T:\\testoutput\\test-support\\jtreg_closed_test_hotspot_jtreg_applications_runthese_RunThese30M_java\\scratch\\0\\hs_err_pid28660.log
#
# If you would like to submit a bug report, please visit:
#   https://bugreport.java.com/bugreport/crash.jsp
#
----------System.err:(1200/94003)*----------


Here's the crashing thread's stack:

---------------  T H R E A D  ---------------

Current thread (0x0000014c4836bc70):  JavaThread ""logback-appender-logstash-logstash-prod.s0.javaplatfo1iad.oraclevcn.com:10074-4"" daemon [_thread_in_Java, id=47916, stack(0x00000032adc00000,0x00000032add00000)]

Stack: [0x00000032adc00000,0x00000032add00000]
Native frames: (J=compiled Java code, j=interpreted, Vv=VM code, C=native code)
V  [jvm.dll+0xacc441]  os::platform_print_native_stack+0xf1  (os_windows_x86.cpp:235)
V  [jvm.dll+0xcef0d7]  VMError::report+0xfc7  (vmError.cpp:739)
V  [jvm.dll+0xcf0a5e]  VMError::report_and_die+0x7fe  (vmError.cpp:1549)
V  [jvm.dll+0xcf1174]  VMError::report_and_die+0x64  (vmError.cpp:1330)
V  [jvm.dll+0x4ce787]  report_vm_error+0xb7  (debug.cpp:282)
V  [jvm.dll+0xbb4b18]  StackWatermark::assert_is_frame_safe+0xd8  (stackWatermark.cpp:179)
V  [jvm.dll+0xbb5b06]  StackWatermarkSet::after_unwind+0x1a6  (stackWatermarkSet.cpp:93)
V  [jvm.dll+0xb71193]  OptoRuntime::rethrow_C+0x23  (runtime.cpp:1425)
C  0x0000014a2e2b7255

Java frames: (J=compiled Java code, j=interpreted, Vv=VM code)
v  ~RuntimeStub::_rethrow_Java
J 2043 c1 sun.nio.ch.NioSocketImpl.read([BII)I java.base@17-ea (96 bytes) @ 0x0000014a2eb253f4 [0x0000014a2eb24c80+0x0000000000000774]
J 2042 c1 sun.nio.ch.NioSocketImpl$1.read([BII)I java.base@17-ea (11 bytes) @ 0x0000014a2eb2467c [0x0000014a2eb245e0+0x000000000000009c]
J 4291 c1 java.net.Socket$SocketInputStream.read()I java.base@17-ea (28 bytes) @ 0x0000014a2eda1174 [0x0000014a2eda0f20+0x0000000000000254]
j  net.logstash.logback.appender.AbstractLogstashTcpSocketAppender$TcpSendingEventHandler$ReaderRunnable.run()V+14
j  java.util.concurrent.Executors$RunnableAdapter.call()Ljava/lang/Object;+4 java.base@17-ea
j  java.util.concurrent.FutureTask.run()V+39 java.base@17-ea
j  java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run()V+28 java.base@17-ea
j  java.util.concurrent.ThreadPoolExecutor.runWorker(Ljava/util/concurrent/ThreadPoolExecutor$Worker;)V+92 java.base@17-ea
j  java.util.concurrent.ThreadPoolExecutor$Worker.run()V+5 java.base@17-ea
j  java.lang.Thread.run()V+11 java.base@17-ea
v  ~StubRoutines::call_stub

I'm starting this bug off in hotspot/gc since the assert failure
is in StackWatermark::assert_is_frame_safe() and this is ZGC.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8266029,,,JDK-8266453,,,,JDK-8265702,,,,"2021-04-29 06:07;zgu;hs_err_pid53234.log;https://bugs.openjdk.org/secure/attachment/94443/hs_err_pid53234.log",,,,,,,,,,,x86_64,,,,,,,,,generic,,,,,"0|i2sk9n:",9223372036854775807,b21,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6b00f96c,,,,,,,,,"2021-04-27 07:27;dcubed;Here the crashing stack for the jdk-17+20-1712-tier3 sighting:

---------------  T H R E A D  ---------------

Current thread (0x00007f65cc219e00):  JavaThread ""logback-appender-logstash-logstash-prod.s0.javaplatfo1iad.oraclevcn.com:10074-4"" daemon [_thread_in_Java, id=743859, stack(0x00007f66284ef000,0x00007f66285f0000)]

Stack: [0x00007f66284ef000,0x00007f66285f0000],  sp=0x00007f66285ed260,  free space=1016k
Native frames: (J=compiled Java code, j=interpreted, Vv=VM code, C=native code)
V  [libjvm.so+0x1772ddf]  StackWatermark::assert_is_frame_safe(frame const&)+0x6f
V  [libjvm.so+0x1774b3b]  StackWatermark::after_unwind()+0x1cb
V  [libjvm.so+0x1774468]  StackWatermarkSet::after_unwind(JavaThread*)+0x38
V  [libjvm.so+0x16e7442]  OptoRuntime::rethrow_C(oopDesc*, JavaThread*, unsigned char*)+0x22
v  ~RuntimeStub::_rethrow_Java
J 3905 c1 java.net.Socket$SocketInputStream.read()I java.base@17-ea (28 bytes) @ 0x00007f68498231cc [0x00007f6849822f80+0x000000000000024c]
j  net.logstash.logback.appender.AbstractLogstashTcpSocketAppender$TcpSendingEventHandler$ReaderRunnable.run()V+14
j  java.util.concurrent.Executors$RunnableAdapter.call()Ljava/lang/Object;+4 java.base@17-ea
j  java.util.concurrent.FutureTask.run()V+39 java.base@17-ea
j  java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run()V+28 java.base@17-ea
j  java.util.concurrent.ThreadPoolExecutor.runWorker(Ljava/util/concurrent/ThreadPoolExecutor$Worker;)V+92 java.base@17-ea
j  java.util.concurrent.ThreadPoolExecutor$Worker.run()V+5 java.base@17-ea
j  java.lang.Thread.run()V+11 java.base@17-ea
v  ~StubRoutines::call_stub
V  [libjvm.so+0xe91805]  JavaCalls::call_helper(JavaValue*, methodHandle const&, JavaCallArguments*, Thread*)+0x595
V  [libjvm.so+0xe92065]  JavaCalls::call_virtual(JavaValue*, Klass*, Symbol*, Symbol*, JavaCallArguments*, Thread*)+0x4c5
V  [libjvm.so+0xe924e7]  JavaCalls::call_virtual(JavaValue*, Handle, Klass*, Symbol*, Symbol*, Thread*)+0x77
V  [libjvm.so+0x1009a5b]  thread_entry(JavaThread*, Thread*)+0x12b
V  [libjvm.so+0x18b5d41]  JavaThread::thread_main_inner()+0x271
V  [libjvm.so+0x18bd780]  Thread::call_run()+0x100
V  [libjvm.so+0x159416e]  thread_native_entry(Thread*)+0x10e

Java frames: (J=compiled Java code, j=interpreted, Vv=VM code)
v  ~RuntimeStub::_rethrow_Java
J 3905 c1 java.net.Socket$SocketInputStream.read()I java.base@17-ea (28 bytes) @ 0x00007f68498231cc [0x00007f6849822f80+0x000000000000024c]
j  net.logstash.logback.appender.AbstractLogstashTcpSocketAppender$TcpSendingEventHandler$ReaderRunnable.run()V+14
j  java.util.concurrent.Executors$RunnableAdapter.call()Ljava/lang/Object;+4 java.base@17-ea
j  java.util.concurrent.FutureTask.run()V+39 java.base@17-ea
j  java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run()V+28 java.base@17-ea
j  java.util.concurrent.ThreadPoolExecutor.runWorker(Ljava/util/concurrent/ThreadPoolExecutor$Worker;)V+92 java.base@17-ea
j  java.util.concurrent.ThreadPoolExecutor$Worker.run()V+5 java.base@17-ea
j  java.lang.Thread.run()V+11 java.base@17-ea
v  ~StubRoutines::call_stub;;;","2021-04-29 06:07;zgu;Shenandoah nightly test sees the similar problem quite often lately on Linux x86_64.

The suspicious change seems came from JDK-8265702:

--- a/src/hotspot/share/opto/runtime.cpp
+++ b/src/hotspot/share/opto/runtime.cpp
@@ -1377,7 +1377,7 @@ address OptoRuntime::handle_exception_C(JavaThread* current) {
   // deoptimized frame
 
   if (nm != NULL) {
-    RegisterMap map(current, false);
+    RegisterMap map(current, false /* update_map */, false /* process_frames */);
     frame caller = current->last_frame().sender(&map);
 #ifdef ASSERT
     assert(caller.is_compiled_frame(), ""must be"");

I wonder if this change should only apply to macOS/aarch64.;;;","2021-04-29 07:34;pliden;[~zgu] I agree that change could be the one triggering this, but process_frames should be false here since we're not touching oops. It seems to me that this just happened to have uncovered a different/pre-existing bug, where we're not processing frames as we should but because we used to do it here we got away with it.

Letting process_frames be false only for macos/aarch64 would not be the correct solution here, since macos/aarch64 would still have the bug.;;;","2021-04-29 07:41;pliden;One strange thing here is that a C1 compiled method calls into C2's OptoRuntime::rethrow_C.;;;","2021-04-29 07:53;pliden;A workaround for now might be to just do something like:

--- a/src/hotspot/share/opto/runtime.cpp
+++ b/src/hotspot/share/opto/runtime.cpp
@@ -1377,7 +1377,10 @@ address OptoRuntime::handle_exception_C(JavaThread* current) {
   // deoptimized frame
 
   if (nm != NULL) {
-    RegisterMap map(current, false /* update_map */, false /* process_frames */);
+    // Enable WXWrite: the function called directly by compiled code.
+    MACOS_AARCH64_ONLY(ThreadWXEnable wx(WXWrite, current));
+
+    RegisterMap map(current, false /* update_map */, true /* process_frames */);
     frame caller = current->last_frame().sender(&map);
 #ifdef ASSERT
     assert(caller.is_compiled_frame(), ""must be"");
;;;","2021-04-29 09:22;zgu;[~pliden] The C2 runtime call may come from a C2 frame that is already popped, so that it is not visible.

From what I saw, stack watermark missed caller frame, as in is_frame_safe(), it has f.sp() == _iterator->caller().

I could not figure out root cause, would you mind taking over?

Thanks.



;;;","2021-04-30 03:10;pliden;[~zgu] Hmm, the C2 frame should not have been popped at this point, so something doesn't look right here.

I assigned the bug to me and I'll send out the above patch, which will fix the problem for now by just reverting to the old behavior. However, I'll also create a new bug so that we can track this and look into the underlying issue at some point later.;;;","2021-04-30 08:53;zgu;[~pliden]

I did some experiments with Shenandoah GC, I added following code to ShenandoahStackwatermark::start_processing_impl()

  if (_jt->has_last_Java_frame()) {
      StackFrameStream sfs(_jt, false, false);
      frame* cur = sfs.current();
      assert(cur->cb() == NULL || !cur->cb()->is_exception_stub(), ""Caught it!!!"");
  }

The assertion actually fired.

Following is stack dump I got:

Stack: [0x00007f86be173000,0x00007f86be274000],  sp=0x00007f86be26c370,  free space=996k
Native frames: (J=compiled Java code, j=interpreted, Vv=VM code, C=native code)
V  [libjvm.so+0x1868124]  ShenandoahStackWatermark::start_processing_impl(void*)+0x324
V  [libjvm.so+0x18cc86c]  StackWatermark::on_safepoint()+0x6c
V  [libjvm.so+0x170782a]  SafepointMechanism::process_if_requested_slow(JavaThread*)+0x3a
V  [libjvm.so+0x16f9bf8]  OptoRuntime::handle_exception_C_helper(JavaThread*, nmethod*&)+0xd78
V  [libjvm.so+0x16fa369]  OptoRuntime::handle_exception_C(JavaThread*)+0x59

Java frames: (J=compiled Java code, j=interpreted, Vv=VM code)
v  ~ExceptionBlob
J 6360 c2 com.sun.tools.javac.comp.Resolve.rawInstantiate(Lcom/sun/tools/javac/comp/Env;Lcom/sun/tools/javac/code/Type;Lcom/sun/tools/javac/code/Symbol;Lcom/sun/tools/javac/comp/Attr$ResultInfo;Lcom/sun/tools/javac/util/List;Lcom/sun/tools/javac/util/List;ZZLcom/sun/tools/javac/util/Warner;)Lcom/sun/tools/javac/code/Type; jdk.compiler@17-internal (508 bytes) @ 0x00007f86a96459b0 [0x00007f86a9644840+0x0000000000001170]

So this particular thread has ExceptionBlob on top of stack, while the nmethod that threw this exception already popped, so that it is invisible, after the thread got out of safepoint.

Disassemble last nmethod (com.sun.tools.javac.comp.Resolve.rawInstantiate) and at the offset  0x00007f86a9644840+0x0000000000001170 = 0x7f86a96459b0

0x00007f86a9645991:    mov    %r14,%rsi
0x00007f86a9645994:    mov    0x38(%rsp),%rdx
0x00007f86a9645999:    mov    0x70(%rsp),%rcx
0x00007f86a964599e:    mov    0x48(%rsp),%r8
0x00007f86a96459a3:    mov    0xe8(%rsp),%rdi
0x00007f86a96459ab:    callq  0x00007f86a98192e0
0x00007f86a96459b0:    mov    0x70(%rsp),%r10
0x00007f86a96459b5:    mov    0x24(%r10),%r11d

so, it looks like the exception is thrown from the call to 0x00007f86a98192e0 is
public void argumentsAcceptable(com.sun.tools.javac.comp.Env, com.sun.tools.javac.comp.DeferredAttr$DeferredAttrContext, com.sun.tools.javac.util.List, com.sun.tools.javac.util.List, com.sun.tools.javac.util.Warner) [signature (Lcom.sun.tools.javac.comp.Env<Lcom.sun.tools.javac.comp.AttrContext;>;Lcom.sun.tools.javac.comp.DeferredAttr$DeferredAttrContext;Lcom.sun.tools.javac.util.List<Lcom.sun.tools.javac.code.Type;>;Lcom.sun.tools.javac.util.List<Lcom.sun.tools.javac.code.Type;>;Lcom.sun.tools.javac.util.Warner;)V]

which is not on stack.

;;;","2021-05-02 06:23;dcubed;Here's hs_err_pid snippet from the jdk-17+21-1799-tier8 sighting:

#  Internal Error (/opt/mach5/mesos/work_dir/slaves/3c846bae-ce30-4a97-93ee-9fef4497ccb6-S79219/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/d4772d2b-167d-4359-95f0-eed8c685d2ba/runs/ecd72654-4829-47b1-b8cc-267a829ee24b/workspace/open/src/hotspot/share/runtime/stackWatermark.cpp:179), pid=17559, tid=17602
#  assert(is_frame_safe(f)) failed: Frame must be safe
#
# JRE version: Java(TM) SE Runtime Environment (17.0+21) (fastdebug build 17-ea+21-LTS-1799)
# Java VM: Java HotSpot(TM) 64-Bit Server VM (fastdebug 17-ea+21-LTS-1799, mixed mode, sharing, tiered, compressed class ptrs, z gc, linux-amd64)
# Problematic frame:
# V  [libjvm.so+0x177379f]  StackWatermark::assert_is_frame_safe(frame const&)+0x6f

---------------  T H R E A D  ---------------

Current thread (0x00007f5f00186240):  JavaThread ""logback-appender-logstash-logstash-prod.s0.javaplatfo1iad.oraclevcn.com:10074-4"" daemon [_thread_in_Java, id=17602, stack(0x00007f6165af2000,0x00007f6165bf3000)]

Stack: [0x00007f6165af2000,0x00007f6165bf3000],  sp=0x00007f6165bf0240,  free space=1016k
Native frames: (J=compiled Java code, j=interpreted, Vv=VM code, C=native code)
V  [libjvm.so+0x177379f]  StackWatermark::assert_is_frame_safe(frame const&)+0x6f
V  [libjvm.so+0x17754fb]  StackWatermark::after_unwind()+0x1cb
V  [libjvm.so+0x1774e28]  StackWatermarkSet::after_unwind(JavaThread*)+0x38
V  [libjvm.so+0x16e7d12]  OptoRuntime::rethrow_C(oopDesc*, JavaThread*, unsigned char*)+0x22
v  ~RuntimeStub::_rethrow_Java
J 1928 c1 sun.nio.ch.NioSocketImpl$1.read([BII)I java.base@17-ea (11 bytes) @ 0x00007f618e14457c [0x00007f618e1444e0+0x000000000000009c]
J 4032 c1 java.net.Socket$SocketInputStream.read()I java.base@17-ea (28 bytes) @ 0x00007f618de81d4c [0x00007f618de81b00+0x000000000000024c]
j  net.logstash.logback.appender.AbstractLogstashTcpSocketAppender$TcpSendingEventHandler$ReaderRunnable.run()V+14
j  java.util.concurrent.Executors$RunnableAdapter.call()Ljava/lang/Object;+4 java.base@17-ea
j  java.util.concurrent.FutureTask.run()V+39 java.base@17-ea
j  java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run()V+28 java.base@17-ea
j  java.util.concurrent.ThreadPoolExecutor.runWorker(Ljava/util/concurrent/ThreadPoolExecutor$Worker;)V+92 java.base@17-ea
j  java.util.concurrent.ThreadPoolExecutor$Worker.run()V+5 java.base@17-ea
j  java.lang.Thread.run()V+11 java.base@17-ea
v  ~StubRoutines::call_stub
V  [libjvm.so+0xe91bb5]  JavaCalls::call_helper(JavaValue*, methodHandle const&, JavaCallArguments*, Thread*)+0x595
V  [libjvm.so+0xe92415]  JavaCalls::call_virtual(JavaValue*, Klass*, Symbol*, Symbol*, JavaCallArguments*, Thread*)+0x4c5
V  [libjvm.so+0xe92897]  JavaCalls::call_virtual(JavaValue*, Handle, Klass*, Symbol*, Symbol*, Thread*)+0x77
V  [libjvm.so+0x100a0bb]  thread_entry(JavaThread*, Thread*)+0x12b
V  [libjvm.so+0x18b61a1]  JavaThread::thread_main_inner()+0x271
V  [libjvm.so+0x18bdad0]  Thread::call_run()+0x100
V  [libjvm.so+0x15949ee]  thread_native_entry(Thread*)+0x10e

Java frames: (J=compiled Java code, j=interpreted, Vv=VM code)
v  ~RuntimeStub::_rethrow_Java
J 1928 c1 sun.nio.ch.NioSocketImpl$1.read([BII)I java.base@17-ea (11 bytes) @ 0x00007f618e14457c [0x00007f618e1444e0+0x000000000000009c]
J 4032 c1 java.net.Socket$SocketInputStream.read()I java.base@17-ea (28 bytes) @ 0x00007f618de81d4c [0x00007f618de81b00+0x000000000000024c]
j  net.logstash.logback.appender.AbstractLogstashTcpSocketAppender$TcpSendingEventHandler$ReaderRunnable.run()V+14
j  java.util.concurrent.Executors$RunnableAdapter.call()Ljava/lang/Object;+4 java.base@17-ea
j  java.util.concurrent.FutureTask.run()V+39 java.base@17-ea
j  java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run()V+28 java.base@17-ea
j  java.util.concurrent.ThreadPoolExecutor.runWorker(Ljava/util/concurrent/ThreadPoolExecutor$Worker;)V+92 java.base@17-ea
j  java.util.concurrent.ThreadPoolExecutor$Worker.run()V+5 java.base@17-ea
j  java.lang.Thread.run()V+11 java.base@17-ea
v  ~StubRoutines::call_stub;;;","2021-05-03 06:35;roboduke;Changeset: 194bceca
Author:    Per Liden <pliden@openjdk.org>
Date:      2021-05-03 13:34:49 +0000
URL:       https://git.openjdk.java.net/jdk/commit/194bceca3a4d13d4528b86359ee9d5eead3ce7ac
;;;","2021-05-07 11:25;dcubed;The fix for this bug is in jdk-17+21-1828.;;;",,,,,,,,,,,,,,,,,,,,,,,
JDK-8264188 breaks build on macOS-aarch64,JDK-8265982,5047970,Bug,Resolved,JDK,JDK,software,duke,,,P1,Fixed,ihse,dcubed,dcubed,2021-04-26 08:18,2021-05-03 20:17,2023-10-01 09:57,2021-04-26 10:59,17,,,,,,,17,infrastructure,,0,tier1,,,,,,,,,,,,,"The following build errors started happening in jdk-17+20-1692-tier1
which only includes the fix for:

JDK-8264188 Improve handling of assembly files in the JDK

[2021-04-26T13:11:30,179Z] Creating jdk-17-ea+20_osx-aarch64_bin-static-libs.tar.gz
[2021-04-26T13:11:31,966Z] Undefined symbols for architecture arm64:
[2021-04-26T13:11:31,966Z]   ""__Copy_conjoint_words"", referenced from:
[2021-04-26T13:11:31,967Z]       G1FullGCCompactTask::G1CompactRegionClosure::apply(oopDesc*) in g1FullGCCompactTask.o
[2021-04-26T13:11:31,968Z]       PSParallelCompact::decrement_destination_counts(ParCompactionManager*, PSParallelCompact::SpaceId, unsigned long, HeapWordImpl**) in psParallelCompact.o
[2021-04-26T13:11:31,968Z]       PSParallelCompact::copy_back(HeapWordImpl**, HeapWordImpl**) in psParallelCompact.o
[2021-04-26T13:11:31,968Z]       PSParallelCompact::fill_region(ParCompactionManager*, MoveAndUpdateClosure&, unsigned long) in psParallelCompact.o
[2021-04-26T13:11:31,968Z]       MoveAndUpdateClosure::copy_partial_obj() in psParallelCompact.o
[2021-04-26T13:11:31,968Z]       MoveAndUpdateClosure::copy_until_full() in psParallelCompact.o
[2021-04-26T13:11:31,968Z]       MoveAndUpdateClosure::do_addr(HeapWordImpl**, unsigned long) in psParallelCompact.o
[2021-04-26T13:11:31,968Z]       ...
[2021-04-26T13:11:31,978Z]   ""__Copy_disjoint_words"", referenced from:
[2021-04-26T13:11:31,978Z]       AccessInternal::arraycopy_disjoint_words(void*, void*, unsigned long) in accessBackend.o
[2021-04-26T13:11:31,978Z]       AccessInternal::arraycopy_disjoint_words_atomic(void*, void*, unsigned long) in accessBackend.o
[2021-04-26T13:11:31,979Z]       ResourceBitMap::resize(unsigned long) in bitMap.o
[2021-04-26T13:11:31,979Z]       ResourceBitMap::initialize(unsigned long) in bitMap.o
[2021-04-26T13:11:31,979Z]       BitMap::set_from(BitMap const&) in bitMap.o
[2021-04-26T13:11:31,979Z]       unsigned long* BitMap::reallocate<CHeapBitMapAllocator>(CHeapBitMapAllocator const&, unsigned long*, unsigned long, unsigned long, bool) in bitMap.o
[2021-04-26T13:11:31,979Z]       ciMethodData::load_remaining_extra_data() in ciMethodData.o
[2021-04-26T13:11:31,979Z]       ...
[2021-04-26T13:11:31,993Z] Undefined symbols for architecture arm64:
[2021-04-26T13:11:31,993Z]   ""__Copy_conjoint_words"", referenced from:
[2021-04-26T13:11:31,994Z]       G1FullGCCompactTask::G1CompactRegionClosure::apply(oopDesc*) in g1FullGCCompactTask.o
[2021-04-26T13:11:31,995Z]       PSParallelCompact::decrement_destination_counts(ParCompactionManager*, PSParallelCompact::SpaceId, unsigned long, HeapWordImpl**) in psParallelCompact.o
[2021-04-26T13:11:31,995Z]       PSParallelCompact::copy_back(HeapWordImpl**, HeapWordImpl**) in psParallelCompact.o
[2021-04-26T13:11:31,995Z]       PSParallelCompact::fill_region(ParCompactionManager*, MoveAndUpdateClosure&, unsigned long) in psParallelCompact.o
[2021-04-26T13:11:31,995Z]       MoveAndUpdateClosure::copy_partial_obj() in psParallelCompact.o
[2021-04-26T13:11:31,995Z]       MoveAndUpdateClosure::copy_until_full() in psParallelCompact.o
[2021-04-26T13:11:31,995Z]       MoveAndUpdateClosure::do_addr(HeapWordImpl**, unsigned long) in psParallelCompact.o
[2021-04-26T13:11:31,995Z]       ...
[2021-04-26T13:11:31,999Z] ld: symbol(s) not found for architecture arm64
[2021-04-26T13:11:32,002Z] clang: error: linker command failed with exit code 1 (use -v to see invocation)
[2021-04-26T13:11:32,006Z] lib/CompileJvm.gmk:141: recipe for target '/System/Volumes/Data/mesos/work_dir/slaves/3c846bae-ce30-4a97-93ee-9fef4497ccb6-S140959/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/b1409418-e1a3-437f-8e81-c30cc0181734/runs/47dc1ca9-6ba3-4d4b-9367-c8e1e88f4d3d/workspace/build/macosx-aarch64/support/modules_libs/java.base/server/libjvm.dylib' failed
[2021-04-26T13:11:32,006Z] make[3]: *** [/System/Volumes/Data/mesos/work_dir/slaves/3c846bae-ce30-4a97-93ee-9fef4497ccb6-S140959/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/b1409418-e1a3-437f-8e81-c30cc0181734/runs/47dc1ca9-6ba3-4d4b-9367-c8e1e88f4d3d/workspace/build/macosx-aarch64/support/modules_libs/java.base/server/libjvm.dylib] Error 1
[2021-04-26T13:11:32,006Z] make[3]: *** Waiting for unfinished jobs....
[2021-04-26T13:11:32,010Z]   ""__Copy_disjoint_words"", referenced from:
[2021-04-26T13:11:32,011Z]       AccessInternal::arraycopy_disjoint_words(void*, void*, unsigned long) in accessBackend.o
[2021-04-26T13:11:32,011Z]       AccessInternal::arraycopy_disjoint_words_atomic(void*, void*, unsigned long) in accessBackend.o
[2021-04-26T13:11:32,011Z]       ResourceBitMap::resize(unsigned long) in bitMap.o
[2021-04-26T13:11:32,011Z]       ResourceBitMap::initialize(unsigned long) in bitMap.o
[2021-04-26T13:11:32,011Z]       BitMap::set_from(BitMap const&) in bitMap.o
[2021-04-26T13:11:32,011Z]       unsigned long* BitMap::reallocate<CHeapBitMapAllocator>(CHeapBitMapAllocator const&, unsigned long*, unsigned long, unsigned long, bool) in bitMap.o
[2021-04-26T13:11:32,011Z]       ciMethodData::load_remaining_extra_data() in ciMethodData.o
[2021-04-26T13:11:32,011Z]       ...
[2021-04-26T13:11:32,036Z] ld: symbol(s) not found for architecture arm64
[2021-04-26T13:11:32,040Z] clang: error: linker command failed with exit code 1 (use -v to see invocation)
[2021-04-26T13:11:32,043Z] lib/CompileGtest.gmk:86: recipe for target '/System/Volumes/Data/mesos/work_dir/slaves/3c846bae-ce30-4a97-93ee-9fef4497ccb6-S140959/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/b1409418-e1a3-437f-8e81-c30cc0181734/runs/47dc1ca9-6ba3-4d4b-9367-c8e1e88f4d3d/workspace/build/macosx-aarch64/hotspot/variant-server/libjvm/gtest/libjvm.dylib' failed
[2021-04-26T13:11:32,043Z] make[3]: *** [/System/Volumes/Data/mesos/work_dir/slaves/3c846bae-ce30-4a97-93ee-9fef4497ccb6-S140959/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/b1409418-e1a3-437f-8e81-c30cc0181734/runs/47dc1ca9-6ba3-4d4b-9367-c8e1e88f4d3d/workspace/build/macosx-aarch64/hotspot/variant-server/libjvm/gtest/libjvm.dylib] Error 1
[2021-04-26T13:11:32,218Z] make[2]: *** [hotspot-server-libs] Error 2
[2021-04-26T13:11:32,218Z] make/Main.gmk:255: recipe for target 'hotspot-server-libs' failed
[2021-04-26T13:11:32,219Z] 
[2021-04-26T13:11:32,219Z] ERROR: Build failed for target 'default (product-bundles test-bundles static-libs-bundles)' in configuration 'macosx-aarch64' (exit code 2) 
[2021-04-26T13:11:32,224Z] Stopping sjavac server

I'm starting this as a P1 build since this is a Tier1 build failure.
However, macOS-aarch64 is a very new platform so this might
be a P2 instead.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8264188,,,,,,,,,,,,,,,aarch64,,,,,,,,,os_x,,,,,"0|i2sk8z:",9223372036854775807,b20,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@429c566,,,,,,,,,"2021-04-26 08:19;dcubed;[~ihse] - This appears to be related to your fix for:

JDK-8264188 Improve handling of assembly files in the JDK;;;","2021-04-26 08:36;ihse;I have a potential fix. Verifying with CI system. 

But if this don't work, I can't resolve this now. In that case, either someone else needs to resolve it, or I can publish a back-out anti-delta. I'll wait a while for someone to step up, otherwise I'll publish a revert PR.;;;","2021-04-26 10:59;roboduke;Changeset: b524a81a
Author:    Magnus Ihse Bursie <ihse@openjdk.org>
Date:      2021-04-26 17:59:14 +0000
URL:       https://git.openjdk.java.net/jdk/commit/b524a81a
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
make test should look for more locations when searching for exit code,JDK-8265978,5047965,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,shade,shade,shade,2021-04-26 06:47,2021-08-05 14:14,2023-10-01 09:57,2021-07-06 08:13,openjdk8u232,,,,,,,openjdk8u312,infrastructure,,0,11-na,16-na,17-na,jdk8u-fix-request,jdk8u-fix-yes,,,,,,,,,"JDK-8222737 introduced tier1-like testing to 8u. It does report non-zero exit code on test failures.

Unfortunately, that is only because the summary_tier1 target specifically aggregates the per-suite test reports. So, ""make test"" does not exit with non-zero exit code, when a suite is run separately. This affects (jdk|langtools|hotspot)_tier1 suites and other predefined test groups. It is easy to demonstrate by defining the jdk_adhoc with known-failing test:

$ head jdk/test/TEST.groups
jdk_adhoc = \
    sun/text/IntHashtable/Bug4170614Test.sh 

$ make test TEST=jdk_adhoc
...
FAILED: sun/text/IntHashtable/Bug4170614Test.sh
TEST STATS: name=jdk_adhoc  run=1  pass=0  fail=1
EXIT CODE: 2
EXIT CODE: 2
make[3]: *** [Makefile:310: jtreg_tests] Error 2
make[3]: Leaving directory '/home/shade/trunks/jdk8u-dev/jdk/test'
make[2]: *** [Makefile:261: jdk_adhoc] Error 2
make[2]: Leaving directory '/home/shade/trunks/jdk8u-dev/jdk/test'
make[1]: *** [Makefile:80: jdk_adhoc] Error 2
## Finished test (build time 00:00:05)

$ echo $?
0

So, CIs and scripts that look for that non-zero exit code would happily be green even when tests are failing.

I believe that is because the added code looks at the wrong path for exitcode.txt:
https://hg.openjdk.java.net/jdk8u/jdk8u/rev/ef851705e3e1#l2.7

There are actually two path patterns for exitcode.txt:

$ find | grep exitcode
./build/linux-x86_64-normal-server-fastdebug/testoutput/jdk_adhoc/exitcode.txt
./build/linux-x86_64-normal-server-fastdebug/testoutput/tier1_exitcode.txt
./build/linux-x86_64-normal-server-fastdebug/testoutput/langtools_tier1/exitcode.txt
./build/linux-x86_64-normal-server-fastdebug/testoutput/hotspot_tier1/exitcode.txt
./build/linux-x86_64-normal-server-fastdebug/testoutput/jdk_tier1/exitcode.txt

Existing pattern -- ${TEST}_exitcode.txt -- seems to look for tier1_exitcode.txt, which is fine for complete tier1 runs.
Individual suites store exit codes in ${TEST}/exitcode.txt -- and so non-tier1 runs still omit the exit code.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8222737,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2sk7v:",9223372036854775807,b01,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@429c566,,,,,,,,,"2021-04-26 10:47;shade;Fix Request (8u)

This fixes the test results handling in 8u. This is 8u-specific bug, 8u RFR (acked by phh and sgehwolf): https://mail.openjdk.java.net/pipermail/jdk8u-dev/2021-April/013726.html;;;","2021-07-06 08:13;hgupdate;URL:   https://hg.openjdk.java.net/jdk8u/jdk8u-dev/rev/555d2d07fad0
User:  shade
Date:  2021-07-06 14:44:54 +0000
;;;","2021-08-05 14:14;hgupdate;URL:   https://hg.openjdk.java.net/jdk8u/jdk8u/rev/555d2d07fad0
User:  andrew
Date:  2021-08-05 21:11:46 +0000
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
ResourceScope code does not handle close vs. add races well,JDK-8265974,5047961,Bug,Resolved,JDK,JDK,software,duke,,,P2,Fixed,mcimadamore,mcimadamore,mcimadamore,2021-04-26 06:09,2021-04-26 15:48,2023-10-01 09:57,2021-04-26 15:48,repo-panama,,,,,,,,tools,,0,foreign-memaccess,,,,,,,,,,,,,"While no test is showing sign of failures (even under extra stress), it seems like the code which manages shared resource scope lists has at least a conceptual issue: the code always performs a ""compareAndExchange"", using the ""previous"" list head as witness and the new cleanup action as the actual value. If the witness is the CLOSED_LIST singleton (which means the list is about to be cleaned up), the replacement still takes place, meaning that the head of the list can potentially go from CLOSED_LIST to something else, possibly in the middle of a cleanup.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2sk6z:",9223372036854775807,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@2251e2f8,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
[lworld] C2 compilation fails due to infinite loop in PhaseIterGVN::optimize,JDK-8265973,5047958,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,thartmann,thartmann,thartmann,2021-04-26 05:51,2022-07-20 05:38,2023-10-01 09:57,2021-05-06 01:58,repo-valhalla,,,,,,,repo-valhalla,hotspot,,0,c2,lw3,lworld,,,,,,,,,,,"# A fatal error has been detected by the Java Runtime Environment:
#
#  Internal Error (/oracle/valhalla2/open/src/hotspot/share/opto/phaseX.cpp:1158), pid=831626, tid=831639
#  assert(false) failed: infinite loop in PhaseIterGVN::optimize

Current CompileTask:
C2:    712  397 %  b  4       MainClass::test @ 14 (65 bytes)

Stack: [0x00007fe974334000,0x00007fe974435000],  sp=0x00007fe974430460,  free space=1009k
Native frames: (J=compiled Java code, A=aot compiled Java code, j=interpreted, Vv=VM code, C=native code)
V  [libjvm.so+0x16dbb11]  PhaseIterGVN::optimize()+0x6a1
V  [libjvm.so+0xa7af58]  Compile::Optimize()+0x9e8
V  [libjvm.so+0xa7e24f]  Compile::Compile(ciEnv*, ciMethod*, int, bool, bool, bool, bool, DirectiveSet*)+0x22ef
V  [libjvm.so+0x887408]  C2Compiler::compile_method(ciEnv*, ciMethod*, int, bool, DirectiveSet*)+0x1f8
V  [libjvm.so+0xa8dee1]  CompileBroker::invoke_compiler_on_method(CompileTask*)+0xc91
V  [libjvm.so+0xa8ec28]  CompileBroker::compiler_thread_loop()+0x5a8
V  [libjvm.so+0x199d4e1]  JavaThread::thread_main_inner()+0x271
V  [libjvm.so+0x19a5320]  Thread::call_run()+0x100
V  [libjvm.so+0x164fd5e]  thread_native_entry(Thread*)+0x10e",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8290711,,,,JDK-8264586,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2sk6b:",9223372036854775807,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Fix comments in logging.properties,JDK-8265961,5047944,Bug,Resolved,JDK,JDK,software,duke,,,P5,Fixed,prappo,prappo,prappo,2021-04-26 02:12,2021-05-03 20:17,2023-10-01 09:57,2021-04-26 10:36,17,,,,,,,17,core-libs,,0,,,,,,,,,,,,,,Typos and grammar in logging.properties,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2sk37:",9223372036854775807,b20,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@3cc899dc,,,,,,,,,"2021-04-26 10:36;roboduke;Changeset: efe6b933
Author:    Pavel Rappo <prappo@openjdk.org>
Date:      2021-04-26 17:35:31 +0000
URL:       https://git.openjdk.java.net/jdk/commit/efe6b933
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
JVM crashes when matching LShiftVB Node,JDK-8265956,5047939,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,whuang,whuang,whuang,2021-04-26 01:44,2021-05-18 07:05,2023-10-01 09:57,2021-05-10 20:21,16,17,,,,,,17,hotspot,,0,c2,hs-comp-triaged,huawei-interest,oracle-triage-11,oracle-triage-17,vectorapi,,,,,,,,"reproduce:

run the attachment by `--add-modules=jdk.incubator.vector TestVectorShuffleIotaShort` on x86 or aarch64

Then we get crash like this:

o573  LShiftVB  === _ o571 o572  [[o634 o577  24  25 ]]  #vectord[8]:{byte}

--N: o573  LShiftVB  === _ o571 o572  [[o634 o577  24  25 ]]  #vectord[8]:{byte}

   --N: o571  VectorLoadConst  === _ o22  [[o573 ]]  #vectord[8]:{byte}
   VECD  100  loadcon8B

      --N: o22  ConI  === o0  [[o571 o423 o399 o407 ]]  #int:0
      IMMI  0  IMMI
      IMMI0  0  IMMI0
      IMMIEXT  0  IMMIEXT
      IMMI_LE_4  0  IMMI_LE_4
      IMMISCALE  0  IMMISCALE
      IMMI26  0  IMMI26
      IMMI19  0  IMMI19
      IMMIU12  0  IMMIU12
      IMMIOFFSET  0  IMMIOFFSET
      IMMIOFFSET1  0  IMMIOFFSET1
      IMMIOFFSET2  0  IMMIOFFSET2
      IMMIOFFSET4  0  IMMIOFFSET4
      IMMIOFFSET8  0  IMMIOFFSET8
      IMMIOFFSET16  0  IMMIOFFSET16
      IMMI8  0  IMMI8
      IMMI8_SHIFT8  0  IMMI8_SHIFT8
      IMMIADDSUB  0  IMMIADDSUB
      IREGI  100  loadConI
      IREGINOSP  100  loadConI
      IREGI_R0  100  loadConI
      IREGI_R2  100  loadConI
      IREGI_R3  100  loadConI
      IREGI_R4  100  loadConI
      VMEMA_IMMIOFFSET4  0  VMEMA_IMMIOFFSET4
      IREGIORL2I  100  IREGI

   --N: o572  ConI  === o0  [[o573 o576 ]]  #int:1
   IMMI  0  IMMI
   IMMI_1  0  IMMI_1
   IMMIEXT  0  IMMIEXT
   IMMI_LE_4  0  IMMI_LE_4
   IMMI_BITMASK  0  IMMI_BITMASK
   IMMISCALE  0  IMMISCALE
   IMMI26  0  IMMI26
   IMMI19  0  IMMI19
   IMMIU12  0  IMMIU12
   IMMIOFFSET  0  IMMIOFFSET
   IMMIOFFSET1  0  IMMIOFFSET1
   IMMIOFFSET2  0  IMMIOFFSET2
   IMMIOFFSET4  0  IMMIOFFSET4
   IMMIOFFSET8  0  IMMIOFFSET8
   IMMIOFFSET16  0  IMMIOFFSET16
   IMMI8  0  IMMI8
   IMMI8_SHIFT8  0  IMMI8_SHIFT8
   IMMIADDSUB  0  IMMIADDSUB
   IMMILOG  0  IMMILOG
   IREGI  100  loadConI
   IREGINOSP  100  loadConI
   IREGI_R0  100  loadConI
   IREGI_R2  100  loadConI
   IREGI_R3  100  loadConI
   IREGI_R4  100  loadConI
   IREGIORL2I  100  IREGI

# To suppress the following error report, specify this argument
# after -XX: or in .hotspotrc:  SuppressErrorAt=/matcher.cpp:1685
#
# A fatal error has been detected by the Java Runtime Environment:
#
#  Internal Error (/home/wanghuang/repo/jdk/src/hotspot/share/opto/matcher.cpp:1685), pid=70646, tid=70702
#  assert(false) failed: bad AD file
#
# JRE version: OpenJDK Runtime Environment (17.0) (slowdebug build 17-internal+0-adhoc.wanghuang.jdk)
# Java VM: OpenJDK 64-Bit Server VM (slowdebug 17-internal+0-adhoc.wanghuang.jdk, mixed mode, tiered, compressed oops, compressed class ptrs, g1 gc, linux-aarch64)
# Problematic frame:
# V  [libjvm.so+0xee1a58][thread 70647 also had an error]
  Matcher::Label_Root(Node const*, State*, Node*, Node*&)+0x5a4
#
# Core dump will be written. Default location: /home/wanghuang/repo/jdk/core.%e.70646.%t
#
# An error report file with more information is saved as:
# /home/wanghuang/repo/jdk/hs_err_pid70646.log
#
# Compiler replay data is saved as:
# /home/wanghuang/repo/jdk/replay_pid70646.log
#
# If you would like to submit a bug report, please visit:
#   https://bugreport.java.com/bugreport/crash.jsp
#
Aborted (core dumped)

The main reason is that we miss this rule
match(Set dst (LShiftVB src  shift));

We can fix this by :
* adding the rule `match(Set dst (LShiftVB src  imm));` 
(maybe  under 
`match(Set dst (LShiftVB src (LShiftCntV imm)));` if we have ) 
* or we should add a `LShiftCntVNode` here:

    Node* cnt = gvn().makecon(TypeInt::make(log2i_exact(step_val->get_con())));
    res = gvn().transform(VectorNode::make(Op_LShiftVB, res, cnt, vt));
    
and add rule `LShiftCntV imm` on all archs",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8223347,,,,"2021-04-26 01:45;whuang;TestVectorShuffleIotaShort.java;https://bugs.openjdk.org/secure/attachment/94368/TestVectorShuffleIotaShort.java",,,,,,,,,,,generic,,,,,,,,,generic,,,,,"0|i2sk23:",9223372036854775807,b22,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2021-05-10 20:21;roboduke;Changeset: 10a049e1
Author:    Wang Huang <whuang@openjdk.org>
Committer: Jie Fu <jiefu@openjdk.org>
Date:      2021-05-11 03:20:15 +0000
URL:       https://git.openjdk.java.net/jdk/commit/10a049e1714bfe64f895177f4de7a31ad65f407a
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
C2's conditional move optimization does not handle top Phi,JDK-8265938,5047922,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,thartmann,thartmann,thartmann,2021-04-25 23:02,2021-05-17 00:32,2023-10-01 09:57,2021-04-27 10:11,11,16,17,,,,,17,hotspot,,0,c2,hs-comp-triaged,jdk11u-fix-request,jdk11u-fix-yes,oracle-triage-11,oracle-triage-17,tencent-interest,,,,,,,"This issue has been reported by John Jiang (johnsjiang@tencent.com).

# A fatal error has been detected by the Java Runtime Environment:
#
#  Internal Error (/oracle/jdk/open/src/hotspot/share/opto/movenode.cpp:175), pid=777849, tid=777864
#  Error: ShouldNotReachHere()

Current CompileTask:
C2:    300   26       4       compiler.loopopts.TestCMoveWithDeadPhi::test (58 bytes)

Stack: [0x00007f29cac36000,0x00007f29cad37000],  sp=0x00007f29cad31180,  free space=1004k
Native frames: (J=compiled Java code, A=aot compiled Java code, j=interpreted, Vv=VM code, C=native code)
V  [libjvm.so+0x14d6076]  CMoveNode::make(Node*, Node*, Node*, Node*, Type const*)+0x66
V  [libjvm.so+0x132202d]  PhaseIdealLoop::conditional_move(Node*) [clone .part.0]+0xc8d
V  [libjvm.so+0x1325557]  PhaseIdealLoop::split_if_with_blocks_pre(Node*)+0x117
V  [libjvm.so+0x13273f7]  PhaseIdealLoop::split_if_with_blocks(VectorSet&, Node_Stack&)+0x137
V  [libjvm.so+0x131b91d]  PhaseIdealLoop::build_and_optimize(LoopOptsMode)+0x121d
V  [libjvm.so+0xa401fb]  PhaseIdealLoop::optimize(PhaseIterGVN&, LoopOptsMode)+0x32b
V  [libjvm.so+0xa3c9d5]  Compile::Optimize()+0x14f5
V  [libjvm.so+0xa3f1b6]  Compile::Compile(ciEnv*, ciMethod*, int, bool, bool, bool, bool, DirectiveSet*)+0x2276
V  [libjvm.so+0x86085a]  C2Compiler::compile_method(ciEnv*, ciMethod*, int, bool, DirectiveSet*)+0x1ea
V  [libjvm.so+0xa4f349]  CompileBroker::invoke_compiler_on_method(CompileTask*)+0xfb9
V  [libjvm.so+0xa500b8]  CompileBroker::compiler_thread_loop()+0x5a8
V  [libjvm.so+0x18b9e11]  JavaThread::thread_main_inner()+0x271
V  [libjvm.so+0x18c1850]  Thread::call_run()+0x100
V  [libjvm.so+0x1597bbe]  thread_native_entry(Thread*)+0x10e",,,,,,,,,,,JDK-8266340,JDK-8267227,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"2021-04-25 23:22;thartmann;hs_err_pid777849.log;https://bugs.openjdk.org/secure/attachment/94366/hs_err_pid777849.log","2021-04-25 23:22;thartmann;replay_pid777849.log;https://bugs.openjdk.org/secure/attachment/94367/replay_pid777849.log",,,,,,,,,,,,,,,,,,,,,,,,"0|i2sjyb:",9223372036854775807,b20,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2021-04-25 23:28;thartmann;ILW = ShouldNotReachHere during C2 compilation, easy to reproduce with (generated) test that contains infinite loop, -XX:ConditionalMoveLimit=0 = HLM = P3;;;","2021-04-27 10:11;roboduke;Changeset: ab2aec2a
Author:    Tobias Hartmann <thartmann@openjdk.org>
Date:      2021-04-27 17:10:53 +0000
URL:       https://git.openjdk.java.net/jdk/commit/ab2aec2a
;;;","2021-05-11 23:46;roland;11u Fix Request
 
Backporting this patch eliminates a c2 crash. Patch applies cleanly to 11u. New test fails without the product patch, and passes with it. tier1 tests pass with the patch.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
"RunThese30M fails ""assert((!(((((JfrTraceIdBits::load(value)) & ((1 << 4) << 8)) != 0))))) failed: invariant""",JDK-8265919,5047893,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,mgronlun,dcubed,dcubed,2021-04-25 06:53,2023-09-06 22:45,2023-10-01 09:57,2021-06-25 02:43,17,,,,,,,18,hotspot,,0,intermittent,test-bigapps-runThese,tier6,,,,,,,,,,,"The following test failed in the JDK17 CI:

applications/runthese/RunThese30M.java

Here's a snippet from the log file:

[stress.process.err] runnable: Passed. OK
[stress.process.err] runnable_multiDimArray: Passed. OK
[stress.process.err] STATUS:Passed.test cases: 60; all passed
[stress.process.err] # To suppress the following error report, specify this argument
[stress.process.err] # after -XX: or in .hotspotrc:  SuppressErrorAt=\\jfrTypeSet.cpp:455
java.lang.NullPointerException: Cannot invoke ""String.trim()"" because the return value of ""java.util.Map.get(Object)"" is null
	at applications.kitchensink.process.picker.modules.Toolkit$WindowsToolkit.setMetrics(MonitorPickerModule.java:444)
	at applications.kitchensink.process.picker.modules.Toolkit.getSystemMetrics(MonitorPickerModule.java:123)
	at applications.kitchensink.process.picker.modules.MonitorPickerModule.execute(MonitorPickerModule.java:64)
	at applications.kitchensink.process.picker.modules.PickerModule.run(PickerModule.java:140)
	at java.base/java.lang.Thread.run(Thread.java:831)

Just two lines of the crash banner showed for some reason.

Here are snippets from hs_err_pid:

#  Internal Error (t:\workspace\open\src\hotspot\share\jfr\recorder\checkpoint\types\jfrTypeSet.cpp:455), pid=42260, tid=27136
#  assert((!(((((JfrTraceIdBits::load(value)) & ((1 << 4) << 8)) != 0))))) failed: invariant
#
# JRE version: Java(TM) SE Runtime Environment (17.0+20) (fastdebug build 17-ea+20-LTS-1676)
# Java VM: Java HotSpot(TM) 64-Bit Server VM (fastdebug 17-ea+20-LTS-1676, compiled mode, sharing, compressed oops, compressed class ptrs, g1 gc, windows-amd64)
# Core dump will be written. Default location: T:\testoutput\test-support\jtreg_closed_test_hotspot_jtreg_applications_runthese_RunThese30M_java\scratch\0\hs_err_pid42260.mdmp

<snip>

---------------  S U M M A R Y ------------

Command Line: -Xbootclasspath/a:T:\testoutput\test-support\jtreg_closed_test_hotspot_jtreg_applications_runthese_RunThese30M_java\scratch\0\wb.jar -XX:+UnlockDiagnosticVMOptions -XX:+WhiteBoxAPI -XX:MaxRAMPercentage=4 -Djava.io.tmpdir=t:\testoutput\test-support\jtreg_closed_test_hotspot_jtreg_applications_runthese_RunThese30M_java\tmp -Xcomp -XX:+CreateCoredumpOnCrash -ea -esa -XX:CompileThreshold=100 -XX:+UnlockExperimentalVMOptions -XX:-TieredCompilation -XX:MaxRAMPercentage=50 -Djava.net.preferIPv6Addresses=false -XX:+DisplayVMOutputToStderr -Xlog:gc*,gc+heap=debug:gc.log:uptime,timemillis,level,tags -XX:+DisableExplicitGC -XX:+StartAttachListener -Djava.io.tmpdir=T:\testoutput\test-support\jtreg_closed_test_hotspot_jtreg_applications_runthese_RunThese30M_java\scratch\0/java.io.tmpdir -Duser.home=T:\testoutput\test-support\jtreg_closed_test_hotspot_jtreg_applications_runthese_RunThese30M_java\scratch\0/user.home -agentpath:c:\ade\mesos\work_dir\jib-master\install\jdk-17+20-1676\windows-x64-debug.test\hotspot\jtreg\native\JvmtiStressModule.dll -XX:NativeMemoryTracking=detail -Djdk.test.lib.random.seed=7405213412903230615 applications.kitchensink.process.stress.Main T:\testoutput\test-support\jtreg_closed_test_hotspot_jtreg_applications_runthese_RunThese30M_java\scratch\0\kitchensink.final.properties

<snip>

---------------  T H R E A D  ---------------

Current thread (0x000001c130b8cde0):  JavaThread ""JFR Recorder Thread"" daemon [_thread_in_vm, id=27136, stack(0x0000001cf6300000,0x0000001cf6400000)]

Stack: [0x0000001cf6300000,0x0000001cf6400000]
Native frames: (J=compiled Java code, j=interpreted, Vv=VM code, C=native code)
V  [jvm.dll+0xacc521]  os::platform_print_native_stack+0xf1  (os_windows_x86.cpp:235)
V  [jvm.dll+0xcef1b7]  VMError::report+0xfc7  (vmError.cpp:739)
V  [jvm.dll+0xcf0b3e]  VMError::report_and_die+0x7fe  (vmError.cpp:1549)
V  [jvm.dll+0xcf1254]  VMError::report_and_die+0x64  (vmError.cpp:1330)
V  [jvm.dll+0x4ce787]  report_vm_error+0xb7  (debug.cpp:282)
V  [jvm.dll+0x71ad14]  register_klass+0x164  (jfrTypeSet.cpp:470)
V  [jvm.dll+0x44fd6c]  ClassLoaderData::classes_do+0x2c  (classLoaderData.cpp:346)
V  [jvm.dll+0x453192]  ClassLoaderDataGraph::classes_do+0x192  (classLoaderDataGraph.cpp:368)
V  [jvm.dll+0x719209]  JfrTypeSet::clear+0x109  (jfrTypeSet.cpp:1123)
V  [jvm.dll+0x6c5f6e]  JfrCheckpointManager::clear+0x11e  (jfrCheckpointManager.cpp:355)
V  [jvm.dll+0x6ffcde]  JfrRecorderService::start+0x18e  (jfrRecorderService.cpp:419)
V  [jvm.dll+0x7009a1]  recorderthread_entry+0x281  (jfrRecorderThreadLoop.cpp:78)
V  [jvm.dll+0xc7e017]  JavaThread::thread_main_inner+0x1f7  (thread.cpp:1342)
V  [jvm.dll+0xc75384]  Thread::call_run+0x1b4  (thread.cpp:411)
V  [jvm.dll+0xacae1e]  thread_native_entry+0xae  (os_windows.cpp:552)
C  [ucrtbase.dll+0x1fb80]
C  [KERNEL32.DLL+0x84d4]
C  [ntdll.dll+0x51781]",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8256291,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2sjrv:",9223372036854775807,b04,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@42995637,,,,,,,,,"2021-04-25 06:56;dcubed;Found a similar JFR related failure:

    JDK-8256291 RunThese30M fails ""assert(_class_unload ? true : ((((JfrTraceIdBits::load(class_loader_klass)) & ((1 << 4) << 8)) != 0))) failed: invariant""

The failed assertion is similar, but the stacks are completely different.;;;","2021-06-24 04:24;mgronlun;Problem description:
...
[epoch 1] // JFR is currently recording, current epoch is 1
...
rotate() // epoch shift
[epoch 0]
JfrRecorderThread acquires the ClassLoaderDataGraph_lock
[no concurrent class unloading can happen]
The JfrRecorderThread writes typeset for artefacts tagged in the previous epoch (epoch 1), and also clears meta bits: serialized and transient
JfrRecorderThread releases the ClassLoaderDataGraph_lock
[still recording, but expects end_recording() signal]
A GC (thread) performs class unloading (has the ClassLoaderDataGraph_lock)
GC thread will serialize the unloading classes
GC thread will also serialize and mark the class loaders for the unloaded classes (in the current epoch, epoch 0)
...
stop_recording() // end_recording() delivers signal to stop recording
... // Jfr is stopped, not recording
[implicit epoch 0]
...
start_recording() // begin_recording() delivers signal to start recording
clear safepoint() // epoch shift
[epoch 1]
...
JfrRecorderThread calls JfrTypeSet::clear() // to reach a clean start state, to clear all klasses tagged in previous epoch (0) <<--- asserts here

// jfrTypeSet.cpp:429
  if (USED_PREVIOUS_EPOCH(value)) { // <-- an artefact could be tagged in the previous epoch, even after the last chunk (state disk -> state memory), because we still ""record"" to memory until we get the stop signal.
    callback->do_artifact(value);
    assert(IS_NOT_SERIALIZED(value), ""invariant""); <<--- fails
    return;
  }

The premises are:

1, No flushpoint (which will serialize a klass) will occur after a rotation that moves from state disk -> state memory (awaiting stop signal)
2, No rotation (which will serialize a klass) will occur after a rotation that moves from state disk -> state memory (awaiting stop signal)
3. There is a window between rotate() and end_recording() where artefacts can be tagged in the current epoch (epoch 0).
4. [implicit] Only the JfrRecorderThread can perform serialization of artefacts tagged during the window described in 3.

This counter-example demonstrates premise 4 to be false:
A GC (thread) can unload classes during the window between rotate() and end_recording(). The unloading process will serialize (as an in-memory checkpoint entry) the class loaders associated with the unloaded classes because the system is still ""recording"".

Hence, the assertion is not a theorem and should be removed and let the code fall through and explicitly clear the serialize and transient meta bits.
;;;","2021-06-24 05:07;mgronlun;The product implications of this assertion is that of missed constants in the constant pool. More specifically, a class loader might not be serialized correctly, when the recording system starts up again, meaning events and/or Klass:es can have references that are not resolvable (gives null). Since the window is normally very short, the likelihood is very low.;;;","2021-06-25 02:43;roboduke;Changeset: ffa34ed4
Author:    Markus Grönlund <mgronlun@openjdk.org>
Date:      2021-06-25 09:41:23 +0000
URL:       https://git.openjdk.java.net/jdk/commit/ffa34ed429079827c9b0acb843288fde4b7fa53d
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
"java/io/Console/CharsetTest.java failed with ""expect: spawn id exp6 not open""",JDK-8265918,5047892,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,naoto,dcubed,dcubed,2021-04-25 06:37,2021-05-06 19:13,2023-10-01 09:57,2021-04-29 06:01,17,,,,,,,17,core-libs,,0,intermittent,noreg-self,tier2,,,,,,,,,,,"The following test failed in the JDK17 CI:

java/io/Console/CharsetTest.java

Here's a snippet from the log file:

----------System.err:(24/1939)----------
 stdout: [spawn /opt/mach5/mesos/work_dir/jib-master/install/jdk-17+20-1677/linux-x64.jdk/jdk-17/bin/java -Dsun.stdout.encoding=ISO8859-1 -classpath /opt/mach5/mesos/work_dir/slaves/a4f8fba9-f017-4328-b286-c66b6a97143d-S2209/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/e2c001ef-348a-4b98-8f55-648a35660152/runs/4d842d4b-1647-4980-bd0e-e1f4f84ef946/testoutput/test-support/jtreg_open_test_jdk_tier2_part2/classes/3/java/io/Console/CharsetTest.d CharsetTest
ISO-8859-1
spawn env LANG=en_US.ISO8859-1 LC_ALL=en_US.ISO8859-1 /opt/mach5/mesos/work_dir/jib-master/install/jdk-17+20-1677/linux-x64.jdk/jdk-17/bin/java -classpath /opt/mach5/mesos/work_dir/slaves/a4f8fba9-f017-4328-b286-c66b6a97143d-S2209/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/e2c001ef-348a-4b98-8f55-648a35660152/runs/4d842d4b-1647-4980-bd0e-e1f4f84ef946/testoutput/test-support/jtreg_open_test_jdk_tier2_part2/classes/3/java/io/Console/CharsetTest.d CharsetTest
US-ASCII
];
 stderr: [expect: spawn id exp6 not open
    while executing
""expect eof""
    (file ""/opt/mach5/mesos/work_dir/jib-master/install/jdk-17+20-1677/src.full/open/test/jdk/java/io/Console/script.exp"" line 42)
]
 exitValue = 1

java.lang.RuntimeException: Test failed. Exit value from 'expect' command: 1
	at CharsetTest.main(CharsetTest.java:73)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:78)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at com.sun.javatest.regtest.agent.MainActionHelper$AgentVMRunnable.run(MainActionHelper.java:298)
	at java.base/java.lang.Thread.run(Thread.java:831)

JavaTest Message: Test threw exception: java.lang.RuntimeException
JavaTest Message: shutting down test

----------System.out:(8/640)----------
[2021-04-25T04:04:44.001433669Z] Gathering output for process 2631585
[2021-04-25T04:04:44.158965879Z] Waiting for completion for process 2631585
[2021-04-25T04:04:44.159064063Z] Waiting for completion finished for process 2631585
Output and diagnostic info for process 2631585 was saved into 'pid-2631585-output.log'
[2021-04-25T04:04:44.160455455Z] Waiting for completion for process 2631585
[2021-04-25T04:04:44.160513784Z] Waiting for completion finished for process 2631585
[2021-04-25T04:04:44.164728516Z] Waiting for completion for process 2631585
[2021-04-25T04:04:44.164818525Z] Waiting for completion finished for process 2631585
result: Failed. Execution failed: `main' threw exception: java.lang.RuntimeException: Test failed. Exit value from 'expect' command: 1",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8264208,,,,,,,,,,,,,,,x86_64,,,,,,,,,linux_ubuntu,,,,,"0|i2sjrn:",9223372036854775807,b21,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@5f132e58,,,,,,,,,"2021-04-26 12:57;naoto;The reason for the failure seems that the machine does not equip with en_US.ISO8859-1 locale. Thus setting the environment variables (LANG & LC_ALL) fails and falls back to US-ASCII encoding.;;;","2021-04-27 16:40;naoto;Since we cannot distinguish the linux flavor underneath, let alone supported locales/encodings, possibly the fix is to shrink the test cases down to ones that are presumed to succeed. This way, it won't cause any machine-dependent test run failure, which is an annoying noise.;;;","2021-04-29 06:01;roboduke;Changeset: 294347b5
Author:    Naoto Sato <naoto@openjdk.org>
Date:      2021-04-29 13:01:30 +0000
URL:       https://git.openjdk.java.net/jdk/commit/294347b59be684ee398b442a1c64824eb03311dc
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
"Different values computed by C2 and interpreter/C1 for Math.pow(x, 2.0) on x86_32",JDK-8265917,5047886,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,jiefu,jiefu,jiefu,2021-04-25 04:00,2021-05-03 20:24,2023-10-01 09:57,2021-04-27 20:11,11,16,17,,,,,17,hotspot,,0,c2,hs-comp-triaged,oracle-triage-17,tencent-interest,,,,,,,,,,"Different values may be computed by C2 and interpreter for Math.pow(x, 2.0) on x86_32.

E.g., for Math.pow(1.0 / 2047, 2.0),
the interpreter would get 2.38651580386563E-7, 
         the C2 would get 2.3865158038656307E-7.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,x86,,,,,,,,,,,,,,"0|i2sjqb:",9223372036854775807,b20,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2021-04-27 20:11;roboduke;Changeset: 889d2466
Author:    Jie Fu <jiefu@openjdk.org>
Date:      2021-04-28 03:10:28 +0000
URL:       https://git.openjdk.java.net/jdk/commit/889d246681e937af1fa8d97f683c49043ddf2eda
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
assert(comp != __null) failed: Compiler instance missing ,JDK-8265911,5047879,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,jiefu,jiefu,jiefu,2021-04-25 01:01,2021-06-03 02:59,2023-10-01 09:57,2021-04-26 04:08,17,,,,,,,17,hotspot,,0,hs-comp-triaged,jvmci,oracle-triage-11,oracle-triage-17,tencent-interest,,,,,,,,,"This is on behalf of junjiwang@tencent.com

# Symptom
```
#
# A fatal error has been detected by the Java Runtime Environment:
#
#  Internal Error (/Users/junjiwang/openJDK/git/jdk-master/src/hotspot/share/compiler/compileBroker.cpp:880), pid=19257, tid=5891
#  assert(comp != __null) failed: Compiler instance missing.
#

---------------  T H R E A D  ---------------

Current thread (0x00007fdff4008220):  JavaThread ""main"" [_thread_in_vm, id=10243, stack(0x0000700005d5d000,0x0000700005e5d000)]

Stack: [0x0000700005d5d000,0x0000700005e5d000],  sp=0x0000700005e5c6b0,  free space=1021k
Native frames: (J=compiled Java code, A=aot compiled Java code, j=interpreted, Vv=VM code, C=native code)
V  [libjvm.dylib+0x114cacc]  VMError::report_and_die(int, char const*, char const*, __va_list_tag*, Thread*, unsigned char*, void*, void*, char const*, int, unsigned long)+0x6dc
V  [libjvm.dylib+0x114d0db]  VMError::report_and_die(Thread*, void*, char const*, int, char const*, char const*, __va_list_tag*)+0x3b
V  [libjvm.dylib+0x54d16d]  report_vm_error(char const*, int, char const*, char const*, ...)+0xdd
V  [libjvm.dylib+0x505f4f]  CompileBroker::make_thread(CompileBroker::ThreadType, _jobject*, CompileQueue*, AbstractCompiler*, Thread*)+0x16f
V  [libjvm.dylib+0x50541f]  CompileBroker::init_compiler_sweeper_threads()+0x5cf
V  [libjvm.dylib+0x504aae]  CompileBroker::compilation_init_phase1(Thread*)+0x21e
V  [libjvm.dylib+0x10af5ce]  Threads::create_vm(JavaVMInitArgs*, bool*)+0x73e
V  [libjvm.dylib+0x8de356]  JNI_CreateJavaVM+0x96
C  [libjli.dylib+0x4702]  JavaMain+0x122
C  [libjli.dylib+0x7679]  ThreadJavaMain+0x9
C  [libsystem_pthread.dylib+0x6109]  _pthread_start+0x94
C  [libsystem_pthread.dylib+0x1b8b]  thread_start+0xf
```


# Reproduce
Build with C1 disabled: bash configure --with-jvm-features=-compiler1
Run: java -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler -XX:JVMCIHostThreads=1 -version
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2sjor:",9223372036854775807,b20,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2021-04-26 04:08;roboduke;Changeset: 1580a473
Author:    Junji Wang <junjiwang@tencent.com>
Committer: Tobias Hartmann <thartmann@openjdk.org>
Date:      2021-04-26 11:07:08 +0000
URL:       https://git.openjdk.java.net/jdk/commit/1580a473
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
JVM crashes when matching VectorMaskCmp Node,JDK-8265907,5047876,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,whuang,whuang,whuang,2021-04-24 23:44,2021-07-15 10:23,2023-10-01 09:57,2021-06-30 01:53,17,,,,,,,17,hotspot,,0,c2,hs-comp-triaged,huawei-interest,oracle-triage-11,oracle-triage-17,vectorapi,,,,,,,,"reproduce:
run the attachment with `--add-modules=jdk.incubator.vector TestVectorShuffleIota` on x86 or aarch64

Then we get crash like this:

o576  VectorMaskCmp  === _ o634 o572  [[o579 ]]  7 #vectord[4]:{byte}

--N: o576  VectorMaskCmp  === _ o634 o572  [[o579 ]]  7 #vectord[4]:{byte}

   --N: o634  Binary  === _ o575 o573  [[o576 ]]
   _Binary_vecD_vecD  0  _Binary_vecD_vecD

      --N: o575  ReplicateB  === _ o133  [[o634 o578 ]]  #vectord[4]:{byte}
      VECD  0  VECD

      --N: o573  LShiftVB  === _ o571 o572  [[o634 o577 ]]  #vectord[4]:{byte}
      VECD  0  VECD

   --N: o572  ConI  === o0  [[o573 o576 ]]  #int:1
   IMMI  0  IMMI
   IMMI_1  0  IMMI_1
   IMMIEXT  0  IMMIEXT
   IMMI_LE_4  0  IMMI_LE_4
   IMMI_BITMASK  0  IMMI_BITMASK
   IMMISCALE  0  IMMISCALE
   IMMI26  0  IMMI26
   IMMI19  0  IMMI19
   IMMIU12  0  IMMIU12
   IMMIOFFSET  0  IMMIOFFSET
   IMMIOFFSET1  0  IMMIOFFSET1
   IMMIOFFSET2  0  IMMIOFFSET2
   IMMIOFFSET4  0  IMMIOFFSET4
   IMMIOFFSET8  0  IMMIOFFSET8
   IMMIOFFSET16  0  IMMIOFFSET16
   IMMI8  0  IMMI8
   IMMI8_SHIFT8  0  IMMI8_SHIFT8
   IMMIADDSUB  0  IMMIADDSUB
   IMMILOG  0  IMMILOG
   IREGI  100  loadConI
   IREGINOSP  100  loadConI
   IREGI_R0  100  loadConI
   IREGI_R2  100  loadConI
   IREGI_R3  100  loadConI
   IREGI_R4  100  loadConI
   IREGIORL2I  100  IREGI

# To suppress the following error report, specify this argument
# after -XX: or in .hotspotrc:  SuppressErrorAt=/matcher.cpp:1685
#
# A fatal error has been detected by the Java Runtime Environment:
#
#  Internal Error (/home/wanghuang/repo/jdk/src/hotspot/share/opto/matcher.cpp:1685), pid=55602, tid=55621
#  assert(false) failed: bad AD file
#
# JRE version: OpenJDK Runtime Environment (17.0) (slowdebug build 17-internal+0-adhoc.wanghuang.jdk)
# Java VM: OpenJDK 64-Bit Server VM (slowdebug 17-internal+0-adhoc.wanghuang.jdk, mixed mode, tiered, compressed oops, compressed class ptrs, g1 gc, linux-aarch64)
# Problematic frame:
# V  [libjvm.so+0xee2398][thread 55603 also had an error]
  Matcher::Label_Root(Node const*, State*, Node*, Node*&)+0x5a4
#
# Core dump will be written. Default location: /home/wanghuang/repo/jdk/core.%e.55602.%t
#
# An error report file with more information is saved as:
# /home/wanghuang/repo/jdk/hs_err_pid55602.log
#
# Compiler replay data is saved as:
# /home/wanghuang/repo/jdk/replay_pid55602.log
#
# If you would like to submit a bug report, please visit:
#   https://bugreport.java.com/bugreport/crash.jsp
#
Aborted (core dumped)

Then reason is when ` (vlen < 2 || bit_size < 64) ` , we should not use VectorMaskCmp here.",,,,,,,,,,,JDK-8270678,JDK-8269711,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"2021-04-25 00:22;whuang;TestVectorShuffleIota.java;https://bugs.openjdk.org/secure/attachment/94363/TestVectorShuffleIota.java",,,,,,,,,,,generic,,,,,,,,,generic,,,,,"0|i2sjo3:",9223372036854775807,b29,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2021-06-30 01:53;roboduke;Changeset: ca283c3a
Author:    Wang Huang <whuang@openjdk.org>
Committer: Andrew Dinn <adinn@openjdk.org>
Date:      2021-06-30 08:52:27 +0000
URL:       https://git.openjdk.java.net/jdk17/commit/ca283c3ac06b46bbaf098e210cfe92198eb94cc8
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
StandardJavaFileManager::setLocationForModule specification misses 'Implementation Requirements:',JDK-8265888,5047845,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,jjg,dbessono,dbessono,2021-04-24 03:59,2021-07-21 17:54,2023-10-01 09:57,2021-07-15 09:07,9,,,,,,,18,core-libs,,0,conformance,jsr199,noreg-doc,,,,,,,,,,,"Default methods in StandardJavaFileManager contain ""Impl Requirements"" spec block, for example:

https://docs.oracle.com/en/java/javase/16/docs/api/java.compiler/javax/tools/StandardJavaFileManager.html#asPath(javax.tools.FileObject)

This block is missed for https://docs.oracle.com/en/java/javase/16/docs/api/java.compiler/javax/tools/StandardJavaFileManager.html#setLocationForModule(javax.tools.JavaFileManager.Location,java.lang.String,java.util.Collection)

Spec for setLocationForModule should contain

===========
Implementation Requirements:
    The default implementation throws UnsupportedOperationException 
===========
",,,,,,,,,,,,,,,,,,,,,,,,JDK-8270437,,,,,,,,,JCK-7315985,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2sjh7:",9223372036854775807,b07,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@3c6c40,,,,,,,,,"2021-07-15 09:07;roboduke;Changeset: 1f995e52
Author:    Jonathan Gibbons <jjg@openjdk.org>
Date:      2021-07-15 16:06:40 +0000
URL:       https://git.openjdk.java.net/jdk/commit/1f995e52b2af0bdc3044c27a15ee8da446f02de8
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
ProblemList compiler/codecache/jmx/PoolsIndependenceTest.java on macOS-X64,JDK-8265884,5047837,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,dcubed,dcubed,dcubed,2021-04-23 15:05,2022-12-04 21:56,2023-10-01 09:57,2021-04-24 07:38,17,,,,,,,17,hotspot,,0,hs-comp-triaged,noreg-self,oracle-triage-17,tier1,tier3,ursqe-triaged,,,,,,,,"To reduce the noise in the JDK17 CI, I'm ProblemListing:

compiler/codecache/jmx/PoolsIndependenceTest.java

on macos-x64.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8264632,,,,,,,,,,,,,,,,,,,x86_64,,,,,,,,,os_x_10.15,,,,,"0|i2sjff:",9223372036854775807,b20,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2021-04-23 15:07;dcubed;Here's the context diffs for the proposed fix:

$ git diff
diff --git a/test/hotspot/jtreg/ProblemList.txt b/test/hotspot/jtreg/ProblemList.txt
index a28cff36d3b..b55332e03d2 100644
--- a/test/hotspot/jtreg/ProblemList.txt
+++ b/test/hotspot/jtreg/ProblemList.txt
@@ -68,6 +68,8 @@ compiler/whitebox/ClearMethodStateTest.java 8265360 macosx-aarch64
 compiler/whitebox/EnqueueMethodForCompilationTest.java 8265360 macosx-aarch64
 compiler/whitebox/MakeMethodNotCompilableTest.java 8265360 macosx-aarch64
 
+compiler/codecache/jmx/PoolsIndependenceTest.java 8264632 macos-x64
+
 #############################################################################
 
 # :hotspot_gc;;;","2021-04-24 07:38;roboduke;Changeset: 52f9d229
Author:    Daniel D. Daugherty <dcubed@openjdk.org>
Date:      2021-04-24 00:56:10 +0000
URL:       https://git.openjdk.java.net/jdk/commit/52f9d229
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
OperatingSystemImpl.getCpuLoad() returns incorrect CPU load inside a container,JDK-8265836,5047777,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,sgehwolf,yyang,yyang,2021-04-23 02:01,2022-04-08 09:05,2023-10-01 09:57,2021-05-27 07:41,11.0.12,17,openjdk8u302,,,,,17,core-svc,,0,8bpr-critical-approved,alibaba-interest,containers,jdk11u-fix-request,jdk11u-fix-yes,noreg-hard,,,,,,,,"Created on behalf of albert.th@alibaba-inc.com
------

OperatingSystemImpl.getCpuLoad() may return 1.0 in a container, even though the CPU load is obviously below 100%.

We created a 5-core container and run 4 ""while (true)"" loops in the container. OperatingSystemImpl.getCpuLoad() returned 1.0, which is incorrect (0.8 is correct).
""systemLoad"" in getCpuLoad() is exactly 4.0 before ""systemLoad = Math.min(1.0, systemLoad);"". The problem is caused by using the elapsed time (specified by ""cpu.cfs_period_us"") instead of the total CPU time (specified by ""cpu.cfs_quota_us""). Therefore, it is more reasonable to divide cpu usage time by ""quotaNanos"" instead of ""elapsedNanos"".",,,,,,,,,,,JDK-8272221,JDK-8282708,JDK-8269874,JDK-8268048,JDK-8282613,JDK-8284595,,,,,,,,,,,JDK-8281818,,,,,,JDK-8268103,JDK-8269851,,,JDK-8268098,JDK-8282737,,,"2021-05-06 07:25;sgehwolf;TestLoad.java;https://bugs.openjdk.org/secure/attachment/94530/TestLoad.java",,,,,,,,,,,,,,,,,,,,,,,,,"0|i2sj23:",9223372036854775807,b25,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@411d4af6,,,,,,,,,"2021-05-06 05:43;sgehwolf;This affects CPU load calculation in containers which restrict CPU usage using --cpu-quota and --cpu-period switches as well as using `--cpu-shares`. The restriction using the cpuset controller seems to work correctly.

So we have:

podman run --cpu-shares=2048 <repro-image> => affected
podman run --cpu-quota=700000 --cpu-period=100000 <image> => affected
podman run --cpus=7 <image> => NOT affected
podman run --cpuset-cpus=0-6 <image> => NOT affected.;;;","2021-05-06 07:08;sgehwolf;Both, cgroups v1 and cgroups v2, in said configs are equally affected.;;;","2021-05-06 07:26;sgehwolf;https://bugs.openjdk.java.net/secure/attachment/94530/TestLoad.java is a simple load test showing the issue when run in a container.;;;","2021-05-26 02:39;sgehwolf;Before patch (cgroups v1):

$ sudo podman run --cpu-quota=300000 --cpu-period=100000 -v $(pwd)/build/linux-x86_64-server-release/images/jdk:/opt/jdk:z --rm -ti fedora:33
[root@7f3358679a1b /]# /opt/jdk/bin/java -XshowSettings:system -version
Operating System Metrics:
    Provider: cgroupv1
    Effective CPU Count: 3
    CPU Period: 100000us
    CPU Quota: 300000us
    CPU Shares: -1
    List of Processors, 8 total: 
    0 1 2 3 4 5 6 7 
    List of Effective Processors, 8 total: 
    0 1 2 3 4 5 6 7 
    List of Memory Nodes, 1 total: 
    0 
    List of Available Memory Nodes, 1 total: 
    0 
    Memory Limit: Unlimited
    Memory Soft Limit: Unlimited
    Memory & Swap Limit: Unlimited

openjdk version ""17-internal"" 2021-09-14
OpenJDK Runtime Environment (build 17-internal+0-adhoc.sgehwolf.jdk-jdk)
OpenJDK 64-Bit Server VM (build 17-internal+0-adhoc.sgehwolf.jdk-jdk, mixed mode, sharing)
[root@7f3358679a1b /]# /opt/jdk/bin/java -cp /opt/jdk/os_cpu_repro/bin TestLoad
running test with 2 workers
OperatingSystemMXBean.getCpuLoad: 0.084712
OperatingSystemMXBean.getCpuLoad: 0.453332
OperatingSystemMXBean.getCpuLoad: 0.698874
OperatingSystemMXBean.getCpuLoad: 0.877196
OperatingSystemMXBean.getCpuLoad: 1.000000
OperatingSystemMXBean.getCpuLoad: 1.000000
OperatingSystemMXBean.getCpuLoad: 1.000000
OperatingSystemMXBean.getCpuLoad: 1.000000
OperatingSystemMXBean.getCpuLoad: 1.000000
OperatingSystemMXBean.getCpuLoad: 1.000000
OperatingSystemMXBean.getCpuLoad: 1.000000
OperatingSystemMXBean.getCpuLoad: 1.000000
OperatingSystemMXBean.getCpuLoad: 1.000000
OperatingSystemMXBean.getCpuLoad: 1.000000
OperatingSystemMXBean.getCpuLoad: 1.000000

$ sudo podman run --cpu-shares=$(expr 3 \* 1024) -v $(pwd)/build/linux-x86_64-server-release/images/jdk:/opt/jdk:z --rm -ti fedora:33
[root@a20a45e03eec /]# /opt/jdk/bin/java -XshowSettings:system -version
Operating System Metrics:
    Provider: cgroupv1
    Effective CPU Count: 3
    CPU Period: 100000us
    CPU Quota: -1
    CPU Shares: 3072us
    List of Processors, 8 total: 
    0 1 2 3 4 5 6 7 
    List of Effective Processors, 8 total: 
    0 1 2 3 4 5 6 7 
    List of Memory Nodes, 1 total: 
    0 
    List of Available Memory Nodes, 1 total: 
    0 
    Memory Limit: Unlimited
    Memory Soft Limit: Unlimited
    Memory & Swap Limit: Unlimited

openjdk version ""17-internal"" 2021-09-14
OpenJDK Runtime Environment (build 17-internal+0-adhoc.sgehwolf.jdk-jdk)
OpenJDK 64-Bit Server VM (build 17-internal+0-adhoc.sgehwolf.jdk-jdk, mixed mode, sharing)
[root@a20a45e03eec /]# /opt/jdk/bin/java -cp /opt/jdk/os_cpu_repro/bin TestLoad
running test with 2 workers
OperatingSystemMXBean.getCpuLoad: 0.000000
OperatingSystemMXBean.getCpuLoad: 0.256506
OperatingSystemMXBean.getCpuLoad: 0.256571
OperatingSystemMXBean.getCpuLoad: 0.254068
OperatingSystemMXBean.getCpuLoad: 0.258750
OperatingSystemMXBean.getCpuLoad: 0.254682
OperatingSystemMXBean.getCpuLoad: 0.256250
OperatingSystemMXBean.getCpuLoad: 0.259029
OperatingSystemMXBean.getCpuLoad: 0.259352
OperatingSystemMXBean.getCpuLoad: 0.263092
OperatingSystemMXBean.getCpuLoad: 0.256858
OperatingSystemMXBean.getCpuLoad: 0.255000
OperatingSystemMXBean.getCpuLoad: 0.257500
OperatingSystemMXBean.getCpuLoad: 0.255000
OperatingSystemMXBean.getCpuLoad: 0.266583
OperatingSystemMXBean.getCpuLoad: 0.257822
OperatingSystemMXBean.getCpuLoad: 0.257179
OperatingSystemMXBean.getCpuLoad: 0.253450
OperatingSystemMXBean.getCpuLoad: 0.258427

Before patch (cgroups v2):

$ sudo podman run --cpu-quota=300000 --cpu-period=100000 -v $(pwd)/jdk-17:/opt/jdk:z --rm -ti fedora:33
[root@8105198113d7 /]# /opt/jdk/bin/java -XshowSettings:system -version
Operating System Metrics:
    Provider: cgroupv2
    Effective CPU Count: 3
    CPU Period: 100000us
    CPU Quota: 300000us
    CPU Shares: -1
    List of Processors: N/A
    List of Effective Processors, 4 total: 
    0 1 2 3 
    List of Memory Nodes: N/A
    List of Available Memory Nodes, 1 total: 
    0 
    Memory Limit: Unlimited
    Memory Soft Limit: 0.00K
    Memory & Swap Limit: Unlimited

openjdk version ""17-internal"" 2021-09-14
OpenJDK Runtime Environment (build 17-internal+0-adhoc.sgehwolf.jdk-jdk)
OpenJDK 64-Bit Server VM (build 17-internal+0-adhoc.sgehwolf.jdk-jdk, mixed mode, sharing)
[root@8105198113d7 /]# /opt/jdk/bin/java -cp /opt/jdk/os_cpu_repro/bin container_cpu_load_reproducer.TestLoad
running test with 2 workers
OperatingSystemMXBean.getCpuLoad: 0.122617
OperatingSystemMXBean.getCpuLoad: 0.654535
OperatingSystemMXBean.getCpuLoad: 0.946543
OperatingSystemMXBean.getCpuLoad: 1.000000
OperatingSystemMXBean.getCpuLoad: 1.000000
OperatingSystemMXBean.getCpuLoad: 1.000000
OperatingSystemMXBean.getCpuLoad: 1.000000
OperatingSystemMXBean.getCpuLoad: 1.000000
OperatingSystemMXBean.getCpuLoad: 1.000000

$ sudo podman run --cpu-shares=$(expr 1024 \* 3) -v $(pwd)/jdk-17:/opt/jdk:z --rm -ti fedora:33
[root@f184709c916e /]# /opt/jdk/bin/java -XshowSettings:system -version
Operating System Metrics:
    Provider: cgroupv2
    Effective CPU Count: 3
    CPU Period: 100000us
    CPU Quota: -1
    CPU Shares: 3072us
    List of Processors: N/A
    List of Effective Processors, 4 total: 
    0 1 2 3 
    List of Memory Nodes: N/A
    List of Available Memory Nodes, 1 total: 
    0 
    Memory Limit: Unlimited
    Memory Soft Limit: 0.00K
    Memory & Swap Limit: Unlimited

openjdk version ""17-internal"" 2021-09-14
OpenJDK Runtime Environment (build 17-internal+0-adhoc.sgehwolf.jdk-jdk)
OpenJDK 64-Bit Server VM (build 17-internal+0-adhoc.sgehwolf.jdk-jdk, mixed mode, sharing)
[root@f184709c916e /]# /opt/jdk/bin/java -cp /opt/jdk/os_cpu_repro/bin TestLoad
running test with 2 workers
OperatingSystemMXBean.getCpuLoad: 0.000000
OperatingSystemMXBean.getCpuLoad: 0.507353
OperatingSystemMXBean.getCpuLoad: 0.500000
OperatingSystemMXBean.getCpuLoad: 0.500000
OperatingSystemMXBean.getCpuLoad: 0.502475
OperatingSystemMXBean.getCpuLoad: 0.500000
OperatingSystemMXBean.getCpuLoad: 0.500000
OperatingSystemMXBean.getCpuLoad: 0.502500
OperatingSystemMXBean.getCpuLoad: 0.500000
OperatingSystemMXBean.getCpuLoad: 0.500000
OperatingSystemMXBean.getCpuLoad: 0.500000
OperatingSystemMXBean.getCpuLoad: 0.500000
OperatingSystemMXBean.getCpuLoad: 0.500000
OperatingSystemMXBean.getCpuLoad: 0.500000;;;","2021-05-26 02:54;sgehwolf;After patch (cgroups v1): 

$ sudo podman run --cpu-shares=$(expr 3 \* 1024) -v $(pwd)/build/linux-x86_64-server-release/images/jdk:/opt/jdk:z --rm -ti fedora:33
[root@5699928ffaea /]# /opt/jdk/bin/java -XshowSettings:system -version
Operating System Metrics:
    Provider: cgroupv1
    Effective CPU Count: 3
    CPU Period: 100000us
    CPU Quota: -1
    CPU Shares: 3072us
    List of Processors, 8 total: 
    0 1 2 3 4 5 6 7 
    List of Effective Processors, 8 total: 
    0 1 2 3 4 5 6 7 
    List of Memory Nodes, 1 total: 
    0 
    List of Available Memory Nodes, 1 total: 
    0 
    Memory Limit: Unlimited
    Memory Soft Limit: Unlimited
    Memory & Swap Limit: Unlimited

openjdk version ""17-internal"" 2021-09-14
OpenJDK Runtime Environment (build 17-internal+0-adhoc.sgehwolf.jdk-jdk)
OpenJDK 64-Bit Server VM (build 17-internal+0-adhoc.sgehwolf.jdk-jdk, mixed mode, sharing)
[root@5699928ffaea /]# /opt/jdk/bin/java -cp /opt/jdk/os_cpu_repro/bin TestLoad
running test with 2 workers
OperatingSystemMXBean.getCpuLoad: 0.000018
OperatingSystemMXBean.getCpuLoad: 0.673163
OperatingSystemMXBean.getCpuLoad: 0.664532
OperatingSystemMXBean.getCpuLoad: 0.666929
OperatingSystemMXBean.getCpuLoad: 0.665257
OperatingSystemMXBean.getCpuLoad: 0.667003
OperatingSystemMXBean.getCpuLoad: 0.664502
OperatingSystemMXBean.getCpuLoad: 0.667111
OperatingSystemMXBean.getCpuLoad: 0.665939
OperatingSystemMXBean.getCpuLoad: 0.668049
OperatingSystemMXBean.getCpuLoad: 0.664638

$ sudo podman run --cpu-quota=300000 --cpu-period=100000 -v $(pwd)/build/linux-x86_64-server-release/images/jdk:/opt/jdk:z --rm -ti fedora:33
[root@a103c5dc4fe0 /]# /opt/jdk/bin/java -XshowSettings:system -version
Operating System Metrics:
    Provider: cgroupv1
    Effective CPU Count: 3
    CPU Period: 100000us
    CPU Quota: 300000us
    CPU Shares: -1
    List of Processors, 8 total: 
    0 1 2 3 4 5 6 7 
    List of Effective Processors, 8 total: 
    0 1 2 3 4 5 6 7 
    List of Memory Nodes, 1 total: 
    0 
    List of Available Memory Nodes, 1 total: 
    0 
    Memory Limit: Unlimited
    Memory Soft Limit: Unlimited
    Memory & Swap Limit: Unlimited

openjdk version ""17-internal"" 2021-09-14
OpenJDK Runtime Environment (build 17-internal+0-adhoc.sgehwolf.jdk-jdk)
OpenJDK 64-Bit Server VM (build 17-internal+0-adhoc.sgehwolf.jdk-jdk, mixed mode, sharing)
[root@a103c5dc4fe0 /]# /opt/jdk/bin/java -cp /opt/jdk/os_cpu_repro/bin TestLoad
running test with 2 workers
OperatingSystemMXBean.getCpuLoad: 0.122392
OperatingSystemMXBean.getCpuLoad: 0.618489
OperatingSystemMXBean.getCpuLoad: 0.666808
OperatingSystemMXBean.getCpuLoad: 0.667109
OperatingSystemMXBean.getCpuLoad: 0.666249
OperatingSystemMXBean.getCpuLoad: 0.666749
OperatingSystemMXBean.getCpuLoad: 0.667118
OperatingSystemMXBean.getCpuLoad: 0.666969
OperatingSystemMXBean.getCpuLoad: 0.667128
OperatingSystemMXBean.getCpuLoad: 0.667210
OperatingSystemMXBean.getCpuLoad: 0.666113
OperatingSystemMXBean.getCpuLoad: 0.667099

After patch (cgroups v2):

 $ sudo podman run --cpu-shares=$(expr 1024 \* 3) -v $(pwd)/jdk-17:/opt/jdk:z --rm -ti fedora:33
[root@9d41ca5af92a /]# /opt/jdk/bin/java -XshowSettings:system -version
Operating System Metrics:
    Provider: cgroupv2
    Effective CPU Count: 3
    CPU Period: 100000us
    CPU Quota: -1
    CPU Shares: 3072us
    List of Processors: N/A
    List of Effective Processors, 4 total: 
    0 1 2 3 
    List of Memory Nodes: N/A
    List of Available Memory Nodes, 1 total: 
    0 
    Memory Limit: Unlimited
    Memory Soft Limit: 0.00K
    Memory & Swap Limit: Unlimited

openjdk version ""17-internal"" 2021-09-14
OpenJDK Runtime Environment (build 17-internal+0-adhoc.sgehwolf.jdk-jdk)
OpenJDK 64-Bit Server VM (build 17-internal+0-adhoc.sgehwolf.jdk-jdk, mixed mode, sharing)
[root@9d41ca5af92a /]# /opt/jdk/bin/java -cp /opt/jdk/os_cpu_repro/bin TestLoad
running test with 2 workers
OperatingSystemMXBean.getCpuLoad: 0.000016
OperatingSystemMXBean.getCpuLoad: 0.671328
OperatingSystemMXBean.getCpuLoad: 0.667799
OperatingSystemMXBean.getCpuLoad: 0.662365
OperatingSystemMXBean.getCpuLoad: 0.667712
OperatingSystemMXBean.getCpuLoad: 0.664255
OperatingSystemMXBean.getCpuLoad: 0.666313
OperatingSystemMXBean.getCpuLoad: 0.666165
OperatingSystemMXBean.getCpuLoad: 0.665541
OperatingSystemMXBean.getCpuLoad: 0.663156
OperatingSystemMXBean.getCpuLoad: 0.664574
OperatingSystemMXBean.getCpuLoad: 0.666657
OperatingSystemMXBean.getCpuLoad: 0.664487

$ sudo podman run --cpu-quota=300000 --cpu-period=100000 -v $(pwd)/jdk-17:/opt/jdk:z --rm -ti fedora:33
[root@5e117a7b2be0 /]# /opt/jdk/bin/java -XshowSettings:system -version
Operating System Metrics:
    Provider: cgroupv2
    Effective CPU Count: 3
    CPU Period: 100000us
    CPU Quota: 300000us
    CPU Shares: -1
    List of Processors: N/A
    List of Effective Processors, 4 total: 
    0 1 2 3 
    List of Memory Nodes: N/A
    List of Available Memory Nodes, 1 total: 
    0 
    Memory Limit: Unlimited
    Memory Soft Limit: 0.00K
    Memory & Swap Limit: Unlimited

openjdk version ""17-internal"" 2021-09-14
OpenJDK Runtime Environment (build 17-internal+0-adhoc.sgehwolf.jdk-jdk)
OpenJDK 64-Bit Server VM (build 17-internal+0-adhoc.sgehwolf.jdk-jdk, mixed mode, sharing)
[root@5e117a7b2be0 /]# /opt/jdk/bin/java -cp /opt/jdk/os_cpu_repro/bin TestLoad
running test with 2 workers
OperatingSystemMXBean.getCpuLoad: 0.100796
OperatingSystemMXBean.getCpuLoad: 0.679652
OperatingSystemMXBean.getCpuLoad: 0.666201
OperatingSystemMXBean.getCpuLoad: 0.666256
OperatingSystemMXBean.getCpuLoad: 0.665776
OperatingSystemMXBean.getCpuLoad: 0.666269
OperatingSystemMXBean.getCpuLoad: 0.666421
OperatingSystemMXBean.getCpuLoad: 0.665814
OperatingSystemMXBean.getCpuLoad: 0.605872
OperatingSystemMXBean.getCpuLoad: 0.666968
OperatingSystemMXBean.getCpuLoad: 0.666235;;;","2021-05-27 01:38;sgehwolf;Here is how this looks like outside container (-XX:-UseContainerSupport), i.e. pre JDK-8226575 behaviour on my 8 core machine:

$ java -XX:-UseContainerSupport -cp os_cpu_repro/bin TestLoad
running test with 7 workers
OperatingSystemMXBean.getCpuLoad: 0.000000
OperatingSystemMXBean.getCpuLoad: 0.893958
OperatingSystemMXBean.getCpuLoad: 0.885144
OperatingSystemMXBean.getCpuLoad: 0.882353
OperatingSystemMXBean.getCpuLoad: 0.880000
OperatingSystemMXBean.getCpuLoad: 0.897372
OperatingSystemMXBean.getCpuLoad: 0.908978
OperatingSystemMXBean.getCpuLoad: 0.891114
OperatingSystemMXBean.getCpuLoad: 0.880000
OperatingSystemMXBean.getCpuLoad: 0.877653
OperatingSystemMXBean.getCpuLoad: 0.876250
OperatingSystemMXBean.getCpuLoad: 0.876095
OperatingSystemMXBean.getCpuLoad: 0.881250
OperatingSystemMXBean.getCpuLoad: 0.876712
OperatingSystemMXBean.getCpuLoad: 0.876095
OperatingSystemMXBean.getCpuLoad: 0.878598;;;","2021-05-27 01:43;sgehwolf;And for the cpuset-cpu case (post patch, cgroups v1):

$ sudo podman run --cpuset-cpus 0,1,2 -v $(pwd)/build/linux-x86_64-server-release/images/jdk:/opt/jdk:z --rm -ti fedora:33
[root@315a404837e9 /]# /opt/jdk/bin/java -XshowSettings:system -version
Operating System Metrics:
    Provider: cgroupv1
    Effective CPU Count: 3
    CPU Period: 100000us
    CPU Quota: -1
    CPU Shares: -1
    List of Processors, 3 total: 
    0 1 2 
    List of Effective Processors, 3 total: 
    0 1 2 
    List of Memory Nodes, 1 total: 
    0 
    List of Available Memory Nodes, 1 total: 
    0 
    Memory Limit: Unlimited
    Memory Soft Limit: Unlimited
    Memory & Swap Limit: Unlimited

openjdk version ""17-internal"" 2021-09-14
OpenJDK Runtime Environment (build 17-internal+0-adhoc.sgehwolf.jdk-jdk)
OpenJDK 64-Bit Server VM (build 17-internal+0-adhoc.sgehwolf.jdk-jdk, mixed mode, sharing)
[root@315a404837e9 /]# /opt/jdk/bin/java -cp /opt/jdk/os_cpu_repro/bin TestLoad
running test with 2 workers
OperatingSystemMXBean.getCpuLoad: 0.000000
OperatingSystemMXBean.getCpuLoad: 0.673267
OperatingSystemMXBean.getCpuLoad: 0.670000
OperatingSystemMXBean.getCpuLoad: 0.670000
OperatingSystemMXBean.getCpuLoad: 0.666667
OperatingSystemMXBean.getCpuLoad: 0.671815
OperatingSystemMXBean.getCpuLoad: 0.666667
OperatingSystemMXBean.getCpuLoad: 0.666667
OperatingSystemMXBean.getCpuLoad: 0.666667
OperatingSystemMXBean.getCpuLoad: 0.669967
OperatingSystemMXBean.getCpuLoad: 0.673267
OperatingSystemMXBean.getCpuLoad: 0.667800
;;;","2021-05-27 07:41;roboduke;Changeset: ef368b32
Author:    Hao Tang <albert.th@alibaba-inc.com>
Committer: Severin Gehwolf <sgehwolf@openjdk.org>
Date:      2021-05-27 14:40:29 +0000
URL:       https://git.openjdk.java.net/jdk/commit/ef368b32bc8609bdc46cda628fa25e9bcad751e3
;;;","2021-06-08 05:05;sgehwolf;Fix Request (OpenJDK 11u):

Please approve this bugfix for 11u which fixes an issue of the OS MXBean not repording the cpu load correctly when run in a container. JDK-8226575 made the OS MXBean container aware which got backported to 11u and, thus, we should fix the bug. The JDK 17 patch applies clean. As a follow-up I'll also backport JDK-8268103. Testing with the reproducer in the bug.

RFR: https://mail.openjdk.java.net/pipermail/jdk-updates-dev/2021-June/006484.html;;;",,,,,,,,,,,,,,,,,,,,,,,,,
Exception in Quantum due to null platformWindow,JDK-8265835,5047776,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,lkostyra,mgrev,mgrev,2021-04-23 01:44,2022-11-29 06:12,2023-10-01 09:57,2022-11-03 08:40,jfx14,jfx16,,,,,,jfx20,javafx,,0,sn_130,,,,,,,,,,,,,"This happens when a Window is opened while a tooltip is open. The code to reproduce is unfortunately not possible to derive since it is deep into custom code that is not public.
However, the exception should be pretty self explanatory and a defensive null check should be very safe.

When the exception happens the UI locks completely and the app will have to be shut down with killall.

Uncought exception in thread Thread[JavaFX Application Thread,5,main] (Cannot invoke ""com.sun.glass.ui.Window.isTransparentWindow()"" because the return value of ""com.sun.javafx.tk.quantum.WindowStage.getPlatformWindow()"" is null)
java.lang.NullPointerException: Cannot invoke ""com.sun.glass.ui.Window.isTransparentWindow()"" because the return value of ""com.sun.javafx.tk.quantum.WindowStage.getPlatformWindow()"" is null
	at com.sun.javafx.tk.quantum.GlassScene.getClearColor(GlassScene.java:334)
	at com.sun.javafx.tk.quantum.SceneState.update(SceneState.java:100)
	at com.sun.javafx.tk.quantum.GlassScene.updateSceneState(GlassScene.java:277)
	at com.sun.javafx.tk.quantum.GlassScene.releaseSynchronization(GlassScene.java:138)
	at javafx.scene.Scene$ScenePulseListener.pulse(Scene.java:2511)
	at com.sun.javafx.tk.Toolkit.lambda$runPulse$2(Toolkit.java:413)
	at java.base/java.security.AccessController.doPrivileged(AccessController.java:391)
	at com.sun.javafx.tk.Toolkit.runPulse(Toolkit.java:412)
	at com.sun.javafx.tk.Toolkit.firePulse(Toolkit.java:439)
	at com.sun.javafx.tk.quantum.QuantumToolkit.pulse(QuantumToolkit.java:563)
	at com.sun.javafx.tk.quantum.QuantumToolkit.pulse(QuantumToolkit.java:543)
	at com.sun.javafx.tk.quantum.QuantumToolkit.pulseFromQueue(QuantumToolkit.java:536)
	at com.sun.javafx.tk.quantum.QuantumToolkit.lambda$runToolkit$11(QuantumToolkit.java:342)
	at com.sun.glass.ui.InvokeLaterDispatcher$Future.run(InvokeLaterDispatcher.java:96)
	at com.sun.glass.ui.gtk.GtkApplication.enterNestedEventLoopImpl(Native Method)
	at com.sun.glass.ui.gtk.GtkApplication._enterNestedEventLoop(GtkApplication.java:347)
	at com.sun.glass.ui.Application.enterNestedEventLoop(Application.java:512)
	at com.sun.glass.ui.EventLoop.enter(EventLoop.java:107)
	at com.sun.javafx.tk.quantum.QuantumToolkit.enterNestedEventLoop(QuantumToolkit.java:635)
	at javafx.stage.Stage.showAndWait(Stage.java:465)",The problem is reproduceable on both Linux and Mac (Windows cannot be tested) so it should be very generic.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2sj1v:",9223372036854775807,b06,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4143e3f7,,,,,,,,,"2021-04-23 03:56;kcr;I'll take a look and see if there is a good way to reproduce it. The fix is obvious, but I would like to figure out why windowStage.getPlatformWindow() is returning null in this case.;;;","2021-04-23 04:40;mgrev;Found out that a developer had overridden hide() in PopupWindow to do nothing. The rationale was that JavaFX hides the Tooltip without a way to hinder it and that was a problem. We have now un-overridden hide() and the exception does not occur. We have to solve the actual hiding some other way since the outcome is not fixable in any other way.

JavaFX probably shouldn't throw the exception even if overridden though, and especially not hang the whole app when it does. ;;;","2021-04-23 04:48;kcr;Thanks for the update. Lowering the priority to P4, although still might be good to fix it on our end.;;;","2022-11-01 07:56;lkostyra;Due to a lack of reproductible code I worked at trying to reproduce the bug myself and I unfortunately was not able to. The closest symptom I got after making Tooltip.hide() do nothing was the app having to be SIGINT-ed after the main window is closed (probably some resources being not released and a thread hanging on cleanup). Didn't look further into it, as it seemed unrelated to this problem.

I checked the place where the exception happened and between this issue being reported and now some code changed - mostly there were changes removing applets from code initializing platformWindow in WindowStage.java (commit 4f9b047b830). It could be those changes helped to solve the issue or removed a corner-case which caused getPlatformWindow() to return null.

At the same time, if there is some corner-case caused by custom code we could implement the null check anyway - the mentioned exception happened at GlassStage.java in a function returning clear color, where there already is a null check performed. In short, GlassStage.java @ 340:
```
if (windowStage != null && windowStage.getPlatformWindow().isTransparentWindow()) {
```
would become:
```
if (windowStage != null && windowStage.getPlatformWindow() != null &&
                windowStage.getPlatformWindow().isTransparentWindow()) {
```
Similarly for another same check, right below it.

Feels a bit excessive, as I cannot seem to find a place where getPlatformWindow() would return null. However, my feeling is it shouldn't hurt us in any way and might maybe prevent a situation like that from happening again. Test results also didn't change after adding the check.;;;","2022-11-02 10:12;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jfx/pull/935
Date: 2022-11-02 17:05:10 +0000;;;","2022-11-03 08:40;dukebot;Changeset: 01735b33
Author:    Lukasz Kostyra <lukasz.kostyra@oracle.com>
Committer: Ambarish Rapte <arapte@openjdk.org>
Date:      2022-11-03 15:35:53 +0000
URL:       https://git.openjdk.org/jfx/commit/01735b3389536be69e34c224e5d9de0ce7e39886
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,
runtime/StackGap/testme.sh fails to compile in 8u,JDK-8265832,5047770,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,shade,shade,shade,2021-04-23 00:35,2021-05-04 13:20,2023-10-01 09:57,2021-04-26 00:59,openjdk8u212,,,,,,,openjdk8u302,hotspot,,0,jdk8u-fix-request,jdk8u-fix-yes,,,,,,,,,,,,"This is 8u-specific bug, because in original 11u fix (JDK-8197429) the build is handled by the build system itself. 

In 8u, however, it fails with:

Compilation flag: 
STDERR:
openjdk version ""1.8.0-internal-fastdebug""
OpenJDK Runtime Environment (build 1.8.0-internal-fastdebug-shade_2021_04_22_19_10-b00)
OpenJDK 64-Bit Server VM (build 25.71-b00-fastdebug, mixed mode)
/usr/bin/ld: /tmp/ccj5AhI1.o: in function `create_vm':
exestack-gap.c:(.text+0x103): undefined reference to `JNI_CreateJavaVM'
collect2: error: ld returned 1 exit status
/home/shade/trunks/jdk8u-dev/hotspot/test/runtime/StackGap/testme.sh: 72: ./stack-gap: not found
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8197429,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2sj0j:",9223372036854775807,b01,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,,,"2021-04-23 00:44;shade;Fix Request (8u)

This fixes another 8u test. This is 8u-specific fix. 8u RFR (acked by sgehwolf): https://mail.openjdk.java.net/pipermail/jdk8u-dev/2021-April/013699.html;;;","2021-04-26 00:59;hgupdate;URL:   https://hg.openjdk.java.net/jdk8u/jdk8u-dev/hotspot/rev/a020263526c9
User:  shade
Date:  2021-04-26 07:56:08 +0000
;;;","2021-05-04 13:19;hgupdate;URL:   https://hg.openjdk.java.net/jdk8u/jdk8u/hotspot/rev/a020263526c9
User:  andrew
Date:  2021-05-04 20:08:45 +0000
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
8257831 broke Windows x86 build,JDK-8265831,5047769,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,stuefe,stuefe,stuefe,2021-04-23 00:23,2021-04-28 17:40,2023-10-01 09:57,2021-04-23 09:37,,,,,,,,17,hotspot,,0,,,,,,,,,,,,,,"os_windows.obj : error LNK2019: unresolved external symbol ""public: void __thiscall Semaphore::wait_with_safepoint_check(class JavaThread *)"" (?wait_with_safepoint_check@Semaphore@@QAEXPAVJavaThread@@@Z) referenced in function ""int __cdecl check_pending_signals(void)"" (?check_pending_signals@@YAHXZ)

d:\priv\openjdk\nb\ntintel\jdk-build-fastdebug\support\modules_libs\java.base\server\jvm.dll : fatal error LNK1120: 1 unresolved externals

The error is just a missing include. I have no idea why this only breaks x86 though. It has nothing to do with different calling conventions between caller and callee (a typical pain point on x86 windows). Atm I just assume the Windows x64 build pulls semaphore.inline.hpp via some other includes.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8257831,,,,,,,,,,,,,,,,,,,,,,,,,,,,windows,,,,,"0|i2sj0b:",9223372036854775807,b20,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,,,"2021-04-23 09:37;roboduke;Changeset: ac238701
Author:    Thomas Stuefe <stuefe@openjdk.org>
Date:      2021-04-23 16:37:07 +0000
URL:       https://git.openjdk.java.net/jdk/commit/ac238701
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
[TestBug] Save and restore the default Locale in javafx.base unit test LocalDateTimeStringConverterTest,JDK-8265828,5047763,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,lkostyra,aghaisas,aghaisas,2021-04-22 23:35,2022-12-09 16:11,2023-10-01 09:57,2022-11-29 06:53,jfx17,,,,,,,jfx20,javafx,,0,sn_116,sn_131,sn_132,test_sprint,testbug,,,,,,,,,"javafx.base unit test LocalDateTimeStringConverterTest changes default locale to US.
While it is needed for this test, setting default locale changes the global state of VM default. A cleaner approach would be -
1) Save the current default locale before this test is run
2) Set the default locale to US as this test needs it
3) Restore the default locale to the one saved in step 1 after all the test cases in LocalDateTimeStringConverterTest are executed.

A similar fix was done in controls test - please see JDK-8264952.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8264061,,,,,,,,,,,,,,,,,,,generic,,,,,,,,,generic,,,,,"0|i2siyz:",9223372036854775807,b10,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@233f6319,,,,,,,,,"2022-04-22 05:42;aghaisas;Fixing this has some effect on LocalTimeStringConverterTest.
Initially, I thought that I need to tweak that test as well, but unable to figure out what's going wrong. It needs to be investigated.;;;","2022-11-18 06:47;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jfx/pull/954
Date: 2022-11-17 16:59:09 +0000;;;","2022-11-22 07:03;lkostyra;I followed up on this issue and found that indeed there are random failures that happen after the change as Ajit mentioned. Similarly tweaking remaining Local*StringConverterTest classes ends up with LocalDateTimeStringConverterTest randomly failing on my system.

After a bit more investigation it turned out that the test case fails randomly because Locale happens to early revert back to its old value. On cases when the tests pass it is en-US as it should be, on cases when it fails it is my machine's default Locale.

It's difficult to say what causes this, could be that one of Local*StringConverterTest classes cleans up early and that causes the VM locale to revert, but it's just a speculation. This requires even more investigation to get to the actual cause. I think we'll put this on hold (again) until later.;;;","2022-11-22 08:25;lkostyra;I did one more quick look at the problem and found out that there are some things worth considering:

Each Local*StringConverterTest has implementations() call which was used to set Locale to en-US. For me JUnit grouped these calls together before executing tests, so doing a Locale swap for each test class results in one class swapping from machine's Locale to en-US, while others are then switching from en-US to en-US.

The AfterClass calls are postponed until a not-specified time. LocalDateTime...Test happened to sometimes fail because the test that swapped machine's Locale to en-US had it's AfterClass method called early. This only happens sometimes though. I think the problem is that JUnit treats each test class as its own independent being, assuming it is fully ""atomic"" so to say. Changing Locale in each test breaks this assumption, as Locale affect the whole VM that executes tests.

Some more investigation is needed on what would be the best route to fix this.;;;","2022-11-22 08:56;kcr;I think the previous comment is definitely worth following up on. This seems incredibly fragile to me if we can't count on JUnit fully executing each class before the next one is started. Ignoring the Parameterized.Parameters methods, I would have assumed the following lifecycle at a minimum:

TestClass1.BeforeClass
TestClass1.Before ; TestClass1.testmethA; TestClass1.After
TestClass1.Before ; TestClass1.testmethB; TestClass1.After
...
TestClass1.AfterClass


TestClass2.BeforeClass
...
TestClass2.AfterClass


The order of classes and the order of methods is deliberately not stable, but the calls should not be interleaved regardless of the order of execution.

So, it would be worth seeing if the problem is limited to the unpredictability of Parameterized.Parameters methods, or if we really do see interleaving of methods from more than one class (e.g., if we ever see the AfterClass method of TestClass1 called after the BeforeClass method of TestClass2). If it's only the Parameterized.Parameters methods that are affected, then the solution is for those methods to provide data that isn't dependent on global state (which would be an easy refactoring).;;;","2022-11-22 23:48;lkostyra;Just to follow up, I added BeforeClass methods with just logging calls and the order started to make sense again. Seems the lack of them didn't give the full picture. Parametrized.Parameters calls are still grouped beforehand.

Tests still occasionally pass, but that's because the faulty test class happens at random to be the executed first. As such, its Parametrized.parameters calls properly captures machine's default Locale and switches it to en-US. They fail if they are executed later in line (and other test class reverts Locale to machine's default). So in general, the execution order is:

TestClass1.Parametrized.Parameters
TestClass2.Parametrized.Parameters
TestClass3.Parametrized.Parameters

TestClass1.BeforeClass
TestClass1.Before -> TestClass1.testMethA -> TestClass1.After
TestClass1.Before -> TestClass1.testMethB -> TestClass1.After
...
TestClass1.AfterClass

TestClass2.BeforeClass
...
TestClass2.AfterClass

So, once we get into BeforeClass, Before, After, AfterClass methods, those are executed in whole. It's the Parametrized.Parameters calls that are grouped independently, which in case of these specific tests breaks them.

The best course of action would be as you mentioned to refrain from any VM-wide setups in Parametrized.Parameters calls and move them to BeforeClass calls. Static initializer calls seem to also be the wrong approach here, as the result would be similar. These tests right now use static fields which depend on Locale setting, so this would have to be refactored slightly to get this to work.;;;","2022-11-29 06:53;dukebot;Changeset: 4ad85828
Author:    Lukasz Kostyra <lkostyra@openjdk.org>
Committer: Kevin Rushforth <kcr@openjdk.org>
Date:      2022-11-29 14:51:24 +0000
URL:       https://git.openjdk.org/jfx/commit/4ad85828868066781093131723f9f5214dca928e
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,
Minimal build broken by JDK-8261090,JDK-8265798,5047728,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,ccheung,iklam,iklam,2021-04-22 15:23,2021-04-28 17:39,2023-10-01 09:57,2021-04-22 19:58,17,,,,,,,17,hotspot,,0,cds,,,,,,,,,,,,,"interpreter/rewriter.cpp:573: error: undefined reference to 'MetaspaceShared::is_old_class(InstanceKlass*)'
oops/klassVtable.cpp:1097: error: undefined reference to 'MetaspaceShared::is_old_class(InstanceKlass*)'
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8261090,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2sir7:",9223372036854775807,b20,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,,,"2021-04-22 19:58;roboduke;Changeset: a715b09f
Author:    Calvin Cheung <ccheung@openjdk.org>
Date:      2021-04-23 02:57:42 +0000
URL:       https://git.openjdk.java.net/jdk/commit/a715b09f
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
vmTestbase/nsk/jdi/ObjectReference/referringObjects/referringObjects002/referringObjects002.java fails when running with JEP 416,JDK-8265796,5047723,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,lmesnik,mchung,mchung,2021-04-22 14:27,2021-12-01 17:43,2023-10-01 09:57,2021-11-23 11:30,17,,,,,,,18,core-svc,,0,,,,,,,,,,,,,,"vmTestbase/nsk/jdi/ObjectReference/referringObjects/referringObjects002/referringObjects002.java fails when running with the fix for JDK-6824466 [1] 

# ERROR: Unexpected size of ClassLoaderReference.referringObjects: 18, expected: 17
The following stacktrace is for failure analysis.
nsk.share.TestFailure: Unexpected size of ClassLoaderReference.referringObjects: 18, expected: 17
	at nsk.share.Log.logExceptionForFailureAnalysis(Log.java:432)
	at nsk.share.Log.complain(Log.java:403)
	at nsk.jdi.ObjectReference.referringObjects.referringObjects002.referringObjects002.checkClassObjectReferrersCount(referringObjects002.java:103)
	at nsk.jdi.ObjectReference.referringObjects.referringObjects002.referringObjects002.doTest(referringObjects002.java:126)
	at nsk.share.jdi.TestDebuggerType2.runIt(TestDebuggerType2.java:214)
	at nsk.jdi.ObjectReference.referringObjects.referringObjects002.referringObjects002.run(referringObjects002.java:86)
	at nsk.jdi.ObjectReference.referringObjects.referringObjects002.referringObjects002.main(referringObjects002.java:82)
	at java.base/jdk.internal.reflect.DirectMethodAccessorImpl$StaticMethodAccessor.invoke(DirectMethodAccessorImpl.java:150)
	at java.base/java.lang.reflect.Method.invoke(Method.java:574)
	at com.sun.javatest.regtest.agent.MainWrapper$MainThread.run(MainWrapper.java:127)
	at java.base/java.lang.Thread.run(Thread.java:831)

[1] https://github.com/mlchung/jdk/tree/method-invoke-4",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8271820,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2siq3:",9223372036854775807,b26,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@3397f701,,,,,,,,,"2021-04-22 16:25;cjplummer;        // each class instances has reference to class object +
        // + 'includedIntoReferrersCountTypes.size()' referrers was additionally created
        // +1 referrer is classloader
        // +1 referrer is debugee class unloader
        // +1 self-reference from this_class index
        int expectedReferrersCount = createInstances + HeapwalkingDebuggee.includedIntoReferrersCountTypes.size() + 3;

I assume JDK-6824466  is adding to the list of +1 additional references, in which case just change the 3 to a 4, but it would be nice to document the cause of this +1. However, I question a test even having this much knowledge of JDK internals. Perhaps there is a way to compute the expected additional references by just looking at how many there are for the class before any instances are created.;;;","2021-04-22 16:59;mchung;What references is this test tracking?  JDK-6824466 removes the DelegatingClassLoader objects.;;;","2021-04-22 17:13;cjplummer;I can only assume by my recent quick look at the test (which I've never looked at before). It looks like it expects 10 references from instances (createInstances is 10), 4 from HeapwalkingDebuggee.includedIntoReferrersCountTypes (see below), and then 3 of these special references as outlined in the comments.

I believe HeapwalkingDebuggee.includedIntoReferrersCountTypes is in intended to create one of each of the following references:

        includedIntoReferrersCountTypes.add(ObjectInstancesManager.STRONG_REFERENCE);
        includedIntoReferrersCountTypes.add(ObjectInstancesManager.WEAK_REFERENCE);
        includedIntoReferrersCountTypes.add(ObjectInstancesManager.SOFT_REFERENCE);
        includedIntoReferrersCountTypes.add(ObjectInstancesManager.PHANTOM_REFERENCE);

So that's 17 references, and with the JDK-6824466 changes it appears we now have 18. We might need to modify the test to give info on the references. 

The counting is done in checkClassObjectReferrersCount() by calling ClassObjectReference.referringObjects(). Perhaps a first step in figuring out what is going on here is to call and print the result of ObjectReference.referenceType() for each referring object returned.;;;","2021-04-22 17:58;mchung;Thanks Chris.  FWIW.   JDK-6824466 also makes MethodHandle::asTypeCache to a weak reference which may be related.   ;;;","2021-10-13 11:09;mchung;w.r.t. the extra reference, is TestClass1 (the class being inspected) being referenced in the signature of any reflective call?

Method::invoke will cause a MethodHandle to be created and its associated MethodType will reference the classes in the signature.   That may be one possible cause of the extra reference.;;;","2021-11-18 10:08;mchung;The extra reference comes from MethodType stored as a weak reference in the MethodType::internTable.   The weak reference will be purged when the MethodType becomes unreachable.   A better fix may be to force GC such that this weakly referenced MethodType is GC'ed.

From Leonid: 
I think it a link from ‘static final ConcurrentWeakInternSet<MethodType> internTable = new ConcurrentWeakInternSet<>();’
6:38
Here is the ref tree:
instance of java.lang.invoke.MethodType(id=883)
 instance of java.lang.invoke.MethodType$ConcurrentWeakInternSet$WeakEntry(id=887)
  instance of java.util.concurrent.ConcurrentHashMap$Node(id=888)
   instance of java.util.concurrent.ConcurrentHashMap$Node[1024] (id=890)
    instance of java.util.concurrent.ConcurrentHashMap(id=892)
     instance of java.lang.invoke.MethodType$ConcurrentWeakInternSet(id=894)
      instance of java.lang.Class(reflected class=java.lang.invoke.MethodType, id=72)
;;;","2021-11-23 11:30;roboduke;Changeset: 7cb56a23
Author:    Leonid Mesnik <lmesnik@openjdk.org>
Date:      2021-11-23 19:27:50 +0000
URL:       https://git.openjdk.java.net/jdk/commit/7cb56a230dbd52935ae48fe44b4192ae3b4d7adb
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,
vmTestbase/nsk/jvmti/AttachOnDemand/attach022/TestDescription.java fails when running with JEP 416 ,JDK-8265795,5047722,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,lmesnik,mchung,mchung,2021-04-22 14:23,2021-12-01 17:43,2023-10-01 09:57,2021-11-22 09:16,17,,,,,,,18,hotspot,,0,,,,,,,,,,,,,,"vmTestbase/nsk/jvmti/AttachOnDemand/attach022/TestDescription.java fails when running with a proposed fix for JDK-6824466  (https://github.com/mlchung/jdk/tree/method-invoke-4)

TargetApp (stdout): The following fake exception stacktrace is for failure analysis. 
TargetApp (stdout): nsk.share.Fake_Exception_for_RULE_Creation: (attach022Agent00.cpp:75) ERROR: unexpected taggedObjectsCounter: 0 (expected value is 10)
TargetApp (stdout): 	at nsk_lvcomplain(nsk_tools.cpp:172)
TargetApp (stdout): # ERROR: attach022Agent00.cpp, 75: ERROR: unexpected taggedObjectsCounter: 0 (expected value is 10)
TargetApp (stdout): - aod.cpp, 253: Agent NativeAgent-0 finished (success: 0)
TargetApp (stdout): Agent 'NativeAgent-0' finished execution (finishedSuccessfully: false)
TargetApp (stdout): # ERROR: Agent 'NativeAgent-0 finished with error status
TargetApp (stdout): The following stacktrace is for failure analysis.
TargetApp (stdout): nsk.share.TestFailure: Agent 'NativeAgent-0 finished with error status
TargetApp (stdout): 	at nsk.share.Log.logExceptionForFailureAnalysis(Log.java:432)
TargetApp (stdout): 	at nsk.share.Log.complain(Log.java:403)
TargetApp (stdout): 	at nsk.share.aod.TargetApplicationWaitingAgents.setStatusFailed(TargetApplicationWaitingAgents.java:275)
TargetApp (stdout): 	at nsk.share.aod.TargetApplicationWaitingAgents.agentFinished(TargetApplicationWaitingAgents.java:173)
TargetApp (stdout): 	at nsk.jvmti.AttachOnDemand.attach022.attach022Target.shutdownAgent(Native Method)
TargetApp (stdout): 	at nsk.jvmti.AttachOnDemand.attach022.attach022Target.targetApplicationActions(attach022Target.java:52)
TargetApp (stdout): 	at nsk.share.aod.TargetApplicationWaitingAgents.runTargetApplication(TargetApplicationWaitingAgents.java:354)
TargetApp (stdout): 	at nsk.jvmti.AttachOnDemand.attach022.attach022Target.main(attach022Target.java:59)
TargetApp (stdout): # ERROR: Error happened during agent work, see error messages for details
TargetApp (stdout): Waiting for agents finishing
TargetApp (stdout): All agents finished execution
TargetApp (stdout): Signal received: 'finish'
TargetApp (stdout): # ERROR: Error happened during TargetApplication execution (see error messages for details)
TargetApp (stdout): The following stacktrace is for failure analysis.
TargetApp (stdout): nsk.share.TestFailure: Error happened during TargetApplication execution (see error messages for details)
TargetApp (stdout): 	at nsk.share.Log.logExceptionForFailureAnalysis(Log.java:432)
TargetApp (stdout): 	at nsk.share.Log.complain(Log.java:403)
TargetApp (stdout): 	at nsk.share.aod.TargetApplicationWaitingAgents.exitAsFailed(TargetApplicationWaitingAgents.java:289)
TargetApp (stdout): 	at nsk.share.aod.TargetApplicationWaitingAgents.runTargetApplication(TargetApplicationWaitingAgents.java:386)
TargetApp (stdout): 	at nsk.jvmti.AttachOnDemand.attach022.attach022Target.main(attach022Target.java:59)
TargetApp (stdout): # ERROR: Stop execution",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8271820,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2sipv:",9223372036854775807,b26,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@661b156a,,,,,,,,,"2021-04-22 17:27;cjplummer;The test creates 10 instances of nsk.jvmti.AttachOnDemand.attach022.ClassForAllocationEventsTest. You can see it doing this in the log with 10 lines like the following:

  TargetApp (stdout): Create instance of nsk.jvmti.AttachOnDemand.attach022.ClassForAllocationEventsTest

However, it also expects 10 ObjectAlloc events for these instances, but these are not showing up in the log. You see them for a few other allocations such as:

  TargetApp (stdout): - attach022Agent00.cpp, 131: NativeAgent-0: ObjectAlloc event received (object class: Ljava/lang/invoke/MemberName;)

Since these 10 ObjectAlloc events are never received, the object tagging of these objects is never done, thus the failure message:

   TargetApp (stdout): # ERROR: attach022Agent00.cpp, 75: ERROR: unexpected taggedObjectsCounter: 0 (expected value is 10)

Maybe reflective allocations are no longer triggering the ObjectAlloc event. This is the code that prints the first log message above and allocates the object:

    private void allocateObject() throws InstantiationException, IllegalAccessException {
        log.display(""Create instance of "" + ClassForAllocationEventsTest.class.getName());
        ClassForAllocationEventsTest.class.newInstance();
    }

I'm not sure why newInstance() is used here rather than just ""new"". Would be interesting to see if the bug goes away when using ""new"".;;;","2021-04-27 10:15;mchung;vmTestbase/nsk/jvmti/AttachOnDemand/attach002a/TestDescription.java fails.  The issue might be related.

TargetApp (stdout): - attach002aAgent00.cpp, 126: NativeAgent-0: initialization was done
TargetApp (stdout): - aod.cpp, 199: Agent NativeAgent-0 is loaded
TargetApp (stdout): - attach002aAgent00.cpp, 63: NativeAgent-0: ObjectAlloc event received (object class: Ljava/lang/invoke/MemberName;)
TargetApp (stdout): Agent 'NativeAgent-0' was loaded
TargetApp (stdout): All expected agents connected
TargetApp (stdout): - attach002aAgent00.cpp, 63: NativeAgent-0: ObjectAlloc event received (object class: [Ljava/lang/reflect/Constructor;)
TargetApp (stdout): - attach002aAgent00.cpp, 63: NativeAgent-0: ObjectAlloc event received (object class: [Ljava/lang/Class;)
TargetApp (stdout): - attach002aAgent00.cpp, 63: NativeAgent-0: ObjectAlloc event received (object class: Ljava/lang/reflect/Constructor;)
TargetApp (stdout): - attach002aAgent00.cpp, 63: NativeAgent-0: ObjectAlloc event received (object class: [Ljava/lang/Class;)
TargetApp (stdout): - attach002aAgent00.cpp, 63: NativeAgent-0: ObjectAlloc event received (object class: Ljava/lang/reflect/Constructor;)
TargetApp (stdout): - attach002aAgent00.cpp, 63: NativeAgent-0: ObjectAlloc event received (object class: Ljava/lang/String;)
TargetApp (stdout): - attach002aAgent00.cpp, 63: NativeAgent-0: ObjectAlloc event received (object class: [B)
TargetApp (stdout): - attach002aAgent00.cpp, 63: NativeAgent-0: ObjectAlloc event received (object class: Ljava/lang/invoke/MemberName;)
TargetApp (stdout): - attach002aAgent00.cpp, 63: NativeAgent-0: ObjectAlloc event received (object class: Ljava/lang/invoke/MemberName;)
TargetApp (stdout): - attach002aAgent00.cpp, 63: NativeAgent-0: ObjectAlloc event received (object class: Ljava/lang/invoke/MemberName;)
TargetApp (stdout): InterruptedException.getMessage(): 'Test InterruptedException'
Agent was loaded
Detaching from the VM 'sun.tools.attach.AttachProviderImpl@541e4ee8: 15624'
Sending signal: 'finish'
TargetApp (stdout): - attach002aAgent00.cpp, 63: NativeAgent-0: ObjectAlloc event received (object class: Ljava/lang/invoke/MemberName;)
TargetApp (stdout): # ERROR: InterruptedException.getMessage() returns unexpected value (expected is 'attach002a: redefined version'), probably class wasn't redefined
TargetApp (stdout): - attach002aAgent00.cpp, 63: NativeAgent-0: ObjectAlloc event received (object class: Ljava/lang/String;)
TargetApp (stdout): - attach002aAgent00.cpp, 63: NativeAgent-0: ObjectAlloc event received (object class: [B)
TargetApp (stdout): - attach002aAgent00.cpp, 63: NativeAgent-0: ObjectAlloc event received (object class: Ljava/lang/invoke/MemberName;)
TargetApp (stdout): - attach002aAgent00.cpp, 63: NativeAgent-0: ObjectAlloc event received (object class: Ljava/lang/invoke/MemberName;)
TargetApp (stdout): - attach002aAgent00.cpp, 63: NativeAgent-0: ObjectAlloc event received (object class: Ljava/lang/invoke/MemberName;)
TargetApp (stdout): - attach002aAgent00.cpp, 63: NativeAgent-0: ObjectAlloc event received (object class: Ljava/lang/String;)
TargetApp (stdout): - attach002aAgent00.cpp, 63: NativeAgent-0: ObjectAlloc event received (object class: [B)
TargetApp (stdout): - attach002aAgent00.cpp, 63: NativeAgent-0: ObjectAlloc event received (object class: Ljava/lang/invoke/MemberName;)
TargetApp (stdout): - attach002aAgent00.cpp, 63: NativeAgent-0: ObjectAlloc event received (object class: Ljava/lang/invoke/MemberName;)
TargetApp (stdout): - attach002aAgent00.cpp, 63: NativeAgent-0: ObjectAlloc event received (object class: Ljava/lang/invoke/MemberName;)
TargetApp (stdout): - attach002aAgent00.cpp, 63: NativeAgent-0: ObjectAlloc event received (object class: Ljava/lang/invoke/MemberName;)
TargetApp (stdout): - attach002aAgent00.cpp, 63: NativeAgent-0: ObjectAlloc event received (object class: Ljava/lang/invoke/MemberName;)
TargetApp (stdout): - attach002aAgent00.cpp, 63: NativeAgent-0: ObjectAlloc event received (object class: Ljava/lang/String;)
TargetApp (stdout): - attach002aAgent00.cpp, 63: NativeAgent-0: ObjectAlloc event received (object class: [B)
TargetApp (stdout): - attach002aAgent00.cpp, 63: NativeAgent-0: ObjectAlloc event received (object class: Ljava/lang/invoke/MemberName;)
TargetApp (stdout): - attach002aAgent00.cpp, 63: NativeAgent-0: ObjectAlloc event received (object class: Ljava/lang/invoke/MemberName;)
TargetApp (stdout): - attach002aAgent00.cpp, 63: NativeAgent-0: ObjectAlloc event received (object class: Ljava/lang/invoke/MemberName;)
TargetApp (stdout): - attach002aAgent00.cpp, 63: NativeAgent-0: ObjectAlloc event received (object class: Ljava/lang/invoke/MemberName;)
TargetApp (stdout): - attach002aAgent00.cpp, 63: NativeAgent-0: ObjectAlloc event received (object class: Ljava/lang/invoke/MemberName;)
TargetApp (stdout): - attach002aAgent00.cpp, 63: NativeAgent-0: ObjectAlloc event received (object class: Ljava/lang/invoke/MemberName;)
TargetApp (stdout): - attach002aAgent00.cpp, 63: NativeAgent-0: ObjectAlloc event received (object class: Ljava/lang/invoke/MemberName;)
TargetApp (stdout): The following stacktrace is for failure analysis.
TargetApp (stdout): nsk.share.TestFailure: InterruptedException.getMessage() returns unexpected value (expected is 'attach002a: redefined version'), probably class wasn't redefined
TargetApp (stdout): 	at nsk.share.Log.logExceptionForFailureAnalysis(Log.java:432)
TargetApp (stdout): 	at nsk.share.Log.complain(Log.java:403)
TargetApp (stdout): 	at nsk.share.aod.TargetApplicationWaitingAgents.setStatusFailed(TargetApplicationWaitingAgents.java:275)
TargetApp (stdout): 	at nsk.jvmti.AttachOnDemand.attach002a.attach002aTarget.targetApplicationActions(attach002aTarget.java:44)
TargetApp (stdout): 	at nsk.share.aod.TargetApplicationWaitingAgents.runTargetApplication(TargetApplicationWaitingAgents.java:354)
TargetApp (stdout): 	at nsk.jvmti.AttachOnDemand.attach002a.attach002aTarget.main(attach002aTarget.java:51)
TargetApp (stdout): Waiting for agents finishing
TargetApp (stdout): - attach002aAgent00.cpp, 63: NativeAgent-0: ObjectAlloc event received (object class: Ljava/lang/invoke/MemberName;)
TargetApp (stdout): - attach002aAgent00.cpp, 63: NativeAgent-0: ObjectAlloc event received (object class: Ljava/lang/invoke/MemberName;)
TargetApp (stdout): - attach002aAgent00.cpp, 63: NativeAgent-0: ObjectAlloc event received (object class: Ljava/lang/invoke/MemberName;)
TargetApp (stdout): - attach002aAgent00.cpp, 63: NativeAgent-0: ObjectAlloc event received (object class: Ljava/lang/invoke/MemberName;)
TargetApp (stdout): - attach002aAgent00.cpp, 63: NativeAgent-0: ObjectAlloc event received (object class: Ljava/lang/invoke/MemberName;)
TargetApp (stdout): - attach002aAgent00.cpp, 63: NativeAgent-0: ObjectAlloc event received (object class: Ljava/lang/invoke/MemberName;)
TargetApp (stdout): - attach002aAgent00.cpp, 63: NativeAgent-0: ObjectAlloc event received (object class: Ljava/lang/invoke/MemberName;)
TargetApp (stdout): - attach002aAgent00.cpp, 63: NativeAgent-0: ObjectAlloc event received (object class: Ljava/lang/invoke/MemberName;)
TargetApp (stdout): - attach002aAgent00.cpp, 63: NativeAgent-0: ObjectAlloc event received (object class: Ljava/lang/invoke/MemberName;)
TargetApp (stdout): - attach002aAgent00.cpp, 63: NativeAgent-0: ObjectAlloc event received (object class: Ljava/lang/invoke/MemberName;)
TargetApp (stdout): - attach002aAgent00.cpp, 63: NativeAgent-0: ObjectAlloc event received (object class: Ljava/lang/invoke/MemberName;)
TargetApp (stdout): - attach002aAgent00.cpp, 63: NativeAgent-0: ObjectAlloc event received (object class: Ljava/lang/invoke/MemberName;)
TargetApp (stdout): - attach002aAgent00.cpp, 63: NativeAgent-0: ObjectAlloc event received (object class: Ljava/lang/invoke/MemberName;)
TargetApp (stdout): - attach002aAgent00.cpp, 63: NativeAgent-0: ObjectAlloc event received (object class: Ljava/lang/invoke/MemberName;)
TargetApp (stdout): - attach002aAgent00.cpp, 63: NativeAgent-0: ObjectAlloc event received (object class: Ljava/lang/invoke/MemberName;)
TargetApp (stdout): - attach002aAgent00.cpp, 63: NativeAgent-0: ObjectAlloc event received (object class: Ljava/lang/invoke/MemberName;)
TargetApp (stdout): - attach002aAgent00.cpp, 63: NativeAgent-0: ObjectAlloc event received (object class: Ljava/lang/invoke/MemberName;)
TargetApp (stdout): - attach002aAgent00.cpp, 63: NativeAgent-0: ObjectAlloc event received (object class: Ljava/lang/invoke/MemberName;)
TargetApp (stdout): - attach002aAgent00.cpp, 63: NativeAgent-0: ObjectAlloc event received (object class: Ljava/lang/invoke/MemberName;)
TargetApp (stdout): - attach002aAgent00.cpp, 63: NativeAgent-0: ObjectAlloc event received (object class: Ljava/lang/invoke/MemberName;)
TargetApp (stdout): - attach002aAgent00.cpp, 63: NativeAgent-0: ObjectAlloc event received (object class: Ljava/lang/invoke/MemberName;)
TargetApp (stdout): - attach002aAgent00.cpp, 63: NativeAgent-0: ObjectAlloc event received (object class: Ljava/lang/invoke/MemberName;)
TargetApp (stdout): - attach002aAgent00.cpp, 63: NativeAgent-0: ObjectAlloc event received (object class: Ljava/lang/invoke/MemberName;)
TargetApp (stdout): - attach002aAgent00.cpp, 63: NativeAgent-0: ObjectAlloc event received (object class: Ljava/lang/invoke/MemberName;)
TargetApp (stdout): - attach002aAgent00.cpp, 63: NativeAgent-0: ObjectAlloc event received (object class: Ljava/lang/invoke/MemberName;)
TargetApp (stdout): - attach002aAgent00.cpp, 63: NativeAgent-0: ObjectAlloc event received (object class: Ljava/lang/invoke/MemberName;)
TargetApp (stdout): - attach002aAgent00.cpp, 63: NativeAgent-0: ObjectAlloc event received (object class: Ljava/lang/invoke/MemberName;)
TargetApp (stdout): - attach002aAgent00.cpp, 63: NativeAgent-0: ObjectAlloc event received (object class: Ljava/lang/invoke/MemberName;)
TargetApp (stdout): - attach002aAgent00.cpp, 63: NativeAgent-0: ObjectAlloc event received (object class: Ljava/lang/invoke/MemberName;)
TargetApp (stdout): - attach002aAgent00.cpp, 63: NativeAgent-0: ObjectAlloc event received (object class: Ljava/lang/invoke/MemberName;)
TargetApp (stdout): - attach002aAgent00.cpp, 63: NativeAgent-0: ObjectAlloc event received (object class: Ljava/lang/invoke/MemberName;)
TargetApp (stdout): - attach002aAgent00.cpp, 63: NativeAgent-0: ObjectAlloc event received (object class: Ljava/lang/invoke/MemberName;)
TargetApp (stdout): # ERROR: Agents didn't finish in 300000ms, stop execution (attached agents number: 1, finished agents number: 0)
TargetApp (stdout): The following stacktrace is for failure analysis.
TargetApp (stdout): nsk.share.TestFailure: Agents didn't finish in 300000ms, stop execution (attached agents number: 1, finished agents number: 0)
TargetApp (stdout): 	at nsk.share.Log.logExceptionForFailureAnalysis(Log.java:432)
TargetApp (stdout): 	at nsk.share.Log.complain(Log.java:403)
TargetApp (stdout): 	at nsk.share.aod.TargetApplicationWaitingAgents.exitAsFailed(TargetApplicationWaitingAgents.java:289)
TargetApp (stdout): 	at nsk.share.aod.TargetApplicationWaitingAgents.waitAgentsFinishing(TargetApplicationWaitingAgents.java:264)
TargetApp (stdout): 	at nsk.share.aod.TargetApplicationWaitingAgents.runTargetApplication(TargetApplicationWaitingAgents.java:368)
TargetApp (stdout): 	at nsk.jvmti.AttachOnDemand.attach002a.attach002aTarget.main(attach002aTarget.java:51)
TargetApp (stdout): # ERROR: Stop execution
TargetApp (stdout): 
TargetApp (stdout): 
TargetApp (stdout): #>  
TargetApp (stdout): #>  SUMMARY: Following errors occured
TargetApp (stdout): #>      during test execution:
TargetApp (stdout): #>  
TargetApp (stdout): # ERROR: InterruptedException.getMessage() returns unexpected value (expected is 'attach002a: redefined version'), probably class wasn't redefined
TargetApp (stdout): # ERROR: Agents didn't finish in 300000ms, stop execution (attached agents number: 1, finished agents number: 0)
TargetApp (stdout): # ERROR: Stop execution;;;","2021-10-12 19:10;cjplummer;The attach002a failure does appear to be the same issue. The test is allocating a InterruptedException using Class.newInstance():

        InterruptedException e = InterruptedException.class.newInstance();

It should be getting an ObjectAlloc event for it, but the event is not showing up in the log. The event is what triggers the RedefineClass of InterruptedException. Since that is never happening, the test fails when it detects that InterruptedException was not redefined.;;;","2021-11-15 19:48;lmesnik;It seems that VMObjectAlloc should be generated when an object is constructed using MethodHandle. There are no bytecodes used in this case.
Also, the spec for https://docs.oracle.com/en/java/javase/16/docs/specs/jvmti.html#VMObjectAlloc might be updated to make it clearer.

;;;","2021-11-15 20:18;dholmes;Is it the case that construction via MethodHandles has never generated ObjectAlloc events? If so that seems a bug in the original provision of MethodHandles. The spec is quite clear:

"" Some methods might not have associated bytecodes and are not native methods, they instead are executed directly by the VM. These methods should send this event.""

If MH don't use bytecodes then they should always have sent this event when allocating the object.

That said, I don't see where the old reflection implementation would generate this event either. And if the reflection implementation spun bytecode then it would not generate this event.;;;","2021-11-15 23:12;lmesnik;The reflection generates the event in the JVM_NewInstanceFromConstructor. And I think that MH just never generated it. Need to add the simple test which generate object and check events to ensure.;;;","2021-11-15 23:31;dholmes;Thanks [~lmesnik] (I was grepping for the wrong search string). So that would be the native accessor path right? So for the inflation path there would be no event.

I'm failing to discover where in the MH code it actually does the allocation before invoking the constructor's MH ??;;;","2021-11-16 10:43;mchung;Looks like MH to invoke a constructor is missing to generate JVM TI VMObjectAlloc event.    MH uses Unsafe::allocateInstance to allocate an object before invoking the constructor.

See https://github.com/openjdk/jdk/blob/master/src/java.base/share/classes/java/lang/invoke/DirectMethodHandle.java#L277;;;","2021-11-16 22:04;lmesnik;I believe it is needed to add post_vm_object_alloc directly into Unsafe_AllocateInstance. 

The absence of an event for inflation path in inflation path for reflection is a separate issue. It is JDK 17 below only.;;;","2021-11-17 18:37;dholmes;> I believe it is needed to add post_vm_object_alloc directly into Unsafe_AllocateInstance.

I tend to agree that is where the event generation should occur as it is a VM allocation point. That said we would also need to check the other callers of this to ensure these events are actually appropriate - and even so it may surprise other tests.

> The absence of an event for inflation path in inflation path for reflection is a separate issue. It is JDK 17 below only. 

Just to be clear if reflection spins up bytecode to do this then there should not be a VMObjectAlloc event. The point I am raising is that the test is assuming it should expect and event from reflection, when in fact that will depend on the nature of the reflection (at least before the switch to MH).;;;","2021-11-18 06:27;lmesnik;[~dholmes] Thank you for the explanation about the problem with reflection.
I'll check the usage of unsafe and check how post_vm_object_alloc in Unsafe_AllocateInstance works.;;;","2021-11-22 09:16;roboduke;Changeset: 33e2a518
Author:    Leonid Mesnik <lmesnik@openjdk.org>
Date:      2021-11-22 17:11:34 +0000
URL:       https://git.openjdk.java.net/jdk/commit/33e2a518ebcd50e76c559512539fd7c864fd2407
;;;",,,,,,,,,,,,,,,,,,,,,,
ProblemList serviceability/sa/sadebugd/DisableRegistryTest.java on ZGC,JDK-8265786,5047710,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,dcubed,dcubed,dcubed,2021-04-22 12:30,2021-04-28 17:39,2023-10-01 09:57,2021-04-22 13:46,17,,,,,,,17,hotspot,,0,regression,tier3,zgc,,,,,,,,,,,"The following test fails in the JDK17 CI with ZGC:

serviceability/sa/sadebugd/DisableRegistryTest.java

Here's a snippet from the log file:

#section:main
----------messages:(4/169)----------
command: main DisableRegistryTest
reason: User specified action: run main/othervm DisableRegistryTest 
Mode: othervm [/othervm specified]
elapsed time (seconds): 18.537
----------configuration:(0/0)----------
----------System.out:(18/3081)----------
Command line: ['/opt/mach5/mesos/work_dir/jib-master/install/jdk-17+20-1639/linux-x64-debug.jdk/jdk-17/fastdebug/bin/java' '-XX:MaxRAMPercentage=4' '-Djava.io.tmpdir=/opt/mach5/mesos/work_dir/slaves/3c846bae-ce30-4a97-93ee-9fef4497ccb6-S78971/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/5c72f367-bad9-4ffa-897b-7e6e2b389d73/runs/b5112ed9-2083-4ef9-8a50-5b8c66a1b000/testoutput/test-support/jtreg_open_test_hotspot_jtreg_hotspot_serviceability/tmp' '-XX:+CreateCoredumpOnCrash' '-XX:+UseZGC' '-cp' '/opt/mach5/mesos/work_dir/slaves/3c846bae-ce30-4a97-93ee-9fef4497ccb6-S78971/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/5c72f367-bad9-4ffa-897b-7e6e2b389d73/runs/b5112ed9-2083-4ef9-8a50-5b8c66a1b000/testoutput/test-support/jtreg_open_test_hotspot_jtreg_hotspot_serviceability/classes/2/serviceability/sa/sadebugd/DisableRegistryTest.d:/opt/mach5/mesos/work_dir/slaves/3c846bae-ce30-4a97-93ee-9fef4497ccb6-S78971/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/5c72f367-bad9-4ffa-897b-7e6e2b389d73/runs/b5112ed9-2083-4ef9-8a50-5b8c66a1b000/testoutput/test-support/jtreg_open_test_hotspot_jtreg_hotspot_serviceability/classes/2/test/lib' 'jdk.test.lib.apps.LingeredApp' '4a4c4dbd-406e-41b6-890c-6b06dec25ca2.lck']
Command line: ['/opt/mach5/mesos/work_dir/jib-master/install/jdk-17+20-1639/linux-x64-debug.jdk/jdk-17/fastdebug/bin/java' '-XX:MaxRAMPercentage=4' '-Djava.io.tmpdir=/opt/mach5/mesos/work_dir/slaves/3c846bae-ce30-4a97-93ee-9fef4497ccb6-S78971/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/5c72f367-bad9-4ffa-897b-7e6e2b389d73/runs/b5112ed9-2083-4ef9-8a50-5b8c66a1b000/testoutput/test-support/jtreg_open_test_hotspot_jtreg_hotspot_serviceability/tmp' '-XX:+CreateCoredumpOnCrash' '-XX:+UseZGC' '-cp' '/opt/mach5/mesos/work_dir/slaves/3c846bae-ce30-4a97-93ee-9fef4497ccb6-S78971/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/5c72f367-bad9-4ffa-897b-7e6e2b389d73/runs/b5112ed9-2083-4ef9-8a50-5b8c66a1b000/testoutput/test-support/jtreg_open_test_hotspot_jtreg_hotspot_serviceability/classes/2/serviceability/sa/sadebugd/DisableRegistryTest.d:/opt/mach5/mesos/work_dir/slaves/3c846bae-ce30-4a97-93ee-9fef4497ccb6-S78971/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/5c72f367-bad9-4ffa-897b-7e6e2b389d73/runs/b5112ed9-2083-4ef9-8a50-5b8c66a1b000/testoutput/test-support/jtreg_open_test_hotspot_jtreg_hotspot_serviceability/classes/2/test/lib' 'jdk.test.lib.apps.LingeredApp' '347019ed-ce88-4ccb-9a8b-e3b5cd793e9d.lck']
[2021-04-22T18:40:48.248224900Z] Gathering output for process 12474
Attaching to remote server localhost:10000, please wait...
Debugger attached successfully.
Server compiler detected.
JVM version is 17-ea+20-LTS-1639
Java System Properties:


[2021-04-22T18:40:49.664191385Z] Waiting for completion for process 12474
[2021-04-22T18:40:49.664441467Z] Waiting for completion finished for process 12474
 LingeredApp stdout: [];
 LingeredApp stderr: []
 LingeredApp exitValue = 0
 LingeredApp stdout: [];
 LingeredApp stderr: []
 LingeredApp exitValue = 0
----------System.err:(89/6378)----------
java.lang.ExceptionInInitializerError
	at jdk.hotspot.agent/sun.jvm.hotspot.gc.z.ZAddress.is_weak_bad(ZAddress.java:43)
	at jdk.hotspot.agent/sun.jvm.hotspot.gc.z.ZAddress.is_weak_good_or_null(ZAddress.java:51)
	at jdk.hotspot.agent/sun.jvm.hotspot.gc.z.ZBarrier.is_weak_good_or_null_fast_path(ZBarrier.java:32)
	at jdk.hotspot.agent/sun.jvm.hotspot.gc.z.ZBarrier.weak_barrier(ZBarrier.java:76)
	at jdk.hotspot.agent/sun.jvm.hotspot.gc.z.ZCollectedHeap.oop_load_barrier(ZCollectedHeap.java:88)
	at jdk.hotspot.agent/sun.jvm.hotspot.gc.z.ZCollectedHeap.oop_load_in_native(ZCollectedHeap.java:110)
	at jdk.hotspot.agent/sun.jvm.hotspot.oops.VMOopHandle.resolve(VMOopHandle.java:60)
	at jdk.hotspot.agent/sun.jvm.hotspot.oops.Klass.getJavaMirror(Klass.java:114)
	at jdk.hotspot.agent/sun.jvm.hotspot.oops.InstanceKlass.iterateStaticFields(InstanceKlass.java:651)
	at jdk.hotspot.agent/sun.jvm.hotspot.runtime.VM.readSystemProperties(VM.java:1092)
	at jdk.hotspot.agent/sun.jvm.hotspot.runtime.VM.getSystemProperties(VM.java:1085)
	at jdk.hotspot.agent/sun.jvm.hotspot.tools.SysPropsDumper.run(SysPropsDumper.java:44)
	at jdk.hotspot.agent/sun.jvm.hotspot.tools.JInfo$1.run(JInfo.java:80)
	at jdk.hotspot.agent/sun.jvm.hotspot.tools.JInfo.run(JInfo.java:95)
	at jdk.hotspot.agent/sun.jvm.hotspot.tools.Tool.startInternal(Tool.java:278)
	at jdk.hotspot.agent/sun.jvm.hotspot.tools.Tool.start(Tool.java:241)
	at jdk.hotspot.agent/sun.jvm.hotspot.tools.Tool.execute(Tool.java:134)
	at jdk.hotspot.agent/sun.jvm.hotspot.tools.JInfo.runWithArgs(JInfo.java:139)
	at jdk.hotspot.agent/sun.jvm.hotspot.tools.JInfo.main(JInfo.java:144)
	at jdk.hotspot.agent/sun.jvm.hotspot.SALauncher.runJINFO(SALauncher.java:352)
	at jdk.hotspot.agent/sun.jvm.hotspot.SALauncher.main(SALauncher.java:499)
Caused by: java.lang.RuntimeException: No long constant named ""ZAddressSpaceStart"" present in type database
	at jdk.hotspot.agent/sun.jvm.hotspot.types.basic.BasicTypeDataBase.lookupLongConstant(BasicTypeDataBase.java:113)
	at jdk.hotspot.agent/sun.jvm.hotspot.types.basic.BasicTypeDataBase.lookupLongConstant(BasicTypeDataBase.java:106)
	at jdk.hotspot.agent/sun.jvm.hotspot.gc.z.ZGlobals.initialize(ZGlobals.java:93)
	at jdk.hotspot.agent/sun.jvm.hotspot.gc.z.ZGlobals.lambda$static$0(ZGlobals.java:65)
	at jdk.hotspot.agent/sun.jvm.hotspot.runtime.VM.registerVMInitializedObserver(VM.java:578)
	at jdk.hotspot.agent/sun.jvm.hotspot.gc.z.ZGlobals.<clinit>(ZGlobals.java:65)
	... 21 more

 stdout: [Attaching to remote server localhost:10000, please wait...
Debugger attached successfully.
Server compiler detected.
JVM version is 17-ea+20-LTS-1639
Java System Properties:

];
 stderr: [java.lang.ExceptionInInitializerError
	at jdk.hotspot.agent/sun.jvm.hotspot.gc.z.ZAddress.is_weak_bad(ZAddress.java:43)
	at jdk.hotspot.agent/sun.jvm.hotspot.gc.z.ZAddress.is_weak_good_or_null(ZAddress.java:51)
	at jdk.hotspot.agent/sun.jvm.hotspot.gc.z.ZBarrier.is_weak_good_or_null_fast_path(ZBarrier.java:32)
	at jdk.hotspot.agent/sun.jvm.hotspot.gc.z.ZBarrier.weak_barrier(ZBarrier.java:76)
	at jdk.hotspot.agent/sun.jvm.hotspot.gc.z.ZCollectedHeap.oop_load_barrier(ZCollectedHeap.java:88)
	at jdk.hotspot.agent/sun.jvm.hotspot.gc.z.ZCollectedHeap.oop_load_in_native(ZCollectedHeap.java:110)
	at jdk.hotspot.agent/sun.jvm.hotspot.oops.VMOopHandle.resolve(VMOopHandle.java:60)
	at jdk.hotspot.agent/sun.jvm.hotspot.oops.Klass.getJavaMirror(Klass.java:114)
	at jdk.hotspot.agent/sun.jvm.hotspot.oops.InstanceKlass.iterateStaticFields(InstanceKlass.java:651)
	at jdk.hotspot.agent/sun.jvm.hotspot.runtime.VM.readSystemProperties(VM.java:1092)
	at jdk.hotspot.agent/sun.jvm.hotspot.runtime.VM.getSystemProperties(VM.java:1085)
	at jdk.hotspot.agent/sun.jvm.hotspot.tools.SysPropsDumper.run(SysPropsDumper.java:44)
	at jdk.hotspot.agent/sun.jvm.hotspot.tools.JInfo$1.run(JInfo.java:80)
	at jdk.hotspot.agent/sun.jvm.hotspot.tools.JInfo.run(JInfo.java:95)
	at jdk.hotspot.agent/sun.jvm.hotspot.tools.Tool.startInternal(Tool.java:278)
	at jdk.hotspot.agent/sun.jvm.hotspot.tools.Tool.start(Tool.java:241)
	at jdk.hotspot.agent/sun.jvm.hotspot.tools.Tool.execute(Tool.java:134)
	at jdk.hotspot.agent/sun.jvm.hotspot.tools.JInfo.runWithArgs(JInfo.java:139)
	at jdk.hotspot.agent/sun.jvm.hotspot.tools.JInfo.main(JInfo.java:144)
	at jdk.hotspot.agent/sun.jvm.hotspot.SALauncher.runJINFO(SALauncher.java:352)
	at jdk.hotspot.agent/sun.jvm.hotspot.SALauncher.main(SALauncher.java:499)
Caused by: java.lang.RuntimeException: No long constant named ""ZAddressSpaceStart"" present in type database
	at jdk.hotspot.agent/sun.jvm.hotspot.types.basic.BasicTypeDataBase.lookupLongConstant(BasicTypeDataBase.java:113)
	at jdk.hotspot.agent/sun.jvm.hotspot.types.basic.BasicTypeDataBase.lookupLongConstant(BasicTypeDataBase.java:106)
	at jdk.hotspot.agent/sun.jvm.hotspot.gc.z.ZGlobals.initialize(ZGlobals.java:93)
	at jdk.hotspot.agent/sun.jvm.hotspot.gc.z.ZGlobals.lambda$static$0(ZGlobals.java:65)
	at jdk.hotspot.agent/sun.jvm.hotspot.runtime.VM.registerVMInitializedObserver(VM.java:578)
	at jdk.hotspot.agent/sun.jvm.hotspot.gc.z.ZGlobals.<clinit>(ZGlobals.java:65)
	... 21 more
]
 exitValue = 1

java.lang.RuntimeException: Test ERROR java.lang.RuntimeException: stderr was not empty
	at DisableRegistryTest.main(DisableRegistryTest.java:101)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:78)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at com.sun.javatest.regtest.agent.MainWrapper$MainThread.run(MainWrapper.java:127)
	at java.base/java.lang.Thread.run(Thread.java:831)
Caused by: java.lang.RuntimeException: stderr was not empty
	at jdk.test.lib.process.OutputAnalyzer.stderrShouldBeEmptyIgnoreDeprecatedWarnings(OutputAnalyzer.java:162)
	at DisableRegistryTest.test(DisableRegistryTest.java:73)
	at DisableRegistryTest.main(DisableRegistryTest.java:96)
	... 6 more

JavaTest Message: Test threw exception: java.lang.RuntimeException: Test ERROR java.lang.RuntimeException: stderr was not empty
JavaTest Message: shutting down test

STATUS:Failed.`main' threw exception: java.lang.RuntimeException: Test ERROR java.lang.RuntimeException: stderr was not empty
----------rerun:(36/7165)*----------


This failure first occurs in jdk-17+20-1639-tier3 which includes:

JDK-8263636 Add --disable-registry option to jhsdb debugd

so it's likely that JDK-8263636 is the cause of these failures.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8220624,JDK-8263636,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2sin7:",9223372036854775807,b20,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@714e388c,,,,,,,,,"2021-04-22 12:38;dcubed;[~ysuenaga] - Please take a look at this new failure. I think it is
caused by JDK-8263636.;;;","2021-04-22 12:39;dcubed;So far this failure has reproduced on linux-aarch64 and linux-x64.;;;","2021-04-22 13:20;dcubed;I just noticed that all of these failures are in ZGC configs.;;;","2021-04-22 13:24;dcubed;There's an existing bug for SA issues and ZGC:

    JDK-8220624 SA: Out of sync with ZGC's internal data structures

I'm going to ProblemList this test.;;;","2021-04-22 13:29;dcubed;This is a new test added by:

JDK-8263636 Add --disable-registry option to jhsdb debugd 

so I'm going to use this bug to ProblemList this test for ZGC.;;;","2021-04-22 13:30;dcubed;Here's the context diff for the proposed fix:

$ git diff
diff --git a/test/hotspot/jtreg/ProblemList-zgc.txt b/test/hotspot/jtreg/ProblemList-zgc.txt
index 8f6eaef49cc..1b4e12491dc 100644
--- a/test/hotspot/jtreg/ProblemList-zgc.txt
+++ b/test/hotspot/jtreg/ProblemList-zgc.txt
@@ -61,4 +61,5 @@ serviceability/sa/TestJmapCore.java                           8220624   generic-
 serviceability/sa/TestJmapCoreMetaspace.java                  8220624   generic-all
 serviceability/sa/TestSysProps.java                           8220624   generic-all
 serviceability/sa/sadebugd/DebugdConnectTest.java             8220624   generic-all
+serviceability/sa/sadebugd/DisableRegistryTest.java           8220624   generic-all
 vmTestbase/jit/escape/AdaptiveBlocking/AdaptiveBlocking001/AdaptiveBlocking001.java 8260303 windows-x64;;;","2021-04-22 13:46;roboduke;Changeset: e81baead
Author:    Daniel D. Daugherty <dcubed@openjdk.org>
Date:      2021-04-22 20:45:25 +0000
URL:       https://git.openjdk.java.net/jdk/commit/e81baead
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,
[C2] Hoisting of DecodeN leaves MachTemp inputs behind,JDK-8265784,5047708,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,mdoerr,mdoerr,mdoerr,2021-04-22 11:49,2021-05-12 08:21,2023-10-01 09:57,2021-05-04 00:57,11,17,,,,,,17,hotspot,,0,c2,hs-comp-triaged,jdk11u-fix-request,jdk11u-fix-yes,oracle-triage-17,,,,,,,,,"C2's Local Code Motion (LCM) can hoist DecodeN nodes into a different block. Depending on CompressedOops mode and platform, they can have MachTemp input nodes representing temp registers as needed by the platform code and /or other input nodes.

PPC64 and s390 have DecodeN implementations which use a MachTemp input. When LCM hoists the DecodeN, they reside in the old block, but should get hoisted together with the DecodeN node.

Load Base is a further possible input node (e.g. on s390).

This can be observed by the new assertion introduced by JDK-8263227 when running e.g. compiler/runtime/Test6826736.java.
Crashes are not observed in product build. However, the register allocation may produce sub-optimal results.",,,,,,,,,,,JDK-8267029,,,,,,,,,,,,,,,,,,,,,,JDK-8051805,,,,JDK-8263227,,,,,,,,,,,,,,,ppc,s390x,,,,,,,,,,,,,"0|i2simr:",9223372036854775807,b21,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2021-05-04 00:57;roboduke;Changeset: 8e071c4b
Author:    Martin Doerr <mdoerr@openjdk.org>
Date:      2021-05-04 07:56:42 +0000
URL:       https://git.openjdk.java.net/jdk/commit/8e071c4b52e84fed5503271f051429c9740b34dd
;;;","2021-05-11 06:51;mdoerr;Fix Request (11u)
The assertion ""uses must be dominated by definitions"" from JDK-8263227 also fires in 11u when inserting it and running tests on PPC64. Crashes were not observed, but register allocation could get disturbed. This change fixes it. All tests have passed. Fix is small and applies cleanly. It only affects platforms which use additional inputs for DecodeN nodes (PPC64, s390) and certain compressed oops modes.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
"Incorrect jdeps message ""jdk8internals"" to describe a removed JDK internal API",JDK-8265773,5047692,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,mchung,mchung,mchung,2021-04-22 09:59,2021-09-28 09:37,2023-10-01 09:57,2021-04-28 10:35,11.0.11,,,,,,,17,tools,,0,jdk11u-fix-request,jdk11u-fix-yes,,,,,,,,,,,,"https://mail.openjdk.java.net/pipermail/core-libs-dev/2021-April/076674.html

jdk-11.0.11/bin/jdeps -s reactor-core-3.4.5.jar
reactor-core-3.4.5.jar -> jdk8internals
reactor-core-3.4.5.jar -> java.base
reactor-core-3.4.5.jar -> java.logging
reactor-core-3.4.5.jar -> not found

jdk-11.0.10/bin/jdeps -s reactor-core-3.4.5.jar
reactor-core-3.4.5.jar -> JDK removed internal API
reactor-core-3.4.5.jar -> java.base
reactor-core-3.4.5.jar -> java.logging
reactor-core-3.4.5.jar -> not found",,,,,,,,,,,JDK-8269292,JDK-8266234,,,,,,,,,,,,,,,,,,,,,JDK-8213909,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2sij7:",9223372036854775807,b21,,,,,,,,,,,,"2021-04-28 10:35;roboduke;Changeset: b3b2bb28
Author:    Mandy Chung <mchung@openjdk.org>
Date:      2021-04-28 17:34:43 +0000
URL:       https://git.openjdk.java.net/jdk/commit/b3b2bb2875fc30d550d80e09c3e2b3f257a29869
;;;","2021-06-22 05:09;alexsch;Fix request (11u)

This is the request to backport the fix to jdk 11u.
The patch applies cleanly to jdk11u-dev repository:
https://github.com/openjdk/jdk/commit/b3b2bb2875fc30d550d80e09c3e2b3f257a29869.patch

The fix has been built with the latest jdk11u-dev sources on Ubuntu 18.04 and manually tested with reactor-core-3.4.5.jar lib.

The jdeps output without the fix is jdk8internals:

build/linux-x86_64-normal-server-release/jdk/bin/jdeps -s reactor-core-3.4.5.jar 
reactor-core-3.4.5.jar -> jdk8internals
reactor-core-3.4.5.jar -> java.base
reactor-core-3.4.5.jar -> java.logging
reactor-core-3.4.5.jar -> not found

and with the fix is JDK removed internal API

build/linux-x86_64-normal-server-release/jdk/bin/jdeps -s reactor-core-3.4.5.jar 
reactor-core-3.4.5.jar -> JDK removed internal API
reactor-core-3.4.5.jar -> java.base
reactor-core-3.4.5.jar -> java.logging
reactor-core-3.4.5.jar -> not found;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
compiler/eliminateAutobox/TestIntBoxing.java crashes on arm32 after 8264649 in debug VMs,JDK-8265767,5047684,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,hshi,cgo,cgo,2021-04-22 07:28,2021-06-03 02:57,2023-10-01 09:57,2021-05-04 05:59,17,,,,,,,17,hotspot,,0,c2,hs-comp-triaged,oracle-triage-11,oracle-triage-17,tencent-interest,,,,,,,,,"The change made by JDK-8264649 seems to break the test case compiler/eliminateAutobox/TestIntBoxing.java on 32-bit arm in fastdebug builds. This is a bit weird to me, since it looks like the change should actually fix the problem.

The JVM crashes with:

ACTION: main -- Failed. Unexpected exit from test [exit code: 1]
REASON: User specified action: run main/othervm -Xbatch -XX:+IgnoreUnrecognizedVMOptions -XX:+EliminateAutoBox compiler.eliminateAutobox.TestIntBoxing 
TIME:   7.335 seconds
messages:
command: main -Xbatch -XX:+IgnoreUnrecognizedVMOptions -XX:+EliminateAutoBox compiler.eliminateAutobox.TestIntBoxing
reason: User specified action: run main/othervm -Xbatch -XX:+IgnoreUnrecognizedVMOptions -XX:+EliminateAutoBox compiler.eliminateAutobox.TestIntBoxing 
Mode: othervm [/othervm specified]
elapsed time (seconds): 7.335
configuration:
STDOUT:
 715  AddI  === _  564  109  [[]]  !jvms: TestIntBoxing::remi_sump_deop @ bci:-1 (line 504)
# To suppress the following error report, specify this argument
# after -XX: or in .hotspotrc:  SuppressErrorAt=/compile.cpp:2375
#
# A fatal error has been detected by the Java Runtime Environment:
#
#  Internal Error (/home/cgo/dev/openjdk/jdk/src/hotspot/share/opto/compile.cpp:2375), pid=18855, tid=18866
#  fatal error: no reachable node should have no use
#
# JRE version: OpenJDK Runtime Environment (17.0+18) (fastdebug build 17-internal+18-ahead-146--e16d568c1f5d7030b9e038e21fb3815ae5b1163a)
# Java VM: OpenJDK Server VM (fastdebug 17-internal+18-ahead-146--e16d568c1f5d7030b9e038e21fb3815ae5b1163a, mixed mode, serial gc, linux-arm)
# Problematic frame:
# V  [libjvm.so+0x63dea8]  Compile::check_no_dead_use() const+0x34c
#
# CreateCoredumpOnCrash turned off, no core file dumped
#
# An error report file with more information is saved as:
# /home/microdoc/cgo/jdk/build/run-test-prebuilt/test-support/jtreg_test_hotspot_jtreg_compiler_eliminateAutobox_TestIntBoxing_java/scratch/hs_err_pid18855.log
#
# Compiler replay data is saved as:
# /home/microdoc/cgo/jdk/build/run-test-prebuilt/test-support/jtreg_test_hotspot_jtreg_compiler_eliminateAutobox_TestIntBoxing_java/scratch/replay_pid18855.log
#
# If you would like to submit a bug report, please visit:
#   https://bugreport.java.com/bugreport/crash.jsp
#

Reverting the change done in JDK-8264649 using `$ git revert --no-commit 42f4d706` makes the problem disappear and the test doesn't crash anymore.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8264649,,,,,,,,"2021-04-22 07:26;cgo;hs_err_pid18855.log;https://bugs.openjdk.org/secure/attachment/94351/hs_err_pid18855.log","2021-04-22 07:26;cgo;replay_pid18855.log;https://bugs.openjdk.org/secure/attachment/94350/replay_pid18855.log",,,,,,,,,,arm,,,,,,,17,,linux,,,,,"0|i2sihf:",9223372036854775807,b21,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2021-04-28 02:17;hshi;Thanks for triaging and find this regression! Arm32 is not aviable at my hand. Still trying to setup a cross build  environment and see if I can reproduce it on qemu.
Basically arm32 turn off TieredCompilation defaultly, it might releated with that, will try turn off TieredCompilation and see if it happens on x64/aarch64 first.

;;;","2021-04-29 05:01;hshi;This bug releated with adding top node into wroklist, with following chagne, arm32 case can pass.

diff --git a/src/hotspot/share/opto/phaseX.cpp b/src/hotspot/share/opto/phaseX.cpp
index 8c0a7de2d66..6d74e8ddb91 100644
--- a/src/hotspot/share/opto/phaseX.cpp
+++ b/src/hotspot/share/opto/phaseX.cpp
@@ -1481,7 +1481,7 @@ void PhaseIterGVN::subsume_node( Node *old, Node *nn ) {
   temp->init_req(0,nn);     // Add a use to nn to prevent him from dying
   remove_dead_node( old );
   temp->del_req(0);         // Yank bogus edge
-  if (nn != NULL && nn->outcnt() == 0) {
+  if (nn != NULL && nn->outcnt() == 0 && !nn->is_top()) {
     _worklist.push(nn);
   }
 #ifndef PRODUCT;;;","2021-04-30 01:38;hshi;compiler/eliminateAutobox/TestIntBoxing.java crashes on arm32 after fixing for JDK-8264649.
In LoadNode::eliminate_autobox, ""previous"" result is dead after line 1450 but not added into PhaseGVN worklist.
Its out_cnt is 0. If it isn't optimized, will trigger assertion in Compile::check_no_dead_use.

1443             } else if (result->is_Add() && result->in(2)->is_Con() &&
1444                        result->in(1)->Opcode() == Op_LShiftX &&
1445                        result->in(1)->in(2) == phase->intcon(shift)) {
1446               // We can't do general optimization: ((X<<Z) + Y) >> Z ==> X + (Y>>Z)
1447               // but for boxing cache access we know that X<<Z will not overflow
1448               // (there is range check) so we do this optimizatrion by hand here.
1449               Node* add_con = new RShiftXNode(result->in(2), phase->intcon(shift));
1450               result = new AddXNode(result->in(1)->in(1), phase->transform(add_con));
1451             } else 


----- ---------------------------------------------------------
Why does this assertion occur only on arm32?

In above LoadNode::eliminate_autobox branch, optimization is matching ""IntegerCache.cache[i + (-IntegerCache.low)]"" and get int value by offset .
Testing on X86_64, TestIntBoxing.remi_sump_deop enters above branch four times and create four dead AddL nodes.

offset_expression for ""IntegerCache.cache[i + (-IntegerCache.low)]"" in bytes is ""((i + (-IntegerCache.low)) << 2) + 16""; 16 is array header size.
""previous"" reuslt at line 1450 is ""((i + (-IntegerCache.low)) << 2) - 512)"".
""updated"" result at line 1450 suppose be ""((i + (-IntegerCache.low)) << 2) - 512) >> 2"", its simplification form is ""(i + (-IntegerCache.low)) + (-128)"".
Final result node is adding (i + (-IntegerCache.low)) with (-128).

These four AddL nodes will be removed when removing node 680 (long:-512) as it has no other uses and no assertion in Compile::check_no_dead_use.
680  ConL  ===  0  [[ 679  694  712  725 ]]  #long:-512  
679  AddL  === _  575  680  [[]]  !jvms: TestIntBoxing::remi_sump_deop @ bci:-1 (line 494)
694  AddL  === _  465  680  [[]]  !jvms: TestIntBoxing::remi_sump_deop @ bci:-1 (line 494)
712  AddL  === _  366  680  [[]]  !jvms: TestIntBoxing::remi_sump_deop @ bci:-1 (line 494)
725  AddL  === _  244  680  [[]]  !jvms: TestIntBoxing::remi_sump_deop @ bci:-1 (line 494)


----- ---------------------------------------------------------
Why does this assertion occur after JDK-8264649 on arm32?

arm32 optimizes better for ""IntegerCache.cache[i + (-IntegerCache.low)]"".
Its offset_expression is ""(i << 2) + 528"", (-IntegerCache.low) is folded with array header size.
""previous"" reuslt at line 1450 is ""(i << 2) + 4"".
There is Integer object ""j+1"", ""+1"" expression is folded into offset_expression like ""(i << 2) + 8"".

503   static int remi_sump_deop(Integer j) {
504     for (int i = 0; i< 1000; i++) {
505       j = foo(j + 1);  // j + 1 expression
506     }
507     dummy();
508     return j;
509   }
510 

Node 728 casuses assertion in Compile::check_no_dead_use.

672  ConI  ===  0  [[ 700  686 ]]  #int:4  // dead, no other use 
109  ConI  ===  0  [[ 467  327  691  728 ]]  #int:8 // live, has other use 
671  AddI  === _  572  672  [[]]  !jvms: TestIntBoxing::remi_sump_deop @ bci:-1 (line 494)
686  AddI  === _  369  672  [[]]  !jvms: TestIntBoxing::remi_sump_deop @ bci:-1 (line 494)
700  AddI  === _  465  672  [[]]  !jvms: TestIntBoxing::remi_sump_deop @ bci:-1 (line 494)
728  AddI  === _  572  109  [[]]  !jvms: TestIntBoxing::remi_sump_deop @ bci:-1 (line 494)  // failure node in Compile::check_no_dead_use.



----- ---------------------------------------------------------
Why does this assertion not occur before JDK-8264649 on arm32?
Integer object ""j+1"", ""+1"" expression is not folded into offset_expression before JDK-8264649. All dead AddI has input ""#int:4"" and removed later.
;;;","2021-05-04 05:59;roboduke;Changeset: ee5bba0d
Author:    Hui Shi <hshi@openjdk.org>
Committer: Tobias Hartmann <thartmann@openjdk.org>
Date:      2021-05-04 12:58:25 +0000
URL:       https://git.openjdk.java.net/jdk/commit/ee5bba0dc4cc7c2bfe633c5a3fe731c6c37adb1d
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
DomainKeyStore may stop enumerating aliases if a constituting KeyStore is empty,JDK-8265765,5047644,Bug,Closed,JDK,JDK,software,duke,,,P4,Fixed,hchao,webbuggrp,webbuggrp,2021-04-22 01:44,2022-08-09 09:01,2023-10-01 09:57,2022-02-09 08:55,11,16,17,,,,,19,security-libs,,0,dcsaw,reproducer-yes,webbug,,,,,,,,,,,"A DESCRIPTION OF THE PROBLEM :
An empty KeyStore will cause enumeration of aliases in a DomainKeyStore to stop prematurely if the empty keystore is not the first one processed.

STEPS TO FOLLOW TO REPRODUCE THE PROBLEM :
Create a DomainKeyStore containing three KeyStores, one of which is empty. Use prefixes ""a"", ""b"", and ""c"", where ""b"" is associated with the empty store. 

EXPECTED VERSUS ACTUAL BEHAVIOR :
EXPECTED -
Enumerating the aliases of the DomainKeyStore should return the aliases of KeyStore ""a"", followed by the ones in ""c"".
ACTUAL -
Enumerating the aliases of the DomainKeyStore returns only the aliases of KeyStore ""a"".

---------- BEGIN SOURCE ----------
import java.io.OutputStream;
import java.nio.file.Files;
import java.nio.file.Path;
import java.security.DomainLoadStoreParameter;
import java.security.KeyStore;
import java.util.Enumeration;
import java.util.LinkedHashMap;
import java.util.Map;
import javax.crypto.KeyGenerator;

public class DksProblem {
    private static void write(Path p, KeyStore keystore) throws Exception {
        try (OutputStream outputStream = Files.newOutputStream(p)) {
            keystore.store(outputStream, new char[] { 'x' });
        }
    }
    
    public static void main(String...args) throws Exception {
        final KeyGenerator keyGenerator = KeyGenerator.getInstance(""AES"");
        keyGenerator.init(256);

        // Create keystore with one key:
        //
        final KeyStore nonEmptyKeystore = KeyStore.getInstance(""PKCS12"");
        nonEmptyKeystore.load(null, null);
        
        final Path nonEmptyPath = Path.of(""non_empty.p12"");
        nonEmptyKeystore.setKeyEntry(""a"", keyGenerator.generateKey(), new char[] { 'a' }, null);
        write(nonEmptyPath, nonEmptyKeystore);
        
        // Create empty keystore:
        //
        final KeyStore emptyKeystore = KeyStore.getInstance(""PKCS12"");
        emptyKeystore.load(null, null);
        
        final Path emptyPath = Path.of(""empty.p12"");
        write(emptyPath, emptyKeystore);

        // Create domain keystore with two non-empty parts:
        //
        final Path dksWithTwoPartsPath = Path.of(""two-parts.dks"");
        
        final var twoPartsConfiguration = """"""
                        domain Combo {
                            keystore a
                                keystoreURI=""%s"";
                        
                            keystore b
                                keystoreURI=""%s"";
                        };
                        """""";
        
        Files.writeString(dksWithTwoPartsPath, String.format(twoPartsConfiguration, nonEmptyPath.toUri(), nonEmptyPath.toUri()));
        
        
        final Map<String,KeyStore.ProtectionParameter> protectionParameters = new LinkedHashMap<>();
        
        final KeyStore dksKeystore = KeyStore.getInstance(""DKS"");
        dksKeystore.load(new DomainLoadStoreParameter(dksWithTwoPartsPath.toUri(), protectionParameters));

        System.out.println(String.format(""%s size: %d"", dksWithTwoPartsPath, dksKeystore.size()));
        int index = 0;
        
        for (final Enumeration<String> enumeration = dksKeystore.aliases(); enumeration.hasMoreElements(); ) {
            System.out.println(String.format(""%d: %s"", index, enumeration.nextElement()));
            index++;
        }
        
        System.out.println(String.format(""enumerated aliases from %s: %d"", dksWithTwoPartsPath, index));
        

        // Create domain keystore with two non-empty parts with an empty one in between:
        //
        final Path dksWithThreePartsPath = Path.of(""three-parts.dks"");
        
        final var fmt = """"""
                        domain Combo {
                            keystore a
                                keystoreURI=""%s"";
                        
                            keystore b
                                keystoreURI=""%s"";
                        
                            keystore c
                                keystoreURI=""%s"";
                        };
                        """""";
        
        Files.writeString(dksWithThreePartsPath, String.format(fmt, nonEmptyPath.toUri(), emptyPath.toUri(), nonEmptyPath.toUri()));
        dksKeystore.load(new DomainLoadStoreParameter(dksWithThreePartsPath.toUri(), protectionParameters));
        
        System.out.println(String.format(""%s size: %d"", dksWithThreePartsPath, dksKeystore.size()));
        index = 0;
        
        for (final Enumeration<String> enumeration = dksKeystore.aliases(); enumeration.hasMoreElements(); ) {
            System.out.println(String.format(""%d: %s"", index, enumeration.nextElement()));
            index++;
        }
        
        System.out.println(String.format(""enumerated aliases from %s: %d"", dksWithThreePartsPath, index));
    }
}

---------- END SOURCE ----------

CUSTOMER SUBMITTED WORKAROUND :
Avoid using empty KeyStores as parts of a DomainKeyStore. 

FREQUENCY : always


",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"2021-04-22 06:41;tongwan;DksProblem.java;https://bugs.openjdk.org/secure/attachment/94348/DksProblem.java",,,,,,,,,,,,,,,,,,,,,,,,,"0|i2si8j:",9223372036854775807,b10,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@2ec284e3,,,,,,,Verified,,"2021-04-22 06:40;tongwan;The observations on Windows 10:
JDK 11: Failed, return only the aliases of KeyStore ""a""
JDK 16: Failed.
JDK 17ea+6: Failed.
;;;","2022-02-08 09:18;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/7386
Date: 2022-02-08 17:13:53 +0000;;;","2022-02-09 08:55;roboduke;Changeset: 178b962e
Author:    Hai-May Chao <hchao@openjdk.org>
Date:      2022-02-09 16:53:48 +0000
URL:       https://git.openjdk.java.net/jdk/commit/178b962e01cc6c150442bf41dc6bd199caff0042
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Font with missed font family name is not properly printed on Windows,JDK-8265761,5047679,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,alexsch,alexsch,alexsch,2021-04-22 06:22,2022-06-27 10:12,2023-10-01 09:57,2021-04-30 01:47,,,,,,,,17,client-libs,,0,jdk11u-fix-request,jdk11u-fix-yes,PDFBox-found,,,,,,,,,,,"PDFBox 1.8 uses scaled glyphs to print a text [1] and PDFBox 2.0 draws a text by drawing its path [2].

Recent fix to PDFBox allows to pass a custom PDFRenderer  to PDFPrintable [3]  so it is possible to override PDFBox PageDrawer.showGlyph(...) method and use Graphics2D.drawString(...) method to draw a text.

Some tests showed that there is a pdf document which prints all but one font properly using Graphics2D.drawString(...) method on Windows. This pdf doc is properly printed by PDFBox 1.8 and 2.0.

The issue is not reproduced on Linux. The pdf document in question is properly printed by PDFBox 1.8, 2.0, and PDFBox with custom Graphics2D.drawString(...) method on Ubuntu 20.04.

Further investigations showed that the font which is not properly printed with Graphics2D.drawString(...) method has an empty font name.

To reproduce the issue I created a simple test font which contains only capital letters ""ABCDEF"" and saved it with empty font family name (see attached fonts SampleBow.ttf and SampleBowMissedFamilyName.ttf).

Run the code below with the provided font which has an empty font name:
> java PrintFontSample SampleBowMissedFamilyName.ttf

The sample prints the text with the provided font using 3 ways:
- Graphics2D.drawString(...)
- Graphics2D.drawGlyphVector(...)
- Graphics2D.drawGlyphVector(...) using transformed glyphs

The first and the second methods use GDI TextOut method to print a text and the third method draws a text as a Path in GDI.

The attached  sample-doc-without-fix.pdf doc shows how the sample is printed using jdk 16. The first and the second lines are printed with thin lines and only the third line is printed by the provided font.

The reason is that an empty string is provided as a family font name to awt_PrintJob.jFontToWFontA(...) method [4] and the expected font is not selected in GDI.

The proposed solution could be to return false when an empty family font name is passed to awt_PrintJob.jFontToWFontA(...) method so the text printing falls back to using GDI print Path method.


[1] https://github.com/apache/pdfbox/blob/41ae21bd4c3f304373d3b05f63af5325df248019/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/font/PDSimpleFont.java#L352

[2] https://github.com/apache/pdfbox/blob/4f14dee47ff821e44d9e2ff11532959d95e94d5b/pdfbox/src/main/java/org/apache/pdfbox/rendering/PageDrawer.java#L512

[3] https://github.com/apache/pdfbox/commit/7d9f08516c6c9967351f426bbb9d4b6104257835#diff-fea229ecdbc8fbc77551966810d22ce23a3d993e2df3d70c281eefc44fdf65f6

[4] https://github.com/openjdk/jdk/blob/e16d568c1f5d7030b9e038e21fb3815ae5b1163a/src/java.desktop/windows/native/libawt/windows/awt_PrintJob.cpp#L2264

--- PrintFontSample.java ---

import javax.print.PrintServiceLookup;
import javax.swing.*;
import java.awt.*;
import java.awt.font.FontRenderContext;
import java.awt.font.GlyphVector;
import java.awt.geom.AffineTransform;
import java.awt.print.PageFormat;
import java.awt.print.Printable;
import java.awt.print.PrinterJob;
import java.io.File;

public class PrintFontSample {

    private static final String TEXT = ""ABCDEF"";
    private static final float FONT_SIZE = 43;

    public static void main(String[] args) throws Exception {

        if (args.length < 1) {
            System.err.printf(""Provide path to the font file:%n"");
            System.err.printf(""  > PrintFontSample SampleBowMissedFamilyName.ttf%n"");
            System.exit(1);
        }

        File fontFile = new File(args[0]);
        if (!fontFile.exists()) {
            System.err.printf(""Provided font file does not exist: %s%n"", args[0]);
            System.exit(1);
        }

        final Font font = Font
                .createFont(Font.TRUETYPE_FONT, fontFile)
                .deriveFont(FONT_SIZE);

        SwingUtilities.invokeAndWait(() -> {
            try {
                Printable printable = new PrintSample(font);
                PrinterJob job = PrinterJob.getPrinterJob();
                job.setPrintService(PrintServiceLookup.lookupDefaultPrintService());
                job.setPrintable(printable);
                job.print();
            } catch (Exception e) {
                throw new RuntimeException(e);
            }
        });
    }

    static class PrintSample implements Printable {

        private final Font font;

        public PrintSample(Font font) {
            this.font = font;
        }

        @Override
        public int print(Graphics graphics, PageFormat pageFormat, int index) {
            if (index == 0) {
                drawText((Graphics2D) graphics, font, TEXT, 100, 150);
                return PAGE_EXISTS;
            } else {
                return NO_SUCH_PAGE;
            }
        }
    }

    private static void drawText(Graphics2D g, Font font, String text, int x, int y) {

        int dy = (int) FONT_SIZE + 5;

        g.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);
        int fontSize = font.getSize();

        // draw string
        g.setFont(font);
        g.drawString(text, x, y);

        // draw GlyphVector
        FontRenderContext frc = new FontRenderContext(new AffineTransform(), true, true);
        GlyphVector glyphs = font.createGlyphVector(frc, text);
        g.drawGlyphVector(glyphs, x, y + dy);

        // draw scaled GlyphVector
        glyphs = font.deriveFont(1.0f).createGlyphVector(frc, text);

        AffineTransform scale = AffineTransform.getScaleInstance(fontSize, fontSize);
        for (int i = 0; i < glyphs.getNumGlyphs(); i++) {
            glyphs.setGlyphTransform(i, scale);
        }

        g.drawGlyphVector(glyphs, x, y + 2 * dy);
    }
}
--- --- --- ",,,,,,,,,,,JDK-8270525,JDK-8269479,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"2021-04-22 06:27;alexsch;PrintFontSample-1.java;https://bugs.openjdk.org/secure/attachment/94346/PrintFontSample-1.java","2021-04-22 06:26;alexsch;PrintFontSample.java;https://bugs.openjdk.org/secure/attachment/94343/PrintFontSample.java","2021-04-22 06:28;alexsch;SampleBow.ttf;https://bugs.openjdk.org/secure/attachment/94347/SampleBow.ttf","2021-04-22 06:26;alexsch;SampleBowMissedFamilyName.ttf;https://bugs.openjdk.org/secure/attachment/94344/SampleBowMissedFamilyName.ttf","2021-04-26 12:47;alexsch;SampleBowOneSpaceFamilyName.ttf;https://bugs.openjdk.org/secure/attachment/94402/SampleBowOneSpaceFamilyName.ttf","2021-04-26 12:47;alexsch;SampleBowTwoSpacesFamilyName.ttf;https://bugs.openjdk.org/secure/attachment/94403/SampleBowTwoSpacesFamilyName.ttf","2021-04-22 06:45;alexsch;sample-doc-with-fix.pdf;https://bugs.openjdk.org/secure/attachment/94349/sample-doc-with-fix.pdf","2021-04-22 06:27;alexsch;sample-doc-without-fix.pdf;https://bugs.openjdk.org/secure/attachment/94345/sample-doc-without-fix.pdf",,,,generic,,,,,,,,,windows,,,,,"0|i2sigb:",9223372036854775807,b21,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4b09ce31,,,,,,,,,"2021-04-30 01:47;roboduke;Changeset: e9370a13
Author:    Alexander Scherbatiy <alexsch@openjdk.org>
Date:      2021-04-30 08:46:58 +0000
URL:       https://git.openjdk.java.net/jdk/commit/e9370a13b6f3f99d223ef5966f9e218b94d954b4
;;;","2021-06-24 05:00;alexsch;Fix request (11u)

This is the request to backport the fix to jdk 11u.
The patch applies cleanly to jdk11u-dev repository:
https://github.com/openjdk/jdk/commit/e9370a13b6f3f99d223ef5966f9e218b94d954b4.patch

The java/awt/print and java/awt/PrintJob automated and manual tests were run with the fix.

The automated tests pass.
The following manual tests fail with and without the fix:

Parse Exception: Arguments to manual option not supported: yesno:
java/awt/print/Dialog/DialogOrient.java Error. Parse Exception: Arguments to `manual' option not supported: yesno
java/awt/print/Dialog/DialogType.java Error. Parse Exception: Arguments to `manual' option not supported: yesno
java/awt/print/PrinterJob/ImagePrinting/ClippedImages.java Error. Parse Exception: Arguments to `manual' option not supported: yesno
java/awt/print/PrinterJob/ImagePrinting/ImageTypes.java Error. Parse Exception: Arguments to `manual' option not supported: yesno
java/awt/print/PrinterJob/ImagePrinting/PrintARGBImage.java Error. Parse Exception: Arguments to `manual' option not supported: yesno
java/awt/print/PrinterJob/PageDialogTest.java Error. Parse Exception: Arguments to `manual' option not supported: yesno
java/awt/print/PrinterJob/PageRanges.java Error. Parse Exception: Arguments to `manual' option not supported: yesno
java/awt/print/PrinterJob/PageRangesDlgTest.java Error. Parse Exception: Arguments to `manual' option not supported: yesno
java/awt/print/PrinterJob/PrintGlyphVectorTest.java Error. Parse Exception: Arguments to `manual' option not supported: yesno
java/awt/print/PrinterJob/PrintLatinCJKTest.java Error. Parse Exception: Arguments to `manual' option not supported: yesno
java/awt/print/PrinterJob/PrintTextTest.java Error. Parse Exception: Arguments to `manual' option not supported: yesno
java/awt/print/PrinterJob/SwingUIText.java Error. Parse Exception: Arguments to `manual' option not supported: yesno
java/awt/PrintJob/ConstrainedPrintingTest/ConstrainedPrintingTest.java Error. Parse Exception: Arguments to `manual' option not supported: yesno
java/awt/PrintJob/PageSetupDlgBlockingTest/PageSetupDlgBlockingTest.java Error. Parse Exception: Arguments to `manual' option not supported: yesno
java/awt/PrintJob/SaveDialogTitleTest.java Error. Parse Exception: Arguments to `manual' option not supported: yesno

Cannot access a member of class:
java/awt/print/Dialog/PrintDlgApp.java Error. java.lang.IllegalAccessException: class com.sun.javatest.regtest.agent.MainWrapper$MainThread cannot access a member of class PrintDlgApp with modifiers ""public static""
java/awt/print/Dialog/PrintDlgPageable.java Error. java.lang.IllegalAccessException: class com.sun.javatest.regtest.agent.MainWrapper$MainThread cannot access a member of class PrintDlgPageable with modifiers ""public static""

Can't find HTML file:
java/awt/PrintJob/PrintCheckboxTest/PrintCheckboxManualTest.java Error. Can't find HTML file: C:\Development\github\alexsch\jdk11u-dev-print\test\jdk\java\awt\PrintJob\PrintCheckboxTest\PrintCheckboxManualTest.html

Does not have buttons on test dialog (pass, fail, ...)
java/awt/print/PrinterJob/SecurityDialogTest.java
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Memory segments/addresses should have an isNative predicate,JDK-8265760,5047678,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,mcimadamore,mcimadamore,mcimadamore,2021-04-22 06:08,2021-04-23 10:39,2023-10-01 09:57,2021-04-23 10:39,repo-panama,,,,,,,,tools,,0,foreign-memaccess,,,,,,,,,,,,,There is currently no way to tell a native memory segment/address from an heap one.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2sig3:",9223372036854775807,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@2251e2f8,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Shenandoah: Avoid race for referent in assert,JDK-8265759,5047676,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,rkennke,zgu,zgu,2021-04-22 05:58,2021-04-28 17:39,2023-10-01 09:57,2021-04-23 01:02,16,17,,,,,,17,hotspot,,0,gc-shenandoah,redhat-interest,,,,,,,,,,,,"The test failed on 4/21 nightly.

#Internal Error (/home/jenkins/workspace/nightly/jdk-jdk/src/hotspot/share/gc/shenandoah/shenandoahMarkBitMap.cpp:127), pid=34215, tid=35276
#  assert(ShenandoahHeap::heap()->is_in(addr)) failed: Trying to access bitmap 0x00007f20bc0902d8 for address 0x0000000000000000 not in the heap.
#
# JRE version: OpenJDK Runtime Environment (17.0) (fastdebug build 17-internal+0-adhoc.jenkins.jdk-jdk)
# Java VM: OpenJDK 64-Bit Server VM (fastdebug 17-internal+0-adhoc.jenkins.jdk-jdk, mixed mode, tiered, compressed oops, compressed class ptrs, shenandoah gc, linux-amd64)
# Problematic frame:
# V  [libjvm.so+0x164190a]  ShenandoahMarkBitMap::check_mark(HeapWordImpl**) const+0x7a
#",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"2021-04-22 05:58;zgu;hs_err_pid34215.log;https://bugs.openjdk.org/secure/attachment/94342/hs_err_pid34215.log",,,,,,,,,,,,,,,,,,,,,,,,,"0|i2sifn:",9223372036854775807,b20,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6b00f96c,,,,,,,,,"2021-04-23 01:02;roboduke;Changeset: 191f1fc4
Author:    Roman Kennke <rkennke@openjdk.org>
Date:      2021-04-23 08:01:36 +0000
URL:       https://git.openjdk.java.net/jdk/commit/191f1fc4
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
[TestBug] Remove ignored unit test from CustomMenuItemTest,JDK-8265758,5047674,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,aghaisas,aghaisas,aghaisas,2021-04-22 05:49,2022-11-10 15:42,2023-10-01 09:57,2021-04-22 09:31,jfx17,,,,,,,jfx17,javafx,,0,sn_91,test_sprint,testbug,,,,,,,,,,,There is only a single ignored unit test in CustomMenuItemTest. It can be removed.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8234486,,,,,,,,,,,,,,,generic,,,,,,,,,generic,,,,,"0|i2sif7:",9223372036854775807,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@67282485,,,,,,,,,"2021-04-22 09:31;roboduke;Changeset: dffdc6fd
Author:    Ajit Ghaisas <aghaisas@openjdk.org>
Date:      2021-04-22 16:30:23 +0000
URL:       https://git.openjdk.java.net/jfx/commit/dffdc6fd
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
stack-use-after-scope in perfMemory_posix.cpp get_user_name_slow(),JDK-8265757,5047672,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,hseigel,vprovodin,vprovodin,2021-04-22 05:10,2021-05-03 20:21,2023-10-01 09:57,2021-04-27 05:08,,,,,,,,17,hotspot,,0,,,,,,,,,,,,,,"Address Sanitizer detected the following when running serviceability/dcmd/framework/VMVersionTest.java:

 6339 ==3480302==ERROR: AddressSanitizer: stack-use-after-scope on address 0x7f7952e18480 at pc 0x7f795d0a141d bp 0x7f7952e18210 sp 0x7f7952e179b8
 6340 READ of size 23 at 0x7f7952e18480 thread T1                                                                   
 6341     #0 0x7f795d0a141c  (/lib/x86_64-linux-gnu/libasan.so.5+0x4f41c)                                           
 6342     #1 0x7f7957687d3f in get_user_name_slow /home/jb/work/jbr-dev/src/hotspot/os/posix/perfMemory_posix.cpp:550
 6343     #2 0x7f795768cb31 in get_user_name_slow /home/jb/work/jbr-dev/src/hotspot/share/memory/resourceArea.hpp:99
 6344     #3 0x7f795768cb31 in get_user_name /home/jb/work/jbr-dev/src/hotspot/os/posix/perfMemory_posix.cpp:661    
 6345     #4 0x7f795768cb31 in mmap_attach_shared /home/jb/work/jbr-dev/src/hotspot/os/posix/perfMemory_posix.cpp:1133
 6346     #5 0x7f795766c983 in Perf_Attach /home/jb/work/jbr-dev/src/hotspot/share/prims/perf.cpp:89                
 6347     #6 0x7f793b111ba7  (<unknown module>)                                                                     
 6348                                                                                                               
 6349 Address 0x7f7952e18480 is located in stack of thread T1 at offset 496 in frame                                
 6350     #0 0x7f7957687b8f in get_user_name_slow /home/jb/work/jbr-dev/src/hotspot/os/posix/perfMemory_posix.cpp:514
 6351                                                                                                               
 6352   This frame has 4 object(s):                                                                                 
 6353     [48, 56) 'remainder' (line 191)                                                                           
 6354     [80, 224) 'statbuf' (line 603)                                                                            
 6355     [288, 432) 'statbuf' (line 248)                                                                           
 6356     [496, 4593) 'buffer' (line 540) <== Memory access at offset 496 is inside this variable        


The bug is in get_user_name_slow()(src/hotspot/os/posix/perfMemory_posix.cpp): on Linux, the 'buffer' array may be used after going out of scope.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8266087,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2sier:",9223372036854775807,b20,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,,,"2021-04-22 05:26;dholmes;  } else {
    char buffer[MAXPATHLEN + 1];
    jio_snprintf(buffer, MAXPATHLEN, ""/proc/%d/root%s"", vmid, tmpdirname);
    tmpdirname = buffer;  <<<<< local buffer escapes here!
    searchpid = nspid;
  }
;;;","2021-04-27 05:08;roboduke;Changeset: 879a77f1
Author:    Harold Seigel <hseigel@openjdk.org>
Date:      2021-04-27 12:07:40 +0000
URL:       https://git.openjdk.java.net/jdk/commit/879a77f1
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
AArch64: initialize memory allocated for locals according to Windows AArch64 stack page growth requirement in template interpreter,JDK-8265756,5047671,Bug,Resolved,JDK,JDK,software,duke,,,P2,Fixed,avoitylov,avoitylov,avoitylov,2021-04-22 05:01,2021-08-24 05:45,2023-10-01 09:57,2021-04-27 04:18,16,17,,,,,,17,hotspot,,0,hs-comp-triaged,jdk11u-fix-request,jdk11u-fix-yes,oraclejdk-na,oracle-triage-17,rt-other,,,,,,,,"Windows AArch64 port introduced in JDK 16 does not pass the following JCK tests:

vm/instr/aload_w/aload_w001/aload_w00102m1/aload_w00102m1.html 
vm/instr/aload_w/aload_w001/aload_w00102m1t/aload_w00102m1t.html 
vm/instr/astore_w/astore_w004/astore_w00401m1/astore_w00401m1.html 
vm/instr/astore_w/astore_w004/astore_w00401m1t/astore_w00401m1t.html 
vm/instr/dload_w/dload_w001/dload_w00101m1/dload_w00101m1.html 
vm/instr/dload_w/dload_w001/dload_w00101m1t/dload_w00101m1t.html 
vm/instr/dstore_w/dstore_w005/dstore_w00501m1/dstore_w00501m1.html 
vm/instr/dstore_w/dstore_w005/dstore_w00501m1t/dstore_w00501m1t.html 
vm/instr/fload_w/fload_w003/fload_w00302m1/fload_w00302m1.html 
vm/instr/fload_w/fload_w003/fload_w00302m1t/fload_w00302m1t.html 
vm/instr/fstore_w/fstore_w005/fstore_w00502m1/fstore_w00502m1.html 
vm/instr/fstore_w/fstore_w005/fstore_w00502m1t/fstore_w00502m1t.html 
vm/instr/iload_w/iload_w003/iload_w00310m1/iload_w00310m1.html 
vm/instr/iload_w/iload_w003/iload_w00310m1t/iload_w00310m1t.html 
vm/instr/istore_w/istore_w005/istore_w00510m1/istore_w00510m1.html 
vm/instr/lload_w/lload_w003/lload_w00310m1/lload_w00310m1.html 
vm/instr/lstore_w/lstore_w005/lstore_w00510m1/lstore_w00510m1.html 
vm/instr/ret_w/ret_w002/ret_w00210m1/ret_w00210m1.html 
vm/instr/wide/wide002/wide00201m1/wide00201m1.html 
vm/instr/wide/wide002/wide00201m1t/wide00201m1t.html 

In case the interpreter calls a method with a large enough number of locals on windows-aarch64, a crash is hit. The root cause is that it allocates space for them on the stack, clears this memory and touches the corresponding memory pages. On linux-aarch64 and macosx-aarch64, the handler in the operating system does not look at the order of page initialization, but in windows-aarch64 it does. The stack grows from high to low addresses and zeroing occurs in the opposite direction - from the lowest to the highest.

More details here: https://docs.microsoft.com/en-us/cpp/build/arm64-windows-abi-conventions?view=msvc-160#stack

The suggested fix is to reverse the direction of zeroing.",,,,,,,,,,,JDK-8269392,JDK-8269391,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"2021-04-22 05:02;avoitylov;lvt_v4.patch;https://bugs.openjdk.org/secure/attachment/94340/lvt_v4.patch",,,,,,,,,,,aarch64,,,,,,,,,windows,,,,,"0|i2siej:",9223372036854775807,b20,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,,,"2021-04-22 05:02;avoitylov;Tentative fix being tested attached.;;;","2021-04-27 04:18;roboduke;Changeset: f6e26f6f
Author:    Aleksei Voitylov <avoitylov@openjdk.org>
Committer: Andrew Dinn <adinn@openjdk.org>
Date:      2021-04-27 11:17:28 +0000
URL:       https://git.openjdk.java.net/jdk/commit/f6e26f6f
;;;","2021-04-29 01:14;thartmann;Moved this to hotspot/runtime.;;;","2021-05-07 03:29;vkempik;Backport to jdk11u might be needed once win-aarch64 will be integrated there ( its WiP);;;","2021-08-23 09:22;phh;Fix Request (11u).

Clean backport.
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
MemoryAddress should have a scope accessor,JDK-8265751,5047667,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,mcimadamore,mcimadamore,mcimadamore,2021-04-22 04:27,2021-04-24 07:41,2023-10-01 09:57,2021-04-24 07:41,repo-panama,,,,,,,,tools,,0,foreign-memaccess,,,,,,,,,,,,,"Following recent API changes, it seems natural for MemoryAddress to expose a scope() accessor - this would make the API more regular.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2sidn:",9223372036854775807,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@2251e2f8,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Fatal error in safepoint.cpp after backport of 8258414,JDK-8265750,5047666,Bug,Resolved,JDK,JDK,software,duke,,,P2,Fixed,jbachorik,stuefe,stuefe,2021-04-22 03:59,2021-05-05 05:26,2023-10-01 09:57,2021-04-28 08:48,11.0.12,,,,,,,11.0.12,hotspot,,0,16-na,17-na,jdk11u-fix-request,jdk11u-fix-yes,,,,,,,,,,"We see a fatal error in jfr\startupargs\TestOldObjectQueueSize on Win x64 which I assume is caused by 8258414. 

At the moment we only have tests for release builds due to the broken debug builds, so I do not know if this would manifest in different asserts elsewhere.

#
# A fatal error has been detected by the Java Runtime Environment:
#
#  Internal Error (./src/hotspot/share/runtime/safepoint.cpp:894), pid=11412, tid=12932
#  fatal error: Deadlock in safepoint code.  Should have called back to the VM before blocking.
#
# JRE version: OpenJDK Runtime Environment (11.0.12) (build 11.0.12-internal+0-adhoc.openjdk.jdk11u-dev)
# Java VM: OpenJDK 64-Bit Server VM (11.0.12-internal+0-adhoc.openjdk.jdk11u-dev, mixed mode, tiered, compressed oops, g1 gc, windows-amd64)
# Core dump will be written. Default location: C:\jvmtests\output_openjdk11_dev_optU_ntamd64\jtreg_jdk_jdk_work\JTwork\jdk\jfr\startupargs\TestOldObjectQueueSize\hs_err_pid11412.mdmp
#
# If you would like to submit a bug report, please visit:
#   https://bugreport.java.com/bugreport/crash.jsp
#

Stack: [0x00000018ad600000,0x00000018ad700000]
Native frames: (J=compiled Java code, j=interpreted, Vv=VM code, C=native code)
V  [jvm.dll+0x5f9f9a]  os::platform_print_native_stack+0xca  (os_windows_x86.cpp:369)
V  [jvm.dll+0x73344e]  VMError::report+0xbce  (vmerror.cpp:709)
V  [jvm.dll+0x734b1f]  VMError::report_and_die+0x7df  (vmerror.cpp:1510)
V  [jvm.dll+0x735197]  VMError::report_and_die+0x47  (vmerror.cpp:1296)
V  [jvm.dll+0x247c64]  report_fatal+0x64  (debug.cpp:268)
V  [jvm.dll+0x65e30b]  SafepointSynchronize::block+0x14b  (safepoint.cpp:893)
V  [jvm.dll+0x101d44]  SafepointMechanism::block_if_requested+0x34  (safepointmechanism.inline.hpp:73)
V  [jvm.dll+0x6f0d9a]  JavaThread::check_safepoint_and_suspend_for_native_trans+0xca  (thread.cpp:2508)
V  [jvm.dll+0x5e3175]  ObjectSampleCheckpoint::on_rotation+0xa5  (objectsamplecheckpoint.cpp:301)
V  [jvm.dll+0x397694]  JfrRecorderService::pre_safepoint_write+0x64  (jfrrecorderservice.cpp:428)
V  [jvm.dll+0x3978a4]  JfrRecorderService::rotate+0x194  (jfrrecorderservice.cpp:325)
V  [jvm.dll+0x398324]  recorderthread_entry+0xd4  (jfrrecorderthreadloop.cpp:76)
V  [jvm.dll+0x6f7649]  JavaThread::run+0x139  (thread.cpp:1840)
V  [jvm.dll+0x6f06b4]  Thread::call_run+0x84  (thread.cpp:391)
V  [jvm.dll+0x5f8e36]  thread_native_entry+0xd6  (os_windows.cpp:460)
C  [ucrtbase.dll+0x1fb80]
C  [KERNEL32.DLL+0x84d4]
C  [ntdll.dll+0x51821]",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8258414,,,,JDK-8265718,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2sidf:",9223372036854775807,b01,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@42995637,,,,,,,,,"2021-04-23 09:22;sgehwolf;[~stuefe] Is this a JDK 11-only problem or do you see this in JDK 17 too?;;;","2021-04-23 10:53;stuefe;Its JDK 11 specific. ;;;","2021-04-23 11:11;sgehwolf;Thanks, Thomas!;;;","2021-04-26 05:16;sgehwolf;The plan is to revert JDK-8258414 and JDK-8265718 in OpenJDK 11.0.12. Adding a link to JDK-8265718.;;;","2021-04-27 12:57;clanger;Review approval: https://mail.openjdk.java.net/pipermail/jdk-updates-dev/2021-April/005977.html;;;","2021-04-28 08:48;hgupdate;URL:   https://hg.openjdk.java.net/jdk-updates/jdk11u-dev/rev/afa3d3646bda
User:  jbachorik
Date:  2021-04-28 15:48:09 +0000
;;;","2021-05-05 05:16;hgupdate;URL:   https://hg.openjdk.java.net/jdk-updates/jdk11u/rev/afa3d3646bda
User:  goetz
Date:  2021-05-05 12:03:09 +0000
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,
"[lworld] C2 compilation fails with ""Not a Long"" assert during matching",JDK-8265748,5047664,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,thartmann,thartmann,thartmann,2021-04-22 03:51,2021-04-22 05:30,2023-10-01 09:57,2021-04-22 05:30,repo-valhalla,,,,,,,repo-valhalla,hotspot,,0,c2,lw3,lworld,,,,,,,,,,,"After merging JDK-8262355 in, we hit the following assert on machines supporting AVX 3:

# A fatal error has been detected by the Java Runtime Environment:
#
#  Internal Error (t:\workspace\open\src\hotspot\share\opto/type.hpp:1775), pid=6312, tid=9680
#  assert(_base == Long) failed: Not a Long

Current CompileTask:
C2:    399   28    b        jdk.internal.module.Builder::newExports (11 bytes)

Stack: [0x0000006fae800000,0x0000006fae900000]
Native frames: (J=compiled Java code, j=interpreted, Vv=VM code, C=native code)
V  [jvm.dll+0xb35b91]  os::platform_print_native_stack+0xf1  (os_windows_x86.cpp:235)
V  [jvm.dll+0xd77cb7]  VMError::report+0xfc7  (vmError.cpp:739)
V  [jvm.dll+0xd7963e]  VMError::report_and_die+0x7fe  (vmError.cpp:1549)
V  [jvm.dll+0xd79d54]  VMError::report_and_die+0x64  (vmError.cpp:1330)
V  [jvm.dll+0x4ef727]  report_vm_error+0xb7  (debug.cpp:282)
V  [jvm.dll+0x1e284]  TypeLong::as_self+0x34  (type.hpp:710)
V  [jvm.dll+0x52bde6]  State::_sub_Op_ClearArray+0xa6  (dfa_x86.cpp:3786)
V  [jvm.dll+0x516815]  State::DFA+0xf85  (dfa_x86.cpp:17815)
V  [jvm.dll+0xa6d68d]  Matcher::Label_Root+0x77d  (matcher.cpp:1718)
V  [jvm.dll+0xa74941]  Matcher::match_tree+0x241  (matcher.cpp:1522)
V  [jvm.dll+0xa7751d]  Matcher::xform+0x56d  (matcher.cpp:1127)
V  [jvm.dll+0xa72e85]  Matcher::match+0x9f5  (matcher.cpp:389)
V  [jvm.dll+0x4a048c]  Compile::Code_Gen+0xac  (compile.cpp:3197)
V  [jvm.dll+0x49f49a]  Compile::Compile+0x169a  (compile.cpp:839)
V  [jvm.dll+0x3c847c]  C2Compiler::compile_method+0x10c  (c2compiler.cpp:106)
V  [jvm.dll+0x4bbeee]  CompileBroker::invoke_compiler_on_method+0x94e  (compileBroker.cpp:2310)
V  [jvm.dll+0x4b9517]  CompileBroker::compiler_thread_loop+0x2b7  (compileBroker.cpp:1984)
V  [jvm.dll+0xd00567]  JavaThread::thread_main_inner+0x1f7  (thread.cpp:1465)
V  [jvm.dll+0xcf7014]  Thread::call_run+0x1b4  (thread.cpp:414)
V  [jvm.dll+0xb344ee]  thread_native_entry+0xae  (os_windows.cpp:552)
C  [ucrtbase.dll+0x1fb80]
C  [KERNEL32.DLL+0x84d4]
C  [ntdll.dll+0x51781]",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2sicz:",9223372036854775807,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
"[lworld] C2 compilation fails with assert ""uses must be dominated by definitions""",JDK-8265726,5047640,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,thartmann,thartmann,thartmann,2021-04-22 00:24,2021-07-29 23:55,2023-10-01 09:57,2021-04-26 04:11,repo-valhalla,,,,,,,repo-valhalla,hotspot,,0,c2,lw3,lworld,,,,,,,,,,,"# A fatal error has been detected by the Java Runtime Environment:
#
#  Internal Error (/oracle/valhalla2/open/src/hotspot/share/opto/block.cpp:1264), pid=627247, tid=627255
#  assert(n->is_Root() || n->is_Region() || n->is_Phi() || n->is_MachMerge() || def_block->dominates(block)) failed: uses must be dominated by definitions

Current CompileTask:
C2:   6863 1896    b  4       java.lang.invoke.LambdaForm$MH/0x0000000800001000::invokeExact_MT (32 bytes)

Stack: [0x00007f1b99a36000,0x00007f1b99b37000],  sp=0x00007f1b99b32220,  free space=1008k
Native frames: (J=compiled Java code, A=aot compiled Java code, j=interpreted, Vv=VM code, C=native code)
V  [libjvm.so+0x6e1cb5]  PhaseCFG::verify() const+0x405
V  [libjvm.so+0xa7239f]  Compile::Code_Gen()+0x2af
V  [libjvm.so+0xa7c7d6]  Compile::Compile(ciEnv*, ciMethod*, int, bool, bool, bool, bool, DirectiveSet*)+0x23d6
V  [libjvm.so+0x8858a8]  C2Compiler::compile_method(ciEnv*, ciMethod*, int, bool, DirectiveSet*)+0x1f8
V  [libjvm.so+0xa8c381]  CompileBroker::invoke_compiler_on_method(CompileTask*)+0xc91
V  [libjvm.so+0xa8d0c8]  CompileBroker::compiler_thread_loop()+0x5a8
V  [libjvm.so+0x199b5d1]  JavaThread::thread_main_inner()+0x271
V  [libjvm.so+0x19a3410]  Thread::call_run()+0x100
V  [libjvm.so+0x164de4e]  thread_native_entry(Thread*)+0x10e

The assert was added by JDK-8263227 and is currently disabled due to this failure.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8263227,JDK-8231561,JDK-8271531,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2si7n:",9223372036854775807,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
[lworld] Fix code in synchronizer.cpp after the merge,JDK-8265725,5047638,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,dsimms,thartmann,thartmann,2021-04-22 00:16,2021-05-04 02:24,2023-10-01 09:57,2021-05-04 02:24,repo-valhalla,,,,,,,repo-valhalla,hotspot,,0,lw3,lworld,,,,,,,,,,,,"The code marked with
// TODO The THREAD declarations below should be removed
in synchronizer.cpp should be fixed after the merge.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2si77:",9223372036854775807,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,,,"2021-05-04 02:21;dsimms;THREAD_AND_LOCATION macro make expansion to function more trouble than it is worth, leaving it as macro (so ""THREAD"" is still needed);;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
[lworld] RedefineLeak.java is still problem listed,JDK-8265720,5047631,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,dsimms,thartmann,thartmann,2021-04-21 23:28,2021-05-04 00:38,2023-10-01 09:57,2021-05-04 00:38,repo-valhalla,,,,,,,repo-valhalla,hotspot,,0,lw3,lworld,,,,,,,,,,,,RedefineLeak.java is problem listed although JDK-8205032 has been fixed.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8205032,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2si5n:",9223372036854775807,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
[lworld] CDS tests fail after the merge with master,JDK-8265719,5047630,Bug,Resolved,JDK,JDK,software,duke,,,P2,Fixed,dsimms,thartmann,thartmann,2021-04-21 23:17,2021-05-04 08:04,2023-10-01 09:57,2021-05-04 08:04,repo-valhalla,,,,,,,repo-valhalla,hotspot,,0,cds,lw3,lworld,,,,,,,,,,,"[0.280s][info][cds] Core region alignment: 4096
[0.453s][info][cds] Loading classes to share ...
Error occurred during initialization of VM
class list format error.
];
 stderr: [Currently specified interfaces[0] = {
}
Actual interfaces[1] = {
  java.lang.IdentityObject
}

The following tests are affected and will be problem listed:

runtime/cds/appcds/cacheObject/CheckCachedMirrorTest.java 8265719 generic-all
runtime/cds/appcds/cacheObject/CheckCachedResolvedReferences.java 8265719 generic-all
runtime/cds/appcds/customLoader/ClassListFormatA.java 8265719 generic-all
runtime/cds/appcds/customLoader/ClassListFormatD.java 8265719 generic-all
runtime/cds/appcds/customLoader/ClassListFormatE.java 8265719 generic-all
runtime/cds/appcds/customLoader/HelloCustom.java 8265719 generic-all
runtime/cds/appcds/customLoader/HelloCustom_JFR.java 8265719 generic-all
runtime/cds/appcds/customLoader/LoaderSegregationTest.java 8265719 generic-all
runtime/cds/appcds/customLoader/ParallelTestMultiFP.java 8265719 generic-all
runtime/cds/appcds/customLoader/ParallelTestSingleFP.java 8265719 generic-all
runtime/cds/appcds/customLoader/PrintSharedArchiveAndExit.java 8265719 generic-all
runtime/cds/appcds/customLoader/ProtectionDomain.java 8265719 generic-all
runtime/cds/appcds/customLoader/SameNameInTwoLoadersTest.java 8265719 generic-all
runtime/cds/appcds/customLoader/UnintendedLoadersTest.java 8265719 generic-all
runtime/cds/appcds/customLoader/UnloadUnregisteredLoaderTest.java 8265719 generic-all
runtime/cds/appcds/jvmti/transformRelatedClasses/TransformInterfaceImplementorAppCDS.java 8265719 generic-all
runtime/cds/appcds/jvmti/transformRelatedClasses/TransformSuperSubAppCDS.java 8265719 generic-all

I've noticed that the tests that have been problem listed by JDK-8210258 (which is supposed to be fixed) are still problem listed:

runtime/CompressedOops/CompressedClassPointers.java 8210258 generic-all
runtime/SharedArchiveFile/BootAppendTests.java 8210258 generic-all
runtime/SharedArchiveFile/CdsDifferentCompactStrings.java 8210258 generic-all
runtime/SharedArchiveFile/CdsDifferentObjectAlignment.java 8210258 generic-all
runtime/SharedArchiveFile/NonBootLoaderClasses.java 8210258 generic-all
runtime/SharedArchiveFile/PrintSharedArchiveAndExit.java 8210258 generic-all
runtime/SharedArchiveFile/SharedArchiveFile.java 8210258 generic-all
runtime/SharedArchiveFile/SharedStringsDedup.java 8210258 generic-all
runtime/SharedArchiveFile/SharedStringsRunAuto.java 8210258 generic-all
runtime/SharedArchiveFile/SharedSymbolTableBucketSize.java 8210258 generic-all
runtime/SharedArchiveFile/SpaceUtilizationCheck.java 8210258 generic-all
runtime/SharedArchiveFile/TestInterpreterMethodEntries.java 8210258 generic-all
runtime/SharedArchiveFile/serviceability/transformRelatedClasses/TransformInterfaceAndImplementor.java 8210258 generic-all
runtime/SharedArchiveFile/serviceability/transformRelatedClasses/TransformSuperAndSubClasses.java 8210258 generic-all
runtime/SharedArchiveFile/serviceability/transformRelatedClasses/TransformSuperSubTwoPckgs.java 8210258 generic-all
runtime/appcds/ClassLoaderTest.java 8210258 generic-all
runtime/appcds/HelloTest.java 8210258 generic-all
runtime/appcds/sharedStrings/SharedStringsBasic.java 8210258 generic-all",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8266495,JDK-8210258,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2si5f:",9223372036854775807,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Build failure after JDK-8258414 11u backport,JDK-8265718,5047629,Bug,Resolved,JDK,JDK,software,duke,,,P1,Fixed,shade,shade,shade,2021-04-21 23:09,2021-05-05 05:28,2023-10-01 09:57,2021-04-22 01:59,11.0.12,,,,,,,11.0.12,hotspot,,0,jdk11u-fix-request,jdk11u-fix-yes,regression,,,,,,,,,,,"$ CONF=linux-x86_64-normal-server-fastdebug make images

=== Output from failing command(s) repeated here ===
* For target hotspot_variant-server_libjvm_objs_objectSampleCheckpoint.o:
In file included from /home/shade/trunks/jdk-updates-jdk11u-dev/src/hotspot/share/gc/shared/gc_globals.hpp:28,
                 from /home/shade/trunks/jdk-updates-jdk11u-dev/src/hotspot/share/runtime/globals.hpp:28,
                 from /home/shade/trunks/jdk-updates-jdk11u-dev/src/hotspot/share/memory/allocation.hpp:28,
                 from /home/shade/trunks/jdk-updates-jdk11u-dev/src/hotspot/share/classfile/classLoaderData.hpp:28,
                 from /home/shade/trunks/jdk-updates-jdk11u-dev/src/hotspot/share/oops/klass.hpp:28,
                 from /home/shade/trunks/jdk-updates-jdk11u-dev/build/linux-x86_64-normal-server-fastdebug/hotspot/variant-server/gensrc/jfrfiles/jfrEventClasses.hpp:6,
                 from /home/shade/trunks/jdk-updates-jdk11u-dev/src/hotspot/share/jfr/jfrEvents.hpp:32,
                 from /home/shade/trunks/jdk-updates-jdk11u-dev/src/hotspot/share/jfr/leakprofiler/checkpoint/objectSampleCheckpoint.cpp:26:
/home/shade/trunks/jdk-updates-jdk11u-dev/src/hotspot/share/jfr/leakprofiler/checkpoint/objectSampleCheckpoint.cpp: In static member function 'static void ObjectSampleCheckpoint::on_rotation(const ObjectSampler*)':
/home/shade/trunks/jdk-updates-jdk11u-dev/src/hotspot/share/jfr/leakprofiler/checkpoint/objectSampleCheckpoint.cpp:298:14: error: 'JfrJavaSupport' has not been declared
  298 |   DEBUG_ONLY(JfrJavaSupport::check_java_thread_in_native(thread);)
      |              ^~~~~~~~~~~~~~
/home/shade/trunks/jdk-updates-jdk11u-dev/src/hotspot/share/utilities/macros.hpp:393:26: note: in definition of macro 'DEBUG_ONLY'
  393 | #define DEBUG_ONLY(code) code
      |                          ^~~~

",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8265750,,,,JDK-8258414,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2si57:",9223372036854775807,b01,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@42995637,,,,,,,,,"2021-04-21 23:17;shade;Fix Request (11u)

This fixes 11u build failure. This is 11u-specific patch, 11u RFR: https://mail.openjdk.java.net/pipermail/jdk-updates-dev/2021-April/005885.html
;;;","2021-04-22 01:59;hgupdate;URL:   https://hg.openjdk.java.net/jdk-updates/jdk11u-dev/rev/17b413fd7533
User:  shade
Date:  2021-04-22 08:58:11 +0000
;;;","2021-04-23 11:18;sgehwolf;Adding link to JDK-8258414 as that 11u backport caused this. From the looks of it is going to get reverted from 11.0.12 with JDK-8265750.;;;","2021-05-05 05:15;hgupdate;URL:   https://hg.openjdk.java.net/jdk-updates/jdk11u/rev/17b413fd7533
User:  goetz
Date:  2021-05-05 12:03:09 +0000
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
aarch64: KlassDecodeMovk mode broken,JDK-8265705,5047615,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,stuefe,pliden,pliden,2021-04-21 14:40,2021-05-24 16:39,2023-10-01 09:57,2021-05-17 09:15,17,,,,,,,17,hotspot,,0,cds,metaspace,tier6,,,,,,,,,,,"While adding support for ZGC on macOS/aarch64 ran into a test failure with runtime/cds/SharedBaseAddress.java. It looks like the compressed class pointer mode KlassDecodeMovk is broken and
provokes the following guarantee in src/hotspot/cpu/aarch64/macroAssembler_aarch64.cpp when using ZGC.

[...]
[0.081s][info ][gc,metaspace] CDS archive(s) mapped at: [0x0000000500000000-0x0000000500c00000-0x0000000500c00000), size 12582912, SharedBaseAddress: 0x0000000500000000, ArchiveRelocationMode: 0.
[0.081s][info ][gc,metaspace] Compressed class space mapped at: 0x0000000500c00000-0x0000000540c00000, reserved size: 1073741824
[0.081s][info ][gc,metaspace] Narrow klass base: 0x0000000500000000, Narrow klass shift: 3, Narrow klass range: 0x100000000
[...]
# To suppress the following error report, specify this argument
# after -XX: or in .hotspotrc:  SuppressErrorAt=/macroAssembler_aarch64.cpp:4026
#
# A fatal error has been detected by the Java Runtime Environment:
#
#  Internal Error (/Users/pliden/jdk/open/src/hotspot/cpu/aarch64/macroAssembler_aarch64.cpp:4026), pid=57121, tid=6403
#  guarantee((shifted_base & 0xffff0000ffffffff) == 0) failed: compressed class base bad alignment


When using non-ZGC collectors, the ""Narrow klass base"" is typically 0x0000000400000000 and MacroAssembler::klass_decode_mode() returns KlassDecodeXor. However, ZGC just happens to reserve slightly more memory at startup, so the ""Narrow klass base"" gets pushed up to 0x0000000500000000 and MacroAssembler::klass_decode_mode() then crashes.

This problem can be provoked with any GC by just reserving some memory during startup. For example, you will see the same crash with G1 if you insert the following code somewhere in CollectedHeap::CollectedHeap():

  os::reserve_memory(0x200000000, !ExecMem, mtGC);

and then run the test runtime/cds/SharedBaseAddress.java on macOS/aarch64.

This looks like a generic aarch64 issue, and not directly related to macOS. But the compressed class base might end up at a different address on other OS:es, so that might have hidden the problem.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8267351,,,,,,,,,,,,,,,aarch64,,,,,,,,,,,,,,"0|i2si23:",9223372036854775807,b23,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,,,"2021-04-22 02:38;ngasson;There is some code #ifdef AARCH64 in Metaspace::reserve_address_space_for_compressed_classes() that is supposed to ensure the compressed klass base is always 32GB aligned if the base address is above 32GB. It seems that is not working correctly in this case? (Or was broken at some point.);;;","2021-04-22 03:36;ngasson;I think MacroAssembler::klass_decode_mode() was relying on CompressedKlassPointers::base() being zero if the compressed klass area was mapped below 32G (value<<LogKlassAlignmentInBytes(=3) covers the full range), and that is no longer the case. 0x500000000 is 4GB aligned so the search in reserve_address_space_for_compressed_classes() is working, but 0x500000000 can't be encoded in a logical immediate and we also can't use MOVK to set the lower 32-bits of the address because 0x500000000>>3 has non-zero bits in the lower 32-bits which would be clobbered by the MOVK.;;;","2021-04-27 11:15;mseledtsov;ILW = MMM = P3;;;","2021-04-28 19:53;ngasson;I think a simple solution to this is to set the compressed klass shift to zero when CDS is enabled. Right now we have non-zero shift and non-zero base but there's no reason to do that as the maximum encoding space is only 4GB (non-zero shift is only useful if it means the base can be zero). AFAIK it is set this way for compatibility with AOT, which compiles-in both base and shift for maximum flexibility. But AOT is gone now so I think we can change it. 

I've tested locally setting shift=0 in CompressedKlassPointers::initialize() when UseSharedSpaces || DumpSharedSpaces without any new jtreg failures. Doing this will also save an instruction for each compressed klass encode/decode, on AArch64 and x86 at least.;;;","2021-04-28 21:02;stuefe;Just to be sure I understand. I remember the rule about aarch64 klass encoding was ""cds/ccs start below 32G: any 4G aligned encoding base will do, above 32G: any 32G encoding base will do"", which is I think what we implemented as part of JDK-8243392. See also your comment in metaspace.cpp:537ff.

If this rule was missing something, what would be a correct rule?

Without any hard reason to show, I also feel unsure about hard coding a reduced encoding range of 4G - until now we had at least the theoretical possibility to have a larger encoding range and hence a larger class space or a larger distance between CDS and CCS. This gives us some flexibility, e.g.:

- I plan some changes for more intelligently placing memory, e.g. the class space. ATM we allocate CDS, behind that CCS, but that second allocation may fail; we then laboriously unmap CDS and repeat the process somewhere else. A better approach would be to intelligently search the range [CDS-end...end-of-encoding) for holes to place CCS. That range would be of course much reduced with shift=0. 
- A different theoretical possibility would be to put all metadata together into one space. That would have a number of advantages to the current metaspace model. I don't think that we will actually do this, but a reduced range of 4G would rule this possibility out for certain.

How about setting the encoding base to NULL instead if the end of CCS is still below 32G? 

;;;","2021-04-28 23:16;ngasson;> Just to be sure I understand. I remember the rule about aarch64 klass encoding was ""cds/ccs start below 32G: any 4G aligned encoding base will do, above 32G: any 32G encoding base will do"", which is I think what we implemented as part of JDK-8243392. 

Yes that's right. But it's based on the assumption that either base or shift will be zero if the space is below 32GB (which is false with CDS enabled and a non-default base). Even if 0 < base < 32G and shift != 0 we can still encode/decode successfully as long as base can be encoded as a logical immediate (i.e. one of these values https://gist.github.com/dinfuehr/51a01ac58c0b23e4de9aac313ed6a06a ). But base=0x500000000 and shift=3 doesn't satisfy any of these so the guarantee() fails. I think this bug has probably always been here, we just didn't hit it until how. I can provoke it from runtime/cds/SharedBaseAddress.java if I add ""0x500000000"" to testTable.

> How about setting the encoding base to NULL instead if the end of CCS is still below 32G? 

I believe that will work too, and will also reduce the number of encode/decode instructions on all platforms. But there is this comment in CompressedKlassPointers::initialize():

    // To be very careful here, we avoid any optimizations and just keep using
    //  the same address and shift value. Specifically we avoid using zero-based
    //  encoding. We also set the expected value range to 4G (encoding range
    //  cannot be larger than that).
;;;","2021-04-29 00:16;stuefe;>> Just to be sure I understand. I remember the rule about aarch64 klass encoding was ""cds/ccs start below 32G: any 4G aligned encoding base will do, above 32G: any 32G encoding base will do"", >>which is I think what we implemented as part of JDK-8243392.

>Yes that's right. But it's based on the assumption that either base or shift will be zero if the space is below 32GB (which is false with CDS enabled and a non-default base). Even if 0 < base < 32G >and shift != 0 we can still encode/decode successfully as long as base can be encoded as a logical immediate (i.e. one of these values >https://gist.github.com/dinfuehr/51a01ac58c0b23e4de9aac313ed6a06a ). But base=0x500000000 and shift=3 doesn't satisfy any of these so the guarantee() fails. I think this bug has probably >ways been here, we just didn't hit it until how. I can provoke it from runtime/cds/SharedBaseAddress.java if I add ""0x500000000"" to testTable.

Ah, thanks for explaining. So the rule should be ""below 32G, either (shift==0 and 4G aligned base) or (base==0 and shift=3). 

> I believe that will work too, and will also reduce the number of encode/decode instructions on all platforms. But there is this comment in CompressedKlassPointers::initialize():

... Seems I wrote this. I hate vague comments like this :/ . I believe this referenced to a remark from aph: https://mail.openjdk.java.net/pipermail/aarch64-port-dev/2020-April/008805.html :

```
Bear in mind, though, that people designing AArch64 hardware today are
benchmarking OpenJDK and making decisions based on what HotSpot
does. For that reason, changing what we do without a really good
reason isn't the best idea.
```

which scared me off doing more changes, especially since we did not have aarch64 testing hardware at that time.





;;;","2021-05-13 21:17;mikael;[~stuefe] Do you think a fix is ready anytime soon or should we problem list the tests for now?;;;","2021-05-13 21:24;stuefe;I will post a fix today.;;;","2021-05-14 02:26;stuefe;Note: easy to reproduce with:

- create a dump with coops off and shared base address < 32g and 4G aligned but an invalid logical immediate on aarch https://gist.github.com/dinfuehr/51a01ac58c0b23e4de9aac313ed6a06a
- run the VM using this dump with compressed oops off.

eg.
```
java -Xmx128m -XX:CompressedClassSpaceSize=64m -Xshare:dump -XX:SharedBaseAddress=20g -XX:-UseCompressedOops
java  -XX:-UseCompressedOops
```;;;","2021-05-14 05:53;stuefe;https://github.com/openjdk/jdk/pull/3968;;;","2021-05-17 09:15;roboduke;Changeset: 3c010a7c
Author:    Thomas Stuefe <stuefe@openjdk.org>
Date:      2021-05-17 16:14:22 +0000
URL:       https://git.openjdk.java.net/jdk/commit/3c010a7c7e64706ee6124d6e9ef69a5f3cf0d1ba
;;;","2021-05-17 14:23;dcubed;This fix is in jdk-17+23-2022.;;;",,,,,,,,,,,,,,,,,,,,,
(bf) Scopes passed to ScopedMemoryAccess.copy[Swap]Memory in incorrect order,JDK-8265699,5047608,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,bpb,bpb,bpb,2021-04-21 12:31,2021-04-28 17:39,2023-10-01 09:57,2021-04-22 12:44,17,,,,,,,17,core-libs,,0,noreg-cleanup,,,,,,,,,,,,,"In some of the Buffer bulk transfer methods, the Scopes passed to the methods copyMemory() and copySwapMemory() of jdk.internal.misc.ScopedMemoryAccess appear to be supplied in reversed order, viz., destination Scope passed as source Scope and the converse.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2si0j:",9223372036854775807,b20,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@674604a9,,,,,,,,,"2021-04-22 12:44;roboduke;Changeset: ca0de266
Author:    Brian Burkhalter <bpb@openjdk.org>
Date:      2021-04-22 19:44:01 +0000
URL:       https://git.openjdk.java.net/jdk/commit/ca0de266
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Add .jcheck/conf to jfx11u repo,JDK-8265697,5047604,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,kcr,kcr,kcr,2021-04-21 11:43,2021-04-29 09:30,2023-10-01 09:57,2021-04-28 13:07,jfx11,,,,,,,jfx11.0.12,javafx,,0,noreg-cleanup,sn_92,,,,,,,,,,,," As part of moving the FX 11-dev/rt repo from hg.openjdk.java.net to github.com, we will enable the Skara tools. This requires a `.jcheck/conf` file be checked in to the repo.

In order to allow developers to continue to use the existing Mercurial jcheck locally, this will be pushed as part of the transition to git + Skara.

The existing .jcheck/conf from jfx mainline will be used as the starting point, and will likely need no changes.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2shzn:",9223372036854775807,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@1d1c7815,,,,,,,,,"2021-04-28 13:06;kcr;Pushed directly to repo as part of Skara transition.;;;","2021-04-28 13:07;kcr;Changeset: 88194164
Author: Kevin Rushforth <kcr@openjdk.org>
Date: 2021-04-27 05:41:06 -0700
URL: https://git.openjdk.java.net/jfx11u/commit/8819416471216e041d8e0fa2273af11f9a147ef1
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Some Object constructor methods aren't ES6 compliant,JDK-8265691,5047595,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,attila,attila,attila,2021-04-21 09:19,2021-06-29 09:32,2023-10-01 09:57,2021-06-29 09:32,,,,,,,,,core-libs,,0,,,,,,,,,,,,,,"freeze, isFrozen, seal, isSealed, preventExtensions, isExtensible, getOwnPropertyNames, getOwnPropertySymbols operate under ES5 semantics even under ES6 language when their argument is not an object.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,generic,,,,,,,,,generic,,,,,"0|i2shxn:",9223372036854775807,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@51b0542d,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Use the latest Ubuntu base image version in Docker testing,JDK-8265690,5047594,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,shade,shade,shade,2021-04-21 09:00,2023-03-17 09:08,2023-10-01 09:57,2021-04-27 09:37,11,17,8,,,,,17,hotspot,,0,containers,jdk11u-fix-request,jdk11u-fix-yes,testbug,,,,,,,,,,"Running hotspot_containers tests at current Xubuntu 20.04 fails with glibc incompatibility error like this:

$ CONF=linux-x86_64-server-fastdebug make images test TEST=hotspot_containers

STDERR:
 stdout: [Error: dl failure on line 542
Error: failed /jdk/lib/server/libjvm.so, because /lib64/libm.so.6: version `GLIBC_2.27' not found (required by /jdk/lib/server/libjvm.so)
];
 stderr: []
 exitValue = 6

AFAIU, this means that the host glibc (and thus what the tested JDK is using) is newer than the glibc in the image (needed by /lib64/libm.so).

After JDK-8221342, the current image version is selected by:

        switch (Platform.getOsArch()) {
            case ""aarch64"":
            case ""ppc64le"":
            case ""s390x"":
                return ""latest"";
            default:
                return ""7.6"";
        }

I think it would make sense to default to ""latest"" Ubuntu, so that we get the image with the latest glibc. Which would get much higher chance to work on all hosts, because it would have higher chance to be at least as new as the host glibc. There is still the option to select the image that fits a particular system, but the default should catch as much as possible.

Unfortunately, even the latest oraclelinux:8.3 does not have a glibc that is modern enough to cater for recent Ubuntu desktops.",,,,,,,,,,,JDK-8266425,,,,,,,,,,,,,,,,,,,,,,JDK-8221342,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2shxf:",9223372036854775807,b20,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,,,"2021-04-27 09:37;roboduke;Changeset: b67b2b16
Author:    Aleksey Shipilev <shade@openjdk.org>
Date:      2021-04-27 16:36:15 +0000
URL:       https://git.openjdk.java.net/jdk/commit/b67b2b16
;;;","2021-04-28 23:43;shade;Fix Request (11u)

This fixes Docker tests on modern desktop. Patch applies cleanly to 11u, hotspot_containers tests pass.;;;","2021-04-29 00:09;shade;Fix Request (8u)

Same reason as for 11u. Patch applies to 8u with the usual shufflings. runtime/containers test pass with one unrelated failure.;;;","2021-04-29 01:59;sgehwolf;[~shade] At least for JDK 8u we have duplicate DockerfileConfig.java. One in the jdk tree and one in hotspot:

JDK:

$ find test/ -name DockerfileConfig.java
test/lib/jdk/test/lib/containers/docker/DockerfileConfig.java

HotSpot:
$ find test/ -name DockerfileConfig.java
test/testlibrary/com/oracle/java/testlibrary/DockerfileConfig.java

Hence, that'll need a review.;;;","2021-04-29 02:00;sgehwolf;Removed the tag for now.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
JVMCI: InternalError: Class java.lang.Object does not implement interface jdk.vm.ci.meta.JavaType ,JDK-8265689,5047593,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,vlivanov,thartmann,thartmann,2021-04-21 08:43,2021-06-03 02:56,2023-10-01 09:57,2021-04-26 03:54,11,16,17,,,,,17,hotspot,,0,graal,hs-comp-triaged,jdk11u-jvmci-defer,jvmci,oracle-triage-11,oracle-triage-17,,,,,,,,"After backporting JDK-8264918 to JDK 11u, compiler/graalunit/HotspotTest.java fails: 

test1(org.graalvm.compiler.hotspot.test.InstalledCodeExecuteHelperTest)
java.lang.InternalError: Class java.lang.Object does not implement interface jdk.vm.ci.meta.JavaType
	at jdk.internal.vm.ci/jdk.vm.ci.hotspot.CompilerToVM.getVtableIndexForInterfaceMethod(Native Method)
	at jdk.internal.vm.ci/jdk.vm.ci.hotspot.HotSpotResolvedJavaMethodImpl.getVtableIndexForInterfaceMethod(HotSpotResolvedJavaMethodImpl.java:703)
	at jdk.internal.vm.ci/jdk.vm.ci.hotspot.HotSpotResolvedJavaMethodImpl.getVtableIndex(HotSpotResolvedJavaMethodImpl.java:683)
	at jdk.internal.vm.ci/jdk.vm.ci.hotspot.HotSpotResolvedJavaMethodImpl.isInVirtualMethodTable(HotSpotResolvedJavaMethodImpl.java:669)
	at jdk.internal.vm.compiler@11.0.12-internal/org.graalvm.compiler.hotspot.meta.DefaultHotSpotLoweringProvider.lowerInvoke(DefaultHotSpotLoweringProvider.java:498)
	at jdk.internal.vm.compiler@11.0.12-internal/org.graalvm.compiler.hotspot.meta.DefaultHotSpotLoweringProvider.lower(DefaultHotSpotLoweringProvider.java:257)
	at jdk.internal.vm.compiler@11.0.12-internal/org.graalvm.compiler.hotspot.amd64.AMD64HotSpotLoweringProvider.lower(AMD64HotSpotLoweringProvider.java:92)
	at jdk.internal.vm.compiler@11.0.12-internal/org.graalvm.compiler.nodes.InvokeNode.lower(InvokeNode.java:190)
	at jdk.internal.vm.compiler@11.0.12-internal/org.graalvm.compiler.phases.common.LoweringPhase$Round.process(LoweringPhase.java:475)
	at jdk.internal.vm.compiler@11.0.12-internal/org.graalvm.compiler.phases.common.LoweringPhase$Round$ProcessFrame.preprocess(LoweringPhase.java:415)
	at jdk.internal.vm.compiler@11.0.12-internal/org.graalvm.compiler.phases.common.LoweringPhase.processBlock(LoweringPhase.java:574)
	at jdk.internal.vm.compiler@11.0.12-internal/org.graalvm.compiler.phases.common.LoweringPhase$Round.run(LoweringPhase.java:400)
	at jdk.internal.vm.compiler@11.0.12-internal/org.graalvm.compiler.phases.Phase.run(Phase.java:49)
	at jdk.internal.vm.compiler@11.0.12-internal/org.graalvm.compiler.phases.BasePhase.apply(BasePhase.java:197)
	at jdk.internal.vm.compiler@11.0.12-internal/org.graalvm.compiler.phases.BasePhase.apply(BasePhase.java:139)
	at jdk.internal.vm.compiler@11.0.12-internal/org.graalvm.compiler.phases.PhaseSuite.run(PhaseSuite.java:209)
	at jdk.internal.vm.compiler@11.0.12-internal/org.graalvm.compiler.phases.common.IncrementalCanonicalizerPhase.run(IncrementalCanonicalizerPhase.java:56)
	at jdk.internal.vm.compiler@11.0.12-internal/org.graalvm.compiler.phases.common.IncrementalCanonicalizerPhase.run(IncrementalCanonicalizerPhase.java:38)
	at jdk.internal.vm.compiler@11.0.12-internal/org.graalvm.compiler.phases.BasePhase.apply(BasePhase.java:197)
	at jdk.internal.vm.compiler@11.0.12-internal/org.graalvm.compiler.phases.BasePhase.apply(BasePhase.java:139)
	at jdk.internal.vm.compiler@11.0.12-internal/org.graalvm.compiler.phases.common.LoweringPhase.lower(LoweringPhase.java:271)
	at jdk.internal.vm.compiler@11.0.12-internal/org.graalvm.compiler.phases.common.LoweringPhase.run(LoweringPhase.java:264)
	at jdk.internal.vm.compiler@11.0.12-internal/org.graalvm.compiler.phases.common.LoweringPhase.run(LoweringPhase.java:94)
	at jdk.internal.vm.compiler@11.0.12-internal/org.graalvm.compiler.phases.BasePhase.apply(BasePhase.java:197)
	at jdk.internal.vm.compiler@11.0.12-internal/org.graalvm.compiler.phases.BasePhase.apply(BasePhase.java:139)
	at jdk.internal.vm.compiler@11.0.12-internal/org.graalvm.compiler.phases.PhaseSuite.run(PhaseSuite.java:209)
	at jdk.internal.vm.compiler@11.0.12-internal/org.graalvm.compiler.phases.BasePhase.apply(BasePhase.java:197)
	at jdk.internal.vm.compiler@11.0.12-internal/org.graalvm.compiler.phases.BasePhase.apply(BasePhase.java:139)
	at jdk.internal.vm.compiler@11.0.12-internal/org.graalvm.compiler.core.GraalCompiler.emitFrontEnd(GraalCompiler.java:220)
	at jdk.internal.vm.compiler@11.0.12-internal/org.graalvm.compiler.core.GraalCompiler.compile(GraalCompiler.java:144)
	at org.graalvm.compiler.core.test.GraalCompilerTest.compile(GraalCompilerTest.java:1103)
	at org.graalvm.compiler.core.test.GraalCompilerTest.getCode(GraalCompilerTest.java:996)
	at org.graalvm.compiler.core.test.GraalCompilerTest.getCode(GraalCompilerTest.java:933)
	at org.graalvm.compiler.hotspot.test.InstalledCodeExecuteHelperTest.test1(InstalledCodeExecuteHelperTest.java:58)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
	at org.junit.internal.runners.statements.RunAfters.evaluate(RunAfters.java:27)
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57)
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290)
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71)
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288)
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58)
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268)
	at org.junit.runners.ParentRunner.run(ParentRunner.java:363)
	at org.junit.runners.Suite.runChild(Suite.java:128)
	at org.junit.runners.Suite.runChild(Suite.java:27)
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290)
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71)
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288)
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58)
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268)
	at org.junit.runners.ParentRunner.run(ParentRunner.java:363)
	at org.junit.runner.JUnitCore.run(JUnitCore.java:137)
	at org.junit.runner.JUnitCore.run(JUnitCore.java:115)
	at com.oracle.mxtool.junit.MxJUnitWrapper.runRequest(MxJUnitWrapper.java:280)
	at com.oracle.mxtool.junit.MxJUnitWrapper.main(MxJUnitWrapper.java:196)",,,,,,,,,,,JDK-8265975,,,,,,,,,,,,,,,,,,,,,,JDK-8264918,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2shx7:",9223372036854775807,b20,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2021-04-21 08:49;thartmann;Doug, could you please have a look?;;;","2021-04-21 08:52;thartmann;ILW = HLM = P3;;;","2021-04-22 06:26;dnsimon;https://github.com/openjdk/jdk/pull/3396#issuecomment-824840119;;;","2021-04-26 03:54;roboduke;Changeset: 9647fb0d
Author:    Vladimir Ivanov <vlivanov@openjdk.org>
Date:      2021-04-26 10:54:01 +0000
URL:       https://git.openjdk.java.net/jdk/commit/9647fb0d
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
"vmTestbase/nsk/jdb tests failed with ""JDWP exit error AGENT_ERROR_INTERNAL(181)""",JDK-8265683,5047587,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,cjplummer,dcubed,dcubed,2021-04-21 07:59,2021-06-23 22:00,2023-10-01 09:57,2021-04-22 16:28,17,,,,,,,17,core-svc,,0,intermittent,tier4,tier5,tier6,tier7,,,,,,,,,"The following test failed in the JDK17 CI:

vmTestbase/nsk/jdb/wherei/wherei001/wherei001.java

Here's a snippet from the log file:

reply[6]: Thread-4[1] 
Sending command: cont
reply[0]: > ASSERT FAILED: /opt/mach5/mesos/work_dir/slaves/3c846bae-ce30-4a97-93ee-9fef4497ccb6-S79062/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/c798a38f-aedc-4415-9a12-33ea4b6cb476/runs/0b68621e-ed2f-46a0-adcf-2b2be2e2f11f/workspace/open/src/jdk.jdwp.agent/share/native/libjdwp/threadControl.c : 257 - !nonTlsSearch(getEnv(), &runningThreads, thread)
reply[1]: JDWP exit error AGENT_ERROR_INTERNAL(181): Assertion Failed [/opt/mach5/mesos/work_dir/slaves/3c846bae-ce30-4a97-93ee-F9fef4ATA497ccb6L ERROR in native met-S790hod: JDWP Asser62/tion Failed, jvmtiErrofrar=AGENT_ERROR_INTERNAL(mew181)
reply[2]: orks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/c798a38f-aedc-4415-9a12-33ea4b6cb476/runs/0b68621e-ed2f-46a0-adcf-2b2be2e2f11f/workspace/open/src/jdk.jdwp.agent/share/native/libjdwp/error_messages.c:132]
reply[3]: 
reply[4]: The application has been disconnected
Sending command: quit
# ERROR: Caught unexpected exception while executing the test: nsk.share.Failure: Debuggee did not exit after 1 <cont> commands
The following stacktrace is for failure analysis.
nsk.share.TestFailure: Caught unexpected exception while executing the test: nsk.share.Failure: Debuggee did not exit after 1 <cont> commands
	at nsk.share.Log.logExceptionForFailureAnalysis(Log.java:432)
	at nsk.share.Log.complain(Log.java:403)
	at nsk.share.jdb.JdbTest.failure(JdbTest.java:74)
	at nsk.share.jdb.JdbTest.runTest(JdbTest.java:158)
	at nsk.jdb.wherei.wherei001.wherei001.run(wherei001.java:70)
	at nsk.jdb.wherei.wherei001.wherei001.main(wherei001.java:63)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:78)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at com.sun.javatest.regtest.agent.MainWrapper$MainThread.run(MainWrapper.java:127)
	at java.base/java.lang.Thread.run(Thread.java:831)
nsk.share.Failure: Debuggee did not exit after 1 <cont> commands
	at nsk.share.jdb.Jdb.contToExit(Jdb.java:869)
	at nsk.jdb.wherei.wherei001.wherei001.runCases(wherei001.java:105)
	at nsk.share.jdb.JdbTest.runTest(JdbTest.java:149)
	at nsk.jdb.wherei.wherei001.wherei001.run(wherei001.java:70)
	at nsk.jdb.wherei.wherei001.wherei001.main(wherei001.java:63)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:78)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at com.sun.javatest.regtest.agent.MainWrapper$MainThread.run(MainWrapper.java:127)
	at java.base/java.lang.Thread.run(Thread.java:831)
Waiting for jdb exits
jdb normally exited
# ERROR: TEST FAILED

This line tells us which assert failed:

reply[0]: > ASSERT FAILED: /opt/mach5/mesos/work_dir/slaves/3c846bae-ce30-4a97-93ee-9fef4497ccb6-S79062/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/c798a38f-aedc-4415-9a12-33ea4b6cb476/runs/0b68621e-ed2f-46a0-adcf-2b2be2e2f11f/workspace/open/src/jdk.jdwp.agent/share/native/libjdwp/threadControl.c : 257 - !nonTlsSearch(getEnv(), &runningThreads, thread)

The next line has at least two different output streams mixed together:

reply[1]: JDWP exit error AGENT_ERROR_INTERNAL(181): Assertion Failed [/opt/mach5/mesos/work_dir/slaves/3c846bae-ce30-4a97-93ee-F9fef4ATA497ccb6L ERROR in native met-S790hod: JDWP Asser62/tion Failed, jvmtiErrofrar=AGENT_ERROR_INTERNAL(mew181)

And this third line appears to be the end of another error mesg:

reply[2]: orks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/c798a38f-aedc-4415-9a12-33ea4b6cb476/runs/0b68621e-ed2f-46a0-adcf-2b2be2e2f11f/workspace/open/src/jdk.jdwp.agent/share/native/libjdwp/error_messages.c:132]

None of the changesets in jdk-17+19-1601 appear to be related
so I'm labeling this failure as 'intermittent'.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8269268,JDK-8265028,,,,,,,,,,,,,,x86_64,,,,,,,,,linux,,,,,"0|i2shvv:",9223372036854775807,b20,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@3397f701,,,,,,,,,"2021-04-21 08:08;dcubed;Here's log file snippets for the jdk-17+19-1598-tier5 sighting:

 vmTestbase/nsk/jdb/suspend/suspend001/suspend001.java

reply[4]: main[1] 
Sending command: eval nsk.jdb.suspend.suspend001.suspend001a.notSuspended
reply[0]:  nsk.jdb.suspend.suspend001.suspend001a.notSuspended = 1
reply[1]: main[1] 
Sending command: cont
reply[0]: > ASSERT FAILED: /opt/mach5/mesos/work_dir/slaves/3c846bae-ce30-4a97-93ee-9fef4497ccb6-S124137/frameworFATAL ERks/173ROR in nati5ve method: JDWP Assertion Failed, jvmtiError=AGe8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/83412e66-c218-4f8d-b976-adf52ENT1_ERROR_INTERNAL(181)
reply[1]: 	at je6a7va.lang.Shutdown.halt0(java.base@17-ea/Native Method)
reply[2]: 	at j5ava.lang.Shutdown.halt(java.5base@17-9ea/Shutdown.java:151)
reply[3]: 	- locked <0x00000000b76/2e8d0> (a java.lang.Shutdown$Lock)
reply[4]: 	at java.lang.Shutdown.exit(java.base@17-ea/Shutdown.java:174)
reply[5]: 	- locked <0x00000000ffe02040> (a java.lang.Clrausnss /f1ocr6 aj6a1v6a9.-l3aen8gb.-S4hutdown)c
reply[6]: 	at 5java.lang.1Runtime.exit(java.-859c-5df14bd75bcd/workspace/open/src/jdk.jdwp.agent/share/native/libjdwp/threadControl.c : 257 - b!nonTlsSeaarch(getEnv(), &runningThreads, thread)se@17-ea/Runtime.java:114)
reply[7]: 	at java.lang.System.exit(java.base@17-ea/System.ja
reply[8]: va:1769)
reply[9]: 	JDWP exit error at nsk.jdb.suspend.suspend001.suspend001a.AGENT_ERROR_INTERNAL(181): Assertion Failed [/opt/mach5/mesmain(suspenosd001a.java:40)
reply[10]: /work_dir/slaves/3c846bae-ce30-4a97-93ee-9fef4497ccb6-S124137/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/83412e66-c218-4f8d-b976-adf521e67559/runs/1c6a6169-3e8b-4c51-859c-5df14bd75bcd/workspace/open/src/jdk.jdwp.agent/share/native/libjdwp/error_messages.c:132]
reply[11]: 

Again we have garbled output streams, but the same ""AGENT_ERROR_INTERNAL(181)"" is clear.;;;","2021-04-21 11:33;cjplummer;I don't think the garbled output streams are the issue, other than making it harder to read the output. Mixed in the output you can see an assert is being triggered at threadControl.c:257. That's one I added with the recent JDK-8265028 changes. I'll look into it.;;;","2021-04-21 14:56;cjplummer;I see the problem. The assert is because we found a thread on the runningThreads list that does not have its TLS set. My assumption was that since adding to the runningThreads list implies that you were able to set TLS, that if you later found the thread on runningThreads, it must have its TLS set. However, when a thread exits, the Thread is still around for a while (and its TheadNode), but the TLS is no longer accessible.

In this specific case we have a bit of a race condition. All threads were suspended and now are all being resumed. We've already called JVMTI ResumeThreadList, which means that have all started running, but we have not done the bookkeeping yet (updating the ThreadNode.suspendCount for each resumed thread). So we are in a state where any of the threads just resumed might be existing and no longer have an accessible TLS, and the JVMTI THREAD_DEATH has not yet arrived (and even if it did, it would block until resuming all threads is complete), so these threads are still in the runningThreads list. So that means in order for findThread to work for these threads, we need to still defer to looking in runningThreads if the TLS look up fails. This subverts some the reasons I did JDK-8265028 in the first place. I'll have to see I can still do the lookup in a way that avoids looking at runnintThreads if we don't think the thread should be there (like when potentially dealing with a new thread). I might need to add a flag to findThread() to do this.;;;","2021-04-21 21:55;cjplummer;All failures so far have been with -Xcomp, including the ones I've produced locally. Seems to happen maybe 10% of the runs.;;;","2021-04-21 22:07;cjplummer;There's something more going on than what I presented in my original explanation, but I can't quite figured out how it is happening. The debug agent thread that is calling ResumeThreadList (with all the application's suspended threads) is holding the event handler lock, called handlerLock. This is also the thread that asserts. As the app threads are resumed, they quickly try to exit. However, they have to deliver a JVMTI THREAD_END event first. Processing this event also requires grabbing the handlerLock, so the end result should be that all the app threads that are exiting get blocked waiting for the handlerLock in the THREAD_END callback. I am seeing this callback being called for numerous of these threads, as expected, but they are somehow getting past a section of code where they grab and then later release the handlerLock. I don't see how this is possible. The test creates 5 test threads, and 4 threads are exiting and in the process if delivering the THREAD_END event. They all have gotten past the place where they need to grab the handlerLock (and then release it), and then end up blocked on something else, like the threadLock. The never should have gotten past the grab of the handlerLock. The 5th thread is the one causing the assert, because it has completely exited. There is no sign of the thread anymore (in gdb or with SA's jstack). This implies that it has delivered its THREAD_END event, but if it had, and it was processed, the thread would have been removed from the runningThreads list, yet it is still there, so this is another unexplained oddity. ;;;","2021-04-22 08:39;cjplummer;To quiet the noise I'm just going to push a quick and dirty fix that changes the assert to instead do the lookup in the runningThreads list. This is basically the way it used to work before JDK-8265028 . Then I'll try to figure out what is really going on and try to at least partially avoid having to always do this runningThreads list lookup when the TLS lookup fails.;;;","2021-04-22 16:28;roboduke;Changeset: a8ddbd15
Author:    Chris Plummer <cjplummer@openjdk.org>
Date:      2021-04-22 23:27:33 +0000
URL:       https://git.openjdk.java.net/jdk/commit/a8ddbd15
;;;","2021-04-22 20:30;cjplummer;I think I have an explanation for the strangeness I was observing. The test uses jdb, and it looks like after the test issues the last ""cont"" to make it continue until exit, jdb is doing things that cause multiple VM.suspend and VM.resume calls to be done. Also, the delivery of THREAD_END events to jdb might be confusing the situation. So I think this explains why 1 or more threads may have managed to exit (fully) when I get to the code after the ResumeAllThreads. The threads were not resumed by the ResumeAllThreads just executed, but by an earlier one, allowing them to exit or at least get to the point of delivering the THREAD_END event to the debug agent, and the debug agent to process the event beyond where it grabs and then releases the handlerLock.

However, I'm still not sure how I have a thread in the runningThreads list that is fully exited (its THREAD_END event has been processed and it doesn't show up in gdb or jstack). This should have caused it to be removed. I'll have to see if either the removal did not happen, or perhaps it got re-added again for some reason.;;;","2021-04-23 08:13;dcubed;The fix for this bug is in jdk-17+20-1654.;;;","2021-06-23 22:00;cjplummer;My last comment for this bug stated:

> However, I'm still not sure how I have a thread in the runningThreads list that is fully exited (its THREAD_END event has been processed and it doesn't show up in gdb or jstack). This should have caused it to be removed. I'll have to see if either the removal did not happen, or perhaps it got re-added again for some reason. 

I eventually found out the reason this happens. It turns out no THREAD_END event was received for the thread, because the VM is exiting. When it exits, it disables all JVMTI callbacks and resumes all threads, allowing them to exit. This means that any thread on runningThreads will remain there, even after the thread has exited. So we need to special case this. JDK-8269268 has been filed to fix this issue properly without undoing any of the performance gains from  JDK-8265028.;;;",,,,,,,,,,,,,,,,,,,,,,,,
G1: Mutex::_name dangling in HeapRegionRemSet references after JDK-8264146,JDK-8265682,5047586,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,coleenp,tschatzl,tschatzl,2021-04-21 07:38,2021-05-03 20:16,2023-10-01 09:57,2021-04-26 07:24,17,,,,,,,17,hotspot,,0,,,,,,,,,,,,,,"In JDK-8264146 the _name member of Mutex of HeapRegionRemSet has been made a reference to the passed string (description) instead of a copy.

The code in the HeapRegionRemSet constructor has not been adapted, so that passed reference is now a dangling reference pointing somewhere into the stack.

Fix this.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8265921,,,JDK-8264146,,,,JDK-8265326,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2shvn:",9223372036854775807,b20,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,,,"2021-04-21 16:08;dholmes;There are other breakages too:

oopStorage.cpp:

static Mutex* make_oopstorage_mutex(const char* storage_name,
                                    const char* kind,
                                    int rank) {
  char name[256];
  os::snprintf(name, sizeof(name), ""%s %s lock"", storage_name, kind);
  return new PaddedMutex(rank, name, true, Mutex::_safepoint_check_never);
}

again this leaves the Mutex name pointing into random stack space.

Also this is potentially problematic, but there don't seem to be any current uses:

WorkGangBarrierSync::WorkGangBarrierSync(uint n_workers, const char* name)
  : _monitor(Mutex::safepoint, name, true, Monitor::_safepoint_check_never),
    _n_workers(n_workers), _n_completed(0), _should_reset(false), _aborted(false) {
}

Also in events.hpp:

  EventLogBase<T>(const char* name, const char* handle, int length = LogEventsBufferEntries):
    _mutex(Mutex::event, name, true, Mutex::_safepoint_check_never),

all current uses pass a string literal, but that could easily change.;;;","2021-04-23 00:42;kbarrett;Moved to runtime subcomponent, since this turned out to be more widespread than just a single occurrence in gc code.
;;;","2021-04-26 07:24;roboduke;Changeset: 222f9f07
Author:    Coleen Phillimore <coleenp@openjdk.org>
Date:      2021-04-26 14:23:08 +0000
URL:       https://git.openjdk.java.net/jdk/commit/222f9f07
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Test java/awt/Focus/ActualFocusedWindowTest/ActualFocusedWindowBlockingTest.java fails intermittentently on windows,JDK-8265678,5047582,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,psadhukhan,rsingh,roboduke,2021-04-21 07:21,2022-09-14 15:28,2023-10-01 09:57,2021-04-21 07:21,8,,,,,,,17,client-libs,,0,client-test-sprint-9,sn_91,test_sprint,,,,,,,,,,,,,,,,,,,,,JDK-8168408,,,,,,,,,,,,,,,,,,,,JDK-8168408,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2shur:",9223372036854775807,b20,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@5a9b3fd3,,,,,,,,,"2021-04-21 07:21;roboduke;Changeset: 45c474a0
Author:    Prasanta Sadhukhan <psadhukhan@openjdk.org>
Date:      2021-04-21 14:20:53 +0000
URL:       https://git.openjdk.java.net/jdk/commit/45c474a0
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
CMS: CardTableBarrierSet::write_ref_array_work() lacks storestore barrier,JDK-8265677,5047581,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,rrich,rrich,rrich,2021-04-21 07:02,2022-05-20 05:39,2023-10-01 09:57,2021-04-27 23:34,11,,,,,,,11.0.12,hotspot,,0,gc-cms,jdk11u-fix-request,jdk11u-fix-yes,,,,,,,,,,,"CMS precleaning is a phase where the card table is scanned for dirty cards. A
dirty card is an indication for GC that references in corresponding objects were
updated. In the precleaning phase the references of these objects are followed
and the objects reached are marked.

Precleaning is a concurrent phase therefore accesses to the card table need to
be ordered with corresponding accesses to references.

On mutator side storing references must preceed the stores for marking the
corresponding cards dirty.

This ordering is missing when copying object arrays in the interpreter or when
default versions of array copy routines like `StubRoutines::oop_copy()` are used.

This is the stack where cards are marked dirty after an arraycopy in the
interpreter. Copying array elements happens in `oop_arraycopy_in_heap()`[1]. The
card table is dirtied in `write_ref_array_work()`[2]. Between a storestore barrier
is missing.

```
 CardTableBarrierSet::write_ref_array_work()
 ModRefBarrierSet::write_ref_array()
 ModRefBarrierSet::AccessBarrier<36225142ul, CardTableBarrierSet>::oop_arraycopy_in_heap<unsigned int>()
 AccessInternal::PostRuntimeDispatch<CardTableBarrierSet::AccessBarrier<36225142ul, CardTableBarrierSet>,()
 AccessInternal::RuntimeDispatch<36225110ul, HeapWord,()
 AccessInternal::RuntimeDispatch<36225110ul, HeapWord,()
 AccessInternal::PreRuntimeDispatch::arraycopy<36225110ul, HeapWord>()
 AccessInternal::arraycopy_reduce_types<36225108ul>()
 AccessInternal::arraycopy<36175876ul, HeapWord>()
 Access<36175872ul>::oop_arraycopy<HeapWord>()
 ArrayAccess<33554432ul>::oop_arraycopy()
 ObjArrayKlass::do_copy()
 ObjArrayKlass::copy_array()
 JVM_ArrayCopy()
```

Note that in `CardTableBarrierSet::write_ref_field_post(T* field, oop newVal)` [3]
for example the card table store is given release semantics.

`CardTableBarrierSetAssembler::gen_write_ref_array_post_barrier()` on AARCH64[4]
and PPC64[5] issue a StoreStore barrier.

[1] Copying array elements in `oop_arraycopy_in_heap()`
    https://github.com/openjdk/jdk11u/blob/73eef16128417f4a489c4dde47383bb4a00f39d4/src/hotspot/share/gc/shared/modRefBarrierSet.inline.hpp#L106
    
[2] Marking cards dirty for the updates of [1] in `write_ref_array_work()`
    https://github.com/openjdk/jdk11u/blob/master/src/hotspot/share/gc/shared/cardTableBarrierSet.cpp#L82

[3] Card table store with release sematics in CardTableBarrierSet::write_ref_field_post(T* field, oop newVal)
    https://github.com/openjdk/jdk11u/blob/73eef16128417f4a489c4dde47383bb4a00f39d4/src/hotspot/share/gc/shared/cardTableBarrierSet.inline.hpp#L36-L37

[4] StoreStore barrier in AARCH64 version of `CardTableBarrierSetAssembler::gen_write_ref_array_post_barrier()`
    https://github.com/openjdk/jdk11u/blob/73eef16128417f4a489c4dde47383bb4a00f39d4/src/hotspot/cpu/aarch64/gc/shared/cardTableBarrierSetAssembler_aarch64.cpp#L86

[5] StoreStore barrier in PPC64 version of `CardTableBarrierSetAssembler::gen_write_ref_array_post_barrier()`
    https://github.com/openjdk/jdk11u/blob/73eef16128417f4a489c4dde47383bb4a00f39d4/src/hotspot/cpu/ppc/gc/shared/cardTableBarrierSetAssembler_ppc.cpp#L53",,,,,,,,,,,JDK-8282780,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2shuj:",9223372036854775807,b01,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6b00f96c,,,,,,,,,"2021-04-21 07:27;rrich;Fix request (11u)

I would like to to fix this in jdk11u.
CMS was removed in jdk14.

RFR: https://mail.openjdk.java.net/pipermail/jdk-updates-dev/2021-April/005876.html;;;","2021-04-27 23:34;hgupdate;URL:   https://hg.openjdk.java.net/jdk-updates/jdk11u-dev/rev/e5944c637bb2
User:  rrich
Date:  2021-04-28 06:30:14 +0000
;;;","2021-05-05 05:16;hgupdate;URL:   https://hg.openjdk.java.net/jdk-updates/jdk11u/rev/e5944c637bb2
User:  goetz
Date:  2021-05-05 12:03:09 +0000
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
AccumCell should not be visible,JDK-8265669,5047573,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,jvos,jvos,jvos,2021-04-21 06:43,2021-04-27 11:24,2023-10-01 09:57,2021-04-26 00:18,jfx17,,,,,,,jfx17,javafx,,0,,,,,,,,,,,,,,"The recent refactoring of the cell size calculations in VirtualFlow (https://bugs.openjdk.java.net/browse/JDK-8089589), introduced an approach where the total calculated size of a flow of items is gradually calculated -- to balance between performance and user expercience.
The calculations for each item in the list are done gradually, even if the items are far from visible yet. This is done using the accumCell in VirtualFlow, which index is set to the item we want to inspect. This will lead to a call to Cell.updateItem(). That was already happening before, but it is happening more often now in case the gradual caching goes faster than the scrolling.

This may break logic in updateItem implementations that use the index of the current cell. For example, a paging mechanism might decide to retrieve new items when the almost-last rows are considered. 
With the gradual calculation approach, those rows are considered (i.e. the updateItem is called) but they are not visible, as they are info is contained in the accumCell, which is added to a Parent which is invisible. However, the accumCell itself might be visible.

In order to allow this logic to still be possible, I suggest the accumCell should always made be invisble after it has done its work. That way, the `updateItem` can clearly decide what to do, based on not only the index, but also the visibility of the considered item.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2shsr:",9223372036854775807,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@67282485,,,,,,,,,"2021-04-26 00:18;roboduke;Changeset: 6b63bf5c
Author:    Johan Vos <jvos@openjdk.org>
Date:      2021-04-26 07:18:13 +0000
URL:       https://git.openjdk.java.net/jfx/commit/6b63bf5c
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Add README.md and CONTRIBUTING.md to FX 11-dev/rt repo,JDK-8265667,5047571,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,kcr,kcr,kcr,2021-04-21 06:26,2022-01-21 07:26,2023-10-01 09:57,2021-04-22 06:47,jfx11,,,,,,,jfx11.0.12,javafx,,0,noreg-doc,sn_91,,,,,,,,,,,,"In support of moving the jfx 11 updates development to GitHub we need a new `README.md` and `CONTRIBUTING.md` files at the top of the openjfx/11-dev/rt repo.

These files will be newly created for the jfx 11 updates release, rather than a backport from the mainline jfx repo, since the contents will be completely different. For update releases, the emphasis is not on accepting new contributions, but on backporting selected changes, and the documents will reflect that.

Here is a draft pull request for review of these two new files:

https://github.com/kevinrushforth/jfx/pull/2

Note that the PR is just for review. This will be pushed to the existing HG repo prior to the switch to GIT.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8280462,,,,JDK-8273280,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2shsb:",9223372036854775807,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@1d1c7815,,,,,,,,,"2021-04-22 06:47;kcr;Changeset: 0b755c2a511a
Author:    kcr
Date:      2021-04-21 15:55 -0700
URL:       https://hg.openjdk.java.net/openjfx/11-dev/rt/rev/0b755c2a511a

8265667: Add README.md and CONTRIBUTING.md to FX 11-dev/rt repo
Reviewed-by: jvos
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Enable AIX build platform to make external debug symbols,JDK-8265666,5047569,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,aleonard,aleonard,aleonard,2021-04-21 05:57,2021-05-16 21:19,2023-10-01 09:57,2021-04-29 05:36,11,16,17,8,,,,17,infrastructure,,0,jdk11u-fix-request,jdk11u-fix-yes,jdk16u-fix-request,jdk16u-fix-SQE-ok,jdk16u-fix-yes,,,,,,,,,"Since moving to using the IBM Xlc version 12+ compilers to build, it is now possible to build external debug symbols. At AdoptOpenJDK they have been producing AIX openj9 debug images for a while this way. It simply needs a few make rule changes to support it.",,,,,,,,,,,JDK-8266558,JDK-8267027,JDK-8266663,JDK-8266818,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,ppc,,,,,,,,,aix,,,,,"0|i2shrv:",9223372036854775807,b21,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@429c566,,,,,,,,,"2021-04-29 05:36;roboduke;Changeset: 84b52db9
Author:    Andrew Leonard <aleonard@openjdk.org>
Date:      2021-04-29 12:35:56 +0000
URL:       https://git.openjdk.java.net/jdk/commit/84b52db931943db5aa2df7edca7103776f2f2092
;;;","2021-05-03 14:27;clanger;Fix request (16u):
JDK 16 is also using Xlc version 12+ compilers, so this build improvement would be nice to have there, too. Risk is low.;;;","2021-05-04 00:39;aleonard;I will create a 16u PR;;;","2021-05-04 00:44;clanger;[~aleonard], thanks but that's not necessary, please don't. I'm using this fix as guinea pig for testing the new Skara Backport feature to comment on commits: https://github.com/openjdk/jdk/commit/84b52db931943db5aa2df7edca7103776f2f2092#commitcomment-50324188
There's still a minor bug - I'm in contact with [~ehelin].;;;","2021-05-04 00:48;aleonard;Ah I see you're already on it, thanks Christoph;;;","2021-05-12 08:09;clanger;Fix request (11u) on behalf of [~aleonard]
This backport has been tested at Adoptium using Xlc v13.1, test build: https://ci.adoptopenjdk.net/job/build-scripts/job/jobs/job/jdk11u/job/jdk11u-aix-ppc64-hotspot/929/
RFR review: https://mail.openjdk.java.net/pipermail/jdk-updates-dev/2021-May/006141.html
webrev: http://cr.openjdk.java.net/~aleonard/8266818/webrev.00/ ;;;","2021-05-14 04:41;aleonard;Fix Request (8u)
Backport of jdk(17) change to support AIX debug symbols, required changes on jdk8u for different build system. Tested at Adoptium using Xlc v13.1.
RFR: https://mail.openjdk.java.net/pipermail/jdk8u-dev/2021-May/013806.html
webrevs: http://cr.openjdk.java.net/~aleonard/8266558/;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,
[lworld] docs-jdk-api-javadoc target fails with un-escaped angle bracket,JDK-8265615,5047513,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,dsimms,dsimms,dsimms,2021-04-20 22:47,2021-04-20 23:12,2023-10-01 09:57,2021-04-20 23:12,repo-valhalla,,,,,,,repo-valhalla,tools,,0,lw3,lworld,,,,,,,,,,,,DefaultValueTree.java:33: error: unknown tag: String,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2shff:",9223372036854775807,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4dca67bd,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
"False positives for ""Related Packages""",JDK-8265613,5047511,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,hannesw,jjg,jjg,2021-04-20 21:50,2021-04-28 17:41,2023-10-01 09:57,2021-04-26 00:54,,,,,,,,17,tools,,0,,,,,,,,,,,,,,"[~alanb] reports a number of false positives for ""Related Packages"", such that we need to modify the heuristics or disable the feature for now.

For example, the Attach API (com.sun.tools.attach) is claiming incorrectly that javac (com.sun.tools.javac) is a related API.

One possibility that may be worth investigating is to exclude sibling packages when the parent package is either empty (no classes or interfaces) or is not an exported package of any module.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8260388,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2shez:",9223372036854775807,b20,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@7900061a,,,,,,,,,"2021-04-20 21:53;jjg;Another from Alan:

>> sigh, the jdk.nio and jdk.net packages claims that jdk.jfr is related;;;","2021-04-21 09:08;hannesw;I think the idea behind this feature was to link to nearby packages based on the package name. I guess the term ""related packages"" raises expectations a bit to far, indicating a more substantial connection.

I think the ideas to check the parent package for (exported) classes or interfaces is worth trying.;;;","2021-04-23 02:16;hannesw;Here is the change in related packages for JDK 17 with the proposed fix. The first revision of this gist is the current code, the second revision is with the non-empty parent package restriction.

https://gist.github.com/hns/d0f946255a69027405836201b047965d/revisions;;;","2021-04-26 00:54;roboduke;Changeset: a85f6cbb
Author:    Hannes Wallnöfer <hannesw@openjdk.org>
Date:      2021-04-26 07:53:35 +0000
URL:       https://git.openjdk.java.net/jdk/commit/a85f6cbb
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
revise the help info for jmap histo command,JDK-8265612,5047507,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,lzang,lzang,lzang,2021-04-20 18:41,2021-05-12 17:31,2023-10-01 09:57,2021-05-06 21:41,,,,,,,,17,core-svc,,0,tencent-interest,,,,,,,,,,,,,"As discussed at https://github.com/openjdk/jdk/pull/2379#issuecomment-782597273. 
The help info for command `jmap -histo` should be revised.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2she3:",9223372036854775807,b22,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@22f3cc74,,,,,,,,,"2021-05-06 21:41;roboduke;Changeset: 3a474d95
Author:    Lin Zang <lzang@openjdk.org>
Committer: Serguei Spitsyn <sspitsyn@openjdk.org>
Date:      2021-05-07 04:40:49 +0000
URL:       https://git.openjdk.java.net/jdk/commit/3a474d953a608a0e4b40a4d0b53ec3e98d73f406
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Cannot call BootLoader::loadClassOrNull before initPhase2,JDK-8265605,5047500,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,iklam,mchung,mchung,2021-04-20 15:31,2021-05-19 18:06,2023-10-01 09:57,2021-05-13 23:27,17,,,,,,,17,hotspot,,0,cds,oracle-triage-17,,,,,,,,,,,,"test/jdk/java/lang/invoke/VarHandles/VarHandleTestMethodType* tests fail with an empty ArchivedClassLoaders::packageToModule when running with [1].

java.util.ServiceConfigurationError: Locale provider adapter ""CLDR""cannot be instantiated.
	at java.base/sun.util.locale.provider.LocaleProviderAdapter.forType(LocaleProviderAdapter.java:199)
	at java.base/sun.util.locale.provider.LocaleProviderAdapter.findAdapter(LocaleProviderAdapter.java:287)
	at java.base/sun.util.locale.provider.LocaleProviderAdapter.getAdapter(LocaleProviderAdapter.java:258)
	at java.base/java.util.Calendar.createCalendar(Calendar.java:1693)
	at java.base/java.util.Calendar.getInstance(Calendar.java:1661)
	at java.base/java.text.SimpleDateFormat.initializeCalendar(SimpleDateFormat.java:680)
	at java.base/java.text.SimpleDateFormat.<init>(SimpleDateFormat.java:624)
	at java.base/java.text.SimpleDateFormat.<init>(SimpleDateFormat.java:603)
	at org.testng.reporters.XMLReporter.addDurationAttributes(XMLReporter.java:180)
	at org.testng.reporters.XMLReporter.getSuiteAttributes(XMLReporter.java:171)
	at org.testng.reporters.XMLReporter.writeSuiteToBuffer(XMLReporter.java:114)
	at org.testng.reporters.XMLReporter.writeSuite(XMLReporter.java:86)
	at org.testng.reporters.XMLReporter.generateReport(XMLReporter.java:63)
	at org.testng.TestNG.generateReports(TestNG.java:1076)
	at org.testng.TestNG.run(TestNG.java:1035)
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:94)
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:54)
	at java.base/jdk.internal.reflect.DirectMethodAccessorImpl$StaticMethodAccessor.invoke(DirectMethodAccessorImpl.java:150)
	at java.base/java.lang.reflect.Method.invoke(Method.java:574)
	at com.sun.javatest.regtest.agent.MainWrapper$MainThread.run(MainWrapper.java:127)
	at java.base/java.lang.Thread.run(Thread.java:831)
Caused by: java.lang.reflect.InvocationTargetException
	at java.base/jdk.internal.reflect.DirectConstructorAccessorImpl.newInstance(DirectConstructorAccessorImpl.java:91)
	at java.base/java.lang.reflect.Constructor.newInstanceWithCaller(Constructor.java:500)
	at java.base/java.lang.reflect.Constructor.newInstance(Constructor.java:481)
	at java.base/sun.util.locale.provider.LocaleProviderAdapter.forType(LocaleProviderAdapter.java:188)
	... 20 more
Caused by: java.util.ServiceConfigurationError: sun.util.locale.provider.LocaleDataMetaInfo: Provider sun.util.resources.cldr.provider.CLDRLocaleDataMetaInfo not found
	at java.base/java.util.ServiceLoader.fail(ServiceLoader.java:589)
	at java.base/java.util.ServiceLoader.loadProvider(ServiceLoader.java:868)
	at java.base/java.util.ServiceLoader$ModuleServicesLookupIterator.hasNext(ServiceLoader.java:1076)
	at java.base/java.util.ServiceLoader$2.hasNext(ServiceLoader.java:1299)
	at java.base/java.util.ServiceLoader$3.hasNext(ServiceLoader.java:1383)
	at java.base/sun.util.cldr.CLDRLocaleProviderAdapter$1.run(CLDRLocaleProviderAdapter.java:89)
	at java.base/sun.util.cldr.CLDRLocaleProviderAdapter$1.run(CLDRLocaleProviderAdapter.java:86)
	at java.base/java.security.AccessController.doPrivileged(AccessController.java:554)
	at java.base/sun.util.cldr.CLDRLocaleProviderAdapter.<init>(CLDRLocaleProviderAdapter.java:86)
	at java.base/jdk.internal.reflect.DirectConstructorAccessorImpl.newInstance(DirectConstructorAccessorImpl.java:79)
	... 23 more

It happens only when -Djava.lang.invoke.VarHandle.VAR_HANDLE_IDENTITY_ADAPT=true is set (fastdebug build).

The tests pass when running with -Xshare:off or  disable the archived module graph by setting ""-Djdk.module.showModuleResolution"" when disabled the archive module graph but no trace output.

[1] https://github.com/openjdk/jdk/compare/master...mlchung:method-invoke-4",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-6824466,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2shcj:",9223372036854775807,b23,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,,,"2021-04-20 16:43;iklam;I can narrow down a minimal reproducer.  The two -D options, as well as -esa, are required for the failure.

public class SimpleDateFormatTester {
    public static void main(String args[]) {
        System.out.println(new java.text.SimpleDateFormat());
    }
}

$ mach5/jdk-17/fastdebug/bin/java -showversion \
    -esa \
    -Djava.lang.invoke.VarHandle.VAR_HANDLE_GUARDS=true \
    -Djava.lang.invoke.VarHandle.VAR_HANDLE_IDENTITY_ADAPT=true \
   -cp . SimpleDateFormatTester
java version ""17-internal"" 2021-09-14 LTS
Java(TM) SE Runtime Environment (fastdebug build 17-internal+0-LTS-2021-04-20-1945480.mandy.chung.closed)
Java HotSpot(TM) 64-Bit Server VM (fastdebug build 17-internal+0-LTS-2021-04-20-1945480.mandy.chung.closed, mixed mode, sharing)
Exception in thread ""main"" java.util.ServiceConfigurationError: Locale provider adapter ""CLDR""cannot be instantiated.
	at java.base/sun.util.locale.provider.LocaleProviderAdapter.forType(LocaleProviderAdapter.java:199)
	at java.base/sun.util.locale.provider.LocaleProviderAdapter.findAdapter(LocaleProviderAdapter.java:287)
	at java.base/sun.util.locale.provider.LocaleProviderAdapter.getAdapter(LocaleProviderAdapter.java:258)
	at java.base/java.util.Calendar.createCalendar(Calendar.java:1693)
	at java.base/java.util.Calendar.getInstance(Calendar.java:1661)
	at java.base/java.text.SimpleDateFormat.initializeCalendar(SimpleDateFormat.java:680)
	at java.base/java.text.SimpleDateFormat.<init>(SimpleDateFormat.java:624)
	at java.base/java.text.SimpleDateFormat.<init>(SimpleDateFormat.java:579)
	at SimpleDateFormatTester.main(SimpleDateFormatTester.java:3)
Caused by: java.lang.reflect.InvocationTargetException
	at java.base/jdk.internal.reflect.DirectConstructorAccessorImpl.newInstance(DirectConstructorAccessorImpl.java:91)
	at java.base/java.lang.reflect.Constructor.newInstanceWithCaller(Constructor.java:500)
	at java.base/java.lang.reflect.Constructor.newInstance(Constructor.java:481)
	at java.base/sun.util.locale.provider.LocaleProviderAdapter.forType(LocaleProviderAdapter.java:188)
	... 8 more
Caused by: java.util.ServiceConfigurationError: sun.util.locale.provider.LocaleDataMetaInfo: Provider sun.util.resources.cldr.provider.CLDRLocaleDataMetaInfo not found
	at java.base/java.util.ServiceLoader.fail(ServiceLoader.java:589)
	at java.base/java.util.ServiceLoader.loadProvider(ServiceLoader.java:868)
	at java.base/java.util.ServiceLoader$ModuleServicesLookupIterator.hasNext(ServiceLoader.java:1076)
	at java.base/java.util.ServiceLoader$2.hasNext(ServiceLoader.java:1299)
	at java.base/java.util.ServiceLoader$3.hasNext(ServiceLoader.java:1383)
	at java.base/sun.util.cldr.CLDRLocaleProviderAdapter$1.run(CLDRLocaleProviderAdapter.java:89)
	at java.base/sun.util.cldr.CLDRLocaleProviderAdapter$1.run(CLDRLocaleProviderAdapter.java:86)
	at java.base/java.security.AccessController.doPrivileged(AccessController.java:554)
	at java.base/sun.util.cldr.CLDRLocaleProviderAdapter.<init>(CLDRLocaleProviderAdapter.java:86)
	at java.base/jdk.internal.reflect.DirectConstructorAccessorImpl.newInstance(DirectConstructorAccessorImpl.java:79)
	... 11 more;;;","2021-04-22 18:13;mchung;To recap the discussion Ioi and I had.   The stacktrace shows that BootLoader is not useable prior to module system initialization with the archived module graph.  ArchivedClassLoaders::packageToMap is empty if it's called prior to initPhase2.  

The fix for JDK-6824466 changes the core reflection to use method handles as soon as java.lang.invoke is initialized.  This change considers that java.lang.invoke is fully initialized right before MethodHandleNatives::verifyConstants is called.  At that point Field::get will use VarHandle to access fields.   The java.lang.invoke implementation uses BootLoader::loadClassOrNull to find if species has been loaded.   Prior to the CDS support to archive module graph, BootLoader is usable during early VM initialization since it delegates the class loading to VM via JavaLangAccess::findBootstrapClassOrNull.  ArchivedClassLoaders, ArchivedBootLayer etc have changed the dependency that BuiltinClassLoader cannot be used before initPhase2.  This restriction needs to be revisited.

	at java.base/java.lang.Thread.dumpStack(Thread.java:1377)
	at java.base/jdk.internal.loader.BuiltinClassLoader.<clinit>(BuiltinClassLoader.java:168)
	at java.base/jdk.internal.misc.CDS.initializeFromArchive(Native Method)
	at java.base/jdk.internal.loader.ArchivedClassLoaders.<clinit>(ArchivedClassLoaders.java:94)
	at java.base/jdk.internal.loader.BootLoader.<clinit>(BootLoader.java:70)
	at java.base/java.lang.invoke.ClassSpecializer$Factory.loadSpecies(ClassSpecializer.java:477)
	at java.base/java.lang.invoke.ClassSpecializer.findSpecies(ClassSpecializer.java:195)
	at java.base/java.lang.invoke.ClassSpecializer.<init>(ClassSpecializer.java:129)
	at java.base/java.lang.invoke.BoundMethodHandle$Specializer.<init>(BoundMethodHandle.java:404)
	at java.base/java.lang.invoke.BoundMethodHandle.<clinit>(BoundMethodHandle.java:382)
	at java.base/jdk.internal.misc.Unsafe.ensureClassInitialized0(Native Method)
	at java.base/jdk.internal.misc.Unsafe.ensureClassInitialized(Unsafe.java:1155)
	at java.base/java.lang.invoke.LambdaForm.createFormsFor(LambdaForm.java:1688)
	at java.base/java.lang.invoke.LambdaForm.identityForm(LambdaForm.java:1646)
	at java.base/java.lang.invoke.MethodHandles.makeIdentity(MethodHandles.java:5094)
	at java.base/java.lang.invoke.MethodHandles.identity(MethodHandles.java:5036)
	at java.base/java.lang.invoke.VarHandles.maybeAdapt(VarHandles.java:354)
	at java.base/java.lang.invoke.VarHandles.makeFieldHandle(VarHandles.java:150)
	at java.base/java.lang.invoke.MethodHandles$Lookup.getFieldVarHandleCommon(MethodHandles.java:4096)
	at java.base/java.lang.invoke.MethodHandles$Lookup.getFieldVarHandleNoSecurityManager(MethodHandles.java:4062)
	at java.base/java.lang.invoke.MethodHandles$Lookup.unreflectVarHandle(MethodHandles.java:3594)
	at java.base/java.lang.invoke.MethodHandleImpl$1.unreflectVarHandle(MethodHandleImpl.java:1845)
	at java.base/jdk.internal.reflect.MethodHandleAccessorFactory.newFieldAccessor(MethodHandleAccessorFactory.java:112)
	at java.base/jdk.internal.reflect.ReflectionFactory.newFieldAccessor(ReflectionFactory.java:181)
	at java.base/java.lang.reflect.Field.acquireFieldAccessor(Field.java:1128)
	at java.base/java.lang.reflect.Field.getFieldAccessor(Field.java:1109)
	at java.base/java.lang.reflect.Field.getInt(Field.java:597)
	at java.base/java.lang.invoke.MethodHandleNatives.verifyConstants(MethodHandleNatives.java:231)
	at java.base/java.lang.invoke.MethodHandleNatives.<clinit>(MethodHandleNatives.java:250);;;","2021-05-03 19:03;iklam;I found that it would be very difficult to make BootLoader accessible to ClassSpecializer$Factory.loadSpecies() before the archived module graph is loaded:

https://github.com/iklam/jdk/blame/db0d644701d6e4232cceb3a083d7d78d66800dbe/src/java.base/share/classes/java/lang/invoke/ClassSpecializer.java#L477

     S loadSpecies(S speciesData) {
            String className = speciesData.deriveClassName();
            assert(className.indexOf('/') < 0) : className;
            Class<?> salvage = null;
            try {
                salvage = BootLoader.loadClassOrNull(className);

This would cause the following to be executed:

    class BootLoader {
      public static Class<?> loadClassOrNull(String name) {
        return ClassLoaders.bootLoader().loadClassOrNull(name);  <<<<<
      }

So ClassLoaders will be initialized:

https://github.com/openjdk/jdk/blob/3544a9d0e4a071ad9c82aa17ab113e0101b4020b/src/java.base/share/classes/jdk/internal/loader/ClassLoaders.java#L63

    static {
        ArchivedClassLoaders archivedClassLoaders = ArchivedClassLoaders.get();
        if (archivedClassLoaders != null) {
            // assert VM.getSavedProperty(""jdk.boot.class.path.append"") == null
            BOOT_LOADER = (BootClassLoader) archivedClassLoaders.bootLoader();

But this BOOT_LOADER contains initialized states for loaded modules. These states will not be consistent with the rest of the module system (such as the boot layer, which has not be initialized)

The archived module graph must be initialized at a fixed order:

https://github.com/openjdk/jdk/blob/3544a9d0e4a071ad9c82aa17ab113e0101b4020b/src/java.base/share/classes/jdk/internal/module/ModuleBootstrap.java#L167

        if (archivedBootLayer != null) {
            assert canUseArchivedBootLayer();
            bootLayer = archivedBootLayer.bootLayer();
            BootLoader.getUnnamedModule(); // trigger <clinit> of BootLoader.
            CDS.defineArchivedModules(ClassLoaders.platformClassLoader(), ClassLoaders.appClassLoader());

            // assume boot layer has at least one module providing a service
            // that is mapped to the application class loader.
            JLA.bindToLoader(bootLayer, ClassLoaders.appClassLoader());

So trying to access BootLoader before the above happens will not be safe.

;;;","2021-05-03 19:05;iklam;My recommendation for fixing this issue is to avoid accessing the BootLoader before the module system is initialized:

https://github.com/iklam/jdk/commit/dcd0100b9f84600def401418a3d93e480dd9bedc

        S loadSpecies(S speciesData) {
            String className = speciesData.deriveClassName();
            assert(className.indexOf('/') < 0) : className;
            Class<?> salvage = null;
            try {
                if (VM.isModuleSystemInited()) {
                    salvage = BootLoader.loadClassOrNull(className);
                } else {
                    salvage = JLA.findBootstrapClassOrNull(null, className);
                }

With the above fix, my minimal test cases passes, as well as all tests under test/jdk/java/lang/invoke/VarHandles/VarHandleTestMethodType*;;;","2021-05-04 16:12;iklam;After discussion with Mandy, I think we can fix it by changing BootLoader.loadClassOrNull to do this:

        protected Class<?> loadClassOrNull(String cn, boolean resolve) {
            return JLA.findBootstrapClassOrNull(cn);
        }

also, change BootLoader.SERVICES_CATALOG to be initialized inside ClassLoaders.<clinit> (similar to app/platform loaders)

https://github.com/iklam/jdk/compare/db0d644701d6e4232cceb3a083d7d78d66800dbe...e4720a6a32019d32024bf1bdfd03182e95f4b40a;;;","2021-05-13 23:27;roboduke;Changeset: 1e0ecd6d
Author:    Ioi Lam <iklam@openjdk.org>
Date:      2021-05-14 06:26:41 +0000
URL:       https://git.openjdk.java.net/jdk/commit/1e0ecd6d56541c948e0d120295f5008d3248598f
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,
[windows] last button is not shown in AWT Frame with BorderLayout and MenuBar set.,JDK-8265586,5047469,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,honkar,azvegint,azvegint,2021-04-20 12:31,2023-09-22 00:50,2023-10-01 09:57,2022-06-14 12:52,11,16,17,18,19,20,8,20,client-libs,,0,jdk11u-fix-request,jdk11u-fix-yes,jdk17u-fix-request,jdk17u-fix-yes,sn_117,sn_118,sn_119,sn_120,,,,,,"Please see sample below, issue can be workarounded by calling pack() twice or by resizing window.

import java.awt.BorderLayout;
import java.awt.Button;
import java.awt.Frame;
import java.awt.HeadlessException;
import java.awt.Menu;
import java.awt.MenuBar;
import java.awt.Panel;

public class WindowsBorderLayoutMenuPack extends Frame {

    public WindowsBorderLayoutMenuPack() throws HeadlessException {
        setLayout(new BorderLayout());

        MenuBar mb = new MenuBar();
        Menu m = new Menu(""Menu"");
        mb.add(m);

        setMenuBar(mb);

        Panel panel = new Panel();
        panel.add(new Button(""Dummy Button B1""));
        panel.add(new Button(""Dummy Button B2""));

        add(panel, BorderLayout.CENTER);
    }

    public static void main(String[] args) {
        WindowsBorderLayoutMenuPack frame = new WindowsBorderLayoutMenuPack();
        frame.setLocationRelativeTo(null);
        frame.pack();
        //frame.pack(); // uncomment to workaround the issue, only works if pack() called twice.
        frame.setVisible(true);
    }
}
",,,,,,,,,,,JDK-8314496,JDK-8313715,JDK-8313714,JDK-8313846,JDK-8316573,JDK-8316713,,,,,,,,,,,,,,,,,,,,,JDK-8288993,JDK-8288325,JDK-8288444,,"2021-04-20 12:31;azvegint;screenshot-1.png;https://bugs.openjdk.org/secure/attachment/94319/screenshot-1.png",,,,,,,,,,,,,,,,,,,,windows_10,,,,,"0|i2sh5n:",9223372036854775807,b02,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@5a9b3fd3,,,,,,,,,"2022-05-05 11:49;honkar;Replicable on windows 10 and jdk 19;;;","2022-06-07 10:01;honkar;This is occurring as a result of wrong frame size and inset values. Potential fix being evaluated in java/awt/Component.java's reshape method.
After calling reshapeNativePeer() in reshape, correct insets and preferred size of frame being reflected.
;;;","2022-06-08 16:20;honkar;Incorrect inset values were being returned from the native code when menubar was added to frame. The insets value returned ::GetSystemMetrics(SM_CXSIZEFRAME) and ::GetSystemMetrics(SM_CYSIZEFRAME) were off by 6 pixels on all four sides.

Current fix location: AwtWindow::UpdateInsets() method in awt_Window.cpp;;;","2022-06-09 09:01;honkar;Currently failing on Mach5, the scaling down of insets not working properly. Investigating it further.;;;","2022-06-09 23:01;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/9118
Date: 2022-06-10 05:55:35 +0000;;;","2022-06-10 14:00;honkar;Currently the fix and test case works for resizable frames. For non-resizable frames the second button is visible if the padded border ::GetSystemMetrics(SM_CXPADDEDBORDER) is added, but the actual size of the frame and the preferredSize of the frame is off by few pixels. Investigating this further.;;;","2022-06-14 12:52;dukebot;Changeset: bbaeacb5
Author:    Harshitha Onkar <honkar@openjdk.org>
Committer: Dmitry Markov <dmarkov@openjdk.org>
Date:      2022-06-14 19:48:06 +0000
URL:       https://git.openjdk.org/jdk/commit/bbaeacb597a8acc2c88793a6231c53ea0453f4d4
;;;","2023-09-15 00:45;goetz;Fix request [17u]

I backport this for parity with 17.0.10-oracle.
Low risk, awt change limited to one platform.
Clean backport, I include follow up test fix JDK-8288993.
Test passes on win. SAP nighlty testing passed.;;;","2023-09-15 00:48;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/1743
Date: 2023-09-15 07:41:53 +0000;;;","2023-09-21 03:51;goetz;Fix request [11u]

I backport this for parity with 11.0.22-oracle from 17 inlcuding JDK-8288993.
Low risk, awt change limited to one platform.
Clean backport,
Test passes on win. SAP nighlty testing passed. ;;;","2023-09-21 04:02;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk11u-dev/pull/2138
Date: 2023-09-21 10:56:08 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,
x86 version string truncated after JDK-8249672 11u backport,JDK-8265537,5047416,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,shade,shade,shade,2021-04-20 10:18,2021-05-05 05:25,2023-10-01 09:57,2021-04-26 11:01,11.0.10,,,,,,,11.0.12,hotspot,,0,jdk11u-fix-request,jdk11u-fix-yes,oraclejdk-na,redhat-interest,regression,,,,,,,,,"I have been trying to run compiler/intrinsics/sha on 11u, and this happened on TR 3970X (AMD supports SHA on most of their chips, in contrast to Intel):

$ CONF=linux-x86_64-normal-server-fastdebug make images run-test TEST=compiler/intrinsics/sha/
TEST: compiler/intrinsics/sha/cli/TestUseSHA256IntrinsicsOptionOnUnsupportedCPU.java

TEST RESULT: Failed. Execution failed: `main' threw exception: java.lang.AssertionError: Option 'UseSHA256Intrinsics' is expected to have 'false' value Option 'UseSHA256Intrinsics' should be disabled by default

The cause seems to be the JDK-8249672 backport, which effectively enlarged the version string, and resulting string stopped fitting. This is generally innocuous for product code, but the tests line SHA intrinsics tests are going to that version string through Whitebox. At that time, the current 11u test code does not see ""sha"" feature for the machine in question (thus thinking UseSHA* should be false), while VM code knows that sha is supported (and thus UseSHA* are true). Tests then expectedly fail.

Mainline and 11u have different buffer sizes. Compare original and backport:
https://hg.openjdk.java.net/jdk-updates/jdk11u/rev/5c41dc4c48f8#l1.6
https://hg.openjdk.java.net/jdk/jdk/rev/931c949e05e4#l1.5

The buffer size was increased with JDK-8238696:
 https://hg.openjdk.java.net/jdk/jdk/rev/a9a78d821f37#l3.20

...but that one seems somewhat hard to backport, because it touches a few AVX512 code paths. So, I believe a targeted 11u fix amending the 11u backport is better.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8249672,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2sgtv:",9223372036854775807,b01,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,,,"2021-04-20 10:24;shade;Fix Request (11u)

This resolves the test failure on 11u. Patch is 11u and trivial. 11u RFR (acked by mtorre): https://mail.openjdk.java.net/pipermail/jdk-updates-dev/2021-April/005846.html;;;","2021-04-26 11:01;hgupdate;URL:   https://hg.openjdk.java.net/jdk-updates/jdk11u-dev/rev/c6663c6eb0bd
User:  shade
Date:  2021-04-26 17:58:13 +0000
;;;","2021-05-05 05:16;hgupdate;URL:   https://hg.openjdk.java.net/jdk-updates/jdk11u/rev/c6663c6eb0bd
User:  goetz
Date:  2021-05-05 12:03:09 +0000
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
doc/building.md should mention homebrew install freetype,JDK-8265531,5047409,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,erikj,sgehwolf,sgehwolf,2021-04-20 08:39,2022-07-21 02:04,2023-10-01 09:57,2021-04-23 10:53,,,,,,,,17,infrastructure,,0,jdk11u-fix-request,jdk11u-fix-yes,jdk16u-fix-request,jdk16u-fix-SQE-ok,jdk16u-fix-yes,,,,,,,,,There is no suggestion on how to get the freetype dependency on Mac OSX. It should get added.,,,,,,,,,,,JDK-8266325,JDK-8267023,JDK-8290779,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,os_x,,,,,"0|i2sgsb:",9223372036854775807,b20,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@429c566,,,,,,,,,"2021-04-20 08:40;sgehwolf;Created on behalf of George Adams who is working on it.;;;","2021-04-23 10:53;roboduke;Changeset: 5aab1609
Author:    George Adams <georgeadams1995@gmail.com>
Committer: Erik Joelsson <erikj@openjdk.org>
Date:      2021-04-23 17:52:26 +0000
URL:       https://git.openjdk.java.net/jdk/commit/5aab1609
;;;","2021-04-26 02:46;clanger;Fix request (16u, 11u) on behalf of George Adams:
Please approve this doc only change. There is no risk associated, applies clean.;;;","2022-07-18 05:57;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk11u-dev/pull/1236
Date: 2022-07-18 12:49:35 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
"Specification of BasicSplitPaneDivider::getMinimumSize,getPreferredSize doesn't match with its behavior.",JDK-8265528,5047402,Bug,Resolved,JDK,JDK,software,duke,,,P2,Fixed,psadhukhan,amadgundi,amadgundi,2021-04-20 06:44,2021-05-19 18:05,2023-10-01 09:57,2021-05-12 21:43,10,15,16,17,9,,,17,client-libs,,0,conformance,sn_92,sn_93,tck-red-17,,,,,,,,,,"As per spec of getPreferredSize() and getMinimumSize(): 
https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/plaf/basic/BasicSplitPaneDivider.html#getPreferredSize()
https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/plaf/basic/BasicSplitPaneDivider.html#getMinimumSize()

""Returns dividerSize x dividerSize""
It is not perfectly clear that dividerSize x dividerSize returns (expected to return) an instance of Dimension with height = dividerSize and width = dividerSize.

Also JDK implementation of getPreferredSize() and getMinimumSize() methods do not return new Dimension(getDividerSize(), getDividerSize()), rather returns instance of Dimension depending upon HORIZONTAL_SPLIT and VERTICAL_SPLIT. 
Implementation snap:
if (orientation == JSplitPane.HORIZONTAL_SPLIT) {
    return new Dimension(getDividerSize(), 1);
}
return new Dimension(1, getDividerSize());",,,,,,,,,,,,,,,,,,,,,,,,JDK-8266541,,,,,,,,,JCK-7315840,,,,,,,,,,,,,,,,,,,,,,,,,,9,,,,,,,"0|i2sgqr:",9223372036854775807,b23,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@568a5b31,,,,,,,,,"2021-05-12 21:43;roboduke;Changeset: b50fc5f9
Author:    Prasanta Sadhukhan <psadhukhan@openjdk.org>
Date:      2021-05-13 04:42:38 +0000
URL:       https://git.openjdk.java.net/jdk/commit/b50fc5f992c2a1bdcdc8cae4aacf2a16598d5d05
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
tools/javac/diags/CheckExamples.java fails after JDK-8078024 8u backport,JDK-8265527,5047400,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,peterz,shade,shade,2021-04-20 05:51,2022-11-03 09:32,2023-10-01 09:57,2022-10-25 22:40,openjdk8u292,,,,,,,openjdk8u362,tools,,0,jdk8u-fix-request,jdk8u-fix-yes,redhat-interest,regression,,,,,,,,,,"Reproduces in current jdk8u/jdk8u-dev, see:

$ CONF=linux-x86_64-normal-server-fastdebug make clean images test TEST=langtools_tier1

TEST: tools/javac/diags/CheckExamples.java

STDERR:
Error: Example /home/shade/trunks/jdk8u-dev/langtools/test/tools/javac/diags/examples/WhereIntersection.java declares key compiler.misc.inferred.do.not.conform.to.upper.bounds but does not generate it
Error: Example /home/shade/trunks/jdk8u-dev/langtools/test/tools/javac/diags/examples/WhereIntersection.java declares key compiler.misc.intersection.type but does not generate it
Error: Example /home/shade/trunks/jdk8u-dev/langtools/test/tools/javac/diags/examples/WhereIntersection.java declares key compiler.misc.where.description.intersection.1 but does not generate it
Error: Example /home/shade/trunks/jdk8u-dev/langtools/test/tools/javac/diags/examples/WhereIntersection.java declares key compiler.misc.where.intersection but does not generate it
Error: Example /home/shade/trunks/jdk8u-dev/langtools/test/tools/javac/diags/examples/WhereIntersection.java generates key compiler.misc.incompatible.upper.lower.bounds but does not declare it
Error: Example /home/shade/trunks/jdk8u-dev/langtools/test/tools/javac/diags/examples/WhereIntersection.java generates key compiler.misc.where.description.typevar but does not declare it
Error: Example /home/shade/trunks/jdk8u-dev/langtools/test/tools/javac/diags/examples/WhereIntersection.java generates key compiler.misc.where.typevar but does not declare it

This seems to go away when JDK-8078024 is reverted. 
It is somewhat masked by NoJavaLang bug: there are *two* failures in that test. NoJavaLang failure is to be fixed with JDK-8260484 backport.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8249715,JDK-8078024,JDK-8295950,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2sgqb:",9223372036854775807,b01,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4dca67bd,,,,,,,,,"2022-10-12 07:06;zzambers;Any progress here? This currently causes the only failure in langtools_tier1 and blocks enabling langtools_tier1 testing in github actions.;;;","2022-10-21 02:33;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk8u-dev/pull/146
Date: 2022-10-21 09:28:11 +0000;;;","2022-10-25 22:40;dukebot;Changeset: f04ad96c
Author:    Peter Zhelezniakov <peterz@openjdk.org>
Date:      2022-10-26 05:37:56 +0000
URL:       https://git.openjdk.org/jdk8u-dev/commit/f04ad96cf53385c9f8aa071a4167ad7790cb8466
;;;","2022-11-03 04:34;dukebot;Changeset: f04ad96c
Author:    Peter Zhelezniakov <peterz@openjdk.org>
Date:      2022-10-26 05:37:56 +0000
URL:       https://git.openjdk.org/jdk8u/commit/f04ad96cf53385c9f8aa071a4167ad7790cb8466
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Openjfx controls running tests broken (Eclipse),JDK-8265514,5047385,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,arapte,fastegal,fastegal,2021-04-20 02:57,2021-04-27 11:24,2023-10-01 09:57,2021-04-22 19:30,jfx17,,,,,,,jfx17,javafx,,0,css,sn_91,test_sprint,testbug,,,,,,,,,,"trying to run any test (in Eclipse) fails with:

Error occurred during initialization of boot layer
java.lang.LayerInstantiationException: Package test.javafx.css in both module javafx.graphics and module javafx.controls

This was introduced by JDK-8204568: it created a test package in controls with the same name as a test package in graphics. Gradle runs are okay. Nevertheless, same packages in different modules are suboptimal. 

Simplest (?) fix might be to rename the test package in controls, it doesn't follow the usual conventions (which I assume to be the same as the classes that are tested reside in) anyway. 
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8204568,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2sgmz:",9223372036854775807,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@67282485,,,,,,,,,"2021-04-20 07:04;kcr;We should fix this. This would likely be a problem loading and running the tests from IntelliJ as well (or Netbeans, but I think NB still has other issues).;;;","2021-04-20 07:16;kcr;> Simplest (?) fix might be to rename the test package in controls

That seems best to me, too.;;;","2021-04-22 19:30;roboduke;Changeset: dfda00df
Author:    Ambarish Rapte <arapte@openjdk.org>
Date:      2021-04-23 02:29:47 +0000
URL:       https://git.openjdk.java.net/jfx/commit/dfda00df
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Openjfx graphics build broken (Eclipse),JDK-8265513,5047383,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,fastegal,fastegal,fastegal,2021-04-20 02:43,2021-05-10 04:20,2023-10-01 09:57,2021-04-23 07:42,jfx17,,,,,,,jfx17,javafx,,0,build,Eclipse,noreg-build,,,,,,,,,,,"was introduced in JDK-8264330 by using JMemoryBuddy in SceneTest

Fix is same as that of JDK-8256184 (which was about controls): change .classpath in graphics to add-exports of base to include test.util-memory",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8256184,JDK-8244297,JDK-8264330,,JDK-8266811,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2sgmj:",9223372036854775807,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@1d1c7815,,,,,,,,,"2021-04-23 07:42;roboduke;Changeset: db30e712
Author:    Jeanette Winzenburg <fastegal@openjdk.org>
Date:      2021-04-23 14:41:41 +0000
URL:       https://git.openjdk.java.net/jfx/commit/db30e712
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
findsym does not work on remote debug server,JDK-8265505,5047369,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,ysuenaga,ysuenaga,ysuenaga,2021-04-19 23:29,2022-07-28 21:50,2023-10-01 09:57,2021-05-04 17:26,16,17,,,,,,17,hotspot,,0,,,,,,,,,,,,,,"We can see following error when we run `findsym` on CLHSDB which connects to remote debug server.

```
hsdb> verbose true
hsdb> findsym gHotSpotVMTypes
0x00007f913d4a45b0Error: java.lang.NullPointerException: Cannot invoke ""sun.jvm.hotspot.debugger.cdbg.CDebugger.loadObjectContainingPC(sun.jvm.hotspot.debugger.Address)"" because ""cdbg"" is null
java.lang.NullPointerException: Cannot invoke ""sun.jvm.hotspot.debugger.cdbg.CDebugger.loadObjectContainingPC(sun.jvm.hotspot.debugger.Address)"" because ""cdbg"" is null
        at jdk.hotspot.agent/sun.jvm.hotspot.CommandProcessor$7.doit(CommandProcessor.java:618)
        at jdk.hotspot.agent/sun.jvm.hotspot.CommandProcessor.executeCommand(CommandProcessor.java:2116)
        at jdk.hotspot.agent/sun.jvm.hotspot.CommandProcessor.executeCommand(CommandProcessor.java:2086)
        at jdk.hotspot.agent/sun.jvm.hotspot.CommandProcessor.run(CommandProcessor.java:1957)
        at jdk.hotspot.agent/sun.jvm.hotspot.CLHSDB.run(CLHSDB.java:112)
        at jdk.hotspot.agent/sun.jvm.hotspot.CLHSDB.main(CLHSDB.java:44)
        at jdk.hotspot.agent/sun.jvm.hotspot.SALauncher.runCLHSDB(SALauncher.java:282)
        at jdk.hotspot.agent/sun.jvm.hotspot.SALauncher.main(SALauncher.java:493)
```",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8291522,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2sgjf:",9223372036854775807,b21,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@714e388c,,,,,,,,,"2021-05-04 17:26;roboduke;Changeset: 8bcebe73
Author:    Yasumasa Suenaga <ysuenaga@openjdk.org>
Date:      2021-05-05 00:26:12 +0000
URL:       https://git.openjdk.java.net/jdk/commit/8bcebe73d283bd651a0e2d30133e40cca655f335
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Some impls of javax.crypto.Cipher.init() do not throw UnsupportedOperationExc for unsupported modes,JDK-8265500,5047362,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,valeriep,tvoniadka,tvoniadka,2021-04-19 22:08,2021-07-15 10:06,2023-10-01 09:57,2021-06-17 16:29,11,17,7,8,,,,17,security-libs,,0,sqebug,,,,,,,,,,,,,"Looks like the Cipher init methods throw InvalidAlgorithmParameterException instead of UnsupportedOperationException when an unsupported mode is encountered. The SunPKCS11 provider is the example here:

The SunPKCS11 provider's implementation of Cipher.init() method does not seem to align with the spec. According to the spec:

""
UnsupportedOperationException - if opmode is WRAP_MODE or UNWRAP_MODE but the mode is not implemented by the underlying CipherSpi.
""

However, the attached code throws the following exception:

-----------------------------------------------------

java.security.InvalidAlgorithmParameterException: Unsupported mode: 3
        at jdk.crypto.cryptoki/sun.security.pkcs11.P11Cipher.implInit(P11Cipher.java:359)
        at jdk.crypto.cryptoki/sun.security.pkcs11.P11Cipher.engineInit(P11Cipher.java:320)
        at java.base/javax.crypto.Cipher.init(Cipher.java:1431)
        at java.base/javax.crypto.Cipher.init(Cipher.java:1364)
        at KeywrapTest.main(KeywrapTest.java:20)

-----------------------------------------------------

It seems like an InvalidAlgorithmParameterException is thrown instead of the UnsupportedOperationException?
",,,,,,,,,,,JDK-8270581,JDK-8269043,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,solaris,,,,,"0|i2sghv:",9223372036854775807,b28,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@7cafbd52,,,,,,,,,"2021-04-20 04:28;coffeys;This seems like long running behaviour in the JDK - would it be wiser to update the spec rather than change implementation ?;;;","2021-04-20 04:29;coffeys;Assigning this to security dev team who can make best decision;;;","2021-04-23 05:59;mullan;Ok, I updated the title to reflect that.;;;","2021-06-09 10:06;valeriep;Raising the priority due to the spec inconsistency.;;;","2021-06-17 16:29;roboduke;Changeset: 80dc262e
Author:    Valerie Peng <valeriep@openjdk.org>
Date:      2021-06-17 23:27:54 +0000
URL:       https://git.openjdk.java.net/jdk17/commit/80dc262e8132204d70b184b32978e6c456460fb0
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Unterminated string passed to FindClass() in hotspot test,JDK-8265490,5047342,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,hseigel,vprovodin,vprovodin,2021-04-19 15:29,2021-04-28 17:38,2023-10-01 09:57,2021-04-21 09:02,17,,,,,,,17,hotspot,,0,noreg-self,testbug,,,,,,,,,,,,"A hotspot test (test/hotspot/jtreg/runtime/jni/FindClassUtf8/libFindClassUtf8.c) uses an unterminated character string as the class name argument to FindClass():

    const uint64_t chars = 0x5b3132315d20f818UL;  // f8 is invalid utf8

    jclass badClass = (*env)->FindClass(env, (const char*)&chars);",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2sgdf:",9223372036854775807,b20,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,,,"2021-04-19 23:17;dholmes;Yep that is bad - we are lucky we don't crash.;;;","2021-04-20 11:04;mseledtsov;ILW = MLM = P4;;;","2021-04-21 09:02;roboduke;Changeset: 0136c89c
Author:    Harold Seigel <hseigel@openjdk.org>
Date:      2021-04-21 16:01:22 +0000
URL:       https://git.openjdk.java.net/jdk/commit/0136c89c
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Stress test times out because of long ObjectSynchronizer::monitors_iterate(...) operation,JDK-8265489,5047340,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,lmesnik,dcubed,dcubed,2021-04-19 15:28,2022-11-03 07:20,2023-10-01 09:57,2021-09-08 12:32,17,18,,,,,,18,hotspot,,0,intermittent,jdk17u-fix-request,jdk17u-fix-yes,test-bigapps-runThese,tier8,,,,,,,,,"The following test failed in the JDK17 CI:

applications/runthese/RunThese24H.java

Here's a snippet from the log file:

[stress.process.err] java.lang.NullPointerException: Cannot invoke ""String.startsWith(String)"" because the return value of ""java.lang.management.ThreadInfo.getLockName()"" is null
[stress.process.err] 	at javasoft.sqe.tests.api.java.util.concurrent.JSR166TestCase.dumpTestThreads(JSR166TestCase.java:659)
[stress.process.err] 	at javasoft.sqe.tests.api.java.util.concurrent.JSR166TestCase.tearDownFail(JSR166TestCase.java:331)
[stress.process.err] 	at javasoft.sqe.tests.api.java.util.concurrent.JSR166TestCase.checkForkJoinPoolThreadLeaks(JSR166TestCase.java:387)
[stress.process.err] 	at javasoft.sqe.tests.api.java.util.concurrent.JSR166TestCase.tearDown(JSR166TestCase.java:364)
[stress.process.err] 	at javasoft.sqe.tests.api.junit.TestCase.invokeTestCase(TestCase.java:53)
[stress.process.err] 	at javasoft.sqe.javatest.lib.MultiTest.run(MultiTest.java:193)
[stress.process.err] 	at javasoft.sqe.javatest.lib.MultiTest.run(MultiTest.java:125)
[stress.process.err] 	at javasoft.sqe.tests.api.java.util.concurrent.RecursiveActionTest.main(RecursiveActionTest.java:35)
[stress.process.err] 	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
[stress.process.err] 	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:78)
[stress.process.err] 	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
[stress.process.err] 	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
[stress.process.err] 	at applications.kitchensink.process.stress.modules.JckStressModule$TestRunner$1.run(JckStressModule.java:280)

I'm starting this failure in hotspot/test because it seems like a
test infrastructure bug, but I'm not sure. This failure mode also
seems familiar, but I couldn't find an existing bug that covers
this particular failure mode.",,,,,,,,,,,JDK-8295981,JDK-8296307,,,,,,,,,,,,,,,,,,,,,JDK-8270958,,,,,,,,"2021-04-21 10:19;lmesnik;test-support_jtreg_closed_test_hotspot_jtreg_applications_runthese_RunThese24H_java_applications_runthese_RunThese24H_processes.html;https://bugs.openjdk.org/secure/attachment/94336/test-support_jtreg_closed_test_hotspot_jtreg_applications_runthese_RunThese24H_java_applications_runthese_RunThese24H_processes.html",,,,,,,,,,,x86_64,,,,,,,,,linux,,,,,"0|i2sgcz:",9223372036854775807,b15,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@78d03d9a,,,,,,,,,"2021-04-19 19:14;lmesnik;It doesn't look like a test issue. These JCK issues in the log shouldn't affect test execution.

The jcmd failed to connect several times before the test time out. 

Also, I see the following suspicious threads in the stacktrace.

Thread 1174 (Thread 0x7f3d287ff700 (LWP 16998)):
#0  0x00007f3d81f41f07 in ObjectSynchronizer::monitors_iterate(MonitorClosure*) () from /opt/mach5/mesos/work_dir/jib-master/install/jdk-17+19-1557/linux-x64.jdk/jdk-17/lib/server/libjvm.so
#1  0x00007f3d81fa6b63 in ThreadStackTrace::dump_stack_at_safepoint(int) () from /opt/mach5/mesos/work_dir/jib-master/install/jdk-17+19-1557/linux-x64.jdk/jdk-17/lib/server/libjvm.so
#2  0x00007f3d820155d5 in VM_ThreadDump::doit() () from /opt/mach5/mesos/work_dir/jib-master/install/jdk-17+19-1557/linux-x64.jdk/jdk-17/lib/server/libjvm.so
#3  0x00007f3d8201582a in VM_Operation::evaluate() () from /opt/mach5/mesos/work_dir/jib-master/install/jdk-17+19-1557/linux-x64.jdk/jdk-17/lib/server/libjvm.so
#4  0x00007f3d82017108 in VMThread::evaluate_operation(VM_Operation*) () from /opt/mach5/mesos/work_dir/jib-master/install/jdk-17+19-1557/linux-x64.jdk/jdk-17/lib/server/libjvm.so
#5  0x00007f3d820175d8 in VMThread::inner_execute(VM_Operation*) () from /opt/mach5/mesos/work_dir/jib-master/install/jdk-17+19-1557/linux-x64.jdk/jdk-17/lib/server/libjvm.so
#6  0x00007f3d8201789f in VMThread::run() () from /opt/mach5/mesos/work_dir/jib-master/install/jdk-17+19-1557/linux-x64.jdk/jdk-17/lib/server/libjvm.so
#7  0x00007f3d81f99ade in Thread::call_run() () from /opt/mach5/mesos/work_dir/jib-master/install/jdk-17+19-1557/linux-x64.jdk/jdk-17/lib/server/libjvm.so
#8  0x00007f3d81df4957 in thread_native_entry(Thread*) () from /opt/mach5/mesos/work_dir/jib-master/install/jdk-17+19-1557/linux-x64.jdk/jdk-17/lib/server/libjvm.so
#9  0x00007f3d82a37ea5 in start_thread () from /lib64/libpthread.so.0
#10 0x00007f3d8255c9fd in clone () from /lib64/libc.so.6

Thread 1173 (Thread 0x7f3d286fd700 (LWP 16999)):
#0  0x00007f3d82a3ba35 in pthread_cond_wait@@GLIBC_2.3.2 () from /lib64/libpthread.so.0
#1  0x00007f3d81dfe74b in os::PlatformMonitor::wait(long) () from /opt/mach5/mesos/work_dir/jib-master/install/jdk-17+19-1557/linux-x64.jdk/jdk-17/lib/server/libjvm.so
#2  0x00007f3d81db1f0b in Monitor::wait(long, bool) () from /opt/mach5/mesos/work_dir/jib-master/install/jdk-17+19-1557/linux-x64.jdk/jdk-17/lib/server/libjvm.so
#3  0x00007f3d81adb20c in JVM_WaitForReferencePendingList () from /opt/mach5/mesos/work_dir/jib-master/install/jdk-17+19-1557/linux-x64.jdk/jdk-17/lib/server/libjvm.so
#4  0x00007f3d6dabb4df in ?? ()
#5  0x00007f3d286fca38 in ?? ()
#6  0x00007f3d7c091af0 in ?? ()
#7  0x00007f3d286fc990 in ?? ()
#8  0x00007f3d81a05159 in InterpreterRuntime::monitorexit(BasicObjectLock*) () from /opt/mach5/mesos/work_dir/jib-master/install/jdk-17+19-1557/linux-x64.jdk/jdk-17/lib/server/libjvm.so
#9  0x00007f3d657a99ce in ?? ()
#10 0x0000000000000003 in ?? ()
#11 0x00007f3d657a99ce in ?? ()
#12 0x00007f3d286fc9c0 in ?? ()
#13 0x0000000800ab2008 in ?? ()
#14 0x00007f3d286fca38 in ?? ()
#15 0x00000008003b96e8 in ?? ()
#16 0x00007f3bcb742170 in ?? ()
#17 0x000000022ee12020 in ?? ()
#18 0x00000008003bf5a8 in ?? ()
#19 0x00007f3d286fc9c0 in ?? ()
#20 0x00007f3d286fca40 in ?? ()
#21 0x00007f3d286fca88 in ?? ()
#22 0x00007f3d657a99ce in ?? ()
#23 0x0000000000000000 in ?? ();;;","2021-04-20 06:50;dcubed;What do you think is suspicious about these two threads? What am I missing here?;;;","2021-04-21 10:11;lmesnik;The test dumps thread stacks every 30 seconds, while jtreg timeout handler makes 5 native stack traces, and seems that VM always dumping stack trace.

;;;","2021-04-21 10:21;lmesnik;I attached the full jtreg handler report. It seems that there are might be other threads that could cause deadlock.


;;;","2021-04-28 21:19;lmesnik;The main symptom of this failure is timeout. There are 5 failures so far in CI and all of them happened on linux-x64 (NO DEBUG) and with -XX:+UseParallelGC.

The mem allocation is waiting for Heap_lock while allocating. I haven't found who is held Heap_lock and why this thread is stuck. ;;;","2021-04-29 11:00;lmesnik;The only single active thread is:
(gdb) bt full
#0  Atomic::PlatformLoad<4ul>::operator()<int> (dest=0x7ef6a0161560, this=<optimized out>) at /data1/lmesnik/ws/jdk/open/src/hotspot/share/runtime/atomic.hpp:613
No locals.
#1  Atomic::LoadImpl<int, Atomic::PlatformLoad<4ul>, void>::operator() (dest=0x7ef6a0161560, this=<optimized out>) at /data1/lmesnik/ws/jdk/open/src/hotspot/share/runtime/atomic.hpp:391
No locals.
#2  Atomic::load<int> (dest=0x7ef6a0161560) at /data1/lmesnik/ws/jdk/open/src/hotspot/share/runtime/atomic.hpp:614
No locals.
#3  ObjectMonitor::contentions (this=0x7ef6a01614a0) at /data1/lmesnik/ws/jdk/open/src/hotspot/share/runtime/objectMonitor.inline.hpp:82
No locals.
#4  ObjectMonitor::is_being_async_deflated (this=0x7ef6a01614a0) at /data1/lmesnik/ws/jdk/open/src/hotspot/share/runtime/objectMonitor.inline.hpp:77
No locals.
#5  ObjectSynchronizer::monitors_iterate (closure=closure@entry=0x7ef7961dd620) at /data1/lmesnik/ws/jdk/open/src/hotspot/share/runtime/synchronizer.cpp:1063
        mid = 0x7ef6a01614a0
        iter = {_current = 0x7ef7901fe1e0}
#6  0x00007f390e52f90c in ThreadStackTrace::dump_stack_at_safepoint (this=0x7ef78df17a50, maxDepth=2147483647) at /data1/lmesnik/ws/jdk/open/src/hotspot/share/services/threadService.cpp:696
        imc = {<MonitorClosure> = {<StackObj> = {<AllocatedObj> = {_vptr.AllocatedObj = 0x7f390ec182f8 <vtable for InflatedMonitorsClosure+16>}, <No data fields>}, <No data fields>}, _stack_trace = 0x7ef78df17a50, _thread = 0x7ef6e430a760}
#7  0x00007f390e52f9a2 in ThreadSnapshot::dump_stack_at_safepoint (this=this@entry=0x7ef78df17990, max_depth=<optimized out>, with_locked_monitors=<optimized out>) at /data1/lmesnik/ws/jdk/open/src/hotspot/share/services/threadService.cpp:946
No locals.
#8  0x00007f390e602911 in VM_ThreadDump::snapshot_thread (tcl=0x0, java_thread=<optimized out>, this=0x7eee39dfba80) at /data1/lmesnik/ws/jdk/open/src/hotspot/share/runtime/vmOperations.cpp:339
        snapshot = 0x7ef78df17990
#9  VM_ThreadDump::doit (this=0x7eee39dfba80) at /data1/lmesnik/ws/jdk/open/src/hotspot/share/runtime/vmOperations.cpp:297
        jt = <optimized out>
        tcl = 0x0
        i = 634
        rm = {<StackObj> = {<AllocatedObj> = {_vptr.AllocatedObj = 0x7f390eb4c790 <vtable for ResourceMark+16>}, <No data fields>}, _impl = {_area = 0x7f39085a6570, _saved_state = {_chunk = 0x7f39084c29d0, _hwm = 0x7f39084c29f0 '\253' <repeats 200 times>...,
              _max = 0x7f39084c2dc8 '\253' <repeats 16 times>, ""\265"", _size_in_bytes = 984, _nesting = 2}}, _thread = 0x7f39085a6150, _previous_resource_mark = 0x7ef7961de9c0}
        concurrent_locks = {<StackObj> = {<AllocatedObj> = {_vptr.AllocatedObj = 0x7f390ec17e38 <vtable for ConcurrentLocksDump+16>}, <No data fields>}, _map = 0x7eee7c128520, _last = 0x7eef036edee0, _retain_map_on_free = true}
#10 0x00007f390e6031ca in VM_Operation::evaluate (this=this@entry=0x7eee39dfba80) at /data1/lmesnik/ws/jdk/open/src/hotspot/share/runtime/vmOperations.cpp:70
        rm = {<StackObj> = {<AllocatedObj> = {_vptr.AllocatedObj = 0x7f390eb4c790 <vtable for ResourceMark+16>}, <No data fields>}, _impl = {_area = 0x7f39085a6570, _saved_state = {_chunk = 0x7f39084c29d0, _hwm = 0x7f39084c29f0 '\253' <repeats 200 times>...,
              _max = 0x7f39084c2dc8 '\253' <repeats 16 times>, ""\265"", _size_in_bytes = 984, _nesting = 1}}, _thread = 0x7f39085a6150, _previous_resource_mark = 0x7ef7961deb50}
        lt = <optimized out>
#11 0x00007f390e626563 in VMThread::evaluate_operation (this=this@entry=0x7f39085a6150, op=0x7eee39dfba80) at /data1/lmesnik/ws/jdk/open/src/hotspot/share/runtime/vmThread.cpp:269
        vm_op_timer = {<StackObj> = {<AllocatedObj> = {_vptr.AllocatedObj = 0x7f390ebfb978 <vtable for PerfTraceTime+16>}, <No data fields>}, _t = {_counter = 0, _start_counter = 53836417732414, _active = true}, _timerp = 0x7f39085a7360}
        event = {<JfrEvent<EventExecuteVMOperation>> = {_start_time = 53836417732485, _end_time = 0, _started = true, _untimed = false, _should_commit = false, _evaluated = false, _verifier = {_verification_storage = {0}, _verification_bit_map = {<BitMap> = {_map = 0x7ef7961debb8, _size = 64,
                  static find_ones_flip = 0, static find_zeros_flip = 18446744073709551615, static small_range_words = 32}, <No data fields>}, _committed = false}}, _operation = 64, _safepoint = false, _blocking = 107, _caller = 53836417503230, _safepointId = 139883037443072, static hasThread = true,
          static hasStackTrace = false, static isInstant = false, static hasCutoff = false, static hasThrottle = false, static isRequestable = false, static eventId = JfrExecuteVMOperationEvent}
        rm = {<StackObj> = {<AllocatedObj> = {_vptr.AllocatedObj = 0x7f390eb4c790 <vtable for ResourceMark+16>}, <No data fields>}, _impl = {_area = 0x7f39085a6570, _saved_state = {_chunk = 0x7f39084c29d0, _hwm = 0x7f39084c29f0 '\253' <repeats 200 times>...,
              _max = 0x7f39084c2dc8 '\253' <repeats 16 times>, ""\265"", _size_in_bytes = 984, _nesting = 0}}, _thread = 0x7f39085a6150, _previous_resource_mark = 0x0}
#12 0x00007f390e6271d8 in VMThread::inner_execute (this=this@entry=0x7f39085a6150, op=<optimized out>) at /data1/lmesnik/ws/jdk/open/src/hotspot/share/runtime/vmThread.cpp:415
        prev_vm_operation = <optimized out>
        hm = {_thread = 0x7f39085a6150, _area = 0x7f39085a66b0, _chunk = 0x7f39085a67f0, _hwm = 0x7f39085a6810 """", _max = 0x7f39085a68e8 '\253' <repeats 16 times>, ""\265"", _size_in_bytes = 216, _previous_handle_mark = 0x7f3908573c10}
        em = {<StackObj> = {<AllocatedObj> = {_vptr.AllocatedObj = 0x7f390ec019f0 <vtable for EventMark+16>}, <No data fields>}, _buffer = {<FormatBuffer<256>> = {<FormatBufferBase> = {_buf = 0x7ef7961deca0 ""Executing  VM operation: ThreadDump"", static BufferSize = 256},
              _buffer = ""Executing  VM operation: ThreadDump\000\071\177\000\000\220\177\004\b9\177\000\000\340\304\301\016\071\177\000\000\002"", '\000' <repeats 15 times>, ""\350\003\000\000\000\000\000\000\300\357\035\226\367~\000\000\220\177\004\b9\177\000\000\340\304\301\016\071\177\000\000PaZ\b9\177\000\000HE\314\016\071\177\000\000\221\335\a\000\000\000\000\000\300\357\035\226\367~\000\000\254l\366\016\071\177\000\000@\355\035\226\367~\000\000L\315\366\016\071\177\000\000`\355\035\226\367~\000\000\002"", '\000' <repeats 15 times>, ""\220\177\004\b9\177\000\000\200\355\035\226\367~\000\000""...}, <No data fields>}}
        end_safepoint = true
#13 0x00007f390e627415 in VMThread::loop (this=this@entry=0x7f39085a6150) at /data1/lmesnik/ws/jdk/open/src/hotspot/share/runtime/vmThread.cpp:482
No locals.
#14 0x00007f390e627547 in VMThread::run (this=0x7f39085a6150) at /data1/lmesnik/ws/jdk/open/src/hotspot/share/runtime/vmThread.cpp:162
        prio = <optimized out>
#15 0x00007f390e5166e0 in Thread::call_run (this=this@entry=0x7f39085a6150) at /data1/lmesnik/ws/jdk/open/src/hotspot/share/runtime/thread.cpp:400
No locals.
#16 0x00007f390e1ed61e in thread_native_entry (thread=0x7f39085a6150) at /data1/lmesnik/ws/jdk/open/src/hotspot/os/linux/os_linux.cpp:719
        osthread = 0x7f39085a7550
        sync = 0x7f39085a7730
#17 0x00007f390eef5609 in start_thread (arg=<optimized out>) at pthread_create.c:477
        ret = <optimized out>
        pd = <optimized out>
        unwind_buf = {cancel_jmp_buf = {{jmp_buf = {139601840568064, 1496838379953240996, 139883002718574, 139883002718575, 139883002718800, 139601840566208, -1645227111481820252, -1533533612896765020}, mask_was_saved = 0}}, priv = {pad = {0x0, 0x0, 0x0, 0x0}, data = {prev = 0x0, cleanup = 0x0,
              canceltype = 0}}}
        not_first_call = 0
#18 0x00007f390ee16103 in clone () at ../sysdeps/unix/sysv/linux/x86_64/clone.S:95
No locals.;;;","2021-04-29 11:44;lmesnik;Seems that the test generates too many monitors. I see about 200K per thread and about 1K of threads which doesn't look reasonable number.;;;","2021-04-30 14:51;lmesnik;Confirm that test making progress iterating through all monitors but operations take > 1 min.;;;","2021-09-08 12:32;roboduke;Changeset: a5e4def5
Author:    Leonid Mesnik <lmesnik@openjdk.org>
Date:      2021-09-08 19:31:18 +0000
URL:       https://git.openjdk.java.net/jdk/commit/a5e4def526697d88ff31a5fdb41d823b899372f2
;;;","2022-11-02 02:53;goetz;Fix request [17u]

I backport this for parity with 17.0.6-oracle.
Medium risk, changes to synchronization. But a useful fix and in use since 18 without follow-ups. 
Clean backport.
SAP nighlty testing passed.;;;","2022-11-02 02:58;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/854
Date: 2022-11-02 09:50:55 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,
stack-use-after-scope in G1ConcurrentMarkThread::run_service(),JDK-8265488,5047339,Bug,Closed,JDK,JDK,software,duke,,,P4,Fixed,,vprovodin,vprovodin,2021-04-19 15:19,2021-04-21 06:57,2023-10-01 09:57,2021-04-21 06:57,,,,,,,,,hotspot,,0,,,,,,,,,,,,,,"Running JDK tests with Address Sanitizer detected the following:

 530 ==3159906==ERROR: AddressSanitizer: stack-use-after-scope on address 0x7f11abe7cb88 at pc 0x7f11dfabedbb bp 0x7f11abe7b3e0 sp 0x7f11abe7ab58
 531 READ of size 22 at 0x7f11abe7cb88 thread T3 (G1 Main Marker)                                                  
 532     #0 0x7f11dfabedba  (/lib/x86_64-linux-gnu/libasan.so.5+0x9cdba)                                           
 533     #1 0x7f11dfac2255 in __vsnprintf_chk (/lib/x86_64-linux-gnu/libasan.so.5+0xa0255)                         
 534     #2 0x7f11d9f224f7 in vsnprintf /usr/include/x86_64-linux-gnu/bits/stdio2.h:80                             
 535     #3 0x7f11d9f224f7 in os::vsnprintf(char*, unsigned long, char const*, __va_list_tag*) /home/jb/work/jbr-dev/src/hotspot/os/posix/os_posix.cpp:386
 536     #4 0x7f11d96f7a0d in LogTagSet::vwrite(LogLevel::type, char const*, __va_list_tag*) /home/jb/work/jbr-dev/src/hotspot/share/logging/logTagSet.cpp:121
 537     #5 0x7f11d8098b21 in LogImpl<(LogTag::type)45, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::vwrite(LogLevel::type, char const*, __va_list_ta
 538     #6 0x7f11d8098b21 in void LogImpl<(LogTag::type)45, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0>::write<(LogLevel::type)3>(char const*, ...)
 539     #7 0x7f11d832961b in G1ConcurrentMarkThread::run_service() /home/jb/work/jbr-dev/src/hotspot/share/gc/g1/g1ConcurrentMarkThread.cpp:143
 540     #8 0x7f11d7cb5eb8 in ConcurrentGCThread::run() /home/jb/work/jbr-dev/src/hotspot/share/gc/shared/concurrentGCThread.cpp:51
 541     #9 0x7f11dacea5bf in Thread::call_run() /home/jb/work/jbr-dev/src/hotspot/share/runtime/thread.cpp:408    
 542     #10 0x7f11d9f0921c in thread_native_entry /home/jb/work/jbr-dev/src/hotspot/os/linux/os_linux.cpp:714     
 543     #11 0x7f11df7d6608 in start_thread /build/glibc-eX1tMB/glibc-2.31/nptl/pthread_create.c:477               
 544     #12 0x7f11df923292 in __clone (/lib/x86_64-linux-gnu/libc.so.6+0x122292)                                  
 545                                                                                                               
 546 Address 0x7f11abe7cb88 is located in stack of thread T3 (G1 Main Marker) at offset 184 in frame               
 547     #0 0x7f11d832928f in G1ConcurrentMarkThread::run_service() /home/jb/work/jbr-dev/src/hotspot/share/gc/g1/g1ConcurrentMarkThread.cpp:135
 548                                                                                                               
 549   This frame has 4 object(s):                                                                                 
 550     [48, 64) 'gc_id_mark' (line 141)                                                                          
 551     [80, 96) 'sts_join' (line 336)                                                                            
 552     [112, 144) 'tt' (line 142)                                                                                
 553     [176, 312) '<unknown>' <== Memory access at offset 184 is inside this variable    

The bug is in G1ConcurrentMarkThread::run_service() (src/hotspot/share/gc/g1/g1ConcurrentMarkThread.cpp):

GCTraceConcTime(Info, gc) tt(FormatBuffer<128>(""Concurrent %s Cycle"",...
variable tt holds a pointer to a data member of FormatBuffer<128> temporary and uses it in its destructor after the temporary has been destroyed already.",,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8265326,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2sgcr:",9223372036854775807,master,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6b00f96c,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
All-caps “JAVA” in the top navigation bar,JDK-8265483,5047333,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,jjg,mr,mr,2021-04-19 14:22,2021-04-26 13:25,2023-10-01 09:57,2021-04-20 21:37,17,,,,,,,17,infrastructure,,0,noreg-build,,,,,,,,,,,,,"I recently noticed that “Java” is now capitalized in the right-hand side of the top navigation bar, whereas in prior releases it’s not (see attached images).

Digging into it, this seems to be a consequence of JDK-8251210, which aimed to provide a link to other JDK versions. The stylesheet capitalizes any link in the top nav bar, thus this change transformed “Java” into “JAVA”.

Aside from perpetuating the myth that, like “COBOL” and “FORTRAN,” it’s spelled “JAVA,” is this really the best way to achieve the goal of 8251210, which was to provide a link to the documentation of other JDK versions for when people wind up on the wrong version? If I were looking at a Javadoc page and realized it was the incorrect version, about the last thing that would occur to me would be to click on a link whose content is the name of the version that I’m reading.

The original proposal in 8251210 was to provide an explicit “Other versions” link in the same part of the top nav bar, which would make a lot more sense, but that was dropped as being too intrusive (which it would be). Could we put an explicit “Other versions” link in the footer instead, near the “Report a bug or suggest an enhancement” link? It’s not clear to me that this information deserves to be in the top nav bar.

To sum up, one way to fix this bug would be to leave the 8251210 change in place but figure out a way to de-capitalize “JAVA”. (Hmm, ""J<span style='text-transform: lowercase'>ava</span” might do the trick, gross as it is.)  Another, probably better fix would be to find an alternate way to achieve the goal of 8251210.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8251210,,,,,,,,"2021-04-19 14:22;mr;JAVA.png;https://bugs.openjdk.org/secure/attachment/94306/JAVA.png","2021-04-20 15:19;jjg;JDK-API-bottom.png;https://bugs.openjdk.org/secure/attachment/94326/JDK-API-bottom.png","2021-04-20 15:19;jjg;JDK-API-top.png;https://bugs.openjdk.org/secure/attachment/94327/JDK-API-top.png","2021-04-19 14:22;mr;Java.png;https://bugs.openjdk.org/secure/attachment/94307/Java.png","2021-04-20 15:19;jjg;Reference-API-bottom.png;https://bugs.openjdk.org/secure/attachment/94325/Reference-API-bottom.png","2021-04-20 15:19;jjg;Reference-API-top.png;https://bugs.openjdk.org/secure/attachment/94324/Reference-API-top.png",,,,,,,,,,,,b13,,,,,,,,"0|i2sgbf:",9223372036854775807,b19,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@429c566,,,,,,,,,"2021-04-19 14:26;jjg;As part of this, I'd like to understand why the effect happened. Maybe(?) it's a bad side-effect of using a SMALLCAPS font in the stylesheet.
;;;","2021-04-19 14:50;mr;I don’t think it’s due to the use of a small-caps font; in my browser it’s plain Deja Vu Sans, as expected. The trouble is that the enclosing <div class=""top-nav""> winds up triggering this stylesheet rule:

    .top-nav a:link, .top-nav a:active, .top-nav a:visited {
        color:#FFFFFF;
        text-decoration:none;
        text-transform:uppercase;
    }

In other words, every hyperlink in the top nav bar is capitalized, whether you want it to be or not.;;;","2021-04-19 16:40;jjg;Yes, I just saw that for myself. It's a separable;e weird issue.  
I still think the better solution is to effectively revert the earlier change and move the Other Viersions link down to the bottom.
;;;","2021-04-20 15:22;jjg;Attached 4 screenshots for proposed fix:

JDK-API-top.png shows the reverted behavior for the top right, for a standard ""docs"" build
JDK-API-bottom.png shows the proposed new link ""Other versions"" in the text at the bottom of the page

Reference-API-top.png is similar to JDK-API-top.png, for a ""docs-reference"" build
Reference-API-bottom.png shows the absence of the proposed new link ""Other versions"" in the text at the bottom of the page. In other words, this link can be ""optional"", depending on the docs target that is used.
;;;","2021-04-20 21:37;roboduke;Changeset: 3de0dcba
Author:    Jonathan Gibbons <jjg@openjdk.org>
Date:      2021-04-21 04:36:37 +0000
URL:       https://git.openjdk.java.net/jdk/commit/3de0dcba
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Handle multiple slots in the NSS Internal Module from SunPKCS11's Secmod,JDK-8265462,5047309,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,mbalao,mbalao,mbalao,2021-04-19 10:07,2022-02-02 05:26,2023-10-01 09:57,2021-05-18 15:34,11,16,8,,,,,17,security-libs,,0,jdk11u-fix-request,jdk11u-fix-yes,jdk8u-fix-request,jdk8u-fix-yes,noreg-hard,,,,,,,,,"OpenJDK's Secmod class makes the assumptions that under a FIPS configuration there will be only one slot available in the NSS Internal Module [1], and that under a non-FIPS configuration there will be 2 slots [2]. This is not necessarily true (verified on NSS 3.53.1). Many Linux distributions use NSS's libnsssysinit.so initialization library. When run with a non-root user, this library ends up loading the 'NSS User database' if available (located at /home/<non-root-user>/.pki/nssdb) and the 'NSS system database' (located at /etc/pki/nssdb). In FIPS, the former DB will open the FIPS_SLOT_ID (0x3) slot, while the latter a new slot with a higher slot ID. In non-FIPS, the slots are NETSCAPE_SLOT_ID (0x1), PRIVATE_KEY_SLOT_ID (0x2) and a higher slot ID.

An example of the previous can be seen with a 'modutil' modules listing ('modutil -list -dbdir /etc/pki/nssdb' command).

FIPS case:

Listing of PKCS #11 Modules
-----------------------------------------------------------
  1. NSS Internal Crypto Services
	   uri: pkcs11:library-manufacturer=Mozilla%20Foundation;library-description=NSS%20Internal%20Crypto%20Services;library-version=3.53
	 slots: 2 slots attached
	status: loaded

	 slot: NSS FIPS 140-2 User Private Key Services
	token: NSS FIPS 140-2 Certificate DB
	  uri: pkcs11:token=NSS%20FIPS%20140-2%20Certificate%20DB;manufacturer=Mozilla%20Foundation;serial=0000000000000000;model=NSS%203

	 slot: NSS Application Slot 00000065
	token: NSS system database
	  uri: pkcs11:token=NSS%20system%20database;manufacturer=Mozilla%20Foundation;serial=0000000000000000;model=NSS%203

-----------------------------------------------------------

Non-FIPS case:

Listing of PKCS #11 Modules
-----------------------------------------------------------
  1. NSS Internal Crypto Services
	   uri: pkcs11:library-manufacturer=Mozilla%20Foundation;library-description=NSS%20Internal%20Crypto%20Services;library-version=3.53
	 slots: 3 slots attached
	status: loaded

	 slot: NSS Internal Cryptographic Services
	token: NSS Generic Crypto Services
	  uri: pkcs11:token=NSS%20Generic%20Crypto%20Services;manufacturer=Mozilla%20Foundation;serial=0000000000000000;model=NSS%203

	 slot: NSS User Private Key and Certificate Services
	token: NSS Certificate DB
	  uri: pkcs11:token=NSS%20Certificate%20DB;manufacturer=Mozilla%20Foundation;serial=0000000000000000;model=NSS%203

	 slot: NSS Application Slot 00000004
	token: NSS system database
	  uri: pkcs11:token=NSS%20system%20database;manufacturer=Mozilla%20Foundation;serial=0000000000000000;model=NSS%203

Note: to reproduce this behavior, check that:

 1) You run 'modutil' with a non-root user

 2) You have a local NSSDB in /home/<non-root-user>/.pki/nssdb

 3) You have 'library=libnsssysinit.so' in /etc/pki/nssdb/pkcs11.txt (use 'sudo setup-nsssysinit on' command in RHEL)

OpenJDK is currently unable to handle this configuration, and either: an exception is thrown in FIPS mode [3]; or the slot is considered of ModuleType.KEYSTORE type when it may be not [4]. In the latter case, looks to me that only one ModuleType.KEYSTORE slot was expected [5][6] and the real ModuleType.KEYSTORE slot may not be used depending on the initialization order (there will be 2 Secmod::Module instances of ModuleType.KEYSTORE type in the modules list [7]). Even if it's used by chance, the assumption was broken and may cause a problem in the future.

Just for the record, the NSS modules information is obtained by OpenJDK in [8], and Secmod::Module instances created in [9].

One possible approach to fix this issue would be to pick the slots with expected slot IDs only: FIPS_SLOT_ID, NETSCAPE_SLOT_ID and PRIVATE_KEY_SLOT_ID. The extra slots would be ignored while creating Secmod::Module instances. This would continue OpenJDK's previous behavior. The new extra slots would not be available for use from OpenJDK, though. It would be up to the user to configure NSS so OpenJDK uses the intended NSSDBs. Some possible NSS configurations include:

1) Do not use libnsssysinit.so, or use a different initialization library to change the order of the NSSDBs (the first one to be initialized gets the FIPS_SLOT_ID, NETSCAPE_SLOT_ID and PRIVATE_KEY_SLOT_ID slot IDs)

2) Delete the local NSSDB if it's not needed

3) Store keys needed from OpenJDK in the local NSSDB if it's needed.

In other words, the user must configure NSS as needed with the understanding that OpenJDK will use FIPS_SLOT_ID, NETSCAPE_SLOT_ID and PRIVATE_KEY_SLOT_ID slot IDs.

In the future we can consider an enhancement on the OpenJDK side so it lets the user to pick the slot among several slots of the same type in the 'NSS Internal Module' module. For example, by extending SunPKCS11 configuration syntax. Having said that, I'd first focus on fixing this as a bug and keeping the current behavior working -which is particularly needed for update releases-.

--
[1] - https://github.com/openjdk/jdk/blob/ebbce91e79ff5e145166b01310d4a1ebbbbd5178/src/jdk.crypto.cryptoki/share/classes/sun/security/pkcs11/Secmod.java#L405
[2] - https://github.com/openjdk/jdk/blob/ebbce91e79ff5e145166b01310d4a1ebbbbd5178/src/jdk.crypto.cryptoki/share/classes/sun/security/pkcs11/Secmod.java#L402
[3] - https://github.com/openjdk/jdk/blob/ebbce91e79ff5e145166b01310d4a1ebbbbd5178/src/jdk.crypto.cryptoki/share/classes/sun/security/pkcs11/Secmod.java#L406
[4] - https://github.com/openjdk/jdk/blob/ebbce91e79ff5e145166b01310d4a1ebbbbd5178/src/jdk.crypto.cryptoki/share/classes/sun/security/pkcs11/Secmod.java#L402
[5] - https://github.com/openjdk/jdk/blob/ebbce91e79ff5e145166b01310d4a1ebbbbd5178/src/jdk.crypto.cryptoki/share/classes/sun/security/pkcs11/SunPKCS11.java#L240
[6] - https://github.com/openjdk/jdk/blob/ebbce91e79ff5e145166b01310d4a1ebbbbd5178/src/jdk.crypto.cryptoki/share/classes/sun/security/pkcs11/Secmod.java#L338
[7] - https://github.com/openjdk/jdk/blob/ebbce91e79ff5e145166b01310d4a1ebbbbd5178/src/jdk.crypto.cryptoki/share/classes/sun/security/pkcs11/SunPKCS11.java#L220
[8] - https://github.com/openjdk/jdk/blob/b44c24d290362e4edf5b0bf18b1ecce1583daeff/src/jdk.crypto.cryptoki/share/native/libj2pkcs11/j2secmod.c#L180
[9] - https://github.com/openjdk/jdk/blob/b44c24d290362e4edf5b0bf18b1ecce1583daeff/src/jdk.crypto.cryptoki/share/native/libj2pkcs11/j2secmod.c#L235",,,,,,,,,,,JDK-8271622,JDK-8267797,JDK-8271621,JDK-8267852,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,generic,,,,,,,,,generic,,,,,"0|i2sg63:",9223372036854775807,b23,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@7cafbd52,,,,,,,,,"2021-05-18 15:34;roboduke;Changeset: bdbe23b9
Author:    Martin Balao <mbalao@openjdk.org>
Date:      2021-05-18 22:34:27 +0000
URL:       https://git.openjdk.java.net/jdk/commit/bdbe23b9cb6151c81a4de675e629b0a42f00640d
;;;","2021-05-18 20:38;mbalao;Fix request (11u)

I'd like to have this fix backported to 11u as this release is affected. Patch applies cleanly. I believe that risk is low as there are no significant differences between jdk/jdk and 11u in the area affected by the patch. No regressions were observed in jdk/sun/security/pkcs11 tests category.;;;","2021-05-20 08:28;clanger;Hi [~mbalao],
Since this fix is brandnew and there's no indication yet that also Oracle backported it to their 11u release, I would prefer if this patch can be backported to 16u first. Processwise this should be quite easy now when the patch applies clean.
Update: After discussing with Martin we decided that jdk16u backport would be doable but Martin doesn't have the resources to do it. So just approved for 11u.;;;","2021-05-26 10:55;mbalao;Fix request (8u)

I'd like to propose this fix to be backported 8u as the release is affected by this bug. The patch required a review which was done here: https://mail.openjdk.java.net/pipermail/jdk8u-dev/2021-May/013913.html;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Javadocs:  jdk.jshell - small typo,JDK-8265444,5047229,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,jlahoda,ddelabassee,ddelabassee,2021-04-19 06:57,2021-06-10 17:54,2023-10-01 09:57,2021-06-04 05:37,16,17,,,,,,17,tools,,0,trivial,,,,,,,,,,,,,"https://download.java.net/java/early_access/jdk17/docs/api/jdk.jshell/jdk/jshell/package-summary.html

> There are three major kinds of changes to the status of a snippet:
> it can **be** created with eval, it can be dropped from the active ...
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2sg17:",9223372036854775807,b26,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@ef6d34f,,,,,,,,,"2021-06-04 05:36;roboduke;Changeset: 40c9e258
Author:    Jan Lahoda <jlahoda@openjdk.org>
Date:      2021-06-04 12:35:36 +0000
URL:       https://git.openjdk.java.net/jdk/commit/40c9e258b58cd1d227d20672a237c8777fd6d45c
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
[TestBug] Enable and fix ignored unit tests in MenuItemTest,JDK-8265439,5047221,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,aghaisas,aghaisas,aghaisas,2021-04-19 05:21,2021-04-22 07:29,2023-10-01 09:57,2021-04-20 07:00,jfx17,,,,,,,jfx17,javafx,,0,sn_91,test_sprint,testbug,,,,,,,,,,,There are total 6 ignored tests in Controls unit test in test class MenuItemTest. Enable these tests and fix them.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8234486,,,,,,,,,,,,,,,,,,,generic,,,,,,,,,generic,,,,,"0|i2sfzf:",9223372036854775807,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@67282485,,,,,,,,,"2021-04-20 07:00;roboduke;Changeset: af75a1fb
Author:    Ajit Ghaisas <aghaisas@openjdk.org>
Date:      2021-04-20 13:59:57 +0000
URL:       https://git.openjdk.java.net/jfx/commit/af75a1fb
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Hard failure when building OpenJFX for Linux AArch64,JDK-8265425,5047203,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,jvos,jvos,jvos,2021-04-19 03:37,2021-04-27 11:24,2023-10-01 09:57,2021-04-22 12:58,jfx16,,,,,,,jfx17,javafx,,0,noreg-build,,,,,,,,,,,,,"There is currently a hard check in build.gradle that excludes AArch64 cpu's being used on linux.
Removing this hard check allows to build OpenJFX (base/graphics/controls/fxml) for Linux AArch64.
Additional changes might be needed for the media and web module, and they should be tackled in different issues.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8265469,,,,,,,,,,,,,,,,,,,aarch64,,,,,,,,,linux,,,,,"0|i2sfvf:",9223372036854775807,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@1556b386,,,,,,,,,"2021-04-22 12:58;roboduke;Changeset: fab638ae
Author:    Tor (torbuntu) <sorensentor@tuta.io>
Committer: Kevin Rushforth <kcr@openjdk.org>
Date:      2021-04-22 19:57:11 +0000
URL:       https://git.openjdk.java.net/jfx/commit/fab638ae
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
[lworld] Provide experimental support for generating a single class file per primitive class,JDK-8265423,5047198,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,sadayapalam,sadayapalam,sadayapalam,2021-04-19 02:51,2021-05-24 01:13,2023-10-01 09:57,2021-05-03 05:38,repo-valhalla,,,,,,,repo-valhalla,tools,,0,lworld,,,,,,,,,,,,,"Requirements:

    - Provide an experimental mode controlled by a javac command line option (off by default), under which javac will translate a primitive class (say class Point) into a single class file (Point.class) artifact instead of the present two class file scheme (Point$ref.class and Point$val.class/Point.class)

    - On the language side, Point.val and Point.ref will continue to be two distinct types standing for the value projection and reference projection. But javac backend would generate a single class file Point.class as output

   - The class file will use L/Q forms to denote the two variants in descriptors. That is, in field and method signatures, today’s ""LPoint$ref;"" and ""QPoint$val;""/""QPoint;"" will become respectively ""LPoint;"" and ""QPoint;”.

    - For places where we need conversion between the two types (QFoo and LFoo) we will issue casts.

    - ATM, a cast takes a class info, not a descriptor. There's a proposal on the table to emit a special class info that uses a
descriptor in the Utf8 of a class

    - The CONSTANT_Class_info syntax would be the following: To express the L-type (Point.ref) the CONSTANT_Class_info contains an index to an Utf-8 with the name of the class “Point”. And to express the Q-type (Point) the CONSTANT_Class_info contains an index to an Utf-8 with a full descriptor “QPoint;”

    - A CONSTANT_Class_info with the descriptor can be used by any bytecode that needs to make the distinction between the L-type and the Q-type: checkcast, instanceof, anewarray, ldc.

    - Should defaultvalue use a class name or a descriptor is TBD, but this is not a big deal, because there’s no ambiguity in the semantic.

    - At this point, the model is not using type restrictions, the Q marker in descriptor continues to mean the same thing: non-nullable reference to a primitive object. This means, the produced bytecodes will continue to be verified by the JVM with the same rules as today. 

    - There are no additional attributes to be generated.

    - One constraint from the VM side is that we cannot simply switch to the current model to the L/Q model in a single step, there’re too many components to be updated. So, instead of breaking the repo for weeks, we’d like to have flag in javac to generate class files with the L/Q model, so we can start working on the transition, without breaking the main branch and impacting the works in progress (especially from the community).

",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8267597,JDK-8266466,,,,,,,,,,,,,,generic,,,,,,,,,generic,,,,,"0|i2sfub:",9223372036854775807,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4dca67bd,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
java/lang/String/StringRepeat.java test is missing a memory requirement,JDK-8265421,5047197,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,cgo,cgo,cgo,2021-04-19 02:27,2021-05-03 23:37,2023-10-01 09:57,2021-04-21 00:13,11,16,17,,,,,17,core-libs,,0,jdk11u-fix-request,jdk11u-fix-yes,noreg-self,testbug,,,,,,,,,,"The test case java/lang/String/StringRepeat.java is missing a memory requirement, which makes the test case fail on memory constrained devices.

As mentioned in JDK-8221400, the test case requires up to 1400M, depending on the VM configuration.

This can be tested on a linux based development machine using:
$ systemd-run --user --scope -p MemoryMax=800M -p MemorySwapMax=0 /usr/bin/make TEST=""test/jdk/java/lang/String/StringRepeat.java"" run-test",,,,,,,,,,,JDK-8266020,JDK-8266475,,,,,,,,,,,,,,,,,,,,,JDK-8221400,,,,,,,,,,,,,,,,,,,generic,,,,,,,,,generic,,,,,"0|i2sfu3:",9223372036854775807,b19,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4c088d55,,,,,,,,,"2021-04-21 00:13;roboduke;Changeset: 7146104f
Author:    Christoph Göttschkes <cgo@openjdk.org>
Committer: Aleksey Shipilev <shade@openjdk.org>
Date:      2021-04-21 07:13:13 +0000
URL:       https://git.openjdk.java.net/jdk/commit/7146104f
;;;","2021-05-03 00:34;shade;Fix Request (11u)

This stabilizes the test and keeps codebases in sync (I see 11.0.12-oracle). Patch applies cleanly to 11u, test still passes.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Backport of JDK-8249672 breaks Solaris x86 build,JDK-8265417,5047192,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,stuefe,stuefe,stuefe,2021-04-19 01:04,2021-05-05 05:17,2023-10-01 09:57,2021-04-21 02:03,11,,,,,,,11.0.12,hotspot,,0,jdk11u-fix-request,jdk11u-fix-yes,oraclejdk-na,,,,,,,,,,,"(created on behalf of Steffen Moser. Weirdly, his original mail to compiler-dev cannot be found on the mailing list archive).

Hi all,

I am new into JDK contribution/bug reporting, so I really hope I've
chosen the right way to report a bug - at least I could neither find a
possibility to register for openjdk.java.net nor did my Oracle SSO
account work on this site.

Bug report: In JDK-8249672, the microcode version of an x86 CPU was
added to the ""features_string"" printed in an hs_err_pidXXXXX log file.
As far as I know, it was introduced to JDK-16 and back-ported to both,
JDK-15 and JDK-11 last year. While Solaris support was (unfortunately)
abandoned in JDK-15, JDK-11 still supports and should further support
Solaris on both SPARC and x86 if my information is correct.

I desperately need JDK-11 (and probably newer versions of Java) in order
to run several modern open-source tools. When trying to compile JDK-11
on Solaris 11.4 SRU 31 on x86 according to [1] and [2], I run into the
following compile error problem:

    ""./src/hotspot/cpu/x86/vm_version_x86.cpp"", line 753: Error:
cpu_microcode_revision is not a member of os.
    1 Error(s) detected.

The reason is quite obvious. The method

    os::cpu_microcode_revision()

is not defined for the Solaris platform as JDK-8249672 does not alter

    src/hotspot/os_cpu/solaris_x86/os_solaris_x86.hpp
    src/hotspot/os_cpu/solaris_x86/os_solaris_x86.cpp

The question is: How should we fix it? Is it allowed to call Solaris'

    /usr/sbin/ucodeadm -v

and parse this binary's results or do we have to get the contents from
""/dev/ucode"" (which seems to be the symlink to the pseudo-device
""/devices/pseudo/ucode@0:ucode"" and is accessed by ucodeadm) manually?

Any help to make JDK 11 compiling on Solaris 11.4/x86 again would be
highly appreciated. Thank you very much in advance!

Kind regards,
Steffen

[1] https://blogs.oracle.com/solaris/building-openjdk-12-using-jdk-8
[2]
http://notallmicrosoft.blogspot.com/2020/04/building-openjdk-13-and-openjdk-14-on.html
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8253115,,,,JDK-8249672,,,,,,,,,,,,,,,x86,,,,,,,,,solaris,,,,,"0|i2sfsz:",9223372036854775807,b01,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,,,"2021-04-21 02:03;hgupdate;URL:   https://hg.openjdk.java.net/jdk-updates/jdk11u-dev/rev/d40fd2234553
User:  stuefe
Date:  2021-04-21 09:02:59 +0000
;;;","2021-04-21 05:34;hseigel;This is a solaris-x64 specific fix.;;;","2021-04-21 11:00;shade;11u pushes like this still require jdk11u-fix-request (as maintainer assent), please file one retroactively?;;;","2021-04-21 11:57;stuefe;O right, I forgot, sorry.;;;","2021-05-05 05:14;hgupdate;URL:   https://hg.openjdk.java.net/jdk-updates/jdk11u/rev/d40fd2234553
User:  goetz
Date:  2021-05-05 12:03:09 +0000
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Update to gcc 10.3 on Linux,JDK-8265400,5047154,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,kcr,kcr,kcr,2021-04-17 05:14,2022-03-18 13:53,2023-10-01 09:57,2021-04-29 06:07,8,jfx17,,,,,,jfx17,javafx,,0,3rdparty,noreg-build,sn_92,,,,,,,,,,," We are currently using gcc 10.2 on Linux. We should upgrade to gcc 10.3 to match JDK 17.
",,,,,,,,,,,JDK-8266493,JDK-8272732,,,,,,,,,,JDK-8265373,,,JDK-8283402,JDK-8252191,,,,,,,,,,,JDK-8266224,,,,,,,,,,,,,,,,,,,,,,,,linux,,,,,"0|i2sfkj:",9223372036854775807,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@1556b386,,,,,,,,,"2021-04-29 06:07;roboduke;Changeset: e3e5116e
Author:    Kevin Rushforth <kcr@openjdk.org>
Date:      2021-04-29 13:06:58 +0000
URL:       https://git.openjdk.java.net/jfx/commit/e3e5116e4e9168015c0328dd1fbfffa3b3180626
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Update to Visual Studio 2019 version 16.9.3,JDK-8265399,5047153,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,kcr,kcr,kcr,2021-04-17 05:09,2022-03-04 06:05,2023-10-01 09:57,2021-04-30 09:58,8,jfx17,,,,,,jfx17,javafx,,0,3rdparty,noreg-build,sn_92,,,,,,,,,,,"We are currently using Visual Studio 2019 version 16.7.2. We should update to Visual Studio 2019 version 16.9.3 to match JDK 17.
",,,,,,,,,,,JDK-8266494,JDK-8282655,,,,,,,,,,JDK-8265371,,,,JDK-8252192,,,,,,,JDK-8274162,,,,,,,,,,,,,,,,,,,,,,,,,,,,windows,,,,,"0|i2sfkb:",9223372036854775807,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@1556b386,,,,,,,,,"2021-04-30 09:58;roboduke;Changeset: 7ec132c9
Author:    Kevin Rushforth <kcr@openjdk.org>
Date:      2021-04-30 16:58:13 +0000
URL:       https://git.openjdk.java.net/jfx/commit/7ec132c91f17437c187043c693780f0b0be173af
;;;","2022-02-28 08:11;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jfx11u/pull/76
Date: 2022-02-28 16:07:10 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
VM crashes if both -XX:+RecordDynamicDumpInfo and -XX:SharedArchiveFile options are specified,JDK-8265393,5047139,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,minqi,ccheung,ccheung,2021-04-16 17:54,2021-04-28 17:40,2023-10-01 09:57,2021-04-24 07:38,17,,,,,,,17,hotspot,,0,cds,,,,,,,,,,,,,"JDK-8259070 adds a functionality to jcmd for dumping CDS archive on a running java process.

To reproduce the issue:
1. Start a java app.
2. While the app is still running, use jcmd to create a dynamic CDS archive:
    e.g. jcmd <pid> VM.cmd dynamic_dump
3. Run the app again with the dynamic CDS archive and the -XX:+RecordDynamicDumpInfo option:
    e.g. java  -XX:+RecordDynamicDumpInfo -XX:SharedArchiveFile=java_pid<pid>_dynamic.jsa -cp myApp.jar myApp",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8265392,,,,,,,JDK-8259070,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2sfh7:",9223372036854775807,b20,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,,,"2021-04-16 17:58;ccheung;No hs err log was created for the crash.

After debugging the core file, the crash is in:
bool os::same_files(const char* file1, const char* file2) {
  if (strcmp(file1, file2) == 0) {
    return true;
  }

The file2 being NULL.

It was called from Arguments::init_shared_archive_paths() in the following block:
      if (DynamicDumpSharedSpaces) {
        if (os::same_files(SharedArchiveFile, ArchiveClassesAtExit)) {
          vm_exit_during_initialization(
            ""Cannot have the same archive file specified for -XX:SharedArchiveFile and -XX:ArchiveClassesAtExit"",
            SharedArchiveFile);
        }
      }

Perhaps VM should issue an error and exit if both -XX:+RecordDynamicDumpInfo and -XX:SharedArchiveFile options are specified?;;;","2021-04-19 11:33;minqi;C++ standard does not have a define for comparing with NULL, that depends on the language implementor.  We should add check before call strcmp just like Windows version.;;;","2021-04-20 11:08;mseledtsov;ILW = HLM = P3;;;","2021-04-24 07:38;roboduke;Changeset: 20a373a0
Author:    Yumin Qi <minqi@openjdk.org>
Date:      2021-04-23 21:51:11 +0000
URL:       https://git.openjdk.java.net/jdk/commit/20a373a0
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
[vector] Perf regression loading/storing short vector from/to char[],JDK-8265380,5047123,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,psandoz,psandoz,psandoz,2021-04-16 13:31,2021-04-19 13:15,2023-10-01 09:57,2021-04-19 13:15,repo-panama,,,,,,,repo-panama,hotspot,,0,vectorIntrinsics,,,,,,,,,,,,,There is a performance regression loading/storing short vector from/to char[]. I am unsure exactly what caused the regression. The fix is to refine the checks between the element type and the array element type.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2sfdn:",9223372036854775807,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Prepare for javac change to do the member translation as described in SoV,JDK-8265376,5047119,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,mchung,mchung,mchung,2021-04-16 12:40,2021-04-22 14:43,2023-10-01 09:57,2021-04-22 14:43,repo-valhalla,,,,,,,repo-valhalla,core-libs,,0,lworld,,,,,,,,,,,,,"- Instance fields are in the value projection whereas static fields are in the reference projection.
- Methods are in the reference projection
- Constructors are in the value projection

Update test/jdk/valhalla/valuetypes/QTypeDescriptorTest.java and test/jdk/valhalla/valuetypes/Reflection.java to to prepare for JDK-8244313.

https://cr.openjdk.java.net/~briangoetz/valhalla/sov/04-translation.html",,,,,,,,,,,JDK-8244313,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2sfcr:",9223372036854775807,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@313ae9a0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Bootcycle builds fail with StackOverflowError in cldrconverter,JDK-8265375,5047118,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,naoto,mikael,mikael,2021-04-16 12:39,2021-04-21 18:04,2023-10-01 09:57,2021-04-16 15:24,17,,,,,,,17,core-libs,,0,,,,,,,,,,,,,,"[2021-04-16T18:04:29,164Z] Exception in thread ""main"" java.lang.StackOverflowError
[2021-04-16T18:04:29,167Z] 	at java.base/java.util.concurrent.ConcurrentHashMap.get(ConcurrentHashMap.java:936)
[2021-04-16T18:04:29,167Z] 	at java.base/sun.util.locale.LocaleObjectCache.get(LocaleObjectCache.java:55)
[2021-04-16T18:04:29,167Z] 	at java.base/java.util.ResourceBundle$Control.getCandidateLocales(ResourceBundle.java:2868)
[2021-04-16T18:04:29,167Z] 	at build.tools.cldrconverter.CLDRConverter.applyParentLocales(CLDRConverter.java:1041)
[2021-04-16T18:04:29,167Z] 	at build.tools.cldrconverter.CLDRConverter.applyParentLocales(CLDRConverter.java:1041)
[2021-04-16T18:04:29,167Z] 	at build.tools.cldrconverter.CLDRConverter.applyParentLocales(CLDRConverter.java:1041)",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8258794,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2sfcj:",9223372036854775807,b19,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@7644fb4c,,,,,,,,,"2021-04-16 12:43;mikael;Looks like this started happening after JDK-8258794 was integrated;;;","2021-04-16 15:24;roboduke;Changeset: ff499701
Author:    Naoto Sato <naoto@openjdk.org>
Date:      2021-04-16 22:23:30 +0000
URL:       https://git.openjdk.java.net/jdk/commit/ff499701
;;;","2021-04-16 15:26;naoto;The piece of code that made into `CLDRLocaleProviderAdapter.java` with the CLDR 39 update was also needed in the build tool counterpart (`CLDRConverter`).;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
"[macos-aarch64] java/net/MulticastSocket/Promiscuous.java failed with ""SocketException: Cannot allocate memory""",JDK-8265369,5047109,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,msheppar,dcubed,dcubed,2021-04-16 10:53,2021-07-15 10:08,2023-10-01 09:57,2021-06-18 03:55,11,17,,,,,,17,core-libs,,0,problemlist,tier2,,,,,,,,,,,,"The following test failed in the JDK17 on macos-aarch64:

java/net/MulticastSocket/Promiscuous.java

Here's a snippet from the log file:

#section:main
----------messages:(4/226)----------
command: main -Djdk.net.usePlainDatagramSocketImpl Promiscuous
reason: User specified action: run main/othervm -Djdk.net.usePlainDatagramSocketImpl Promiscuous 
Mode: othervm [/othervm specified]
elapsed time (seconds): 0.097
----------configuration:(0/0)----------
----------System.out:(1/18)----------
Using port: 65030
----------System.err:(36/2652)----------
java.io.UncheckedIOException: java.net.SocketException: Cannot allocate memory
	at Promiscuous.lambda$test$0(Promiscuous.java:132)
	at java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:183)
	at java.base/java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:179)
	at java.base/java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:179)
	at java.base/java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:179)
	at java.base/java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:179)
	at java.base/java.util.Iterator.forEachRemaining(Iterator.java:133)
	at java.base/java.util.Spliterators$IteratorSpliterator.forEachRemaining(Spliterators.java:1801)
	at java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:484)
	at java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:474)
	at java.base/java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:150)
	at java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:173)
	at java.base/java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.base/java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:596)
	at Promiscuous.test(Promiscuous.java:123)
	at Promiscuous.main(Promiscuous.java:195)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:78)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at com.sun.javatest.regtest.agent.MainWrapper$MainThread.run(MainWrapper.java:127)
	at java.base/java.lang.Thread.run(Thread.java:831)
Caused by: java.net.SocketException: Cannot allocate memory
	at java.base/java.net.PlainDatagramSocketImpl.join(Native Method)
	at java.base/java.net.AbstractPlainDatagramSocketImpl.joinGroup(AbstractPlainDatagramSocketImpl.java:240)
	at java.base/java.net.NetMulticastSocket.joinGroup(NetMulticastSocket.java:818)
	at java.base/java.net.DatagramSocket.joinGroup(DatagramSocket.java:1291)
	at java.base/java.net.MulticastSocket.joinGroup(MulticastSocket.java:371)
	at Promiscuous.lambda$test$0(Promiscuous.java:125)
	... 21 more

JavaTest Message: Test threw exception: java.io.UncheckedIOException: java.net.SocketException: Cannot allocate memory
JavaTest Message: shutting down test

STATUS:Failed.`main' threw exception: java.io.UncheckedIOException: java.net.SocketException: Cannot allocate memory
----------rerun:(37/7541)*----------",,,,,,,,,,,JDK-8270595,JDK-8269056,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,aarch64,,,,,,,,,os_x,,,,,"0|i2sfaj:",9223372036854775807,b28,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@446e124a,,,,,,,,,"2021-04-23 04:31;chegar;Assigning to [~dfuchs] for now. Please re-assign as appropriate.;;;","2021-04-23 06:31;alanb;JDK-8044365 put in a workaround for setsockopt(IP_ADD_MEMBERSHIP) failing intermittently with ENOMEM on macOS. We've always suspected this to be a macOS bug but I don't know if it has been reported to Apple.;;;","2021-06-01 03:30;msheppar;applied fix but still seeing intermittent failures ... investigating further

missing one of my changes (cut and paste error !!!);;;","2021-06-18 03:55;roboduke;Changeset: d8a0582a
Author:    Mark Sheppard <msheppar@openjdk.org>
Date:      2021-06-18 10:54:23 +0000
URL:       https://git.openjdk.java.net/jdk17/commit/d8a0582a36340bcc65910f3a34132ec6e04e5d01
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
"[macos-aarch64] 3 java/net/httpclient/websocket tests fail with ""IOException: No buffer space available""",JDK-8265367,5047107,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,dfuchs,dcubed,dcubed,2021-04-16 10:43,2022-04-11 11:45,2023-10-01 09:57,2021-05-28 07:22,17,,,,,,,17,core-libs,,0,tier2,,,,,,,,,,,,,"The following tests failed in the JDK17 CI on macos-aarch46:

java/net/httpclient/websocket/PendingBinaryPongClose.java
java/net/httpclient/websocket/PendingBinaryPingClose.java
java/net/httpclient/websocket/PendingPongBinaryClose.java

Here's a log file snippet from PendingBinaryPongClose.java:

DEBUG: [HttpClient-2-SelectorManager] [25s 573ms] SelectorAttachment Registering jdk.internal.net.http.SocketTube$InternalWriteSubscriber$WriteEvent@46af4dd3 for 0 (false)
DEBUG: [HttpClient-2-SelectorManager] [25s 573ms] SocketTube(2) channel is writable
DEBUG: [HttpClient-2-SelectorManager] [25s 573ms] SocketTube(2) trying to write: 562
DEBUG: [HttpClient-2-SelectorManager] [25s 573ms] SocketTube(2) write error: java.io.IOException: No buffer space available
DEBUG: [HttpClient-2-SelectorManager] [25s 573ms] SocketTube(2) error signalled java.io.IOException: No buffer space available
DEBUG: [HttpClient-2-SelectorManager] [25s 573ms] SocketTube(2) pausing read event
DEBUG: [HttpClient-2-SelectorManager] [25s 573ms] SelectorAttachment Registering jdk.internal.net.http.SocketTube$InternalReadPublisher$ReadEvent@12d89d80 for 0 (false)
DEBUG: [HttpClient-2-SelectorManager] [25s 573ms] SocketTube(2) Sending error java.io.IOException: No buffer space available to subscriber jdk.internal.net.http.RawChannelTube$ReadSubscriber@431e8783
DEBUG: [HttpClient-2-SelectorManager] [25s 573ms] SocketTube(2) forwarding error to subscriber: java.io.IOException: No buffer space available
DEBUG: [HttpClient-2-SelectorManager] [25s 573ms] [WebSocket] RawChannelTube(SocketTube(2)) ReadSubscriber::onError java.io.IOException: No buffer space available
java.io.IOException: No buffer space available
	at java.base/sun.nio.ch.FileDispatcherImpl.writev0(Native Method)
	at java.base/sun.nio.ch.SocketDispatcher.writev(SocketDispatcher.java:66)
	at java.base/sun.nio.ch.IOUtil.write(IOUtil.java:182)
	at java.base/sun.nio.ch.IOUtil.write(IOUtil.java:130)
	at java.base/sun.nio.ch.SocketChannelImpl.write(SocketChannelImpl.java:563)
	at java.base/java.nio.channels.SocketChannel.write(SocketChannel.java:642)
	at java.net.http/jdk.internal.net.http.SocketTube.writeAvailable(SocketTube.java:1228)
	at java.net.http/jdk.internal.net.http.SocketTube$InternalWriteSubscriber.tryFlushCurrent(SocketTube.java:342)
	at java.net.http/jdk.internal.net.http.SocketTube$InternalWriteSubscriber.signalWritable(SocketTube.java:415)
	at java.net.http/jdk.internal.net.http.SocketTube$InternalWriteSubscriber$WriteEvent.signalEvent(SocketTube.java:442)
	at java.net.http/jdk.internal.net.http.SocketTube$SocketFlowEvent.handle(SocketTube.java:245)
	at java.net.http/jdk.internal.net.http.HttpClientImpl$SelectorManager.handleEvent(HttpClientImpl.java:975)
	at java.net.http/jdk.internal.net.http.HttpClientImpl$SelectorManager.lambda$run$3(HttpClientImpl.java:930)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
	at java.net.http/jdk.internal.net.http.HttpClientImpl$SelectorManager.run(HttpClientImpl.java:930)


Here's a log file snippet from PendingBinaryPingClose.java:

DEBUG: [HttpClient-2-SelectorManager] [25s 695ms] SelectorAttachment Registering jdk.internal.net.http.SocketTube$InternalWriteSubscriber$WriteEvent@4e675a34 for 0 (false)
DEBUG: [HttpClient-2-SelectorManager] [25s 695ms] SocketTube(2) channel is writable
DEBUG: [HttpClient-2-SelectorManager] [25s 695ms] SocketTube(2) trying to write: 562
DEBUG: [HttpClient-2-SelectorManager] [25s 696ms] SocketTube(2) write error: java.io.IOException: No buffer space available
DEBUG: [HttpClient-2-SelectorManager] [25s 696ms] SocketTube(2) error signalled java.io.IOException: No buffer space available
DEBUG: [HttpClient-2-SelectorManager] [25s 696ms] SocketTube(2) pausing read event
DEBUG: [HttpClient-2-SelectorManager] [25s 696ms] SelectorAttachment Registering jdk.internal.net.http.SocketTube$InternalReadPublisher$ReadEvent@5de107c9 for 0 (false)
DEBUG: [HttpClient-2-SelectorManager] [25s 696ms] SocketTube(2) Sending error java.io.IOException: No buffer space available to subscriber jdk.internal.net.http.RawChannelTube$ReadSubscriber@256f509f
DEBUG: [HttpClient-2-SelectorManager] [25s 696ms] SocketTube(2) forwarding error to subscriber: java.io.IOException: No buffer space available
DEBUG: [HttpClient-2-SelectorManager] [25s 696ms] [WebSocket] RawChannelTube(SocketTube(2)) ReadSubscriber::onError java.io.IOException: No buffer space available
java.io.IOException: No buffer space available
	at java.base/sun.nio.ch.FileDispatcherImpl.writev0(Native Method)
	at java.base/sun.nio.ch.SocketDispatcher.writev(SocketDispatcher.java:66)
	at java.base/sun.nio.ch.IOUtil.write(IOUtil.java:182)
	at java.base/sun.nio.ch.IOUtil.write(IOUtil.java:130)
	at java.base/sun.nio.ch.SocketChannelImpl.write(SocketChannelImpl.java:563)
	at java.base/java.nio.channels.SocketChannel.write(SocketChannel.java:642)
	at java.net.http/jdk.internal.net.http.SocketTube.writeAvailable(SocketTube.java:1228)
	at java.net.http/jdk.internal.net.http.SocketTube$InternalWriteSubscriber.tryFlushCurrent(SocketTube.java:342)
	at java.net.http/jdk.internal.net.http.SocketTube$InternalWriteSubscriber.signalWritable(SocketTube.java:415)
	at java.net.http/jdk.internal.net.http.SocketTube$InternalWriteSubscriber$WriteEvent.signalEvent(SocketTube.java:442)
	at java.net.http/jdk.internal.net.http.SocketTube$SocketFlowEvent.handle(SocketTube.java:245)
	at java.net.http/jdk.internal.net.http.HttpClientImpl$SelectorManager.handleEvent(HttpClientImpl.java:975)
	at java.net.http/jdk.internal.net.http.HttpClientImpl$SelectorManager.lambda$run$3(HttpClientImpl.java:930)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
	at java.net.http/jdk.internal.net.http.HttpClientImpl$SelectorManager.run(HttpClientImpl.java:930)


Here's a log file snippet from PendingPongBinaryClose.java:

result: Error. Agent communication error: java.net.SocketException: No buffer space available; check console log for any additional details

Please note that this ""No buffer space available"" appears to
have come from a JTREG agent, but I'm not sure about that.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8268714,JDK-8269772,,,JDK-8270189,,,,,,,,,,,,,,,aarch64,,,,,,,,,os_x,,,,,"0|i2sfa3:",9223372036854775807,b25,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@446e124a,,,,,,,,,"2021-04-23 04:33;chegar;Assigning to [~dfuchs] for now. Please re-assign as appropriate.;;;","2021-05-28 07:22;roboduke;Changeset: 24bf35f8
Author:    Daniel Fuchs <dfuchs@openjdk.org>
Date:      2021-05-28 14:21:11 +0000
URL:       https://git.openjdk.java.net/jdk/commit/24bf35f862e285eeca662b9829901c0f91d247d5
;;;","2021-10-07 00:11;goetz;11u notice

See my comments in JDK-8268714 why I dropped this backport.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
"java/net/Socket/UdpSocket.java fails with ""java.net.BindException: Address already in use"" (macos-aarch64)",JDK-8265362,5047101,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,msheppar,dcubed,dcubed,2021-04-16 10:04,2021-06-15 03:58,2023-10-01 09:57,2021-05-24 11:00,17,,,,,,,17,core-libs,,0,tier2,,,,,,,,,,,,,"The following test fails in the JDK17 CI on macos-aarch64:

java/net/Socket/UdpSocket.java

Here's a snippet from the log file:

#section:testng
----------messages:(4/216)----------
command: testng -Dsun.net.maxDatagramSockets=32 UdpSocket
reason: User specified action: run testng/othervm -Dsun.net.maxDatagramSockets=32 UdpSocket 
Mode: othervm [/othervm specified]
elapsed time (seconds): 0.196
----------configuration:(0/0)----------
----------System.out:(52/3053)----------
[TestNG] Running:
  java/net/Socket/UdpSocket.java

test UdpSocket.testMaxSockets(): failure
java.net.BindException: Address already in use
	at java.base/sun.nio.ch.Net.connect0(Native Method)
	at java.base/sun.nio.ch.Net.connect(Net.java:576)
	at java.base/sun.nio.ch.Net.connect(Net.java:565)
	at java.base/sun.nio.ch.NioSocketImpl.connect(NioSocketImpl.java:588)
	at java.base/java.net.SocksSocketImpl.connect(SocksSocketImpl.java:331)
	at java.base/java.net.Socket.connect(Socket.java:630)
	at java.base/java.net.Socket.connect(Socket.java:581)
	at java.base/java.net.Socket.<init>(Socket.java:505)
	at java.base/java.net.Socket.<init>(Socket.java:489)
	at UdpSocket.newUdpSocket(UdpSocket.java:137)
	at UdpSocket.testMaxSockets(UdpSocket.java:103)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:78)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:85)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:639)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:821)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1131)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:124)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:108)
	at org.testng.TestRunner.privateRun(TestRunner.java:773)
	at org.testng.TestRunner.run(TestRunner.java:623)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:357)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:352)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:310)
	at org.testng.SuiteRunner.run(SuiteRunner.java:259)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1185)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1110)
	at org.testng.TestNG.run(TestNG.java:1018)
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:94)
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:54)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:78)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at com.sun.javatest.regtest.agent.MainWrapper$MainThread.run(MainWrapper.java:127)
	at java.base/java.lang.Thread.run(Thread.java:831)
test UdpSocket.testSendReceive(): success

===============================================
java/net/Socket/UdpSocket.java
Total tests run: 2, Failures: 1, Skips: 0
===============================================

----------System.err:(14/858)----------
java.lang.Exception: failures: 1
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:96)
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:54)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:78)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at com.sun.javatest.regtest.agent.MainWrapper$MainThread.run(MainWrapper.java:127)
	at java.base/java.lang.Thread.run(Thread.java:831)

JavaTest Message: Test threw exception: java.lang.Exception: failures: 1
JavaTest Message: shutting down test

STATUS:Failed.`main' threw exception: java.lang.Exception: failures: 1
----------rerun:(37/6444)*----------",,,,,,,,,,,JDK-8268752,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,aarch64,,,,,,,,,os_x,,,,,"0|i2sf8r:",9223372036854775807,b24,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@446e124a,,,,,,,,,"2021-04-23 04:32;chegar;Assigning to [~dfuchs] for now. Please re-assign as appropriate.;;;","2021-04-27 23:30;alanb;The test uses one of the deprecated Socket constructors that create a UDP socket, probably rarely used in the wild. One difference between this and using a java.net.DatagramSocket (or DatagramChannel) is that the bind is implicit. So one experiment to try is to explicitly bind when !stream to see if that side steps the OS issue.;;;","2021-05-11 04:08;chegar;[~msheppar] The ""workaround"" in the test seems like a good idea. Can you please create a PR for that.

Separately, and afterwards, maybe a native reproducer could be created and used to file an issue against the underlying operating system.;;;","2021-05-24 11:00;roboduke;Changeset: bb085f68
Author:    Mark Sheppard <msheppar@openjdk.org>
Date:      2021-05-24 17:59:39 +0000
URL:       https://git.openjdk.java.net/jdk/commit/bb085f684d1154ffd6b2169259c67cfb19958380
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
"several compiler/whitebox tests fail with ""private compiler.whitebox.SimpleTestCaseHelper(int) must be compiled""",JDK-8265360,5047097,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,iveresov,dcubed,dcubed,2021-04-16 09:42,2022-06-22 03:47,2023-10-01 09:57,2022-05-03 09:03,17,18,19,,,,,19,hotspot,,0,hs-comp-triaged,intermittent,jdk17u-fix-request,jdk17u-fix-yes,oracle-triage-11,oracle-triage-17,problemlist,tier2,tier3,tier8,,,,"The following test fail in the JDK17 CI on macos-aarch64:

   2 compiler/whitebox/ClearMethodStateTest.java
   1 compiler/whitebox/EnqueueMethodForCompilationTest.java
   4 compiler/whitebox/MakeMethodNotCompilableTest.java

Here's a log file snippet for one of the failures:

----------System.err:(29/2387)----------
java.lang.RuntimeException: private compiler.whitebox.SimpleTestCaseHelper(int) must be compiled
	at compiler.whitebox.CompilerWhiteBoxTest.checkCompiled(CompilerWhiteBoxTest.java:258)
	at compiler.whitebox.EnqueueMethodForCompilationTest.test(EnqueueMethodForCompilationTest.java:86)
	at compiler.whitebox.CompilerWhiteBoxTest.runTest(CompilerWhiteBoxTest.java:170)
	at compiler.whitebox.CompilerWhiteBoxTest.main(CompilerWhiteBoxTest.java:129)
	at compiler.whitebox.EnqueueMethodForCompilationTest.main(EnqueueMethodForCompilationTest.java:53)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:78)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at com.sun.javatest.regtest.agent.MainWrapper$MainThread.run(MainWrapper.java:127)
	at java.base/java.lang.Thread.run(Thread.java:831)
java.lang.RuntimeException: private compiler.whitebox.SimpleTestCaseHelper(int) must be compiled
	at compiler.whitebox.CompilerWhiteBoxTest.checkCompiled(CompilerWhiteBoxTest.java:258)
	at compiler.whitebox.EnqueueMethodForCompilationTest.test(EnqueueMethodForCompilationTest.java:86)
	at compiler.whitebox.CompilerWhiteBoxTest.runTest(CompilerWhiteBoxTest.java:170)
	at compiler.whitebox.CompilerWhiteBoxTest.main(CompilerWhiteBoxTest.java:129)
	at compiler.whitebox.EnqueueMethodForCompilationTest.main(EnqueueMethodForCompilationTest.java:53)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:78)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at com.sun.javatest.regtest.agent.MainWrapper$MainThread.run(MainWrapper.java:127)
	at java.base/java.lang.Thread.run(Thread.java:831)

JavaTest Message: Test threw exception: java.lang.RuntimeException: private compiler.whitebox.SimpleTestCaseHelper(int) must be compiled
JavaTest Message: shutting down test

STATUS:Failed.`main' threw exception: java.lang.RuntimeException: private compiler.whitebox.SimpleTestCaseHelper(int) must be compiled
----------rerun:(49/9757)*----------",,,,,,,,,,,JDK-8288831,JDK-8288957,,,,,,,,,,,,,,,JDK-8282032,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2sf7v:",9223372036854775807,b21,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2021-12-22 13:02;dcubed;Here's a log file snippet from the jdk-19+3-107-tier3 sighting: 

compiler/whitebox/MakeMethodNotCompilableTest.java

#section:main
----------messages:(5/542)----------
command: main -Xbootclasspath/a:. -XX:+UnlockDiagnosticVMOptions -XX:+WhiteBoxAPI -Xmixed -XX:-UseCounterDecay compiler.whitebox.MakeMethodNotCompilableTest
reason: User specified action: run main/othervm -Xbootclasspath/a:. -XX:+UnlockDiagnosticVMOptions -XX:+WhiteBoxAPI -Xmixed -XX:-UseCounterDecay compiler.whitebox.MakeMethodNotCompilableTest 
Mode: othervm [/othervm specified]
Additional options from @modules: --add-modules java.base,java.management --add-exports java.base/jdk.internal.misc=ALL-UNNAMED
elapsed time (seconds): 1.599
----------configuration:(4/111)----------
Boot Layer
  add modules: java.base java.management   
  add exports: java.base/jdk.internal.misc ALL-UNNAMED

----------System.out:(25/572)----------
2 compiler directives added
TEST CASE:CONSTRUCTOR_TEST
at test's start:

private compiler.whitebox.SimpleTestCaseHelper(int):
	compilable:	true
	compiled:	false
	comp_level:	0
	osr_compilable:	true
	osr_compiled:	false
	osr_comp_level:	0
	in_queue:	false
compile_queues_size:	95

on exception 'private compiler.whitebox.SimpleTestCaseHelper(int) must be compiled':
private compiler.whitebox.SimpleTestCaseHelper(int):
	compilable:	true
	compiled:	false
	comp_level:	0
	osr_compilable:	true
	osr_compiled:	false
	osr_comp_level:	0
	in_queue:	false
compile_queues_size:	81

----------System.err:(27/2171)----------
java.lang.RuntimeException: private compiler.whitebox.SimpleTestCaseHelper(int) must be compiled
	at compiler.whitebox.CompilerWhiteBoxTest.checkCompiled(CompilerWhiteBoxTest.java:256)
	at compiler.whitebox.MakeMethodNotCompilableTest.getBci(MakeMethodNotCompilableTest.java:237)
	at compiler.whitebox.MakeMethodNotCompilableTest.test(MakeMethodNotCompilableTest.java:83)
	at compiler.whitebox.CompilerWhiteBoxTest.runTest(CompilerWhiteBoxTest.java:168)
	at compiler.whitebox.CompilerWhiteBoxTest.main(CompilerWhiteBoxTest.java:127)
	at compiler.whitebox.MakeMethodNotCompilableTest.main(MakeMethodNotCompilableTest.java:53)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:577)
	at com.sun.javatest.regtest.agent.MainWrapper$MainThread.run(MainWrapper.java:127)
	at java.base/java.lang.Thread.run(Thread.java:833)
java.lang.RuntimeException: private compiler.whitebox.SimpleTestCaseHelper(int) must be compiled
	at compiler.whitebox.CompilerWhiteBoxTest.checkCompiled(CompilerWhiteBoxTest.java:256)
	at compiler.whitebox.MakeMethodNotCompilableTest.getBci(MakeMethodNotCompilableTest.java:237)
	at compiler.whitebox.MakeMethodNotCompilableTest.test(MakeMethodNotCompilableTest.java:83)
	at compiler.whitebox.CompilerWhiteBoxTest.runTest(CompilerWhiteBoxTest.java:168)
	at compiler.whitebox.CompilerWhiteBoxTest.main(CompilerWhiteBoxTest.java:127)
	at compiler.whitebox.MakeMethodNotCompilableTest.main(MakeMethodNotCompilableTest.java:53)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:577)
	at com.sun.javatest.regtest.agent.MainWrapper$MainThread.run(MainWrapper.java:127)
	at java.base/java.lang.Thread.run(Thread.java:833)

JavaTest Message: Test threw exception: java.lang.RuntimeException: private compiler.whitebox.SimpleTestCaseHelper(int) must be compiled
JavaTest Message: shutting down test

STATUS:Failed.`main' threw exception: java.lang.RuntimeException: private compiler.whitebox.SimpleTestCaseHelper(int) must be compiled
----------rerun:(47/9061)*----------;;;","2021-12-22 13:19;kvn;I noticed that in last 3 cases (old are lost) the testing task used next flags (Tiered is off):
-ea -esa -XX:CompileThreshold=100 -XX:-TieredCompilation;;;","2022-02-16 18:40;dholmes;[~dcubed] some of the recent failures seem to be a new failure mode, for which I today filed JDK-8282032. In that failure mode we see:

WB error: no compiler for requested compilation level 0
WB error: no compiler for requested compilation level -1
WB error: invalid compilation level 42

;;;","2022-02-16 18:50;dholmes;Bumping to P3 as we seem to have a sudden surge in these kinds of failures, plus those in JDK-8282032 in recent days.;;;","2022-02-17 12:37;dcubed;Since 2022.02.12, we've seen a rash of these test failures in the JDK19 CI:

   5 compiler/whitebox/ClearMethodStateTest.java
   6 compiler/whitebox/EnqueueMethodForCompilationTest.java
   6 compiler/whitebox/MakeMethodNotCompilableTest.java

I'm going to look at ProblemListing these three tests.

This recent rash of failures only happens on macosx-x64 machines with
these options:

-XX:+CreateCoredumpOnCrash -ea -esa -XX:CompileThreshold=100 -XX:+UnlockExperimentalVMOptions -server -XX:-TieredCompilation;;;","2022-04-29 14:19;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/8473
Date: 2022-04-29 21:13:21 +0000;;;","2022-05-03 09:03;dukebot;Changeset: 4434c7df
Author:    Igor Veresov <iveresov@openjdk.org>
Date:      2022-05-03 16:02:22 +0000
URL:       https://git.openjdk.java.net/jdk/commit/4434c7df036a2b2ffff54b8b19943de3c23a4e52
;;;","2022-06-21 07:15;goetz;Fix request [17u]

I backport this for parity with 17.0.5-oracle.
A C2 fix we should take too.
Clean backport except for ProblemList.
SAP nightly testing passed.;;;","2022-06-21 07:23;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/484
Date: 2022-06-21 14:15:02 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,,
need code example for getting canonical constructor of a Record,JDK-8265356,5047092,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,tvaleev,smarks,smarks,2021-04-16 08:46,2021-05-06 19:14,2023-10-01 09:57,2021-05-01 00:31,,,,,,,,17,core-libs,,0,noreg-doc,,,,,,,,,,,,,"There's no utility method for getting a Record's canonical constructor reflectively. However, it's fairly simple to do given the array of record components. This message suggests this is sufficient if there is an example in the javadoc:

https://mail.openjdk.java.net/pipermail/amber-spec-experts/2019-September/001607.html

However, there is no such example. One needs to be added.

Adding the example to Class::getRecordComponents seems reasonable. It might be useful to add a link to it from the java.lang.Record class specification, where it defines the record component concept.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2sf6r:",9223372036854775807,b21,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4c088d55,,,,,,,,,"2021-04-16 08:59;smarks;Something like this might be suitable:

Class<? extends Record> clazz = ... ;
Constructor<? extends Record> canonical =
    clazz.getConstructor(Arrays.stream(clazz.getRecordComponents())
        .map(RecordComponent::getType)
        .toArray(Class<?>[]::new))

Not sure which of getConstructor or getDeclaredConstructor is preferable.;;;","2021-04-16 09:04;forax;There is a little change in the record spec since this mail exchange, i believe,
the constructor of a record is now not necessary public (it was public only in the first iteration of the spec).
So the example should use getDeclaredConstructor instead of getConstructor.
;;;","2021-04-16 17:37;smarks;Good point about getDeclaredConstructor.

On Twitter,

    https://twitter.com/chegar999/status/1383136238463557635

Chris Hegarty points to the deserialization code in the JDK that finds a record's canonical constructor:

    https://github.com/openjdk/jdk/blob/jdk-16%2B36/src/java.base/share/classes/java/io/ObjectStreamClass.java#L1583

It does pretty much the same thing as above, and it does use getDeclaredConstructor. (Additionally, it calls setAccessible
and unreflects the constructor into a MethodHandle but I don't think this is necessary for the example in the javadoc.);;;","2021-05-01 00:31;roboduke;Changeset: 3e667cc4
Author:    Tagir F. Valeev <tvaleev@openjdk.org>
Date:      2021-05-01 07:30:55 +0000
URL:       https://git.openjdk.java.net/jdk/commit/3e667cc40521dfb6d07dda07c2f33e37086ee64b
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
vmTestbase/../stress/compiler/deoptimize/Test.java fails with OOME due to CodeCache exhaustion.,JDK-8265349,5047081,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,enikitin,dcubed,dcubed,2021-04-16 06:41,2023-07-28 06:53,2023-10-01 09:57,2021-05-03 07:33,17,,,,,,,17,hotspot,,0,hs-comp-triaged,noreg-self,oracle-triage-17,regression,tier7,tier8,,,,,,,,"The following test failed in the JDK17 CI:

vmTestbase/vm/mlvm/meth/stress/compiler/deoptimize/Test.java#id1

Here's a snippet from the log file:

----------System.out:(566/50899)----------
### TRACE 1: RNG seed = -2831188475452714326 (0xd8b59914f47612aa)
For random generator using seed: -2831188475452714326
To re-run test with same seed value please add ""-Djdk.test.lib.random.seed=-2831188475452714326"" to command line.
[170.585s][warning][codecache] CodeCache is full. Compiler has been disabled.
[170.585s][warning][codecache] Try increasing the code cache size using -XX:ReservedCodeCacheSize=
CodeCache: size=102400Kb used=101607Kb max_used=101620Kb free=792Kb
 bounds [0x0000023f766c0000, 0x0000023f7cac0000, 0x0000023f7cac0000]
 total_blobs=37618 nmethods=31425 adapters=6149
 compilation: disabled (not enough contiguous free space left)
              stopped_count=1, restarted_count=0
 full_count=0
#>  
#>  WARNING: switching log to verbose mode,
#>      because error is complained
#>  
# ERROR: Caught exception in Thread[Thread-19,5,MainThreadGroup]
# ERROR: java.lang.VirtualMachineError: Out of space in CodeCache for method handle intrinsic
# ERROR: 	at java.base/java.lang.invoke.BoundMethodHandle$Species_LLDJLL.copyWithExtendL(java/lang/invoke/BoundMethodHandle$Species_LLDJLL)
# ERROR: 	at java.base/java.lang.invoke.MethodHandles.filterArgument(MethodHandles.java:5592)
# ERROR: 	at java.base/java.lang.invoke.MethodHandles.filterArguments(MethodHandles.java:5549)
# ERROR: 	at vm.mlvm.meth.share.transform.v2.MHFilterTF.computeInboundMH(MHFilterTF.java:94)
# ERROR: 	at vm.mlvm.meth.share.transform.v2.MHPrimitiveTF.computeInboundCall(MHPrimitiveTF.java:38)
# ERROR: 	at vm.mlvm.meth.share.transform.v2.MHMacroTF.addTransformation(MHMacroTF.java:70)
# ERROR: 	at vm.mlvm.meth.share.MHTransformationGen.createSequence(MHTransformationGen.java:359)
# ERROR: 	at vm.mlvm.meth.share.MHTransformationGen.createAndCallSequence(MHTransformationGen.java:493)
# ERROR: 	at vm.mlvm.meth.stress.compiler.deoptimize.Test.runThread(Test.java:164)
# ERROR: 	at vm.mlvm.share.MultiThreadedTest.lambda$run$1(MultiThreadedTest.java:71)
# ERROR: 	at java.base/java.lang.Thread.run(Thread.java:831)
The following stacktrace is for failure analysis.
nsk.share.TestFailure: Caught exception in Thread[Thread-19,5,MainThreadGroup] java.lang.VirtualMachineError: Out of space in CodeCache for method handle intrinsic
	at nsk.share.Log.logExceptionForFailureAnalysis(Log.java:432)
	at nsk.share.Log.complain(Log.java:403)
	at nsk.share.Log.complain(Log.java:414)
	at vm.mlvm.share.Env.complain(Env.java:172)
	at vm.mlvm.share.MultiThreadedTest.lambda$run$1(MultiThreadedTest.java:78)
	at java.base/java.lang.Thread.run(Thread.java:831)
# ERROR: Caught exception in Thread[Thread-7,5,MainThreadGroup]
# ERROR: java.lang.VirtualMachineError: Out of space in CodeCache for adapters
# ERROR: 	at java.base/java.lang.ClassLoader.defineClass0(Native Method)
# ERROR: 	at java.base/java.lang.System$2.defineClass(System.java:2196)
# ERROR: 	at java.base/java.lang.invoke.MethodHandles$Lookup$ClassDefiner.defineClass(MethodHandles.java:2445)
# ERROR: 	at java.base/java.lang.invoke.InvokerBytecodeGenerator.loadMethod(InvokerBytecodeGenerator.java:319)
# ERROR: 	at java.base/java.lang.invoke.InvokerBytecodeGenerator.generateCustomizedCode(InvokerBytecodeGenerator.java:753)
# ERROR: 	at java.base/java.lang.invoke.LambdaForm.compileToBytecode(LambdaForm.java:832)
# ERROR: 	at java.base/java.lang.invoke.LambdaForm.prepare(LambdaForm.java:790)
# ERROR: 	at java.base/java.lang.invoke.MethodHandle.<init>(MethodHandle.java:481)
# ERROR: 	at java.base/java.lang.invoke.BoundMethodHandle.<init>(BoundMethodHandle.java:56)
# ERROR: 	at java.base/java.lang.invoke.BoundMethodHandle$Species_LLLLL.<init>(java/lang/invoke/BoundMethodHandle$Species_LLLLL)
# ERROR: 	at java.base/java.lang.invoke.BoundMethodHandle$Species_LLLLL.make(java/lang/invoke/BoundMethodHandle$Species_LLLLL)
# ERROR: 	at java.base/java.lang.invoke.BoundMethodHandle$Species_LLLL.copyWithExtendL(java/lang/invoke/BoundMethodHandle$Species_LLLL)
# ERROR: 	at java.base/java.lang.invoke.MethodHandleImpl.makePairwiseConvertByEditor(MethodHandleImpl.java:328)
# ERROR: 	at java.base/java.lang.invoke.MethodHandleImpl.makePairwiseConvert(MethodHandleImpl.java:260)
# ERROR: 	at java.base/java.lang.invoke.MethodHandleImpl.makePairwiseConvert(MethodHandleImpl.java:377)
# ERROR: 	at java.base/java.lang.invoke.MethodHandle.asTypeUncached(MethodHandle.java:885)
# ERROR: 	at java.base/java.lang.invoke.MethodHandle.asType(MethodHandle.java:869)
# ERROR: 	at vm.mlvm.meth.share.transform.v2.MHCollectSpreadTF.computeCollectorMH(MHCollectSpreadTF.java:37)
# ERROR: 	at vm.mlvm.meth.share.transform.v2.MHCollectSpreadBaseTF.computeInboundMH(MHCollectSpreadBaseTF.java:37)
# ERROR: 	at vm.mlvm.meth.share.transform.v2.MHBasicUnaryTF.computeInboundMH(MHBasicUnaryTF.java:56)
# ERROR: 	at vm.mlvm.meth.share.transform.v2.MHPrimitiveTF.computeInboundCall(MHPrimitiveTF.java:38)
# ERROR: 	at vm.mlvm.meth.share.transform.v2.MHMacroTF.addTransformation(MHMacroTF.java:70)
# ERROR: 	at vm.mlvm.meth.share.MHTransformationGen.createSequence(MHTransformationGen.java:448)
# ERROR: 	at vm.mlvm.meth.share.MHTransformationGen.createAndCallSequence(MHTransformationGen.java:493)
# ERROR: 	at vm.mlvm.meth.stress.compiler.deoptimize.Test.runThread(Test.java:164)
# ERROR: 	at vm.mlvm.share.MultiThreadedTest.lambda$run$1(MultiThreadedTest.java:71)
# ERROR: 	at java.base/java.lang.Thread.run(Thread.java:831)
# ERROR: Caught exception in Thread[Thread-14,5,MainThreadGroup]
# ERROR: java.lang.VirtualMachineError: Out of space in CodeCache for adapters
# ERROR: 	at java.base/java.lang.invoke.MethodHandleNatives.resolve(Native Method)
# ERROR: 	at java.base/java.lang.invoke.MemberName$Factory.resolve(MemberName.java:1083)
# ERROR: 	at java.base/java.lang.invoke.MemberName$Factory.resolveOrFail(MemberName.java:1112)
# ERROR: 	at java.base/java.lang.invoke.MethodHandles$Lookup.resolveOrFail(MethodHandles.java:3650)
# ERROR: 	at java.base/java.lang.invoke.MethodHandles$Lookup.findStatic(MethodHandles.java:2594)
# ERROR: 	at java.base/java.lang.invoke.ClassSpecializer$Factory.findFactory(ClassSpecializer.java:995)
# ERROR: 	at java.base/java.lang.invoke.ClassSpecializer$Factory.findFactories(ClassSpecializer.java:903)
# ERROR: 	at java.base/java.lang.invoke.ClassSpecializer$Factory.linkSpeciesDataToCode(ClassSpecializer.java:922)
# ERROR: 	at java.base/java.lang.invoke.ClassSpecializer$Factory.loadSpecies(ClassSpecializer.java:493)
# ERROR: 	at java.base/java.lang.invoke.ClassSpecializer.findSpecies(ClassSpecializer.java:195)
# ERROR: 	at java.base/java.lang.invoke.BoundMethodHandle$SpeciesData.extendWith(BoundMethodHandle.java:375)
# ERROR: 	at java.base/java.lang.invoke.LambdaFormEditor.newSpeciesData(LambdaFormEditor.java:465)
# ERROR: 	at java.base/java.lang.invoke.LambdaFormEditor.bindArgumentForm(LambdaFormEditor.java:528)
# ERROR: 	at java.base/java.lang.invoke.LambdaFormEditor.bindArgumentI(LambdaFormEditor.java:479)
# ERROR: 	at java.base/java.lang.invoke.BoundMethodHandle.bindArgumentI(BoundMethodHandle.java:102)
# ERROR: 	at java.base/java.lang.invoke.MethodHandles.insertArgumentPrimitive(MethodHandles.java:5176)
# ERROR: 	at java.base/java.lang.invoke.MethodHandles.insertArguments(MethodHandles.java:5157)
# ERROR: 	at vm.mlvm.meth.share.transform.v2.MHInsertTF.computeInboundMH(MHInsertTF.java:69)
# ERROR: 	at vm.mlvm.meth.share.transform.v2.MHBasicUnaryTF.computeInboundMH(MHBasicUnaryTF.java:56)
# ERROR: 	at vm.mlvm.meth.share.transform.v2.MHPrimitiveTF.computeInboundCall(MHPrimitiveTF.java:38)
# ERROR: 	at vm.mlvm.meth.share.transform.v2.MHMacroTF.addTransformation(MHMacroTF.java:70)
# ERROR: 	at vm.mlvm.meth.share.MHTransformationGen.createSequence(MHTransformationGen.java:448)
# ERROR: 	at vm.mlvm.meth.share.MHTransformationGen.createAndCallSequence(MHTransformationGen.java:493)
# ERROR: 	at vm.mlvm.meth.stress.compiler.deoptimize.Test.runThread(Test.java:164)
# ERROR: 	at vm.mlvm.share.MultiThreadedTest.lambda$run$1(MultiThreadedTest.java:71)
# ERROR: 	at java.base/java.lang.Thread.run(Thread.java:831)
# ERROR: Caught exception in Thread[Thread-15,5,MainThreadGroup]
# ERROR: java.lang.VirtualMachineError: Out of space in CodeCache for method handle intrinsic
# ERROR: 	at java.base/java.lang.invoke.BoundMethodHandle$Species_LLLLLILDL.copyWithExtendL(java/lang/invoke/BoundMethodHandle$Species_LLLLLILDL)
# ERROR: 	at java.base/java.lang.invoke.MethodHandleImpl.makePairwiseConvertByEditor(MethodHandleImpl.java:328)
# ERROR: 	at java.base/java.lang.invoke.MethodHandleImpl.makePairwiseConvert(MethodHandleImpl.java:260)
# ERROR: 	at java.base/java.lang.invoke.MethodHandleImpl.makePairwiseConvert(MethodHandleImpl.java:377)
# ERROR: 	at java.base/java.lang.invoke.MethodHandle.asTypeUncached(MethodHandle.java:885)
# ERROR: 	at java.base/java.lang.invoke.MethodHandle.asType(MethodHandle.java:869)
# ERROR: 	at java.base/java.lang.invoke.MethodHandle.asSpreader(MethodHandle.java:1026)
# ERROR: 	at java.base/java.lang.invoke.MethodHandle.asSpreader(MethodHandle.java:982)
# ERROR: 	at vm.mlvm.meth.share.transform.v2.MHCollectSpreadTF.computeSpreaderMH(MHCollectSpreadTF.java:42)
# ERROR: 	at vm.mlvm.meth.share.transform.v2.MHCollectSpreadBaseTF.computeInboundMH(MHCollectSpreadBaseTF.java:37)
# ERROR: 	at vm.mlvm.meth.share.transform.v2.MHBasicUnaryTF.computeInboundMH(MHBasicUnaryTF.java:56)
# ERROR: 	at vm.mlvm.meth.share.transform.v2.MHPrimitiveTF.computeInboundCall(MHPrimitiveTF.java:38)
# ERROR: 	at vm.mlvm.meth.share.transform.v2.MHMacroTF.addTransformation(MHMacroTF.java:70)
# ERROR: 	at vm.mlvm.meth.share.MHTransformationGen.createSequence(MHTransformationGen.java:448)
# ERROR: 	at vm.mlvm.meth.share.MHTransformationGen.createAndCallSequence(MHTransformationGen.java:493)
# ERROR: 	at vm.mlvm.meth.stress.compiler.deoptimize.Test.runThread(Test.java:164)
# ERROR: 	at vm.mlvm.share.MultiThreadedTest.lambda$run$1(MultiThreadedTest.java:71)
# ERROR: 	at java.base/java.lang.Thread.run(Thread.java:831)
# ERROR: Test marked failed at vm.mlvm.share.MultiThreadedTest.lambda$run$1(MultiThreadedTest.java:82):
# ERROR: Thread Thread[Thread-14,5,MainThreadGroup] failed
# ERROR: Test marked failed at vm.mlvm.share.MultiThreadedTest.lambda$run$1(MultiThreadedTest.java:82):
# ERROR: Thread Thread[Thread-15,5,MainThreadGroup] failed
# ERROR: Test marked failed at vm.mlvm.share.MultiThreadedTest.lambda$run$1(MultiThreadedTest.java:82):
# ERROR: Thread Thread[Thread-19,5,MainThreadGroup] failed
# ERROR: Test marked failed at vm.mlvm.share.MultiThreadedTest.lambda$run$1(MultiThreadedTest.java:82):
# ERROR: Thread Thread[Thread-7,5,MainThreadGroup] failed
# ERROR: Caught exception in Thread[Thread-8,5,MainThreadGroup]
# ERROR: java.lang.VirtualMachineError: Out of space in CodeCache for adapters
# ERROR: 	at java.base/java.lang.ClassLoader.defineClass0(Native Method)
# ERROR: 	at java.base/java.lang.System$2.defineClass(System.java:2196)
# ERROR: 	at java.base/java.lang.invoke.MethodHandles$Lookup$ClassDefiner.defineClass(MethodHandles.java:2445)
# ERROR: 	at java.base/java.lang.invoke.InvokerBytecodeGenerator.loadMethod(InvokerBytecodeGenerator.java:319)
# ERROR: 	at java.base/java.lang.invoke.InvokerBytecodeGenerator.generateCustomizedCode(InvokerBytecodeGenerator.java:753)
# ERROR: 	at java.base/java.lang.invoke.LambdaForm.compileToBytecode(LambdaForm.java:832)
# ERROR: 	at java.base/java.lang.invoke.LambdaForm.prepare(LambdaForm.java:790)
# ERROR: 	at java.base/java.lang.invoke.MethodHandle.<init>(MethodHandle.java:481)
# ERROR: 	at java.base/java.lang.invoke.BoundMethodHandle.<init>(BoundMethodHandle.java:56)
# ERROR: 	at java.base/java.lang.invoke.BoundMethodHandle$Species_L.<init>(BoundMethodHandle.java:227)
# ERROR: 	at java.base/java.lang.invoke.BoundMethodHandle$Species_L.copyWith(BoundMethodHandle.java:247)
# ERROR: 	at java.base/java.lang.invoke.MethodHandles.dropArguments0(MethodHandles.java:5252)
# ERROR: 	at java.base/java.lang.invoke.MethodHandles.dropArguments(MethodHandles.java:5315)
# ERROR: 	at java.base/java.lang.invoke.StringConcatFactory.generateMHInlineCopy(StringConcatFactory.java:514)
# ERROR: 	at java.base/java.lang.invoke.StringConcatFactory.makeConcatWithConstants(StringConcatFactory.java:358)
# ERROR: 	at java.base/java.lang.invoke.BootstrapMethodInvoker.invoke(BootstrapMethodInvoker.java:102)
# ERROR: 	at java.base/java.lang.invoke.CallSite.makeSite(CallSite.java:315)
# ERROR: 	at java.base/java.lang.invoke.MethodHandleNatives.linkCallSiteImpl(MethodHandleNatives.java:281)
# ERROR: 	at java.base/java.lang.invoke.MethodHandleNatives.linkCallSite(MethodHandleNatives.java:271)
# ERROR: 	at vm.mlvm.meth.share.transform.v2.MHCall.prettyPrint(MHCall.java:159)
# ERROR: 	at vm.mlvm.meth.share.transform.v2.MHMacroTF.appendElement(MHMacroTF.java:126)
# ERROR: 	at vm.mlvm.meth.share.transform.v2.MHMacroTF.getDescription(MHMacroTF.java:106)
# ERROR: 	at vm.mlvm.meth.share.transform.v2.MHTF.toString(MHTF.java:35)
# ERROR: 	at vm.mlvm.meth.share.MHTransformationGen.callSequence(MHTransformationGen.java:486)
# ERROR: 	at vm.mlvm.meth.share.MHTransformationGen.createAndCallSequence(MHTransformationGen.java:493)
# ERROR: 	at vm.mlvm.meth.stress.compiler.deoptimize.Test.runThread(Test.java:164)
# ERROR: 	at vm.mlvm.share.MultiThreadedTest.lambda$run$1(MultiThreadedTest.java:71)
# ERROR: 	at java.base/java.lang.Thread.run(Thread.java:831)
# ERROR: Test marked failed at vm.mlvm.share.MultiThreadedTest.lambda$run$1(MultiThreadedTest.java:82):
# ERROR: Thread Thread[Thread-8,5,MainThreadGroup] failed
# ERROR: Caught exception in Thread[Thread-2,5,MainThreadGroup]
# ERROR: java.lang.VirtualMachineError: Out of space in CodeCache for adapters
# ERROR: 	at java.base/java.lang.ClassLoader.defineClass0(Native Method)
# ERROR: 	at java.base/java.lang.System$2.defineClass(System.java:2196)
# ERROR: 	at java.base/java.lang.invoke.MethodHandles$Lookup$ClassDefiner.defineClass(MethodHandles.java:2445)
# ERROR: 	at java.base/java.lang.invoke.InvokerBytecodeGenerator.loadMethod(InvokerBytecodeGenerator.java:319)
# ERROR: 	at java.base/java.lang.invoke.InvokerBytecodeGenerator.generateCustomizedCode(InvokerBytecodeGenerator.java:753)
# ERROR: 	at java.base/java.lang.invoke.LambdaForm.compileToBytecode(LambdaForm.java:832)
# ERROR: 	at java.base/java.lang.invoke.LambdaForm.prepare(LambdaForm.java:790)
# ERROR: 	at java.base/java.lang.invoke.MethodHandle.<init>(MethodHandle.java:481)
# ERROR: 	at java.base/java.lang.invoke.BoundMethodHandle.<init>(BoundMethodHandle.java:56)
# ERROR: 	at java.base/java.lang.invoke.BoundMethodHandle$Species_L.<init>(BoundMethodHandle.java:227)
# ERROR: 	at java.base/java.lang.invoke.BoundMethodHandle$Species_L.copyWith(BoundMethodHandle.java:247)
# ERROR: 	at java.base/java.lang.invoke.MethodHandles.dropArguments0(MethodHandles.java:5252)
# ERROR: 	at java.base/java.lang.invoke.MethodHandles.dropArguments(MethodHandles.java:5315)
# ERROR: 	at java.base/java.lang.invoke.StringConcatFactory.generateMHInlineCopy(StringConcatFactory.java:514)
# ERROR: 	at java.base/java.lang.invoke.StringConcatFactory.makeConcatWithConstants(StringConcatFactory.java:358)
# ERROR: 	at java.base/java.lang.invoke.BootstrapMethodInvoker.invoke(BootstrapMethodInvoker.java:102)
# ERROR: 	at java.base/java.lang.invoke.CallSite.makeSite(CallSite.java:315)
# ERROR: 	at java.base/java.lang.invoke.MethodHandleNatives.linkCallSiteImpl(MethodHandleNatives.java:281)
# ERROR: 	at java.base/java.lang.invoke.MethodHandleNatives.linkCallSite(MethodHandleNatives.java:271)
# ERROR: 	at vm.mlvm.meth.share.transform.v2.MHCall.prettyPrint(MHCall.java:159)
# ERROR: 	at vm.mlvm.meth.share.transform.v2.MHMacroTF.appendElement(MHMacroTF.java:126)
# ERROR: 	at vm.mlvm.meth.share.transform.v2.MHMacroTF.getDescription(MHMacroTF.java:106)
# ERROR: 	at vm.mlvm.meth.share.transform.v2.MHTF.toString(MHTF.java:35)
# ERROR: 	at vm.mlvm.meth.share.MHTransformationGen.callSequence(MHTransformationGen.java:486)
# ERROR: 	at vm.mlvm.meth.share.MHTransformationGen.createAndCallSequence(MHTransformationGen.java:493)
# ERROR: 	at vm.mlvm.meth.stress.compiler.deoptimize.Test.runThread(Test.java:164)
# ERROR: 	at vm.mlvm.share.MultiThreadedTest.lambda$run$1(MultiThreadedTest.java:71)
# ERROR: 	at java.base/java.lang.Thread.run(Thread.java:831)
# ERROR: Caught exception in Thread[Thread-24,5,MainThreadGroup]
# ERROR: java.lang.VirtualMachineError: Out of space in CodeCache for adapters
# ERROR: 	at java.base/java.lang.ClassLoader.defineClass0(Native Method)
# ERROR: 	at java.base/java.lang.System$2.defineClass(System.java:2196)
# ERROR: 	at java.base/java.lang.invoke.MethodHandles$Lookup$ClassDefiner.defineClass(MethodHandles.java:2445)
# ERROR: 	at java.base/java.lang.invoke.InvokerBytecodeGenerator.loadMethod(InvokerBytecodeGenerator.java:319)
# ERROR: 	at java.base/java.lang.invoke.InvokerBytecodeGenerator.generateCustomizedCode(InvokerBytecodeGenerator.java:753)
# ERROR: 	at java.base/java.lang.invoke.LambdaForm.compileToBytecode(LambdaForm.java:832)
# ERROR: 	at java.base/java.lang.invoke.LambdaForm.prepare(LambdaForm.java:790)
# ERROR: 	at java.base/java.lang.invoke.MethodHandle.<init>(MethodHandle.java:481)
# ERROR: 	at java.base/java.lang.invoke.BoundMethodHandle.<init>(BoundMethodHandle.java:56)
# ERROR: 	at java.base/java.lang.invoke.BoundMethodHandle$Species_L.<init>(BoundMethodHandle.java:227)
# ERROR: 	at java.base/java.lang.invoke.BoundMethodHandle$Species_L.copyWith(BoundMethodHandle.java:247)
# ERROR: 	at java.base/java.lang.invoke.MethodHandles.dropArguments0(MethodHandles.java:5252)
# ERROR: 	at java.base/java.lang.invoke.MethodHandles.dropArguments(MethodHandles.java:5315)
# ERROR: 	at java.base/java.lang.invoke.StringConcatFactory.generateMHInlineCopy(StringConcatFactory.java:514)
# ERROR: 	at java.base/java.lang.invoke.StringConcatFactory.makeConcatWithConstants(StringConcatFactory.java:358)
# ERROR: 	at java.base/java.lang.invoke.BootstrapMethodInvoker.invoke(BootstrapMethodInvoker.java:102)
# ERROR: 	at java.base/java.lang.invoke.CallSite.makeSite(CallSite.java:315)
# ERROR: 	at java.base/java.lang.invoke.MethodHandleNatives.linkCallSiteImpl(MethodHandleNatives.java:281)
# ERROR: 	at java.base/java.lang.invoke.MethodHandleNatives.linkCallSite(MethodHandleNatives.java:271)
# ERROR: 	at vm.mlvm.meth.share.transform.v2.MHCall.prettyPrint(MHCall.java:159)
# ERROR: 	at vm.mlvm.meth.share.transform.v2.MHMacroTF.appendElement(MHMacroTF.java:126)
# ERROR: 	at vm.mlvm.meth.share.transform.v2.MHMacroTF.getDescription(MHMacroTF.java:106)
# ERROR: 	at vm.mlvm.meth.share.transform.v2.MHTF.toString(MHTF.java:35)
# ERROR: 	at vm.mlvm.meth.share.MHTransformationGen.callSequence(MHTransformationGen.java:486)
# ERROR: 	at vm.mlvm.meth.share.MHTransformationGen.createAndCallSequence(MHTransformationGen.java:493)
# ERROR: 	at vm.mlvm.meth.stress.compiler.deoptimize.Test.runThread(Test.java:164)
# ERROR: 	at vm.mlvm.share.MultiThreadedTest.lambda$run$1(MultiThreadedTest.java:71)
# ERROR: 	at java.base/java.lang.Thread.run(Thread.java:831)
# ERROR: Caught exception in Thread[Thread-23,5,MainThreadGroup]
# ERROR: java.lang.VirtualMachineError: Out of space in CodeCache for adapters
# ERROR: 	at java.base/java.lang.ClassLoader.defineClass0(Native Method)
# ERROR: 	at java.base/java.lang.System$2.defineClass(System.java:2196)
# ERROR: 	at java.base/java.lang.invoke.MethodHandles$Lookup$ClassDefiner.defineClass(MethodHandles.java:2445)
# ERROR: 	at java.base/java.lang.invoke.InvokerBytecodeGenerator.loadMethod(InvokerBytecodeGenerator.java:319)
# ERROR: 	at java.base/java.lang.invoke.InvokerBytecodeGenerator.generateCustomizedCode(InvokerBytecodeGenerator.java:753)
# ERROR: 	at java.base/java.lang.invoke.LambdaForm.compileToBytecode(LambdaForm.java:832)
# ERROR: 	at java.base/java.lang.invoke.LambdaForm.prepare(LambdaForm.java:790)
# ERROR: 	at java.base/java.lang.invoke.MethodHandle.<init>(MethodHandle.java:481)
# ERROR: 	at java.base/java.lang.invoke.BoundMethodHandle.<init>(BoundMethodHandle.java:56)
# ERROR: 	at java.base/java.lang.invoke.BoundMethodHandle$Species_L.<init>(BoundMethodHandle.java:227)
# ERROR: 	at java.base/java.lang.invoke.BoundMethodHandle$Species_L.copyWith(BoundMethodHandle.java:247)
# ERROR: 	at java.base/java.lang.invoke.MethodHandles.dropArguments0(MethodHandles.java:5252)
# ERROR: 	at java.base/java.lang.invoke.MethodHandles.dropArguments(MethodHandles.java:5315)
# ERROR: 	at java.base/java.lang.invoke.StringConcatFactory.generateMHInlineCopy(StringConcatFactory.java:514)
# ERROR: 	at java.base/java.lang.invoke.StringConcatFactory.makeConcatWithConstants(StringConcatFactory.java:358)
# ERROR: 	at java.base/java.lang.invoke.BootstrapMethodInvoker.invoke(BootstrapMethodInvoker.java:102)
# ERROR: 	at java.base/java.lang.invoke.CallSite.makeSite(CallSite.java:315)
# ERROR: 	at java.base/java.lang.invoke.MethodHandleNatives.linkCallSiteImpl(MethodHandleNatives.java:281)
# ERROR: 	at java.base/java.lang.invoke.MethodHandleNatives.linkCallSite(MethodHandleNatives.java:271)
# ERROR: 	at vm.mlvm.meth.share.transform.v2.MHCall.prettyPrint(MHCall.java:159)
# ERROR: 	at vm.mlvm.meth.share.transform.v2.MHMacroTF.appendElement(MHMacroTF.java:126)
# ERROR: 	at vm.mlvm.meth.share.transform.v2.MHMacroTF.getDescription(MHMacroTF.java:106)
# ERROR: 	at vm.mlvm.meth.share.transform.v2.MHTF.toString(MHTF.java:35)
# ERROR: 	at vm.mlvm.meth.share.MHTransformationGen.callSequence(MHTransformationGen.java:486)
# ERROR: 	at vm.mlvm.meth.share.MHTransformationGen.createAndCallSequence(MHTransformationGen.java:493)
# ERROR: 	at vm.mlvm.meth.stress.compiler.deoptimize.Test.runThread(Test.java:164)
# ERROR: 	at vm.mlvm.share.MultiThreadedTest.lambda$run$1(MultiThreadedTest.java:71)
# ERROR: 	at java.base/java.lang.Thread.run(Thread.java:831)
# ERROR: Caught exception in Thread[Thread-11,5,MainThreadGroup]
# ERROR: java.lang.VirtualMachineError: Out of space in CodeCache for adapters
# ERROR: 	at java.base/java.lang.ClassLoader.defineClass0(Native Method)
# ERROR: 	at java.base/java.lang.System$2.defineClass(System.java:2196)
# ERROR: 	at java.base/java.lang.invoke.MethodHandles$Lookup$ClassDefiner.defineClass(MethodHandles.java:2445)
# ERROR: 	at java.base/java.lang.invoke.InvokerBytecodeGenerator.loadMethod(InvokerBytecodeGenerator.java:319)
# ERROR: 	at java.base/java.lang.invoke.InvokerBytecodeGenerator.generateCustomizedCode(InvokerBytecodeGenerator.java:753)
# ERROR: 	at java.base/java.lang.invoke.LambdaForm.compileToBytecode(LambdaForm.java:832)
# ERROR: 	at java.base/java.lang.invoke.LambdaForm.prepare(LambdaForm.java:790)
# ERROR: 	at java.base/java.lang.invoke.MethodHandle.<init>(MethodHandle.java:481)
# ERROR: 	at java.base/java.lang.invoke.BoundMethodHandle.<init>(BoundMethodHandle.java:56)
# ERROR: 	at java.base/java.lang.invoke.BoundMethodHandle$Species_L.<init>(BoundMethodHandle.java:227)
# ERROR: 	at java.base/java.lang.invoke.BoundMethodHandle$Species_L.copyWith(BoundMethodHandle.java:247)
# ERROR: 	at java.base/java.lang.invoke.MethodHandles.dropArguments0(MethodHandles.java:5252)
# ERROR: 	at java.base/java.lang.invoke.MethodHandles.dropArguments(MethodHandles.java:5315)
# ERROR: 	at java.base/java.lang.invoke.StringConcatFactory.generateMHInlineCopy(StringConcatFactory.java:514)
# ERROR: 	at java.base/java.lang.invoke.StringConcatFactory.makeConcatWithConstants(StringConcatFactory.java:358)
# ERROR: 	at java.base/java.lang.invoke.BootstrapMethodInvoker.invoke(BootstrapMethodInvoker.java:102)
# ERROR: 	at java.base/java.lang.invoke.CallSite.makeSite(CallSite.java:315)
# ERROR: 	at java.base/java.lang.invoke.MethodHandleNatives.linkCallSiteImpl(MethodHandleNatives.java:281)
# ERROR: 	at java.base/java.lang.invoke.MethodHandleNatives.linkCallSite(MethodHandleNatives.java:271)
# ERROR: 	at vm.mlvm.meth.share.transform.v2.MHCall.prettyPrint(MHCall.java:159)
# ERROR: 	at vm.mlvm.meth.share.transform.v2.MHMacroTF.appendElement(MHMacroTF.java:126)
# ERROR: 	at vm.mlvm.meth.share.transform.v2.MHMacroTF.getDescription(MHMacroTF.java:106)
# ERROR: 	at vm.mlvm.meth.share.transform.v2.MHTF.toString(MHTF.java:35)
# ERROR: 	at vm.mlvm.meth.share.MHTransformationGen.callSequence(MHTransformationGen.java:486)
# ERROR: 	at vm.mlvm.meth.share.MHTransformationGen.createAndCallSequence(MHTransformationGen.java:493)
# ERROR: 	at vm.mlvm.meth.stress.compiler.deoptimize.Test.runThread(Test.java:164)
# ERROR: 	at vm.mlvm.share.MultiThreadedTest.lambda$run$1(MultiThreadedTest.java:71)
# ERROR: 	at java.base/java.lang.Thread.run(Thread.java:831)
# ERROR: Test marked failed at vm.mlvm.share.MultiThreadedTest.lambda$run$1(MultiThreadedTest.java:82):
# ERROR: Thread Thread[Thread-2,5,MainThreadGroup] failed
# ERROR: Test marked failed at vm.mlvm.share.MultiThreadedTest.lambda$run$1(MultiThreadedTest.java:82):
# ERROR: Thread Thread[Thread-11,5,MainThreadGroup] failed
# ERROR: Test marked failed at vm.mlvm.share.MultiThreadedTest.lambda$run$1(MultiThreadedTest.java:82):
# ERROR: Thread Thread[Thread-23,5,MainThreadGroup] failed
# ERROR: Test marked failed at vm.mlvm.share.MultiThreadedTest.lambda$run$1(MultiThreadedTest.java:82):
# ERROR: Thread Thread[Thread-24,5,MainThreadGroup] failed
# ERROR: Failed runs: 1 of 1
The following stacktrace is for failure analysis.
nsk.share.TestFailure: Failed runs: 1 of 1
	at nsk.share.Log.logExceptionForFailureAnalysis(Log.java:432)
	at nsk.share.Log.complain(Log.java:403)
	at vm.mlvm.share.Env.complain(Env.java:164)
	at vm.mlvm.share.MlvmTestExecutor.runMlvmTestInstance(MlvmTestExecutor.java:408)
	at vm.mlvm.share.MlvmTestExecutor.runMlvmTest(MlvmTestExecutor.java:327)
	at vm.mlvm.share.MlvmTestExecutor.launch(MlvmTestExecutor.java:244)
	at vm.mlvm.share.MlvmTestExecutor.launch(MlvmTestExecutor.java:186)
	at vm.mlvm.share.MlvmTestExecutor.launch(MlvmTestExecutor.java:157)
	at vm.mlvm.share.MlvmTest.launch(MlvmTest.java:325)
	at vm.mlvm.meth.stress.compiler.deoptimize.Test.main(Test.java:170)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:78)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at com.sun.javatest.regtest.agent.MainWrapper$MainThread.run(MainWrapper.java:127)
	at java.base/java.lang.Thread.run(Thread.java:831)
### TRACE 1: TEST FAILED


#>  
#>  SUMMARY: Following errors occured
#>      during test execution:
#>  
# ERROR: Caught exception in Thread[Thread-19,5,MainThreadGroup]
# ERROR: java.lang.VirtualMachineError: Out of space in CodeCache for method handle intrinsic
# ERROR: 	at java.base/java.lang.invoke.BoundMethodHandle$Species_LLDJLL.copyWithExtendL(java/lang/invoke/BoundMethodHandle$Species_LLDJLL)
# ERROR: 	at java.base/java.lang.invoke.MethodHandles.filterArgument(MethodHandles.java:5592)
# ERROR: 	at java.base/java.lang.invoke.MethodHandles.filterArguments(MethodHandles.java:5549)
# ERROR: 	at vm.mlvm.meth.share.transform.v2.MHFilterTF.computeInboundMH(MHFilterTF.java:94)
# ERROR: 	at vm.mlvm.meth.share.transform.v2.MHPrimitiveTF.computeInboundCall(MHPrimitiveTF.java:38)
# ERROR: 	at vm.mlvm.meth.share.transform.v2.MHMacroTF.addTransformation(MHMacroTF.java:70)
# ERROR: 	at vm.mlvm.meth.share.MHTransformationGen.createSequence(MHTransformationGen.java:359)
# ERROR: 	at vm.mlvm.meth.share.MHTransformationGen.createAndCallSequence(MHTransformationGen.java:493)
# ERROR: 	at vm.mlvm.meth.stress.compiler.deoptimize.Test.runThread(Test.java:164)
# ERROR: 	at vm.mlvm.share.MultiThreadedTest.lambda$run$1(MultiThreadedTest.java:71)
# ERROR: 	at java.base/java.lang.Thread.run(Thread.java:831)
# ERROR: Caught exception in Thread[Thread-7,5,MainThreadGroup]
# ERROR: java.lang.VirtualMachineError: Out of space in CodeCache for adapters
# ERROR: 	at java.base/java.lang.ClassLoader.defineClass0(Native Method)
# ERROR: 	at java.base/java.lang.System$2.defineClass(System.java:2196)
# ERROR: 	at java.base/java.lang.invoke.MethodHandles$Lookup$ClassDefiner.defineClass(MethodHandles.java:2445)
# ERROR: 	at java.base/java.lang.invoke.InvokerBytecodeGenerator.loadMethod(InvokerBytecodeGenerator.java:319)
# ERROR: 	at java.base/java.lang.invoke.InvokerBytecodeGenerator.generateCustomizedCode(InvokerBytecodeGenerator.java:753)
# ERROR: 	at java.base/java.lang.invoke.LambdaForm.compileToBytecode(LambdaForm.java:832)
# ERROR: 	at java.base/java.lang.invoke.LambdaForm.prepare(LambdaForm.java:790)
# ERROR: 	at java.base/java.lang.invoke.MethodHandle.<init>(MethodHandle.java:481)
# ERROR: 	at java.base/java.lang.invoke.BoundMethodHandle.<init>(BoundMethodHandle.java:56)
# ERROR: 	at java.base/java.lang.invoke.BoundMethodHandle$Species_LLLLL.<init>(java/lang/invoke/BoundMethodHandle$Species_LLLLL)
# ERROR: 	at java.base/java.lang.invoke.BoundMethodHandle$Species_LLLLL.make(java/lang/invoke/BoundMethodHandle$Species_LLLLL)
# ERROR: 	at java.base/java.lang.invoke.BoundMethodHandle$Species_LLLL.copyWithExtendL(java/lang/invoke/BoundMethodHandle$Species_LLLL)
# ERROR: 	at java.base/java.lang.invoke.MethodHandleImpl.makePairwiseConvertByEditor(MethodHandleImpl.java:328)
# ERROR: 	at java.base/java.lang.invoke.MethodHandleImpl.makePairwiseConvert(MethodHandleImpl.java:260)
# ERROR: 	at java.base/java.lang.invoke.MethodHandleImpl.makePairwiseConvert(MethodHandleImpl.java:377)
# ERROR: 	at java.base/java.lang.invoke.MethodHandle.asTypeUncached(MethodHandle.java:885)
# ERROR: 	at java.base/java.lang.invoke.MethodHandle.asType(MethodHandle.java:869)
# ERROR: 	at vm.mlvm.meth.share.transform.v2.MHCollectSpreadTF.computeCollectorMH(MHCollectSpreadTF.java:37)
# ERROR: 	at vm.mlvm.meth.share.transform.v2.MHCollectSpreadBaseTF.computeInboundMH(MHCollectSpreadBaseTF.java:37)
# ERROR: 	at vm.mlvm.meth.share.transform.v2.MHBasicUnaryTF.computeInboundMH(MHBasicUnaryTF.java:56)
# ERROR: 	at vm.mlvm.meth.share.transform.v2.MHPrimitiveTF.computeInboundCall(MHPrimitiveTF.java:38)
# ERROR: 	at vm.mlvm.meth.share.transform.v2.MHMacroTF.addTransformation(MHMacroTF.java:70)
# ERROR: 	at vm.mlvm.meth.share.MHTransformationGen.createSequence(MHTransformationGen.java:448)
# ERROR: 	at vm.mlvm.meth.share.MHTransformationGen.createAndCallSequence(MHTransformationGen.java:493)
# ERROR: 	at vm.mlvm.meth.stress.compiler.deoptimize.Test.runThread(Test.java:164)
# ERROR: 	at vm.mlvm.share.MultiThreadedTest.lambda$run$1(MultiThreadedTest.java:71)
# ERROR: 	at java.base/java.lang.Thread.run(Thread.java:831)
# ERROR: Caught exception in Thread[Thread-14,5,MainThreadGroup]
# ERROR: java.lang.VirtualMachineError: Out of space in CodeCache for adapters
# ERROR: 	at java.base/java.lang.invoke.MethodHandleNatives.resolve(Native Method)
# ERROR: 	at java.base/java.lang.invoke.MemberName$Factory.resolve(MemberName.java:1083)
# ERROR: 	at java.base/java.lang.invoke.MemberName$Factory.resolveOrFail(MemberName.java:1112)
# ERROR: 	at java.base/java.lang.invoke.MethodHandles$Lookup.resolveOrFail(MethodHandles.java:3650)
# ERROR: 	at java.base/java.lang.invoke.MethodHandles$Lookup.findStatic(MethodHandles.java:2594)
# ERROR: 	at java.base/java.lang.invoke.ClassSpecializer$Factory.findFactory(ClassSpecializer.java:995)
# ERROR: 	at java.base/java.lang.invoke.ClassSpecializer$Factory.findFactories(ClassSpecializer.java:903)
# ERROR: 	at java.base/java.lang.invoke.ClassSpecializer$Factory.linkSpeciesDataToCode(ClassSpecializer.java:922)
# ERROR: 	at java.base/java.lang.invoke.ClassSpecializer$Factory.loadSpecies(ClassSpecializer.java:493)
# ERROR: 	at java.base/java.lang.invoke.ClassSpecializer.findSpecies(ClassSpecializer.java:195)
# ERROR: 	at java.base/java.lang.invoke.BoundMethodHandle$SpeciesData.extendWith(BoundMethodHandle.java:375)
# ERROR: 	at java.base/java.lang.invoke.LambdaFormEditor.newSpeciesData(LambdaFormEditor.java:465)
# ERROR: 	at java.base/java.lang.invoke.LambdaFormEditor.bindArgumentForm(LambdaFormEditor.java:528)
# ERROR: 	at java.base/java.lang.invoke.LambdaFormEditor.bindArgumentI(LambdaFormEditor.java:479)
# ERROR: 	at java.base/java.lang.invoke.BoundMethodHandle.bindArgumentI(BoundMethodHandle.java:102)
# ERROR: 	at java.base/java.lang.invoke.MethodHandles.insertArgumentPrimitive(MethodHandles.java:5176)
# ERROR: 	at java.base/java.lang.invoke.MethodHandles.insertArguments(MethodHandles.java:5157)
# ERROR: 	at vm.mlvm.meth.share.transform.v2.MHInsertTF.computeInboundMH(MHInsertTF.java:69)
# ERROR: 	at vm.mlvm.meth.share.transform.v2.MHBasicUnaryTF.computeInboundMH(MHBasicUnaryTF.java:56)
# ERROR: 	at vm.mlvm.meth.share.transform.v2.MHPrimitiveTF.computeInboundCall(MHPrimitiveTF.java:38)
# ERROR: 	at vm.mlvm.meth.share.transform.v2.MHMacroTF.addTransformation(MHMacroTF.java:70)
# ERROR: 	at vm.mlvm.meth.share.MHTransformationGen.createSequence(MHTransformationGen.java:448)
# ERROR: 	at vm.mlvm.meth.share.MHTransformationGen.createAndCallSequence(MHTransformationGen.java:493)
# ERROR: 	at vm.mlvm.meth.stress.compiler.deoptimize.Test.runThread(Test.java:164)
# ERROR: 	at vm.mlvm.share.MultiThreadedTest.lambda$run$1(MultiThreadedTest.java:71)
# ERROR: 	at java.base/java.lang.Thread.run(Thread.java:831)
# ERROR: Caught exception in Thread[Thread-15,5,MainThreadGroup]
# ERROR: java.lang.VirtualMachineError: Out of space in CodeCache for method handle intrinsic
# ERROR: 	at java.base/java.lang.invoke.BoundMethodHandle$Species_LLLLLILDL.copyWithExtendL(java/lang/invoke/BoundMethodHandle$Species_LLLLLILDL)
# ERROR: 	at java.base/java.lang.invoke.MethodHandleImpl.makePairwiseConvertByEditor(MethodHandleImpl.java:328)
# ERROR: 	at java.base/java.lang.invoke.MethodHandleImpl.makePairwiseConvert(MethodHandleImpl.java:260)
# ERROR: 	at java.base/java.lang.invoke.MethodHandleImpl.makePairwiseConvert(MethodHandleImpl.java:377)
# ERROR: 	at java.base/java.lang.invoke.MethodHandle.asTypeUncached(MethodHandle.java:885)
# ERROR: 	at java.base/java.lang.invoke.MethodHandle.asType(MethodHandle.java:869)
# ERROR: 	at java.base/java.lang.invoke.MethodHandle.asSpreader(MethodHandle.java:1026)
# ERROR: 	at java.base/java.lang.invoke.MethodHandle.asSpreader(MethodHandle.java:982)
# ERROR: 	at vm.mlvm.meth.share.transform.v2.MHCollectSpreadTF.computeSpreaderMH(MHCollectSpreadTF.java:42)
# ERROR: 	at vm.mlvm.meth.share.transform.v2.MHCollectSpreadBaseTF.computeInboundMH(MHCollectSpreadBaseTF.java:37)
# ERROR: 	at vm.mlvm.meth.share.transform.v2.MHBasicUnaryTF.computeInboundMH(MHBasicUnaryTF.java:56)
# ERROR: 	at vm.mlvm.meth.share.transform.v2.MHPrimitiveTF.computeInboundCall(MHPrimitiveTF.java:38)
# ERROR: 	at vm.mlvm.meth.share.transform.v2.MHMacroTF.addTransformation(MHMacroTF.java:70)
# ERROR: 	at vm.mlvm.meth.share.MHTransformationGen.createSequence(MHTransformationGen.java:448)
# ERROR: 	at vm.mlvm.meth.share.MHTransformationGen.createAndCallSequence(MHTransformationGen.java:493)
# ERROR: 	at vm.mlvm.meth.stress.compiler.deoptimize.Test.runThread(Test.java:164)
# ERROR: 	at vm.mlvm.share.MultiThreadedTest.lambda$run$1(MultiThreadedTest.java:71)
# ERROR: 	at java.base/java.lang.Thread.run(Thread.java:831)
# ERROR: Test marked failed at vm.mlvm.share.MultiThreadedTest.lambda$run$1(MultiThreadedTest.java:82):
# ERROR: Thread Thread[Thread-14,5,MainThreadGroup] failed
# ERROR: Test marked failed at vm.mlvm.share.MultiThreadedTest.lambda$run$1(MultiThreadedTest.java:82):
# ERROR: Thread Thread[Thread-15,5,MainThreadGroup] failed
# ERROR: Test marked failed at vm.mlvm.share.MultiThreadedTest.lambda$run$1(MultiThreadedTest.java:82):
# ERROR: Thread Thread[Thread-19,5,MainThreadGroup] failed
# ERROR: Test marked failed at vm.mlvm.share.MultiThreadedTest.lambda$run$1(MultiThreadedTest.java:82):
# ERROR: Thread Thread[Thread-7,5,MainThreadGroup] failed
# ERROR: Caught exception in Thread[Thread-8,5,MainThreadGroup]
# ERROR: java.lang.VirtualMachineError: Out of space in CodeCache for adapters
# ERROR: 	at java.base/java.lang.ClassLoader.defineClass0(Native Method)
# ERROR: 	at java.base/java.lang.System$2.defineClass(System.java:2196)
# ERROR: 	at java.base/java.lang.invoke.MethodHandles$Lookup$ClassDefiner.defineClass(MethodHandles.java:2445)
# ERROR: 	at java.base/java.lang.invoke.InvokerBytecodeGenerator.loadMethod(InvokerBytecodeGenerator.java:319)
# ERROR: 	at java.base/java.lang.invoke.InvokerBytecodeGenerator.generateCustomizedCode(InvokerBytecodeGenerator.java:753)
# ERROR: 	at java.base/java.lang.invoke.LambdaForm.compileToBytecode(LambdaForm.java:832)
# ERROR: 	at java.base/java.lang.invoke.LambdaForm.prepare(LambdaForm.java:790)
# ERROR: 	at java.base/java.lang.invoke.MethodHandle.<init>(MethodHandle.java:481)
# ERROR: 	at java.base/java.lang.invoke.BoundMethodHandle.<init>(BoundMethodHandle.java:56)
# ERROR: 	at java.base/java.lang.invoke.BoundMethodHandle$Species_L.<init>(BoundMethodHandle.java:227)
# ERROR: 	at java.base/java.lang.invoke.BoundMethodHandle$Species_L.copyWith(BoundMethodHandle.java:247)
# ERROR: 	at java.base/java.lang.invoke.MethodHandles.dropArguments0(MethodHandles.java:5252)
# ERROR: 	at java.base/java.lang.invoke.MethodHandles.dropArguments(MethodHandles.java:5315)
# ERROR: 	at java.base/java.lang.invoke.StringConcatFactory.generateMHInlineCopy(StringConcatFactory.java:514)
# ERROR: 	at java.base/java.lang.invoke.StringConcatFactory.makeConcatWithConstants(StringConcatFactory.java:358)
# ERROR: 	at java.base/java.lang.invoke.BootstrapMethodInvoker.invoke(BootstrapMethodInvoker.java:102)
# ERROR: 	at java.base/java.lang.invoke.CallSite.makeSite(CallSite.java:315)
# ERROR: 	at java.base/java.lang.invoke.MethodHandleNatives.linkCallSiteImpl(MethodHandleNatives.java:281)
# ERROR: 	at java.base/java.lang.invoke.MethodHandleNatives.linkCallSite(MethodHandleNatives.java:271)
# ERROR: 	at vm.mlvm.meth.share.transform.v2.MHCall.prettyPrint(MHCall.java:159)
# ERROR: 	at vm.mlvm.meth.share.transform.v2.MHMacroTF.appendElement(MHMacroTF.java:126)
# ERROR: 	at vm.mlvm.meth.share.transform.v2.MHMacroTF.getDescription(MHMacroTF.java:106)
# ERROR: 	at vm.mlvm.meth.share.transform.v2.MHTF.toString(MHTF.java:35)
# ERROR: 	at vm.mlvm.meth.share.MHTransformationGen.callSequence(MHTransformationGen.java:486)
# ERROR: 	at vm.mlvm.meth.share.MHTransformationGen.createAndCallSequence(MHTransformationGen.java:493)
# ERROR: 	at vm.mlvm.meth.stress.compiler.deoptimize.Test.runThread(Test.java:164)
# ERROR: 	at vm.mlvm.share.MultiThreadedTest.lambda$run$1(MultiThreadedTest.java:71)
# ERROR: 	at java.base/java.lang.Thread.run(Thread.java:831)
# ERROR: Test marked failed at vm.mlvm.share.MultiThreadedTest.lambda$run$1(MultiThreadedTest.java:82):
# ERROR: Thread Thread[Thread-8,5,MainThreadGroup] failed
# ERROR: Caught exception in Thread[Thread-2,5,MainThreadGroup]
# ERROR: java.lang.VirtualMachineError: Out of space in CodeCache for adapters
# ERROR: 	at java.base/java.lang.ClassLoader.defineClass0(Native Method)
# ERROR: 	at java.base/java.lang.System$2.defineClass(System.java:2196)
# ERROR: 	at java.base/java.lang.invoke.MethodHandles$Lookup$ClassDefiner.defineClass(MethodHandles.java:2445)
# ERROR: 	at java.base/java.lang.invoke.InvokerBytecodeGenerator.loadMethod(InvokerBytecodeGenerator.java:319)
# ERROR: 	at java.base/java.lang.invoke.InvokerBytecodeGenerator.generateCustomizedCode(InvokerBytecodeGenerator.java:753)
# ERROR: 	at java.base/java.lang.invoke.LambdaForm.compileToBytecode(LambdaForm.java:832)
# ERROR: 	at java.base/java.lang.invoke.LambdaForm.prepare(LambdaForm.java:790)
# ERROR: 	at java.base/java.lang.invoke.MethodHandle.<init>(MethodHandle.java:481)
# ERROR: 	at java.base/java.lang.invoke.BoundMethodHandle.<init>(BoundMethodHandle.java:56)
# ERROR: 	at java.base/java.lang.invoke.BoundMethodHandle$Species_L.<init>(BoundMethodHandle.java:227)
# ERROR: 	at java.base/java.lang.invoke.BoundMethodHandle$Species_L.copyWith(BoundMethodHandle.java:247)
# ERROR: 	at java.base/java.lang.invoke.MethodHandles.dropArguments0(MethodHandles.java:5252)
# ERROR: 	at java.base/java.lang.invoke.MethodHandles.dropArguments(MethodHandles.java:5315)
# ERROR: 	at java.base/java.lang.invoke.StringConcatFactory.generateMHInlineCopy(StringConcatFactory.java:514)
# ERROR: 	at java.base/java.lang.invoke.StringConcatFactory.makeConcatWithConstants(StringConcatFactory.java:358)
# ERROR: 	at java.base/java.lang.invoke.BootstrapMethodInvoker.invoke(BootstrapMethodInvoker.java:102)
# ERROR: 	at java.base/java.lang.invoke.CallSite.makeSite(CallSite.java:315)
# ERROR: 	at java.base/java.lang.invoke.MethodHandleNatives.linkCallSiteImpl(MethodHandleNatives.java:281)
# ERROR: 	at java.base/java.lang.invoke.MethodHandleNatives.linkCallSite(MethodHandleNatives.java:271)
# ERROR: 	at vm.mlvm.meth.share.transform.v2.MHCall.prettyPrint(MHCall.java:159)
# ERROR: 	at vm.mlvm.meth.share.transform.v2.MHMacroTF.appendElement(MHMacroTF.java:126)
# ERROR: 	at vm.mlvm.meth.share.transform.v2.MHMacroTF.getDescription(MHMacroTF.java:106)
# ERROR: 	at vm.mlvm.meth.share.transform.v2.MHTF.toString(MHTF.java:35)
# ERROR: 	at vm.mlvm.meth.share.MHTransformationGen.callSequence(MHTransformationGen.java:486)
# ERROR: 	at vm.mlvm.meth.share.MHTransformationGen.createAndCallSequence(MHTransformationGen.java:493)
# ERROR: 	at vm.mlvm.meth.stress.compiler.deoptimize.Test.runThread(Test.java:164)
# ERROR: 	at vm.mlvm.share.MultiThreadedTest.lambda$run$1(MultiThreadedTest.java:71)
# ERROR: 	at java.base/java.lang.Thread.run(Thread.java:831)
# ERROR: Caught exception in Thread[Thread-24,5,MainThreadGroup]
# ERROR: java.lang.VirtualMachineError: Out of space in CodeCache for adapters
# ERROR: 	at java.base/java.lang.ClassLoader.defineClass0(Native Method)
# ERROR: 	at java.base/java.lang.System$2.defineClass(System.java:2196)
# ERROR: 	at java.base/java.lang.invoke.MethodHandles$Lookup$ClassDefiner.defineClass(MethodHandles.java:2445)
# ERROR: 	at java.base/java.lang.invoke.InvokerBytecodeGenerator.loadMethod(InvokerBytecodeGenerator.java:319)
# ERROR: 	at java.base/java.lang.invoke.InvokerBytecodeGenerator.generateCustomizedCode(InvokerBytecodeGenerator.java:753)
# ERROR: 	at java.base/java.lang.invoke.LambdaForm.compileToBytecode(LambdaForm.java:832)
# ERROR: 	at java.base/java.lang.invoke.LambdaForm.prepare(LambdaForm.java:790)
# ERROR: 	at java.base/java.lang.invoke.MethodHandle.<init>(MethodHandle.java:481)
# ERROR: 	at java.base/java.lang.invoke.BoundMethodHandle.<init>(BoundMethodHandle.java:56)
# ERROR: 	at java.base/java.lang.invoke.BoundMethodHandle$Species_L.<init>(BoundMethodHandle.java:227)
# ERROR: 	at java.base/java.lang.invoke.BoundMethodHandle$Species_L.copyWith(BoundMethodHandle.java:247)
# ERROR: 	at java.base/java.lang.invoke.MethodHandles.dropArguments0(MethodHandles.java:5252)
# ERROR: 	at java.base/java.lang.invoke.MethodHandles.dropArguments(MethodHandles.java:5315)
# ERROR: 	at java.base/java.lang.invoke.StringConcatFactory.generateMHInlineCopy(StringConcatFactory.java:514)
# ERROR: 	at java.base/java.lang.invoke.StringConcatFactory.makeConcatWithConstants(StringConcatFactory.java:358)
# ERROR: 	at java.base/java.lang.invoke.BootstrapMethodInvoker.invoke(BootstrapMethodInvoker.java:102)
# ERROR: 	at java.base/java.lang.invoke.CallSite.makeSite(CallSite.java:315)
# ERROR: 	at java.base/java.lang.invoke.MethodHandleNatives.linkCallSiteImpl(MethodHandleNatives.java:281)
# ERROR: 	at java.base/java.lang.invoke.MethodHandleNatives.linkCallSite(MethodHandleNatives.java:271)
# ERROR: 	at vm.mlvm.meth.share.transform.v2.MHCall.prettyPrint(MHCall.java:159)
# ERROR: 	at vm.mlvm.meth.share.transform.v2.MHMacroTF.appendElement(MHMacroTF.java:126)
# ERROR: 	at vm.mlvm.meth.share.transform.v2.MHMacroTF.getDescription(MHMacroTF.java:106)
# ERROR: 	at vm.mlvm.meth.share.transform.v2.MHTF.toString(MHTF.java:35)
# ERROR: 	at vm.mlvm.meth.share.MHTransformationGen.callSequence(MHTransformationGen.java:486)
# ERROR: 	at vm.mlvm.meth.share.MHTransformationGen.createAndCallSequence(MHTransformationGen.java:493)
# ERROR: 	at vm.mlvm.meth.stress.compiler.deoptimize.Test.runThread(Test.java:164)
# ERROR: 	at vm.mlvm.share.MultiThreadedTest.lambda$run$1(MultiThreadedTest.java:71)
# ERROR: 	at java.base/java.lang.Thread.run(Thread.java:831)
# ERROR: Caught exception in Thread[Thread-23,5,MainThreadGroup]
# ERROR: java.lang.VirtualMachineError: Out of space in CodeCache for adapters
# ERROR: 	at java.base/java.lang.ClassLoader.defineClass0(Native Method)
# ERROR: 	at java.base/java.lang.System$2.defineClass(System.java:2196)
# ERROR: 	at java.base/java.lang.invoke.MethodHandles$Lookup$ClassDefiner.defineClass(MethodHandles.java:2445)
# ERROR: 	at java.base/java.lang.invoke.InvokerBytecodeGenerator.loadMethod(InvokerBytecodeGenerator.java:319)
# ERROR: 	at java.base/java.lang.invoke.InvokerBytecodeGenerator.generateCustomizedCode(InvokerBytecodeGenerator.java:753)
# ERROR: 	at java.base/java.lang.invoke.LambdaForm.compileToBytecode(LambdaForm.java:832)
# ERROR: 	at java.base/java.lang.invoke.LambdaForm.prepare(LambdaForm.java:790)
# ERROR: 	at java.base/java.lang.invoke.MethodHandle.<init>(MethodHandle.java:481)
# ERROR: 	at java.base/java.lang.invoke.BoundMethodHandle.<init>(BoundMethodHandle.java:56)
# ERROR: 	at java.base/java.lang.invoke.BoundMethodHandle$Species_L.<init>(BoundMethodHandle.java:227)
# ERROR: 	at java.base/java.lang.invoke.BoundMethodHandle$Species_L.copyWith(BoundMethodHandle.java:247)
# ERROR: 	at java.base/java.lang.invoke.MethodHandles.dropArguments0(MethodHandles.java:5252)
# ERROR: 	at java.base/java.lang.invoke.MethodHandles.dropArguments(MethodHandles.java:5315)
# ERROR: 	at java.base/java.lang.invoke.StringConcatFactory.generateMHInlineCopy(StringConcatFactory.java:514)
# ERROR: 	at java.base/java.lang.invoke.StringConcatFactory.makeConcatWithConstants(StringConcatFactory.java:358)
# ERROR: 	at java.base/java.lang.invoke.BootstrapMethodInvoker.invoke(BootstrapMethodInvoker.java:102)
# ERROR: 	at java.base/java.lang.invoke.CallSite.makeSite(CallSite.java:315)
# ERROR: 	at java.base/java.lang.invoke.MethodHandleNatives.linkCallSiteImpl(MethodHandleNatives.java:281)
# ERROR: 	at java.base/java.lang.invoke.MethodHandleNatives.linkCallSite(MethodHandleNatives.java:271)
# ERROR: 	at vm.mlvm.meth.share.transform.v2.MHCall.prettyPrint(MHCall.java:159)
# ERROR: 	at vm.mlvm.meth.share.transform.v2.MHMacroTF.appendElement(MHMacroTF.java:126)
# ERROR: 	at vm.mlvm.meth.share.transform.v2.MHMacroTF.getDescription(MHMacroTF.java:106)
# ERROR: 	at vm.mlvm.meth.share.transform.v2.MHTF.toString(MHTF.java:35)
# ERROR: 	at vm.mlvm.meth.share.MHTransformationGen.callSequence(MHTransformationGen.java:486)
# ERROR: 	at vm.mlvm.meth.share.MHTransformationGen.createAndCallSequence(MHTransformationGen.java:493)
# ERROR: 	at vm.mlvm.meth.stress.compiler.deoptimize.Test.runThread(Test.java:164)
# ERROR: 	at vm.mlvm.share.MultiThreadedTest.lambda$run$1(MultiThreadedTest.java:71)
# ERROR: 	at java.base/java.lang.Thread.run(Thread.java:831)
# ERROR: Caught exception in Thread[Thread-11,5,MainThreadGroup]
# ERROR: java.lang.VirtualMachineError: Out of space in CodeCache for adapters
# ERROR: 	at java.base/java.lang.ClassLoader.defineClass0(Native Method)
# ERROR: 	at java.base/java.lang.System$2.defineClass(System.java:2196)
# ERROR: 	at java.base/java.lang.invoke.MethodHandles$Lookup$ClassDefiner.defineClass(MethodHandles.java:2445)
# ERROR: 	at java.base/java.lang.invoke.InvokerBytecodeGenerator.loadMethod(InvokerBytecodeGenerator.java:319)
# ERROR: 	at java.base/java.lang.invoke.InvokerBytecodeGenerator.generateCustomizedCode(InvokerBytecodeGenerator.java:753)
# ERROR: 	at java.base/java.lang.invoke.LambdaForm.compileToBytecode(LambdaForm.java:832)
# ERROR: 	at java.base/java.lang.invoke.LambdaForm.prepare(LambdaForm.java:790)
# ERROR: 	at java.base/java.lang.invoke.MethodHandle.<init>(MethodHandle.java:481)
# ERROR: 	at java.base/java.lang.invoke.BoundMethodHandle.<init>(BoundMethodHandle.java:56)
# ERROR: 	at java.base/java.lang.invoke.BoundMethodHandle$Species_L.<init>(BoundMethodHandle.java:227)
# ERROR: 	at java.base/java.lang.invoke.BoundMethodHandle$Species_L.copyWith(BoundMethodHandle.java:247)
# ERROR: 	at java.base/java.lang.invoke.MethodHandles.dropArguments0(MethodHandles.java:5252)
# ERROR: 	at java.base/java.lang.invoke.MethodHandles.dropArguments(MethodHandles.java:5315)
# ERROR: 	at java.base/java.lang.invoke.StringConcatFactory.generateMHInlineCopy(StringConcatFactory.java:514)
# ERROR: 	at java.base/java.lang.invoke.StringConcatFactory.makeConcatWithConstants(StringConcatFactory.java:358)
# ERROR: 	at java.base/java.lang.invoke.BootstrapMethodInvoker.invoke(BootstrapMethodInvoker.java:102)
# ERROR: 	at java.base/java.lang.invoke.CallSite.makeSite(CallSite.java:315)
# ERROR: 	at java.base/java.lang.invoke.MethodHandleNatives.linkCallSiteImpl(MethodHandleNatives.java:281)
# ERROR: 	at java.base/java.lang.invoke.MethodHandleNatives.linkCallSite(MethodHandleNatives.java:271)
# ERROR: 	at vm.mlvm.meth.share.transform.v2.MHCall.prettyPrint(MHCall.java:159)
# ERROR: 	at vm.mlvm.meth.share.transform.v2.MHMacroTF.appendElement(MHMacroTF.java:126)
# ERROR: 	at vm.mlvm.meth.share.transform.v2.MHMacroTF.getDescription(MHMacroTF.java:106)
# ERROR: 	at vm.mlvm.meth.share.transform.v2.MHTF.toString(MHTF.java:35)
# ERROR: 	at vm.mlvm.meth.share.MHTransformationGen.callSequence(MHTransformationGen.java:486)
# ERROR: 	at vm.mlvm.meth.share.MHTransformationGen.createAndCallSequence(MHTransformationGen.java:493)
# ERROR: 	at vm.mlvm.meth.stress.compiler.deoptimize.Test.runThread(Test.java:164)
# ERROR: 	at vm.mlvm.share.MultiThreadedTest.lambda$run$1(MultiThreadedTest.java:71)
# ERROR: 	at java.base/java.lang.Thread.run(Thread.java:831)
# ERROR: Test marked failed at vm.mlvm.share.MultiThreadedTest.lambda$run$1(MultiThreadedTest.java:82):
# ERROR: Thread Thread[Thread-2,5,MainThreadGroup] failed
# ERROR: Test marked failed at vm.mlvm.share.MultiThreadedTest.lambda$run$1(MultiThreadedTest.java:82):
# ERROR: Thread Thread[Thread-11,5,MainThreadGroup] failed
# ERROR: Test marked failed at vm.mlvm.share.MultiThreadedTest.lambda$run$1(MultiThreadedTest.java:82):
# ERROR: Thread Thread[Thread-23,5,MainThreadGroup] failed
# ERROR: Test marked failed at vm.mlvm.share.MultiThreadedTest.lambda$run$1(MultiThreadedTest.java:82):
# ERROR: Thread Thread[Thread-24,5,MainThreadGroup] failed
# ERROR: Failed runs: 1 of 1
----------System.err:(2/203)----------
Java HotSpot(TM) 64-Bit Server VM warning: CodeCache is full. Compiler has been disabled.
Java HotSpot(TM) 64-Bit Server VM warning: Try increasing the code cache size using -XX:ReservedCodeCacheSize=
----------rerun:(50/6958)*----------


This failure mode first appeared in the build-ID that contains:

JDK-8058176 [mlvm] tests should not allow code cache exhaustion

so it's likely that these failures are related to that fix.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8058176,JDK-8260907,,,,,,,,,,,,,,,,,,generic,,,,,,,,,generic,,,,,"0|i2sf4b:",9223372036854775807,b21,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2021-05-03 07:33;roboduke;Changeset: 880c138b
Author:    Evgeny Nikitin <enikitin@openjdk.org>
Committer: Igor Ignatyev <iignatyev@openjdk.org>
Date:      2021-05-03 14:32:18 +0000
URL:       https://git.openjdk.java.net/jdk/commit/880c138b587e0902cd19c27a02baf41b57ac0bb0
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
gtest/LargePageGtests.java OOMEs on -XX:+UseSHM cases,JDK-8265332,5047042,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,shade,shade,shade,2021-04-16 01:58,2021-04-28 17:38,2023-10-01 09:57,2021-04-22 01:31,17,,,,,,,17,hotspot,,0,testbug,,,,,,,,,,,,,"It looks like some +UseSHM test cases added by JDK-8213269 reliably blow up the VM log reader with OOME. There are lots of ""OpenJDK 64-Bit Server VM warning: Failed to reserve shared memory."" in the log, if you increase the test heap size. AFAIU, many of those messages are expected from the new test cases.

$ make run-test TEST=jtreg:gtest/LargePageGtests.java

jdk.test.lib.process.OutputBuffer$OutputBufferException: java.util.concurrent.ExecutionException: java.lang.OutOfMemoryError: Java heap space
	at jdk.test.lib.process.OutputBuffer$LazyOutputBuffer$StreamTask.get(OutputBuffer.java:115)
	at jdk.test.lib.process.OutputBuffer$LazyOutputBuffer.getStderr(OutputBuffer.java:144)
	at jdk.test.lib.process.OutputAnalyzer.getStderr(OutputAnalyzer.java:557)
	at jdk.test.lib.process.ProcessTools.getProcessLog(ProcessTools.java:494)
	at jdk.test.lib.process.ProcessTools.executeProcess(ProcessTools.java:470)
	at jdk.test.lib.process.ProcessTools.executeProcess(ProcessTools.java:417)
	at jdk.test.lib.process.ProcessTools.executeProcess(ProcessTools.java:404)
	at jdk.test.lib.process.ProcessTools.executeCommand(ProcessTools.java:553)
	at GTestWrapper.main(GTestWrapper.java:91)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:78)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at com.sun.javatest.regtest.agent.MainActionHelper$AgentVMRunnable.run(MainActionHelper.java:298)
	at java.base/java.lang.Thread.run(Thread.java:831)
Caused by: java.util.concurrent.ExecutionException: java.lang.OutOfMemoryError: Java heap space
	at java.base/java.util.concurrent.FutureTask.report(FutureTask.java:122)
	at java.base/java.util.concurrent.FutureTask.get(FutureTask.java:191)
	at jdk.test.lib.process.OutputBuffer$LazyOutputBuffer$StreamTask.get(OutputBuffer.java:109)
	... 14 more
Caused by: java.lang.OutOfMemoryError: Java heap space
	at java.base/java.util.Arrays.copyOf(Arrays.java:3536)
	at java.base/java.io.ByteArrayOutputStream.ensureCapacity(ByteArrayOutputStream.java:100)
	at java.base/java.io.ByteArrayOutputStream.write(ByteArrayOutputStream.java:130)
	at jdk.test.lib.process.StreamPumper.run(StreamPumper.java:111)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	... 1 more


This seems to help:

diff --git a/test/hotspot/jtreg/gtest/LargePageGtests.java b/test/hotspot/jtreg/gtest/LargePageGtests.java
index 87ce5db8064..4fdcf655703 100644
--- a/test/hotspot/jtreg/gtest/LargePageGtests.java
+++ b/test/hotspot/jtreg/gtest/LargePageGtests.java
@@ -61,5 +61,5 @@
  * @modules java.base/jdk.internal.misc
  *          java.xml
  * @requires vm.flagless
- * @run main/native GTestWrapper --gtest_filter=os* -XX:+UseLargePages -XX:+UseSHM
+ * @run main/othervm/native -Xmx2g GTestWrapper --gtest_filter=os* -XX:+UseLargePages -XX:+UseSHM
  */

Dropping the number of concurrent threads from 30 (!) to 4 helps as well:

diff --git a/test/hotspot/gtest/runtime/test_os_linux.cpp b/test/hotspot/gtest/runtime/test_os_linux.cpp
index f4841efe342..35e98d57a27 100644
--- a/test/hotspot/gtest/runtime/test_os_linux.cpp
+++ b/test/hotspot/gtest/runtime/test_os_linux.cpp
@@ -415,7 +415,7 @@ public:
 
 TEST_VM(os_linux, reserve_memory_special_concurrent) {
   ReserveMemorySpecialRunnable runnable;
-  ConcurrentTestRunner testRunner(&runnable, 30, 15000);
+  ConcurrentTestRunner testRunner(&runnable, 4, 15000);
   testRunner.run();
 }

I believe ultimately this test produces a virtually unbounded number of warning messages, which would eventually blow out the Java heap. ConcurrentTestRunner runs a time-bound number of iterations, which means the faster machine is, the more warning messages would be printed. Maybe the way out is to make ConcurrentTestRunner do the static number of iterations, so that VM output length is more predictable.
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8213269,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2sevn:",9223372036854775807,b20,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,,,"2021-04-20 11:10;mseledtsov;ILW = MLM = P4;;;","2021-04-22 01:31;roboduke;Changeset: aa297848
Author:    Aleksey Shipilev <shade@openjdk.org>
Date:      2021-04-22 08:31:10 +0000
URL:       https://git.openjdk.java.net/jdk/commit/aa297848
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
G1: Fix comment in G1FullGCPrepareTask::G1CalculatePointersClosure,JDK-8265330,5047040,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,tschatzl,tschatzl,tschatzl,2021-04-16 00:49,2021-04-21 18:03,2023-10-01 09:57,2021-04-16 02:26,17,,,,,,,17,hotspot,,0,gc-g1,gc-g1-fullgc,,,,,,,,,,,,"The comment in G1FullGCPrepareTask::G1CalculatePointersClosure is missing a crucial ""not"":

      // Force the high live ratio region as compacting to skip these regions in the
      // later compaction step.

i.e. s/compacting/not-compacting",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8264818,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2sev7:",9223372036854775807,b19,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6b00f96c,,,,,,,,,"2021-04-16 02:26;roboduke;Changeset: 1d66a155
Author:    Thomas Schatzl <tschatzl@openjdk.org>
Date:      2021-04-16 09:25:36 +0000
URL:       https://git.openjdk.java.net/jdk/commit/1d66a155
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Strange Characters in G1GC GC Log,JDK-8265326,5046923,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,fmatte,webbuggrp,webbuggrp,2021-04-14 12:05,2021-04-28 17:37,2023-10-01 09:57,2021-04-21 04:49,16,17,,,,,,17,hotspot,,0,dcsswa,regression,reproducer-yes,webbug,,,,,,,,,,"ADDITIONAL SYSTEM INFORMATION :
Mac OS X 10.15.7
Happens in both Java 16 and 17-ea

openjdk version ""16"" 2021-03-16
OpenJDK Runtime Environment (build 16+36-2231)
OpenJDK 64-Bit Server VM (build 16+36-2231, mixed mode, sharing)

openjdk version ""17-ea"" 2021-09-14
OpenJDK Runtime Environment (build 17-ea+13-1000)
OpenJDK 64-Bit Server VM (build 17-ea+13-1000, mixed mode, sharing)

A DESCRIPTION OF THE PROBLEM :
When generating a G1 GC log, strange characters appear in the GC log, making parsing difficult.

REGRESSION : Last worked in version 15.0.2

STEPS TO FOLLOW TO REPRODUCE THE PROBLEM :
Generate a GC Log with G1, either with -verbose:gc or -Xlog:gc:log.vgc


EXPECTED VERSUS ACTUAL BEHAVIOR :
EXPECTED -
java -showversion -verbose:gc G1Characters
[0.005s][info][gc] Using G1
openjdk version ""15.0.2"" 2021-01-19
OpenJDK Runtime Environment Zulu15.29+15-CA (build 15.0.2+7)
OpenJDK 64-Bit Server VM Zulu15.29+15-CA (build 15.0.2+7, mixed mode, sharing)
[0.136s][info][gc] GC(0) Pause Young (Concurrent Start) (G1 Humongous Allocation) 457M->24M(1040M) 2.574ms
[0.136s][info][gc] GC(1) Concurrent Cycle
[0.142s][info][gc] GC(1) Pause Remark 72M->72M(296M) 3.834ms
[0.143s][info][gc] GC(1) Pause Cleanup 88M->88M(296M) 0.120ms
[0.144s][info][gc] GC(1) Concurrent Cycle 7.757ms
[0.145s][info][gc] GC(2) Pause Young (Concurrent Start) (G1 Humongous Allocation) 120M->24M(296M) 1.392ms
[0.145s][info][gc] GC(3) Concurrent Cycle
[0.147s][info][gc] GC(3) Pause Remark 72M->72M(296M) 0.224ms
[0.147s][info][gc] GC(3) Pause Cleanup 88M->88M(296M) 0.035ms
[0.149s][info][gc] GC(3) Concurrent Cycle 3.256ms
[0.150s][info][gc] GC(4) Pause Young (Concurrent Start) (G1 Humongous Allocation) 136M->24M(296M) 0.698ms
[0.150s][info][gc] GC(5) Concurrent Cycle
[0.151s][info][gc] GC(5) Pause Remark 72M->72M(296M) 0.202ms
[0.152s][info][gc] GC(5) Pause Cleanup 88M->88M(296M) 0.027ms
[0.152s][info][gc] GC(5) Concurrent Cycle 2.374ms
etc.
ACTUAL -
java -showversion -verbose:gc G1Characters
[0.004s][info][gc] Using G1
openjdk version ""16"" 2021-03-16
OpenJDK Runtime Environment (build 16+36-2231)
OpenJDK 64-Bit Server VM (build 16+36-2231, mixed mode, sharing)
[0.134s][info][gc] GC(0) Pause Young (Concurrent Start) (G1 Humongous Allocation) 457M->24M(1040M) 3.213ms
[0.134s][info][gc] GC(1) Concurrent Undo Cycle
[0.140s][info][gc] GC(1) ???t? 5.650ms
[0.151s][info][gc] GC(2) Pause Young (Concurrent Start) (G1 Humongous Allocation) 456M->24M(1040M) 1.674ms
[0.151s][info][gc] GC(3) Concurrent Undo Cycle
[0.153s][info][gc] GC(3) ???t? 2.388ms
[0.164s][info][gc] GC(4) Pause Young (Concurrent Start) (G1 Humongous Allocation) 456M->24M(1040M) 1.139ms
[0.164s][info][gc] GC(5) Concurrent Undo Cycle
[0.166s][info][gc] GC(5) ???t? 1.973ms
etc.

---------- BEGIN SOURCE ----------
public class G1Characters {
  private static Object leak;
  public static void main(String... args) {
    while(true) {
      leak = new byte[10_000_000];
    }
  }
}

---------- END SOURCE ----------

CUSTOMER SUBMITTED WORKAROUND :
Use a different version of Java or a different garbage collector

FREQUENCY : always


",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8265488,,,JDK-8265682,,,,JDK-8240556,,,,"2021-04-15 22:13;sswsharm;G1Characters.java;https://bugs.openjdk.org/secure/attachment/94193/G1Characters.java",,,,,,,,,,,x86_64,,,,,,b18,16,,os_x,,,,,"0|i2se57:",9223372036854775807,b20,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6b00f96c,,,,,,,,,"2021-04-15 22:17;sswsharm;Issue is not reproduced on Windows and Linux OS.

OS: Windows 10
JDK 15.0.2:Pass
JDK16:Pass
JDK 17ea16:Pass

Output:
[0.030s][info][gc] Using G1
[0.136s][info][gc] GC(0) Pause Young (Concurrent Start) (G1 Humongous Allocation) 111M->10M(256M) 2.391ms
[0.137s][info][gc] GC(1) Concurrent Cycle
[0.141s][info][gc] GC(1) Pause Remark 50M->50M(174M) 1.450ms
[0.142s][info][gc] GC(1) Pause Cleanup 60M->60M(174M) 0.126ms
[0.144s][info][gc] GC(1) Concurrent Cycle 7.518ms
[0.146s][info][gc] GC(2) Pause Young (Concurrent Start) (G1 Humongous Allocation) 80M->10M(174M) 1.283ms
[0.147s][info][gc] GC(3) Concurrent Cycle
[0.150s][info][gc] GC(3) Pause Remark 40M->40M(140M) 1.025ms
[0.151s][info][gc] GC(3) Pause Cleanup 50M->50M(140M) 0.113ms
[0.153s][info][gc] GC(3) Concurrent Cycle 6.124ms

OS: Linux(Ubuntu20.04)
JDK 16:Pass
JDK 17ea12:Pass

Submitter has reported this issue on MAC OS , moving it to dev team for further analysis.
;;;","2021-04-19 08:46;fmatte;The regression is caused by JDK-8240556;;;","2021-04-21 04:49;roboduke;Changeset: da860290
Author:    Fairoz Matte <fmatte@openjdk.org>
Committer: Thomas Schatzl <tschatzl@openjdk.org>
Date:      2021-04-21 11:48:27 +0000
URL:       https://git.openjdk.java.net/jdk/commit/da860290
;;;","2021-04-22 14:51;vprovodin;There is a similar issue with HeapRegionRemSet constructor that retains pointer to a temporary, which lives only until the end of the containing full-expression. Can be fixed with something along these lines:
https://github.com/mkartashev/jdk/commit/3cb2a08420b9b7548988b5253853689067aea322;;;","2021-04-23 04:55;coleenp;I'm fixing this second issue with a strdup in the mutex name constructor.  See JDK-8265682.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
[vector] assert(payload->is_object()) failed: expected 'object' value for scalar-replaced boxed vector but got: NULL,JDK-8265317,5047028,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,vlivanov,epavlova,epavlova,2021-04-15 16:33,2022-03-08 09:43,2023-10-01 09:57,2022-01-04 04:35,17,18,,,,,,18,hotspot,,0,c2,hs-comp-triaged,intermittent,jdk17u-fix-request,jdk17u-fix-yes,oracle-triage-11,oracle-triage-18,vectorIntrinsics,,,,,,"vectorIntrinsics crashes with

#  Internal Error (/home/katya/work/JavaSE/Hotspot/ws/git/panama-vector/open/src/hotspot/share/prims/vectorSupport.cpp:173), pid=32306, tid=32328
#  assert(payload->is_object()) failed: expected 'object' value for scalar-replaced boxed vector but got: NULL
#
# JRE version: Java(TM) SE Runtime Environment (17.0) (fastdebug build 17-internal+0-LTS-2021-04-15-2003590.katya...)
# Java VM: Java HotSpot(TM) 64-Bit Server VM (fastdebug 17-internal+0-LTS-2021-04-15-2003590.katya..., compiled mode, sharing, compressed oops, compressed class ptrs, g1 gc, linux-amd64)
# Problematic frame:
# V  [libjvm.so+0x18fa11f]  VectorSupport::allocate_vector_payload(InstanceKlass*, frame*, RegisterMap*, ScopeValue*, Thread*)+0x30f

when running with DeoptimizeALot flag.

The failed list of tests:

 jdk/incubator/vector/Byte128VectorTests.java
 jdk/incubator/vector/Byte256VectorTests.java
 jdk/incubator/vector/Byte64VectorTests.java
 jdk/incubator/vector/DoubleMaxVectorTests.java
 jdk/incubator/vector/Int128VectorTests.java
 jdk/incubator/vector/Long256VectorTests.java
 jdk/incubator/vector/Short256VectorTests.java
 jdk/incubator/vector/Short64VectorTests.java
 jdk/incubator/vector/ShortMaxVectorTests.java


To reproduce run on of above tests with ""-Xcomp -XX:CompileThreshold=100 -XX:+UnlockExperimentalVMOptions -XX:+DeoptimizeALot""

vectorIntrinsics contains the fix for JDK-8263125 ""During deoptimization vectors should reassign scalarized payload after all objects are reallocated."".
So this is new issue.",,,,,,,,,,,JDK-8279766,JDK-8280774,JDK-8279811,JDK-8282821,,,,,,,,,,,,,,,,JDK-8278925,,,,,,,JDK-8263125,,,,"2021-04-15 16:35;epavlova;hs_err_bug8265317.log;https://bugs.openjdk.org/secure/attachment/94190/hs_err_bug8265317.log",,,,,,,,,,,,,,,,,,,,,,,,,"0|i2sesj:",9223372036854775807,b30,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2021-04-21 12:15;epavlova;The same crash exists in master branch as well.;;;","2021-09-10 04:58;thartmann;I hit the same with mainline, converting to a JDK 18 bug.;;;","2021-09-10 05:01;thartmann;ILW = Assert during deoptimization, extremely intermittent with vector api (incubator), no known workaround but disable compilation of affected method = HLM = P3;;;","2021-12-21 09:28;kvn;[~vlivanov] Please look.;;;","2022-01-03 10:16;roboduke;A pull request was submitted for review.

URL: https://git.openjdk.java.net/jdk18/pull/76
Date: 2022-01-03 17:36:21 +0000
;;;","2022-01-04 04:35;roboduke;Changeset: 58b5fb32
Author:    Vladimir Ivanov <vlivanov@openjdk.org>
Date:      2022-01-04 12:34:38 +0000
URL:       https://git.openjdk.java.net/jdk18/commit/58b5fb3233a9bbbfc1f1f8818be4dfd54325f1bd
;;;","2022-01-04 11:35;roboduke;Changeset: 58b5fb32
Author:    Vladimir Ivanov <vlivanov@openjdk.org>
Date:      2022-01-04 12:34:38 +0000
URL:       https://git.openjdk.java.net/jdk/commit/58b5fb3233a9bbbfc1f1f8818be4dfd54325f1bd
;;;","2022-03-07 05:28;mdoerr;Fix Request (17u):
Should get backported for parity with 17.0.4-oracle. Applies cleanly. Nightly tests have passed.;;;","2022-03-07 05:32;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk17u-dev/pull/202
Date: 2022-03-07 13:26:54 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,,
"com/sun/jndi/dns/ConfigTests/Timeout.java fails with ""Address already in use"" BindException",JDK-8265309,5047019,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,aefimov,aefimov,aefimov,2021-04-15 14:39,2021-06-07 15:16,2023-10-01 09:57,2021-05-28 07:55,17,,,,,,,17,core-libs,,0,intermittent,noreg-hard,tier2,,,,,,,,,,,"Test fails with the following exception:
    java.io.UncheckedIOException: java.net.BindException: Address already in use
    	at java.base/sun.nio.ch.DatagramSocketAdaptor.disconnect(DatagramSocketAdaptor.java:136)
    	at java.base/java.net.DatagramSocket.disconnect(DatagramSocket.java:526)
    	at jdk.naming.dns/com.sun.jndi.dns.DnsClient.doUdpQuery(DnsClient.java:437)
    	at jdk.naming.dns/com.sun.jndi.dns.DnsClient.query(DnsClient.java:214)
    	at jdk.naming.dns/com.sun.jndi.dns.Resolver.query(Resolver.java:81)
    	at jdk.naming.dns/com.sun.jndi.dns.DnsContext.c_getAttributes(DnsContext.java:434)
    	at java.naming/com.sun.jndi.toolkit.ctx.ComponentDirContext.p_getAttributes(ComponentDirContext.java:235)
    	at java.naming/com.sun.jndi.toolkit.ctx.PartialCompositeDirContext.getAttributes(PartialCompositeDirContext.java:141)
    	at java.naming/com.sun.jndi.toolkit.ctx.PartialCompositeDirContext.getAttributes(PartialCompositeDirContext.java:129)
    	at java.naming/javax.naming.directory.InitialDirContext.getAttributes(InitialDirContext.java:171)
    	at java.naming/javax.naming.directory.InitialDirContext.getAttributes(InitialDirContext.java:166)
    	at Timeout.runTest(Timeout.java:78)
    	at TestBase.launch(TestBase.java:82)
    	at TestBase.run(TestBase.java:50)
    	at Timeout.main(Timeout.java:61)
    	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:78)
    	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
    	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
    	at com.sun.javatest.regtest.agent.MainActionHelper$AgentVMRunnable.run(MainActionHelper.java:298)
    	at java.base/java.lang.Thread.run(Thread.java:831)
    Caused by: java.net.BindException: Address already in use
    	at java.base/sun.nio.ch.Net.bind0(Native Method)
    	at java.base/sun.nio.ch.Net.bind(Net.java:552)
    	at java.base/sun.nio.ch.DatagramChannelImpl.repairSocket(DatagramChannelImpl.java:1343)
    	at java.base/sun.nio.ch.DatagramChannelImpl.disconnect(DatagramChannelImpl.java:1305)
    	at java.base/sun.nio.ch.DatagramSocketAdaptor.disconnect(DatagramSocketAdaptor.java:134)
    	... 20 more",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,generic,,,,,,,,,generic,,,,,"0|i2seqj:",9223372036854775807,b25,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@226ed983,,,,,,,,,"2021-04-15 14:50;aefimov;DnsClient is trying to close underlying UDP connection and DatagramSocket.disconnect() fails with ""java.net.BindException: Address already in use"";;;","2021-04-15 15:26;aefimov;JDK-8235783 allowed DatagramSocket.disconnect() to throw ""UncheckedIOException"". We might want to update finally block in DnsClient to catch this exception and close the socket as suggested in JDK-8235783.;;;","2021-05-28 07:55;roboduke;Changeset: 0c0ff7fb
Author:    Aleksei Efimov <aefimov@openjdk.org>
Date:      2021-05-28 14:54:49 +0000
URL:       https://git.openjdk.java.net/jdk/commit/0c0ff7fb0c1ff45ebaee863f73902cab1e9de4f3
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
"Hard VM crash when deadlock between ""access"" and higher ranked lock is detected",JDK-8265298,5047006,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,shade,shade,shade,2021-04-15 09:08,2021-04-21 18:04,2023-10-01 09:57,2021-04-16 23:22,17,,,,,,,17,hotspot,,0,,,,,,,,,,,,,,"I stumbled upon this when doing some Shenandoah work. The development code tried to lock the ""leaf"" lock, while already holding the ""access"" lock. Normally it would have been detected by VM, but instead, we tried to recursively acquire tty_lock for Thread::print_owned_locks. But that tty_lock is still a higher ranked lock, so deadlock detection triggers over and over again until we run out of stack and crash hard.

Add this to test_mutex_rank.cpp:

TEST_VM_ASSERT_MSG(MutexRank, mutex_wait_access_leaf,
                   "".* Attempting to acquire lock mutex_rank_leaf/11 out of order with lock mutex_rank_access/1 ""
                   ""-- possible deadlock"") {
  JavaThread* THREAD = JavaThread::current();
  ThreadInVMfromNative invm(THREAD);

  Mutex* mutex_rank_access = new Mutex(Mutex::access, ""mutex_rank_access"", false, Mutex::_safepoint_check_never);
  Mutex* mutex_rank_leaf = new Mutex(Mutex::leaf, ""mutex_rank_leaf"", false, Mutex::_safepoint_check_never);

  mutex_rank_access->lock_without_safepoint_check();
  mutex_rank_leaf->lock_without_safepoint_check();
  mutex_rank_leaf->unlock();
  mutex_rank_access->unlock();
}

Then observe the hard crash (no asserts, no hs_err_*), and see this in GDB:

...
#3455 outputStream::print_cr at ostream.cpp:158
#3456 0x00007f596a7d445b in Thread::print_owned_locks_on at thread.cpp:836
#3457 0x00007f596a2d0fc2 in Thread::print_owned_locks at thread.hpp:768
#3458 Mutex::check_rank at mutex.cpp:415
#3459 0x00007f596a2d1805 in Mutex::lock_without_safepoint_check at mutex.cpp:131
#3460 0x00007f596a38da64 in defaultStream::hold at ostream.cpp:845
#3461 0x00007f596a38dc1e in defaultStream::write at ostream.cpp:873
#3462 0x00007f596a38a590 in outputStream::do_vsnprintf_and_write_with_automatic_buffer at ostream.cpp:131
#3463 0x00007f596a38b2ef in outputStream::do_vsnprintf_and_write at ostream.cpp:144
#3464 outputStream::print_cr at ostream.cpp:158
#3465 0x00007f596a7d445b in Thread::print_owned_locks_on at thread.cpp:836
#3466 0x00007f596a2d0fc2 in Thread::print_owned_locks  at thread.hpp:768
#3467 Mutex::check_rank at mutex.cpp:415
#3468 0x00007f596a2d1805 in Mutex::lock_without_safepoint_check at mutex.cpp:131
#3469 0x00007f5968fdde5c in test_MutexRank_mutex_wait_access_leaf_ at test_mutex_rank.cpp:117
#3470 child_MutexRank_mutex_wait_access_leaf_ at test_mutex_rank.cpp:107

Workarounds:
 - We could have ranked ""tty"" lower than ""access"" lock, but that effectively reverts JDK-8214315.
 - We could add Mutex::tty to check_can_be_skipped, but that effectively disables the tty deadlock checking?",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8214315,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2senn:",9223372036854775807,b19,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,,,"2021-04-16 23:22;roboduke;Changeset: 66f89870
Author:    Aleksey Shipilev <shade@openjdk.org>
Date:      2021-04-17 06:21:19 +0000
URL:       https://git.openjdk.java.net/jdk/commit/66f89870
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
"javax/net/ssl/SSLSession/TestEnabledProtocols.java failed with ""RuntimeException: java.net.SocketException: Connection reset""",JDK-8265297,5047005,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,fguallini,dcubed,dcubed,2021-04-15 09:02,2023-03-21 02:34,2023-10-01 09:57,2021-06-17 09:24,17,,,,,,,17,security-libs,,0,intermittent,jdk11u-fix-request,jdk11u-fix-yes,noreg-self,testbug,tier2,,,,,,,,"The following test failed in the JDK17 CI:

javax/net/ssl/SSLSession/TestEnabledProtocols.java

Here's a snippet from the log file:

=== Starting new test run ===
Enabled protocols on the server are: [SSLv3]
Enabled protocols on the client are: [TLSv1, SSLv2Hello]
Server SSLHandshakeException:
javax.net.ssl.SSLHandshakeException: SSLv2Hello is not enabled
	at java.base/sun.security.ssl.SSLSocketInputRecord.handleUnknownRecord(SSLSocketInputRecord.java:381)
	at java.base/sun.security.ssl.SSLSocketInputRecord.decode(SSLSocketInputRecord.java:175)
	at java.base/sun.security.ssl.SSLTransport.decode(SSLTransport.java:111)
	at java.base/sun.security.ssl.SSLSocketImpl.decode(SSLSocketImpl.java:1495)
	at java.base/sun.security.ssl.SSLSocketImpl.readHandshakeRecord(SSLSocketImpl.java:1415)
	at java.base/sun.security.ssl.SSLSocketImpl.startHandshake(SSLSocketImpl.java:450)
	at java.base/sun.security.ssl.SSLSocketImpl.startHandshake(SSLSocketImpl.java:421)
	at TestEnabledProtocols.runServerApplication(TestEnabledProtocols.java:79)
	at SSLSocketTemplate.doServerSide(SSLSocketTemplate.java:280)
	at SSLSocketTemplate.startServer(SSLSocketTemplate.java:584)
	at SSLSocketTemplate.bootup(SSLSocketTemplate.java:498)
	at SSLSocketTemplate.run(SSLSocketTemplate.java:83)
	at TestEnabledProtocols.runCase(TestEnabledProtocols.java:293)
	at TestEnabledProtocols.main(TestEnabledProtocols.java:248)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:78)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at com.sun.javatest.regtest.agent.MainWrapper$MainThread.run(MainWrapper.java:127)
	at java.base/java.lang.Thread.run(Thread.java:831)
Client got UNEXPECTED Exception:
java.net.SocketException: Connection reset
	at java.base/sun.nio.ch.NioSocketImpl.implRead(NioSocketImpl.java:323)
	at java.base/sun.nio.ch.NioSocketImpl.read(NioSocketImpl.java:350)
	at java.base/sun.nio.ch.NioSocketImpl$1.read(NioSocketImpl.java:803)
	at java.base/java.net.Socket$SocketInputStream.read(Socket.java:961)
	at java.base/sun.security.ssl.SSLSocketInputRecord.read(SSLSocketInputRecord.java:478)
	at java.base/sun.security.ssl.SSLSocketInputRecord.readHeader(SSLSocketInputRecord.java:472)
	at java.base/sun.security.ssl.SSLSocketInputRecord.decode(SSLSocketInputRecord.java:160)
	at java.base/sun.security.ssl.SSLTransport.decode(SSLTransport.java:111)
	at java.base/sun.security.ssl.SSLSocketImpl.decode(SSLSocketImpl.java:1495)
	at java.base/sun.security.ssl.SSLSocketImpl.readHandshakeRecord(SSLSocketImpl.java:1415)
	at java.base/sun.security.ssl.SSLSocketImpl.startHandshake(SSLSocketImpl.java:450)
	at java.base/sun.security.ssl.SSLSocketImpl.startHandshake(SSLSocketImpl.java:421)
	at TestEnabledProtocols.runClientApplication(TestEnabledProtocols.java:111)
	at SSLSocketTemplate.doClientSide(SSLSocketTemplate.java:359)
	at SSLSocketTemplate$2.run(SSLSocketTemplate.java:598)
** FAILURE **
Client died: java.lang.RuntimeException: java.net.SocketException: Connection reset
java.lang.RuntimeException: java.net.SocketException: Connection reset
	at TestEnabledProtocols.failTest(TestEnabledProtocols.java:163)
	at TestEnabledProtocols.runClientApplication(TestEnabledProtocols.java:149)
	at SSLSocketTemplate.doClientSide(SSLSocketTemplate.java:359)
	at SSLSocketTemplate$2.run(SSLSocketTemplate.java:598)
Caused by: java.net.SocketException: Connection reset
	at java.base/sun.nio.ch.NioSocketImpl.implRead(NioSocketImpl.java:323)
	at java.base/sun.nio.ch.NioSocketImpl.read(NioSocketImpl.java:350)
	at java.base/sun.nio.ch.NioSocketImpl$1.read(NioSocketImpl.java:803)
	at java.base/java.net.Socket$SocketInputStream.read(Socket.java:961)
	at java.base/sun.security.ssl.SSLSocketInputRecord.read(SSLSocketInputRecord.java:478)
	at java.base/sun.security.ssl.SSLSocketInputRecord.readHeader(SSLSocketInputRecord.java:472)
	at java.base/sun.security.ssl.SSLSocketInputRecord.decode(SSLSocketInputRecord.java:160)
	at java.base/sun.security.ssl.SSLTransport.decode(SSLTransport.java:111)
	at java.base/sun.security.ssl.SSLSocketImpl.decode(SSLSocketImpl.java:1495)
	at java.base/sun.security.ssl.SSLSocketImpl.readHandshakeRecord(SSLSocketImpl.java:1415)
	at java.base/sun.security.ssl.SSLSocketImpl.startHandshake(SSLSocketImpl.java:450)
	at java.base/sun.security.ssl.SSLSocketImpl.startHandshake(SSLSocketImpl.java:421)
	at TestEnabledProtocols.runClientApplication(TestEnabledProtocols.java:111)
	... 2 more
----------System.err:(25/1720)----------
java.lang.RuntimeException: java.net.SocketException: Connection reset
	at TestEnabledProtocols.failTest(TestEnabledProtocols.java:163)
	at TestEnabledProtocols.runClientApplication(TestEnabledProtocols.java:149)
	at SSLSocketTemplate.doClientSide(SSLSocketTemplate.java:359)
	at SSLSocketTemplate$2.run(SSLSocketTemplate.java:598)
Caused by: java.net.SocketException: Connection reset
	at java.base/sun.nio.ch.NioSocketImpl.implRead(NioSocketImpl.java:323)
	at java.base/sun.nio.ch.NioSocketImpl.read(NioSocketImpl.java:350)
	at java.base/sun.nio.ch.NioSocketImpl$1.read(NioSocketImpl.java:803)
	at java.base/java.net.Socket$SocketInputStream.read(Socket.java:961)
	at java.base/sun.security.ssl.SSLSocketInputRecord.read(SSLSocketInputRecord.java:478)
	at java.base/sun.security.ssl.SSLSocketInputRecord.readHeader(SSLSocketInputRecord.java:472)
	at java.base/sun.security.ssl.SSLSocketInputRecord.decode(SSLSocketInputRecord.java:160)
	at java.base/sun.security.ssl.SSLTransport.decode(SSLTransport.java:111)
	at java.base/sun.security.ssl.SSLSocketImpl.decode(SSLSocketImpl.java:1495)
	at java.base/sun.security.ssl.SSLSocketImpl.readHandshakeRecord(SSLSocketImpl.java:1415)
	at java.base/sun.security.ssl.SSLSocketImpl.startHandshake(SSLSocketImpl.java:450)
	at java.base/sun.security.ssl.SSLSocketImpl.startHandshake(SSLSocketImpl.java:421)
	at TestEnabledProtocols.runClientApplication(TestEnabledProtocols.java:111)
	... 2 more

JavaTest Message: Test threw exception: java.lang.RuntimeException: java.net.SocketException: Connection reset
JavaTest Message: shutting down test

STATUS:Failed.`main' threw exception: java.lang.RuntimeException: java.net.SocketException: Connection reset
----------rerun:(41/5451)*----------",,,,,,,,,,,JDK-8284063,JDK-8268992,JDK-8284510,JDK-8270575,JDK-8304312,JDK-8304627,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,x86_64,,,,,,,,,windows,,,,,"0|i2senf:",9223372036854775807,b28,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@39d9862,,,,,,,,,"2021-04-15 09:03;dcubed;Starting this as a P3 since this is a Tier2 test failure.;;;","2021-05-20 12:16;rhalade;In couple of test failures reported, client reported receiving unexpected exception - java.net.SocketException. The underlying exception of server side looks correct - javax.net.ssl.SSLHandshakeException. On exception, as other side can close connection, runServerApplication treats SocketException along with SSLException as expected exception but same is not done on runClientApplication. The fix may be to treat java.net.SocketException on client side as expected exception.;;;","2021-06-17 09:24;roboduke;Changeset: 2047da7d
Author:    Fernando Guallini <fguallini@openjdk.org>
Committer: Rajan Halade <rhalade@openjdk.org>
Date:      2021-06-17 16:23:56 +0000
URL:       https://git.openjdk.java.net/jdk17/commit/2047da7dccacb1adb7f811639a58b8fbe1aa3546
;;;","2022-04-06 00:19;goetz;Fix request [11u]

I backport this for parity with 11.0.16-oracle.
No risk, only a test change.
I had to adapt the test to Java 11 syntax.
Test passes. SAP nightly testing passes.;;;","2022-04-06 00:30;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk11u-dev/pull/1009
Date: 2022-04-06 07:18:25 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
[macos_aarch64] java/foreign/TestDowncall.java crashes with SIGBUS,JDK-8265292,5046999,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,akozlov,mikael,mikael,2021-04-15 08:08,2022-05-31 23:24,2023-10-01 09:57,2021-05-18 11:55,17,,,,,,,17,hotspot,,0,intermittent,tier1,,,,,,,,,,,,"...
test TestDowncall.testDowncall(""f12_F_FIS_DII"", NON_VOID, [FLOAT, INT, STRUCT], [DOUBLE, INT, INT]): success
test TestDowncall.testDowncall(""f12_F_FIS_DIF"", NON_VOID, [FLOAT, INT, STRUCT], [DOUBLE, INT, FLOAT]): success
test TestDowncall.testDowncall(""f12_F_FIS_DID"", NON_VOID, [FLOAT, INT, STRUCT], [DOUBLE, INT, DOUBLE]): success
test TestDowncall.testDowncall(""f12_F_FIS_DIP"", NON_VOID, [FLOAT, INT, STRUCT], [DOUBLE, INT, POINTER]): success
test TestDowncall.testDowncall(""f12_F_FIS_DFI"", NON_VOID, [FLOAT, INT, STRUCT], [DOUBLE, FLOAT, INT]): success
test TestDowncall.testDowncall(""f12_F_FIS_DFF"", NON_VOID, [FLOAT, INT, STRUCT], [DOUBLE, FLOAT, FLOAT]): success
#
# A fatal error has been detected by the Java Runtime Environment:
#
#  SIGBUS (0xa) at pc=0x00000001090c1060, pid=15770, tid=24835
#
# JRE version: Java(TM) SE Runtime Environment (17.0+19) (build 17-ea+19-LTS-1515)
# Java VM: Java HotSpot(TM) 64-Bit Server VM (17-ea+19-LTS-1515, mixed mode, sharing, tiered, compressed oops, compressed class ptrs, g1 gc, bsd-aarch64)
# Problematic frame:
# V  [libjvm.dylib+0x8c1060]  _ZN21MarkActivationClosure12do_code_blobEP8CodeBlob+0x3c
#
# Core dump will be written. Default location: core.15770



Stack: [0x000000016e188000,0x000000016e38b000],  sp=0x000000016e387d40,  free space=2047k
Native frames: (J=compiled Java code, A=aot compiled Java code, j=interpreted, Vv=VM code, C=native code)
V  [libjvm.dylib+0x8c1060]  _ZN21MarkActivationClosure12do_code_blobEP8CodeBlob+0x3c
V  [libjvm.dylib+0x8fea78]  _ZN10JavaThread11nmethods_doEP15CodeBlobClosure+0x84
V  [libjvm.dylib+0x401100]  _ZN14HandshakeState18process_self_innerEv+0x18c
V  [libjvm.dylib+0x400f60]  _ZN14HandshakeState15process_by_selfEv+0x48
V  [libjvm.dylib+0x832690]  _ZN18SafepointMechanism25process_if_requested_slowEP10JavaThread+0x54
V  [libjvm.dylib+0x8fe4b8]  _ZN10JavaThread44check_safepoint_and_suspend_for_native_transEPS_+0x24
V  [libjvm.dylib+0x92395c]  _ZN19ProgrammableInvoker13invoke_nativeEPFvPhES0_P10JavaThread+0x118
V  [libjvm.dylib+0x923aa8]  PI_invokeNative+0x104
J 2565  jdk.internal.foreign.abi.ProgrammableInvoker.invokeNative(JJ)V jdk.incubator.foreign@17-ea (0 bytes) @ 0x00000001189eeed0 [0x00000001189eee40+0x0000000000000090]
C  0x00000007ea5e5808",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8263512,JDK-8265183,JDK-8266889,JDK-8265182,JDK-8266742,,,,,,,,,,,,,,,aarch64,,,,,,,,,os_x,,,,,"0|i2sem3:",9223372036854775807,b23,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,,,"2021-04-15 09:32;aph;I'm seeing no fails. How long do you have to run it for?;;;","2021-04-15 10:02;mikael;I have run hundreds of tier1 jobs and this only happened once, so it seems very intermittent.;;;","2021-04-15 10:23;aph;Thanks. I reproduced after about an hour.;;;","2021-04-15 10:24;aph;... and then discovered core dumps were disabled... Argh.;;;","2021-04-20 11:12;mseledtsov;ILW = HLM = P3;;;","2021-05-05 06:25;aph;Anton, are you working on this? It's blocking tests and the fix is pretty obvious.;;;","2021-05-06 14:46;akozlov;The fix is indeed simple (swaps two lines ProgrammableInvoker::invoke_native), but I stuck with reproducing the issue. It looks like we need an assert around possible nmethods marking or even safepoint. But if you're confident with the fix, I can assign this to you, Andrew.;;;","2021-05-18 11:55;roboduke;Changeset: b92c5a44
Author:    Anton Kozlov <akozlov@openjdk.org>
Date:      2021-05-18 18:54:16 +0000
URL:       https://git.openjdk.java.net/jdk/commit/b92c5a44f268c3a866fa6bc6f6218abc0457e689
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,
Error in Javadoc for doAccessibleAction API in AccessibleJSlider class,JDK-8265291,5046998,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,pbansal,pbansal,pbansal,2021-04-15 07:50,2023-06-14 08:48,2023-10-01 09:57,2021-05-08 03:56,11,17,,,,,,17,client-libs,,0,amazon-interest,sn_92,,,,,,,,,,,,"There is a small error in javadoc for doAccessibleAction function added in AccessibleJSlider class under JDK-8262981. The documentation says that the API return true always, whereas it can return both true or false depending upon the parameter value. This should be corrected.",,,,,,,,,,,,,,,,,,,,,,,,JDK-8266540,,,,,,,,,JDK-8262981,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2selv:",9223372036854775807,b22,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@568a5b31,,,,,,,,,"2021-05-08 03:56;roboduke;Changeset: 3af4efdf
Author:    Pankaj Bansal <pbansal@openjdk.org>
Date:      2021-05-08 10:56:29 +0000
URL:       https://git.openjdk.java.net/jdk/commit/3af4efdfcfbbb52d38415374083c66c9e7b22604
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Remove unused RandomGeneratorFactory.all(Class<T> category),JDK-8265279,5046985,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,jlaskey,jlaskey,jlaskey,2021-04-15 05:45,2021-05-11 03:43,2023-10-01 09:57,2021-05-04 06:26,17,,,,,,,17,core-libs,,0,jep-356,,,,,,,,,,,,,No longer needed,,,,,,,,,,,,,,,,,,,,,,,,JDK-8265280,,,,,,,,,JDK-8266884,,,,JDK-8266527,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2seiz:",9223372036854775807,b21,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@38ded199,,,,,,,,,"2021-05-04 06:26;roboduke;Changeset: 770dfc1e
Author:    Jim Laskey <jlaskey@openjdk.org>
Date:      2021-05-04 13:26:08 +0000
URL:       https://git.openjdk.java.net/jdk/commit/770dfc1ec4fe28bc73612c8b0dd8423dd49e1597
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
doc build fails after JDK-8262981,JDK-8265278,5046984,Bug,Resolved,JDK,JDK,software,duke,,,P2,Fixed,pbansal,dholmes,dholmes,2021-04-15 05:45,2021-04-21 18:02,2023-10-01 09:57,2021-04-15 07:05,17,,,,,,,17,client-libs,,0,noreg-doc,regression,regression_8262981,sn_91,tier1,,,,,,,,,"JDK-8262981 added the following method to 

src/java.desktop/share/classes/javax/swing/JSlider.java

/**
         * Performs the specified Action on the object
         *
         * @param i zero-based index of actions. The first action
         * (index 0) is AccessibleAction.INCREMENT and the second
         * action (index 1) is AccessibleAction.DECREMENT.
         * @return true.
         * @see #getAccessibleActionCount
         */
        public boolean doAccessibleAction(int direction) {

But the param tag uses the wrong name and so causes a doc build failure:

[2021-04-15T12:06:25,234Z] Generating JDK_API javadoc for 60 modules
[2021-04-15T12:06:55,538Z] /opt/mach5/mesos/work_dir/slaves/3c846bae-ce30-4a97-93ee-9fef4497ccb6-S79095/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/20965e7e-17f0-4e8d-a462-d66574cfcba2/runs/8aa9e345-506a-43c0-972e-2f45acf98f86/workspace/open/src/java.desktop/share/classes/javax/swing/JSlider.java:1588: error: @param name not found
[2021-04-15T12:06:55,538Z]          * @param i zero-based index of actions. The first action
[2021-04-15T12:06:55,538Z]                   ^",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8262981,,,,,,,,,,,,,,,,,,,,,,,,,,17,,,,,,,"0|i2seir:",9223372036854775807,b19,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@568a5b31,,,,,,,,,"2021-04-15 07:05;roboduke;Changeset: 6b907155
Author:    Pankaj Bansal <pbansal@openjdk.org>
Date:      2021-04-15 14:04:22 +0000
URL:       https://git.openjdk.java.net/jdk/commit/6b907155
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
SkinBase::registerChangeListener​ missing '@since 9' javadoc tag,JDK-8265277,5046983,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,aghaisas,kcr,kcr,2021-04-15 05:40,2021-05-14 14:50,2023-10-01 09:57,2021-05-06 07:29,9,jfx11,jfx16,,,,,jfx17,javafx,,0,noreg-doc,,,,,,,,,,,,,"The SkinBase::registerChangeListener​ was added to FX 9 by JDK-8077916. The '@since 9' javadoc tag was missing from some of the new API that was added; most of those were fixed by JDK-8135312, but the registerChangeListener method was missed.

This was noticed during the review of JDK-8258777, but as it is unrelated to that issue, I am filing this new bug.

This will need to wait until JDK-8258777 is integrated to avoid merge conflicts.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8077916,JDK-8135312,,,JDK-8258777,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2seij:",9223372036854775807,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@67282485,,,,,,,,,"2021-05-06 07:29;roboduke;Changeset: 599ca1e3
Author:    Ajit Ghaisas <aghaisas@openjdk.org>
Date:      2021-05-06 14:28:38 +0000
URL:       https://git.openjdk.java.net/jfx/commit/599ca1e3f4e8c8a369f3458071ca92a0a4265a78
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Type.getEnclosingType() may fail with CompletionFailure,JDK-8265270,5046970,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,jlahoda,jlahoda,jlahoda,2021-04-15 03:08,2021-06-07 15:21,2023-10-01 09:57,2021-06-02 02:54,17,,,,,,,17,tools,,0,,,,,,,,,,,,,,"In rare cases, Type.getEnclosingType() (or Type.toString()) may fail with a CompletionFailure. See this test:

---
diff --git a/test/langtools/tools/javac/processing/model/completionfailure/MissingClassFile.java b/test/langtools/tools/javac/processing/model/completionfailure/MissingClassFile.java
index 0d83b7b8ce1..c8c896de64b 100644
--- a/test/langtools/tools/javac/processing/model/completionfailure/MissingClassFile.java
+++ b/test/langtools/tools/javac/processing/model/completionfailure/MissingClassFile.java
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2018, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2018, 2021, Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
@@ -459,6 +459,64 @@ public class MissingClassFile {
         }
     }
 
+    void testGetEnclosingOnMissingType() throws Exception {
+        Path base = Paths.get(""."");
+        Path libClasses = compileLib(base,
+                                     ""package pkg;\n"" +
+                                     ""public class A<E> {\n"" +
+                                     ""    public static class N<E> {}\n"" +
+                                     ""}\n"",
+                                     ""package pkg;\n"" +
+                                     ""public class T<E> {\n"" +
+                                     ""    T<A<T>> n;\n"" +
+                                     ""}\n"");
+        try (OutputStream out = Files.newOutputStream(libClasses.resolve(""pkg/A.class""))) {
+            out.write(0);
+        }
+
+        Path testSrc = base.resolve(""test-src"");
+        tb.createDirectories(testSrc);
+        Path testClasses = base.resolve(""test-classes"");
+        tb.createDirectories(testClasses);
+
+        tb.writeJavaFiles(testSrc, ""class Test { }"");
+        tb.cleanDirectory(testClasses);
+
+        JavaCompiler compiler = ToolProvider.getSystemJavaCompiler();
+
+        List<Consumer<DeclaredType>> validators = Arrays.asList(
+                dt -> { if (dt.getEnclosingType().getKind() != TypeKind.NONE)
+                            throw new AssertionError(""Unexpected enclosing type: "" +
+                                                     dt.getEnclosingType());
+                },
+                dt -> { if (!""pkg.T<pkg.A<pkg.T>>"".equals(dt.toString()))
+                            throw new AssertionError(""Unexpected toString: "" +
+                                                     dt.toString());
+                }
+        );
+
+        try (StandardJavaFileManager fm = compiler.getStandardFileManager(null, null, null)) {
+            for (Consumer<DeclaredType> validator : validators) {
+                com.sun.source.util.JavacTask task = (com.sun.source.util.JavacTask)
+                        compiler.getTask(null,
+                                         null,
+                                         null,
+                                         Arrays.asList(""-XDrawDiagnostics"",
+                                                       ""-classpath"",
+                                                       libClasses.toString()),
+                                         null,
+                                         fm.getJavaFileObjects(tb.findJavaFiles(testSrc)));
+                task.analyze();
+                TypeElement a = task.getElements()
+                                    .getTypeElement(task.getElements()
+                                                        .getModuleElement(""""),
+                                                    ""pkg.T"");
+                DeclaredType type = (DeclaredType) a.getEnclosedElements().get(0).asType();
+                validator.accept(type);
+            }
+        }
+    }
+
     private Path compileLib(Path base, String... sources) throws Exception {
---
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2sefn:",9223372036854775807,b25,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4dca67bd,,,,,,,,,"2021-06-02 02:54;roboduke;Changeset: 9247630a
Author:    Jan Lahoda <jlahoda@openjdk.org>
Date:      2021-06-02 09:53:31 +0000
URL:       https://git.openjdk.java.net/jdk/commit/9247630a0d024550813f651c1ec0ce228ff27210
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
CITime - 'other' incorrectly calculated,JDK-8265262,5046963,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,neliasso,neliasso,neliasso,2021-04-15 01:21,2021-06-01 01:10,2023-10-01 09:57,2021-05-19 10:52,11,17,,,,,,17,hotspot,,0,hs-comp-triaged,oracle-triage-11,oracle-triage-17,,,,,,,,,,,"Looking at some CITime outputs I noticed some oddities. 

1) The other category for _t_optimize is not removing time spent in _t_vector

2) Some of the _t_incrInline sub counters is called from different contexts - calculating 'other' from total time spent in _t_incrInline expects that the counter usage is strictly hierarchical.

3) Code Installation is a part of Code Emission (_t_output) and should be grouped under.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2see3:",9223372036854775807,b24,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2021-05-10 08:15;neliasso;I just noticed another bug in CITime. Code Installation is a part of Code Emission (_t_output) and should be grouped under.

""
       Code Emission:           1,904 s
         Insn Scheduling:       0,000 s
         Build OOP maps:        0,505 s
       Code Installation:     0,204 s                      << -- should be indented
"";;;","2021-05-19 10:51;roboduke;Changeset: 38d690b3
Author:    Nils Eliasson <neliasso@openjdk.org>
Date:      2021-05-19 17:51:02 +0000
URL:       https://git.openjdk.java.net/jdk/commit/38d690b3c347f71b41a34b36c1a232ea766b9a64
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
java/nio/file/Files/InterruptCopy.java fails with java.lang.RuntimeException: Copy was not interrupted,JDK-8265261,5046962,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,bpb,ewhelan,ewhelan,2021-04-15 01:17,2022-03-21 17:12,2023-10-01 09:57,2021-08-24 10:08,11-pool,17,,,,,,18,core-libs,,0,intermittent,jdk11u-fix-request,jdk11u-fix-yes,jdk17u-fix-request,jdk17u-fix-yes,noreg-self,sbr,,,,,,,"The following test was spotted failing on the JDK11 CI Pipeline

java/nio/file/Files/InterruptCopy.java

----------System.out:(4/86)----------
Checking space ((C:))
Creating source file...
Source file created.
Copying file...
----------System.err:(13/773)----------
java.lang.RuntimeException: Copy was not interrupted
	at InterruptCopy.doTest(InterruptCopy.java:90)
	at InterruptCopy.main(InterruptCopy.java:52)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at com.sun.javatest.regtest.agent.MainActionHelper$AgentVMRunnable.run(MainActionHelper.java:298)
	at java.base/java.lang.Thread.run(Thread.java:834)
",,,,,,,,,,,JDK-8281036,JDK-8280938,JDK-8280939,JDK-8283472,JDK-8283481,,,,,,,,,,,,,,,,,,JDK-8281951,JDK-8272964,,,JDK-8272964,JDK-8281951,,,,,,,,,,,,,,x86_64,,,,,,,,,windows,,,,,"0|i2sedv:",9223372036854775807,b12,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@674604a9,,,,,,,,,"2021-08-17 09:49;bpb;This problem is likely due to a timing problem in the test. The test attempts to copy a 0.5GB file. A thread is created to interrupt the copy after 500ms. If the copy succeeds and the time it required was more than 5s, then the observed exception is thrown. If for some reason the interrupt is delayed too long and the copy is slow this could occur.;;;","2021-08-18 09:21;bpb;The first linked failure log for JDK 11 on April 15 has been deleted. All extant linked failures are on Windows.;;;","2021-08-24 10:08;roboduke;Changeset: aaedac63
Author:    Brian Burkhalter <bpb@openjdk.org>
Date:      2021-08-24 17:04:35 +0000
URL:       https://git.openjdk.java.net/jdk/commit/aaedac635a0a7ca1f73dcf85336230cc537fcdf2
;;;","2022-02-08 08:32;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk17u-dev/pull/148
Date: 2022-02-08 16:27:55 +0000;;;","2022-02-08 08:34;zgu;Fix Request (17u)

A clean, test only backport for parity with Oracle 17.0.4.;;;","2022-02-09 08:00;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk11u-dev/pull/815
Date: 2022-02-09 15:53:54 +0000;;;","2022-03-21 13:13;zgu;Fix Request (11u)

A clean, test only backport for parity with Oracle 11.0.16
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,
G1: Fix HeapRegion::block_is_obj for unloading class in full gc,JDK-8265259,5046958,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,mli,mli,mli,2021-04-15 00:26,2021-04-21 18:03,2023-10-01 09:57,2021-04-16 05:40,17,,,,,,,17,hotspot,,0,gc-g1,gc-g1-fullgc,,,,,,,,,,,,"In JDK-8262068, we have introduced an enhancement to skip compacting some heap regions.
But the objs in these regions might have been dead, and their classes might have been unloaded, at this situation, we need following change to make sure we don't get into trouble when calls HeapRegion::block_is_obj(const HeapWord* p) and subsequent calls e.g. to get obj size.


--- a/src/hotspot/share/gc/g1/heapRegion.inline.hpp
+++ b/src/hotspot/share/gc/g1/heapRegion.inline.hpp
@@ -141,7 +141,12 @@ inline bool HeapRegion::block_is_obj(const HeapWord* p) const {
     assert(is_continues_humongous(), ""This case can only happen for humongous regions"");
     return (p == humongous_start_region()->bottom());
   }
-  if (ClassUnloadingWithConcurrentMark) {
+  // In full gc, we might have skipped compacting some heap regions with high live ratio,
+  // for objs in these regions, the corresponding class info might have been unloaded if
+  // they're not marked in the full gc.
+  // So, only when ClassUnloading is false, it's safe to tell an obj is indeed an obj when
+  // it's under the top of the region, otherwise we have to go to the slow path below.
+  if (ClassUnloading) {
     return !g1h->is_obj_dead(cast_to_oop(p), this);
   }
   return p < top();
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8262068,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2secz:",9223372036854775807,b19,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6b00f96c,,,,,,,,,"2021-04-16 05:40;roboduke;Changeset: 714298a5
Author:    Hamlin Li <mli@openjdk.org>
Date:      2021-04-16 12:40:25 +0000
URL:       https://git.openjdk.java.net/jdk/commit/714298a5
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
"Implementation Specific Properties: change prefix, plus add existing properties",JDK-8265248,5046945,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,joehw,joehw,joehw,2021-04-14 21:07,2022-01-25 09:33,2023-10-01 09:57,2021-05-26 12:34,,,,,,,,17,xml,,0,,,,,,,,,,,,,,"Through a series of changes, we’ve add documentation for the Implementation Specific Features and Properties to the module summary. This will be the last change to complete the project. This change will include the followings:

1. Naming Convention
    Specifically, the prefix shall be standardized to jdk.xml instead of http://www.oracle.com/xml/jaxp/properties/ or http://www.oracle.com/xml/jaxp/features/. The later was introduced through the Jaxp Limits, that used the fully-qualified URL style prefix, a style that had been used in XML standards and Apache implementations. The style though was not ideal. For one, it's very long, for another, it has a dependency on domain names. For that reason, the later properties used a prefix jdk.xml which is also the same as the System properties. 

2. Other existing properties
    Add other existing properties to the Features and Properties table. 

2.1 Features and Properties that used jdk.xml as prefix
    Property cdataChunkSize: 
            Property name: jdk.xml.cdataChunkSize
            System Property: jdk.xml.cdataChunkSize
            Processor: SAX, StAX

    Feature resetSymbolTable: 
            Property name: jdk.xml.resetSymbolTable
            System Property: jdk.xml.resetSymbolTable
            Processor: SAX spf.setFeature

    Feature overrideDefaultParser: 
            Property name: jdk.xml.overrideDefaultParser
            System Property: jdk.xml.overrideDefaultParser
            Processor: Transform, Validation, XPath
            Method: setFeature

    Property extensionClassLoader: 
            Name: jdk.xml.transform.extensionClassLoader
            System Property: no
            Processor: Transform
            Method: factory.setAttribute

2.2 Features that had a URL-style prefix for properties rather than features

    Feature enableExtensionFunctions: 
            Name: http://www.oracle.com/xml/jaxp/properties/enableExtensionFunctions
            System property: jdk.xml.enableExtensionFunctions
            Processor: Transform, XPath
            Method: factory.setFeature 

",,,,,,,,,,,,,,,,,,,,,,,,JDK-8265252,,,,,,,,,JDK-8261856,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2sea3:",9223372036854775807,b25,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@11b5a46e,,,,,,,,,"2021-05-26 12:34;roboduke;Changeset: 8c4719a5
Author:    Joe Wang <joehw@openjdk.org>
Date:      2021-05-26 19:34:06 +0000
URL:       https://git.openjdk.java.net/jdk/commit/8c4719a58834dddcea39d69b199abf1aabf780e2
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Fix macos-Aarch64 build after JDK-8263709,JDK-8265246,5046942,Bug,Resolved,JDK,JDK,software,duke,,,P2,Fixed,dholmes,dholmes,dholmes,2021-04-14 19:35,2021-07-15 10:00,2023-10-01 09:57,2021-04-14 20:02,17,,,,,,,17,hotspot,,0,noreg-build,,,,,,,,,,,,,The changes for JDK-8263709 weren't tested on macos-Aarch64 as that build platform only recently got enabled in our build/test system and that update was only merged in prior to the integration.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8263709,,,,,,,,,,,,,,,,,,,aarch64,,,,,,,17,,os_x,,,,,"0|i2se9f:",9223372036854775807,b19,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,,,"2021-04-14 20:02;roboduke;Changeset: 59319486
Author:    David Holmes <dholmes@openjdk.org>
Date:      2021-04-15 03:01:49 +0000
URL:       https://git.openjdk.java.net/jdk/commit/59319486
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Shenandoah: Shenandoah heap region count could be off by 1,JDK-8265239,5046925,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,zgu,zgu,zgu,2021-04-14 12:28,2021-05-18 07:20,2023-10-01 09:57,2021-04-16 05:28,11,16,17,8-shenandoah,,,,17,hotspot,,0,gc-shenandoah,jdk11u-fix-request,jdk11u-fix-yes,jdk16u-fix-request,jdk16u-fix-SQE-ok,jdk16u-fix-yes,redhat-interest,,,,,,,"Shenandoah uses MaxHeapSize to calculate region size, then aligns up heap size to region size alignment, but when it calculates region count, it does not take alignment into account, that may result 1 region short than actual count.

MaxHeapSize eventually aligns to to HeapAlignment (which is region size in Shenandoah case), but it is too late.

",,,,,,,,,,,JDK-8266917,JDK-8267323,JDK-8267058,,,,,,,,,,,,,,,,,,,,,,,,JDK-8266802,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2se5n:",9223372036854775807,b19,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6b00f96c,,,,,,,,,"2021-04-16 05:28;roboduke;Changeset: ff5bb8cf
Author:    Zhengyu Gu <zgu@openjdk.org>
Date:      2021-04-16 12:27:29 +0000
URL:       https://git.openjdk.java.net/jdk/commit/ff5bb8cf
;;;","2021-04-26 12:06;zgu;Fix Request (16u)

I would like to backport this patch to 16u.

This bug may result Shenandoah heap region count off by 1, which means it may waste a region.

The original patch applies cleanly.;;;","2021-04-26 14:54;zgu;Fix Request (11u)

I would like to backport this patch to 11u. This is a Shenandoah only patch.

This bug may result Shenandoah heap region count off by 1, which means it may waste a region.

The original patch applies cleanly. 

;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
[8u] [macos] build failure in OpenJDK8u after JDK-8211301 in older xcode,JDK-8265238,5046924,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,alvdavi,alvdavi,alvdavi,2021-04-14 12:13,2022-05-28 09:23,2023-10-01 09:57,2021-06-01 04:58,openjdk8u292,,,,,,,openjdk8u302,client-libs,,0,11-na,17-na,jdk8u-fix-request,jdk8u-fix-yes,,,,,,,,,,"After backporting JDK-8211301 to OpenJDK8u build will fail when using old xcode versions (Xcode 6.3 on Mac 10.10):

.../src/jdk/src/macosx/native/sun/awt/AWTWindow.m:1040:38: error: property 'frame' not found on object of type 'id'
                nsWindow.contentView.frame = contentFrame; 

This is caused because old versions of the Cocoa ApplicationKit defined the contentView property as type id, even if according to the documentation, contentView would always be an NSView object. In the new AppKit, the contentView property of an NSWindow is defined as an NSView, so the problem will not appear.

This can be fixed by casting the result of nsWindow.contentView to an NSView, for example:

                NSView* view = nsWindow.contentView;
                view.frame = contentFrame;",,,,,,,,,,,JDK-8272056,,,,,,,,,,,,,,,,,,,,,,JDK-8211301,,,,,,,,,,,,,,,,,,,,,,,,,,openjdk8u292,,os_x,,,,,"0|i2se5f:",9223372036854775807,team,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@5a9b3fd3,,,,,,,,,"2021-05-26 13:28;phh;Review thread: https://mail.openjdk.java.net/pipermail/jdk8u-dev/2021-May/013915.html
;;;","2021-05-31 02:09;sgehwolf;This is an OpenJDK 8u-only bug due to the old Xcode build requirement there.;;;","2021-06-01 04:58;hgupdate;URL:   https://hg.openjdk.java.net/jdk8u/jdk8u-dev/jdk/rev/1ca2806744e0
User:  phh
Date:  2021-06-01 11:56:51 +0000
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
(fc) ReadDirect and WriteDirect tests fail after fix for JDK-8264821,JDK-8265231,5046914,Bug,Resolved,JDK,JDK,software,duke,,,P2,Fixed,bpb,bpb,bpb,2021-04-14 11:09,2021-07-30 03:28,2023-10-01 09:57,2021-04-14 12:54,17,,,,,,,17,core-libs,,0,azul-interest,jdk11u-fix-request,jdk11u-fix-yes,jdk15u-fix-request,jdk15u-fix-yes,noreg-self,,,,,,,,"open/test/jdk/java/nio/channels/FileChannel/directio/WriteDirect.java:51: error: cannot find symbol
        if (!DirectIOTest.isDirectIOSupportedByFS(p)) {
                         ^
  symbol:   method isDirectIOSupportedByFS(Path)
  location: class DirectIOTest
1 error
result: Failed. Compilation failed: Compilation failed",,,,,,,,,,,JDK-8266152,JDK-8268179,JDK-8271546,,,,,,,,,,,,,,,,,,,,JDK-8264821,,,,,,,,,,,,,,,,,,,generic,,,,,,,,,generic,,,,,"0|i2se37:",9223372036854775807,b19,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@674604a9,,,,,,,,,"2021-04-14 11:44;dcubed;Bumping from a P4 -> P2 since this is causing a lot
of failures in Tier2.;;;","2021-04-14 12:54;roboduke;Changeset: d1b28e7a
Author:    Brian Burkhalter <bpb@openjdk.org>
Date:      2021-04-14 19:53:19 +0000
URL:       https://git.openjdk.java.net/jdk/commit/d1b28e7a
;;;","2021-05-24 06:58;zgu;11u code review thread: https://mail.openjdk.java.net/pipermail/jdk-updates-dev/2021-May/006348.html;;;","2021-05-27 18:30;zgu;Fix Request (11u)

I would like to backport this patch to 11u for parity with Oracle 11.0.13.

11u patch has been reviewed.
;;;","2021-07-30 03:18;snazarki;Fix Request (15u)
The change fixes tests. The patch applies cleanly.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
jcstress: Interepreted mode match is incorrect,CODETOOLS-7902971,5051712,Bug,Closed,CODETOOLS,Code Tools,software,duke,,,P4,Fixed,shade,shade,shade,2021-06-13 03:08,2021-06-13 03:31,2023-10-01 09:57,2021-06-13 03:31,,,,,,,,,tools,,0,,,,,,,,,,,,,,"Look here:

                // If this actor runs in interpreted mode, then actor method should not be compiled.
                // Allow run loop to be compiled with the best compiler available.
                if (CompileMode.isInt(cm, a)) {
                    pw.println(""  {"");
                    pw.println(""    match: \""+"" + task.name + ""::"" + an + ""\"","");


The ""+"" sign there is a copy-paste error from a relevant ""inline"" block. But ""+"" makes no sense in ""match"", and it would always mismatch. That means the ""interpreter"" split configuration are actually compiling.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,CODETOOLS-7902857,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2t73f:",9223372036854775807,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@50120698,,,,,,,,,"2021-06-13 03:31;shade;https://github.com/openjdk/jcstress/commit/82124cc403569971cd6081fca5540ca3e1285f6a;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Script build.sh will fail if the default shell is dash,CODETOOLS-7902970,5051703,Bug,Resolved,CODETOOLS,Code Tools,software,duke,,,P4,Fixed,gli,gli,gli,2021-06-12 07:53,2021-07-13 20:01,2023-10-01 09:57,2021-07-13 20:01,,,,,,,,,tools,,0,noreg-doc,,,,,,,,,,,,,"When the local default shell is `dash`, the command script make/build.sh will fail with the following error messages.

```
$ sh make/build.sh --help
make/build.sh: 252: make/build.sh: Bad substitution
make/build.sh: 253: make/build.sh: Bad substitution
make/build.sh: 254: .: Can't open /build-support/build-common.sh
```

It is because my local `sh` command links to the `dash`. And the `dash` doesn't support the variables such as `BASH_SOURCE`.

```
$ ls -al /bin/*sh*
-rwxr-xr-x 1 root root 1113504 Jun  7  2019 /bin/bash
-rwxr-xr-x 1 root root  121432 Jan 25  2018 /bin/dash
lrwxrwxrwx 1 root root       4 Sep 26  2020 /bin/rbash -> bash
lrwxrwxrwx 1 root root       4 Sep 26  2020 /bin/sh -> dash
lrwxrwxrwx 1 root root       4 Sep 26  2020 /bin/sh.distrib -> dash
lrwxrwxrwx 1 root root       7 Sep 18  2020 /bin/static-sh -> busybox
```

It is good to state this situation in the documentation.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,generic,,,,,,,,,generic,,,,,"0|i2t71f:",9223372036854775807,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@41617238,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
jcstress: L-results are always equal to each other,CODETOOLS-7902957,5051038,Bug,Closed,CODETOOLS,Code Tools,software,duke,,,P3,Fixed,shade,shade,shade,2021-06-03 01:24,2021-06-03 01:49,2023-10-01 09:57,2021-06-03 01:49,,,,,,,,,tools,,0,,,,,,,,,,,,,,"Due to a bug in ResultGenerator, all L-results are ignoring the reference in hashCode/equals computation. This means all results that have only reference results are equal to each other, and only the first result would be counted.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2t2xn:",9223372036854775807,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@50120698,,,,,,,,,"2021-06-03 01:49;shade;https://github.com/openjdk/jcstress/commit/0013d82c05f8035b0c34ef71fc36ea112a604342;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
jcstress: Move unpacked JNA library to proper name,CODETOOLS-7902954,5050965,Bug,Closed,CODETOOLS,Code Tools,software,duke,,,P4,Fixed,shade,shade,shade,2021-06-02 06:29,2021-06-02 06:53,2023-10-01 09:57,2021-06-02 06:53,,,,,,,,,tools,,0,,,,,,,,,,,,,,"This is a regression from CODETOOLS-7902951. We need to move the unpacked library to the proper name, so that forked VM loader would discover it properly.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,CODETOOLS-7902951,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2t2hv:",9223372036854775807,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@50120698,,,,,,,,,"2021-06-02 06:53;shade;https://github.com/openjdk/jcstress/commit/db3d90be7079cf681a7659ea18e5f7d44db571a6;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Elapsed time of MainAction is including serialization wait time,CODETOOLS-7902942,5050236,Bug,Resolved,CODETOOLS,Code Tools,software,duke,,,P4,Fixed,stefank,stefank,stefank,2021-05-24 00:06,2022-05-16 01:08,2023-10-01 09:57,2021-08-11 09:45,,,,,,,,jtreg6.1,tools,,0,,,,,,,,,,,,,,"If you run othervm tests with a concurrency > 1, then the reported test times get inflated. You can see this by running:
time makec ../build/fastdebug test TEST=test/hotspot/jtreg/vmTestbase/vm/gc/compact JTREG=""VERBOSE=all""

and looking at the elapsed time for the main action:
$ grep -r ""othervm specified"" -A1 jtreg_open_test_hotspot_jtreg_vmTestbase_vm_gc_compact/jtreg.log | grep elapsed
elapsed time (seconds): 121.194
elapsed time (seconds): 240.631
elapsed time (seconds): 359.092
elapsed time (seconds): 478.718
elapsed time (seconds): 597.433
elapsed time (seconds): 716.628
elapsed time (seconds): 836.638
elapsed time (seconds): 955.156
elapsed time (seconds): 1074.476
elapsed time (seconds): 1193.712
elapsed time (seconds): 1314.116
elapsed time (seconds): 1433.632
elapsed time (seconds): 1553.563
elapsed time (seconds): 1672.996
elapsed time (seconds): 1792.846
elapsed time (seconds): 1913.112
elapsed time (seconds): 1926.819
elapsed time (seconds): 1926.809
elapsed time (seconds): 1926.921
elapsed time (seconds): 1927.093
elapsed time (seconds): 1927.192
elapsed time (seconds): 1927.07
elapsed time (seconds): 1926.896
elapsed time (seconds): 1927.31
elapsed time (seconds): 1927.244
elapsed time (seconds): 1927.33
elapsed time (seconds): 1927.221
elapsed time (seconds): 1927.42
elapsed time (seconds): 1927.158
elapsed time (seconds): 1927.315
elapsed time (seconds): 1927.316
elapsed time (seconds): 1927.311
elapsed time (seconds): 1927.532
elapsed time (seconds): 1927.379

Each test is supposed to be run for 120 seconds, but the reported time ramps up in ~120s increments until it reaches the number that matches the ""jtreg concurrency"" number, which in my run is 16.

I think this happens because we start ""concurrent"" tests. Each test starts by taking a timestamp, then looks if we need ""exclusiveAccess"" and if we do, then a lock is taken before the othervm test process is forked. This serializes the tests and inflates the times.

From the jtreg code:
-----------
startAction(true);                     <<< Takes timestamps                                                                                                                                                                                                                                  
if (script.isCheck()) {                                                                                                                                                                                                                                                           
    status = passed(CHECK_PASS);                                                                                                                                                                                                                                                  
} else {                                                                                                                                                                                                                                                                          
    Lock lock = script.getLockIfRequired();    <<< serializes on lock                                                                                                                                                                                                           
    if (lock != null) lock.lock();                                                                                                                                                                                                                                                
    try {                                                                                                                                                                                                                                                                         
        switch (!othervmOverrideReasons.isEmpty() ? ExecMode.OTHERVM : script.getExecMode()) {                                                                                                                                                                                    
            case AGENTVM:                                                                                                                                                                                                                                                         
                showMode(ExecMode.AGENTVM);                                                                                                                                                                                                                                       
                status = runAgentJVM();         <<< starts test
----------

I've tested a workaround for this, and it seems to be solving the problem. However, since I'm not well-versed in this code, I don't know if this have any unforeseen consequences.

The workaround:
diff --git a/src/share/classes/com/sun/javatest/regtest/exec/MainAction.java b/src/share/classes/com/sun/javatest/regtest/exec/MainAction.java
index dc1a6d5..bea9e2a 100644
--- a/src/share/classes/com/sun/javatest/regtest/exec/MainAction.java
+++ b/src/share/classes/com/sun/javatest/regtest/exec/MainAction.java
@@ -333,13 +333,16 @@ public class MainAction extends Action
         if (nativeCode && script.getNativeDir() == null)
             return error(MAIN_NO_NATIVES);
-        startAction(true);
-
         if (script.isCheck()) {
+            startAction(true);
             status = passed(CHECK_PASS);
         } else {
             Lock lock = script.getLockIfRequired();
             if (lock != null) lock.lock();
+
+            // Start action after the lock is taken to ensure correct ""elapsed time"".
+            startAction(true);
+
             try {
                 switch (!othervmOverrideReasons.isEmpty() ? ExecMode.OTHERVM : script.getExecMode()) {
                     case AGENTVM:",,,,,,,,,,,,,,,,,,,,,,,,,,CODETOOLS-7902822,,,,,,,CODETOOLS-7903188,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2sy37:",9223372036854775807,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@41617238,,,,,,,,,"2021-05-24 00:20;stefank;Clone of CODETOOLS-7902822, which had jcheck problems on GitHub. Creating a new BUG/PR solved that issue.;;;","2021-08-11 09:45;jjg;Commit: https://github.com/openjdk/jtreg/commit/1360423a1cbea21bf02a138c4f5489696d469c02;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Stray output in forked VM breaks external version parsing,CODETOOLS-7902936,5049899,Bug,Resolved,CODETOOLS,Code Tools,software,duke,,,P5,Fixed,jzaugg,jzaugg,jzaugg,2021-05-18 22:36,2021-05-26 02:24,2023-10-01 09:57,2021-05-26 02:24,,,,,,,,,tools,,0,,,,,,,,,,,,,,"Using JDK 16 on an old Debian Jessie server, I hit a failure in:

{noformat}
[error] 	at org.openjdk.jmh.util.Utils.readPropertiesFromCommand(Utils.java:603)
[error] 	at org.openjdk.jmh.runner.Runner.newBenchmarkParams(Runner.java:469)
[error] 	at org.openjdk.jmh.runner.Runner.getActionPlans(Runner.java:353)
[error] 	at org.openjdk.jmh.runner.Runner.runBenchmarks(Runner.java:546)
[error] 	at org.openjdk.jmh.runner.Runner.internalRun(Runner.java:310)
[error] 	at org.openjdk.jmh.runner.Runner.run(Runner.java:209)
[error] Caused by: java.util.InvalidPropertiesFormatException: org.xml.sax.SAXParseException; lineNumber: 1; columnNumber: 1; Content is not allowed in prolog.
[error] 	at sun.util.xml.PlatformXmlPropertiesProvider.load(PlatformXmlPropertiesProvider.java:80)
[error] 	at java.util.Properties$XmlSupport.load(Properties.java:1201)
[error] 	at java.util.Properties.loadFromXML(Properties.java:881)
[error] 	at org.openjdk.jmh.util.Utils.readPropertiesFromCommand(Utils.java:595)
{noformat}

Adding a diagnostic to this code path confirmed my suspicion that there was an unwanted guest in standard out.

{noformat}
[0.000s][warning][os,container] Duplicate cpuset controllers detected. Picking /sys/fs/cgroup/cpuset, skipping /cpusets.
<?xml version=""1.0"" encoding=""UTF-8""?>
 <!DOCTYPE properties SYSTEM ""http://java.sun.com/dtd/properties.dtd"">
{noformat}

This particular problem could likely be fixed by changing the server, but only after the root cause is discovered.

JMH could help out doing one or more of: a) adding a diagnostic to the exception with the content that failed parsing, b) passing `-XX:+IgnoreUnrecognizedVMOptions -Xlog:all=error` to silence this and other VM warnings, c) using a temporary file to receive the data rather than standard output.

I'm happy to submit a patch.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2sw0b:",9223372036854775807,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@b978723,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
JMH generators fail for benchmark in unnamed package,CODETOOLS-7902929,5049139,Bug,Resolved,CODETOOLS,Code Tools,software,duke,,,P4,Fixed,jzaugg,jzaugg,jzaugg,2021-05-09 23:41,2021-05-11 22:30,2023-10-01 09:57,2021-05-11 22:30,,,,,,,,,tools,,0,,,,,,,,,,,,,,This was reported a few times by new users of sbt-jmh. I'll submit a patch.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2srbn:",9223372036854775807,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@b978723,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
JMH: More reliable Console charset probing,CODETOOLS-7902926,5048814,Bug,Closed,CODETOOLS,Code Tools,software,duke,,,P4,Fixed,shade,shade,shade,2021-05-05 05:46,2021-05-05 07:07,2023-10-01 09:57,2021-05-05 07:07,,,,,,,,,tools,,0,,,,,,,,,,,,,,"Current Console charset probing is not very reliable: it exits on first failure. This is especially important after CODETOOLS-7902915, which polls ""charset()"" method that is only available in JDK 17+. This makes the whole Console charset probing block to exit early.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,CODETOOLS-7902915,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2spbf:",9223372036854775807,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@b978723,,,,,,,,,"2021-05-05 07:07;shade;https://github.com/openjdk/jmh/commit/fbf0db1fdebac25950b377b64ee7b660f2636ea8;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
jcstress: Sysfs topology parser fails due to oddly intersecting core IDs,CODETOOLS-7902919,5048724,Bug,Closed,CODETOOLS,Code Tools,software,duke,,,P4,Fixed,shade,cgo,cgo,2021-05-04 06:17,2021-05-04 09:27,2023-10-01 09:57,2021-05-04 09:27,,,,,,,,,tools,,0,,,,,,,,,,,,,,"On one of our virtualized servers, building jcstress fails, because the test case LinuxSysfsTopologyTest errors out with:

Tests run: 7, Failures: 0, Errors: 1, Skipped: 0, Time elapsed: 2.479 sec <<< FAILURE! - in org.openjdk.jcstress.os.topology.LinuxSysfsTopologyTest
test_Current(org.openjdk.jcstress.os.topology.LinuxSysfsTopologyTest)  Time elapsed: 0.037 sec  <<< ERROR!
org.openjdk.jcstress.os.topology.TopologyParseException: org.openjdk.jcstress.os.topology.TopologyParseException: Core belongs to different packages: 3
	at org.openjdk.jcstress.os.topology.LinuxSysfsTopology.<init>(LinuxSysfsTopology.java:128)
	at org.openjdk.jcstress.os.topology.LinuxSysfsTopology.<init>(LinuxSysfsTopology.java:60)
	at org.openjdk.jcstress.os.topology.LinuxSysfsTopologyTest.test_Current(LinuxSysfsTopologyTest.java:27)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:59)
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:56)
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
	at org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26)
	at org.junit.runners.ParentRunner$3.evaluate(ParentRunner.java:306)
	at org.junit.runners.BlockJUnit4ClassRunner$1.evaluate(BlockJUnit4ClassRunner.java:100)
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:366)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:103)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:63)
	at org.junit.runners.ParentRunner$4.run(ParentRunner.java:331)
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:79)
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:329)
	at org.junit.runners.ParentRunner.access$100(ParentRunner.java:66)
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:293)
	at org.junit.runners.ParentRunner$3.evaluate(ParentRunner.java:306)
	at org.junit.runners.ParentRunner.run(ParentRunner.java:413)
	at org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:264)
	at org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:153)
	at org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:124)
	at org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:200)
	at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:153)
	at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:103)
Caused by: org.openjdk.jcstress.os.topology.TopologyParseException: Core belongs to different packages: 3
	at org.openjdk.jcstress.os.topology.AbstractTopology.add(AbstractTopology.java:75)
	at org.openjdk.jcstress.os.topology.LinuxSysfsTopology.<init>(LinuxSysfsTopology.java:120)
	... 29 more

Please see the attached sysfs-7.txt files, which describes the topology present on the server, like the other files present in jcstress-core/src/test/resources/topology. I created the file with the following command:

$ for x in /sys/devices/system/cpu/cpu*/topology/* ; do printf '%s: ' ""${x:24}""; cat ""$x"" ; done

Tested with current master:
$ git describe
0.5-111-ge962c1b",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"2021-05-04 06:23;cgo;proc_cpuinfo.txt;https://bugs.openjdk.org/secure/attachment/94503/proc_cpuinfo.txt","2021-05-04 06:16;cgo;sysfs-7.txt;https://bugs.openjdk.org/secure/attachment/94502/sysfs-7.txt",,,,,,,,,,generic,,,,,,,,,linux,,,,,"0|i2sorf:",9223372036854775807,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@50120698,,,,,,,,,"2021-05-04 06:21;shade;Thanks! I'll take a look. Can you also attach /proc/cpuinfo?;;;","2021-05-04 06:23;shade;Also, is the sysfs snapshot output any different from the one in LinuxSysfsTopologyTest? Namely:
  $ find /sys/devices/system/cpu/ -type f -path *topology* -printf ""%P: "" -exec cat {} \;
;;;","2021-05-04 06:26;cgo;Attached proc_cpuinfo.txt

I executed 'find /sys/devices/system/cpu/ -type f -path *topology* -printf ""%P: "" -exec cat {} \;' and only the ordering is different. After sorting the output, both are identical. Should I attach the sysfs.txt file created by your command as well?;;;","2021-05-04 06:28;shade;>  Should I attach the sysfs.txt file created by your command as well?

Not yet, current file must be fine then. Tests do not actually care about the line order in the dump.;;;","2021-05-04 07:08;shade;I have a fix, see PR. It passes on provided test dumps now.;;;","2021-05-04 07:12;shade;By the way, it would help if you could cross-check the output of lscpu (if available) with the test case:
 https://github.com/openjdk/jcstress/pull/47/files#diff-8bb7c01de60a4b37a2b5022c661f9856d7d49e001608ba3c8c8acbe7d99ea8faR154-R158;;;","2021-05-04 09:27;shade;https://github.com/openjdk/jcstress/commit/62381f713b20e5be0335a5b9c9d0eba2fa54f6b6;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,
jcstress: Errors during interruption tests,CODETOOLS-7902917,5048712,Bug,Closed,CODETOOLS,Code Tools,software,duke,,,P4,Fixed,shade,shade,shade,2021-05-04 04:18,2021-05-04 04:41,2023-10-01 09:57,2021-05-04 04:41,,,,,,,,,tools,,0,,,,,,,,,,,,,,"This is a regression since CODETOOLS-7902906. The interruption tests would never reply the result, because they call System.exit(0) before binary link is able to push the result.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,CODETOOLS-7902906,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2soor:",9223372036854775807,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@50120698,,,,,,,,,"2021-05-04 04:41;shade;https://github.com/openjdk/jcstress/commit/e962c1b11bc9492b7988adfe4652c03b72ed4550;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
jasm incorrectly processes the instruction pair: ldc MethodHandle  ,CODETOOLS-7902913,5048528,Bug,Resolved,CODETOOLS,Code Tools,software,duke,,,P3,Fixed,lkuskov,lkuskov,lkuskov,2021-04-30 09:37,2021-04-30 19:54,2023-10-01 09:57,2021-04-30 19:54,,,,,,,,,tools,,0,regression,,,,,,,,,,,,,"https://github.com/openjdk/asmtools/pull/17 introduced the regression in precessing instruction ""ldc MethodHandle"":

The latest patch fixes `ldc Dynamic` but breaks `ldc MethodHandle`.
Provided *.jasm file is successfully assembled with asmtools built
from the `pull/15` branch but failed to be assembled with asmtools
built from `pull/17` branch.

The error message is as follows:

TestLdcMethodHandle.jasm (17:42) Error: Wrong tag: Either Method or
InterfaceMethod expected.
                ldc     MethodHandle REF_invokeStatic:Method
TestLdcMethodHandle.main:""([Ljava/lang/String;)V"";
                                                            ^
1 error",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,CODETOOLS-7902892,,,,,,,,"2021-04-30 09:35;lkuskov;TestLdcMethodHandle.class;https://bugs.openjdk.org/secure/attachment/94468/TestLdcMethodHandle.class","2021-04-30 09:35;lkuskov;TestLdcMethodHandle.class.jasm;https://bugs.openjdk.org/secure/attachment/94467/TestLdcMethodHandle.class.jasm",,,,,,,,,,,,,,,,,,,,,,,,"0|i2snjv:",9223372036854775807,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@47358cbe,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Update IntelliJ Plugin build Readme,CODETOOLS-7902912,5048487,Bug,Resolved,CODETOOLS,Code Tools,software,duke,,,P5,Fixed,stuefe,stuefe,stuefe,2021-04-30 01:59,2021-04-30 07:31,2023-10-01 09:57,2021-04-30 07:31,,,,,,,,,tools,,0,,,,,,,,,,,,,,The Readme is a bit ambiguous in places and could be brushed up.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2snar:",9223372036854775807,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@41617238,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
jcstress: Sysfs topology parser should accept duplicate core IDs in different packages,CODETOOLS-7902909,5048402,Bug,Closed,CODETOOLS,Code Tools,software,duke,,,P4,Fixed,shade,shade,shade,2021-04-29 02:35,2021-04-29 02:56,2023-10-01 09:57,2021-04-29 02:56,,,,,,,,,tools,,0,,,,,,,,,,,,,,"There is an example on one of the hosts, where jcstress detects the topology as:

Detecting CPU topology and computing scheduling classes:
   Linux, using /sys/devices/system/cpu
   2 packages, 1 core per package, 2 threads per core

   CPU lists:
     Package #0, Core #0, Threads: 0, 1
     Package #1, Core #0, Threads: 0, 1

...whereas the real topology is:

# lscpu
Architecture:        x86_64
CPU op-mode(s):      32-bit, 64-bit
Byte Order:          Little Endian
CPU(s):              2
On-line CPU(s) list: 0,1
Thread(s) per core:  1
Core(s) per socket:  1
Socket(s):           2
NUMA node(s):        1

This is because core #0 is recorded for both packages #0 and #1.

This deadlocks the scheduler.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2smrv:",9223372036854775807,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@50120698,,,,,,,,,"2021-04-29 02:56;shade;https://github.com/openjdk/jcstress/commit/009981da6cc27ad4af1d686e97d59823bb97f96b;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
jcstress: Sysfs topology parser should accept non-consecutive package IDs,CODETOOLS-7902900,5048112,Bug,Closed,CODETOOLS,Code Tools,software,duke,,,P4,Fixed,shade,shade,shade,2021-04-27 06:34,2021-04-27 09:30,2023-10-01 09:57,2021-04-27 09:30,,,,,,,,,tools,,0,,,,,,,,,,,,,,"This is seen with AWS c6g instances: 
  org.openjdk.jcstress.os.topology.TopologyParseException: Package IDs are not consecutive: [60]

jcstress currently falls back to the realistic CPU topology, but that would not hold for the future.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2skzf:",9223372036854775807,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@50120698,,,,,,,,,"2021-04-27 09:30;shade;https://github.com/openjdk/jcstress/commit/b04e7986a91530c8939bd53d62875c542b939d44;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
jasm incorrectly processes reference_kind:reference_index pair in ldc Dynamic instructions,CODETOOLS-7902892,5047759,Bug,Resolved,CODETOOLS,Code Tools,software,duke,,,P2,Fixed,lkuskov,lkuskov,lkuskov,2021-04-22 21:26,2021-04-30 09:37,2023-10-01 09:57,2021-04-26 20:32,asm_tools_7.0,,,,,,,,tools,,0,,,,,,,,,,,,,,"processing of the reference_kind items is incorrect, excepting REF_invokeStatic, REF_invokeSpecial.
For example in the construction 
ldc Dynamic REF_invokeVirtual:InterfaceMethod ClassName:""<clinit>""
the InterfaceMethod tag causes jasm's failure",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,CODETOOLS-7902913,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2siy3:",9223372036854775807,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@47358cbe,,,,,,,,,"2021-04-26 16:23;lkuskov;Right now a parser interprets the following entries as equivalent:
class LdcConDyTwice {
...
  ldc	Dynamic REF_invokeInterface:InterfaceMethod LdcConDyTwice.""method"":"".....
...
  ldc	Dynamic REF_invokeInterface:LdcConDyTwice.""method"":"".....	
...
  ldc	Dynamic REF_invokeInterface:""method"":"".....	
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
jcstress: Fix new Sonar warnings,CODETOOLS-7902884,5046972,Bug,Closed,CODETOOLS,Code Tools,software,duke,,,P4,Fixed,shade,shade,shade,2021-04-15 03:14,2021-04-15 04:04,2023-10-01 09:57,2021-04-15 04:04,,,,,,,,,tools,,0,sonarcloud-found,,,,,,,,,,,,,"After recent commits, Sonar reports a few warnings. These should be fixed.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,CODETOOLS-7902875,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2seg3:",9223372036854775807,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@50120698,,,,,,,,,"2021-04-15 04:04;shade;https://github.com/openjdk/jcstress/commit/9c158ca2c3000fa6e8e9abe93def6c97ede58416;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
